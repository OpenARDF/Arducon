
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a8  00800100  00004cf6  00004daa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cf6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  008002a8  008002a8  00004f52  2**0
                  ALLOC
  3 .eeprom       000002e9  00810000  00810000  00004f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000523b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000440  00000000  00000000  000052d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006185  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001475  00000000  00000000  0000b89d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b9e  00000000  00000000  0000cd12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b34  00000000  00000000  000108b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001b00  00000000  00000000  000113e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004b37  00000000  00000000  00012ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000340  00000000  00000000  00017a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__ctors_end>
       4:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_1>
       8:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
       c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      10:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      14:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_5>
      18:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      1c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      20:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_8>
      24:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      28:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      2c:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__vector_11>
      30:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      34:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      38:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_14>
      3c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      40:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      44:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      48:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_18>
      4c:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_19>
      50:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      54:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_21>
      58:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      5c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      60:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      64:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      68:	47 02       	muls	r20, r23
      6a:	52 02       	muls	r21, r18
      6c:	5d 02       	muls	r21, r29
      6e:	68 02       	muls	r22, r24
      70:	73 02       	muls	r23, r19
      72:	7e 02       	muls	r23, r30
      74:	ea 02       	muls	r30, r26
      76:	89 02       	muls	r24, r25
      78:	ea 02       	muls	r30, r26
      7a:	ea 02       	muls	r30, r26
      7c:	ea 02       	muls	r30, r26
      7e:	94 02       	muls	r25, r20
      80:	9f 02       	muls	r25, r31
      82:	ac 02       	muls	r26, r28
      84:	b9 02       	muls	r27, r25
      86:	c6 02       	muls	r28, r22
      88:	d3 02       	muls	r29, r19
      8a:	e0 02       	muls	r30, r16
      8c:	f5 02       	muls	r31, r21
      8e:	f9 02       	muls	r31, r25
      90:	fd 02       	muls	r31, r29
      92:	01 03       	mulsu	r16, r17
      94:	05 03       	mulsu	r16, r21
      96:	09 03       	fmul	r16, r17
      98:	23 03       	mulsu	r18, r19
      9a:	0d 03       	fmul	r16, r21
      9c:	23 03       	mulsu	r18, r19
      9e:	23 03       	mulsu	r18, r19
      a0:	23 03       	mulsu	r18, r19
      a2:	0e 03       	fmul	r16, r22
      a4:	12 03       	mulsu	r17, r18
      a6:	17 03       	mulsu	r17, r23
      a8:	1b 03       	fmul	r17, r19
      aa:	1f 03       	fmul	r17, r23
      ac:	35 03       	mulsu	r19, r21
      ae:	3b 03       	fmul	r19, r19
      b0:	41 03       	mulsu	r20, r17
      b2:	47 03       	mulsu	r20, r23
      b4:	4d 03       	fmul	r20, r21
      b6:	53 03       	mulsu	r21, r19
      b8:	7c 03       	fmul	r23, r20
      ba:	59 03       	fmul	r21, r17
      bc:	7c 03       	fmul	r23, r20
      be:	7c 03       	fmul	r23, r20
      c0:	7c 03       	fmul	r23, r20
      c2:	5f 03       	fmul	r21, r23
      c4:	65 03       	mulsu	r22, r21
      c6:	6b 03       	fmul	r22, r19
      c8:	71 03       	mulsu	r23, r17
      ca:	77 03       	mulsu	r23, r23
      cc:	c6 0e       	add	r12, r22
      ce:	c6 0e       	add	r12, r22
      d0:	c6 0e       	add	r12, r22
      d2:	c6 0e       	add	r12, r22
      d4:	c6 0e       	add	r12, r22
      d6:	c6 0e       	add	r12, r22
      d8:	19 0f       	add	r17, r25
      da:	19 0f       	add	r17, r25
      dc:	e4 0e       	add	r14, r20
      de:	19 0f       	add	r17, r25
      e0:	19 0f       	add	r17, r25
      e2:	19 0f       	add	r17, r25
      e4:	19 0f       	add	r17, r25
      e6:	19 0f       	add	r17, r25
      e8:	19 0f       	add	r17, r25
      ea:	19 0f       	add	r17, r25
      ec:	19 0f       	add	r17, r25
      ee:	e4 0e       	add	r14, r20
      f0:	e4 0e       	add	r14, r20
      f2:	b2 0e       	add	r11, r18
      f4:	bc 0e       	add	r11, r28
      f6:	7a 1b       	sub	r23, r26
      f8:	3e 1b       	sub	r19, r30
      fa:	6a 1b       	sub	r22, r26
      fc:	82 1b       	sub	r24, r18
      fe:	6e 1b       	sub	r22, r30
     100:	82 1b       	sub	r24, r18
     102:	4e 1b       	sub	r20, r30
     104:	3a 1b       	sub	r19, r26
     106:	46 1b       	sub	r20, r22
     108:	4a 1b       	sub	r20, r26
     10a:	82 1b       	sub	r24, r18
     10c:	5e 1b       	sub	r21, r30
     10e:	32 1b       	sub	r19, r18
     110:	62 1b       	sub	r22, r18
     112:	2e 1b       	sub	r18, r30
     114:	42 1b       	sub	r20, r18
     116:	06 1b       	sub	r16, r22
     118:	0a 1b       	sub	r16, r26
     11a:	0e 1b       	sub	r16, r30
     11c:	12 1b       	sub	r17, r18
     11e:	16 1b       	sub	r17, r22
     120:	1a 1b       	sub	r17, r26
     122:	1e 1b       	sub	r17, r30
     124:	22 1b       	sub	r18, r18
     126:	26 1b       	sub	r18, r22
     128:	2a 1b       	sub	r18, r26
     12a:	52 1b       	sub	r21, r18
     12c:	56 1b       	sub	r21, r22
     12e:	7e 1b       	sub	r23, r30
     130:	5a 1b       	sub	r21, r26
     132:	82 1b       	sub	r24, r18
     134:	36 1b       	sub	r19, r22
     136:	72 1b       	sub	r23, r18
     138:	86 1b       	sub	r24, r22
     13a:	a2 1a       	sub	r10, r18
     13c:	a6 1a       	sub	r10, r22
     13e:	aa 1a       	sub	r10, r26
     140:	ae 1a       	sub	r10, r30
     142:	b2 1a       	sub	r11, r18
     144:	b6 1a       	sub	r11, r22
     146:	ba 1a       	sub	r11, r26
     148:	be 1a       	sub	r11, r30
     14a:	c2 1a       	sub	r12, r18
     14c:	c6 1a       	sub	r12, r22
     14e:	ca 1a       	sub	r12, r26
     150:	ce 1a       	sub	r12, r30
     152:	d2 1a       	sub	r13, r18
     154:	d6 1a       	sub	r13, r22
     156:	da 1a       	sub	r13, r26
     158:	de 1a       	sub	r13, r30
     15a:	e2 1a       	sub	r14, r18
     15c:	e6 1a       	sub	r14, r22
     15e:	ea 1a       	sub	r14, r26
     160:	ee 1a       	sub	r14, r30
     162:	f2 1a       	sub	r15, r18
     164:	f6 1a       	sub	r15, r22
     166:	fa 1a       	sub	r15, r26
     168:	fe 1a       	sub	r15, r30
     16a:	02 1b       	sub	r16, r18
     16c:	82 1b       	sub	r24, r18
     16e:	82 1b       	sub	r24, r18
     170:	82 1b       	sub	r24, r18
     172:	82 1b       	sub	r24, r18
     174:	66 1b       	sub	r22, r22
     176:	82 1b       	sub	r24, r18
     178:	82 1b       	sub	r24, r18
     17a:	82 1b       	sub	r24, r18
     17c:	82 1b       	sub	r24, r18
     17e:	82 1b       	sub	r24, r18
     180:	82 1b       	sub	r24, r18
     182:	82 1b       	sub	r24, r18
     184:	82 1b       	sub	r24, r18
     186:	82 1b       	sub	r24, r18
     188:	82 1b       	sub	r24, r18
     18a:	82 1b       	sub	r24, r18
     18c:	82 1b       	sub	r24, r18
     18e:	82 1b       	sub	r24, r18
     190:	82 1b       	sub	r24, r18
     192:	82 1b       	sub	r24, r18
     194:	82 1b       	sub	r24, r18
     196:	82 1b       	sub	r24, r18
     198:	82 1b       	sub	r24, r18
     19a:	82 1b       	sub	r24, r18
     19c:	82 1b       	sub	r24, r18
     19e:	82 1b       	sub	r24, r18
     1a0:	82 1b       	sub	r24, r18
     1a2:	82 1b       	sub	r24, r18
     1a4:	82 1b       	sub	r24, r18
     1a6:	82 1b       	sub	r24, r18
     1a8:	82 1b       	sub	r24, r18
     1aa:	82 1b       	sub	r24, r18
     1ac:	82 1b       	sub	r24, r18
     1ae:	76 1b       	sub	r23, r22
     1b0:	05 a8       	ldd	r0, Z+53	; 0x35
     1b2:	4c cd       	rjmp	.-1384   	; 0xfffffc4c <__eeprom_end+0xff7ef963>
     1b4:	b2 d4       	rcall	.+2404   	; 0xb1a <__stack+0x21b>
     1b6:	4e b9       	out	0x0e, r20	; 14
     1b8:	38 36       	cpi	r19, 0x68	; 104
     1ba:	a9 02       	muls	r26, r25
     1bc:	0c 50       	subi	r16, 0x0C	; 12
     1be:	b9 91       	ld	r27, Y+
     1c0:	86 88       	ldd	r8, Z+22	; 0x16
     1c2:	08 3c       	cpi	r16, 0xC8	; 200
     1c4:	a6 aa       	std	Z+54, r10	; 0x36
     1c6:	aa 2a       	or	r10, r26
     1c8:	be 00       	.word	0x00be	; ????
     1ca:	00 00       	nop
     1cc:	80 3f       	cpi	r24, 0xF0	; 240

000001ce <__trampolines_end>:
     1ce:	45 72       	andi	r20, 0x25	; 37
     1d0:	72 3a       	cpi	r23, 0xA2	; 162
     1d2:	20 54       	subi	r18, 0x40	; 64
     1d4:	69 6d       	ori	r22, 0xD9	; 217
     1d6:	65 20       	and	r6, r5
     1d8:	69 6e       	ori	r22, 0xE9	; 233
     1da:	20 70       	andi	r18, 0x00	; 0
     1dc:	61 73       	andi	r22, 0x31	; 49
     1de:	74 21       	and	r23, r4
     1e0:	0a 00       	.word	0x000a	; ????

000001e2 <_ZL21TEXT_ERR_INVALID_TIME>:
     1e2:	45 72 72 3a 20 49 6e 76 61 6c 69 64 20 74 69 6d     Err: Invalid tim
     1f2:	65 21 0a 00                                         e!..

000001f6 <_ZL22TEXT_ERR_START_IN_PAST>:
     1f6:	45 72 72 3a 20 53 74 61 72 74 20 69 6e 20 70 61     Err: Start in pa
     206:	73 74 21 0a 00                                      st!..

0000020b <_ZL23TEXT_ERR_FINISH_IN_PAST>:
     20b:	45 72 72 3a 20 46 69 6e 69 73 68 20 69 6e 20 70     Err: Finish in p
     21b:	61 73 74 21 0a 00                                   ast!..

00000221 <_ZL28TEXT_ERR_FINISH_BEFORE_START>:
     221:	45 72 72 3a 20 46 69 6e 69 73 68 20 62 65 66 6f     Err: Finish befo
     231:	72 65 20 73 74 61 72 74 21 0a 00                    re start!..

0000023c <_ZL11TEXT_SET_ID>:
     23c:	49 44 20 5b 22 63 61 6c 6c 73 69 67 6e 22 5d 20     ID ["callsign"] 
     24c:	3c 2d 20 53 65 74 20 63 61 6c 6c 73 69 67 6e 0a     <- Set callsign.
	...

0000025d <_ZL15TEXT_SET_FINISH>:
     25d:	43 4c 4b 20 46 20 59 59 4d 4d 44 44 68 68 6d 6d     CLK F YYMMDDhhmm
     26d:	73 73 20 3c 2d 20 53 65 74 20 66 69 6e 69 73 68     ss <- Set finish
     27d:	20 74 69 6d 65 0a 00                                 time..

00000284 <_ZL14TEXT_SET_START>:
     284:	43 4c 4b 20 53 20 59 59 4d 4d 44 44 68 68 6d 6d     CLK S YYMMDDhhmm
     294:	73 73 20 3c 2d 20 53 65 74 20 73 74 61 72 74 20     ss <- Set start 
     2a4:	74 69 6d 65 0a 00                                   time..

000002aa <_ZL13TEXT_SET_TIME>:
     2aa:	43 4c 4b 20 54 20 59 59 4d 4d 44 44 68 68 6d 6d     CLK T YYMMDDhhmm
     2ba:	73 73 20 3c 2d 20 53 65 74 20 63 75 72 72 65 6e     ss <- Set curren
     2ca:	74 20 74 69 6d 65 0a 00                             t time..

000002d2 <_ZL9HELP_TEXT>:
     2d2:	0a 43 6f 6d 6d 61 6e 64 73 3a 0a 20 20 43 4c 4b     .Commands:.  CLK
     2e2:	20 5b 54 7c 53 7c 46 20 5b 22 59 59 4d 4d 44 44      [T|S|F ["YYMMDD
     2f2:	68 68 6d 6d 73 73 22 5d 5d 20 2d 20 52 65 61 64     hhmmss"]] - Read
     302:	2f 73 65 74 20 74 69 6d 65 2f 73 74 61 72 74 2f     /set time/start/
     312:	66 69 6e 69 73 68 0a 20 20 46 4f 58 20 5b 6e 5d     finish.  FOX [n]
     322:	2d 20 53 65 74 20 66 6f 78 20 72 6f 6c 65 0a 20     - Set fox role. 
     332:	20 49 44 20 5b 63 2e 2e 2e 63 5d 20 2d 20 20 53      ID [c...c] -  S
     342:	65 74 20 63 61 6c 6c 73 69 67 6e 0a 20 20 53 54     et callsign.  ST
     352:	41 20 5b 30 7c 31 5d 20 2d 20 53 74 61 72 74 20     A [0|1] - Start 
     362:	74 6f 6e 65 73 20 6f 6e 2f 6f 66 66 0a 20 20 53     tones on/off.  S
     372:	59 4e 20 30 7c 31 7c 32 20 2d 20 53 79 6e 63 68     YN 0|1|2 - Synch
     382:	72 6f 6e 69 7a 65 0a 20 20 54 45 4d 20 2d 20 52     ronize.  TEM - R
     392:	65 61 64 20 74 65 6d 70 0a 20 20 53 50 44 20 5b     ead temp.  SPD [
     3a2:	73 5d 20 2d 20 53 65 74 20 49 44 20 63 6f 64 65     s] - Set ID code
     3b2:	20 73 70 65 65 64 0a 20 20 56 45 52 20 2d 20 53      speed.  VER - S
     3c2:	2f 57 20 76 65 72 73 69 6f 6e 00                    /W version.

000003cd <_ZL17PRODUCT_NAME_LONG>:
     3cd:	2a 2a 2a 20 41 72 64 75 63 6f 6e 20 46 6f 78 20     *** Arducon Fox 
     3dd:	43 6f 6e 74 72 6f 6c 6c 65 72 20 56 65 72 2e 20     Controller Ver. 
     3ed:	30 2e 31 37 20 2a 2a 2a 0a 00 00                    0.17 ***...

000003f8 <__ctors_end>:
     3f8:	11 24       	eor	r1, r1
     3fa:	1f be       	out	0x3f, r1	; 63
     3fc:	cf ef       	ldi	r28, 0xFF	; 255
     3fe:	d8 e0       	ldi	r29, 0x08	; 8
     400:	de bf       	out	0x3e, r29	; 62
     402:	cd bf       	out	0x3d, r28	; 61

00000404 <__do_copy_data>:
     404:	12 e0       	ldi	r17, 0x02	; 2
     406:	a0 e0       	ldi	r26, 0x00	; 0
     408:	b1 e0       	ldi	r27, 0x01	; 1
     40a:	e6 ef       	ldi	r30, 0xF6	; 246
     40c:	fc e4       	ldi	r31, 0x4C	; 76
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__do_copy_data+0x10>
     410:	05 90       	lpm	r0, Z+
     412:	0d 92       	st	X+, r0
     414:	a8 3a       	cpi	r26, 0xA8	; 168
     416:	b1 07       	cpc	r27, r17
     418:	d9 f7       	brne	.-10     	; 0x410 <__do_copy_data+0xc>

0000041a <__do_clear_bss>:
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	a8 ea       	ldi	r26, 0xA8	; 168
     41e:	b2 e0       	ldi	r27, 0x02	; 2
     420:	01 c0       	rjmp	.+2      	; 0x424 <.do_clear_bss_start>

00000422 <.do_clear_bss_loop>:
     422:	1d 92       	st	X+, r1

00000424 <.do_clear_bss_start>:
     424:	ae 3e       	cpi	r26, 0xEE	; 238
     426:	b2 07       	cpc	r27, r18
     428:	e1 f7       	brne	.-8      	; 0x422 <.do_clear_bss_loop>
     42a:	0e 94 ae 19 	call	0x335c	; 0x335c <main>
     42e:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <_exit>

00000432 <__bad_interrupt>:
     432:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000436 <month_length>:
     436:	62 30       	cpi	r22, 0x02	; 2
     438:	21 f4       	brne	.+8      	; 0x442 <month_length+0xc>
     43a:	0e 94 28 02 	call	0x450	; 0x450 <is_leap_year>
     43e:	84 5e       	subi	r24, 0xE4	; 228
     440:	08 95       	ret
     442:	68 30       	cpi	r22, 0x08	; 8
     444:	08 f0       	brcs	.+2      	; 0x448 <month_length+0x12>
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	61 70       	andi	r22, 0x01	; 1
     44a:	8e e1       	ldi	r24, 0x1E	; 30
     44c:	86 0f       	add	r24, r22
     44e:	08 95       	ret

00000450 <is_leap_year>:
     450:	9c 01       	movw	r18, r24
     452:	23 70       	andi	r18, 0x03	; 3
     454:	33 27       	eor	r19, r19
     456:	23 2b       	or	r18, r19
     458:	59 f4       	brne	.+22     	; 0x470 <is_leap_year+0x20>
     45a:	64 e6       	ldi	r22, 0x64	; 100
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	0e 94 1d 22 	call	0x443a	; 0x443a <__divmodhi4>
     462:	89 2b       	or	r24, r25
     464:	39 f4       	brne	.+14     	; 0x474 <is_leap_year+0x24>
     466:	63 70       	andi	r22, 0x03	; 3
     468:	77 27       	eor	r23, r23
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	67 2b       	or	r22, r23
     46e:	19 f0       	breq	.+6      	; 0x476 <is_leap_year+0x26>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	08 95       	ret
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret

00000478 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	32 97       	sbiw	r30, 0x02	; 2
     47e:	e2 31       	cpi	r30, 0x12	; 18
     480:	f1 05       	cpc	r31, r1
     482:	08 f0       	brcs	.+2      	; 0x486 <_Z7pinModehh+0xe>
     484:	a7 c0       	rjmp	.+334    	; 0x5d4 <_Z7pinModehh+0x15c>
     486:	ec 5c       	subi	r30, 0xCC	; 204
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     48e:	61 30       	cpi	r22, 0x01	; 1
     490:	11 f4       	brne	.+4      	; 0x496 <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     492:	52 9a       	sbi	0x0a, 2	; 10
     494:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     496:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     498:	63 30       	cpi	r22, 0x03	; 3
     49a:	11 f4       	brne	.+4      	; 0x4a0 <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     49c:	5a 9a       	sbi	0x0b, 2	; 11
     49e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     4a0:	5a 98       	cbi	0x0b, 2	; 11
     4a2:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     4a4:	61 30       	cpi	r22, 0x01	; 1
     4a6:	11 f4       	brne	.+4      	; 0x4ac <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     4a8:	53 9a       	sbi	0x0a, 3	; 10
     4aa:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     4ac:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     4ae:	63 30       	cpi	r22, 0x03	; 3
     4b0:	11 f4       	brne	.+4      	; 0x4b6 <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     4b2:	5b 9a       	sbi	0x0b, 3	; 11
     4b4:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     4b6:	5b 98       	cbi	0x0b, 3	; 11
     4b8:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     4ba:	61 30       	cpi	r22, 0x01	; 1
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     4be:	54 9a       	sbi	0x0a, 4	; 10
     4c0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     4c2:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     4c4:	63 30       	cpi	r22, 0x03	; 3
     4c6:	11 f4       	brne	.+4      	; 0x4cc <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     4c8:	5c 9a       	sbi	0x0b, 4	; 11
     4ca:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     4cc:	5c 98       	cbi	0x0b, 4	; 11
     4ce:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     4d0:	61 30       	cpi	r22, 0x01	; 1
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     4d4:	55 9a       	sbi	0x0a, 5	; 10
     4d6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     4d8:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     4da:	63 30       	cpi	r22, 0x03	; 3
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     4de:	5d 9a       	sbi	0x0b, 5	; 11
     4e0:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     4e2:	5d 98       	cbi	0x0b, 5	; 11
     4e4:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     4e6:	61 30       	cpi	r22, 0x01	; 1
     4e8:	11 f4       	brne	.+4      	; 0x4ee <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     4ea:	56 9a       	sbi	0x0a, 6	; 10
     4ec:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     4ee:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     4f0:	63 30       	cpi	r22, 0x03	; 3
     4f2:	11 f4       	brne	.+4      	; 0x4f8 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     4f4:	5e 9a       	sbi	0x0b, 6	; 11
     4f6:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     4f8:	5e 98       	cbi	0x0b, 6	; 11
     4fa:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     4fc:	61 30       	cpi	r22, 0x01	; 1
     4fe:	11 f4       	brne	.+4      	; 0x504 <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     500:	57 9a       	sbi	0x0a, 7	; 10
     502:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     504:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     506:	63 30       	cpi	r22, 0x03	; 3
     508:	11 f4       	brne	.+4      	; 0x50e <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     50a:	5f 9a       	sbi	0x0b, 7	; 11
     50c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     50e:	5f 98       	cbi	0x0b, 7	; 11
     510:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     512:	61 30       	cpi	r22, 0x01	; 1
     514:	11 f4       	brne	.+4      	; 0x51a <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB1);
     516:	21 9a       	sbi	0x04, 1	; 4
     518:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     51a:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     51c:	63 30       	cpi	r22, 0x03	; 3
     51e:	11 f4       	brne	.+4      	; 0x524 <_Z7pinModehh+0xac>
				{
					PORTD  |= (1 << PORTB1);
     520:	59 9a       	sbi	0x0b, 1	; 11
     522:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB1);
     524:	59 98       	cbi	0x0b, 1	; 11
     526:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     528:	61 30       	cpi	r22, 0x01	; 1
     52a:	11 f4       	brne	.+4      	; 0x530 <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB5);
     52c:	25 9a       	sbi	0x04, 5	; 4
     52e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     530:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     532:	63 30       	cpi	r22, 0x03	; 3
     534:	11 f4       	brne	.+4      	; 0x53a <_Z7pinModehh+0xc2>
				{
					PORTD  |= (1 << PORTB5);
     536:	5d 9a       	sbi	0x0b, 5	; 11
     538:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     53a:	5d 98       	cbi	0x0b, 5	; 11
     53c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     53e:	61 30       	cpi	r22, 0x01	; 1
     540:	11 f4       	brne	.+4      	; 0x546 <_Z7pinModehh+0xce>
			{
				DDRC  |= (1 << PORTC0);
     542:	38 9a       	sbi	0x07, 0	; 7
     544:	0b c0       	rjmp	.+22     	; 0x55c <_Z7pinModehh+0xe4>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     546:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     548:	63 30       	cpi	r22, 0x03	; 3
     54a:	19 f4       	brne	.+6      	; 0x552 <_Z7pinModehh+0xda>
				{
					PORTC  |= (1 << PORTC0);
     54c:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     54e:	39 98       	cbi	0x07, 1	; 7
     550:	0a c0       	rjmp	.+20     	; 0x566 <_Z7pinModehh+0xee>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     552:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     554:	39 98       	cbi	0x07, 1	; 7
     556:	0a c0       	rjmp	.+20     	; 0x56c <_Z7pinModehh+0xf4>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     558:	61 30       	cpi	r22, 0x01	; 1
     55a:	11 f4       	brne	.+4      	; 0x560 <_Z7pinModehh+0xe8>
			{
				DDRC  |= (1 << PORTC1);
     55c:	39 9a       	sbi	0x07, 1	; 7
     55e:	0b c0       	rjmp	.+22     	; 0x576 <_Z7pinModehh+0xfe>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     560:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     562:	63 30       	cpi	r22, 0x03	; 3
     564:	19 f4       	brne	.+6      	; 0x56c <_Z7pinModehh+0xf4>
				{
					PORTC  |= (1 << PORTC1);
     566:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     568:	3a 98       	cbi	0x07, 2	; 7
     56a:	0a c0       	rjmp	.+20     	; 0x580 <_Z7pinModehh+0x108>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     56c:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     56e:	3a 98       	cbi	0x07, 2	; 7
     570:	0a c0       	rjmp	.+20     	; 0x586 <_Z7pinModehh+0x10e>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     572:	61 30       	cpi	r22, 0x01	; 1
     574:	11 f4       	brne	.+4      	; 0x57a <_Z7pinModehh+0x102>
			{
				DDRC  |= (1 << PORTC2);
     576:	3a 9a       	sbi	0x07, 2	; 7
     578:	0b c0       	rjmp	.+22     	; 0x590 <_Z7pinModehh+0x118>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     57a:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     57c:	63 30       	cpi	r22, 0x03	; 3
     57e:	19 f4       	brne	.+6      	; 0x586 <_Z7pinModehh+0x10e>
				{
					PORTC  |= (1 << PORTC2);
     580:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     582:	3b 98       	cbi	0x07, 3	; 7
     584:	0a c0       	rjmp	.+20     	; 0x59a <_Z7pinModehh+0x122>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     586:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     588:	3b 98       	cbi	0x07, 3	; 7
     58a:	0a c0       	rjmp	.+20     	; 0x5a0 <_Z7pinModehh+0x128>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     58c:	61 30       	cpi	r22, 0x01	; 1
     58e:	11 f4       	brne	.+4      	; 0x594 <_Z7pinModehh+0x11c>
			{
				DDRC  |= (1 << PORTC3);
     590:	3b 9a       	sbi	0x07, 3	; 7
     592:	0b c0       	rjmp	.+22     	; 0x5aa <_Z7pinModehh+0x132>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     594:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     596:	63 30       	cpi	r22, 0x03	; 3
     598:	19 f4       	brne	.+6      	; 0x5a0 <_Z7pinModehh+0x128>
				{
					PORTC  |= (1 << PORTC3);
     59a:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     59c:	3c 98       	cbi	0x07, 4	; 7
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <_Z7pinModehh+0x13c>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     5a0:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     5a2:	3c 98       	cbi	0x07, 4	; 7
     5a4:	0a c0       	rjmp	.+20     	; 0x5ba <_Z7pinModehh+0x142>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     5a6:	61 30       	cpi	r22, 0x01	; 1
     5a8:	11 f4       	brne	.+4      	; 0x5ae <_Z7pinModehh+0x136>
			{
				DDRC  |= (1 << PORTC4);
     5aa:	3c 9a       	sbi	0x07, 4	; 7
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <_Z7pinModehh+0x14c>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     5ae:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     5b0:	63 30       	cpi	r22, 0x03	; 3
     5b2:	19 f4       	brne	.+6      	; 0x5ba <_Z7pinModehh+0x142>
				{
					PORTC  |= (1 << PORTC4);
     5b4:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     5b6:	3d 98       	cbi	0x07, 5	; 7
     5b8:	0a c0       	rjmp	.+20     	; 0x5ce <_Z7pinModehh+0x156>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     5ba:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     5bc:	3d 98       	cbi	0x07, 5	; 7
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <_Z7pinModehh+0x15a>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     5c0:	61 30       	cpi	r22, 0x01	; 1
     5c2:	11 f4       	brne	.+4      	; 0x5c8 <_Z7pinModehh+0x150>
			{
				DDRC  |= (1 << PORTC5);
     5c4:	3d 9a       	sbi	0x07, 5	; 7
     5c6:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     5c8:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     5ca:	63 30       	cpi	r22, 0x03	; 3
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <_Z7pinModehh+0x15a>
				{
					PORTC  |= (1 << PORTC5);
     5ce:	45 9a       	sbi	0x08, 5	; 8
     5d0:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     5d2:	45 98       	cbi	0x08, 5	; 8
     5d4:	08 95       	ret

000005d6 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	fc 01       	movw	r30, r24
     5da:	32 97       	sbiw	r30, 0x02	; 2
     5dc:	e0 31       	cpi	r30, 0x10	; 16
     5de:	f1 05       	cpc	r31, r1
     5e0:	90 f5       	brcc	.+100    	; 0x646 <_Z11digitalReadh+0x70>
     5e2:	ea 5b       	subi	r30, 0xBA	; 186
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     5ea:	29 b1       	in	r18, 0x09	; 9
     5ec:	24 70       	andi	r18, 0x04	; 4
     5ee:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     5f0:	2c c0       	rjmp	.+88     	; 0x64a <_Z11digitalReadh+0x74>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     5f2:	29 b1       	in	r18, 0x09	; 9
     5f4:	28 70       	andi	r18, 0x08	; 8
     5f6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     5f8:	28 c0       	rjmp	.+80     	; 0x64a <_Z11digitalReadh+0x74>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     5fa:	29 b1       	in	r18, 0x09	; 9
     5fc:	20 71       	andi	r18, 0x10	; 16
     5fe:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     600:	24 c0       	rjmp	.+72     	; 0x64a <_Z11digitalReadh+0x74>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     602:	29 b1       	in	r18, 0x09	; 9
     604:	20 72       	andi	r18, 0x20	; 32
     606:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     608:	20 c0       	rjmp	.+64     	; 0x64a <_Z11digitalReadh+0x74>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     60a:	29 b1       	in	r18, 0x09	; 9
     60c:	20 74       	andi	r18, 0x40	; 64
     60e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     610:	1c c0       	rjmp	.+56     	; 0x64a <_Z11digitalReadh+0x74>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     612:	29 b1       	in	r18, 0x09	; 9
     614:	20 78       	andi	r18, 0x80	; 128
     616:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     618:	18 c0       	rjmp	.+48     	; 0x64a <_Z11digitalReadh+0x74>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     61a:	83 b1       	in	r24, 0x03	; 3
		}

		case D13:
		{
			result = PINB & (1 << PORTB5);
     61c:	23 b1       	in	r18, 0x03	; 3
     61e:	20 72       	andi	r18, 0x20	; 32
     620:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     622:	13 c0       	rjmp	.+38     	; 0x64a <_Z11digitalReadh+0x74>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     624:	86 b1       	in	r24, 0x06	; 6
     626:	28 2f       	mov	r18, r24
     628:	21 70       	andi	r18, 0x01	; 1
     62a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     62c:	0e c0       	rjmp	.+28     	; 0x64a <_Z11digitalReadh+0x74>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     62e:	26 b1       	in	r18, 0x06	; 6
     630:	22 70       	andi	r18, 0x02	; 2
     632:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     634:	0a c0       	rjmp	.+20     	; 0x64a <_Z11digitalReadh+0x74>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     636:	26 b1       	in	r18, 0x06	; 6
     638:	24 70       	andi	r18, 0x04	; 4
     63a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     63c:	06 c0       	rjmp	.+12     	; 0x64a <_Z11digitalReadh+0x74>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     63e:	26 b1       	in	r18, 0x06	; 6
     640:	28 70       	andi	r18, 0x08	; 8
     642:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     644:	02 c0       	rjmp	.+4      	; 0x64a <_Z11digitalReadh+0x74>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	23 2b       	or	r18, r19
     64e:	09 f4       	brne	.+2      	; 0x652 <_Z11digitalReadh+0x7c>
     650:	80 e0       	ldi	r24, 0x00	; 0
}
     652:	08 95       	ret

00000654 <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	fc 01       	movw	r30, r24
     658:	32 97       	sbiw	r30, 0x02	; 2
     65a:	e0 31       	cpi	r30, 0x10	; 16
     65c:	f1 05       	cpc	r31, r1
     65e:	08 f0       	brcs	.+2      	; 0x662 <_Z12digitalWritehh+0xe>
     660:	4b c0       	rjmp	.+150    	; 0x6f8 <_Z12digitalWritehh+0xa4>
     662:	ea 5a       	subi	r30, 0xAA	; 170
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__tablejump2__>
	{
		case D2:
		{
			if(value)
     66a:	66 23       	and	r22, r22
     66c:	11 f0       	breq	.+4      	; 0x672 <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     66e:	5a 9a       	sbi	0x0b, 2	; 11
     670:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     672:	5a 98       	cbi	0x0b, 2	; 11
     674:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     676:	66 23       	and	r22, r22
     678:	11 f0       	breq	.+4      	; 0x67e <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     67a:	5b 9a       	sbi	0x0b, 3	; 11
     67c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     67e:	5b 98       	cbi	0x0b, 3	; 11
     680:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     682:	66 23       	and	r22, r22
     684:	11 f0       	breq	.+4      	; 0x68a <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     686:	5c 9a       	sbi	0x0b, 4	; 11
     688:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     68a:	5c 98       	cbi	0x0b, 4	; 11
     68c:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     68e:	66 23       	and	r22, r22
     690:	11 f0       	breq	.+4      	; 0x696 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     692:	5d 9a       	sbi	0x0b, 5	; 11
     694:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     696:	5d 98       	cbi	0x0b, 5	; 11
     698:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     69a:	66 23       	and	r22, r22
     69c:	11 f0       	breq	.+4      	; 0x6a2 <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     69e:	5e 9a       	sbi	0x0b, 6	; 11
     6a0:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     6a2:	5e 98       	cbi	0x0b, 6	; 11
     6a4:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     6a6:	66 23       	and	r22, r22
     6a8:	11 f0       	breq	.+4      	; 0x6ae <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     6aa:	5f 9a       	sbi	0x0b, 7	; 11
     6ac:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     6ae:	5f 98       	cbi	0x0b, 7	; 11
     6b0:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     6b2:	66 23       	and	r22, r22
     6b4:	11 f0       	breq	.+4      	; 0x6ba <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB1);
     6b6:	29 9a       	sbi	0x05, 1	; 5
     6b8:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     6ba:	29 98       	cbi	0x05, 1	; 5
     6bc:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     6be:	66 23       	and	r22, r22
     6c0:	11 f0       	breq	.+4      	; 0x6c6 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB5);
     6c2:	2d 9a       	sbi	0x05, 5	; 5
     6c4:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     6c6:	2d 98       	cbi	0x05, 5	; 5
     6c8:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     6ca:	66 23       	and	r22, r22
     6cc:	11 f0       	breq	.+4      	; 0x6d2 <_Z12digitalWritehh+0x7e>
			{
				PORTC  |= (1 << PORTC0);
     6ce:	40 9a       	sbi	0x08, 0	; 8
     6d0:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     6d2:	40 98       	cbi	0x08, 0	; 8
     6d4:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     6d6:	66 23       	and	r22, r22
     6d8:	11 f0       	breq	.+4      	; 0x6de <_Z12digitalWritehh+0x8a>
			{
				PORTC  |= (1 << PORTC1);
     6da:	41 9a       	sbi	0x08, 1	; 8
     6dc:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     6de:	41 98       	cbi	0x08, 1	; 8
     6e0:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     6e2:	66 23       	and	r22, r22
     6e4:	11 f0       	breq	.+4      	; 0x6ea <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC2);
     6e6:	42 9a       	sbi	0x08, 2	; 8
     6e8:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     6ea:	42 98       	cbi	0x08, 2	; 8
     6ec:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     6ee:	66 23       	and	r22, r22
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC3);
     6f2:	43 9a       	sbi	0x08, 3	; 8
     6f4:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     6f6:	43 98       	cbi	0x08, 3	; 8
     6f8:	08 95       	ret

000006fa <_Z16sendEEPROMStringPc>:

		failure = FALSE;
	}
	
	return failure;
}
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	ec 01       	movw	r28, r24
     702:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
     706:	18 2f       	mov	r17, r24
     708:	88 23       	and	r24, r24
     70a:	89 f0       	breq	.+34     	; 0x72e <_Z16sendEEPROMStringPc+0x34>
     70c:	21 96       	adiw	r28, 0x01	; 1
     70e:	03 c0       	rjmp	.+6      	; 0x716 <_Z16sendEEPROMStringPc+0x1c>
     710:	21 96       	adiw	r28, 0x01	; 1
     712:	11 23       	and	r17, r17
     714:	61 f0       	breq	.+24     	; 0x72e <_Z16sendEEPROMStringPc+0x34>
     716:	81 2f       	mov	r24, r17
     718:	0e 94 90 09 	call	0x1320	; 0x1320 <_Z12lb_echo_charh>
     71c:	ce 01       	movw	r24, r28
     71e:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
     722:	18 2f       	mov	r17, r24
     724:	0e 94 01 09 	call	0x1202	; 0x1202 <_Z19linkbusTxInProgressv>
     728:	81 11       	cpse	r24, r1
     72a:	fc cf       	rjmp	.-8      	; 0x724 <_Z16sendEEPROMStringPc+0x2a>
     72c:	f1 cf       	rjmp	.-30     	; 0x710 <_Z16sendEEPROMStringPc+0x16>
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	08 95       	ret

00000736 <_Z20initializeEEPROMVarsv>:
#if INIT_EEPROM_ONLY
/*
 * Set volatile variables to their values stored in EEPROM
 */
BOOL initializeEEPROMVars(void)
{
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
		uint8_t x = eeprom_read_byte((const uint8_t*)&i);
		if(x != 0xFF) err = TRUE;
	}
#endif // !COMPILE_FOR_ATMELSTUDIO7

	g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
     746:	84 e1       	ldi	r24, 0x14	; 20
     748:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_id_codespeed>
	eeprom_write_byte(&ee_id_codespeed,g_id_codespeed);
     74c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
     750:	8b e5       	ldi	r24, 0x5B	; 91
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>

	g_fox = EEPROM_FOX_SETTING_DEFAULT;
     758:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <g_fox>
	eeprom_write_byte(&ee_fox_setting,g_fox);
     75c:	60 91 dd 04 	lds	r22, 0x04DD	; 0x8004dd <g_fox>
     760:	8a e5       	ldi	r24, 0x5A	; 90
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>

	g_atmega_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
     768:	82 e9       	ldi	r24, 0x92	; 146
     76a:	9f ef       	ldi	r25, 0xFF	; 255
     76c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_atmega_temp_calibration+0x1>
     770:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_atmega_temp_calibration>
	eeprom_write_word((uint16_t*)&ee_atmega_temp_calibration,(uint16_t)g_atmega_temp_calibration);
     774:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_atmega_temp_calibration>
     778:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <g_atmega_temp_calibration+0x1>
     77c:	87 e5       	ldi	r24, 0x57	; 87
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <eeprom_write_word>

	i2c_init();          /* Needs to happen before reading RTC */
     784:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_Z8i2c_initv>
	
	g_rv3028_offset = rv3028_get_offset_RAM();
     788:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_Z21rv3028_get_offset_RAMv>
     78c:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <g_rv3028_offset+0x1>
     790:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <g_rv3028_offset>
	eeprom_write_word((uint16_t*)&ee_rv3028_offset,(uint16_t)g_rv3028_offset);
     794:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <g_rv3028_offset>
     798:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <g_rv3028_offset+0x1>
     79c:	85 e5       	ldi	r24, 0x55	; 85
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <eeprom_write_word>

	g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
     7a4:	c1 e0       	ldi	r28, 0x01	; 1
     7a6:	c0 93 88 04 	sts	0x0488, r28	; 0x800488 <g_enable_LEDs>
	eeprom_write_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
     7aa:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <g_enable_LEDs>
     7ae:	89 e5       	ldi	r24, 0x59	; 89
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>

	g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
     7b6:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <g_enable_start_timer>
	eeprom_write_byte(&ee_enable_start_timer,g_enable_start_timer);    /* Only gets set by a serial command */
     7ba:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <g_enable_start_timer>
     7be:	84 e5       	ldi	r24, 0x54	; 84
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>

	g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
     7c6:	c0 93 86 04 	sts	0x0486, r28	; 0x800486 <g_enable_transmitter>
	eeprom_write_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
     7ca:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <g_enable_transmitter>
     7ce:	83 e5       	ldi	r24, 0x53	; 83
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     7d6:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_event_start_epoch>
     7da:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_event_start_epoch+0x1>
     7de:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_event_start_epoch+0x2>
     7e2:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_event_start_epoch+0x3>
	eeprom_write_dword(&ee_event_start_epoch,g_event_start_epoch);
     7e6:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
     7ea:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
     7ee:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
     7f2:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
     7f6:	8f e4       	ldi	r24, 0x4F	; 79
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <eeprom_write_dword>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     7fe:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_event_start_epoch>
     802:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_event_start_epoch+0x1>
     806:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_event_start_epoch+0x2>
     80a:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_event_start_epoch+0x3>
	eeprom_write_dword(&ee_event_finish_epoch,g_event_start_epoch);
     80e:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
     812:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
     816:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
     81a:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
     81e:	8b e4       	ldi	r24, 0x4B	; 75
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <eeprom_write_dword>

	g_messages_text[STATION_ID][0] = '\0';
     826:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <g_messages_text+0x15>
	eeprom_write_byte((uint8_t*)&ee_stationID_text[0],0);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	84 ed       	ldi	r24, 0xD4	; 212
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     834:	0c e5       	ldi	r16, 0x5C	; 92
     836:	12 e0       	ldi	r17, 0x02	; 2

	/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		* ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		* Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
	for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     838:	c0 e0       	ldi	r28, 0x00	; 0
     83a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
		eeprom_write_byte((uint8_t*)&ee_temperature_table[i],val);
     83c:	0f 2e       	mov	r0, r31
     83e:	f8 ee       	ldi	r31, 0xE8	; 232
     840:	cf 2e       	mov	r12, r31
     842:	f3 e0       	ldi	r31, 0x03	; 3
     844:	df 2e       	mov	r13, r31
     846:	e1 2c       	mov	r14, r1
     848:	f1 2c       	mov	r15, r1
     84a:	f0 2d       	mov	r31, r0
     84c:	cc 9f       	mul	r28, r28
     84e:	90 01       	movw	r18, r0
     850:	cd 9f       	mul	r28, r29
     852:	30 0d       	add	r19, r0
     854:	30 0d       	add	r19, r0
     856:	11 24       	eor	r1, r1
     858:	a5 e2       	ldi	r26, 0x25	; 37
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__umulhisi3>
     860:	a7 01       	movw	r20, r14
     862:	96 01       	movw	r18, r12
     864:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divmodsi4>
     868:	62 2f       	mov	r22, r18
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)&ee_stationID_text[0],0);

	/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		* ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		* Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
	for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     870:	21 96       	adiw	r28, 0x01	; 1
     872:	0e 5f       	subi	r16, 0xFE	; 254
     874:	1f 4f       	sbci	r17, 0xFF	; 255
     876:	cc 33       	cpi	r28, 0x3C	; 60
     878:	d1 05       	cpc	r29, r1
     87a:	41 f7       	brne	.-48     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     87c:	c8 e0       	ldi	r28, 0x08	; 8
     87e:	d0 e0       	ldi	r29, 0x00	; 0
		eeprom_write_byte((uint8_t*)&ee_temperature_table[i],val);
	}
		
	for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)  
	{
		float val = 16. * (1. + sinf((i + (SIZE_OF_DATA_MODULATION/4)) * 0.196)); /* Set maximum attenuation at index 0 */
     880:	be 01       	movw	r22, r28
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__floatunsisf>
     88a:	29 e3       	ldi	r18, 0x39	; 57
     88c:	34 eb       	ldi	r19, 0xB4	; 180
     88e:	48 e4       	ldi	r20, 0x48	; 72
     890:	5e e3       	ldi	r21, 0x3E	; 62
     892:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__mulsf3>
     896:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sin>
		eeprom_write_byte((uint8_t*)&ee_dataModulation[i],(uint8_t)val);
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <__addsf3>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e8       	ldi	r20, 0x80	; 128
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__mulsf3>
     8b2:	0e 94 3f 20 	call	0x407e	; 0x407e <__fixunssfsi>
     8b6:	ce 01       	movw	r24, r28
     8b8:	8d 5d       	subi	r24, 0xDD	; 221
     8ba:	9d 4f       	sbci	r25, 0xFD	; 253
     8bc:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     8c0:	21 96       	adiw	r28, 0x01	; 1
	{
		uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
		eeprom_write_byte((uint8_t*)&ee_temperature_table[i],val);
	}
		
	for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)  
     8c2:	c8 32       	cpi	r28, 0x28	; 40
     8c4:	d1 05       	cpc	r29, r1
     8c6:	e1 f6       	brne	.-72     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     8c8:	cd ec       	ldi	r28, 0xCD	; 205
     8ca:	d3 e0       	ldi	r29, 0x03	; 3
     8cc:	01 e0       	ldi	r16, 0x01	; 1
     8ce:	12 e0       	ldi	r17, 0x02	; 2
     8d0:	0f 2e       	mov	r0, r31
     8d2:	f6 ef       	ldi	r31, 0xF6	; 246
     8d4:	ef 2e       	mov	r14, r31
     8d6:	f3 e0       	ldi	r31, 0x03	; 3
     8d8:	ff 2e       	mov	r15, r31
     8da:	f0 2d       	mov	r31, r0
		eeprom_write_byte((uint8_t*)&ee_dataModulation[i],(uint8_t)val);
	}		
	
	/* Software Version String */
	for (i = 0; i < strlen_P(PRODUCT_NAME_LONG); i++) {
		uint8_t byteval = pgm_read_byte(PRODUCT_NAME_LONG + i);
     8dc:	fe 01       	movw	r30, r28
     8de:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textVersion[i], byteval);
     8e0:	c8 01       	movw	r24, r16
     8e2:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     8e6:	21 96       	adiw	r28, 0x01	; 1
     8e8:	0f 5f       	subi	r16, 0xFF	; 255
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
		float val = 16. * (1. + sinf((i + (SIZE_OF_DATA_MODULATION/4)) * 0.196)); /* Set maximum attenuation at index 0 */
		eeprom_write_byte((uint8_t*)&ee_dataModulation[i],(uint8_t)val);
	}		
	
	/* Software Version String */
	for (i = 0; i < strlen_P(PRODUCT_NAME_LONG); i++) {
     8ec:	ec 16       	cp	r14, r28
     8ee:	fd 06       	cpc	r15, r29
     8f0:	a9 f7       	brne	.-22     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
		uint8_t byteval = pgm_read_byte(PRODUCT_NAME_LONG + i);
		eeprom_write_byte((uint8_t*)&ee_textVersion[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textVersion[i], 0);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	8a e2       	ldi	r24, 0x2A	; 42
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     8fc:	c2 ed       	ldi	r28, 0xD2	; 210
     8fe:	d2 e0       	ldi	r29, 0x02	; 2
     900:	06 e0       	ldi	r16, 0x06	; 6
     902:	11 e0       	ldi	r17, 0x01	; 1
     904:	0f 2e       	mov	r0, r31
     906:	fc ec       	ldi	r31, 0xCC	; 204
     908:	ef 2e       	mov	r14, r31
     90a:	f3 e0       	ldi	r31, 0x03	; 3
     90c:	ff 2e       	mov	r15, r31
     90e:	f0 2d       	mov	r31, r0

	/* Help String */
	for (i = 0; i < strlen_P(HELP_TEXT); i++) {
		uint8_t byteval = pgm_read_byte(HELP_TEXT + i);
     910:	fe 01       	movw	r30, r28
     912:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textHelp[i], byteval);
     914:	c8 01       	movw	r24, r16
     916:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     91a:	21 96       	adiw	r28, 0x01	; 1
     91c:	0f 5f       	subi	r16, 0xFF	; 255
     91e:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textVersion[i], 0);

	/* Help String */
	for (i = 0; i < strlen_P(HELP_TEXT); i++) {
     920:	ec 16       	cp	r14, r28
     922:	fd 06       	cpc	r15, r29
     924:	a9 f7       	brne	.-22     	; 0x910 <__stack+0x11>
		uint8_t byteval = pgm_read_byte(HELP_TEXT + i);
		eeprom_write_byte((uint8_t*)&ee_textHelp[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textHelp[i], 0);
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     930:	cc e3       	ldi	r28, 0x3C	; 60
     932:	d2 e0       	ldi	r29, 0x02	; 2
     934:	00 e7       	ldi	r16, 0x70	; 112
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	0f 2e       	mov	r0, r31
     93a:	fc e5       	ldi	r31, 0x5C	; 92
     93c:	ef 2e       	mov	r14, r31
     93e:	f2 e0       	ldi	r31, 0x02	; 2
     940:	ff 2e       	mov	r15, r31
     942:	f0 2d       	mov	r31, r0

	/* Set ID String */
	for (i = 0; i < strlen_P(TEXT_SET_ID); i++) {
		uint8_t byteval = pgm_read_byte(TEXT_SET_ID + i);
     944:	fe 01       	movw	r30, r28
     946:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textSetID[i], byteval);
     948:	c8 01       	movw	r24, r16
     94a:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     94e:	21 96       	adiw	r28, 0x01	; 1
     950:	0f 5f       	subi	r16, 0xFF	; 255
     952:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textHelp[i], 0);

	/* Set ID String */
	for (i = 0; i < strlen_P(TEXT_SET_ID); i++) {
     954:	ec 16       	cp	r14, r28
     956:	fd 06       	cpc	r15, r29
     958:	a9 f7       	brne	.-22     	; 0x944 <__stack+0x45>
		uint8_t byteval = pgm_read_byte(TEXT_SET_ID + i);
		eeprom_write_byte((uint8_t*)&ee_textSetID[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textSetID[i], 0);
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	80 e9       	ldi	r24, 0x90	; 144
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     964:	ca ea       	ldi	r28, 0xAA	; 170
     966:	d2 e0       	ldi	r29, 0x02	; 2
     968:	0e ed       	ldi	r16, 0xDE	; 222
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	0f 2e       	mov	r0, r31
     96e:	f1 ed       	ldi	r31, 0xD1	; 209
     970:	ef 2e       	mov	r14, r31
     972:	f2 e0       	ldi	r31, 0x02	; 2
     974:	ff 2e       	mov	r15, r31
     976:	f0 2d       	mov	r31, r0

	/* Set Time String */
	for (i = 0; i < strlen_P(TEXT_SET_TIME); i++) {
		uint8_t byteval = pgm_read_byte(TEXT_SET_TIME + i);
     978:	fe 01       	movw	r30, r28
     97a:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textSetTime[i], byteval);
     97c:	c8 01       	movw	r24, r16
     97e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     982:	21 96       	adiw	r28, 0x01	; 1
     984:	0f 5f       	subi	r16, 0xFF	; 255
     986:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textSetID[i], 0);

	/* Set Time String */
	for (i = 0; i < strlen_P(TEXT_SET_TIME); i++) {
     988:	ec 16       	cp	r14, r28
     98a:	fd 06       	cpc	r15, r29
     98c:	a9 f7       	brne	.-22     	; 0x978 <__stack+0x79>
		uint8_t byteval = pgm_read_byte(TEXT_SET_TIME + i);
		eeprom_write_byte((uint8_t*)&ee_textSetTime[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textSetTime[i], 0);
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	85 e0       	ldi	r24, 0x05	; 5
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     998:	c4 e8       	ldi	r28, 0x84	; 132
     99a:	d2 e0       	ldi	r29, 0x02	; 2
     99c:	08 eb       	ldi	r16, 0xB8	; 184
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f9 ea       	ldi	r31, 0xA9	; 169
     9a4:	ef 2e       	mov	r14, r31
     9a6:	f2 e0       	ldi	r31, 0x02	; 2
     9a8:	ff 2e       	mov	r15, r31
     9aa:	f0 2d       	mov	r31, r0

	/* Set Start String */
	for (i = 0; i < strlen_P(TEXT_SET_START); i++) {
		uint8_t byteval = pgm_read_byte(TEXT_SET_START + i);
     9ac:	fe 01       	movw	r30, r28
     9ae:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textSetStart[i], byteval);
     9b0:	c8 01       	movw	r24, r16
     9b2:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     9b6:	21 96       	adiw	r28, 0x01	; 1
     9b8:	0f 5f       	subi	r16, 0xFF	; 255
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textSetTime[i], 0);

	/* Set Start String */
	for (i = 0; i < strlen_P(TEXT_SET_START); i++) {
     9bc:	ec 16       	cp	r14, r28
     9be:	fd 06       	cpc	r15, r29
     9c0:	a9 f7       	brne	.-22     	; 0x9ac <__stack+0xad>
		uint8_t byteval = pgm_read_byte(TEXT_SET_START + i);
		eeprom_write_byte((uint8_t*)&ee_textSetStart[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textSetStart[i], 0);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	8d ed       	ldi	r24, 0xDD	; 221
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     9cc:	cd e5       	ldi	r28, 0x5D	; 93
     9ce:	d2 e0       	ldi	r29, 0x02	; 2
     9d0:	01 e9       	ldi	r16, 0x91	; 145
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	0f 2e       	mov	r0, r31
     9d6:	f3 e8       	ldi	r31, 0x83	; 131
     9d8:	ef 2e       	mov	r14, r31
     9da:	f2 e0       	ldi	r31, 0x02	; 2
     9dc:	ff 2e       	mov	r15, r31
     9de:	f0 2d       	mov	r31, r0

	/* Set Finish String */
	for (i = 0; i < strlen_P(TEXT_SET_FINISH); i++) {
		uint8_t byteval = pgm_read_byte(TEXT_SET_FINISH + i);
     9e0:	fe 01       	movw	r30, r28
     9e2:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textSetFinish[i], byteval);
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     9ea:	21 96       	adiw	r28, 0x01	; 1
     9ec:	0f 5f       	subi	r16, 0xFF	; 255
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textSetStart[i], 0);

	/* Set Finish String */
	for (i = 0; i < strlen_P(TEXT_SET_FINISH); i++) {
     9f0:	ec 16       	cp	r14, r28
     9f2:	fd 06       	cpc	r15, r29
     9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__stack+0xe1>
		uint8_t byteval = pgm_read_byte(TEXT_SET_FINISH + i);
		eeprom_write_byte((uint8_t*)&ee_textSetFinish[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textSetFinish[i], 0);
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	87 eb       	ldi	r24, 0xB7	; 183
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a00:	cb e0       	ldi	r28, 0x0B	; 11
     a02:	d2 e0       	ldi	r29, 0x02	; 2
     a04:	0f e3       	ldi	r16, 0x3F	; 63
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	0f 2e       	mov	r0, r31
     a0a:	f0 e2       	ldi	r31, 0x20	; 32
     a0c:	ef 2e       	mov	r14, r31
     a0e:	f2 e0       	ldi	r31, 0x02	; 2
     a10:	ff 2e       	mov	r15, r31
     a12:	f0 2d       	mov	r31, r0

	/* Set Err Finish in Past String */
	for (i = 0; i < strlen_P(TEXT_ERR_FINISH_IN_PAST); i++) {
		uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_IN_PAST + i);
     a14:	fe 01       	movw	r30, r28
     a16:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textErrFinishInPast[i], byteval);
     a18:	c8 01       	movw	r24, r16
     a1a:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a1e:	21 96       	adiw	r28, 0x01	; 1
     a20:	0f 5f       	subi	r16, 0xFF	; 255
     a22:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textSetFinish[i], 0);

	/* Set Err Finish in Past String */
	for (i = 0; i < strlen_P(TEXT_ERR_FINISH_IN_PAST); i++) {
     a24:	ec 16       	cp	r14, r28
     a26:	fd 06       	cpc	r15, r29
     a28:	a9 f7       	brne	.-22     	; 0xa14 <__stack+0x115>
		uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_IN_PAST + i);
		eeprom_write_byte((uint8_t*)&ee_textErrFinishInPast[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textErrFinishInPast[i], 0);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	84 e5       	ldi	r24, 0x54	; 84
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a34:	c6 ef       	ldi	r28, 0xF6	; 246
     a36:	d1 e0       	ldi	r29, 0x01	; 1
     a38:	0a e2       	ldi	r16, 0x2A	; 42
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	0f 2e       	mov	r0, r31
     a3e:	fa e0       	ldi	r31, 0x0A	; 10
     a40:	ef 2e       	mov	r14, r31
     a42:	f2 e0       	ldi	r31, 0x02	; 2
     a44:	ff 2e       	mov	r15, r31
     a46:	f0 2d       	mov	r31, r0

	/* Set Err Start in Past String */
	for (i = 0; i < strlen_P(TEXT_ERR_START_IN_PAST); i++) {
		uint8_t byteval = pgm_read_byte(TEXT_ERR_START_IN_PAST + i);
     a48:	fe 01       	movw	r30, r28
     a4a:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textErrStartInPast[i], byteval);
     a4c:	c8 01       	movw	r24, r16
     a4e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a52:	21 96       	adiw	r28, 0x01	; 1
     a54:	0f 5f       	subi	r16, 0xFF	; 255
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textErrFinishInPast[i], 0);

	/* Set Err Start in Past String */
	for (i = 0; i < strlen_P(TEXT_ERR_START_IN_PAST); i++) {
     a58:	ec 16       	cp	r14, r28
     a5a:	fd 06       	cpc	r15, r29
     a5c:	a9 f7       	brne	.-22     	; 0xa48 <__stack+0x149>
		uint8_t byteval = pgm_read_byte(TEXT_ERR_START_IN_PAST + i);
		eeprom_write_byte((uint8_t*)&ee_textErrStartInPast[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textErrStartInPast[i], 0);
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	8e e3       	ldi	r24, 0x3E	; 62
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a68:	c1 e2       	ldi	r28, 0x21	; 33
     a6a:	d2 e0       	ldi	r29, 0x02	; 2
     a6c:	05 e5       	ldi	r16, 0x55	; 85
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	0f 2e       	mov	r0, r31
     a72:	fb e3       	ldi	r31, 0x3B	; 59
     a74:	ef 2e       	mov	r14, r31
     a76:	f2 e0       	ldi	r31, 0x02	; 2
     a78:	ff 2e       	mov	r15, r31
     a7a:	f0 2d       	mov	r31, r0

	/* Set Err Finish Before Start String */
	for(i=0; i < strlen_P(TEXT_ERR_FINISH_BEFORE_START); i++)
	{
		uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_BEFORE_START + i);
     a7c:	fe 01       	movw	r30, r28
     a7e:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textErrFinishB4Start[i], byteval);
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a86:	21 96       	adiw	r28, 0x01	; 1
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textErrStartInPast[i], 0);

	/* Set Err Finish Before Start String */
	for(i=0; i < strlen_P(TEXT_ERR_FINISH_BEFORE_START); i++)
     a8c:	ec 16       	cp	r14, r28
     a8e:	fd 06       	cpc	r15, r29
     a90:	a9 f7       	brne	.-22     	; 0xa7c <__stack+0x17d>
	{
		uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_BEFORE_START + i);
		eeprom_write_byte((uint8_t*)&ee_textErrFinishB4Start[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textErrFinishB4Start[i], 0);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	8f e6       	ldi	r24, 0x6F	; 111
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     a9c:	c2 ee       	ldi	r28, 0xE2	; 226
     a9e:	d1 e0       	ldi	r29, 0x01	; 1
     aa0:	06 e1       	ldi	r16, 0x16	; 22
     aa2:	10 e0       	ldi	r17, 0x00	; 0
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f5 ef       	ldi	r31, 0xF5	; 245
     aa8:	ef 2e       	mov	r14, r31
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	ff 2e       	mov	r15, r31
     aae:	f0 2d       	mov	r31, r0

	/* Set Err Invalid Time String */
	for(i=0; i < strlen_P(TEXT_ERR_INVALID_TIME); i++)
	{
		uint8_t byteval = pgm_read_byte(TEXT_ERR_INVALID_TIME + i);
     ab0:	fe 01       	movw	r30, r28
     ab2:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textErrInvalidTime[i], byteval);
     ab4:	c8 01       	movw	r24, r16
     ab6:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     aba:	21 96       	adiw	r28, 0x01	; 1
     abc:	0f 5f       	subi	r16, 0xFF	; 255
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textErrFinishB4Start[i], 0);

	/* Set Err Invalid Time String */
	for(i=0; i < strlen_P(TEXT_ERR_INVALID_TIME); i++)
     ac0:	ec 16       	cp	r14, r28
     ac2:	fd 06       	cpc	r15, r29
     ac4:	a9 f7       	brne	.-22     	; 0xab0 <__stack+0x1b1>
	{
		uint8_t byteval = pgm_read_byte(TEXT_ERR_INVALID_TIME + i);
		eeprom_write_byte((uint8_t*)&ee_textErrInvalidTime[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textErrInvalidTime[i], 0);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	89 e2       	ldi	r24, 0x29	; 41
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     ad0:	ce ec       	ldi	r28, 0xCE	; 206
     ad2:	d1 e0       	ldi	r29, 0x01	; 1
     ad4:	02 e0       	ldi	r16, 0x02	; 2
     ad6:	10 e0       	ldi	r17, 0x00	; 0
     ad8:	0f 2e       	mov	r0, r31
     ada:	f1 ee       	ldi	r31, 0xE1	; 225
     adc:	ef 2e       	mov	r14, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0

	/* Set Err Time In Past String */
	for(i=0; i < strlen_P(TEXT_ERR_TIME_IN_PAST); i++)
	{
		uint8_t byteval = pgm_read_byte(TEXT_ERR_TIME_IN_PAST + i);
     ae4:	fe 01       	movw	r30, r28
     ae6:	64 91       	lpm	r22, Z
		eeprom_write_byte((uint8_t*)&ee_textErrTimeInPast[i], byteval);
     ae8:	c8 01       	movw	r24, r16
     aea:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
     aee:	21 96       	adiw	r28, 0x01	; 1
     af0:	0f 5f       	subi	r16, 0xFF	; 255
     af2:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	eeprom_write_byte((uint8_t*)&ee_textErrInvalidTime[i], 0);

	/* Set Err Time In Past String */
	for(i=0; i < strlen_P(TEXT_ERR_TIME_IN_PAST); i++)
     af4:	ec 16       	cp	r14, r28
     af6:	fd 06       	cpc	r15, r29
     af8:	a9 f7       	brne	.-22     	; 0xae4 <__stack+0x1e5>
	{
		uint8_t byteval = pgm_read_byte(TEXT_ERR_TIME_IN_PAST + i);
		eeprom_write_byte((uint8_t*)&ee_textErrTimeInPast[i], byteval);
	}

	eeprom_write_byte((uint8_t*)&ee_textErrTimeInPast[i], 0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	85 e1       	ldi	r24, 0x15	; 21
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>

	/* Done */

	eeprom_write_word(&ee_interface_eeprom_initialization_flag,EEPROM_INITIALIZED_FLAG);
     b04:	6b eb       	ldi	r22, 0xBB	; 187
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <eeprom_write_word>

	lb_send_string((char*)"EEPROM PROGRAMMING FINISHED\n", TRUE);
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>

	return err;
}
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	08 95       	ret

00000b2e <_Z14dumpEEPROMVarsv>:


void dumpEEPROMVars(void)
{
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
	uint8_t byt;
	uint16_t wrd;
	uint32_t dwrd;
			
	sendEEPROMString(&ee_textVersion[0]);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textHelp[0]);
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textSetID[0]);
     b4a:	80 e7       	ldi	r24, 0x70	; 112
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textSetTime[0]);
     b52:	8e ed       	ldi	r24, 0xDE	; 222
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textSetStart[0]);
     b5a:	88 eb       	ldi	r24, 0xB8	; 184
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textSetFinish[0]);
     b62:	81 e9       	ldi	r24, 0x91	; 145
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textErrFinishInPast[0]);
     b6a:	8f e3       	ldi	r24, 0x3F	; 63
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textErrStartInPast[0]);
     b72:	8a e2       	ldi	r24, 0x2A	; 42
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textErrFinishB4Start[0]);
     b7a:	85 e5       	ldi	r24, 0x55	; 85
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textErrInvalidTime[0]);
     b82:	86 e1       	ldi	r24, 0x16	; 22
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textErrTimeInPast[0]);
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	
	byt = eeprom_read_byte(&ee_id_codespeed);
     b92:	8b e5       	ldi	r24, 0x5B	; 91
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
	sprintf(g_tempStr, "CS=%d\n", byt);
     b9a:	1f 92       	push	r1
     b9c:	8f 93       	push	r24
     b9e:	8b e3       	ldi	r24, 0x3B	; 59
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	c8 e5       	ldi	r28, 0x58	; 88
     ba8:	d4 e0       	ldi	r29, 0x04	; 4
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	ce 01       	movw	r24, r28
     bb6:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>

	byt = eeprom_read_byte(&ee_fox_setting);
     bba:	8a e5       	ldi	r24, 0x5A	; 90
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
	sprintf(g_tempStr, "FX=%d\n", byt);
     bc2:	1f 92       	push	r1
     bc4:	8f 93       	push	r24
     bc6:	82 e4       	ldi	r24, 0x42	; 66
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	ce 01       	movw	r24, r28
     bda:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>

	wrd = (uint16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration);
     bde:	87 e5       	ldi	r24, 0x57	; 87
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <eeprom_read_word>
	sprintf(g_tempStr, "TC=%u\n", wrd);
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	89 e4       	ldi	r24, 0x49	; 73
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	ce 01       	movw	r24, r28
     bfe:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
	
	wrd = (uint16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
     c02:	85 e5       	ldi	r24, 0x55	; 85
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	0e 94 ed 25 	call	0x4bda	; 0x4bda <eeprom_read_word>
	sprintf(g_tempStr, "RVO=%u\n", wrd);
     c0a:	9f 93       	push	r25
     c0c:	8f 93       	push	r24
     c0e:	80 e5       	ldi	r24, 0x50	; 80
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	ce 01       	movw	r24, r28
     c22:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>

	byt = eeprom_read_byte(&ee_enable_LEDs);
     c26:	89 e5       	ldi	r24, 0x59	; 89
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
	sprintf(g_tempStr, "LED=%d\n", byt);
     c2e:	1f 92       	push	r1
     c30:	8f 93       	push	r24
     c32:	88 e5       	ldi	r24, 0x58	; 88
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	9f 93       	push	r25
     c38:	8f 93       	push	r24
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
	
	byt = eeprom_read_byte(&ee_enable_start_timer);
     c4a:	84 e5       	ldi	r24, 0x54	; 84
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
	sprintf(g_tempStr, "STA=%d\n", byt);
     c52:	1f 92       	push	r1
     c54:	8f 93       	push	r24
     c56:	80 e6       	ldi	r24, 0x60	; 96
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     c66:	8d b7       	in	r24, 0x3d	; 61
     c68:	9e b7       	in	r25, 0x3e	; 62
     c6a:	84 96       	adiw	r24, 0x24	; 36
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	9e bf       	out	0x3e, r25	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	8d bf       	out	0x3d, r24	; 61
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	ce 01       	movw	r24, r28
     c7a:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>

	byt = eeprom_read_byte(&ee_enable_transmitter);
     c7e:	83 e5       	ldi	r24, 0x53	; 83
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
	sprintf(g_tempStr, "ETX=%d\n", byt);
     c86:	1f 92       	push	r1
     c88:	8f 93       	push	r24
     c8a:	88 e6       	ldi	r24, 0x68	; 104
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
	
	dwrd = eeprom_read_dword(&ee_event_start_epoch);
     ca2:	8f e4       	ldi	r24, 0x4F	; 79
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	0e 94 e7 25 	call	0x4bce	; 0x4bce <eeprom_read_dword>
	sprintf(g_tempStr, "SE=%lu\n", dwrd);
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	7f 93       	push	r23
     cb0:	6f 93       	push	r22
     cb2:	80 e7       	ldi	r24, 0x70	; 112
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	9f 93       	push	r25
     cb8:	8f 93       	push	r24
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	ce 01       	movw	r24, r28
     cc6:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
	
	dwrd = eeprom_read_dword(&ee_event_finish_epoch);
     cca:	8b e4       	ldi	r24, 0x4B	; 75
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 e7 25 	call	0x4bce	; 0x4bce <eeprom_read_dword>
	sprintf(g_tempStr, "FE=%lu\n", dwrd);
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	7f 93       	push	r23
     cd8:	6f 93       	push	r22
     cda:	88 e7       	ldi	r24, 0x78	; 120
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	ce 01       	movw	r24, r28
     cee:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
     cf2:	04 ed       	ldi	r16, 0xD4	; 212
     cf4:	12 e0       	ldi	r17, 0x02	; 2
     cf6:	c0 ea       	ldi	r28, 0xA0	; 160
     cf8:	d4 e0       	ldi	r29, 0x04	; 4
     cfa:	0f 2e       	mov	r0, r31
     cfc:	f4 eb       	ldi	r31, 0xB4	; 180
     cfe:	ef 2e       	mov	r14, r31
     d00:	f4 e0       	ldi	r31, 0x04	; 4
     d02:	ff 2e       	mov	r15, r31
     d04:	f0 2d       	mov	r31, r0
     d06:	8d b7       	in	r24, 0x3d	; 61
     d08:	9e b7       	in	r25, 0x3e	; 62
     d0a:	46 96       	adiw	r24, 0x16	; 22
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	9e bf       	out	0x3e, r25	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	8d bf       	out	0x3d, r24	; 61

	for(int i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
	{
		g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
     d1c:	89 93       	st	Y+, r24
		if(!g_messages_text[STATION_ID][i])
     d1e:	88 23       	and	r24, r24
     d20:	29 f0       	breq	.+10     	; 0xd2c <_Z14dumpEEPROMVarsv+0x1fe>
     d22:	0f 5f       	subi	r16, 0xFF	; 255
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
	
	dwrd = eeprom_read_dword(&ee_event_finish_epoch);
	sprintf(g_tempStr, "FE=%lu\n", dwrd);
	lb_send_string(g_tempStr, TRUE);

	for(int i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     d26:	ce 15       	cp	r28, r14
     d28:	df 05       	cpc	r29, r15
     d2a:	a9 f7       	brne	.-22     	; 0xd16 <_Z14dumpEEPROMVarsv+0x1e8>
		{
			break;
		}
	}
	
	sprintf(g_tempStr, "ID=\"%s\"\n", g_messages_text[STATION_ID]);
     d2c:	80 ea       	ldi	r24, 0xA0	; 160
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	80 e8       	ldi	r24, 0x80	; 128
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	88 e5       	ldi	r24, 0x58	; 88
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
	lb_send_string(g_tempStr, TRUE);
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	88 e5       	ldi	r24, 0x58	; 88
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
     d52:	cc e5       	ldi	r28, 0x5C	; 92
     d54:	d2 e0       	ldi	r29, 0x02	; 2
     d56:	04 ed       	ldi	r16, 0xD4	; 212
     d58:	12 e0       	ldi	r17, 0x02	; 2
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
	/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		* ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		* Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
	for(int i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
	{
		lb_send_value((char)eeprom_read_word(&ee_temperature_table[i]), (char*)"T");
     d66:	ce 01       	movw	r24, r28
     d68:	0e 94 ed 25 	call	0x4bda	; 0x4bda <eeprom_read_word>
     d6c:	69 e8       	ldi	r22, 0x89	; 137
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 c9 09 	call	0x1392	; 0x1392 <_Z13lb_send_valuejPc>
     d76:	22 96       	adiw	r28, 0x02	; 2
	lb_send_string(g_tempStr, TRUE);

	/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		* ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		* Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
	for(int i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     d78:	0c 17       	cp	r16, r28
     d7a:	1d 07       	cpc	r17, r29
     d7c:	a1 f7       	brne	.-24     	; 0xd66 <_Z14dumpEEPROMVarsv+0x238>
	{
		lb_send_value((char)eeprom_read_word(&ee_temperature_table[i]), (char*)"T");
	}
	
	lb_send_NewLine();
     d7e:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
     d82:	cb e2       	ldi	r28, 0x2B	; 43
     d84:	d2 e0       	ldi	r29, 0x02	; 2
     d86:	0b e4       	ldi	r16, 0x4B	; 75
     d88:	12 e0       	ldi	r17, 0x02	; 2
		
	for(int i = 0; i < SIZE_OF_DATA_MODULATION; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
	{
		lb_send_value((char)eeprom_read_byte(&ee_dataModulation[i]), (char*)"M");
     d8a:	ce 01       	movw	r24, r28
     d8c:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_read_byte>
     d90:	6b e8       	ldi	r22, 0x8B	; 139
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 c9 09 	call	0x1392	; 0x1392 <_Z13lb_send_valuejPc>
     d9a:	21 96       	adiw	r28, 0x01	; 1
		lb_send_value((char)eeprom_read_word(&ee_temperature_table[i]), (char*)"T");
	}
	
	lb_send_NewLine();
		
	for(int i = 0; i < SIZE_OF_DATA_MODULATION; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     d9c:	c0 17       	cp	r28, r16
     d9e:	d1 07       	cpc	r29, r17
     da0:	a1 f7       	brne	.-24     	; 0xd8a <_Z14dumpEEPROMVarsv+0x25c>
	{
		lb_send_value((char)eeprom_read_byte(&ee_dataModulation[i]), (char*)"M");
	}		
	
	lb_send_NewLine();
     da2:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
}
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	08 95       	ret

00000db4 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     db4:	e4 e6       	ldi	r30, 0x64	; 100
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8f 77       	andi	r24, 0x7F	; 127
     dbc:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     dbe:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     dc2:	85 e2       	ldi	r24, 0x25	; 37
     dc4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     dd4:	08 95       	ret

00000dd6 <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     dd6:	84 ea       	ldi	r24, 0xA4	; 164
     dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     ddc:	ec eb       	ldi	r30, 0xBC	; 188
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 23       	and	r24, r24
     de4:	64 f0       	brlt	.+24     	; 0xdfe <_Z9i2c_startv+0x28>
     de6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     dea:	81 11       	cpse	r24, r1
     dec:	f9 cf       	rjmp	.-14     	; 0xde0 <_Z9i2c_startv+0xa>
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     df0:	80 e9       	ldi	r24, 0x90	; 144
     df2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return( TRUE);
     dfc:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     dfe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e02:	88 23       	and	r24, r24
     e04:	a9 f3       	breq	.-22     	; 0xdf0 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     e06:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     e08:	08 95       	ret

00000e0a <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e0a:	84 e9       	ldi	r24, 0x94	; 148
     e0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e10:	08 95       	ret

00000e12 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     e12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     e16:	84 e8       	ldi	r24, 0x84	; 132
     e18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e1c:	ec eb       	ldi	r30, 0xBC	; 188
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	88 23       	and	r24, r24
     e24:	64 f0       	brlt	.+24     	; 0xe3e <_Z17i2c_write_successhh+0x2c>
     e26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e2a:	81 11       	cpse	r24, r1
     e2c:	f9 cf       	rjmp	.-14     	; 0xe20 <_Z17i2c_write_successhh+0xe>
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e30:	84 e9       	ldi	r24, 0x94	; 148
     e32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return(TRUE);
     e3c:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     e3e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     e42:	88 7f       	andi	r24, 0xF8	; 248
     e44:	86 13       	cpse	r24, r22
     e46:	f4 cf       	rjmp	.-24     	; 0xe30 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     e48:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     e4a:	08 95       	ret

00000e4c <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     e4c:	84 ec       	ldi	r24, 0xC4	; 196
     e4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e52:	ec eb       	ldi	r30, 0xBC	; 188
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	24 f0       	brlt	.+8      	; 0xe64 <_Z12i2c_read_ackv+0x18>
     e5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e60:	81 11       	cpse	r24, r1
     e62:	f9 cf       	rjmp	.-14     	; 0xe56 <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     e64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e68:	08 95       	ret

00000e6a <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     e6a:	84 e8       	ldi	r24, 0x84	; 132
     e6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e70:	ec eb       	ldi	r30, 0xBC	; 188
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	88 23       	and	r24, r24
     e78:	24 f0       	brlt	.+8      	; 0xe82 <_Z13i2c_read_nackv+0x18>
     e7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e7e:	81 11       	cpse	r24, r1
     e80:	f9 cf       	rjmp	.-14     	; 0xe74 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     e82:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e86:	08 95       	ret

00000e88 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     e88:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e8c:	28 7f       	andi	r18, 0xF8	; 248
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	28 17       	cp	r18, r24
     e94:	39 07       	cpc	r19, r25
     e96:	29 f0       	breq	.+10     	; 0xea2 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e98:	84 e9       	ldi	r24, 0x94	; 148
     e9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	08 95       	ret
	}

	return(FALSE);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
}
     ea4:	08 95       	ret

00000ea6 <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	00 d0       	rcall	.+0      	; 0xeac <_Z16i2c_device_writehhPhh+0x6>
     eac:	00 d0       	rcall	.+0      	; 0xeae <_Z16i2c_device_writehhPhh+0x8>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <_Z16i2c_device_writehhPhh+0xa>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	8a 83       	std	Y+2, r24	; 0x02
     eb6:	6b 83       	std	Y+3, r22	; 0x03
     eb8:	5d 83       	std	Y+5, r21	; 0x05
     eba:	4c 83       	std	Y+4, r20	; 0x04
     ebc:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     ebe:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     ec0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z10i2c_statush>
     eca:	98 2f       	mov	r25, r24
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	99 23       	and	r25, r25
     ed0:	09 f4       	brne	.+2      	; 0xed4 <_Z16i2c_device_writehhPhh+0x2e>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	88 23       	and	r24, r24
     ed6:	11 f0       	breq	.+4      	; 0xedc <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     edc:	68 e1       	ldi	r22, 0x18	; 24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z17i2c_write_successhh>
     ee4:	98 2f       	mov	r25, r24
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	99 23       	and	r25, r25
     eea:	09 f4       	brne	.+2      	; 0xeee <_Z16i2c_device_writehhPhh+0x48>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	88 23       	and	r24, r24
     ef0:	11 f0       	breq	.+4      	; 0xef6 <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	32 c0       	rjmp	.+100    	; 0xf5a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     ef6:	68 e2       	ldi	r22, 0x28	; 40
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z17i2c_write_successhh>
     efe:	98 2f       	mov	r25, r24
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	99 23       	and	r25, r25
     f04:	09 f4       	brne	.+2      	; 0xf08 <_Z16i2c_device_writehhPhh+0x62>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	88 23       	and	r24, r24
     f0a:	11 f0       	breq	.+4      	; 0xf10 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	25 c0       	rjmp	.+74     	; 0xf5a <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     f10:	8e 81       	ldd	r24, Y+6	; 0x06
     f12:	9f ef       	ldi	r25, 0xFF	; 255
     f14:	98 0f       	add	r25, r24
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	88 23       	and	r24, r24
     f1c:	09 f4       	brne	.+2      	; 0xf20 <_Z16i2c_device_writehhPhh+0x7a>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	99 23       	and	r25, r25
     f22:	c1 f0       	breq	.+48     	; 0xf54 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	98 0f       	add	r25, r24
     f2a:	99 83       	std	Y+1, r25	; 0x01
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2c 81       	ldd	r18, Y+4	; 0x04
     f32:	3d 81       	ldd	r19, Y+5	; 0x05
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	68 e2       	ldi	r22, 0x28	; 40
     f3e:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z17i2c_write_successhh>
     f42:	98 2f       	mov	r25, r24
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	99 23       	and	r25, r25
     f48:	09 f4       	brne	.+2      	; 0xf4c <_Z16i2c_device_writehhPhh+0xa6>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	88 23       	and	r24, r24
     f4e:	01 f3       	breq	.-64     	; 0xf10 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     f54:	0e 94 05 07 	call	0xe0a	; 0xe0a <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     f58:	80 e0       	ldi	r24, 0x00	; 0
}
     f5a:	26 96       	adiw	r28, 0x06	; 6
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	00 d0       	rcall	.+0      	; 0xf76 <_Z15i2c_device_readhhPhh+0xa>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <_Z15i2c_device_readhhPhh+0xc>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <_Z15i2c_device_readhhPhh+0xe>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	6b 83       	std	Y+3, r22	; 0x03
     f82:	5d 83       	std	Y+5, r21	; 0x05
     f84:	4c 83       	std	Y+4, r20	; 0x04
     f86:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f88:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f8a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z10i2c_statush>
     f94:	98 2f       	mov	r25, r24
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	99 23       	and	r25, r25
     f9a:	09 f4       	brne	.+2      	; 0xf9e <_Z15i2c_device_readhhPhh+0x32>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	88 23       	and	r24, r24
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	79 c0       	rjmp	.+242    	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     fa6:	68 e1       	ldi	r22, 0x18	; 24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z17i2c_write_successhh>
     fae:	98 2f       	mov	r25, r24
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	99 23       	and	r25, r25
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <_Z15i2c_device_readhhPhh+0x4c>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	88 23       	and	r24, r24
     fba:	11 f0       	breq	.+4      	; 0xfc0 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	6c c0       	rjmp	.+216    	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fc0:	68 e2       	ldi	r22, 0x28	; 40
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z17i2c_write_successhh>
     fc8:	98 2f       	mov	r25, r24
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	99 23       	and	r25, r25
     fce:	09 f4       	brne	.+2      	; 0xfd2 <_Z15i2c_device_readhhPhh+0x66>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	88 23       	and	r24, r24
     fd4:	11 f0       	breq	.+4      	; 0xfda <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	5f c0       	rjmp	.+190    	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     fda:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     fde:	80 e1       	ldi	r24, 0x10	; 16
     fe0:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z10i2c_statush>
     fe4:	98 2f       	mov	r25, r24
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	99 23       	and	r25, r25
     fea:	09 f4       	brne	.+2      	; 0xfee <_Z15i2c_device_readhhPhh+0x82>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	88 23       	and	r24, r24
     ff0:	11 f0       	breq	.+4      	; 0xff6 <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	51 c0       	rjmp	.+162    	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	60 e4       	ldi	r22, 0x40	; 64
     ffc:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z17i2c_write_successhh>
    1000:	98 2f       	mov	r25, r24
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	99 23       	and	r25, r25
    1006:	09 f4       	brne	.+2      	; 0x100a <_Z15i2c_device_readhhPhh+0x9e>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	11 f0       	breq	.+4      	; 0x1012 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	43 c0       	rjmp	.+134    	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	98 0f       	add	r25, r24
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <_Z15i2c_device_readhhPhh+0xb6>
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	99 23       	and	r25, r25
    1024:	b1 f1       	breq	.+108    	; 0x1092 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    1026:	8e 81       	ldd	r24, Y+6	; 0x06
    1028:	88 23       	and	r24, r24
    102a:	d9 f0       	breq	.+54     	; 0x1062 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	98 0f       	add	r25, r24
    1032:	99 83       	std	Y+1, r25	; 0x01
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	89 01       	movw	r16, r18
    103e:	08 0f       	add	r16, r24
    1040:	19 1f       	adc	r17, r25
    1042:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z12i2c_read_ackv>
    1046:	f8 01       	movw	r30, r16
    1048:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    104a:	80 e5       	ldi	r24, 0x50	; 80
    104c:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z10i2c_statush>
    1050:	98 2f       	mov	r25, r24
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	99 23       	and	r25, r25
    1056:	09 f4       	brne	.+2      	; 0x105a <_Z15i2c_device_readhhPhh+0xee>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	88 23       	and	r24, r24
    105c:	d1 f2       	breq	.-76     	; 0x1012 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	1b c0       	rjmp	.+54     	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	89 01       	movw	r16, r18
    106e:	08 0f       	add	r16, r24
    1070:	19 1f       	adc	r17, r25
    1072:	0e 94 35 07 	call	0xe6a	; 0xe6a <_Z13i2c_read_nackv>
    1076:	f8 01       	movw	r30, r16
    1078:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    107a:	88 e5       	ldi	r24, 0x58	; 88
    107c:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z10i2c_statush>
    1080:	98 2f       	mov	r25, r24
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	99 23       	and	r25, r25
    1086:	09 f4       	brne	.+2      	; 0x108a <_Z15i2c_device_readhhPhh+0x11e>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	88 23       	and	r24, r24
    108c:	11 f2       	breq	.-124    	; 0x1012 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    1092:	0e 94 05 07 	call	0xe0a	; 0xe0a <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    1096:	80 e0       	ldi	r24, 0x00	; 0
}
    1098:	26 96       	adiw	r28, 0x06	; 6
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <_Z16nextFullTxBufferv>:

	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex = 0; bufferIndex < LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
    10ae:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <_ZZ16nextFullTxBuffervE11bufferIndex>
    10b2:	94 e0       	ldi	r25, 0x04	; 4
    10b4:	59 e2       	ldi	r21, 0x29	; 41
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	52 9f       	mul	r21, r18
    10bc:	f0 01       	movw	r30, r0
    10be:	53 9f       	mul	r21, r19
    10c0:	f0 0d       	add	r31, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	e6 5d       	subi	r30, 0xD6	; 214
    10c6:	fc 4f       	sbci	r31, 0xFC	; 252
    10c8:	40 81       	ld	r20, Z
    10ca:	41 11       	cpse	r20, r1
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <_Z16nextFullTxBufferv+0x38>
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	29 f0       	breq	.+10     	; 0x10dc <_Z16nextFullTxBufferv+0x2e>
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	78 f3       	brcs	.-34     	; 0x10b6 <_Z16nextFullTxBufferv+0x8>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	ed cf       	rjmp	.-38     	; 0x10b6 <_Z16nextFullTxBufferv+0x8>
    10dc:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <_ZZ16nextFullTxBuffervE11bufferIndex>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	08 95       	ret
    10e6:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <_ZZ16nextFullTxBuffervE11bufferIndex>
    10ea:	49 e2       	ldi	r20, 0x29	; 41
    10ec:	42 9f       	mul	r20, r18
    10ee:	c0 01       	movw	r24, r0
    10f0:	43 9f       	mul	r20, r19
    10f2:	90 0d       	add	r25, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	86 5d       	subi	r24, 0xD6	; 214
    10f8:	9c 4f       	sbci	r25, 0xFC	; 252
    10fa:	08 95       	ret

000010fc <_Z17nextEmptyTxBufferv>:
    10fc:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1100:	94 e0       	ldi	r25, 0x04	; 4
    1102:	59 e2       	ldi	r21, 0x29	; 41
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	52 9f       	mul	r21, r18
    110a:	f0 01       	movw	r30, r0
    110c:	53 9f       	mul	r21, r19
    110e:	f0 0d       	add	r31, r0
    1110:	11 24       	eor	r1, r1
    1112:	e6 5d       	subi	r30, 0xD6	; 214
    1114:	fc 4f       	sbci	r31, 0xFC	; 252
    1116:	40 81       	ld	r20, Z
    1118:	44 23       	and	r20, r20
    111a:	61 f0       	breq	.+24     	; 0x1134 <_Z17nextEmptyTxBufferv+0x38>
    111c:	91 50       	subi	r25, 0x01	; 1
    111e:	29 f0       	breq	.+10     	; 0x112a <_Z17nextEmptyTxBufferv+0x2e>
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	78 f3       	brcs	.-34     	; 0x1104 <_Z17nextEmptyTxBufferv+0x8>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	ed cf       	rjmp	.-38     	; 0x1104 <_Z17nextEmptyTxBufferv+0x8>
    112a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	08 95       	ret
    1134:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1138:	49 e2       	ldi	r20, 0x29	; 41
    113a:	42 9f       	mul	r20, r18
    113c:	c0 01       	movw	r24, r0
    113e:	43 9f       	mul	r20, r19
    1140:	90 0d       	add	r25, r0
    1142:	11 24       	eor	r1, r1
    1144:	86 5d       	subi	r24, 0xD6	; 214
    1146:	9c 4f       	sbci	r25, 0xFC	; 252
    1148:	08 95       	ret

0000114a <_Z17nextEmptyRxBufferv>:
    114a:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	9f e3       	ldi	r25, 0x3F	; 63
    1154:	89 9f       	mul	r24, r25
    1156:	f0 01       	movw	r30, r0
    1158:	11 24       	eor	r1, r1
    115a:	e4 55       	subi	r30, 0x54	; 84
    115c:	fd 4f       	sbci	r31, 0xFD	; 253
    115e:	41 81       	ldd	r20, Z+1	; 0x01
    1160:	52 81       	ldd	r21, Z+2	; 0x02
    1162:	45 2b       	or	r20, r21
    1164:	a9 f0       	breq	.+42     	; 0x1190 <_Z17nextEmptyRxBufferv+0x46>
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	08 f0       	brcs	.+2      	; 0x116e <_Z17nextEmptyRxBufferv+0x24>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	9f e3       	ldi	r25, 0x3F	; 63
    1174:	89 9f       	mul	r24, r25
    1176:	f0 01       	movw	r30, r0
    1178:	11 24       	eor	r1, r1
    117a:	e4 55       	subi	r30, 0x54	; 84
    117c:	fd 4f       	sbci	r31, 0xFD	; 253
    117e:	41 81       	ldd	r20, Z+1	; 0x01
    1180:	52 81       	ldd	r21, Z+2	; 0x02
    1182:	45 2b       	or	r20, r21
    1184:	29 f0       	breq	.+10     	; 0x1190 <_Z17nextEmptyRxBufferv+0x46>
    1186:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	08 95       	ret
    1190:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1194:	4f e3       	ldi	r20, 0x3F	; 63
    1196:	42 9f       	mul	r20, r18
    1198:	c0 01       	movw	r24, r0
    119a:	43 9f       	mul	r20, r19
    119c:	90 0d       	add	r25, r0
    119e:	11 24       	eor	r1, r1
    11a0:	84 55       	subi	r24, 0x54	; 84
    11a2:	9d 4f       	sbci	r25, 0xFD	; 253
    11a4:	08 95       	ret

000011a6 <_Z16nextFullRxBufferv>:
    11a6:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__data_end>
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	9f e3       	ldi	r25, 0x3F	; 63
    11b0:	89 9f       	mul	r24, r25
    11b2:	f0 01       	movw	r30, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	e4 55       	subi	r30, 0x54	; 84
    11b8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ba:	41 81       	ldd	r20, Z+1	; 0x01
    11bc:	52 81       	ldd	r21, Z+2	; 0x02
    11be:	45 2b       	or	r20, r21
    11c0:	a9 f4       	brne	.+42     	; 0x11ec <_Z16nextFullRxBufferv+0x46>
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <_Z16nextFullRxBufferv+0x24>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	9f e3       	ldi	r25, 0x3F	; 63
    11d0:	89 9f       	mul	r24, r25
    11d2:	f0 01       	movw	r30, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	e4 55       	subi	r30, 0x54	; 84
    11d8:	fd 4f       	sbci	r31, 0xFD	; 253
    11da:	41 81       	ldd	r20, Z+1	; 0x01
    11dc:	52 81       	ldd	r21, Z+2	; 0x02
    11de:	45 2b       	or	r20, r21
    11e0:	29 f4       	brne	.+10     	; 0x11ec <_Z16nextFullRxBufferv+0x46>
    11e2:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <__data_end>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	08 95       	ret
    11ec:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <__data_end>
    11f0:	4f e3       	ldi	r20, 0x3F	; 63
    11f2:	42 9f       	mul	r20, r18
    11f4:	c0 01       	movw	r24, r0
    11f6:	43 9f       	mul	r20, r19
    11f8:	90 0d       	add	r25, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	84 55       	subi	r24, 0x54	; 84
    11fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1200:	08 95       	ret

00001202 <_Z19linkbusTxInProgressv>:
    1202:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZL17linkbus_tx_active>
    1206:	08 95       	ret

00001208 <_Z16linkbus_start_txv>:
    1208:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZL17linkbus_tx_active>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	91 11       	cpse	r25, r1
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	91 11       	cpse	r25, r1
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <_Z16linkbus_start_txv+0x1e>
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZL17linkbus_tx_active>
    121c:	e1 ec       	ldi	r30, 0xC1	; 193
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	90 81       	ld	r25, Z
    1222:	90 62       	ori	r25, 0x20	; 32
    1224:	90 83       	st	Z, r25
    1226:	08 95       	ret

00001228 <_Z14linkbus_end_txv>:
    1228:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZL17linkbus_tx_active>
    122c:	88 23       	and	r24, r24
    122e:	39 f0       	breq	.+14     	; 0x123e <_Z14linkbus_end_txv+0x16>
    1230:	e1 ec       	ldi	r30, 0xC1	; 193
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7d       	andi	r24, 0xDF	; 223
    1238:	80 83       	st	Z, r24
    123a:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZL17linkbus_tx_active>
    123e:	08 95       	ret

00001240 <_Z12linkbus_initm>:
    1240:	9b 01       	movw	r18, r22
    1242:	ac 01       	movw	r20, r24
    1244:	8e e7       	ldi	r24, 0x7E	; 126
    1246:	ec ea       	ldi	r30, 0xAC	; 172
    1248:	f2 e0       	ldi	r31, 0x02	; 2
    124a:	df 01       	movw	r26, r30
    124c:	1d 92       	st	X+, r1
    124e:	8a 95       	dec	r24
    1250:	e9 f7       	brne	.-6      	; 0x124c <_Z12linkbus_initm+0xc>
    1252:	ea e2       	ldi	r30, 0x2A	; 42
    1254:	f3 e0       	ldi	r31, 0x03	; 3
    1256:	10 82       	st	Z, r1
    1258:	11 a6       	std	Z+41, r1	; 0x29
    125a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZL9tx_buffer+0x52>
    125e:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <_ZL9tx_buffer+0x7b>
    1262:	60 e4       	ldi	r22, 0x40	; 64
    1264:	72 e4       	ldi	r23, 0x42	; 66
    1266:	8f e0       	ldi	r24, 0x0F	; 15
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 31 22 	call	0x4462	; 0x4462 <__udivmodsi4>
    126e:	21 50       	subi	r18, 0x01	; 1
    1270:	31 09       	sbc	r19, r1
    1272:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1276:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    127a:	88 e9       	ldi	r24, 0x98	; 152
    127c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1280:	8e e0       	ldi	r24, 0x0E	; 14
    1282:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1286:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZL14g_bus_disabled>
    128a:	08 95       	ret

0000128c <_Z17linkbus_send_textPc>:
	}
}


BOOL linkbus_send_text(char* text)
{
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
    1294:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    1298:	21 11       	cpse	r18, r1
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <_Z17linkbus_send_textPc+0x38>
	{
		return( err);
	}

	if(text)
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	a1 f0       	breq	.+40     	; 0x12c8 <_Z17linkbus_send_textPc+0x3c>
    12a0:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
    12a2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_Z17nextEmptyTxBufferv>

		while(!buff && tries)
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	b9 f4       	brne	.+46     	; 0x12d8 <_Z17linkbus_send_textPc+0x4c>
    12aa:	c8 ec       	ldi	r28, 0xC8	; 200
    12ac:	d0 e0       	ldi	r29, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <_Z17linkbus_send_textPc+0x28>
    12b0:	20 97       	sbiw	r28, 0x00	; 0
    12b2:	61 f0       	breq	.+24     	; 0x12cc <_Z17linkbus_send_textPc+0x40>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    12b4:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZL17linkbus_tx_active>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
		{
			while(linkbusTxInProgress() && tries)
    12b8:	99 23       	and	r25, r25
    12ba:	51 f0       	breq	.+20     	; 0x12d0 <_Z17linkbus_send_textPc+0x44>
    12bc:	20 97       	sbiw	r28, 0x00	; 0
    12be:	d1 f0       	breq	.+52     	; 0x12f4 <_Z17linkbus_send_textPc+0x68>
			{
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
    12c0:	21 97       	sbiw	r28, 0x01	; 1
    12c2:	f8 cf       	rjmp	.-16     	; 0x12b4 <_Z17linkbus_send_textPc+0x28>
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	1b c0       	rjmp	.+54     	; 0x12fe <_Z17linkbus_send_textPc+0x72>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	19 c0       	rjmp	.+50     	; 0x12fe <_Z17linkbus_send_textPc+0x72>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	17 c0       	rjmp	.+46     	; 0x12fe <_Z17linkbus_send_textPc+0x72>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptyTxBuffer();
    12d0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f3       	breq	.-40     	; 0x12b0 <_Z17linkbus_send_textPc+0x24>
			buff = nextEmptyTxBuffer();
		}

		if(buff)
		{
			sprintf(*buff, text);
    12d8:	1f 93       	push	r17
    12da:	0f 93       	push	r16
    12dc:	9f 93       	push	r25
    12de:	8f 93       	push	r24
    12e0:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>

			linkbus_start_tx();
    12e4:	0e 94 04 09 	call	0x1208	; 0x1208 <_Z16linkbus_start_txv>
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
			err = FALSE;
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <_Z17linkbus_send_textPc+0x72>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptyTxBuffer();
    12f4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	71 f7       	brne	.-36     	; 0x12d8 <_Z17linkbus_send_textPc+0x4c>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <_Z17lb_send_NewPromptv>:
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
	while(linkbus_send_text((char*)textPrompt))
    1308:	87 e9       	ldi	r24, 0x97	; 151
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 46 09 	call	0x128c	; 0x128c <_Z17linkbus_send_textPc>
    1310:	81 11       	cpse	r24, r1
    1312:	fa cf       	rjmp	.-12     	; 0x1308 <_Z17lb_send_NewPromptv>
	{
		;
	}
}
    1314:	08 95       	ret

00001316 <_Z15lb_send_NewLinev>:

void lb_send_NewLine(void)
{
	linkbus_send_text((char*)crlf);
    1316:	8a e9       	ldi	r24, 0x9A	; 154
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 46 09 	call	0x128c	; 0x128c <_Z17linkbus_send_textPc>
    131e:	08 95       	ret

00001320 <_Z12lb_echo_charh>:
}

void lb_echo_char(uint8_t c)
{
	g_tempMsgBuff[0] = c;
    1320:	ef ec       	ldi	r30, 0xCF	; 207
    1322:	f3 e0       	ldi	r31, 0x03	; 3
    1324:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    1326:	11 82       	std	Z+1, r1	; 0x01
	linkbus_send_text(g_tempMsgBuff);
    1328:	cf 01       	movw	r24, r30
    132a:	0e 94 46 09 	call	0x128c	; 0x128c <_Z17linkbus_send_textPc>
    132e:	08 95       	ret

00001330 <_Z14lb_send_stringPch>:
}

BOOL lb_send_string(char* str, BOOL wait)
{
    1330:	cf 93       	push	r28
	BOOL err = FALSE;
	
	if(g_bus_disabled)
    1332:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    1336:	21 11       	cpse	r18, r1
    1338:	25 c0       	rjmp	.+74     	; 0x1384 <_Z14lb_send_stringPch+0x54>
	{
		return TRUE;
	}

	if(str == NULL)
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	29 f1       	breq	.+74     	; 0x1388 <_Z14lb_send_stringPch+0x58>
	{
		return( TRUE);
	}

	if(strlen(str) > LINKBUS_MAX_TX_MSG_LENGTH)
    133e:	fc 01       	movw	r30, r24
    1340:	01 90       	ld	r0, Z+
    1342:	00 20       	and	r0, r0
    1344:	e9 f7       	brne	.-6      	; 0x1340 <_Z14lb_send_stringPch+0x10>
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	e8 1b       	sub	r30, r24
    134a:	f9 0b       	sbc	r31, r25
    134c:	ba 97       	sbiw	r30, 0x2a	; 42
    134e:	f0 f4       	brcc	.+60     	; 0x138c <_Z14lb_send_stringPch+0x5c>
    1350:	c6 2f       	mov	r28, r22
    1352:	bc 01       	movw	r22, r24
	{
		return( TRUE);
	}

	strncpy(g_tempMsgBuff, str, LINKBUS_MAX_TX_MSG_LENGTH);
    1354:	49 e2       	ldi	r20, 0x29	; 41
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	8f ec       	ldi	r24, 0xCF	; 207
    135a:	93 e0       	ldi	r25, 0x03	; 3
    135c:	0e 94 00 23 	call	0x4600	; 0x4600 <strncpy>

	if(wait)
    1360:	cc 23       	and	r28, r28
    1362:	59 f0       	breq	.+22     	; 0x137a <_Z14lb_send_stringPch+0x4a>
	{
		while((err = linkbus_send_text(g_tempMsgBuff)))
    1364:	8f ec       	ldi	r24, 0xCF	; 207
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	0e 94 46 09 	call	0x128c	; 0x128c <_Z17linkbus_send_textPc>
    136c:	81 11       	cpse	r24, r1
    136e:	fa cf       	rjmp	.-12     	; 0x1364 <_Z14lb_send_stringPch+0x34>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    1370:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZL17linkbus_tx_active>
	{
		while((err = linkbus_send_text(g_tempMsgBuff)))
		{
			;
		}
		while(!err && linkbusTxInProgress())
    1374:	81 11       	cpse	r24, r1
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <_Z14lb_send_stringPch+0x40>
    1378:	0a c0       	rjmp	.+20     	; 0x138e <_Z14lb_send_stringPch+0x5e>
			;
		}
	}
	else
	{
		err = linkbus_send_text(g_tempMsgBuff);
    137a:	8f ec       	ldi	r24, 0xCF	; 207
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	0e 94 46 09 	call	0x128c	; 0x128c <_Z17linkbus_send_textPc>
    1382:	05 c0       	rjmp	.+10     	; 0x138e <_Z14lb_send_stringPch+0x5e>
{
	BOOL err = FALSE;
	
	if(g_bus_disabled)
	{
		return TRUE;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <_Z14lb_send_stringPch+0x5e>
	}

	if(str == NULL)
	{
		return( TRUE);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	01 c0       	rjmp	.+2      	; 0x138e <_Z14lb_send_stringPch+0x5e>
	}

	if(strlen(str) > LINKBUS_MAX_TX_MSG_LENGTH)
	{
		return( TRUE);
    138c:	81 e0       	ldi	r24, 0x01	; 1
	{
		err = linkbus_send_text(g_tempMsgBuff);
	}

	return( err);
}
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <_Z13lb_send_valuejPc>:

void lb_send_value(uint16_t value, char* label)
{
	BOOL err;

	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	31 e0       	ldi	r19, 0x01	; 1
    1396:	3f 93       	push	r19
    1398:	2f 93       	push	r18
    139a:	9f 93       	push	r25
    139c:	8f 93       	push	r24
    139e:	7f 93       	push	r23
    13a0:	6f 93       	push	r22
    13a2:	8d e8       	ldi	r24, 0x8D	; 141
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	9f 93       	push	r25
    13a8:	8f 93       	push	r24
    13aa:	8f ec       	ldi	r24, 0xCF	; 207
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	9f 93       	push	r25
    13b0:	8f 93       	push	r24
    13b2:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
    13b6:	8d b7       	in	r24, 0x3d	; 61
    13b8:	9e b7       	in	r25, 0x3e	; 62
    13ba:	0a 96       	adiw	r24, 0x0a	; 10
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	9e bf       	out	0x3e, r25	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	8d bf       	out	0x3d, r24	; 61
	while((err = linkbus_send_text(g_tempMsgBuff)))
    13c6:	8f ec       	ldi	r24, 0xCF	; 207
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	0e 94 46 09 	call	0x128c	; 0x128c <_Z17linkbus_send_textPc>
    13ce:	81 11       	cpse	r24, r1
    13d0:	fa cf       	rjmp	.-12     	; 0x13c6 <_Z13lb_send_valuejPc+0x34>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    13d2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZL17linkbus_tx_active>
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    13d6:	81 11       	cpse	r24, r1
    13d8:	fc cf       	rjmp	.-8      	; 0x13d2 <_Z13lb_send_valuejPc+0x40>
	{
		;
	}
}
    13da:	08 95       	ret

000013dc <_Z12lb_send_Helpv>:
/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
	if(g_bus_disabled)
    13dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    13e0:	81 11       	cpse	r24, r1
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <_Z12lb_send_Helpv+0x24>
	{
		return;
	}

	lb_send_NewLine();
    13e4:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
	sendEEPROMString(&ee_textVersion[0]);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textHelp[0]);
    13f0:	86 e0       	ldi	r24, 0x06	; 6
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	lb_send_NewLine();
    13f8:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
    13fc:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
    1400:	08 95       	ret

00001402 <__vector_21>:
	ADCSRA |= (1 << ADEN);      /* enable ADC */

	if(enableSampling)
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_18>:
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	1f 93       	push	r17
    1422:	2f 93       	push	r18
    1424:	3f 93       	push	r19
    1426:	4f 93       	push	r20
    1428:	5f 93       	push	r21
    142a:	6f 93       	push	r22
    142c:	7f 93       	push	r23
    142e:	8f 93       	push	r24
    1430:	9f 93       	push	r25
    1432:	af 93       	push	r26
    1434:	bf 93       	push	r27
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1442:	c0 91 55 04 	lds	r28, 0x0455	; 0x800455 <_ZZ11__vector_18E4buff>
    1446:	d0 91 56 04 	lds	r29, 0x0456	; 0x800456 <_ZZ11__vector_18E4buff+0x1>
    144a:	20 97       	sbiw	r28, 0x00	; 0
    144c:	51 f4       	brne	.+20     	; 0x1462 <__vector_18+0x4c>
    144e:	0e 94 a5 08 	call	0x114a	; 0x114a <_Z17nextEmptyRxBufferv>
    1452:	ec 01       	movw	r28, r24
    1454:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <_ZZ11__vector_18E4buff+0x1>
    1458:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <_ZZ11__vector_18E4buff>
    145c:	89 2b       	or	r24, r25
    145e:	09 f4       	brne	.+2      	; 0x1462 <__vector_18+0x4c>
    1460:	62 c1       	rjmp	.+708    	; 0x1726 <__vector_18+0x310>
    1462:	81 2f       	mov	r24, r17
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 e6 22 	call	0x45cc	; 0x45cc <toupper>
    146a:	9c 01       	movw	r18, r24
    146c:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZZ11__vector_18E11ignoreCount>
    1470:	88 23       	and	r24, r24
    1472:	21 f0       	breq	.+8      	; 0x147c <__vector_18+0x66>
    1474:	81 50       	subi	r24, 0x01	; 1
    1476:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ11__vector_18E11ignoreCount>
    147a:	55 c1       	rjmp	.+682    	; 0x1726 <__vector_18+0x310>
    147c:	2b 31       	cpi	r18, 0x1B	; 27
    147e:	21 f4       	brne	.+8      	; 0x1488 <__vector_18+0x72>
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ11__vector_18E11ignoreCount>
    1486:	4f c1       	rjmp	.+670    	; 0x1726 <__vector_18+0x310>
    1488:	2d 30       	cpi	r18, 0x0D	; 13
    148a:	09 f0       	breq	.+2      	; 0x148e <__vector_18+0x78>
    148c:	3f c0       	rjmp	.+126    	; 0x150c <__vector_18+0xf6>
    148e:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <_ZZ11__vector_18E13receiving_msg>
    1492:	88 23       	and	r24, r24
    1494:	31 f1       	breq	.+76     	; 0x14e2 <__vector_18+0xcc>
    1496:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <_ZZ11__vector_18E9charIndex>
    149a:	ee 23       	and	r30, r30
    149c:	f9 f0       	breq	.+62     	; 0x14dc <__vector_18+0xc6>
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	88 83       	st	Y, r24
    14a2:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    14a6:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <_ZZ11__vector_18E11field_index>
    14b2:	88 23       	and	r24, r24
    14b4:	79 f0       	breq	.+30     	; 0x14d4 <__vector_18+0xbe>
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	40 91 0f 04 	lds	r20, 0x040F	; 0x80040f <_ZZ11__vector_18E9field_len>
    14be:	54 e1       	ldi	r21, 0x14	; 20
    14c0:	58 9f       	mul	r21, r24
    14c2:	90 01       	movw	r18, r0
    14c4:	59 9f       	mul	r21, r25
    14c6:	30 0d       	add	r19, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	c2 0f       	add	r28, r18
    14cc:	d3 1f       	adc	r29, r19
    14ce:	c4 0f       	add	r28, r20
    14d0:	d1 1d       	adc	r29, r1
    14d2:	1b 82       	std	Y+3, r1	; 0x03
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	ec 5e       	subi	r30, 0xEC	; 236
    14d8:	fb 4f       	sbci	r31, 0xFB	; 251
    14da:	10 82       	st	Z, r1
    14dc:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <__vector_18+0xd4>
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	9f e7       	ldi	r25, 0x7F	; 127
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZZ11__vector_18E9charIndex>
    14ee:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_ZZ11__vector_18E9field_len>
    14f2:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    14f6:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    14fa:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <_ZZ11__vector_18E11field_index>
    14fe:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZZ11__vector_18E4buff+0x1>
    1502:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZZ11__vector_18E4buff>
    1506:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <_ZZ11__vector_18E13receiving_msg>
    150a:	0d c1       	rjmp	.+538    	; 0x1726 <__vector_18+0x310>
    150c:	22 23       	and	r18, r18
    150e:	09 f4       	brne	.+2      	; 0x1512 <__vector_18+0xfc>
    1510:	0a c1       	rjmp	.+532    	; 0x1726 <__vector_18+0x310>
    1512:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <_ZZ11__vector_18E9charIndex>
    1516:	4e 2f       	mov	r20, r30
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	da 01       	movw	r26, r20
    151c:	ac 5e       	subi	r26, 0xEC	; 236
    151e:	bb 4f       	sbci	r27, 0xFB	; 251
    1520:	2c 93       	st	X, r18
    1522:	ee 23       	and	r30, r30
    1524:	09 f4       	brne	.+2      	; 0x1528 <__vector_18+0x112>
    1526:	d6 c0       	rjmp	.+428    	; 0x16d4 <__vector_18+0x2be>
    1528:	2f 37       	cpi	r18, 0x7F	; 127
    152a:	09 f0       	breq	.+2      	; 0x152e <__vector_18+0x118>
    152c:	5f c0       	rjmp	.+190    	; 0x15ec <__vector_18+0x1d6>
    152e:	e1 50       	subi	r30, 0x01	; 1
    1530:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <_ZZ11__vector_18E9charIndex>
    1534:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <_ZZ11__vector_18E11field_index>
    1538:	81 11       	cpse	r24, r1
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <__vector_18+0x14c>
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	ec 5e       	subi	r30, 0xEC	; 236
    1540:	fb 4f       	sbci	r31, 0xFB	; 251
    1542:	40 81       	ld	r20, Z
    1544:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    1548:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    154c:	84 1b       	sub	r24, r20
    154e:	91 09       	sbc	r25, r1
    1550:	6a e0       	ldi	r22, 0x0A	; 10
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	0e 94 1d 22 	call	0x443a	; 0x443a <__divmodhi4>
    1558:	70 93 12 04 	sts	0x0412, r23	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    155c:	60 93 11 04 	sts	0x0411, r22	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    1560:	39 c0       	rjmp	.+114    	; 0x15d4 <__vector_18+0x1be>
    1562:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_ZZ11__vector_18E9field_len>
    1566:	99 23       	and	r25, r25
    1568:	91 f0       	breq	.+36     	; 0x158e <__vector_18+0x178>
    156a:	4f ef       	ldi	r20, 0xFF	; 255
    156c:	49 0f       	add	r20, r25
    156e:	40 93 0f 04 	sts	0x040F, r20	; 0x80040f <_ZZ11__vector_18E9field_len>
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	54 e1       	ldi	r21, 0x14	; 20
    1578:	58 9f       	mul	r21, r24
    157a:	b0 01       	movw	r22, r0
    157c:	59 9f       	mul	r21, r25
    157e:	70 0d       	add	r23, r0
    1580:	11 24       	eor	r1, r1
    1582:	c6 0f       	add	r28, r22
    1584:	d7 1f       	adc	r29, r23
    1586:	c4 0f       	add	r28, r20
    1588:	d1 1d       	adc	r29, r1
    158a:	1b 82       	std	Y+3, r1	; 0x03
    158c:	23 c0       	rjmp	.+70     	; 0x15d4 <__vector_18+0x1be>
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	ec 5e       	subi	r30, 0xEC	; 236
    1592:	fb 4f       	sbci	r31, 0xFB	; 251
    1594:	90 81       	ld	r25, Z
    1596:	90 32       	cpi	r25, 0x20	; 32
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <__vector_18+0x1ac>
    159a:	81 50       	subi	r24, 0x01	; 1
    159c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <_ZZ11__vector_18E11field_index>
    15a0:	de 01       	movw	r26, r28
    15a2:	94 e1       	ldi	r25, 0x14	; 20
    15a4:	89 9f       	mul	r24, r25
    15a6:	a0 0d       	add	r26, r0
    15a8:	b1 1d       	adc	r27, r1
    15aa:	11 24       	eor	r1, r1
    15ac:	13 96       	adiw	r26, 0x03	; 3
    15ae:	fd 01       	movw	r30, r26
    15b0:	01 90       	ld	r0, Z+
    15b2:	00 20       	and	r0, r0
    15b4:	e9 f7       	brne	.-6      	; 0x15b0 <__vector_18+0x19a>
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	ea 1b       	sub	r30, r26
    15ba:	fb 0b       	sbc	r31, r27
    15bc:	e0 93 0f 04 	sts	0x040F, r30	; 0x80040f <_ZZ11__vector_18E9field_len>
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <__vector_18+0x1be>
    15c2:	94 e1       	ldi	r25, 0x14	; 20
    15c4:	89 9f       	mul	r24, r25
    15c6:	c0 0d       	add	r28, r0
    15c8:	d1 1d       	adc	r29, r1
    15ca:	11 24       	eor	r1, r1
    15cc:	1b 82       	std	Y+3, r1	; 0x03
    15ce:	81 50       	subi	r24, 0x01	; 1
    15d0:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <_ZZ11__vector_18E11field_index>
    15d4:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZZ11__vector_18E9charIndex>
    15d8:	e8 2f       	mov	r30, r24
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	ec 5e       	subi	r30, 0xEC	; 236
    15de:	fb 4f       	sbci	r31, 0xFB	; 251
    15e0:	10 82       	st	Z, r1
    15e2:	81 11       	cpse	r24, r1
    15e4:	93 c0       	rjmp	.+294    	; 0x170c <__vector_18+0x2f6>
    15e6:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <_ZZ11__vector_18E13receiving_msg>
    15ea:	90 c0       	rjmp	.+288    	; 0x170c <__vector_18+0x2f6>
    15ec:	20 32       	cpi	r18, 0x20	; 32
    15ee:	79 f5       	brne	.+94     	; 0x164e <__vector_18+0x238>
    15f0:	fa 01       	movw	r30, r20
    15f2:	ed 5e       	subi	r30, 0xED	; 237
    15f4:	fb 4f       	sbci	r31, 0xFB	; 251
    15f6:	80 81       	ld	r24, Z
    15f8:	80 32       	cpi	r24, 0x20	; 32
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__vector_18+0x1e8>
    15fc:	94 c0       	rjmp	.+296    	; 0x1726 <__vector_18+0x310>
    15fe:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <_ZZ11__vector_18E11field_index>
    1602:	68 2f       	mov	r22, r24
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	fb 01       	movw	r30, r22
    1608:	31 96       	adiw	r30, 0x01	; 1
    160a:	33 97       	sbiw	r30, 0x03	; 3
    160c:	0c f0       	brlt	.+2      	; 0x1610 <__vector_18+0x1fa>
    160e:	8b c0       	rjmp	.+278    	; 0x1726 <__vector_18+0x310>
    1610:	88 23       	and	r24, r24
    1612:	79 f0       	breq	.+30     	; 0x1632 <__vector_18+0x21c>
    1614:	61 50       	subi	r22, 0x01	; 1
    1616:	71 09       	sbc	r23, r1
    1618:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_ZZ11__vector_18E9field_len>
    161c:	a4 e1       	ldi	r26, 0x14	; 20
    161e:	a6 9f       	mul	r26, r22
    1620:	f0 01       	movw	r30, r0
    1622:	a7 9f       	mul	r26, r23
    1624:	f0 0d       	add	r31, r0
    1626:	11 24       	eor	r1, r1
    1628:	ce 0f       	add	r28, r30
    162a:	df 1f       	adc	r29, r31
    162c:	c9 0f       	add	r28, r25
    162e:	d1 1d       	adc	r29, r1
    1630:	1b 82       	std	Y+3, r1	; 0x03
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <_ZZ11__vector_18E11field_index>
    1638:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_ZZ11__vector_18E9field_len>
    163c:	4f 5f       	subi	r20, 0xFF	; 255
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	4e 33       	cpi	r20, 0x3E	; 62
    1642:	51 05       	cpc	r21, r1
    1644:	0c f0       	brlt	.+2      	; 0x1648 <__vector_18+0x232>
    1646:	4e e3       	ldi	r20, 0x3E	; 62
    1648:	40 93 53 04 	sts	0x0453, r20	; 0x800453 <_ZZ11__vector_18E9charIndex>
    164c:	5f c0       	rjmp	.+190    	; 0x170c <__vector_18+0x2f6>
    164e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <_ZZ11__vector_18E9field_len>
    1652:	84 31       	cpi	r24, 0x14	; 20
    1654:	08 f0       	brcs	.+2      	; 0x1658 <__vector_18+0x242>
    1656:	67 c0       	rjmp	.+206    	; 0x1726 <__vector_18+0x310>
    1658:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <_ZZ11__vector_18E11field_index>
    165c:	41 11       	cpse	r20, r1
    165e:	19 c0       	rjmp	.+50     	; 0x1692 <__vector_18+0x27c>
    1660:	40 91 11 04 	lds	r20, 0x0411	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    1664:	50 91 12 04 	lds	r21, 0x0412	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    1668:	ba 01       	movw	r22, r20
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	44 0f       	add	r20, r20
    1670:	55 1f       	adc	r21, r21
    1672:	44 0f       	add	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	44 0f       	add	r20, r20
    1678:	55 1f       	adc	r21, r21
    167a:	46 0f       	add	r20, r22
    167c:	57 1f       	adc	r21, r23
    167e:	42 0f       	add	r20, r18
    1680:	51 1d       	adc	r21, r1
    1682:	50 93 12 04 	sts	0x0412, r21	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    1686:	40 93 11 04 	sts	0x0411, r20	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <_ZZ11__vector_18E9field_len>
    1690:	16 c0       	rjmp	.+44     	; 0x16be <__vector_18+0x2a8>
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	41 50       	subi	r20, 0x01	; 1
    1696:	51 09       	sbc	r21, r1
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	98 0f       	add	r25, r24
    169c:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZ11__vector_18E9field_len>
    16a0:	e4 e1       	ldi	r30, 0x14	; 20
    16a2:	e4 9f       	mul	r30, r20
    16a4:	b0 01       	movw	r22, r0
    16a6:	e5 9f       	mul	r30, r21
    16a8:	70 0d       	add	r23, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	c6 0f       	add	r28, r22
    16ae:	d7 1f       	adc	r29, r23
    16b0:	fe 01       	movw	r30, r28
    16b2:	e8 0f       	add	r30, r24
    16b4:	f1 1d       	adc	r31, r1
    16b6:	23 83       	std	Z+3, r18	; 0x03
    16b8:	c9 0f       	add	r28, r25
    16ba:	d1 1d       	adc	r29, r1
    16bc:	1b 82       	std	Y+3, r1	; 0x03
    16be:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZZ11__vector_18E9charIndex>
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	8e 33       	cpi	r24, 0x3E	; 62
    16c8:	91 05       	cpc	r25, r1
    16ca:	0c f0       	brlt	.+2      	; 0x16ce <__vector_18+0x2b8>
    16cc:	8e e3       	ldi	r24, 0x3E	; 62
    16ce:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_ZZ11__vector_18E9charIndex>
    16d2:	1c c0       	rjmp	.+56     	; 0x170c <__vector_18+0x2f6>
    16d4:	2f 37       	cpi	r18, 0x7F	; 127
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <__vector_18+0x2d2>
    16d8:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    16dc:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    16e0:	18 16       	cp	r1, r24
    16e2:	19 06       	cpc	r1, r25
    16e4:	bc f0       	brlt	.+46     	; 0x1714 <__vector_18+0x2fe>
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <__vector_18+0x308>
    16e8:	20 32       	cpi	r18, 0x20	; 32
    16ea:	e9 f0       	breq	.+58     	; 0x1726 <__vector_18+0x310>
    16ec:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <_ZZ11__vector_18E11field_index>
    16f0:	c9 01       	movw	r24, r18
    16f2:	99 27       	eor	r25, r25
    16f4:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    16f8:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    16fc:	1b 82       	std	Y+3, r1	; 0x03
    16fe:	1f 8a       	std	Y+23, r1	; 0x17
    1700:	1b a6       	std	Y+43, r1	; 0x2b
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <_ZZ11__vector_18E13receiving_msg>
    1708:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_ZZ11__vector_18E9charIndex>
    170c:	82 2f       	mov	r24, r18
    170e:	0e 94 90 09 	call	0x1320	; 0x1320 <_Z12lb_echo_charh>
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <__vector_18+0x310>
    1714:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    1718:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    171c:	f7 cf       	rjmp	.-18     	; 0x170c <__vector_18+0x2f6>
    171e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <_ZZ11__vector_18E6msg_ID+0x1>
    1722:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_ZZ11__vector_18E6msg_ID>
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	bf 91       	pop	r27
    1730:	af 91       	pop	r26
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	7f 91       	pop	r23
    1738:	6f 91       	pop	r22
    173a:	5f 91       	pop	r21
    173c:	4f 91       	pop	r20
    173e:	3f 91       	pop	r19
    1740:	2f 91       	pop	r18
    1742:	1f 91       	pop	r17
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_19>:
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_ZZ11__vector_19E4buff>
    1774:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <_ZZ11__vector_19E4buff+0x1>
    1778:	89 2b       	or	r24, r25
    177a:	31 f4       	brne	.+12     	; 0x1788 <__vector_19+0x3a>
    177c:	0e 94 57 08 	call	0x10ae	; 0x10ae <_Z16nextFullTxBufferv>
    1780:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <_ZZ11__vector_19E4buff+0x1>
    1784:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <_ZZ11__vector_19E4buff>
    1788:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <_ZZ11__vector_19E4buff>
    178c:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <_ZZ11__vector_19E4buff+0x1>
    1790:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <_ZZ11__vector_19E9charIndex>
    1794:	df 01       	movw	r26, r30
    1796:	a8 0f       	add	r26, r24
    1798:	b1 1d       	adc	r27, r1
    179a:	9c 91       	ld	r25, X
    179c:	99 23       	and	r25, r25
    179e:	31 f0       	breq	.+12     	; 0x17ac <__vector_19+0x5e>
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <_ZZ11__vector_19E9charIndex>
    17a6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <__vector_19+0x78>
    17ac:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <_ZZ11__vector_19E9charIndex>
    17b0:	10 82       	st	Z, r1
    17b2:	0e 94 57 08 	call	0x10ae	; 0x10ae <_Z16nextFullTxBufferv>
    17b6:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <_ZZ11__vector_19E4buff+0x1>
    17ba:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <_ZZ11__vector_19E4buff>
    17be:	89 2b       	or	r24, r25
    17c0:	11 f4       	brne	.+4      	; 0x17c6 <__vector_19+0x78>
    17c2:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z14linkbus_end_txv>
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_14>:
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_ZZ11__vector_14E6toggle>
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	81 11       	cpse	r24, r1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <_ZZ11__vector_14E6toggle>
    1818:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <g_audio_tone_state>
    181c:	99 23       	and	r25, r25
    181e:	61 f0       	breq	.+24     	; 0x1838 <__vector_14+0x50>
    1820:	81 11       	cpse	r24, r1
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__vector_14+0x46>
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	89 e0       	ldi	r24, 0x09	; 9
    1828:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <__vector_14+0x58>
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	89 e0       	ldi	r24, 0x09	; 9
    1832:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <__vector_14+0x58>
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	89 e0       	ldi	r24, 0x09	; 9
    183c:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	0f 90       	pop	r0
    185e:	1f 90       	pop	r1
    1860:	18 95       	reti

00001862 <__vector_11>:
    1862:	1f 92       	push	r1
    1864:	0f 92       	push	r0
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	0f 92       	push	r0
    186a:	11 24       	eor	r1, r1
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <_Z23clockConfigurationErrorv>:
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_transmissions_disabled>
    187e:	88 23       	and	r24, r24
    1880:	09 f4       	brne	.+2      	; 0x1884 <_Z23clockConfigurationErrorv+0xe>
    1882:	61 c0       	rjmp	.+194    	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    1884:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    1888:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    188c:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    1890:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    1894:	89 2b       	or	r24, r25
    1896:	8a 2b       	or	r24, r26
    1898:	8b 2b       	or	r24, r27
    189a:	09 f4       	brne	.+2      	; 0x189e <_Z23clockConfigurationErrorv+0x28>
    189c:	4d c0       	rjmp	.+154    	; 0x1938 <_Z23clockConfigurationErrorv+0xc2>
    189e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    18a2:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    18a6:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    18aa:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    18ae:	89 2b       	or	r24, r25
    18b0:	8a 2b       	or	r24, r26
    18b2:	8b 2b       	or	r24, r27
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <_Z23clockConfigurationErrorv+0x42>
    18b6:	42 c0       	rjmp	.+132    	; 0x193c <_Z23clockConfigurationErrorv+0xc6>
    18b8:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    18bc:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    18c0:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    18c4:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    18c8:	81 15       	cp	r24, r1
    18ca:	96 46       	sbci	r25, 0x66	; 102
    18cc:	ae 4e       	sbci	r26, 0xEE	; 238
    18ce:	bf 45       	sbci	r27, 0x5F	; 95
    18d0:	b8 f1       	brcs	.+110    	; 0x1940 <_Z23clockConfigurationErrorv+0xca>
    18d2:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    18d6:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    18da:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    18de:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    18e2:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_event_start_epoch>
    18e6:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    18ea:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    18ee:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    18f2:	84 17       	cp	r24, r20
    18f4:	95 07       	cpc	r25, r21
    18f6:	a6 07       	cpc	r26, r22
    18f8:	b7 07       	cpc	r27, r23
    18fa:	20 f5       	brcc	.+72     	; 0x1944 <_Z23clockConfigurationErrorv+0xce>
    18fc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_transmissions_disabled>
    1900:	88 23       	and	r24, r24
    1902:	c1 f0       	breq	.+48     	; 0x1934 <_Z23clockConfigurationErrorv+0xbe>
    1904:	00 91 d3 04 	lds	r16, 0x04D3	; 0x8004d3 <g_current_epoch>
    1908:	10 91 d4 04 	lds	r17, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    190c:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    1910:	30 91 d6 04 	lds	r19, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    1914:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    1918:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    191c:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    1920:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	40 17       	cp	r20, r16
    1928:	51 07       	cpc	r21, r17
    192a:	62 07       	cpc	r22, r18
    192c:	73 07       	cpc	r23, r19
    192e:	58 f0       	brcs	.+22     	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <_Z23clockConfigurationErrorv+0xd0>
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <_Z13sendMorseToneh>:
    194c:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <g_lastSeconds>
    1950:	91 11       	cpse	r25, r1
    1952:	0a c0       	rjmp	.+20     	; 0x1968 <_Z13sendMorseToneh+0x1c>
    1954:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_fox_tone_offset>
    1958:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_fox_tone_offset+0x1>
    195c:	9f e2       	ldi	r25, 0x2F	; 47
    195e:	92 1b       	sub	r25, r18
    1960:	97 bd       	out	0x27, r25	; 39
    1962:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_audio_tone_state>
    1966:	08 95       	ret
    1968:	8f e2       	ldi	r24, 0x2F	; 47
    196a:	87 bd       	out	0x27, r24	; 39
    196c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_audio_tone_state>
    1970:	08 95       	ret

00001972 <__vector_8>:
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	af 93       	push	r26
    198e:	bf 93       	push	r27
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	00 d0       	rcall	.+0      	; 0x199a <__vector_8+0x28>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <g_tick_count>
    19a2:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <g_tick_count+0x1>
    19a6:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <g_tick_count+0x2>
    19aa:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <g_tick_count+0x3>
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	a1 1d       	adc	r26, r1
    19b2:	b1 1d       	adc	r27, r1
    19b4:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <g_tick_count>
    19b8:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <g_tick_count+0x1>
    19bc:	a0 93 82 04 	sts	0x0482, r26	; 0x800482 <g_tick_count+0x2>
    19c0:	b0 93 83 04 	sts	0x0483, r27	; 0x800483 <g_tick_count+0x3>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	1a 82       	std	Y+2, r1	; 0x02
    19ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_sync_enabled>
    19ce:	88 23       	and	r24, r24
    19d0:	19 f1       	breq	.+70     	; 0x1a18 <__vector_8+0xa6>
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_Z11digitalReadh>
    19d8:	81 11       	cpse	r24, r1
    19da:	1e c0       	rjmp	.+60     	; 0x1a18 <__vector_8+0xa6>
    19dc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_sync_pin_timer>
    19e0:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <g_sync_pin_timer+0x1>
    19e4:	8b 3b       	cpi	r24, 0xBB	; 187
    19e6:	90 41       	sbci	r25, 0x10	; 16
    19e8:	4c f4       	brge	.+18     	; 0x19fc <__vector_8+0x8a>
    19ea:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_sync_pin_timer>
    19ee:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <g_sync_pin_timer+0x1>
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <g_sync_pin_timer+0x1>
    19f8:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <g_sync_pin_timer>
    19fc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_sync_pin_timer>
    1a00:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <g_sync_pin_timer+0x1>
    1a04:	85 39       	cpi	r24, 0x95	; 149
    1a06:	95 40       	sbci	r25, 0x05	; 5
    1a08:	3c f0       	brlt	.+14     	; 0x1a18 <__vector_8+0xa6>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_sync_pin_stable>
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	87 e0       	ldi	r24, 0x07	; 7
    1a14:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1a18:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <g_dtmf_detected>
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <__vector_8+0xb6>
    1a20:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <g_config_error>
    1a24:	88 23       	and	r24, r24
    1a26:	c1 f0       	breq	.+48     	; 0x1a58 <__vector_8+0xe6>
    1a28:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <_ZZ10__vector_8E13blink_counter>
    1a2c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <_ZZ10__vector_8E13blink_counter+0x1>
    1a30:	22 3e       	cpi	r18, 0xE2	; 226
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	38 07       	cpc	r19, r24
    1a36:	34 f4       	brge	.+12     	; 0x1a44 <__vector_8+0xd2>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a40:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1a44:	2f 31       	cpi	r18, 0x1F	; 31
    1a46:	31 05       	cpc	r19, r1
    1a48:	a4 f0       	brlt	.+40     	; 0x1a72 <__vector_8+0x100>
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a52:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <__vector_8+0x100>
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a60:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1a64:	8f e1       	ldi	r24, 0x1F	; 31
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ10__vector_8E13blink_counter+0x1>
    1a6c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ10__vector_8E13blink_counter>
    1a70:	10 c0       	rjmp	.+32     	; 0x1a92 <__vector_8+0x120>
    1a72:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1a76:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ10__vector_8E13blink_counter+0x1>
    1a82:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ10__vector_8E13blink_counter>
    1a86:	99 23       	and	r25, r25
    1a88:	24 f4       	brge	.+8      	; 0x1a92 <__vector_8+0x120>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <g_blinky_time>
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <__vector_8+0x124>
    1a92:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <g_blinky_time>
    1a96:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_ZL16g_LEDs_Timed_Out>
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	24 c0       	rjmp	.+72     	; 0x1ae6 <__vector_8+0x174>
    1a9e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_sync_pin_stable>
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <__vector_8+0x136>
    1aa6:	1b c1       	rjmp	.+566    	; 0x1cde <__vector_8+0x36c>
    1aa8:	1e c0       	rjmp	.+60     	; 0x1ae6 <__vector_8+0x174>
    1aaa:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_blinky_time>
    1aae:	88 23       	and	r24, r24
    1ab0:	29 f0       	breq	.+10     	; 0x1abc <__vector_8+0x14a>
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	8d e0       	ldi	r24, 0x0D	; 13
    1ab6:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <__vector_8+0x152>
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	8d e0       	ldi	r24, 0x0D	; 13
    1ac0:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1ac4:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <g_config_error>
    1ac8:	88 23       	and	r24, r24
    1aca:	69 f0       	breq	.+26     	; 0x1ae6 <__vector_8+0x174>
    1acc:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_blinky_time>
    1ad0:	88 23       	and	r24, r24
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <__vector_8+0x16c>
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <__vector_8+0x174>
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	87 e0       	ldi	r24, 0x07	; 7
    1ae2:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1ae6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <g_enable_start_timer>
    1aea:	88 23       	and	r24, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <__vector_8+0x17e>
    1aee:	58 c0       	rjmp	.+176    	; 0x1ba0 <__vector_8+0x22e>
    1af0:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_lastSeconds>
    1af4:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <_ZZ10__vector_8E14hold_last10sec>
    1af8:	98 17       	cp	r25, r24
    1afa:	b1 f0       	breq	.+44     	; 0x1b28 <__vector_8+0x1b6>
    1afc:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_lastSeconds>
    1b00:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <_ZZ10__vector_8E14hold_last10sec>
    1b04:	88 23       	and	r24, r24
    1b06:	49 f0       	breq	.+18     	; 0x1b1a <__vector_8+0x1a8>
    1b08:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1b0c:	83 e6       	ldi	r24, 0x63	; 99
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_ZZ10__vector_8E13starting_blip+0x1>
    1b14:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <_ZZ10__vector_8E13starting_blip>
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <__vector_8+0x1d0>
    1b1a:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_ZZ10__vector_8E13starting_blip+0x1>
    1b1e:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_ZZ10__vector_8E13starting_blip>
    1b22:	87 e2       	ldi	r24, 0x27	; 39
    1b24:	9b e0       	ldi	r25, 0x0B	; 11
    1b26:	28 c0       	rjmp	.+80     	; 0x1b78 <__vector_8+0x206>
    1b28:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZZ10__vector_8E13starting_blip>
    1b2c:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZZ10__vector_8E13starting_blip+0x1>
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	e1 f0       	breq	.+56     	; 0x1b6c <__vector_8+0x1fa>
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_ZZ10__vector_8E13starting_blip+0x1>
    1b3a:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <_ZZ10__vector_8E13starting_blip>
    1b3e:	89 2b       	or	r24, r25
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <__vector_8+0x1f0>
    1b42:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_lastSeconds>
    1b46:	86 30       	cpi	r24, 0x06	; 6
    1b48:	30 f0       	brcs	.+12     	; 0x1b56 <__vector_8+0x1e4>
    1b4a:	8f e3       	ldi	r24, 0x3F	; 63
    1b4c:	87 bd       	out	0x27, r24	; 39
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_audio_tone_state>
    1b54:	25 c0       	rjmp	.+74     	; 0x1ba0 <__vector_8+0x22e>
    1b56:	8f e1       	ldi	r24, 0x1F	; 31
    1b58:	87 bd       	out	0x27, r24	; 39
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_audio_tone_state>
    1b60:	1f c0       	rjmp	.+62     	; 0x1ba0 <__vector_8+0x22e>
    1b62:	8f e2       	ldi	r24, 0x2F	; 47
    1b64:	87 bd       	out	0x27, r24	; 39
    1b66:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_audio_tone_state>
    1b6a:	1a c0       	rjmp	.+52     	; 0x1ba0 <__vector_8+0x22e>
    1b6c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <_ZZ10__vector_8E13starting_boop>
    1b70:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZZ10__vector_8E13starting_boop+0x1>
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	a1 f0       	breq	.+40     	; 0x1ba0 <__vector_8+0x22e>
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZZ10__vector_8E13starting_boop+0x1>
    1b7e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <_ZZ10__vector_8E13starting_boop>
    1b82:	89 2b       	or	r24, r25
    1b84:	41 f4       	brne	.+16     	; 0x1b96 <__vector_8+0x224>
    1b86:	8f e2       	ldi	r24, 0x2F	; 47
    1b88:	87 bd       	out	0x27, r24	; 39
    1b8a:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_audio_tone_state>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <__vector_8+0x22e>
    1b96:	8f e4       	ldi	r24, 0x4F	; 79
    1b98:	87 bd       	out	0x27, r24	; 39
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_audio_tone_state>
    1ba0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_transmissions_disabled>
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	a8 c0       	rjmp	.+336    	; 0x1cf8 <__vector_8+0x386>
    1ba8:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_on_the_air>
    1bac:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <g_on_the_air+0x1>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <__vector_8+0x244>
    1bb4:	99 c0       	rjmp	.+306    	; 0x1ce8 <__vector_8+0x376>
    1bb6:	a0 c0       	rjmp	.+320    	; 0x1cf8 <__vector_8+0x386>
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <_ZZ10__vector_8E7codeInc+0x1>
    1bbe:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZZ10__vector_8E7codeInc>
    1bc2:	89 2b       	or	r24, r25
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <__vector_8+0x256>
    1bc6:	a3 c0       	rjmp	.+326    	; 0x1d0e <__vector_8+0x39c>
    1bc8:	ae 01       	movw	r20, r28
    1bca:	4e 5f       	subi	r20, 0xFE	; 254
    1bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bce:	be 01       	movw	r22, r28
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <_Z9makeMorsePcPhS0_>
    1bdc:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <_ZZ10__vector_8E3key>
    1be0:	99 81       	ldd	r25, Y+1	; 0x01
    1be2:	91 11       	cpse	r25, r1
    1be4:	11 c0       	rjmp	.+34     	; 0x1c08 <__vector_8+0x296>
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	99 23       	and	r25, r25
    1bea:	71 f0       	breq	.+28     	; 0x1c08 <__vector_8+0x296>
    1bec:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZZ10__vector_8E3key>
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <g_callsign_sent>
    1bf6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <__vector_8+0x28e>
    1bfe:	87 c0       	rjmp	.+270    	; 0x1d0e <__vector_8+0x39c>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z13sendMorseToneh>
    1c06:	1e c0       	rjmp	.+60     	; 0x1c44 <__vector_8+0x2d2>
    1c08:	88 23       	and	r24, r24
    1c0a:	b9 f0       	breq	.+46     	; 0x1c3a <__vector_8+0x2c8>
    1c0c:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_ZL16g_LEDs_Timed_Out>
    1c10:	81 11       	cpse	r24, r1
    1c12:	04 c0       	rjmp	.+8      	; 0x1c1c <__vector_8+0x2aa>
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	87 e0       	ldi	r24, 0x07	; 7
    1c18:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1c1c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <g_enable_transmitter>
    1c20:	88 23       	and	r24, r24
    1c22:	59 f0       	breq	.+22     	; 0x1c3a <__vector_8+0x2c8>
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	8a e0       	ldi	r24, 0x0A	; 10
    1c28:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	88 e0       	ldi	r24, 0x08	; 8
    1c30:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <g_sendAMmodulation>
    1c3a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <__vector_8+0x2d2>
    1c42:	65 c0       	rjmp	.+202    	; 0x1d0e <__vector_8+0x39c>
    1c44:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1c48:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z13sendMorseToneh>
    1c4c:	60 c0       	rjmp	.+192    	; 0x1d0e <__vector_8+0x39c>
    1c4e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_ZL16g_LEDs_Timed_Out>
    1c52:	81 11       	cpse	r24, r1
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <__vector_8+0x2ee>
    1c56:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_sync_pin_stable>
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <__vector_8+0x2ee>
    1c5e:	51 c0       	rjmp	.+162    	; 0x1d02 <__vector_8+0x390>
    1c60:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <g_enable_transmitter>
    1c64:	88 23       	and	r24, r24
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <__vector_8+0x312>
    1c68:	60 91 04 04 	lds	r22, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1c6c:	8a e0       	ldi	r24, 0x0A	; 10
    1c6e:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1c72:	60 91 04 04 	lds	r22, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1c76:	88 e0       	ldi	r24, 0x08	; 8
    1c78:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1c7c:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1c80:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <g_sendAMmodulation>
    1c84:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_code_throttle>
    1c88:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_code_throttle+0x1>
    1c8c:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <_ZZ10__vector_8E7codeInc+0x1>
    1c90:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZZ10__vector_8E7codeInc>
    1c94:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1c98:	88 23       	and	r24, r24
    1c9a:	c9 f1       	breq	.+114    	; 0x1d0e <__vector_8+0x39c>
    1c9c:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1ca0:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z13sendMorseToneh>
    1ca4:	34 c0       	rjmp	.+104    	; 0x1d0e <__vector_8+0x39c>
    1ca6:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZZ10__vector_8E3key>
    1caa:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_sync_pin_stable>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <__vector_8+0x348>
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	87 e0       	ldi	r24, 0x07	; 7
    1cb6:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	8a e0       	ldi	r24, 0x0A	; 10
    1cbe:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	88 e0       	ldi	r24, 0x08	; 8
    1cc6:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1cca:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <g_sendAMmodulation>
    1cce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1cd2:	88 23       	and	r24, r24
    1cd4:	e1 f0       	breq	.+56     	; 0x1d0e <__vector_8+0x39c>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z13sendMorseToneh>
    1cdc:	18 c0       	rjmp	.+48     	; 0x1d0e <__vector_8+0x39c>
    1cde:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <g_dtmf_detected>
    1ce2:	81 11       	cpse	r24, r1
    1ce4:	e2 ce       	rjmp	.-572    	; 0x1aaa <__vector_8+0x138>
    1ce6:	ee ce       	rjmp	.-548    	; 0x1ac4 <__vector_8+0x152>
    1ce8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <_ZZ10__vector_8E7codeInc>
    1cec:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <_ZZ10__vector_8E7codeInc+0x1>
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <__vector_8+0x384>
    1cf4:	61 cf       	rjmp	.-318    	; 0x1bb8 <__vector_8+0x246>
    1cf6:	ab cf       	rjmp	.-170    	; 0x1c4e <__vector_8+0x2dc>
    1cf8:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1cfc:	81 11       	cpse	r24, r1
    1cfe:	d3 cf       	rjmp	.-90     	; 0x1ca6 <__vector_8+0x334>
    1d00:	e6 cf       	rjmp	.-52     	; 0x1cce <__vector_8+0x35c>
    1d02:	60 91 04 04 	lds	r22, 0x0404	; 0x800404 <_ZZ10__vector_8E3key>
    1d06:	87 e0       	ldi	r24, 0x07	; 7
    1d08:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1d0c:	a9 cf       	rjmp	.-174    	; 0x1c60 <__vector_8+0x2ee>
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	ff 91       	pop	r31
    1d18:	ef 91       	pop	r30
    1d1a:	bf 91       	pop	r27
    1d1c:	af 91       	pop	r26
    1d1e:	9f 91       	pop	r25
    1d20:	8f 91       	pop	r24
    1d22:	7f 91       	pop	r23
    1d24:	6f 91       	pop	r22
    1d26:	5f 91       	pop	r21
    1d28:	4f 91       	pop	r20
    1d2a:	3f 91       	pop	r19
    1d2c:	2f 91       	pop	r18
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	0f 90       	pop	r0
    1d34:	1f 90       	pop	r1
    1d36:	18 95       	reti

00001d38 <_Z11setupForFoxP5Fox_t>:
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	31 f0       	breq	.+12     	; 0x1d48 <_Z11setupForFoxP5Fox_t+0x10>
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	80 81       	ld	r24, Z
    1d40:	86 31       	cpi	r24, 0x16	; 22
    1d42:	11 f0       	breq	.+4      	; 0x1d48 <_Z11setupForFoxP5Fox_t+0x10>
    1d44:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <g_fox>
    1d48:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <g_fox>
    1d4c:	8e 2f       	mov	r24, r30
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	fc 01       	movw	r30, r24
    1d52:	31 97       	sbiw	r30, 0x01	; 1
    1d54:	e5 31       	cpi	r30, 0x15	; 21
    1d56:	f1 05       	cpc	r31, r1
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <_Z11setupForFoxP5Fox_t+0x24>
    1d5a:	6b c0       	rjmp	.+214    	; 0x1e32 <_Z11setupForFoxP5Fox_t+0xfa>
    1d5c:	ea 59       	subi	r30, 0x9A	; 154
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__tablejump2__>
    1d64:	88 e7       	ldi	r24, 0x78	; 120
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_startclock_interval+0x1>
    1d6c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_startclock_interval>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <g_enable_start_timer>
    1d76:	7d c0       	rjmp	.+250    	; 0x1e72 <_Z11setupForFoxP5Fox_t+0x13a>
    1d78:	8c e2       	ldi	r24, 0x2C	; 44
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_startclock_interval+0x1>
    1d80:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_startclock_interval>
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <g_enable_start_timer>
    1d8a:	73 c0       	rjmp	.+230    	; 0x1e72 <_Z11setupForFoxP5Fox_t+0x13a>
    1d8c:	8c e3       	ldi	r24, 0x3C	; 60
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <g_on_air_interval+0x1>
    1d94:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <g_on_air_interval>
    1d98:	25 e0       	ldi	r18, 0x05	; 5
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <g_number_of_foxes+0x1>
    1da0:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <g_number_of_foxes>
    1da4:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <g_fox_id_offset+0x1>
    1da8:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <g_fox_id_offset>
    1dac:	28 e0       	ldi	r18, 0x08	; 8
    1dae:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <g_pattern_codespeed>
    1db2:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <g_id_interval+0x1>
    1db6:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <g_id_interval>
    1dba:	8c e2       	ldi	r24, 0x2C	; 44
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_startclock_interval+0x1>
    1dc2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_startclock_interval>
    1dc6:	55 c0       	rjmp	.+170    	; 0x1e72 <_Z11setupForFoxP5Fox_t+0x13a>
    1dc8:	8c e0       	ldi	r24, 0x0C	; 12
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <g_on_air_interval+0x1>
    1dd0:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <g_on_air_interval>
    1dd4:	85 e0       	ldi	r24, 0x05	; 5
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <g_number_of_foxes+0x1>
    1ddc:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <g_number_of_foxes>
    1de0:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_fox>
    1de4:	83 31       	cpi	r24, 0x13	; 19
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <_Z11setupForFoxP5Fox_t+0xbc>
    1de8:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_fox>
    1dec:	8e 30       	cpi	r24, 0x0E	; 14
    1dee:	20 f0       	brcs	.+8      	; 0x1df8 <_Z11setupForFoxP5Fox_t+0xc0>
    1df0:	8f e0       	ldi	r24, 0x0F	; 15
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <_Z11setupForFoxP5Fox_t+0xc2>
    1df4:	8a e0       	ldi	r24, 0x0A	; 10
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <_Z11setupForFoxP5Fox_t+0xc2>
    1df8:	8a e0       	ldi	r24, 0x0A	; 10
    1dfa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_pattern_codespeed>
    1dfe:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_fox>
    1e02:	8e 30       	cpi	r24, 0x0E	; 14
    1e04:	18 f0       	brcs	.+6      	; 0x1e0c <_Z11setupForFoxP5Fox_t+0xd4>
    1e06:	8d e0       	ldi	r24, 0x0D	; 13
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <_Z11setupForFoxP5Fox_t+0xd8>
    1e0c:	88 e0       	ldi	r24, 0x08	; 8
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <g_fox_id_offset+0x1>
    1e14:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <g_fox_id_offset>
    1e18:	88 e5       	ldi	r24, 0x58	; 88
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <g_id_interval+0x1>
    1e20:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <g_id_interval>
    1e24:	88 e7       	ldi	r24, 0x78	; 120
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_startclock_interval+0x1>
    1e2c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_startclock_interval>
    1e30:	20 c0       	rjmp	.+64     	; 0x1e72 <_Z11setupForFoxP5Fox_t+0x13a>
    1e32:	88 e5       	ldi	r24, 0x58	; 88
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <g_on_air_interval+0x1>
    1e3a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <g_on_air_interval>
    1e3e:	21 e0       	ldi	r18, 0x01	; 1
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <g_number_of_foxes+0x1>
    1e46:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <g_number_of_foxes>
    1e4a:	28 e0       	ldi	r18, 0x08	; 8
    1e4c:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <g_pattern_codespeed>
    1e50:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <g_id_interval+0x1>
    1e54:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <g_id_interval>
    1e58:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_fox>
    1e5c:	88 30       	cpi	r24, 0x08	; 8
    1e5e:	19 f0       	breq	.+6      	; 0x1e66 <_Z11setupForFoxP5Fox_t+0x12e>
    1e60:	8c e2       	ldi	r24, 0x2C	; 44
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <_Z11setupForFoxP5Fox_t+0x132>
    1e66:	88 e7       	ldi	r24, 0x78	; 120
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_startclock_interval+0x1>
    1e6e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_startclock_interval>
    1e72:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_use_rtc_to_start>
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <_Z11setupForFoxP5Fox_t+0x144>
    1e7a:	8a c0       	rjmp	.+276    	; 0x1f90 <_Z11setupForFoxP5Fox_t+0x258>
    1e7c:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    1e80:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    1e84:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    1e88:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    1e8c:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    1e90:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    1e94:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    1e98:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    1e9c:	48 17       	cp	r20, r24
    1e9e:	59 07       	cpc	r21, r25
    1ea0:	6a 07       	cpc	r22, r26
    1ea2:	7b 07       	cpc	r23, r27
    1ea4:	08 f0       	brcs	.+2      	; 0x1ea8 <_Z11setupForFoxP5Fox_t+0x170>
    1ea6:	4d c0       	rjmp	.+154    	; 0x1f42 <_Z11setupForFoxP5Fox_t+0x20a>
    1ea8:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    1eac:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    1eb0:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    1eb4:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    1eb8:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    1ebc:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    1ec0:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    1ec4:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    1ec8:	84 1b       	sub	r24, r20
    1eca:	95 0b       	sbc	r25, r21
    1ecc:	a6 0b       	sbc	r26, r22
    1ece:	b7 0b       	sbc	r27, r23
    1ed0:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <g_seconds_since_sync>
    1ed4:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <g_seconds_since_sync+0x1>
    1ed8:	a0 93 e0 04 	sts	0x04E0, r26	; 0x8004e0 <g_seconds_since_sync+0x2>
    1edc:	b0 93 e1 04 	sts	0x04E1, r27	; 0x8004e1 <g_seconds_since_sync+0x3>
    1ee0:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_on_the_air+0x1>
    1ee4:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_on_the_air>
    1ee8:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <g_code_throttle+0x1>
    1eec:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <g_code_throttle>
    1ef0:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_callsign_sent>
    1ef4:	60 91 de 04 	lds	r22, 0x04DE	; 0x8004de <g_seconds_since_sync>
    1ef8:	70 91 df 04 	lds	r23, 0x04DF	; 0x8004df <g_seconds_since_sync+0x1>
    1efc:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_seconds_since_sync+0x2>
    1f00:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <g_seconds_since_sync+0x3>
    1f04:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <g_on_air_interval>
    1f08:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <g_on_air_interval+0x1>
    1f0c:	03 2e       	mov	r0, r19
    1f0e:	00 0c       	add	r0, r0
    1f10:	44 0b       	sbc	r20, r20
    1f12:	55 0b       	sbc	r21, r21
    1f14:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divmodsi4>
    1f18:	6f 5f       	subi	r22, 0xFF	; 255
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <g_fox_counter+0x1>
    1f20:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <g_fox_counter>
    1f24:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_fox_seconds_into_interval+0x1>
    1f28:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_fox_seconds_into_interval>
    1f2c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <g_fox_transition>
    1f30:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <g_fox_id_offset+0x1>
    1f34:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <g_fox_id_offset>
    1f38:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_time_to_ID>
    1f3c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_audio_tone_state>
    1f40:	47 c0       	rjmp	.+142    	; 0x1fd0 <_Z11setupForFoxP5Fox_t+0x298>
    1f42:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <g_seconds_since_sync>
    1f46:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <g_seconds_since_sync+0x1>
    1f4a:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <g_seconds_since_sync+0x2>
    1f4e:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <g_seconds_since_sync+0x3>
    1f52:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_on_the_air+0x1>
    1f56:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_on_the_air>
    1f5a:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <g_code_throttle+0x1>
    1f5e:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <g_code_throttle>
    1f62:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_callsign_sent>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_fox_counter+0x1>
    1f6e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_fox_counter>
    1f72:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_fox_seconds_into_interval+0x1>
    1f76:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_fox_seconds_into_interval>
    1f7a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <g_fox_transition>
    1f7e:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <g_fox_id_offset+0x1>
    1f82:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <g_fox_id_offset>
    1f86:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_time_to_ID>
    1f8a:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_audio_tone_state>
    1f8e:	20 c0       	rjmp	.+64     	; 0x1fd0 <_Z11setupForFoxP5Fox_t+0x298>
    1f90:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <g_seconds_since_sync>
    1f94:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <g_seconds_since_sync+0x1>
    1f98:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <g_seconds_since_sync+0x2>
    1f9c:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <g_seconds_since_sync+0x3>
    1fa0:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_on_the_air+0x1>
    1fa4:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_on_the_air>
    1fa8:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <g_code_throttle+0x1>
    1fac:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <g_code_throttle>
    1fb0:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_callsign_sent>
    1fb4:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_fox_seconds_into_interval+0x1>
    1fb8:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_fox_seconds_into_interval>
    1fbc:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <g_fox_transition>
    1fc0:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <g_fox_id_offset+0x1>
    1fc4:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <g_fox_id_offset>
    1fc8:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_time_to_ID>
    1fcc:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_audio_tone_state>
    1fd0:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <g_enable_LEDs>
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	91 11       	cpse	r25, r1
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_ZL16g_LEDs_Timed_Out>
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	87 e0       	ldi	r24, 0x07	; 7
    1fe2:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    1fe6:	08 95       	ret

00001fe8 <__vector_1>:
    1fe8:	1f 92       	push	r1
    1fea:	0f 92       	push	r0
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	0f 92       	push	r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	2f 93       	push	r18
    1ff4:	3f 93       	push	r19
    1ff6:	4f 93       	push	r20
    1ff8:	5f 93       	push	r21
    1ffa:	6f 93       	push	r22
    1ffc:	7f 93       	push	r23
    1ffe:	8f 93       	push	r24
    2000:	9f 93       	push	r25
    2002:	af 93       	push	r26
    2004:	bf 93       	push	r27
    2006:	ef 93       	push	r30
    2008:	ff 93       	push	r31
    200a:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    200e:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2012:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2016:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	a1 1d       	adc	r26, r1
    201e:	b1 1d       	adc	r27, r1
    2020:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_current_epoch>
    2024:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <g_current_epoch+0x1>
    2028:	a0 93 d5 04 	sts	0x04D5, r26	; 0x8004d5 <g_current_epoch+0x2>
    202c:	b0 93 d6 04 	sts	0x04D6, r27	; 0x8004d6 <g_current_epoch+0x3>
    2030:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_temperature_check_countdown>
    2034:	88 23       	and	r24, r24
    2036:	29 f0       	breq	.+10     	; 0x2042 <__vector_1+0x5a>
    2038:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_temperature_check_countdown>
    203c:	81 50       	subi	r24, 0x01	; 1
    203e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_temperature_check_countdown>
    2042:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_transmissions_disabled>
    2046:	88 23       	and	r24, r24
    2048:	91 f1       	breq	.+100    	; 0x20ae <__vector_1+0xc6>
    204a:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_use_rtc_to_start>
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <__vector_1+0x6c>
    2052:	35 c1       	rjmp	.+618    	; 0x22be <__vector_1+0x2d6>
    2054:	40 91 d3 04 	lds	r20, 0x04D3	; 0x8004d3 <g_current_epoch>
    2058:	50 91 d4 04 	lds	r21, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    205c:	60 91 d5 04 	lds	r22, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2060:	70 91 d6 04 	lds	r23, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2064:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2068:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    206c:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2070:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2074:	48 17       	cp	r20, r24
    2076:	59 07       	cpc	r21, r25
    2078:	6a 07       	cpc	r22, r26
    207a:	7b 07       	cpc	r23, r27
    207c:	08 f4       	brcc	.+2      	; 0x2080 <__vector_1+0x98>
    207e:	1f c1       	rjmp	.+574    	; 0x22be <__vector_1+0x2d6>
    2080:	40 91 d3 04 	lds	r20, 0x04D3	; 0x8004d3 <g_current_epoch>
    2084:	50 91 d4 04 	lds	r21, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2088:	60 91 d5 04 	lds	r22, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    208c:	70 91 d6 04 	lds	r23, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2090:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    2094:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    2098:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    209c:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    20a0:	48 17       	cp	r20, r24
    20a2:	59 07       	cpc	r21, r25
    20a4:	6a 07       	cpc	r22, r26
    20a6:	7b 07       	cpc	r23, r27
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <__vector_1+0xc4>
    20aa:	cf c0       	rjmp	.+414    	; 0x224a <__vector_1+0x262>
    20ac:	08 c1       	rjmp	.+528    	; 0x22be <__vector_1+0x2d6>
    20ae:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_use_rtc_to_start>
    20b2:	88 23       	and	r24, r24
    20b4:	f1 f0       	breq	.+60     	; 0x20f2 <__vector_1+0x10a>
    20b6:	40 91 d3 04 	lds	r20, 0x04D3	; 0x8004d3 <g_current_epoch>
    20ba:	50 91 d4 04 	lds	r21, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    20be:	60 91 d5 04 	lds	r22, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    20c2:	70 91 d6 04 	lds	r23, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    20c6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    20ca:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    20ce:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    20d2:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    20d6:	48 17       	cp	r20, r24
    20d8:	59 07       	cpc	r21, r25
    20da:	6a 07       	cpc	r22, r26
    20dc:	7b 07       	cpc	r23, r27
    20de:	48 f0       	brcs	.+18     	; 0x20f2 <__vector_1+0x10a>
    20e0:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <g_use_rtc_to_start>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_transmissions_disabled>
    20ea:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_on_the_air+0x1>
    20ee:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_on_the_air>
    20f2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_transmissions_disabled>
    20f6:	81 11       	cpse	r24, r1
    20f8:	e2 c0       	rjmp	.+452    	; 0x22be <__vector_1+0x2d6>
    20fa:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_seconds_since_sync>
    20fe:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <g_seconds_since_sync+0x1>
    2102:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <g_seconds_since_sync+0x2>
    2106:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <g_seconds_since_sync+0x3>
    210a:	89 2b       	or	r24, r25
    210c:	8a 2b       	or	r24, r26
    210e:	8b 2b       	or	r24, r27
    2110:	81 f4       	brne	.+32     	; 0x2132 <__vector_1+0x14a>
    2112:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <g_id_interval>
    2116:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <g_id_interval+0x1>
    211a:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <_ZZ10__vector_1E12id_countdown+0x1>
    211e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_ZZ10__vector_1E12id_countdown>
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_fox_counter+0x1>
    212a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_fox_counter>
    212e:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <g_lastSeconds>
    2132:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_seconds_since_sync>
    2136:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <g_seconds_since_sync+0x1>
    213a:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <g_seconds_since_sync+0x2>
    213e:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <g_seconds_since_sync+0x3>
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	a1 1d       	adc	r26, r1
    2146:	b1 1d       	adc	r27, r1
    2148:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <g_seconds_since_sync>
    214c:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <g_seconds_since_sync+0x1>
    2150:	a0 93 e0 04 	sts	0x04E0, r26	; 0x8004e0 <g_seconds_since_sync+0x2>
    2154:	b0 93 e1 04 	sts	0x04E1, r27	; 0x8004e1 <g_seconds_since_sync+0x3>
    2158:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <g_fox_seconds_into_interval>
    215c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <g_fox_seconds_into_interval+0x1>
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <g_fox_seconds_into_interval+0x1>
    2166:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <g_fox_seconds_into_interval>
    216a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZZ10__vector_1E12id_countdown>
    216e:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <_ZZ10__vector_1E12id_countdown+0x1>
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	29 f0       	breq	.+10     	; 0x2180 <__vector_1+0x198>
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <_ZZ10__vector_1E12id_countdown+0x1>
    217c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_ZZ10__vector_1E12id_countdown>
    2180:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <g_number_of_foxes>
    2184:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <g_number_of_foxes+0x1>
    2188:	89 2b       	or	r24, r25
    218a:	e1 f1       	breq	.+120    	; 0x2204 <__vector_1+0x21c>
    218c:	60 91 de 04 	lds	r22, 0x04DE	; 0x8004de <g_seconds_since_sync>
    2190:	70 91 df 04 	lds	r23, 0x04DF	; 0x8004df <g_seconds_since_sync+0x1>
    2194:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_seconds_since_sync+0x2>
    2198:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <g_seconds_since_sync+0x3>
    219c:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <g_on_air_interval>
    21a0:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <g_on_air_interval+0x1>
    21a4:	03 2e       	mov	r0, r19
    21a6:	00 0c       	add	r0, r0
    21a8:	44 0b       	sbc	r20, r20
    21aa:	55 0b       	sbc	r21, r21
    21ac:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divmodsi4>
    21b0:	67 2b       	or	r22, r23
    21b2:	68 2b       	or	r22, r24
    21b4:	69 2b       	or	r22, r25
    21b6:	09 f4       	brne	.+2      	; 0x21ba <__vector_1+0x1d2>
    21b8:	4f c0       	rjmp	.+158    	; 0x2258 <__vector_1+0x270>
    21ba:	24 c0       	rjmp	.+72     	; 0x2204 <__vector_1+0x21c>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_fox_counter+0x1>
    21c4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_fox_counter>
    21c8:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_ZL16g_LEDs_Timed_Out>
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	87 e0       	ldi	r24, 0x07	; 7
    21d0:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <g_fox_transition>
    21da:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_fox_seconds_into_interval+0x1>
    21de:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_fox_seconds_into_interval>
    21e2:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZZ10__vector_1E12id_countdown>
    21e6:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <_ZZ10__vector_1E12id_countdown+0x1>
    21ea:	89 2b       	or	r24, r25
    21ec:	59 f4       	brne	.+22     	; 0x2204 <__vector_1+0x21c>
    21ee:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <g_id_interval>
    21f2:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <g_id_interval+0x1>
    21f6:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <_ZZ10__vector_1E12id_countdown+0x1>
    21fa:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_ZZ10__vector_1E12id_countdown>
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_time_to_ID>
    2204:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <g_enable_start_timer>
    2208:	88 23       	and	r24, r24
    220a:	09 f4       	brne	.+2      	; 0x220e <__vector_1+0x226>
    220c:	56 c0       	rjmp	.+172    	; 0x22ba <__vector_1+0x2d2>
    220e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_seconds_since_sync>
    2212:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <g_seconds_since_sync+0x1>
    2216:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <g_seconds_since_sync+0x2>
    221a:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <g_seconds_since_sync+0x3>
    221e:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <g_startclock_interval>
    2222:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <g_startclock_interval+0x1>
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	65 5f       	subi	r22, 0xF5	; 245
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	03 2e       	mov	r0, r19
    2234:	00 0c       	add	r0, r0
    2236:	44 0b       	sbc	r20, r20
    2238:	55 0b       	sbc	r21, r21
    223a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divmodsi4>
    223e:	6b 30       	cpi	r22, 0x0B	; 11
    2240:	71 05       	cpc	r23, r1
    2242:	81 05       	cpc	r24, r1
    2244:	91 05       	cpc	r25, r1
    2246:	f4 f0       	brlt	.+60     	; 0x2284 <__vector_1+0x29c>
    2248:	38 c0       	rjmp	.+112    	; 0x22ba <__vector_1+0x2d2>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_Z11setupForFoxP5Fox_t>
    2252:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <g_transmissions_disabled>
    2256:	33 c0       	rjmp	.+102    	; 0x22be <__vector_1+0x2d6>
    2258:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_fox_counter>
    225c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_fox_counter+0x1>
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_fox_counter+0x1>
    2266:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_fox_counter>
    226a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_fox_counter>
    226e:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_fox_counter+0x1>
    2272:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <g_number_of_foxes>
    2276:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <g_number_of_foxes+0x1>
    227a:	82 17       	cp	r24, r18
    227c:	93 07       	cpc	r25, r19
    227e:	0c f0       	brlt	.+2      	; 0x2282 <__vector_1+0x29a>
    2280:	a9 cf       	rjmp	.-174    	; 0x21d4 <__vector_1+0x1ec>
    2282:	9c cf       	rjmp	.-200    	; 0x21bc <__vector_1+0x1d4>
    2284:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_seconds_since_sync>
    2288:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <g_seconds_since_sync+0x1>
    228c:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <g_seconds_since_sync+0x2>
    2290:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <g_seconds_since_sync+0x3>
    2294:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <g_startclock_interval>
    2298:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <g_startclock_interval+0x1>
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	65 5f       	subi	r22, 0xF5	; 245
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	8f 4f       	sbci	r24, 0xFF	; 255
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	03 2e       	mov	r0, r19
    22aa:	00 0c       	add	r0, r0
    22ac:	44 0b       	sbc	r20, r20
    22ae:	55 0b       	sbc	r21, r21
    22b0:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__divmodsi4>
    22b4:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <g_lastSeconds>
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <__vector_1+0x2d6>
    22ba:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <g_lastSeconds>
    22be:	ff 91       	pop	r31
    22c0:	ef 91       	pop	r30
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <_Z7permFox5Fox_t>:
    22e0:	68 2f       	mov	r22, r24
    22e2:	8a e5       	ldi	r24, 0x5A	; 90
    22e4:	92 e0       	ldi	r25, 0x02	; 2
    22e6:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>
    22ea:	08 95       	ret

000022ec <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    22ec:	fc 01       	movw	r30, r24
	while(*s)
    22ee:	21 91       	ld	r18, Z+
    22f0:	22 23       	and	r18, r18
    22f2:	41 f0       	breq	.+16     	; 0x2304 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	20 53       	subi	r18, 0x30	; 48
    22f8:	31 09       	sbc	r19, r1
    22fa:	2a 30       	cpi	r18, 0x0A	; 10
    22fc:	31 05       	cpc	r19, r1
    22fe:	b8 f3       	brcs	.-18     	; 0x22ee <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	08 95       	ret
		}
	}

	return( TRUE);
    2304:	81 e0       	ldi	r24, 0x01	; 1
}
    2306:	08 95       	ret

00002308 <_Z13startEventNowv>:

void startEventNow(void)
{
	setupForFox(NULL);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_Z11setupForFoxP5Fox_t>
	g_transmissions_disabled = FALSE;
    2310:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <g_transmissions_disabled>
	lb_send_string((char*)"Sync OK\n> ",FALSE);
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	8c e9       	ldi	r24, 0x9C	; 156
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    231e:	08 95       	ret

00002320 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_Z11digitalReadh>

	if(pinVal)  /* Sync is high */
    2348:	88 23       	and	r24, r24
    234a:	71 f0       	breq	.+28     	; 0x2368 <__vector_5+0x48>
	{
		g_LEDs_Timed_Out = FALSE; /* Restart LEDs */
    234c:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZL16g_LEDs_Timed_Out>
		
		if(g_sync_pin_stable)
    2350:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_sync_pin_stable>
    2354:	88 23       	and	r24, r24
    2356:	41 f0       	breq	.+16     	; 0x2368 <__vector_5+0x48>
		{
			startEventNow();
    2358:	0e 94 84 11 	call	0x2308	; 0x2308 <_Z13startEventNowv>
			g_sync_pin_stable = FALSE;
    235c:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <g_sync_pin_stable>
			digitalWrite(PIN_LED2, OFF);    /*  LED */
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	87 e0       	ldi	r24, 0x07	; 7
    2364:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
		}
	}

	g_sync_pin_timer = 0;
    2368:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_sync_pin_timer+0x1>
    236c:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <g_sync_pin_timer>
}
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <_Z18reportConfigErrorsv>:
	lb_send_string((char*)"Sync OK\n> ",FALSE);
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    2392:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <g_messages_text+0x15>
    2396:	81 11       	cpse	r24, r1
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <_Z18reportConfigErrorsv+0x10>
	{
		sendEEPROMString(&ee_textSetID[0]);
    239a:	80 e7       	ldi	r24, 0x70	; 112
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	}
	
	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    23a2:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    23a6:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    23aa:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    23ae:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    23b2:	81 15       	cp	r24, r1
    23b4:	96 46       	sbci	r25, 0x66	; 102
    23b6:	ae 4e       	sbci	r26, 0xEE	; 238
    23b8:	bf 45       	sbci	r27, 0x5F	; 95
    23ba:	20 f4       	brcc	.+8      	; 0x23c4 <_Z18reportConfigErrorsv+0x32>
	{
		sendEEPROMString(&ee_textSetTime[0]);
    23bc:	8e ed       	ldi	r24, 0xDE	; 222
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
	}

	if(g_event_finish_epoch < g_current_epoch)  /* Event has already finished */
    23c4:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    23c8:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    23cc:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    23d0:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    23d4:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    23d8:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    23dc:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    23e0:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    23e4:	48 17       	cp	r20, r24
    23e6:	59 07       	cpc	r21, r25
    23e8:	6a 07       	cpc	r22, r26
    23ea:	7b 07       	cpc	r23, r27
    23ec:	f0 f4       	brcc	.+60     	; 0x242a <_Z18reportConfigErrorsv+0x98>
	{	
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    23ee:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    23f2:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    23f6:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    23fa:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    23fe:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    2402:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2406:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    240a:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    240e:	48 17       	cp	r20, r24
    2410:	59 07       	cpc	r21, r25
    2412:	6a 07       	cpc	r22, r26
    2414:	7b 07       	cpc	r23, r27
    2416:	20 f4       	brcc	.+8      	; 0x2420 <_Z18reportConfigErrorsv+0x8e>
		{
			sendEEPROMString(&ee_textSetStart[0]);
    2418:	88 eb       	ldi	r24, 0xB8	; 184
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
		}

		sendEEPROMString(&ee_textSetFinish[0]);
    2420:	81 e9       	ldi	r24, 0x91	; 145
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    2428:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    242a:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    242e:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2432:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2436:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    243a:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    243e:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2442:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2446:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    244a:	48 17       	cp	r20, r24
    244c:	59 07       	cpc	r21, r25
    244e:	6a 07       	cpc	r22, r26
    2450:	7b 07       	cpc	r23, r27
    2452:	28 f4       	brcc	.+10     	; 0x245e <_Z18reportConfigErrorsv+0xcc>
	{
		lb_send_string((char *)"Event running...\n", TRUE);
    2454:	61 e0       	ldi	r22, 0x01	; 1
    2456:	87 ea       	ldi	r24, 0xA7	; 167
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    245e:	08 95       	ret

00002460 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
    2460:	2f 92       	push	r2
    2462:	3f 92       	push	r3
    2464:	4f 92       	push	r4
    2466:	5f 92       	push	r5
    2468:	6f 92       	push	r6
    246a:	7f 92       	push	r7
    246c:	8f 92       	push	r8
    246e:	9f 92       	push	r9
    2470:	af 92       	push	r10
    2472:	bf 92       	push	r11
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	2c 97       	sbiw	r28, 0x0c	; 12
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	2b 01       	movw	r4, r22
    2496:	3c 01       	movw	r6, r24
    2498:	49 01       	movw	r8, r18
    249a:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    249c:	62 17       	cp	r22, r18
    249e:	73 07       	cpc	r23, r19
    24a0:	84 07       	cpc	r24, r20
    24a2:	95 07       	cpc	r25, r21
    24a4:	50 f0       	brcs	.+20     	; 0x24ba <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    24a6:	e1 14       	cp	r14, r1
    24a8:	f1 04       	cpc	r15, r1
    24aa:	09 f4       	brne	.+2      	; 0x24ae <_Z14reportTimeTillmmPKcS0_+0x4e>
    24ac:	04 c1       	rjmp	.+520    	; 0x26b6 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg,TRUE);
    24ae:	61 e0       	ldi	r22, 0x01	; 1
    24b0:	c7 01       	movw	r24, r14
    24b2:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	ff c0       	rjmp	.+510    	; 0x26b8 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg,TRUE);
		}
	}
	else
	{
		if(prefix)
    24ba:	01 15       	cp	r16, r1
    24bc:	11 05       	cpc	r17, r1
    24be:	21 f0       	breq	.+8      	; 0x24c8 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix,TRUE);
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	c8 01       	movw	r24, r16
    24c4:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    24c8:	75 01       	movw	r14, r10
    24ca:	64 01       	movw	r12, r8
    24cc:	c4 18       	sub	r12, r4
    24ce:	d5 08       	sbc	r13, r5
    24d0:	e6 08       	sbc	r14, r6
    24d2:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    24d4:	c7 01       	movw	r24, r14
    24d6:	b6 01       	movw	r22, r12
    24d8:	20 e8       	ldi	r18, 0x80	; 128
    24da:	33 e3       	ldi	r19, 0x33	; 51
    24dc:	41 ee       	ldi	r20, 0xE1	; 225
    24de:	51 e0       	ldi	r21, 0x01	; 1
    24e0:	0e 94 31 22 	call	0x4462	; 0x4462 <__udivmodsi4>
    24e4:	29 01       	movw	r4, r18
    24e6:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    24e8:	44 27       	eor	r20, r20
    24ea:	55 27       	eor	r21, r21
    24ec:	60 e8       	ldi	r22, 0x80	; 128
    24ee:	73 e3       	ldi	r23, 0x33	; 51
    24f0:	81 ee       	ldi	r24, 0xE1	; 225
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__mulsi3>
    24f8:	c6 1a       	sub	r12, r22
    24fa:	d7 0a       	sbc	r13, r23
    24fc:	e8 0a       	sbc	r14, r24
    24fe:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2500:	c7 01       	movw	r24, r14
    2502:	b6 01       	movw	r22, r12
    2504:	20 e8       	ldi	r18, 0x80	; 128
    2506:	31 e5       	ldi	r19, 0x51	; 81
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	0e 94 31 22 	call	0x4462	; 0x4462 <__udivmodsi4>
    2510:	49 01       	movw	r8, r18
    2512:	5a 01       	movw	r10, r20
    2514:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2516:	44 27       	eor	r20, r20
    2518:	55 27       	eor	r21, r21
    251a:	60 e8       	ldi	r22, 0x80	; 128
    251c:	71 e5       	ldi	r23, 0x51	; 81
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__mulsi3>
    2526:	c6 1a       	sub	r12, r22
    2528:	d7 0a       	sbc	r13, r23
    252a:	e8 0a       	sbc	r14, r24
    252c:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    252e:	c7 01       	movw	r24, r14
    2530:	b6 01       	movw	r22, r12
    2532:	20 e1       	ldi	r18, 0x10	; 16
    2534:	3e e0       	ldi	r19, 0x0E	; 14
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	0e 94 31 22 	call	0x4462	; 0x4462 <__udivmodsi4>
    253e:	29 83       	std	Y+1, r18	; 0x01
    2540:	3a 83       	std	Y+2, r19	; 0x02
    2542:	4b 83       	std	Y+3, r20	; 0x03
    2544:	5c 83       	std	Y+4, r21	; 0x04
    2546:	29 81       	ldd	r18, Y+1	; 0x01
    2548:	3a 81       	ldd	r19, Y+2	; 0x02
    254a:	3a 87       	std	Y+10, r19	; 0x0a
    254c:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    254e:	29 81       	ldd	r18, Y+1	; 0x01
    2550:	3a 81       	ldd	r19, Y+2	; 0x02
    2552:	4b 81       	ldd	r20, Y+3	; 0x03
    2554:	5c 81       	ldd	r21, Y+4	; 0x04
    2556:	44 27       	eor	r20, r20
    2558:	55 27       	eor	r21, r21
    255a:	a0 e1       	ldi	r26, 0x10	; 16
    255c:	be e0       	ldi	r27, 0x0E	; 14
    255e:	0e 94 8e 22 	call	0x451c	; 0x451c <__muluhisi3>
    2562:	c6 1a       	sub	r12, r22
    2564:	d7 0a       	sbc	r13, r23
    2566:	e8 0a       	sbc	r14, r24
    2568:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    256a:	c7 01       	movw	r24, r14
    256c:	b6 01       	movw	r22, r12
    256e:	2c e3       	ldi	r18, 0x3C	; 60
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	0e 94 31 22 	call	0x4462	; 0x4462 <__udivmodsi4>
    257a:	2d 83       	std	Y+5, r18	; 0x05
    257c:	3e 83       	std	Y+6, r19	; 0x06
    257e:	4f 83       	std	Y+7, r20	; 0x07
    2580:	58 87       	std	Y+8, r21	; 0x08
    2582:	0d 81       	ldd	r16, Y+5	; 0x05
    2584:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2586:	2c e3       	ldi	r18, 0x3C	; 60
    2588:	20 9f       	mul	r18, r16
    258a:	c0 01       	movw	r24, r0
    258c:	21 9f       	mul	r18, r17
    258e:	90 0d       	add	r25, r0
    2590:	11 24       	eor	r1, r1
    2592:	a6 01       	movw	r20, r12
    2594:	48 1b       	sub	r20, r24
    2596:	59 0b       	sbc	r21, r25
    2598:	5c 87       	std	Y+12, r21	; 0x0c
    259a:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    259c:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_tempStr>

		if(years)
    25a0:	41 14       	cp	r4, r1
    25a2:	51 04       	cpc	r5, r1
    25a4:	b9 f0       	breq	.+46     	; 0x25d4 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr,"%d yrs ",years);
    25a6:	5f 92       	push	r5
    25a8:	4f 92       	push	r4
    25aa:	89 eb       	ldi	r24, 0xB9	; 185
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	9f 93       	push	r25
    25b0:	8f 93       	push	r24
    25b2:	88 e5       	ldi	r24, 0x58	; 88
    25b4:	94 e0       	ldi	r25, 0x04	; 4
    25b6:	9f 93       	push	r25
    25b8:	8f 93       	push	r24
    25ba:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    25be:	61 e0       	ldi	r22, 0x01	; 1
    25c0:	88 e5       	ldi	r24, 0x58	; 88
    25c2:	94 e0       	ldi	r25, 0x04	; 4
    25c4:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
		}

		if(days)
    25d4:	23 28       	or	r2, r3
    25d6:	b9 f0       	breq	.+46     	; 0x2606 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr,"%d days ",days);
    25d8:	9f 92       	push	r9
    25da:	8f 92       	push	r8
    25dc:	81 ec       	ldi	r24, 0xC1	; 193
    25de:	91 e0       	ldi	r25, 0x01	; 1
    25e0:	9f 93       	push	r25
    25e2:	8f 93       	push	r24
    25e4:	88 e5       	ldi	r24, 0x58	; 88
    25e6:	94 e0       	ldi	r25, 0x04	; 4
    25e8:	9f 93       	push	r25
    25ea:	8f 93       	push	r24
    25ec:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	88 e5       	ldi	r24, 0x58	; 88
    25f4:	94 e0       	ldi	r25, 0x04	; 4
    25f6:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
		}

		if(hours)
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	89 2b       	or	r24, r25
    260c:	c9 f0       	breq	.+50     	; 0x2640 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr,"%d hrs ",hours);
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	9f 93       	push	r25
    2612:	e9 81       	ldd	r30, Y+1	; 0x01
    2614:	ef 93       	push	r30
    2616:	8a ec       	ldi	r24, 0xCA	; 202
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	9f 93       	push	r25
    261c:	8f 93       	push	r24
    261e:	88 e5       	ldi	r24, 0x58	; 88
    2620:	94 e0       	ldi	r25, 0x04	; 4
    2622:	9f 93       	push	r25
    2624:	8f 93       	push	r24
    2626:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	88 e5       	ldi	r24, 0x58	; 88
    262e:	94 e0       	ldi	r25, 0x04	; 4
    2630:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
		}

		if(minutes)
    2640:	01 2b       	or	r16, r17
    2642:	c9 f0       	breq	.+50     	; 0x2676 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr,"%d min ",minutes);
    2644:	fe 81       	ldd	r31, Y+6	; 0x06
    2646:	ff 93       	push	r31
    2648:	2d 81       	ldd	r18, Y+5	; 0x05
    264a:	2f 93       	push	r18
    264c:	82 ed       	ldi	r24, 0xD2	; 210
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	9f 93       	push	r25
    2652:	8f 93       	push	r24
    2654:	88 e5       	ldi	r24, 0x58	; 88
    2656:	94 e0       	ldi	r25, 0x04	; 4
    2658:	9f 93       	push	r25
    265a:	8f 93       	push	r24
    265c:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	88 e5       	ldi	r24, 0x58	; 88
    2664:	94 e0       	ldi	r25, 0x04	; 4
    2666:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
		}

		sprintf(g_tempStr,"%d sec",seconds);
    2676:	3c 85       	ldd	r19, Y+12	; 0x0c
    2678:	3f 93       	push	r19
    267a:	4b 85       	ldd	r20, Y+11	; 0x0b
    267c:	4f 93       	push	r20
    267e:	8a ed       	ldi	r24, 0xDA	; 218
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	9f 93       	push	r25
    2684:	8f 93       	push	r24
    2686:	88 e5       	ldi	r24, 0x58	; 88
    2688:	94 e0       	ldi	r25, 0x04	; 4
    268a:	9f 93       	push	r25
    268c:	8f 93       	push	r24
    268e:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
		lb_send_string(g_tempStr,TRUE);
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	88 e5       	ldi	r24, 0x58	; 88
    2696:	94 e0       	ldi	r25, 0x04	; 4
    2698:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    269c:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    26a0:	e8 e5       	ldi	r30, 0x58	; 88
    26a2:	f4 e0       	ldi	r31, 0x04	; 4
    26a4:	10 82       	st	Z, r1
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
	BOOL failure = FALSE;
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    26b8:	2c 96       	adiw	r28, 0x0c	; 12
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	df 90       	pop	r13
    26d2:	cf 90       	pop	r12
    26d4:	bf 90       	pop	r11
    26d6:	af 90       	pop	r10
    26d8:	9f 90       	pop	r9
    26da:	8f 90       	pop	r8
    26dc:	7f 90       	pop	r7
    26de:	6f 90       	pop	r6
    26e0:	5f 90       	pop	r5
    26e2:	4f 90       	pop	r4
    26e4:	3f 90       	pop	r3
    26e6:	2f 90       	pop	r2
    26e8:	08 95       	ret

000026ea <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    26ea:	2f 92       	push	r2
    26ec:	3f 92       	push	r3
    26ee:	4f 92       	push	r4
    26f0:	5f 92       	push	r5
    26f2:	6f 92       	push	r6
    26f4:	7f 92       	push	r7
    26f6:	8f 92       	push	r8
    26f8:	9f 92       	push	r9
    26fa:	af 92       	push	r10
    26fc:	bf 92       	push	r11
    26fe:	cf 92       	push	r12
    2700:	df 92       	push	r13
    2702:	ef 92       	push	r14
    2704:	ff 92       	push	r15
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	28 97       	sbiw	r28, 0x08	; 8
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    271e:	0f 2e       	mov	r0, r31
    2720:	f8 ef       	ldi	r31, 0xF8	; 248
    2722:	6f 2e       	mov	r6, r31
    2724:	f1 e0       	ldi	r31, 0x01	; 1
    2726:	7f 2e       	mov	r7, r31
    2728:	f0 2d       	mov	r31, r0
    272a:	0f 2e       	mov	r0, r31
    272c:	f8 e5       	ldi	r31, 0x58	; 88
    272e:	af 2e       	mov	r10, r31
    2730:	f4 e0       	ldi	r31, 0x04	; 4
    2732:	bf 2e       	mov	r11, r31
    2734:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
					lb_send_string(g_tempStr,FALSE);
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    2736:	0f 2e       	mov	r0, r31
    2738:	fc e7       	ldi	r31, 0x7C	; 124
    273a:	8f 2e       	mov	r8, r31
    273c:	f2 e0       	ldi	r31, 0x02	; 2
    273e:	9f 2e       	mov	r9, r31
    2740:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    2742:	0f 2e       	mov	r0, r31
    2744:	f9 e3       	ldi	r31, 0x39	; 57
    2746:	4f 2e       	mov	r4, r31
    2748:	f2 e0       	ldi	r31, 0x02	; 2
    274a:	5f 2e       	mov	r5, r31
    274c:	f0 2d       	mov	r31, r0
							setupForFox(&holdFox);
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    274e:	0f 2e       	mov	r0, r31
    2750:	f8 ee       	ldi	r31, 0xE8	; 232
    2752:	2f 2e       	mov	r2, r31
    2754:	f1 e0       	ldi	r31, 0x01	; 1
    2756:	3f 2e       	mov	r3, r31
    2758:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    275a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_Z16nextFullRxBufferv>
    275e:	6c 01       	movw	r12, r24
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	09 f4       	brne	.+2      	; 0x2766 <_Z17handleLinkBusMsgsv+0x7c>
    2764:	cf c5       	rjmp	.+2974   	; 0x3304 <_Z17handleLinkBusMsgsv+0xc1a>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2766:	fc 01       	movw	r30, r24
    2768:	81 81       	ldd	r24, Z+1	; 0x01
    276a:	92 81       	ldd	r25, Z+2	; 0x02
    276c:	8a 39       	cpi	r24, 0x9A	; 154
    276e:	f3 e2       	ldi	r31, 0x23	; 35
    2770:	9f 07       	cpc	r25, r31
    2772:	09 f4       	brne	.+2      	; 0x2776 <_Z17handleLinkBusMsgsv+0x8c>
    2774:	af c5       	rjmp	.+2910   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
    2776:	c8 f4       	brcc	.+50     	; 0x27aa <_Z17handleLinkBusMsgsv+0xc0>
    2778:	85 32       	cpi	r24, 0x25	; 37
    277a:	3e e1       	ldi	r19, 0x1E	; 30
    277c:	93 07       	cpc	r25, r19
    277e:	09 f4       	brne	.+2      	; 0x2782 <_Z17handleLinkBusMsgsv+0x98>
    2780:	a9 c5       	rjmp	.+2898   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
    2782:	50 f4       	brcc	.+20     	; 0x2798 <_Z17handleLinkBusMsgsv+0xae>
    2784:	8e 31       	cpi	r24, 0x1E	; 30
    2786:	e3 e0       	ldi	r30, 0x03	; 3
    2788:	9e 07       	cpc	r25, r30
    278a:	09 f4       	brne	.+2      	; 0x278e <_Z17handleLinkBusMsgsv+0xa4>
    278c:	c8 c1       	rjmp	.+912    	; 0x2b1e <_Z17handleLinkBusMsgsv+0x434>
    278e:	8f 36       	cpi	r24, 0x6F	; 111
    2790:	9d 41       	sbci	r25, 0x1D	; 29
    2792:	09 f4       	brne	.+2      	; 0x2796 <_Z17handleLinkBusMsgsv+0xac>
    2794:	a9 c2       	rjmp	.+1362   	; 0x2ce8 <_Z17handleLinkBusMsgsv+0x5fe>
    2796:	9c c5       	rjmp	.+2872   	; 0x32d0 <_Z17handleLinkBusMsgsv+0xbe6>
    2798:	86 3c       	cpi	r24, 0xC6	; 198
    279a:	2e e1       	ldi	r18, 0x1E	; 30
    279c:	92 07       	cpc	r25, r18
    279e:	f9 f0       	breq	.+62     	; 0x27de <_Z17handleLinkBusMsgsv+0xf4>
    27a0:	86 3a       	cpi	r24, 0xA6	; 166
    27a2:	90 42       	sbci	r25, 0x20	; 32
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <_Z17handleLinkBusMsgsv+0xbe>
    27a6:	c5 c0       	rjmp	.+394    	; 0x2932 <_Z17handleLinkBusMsgsv+0x248>
    27a8:	93 c5       	rjmp	.+2854   	; 0x32d0 <_Z17handleLinkBusMsgsv+0xbe6>
    27aa:	85 3f       	cpi	r24, 0xF5	; 245
    27ac:	43 e2       	ldi	r20, 0x23	; 35
    27ae:	94 07       	cpc	r25, r20
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <_Z17handleLinkBusMsgsv+0xca>
    27b2:	05 c1       	rjmp	.+522    	; 0x29be <_Z17handleLinkBusMsgsv+0x2d4>
    27b4:	50 f4       	brcc	.+20     	; 0x27ca <_Z17handleLinkBusMsgsv+0xe0>
    27b6:	8f 3c       	cpi	r24, 0xCF	; 207
    27b8:	f3 e2       	ldi	r31, 0x23	; 35
    27ba:	9f 07       	cpc	r25, r31
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <_Z17handleLinkBusMsgsv+0xd6>
    27be:	3a c5       	rjmp	.+2676   	; 0x3234 <_Z17handleLinkBusMsgsv+0xb4a>
    27c0:	80 3d       	cpi	r24, 0xD0	; 208
    27c2:	93 42       	sbci	r25, 0x23	; 35
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <_Z17handleLinkBusMsgsv+0xde>
    27c6:	36 c2       	rjmp	.+1132   	; 0x2c34 <_Z17handleLinkBusMsgsv+0x54a>
    27c8:	83 c5       	rjmp	.+2822   	; 0x32d0 <_Z17handleLinkBusMsgsv+0xbe6>
    27ca:	84 33       	cpi	r24, 0x34	; 52
    27cc:	34 e2       	ldi	r19, 0x24	; 36
    27ce:	93 07       	cpc	r25, r19
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <_Z17handleLinkBusMsgsv+0xea>
    27d2:	2a c1       	rjmp	.+596    	; 0x2a28 <_Z17handleLinkBusMsgsv+0x33e>
    27d4:	8c 39       	cpi	r24, 0x9C	; 156
    27d6:	94 42       	sbci	r25, 0x24	; 36
    27d8:	09 f4       	brne	.+2      	; 0x27dc <_Z17handleLinkBusMsgsv+0xf2>
    27da:	81 c2       	rjmp	.+1282   	; 0x2cde <_Z17handleLinkBusMsgsv+0x5f4>
    27dc:	79 c5       	rjmp	.+2802   	; 0x32d0 <_Z17handleLinkBusMsgsv+0xbe6>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    27de:	f6 01       	movw	r30, r12
    27e0:	83 81       	ldd	r24, Z+3	; 0x03
    27e2:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	09 f4       	brne	.+2      	; 0x27ea <_Z17handleLinkBusMsgsv+0x100>
    27e8:	8f c0       	rjmp	.+286    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
				{
					if(c == 'B')
    27ea:	82 34       	cpi	r24, 0x42	; 66
    27ec:	91 05       	cpc	r25, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <_Z17handleLinkBusMsgsv+0x108>
    27f0:	77 c5       	rjmp	.+2798   	; 0x32e0 <_Z17handleLinkBusMsgsv+0xbf6>
					{
						c = BEACON;
					}
					else if(c == 'D')
    27f2:	84 34       	cpi	r24, 0x44	; 68
    27f4:	91 05       	cpc	r25, r1
    27f6:	39 f4       	brne	.+14     	; 0x2806 <_Z17handleLinkBusMsgsv+0x11c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    27f8:	87 89       	ldd	r24, Z+23	; 0x17
    27fa:	83 35       	cpi	r24, 0x53	; 83
    27fc:	09 f4       	brne	.+2      	; 0x2800 <_Z17handleLinkBusMsgsv+0x116>
    27fe:	73 c5       	rjmp	.+2790   	; 0x32e6 <_Z17handleLinkBusMsgsv+0xbfc>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2800:	86 e0       	ldi	r24, 0x06	; 6
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	75 c0       	rjmp	.+234    	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else if(c == 'F')
    2806:	86 34       	cpi	r24, 0x46	; 70
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <_Z17handleLinkBusMsgsv+0x124>
    280c:	6f c5       	rjmp	.+2782   	; 0x32ec <_Z17handleLinkBusMsgsv+0xc02>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    280e:	83 34       	cpi	r24, 0x43	; 67
    2810:	91 05       	cpc	r25, r1
    2812:	c9 f4       	brne	.+50     	; 0x2846 <_Z17handleLinkBusMsgsv+0x15c>
					{
						char t = lb_buff->fields[FIELD2][0];
    2814:	f6 01       	movw	r30, r12
    2816:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2818:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    281a:	82 34       	cpi	r24, 0x42	; 66
    281c:	29 f0       	breq	.+10     	; 0x2828 <_Z17handleLinkBusMsgsv+0x13e>
						{
							t = '0';
						}

						if(isdigit(t))
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	c0 97       	sbiw	r24, 0x30	; 48
    2822:	0a 97       	sbiw	r24, 0x0a	; 10
    2824:	08 f0       	brcs	.+2      	; 0x2828 <_Z17handleLinkBusMsgsv+0x13e>
    2826:	70 c0       	rjmp	.+224    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
						{
							c = CLAMP(BEACON,atoi(lb_buff->fields[FIELD2]),FOX_5);
    2828:	c6 01       	movw	r24, r12
    282a:	47 96       	adiw	r24, 0x17	; 23
    282c:	0e 94 a1 22 	call	0x4542	; 0x4542 <atoi>
    2830:	99 23       	and	r25, r25
    2832:	14 f4       	brge	.+4      	; 0x2838 <_Z17handleLinkBusMsgsv+0x14e>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	86 30       	cpi	r24, 0x06	; 6
    283a:	91 05       	cpc	r25, r1
    283c:	0c f4       	brge	.+2      	; 0x2840 <_Z17handleLinkBusMsgsv+0x156>
    283e:	55 c0       	rjmp	.+170    	; 0x28ea <_Z17handleLinkBusMsgsv+0x200>
    2840:	85 e0       	ldi	r24, 0x05	; 5
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	52 c0       	rjmp	.+164    	; 0x28ea <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'S')
    2846:	83 35       	cpi	r24, 0x53	; 83
    2848:	91 05       	cpc	r25, r1
    284a:	e9 f5       	brne	.+122    	; 0x28c6 <_Z17handleLinkBusMsgsv+0x1dc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    284c:	f6 01       	movw	r30, r12
    284e:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2850:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2852:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2854:	82 34       	cpi	r24, 0x42	; 66
    2856:	09 f4       	brne	.+2      	; 0x285a <_Z17handleLinkBusMsgsv+0x170>
    2858:	57 c0       	rjmp	.+174    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
						{
							x = BEACON;
						}
						else if(t == 'F')
    285a:	86 34       	cpi	r24, 0x46	; 70
    285c:	49 f4       	brne	.+18     	; 0x2870 <_Z17handleLinkBusMsgsv+0x186>
						{
							if((u > '0') && (u < '6'))
    285e:	8f ec       	ldi	r24, 0xCF	; 207
    2860:	89 0f       	add	r24, r25
    2862:	85 30       	cpi	r24, 0x05	; 5
    2864:	08 f0       	brcs	.+2      	; 0x2868 <_Z17handleLinkBusMsgsv+0x17e>
    2866:	50 c0       	rjmp	.+160    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (u - '1');
    2868:	89 2f       	mov	r24, r25
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	83 97       	sbiw	r24, 0x23	; 35
    286e:	1b c0       	rjmp	.+54     	; 0x28a6 <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(t == 'S')
    2870:	83 35       	cpi	r24, 0x53	; 83
    2872:	41 f4       	brne	.+16     	; 0x2884 <_Z17handleLinkBusMsgsv+0x19a>
						{
							if((u > '0') && (u < '6'))
    2874:	8f ec       	ldi	r24, 0xCF	; 207
    2876:	89 0f       	add	r24, r25
    2878:	85 30       	cpi	r24, 0x05	; 5
    287a:	c0 f4       	brcc	.+48     	; 0x28ac <_Z17handleLinkBusMsgsv+0x1c2>
							{
								x = SPRINT_S1 + (u - '1');
    287c:	89 2f       	mov	r24, r25
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	88 97       	sbiw	r24, 0x28	; 40
    2882:	11 c0       	rjmp	.+34     	; 0x28a6 <_Z17handleLinkBusMsgsv+0x1bc>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2884:	96 34       	cpi	r25, 0x46	; 70
    2886:	39 f4       	brne	.+14     	; 0x2896 <_Z17handleLinkBusMsgsv+0x1ac>
						{
							if((t > '0') && (t < '6'))
    2888:	9f ec       	ldi	r25, 0xCF	; 207
    288a:	98 0f       	add	r25, r24
    288c:	95 30       	cpi	r25, 0x05	; 5
    288e:	e0 f5       	brcc	.+120    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (t - '1');
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	83 97       	sbiw	r24, 0x23	; 35
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(u == 'S')
    2896:	93 35       	cpi	r25, 0x53	; 83
    2898:	b9 f5       	brne	.+110    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
						{
							if((t > '0') && (t < '6'))
    289a:	9f ec       	ldi	r25, 0xCF	; 207
    289c:	98 0f       	add	r25, r24
    289e:	95 30       	cpi	r25, 0x05	; 5
    28a0:	98 f5       	brcc	.+102    	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (t - '1');
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	19 f4       	brne	.+6      	; 0x28b0 <_Z17handleLinkBusMsgsv+0x1c6>
    28aa:	2e c0       	rjmp	.+92     	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    28ac:	88 e0       	ldi	r24, 0x08	; 8
    28ae:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR,x,SPRINT_F5);
    28b0:	88 30       	cpi	r24, 0x08	; 8
    28b2:	91 05       	cpc	r25, r1
    28b4:	14 f4       	brge	.+4      	; 0x28ba <_Z17handleLinkBusMsgsv+0x1d0>
    28b6:	88 e0       	ldi	r24, 0x08	; 8
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	83 31       	cpi	r24, 0x13	; 19
    28bc:	91 05       	cpc	r25, r1
    28be:	ac f0       	brlt	.+42     	; 0x28ea <_Z17handleLinkBusMsgsv+0x200>
    28c0:	82 e1       	ldi	r24, 0x12	; 18
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	12 c0       	rjmp	.+36     	; 0x28ea <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'N')
    28c6:	8e 34       	cpi	r24, 0x4E	; 78
    28c8:	91 05       	cpc	r25, r1
    28ca:	59 f4       	brne	.+22     	; 0x28e2 <_Z17handleLinkBusMsgsv+0x1f8>
					{
						char t = lb_buff->fields[FIELD2][0];
    28cc:	f6 01       	movw	r30, r12
    28ce:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    28d0:	82 33       	cpi	r24, 0x32	; 50
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <_Z17handleLinkBusMsgsv+0x1ec>
    28d4:	0d c5       	rjmp	.+2586   	; 0x32f0 <_Z17handleLinkBusMsgsv+0xc06>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    28d6:	85 33       	cpi	r24, 0x35	; 53
    28d8:	09 f4       	brne	.+2      	; 0x28dc <_Z17handleLinkBusMsgsv+0x1f2>
    28da:	0c c5       	rjmp	.+2584   	; 0x32f4 <_Z17handleLinkBusMsgsv+0xc0a>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	07 c0       	rjmp	.+14     	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    28e2:	c6 01       	movw	r24, r12
    28e4:	03 96       	adiw	r24, 0x03	; 3
    28e6:	0e 94 a1 22 	call	0x4542	; 0x4542 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    28ea:	86 31       	cpi	r24, 0x16	; 22
    28ec:	91 05       	cpc	r25, r1
    28ee:	60 f4       	brcc	.+24     	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
					{
						Fox_t holdFox = (Fox_t)c;
    28f0:	89 83       	std	Y+1, r24	; 0x01
						permFox(holdFox);
    28f2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <_Z7permFox5Fox_t>
						if(holdFox != g_fox)
    28f6:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_fox>
    28fa:	99 81       	ldd	r25, Y+1	; 0x01
    28fc:	98 17       	cp	r25, r24
    28fe:	21 f0       	breq	.+8      	; 0x2908 <_Z17handleLinkBusMsgsv+0x21e>
						{
							setupForFox(&holdFox);
    2900:	ce 01       	movw	r24, r28
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2908:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_fox>
    290c:	1f 92       	push	r1
    290e:	8f 93       	push	r24
    2910:	3f 92       	push	r3
    2912:	2f 92       	push	r2
    2914:	bf 92       	push	r11
    2916:	af 92       	push	r10
    2918:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	c5 01       	movw	r24, r10
    2920:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
			}
			break;
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	d1 c4       	rjmp	.+2466   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    2932:	f6 01       	movw	r30, r12
    2934:	83 81       	ldd	r24, Z+3	; 0x03
    2936:	88 23       	and	r24, r24
    2938:	01 f1       	breq	.+64     	; 0x297a <_Z17handleLinkBusMsgsv+0x290>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    293a:	94 81       	ldd	r25, Z+4	; 0x04
    293c:	96 34       	cpi	r25, 0x46	; 70
    293e:	11 f0       	breq	.+4      	; 0x2944 <_Z17handleLinkBusMsgsv+0x25a>
    2940:	80 33       	cpi	r24, 0x30	; 48
    2942:	59 f4       	brne	.+22     	; 0x295a <_Z17handleLinkBusMsgsv+0x270>
					{
						g_enable_LEDs = FALSE;
    2944:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <g_enable_LEDs>
						digitalWrite(PIN_LED1,OFF); /*  LED Off */
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	8d e0       	ldi	r24, 0x0D	; 13
    294c:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
						digitalWrite(PIN_LED2,OFF);
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	87 e0       	ldi	r24, 0x07	; 7
    2954:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
    2958:	03 c0       	rjmp	.+6      	; 0x2960 <_Z17handleLinkBusMsgsv+0x276>
					}
					else
					{
						g_enable_LEDs = TRUE;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <g_enable_LEDs>
					}

					eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);
    2960:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <g_enable_LEDs>
    2964:	89 e5       	ldi	r24, 0x59	; 89
    2966:	92 e0       	ldi	r25, 0x02	; 2
    2968:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    296c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <g_enable_LEDs>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	91 11       	cpse	r25, r1
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr,"LED:%s\n",g_enable_LEDs ? "ON" : "OFF");
    297a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <g_enable_LEDs>
    297e:	81 11       	cpse	r24, r1
    2980:	05 c0       	rjmp	.+10     	; 0x298c <_Z17handleLinkBusMsgsv+0x2a2>
    2982:	24 ee       	ldi	r18, 0xE4	; 228
    2984:	31 e0       	ldi	r19, 0x01	; 1
    2986:	82 2f       	mov	r24, r18
    2988:	93 2f       	mov	r25, r19
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <_Z17handleLinkBusMsgsv+0x2aa>
    298c:	e1 ee       	ldi	r30, 0xE1	; 225
    298e:	f1 e0       	ldi	r31, 0x01	; 1
    2990:	8e 2f       	mov	r24, r30
    2992:	9f 2f       	mov	r25, r31
    2994:	9f 93       	push	r25
    2996:	8f 93       	push	r24
    2998:	80 ef       	ldi	r24, 0xF0	; 240
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	9f 93       	push	r25
    299e:	8f 93       	push	r24
    29a0:	bf 92       	push	r11
    29a2:	af 92       	push	r10
    29a4:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	c5 01       	movw	r24, r10
    29ac:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
			}
			break;
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	8b c4       	rjmp	.+2326   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    29be:	f6 01       	movw	r30, r12
    29c0:	83 81       	ldd	r24, Z+3	; 0x03
    29c2:	88 23       	and	r24, r24
    29c4:	89 f0       	breq	.+34     	; 0x29e8 <_Z17handleLinkBusMsgsv+0x2fe>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    29c6:	94 81       	ldd	r25, Z+4	; 0x04
    29c8:	96 34       	cpi	r25, 0x46	; 70
    29ca:	11 f0       	breq	.+4      	; 0x29d0 <_Z17handleLinkBusMsgsv+0x2e6>
    29cc:	80 33       	cpi	r24, 0x30	; 48
    29ce:	19 f4       	brne	.+6      	; 0x29d6 <_Z17handleLinkBusMsgsv+0x2ec>
					{
						g_enable_start_timer = FALSE;
    29d0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <g_enable_start_timer>
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <_Z17handleLinkBusMsgsv+0x2f2>
					}
					else
					{
						g_enable_start_timer = TRUE;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <g_enable_start_timer>
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
    29dc:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <g_enable_start_timer>
    29e0:	84 e5       	ldi	r24, 0x54	; 84
    29e2:	92 e0       	ldi	r25, 0x02	; 2
    29e4:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    29e8:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <g_enable_start_timer>
    29ec:	81 11       	cpse	r24, r1
    29ee:	05 c0       	rjmp	.+10     	; 0x29fa <_Z17handleLinkBusMsgsv+0x310>
    29f0:	24 ee       	ldi	r18, 0xE4	; 228
    29f2:	31 e0       	ldi	r19, 0x01	; 1
    29f4:	82 2f       	mov	r24, r18
    29f6:	93 2f       	mov	r25, r19
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <_Z17handleLinkBusMsgsv+0x318>
    29fa:	e1 ee       	ldi	r30, 0xE1	; 225
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	8e 2f       	mov	r24, r30
    2a00:	9f 2f       	mov	r25, r31
    2a02:	9f 93       	push	r25
    2a04:	8f 93       	push	r24
    2a06:	7f 92       	push	r7
    2a08:	6f 92       	push	r6
    2a0a:	bf 92       	push	r11
    2a0c:	af 92       	push	r10
    2a0e:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	c5 01       	movw	r24, r10
    2a16:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
			}
			break;
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	56 c4       	rjmp	.+2220   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    2a28:	f6 01       	movw	r30, r12
    2a2a:	83 81       	ldd	r24, Z+3	; 0x03
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <_Z17handleLinkBusMsgsv+0x348>
    2a30:	51 c4       	rjmp	.+2210   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    2a32:	80 33       	cpi	r24, 0x30	; 48
    2a34:	21 f4       	brne	.+8      	; 0x2a3e <_Z17handleLinkBusMsgsv+0x354>
					{
						g_transmissions_disabled = TRUE;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_transmissions_disabled>
    2a3c:	4b c4       	rjmp	.+2198   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    2a3e:	81 33       	cpi	r24, 0x31	; 49
    2a40:	19 f4       	brne	.+6      	; 0x2a48 <_Z17handleLinkBusMsgsv+0x35e>
					{
						startEventNow();
    2a42:	0e 94 84 11 	call	0x2308	; 0x2308 <_Z13startEventNowv>
    2a46:	46 c4       	rjmp	.+2188   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    2a48:	82 33       	cpi	r24, 0x32	; 50
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <_Z17handleLinkBusMsgsv+0x364>
    2a4c:	43 c4       	rjmp	.+2182   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
					{
						g_transmissions_disabled = TRUE;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_transmissions_disabled>

						if(!clockConfigurationError())
    2a54:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_Z23clockConfigurationErrorv>
    2a58:	81 11       	cpse	r24, r1
    2a5a:	5e c0       	rjmp	.+188    	; 0x2b18 <_Z17handleLinkBusMsgsv+0x42e>
						{
							g_use_rtc_to_start = TRUE;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_use_rtc_to_start>
							reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    2a62:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2a66:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2a6a:	40 91 d1 04 	lds	r20, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2a6e:	50 91 d2 04 	lds	r21, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2a72:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <g_current_epoch>
    2a76:	70 91 d4 04 	lds	r23, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2a7a:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2a7e:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2a82:	0f 2e       	mov	r0, r31
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	ef 2e       	mov	r14, r31
    2a88:	f2 e0       	ldi	r31, 0x02	; 2
    2a8a:	ff 2e       	mov	r15, r31
    2a8c:	f0 2d       	mov	r31, r0
    2a8e:	0d e0       	ldi	r16, 0x0D	; 13
    2a90:	12 e0       	ldi	r17, 0x02	; 2
    2a92:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
							reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    2a96:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    2a9a:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    2a9e:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    2aa2:	50 91 ce 04 	lds	r21, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    2aa6:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2aaa:	70 91 d0 04 	lds	r23, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2aae:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2ab2:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2ab6:	e1 2c       	mov	r14, r1
    2ab8:	f1 2c       	mov	r15, r1
    2aba:	09 e1       	ldi	r16, 0x19	; 25
    2abc:	12 e0       	ldi	r17, 0x02	; 2
    2abe:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
							if(g_event_start_epoch < g_current_epoch)
    2ac2:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2ac6:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2aca:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2ace:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2ad2:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    2ad6:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2ada:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2ade:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2ae2:	48 17       	cp	r20, r24
    2ae4:	59 07       	cpc	r21, r25
    2ae6:	6a 07       	cpc	r22, r26
    2ae8:	7b 07       	cpc	r23, r27
    2aea:	08 f0       	brcs	.+2      	; 0x2aee <_Z17handleLinkBusMsgsv+0x404>
    2aec:	f3 c3       	rjmp	.+2022   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
							{
								reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    2aee:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    2af2:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    2af6:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    2afa:	50 91 ce 04 	lds	r21, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    2afe:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <g_current_epoch>
    2b02:	70 91 d4 04 	lds	r23, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2b06:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2b0a:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2b0e:	01 e2       	ldi	r16, 0x21	; 33
    2b10:	12 e0       	ldi	r17, 0x02	; 2
    2b12:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
    2b16:	de c3       	rjmp	.+1980   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
							}
						}
						else
						{
							reportConfigErrors();
    2b18:	0e 94 c9 11 	call	0x2392	; 0x2392 <_Z18reportConfigErrorsv>
    2b1c:	db c3       	rjmp	.+1974   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    2b1e:	f6 01       	movw	r30, r12
    2b20:	83 81       	ldd	r24, Z+3	; 0x03
    2b22:	88 23       	and	r24, r24
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <_Z17handleLinkBusMsgsv+0x43e>
    2b26:	4d c0       	rjmp	.+154    	; 0x2bc2 <_Z17handleLinkBusMsgsv+0x4d8>
				{
					strcpy(g_tempStr," ");  /* Space before ID gets sent */
    2b28:	80 e2       	ldi	r24, 0x20	; 32
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	f5 01       	movw	r30, r10
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
					strcat(g_tempStr,lb_buff->fields[FIELD1]);
    2b32:	b6 01       	movw	r22, r12
    2b34:	6d 5f       	subi	r22, 0xFD	; 253
    2b36:	7f 4f       	sbci	r23, 0xFF	; 255
    2b38:	c5 01       	movw	r24, r10
    2b3a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <strcat>

					if(lb_buff->fields[FIELD2][0])
    2b3e:	f6 01       	movw	r30, r12
    2b40:	87 89       	ldd	r24, Z+23	; 0x17
    2b42:	88 23       	and	r24, r24
    2b44:	79 f0       	breq	.+30     	; 0x2b64 <_Z17handleLinkBusMsgsv+0x47a>
					{
						strcat(g_tempStr," ");
    2b46:	f5 01       	movw	r30, r10
    2b48:	01 90       	ld	r0, Z+
    2b4a:	00 20       	and	r0, r0
    2b4c:	e9 f7       	brne	.-6      	; 0x2b48 <_Z17handleLinkBusMsgsv+0x45e>
    2b4e:	31 97       	sbiw	r30, 0x01	; 1
    2b50:	80 e2       	ldi	r24, 0x20	; 32
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
						strcat(g_tempStr,lb_buff->fields[FIELD2]);
    2b58:	b6 01       	movw	r22, r12
    2b5a:	69 5e       	subi	r22, 0xE9	; 233
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	c5 01       	movw	r24, r10
    2b60:	0e 94 ee 22 	call	0x45dc	; 0x45dc <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    2b64:	f5 01       	movw	r30, r10
    2b66:	01 90       	ld	r0, Z+
    2b68:	00 20       	and	r0, r0
    2b6a:	e9 f7       	brne	.-6      	; 0x2b66 <_Z17handleLinkBusMsgsv+0x47c>
    2b6c:	31 97       	sbiw	r30, 0x01	; 1
    2b6e:	e8 55       	subi	r30, 0x58	; 88
    2b70:	f4 40       	sbci	r31, 0x04	; 4
    2b72:	75 97       	sbiw	r30, 0x15	; 21
    2b74:	30 f5       	brcc	.+76     	; 0x2bc2 <_Z17handleLinkBusMsgsv+0x4d8>
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);
    2b76:	b5 01       	movw	r22, r10
    2b78:	80 ea       	ldi	r24, 0xA0	; 160
    2b7a:	94 e0       	ldi	r25, 0x04	; 4
    2b7c:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <strcpy>

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    2b80:	f1 2c       	mov	r15, r1
    2b82:	00 ea       	ldi	r16, 0xA0	; 160
    2b84:	14 e0       	ldi	r17, 0x04	; 4
    2b86:	f8 01       	movw	r30, r16
    2b88:	01 90       	ld	r0, Z+
    2b8a:	00 20       	and	r0, r0
    2b8c:	e9 f7       	brne	.-6      	; 0x2b88 <_Z17handleLinkBusMsgsv+0x49e>
    2b8e:	cf 01       	movw	r24, r30
    2b90:	81 5a       	subi	r24, 0xA1	; 161
    2b92:	94 40       	sbci	r25, 0x04	; 4
    2b94:	2f 2d       	mov	r18, r15
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	28 17       	cp	r18, r24
    2b9a:	39 07       	cpc	r19, r25
    2b9c:	58 f4       	brcc	.+22     	; 0x2bb4 <_Z17handleLinkBusMsgsv+0x4ca>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    2b9e:	c9 01       	movw	r24, r18
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	e5 57       	subi	r30, 0x75	; 117
    2ba4:	fb 4f       	sbci	r31, 0xFB	; 251
    2ba6:	65 89       	ldd	r22, Z+21	; 0x15
    2ba8:	8c 52       	subi	r24, 0x2C	; 44
    2baa:	9d 4f       	sbci	r25, 0xFD	; 253
    2bac:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>
					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    2bb0:	f3 94       	inc	r15
    2bb2:	e9 cf       	rjmp	.-46     	; 0x2b86 <_Z17handleLinkBusMsgsv+0x49c>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
						}

						eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    2bb4:	8f 2d       	mov	r24, r15
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	8c 52       	subi	r24, 0x2C	; 44
    2bbc:	9d 4f       	sbci	r25, 0xFD	; 253
    2bbe:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>
					}
				}

				if(g_messages_text[STATION_ID][0])
    2bc2:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <g_messages_text+0x15>
    2bc6:	88 23       	and	r24, r24
    2bc8:	f1 f0       	breq	.+60     	; 0x2c06 <_Z17handleLinkBusMsgsv+0x51c>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    2bca:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	80 ea       	ldi	r24, 0xA0	; 160
    2bd2:	94 e0       	ldi	r25, 0x04	; 4
    2bd4:	0e 94 88 1c 	call	0x3910	; 0x3910 <_Z26timeRequiredToSendStrAtWPMPcj>
    2bd8:	8c 50       	subi	r24, 0x0C	; 12
    2bda:	9e 4f       	sbci	r25, 0xFE	; 254
    2bdc:	9c 01       	movw	r18, r24
    2bde:	36 95       	lsr	r19
    2be0:	27 95       	ror	r18
    2be2:	36 95       	lsr	r19
    2be4:	27 95       	ror	r18
    2be6:	36 95       	lsr	r19
    2be8:	27 95       	ror	r18
    2bea:	a5 ec       	ldi	r26, 0xC5	; 197
    2bec:	b0 e2       	ldi	r27, 0x20	; 32
    2bee:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__umulhisi3>
    2bf2:	92 95       	swap	r25
    2bf4:	82 95       	swap	r24
    2bf6:	8f 70       	andi	r24, 0x0F	; 15
    2bf8:	89 27       	eor	r24, r25
    2bfa:	9f 70       	andi	r25, 0x0F	; 15
    2bfc:	89 27       	eor	r24, r25
    2bfe:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <g_time_needed_for_ID+0x1>
    2c02:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr,"ID:%s\n",g_messages_text[STATION_ID]);
    2c06:	80 ea       	ldi	r24, 0xA0	; 160
    2c08:	94 e0       	ldi	r25, 0x04	; 4
    2c0a:	9f 93       	push	r25
    2c0c:	8f 93       	push	r24
    2c0e:	82 e3       	ldi	r24, 0x32	; 50
    2c10:	92 e0       	ldi	r25, 0x02	; 2
    2c12:	9f 93       	push	r25
    2c14:	8f 93       	push	r24
    2c16:	bf 92       	push	r11
    2c18:	af 92       	push	r10
    2c1a:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr,TRUE);
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	c5 01       	movw	r24, r10
    2c22:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
			}
			break;
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	50 c3       	rjmp	.+1696   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    2c34:	f6 01       	movw	r30, r12
    2c36:	83 81       	ldd	r24, Z+3	; 0x03
    2c38:	89 34       	cpi	r24, 0x49	; 73
    2c3a:	e1 f5       	brne	.+120    	; 0x2cb4 <_Z17handleLinkBusMsgsv+0x5ca>
				{
					if(lb_buff->fields[FIELD2][0])
    2c3c:	87 89       	ldd	r24, Z+23	; 0x17
    2c3e:	88 23       	and	r24, r24
    2c40:	c9 f1       	breq	.+114    	; 0x2cb4 <_Z17handleLinkBusMsgsv+0x5ca>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    2c42:	c6 01       	movw	r24, r12
    2c44:	47 96       	adiw	r24, 0x17	; 23
    2c46:	0e 94 bf 22 	call	0x457e	; 0x457e <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,speed,MAX_CODE_SPEED_WPM);
    2c4a:	86 2f       	mov	r24, r22
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	85 30       	cpi	r24, 0x05	; 5
    2c50:	91 05       	cpc	r25, r1
    2c52:	14 f4       	brge	.+4      	; 0x2c58 <_Z17handleLinkBusMsgsv+0x56e>
    2c54:	85 e0       	ldi	r24, 0x05	; 5
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	85 31       	cpi	r24, 0x15	; 21
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	0c f0       	brlt	.+2      	; 0x2c60 <_Z17handleLinkBusMsgsv+0x576>
    2c5e:	84 e1       	ldi	r24, 0x14	; 20
    2c60:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_id_codespeed>
						eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    2c64:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    2c68:	8b e5       	ldi	r24, 0x5B	; 91
    2c6a:	92 e0       	ldi	r25, 0x02	; 2
    2c6c:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>

						if(g_messages_text[STATION_ID][0])
    2c70:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <g_messages_text+0x15>
    2c74:	88 23       	and	r24, r24
    2c76:	f1 f0       	breq	.+60     	; 0x2cb4 <_Z17handleLinkBusMsgsv+0x5ca>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    2c78:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	80 ea       	ldi	r24, 0xA0	; 160
    2c80:	94 e0       	ldi	r25, 0x04	; 4
    2c82:	0e 94 88 1c 	call	0x3910	; 0x3910 <_Z26timeRequiredToSendStrAtWPMPcj>
    2c86:	8c 50       	subi	r24, 0x0C	; 12
    2c88:	9e 4f       	sbci	r25, 0xFE	; 254
    2c8a:	9c 01       	movw	r18, r24
    2c8c:	36 95       	lsr	r19
    2c8e:	27 95       	ror	r18
    2c90:	36 95       	lsr	r19
    2c92:	27 95       	ror	r18
    2c94:	36 95       	lsr	r19
    2c96:	27 95       	ror	r18
    2c98:	a5 ec       	ldi	r26, 0xC5	; 197
    2c9a:	b0 e2       	ldi	r27, 0x20	; 32
    2c9c:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__umulhisi3>
    2ca0:	92 95       	swap	r25
    2ca2:	82 95       	swap	r24
    2ca4:	8f 70       	andi	r24, 0x0F	; 15
    2ca6:	89 27       	eor	r24, r25
    2ca8:	9f 70       	andi	r25, 0x0F	; 15
    2caa:	89 27       	eor	r24, r25
    2cac:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <g_time_needed_for_ID+0x1>
    2cb0:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    2cb4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_id_codespeed>
    2cb8:	1f 92       	push	r1
    2cba:	8f 93       	push	r24
    2cbc:	5f 92       	push	r5
    2cbe:	4f 92       	push	r4
    2cc0:	bf 92       	push	r11
    2cc2:	af 92       	push	r10
    2cc4:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	c5 01       	movw	r24, r10
    2ccc:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
			}
			break;
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	fb c2       	rjmp	.+1526   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_VERSION:
			{
				sendEEPROMString(&ee_textVersion[0]);
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	92 e0       	ldi	r25, 0x02	; 2
    2ce2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
			}
			break;
    2ce6:	f6 c2       	rjmp	.+1516   	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    2ce8:	f6 01       	movw	r30, r12
    2cea:	83 81       	ldd	r24, Z+3	; 0x03
    2cec:	84 35       	cpi	r24, 0x54	; 84
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <_Z17handleLinkBusMsgsv+0x608>
    2cf0:	8b c0       	rjmp	.+278    	; 0x2e08 <_Z17handleLinkBusMsgsv+0x71e>
				{
					strncpy(g_tempStr,lb_buff->fields[FIELD2],12);
    2cf2:	4c e0       	ldi	r20, 0x0C	; 12
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	b6 01       	movw	r22, r12
    2cf8:	69 5e       	subi	r22, 0xE9	; 233
    2cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfc:	c5 01       	movw	r24, r10
    2cfe:	0e 94 00 23 	call	0x4600	; 0x4600 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    2d02:	f5 01       	movw	r30, r10
    2d04:	14 86       	std	Z+12, r1	; 0x0c
					int len = strlen(g_tempStr);
    2d06:	01 90       	ld	r0, Z+
    2d08:	00 20       	and	r0, r0
    2d0a:	e9 f7       	brne	.-6      	; 0x2d06 <_Z17handleLinkBusMsgsv+0x61c>
    2d0c:	31 97       	sbiw	r30, 0x01	; 1
    2d0e:	e8 55       	subi	r30, 0x58	; 88
    2d10:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    2d12:	1e 16       	cp	r1, r30
    2d14:	1f 06       	cpc	r1, r31
    2d16:	0c f0       	brlt	.+2      	; 0x2d1a <_Z17handleLinkBusMsgsv+0x630>
    2d18:	47 c0       	rjmp	.+142    	; 0x2da8 <_Z17handleLinkBusMsgsv+0x6be>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    2d1a:	3c 97       	sbiw	r30, 0x0c	; 12
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <_Z17handleLinkBusMsgsv+0x636>
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <_Z17handleLinkBusMsgsv+0x6b4>
    2d20:	c5 01       	movw	r24, r10
    2d22:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z11only_digitsPc>
    2d26:	88 23       	and	r24, r24
    2d28:	d1 f1       	breq	.+116    	; 0x2d9e <_Z17handleLinkBusMsgsv+0x6b4>
						{
							time_t t = rv3028_get_epoch(NULL,g_tempStr);    /* String format "YYMMDDhhmmss" */
    2d2a:	b5 01       	movw	r22, r10
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z16rv3028_get_epochPbPc>

							if(t > MINIMUM_EPOCH)
    2d34:	61 30       	cpi	r22, 0x01	; 1
    2d36:	76 46       	sbci	r23, 0x66	; 102
    2d38:	8e 4e       	sbci	r24, 0xEE	; 238
    2d3a:	9f 45       	sbci	r25, 0x5F	; 95
    2d3c:	58 f1       	brcs	.+86     	; 0x2d94 <_Z17handleLinkBusMsgsv+0x6aa>
							{
								rv3028_set_date_time(g_tempStr);            /* String format "YYMMDDhhmmss" */
    2d3e:	c5 01       	movw	r24, r10
    2d40:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <_Z20rv3028_set_date_timePc>
								g_current_epoch = rv3028_get_epoch(NULL,NULL);
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z16rv3028_get_epochPbPc>
    2d50:	60 93 d3 04 	sts	0x04D3, r22	; 0x8004d3 <g_current_epoch>
    2d54:	70 93 d4 04 	sts	0x04D4, r23	; 0x8004d4 <g_current_epoch+0x1>
    2d58:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <g_current_epoch+0x2>
    2d5c:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <g_current_epoch+0x3>
								sprintf(g_tempStr,"Time:%lu\n",g_current_epoch);
    2d60:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    2d64:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2d68:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2d6c:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2d70:	bf 93       	push	r27
    2d72:	af 93       	push	r26
    2d74:	9f 93       	push	r25
    2d76:	8f 93       	push	r24
    2d78:	8a e4       	ldi	r24, 0x4A	; 74
    2d7a:	92 e0       	ldi	r25, 0x02	; 2
    2d7c:	9f 93       	push	r25
    2d7e:	8f 93       	push	r24
    2d80:	bf 92       	push	r11
    2d82:	af 92       	push	r10
    2d84:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	b3 c2       	rjmp	.+1382   	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrTimeInPast[0]);
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    2d9c:	ae c2       	rjmp	.+1372   	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    2d9e:	86 e1       	ldi	r24, 0x16	; 22
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    2da6:	a9 c2       	rjmp	.+1362   	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ",NULL);
    2da8:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2dac:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2db0:	40 91 d1 04 	lds	r20, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2db4:	50 91 d2 04 	lds	r21, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2db8:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <g_current_epoch>
    2dbc:	70 91 d4 04 	lds	r23, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2dc0:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2dc4:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2dc8:	e1 2c       	mov	r14, r1
    2dca:	f1 2c       	mov	r15, r1
    2dcc:	0d e0       	ldi	r16, 0x0D	; 13
    2dce:	12 e0       	ldi	r17, 0x02	; 2
    2dd0:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr,"UNIX Time:%lu\n",g_current_epoch);
    2dd4:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    2dd8:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2ddc:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2de0:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2de4:	bf 93       	push	r27
    2de6:	af 93       	push	r26
    2de8:	9f 93       	push	r25
    2dea:	8f 93       	push	r24
    2dec:	85 e4       	ldi	r24, 0x45	; 69
    2dee:	92 e0       	ldi	r25, 0x02	; 2
    2df0:	9f 93       	push	r25
    2df2:	8f 93       	push	r24
    2df4:	bf 92       	push	r11
    2df6:	af 92       	push	r10
    2df8:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	79 c2       	rjmp	.+1266   	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    2e08:	83 35       	cpi	r24, 0x53	; 83
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <_Z17handleLinkBusMsgsv+0x724>
    2e0c:	cf c0       	rjmp	.+414    	; 0x2fac <_Z17handleLinkBusMsgsv+0x8c2>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    2e0e:	b6 01       	movw	r22, r12
    2e10:	69 5e       	subi	r22, 0xE9	; 233
    2e12:	7f 4f       	sbci	r23, 0xFF	; 255
    2e14:	c5 01       	movw	r24, r10
    2e16:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <strcpy>
					int len = strlen(g_tempStr);
    2e1a:	f5 01       	movw	r30, r10
    2e1c:	01 90       	ld	r0, Z+
    2e1e:	00 20       	and	r0, r0
    2e20:	e9 f7       	brne	.-6      	; 0x2e1c <_Z17handleLinkBusMsgsv+0x732>
    2e22:	31 97       	sbiw	r30, 0x01	; 1
    2e24:	e8 55       	subi	r30, 0x58	; 88
    2e26:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    2e28:	1e 16       	cp	r1, r30
    2e2a:	1f 06       	cpc	r1, r31
    2e2c:	0c f0       	brlt	.+2      	; 0x2e30 <_Z17handleLinkBusMsgsv+0x746>
    2e2e:	a4 c0       	rjmp	.+328    	; 0x2f78 <_Z17handleLinkBusMsgsv+0x88e>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    2e30:	3c 97       	sbiw	r30, 0x0c	; 12
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <_Z17handleLinkBusMsgsv+0x74c>
    2e34:	9c c0       	rjmp	.+312    	; 0x2f6e <_Z17handleLinkBusMsgsv+0x884>
    2e36:	c5 01       	movw	r24, r10
    2e38:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z11only_digitsPc>
    2e3c:	88 23       	and	r24, r24
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <_Z17handleLinkBusMsgsv+0x758>
    2e40:	96 c0       	rjmp	.+300    	; 0x2f6e <_Z17handleLinkBusMsgsv+0x884>
						{
							time_t s;
							s = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    2e42:	b5 01       	movw	r22, r10
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z16rv3028_get_epochPbPc>

							if(s > g_current_epoch)
    2e4c:	00 91 d3 04 	lds	r16, 0x04D3	; 0x8004d3 <g_current_epoch>
    2e50:	10 91 d4 04 	lds	r17, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2e54:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2e58:	30 91 d6 04 	lds	r19, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    2e5c:	06 17       	cp	r16, r22
    2e5e:	17 07       	cpc	r17, r23
    2e60:	28 07       	cpc	r18, r24
    2e62:	39 07       	cpc	r19, r25
    2e64:	08 f0       	brcs	.+2      	; 0x2e68 <_Z17handleLinkBusMsgsv+0x77e>
    2e66:	7e c0       	rjmp	.+252    	; 0x2f64 <_Z17handleLinkBusMsgsv+0x87a>
							{
								g_event_start_epoch = s;
    2e68:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <g_event_start_epoch>
    2e6c:	70 93 d0 04 	sts	0x04D0, r23	; 0x8004d0 <g_event_start_epoch+0x1>
    2e70:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_event_start_epoch+0x2>
    2e74:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_event_start_epoch+0x3>
								eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    2e78:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2e7c:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2e80:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2e84:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2e88:	8f e4       	ldi	r24, 0x4F	; 79
    2e8a:	92 e0       	ldi	r25, 0x02	; 2
    2e8c:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_update_dword>
								g_event_finish_epoch = MAX(g_event_finish_epoch,(g_event_start_epoch + SECONDS_24H));
    2e90:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    2e94:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    2e98:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    2e9c:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	af 83       	std	Y+7, r26	; 0x07
    2ea6:	b8 87       	std	Y+8, r27	; 0x08
    2ea8:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2eac:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2eb0:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2eb4:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2eb8:	80 58       	subi	r24, 0x80	; 128
    2eba:	9e 4a       	sbci	r25, 0xAE	; 174
    2ebc:	ae 4f       	sbci	r26, 0xFE	; 254
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	ab 83       	std	Y+3, r26	; 0x03
    2ec6:	bc 83       	std	Y+4, r27	; 0x04
    2ec8:	4d 81       	ldd	r20, Y+5	; 0x05
    2eca:	5e 81       	ldd	r21, Y+6	; 0x06
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	48 17       	cp	r20, r24
    2ed2:	59 07       	cpc	r21, r25
    2ed4:	6a 07       	cpc	r22, r26
    2ed6:	7b 07       	cpc	r23, r27
    2ed8:	28 f4       	brcc	.+10     	; 0x2ee4 <_Z17handleLinkBusMsgsv+0x7fa>
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	ab 81       	ldd	r26, Y+3	; 0x03
    2ee0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ee2:	04 c0       	rjmp	.+8      	; 0x2eec <_Z17handleLinkBusMsgsv+0x802>
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	af 81       	ldd	r26, Y+7	; 0x07
    2eea:	b8 85       	ldd	r27, Y+8	; 0x08
    2eec:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <g_event_finish_epoch>
    2ef0:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <g_event_finish_epoch+0x1>
    2ef4:	a0 93 cd 04 	sts	0x04CD, r26	; 0x8004cd <g_event_finish_epoch+0x2>
    2ef8:	b0 93 ce 04 	sts	0x04CE, r27	; 0x8004ce <g_event_finish_epoch+0x3>
								eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    2efc:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    2f00:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    2f04:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    2f08:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    2f0c:	8b e4       	ldi	r24, 0x4B	; 75
    2f0e:	92 e0       	ldi	r25, 0x02	; 2
    2f10:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_update_dword>
								sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    2f14:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2f18:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2f1c:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2f20:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2f24:	bf 93       	push	r27
    2f26:	af 93       	push	r26
    2f28:	9f 93       	push	r25
    2f2a:	8f 93       	push	r24
    2f2c:	84 e5       	ldi	r24, 0x54	; 84
    2f2e:	92 e0       	ldi	r25, 0x02	; 2
    2f30:	9f 93       	push	r25
    2f32:	8f 93       	push	r24
    2f34:	bf 92       	push	r11
    2f36:	af 92       	push	r10
    2f38:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
								g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    2f3c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_Z23clockConfigurationErrorv>
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <_Z17handleLinkBusMsgsv+0x872>
    2f4e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <g_transmissions_disabled>
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	91 11       	cpse	r25, r1
    2f56:	03 c0       	rjmp	.+6      	; 0x2f5e <_Z17handleLinkBusMsgsv+0x874>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	01 c0       	rjmp	.+2      	; 0x2f5e <_Z17handleLinkBusMsgsv+0x874>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_use_rtc_to_start>
    2f62:	cb c1       	rjmp	.+918    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrStartInPast[0]);
    2f64:	8a e2       	ldi	r24, 0x2A	; 42
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    2f6c:	c6 c1       	rjmp	.+908    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    2f6e:	86 e1       	ldi	r24, 0x16	; 22
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    2f76:	c1 c1       	rjmp	.+898    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    2f78:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_event_start_epoch>
    2f7c:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    2f80:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    2f84:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    2f88:	bf 93       	push	r27
    2f8a:	af 93       	push	r26
    2f8c:	9f 93       	push	r25
    2f8e:	8f 93       	push	r24
    2f90:	84 e5       	ldi	r24, 0x54	; 84
    2f92:	92 e0       	ldi	r25, 0x02	; 2
    2f94:	9f 93       	push	r25
    2f96:	8f 93       	push	r24
    2f98:	bf 92       	push	r11
    2f9a:	af 92       	push	r10
    2f9c:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	a7 c1       	rjmp	.+846    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    2fac:	86 34       	cpi	r24, 0x46	; 70
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <_Z17handleLinkBusMsgsv+0x8c8>
    2fb0:	b6 c0       	rjmp	.+364    	; 0x311e <_Z17handleLinkBusMsgsv+0xa34>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    2fb2:	b6 01       	movw	r22, r12
    2fb4:	69 5e       	subi	r22, 0xE9	; 233
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb8:	c5 01       	movw	r24, r10
    2fba:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <strcpy>
					int len = strlen(g_tempStr);
    2fbe:	f5 01       	movw	r30, r10
    2fc0:	01 90       	ld	r0, Z+
    2fc2:	00 20       	and	r0, r0
    2fc4:	e9 f7       	brne	.-6      	; 0x2fc0 <_Z17handleLinkBusMsgsv+0x8d6>
    2fc6:	31 97       	sbiw	r30, 0x01	; 1
    2fc8:	e8 55       	subi	r30, 0x58	; 88
    2fca:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    2fcc:	1e 16       	cp	r1, r30
    2fce:	1f 06       	cpc	r1, r31
    2fd0:	0c f0       	brlt	.+2      	; 0x2fd4 <_Z17handleLinkBusMsgsv+0x8ea>
    2fd2:	8b c0       	rjmp	.+278    	; 0x30ea <_Z17handleLinkBusMsgsv+0xa00>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    2fd4:	3c 97       	sbiw	r30, 0x0c	; 12
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <_Z17handleLinkBusMsgsv+0x8f0>
    2fd8:	83 c0       	rjmp	.+262    	; 0x30e0 <_Z17handleLinkBusMsgsv+0x9f6>
    2fda:	c5 01       	movw	r24, r10
    2fdc:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z11only_digitsPc>
    2fe0:	88 23       	and	r24, r24
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <_Z17handleLinkBusMsgsv+0x8fc>
    2fe4:	7d c0       	rjmp	.+250    	; 0x30e0 <_Z17handleLinkBusMsgsv+0x9f6>
						{
							time_t f;
							f = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    2fe6:	b5 01       	movw	r22, r10
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z16rv3028_get_epochPbPc>

							if(f > g_current_epoch)
    2ff0:	00 91 d3 04 	lds	r16, 0x04D3	; 0x8004d3 <g_current_epoch>
    2ff4:	10 91 d4 04 	lds	r17, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    2ff8:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    2ffc:	30 91 d6 04 	lds	r19, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    3000:	06 17       	cp	r16, r22
    3002:	17 07       	cpc	r17, r23
    3004:	28 07       	cpc	r18, r24
    3006:	39 07       	cpc	r19, r25
    3008:	08 f0       	brcs	.+2      	; 0x300c <_Z17handleLinkBusMsgsv+0x922>
    300a:	65 c0       	rjmp	.+202    	; 0x30d6 <_Z17handleLinkBusMsgsv+0x9ec>
							{
								if(f > g_event_start_epoch)
    300c:	00 91 cf 04 	lds	r16, 0x04CF	; 0x8004cf <g_event_start_epoch>
    3010:	10 91 d0 04 	lds	r17, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    3014:	20 91 d1 04 	lds	r18, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    3018:	30 91 d2 04 	lds	r19, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    301c:	06 17       	cp	r16, r22
    301e:	17 07       	cpc	r17, r23
    3020:	28 07       	cpc	r18, r24
    3022:	39 07       	cpc	r19, r25
    3024:	08 f0       	brcs	.+2      	; 0x3028 <_Z17handleLinkBusMsgsv+0x93e>
    3026:	52 c0       	rjmp	.+164    	; 0x30cc <_Z17handleLinkBusMsgsv+0x9e2>
								{
									g_event_finish_epoch = f;
    3028:	60 93 cb 04 	sts	0x04CB, r22	; 0x8004cb <g_event_finish_epoch>
    302c:	70 93 cc 04 	sts	0x04CC, r23	; 0x8004cc <g_event_finish_epoch+0x1>
    3030:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <g_event_finish_epoch+0x2>
    3034:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <g_event_finish_epoch+0x3>
									eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    3038:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    303c:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    3040:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    3044:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    3048:	8b e4       	ldi	r24, 0x4B	; 75
    304a:	92 e0       	ldi	r25, 0x02	; 2
    304c:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_update_dword>
									reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    3050:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    3054:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    3058:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    305c:	50 91 ce 04 	lds	r21, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    3060:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <g_event_start_epoch>
    3064:	70 91 d0 04 	lds	r23, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    3068:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    306c:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    3070:	e1 2c       	mov	r14, r1
    3072:	f1 2c       	mov	r15, r1
    3074:	09 e1       	ldi	r16, 0x19	; 25
    3076:	12 e0       	ldi	r17, 0x02	; 2
    3078:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
									sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    307c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    3080:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    3084:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    3088:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    308c:	bf 93       	push	r27
    308e:	af 93       	push	r26
    3090:	9f 93       	push	r25
    3092:	8f 93       	push	r24
    3094:	8f e5       	ldi	r24, 0x5F	; 95
    3096:	92 e0       	ldi	r25, 0x02	; 2
    3098:	9f 93       	push	r25
    309a:	8f 93       	push	r24
    309c:	bf 92       	push	r11
    309e:	af 92       	push	r10
    30a0:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
									g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    30a4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_Z23clockConfigurationErrorv>
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	81 11       	cpse	r24, r1
    30b4:	07 c0       	rjmp	.+14     	; 0x30c4 <_Z17handleLinkBusMsgsv+0x9da>
    30b6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <g_transmissions_disabled>
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	91 11       	cpse	r25, r1
    30be:	03 c0       	rjmp	.+6      	; 0x30c6 <_Z17handleLinkBusMsgsv+0x9dc>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	01 c0       	rjmp	.+2      	; 0x30c6 <_Z17handleLinkBusMsgsv+0x9dc>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_use_rtc_to_start>
    30ca:	17 c1       	rjmp	.+558    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
								}
								else
								{
									sendEEPROMString(&ee_textErrFinishB4Start[0]);
    30cc:	85 e5       	ldi	r24, 0x55	; 85
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    30d4:	12 c1       	rjmp	.+548    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
								}
							}
							else
							{
								sendEEPROMString(&ee_textErrFinishInPast[0]);
    30d6:	8f e3       	ldi	r24, 0x3F	; 63
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    30de:	0d c1       	rjmp	.+538    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    30e0:	86 e1       	ldi	r24, 0x16	; 22
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z16sendEEPROMStringPc>
    30e8:	08 c1       	rjmp	.+528    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    30ea:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    30ee:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    30f2:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    30f6:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    30fa:	bf 93       	push	r27
    30fc:	af 93       	push	r26
    30fe:	9f 93       	push	r25
    3100:	8f 93       	push	r24
    3102:	8f e5       	ldi	r24, 0x5F	; 95
    3104:	92 e0       	ldi	r25, 0x02	; 2
    3106:	9f 93       	push	r25
    3108:	8f 93       	push	r24
    310a:	bf 92       	push	r11
    310c:	af 92       	push	r10
    310e:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	ee c0       	rjmp	.+476    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    311e:	83 34       	cpi	r24, 0x43	; 67
    3120:	09 f5       	brne	.+66     	; 0x3164 <_Z17handleLinkBusMsgsv+0xa7a>
				{
					if(lb_buff->fields[FIELD2][0])
    3122:	f6 01       	movw	r30, r12
    3124:	87 89       	ldd	r24, Z+23	; 0x17
    3126:	88 23       	and	r24, r24
    3128:	51 f0       	breq	.+20     	; 0x313e <_Z17handleLinkBusMsgsv+0xa54>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    312a:	c6 01       	movw	r24, r12
    312c:	47 96       	adiw	r24, 0x17	; 23
    312e:	0e 94 a1 22 	call	0x4542	; 0x4542 <atoi>

						if(c < 512)
    3132:	81 15       	cp	r24, r1
    3134:	f2 e0       	ldi	r31, 0x02	; 2
    3136:	9f 07       	cpc	r25, r31
    3138:	10 f4       	brcc	.+4      	; 0x313e <_Z17handleLinkBusMsgsv+0xa54>
						{
							rv3028_set_offset_RAM(c);
    313a:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    313e:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr,"C=%d\n",a);
    3142:	9f 93       	push	r25
    3144:	8f 93       	push	r24
    3146:	8b e6       	ldi	r24, 0x6B	; 107
    3148:	92 e0       	ldi	r25, 0x02	; 2
    314a:	9f 93       	push	r25
    314c:	8f 93       	push	r24
    314e:	bf 92       	push	r11
    3150:	af 92       	push	r10
    3152:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cb c0       	rjmp	.+406    	; 0x32fa <_Z17handleLinkBusMsgsv+0xc10>
					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'X')  /* Test only - Send 32 kHz square wave out of RTC */
    3164:	88 35       	cpi	r24, 0x58	; 88
    3166:	21 f4       	brne	.+8      	; 0x3170 <_Z17handleLinkBusMsgsv+0xa86>
				{
					EIMSK &= ~(1 << INT0);                  /* Disable INT0 interrupts */
    3168:	e8 98       	cbi	0x1d, 0	; 29
					rv3028_32kHz_sqw();
    316a:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <_Z16rv3028_32kHz_sqwv>
    316e:	b2 c0       	rjmp	.+356    	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
				}
				else
				{
					if(clockConfigurationError())
    3170:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_Z23clockConfigurationErrorv>
    3174:	88 23       	and	r24, r24
    3176:	19 f0       	breq	.+6      	; 0x317e <_Z17handleLinkBusMsgsv+0xa94>
					{
						reportConfigErrors();
    3178:	0e 94 c9 11 	call	0x2392	; 0x2392 <_Z18reportConfigErrorsv>
    317c:	ab c0       	rjmp	.+342    	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    317e:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <g_event_start_epoch>
    3182:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    3186:	40 91 d1 04 	lds	r20, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    318a:	50 91 d2 04 	lds	r21, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    318e:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <g_current_epoch>
    3192:	70 91 d4 04 	lds	r23, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    3196:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    319a:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    319e:	0f 2e       	mov	r0, r31
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	ef 2e       	mov	r14, r31
    31a4:	f2 e0       	ldi	r31, 0x02	; 2
    31a6:	ff 2e       	mov	r15, r31
    31a8:	f0 2d       	mov	r31, r0
    31aa:	0d e0       	ldi	r16, 0x0D	; 13
    31ac:	12 e0       	ldi	r17, 0x02	; 2
    31ae:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    31b2:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    31b6:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    31ba:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    31be:	50 91 ce 04 	lds	r21, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    31c2:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <g_event_start_epoch>
    31c6:	70 91 d0 04 	lds	r23, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    31ca:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    31ce:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    31d2:	e1 2c       	mov	r14, r1
    31d4:	f1 2c       	mov	r15, r1
    31d6:	09 e1       	ldi	r16, 0x19	; 25
    31d8:	12 e0       	ldi	r17, 0x02	; 2
    31da:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    31de:	40 91 cf 04 	lds	r20, 0x04CF	; 0x8004cf <g_event_start_epoch>
    31e2:	50 91 d0 04 	lds	r21, 0x04D0	; 0x8004d0 <g_event_start_epoch+0x1>
    31e6:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_event_start_epoch+0x2>
    31ea:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_event_start_epoch+0x3>
    31ee:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_current_epoch>
    31f2:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    31f6:	a0 91 d5 04 	lds	r26, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    31fa:	b0 91 d6 04 	lds	r27, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    31fe:	48 17       	cp	r20, r24
    3200:	59 07       	cpc	r21, r25
    3202:	6a 07       	cpc	r22, r26
    3204:	7b 07       	cpc	r23, r27
    3206:	08 f0       	brcs	.+2      	; 0x320a <_Z17handleLinkBusMsgsv+0xb20>
    3208:	65 c0       	rjmp	.+202    	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
						{
							reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    320a:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_event_finish_epoch>
    320e:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_event_finish_epoch+0x1>
    3212:	40 91 cd 04 	lds	r20, 0x04CD	; 0x8004cd <g_event_finish_epoch+0x2>
    3216:	50 91 ce 04 	lds	r21, 0x04CE	; 0x8004ce <g_event_finish_epoch+0x3>
    321a:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <g_current_epoch>
    321e:	70 91 d4 04 	lds	r23, 0x04D4	; 0x8004d4 <g_current_epoch+0x1>
    3222:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_current_epoch+0x2>
    3226:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_current_epoch+0x3>
    322a:	01 e2       	ldi	r16, 0x21	; 33
    322c:	12 e0       	ldi	r17, 0x02	; 2
    322e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z14reportTimeTillmmPKcS0_>
    3232:	50 c0       	rjmp	.+160    	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3234:	f6 01       	movw	r30, r12
    3236:	83 81       	ldd	r24, Z+3	; 0x03
    3238:	83 34       	cpi	r24, 0x43	; 67
    323a:	89 f5       	brne	.+98     	; 0x329e <_Z17handleLinkBusMsgsv+0xbb4>
				{
					if(lb_buff->fields[FIELD2][0])
    323c:	87 89       	ldd	r24, Z+23	; 0x17
    323e:	88 23       	and	r24, r24
    3240:	b1 f0       	breq	.+44     	; 0x326e <_Z17handleLinkBusMsgsv+0xb84>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3242:	c6 01       	movw	r24, r12
    3244:	47 96       	adiw	r24, 0x17	; 23
    3246:	0e 94 a1 22 	call	0x4542	; 0x4542 <atoi>

						if((v > -2000) && (v < 2000))
    324a:	9c 01       	movw	r18, r24
    324c:	21 53       	subi	r18, 0x31	; 49
    324e:	38 4f       	sbci	r19, 0xF8	; 248
    3250:	2f 39       	cpi	r18, 0x9F	; 159
    3252:	3f 40       	sbci	r19, 0x0F	; 15
    3254:	60 f4       	brcc	.+24     	; 0x326e <_Z17handleLinkBusMsgsv+0xb84>
						{
							g_atmega_temp_calibration = v;
    3256:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_atmega_temp_calibration+0x1>
    325a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_atmega_temp_calibration>
							eeprom_update_word((uint16_t*)&ee_atmega_temp_calibration,(int16_t)g_atmega_temp_calibration);
    325e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_atmega_temp_calibration>
    3262:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <g_atmega_temp_calibration+0x1>
    3266:	87 e5       	ldi	r24, 0x57	; 87
    3268:	92 e0       	ldi	r25, 0x02	; 2
    326a:	0e 94 11 26 	call	0x4c22	; 0x4c22 <eeprom_update_word>
						}
					}

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
    326e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_atmega_temp_calibration>
    3272:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_atmega_temp_calibration+0x1>
    3276:	9f 93       	push	r25
    3278:	8f 93       	push	r24
    327a:	21 e7       	ldi	r18, 0x71	; 113
    327c:	32 e0       	ldi	r19, 0x02	; 2
    327e:	3f 93       	push	r19
    3280:	2f 93       	push	r18
    3282:	bf 92       	push	r11
    3284:	af 92       	push	r10
    3286:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
					lb_send_string(g_tempStr,FALSE);
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	c5 01       	movw	r24, r10
    328e:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    329e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <g_temperature>
    32a2:	28 2f       	mov	r18, r24
    32a4:	08 2e       	mov	r0, r24
    32a6:	00 0c       	add	r0, r0
    32a8:	33 0b       	sbc	r19, r19
    32aa:	3f 93       	push	r19
    32ac:	8f 93       	push	r24
    32ae:	9f 92       	push	r9
    32b0:	8f 92       	push	r8
    32b2:	bf 92       	push	r11
    32b4:	af 92       	push	r10
    32b6:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr,TRUE);
    32ba:	61 e0       	ldi	r22, 0x01	; 1
    32bc:	c5 01       	movw	r24, r10
    32be:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
			}
			break;
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	02 c0       	rjmp	.+4      	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>

			default:
			{
				lb_send_Help();
    32d0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_Z12lb_send_Helpv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    32d4:	f6 01       	movw	r30, r12
    32d6:	12 82       	std	Z+2, r1	; 0x02
    32d8:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    32da:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z17lb_send_NewPromptv>
    32de:	3d ca       	rjmp	.-2950   	; 0x275a <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	05 cb       	rjmp	.-2550   	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    32e6:	83 e1       	ldi	r24, 0x13	; 19
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	02 cb       	rjmp	.-2556   	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    32ec:	87 e0       	ldi	r24, 0x07	; 7
    32ee:	00 cb       	rjmp	.-2560   	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    32f0:	84 e1       	ldi	r24, 0x14	; 20
    32f2:	fe ca       	rjmp	.-2564   	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    32f4:	85 e1       	ldi	r24, 0x15	; 21
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	fb ca       	rjmp	.-2570   	; 0x28f0 <_Z17handleLinkBusMsgsv+0x206>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr,TRUE);
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	c5 01       	movw	r24, r10
    32fe:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    3302:	e8 cf       	rjmp	.-48     	; 0x32d4 <_Z17handleLinkBusMsgsv+0xbea>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3304:	28 96       	adiw	r28, 0x08	; 8
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	bf 90       	pop	r11
    3322:	af 90       	pop	r10
    3324:	9f 90       	pop	r9
    3326:	8f 90       	pop	r8
    3328:	7f 90       	pop	r7
    332a:	6f 90       	pop	r6
    332c:	5f 90       	pop	r5
    332e:	4f 90       	pop	r4
    3330:	3f 90       	pop	r3
    3332:	2f 90       	pop	r2
    3334:	08 95       	ret

00003336 <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    3336:	cf 93       	push	r28
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    3338:	0e 94 75 13 	call	0x26ea	; 0x26ea <_Z17handleLinkBusMsgsv>
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
		}
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
    333c:	c0 91 b6 04 	lds	r28, 0x04B6	; 0x8004b6 <g_config_error>
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    3340:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_Z23clockConfigurationErrorv>
    3344:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <g_config_error>
    3348:	81 11       	cpse	r24, r1
    334a:	06 c0       	rjmp	.+12     	; 0x3358 <_Z4loopv+0x22>
    334c:	cc 23       	and	r28, r28
    334e:	21 f0       	breq	.+8      	; 0x3358 <_Z4loopv+0x22>
		{
			digitalWrite(PIN_LED2,OFF); /* ensure LED is off */
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	87 e0       	ldi	r24, 0x07	; 7
    3354:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>
		}
}
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);          /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	8d e0       	ldi	r24, 0x0D	; 13
    3360:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	8d e0       	ldi	r24, 0x0D	; 13
    3368:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	87 e0       	ldi	r24, 0x07	; 7
    3370:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    3374:	60 e0       	ldi	r22, 0x00	; 0
    3376:	87 e0       	ldi	r24, 0x07	; 7
    3378:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	8a e0       	ldi	r24, 0x0A	; 10
    3380:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	8a e0       	ldi	r24, 0x0A	; 10
    3388:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    338c:	61 e0       	ldi	r22, 0x01	; 1
    338e:	89 e0       	ldi	r24, 0x09	; 9
    3390:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    3394:	60 e0       	ldi	r22, 0x00	; 0
    3396:	89 e0       	ldi	r24, 0x09	; 9
    3398:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    339c:	61 e0       	ldi	r22, 0x01	; 1
    339e:	88 e0       	ldi	r24, 0x08	; 8
    33a0:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	88 e0       	ldi	r24, 0x08	; 8
    33a8:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	84 e1       	ldi	r24, 0x14	; 20
    33b0:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	85 e1       	ldi	r24, 0x15	; 21
    33b8:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    33bc:	63 e0       	ldi	r22, 0x03	; 3
    33be:	8c e0       	ldi	r24, 0x0C	; 12
    33c0:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    33c4:	61 e0       	ldi	r22, 0x01	; 1
    33c6:	8b e0       	ldi	r24, 0x0B	; 11
    33c8:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	8b e0       	ldi	r24, 0x0B	; 11
    33d0:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    33d4:	63 e0       	ldi	r22, 0x03	; 3
    33d6:	84 e0       	ldi	r24, 0x04	; 4
    33d8:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	8e e0       	ldi	r24, 0x0E	; 14
    33e0:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	8f e0       	ldi	r24, 0x0F	; 15
    33e8:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    33ec:	61 e0       	ldi	r22, 0x01	; 1
    33ee:	80 e1       	ldi	r24, 0x10	; 16
    33f0:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    33f4:	61 e0       	ldi	r22, 0x01	; 1
    33f6:	81 e1       	ldi	r24, 0x11	; 17
    33f8:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    33fc:	61 e0       	ldi	r22, 0x01	; 1
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    3404:	61 e0       	ldi	r22, 0x01	; 1
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    340c:	63 e0       	ldi	r22, 0x03	; 3
    340e:	82 e1       	ldi	r24, 0x12	; 18
    3410:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    3414:	63 e0       	ldi	r22, 0x03	; 3
    3416:	83 e1       	ldi	r24, 0x13	; 19
    3418:	0e 94 3c 02 	call	0x478	; 0x478 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = initializeEEPROMVars();     /* Must happen after pins are configured due to I2C access */
    341c:	0e 94 9b 03 	call	0x736	; 0x736 <_Z20initializeEEPROMVarsv>
    3420:	c8 2f       	mov	r28, r24
		setUpAudioSampling(true);
#endif

	/********************************************************************/
	/* INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    3422:	e9 e6       	ldi	r30, 0x69	; 105
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	82 60       	ori	r24, 0x02	; 2
    342a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    342c:	e8 9a       	sbi	0x1d, 0	; 29


	/********************************************************************/
	/* TIMER2 is for periodic interrupts to drive Morse code generation */
	/* Reset control registers */
	TCCR2A = 0;
    342e:	a0 eb       	ldi	r26, 0xB0	; 176
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	1c 92       	st	X, r1
	TCCR2B = 0;
    3434:	e1 eb       	ldi	r30, 0xB1	; 177
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    343a:	8c 91       	ld	r24, X
    343c:	82 60       	ori	r24, 0x02	; 2
    343e:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    3440:	80 81       	ld	r24, Z
    3442:	87 60       	ori	r24, 0x07	; 7
    3444:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    3446:	8c e0       	ldi	r24, 0x0C	; 12
    3448:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    344c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    3450:	e6 eb       	ldi	r30, 0xB6	; 182
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	8f 7d       	andi	r24, 0xDF	; 223
    3458:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    345a:	e0 e7       	ldi	r30, 0x70	; 112
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    3460:	80 81       	ld	r24, Z
    3462:	84 60       	ori	r24, 0x04	; 4
    3464:	80 83       	st	Z, r24
	
	/********************************************************************/
	/* Timer 1 is used for controlling the attenuator for AM generation */
		/* set timer1 interrupt at 16 kHz */

	TCCR1A = 0; /* set entire TCCR1A register to 0 */
    3466:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0; /* same for TCCR1B */
    346a:	e1 e8       	ldi	r30, 0x81	; 129
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	10 82       	st	Z, r1
	TCNT1 = 0;  /* initialize counter value to 0 */
    3470:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    3474:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 500; /* For ~1000 Hz tone output */
    3478:	84 ef       	ldi	r24, 0xF4	; 244
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3480:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    3484:	80 81       	ld	r24, Z
    3486:	88 60       	ori	r24, 0x08	; 8
    3488:	80 83       	st	Z, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    348a:	80 81       	ld	r24, Z
    348c:	81 60       	ori	r24, 0x01	; 1
    348e:	80 83       	st	Z, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    3490:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01);     /* Set CTC mode */
    3492:	84 b5       	in	r24, 0x24	; 36
    3494:	82 60       	ori	r24, 0x02	; 2
    3496:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    3498:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);      /* Prescale 256 */
    349a:	85 b5       	in	r24, 0x25	; 37
    349c:	84 60       	ori	r24, 0x04	; 4
    349e:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    34a0:	8f e2       	ldi	r24, 0x2F	; 47
    34a2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    34a4:	ee e6       	ldi	r30, 0x6E	; 110
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    34aa:	80 81       	ld	r24, Z
    34ac:	82 60       	ori	r24, 0x02	; 2
    34ae:	80 83       	st	Z, r24

	/********************************************************************/
	/* Sync button pin change interrupt */
	PCMSK2 = 0x00;
    34b0:	ed e6       	ldi	r30, 0x6D	; 109
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    34b6:	80 e1       	ldi	r24, 0x10	; 16
    34b8:	80 83       	st	Z, r24
	PCICR = 0x00;
    34ba:	e8 e6       	ldi	r30, 0x68	; 104
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    34c0:	84 e0       	ldi	r24, 0x04	; 4
    34c2:	80 83       	st	Z, r24
	sei();                                                                                  /* Enable interrupts */
    34c4:	78 94       	sei

	linkbus_init(BAUD);                                                                     /* Start the Link Bus serial comms */
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	71 ee       	ldi	r23, 0xE1	; 225
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0e 94 20 09 	call	0x1240	; 0x1240 <_Z12linkbus_initm>

#if INIT_EEPROM_ONLY
	if(eepromErr)
    34d2:	cc 23       	and	r28, r28
    34d4:	29 f0       	breq	.+10     	; 0x34e0 <main+0x184>
	{
		lb_send_string((char *)"EEPROM Erase Error!\n", TRUE);
    34d6:	61 e0       	ldi	r22, 0x01	; 1
    34d8:	82 e8       	ldi	r24, 0x82	; 130
    34da:	92 e0       	ldi	r25, 0x02	; 2
    34dc:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
	}
	dumpEEPROMVars();
    34e0:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z14dumpEEPROMVarsv>
	rv3028_1s_sqw();
    34e4:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <_Z13rv3028_1s_sqwv>
		lb_send_string((char *)"EEPROM Error!\n", TRUE);
	}
	uint8_t result = rv3028_1s_sqw();
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch(NULL, NULL);
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	70 e0       	ldi	r23, 0x00	; 0
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z16rv3028_get_epochPbPc>
    34f4:	60 93 d3 04 	sts	0x04D3, r22	; 0x8004d3 <g_current_epoch>
    34f8:	70 93 d4 04 	sts	0x04D4, r23	; 0x8004d4 <g_current_epoch+0x1>
    34fc:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <g_current_epoch+0x2>
    3500:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <g_current_epoch+0x3>
		lb_send_NewPrompt();
		TIMSK1 |= (1 << OCIE1A); /* start timer 1 interrupts */

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    350c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_Z23clockConfigurationErrorv>
    3510:	81 11       	cpse	r24, r1
    3512:	07 c0       	rjmp	.+14     	; 0x3522 <main+0x1c6>
    3514:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <g_transmissions_disabled>
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	91 11       	cpse	r25, r1
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <main+0x1c8>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	01 c0       	rjmp	.+2      	; 0x3524 <main+0x1c8>
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    3528:	0e 94 9b 19 	call	0x3336	; 0x3336 <_Z4loopv>
    352c:	fd cf       	rjmp	.-6      	; 0x3528 <main+0x1cc>

0000352e <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	fc 01       	movw	r30, r24
    3532:	b0 97       	sbiw	r30, 0x20	; 32
    3534:	ed 35       	cpi	r30, 0x5D	; 93
    3536:	f1 05       	cpc	r31, r1
    3538:	08 f0       	brcs	.+2      	; 0x353c <_Z12getMorseCharc+0xe>
    353a:	e4 c0       	rjmp	.+456    	; 0x3704 <_Z12getMorseCharc+0x1d6>
    353c:	e5 58       	subi	r30, 0x85	; 133
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3544:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    3546:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3548:	61 e0       	ldi	r22, 0x01	; 1
    354a:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    354c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    354e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    3550:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3552:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    3554:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    3556:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3558:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    355a:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    355e:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3560:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    3562:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3564:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    3566:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    3568:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    356a:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    356c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    356e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3570:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    3572:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    3574:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    3576:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3578:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    357a:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    357c:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    357e:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3580:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    3582:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3584:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    3586:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    3588:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    358a:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    358c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    358e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    3590:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    3592:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3594:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    3596:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3598:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    359a:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    359c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    359e:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    35a0:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    35a2:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    35a4:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    35a6:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    35a8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    35aa:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    35ac:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    35ae:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    35b0:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    35b2:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    35b4:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    35b6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    35b8:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    35ba:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    35bc:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    35be:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    35c0:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    35c2:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    35c4:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    35c6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    35c8:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    35ca:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    35cc:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    35ce:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    35d0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    35d2:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    35d4:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    35d6:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    35d8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    35da:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    35dc:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    35de:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    35e0:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    35e2:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    35e4:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    35e6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    35e8:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    35ea:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    35ec:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    35ee:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    35f0:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    35f2:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    35f4:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    35f6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    35f8:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    35fa:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    35fc:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    35fe:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    3600:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    3602:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    3604:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    3606:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3608:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    360a:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    360c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    360e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    3610:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    3612:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    3614:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    3616:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    3618:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    361a:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    361c:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    361e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    3620:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    3622:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    3624:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    3626:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    3628:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    362a:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    362c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    362e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    3630:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    3632:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    3634:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    3636:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3638:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    363a:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    363c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    363e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3640:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    3642:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    3644:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    3646:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3648:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    364a:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    364c:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    364e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    3650:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    3652:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    3654:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    3656:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    3658:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    365a:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    365c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    365e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    3660:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    3662:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    3664:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    3666:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    3668:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    366a:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    366c:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    366e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    3670:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    3672:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    3674:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    3676:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    3678:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    367a:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    367c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    367e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    3680:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    3682:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    3684:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    3686:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    3688:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    368a:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    368c:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    368e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    3690:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    3692:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    3694:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    3696:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    3698:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    369a:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    369c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    369e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    36a0:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    36a2:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    36a4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    36a6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    36a8:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    36aa:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    36ac:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    36ae:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    36b0:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    36b2:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    36b4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    36b6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    36b8:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    36ba:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    36bc:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    36be:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    36c0:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    36c2:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    36c4:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    36c6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    36c8:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    36ca:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    36cc:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    36ce:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    36d0:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    36d2:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    36d4:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    36d6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    36d8:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    36da:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    36dc:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    36de:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    36e0:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    36e2:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    36e4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    36e6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    36e8:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    36ea:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    36ec:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    36ee:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    36f0:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    36f2:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    36f4:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    36f6:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    36f8:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    36fa:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    36fc:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    36fe:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    3700:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    3702:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    3704:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    3706:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    3708:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    370a:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    370c:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    370e:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3710:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    3712:	08 95       	ret

00003714 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    3714:	cf 93       	push	r28
    3716:	df 93       	push	r29
    3718:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	b1 f1       	breq	.+108    	; 0x378a <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    371e:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    3722:	61 15       	cp	r22, r1
    3724:	71 05       	cpc	r23, r1
    3726:	21 f0       	breq	.+8      	; 0x3730 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    3728:	db 01       	movw	r26, r22
    372a:	2c 91       	ld	r18, X
    372c:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    3730:	fc 01       	movw	r30, r24
    3732:	20 81       	ld	r18, Z
    3734:	22 23       	and	r18, r18
    3736:	d9 f0       	breq	.+54     	; 0x376e <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    3738:	90 93 ec 04 	sts	0x04EC, r25	; 0x8004ec <_ZZ9makeMorsePcPhS0_E3str+0x1>
    373c:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    3740:	80 e2       	ldi	r24, 0x20	; 32
    3742:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    3746:	82 2f       	mov	r24, r18
    3748:	0e 94 97 1a 	call	0x352e	; 0x352e <_Z12getMorseCharc>
    374c:	60 93 e8 04 	sts	0x04E8, r22	; 0x8004e8 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    3750:	70 93 e9 04 	sts	0x04E9, r23	; 0x8004e9 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    3754:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    3758:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    375c:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    3760:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    3764:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    3768:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E15completedString>
    376c:	0a c0       	rjmp	.+20     	; 0x3782 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    376e:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZZ9makeMorsePcPhS0_E3str+0x1>
    3772:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    377c:	20 97       	sbiw	r28, 0x00	; 0
    377e:	09 f0       	breq	.+2      	; 0x3782 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    3780:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    3782:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	c0 c0       	rjmp	.+384    	; 0x390a <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    378a:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <_ZZ9makeMorsePcPhS0_E3str>
    378e:	f0 91 ec 04 	lds	r31, 0x04EC	; 0x8004ec <_ZZ9makeMorsePcPhS0_E3str+0x1>
    3792:	30 97       	sbiw	r30, 0x00	; 0
    3794:	09 f4       	brne	.+2      	; 0x3798 <_Z9makeMorsePcPhS0_+0x84>
    3796:	aa c0       	rjmp	.+340    	; 0x38ec <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    3798:	61 15       	cp	r22, r1
    379a:	71 05       	cpc	r23, r1
    379c:	21 f0       	breq	.+8      	; 0x37a6 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    379e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E6repeat>
    37a2:	db 01       	movw	r26, r22
    37a4:	8c 93       	st	X, r24
		}

		if(completedString)
    37a6:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E15completedString>
    37aa:	88 23       	and	r24, r24
    37ac:	49 f0       	breq	.+18     	; 0x37c0 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    37ae:	20 97       	sbiw	r28, 0x00	; 0
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <_Z9makeMorsePcPhS0_+0xa0>
    37b2:	a8 c0       	rjmp	.+336    	; 0x3904 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    37b8:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	a5 c0       	rjmp	.+330    	; 0x390a <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    37c0:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    37c4:	88 23       	and	r24, r24
    37c6:	21 f0       	breq	.+8      	; 0x37d0 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    37c8:	81 50       	subi	r24, 0x01	; 1
    37ca:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    37ce:	7f c0       	rjmp	.+254    	; 0x38ce <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    37d0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    37d4:	88 23       	and	r24, r24
    37d6:	81 f0       	breq	.+32     	; 0x37f8 <_Z9makeMorsePcPhS0_+0xe4>
    37d8:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    37dc:	81 11       	cpse	r24, r1
    37de:	0c c0       	rjmp	.+24     	; 0x37f8 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    37e0:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    37e4:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    37e8:	88 23       	and	r24, r24
    37ea:	09 f4       	brne	.+2      	; 0x37ee <_Z9makeMorsePcPhS0_+0xda>
    37ec:	70 c0       	rjmp	.+224    	; 0x38ce <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    37ee:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    37f2:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    37f6:	6b c0       	rjmp	.+214    	; 0x38ce <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    37f8:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    37fc:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    3800:	89 17       	cp	r24, r25
    3802:	90 f1       	brcs	.+100    	; 0x3868 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    3804:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <_ZZ9makeMorsePcPhS0_E9charIndex>
    3808:	8f 5f       	subi	r24, 0xFF	; 255
    380a:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <_ZZ9makeMorsePcPhS0_E9charIndex>
    380e:	df 01       	movw	r26, r30
    3810:	a8 0f       	add	r26, r24
    3812:	b1 1d       	adc	r27, r1
    3814:	8c 91       	ld	r24, X
    3816:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    381a:	81 11       	cpse	r24, r1
    381c:	19 c0       	rjmp	.+50     	; 0x3850 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    381e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E6repeat>
    3822:	88 23       	and	r24, r24
    3824:	31 f0       	breq	.+12     	; 0x3832 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    3826:	80 81       	ld	r24, Z
    3828:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    382c:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <_ZZ9makeMorsePcPhS0_E9charIndex>
    3830:	0f c0       	rjmp	.+30     	; 0x3850 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    3832:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZZ9makeMorsePcPhS0_E3str+0x1>
    3836:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    383a:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    383e:	91 e0       	ldi	r25, 0x01	; 1
    3840:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    3844:	20 97       	sbiw	r28, 0x00	; 0
    3846:	09 f0       	breq	.+2      	; 0x384a <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    3848:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    384a:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    384e:	5d c0       	rjmp	.+186    	; 0x390a <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    3850:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
    3854:	0e 94 97 1a 	call	0x352e	; 0x352e <_Z12getMorseCharc>
    3858:	60 93 e8 04 	sts	0x04E8, r22	; 0x8004e8 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    385c:	70 93 e9 04 	sts	0x04E9, r23	; 0x8004e9 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    3860:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    3864:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    3868:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    386c:	2d 3f       	cpi	r18, 0xFD	; 253
    386e:	00 f5       	brcc	.+64     	; 0x38b0 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    3870:	40 91 e6 04 	lds	r20, 0x04E6	; 0x8004e6 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    3874:	31 e0       	ldi	r19, 0x01	; 1
    3876:	34 0f       	add	r19, r20
    3878:	30 93 e6 04 	sts	0x04E6, r19	; 0x8004e6 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <_Z9makeMorsePcPhS0_+0x172>
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	4a 95       	dec	r20
    3888:	e2 f7       	brpl	.-8      	; 0x3882 <_Z9makeMorsePcPhS0_+0x16e>
    388a:	82 23       	and	r24, r18
    388c:	21 f0       	breq	.+8      	; 0x3896 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    3894:	02 c0       	rjmp	.+4      	; 0x389a <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    3896:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    38a0:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    38a4:	38 17       	cp	r19, r24
    38a6:	98 f0       	brcs	.+38     	; 0x38ce <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    38a8:	82 e0       	ldi	r24, 0x02	; 2
    38aa:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    38ae:	0f c0       	rjmp	.+30     	; 0x38ce <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    38b0:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    38b4:	9f ef       	ldi	r25, 0xFF	; 255
    38b6:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    38ba:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    38be:	84 30       	cpi	r24, 0x04	; 4
    38c0:	20 f0       	brcs	.+8      	; 0x38ca <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    38c2:	84 50       	subi	r24, 0x04	; 4
    38c4:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    38ca:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    38ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
    38d2:	8c 33       	cpi	r24, 0x3C	; 60
    38d4:	31 f4       	brne	.+12     	; 0x38e2 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    38dc:	20 97       	sbiw	r28, 0x00	; 0
    38de:	41 f4       	brne	.+16     	; 0x38f0 <_Z9makeMorsePcPhS0_+0x1dc>
    38e0:	14 c0       	rjmp	.+40     	; 0x390a <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    38e2:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    38e6:	20 97       	sbiw	r28, 0x00	; 0
    38e8:	19 f4       	brne	.+6      	; 0x38f0 <_Z9makeMorsePcPhS0_+0x1dc>
    38ea:	09 c0       	rjmp	.+18     	; 0x38fe <_Z9makeMorsePcPhS0_+0x1ea>
    38ec:	20 97       	sbiw	r28, 0x00	; 0
    38ee:	19 f0       	breq	.+6      	; 0x38f6 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    38f0:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E15completedString>
    38f4:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    38f6:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    38fa:	81 11       	cpse	r24, r1
    38fc:	05 c0       	rjmp	.+10     	; 0x3908 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    38fe:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    3902:	03 c0       	rjmp	.+6      	; 0x390a <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	01 c0       	rjmp	.+2      	; 0x390a <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    3908:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	08 95       	ret

00003910 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    3910:	cf 92       	push	r12
    3912:	df 92       	push	r13
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	fc 01       	movw	r30, r24
    3920:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    3922:	80 81       	ld	r24, Z
		if(!c)
    3924:	88 23       	and	r24, r24
    3926:	c1 f0       	breq	.+48     	; 0x3958 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    3928:	8f 01       	movw	r16, r30
    392a:	0f 5f       	subi	r16, 0xFF	; 255
    392c:	1f 4f       	sbci	r17, 0xFF	; 255
    392e:	7f 01       	movw	r14, r30
    3930:	94 e1       	ldi	r25, 0x14	; 20
    3932:	e9 0e       	add	r14, r25
    3934:	f1 1c       	adc	r15, r1
    3936:	c0 e0       	ldi	r28, 0x00	; 0
    3938:	05 c0       	rjmp	.+10     	; 0x3944 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    393a:	f8 01       	movw	r30, r16
    393c:	81 91       	ld	r24, Z+
    393e:	8f 01       	movw	r16, r30
		if(!c)
    3940:	88 23       	and	r24, r24
    3942:	59 f0       	breq	.+22     	; 0x395a <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    3944:	0e 94 97 1a 	call	0x352e	; 0x352e <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    3948:	6d 3f       	cpi	r22, 0xFD	; 253
    394a:	08 f4       	brcc	.+2      	; 0x394e <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    394c:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    394e:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    3950:	0e 15       	cp	r16, r14
    3952:	1f 05       	cpc	r17, r15
    3954:	91 f7       	brne	.-28     	; 0x393a <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    3956:	01 c0       	rjmp	.+2      	; 0x395a <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    3958:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    395a:	80 eb       	ldi	r24, 0xB0	; 176
    395c:	94 e0       	ldi	r25, 0x04	; 4
    395e:	b6 01       	movw	r22, r12
    3960:	0e 94 09 22 	call	0x4412	; 0x4412 <__udivmodhi4>
}
    3964:	c6 9f       	mul	r28, r22
    3966:	c0 01       	movw	r24, r0
    3968:	c7 9f       	mul	r28, r23
    396a:	90 0d       	add	r25, r0
    396c:	11 24       	eor	r1, r1
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	df 90       	pop	r13
    397a:	cf 90       	pop	r12
    397c:	08 95       	ret

0000397e <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    397e:	98 2f       	mov	r25, r24
    3980:	96 95       	lsr	r25
    3982:	96 95       	lsr	r25
    3984:	96 95       	lsr	r25
    3986:	9e 71       	andi	r25, 0x1E	; 30
    3988:	29 2f       	mov	r18, r25
    398a:	22 0f       	add	r18, r18
    398c:	22 0f       	add	r18, r18
    398e:	92 0f       	add	r25, r18
    3990:	8f 70       	andi	r24, 0x0F	; 15
    3992:	89 0f       	add	r24, r25
    3994:	08 95       	ret

00003996 <_Z8char2bcdPc>:
    3996:	fc 01       	movw	r30, r24
    3998:	20 81       	ld	r18, Z
    399a:	81 81       	ldd	r24, Z+1	; 0x01
    399c:	80 53       	subi	r24, 0x30	; 48
    399e:	f0 e1       	ldi	r31, 0x10	; 16
    39a0:	2f 9f       	mul	r18, r31
    39a2:	80 0d       	add	r24, r0
    39a4:	11 24       	eor	r1, r1
    39a6:	08 95       	ret

000039a8 <_Z16rv3028_get_epochPbPc>:
    39a8:	4f 92       	push	r4
    39aa:	5f 92       	push	r5
    39ac:	6f 92       	push	r6
    39ae:	7f 92       	push	r7
    39b0:	8f 92       	push	r8
    39b2:	9f 92       	push	r9
    39b4:	af 92       	push	r10
    39b6:	bf 92       	push	r11
    39b8:	cf 92       	push	r12
    39ba:	df 92       	push	r13
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	27 97       	sbiw	r28, 0x07	; 7
    39ce:	0f b6       	in	r0, 0x3f	; 63
    39d0:	f8 94       	cli
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	6c 01       	movw	r12, r24
    39da:	7b 01       	movw	r14, r22
    39dc:	fe 01       	movw	r30, r28
    39de:	31 96       	adiw	r30, 0x01	; 1
    39e0:	87 e0       	ldi	r24, 0x07	; 7
    39e2:	df 01       	movw	r26, r30
    39e4:	1d 92       	st	X+, r1
    39e6:	8a 95       	dec	r24
    39e8:	e9 f7       	brne	.-6      	; 0x39e4 <_Z16rv3028_get_epochPbPc+0x3c>
    39ea:	61 15       	cp	r22, r1
    39ec:	71 05       	cpc	r23, r1
    39ee:	f1 f0       	breq	.+60     	; 0x3a2c <_Z16rv3028_get_epochPbPc+0x84>
    39f0:	cb 01       	movw	r24, r22
    39f2:	0a 96       	adiw	r24, 0x0a	; 10
    39f4:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_Z8char2bcdPc>
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	c7 01       	movw	r24, r14
    39fc:	08 96       	adiw	r24, 0x08	; 8
    39fe:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_Z8char2bcdPc>
    3a02:	8a 83       	std	Y+2, r24	; 0x02
    3a04:	c7 01       	movw	r24, r14
    3a06:	06 96       	adiw	r24, 0x06	; 6
    3a08:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_Z8char2bcdPc>
    3a0c:	8b 83       	std	Y+3, r24	; 0x03
    3a0e:	c7 01       	movw	r24, r14
    3a10:	04 96       	adiw	r24, 0x04	; 4
    3a12:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_Z8char2bcdPc>
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	c7 01       	movw	r24, r14
    3a1a:	02 96       	adiw	r24, 0x02	; 2
    3a1c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_Z8char2bcdPc>
    3a20:	8e 83       	std	Y+6, r24	; 0x06
    3a22:	c7 01       	movw	r24, r14
    3a24:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_Z8char2bcdPc>
    3a28:	8f 83       	std	Y+7, r24	; 0x07
    3a2a:	0b c0       	rjmp	.+22     	; 0x3a42 <_Z16rv3028_get_epochPbPc+0x9a>
    3a2c:	27 e0       	ldi	r18, 0x07	; 7
    3a2e:	ae 01       	movw	r20, r28
    3a30:	4f 5f       	subi	r20, 0xFF	; 255
    3a32:	5f 4f       	sbci	r21, 0xFF	; 255
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	84 ea       	ldi	r24, 0xA4	; 164
    3a38:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_Z15i2c_device_readhhPhh>
    3a3c:	38 2f       	mov	r19, r24
    3a3e:	81 11       	cpse	r24, r1
    3a40:	9b c0       	rjmp	.+310    	; 0x3b78 <_Z16rv3028_get_epochPbPc+0x1d0>
    3a42:	8f 81       	ldd	r24, Y+7	; 0x07
    3a44:	0e 94 bf 1c 	call	0x397e	; 0x397e <_Z7bcd2dech>
    3a48:	a8 2e       	mov	r10, r24
    3a4a:	b1 2c       	mov	r11, r1
    3a4c:	45 01       	movw	r8, r10
    3a4e:	b0 e3       	ldi	r27, 0x30	; 48
    3a50:	8b 1a       	sub	r8, r27
    3a52:	b8 ef       	ldi	r27, 0xF8	; 248
    3a54:	9b 0a       	sbc	r9, r27
    3a56:	8e 81       	ldd	r24, Y+6	; 0x06
    3a58:	0e 94 bf 1c 	call	0x397e	; 0x397e <_Z7bcd2dech>
    3a5c:	08 2f       	mov	r16, r24
    3a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a60:	0e 94 bf 1c 	call	0x397e	; 0x397e <_Z7bcd2dech>
    3a64:	78 2e       	mov	r7, r24
    3a66:	02 30       	cpi	r16, 0x02	; 2
    3a68:	68 f0       	brcs	.+26     	; 0x3a84 <_Z16rv3028_get_epochPbPc+0xdc>
    3a6a:	e1 2c       	mov	r14, r1
    3a6c:	f1 2c       	mov	r15, r1
    3a6e:	11 e0       	ldi	r17, 0x01	; 1
    3a70:	61 2f       	mov	r22, r17
    3a72:	c4 01       	movw	r24, r8
    3a74:	0e 94 1b 02 	call	0x436	; 0x436 <month_length>
    3a78:	e8 0e       	add	r14, r24
    3a7a:	f1 1c       	adc	r15, r1
    3a7c:	1f 5f       	subi	r17, 0xFF	; 255
    3a7e:	01 13       	cpse	r16, r17
    3a80:	f7 cf       	rjmp	.-18     	; 0x3a70 <_Z16rv3028_get_epochPbPc+0xc8>
    3a82:	02 c0       	rjmp	.+4      	; 0x3a88 <_Z16rv3028_get_epochPbPc+0xe0>
    3a84:	e1 2c       	mov	r14, r1
    3a86:	f1 2c       	mov	r15, r1
    3a88:	87 2d       	mov	r24, r7
    3a8a:	77 0c       	add	r7, r7
    3a8c:	99 0b       	sbc	r25, r25
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	e8 0e       	add	r14, r24
    3a92:	f9 1e       	adc	r15, r25
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	0e 94 bf 1c 	call	0x397e	; 0x397e <_Z7bcd2dech>
    3a9a:	48 2e       	mov	r4, r24
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	0e 94 bf 1c 	call	0x397e	; 0x397e <_Z7bcd2dech>
    3aa2:	18 2f       	mov	r17, r24
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	0e 94 bf 1c 	call	0x397e	; 0x397e <_Z7bcd2dech>
    3aaa:	04 2c       	mov	r0, r4
    3aac:	00 0c       	add	r0, r0
    3aae:	55 08       	sbc	r5, r5
    3ab0:	ec e3       	ldi	r30, 0x3C	; 60
    3ab2:	1e 02       	muls	r17, r30
    3ab4:	40 0c       	add	r4, r0
    3ab6:	51 1c       	adc	r5, r1
    3ab8:	11 24       	eor	r1, r1
    3aba:	05 2c       	mov	r0, r5
    3abc:	00 0c       	add	r0, r0
    3abe:	66 08       	sbc	r6, r6
    3ac0:	77 08       	sbc	r7, r7
    3ac2:	a8 2f       	mov	r26, r24
    3ac4:	88 0f       	add	r24, r24
    3ac6:	bb 0b       	sbc	r27, r27
    3ac8:	20 e1       	ldi	r18, 0x10	; 16
    3aca:	3e e0       	ldi	r19, 0x0E	; 14
    3acc:	0e 94 87 22 	call	0x450e	; 0x450e <__usmulhisi3>
    3ad0:	46 0e       	add	r4, r22
    3ad2:	57 1e       	adc	r5, r23
    3ad4:	68 1e       	adc	r6, r24
    3ad6:	79 1e       	adc	r7, r25
    3ad8:	d7 01       	movw	r26, r14
    3ada:	20 e8       	ldi	r18, 0x80	; 128
    3adc:	31 e5       	ldi	r19, 0x51	; 81
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	50 e0       	ldi	r21, 0x00	; 0
    3ae2:	0e 94 99 22 	call	0x4532	; 0x4532 <__mulshisi3>
    3ae6:	46 0e       	add	r4, r22
    3ae8:	57 1e       	adc	r5, r23
    3aea:	68 1e       	adc	r6, r24
    3aec:	79 1e       	adc	r7, r25
    3aee:	d5 01       	movw	r26, r10
    3af0:	5e 96       	adiw	r26, 0x1e	; 30
    3af2:	20 e8       	ldi	r18, 0x80	; 128
    3af4:	33 e3       	ldi	r19, 0x33	; 51
    3af6:	41 ee       	ldi	r20, 0xE1	; 225
    3af8:	51 e0       	ldi	r21, 0x01	; 1
    3afa:	0e 94 99 22 	call	0x4532	; 0x4532 <__mulshisi3>
    3afe:	46 0e       	add	r4, r22
    3b00:	57 1e       	adc	r5, r23
    3b02:	68 1e       	adc	r6, r24
    3b04:	79 1e       	adc	r7, r25
    3b06:	c5 01       	movw	r24, r10
    3b08:	4f 96       	adiw	r24, 0x1f	; 31
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	0a f4       	brpl	.+2      	; 0x3b10 <_Z16rv3028_get_epochPbPc+0x168>
    3b0e:	13 96       	adiw	r26, 0x03	; 3
    3b10:	b5 95       	asr	r27
    3b12:	a7 95       	ror	r26
    3b14:	b5 95       	asr	r27
    3b16:	a7 95       	ror	r26
    3b18:	20 e8       	ldi	r18, 0x80	; 128
    3b1a:	31 e5       	ldi	r19, 0x51	; 81
    3b1c:	41 e0       	ldi	r20, 0x01	; 1
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	0e 94 99 22 	call	0x4532	; 0x4532 <__mulshisi3>
    3b24:	46 0e       	add	r4, r22
    3b26:	57 1e       	adc	r5, r23
    3b28:	68 1e       	adc	r6, r24
    3b2a:	79 1e       	adc	r7, r25
    3b2c:	c5 01       	movw	r24, r10
    3b2e:	8d 59       	subi	r24, 0x9D	; 157
    3b30:	9f 4f       	sbci	r25, 0xFF	; 255
    3b32:	64 e6       	ldi	r22, 0x64	; 100
    3b34:	70 e0       	ldi	r23, 0x00	; 0
    3b36:	0e 94 1d 22 	call	0x443a	; 0x443a <__divmodhi4>
    3b3a:	db 01       	movw	r26, r22
    3b3c:	20 e8       	ldi	r18, 0x80	; 128
    3b3e:	3e ea       	ldi	r19, 0xAE	; 174
    3b40:	4e ef       	ldi	r20, 0xFE	; 254
    3b42:	5f ef       	ldi	r21, 0xFF	; 255
    3b44:	0e 94 99 22 	call	0x4532	; 0x4532 <__mulshisi3>
    3b48:	46 0e       	add	r4, r22
    3b4a:	57 1e       	adc	r5, r23
    3b4c:	68 1e       	adc	r6, r24
    3b4e:	79 1e       	adc	r7, r25
    3b50:	c5 01       	movw	r24, r10
    3b52:	81 57       	subi	r24, 0x71	; 113
    3b54:	9e 4f       	sbci	r25, 0xFE	; 254
    3b56:	60 e9       	ldi	r22, 0x90	; 144
    3b58:	71 e0       	ldi	r23, 0x01	; 1
    3b5a:	0e 94 1d 22 	call	0x443a	; 0x443a <__divmodhi4>
    3b5e:	db 01       	movw	r26, r22
    3b60:	20 e8       	ldi	r18, 0x80	; 128
    3b62:	31 e5       	ldi	r19, 0x51	; 81
    3b64:	41 e0       	ldi	r20, 0x01	; 1
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	0e 94 99 22 	call	0x4532	; 0x4532 <__mulshisi3>
    3b6c:	64 0d       	add	r22, r4
    3b6e:	75 1d       	adc	r23, r5
    3b70:	86 1d       	adc	r24, r6
    3b72:	97 1d       	adc	r25, r7
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	03 c0       	rjmp	.+6      	; 0x3b7e <_Z16rv3028_get_epochPbPc+0x1d6>
    3b78:	60 e0       	ldi	r22, 0x00	; 0
    3b7a:	70 e0       	ldi	r23, 0x00	; 0
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	c1 14       	cp	r12, r1
    3b80:	d1 04       	cpc	r13, r1
    3b82:	31 f0       	breq	.+12     	; 0x3b90 <_Z16rv3028_get_epochPbPc+0x1e8>
    3b84:	21 e0       	ldi	r18, 0x01	; 1
    3b86:	31 11       	cpse	r19, r1
    3b88:	01 c0       	rjmp	.+2      	; 0x3b8c <_Z16rv3028_get_epochPbPc+0x1e4>
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	d6 01       	movw	r26, r12
    3b8e:	2c 93       	st	X, r18
    3b90:	27 96       	adiw	r28, 0x07	; 7
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	ff 90       	pop	r15
    3ba6:	ef 90       	pop	r14
    3ba8:	df 90       	pop	r13
    3baa:	cf 90       	pop	r12
    3bac:	bf 90       	pop	r11
    3bae:	af 90       	pop	r10
    3bb0:	9f 90       	pop	r9
    3bb2:	8f 90       	pop	r8
    3bb4:	7f 90       	pop	r7
    3bb6:	6f 90       	pop	r6
    3bb8:	5f 90       	pop	r5
    3bba:	4f 90       	pop	r4
    3bbc:	08 95       	ret

00003bbe <_Z20rv3028_set_date_timePc>:
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	27 97       	sbiw	r28, 0x07	; 7
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	21 e0       	ldi	r18, 0x01	; 1
    3bd4:	2c 83       	std	Y+4, r18	; 0x04
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	0d 90       	ld	r0, X+
    3bda:	00 20       	and	r0, r0
    3bdc:	e9 f7       	brne	.-6      	; 0x3bd8 <_Z20rv3028_set_date_timePc+0x1a>
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	a8 1b       	sub	r26, r24
    3be2:	b9 0b       	sbc	r27, r25
    3be4:	1c 97       	sbiw	r26, 0x0c	; 12
    3be6:	0c f4       	brge	.+2      	; 0x3bea <_Z20rv3028_set_date_timePc+0x2c>
    3be8:	3a c0       	rjmp	.+116    	; 0x3c5e <_Z20rv3028_set_date_timePc+0xa0>
    3bea:	fc 01       	movw	r30, r24
    3bec:	92 85       	ldd	r25, Z+10	; 0x0a
    3bee:	83 85       	ldd	r24, Z+11	; 0x0b
    3bf0:	80 53       	subi	r24, 0x30	; 48
    3bf2:	20 e1       	ldi	r18, 0x10	; 16
    3bf4:	92 9f       	mul	r25, r18
    3bf6:	80 0d       	add	r24, r0
    3bf8:	11 24       	eor	r1, r1
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	90 85       	ldd	r25, Z+8	; 0x08
    3bfe:	81 85       	ldd	r24, Z+9	; 0x09
    3c00:	80 53       	subi	r24, 0x30	; 48
    3c02:	20 e1       	ldi	r18, 0x10	; 16
    3c04:	92 9f       	mul	r25, r18
    3c06:	80 0d       	add	r24, r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	8a 83       	std	Y+2, r24	; 0x02
    3c0c:	96 81       	ldd	r25, Z+6	; 0x06
    3c0e:	87 81       	ldd	r24, Z+7	; 0x07
    3c10:	80 53       	subi	r24, 0x30	; 48
    3c12:	20 e1       	ldi	r18, 0x10	; 16
    3c14:	92 9f       	mul	r25, r18
    3c16:	80 0d       	add	r24, r0
    3c18:	11 24       	eor	r1, r1
    3c1a:	8b 83       	std	Y+3, r24	; 0x03
    3c1c:	94 81       	ldd	r25, Z+4	; 0x04
    3c1e:	85 81       	ldd	r24, Z+5	; 0x05
    3c20:	80 53       	subi	r24, 0x30	; 48
    3c22:	20 e1       	ldi	r18, 0x10	; 16
    3c24:	92 9f       	mul	r25, r18
    3c26:	80 0d       	add	r24, r0
    3c28:	11 24       	eor	r1, r1
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	92 81       	ldd	r25, Z+2	; 0x02
    3c2e:	83 81       	ldd	r24, Z+3	; 0x03
    3c30:	80 53       	subi	r24, 0x30	; 48
    3c32:	20 e1       	ldi	r18, 0x10	; 16
    3c34:	92 9f       	mul	r25, r18
    3c36:	80 0d       	add	r24, r0
    3c38:	11 24       	eor	r1, r1
    3c3a:	8e 83       	std	Y+6, r24	; 0x06
    3c3c:	90 81       	ld	r25, Z
    3c3e:	81 81       	ldd	r24, Z+1	; 0x01
    3c40:	80 53       	subi	r24, 0x30	; 48
    3c42:	20 e1       	ldi	r18, 0x10	; 16
    3c44:	92 9f       	mul	r25, r18
    3c46:	80 0d       	add	r24, r0
    3c48:	11 24       	eor	r1, r1
    3c4a:	8f 83       	std	Y+7, r24	; 0x07
    3c4c:	27 e0       	ldi	r18, 0x07	; 7
    3c4e:	ae 01       	movw	r20, r28
    3c50:	4f 5f       	subi	r20, 0xFF	; 255
    3c52:	5f 4f       	sbci	r21, 0xFF	; 255
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	84 ea       	ldi	r24, 0xA4	; 164
    3c58:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3c5c:	01 c0       	rjmp	.+2      	; 0x3c60 <_Z20rv3028_set_date_timePc+0xa2>
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	27 96       	adiw	r28, 0x07	; 7
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	08 95       	ret

00003c72 <_Z21rv3028_set_offset_RAMj>:
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <_Z21rv3028_set_offset_RAMj+0x6>
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	20 e1       	ldi	r18, 0x10	; 16
    3c7e:	2a 83       	std	Y+2, r18	; 0x02
    3c80:	9c 01       	movw	r18, r24
    3c82:	36 95       	lsr	r19
    3c84:	27 95       	ror	r18
    3c86:	29 83       	std	Y+1, r18	; 0x01
    3c88:	80 ff       	sbrs	r24, 0
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <_Z21rv3028_set_offset_RAMj+0x1e>
    3c8c:	80 e9       	ldi	r24, 0x90	; 144
    3c8e:	8a 83       	std	Y+2, r24	; 0x02
    3c90:	22 e0       	ldi	r18, 0x02	; 2
    3c92:	ae 01       	movw	r20, r28
    3c94:	4f 5f       	subi	r20, 0xFF	; 255
    3c96:	5f 4f       	sbci	r21, 0xFF	; 255
    3c98:	66 e3       	ldi	r22, 0x36	; 54
    3c9a:	84 ea       	ldi	r24, 0xA4	; 164
    3c9c:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	08 95       	ret

00003caa <_Z18waitForEEPROMReadyv>:
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	1f 92       	push	r1
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	89 83       	std	Y+1, r24	; 0x01
    3cb8:	21 e0       	ldi	r18, 0x01	; 1
    3cba:	ae 01       	movw	r20, r28
    3cbc:	4f 5f       	subi	r20, 0xFF	; 255
    3cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc0:	6e e0       	ldi	r22, 0x0E	; 14
    3cc2:	84 ea       	ldi	r24, 0xA4	; 164
    3cc4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_Z15i2c_device_readhhPhh>
    3cc8:	81 11       	cpse	r24, r1
    3cca:	07 c0       	rjmp	.+14     	; 0x3cda <_Z18waitForEEPROMReadyv+0x30>
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	80 78       	andi	r24, 0x80	; 128
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	81 11       	cpse	r24, r1
    3cd4:	f1 cf       	rjmp	.-30     	; 0x3cb8 <_Z18waitForEEPROMReadyv+0xe>
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	03 c0       	rjmp	.+6      	; 0x3ce0 <_Z18waitForEEPROMReadyv+0x36>
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	88 23       	and	r24, r24
    3cde:	d9 f3       	breq	.-10     	; 0x3cd6 <_Z18waitForEEPROMReadyv+0x2c>
    3ce0:	0f 90       	pop	r0
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	08 95       	ret

00003ce8 <_Z18writeOneEEPROMBytehhh>:
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	00 d0       	rcall	.+0      	; 0x3cf0 <_Z18writeOneEEPROMBytehhh+0x8>
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <_Z18writeOneEEPROMBytehhh+0xa>
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	8b 83       	std	Y+3, r24	; 0x03
    3cf8:	16 2f       	mov	r17, r22
    3cfa:	4c 83       	std	Y+4, r20	; 0x04
    3cfc:	19 82       	std	Y+1, r1	; 0x01
    3cfe:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_Z18waitForEEPROMReadyv>
    3d02:	81 11       	cpse	r24, r1
    3d04:	5e c0       	rjmp	.+188    	; 0x3dc2 <_Z18writeOneEEPROMBytehhh+0xda>
    3d06:	88 e0       	ldi	r24, 0x08	; 8
    3d08:	89 83       	std	Y+1, r24	; 0x01
    3d0a:	21 e0       	ldi	r18, 0x01	; 1
    3d0c:	ae 01       	movw	r20, r28
    3d0e:	4f 5f       	subi	r20, 0xFF	; 255
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255
    3d12:	6f e0       	ldi	r22, 0x0F	; 15
    3d14:	84 ea       	ldi	r24, 0xA4	; 164
    3d16:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	54 c0       	rjmp	.+168    	; 0x3dc6 <_Z18writeOneEEPROMBytehhh+0xde>
    3d1e:	21 e0       	ldi	r18, 0x01	; 1
    3d20:	ae 01       	movw	r20, r28
    3d22:	4e 5f       	subi	r20, 0xFE	; 254
    3d24:	5f 4f       	sbci	r21, 0xFF	; 255
    3d26:	6b 81       	ldd	r22, Y+3	; 0x03
    3d28:	84 ea       	ldi	r24, 0xA4	; 164
    3d2a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_Z15i2c_device_readhhPhh>
    3d2e:	91 2f       	mov	r25, r17
    3d30:	90 95       	com	r25
    3d32:	8a 81       	ldd	r24, Y+2	; 0x02
    3d34:	89 23       	and	r24, r25
    3d36:	8a 83       	std	Y+2, r24	; 0x02
    3d38:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3a:	19 23       	and	r17, r25
    3d3c:	81 2b       	or	r24, r17
    3d3e:	8c 83       	std	Y+4, r24	; 0x04
    3d40:	21 e0       	ldi	r18, 0x01	; 1
    3d42:	ae 01       	movw	r20, r28
    3d44:	4d 5f       	subi	r20, 0xFD	; 253
    3d46:	5f 4f       	sbci	r21, 0xFF	; 255
    3d48:	65 e2       	ldi	r22, 0x25	; 37
    3d4a:	84 ea       	ldi	r24, 0xA4	; 164
    3d4c:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3d50:	81 11       	cpse	r24, r1
    3d52:	3b c0       	rjmp	.+118    	; 0x3dca <_Z18writeOneEEPROMBytehhh+0xe2>
    3d54:	21 e0       	ldi	r18, 0x01	; 1
    3d56:	ae 01       	movw	r20, r28
    3d58:	4c 5f       	subi	r20, 0xFC	; 252
    3d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d5c:	66 e2       	ldi	r22, 0x26	; 38
    3d5e:	84 ea       	ldi	r24, 0xA4	; 164
    3d60:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3d64:	81 11       	cpse	r24, r1
    3d66:	33 c0       	rjmp	.+102    	; 0x3dce <_Z18writeOneEEPROMBytehhh+0xe6>
    3d68:	19 82       	std	Y+1, r1	; 0x01
    3d6a:	21 e0       	ldi	r18, 0x01	; 1
    3d6c:	ae 01       	movw	r20, r28
    3d6e:	4f 5f       	subi	r20, 0xFF	; 255
    3d70:	5f 4f       	sbci	r21, 0xFF	; 255
    3d72:	67 e2       	ldi	r22, 0x27	; 39
    3d74:	84 ea       	ldi	r24, 0xA4	; 164
    3d76:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3d7a:	81 11       	cpse	r24, r1
    3d7c:	2a c0       	rjmp	.+84     	; 0x3dd2 <_Z18writeOneEEPROMBytehhh+0xea>
    3d7e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_Z18waitForEEPROMReadyv>
    3d82:	81 11       	cpse	r24, r1
    3d84:	28 c0       	rjmp	.+80     	; 0x3dd6 <_Z18writeOneEEPROMBytehhh+0xee>
    3d86:	81 e2       	ldi	r24, 0x21	; 33
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	21 e0       	ldi	r18, 0x01	; 1
    3d8c:	ae 01       	movw	r20, r28
    3d8e:	4f 5f       	subi	r20, 0xFF	; 255
    3d90:	5f 4f       	sbci	r21, 0xFF	; 255
    3d92:	67 e2       	ldi	r22, 0x27	; 39
    3d94:	84 ea       	ldi	r24, 0xA4	; 164
    3d96:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3d9a:	81 11       	cpse	r24, r1
    3d9c:	1e c0       	rjmp	.+60     	; 0x3dda <_Z18writeOneEEPROMBytehhh+0xf2>
    3d9e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_Z18waitForEEPROMReadyv>
    3da2:	81 11       	cpse	r24, r1
    3da4:	1c c0       	rjmp	.+56     	; 0x3dde <_Z18writeOneEEPROMBytehhh+0xf6>
    3da6:	19 82       	std	Y+1, r1	; 0x01
    3da8:	21 e0       	ldi	r18, 0x01	; 1
    3daa:	ae 01       	movw	r20, r28
    3dac:	4f 5f       	subi	r20, 0xFF	; 255
    3dae:	5f 4f       	sbci	r21, 0xFF	; 255
    3db0:	6f e0       	ldi	r22, 0x0F	; 15
    3db2:	84 ea       	ldi	r24, 0xA4	; 164
    3db4:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
    3db8:	91 e0       	ldi	r25, 0x01	; 1
    3dba:	81 11       	cpse	r24, r1
    3dbc:	11 c0       	rjmp	.+34     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	0f c0       	rjmp	.+30     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dc2:	91 e0       	ldi	r25, 0x01	; 1
    3dc4:	0d c0       	rjmp	.+26     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dc6:	91 e0       	ldi	r25, 0x01	; 1
    3dc8:	0b c0       	rjmp	.+22     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	09 c0       	rjmp	.+18     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dce:	91 e0       	ldi	r25, 0x01	; 1
    3dd0:	07 c0       	rjmp	.+14     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	05 c0       	rjmp	.+10     	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dd6:	91 e0       	ldi	r25, 0x01	; 1
    3dd8:	03 c0       	rjmp	.+6      	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dda:	91 e0       	ldi	r25, 0x01	; 1
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <_Z18writeOneEEPROMBytehhh+0xf8>
    3dde:	91 e0       	ldi	r25, 0x01	; 1
    3de0:	89 2f       	mov	r24, r25
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	1f 91       	pop	r17
    3df0:	08 95       	ret

00003df2 <_Z20refreshRAMfromEEPROMv>:

		return( fail);
	}
	
	void refreshRAMfromEEPROM(void)
	{
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	1f 92       	push	r1
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    3dfc:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    3dfe:	21 e0       	ldi	r18, 0x01	; 1
    3e00:	ae 01       	movw	r20, r28
    3e02:	4f 5f       	subi	r20, 0xFF	; 255
    3e04:	5f 4f       	sbci	r21, 0xFF	; 255
    3e06:	67 e2       	ldi	r22, 0x27	; 39
    3e08:	84 ea       	ldi	r24, 0xA4	; 164
    3e0a:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    3e0e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    3e12:	82 e1       	ldi	r24, 0x12	; 18
    3e14:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    3e16:	21 e0       	ldi	r18, 0x01	; 1
    3e18:	ae 01       	movw	r20, r28
    3e1a:	4f 5f       	subi	r20, 0xFF	; 255
    3e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1e:	67 e2       	ldi	r22, 0x27	; 39
    3e20:	84 ea       	ldi	r24, 0xA4	; 164
    3e22:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    3e26:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_Z18waitForEEPROMReadyv>
	}
    3e2a:	0f 90       	pop	r0
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	08 95       	ret

00003e32 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	00 d0       	rcall	.+0      	; 0x3e38 <_Z21rv3028_get_offset_RAMv+0x6>
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;
		
		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    3e3c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    3e40:	22 e0       	ldi	r18, 0x02	; 2
    3e42:	ae 01       	movw	r20, r28
    3e44:	4f 5f       	subi	r20, 0xFF	; 255
    3e46:	5f 4f       	sbci	r21, 0xFF	; 255
    3e48:	66 e3       	ldi	r22, 0x36	; 54
    3e4a:	84 ea       	ldi	r24, 0xA4	; 164
    3e4c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	88 0f       	add	r24, r24
    3e56:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    3e58:	2a 81       	ldd	r18, Y+2	; 0x02
    3e5a:	22 23       	and	r18, r18
    3e5c:	0c f4       	brge	.+2      	; 0x3e60 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    3e5e:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	df 91       	pop	r29
    3e66:	cf 91       	pop	r28
    3e68:	08 95       	ret

00003e6a <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    3e6a:	cf 92       	push	r12
    3e6c:	df 92       	push	r13
    3e6e:	ef 92       	push	r14
    3e70:	ff 92       	push	r15
    3e72:	0f 93       	push	r16
    3e74:	1f 93       	push	r17
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
    3e7a:	00 d0       	rcall	.+0      	; 0x3e7c <_Z13rv3028_1s_sqwv+0x12>
    3e7c:	1f 92       	push	r1
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    3e82:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    3e84:	1a 82       	std	Y+2, r1	; 0x02
			
#if INIT_EEPROM_ONLY
/* Ensure that no existing RTC RAM mirror settings differ from what is stored in EEPROM
by reading all EEPROM into the RAM mirror now */
			refreshRAMfromEEPROM();
    3e86:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_Z20refreshRAMfromEEPROMv>
			
			if(waitForEEPROMReady())
    3e8a:	0e 94 55 1e 	call	0x3caa	; 0x3caa <_Z18waitForEEPROMReadyv>
    3e8e:	81 11       	cpse	r24, r1
    3e90:	65 c0       	rjmp	.+202    	; 0x3f5c <_Z13rv3028_1s_sqwv+0xf2>
			{
				return( 1);
			}

			temp = 0xC5;    /* Enable 1Hz Output */
    3e92:	85 ec       	ldi	r24, 0xC5	; 197
    3e94:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t mask = 0xFF;    /* 11111111 */
			if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
    3e96:	45 ec       	ldi	r20, 0xC5	; 197
    3e98:	6f ef       	ldi	r22, 0xFF	; 255
    3e9a:	85 e3       	ldi	r24, 0x35	; 53
    3e9c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <_Z18writeOneEEPROMBytehhh>
    3ea0:	81 11       	cpse	r24, r1
    3ea2:	5e c0       	rjmp	.+188    	; 0x3f60 <_Z13rv3028_1s_sqwv+0xf6>
			{
				return( 1);
			}

			temp = 0x04;    /* Enable direct switching mode */
    3ea4:	84 e0       	ldi	r24, 0x04	; 4
    3ea6:	8a 83       	std	Y+2, r24	; 0x02
			mask = 0x06;    /* 00001100 */
			if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
    3ea8:	44 e0       	ldi	r20, 0x04	; 4
    3eaa:	66 e0       	ldi	r22, 0x06	; 6
    3eac:	87 e3       	ldi	r24, 0x37	; 55
    3eae:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <_Z18writeOneEEPROMBytehhh>
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	57 c0       	rjmp	.+174    	; 0x3f64 <_Z13rv3028_1s_sqwv+0xfa>
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY			
			
			refreshRAMfromEEPROM();
    3eb6:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_Z20refreshRAMfromEEPROMv>
    3eba:	00 e3       	ldi	r16, 0x30	; 48
    3ebc:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t temp_byte;
			uint8_t hold_byte;
			for(temp_byte = 0x30; temp_byte <= 0x37; temp_byte++) 
			{
				i2c_device_read(RV3028_I2C_SLAVE_ADDR, temp_byte, &hold_byte, 1);
				sprintf(g_tempStr, "\n0x%02X = 0x%02X", temp_byte, hold_byte);
    3ebe:	0f 2e       	mov	r0, r31
    3ec0:	f7 e9       	ldi	r31, 0x97	; 151
    3ec2:	cf 2e       	mov	r12, r31
    3ec4:	f2 e0       	ldi	r31, 0x02	; 2
    3ec6:	df 2e       	mov	r13, r31
    3ec8:	f0 2d       	mov	r31, r0
    3eca:	0f 2e       	mov	r0, r31
    3ecc:	f8 e5       	ldi	r31, 0x58	; 88
    3ece:	ef 2e       	mov	r14, r31
    3ed0:	f4 e0       	ldi	r31, 0x04	; 4
    3ed2:	ff 2e       	mov	r15, r31
    3ed4:	f0 2d       	mov	r31, r0
#if INIT_EEPROM_ONLY
			uint8_t temp_byte;
			uint8_t hold_byte;
			for(temp_byte = 0x30; temp_byte <= 0x37; temp_byte++) 
			{
				i2c_device_read(RV3028_I2C_SLAVE_ADDR, temp_byte, &hold_byte, 1);
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	ae 01       	movw	r20, r28
    3eda:	4d 5f       	subi	r20, 0xFD	; 253
    3edc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ede:	60 2f       	mov	r22, r16
    3ee0:	84 ea       	ldi	r24, 0xA4	; 164
    3ee2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_Z15i2c_device_readhhPhh>
				sprintf(g_tempStr, "\n0x%02X = 0x%02X", temp_byte, hold_byte);
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	1f 92       	push	r1
    3eea:	8f 93       	push	r24
    3eec:	1f 93       	push	r17
    3eee:	0f 93       	push	r16
    3ef0:	df 92       	push	r13
    3ef2:	cf 92       	push	r12
    3ef4:	ff 92       	push	r15
    3ef6:	ef 92       	push	r14
    3ef8:	0e 94 2c 23 	call	0x4658	; 0x4658 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3efc:	61 e0       	ldi	r22, 0x01	; 1
    3efe:	c7 01       	movw	r24, r14
    3f00:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z14lb_send_stringPch>
    3f04:	0f 5f       	subi	r16, 0xFF	; 255
    3f06:	1f 4f       	sbci	r17, 0xFF	; 255

/* Debug only */
#if INIT_EEPROM_ONLY
			uint8_t temp_byte;
			uint8_t hold_byte;
			for(temp_byte = 0x30; temp_byte <= 0x37; temp_byte++) 
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	08 33       	cpi	r16, 0x38	; 56
    3f14:	11 05       	cpc	r17, r1
    3f16:	f9 f6       	brne	.-66     	; 0x3ed6 <_Z13rv3028_1s_sqwv+0x6c>
				i2c_device_read(RV3028_I2C_SLAVE_ADDR, temp_byte, &hold_byte, 1);
				sprintf(g_tempStr, "\n0x%02X = 0x%02X", temp_byte, hold_byte);
				lb_send_string(g_tempStr, TRUE);
			}
			
			lb_send_NewLine();
    3f18:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15lb_send_NewLinev>
			lb_send_NewPrompt();
    3f1c:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z17lb_send_NewPromptv>
			
			g_tempStr[0] = '\0';
    3f20:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_tempStr>
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	81 11       	cpse	r24, r1
    3f28:	0c c0       	rjmp	.+24     	; 0x3f42 <_Z13rv3028_1s_sqwv+0xd8>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    3f2a:	21 e0       	ldi	r18, 0x01	; 1
    3f2c:	ae 01       	movw	r20, r28
    3f2e:	4f 5f       	subi	r20, 0xFF	; 255
    3f30:	5f 4f       	sbci	r21, 0xFF	; 255
    3f32:	6e e0       	ldi	r22, 0x0E	; 14
    3f34:	84 ea       	ldi	r24, 0xA4	; 164
    3f36:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	8f 76       	andi	r24, 0x6F	; 111
    3f3e:	89 83       	std	Y+1, r24	; 0x01
    3f40:	02 c0       	rjmp	.+4      	; 0x3f46 <_Z13rv3028_1s_sqwv+0xdc>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    3f42:	80 e8       	ldi	r24, 0x80	; 128
    3f44:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    3f46:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    3f48:	21 e0       	ldi	r18, 0x01	; 1
    3f4a:	ae 01       	movw	r20, r28
    3f4c:	4e 5f       	subi	r20, 0xFE	; 254
    3f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f50:	6e e0       	ldi	r22, 0x0E	; 14
    3f52:	84 ea       	ldi	r24, 0xA4	; 164
    3f54:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>

			return(status);
    3f58:	89 81       	ldd	r24, Y+1	; 0x01
    3f5a:	05 c0       	rjmp	.+10     	; 0x3f66 <_Z13rv3028_1s_sqwv+0xfc>
by reading all EEPROM into the RAM mirror now */
			refreshRAMfromEEPROM();
			
			if(waitForEEPROMReady())
			{
				return( 1);
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	03 c0       	rjmp	.+6      	; 0x3f66 <_Z13rv3028_1s_sqwv+0xfc>

			temp = 0xC5;    /* Enable 1Hz Output */
			uint8_t mask = 0xFF;    /* 11111111 */
			if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
			{
				return( 1);
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	01 c0       	rjmp	.+2      	; 0x3f66 <_Z13rv3028_1s_sqwv+0xfc>

			temp = 0x04;    /* Enable direct switching mode */
			mask = 0x06;    /* 00001100 */
			if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
			{
				return( 1);
    3f64:	81 e0       	ldi	r24, 0x01	; 1

			temp = 0x00;    /* Clear status flags */
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);

			return(status);
		}
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	1f 91       	pop	r17
    3f72:	0f 91       	pop	r16
    3f74:	ff 90       	pop	r15
    3f76:	ef 90       	pop	r14
    3f78:	df 90       	pop	r13
    3f7a:	cf 90       	pop	r12
    3f7c:	08 95       	ret

00003f7e <_Z16rv3028_32kHz_sqwv>:


#endif  /* INIT_EEPROM_ONLY */

	void rv3028_32kHz_sqw(void)
	{
    3f7e:	cf 93       	push	r28
    3f80:	df 93       	push	r29
    3f82:	1f 92       	push	r1
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
		/* Just set RAM value */
		uint8_t byte = 0xC0;    /* FD = 32.768 kHz */
    3f88:	80 ec       	ldi	r24, 0xC0	; 192
    3f8a:	89 83       	std	Y+1, r24	; 0x01

		i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_CLKOUT, &byte, 1);
    3f8c:	21 e0       	ldi	r18, 0x01	; 1
    3f8e:	ae 01       	movw	r20, r28
    3f90:	4f 5f       	subi	r20, 0xFF	; 255
    3f92:	5f 4f       	sbci	r21, 0xFF	; 255
    3f94:	65 e3       	ldi	r22, 0x35	; 53
    3f96:	84 ea       	ldi	r24, 0xA4	; 164
    3f98:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z16i2c_device_writehhPhh>
	}
    3f9c:	0f 90       	pop	r0
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	08 95       	ret

00003fa4 <__subsf3>:
    3fa4:	50 58       	subi	r21, 0x80	; 128

00003fa6 <__addsf3>:
    3fa6:	bb 27       	eor	r27, r27
    3fa8:	aa 27       	eor	r26, r26
    3faa:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <__addsf3x>
    3fae:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__fp_round>
    3fb2:	0e 94 b4 20 	call	0x4168	; 0x4168 <__fp_pscA>
    3fb6:	38 f0       	brcs	.+14     	; 0x3fc6 <__addsf3+0x20>
    3fb8:	0e 94 bb 20 	call	0x4176	; 0x4176 <__fp_pscB>
    3fbc:	20 f0       	brcs	.+8      	; 0x3fc6 <__addsf3+0x20>
    3fbe:	39 f4       	brne	.+14     	; 0x3fce <__addsf3+0x28>
    3fc0:	9f 3f       	cpi	r25, 0xFF	; 255
    3fc2:	19 f4       	brne	.+6      	; 0x3fca <__addsf3+0x24>
    3fc4:	26 f4       	brtc	.+8      	; 0x3fce <__addsf3+0x28>
    3fc6:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__fp_nan>
    3fca:	0e f4       	brtc	.+2      	; 0x3fce <__addsf3+0x28>
    3fcc:	e0 95       	com	r30
    3fce:	e7 fb       	bst	r30, 7
    3fd0:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__fp_inf>

00003fd4 <__addsf3x>:
    3fd4:	e9 2f       	mov	r30, r25
    3fd6:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fp_split3>
    3fda:	58 f3       	brcs	.-42     	; 0x3fb2 <__addsf3+0xc>
    3fdc:	ba 17       	cp	r27, r26
    3fde:	62 07       	cpc	r22, r18
    3fe0:	73 07       	cpc	r23, r19
    3fe2:	84 07       	cpc	r24, r20
    3fe4:	95 07       	cpc	r25, r21
    3fe6:	20 f0       	brcs	.+8      	; 0x3ff0 <__addsf3x+0x1c>
    3fe8:	79 f4       	brne	.+30     	; 0x4008 <__addsf3x+0x34>
    3fea:	a6 f5       	brtc	.+104    	; 0x4054 <__addsf3x+0x80>
    3fec:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__fp_zero>
    3ff0:	0e f4       	brtc	.+2      	; 0x3ff4 <__addsf3x+0x20>
    3ff2:	e0 95       	com	r30
    3ff4:	0b 2e       	mov	r0, r27
    3ff6:	ba 2f       	mov	r27, r26
    3ff8:	a0 2d       	mov	r26, r0
    3ffa:	0b 01       	movw	r0, r22
    3ffc:	b9 01       	movw	r22, r18
    3ffe:	90 01       	movw	r18, r0
    4000:	0c 01       	movw	r0, r24
    4002:	ca 01       	movw	r24, r20
    4004:	a0 01       	movw	r20, r0
    4006:	11 24       	eor	r1, r1
    4008:	ff 27       	eor	r31, r31
    400a:	59 1b       	sub	r21, r25
    400c:	99 f0       	breq	.+38     	; 0x4034 <__addsf3x+0x60>
    400e:	59 3f       	cpi	r21, 0xF9	; 249
    4010:	50 f4       	brcc	.+20     	; 0x4026 <__addsf3x+0x52>
    4012:	50 3e       	cpi	r21, 0xE0	; 224
    4014:	68 f1       	brcs	.+90     	; 0x4070 <__addsf3x+0x9c>
    4016:	1a 16       	cp	r1, r26
    4018:	f0 40       	sbci	r31, 0x00	; 0
    401a:	a2 2f       	mov	r26, r18
    401c:	23 2f       	mov	r18, r19
    401e:	34 2f       	mov	r19, r20
    4020:	44 27       	eor	r20, r20
    4022:	58 5f       	subi	r21, 0xF8	; 248
    4024:	f3 cf       	rjmp	.-26     	; 0x400c <__addsf3x+0x38>
    4026:	46 95       	lsr	r20
    4028:	37 95       	ror	r19
    402a:	27 95       	ror	r18
    402c:	a7 95       	ror	r26
    402e:	f0 40       	sbci	r31, 0x00	; 0
    4030:	53 95       	inc	r21
    4032:	c9 f7       	brne	.-14     	; 0x4026 <__addsf3x+0x52>
    4034:	7e f4       	brtc	.+30     	; 0x4054 <__addsf3x+0x80>
    4036:	1f 16       	cp	r1, r31
    4038:	ba 0b       	sbc	r27, r26
    403a:	62 0b       	sbc	r22, r18
    403c:	73 0b       	sbc	r23, r19
    403e:	84 0b       	sbc	r24, r20
    4040:	ba f0       	brmi	.+46     	; 0x4070 <__addsf3x+0x9c>
    4042:	91 50       	subi	r25, 0x01	; 1
    4044:	a1 f0       	breq	.+40     	; 0x406e <__addsf3x+0x9a>
    4046:	ff 0f       	add	r31, r31
    4048:	bb 1f       	adc	r27, r27
    404a:	66 1f       	adc	r22, r22
    404c:	77 1f       	adc	r23, r23
    404e:	88 1f       	adc	r24, r24
    4050:	c2 f7       	brpl	.-16     	; 0x4042 <__addsf3x+0x6e>
    4052:	0e c0       	rjmp	.+28     	; 0x4070 <__addsf3x+0x9c>
    4054:	ba 0f       	add	r27, r26
    4056:	62 1f       	adc	r22, r18
    4058:	73 1f       	adc	r23, r19
    405a:	84 1f       	adc	r24, r20
    405c:	48 f4       	brcc	.+18     	; 0x4070 <__addsf3x+0x9c>
    405e:	87 95       	ror	r24
    4060:	77 95       	ror	r23
    4062:	67 95       	ror	r22
    4064:	b7 95       	ror	r27
    4066:	f7 95       	ror	r31
    4068:	9e 3f       	cpi	r25, 0xFE	; 254
    406a:	08 f0       	brcs	.+2      	; 0x406e <__addsf3x+0x9a>
    406c:	b0 cf       	rjmp	.-160    	; 0x3fce <__addsf3+0x28>
    406e:	93 95       	inc	r25
    4070:	88 0f       	add	r24, r24
    4072:	08 f0       	brcs	.+2      	; 0x4076 <__addsf3x+0xa2>
    4074:	99 27       	eor	r25, r25
    4076:	ee 0f       	add	r30, r30
    4078:	97 95       	ror	r25
    407a:	87 95       	ror	r24
    407c:	08 95       	ret

0000407e <__fixunssfsi>:
    407e:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__fp_splitA>
    4082:	88 f0       	brcs	.+34     	; 0x40a6 <__fixunssfsi+0x28>
    4084:	9f 57       	subi	r25, 0x7F	; 127
    4086:	98 f0       	brcs	.+38     	; 0x40ae <__fixunssfsi+0x30>
    4088:	b9 2f       	mov	r27, r25
    408a:	99 27       	eor	r25, r25
    408c:	b7 51       	subi	r27, 0x17	; 23
    408e:	b0 f0       	brcs	.+44     	; 0x40bc <__fixunssfsi+0x3e>
    4090:	e1 f0       	breq	.+56     	; 0x40ca <__fixunssfsi+0x4c>
    4092:	66 0f       	add	r22, r22
    4094:	77 1f       	adc	r23, r23
    4096:	88 1f       	adc	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	1a f0       	brmi	.+6      	; 0x40a2 <__fixunssfsi+0x24>
    409c:	ba 95       	dec	r27
    409e:	c9 f7       	brne	.-14     	; 0x4092 <__fixunssfsi+0x14>
    40a0:	14 c0       	rjmp	.+40     	; 0x40ca <__fixunssfsi+0x4c>
    40a2:	b1 30       	cpi	r27, 0x01	; 1
    40a4:	91 f0       	breq	.+36     	; 0x40ca <__fixunssfsi+0x4c>
    40a6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__fp_zero>
    40aa:	b1 e0       	ldi	r27, 0x01	; 1
    40ac:	08 95       	ret
    40ae:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__fp_zero>
    40b2:	67 2f       	mov	r22, r23
    40b4:	78 2f       	mov	r23, r24
    40b6:	88 27       	eor	r24, r24
    40b8:	b8 5f       	subi	r27, 0xF8	; 248
    40ba:	39 f0       	breq	.+14     	; 0x40ca <__fixunssfsi+0x4c>
    40bc:	b9 3f       	cpi	r27, 0xF9	; 249
    40be:	cc f3       	brlt	.-14     	; 0x40b2 <__fixunssfsi+0x34>
    40c0:	86 95       	lsr	r24
    40c2:	77 95       	ror	r23
    40c4:	67 95       	ror	r22
    40c6:	b3 95       	inc	r27
    40c8:	d9 f7       	brne	.-10     	; 0x40c0 <__fixunssfsi+0x42>
    40ca:	3e f4       	brtc	.+14     	; 0x40da <__fixunssfsi+0x5c>
    40cc:	90 95       	com	r25
    40ce:	80 95       	com	r24
    40d0:	70 95       	com	r23
    40d2:	61 95       	neg	r22
    40d4:	7f 4f       	sbci	r23, 0xFF	; 255
    40d6:	8f 4f       	sbci	r24, 0xFF	; 255
    40d8:	9f 4f       	sbci	r25, 0xFF	; 255
    40da:	08 95       	ret

000040dc <__floatunsisf>:
    40dc:	e8 94       	clt
    40de:	09 c0       	rjmp	.+18     	; 0x40f2 <__floatsisf+0x12>

000040e0 <__floatsisf>:
    40e0:	97 fb       	bst	r25, 7
    40e2:	3e f4       	brtc	.+14     	; 0x40f2 <__floatsisf+0x12>
    40e4:	90 95       	com	r25
    40e6:	80 95       	com	r24
    40e8:	70 95       	com	r23
    40ea:	61 95       	neg	r22
    40ec:	7f 4f       	sbci	r23, 0xFF	; 255
    40ee:	8f 4f       	sbci	r24, 0xFF	; 255
    40f0:	9f 4f       	sbci	r25, 0xFF	; 255
    40f2:	99 23       	and	r25, r25
    40f4:	a9 f0       	breq	.+42     	; 0x4120 <__floatsisf+0x40>
    40f6:	f9 2f       	mov	r31, r25
    40f8:	96 e9       	ldi	r25, 0x96	; 150
    40fa:	bb 27       	eor	r27, r27
    40fc:	93 95       	inc	r25
    40fe:	f6 95       	lsr	r31
    4100:	87 95       	ror	r24
    4102:	77 95       	ror	r23
    4104:	67 95       	ror	r22
    4106:	b7 95       	ror	r27
    4108:	f1 11       	cpse	r31, r1
    410a:	f8 cf       	rjmp	.-16     	; 0x40fc <__floatsisf+0x1c>
    410c:	fa f4       	brpl	.+62     	; 0x414c <__floatsisf+0x6c>
    410e:	bb 0f       	add	r27, r27
    4110:	11 f4       	brne	.+4      	; 0x4116 <__floatsisf+0x36>
    4112:	60 ff       	sbrs	r22, 0
    4114:	1b c0       	rjmp	.+54     	; 0x414c <__floatsisf+0x6c>
    4116:	6f 5f       	subi	r22, 0xFF	; 255
    4118:	7f 4f       	sbci	r23, 0xFF	; 255
    411a:	8f 4f       	sbci	r24, 0xFF	; 255
    411c:	9f 4f       	sbci	r25, 0xFF	; 255
    411e:	16 c0       	rjmp	.+44     	; 0x414c <__floatsisf+0x6c>
    4120:	88 23       	and	r24, r24
    4122:	11 f0       	breq	.+4      	; 0x4128 <__floatsisf+0x48>
    4124:	96 e9       	ldi	r25, 0x96	; 150
    4126:	11 c0       	rjmp	.+34     	; 0x414a <__floatsisf+0x6a>
    4128:	77 23       	and	r23, r23
    412a:	21 f0       	breq	.+8      	; 0x4134 <__floatsisf+0x54>
    412c:	9e e8       	ldi	r25, 0x8E	; 142
    412e:	87 2f       	mov	r24, r23
    4130:	76 2f       	mov	r23, r22
    4132:	05 c0       	rjmp	.+10     	; 0x413e <__floatsisf+0x5e>
    4134:	66 23       	and	r22, r22
    4136:	71 f0       	breq	.+28     	; 0x4154 <__floatsisf+0x74>
    4138:	96 e8       	ldi	r25, 0x86	; 134
    413a:	86 2f       	mov	r24, r22
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	2a f0       	brmi	.+10     	; 0x414c <__floatsisf+0x6c>
    4142:	9a 95       	dec	r25
    4144:	66 0f       	add	r22, r22
    4146:	77 1f       	adc	r23, r23
    4148:	88 1f       	adc	r24, r24
    414a:	da f7       	brpl	.-10     	; 0x4142 <__floatsisf+0x62>
    414c:	88 0f       	add	r24, r24
    414e:	96 95       	lsr	r25
    4150:	87 95       	ror	r24
    4152:	97 f9       	bld	r25, 7
    4154:	08 95       	ret

00004156 <__fp_inf>:
    4156:	97 f9       	bld	r25, 7
    4158:	9f 67       	ori	r25, 0x7F	; 127
    415a:	80 e8       	ldi	r24, 0x80	; 128
    415c:	70 e0       	ldi	r23, 0x00	; 0
    415e:	60 e0       	ldi	r22, 0x00	; 0
    4160:	08 95       	ret

00004162 <__fp_nan>:
    4162:	9f ef       	ldi	r25, 0xFF	; 255
    4164:	80 ec       	ldi	r24, 0xC0	; 192
    4166:	08 95       	ret

00004168 <__fp_pscA>:
    4168:	00 24       	eor	r0, r0
    416a:	0a 94       	dec	r0
    416c:	16 16       	cp	r1, r22
    416e:	17 06       	cpc	r1, r23
    4170:	18 06       	cpc	r1, r24
    4172:	09 06       	cpc	r0, r25
    4174:	08 95       	ret

00004176 <__fp_pscB>:
    4176:	00 24       	eor	r0, r0
    4178:	0a 94       	dec	r0
    417a:	12 16       	cp	r1, r18
    417c:	13 06       	cpc	r1, r19
    417e:	14 06       	cpc	r1, r20
    4180:	05 06       	cpc	r0, r21
    4182:	08 95       	ret

00004184 <__fp_round>:
    4184:	09 2e       	mov	r0, r25
    4186:	03 94       	inc	r0
    4188:	00 0c       	add	r0, r0
    418a:	11 f4       	brne	.+4      	; 0x4190 <__fp_round+0xc>
    418c:	88 23       	and	r24, r24
    418e:	52 f0       	brmi	.+20     	; 0x41a4 <__fp_round+0x20>
    4190:	bb 0f       	add	r27, r27
    4192:	40 f4       	brcc	.+16     	; 0x41a4 <__fp_round+0x20>
    4194:	bf 2b       	or	r27, r31
    4196:	11 f4       	brne	.+4      	; 0x419c <__fp_round+0x18>
    4198:	60 ff       	sbrs	r22, 0
    419a:	04 c0       	rjmp	.+8      	; 0x41a4 <__fp_round+0x20>
    419c:	6f 5f       	subi	r22, 0xFF	; 255
    419e:	7f 4f       	sbci	r23, 0xFF	; 255
    41a0:	8f 4f       	sbci	r24, 0xFF	; 255
    41a2:	9f 4f       	sbci	r25, 0xFF	; 255
    41a4:	08 95       	ret

000041a6 <__fp_split3>:
    41a6:	57 fd       	sbrc	r21, 7
    41a8:	90 58       	subi	r25, 0x80	; 128
    41aa:	44 0f       	add	r20, r20
    41ac:	55 1f       	adc	r21, r21
    41ae:	59 f0       	breq	.+22     	; 0x41c6 <__fp_splitA+0x10>
    41b0:	5f 3f       	cpi	r21, 0xFF	; 255
    41b2:	71 f0       	breq	.+28     	; 0x41d0 <__fp_splitA+0x1a>
    41b4:	47 95       	ror	r20

000041b6 <__fp_splitA>:
    41b6:	88 0f       	add	r24, r24
    41b8:	97 fb       	bst	r25, 7
    41ba:	99 1f       	adc	r25, r25
    41bc:	61 f0       	breq	.+24     	; 0x41d6 <__fp_splitA+0x20>
    41be:	9f 3f       	cpi	r25, 0xFF	; 255
    41c0:	79 f0       	breq	.+30     	; 0x41e0 <__fp_splitA+0x2a>
    41c2:	87 95       	ror	r24
    41c4:	08 95       	ret
    41c6:	12 16       	cp	r1, r18
    41c8:	13 06       	cpc	r1, r19
    41ca:	14 06       	cpc	r1, r20
    41cc:	55 1f       	adc	r21, r21
    41ce:	f2 cf       	rjmp	.-28     	; 0x41b4 <__fp_split3+0xe>
    41d0:	46 95       	lsr	r20
    41d2:	f1 df       	rcall	.-30     	; 0x41b6 <__fp_splitA>
    41d4:	08 c0       	rjmp	.+16     	; 0x41e6 <__fp_splitA+0x30>
    41d6:	16 16       	cp	r1, r22
    41d8:	17 06       	cpc	r1, r23
    41da:	18 06       	cpc	r1, r24
    41dc:	99 1f       	adc	r25, r25
    41de:	f1 cf       	rjmp	.-30     	; 0x41c2 <__fp_splitA+0xc>
    41e0:	86 95       	lsr	r24
    41e2:	71 05       	cpc	r23, r1
    41e4:	61 05       	cpc	r22, r1
    41e6:	08 94       	sec
    41e8:	08 95       	ret

000041ea <__fp_zero>:
    41ea:	e8 94       	clt

000041ec <__fp_szero>:
    41ec:	bb 27       	eor	r27, r27
    41ee:	66 27       	eor	r22, r22
    41f0:	77 27       	eor	r23, r23
    41f2:	cb 01       	movw	r24, r22
    41f4:	97 f9       	bld	r25, 7
    41f6:	08 95       	ret

000041f8 <__mulsf3>:
    41f8:	0e 94 0f 21 	call	0x421e	; 0x421e <__mulsf3x>
    41fc:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__fp_round>
    4200:	0e 94 b4 20 	call	0x4168	; 0x4168 <__fp_pscA>
    4204:	38 f0       	brcs	.+14     	; 0x4214 <__mulsf3+0x1c>
    4206:	0e 94 bb 20 	call	0x4176	; 0x4176 <__fp_pscB>
    420a:	20 f0       	brcs	.+8      	; 0x4214 <__mulsf3+0x1c>
    420c:	95 23       	and	r25, r21
    420e:	11 f0       	breq	.+4      	; 0x4214 <__mulsf3+0x1c>
    4210:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__fp_inf>
    4214:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__fp_nan>
    4218:	11 24       	eor	r1, r1
    421a:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__fp_szero>

0000421e <__mulsf3x>:
    421e:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__fp_split3>
    4222:	70 f3       	brcs	.-36     	; 0x4200 <__mulsf3+0x8>

00004224 <__mulsf3_pse>:
    4224:	95 9f       	mul	r25, r21
    4226:	c1 f3       	breq	.-16     	; 0x4218 <__mulsf3+0x20>
    4228:	95 0f       	add	r25, r21
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	55 1f       	adc	r21, r21
    422e:	62 9f       	mul	r22, r18
    4230:	f0 01       	movw	r30, r0
    4232:	72 9f       	mul	r23, r18
    4234:	bb 27       	eor	r27, r27
    4236:	f0 0d       	add	r31, r0
    4238:	b1 1d       	adc	r27, r1
    423a:	63 9f       	mul	r22, r19
    423c:	aa 27       	eor	r26, r26
    423e:	f0 0d       	add	r31, r0
    4240:	b1 1d       	adc	r27, r1
    4242:	aa 1f       	adc	r26, r26
    4244:	64 9f       	mul	r22, r20
    4246:	66 27       	eor	r22, r22
    4248:	b0 0d       	add	r27, r0
    424a:	a1 1d       	adc	r26, r1
    424c:	66 1f       	adc	r22, r22
    424e:	82 9f       	mul	r24, r18
    4250:	22 27       	eor	r18, r18
    4252:	b0 0d       	add	r27, r0
    4254:	a1 1d       	adc	r26, r1
    4256:	62 1f       	adc	r22, r18
    4258:	73 9f       	mul	r23, r19
    425a:	b0 0d       	add	r27, r0
    425c:	a1 1d       	adc	r26, r1
    425e:	62 1f       	adc	r22, r18
    4260:	83 9f       	mul	r24, r19
    4262:	a0 0d       	add	r26, r0
    4264:	61 1d       	adc	r22, r1
    4266:	22 1f       	adc	r18, r18
    4268:	74 9f       	mul	r23, r20
    426a:	33 27       	eor	r19, r19
    426c:	a0 0d       	add	r26, r0
    426e:	61 1d       	adc	r22, r1
    4270:	23 1f       	adc	r18, r19
    4272:	84 9f       	mul	r24, r20
    4274:	60 0d       	add	r22, r0
    4276:	21 1d       	adc	r18, r1
    4278:	82 2f       	mov	r24, r18
    427a:	76 2f       	mov	r23, r22
    427c:	6a 2f       	mov	r22, r26
    427e:	11 24       	eor	r1, r1
    4280:	9f 57       	subi	r25, 0x7F	; 127
    4282:	50 40       	sbci	r21, 0x00	; 0
    4284:	9a f0       	brmi	.+38     	; 0x42ac <__mulsf3_pse+0x88>
    4286:	f1 f0       	breq	.+60     	; 0x42c4 <__mulsf3_pse+0xa0>
    4288:	88 23       	and	r24, r24
    428a:	4a f0       	brmi	.+18     	; 0x429e <__mulsf3_pse+0x7a>
    428c:	ee 0f       	add	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	bb 1f       	adc	r27, r27
    4292:	66 1f       	adc	r22, r22
    4294:	77 1f       	adc	r23, r23
    4296:	88 1f       	adc	r24, r24
    4298:	91 50       	subi	r25, 0x01	; 1
    429a:	50 40       	sbci	r21, 0x00	; 0
    429c:	a9 f7       	brne	.-22     	; 0x4288 <__mulsf3_pse+0x64>
    429e:	9e 3f       	cpi	r25, 0xFE	; 254
    42a0:	51 05       	cpc	r21, r1
    42a2:	80 f0       	brcs	.+32     	; 0x42c4 <__mulsf3_pse+0xa0>
    42a4:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__fp_inf>
    42a8:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__fp_szero>
    42ac:	5f 3f       	cpi	r21, 0xFF	; 255
    42ae:	e4 f3       	brlt	.-8      	; 0x42a8 <__mulsf3_pse+0x84>
    42b0:	98 3e       	cpi	r25, 0xE8	; 232
    42b2:	d4 f3       	brlt	.-12     	; 0x42a8 <__mulsf3_pse+0x84>
    42b4:	86 95       	lsr	r24
    42b6:	77 95       	ror	r23
    42b8:	67 95       	ror	r22
    42ba:	b7 95       	ror	r27
    42bc:	f7 95       	ror	r31
    42be:	e7 95       	ror	r30
    42c0:	9f 5f       	subi	r25, 0xFF	; 255
    42c2:	c1 f7       	brne	.-16     	; 0x42b4 <__mulsf3_pse+0x90>
    42c4:	fe 2b       	or	r31, r30
    42c6:	88 0f       	add	r24, r24
    42c8:	91 1d       	adc	r25, r1
    42ca:	96 95       	lsr	r25
    42cc:	87 95       	ror	r24
    42ce:	97 f9       	bld	r25, 7
    42d0:	08 95       	ret

000042d2 <sin>:
    42d2:	9f 93       	push	r25
    42d4:	0e 94 81 21 	call	0x4302	; 0x4302 <__fp_rempio2>
    42d8:	0f 90       	pop	r0
    42da:	07 fc       	sbrc	r0, 7
    42dc:	ee 5f       	subi	r30, 0xFE	; 254
    42de:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__fp_sinus>

000042e2 <__fp_mpack>:
    42e2:	9f 3f       	cpi	r25, 0xFF	; 255
    42e4:	31 f0       	breq	.+12     	; 0x42f2 <__fp_mpack_finite+0xc>

000042e6 <__fp_mpack_finite>:
    42e6:	91 50       	subi	r25, 0x01	; 1
    42e8:	20 f4       	brcc	.+8      	; 0x42f2 <__fp_mpack_finite+0xc>
    42ea:	87 95       	ror	r24
    42ec:	77 95       	ror	r23
    42ee:	67 95       	ror	r22
    42f0:	b7 95       	ror	r27
    42f2:	88 0f       	add	r24, r24
    42f4:	91 1d       	adc	r25, r1
    42f6:	96 95       	lsr	r25
    42f8:	87 95       	ror	r24
    42fa:	97 f9       	bld	r25, 7
    42fc:	08 95       	ret
    42fe:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__fp_nan>

00004302 <__fp_rempio2>:
    4302:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__fp_splitA>
    4306:	d8 f3       	brcs	.-10     	; 0x42fe <__fp_mpack_finite+0x18>
    4308:	e8 94       	clt
    430a:	e0 e0       	ldi	r30, 0x00	; 0
    430c:	bb 27       	eor	r27, r27
    430e:	9f 57       	subi	r25, 0x7F	; 127
    4310:	f0 f0       	brcs	.+60     	; 0x434e <__fp_rempio2+0x4c>
    4312:	2a ed       	ldi	r18, 0xDA	; 218
    4314:	3f e0       	ldi	r19, 0x0F	; 15
    4316:	49 ec       	ldi	r20, 0xC9	; 201
    4318:	06 c0       	rjmp	.+12     	; 0x4326 <__fp_rempio2+0x24>
    431a:	ee 0f       	add	r30, r30
    431c:	bb 0f       	add	r27, r27
    431e:	66 1f       	adc	r22, r22
    4320:	77 1f       	adc	r23, r23
    4322:	88 1f       	adc	r24, r24
    4324:	28 f0       	brcs	.+10     	; 0x4330 <__fp_rempio2+0x2e>
    4326:	b2 3a       	cpi	r27, 0xA2	; 162
    4328:	62 07       	cpc	r22, r18
    432a:	73 07       	cpc	r23, r19
    432c:	84 07       	cpc	r24, r20
    432e:	28 f0       	brcs	.+10     	; 0x433a <__fp_rempio2+0x38>
    4330:	b2 5a       	subi	r27, 0xA2	; 162
    4332:	62 0b       	sbc	r22, r18
    4334:	73 0b       	sbc	r23, r19
    4336:	84 0b       	sbc	r24, r20
    4338:	e3 95       	inc	r30
    433a:	9a 95       	dec	r25
    433c:	72 f7       	brpl	.-36     	; 0x431a <__fp_rempio2+0x18>
    433e:	80 38       	cpi	r24, 0x80	; 128
    4340:	30 f4       	brcc	.+12     	; 0x434e <__fp_rempio2+0x4c>
    4342:	9a 95       	dec	r25
    4344:	bb 0f       	add	r27, r27
    4346:	66 1f       	adc	r22, r22
    4348:	77 1f       	adc	r23, r23
    434a:	88 1f       	adc	r24, r24
    434c:	d2 f7       	brpl	.-12     	; 0x4342 <__fp_rempio2+0x40>
    434e:	90 48       	sbci	r25, 0x80	; 128
    4350:	0c 94 73 21 	jmp	0x42e6	; 0x42e6 <__fp_mpack_finite>

00004354 <__fp_sinus>:
    4354:	ef 93       	push	r30
    4356:	e0 ff       	sbrs	r30, 0
    4358:	07 c0       	rjmp	.+14     	; 0x4368 <__fp_sinus+0x14>
    435a:	a2 ea       	ldi	r26, 0xA2	; 162
    435c:	2a ed       	ldi	r18, 0xDA	; 218
    435e:	3f e0       	ldi	r19, 0x0F	; 15
    4360:	49 ec       	ldi	r20, 0xC9	; 201
    4362:	5f eb       	ldi	r21, 0xBF	; 191
    4364:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <__addsf3x>
    4368:	0e 94 c2 20 	call	0x4184	; 0x4184 <__fp_round>
    436c:	0f 90       	pop	r0
    436e:	03 94       	inc	r0
    4370:	01 fc       	sbrc	r0, 1
    4372:	90 58       	subi	r25, 0x80	; 128
    4374:	e0 eb       	ldi	r30, 0xB0	; 176
    4376:	f1 e0       	ldi	r31, 0x01	; 1
    4378:	0c 94 be 21 	jmp	0x437c	; 0x437c <__fp_powsodd>

0000437c <__fp_powsodd>:
    437c:	9f 93       	push	r25
    437e:	8f 93       	push	r24
    4380:	7f 93       	push	r23
    4382:	6f 93       	push	r22
    4384:	ff 93       	push	r31
    4386:	ef 93       	push	r30
    4388:	9b 01       	movw	r18, r22
    438a:	ac 01       	movw	r20, r24
    438c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__mulsf3>
    4390:	ef 91       	pop	r30
    4392:	ff 91       	pop	r31
    4394:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__fp_powser>
    4398:	2f 91       	pop	r18
    439a:	3f 91       	pop	r19
    439c:	4f 91       	pop	r20
    439e:	5f 91       	pop	r21
    43a0:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__mulsf3>

000043a4 <__fp_powser>:
    43a4:	df 93       	push	r29
    43a6:	cf 93       	push	r28
    43a8:	1f 93       	push	r17
    43aa:	0f 93       	push	r16
    43ac:	ff 92       	push	r15
    43ae:	ef 92       	push	r14
    43b0:	df 92       	push	r13
    43b2:	7b 01       	movw	r14, r22
    43b4:	8c 01       	movw	r16, r24
    43b6:	68 94       	set
    43b8:	06 c0       	rjmp	.+12     	; 0x43c6 <__fp_powser+0x22>
    43ba:	da 2e       	mov	r13, r26
    43bc:	ef 01       	movw	r28, r30
    43be:	0e 94 0f 21 	call	0x421e	; 0x421e <__mulsf3x>
    43c2:	fe 01       	movw	r30, r28
    43c4:	e8 94       	clt
    43c6:	a5 91       	lpm	r26, Z+
    43c8:	25 91       	lpm	r18, Z+
    43ca:	35 91       	lpm	r19, Z+
    43cc:	45 91       	lpm	r20, Z+
    43ce:	55 91       	lpm	r21, Z+
    43d0:	a6 f3       	brts	.-24     	; 0x43ba <__fp_powser+0x16>
    43d2:	ef 01       	movw	r28, r30
    43d4:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <__addsf3x>
    43d8:	fe 01       	movw	r30, r28
    43da:	97 01       	movw	r18, r14
    43dc:	a8 01       	movw	r20, r16
    43de:	da 94       	dec	r13
    43e0:	69 f7       	brne	.-38     	; 0x43bc <__fp_powser+0x18>
    43e2:	df 90       	pop	r13
    43e4:	ef 90       	pop	r14
    43e6:	ff 90       	pop	r15
    43e8:	0f 91       	pop	r16
    43ea:	1f 91       	pop	r17
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <__mulsi3>:
    43f2:	db 01       	movw	r26, r22
    43f4:	8f 93       	push	r24
    43f6:	9f 93       	push	r25
    43f8:	0e 94 8e 22 	call	0x451c	; 0x451c <__muluhisi3>
    43fc:	bf 91       	pop	r27
    43fe:	af 91       	pop	r26
    4400:	a2 9f       	mul	r26, r18
    4402:	80 0d       	add	r24, r0
    4404:	91 1d       	adc	r25, r1
    4406:	a3 9f       	mul	r26, r19
    4408:	90 0d       	add	r25, r0
    440a:	b2 9f       	mul	r27, r18
    440c:	90 0d       	add	r25, r0
    440e:	11 24       	eor	r1, r1
    4410:	08 95       	ret

00004412 <__udivmodhi4>:
    4412:	aa 1b       	sub	r26, r26
    4414:	bb 1b       	sub	r27, r27
    4416:	51 e1       	ldi	r21, 0x11	; 17
    4418:	07 c0       	rjmp	.+14     	; 0x4428 <__udivmodhi4_ep>

0000441a <__udivmodhi4_loop>:
    441a:	aa 1f       	adc	r26, r26
    441c:	bb 1f       	adc	r27, r27
    441e:	a6 17       	cp	r26, r22
    4420:	b7 07       	cpc	r27, r23
    4422:	10 f0       	brcs	.+4      	; 0x4428 <__udivmodhi4_ep>
    4424:	a6 1b       	sub	r26, r22
    4426:	b7 0b       	sbc	r27, r23

00004428 <__udivmodhi4_ep>:
    4428:	88 1f       	adc	r24, r24
    442a:	99 1f       	adc	r25, r25
    442c:	5a 95       	dec	r21
    442e:	a9 f7       	brne	.-22     	; 0x441a <__udivmodhi4_loop>
    4430:	80 95       	com	r24
    4432:	90 95       	com	r25
    4434:	bc 01       	movw	r22, r24
    4436:	cd 01       	movw	r24, r26
    4438:	08 95       	ret

0000443a <__divmodhi4>:
    443a:	97 fb       	bst	r25, 7
    443c:	07 2e       	mov	r0, r23
    443e:	16 f4       	brtc	.+4      	; 0x4444 <__divmodhi4+0xa>
    4440:	00 94       	com	r0
    4442:	07 d0       	rcall	.+14     	; 0x4452 <__divmodhi4_neg1>
    4444:	77 fd       	sbrc	r23, 7
    4446:	09 d0       	rcall	.+18     	; 0x445a <__divmodhi4_neg2>
    4448:	0e 94 09 22 	call	0x4412	; 0x4412 <__udivmodhi4>
    444c:	07 fc       	sbrc	r0, 7
    444e:	05 d0       	rcall	.+10     	; 0x445a <__divmodhi4_neg2>
    4450:	3e f4       	brtc	.+14     	; 0x4460 <__divmodhi4_exit>

00004452 <__divmodhi4_neg1>:
    4452:	90 95       	com	r25
    4454:	81 95       	neg	r24
    4456:	9f 4f       	sbci	r25, 0xFF	; 255
    4458:	08 95       	ret

0000445a <__divmodhi4_neg2>:
    445a:	70 95       	com	r23
    445c:	61 95       	neg	r22
    445e:	7f 4f       	sbci	r23, 0xFF	; 255

00004460 <__divmodhi4_exit>:
    4460:	08 95       	ret

00004462 <__udivmodsi4>:
    4462:	a1 e2       	ldi	r26, 0x21	; 33
    4464:	1a 2e       	mov	r1, r26
    4466:	aa 1b       	sub	r26, r26
    4468:	bb 1b       	sub	r27, r27
    446a:	fd 01       	movw	r30, r26
    446c:	0d c0       	rjmp	.+26     	; 0x4488 <__udivmodsi4_ep>

0000446e <__udivmodsi4_loop>:
    446e:	aa 1f       	adc	r26, r26
    4470:	bb 1f       	adc	r27, r27
    4472:	ee 1f       	adc	r30, r30
    4474:	ff 1f       	adc	r31, r31
    4476:	a2 17       	cp	r26, r18
    4478:	b3 07       	cpc	r27, r19
    447a:	e4 07       	cpc	r30, r20
    447c:	f5 07       	cpc	r31, r21
    447e:	20 f0       	brcs	.+8      	; 0x4488 <__udivmodsi4_ep>
    4480:	a2 1b       	sub	r26, r18
    4482:	b3 0b       	sbc	r27, r19
    4484:	e4 0b       	sbc	r30, r20
    4486:	f5 0b       	sbc	r31, r21

00004488 <__udivmodsi4_ep>:
    4488:	66 1f       	adc	r22, r22
    448a:	77 1f       	adc	r23, r23
    448c:	88 1f       	adc	r24, r24
    448e:	99 1f       	adc	r25, r25
    4490:	1a 94       	dec	r1
    4492:	69 f7       	brne	.-38     	; 0x446e <__udivmodsi4_loop>
    4494:	60 95       	com	r22
    4496:	70 95       	com	r23
    4498:	80 95       	com	r24
    449a:	90 95       	com	r25
    449c:	9b 01       	movw	r18, r22
    449e:	ac 01       	movw	r20, r24
    44a0:	bd 01       	movw	r22, r26
    44a2:	cf 01       	movw	r24, r30
    44a4:	08 95       	ret

000044a6 <__divmodsi4>:
    44a6:	05 2e       	mov	r0, r21
    44a8:	97 fb       	bst	r25, 7
    44aa:	1e f4       	brtc	.+6      	; 0x44b2 <__divmodsi4+0xc>
    44ac:	00 94       	com	r0
    44ae:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__negsi2>
    44b2:	57 fd       	sbrc	r21, 7
    44b4:	07 d0       	rcall	.+14     	; 0x44c4 <__divmodsi4_neg2>
    44b6:	0e 94 31 22 	call	0x4462	; 0x4462 <__udivmodsi4>
    44ba:	07 fc       	sbrc	r0, 7
    44bc:	03 d0       	rcall	.+6      	; 0x44c4 <__divmodsi4_neg2>
    44be:	4e f4       	brtc	.+18     	; 0x44d2 <__divmodsi4_exit>
    44c0:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__negsi2>

000044c4 <__divmodsi4_neg2>:
    44c4:	50 95       	com	r21
    44c6:	40 95       	com	r20
    44c8:	30 95       	com	r19
    44ca:	21 95       	neg	r18
    44cc:	3f 4f       	sbci	r19, 0xFF	; 255
    44ce:	4f 4f       	sbci	r20, 0xFF	; 255
    44d0:	5f 4f       	sbci	r21, 0xFF	; 255

000044d2 <__divmodsi4_exit>:
    44d2:	08 95       	ret

000044d4 <__negsi2>:
    44d4:	90 95       	com	r25
    44d6:	80 95       	com	r24
    44d8:	70 95       	com	r23
    44da:	61 95       	neg	r22
    44dc:	7f 4f       	sbci	r23, 0xFF	; 255
    44de:	8f 4f       	sbci	r24, 0xFF	; 255
    44e0:	9f 4f       	sbci	r25, 0xFF	; 255
    44e2:	08 95       	ret

000044e4 <__tablejump2__>:
    44e4:	ee 0f       	add	r30, r30
    44e6:	ff 1f       	adc	r31, r31
    44e8:	05 90       	lpm	r0, Z+
    44ea:	f4 91       	lpm	r31, Z
    44ec:	e0 2d       	mov	r30, r0
    44ee:	09 94       	ijmp

000044f0 <__umulhisi3>:
    44f0:	a2 9f       	mul	r26, r18
    44f2:	b0 01       	movw	r22, r0
    44f4:	b3 9f       	mul	r27, r19
    44f6:	c0 01       	movw	r24, r0
    44f8:	a3 9f       	mul	r26, r19
    44fa:	70 0d       	add	r23, r0
    44fc:	81 1d       	adc	r24, r1
    44fe:	11 24       	eor	r1, r1
    4500:	91 1d       	adc	r25, r1
    4502:	b2 9f       	mul	r27, r18
    4504:	70 0d       	add	r23, r0
    4506:	81 1d       	adc	r24, r1
    4508:	11 24       	eor	r1, r1
    450a:	91 1d       	adc	r25, r1
    450c:	08 95       	ret

0000450e <__usmulhisi3>:
    450e:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__umulhisi3>

00004512 <__usmulhisi3_tail>:
    4512:	b7 ff       	sbrs	r27, 7
    4514:	08 95       	ret
    4516:	82 1b       	sub	r24, r18
    4518:	93 0b       	sbc	r25, r19
    451a:	08 95       	ret

0000451c <__muluhisi3>:
    451c:	0e 94 78 22 	call	0x44f0	; 0x44f0 <__umulhisi3>
    4520:	a5 9f       	mul	r26, r21
    4522:	90 0d       	add	r25, r0
    4524:	b4 9f       	mul	r27, r20
    4526:	90 0d       	add	r25, r0
    4528:	a4 9f       	mul	r26, r20
    452a:	80 0d       	add	r24, r0
    452c:	91 1d       	adc	r25, r1
    452e:	11 24       	eor	r1, r1
    4530:	08 95       	ret

00004532 <__mulshisi3>:
    4532:	b7 ff       	sbrs	r27, 7
    4534:	0c 94 8e 22 	jmp	0x451c	; 0x451c <__muluhisi3>

00004538 <__mulohisi3>:
    4538:	0e 94 8e 22 	call	0x451c	; 0x451c <__muluhisi3>
    453c:	82 1b       	sub	r24, r18
    453e:	93 0b       	sbc	r25, r19
    4540:	08 95       	ret

00004542 <atoi>:
    4542:	fc 01       	movw	r30, r24
    4544:	88 27       	eor	r24, r24
    4546:	99 27       	eor	r25, r25
    4548:	e8 94       	clt
    454a:	21 91       	ld	r18, Z+
    454c:	20 32       	cpi	r18, 0x20	; 32
    454e:	e9 f3       	breq	.-6      	; 0x454a <atoi+0x8>
    4550:	29 30       	cpi	r18, 0x09	; 9
    4552:	10 f0       	brcs	.+4      	; 0x4558 <atoi+0x16>
    4554:	2e 30       	cpi	r18, 0x0E	; 14
    4556:	c8 f3       	brcs	.-14     	; 0x454a <atoi+0x8>
    4558:	2b 32       	cpi	r18, 0x2B	; 43
    455a:	41 f0       	breq	.+16     	; 0x456c <atoi+0x2a>
    455c:	2d 32       	cpi	r18, 0x2D	; 45
    455e:	39 f4       	brne	.+14     	; 0x456e <atoi+0x2c>
    4560:	68 94       	set
    4562:	04 c0       	rjmp	.+8      	; 0x456c <atoi+0x2a>
    4564:	0e 94 24 23 	call	0x4648	; 0x4648 <__mulhi_const_10>
    4568:	82 0f       	add	r24, r18
    456a:	91 1d       	adc	r25, r1
    456c:	21 91       	ld	r18, Z+
    456e:	20 53       	subi	r18, 0x30	; 48
    4570:	2a 30       	cpi	r18, 0x0A	; 10
    4572:	c0 f3       	brcs	.-16     	; 0x4564 <atoi+0x22>
    4574:	1e f4       	brtc	.+6      	; 0x457c <atoi+0x3a>
    4576:	90 95       	com	r25
    4578:	81 95       	neg	r24
    457a:	9f 4f       	sbci	r25, 0xFF	; 255
    457c:	08 95       	ret

0000457e <atol>:
    457e:	1f 93       	push	r17
    4580:	fc 01       	movw	r30, r24
    4582:	99 27       	eor	r25, r25
    4584:	88 27       	eor	r24, r24
    4586:	bc 01       	movw	r22, r24
    4588:	e8 94       	clt
    458a:	11 91       	ld	r17, Z+
    458c:	10 32       	cpi	r17, 0x20	; 32
    458e:	e9 f3       	breq	.-6      	; 0x458a <atol+0xc>
    4590:	19 30       	cpi	r17, 0x09	; 9
    4592:	10 f0       	brcs	.+4      	; 0x4598 <atol+0x1a>
    4594:	1e 30       	cpi	r17, 0x0E	; 14
    4596:	c8 f3       	brcs	.-14     	; 0x458a <atol+0xc>
    4598:	1b 32       	cpi	r17, 0x2B	; 43
    459a:	51 f0       	breq	.+20     	; 0x45b0 <atol+0x32>
    459c:	1d 32       	cpi	r17, 0x2D	; 45
    459e:	49 f4       	brne	.+18     	; 0x45b2 <atol+0x34>
    45a0:	68 94       	set
    45a2:	06 c0       	rjmp	.+12     	; 0x45b0 <atol+0x32>
    45a4:	0e 94 0f 23 	call	0x461e	; 0x461e <__mulsi_const_10>
    45a8:	61 0f       	add	r22, r17
    45aa:	71 1d       	adc	r23, r1
    45ac:	81 1d       	adc	r24, r1
    45ae:	91 1d       	adc	r25, r1
    45b0:	11 91       	ld	r17, Z+
    45b2:	10 53       	subi	r17, 0x30	; 48
    45b4:	1a 30       	cpi	r17, 0x0A	; 10
    45b6:	b0 f3       	brcs	.-20     	; 0x45a4 <atol+0x26>
    45b8:	3e f4       	brtc	.+14     	; 0x45c8 <atol+0x4a>
    45ba:	90 95       	com	r25
    45bc:	80 95       	com	r24
    45be:	70 95       	com	r23
    45c0:	61 95       	neg	r22
    45c2:	7f 4f       	sbci	r23, 0xFF	; 255
    45c4:	8f 4f       	sbci	r24, 0xFF	; 255
    45c6:	9f 4f       	sbci	r25, 0xFF	; 255
    45c8:	1f 91       	pop	r17
    45ca:	08 95       	ret

000045cc <toupper>:
    45cc:	91 11       	cpse	r25, r1
    45ce:	08 95       	ret
    45d0:	81 56       	subi	r24, 0x61	; 97
    45d2:	8a 51       	subi	r24, 0x1A	; 26
    45d4:	08 f4       	brcc	.+2      	; 0x45d8 <toupper+0xc>
    45d6:	80 52       	subi	r24, 0x20	; 32
    45d8:	85 58       	subi	r24, 0x85	; 133
    45da:	08 95       	ret

000045dc <strcat>:
    45dc:	fb 01       	movw	r30, r22
    45de:	dc 01       	movw	r26, r24
    45e0:	0d 90       	ld	r0, X+
    45e2:	00 20       	and	r0, r0
    45e4:	e9 f7       	brne	.-6      	; 0x45e0 <strcat+0x4>
    45e6:	11 97       	sbiw	r26, 0x01	; 1
    45e8:	01 90       	ld	r0, Z+
    45ea:	0d 92       	st	X+, r0
    45ec:	00 20       	and	r0, r0
    45ee:	e1 f7       	brne	.-8      	; 0x45e8 <strcat+0xc>
    45f0:	08 95       	ret

000045f2 <strcpy>:
    45f2:	fb 01       	movw	r30, r22
    45f4:	dc 01       	movw	r26, r24
    45f6:	01 90       	ld	r0, Z+
    45f8:	0d 92       	st	X+, r0
    45fa:	00 20       	and	r0, r0
    45fc:	e1 f7       	brne	.-8      	; 0x45f6 <strcpy+0x4>
    45fe:	08 95       	ret

00004600 <strncpy>:
    4600:	fb 01       	movw	r30, r22
    4602:	dc 01       	movw	r26, r24
    4604:	41 50       	subi	r20, 0x01	; 1
    4606:	50 40       	sbci	r21, 0x00	; 0
    4608:	48 f0       	brcs	.+18     	; 0x461c <strncpy+0x1c>
    460a:	01 90       	ld	r0, Z+
    460c:	0d 92       	st	X+, r0
    460e:	00 20       	and	r0, r0
    4610:	c9 f7       	brne	.-14     	; 0x4604 <strncpy+0x4>
    4612:	01 c0       	rjmp	.+2      	; 0x4616 <strncpy+0x16>
    4614:	1d 92       	st	X+, r1
    4616:	41 50       	subi	r20, 0x01	; 1
    4618:	50 40       	sbci	r21, 0x00	; 0
    461a:	e0 f7       	brcc	.-8      	; 0x4614 <strncpy+0x14>
    461c:	08 95       	ret

0000461e <__mulsi_const_10>:
    461e:	59 2f       	mov	r21, r25
    4620:	48 2f       	mov	r20, r24
    4622:	37 2f       	mov	r19, r23
    4624:	26 2f       	mov	r18, r22
    4626:	66 0f       	add	r22, r22
    4628:	77 1f       	adc	r23, r23
    462a:	88 1f       	adc	r24, r24
    462c:	99 1f       	adc	r25, r25
    462e:	66 0f       	add	r22, r22
    4630:	77 1f       	adc	r23, r23
    4632:	88 1f       	adc	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	62 0f       	add	r22, r18
    4638:	73 1f       	adc	r23, r19
    463a:	84 1f       	adc	r24, r20
    463c:	95 1f       	adc	r25, r21
    463e:	66 0f       	add	r22, r22
    4640:	77 1f       	adc	r23, r23
    4642:	88 1f       	adc	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	08 95       	ret

00004648 <__mulhi_const_10>:
    4648:	7a e0       	ldi	r23, 0x0A	; 10
    464a:	97 9f       	mul	r25, r23
    464c:	90 2d       	mov	r25, r0
    464e:	87 9f       	mul	r24, r23
    4650:	80 2d       	mov	r24, r0
    4652:	91 0d       	add	r25, r1
    4654:	11 24       	eor	r1, r1
    4656:	08 95       	ret

00004658 <sprintf>:
    4658:	ae e0       	ldi	r26, 0x0E	; 14
    465a:	b0 e0       	ldi	r27, 0x00	; 0
    465c:	e2 e3       	ldi	r30, 0x32	; 50
    465e:	f3 e2       	ldi	r31, 0x23	; 35
    4660:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__prologue_saves__+0x1c>
    4664:	0d 89       	ldd	r16, Y+21	; 0x15
    4666:	1e 89       	ldd	r17, Y+22	; 0x16
    4668:	86 e0       	ldi	r24, 0x06	; 6
    466a:	8c 83       	std	Y+4, r24	; 0x04
    466c:	1a 83       	std	Y+2, r17	; 0x02
    466e:	09 83       	std	Y+1, r16	; 0x01
    4670:	8f ef       	ldi	r24, 0xFF	; 255
    4672:	9f e7       	ldi	r25, 0x7F	; 127
    4674:	9e 83       	std	Y+6, r25	; 0x06
    4676:	8d 83       	std	Y+5, r24	; 0x05
    4678:	ae 01       	movw	r20, r28
    467a:	47 5e       	subi	r20, 0xE7	; 231
    467c:	5f 4f       	sbci	r21, 0xFF	; 255
    467e:	6f 89       	ldd	r22, Y+23	; 0x17
    4680:	78 8d       	ldd	r23, Y+24	; 0x18
    4682:	ce 01       	movw	r24, r28
    4684:	01 96       	adiw	r24, 0x01	; 1
    4686:	0e 94 4e 23 	call	0x469c	; 0x469c <vfprintf>
    468a:	ef 81       	ldd	r30, Y+7	; 0x07
    468c:	f8 85       	ldd	r31, Y+8	; 0x08
    468e:	e0 0f       	add	r30, r16
    4690:	f1 1f       	adc	r31, r17
    4692:	10 82       	st	Z, r1
    4694:	2e 96       	adiw	r28, 0x0e	; 14
    4696:	e4 e0       	ldi	r30, 0x04	; 4
    4698:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <__epilogue_restores__+0x1c>

0000469c <vfprintf>:
    469c:	ab e0       	ldi	r26, 0x0B	; 11
    469e:	b0 e0       	ldi	r27, 0x00	; 0
    46a0:	e4 e5       	ldi	r30, 0x54	; 84
    46a2:	f3 e2       	ldi	r31, 0x23	; 35
    46a4:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__prologue_saves__>
    46a8:	6c 01       	movw	r12, r24
    46aa:	7b 01       	movw	r14, r22
    46ac:	8a 01       	movw	r16, r20
    46ae:	fc 01       	movw	r30, r24
    46b0:	17 82       	std	Z+7, r1	; 0x07
    46b2:	16 82       	std	Z+6, r1	; 0x06
    46b4:	83 81       	ldd	r24, Z+3	; 0x03
    46b6:	81 ff       	sbrs	r24, 1
    46b8:	cc c1       	rjmp	.+920    	; 0x4a52 <vfprintf+0x3b6>
    46ba:	ce 01       	movw	r24, r28
    46bc:	01 96       	adiw	r24, 0x01	; 1
    46be:	3c 01       	movw	r6, r24
    46c0:	f6 01       	movw	r30, r12
    46c2:	93 81       	ldd	r25, Z+3	; 0x03
    46c4:	f7 01       	movw	r30, r14
    46c6:	93 fd       	sbrc	r25, 3
    46c8:	85 91       	lpm	r24, Z+
    46ca:	93 ff       	sbrs	r25, 3
    46cc:	81 91       	ld	r24, Z+
    46ce:	7f 01       	movw	r14, r30
    46d0:	88 23       	and	r24, r24
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <vfprintf+0x3a>
    46d4:	ba c1       	rjmp	.+884    	; 0x4a4a <vfprintf+0x3ae>
    46d6:	85 32       	cpi	r24, 0x25	; 37
    46d8:	39 f4       	brne	.+14     	; 0x46e8 <vfprintf+0x4c>
    46da:	93 fd       	sbrc	r25, 3
    46dc:	85 91       	lpm	r24, Z+
    46de:	93 ff       	sbrs	r25, 3
    46e0:	81 91       	ld	r24, Z+
    46e2:	7f 01       	movw	r14, r30
    46e4:	85 32       	cpi	r24, 0x25	; 37
    46e6:	29 f4       	brne	.+10     	; 0x46f2 <vfprintf+0x56>
    46e8:	b6 01       	movw	r22, r12
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    46f0:	e7 cf       	rjmp	.-50     	; 0x46c0 <vfprintf+0x24>
    46f2:	91 2c       	mov	r9, r1
    46f4:	21 2c       	mov	r2, r1
    46f6:	31 2c       	mov	r3, r1
    46f8:	ff e1       	ldi	r31, 0x1F	; 31
    46fa:	f3 15       	cp	r31, r3
    46fc:	d8 f0       	brcs	.+54     	; 0x4734 <vfprintf+0x98>
    46fe:	8b 32       	cpi	r24, 0x2B	; 43
    4700:	79 f0       	breq	.+30     	; 0x4720 <vfprintf+0x84>
    4702:	38 f4       	brcc	.+14     	; 0x4712 <vfprintf+0x76>
    4704:	80 32       	cpi	r24, 0x20	; 32
    4706:	79 f0       	breq	.+30     	; 0x4726 <vfprintf+0x8a>
    4708:	83 32       	cpi	r24, 0x23	; 35
    470a:	a1 f4       	brne	.+40     	; 0x4734 <vfprintf+0x98>
    470c:	23 2d       	mov	r18, r3
    470e:	20 61       	ori	r18, 0x10	; 16
    4710:	1d c0       	rjmp	.+58     	; 0x474c <vfprintf+0xb0>
    4712:	8d 32       	cpi	r24, 0x2D	; 45
    4714:	61 f0       	breq	.+24     	; 0x472e <vfprintf+0x92>
    4716:	80 33       	cpi	r24, 0x30	; 48
    4718:	69 f4       	brne	.+26     	; 0x4734 <vfprintf+0x98>
    471a:	23 2d       	mov	r18, r3
    471c:	21 60       	ori	r18, 0x01	; 1
    471e:	16 c0       	rjmp	.+44     	; 0x474c <vfprintf+0xb0>
    4720:	83 2d       	mov	r24, r3
    4722:	82 60       	ori	r24, 0x02	; 2
    4724:	38 2e       	mov	r3, r24
    4726:	e3 2d       	mov	r30, r3
    4728:	e4 60       	ori	r30, 0x04	; 4
    472a:	3e 2e       	mov	r3, r30
    472c:	2a c0       	rjmp	.+84     	; 0x4782 <vfprintf+0xe6>
    472e:	f3 2d       	mov	r31, r3
    4730:	f8 60       	ori	r31, 0x08	; 8
    4732:	1d c0       	rjmp	.+58     	; 0x476e <vfprintf+0xd2>
    4734:	37 fc       	sbrc	r3, 7
    4736:	2d c0       	rjmp	.+90     	; 0x4792 <vfprintf+0xf6>
    4738:	20 ed       	ldi	r18, 0xD0	; 208
    473a:	28 0f       	add	r18, r24
    473c:	2a 30       	cpi	r18, 0x0A	; 10
    473e:	40 f0       	brcs	.+16     	; 0x4750 <vfprintf+0xb4>
    4740:	8e 32       	cpi	r24, 0x2E	; 46
    4742:	b9 f4       	brne	.+46     	; 0x4772 <vfprintf+0xd6>
    4744:	36 fc       	sbrc	r3, 6
    4746:	81 c1       	rjmp	.+770    	; 0x4a4a <vfprintf+0x3ae>
    4748:	23 2d       	mov	r18, r3
    474a:	20 64       	ori	r18, 0x40	; 64
    474c:	32 2e       	mov	r3, r18
    474e:	19 c0       	rjmp	.+50     	; 0x4782 <vfprintf+0xe6>
    4750:	36 fe       	sbrs	r3, 6
    4752:	06 c0       	rjmp	.+12     	; 0x4760 <vfprintf+0xc4>
    4754:	8a e0       	ldi	r24, 0x0A	; 10
    4756:	98 9e       	mul	r9, r24
    4758:	20 0d       	add	r18, r0
    475a:	11 24       	eor	r1, r1
    475c:	92 2e       	mov	r9, r18
    475e:	11 c0       	rjmp	.+34     	; 0x4782 <vfprintf+0xe6>
    4760:	ea e0       	ldi	r30, 0x0A	; 10
    4762:	2e 9e       	mul	r2, r30
    4764:	20 0d       	add	r18, r0
    4766:	11 24       	eor	r1, r1
    4768:	22 2e       	mov	r2, r18
    476a:	f3 2d       	mov	r31, r3
    476c:	f0 62       	ori	r31, 0x20	; 32
    476e:	3f 2e       	mov	r3, r31
    4770:	08 c0       	rjmp	.+16     	; 0x4782 <vfprintf+0xe6>
    4772:	8c 36       	cpi	r24, 0x6C	; 108
    4774:	21 f4       	brne	.+8      	; 0x477e <vfprintf+0xe2>
    4776:	83 2d       	mov	r24, r3
    4778:	80 68       	ori	r24, 0x80	; 128
    477a:	38 2e       	mov	r3, r24
    477c:	02 c0       	rjmp	.+4      	; 0x4782 <vfprintf+0xe6>
    477e:	88 36       	cpi	r24, 0x68	; 104
    4780:	41 f4       	brne	.+16     	; 0x4792 <vfprintf+0xf6>
    4782:	f7 01       	movw	r30, r14
    4784:	93 fd       	sbrc	r25, 3
    4786:	85 91       	lpm	r24, Z+
    4788:	93 ff       	sbrs	r25, 3
    478a:	81 91       	ld	r24, Z+
    478c:	7f 01       	movw	r14, r30
    478e:	81 11       	cpse	r24, r1
    4790:	b3 cf       	rjmp	.-154    	; 0x46f8 <vfprintf+0x5c>
    4792:	98 2f       	mov	r25, r24
    4794:	9f 7d       	andi	r25, 0xDF	; 223
    4796:	95 54       	subi	r25, 0x45	; 69
    4798:	93 30       	cpi	r25, 0x03	; 3
    479a:	28 f4       	brcc	.+10     	; 0x47a6 <vfprintf+0x10a>
    479c:	0c 5f       	subi	r16, 0xFC	; 252
    479e:	1f 4f       	sbci	r17, 0xFF	; 255
    47a0:	9f e3       	ldi	r25, 0x3F	; 63
    47a2:	99 83       	std	Y+1, r25	; 0x01
    47a4:	0d c0       	rjmp	.+26     	; 0x47c0 <vfprintf+0x124>
    47a6:	83 36       	cpi	r24, 0x63	; 99
    47a8:	31 f0       	breq	.+12     	; 0x47b6 <vfprintf+0x11a>
    47aa:	83 37       	cpi	r24, 0x73	; 115
    47ac:	71 f0       	breq	.+28     	; 0x47ca <vfprintf+0x12e>
    47ae:	83 35       	cpi	r24, 0x53	; 83
    47b0:	09 f0       	breq	.+2      	; 0x47b4 <vfprintf+0x118>
    47b2:	59 c0       	rjmp	.+178    	; 0x4866 <vfprintf+0x1ca>
    47b4:	21 c0       	rjmp	.+66     	; 0x47f8 <vfprintf+0x15c>
    47b6:	f8 01       	movw	r30, r16
    47b8:	80 81       	ld	r24, Z
    47ba:	89 83       	std	Y+1, r24	; 0x01
    47bc:	0e 5f       	subi	r16, 0xFE	; 254
    47be:	1f 4f       	sbci	r17, 0xFF	; 255
    47c0:	88 24       	eor	r8, r8
    47c2:	83 94       	inc	r8
    47c4:	91 2c       	mov	r9, r1
    47c6:	53 01       	movw	r10, r6
    47c8:	13 c0       	rjmp	.+38     	; 0x47f0 <vfprintf+0x154>
    47ca:	28 01       	movw	r4, r16
    47cc:	f2 e0       	ldi	r31, 0x02	; 2
    47ce:	4f 0e       	add	r4, r31
    47d0:	51 1c       	adc	r5, r1
    47d2:	f8 01       	movw	r30, r16
    47d4:	a0 80       	ld	r10, Z
    47d6:	b1 80       	ldd	r11, Z+1	; 0x01
    47d8:	36 fe       	sbrs	r3, 6
    47da:	03 c0       	rjmp	.+6      	; 0x47e2 <vfprintf+0x146>
    47dc:	69 2d       	mov	r22, r9
    47de:	70 e0       	ldi	r23, 0x00	; 0
    47e0:	02 c0       	rjmp	.+4      	; 0x47e6 <vfprintf+0x14a>
    47e2:	6f ef       	ldi	r22, 0xFF	; 255
    47e4:	7f ef       	ldi	r23, 0xFF	; 255
    47e6:	c5 01       	movw	r24, r10
    47e8:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <strnlen>
    47ec:	4c 01       	movw	r8, r24
    47ee:	82 01       	movw	r16, r4
    47f0:	f3 2d       	mov	r31, r3
    47f2:	ff 77       	andi	r31, 0x7F	; 127
    47f4:	3f 2e       	mov	r3, r31
    47f6:	16 c0       	rjmp	.+44     	; 0x4824 <vfprintf+0x188>
    47f8:	28 01       	movw	r4, r16
    47fa:	22 e0       	ldi	r18, 0x02	; 2
    47fc:	42 0e       	add	r4, r18
    47fe:	51 1c       	adc	r5, r1
    4800:	f8 01       	movw	r30, r16
    4802:	a0 80       	ld	r10, Z
    4804:	b1 80       	ldd	r11, Z+1	; 0x01
    4806:	36 fe       	sbrs	r3, 6
    4808:	03 c0       	rjmp	.+6      	; 0x4810 <vfprintf+0x174>
    480a:	69 2d       	mov	r22, r9
    480c:	70 e0       	ldi	r23, 0x00	; 0
    480e:	02 c0       	rjmp	.+4      	; 0x4814 <vfprintf+0x178>
    4810:	6f ef       	ldi	r22, 0xFF	; 255
    4812:	7f ef       	ldi	r23, 0xFF	; 255
    4814:	c5 01       	movw	r24, r10
    4816:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strnlen_P>
    481a:	4c 01       	movw	r8, r24
    481c:	f3 2d       	mov	r31, r3
    481e:	f0 68       	ori	r31, 0x80	; 128
    4820:	3f 2e       	mov	r3, r31
    4822:	82 01       	movw	r16, r4
    4824:	33 fc       	sbrc	r3, 3
    4826:	1b c0       	rjmp	.+54     	; 0x485e <vfprintf+0x1c2>
    4828:	82 2d       	mov	r24, r2
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	88 16       	cp	r8, r24
    482e:	99 06       	cpc	r9, r25
    4830:	b0 f4       	brcc	.+44     	; 0x485e <vfprintf+0x1c2>
    4832:	b6 01       	movw	r22, r12
    4834:	80 e2       	ldi	r24, 0x20	; 32
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    483c:	2a 94       	dec	r2
    483e:	f4 cf       	rjmp	.-24     	; 0x4828 <vfprintf+0x18c>
    4840:	f5 01       	movw	r30, r10
    4842:	37 fc       	sbrc	r3, 7
    4844:	85 91       	lpm	r24, Z+
    4846:	37 fe       	sbrs	r3, 7
    4848:	81 91       	ld	r24, Z+
    484a:	5f 01       	movw	r10, r30
    484c:	b6 01       	movw	r22, r12
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    4854:	21 10       	cpse	r2, r1
    4856:	2a 94       	dec	r2
    4858:	21 e0       	ldi	r18, 0x01	; 1
    485a:	82 1a       	sub	r8, r18
    485c:	91 08       	sbc	r9, r1
    485e:	81 14       	cp	r8, r1
    4860:	91 04       	cpc	r9, r1
    4862:	71 f7       	brne	.-36     	; 0x4840 <vfprintf+0x1a4>
    4864:	e8 c0       	rjmp	.+464    	; 0x4a36 <vfprintf+0x39a>
    4866:	84 36       	cpi	r24, 0x64	; 100
    4868:	11 f0       	breq	.+4      	; 0x486e <vfprintf+0x1d2>
    486a:	89 36       	cpi	r24, 0x69	; 105
    486c:	41 f5       	brne	.+80     	; 0x48be <vfprintf+0x222>
    486e:	f8 01       	movw	r30, r16
    4870:	37 fe       	sbrs	r3, 7
    4872:	07 c0       	rjmp	.+14     	; 0x4882 <vfprintf+0x1e6>
    4874:	60 81       	ld	r22, Z
    4876:	71 81       	ldd	r23, Z+1	; 0x01
    4878:	82 81       	ldd	r24, Z+2	; 0x02
    487a:	93 81       	ldd	r25, Z+3	; 0x03
    487c:	0c 5f       	subi	r16, 0xFC	; 252
    487e:	1f 4f       	sbci	r17, 0xFF	; 255
    4880:	08 c0       	rjmp	.+16     	; 0x4892 <vfprintf+0x1f6>
    4882:	60 81       	ld	r22, Z
    4884:	71 81       	ldd	r23, Z+1	; 0x01
    4886:	07 2e       	mov	r0, r23
    4888:	00 0c       	add	r0, r0
    488a:	88 0b       	sbc	r24, r24
    488c:	99 0b       	sbc	r25, r25
    488e:	0e 5f       	subi	r16, 0xFE	; 254
    4890:	1f 4f       	sbci	r17, 0xFF	; 255
    4892:	f3 2d       	mov	r31, r3
    4894:	ff 76       	andi	r31, 0x6F	; 111
    4896:	3f 2e       	mov	r3, r31
    4898:	97 ff       	sbrs	r25, 7
    489a:	09 c0       	rjmp	.+18     	; 0x48ae <vfprintf+0x212>
    489c:	90 95       	com	r25
    489e:	80 95       	com	r24
    48a0:	70 95       	com	r23
    48a2:	61 95       	neg	r22
    48a4:	7f 4f       	sbci	r23, 0xFF	; 255
    48a6:	8f 4f       	sbci	r24, 0xFF	; 255
    48a8:	9f 4f       	sbci	r25, 0xFF	; 255
    48aa:	f0 68       	ori	r31, 0x80	; 128
    48ac:	3f 2e       	mov	r3, r31
    48ae:	2a e0       	ldi	r18, 0x0A	; 10
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	a3 01       	movw	r20, r6
    48b4:	0e 94 81 25 	call	0x4b02	; 0x4b02 <__ultoa_invert>
    48b8:	88 2e       	mov	r8, r24
    48ba:	86 18       	sub	r8, r6
    48bc:	45 c0       	rjmp	.+138    	; 0x4948 <vfprintf+0x2ac>
    48be:	85 37       	cpi	r24, 0x75	; 117
    48c0:	31 f4       	brne	.+12     	; 0x48ce <vfprintf+0x232>
    48c2:	23 2d       	mov	r18, r3
    48c4:	2f 7e       	andi	r18, 0xEF	; 239
    48c6:	b2 2e       	mov	r11, r18
    48c8:	2a e0       	ldi	r18, 0x0A	; 10
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	25 c0       	rjmp	.+74     	; 0x4918 <vfprintf+0x27c>
    48ce:	93 2d       	mov	r25, r3
    48d0:	99 7f       	andi	r25, 0xF9	; 249
    48d2:	b9 2e       	mov	r11, r25
    48d4:	8f 36       	cpi	r24, 0x6F	; 111
    48d6:	c1 f0       	breq	.+48     	; 0x4908 <vfprintf+0x26c>
    48d8:	18 f4       	brcc	.+6      	; 0x48e0 <vfprintf+0x244>
    48da:	88 35       	cpi	r24, 0x58	; 88
    48dc:	79 f0       	breq	.+30     	; 0x48fc <vfprintf+0x260>
    48de:	b5 c0       	rjmp	.+362    	; 0x4a4a <vfprintf+0x3ae>
    48e0:	80 37       	cpi	r24, 0x70	; 112
    48e2:	19 f0       	breq	.+6      	; 0x48ea <vfprintf+0x24e>
    48e4:	88 37       	cpi	r24, 0x78	; 120
    48e6:	21 f0       	breq	.+8      	; 0x48f0 <vfprintf+0x254>
    48e8:	b0 c0       	rjmp	.+352    	; 0x4a4a <vfprintf+0x3ae>
    48ea:	e9 2f       	mov	r30, r25
    48ec:	e0 61       	ori	r30, 0x10	; 16
    48ee:	be 2e       	mov	r11, r30
    48f0:	b4 fe       	sbrs	r11, 4
    48f2:	0d c0       	rjmp	.+26     	; 0x490e <vfprintf+0x272>
    48f4:	fb 2d       	mov	r31, r11
    48f6:	f4 60       	ori	r31, 0x04	; 4
    48f8:	bf 2e       	mov	r11, r31
    48fa:	09 c0       	rjmp	.+18     	; 0x490e <vfprintf+0x272>
    48fc:	34 fe       	sbrs	r3, 4
    48fe:	0a c0       	rjmp	.+20     	; 0x4914 <vfprintf+0x278>
    4900:	29 2f       	mov	r18, r25
    4902:	26 60       	ori	r18, 0x06	; 6
    4904:	b2 2e       	mov	r11, r18
    4906:	06 c0       	rjmp	.+12     	; 0x4914 <vfprintf+0x278>
    4908:	28 e0       	ldi	r18, 0x08	; 8
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	05 c0       	rjmp	.+10     	; 0x4918 <vfprintf+0x27c>
    490e:	20 e1       	ldi	r18, 0x10	; 16
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	02 c0       	rjmp	.+4      	; 0x4918 <vfprintf+0x27c>
    4914:	20 e1       	ldi	r18, 0x10	; 16
    4916:	32 e0       	ldi	r19, 0x02	; 2
    4918:	f8 01       	movw	r30, r16
    491a:	b7 fe       	sbrs	r11, 7
    491c:	07 c0       	rjmp	.+14     	; 0x492c <vfprintf+0x290>
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	0c 5f       	subi	r16, 0xFC	; 252
    4928:	1f 4f       	sbci	r17, 0xFF	; 255
    492a:	06 c0       	rjmp	.+12     	; 0x4938 <vfprintf+0x29c>
    492c:	60 81       	ld	r22, Z
    492e:	71 81       	ldd	r23, Z+1	; 0x01
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	0e 5f       	subi	r16, 0xFE	; 254
    4936:	1f 4f       	sbci	r17, 0xFF	; 255
    4938:	a3 01       	movw	r20, r6
    493a:	0e 94 81 25 	call	0x4b02	; 0x4b02 <__ultoa_invert>
    493e:	88 2e       	mov	r8, r24
    4940:	86 18       	sub	r8, r6
    4942:	fb 2d       	mov	r31, r11
    4944:	ff 77       	andi	r31, 0x7F	; 127
    4946:	3f 2e       	mov	r3, r31
    4948:	36 fe       	sbrs	r3, 6
    494a:	0d c0       	rjmp	.+26     	; 0x4966 <vfprintf+0x2ca>
    494c:	23 2d       	mov	r18, r3
    494e:	2e 7f       	andi	r18, 0xFE	; 254
    4950:	a2 2e       	mov	r10, r18
    4952:	89 14       	cp	r8, r9
    4954:	58 f4       	brcc	.+22     	; 0x496c <vfprintf+0x2d0>
    4956:	34 fe       	sbrs	r3, 4
    4958:	0b c0       	rjmp	.+22     	; 0x4970 <vfprintf+0x2d4>
    495a:	32 fc       	sbrc	r3, 2
    495c:	09 c0       	rjmp	.+18     	; 0x4970 <vfprintf+0x2d4>
    495e:	83 2d       	mov	r24, r3
    4960:	8e 7e       	andi	r24, 0xEE	; 238
    4962:	a8 2e       	mov	r10, r24
    4964:	05 c0       	rjmp	.+10     	; 0x4970 <vfprintf+0x2d4>
    4966:	b8 2c       	mov	r11, r8
    4968:	a3 2c       	mov	r10, r3
    496a:	03 c0       	rjmp	.+6      	; 0x4972 <vfprintf+0x2d6>
    496c:	b8 2c       	mov	r11, r8
    496e:	01 c0       	rjmp	.+2      	; 0x4972 <vfprintf+0x2d6>
    4970:	b9 2c       	mov	r11, r9
    4972:	a4 fe       	sbrs	r10, 4
    4974:	0f c0       	rjmp	.+30     	; 0x4994 <vfprintf+0x2f8>
    4976:	fe 01       	movw	r30, r28
    4978:	e8 0d       	add	r30, r8
    497a:	f1 1d       	adc	r31, r1
    497c:	80 81       	ld	r24, Z
    497e:	80 33       	cpi	r24, 0x30	; 48
    4980:	21 f4       	brne	.+8      	; 0x498a <vfprintf+0x2ee>
    4982:	9a 2d       	mov	r25, r10
    4984:	99 7e       	andi	r25, 0xE9	; 233
    4986:	a9 2e       	mov	r10, r25
    4988:	09 c0       	rjmp	.+18     	; 0x499c <vfprintf+0x300>
    498a:	a2 fe       	sbrs	r10, 2
    498c:	06 c0       	rjmp	.+12     	; 0x499a <vfprintf+0x2fe>
    498e:	b3 94       	inc	r11
    4990:	b3 94       	inc	r11
    4992:	04 c0       	rjmp	.+8      	; 0x499c <vfprintf+0x300>
    4994:	8a 2d       	mov	r24, r10
    4996:	86 78       	andi	r24, 0x86	; 134
    4998:	09 f0       	breq	.+2      	; 0x499c <vfprintf+0x300>
    499a:	b3 94       	inc	r11
    499c:	a3 fc       	sbrc	r10, 3
    499e:	11 c0       	rjmp	.+34     	; 0x49c2 <vfprintf+0x326>
    49a0:	a0 fe       	sbrs	r10, 0
    49a2:	06 c0       	rjmp	.+12     	; 0x49b0 <vfprintf+0x314>
    49a4:	b2 14       	cp	r11, r2
    49a6:	88 f4       	brcc	.+34     	; 0x49ca <vfprintf+0x32e>
    49a8:	28 0c       	add	r2, r8
    49aa:	92 2c       	mov	r9, r2
    49ac:	9b 18       	sub	r9, r11
    49ae:	0e c0       	rjmp	.+28     	; 0x49cc <vfprintf+0x330>
    49b0:	b2 14       	cp	r11, r2
    49b2:	60 f4       	brcc	.+24     	; 0x49cc <vfprintf+0x330>
    49b4:	b6 01       	movw	r22, r12
    49b6:	80 e2       	ldi	r24, 0x20	; 32
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    49be:	b3 94       	inc	r11
    49c0:	f7 cf       	rjmp	.-18     	; 0x49b0 <vfprintf+0x314>
    49c2:	b2 14       	cp	r11, r2
    49c4:	18 f4       	brcc	.+6      	; 0x49cc <vfprintf+0x330>
    49c6:	2b 18       	sub	r2, r11
    49c8:	02 c0       	rjmp	.+4      	; 0x49ce <vfprintf+0x332>
    49ca:	98 2c       	mov	r9, r8
    49cc:	21 2c       	mov	r2, r1
    49ce:	a4 fe       	sbrs	r10, 4
    49d0:	10 c0       	rjmp	.+32     	; 0x49f2 <vfprintf+0x356>
    49d2:	b6 01       	movw	r22, r12
    49d4:	80 e3       	ldi	r24, 0x30	; 48
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    49dc:	a2 fe       	sbrs	r10, 2
    49de:	17 c0       	rjmp	.+46     	; 0x4a0e <vfprintf+0x372>
    49e0:	a1 fc       	sbrc	r10, 1
    49e2:	03 c0       	rjmp	.+6      	; 0x49ea <vfprintf+0x34e>
    49e4:	88 e7       	ldi	r24, 0x78	; 120
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	02 c0       	rjmp	.+4      	; 0x49ee <vfprintf+0x352>
    49ea:	88 e5       	ldi	r24, 0x58	; 88
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	b6 01       	movw	r22, r12
    49f0:	0c c0       	rjmp	.+24     	; 0x4a0a <vfprintf+0x36e>
    49f2:	8a 2d       	mov	r24, r10
    49f4:	86 78       	andi	r24, 0x86	; 134
    49f6:	59 f0       	breq	.+22     	; 0x4a0e <vfprintf+0x372>
    49f8:	a1 fe       	sbrs	r10, 1
    49fa:	02 c0       	rjmp	.+4      	; 0x4a00 <vfprintf+0x364>
    49fc:	8b e2       	ldi	r24, 0x2B	; 43
    49fe:	01 c0       	rjmp	.+2      	; 0x4a02 <vfprintf+0x366>
    4a00:	80 e2       	ldi	r24, 0x20	; 32
    4a02:	a7 fc       	sbrc	r10, 7
    4a04:	8d e2       	ldi	r24, 0x2D	; 45
    4a06:	b6 01       	movw	r22, r12
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    4a0e:	89 14       	cp	r8, r9
    4a10:	38 f4       	brcc	.+14     	; 0x4a20 <vfprintf+0x384>
    4a12:	b6 01       	movw	r22, r12
    4a14:	80 e3       	ldi	r24, 0x30	; 48
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    4a1c:	9a 94       	dec	r9
    4a1e:	f7 cf       	rjmp	.-18     	; 0x4a0e <vfprintf+0x372>
    4a20:	8a 94       	dec	r8
    4a22:	f3 01       	movw	r30, r6
    4a24:	e8 0d       	add	r30, r8
    4a26:	f1 1d       	adc	r31, r1
    4a28:	80 81       	ld	r24, Z
    4a2a:	b6 01       	movw	r22, r12
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    4a32:	81 10       	cpse	r8, r1
    4a34:	f5 cf       	rjmp	.-22     	; 0x4a20 <vfprintf+0x384>
    4a36:	22 20       	and	r2, r2
    4a38:	09 f4       	brne	.+2      	; 0x4a3c <vfprintf+0x3a0>
    4a3a:	42 ce       	rjmp	.-892    	; 0x46c0 <vfprintf+0x24>
    4a3c:	b6 01       	movw	r22, r12
    4a3e:	80 e2       	ldi	r24, 0x20	; 32
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <fputc>
    4a46:	2a 94       	dec	r2
    4a48:	f6 cf       	rjmp	.-20     	; 0x4a36 <vfprintf+0x39a>
    4a4a:	f6 01       	movw	r30, r12
    4a4c:	86 81       	ldd	r24, Z+6	; 0x06
    4a4e:	97 81       	ldd	r25, Z+7	; 0x07
    4a50:	02 c0       	rjmp	.+4      	; 0x4a56 <vfprintf+0x3ba>
    4a52:	8f ef       	ldi	r24, 0xFF	; 255
    4a54:	9f ef       	ldi	r25, 0xFF	; 255
    4a56:	2b 96       	adiw	r28, 0x0b	; 11
    4a58:	e2 e1       	ldi	r30, 0x12	; 18
    4a5a:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__>

00004a5e <strnlen_P>:
    4a5e:	fc 01       	movw	r30, r24
    4a60:	05 90       	lpm	r0, Z+
    4a62:	61 50       	subi	r22, 0x01	; 1
    4a64:	70 40       	sbci	r23, 0x00	; 0
    4a66:	01 10       	cpse	r0, r1
    4a68:	d8 f7       	brcc	.-10     	; 0x4a60 <strnlen_P+0x2>
    4a6a:	80 95       	com	r24
    4a6c:	90 95       	com	r25
    4a6e:	8e 0f       	add	r24, r30
    4a70:	9f 1f       	adc	r25, r31
    4a72:	08 95       	ret

00004a74 <strnlen>:
    4a74:	fc 01       	movw	r30, r24
    4a76:	61 50       	subi	r22, 0x01	; 1
    4a78:	70 40       	sbci	r23, 0x00	; 0
    4a7a:	01 90       	ld	r0, Z+
    4a7c:	01 10       	cpse	r0, r1
    4a7e:	d8 f7       	brcc	.-10     	; 0x4a76 <strnlen+0x2>
    4a80:	80 95       	com	r24
    4a82:	90 95       	com	r25
    4a84:	8e 0f       	add	r24, r30
    4a86:	9f 1f       	adc	r25, r31
    4a88:	08 95       	ret

00004a8a <fputc>:
    4a8a:	0f 93       	push	r16
    4a8c:	1f 93       	push	r17
    4a8e:	cf 93       	push	r28
    4a90:	df 93       	push	r29
    4a92:	fb 01       	movw	r30, r22
    4a94:	23 81       	ldd	r18, Z+3	; 0x03
    4a96:	21 fd       	sbrc	r18, 1
    4a98:	03 c0       	rjmp	.+6      	; 0x4aa0 <fputc+0x16>
    4a9a:	8f ef       	ldi	r24, 0xFF	; 255
    4a9c:	9f ef       	ldi	r25, 0xFF	; 255
    4a9e:	2c c0       	rjmp	.+88     	; 0x4af8 <fputc+0x6e>
    4aa0:	22 ff       	sbrs	r18, 2
    4aa2:	16 c0       	rjmp	.+44     	; 0x4ad0 <fputc+0x46>
    4aa4:	46 81       	ldd	r20, Z+6	; 0x06
    4aa6:	57 81       	ldd	r21, Z+7	; 0x07
    4aa8:	24 81       	ldd	r18, Z+4	; 0x04
    4aaa:	35 81       	ldd	r19, Z+5	; 0x05
    4aac:	42 17       	cp	r20, r18
    4aae:	53 07       	cpc	r21, r19
    4ab0:	44 f4       	brge	.+16     	; 0x4ac2 <fputc+0x38>
    4ab2:	a0 81       	ld	r26, Z
    4ab4:	b1 81       	ldd	r27, Z+1	; 0x01
    4ab6:	9d 01       	movw	r18, r26
    4ab8:	2f 5f       	subi	r18, 0xFF	; 255
    4aba:	3f 4f       	sbci	r19, 0xFF	; 255
    4abc:	31 83       	std	Z+1, r19	; 0x01
    4abe:	20 83       	st	Z, r18
    4ac0:	8c 93       	st	X, r24
    4ac2:	26 81       	ldd	r18, Z+6	; 0x06
    4ac4:	37 81       	ldd	r19, Z+7	; 0x07
    4ac6:	2f 5f       	subi	r18, 0xFF	; 255
    4ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aca:	37 83       	std	Z+7, r19	; 0x07
    4acc:	26 83       	std	Z+6, r18	; 0x06
    4ace:	14 c0       	rjmp	.+40     	; 0x4af8 <fputc+0x6e>
    4ad0:	8b 01       	movw	r16, r22
    4ad2:	ec 01       	movw	r28, r24
    4ad4:	fb 01       	movw	r30, r22
    4ad6:	00 84       	ldd	r0, Z+8	; 0x08
    4ad8:	f1 85       	ldd	r31, Z+9	; 0x09
    4ada:	e0 2d       	mov	r30, r0
    4adc:	09 95       	icall
    4ade:	89 2b       	or	r24, r25
    4ae0:	e1 f6       	brne	.-72     	; 0x4a9a <fputc+0x10>
    4ae2:	d8 01       	movw	r26, r16
    4ae4:	16 96       	adiw	r26, 0x06	; 6
    4ae6:	8d 91       	ld	r24, X+
    4ae8:	9c 91       	ld	r25, X
    4aea:	17 97       	sbiw	r26, 0x07	; 7
    4aec:	01 96       	adiw	r24, 0x01	; 1
    4aee:	17 96       	adiw	r26, 0x07	; 7
    4af0:	9c 93       	st	X, r25
    4af2:	8e 93       	st	-X, r24
    4af4:	16 97       	sbiw	r26, 0x06	; 6
    4af6:	ce 01       	movw	r24, r28
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	08 95       	ret

00004b02 <__ultoa_invert>:
    4b02:	fa 01       	movw	r30, r20
    4b04:	aa 27       	eor	r26, r26
    4b06:	28 30       	cpi	r18, 0x08	; 8
    4b08:	51 f1       	breq	.+84     	; 0x4b5e <__ultoa_invert+0x5c>
    4b0a:	20 31       	cpi	r18, 0x10	; 16
    4b0c:	81 f1       	breq	.+96     	; 0x4b6e <__ultoa_invert+0x6c>
    4b0e:	e8 94       	clt
    4b10:	6f 93       	push	r22
    4b12:	6e 7f       	andi	r22, 0xFE	; 254
    4b14:	6e 5f       	subi	r22, 0xFE	; 254
    4b16:	7f 4f       	sbci	r23, 0xFF	; 255
    4b18:	8f 4f       	sbci	r24, 0xFF	; 255
    4b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b1c:	af 4f       	sbci	r26, 0xFF	; 255
    4b1e:	b1 e0       	ldi	r27, 0x01	; 1
    4b20:	3e d0       	rcall	.+124    	; 0x4b9e <__ultoa_invert+0x9c>
    4b22:	b4 e0       	ldi	r27, 0x04	; 4
    4b24:	3c d0       	rcall	.+120    	; 0x4b9e <__ultoa_invert+0x9c>
    4b26:	67 0f       	add	r22, r23
    4b28:	78 1f       	adc	r23, r24
    4b2a:	89 1f       	adc	r24, r25
    4b2c:	9a 1f       	adc	r25, r26
    4b2e:	a1 1d       	adc	r26, r1
    4b30:	68 0f       	add	r22, r24
    4b32:	79 1f       	adc	r23, r25
    4b34:	8a 1f       	adc	r24, r26
    4b36:	91 1d       	adc	r25, r1
    4b38:	a1 1d       	adc	r26, r1
    4b3a:	6a 0f       	add	r22, r26
    4b3c:	71 1d       	adc	r23, r1
    4b3e:	81 1d       	adc	r24, r1
    4b40:	91 1d       	adc	r25, r1
    4b42:	a1 1d       	adc	r26, r1
    4b44:	20 d0       	rcall	.+64     	; 0x4b86 <__ultoa_invert+0x84>
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <__ultoa_invert+0x48>
    4b48:	68 94       	set
    4b4a:	3f 91       	pop	r19
    4b4c:	2a e0       	ldi	r18, 0x0A	; 10
    4b4e:	26 9f       	mul	r18, r22
    4b50:	11 24       	eor	r1, r1
    4b52:	30 19       	sub	r19, r0
    4b54:	30 5d       	subi	r19, 0xD0	; 208
    4b56:	31 93       	st	Z+, r19
    4b58:	de f6       	brtc	.-74     	; 0x4b10 <__ultoa_invert+0xe>
    4b5a:	cf 01       	movw	r24, r30
    4b5c:	08 95       	ret
    4b5e:	46 2f       	mov	r20, r22
    4b60:	47 70       	andi	r20, 0x07	; 7
    4b62:	40 5d       	subi	r20, 0xD0	; 208
    4b64:	41 93       	st	Z+, r20
    4b66:	b3 e0       	ldi	r27, 0x03	; 3
    4b68:	0f d0       	rcall	.+30     	; 0x4b88 <__ultoa_invert+0x86>
    4b6a:	c9 f7       	brne	.-14     	; 0x4b5e <__ultoa_invert+0x5c>
    4b6c:	f6 cf       	rjmp	.-20     	; 0x4b5a <__ultoa_invert+0x58>
    4b6e:	46 2f       	mov	r20, r22
    4b70:	4f 70       	andi	r20, 0x0F	; 15
    4b72:	40 5d       	subi	r20, 0xD0	; 208
    4b74:	4a 33       	cpi	r20, 0x3A	; 58
    4b76:	18 f0       	brcs	.+6      	; 0x4b7e <__ultoa_invert+0x7c>
    4b78:	49 5d       	subi	r20, 0xD9	; 217
    4b7a:	31 fd       	sbrc	r19, 1
    4b7c:	40 52       	subi	r20, 0x20	; 32
    4b7e:	41 93       	st	Z+, r20
    4b80:	02 d0       	rcall	.+4      	; 0x4b86 <__ultoa_invert+0x84>
    4b82:	a9 f7       	brne	.-22     	; 0x4b6e <__ultoa_invert+0x6c>
    4b84:	ea cf       	rjmp	.-44     	; 0x4b5a <__ultoa_invert+0x58>
    4b86:	b4 e0       	ldi	r27, 0x04	; 4
    4b88:	a6 95       	lsr	r26
    4b8a:	97 95       	ror	r25
    4b8c:	87 95       	ror	r24
    4b8e:	77 95       	ror	r23
    4b90:	67 95       	ror	r22
    4b92:	ba 95       	dec	r27
    4b94:	c9 f7       	brne	.-14     	; 0x4b88 <__ultoa_invert+0x86>
    4b96:	00 97       	sbiw	r24, 0x00	; 0
    4b98:	61 05       	cpc	r22, r1
    4b9a:	71 05       	cpc	r23, r1
    4b9c:	08 95       	ret
    4b9e:	9b 01       	movw	r18, r22
    4ba0:	ac 01       	movw	r20, r24
    4ba2:	0a 2e       	mov	r0, r26
    4ba4:	06 94       	lsr	r0
    4ba6:	57 95       	ror	r21
    4ba8:	47 95       	ror	r20
    4baa:	37 95       	ror	r19
    4bac:	27 95       	ror	r18
    4bae:	ba 95       	dec	r27
    4bb0:	c9 f7       	brne	.-14     	; 0x4ba4 <__ultoa_invert+0xa2>
    4bb2:	62 0f       	add	r22, r18
    4bb4:	73 1f       	adc	r23, r19
    4bb6:	84 1f       	adc	r24, r20
    4bb8:	95 1f       	adc	r25, r21
    4bba:	a0 1d       	adc	r26, r0
    4bbc:	08 95       	ret

00004bbe <eeprom_read_byte>:
    4bbe:	f9 99       	sbic	0x1f, 1	; 31
    4bc0:	fe cf       	rjmp	.-4      	; 0x4bbe <eeprom_read_byte>
    4bc2:	92 bd       	out	0x22, r25	; 34
    4bc4:	81 bd       	out	0x21, r24	; 33
    4bc6:	f8 9a       	sbi	0x1f, 0	; 31
    4bc8:	99 27       	eor	r25, r25
    4bca:	80 b5       	in	r24, 0x20	; 32
    4bcc:	08 95       	ret

00004bce <eeprom_read_dword>:
    4bce:	a6 e1       	ldi	r26, 0x16	; 22
    4bd0:	b0 e0       	ldi	r27, 0x00	; 0
    4bd2:	44 e0       	ldi	r20, 0x04	; 4
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <eeprom_read_blraw>

00004bda <eeprom_read_word>:
    4bda:	a8 e1       	ldi	r26, 0x18	; 24
    4bdc:	b0 e0       	ldi	r27, 0x00	; 0
    4bde:	42 e0       	ldi	r20, 0x02	; 2
    4be0:	50 e0       	ldi	r21, 0x00	; 0
    4be2:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <eeprom_read_blraw>

00004be6 <eeprom_update_byte>:
    4be6:	26 2f       	mov	r18, r22

00004be8 <eeprom_update_r18>:
    4be8:	f9 99       	sbic	0x1f, 1	; 31
    4bea:	fe cf       	rjmp	.-4      	; 0x4be8 <eeprom_update_r18>
    4bec:	92 bd       	out	0x22, r25	; 34
    4bee:	81 bd       	out	0x21, r24	; 33
    4bf0:	f8 9a       	sbi	0x1f, 0	; 31
    4bf2:	01 97       	sbiw	r24, 0x01	; 1
    4bf4:	00 b4       	in	r0, 0x20	; 32
    4bf6:	02 16       	cp	r0, r18
    4bf8:	39 f0       	breq	.+14     	; 0x4c08 <eeprom_update_r18+0x20>
    4bfa:	1f ba       	out	0x1f, r1	; 31
    4bfc:	20 bd       	out	0x20, r18	; 32
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	fa 9a       	sbi	0x1f, 2	; 31
    4c04:	f9 9a       	sbi	0x1f, 1	; 31
    4c06:	0f be       	out	0x3f, r0	; 63
    4c08:	08 95       	ret

00004c0a <eeprom_update_dword>:
    4c0a:	03 96       	adiw	r24, 0x03	; 3
    4c0c:	27 2f       	mov	r18, r23
    4c0e:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <eeprom_update_r18>
    4c12:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <eeprom_update_byte>
    4c16:	25 2f       	mov	r18, r21
    4c18:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <eeprom_update_r18>
    4c1c:	24 2f       	mov	r18, r20
    4c1e:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <eeprom_update_r18>

00004c22 <eeprom_update_word>:
    4c22:	01 96       	adiw	r24, 0x01	; 1
    4c24:	27 2f       	mov	r18, r23
    4c26:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <eeprom_update_r18>
    4c2a:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <eeprom_update_byte>

00004c2e <eeprom_write_byte>:
    4c2e:	26 2f       	mov	r18, r22

00004c30 <eeprom_write_r18>:
    4c30:	f9 99       	sbic	0x1f, 1	; 31
    4c32:	fe cf       	rjmp	.-4      	; 0x4c30 <eeprom_write_r18>
    4c34:	1f ba       	out	0x1f, r1	; 31
    4c36:	92 bd       	out	0x22, r25	; 34
    4c38:	81 bd       	out	0x21, r24	; 33
    4c3a:	20 bd       	out	0x20, r18	; 32
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	fa 9a       	sbi	0x1f, 2	; 31
    4c42:	f9 9a       	sbi	0x1f, 1	; 31
    4c44:	0f be       	out	0x3f, r0	; 63
    4c46:	01 96       	adiw	r24, 0x01	; 1
    4c48:	08 95       	ret

00004c4a <eeprom_write_dword>:
    4c4a:	24 2f       	mov	r18, r20
    4c4c:	0e 94 18 26 	call	0x4c30	; 0x4c30 <eeprom_write_r18>
    4c50:	25 2f       	mov	r18, r21
    4c52:	0e 94 18 26 	call	0x4c30	; 0x4c30 <eeprom_write_r18>
    4c56:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <eeprom_write_word>

00004c5a <eeprom_write_word>:
    4c5a:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <eeprom_write_byte>
    4c5e:	27 2f       	mov	r18, r23
    4c60:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <eeprom_write_r18>

00004c64 <eeprom_read_block>:
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22

00004c68 <eeprom_read_blraw>:
    4c68:	fc 01       	movw	r30, r24
    4c6a:	f9 99       	sbic	0x1f, 1	; 31
    4c6c:	fe cf       	rjmp	.-4      	; 0x4c6a <eeprom_read_blraw+0x2>
    4c6e:	06 c0       	rjmp	.+12     	; 0x4c7c <eeprom_read_blraw+0x14>
    4c70:	f2 bd       	out	0x22, r31	; 34
    4c72:	e1 bd       	out	0x21, r30	; 33
    4c74:	f8 9a       	sbi	0x1f, 0	; 31
    4c76:	31 96       	adiw	r30, 0x01	; 1
    4c78:	00 b4       	in	r0, 0x20	; 32
    4c7a:	0d 92       	st	X+, r0
    4c7c:	41 50       	subi	r20, 0x01	; 1
    4c7e:	50 40       	sbci	r21, 0x00	; 0
    4c80:	b8 f7       	brcc	.-18     	; 0x4c70 <eeprom_read_blraw+0x8>
    4c82:	08 95       	ret

00004c84 <__prologue_saves__>:
    4c84:	2f 92       	push	r2
    4c86:	3f 92       	push	r3
    4c88:	4f 92       	push	r4
    4c8a:	5f 92       	push	r5
    4c8c:	6f 92       	push	r6
    4c8e:	7f 92       	push	r7
    4c90:	8f 92       	push	r8
    4c92:	9f 92       	push	r9
    4c94:	af 92       	push	r10
    4c96:	bf 92       	push	r11
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	cd b7       	in	r28, 0x3d	; 61
    4caa:	de b7       	in	r29, 0x3e	; 62
    4cac:	ca 1b       	sub	r28, r26
    4cae:	db 0b       	sbc	r29, r27
    4cb0:	0f b6       	in	r0, 0x3f	; 63
    4cb2:	f8 94       	cli
    4cb4:	de bf       	out	0x3e, r29	; 62
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	09 94       	ijmp

00004cbc <__epilogue_restores__>:
    4cbc:	2a 88       	ldd	r2, Y+18	; 0x12
    4cbe:	39 88       	ldd	r3, Y+17	; 0x11
    4cc0:	48 88       	ldd	r4, Y+16	; 0x10
    4cc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cca:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ccc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cce:	b9 84       	ldd	r11, Y+9	; 0x09
    4cd0:	c8 84       	ldd	r12, Y+8	; 0x08
    4cd2:	df 80       	ldd	r13, Y+7	; 0x07
    4cd4:	ee 80       	ldd	r14, Y+6	; 0x06
    4cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    4cd8:	0c 81       	ldd	r16, Y+4	; 0x04
    4cda:	1b 81       	ldd	r17, Y+3	; 0x03
    4cdc:	aa 81       	ldd	r26, Y+2	; 0x02
    4cde:	b9 81       	ldd	r27, Y+1	; 0x01
    4ce0:	ce 0f       	add	r28, r30
    4ce2:	d1 1d       	adc	r29, r1
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	ed 01       	movw	r28, r26
    4cf0:	08 95       	ret

00004cf2 <_exit>:
    4cf2:	f8 94       	cli

00004cf4 <__stop_program>:
    4cf4:	ff cf       	rjmp	.-2      	; 0x4cf4 <__stop_program>
