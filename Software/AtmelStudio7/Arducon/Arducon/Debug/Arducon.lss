
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00006e22  00006ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e22  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  008002d8  008002d8  000070ae  2**0
                  ALLOC
  3 .eeprom       0000032b  00810000  00810000  000070ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  000073d9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007438  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000510  00000000  00000000  00007478  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007cc7  00000000  00000000  00007988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019cb  00000000  00000000  0000f64f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004cd0  00000000  00000000  0001101a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e5c  00000000  00000000  00015cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026b3  00000000  00000000  00016b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006832  00000000  00000000  000191fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000588  00000000  00000000  0001fa2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__dtors_end>
       4:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__vector_1>
       8:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
       c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      10:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__vector_4>
      14:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      18:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_6>
      1c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      20:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_8>
      24:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      28:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      2c:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__vector_11>
      30:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      34:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      38:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__vector_14>
      3c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      40:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      44:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      48:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__vector_18>
      4c:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_19>
      50:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      54:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__vector_21>
      58:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      5c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      60:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      64:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      68:	83 01       	movw	r16, r6
      6a:	8e 01       	movw	r16, r28
      6c:	99 01       	movw	r18, r18
      6e:	a4 01       	movw	r20, r8
      70:	af 01       	movw	r20, r30
      72:	ba 01       	movw	r22, r20
      74:	c5 01       	movw	r24, r10
      76:	d0 01       	movw	r26, r0
      78:	db 01       	movw	r26, r22
      7a:	e6 01       	movw	r28, r12
      7c:	f1 01       	movw	r30, r2
      7e:	48 02       	muls	r20, r24
      80:	48 02       	muls	r20, r24
      82:	fc 01       	movw	r30, r24
      84:	07 02       	muls	r16, r23
      86:	12 02       	muls	r17, r18
      88:	1d 02       	muls	r17, r29
      8a:	28 02       	muls	r18, r24
      8c:	33 02       	muls	r19, r19
      8e:	3e 02       	muls	r19, r30
      90:	53 02       	muls	r21, r19
      92:	57 02       	muls	r21, r23
      94:	5b 02       	muls	r21, r27
      96:	5f 02       	muls	r21, r31
      98:	63 02       	muls	r22, r19
      9a:	67 02       	muls	r22, r23
      9c:	6b 02       	muls	r22, r27
      9e:	70 02       	muls	r23, r16
      a0:	74 02       	muls	r23, r20
      a2:	8d 02       	muls	r24, r29
      a4:	8d 02       	muls	r24, r29
      a6:	78 02       	muls	r23, r24
      a8:	7c 02       	muls	r23, r28
      aa:	81 02       	muls	r24, r17
      ac:	85 02       	muls	r24, r21
      ae:	89 02       	muls	r24, r25
      b0:	9e 02       	muls	r25, r30
      b2:	a4 02       	muls	r26, r20
      b4:	aa 02       	muls	r26, r26
      b6:	b0 02       	muls	r27, r16
      b8:	b6 02       	muls	r27, r22
      ba:	bc 02       	muls	r27, r28
      bc:	c2 02       	muls	r28, r18
      be:	c8 02       	muls	r28, r24
      c0:	ce 02       	muls	r28, r30
      c2:	d4 02       	muls	r29, r20
      c4:	da 02       	muls	r29, r26
      c6:	fd 02       	muls	r31, r29
      c8:	fd 02       	muls	r31, r29
      ca:	e0 02       	muls	r30, r16
      cc:	e6 02       	muls	r30, r22
      ce:	ec 02       	muls	r30, r28
      d0:	f2 02       	muls	r31, r18
      d2:	f8 02       	muls	r31, r24
      d4:	60 05       	cpc	r22, r0
      d6:	bf 05       	cpc	r27, r15
      d8:	bf 05       	cpc	r27, r15
      da:	7d 05       	cpc	r23, r13
      dc:	a4 05       	cpc	r26, r4
      de:	5d 05       	cpc	r21, r13
      e0:	a7 05       	cpc	r26, r7
      e2:	ad 05       	cpc	r26, r13
      e4:	5a 05       	cpc	r21, r10
      e6:	b7 05       	cpc	r27, r7
      e8:	57 05       	cpc	r21, r7
      ea:	9e 05       	cpc	r25, r14
      ec:	a1 05       	cpc	r26, r1
      ee:	b0 05       	cpc	r27, r0
      f0:	08 06       	cpc	r0, r24
      f2:	da 05       	cpc	r29, r10
      f4:	0b 06       	cpc	r0, r27
      f6:	dd 05       	cpc	r29, r13
      f8:	e0 05       	cpc	r30, r0
      fa:	e3 05       	cpc	r30, r3
      fc:	e6 05       	cpc	r30, r6
      fe:	e9 05       	cpc	r30, r9
     100:	ec 05       	cpc	r30, r12
     102:	ef 05       	cpc	r30, r15
     104:	f2 05       	cpc	r31, r2
     106:	37 17       	cp	r19, r23
     108:	37 17       	cp	r19, r23
     10a:	37 17       	cp	r19, r23
     10c:	37 17       	cp	r19, r23
     10e:	37 17       	cp	r19, r23
     110:	b7 17       	cp	r27, r23
     112:	b7 17       	cp	r27, r23
     114:	55 17       	cp	r21, r21
     116:	55 17       	cp	r21, r21
     118:	55 17       	cp	r21, r21
     11a:	55 17       	cp	r21, r21
     11c:	55 17       	cp	r21, r21
     11e:	77 17       	cp	r23, r23
     120:	77 17       	cp	r23, r23
     122:	77 17       	cp	r23, r23
     124:	77 17       	cp	r23, r23
     126:	77 17       	cp	r23, r23
     128:	b7 17       	cp	r27, r23
     12a:	97 17       	cp	r25, r23
     12c:	59 24       	eor	r5, r9
     12e:	5b 24       	eor	r5, r11
     130:	b0 24       	eor	r11, r0
     132:	f1 24       	eor	r15, r1
     134:	f8 24       	eor	r15, r8
     136:	02 25       	eor	r16, r2
     138:	0b 25       	eor	r16, r11
     13a:	17 25       	eor	r17, r7
     13c:	93 25       	eor	r25, r3
     13e:	fe 25       	eor	r31, r14
     140:	84 26       	eor	r8, r20
     142:	cb 26       	eor	r12, r27
     144:	e3 27       	eor	r30, r19
     146:	3f 26       	eor	r3, r31
     148:	12 27       	eor	r17, r18
     14a:	9c 27       	eor	r25, r28
     14c:	33 27       	eor	r19, r19
     14e:	5d 27       	eor	r21, r29
     150:	57 25       	eor	r21, r7
     152:	6c 27       	eor	r22, r28
     154:	b8 24       	eor	r11, r8
     156:	59 24       	eor	r5, r9
     158:	5b 24       	eor	r5, r11
     15a:	89 24       	eor	r8, r9
     15c:	e5 27       	eor	r30, r21
     15e:	f8 24       	eor	r15, r8
     160:	02 25       	eor	r16, r2
     162:	0b 25       	eor	r16, r11
     164:	17 25       	eor	r17, r7
     166:	93 25       	eor	r25, r3
     168:	fe 25       	eor	r31, r14
     16a:	84 26       	eor	r8, r20
     16c:	cb 26       	eor	r12, r27
     16e:	e5 27       	eor	r30, r21
     170:	3f 26       	eor	r3, r31
     172:	12 27       	eor	r17, r18
     174:	9c 27       	eor	r25, r28
     176:	33 27       	eor	r19, r19
     178:	5d 27       	eor	r21, r29
     17a:	57 25       	eor	r21, r7
     17c:	6c 27       	eor	r22, r28
     17e:	b8 24       	eor	r11, r8
     180:	06 2d       	mov	r16, r6
     182:	ca 2c       	mov	r12, r10
     184:	f6 2c       	mov	r15, r6
     186:	0e 2d       	mov	r16, r14
     188:	fa 2c       	mov	r15, r10
     18a:	0e 2d       	mov	r16, r14
     18c:	da 2c       	mov	r13, r10
     18e:	c6 2c       	mov	r12, r6
     190:	d2 2c       	mov	r13, r2
     192:	d6 2c       	mov	r13, r6
     194:	0e 2d       	mov	r16, r14
     196:	ea 2c       	mov	r14, r10
     198:	be 2c       	mov	r11, r14
     19a:	ee 2c       	mov	r14, r14
     19c:	ba 2c       	mov	r11, r10
     19e:	ce 2c       	mov	r12, r14
     1a0:	92 2c       	mov	r9, r2
     1a2:	96 2c       	mov	r9, r6
     1a4:	9a 2c       	mov	r9, r10
     1a6:	9e 2c       	mov	r9, r14
     1a8:	a2 2c       	mov	r10, r2
     1aa:	a6 2c       	mov	r10, r6
     1ac:	aa 2c       	mov	r10, r10
     1ae:	ae 2c       	mov	r10, r14
     1b0:	b2 2c       	mov	r11, r2
     1b2:	b6 2c       	mov	r11, r6
     1b4:	de 2c       	mov	r13, r14
     1b6:	e2 2c       	mov	r14, r2
     1b8:	0a 2d       	mov	r16, r10
     1ba:	e6 2c       	mov	r14, r6
     1bc:	0e 2d       	mov	r16, r14
     1be:	c2 2c       	mov	r12, r2
     1c0:	fe 2c       	mov	r15, r14
     1c2:	12 2d       	mov	r17, r2
     1c4:	2e 2c       	mov	r2, r14
     1c6:	32 2c       	mov	r3, r2
     1c8:	36 2c       	mov	r3, r6
     1ca:	3a 2c       	mov	r3, r10
     1cc:	3e 2c       	mov	r3, r14
     1ce:	42 2c       	mov	r4, r2
     1d0:	46 2c       	mov	r4, r6
     1d2:	4a 2c       	mov	r4, r10
     1d4:	4e 2c       	mov	r4, r14
     1d6:	52 2c       	mov	r5, r2
     1d8:	56 2c       	mov	r5, r6
     1da:	5a 2c       	mov	r5, r10
     1dc:	5e 2c       	mov	r5, r14
     1de:	62 2c       	mov	r6, r2
     1e0:	66 2c       	mov	r6, r6
     1e2:	6a 2c       	mov	r6, r10
     1e4:	6e 2c       	mov	r6, r14
     1e6:	72 2c       	mov	r7, r2
     1e8:	76 2c       	mov	r7, r6
     1ea:	7a 2c       	mov	r7, r10
     1ec:	7e 2c       	mov	r7, r14
     1ee:	82 2c       	mov	r8, r2
     1f0:	86 2c       	mov	r8, r6
     1f2:	8a 2c       	mov	r8, r10
     1f4:	8e 2c       	mov	r8, r14
     1f6:	0e 2d       	mov	r16, r14
     1f8:	0e 2d       	mov	r16, r14
     1fa:	0e 2d       	mov	r16, r14
     1fc:	0e 2d       	mov	r16, r14
     1fe:	f2 2c       	mov	r15, r2
     200:	0e 2d       	mov	r16, r14
     202:	0e 2d       	mov	r16, r14
     204:	0e 2d       	mov	r16, r14
     206:	0e 2d       	mov	r16, r14
     208:	0e 2d       	mov	r16, r14
     20a:	0e 2d       	mov	r16, r14
     20c:	0e 2d       	mov	r16, r14
     20e:	0e 2d       	mov	r16, r14
     210:	0e 2d       	mov	r16, r14
     212:	0e 2d       	mov	r16, r14
     214:	0e 2d       	mov	r16, r14
     216:	0e 2d       	mov	r16, r14
     218:	0e 2d       	mov	r16, r14
     21a:	0e 2d       	mov	r16, r14
     21c:	0e 2d       	mov	r16, r14
     21e:	0e 2d       	mov	r16, r14
     220:	0e 2d       	mov	r16, r14
     222:	0e 2d       	mov	r16, r14
     224:	0e 2d       	mov	r16, r14
     226:	0e 2d       	mov	r16, r14
     228:	0e 2d       	mov	r16, r14
     22a:	0e 2d       	mov	r16, r14
     22c:	0e 2d       	mov	r16, r14
     22e:	0e 2d       	mov	r16, r14
     230:	0e 2d       	mov	r16, r14
     232:	0e 2d       	mov	r16, r14
     234:	0e 2d       	mov	r16, r14
     236:	0e 2d       	mov	r16, r14
     238:	02 2d       	mov	r16, r2
     23a:	05 a8       	ldd	r0, Z+53	; 0x35
     23c:	4c cd       	rjmp	.-1384   	; 0xfffffcd6 <__eeprom_end+0xff7ef9ab>
     23e:	b2 d4       	rcall	.+2404   	; 0xba4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x1c>
     240:	4e b9       	out	0x0e, r20	; 14
     242:	38 36       	cpi	r19, 0x68	; 104
     244:	a9 02       	muls	r26, r25
     246:	0c 50       	subi	r16, 0x0C	; 12
     248:	b9 91       	ld	r27, Y+
     24a:	86 88       	ldd	r8, Z+22	; 0x16
     24c:	08 3c       	cpi	r16, 0xC8	; 200
     24e:	a6 aa       	std	Z+54, r10	; 0x36
     250:	aa 2a       	or	r10, r26
     252:	be 00       	.word	0x00be	; ????
     254:	00 00       	nop
     256:	80 3f       	cpi	r24, 0xF0	; 240

00000258 <__ctors_start>:
     258:	02 2c       	mov	r0, r2

0000025a <__ctors_end>:
     25a:	17 2c       	mov	r1, r7

0000025c <__dtors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d8 e0       	ldi	r29, 0x08	; 8
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	12 e0       	ldi	r17, 0x02	; 2
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	e2 e2       	ldi	r30, 0x22	; 34
     270:	fe e6       	ldi	r31, 0x6E	; 110
     272:	02 c0       	rjmp	.+4      	; 0x278 <__do_copy_data+0x10>
     274:	05 90       	lpm	r0, Z+
     276:	0d 92       	st	X+, r0
     278:	a8 3d       	cpi	r26, 0xD8	; 216
     27a:	b1 07       	cpc	r27, r17
     27c:	d9 f7       	brne	.-10     	; 0x274 <__do_copy_data+0xc>

0000027e <__do_clear_bss>:
     27e:	25 e0       	ldi	r18, 0x05	; 5
     280:	a8 ed       	ldi	r26, 0xD8	; 216
     282:	b2 e0       	ldi	r27, 0x02	; 2
     284:	01 c0       	rjmp	.+2      	; 0x288 <.do_clear_bss_start>

00000286 <.do_clear_bss_loop>:
     286:	1d 92       	st	X+, r1

00000288 <.do_clear_bss_start>:
     288:	af 37       	cpi	r26, 0x7F	; 127
     28a:	b2 07       	cpc	r27, r18
     28c:	e1 f7       	brne	.-8      	; 0x286 <.do_clear_bss_loop>

0000028e <__do_global_ctors>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	cd e2       	ldi	r28, 0x2D	; 45
     292:	d1 e0       	ldi	r29, 0x01	; 1
     294:	04 c0       	rjmp	.+8      	; 0x29e <__do_global_ctors+0x10>
     296:	21 97       	sbiw	r28, 0x01	; 1
     298:	fe 01       	movw	r30, r28
     29a:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__tablejump2__>
     29e:	cc 32       	cpi	r28, 0x2C	; 44
     2a0:	d1 07       	cpc	r29, r17
     2a2:	c9 f7       	brne	.-14     	; 0x296 <__do_global_ctors+0x8>
     2a4:	0e 94 1e 2b 	call	0x563c	; 0x563c <main>
     2a8:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <__do_global_dtors>

000002ac <__bad_interrupt>:
     2ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b0 <month_length>:
     2b0:	62 30       	cpi	r22, 0x02	; 2
     2b2:	21 f4       	brne	.+8      	; 0x2bc <month_length+0xc>
     2b4:	0e 94 65 01 	call	0x2ca	; 0x2ca <is_leap_year>
     2b8:	84 5e       	subi	r24, 0xE4	; 228
     2ba:	08 95       	ret
     2bc:	68 30       	cpi	r22, 0x08	; 8
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <month_length+0x12>
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	61 70       	andi	r22, 0x01	; 1
     2c4:	8e e1       	ldi	r24, 0x1E	; 30
     2c6:	86 0f       	add	r24, r22
     2c8:	08 95       	ret

000002ca <is_leap_year>:
     2ca:	9c 01       	movw	r18, r24
     2cc:	23 70       	andi	r18, 0x03	; 3
     2ce:	33 27       	eor	r19, r19
     2d0:	23 2b       	or	r18, r19
     2d2:	59 f4       	brne	.+22     	; 0x2ea <is_leap_year+0x20>
     2d4:	64 e6       	ldi	r22, 0x64	; 100
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
     2dc:	89 2b       	or	r24, r25
     2de:	39 f4       	brne	.+14     	; 0x2ee <is_leap_year+0x24>
     2e0:	63 70       	andi	r22, 0x03	; 3
     2e2:	77 27       	eor	r23, r23
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	67 2b       	or	r22, r23
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <is_leap_year+0x26>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret

000002f2 <pinMode>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	84 31       	cpi	r24, 0x14	; 20
     2f6:	91 05       	cpc	r25, r1
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <pinMode+0xa>
     2fa:	ca c0       	rjmp	.+404    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     2fc:	fc 01       	movw	r30, r24
     2fe:	ec 5c       	subi	r30, 0xCC	; 204
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	11 f4       	brne	.+4      	; 0x30e <pinMode+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     30a:	50 9a       	sbi	0x0a, 0	; 10
     30c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     30e:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	11 f4       	brne	.+4      	; 0x318 <pinMode+0x26>
				{
					PORTD  |= (1 << PORTD0);
     314:	58 9a       	sbi	0x0b, 0	; 11
     316:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     318:	58 98       	cbi	0x0b, 0	; 11
     31a:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     31c:	61 30       	cpi	r22, 0x01	; 1
     31e:	11 f4       	brne	.+4      	; 0x324 <pinMode+0x32>
			{
				DDRD  |= (1 << PORTD1);
     320:	51 9a       	sbi	0x0a, 1	; 10
     322:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     324:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     326:	63 30       	cpi	r22, 0x03	; 3
     328:	11 f4       	brne	.+4      	; 0x32e <pinMode+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     32a:	59 9a       	sbi	0x0b, 1	; 11
     32c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     32e:	59 98       	cbi	0x0b, 1	; 11
     330:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	11 f4       	brne	.+4      	; 0x33a <pinMode+0x48>
			{
				DDRD  |= (1 << PORTD2);
     336:	52 9a       	sbi	0x0a, 2	; 10
     338:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     33a:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	11 f4       	brne	.+4      	; 0x344 <pinMode+0x52>
				{
					PORTD  |= (1 << PORTD2);
     340:	5a 9a       	sbi	0x0b, 2	; 11
     342:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     344:	5a 98       	cbi	0x0b, 2	; 11
     346:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <pinMode+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     34c:	53 9a       	sbi	0x0a, 3	; 10
     34e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     350:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	11 f4       	brne	.+4      	; 0x35a <pinMode+0x68>
				{
					PORTD  |= (1 << PORTD3);
     356:	5b 9a       	sbi	0x0b, 3	; 11
     358:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     35a:	5b 98       	cbi	0x0b, 3	; 11
     35c:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     35e:	61 30       	cpi	r22, 0x01	; 1
     360:	11 f4       	brne	.+4      	; 0x366 <pinMode+0x74>
			{
				DDRD  |= (1 << PORTD4);
     362:	54 9a       	sbi	0x0a, 4	; 10
     364:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     366:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     368:	63 30       	cpi	r22, 0x03	; 3
     36a:	11 f4       	brne	.+4      	; 0x370 <pinMode+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     36c:	5c 9a       	sbi	0x0b, 4	; 11
     36e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     370:	5c 98       	cbi	0x0b, 4	; 11
     372:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     374:	61 30       	cpi	r22, 0x01	; 1
     376:	11 f4       	brne	.+4      	; 0x37c <pinMode+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     378:	55 9a       	sbi	0x0a, 5	; 10
     37a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     37c:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	11 f4       	brne	.+4      	; 0x386 <pinMode+0x94>
				{
					PORTD  |= (1 << PORTD5);
     382:	5d 9a       	sbi	0x0b, 5	; 11
     384:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     386:	5d 98       	cbi	0x0b, 5	; 11
     388:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     38a:	61 30       	cpi	r22, 0x01	; 1
     38c:	11 f4       	brne	.+4      	; 0x392 <pinMode+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     38e:	56 9a       	sbi	0x0a, 6	; 10
     390:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     392:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     394:	63 30       	cpi	r22, 0x03	; 3
     396:	11 f4       	brne	.+4      	; 0x39c <pinMode+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     398:	5e 9a       	sbi	0x0b, 6	; 11
     39a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     39c:	5e 98       	cbi	0x0b, 6	; 11
     39e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	11 f4       	brne	.+4      	; 0x3a8 <pinMode+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     3a4:	57 9a       	sbi	0x0a, 7	; 10
     3a6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     3a8:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     3aa:	63 30       	cpi	r22, 0x03	; 3
     3ac:	11 f4       	brne	.+4      	; 0x3b2 <pinMode+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     3ae:	5f 9a       	sbi	0x0b, 7	; 11
     3b0:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     3b2:	5f 98       	cbi	0x0b, 7	; 11
     3b4:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     3b6:	61 30       	cpi	r22, 0x01	; 1
     3b8:	11 f4       	brne	.+4      	; 0x3be <pinMode+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     3ba:	20 9a       	sbi	0x04, 0	; 4
     3bc:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     3be:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     3c0:	63 30       	cpi	r22, 0x03	; 3
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <pinMode+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     3c4:	28 9a       	sbi	0x05, 0	; 5
     3c6:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     3c8:	28 98       	cbi	0x05, 0	; 5
     3ca:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     3cc:	61 30       	cpi	r22, 0x01	; 1
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <pinMode+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3d0:	21 9a       	sbi	0x04, 1	; 4
     3d2:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3d4:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3d6:	63 30       	cpi	r22, 0x03	; 3
     3d8:	11 f4       	brne	.+4      	; 0x3de <pinMode+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3da:	29 9a       	sbi	0x05, 1	; 5
     3dc:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3de:	29 98       	cbi	0x05, 1	; 5
     3e0:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3e2:	61 30       	cpi	r22, 0x01	; 1
     3e4:	11 f4       	brne	.+4      	; 0x3ea <pinMode+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3e6:	22 9a       	sbi	0x04, 2	; 4
     3e8:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3ea:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3ec:	63 30       	cpi	r22, 0x03	; 3
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <pinMode+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3f0:	2a 9a       	sbi	0x05, 2	; 5
     3f2:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3f4:	2a 98       	cbi	0x05, 2	; 5
     3f6:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3f8:	61 30       	cpi	r22, 0x01	; 1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
			{
				DDRB  |= (1 << PORTB5);
     3fc:	25 9a       	sbi	0x04, 5	; 4
     3fe:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     400:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     402:	63 30       	cpi	r22, 0x03	; 3
     404:	11 f4       	brne	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				{
					PORTD  |= (1 << PORTB5);
     406:	5d 9a       	sbi	0x0b, 5	; 11
     408:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     40a:	5d 98       	cbi	0x0b, 5	; 11
     40c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     40e:	61 30       	cpi	r22, 0x01	; 1
     410:	11 f4       	brne	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				DDRC  |= (1 << PORTC0);
     412:	38 9a       	sbi	0x07, 0	; 7
     414:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     416:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     418:	63 30       	cpi	r22, 0x03	; 3
     41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					PORTC  |= (1 << PORTC0);
     41c:	40 9a       	sbi	0x08, 0	; 8
     41e:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     420:	40 98       	cbi	0x08, 0	; 8
     422:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     424:	61 30       	cpi	r22, 0x01	; 1
     426:	11 f4       	brne	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				DDRC  |= (1 << PORTC1);
     428:	39 9a       	sbi	0x07, 1	; 7
     42a:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     42c:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     42e:	63 30       	cpi	r22, 0x03	; 3
     430:	11 f4       	brne	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
				{
					PORTC  |= (1 << PORTC1);
     432:	41 9a       	sbi	0x08, 1	; 8
     434:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     436:	41 98       	cbi	0x08, 1	; 8
     438:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     43a:	61 30       	cpi	r22, 0x01	; 1
     43c:	11 f4       	brne	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				DDRC  |= (1 << PORTC2);
     43e:	3a 9a       	sbi	0x07, 2	; 7
     440:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     442:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     444:	63 30       	cpi	r22, 0x03	; 3
     446:	11 f4       	brne	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				{
					PORTC  |= (1 << PORTC2);
     448:	42 9a       	sbi	0x08, 2	; 8
     44a:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     44c:	42 98       	cbi	0x08, 2	; 8
     44e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     450:	61 30       	cpi	r22, 0x01	; 1
     452:	11 f4       	brne	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
			{
				DDRC  |= (1 << PORTC3);
     454:	3b 9a       	sbi	0x07, 3	; 7
     456:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     458:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     45a:	63 30       	cpi	r22, 0x03	; 3
     45c:	11 f4       	brne	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				{
					PORTC  |= (1 << PORTC3);
     45e:	43 9a       	sbi	0x08, 3	; 8
     460:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     462:	43 98       	cbi	0x08, 3	; 8
     464:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     466:	61 30       	cpi	r22, 0x01	; 1
     468:	11 f4       	brne	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				DDRC  |= (1 << PORTC4);
     46a:	3c 9a       	sbi	0x07, 4	; 7
     46c:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     46e:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     470:	63 30       	cpi	r22, 0x03	; 3
     472:	11 f4       	brne	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				{
					PORTC  |= (1 << PORTC4);
     474:	44 9a       	sbi	0x08, 4	; 8
     476:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     478:	44 98       	cbi	0x08, 4	; 8
     47a:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     47c:	61 30       	cpi	r22, 0x01	; 1
     47e:	11 f4       	brne	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			{
				DDRC  |= (1 << PORTC5);
     480:	3d 9a       	sbi	0x07, 5	; 7
     482:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     484:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     486:	63 30       	cpi	r22, 0x03	; 3
     488:	11 f4       	brne	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
				{
					PORTC  |= (1 << PORTC5);
     48a:	45 9a       	sbi	0x08, 5	; 8
     48c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     48e:	45 98       	cbi	0x08, 5	; 8
     490:	08 95       	ret

00000492 <digitalRead>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	fc 01       	movw	r30, r24
     496:	32 97       	sbiw	r30, 0x02	; 2
     498:	e0 31       	cpi	r30, 0x10	; 16
     49a:	f1 05       	cpc	r31, r1
     49c:	f0 f5       	brcc	.+124    	; 0x51a <digitalRead+0x88>
     49e:	e8 5b       	subi	r30, 0xB8	; 184
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     4a6:	29 b1       	in	r18, 0x09	; 9
     4a8:	24 70       	andi	r18, 0x04	; 4
     4aa:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ac:	38 c0       	rjmp	.+112    	; 0x51e <digitalRead+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     4ae:	29 b1       	in	r18, 0x09	; 9
     4b0:	28 70       	andi	r18, 0x08	; 8
     4b2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b4:	34 c0       	rjmp	.+104    	; 0x51e <digitalRead+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     4b6:	29 b1       	in	r18, 0x09	; 9
     4b8:	20 71       	andi	r18, 0x10	; 16
     4ba:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4bc:	30 c0       	rjmp	.+96     	; 0x51e <digitalRead+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     4be:	29 b1       	in	r18, 0x09	; 9
     4c0:	20 72       	andi	r18, 0x20	; 32
     4c2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c4:	2c c0       	rjmp	.+88     	; 0x51e <digitalRead+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     4c6:	29 b1       	in	r18, 0x09	; 9
     4c8:	20 74       	andi	r18, 0x40	; 64
     4ca:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4cc:	28 c0       	rjmp	.+80     	; 0x51e <digitalRead+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     4ce:	29 b1       	in	r18, 0x09	; 9
     4d0:	20 78       	andi	r18, 0x80	; 128
     4d2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d4:	24 c0       	rjmp	.+72     	; 0x51e <digitalRead+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4d6:	83 b1       	in	r24, 0x03	; 3
     4d8:	28 2f       	mov	r18, r24
     4da:	21 70       	andi	r18, 0x01	; 1
     4dc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4de:	1f c0       	rjmp	.+62     	; 0x51e <digitalRead+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4e0:	23 b1       	in	r18, 0x03	; 3
     4e2:	22 70       	andi	r18, 0x02	; 2
     4e4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e6:	1b c0       	rjmp	.+54     	; 0x51e <digitalRead+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4e8:	23 b1       	in	r18, 0x03	; 3
     4ea:	24 70       	andi	r18, 0x04	; 4
     4ec:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ee:	17 c0       	rjmp	.+46     	; 0x51e <digitalRead+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4f0:	23 b1       	in	r18, 0x03	; 3
     4f2:	20 72       	andi	r18, 0x20	; 32
     4f4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4f6:	13 c0       	rjmp	.+38     	; 0x51e <digitalRead+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4f8:	86 b1       	in	r24, 0x06	; 6
     4fa:	28 2f       	mov	r18, r24
     4fc:	21 70       	andi	r18, 0x01	; 1
     4fe:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     500:	0e c0       	rjmp	.+28     	; 0x51e <digitalRead+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     502:	26 b1       	in	r18, 0x06	; 6
     504:	22 70       	andi	r18, 0x02	; 2
     506:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     508:	0a c0       	rjmp	.+20     	; 0x51e <digitalRead+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     50a:	26 b1       	in	r18, 0x06	; 6
     50c:	24 70       	andi	r18, 0x04	; 4
     50e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     510:	06 c0       	rjmp	.+12     	; 0x51e <digitalRead+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     512:	26 b1       	in	r18, 0x06	; 6
     514:	28 70       	andi	r18, 0x08	; 8
     516:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     518:	02 c0       	rjmp	.+4      	; 0x51e <digitalRead+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	23 2b       	or	r18, r19
     522:	09 f4       	brne	.+2      	; 0x526 <digitalRead+0x94>
     524:	80 e0       	ldi	r24, 0x00	; 0
}
     526:	08 95       	ret

00000528 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	82 31       	cpi	r24, 0x12	; 18
     52c:	91 05       	cpc	r25, r1
     52e:	08 f0       	brcs	.+2      	; 0x532 <digitalWrite+0xa>
     530:	64 c0       	rjmp	.+200    	; 0x5fa <digitalWrite+0xd2>
     532:	fc 01       	movw	r30, r24
     534:	e8 5a       	subi	r30, 0xA8	; 168
     536:	ff 4f       	sbci	r31, 0xFF	; 255
     538:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     53c:	66 23       	and	r22, r22
     53e:	11 f0       	breq	.+4      	; 0x544 <digitalWrite+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     540:	58 9a       	sbi	0x0b, 0	; 11
     542:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     544:	58 98       	cbi	0x0b, 0	; 11
     546:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     548:	66 23       	and	r22, r22
     54a:	11 f0       	breq	.+4      	; 0x550 <digitalWrite+0x28>
			{
				PORTD  |= (1 << PORTD1);
     54c:	59 9a       	sbi	0x0b, 1	; 11
     54e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     550:	59 98       	cbi	0x0b, 1	; 11
     552:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     554:	66 23       	and	r22, r22
     556:	11 f0       	breq	.+4      	; 0x55c <digitalWrite+0x34>
			{
				PORTD  |= (1 << PORTD2);
     558:	5a 9a       	sbi	0x0b, 2	; 11
     55a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     55c:	5a 98       	cbi	0x0b, 2	; 11
     55e:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     560:	66 23       	and	r22, r22
     562:	11 f0       	breq	.+4      	; 0x568 <digitalWrite+0x40>
			{
				PORTD  |= (1 << PORTD3);
     564:	5b 9a       	sbi	0x0b, 3	; 11
     566:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     568:	5b 98       	cbi	0x0b, 3	; 11
     56a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     56c:	66 23       	and	r22, r22
     56e:	11 f0       	breq	.+4      	; 0x574 <digitalWrite+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     570:	5c 9a       	sbi	0x0b, 4	; 11
     572:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     574:	5c 98       	cbi	0x0b, 4	; 11
     576:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     578:	66 23       	and	r22, r22
     57a:	11 f0       	breq	.+4      	; 0x580 <digitalWrite+0x58>
			{
				PORTD  |= (1 << PORTD5);
     57c:	5d 9a       	sbi	0x0b, 5	; 11
     57e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     580:	5d 98       	cbi	0x0b, 5	; 11
     582:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     584:	66 23       	and	r22, r22
     586:	11 f0       	breq	.+4      	; 0x58c <digitalWrite+0x64>
			{
				PORTD  |= (1 << PORTD6);
     588:	5e 9a       	sbi	0x0b, 6	; 11
     58a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     58c:	5e 98       	cbi	0x0b, 6	; 11
     58e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     590:	66 23       	and	r22, r22
     592:	11 f0       	breq	.+4      	; 0x598 <digitalWrite+0x70>
			{
				PORTD  |= (1 << PORTD7);
     594:	5f 9a       	sbi	0x0b, 7	; 11
     596:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     598:	5f 98       	cbi	0x0b, 7	; 11
     59a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     59c:	66 23       	and	r22, r22
     59e:	11 f0       	breq	.+4      	; 0x5a4 <digitalWrite+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     5a0:	28 9a       	sbi	0x05, 0	; 5
     5a2:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     5a4:	28 98       	cbi	0x05, 0	; 5
     5a6:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     5a8:	66 23       	and	r22, r22
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <digitalWrite+0x88>
			{
				PORTB  |= (1 << PORTB1);
     5ac:	29 9a       	sbi	0x05, 1	; 5
     5ae:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     5b0:	29 98       	cbi	0x05, 1	; 5
     5b2:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     5b4:	66 23       	and	r22, r22
     5b6:	11 f0       	breq	.+4      	; 0x5bc <digitalWrite+0x94>
			{
				PORTB  |= (1 << PORTB2);
     5b8:	2a 9a       	sbi	0x05, 2	; 5
     5ba:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     5bc:	2a 98       	cbi	0x05, 2	; 5
     5be:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     5c0:	66 23       	and	r22, r22
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <digitalWrite+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     5c4:	2d 9a       	sbi	0x05, 5	; 5
     5c6:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     5c8:	2d 98       	cbi	0x05, 5	; 5
     5ca:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     5cc:	66 23       	and	r22, r22
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <digitalWrite+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5d0:	40 9a       	sbi	0x08, 0	; 8
     5d2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5d4:	40 98       	cbi	0x08, 0	; 8
     5d6:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5d8:	66 23       	and	r22, r22
     5da:	11 f0       	breq	.+4      	; 0x5e0 <digitalWrite+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5dc:	41 9a       	sbi	0x08, 1	; 8
     5de:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5e0:	41 98       	cbi	0x08, 1	; 8
     5e2:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5e4:	66 23       	and	r22, r22
     5e6:	11 f0       	breq	.+4      	; 0x5ec <digitalWrite+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5e8:	42 9a       	sbi	0x08, 2	; 8
     5ea:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5ec:	42 98       	cbi	0x08, 2	; 8
     5ee:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5f0:	66 23       	and	r22, r22
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <digitalWrite+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5f4:	43 9a       	sbi	0x08, 3	; 8
     5f6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5f8:	43 98       	cbi	0x08, 3	; 8
     5fa:	08 95       	ret

000005fc <_Z7bcd2dech>:

uint8_t bcd2dec(uint8_t val)
{
	uint8_t result = 10 * (val >> 4) + (val & 0x0F);

	return( result);
     5fc:	98 2f       	mov	r25, r24
     5fe:	96 95       	lsr	r25
     600:	96 95       	lsr	r25
     602:	96 95       	lsr	r25
     604:	9e 71       	andi	r25, 0x1E	; 30
     606:	29 2f       	mov	r18, r25
     608:	22 0f       	add	r18, r18
     60a:	22 0f       	add	r18, r18
     60c:	92 0f       	add	r25, r18
     60e:	8f 70       	andi	r24, 0x0F	; 15
}
     610:	89 0f       	add	r24, r25
     612:	08 95       	ret

00000614 <_Z8char2bcdPc>:

uint8_t char2bcd(char c[])
{
	uint8_t result = (c[1] - '0') + ((c[0] - '0') << 4);

	return( result);
     614:	fc 01       	movw	r30, r24
     616:	20 81       	ld	r18, Z
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	80 53       	subi	r24, 0x30	; 48
}
     61c:	f0 e1       	ldi	r31, 0x10	; 16
     61e:	2f 9f       	mul	r18, r31
     620:	80 0d       	add	r24, r0
     622:	11 24       	eor	r1, r1
     624:	08 95       	ret

00000626 <_Z14epoch_from_ltmP2tm>:

		return(epoch);
	}
	
	time_t epoch_from_ltm(tm *ltm)
	{
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
		time_t epoch = ltm->tm_sec + ltm->tm_min * 60 + ltm->tm_hour * 3600L + ltm->tm_yday * 86400L +
		(ltm->tm_year - 70) * 31536000L + ((ltm->tm_year - 69) / 4) * 86400L -
     634:	ee 81       	ldd	r30, Y+6	; 0x06
     636:	ff 81       	ldd	r31, Y+7	; 0x07
		((ltm->tm_year - 1) / 100) * 86400L + ((ltm->tm_year + 299) / 400) * 86400L;
		
		return(epoch);
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	c8 80       	ld	r12, Y
     63c:	0c 2c       	mov	r0, r12
     63e:	00 0c       	add	r0, r0
     640:	dd 08       	sbc	r13, r13
     642:	9c e3       	ldi	r25, 0x3C	; 60
     644:	89 02       	muls	r24, r25
     646:	c0 0c       	add	r12, r0
     648:	d1 1c       	adc	r13, r1
     64a:	11 24       	eor	r1, r1
     64c:	0d 2c       	mov	r0, r13
     64e:	00 0c       	add	r0, r0
     650:	ee 08       	sbc	r14, r14
     652:	ff 08       	sbc	r15, r15
     654:	aa 81       	ldd	r26, Y+2	; 0x02
     656:	0a 2e       	mov	r0, r26
     658:	00 0c       	add	r0, r0
     65a:	bb 0b       	sbc	r27, r27
     65c:	20 e1       	ldi	r18, 0x10	; 16
     65e:	3e e0       	ldi	r19, 0x0E	; 14
     660:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__usmulhisi3>
     664:	c6 0e       	add	r12, r22
     666:	d7 1e       	adc	r13, r23
     668:	e8 1e       	adc	r14, r24
     66a:	f9 1e       	adc	r15, r25
     66c:	a8 85       	ldd	r26, Y+8	; 0x08
     66e:	b9 85       	ldd	r27, Y+9	; 0x09
     670:	20 e8       	ldi	r18, 0x80	; 128
     672:	31 e5       	ldi	r19, 0x51	; 81
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 03 32 	call	0x6406	; 0x6406 <__mulshisi3>
     67c:	c6 0e       	add	r12, r22
     67e:	d7 1e       	adc	r13, r23
     680:	e8 1e       	adc	r14, r24
     682:	f9 1e       	adc	r15, r25
     684:	df 01       	movw	r26, r30
     686:	a6 54       	subi	r26, 0x46	; 70
     688:	b1 09       	sbc	r27, r1
     68a:	20 e8       	ldi	r18, 0x80	; 128
     68c:	33 e3       	ldi	r19, 0x33	; 51
     68e:	41 ee       	ldi	r20, 0xE1	; 225
     690:	51 e0       	ldi	r21, 0x01	; 1
     692:	0e 94 03 32 	call	0x6406	; 0x6406 <__mulshisi3>
     696:	c6 0e       	add	r12, r22
     698:	d7 1e       	adc	r13, r23
     69a:	e8 1e       	adc	r14, r24
     69c:	f9 1e       	adc	r15, r25
     69e:	cf 01       	movw	r24, r30
     6a0:	85 54       	subi	r24, 0x45	; 69
     6a2:	91 09       	sbc	r25, r1
     6a4:	dc 01       	movw	r26, r24
     6a6:	0a f4       	brpl	.+2      	; 0x6aa <_Z14epoch_from_ltmP2tm+0x84>
     6a8:	13 96       	adiw	r26, 0x03	; 3
     6aa:	b5 95       	asr	r27
     6ac:	a7 95       	ror	r26
     6ae:	b5 95       	asr	r27
     6b0:	a7 95       	ror	r26
     6b2:	20 e8       	ldi	r18, 0x80	; 128
     6b4:	31 e5       	ldi	r19, 0x51	; 81
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	0e 94 03 32 	call	0x6406	; 0x6406 <__mulshisi3>
     6be:	c6 0e       	add	r12, r22
     6c0:	d7 1e       	adc	r13, r23
     6c2:	e8 1e       	adc	r14, r24
     6c4:	f9 1e       	adc	r15, r25
     6c6:	cf 01       	movw	r24, r30
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	64 e6       	ldi	r22, 0x64	; 100
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
     6d2:	db 01       	movw	r26, r22
     6d4:	20 e8       	ldi	r18, 0x80	; 128
     6d6:	3e ea       	ldi	r19, 0xAE	; 174
     6d8:	4e ef       	ldi	r20, 0xFE	; 254
     6da:	5f ef       	ldi	r21, 0xFF	; 255
     6dc:	0e 94 03 32 	call	0x6406	; 0x6406 <__mulshisi3>
     6e0:	c6 0e       	add	r12, r22
     6e2:	d7 1e       	adc	r13, r23
     6e4:	e8 1e       	adc	r14, r24
     6e6:	f9 1e       	adc	r15, r25
     6e8:	cf 01       	movw	r24, r30
     6ea:	85 5d       	subi	r24, 0xD5	; 213
     6ec:	9e 4f       	sbci	r25, 0xFE	; 254
     6ee:	60 e9       	ldi	r22, 0x90	; 144
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
     6f6:	db 01       	movw	r26, r22
     6f8:	20 e8       	ldi	r18, 0x80	; 128
     6fa:	31 e5       	ldi	r19, 0x51	; 81
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	0e 94 03 32 	call	0x6406	; 0x6406 <__mulshisi3>
     704:	6c 0d       	add	r22, r12
     706:	7d 1d       	adc	r23, r13
     708:	8e 1d       	adc	r24, r14
     70a:	9f 1d       	adc	r25, r15
	}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
     718:	08 95       	ret

0000071a <_Z13RTC_get_epochv>:

	time_t RTC_get_epoch(void)
	{
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	63 97       	sbiw	r28, 0x13	; 19
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
		time_t epoch = 0;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
     738:	ae 01       	movw	r20, r28
     73a:	4f 5f       	subi	r20, 0xFF	; 255
     73c:	5f 4f       	sbci	r21, 0xFF	; 255
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	da 01       	movw	r26, r20
     742:	1d 92       	st	X+, r1
     744:	8a 95       	dec	r24
     746:	e9 f7       	brne	.-6      	; 0x742 <_Z13RTC_get_epochv+0x28>

		if(!i2c_device_read(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7))
     748:	27 e0       	ldi	r18, 0x07	; 7
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	80 ed       	ldi	r24, 0xD0	; 208
     74e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <i2c_device_read>
     752:	81 11       	cpse	r24, r1
     754:	76 c0       	rjmp	.+236    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		{
			struct tm ltm = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
     756:	fe 01       	movw	r30, r28
     758:	38 96       	adiw	r30, 0x08	; 8
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	df 01       	movw	r26, r30
     75e:	1d 92       	st	X+, r1
     760:	8a 95       	dec	r24
     762:	e9 f7       	brne	.-6      	; 0x75e <_Z13RTC_get_epochv+0x44>
			uint8_t hour10;
			uint8_t hour;
			BOOL am_pm;
			BOOL twelvehour;

			am_pm = ((data[2] >> 5) & 0x01);
     764:	2b 81       	ldd	r18, Y+3	; 0x03
     766:	42 2f       	mov	r20, r18
     768:	50 e0       	ldi	r21, 0x00	; 0
			hour10 = ((data[2] >> 4) & 0x01);
     76a:	ca 01       	movw	r24, r20
     76c:	95 95       	asr	r25
     76e:	87 95       	ror	r24
     770:	95 95       	asr	r25
     772:	87 95       	ror	r24
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	95 95       	asr	r25
     77a:	87 95       	ror	r24
     77c:	81 70       	andi	r24, 0x01	; 1
			hour = (data[2] & 0x0f);
     77e:	2f 70       	andi	r18, 0x0F	; 15

			twelvehour = ((data[2] >> 6) & 0x01);

			if(!twelvehour && am_pm)
     780:	ba 01       	movw	r22, r20
     782:	06 2e       	mov	r0, r22
     784:	67 2f       	mov	r22, r23
     786:	00 0c       	add	r0, r0
     788:	66 1f       	adc	r22, r22
     78a:	77 0b       	sbc	r23, r23
     78c:	00 0c       	add	r0, r0
     78e:	66 1f       	adc	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	60 fd       	sbrc	r22, 0
     794:	0c c0       	rjmp	.+24     	; 0x7ae <_Z13RTC_get_epochv+0x94>
     796:	55 95       	asr	r21
     798:	47 95       	ror	r20
     79a:	55 95       	asr	r21
     79c:	47 95       	ror	r20
     79e:	55 95       	asr	r21
     7a0:	47 95       	ror	r20
     7a2:	55 95       	asr	r21
     7a4:	47 95       	ror	r20
     7a6:	55 95       	asr	r21
     7a8:	47 95       	ror	r20
     7aa:	40 fd       	sbrc	r20, 0
			{
				hour10 = 2;
     7ac:	82 e0       	ldi	r24, 0x02	; 2
			}
			
			hours = 10 * hour10 + hour;
     7ae:	88 0f       	add	r24, r24
     7b0:	d8 2e       	mov	r13, r24
     7b2:	dd 0c       	add	r13, r13
     7b4:	dd 0c       	add	r13, r13
     7b6:	8d 0d       	add	r24, r13
     7b8:	d8 2e       	mov	r13, r24
     7ba:	d2 0e       	add	r13, r18
			
			year += (int16_t)bcd2dec(data[6]);
     7bc:	8f 81       	ldd	r24, Y+7	; 0x07
     7be:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     7c2:	e8 2e       	mov	r14, r24
     7c4:	f1 2c       	mov	r15, r1
			ltm.tm_year = year;                         /* year since 1900 */
     7c6:	c7 01       	movw	r24, r14
     7c8:	8c 59       	subi	r24, 0x9C	; 156
     7ca:	9f 4f       	sbci	r25, 0xFF	; 255
     7cc:	9f 87       	std	Y+15, r25	; 0x0f
     7ce:	8e 87       	std	Y+14, r24	; 0x0e

			year += 1900;                               /* adjust year to calendar year */
     7d0:	b0 e3       	ldi	r27, 0x30	; 48
     7d2:	eb 1a       	sub	r14, r27
     7d4:	b8 ef       	ldi	r27, 0xF8	; 248
     7d6:	fb 0a       	sbc	r15, r27

			month = bcd2dec(data[5]);
     7d8:	8e 81       	ldd	r24, Y+6	; 0x06
     7da:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     7de:	08 2f       	mov	r16, r24
			ltm.tm_mon = month - 1;                     /* mon 0 to 11 */
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	80 0f       	add	r24, r16
     7e4:	8d 87       	std	Y+13, r24	; 0x0d

			date = bcd2dec(data[4]);
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
			ltm.tm_mday = date;                         /* month day 1 to 31 */
     7ec:	8b 87       	std	Y+11, r24	; 0x0b

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     7ee:	02 30       	cpi	r16, 0x02	; 2
     7f0:	70 f0       	brcs	.+28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7f2:	11 e0       	ldi	r17, 0x01	; 1
			{
				ltm.tm_yday += month_length(year, mon);;
     7f4:	61 2f       	mov	r22, r17
     7f6:	c7 01       	movw	r24, r14
     7f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <month_length>
     7fc:	28 89       	ldd	r18, Y+16	; 0x10
     7fe:	39 89       	ldd	r19, Y+17	; 0x11
     800:	28 0f       	add	r18, r24
     802:	31 1d       	adc	r19, r1
     804:	39 8b       	std	Y+17, r19	; 0x11
     806:	28 8b       	std	Y+16, r18	; 0x10

			date = bcd2dec(data[4]);
			ltm.tm_mday = date;                         /* month day 1 to 31 */

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     808:	1f 5f       	subi	r17, 0xFF	; 255
     80a:	01 13       	cpse	r16, r17
     80c:	f3 cf       	rjmp	.-26     	; 0x7f4 <_Z13RTC_get_epochv+0xda>
			{
				ltm.tm_yday += month_length(year, mon);;
			}

			ltm.tm_yday += (ltm.tm_mday - 1);
     80e:	8b 85       	ldd	r24, Y+11	; 0x0b
     810:	08 2e       	mov	r0, r24
     812:	00 0c       	add	r0, r0
     814:	99 0b       	sbc	r25, r25
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	28 89       	ldd	r18, Y+16	; 0x10
     81a:	39 89       	ldd	r19, Y+17	; 0x11
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	99 8b       	std	Y+17, r25	; 0x11
     822:	88 8b       	std	Y+16, r24	; 0x10

			seconds = bcd2dec(data[0]);
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     82a:	18 2f       	mov	r17, r24
			minutes = bcd2dec(data[1]);
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>

			ltm.tm_hour = hours;
     832:	da 86       	std	Y+10, r13	; 0x0a
			ltm.tm_min = minutes;
     834:	89 87       	std	Y+9, r24	; 0x09
			ltm.tm_sec = seconds;
     836:	18 87       	std	Y+8, r17	; 0x08

			epoch = epoch_from_ltm(&ltm);
     838:	ce 01       	movw	r24, r28
     83a:	08 96       	adiw	r24, 0x08	; 8
     83c:	0e 94 13 03 	call	0x626	; 0x626 <_Z14epoch_from_ltmP2tm>
     840:	03 c0       	rjmp	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		return(epoch);
	}

	time_t RTC_get_epoch(void)
	{
		time_t epoch = 0;
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	cb 01       	movw	r24, r22

			epoch = epoch_from_ltm(&ltm);
		}

		return( epoch);
	}
     848:	63 96       	adiw	r28, 0x13	; 19
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	08 95       	ret

00000864 <_Z13RTC_get_epochPbPc>:

	
/* Returns the UNIX epoch value for the character string passed in datetime. If datetime is null then it returns
the UNIX epoch for the time held in the DS3231 RTC. If error is not null then it holds 1 if an error occurred */	
	time_t RTC_get_epoch(bool *error, char *datetime)
	{
     864:	7f 92       	push	r7
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	2c 97       	sbiw	r28, 0x0c	; 12
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	6c 01       	movw	r12, r24
     890:	8b 01       	movw	r16, r22
		time_t epoch = 0;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };		

		struct tm ltm = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
     892:	fe 01       	movw	r30, r28
     894:	31 96       	adiw	r30, 0x01	; 1
     896:	8c e0       	ldi	r24, 0x0C	; 12
     898:	df 01       	movw	r26, r30
     89a:	1d 92       	st	X+, r1
     89c:	8a 95       	dec	r24
     89e:	e9 f7       	brne	.-6      	; 0x89a <_Z13RTC_get_epochPbPc+0x36>
		uint8_t date;
		uint8_t hours;
		uint8_t minutes;
		uint8_t seconds;

		if(datetime)                            /* String format "YYMMDDhhmmss" */
     8a0:	61 15       	cp	r22, r1
     8a2:	71 05       	cpc	r23, r1
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <_Z13RTC_get_epochPbPc+0x44>
     8a6:	64 c0       	rjmp	.+200    	; 0x970 <__stack+0x71>
		{
			data[0] = char2bcd(&datetime[10]);  /* seconds in BCD */
     8a8:	cb 01       	movw	r24, r22
     8aa:	0a 96       	adiw	r24, 0x0a	; 10
     8ac:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8b0:	a8 2e       	mov	r10, r24
			data[1] = char2bcd(&datetime[8]);   /* minutes in BCD */
     8b2:	c8 01       	movw	r24, r16
     8b4:	08 96       	adiw	r24, 0x08	; 8
     8b6:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8ba:	b8 2e       	mov	r11, r24
			data[2] = char2bcd(&datetime[6]);   /* hours in BCD */
     8bc:	c8 01       	movw	r24, r16
     8be:	06 96       	adiw	r24, 0x06	; 6
     8c0:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8c4:	f8 2e       	mov	r15, r24
			/* data[3] =  not used */
			data[4] = char2bcd(&datetime[4]);   /* day of month in BCD */
     8c6:	c8 01       	movw	r24, r16
     8c8:	04 96       	adiw	r24, 0x04	; 4
     8ca:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8ce:	88 2e       	mov	r8, r24
			data[5] = char2bcd(&datetime[2]);   /* month in BCD */
     8d0:	c8 01       	movw	r24, r16
     8d2:	02 96       	adiw	r24, 0x02	; 2
     8d4:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8d8:	78 2e       	mov	r7, r24
			data[6] = char2bcd(&datetime[0]);   /* 2-digit year in BCD */
     8da:	c8 01       	movw	r24, r16
     8dc:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8e0:	18 2f       	mov	r17, r24

			hours = bcd2dec(data[2]); /* Must be calculated here */
     8e2:	8f 2d       	mov	r24, r15
     8e4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     8e8:	98 2e       	mov	r9, r24
			
			year += (int16_t)bcd2dec(data[6]);
     8ea:	81 2f       	mov	r24, r17
     8ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     8f0:	e8 2e       	mov	r14, r24
     8f2:	f1 2c       	mov	r15, r1
			ltm.tm_year = year;                         /* year since 1900 */
     8f4:	c7 01       	movw	r24, r14
     8f6:	8c 59       	subi	r24, 0x9C	; 156
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	98 87       	std	Y+8, r25	; 0x08
     8fc:	8f 83       	std	Y+7, r24	; 0x07

			year += 1900;                               /* adjust year to calendar year */
     8fe:	b0 e3       	ldi	r27, 0x30	; 48
     900:	eb 1a       	sub	r14, r27
     902:	b8 ef       	ldi	r27, 0xF8	; 248
     904:	fb 0a       	sbc	r15, r27

			month = bcd2dec(data[5]);
     906:	87 2d       	mov	r24, r7
     908:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     90c:	08 2f       	mov	r16, r24
			ltm.tm_mon = month - 1;                     /* mon 0 to 11 */
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	80 0f       	add	r24, r16
     912:	8e 83       	std	Y+6, r24	; 0x06

			date = bcd2dec(data[4]);
     914:	88 2d       	mov	r24, r8
     916:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
			ltm.tm_mday = date;                         /* month day 1 to 31 */
     91a:	8c 83       	std	Y+4, r24	; 0x04

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     91c:	02 30       	cpi	r16, 0x02	; 2
     91e:	70 f0       	brcs	.+28     	; 0x93c <__stack+0x3d>
     920:	11 e0       	ldi	r17, 0x01	; 1
			{
				ltm.tm_yday += month_length(year, mon);;
     922:	61 2f       	mov	r22, r17
     924:	c7 01       	movw	r24, r14
     926:	0e 94 58 01 	call	0x2b0	; 0x2b0 <month_length>
     92a:	29 85       	ldd	r18, Y+9	; 0x09
     92c:	3a 85       	ldd	r19, Y+10	; 0x0a
     92e:	28 0f       	add	r18, r24
     930:	31 1d       	adc	r19, r1
     932:	3a 87       	std	Y+10, r19	; 0x0a
     934:	29 87       	std	Y+9, r18	; 0x09

			date = bcd2dec(data[4]);
			ltm.tm_mday = date;                         /* month day 1 to 31 */

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     936:	1f 5f       	subi	r17, 0xFF	; 255
     938:	01 13       	cpse	r16, r17
     93a:	f3 cf       	rjmp	.-26     	; 0x922 <__stack+0x23>
			{
				ltm.tm_yday += month_length(year, mon);;
			}

			ltm.tm_yday += (ltm.tm_mday - 1);
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	08 2e       	mov	r0, r24
     940:	00 0c       	add	r0, r0
     942:	99 0b       	sbc	r25, r25
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	29 85       	ldd	r18, Y+9	; 0x09
     948:	3a 85       	ldd	r19, Y+10	; 0x0a
     94a:	82 0f       	add	r24, r18
     94c:	93 1f       	adc	r25, r19
     94e:	9a 87       	std	Y+10, r25	; 0x0a
     950:	89 87       	std	Y+9, r24	; 0x09

			seconds = bcd2dec(data[0]);
     952:	8a 2d       	mov	r24, r10
     954:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     958:	18 2f       	mov	r17, r24
			minutes = bcd2dec(data[1]);
     95a:	8b 2d       	mov	r24, r11
     95c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>

			ltm.tm_hour = hours;
     960:	9b 82       	std	Y+3, r9	; 0x03
			ltm.tm_min = minutes;
     962:	8a 83       	std	Y+2, r24	; 0x02
			ltm.tm_sec = seconds;
     964:	19 83       	std	Y+1, r17	; 0x01

			epoch = epoch_from_ltm(&ltm);
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	0e 94 13 03 	call	0x626	; 0x626 <_Z14epoch_from_ltmP2tm>
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
		}
		else
		{
			epoch = RTC_get_epoch();
     970:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
		}

		if(error)
     974:	c1 14       	cp	r12, r1
     976:	d1 04       	cpc	r13, r1
     978:	49 f0       	breq	.+18     	; 0x98c <__stack+0x8d>
		{
			*error = (epoch == 0);
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	61 15       	cp	r22, r1
     97e:	71 05       	cpc	r23, r1
     980:	81 05       	cpc	r24, r1
     982:	91 05       	cpc	r25, r1
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f6 01       	movw	r30, r12
     98a:	20 83       	st	Z, r18
		}

		return(epoch);
	}
     98c:	2c 96       	adiw	r28, 0x0c	; 12
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	9f 90       	pop	r9
     9ae:	8f 90       	pop	r8
     9b0:	7f 90       	pop	r7
     9b2:	08 95       	ret

000009b4 <_Z16RTC_set_datetimePc>:
		return( epoch);
	}
	
	
	BOOL RTC_set_datetime(char *datetime)
	{
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	27 97       	sbiw	r28, 0x07	; 7
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
		BOOL failure = TRUE;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
     9cc:	fe 01       	movw	r30, r28
     9ce:	31 96       	adiw	r30, 0x01	; 1
     9d0:	27 e0       	ldi	r18, 0x07	; 7
     9d2:	df 01       	movw	r26, r30
     9d4:	1d 92       	st	X+, r1
     9d6:	2a 95       	dec	r18
     9d8:	e9 f7       	brne	.-6      	; 0x9d4 <_Z16RTC_set_datetimePc+0x20>

		if(datetime)                            /* String format "YYMMDDhhmmss" */
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	31 f1       	breq	.+76     	; 0xa2a <_Z16RTC_set_datetimePc+0x76>
     9de:	8c 01       	movw	r16, r24
		{
			data[0] = char2bcd(&datetime[10]);  /* seconds in BCD */
     9e0:	0a 96       	adiw	r24, 0x0a	; 10
     9e2:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     9e6:	89 83       	std	Y+1, r24	; 0x01
			data[1] = char2bcd(&datetime[8]);   /* minutes in BCD */
     9e8:	c8 01       	movw	r24, r16
     9ea:	08 96       	adiw	r24, 0x08	; 8
     9ec:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     9f0:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = char2bcd(&datetime[6]);   /* hours in BCD 24-hour format */
     9f2:	c8 01       	movw	r24, r16
     9f4:	06 96       	adiw	r24, 0x06	; 6
     9f6:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     9fa:	8b 83       	std	Y+3, r24	; 0x03
			/* data[3] =  not used */
			data[4] = char2bcd(&datetime[4]);   /* day of month in BCD */
     9fc:	c8 01       	movw	r24, r16
     9fe:	04 96       	adiw	r24, 0x04	; 4
     a00:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     a04:	8d 83       	std	Y+5, r24	; 0x05
			data[5] = char2bcd(&datetime[2]);   /* month in BCD */
     a06:	c8 01       	movw	r24, r16
     a08:	02 96       	adiw	r24, 0x02	; 2
     a0a:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     a0e:	8e 83       	std	Y+6, r24	; 0x06
			data[6] = char2bcd(&datetime[0]);   /* 2-digit year in BCD */
     a10:	c8 01       	movw	r24, r16
     a12:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     a16:	8f 83       	std	Y+7, r24	; 0x07

			failure = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7);		
     a18:	27 e0       	ldi	r18, 0x07	; 7
     a1a:	ae 01       	movw	r20, r28
     a1c:	4f 5f       	subi	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	80 ed       	ldi	r24, 0xD0	; 208
     a24:	0e 94 3d 0a 	call	0x147a	; 0x147a <i2c_device_write>
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_Z16RTC_set_datetimePc+0x78>
	}
	
	
	BOOL RTC_set_datetime(char *datetime)
	{
		BOOL failure = TRUE;
     a2a:	81 e0       	ldi	r24, 0x01	; 1

			failure = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7);		
		}
		
		return(failure);
	}
     a2c:	27 96       	adiw	r28, 0x07	; 7
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <_Z10RTC_1s_sqwh>:


	BOOL RTC_1s_sqw(BOOL enable)
	{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	1f 92       	push	r1
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
		BOOL fail;
		
		if(enable)
     a4c:	88 23       	and	r24, r24
     a4e:	51 f0       	breq	.+20     	; 0xa64 <_Z10RTC_1s_sqwh+0x22>
		{
			uint8_t byte = 0x00;
     a50:	19 82       	std	Y+1, r1	; 0x01
			fail = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_CONTROL, &byte, 1);
     a52:	21 e0       	ldi	r18, 0x01	; 1
     a54:	ae 01       	movw	r20, r28
     a56:	4f 5f       	subi	r20, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	6e e0       	ldi	r22, 0x0E	; 14
     a5c:	80 ed       	ldi	r24, 0xD0	; 208
     a5e:	0e 94 3d 0a 	call	0x147a	; 0x147a <i2c_device_write>
     a62:	0a c0       	rjmp	.+20     	; 0xa78 <_Z10RTC_1s_sqwh+0x36>
		}
		else
		{
			uint8_t byte = 0x04;
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	89 83       	std	Y+1, r24	; 0x01
			fail = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_CONTROL, &byte, 1);
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	ae 01       	movw	r20, r28
     a6c:	4f 5f       	subi	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	6e e0       	ldi	r22, 0x0E	; 14
     a72:	80 ed       	ldi	r24, 0xD0	; 208
     a74:	0e 94 3d 0a 	call	0x147a	; 0x147a <i2c_device_write>
		}
		
		return(fail);
	}
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     a80:	08 95       	ret

00000a82 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     a82:	08 95       	ret

00000a84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     a8c:	41 15       	cp	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	09 f4       	brne	.+2      	; 0xa94 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     a92:	75 c0       	rjmp	.+234    	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     a94:	86 2f       	mov	r24, r22
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	fc 01       	movw	r30, r24
     a9a:	3b 97       	sbiw	r30, 0x0b	; 11
     a9c:	ee 30       	cpi	r30, 0x0E	; 14
     a9e:	f1 05       	cpc	r31, r1
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     aa2:	6d c0       	rjmp	.+218    	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     aa4:	da 01       	movw	r26, r20
     aa6:	e6 59       	subi	r30, 0x96	; 150
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     aae:	82 e8       	ldi	r24, 0x82	; 130
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	5f c0       	rjmp	.+190    	; 0xb72 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     ab4:	8c e7       	ldi	r24, 0x7C	; 124
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	55 c0       	rjmp	.+170    	; 0xb64 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     aba:	87 e2       	ldi	r24, 0x27	; 39
     abc:	93 e0       	ldi	r25, 0x03	; 3
     abe:	49 c0       	rjmp	.+146    	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     ac0:	8a 01       	movw	r16, r20
     ac2:	0f 5f       	subi	r16, 0xFF	; 255
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
     ac6:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     ac8:	66 23       	and	r22, r22
     aca:	71 f0       	breq	.+28     	; 0xae8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     ad0:	21 96       	adiw	r28, 0x01	; 1
     ad2:	ce 01       	movw	r24, r28
     ad4:	89 51       	subi	r24, 0x19	; 25
     ad6:	9d 4f       	sbci	r25, 0xFD	; 253
     ad8:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <eeprom_update_byte>
				c = *char_addr++;
     adc:	f8 01       	movw	r30, r16
     ade:	61 91       	ld	r22, Z+
     ae0:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     ae2:	61 11       	cpse	r22, r1
     ae4:	f5 cf       	rjmp	.-22     	; 0xad0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     ae8:	c0 e0       	ldi	r28, 0x00	; 0
     aea:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	ce 01       	movw	r24, r28
     af0:	88 51       	subi	r24, 0x18	; 24
     af2:	9d 4f       	sbci	r25, 0xFD	; 253
     af4:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <eeprom_update_byte>
		}
		break;
     af8:	42 c0       	rjmp	.+132    	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     afa:	8a 01       	movw	r16, r20
     afc:	0f 5f       	subi	r16, 0xFF	; 255
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
     b00:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     b02:	66 23       	and	r22, r22
     b04:	91 f0       	breq	.+36     	; 0xb2a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     b06:	c0 e0       	ldi	r28, 0x00	; 0
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     b0c:	c8 30       	cpi	r28, 0x08	; 8
     b0e:	d1 05       	cpc	r29, r1
     b10:	71 f0       	breq	.+28     	; 0xb2e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	ce 01       	movw	r24, r28
     b16:	84 5e       	subi	r24, 0xE4	; 228
     b18:	9c 4f       	sbci	r25, 0xFC	; 252
     b1a:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <eeprom_update_byte>
				c = *uint8_addr++;
     b1e:	f8 01       	movw	r30, r16
     b20:	61 91       	ld	r22, Z+
     b22:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     b24:	61 11       	cpse	r22, r1
     b26:	f2 cf       	rjmp	.-28     	; 0xb0c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	ce 01       	movw	r24, r28
     b32:	83 5e       	subi	r24, 0xE3	; 227
     b34:	9c 4f       	sbci	r25, 0xFC	; 252
     b36:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <eeprom_update_byte>
		}
		break;
     b3a:	21 c0       	rjmp	.+66     	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     b3c:	89 e2       	ldi	r24, 0x29	; 41
     b3e:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     b40:	08 c0       	rjmp	.+16     	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>

		case Ptt_periodic_reset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.ptt_periodic_reset);
     b42:	8a e2       	ldi	r24, 0x2A	; 42
     b44:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     b48:	86 e2       	ldi	r24, 0x26	; 38
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     b4e:	88 e2       	ldi	r24, 0x28	; 40
     b50:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     b52:	6c 91       	ld	r22, X
     b54:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <eeprom_update_byte>
     b58:	12 c0       	rjmp	.+36     	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     b5a:	8a e7       	ldi	r24, 0x7A	; 122
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     b64:	6d 91       	ld	r22, X+
     b66:	7c 91       	ld	r23, X
     b68:	0e 94 9c 36 	call	0x6d38	; 0x6d38 <eeprom_update_word>
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     b6e:	8e e7       	ldi	r24, 0x7E	; 126
     b70:	90 e0       	ldi	r25, 0x00	; 0
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     b72:	4d 91       	ld	r20, X+
     b74:	5d 91       	ld	r21, X+
     b76:	6d 91       	ld	r22, X+
     b78:	7c 91       	ld	r23, X
     b7a:	0e 94 90 36 	call	0x6d20	; 0x6d20 <eeprom_update_dword>
	}
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     b94:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <lb_enabled>
     b98:	88 23       	and	r24, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     b9c:	46 c0       	rjmp	.+140    	; 0xc2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     b9e:	8c 2f       	mov	r24, r28
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8b 30       	cpi	r24, 0x0B	; 11
     ba4:	91 05       	cpc	r25, r1
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     ba8:	40 c0       	rjmp	.+128    	; 0xc2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     baa:	fc 01       	movw	r30, r24
     bac:	e8 58       	subi	r30, 0x88	; 136
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     bb4:	82 eb       	ldi	r24, 0xB2	; 178
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	30 c0       	rjmp	.+96     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     bba:	8c e0       	ldi	r24, 0x0C	; 12
     bbc:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bbe:	2d c0       	rjmp	.+90     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     bc0:	82 e3       	ldi	r24, 0x32	; 50
     bc2:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bc4:	2a c0       	rjmp	.+84     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     bc6:	89 e5       	ldi	r24, 0x59	; 89
     bc8:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     bcc:	8a e7       	ldi	r24, 0x7A	; 122
     bce:	92 e0       	ldi	r25, 0x02	; 2

		}
		break;
     bd0:	24 c0       	rjmp	.+72     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     bd2:	85 e9       	ldi	r24, 0x95	; 149
     bd4:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bd6:	21 c0       	rjmp	.+66     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     bd8:	8b ea       	ldi	r24, 0xAB	; 171
     bda:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bdc:	1e c0       	rjmp	.+60     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     bde:	80 ec       	ldi	r24, 0xC0	; 192
     be0:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     be2:	1b c0       	rjmp	.+54     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     be4:	84 ed       	ldi	r24, 0xD4	; 212
     be6:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     be8:	18 c0       	rjmp	.+48     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     bea:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     bec:	cc 23       	and	r28, r28
     bee:	e9 f0       	breq	.+58     	; 0xc2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lb_echo_char>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     bf6:	78 01       	movw	r14, r16
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	e8 1a       	sub	r14, r24
     bfc:	f8 0a       	sbc	r15, r24
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     c04:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     c06:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <linkbusTxInProgress>
     c0a:	81 11       	cpse	r24, r1
     c0c:	fc cf       	rjmp	.-8      	; 0xc06 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     c0e:	ed cf       	rjmp	.-38     	; 0xbea <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     c10:	86 e8       	ldi	r24, 0x86	; 134
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     c16:	84 ee       	ldi	r24, 0xE4	; 228
     c18:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     c1a:	8c 01       	movw	r16, r24
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     c24:	c8 2f       	mov	r28, r24

		while(c)
     c26:	81 11       	cpse	r24, r1
     c28:	e3 cf       	rjmp	.-58     	; 0xbf0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     c4a:	8b 3b       	cpi	r24, 0xBB	; 187
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <_ZN13EepromManager11readNonVolsEv+0x1c>
     c50:	b6 c0       	rjmp	.+364    	; 0xdbe <_ZN13EepromManager11readNonVolsEv+0x188>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     c52:	86 e2       	ldi	r24, 0x26	; 38
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	85 30       	cpi	r24, 0x05	; 5
     c5e:	91 05       	cpc	r25, r1
     c60:	14 f4       	brge	.+4      	; 0xc66 <_ZN13EepromManager11readNonVolsEv+0x30>
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	85 31       	cpi	r24, 0x15	; 21
     c68:	91 05       	cpc	r25, r1
     c6a:	14 f0       	brlt	.+4      	; 0xc70 <_ZN13EepromManager11readNonVolsEv+0x3a>
     c6c:	84 e1       	ldi	r24, 0x14	; 20
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     c74:	87 e2       	ldi	r24, 0x27	; 39
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     c7c:	82 31       	cpi	r24, 0x12	; 18
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <_ZN13EepromManager11readNonVolsEv+0x4c>
     c80:	81 e1       	ldi	r24, 0x11	; 17
     c82:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_fox>
		g_AM_audio_frequency = (AM_Tone_Freq_t)eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     c86:	88 e2       	ldi	r24, 0x28	; 40
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     c8e:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     c92:	8a e7       	ldi	r24, 0x7A	; 122
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <eeprom_read_word>
     c9a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_atmega_temp_calibration+0x1>
     c9e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     ca2:	8c e7       	ldi	r24, 0x7C	; 124
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <eeprom_read_word>
     caa:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <g_rv3028_offset+0x1>
     cae:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     cb2:	8e e7       	ldi	r24, 0x7E	; 126
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <eeprom_read_dword>
     cba:	60 93 57 05 	sts	0x0557, r22	; 0x800557 <g_event_start_epoch>
     cbe:	70 93 58 05 	sts	0x0558, r23	; 0x800558 <g_event_start_epoch+0x1>
     cc2:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_event_start_epoch+0x2>
     cc6:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <eeprom_read_dword>
     cd2:	60 93 53 05 	sts	0x0553, r22	; 0x800553 <g_event_finish_epoch>
     cd6:	70 93 54 05 	sts	0x0554, r23	; 0x800554 <g_event_finish_epoch+0x1>
     cda:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_event_finish_epoch+0x2>
     cde:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     ce2:	89 e2       	ldi	r24, 0x29	; 41
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     cea:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_utc_offset>
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));
     cee:	8a e2       	ldi	r24, 0x2A	; 42
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     cf6:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_ptt_periodic_reset_enabled>
     cfa:	08 ee       	ldi	r16, 0xE8	; 232
     cfc:	12 e0       	ldi	r17, 0x02	; 2
     cfe:	c7 ef       	ldi	r28, 0xF7	; 247
     d00:	d4 e0       	ldi	r29, 0x04	; 4
     d02:	0f 2e       	mov	r0, r31
     d04:	fb e0       	ldi	r31, 0x0B	; 11
     d06:	ef 2e       	mov	r14, r31
     d08:	f5 e0       	ldi	r31, 0x05	; 5
     d0a:	ff 2e       	mov	r15, r31
     d0c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     d0e:	c8 01       	movw	r24, r16
     d10:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     d14:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     d16:	81 11       	cpse	r24, r1
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <_ZN13EepromManager11readNonVolsEv+0xfa>
     d1a:	0d e1       	ldi	r16, 0x1D	; 29
     d1c:	13 e0       	ldi	r17, 0x03	; 3
     d1e:	c4 e1       	ldi	r28, 0x14	; 20
     d20:	d5 e0       	ldi	r29, 0x05	; 5
     d22:	0f 2e       	mov	r0, r31
     d24:	fc e1       	ldi	r31, 0x1C	; 28
     d26:	ef 2e       	mov	r14, r31
     d28:	f5 e0       	ldi	r31, 0x05	; 5
     d2a:	ff 2e       	mov	r15, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <_ZN13EepromManager11readNonVolsEv+0x106>
     d30:	0f 5f       	subi	r16, 0xFF	; 255
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     d34:	ce 15       	cp	r28, r14
     d36:	df 05       	cpc	r29, r15
     d38:	51 f7       	brne	.-44     	; 0xd0e <_ZN13EepromManager11readNonVolsEv+0xd8>
     d3a:	ef cf       	rjmp	.-34     	; 0xd1a <_ZN13EepromManager11readNonVolsEv+0xe4>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     d42:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     d44:	88 23       	and	r24, r24
     d46:	29 f0       	breq	.+10     	; 0xd52 <_ZN13EepromManager11readNonVolsEv+0x11c>
     d48:	0f 5f       	subi	r16, 0xFF	; 255
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     d4c:	ce 15       	cp	r28, r14
     d4e:	df 05       	cpc	r29, r15
     d50:	a9 f7       	brne	.-22     	; 0xd3c <_ZN13EepromManager11readNonVolsEv+0x106>
     d52:	0d ef       	ldi	r16, 0xFD	; 253
     d54:	12 e0       	ldi	r17, 0x02	; 2
     d56:	ce e2       	ldi	r28, 0x2E	; 46
     d58:	d5 e0       	ldi	r29, 0x05	; 5
     d5a:	0f 2e       	mov	r0, r31
     d5c:	fe e4       	ldi	r31, 0x4E	; 78
     d5e:	ef 2e       	mov	r14, r31
     d60:	f5 e0       	ldi	r31, 0x05	; 5
     d62:	ff 2e       	mov	r15, r31
     d64:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <eeprom_read_byte>
     d6c:	89 93       	st	Y+, r24
     d6e:	0f 5f       	subi	r16, 0xFF	; 255
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     d72:	ce 15       	cp	r28, r14
     d74:	df 05       	cpc	r29, r15
     d76:	b9 f7       	brne	.-18     	; 0xd66 <_ZN13EepromManager11readNonVolsEv+0x130>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     d78:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
     d7c:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
     d80:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
     d84:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
     d88:	89 2b       	or	r24, r25
     d8a:	8a 2b       	or	r24, r26
     d8c:	8b 2b       	or	r24, r27
     d8e:	c9 f0       	breq	.+50     	; 0xdc2 <_ZN13EepromManager11readNonVolsEv+0x18c>
     d90:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch>
     d94:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
     d98:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
     d9c:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
     da0:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
     da4:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
     da8:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
     dac:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
     db0:	84 17       	cp	r24, r20
     db2:	95 07       	cpc	r25, r21
     db4:	a6 07       	cpc	r26, r22
     db6:	b7 07       	cpc	r27, r23
     db8:	30 f4       	brcc	.+12     	; 0xdc6 <_ZN13EepromManager11readNonVolsEv+0x190>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	19 c0       	rjmp	.+50     	; 0xdf0 <_ZN13EepromManager11readNonVolsEv+0x1ba>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	17 c0       	rjmp	.+46     	; 0xdf0 <_ZN13EepromManager11readNonVolsEv+0x1ba>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <_ZN13EepromManager11readNonVolsEv+0x1ba>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     dc6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
     dca:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
     dce:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
     dd2:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
     dd6:	80 58       	subi	r24, 0x80	; 128
     dd8:	9e 4a       	sbci	r25, 0xAE	; 174
     dda:	ae 4f       	sbci	r26, 0xFE	; 254
     ddc:	bf 4f       	sbci	r27, 0xFF	; 255
     dde:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_event_finish_epoch>
     de2:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_event_finish_epoch+0x1>
     de6:	a0 93 55 05 	sts	0x0555, r26	; 0x800555 <g_event_finish_epoch+0x2>
     dea:	b0 93 56 05 	sts	0x0556, r27	; 0x800556 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     dee:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	08 95       	ret

00000dfe <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	0e e1       	ldi	r16, 0x1E	; 30
     e0c:	11 e0       	ldi	r17, 0x01	; 1
     e0e:	c4 e1       	ldi	r28, 0x14	; 20
     e10:	d5 e0       	ldi	r29, 0x05	; 5
     e12:	0f 2e       	mov	r0, r31
     e14:	f8 e1       	ldi	r31, 0x18	; 24
     e16:	ef 2e       	mov	r14, r31
     e18:	f5 e0       	ldi	r31, 0x05	; 5
     e1a:	ff 2e       	mov	r15, r31
     e1c:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     e1e:	f8 01       	movw	r30, r16
     e20:	61 91       	ld	r22, Z+
     e22:	8f 01       	movw	r16, r30
     e24:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     e26:	ce 01       	movw	r24, r28
     e28:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <eeprom_write_byte>
     e2c:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     e2e:	ce 15       	cp	r28, r14
     e30:	df 05       	cpc	r29, r15
     e32:	a9 f7       	brne	.-22     	; 0xe1e <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	81 e2       	ldi	r24, 0x21	; 33
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     e3e:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <g_unlockCode+0x4>

	g_messages_text[STATION_ID][0] = '\0';
     e42:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <g_messages_text+0x15>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[0]), 0);
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	88 ee       	ldi	r24, 0xE8	; 232
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <eeprom_write_byte>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     e50:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), (uint8_t)g_AM_audio_frequency);
     e54:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_AM_audio_frequency>
     e58:	88 e2       	ldi	r24, 0x28	; 40
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     e60:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_event_start_epoch>
     e64:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_event_start_epoch+0x1>
     e68:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_event_start_epoch+0x2>
     e6c:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     e70:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
     e74:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
     e78:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
     e7c:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
     e80:	8e e7       	ldi	r24, 0x7E	; 126
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     e88:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_event_finish_epoch>
     e8c:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_event_finish_epoch+0x1>
     e90:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_event_finish_epoch+0x2>
     e94:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     e98:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch>
     e9c:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
     ea0:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
     ea4:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
     ea8:	82 e8       	ldi	r24, 0x82	; 130
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <eeprom_write_dword>
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	08 95       	ret

00000ebe <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     ec4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
	sendEEPROMString(TextVersion);
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     ed8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
	lb_send_NewLine();
     edc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <setAtten>:
#endif  /* ATMEL_STUDIO_7 */

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     ee6:	9c 01       	movw	r18, r24
     ee8:	2e 5f       	subi	r18, 0xFE	; 254
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	2b 33       	cpi	r18, 0x3B	; 59
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	38 07       	cpc	r19, r24
     ef2:	10 f0       	brcs	.+4      	; 0xef8 <setAtten+0x12>
     ef4:	2b e3       	ldi	r18, 0x3B	; 59
     ef6:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     ef8:	ad ec       	ldi	r26, 0xCD	; 205
     efa:	bc ec       	ldi	r27, 0xCC	; 204
     efc:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
     f00:	96 95       	lsr	r25
     f02:	87 95       	ror	r24
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	9c 01       	movw	r18, r24
     f0a:	22 0f       	add	r18, r18
     f0c:	33 1f       	adc	r19, r19
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	28 0f       	add	r18, r24
     f14:	39 1f       	adc	r19, r25
	att /= 5;

	pattern = (uint8_t)att;
     f16:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
	PORTB = pattern;
     f22:	85 b9       	out	0x05, r24	; 5
     f24:	08 95       	ret

00000f26 <setupPortsForF1975>:
}

void setupPortsForF1975(BOOL enable)
{
     f26:	cf 93       	push	r28
     f28:	c8 2f       	mov	r28, r24
#if !SUPPORT_ONLY_80M
	pinMode(PIN_D0, OUTPUT);
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	88 e0       	ldi	r24, 0x08	; 8
     f2e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D1, OUTPUT);
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	89 e0       	ldi	r24, 0x09	; 9
     f36:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D2, OUTPUT);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	8a e0       	ldi	r24, 0x0A	; 10
     f3e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D3, OUTPUT);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	8b e0       	ldi	r24, 0x0B	; 11
     f46:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	8c e0       	ldi	r24, 0x0C	; 12
     f4e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	8d e0       	ldi	r24, 0x0D	; 13
     f56:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_PWDN, OUTPUT);
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	87 e0       	ldi	r24, 0x07	; 7
     f5e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_PWDN, ON);
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	87 e0       	ldi	r24, 0x07	; 7
     f66:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
#endif // !SUPPORT_ONLY_80M

	if(!enable)
     f6a:	c1 11       	cpse	r28, r1
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <setupPortsForF1975+0x4a>
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
	att -= (att % 5); /* set to nearest multiple of 5 */
	att /= 5;

	pattern = (uint8_t)att;
	PORTB = pattern;
     f6e:	15 b8       	out	0x05, r1	; 5

	if(!enable)
	{
		setAtten(0);
	}
}
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <_ZN8GoertzelC1Eff>:

void Goertzel::Flush(void)
{
	memset(testData, 0x00, _N * sizeof(int));
	ResetGoertzel();
}
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	e4 2e       	mov	r14, r20
     f82:	f5 2e       	mov	r15, r21
     f84:	d6 2f       	mov	r29, r22
     f86:	c7 2f       	mov	r28, r23
     f88:	00 93 f1 02 	sts	0x02F1, r16	; 0x8002f1 <_SAMPLING_FREQUENCY>
     f8c:	10 93 f2 02 	sts	0x02F2, r17	; 0x8002f2 <_SAMPLING_FREQUENCY+0x1>
     f90:	20 93 f3 02 	sts	0x02F3, r18	; 0x8002f3 <_SAMPLING_FREQUENCY+0x2>
     f94:	30 93 f4 02 	sts	0x02F4, r19	; 0x8002f4 <_SAMPLING_FREQUENCY+0x3>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	41 e5       	ldi	r20, 0x51	; 81
     f9e:	53 e4       	ldi	r21, 0x43	; 67
     fa0:	6e 2d       	mov	r22, r14
     fa2:	7f 2d       	mov	r23, r15
     fa4:	8d 2f       	mov	r24, r29
     fa6:	9c 2f       	mov	r25, r28
     fa8:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__gesf2>
     fac:	18 16       	cp	r1, r24
     fae:	6c f0       	brlt	.+26     	; 0xfca <_ZN8GoertzelC1Eff+0x56>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	48 ec       	ldi	r20, 0xC8	; 200
     fb6:	52 e4       	ldi	r21, 0x42	; 66
     fb8:	6e 2d       	mov	r22, r14
     fba:	7f 2d       	mov	r23, r15
     fbc:	8d 2f       	mov	r24, r29
     fbe:	9c 2f       	mov	r25, r28
     fc0:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__cmpsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	34 f0       	brlt	.+12     	; 0xfd4 <_ZN8GoertzelC1Eff+0x60>
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <_ZN8GoertzelC1Eff+0x68>
     fca:	e1 2c       	mov	r14, r1
     fcc:	f1 2c       	mov	r15, r1
     fce:	d1 e5       	ldi	r29, 0x51	; 81
     fd0:	c3 e4       	ldi	r28, 0x43	; 67
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <_ZN8GoertzelC1Eff+0x68>
     fd4:	e1 2c       	mov	r14, r1
     fd6:	f1 2c       	mov	r15, r1
     fd8:	d8 ec       	ldi	r29, 0xC8	; 200
     fda:	c2 e4       	ldi	r28, 0x42	; 66
     fdc:	6e 2d       	mov	r22, r14
     fde:	7f 2d       	mov	r23, r15
     fe0:	8d 2f       	mov	r24, r29
     fe2:	9c 2f       	mov	r25, r28
     fe4:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__fixsfsi>
     fe8:	70 93 ec 02 	sts	0x02EC, r23	; 0x8002ec <_N+0x1>
     fec:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <_N>
     ff0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_N>
     ff4:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_N+0x1>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0e 94 0b 32 	call	0x6416	; 0x6416 <malloc>
    1000:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <__data_end+0x1>
    1004:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <_ZN8GoertzelD1Ev>:
    1016:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
    101a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <__data_end+0x1>
    101e:	0e 94 a3 32 	call	0x6546	; 0x6546 <free>
    1022:	08 95       	ret

00001024 <_ZN8Goertzel13ResetGoertzelEv>:
    1024:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <Q2>
    1028:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <Q2+0x1>
    102c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <Q2+0x2>
    1030:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <Q2+0x3>
    1034:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <Q1>
    1038:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <Q1+0x1>
    103c:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <Q1+0x2>
    1040:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <Q1+0x3>
    1044:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_samplesReady>
    1048:	08 95       	ret

0000104a <_ZN8Goertzel18SetTargetFrequencyEf>:

void Goertzel::SetTargetFrequency(float target_frequency)
{
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
    1060:	4a 01       	movw	r8, r20
    1062:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
    1064:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <_N>
    1068:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <_N+0x1>
    106c:	07 2e       	mov	r0, r23
    106e:	00 0c       	add	r0, r0
    1070:	88 0b       	sbc	r24, r24
    1072:	99 0b       	sbc	r25, r25
    1074:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__floatsisf>
    1078:	6b 01       	movw	r12, r22
    107a:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /* Ideally, this should be an integer multiple of SAMPLING_RATE/N */
    107c:	80 92 ed 02 	sts	0x02ED, r8	; 0x8002ed <_TARGET_FREQUENCY>
    1080:	90 92 ee 02 	sts	0x02EE, r9	; 0x8002ee <_TARGET_FREQUENCY+0x1>
    1084:	a0 92 ef 02 	sts	0x02EF, r10	; 0x8002ef <_TARGET_FREQUENCY+0x2>
    1088:	b0 92 f0 02 	sts	0x02F0, r11	; 0x8002f0 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
    108c:	a5 01       	movw	r20, r10
    108e:	94 01       	movw	r18, r8
    1090:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    1094:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <_SAMPLING_FREQUENCY>
    1098:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <_SAMPLING_FREQUENCY+0x1>
    109c:	40 91 f3 02 	lds	r20, 0x02F3	; 0x8002f3 <_SAMPLING_FREQUENCY+0x2>
    10a0:	50 91 f4 02 	lds	r21, 0x02F4	; 0x8002f4 <_SAMPLING_FREQUENCY+0x3>
    10a4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__divsf3>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__addsf3>
    10b4:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__fixsfsi>
    10b8:	07 2e       	mov	r0, r23
    10ba:	00 0c       	add	r0, r0
    10bc:	88 0b       	sbc	r24, r24
    10be:	99 0b       	sbc	r25, r25
    10c0:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__floatsisf>
    10c4:	2b ed       	ldi	r18, 0xDB	; 219
    10c6:	3f e0       	ldi	r19, 0x0F	; 15
    10c8:	49 ec       	ldi	r20, 0xC9	; 201
    10ca:	50 e4       	ldi	r21, 0x40	; 64
    10cc:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    10d0:	a7 01       	movw	r20, r14
    10d2:	96 01       	movw	r18, r12
    10d4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__divsf3>
    10d8:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <cos>
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__addsf3>
    10e4:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <g_coeff>
    10e8:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <g_coeff+0x1>
    10ec:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <g_coeff+0x2>
    10f0:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <g_coeff+0x3>
	ResetGoertzel();
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN8Goertzel13ResetGoertzelEv>
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	08 95       	ret

00001110 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
    1126:	c0 90 e3 02 	lds	r12, 0x02E3	; 0x8002e3 <Q1>
    112a:	d0 90 e4 02 	lds	r13, 0x02E4	; 0x8002e4 <Q1+0x1>
    112e:	e0 90 e5 02 	lds	r14, 0x02E5	; 0x8002e5 <Q1+0x2>
    1132:	f0 90 e6 02 	lds	r15, 0x02E6	; 0x8002e6 <Q1+0x3>
    1136:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <g_coeff>
    113a:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <g_coeff+0x1>
    113e:	40 91 e9 02 	lds	r20, 0x02E9	; 0x8002e9 <g_coeff+0x2>
    1142:	50 91 ea 02 	lds	r21, 0x02EA	; 0x8002ea <g_coeff+0x3>
    1146:	c7 01       	movw	r24, r14
    1148:	b6 01       	movw	r22, r12
    114a:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    114e:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <Q2>
    1152:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <Q2+0x1>
    1156:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <Q2+0x2>
    115a:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <Q2+0x3>
    115e:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__subsf3>
    1162:	4b 01       	movw	r8, r22
    1164:	5c 01       	movw	r10, r24
    1166:	be 01       	movw	r22, r28
    1168:	72 50       	subi	r23, 0x02	; 2
    116a:	07 2e       	mov	r0, r23
    116c:	00 0c       	add	r0, r0
    116e:	88 0b       	sbc	r24, r24
    1170:	99 0b       	sbc	r25, r25
    1172:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__floatsisf>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c5 01       	movw	r24, r10
    117c:	b4 01       	movw	r22, r8
    117e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__addsf3>

	if(sample > 230)
    1182:	c7 3e       	cpi	r28, 0xE7	; 231
    1184:	d1 05       	cpc	r29, r1
    1186:	54 f0       	brlt	.+20     	; 0x119c <_ZN8Goertzel13ProcessSampleEi+0x8c>
	{
		highValueCount++;
    1188:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <highValueCount>
    118c:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <highValueCount+0x1>
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	30 93 db 02 	sts	0x02DB, r19	; 0x8002db <highValueCount+0x1>
    1198:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <highValueCount>
	}

	Q2 = Q1;
    119c:	c0 92 df 02 	sts	0x02DF, r12	; 0x8002df <Q2>
    11a0:	d0 92 e0 02 	sts	0x02E0, r13	; 0x8002e0 <Q2+0x1>
    11a4:	e0 92 e1 02 	sts	0x02E1, r14	; 0x8002e1 <Q2+0x2>
    11a8:	f0 92 e2 02 	sts	0x02E2, r15	; 0x8002e2 <Q2+0x3>
	Q1 = Q0;
    11ac:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <Q1>
    11b0:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <Q1+0x1>
    11b4:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <Q1+0x2>
    11b8:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <Q1+0x3>
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	08 95       	ret

000011d2 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    11d2:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_samplesReady>
    11d6:	88 23       	and	r24, r24
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    11da:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_samplesReady>
    11de:	08 95       	ret
	}

	testData[_index] = data;
    11e0:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <_index>
    11e4:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <_index+0x1>
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
    11f0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <__data_end+0x1>
    11f4:	e8 0f       	add	r30, r24
    11f6:	f9 1f       	adc	r31, r25
    11f8:	71 83       	std	Z+1, r23	; 0x01
    11fa:	60 83       	st	Z, r22
	_index++;
    11fc:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_index>
    1200:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <_index+0x1>
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <_index+0x1>
    120a:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <_index>
	if(_index >= _N)
    120e:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <_index>
    1212:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <_index+0x1>
    1216:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_N>
    121a:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_N+0x1>
    121e:	28 17       	cp	r18, r24
    1220:	39 07       	cpc	r19, r25
    1222:	3c f0       	brlt	.+14     	; 0x1232 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    1224:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_index+0x1>
    1228:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_index>
		_samplesReady = true;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_samplesReady>
	}

	return(_samplesReady);
    1232:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_samplesReady>
}
    1236:	08 95       	ret

00001238 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
    1238:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_samplesReady>
}
    123c:	08 95       	ret

0000123e <_ZN8Goertzel10Magnitude2EPi>:

float Goertzel::Magnitude2(int *highCount)
{
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	00 d0       	rcall	.+0      	; 0x125c <_ZN8Goertzel10Magnitude2EPi+0x1e>
    125c:	00 d0       	rcall	.+0      	; 0x125e <_ZN8Goertzel10Magnitude2EPi+0x20>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	7c 01       	movw	r14, r24
    1264:	8b 01       	movw	r16, r22
	float magnitude2;

	highValueCount = 0;
    1266:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <highValueCount+0x1>
    126a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <highValueCount>

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
    126e:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_N>
    1272:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_N+0x1>
    1276:	18 16       	cp	r1, r24
    1278:	19 06       	cpc	r1, r25
    127a:	f4 f4       	brge	.+60     	; 0x12b8 <_ZN8Goertzel10Magnitude2EPi+0x7a>
    127c:	1a 82       	std	Y+2, r1	; 0x02
    127e:	19 82       	std	Y+1, r1	; 0x01
	{
		ProcessSample(testData[index]);
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__data_end>
    128c:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <__data_end+0x1>
    1290:	e8 0f       	add	r30, r24
    1292:	f9 1f       	adc	r31, r25
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	c7 01       	movw	r24, r14
    129a:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN8Goertzel13ProcessSampleEi>
	float magnitude2;

	highValueCount = 0;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
    129e:	29 81       	ldd	r18, Y+1	; 0x01
    12a0:	3a 81       	ldd	r19, Y+2	; 0x02
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	3a 83       	std	Y+2, r19	; 0x02
    12a8:	29 83       	std	Y+1, r18	; 0x01
    12aa:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_N>
    12ae:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_N+0x1>
    12b2:	28 17       	cp	r18, r24
    12b4:	39 07       	cpc	r19, r25
    12b6:	24 f3       	brlt	.-56     	; 0x1280 <_ZN8Goertzel10Magnitude2EPi+0x42>
	{
		ProcessSample(testData[index]);
	}

	if(highCount) *highCount = highValueCount;
    12b8:	01 15       	cp	r16, r1
    12ba:	11 05       	cpc	r17, r1
    12bc:	39 f0       	breq	.+14     	; 0x12cc <_ZN8Goertzel10Magnitude2EPi+0x8e>
    12be:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <highValueCount>
    12c2:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <highValueCount+0x1>
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
    12cc:	40 90 e3 02 	lds	r4, 0x02E3	; 0x8002e3 <Q1>
    12d0:	50 90 e4 02 	lds	r5, 0x02E4	; 0x8002e4 <Q1+0x1>
    12d4:	60 90 e5 02 	lds	r6, 0x02E5	; 0x8002e5 <Q1+0x2>
    12d8:	70 90 e6 02 	lds	r7, 0x02E6	; 0x8002e6 <Q1+0x3>
    12dc:	80 90 df 02 	lds	r8, 0x02DF	; 0x8002df <Q2>
    12e0:	90 90 e0 02 	lds	r9, 0x02E0	; 0x8002e0 <Q2+0x1>
    12e4:	a0 90 e1 02 	lds	r10, 0x02E1	; 0x8002e1 <Q2+0x2>
    12e8:	b0 90 e2 02 	lds	r11, 0x02E2	; 0x8002e2 <Q2+0x3>
    12ec:	a3 01       	movw	r20, r6
    12ee:	92 01       	movw	r18, r4
    12f0:	c3 01       	movw	r24, r6
    12f2:	b2 01       	movw	r22, r4
    12f4:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    12f8:	69 83       	std	Y+1, r22	; 0x01
    12fa:	7a 83       	std	Y+2, r23	; 0x02
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	a5 01       	movw	r20, r10
    1302:	94 01       	movw	r18, r8
    1304:	c5 01       	movw	r24, r10
    1306:	b4 01       	movw	r22, r8
    1308:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__addsf3>
    131c:	69 83       	std	Y+1, r22	; 0x01
    131e:	7a 83       	std	Y+2, r23	; 0x02
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <g_coeff>
    1328:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <g_coeff+0x1>
    132c:	40 91 e9 02 	lds	r20, 0x02E9	; 0x8002e9 <g_coeff+0x2>
    1330:	50 91 ea 02 	lds	r21, 0x02EA	; 0x8002ea <g_coeff+0x3>
    1334:	c3 01       	movw	r24, r6
    1336:	b2 01       	movw	r22, r4
    1338:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    133c:	a5 01       	movw	r20, r10
    133e:	94 01       	movw	r18, r8
    1340:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	69 81       	ldd	r22, Y+1	; 0x01
    134a:	7a 81       	ldd	r23, Y+2	; 0x02
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__subsf3>
    1354:	4b 01       	movw	r8, r22
    1356:	5c 01       	movw	r10, r24

	ResetGoertzel();
    1358:	c7 01       	movw	r24, r14
    135a:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
    135e:	c5 01       	movw	r24, r10
    1360:	b4 01       	movw	r22, r8
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	bf 90       	pop	r11
    1378:	af 90       	pop	r10
    137a:	9f 90       	pop	r9
    137c:	8f 90       	pop	r8
    137e:	7f 90       	pop	r7
    1380:	6f 90       	pop	r6
    1382:	5f 90       	pop	r5
    1384:	4f 90       	pop	r4
    1386:	08 95       	ret

00001388 <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    1388:	e4 e6       	ldi	r30, 0x64	; 100
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8f 77       	andi	r24, 0x7F	; 127
    1390:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    1392:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
    1396:	85 e2       	ldi	r24, 0x25	; 37
    1398:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
    13a8:	08 95       	ret

000013aa <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    13aa:	84 ea       	ldi	r24, 0xA4	; 164
    13ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    13b0:	ec eb       	ldi	r30, 0xBC	; 188
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 23       	and	r24, r24
    13b8:	64 f0       	brlt	.+24     	; 0x13d2 <i2c_start+0x28>
    13ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    13be:	81 11       	cpse	r24, r1
    13c0:	f9 cf       	rjmp	.-14     	; 0x13b4 <i2c_start+0xa>
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <i2c_start+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    13c4:	80 e9       	ldi	r24, 0x90	; 144
    13c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
    13d0:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    13d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    13d6:	88 23       	and	r24, r24
    13d8:	a9 f3       	breq	.-22     	; 0x13c4 <i2c_start+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
    13da:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    13dc:	08 95       	ret

000013de <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    13de:	84 e9       	ldi	r24, 0x94	; 148
    13e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    13e4:	08 95       	ret

000013e6 <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    13e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
    13ea:	84 e8       	ldi	r24, 0x84	; 132
    13ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    13f0:	ec eb       	ldi	r30, 0xBC	; 188
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 23       	and	r24, r24
    13f8:	64 f0       	brlt	.+24     	; 0x1412 <i2c_write_success+0x2c>
    13fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    13fe:	81 11       	cpse	r24, r1
    1400:	f9 cf       	rjmp	.-14     	; 0x13f4 <i2c_write_success+0xe>
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <i2c_write_success+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    1404:	84 e9       	ldi	r24, 0x94	; 148
    1406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
    1410:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
    1412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    1416:	88 7f       	andi	r24, 0xF8	; 248
    1418:	86 13       	cpse	r24, r22
    141a:	f4 cf       	rjmp	.-24     	; 0x1404 <i2c_write_success+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
    141c:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    141e:	08 95       	ret

00001420 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    1420:	84 ec       	ldi	r24, 0xC4	; 196
    1422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1426:	ec eb       	ldi	r30, 0xBC	; 188
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	88 23       	and	r24, r24
    142e:	24 f0       	brlt	.+8      	; 0x1438 <i2c_read_ack+0x18>
    1430:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1434:	81 11       	cpse	r24, r1
    1436:	f9 cf       	rjmp	.-14     	; 0x142a <i2c_read_ack+0xa>
		{
			;
		}

		return(TWDR);
    1438:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    143c:	08 95       	ret

0000143e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    143e:	84 e8       	ldi	r24, 0x84	; 132
    1440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1444:	ec eb       	ldi	r30, 0xBC	; 188
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	24 f0       	brlt	.+8      	; 0x1456 <i2c_read_nack+0x18>
    144e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1452:	81 11       	cpse	r24, r1
    1454:	f9 cf       	rjmp	.-14     	; 0x1448 <i2c_read_nack+0xa>
		{
			;
		}

		return( TWDR);
    1456:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    145a:	08 95       	ret

0000145c <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    145c:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1460:	28 7f       	andi	r18, 0xF8	; 248
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	28 17       	cp	r18, r24
    1468:	39 07       	cpc	r19, r25
    146a:	29 f0       	breq	.+10     	; 0x1476 <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    146c:	84 e9       	ldi	r24, 0x94	; 148
    146e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	08 95       	ret
	}

	return(FALSE);
    1476:	80 e0       	ldi	r24, 0x00	; 0
}
    1478:	08 95       	ret

0000147a <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	00 d0       	rcall	.+0      	; 0x1480 <i2c_device_write+0x6>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <i2c_device_write+0x8>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <i2c_device_write+0xa>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	6b 83       	std	Y+3, r22	; 0x03
    148c:	5d 83       	std	Y+5, r21	; 0x05
    148e:	4c 83       	std	Y+4, r20	; 0x04
    1490:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    1492:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    1494:	0e 94 d5 09 	call	0x13aa	; 0x13aa <i2c_start>
		if(i2c_status(TW_START))
    1498:	88 e0       	ldi	r24, 0x08	; 8
    149a:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    149e:	98 2f       	mov	r25, r24
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	99 23       	and	r25, r25
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <i2c_device_write+0x2e>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	88 23       	and	r24, r24
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <i2c_device_write+0x36>
		{
			return(TRUE);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <i2c_device_write+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    14b0:	68 e1       	ldi	r22, 0x18	; 24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    14b8:	98 2f       	mov	r25, r24
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	99 23       	and	r25, r25
    14be:	09 f4       	brne	.+2      	; 0x14c2 <i2c_device_write+0x48>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	88 23       	and	r24, r24
    14c4:	11 f0       	breq	.+4      	; 0x14ca <i2c_device_write+0x50>
		{
			return(TRUE);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	32 c0       	rjmp	.+100    	; 0x152e <i2c_device_write+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    14ca:	68 e2       	ldi	r22, 0x28	; 40
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    14d2:	98 2f       	mov	r25, r24
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	99 23       	and	r25, r25
    14d8:	09 f4       	brne	.+2      	; 0x14dc <i2c_device_write+0x62>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	88 23       	and	r24, r24
    14de:	11 f0       	breq	.+4      	; 0x14e4 <i2c_device_write+0x6a>
		{
			return(TRUE);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	25 c0       	rjmp	.+74     	; 0x152e <i2c_device_write+0xb4>
		}

		while(bytes2write--)
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	98 0f       	add	r25, r24
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <i2c_device_write+0x7a>
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	99 23       	and	r25, r25
    14f6:	c1 f0       	breq	.+48     	; 0x1528 <i2c_device_write+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	98 0f       	add	r25, r24
    14fe:	99 83       	std	Y+1, r25	; 0x01
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	2c 81       	ldd	r18, Y+4	; 0x04
    1506:	3d 81       	ldd	r19, Y+5	; 0x05
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	68 e2       	ldi	r22, 0x28	; 40
    1512:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    1516:	98 2f       	mov	r25, r24
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	99 23       	and	r25, r25
    151c:	09 f4       	brne	.+2      	; 0x1520 <i2c_device_write+0xa6>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	88 23       	and	r24, r24
    1522:	01 f3       	breq	.-64     	; 0x14e4 <i2c_device_write+0x6a>
			{
				return(TRUE);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <i2c_device_write+0xb4>
			}
		}

		i2c_stop();
    1528:	0e 94 ef 09 	call	0x13de	; 0x13de <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    152c:	80 e0       	ldi	r24, 0x00	; 0
}
    152e:	26 96       	adiw	r28, 0x06	; 6
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <i2c_device_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	00 d0       	rcall	.+0      	; 0x154a <i2c_device_read+0xa>
    154a:	00 d0       	rcall	.+0      	; 0x154c <i2c_device_read+0xc>
    154c:	00 d0       	rcall	.+0      	; 0x154e <i2c_device_read+0xe>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	6b 83       	std	Y+3, r22	; 0x03
    1556:	5d 83       	std	Y+5, r21	; 0x05
    1558:	4c 83       	std	Y+4, r20	; 0x04
    155a:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    155c:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    155e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <i2c_start>
		if(i2c_status(TW_START))
    1562:	88 e0       	ldi	r24, 0x08	; 8
    1564:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    1568:	98 2f       	mov	r25, r24
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	99 23       	and	r25, r25
    156e:	09 f4       	brne	.+2      	; 0x1572 <i2c_device_read+0x32>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	88 23       	and	r24, r24
    1574:	11 f0       	breq	.+4      	; 0x157a <i2c_device_read+0x3a>
		{
			return(TRUE);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	79 c0       	rjmp	.+242    	; 0x166c <i2c_device_read+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    157a:	68 e1       	ldi	r22, 0x18	; 24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    1582:	98 2f       	mov	r25, r24
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	99 23       	and	r25, r25
    1588:	09 f4       	brne	.+2      	; 0x158c <i2c_device_read+0x4c>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	88 23       	and	r24, r24
    158e:	11 f0       	breq	.+4      	; 0x1594 <i2c_device_read+0x54>
		{
			return(TRUE);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	6c c0       	rjmp	.+216    	; 0x166c <i2c_device_read+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1594:	68 e2       	ldi	r22, 0x28	; 40
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    159c:	98 2f       	mov	r25, r24
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	99 23       	and	r25, r25
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <i2c_device_read+0x66>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	88 23       	and	r24, r24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <i2c_device_read+0x6e>
		{
			return(TRUE);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	5f c0       	rjmp	.+190    	; 0x166c <i2c_device_read+0x12c>
		}

		i2c_start();
    15ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <i2c_start>
		if(i2c_status(TW_REP_START))
    15b2:	80 e1       	ldi	r24, 0x10	; 16
    15b4:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    15b8:	98 2f       	mov	r25, r24
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	99 23       	and	r25, r25
    15be:	09 f4       	brne	.+2      	; 0x15c2 <i2c_device_read+0x82>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	88 23       	and	r24, r24
    15c4:	11 f0       	breq	.+4      	; 0x15ca <i2c_device_read+0x8a>
		{
			return(TRUE);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	51 c0       	rjmp	.+162    	; 0x166c <i2c_device_read+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	60 e4       	ldi	r22, 0x40	; 64
    15d0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    15d4:	98 2f       	mov	r25, r24
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	99 23       	and	r25, r25
    15da:	09 f4       	brne	.+2      	; 0x15de <i2c_device_read+0x9e>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	88 23       	and	r24, r24
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <i2c_device_read+0xa6>
		{
			return(TRUE);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	43 c0       	rjmp	.+134    	; 0x166c <i2c_device_read+0x12c>
		}

		while(bytes2read--)
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	98 0f       	add	r25, r24
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <i2c_device_read+0xb6>
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	99 23       	and	r25, r25
    15f8:	b1 f1       	breq	.+108    	; 0x1666 <i2c_device_read+0x126>
		{
			if(bytes2read)
    15fa:	8e 81       	ldd	r24, Y+6	; 0x06
    15fc:	88 23       	and	r24, r24
    15fe:	d9 f0       	breq	.+54     	; 0x1636 <i2c_device_read+0xf6>
			{
				data[index++] = i2c_read_ack();
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	98 0f       	add	r25, r24
    1606:	99 83       	std	Y+1, r25	; 0x01
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	2c 81       	ldd	r18, Y+4	; 0x04
    160e:	3d 81       	ldd	r19, Y+5	; 0x05
    1610:	89 01       	movw	r16, r18
    1612:	08 0f       	add	r16, r24
    1614:	19 1f       	adc	r17, r25
    1616:	0e 94 10 0a 	call	0x1420	; 0x1420 <i2c_read_ack>
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    161e:	80 e5       	ldi	r24, 0x50	; 80
    1620:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    1624:	98 2f       	mov	r25, r24
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	99 23       	and	r25, r25
    162a:	09 f4       	brne	.+2      	; 0x162e <i2c_device_read+0xee>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	88 23       	and	r24, r24
    1630:	d1 f2       	breq	.-76     	; 0x15e6 <i2c_device_read+0xa6>
				{
					return(TRUE);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	1b c0       	rjmp	.+54     	; 0x166c <i2c_device_read+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	89 01       	movw	r16, r18
    1642:	08 0f       	add	r16, r24
    1644:	19 1f       	adc	r17, r25
    1646:	0e 94 1f 0a 	call	0x143e	; 0x143e <i2c_read_nack>
    164a:	f8 01       	movw	r30, r16
    164c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    164e:	88 e5       	ldi	r24, 0x58	; 88
    1650:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    1654:	98 2f       	mov	r25, r24
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	99 23       	and	r25, r25
    165a:	09 f4       	brne	.+2      	; 0x165e <i2c_device_read+0x11e>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	88 23       	and	r24, r24
    1660:	11 f2       	breq	.-124    	; 0x15e6 <i2c_device_read+0xa6>
				{
					return(TRUE);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	03 c0       	rjmp	.+6      	; 0x166c <i2c_device_read+0x12c>
				}
			}
		}

		i2c_stop();
    1666:	0e 94 ef 09 	call	0x13de	; 0x13de <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    166a:	80 e0       	ldi	r24, 0x00	; 0
}
    166c:	26 96       	adiw	r28, 0x06	; 6
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <nextFullTxBuffer>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1682:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <_ZZ16nextFullTxBufferE11bufferIndex>
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	59 e2       	ldi	r21, 0x29	; 41
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	52 9f       	mul	r21, r18
    1690:	f0 01       	movw	r30, r0
    1692:	53 9f       	mul	r21, r19
    1694:	f0 0d       	add	r31, r0
    1696:	11 24       	eor	r1, r1
    1698:	e9 58       	subi	r30, 0x89	; 137
    169a:	fc 4f       	sbci	r31, 0xFC	; 252
    169c:	40 81       	ld	r20, Z
    169e:	41 11       	cpse	r20, r1
    16a0:	0c c0       	rjmp	.+24     	; 0x16ba <nextFullTxBuffer+0x38>
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <nextFullTxBuffer+0x2e>
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	78 f3       	brcs	.-34     	; 0x168a <nextFullTxBuffer+0x8>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	ed cf       	rjmp	.-38     	; 0x168a <nextFullTxBuffer+0x8>
    16b0:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZ16nextFullTxBufferE11bufferIndex>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	08 95       	ret
    16ba:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZZ16nextFullTxBufferE11bufferIndex>
    16be:	49 e2       	ldi	r20, 0x29	; 41
    16c0:	42 9f       	mul	r20, r18
    16c2:	c0 01       	movw	r24, r0
    16c4:	43 9f       	mul	r20, r19
    16c6:	90 0d       	add	r25, r0
    16c8:	11 24       	eor	r1, r1
    16ca:	89 58       	subi	r24, 0x89	; 137
    16cc:	9c 4f       	sbci	r25, 0xFC	; 252
    16ce:	08 95       	ret

000016d0 <nextEmptyTxBuffer>:
    16d0:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_ZZ17nextEmptyTxBufferE11bufferIndex>
    16d4:	93 e0       	ldi	r25, 0x03	; 3
    16d6:	59 e2       	ldi	r21, 0x29	; 41
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	52 9f       	mul	r21, r18
    16de:	f0 01       	movw	r30, r0
    16e0:	53 9f       	mul	r21, r19
    16e2:	f0 0d       	add	r31, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	e9 58       	subi	r30, 0x89	; 137
    16e8:	fc 4f       	sbci	r31, 0xFC	; 252
    16ea:	40 81       	ld	r20, Z
    16ec:	44 23       	and	r20, r20
    16ee:	61 f0       	breq	.+24     	; 0x1708 <nextEmptyTxBuffer+0x38>
    16f0:	91 50       	subi	r25, 0x01	; 1
    16f2:	29 f0       	breq	.+10     	; 0x16fe <nextEmptyTxBuffer+0x2e>
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	78 f3       	brcs	.-34     	; 0x16d8 <nextEmptyTxBuffer+0x8>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	ed cf       	rjmp	.-38     	; 0x16d8 <nextEmptyTxBuffer+0x8>
    16fe:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <_ZZ17nextEmptyTxBufferE11bufferIndex>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	08 95       	ret
    1708:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <_ZZ17nextEmptyTxBufferE11bufferIndex>
    170c:	49 e2       	ldi	r20, 0x29	; 41
    170e:	42 9f       	mul	r20, r18
    1710:	c0 01       	movw	r24, r0
    1712:	43 9f       	mul	r20, r19
    1714:	90 0d       	add	r25, r0
    1716:	11 24       	eor	r1, r1
    1718:	89 58       	subi	r24, 0x89	; 137
    171a:	9c 4f       	sbci	r25, 0xFC	; 252
    171c:	08 95       	ret

0000171e <nextEmptyRxBuffer>:
    171e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_ZZ17nextEmptyRxBufferE11bufferIndex>
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	9f e3       	ldi	r25, 0x3F	; 63
    1728:	89 9f       	mul	r24, r25
    172a:	f0 01       	movw	r30, r0
    172c:	11 24       	eor	r1, r1
    172e:	e7 50       	subi	r30, 0x07	; 7
    1730:	fd 4f       	sbci	r31, 0xFD	; 253
    1732:	41 81       	ldd	r20, Z+1	; 0x01
    1734:	52 81       	ldd	r21, Z+2	; 0x02
    1736:	45 2b       	or	r20, r21
    1738:	a9 f0       	breq	.+42     	; 0x1764 <nextEmptyRxBuffer+0x46>
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	08 f0       	brcs	.+2      	; 0x1742 <nextEmptyRxBuffer+0x24>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	9f e3       	ldi	r25, 0x3F	; 63
    1748:	89 9f       	mul	r24, r25
    174a:	f0 01       	movw	r30, r0
    174c:	11 24       	eor	r1, r1
    174e:	e7 50       	subi	r30, 0x07	; 7
    1750:	fd 4f       	sbci	r31, 0xFD	; 253
    1752:	41 81       	ldd	r20, Z+1	; 0x01
    1754:	52 81       	ldd	r21, Z+2	; 0x02
    1756:	45 2b       	or	r20, r21
    1758:	29 f0       	breq	.+10     	; 0x1764 <nextEmptyRxBuffer+0x46>
    175a:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZZ17nextEmptyRxBufferE11bufferIndex>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	08 95       	ret
    1764:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZZ17nextEmptyRxBufferE11bufferIndex>
    1768:	4f e3       	ldi	r20, 0x3F	; 63
    176a:	42 9f       	mul	r20, r18
    176c:	c0 01       	movw	r24, r0
    176e:	43 9f       	mul	r20, r19
    1770:	90 0d       	add	r25, r0
    1772:	11 24       	eor	r1, r1
    1774:	87 50       	subi	r24, 0x07	; 7
    1776:	9d 4f       	sbci	r25, 0xFD	; 253
    1778:	08 95       	ret

0000177a <nextFullRxBuffer>:
    177a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_ZZ16nextFullRxBufferE11bufferIndex>
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	9f e3       	ldi	r25, 0x3F	; 63
    1784:	89 9f       	mul	r24, r25
    1786:	f0 01       	movw	r30, r0
    1788:	11 24       	eor	r1, r1
    178a:	e7 50       	subi	r30, 0x07	; 7
    178c:	fd 4f       	sbci	r31, 0xFD	; 253
    178e:	41 81       	ldd	r20, Z+1	; 0x01
    1790:	52 81       	ldd	r21, Z+2	; 0x02
    1792:	45 2b       	or	r20, r21
    1794:	a9 f4       	brne	.+42     	; 0x17c0 <nextFullRxBuffer+0x46>
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	08 f0       	brcs	.+2      	; 0x179e <nextFullRxBuffer+0x24>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	9f e3       	ldi	r25, 0x3F	; 63
    17a4:	89 9f       	mul	r24, r25
    17a6:	f0 01       	movw	r30, r0
    17a8:	11 24       	eor	r1, r1
    17aa:	e7 50       	subi	r30, 0x07	; 7
    17ac:	fd 4f       	sbci	r31, 0xFD	; 253
    17ae:	41 81       	ldd	r20, Z+1	; 0x01
    17b0:	52 81       	ldd	r21, Z+2	; 0x02
    17b2:	45 2b       	or	r20, r21
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <nextFullRxBuffer+0x46>
    17b6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZZ16nextFullRxBufferE11bufferIndex>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	08 95       	ret
    17c0:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZZ16nextFullRxBufferE11bufferIndex>
    17c4:	4f e3       	ldi	r20, 0x3F	; 63
    17c6:	42 9f       	mul	r20, r18
    17c8:	c0 01       	movw	r24, r0
    17ca:	43 9f       	mul	r20, r19
    17cc:	90 0d       	add	r25, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	87 50       	subi	r24, 0x07	; 7
    17d2:	9d 4f       	sbci	r25, 0xFD	; 253
    17d4:	08 95       	ret

000017d6 <linkbusTxInProgress>:
    17d6:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZL17linkbus_tx_active>
    17da:	08 95       	ret

000017dc <_Z16linkbus_start_txv>:
    17dc:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <_ZL17linkbus_tx_active>
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	91 11       	cpse	r25, r1
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	91 11       	cpse	r25, r1
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <_Z16linkbus_start_txv+0x1e>
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <_ZL17linkbus_tx_active>
    17f0:	e1 ec       	ldi	r30, 0xC1	; 193
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	90 62       	ori	r25, 0x20	; 32
    17f8:	90 83       	st	Z, r25
    17fa:	08 95       	ret

000017fc <linkbus_end_tx>:
    17fc:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZL17linkbus_tx_active>
    1800:	88 23       	and	r24, r24
    1802:	39 f0       	breq	.+14     	; 0x1812 <linkbus_end_tx+0x16>
    1804:	e1 ec       	ldi	r30, 0xC1	; 193
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7d       	andi	r24, 0xDF	; 223
    180c:	80 83       	st	Z, r24
    180e:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <_ZL17linkbus_tx_active>
    1812:	08 95       	ret

00001814 <linkbus_init>:
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	8b 01       	movw	r16, r22
    181a:	9c 01       	movw	r18, r24
    181c:	8e e7       	ldi	r24, 0x7E	; 126
    181e:	e9 ef       	ldi	r30, 0xF9	; 249
    1820:	f2 e0       	ldi	r31, 0x02	; 2
    1822:	df 01       	movw	r26, r30
    1824:	1d 92       	st	X+, r1
    1826:	8a 95       	dec	r24
    1828:	e9 f7       	brne	.-6      	; 0x1824 <linkbus_init+0x10>
    182a:	e7 e7       	ldi	r30, 0x77	; 119
    182c:	f3 e0       	ldi	r31, 0x03	; 3
    182e:	10 82       	st	Z, r1
    1830:	11 a6       	std	Z+41, r1	; 0x29
    1832:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_ZL9tx_buffer+0x52>
    1836:	d9 01       	movw	r26, r18
    1838:	c8 01       	movw	r24, r16
    183a:	80 58       	subi	r24, 0x80	; 128
    183c:	9b 47       	sbci	r25, 0x7B	; 123
    183e:	a1 4e       	sbci	r26, 0xE1	; 225
    1840:	bf 4f       	sbci	r27, 0xFF	; 255
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	aa 1f       	adc	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	aa 1f       	adc	r26, r26
    1850:	bb 1f       	adc	r27, r27
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	00 0f       	add	r16, r16
    1860:	11 1f       	adc	r17, r17
    1862:	22 1f       	adc	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	00 0f       	add	r16, r16
    1868:	11 1f       	adc	r17, r17
    186a:	22 1f       	adc	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	a9 01       	movw	r20, r18
    1870:	98 01       	movw	r18, r16
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	44 1f       	adc	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	44 1f       	adc	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	0e 94 9b 31 	call	0x6336	; 0x6336 <__udivmodsi4>
    1886:	21 50       	subi	r18, 0x01	; 1
    1888:	31 09       	sbc	r19, r1
    188a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    188e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1892:	88 e9       	ldi	r24, 0x98	; 152
    1894:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1898:	8e e0       	ldi	r24, 0x0E	; 14
    189a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    189e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <linkbus_disable>:
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    18ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    18b2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <linkbus_end_tx>
    18b6:	8e e7       	ldi	r24, 0x7E	; 126
    18b8:	e9 ef       	ldi	r30, 0xF9	; 249
    18ba:	f2 e0       	ldi	r31, 0x02	; 2
    18bc:	df 01       	movw	r26, r30
    18be:	1d 92       	st	X+, r1
    18c0:	8a 95       	dec	r24
    18c2:	e9 f7       	brne	.-6      	; 0x18be <linkbus_disable+0x16>
    18c4:	e7 e7       	ldi	r30, 0x77	; 119
    18c6:	f3 e0       	ldi	r31, 0x03	; 3
    18c8:	10 82       	st	Z, r1
    18ca:	11 a6       	std	Z+41, r1	; 0x29
    18cc:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_ZL9tx_buffer+0x52>
    18d0:	08 95       	ret

000018d2 <_Z17linkbus_send_textPc>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    18de:	21 11       	cpse	r18, r1
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <_Z17linkbus_send_textPc+0x38>
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	a1 f0       	breq	.+40     	; 0x190e <_Z17linkbus_send_textPc+0x3c>
    18e6:	8c 01       	movw	r16, r24
    18e8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <nextEmptyTxBuffer>
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	b9 f4       	brne	.+46     	; 0x191e <_Z17linkbus_send_textPc+0x4c>
    18f0:	c8 ec       	ldi	r28, 0xC8	; 200
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <_Z17linkbus_send_textPc+0x28>
    18f6:	20 97       	sbiw	r28, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <_Z17linkbus_send_textPc+0x40>
    18fa:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <_ZL17linkbus_tx_active>
    18fe:	99 23       	and	r25, r25
    1900:	51 f0       	breq	.+20     	; 0x1916 <_Z17linkbus_send_textPc+0x44>
    1902:	20 97       	sbiw	r28, 0x00	; 0
    1904:	d1 f0       	breq	.+52     	; 0x193a <_Z17linkbus_send_textPc+0x68>
    1906:	21 97       	sbiw	r28, 0x01	; 1
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <_Z17linkbus_send_textPc+0x28>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	1b c0       	rjmp	.+54     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	19 c0       	rjmp	.+50     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	17 c0       	rjmp	.+46     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    1916:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <nextEmptyTxBuffer>
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f3       	breq	.-40     	; 0x18f6 <_Z17linkbus_send_textPc+0x24>
    191e:	1f 93       	push	r17
    1920:	0f 93       	push	r16
    1922:	9f 93       	push	r25
    1924:	8f 93       	push	r24
    1926:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    192a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_Z16linkbus_start_txv>
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    193a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <nextEmptyTxBuffer>
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	71 f7       	brne	.-36     	; 0x191e <_Z17linkbus_send_textPc+0x4c>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <lb_send_NewPrompt>:
    194e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1952:	81 11       	cpse	r24, r1
    1954:	06 c0       	rjmp	.+12     	; 0x1962 <lb_send_NewPrompt+0x14>
    1956:	83 e2       	ldi	r24, 0x23	; 35
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    195e:	81 11       	cpse	r24, r1
    1960:	fa cf       	rjmp	.-12     	; 0x1956 <lb_send_NewPrompt+0x8>
    1962:	08 95       	ret

00001964 <lb_send_NewLine>:
    1964:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1968:	81 11       	cpse	r24, r1
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <lb_send_NewLine+0x10>
    196c:	86 e2       	ldi	r24, 0x26	; 38
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    1974:	08 95       	ret

00001976 <lb_echo_char>:
    1976:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    197a:	91 11       	cpse	r25, r1
    197c:	07 c0       	rjmp	.+14     	; 0x198c <lb_echo_char+0x16>
    197e:	e3 ef       	ldi	r30, 0xF3	; 243
    1980:	f3 e0       	ldi	r31, 0x03	; 3
    1982:	80 83       	st	Z, r24
    1984:	11 82       	std	Z+1, r1	; 0x01
    1986:	cf 01       	movw	r24, r30
    1988:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    198c:	08 95       	ret

0000198e <lb_send_string>:
    198e:	cf 93       	push	r28
    1990:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1994:	21 11       	cpse	r18, r1
    1996:	28 c0       	rjmp	.+80     	; 0x19e8 <lb_send_string+0x5a>
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	41 f1       	breq	.+80     	; 0x19ec <lb_send_string+0x5e>
    199c:	fc 01       	movw	r30, r24
    199e:	20 81       	ld	r18, Z
    19a0:	22 23       	and	r18, r18
    19a2:	31 f1       	breq	.+76     	; 0x19f0 <lb_send_string+0x62>
    19a4:	01 90       	ld	r0, Z+
    19a6:	00 20       	and	r0, r0
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <lb_send_string+0x16>
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	e8 1b       	sub	r30, r24
    19ae:	f9 0b       	sbc	r31, r25
    19b0:	ba 97       	sbiw	r30, 0x2a	; 42
    19b2:	00 f5       	brcc	.+64     	; 0x19f4 <lb_send_string+0x66>
    19b4:	c6 2f       	mov	r28, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	49 e2       	ldi	r20, 0x29	; 41
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	83 ef       	ldi	r24, 0xF3	; 243
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0e 94 8b 33 	call	0x6716	; 0x6716 <strncpy>
    19c4:	cc 23       	and	r28, r28
    19c6:	59 f0       	breq	.+22     	; 0x19de <lb_send_string+0x50>
    19c8:	83 ef       	ldi	r24, 0xF3	; 243
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    19d0:	81 11       	cpse	r24, r1
    19d2:	fa cf       	rjmp	.-12     	; 0x19c8 <lb_send_string+0x3a>
    19d4:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZL17linkbus_tx_active>
    19d8:	81 11       	cpse	r24, r1
    19da:	fc cf       	rjmp	.-8      	; 0x19d4 <lb_send_string+0x46>
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <lb_send_string+0x68>
    19de:	83 ef       	ldi	r24, 0xF3	; 243
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <lb_send_string+0x68>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <lb_send_string+0x68>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <lb_send_string+0x68>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <lb_send_string+0x68>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <lb_enabled>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    19fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	91 11       	cpse	r25, r1
    1a02:	80 e0       	ldi	r24, 0x00	; 0
}
    1a04:	08 95       	ret

00001a06 <__vector_6>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	0f 92       	push	r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	8f 93       	push	r24
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <g_i2c_not_timed_out>
    1a1a:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <_ZL24g_enableHardwareWDResets>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <__vector_6+0x26>
    1a22:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_6E5limit>
    1a26:	81 11       	cpse	r24, r1
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <__vector_6+0x36>
    1a2a:	0e c0       	rjmp	.+28     	; 0x1a48 <__vector_6+0x42>
    1a2c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_6E5limit>
    1a30:	88 23       	and	r24, r24
    1a32:	51 f0       	breq	.+20     	; 0x1a48 <__vector_6+0x42>
    1a34:	81 50       	subi	r24, 0x01	; 1
    1a36:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_6E5limit>
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <__vector_6+0x42>
    1a3c:	e0 e6       	ldi	r30, 0x60	; 96
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	80 83       	st	Z, r24
    1a46:	f2 cf       	rjmp	.-28     	; 0x1a2c <__vector_6+0x26>
    1a48:	ff 91       	pop	r31
    1a4a:	ef 91       	pop	r30
    1a4c:	8f 91       	pop	r24
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	0f 90       	pop	r0
    1a54:	1f 90       	pop	r1
    1a56:	18 95       	reti

00001a58 <_Z8wdt_init7WDReset>:
    1a58:	a8 95       	wdr
    1a5a:	04 b6       	in	r0, 0x34	; 52
    1a5c:	03 fe       	sbrs	r0, 3
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <_Z8wdt_init7WDReset+0xe>
    1a60:	94 b7       	in	r25, 0x34	; 52
    1a62:	98 70       	andi	r25, 0x08	; 8
    1a64:	94 bf       	out	0x34, r25	; 52
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <_Z8wdt_init7WDReset+0x2a>
    1a6a:	84 b7       	in	r24, 0x34	; 52
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	84 bf       	out	0x34, r24	; 52
    1a70:	e0 e6       	ldi	r30, 0x60	; 96
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 61       	ori	r24, 0x18	; 24
    1a78:	80 83       	st	Z, r24
    1a7a:	10 82       	st	Z, r1
    1a7c:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <_ZL24g_enableHardwareWDResets>
    1a80:	08 95       	ret
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	41 f4       	brne	.+16     	; 0x1a96 <_Z8wdt_init7WDReset+0x3e>
    1a86:	e0 e6       	ldi	r30, 0x60	; 96
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	98 61       	ori	r25, 0x18	; 24
    1a8e:	90 83       	st	Z, r25
    1a90:	98 e6       	ldi	r25, 0x68	; 104
    1a92:	90 83       	st	Z, r25
    1a94:	11 c0       	rjmp	.+34     	; 0x1ab8 <_Z8wdt_init7WDReset+0x60>
    1a96:	81 11       	cpse	r24, r1
    1a98:	08 c0       	rjmp	.+16     	; 0x1aaa <_Z8wdt_init7WDReset+0x52>
    1a9a:	e0 e6       	ldi	r30, 0x60	; 96
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	90 81       	ld	r25, Z
    1aa0:	98 61       	ori	r25, 0x18	; 24
    1aa2:	90 83       	st	Z, r25
    1aa4:	96 e4       	ldi	r25, 0x46	; 70
    1aa6:	90 83       	st	Z, r25
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <_Z8wdt_init7WDReset+0x60>
    1aaa:	e0 e6       	ldi	r30, 0x60	; 96
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	90 81       	ld	r25, Z
    1ab0:	98 61       	ori	r25, 0x18	; 24
    1ab2:	90 83       	st	Z, r25
    1ab4:	98 e4       	ldi	r25, 0x48	; 72
    1ab6:	90 83       	st	Z, r25
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	81 11       	cpse	r24, r1
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <_Z8wdt_init7WDReset+0x68>
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <_ZL24g_enableHardwareWDResets>
    1ac4:	08 95       	ret

00001ac6 <__vector_21>:
    1ac6:	1f 92       	push	r1
    1ac8:	0f 92       	push	r0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	0f 92       	push	r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	2f 93       	push	r18
    1ad2:	3f 93       	push	r19
    1ad4:	4f 93       	push	r20
    1ad6:	5f 93       	push	r21
    1ad8:	6f 93       	push	r22
    1ada:	7f 93       	push	r23
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	80 ed       	ldi	r24, 0xD0	; 208
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Goertzel9DataPointEi>
    1af6:	88 23       	and	r24, r24
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <__vector_21+0x3e>
    1afa:	ea e7       	ldi	r30, 0x7A	; 122
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	80 83       	st	Z, r24
    1b04:	ff 91       	pop	r31
    1b06:	ef 91       	pop	r30
    1b08:	bf 91       	pop	r27
    1b0a:	af 91       	pop	r26
    1b0c:	9f 91       	pop	r25
    1b0e:	8f 91       	pop	r24
    1b10:	7f 91       	pop	r23
    1b12:	6f 91       	pop	r22
    1b14:	5f 91       	pop	r21
    1b16:	4f 91       	pop	r20
    1b18:	3f 91       	pop	r19
    1b1a:	2f 91       	pop	r18
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0
    1b22:	1f 90       	pop	r1
    1b24:	18 95       	reti

00001b26 <__vector_18>:
    1b26:	1f 92       	push	r1
    1b28:	0f 92       	push	r0
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	0f 92       	push	r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	1f 93       	push	r17
    1b32:	2f 93       	push	r18
    1b34:	3f 93       	push	r19
    1b36:	4f 93       	push	r20
    1b38:	5f 93       	push	r21
    1b3a:	6f 93       	push	r22
    1b3c:	7f 93       	push	r23
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	af 93       	push	r26
    1b44:	bf 93       	push	r27
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	ef 93       	push	r30
    1b4c:	ff 93       	push	r31
    1b4e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1b52:	c0 91 a5 04 	lds	r28, 0x04A5	; 0x8004a5 <_ZZ11__vector_18E4buff>
    1b56:	d0 91 a6 04 	lds	r29, 0x04A6	; 0x8004a6 <_ZZ11__vector_18E4buff+0x1>
    1b5a:	20 97       	sbiw	r28, 0x00	; 0
    1b5c:	51 f4       	brne	.+20     	; 0x1b72 <__vector_18+0x4c>
    1b5e:	0e 94 8f 0b 	call	0x171e	; 0x171e <nextEmptyRxBuffer>
    1b62:	ec 01       	movw	r28, r24
    1b64:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <_ZZ11__vector_18E4buff+0x1>
    1b68:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <_ZZ11__vector_18E4buff>
    1b6c:	89 2b       	or	r24, r25
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__vector_18+0x4c>
    1b70:	62 c1       	rjmp	.+708    	; 0x1e36 <__vector_18+0x310>
    1b72:	81 2f       	mov	r24, r17
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 71 33 	call	0x66e2	; 0x66e2 <toupper>
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZZ11__vector_18E11ignoreCount>
    1b80:	88 23       	and	r24, r24
    1b82:	21 f0       	breq	.+8      	; 0x1b8c <__vector_18+0x66>
    1b84:	81 50       	subi	r24, 0x01	; 1
    1b86:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_ZZ11__vector_18E11ignoreCount>
    1b8a:	55 c1       	rjmp	.+682    	; 0x1e36 <__vector_18+0x310>
    1b8c:	2b 31       	cpi	r18, 0x1B	; 27
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <__vector_18+0x72>
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_ZZ11__vector_18E11ignoreCount>
    1b96:	4f c1       	rjmp	.+670    	; 0x1e36 <__vector_18+0x310>
    1b98:	2d 30       	cpi	r18, 0x0D	; 13
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <__vector_18+0x78>
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <__vector_18+0xf6>
    1b9e:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <_ZZ11__vector_18E13receiving_msg>
    1ba2:	88 23       	and	r24, r24
    1ba4:	31 f1       	breq	.+76     	; 0x1bf2 <__vector_18+0xcc>
    1ba6:	e0 91 a3 04 	lds	r30, 0x04A3	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1baa:	ee 23       	and	r30, r30
    1bac:	f9 f0       	breq	.+62     	; 0x1bec <__vector_18+0xc6>
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	88 83       	st	Y, r24
    1bb2:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1bb6:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZZ11__vector_18E11field_index>
    1bc2:	88 23       	and	r24, r24
    1bc4:	79 f0       	breq	.+30     	; 0x1be4 <__vector_18+0xbe>
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <_ZZ11__vector_18E9field_len>
    1bce:	54 e1       	ldi	r21, 0x14	; 20
    1bd0:	58 9f       	mul	r21, r24
    1bd2:	90 01       	movw	r18, r0
    1bd4:	59 9f       	mul	r21, r25
    1bd6:	30 0d       	add	r19, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	c2 0f       	add	r28, r18
    1bdc:	d3 1f       	adc	r29, r19
    1bde:	c4 0f       	add	r28, r20
    1be0:	d1 1d       	adc	r29, r1
    1be2:	1b 82       	std	Y+3, r1	; 0x03
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	ec 59       	subi	r30, 0x9C	; 156
    1be8:	fb 4f       	sbci	r31, 0xFB	; 251
    1bea:	10 82       	st	Z, r1
    1bec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <__vector_18+0xd4>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	9f e7       	ldi	r25, 0x7F	; 127
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1bfe:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZZ11__vector_18E9field_len>
    1c02:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1c06:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1c0a:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZZ11__vector_18E11field_index>
    1c0e:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZZ11__vector_18E4buff+0x1>
    1c12:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <_ZZ11__vector_18E4buff>
    1c16:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZZ11__vector_18E13receiving_msg>
    1c1a:	0d c1       	rjmp	.+538    	; 0x1e36 <__vector_18+0x310>
    1c1c:	22 23       	and	r18, r18
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <__vector_18+0xfc>
    1c20:	0a c1       	rjmp	.+532    	; 0x1e36 <__vector_18+0x310>
    1c22:	e0 91 a3 04 	lds	r30, 0x04A3	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1c26:	4e 2f       	mov	r20, r30
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	da 01       	movw	r26, r20
    1c2c:	ac 59       	subi	r26, 0x9C	; 156
    1c2e:	bb 4f       	sbci	r27, 0xFB	; 251
    1c30:	2c 93       	st	X, r18
    1c32:	ee 23       	and	r30, r30
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <__vector_18+0x112>
    1c36:	d6 c0       	rjmp	.+428    	; 0x1de4 <__vector_18+0x2be>
    1c38:	2f 37       	cpi	r18, 0x7F	; 127
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <__vector_18+0x118>
    1c3c:	5f c0       	rjmp	.+190    	; 0x1cfc <__vector_18+0x1d6>
    1c3e:	e1 50       	subi	r30, 0x01	; 1
    1c40:	e0 93 a3 04 	sts	0x04A3, r30	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1c44:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZZ11__vector_18E11field_index>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	13 c0       	rjmp	.+38     	; 0x1c72 <__vector_18+0x14c>
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	ec 59       	subi	r30, 0x9C	; 156
    1c50:	fb 4f       	sbci	r31, 0xFB	; 251
    1c52:	40 81       	ld	r20, Z
    1c54:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1c58:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1c5c:	84 1b       	sub	r24, r20
    1c5e:	91 09       	sbc	r25, r1
    1c60:	6a e0       	ldi	r22, 0x0A	; 10
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    1c68:	70 93 62 04 	sts	0x0462, r23	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1c6c:	60 93 61 04 	sts	0x0461, r22	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1c70:	39 c0       	rjmp	.+114    	; 0x1ce4 <__vector_18+0x1be>
    1c72:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <_ZZ11__vector_18E9field_len>
    1c76:	99 23       	and	r25, r25
    1c78:	91 f0       	breq	.+36     	; 0x1c9e <__vector_18+0x178>
    1c7a:	4f ef       	ldi	r20, 0xFF	; 255
    1c7c:	49 0f       	add	r20, r25
    1c7e:	40 93 5f 04 	sts	0x045F, r20	; 0x80045f <_ZZ11__vector_18E9field_len>
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	54 e1       	ldi	r21, 0x14	; 20
    1c88:	58 9f       	mul	r21, r24
    1c8a:	b0 01       	movw	r22, r0
    1c8c:	59 9f       	mul	r21, r25
    1c8e:	70 0d       	add	r23, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	c6 0f       	add	r28, r22
    1c94:	d7 1f       	adc	r29, r23
    1c96:	c4 0f       	add	r28, r20
    1c98:	d1 1d       	adc	r29, r1
    1c9a:	1b 82       	std	Y+3, r1	; 0x03
    1c9c:	23 c0       	rjmp	.+70     	; 0x1ce4 <__vector_18+0x1be>
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	ec 59       	subi	r30, 0x9C	; 156
    1ca2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca4:	90 81       	ld	r25, Z
    1ca6:	90 32       	cpi	r25, 0x20	; 32
    1ca8:	a1 f4       	brne	.+40     	; 0x1cd2 <__vector_18+0x1ac>
    1caa:	81 50       	subi	r24, 0x01	; 1
    1cac:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <_ZZ11__vector_18E11field_index>
    1cb0:	de 01       	movw	r26, r28
    1cb2:	94 e1       	ldi	r25, 0x14	; 20
    1cb4:	89 9f       	mul	r24, r25
    1cb6:	a0 0d       	add	r26, r0
    1cb8:	b1 1d       	adc	r27, r1
    1cba:	11 24       	eor	r1, r1
    1cbc:	13 96       	adiw	r26, 0x03	; 3
    1cbe:	fd 01       	movw	r30, r26
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	00 20       	and	r0, r0
    1cc4:	e9 f7       	brne	.-6      	; 0x1cc0 <__vector_18+0x19a>
    1cc6:	31 97       	sbiw	r30, 0x01	; 1
    1cc8:	ea 1b       	sub	r30, r26
    1cca:	fb 0b       	sbc	r31, r27
    1ccc:	e0 93 5f 04 	sts	0x045F, r30	; 0x80045f <_ZZ11__vector_18E9field_len>
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <__vector_18+0x1be>
    1cd2:	94 e1       	ldi	r25, 0x14	; 20
    1cd4:	89 9f       	mul	r24, r25
    1cd6:	c0 0d       	add	r28, r0
    1cd8:	d1 1d       	adc	r29, r1
    1cda:	11 24       	eor	r1, r1
    1cdc:	1b 82       	std	Y+3, r1	; 0x03
    1cde:	81 50       	subi	r24, 0x01	; 1
    1ce0:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <_ZZ11__vector_18E11field_index>
    1ce4:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1ce8:	e8 2f       	mov	r30, r24
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	ec 59       	subi	r30, 0x9C	; 156
    1cee:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf0:	10 82       	st	Z, r1
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	93 c0       	rjmp	.+294    	; 0x1e1c <__vector_18+0x2f6>
    1cf6:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZZ11__vector_18E13receiving_msg>
    1cfa:	90 c0       	rjmp	.+288    	; 0x1e1c <__vector_18+0x2f6>
    1cfc:	20 32       	cpi	r18, 0x20	; 32
    1cfe:	79 f5       	brne	.+94     	; 0x1d5e <__vector_18+0x238>
    1d00:	fa 01       	movw	r30, r20
    1d02:	ed 59       	subi	r30, 0x9D	; 157
    1d04:	fb 4f       	sbci	r31, 0xFB	; 251
    1d06:	80 81       	ld	r24, Z
    1d08:	80 32       	cpi	r24, 0x20	; 32
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <__vector_18+0x1e8>
    1d0c:	94 c0       	rjmp	.+296    	; 0x1e36 <__vector_18+0x310>
    1d0e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZZ11__vector_18E11field_index>
    1d12:	68 2f       	mov	r22, r24
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	fb 01       	movw	r30, r22
    1d18:	31 96       	adiw	r30, 0x01	; 1
    1d1a:	33 97       	sbiw	r30, 0x03	; 3
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <__vector_18+0x1fa>
    1d1e:	8b c0       	rjmp	.+278    	; 0x1e36 <__vector_18+0x310>
    1d20:	88 23       	and	r24, r24
    1d22:	79 f0       	breq	.+30     	; 0x1d42 <__vector_18+0x21c>
    1d24:	61 50       	subi	r22, 0x01	; 1
    1d26:	71 09       	sbc	r23, r1
    1d28:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <_ZZ11__vector_18E9field_len>
    1d2c:	a4 e1       	ldi	r26, 0x14	; 20
    1d2e:	a6 9f       	mul	r26, r22
    1d30:	f0 01       	movw	r30, r0
    1d32:	a7 9f       	mul	r26, r23
    1d34:	f0 0d       	add	r31, r0
    1d36:	11 24       	eor	r1, r1
    1d38:	ce 0f       	add	r28, r30
    1d3a:	df 1f       	adc	r29, r31
    1d3c:	c9 0f       	add	r28, r25
    1d3e:	d1 1d       	adc	r29, r1
    1d40:	1b 82       	std	Y+3, r1	; 0x03
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <_ZZ11__vector_18E11field_index>
    1d48:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZZ11__vector_18E9field_len>
    1d4c:	4f 5f       	subi	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	4e 33       	cpi	r20, 0x3E	; 62
    1d52:	51 05       	cpc	r21, r1
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <__vector_18+0x232>
    1d56:	4e e3       	ldi	r20, 0x3E	; 62
    1d58:	40 93 a3 04 	sts	0x04A3, r20	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1d5c:	5f c0       	rjmp	.+190    	; 0x1e1c <__vector_18+0x2f6>
    1d5e:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZZ11__vector_18E9field_len>
    1d62:	84 31       	cpi	r24, 0x14	; 20
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <__vector_18+0x242>
    1d66:	67 c0       	rjmp	.+206    	; 0x1e36 <__vector_18+0x310>
    1d68:	40 91 60 04 	lds	r20, 0x0460	; 0x800460 <_ZZ11__vector_18E11field_index>
    1d6c:	41 11       	cpse	r20, r1
    1d6e:	19 c0       	rjmp	.+50     	; 0x1da2 <__vector_18+0x27c>
    1d70:	40 91 61 04 	lds	r20, 0x0461	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1d74:	50 91 62 04 	lds	r21, 0x0462	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1d78:	ba 01       	movw	r22, r20
    1d7a:	66 0f       	add	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	44 0f       	add	r20, r20
    1d80:	55 1f       	adc	r21, r21
    1d82:	44 0f       	add	r20, r20
    1d84:	55 1f       	adc	r21, r21
    1d86:	44 0f       	add	r20, r20
    1d88:	55 1f       	adc	r21, r21
    1d8a:	46 0f       	add	r20, r22
    1d8c:	57 1f       	adc	r21, r23
    1d8e:	42 0f       	add	r20, r18
    1d90:	51 1d       	adc	r21, r1
    1d92:	50 93 62 04 	sts	0x0462, r21	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1d96:	40 93 61 04 	sts	0x0461, r20	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <_ZZ11__vector_18E9field_len>
    1da0:	16 c0       	rjmp	.+44     	; 0x1dce <__vector_18+0x2a8>
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	41 50       	subi	r20, 0x01	; 1
    1da6:	51 09       	sbc	r21, r1
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	98 0f       	add	r25, r24
    1dac:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <_ZZ11__vector_18E9field_len>
    1db0:	e4 e1       	ldi	r30, 0x14	; 20
    1db2:	e4 9f       	mul	r30, r20
    1db4:	b0 01       	movw	r22, r0
    1db6:	e5 9f       	mul	r30, r21
    1db8:	70 0d       	add	r23, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	c6 0f       	add	r28, r22
    1dbe:	d7 1f       	adc	r29, r23
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e8 0f       	add	r30, r24
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	23 83       	std	Z+3, r18	; 0x03
    1dc8:	c9 0f       	add	r28, r25
    1dca:	d1 1d       	adc	r29, r1
    1dcc:	1b 82       	std	Y+3, r1	; 0x03
    1dce:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	8e 33       	cpi	r24, 0x3E	; 62
    1dd8:	91 05       	cpc	r25, r1
    1dda:	0c f0       	brlt	.+2      	; 0x1dde <__vector_18+0x2b8>
    1ddc:	8e e3       	ldi	r24, 0x3E	; 62
    1dde:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1de2:	1c c0       	rjmp	.+56     	; 0x1e1c <__vector_18+0x2f6>
    1de4:	2f 37       	cpi	r18, 0x7F	; 127
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <__vector_18+0x2d2>
    1de8:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1dec:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1df0:	18 16       	cp	r1, r24
    1df2:	19 06       	cpc	r1, r25
    1df4:	bc f0       	brlt	.+46     	; 0x1e24 <__vector_18+0x2fe>
    1df6:	1b c0       	rjmp	.+54     	; 0x1e2e <__vector_18+0x308>
    1df8:	20 32       	cpi	r18, 0x20	; 32
    1dfa:	e9 f0       	breq	.+58     	; 0x1e36 <__vector_18+0x310>
    1dfc:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZZ11__vector_18E11field_index>
    1e00:	c9 01       	movw	r24, r18
    1e02:	99 27       	eor	r25, r25
    1e04:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1e08:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1e0c:	1b 82       	std	Y+3, r1	; 0x03
    1e0e:	1f 8a       	std	Y+23, r1	; 0x17
    1e10:	1b a6       	std	Y+43, r1	; 0x2b
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <_ZZ11__vector_18E13receiving_msg>
    1e18:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ11__vector_18E9charIndex>
    1e1c:	82 2f       	mov	r24, r18
    1e1e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lb_echo_char>
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <__vector_18+0x310>
    1e24:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1e28:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1e2c:	f7 cf       	rjmp	.-18     	; 0x1e1c <__vector_18+0x2f6>
    1e2e:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZZ11__vector_18E6msg_ID+0x1>
    1e32:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZZ11__vector_18E6msg_ID>
    1e36:	ff 91       	pop	r31
    1e38:	ef 91       	pop	r30
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	bf 91       	pop	r27
    1e40:	af 91       	pop	r26
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	1f 91       	pop	r17
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_19>:
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	2f 93       	push	r18
    1e6a:	3f 93       	push	r19
    1e6c:	4f 93       	push	r20
    1e6e:	5f 93       	push	r21
    1e70:	6f 93       	push	r22
    1e72:	7f 93       	push	r23
    1e74:	8f 93       	push	r24
    1e76:	9f 93       	push	r25
    1e78:	af 93       	push	r26
    1e7a:	bf 93       	push	r27
    1e7c:	ef 93       	push	r30
    1e7e:	ff 93       	push	r31
    1e80:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <_ZZ11__vector_19E4buff>
    1e84:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <_ZZ11__vector_19E4buff+0x1>
    1e88:	89 2b       	or	r24, r25
    1e8a:	31 f4       	brne	.+12     	; 0x1e98 <__vector_19+0x3a>
    1e8c:	0e 94 41 0b 	call	0x1682	; 0x1682 <nextFullTxBuffer>
    1e90:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <_ZZ11__vector_19E4buff+0x1>
    1e94:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <_ZZ11__vector_19E4buff>
    1e98:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <_ZZ11__vector_19E4buff>
    1e9c:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <_ZZ11__vector_19E4buff+0x1>
    1ea0:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <_ZZ11__vector_19E9charIndex>
    1ea4:	df 01       	movw	r26, r30
    1ea6:	a8 0f       	add	r26, r24
    1ea8:	b1 1d       	adc	r27, r1
    1eaa:	9c 91       	ld	r25, X
    1eac:	99 23       	and	r25, r25
    1eae:	31 f0       	breq	.+12     	; 0x1ebc <__vector_19+0x5e>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <_ZZ11__vector_19E9charIndex>
    1eb6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1eba:	0d c0       	rjmp	.+26     	; 0x1ed6 <__vector_19+0x78>
    1ebc:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <_ZZ11__vector_19E9charIndex>
    1ec0:	10 82       	st	Z, r1
    1ec2:	0e 94 41 0b 	call	0x1682	; 0x1682 <nextFullTxBuffer>
    1ec6:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <_ZZ11__vector_19E4buff+0x1>
    1eca:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <_ZZ11__vector_19E4buff>
    1ece:	89 2b       	or	r24, r25
    1ed0:	11 f4       	brne	.+4      	; 0x1ed6 <__vector_19+0x78>
    1ed2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <linkbus_end_tx>
    1ed6:	ff 91       	pop	r31
    1ed8:	ef 91       	pop	r30
    1eda:	bf 91       	pop	r27
    1edc:	af 91       	pop	r26
    1ede:	9f 91       	pop	r25
    1ee0:	8f 91       	pop	r24
    1ee2:	7f 91       	pop	r23
    1ee4:	6f 91       	pop	r22
    1ee6:	5f 91       	pop	r21
    1ee8:	4f 91       	pop	r20
    1eea:	3f 91       	pop	r19
    1eec:	2f 91       	pop	r18
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	0f 90       	pop	r0
    1ef4:	1f 90       	pop	r1
    1ef6:	18 95       	reti

00001ef8 <__vector_8>:
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	1f 93       	push	r17
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	4f 93       	push	r20
    1f0a:	5f 93       	push	r21
    1f0c:	6f 93       	push	r22
    1f0e:	7f 93       	push	r23
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	ef 93       	push	r30
    1f1a:	ff 93       	push	r31
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <__vector_8+0x2a>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_tick_count>
    1f2a:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <g_tick_count+0x1>
    1f2e:	a0 91 d9 04 	lds	r26, 0x04D9	; 0x8004d9 <g_tick_count+0x2>
    1f32:	b0 91 da 04 	lds	r27, 0x04DA	; 0x8004da <g_tick_count+0x3>
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	a1 1d       	adc	r26, r1
    1f3a:	b1 1d       	adc	r27, r1
    1f3c:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <g_tick_count>
    1f40:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <g_tick_count+0x1>
    1f44:	a0 93 d9 04 	sts	0x04D9, r26	; 0x8004d9 <g_tick_count+0x2>
    1f48:	b0 93 da 04 	sts	0x04DA, r27	; 0x8004da <g_tick_count+0x3>
    1f4c:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_dtmf_error_countdown>
    1f50:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_dtmf_error_countdown+0x1>
    1f54:	89 2b       	or	r24, r25
    1f56:	49 f0       	breq	.+18     	; 0x1f6a <__vector_8+0x72>
    1f58:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_dtmf_error_countdown>
    1f5c:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_dtmf_error_countdown+0x1>
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_dtmf_error_countdown+0x1>
    1f66:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_dtmf_error_countdown>
    1f6a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_att_rf_shutdown_delay>
    1f6e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    1f72:	89 2b       	or	r24, r25
    1f74:	49 f0       	breq	.+18     	; 0x1f88 <__vector_8+0x90>
    1f76:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_att_rf_shutdown_delay>
    1f7a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    1f84:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_att_rf_shutdown_delay>
    1f88:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_LED_Enunciation_holdoff>
    1f8c:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    1f90:	89 2b       	or	r24, r25
    1f92:	49 f0       	breq	.+18     	; 0x1fa6 <__vector_8+0xae>
    1f94:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_LED_Enunciation_holdoff>
    1f98:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    1fa2:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_LED_Enunciation_holdoff>
    1fa6:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <g_dtmf_detected>
    1faa:	88 23       	and	r24, r24
    1fac:	81 f0       	breq	.+32     	; 0x1fce <__vector_8+0xd6>
    1fae:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_tone_duration_ticks>
    1fb2:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_tone_duration_ticks+0x1>
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <g_tone_duration_ticks+0x1>
    1fbc:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <g_tone_duration_ticks>
    1fc0:	84 e9       	ldi	r24, 0x94	; 148
    1fc2:	95 e0       	ldi	r25, 0x05	; 5
    1fc4:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    1fc8:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_LED_Enunciation_holdoff>
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <__vector_8+0xde>
    1fce:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_tone_duration_ticks+0x1>
    1fd2:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_tone_duration_ticks>
    1fd6:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    1fda:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    1fde:	89 2b       	or	r24, r25
    1fe0:	49 f0       	breq	.+18     	; 0x1ff4 <__vector_8+0xfc>
    1fe2:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    1fe6:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    1ff0:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	1a 82       	std	Y+2, r1	; 0x02
    1ffa:	81 e1       	ldi	r24, 0x11	; 17
    1ffc:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    2000:	18 2f       	mov	r17, r24
    2002:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_reset_button_held>
    2006:	88 23       	and	r24, r24
    2008:	09 f4       	brne	.+2      	; 0x200c <__vector_8+0x114>
    200a:	5c c1       	rjmp	.+696    	; 0x22c4 <__vector_8+0x3cc>
    200c:	11 23       	and	r17, r17
    200e:	09 f4       	brne	.+2      	; 0x2012 <__vector_8+0x11a>
    2010:	5c c1       	rjmp	.+696    	; 0x22ca <__vector_8+0x3d2>
    2012:	58 c1       	rjmp	.+688    	; 0x22c4 <__vector_8+0x3cc>
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	80 e1       	ldi	r24, 0x10	; 16
    2018:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    201c:	1b c0       	rjmp	.+54     	; 0x2054 <__vector_8+0x15c>
    201e:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_seconds_since_powerup>
    2022:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_seconds_since_powerup+0x1>
    2026:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_seconds_since_powerup+0x2>
    202a:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_seconds_since_powerup+0x3>
    202e:	05 97       	sbiw	r24, 0x05	; 5
    2030:	a1 05       	cpc	r26, r1
    2032:	b1 05       	cpc	r27, r1
    2034:	79 f4       	brne	.+30     	; 0x2054 <__vector_8+0x15c>
    2036:	86 e0       	ldi	r24, 0x06	; 6
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e0       	ldi	r26, 0x00	; 0
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <g_seconds_since_powerup>
    2042:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_seconds_since_powerup+0x1>
    2046:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <g_seconds_since_powerup+0x2>
    204a:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <g_seconds_since_powerup+0x3>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_perform_EEPROM_reset>
    2054:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E15holdButtonState>
    2058:	18 13       	cpse	r17, r24
    205a:	28 c0       	rjmp	.+80     	; 0x20ac <__vector_8+0x1b4>
    205c:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <g_sync_pin_timer>
    2060:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <g_sync_pin_timer+0x1>
    2064:	8b 3b       	cpi	r24, 0xBB	; 187
    2066:	90 41       	sbci	r25, 0x10	; 16
    2068:	4c f4       	brge	.+18     	; 0x207c <__vector_8+0x184>
    206a:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <g_sync_pin_timer>
    206e:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <g_sync_pin_timer+0x1>
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <g_sync_pin_timer+0x1>
    2078:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <g_sync_pin_timer>
    207c:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <g_sync_pin_timer>
    2080:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <g_sync_pin_timer+0x1>
    2084:	80 39       	cpi	r24, 0x90	; 144
    2086:	91 05       	cpc	r25, r1
    2088:	bc f0       	brlt	.+46     	; 0x20b8 <__vector_8+0x1c0>
    208a:	11 30       	cpi	r17, 0x01	; 1
    208c:	09 f4       	brne	.+2      	; 0x2090 <__vector_8+0x198>
    208e:	2b c1       	rjmp	.+598    	; 0x22e6 <__vector_8+0x3ee>
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <g_sync_pin_stable>
    2096:	11 11       	cpse	r17, r1
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <__vector_8+0x1c0>
    209a:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_reset_button_held>
    209e:	81 11       	cpse	r24, r1
    20a0:	0b c0       	rjmp	.+22     	; 0x20b8 <__vector_8+0x1c0>
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	80 e1       	ldi	r24, 0x10	; 16
    20a6:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    20aa:	06 c0       	rjmp	.+12     	; 0x20b8 <__vector_8+0x1c0>
    20ac:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <_ZZ10__vector_8E15holdButtonState>
    20b0:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <g_sync_pin_timer+0x1>
    20b4:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <g_sync_pin_timer>
    20b8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    20bc:	81 11       	cpse	r24, r1
    20be:	17 c1       	rjmp	.+558    	; 0x22ee <__vector_8+0x3f6>
    20c0:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_on_the_air>
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <__vector_8+0x1d2>
    20c8:	12 c1       	rjmp	.+548    	; 0x22ee <__vector_8+0x3f6>
    20ca:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZZ10__vector_8E11ptt_dropped>
    20ce:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <_ZZ10__vector_8E11ptt_dropped+0x1>
    20d2:	89 2b       	or	r24, r25
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <__vector_8+0x1e0>
    20d6:	11 c1       	rjmp	.+546    	; 0x22fa <__vector_8+0x402>
    20d8:	0a c1       	rjmp	.+532    	; 0x22ee <__vector_8+0x3f6>
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	84 e0       	ldi	r24, 0x04	; 4
    20de:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    20e2:	84 e9       	ldi	r24, 0x94	; 148
    20e4:	95 e0       	ldi	r25, 0x05	; 5
    20e6:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZZ10__vector_8E9ptt_delay+0x1>
    20ea:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZZ10__vector_8E9ptt_delay>
    20ee:	11 c1       	rjmp	.+546    	; 0x2312 <__vector_8+0x41a>
    20f0:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <_ZZ10__vector_8E9ptt_delay>
    20f4:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <_ZZ10__vector_8E9ptt_delay+0x1>
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	31 f0       	breq	.+12     	; 0x2108 <__vector_8+0x210>
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZZ10__vector_8E9ptt_delay+0x1>
    2102:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZZ10__vector_8E9ptt_delay>
    2106:	05 c1       	rjmp	.+522    	; 0x2312 <__vector_8+0x41a>
    2108:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZZ10__vector_8E7codeInc>
    210c:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	f1 f1       	breq	.+124    	; 0x2190 <__vector_8+0x298>
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    211a:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E7codeInc>
    211e:	89 2b       	or	r24, r25
    2120:	09 f0       	breq	.+2      	; 0x2124 <__vector_8+0x22c>
    2122:	f7 c0       	rjmp	.+494    	; 0x2312 <__vector_8+0x41a>
    2124:	ae 01       	movw	r20, r28
    2126:	4e 5f       	subi	r20, 0xFE	; 254
    2128:	5f 4f       	sbci	r21, 0xFF	; 255
    212a:	be 01       	movw	r22, r28
    212c:	6f 5f       	subi	r22, 0xFF	; 255
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    2138:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <_ZZ10__vector_8E3key>
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	81 11       	cpse	r24, r1
    2140:	14 c0       	rjmp	.+40     	; 0x216a <__vector_8+0x272>
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	88 23       	and	r24, r24
    2146:	89 f0       	breq	.+34     	; 0x216a <__vector_8+0x272>
    2148:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZZ10__vector_8E3key>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_callsign_sent>
    2152:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_use_ptt_periodic_reset>
    2156:	88 23       	and	r24, r24
    2158:	41 f0       	breq	.+16     	; 0x216a <__vector_8+0x272>
    215a:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <g_on_the_air>
    215e:	84 e9       	ldi	r24, 0x94	; 148
    2160:	95 e0       	ldi	r25, 0x05	; 5
    2162:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <_ZZ10__vector_8E11ptt_dropped+0x1>
    2166:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <_ZZ10__vector_8E11ptt_dropped>
    216a:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2174:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    2178:	86 e0       	ldi	r24, 0x06	; 6
    217a:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    217e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    2182:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_sendAMmodulation>
    2186:	9f e2       	ldi	r25, 0x2F	; 47
    2188:	97 bd       	out	0x27, r25	; 39
    218a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <g_audio_tone_state>
    218e:	c1 c0       	rjmp	.+386    	; 0x2312 <__vector_8+0x41a>
    2190:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_sync_pin_stable>
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	29 f0       	breq	.+10     	; 0x21a2 <__vector_8+0x2aa>
    2198:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    219c:	80 e1       	ldi	r24, 0x10	; 16
    219e:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    21a2:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    21a6:	86 e0       	ldi	r24, 0x06	; 6
    21a8:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    21ac:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    21b0:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_sendAMmodulation>
    21b4:	9f e2       	ldi	r25, 0x2F	; 47
    21b6:	97 bd       	out	0x27, r25	; 39
    21b8:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <g_audio_tone_state>
    21bc:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_code_throttle>
    21c0:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <g_code_throttle+0x1>
    21c4:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    21c8:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E7codeInc>
    21cc:	a2 c0       	rjmp	.+324    	; 0x2312 <__vector_8+0x41a>
    21ce:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <_ZZ10__vector_8E9ptt_delay>
    21d2:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <_ZZ10__vector_8E9ptt_delay+0x1>
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	39 f4       	brne	.+14     	; 0x21e8 <__vector_8+0x2f0>
    21da:	84 e6       	ldi	r24, 0x64	; 100
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZZ10__vector_8E9ptt_delay+0x1>
    21e2:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZZ10__vector_8E9ptt_delay>
    21e6:	1c c0       	rjmp	.+56     	; 0x2220 <__vector_8+0x328>
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZZ10__vector_8E9ptt_delay+0x1>
    21ee:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZZ10__vector_8E9ptt_delay>
    21f2:	89 2b       	or	r24, r25
    21f4:	a9 f4       	brne	.+42     	; 0x2220 <__vector_8+0x328>
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	84 e0       	ldi	r24, 0x04	; 4
    21fa:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    21fe:	10 c0       	rjmp	.+32     	; 0x2220 <__vector_8+0x328>
    2200:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZZ10__vector_8E11ptt_dropped>
    2204:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <_ZZ10__vector_8E11ptt_dropped+0x1>
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	51 f0       	breq	.+20     	; 0x2220 <__vector_8+0x328>
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <_ZZ10__vector_8E11ptt_dropped+0x1>
    2212:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <_ZZ10__vector_8E11ptt_dropped>
    2216:	89 2b       	or	r24, r25
    2218:	19 f4       	brne	.+6      	; 0x2220 <__vector_8+0x328>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_on_the_air>
    2220:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_LED_enunciating>
    2224:	88 23       	and	r24, r24
    2226:	a9 f1       	breq	.+106    	; 0x2292 <__vector_8+0x39a>
    2228:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_LED_Enunciation_holdoff>
    222c:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    2230:	89 2b       	or	r24, r25
    2232:	e9 f5       	brne	.+122    	; 0x22ae <__vector_8+0x3b6>
    2234:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZZ10__vector_8E7codeInc>
    2238:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	01 f1       	breq	.+64     	; 0x2280 <__vector_8+0x388>
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    2246:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E7codeInc>
    224a:	89 2b       	or	r24, r25
    224c:	81 f5       	brne	.+96     	; 0x22ae <__vector_8+0x3b6>
    224e:	ae 01       	movw	r20, r28
    2250:	4e 5f       	subi	r20, 0xFE	; 254
    2252:	5f 4f       	sbci	r21, 0xFF	; 255
    2254:	be 01       	movw	r22, r28
    2256:	6f 5f       	subi	r22, 0xFF	; 255
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    2262:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <_ZZ10__vector_8E3key>
    2266:	68 2f       	mov	r22, r24
    2268:	80 e1       	ldi	r24, 0x10	; 16
    226a:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    226e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_code_throttle>
    2272:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <g_code_throttle+0x1>
    2276:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    227a:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E7codeInc>
    227e:	17 c0       	rjmp	.+46     	; 0x22ae <__vector_8+0x3b6>
    2280:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_code_throttle>
    2284:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <g_code_throttle+0x1>
    2288:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E7codeInc+0x1>
    228c:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E7codeInc>
    2290:	0e c0       	rjmp	.+28     	; 0x22ae <__vector_8+0x3b6>
    2292:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZ10__vector_8E3key>
    2296:	88 23       	and	r24, r24
    2298:	51 f0       	breq	.+20     	; 0x22ae <__vector_8+0x3b6>
    229a:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZZ10__vector_8E3key>
    229e:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_sync_pin_stable>
    22a2:	82 30       	cpi	r24, 0x02	; 2
    22a4:	21 f0       	breq	.+8      	; 0x22ae <__vector_8+0x3b6>
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	80 e1       	ldi	r24, 0x10	; 16
    22aa:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	86 e0       	ldi	r24, 0x06	; 6
    22b2:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    22b6:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_sendAMmodulation>
    22ba:	8f e2       	ldi	r24, 0x2F	; 47
    22bc:	87 bd       	out	0x27, r24	; 39
    22be:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_audio_tone_state>
    22c2:	27 c0       	rjmp	.+78     	; 0x2312 <__vector_8+0x41a>
    22c4:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_reset_button_held>
    22c8:	c5 ce       	rjmp	.-630    	; 0x2054 <__vector_8+0x15c>
    22ca:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_seconds_since_powerup>
    22ce:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_seconds_since_powerup+0x1>
    22d2:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_seconds_since_powerup+0x2>
    22d6:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_seconds_since_powerup+0x3>
    22da:	05 97       	sbiw	r24, 0x05	; 5
    22dc:	a1 05       	cpc	r26, r1
    22de:	b1 05       	cpc	r27, r1
    22e0:	0c f0       	brlt	.+2      	; 0x22e4 <__vector_8+0x3ec>
    22e2:	9d ce       	rjmp	.-710    	; 0x201e <__vector_8+0x126>
    22e4:	97 ce       	rjmp	.-722    	; 0x2014 <__vector_8+0x11c>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <g_sync_pin_stable>
    22ec:	e5 ce       	rjmp	.-566    	; 0x20b8 <__vector_8+0x1c0>
    22ee:	84 e0       	ldi	r24, 0x04	; 4
    22f0:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    22f4:	81 11       	cpse	r24, r1
    22f6:	6b cf       	rjmp	.-298    	; 0x21ce <__vector_8+0x2d6>
    22f8:	83 cf       	rjmp	.-250    	; 0x2200 <__vector_8+0x308>
    22fa:	87 e2       	ldi	r24, 0x27	; 39
    22fc:	9b e0       	ldi	r25, 0x0B	; 11
    22fe:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    2302:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_att_rf_shutdown_delay>
    2306:	84 e0       	ldi	r24, 0x04	; 4
    2308:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    230c:	81 11       	cpse	r24, r1
    230e:	f0 ce       	rjmp	.-544    	; 0x20f0 <__vector_8+0x1f8>
    2310:	e4 ce       	rjmp	.-568    	; 0x20da <__vector_8+0x1e2>
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	1f 91       	pop	r17
    2334:	0f 90       	pop	r0
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	0f 90       	pop	r0
    233a:	1f 90       	pop	r1
    233c:	18 95       	reti

0000233e <__vector_1>:
    233e:	1f 92       	push	r1
    2340:	0f 92       	push	r0
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	0f 92       	push	r0
    2346:	11 24       	eor	r1, r1
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	2f 93       	push	r18
    235e:	3f 93       	push	r19
    2360:	4f 93       	push	r20
    2362:	5f 93       	push	r21
    2364:	6f 93       	push	r22
    2366:	7f 93       	push	r23
    2368:	8f 93       	push	r24
    236a:	9f 93       	push	r25
    236c:	af 93       	push	r26
    236e:	bf 93       	push	r27
    2370:	ef 93       	push	r30
    2372:	ff 93       	push	r31
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	1f 92       	push	r1
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    2382:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2386:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    238a:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    238e:	01 96       	adiw	r24, 0x01	; 1
    2390:	a1 1d       	adc	r26, r1
    2392:	b1 1d       	adc	r27, r1
    2394:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_current_epoch>
    2398:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_current_epoch+0x1>
    239c:	a0 93 5d 05 	sts	0x055D, r26	; 0x80055d <g_current_epoch+0x2>
    23a0:	b0 93 5e 05 	sts	0x055E, r27	; 0x80055e <g_current_epoch+0x3>
    23a4:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_seconds_since_powerup>
    23a8:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_seconds_since_powerup+0x1>
    23ac:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_seconds_since_powerup+0x2>
    23b0:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_seconds_since_powerup+0x3>
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	a1 1d       	adc	r26, r1
    23b8:	b1 1d       	adc	r27, r1
    23ba:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <g_seconds_since_powerup>
    23be:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_seconds_since_powerup+0x1>
    23c2:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <g_seconds_since_powerup+0x2>
    23c6:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <g_seconds_since_powerup+0x3>
    23ca:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <g_temperature_check_countdown>
    23ce:	88 23       	and	r24, r24
    23d0:	29 f0       	breq	.+10     	; 0x23dc <__vector_1+0x9e>
    23d2:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <g_temperature_check_countdown>
    23d6:	81 50       	subi	r24, 0x01	; 1
    23d8:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <g_temperature_check_countdown>
    23dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    23e0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    23e4:	89 2b       	or	r24, r25
    23e6:	49 f0       	breq	.+18     	; 0x23fa <__vector_1+0xbc>
    23e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    23ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    23f6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
    23fa:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_voltage_check_countdown>
    23fe:	88 23       	and	r24, r24
    2400:	29 f0       	breq	.+10     	; 0x240c <__vector_1+0xce>
    2402:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_voltage_check_countdown>
    2406:	81 50       	subi	r24, 0x01	; 1
    2408:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <g_voltage_check_countdown>
    240c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    2410:	88 23       	and	r24, r24
    2412:	91 f1       	breq	.+100    	; 0x2478 <__vector_1+0x13a>
    2414:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_use_rtc_for_startstop>
    2418:	88 23       	and	r24, r24
    241a:	09 f4       	brne	.+2      	; 0x241e <__vector_1+0xe0>
    241c:	ba c3       	rjmp	.+1908   	; 0x2b92 <__vector_1+0x854>
    241e:	40 91 5b 05 	lds	r20, 0x055B	; 0x80055b <g_current_epoch>
    2422:	50 91 5c 05 	lds	r21, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2426:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_current_epoch+0x2>
    242a:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_current_epoch+0x3>
    242e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    2432:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    2436:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    243a:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    243e:	48 17       	cp	r20, r24
    2440:	59 07       	cpc	r21, r25
    2442:	6a 07       	cpc	r22, r26
    2444:	7b 07       	cpc	r23, r27
    2446:	08 f4       	brcc	.+2      	; 0x244a <__vector_1+0x10c>
    2448:	a4 c3       	rjmp	.+1864   	; 0x2b92 <__vector_1+0x854>
    244a:	40 91 5b 05 	lds	r20, 0x055B	; 0x80055b <g_current_epoch>
    244e:	50 91 5c 05 	lds	r21, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2452:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_current_epoch+0x2>
    2456:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_current_epoch+0x3>
    245a:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    245e:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    2462:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    2466:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    246a:	48 17       	cp	r20, r24
    246c:	59 07       	cpc	r21, r25
    246e:	6a 07       	cpc	r22, r26
    2470:	7b 07       	cpc	r23, r27
    2472:	08 f4       	brcc	.+2      	; 0x2476 <__vector_1+0x138>
    2474:	02 c3       	rjmp	.+1540   	; 0x2a7a <__vector_1+0x73c>
    2476:	8d c3       	rjmp	.+1818   	; 0x2b92 <__vector_1+0x854>
    2478:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_use_rtc_for_startstop>
    247c:	88 23       	and	r24, r24
    247e:	d1 f0       	breq	.+52     	; 0x24b4 <__vector_1+0x176>
    2480:	40 91 5b 05 	lds	r20, 0x055B	; 0x80055b <g_current_epoch>
    2484:	50 91 5c 05 	lds	r21, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2488:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_current_epoch+0x2>
    248c:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_current_epoch+0x3>
    2490:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    2494:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    2498:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    249c:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    24a0:	48 17       	cp	r20, r24
    24a2:	59 07       	cpc	r21, r25
    24a4:	6a 07       	cpc	r22, r26
    24a6:	7b 07       	cpc	r23, r27
    24a8:	28 f0       	brcs	.+10     	; 0x24b4 <__vector_1+0x176>
    24aa:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <g_use_rtc_for_startstop>
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
    24b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    24b8:	81 11       	cpse	r24, r1
    24ba:	6b c3       	rjmp	.+1750   	; 0x2b92 <__vector_1+0x854>
    24bc:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	87 ef       	ldi	r24, 0xF7	; 247
    24c4:	94 e0       	ldi	r25, 0x04	; 4
    24c6:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <timeRequiredToSendStrAtWPM>
    24ca:	8c 50       	subi	r24, 0x0C	; 12
    24cc:	9e 4f       	sbci	r25, 0xFE	; 254
    24ce:	9c 01       	movw	r18, r24
    24d0:	36 95       	lsr	r19
    24d2:	27 95       	ror	r18
    24d4:	36 95       	lsr	r19
    24d6:	27 95       	ror	r18
    24d8:	36 95       	lsr	r19
    24da:	27 95       	ror	r18
    24dc:	a5 ec       	ldi	r26, 0xC5	; 197
    24de:	b0 e2       	ldi	r27, 0x20	; 32
    24e0:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    24e4:	8c 01       	movw	r16, r24
    24e6:	12 95       	swap	r17
    24e8:	02 95       	swap	r16
    24ea:	0f 70       	andi	r16, 0x0F	; 15
    24ec:	01 27       	eor	r16, r17
    24ee:	1f 70       	andi	r17, 0x0F	; 15
    24f0:	01 27       	eor	r16, r17
    24f2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync>
    24f6:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    24fa:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    24fe:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2502:	89 2b       	or	r24, r25
    2504:	8a 2b       	or	r24, r26
    2506:	8b 2b       	or	r24, r27
    2508:	09 f0       	breq	.+2      	; 0x250c <__vector_1+0x1ce>
    250a:	ee c2       	rjmp	.+1500   	; 0x2ae8 <__vector_1+0x7aa>
    250c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <g_initialize_fox_transmissions>
    2510:	88 23       	and	r24, r24
    2512:	09 f4       	brne	.+2      	; 0x2516 <__vector_1+0x1d8>
    2514:	dc c2       	rjmp	.+1464   	; 0x2ace <__vector_1+0x790>
    2516:	e8 c2       	rjmp	.+1488   	; 0x2ae8 <__vector_1+0x7aa>
    2518:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    251c:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <g_fox_id_offset>
    2520:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <g_fox_id_offset+0x1>
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	40 91 2c 05 	lds	r20, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    252a:	50 91 2d 05 	lds	r21, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    252e:	82 1b       	sub	r24, r18
    2530:	93 0b       	sbc	r25, r19
    2532:	18 16       	cp	r1, r24
    2534:	19 06       	cpc	r1, r25
    2536:	14 f0       	brlt	.+4      	; 0x253c <__vector_1+0x1fe>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	84 9f       	mul	r24, r20
    253e:	90 01       	movw	r18, r0
    2540:	85 9f       	mul	r24, r21
    2542:	30 0d       	add	r19, r0
    2544:	94 9f       	mul	r25, r20
    2546:	30 0d       	add	r19, r0
    2548:	11 24       	eor	r1, r1
    254a:	c9 01       	movw	r24, r18
    254c:	80 1b       	sub	r24, r16
    254e:	91 0b       	sbc	r25, r17
    2550:	09 2e       	mov	r0, r25
    2552:	00 0c       	add	r0, r0
    2554:	aa 0b       	sbc	r26, r26
    2556:	bb 0b       	sbc	r27, r27
    2558:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    255c:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2560:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2564:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    2568:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    256c:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZZ10__vector_1E18seconds_into_cycle>
    2570:	10 e0       	ldi	r17, 0x00	; 0
    2572:	fe c2       	rjmp	.+1532   	; 0x2b70 <__vector_1+0x832>
    2574:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <g_initialize_fox_transmissions>
    2578:	21 30       	cpi	r18, 0x01	; 1
    257a:	31 f5       	brne	.+76     	; 0x25c8 <__vector_1+0x28a>
    257c:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    2580:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    2584:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_seconds_since_sync>
    2588:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    258c:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    2590:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2594:	09 2e       	mov	r0, r25
    2596:	00 0c       	add	r0, r0
    2598:	aa 0b       	sbc	r26, r26
    259a:	bb 0b       	sbc	r27, r27
    259c:	84 0f       	add	r24, r20
    259e:	95 1f       	adc	r25, r21
    25a0:	a6 1f       	adc	r26, r22
    25a2:	b7 1f       	adc	r27, r23
    25a4:	01 2e       	mov	r0, r17
    25a6:	00 0c       	add	r0, r0
    25a8:	22 0b       	sbc	r18, r18
    25aa:	33 0b       	sbc	r19, r19
    25ac:	80 1b       	sub	r24, r16
    25ae:	91 0b       	sbc	r25, r17
    25b0:	a2 0b       	sbc	r26, r18
    25b2:	b3 0b       	sbc	r27, r19
    25b4:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    25b8:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    25bc:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    25c0:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    25c4:	11 e0       	ldi	r17, 0x01	; 1
    25c6:	d4 c2       	rjmp	.+1448   	; 0x2b70 <__vector_1+0x832>
    25c8:	20 91 23 05 	lds	r18, 0x0523	; 0x800523 <g_initialize_fox_transmissions>
    25cc:	23 30       	cpi	r18, 0x03	; 3
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <__vector_1+0x294>
    25d0:	e2 c0       	rjmp	.+452    	; 0x2796 <__vector_1+0x458>
    25d2:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <g_fox>
    25d6:	a0 91 26 05 	lds	r26, 0x0526	; 0x800526 <g_fox_id_offset>
    25da:	b0 91 27 05 	lds	r27, 0x0527	; 0x800527 <g_fox_id_offset+0x1>
    25de:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <g_fox_counter>
    25e2:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <g_fox_counter+0x1>
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	2a 1b       	sub	r18, r26
    25ea:	3b 0b       	sbc	r19, r27
    25ec:	2e 17       	cp	r18, r30
    25ee:	3f 07       	cpc	r19, r31
    25f0:	41 f0       	breq	.+16     	; 0x2602 <__vector_1+0x2c4>
    25f2:	20 91 28 05 	lds	r18, 0x0528	; 0x800528 <g_number_of_foxes>
    25f6:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <g_number_of_foxes+0x1>
    25fa:	21 30       	cpi	r18, 0x01	; 1
    25fc:	31 05       	cpc	r19, r1
    25fe:	09 f0       	breq	.+2      	; 0x2602 <__vector_1+0x2c4>
    2600:	66 c0       	rjmp	.+204    	; 0x26ce <__vector_1+0x390>
    2602:	20 91 2c 05 	lds	r18, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    2606:	30 91 2d 05 	lds	r19, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    260a:	60 91 2c 05 	lds	r22, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    260e:	70 91 2d 05 	lds	r23, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    2612:	ca 01       	movw	r24, r20
    2614:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    2618:	a9 01       	movw	r20, r18
    261a:	48 1b       	sub	r20, r24
    261c:	59 0b       	sbc	r21, r25
    261e:	ca 01       	movw	r24, r20
    2620:	04 17       	cp	r16, r20
    2622:	15 07       	cpc	r17, r21
    2624:	14 f5       	brge	.+68     	; 0x266a <__vector_1+0x32c>
    2626:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_seconds_since_sync>
    262a:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    262e:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    2632:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2636:	09 2e       	mov	r0, r25
    2638:	00 0c       	add	r0, r0
    263a:	aa 0b       	sbc	r26, r26
    263c:	bb 0b       	sbc	r27, r27
    263e:	84 0f       	add	r24, r20
    2640:	95 1f       	adc	r25, r21
    2642:	a6 1f       	adc	r26, r22
    2644:	b7 1f       	adc	r27, r23
    2646:	01 2e       	mov	r0, r17
    2648:	00 0c       	add	r0, r0
    264a:	22 0b       	sbc	r18, r18
    264c:	33 0b       	sbc	r19, r19
    264e:	80 1b       	sub	r24, r16
    2650:	91 0b       	sbc	r25, r17
    2652:	a2 0b       	sbc	r26, r18
    2654:	b3 0b       	sbc	r27, r19
    2656:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    265a:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    265e:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2662:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    2666:	11 e0       	ldi	r17, 0x01	; 1
    2668:	83 c2       	rjmp	.+1286   	; 0x2b70 <__vector_1+0x832>
    266a:	40 17       	cp	r20, r16
    266c:	51 07       	cpc	r21, r17
    266e:	0c f0       	brlt	.+2      	; 0x2672 <__vector_1+0x334>
    2670:	87 c2       	rjmp	.+1294   	; 0x2b80 <__vector_1+0x842>
    2672:	c0 90 6a 05 	lds	r12, 0x056A	; 0x80056a <g_seconds_since_sync>
    2676:	d0 90 6b 05 	lds	r13, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    267a:	e0 90 6c 05 	lds	r14, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    267e:	f0 90 6d 05 	lds	r15, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2682:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <g_cycle_period_seconds>
    2686:	50 91 2b 05 	lds	r21, 0x052B	; 0x80052b <g_cycle_period_seconds+0x1>
    268a:	09 2e       	mov	r0, r25
    268c:	00 0c       	add	r0, r0
    268e:	aa 0b       	sbc	r26, r26
    2690:	bb 0b       	sbc	r27, r27
    2692:	8c 0d       	add	r24, r12
    2694:	9d 1d       	adc	r25, r13
    2696:	ae 1d       	adc	r26, r14
    2698:	bf 1d       	adc	r27, r15
    269a:	05 2e       	mov	r0, r21
    269c:	00 0c       	add	r0, r0
    269e:	66 0b       	sbc	r22, r22
    26a0:	77 0b       	sbc	r23, r23
    26a2:	84 0f       	add	r24, r20
    26a4:	95 1f       	adc	r25, r21
    26a6:	a6 1f       	adc	r26, r22
    26a8:	b7 1f       	adc	r27, r23
    26aa:	01 2e       	mov	r0, r17
    26ac:	00 0c       	add	r0, r0
    26ae:	22 0b       	sbc	r18, r18
    26b0:	33 0b       	sbc	r19, r19
    26b2:	80 1b       	sub	r24, r16
    26b4:	91 0b       	sbc	r25, r17
    26b6:	a2 0b       	sbc	r26, r18
    26b8:	b3 0b       	sbc	r27, r19
    26ba:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    26be:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    26c2:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    26c6:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    26ca:	11 e0       	ldi	r17, 0x01	; 1
    26cc:	51 c2       	rjmp	.+1186   	; 0x2b70 <__vector_1+0x832>
    26ce:	80 90 6a 05 	lds	r8, 0x056A	; 0x80056a <g_seconds_since_sync>
    26d2:	90 90 6b 05 	lds	r9, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    26d6:	a0 90 6c 05 	lds	r10, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    26da:	b0 90 6d 05 	lds	r11, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    26de:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <g_fox>
    26e2:	e0 90 26 05 	lds	r14, 0x0526	; 0x800526 <g_fox_id_offset>
    26e6:	f0 90 27 05 	lds	r15, 0x0527	; 0x800527 <g_fox_id_offset+0x1>
    26ea:	a0 91 2c 05 	lds	r26, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    26ee:	b0 91 2d 05 	lds	r27, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	ee 19       	sub	r30, r14
    26f6:	ff 09       	sbc	r31, r15
    26f8:	ea 9f       	mul	r30, r26
    26fa:	60 01       	movw	r12, r0
    26fc:	eb 9f       	mul	r30, r27
    26fe:	d0 0c       	add	r13, r0
    2700:	fa 9f       	mul	r31, r26
    2702:	d0 0c       	add	r13, r0
    2704:	11 24       	eor	r1, r1
    2706:	0d 2c       	mov	r0, r13
    2708:	00 0c       	add	r0, r0
    270a:	ee 08       	sbc	r14, r14
    270c:	ff 08       	sbc	r15, r15
    270e:	cb 01       	movw	r24, r22
    2710:	77 0f       	add	r23, r23
    2712:	aa 0b       	sbc	r26, r26
    2714:	bb 0b       	sbc	r27, r27
    2716:	a5 01       	movw	r20, r10
    2718:	94 01       	movw	r18, r8
    271a:	28 1b       	sub	r18, r24
    271c:	39 0b       	sbc	r19, r25
    271e:	4a 0b       	sbc	r20, r26
    2720:	5b 0b       	sbc	r21, r27
    2722:	da 01       	movw	r26, r20
    2724:	c9 01       	movw	r24, r18
    2726:	8c 0d       	add	r24, r12
    2728:	9d 1d       	adc	r25, r13
    272a:	ae 1d       	adc	r26, r14
    272c:	bf 1d       	adc	r27, r15
    272e:	01 2e       	mov	r0, r17
    2730:	00 0c       	add	r0, r0
    2732:	22 0b       	sbc	r18, r18
    2734:	33 0b       	sbc	r19, r19
    2736:	80 1b       	sub	r24, r16
    2738:	91 0b       	sbc	r25, r17
    273a:	a2 0b       	sbc	r26, r18
    273c:	b3 0b       	sbc	r27, r19
    273e:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2742:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2746:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    274a:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    274e:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_seconds_since_sync>
    2752:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    2756:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    275a:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    275e:	84 17       	cp	r24, r20
    2760:	95 07       	cpc	r25, r21
    2762:	a6 07       	cpc	r26, r22
    2764:	b7 07       	cpc	r27, r23
    2766:	0c f0       	brlt	.+2      	; 0x276a <__vector_1+0x42c>
    2768:	00 c2       	rjmp	.+1024   	; 0x2b6a <__vector_1+0x82c>
    276a:	40 91 24 05 	lds	r20, 0x0524	; 0x800524 <g_id_interval_seconds>
    276e:	50 91 25 05 	lds	r21, 0x0525	; 0x800525 <g_id_interval_seconds+0x1>
    2772:	05 2e       	mov	r0, r21
    2774:	00 0c       	add	r0, r0
    2776:	66 0b       	sbc	r22, r22
    2778:	77 0b       	sbc	r23, r23
    277a:	84 0f       	add	r24, r20
    277c:	95 1f       	adc	r25, r21
    277e:	a6 1f       	adc	r26, r22
    2780:	b7 1f       	adc	r27, r23
    2782:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2786:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    278a:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    278e:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	ed c1       	rjmp	.+986    	; 0x2b70 <__vector_1+0x832>
    2796:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync>
    279a:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    279e:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    27a2:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    27a6:	40 91 51 04 	lds	r20, 0x0451	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    27aa:	50 91 52 04 	lds	r21, 0x0452	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    27ae:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    27b2:	70 91 54 04 	lds	r23, 0x0454	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    27b6:	48 17       	cp	r20, r24
    27b8:	59 07       	cpc	r21, r25
    27ba:	6a 07       	cpc	r22, r26
    27bc:	7b 07       	cpc	r23, r27
    27be:	09 f0       	breq	.+2      	; 0x27c2 <__vector_1+0x484>
    27c0:	d6 c1       	rjmp	.+940    	; 0x2b6e <__vector_1+0x830>
    27c2:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <g_id_interval_seconds>
    27c6:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <g_id_interval_seconds+0x1>
    27ca:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_seconds_since_sync>
    27ce:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    27d2:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    27d6:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    27da:	09 2e       	mov	r0, r25
    27dc:	00 0c       	add	r0, r0
    27de:	aa 0b       	sbc	r26, r26
    27e0:	bb 0b       	sbc	r27, r27
    27e2:	84 0f       	add	r24, r20
    27e4:	95 1f       	adc	r25, r21
    27e6:	a6 1f       	adc	r26, r22
    27e8:	b7 1f       	adc	r27, r23
    27ea:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    27ee:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    27f2:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    27f6:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    27fa:	10 e0       	ldi	r17, 0x00	; 0
    27fc:	c2 c1       	rjmp	.+900    	; 0x2b82 <__vector_1+0x844>
    27fe:	00 e0       	ldi	r16, 0x00	; 0
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <__vector_1+0x4c6>
    2802:	01 e0       	ldi	r16, 0x01	; 1
    2804:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync>
    2808:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    280c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    2810:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2814:	20 91 2c 05 	lds	r18, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    2818:	30 91 2d 05 	lds	r19, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    281c:	03 2e       	mov	r0, r19
    281e:	00 0c       	add	r0, r0
    2820:	44 0b       	sbc	r20, r20
    2822:	55 0b       	sbc	r21, r21
    2824:	0e 94 bd 31 	call	0x637a	; 0x637a <__divmodsi4>
    2828:	67 2b       	or	r22, r23
    282a:	68 2b       	or	r22, r24
    282c:	69 2b       	or	r22, r25
    282e:	09 f4       	brne	.+2      	; 0x2832 <__vector_1+0x4f4>
    2830:	7b c1       	rjmp	.+758    	; 0x2b28 <__vector_1+0x7ea>
    2832:	20 c0       	rjmp	.+64     	; 0x2874 <__vector_1+0x536>
    2834:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <g_initialize_fox_transmissions>
    2838:	88 23       	and	r24, r24
    283a:	09 f4       	brne	.+2      	; 0x283e <__vector_1+0x500>
    283c:	83 c1       	rjmp	.+774    	; 0x2b44 <__vector_1+0x806>
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZZ10__vector_1E23fox_transition_occurred>
    2844:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_fox_counter>
    2848:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_fox_counter+0x1>
    284c:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_number_of_foxes>
    2850:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_number_of_foxes+0x1>
    2854:	82 17       	cp	r24, r18
    2856:	93 07       	cpc	r25, r19
    2858:	34 f4       	brge	.+12     	; 0x2866 <__vector_1+0x528>
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    2862:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
    2866:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    286a:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZZ10__vector_1E18seconds_into_cycle>
    286e:	01 11       	cpse	r16, r1
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <__vector_1+0x53a>
    2872:	36 c0       	rjmp	.+108    	; 0x28e0 <__vector_1+0x5a2>
    2874:	00 23       	and	r16, r16
    2876:	81 f1       	breq	.+96     	; 0x28d8 <__vector_1+0x59a>
    2878:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	82 e8       	ldi	r24, 0x82	; 130
    2880:	9b e1       	ldi	r25, 0x1B	; 27
    2882:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    2886:	cb 01       	movw	r24, r22
    2888:	6a e0       	ldi	r22, 0x0A	; 10
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	70 93 63 05 	sts	0x0563, r23	; 0x800563 <g_code_throttle+0x1>
    2898:	60 93 62 05 	sts	0x0562, r22	; 0x800562 <g_code_throttle>
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_messages_text+0x15>
    28a2:	88 23       	and	r24, r24
    28a4:	51 f0       	breq	.+20     	; 0x28ba <__vector_1+0x57c>
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	be 01       	movw	r22, r28
    28ac:	6f 5f       	subi	r22, 0xFF	; 255
    28ae:	7f 4f       	sbci	r23, 0xFF	; 255
    28b0:	87 ef       	ldi	r24, 0xF7	; 247
    28b2:	94 e0       	ldi	r25, 0x04	; 4
    28b4:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <__vector_1+0x58e>
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	be 01       	movw	r22, r28
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8c e4       	ldi	r24, 0x4C	; 76
    28c6:	92 e0       	ldi	r25, 0x02	; 2
    28c8:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    28cc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_callsign_sent>
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_on_the_air>
    28d6:	b2 c0       	rjmp	.+356    	; 0x2a3c <__vector_1+0x6fe>
    28d8:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZZ10__vector_1E23fox_transition_occurred>
    28dc:	88 23       	and	r24, r24
    28de:	21 f0       	breq	.+8      	; 0x28e8 <__vector_1+0x5aa>
    28e0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_callsign_sent>
    28e4:	81 11       	cpse	r24, r1
    28e6:	03 c0       	rjmp	.+6      	; 0x28ee <__vector_1+0x5b0>
    28e8:	11 23       	and	r17, r17
    28ea:	09 f4       	brne	.+2      	; 0x28ee <__vector_1+0x5b0>
    28ec:	a7 c0       	rjmp	.+334    	; 0x2a3c <__vector_1+0x6fe>
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	80 e1       	ldi	r24, 0x10	; 16
    28f2:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    28f6:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZZ10__vector_1E23fox_transition_occurred>
    28fa:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_number_of_foxes>
    28fe:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_number_of_foxes+0x1>
    2902:	02 97       	sbiw	r24, 0x02	; 2
    2904:	0c f4       	brge	.+2      	; 0x2908 <__vector_1+0x5ca>
    2906:	2b c1       	rjmp	.+598    	; 0x2b5e <__vector_1+0x820>
    2908:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <g_fox>
    290c:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <g_fox_counter>
    2910:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <g_fox_counter+0x1>
    2914:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_fox_id_offset>
    2918:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_fox_id_offset+0x1>
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	84 0f       	add	r24, r20
    2920:	95 1f       	adc	r25, r21
    2922:	28 17       	cp	r18, r24
    2924:	39 07       	cpc	r19, r25
    2926:	09 f0       	breq	.+2      	; 0x292a <__vector_1+0x5ec>
    2928:	17 c1       	rjmp	.+558    	; 0x2b58 <__vector_1+0x81a>
    292a:	19 c1       	rjmp	.+562    	; 0x2b5e <__vector_1+0x820>
    292c:	40 91 11 05 	lds	r20, 0x0511	; 0x800511 <g_voltage>
    2930:	50 91 12 05 	lds	r21, 0x0512	; 0x800512 <g_voltage+0x1>
    2934:	4b 5f       	subi	r20, 0xFB	; 251
    2936:	5f 4f       	sbci	r21, 0xFF	; 255
    2938:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <g_temperature>
    293c:	28 2f       	mov	r18, r24
    293e:	08 2e       	mov	r0, r24
    2940:	00 0c       	add	r0, r0
    2942:	33 0b       	sbc	r19, r19
    2944:	3f 93       	push	r19
    2946:	8f 93       	push	r24
    2948:	fa 01       	movw	r30, r20
    294a:	f6 95       	lsr	r31
    294c:	e7 95       	ror	r30
    294e:	f6 95       	lsr	r31
    2950:	e7 95       	ror	r30
    2952:	9f 01       	movw	r18, r30
    2954:	ab e7       	ldi	r26, 0x7B	; 123
    2956:	b4 e1       	ldi	r27, 0x14	; 20
    2958:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    295c:	96 95       	lsr	r25
    295e:	87 95       	ror	r24
    2960:	64 e6       	ldi	r22, 0x64	; 100
    2962:	68 9f       	mul	r22, r24
    2964:	90 01       	movw	r18, r0
    2966:	69 9f       	mul	r22, r25
    2968:	30 0d       	add	r19, r0
    296a:	11 24       	eor	r1, r1
    296c:	ca 01       	movw	r24, r20
    296e:	82 1b       	sub	r24, r18
    2970:	93 0b       	sbc	r25, r19
    2972:	9c 01       	movw	r18, r24
    2974:	ad ec       	ldi	r26, 0xCD	; 205
    2976:	bc ec       	ldi	r27, 0xCC	; 204
    2978:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    297c:	96 95       	lsr	r25
    297e:	87 95       	ror	r24
    2980:	96 95       	lsr	r25
    2982:	87 95       	ror	r24
    2984:	96 95       	lsr	r25
    2986:	87 95       	ror	r24
    2988:	9f 93       	push	r25
    298a:	8f 93       	push	r24
    298c:	9f 01       	movw	r18, r30
    298e:	ab e7       	ldi	r26, 0x7B	; 123
    2990:	b4 e1       	ldi	r27, 0x14	; 20
    2992:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    2996:	96 95       	lsr	r25
    2998:	87 95       	ror	r24
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
    299e:	88 e2       	ldi	r24, 0x28	; 40
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	9f 93       	push	r25
    29a4:	8f 93       	push	r24
    29a6:	88 ea       	ldi	r24, 0xA8	; 168
    29a8:	94 e0       	ldi	r25, 0x04	; 4
    29aa:	9f 93       	push	r25
    29ac:	8f 93       	push	r24
    29ae:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    29b2:	68 ea       	ldi	r22, 0xA8	; 168
    29b4:	74 e0       	ldi	r23, 0x04	; 4
    29b6:	82 ee       	ldi	r24, 0xE2	; 226
    29b8:	94 e0       	ldi	r25, 0x04	; 4
    29ba:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
    29be:	19 82       	std	Y+1, r1	; 0x01
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	12 c0       	rjmp	.+36     	; 0x29f0 <__vector_1+0x6b2>
    29cc:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	bc 01       	movw	r22, r24
    29d4:	66 0f       	add	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	66 0f       	add	r22, r22
    29da:	77 1f       	adc	r23, r23
    29dc:	68 0f       	add	r22, r24
    29de:	79 1f       	adc	r23, r25
    29e0:	63 58       	subi	r22, 0x83	; 131
    29e2:	7d 4f       	sbci	r23, 0xFD	; 253
    29e4:	82 ee       	ldi	r24, 0xE2	; 226
    29e6:	94 e0       	ldi	r25, 0x04	; 4
    29e8:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_pattern_codespeed>
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	82 e8       	ldi	r24, 0x82	; 130
    29f8:	9b e1       	ldi	r25, 0x1B	; 27
    29fa:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    29fe:	cb 01       	movw	r24, r22
    2a00:	6a e0       	ldi	r22, 0x0A	; 10
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	70 93 63 05 	sts	0x0563, r23	; 0x800563 <g_code_throttle+0x1>
    2a10:	60 93 62 05 	sts	0x0562, r22	; 0x800562 <g_code_throttle>
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	8c e1       	ldi	r24, 0x1C	; 28
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	be 01       	movw	r22, r28
    2a2a:	6f 5f       	subi	r22, 0xFF	; 255
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	82 ee       	ldi	r24, 0xE2	; 226
    2a30:	94 e0       	ldi	r25, 0x04	; 4
    2a32:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_on_the_air>
    2a3c:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <g_initialize_fox_transmissions>
    2a40:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync>
    2a44:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    2a48:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    2a4c:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	a1 1d       	adc	r26, r1
    2a54:	b1 1d       	adc	r27, r1
    2a56:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <g_seconds_since_sync>
    2a5a:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <g_seconds_since_sync+0x1>
    2a5e:	a0 93 6c 05 	sts	0x056C, r26	; 0x80056c <g_seconds_since_sync+0x2>
    2a62:	b0 93 6d 05 	sts	0x056D, r27	; 0x80056d <g_seconds_since_sync+0x3>
    2a66:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZZ10__vector_1E18seconds_into_cycle>
    2a6a:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2a74:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E18seconds_into_cycle>
    2a78:	8c c0       	rjmp	.+280    	; 0x2b92 <__vector_1+0x854>
    2a7a:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_LED_enunciating>
    2a7e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_transmissions_disabled>
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	70 e0       	ldi	r23, 0x00	; 0
    2a8e:	8c e1       	ldi	r24, 0x1C	; 28
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	be 01       	movw	r22, r28
    2a9c:	6f 5f       	subi	r22, 0xFF	; 255
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	82 ee       	ldi	r24, 0xE2	; 226
    2aa2:	94 e0       	ldi	r25, 0x04	; 4
    2aa4:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
    2aa8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_pattern_codespeed>
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	82 e8       	ldi	r24, 0x82	; 130
    2ab0:	9b e1       	ldi	r25, 0x1B	; 27
    2ab2:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	6a e0       	ldi	r22, 0x0A	; 10
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	0e 94 87 31 	call	0x630e	; 0x630e <__divmodhi4>
    2ac0:	66 0f       	add	r22, r22
    2ac2:	77 1f       	adc	r23, r23
    2ac4:	70 93 63 05 	sts	0x0563, r23	; 0x800563 <g_code_throttle+0x1>
    2ac8:	60 93 62 05 	sts	0x0562, r22	; 0x800562 <g_code_throttle>
    2acc:	62 c0       	rjmp	.+196    	; 0x2b92 <__vector_1+0x854>
    2ace:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <g_id_interval_seconds>
    2ad2:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <g_id_interval_seconds+0x1>
    2ad6:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <g_cycle_period_seconds>
    2ada:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <g_cycle_period_seconds+0x1>
    2ade:	82 17       	cp	r24, r18
    2ae0:	93 07       	cpc	r25, r19
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <__vector_1+0x7a8>
    2ae4:	19 cd       	rjmp	.-1486   	; 0x2518 <__vector_1+0x1da>
    2ae6:	40 cd       	rjmp	.-1408   	; 0x2568 <__vector_1+0x22a>
    2ae8:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync>
    2aec:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    2af0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    2af4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2af8:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <g_cycle_period_seconds>
    2afc:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <g_cycle_period_seconds+0x1>
    2b00:	03 2e       	mov	r0, r19
    2b02:	00 0c       	add	r0, r0
    2b04:	44 0b       	sbc	r20, r20
    2b06:	55 0b       	sbc	r21, r21
    2b08:	0e 94 bd 31 	call	0x637a	; 0x637a <__divmodsi4>
    2b0c:	ab 01       	movw	r20, r22
    2b0e:	70 93 50 04 	sts	0x0450, r23	; 0x800450 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2b12:	60 93 4f 04 	sts	0x044F, r22	; 0x80044f <_ZZ10__vector_1E18seconds_into_cycle>
    2b16:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <g_id_interval_seconds>
    2b1a:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <g_id_interval_seconds+0x1>
    2b1e:	23 2b       	or	r18, r19
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <__vector_1+0x7e6>
    2b22:	28 cd       	rjmp	.-1456   	; 0x2574 <__vector_1+0x236>
    2b24:	10 e0       	ldi	r17, 0x00	; 0
    2b26:	24 c0       	rjmp	.+72     	; 0x2b70 <__vector_1+0x832>
    2b28:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync>
    2b2c:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    2b30:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    2b34:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    2b38:	89 2b       	or	r24, r25
    2b3a:	8a 2b       	or	r24, r26
    2b3c:	8b 2b       	or	r24, r27
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <__vector_1+0x804>
    2b40:	79 ce       	rjmp	.-782    	; 0x2834 <__vector_1+0x4f6>
    2b42:	7d ce       	rjmp	.-774    	; 0x283e <__vector_1+0x500>
    2b44:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_fox_counter>
    2b48:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <g_fox_counter+0x1>
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    2b52:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
    2b56:	73 ce       	rjmp	.-794    	; 0x283e <__vector_1+0x500>
    2b58:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <g_on_the_air>
    2b5c:	6f cf       	rjmp	.-290    	; 0x2a3c <__vector_1+0x6fe>
    2b5e:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    2b62:	83 31       	cpi	r24, 0x13	; 19
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <__vector_1+0x82a>
    2b66:	32 cf       	rjmp	.-412    	; 0x29cc <__vector_1+0x68e>
    2b68:	e1 ce       	rjmp	.-574    	; 0x292c <__vector_1+0x5ee>
    2b6a:	10 e0       	ldi	r17, 0x00	; 0
    2b6c:	01 c0       	rjmp	.+2      	; 0x2b70 <__vector_1+0x832>
    2b6e:	10 e0       	ldi	r17, 0x00	; 0
    2b70:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_number_of_foxes>
    2b74:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_number_of_foxes+0x1>
    2b78:	89 2b       	or	r24, r25
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <__vector_1+0x840>
    2b7c:	40 ce       	rjmp	.-896    	; 0x27fe <__vector_1+0x4c0>
    2b7e:	ac ce       	rjmp	.-680    	; 0x28d8 <__vector_1+0x59a>
    2b80:	11 e0       	ldi	r17, 0x01	; 1
    2b82:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_number_of_foxes>
    2b86:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_number_of_foxes+0x1>
    2b8a:	89 2b       	or	r24, r25
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <__vector_1+0x852>
    2b8e:	74 ce       	rjmp	.-792    	; 0x2878 <__vector_1+0x53a>
    2b90:	38 ce       	rjmp	.-912    	; 0x2802 <__vector_1+0x4c4>
    2b92:	0f 90       	pop	r0
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	ff 91       	pop	r31
    2b9a:	ef 91       	pop	r30
    2b9c:	bf 91       	pop	r27
    2b9e:	af 91       	pop	r26
    2ba0:	9f 91       	pop	r25
    2ba2:	8f 91       	pop	r24
    2ba4:	7f 91       	pop	r23
    2ba6:	6f 91       	pop	r22
    2ba8:	5f 91       	pop	r21
    2baa:	4f 91       	pop	r20
    2bac:	3f 91       	pop	r19
    2bae:	2f 91       	pop	r18
    2bb0:	1f 91       	pop	r17
    2bb2:	0f 91       	pop	r16
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	df 90       	pop	r13
    2bba:	cf 90       	pop	r12
    2bbc:	bf 90       	pop	r11
    2bbe:	af 90       	pop	r10
    2bc0:	9f 90       	pop	r9
    2bc2:	8f 90       	pop	r8
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <__vector_14>:
    2bce:	1f 92       	push	r1
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	0f 92       	push	r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	ef 93       	push	r30
    2bee:	ff 93       	push	r31
    2bf0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_AM_enabled>
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	13 c0       	rjmp	.+38     	; 0x2c1e <__vector_14+0x50>
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZZ11__vector_14E6toggle>
    2bfe:	81 11       	cpse	r24, r1
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	60 93 4d 04 	sts	0x044D, r22	; 0x80044d <_ZZ11__vector_14E6toggle>
    2c06:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <g_audio_tone_state>
    2c0a:	88 23       	and	r24, r24
    2c0c:	21 f0       	breq	.+8      	; 0x2c16 <__vector_14+0x48>
    2c0e:	85 e0       	ldi	r24, 0x05	; 5
    2c10:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2c14:	04 c0       	rjmp	.+8      	; 0x2c1e <__vector_14+0x50>
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	85 e0       	ldi	r24, 0x05	; 5
    2c1a:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2c1e:	ff 91       	pop	r31
    2c20:	ef 91       	pop	r30
    2c22:	bf 91       	pop	r27
    2c24:	af 91       	pop	r26
    2c26:	9f 91       	pop	r25
    2c28:	8f 91       	pop	r24
    2c2a:	7f 91       	pop	r23
    2c2c:	6f 91       	pop	r22
    2c2e:	5f 91       	pop	r21
    2c30:	4f 91       	pop	r20
    2c32:	3f 91       	pop	r19
    2c34:	2f 91       	pop	r18
    2c36:	0f 90       	pop	r0
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	0f 90       	pop	r0
    2c3c:	1f 90       	pop	r1
    2c3e:	18 95       	reti

00002c40 <__vector_11>:
    2c40:	1f 92       	push	r1
    2c42:	0f 92       	push	r0
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	0f 92       	push	r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	2f 93       	push	r18
    2c4c:	3f 93       	push	r19
    2c4e:	4f 93       	push	r20
    2c50:	5f 93       	push	r21
    2c52:	6f 93       	push	r22
    2c54:	7f 93       	push	r23
    2c56:	8f 93       	push	r24
    2c58:	9f 93       	push	r25
    2c5a:	af 93       	push	r26
    2c5c:	bf 93       	push	r27
    2c5e:	ef 93       	push	r30
    2c60:	ff 93       	push	r31
    2c62:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_AM_enabled>
    2c66:	88 23       	and	r24, r24
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <__vector_11+0x2c>
    2c6a:	42 c0       	rjmp	.+132    	; 0x2cf0 <__vector_11+0xb0>
    2c6c:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_sendAMmodulation>
    2c70:	81 11       	cpse	r24, r1
    2c72:	28 c0       	rjmp	.+80     	; 0x2cc4 <__vector_11+0x84>
    2c74:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZZ11__vector_11E5index>
    2c78:	81 11       	cpse	r24, r1
    2c7a:	24 c0       	rjmp	.+72     	; 0x2cc4 <__vector_11+0x84>
    2c7c:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sendAMmodulationConstantly>
    2c80:	88 23       	and	r24, r24
    2c82:	39 f0       	breq	.+14     	; 0x2c92 <__vector_11+0x52>
    2c84:	2c c0       	rjmp	.+88     	; 0x2cde <__vector_11+0x9e>
    2c86:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZZ11__vector_11E5index>
    2c8a:	95 b9       	out	0x05, r25	; 5
    2c8c:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZZ11__vector_11E11controlPins>
    2c90:	2f c0       	rjmp	.+94     	; 0x2cf0 <__vector_11+0xb0>
    2c92:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_on_the_air>
    2c96:	88 23       	and	r24, r24
    2c98:	49 f0       	breq	.+18     	; 0x2cac <__vector_11+0x6c>
    2c9a:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZZ11__vector_11E11controlPins>
    2c9e:	8f 33       	cpi	r24, 0x3F	; 63
    2ca0:	39 f1       	breq	.+78     	; 0x2cf0 <__vector_11+0xb0>
    2ca2:	8f e3       	ldi	r24, 0x3F	; 63
    2ca4:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_ZZ11__vector_11E11controlPins>
    2ca8:	85 b9       	out	0x05, r24	; 5
    2caa:	22 c0       	rjmp	.+68     	; 0x2cf0 <__vector_11+0xb0>
    2cac:	84 e0       	ldi	r24, 0x04	; 4
    2cae:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	1d c0       	rjmp	.+58     	; 0x2cf0 <__vector_11+0xb0>
    2cb6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_att_rf_shutdown_delay>
    2cba:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    2cbe:	89 2b       	or	r24, r25
    2cc0:	a1 f0       	breq	.+40     	; 0x2cea <__vector_11+0xaa>
    2cc2:	16 c0       	rjmp	.+44     	; 0x2cf0 <__vector_11+0xb0>
    2cc4:	e0 91 4c 04 	lds	r30, 0x044C	; 0x80044c <_ZZ11__vector_11E5index>
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	8e 0f       	add	r24, r30
    2ccc:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ11__vector_11E5index>
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	e2 5d       	subi	r30, 0xD2	; 210
    2cd4:	fa 4f       	sbci	r31, 0xFA	; 250
    2cd6:	90 81       	ld	r25, Z
    2cd8:	80 32       	cpi	r24, 0x20	; 32
    2cda:	a8 f6       	brcc	.-86     	; 0x2c86 <__vector_11+0x46>
    2cdc:	d6 cf       	rjmp	.-84     	; 0x2c8a <__vector_11+0x4a>
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ11__vector_11E5index>
    2ce4:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <g_dataModulation>
    2ce8:	d0 cf       	rjmp	.-96     	; 0x2c8a <__vector_11+0x4a>
    2cea:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZZ11__vector_11E11controlPins>
    2cee:	15 b8       	out	0x05, r1	; 5
    2cf0:	ff 91       	pop	r31
    2cf2:	ef 91       	pop	r30
    2cf4:	bf 91       	pop	r27
    2cf6:	af 91       	pop	r26
    2cf8:	9f 91       	pop	r25
    2cfa:	8f 91       	pop	r24
    2cfc:	7f 91       	pop	r23
    2cfe:	6f 91       	pop	r22
    2d00:	5f 91       	pop	r21
    2d02:	4f 91       	pop	r20
    2d04:	3f 91       	pop	r19
    2d06:	2f 91       	pop	r18
    2d08:	0f 90       	pop	r0
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	0f 90       	pop	r0
    2d0e:	1f 90       	pop	r1
    2d10:	18 95       	reti

00002d12 <_Z23clockConfigurationCheckv>:
    2d12:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    2d16:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    2d1a:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    2d1e:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    2d22:	81 15       	cp	r24, r1
    2d24:	96 46       	sbci	r25, 0x66	; 102
    2d26:	ae 4e       	sbci	r26, 0xEE	; 238
    2d28:	bf 45       	sbci	r27, 0x5F	; 95
    2d2a:	08 f4       	brcc	.+2      	; 0x2d2e <_Z23clockConfigurationCheckv+0x1c>
    2d2c:	67 c0       	rjmp	.+206    	; 0x2dfc <_Z23clockConfigurationCheckv+0xea>
    2d2e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    2d32:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    2d36:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    2d3a:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    2d3e:	81 15       	cp	r24, r1
    2d40:	96 46       	sbci	r25, 0x66	; 102
    2d42:	ae 4e       	sbci	r26, 0xEE	; 238
    2d44:	bf 45       	sbci	r27, 0x5F	; 95
    2d46:	08 f4       	brcc	.+2      	; 0x2d4a <_Z23clockConfigurationCheckv+0x38>
    2d48:	5b c0       	rjmp	.+182    	; 0x2e00 <_Z23clockConfigurationCheckv+0xee>
    2d4a:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    2d4e:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2d52:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    2d56:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    2d5a:	81 15       	cp	r24, r1
    2d5c:	96 46       	sbci	r25, 0x66	; 102
    2d5e:	ae 4e       	sbci	r26, 0xEE	; 238
    2d60:	bf 45       	sbci	r27, 0x5F	; 95
    2d62:	08 f4       	brcc	.+2      	; 0x2d66 <_Z23clockConfigurationCheckv+0x54>
    2d64:	4f c0       	rjmp	.+158    	; 0x2e04 <_Z23clockConfigurationCheckv+0xf2>
    2d66:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch>
    2d6a:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    2d6e:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    2d72:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    2d76:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    2d7a:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    2d7e:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    2d82:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    2d86:	84 17       	cp	r24, r20
    2d88:	95 07       	cpc	r25, r21
    2d8a:	a6 07       	cpc	r26, r22
    2d8c:	b7 07       	cpc	r27, r23
    2d8e:	e0 f5       	brcc	.+120    	; 0x2e08 <_Z23clockConfigurationCheckv+0xf6>
    2d90:	40 91 5b 05 	lds	r20, 0x055B	; 0x80055b <g_current_epoch>
    2d94:	50 91 5c 05 	lds	r21, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2d98:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_current_epoch+0x2>
    2d9c:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_current_epoch+0x3>
    2da0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    2da4:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    2da8:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    2dac:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    2db0:	84 17       	cp	r24, r20
    2db2:	95 07       	cpc	r25, r21
    2db4:	a6 07       	cpc	r26, r22
    2db6:	b7 07       	cpc	r27, r23
    2db8:	48 f1       	brcs	.+82     	; 0x2e0c <_Z23clockConfigurationCheckv+0xfa>
    2dba:	40 91 5b 05 	lds	r20, 0x055B	; 0x80055b <g_current_epoch>
    2dbe:	50 91 5c 05 	lds	r21, 0x055C	; 0x80055c <g_current_epoch+0x1>
    2dc2:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_current_epoch+0x2>
    2dc6:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_current_epoch+0x3>
    2dca:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    2dce:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    2dd2:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    2dd6:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    2dda:	84 17       	cp	r24, r20
    2ddc:	95 07       	cpc	r25, r21
    2dde:	a6 07       	cpc	r26, r22
    2de0:	b7 07       	cpc	r27, r23
    2de2:	30 f4       	brcc	.+12     	; 0x2df0 <_Z23clockConfigurationCheckv+0xde>
    2de4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    2de8:	81 11       	cpse	r24, r1
    2dea:	12 c0       	rjmp	.+36     	; 0x2e10 <_Z23clockConfigurationCheckv+0xfe>
    2dec:	85 e0       	ldi	r24, 0x05	; 5
    2dee:	08 95       	ret
    2df0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_use_rtc_for_startstop>
    2df4:	88 23       	and	r24, r24
    2df6:	71 f0       	breq	.+28     	; 0x2e14 <_Z23clockConfigurationCheckv+0x102>
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	08 95       	ret
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	08 95       	ret
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	08 95       	ret
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	08 95       	ret
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	08 95       	ret
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	08 95       	ret
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	08 95       	ret
    2e14:	84 e0       	ldi	r24, 0x04	; 4
    2e16:	08 95       	ret

00002e18 <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox, EventAction_t action)
{
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <_Z11setupForFoxP5Fox_t13EventAction_t+0xa>
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	16 2f       	mov	r17, r22
	if(fox)
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	31 f0       	breq	.+12     	; 0x2e38 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
	{
		if(*fox != INVALID_FOX)
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	80 81       	ld	r24, Z
    2e30:	82 31       	cpi	r24, 0x12	; 18
    2e32:	11 f0       	breq	.+4      	; 0x2e38 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
		{
			g_fox = *fox;
    2e34:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_fox>
		}
	}

	g_current_epoch = RTC_get_epoch();
    2e38:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    2e3c:	60 93 5b 05 	sts	0x055B, r22	; 0x80055b <g_current_epoch>
    2e40:	70 93 5c 05 	sts	0x055C, r23	; 0x80055c <g_current_epoch+0x1>
    2e44:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_current_epoch+0x2>
    2e48:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <g_current_epoch+0x3>
	g_use_ptt_periodic_reset = FALSE;
    2e4c:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <g_use_ptt_periodic_reset>

	cli();
    2e50:	f8 94       	cli

	switch(g_fox)
    2e52:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <g_fox>
    2e56:	8e 2f       	mov	r24, r30
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	31 97       	sbiw	r30, 0x01	; 1
    2e5e:	e3 31       	cpi	r30, 0x13	; 19
    2e60:	f1 05       	cpc	r31, r1
    2e62:	08 f0       	brcs	.+2      	; 0x2e66 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4e>
    2e64:	84 c0       	rjmp	.+264    	; 0x2f6e <_Z11setupForFoxP5Fox_t13EventAction_t+0x156>
    2e66:	ed 57       	subi	r30, 0x7D	; 125
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval_seconds = 60;
    2e6e:	8c e3       	ldi	r24, 0x3C	; 60
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <g_on_air_interval_seconds+0x1>
    2e76:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 300;
    2e7a:	8c e2       	ldi	r24, 0x2C	; 44
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_cycle_period_seconds+0x1>
    2e82:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2e86:	25 e0       	ldi	r18, 0x05	; 5
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	30 93 29 05 	sts	0x0529, r19	; 0x800529 <g_number_of_foxes+0x1>
    2e8e:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <g_number_of_foxes>
			g_fox_id_offset = 0;
    2e92:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <g_fox_id_offset+0x1>
    2e96:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    2e9a:	28 e0       	ldi	r18, 0x08	; 8
    2e9c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
			g_id_interval_seconds = 300;
    2ea0:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_id_interval_seconds+0x1>
    2ea4:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_id_interval_seconds>
		}
		break;
    2ea8:	90 c0       	rjmp	.+288    	; 0x2fca <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval_seconds = 12;
    2eaa:	8c e0       	ldi	r24, 0x0C	; 12
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <g_on_air_interval_seconds+0x1>
    2eb2:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    2eb6:	8c e3       	ldi	r24, 0x3C	; 60
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_cycle_period_seconds+0x1>
    2ebe:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2ec2:	85 e0       	ldi	r24, 0x05	; 5
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_number_of_foxes+0x1>
    2eca:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    2ece:	88 e0       	ldi	r24, 0x08	; 8
    2ed0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1 - 1;
    2ed4:	87 e0       	ldi	r24, 0x07	; 7
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <g_fox_id_offset+0x1>
    2edc:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <g_fox_id_offset>
			g_id_interval_seconds = 600;
    2ee0:	88 e5       	ldi	r24, 0x58	; 88
    2ee2:	92 e0       	ldi	r25, 0x02	; 2
    2ee4:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_id_interval_seconds+0x1>
    2ee8:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_id_interval_seconds>
		}
		break;
    2eec:	6e c0       	rjmp	.+220    	; 0x2fca <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval_seconds = 12;
    2eee:	8c e0       	ldi	r24, 0x0C	; 12
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <g_on_air_interval_seconds+0x1>
    2ef6:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    2efa:	2c e3       	ldi	r18, 0x3C	; 60
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <g_cycle_period_seconds+0x1>
    2f02:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2f06:	25 e0       	ldi	r18, 0x05	; 5
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	30 93 29 05 	sts	0x0529, r19	; 0x800529 <g_number_of_foxes+0x1>
    2f0e:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    2f12:	2f e0       	ldi	r18, 0x0F	; 15
    2f14:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    2f18:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <g_fox_id_offset+0x1>
    2f1c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <g_fox_id_offset>
			g_id_interval_seconds = 600;
    2f20:	88 e5       	ldi	r24, 0x58	; 88
    2f22:	92 e0       	ldi	r25, 0x02	; 2
    2f24:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_id_interval_seconds+0x1>
    2f28:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_id_interval_seconds>
		}
		break;
    2f2c:	4e c0       	rjmp	.+156    	; 0x2fca <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>

		case REPORT_BATTERY:
		{
			g_on_air_interval_seconds = 30;
    2f2e:	8e e1       	ldi	r24, 0x1E	; 30
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <g_on_air_interval_seconds+0x1>
    2f36:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    2f3a:	8c e3       	ldi	r24, 0x3C	; 60
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_cycle_period_seconds+0x1>
    2f42:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_cycle_period_seconds>
			g_number_of_foxes = 2;
    2f46:	22 e0       	ldi	r18, 0x02	; 2
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	30 93 29 05 	sts	0x0529, r19	; 0x800529 <g_number_of_foxes+0x1>
    2f4e:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    2f52:	28 e0       	ldi	r18, 0x08	; 8
    2f54:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
			g_fox_id_offset = REPORT_BATTERY - 1;
    2f58:	22 e1       	ldi	r18, 0x12	; 18
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <g_fox_id_offset+0x1>
    2f60:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <g_fox_id_offset>
			g_id_interval_seconds = 60;
    2f64:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_id_interval_seconds+0x1>
    2f68:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_id_interval_seconds>
		}
		break;
    2f6c:	2e c0       	rjmp	.+92     	; 0x2fca <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>

		/* case BEACON:
		 * case SPECTATOR: */
		default:
		{
			g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    2f6e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_ptt_periodic_reset_enabled>
    2f72:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_use_ptt_periodic_reset>
			g_number_of_foxes = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_number_of_foxes+0x1>
    2f7e:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    2f82:	88 e0       	ldi	r24, 0x08	; 8
    2f84:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_pattern_codespeed>
			g_id_interval_seconds = g_ptt_periodic_reset_enabled ? 60 : 600;
    2f88:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_ptt_periodic_reset_enabled>
    2f8c:	81 11       	cpse	r24, r1
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <_Z11setupForFoxP5Fox_t13EventAction_t+0x17e>
    2f90:	88 e5       	ldi	r24, 0x58	; 88
    2f92:	92 e0       	ldi	r25, 0x02	; 2
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <_Z11setupForFoxP5Fox_t13EventAction_t+0x182>
    2f96:	8c e3       	ldi	r24, 0x3C	; 60
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_id_interval_seconds+0x1>
    2f9e:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_id_interval_seconds>
			g_on_air_interval_seconds = g_id_interval_seconds;
    2fa2:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <g_id_interval_seconds>
    2fa6:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <g_id_interval_seconds+0x1>
    2faa:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <g_on_air_interval_seconds+0x1>
    2fae:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_on_air_interval_seconds>
			g_fox_id_offset = 0;
    2fb2:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <g_fox_id_offset+0x1>
    2fb6:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <g_fox_id_offset>
			g_cycle_period_seconds = g_id_interval_seconds;
    2fba:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <g_id_interval_seconds>
    2fbe:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <g_id_interval_seconds+0x1>
    2fc2:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_cycle_period_seconds+0x1>
    2fc6:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_cycle_period_seconds>
		}
		break;
	}

	if(action == START_NOTHING)
    2fca:	11 11       	cpse	r17, r1
    2fcc:	06 c0       	rjmp	.+12     	; 0x2fda <_Z11setupForFoxP5Fox_t13EventAction_t+0x1c2>
	{
		g_use_rtc_for_startstop = FALSE;
    2fce:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
    2fd8:	e0 c0       	rjmp	.+448    	; 0x319a <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else if(action == START_EVENT_NOW)
    2fda:	11 30       	cpi	r17, 0x01	; 1
    2fdc:	99 f4       	brne	.+38     	; 0x3004 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ec>
	{
		g_fox_counter = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    2fe6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
		g_seconds_since_sync = 0;                                               /* Total elapsed time since synchronization */
    2fea:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_seconds_since_sync>
    2fee:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_seconds_since_sync+0x1>
    2ff2:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <g_seconds_since_sync+0x2>
    2ff6:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    2ffa:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    2ffe:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_transmissions_disabled>
    3002:	cb c0       	rjmp	.+406    	; 0x319a <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    3004:	12 30       	cpi	r17, 0x02	; 2
    3006:	b9 f5       	brne	.+110    	; 0x3076 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
	{
		g_fox_counter = MAX(1, g_fox - g_fox_id_offset);
    3008:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    300c:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <g_fox_id_offset>
    3010:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <g_fox_id_offset+0x1>
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	82 1b       	sub	r24, r18
    3018:	93 0b       	sbc	r25, r19
    301a:	18 16       	cp	r1, r24
    301c:	19 06       	cpc	r1, r25
    301e:	14 f0       	brlt	.+4      	; 0x3024 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20c>
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    3028:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
    302c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_fox_counter>
    3030:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_fox_counter+0x1>
    3034:	40 91 2c 05 	lds	r20, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    3038:	50 91 2d 05 	lds	r21, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    303c:	21 50       	subi	r18, 0x01	; 1
    303e:	31 09       	sbc	r19, r1
    3040:	24 9f       	mul	r18, r20
    3042:	c0 01       	movw	r24, r0
    3044:	25 9f       	mul	r18, r21
    3046:	90 0d       	add	r25, r0
    3048:	34 9f       	mul	r19, r20
    304a:	90 0d       	add	r25, r0
    304c:	11 24       	eor	r1, r1
    304e:	09 2e       	mov	r0, r25
    3050:	00 0c       	add	r0, r0
    3052:	aa 0b       	sbc	r26, r26
    3054:	bb 0b       	sbc	r27, r27
    3056:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <g_seconds_since_sync>
    305a:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <g_seconds_since_sync+0x1>
    305e:	a0 93 6c 05 	sts	0x056C, r26	; 0x80056c <g_seconds_since_sync+0x2>
    3062:	b0 93 6d 05 	sts	0x056D, r27	; 0x80056d <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    3066:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    306a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_transmissions_disabled>
		g_initialize_fox_transmissions = INIT_EVENT_STARTING_NOW;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <g_initialize_fox_transmissions>
    3074:	92 c0       	rjmp	.+292    	; 0x319a <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    3076:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
    307a:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    307e:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    3082:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    3086:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    308a:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    308e:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3092:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3096:	48 17       	cp	r20, r24
    3098:	59 07       	cpc	r21, r25
    309a:	6a 07       	cpc	r22, r26
    309c:	7b 07       	cpc	r23, r27
    309e:	08 f0       	brcs	.+2      	; 0x30a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x28a>
    30a0:	69 c0       	rjmp	.+210    	; 0x3174 <_Z11setupForFoxP5Fox_t13EventAction_t+0x35c>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    30a2:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    30a6:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    30aa:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    30ae:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    30b2:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
    30b6:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    30ba:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    30be:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    30c2:	84 1b       	sub	r24, r20
    30c4:	95 0b       	sbc	r25, r21
    30c6:	a6 0b       	sbc	r26, r22
    30c8:	b7 0b       	sbc	r27, r23
    30ca:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <g_seconds_since_sync>
    30ce:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <g_seconds_since_sync+0x1>
    30d2:	a0 93 6c 05 	sts	0x056C, r26	; 0x80056c <g_seconds_since_sync+0x2>
    30d6:	b0 93 6d 05 	sts	0x056D, r27	; 0x80056d <g_seconds_since_sync+0x3>
			g_fox_counter = CLAMP(1, 1 + ((g_seconds_since_sync % g_cycle_period_seconds) / g_on_air_interval_seconds), g_number_of_foxes);
    30da:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync>
    30de:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x1>
    30e2:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <g_seconds_since_sync+0x2>
    30e6:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_seconds_since_sync+0x3>
    30ea:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <g_cycle_period_seconds>
    30ee:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <g_cycle_period_seconds+0x1>
    30f2:	00 91 2c 05 	lds	r16, 0x052C	; 0x80052c <g_on_air_interval_seconds>
    30f6:	10 91 2d 05 	lds	r17, 0x052D	; 0x80052d <g_on_air_interval_seconds+0x1>
    30fa:	03 2e       	mov	r0, r19
    30fc:	00 0c       	add	r0, r0
    30fe:	44 0b       	sbc	r20, r20
    3100:	55 0b       	sbc	r21, r21
    3102:	0e 94 bd 31 	call	0x637a	; 0x637a <__divmodsi4>
    3106:	98 01       	movw	r18, r16
    3108:	11 0f       	add	r17, r17
    310a:	44 0b       	sbc	r20, r20
    310c:	55 0b       	sbc	r21, r21
    310e:	0e 94 bd 31 	call	0x637a	; 0x637a <__divmodsi4>
    3112:	ba 01       	movw	r22, r20
    3114:	a9 01       	movw	r20, r18
    3116:	4f 5f       	subi	r20, 0xFF	; 255
    3118:	5f 4f       	sbci	r21, 0xFF	; 255
    311a:	6f 4f       	sbci	r22, 0xFF	; 255
    311c:	7f 4f       	sbci	r23, 0xFF	; 255
    311e:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_number_of_foxes>
    3122:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_number_of_foxes+0x1>
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
    312e:	09 2e       	mov	r0, r25
    3130:	00 0c       	add	r0, r0
    3132:	aa 0b       	sbc	r26, r26
    3134:	bb 0b       	sbc	r27, r27
    3136:	84 17       	cp	r24, r20
    3138:	95 07       	cpc	r25, r21
    313a:	a6 07       	cpc	r26, r22
    313c:	b7 07       	cpc	r27, r23
    313e:	3c f4       	brge	.+14     	; 0x314e <_Z11setupForFoxP5Fox_t13EventAction_t+0x336>
    3140:	29 81       	ldd	r18, Y+1	; 0x01
    3142:	3a 81       	ldd	r19, Y+2	; 0x02
    3144:	c9 01       	movw	r24, r18
    3146:	33 0f       	add	r19, r19
    3148:	aa 0b       	sbc	r26, r26
    314a:	bb 0b       	sbc	r27, r27
    314c:	0b c0       	rjmp	.+22     	; 0x3164 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    314e:	db 01       	movw	r26, r22
    3150:	ca 01       	movw	r24, r20
    3152:	14 16       	cp	r1, r20
    3154:	15 06       	cpc	r1, r21
    3156:	16 06       	cpc	r1, r22
    3158:	17 06       	cpc	r1, r23
    315a:	24 f0       	brlt	.+8      	; 0x3164 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e0       	ldi	r26, 0x00	; 0
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    3168:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
			g_initialize_fox_transmissions = INIT_EVENT_IN_PROGRESS_WITH_STARTFINISH_TIMES;
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <g_initialize_fox_transmissions>
    3172:	0e c0       	rjmp	.+28     	; 0x3190 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    3174:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_seconds_since_sync>
    3178:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_seconds_since_sync+0x1>
    317c:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <g_seconds_since_sync+0x2>
    3180:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    318c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
		}

		g_use_rtc_for_startstop = TRUE;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    3196:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
}


void sendMorseTone(BOOL onOff)
{
	OCR0A = DEFAULT_TONE_FREQUENCY;
    319a:	8f e2       	ldi	r24, 0x2F	; 47
    319c:	87 bd       	out	0x27, r24	; 39
	g_audio_tone_state = onOff;
    319e:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_audio_tone_state>
		g_use_rtc_for_startstop = TRUE;
		g_transmissions_disabled = TRUE;
	}

	sendMorseTone(OFF);
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    31a2:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <g_code_throttle+0x1>
    31a6:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_code_throttle>
	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    31aa:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    31ae:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>
	digitalWrite(PIN_LED, OFF);             /*  LED Off - in case it was left on */
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	80 e1       	ldi	r24, 0x10	; 16
    31b6:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	86 e0       	ldi	r24, 0x06	; 6
    31be:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
	g_sendAMmodulation = FALSE;
    31c2:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    31c6:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    31ca:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>

	sei();
    31ce:	78 94       	sei
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	08 95       	ret

000031de <_Z7readADCv>:
 *  Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;
    31de:	8f ef       	ldi	r24, 0xFF	; 255
    31e0:	9f ef       	ldi	r25, 0xFF	; 255

	while((ADCSRA & (1 << ADSC)) && c)
    31e2:	ea e7       	ldi	r30, 0x7A	; 122
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	20 81       	ld	r18, Z
    31e8:	26 ff       	sbrs	r18, 6
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <_Z7readADCv+0x16>
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	11 f0       	breq	.+4      	; 0x31f4 <_Z7readADCv+0x16>
	{
		c--;    /* Just wait for ADC to finish. */
    31f0:	01 97       	sbiw	r24, 0x01	; 1
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;

	while((ADCSRA & (1 << ADSC)) && c)
    31f2:	f9 cf       	rjmp	.-14     	; 0x31e6 <_Z7readADCv+0x8>
	{
		c--;    /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    31f4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    31f8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    31fc:	ea e7       	ldi	r30, 0x7A	; 122
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	90 81       	ld	r25, Z
    3202:	90 64       	ori	r25, 0x40	; 64
    3204:	90 83       	st	Z, r25
	return( result);
}
    3206:	c9 01       	movw	r24, r18
    3208:	08 95       	ret

0000320a <_Z7getTempv>:

/*
 *  Returns the most recent temperature reading
 */
float getTemp(void)
{
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    3212:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <g_atmega_temp_calibration>
    3216:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <g_atmega_temp_calibration+0x1>
    321a:	07 2e       	mov	r0, r23
    321c:	00 0c       	add	r0, r0
    321e:	88 0b       	sbc	r24, r24
    3220:	99 0b       	sbc	r25, r25
    3222:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <__floatsisf>
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e2       	ldi	r20, 0x20	; 32
    322c:	51 e4       	ldi	r21, 0x41	; 65
    322e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__divsf3>
    3232:	06 2f       	mov	r16, r22
    3234:	17 2f       	mov	r17, r23
    3236:	d8 2f       	mov	r29, r24
    3238:	c9 2f       	mov	r28, r25
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	48 e4       	ldi	r20, 0x48	; 72
    3240:	53 e4       	ldi	r21, 0x43	; 67
    3242:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__gesf2>
    3246:	18 16       	cp	r1, r24
    3248:	6c f0       	brlt	.+26     	; 0x3264 <_Z7getTempv+0x5a>
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	48 e4       	ldi	r20, 0x48	; 72
    3250:	53 ec       	ldi	r21, 0xC3	; 195
    3252:	60 2f       	mov	r22, r16
    3254:	71 2f       	mov	r23, r17
    3256:	8d 2f       	mov	r24, r29
    3258:	9c 2f       	mov	r25, r28
    325a:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__cmpsf2>
    325e:	88 23       	and	r24, r24
    3260:	34 f0       	brlt	.+12     	; 0x326e <_Z7getTempv+0x64>
    3262:	09 c0       	rjmp	.+18     	; 0x3276 <_Z7getTempv+0x6c>
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	10 e0       	ldi	r17, 0x00	; 0
    3268:	d8 e4       	ldi	r29, 0x48	; 72
    326a:	c3 e4       	ldi	r28, 0x43	; 67
    326c:	04 c0       	rjmp	.+8      	; 0x3276 <_Z7getTempv+0x6c>
    326e:	00 e0       	ldi	r16, 0x00	; 0
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	d8 e4       	ldi	r29, 0x48	; 72
    3274:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    3276:	0e 94 ef 18 	call	0x31de	; 0x31de <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    327a:	0e 94 ef 18 	call	0x31de	; 0x31de <_Z7readADCv>
    327e:	bc 01       	movw	r22, r24
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__floatunsisf>
    3288:	2e ea       	ldi	r18, 0xAE	; 174
    328a:	37 e2       	ldi	r19, 0x27	; 39
    328c:	42 ea       	ldi	r20, 0xA2	; 162
    328e:	53 e4       	ldi	r21, 0x43	; 67
    3290:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__subsf3>
    3294:	26 ef       	ldi	r18, 0xF6	; 246
    3296:	38 e2       	ldi	r19, 0x28	; 40
    3298:	4c e9       	ldi	r20, 0x9C	; 156
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__divsf3>
    32a0:	20 2f       	mov	r18, r16
    32a2:	31 2f       	mov	r19, r17
    32a4:	4d 2f       	mov	r20, r29
    32a6:	5c 2f       	mov	r21, r28
    32a8:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__addsf3>
    32ac:	0e 94 db 30 	call	0x61b6	; 0x61b6 <round>
}
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	08 95       	ret

000032ba <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    32ba:	0e 94 ef 18 	call	0x31de	; 0x31de <_Z7readADCv>
	uint16_t hold = readADC();
    32be:	0e 94 ef 18 	call	0x31de	; 0x31de <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    32c2:	9c 01       	movw	r18, r24
    32c4:	ad ee       	ldi	r26, 0xED	; 237
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	68 94       	set
    32d2:	16 f8       	bld	r1, 6
    32d4:	b6 95       	lsr	r27
    32d6:	a7 95       	ror	r26
    32d8:	97 95       	ror	r25
    32da:	87 95       	ror	r24
    32dc:	16 94       	lsr	r1
    32de:	d1 f7       	brne	.-12     	; 0x32d4 <_Z10getVoltagev+0x1a>
	return(hold);
}
    32e0:	08 95       	ret

000032e2 <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    32e2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    32e6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    32ea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    32ee:	81 11       	cpse	r24, r1
    32f0:	22 c0       	rjmp	.+68     	; 0x3336 <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    32f2:	ec e7       	ldi	r30, 0x7C	; 124
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	86 60       	ori	r24, 0x06	; 6
    32fa:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    32fc:	80 81       	ld	r24, Z
    32fe:	80 6c       	ori	r24, 0xC0	; 192
    3300:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    3302:	80 81       	ld	r24, Z
    3304:	80 62       	ori	r24, 0x20	; 32
    3306:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
				ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
				ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
				ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    3308:	ea e7       	ldi	r30, 0x7A	; 122
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	86 60       	ori	r24, 0x06	; 6
    3310:	80 83       	st	Z, r24
#else
#error "Select a valid sample rate."
#endif
#endif /* F_CPU == 16000000 */

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    3312:	80 81       	ld	r24, Z
    3314:	80 62       	ori	r24, 0x20	; 32
    3316:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    3318:	80 81       	ld	r24, Z
    331a:	88 60       	ori	r24, 0x08	; 8
    331c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    331e:	80 81       	ld	r24, Z
    3320:	80 68       	ori	r24, 0x80	; 128
    3322:	80 83       	st	Z, r24

		if(enableSampling)
    3324:	66 23       	and	r22, r22
    3326:	21 f1       	breq	.+72     	; 0x3370 <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    3328:	80 81       	ld	r24, Z
    332a:	88 60       	ori	r24, 0x08	; 8
    332c:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    332e:	80 81       	ld	r24, Z
    3330:	80 64       	ori	r24, 0x40	; 64
    3332:	80 83       	st	Z, r24
    3334:	08 95       	ret
		/* The internal temperature has to be used
		 *  with the internal reference of 1.1V.
		 *  Channel 8 can not be selected with
		 *  the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    3336:	ec e7       	ldi	r30, 0x7C	; 124
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	90 81       	ld	r25, Z
    333c:	90 6c       	ori	r25, 0xC0	; 192
    333e:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    3340:	81 30       	cpi	r24, 0x01	; 1
    3342:	21 f4       	brne	.+8      	; 0x334c <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    3344:	80 81       	ld	r24, Z
    3346:	88 60       	ori	r24, 0x08	; 8
    3348:	80 83       	st	Z, r24
    334a:	05 c0       	rjmp	.+10     	; 0x3356 <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    334c:	ec e7       	ldi	r30, 0x7C	; 124
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	87 60       	ori	r24, 0x07	; 7
    3354:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 *  by dividing by 128. Assumes that the
		 *  standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    3356:	ea e7       	ldi	r30, 0x7A	; 122
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	87 60       	ori	r24, 0x07	; 7
    335e:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    3360:	80 81       	ld	r24, Z
    3362:	80 68       	ori	r24, 0x80	; 128
    3364:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    3366:	80 81       	ld	r24, Z
    3368:	80 64       	ori	r24, 0x40	; 64
    336a:	80 83       	st	Z, r24
		readADC();
    336c:	0e 94 ef 18 	call	0x31de	; 0x31de <_Z7readADCv>
    3370:	08 95       	ret

00003372 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    3372:	fc 01       	movw	r30, r24
	while(*s)
    3374:	21 91       	ld	r18, Z+
    3376:	22 23       	and	r18, r18
    3378:	41 f0       	breq	.+16     	; 0x338a <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	20 53       	subi	r18, 0x30	; 48
    337e:	31 09       	sbc	r19, r1
    3380:	2a 30       	cpi	r18, 0x0A	; 10
    3382:	31 05       	cpc	r19, r1
    3384:	b8 f3       	brcs	.-18     	; 0x3374 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	08 95       	ret
		}
	}

	return( TRUE);
    338a:	81 e0       	ldi	r24, 0x01	; 1
}
    338c:	08 95       	ret

0000338e <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    338e:	cf 93       	push	r28
    3390:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    3392:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_Z23clockConfigurationCheckv>

	cli();
    3396:	f8 94       	cli
	if(activationSource == POWER_UP)
    3398:	c1 11       	cpse	r28, r1
    339a:	0e c0       	rjmp	.+28     	; 0x33b8 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    339c:	82 30       	cpi	r24, 0x02	; 2
    339e:	31 f4       	brne	.+12     	; 0x33ac <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    33aa:	3e c0       	rjmp	.+124    	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    33ac:	63 e0       	ldi	r22, 0x03	; 3
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    33b6:	38 c0       	rjmp	.+112    	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    33b8:	c2 30       	cpi	r28, 0x02	; 2
    33ba:	c9 f4       	brne	.+50     	; 0x33ee <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    33bc:	82 30       	cpi	r24, 0x02	; 2
    33be:	31 f4       	brne	.+12     	; 0x33cc <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    33ca:	2e c0       	rjmp	.+92     	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    33cc:	81 30       	cpi	r24, 0x01	; 1
    33ce:	19 f0       	breq	.+6      	; 0x33d6 <_Z13startEventNow19EventActionSource_t+0x48>
    33d0:	83 50       	subi	r24, 0x03	; 3
    33d2:	82 30       	cpi	r24, 0x02	; 2
    33d4:	30 f4       	brcc	.+12     	; 0x33e2 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    33e0:	23 c0       	rjmp	.+70     	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    33e2:	63 e0       	ldi	r22, 0x03	; 3
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    33ec:	1d c0       	rjmp	.+58     	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    33ee:	82 30       	cpi	r24, 0x02	; 2
    33f0:	31 f4       	brne	.+12     	; 0x33fe <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    33f2:	61 e0       	ldi	r22, 0x01	; 1
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    33fc:	15 c0       	rjmp	.+42     	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	31 f4       	brne	.+12     	; 0x340e <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    3402:	62 e0       	ldi	r22, 0x02	; 2
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    340c:	0d c0       	rjmp	.+26     	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    340e:	84 30       	cpi	r24, 0x04	; 4
    3410:	31 f4       	brne	.+12     	; 0x341e <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    3412:	63 e0       	ldi	r22, 0x03	; 3
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    341c:	05 c0       	rjmp	.+10     	; 0x3428 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    341e:	63 e0       	ldi	r22, 0x03	; 3
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    3428:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_LED_enunciating>
	sei();
    342c:	78 94       	sei
}
    342e:	cf 91       	pop	r28
    3430:	08 95       	ret

00003432 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    3432:	cf 93       	push	r28
    3434:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    3436:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_Z23clockConfigurationCheckv>

	cli();
    343a:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    343c:	c2 30       	cpi	r28, 0x02	; 2
    343e:	31 f4       	brne	.+12     	; 0x344c <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    344a:	15 c0       	rjmp	.+42     	; 0x3476 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	31 f4       	brne	.+12     	; 0x345c <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3450:	62 e0       	ldi	r22, 0x02	; 2
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    345a:	08 c0       	rjmp	.+16     	; 0x346c <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    345c:	84 30       	cpi	r24, 0x04	; 4
    345e:	31 f4       	brne	.+12     	; 0x346c <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    346a:	05 c0       	rjmp	.+10     	; 0x3476 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    3476:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_sync_pin_stable>
    347a:	82 30       	cpi	r24, 0x02	; 2
    347c:	21 f4       	brne	.+8      	; 0x3486 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED, OFF); /*  LED Off */
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	80 e1       	ldi	r24, 0x10	; 16
    3482:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
	}
}
    3486:	cf 91       	pop	r28
    3488:	08 95       	ret

0000348a <__vector_4>:
 *
 *  Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT1_vect)
{
    348a:	1f 92       	push	r1
    348c:	0f 92       	push	r0
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	0f 92       	push	r0
    3492:	11 24       	eor	r1, r1
    3494:	2f 93       	push	r18
    3496:	3f 93       	push	r19
    3498:	4f 93       	push	r20
    349a:	5f 93       	push	r21
    349c:	6f 93       	push	r22
    349e:	7f 93       	push	r23
    34a0:	8f 93       	push	r24
    34a2:	9f 93       	push	r25
    34a4:	af 93       	push	r26
    34a6:	bf 93       	push	r27
    34a8:	cf 93       	push	r28
    34aa:	ef 93       	push	r30
    34ac:	ff 93       	push	r31
	static BOOL holdPinVal = OFF;
	BOOL pinVal = digitalRead(PIN_SYNC);
    34ae:	81 e1       	ldi	r24, 0x11	; 17
    34b0:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    34b4:	c8 2f       	mov	r28, r24

	g_sync_pin_timer = 0;
    34b6:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <g_sync_pin_timer+0x1>
    34ba:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <g_sync_pin_timer>

	if(pinVal && !holdPinVal)   /* Sync is high = button released, and was low previously */
    34be:	88 23       	and	r24, r24
    34c0:	91 f1       	breq	.+100    	; 0x3526 <__vector_4+0x9c>
    34c2:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <_ZZ10__vector_4E10holdPinVal>
    34c6:	81 11       	cpse	r24, r1
    34c8:	2e c0       	rjmp	.+92     	; 0x3526 <__vector_4+0x9c>
	{
		if(g_LED_timeout_countdown)
    34ca:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    34ce:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    34d2:	89 2b       	or	r24, r25
    34d4:	01 f1       	breq	.+64     	; 0x3516 <__vector_4+0x8c>
		{
			if(!g_perform_EEPROM_reset)
    34d6:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_perform_EEPROM_reset>
    34da:	81 11       	cpse	r24, r1
    34dc:	1e c0       	rjmp	.+60     	; 0x351a <__vector_4+0x90>
			{
				if(g_transmissions_disabled)
    34de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    34e2:	88 23       	and	r24, r24
    34e4:	71 f0       	breq	.+28     	; 0x3502 <__vector_4+0x78>
				{
					if(g_sync_pin_stable == STABLE_LOW)
    34e6:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_sync_pin_stable>
    34ea:	82 30       	cpi	r24, 0x02	; 2
    34ec:	b1 f4       	brne	.+44     	; 0x351a <__vector_4+0x90>
					{
						g_sync_pin_stable = UNSTABLE;
    34ee:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <g_sync_pin_stable>
						digitalWrite(PIN_LED, OFF); /*  LED */
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	80 e1       	ldi	r24, 0x10	; 16
    34f6:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
						startEventNow(PUSHBUTTON);
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z13startEventNow19EventActionSource_t>
    3500:	0c c0       	rjmp	.+24     	; 0x351a <__vector_4+0x90>
					}
				}
				else
				{
					if(g_sync_pin_stable == STABLE_LOW)
    3502:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_sync_pin_stable>
    3506:	82 30       	cpi	r24, 0x02	; 2
    3508:	41 f4       	brne	.+16     	; 0x351a <__vector_4+0x90>
					{
						g_sync_pin_stable = UNSTABLE;
    350a:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <g_sync_pin_stable>
						stopEventNow(PUSHBUTTON);
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	0e 94 19 1a 	call	0x3432	; 0x3432 <_Z12stopEventNow19EventActionSource_t>
    3514:	02 c0       	rjmp	.+4      	; 0x351a <__vector_4+0x90>
				}
			}
		}
		else
		{
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    3516:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>
		}

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    351a:	8c e2       	ldi	r24, 0x2C	; 44
    351c:	91 e0       	ldi	r25, 0x01	; 1
    351e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    3522:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
	}

	holdPinVal = pinVal;
    3526:	c0 93 a7 04 	sts	0x04A7, r28	; 0x8004a7 <_ZZ10__vector_4E10holdPinVal>
}
    352a:	ff 91       	pop	r31
    352c:	ef 91       	pop	r30
    352e:	cf 91       	pop	r28
    3530:	bf 91       	pop	r27
    3532:	af 91       	pop	r26
    3534:	9f 91       	pop	r25
    3536:	8f 91       	pop	r24
    3538:	7f 91       	pop	r23
    353a:	6f 91       	pop	r22
    353c:	5f 91       	pop	r21
    353e:	4f 91       	pop	r20
    3540:	3f 91       	pop	r19
    3542:	2f 91       	pop	r18
    3544:	0f 90       	pop	r0
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	0f 90       	pop	r0
    354a:	1f 90       	pop	r1
    354c:	18 95       	reti

0000354e <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	g_current_epoch = RTC_get_epoch();
    354e:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    3552:	60 93 5b 05 	sts	0x055B, r22	; 0x80055b <g_current_epoch>
    3556:	70 93 5c 05 	sts	0x055C, r23	; 0x80055c <g_current_epoch+0x1>
    355a:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_current_epoch+0x2>
    355e:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    3562:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_messages_text+0x15>
    3566:	81 11       	cpse	r24, r1
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <_Z18reportConfigErrorsv+0x26>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    356a:	65 e0       	ldi	r22, 0x05	; 5
    356c:	8e e6       	ldi	r24, 0x6E	; 110
    356e:	95 e0       	ldi	r25, 0x05	; 5
    3570:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    3574:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    3578:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    357c:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3580:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3584:	81 15       	cp	r24, r1
    3586:	96 46       	sbci	r25, 0x66	; 102
    3588:	ae 4e       	sbci	r26, 0xEE	; 238
    358a:	bf 45       	sbci	r27, 0x5F	; 95
    358c:	28 f4       	brcc	.+10     	; 0x3598 <_Z18reportConfigErrorsv+0x4a>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    358e:	62 e0       	ldi	r22, 0x02	; 2
    3590:	8e e6       	ldi	r24, 0x6E	; 110
    3592:	95 e0       	ldi	r25, 0x05	; 5
    3594:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    3598:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch>
    359c:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    35a0:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    35a4:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    35a8:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    35ac:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    35b0:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    35b4:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    35b8:	48 17       	cp	r20, r24
    35ba:	59 07       	cpc	r21, r25
    35bc:	6a 07       	cpc	r22, r26
    35be:	7b 07       	cpc	r23, r27
    35c0:	00 f5       	brcc	.+64     	; 0x3602 <_Z18reportConfigErrorsv+0xb4>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    35c2:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
    35c6:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    35ca:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    35ce:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    35d2:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    35d6:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    35da:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    35de:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    35e2:	48 17       	cp	r20, r24
    35e4:	59 07       	cpc	r21, r25
    35e6:	6a 07       	cpc	r22, r26
    35e8:	7b 07       	cpc	r23, r27
    35ea:	28 f4       	brcc	.+10     	; 0x35f6 <_Z18reportConfigErrorsv+0xa8>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    35ec:	63 e0       	ldi	r22, 0x03	; 3
    35ee:	8e e6       	ldi	r24, 0x6E	; 110
    35f0:	95 e0       	ldi	r25, 0x05	; 5
    35f2:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    35f6:	64 e0       	ldi	r22, 0x04	; 4
    35f8:	8e e6       	ldi	r24, 0x6E	; 110
    35fa:	95 e0       	ldi	r25, 0x05	; 5
    35fc:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    3600:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    3602:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
    3606:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    360a:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    360e:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    3612:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    3616:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    361a:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    361e:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3622:	48 17       	cp	r20, r24
    3624:	59 07       	cpc	r21, r25
    3626:	6a 07       	cpc	r22, r26
    3628:	7b 07       	cpc	r23, r27
    362a:	c0 f4       	brcc	.+48     	; 0x365c <_Z18reportConfigErrorsv+0x10e>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    362c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    3630:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    3634:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    3638:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    363c:	81 15       	cp	r24, r1
    363e:	96 46       	sbci	r25, 0x66	; 102
    3640:	ae 4e       	sbci	r26, 0xEE	; 238
    3642:	bf 45       	sbci	r27, 0x5F	; 95
    3644:	30 f4       	brcc	.+12     	; 0x3652 <_Z18reportConfigErrorsv+0x104>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    3646:	63 e0       	ldi	r22, 0x03	; 3
    3648:	8e e6       	ldi	r24, 0x6E	; 110
    364a:	95 e0       	ldi	r25, 0x05	; 5
    364c:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    3650:	08 95       	ret
		}
		else
		{
			lb_send_string((char*)"Event running...\n", TRUE);
    3652:	61 e0       	ldi	r22, 0x01	; 1
    3654:	84 e3       	ldi	r24, 0x34	; 52
    3656:	91 e0       	ldi	r25, 0x01	; 1
    3658:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    365c:	08 95       	ret

0000365e <_Z14reportTimeTillmmPKcS0_>:
		}
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    365e:	2f 92       	push	r2
    3660:	3f 92       	push	r3
    3662:	4f 92       	push	r4
    3664:	5f 92       	push	r5
    3666:	6f 92       	push	r6
    3668:	7f 92       	push	r7
    366a:	8f 92       	push	r8
    366c:	9f 92       	push	r9
    366e:	af 92       	push	r10
    3670:	bf 92       	push	r11
    3672:	cf 92       	push	r12
    3674:	df 92       	push	r13
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	2c 97       	sbiw	r28, 0x0c	; 12
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	2b 01       	movw	r4, r22
    3694:	3c 01       	movw	r6, r24
    3696:	49 01       	movw	r8, r18
    3698:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    369a:	62 17       	cp	r22, r18
    369c:	73 07       	cpc	r23, r19
    369e:	84 07       	cpc	r24, r20
    36a0:	95 07       	cpc	r25, r21
    36a2:	50 f0       	brcs	.+20     	; 0x36b8 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    36a4:	e1 14       	cp	r14, r1
    36a6:	f1 04       	cpc	r15, r1
    36a8:	09 f4       	brne	.+2      	; 0x36ac <_Z14reportTimeTillmmPKcS0_+0x4e>
    36aa:	04 c1       	rjmp	.+520    	; 0x38b4 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	c7 01       	movw	r24, r14
    36b0:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	ff c0       	rjmp	.+510    	; 0x38b6 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    36b8:	01 15       	cp	r16, r1
    36ba:	11 05       	cpc	r17, r1
    36bc:	21 f0       	breq	.+8      	; 0x36c6 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    36be:	61 e0       	ldi	r22, 0x01	; 1
    36c0:	c8 01       	movw	r24, r16
    36c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
		}
		time_t dif = until - from;
    36c6:	75 01       	movw	r14, r10
    36c8:	64 01       	movw	r12, r8
    36ca:	c4 18       	sub	r12, r4
    36cc:	d5 08       	sbc	r13, r5
    36ce:	e6 08       	sbc	r14, r6
    36d0:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    36d2:	c7 01       	movw	r24, r14
    36d4:	b6 01       	movw	r22, r12
    36d6:	20 e8       	ldi	r18, 0x80	; 128
    36d8:	33 e3       	ldi	r19, 0x33	; 51
    36da:	41 ee       	ldi	r20, 0xE1	; 225
    36dc:	51 e0       	ldi	r21, 0x01	; 1
    36de:	0e 94 9b 31 	call	0x6336	; 0x6336 <__udivmodsi4>
    36e2:	29 01       	movw	r4, r18
    36e4:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    36e6:	44 27       	eor	r20, r20
    36e8:	55 27       	eor	r21, r21
    36ea:	60 e8       	ldi	r22, 0x80	; 128
    36ec:	73 e3       	ldi	r23, 0x33	; 51
    36ee:	81 ee       	ldi	r24, 0xE1	; 225
    36f0:	91 e0       	ldi	r25, 0x01	; 1
    36f2:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__mulsi3>
    36f6:	c6 1a       	sub	r12, r22
    36f8:	d7 0a       	sbc	r13, r23
    36fa:	e8 0a       	sbc	r14, r24
    36fc:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    36fe:	c7 01       	movw	r24, r14
    3700:	b6 01       	movw	r22, r12
    3702:	20 e8       	ldi	r18, 0x80	; 128
    3704:	31 e5       	ldi	r19, 0x51	; 81
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	0e 94 9b 31 	call	0x6336	; 0x6336 <__udivmodsi4>
    370e:	49 01       	movw	r8, r18
    3710:	5a 01       	movw	r10, r20
    3712:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    3714:	44 27       	eor	r20, r20
    3716:	55 27       	eor	r21, r21
    3718:	60 e8       	ldi	r22, 0x80	; 128
    371a:	71 e5       	ldi	r23, 0x51	; 81
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__mulsi3>
    3724:	c6 1a       	sub	r12, r22
    3726:	d7 0a       	sbc	r13, r23
    3728:	e8 0a       	sbc	r14, r24
    372a:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    372c:	c7 01       	movw	r24, r14
    372e:	b6 01       	movw	r22, r12
    3730:	20 e1       	ldi	r18, 0x10	; 16
    3732:	3e e0       	ldi	r19, 0x0E	; 14
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	50 e0       	ldi	r21, 0x00	; 0
    3738:	0e 94 9b 31 	call	0x6336	; 0x6336 <__udivmodsi4>
    373c:	29 83       	std	Y+1, r18	; 0x01
    373e:	3a 83       	std	Y+2, r19	; 0x02
    3740:	4b 83       	std	Y+3, r20	; 0x03
    3742:	5c 83       	std	Y+4, r21	; 0x04
    3744:	29 81       	ldd	r18, Y+1	; 0x01
    3746:	3a 81       	ldd	r19, Y+2	; 0x02
    3748:	3a 87       	std	Y+10, r19	; 0x0a
    374a:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    374c:	29 81       	ldd	r18, Y+1	; 0x01
    374e:	3a 81       	ldd	r19, Y+2	; 0x02
    3750:	4b 81       	ldd	r20, Y+3	; 0x03
    3752:	5c 81       	ldd	r21, Y+4	; 0x04
    3754:	44 27       	eor	r20, r20
    3756:	55 27       	eor	r21, r21
    3758:	a0 e1       	ldi	r26, 0x10	; 16
    375a:	be e0       	ldi	r27, 0x0E	; 14
    375c:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <__muluhisi3>
    3760:	c6 1a       	sub	r12, r22
    3762:	d7 0a       	sbc	r13, r23
    3764:	e8 0a       	sbc	r14, r24
    3766:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    3768:	c7 01       	movw	r24, r14
    376a:	b6 01       	movw	r22, r12
    376c:	2c e3       	ldi	r18, 0x3C	; 60
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	50 e0       	ldi	r21, 0x00	; 0
    3774:	0e 94 9b 31 	call	0x6336	; 0x6336 <__udivmodsi4>
    3778:	2d 83       	std	Y+5, r18	; 0x05
    377a:	3e 83       	std	Y+6, r19	; 0x06
    377c:	4f 83       	std	Y+7, r20	; 0x07
    377e:	58 87       	std	Y+8, r21	; 0x08
    3780:	0d 81       	ldd	r16, Y+5	; 0x05
    3782:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    3784:	2c e3       	ldi	r18, 0x3C	; 60
    3786:	20 9f       	mul	r18, r16
    3788:	c0 01       	movw	r24, r0
    378a:	21 9f       	mul	r18, r17
    378c:	90 0d       	add	r25, r0
    378e:	11 24       	eor	r1, r1
    3790:	a6 01       	movw	r20, r12
    3792:	48 1b       	sub	r20, r24
    3794:	59 0b       	sbc	r21, r25
    3796:	5c 87       	std	Y+12, r21	; 0x0c
    3798:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    379a:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <g_tempStr>

		if(years)
    379e:	41 14       	cp	r4, r1
    37a0:	51 04       	cpc	r5, r1
    37a2:	b9 f0       	breq	.+46     	; 0x37d2 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    37a4:	5f 92       	push	r5
    37a6:	4f 92       	push	r4
    37a8:	86 e4       	ldi	r24, 0x46	; 70
    37aa:	91 e0       	ldi	r25, 0x01	; 1
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	88 ea       	ldi	r24, 0xA8	; 168
    37b2:	94 e0       	ldi	r25, 0x04	; 4
    37b4:	9f 93       	push	r25
    37b6:	8f 93       	push	r24
    37b8:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
			lb_send_string(g_tempStr, TRUE);
    37bc:	61 e0       	ldi	r22, 0x01	; 1
    37be:	88 ea       	ldi	r24, 0xA8	; 168
    37c0:	94 e0       	ldi	r25, 0x04	; 4
    37c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
		}

		if(days)
    37d2:	23 28       	or	r2, r3
    37d4:	b9 f0       	breq	.+46     	; 0x3804 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    37d6:	9f 92       	push	r9
    37d8:	8f 92       	push	r8
    37da:	8e e4       	ldi	r24, 0x4E	; 78
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	9f 93       	push	r25
    37e0:	8f 93       	push	r24
    37e2:	88 ea       	ldi	r24, 0xA8	; 168
    37e4:	94 e0       	ldi	r25, 0x04	; 4
    37e6:	9f 93       	push	r25
    37e8:	8f 93       	push	r24
    37ea:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
			lb_send_string(g_tempStr, TRUE);
    37ee:	61 e0       	ldi	r22, 0x01	; 1
    37f0:	88 ea       	ldi	r24, 0xA8	; 168
    37f2:	94 e0       	ldi	r25, 0x04	; 4
    37f4:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
		}

		if(hours)
    3804:	89 85       	ldd	r24, Y+9	; 0x09
    3806:	9a 85       	ldd	r25, Y+10	; 0x0a
    3808:	89 2b       	or	r24, r25
    380a:	c9 f0       	breq	.+50     	; 0x383e <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	9f 93       	push	r25
    3810:	e9 81       	ldd	r30, Y+1	; 0x01
    3812:	ef 93       	push	r30
    3814:	87 e5       	ldi	r24, 0x57	; 87
    3816:	91 e0       	ldi	r25, 0x01	; 1
    3818:	9f 93       	push	r25
    381a:	8f 93       	push	r24
    381c:	88 ea       	ldi	r24, 0xA8	; 168
    381e:	94 e0       	ldi	r25, 0x04	; 4
    3820:	9f 93       	push	r25
    3822:	8f 93       	push	r24
    3824:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3828:	61 e0       	ldi	r22, 0x01	; 1
    382a:	88 ea       	ldi	r24, 0xA8	; 168
    382c:	94 e0       	ldi	r25, 0x04	; 4
    382e:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
		}

		if(minutes)
    383e:	01 2b       	or	r16, r17
    3840:	c9 f0       	breq	.+50     	; 0x3874 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    3842:	fe 81       	ldd	r31, Y+6	; 0x06
    3844:	ff 93       	push	r31
    3846:	2d 81       	ldd	r18, Y+5	; 0x05
    3848:	2f 93       	push	r18
    384a:	8f e5       	ldi	r24, 0x5F	; 95
    384c:	91 e0       	ldi	r25, 0x01	; 1
    384e:	9f 93       	push	r25
    3850:	8f 93       	push	r24
    3852:	88 ea       	ldi	r24, 0xA8	; 168
    3854:	94 e0       	ldi	r25, 0x04	; 4
    3856:	9f 93       	push	r25
    3858:	8f 93       	push	r24
    385a:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
			lb_send_string(g_tempStr, TRUE);
    385e:	61 e0       	ldi	r22, 0x01	; 1
    3860:	88 ea       	ldi	r24, 0xA8	; 168
    3862:	94 e0       	ldi	r25, 0x04	; 4
    3864:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    3874:	3c 85       	ldd	r19, Y+12	; 0x0c
    3876:	3f 93       	push	r19
    3878:	4b 85       	ldd	r20, Y+11	; 0x0b
    387a:	4f 93       	push	r20
    387c:	87 e6       	ldi	r24, 0x67	; 103
    387e:	91 e0       	ldi	r25, 0x01	; 1
    3880:	9f 93       	push	r25
    3882:	8f 93       	push	r24
    3884:	88 ea       	ldi	r24, 0xA8	; 168
    3886:	94 e0       	ldi	r25, 0x04	; 4
    3888:	9f 93       	push	r25
    388a:	8f 93       	push	r24
    388c:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
		lb_send_string(g_tempStr, TRUE);
    3890:	61 e0       	ldi	r22, 0x01	; 1
    3892:	88 ea       	ldi	r24, 0xA8	; 168
    3894:	94 e0       	ldi	r25, 0x04	; 4
    3896:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>

		lb_send_NewLine();
    389a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
		g_tempStr[0] = '\0';
    389e:	e8 ea       	ldi	r30, 0xA8	; 168
    38a0:	f4 e0       	ldi	r31, 0x04	; 4
    38a2:	10 82       	st	Z, r1
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	01 c0       	rjmp	.+2      	; 0x38b6 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    38b4:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    38b6:	2c 96       	adiw	r28, 0x0c	; 12
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	ff 90       	pop	r15
    38cc:	ef 90       	pop	r14
    38ce:	df 90       	pop	r13
    38d0:	cf 90       	pop	r12
    38d2:	bf 90       	pop	r11
    38d4:	af 90       	pop	r10
    38d6:	9f 90       	pop	r9
    38d8:	8f 90       	pop	r8
    38da:	7f 90       	pop	r7
    38dc:	6f 90       	pop	r6
    38de:	5f 90       	pop	r5
    38e0:	4f 90       	pop	r4
    38e2:	3f 90       	pop	r3
    38e4:	2f 90       	pop	r2
    38e6:	08 95       	ret

000038e8 <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED, OFF); /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    38e8:	ef 92       	push	r14
    38ea:	ff 92       	push	r15
    38ec:	0f 93       	push	r16
    38ee:	1f 93       	push	r17
	g_current_epoch = RTC_get_epoch();
    38f0:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    38f4:	60 93 5b 05 	sts	0x055B, r22	; 0x80055b <g_current_epoch>
    38f8:	70 93 5c 05 	sts	0x055C, r23	; 0x80055c <g_current_epoch+0x1>
    38fc:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_current_epoch+0x2>
    3900:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    3904:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    3908:	82 30       	cpi	r24, 0x02	; 2
    390a:	09 f4       	brne	.+2      	; 0x390e <_Z18startEventUsingRTCv+0x26>
    390c:	62 c0       	rjmp	.+196    	; 0x39d2 <_Z18startEventUsingRTCv+0xea>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    390e:	63 e0       	ldi	r22, 0x03	; 3
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    3918:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <g_event_start_epoch>
    391c:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    3920:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    3924:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    3928:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch>
    392c:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x1>
    3930:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3934:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3938:	0f 2e       	mov	r0, r31
    393a:	fe e6       	ldi	r31, 0x6E	; 110
    393c:	ef 2e       	mov	r14, r31
    393e:	f1 e0       	ldi	r31, 0x01	; 1
    3940:	ff 2e       	mov	r15, r31
    3942:	f0 2d       	mov	r31, r0
    3944:	0b e7       	ldi	r16, 0x7B	; 123
    3946:	11 e0       	ldi	r17, 0x01	; 1
    3948:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    394c:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
    3950:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    3954:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    3958:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    395c:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    3960:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    3964:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3968:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    396c:	48 17       	cp	r20, r24
    396e:	59 07       	cpc	r21, r25
    3970:	6a 07       	cpc	r22, r26
    3972:	7b 07       	cpc	r23, r27
    3974:	b8 f4       	brcc	.+46     	; 0x39a4 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3976:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_event_finish_epoch>
    397a:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    397e:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    3982:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    3986:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch>
    398a:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x1>
    398e:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3992:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3996:	e1 2c       	mov	r14, r1
    3998:	f1 2c       	mov	r15, r1
    399a:	07 e8       	ldi	r16, 0x87	; 135
    399c:	11 e0       	ldi	r17, 0x01	; 1
    399e:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>
    39a2:	19 c0       	rjmp	.+50     	; 0x39d6 <_Z18startEventUsingRTCv+0xee>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    39a4:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_event_finish_epoch>
    39a8:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    39ac:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    39b0:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    39b4:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch>
    39b8:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    39bc:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    39c0:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    39c4:	e1 2c       	mov	r14, r1
    39c6:	f1 2c       	mov	r15, r1
    39c8:	08 e9       	ldi	r16, 0x98	; 152
    39ca:	11 e0       	ldi	r17, 0x01	; 1
    39cc:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <_Z18startEventUsingRTCv+0xee>
		}
	}
	else
	{
		reportConfigErrors();
    39d2:	0e 94 a7 1a 	call	0x354e	; 0x354e <_Z18reportConfigErrorsv>
	}
}
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	08 95       	ret

000039e0 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    39e0:	4f 92       	push	r4
    39e2:	5f 92       	push	r5
    39e4:	6f 92       	push	r6
    39e6:	7f 92       	push	r7
    39e8:	8f 92       	push	r8
    39ea:	9f 92       	push	r9
    39ec:	af 92       	push	r10
    39ee:	bf 92       	push	r11
    39f0:	ef 92       	push	r14
    39f2:	ff 92       	push	r15
    39f4:	0f 93       	push	r16
    39f6:	1f 93       	push	r17
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	2c 97       	sbiw	r28, 0x0c	; 12
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	8c 01       	movw	r16, r24
    3a0e:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    3a10:	fc 01       	movw	r30, r24
    3a12:	01 90       	ld	r0, Z+
    3a14:	00 20       	and	r0, r0
    3a16:	e9 f7       	brne	.-6      	; 0x3a12 <_Z18validateTimeStringPcPma+0x32>
    3a18:	31 97       	sbiw	r30, 0x01	; 1
    3a1a:	e8 1b       	sub	r30, r24
    3a1c:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    3a1e:	25 e0       	ldi	r18, 0x05	; 5
    3a20:	67 35       	cpi	r22, 0x57	; 87
    3a22:	72 07       	cpc	r23, r18
    3a24:	49 f5       	brne	.+82     	; 0x3a78 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3a26:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    3a2a:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    3a2e:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3a32:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3a36:	89 87       	std	Y+9, r24	; 0x09
    3a38:	9a 87       	std	Y+10, r25	; 0x0a
    3a3a:	ab 87       	std	Y+11, r26	; 0x0b
    3a3c:	bc 87       	std	Y+12, r27	; 0x0c
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	96 e6       	ldi	r25, 0x66	; 102
    3a42:	ae ee       	ldi	r26, 0xEE	; 238
    3a44:	bf e5       	ldi	r27, 0x5F	; 95
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	9a 83       	std	Y+2, r25	; 0x02
    3a4a:	ab 83       	std	Y+3, r26	; 0x03
    3a4c:	bc 83       	std	Y+4, r27	; 0x04
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a52:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a54:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a56:	81 15       	cp	r24, r1
    3a58:	96 46       	sbci	r25, 0x66	; 102
    3a5a:	ae 4e       	sbci	r26, 0xEE	; 238
    3a5c:	bf 45       	sbci	r27, 0x5F	; 95
    3a5e:	28 f4       	brcc	.+10     	; 0x3a6a <_Z18validateTimeStringPcPma+0x8a>
    3a60:	89 80       	ldd	r8, Y+1	; 0x01
    3a62:	9a 80       	ldd	r9, Y+2	; 0x02
    3a64:	ab 80       	ldd	r10, Y+3	; 0x03
    3a66:	bc 80       	ldd	r11, Y+4	; 0x04
    3a68:	04 c0       	rjmp	.+8      	; 0x3a72 <_Z18validateTimeStringPcPma+0x92>
    3a6a:	89 84       	ldd	r8, Y+9	; 0x09
    3a6c:	9a 84       	ldd	r9, Y+10	; 0x0a
    3a6e:	ab 84       	ldd	r10, Y+11	; 0x0b
    3a70:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    3a72:	ff 24       	eor	r15, r15
    3a74:	f3 94       	inc	r15
    3a76:	42 c0       	rjmp	.+132    	; 0x3afc <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epochVar == &g_event_finish_epoch)
    3a78:	63 55       	subi	r22, 0x53	; 83
    3a7a:	75 40       	sbci	r23, 0x05	; 5
    3a7c:	a9 f5       	brne	.+106    	; 0x3ae8 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    3a7e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    3a82:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    3a86:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    3a8a:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    3a8e:	8d 83       	std	Y+5, r24	; 0x05
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	af 83       	std	Y+7, r26	; 0x07
    3a94:	b8 87       	std	Y+8, r27	; 0x08
    3a96:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    3a9a:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    3a9e:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3aa2:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	ab 83       	std	Y+3, r26	; 0x03
    3aac:	bc 83       	std	Y+4, r27	; 0x04
    3aae:	4d 81       	ldd	r20, Y+5	; 0x05
    3ab0:	5e 81       	ldd	r21, Y+6	; 0x06
    3ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab4:	78 85       	ldd	r23, Y+8	; 0x08
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aba:	ab 81       	ldd	r26, Y+3	; 0x03
    3abc:	bc 81       	ldd	r27, Y+4	; 0x04
    3abe:	48 17       	cp	r20, r24
    3ac0:	59 07       	cpc	r21, r25
    3ac2:	6a 07       	cpc	r22, r26
    3ac4:	7b 07       	cpc	r23, r27
    3ac6:	40 f4       	brcc	.+16     	; 0x3ad8 <_Z18validateTimeStringPcPma+0xf8>
    3ac8:	89 80       	ldd	r8, Y+1	; 0x01
    3aca:	9a 80       	ldd	r9, Y+2	; 0x02
    3acc:	ab 80       	ldd	r10, Y+3	; 0x03
    3ace:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    3ad0:	68 94       	set
    3ad2:	ff 24       	eor	r15, r15
    3ad4:	f1 f8       	bld	r15, 1
    3ad6:	12 c0       	rjmp	.+36     	; 0x3afc <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    3ad8:	8d 80       	ldd	r8, Y+5	; 0x05
    3ada:	9e 80       	ldd	r9, Y+6	; 0x06
    3adc:	af 80       	ldd	r10, Y+7	; 0x07
    3ade:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    3ae0:	68 94       	set
    3ae2:	ff 24       	eor	r15, r15
    3ae4:	f1 f8       	bld	r15, 1
    3ae6:	0a c0       	rjmp	.+20     	; 0x3afc <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    3ae8:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    3aea:	0f 2e       	mov	r0, r31
    3aec:	81 2c       	mov	r8, r1
    3aee:	f6 e6       	ldi	r31, 0x66	; 102
    3af0:	9f 2e       	mov	r9, r31
    3af2:	fe ee       	ldi	r31, 0xEE	; 238
    3af4:	af 2e       	mov	r10, r31
    3af6:	ff e5       	ldi	r31, 0x5F	; 95
    3af8:	bf 2e       	mov	r11, r31
    3afa:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    3afc:	ec 30       	cpi	r30, 0x0C	; 12
    3afe:	f1 05       	cpc	r31, r1
    3b00:	09 f0       	breq	.+2      	; 0x3b04 <_Z18validateTimeStringPcPma+0x124>
    3b02:	5e c0       	rjmp	.+188    	; 0x3bc0 <_Z18validateTimeStringPcPma+0x1e0>
    3b04:	c8 01       	movw	r24, r16
    3b06:	0e 94 b9 19 	call	0x3372	; 0x3372 <_Z11only_digitsPc>
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <_Z18validateTimeStringPcPma+0x130>
    3b0e:	4f c0       	rjmp	.+158    	; 0x3bae <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = RTC_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    3b10:	b8 01       	movw	r22, r16
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	0e 94 32 04 	call	0x864	; 0x864 <_Z13RTC_get_epochPbPc>
    3b1a:	2b 01       	movw	r4, r22
    3b1c:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    3b1e:	ae 2d       	mov	r26, r14
    3b20:	ee 0c       	add	r14, r14
    3b22:	bb 0b       	sbc	r27, r27
    3b24:	20 e1       	ldi	r18, 0x10	; 16
    3b26:	3e e0       	ldi	r19, 0x0E	; 14
    3b28:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__usmulhisi3>
    3b2c:	64 0d       	add	r22, r4
    3b2e:	75 1d       	adc	r23, r5
    3b30:	86 1d       	adc	r24, r6
    3b32:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    3b34:	86 16       	cp	r8, r22
    3b36:	97 06       	cpc	r9, r23
    3b38:	a8 06       	cpc	r10, r24
    3b3a:	b9 06       	cpc	r11, r25
    3b3c:	08 f4       	brcc	.+2      	; 0x3b40 <_Z18validateTimeStringPcPma+0x160>
    3b3e:	45 c0       	rjmp	.+138    	; 0x3bca <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    3b40:	21 e0       	ldi	r18, 0x01	; 1
    3b42:	f2 12       	cpse	r15, r18
    3b44:	09 c0       	rjmp	.+18     	; 0x3b58 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    3b46:	68 e0       	ldi	r22, 0x08	; 8
    3b48:	8e e6       	ldi	r24, 0x6E	; 110
    3b4a:	95 e0       	ldi	r25, 0x05	; 5
    3b4c:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3b50:	60 e0       	ldi	r22, 0x00	; 0
    3b52:	70 e0       	ldi	r23, 0x00	; 0
    3b54:	cb 01       	movw	r24, r22
    3b56:	39 c0       	rjmp	.+114    	; 0x3bca <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    3b58:	22 e0       	ldi	r18, 0x02	; 2
    3b5a:	f2 12       	cpse	r15, r18
    3b5c:	1f c0       	rjmp	.+62     	; 0x3b9c <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    3b5e:	00 91 5b 05 	lds	r16, 0x055B	; 0x80055b <g_current_epoch>
    3b62:	10 91 5c 05 	lds	r17, 0x055C	; 0x80055c <g_current_epoch+0x1>
    3b66:	20 91 5d 05 	lds	r18, 0x055D	; 0x80055d <g_current_epoch+0x2>
    3b6a:	30 91 5e 05 	lds	r19, 0x055E	; 0x80055e <g_current_epoch+0x3>
    3b6e:	60 17       	cp	r22, r16
    3b70:	71 07       	cpc	r23, r17
    3b72:	82 07       	cpc	r24, r18
    3b74:	93 07       	cpc	r25, r19
    3b76:	48 f4       	brcc	.+18     	; 0x3b8a <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    3b78:	67 e0       	ldi	r22, 0x07	; 7
    3b7a:	8e e6       	ldi	r24, 0x6E	; 110
    3b7c:	95 e0       	ldi	r25, 0x05	; 5
    3b7e:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	cb 01       	movw	r24, r22
    3b88:	20 c0       	rjmp	.+64     	; 0x3bca <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    3b8a:	66 e0       	ldi	r22, 0x06	; 6
    3b8c:	8e e6       	ldi	r24, 0x6E	; 110
    3b8e:	95 e0       	ldi	r25, 0x05	; 5
    3b90:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	cb 01       	movw	r24, r22
    3b9a:	17 c0       	rjmp	.+46     	; 0x3bca <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    3b9c:	6a e0       	ldi	r22, 0x0A	; 10
    3b9e:	8e e6       	ldi	r24, 0x6E	; 110
    3ba0:	95 e0       	ldi	r25, 0x05	; 5
    3ba2:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	cb 01       	movw	r24, r22
    3bac:	0e c0       	rjmp	.+28     	; 0x3bca <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    3bae:	69 e0       	ldi	r22, 0x09	; 9
    3bb0:	8e e6       	ldi	r24, 0x6E	; 110
    3bb2:	95 e0       	ldi	r25, 0x05	; 5
    3bb4:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	05 c0       	rjmp	.+10     	; 0x3bca <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    3bc0:	ef 2b       	or	r30, r31
    3bc2:	a9 f7       	brne	.-22     	; 0x3bae <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    3bca:	2c 96       	adiw	r28, 0x0c	; 12
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	bf 90       	pop	r11
    3be4:	af 90       	pop	r10
    3be6:	9f 90       	pop	r9
    3be8:	8f 90       	pop	r8
    3bea:	7f 90       	pop	r7
    3bec:	6f 90       	pop	r6
    3bee:	5f 90       	pop	r5
    3bf0:	4f 90       	pop	r4
    3bf2:	08 95       	ret

00003bf4 <_Z18setAMToneFrequency14AM_Tone_Freq_t>:

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
    3bf4:	cf 93       	push	r28
	BOOL enableAM = TRUE;

#if INIT_EEPROM_ONLY
	if(value) enableAM = FALSE; /* Remove compiler warning */
#else
	switch(value)
    3bf6:	82 30       	cpi	r24, 0x02	; 2
    3bf8:	19 f1       	breq	.+70     	; 0x3c40 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x4c>
    3bfa:	28 f4       	brcc	.+10     	; 0x3c06 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x12>
    3bfc:	88 23       	and	r24, r24
    3bfe:	c1 f1       	breq	.+112    	; 0x3c70 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7c>
    3c00:	81 30       	cpi	r24, 0x01	; 1
    3c02:	31 f1       	breq	.+76     	; 0x3c50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x5c>
    3c04:	2d c0       	rjmp	.+90     	; 0x3c60 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x6c>
    3c06:	84 30       	cpi	r24, 0x04	; 4
    3c08:	59 f0       	breq	.+22     	; 0x3c20 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x2c>
    3c0a:	90 f0       	brcs	.+36     	; 0x3c30 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x3c>
    3c0c:	85 30       	cpi	r24, 0x05	; 5
    3c0e:	41 f5       	brne	.+80     	; 0x3c60 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x6c>
		break;

		case AM_900Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 556;    /* For ~900 Hz tone output */
    3c10:	8c e2       	ldi	r24, 0x2C	; 44
    3c12:	92 e0       	ldi	r25, 0x02	; 2
    3c14:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c18:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c1c:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 556;    /* For ~900 Hz tone output */
#else
				OCR1A = 278;
#endif
		}
		break;
    3c1e:	29 c0       	rjmp	.+82     	; 0x3c72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_800Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 625;    /* For ~800 Hz tone output */
    3c20:	81 e7       	ldi	r24, 0x71	; 113
    3c22:	92 e0       	ldi	r25, 0x02	; 2
    3c24:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c28:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c2c:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 625;    /* For ~800 Hz tone output */
#else
				OCR1A = 312;
#endif
		}
		break;
    3c2e:	21 c0       	rjmp	.+66     	; 0x3c72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_700Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 714;    /* For ~700 Hz tone output */
    3c30:	8a ec       	ldi	r24, 0xCA	; 202
    3c32:	92 e0       	ldi	r25, 0x02	; 2
    3c34:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c38:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c3c:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 714;    /* For ~700 Hz tone output */
#else
				OCR1A = 357;
#endif
		}
		break;
    3c3e:	19 c0       	rjmp	.+50     	; 0x3c72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_600Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 833;    /* For ~600 Hz tone output */
    3c40:	81 e4       	ldi	r24, 0x41	; 65
    3c42:	93 e0       	ldi	r25, 0x03	; 3
    3c44:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c48:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c4c:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 833;    /* For ~600 Hz tone output */
#else
				OCR1A = 416;
#endif
		}
		break;
    3c4e:	11 c0       	rjmp	.+34     	; 0x3c72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_500Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 1000;   /* For ~500 Hz tone output */
    3c50:	88 ee       	ldi	r24, 0xE8	; 232
    3c52:	93 e0       	ldi	r25, 0x03	; 3
    3c54:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c58:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c5c:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 1000;   /* For ~500 Hz tone output */
#else
				OCR1A = 500;
#endif
		}
		break;
    3c5e:	09 c0       	rjmp	.+18     	; 0x3c72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_1000Hz:
		default:
		{
#if F_CPU == 16000000UL
				OCR1A = 500;    /* For ~1000 Hz tone output */
    3c60:	84 ef       	ldi	r24, 0xF4	; 244
    3c62:	91 e0       	ldi	r25, 0x01	; 1
    3c64:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c68:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c6c:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 500;    /* For ~1000 Hz tone output */
#else
				OCR1A = 250;
#endif
		}
		break;
    3c6e:	01 c0       	rjmp	.+2      	; 0x3c72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>
#else
	switch(value)
	{
		case AM_DISABLED:
		{
			enableAM = FALSE;
    3c70:	c0 e0       	ldi	r28, 0x00	; 0
#endif
		}
		break;
	}

	if(!OCR0A)
    3c72:	87 b5       	in	r24, 0x27	; 39
    3c74:	81 11       	cpse	r24, r1
    3c76:	02 c0       	rjmp	.+4      	; 0x3c7c <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x88>
	{
		OCR0A = DEFAULT_TONE_FREQUENCY; /* Ensure that FM tone setting is initialized - even if it won't be used */
    3c78:	8f e2       	ldi	r24, 0x2F	; 47
    3c7a:	87 bd       	out	0x27, r24	; 39

	}

 	if(!OCR1A)
    3c7c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    3c80:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c84:	89 2b       	or	r24, r25
    3c86:	31 f4       	brne	.+12     	; 0x3c94 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xa0>
 	{
		OCR1A = 1000;  /* Ensure that AM tone setting is initialized - even if it won't be used */
    3c88:	88 ee       	ldi	r24, 0xE8	; 232
    3c8a:	93 e0       	ldi	r25, 0x03	; 3
    3c8c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c90:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 	}

	cli();
    3c94:	f8 94       	cli
	setupPortsForF1975(enableAM);
    3c96:	8c 2f       	mov	r24, r28
    3c98:	0e 94 93 07 	call	0xf26	; 0xf26 <setupPortsForF1975>

	if(enableAM)
    3c9c:	cc 23       	and	r28, r28
    3c9e:	59 f0       	breq	.+22     	; 0x3cb6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xc2>
	{
		TIMSK0 &= ~(1 << OCIE0A);   /* Timer/Counter0 Output Compare Match A Interrupt Disable (CW Tone Output for FM) */
    3ca0:	ee e6       	ldi	r30, 0x6E	; 110
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 81       	ld	r24, Z
    3ca6:	8d 7f       	andi	r24, 0xFD	; 253
    3ca8:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);    /* Timer/Counter1 Output Compare Match A Interrupt Enable (CW Tone Output for AM) */
    3caa:	ef e6       	ldi	r30, 0x6F	; 111
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	80 81       	ld	r24, Z
    3cb0:	82 60       	ori	r24, 0x02	; 2
    3cb2:	80 83       	st	Z, r24
    3cb4:	0a c0       	rjmp	.+20     	; 0x3cca <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xd6>
	}
	else
	{
		TIMSK0 |= (1 << OCIE0A);    /* Timer/Counter0 Output Compare Match A Interrupt Enable (CW Tone Output for FM) */
    3cb6:	ee e6       	ldi	r30, 0x6E	; 110
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	82 60       	ori	r24, 0x02	; 2
    3cbe:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);   /* Timer/Counter1 Output Compare Match A Interrupt Disable (CW Tone Output for AM) */
    3cc0:	ef e6       	ldi	r30, 0x6F	; 111
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8d 7f       	andi	r24, 0xFD	; 253
    3cc8:	80 83       	st	Z, r24
	}

	g_AM_enabled = enableAM;
    3cca:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <g_AM_enabled>
	sei();
    3cce:	78 94       	sei
#endif  /* INIT_EEPROM_ONLY */
	return(enableAM);
}
    3cd0:	8c 2f       	mov	r24, r28
    3cd2:	cf 91       	pop	r28
    3cd4:	08 95       	ret

00003cd6 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to always optimize large switch statements correctly
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    3cd6:	2f 92       	push	r2
    3cd8:	3f 92       	push	r3
    3cda:	4f 92       	push	r4
    3cdc:	5f 92       	push	r5
    3cde:	6f 92       	push	r6
    3ce0:	7f 92       	push	r7
    3ce2:	8f 92       	push	r8
    3ce4:	9f 92       	push	r9
    3ce6:	af 92       	push	r10
    3ce8:	bf 92       	push	r11
    3cea:	cf 92       	push	r12
    3cec:	df 92       	push	r13
    3cee:	ef 92       	push	r14
    3cf0:	ff 92       	push	r15
    3cf2:	0f 93       	push	r16
    3cf4:	1f 93       	push	r17
    3cf6:	cf 93       	push	r28
    3cf8:	df 93       	push	r29
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	2c 97       	sbiw	r28, 0x0c	; 12
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3d0a:	0f 2e       	mov	r0, r31
    3d0c:	f0 ea       	ldi	r31, 0xA0	; 160
    3d0e:	6f 2e       	mov	r6, r31
    3d10:	f1 e0       	ldi	r31, 0x01	; 1
    3d12:	7f 2e       	mov	r7, r31
    3d14:	f0 2d       	mov	r31, r0
    3d16:	0f 2e       	mov	r0, r31
    3d18:	f8 ea       	ldi	r31, 0xA8	; 168
    3d1a:	af 2e       	mov	r10, r31
    3d1c:	f4 e0       	ldi	r31, 0x04	; 4
    3d1e:	bf 2e       	mov	r11, r31
    3d20:	f0 2d       	mov	r31, r0
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);

						if(g_messages_text[STATION_ID][0])
    3d22:	0f 2e       	mov	r0, r31
    3d24:	f2 ee       	ldi	r31, 0xE2	; 226
    3d26:	4f 2e       	mov	r4, r31
    3d28:	f4 e0       	ldi	r31, 0x04	; 4
    3d2a:	5f 2e       	mov	r5, r31
    3d2c:	f0 2d       	mov	r31, r0
						setAtten(0);
						sei();
					}
#endif /* INIT_EEPROM_ONLY */

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3d2e:	0f 2e       	mov	r0, r31
    3d30:	fe e0       	ldi	r31, 0x0E	; 14
    3d32:	8f 2e       	mov	r8, r31
    3d34:	f2 e0       	ldi	r31, 0x02	; 2
    3d36:	9f 2e       	mov	r9, r31
    3d38:	f0 2d       	mov	r31, r0
				lb_send_string(g_tempStr, TRUE);

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3d3a:	0f 2e       	mov	r0, r31
    3d3c:	f5 e1       	ldi	r31, 0x15	; 21
    3d3e:	2f 2e       	mov	r2, r31
    3d40:	f2 e0       	ldi	r31, 0x02	; 2
    3d42:	3f 2e       	mov	r3, r31
    3d44:	f0 2d       	mov	r31, r0
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;

	while((lb_buff = nextFullRxBuffer()))
    3d46:	0e 94 bd 0b 	call	0x177a	; 0x177a <nextFullRxBuffer>
    3d4a:	6c 01       	movw	r12, r24
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <_Z17handleLinkBusMsgsv+0x7c>
    3d50:	01 c5       	rjmp	.+2562   	; 0x4754 <_Z17handleLinkBusMsgsv+0xa7e>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    3d52:	dc 01       	movw	r26, r24
    3d54:	11 96       	adiw	r26, 0x01	; 1
    3d56:	8d 91       	ld	r24, X+
    3d58:	9c 91       	ld	r25, X
    3d5a:	12 97       	sbiw	r26, 0x02	; 2
    3d5c:	86 3c       	cpi	r24, 0xC6	; 198
    3d5e:	be e1       	ldi	r27, 0x1E	; 30
    3d60:	9b 07       	cpc	r25, r27
    3d62:	29 f1       	breq	.+74     	; 0x3dae <_Z17handleLinkBusMsgsv+0xd8>
    3d64:	78 f4       	brcc	.+30     	; 0x3d84 <_Z17handleLinkBusMsgsv+0xae>
    3d66:	8e 31       	cpi	r24, 0x1E	; 30
    3d68:	f3 e0       	ldi	r31, 0x03	; 3
    3d6a:	9f 07       	cpc	r25, r31
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <_Z17handleLinkBusMsgsv+0x9a>
    3d6e:	15 c1       	rjmp	.+554    	; 0x3f9a <_Z17handleLinkBusMsgsv+0x2c4>
    3d70:	8f 36       	cpi	r24, 0x6F	; 111
    3d72:	2d e1       	ldi	r18, 0x1D	; 29
    3d74:	92 07       	cpc	r25, r18
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <_Z17handleLinkBusMsgsv+0xa4>
    3d78:	4d c2       	rjmp	.+1178   	; 0x4214 <_Z17handleLinkBusMsgsv+0x53e>
    3d7a:	87 3d       	cpi	r24, 0xD7	; 215
    3d7c:	92 40       	sbci	r25, 0x02	; 2
    3d7e:	09 f0       	breq	.+2      	; 0x3d82 <_Z17handleLinkBusMsgsv+0xac>
    3d80:	bd c4       	rjmp	.+2426   	; 0x46fc <_Z17handleLinkBusMsgsv+0xa26>
    3d82:	ad c0       	rjmp	.+346    	; 0x3ede <_Z17handleLinkBusMsgsv+0x208>
    3d84:	82 37       	cpi	r24, 0x72	; 114
    3d86:	a3 e2       	ldi	r26, 0x23	; 35
    3d88:	9a 07       	cpc	r25, r26
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <_Z17handleLinkBusMsgsv+0xb8>
    3d8c:	77 c1       	rjmp	.+750    	; 0x407c <_Z17handleLinkBusMsgsv+0x3a6>
    3d8e:	28 f4       	brcc	.+10     	; 0x3d9a <_Z17handleLinkBusMsgsv+0xc4>
    3d90:	8a 3e       	cpi	r24, 0xEA	; 234
    3d92:	92 42       	sbci	r25, 0x22	; 34
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <_Z17handleLinkBusMsgsv+0xc2>
    3d96:	09 c2       	rjmp	.+1042   	; 0x41aa <_Z17handleLinkBusMsgsv+0x4d4>
    3d98:	b1 c4       	rjmp	.+2402   	; 0x46fc <_Z17handleLinkBusMsgsv+0xa26>
    3d9a:	84 33       	cpi	r24, 0x34	; 52
    3d9c:	f4 e2       	ldi	r31, 0x24	; 36
    3d9e:	9f 07       	cpc	r25, r31
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <_Z17handleLinkBusMsgsv+0xce>
    3da2:	cf c0       	rjmp	.+414    	; 0x3f42 <_Z17handleLinkBusMsgsv+0x26c>
    3da4:	85 3c       	cpi	r24, 0xC5	; 197
    3da6:	94 42       	sbci	r25, 0x24	; 36
    3da8:	09 f4       	brne	.+2      	; 0x3dac <_Z17handleLinkBusMsgsv+0xd6>
    3daa:	17 c4       	rjmp	.+2094   	; 0x45da <_Z17handleLinkBusMsgsv+0x904>
    3dac:	a7 c4       	rjmp	.+2382   	; 0x46fc <_Z17handleLinkBusMsgsv+0xa26>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    3dae:	d6 01       	movw	r26, r12
    3db0:	13 96       	adiw	r26, 0x03	; 3
    3db2:	8c 91       	ld	r24, X
    3db4:	13 97       	sbiw	r26, 0x03	; 3
    3db6:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <_Z17handleLinkBusMsgsv+0xe8>
    3dbc:	7b c0       	rjmp	.+246    	; 0x3eb4 <_Z17handleLinkBusMsgsv+0x1de>
				{
					if(c == 'B')
    3dbe:	82 34       	cpi	r24, 0x42	; 66
    3dc0:	91 05       	cpc	r25, r1
    3dc2:	09 f4       	brne	.+2      	; 0x3dc6 <_Z17handleLinkBusMsgsv+0xf0>
    3dc4:	af c4       	rjmp	.+2398   	; 0x4724 <_Z17handleLinkBusMsgsv+0xa4e>
					{
						c = BEACON;
					}
					else if(c == 'F')
    3dc6:	86 34       	cpi	r24, 0x46	; 70
    3dc8:	91 05       	cpc	r25, r1
    3dca:	09 f4       	brne	.+2      	; 0x3dce <_Z17handleLinkBusMsgsv+0xf8>
    3dcc:	ad c4       	rjmp	.+2394   	; 0x4728 <_Z17handleLinkBusMsgsv+0xa52>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    3dce:	83 34       	cpi	r24, 0x43	; 67
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	d1 f4       	brne	.+52     	; 0x3e08 <_Z17handleLinkBusMsgsv+0x132>
					{
						char t = lb_buff->fields[FIELD2][0];
    3dd4:	57 96       	adiw	r26, 0x17	; 23
    3dd6:	8c 91       	ld	r24, X
    3dd8:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    3dda:	58 96       	adiw	r26, 0x18	; 24
    3ddc:	1c 92       	st	X, r1

						if(t == 'B')
    3dde:	82 34       	cpi	r24, 0x42	; 66
    3de0:	29 f0       	breq	.+10     	; 0x3dec <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	c0 97       	sbiw	r24, 0x30	; 48
    3de6:	0a 97       	sbiw	r24, 0x0a	; 10
    3de8:	08 f0       	brcs	.+2      	; 0x3dec <_Z17handleLinkBusMsgsv+0x116>
    3dea:	64 c0       	rjmp	.+200    	; 0x3eb4 <_Z17handleLinkBusMsgsv+0x1de>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    3dec:	c6 01       	movw	r24, r12
    3dee:	47 96       	adiw	r24, 0x17	; 23
    3df0:	0e 94 2c 33 	call	0x6658	; 0x6658 <atoi>
    3df4:	99 23       	and	r25, r25
    3df6:	14 f4       	brge	.+4      	; 0x3dfc <_Z17handleLinkBusMsgsv+0x126>
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	86 30       	cpi	r24, 0x06	; 6
    3dfe:	91 05       	cpc	r25, r1
    3e00:	cc f1       	brlt	.+114    	; 0x3e74 <_Z17handleLinkBusMsgsv+0x19e>
    3e02:	85 e0       	ldi	r24, 0x05	; 5
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	36 c0       	rjmp	.+108    	; 0x3e74 <_Z17handleLinkBusMsgsv+0x19e>
						}
					}
					else if(c == 'S')
    3e08:	83 35       	cpi	r24, 0x53	; 83
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	79 f5       	brne	.+94     	; 0x3e6c <_Z17handleLinkBusMsgsv+0x196>
					{
						char x = 0;
						char t = lb_buff->fields[FIELD2][0];
    3e0e:	f6 01       	movw	r30, r12
    3e10:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    3e12:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    3e14:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    3e16:	82 34       	cpi	r24, 0x42	; 66
    3e18:	89 f1       	breq	.+98     	; 0x3e7c <_Z17handleLinkBusMsgsv+0x1a6>
						{
							x = BEACON;
						}
						else if(t == 'F')
    3e1a:	86 34       	cpi	r24, 0x46	; 70
    3e1c:	39 f4       	brne	.+14     	; 0x3e2c <_Z17handleLinkBusMsgsv+0x156>
						{
							if((u > '0') && (u < '6'))
    3e1e:	8f ec       	ldi	r24, 0xCF	; 207
    3e20:	89 0f       	add	r24, r25
    3e22:	85 30       	cpi	r24, 0x05	; 5
    3e24:	68 f5       	brcc	.+90     	; 0x3e80 <_Z17handleLinkBusMsgsv+0x1aa>
							{
								x = SPRINT_F1 + (u - '1');
    3e26:	8c ed       	ldi	r24, 0xDC	; 220
    3e28:	89 0f       	add	r24, r25
    3e2a:	18 c0       	rjmp	.+48     	; 0x3e5c <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(t == 'S')
    3e2c:	83 35       	cpi	r24, 0x53	; 83
    3e2e:	39 f4       	brne	.+14     	; 0x3e3e <_Z17handleLinkBusMsgsv+0x168>
						{
							if((u > '0') && (u < '6'))
    3e30:	8f ec       	ldi	r24, 0xCF	; 207
    3e32:	89 0f       	add	r24, r25
    3e34:	85 30       	cpi	r24, 0x05	; 5
    3e36:	b8 f4       	brcc	.+46     	; 0x3e66 <_Z17handleLinkBusMsgsv+0x190>
							{
								x = SPRINT_S1 + (u - '1');
    3e38:	87 ed       	ldi	r24, 0xD7	; 215
    3e3a:	89 0f       	add	r24, r25
    3e3c:	0f c0       	rjmp	.+30     	; 0x3e5c <_Z17handleLinkBusMsgsv+0x186>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    3e3e:	96 34       	cpi	r25, 0x46	; 70
    3e40:	31 f4       	brne	.+12     	; 0x3e4e <_Z17handleLinkBusMsgsv+0x178>
						{
							if((t > '0') && (t < '6'))
    3e42:	9f ec       	ldi	r25, 0xCF	; 207
    3e44:	98 0f       	add	r25, r24
    3e46:	95 30       	cpi	r25, 0x05	; 5
    3e48:	e8 f4       	brcc	.+58     	; 0x3e84 <_Z17handleLinkBusMsgsv+0x1ae>
							{
								x = SPRINT_F1 + (t - '1');
    3e4a:	84 52       	subi	r24, 0x24	; 36
    3e4c:	07 c0       	rjmp	.+14     	; 0x3e5c <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(u == 'S')
    3e4e:	93 35       	cpi	r25, 0x53	; 83
    3e50:	d9 f4       	brne	.+54     	; 0x3e88 <_Z17handleLinkBusMsgsv+0x1b2>
						{
							if((t > '0') && (t < '6'))
    3e52:	9f ec       	ldi	r25, 0xCF	; 207
    3e54:	98 0f       	add	r25, r24
    3e56:	95 30       	cpi	r25, 0x05	; 5
    3e58:	c8 f4       	brcc	.+50     	; 0x3e8c <_Z17handleLinkBusMsgsv+0x1b6>
							{
								x = SPRINT_S1 + (t - '1');
    3e5a:	89 52       	subi	r24, 0x29	; 41
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
    3e5c:	99 ef       	ldi	r25, 0xF9	; 249
    3e5e:	98 0f       	add	r25, r24
    3e60:	9b 30       	cpi	r25, 0x0B	; 11
    3e62:	10 f0       	brcs	.+4      	; 0x3e68 <_Z17handleLinkBusMsgsv+0x192>
    3e64:	63 c4       	rjmp	.+2246   	; 0x472c <_Z17handleLinkBusMsgsv+0xa56>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    3e66:	87 e0       	ldi	r24, 0x07	; 7
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
						{
							c = x;
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	04 c0       	rjmp	.+8      	; 0x3e74 <_Z17handleLinkBusMsgsv+0x19e>
							c = BEACON;
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    3e6c:	c6 01       	movw	r24, r12
    3e6e:	03 96       	adiw	r24, 0x03	; 3
    3e70:	0e 94 2c 33 	call	0x6658	; 0x6658 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    3e74:	82 31       	cpi	r24, 0x12	; 18
    3e76:	91 05       	cpc	r25, r1
    3e78:	e8 f4       	brcc	.+58     	; 0x3eb4 <_Z17handleLinkBusMsgsv+0x1de>
    3e7a:	09 c0       	rjmp	.+18     	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	07 c0       	rjmp	.+14     	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	05 c0       	rjmp	.+10     	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	03 c0       	rjmp	.+6      	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	01 c0       	rjmp	.+2      	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
					{
						Fox_t holdFox = (Fox_t)c;
    3e8e:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3e90:	ae 01       	movw	r20, r28
    3e92:	4f 5f       	subi	r20, 0xFF	; 255
    3e94:	5f 4f       	sbci	r21, 0xFF	; 255
    3e96:	60 e1       	ldi	r22, 0x10	; 16
    3e98:	8e e6       	ldi	r24, 0x6E	; 110
    3e9a:	95 e0       	ldi	r25, 0x05	; 5
    3e9c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3ea0:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    3ea4:	99 81       	ldd	r25, Y+1	; 0x01
    3ea6:	98 17       	cp	r25, r24
    3ea8:	29 f0       	breq	.+10     	; 0x3eb4 <_Z17handleLinkBusMsgsv+0x1de>
						{
							setupForFox(&holdFox, START_NOTHING);
    3eaa:	60 e0       	ldi	r22, 0x00	; 0
    3eac:	ce 01       	movw	r24, r28
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3eb4:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    3eb8:	1f 92       	push	r1
    3eba:	8f 93       	push	r24
    3ebc:	7f 92       	push	r7
    3ebe:	6f 92       	push	r6
    3ec0:	bf 92       	push	r11
    3ec2:	af 92       	push	r10
    3ec4:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	c5 01       	movw	r24, r10
    3ecc:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	13 c4       	rjmp	.+2086   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>

#if !SUPPORT_ONLY_80M
					case MESSAGE_SET_AM_TONE:
					{
						if(lb_buff->fields[FIELD1][0])
    3ede:	d6 01       	movw	r26, r12
    3ee0:	13 96       	adiw	r26, 0x03	; 3
    3ee2:	8c 91       	ld	r24, X
    3ee4:	88 23       	and	r24, r24
    3ee6:	b1 f0       	breq	.+44     	; 0x3f14 <_Z17handleLinkBusMsgsv+0x23e>
						{
							uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3ee8:	c6 01       	movw	r24, r12
    3eea:	03 96       	adiw	r24, 0x03	; 3
    3eec:	0e 94 4a 33 	call	0x6694	; 0x6694 <atol>
							g_AM_audio_frequency = (AM_Tone_Freq_t)CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3ef0:	70 e0       	ldi	r23, 0x00	; 0
    3ef2:	67 30       	cpi	r22, 0x07	; 7
    3ef4:	71 05       	cpc	r23, r1
    3ef6:	0c f0       	brlt	.+2      	; 0x3efa <_Z17handleLinkBusMsgsv+0x224>
    3ef8:	66 e0       	ldi	r22, 0x06	; 6
    3efa:	60 93 4f 05 	sts	0x054F, r22	; 0x80054f <g_AM_audio_frequency>
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3efe:	4f e4       	ldi	r20, 0x4F	; 79
    3f00:	55 e0       	ldi	r21, 0x05	; 5
    3f02:	61 e1       	ldi	r22, 0x11	; 17
    3f04:	8e e6       	ldi	r24, 0x6E	; 110
    3f06:	95 e0       	ldi	r25, 0x05	; 5
    3f08:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
							setAMToneFrequency(g_AM_audio_frequency);
    3f0c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_AM_audio_frequency>
    3f10:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <_Z18setAMToneFrequency14AM_Tone_Freq_t>
						}

						sprintf(g_tempStr, "AM:%d\n", (uint8_t)g_AM_audio_frequency);
    3f14:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_AM_audio_frequency>
    3f18:	1f 92       	push	r1
    3f1a:	8f 93       	push	r24
    3f1c:	88 ea       	ldi	r24, 0xA8	; 168
    3f1e:	91 e0       	ldi	r25, 0x01	; 1
    3f20:	9f 93       	push	r25
    3f22:	8f 93       	push	r24
    3f24:	bf 92       	push	r11
    3f26:	af 92       	push	r10
    3f28:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
						lb_send_string(g_tempStr, FALSE);
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	c5 01       	movw	r24, r10
    3f30:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
					}
					break;
    3f34:	0f 90       	pop	r0
    3f36:	0f 90       	pop	r0
    3f38:	0f 90       	pop	r0
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	e1 c3       	rjmp	.+1986   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
#endif  /* !SUPPORT_ONLY_80M */

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3f42:	f6 01       	movw	r30, r12
    3f44:	83 81       	ldd	r24, Z+3	; 0x03
    3f46:	88 23       	and	r24, r24
    3f48:	11 f1       	breq	.+68     	; 0x3f8e <_Z17handleLinkBusMsgsv+0x2b8>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    3f4a:	80 33       	cpi	r24, 0x30	; 48
    3f4c:	21 f4       	brne	.+8      	; 0x3f56 <_Z17handleLinkBusMsgsv+0x280>
					{
						stopEventNow(PROGRAMMATIC);
    3f4e:	82 e0       	ldi	r24, 0x02	; 2
    3f50:	0e 94 19 1a 	call	0x3432	; 0x3432 <_Z12stopEventNow19EventActionSource_t>
    3f54:	d7 c3       	rjmp	.+1966   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3f56:	81 33       	cpi	r24, 0x31	; 49
    3f58:	21 f4       	brne	.+8      	; 0x3f62 <_Z17handleLinkBusMsgsv+0x28c>
					{
						startEventNow(PROGRAMMATIC);
    3f5a:	82 e0       	ldi	r24, 0x02	; 2
    3f5c:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z13startEventNow19EventActionSource_t>
    3f60:	d1 c3       	rjmp	.+1954   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    3f62:	82 33       	cpi	r24, 0x32	; 50
    3f64:	31 f4       	brne	.+12     	; 0x3f72 <_Z17handleLinkBusMsgsv+0x29c>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
						startEventUsingRTC();
    3f6c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Z18startEventUsingRTCv>
    3f70:	c9 c3       	rjmp	.+1938   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else if(lb_buff->fields[FIELD1][0] == '3')  /* Start the event at the programmed start time */
    3f72:	83 33       	cpi	r24, 0x33	; 51
    3f74:	31 f4       	brne	.+12     	; 0x3f82 <_Z17handleLinkBusMsgsv+0x2ac>
					{
						setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3f76:	62 e0       	ldi	r22, 0x02	; 2
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3f80:	c1 c3       	rjmp	.+1922   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else
					{
						lb_send_string((char*)"err\n", TRUE);
    3f82:	61 e0       	ldi	r22, 0x01	; 1
    3f84:	8f ea       	ldi	r24, 0xAF	; 175
    3f86:	91 e0       	ldi	r25, 0x01	; 1
    3f88:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3f8c:	bb c3       	rjmp	.+1910   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
				}
				else
				{
					lb_send_string((char*)"err\n", TRUE);
    3f8e:	61 e0       	ldi	r22, 0x01	; 1
    3f90:	8f ea       	ldi	r24, 0xAF	; 175
    3f92:	91 e0       	ldi	r25, 0x01	; 1
    3f94:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3f98:	b5 c3       	rjmp	.+1898   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    3f9a:	d6 01       	movw	r26, r12
    3f9c:	13 96       	adiw	r26, 0x03	; 3
    3f9e:	8c 91       	ld	r24, X
    3fa0:	88 23       	and	r24, r24
    3fa2:	99 f1       	breq	.+102    	; 0x400a <_Z17handleLinkBusMsgsv+0x334>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    3fa4:	80 e2       	ldi	r24, 0x20	; 32
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	f5 01       	movw	r30, r10
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    3fae:	b6 01       	movw	r22, r12
    3fb0:	6d 5f       	subi	r22, 0xFD	; 253
    3fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb4:	c5 01       	movw	r24, r10
    3fb6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <strcat>

					if(lb_buff->fields[FIELD2][0])
    3fba:	d6 01       	movw	r26, r12
    3fbc:	57 96       	adiw	r26, 0x17	; 23
    3fbe:	8c 91       	ld	r24, X
    3fc0:	88 23       	and	r24, r24
    3fc2:	79 f0       	breq	.+30     	; 0x3fe2 <_Z17handleLinkBusMsgsv+0x30c>
					{
						strcat(g_tempStr, " ");
    3fc4:	f5 01       	movw	r30, r10
    3fc6:	01 90       	ld	r0, Z+
    3fc8:	00 20       	and	r0, r0
    3fca:	e9 f7       	brne	.-6      	; 0x3fc6 <_Z17handleLinkBusMsgsv+0x2f0>
    3fcc:	31 97       	sbiw	r30, 0x01	; 1
    3fce:	80 e2       	ldi	r24, 0x20	; 32
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    3fd6:	b6 01       	movw	r22, r12
    3fd8:	69 5e       	subi	r22, 0xE9	; 233
    3fda:	7f 4f       	sbci	r23, 0xFF	; 255
    3fdc:	c5 01       	movw	r24, r10
    3fde:	0e 94 79 33 	call	0x66f2	; 0x66f2 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    3fe2:	f5 01       	movw	r30, r10
    3fe4:	01 90       	ld	r0, Z+
    3fe6:	00 20       	and	r0, r0
    3fe8:	e9 f7       	brne	.-6      	; 0x3fe4 <_Z17handleLinkBusMsgsv+0x30e>
    3fea:	31 97       	sbiw	r30, 0x01	; 1
    3fec:	e8 5a       	subi	r30, 0xA8	; 168
    3fee:	f4 40       	sbci	r31, 0x04	; 4
    3ff0:	75 97       	sbiw	r30, 0x15	; 21
    3ff2:	58 f4       	brcc	.+22     	; 0x400a <_Z17handleLinkBusMsgsv+0x334>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    3ff4:	b5 01       	movw	r22, r10
    3ff6:	87 ef       	ldi	r24, 0xF7	; 247
    3ff8:	94 e0       	ldi	r25, 0x04	; 4
    3ffa:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    3ffe:	a5 01       	movw	r20, r10
    4000:	6b e0       	ldi	r22, 0x0B	; 11
    4002:	8e e6       	ldi	r24, 0x6E	; 110
    4004:	95 e0       	ldi	r25, 0x05	; 5
    4006:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    400a:	f2 01       	movw	r30, r4
    400c:	85 89       	ldd	r24, Z+21	; 0x15
    400e:	88 23       	and	r24, r24
    4010:	f1 f0       	breq	.+60     	; 0x404e <_Z17handleLinkBusMsgsv+0x378>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    4012:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	87 ef       	ldi	r24, 0xF7	; 247
    401a:	94 e0       	ldi	r25, 0x04	; 4
    401c:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <timeRequiredToSendStrAtWPM>
    4020:	88 5a       	subi	r24, 0xA8	; 168
    4022:	9d 4f       	sbci	r25, 0xFD	; 253
    4024:	9c 01       	movw	r18, r24
    4026:	36 95       	lsr	r19
    4028:	27 95       	ror	r18
    402a:	36 95       	lsr	r19
    402c:	27 95       	ror	r18
    402e:	36 95       	lsr	r19
    4030:	27 95       	ror	r18
    4032:	a5 ec       	ldi	r26, 0xC5	; 197
    4034:	b0 e2       	ldi	r27, 0x20	; 32
    4036:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    403a:	92 95       	swap	r25
    403c:	82 95       	swap	r24
    403e:	8f 70       	andi	r24, 0x0F	; 15
    4040:	89 27       	eor	r24, r25
    4042:	9f 70       	andi	r25, 0x0F	; 15
    4044:	89 27       	eor	r24, r25
    4046:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <g_time_needed_for_ID+0x1>
    404a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    404e:	87 ef       	ldi	r24, 0xF7	; 247
    4050:	94 e0       	ldi	r25, 0x04	; 4
    4052:	9f 93       	push	r25
    4054:	8f 93       	push	r24
    4056:	84 eb       	ldi	r24, 0xB4	; 180
    4058:	91 e0       	ldi	r25, 0x01	; 1
    405a:	9f 93       	push	r25
    405c:	8f 93       	push	r24
    405e:	bf 92       	push	r11
    4060:	af 92       	push	r10
    4062:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4066:	61 e0       	ldi	r22, 0x01	; 1
    4068:	c5 01       	movw	r24, r10
    406a:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    406e:	0f 90       	pop	r0
    4070:	0f 90       	pop	r0
    4072:	0f 90       	pop	r0
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	44 c3       	rjmp	.+1672   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>


			case MESSAGE_CODE_SETTINGS:
			{
				if(lb_buff->fields[FIELD1][0] == 'S')
    407c:	d6 01       	movw	r26, r12
    407e:	13 96       	adiw	r26, 0x03	; 3
    4080:	8c 91       	ld	r24, X
    4082:	13 97       	sbiw	r26, 0x03	; 3
    4084:	83 35       	cpi	r24, 0x53	; 83
    4086:	09 f0       	breq	.+2      	; 0x408a <_Z17handleLinkBusMsgsv+0x3b4>
    4088:	51 c0       	rjmp	.+162    	; 0x412c <_Z17handleLinkBusMsgsv+0x456>
				{
					char x = lb_buff->fields[FIELD2][0];

					if(x)
    408a:	57 96       	adiw	r26, 0x17	; 23
    408c:	8c 91       	ld	r24, X
    408e:	88 23       	and	r24, r24
    4090:	d1 f1       	breq	.+116    	; 0x4106 <_Z17handleLinkBusMsgsv+0x430>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    4092:	c6 01       	movw	r24, r12
    4094:	47 96       	adiw	r24, 0x17	; 23
    4096:	0e 94 4a 33 	call	0x6694	; 0x6694 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    409a:	86 2f       	mov	r24, r22
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	85 30       	cpi	r24, 0x05	; 5
    40a0:	91 05       	cpc	r25, r1
    40a2:	14 f4       	brge	.+4      	; 0x40a8 <_Z17handleLinkBusMsgsv+0x3d2>
    40a4:	85 e0       	ldi	r24, 0x05	; 5
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	85 31       	cpi	r24, 0x15	; 21
    40aa:	91 05       	cpc	r25, r1
    40ac:	0c f0       	brlt	.+2      	; 0x40b0 <_Z17handleLinkBusMsgsv+0x3da>
    40ae:	84 e1       	ldi	r24, 0x14	; 20
    40b0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    40b4:	4f e0       	ldi	r20, 0x0F	; 15
    40b6:	51 e0       	ldi	r21, 0x01	; 1
    40b8:	6f e0       	ldi	r22, 0x0F	; 15
    40ba:	8e e6       	ldi	r24, 0x6E	; 110
    40bc:	95 e0       	ldi	r25, 0x05	; 5
    40be:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    40c2:	f2 01       	movw	r30, r4
    40c4:	85 89       	ldd	r24, Z+21	; 0x15
    40c6:	88 23       	and	r24, r24
    40c8:	f1 f0       	breq	.+60     	; 0x4106 <_Z17handleLinkBusMsgsv+0x430>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    40ca:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    40ce:	70 e0       	ldi	r23, 0x00	; 0
    40d0:	87 ef       	ldi	r24, 0xF7	; 247
    40d2:	94 e0       	ldi	r25, 0x04	; 4
    40d4:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <timeRequiredToSendStrAtWPM>
    40d8:	88 5a       	subi	r24, 0xA8	; 168
    40da:	9d 4f       	sbci	r25, 0xFD	; 253
    40dc:	9c 01       	movw	r18, r24
    40de:	36 95       	lsr	r19
    40e0:	27 95       	ror	r18
    40e2:	36 95       	lsr	r19
    40e4:	27 95       	ror	r18
    40e6:	36 95       	lsr	r19
    40e8:	27 95       	ror	r18
    40ea:	a5 ec       	ldi	r26, 0xC5	; 197
    40ec:	b0 e2       	ldi	r27, 0x20	; 32
    40ee:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    40f2:	92 95       	swap	r25
    40f4:	82 95       	swap	r24
    40f6:	8f 70       	andi	r24, 0x0F	; 15
    40f8:	89 27       	eor	r24, r25
    40fa:	9f 70       	andi	r25, 0x0F	; 15
    40fc:	89 27       	eor	r24, r25
    40fe:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <g_time_needed_for_ID+0x1>
    4102:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <g_time_needed_for_ID>
						}
					}

					sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    4106:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_id_codespeed>
    410a:	1f 92       	push	r1
    410c:	8f 93       	push	r24
    410e:	8b eb       	ldi	r24, 0xBB	; 187
    4110:	91 e0       	ldi	r25, 0x01	; 1
    4112:	9f 93       	push	r25
    4114:	8f 93       	push	r24
    4116:	bf 92       	push	r11
    4118:	af 92       	push	r10
    411a:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	3a c0       	rjmp	.+116    	; 0x41a0 <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    412c:	80 35       	cpi	r24, 0x50	; 80
    412e:	81 f5       	brne	.+96     	; 0x4190 <_Z17handleLinkBusMsgsv+0x4ba>
				{
					char x = lb_buff->fields[FIELD2][0];
    4130:	f6 01       	movw	r30, r12
    4132:	87 89       	ldd	r24, Z+23	; 0x17

					if(x)
    4134:	88 23       	and	r24, r24
    4136:	c9 f0       	breq	.+50     	; 0x416a <_Z17handleLinkBusMsgsv+0x494>
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
    4138:	81 33       	cpi	r24, 0x31	; 49
    413a:	39 f0       	breq	.+14     	; 0x414a <_Z17handleLinkBusMsgsv+0x474>
    413c:	84 35       	cpi	r24, 0x54	; 84
    413e:	39 f0       	breq	.+14     	; 0x414e <_Z17handleLinkBusMsgsv+0x478>
    4140:	91 e0       	ldi	r25, 0x01	; 1
    4142:	89 35       	cpi	r24, 0x59	; 89
    4144:	29 f0       	breq	.+10     	; 0x4150 <_Z17handleLinkBusMsgsv+0x47a>
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	03 c0       	rjmp	.+6      	; 0x4150 <_Z17handleLinkBusMsgsv+0x47a>
    414a:	91 e0       	ldi	r25, 0x01	; 1
    414c:	01 c0       	rjmp	.+2      	; 0x4150 <_Z17handleLinkBusMsgsv+0x47a>
    414e:	91 e0       	ldi	r25, 0x01	; 1
    4150:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_ptt_periodic_reset_enabled>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    4154:	41 e5       	ldi	r20, 0x51	; 81
    4156:	55 e0       	ldi	r21, 0x05	; 5
    4158:	67 e1       	ldi	r22, 0x17	; 23
    415a:	8e e6       	ldi	r24, 0x6E	; 110
    415c:	95 e0       	ldi	r25, 0x05	; 5
    415e:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    4162:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_ptt_periodic_reset_enabled>
    4166:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_use_ptt_periodic_reset>
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    416a:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_ptt_periodic_reset_enabled>
    416e:	1f 92       	push	r1
    4170:	8f 93       	push	r24
    4172:	87 ec       	ldi	r24, 0xC7	; 199
    4174:	91 e0       	ldi	r25, 0x01	; 1
    4176:	9f 93       	push	r25
    4178:	8f 93       	push	r24
    417a:	bf 92       	push	r11
    417c:	af 92       	push	r10
    417e:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    4182:	0f 90       	pop	r0
    4184:	0f 90       	pop	r0
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	08 c0       	rjmp	.+16     	; 0x41a0 <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else
				{
					sprintf(g_tempStr, "err\n");
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	ef ea       	ldi	r30, 0xAF	; 175
    4194:	f1 e0       	ldi	r31, 0x01	; 1
    4196:	d5 01       	movw	r26, r10
    4198:	01 90       	ld	r0, Z+
    419a:	0d 92       	st	X+, r0
    419c:	8a 95       	dec	r24
    419e:	e1 f7       	brne	.-8      	; 0x4198 <_Z17handleLinkBusMsgsv+0x4c2>
				}

				lb_send_string(g_tempStr, FALSE);
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	c5 01       	movw	r24, r10
    41a4:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    41a8:	ad c2       	rjmp	.+1370   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    41aa:	f6 01       	movw	r30, r12
    41ac:	83 81       	ldd	r24, Z+3	; 0x03
    41ae:	88 23       	and	r24, r24
    41b0:	d1 f0       	breq	.+52     	; 0x41e6 <_Z17handleLinkBusMsgsv+0x510>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    41b2:	48 e0       	ldi	r20, 0x08	; 8
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	b6 01       	movw	r22, r12
    41b8:	6d 5f       	subi	r22, 0xFD	; 253
    41ba:	7f 4f       	sbci	r23, 0xFF	; 255
    41bc:	c5 01       	movw	r24, r10
    41be:	0e 94 8b 33 	call	0x6716	; 0x6716 <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    41c2:	d5 01       	movw	r26, r10
    41c4:	18 96       	adiw	r26, 0x08	; 8
    41c6:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    41c8:	c5 01       	movw	r24, r10
    41ca:	0e 94 b9 19 	call	0x3372	; 0x3372 <_Z11only_digitsPc>
    41ce:	88 23       	and	r24, r24
    41d0:	51 f0       	breq	.+20     	; 0x41e6 <_Z17handleLinkBusMsgsv+0x510>
    41d2:	f5 01       	movw	r30, r10
    41d4:	01 90       	ld	r0, Z+
    41d6:	00 20       	and	r0, r0
    41d8:	e9 f7       	brne	.-6      	; 0x41d4 <_Z17handleLinkBusMsgsv+0x4fe>
    41da:	31 97       	sbiw	r30, 0x01	; 1
    41dc:	e8 5a       	subi	r30, 0xA8	; 168
    41de:	f4 40       	sbci	r31, 0x04	; 4
    41e0:	34 97       	sbiw	r30, 0x04	; 4
    41e2:	08 f0       	brcs	.+2      	; 0x41e6 <_Z17handleLinkBusMsgsv+0x510>
    41e4:	a5 c2       	rjmp	.+1354   	; 0x4730 <_Z17handleLinkBusMsgsv+0xa5a>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    41e6:	84 e1       	ldi	r24, 0x14	; 20
    41e8:	95 e0       	ldi	r25, 0x05	; 5
    41ea:	9f 93       	push	r25
    41ec:	8f 93       	push	r24
    41ee:	8f ec       	ldi	r24, 0xCF	; 207
    41f0:	91 e0       	ldi	r25, 0x01	; 1
    41f2:	9f 93       	push	r25
    41f4:	8f 93       	push	r24
    41f6:	bf 92       	push	r11
    41f8:	af 92       	push	r10
    41fa:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
				lb_send_string(g_tempStr, TRUE);
    41fe:	61 e0       	ldi	r22, 0x01	; 1
    4200:	c5 01       	movw	r24, r10
    4202:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	78 c2       	rjmp	.+1264   	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    4214:	f6 01       	movw	r30, r12
    4216:	83 81       	ldd	r24, Z+3	; 0x03
    4218:	84 35       	cpi	r24, 0x54	; 84
    421a:	09 f0       	breq	.+2      	; 0x421e <_Z17handleLinkBusMsgsv+0x548>
    421c:	83 c0       	rjmp	.+262    	; 0x4324 <_Z17handleLinkBusMsgsv+0x64e>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    421e:	4c e0       	ldi	r20, 0x0C	; 12
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	b6 01       	movw	r22, r12
    4224:	69 5e       	subi	r22, 0xE9	; 233
    4226:	7f 4f       	sbci	r23, 0xFF	; 255
    4228:	c5 01       	movw	r24, r10
    422a:	0e 94 8b 33 	call	0x6716	; 0x6716 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    422e:	d5 01       	movw	r26, r10
    4230:	1c 96       	adiw	r26, 0x0c	; 12
    4232:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    4234:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_utc_offset>
    4238:	41 95       	neg	r20
    423a:	6b e5       	ldi	r22, 0x5B	; 91
    423c:	75 e0       	ldi	r23, 0x05	; 5
    423e:	c5 01       	movw	r24, r10
    4240:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_Z18validateTimeStringPcPma>
    4244:	69 87       	std	Y+9, r22	; 0x09
    4246:	7a 87       	std	Y+10, r23	; 0x0a
    4248:	8b 87       	std	Y+11, r24	; 0x0b
    424a:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    424c:	67 2b       	or	r22, r23
    424e:	68 2b       	or	r22, r24
    4250:	69 2b       	or	r22, r25
    4252:	71 f1       	breq	.+92     	; 0x42b0 <_Z17handleLinkBusMsgsv+0x5da>
					{
						#if INCLUDE_RV3028_SUPPORT
							RTC_set_epoch(t);
						#else
							RTC_set_datetime(g_tempStr);
    4254:	c5 01       	movw	r24, r10
    4256:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z16RTC_set_datetimePc>
						#endif

						g_current_epoch = t;
    425a:	89 85       	ldd	r24, Y+9	; 0x09
    425c:	9a 85       	ldd	r25, Y+10	; 0x0a
    425e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4260:	bc 85       	ldd	r27, Y+12	; 0x0c
    4262:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_current_epoch>
    4266:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_current_epoch+0x1>
    426a:	a0 93 5d 05 	sts	0x055D, r26	; 0x80055d <g_current_epoch+0x2>
    426e:	b0 93 5e 05 	sts	0x055E, r27	; 0x80055e <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    4272:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    4276:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    427a:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    427e:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    4282:	bf 93       	push	r27
    4284:	af 93       	push	r26
    4286:	9f 93       	push	r25
    4288:	8f 93       	push	r24
    428a:	87 ed       	ldi	r24, 0xD7	; 215
    428c:	91 e0       	ldi	r25, 0x01	; 1
    428e:	9f 93       	push	r25
    4290:	8f 93       	push	r24
    4292:	bf 92       	push	r11
    4294:	af 92       	push	r10
    4296:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	4d c2       	rjmp	.+1178   	; 0x474a <_Z17handleLinkBusMsgsv+0xa74>
					}
					else
					{
						g_current_epoch = RTC_get_epoch();
    42b0:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    42b4:	60 93 5b 05 	sts	0x055B, r22	; 0x80055b <g_current_epoch>
    42b8:	70 93 5c 05 	sts	0x055C, r23	; 0x80055c <g_current_epoch+0x1>
    42bc:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_current_epoch+0x2>
    42c0:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <g_current_epoch+0x3>
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    42c4:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <g_event_start_epoch>
    42c8:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    42cc:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    42d0:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    42d4:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch>
    42d8:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x1>
    42dc:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_current_epoch+0x2>
    42e0:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_current_epoch+0x3>
    42e4:	e1 2c       	mov	r14, r1
    42e6:	f1 2c       	mov	r15, r1
    42e8:	0b e7       	ldi	r16, 0x7B	; 123
    42ea:	11 e0       	ldi	r17, 0x01	; 1
    42ec:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Epoch:%lu\n", g_current_epoch);
    42f0:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    42f4:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    42f8:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    42fc:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    4300:	bf 93       	push	r27
    4302:	af 93       	push	r26
    4304:	9f 93       	push	r25
    4306:	8f 93       	push	r24
    4308:	81 ee       	ldi	r24, 0xE1	; 225
    430a:	91 e0       	ldi	r25, 0x01	; 1
    430c:	9f 93       	push	r25
    430e:	8f 93       	push	r24
    4310:	bf 92       	push	r11
    4312:	af 92       	push	r10
    4314:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	13 c2       	rjmp	.+1062   	; 0x474a <_Z17handleLinkBusMsgsv+0xa74>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    4324:	83 35       	cpi	r24, 0x53	; 83
    4326:	09 f0       	breq	.+2      	; 0x432a <_Z17handleLinkBusMsgsv+0x654>
    4328:	96 c0       	rjmp	.+300    	; 0x4456 <_Z17handleLinkBusMsgsv+0x780>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    432a:	b6 01       	movw	r22, r12
    432c:	69 5e       	subi	r22, 0xE9	; 233
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	c5 01       	movw	r24, r10
    4332:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    4336:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_utc_offset>
    433a:	41 95       	neg	r20
    433c:	67 e5       	ldi	r22, 0x57	; 87
    433e:	75 e0       	ldi	r23, 0x05	; 5
    4340:	c5 01       	movw	r24, r10
    4342:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_Z18validateTimeStringPcPma>

					if(s)
    4346:	61 15       	cp	r22, r1
    4348:	71 05       	cpc	r23, r1
    434a:	81 05       	cpc	r24, r1
    434c:	91 05       	cpc	r25, r1
    434e:	09 f4       	brne	.+2      	; 0x4352 <_Z17handleLinkBusMsgsv+0x67c>
    4350:	68 c0       	rjmp	.+208    	; 0x4422 <_Z17handleLinkBusMsgsv+0x74c>
					{
						g_event_start_epoch = s;
    4352:	60 93 57 05 	sts	0x0557, r22	; 0x800557 <g_event_start_epoch>
    4356:	70 93 58 05 	sts	0x0558, r23	; 0x800558 <g_event_start_epoch+0x1>
    435a:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_event_start_epoch+0x2>
    435e:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    4362:	47 e5       	ldi	r20, 0x57	; 87
    4364:	55 e0       	ldi	r21, 0x05	; 5
    4366:	64 e1       	ldi	r22, 0x14	; 20
    4368:	8e e6       	ldi	r24, 0x6E	; 110
    436a:	95 e0       	ldi	r25, 0x05	; 5
    436c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    4370:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    4374:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    4378:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    437c:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	9e 83       	std	Y+6, r25	; 0x06
    4384:	af 83       	std	Y+7, r26	; 0x07
    4386:	b8 87       	std	Y+8, r27	; 0x08
    4388:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    438c:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    4390:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    4394:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    4398:	80 58       	subi	r24, 0x80	; 128
    439a:	9e 4a       	sbci	r25, 0xAE	; 174
    439c:	ae 4f       	sbci	r26, 0xFE	; 254
    439e:	bf 4f       	sbci	r27, 0xFF	; 255
    43a0:	89 83       	std	Y+1, r24	; 0x01
    43a2:	9a 83       	std	Y+2, r25	; 0x02
    43a4:	ab 83       	std	Y+3, r26	; 0x03
    43a6:	bc 83       	std	Y+4, r27	; 0x04
    43a8:	4d 81       	ldd	r20, Y+5	; 0x05
    43aa:	5e 81       	ldd	r21, Y+6	; 0x06
    43ac:	6f 81       	ldd	r22, Y+7	; 0x07
    43ae:	78 85       	ldd	r23, Y+8	; 0x08
    43b0:	48 17       	cp	r20, r24
    43b2:	59 07       	cpc	r21, r25
    43b4:	6a 07       	cpc	r22, r26
    43b6:	7b 07       	cpc	r23, r27
    43b8:	28 f4       	brcc	.+10     	; 0x43c4 <_Z17handleLinkBusMsgsv+0x6ee>
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	9a 81       	ldd	r25, Y+2	; 0x02
    43be:	ab 81       	ldd	r26, Y+3	; 0x03
    43c0:	bc 81       	ldd	r27, Y+4	; 0x04
    43c2:	04 c0       	rjmp	.+8      	; 0x43cc <_Z17handleLinkBusMsgsv+0x6f6>
    43c4:	8d 81       	ldd	r24, Y+5	; 0x05
    43c6:	9e 81       	ldd	r25, Y+6	; 0x06
    43c8:	af 81       	ldd	r26, Y+7	; 0x07
    43ca:	b8 85       	ldd	r27, Y+8	; 0x08
    43cc:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_event_finish_epoch>
    43d0:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_event_finish_epoch+0x1>
    43d4:	a0 93 55 05 	sts	0x0555, r26	; 0x800555 <g_event_finish_epoch+0x2>
    43d8:	b0 93 56 05 	sts	0x0556, r27	; 0x800556 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    43dc:	43 e5       	ldi	r20, 0x53	; 83
    43de:	55 e0       	ldi	r21, 0x05	; 5
    43e0:	65 e1       	ldi	r22, 0x15	; 21
    43e2:	8e e6       	ldi	r24, 0x6E	; 110
    43e4:	95 e0       	ldi	r25, 0x05	; 5
    43e6:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    43ea:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    43ee:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    43f2:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    43f6:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    43fa:	bf 93       	push	r27
    43fc:	af 93       	push	r26
    43fe:	9f 93       	push	r25
    4400:	8f 93       	push	r24
    4402:	8c ee       	ldi	r24, 0xEC	; 236
    4404:	91 e0       	ldi	r25, 0x01	; 1
    4406:	9f 93       	push	r25
    4408:	8f 93       	push	r24
    440a:	bf 92       	push	r11
    440c:	af 92       	push	r10
    440e:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
						startEventUsingRTC();
    4412:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Z18startEventUsingRTCv>
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	f8 94       	cli
    441a:	de bf       	out	0x3e, r29	; 62
    441c:	0f be       	out	0x3f, r0	; 63
    441e:	cd bf       	out	0x3d, r28	; 61
    4420:	94 c1       	rjmp	.+808    	; 0x474a <_Z17handleLinkBusMsgsv+0xa74>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    4422:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch>
    4426:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    442a:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    442e:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    4432:	bf 93       	push	r27
    4434:	af 93       	push	r26
    4436:	9f 93       	push	r25
    4438:	8f 93       	push	r24
    443a:	8c ee       	ldi	r24, 0xEC	; 236
    443c:	91 e0       	ldi	r25, 0x01	; 1
    443e:	9f 93       	push	r25
    4440:	8f 93       	push	r24
    4442:	bf 92       	push	r11
    4444:	af 92       	push	r10
    4446:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    444a:	0f b6       	in	r0, 0x3f	; 63
    444c:	f8 94       	cli
    444e:	de bf       	out	0x3e, r29	; 62
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	7a c1       	rjmp	.+756    	; 0x474a <_Z17handleLinkBusMsgsv+0xa74>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    4456:	86 34       	cpi	r24, 0x46	; 70
    4458:	09 f0       	breq	.+2      	; 0x445c <_Z17handleLinkBusMsgsv+0x786>
    445a:	5c c0       	rjmp	.+184    	; 0x4514 <_Z17handleLinkBusMsgsv+0x83e>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    445c:	b6 01       	movw	r22, r12
    445e:	69 5e       	subi	r22, 0xE9	; 233
    4460:	7f 4f       	sbci	r23, 0xFF	; 255
    4462:	c5 01       	movw	r24, r10
    4464:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4468:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_utc_offset>
    446c:	41 95       	neg	r20
    446e:	63 e5       	ldi	r22, 0x53	; 83
    4470:	75 e0       	ldi	r23, 0x05	; 5
    4472:	c5 01       	movw	r24, r10
    4474:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_Z18validateTimeStringPcPma>

					if(f)
    4478:	61 15       	cp	r22, r1
    447a:	71 05       	cpc	r23, r1
    447c:	81 05       	cpc	r24, r1
    447e:	91 05       	cpc	r25, r1
    4480:	79 f1       	breq	.+94     	; 0x44e0 <_Z17handleLinkBusMsgsv+0x80a>
					{
						g_event_finish_epoch = f;
    4482:	60 93 53 05 	sts	0x0553, r22	; 0x800553 <g_event_finish_epoch>
    4486:	70 93 54 05 	sts	0x0554, r23	; 0x800554 <g_event_finish_epoch+0x1>
    448a:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_event_finish_epoch+0x2>
    448e:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4492:	43 e5       	ldi	r20, 0x53	; 83
    4494:	55 e0       	ldi	r21, 0x05	; 5
    4496:	65 e1       	ldi	r22, 0x15	; 21
    4498:	8e e6       	ldi	r24, 0x6E	; 110
    449a:	95 e0       	ldi	r25, 0x05	; 5
    449c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    44a0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    44a4:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    44a8:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    44ac:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    44b0:	bf 93       	push	r27
    44b2:	af 93       	push	r26
    44b4:	9f 93       	push	r25
    44b6:	8f 93       	push	r24
    44b8:	87 ef       	ldi	r24, 0xF7	; 247
    44ba:	91 e0       	ldi	r25, 0x01	; 1
    44bc:	9f 93       	push	r25
    44be:	8f 93       	push	r24
    44c0:	bf 92       	push	r11
    44c2:	af 92       	push	r10
    44c4:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
						lb_send_string(g_tempStr, TRUE);
    44c8:	61 e0       	ldi	r22, 0x01	; 1
    44ca:	c5 01       	movw	r24, r10
    44cc:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
						startEventUsingRTC();
    44d0:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Z18startEventUsingRTCv>
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	12 c1       	rjmp	.+548    	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    44e0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_event_finish_epoch>
    44e4:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    44e8:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    44ec:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    44f0:	bf 93       	push	r27
    44f2:	af 93       	push	r26
    44f4:	9f 93       	push	r25
    44f6:	8f 93       	push	r24
    44f8:	87 ef       	ldi	r24, 0xF7	; 247
    44fa:	91 e0       	ldi	r25, 0x01	; 1
    44fc:	9f 93       	push	r25
    44fe:	8f 93       	push	r24
    4500:	bf 92       	push	r11
    4502:	af 92       	push	r10
    4504:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	1b c1       	rjmp	.+566    	; 0x474a <_Z17handleLinkBusMsgsv+0xa74>
					doprint = true;
				}
#endif // #if INCLUDE_RV3028_SUPPORT
				else
				{
					ConfigurationState_t cfg = clockConfigurationCheck();
    4514:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_Z23clockConfigurationCheckv>

					if((cfg != WAITING_FOR_START) && (cfg != EVENT_IN_PROGRESS))
    4518:	8b 7f       	andi	r24, 0xFB	; 251
    451a:	81 30       	cpi	r24, 0x01	; 1
    451c:	19 f0       	breq	.+6      	; 0x4524 <_Z17handleLinkBusMsgsv+0x84e>
					{
						reportConfigErrors();
    451e:	0e 94 a7 1a 	call	0x354e	; 0x354e <_Z18reportConfigErrorsv>
    4522:	f0 c0       	rjmp	.+480    	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    4524:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <g_event_start_epoch>
    4528:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    452c:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    4530:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    4534:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch>
    4538:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x1>
    453c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_current_epoch+0x2>
    4540:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_current_epoch+0x3>
    4544:	0f 2e       	mov	r0, r31
    4546:	fe e6       	ldi	r31, 0x6E	; 110
    4548:	ef 2e       	mov	r14, r31
    454a:	f1 e0       	ldi	r31, 0x01	; 1
    454c:	ff 2e       	mov	r15, r31
    454e:	f0 2d       	mov	r31, r0
    4550:	0b e7       	ldi	r16, 0x7B	; 123
    4552:	11 e0       	ldi	r17, 0x01	; 1
    4554:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    4558:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_event_finish_epoch>
    455c:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    4560:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    4564:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    4568:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch>
    456c:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    4570:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    4574:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    4578:	e1 2c       	mov	r14, r1
    457a:	f1 2c       	mov	r15, r1
    457c:	08 e9       	ldi	r16, 0x98	; 152
    457e:	11 e0       	ldi	r17, 0x01	; 1
    4580:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    4584:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch>
    4588:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x1>
    458c:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_event_start_epoch+0x2>
    4590:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_event_start_epoch+0x3>
    4594:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch>
    4598:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x1>
    459c:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_current_epoch+0x2>
    45a0:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_current_epoch+0x3>
    45a4:	48 17       	cp	r20, r24
    45a6:	59 07       	cpc	r21, r25
    45a8:	6a 07       	cpc	r22, r26
    45aa:	7b 07       	cpc	r23, r27
    45ac:	08 f0       	brcs	.+2      	; 0x45b0 <_Z17handleLinkBusMsgsv+0x8da>
    45ae:	aa c0       	rjmp	.+340    	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    45b0:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_event_finish_epoch>
    45b4:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <g_event_finish_epoch+0x1>
    45b8:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_finish_epoch+0x2>
    45bc:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_finish_epoch+0x3>
    45c0:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch>
    45c4:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x1>
    45c8:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_current_epoch+0x2>
    45cc:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_current_epoch+0x3>
    45d0:	07 e8       	ldi	r16, 0x87	; 135
    45d2:	11 e0       	ldi	r17, 0x01	; 1
    45d4:	0e 94 2f 1b 	call	0x365e	; 0x365e <_Z14reportTimeTillmmPKcS0_>
    45d8:	95 c0       	rjmp	.+298    	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    45da:	d6 01       	movw	r26, r12
    45dc:	13 96       	adiw	r26, 0x03	; 3
    45de:	8c 91       	ld	r24, X
    45e0:	13 97       	sbiw	r26, 0x03	; 3
    45e2:	83 34       	cpi	r24, 0x43	; 67
    45e4:	91 f5       	brne	.+100    	; 0x464a <_Z17handleLinkBusMsgsv+0x974>
				{
					if(lb_buff->fields[FIELD2][0])
    45e6:	57 96       	adiw	r26, 0x17	; 23
    45e8:	8c 91       	ld	r24, X
    45ea:	88 23       	and	r24, r24
    45ec:	a9 f0       	breq	.+42     	; 0x4618 <_Z17handleLinkBusMsgsv+0x942>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    45ee:	c6 01       	movw	r24, r12
    45f0:	47 96       	adiw	r24, 0x17	; 23
    45f2:	0e 94 2c 33 	call	0x6658	; 0x6658 <atoi>

						if((v > -2000) && (v < 2000))
    45f6:	9c 01       	movw	r18, r24
    45f8:	21 53       	subi	r18, 0x31	; 49
    45fa:	38 4f       	sbci	r19, 0xF8	; 248
    45fc:	2f 39       	cpi	r18, 0x9F	; 159
    45fe:	3f 40       	sbci	r19, 0x0F	; 15
    4600:	58 f4       	brcc	.+22     	; 0x4618 <_Z17handleLinkBusMsgsv+0x942>
						{
							g_atmega_temp_calibration = v;
    4602:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_atmega_temp_calibration+0x1>
    4606:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    460a:	4c e0       	ldi	r20, 0x0C	; 12
    460c:	51 e0       	ldi	r21, 0x01	; 1
    460e:	62 e1       	ldi	r22, 0x12	; 18
    4610:	8e e6       	ldi	r24, 0x6E	; 110
    4612:	95 e0       	ldi	r25, 0x05	; 5
    4614:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    4618:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_atmega_temp_calibration>
    461c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_atmega_temp_calibration+0x1>
    4620:	9f 93       	push	r25
    4622:	8f 93       	push	r24
    4624:	83 e0       	ldi	r24, 0x03	; 3
    4626:	92 e0       	ldi	r25, 0x02	; 2
    4628:	9f 93       	push	r25
    462a:	8f 93       	push	r24
    462c:	bf 92       	push	r11
    462e:	af 92       	push	r10
    4630:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
					lb_send_string(g_tempStr, TRUE);
    4634:	61 e0       	ldi	r22, 0x01	; 1
    4636:	c5 01       	movw	r24, r10
    4638:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	0f c0       	rjmp	.+30     	; 0x4668 <_Z17handleLinkBusMsgsv+0x992>
				}
#if !INIT_EEPROM_ONLY && !SUPPORT_ONLY_80M
					else if(lb_buff->fields[FIELD1][0] == 'Z')
    464a:	8a 35       	cpi	r24, 0x5A	; 90
    464c:	69 f4       	brne	.+26     	; 0x4668 <_Z17handleLinkBusMsgsv+0x992>
					{
						cli();
    464e:	f8 94       	cli
						g_AM_enabled = FALSE;
    4650:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_AM_enabled>
						TIMSK0 |= (1 << OCIE0A);    /* Timer/Counter0 Output Compare Match A Interrupt Enable (CW Tone Output for FM) */
    4654:	ee e6       	ldi	r30, 0x6E	; 110
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	80 81       	ld	r24, Z
    465a:	82 60       	ori	r24, 0x02	; 2
    465c:	80 83       	st	Z, r24
						setAtten(0);
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
						sei();
    4666:	78 94       	sei
					}
#endif /* INIT_EEPROM_ONLY */

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    4668:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <g_temperature>
    466c:	28 2f       	mov	r18, r24
    466e:	08 2e       	mov	r0, r24
    4670:	00 0c       	add	r0, r0
    4672:	33 0b       	sbc	r19, r19
    4674:	3f 93       	push	r19
    4676:	8f 93       	push	r24
    4678:	9f 92       	push	r9
    467a:	8f 92       	push	r8
    467c:	bf 92       	push	r11
    467e:	af 92       	push	r10
    4680:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4684:	61 e0       	ldi	r22, 0x01	; 1
    4686:	c5 01       	movw	r24, r10
    4688:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    468c:	40 91 11 05 	lds	r20, 0x0511	; 0x800511 <g_voltage>
    4690:	50 91 12 05 	lds	r21, 0x0512	; 0x800512 <g_voltage+0x1>
    4694:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <g_voltage>
    4698:	f0 91 12 05 	lds	r31, 0x0512	; 0x800512 <g_voltage+0x1>
    469c:	9a 01       	movw	r18, r20
    469e:	36 95       	lsr	r19
    46a0:	27 95       	ror	r18
    46a2:	36 95       	lsr	r19
    46a4:	27 95       	ror	r18
    46a6:	ab e7       	ldi	r26, 0x7B	; 123
    46a8:	b4 e1       	ldi	r27, 0x14	; 20
    46aa:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    46ae:	96 95       	lsr	r25
    46b0:	87 95       	ror	r24
    46b2:	64 e6       	ldi	r22, 0x64	; 100
    46b4:	68 9f       	mul	r22, r24
    46b6:	90 01       	movw	r18, r0
    46b8:	69 9f       	mul	r22, r25
    46ba:	30 0d       	add	r19, r0
    46bc:	11 24       	eor	r1, r1
    46be:	42 1b       	sub	r20, r18
    46c0:	53 0b       	sbc	r21, r19
    46c2:	5f 93       	push	r21
    46c4:	4f 93       	push	r20
    46c6:	9f 01       	movw	r18, r30
    46c8:	36 95       	lsr	r19
    46ca:	27 95       	ror	r18
    46cc:	36 95       	lsr	r19
    46ce:	27 95       	ror	r18
    46d0:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    46d4:	96 95       	lsr	r25
    46d6:	87 95       	ror	r24
    46d8:	9f 93       	push	r25
    46da:	8f 93       	push	r24
    46dc:	3f 92       	push	r3
    46de:	2f 92       	push	r2
    46e0:	bf 92       	push	r11
    46e2:	af 92       	push	r10
    46e4:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
				lb_send_string(g_tempStr, TRUE);
    46e8:	61 e0       	ldi	r22, 0x01	; 1
    46ea:	c5 01       	movw	r24, r10
    46ec:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    46f0:	0f b6       	in	r0, 0x3f	; 63
    46f2:	f8 94       	cli
    46f4:	de bf       	out	0x3e, r29	; 62
    46f6:	0f be       	out	0x3f, r0	; 63
    46f8:	cd bf       	out	0x3d, r28	; 61
    46fa:	04 c0       	rjmp	.+8      	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>

			default:
			{
				ee_mgr.send_Help();
    46fc:	8e e6       	ldi	r24, 0x6E	; 110
    46fe:	95 e0       	ldi	r25, 0x05	; 5
    4700:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    4704:	d6 01       	movw	r26, r12
    4706:	12 96       	adiw	r26, 0x02	; 2
    4708:	1c 92       	st	X, r1
    470a:	1e 92       	st	-X, r1
    470c:	11 97       	sbiw	r26, 0x01	; 1
		lb_send_NewPrompt();
    470e:	0e 94 a7 0c 	call	0x194e	; 0x194e <lb_send_NewPrompt>

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    4712:	8c e2       	ldi	r24, 0x2C	; 44
    4714:	91 e0       	ldi	r25, 0x01	; 1
    4716:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    471a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    471e:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;

	while((lb_buff = nextFullRxBuffer()))
    4722:	11 cb       	rjmp	.-2526   	; 0x3d46 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	b3 cb       	rjmp	.-2202   	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    4728:	86 e0       	ldi	r24, 0x06	; 6
    472a:	b1 cb       	rjmp	.-2206   	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
						{
							c = x;
						}
						else
						{
							c = BEACON;
    472c:	80 e0       	ldi	r24, 0x00	; 0
    472e:	af cb       	rjmp	.-2210   	; 0x3e8e <_Z17handleLinkBusMsgsv+0x1b8>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    4730:	b5 01       	movw	r22, r10
    4732:	84 e1       	ldi	r24, 0x14	; 20
    4734:	95 e0       	ldi	r25, 0x05	; 5
    4736:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    473a:	44 e1       	ldi	r20, 0x14	; 20
    473c:	55 e0       	ldi	r21, 0x05	; 5
    473e:	6e e0       	ldi	r22, 0x0E	; 14
    4740:	8e e6       	ldi	r24, 0x6E	; 110
    4742:	95 e0       	ldi	r25, 0x05	; 5
    4744:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    4748:	4e cd       	rjmp	.-1380   	; 0x41e6 <_Z17handleLinkBusMsgsv+0x510>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    474a:	61 e0       	ldi	r22, 0x01	; 1
    474c:	c5 01       	movw	r24, r10
    474e:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    4752:	d8 cf       	rjmp	.-80     	; 0x4704 <_Z17handleLinkBusMsgsv+0xa2e>
		lb_send_NewPrompt();

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
	}
}
    4754:	2c 96       	adiw	r28, 0x0c	; 12
    4756:	0f b6       	in	r0, 0x3f	; 63
    4758:	f8 94       	cli
    475a:	de bf       	out	0x3e, r29	; 62
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	1f 91       	pop	r17
    4766:	0f 91       	pop	r16
    4768:	ff 90       	pop	r15
    476a:	ef 90       	pop	r14
    476c:	df 90       	pop	r13
    476e:	cf 90       	pop	r12
    4770:	bf 90       	pop	r11
    4772:	af 90       	pop	r10
    4774:	9f 90       	pop	r9
    4776:	8f 90       	pop	r8
    4778:	7f 90       	pop	r7
    477a:	6f 90       	pop	r6
    477c:	5f 90       	pop	r5
    477e:	4f 90       	pop	r4
    4780:	3f 90       	pop	r3
    4782:	2f 90       	pop	r2
    4784:	08 95       	ret

00004786 <_Z11value2Morsec>:

char value2Morse(char value)
{
	char morse = ' ';

	if(value == 0x7F)
    4786:	8f 37       	cpi	r24, 0x7F	; 127
    4788:	91 f0       	breq	.+36     	; 0x47ae <_Z11value2Morsec+0x28>
	{
		return( 39);    /* Return the maximum value that will be accepted + 1 */

	}

	if((value >= 1) && (value <= 26))
    478a:	9f ef       	ldi	r25, 0xFF	; 255
    478c:	98 0f       	add	r25, r24
    478e:	9a 31       	cpi	r25, 0x1A	; 26
    4790:	10 f4       	brcc	.+4      	; 0x4796 <_Z11value2Morsec+0x10>
	{
		morse = 'A' + value - 1;
    4792:	80 5c       	subi	r24, 0xC0	; 192
    4794:	08 95       	ret
	}
	else if((value >= 29) && (value <= 38))
    4796:	93 ee       	ldi	r25, 0xE3	; 227
    4798:	98 0f       	add	r25, r24
    479a:	9a 30       	cpi	r25, 0x0A	; 10
    479c:	10 f4       	brcc	.+4      	; 0x47a2 <_Z11value2Morsec+0x1c>
	{
		morse = '0' + value - 29;
    479e:	8d 5e       	subi	r24, 0xED	; 237
    47a0:	08 95       	ret
	}
	else if(value == 27)
    47a2:	8b 31       	cpi	r24, 0x1B	; 27
    47a4:	31 f0       	breq	.+12     	; 0x47b2 <_Z11value2Morsec+0x2c>
	{
		morse = '<';
	}
	else if(value == 28)
    47a6:	8c 31       	cpi	r24, 0x1C	; 28
    47a8:	31 f4       	brne	.+12     	; 0x47b6 <_Z11value2Morsec+0x30>
	{
		morse = '/';
    47aa:	8f e2       	ldi	r24, 0x2F	; 47
    47ac:	08 95       	ret
{
	char morse = ' ';

	if(value == 0x7F)
	{
		return( 39);    /* Return the maximum value that will be accepted + 1 */
    47ae:	87 e2       	ldi	r24, 0x27	; 39
    47b0:	08 95       	ret
	{
		morse = '0' + value - 29;
	}
	else if(value == 27)
	{
		morse = '<';
    47b2:	8c e3       	ldi	r24, 0x3C	; 60
    47b4:	08 95       	ret
}


char value2Morse(char value)
{
	char morse = ' ';
    47b6:	80 e2       	ldi	r24, 0x20	; 32
	{
		morse = '/';
	}

	return( morse);
}
    47b8:	08 95       	ret

000047ba <_Z20processDTMFdetection10DTMF_key_t>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	BOOL processDTMFdetection(DTMF_key_t key)
	{
    47ba:	cf 92       	push	r12
    47bc:	df 92       	push	r13
    47be:	ef 92       	push	r14
    47c0:	ff 92       	push	r15
    47c2:	0f 93       	push	r16
    47c4:	1f 93       	push	r17
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	1f 92       	push	r1
    47cc:	cd b7       	in	r28, 0x3d	; 61
    47ce:	de b7       	in	r29, 0x3e	; 62
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;

		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    47d0:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>

		if(key == 'D')
    47d4:	84 34       	cpi	r24, 0x44	; 68
    47d6:	31 f4       	brne	.+12     	; 0x47e4 <_Z20processDTMFdetection10DTMF_key_t+0x2a>
		{
			g_DTMF_unlocked = FALSE;
    47d8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    47dc:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
			return(entryError);
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	29 c4       	rjmp	.+2130   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
		}

		if(key == NO_KEY)
    47e4:	81 11       	cpse	r24, r1
    47e6:	21 c0       	rjmp	.+66     	; 0x482a <_Z20processDTMFdetection10DTMF_key_t+0x70>
		{
			if(!g_DTMF_sentence_in_progress_ticks)
    47e8:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    47ec:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    47f0:	89 2b       	or	r24, r25
    47f2:	89 f4       	brne	.+34     	; 0x4816 <_Z20processDTMFdetection10DTMF_key_t+0x5c>
			{
				if((last_in_progress_ticks) && (state != STATE_SHUTDOWN))
    47f4:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks>
    47f8:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks+0x1>
    47fc:	89 2b       	or	r24, r25
    47fe:	39 f0       	breq	.+14     	; 0x480e <_Z20processDTMFdetection10DTMF_key_t+0x54>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4806:	91 11       	cpse	r25, r1
    4808:	03 c0       	rjmp	.+6      	; 0x4810 <_Z20processDTMFdetection10DTMF_key_t+0x56>
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <_Z20processDTMFdetection10DTMF_key_t+0x56>
    480e:	80 e0       	ldi	r24, 0x00	; 0
				if((last_in_progress_ticks) && (state != STATE_SHUTDOWN))
				{
					entryError = TRUE;
				}

				state = STATE_SHUTDOWN;
    4810:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4814:	01 c0       	rjmp	.+2      	; 0x4818 <_Z20processDTMFdetection10DTMF_key_t+0x5e>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4816:	80 e0       	ldi	r24, 0x00	; 0
				}

				state = STATE_SHUTDOWN;
			}

			last_in_progress_ticks = g_DTMF_sentence_in_progress_ticks;
    4818:	20 91 d1 04 	lds	r18, 0x04D1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    481c:	30 91 d2 04 	lds	r19, 0x04D2	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4820:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks+0x1>
    4824:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks>

			return(entryError);
    4828:	06 c4       	rjmp	.+2060   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
		}

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    482a:	2c e2       	ldi	r18, 0x2C	; 44
    482c:	31 e0       	ldi	r19, 0x01	; 1
    482e:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <g_LED_timeout_countdown+0x1>
    4832:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <g_LED_timeout_countdown>

		if(!g_DTMF_unlocked)
    4836:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_DTMF_unlocked>
    483a:	91 11       	cpse	r25, r1
    483c:	04 c0       	rjmp	.+8      	; 0x4846 <_Z20processDTMFdetection10DTMF_key_t+0x8c>
		{
			state = STATE_CHECK_PASSWORD;
    483e:	93 e1       	ldi	r25, 0x13	; 19
    4840:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4844:	49 c3       	rjmp	.+1682   	; 0x4ed8 <_Z20processDTMFdetection10DTMF_key_t+0x71e>
		}
		else
		{
			if(key == '*')
    4846:	8a 32       	cpi	r24, 0x2A	; 42
    4848:	59 f4       	brne	.+22     	; 0x4860 <_Z20processDTMFdetection10DTMF_key_t+0xa6>
			{
				state = STATE_SENTENCE_START;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
    4850:	88 ec       	ldi	r24, 0xC8	; 200
    4852:	97 e3       	ldi	r25, 0x37	; 55
    4854:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4858:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
				return(entryError);
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	eb c3       	rjmp	.+2006   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4860:	98 2f       	mov	r25, r24
			}

			if(key == '#')
    4862:	83 32       	cpi	r24, 0x23	; 35
    4864:	89 f4       	brne	.+34     	; 0x4888 <_Z20processDTMFdetection10DTMF_key_t+0xce>
			{
				g_DTMF_sentence_in_progress_ticks = 0;
    4866:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    486a:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
			}
		}

		switch(state)
    486e:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4872:	4e 2f       	mov	r20, r30
    4874:	50 e0       	ldi	r21, 0x00	; 0
    4876:	45 31       	cpi	r20, 0x15	; 21
    4878:	51 05       	cpc	r21, r1
    487a:	08 f0       	brcs	.+2      	; 0x487e <_Z20processDTMFdetection10DTMF_key_t+0xc4>
    487c:	a4 c3       	rjmp	.+1864   	; 0x4fc6 <_Z20processDTMFdetection10DTMF_key_t+0x80c>
    487e:	fa 01       	movw	r30, r20
    4880:	ea 56       	subi	r30, 0x6A	; 106
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>

			if(key == '#')
			{
				g_DTMF_sentence_in_progress_ticks = 0;
			}
			else if(state != STATE_SHUTDOWN)
    4888:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    488c:	ee 23       	and	r30, r30
    488e:	89 f0       	breq	.+34     	; 0x48b2 <_Z20processDTMFdetection10DTMF_key_t+0xf8>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
    4890:	28 ec       	ldi	r18, 0xC8	; 200
    4892:	37 e3       	ldi	r19, 0x37	; 55
    4894:	30 93 d2 04 	sts	0x04D2, r19	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4898:	20 93 d1 04 	sts	0x04D1, r18	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
			}
		}

		switch(state)
    489c:	4e 2f       	mov	r20, r30
    489e:	50 e0       	ldi	r21, 0x00	; 0
    48a0:	45 31       	cpi	r20, 0x15	; 21
    48a2:	51 05       	cpc	r21, r1
    48a4:	08 f0       	brcs	.+2      	; 0x48a8 <_Z20processDTMFdetection10DTMF_key_t+0xee>
    48a6:	91 c3       	rjmp	.+1826   	; 0x4fca <_Z20processDTMFdetection10DTMF_key_t+0x810>
    48a8:	fa 01       	movw	r30, r20
    48aa:	e5 55       	subi	r30, 0x55	; 85
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>
		{
			case STATE_SHUTDOWN:
			{
				entryError = TRUE;
    48b2:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
    48b4:	c0 c3       	rjmp	.+1920   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    48b6:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    48ba:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
				value = 0;
    48be:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    48c2:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
				digits = 0;
    48c6:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    48ca:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>

				if(g_DTMF_unlocked)
    48ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_DTMF_unlocked>
    48d2:	88 23       	and	r24, r24
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <_Z20processDTMFdetection10DTMF_key_t+0x11e>
    48d6:	7b c3       	rjmp	.+1782   	; 0x4fce <_Z20processDTMFdetection10DTMF_key_t+0x814>
				{
					if(key == 'A')
    48d8:	91 34       	cpi	r25, 0x41	; 65
    48da:	29 f4       	brne	.+10     	; 0x48e6 <_Z20processDTMFdetection10DTMF_key_t+0x12c>
					{
						state = STATE_A;
    48dc:	82 e0       	ldi	r24, 0x02	; 2
    48de:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	a8 c3       	rjmp	.+1872   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				{
					if(key == 'A')
					{
						state = STATE_A;
					}
					else if(key == 'B')
    48e6:	92 34       	cpi	r25, 0x42	; 66
    48e8:	29 f4       	brne	.+10     	; 0x48f4 <_Z20processDTMFdetection10DTMF_key_t+0x13a>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    48ea:	84 e1       	ldi	r24, 0x14	; 20
    48ec:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	a1 c3       	rjmp	.+1858   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					}
					else if(key == 'B')
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
					}
					else if(key == 'C')
    48f4:	93 34       	cpi	r25, 0x43	; 67
    48f6:	29 f4       	brne	.+10     	; 0x4902 <_Z20processDTMFdetection10DTMF_key_t+0x148>
					{
						state = STATE_C;
    48f8:	87 e0       	ldi	r24, 0x07	; 7
    48fa:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	9a c3       	rjmp	.+1844   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
						state = STATE_C;
					}
					else
					{
						entryError = TRUE;
						g_DTMF_sentence_in_progress_ticks = 0;
    4902:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4906:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
						state = STATE_SHUTDOWN;
    490a:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					{
						state = STATE_C;
					}
					else
					{
						entryError = TRUE;
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	92 c3       	rjmp	.+1828   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_A:
			{
				if(key == '0')
    4912:	80 33       	cpi	r24, 0x30	; 48
    4914:	29 f4       	brne	.+10     	; 0x4920 <_Z20processDTMFdetection10DTMF_key_t+0x166>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    4916:	83 e0       	ldi	r24, 0x03	; 3
    4918:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	8b c3       	rjmp	.+1814   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			{
				if(key == '0')
				{
					state = STATE_PAUSE_TRANSMISSIONS;
				}
				else if(key == '1')
    4920:	81 33       	cpi	r24, 0x31	; 49
    4922:	29 f4       	brne	.+10     	; 0x492e <_Z20processDTMFdetection10DTMF_key_t+0x174>
				{
					state = STATE_START_TRANSMISSIONS;
    4924:	84 e0       	ldi	r24, 0x04	; 4
    4926:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	84 c3       	rjmp	.+1800   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '1')
				{
					state = STATE_START_TRANSMISSIONS;
				}
				else if(key == '2')
    492e:	82 33       	cpi	r24, 0x32	; 50
    4930:	29 f4       	brne	.+10     	; 0x493c <_Z20processDTMFdetection10DTMF_key_t+0x182>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    4932:	85 e0       	ldi	r24, 0x05	; 5
    4934:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	7d c3       	rjmp	.+1786   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '2')
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
				}
				else if(key == '3')
    493c:	83 33       	cpi	r24, 0x33	; 51
    493e:	29 f4       	brne	.+10     	; 0x494a <_Z20processDTMFdetection10DTMF_key_t+0x190>
				{
					state = STATE_START_TRANSMITTING_NOW;
    4940:	86 e0       	ldi	r24, 0x06	; 6
    4942:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	76 c3       	rjmp	.+1772   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '3')
				{
					state = STATE_START_TRANSMITTING_NOW;
				}
				else if((key == '8') && setPasswordEnabled)
    494a:	88 33       	cpi	r24, 0x38	; 56
    494c:	49 f4       	brne	.+18     	; 0x4960 <_Z20processDTMFdetection10DTMF_key_t+0x1a6>
    494e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE18setPasswordEnabled>
    4952:	88 23       	and	r24, r24
    4954:	29 f0       	breq	.+10     	; 0x4960 <_Z20processDTMFdetection10DTMF_key_t+0x1a6>
				{
					state = STATE_SET_PASSWORD;
    4956:	82 e1       	ldi	r24, 0x12	; 18
    4958:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    495c:	80 e0       	ldi	r24, 0x00	; 0
				{
					state = STATE_START_TRANSMITTING_NOW;
				}
				else if((key == '8') && setPasswordEnabled)
				{
					state = STATE_SET_PASSWORD;
    495e:	6b c3       	rjmp	.+1750   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else
				{
					entryError = TRUE;
					g_DTMF_sentence_in_progress_ticks = 0;
    4960:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4964:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
					state = STATE_SHUTDOWN;
    4968:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				{
					state = STATE_SET_PASSWORD;
				}
				else
				{
					entryError = TRUE;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	63 c3       	rjmp	.+1734   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    4970:	80 ed       	ldi	r24, 0xD0	; 208
    4972:	89 0f       	add	r24, r25
    4974:	8a 30       	cpi	r24, 0x0A	; 10
    4976:	08 f5       	brcc	.+66     	; 0x49ba <_Z20processDTMFdetection10DTMF_key_t+0x200>
				{
					value *= 10;
					value += key - '0';
    4978:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    497c:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4980:	a9 01       	movw	r20, r18
    4982:	44 0f       	add	r20, r20
    4984:	55 1f       	adc	r21, r21
    4986:	22 0f       	add	r18, r18
    4988:	33 1f       	adc	r19, r19
    498a:	22 0f       	add	r18, r18
    498c:	33 1f       	adc	r19, r19
    498e:	22 0f       	add	r18, r18
    4990:	33 1f       	adc	r19, r19
    4992:	24 0f       	add	r18, r20
    4994:	35 1f       	adc	r19, r21
    4996:	89 2f       	mov	r24, r25
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	c0 97       	sbiw	r24, 0x30	; 48
    499c:	28 0f       	add	r18, r24
    499e:	39 1f       	adc	r19, r25
    49a0:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    49a4:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
					digits++;
    49a8:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    49ac:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    49b0:	01 96       	adiw	r24, 0x01	; 1
    49b2:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    49b6:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
				}

				if(digits >= 2)
    49ba:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    49be:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    49c2:	02 97       	sbiw	r24, 0x02	; 2
    49c4:	0c f4       	brge	.+2      	; 0x49c8 <_Z20processDTMFdetection10DTMF_key_t+0x20e>
    49c6:	05 c3       	rjmp	.+1546   	; 0x4fd2 <_Z20processDTMFdetection10DTMF_key_t+0x818>
				{
					state = STATE_SHUTDOWN;
    49c8:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    49cc:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    49d0:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    49d4:	98 13       	cpse	r25, r24
    49d6:	ff c2       	rjmp	.+1534   	; 0x4fd6 <_Z20processDTMFdetection10DTMF_key_t+0x81c>
					{
						state = STATE_SENTENCE_START;
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	2a c3       	rjmp	.+1620   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
				{
					stopEventNow(PROGRAMMATIC);
    49e2:	82 e0       	ldi	r24, 0x02	; 2
    49e4:	0e 94 19 1a 	call	0x3432	; 0x3432 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    49e8:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49ec:	80 e0       	ldi	r24, 0x00	; 0
    49ee:	23 c3       	rjmp	.+1606   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    49f0:	93 32       	cpi	r25, 0x23	; 35
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <_Z20processDTMFdetection10DTMF_key_t+0x23c>
    49f4:	f2 c2       	rjmp	.+1508   	; 0x4fda <_Z20processDTMFdetection10DTMF_key_t+0x820>
				{
					startEventNow(PROGRAMMATIC);
    49f6:	82 e0       	ldi	r24, 0x02	; 2
    49f8:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    49fc:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	19 c3       	rjmp	.+1586   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    4a04:	93 32       	cpi	r25, 0x23	; 35
    4a06:	09 f0       	breq	.+2      	; 0x4a0a <_Z20processDTMFdetection10DTMF_key_t+0x250>
    4a08:	ea c2       	rjmp	.+1492   	; 0x4fde <_Z20processDTMFdetection10DTMF_key_t+0x824>
				{
					startEventUsingRTC();
    4a0a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    4a0e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	10 c3       	rjmp	.+1568   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    4a16:	93 32       	cpi	r25, 0x23	; 35
    4a18:	09 f0       	breq	.+2      	; 0x4a1c <_Z20processDTMFdetection10DTMF_key_t+0x262>
    4a1a:	e3 c2       	rjmp	.+1478   	; 0x4fe2 <_Z20processDTMFdetection10DTMF_key_t+0x828>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    4a1c:	62 e0       	ldi	r22, 0x02	; 2
    4a1e:	80 e0       	ldi	r24, 0x00	; 0
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    4a26:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	04 c3       	rjmp	.+1544   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    4a2e:	91 33       	cpi	r25, 0x31	; 49
    4a30:	29 f4       	brne	.+10     	; 0x4a3c <_Z20processDTMFdetection10DTMF_key_t+0x282>
				{
					state = STATE_RECEIVING_CALLSIGN;
    4a32:	88 e0       	ldi	r24, 0x08	; 8
    4a34:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	fd c2       	rjmp	.+1530   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			{
				if(key == '1')
				{
					state = STATE_RECEIVING_CALLSIGN;
				}
				else if(key == '2')
    4a3c:	92 33       	cpi	r25, 0x32	; 50
    4a3e:	29 f4       	brne	.+10     	; 0x4a4a <_Z20processDTMFdetection10DTMF_key_t+0x290>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    4a40:	89 e0       	ldi	r24, 0x09	; 9
    4a42:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	f6 c2       	rjmp	.+1516   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '2')
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    4a4a:	93 33       	cpi	r25, 0x33	; 51
    4a4c:	29 f4       	brne	.+10     	; 0x4a58 <_Z20processDTMFdetection10DTMF_key_t+0x29e>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    4a4e:	8d e0       	ldi	r24, 0x0D	; 13
    4a50:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	ef c2       	rjmp	.+1502   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
				{
					state = STATE_RECEIVING_SET_CLOCK;
				}
				else if(key == '4')
    4a58:	94 33       	cpi	r25, 0x34	; 52
    4a5a:	29 f4       	brne	.+10     	; 0x4a66 <_Z20processDTMFdetection10DTMF_key_t+0x2ac>
				{
					state = STATE_RECEIVING_START_TIME;
    4a5c:	8a e0       	ldi	r24, 0x0A	; 10
    4a5e:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	e8 c2       	rjmp	.+1488   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '4')
				{
					state = STATE_RECEIVING_START_TIME;
				}
				else if(key == '5')
    4a66:	95 33       	cpi	r25, 0x35	; 53
    4a68:	29 f4       	brne	.+10     	; 0x4a74 <_Z20processDTMFdetection10DTMF_key_t+0x2ba>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    4a6a:	8b e0       	ldi	r24, 0x0B	; 11
    4a6c:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	e1 c2       	rjmp	.+1474   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					state = STATE_RECEIVING_UTC_OFFSET;
					digits = 1;
				}
#endif // #if INCLUDE_RV3028_SUPPORT
#if !SUPPORT_ONLY_80M
					else if(key == '9')
    4a74:	99 33       	cpi	r25, 0x39	; 57
    4a76:	29 f4       	brne	.+10     	; 0x4a82 <_Z20processDTMFdetection10DTMF_key_t+0x2c8>
					{
						state = STATE_SET_AM_TONE_FREQUENCY;
    4a78:	8e e0       	ldi	r24, 0x0E	; 14
    4a7a:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	da c2       	rjmp	.+1460   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					else if(key == '9')
					{
						state = STATE_SET_AM_TONE_FREQUENCY;
					}
#endif  /* !SUPPORT_ONLY_80M */
				else if(key == 'A')
    4a82:	91 34       	cpi	r25, 0x41	; 65
    4a84:	29 f4       	brne	.+10     	; 0x4a90 <_Z20processDTMFdetection10DTMF_key_t+0x2d6>
				{
					state = STATE_SET_PTT_PERIODIC_RESET;
    4a86:	80 e1       	ldi	r24, 0x10	; 16
    4a88:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a8c:	80 e0       	ldi	r24, 0x00	; 0
    4a8e:	d3 c2       	rjmp	.+1446   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
#endif  /* !SUPPORT_ONLY_80M */
				else if(key == 'A')
				{
					state = STATE_SET_PTT_PERIODIC_RESET;
				}
				else if(key == 'B')
    4a90:	92 34       	cpi	r25, 0x42	; 66
    4a92:	29 f4       	brne	.+10     	; 0x4a9e <_Z20processDTMFdetection10DTMF_key_t+0x2e4>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
    4a94:	81 e1       	ldi	r24, 0x11	; 17
    4a96:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	cc c2       	rjmp	.+1432   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					state = STATE_GET_BATTERY_VOLTAGE;
				}
				else
				{
					entryError = TRUE;
					g_DTMF_sentence_in_progress_ticks = 0;
    4a9e:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4aa2:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
					state = STATE_SHUTDOWN;
    4aa6:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
				}
				else
				{
					entryError = TRUE;
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	c4 c2       	rjmp	.+1416   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    4aae:	93 32       	cpi	r25, 0x23	; 35
    4ab0:	c9 f4       	brne	.+50     	; 0x4ae4 <_Z20processDTMFdetection10DTMF_key_t+0x32a>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    4ab2:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4ab6:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4aba:	04 97       	sbiw	r24, 0x04	; 4
    4abc:	7c f0       	brlt	.+30     	; 0x4adc <_Z20processDTMFdetection10DTMF_key_t+0x322>
					{
						strcpy((char*)g_unlockCode, receivedString);
    4abe:	65 e2       	ldi	r22, 0x25	; 37
    4ac0:	74 e0       	ldi	r23, 0x04	; 4
    4ac2:	84 e1       	ldi	r24, 0x14	; 20
    4ac4:	95 e0       	ldi	r25, 0x05	; 5
    4ac6:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    4aca:	44 e1       	ldi	r20, 0x14	; 20
    4acc:	55 e0       	ldi	r21, 0x05	; 5
    4ace:	6e e0       	ldi	r22, 0x0E	; 14
    4ad0:	8e e6       	ldi	r24, 0x6E	; 110
    4ad2:	95 e0       	ldi	r25, 0x05	; 5
    4ad4:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	01 c0       	rjmp	.+2      	; 0x4ade <_Z20processDTMFdetection10DTMF_key_t+0x324>
						strcpy((char*)g_unlockCode, receivedString);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
					else
					{
						entryError = TRUE;
    4adc:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4ade:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4ae2:	a9 c2       	rjmp	.+1362   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4ae4:	80 ed       	ldi	r24, 0xD0	; 208
    4ae6:	89 0f       	add	r24, r25
    4ae8:	8a 30       	cpi	r24, 0x0A	; 10
    4aea:	c8 f4       	brcc	.+50     	; 0x4b1e <_Z20processDTMFdetection10DTMF_key_t+0x364>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    4aec:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4af0:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4af4:	29 30       	cpi	r18, 0x09	; 9
    4af6:	31 05       	cpc	r19, r1
    4af8:	0c f0       	brlt	.+2      	; 0x4afc <_Z20processDTMFdetection10DTMF_key_t+0x342>
    4afa:	75 c2       	rjmp	.+1258   	; 0x4fe6 <_Z20processDTMFdetection10DTMF_key_t+0x82c>
					{
						receivedString[stringLength++] = key;
    4afc:	a9 01       	movw	r20, r18
    4afe:	4f 5f       	subi	r20, 0xFF	; 255
    4b00:	5f 4f       	sbci	r21, 0xFF	; 255
    4b02:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4b06:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4b0a:	f9 01       	movw	r30, r18
    4b0c:	eb 5d       	subi	r30, 0xDB	; 219
    4b0e:	fb 4f       	sbci	r31, 0xFB	; 251
    4b10:	90 83       	st	Z, r25
						receivedString[stringLength] = '\0';
    4b12:	fa 01       	movw	r30, r20
    4b14:	eb 5d       	subi	r30, 0xDB	; 219
    4b16:	fb 4f       	sbci	r31, 0xFB	; 251
    4b18:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	8c c2       	rjmp	.+1304   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					}
				}
				else
				{
					entryError = TRUE;
					state = STATE_SHUTDOWN;
    4b1e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
						receivedString[stringLength] = '\0';
					}
				}
				else
				{
					entryError = TRUE;
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	88 c2       	rjmp	.+1296   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    4b26:	93 32       	cpi	r25, 0x23	; 35
    4b28:	e9 f4       	brne	.+58     	; 0x4b64 <_Z20processDTMFdetection10DTMF_key_t+0x3aa>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    4b2a:	e5 e2       	ldi	r30, 0x25	; 37
    4b2c:	f4 e0       	ldi	r31, 0x04	; 4
    4b2e:	01 90       	ld	r0, Z+
    4b30:	00 20       	and	r0, r0
    4b32:	e9 f7       	brne	.-6      	; 0x4b2e <_Z20processDTMFdetection10DTMF_key_t+0x374>
    4b34:	31 97       	sbiw	r30, 0x01	; 1
    4b36:	e5 52       	subi	r30, 0x25	; 37
    4b38:	f4 40       	sbci	r31, 0x04	; 4
    4b3a:	75 97       	sbiw	r30, 0x15	; 21
    4b3c:	78 f4       	brcc	.+30     	; 0x4b5c <_Z20processDTMFdetection10DTMF_key_t+0x3a2>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    4b3e:	65 e2       	ldi	r22, 0x25	; 37
    4b40:	74 e0       	ldi	r23, 0x04	; 4
    4b42:	87 ef       	ldi	r24, 0xF7	; 247
    4b44:	94 e0       	ldi	r25, 0x04	; 4
    4b46:	0e 94 84 33 	call	0x6708	; 0x6708 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    4b4a:	47 ef       	ldi	r20, 0xF7	; 247
    4b4c:	54 e0       	ldi	r21, 0x04	; 4
    4b4e:	6b e0       	ldi	r22, 0x0B	; 11
    4b50:	8e e6       	ldi	r24, 0x6E	; 110
    4b52:	95 e0       	ldi	r25, 0x05	; 5
    4b54:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	01 c0       	rjmp	.+2      	; 0x4b5e <_Z20processDTMFdetection10DTMF_key_t+0x3a4>
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
					}
					else
					{
						entryError = TRUE;
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4b5e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4b62:	69 c2       	rjmp	.+1234   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4b64:	80 ed       	ldi	r24, 0xD0	; 208
    4b66:	89 0f       	add	r24, r25
    4b68:	8a 30       	cpi	r24, 0x0A	; 10
    4b6a:	08 f0       	brcs	.+2      	; 0x4b6e <_Z20processDTMFdetection10DTMF_key_t+0x3b4>
    4b6c:	43 c0       	rjmp	.+134    	; 0x4bf4 <_Z20processDTMFdetection10DTMF_key_t+0x43a>
				{
					if(digits)
    4b6e:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4b72:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4b76:	23 2b       	or	r18, r19
    4b78:	71 f1       	breq	.+92     	; 0x4bd6 <_Z20processDTMFdetection10DTMF_key_t+0x41c>
					{
						value = value * 10 + (key - '0');
    4b7a:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4b7e:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4b82:	89 01       	movw	r16, r18
    4b84:	00 0f       	add	r16, r16
    4b86:	11 1f       	adc	r17, r17
    4b88:	22 0f       	add	r18, r18
    4b8a:	33 1f       	adc	r19, r19
    4b8c:	22 0f       	add	r18, r18
    4b8e:	33 1f       	adc	r19, r19
    4b90:	22 0f       	add	r18, r18
    4b92:	33 1f       	adc	r19, r19
    4b94:	02 0f       	add	r16, r18
    4b96:	13 1f       	adc	r17, r19
    4b98:	89 2f       	mov	r24, r25
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	c0 97       	sbiw	r24, 0x30	; 48
    4b9e:	08 0f       	add	r16, r24
    4ba0:	19 1f       	adc	r17, r25
    4ba2:	10 93 3e 04 	sts	0x043E, r17	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4ba6:	00 93 3d 04 	sts	0x043D, r16	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
						if((value < value2Morse(0x7F)) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    4baa:	8f e7       	ldi	r24, 0x7F	; 127
    4bac:	0e 94 c3 23 	call	0x4786	; 0x4786 <_Z11value2Morsec>
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	08 17       	cp	r16, r24
    4bb4:	19 07       	cpc	r17, r25
    4bb6:	4c f4       	brge	.+18     	; 0x4bca <_Z20processDTMFdetection10DTMF_key_t+0x410>
    4bb8:	e0 90 3f 04 	lds	r14, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4bbc:	f0 90 40 04 	lds	r15, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4bc0:	24 e1       	ldi	r18, 0x14	; 20
    4bc2:	e2 16       	cp	r14, r18
    4bc4:	f1 04       	cpc	r15, r1
    4bc6:	0c f4       	brge	.+2      	; 0x4bca <_Z20processDTMFdetection10DTMF_key_t+0x410>
    4bc8:	24 c2       	rjmp	.+1096   	; 0x5012 <_Z20processDTMFdetection10DTMF_key_t+0x858>
							receivedString[stringLength] = value2Morse(value);
							stringLength++;
							receivedString[stringLength] = '\0';
						}

						digits = 0;
    4bca:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4bce:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4bd2:	80 e0       	ldi	r24, 0x00	; 0
    4bd4:	30 c2       	rjmp	.+1120   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

						digits = 0;
					}
					else
					{
						value = key - '0';
    4bd6:	89 2f       	mov	r24, r25
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	c0 97       	sbiw	r24, 0x30	; 48
    4bdc:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4be0:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
						digits = 1;
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4bec:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	21 c2       	rjmp	.+1090   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					}
				}
				else
				{
					entryError = TRUE;
					state = STATE_SHUTDOWN;
    4bf4:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
						digits = 1;
					}
				}
				else
				{
					entryError = TRUE;
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	1d c2       	rjmp	.+1082   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    4bfc:	93 32       	cpi	r25, 0x23	; 35
    4bfe:	01 f5       	brne	.+64     	; 0x4c40 <_Z20processDTMFdetection10DTMF_key_t+0x486>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    4c00:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4c04:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4c08:	82 31       	cpi	r24, 0x12	; 18
    4c0a:	91 05       	cpc	r25, r1
    4c0c:	a8 f4       	brcc	.+42     	; 0x4c38 <_Z20processDTMFdetection10DTMF_key_t+0x47e>
					{
						Fox_t holdFox = (Fox_t)value;
    4c0e:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    4c10:	ae 01       	movw	r20, r28
    4c12:	4f 5f       	subi	r20, 0xFF	; 255
    4c14:	5f 4f       	sbci	r21, 0xFF	; 255
    4c16:	60 e1       	ldi	r22, 0x10	; 16
    4c18:	8e e6       	ldi	r24, 0x6E	; 110
    4c1a:	95 e0       	ldi	r25, 0x05	; 5
    4c1c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    4c20:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_fox>
    4c24:	99 81       	ldd	r25, Y+1	; 0x01
    4c26:	98 17       	cp	r25, r24
    4c28:	29 f0       	breq	.+10     	; 0x4c34 <_Z20processDTMFdetection10DTMF_key_t+0x47a>
						{
							setupForFox(&holdFox, START_NOTHING);
    4c2a:	60 e0       	ldi	r22, 0x00	; 0
    4c2c:	ce 01       	movw	r24, r28
    4c2e:	01 96       	adiw	r24, 0x01	; 1
    4c30:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	01 c0       	rjmp	.+2      	; 0x4c3a <_Z20processDTMFdetection10DTMF_key_t+0x480>
							setupForFox(&holdFox, START_NOTHING);
						}
					}
					else
					{
						entryError = TRUE;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4c3a:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4c3e:	fb c1       	rjmp	.+1014   	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4c40:	80 ed       	ldi	r24, 0xD0	; 208
    4c42:	89 0f       	add	r24, r25
    4c44:	8a 30       	cpi	r24, 0x0A	; 10
    4c46:	08 f0       	brcs	.+2      	; 0x4c4a <_Z20processDTMFdetection10DTMF_key_t+0x490>
    4c48:	d0 c1       	rjmp	.+928    	; 0x4fea <_Z20processDTMFdetection10DTMF_key_t+0x830>
				{
					value *= 10;
					value += key - '0';
    4c4a:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4c4e:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4c52:	a9 01       	movw	r20, r18
    4c54:	44 0f       	add	r20, r20
    4c56:	55 1f       	adc	r21, r21
    4c58:	22 0f       	add	r18, r18
    4c5a:	33 1f       	adc	r19, r19
    4c5c:	22 0f       	add	r18, r18
    4c5e:	33 1f       	adc	r19, r19
    4c60:	22 0f       	add	r18, r18
    4c62:	33 1f       	adc	r19, r19
    4c64:	24 0f       	add	r18, r20
    4c66:	35 1f       	adc	r19, r21
    4c68:	89 2f       	mov	r24, r25
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	c0 97       	sbiw	r24, 0x30	; 48
    4c6e:	28 0f       	add	r18, r24
    4c70:	39 1f       	adc	r19, r25
    4c72:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4c76:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	dc c1       	rjmp	.+952    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    4c7e:	93 32       	cpi	r25, 0x23	; 35
    4c80:	31 f5       	brne	.+76     	; 0x4cce <_Z20processDTMFdetection10DTMF_key_t+0x514>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    4c82:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_utc_offset>
    4c86:	41 95       	neg	r20
    4c88:	6b e5       	ldi	r22, 0x5B	; 91
    4c8a:	75 e0       	ldi	r23, 0x05	; 5
    4c8c:	85 e2       	ldi	r24, 0x25	; 37
    4c8e:	94 e0       	ldi	r25, 0x04	; 4
    4c90:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_Z18validateTimeStringPcPma>
    4c94:	6b 01       	movw	r12, r22
    4c96:	7c 01       	movw	r14, r24

					if(t)
    4c98:	67 2b       	or	r22, r23
    4c9a:	68 2b       	or	r22, r24
    4c9c:	69 2b       	or	r22, r25
    4c9e:	99 f0       	breq	.+38     	; 0x4cc6 <_Z20processDTMFdetection10DTMF_key_t+0x50c>
					{
						#if INCLUDE_RV3028_SUPPORT
							RTC_set_epoch(t);
						#else
							RTC_set_datetime(receivedString);
    4ca0:	85 e2       	ldi	r24, 0x25	; 37
    4ca2:	94 e0       	ldi	r25, 0x04	; 4
    4ca4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z16RTC_set_datetimePc>
						#endif

						g_current_epoch = t;
    4ca8:	c0 92 5b 05 	sts	0x055B, r12	; 0x80055b <g_current_epoch>
    4cac:	d0 92 5c 05 	sts	0x055C, r13	; 0x80055c <g_current_epoch+0x1>
    4cb0:	e0 92 5d 05 	sts	0x055D, r14	; 0x80055d <g_current_epoch+0x2>
    4cb4:	f0 92 5e 05 	sts	0x055E, r15	; 0x80055e <g_current_epoch+0x3>
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
    4cb8:	60 e0       	ldi	r22, 0x00	; 0
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	01 c0       	rjmp	.+2      	; 0x4cc8 <_Z20processDTMFdetection10DTMF_key_t+0x50e>
						g_current_epoch = t;
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
					}
					else
					{
						entryError = TRUE;
    4cc6:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4cc8:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4ccc:	b4 c1       	rjmp	.+872    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4cce:	80 ed       	ldi	r24, 0xD0	; 208
    4cd0:	89 0f       	add	r24, r25
    4cd2:	8a 30       	cpi	r24, 0x0A	; 10
    4cd4:	08 f0       	brcs	.+2      	; 0x4cd8 <_Z20processDTMFdetection10DTMF_key_t+0x51e>
    4cd6:	8b c1       	rjmp	.+790    	; 0x4fee <_Z20processDTMFdetection10DTMF_key_t+0x834>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4cd8:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4cdc:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4ce0:	28 32       	cpi	r18, 0x28	; 40
    4ce2:	31 05       	cpc	r19, r1
    4ce4:	0c f0       	brlt	.+2      	; 0x4ce8 <_Z20processDTMFdetection10DTMF_key_t+0x52e>
    4ce6:	85 c1       	rjmp	.+778    	; 0x4ff2 <_Z20processDTMFdetection10DTMF_key_t+0x838>
					{
						receivedString[stringLength] = key;
    4ce8:	f9 01       	movw	r30, r18
    4cea:	eb 5d       	subi	r30, 0xDB	; 219
    4cec:	fb 4f       	sbci	r31, 0xFB	; 251
    4cee:	90 83       	st	Z, r25
						stringLength++;
    4cf0:	2f 5f       	subi	r18, 0xFF	; 255
    4cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf4:	30 93 40 04 	sts	0x0440, r19	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4cf8:	20 93 3f 04 	sts	0x043F, r18	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4cfc:	f9 01       	movw	r30, r18
    4cfe:	eb 5d       	subi	r30, 0xDB	; 219
    4d00:	fb 4f       	sbci	r31, 0xFB	; 251
    4d02:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	97 c1       	rjmp	.+814    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    4d08:	93 32       	cpi	r25, 0x23	; 35
    4d0a:	41 f5       	brne	.+80     	; 0x4d5c <_Z20processDTMFdetection10DTMF_key_t+0x5a2>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    4d0c:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_utc_offset>
    4d10:	41 95       	neg	r20
    4d12:	67 e5       	ldi	r22, 0x57	; 87
    4d14:	75 e0       	ldi	r23, 0x05	; 5
    4d16:	85 e2       	ldi	r24, 0x25	; 37
    4d18:	94 e0       	ldi	r25, 0x04	; 4
    4d1a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_Z18validateTimeStringPcPma>

					if(s)
    4d1e:	61 15       	cp	r22, r1
    4d20:	71 05       	cpc	r23, r1
    4d22:	81 05       	cpc	r24, r1
    4d24:	91 05       	cpc	r25, r1
    4d26:	b1 f0       	breq	.+44     	; 0x4d54 <_Z20processDTMFdetection10DTMF_key_t+0x59a>
					{
						g_event_start_epoch = s;
    4d28:	60 93 57 05 	sts	0x0557, r22	; 0x800557 <g_event_start_epoch>
    4d2c:	70 93 58 05 	sts	0x0558, r23	; 0x800558 <g_event_start_epoch+0x1>
    4d30:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_event_start_epoch+0x2>
    4d34:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    4d38:	47 e5       	ldi	r20, 0x57	; 87
    4d3a:	55 e0       	ldi	r21, 0x05	; 5
    4d3c:	64 e1       	ldi	r22, 0x14	; 20
    4d3e:	8e e6       	ldi	r24, 0x6E	; 110
    4d40:	95 e0       	ldi	r25, 0x05	; 5
    4d42:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4d46:	63 e0       	ldi	r22, 0x03	; 3
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	01 c0       	rjmp	.+2      	; 0x4d56 <_Z20processDTMFdetection10DTMF_key_t+0x59c>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
					}
					else
					{
						entryError = TRUE;
    4d54:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4d56:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4d5a:	6d c1       	rjmp	.+730    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4d5c:	80 ed       	ldi	r24, 0xD0	; 208
    4d5e:	89 0f       	add	r24, r25
    4d60:	8a 30       	cpi	r24, 0x0A	; 10
    4d62:	08 f0       	brcs	.+2      	; 0x4d66 <_Z20processDTMFdetection10DTMF_key_t+0x5ac>
    4d64:	48 c1       	rjmp	.+656    	; 0x4ff6 <_Z20processDTMFdetection10DTMF_key_t+0x83c>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4d66:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4d6a:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4d6e:	28 32       	cpi	r18, 0x28	; 40
    4d70:	31 05       	cpc	r19, r1
    4d72:	0c f0       	brlt	.+2      	; 0x4d76 <_Z20processDTMFdetection10DTMF_key_t+0x5bc>
    4d74:	42 c1       	rjmp	.+644    	; 0x4ffa <_Z20processDTMFdetection10DTMF_key_t+0x840>
					{
						receivedString[stringLength] = key;
    4d76:	f9 01       	movw	r30, r18
    4d78:	eb 5d       	subi	r30, 0xDB	; 219
    4d7a:	fb 4f       	sbci	r31, 0xFB	; 251
    4d7c:	90 83       	st	Z, r25
						stringLength++;
    4d7e:	2f 5f       	subi	r18, 0xFF	; 255
    4d80:	3f 4f       	sbci	r19, 0xFF	; 255
    4d82:	30 93 40 04 	sts	0x0440, r19	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4d86:	20 93 3f 04 	sts	0x043F, r18	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4d8a:	f9 01       	movw	r30, r18
    4d8c:	eb 5d       	subi	r30, 0xDB	; 219
    4d8e:	fb 4f       	sbci	r31, 0xFB	; 251
    4d90:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	50 c1       	rjmp	.+672    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    4d96:	93 32       	cpi	r25, 0x23	; 35
    4d98:	41 f5       	brne	.+80     	; 0x4dea <_Z20processDTMFdetection10DTMF_key_t+0x630>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4d9a:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_utc_offset>
    4d9e:	41 95       	neg	r20
    4da0:	63 e5       	ldi	r22, 0x53	; 83
    4da2:	75 e0       	ldi	r23, 0x05	; 5
    4da4:	85 e2       	ldi	r24, 0x25	; 37
    4da6:	94 e0       	ldi	r25, 0x04	; 4
    4da8:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_Z18validateTimeStringPcPma>

					if(f)
    4dac:	61 15       	cp	r22, r1
    4dae:	71 05       	cpc	r23, r1
    4db0:	81 05       	cpc	r24, r1
    4db2:	91 05       	cpc	r25, r1
    4db4:	b1 f0       	breq	.+44     	; 0x4de2 <_Z20processDTMFdetection10DTMF_key_t+0x628>
					{
						g_event_finish_epoch = f;
    4db6:	60 93 53 05 	sts	0x0553, r22	; 0x800553 <g_event_finish_epoch>
    4dba:	70 93 54 05 	sts	0x0554, r23	; 0x800554 <g_event_finish_epoch+0x1>
    4dbe:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_event_finish_epoch+0x2>
    4dc2:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4dc6:	43 e5       	ldi	r20, 0x53	; 83
    4dc8:	55 e0       	ldi	r21, 0x05	; 5
    4dca:	65 e1       	ldi	r22, 0x15	; 21
    4dcc:	8e e6       	ldi	r24, 0x6E	; 110
    4dce:	95 e0       	ldi	r25, 0x05	; 5
    4dd0:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4dd4:	63 e0       	ldi	r22, 0x03	; 3
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	01 c0       	rjmp	.+2      	; 0x4de4 <_Z20processDTMFdetection10DTMF_key_t+0x62a>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
					}
					else
					{
						entryError = TRUE;
    4de2:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4de4:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4de8:	26 c1       	rjmp	.+588    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4dea:	80 ed       	ldi	r24, 0xD0	; 208
    4dec:	89 0f       	add	r24, r25
    4dee:	8a 30       	cpi	r24, 0x0A	; 10
    4df0:	08 f0       	brcs	.+2      	; 0x4df4 <_Z20processDTMFdetection10DTMF_key_t+0x63a>
    4df2:	05 c1       	rjmp	.+522    	; 0x4ffe <_Z20processDTMFdetection10DTMF_key_t+0x844>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4df4:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4df8:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4dfc:	28 32       	cpi	r18, 0x28	; 40
    4dfe:	31 05       	cpc	r19, r1
    4e00:	0c f0       	brlt	.+2      	; 0x4e04 <_Z20processDTMFdetection10DTMF_key_t+0x64a>
    4e02:	ff c0       	rjmp	.+510    	; 0x5002 <_Z20processDTMFdetection10DTMF_key_t+0x848>
					{
						receivedString[stringLength] = key;
    4e04:	f9 01       	movw	r30, r18
    4e06:	eb 5d       	subi	r30, 0xDB	; 219
    4e08:	fb 4f       	sbci	r31, 0xFB	; 251
    4e0a:	90 83       	st	Z, r25
						stringLength++;
    4e0c:	2f 5f       	subi	r18, 0xFF	; 255
    4e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e10:	30 93 40 04 	sts	0x0440, r19	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4e14:	20 93 3f 04 	sts	0x043F, r18	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4e18:	f9 01       	movw	r30, r18
    4e1a:	eb 5d       	subi	r30, 0xDB	; 219
    4e1c:	fb 4f       	sbci	r31, 0xFB	; 251
    4e1e:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e20:	80 e0       	ldi	r24, 0x00	; 0
    4e22:	09 c1       	rjmp	.+530    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			break;

#if !SUPPORT_ONLY_80M
					case STATE_SET_AM_TONE_FREQUENCY:
					{
						if(key == '#')
    4e24:	93 32       	cpi	r25, 0x23	; 35
    4e26:	99 f4       	brne	.+38     	; 0x4e4e <_Z20processDTMFdetection10DTMF_key_t+0x694>
						{
							g_AM_audio_frequency = (AM_Tone_Freq_t)value;
    4e28:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4e2c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_AM_audio_frequency>
							setAMToneFrequency(g_AM_audio_frequency);
    4e30:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_AM_audio_frequency>
    4e34:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <_Z18setAMToneFrequency14AM_Tone_Freq_t>
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    4e38:	4f e4       	ldi	r20, 0x4F	; 79
    4e3a:	55 e0       	ldi	r21, 0x05	; 5
    4e3c:	61 e1       	ldi	r22, 0x11	; 17
    4e3e:	8e e6       	ldi	r24, 0x6E	; 110
    4e40:	95 e0       	ldi	r25, 0x05	; 5
    4e42:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

							state = STATE_SHUTDOWN;
    4e46:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	f4 c0       	rjmp	.+488    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
							setAMToneFrequency(g_AM_audio_frequency);
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);

							state = STATE_SHUTDOWN;
						}
						else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    4e4e:	97 30       	cpi	r25, 0x07	; 7
    4e50:	08 f0       	brcs	.+2      	; 0x4e54 <_Z20processDTMFdetection10DTMF_key_t+0x69a>
    4e52:	d9 c0       	rjmp	.+434    	; 0x5006 <_Z20processDTMFdetection10DTMF_key_t+0x84c>
						{
							value = key - '0';
    4e54:	89 2f       	mov	r24, r25
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	c0 97       	sbiw	r24, 0x30	; 48
    4e5a:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4e5e:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e62:	80 e0       	ldi	r24, 0x00	; 0
    4e64:	e8 c0       	rjmp	.+464    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					break;
#endif  /* !SUPPORT_ONLY_80M */

			case STATE_SET_PTT_PERIODIC_RESET:
			{
				if(key == '#')
    4e66:	93 32       	cpi	r25, 0x23	; 35
    4e68:	d1 f4       	brne	.+52     	; 0x4e9e <_Z20processDTMFdetection10DTMF_key_t+0x6e4>
				{
					if((value >= 0) && (value <= 1))
    4e6a:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4e6e:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4e72:	82 30       	cpi	r24, 0x02	; 2
    4e74:	91 05       	cpc	r25, r1
    4e76:	78 f4       	brcc	.+30     	; 0x4e96 <_Z20processDTMFdetection10DTMF_key_t+0x6dc>
					{
						g_ptt_periodic_reset_enabled = (uint8_t)value;
    4e78:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_ptt_periodic_reset_enabled>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    4e7c:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_ptt_periodic_reset_enabled>
    4e80:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_use_ptt_periodic_reset>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    4e84:	41 e5       	ldi	r20, 0x51	; 81
    4e86:	55 e0       	ldi	r21, 0x05	; 5
    4e88:	67 e1       	ldi	r22, 0x17	; 23
    4e8a:	8e e6       	ldi	r24, 0x6E	; 110
    4e8c:	95 e0       	ldi	r25, 0x05	; 5
    4e8e:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	01 c0       	rjmp	.+2      	; 0x4e98 <_Z20processDTMFdetection10DTMF_key_t+0x6de>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
					}
					else
					{
						entryError = TRUE;
    4e96:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4e98:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4e9c:	cc c0       	rjmp	.+408    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '1'))
    4e9e:	80 ed       	ldi	r24, 0xD0	; 208
    4ea0:	89 0f       	add	r24, r25
    4ea2:	82 30       	cpi	r24, 0x02	; 2
    4ea4:	08 f0       	brcs	.+2      	; 0x4ea8 <_Z20processDTMFdetection10DTMF_key_t+0x6ee>
    4ea6:	b1 c0       	rjmp	.+354    	; 0x500a <_Z20processDTMFdetection10DTMF_key_t+0x850>
				{
					value = key - '0';
    4ea8:	89 2f       	mov	r24, r25
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	c0 97       	sbiw	r24, 0x30	; 48
    4eae:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4eb2:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	be c0       	rjmp	.+380    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_GET_BATTERY_VOLTAGE:
			{
				if(key == '#')
    4eba:	93 32       	cpi	r25, 0x23	; 35
    4ebc:	49 f4       	brne	.+18     	; 0x4ed0 <_Z20processDTMFdetection10DTMF_key_t+0x716>
				{
					Fox_t f = REPORT_BATTERY;
    4ebe:	83 e1       	ldi	r24, 0x13	; 19
    4ec0:	89 83       	std	Y+1, r24	; 0x01
					setupForFox(&f, START_TRANSMISSIONS_NOW);
    4ec2:	62 e0       	ldi	r22, 0x02	; 2
    4ec4:	ce 01       	movw	r24, r28
    4ec6:	01 96       	adiw	r24, 0x01	; 1
    4ec8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <_Z20processDTMFdetection10DTMF_key_t+0x718>
					Fox_t f = REPORT_BATTERY;
					setupForFox(&f, START_TRANSMISSIONS_NOW);
				}
				else
				{
					entryError = TRUE;
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
				}

				state = STATE_SHUTDOWN;
    4ed2:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
			}
			break;
    4ed6:	af c0       	rjmp	.+350    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    4ed8:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4edc:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4ee0:	a9 01       	movw	r20, r18
    4ee2:	4f 5f       	subi	r20, 0xFF	; 255
    4ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee6:	50 93 3c 04 	sts	0x043C, r21	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4eea:	40 93 3b 04 	sts	0x043B, r20	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4eee:	f9 01       	movw	r30, r18
    4ef0:	ec 5e       	subi	r30, 0xEC	; 236
    4ef2:	fa 4f       	sbci	r31, 0xFA	; 250
    4ef4:	90 81       	ld	r25, Z
    4ef6:	89 13       	cpse	r24, r25
    4ef8:	13 c0       	rjmp	.+38     	; 0x4f20 <_Z20processDTMFdetection10DTMF_key_t+0x766>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    4efa:	e4 e1       	ldi	r30, 0x14	; 20
    4efc:	f5 e0       	ldi	r31, 0x05	; 5
    4efe:	01 90       	ld	r0, Z+
    4f00:	00 20       	and	r0, r0
    4f02:	e9 f7       	brne	.-6      	; 0x4efe <_Z20processDTMFdetection10DTMF_key_t+0x744>
    4f04:	31 97       	sbiw	r30, 0x01	; 1
    4f06:	e4 51       	subi	r30, 0x14	; 20
    4f08:	f5 40       	sbci	r31, 0x05	; 5
    4f0a:	e4 17       	cp	r30, r20
    4f0c:	f5 07       	cpc	r31, r21
    4f0e:	09 f0       	breq	.+2      	; 0x4f12 <_Z20processDTMFdetection10DTMF_key_t+0x758>
    4f10:	7e c0       	rjmp	.+252    	; 0x500e <_Z20processDTMFdetection10DTMF_key_t+0x854>
					{
						g_DTMF_unlocked = TRUE;
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    4f18:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE18setPasswordEnabled>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	8b c0       	rjmp	.+278    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
						setPasswordEnabled = TRUE;
					}
				}
				else
				{
					g_DTMF_sentence_in_progress_ticks = 0;
    4f20:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4f24:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
					digits = 0;
    4f28:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4f2c:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
					state = STATE_SHUTDOWN;
    4f30:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					entryError = TRUE;
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	7f c0       	rjmp	.+254    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			break;

#if !SUPPORT_ONLY_80M
					case STATE_TEST_ATTENUATOR:
					{
						if(key == '#')
    4f38:	93 32       	cpi	r25, 0x23	; 35
    4f3a:	f9 f4       	brne	.+62     	; 0x4f7a <_Z20processDTMFdetection10DTMF_key_t+0x7c0>
						{
							if(value == 0)
    4f3c:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4f40:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4f44:	00 97       	sbiw	r24, 0x00	; 0
    4f46:	41 f4       	brne	.+16     	; 0x4f58 <_Z20processDTMFdetection10DTMF_key_t+0x79e>
							{
								setAtten(0);
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
								g_sendAMmodulationConstantly = TRUE;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_sendAMmodulationConstantly>
    4f56:	0d c0       	rjmp	.+26     	; 0x4f72 <_Z20processDTMFdetection10DTMF_key_t+0x7b8>
							}
							else if(value > (int)MAX_ATTEN_TENTHS_DB)
    4f58:	8c 33       	cpi	r24, 0x3C	; 60
    4f5a:	21 e0       	ldi	r18, 0x01	; 1
    4f5c:	92 07       	cpc	r25, r18
    4f5e:	3c f0       	brlt	.+14     	; 0x4f6e <_Z20processDTMFdetection10DTMF_key_t+0x7b4>
							{
								g_sendAMmodulationConstantly = FALSE;
    4f60:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sendAMmodulationConstantly>
								setAtten(MAX_ATTEN_TENTHS_DB);
    4f64:	8b e3       	ldi	r24, 0x3B	; 59
    4f66:	91 e0       	ldi	r25, 0x01	; 1
    4f68:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
    4f6c:	02 c0       	rjmp	.+4      	; 0x4f72 <_Z20processDTMFdetection10DTMF_key_t+0x7b8>
							}
							else
							{
								setAtten(value);
    4f6e:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
							}

							state = STATE_SHUTDOWN;
    4f72:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4f76:	80 e0       	ldi	r24, 0x00	; 0
    4f78:	5e c0       	rjmp	.+188    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
								setAtten(value);
							}

							state = STATE_SHUTDOWN;
						}
						else if((key >= '0') && (key <= '9'))
    4f7a:	80 ed       	ldi	r24, 0xD0	; 208
    4f7c:	89 0f       	add	r24, r25
    4f7e:	8a 30       	cpi	r24, 0x0A	; 10
    4f80:	d0 f4       	brcc	.+52     	; 0x4fb6 <_Z20processDTMFdetection10DTMF_key_t+0x7fc>
						{
							value *= 10;
							value += key - '0';
    4f82:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4f86:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4f8a:	a9 01       	movw	r20, r18
    4f8c:	44 0f       	add	r20, r20
    4f8e:	55 1f       	adc	r21, r21
    4f90:	22 0f       	add	r18, r18
    4f92:	33 1f       	adc	r19, r19
    4f94:	22 0f       	add	r18, r18
    4f96:	33 1f       	adc	r19, r19
    4f98:	22 0f       	add	r18, r18
    4f9a:	33 1f       	adc	r19, r19
    4f9c:	24 0f       	add	r18, r20
    4f9e:	35 1f       	adc	r19, r21
    4fa0:	89 2f       	mov	r24, r25
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	c0 97       	sbiw	r24, 0x30	; 48
    4fa6:	82 0f       	add	r24, r18
    4fa8:	93 1f       	adc	r25, r19
    4faa:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4fae:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	40 c0       	rjmp	.+128    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
							value *= 10;
							value += key - '0';
						}
						else
						{
							g_DTMF_sentence_in_progress_ticks = 0;
    4fb6:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    4fba:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
							state = STATE_SHUTDOWN;
    4fbe:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
							entryError = TRUE;
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	38 c0       	rjmp	.+112    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	36 c0       	rjmp	.+108    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	34 c0       	rjmp	.+104    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	32 c0       	rjmp	.+100    	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fd2:	80 e0       	ldi	r24, 0x00	; 0
    4fd4:	30 c0       	rjmp	.+96     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	2e c0       	rjmp	.+92     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	2c c0       	rjmp	.+88     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	2a c0       	rjmp	.+84     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	28 c0       	rjmp	.+80     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	26 c0       	rjmp	.+76     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	24 c0       	rjmp	.+72     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	22 c0       	rjmp	.+68     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	20 c0       	rjmp	.+64     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	1e c0       	rjmp	.+60     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	1c c0       	rjmp	.+56     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	1a c0       	rjmp	.+52     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    5002:	80 e0       	ldi	r24, 0x00	; 0
    5004:	18 c0       	rjmp	.+48     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	16 c0       	rjmp	.+44     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	14 c0       	rjmp	.+40     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	12 c0       	rjmp	.+36     	; 0x5036 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					if(digits)
					{
						value = value * 10 + (key - '0');
						if((value < value2Morse(0x7F)) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
						{
							receivedString[stringLength] = value2Morse(value);
    5012:	80 2f       	mov	r24, r16
    5014:	0e 94 c3 23 	call	0x4786	; 0x4786 <_Z11value2Morsec>
    5018:	f7 01       	movw	r30, r14
    501a:	eb 5d       	subi	r30, 0xDB	; 219
    501c:	fb 4f       	sbci	r31, 0xFB	; 251
    501e:	80 83       	st	Z, r24
							stringLength++;
    5020:	c7 01       	movw	r24, r14
    5022:	01 96       	adiw	r24, 0x01	; 1
    5024:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    5028:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
							receivedString[stringLength] = '\0';
    502c:	fc 01       	movw	r30, r24
    502e:	eb 5d       	subi	r30, 0xDB	; 219
    5030:	fb 4f       	sbci	r31, 0xFB	; 251
    5032:	10 82       	st	Z, r1
    5034:	ca cd       	rjmp	.-1132   	; 0x4bca <_Z20processDTMFdetection10DTMF_key_t+0x410>
					break;
#endif  /* !SUPPORT_ONLY_80M */
		}

		return(entryError);
	}
    5036:	0f 90       	pop	r0
    5038:	df 91       	pop	r29
    503a:	cf 91       	pop	r28
    503c:	1f 91       	pop	r17
    503e:	0f 91       	pop	r16
    5040:	ff 90       	pop	r15
    5042:	ef 90       	pop	r14
    5044:	df 90       	pop	r13
    5046:	cf 90       	pop	r12
    5048:	08 95       	ret

0000504a <_Z13value2DTMFKeyh>:

DTMF_key_t value2DTMFKey(uint8_t value)
{
	DTMF_key_t key = NO_KEY;

	if(value <= 2)
    504a:	83 30       	cpi	r24, 0x03	; 3
    504c:	10 f4       	brcc	.+4      	; 0x5052 <_Z13value2DTMFKeyh+0x8>
	{
		key = (DTMF_key_t)('1' + value);
    504e:	8f 5c       	subi	r24, 0xCF	; 207
    5050:	08 95       	ret
	}
	else if((value >= 4) && (value <= 6))
    5052:	9c ef       	ldi	r25, 0xFC	; 252
    5054:	98 0f       	add	r25, r24
    5056:	93 30       	cpi	r25, 0x03	; 3
    5058:	10 f4       	brcc	.+4      	; 0x505e <_Z13value2DTMFKeyh+0x14>
	{
		key = (DTMF_key_t)('0' + value);
    505a:	80 5d       	subi	r24, 0xD0	; 208
    505c:	08 95       	ret
	}
	else if((value >= 8) && (value <= 10))
    505e:	98 ef       	ldi	r25, 0xF8	; 248
    5060:	98 0f       	add	r25, r24
    5062:	93 30       	cpi	r25, 0x03	; 3
    5064:	10 f4       	brcc	.+4      	; 0x506a <_Z13value2DTMFKeyh+0x20>
	{
		key = (DTMF_key_t)('/' + value);
    5066:	81 5d       	subi	r24, 0xD1	; 209
    5068:	08 95       	ret
	}
	else if(value == 3)
    506a:	83 30       	cpi	r24, 0x03	; 3
    506c:	71 f0       	breq	.+28     	; 0x508a <_Z13value2DTMFKeyh+0x40>
	{
		key = A_KEY;
	}
	else if(value == 7)
    506e:	87 30       	cpi	r24, 0x07	; 7
    5070:	71 f0       	breq	.+28     	; 0x508e <_Z13value2DTMFKeyh+0x44>
	{
		key = B_KEY;
	}
	else if(value == 11)
    5072:	8b 30       	cpi	r24, 0x0B	; 11
    5074:	71 f0       	breq	.+28     	; 0x5092 <_Z13value2DTMFKeyh+0x48>
	{
		key = C_KEY;
	}
	else if(value == 12)
    5076:	8c 30       	cpi	r24, 0x0C	; 12
    5078:	71 f0       	breq	.+28     	; 0x5096 <_Z13value2DTMFKeyh+0x4c>
	{
		key = STAR_KEY;
	}
	else if(value == 13)
    507a:	8d 30       	cpi	r24, 0x0D	; 13
    507c:	71 f0       	breq	.+28     	; 0x509a <_Z13value2DTMFKeyh+0x50>
	{
		key = ZERO_KEY;
	}
	else if(value == 14)
    507e:	8e 30       	cpi	r24, 0x0E	; 14
    5080:	71 f0       	breq	.+28     	; 0x509e <_Z13value2DTMFKeyh+0x54>
	{
		key = POUND_KEY;
	}
	else if(value == 15)
    5082:	8f 30       	cpi	r24, 0x0F	; 15
    5084:	71 f4       	brne	.+28     	; 0x50a2 <_Z13value2DTMFKeyh+0x58>
	{
		key = D_KEY;
    5086:	84 e4       	ldi	r24, 0x44	; 68
    5088:	08 95       	ret
	{
		key = (DTMF_key_t)('/' + value);
	}
	else if(value == 3)
	{
		key = A_KEY;
    508a:	81 e4       	ldi	r24, 0x41	; 65
    508c:	08 95       	ret
	}
	else if(value == 7)
	{
		key = B_KEY;
    508e:	82 e4       	ldi	r24, 0x42	; 66
    5090:	08 95       	ret
	}
	else if(value == 11)
	{
		key = C_KEY;
    5092:	83 e4       	ldi	r24, 0x43	; 67
    5094:	08 95       	ret
	}
	else if(value == 12)
	{
		key = STAR_KEY;
    5096:	8a e2       	ldi	r24, 0x2A	; 42
    5098:	08 95       	ret
	}
	else if(value == 13)
	{
		key = ZERO_KEY;
    509a:	80 e3       	ldi	r24, 0x30	; 48
    509c:	08 95       	ret
	}
	else if(value == 14)
	{
		key = POUND_KEY;
    509e:	83 e2       	ldi	r24, 0x23	; 35
    50a0:	08 95       	ret
	return( morse);
}

DTMF_key_t value2DTMFKey(uint8_t value)
{
	DTMF_key_t key = NO_KEY;
    50a2:	80 e0       	ldi	r24, 0x00	; 0
	{
		key = D_KEY;
	}

	return( key);
}
    50a4:	08 95       	ret

000050a6 <_Z4loopv>:

/***********************************************************************
 *   Here is the main loop
 ************************************************************************/
void loop()
{
    50a6:	4f 92       	push	r4
    50a8:	5f 92       	push	r5
    50aa:	6f 92       	push	r6
    50ac:	7f 92       	push	r7
    50ae:	8f 92       	push	r8
    50b0:	9f 92       	push	r9
    50b2:	af 92       	push	r10
    50b4:	bf 92       	push	r11
    50b6:	cf 92       	push	r12
    50b8:	df 92       	push	r13
    50ba:	ef 92       	push	r14
    50bc:	ff 92       	push	r15
    50be:	0f 93       	push	r16
    50c0:	1f 93       	push	r17
    50c2:	cf 93       	push	r28
    50c4:	df 93       	push	r29
    50c6:	00 d0       	rcall	.+0      	; 0x50c8 <_Z4loopv+0x22>
    50c8:	1f 92       	push	r1
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
		int8_t dtmfY = -1;
		float largestX;
		float largestY;
		BOOL dtmfDetected = FALSE;
		BOOL noiseDetected = FALSE;
		int clipCount = 0;
    50ce:	1a 82       	std	Y+2, r1	; 0x02
    50d0:	19 82       	std	Y+1, r1	; 0x01
		BOOL dtmfEntryError = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
    50d2:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_perform_EEPROM_reset>
    50d6:	88 23       	and	r24, r24
    50d8:	c1 f0       	breq	.+48     	; 0x510a <_Z4loopv+0x64>
		{
			ee_mgr.resetEEPROMValues();
    50da:	8e e6       	ldi	r24, 0x6E	; 110
    50dc:	95 e0       	ldi	r25, 0x05	; 5
    50de:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	71 ee       	ldi	r23, 0xE1	; 225
    50e6:	80 e0       	ldi	r24, 0x00	; 0
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	0e 94 0a 0c 	call	0x1814	; 0x1814 <linkbus_init>
			while(g_reset_button_held)
    50ee:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_reset_button_held>
    50f2:	88 23       	and	r24, r24
    50f4:	41 f0       	breq	.+16     	; 0x5106 <_Z4loopv+0x60>
			{
				digitalWrite(PIN_LED, OFF); /*  LED */
    50f6:	60 e0       	ldi	r22, 0x00	; 0
    50f8:	80 e1       	ldi	r24, 0x10	; 16
    50fa:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
		{
			ee_mgr.resetEEPROMValues();
			linkbus_init(BAUD);
			while(g_reset_button_held)
    50fe:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_reset_button_held>
    5102:	81 11       	cpse	r24, r1
    5104:	f8 cf       	rjmp	.-16     	; 0x50f6 <_Z4loopv+0x50>
			{
				digitalWrite(PIN_LED, OFF); /*  LED */
			}

			g_perform_EEPROM_reset = FALSE;
    5106:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <g_perform_EEPROM_reset>
		}

		dtmfEntryError = processDTMFdetection(NO_KEY);
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <_Z20processDTMFdetection10DTMF_key_t>
    5110:	18 2f       	mov	r17, r24
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    5112:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_Z17handleLinkBusMsgsv>

#ifndef TRANQUILIZE_WATCHDOG
		wdt_reset();    /* HW watchdog */
    5116:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */


#if !INIT_EEPROM_ONLY
		if(!dtmfEntryError)
    5118:	11 11       	cpse	r17, r1
    511a:	97 c1       	rjmp	.+814    	; 0x544a <_Z4loopv+0x3a4>
		{
			if(g_goertzel.SamplesReady())
    511c:	80 ed       	ldi	r24, 0xD0	; 208
    511e:	94 e0       	ldi	r25, 0x04	; 4
    5120:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZN8Goertzel12SamplesReadyEv>
    5124:	88 23       	and	r24, r24
    5126:	09 f4       	brne	.+2      	; 0x512a <_Z4loopv+0x84>
    5128:	90 c1       	rjmp	.+800    	; 0x544a <_Z4loopv+0x3a4>
				dtmfX = -1;
				dtmfY = -1;

				dtmfDetected = FALSE;
				noiseDetected = FALSE;
				clipCount = 0;
    512a:	1a 82       	std	Y+2, r1	; 0x02
    512c:	19 82       	std	Y+1, r1	; 0x01

				if(!g_temperature_check_countdown)
    512e:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <g_temperature_check_countdown>
    5132:	81 11       	cpse	r24, r1
    5134:	15 c0       	rjmp	.+42     	; 0x5160 <_Z4loopv+0xba>
				{
					setUpSampling(TEMPERATURE_SAMPLING, FALSE);
    5136:	60 e0       	ldi	r22, 0x00	; 0
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z13setUpSampling12ADCChannel_th>
					int8_t temp = (int8_t)getTemp();
    513e:	0e 94 05 19 	call	0x320a	; 0x320a <_Z7getTempv>
    5142:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__fixsfsi>
					if(temp != g_temperature)
    5146:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <g_temperature>
    514a:	68 13       	cpse	r22, r24
					{
						g_temperature = temp;
    514c:	60 93 13 05 	sts	0x0513, r22	; 0x800513 <g_temperature>
						int8_t adj = ee_mgr.readTemperatureTable(delta25);
						rv3028_set_offset_RAM(g_rv3028_offset + adj);
#endif // INCLUDE_DS3231_SUPPORT
					}

					setUpSampling(AUDIO_SAMPLING, FALSE);
    5150:	60 e0       	ldi	r22, 0x00	; 0
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z13setUpSampling12ADCChannel_th>
					g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    5158:	8b e3       	ldi	r24, 0x3B	; 59
    515a:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <g_temperature_check_countdown>
    515e:	24 c2       	rjmp	.+1096   	; 0x55a8 <_Z4loopv+0x502>
				}
				else if(!g_voltage_check_countdown)
    5160:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_voltage_check_countdown>
    5164:	81 11       	cpse	r24, r1
    5166:	20 c2       	rjmp	.+1088   	; 0x55a8 <_Z4loopv+0x502>
				{
					setUpSampling(VOLTAGE_SAMPLING, FALSE);
    5168:	60 e0       	ldi	r22, 0x00	; 0
    516a:	82 e0       	ldi	r24, 0x02	; 2
    516c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z13setUpSampling12ADCChannel_th>
					g_voltage = getVoltage();
    5170:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_Z10getVoltagev>
    5174:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <g_voltage+0x1>
    5178:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_voltage>
					setUpSampling(AUDIO_SAMPLING, FALSE);
    517c:	60 e0       	ldi	r22, 0x00	; 0
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z13setUpSampling12ADCChannel_th>
					g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    5184:	8b e0       	ldi	r24, 0x0B	; 11
    5186:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <g_voltage_check_countdown>
    518a:	0e c2       	rjmp	.+1052   	; 0x55a8 <_Z4loopv+0x502>
				}

				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(y_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
    518c:	f5 01       	movw	r30, r10
    518e:	41 91       	ld	r20, Z+
    5190:	51 91       	ld	r21, Z+
    5192:	61 91       	ld	r22, Z+
    5194:	71 91       	ld	r23, Z+
    5196:	5f 01       	movw	r10, r30
    5198:	80 ed       	ldi	r24, 0xD0	; 208
    519a:	94 e0       	ldi	r25, 0x04	; 4
    519c:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeY = g_goertzel.Magnitude2(&clipCount);     /* Check samples for presence of the target frequency */
    51a0:	be 01       	movw	r22, r28
    51a2:	6f 5f       	subi	r22, 0xFF	; 255
    51a4:	7f 4f       	sbci	r23, 0xFF	; 255
    51a6:	80 ed       	ldi	r24, 0xD0	; 208
    51a8:	94 e0       	ldi	r25, 0x04	; 4
    51aa:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN8Goertzel10Magnitude2EPi>
    51ae:	e6 2e       	mov	r14, r22
    51b0:	f7 2e       	mov	r15, r23
    51b2:	08 2f       	mov	r16, r24
    51b4:	d9 2e       	mov	r13, r25

					if(magnitudeY > largestY)                           /* Use only the greatest Y value */
    51b6:	29 2d       	mov	r18, r9
    51b8:	38 2d       	mov	r19, r8
    51ba:	47 2d       	mov	r20, r7
    51bc:	56 2d       	mov	r21, r6
    51be:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__gesf2>
    51c2:	18 16       	cp	r1, r24
    51c4:	b4 f4       	brge	.+44     	; 0x51f2 <_Z4loopv+0x14c>
					{
						largestY = magnitudeY;
						if(magnitudeY > threshold)                      /* Only consider Y above a certain threshold */
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	34 e2       	ldi	r19, 0x24	; 36
    51ca:	44 e7       	ldi	r20, 0x74	; 116
    51cc:	59 e4       	ldi	r21, 0x49	; 73
    51ce:	6e 2d       	mov	r22, r14
    51d0:	7f 2d       	mov	r23, r15
    51d2:	80 2f       	mov	r24, r16
    51d4:	9d 2d       	mov	r25, r13
    51d6:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__gesf2>
    51da:	18 16       	cp	r1, r24
    51dc:	34 f4       	brge	.+12     	; 0x51ea <_Z4loopv+0x144>
						{
							dtmfY = i;
    51de:	5c 2c       	mov	r5, r12
					g_goertzel.SetTargetFrequency(y_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
					magnitudeY = g_goertzel.Magnitude2(&clipCount);     /* Check samples for presence of the target frequency */

					if(magnitudeY > largestY)                           /* Use only the greatest Y value */
					{
						largestY = magnitudeY;
    51e0:	9e 2c       	mov	r9, r14
    51e2:	8f 2c       	mov	r8, r15
    51e4:	70 2e       	mov	r7, r16
    51e6:	6d 2c       	mov	r6, r13
    51e8:	04 c0       	rjmp	.+8      	; 0x51f2 <_Z4loopv+0x14c>
    51ea:	9e 2c       	mov	r9, r14
    51ec:	8f 2c       	mov	r8, r15
    51ee:	70 2e       	mov	r7, r16
    51f0:	6d 2c       	mov	r6, r13
    51f2:	c3 94       	inc	r12
					g_voltage = getVoltage();
					setUpSampling(AUDIO_SAMPLING, FALSE);
					g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
				}

				for(int i = 0; i < 4; i++)
    51f4:	f4 e0       	ldi	r31, 0x04	; 4
    51f6:	cf 12       	cpse	r12, r31
    51f8:	c9 cf       	rjmp	.-110    	; 0x518c <_Z4loopv+0xe6>
    51fa:	e4 c1       	rjmp	.+968    	; 0x55c4 <_Z4loopv+0x51e>

				if(dtmfY >= 0)
				{
					for(int i = 0; i < 4; i++)
					{
						g_goertzel.SetTargetFrequency(x_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
    51fc:	f5 01       	movw	r30, r10
    51fe:	41 91       	ld	r20, Z+
    5200:	51 91       	ld	r21, Z+
    5202:	61 91       	ld	r22, Z+
    5204:	71 91       	ld	r23, Z+
    5206:	5f 01       	movw	r10, r30
    5208:	80 ed       	ldi	r24, 0xD0	; 208
    520a:	94 e0       	ldi	r25, 0x04	; 4
    520c:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN8Goertzel18SetTargetFrequencyEf>
						magnitudeX = g_goertzel.Magnitude2(NULL);           /* Check samples for presence of the target frequency */
    5210:	60 e0       	ldi	r22, 0x00	; 0
    5212:	70 e0       	ldi	r23, 0x00	; 0
    5214:	80 ed       	ldi	r24, 0xD0	; 208
    5216:	94 e0       	ldi	r25, 0x04	; 4
    5218:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN8Goertzel10Magnitude2EPi>
    521c:	e6 2e       	mov	r14, r22
    521e:	f7 2e       	mov	r15, r23
    5220:	08 2f       	mov	r16, r24
    5222:	d9 2e       	mov	r13, r25

						if(magnitudeX > largestX)                           /* Use only the greatest X value */
    5224:	29 2d       	mov	r18, r9
    5226:	38 2d       	mov	r19, r8
    5228:	47 2d       	mov	r20, r7
    522a:	56 2d       	mov	r21, r6
    522c:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__gesf2>
    5230:	18 16       	cp	r1, r24
    5232:	b4 f4       	brge	.+44     	; 0x5260 <_Z4loopv+0x1ba>
						{
							largestX = magnitudeX;
							if(magnitudeX > threshold)                      /* Only consider X above a certain threshold */
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	34 e2       	ldi	r19, 0x24	; 36
    5238:	44 e7       	ldi	r20, 0x74	; 116
    523a:	59 e4       	ldi	r21, 0x49	; 73
    523c:	6e 2d       	mov	r22, r14
    523e:	7f 2d       	mov	r23, r15
    5240:	80 2f       	mov	r24, r16
    5242:	9d 2d       	mov	r25, r13
    5244:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__gesf2>
    5248:	18 16       	cp	r1, r24
    524a:	34 f4       	brge	.+12     	; 0x5258 <_Z4loopv+0x1b2>
							{
								dtmfX = i;
    524c:	4c 2c       	mov	r4, r12
						g_goertzel.SetTargetFrequency(x_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
						magnitudeX = g_goertzel.Magnitude2(NULL);           /* Check samples for presence of the target frequency */

						if(magnitudeX > largestX)                           /* Use only the greatest X value */
						{
							largestX = magnitudeX;
    524e:	9e 2c       	mov	r9, r14
    5250:	8f 2c       	mov	r8, r15
    5252:	70 2e       	mov	r7, r16
    5254:	6d 2c       	mov	r6, r13
    5256:	04 c0       	rjmp	.+8      	; 0x5260 <_Z4loopv+0x1ba>
    5258:	9e 2c       	mov	r9, r14
    525a:	8f 2c       	mov	r8, r15
    525c:	70 2e       	mov	r7, r16
    525e:	6d 2c       	mov	r6, r13
    5260:	c3 94       	inc	r12
#endif  /* DEBUG_DTMF */
				}

				if(dtmfY >= 0)
				{
					for(int i = 0; i < 4; i++)
    5262:	f4 e0       	ldi	r31, 0x04	; 4
    5264:	cf 12       	cpse	r12, r31
    5266:	ca cf       	rjmp	.-108    	; 0x51fc <_Z4loopv+0x156>
								lb_send_string(g_tempStr, TRUE);
							}
#endif  /* DEBUG_DTMF */
					}

					if(g_DTMF_sentence_in_progress_ticks || (checkCount < 3) || (clipCount < 50))
    5268:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    526c:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    5270:	89 2b       	or	r24, r25
    5272:	59 f4       	brne	.+22     	; 0x528a <_Z4loopv+0x1e4>
    5274:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    5278:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    527c:	03 97       	sbiw	r24, 0x03	; 3
    527e:	2c f0       	brlt	.+10     	; 0x528a <_Z4loopv+0x1e4>
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	9a 81       	ldd	r25, Y+2	; 0x02
    5284:	c2 97       	sbiw	r24, 0x32	; 50
    5286:	0c f0       	brlt	.+2      	; 0x528a <_Z4loopv+0x1e4>
    5288:	4d c0       	rjmp	.+154    	; 0x5324 <_Z4loopv+0x27e>
					{
						if(dtmfX >= 0)
    528a:	44 20       	and	r4, r4
    528c:	0c f4       	brge	.+2      	; 0x5290 <_Z4loopv+0x1ea>
    528e:	70 c0       	rjmp	.+224    	; 0x5370 <_Z4loopv+0x2ca>
						{
							DTMF_key_t newKey = value2DTMFKey(4 * dtmfY + dtmfX);
    5290:	85 2d       	mov	r24, r5
    5292:	88 0f       	add	r24, r24
    5294:	88 0f       	add	r24, r24
    5296:	84 0d       	add	r24, r4
    5298:	0e 94 25 28 	call	0x504a	; 0x504a <_Z13value2DTMFKeyh>
    529c:	08 2f       	mov	r16, r24
							dtmfDetected = TRUE;

							/* If the same key is detected three times in a row with no silent periods between them then register a new keypress */
							if(lastKey == newKey)
    529e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZZ4loopvE7lastKey>
    52a2:	08 13       	cpse	r16, r24
    52a4:	3c c0       	rjmp	.+120    	; 0x531e <_Z4loopv+0x278>
							{
								if(checkCount < 10)
    52a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    52aa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    52ae:	8a 30       	cpi	r24, 0x0A	; 10
    52b0:	91 05       	cpc	r25, r1
    52b2:	2c f4       	brge	.+10     	; 0x52be <_Z4loopv+0x218>
								{
									checkCount++;
    52b4:	01 96       	adiw	r24, 0x01	; 1
    52b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    52ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ4loopvE10checkCount>
								}

								if(checkCount == 3)
    52be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    52c2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    52c6:	03 97       	sbiw	r24, 0x03	; 3
    52c8:	51 f5       	brne	.+84     	; 0x531e <_Z4loopv+0x278>
								{
									g_dtmf_detected = TRUE;
    52ca:	81 e0       	ldi	r24, 0x01	; 1
    52cc:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <g_dtmf_detected>
									quietCount = 0;
    52d0:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ4loopvE10quietCount+0x1>
    52d4:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZZ4loopvE10quietCount>
									g_lastKey = newKey;
    52d8:	00 93 db 04 	sts	0x04DB, r16	; 0x8004db <g_lastKey>

/*#ifdef DEBUG_DTMF */
									if(lb_enabled())
    52dc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <lb_enabled>
    52e0:	88 23       	and	r24, r24
    52e2:	c9 f0       	breq	.+50     	; 0x5316 <_Z4loopv+0x270>
									{
										sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
    52e4:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_lastKey>
    52e8:	1f 92       	push	r1
    52ea:	8f 93       	push	r24
    52ec:	81 e2       	ldi	r24, 0x21	; 33
    52ee:	92 e0       	ldi	r25, 0x02	; 2
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	88 ea       	ldi	r24, 0xA8	; 168
    52f6:	94 e0       	ldi	r25, 0x04	; 4
    52f8:	9f 93       	push	r25
    52fa:	8f 93       	push	r24
    52fc:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
										lb_send_string(g_tempStr, TRUE);
    5300:	61 e0       	ldi	r22, 0x01	; 1
    5302:	88 ea       	ldi	r24, 0xA8	; 168
    5304:	94 e0       	ldi	r25, 0x04	; 4
    5306:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    530a:	0f 90       	pop	r0
    530c:	0f 90       	pop	r0
    530e:	0f 90       	pop	r0
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
									}
/*#endif  / * DEBUG_DTMF * / */

									dtmfEntryError = processDTMFdetection(newKey);
    5316:	80 2f       	mov	r24, r16
    5318:	0e 94 dd 23 	call	0x47ba	; 0x47ba <_Z20processDTMFdetection10DTMF_key_t>
    531c:	18 2f       	mov	r17, r24
										}
#endif  /* DEBUG_DTMF */
								}
							}

							lastKey = newKey;
    531e:	00 93 4a 04 	sts	0x044A, r16	; 0x80044a <_ZZ4loopvE7lastKey>
    5322:	75 c0       	rjmp	.+234    	; 0x540e <_Z4loopv+0x368>
						}
					}
					else
					{
						noiseDetected = TRUE;
						g_dtmf_detected = TRUE;
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <g_dtmf_detected>

						digitalWrite(PIN_LED, ON);
    532a:	61 e0       	ldi	r22, 0x01	; 1
    532c:	80 e1       	ldi	r24, 0x10	; 16
    532e:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
/*					g_config_error = NULL_CONFIG;   / * Trigger a new configuration enunciation * / */

						/*#ifdef DEBUG_DTMF */
						if(lb_enabled())
    5332:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <lb_enabled>
    5336:	88 23       	and	r24, r24
    5338:	09 f4       	brne	.+2      	; 0x533c <_Z4loopv+0x296>
    533a:	69 c0       	rjmp	.+210    	; 0x540e <_Z4loopv+0x368>
						{

							sprintf(g_tempStr, "ClipCount=%d\n", clipCount);
    533c:	8a 81       	ldd	r24, Y+2	; 0x02
    533e:	8f 93       	push	r24
    5340:	89 81       	ldd	r24, Y+1	; 0x01
    5342:	8f 93       	push	r24
    5344:	87 e2       	ldi	r24, 0x27	; 39
    5346:	92 e0       	ldi	r25, 0x02	; 2
    5348:	9f 93       	push	r25
    534a:	8f 93       	push	r24
    534c:	88 ea       	ldi	r24, 0xA8	; 168
    534e:	94 e0       	ldi	r25, 0x04	; 4
    5350:	9f 93       	push	r25
    5352:	8f 93       	push	r24
    5354:	0e 94 b7 33 	call	0x676e	; 0x676e <sprintf>
							lb_send_string(g_tempStr, TRUE);
    5358:	61 e0       	ldi	r22, 0x01	; 1
    535a:	88 ea       	ldi	r24, 0xA8	; 168
    535c:	94 e0       	ldi	r25, 0x04	; 4
    535e:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    5362:	0f 90       	pop	r0
    5364:	0f 90       	pop	r0
    5366:	0f 90       	pop	r0
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	0f 90       	pop	r0
    536e:	4f c0       	rjmp	.+158    	; 0x540e <_Z4loopv+0x368>
				}

				if(!dtmfDetected && !noiseDetected) /* Quiet detected */
				{
					static unsigned long lastQuiet = 0;
					unsigned long delta = g_tick_count - lastQuiet;
    5370:	c0 90 d7 04 	lds	r12, 0x04D7	; 0x8004d7 <g_tick_count>
    5374:	d0 90 d8 04 	lds	r13, 0x04D8	; 0x8004d8 <g_tick_count+0x1>
    5378:	e0 90 d9 04 	lds	r14, 0x04D9	; 0x8004d9 <g_tick_count+0x2>
    537c:	f0 90 da 04 	lds	r15, 0x04DA	; 0x8004da <g_tick_count+0x3>
    5380:	80 90 44 04 	lds	r8, 0x0444	; 0x800444 <_ZZ4loopvE9lastQuiet>
    5384:	90 90 45 04 	lds	r9, 0x0445	; 0x800445 <_ZZ4loopvE9lastQuiet+0x1>
    5388:	a0 90 46 04 	lds	r10, 0x0446	; 0x800446 <_ZZ4loopvE9lastQuiet+0x2>
    538c:	b0 90 47 04 	lds	r11, 0x0447	; 0x800447 <_ZZ4loopvE9lastQuiet+0x3>

					/* Quieting must be detected at least 3 times in less than 2 seconds before another key can be accepted */
					if(quietCount++ > 2)
    5390:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_ZZ4loopvE10quietCount>
    5394:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <_ZZ4loopvE10quietCount+0x1>
    5398:	9c 01       	movw	r18, r24
    539a:	2f 5f       	subi	r18, 0xFF	; 255
    539c:	3f 4f       	sbci	r19, 0xFF	; 255
    539e:	30 93 49 04 	sts	0x0449, r19	; 0x800449 <_ZZ4loopvE10quietCount+0x1>
    53a2:	20 93 48 04 	sts	0x0448, r18	; 0x800448 <_ZZ4loopvE10quietCount>
    53a6:	03 97       	sbiw	r24, 0x03	; 3
    53a8:	0c f4       	brge	.+2      	; 0x53ac <_Z4loopv+0x306>
    53aa:	47 c0       	rjmp	.+142    	; 0x543a <_Z4loopv+0x394>
					{
						g_dtmf_detected = FALSE;
    53ac:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_dtmf_detected>
						if(g_transmissions_disabled && !g_LED_enunciating)
    53b0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    53b4:	88 23       	and	r24, r24
    53b6:	29 f0       	breq	.+10     	; 0x53c2 <_Z4loopv+0x31c>
    53b8:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_LED_enunciating>
    53bc:	88 23       	and	r24, r24
    53be:	09 f4       	brne	.+2      	; 0x53c2 <_Z4loopv+0x31c>
    53c0:	12 c1       	rjmp	.+548    	; 0x55e6 <_Z4loopv+0x540>
						{
							digitalWrite(PIN_LED, OFF);
						}

						if(delta < TIMER2_SECONDS_2)
    53c2:	c8 18       	sub	r12, r8
    53c4:	d9 08       	sbc	r13, r9
    53c6:	ea 08       	sbc	r14, r10
    53c8:	fb 08       	sbc	r15, r11
    53ca:	27 e2       	ldi	r18, 0x27	; 39
    53cc:	c2 16       	cp	r12, r18
    53ce:	2b e0       	ldi	r18, 0x0B	; 11
    53d0:	d2 06       	cpc	r13, r18
    53d2:	e1 04       	cpc	r14, r1
    53d4:	f1 04       	cpc	r15, r1
    53d6:	20 f4       	brcc	.+8      	; 0x53e0 <_Z4loopv+0x33a>
						{
							checkCount = 0;
    53d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    53dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ4loopvE10checkCount>
						}

						quietCount = 0;
    53e0:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ4loopvE10quietCount+0x1>
    53e4:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZZ4loopvE10quietCount>
						lastQuiet = g_tick_count;
    53e8:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_tick_count>
    53ec:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <g_tick_count+0x1>
    53f0:	a0 91 d9 04 	lds	r26, 0x04D9	; 0x8004d9 <g_tick_count+0x2>
    53f4:	b0 91 da 04 	lds	r27, 0x04DA	; 0x8004da <g_tick_count+0x3>
    53f8:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZZ4loopvE9lastQuiet>
    53fc:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <_ZZ4loopvE9lastQuiet+0x1>
    5400:	a0 93 46 04 	sts	0x0446, r26	; 0x800446 <_ZZ4loopvE9lastQuiet+0x2>
    5404:	b0 93 47 04 	sts	0x0447, r27	; 0x800447 <_ZZ4loopvE9lastQuiet+0x3>
						lastKey = '\0';
    5408:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZZ4loopvE7lastKey>
    540c:	16 c0       	rjmp	.+44     	; 0x543a <_Z4loopv+0x394>
					}
				}
				else if(g_tone_duration_ticks >= TIMER2_SECONDS_5)  /* The most likely cause of such a long tone is loud noise */
    540e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_tone_duration_ticks>
    5412:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_tone_duration_ticks+0x1>
    5416:	82 3e       	cpi	r24, 0xE2	; 226
    5418:	9b 41       	sbci	r25, 0x1B	; 27
    541a:	78 f0       	brcs	.+30     	; 0x543a <_Z4loopv+0x394>
				{
					g_dtmf_detected = FALSE;
    541c:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_dtmf_detected>
					g_config_error = NULL_CONFIG;
    5420:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>

					if(g_transmissions_disabled && !g_LED_enunciating)
    5424:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    5428:	88 23       	and	r24, r24
    542a:	29 f0       	breq	.+10     	; 0x5436 <_Z4loopv+0x390>
    542c:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_LED_enunciating>
    5430:	88 23       	and	r24, r24
    5432:	09 f4       	brne	.+2      	; 0x5436 <_Z4loopv+0x390>
    5434:	dd c0       	rjmp	.+442    	; 0x55f0 <_Z4loopv+0x54a>
					{
						digitalWrite(PIN_LED, OFF);
					}

					lastKey = '\0';
    5436:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZZ4loopvE7lastKey>
				}

				ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    543a:	ea e7       	ldi	r30, 0x7A	; 122
    543c:	f0 e0       	ldi	r31, 0x00	; 0
    543e:	80 81       	ld	r24, Z
    5440:	88 60       	ori	r24, 0x08	; 8
    5442:	80 83       	st	Z, r24
				ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    5444:	80 81       	ld	r24, Z
    5446:	80 64       	ori	r24, 0x40	; 64
    5448:	80 83       	st	Z, r24
			}
		}

	if(!g_on_the_air)
    544a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_on_the_air>
    544e:	81 11       	cpse	r24, r1
    5450:	e1 c0       	rjmp	.+450    	; 0x5614 <_Z4loopv+0x56e>
	{
		if(g_dtmf_error_countdown)
    5452:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_dtmf_error_countdown>
    5456:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_dtmf_error_countdown+0x1>
    545a:	89 2b       	or	r24, r25
    545c:	19 f0       	breq	.+6      	; 0x5464 <_Z4loopv+0x3be>
		{
			g_dtmf_detected = FALSE;
    545e:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_dtmf_detected>
    5462:	d8 c0       	rjmp	.+432    	; 0x5614 <_Z4loopv+0x56e>
		}
		else if(dtmfEntryError)
    5464:	11 23       	and	r17, r17
    5466:	01 f1       	breq	.+64     	; 0x54a8 <_Z4loopv+0x402>
		{
			BOOL repeat = FALSE;
    5468:	1b 82       	std	Y+3, r1	; 0x03
			makeMorse(DTMF_ERROR_BLINK_PATTERN, &repeat, NULL);
    546a:	40 e0       	ldi	r20, 0x00	; 0
    546c:	50 e0       	ldi	r21, 0x00	; 0
    546e:	be 01       	movw	r22, r28
    5470:	6d 5f       	subi	r22, 0xFD	; 253
    5472:	7f 4f       	sbci	r23, 0xFF	; 255
    5474:	85 e3       	ldi	r24, 0x35	; 53
    5476:	92 e0       	ldi	r25, 0x02	; 2
    5478:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(30);
    547c:	8e e2       	ldi	r24, 0x2E	; 46
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <g_code_throttle+0x1>
    5484:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_code_throttle>
			g_LED_enunciating = TRUE;
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <g_LED_enunciating>
			g_dtmf_detected = FALSE;
    548e:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_dtmf_detected>
			g_dtmf_error_countdown = TIMER2_SECONDS_3;
    5492:	8b eb       	ldi	r24, 0xBB	; 187
    5494:	90 e1       	ldi	r25, 0x10	; 16
    5496:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_dtmf_error_countdown+0x1>
    549a:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_dtmf_error_countdown>
			g_LED_Enunciation_holdoff = 0;
    549e:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    54a2:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <g_LED_Enunciation_holdoff>
    54a6:	b6 c0       	rjmp	.+364    	; 0x5614 <_Z4loopv+0x56e>
		}
		else if(g_dtmf_detected)
    54a8:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <g_dtmf_detected>
    54ac:	88 23       	and	r24, r24
    54ae:	39 f0       	breq	.+14     	; 0x54be <_Z4loopv+0x418>
		{
			digitalWrite(PIN_LED, ON);
    54b0:	61 e0       	ldi	r22, 0x01	; 1
    54b2:	80 e1       	ldi	r24, 0x10	; 16
    54b4:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    54b8:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_config_error>
    54bc:	ab c0       	rjmp	.+342    	; 0x5614 <_Z4loopv+0x56e>
		}
		else if(g_transmissions_disabled)
    54be:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    54c2:	88 23       	and	r24, r24
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <_Z4loopv+0x422>
    54c6:	69 c0       	rjmp	.+210    	; 0x559a <_Z4loopv+0x4f4>
		{
			if(g_LED_timeout_countdown && !g_LED_Enunciation_holdoff && !g_DTMF_sentence_in_progress_ticks)
    54c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    54cc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    54d0:	89 2b       	or	r24, r25
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <_Z4loopv+0x430>
    54d4:	9d c0       	rjmp	.+314    	; 0x5610 <_Z4loopv+0x56a>
    54d6:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_LED_Enunciation_holdoff>
    54da:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_LED_Enunciation_holdoff+0x1>
    54de:	89 2b       	or	r24, r25
    54e0:	09 f0       	breq	.+2      	; 0x54e4 <_Z4loopv+0x43e>
    54e2:	96 c0       	rjmp	.+300    	; 0x5610 <_Z4loopv+0x56a>
    54e4:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_DTMF_sentence_in_progress_ticks>
    54e8:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_DTMF_sentence_in_progress_ticks+0x1>
    54ec:	89 2b       	or	r24, r25
    54ee:	09 f4       	brne	.+2      	; 0x54f2 <_Z4loopv+0x44c>
    54f0:	84 c0       	rjmp	.+264    	; 0x55fa <_Z4loopv+0x554>
    54f2:	8e c0       	rjmp	.+284    	; 0x5610 <_Z4loopv+0x56a>
				ConfigurationState_t hold_config_err = g_config_error;
				g_config_error = clockConfigurationCheck();

				if(g_config_error != hold_config_err)
				{
					if(g_config_error == CONFIGURATION_ERROR)
    54f4:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_config_error>
    54f8:	82 30       	cpi	r24, 0x02	; 2
    54fa:	a1 f4       	brne	.+40     	; 0x5524 <_Z4loopv+0x47e>
					{
						BOOL repeat = TRUE;
    54fc:	11 e0       	ldi	r17, 0x01	; 1
    54fe:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    5500:	40 e0       	ldi	r20, 0x00	; 0
    5502:	50 e0       	ldi	r21, 0x00	; 0
    5504:	be 01       	movw	r22, r28
    5506:	6d 5f       	subi	r22, 0xFD	; 253
    5508:	7f 4f       	sbci	r23, 0xFF	; 255
    550a:	8e e3       	ldi	r24, 0x3E	; 62
    550c:	92 e0       	ldi	r25, 0x02	; 2
    550e:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    5512:	8c e8       	ldi	r24, 0x8C	; 140
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <g_code_throttle+0x1>
    551a:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_code_throttle>
						g_LED_enunciating = TRUE;
    551e:	10 93 5f 05 	sts	0x055F, r17	; 0x80055f <g_LED_enunciating>
    5522:	78 c0       	rjmp	.+240    	; 0x5614 <_Z4loopv+0x56e>
					}
					else if(g_config_error == WAITING_FOR_START)
    5524:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_config_error>
    5528:	81 30       	cpi	r24, 0x01	; 1
    552a:	a1 f4       	brne	.+40     	; 0x5554 <_Z4loopv+0x4ae>
					{
						BOOL repeat = TRUE;
    552c:	11 e0       	ldi	r17, 0x01	; 1
    552e:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    5530:	40 e0       	ldi	r20, 0x00	; 0
    5532:	50 e0       	ldi	r21, 0x00	; 0
    5534:	be 01       	movw	r22, r28
    5536:	6d 5f       	subi	r22, 0xFD	; 253
    5538:	7f 4f       	sbci	r23, 0xFF	; 255
    553a:	81 e4       	ldi	r24, 0x41	; 65
    553c:	92 e0       	ldi	r25, 0x02	; 2
    553e:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    5542:	86 e4       	ldi	r24, 0x46	; 70
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <g_code_throttle+0x1>
    554a:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_code_throttle>
						g_LED_enunciating = TRUE;
    554e:	10 93 5f 05 	sts	0x055F, r17	; 0x80055f <g_LED_enunciating>
    5552:	60 c0       	rjmp	.+192    	; 0x5614 <_Z4loopv+0x56e>
					}
					else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    5554:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_config_error>
    5558:	84 30       	cpi	r24, 0x04	; 4
    555a:	21 f0       	breq	.+8      	; 0x5564 <_Z4loopv+0x4be>
    555c:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_config_error>
    5560:	83 30       	cpi	r24, 0x03	; 3
    5562:	a1 f4       	brne	.+40     	; 0x558c <_Z4loopv+0x4e6>
					{
						BOOL repeat = TRUE;
    5564:	11 e0       	ldi	r17, 0x01	; 1
    5566:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    5568:	40 e0       	ldi	r20, 0x00	; 0
    556a:	50 e0       	ldi	r21, 0x00	; 0
    556c:	be 01       	movw	r22, r28
    556e:	6d 5f       	subi	r22, 0xFD	; 253
    5570:	7f 4f       	sbci	r23, 0xFF	; 255
    5572:	8e e3       	ldi	r24, 0x3E	; 62
    5574:	92 e0       	ldi	r25, 0x02	; 2
    5576:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    557a:	8c e8       	ldi	r24, 0x8C	; 140
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <g_code_throttle+0x1>
    5582:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_code_throttle>
						g_LED_enunciating = TRUE;
    5586:	10 93 5f 05 	sts	0x055F, r17	; 0x80055f <g_LED_enunciating>
    558a:	44 c0       	rjmp	.+136    	; 0x5614 <_Z4loopv+0x56e>
					}
					else
					{
						g_LED_enunciating = FALSE;
    558c:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_LED_enunciating>
						digitalWrite(PIN_LED, OFF); /* ensure LED is off */
    5590:	60 e0       	ldi	r22, 0x00	; 0
    5592:	80 e1       	ldi	r24, 0x10	; 16
    5594:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    5598:	3d c0       	rjmp	.+122    	; 0x5614 <_Z4loopv+0x56e>
				g_LED_enunciating = FALSE;
			}
		}
		else
		{
			g_LED_enunciating = FALSE;
    559a:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_LED_enunciating>
			digitalWrite(PIN_LED, OFF); /* ensure LED is off */
    559e:	60 e0       	ldi	r22, 0x00	; 0
    55a0:	80 e1       	ldi	r24, 0x10	; 16
    55a2:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
		}
	}
#endif  /* !INIT_EEPROM_ONLY */
}
    55a6:	36 c0       	rjmp	.+108    	; 0x5614 <_Z4loopv+0x56e>
    55a8:	0f 2e       	mov	r0, r31
    55aa:	fd e5       	ldi	r31, 0x5D	; 93
    55ac:	af 2e       	mov	r10, r31
    55ae:	f2 e0       	ldi	r31, 0x02	; 2
    55b0:	bf 2e       	mov	r11, r31
    55b2:	f0 2d       	mov	r31, r0

/***********************************************************************
 *   Here is the main loop
 ************************************************************************/
void loop()
{
    55b4:	c1 2c       	mov	r12, r1
    55b6:	91 2c       	mov	r9, r1
    55b8:	81 2c       	mov	r8, r1
    55ba:	71 2c       	mov	r7, r1
    55bc:	61 2c       	mov	r6, r1
    55be:	55 24       	eor	r5, r5
    55c0:	5a 94       	dec	r5
    55c2:	e4 cd       	rjmp	.-1080   	; 0x518c <_Z4loopv+0xe6>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(dtmfY >= 0)
    55c4:	55 20       	and	r5, r5
    55c6:	0c f4       	brge	.+2      	; 0x55ca <_Z4loopv+0x524>
    55c8:	d3 ce       	rjmp	.-602    	; 0x5370 <_Z4loopv+0x2ca>
    55ca:	0f 2e       	mov	r0, r31
    55cc:	fd e6       	ldi	r31, 0x6D	; 109
    55ce:	af 2e       	mov	r10, r31
    55d0:	f2 e0       	ldi	r31, 0x02	; 2
    55d2:	bf 2e       	mov	r11, r31
    55d4:	f0 2d       	mov	r31, r0
    55d6:	c1 2c       	mov	r12, r1
    55d8:	91 2c       	mov	r9, r1
    55da:	81 2c       	mov	r8, r1
    55dc:	71 2c       	mov	r7, r1
    55de:	61 2c       	mov	r6, r1
    55e0:	44 24       	eor	r4, r4
    55e2:	4a 94       	dec	r4
    55e4:	0b ce       	rjmp	.-1002   	; 0x51fc <_Z4loopv+0x156>
					if(quietCount++ > 2)
					{
						g_dtmf_detected = FALSE;
						if(g_transmissions_disabled && !g_LED_enunciating)
						{
							digitalWrite(PIN_LED, OFF);
    55e6:	60 e0       	ldi	r22, 0x00	; 0
    55e8:	80 e1       	ldi	r24, 0x10	; 16
    55ea:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    55ee:	e9 ce       	rjmp	.-558    	; 0x53c2 <_Z4loopv+0x31c>
					g_dtmf_detected = FALSE;
					g_config_error = NULL_CONFIG;

					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED, OFF);
    55f0:	60 e0       	ldi	r22, 0x00	; 0
    55f2:	80 e1       	ldi	r24, 0x10	; 16
    55f4:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    55f8:	1e cf       	rjmp	.-452    	; 0x5436 <_Z4loopv+0x390>
		}
		else if(g_transmissions_disabled)
		{
			if(g_LED_timeout_countdown && !g_LED_Enunciation_holdoff && !g_DTMF_sentence_in_progress_ticks)
			{
				ConfigurationState_t hold_config_err = g_config_error;
    55fa:	10 91 10 05 	lds	r17, 0x0510	; 0x800510 <g_config_error>
				g_config_error = clockConfigurationCheck();
    55fe:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_Z23clockConfigurationCheckv>
    5602:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_config_error>

				if(g_config_error != hold_config_err)
    5606:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_config_error>
    560a:	18 13       	cpse	r17, r24
    560c:	73 cf       	rjmp	.-282    	; 0x54f4 <_Z4loopv+0x44e>
    560e:	02 c0       	rjmp	.+4      	; 0x5614 <_Z4loopv+0x56e>
					}
				}
			}
			else
			{
				g_LED_enunciating = FALSE;
    5610:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_LED_enunciating>
			g_LED_enunciating = FALSE;
			digitalWrite(PIN_LED, OFF); /* ensure LED is off */
		}
	}
#endif  /* !INIT_EEPROM_ONLY */
}
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	0f 90       	pop	r0
    561a:	df 91       	pop	r29
    561c:	cf 91       	pop	r28
    561e:	1f 91       	pop	r17
    5620:	0f 91       	pop	r16
    5622:	ff 90       	pop	r15
    5624:	ef 90       	pop	r14
    5626:	df 90       	pop	r13
    5628:	cf 90       	pop	r12
    562a:	bf 90       	pop	r11
    562c:	af 90       	pop	r10
    562e:	9f 90       	pop	r9
    5630:	8f 90       	pop	r8
    5632:	7f 90       	pop	r7
    5634:	6f 90       	pop	r6
    5636:	5f 90       	pop	r5
    5638:	4f 90       	pop	r4
    563a:	08 95       	ret

0000563c <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    563c:	63 e0       	ldi	r22, 0x03	; 3
    563e:	81 e1       	ldi	r24, 0x11	; 17
    5640:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	pinMode(PIN_LED, OUTPUT);                             /* This is the enunciator LED */
    5644:	61 e0       	ldi	r22, 0x01	; 1
    5646:	80 e1       	ldi	r24, 0x10	; 16
    5648:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_LED, OFF);
    564c:	60 e0       	ldi	r22, 0x00	; 0
    564e:	80 e1       	ldi	r24, 0x10	; 16
    5650:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    5654:	61 e0       	ldi	r22, 0x01	; 1
    5656:	86 e0       	ldi	r24, 0x06	; 6
    5658:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	86 e0       	ldi	r24, 0x06	; 6
    5660:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    5664:	61 e0       	ldi	r22, 0x01	; 1
    5666:	85 e0       	ldi	r24, 0x05	; 5
    5668:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    566c:	60 e0       	ldi	r22, 0x00	; 0
    566e:	85 e0       	ldi	r24, 0x05	; 5
    5670:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    5674:	61 e0       	ldi	r22, 0x01	; 1
    5676:	84 e0       	ldi	r24, 0x04	; 4
    5678:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	84 e0       	ldi	r24, 0x04	; 4
    5680:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    5684:	60 e0       	ldi	r22, 0x00	; 0
    5686:	84 e1       	ldi	r24, 0x14	; 20
    5688:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    568c:	60 e0       	ldi	r22, 0x00	; 0
    568e:	85 e1       	ldi	r24, 0x15	; 21
    5690:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	pinMode(PIN_PWDN, OUTPUT);
    5694:	61 e0       	ldi	r22, 0x01	; 1
    5696:	87 e0       	ldi	r24, 0x07	; 7
    5698:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_PWDN, ON);
    569c:	61 e0       	ldi	r22, 0x01	; 1
    569e:	87 e0       	ldi	r24, 0x07	; 7
    56a0:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_SCL, INPUT_PULLUP);
    56a4:	63 e0       	ldi	r22, 0x03	; 3
    56a6:	83 e1       	ldi	r24, 0x13	; 19
    56a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_SDA, INPUT_PULLUP);
    56ac:	63 e0       	ldi	r22, 0x03	; 3
    56ae:	82 e1       	ldi	r24, 0x12	; 18
    56b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	pinMode(PIN_RTC_SQW, INPUT_PULLUP);
    56b4:	63 e0       	ldi	r22, 0x03	; 3
    56b6:	82 e0       	ldi	r24, 0x02	; 2
    56b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	linkbus_disable();
    56bc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <linkbus_disable>

		pinMode(PIN_UNUSED_8, OUTPUT);
		digitalWrite(PIN_UNUSED_8, OFF);
#else
		/*	Set unused port pins */
		pinMode(PIN_UNUSED_1, OUTPUT);
    56c0:	61 e0       	ldi	r22, 0x01	; 1
    56c2:	83 e0       	ldi	r24, 0x03	; 3
    56c4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
		digitalWrite(PIN_UNUSED_1, OFF);
    56c8:	60 e0       	ldi	r22, 0x00	; 0
    56ca:	83 e0       	ldi	r24, 0x03	; 3
    56cc:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

		pinMode(PIN_UNUSED_2, OUTPUT);
    56d0:	61 e0       	ldi	r22, 0x01	; 1
    56d2:	8e e0       	ldi	r24, 0x0E	; 14
    56d4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
		digitalWrite(PIN_UNUSED_2, OFF);
    56d8:	60 e0       	ldi	r22, 0x00	; 0
    56da:	8e e0       	ldi	r24, 0x0E	; 14
    56dc:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

		pinMode(PIN_UNUSED_3, OUTPUT);
    56e0:	61 e0       	ldi	r22, 0x01	; 1
    56e2:	8f e0       	ldi	r24, 0x0F	; 15
    56e4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
		digitalWrite(PIN_UNUSED_3, OFF);
    56e8:	60 e0       	ldi	r22, 0x00	; 0
    56ea:	8f e0       	ldi	r24, 0x0F	; 15
    56ec:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

		/*	Set attenuator control port pins */
		DDRB |= 0x3F;
    56f0:	84 b1       	in	r24, 0x04	; 4
    56f2:	8f 63       	ori	r24, 0x3F	; 63
    56f4:	84 b9       	out	0x04, r24	; 4
		PORTB &= 0xC0;
    56f6:	85 b1       	in	r24, 0x05	; 5
    56f8:	80 7c       	andi	r24, 0xC0	; 192
    56fa:	85 b9       	out	0x05, r24	; 5
#endif  /* !SUPPORT_ONLY_80M */

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars();                                 /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    56fc:	0e 94 c4 09 	call	0x1388	; 0x1388 <i2c_init>
		BOOL eepromErr = ee_mgr.readNonVols();
    5700:	8e e6       	ldi	r24, 0x6E	; 110
    5702:	95 e0       	ldi	r25, 0x05	; 5
    5704:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13EepromManager11readNonVolsEv>
    5708:	c8 2f       	mov	r28, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    570a:	61 e0       	ldi	r22, 0x01	; 1
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    5712:	f8 94       	cli

	/*******************************************************************
	 *  TIMER2 is for periodic interrupts to drive Morse code generation
	 *  Reset control registers */
	TCCR2A = 0;
    5714:	a0 eb       	ldi	r26, 0xB0	; 176
    5716:	b0 e0       	ldi	r27, 0x00	; 0
    5718:	1c 92       	st	X, r1
	TCCR2B = 0;
    571a:	e1 eb       	ldi	r30, 0xB1	; 177
    571c:	f0 e0       	ldi	r31, 0x00	; 0
    571e:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    5720:	8c 91       	ld	r24, X
    5722:	82 60       	ori	r24, 0x02	; 2
    5724:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    5726:	80 81       	ld	r24, Z
    5728:	87 60       	ori	r24, 0x07	; 7
    572a:	80 83       	st	Z, r24

#if F_CPU == 16000000UL
		OCR2A = 0x0C;                                   /* set frequency to ~300 Hz (0x0c) */
    572c:	8c e0       	ldi	r24, 0x0C	; 12
    572e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
#else
		OCR2A = 0x06;                                   /* set frequency to ~300 Hz (0x0c) */
#endif

	OCR2B = 0x00;
    5732:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    5736:	e6 eb       	ldi	r30, 0xB6	; 182
    5738:	f0 e0       	ldi	r31, 0x00	; 0
    573a:	80 81       	ld	r24, Z
    573c:	8f 7d       	andi	r24, 0xDF	; 223
    573e:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    5740:	e0 e7       	ldi	r30, 0x70	; 112
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    5746:	80 81       	ld	r24, Z
    5748:	84 60       	ori	r24, 0x04	; 4
    574a:	80 83       	st	Z, r24

	/*******************************************************************
	 *  Timer 1 is used for controlling the attenuator for AM generation
	 *  set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                 /* set entire TCCR1A register to 0 */
    574c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                 /* same for TCCR1B */
    5750:	e1 e8       	ldi	r30, 0x81	; 129
    5752:	f0 e0       	ldi	r31, 0x00	; 0
    5754:	10 82       	st	Z, r1
	TCNT1 = 0;                  /* initialize counter value to 0 */
    5756:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    575a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
#if !SUPPORT_ONLY_80M
		/* turn on CTC mode */
		TCCR1B |= (1 << WGM12);
    575e:	80 81       	ld	r24, Z
    5760:	88 60       	ori	r24, 0x08	; 8
    5762:	80 83       	st	Z, r24
		/* Set CS10 bit for no prescaling */
		TCCR1B |= (1 << CS10);
    5764:	80 81       	ld	r24, Z
    5766:	81 60       	ori	r24, 0x01	; 1
    5768:	80 83       	st	Z, r24
#endif  /* !SUPPORT_ONLY_80M */

	/********************************************************************/
	/* Timer 0 is for FM audio tone generation and control
	 *  Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    576a:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    576c:	84 b5       	in	r24, 0x24	; 36
    576e:	82 60       	ori	r24, 0x02	; 2
    5770:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    5772:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    5774:	85 b5       	in	r24, 0x25	; 37
    5776:	84 60       	ori	r24, 0x04	; 4
    5778:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    577a:	8f e2       	ldi	r24, 0x2F	; 47
    577c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    577e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

	/*******************************************************************
	 *  Sync button pin change interrupt */
	PCMSK2 = 0x00;
    5782:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	PCMSK1 = 0x00;
    5786:	ec e6       	ldi	r30, 0x6C	; 108
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	10 82       	st	Z, r1
	PCMSK1 = (1 << PCINT11);    /* Enable PCINT11 */
    578c:	88 e0       	ldi	r24, 0x08	; 8
    578e:	80 83       	st	Z, r24
	PCICR = 0x00;
    5790:	e8 e6       	ldi	r30, 0x68	; 104
    5792:	f0 e0       	ldi	r31, 0x00	; 0
    5794:	10 82       	st	Z, r1
	PCICR = (1 << PCIE1);       /* Enable pin change interrupt 1 */
    5796:	82 e0       	ldi	r24, 0x02	; 2
    5798:	80 83       	st	Z, r24
#if SUPPORT_ONLY_80M
		setAMToneFrequency(AM_DISABLED);
#else
		/*******************************************************************
		*  AM attenuator initialization (also affects FM tone enable)     */
		setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    579a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_AM_audio_frequency>
    579e:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <_Z18setAMToneFrequency14AM_Tone_Freq_t>
#endif /* !SUPPORT_ONLY_80M */

	sei();                                          /* Enable interrupts */
    57a2:	78 94       	sei

	linkbus_init(BAUD);                             /* Start the Link Bus serial comms */
    57a4:	60 e0       	ldi	r22, 0x00	; 0
    57a6:	71 ee       	ldi	r23, 0xE1	; 225
    57a8:	80 e0       	ldi	r24, 0x00	; 0
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	0e 94 0a 0c 	call	0x1814	; 0x1814 <linkbus_init>

#ifndef TRANQUILIZE_WATCHDOG
		wdt_init(WD_SW_RESETS);
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z8wdt_init7WDReset>
		wdt_reset();                                /* HW watchdog */
    57b6:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */

	g_reset_button_held = !digitalRead(PIN_SYNC);
    57b8:	81 e1       	ldi	r24, 0x11	; 17
    57ba:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    57be:	91 e0       	ldi	r25, 0x01	; 1
    57c0:	81 11       	cpse	r24, r1
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    57c8:	cc 23       	and	r28, r28
    57ca:	29 f0       	breq	.+10     	; 0x57d6 <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    57cc:	61 e0       	ldi	r22, 0x01	; 1
    57ce:	8e e4       	ldi	r24, 0x4E	; 78
    57d0:	92 e0       	ldi	r25, 0x02	; 2
    57d2:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
		}

#if INCLUDE_RV3028_SUPPORT
		BOOL result = RTC_1s_sqw(ON);
#else
		RTC_1s_sqw(ON);
    57d6:	81 e0       	ldi	r24, 0x01	; 1
    57d8:	0e 94 21 05 	call	0xa42	; 0xa42 <_Z10RTC_1s_sqwh>
#endif

#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    57dc:	8e e6       	ldi	r24, 0x6E	; 110
    57de:	95 e0       	ldi	r25, 0x05	; 5
    57e0:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13EepromManager9send_HelpEv>
		{
			lb_send_string(g_tempStr, TRUE);
		}
#endif

		reportConfigErrors();
    57e4:	0e 94 a7 1a 	call	0x354e	; 0x354e <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    57e8:	0e 94 a7 0c 	call	0x194e	; 0x194e <lb_send_NewPrompt>

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 *  INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    57f2:	e9 e6       	ldi	r30, 0x69	; 105
    57f4:	f0 e0       	ldi	r31, 0x00	; 0
    57f6:	80 81       	ld	r24, Z
    57f8:	82 60       	ori	r24, 0x02	; 2
    57fa:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    57fc:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    57fe:	0e 94 53 28 	call	0x50a6	; 0x50a6 <_Z4loopv>
    5802:	fd cf       	rjmp	.-6      	; 0x57fe <main+0x1c2>

00005804 <_GLOBAL__sub_I_ee_mgr>:
	{
		key = D_KEY;
	}

	return( key);
}
    5804:	0f 93       	push	r16
    5806:	1f 93       	push	r17
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

#include <avr/wdt.h>

EepromManager ee_mgr;
    5808:	8e e6       	ldi	r24, 0x6E	; 110
    580a:	95 e0       	ldi	r25, 0x05	; 5
    580c:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN13EepromManagerC1Ev>
volatile unsigned int g_tone_duration_ticks = 0;
volatile unsigned int g_LED_Enunciation_holdoff = 0;
volatile unsigned int g_DTMF_sentence_in_progress_ticks = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    5810:	00 e0       	ldi	r16, 0x00	; 0
    5812:	18 e7       	ldi	r17, 0x78	; 120
    5814:	26 e9       	ldi	r18, 0x96	; 150
    5816:	36 e4       	ldi	r19, 0x46	; 70
    5818:	40 e0       	ldi	r20, 0x00	; 0
    581a:	50 e0       	ldi	r21, 0x00	; 0
    581c:	69 e4       	ldi	r22, 0x49	; 73
    581e:	73 e4       	ldi	r23, 0x43	; 67
    5820:	80 ed       	ldi	r24, 0xD0	; 208
    5822:	94 e0       	ldi	r25, 0x04	; 4
    5824:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN8GoertzelC1Eff>
	{
		key = D_KEY;
	}

	return( key);
}
    5828:	1f 91       	pop	r17
    582a:	0f 91       	pop	r16
    582c:	08 95       	ret

0000582e <_GLOBAL__sub_D_ee_mgr>:
volatile unsigned int g_tone_duration_ticks = 0;
volatile unsigned int g_LED_Enunciation_holdoff = 0;
volatile unsigned int g_DTMF_sentence_in_progress_ticks = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    582e:	80 ed       	ldi	r24, 0xD0	; 208
    5830:	94 e0       	ldi	r25, 0x04	; 4
    5832:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN8GoertzelD1Ev>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

#include <avr/wdt.h>

EepromManager ee_mgr;
    5836:	8e e6       	ldi	r24, 0x6E	; 110
    5838:	95 e0       	ldi	r25, 0x05	; 5
    583a:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13EepromManagerD1Ev>
    583e:	08 95       	ret

00005840 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	0e 94 71 33 	call	0x66e2	; 0x66e2 <toupper>

	switch( c )
    5846:	fc 01       	movw	r30, r24
    5848:	ff 27       	eor	r31, r31
    584a:	b0 97       	sbiw	r30, 0x20	; 32
    584c:	ed 35       	cpi	r30, 0x5D	; 93
    584e:	f1 05       	cpc	r31, r1
    5850:	08 f0       	brcs	.+2      	; 0x5854 <_Z12getMorseCharc+0x14>
    5852:	e4 c0       	rjmp	.+456    	; 0x5a1c <_Z12getMorseCharc+0x1dc>
    5854:	e0 54       	subi	r30, 0x40	; 64
    5856:	ff 4f       	sbci	r31, 0xFF	; 255
    5858:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    585c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    585e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5860:	61 e0       	ldi	r22, 0x01	; 1
    5862:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5864:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    5866:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5868:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    586a:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    586c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    586e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5870:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    5872:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    5874:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    5876:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5878:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    587a:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    587c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    587e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5880:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    5882:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5884:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    5886:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5888:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    588a:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    588c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    588e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5890:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    5892:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    5894:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    5896:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5898:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    589a:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    589c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    589e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    58a0:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    58a2:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    58a4:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    58a6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    58a8:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    58aa:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    58ac:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    58ae:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    58b0:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    58b2:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    58b4:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    58b6:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    58b8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    58ba:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    58bc:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    58be:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    58c0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    58c2:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    58c4:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    58c6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    58c8:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    58ca:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    58cc:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    58ce:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    58d0:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    58d2:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    58d4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    58d6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    58d8:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    58da:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    58dc:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    58de:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    58e0:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    58e2:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    58e4:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    58e6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    58e8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    58ea:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    58ec:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    58ee:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    58f0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    58f2:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    58f4:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    58f6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    58f8:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    58fa:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    58fc:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    58fe:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    5900:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    5902:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5904:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    5906:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5908:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    590a:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    590c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    590e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5910:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    5912:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    5914:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    5916:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5918:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    591a:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    591c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    591e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5920:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    5922:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    5924:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    5926:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    5928:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    592a:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    592c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    592e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5930:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    5932:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5934:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    5936:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    5938:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    593a:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    593c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    593e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    5940:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5942:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5944:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    5946:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    5948:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    594a:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    594c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    594e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5950:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    5952:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5954:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    5956:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5958:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    595a:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    595c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    595e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5960:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5962:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5964:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    5966:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5968:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    596a:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    596c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    596e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    5970:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    5972:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5974:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    5976:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    5978:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    597a:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    597c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    597e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    5980:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5982:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5984:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    5986:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    5988:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    598a:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    598c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    598e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5990:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5992:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5994:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    5996:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    5998:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    599a:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    599c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    599e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    59a0:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    59a2:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    59a4:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    59a6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    59a8:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    59aa:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    59ac:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    59ae:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    59b0:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    59b2:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    59b4:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    59b6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    59b8:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    59ba:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    59bc:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    59be:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    59c0:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    59c2:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    59c4:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    59c6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    59c8:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    59ca:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    59cc:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    59ce:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    59d0:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    59d2:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    59d4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    59d6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    59d8:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    59da:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    59dc:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    59de:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    59e0:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    59e2:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    59e4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    59e6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    59e8:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    59ea:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    59ec:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    59ee:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    59f0:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    59f2:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    59f4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    59f6:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    59f8:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    59fa:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    59fc:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    59fe:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    5a00:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5a02:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    5a04:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    5a06:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    5a08:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    5a0a:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    5a0c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    5a0e:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    5a10:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    5a12:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    5a14:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    5a16:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    5a18:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    5a1a:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    5a1c:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    5a1e:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    5a20:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    5a22:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    5a24:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    5a26:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5a28:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    5a2a:	08 95       	ret

00005a2c <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    5a2c:	cf 93       	push	r28
    5a2e:	df 93       	push	r29
    5a30:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    5a32:	00 97       	sbiw	r24, 0x00	; 0
    5a34:	09 f4       	brne	.+2      	; 0x5a38 <makeMorse+0xc>
    5a36:	41 c0       	rjmp	.+130    	; 0x5aba <makeMorse+0x8e>
	{
		holdKeyDown = FALSE;
    5a38:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>

		if(repeating)
    5a3c:	61 15       	cp	r22, r1
    5a3e:	71 05       	cpc	r23, r1
    5a40:	21 f0       	breq	.+8      	; 0x5a4a <makeMorse+0x1e>
		{
			repeat = *repeating;
    5a42:	db 01       	movw	r26, r22
    5a44:	2c 91       	ld	r18, X
    5a46:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <_ZZ9makeMorseE6repeat>
		}

		if(*s)
    5a4a:	fc 01       	movw	r30, r24
    5a4c:	20 81       	ld	r18, Z
    5a4e:	22 23       	and	r18, r18
    5a50:	31 f1       	breq	.+76     	; 0x5a9e <makeMorse+0x72>
		{
			if(str != s) /* Passing in the same pointer will not change the state of Morse.c */
    5a52:	40 91 78 05 	lds	r20, 0x0578	; 0x800578 <_ZZ9makeMorseE3str>
    5a56:	50 91 79 05 	lds	r21, 0x0579	; 0x800579 <_ZZ9makeMorseE3str+0x1>
    5a5a:	84 17       	cp	r24, r20
    5a5c:	95 07       	cpc	r25, r21
    5a5e:	09 f4       	brne	.+2      	; 0x5a62 <makeMorse+0x36>
    5a60:	e9 c0       	rjmp	.+466    	; 0x5c34 <makeMorse+0x208>
			{
				str = s;
    5a62:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <_ZZ9makeMorseE3str+0x1>
    5a66:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <_ZZ9makeMorseE3str>
				c = ' ';
    5a6a:	80 e2       	ldi	r24, 0x20	; 32
    5a6c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZ9makeMorseE1c>
				morseInProgress = getMorseChar(*str);
    5a70:	82 2f       	mov	r24, r18
    5a72:	0e 94 20 2c 	call	0x5840	; 0x5840 <_Z12getMorseCharc>
    5a76:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <_ZZ9makeMorseE15morseInProgress>
    5a7a:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <_ZZ9makeMorseE15morseInProgress+0x1>
    5a7e:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <_ZZ9makeMorseE15morseInProgress+0x2>
				charIndex = 0;
    5a82:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <_ZZ9makeMorseE9charIndex>
				symbolIndex = 0;
    5a86:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <_ZZ9makeMorseE11symbolIndex>
				elementIndex = 0;
    5a8a:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_ZZ9makeMorseE12elementIndex>
				addedSpace = 0;
    5a8e:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_ZZ9makeMorseE10addedSpace>
				completedString = FALSE;
    5a92:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE15completedString>
				carrierOn = FALSE;
    5a96:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE9carrierOn>
			}

			carrierOn = FALSE;
		}

		return( OFF);
    5a9a:	80 e0       	ldi	r24, 0x00	; 0
    5a9c:	d0 c0       	rjmp	.+416    	; 0x5c3e <makeMorse+0x212>
				carrierOn = FALSE;
			}
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    5a9e:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <_ZZ9makeMorseE3str+0x1>
    5aa2:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZZ9makeMorseE3str>
			completedString = TRUE;
    5aa6:	81 e0       	ldi	r24, 0x01	; 1
    5aa8:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZZ9makeMorseE15completedString>
			if(finished)
    5aac:	20 97       	sbiw	r28, 0x00	; 0
    5aae:	09 f0       	breq	.+2      	; 0x5ab2 <makeMorse+0x86>
			{
				*finished = TRUE;
    5ab0:	88 83       	st	Y, r24
			}

			carrierOn = FALSE;
    5ab2:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE9carrierOn>
		}

		return( OFF);
    5ab6:	80 e0       	ldi	r24, 0x00	; 0
    5ab8:	c2 c0       	rjmp	.+388    	; 0x5c3e <makeMorse+0x212>
	}
	else if(str)
    5aba:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <_ZZ9makeMorseE3str>
    5abe:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <_ZZ9makeMorseE3str+0x1>
    5ac2:	30 97       	sbiw	r30, 0x00	; 0
    5ac4:	09 f4       	brne	.+2      	; 0x5ac8 <makeMorse+0x9c>
    5ac6:	aa c0       	rjmp	.+340    	; 0x5c1c <makeMorse+0x1f0>
	{
		if(repeating)
    5ac8:	61 15       	cp	r22, r1
    5aca:	71 05       	cpc	r23, r1
    5acc:	21 f0       	breq	.+8      	; 0x5ad6 <makeMorse+0xaa>
		{
			*repeating = repeat;
    5ace:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZZ9makeMorseE6repeat>
    5ad2:	db 01       	movw	r26, r22
    5ad4:	8c 93       	st	X, r24
		}

		if(completedString)
    5ad6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ZZ9makeMorseE15completedString>
    5ada:	88 23       	and	r24, r24
    5adc:	49 f0       	breq	.+18     	; 0x5af0 <makeMorse+0xc4>
		{
			if(finished)
    5ade:	20 97       	sbiw	r28, 0x00	; 0
    5ae0:	09 f4       	brne	.+2      	; 0x5ae4 <makeMorse+0xb8>
    5ae2:	aa c0       	rjmp	.+340    	; 0x5c38 <makeMorse+0x20c>
			{
				*finished = TRUE;
    5ae4:	81 e0       	ldi	r24, 0x01	; 1
    5ae6:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    5ae8:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>
			}
			return( OFF);
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	a7 c0       	rjmp	.+334    	; 0x5c3e <makeMorse+0x212>
		}

		if(elementIndex)
    5af0:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <_ZZ9makeMorseE12elementIndex>
    5af4:	88 23       	and	r24, r24
    5af6:	21 f0       	breq	.+8      	; 0x5b00 <makeMorse+0xd4>
		{
			elementIndex--;
    5af8:	81 50       	subi	r24, 0x01	; 1
    5afa:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <_ZZ9makeMorseE12elementIndex>
    5afe:	7f c0       	rjmp	.+254    	; 0x5bfe <makeMorse+0x1d2>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    5b00:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <_ZZ9makeMorseE9carrierOn>
    5b04:	88 23       	and	r24, r24
    5b06:	81 f0       	breq	.+32     	; 0x5b28 <makeMorse+0xfc>
    5b08:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>
    5b0c:	81 11       	cpse	r24, r1
    5b0e:	0c c0       	rjmp	.+24     	; 0x5b28 <makeMorse+0xfc>
		{
			carrierOn = FALSE;
    5b10:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5b14:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <_ZZ9makeMorseE10addedSpace>
    5b18:	88 23       	and	r24, r24
    5b1a:	09 f4       	brne	.+2      	; 0x5b1e <makeMorse+0xf2>
    5b1c:	70 c0       	rjmp	.+224    	; 0x5bfe <makeMorse+0x1d2>
			{
				elementIndex = addedSpace;
    5b1e:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <_ZZ9makeMorseE12elementIndex>
				addedSpace = 0;
    5b22:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_ZZ9makeMorseE10addedSpace>
    5b26:	6b c0       	rjmp	.+214    	; 0x5bfe <makeMorse+0x1d2>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    5b28:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <_ZZ9makeMorseE15morseInProgress+0x1>
    5b2c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <_ZZ9makeMorseE11symbolIndex>
    5b30:	89 17       	cp	r24, r25
    5b32:	90 f1       	brcs	.+100    	; 0x5b98 <makeMorse+0x16c>
			{
				c = (*(str + ++charIndex));
    5b34:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <_ZZ9makeMorseE9charIndex>
    5b38:	8f 5f       	subi	r24, 0xFF	; 255
    5b3a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <_ZZ9makeMorseE9charIndex>
    5b3e:	df 01       	movw	r26, r30
    5b40:	a8 0f       	add	r26, r24
    5b42:	b1 1d       	adc	r27, r1
    5b44:	8c 91       	ld	r24, X
    5b46:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZ9makeMorseE1c>

				if(!c)  /* wrap to beginning of text */
    5b4a:	81 11       	cpse	r24, r1
    5b4c:	19 c0       	rjmp	.+50     	; 0x5b80 <makeMorse+0x154>
				{
					if(repeat)
    5b4e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZZ9makeMorseE6repeat>
    5b52:	88 23       	and	r24, r24
    5b54:	31 f0       	breq	.+12     	; 0x5b62 <makeMorse+0x136>
					{
						c = *str;
    5b56:	80 81       	ld	r24, Z
    5b58:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZ9makeMorseE1c>
						charIndex = 0;
    5b5c:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <_ZZ9makeMorseE9charIndex>
    5b60:	0f c0       	rjmp	.+30     	; 0x5b80 <makeMorse+0x154>
					}
					else
					{
						str = NULL;
    5b62:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <_ZZ9makeMorseE3str+0x1>
    5b66:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZZ9makeMorseE3str>
						carrierOn = FALSE;
    5b6a:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE9carrierOn>
						completedString = TRUE;
    5b6e:	91 e0       	ldi	r25, 0x01	; 1
    5b70:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <_ZZ9makeMorseE15completedString>
						if(finished)
    5b74:	20 97       	sbiw	r28, 0x00	; 0
    5b76:	09 f0       	breq	.+2      	; 0x5b7a <makeMorse+0x14e>
						{
							*finished = TRUE;
    5b78:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    5b7a:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>
						return( OFF );
    5b7e:	5f c0       	rjmp	.+190    	; 0x5c3e <makeMorse+0x212>
					}
				}

				morseInProgress = getMorseChar(c);
    5b80:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorseE1c>
    5b84:	0e 94 20 2c 	call	0x5840	; 0x5840 <_Z12getMorseCharc>
    5b88:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <_ZZ9makeMorseE15morseInProgress>
    5b8c:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <_ZZ9makeMorseE15morseInProgress+0x1>
    5b90:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <_ZZ9makeMorseE15morseInProgress+0x2>
				symbolIndex = 0;
    5b94:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <_ZZ9makeMorseE11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    5b98:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <_ZZ9makeMorseE15morseInProgress>
    5b9c:	2d 3f       	cpi	r18, 0xFD	; 253
    5b9e:	00 f5       	brcc	.+64     	; 0x5be0 <makeMorse+0x1b4>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    5ba0:	40 91 73 05 	lds	r20, 0x0573	; 0x800573 <_ZZ9makeMorseE11symbolIndex>
    5ba4:	31 e0       	ldi	r19, 0x01	; 1
    5ba6:	34 0f       	add	r19, r20
    5ba8:	30 93 73 05 	sts	0x0573, r19	; 0x800573 <_ZZ9makeMorseE11symbolIndex>

				if(isDah)
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	02 c0       	rjmp	.+4      	; 0x5bb6 <makeMorse+0x18a>
    5bb2:	88 0f       	add	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	4a 95       	dec	r20
    5bb8:	e2 f7       	brpl	.-8      	; 0x5bb2 <makeMorse+0x186>
    5bba:	82 23       	and	r24, r18
    5bbc:	21 f0       	breq	.+8      	; 0x5bc6 <makeMorse+0x19a>
				{
					elementIndex = 2;
    5bbe:	82 e0       	ldi	r24, 0x02	; 2
    5bc0:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <_ZZ9makeMorseE12elementIndex>
    5bc4:	02 c0       	rjmp	.+4      	; 0x5bca <makeMorse+0x19e>
				}
				else
				{
					elementIndex = 0;
    5bc6:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_ZZ9makeMorseE12elementIndex>
				}

				carrierOn = TRUE;
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <_ZZ9makeMorseE9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5bd0:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZZ9makeMorseE15morseInProgress+0x1>
    5bd4:	38 17       	cp	r19, r24
    5bd6:	98 f0       	brcs	.+38     	; 0x5bfe <makeMorse+0x1d2>
				{
					addedSpace = 2;
    5bd8:	82 e0       	ldi	r24, 0x02	; 2
    5bda:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <_ZZ9makeMorseE10addedSpace>
    5bde:	0f c0       	rjmp	.+30     	; 0x5bfe <makeMorse+0x1d2>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5be0:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZZ9makeMorseE15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    5be4:	9f ef       	ldi	r25, 0xFF	; 255
    5be6:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <_ZZ9makeMorseE11symbolIndex>
				carrierOn = FALSE;
    5bea:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE9carrierOn>
				if(sym >= 4 )
    5bee:	84 30       	cpi	r24, 0x04	; 4
    5bf0:	20 f0       	brcs	.+8      	; 0x5bfa <makeMorse+0x1ce>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5bf2:	84 50       	subi	r24, 0x04	; 4
    5bf4:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <_ZZ9makeMorseE12elementIndex>
    5bf8:	02 c0       	rjmp	.+4      	; 0x5bfe <makeMorse+0x1d2>
				}
				else
				{
					elementIndex = 0;
    5bfa:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_ZZ9makeMorseE12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5bfe:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorseE1c>
    5c02:	8c 33       	cpi	r24, 0x3C	; 60
    5c04:	31 f4       	brne	.+12     	; 0x5c12 <makeMorse+0x1e6>
		{
			holdKeyDown = TRUE;
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    5c0c:	20 97       	sbiw	r28, 0x00	; 0
    5c0e:	41 f4       	brne	.+16     	; 0x5c20 <makeMorse+0x1f4>
    5c10:	16 c0       	rjmp	.+44     	; 0x5c3e <makeMorse+0x212>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    5c12:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>
		}
	}

	if(finished)
    5c16:	20 97       	sbiw	r28, 0x00	; 0
    5c18:	19 f4       	brne	.+6      	; 0x5c20 <makeMorse+0x1f4>
    5c1a:	09 c0       	rjmp	.+18     	; 0x5c2e <makeMorse+0x202>
    5c1c:	20 97       	sbiw	r28, 0x00	; 0
    5c1e:	19 f0       	breq	.+6      	; 0x5c26 <makeMorse+0x1fa>
	{
		*finished = completedString;
    5c20:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ZZ9makeMorseE15completedString>
    5c24:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    5c26:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <_ZZ9makeMorseE11holdKeyDown>
    5c2a:	81 11       	cpse	r24, r1
    5c2c:	07 c0       	rjmp	.+14     	; 0x5c3c <makeMorse+0x210>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    5c2e:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <_ZZ9makeMorseE9carrierOn>
    5c32:	05 c0       	rjmp	.+10     	; 0x5c3e <makeMorse+0x212>
			}

			carrierOn = FALSE;
		}

		return( OFF);
    5c34:	80 e0       	ldi	r24, 0x00	; 0
    5c36:	03 c0       	rjmp	.+6      	; 0x5c3e <makeMorse+0x212>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    5c38:	80 e0       	ldi	r24, 0x00	; 0
    5c3a:	01 c0       	rjmp	.+2      	; 0x5c3e <makeMorse+0x212>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    5c3c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	08 95       	ret

00005c44 <timeRequiredToSendStrAtWPM>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    5c44:	cf 92       	push	r12
    5c46:	df 92       	push	r13
    5c48:	ef 92       	push	r14
    5c4a:	ff 92       	push	r15
    5c4c:	0f 93       	push	r16
    5c4e:	1f 93       	push	r17
    5c50:	cf 93       	push	r28
    5c52:	fc 01       	movw	r30, r24
    5c54:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5c56:	80 81       	ld	r24, Z
		if(!c)
    5c58:	88 23       	and	r24, r24
    5c5a:	c1 f0       	breq	.+48     	; 0x5c8c <timeRequiredToSendStrAtWPM+0x48>
    5c5c:	8f 01       	movw	r16, r30
    5c5e:	0f 5f       	subi	r16, 0xFF	; 255
    5c60:	1f 4f       	sbci	r17, 0xFF	; 255
    5c62:	7f 01       	movw	r14, r30
    5c64:	94 e1       	ldi	r25, 0x14	; 20
    5c66:	e9 0e       	add	r14, r25
    5c68:	f1 1c       	adc	r15, r1
    5c6a:	c0 e0       	ldi	r28, 0x00	; 0
    5c6c:	05 c0       	rjmp	.+10     	; 0x5c78 <timeRequiredToSendStrAtWPM+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5c6e:	f8 01       	movw	r30, r16
    5c70:	81 91       	ld	r24, Z+
    5c72:	8f 01       	movw	r16, r30
		if(!c)
    5c74:	88 23       	and	r24, r24
    5c76:	59 f0       	breq	.+22     	; 0x5c8e <timeRequiredToSendStrAtWPM+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    5c78:	0e 94 20 2c 	call	0x5840	; 0x5840 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    5c7c:	6d 3f       	cpi	r22, 0xFD	; 253
    5c7e:	08 f4       	brcc	.+2      	; 0x5c82 <timeRequiredToSendStrAtWPM+0x3e>
		{
			elements += 3;
    5c80:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    5c82:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5c84:	0e 15       	cp	r16, r14
    5c86:	1f 05       	cpc	r17, r15
    5c88:	91 f7       	brne	.-28     	; 0x5c6e <timeRequiredToSendStrAtWPM+0x2a>
    5c8a:	01 c0       	rjmp	.+2      	; 0x5c8e <timeRequiredToSendStrAtWPM+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    5c8c:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    5c8e:	80 eb       	ldi	r24, 0xB0	; 176
    5c90:	94 e0       	ldi	r25, 0x04	; 4
    5c92:	b6 01       	movw	r22, r12
    5c94:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__udivmodhi4>
}
    5c98:	c6 9f       	mul	r28, r22
    5c9a:	c0 01       	movw	r24, r0
    5c9c:	c7 9f       	mul	r28, r23
    5c9e:	90 0d       	add	r25, r0
    5ca0:	11 24       	eor	r1, r1
    5ca2:	cf 91       	pop	r28
    5ca4:	1f 91       	pop	r17
    5ca6:	0f 91       	pop	r16
    5ca8:	ff 90       	pop	r15
    5caa:	ef 90       	pop	r14
    5cac:	df 90       	pop	r13
    5cae:	cf 90       	pop	r12
    5cb0:	08 95       	ret

00005cb2 <__subsf3>:
    5cb2:	50 58       	subi	r21, 0x80	; 128

00005cb4 <__addsf3>:
    5cb4:	bb 27       	eor	r27, r27
    5cb6:	aa 27       	eor	r26, r26
    5cb8:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__addsf3x>
    5cbc:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__fp_round>
    5cc0:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fp_pscA>
    5cc4:	38 f0       	brcs	.+14     	; 0x5cd4 <__addsf3+0x20>
    5cc6:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fp_pscB>
    5cca:	20 f0       	brcs	.+8      	; 0x5cd4 <__addsf3+0x20>
    5ccc:	39 f4       	brne	.+14     	; 0x5cdc <__addsf3+0x28>
    5cce:	9f 3f       	cpi	r25, 0xFF	; 255
    5cd0:	19 f4       	brne	.+6      	; 0x5cd8 <__addsf3+0x24>
    5cd2:	26 f4       	brtc	.+8      	; 0x5cdc <__addsf3+0x28>
    5cd4:	0c 94 df 2f 	jmp	0x5fbe	; 0x5fbe <__fp_nan>
    5cd8:	0e f4       	brtc	.+2      	; 0x5cdc <__addsf3+0x28>
    5cda:	e0 95       	com	r30
    5cdc:	e7 fb       	bst	r30, 7
    5cde:	0c 94 d9 2f 	jmp	0x5fb2	; 0x5fb2 <__fp_inf>

00005ce2 <__addsf3x>:
    5ce2:	e9 2f       	mov	r30, r25
    5ce4:	0e 94 40 30 	call	0x6080	; 0x6080 <__fp_split3>
    5ce8:	58 f3       	brcs	.-42     	; 0x5cc0 <__addsf3+0xc>
    5cea:	ba 17       	cp	r27, r26
    5cec:	62 07       	cpc	r22, r18
    5cee:	73 07       	cpc	r23, r19
    5cf0:	84 07       	cpc	r24, r20
    5cf2:	95 07       	cpc	r25, r21
    5cf4:	20 f0       	brcs	.+8      	; 0x5cfe <__addsf3x+0x1c>
    5cf6:	79 f4       	brne	.+30     	; 0x5d16 <__addsf3x+0x34>
    5cf8:	a6 f5       	brtc	.+104    	; 0x5d62 <__addsf3x+0x80>
    5cfa:	0c 94 62 30 	jmp	0x60c4	; 0x60c4 <__fp_zero>
    5cfe:	0e f4       	brtc	.+2      	; 0x5d02 <__addsf3x+0x20>
    5d00:	e0 95       	com	r30
    5d02:	0b 2e       	mov	r0, r27
    5d04:	ba 2f       	mov	r27, r26
    5d06:	a0 2d       	mov	r26, r0
    5d08:	0b 01       	movw	r0, r22
    5d0a:	b9 01       	movw	r22, r18
    5d0c:	90 01       	movw	r18, r0
    5d0e:	0c 01       	movw	r0, r24
    5d10:	ca 01       	movw	r24, r20
    5d12:	a0 01       	movw	r20, r0
    5d14:	11 24       	eor	r1, r1
    5d16:	ff 27       	eor	r31, r31
    5d18:	59 1b       	sub	r21, r25
    5d1a:	99 f0       	breq	.+38     	; 0x5d42 <__addsf3x+0x60>
    5d1c:	59 3f       	cpi	r21, 0xF9	; 249
    5d1e:	50 f4       	brcc	.+20     	; 0x5d34 <__addsf3x+0x52>
    5d20:	50 3e       	cpi	r21, 0xE0	; 224
    5d22:	68 f1       	brcs	.+90     	; 0x5d7e <__addsf3x+0x9c>
    5d24:	1a 16       	cp	r1, r26
    5d26:	f0 40       	sbci	r31, 0x00	; 0
    5d28:	a2 2f       	mov	r26, r18
    5d2a:	23 2f       	mov	r18, r19
    5d2c:	34 2f       	mov	r19, r20
    5d2e:	44 27       	eor	r20, r20
    5d30:	58 5f       	subi	r21, 0xF8	; 248
    5d32:	f3 cf       	rjmp	.-26     	; 0x5d1a <__addsf3x+0x38>
    5d34:	46 95       	lsr	r20
    5d36:	37 95       	ror	r19
    5d38:	27 95       	ror	r18
    5d3a:	a7 95       	ror	r26
    5d3c:	f0 40       	sbci	r31, 0x00	; 0
    5d3e:	53 95       	inc	r21
    5d40:	c9 f7       	brne	.-14     	; 0x5d34 <__addsf3x+0x52>
    5d42:	7e f4       	brtc	.+30     	; 0x5d62 <__addsf3x+0x80>
    5d44:	1f 16       	cp	r1, r31
    5d46:	ba 0b       	sbc	r27, r26
    5d48:	62 0b       	sbc	r22, r18
    5d4a:	73 0b       	sbc	r23, r19
    5d4c:	84 0b       	sbc	r24, r20
    5d4e:	ba f0       	brmi	.+46     	; 0x5d7e <__addsf3x+0x9c>
    5d50:	91 50       	subi	r25, 0x01	; 1
    5d52:	a1 f0       	breq	.+40     	; 0x5d7c <__addsf3x+0x9a>
    5d54:	ff 0f       	add	r31, r31
    5d56:	bb 1f       	adc	r27, r27
    5d58:	66 1f       	adc	r22, r22
    5d5a:	77 1f       	adc	r23, r23
    5d5c:	88 1f       	adc	r24, r24
    5d5e:	c2 f7       	brpl	.-16     	; 0x5d50 <__addsf3x+0x6e>
    5d60:	0e c0       	rjmp	.+28     	; 0x5d7e <__addsf3x+0x9c>
    5d62:	ba 0f       	add	r27, r26
    5d64:	62 1f       	adc	r22, r18
    5d66:	73 1f       	adc	r23, r19
    5d68:	84 1f       	adc	r24, r20
    5d6a:	48 f4       	brcc	.+18     	; 0x5d7e <__addsf3x+0x9c>
    5d6c:	87 95       	ror	r24
    5d6e:	77 95       	ror	r23
    5d70:	67 95       	ror	r22
    5d72:	b7 95       	ror	r27
    5d74:	f7 95       	ror	r31
    5d76:	9e 3f       	cpi	r25, 0xFE	; 254
    5d78:	08 f0       	brcs	.+2      	; 0x5d7c <__addsf3x+0x9a>
    5d7a:	b0 cf       	rjmp	.-160    	; 0x5cdc <__addsf3+0x28>
    5d7c:	93 95       	inc	r25
    5d7e:	88 0f       	add	r24, r24
    5d80:	08 f0       	brcs	.+2      	; 0x5d84 <__addsf3x+0xa2>
    5d82:	99 27       	eor	r25, r25
    5d84:	ee 0f       	add	r30, r30
    5d86:	97 95       	ror	r25
    5d88:	87 95       	ror	r24
    5d8a:	08 95       	ret

00005d8c <__cmpsf2>:
    5d8c:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <__fp_cmp>
    5d90:	08 f4       	brcc	.+2      	; 0x5d94 <__cmpsf2+0x8>
    5d92:	81 e0       	ldi	r24, 0x01	; 1
    5d94:	08 95       	ret

00005d96 <cos>:
    5d96:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__fp_rempio2>
    5d9a:	e3 95       	inc	r30
    5d9c:	0c 94 2c 30 	jmp	0x6058	; 0x6058 <__fp_sinus>

00005da0 <__divsf3>:
    5da0:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <__divsf3x>
    5da4:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__fp_round>
    5da8:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fp_pscB>
    5dac:	58 f0       	brcs	.+22     	; 0x5dc4 <__divsf3+0x24>
    5dae:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fp_pscA>
    5db2:	40 f0       	brcs	.+16     	; 0x5dc4 <__divsf3+0x24>
    5db4:	29 f4       	brne	.+10     	; 0x5dc0 <__divsf3+0x20>
    5db6:	5f 3f       	cpi	r21, 0xFF	; 255
    5db8:	29 f0       	breq	.+10     	; 0x5dc4 <__divsf3+0x24>
    5dba:	0c 94 d9 2f 	jmp	0x5fb2	; 0x5fb2 <__fp_inf>
    5dbe:	51 11       	cpse	r21, r1
    5dc0:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__fp_szero>
    5dc4:	0c 94 df 2f 	jmp	0x5fbe	; 0x5fbe <__fp_nan>

00005dc8 <__divsf3x>:
    5dc8:	0e 94 40 30 	call	0x6080	; 0x6080 <__fp_split3>
    5dcc:	68 f3       	brcs	.-38     	; 0x5da8 <__divsf3+0x8>

00005dce <__divsf3_pse>:
    5dce:	99 23       	and	r25, r25
    5dd0:	b1 f3       	breq	.-20     	; 0x5dbe <__divsf3+0x1e>
    5dd2:	55 23       	and	r21, r21
    5dd4:	91 f3       	breq	.-28     	; 0x5dba <__divsf3+0x1a>
    5dd6:	95 1b       	sub	r25, r21
    5dd8:	55 0b       	sbc	r21, r21
    5dda:	bb 27       	eor	r27, r27
    5ddc:	aa 27       	eor	r26, r26
    5dde:	62 17       	cp	r22, r18
    5de0:	73 07       	cpc	r23, r19
    5de2:	84 07       	cpc	r24, r20
    5de4:	38 f0       	brcs	.+14     	; 0x5df4 <__divsf3_pse+0x26>
    5de6:	9f 5f       	subi	r25, 0xFF	; 255
    5de8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dea:	22 0f       	add	r18, r18
    5dec:	33 1f       	adc	r19, r19
    5dee:	44 1f       	adc	r20, r20
    5df0:	aa 1f       	adc	r26, r26
    5df2:	a9 f3       	breq	.-22     	; 0x5dde <__divsf3_pse+0x10>
    5df4:	35 d0       	rcall	.+106    	; 0x5e60 <__divsf3_pse+0x92>
    5df6:	0e 2e       	mov	r0, r30
    5df8:	3a f0       	brmi	.+14     	; 0x5e08 <__divsf3_pse+0x3a>
    5dfa:	e0 e8       	ldi	r30, 0x80	; 128
    5dfc:	32 d0       	rcall	.+100    	; 0x5e62 <__divsf3_pse+0x94>
    5dfe:	91 50       	subi	r25, 0x01	; 1
    5e00:	50 40       	sbci	r21, 0x00	; 0
    5e02:	e6 95       	lsr	r30
    5e04:	00 1c       	adc	r0, r0
    5e06:	ca f7       	brpl	.-14     	; 0x5dfa <__divsf3_pse+0x2c>
    5e08:	2b d0       	rcall	.+86     	; 0x5e60 <__divsf3_pse+0x92>
    5e0a:	fe 2f       	mov	r31, r30
    5e0c:	29 d0       	rcall	.+82     	; 0x5e60 <__divsf3_pse+0x92>
    5e0e:	66 0f       	add	r22, r22
    5e10:	77 1f       	adc	r23, r23
    5e12:	88 1f       	adc	r24, r24
    5e14:	bb 1f       	adc	r27, r27
    5e16:	26 17       	cp	r18, r22
    5e18:	37 07       	cpc	r19, r23
    5e1a:	48 07       	cpc	r20, r24
    5e1c:	ab 07       	cpc	r26, r27
    5e1e:	b0 e8       	ldi	r27, 0x80	; 128
    5e20:	09 f0       	breq	.+2      	; 0x5e24 <__divsf3_pse+0x56>
    5e22:	bb 0b       	sbc	r27, r27
    5e24:	80 2d       	mov	r24, r0
    5e26:	bf 01       	movw	r22, r30
    5e28:	ff 27       	eor	r31, r31
    5e2a:	93 58       	subi	r25, 0x83	; 131
    5e2c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e2e:	3a f0       	brmi	.+14     	; 0x5e3e <__divsf3_pse+0x70>
    5e30:	9e 3f       	cpi	r25, 0xFE	; 254
    5e32:	51 05       	cpc	r21, r1
    5e34:	78 f0       	brcs	.+30     	; 0x5e54 <__divsf3_pse+0x86>
    5e36:	0c 94 d9 2f 	jmp	0x5fb2	; 0x5fb2 <__fp_inf>
    5e3a:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__fp_szero>
    5e3e:	5f 3f       	cpi	r21, 0xFF	; 255
    5e40:	e4 f3       	brlt	.-8      	; 0x5e3a <__divsf3_pse+0x6c>
    5e42:	98 3e       	cpi	r25, 0xE8	; 232
    5e44:	d4 f3       	brlt	.-12     	; 0x5e3a <__divsf3_pse+0x6c>
    5e46:	86 95       	lsr	r24
    5e48:	77 95       	ror	r23
    5e4a:	67 95       	ror	r22
    5e4c:	b7 95       	ror	r27
    5e4e:	f7 95       	ror	r31
    5e50:	9f 5f       	subi	r25, 0xFF	; 255
    5e52:	c9 f7       	brne	.-14     	; 0x5e46 <__divsf3_pse+0x78>
    5e54:	88 0f       	add	r24, r24
    5e56:	91 1d       	adc	r25, r1
    5e58:	96 95       	lsr	r25
    5e5a:	87 95       	ror	r24
    5e5c:	97 f9       	bld	r25, 7
    5e5e:	08 95       	ret
    5e60:	e1 e0       	ldi	r30, 0x01	; 1
    5e62:	66 0f       	add	r22, r22
    5e64:	77 1f       	adc	r23, r23
    5e66:	88 1f       	adc	r24, r24
    5e68:	bb 1f       	adc	r27, r27
    5e6a:	62 17       	cp	r22, r18
    5e6c:	73 07       	cpc	r23, r19
    5e6e:	84 07       	cpc	r24, r20
    5e70:	ba 07       	cpc	r27, r26
    5e72:	20 f0       	brcs	.+8      	; 0x5e7c <__divsf3_pse+0xae>
    5e74:	62 1b       	sub	r22, r18
    5e76:	73 0b       	sbc	r23, r19
    5e78:	84 0b       	sbc	r24, r20
    5e7a:	ba 0b       	sbc	r27, r26
    5e7c:	ee 1f       	adc	r30, r30
    5e7e:	88 f7       	brcc	.-30     	; 0x5e62 <__divsf3_pse+0x94>
    5e80:	e0 95       	com	r30
    5e82:	08 95       	ret

00005e84 <__fixsfsi>:
    5e84:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__fixunssfsi>
    5e88:	68 94       	set
    5e8a:	b1 11       	cpse	r27, r1
    5e8c:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__fp_szero>
    5e90:	08 95       	ret

00005e92 <__fixunssfsi>:
    5e92:	0e 94 48 30 	call	0x6090	; 0x6090 <__fp_splitA>
    5e96:	88 f0       	brcs	.+34     	; 0x5eba <__fixunssfsi+0x28>
    5e98:	9f 57       	subi	r25, 0x7F	; 127
    5e9a:	98 f0       	brcs	.+38     	; 0x5ec2 <__fixunssfsi+0x30>
    5e9c:	b9 2f       	mov	r27, r25
    5e9e:	99 27       	eor	r25, r25
    5ea0:	b7 51       	subi	r27, 0x17	; 23
    5ea2:	b0 f0       	brcs	.+44     	; 0x5ed0 <__fixunssfsi+0x3e>
    5ea4:	e1 f0       	breq	.+56     	; 0x5ede <__fixunssfsi+0x4c>
    5ea6:	66 0f       	add	r22, r22
    5ea8:	77 1f       	adc	r23, r23
    5eaa:	88 1f       	adc	r24, r24
    5eac:	99 1f       	adc	r25, r25
    5eae:	1a f0       	brmi	.+6      	; 0x5eb6 <__fixunssfsi+0x24>
    5eb0:	ba 95       	dec	r27
    5eb2:	c9 f7       	brne	.-14     	; 0x5ea6 <__fixunssfsi+0x14>
    5eb4:	14 c0       	rjmp	.+40     	; 0x5ede <__fixunssfsi+0x4c>
    5eb6:	b1 30       	cpi	r27, 0x01	; 1
    5eb8:	91 f0       	breq	.+36     	; 0x5ede <__fixunssfsi+0x4c>
    5eba:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__fp_zero>
    5ebe:	b1 e0       	ldi	r27, 0x01	; 1
    5ec0:	08 95       	ret
    5ec2:	0c 94 62 30 	jmp	0x60c4	; 0x60c4 <__fp_zero>
    5ec6:	67 2f       	mov	r22, r23
    5ec8:	78 2f       	mov	r23, r24
    5eca:	88 27       	eor	r24, r24
    5ecc:	b8 5f       	subi	r27, 0xF8	; 248
    5ece:	39 f0       	breq	.+14     	; 0x5ede <__fixunssfsi+0x4c>
    5ed0:	b9 3f       	cpi	r27, 0xF9	; 249
    5ed2:	cc f3       	brlt	.-14     	; 0x5ec6 <__fixunssfsi+0x34>
    5ed4:	86 95       	lsr	r24
    5ed6:	77 95       	ror	r23
    5ed8:	67 95       	ror	r22
    5eda:	b3 95       	inc	r27
    5edc:	d9 f7       	brne	.-10     	; 0x5ed4 <__fixunssfsi+0x42>
    5ede:	3e f4       	brtc	.+14     	; 0x5eee <__fixunssfsi+0x5c>
    5ee0:	90 95       	com	r25
    5ee2:	80 95       	com	r24
    5ee4:	70 95       	com	r23
    5ee6:	61 95       	neg	r22
    5ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eea:	8f 4f       	sbci	r24, 0xFF	; 255
    5eec:	9f 4f       	sbci	r25, 0xFF	; 255
    5eee:	08 95       	ret

00005ef0 <__floatunsisf>:
    5ef0:	e8 94       	clt
    5ef2:	09 c0       	rjmp	.+18     	; 0x5f06 <__floatsisf+0x12>

00005ef4 <__floatsisf>:
    5ef4:	97 fb       	bst	r25, 7
    5ef6:	3e f4       	brtc	.+14     	; 0x5f06 <__floatsisf+0x12>
    5ef8:	90 95       	com	r25
    5efa:	80 95       	com	r24
    5efc:	70 95       	com	r23
    5efe:	61 95       	neg	r22
    5f00:	7f 4f       	sbci	r23, 0xFF	; 255
    5f02:	8f 4f       	sbci	r24, 0xFF	; 255
    5f04:	9f 4f       	sbci	r25, 0xFF	; 255
    5f06:	99 23       	and	r25, r25
    5f08:	a9 f0       	breq	.+42     	; 0x5f34 <__floatsisf+0x40>
    5f0a:	f9 2f       	mov	r31, r25
    5f0c:	96 e9       	ldi	r25, 0x96	; 150
    5f0e:	bb 27       	eor	r27, r27
    5f10:	93 95       	inc	r25
    5f12:	f6 95       	lsr	r31
    5f14:	87 95       	ror	r24
    5f16:	77 95       	ror	r23
    5f18:	67 95       	ror	r22
    5f1a:	b7 95       	ror	r27
    5f1c:	f1 11       	cpse	r31, r1
    5f1e:	f8 cf       	rjmp	.-16     	; 0x5f10 <__floatsisf+0x1c>
    5f20:	fa f4       	brpl	.+62     	; 0x5f60 <__floatsisf+0x6c>
    5f22:	bb 0f       	add	r27, r27
    5f24:	11 f4       	brne	.+4      	; 0x5f2a <__floatsisf+0x36>
    5f26:	60 ff       	sbrs	r22, 0
    5f28:	1b c0       	rjmp	.+54     	; 0x5f60 <__floatsisf+0x6c>
    5f2a:	6f 5f       	subi	r22, 0xFF	; 255
    5f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f30:	9f 4f       	sbci	r25, 0xFF	; 255
    5f32:	16 c0       	rjmp	.+44     	; 0x5f60 <__floatsisf+0x6c>
    5f34:	88 23       	and	r24, r24
    5f36:	11 f0       	breq	.+4      	; 0x5f3c <__floatsisf+0x48>
    5f38:	96 e9       	ldi	r25, 0x96	; 150
    5f3a:	11 c0       	rjmp	.+34     	; 0x5f5e <__floatsisf+0x6a>
    5f3c:	77 23       	and	r23, r23
    5f3e:	21 f0       	breq	.+8      	; 0x5f48 <__floatsisf+0x54>
    5f40:	9e e8       	ldi	r25, 0x8E	; 142
    5f42:	87 2f       	mov	r24, r23
    5f44:	76 2f       	mov	r23, r22
    5f46:	05 c0       	rjmp	.+10     	; 0x5f52 <__floatsisf+0x5e>
    5f48:	66 23       	and	r22, r22
    5f4a:	71 f0       	breq	.+28     	; 0x5f68 <__floatsisf+0x74>
    5f4c:	96 e8       	ldi	r25, 0x86	; 134
    5f4e:	86 2f       	mov	r24, r22
    5f50:	70 e0       	ldi	r23, 0x00	; 0
    5f52:	60 e0       	ldi	r22, 0x00	; 0
    5f54:	2a f0       	brmi	.+10     	; 0x5f60 <__floatsisf+0x6c>
    5f56:	9a 95       	dec	r25
    5f58:	66 0f       	add	r22, r22
    5f5a:	77 1f       	adc	r23, r23
    5f5c:	88 1f       	adc	r24, r24
    5f5e:	da f7       	brpl	.-10     	; 0x5f56 <__floatsisf+0x62>
    5f60:	88 0f       	add	r24, r24
    5f62:	96 95       	lsr	r25
    5f64:	87 95       	ror	r24
    5f66:	97 f9       	bld	r25, 7
    5f68:	08 95       	ret

00005f6a <__fp_cmp>:
    5f6a:	99 0f       	add	r25, r25
    5f6c:	00 08       	sbc	r0, r0
    5f6e:	55 0f       	add	r21, r21
    5f70:	aa 0b       	sbc	r26, r26
    5f72:	e0 e8       	ldi	r30, 0x80	; 128
    5f74:	fe ef       	ldi	r31, 0xFE	; 254
    5f76:	16 16       	cp	r1, r22
    5f78:	17 06       	cpc	r1, r23
    5f7a:	e8 07       	cpc	r30, r24
    5f7c:	f9 07       	cpc	r31, r25
    5f7e:	c0 f0       	brcs	.+48     	; 0x5fb0 <__fp_cmp+0x46>
    5f80:	12 16       	cp	r1, r18
    5f82:	13 06       	cpc	r1, r19
    5f84:	e4 07       	cpc	r30, r20
    5f86:	f5 07       	cpc	r31, r21
    5f88:	98 f0       	brcs	.+38     	; 0x5fb0 <__fp_cmp+0x46>
    5f8a:	62 1b       	sub	r22, r18
    5f8c:	73 0b       	sbc	r23, r19
    5f8e:	84 0b       	sbc	r24, r20
    5f90:	95 0b       	sbc	r25, r21
    5f92:	39 f4       	brne	.+14     	; 0x5fa2 <__fp_cmp+0x38>
    5f94:	0a 26       	eor	r0, r26
    5f96:	61 f0       	breq	.+24     	; 0x5fb0 <__fp_cmp+0x46>
    5f98:	23 2b       	or	r18, r19
    5f9a:	24 2b       	or	r18, r20
    5f9c:	25 2b       	or	r18, r21
    5f9e:	21 f4       	brne	.+8      	; 0x5fa8 <__fp_cmp+0x3e>
    5fa0:	08 95       	ret
    5fa2:	0a 26       	eor	r0, r26
    5fa4:	09 f4       	brne	.+2      	; 0x5fa8 <__fp_cmp+0x3e>
    5fa6:	a1 40       	sbci	r26, 0x01	; 1
    5fa8:	a6 95       	lsr	r26
    5faa:	8f ef       	ldi	r24, 0xFF	; 255
    5fac:	81 1d       	adc	r24, r1
    5fae:	81 1d       	adc	r24, r1
    5fb0:	08 95       	ret

00005fb2 <__fp_inf>:
    5fb2:	97 f9       	bld	r25, 7
    5fb4:	9f 67       	ori	r25, 0x7F	; 127
    5fb6:	80 e8       	ldi	r24, 0x80	; 128
    5fb8:	70 e0       	ldi	r23, 0x00	; 0
    5fba:	60 e0       	ldi	r22, 0x00	; 0
    5fbc:	08 95       	ret

00005fbe <__fp_nan>:
    5fbe:	9f ef       	ldi	r25, 0xFF	; 255
    5fc0:	80 ec       	ldi	r24, 0xC0	; 192
    5fc2:	08 95       	ret

00005fc4 <__fp_pscA>:
    5fc4:	00 24       	eor	r0, r0
    5fc6:	0a 94       	dec	r0
    5fc8:	16 16       	cp	r1, r22
    5fca:	17 06       	cpc	r1, r23
    5fcc:	18 06       	cpc	r1, r24
    5fce:	09 06       	cpc	r0, r25
    5fd0:	08 95       	ret

00005fd2 <__fp_pscB>:
    5fd2:	00 24       	eor	r0, r0
    5fd4:	0a 94       	dec	r0
    5fd6:	12 16       	cp	r1, r18
    5fd8:	13 06       	cpc	r1, r19
    5fda:	14 06       	cpc	r1, r20
    5fdc:	05 06       	cpc	r0, r21
    5fde:	08 95       	ret
    5fe0:	0c 94 df 2f 	jmp	0x5fbe	; 0x5fbe <__fp_nan>

00005fe4 <__fp_rempio2>:
    5fe4:	0e 94 48 30 	call	0x6090	; 0x6090 <__fp_splitA>
    5fe8:	d8 f3       	brcs	.-10     	; 0x5fe0 <__fp_pscB+0xe>
    5fea:	e8 94       	clt
    5fec:	e0 e0       	ldi	r30, 0x00	; 0
    5fee:	bb 27       	eor	r27, r27
    5ff0:	9f 57       	subi	r25, 0x7F	; 127
    5ff2:	f0 f0       	brcs	.+60     	; 0x6030 <__fp_rempio2+0x4c>
    5ff4:	2a ed       	ldi	r18, 0xDA	; 218
    5ff6:	3f e0       	ldi	r19, 0x0F	; 15
    5ff8:	49 ec       	ldi	r20, 0xC9	; 201
    5ffa:	06 c0       	rjmp	.+12     	; 0x6008 <__fp_rempio2+0x24>
    5ffc:	ee 0f       	add	r30, r30
    5ffe:	bb 0f       	add	r27, r27
    6000:	66 1f       	adc	r22, r22
    6002:	77 1f       	adc	r23, r23
    6004:	88 1f       	adc	r24, r24
    6006:	28 f0       	brcs	.+10     	; 0x6012 <__fp_rempio2+0x2e>
    6008:	b2 3a       	cpi	r27, 0xA2	; 162
    600a:	62 07       	cpc	r22, r18
    600c:	73 07       	cpc	r23, r19
    600e:	84 07       	cpc	r24, r20
    6010:	28 f0       	brcs	.+10     	; 0x601c <__fp_rempio2+0x38>
    6012:	b2 5a       	subi	r27, 0xA2	; 162
    6014:	62 0b       	sbc	r22, r18
    6016:	73 0b       	sbc	r23, r19
    6018:	84 0b       	sbc	r24, r20
    601a:	e3 95       	inc	r30
    601c:	9a 95       	dec	r25
    601e:	72 f7       	brpl	.-36     	; 0x5ffc <__fp_rempio2+0x18>
    6020:	80 38       	cpi	r24, 0x80	; 128
    6022:	30 f4       	brcc	.+12     	; 0x6030 <__fp_rempio2+0x4c>
    6024:	9a 95       	dec	r25
    6026:	bb 0f       	add	r27, r27
    6028:	66 1f       	adc	r22, r22
    602a:	77 1f       	adc	r23, r23
    602c:	88 1f       	adc	r24, r24
    602e:	d2 f7       	brpl	.-12     	; 0x6024 <__fp_rempio2+0x40>
    6030:	90 48       	sbci	r25, 0x80	; 128
    6032:	0c 94 1c 31 	jmp	0x6238	; 0x6238 <__fp_mpack_finite>

00006036 <__fp_round>:
    6036:	09 2e       	mov	r0, r25
    6038:	03 94       	inc	r0
    603a:	00 0c       	add	r0, r0
    603c:	11 f4       	brne	.+4      	; 0x6042 <__fp_round+0xc>
    603e:	88 23       	and	r24, r24
    6040:	52 f0       	brmi	.+20     	; 0x6056 <__fp_round+0x20>
    6042:	bb 0f       	add	r27, r27
    6044:	40 f4       	brcc	.+16     	; 0x6056 <__fp_round+0x20>
    6046:	bf 2b       	or	r27, r31
    6048:	11 f4       	brne	.+4      	; 0x604e <__fp_round+0x18>
    604a:	60 ff       	sbrs	r22, 0
    604c:	04 c0       	rjmp	.+8      	; 0x6056 <__fp_round+0x20>
    604e:	6f 5f       	subi	r22, 0xFF	; 255
    6050:	7f 4f       	sbci	r23, 0xFF	; 255
    6052:	8f 4f       	sbci	r24, 0xFF	; 255
    6054:	9f 4f       	sbci	r25, 0xFF	; 255
    6056:	08 95       	ret

00006058 <__fp_sinus>:
    6058:	ef 93       	push	r30
    605a:	e0 ff       	sbrs	r30, 0
    605c:	07 c0       	rjmp	.+14     	; 0x606c <__fp_sinus+0x14>
    605e:	a2 ea       	ldi	r26, 0xA2	; 162
    6060:	2a ed       	ldi	r18, 0xDA	; 218
    6062:	3f e0       	ldi	r19, 0x0F	; 15
    6064:	49 ec       	ldi	r20, 0xC9	; 201
    6066:	5f eb       	ldi	r21, 0xBF	; 191
    6068:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__addsf3x>
    606c:	0e 94 1b 30 	call	0x6036	; 0x6036 <__fp_round>
    6070:	0f 90       	pop	r0
    6072:	03 94       	inc	r0
    6074:	01 fc       	sbrc	r0, 1
    6076:	90 58       	subi	r25, 0x80	; 128
    6078:	ea e3       	ldi	r30, 0x3A	; 58
    607a:	f2 e0       	ldi	r31, 0x02	; 2
    607c:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__fp_powsodd>

00006080 <__fp_split3>:
    6080:	57 fd       	sbrc	r21, 7
    6082:	90 58       	subi	r25, 0x80	; 128
    6084:	44 0f       	add	r20, r20
    6086:	55 1f       	adc	r21, r21
    6088:	59 f0       	breq	.+22     	; 0x60a0 <__fp_splitA+0x10>
    608a:	5f 3f       	cpi	r21, 0xFF	; 255
    608c:	71 f0       	breq	.+28     	; 0x60aa <__fp_splitA+0x1a>
    608e:	47 95       	ror	r20

00006090 <__fp_splitA>:
    6090:	88 0f       	add	r24, r24
    6092:	97 fb       	bst	r25, 7
    6094:	99 1f       	adc	r25, r25
    6096:	61 f0       	breq	.+24     	; 0x60b0 <__fp_splitA+0x20>
    6098:	9f 3f       	cpi	r25, 0xFF	; 255
    609a:	79 f0       	breq	.+30     	; 0x60ba <__fp_splitA+0x2a>
    609c:	87 95       	ror	r24
    609e:	08 95       	ret
    60a0:	12 16       	cp	r1, r18
    60a2:	13 06       	cpc	r1, r19
    60a4:	14 06       	cpc	r1, r20
    60a6:	55 1f       	adc	r21, r21
    60a8:	f2 cf       	rjmp	.-28     	; 0x608e <__fp_split3+0xe>
    60aa:	46 95       	lsr	r20
    60ac:	f1 df       	rcall	.-30     	; 0x6090 <__fp_splitA>
    60ae:	08 c0       	rjmp	.+16     	; 0x60c0 <__fp_splitA+0x30>
    60b0:	16 16       	cp	r1, r22
    60b2:	17 06       	cpc	r1, r23
    60b4:	18 06       	cpc	r1, r24
    60b6:	99 1f       	adc	r25, r25
    60b8:	f1 cf       	rjmp	.-30     	; 0x609c <__fp_splitA+0xc>
    60ba:	86 95       	lsr	r24
    60bc:	71 05       	cpc	r23, r1
    60be:	61 05       	cpc	r22, r1
    60c0:	08 94       	sec
    60c2:	08 95       	ret

000060c4 <__fp_zero>:
    60c4:	e8 94       	clt

000060c6 <__fp_szero>:
    60c6:	bb 27       	eor	r27, r27
    60c8:	66 27       	eor	r22, r22
    60ca:	77 27       	eor	r23, r23
    60cc:	cb 01       	movw	r24, r22
    60ce:	97 f9       	bld	r25, 7
    60d0:	08 95       	ret

000060d2 <__gesf2>:
    60d2:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <__fp_cmp>
    60d6:	08 f4       	brcc	.+2      	; 0x60da <__gesf2+0x8>
    60d8:	8f ef       	ldi	r24, 0xFF	; 255
    60da:	08 95       	ret

000060dc <__mulsf3>:
    60dc:	0e 94 81 30 	call	0x6102	; 0x6102 <__mulsf3x>
    60e0:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__fp_round>
    60e4:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fp_pscA>
    60e8:	38 f0       	brcs	.+14     	; 0x60f8 <__mulsf3+0x1c>
    60ea:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fp_pscB>
    60ee:	20 f0       	brcs	.+8      	; 0x60f8 <__mulsf3+0x1c>
    60f0:	95 23       	and	r25, r21
    60f2:	11 f0       	breq	.+4      	; 0x60f8 <__mulsf3+0x1c>
    60f4:	0c 94 d9 2f 	jmp	0x5fb2	; 0x5fb2 <__fp_inf>
    60f8:	0c 94 df 2f 	jmp	0x5fbe	; 0x5fbe <__fp_nan>
    60fc:	11 24       	eor	r1, r1
    60fe:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__fp_szero>

00006102 <__mulsf3x>:
    6102:	0e 94 40 30 	call	0x6080	; 0x6080 <__fp_split3>
    6106:	70 f3       	brcs	.-36     	; 0x60e4 <__mulsf3+0x8>

00006108 <__mulsf3_pse>:
    6108:	95 9f       	mul	r25, r21
    610a:	c1 f3       	breq	.-16     	; 0x60fc <__mulsf3+0x20>
    610c:	95 0f       	add	r25, r21
    610e:	50 e0       	ldi	r21, 0x00	; 0
    6110:	55 1f       	adc	r21, r21
    6112:	62 9f       	mul	r22, r18
    6114:	f0 01       	movw	r30, r0
    6116:	72 9f       	mul	r23, r18
    6118:	bb 27       	eor	r27, r27
    611a:	f0 0d       	add	r31, r0
    611c:	b1 1d       	adc	r27, r1
    611e:	63 9f       	mul	r22, r19
    6120:	aa 27       	eor	r26, r26
    6122:	f0 0d       	add	r31, r0
    6124:	b1 1d       	adc	r27, r1
    6126:	aa 1f       	adc	r26, r26
    6128:	64 9f       	mul	r22, r20
    612a:	66 27       	eor	r22, r22
    612c:	b0 0d       	add	r27, r0
    612e:	a1 1d       	adc	r26, r1
    6130:	66 1f       	adc	r22, r22
    6132:	82 9f       	mul	r24, r18
    6134:	22 27       	eor	r18, r18
    6136:	b0 0d       	add	r27, r0
    6138:	a1 1d       	adc	r26, r1
    613a:	62 1f       	adc	r22, r18
    613c:	73 9f       	mul	r23, r19
    613e:	b0 0d       	add	r27, r0
    6140:	a1 1d       	adc	r26, r1
    6142:	62 1f       	adc	r22, r18
    6144:	83 9f       	mul	r24, r19
    6146:	a0 0d       	add	r26, r0
    6148:	61 1d       	adc	r22, r1
    614a:	22 1f       	adc	r18, r18
    614c:	74 9f       	mul	r23, r20
    614e:	33 27       	eor	r19, r19
    6150:	a0 0d       	add	r26, r0
    6152:	61 1d       	adc	r22, r1
    6154:	23 1f       	adc	r18, r19
    6156:	84 9f       	mul	r24, r20
    6158:	60 0d       	add	r22, r0
    615a:	21 1d       	adc	r18, r1
    615c:	82 2f       	mov	r24, r18
    615e:	76 2f       	mov	r23, r22
    6160:	6a 2f       	mov	r22, r26
    6162:	11 24       	eor	r1, r1
    6164:	9f 57       	subi	r25, 0x7F	; 127
    6166:	50 40       	sbci	r21, 0x00	; 0
    6168:	9a f0       	brmi	.+38     	; 0x6190 <__mulsf3_pse+0x88>
    616a:	f1 f0       	breq	.+60     	; 0x61a8 <__mulsf3_pse+0xa0>
    616c:	88 23       	and	r24, r24
    616e:	4a f0       	brmi	.+18     	; 0x6182 <__mulsf3_pse+0x7a>
    6170:	ee 0f       	add	r30, r30
    6172:	ff 1f       	adc	r31, r31
    6174:	bb 1f       	adc	r27, r27
    6176:	66 1f       	adc	r22, r22
    6178:	77 1f       	adc	r23, r23
    617a:	88 1f       	adc	r24, r24
    617c:	91 50       	subi	r25, 0x01	; 1
    617e:	50 40       	sbci	r21, 0x00	; 0
    6180:	a9 f7       	brne	.-22     	; 0x616c <__mulsf3_pse+0x64>
    6182:	9e 3f       	cpi	r25, 0xFE	; 254
    6184:	51 05       	cpc	r21, r1
    6186:	80 f0       	brcs	.+32     	; 0x61a8 <__mulsf3_pse+0xa0>
    6188:	0c 94 d9 2f 	jmp	0x5fb2	; 0x5fb2 <__fp_inf>
    618c:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__fp_szero>
    6190:	5f 3f       	cpi	r21, 0xFF	; 255
    6192:	e4 f3       	brlt	.-8      	; 0x618c <__mulsf3_pse+0x84>
    6194:	98 3e       	cpi	r25, 0xE8	; 232
    6196:	d4 f3       	brlt	.-12     	; 0x618c <__mulsf3_pse+0x84>
    6198:	86 95       	lsr	r24
    619a:	77 95       	ror	r23
    619c:	67 95       	ror	r22
    619e:	b7 95       	ror	r27
    61a0:	f7 95       	ror	r31
    61a2:	e7 95       	ror	r30
    61a4:	9f 5f       	subi	r25, 0xFF	; 255
    61a6:	c1 f7       	brne	.-16     	; 0x6198 <__mulsf3_pse+0x90>
    61a8:	fe 2b       	or	r31, r30
    61aa:	88 0f       	add	r24, r24
    61ac:	91 1d       	adc	r25, r1
    61ae:	96 95       	lsr	r25
    61b0:	87 95       	ror	r24
    61b2:	97 f9       	bld	r25, 7
    61b4:	08 95       	ret

000061b6 <round>:
    61b6:	0e 94 48 30 	call	0x6090	; 0x6090 <__fp_splitA>
    61ba:	e8 f0       	brcs	.+58     	; 0x61f6 <round+0x40>
    61bc:	9e 37       	cpi	r25, 0x7E	; 126
    61be:	e8 f0       	brcs	.+58     	; 0x61fa <round+0x44>
    61c0:	96 39       	cpi	r25, 0x96	; 150
    61c2:	b8 f4       	brcc	.+46     	; 0x61f2 <round+0x3c>
    61c4:	9e 38       	cpi	r25, 0x8E	; 142
    61c6:	48 f4       	brcc	.+18     	; 0x61da <round+0x24>
    61c8:	67 2f       	mov	r22, r23
    61ca:	78 2f       	mov	r23, r24
    61cc:	88 27       	eor	r24, r24
    61ce:	98 5f       	subi	r25, 0xF8	; 248
    61d0:	f9 cf       	rjmp	.-14     	; 0x61c4 <round+0xe>
    61d2:	86 95       	lsr	r24
    61d4:	77 95       	ror	r23
    61d6:	67 95       	ror	r22
    61d8:	93 95       	inc	r25
    61da:	95 39       	cpi	r25, 0x95	; 149
    61dc:	d0 f3       	brcs	.-12     	; 0x61d2 <round+0x1c>
    61de:	b6 2f       	mov	r27, r22
    61e0:	b1 70       	andi	r27, 0x01	; 1
    61e2:	6b 0f       	add	r22, r27
    61e4:	71 1d       	adc	r23, r1
    61e6:	81 1d       	adc	r24, r1
    61e8:	20 f4       	brcc	.+8      	; 0x61f2 <round+0x3c>
    61ea:	87 95       	ror	r24
    61ec:	77 95       	ror	r23
    61ee:	67 95       	ror	r22
    61f0:	93 95       	inc	r25
    61f2:	0c 94 ff 30 	jmp	0x61fe	; 0x61fe <__fp_mintl>
    61f6:	0c 94 1a 31 	jmp	0x6234	; 0x6234 <__fp_mpack>
    61fa:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__fp_szero>

000061fe <__fp_mintl>:
    61fe:	88 23       	and	r24, r24
    6200:	71 f4       	brne	.+28     	; 0x621e <__fp_mintl+0x20>
    6202:	77 23       	and	r23, r23
    6204:	21 f0       	breq	.+8      	; 0x620e <__fp_mintl+0x10>
    6206:	98 50       	subi	r25, 0x08	; 8
    6208:	87 2b       	or	r24, r23
    620a:	76 2f       	mov	r23, r22
    620c:	07 c0       	rjmp	.+14     	; 0x621c <__fp_mintl+0x1e>
    620e:	66 23       	and	r22, r22
    6210:	11 f4       	brne	.+4      	; 0x6216 <__fp_mintl+0x18>
    6212:	99 27       	eor	r25, r25
    6214:	0d c0       	rjmp	.+26     	; 0x6230 <__fp_mintl+0x32>
    6216:	90 51       	subi	r25, 0x10	; 16
    6218:	86 2b       	or	r24, r22
    621a:	70 e0       	ldi	r23, 0x00	; 0
    621c:	60 e0       	ldi	r22, 0x00	; 0
    621e:	2a f0       	brmi	.+10     	; 0x622a <__fp_mintl+0x2c>
    6220:	9a 95       	dec	r25
    6222:	66 0f       	add	r22, r22
    6224:	77 1f       	adc	r23, r23
    6226:	88 1f       	adc	r24, r24
    6228:	da f7       	brpl	.-10     	; 0x6220 <__fp_mintl+0x22>
    622a:	88 0f       	add	r24, r24
    622c:	96 95       	lsr	r25
    622e:	87 95       	ror	r24
    6230:	97 f9       	bld	r25, 7
    6232:	08 95       	ret

00006234 <__fp_mpack>:
    6234:	9f 3f       	cpi	r25, 0xFF	; 255
    6236:	31 f0       	breq	.+12     	; 0x6244 <__fp_mpack_finite+0xc>

00006238 <__fp_mpack_finite>:
    6238:	91 50       	subi	r25, 0x01	; 1
    623a:	20 f4       	brcc	.+8      	; 0x6244 <__fp_mpack_finite+0xc>
    623c:	87 95       	ror	r24
    623e:	77 95       	ror	r23
    6240:	67 95       	ror	r22
    6242:	b7 95       	ror	r27
    6244:	88 0f       	add	r24, r24
    6246:	91 1d       	adc	r25, r1
    6248:	96 95       	lsr	r25
    624a:	87 95       	ror	r24
    624c:	97 f9       	bld	r25, 7
    624e:	08 95       	ret

00006250 <__fp_powsodd>:
    6250:	9f 93       	push	r25
    6252:	8f 93       	push	r24
    6254:	7f 93       	push	r23
    6256:	6f 93       	push	r22
    6258:	ff 93       	push	r31
    625a:	ef 93       	push	r30
    625c:	9b 01       	movw	r18, r22
    625e:	ac 01       	movw	r20, r24
    6260:	0e 94 6e 30 	call	0x60dc	; 0x60dc <__mulsf3>
    6264:	ef 91       	pop	r30
    6266:	ff 91       	pop	r31
    6268:	0e 94 3c 31 	call	0x6278	; 0x6278 <__fp_powser>
    626c:	2f 91       	pop	r18
    626e:	3f 91       	pop	r19
    6270:	4f 91       	pop	r20
    6272:	5f 91       	pop	r21
    6274:	0c 94 6e 30 	jmp	0x60dc	; 0x60dc <__mulsf3>

00006278 <__fp_powser>:
    6278:	df 93       	push	r29
    627a:	cf 93       	push	r28
    627c:	1f 93       	push	r17
    627e:	0f 93       	push	r16
    6280:	ff 92       	push	r15
    6282:	ef 92       	push	r14
    6284:	df 92       	push	r13
    6286:	7b 01       	movw	r14, r22
    6288:	8c 01       	movw	r16, r24
    628a:	68 94       	set
    628c:	06 c0       	rjmp	.+12     	; 0x629a <__fp_powser+0x22>
    628e:	da 2e       	mov	r13, r26
    6290:	ef 01       	movw	r28, r30
    6292:	0e 94 81 30 	call	0x6102	; 0x6102 <__mulsf3x>
    6296:	fe 01       	movw	r30, r28
    6298:	e8 94       	clt
    629a:	a5 91       	lpm	r26, Z+
    629c:	25 91       	lpm	r18, Z+
    629e:	35 91       	lpm	r19, Z+
    62a0:	45 91       	lpm	r20, Z+
    62a2:	55 91       	lpm	r21, Z+
    62a4:	a6 f3       	brts	.-24     	; 0x628e <__fp_powser+0x16>
    62a6:	ef 01       	movw	r28, r30
    62a8:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__addsf3x>
    62ac:	fe 01       	movw	r30, r28
    62ae:	97 01       	movw	r18, r14
    62b0:	a8 01       	movw	r20, r16
    62b2:	da 94       	dec	r13
    62b4:	69 f7       	brne	.-38     	; 0x6290 <__fp_powser+0x18>
    62b6:	df 90       	pop	r13
    62b8:	ef 90       	pop	r14
    62ba:	ff 90       	pop	r15
    62bc:	0f 91       	pop	r16
    62be:	1f 91       	pop	r17
    62c0:	cf 91       	pop	r28
    62c2:	df 91       	pop	r29
    62c4:	08 95       	ret

000062c6 <__mulsi3>:
    62c6:	db 01       	movw	r26, r22
    62c8:	8f 93       	push	r24
    62ca:	9f 93       	push	r25
    62cc:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <__muluhisi3>
    62d0:	bf 91       	pop	r27
    62d2:	af 91       	pop	r26
    62d4:	a2 9f       	mul	r26, r18
    62d6:	80 0d       	add	r24, r0
    62d8:	91 1d       	adc	r25, r1
    62da:	a3 9f       	mul	r26, r19
    62dc:	90 0d       	add	r25, r0
    62de:	b2 9f       	mul	r27, r18
    62e0:	90 0d       	add	r25, r0
    62e2:	11 24       	eor	r1, r1
    62e4:	08 95       	ret

000062e6 <__udivmodhi4>:
    62e6:	aa 1b       	sub	r26, r26
    62e8:	bb 1b       	sub	r27, r27
    62ea:	51 e1       	ldi	r21, 0x11	; 17
    62ec:	07 c0       	rjmp	.+14     	; 0x62fc <__udivmodhi4_ep>

000062ee <__udivmodhi4_loop>:
    62ee:	aa 1f       	adc	r26, r26
    62f0:	bb 1f       	adc	r27, r27
    62f2:	a6 17       	cp	r26, r22
    62f4:	b7 07       	cpc	r27, r23
    62f6:	10 f0       	brcs	.+4      	; 0x62fc <__udivmodhi4_ep>
    62f8:	a6 1b       	sub	r26, r22
    62fa:	b7 0b       	sbc	r27, r23

000062fc <__udivmodhi4_ep>:
    62fc:	88 1f       	adc	r24, r24
    62fe:	99 1f       	adc	r25, r25
    6300:	5a 95       	dec	r21
    6302:	a9 f7       	brne	.-22     	; 0x62ee <__udivmodhi4_loop>
    6304:	80 95       	com	r24
    6306:	90 95       	com	r25
    6308:	bc 01       	movw	r22, r24
    630a:	cd 01       	movw	r24, r26
    630c:	08 95       	ret

0000630e <__divmodhi4>:
    630e:	97 fb       	bst	r25, 7
    6310:	07 2e       	mov	r0, r23
    6312:	16 f4       	brtc	.+4      	; 0x6318 <__divmodhi4+0xa>
    6314:	00 94       	com	r0
    6316:	07 d0       	rcall	.+14     	; 0x6326 <__divmodhi4_neg1>
    6318:	77 fd       	sbrc	r23, 7
    631a:	09 d0       	rcall	.+18     	; 0x632e <__divmodhi4_neg2>
    631c:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__udivmodhi4>
    6320:	07 fc       	sbrc	r0, 7
    6322:	05 d0       	rcall	.+10     	; 0x632e <__divmodhi4_neg2>
    6324:	3e f4       	brtc	.+14     	; 0x6334 <__divmodhi4_exit>

00006326 <__divmodhi4_neg1>:
    6326:	90 95       	com	r25
    6328:	81 95       	neg	r24
    632a:	9f 4f       	sbci	r25, 0xFF	; 255
    632c:	08 95       	ret

0000632e <__divmodhi4_neg2>:
    632e:	70 95       	com	r23
    6330:	61 95       	neg	r22
    6332:	7f 4f       	sbci	r23, 0xFF	; 255

00006334 <__divmodhi4_exit>:
    6334:	08 95       	ret

00006336 <__udivmodsi4>:
    6336:	a1 e2       	ldi	r26, 0x21	; 33
    6338:	1a 2e       	mov	r1, r26
    633a:	aa 1b       	sub	r26, r26
    633c:	bb 1b       	sub	r27, r27
    633e:	fd 01       	movw	r30, r26
    6340:	0d c0       	rjmp	.+26     	; 0x635c <__udivmodsi4_ep>

00006342 <__udivmodsi4_loop>:
    6342:	aa 1f       	adc	r26, r26
    6344:	bb 1f       	adc	r27, r27
    6346:	ee 1f       	adc	r30, r30
    6348:	ff 1f       	adc	r31, r31
    634a:	a2 17       	cp	r26, r18
    634c:	b3 07       	cpc	r27, r19
    634e:	e4 07       	cpc	r30, r20
    6350:	f5 07       	cpc	r31, r21
    6352:	20 f0       	brcs	.+8      	; 0x635c <__udivmodsi4_ep>
    6354:	a2 1b       	sub	r26, r18
    6356:	b3 0b       	sbc	r27, r19
    6358:	e4 0b       	sbc	r30, r20
    635a:	f5 0b       	sbc	r31, r21

0000635c <__udivmodsi4_ep>:
    635c:	66 1f       	adc	r22, r22
    635e:	77 1f       	adc	r23, r23
    6360:	88 1f       	adc	r24, r24
    6362:	99 1f       	adc	r25, r25
    6364:	1a 94       	dec	r1
    6366:	69 f7       	brne	.-38     	; 0x6342 <__udivmodsi4_loop>
    6368:	60 95       	com	r22
    636a:	70 95       	com	r23
    636c:	80 95       	com	r24
    636e:	90 95       	com	r25
    6370:	9b 01       	movw	r18, r22
    6372:	ac 01       	movw	r20, r24
    6374:	bd 01       	movw	r22, r26
    6376:	cf 01       	movw	r24, r30
    6378:	08 95       	ret

0000637a <__divmodsi4>:
    637a:	05 2e       	mov	r0, r21
    637c:	97 fb       	bst	r25, 7
    637e:	1e f4       	brtc	.+6      	; 0x6386 <__divmodsi4+0xc>
    6380:	00 94       	com	r0
    6382:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__negsi2>
    6386:	57 fd       	sbrc	r21, 7
    6388:	07 d0       	rcall	.+14     	; 0x6398 <__divmodsi4_neg2>
    638a:	0e 94 9b 31 	call	0x6336	; 0x6336 <__udivmodsi4>
    638e:	07 fc       	sbrc	r0, 7
    6390:	03 d0       	rcall	.+6      	; 0x6398 <__divmodsi4_neg2>
    6392:	4e f4       	brtc	.+18     	; 0x63a6 <__divmodsi4_exit>
    6394:	0c 94 d4 31 	jmp	0x63a8	; 0x63a8 <__negsi2>

00006398 <__divmodsi4_neg2>:
    6398:	50 95       	com	r21
    639a:	40 95       	com	r20
    639c:	30 95       	com	r19
    639e:	21 95       	neg	r18
    63a0:	3f 4f       	sbci	r19, 0xFF	; 255
    63a2:	4f 4f       	sbci	r20, 0xFF	; 255
    63a4:	5f 4f       	sbci	r21, 0xFF	; 255

000063a6 <__divmodsi4_exit>:
    63a6:	08 95       	ret

000063a8 <__negsi2>:
    63a8:	90 95       	com	r25
    63aa:	80 95       	com	r24
    63ac:	70 95       	com	r23
    63ae:	61 95       	neg	r22
    63b0:	7f 4f       	sbci	r23, 0xFF	; 255
    63b2:	8f 4f       	sbci	r24, 0xFF	; 255
    63b4:	9f 4f       	sbci	r25, 0xFF	; 255
    63b6:	08 95       	ret

000063b8 <__tablejump2__>:
    63b8:	ee 0f       	add	r30, r30
    63ba:	ff 1f       	adc	r31, r31
    63bc:	05 90       	lpm	r0, Z+
    63be:	f4 91       	lpm	r31, Z
    63c0:	e0 2d       	mov	r30, r0
    63c2:	09 94       	ijmp

000063c4 <__umulhisi3>:
    63c4:	a2 9f       	mul	r26, r18
    63c6:	b0 01       	movw	r22, r0
    63c8:	b3 9f       	mul	r27, r19
    63ca:	c0 01       	movw	r24, r0
    63cc:	a3 9f       	mul	r26, r19
    63ce:	70 0d       	add	r23, r0
    63d0:	81 1d       	adc	r24, r1
    63d2:	11 24       	eor	r1, r1
    63d4:	91 1d       	adc	r25, r1
    63d6:	b2 9f       	mul	r27, r18
    63d8:	70 0d       	add	r23, r0
    63da:	81 1d       	adc	r24, r1
    63dc:	11 24       	eor	r1, r1
    63de:	91 1d       	adc	r25, r1
    63e0:	08 95       	ret

000063e2 <__usmulhisi3>:
    63e2:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>

000063e6 <__usmulhisi3_tail>:
    63e6:	b7 ff       	sbrs	r27, 7
    63e8:	08 95       	ret
    63ea:	82 1b       	sub	r24, r18
    63ec:	93 0b       	sbc	r25, r19
    63ee:	08 95       	ret

000063f0 <__muluhisi3>:
    63f0:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__umulhisi3>
    63f4:	a5 9f       	mul	r26, r21
    63f6:	90 0d       	add	r25, r0
    63f8:	b4 9f       	mul	r27, r20
    63fa:	90 0d       	add	r25, r0
    63fc:	a4 9f       	mul	r26, r20
    63fe:	80 0d       	add	r24, r0
    6400:	91 1d       	adc	r25, r1
    6402:	11 24       	eor	r1, r1
    6404:	08 95       	ret

00006406 <__mulshisi3>:
    6406:	b7 ff       	sbrs	r27, 7
    6408:	0c 94 f8 31 	jmp	0x63f0	; 0x63f0 <__muluhisi3>

0000640c <__mulohisi3>:
    640c:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <__muluhisi3>
    6410:	82 1b       	sub	r24, r18
    6412:	93 0b       	sbc	r25, r19
    6414:	08 95       	ret

00006416 <malloc>:
    6416:	0f 93       	push	r16
    6418:	1f 93       	push	r17
    641a:	cf 93       	push	r28
    641c:	df 93       	push	r29
    641e:	82 30       	cpi	r24, 0x02	; 2
    6420:	91 05       	cpc	r25, r1
    6422:	10 f4       	brcc	.+4      	; 0x6428 <malloc+0x12>
    6424:	82 e0       	ldi	r24, 0x02	; 2
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	e0 91 7d 05 	lds	r30, 0x057D	; 0x80057d <__flp>
    642c:	f0 91 7e 05 	lds	r31, 0x057E	; 0x80057e <__flp+0x1>
    6430:	20 e0       	ldi	r18, 0x00	; 0
    6432:	30 e0       	ldi	r19, 0x00	; 0
    6434:	a0 e0       	ldi	r26, 0x00	; 0
    6436:	b0 e0       	ldi	r27, 0x00	; 0
    6438:	30 97       	sbiw	r30, 0x00	; 0
    643a:	19 f1       	breq	.+70     	; 0x6482 <malloc+0x6c>
    643c:	40 81       	ld	r20, Z
    643e:	51 81       	ldd	r21, Z+1	; 0x01
    6440:	02 81       	ldd	r16, Z+2	; 0x02
    6442:	13 81       	ldd	r17, Z+3	; 0x03
    6444:	48 17       	cp	r20, r24
    6446:	59 07       	cpc	r21, r25
    6448:	c8 f0       	brcs	.+50     	; 0x647c <malloc+0x66>
    644a:	84 17       	cp	r24, r20
    644c:	95 07       	cpc	r25, r21
    644e:	69 f4       	brne	.+26     	; 0x646a <malloc+0x54>
    6450:	10 97       	sbiw	r26, 0x00	; 0
    6452:	31 f0       	breq	.+12     	; 0x6460 <malloc+0x4a>
    6454:	12 96       	adiw	r26, 0x02	; 2
    6456:	0c 93       	st	X, r16
    6458:	12 97       	sbiw	r26, 0x02	; 2
    645a:	13 96       	adiw	r26, 0x03	; 3
    645c:	1c 93       	st	X, r17
    645e:	27 c0       	rjmp	.+78     	; 0x64ae <malloc+0x98>
    6460:	00 93 7d 05 	sts	0x057D, r16	; 0x80057d <__flp>
    6464:	10 93 7e 05 	sts	0x057E, r17	; 0x80057e <__flp+0x1>
    6468:	22 c0       	rjmp	.+68     	; 0x64ae <malloc+0x98>
    646a:	21 15       	cp	r18, r1
    646c:	31 05       	cpc	r19, r1
    646e:	19 f0       	breq	.+6      	; 0x6476 <malloc+0x60>
    6470:	42 17       	cp	r20, r18
    6472:	53 07       	cpc	r21, r19
    6474:	18 f4       	brcc	.+6      	; 0x647c <malloc+0x66>
    6476:	9a 01       	movw	r18, r20
    6478:	bd 01       	movw	r22, r26
    647a:	ef 01       	movw	r28, r30
    647c:	df 01       	movw	r26, r30
    647e:	f8 01       	movw	r30, r16
    6480:	db cf       	rjmp	.-74     	; 0x6438 <malloc+0x22>
    6482:	21 15       	cp	r18, r1
    6484:	31 05       	cpc	r19, r1
    6486:	f9 f0       	breq	.+62     	; 0x64c6 <malloc+0xb0>
    6488:	28 1b       	sub	r18, r24
    648a:	39 0b       	sbc	r19, r25
    648c:	24 30       	cpi	r18, 0x04	; 4
    648e:	31 05       	cpc	r19, r1
    6490:	80 f4       	brcc	.+32     	; 0x64b2 <malloc+0x9c>
    6492:	8a 81       	ldd	r24, Y+2	; 0x02
    6494:	9b 81       	ldd	r25, Y+3	; 0x03
    6496:	61 15       	cp	r22, r1
    6498:	71 05       	cpc	r23, r1
    649a:	21 f0       	breq	.+8      	; 0x64a4 <malloc+0x8e>
    649c:	fb 01       	movw	r30, r22
    649e:	93 83       	std	Z+3, r25	; 0x03
    64a0:	82 83       	std	Z+2, r24	; 0x02
    64a2:	04 c0       	rjmp	.+8      	; 0x64ac <malloc+0x96>
    64a4:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <__flp+0x1>
    64a8:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <__flp>
    64ac:	fe 01       	movw	r30, r28
    64ae:	32 96       	adiw	r30, 0x02	; 2
    64b0:	44 c0       	rjmp	.+136    	; 0x653a <malloc+0x124>
    64b2:	fe 01       	movw	r30, r28
    64b4:	e2 0f       	add	r30, r18
    64b6:	f3 1f       	adc	r31, r19
    64b8:	81 93       	st	Z+, r24
    64ba:	91 93       	st	Z+, r25
    64bc:	22 50       	subi	r18, 0x02	; 2
    64be:	31 09       	sbc	r19, r1
    64c0:	39 83       	std	Y+1, r19	; 0x01
    64c2:	28 83       	st	Y, r18
    64c4:	3a c0       	rjmp	.+116    	; 0x653a <malloc+0x124>
    64c6:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <__brkval>
    64ca:	30 91 7c 05 	lds	r19, 0x057C	; 0x80057c <__brkval+0x1>
    64ce:	23 2b       	or	r18, r19
    64d0:	41 f4       	brne	.+16     	; 0x64e2 <malloc+0xcc>
    64d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    64d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    64da:	30 93 7c 05 	sts	0x057C, r19	; 0x80057c <__brkval+0x1>
    64de:	20 93 7b 05 	sts	0x057B, r18	; 0x80057b <__brkval>
    64e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    64e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    64ea:	21 15       	cp	r18, r1
    64ec:	31 05       	cpc	r19, r1
    64ee:	41 f4       	brne	.+16     	; 0x6500 <malloc+0xea>
    64f0:	2d b7       	in	r18, 0x3d	; 61
    64f2:	3e b7       	in	r19, 0x3e	; 62
    64f4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    64f8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    64fc:	24 1b       	sub	r18, r20
    64fe:	35 0b       	sbc	r19, r21
    6500:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <__brkval>
    6504:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <__brkval+0x1>
    6508:	e2 17       	cp	r30, r18
    650a:	f3 07       	cpc	r31, r19
    650c:	a0 f4       	brcc	.+40     	; 0x6536 <malloc+0x120>
    650e:	2e 1b       	sub	r18, r30
    6510:	3f 0b       	sbc	r19, r31
    6512:	28 17       	cp	r18, r24
    6514:	39 07       	cpc	r19, r25
    6516:	78 f0       	brcs	.+30     	; 0x6536 <malloc+0x120>
    6518:	ac 01       	movw	r20, r24
    651a:	4e 5f       	subi	r20, 0xFE	; 254
    651c:	5f 4f       	sbci	r21, 0xFF	; 255
    651e:	24 17       	cp	r18, r20
    6520:	35 07       	cpc	r19, r21
    6522:	48 f0       	brcs	.+18     	; 0x6536 <malloc+0x120>
    6524:	4e 0f       	add	r20, r30
    6526:	5f 1f       	adc	r21, r31
    6528:	50 93 7c 05 	sts	0x057C, r21	; 0x80057c <__brkval+0x1>
    652c:	40 93 7b 05 	sts	0x057B, r20	; 0x80057b <__brkval>
    6530:	81 93       	st	Z+, r24
    6532:	91 93       	st	Z+, r25
    6534:	02 c0       	rjmp	.+4      	; 0x653a <malloc+0x124>
    6536:	e0 e0       	ldi	r30, 0x00	; 0
    6538:	f0 e0       	ldi	r31, 0x00	; 0
    653a:	cf 01       	movw	r24, r30
    653c:	df 91       	pop	r29
    653e:	cf 91       	pop	r28
    6540:	1f 91       	pop	r17
    6542:	0f 91       	pop	r16
    6544:	08 95       	ret

00006546 <free>:
    6546:	cf 93       	push	r28
    6548:	df 93       	push	r29
    654a:	00 97       	sbiw	r24, 0x00	; 0
    654c:	09 f4       	brne	.+2      	; 0x6550 <free+0xa>
    654e:	81 c0       	rjmp	.+258    	; 0x6652 <free+0x10c>
    6550:	fc 01       	movw	r30, r24
    6552:	32 97       	sbiw	r30, 0x02	; 2
    6554:	13 82       	std	Z+3, r1	; 0x03
    6556:	12 82       	std	Z+2, r1	; 0x02
    6558:	a0 91 7d 05 	lds	r26, 0x057D	; 0x80057d <__flp>
    655c:	b0 91 7e 05 	lds	r27, 0x057E	; 0x80057e <__flp+0x1>
    6560:	10 97       	sbiw	r26, 0x00	; 0
    6562:	81 f4       	brne	.+32     	; 0x6584 <free+0x3e>
    6564:	20 81       	ld	r18, Z
    6566:	31 81       	ldd	r19, Z+1	; 0x01
    6568:	82 0f       	add	r24, r18
    656a:	93 1f       	adc	r25, r19
    656c:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <__brkval>
    6570:	30 91 7c 05 	lds	r19, 0x057C	; 0x80057c <__brkval+0x1>
    6574:	28 17       	cp	r18, r24
    6576:	39 07       	cpc	r19, r25
    6578:	51 f5       	brne	.+84     	; 0x65ce <free+0x88>
    657a:	f0 93 7c 05 	sts	0x057C, r31	; 0x80057c <__brkval+0x1>
    657e:	e0 93 7b 05 	sts	0x057B, r30	; 0x80057b <__brkval>
    6582:	67 c0       	rjmp	.+206    	; 0x6652 <free+0x10c>
    6584:	ed 01       	movw	r28, r26
    6586:	20 e0       	ldi	r18, 0x00	; 0
    6588:	30 e0       	ldi	r19, 0x00	; 0
    658a:	ce 17       	cp	r28, r30
    658c:	df 07       	cpc	r29, r31
    658e:	40 f4       	brcc	.+16     	; 0x65a0 <free+0x5a>
    6590:	4a 81       	ldd	r20, Y+2	; 0x02
    6592:	5b 81       	ldd	r21, Y+3	; 0x03
    6594:	9e 01       	movw	r18, r28
    6596:	41 15       	cp	r20, r1
    6598:	51 05       	cpc	r21, r1
    659a:	f1 f0       	breq	.+60     	; 0x65d8 <free+0x92>
    659c:	ea 01       	movw	r28, r20
    659e:	f5 cf       	rjmp	.-22     	; 0x658a <free+0x44>
    65a0:	d3 83       	std	Z+3, r29	; 0x03
    65a2:	c2 83       	std	Z+2, r28	; 0x02
    65a4:	40 81       	ld	r20, Z
    65a6:	51 81       	ldd	r21, Z+1	; 0x01
    65a8:	84 0f       	add	r24, r20
    65aa:	95 1f       	adc	r25, r21
    65ac:	c8 17       	cp	r28, r24
    65ae:	d9 07       	cpc	r29, r25
    65b0:	59 f4       	brne	.+22     	; 0x65c8 <free+0x82>
    65b2:	88 81       	ld	r24, Y
    65b4:	99 81       	ldd	r25, Y+1	; 0x01
    65b6:	84 0f       	add	r24, r20
    65b8:	95 1f       	adc	r25, r21
    65ba:	02 96       	adiw	r24, 0x02	; 2
    65bc:	91 83       	std	Z+1, r25	; 0x01
    65be:	80 83       	st	Z, r24
    65c0:	8a 81       	ldd	r24, Y+2	; 0x02
    65c2:	9b 81       	ldd	r25, Y+3	; 0x03
    65c4:	93 83       	std	Z+3, r25	; 0x03
    65c6:	82 83       	std	Z+2, r24	; 0x02
    65c8:	21 15       	cp	r18, r1
    65ca:	31 05       	cpc	r19, r1
    65cc:	29 f4       	brne	.+10     	; 0x65d8 <free+0x92>
    65ce:	f0 93 7e 05 	sts	0x057E, r31	; 0x80057e <__flp+0x1>
    65d2:	e0 93 7d 05 	sts	0x057D, r30	; 0x80057d <__flp>
    65d6:	3d c0       	rjmp	.+122    	; 0x6652 <free+0x10c>
    65d8:	e9 01       	movw	r28, r18
    65da:	fb 83       	std	Y+3, r31	; 0x03
    65dc:	ea 83       	std	Y+2, r30	; 0x02
    65de:	49 91       	ld	r20, Y+
    65e0:	59 91       	ld	r21, Y+
    65e2:	c4 0f       	add	r28, r20
    65e4:	d5 1f       	adc	r29, r21
    65e6:	ec 17       	cp	r30, r28
    65e8:	fd 07       	cpc	r31, r29
    65ea:	61 f4       	brne	.+24     	; 0x6604 <free+0xbe>
    65ec:	80 81       	ld	r24, Z
    65ee:	91 81       	ldd	r25, Z+1	; 0x01
    65f0:	84 0f       	add	r24, r20
    65f2:	95 1f       	adc	r25, r21
    65f4:	02 96       	adiw	r24, 0x02	; 2
    65f6:	e9 01       	movw	r28, r18
    65f8:	99 83       	std	Y+1, r25	; 0x01
    65fa:	88 83       	st	Y, r24
    65fc:	82 81       	ldd	r24, Z+2	; 0x02
    65fe:	93 81       	ldd	r25, Z+3	; 0x03
    6600:	9b 83       	std	Y+3, r25	; 0x03
    6602:	8a 83       	std	Y+2, r24	; 0x02
    6604:	e0 e0       	ldi	r30, 0x00	; 0
    6606:	f0 e0       	ldi	r31, 0x00	; 0
    6608:	12 96       	adiw	r26, 0x02	; 2
    660a:	8d 91       	ld	r24, X+
    660c:	9c 91       	ld	r25, X
    660e:	13 97       	sbiw	r26, 0x03	; 3
    6610:	00 97       	sbiw	r24, 0x00	; 0
    6612:	19 f0       	breq	.+6      	; 0x661a <free+0xd4>
    6614:	fd 01       	movw	r30, r26
    6616:	dc 01       	movw	r26, r24
    6618:	f7 cf       	rjmp	.-18     	; 0x6608 <free+0xc2>
    661a:	8d 91       	ld	r24, X+
    661c:	9c 91       	ld	r25, X
    661e:	11 97       	sbiw	r26, 0x01	; 1
    6620:	9d 01       	movw	r18, r26
    6622:	2e 5f       	subi	r18, 0xFE	; 254
    6624:	3f 4f       	sbci	r19, 0xFF	; 255
    6626:	82 0f       	add	r24, r18
    6628:	93 1f       	adc	r25, r19
    662a:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <__brkval>
    662e:	30 91 7c 05 	lds	r19, 0x057C	; 0x80057c <__brkval+0x1>
    6632:	28 17       	cp	r18, r24
    6634:	39 07       	cpc	r19, r25
    6636:	69 f4       	brne	.+26     	; 0x6652 <free+0x10c>
    6638:	30 97       	sbiw	r30, 0x00	; 0
    663a:	29 f4       	brne	.+10     	; 0x6646 <free+0x100>
    663c:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <__flp+0x1>
    6640:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <__flp>
    6644:	02 c0       	rjmp	.+4      	; 0x664a <free+0x104>
    6646:	13 82       	std	Z+3, r1	; 0x03
    6648:	12 82       	std	Z+2, r1	; 0x02
    664a:	b0 93 7c 05 	sts	0x057C, r27	; 0x80057c <__brkval+0x1>
    664e:	a0 93 7b 05 	sts	0x057B, r26	; 0x80057b <__brkval>
    6652:	df 91       	pop	r29
    6654:	cf 91       	pop	r28
    6656:	08 95       	ret

00006658 <atoi>:
    6658:	fc 01       	movw	r30, r24
    665a:	88 27       	eor	r24, r24
    665c:	99 27       	eor	r25, r25
    665e:	e8 94       	clt
    6660:	21 91       	ld	r18, Z+
    6662:	20 32       	cpi	r18, 0x20	; 32
    6664:	e9 f3       	breq	.-6      	; 0x6660 <atoi+0x8>
    6666:	29 30       	cpi	r18, 0x09	; 9
    6668:	10 f0       	brcs	.+4      	; 0x666e <atoi+0x16>
    666a:	2e 30       	cpi	r18, 0x0E	; 14
    666c:	c8 f3       	brcs	.-14     	; 0x6660 <atoi+0x8>
    666e:	2b 32       	cpi	r18, 0x2B	; 43
    6670:	41 f0       	breq	.+16     	; 0x6682 <atoi+0x2a>
    6672:	2d 32       	cpi	r18, 0x2D	; 45
    6674:	39 f4       	brne	.+14     	; 0x6684 <atoi+0x2c>
    6676:	68 94       	set
    6678:	04 c0       	rjmp	.+8      	; 0x6682 <atoi+0x2a>
    667a:	0e 94 af 33 	call	0x675e	; 0x675e <__mulhi_const_10>
    667e:	82 0f       	add	r24, r18
    6680:	91 1d       	adc	r25, r1
    6682:	21 91       	ld	r18, Z+
    6684:	20 53       	subi	r18, 0x30	; 48
    6686:	2a 30       	cpi	r18, 0x0A	; 10
    6688:	c0 f3       	brcs	.-16     	; 0x667a <atoi+0x22>
    668a:	1e f4       	brtc	.+6      	; 0x6692 <atoi+0x3a>
    668c:	90 95       	com	r25
    668e:	81 95       	neg	r24
    6690:	9f 4f       	sbci	r25, 0xFF	; 255
    6692:	08 95       	ret

00006694 <atol>:
    6694:	1f 93       	push	r17
    6696:	fc 01       	movw	r30, r24
    6698:	99 27       	eor	r25, r25
    669a:	88 27       	eor	r24, r24
    669c:	bc 01       	movw	r22, r24
    669e:	e8 94       	clt
    66a0:	11 91       	ld	r17, Z+
    66a2:	10 32       	cpi	r17, 0x20	; 32
    66a4:	e9 f3       	breq	.-6      	; 0x66a0 <atol+0xc>
    66a6:	19 30       	cpi	r17, 0x09	; 9
    66a8:	10 f0       	brcs	.+4      	; 0x66ae <atol+0x1a>
    66aa:	1e 30       	cpi	r17, 0x0E	; 14
    66ac:	c8 f3       	brcs	.-14     	; 0x66a0 <atol+0xc>
    66ae:	1b 32       	cpi	r17, 0x2B	; 43
    66b0:	51 f0       	breq	.+20     	; 0x66c6 <atol+0x32>
    66b2:	1d 32       	cpi	r17, 0x2D	; 45
    66b4:	49 f4       	brne	.+18     	; 0x66c8 <atol+0x34>
    66b6:	68 94       	set
    66b8:	06 c0       	rjmp	.+12     	; 0x66c6 <atol+0x32>
    66ba:	0e 94 9a 33 	call	0x6734	; 0x6734 <__mulsi_const_10>
    66be:	61 0f       	add	r22, r17
    66c0:	71 1d       	adc	r23, r1
    66c2:	81 1d       	adc	r24, r1
    66c4:	91 1d       	adc	r25, r1
    66c6:	11 91       	ld	r17, Z+
    66c8:	10 53       	subi	r17, 0x30	; 48
    66ca:	1a 30       	cpi	r17, 0x0A	; 10
    66cc:	b0 f3       	brcs	.-20     	; 0x66ba <atol+0x26>
    66ce:	3e f4       	brtc	.+14     	; 0x66de <atol+0x4a>
    66d0:	90 95       	com	r25
    66d2:	80 95       	com	r24
    66d4:	70 95       	com	r23
    66d6:	61 95       	neg	r22
    66d8:	7f 4f       	sbci	r23, 0xFF	; 255
    66da:	8f 4f       	sbci	r24, 0xFF	; 255
    66dc:	9f 4f       	sbci	r25, 0xFF	; 255
    66de:	1f 91       	pop	r17
    66e0:	08 95       	ret

000066e2 <toupper>:
    66e2:	91 11       	cpse	r25, r1
    66e4:	08 95       	ret
    66e6:	81 56       	subi	r24, 0x61	; 97
    66e8:	8a 51       	subi	r24, 0x1A	; 26
    66ea:	08 f4       	brcc	.+2      	; 0x66ee <toupper+0xc>
    66ec:	80 52       	subi	r24, 0x20	; 32
    66ee:	85 58       	subi	r24, 0x85	; 133
    66f0:	08 95       	ret

000066f2 <strcat>:
    66f2:	fb 01       	movw	r30, r22
    66f4:	dc 01       	movw	r26, r24
    66f6:	0d 90       	ld	r0, X+
    66f8:	00 20       	and	r0, r0
    66fa:	e9 f7       	brne	.-6      	; 0x66f6 <strcat+0x4>
    66fc:	11 97       	sbiw	r26, 0x01	; 1
    66fe:	01 90       	ld	r0, Z+
    6700:	0d 92       	st	X+, r0
    6702:	00 20       	and	r0, r0
    6704:	e1 f7       	brne	.-8      	; 0x66fe <strcat+0xc>
    6706:	08 95       	ret

00006708 <strcpy>:
    6708:	fb 01       	movw	r30, r22
    670a:	dc 01       	movw	r26, r24
    670c:	01 90       	ld	r0, Z+
    670e:	0d 92       	st	X+, r0
    6710:	00 20       	and	r0, r0
    6712:	e1 f7       	brne	.-8      	; 0x670c <strcpy+0x4>
    6714:	08 95       	ret

00006716 <strncpy>:
    6716:	fb 01       	movw	r30, r22
    6718:	dc 01       	movw	r26, r24
    671a:	41 50       	subi	r20, 0x01	; 1
    671c:	50 40       	sbci	r21, 0x00	; 0
    671e:	48 f0       	brcs	.+18     	; 0x6732 <strncpy+0x1c>
    6720:	01 90       	ld	r0, Z+
    6722:	0d 92       	st	X+, r0
    6724:	00 20       	and	r0, r0
    6726:	c9 f7       	brne	.-14     	; 0x671a <strncpy+0x4>
    6728:	01 c0       	rjmp	.+2      	; 0x672c <strncpy+0x16>
    672a:	1d 92       	st	X+, r1
    672c:	41 50       	subi	r20, 0x01	; 1
    672e:	50 40       	sbci	r21, 0x00	; 0
    6730:	e0 f7       	brcc	.-8      	; 0x672a <strncpy+0x14>
    6732:	08 95       	ret

00006734 <__mulsi_const_10>:
    6734:	59 2f       	mov	r21, r25
    6736:	48 2f       	mov	r20, r24
    6738:	37 2f       	mov	r19, r23
    673a:	26 2f       	mov	r18, r22
    673c:	66 0f       	add	r22, r22
    673e:	77 1f       	adc	r23, r23
    6740:	88 1f       	adc	r24, r24
    6742:	99 1f       	adc	r25, r25
    6744:	66 0f       	add	r22, r22
    6746:	77 1f       	adc	r23, r23
    6748:	88 1f       	adc	r24, r24
    674a:	99 1f       	adc	r25, r25
    674c:	62 0f       	add	r22, r18
    674e:	73 1f       	adc	r23, r19
    6750:	84 1f       	adc	r24, r20
    6752:	95 1f       	adc	r25, r21
    6754:	66 0f       	add	r22, r22
    6756:	77 1f       	adc	r23, r23
    6758:	88 1f       	adc	r24, r24
    675a:	99 1f       	adc	r25, r25
    675c:	08 95       	ret

0000675e <__mulhi_const_10>:
    675e:	7a e0       	ldi	r23, 0x0A	; 10
    6760:	97 9f       	mul	r25, r23
    6762:	90 2d       	mov	r25, r0
    6764:	87 9f       	mul	r24, r23
    6766:	80 2d       	mov	r24, r0
    6768:	91 0d       	add	r25, r1
    676a:	11 24       	eor	r1, r1
    676c:	08 95       	ret

0000676e <sprintf>:
    676e:	ae e0       	ldi	r26, 0x0E	; 14
    6770:	b0 e0       	ldi	r27, 0x00	; 0
    6772:	ed eb       	ldi	r30, 0xBD	; 189
    6774:	f3 e3       	ldi	r31, 0x33	; 51
    6776:	0c 94 db 36 	jmp	0x6db6	; 0x6db6 <__prologue_saves__+0x1c>
    677a:	0d 89       	ldd	r16, Y+21	; 0x15
    677c:	1e 89       	ldd	r17, Y+22	; 0x16
    677e:	86 e0       	ldi	r24, 0x06	; 6
    6780:	8c 83       	std	Y+4, r24	; 0x04
    6782:	1a 83       	std	Y+2, r17	; 0x02
    6784:	09 83       	std	Y+1, r16	; 0x01
    6786:	8f ef       	ldi	r24, 0xFF	; 255
    6788:	9f e7       	ldi	r25, 0x7F	; 127
    678a:	9e 83       	std	Y+6, r25	; 0x06
    678c:	8d 83       	std	Y+5, r24	; 0x05
    678e:	ae 01       	movw	r20, r28
    6790:	47 5e       	subi	r20, 0xE7	; 231
    6792:	5f 4f       	sbci	r21, 0xFF	; 255
    6794:	6f 89       	ldd	r22, Y+23	; 0x17
    6796:	78 8d       	ldd	r23, Y+24	; 0x18
    6798:	ce 01       	movw	r24, r28
    679a:	01 96       	adiw	r24, 0x01	; 1
    679c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <vfprintf>
    67a0:	ef 81       	ldd	r30, Y+7	; 0x07
    67a2:	f8 85       	ldd	r31, Y+8	; 0x08
    67a4:	e0 0f       	add	r30, r16
    67a6:	f1 1f       	adc	r31, r17
    67a8:	10 82       	st	Z, r1
    67aa:	2e 96       	adiw	r28, 0x0e	; 14
    67ac:	e4 e0       	ldi	r30, 0x04	; 4
    67ae:	0c 94 f7 36 	jmp	0x6dee	; 0x6dee <__epilogue_restores__+0x1c>

000067b2 <vfprintf>:
    67b2:	ab e0       	ldi	r26, 0x0B	; 11
    67b4:	b0 e0       	ldi	r27, 0x00	; 0
    67b6:	ef ed       	ldi	r30, 0xDF	; 223
    67b8:	f3 e3       	ldi	r31, 0x33	; 51
    67ba:	0c 94 cd 36 	jmp	0x6d9a	; 0x6d9a <__prologue_saves__>
    67be:	6c 01       	movw	r12, r24
    67c0:	7b 01       	movw	r14, r22
    67c2:	8a 01       	movw	r16, r20
    67c4:	fc 01       	movw	r30, r24
    67c6:	17 82       	std	Z+7, r1	; 0x07
    67c8:	16 82       	std	Z+6, r1	; 0x06
    67ca:	83 81       	ldd	r24, Z+3	; 0x03
    67cc:	81 ff       	sbrs	r24, 1
    67ce:	cc c1       	rjmp	.+920    	; 0x6b68 <vfprintf+0x3b6>
    67d0:	ce 01       	movw	r24, r28
    67d2:	01 96       	adiw	r24, 0x01	; 1
    67d4:	3c 01       	movw	r6, r24
    67d6:	f6 01       	movw	r30, r12
    67d8:	93 81       	ldd	r25, Z+3	; 0x03
    67da:	f7 01       	movw	r30, r14
    67dc:	93 fd       	sbrc	r25, 3
    67de:	85 91       	lpm	r24, Z+
    67e0:	93 ff       	sbrs	r25, 3
    67e2:	81 91       	ld	r24, Z+
    67e4:	7f 01       	movw	r14, r30
    67e6:	88 23       	and	r24, r24
    67e8:	09 f4       	brne	.+2      	; 0x67ec <vfprintf+0x3a>
    67ea:	ba c1       	rjmp	.+884    	; 0x6b60 <vfprintf+0x3ae>
    67ec:	85 32       	cpi	r24, 0x25	; 37
    67ee:	39 f4       	brne	.+14     	; 0x67fe <vfprintf+0x4c>
    67f0:	93 fd       	sbrc	r25, 3
    67f2:	85 91       	lpm	r24, Z+
    67f4:	93 ff       	sbrs	r25, 3
    67f6:	81 91       	ld	r24, Z+
    67f8:	7f 01       	movw	r14, r30
    67fa:	85 32       	cpi	r24, 0x25	; 37
    67fc:	29 f4       	brne	.+10     	; 0x6808 <vfprintf+0x56>
    67fe:	b6 01       	movw	r22, r12
    6800:	90 e0       	ldi	r25, 0x00	; 0
    6802:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6806:	e7 cf       	rjmp	.-50     	; 0x67d6 <vfprintf+0x24>
    6808:	91 2c       	mov	r9, r1
    680a:	21 2c       	mov	r2, r1
    680c:	31 2c       	mov	r3, r1
    680e:	ff e1       	ldi	r31, 0x1F	; 31
    6810:	f3 15       	cp	r31, r3
    6812:	d8 f0       	brcs	.+54     	; 0x684a <vfprintf+0x98>
    6814:	8b 32       	cpi	r24, 0x2B	; 43
    6816:	79 f0       	breq	.+30     	; 0x6836 <vfprintf+0x84>
    6818:	38 f4       	brcc	.+14     	; 0x6828 <vfprintf+0x76>
    681a:	80 32       	cpi	r24, 0x20	; 32
    681c:	79 f0       	breq	.+30     	; 0x683c <vfprintf+0x8a>
    681e:	83 32       	cpi	r24, 0x23	; 35
    6820:	a1 f4       	brne	.+40     	; 0x684a <vfprintf+0x98>
    6822:	23 2d       	mov	r18, r3
    6824:	20 61       	ori	r18, 0x10	; 16
    6826:	1d c0       	rjmp	.+58     	; 0x6862 <vfprintf+0xb0>
    6828:	8d 32       	cpi	r24, 0x2D	; 45
    682a:	61 f0       	breq	.+24     	; 0x6844 <vfprintf+0x92>
    682c:	80 33       	cpi	r24, 0x30	; 48
    682e:	69 f4       	brne	.+26     	; 0x684a <vfprintf+0x98>
    6830:	23 2d       	mov	r18, r3
    6832:	21 60       	ori	r18, 0x01	; 1
    6834:	16 c0       	rjmp	.+44     	; 0x6862 <vfprintf+0xb0>
    6836:	83 2d       	mov	r24, r3
    6838:	82 60       	ori	r24, 0x02	; 2
    683a:	38 2e       	mov	r3, r24
    683c:	e3 2d       	mov	r30, r3
    683e:	e4 60       	ori	r30, 0x04	; 4
    6840:	3e 2e       	mov	r3, r30
    6842:	2a c0       	rjmp	.+84     	; 0x6898 <vfprintf+0xe6>
    6844:	f3 2d       	mov	r31, r3
    6846:	f8 60       	ori	r31, 0x08	; 8
    6848:	1d c0       	rjmp	.+58     	; 0x6884 <vfprintf+0xd2>
    684a:	37 fc       	sbrc	r3, 7
    684c:	2d c0       	rjmp	.+90     	; 0x68a8 <vfprintf+0xf6>
    684e:	20 ed       	ldi	r18, 0xD0	; 208
    6850:	28 0f       	add	r18, r24
    6852:	2a 30       	cpi	r18, 0x0A	; 10
    6854:	40 f0       	brcs	.+16     	; 0x6866 <vfprintf+0xb4>
    6856:	8e 32       	cpi	r24, 0x2E	; 46
    6858:	b9 f4       	brne	.+46     	; 0x6888 <vfprintf+0xd6>
    685a:	36 fc       	sbrc	r3, 6
    685c:	81 c1       	rjmp	.+770    	; 0x6b60 <vfprintf+0x3ae>
    685e:	23 2d       	mov	r18, r3
    6860:	20 64       	ori	r18, 0x40	; 64
    6862:	32 2e       	mov	r3, r18
    6864:	19 c0       	rjmp	.+50     	; 0x6898 <vfprintf+0xe6>
    6866:	36 fe       	sbrs	r3, 6
    6868:	06 c0       	rjmp	.+12     	; 0x6876 <vfprintf+0xc4>
    686a:	8a e0       	ldi	r24, 0x0A	; 10
    686c:	98 9e       	mul	r9, r24
    686e:	20 0d       	add	r18, r0
    6870:	11 24       	eor	r1, r1
    6872:	92 2e       	mov	r9, r18
    6874:	11 c0       	rjmp	.+34     	; 0x6898 <vfprintf+0xe6>
    6876:	ea e0       	ldi	r30, 0x0A	; 10
    6878:	2e 9e       	mul	r2, r30
    687a:	20 0d       	add	r18, r0
    687c:	11 24       	eor	r1, r1
    687e:	22 2e       	mov	r2, r18
    6880:	f3 2d       	mov	r31, r3
    6882:	f0 62       	ori	r31, 0x20	; 32
    6884:	3f 2e       	mov	r3, r31
    6886:	08 c0       	rjmp	.+16     	; 0x6898 <vfprintf+0xe6>
    6888:	8c 36       	cpi	r24, 0x6C	; 108
    688a:	21 f4       	brne	.+8      	; 0x6894 <vfprintf+0xe2>
    688c:	83 2d       	mov	r24, r3
    688e:	80 68       	ori	r24, 0x80	; 128
    6890:	38 2e       	mov	r3, r24
    6892:	02 c0       	rjmp	.+4      	; 0x6898 <vfprintf+0xe6>
    6894:	88 36       	cpi	r24, 0x68	; 104
    6896:	41 f4       	brne	.+16     	; 0x68a8 <vfprintf+0xf6>
    6898:	f7 01       	movw	r30, r14
    689a:	93 fd       	sbrc	r25, 3
    689c:	85 91       	lpm	r24, Z+
    689e:	93 ff       	sbrs	r25, 3
    68a0:	81 91       	ld	r24, Z+
    68a2:	7f 01       	movw	r14, r30
    68a4:	81 11       	cpse	r24, r1
    68a6:	b3 cf       	rjmp	.-154    	; 0x680e <vfprintf+0x5c>
    68a8:	98 2f       	mov	r25, r24
    68aa:	9f 7d       	andi	r25, 0xDF	; 223
    68ac:	95 54       	subi	r25, 0x45	; 69
    68ae:	93 30       	cpi	r25, 0x03	; 3
    68b0:	28 f4       	brcc	.+10     	; 0x68bc <vfprintf+0x10a>
    68b2:	0c 5f       	subi	r16, 0xFC	; 252
    68b4:	1f 4f       	sbci	r17, 0xFF	; 255
    68b6:	9f e3       	ldi	r25, 0x3F	; 63
    68b8:	99 83       	std	Y+1, r25	; 0x01
    68ba:	0d c0       	rjmp	.+26     	; 0x68d6 <vfprintf+0x124>
    68bc:	83 36       	cpi	r24, 0x63	; 99
    68be:	31 f0       	breq	.+12     	; 0x68cc <vfprintf+0x11a>
    68c0:	83 37       	cpi	r24, 0x73	; 115
    68c2:	71 f0       	breq	.+28     	; 0x68e0 <vfprintf+0x12e>
    68c4:	83 35       	cpi	r24, 0x53	; 83
    68c6:	09 f0       	breq	.+2      	; 0x68ca <vfprintf+0x118>
    68c8:	59 c0       	rjmp	.+178    	; 0x697c <vfprintf+0x1ca>
    68ca:	21 c0       	rjmp	.+66     	; 0x690e <vfprintf+0x15c>
    68cc:	f8 01       	movw	r30, r16
    68ce:	80 81       	ld	r24, Z
    68d0:	89 83       	std	Y+1, r24	; 0x01
    68d2:	0e 5f       	subi	r16, 0xFE	; 254
    68d4:	1f 4f       	sbci	r17, 0xFF	; 255
    68d6:	88 24       	eor	r8, r8
    68d8:	83 94       	inc	r8
    68da:	91 2c       	mov	r9, r1
    68dc:	53 01       	movw	r10, r6
    68de:	13 c0       	rjmp	.+38     	; 0x6906 <vfprintf+0x154>
    68e0:	28 01       	movw	r4, r16
    68e2:	f2 e0       	ldi	r31, 0x02	; 2
    68e4:	4f 0e       	add	r4, r31
    68e6:	51 1c       	adc	r5, r1
    68e8:	f8 01       	movw	r30, r16
    68ea:	a0 80       	ld	r10, Z
    68ec:	b1 80       	ldd	r11, Z+1	; 0x01
    68ee:	36 fe       	sbrs	r3, 6
    68f0:	03 c0       	rjmp	.+6      	; 0x68f8 <vfprintf+0x146>
    68f2:	69 2d       	mov	r22, r9
    68f4:	70 e0       	ldi	r23, 0x00	; 0
    68f6:	02 c0       	rjmp	.+4      	; 0x68fc <vfprintf+0x14a>
    68f8:	6f ef       	ldi	r22, 0xFF	; 255
    68fa:	7f ef       	ldi	r23, 0xFF	; 255
    68fc:	c5 01       	movw	r24, r10
    68fe:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <strnlen>
    6902:	4c 01       	movw	r8, r24
    6904:	82 01       	movw	r16, r4
    6906:	f3 2d       	mov	r31, r3
    6908:	ff 77       	andi	r31, 0x7F	; 127
    690a:	3f 2e       	mov	r3, r31
    690c:	16 c0       	rjmp	.+44     	; 0x693a <vfprintf+0x188>
    690e:	28 01       	movw	r4, r16
    6910:	22 e0       	ldi	r18, 0x02	; 2
    6912:	42 0e       	add	r4, r18
    6914:	51 1c       	adc	r5, r1
    6916:	f8 01       	movw	r30, r16
    6918:	a0 80       	ld	r10, Z
    691a:	b1 80       	ldd	r11, Z+1	; 0x01
    691c:	36 fe       	sbrs	r3, 6
    691e:	03 c0       	rjmp	.+6      	; 0x6926 <vfprintf+0x174>
    6920:	69 2d       	mov	r22, r9
    6922:	70 e0       	ldi	r23, 0x00	; 0
    6924:	02 c0       	rjmp	.+4      	; 0x692a <vfprintf+0x178>
    6926:	6f ef       	ldi	r22, 0xFF	; 255
    6928:	7f ef       	ldi	r23, 0xFF	; 255
    692a:	c5 01       	movw	r24, r10
    692c:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <strnlen_P>
    6930:	4c 01       	movw	r8, r24
    6932:	f3 2d       	mov	r31, r3
    6934:	f0 68       	ori	r31, 0x80	; 128
    6936:	3f 2e       	mov	r3, r31
    6938:	82 01       	movw	r16, r4
    693a:	33 fc       	sbrc	r3, 3
    693c:	1b c0       	rjmp	.+54     	; 0x6974 <vfprintf+0x1c2>
    693e:	82 2d       	mov	r24, r2
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	88 16       	cp	r8, r24
    6944:	99 06       	cpc	r9, r25
    6946:	b0 f4       	brcc	.+44     	; 0x6974 <vfprintf+0x1c2>
    6948:	b6 01       	movw	r22, r12
    694a:	80 e2       	ldi	r24, 0x20	; 32
    694c:	90 e0       	ldi	r25, 0x00	; 0
    694e:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6952:	2a 94       	dec	r2
    6954:	f4 cf       	rjmp	.-24     	; 0x693e <vfprintf+0x18c>
    6956:	f5 01       	movw	r30, r10
    6958:	37 fc       	sbrc	r3, 7
    695a:	85 91       	lpm	r24, Z+
    695c:	37 fe       	sbrs	r3, 7
    695e:	81 91       	ld	r24, Z+
    6960:	5f 01       	movw	r10, r30
    6962:	b6 01       	movw	r22, r12
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    696a:	21 10       	cpse	r2, r1
    696c:	2a 94       	dec	r2
    696e:	21 e0       	ldi	r18, 0x01	; 1
    6970:	82 1a       	sub	r8, r18
    6972:	91 08       	sbc	r9, r1
    6974:	81 14       	cp	r8, r1
    6976:	91 04       	cpc	r9, r1
    6978:	71 f7       	brne	.-36     	; 0x6956 <vfprintf+0x1a4>
    697a:	e8 c0       	rjmp	.+464    	; 0x6b4c <vfprintf+0x39a>
    697c:	84 36       	cpi	r24, 0x64	; 100
    697e:	11 f0       	breq	.+4      	; 0x6984 <vfprintf+0x1d2>
    6980:	89 36       	cpi	r24, 0x69	; 105
    6982:	41 f5       	brne	.+80     	; 0x69d4 <vfprintf+0x222>
    6984:	f8 01       	movw	r30, r16
    6986:	37 fe       	sbrs	r3, 7
    6988:	07 c0       	rjmp	.+14     	; 0x6998 <vfprintf+0x1e6>
    698a:	60 81       	ld	r22, Z
    698c:	71 81       	ldd	r23, Z+1	; 0x01
    698e:	82 81       	ldd	r24, Z+2	; 0x02
    6990:	93 81       	ldd	r25, Z+3	; 0x03
    6992:	0c 5f       	subi	r16, 0xFC	; 252
    6994:	1f 4f       	sbci	r17, 0xFF	; 255
    6996:	08 c0       	rjmp	.+16     	; 0x69a8 <vfprintf+0x1f6>
    6998:	60 81       	ld	r22, Z
    699a:	71 81       	ldd	r23, Z+1	; 0x01
    699c:	07 2e       	mov	r0, r23
    699e:	00 0c       	add	r0, r0
    69a0:	88 0b       	sbc	r24, r24
    69a2:	99 0b       	sbc	r25, r25
    69a4:	0e 5f       	subi	r16, 0xFE	; 254
    69a6:	1f 4f       	sbci	r17, 0xFF	; 255
    69a8:	f3 2d       	mov	r31, r3
    69aa:	ff 76       	andi	r31, 0x6F	; 111
    69ac:	3f 2e       	mov	r3, r31
    69ae:	97 ff       	sbrs	r25, 7
    69b0:	09 c0       	rjmp	.+18     	; 0x69c4 <vfprintf+0x212>
    69b2:	90 95       	com	r25
    69b4:	80 95       	com	r24
    69b6:	70 95       	com	r23
    69b8:	61 95       	neg	r22
    69ba:	7f 4f       	sbci	r23, 0xFF	; 255
    69bc:	8f 4f       	sbci	r24, 0xFF	; 255
    69be:	9f 4f       	sbci	r25, 0xFF	; 255
    69c0:	f0 68       	ori	r31, 0x80	; 128
    69c2:	3f 2e       	mov	r3, r31
    69c4:	2a e0       	ldi	r18, 0x0A	; 10
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	a3 01       	movw	r20, r6
    69ca:	0e 94 0c 36 	call	0x6c18	; 0x6c18 <__ultoa_invert>
    69ce:	88 2e       	mov	r8, r24
    69d0:	86 18       	sub	r8, r6
    69d2:	45 c0       	rjmp	.+138    	; 0x6a5e <vfprintf+0x2ac>
    69d4:	85 37       	cpi	r24, 0x75	; 117
    69d6:	31 f4       	brne	.+12     	; 0x69e4 <vfprintf+0x232>
    69d8:	23 2d       	mov	r18, r3
    69da:	2f 7e       	andi	r18, 0xEF	; 239
    69dc:	b2 2e       	mov	r11, r18
    69de:	2a e0       	ldi	r18, 0x0A	; 10
    69e0:	30 e0       	ldi	r19, 0x00	; 0
    69e2:	25 c0       	rjmp	.+74     	; 0x6a2e <vfprintf+0x27c>
    69e4:	93 2d       	mov	r25, r3
    69e6:	99 7f       	andi	r25, 0xF9	; 249
    69e8:	b9 2e       	mov	r11, r25
    69ea:	8f 36       	cpi	r24, 0x6F	; 111
    69ec:	c1 f0       	breq	.+48     	; 0x6a1e <vfprintf+0x26c>
    69ee:	18 f4       	brcc	.+6      	; 0x69f6 <vfprintf+0x244>
    69f0:	88 35       	cpi	r24, 0x58	; 88
    69f2:	79 f0       	breq	.+30     	; 0x6a12 <vfprintf+0x260>
    69f4:	b5 c0       	rjmp	.+362    	; 0x6b60 <vfprintf+0x3ae>
    69f6:	80 37       	cpi	r24, 0x70	; 112
    69f8:	19 f0       	breq	.+6      	; 0x6a00 <vfprintf+0x24e>
    69fa:	88 37       	cpi	r24, 0x78	; 120
    69fc:	21 f0       	breq	.+8      	; 0x6a06 <vfprintf+0x254>
    69fe:	b0 c0       	rjmp	.+352    	; 0x6b60 <vfprintf+0x3ae>
    6a00:	e9 2f       	mov	r30, r25
    6a02:	e0 61       	ori	r30, 0x10	; 16
    6a04:	be 2e       	mov	r11, r30
    6a06:	b4 fe       	sbrs	r11, 4
    6a08:	0d c0       	rjmp	.+26     	; 0x6a24 <vfprintf+0x272>
    6a0a:	fb 2d       	mov	r31, r11
    6a0c:	f4 60       	ori	r31, 0x04	; 4
    6a0e:	bf 2e       	mov	r11, r31
    6a10:	09 c0       	rjmp	.+18     	; 0x6a24 <vfprintf+0x272>
    6a12:	34 fe       	sbrs	r3, 4
    6a14:	0a c0       	rjmp	.+20     	; 0x6a2a <vfprintf+0x278>
    6a16:	29 2f       	mov	r18, r25
    6a18:	26 60       	ori	r18, 0x06	; 6
    6a1a:	b2 2e       	mov	r11, r18
    6a1c:	06 c0       	rjmp	.+12     	; 0x6a2a <vfprintf+0x278>
    6a1e:	28 e0       	ldi	r18, 0x08	; 8
    6a20:	30 e0       	ldi	r19, 0x00	; 0
    6a22:	05 c0       	rjmp	.+10     	; 0x6a2e <vfprintf+0x27c>
    6a24:	20 e1       	ldi	r18, 0x10	; 16
    6a26:	30 e0       	ldi	r19, 0x00	; 0
    6a28:	02 c0       	rjmp	.+4      	; 0x6a2e <vfprintf+0x27c>
    6a2a:	20 e1       	ldi	r18, 0x10	; 16
    6a2c:	32 e0       	ldi	r19, 0x02	; 2
    6a2e:	f8 01       	movw	r30, r16
    6a30:	b7 fe       	sbrs	r11, 7
    6a32:	07 c0       	rjmp	.+14     	; 0x6a42 <vfprintf+0x290>
    6a34:	60 81       	ld	r22, Z
    6a36:	71 81       	ldd	r23, Z+1	; 0x01
    6a38:	82 81       	ldd	r24, Z+2	; 0x02
    6a3a:	93 81       	ldd	r25, Z+3	; 0x03
    6a3c:	0c 5f       	subi	r16, 0xFC	; 252
    6a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    6a40:	06 c0       	rjmp	.+12     	; 0x6a4e <vfprintf+0x29c>
    6a42:	60 81       	ld	r22, Z
    6a44:	71 81       	ldd	r23, Z+1	; 0x01
    6a46:	80 e0       	ldi	r24, 0x00	; 0
    6a48:	90 e0       	ldi	r25, 0x00	; 0
    6a4a:	0e 5f       	subi	r16, 0xFE	; 254
    6a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    6a4e:	a3 01       	movw	r20, r6
    6a50:	0e 94 0c 36 	call	0x6c18	; 0x6c18 <__ultoa_invert>
    6a54:	88 2e       	mov	r8, r24
    6a56:	86 18       	sub	r8, r6
    6a58:	fb 2d       	mov	r31, r11
    6a5a:	ff 77       	andi	r31, 0x7F	; 127
    6a5c:	3f 2e       	mov	r3, r31
    6a5e:	36 fe       	sbrs	r3, 6
    6a60:	0d c0       	rjmp	.+26     	; 0x6a7c <vfprintf+0x2ca>
    6a62:	23 2d       	mov	r18, r3
    6a64:	2e 7f       	andi	r18, 0xFE	; 254
    6a66:	a2 2e       	mov	r10, r18
    6a68:	89 14       	cp	r8, r9
    6a6a:	58 f4       	brcc	.+22     	; 0x6a82 <vfprintf+0x2d0>
    6a6c:	34 fe       	sbrs	r3, 4
    6a6e:	0b c0       	rjmp	.+22     	; 0x6a86 <vfprintf+0x2d4>
    6a70:	32 fc       	sbrc	r3, 2
    6a72:	09 c0       	rjmp	.+18     	; 0x6a86 <vfprintf+0x2d4>
    6a74:	83 2d       	mov	r24, r3
    6a76:	8e 7e       	andi	r24, 0xEE	; 238
    6a78:	a8 2e       	mov	r10, r24
    6a7a:	05 c0       	rjmp	.+10     	; 0x6a86 <vfprintf+0x2d4>
    6a7c:	b8 2c       	mov	r11, r8
    6a7e:	a3 2c       	mov	r10, r3
    6a80:	03 c0       	rjmp	.+6      	; 0x6a88 <vfprintf+0x2d6>
    6a82:	b8 2c       	mov	r11, r8
    6a84:	01 c0       	rjmp	.+2      	; 0x6a88 <vfprintf+0x2d6>
    6a86:	b9 2c       	mov	r11, r9
    6a88:	a4 fe       	sbrs	r10, 4
    6a8a:	0f c0       	rjmp	.+30     	; 0x6aaa <vfprintf+0x2f8>
    6a8c:	fe 01       	movw	r30, r28
    6a8e:	e8 0d       	add	r30, r8
    6a90:	f1 1d       	adc	r31, r1
    6a92:	80 81       	ld	r24, Z
    6a94:	80 33       	cpi	r24, 0x30	; 48
    6a96:	21 f4       	brne	.+8      	; 0x6aa0 <vfprintf+0x2ee>
    6a98:	9a 2d       	mov	r25, r10
    6a9a:	99 7e       	andi	r25, 0xE9	; 233
    6a9c:	a9 2e       	mov	r10, r25
    6a9e:	09 c0       	rjmp	.+18     	; 0x6ab2 <vfprintf+0x300>
    6aa0:	a2 fe       	sbrs	r10, 2
    6aa2:	06 c0       	rjmp	.+12     	; 0x6ab0 <vfprintf+0x2fe>
    6aa4:	b3 94       	inc	r11
    6aa6:	b3 94       	inc	r11
    6aa8:	04 c0       	rjmp	.+8      	; 0x6ab2 <vfprintf+0x300>
    6aaa:	8a 2d       	mov	r24, r10
    6aac:	86 78       	andi	r24, 0x86	; 134
    6aae:	09 f0       	breq	.+2      	; 0x6ab2 <vfprintf+0x300>
    6ab0:	b3 94       	inc	r11
    6ab2:	a3 fc       	sbrc	r10, 3
    6ab4:	11 c0       	rjmp	.+34     	; 0x6ad8 <vfprintf+0x326>
    6ab6:	a0 fe       	sbrs	r10, 0
    6ab8:	06 c0       	rjmp	.+12     	; 0x6ac6 <vfprintf+0x314>
    6aba:	b2 14       	cp	r11, r2
    6abc:	88 f4       	brcc	.+34     	; 0x6ae0 <vfprintf+0x32e>
    6abe:	28 0c       	add	r2, r8
    6ac0:	92 2c       	mov	r9, r2
    6ac2:	9b 18       	sub	r9, r11
    6ac4:	0e c0       	rjmp	.+28     	; 0x6ae2 <vfprintf+0x330>
    6ac6:	b2 14       	cp	r11, r2
    6ac8:	60 f4       	brcc	.+24     	; 0x6ae2 <vfprintf+0x330>
    6aca:	b6 01       	movw	r22, r12
    6acc:	80 e2       	ldi	r24, 0x20	; 32
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6ad4:	b3 94       	inc	r11
    6ad6:	f7 cf       	rjmp	.-18     	; 0x6ac6 <vfprintf+0x314>
    6ad8:	b2 14       	cp	r11, r2
    6ada:	18 f4       	brcc	.+6      	; 0x6ae2 <vfprintf+0x330>
    6adc:	2b 18       	sub	r2, r11
    6ade:	02 c0       	rjmp	.+4      	; 0x6ae4 <vfprintf+0x332>
    6ae0:	98 2c       	mov	r9, r8
    6ae2:	21 2c       	mov	r2, r1
    6ae4:	a4 fe       	sbrs	r10, 4
    6ae6:	10 c0       	rjmp	.+32     	; 0x6b08 <vfprintf+0x356>
    6ae8:	b6 01       	movw	r22, r12
    6aea:	80 e3       	ldi	r24, 0x30	; 48
    6aec:	90 e0       	ldi	r25, 0x00	; 0
    6aee:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6af2:	a2 fe       	sbrs	r10, 2
    6af4:	17 c0       	rjmp	.+46     	; 0x6b24 <vfprintf+0x372>
    6af6:	a1 fc       	sbrc	r10, 1
    6af8:	03 c0       	rjmp	.+6      	; 0x6b00 <vfprintf+0x34e>
    6afa:	88 e7       	ldi	r24, 0x78	; 120
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	02 c0       	rjmp	.+4      	; 0x6b04 <vfprintf+0x352>
    6b00:	88 e5       	ldi	r24, 0x58	; 88
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	b6 01       	movw	r22, r12
    6b06:	0c c0       	rjmp	.+24     	; 0x6b20 <vfprintf+0x36e>
    6b08:	8a 2d       	mov	r24, r10
    6b0a:	86 78       	andi	r24, 0x86	; 134
    6b0c:	59 f0       	breq	.+22     	; 0x6b24 <vfprintf+0x372>
    6b0e:	a1 fe       	sbrs	r10, 1
    6b10:	02 c0       	rjmp	.+4      	; 0x6b16 <vfprintf+0x364>
    6b12:	8b e2       	ldi	r24, 0x2B	; 43
    6b14:	01 c0       	rjmp	.+2      	; 0x6b18 <vfprintf+0x366>
    6b16:	80 e2       	ldi	r24, 0x20	; 32
    6b18:	a7 fc       	sbrc	r10, 7
    6b1a:	8d e2       	ldi	r24, 0x2D	; 45
    6b1c:	b6 01       	movw	r22, r12
    6b1e:	90 e0       	ldi	r25, 0x00	; 0
    6b20:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6b24:	89 14       	cp	r8, r9
    6b26:	38 f4       	brcc	.+14     	; 0x6b36 <vfprintf+0x384>
    6b28:	b6 01       	movw	r22, r12
    6b2a:	80 e3       	ldi	r24, 0x30	; 48
    6b2c:	90 e0       	ldi	r25, 0x00	; 0
    6b2e:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6b32:	9a 94       	dec	r9
    6b34:	f7 cf       	rjmp	.-18     	; 0x6b24 <vfprintf+0x372>
    6b36:	8a 94       	dec	r8
    6b38:	f3 01       	movw	r30, r6
    6b3a:	e8 0d       	add	r30, r8
    6b3c:	f1 1d       	adc	r31, r1
    6b3e:	80 81       	ld	r24, Z
    6b40:	b6 01       	movw	r22, r12
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6b48:	81 10       	cpse	r8, r1
    6b4a:	f5 cf       	rjmp	.-22     	; 0x6b36 <vfprintf+0x384>
    6b4c:	22 20       	and	r2, r2
    6b4e:	09 f4       	brne	.+2      	; 0x6b52 <vfprintf+0x3a0>
    6b50:	42 ce       	rjmp	.-892    	; 0x67d6 <vfprintf+0x24>
    6b52:	b6 01       	movw	r22, r12
    6b54:	80 e2       	ldi	r24, 0x20	; 32
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <fputc>
    6b5c:	2a 94       	dec	r2
    6b5e:	f6 cf       	rjmp	.-20     	; 0x6b4c <vfprintf+0x39a>
    6b60:	f6 01       	movw	r30, r12
    6b62:	86 81       	ldd	r24, Z+6	; 0x06
    6b64:	97 81       	ldd	r25, Z+7	; 0x07
    6b66:	02 c0       	rjmp	.+4      	; 0x6b6c <vfprintf+0x3ba>
    6b68:	8f ef       	ldi	r24, 0xFF	; 255
    6b6a:	9f ef       	ldi	r25, 0xFF	; 255
    6b6c:	2b 96       	adiw	r28, 0x0b	; 11
    6b6e:	e2 e1       	ldi	r30, 0x12	; 18
    6b70:	0c 94 e9 36 	jmp	0x6dd2	; 0x6dd2 <__epilogue_restores__>

00006b74 <strnlen_P>:
    6b74:	fc 01       	movw	r30, r24
    6b76:	05 90       	lpm	r0, Z+
    6b78:	61 50       	subi	r22, 0x01	; 1
    6b7a:	70 40       	sbci	r23, 0x00	; 0
    6b7c:	01 10       	cpse	r0, r1
    6b7e:	d8 f7       	brcc	.-10     	; 0x6b76 <strnlen_P+0x2>
    6b80:	80 95       	com	r24
    6b82:	90 95       	com	r25
    6b84:	8e 0f       	add	r24, r30
    6b86:	9f 1f       	adc	r25, r31
    6b88:	08 95       	ret

00006b8a <strnlen>:
    6b8a:	fc 01       	movw	r30, r24
    6b8c:	61 50       	subi	r22, 0x01	; 1
    6b8e:	70 40       	sbci	r23, 0x00	; 0
    6b90:	01 90       	ld	r0, Z+
    6b92:	01 10       	cpse	r0, r1
    6b94:	d8 f7       	brcc	.-10     	; 0x6b8c <strnlen+0x2>
    6b96:	80 95       	com	r24
    6b98:	90 95       	com	r25
    6b9a:	8e 0f       	add	r24, r30
    6b9c:	9f 1f       	adc	r25, r31
    6b9e:	08 95       	ret

00006ba0 <fputc>:
    6ba0:	0f 93       	push	r16
    6ba2:	1f 93       	push	r17
    6ba4:	cf 93       	push	r28
    6ba6:	df 93       	push	r29
    6ba8:	fb 01       	movw	r30, r22
    6baa:	23 81       	ldd	r18, Z+3	; 0x03
    6bac:	21 fd       	sbrc	r18, 1
    6bae:	03 c0       	rjmp	.+6      	; 0x6bb6 <fputc+0x16>
    6bb0:	8f ef       	ldi	r24, 0xFF	; 255
    6bb2:	9f ef       	ldi	r25, 0xFF	; 255
    6bb4:	2c c0       	rjmp	.+88     	; 0x6c0e <fputc+0x6e>
    6bb6:	22 ff       	sbrs	r18, 2
    6bb8:	16 c0       	rjmp	.+44     	; 0x6be6 <fputc+0x46>
    6bba:	46 81       	ldd	r20, Z+6	; 0x06
    6bbc:	57 81       	ldd	r21, Z+7	; 0x07
    6bbe:	24 81       	ldd	r18, Z+4	; 0x04
    6bc0:	35 81       	ldd	r19, Z+5	; 0x05
    6bc2:	42 17       	cp	r20, r18
    6bc4:	53 07       	cpc	r21, r19
    6bc6:	44 f4       	brge	.+16     	; 0x6bd8 <fputc+0x38>
    6bc8:	a0 81       	ld	r26, Z
    6bca:	b1 81       	ldd	r27, Z+1	; 0x01
    6bcc:	9d 01       	movw	r18, r26
    6bce:	2f 5f       	subi	r18, 0xFF	; 255
    6bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    6bd2:	31 83       	std	Z+1, r19	; 0x01
    6bd4:	20 83       	st	Z, r18
    6bd6:	8c 93       	st	X, r24
    6bd8:	26 81       	ldd	r18, Z+6	; 0x06
    6bda:	37 81       	ldd	r19, Z+7	; 0x07
    6bdc:	2f 5f       	subi	r18, 0xFF	; 255
    6bde:	3f 4f       	sbci	r19, 0xFF	; 255
    6be0:	37 83       	std	Z+7, r19	; 0x07
    6be2:	26 83       	std	Z+6, r18	; 0x06
    6be4:	14 c0       	rjmp	.+40     	; 0x6c0e <fputc+0x6e>
    6be6:	8b 01       	movw	r16, r22
    6be8:	ec 01       	movw	r28, r24
    6bea:	fb 01       	movw	r30, r22
    6bec:	00 84       	ldd	r0, Z+8	; 0x08
    6bee:	f1 85       	ldd	r31, Z+9	; 0x09
    6bf0:	e0 2d       	mov	r30, r0
    6bf2:	09 95       	icall
    6bf4:	89 2b       	or	r24, r25
    6bf6:	e1 f6       	brne	.-72     	; 0x6bb0 <fputc+0x10>
    6bf8:	d8 01       	movw	r26, r16
    6bfa:	16 96       	adiw	r26, 0x06	; 6
    6bfc:	8d 91       	ld	r24, X+
    6bfe:	9c 91       	ld	r25, X
    6c00:	17 97       	sbiw	r26, 0x07	; 7
    6c02:	01 96       	adiw	r24, 0x01	; 1
    6c04:	17 96       	adiw	r26, 0x07	; 7
    6c06:	9c 93       	st	X, r25
    6c08:	8e 93       	st	-X, r24
    6c0a:	16 97       	sbiw	r26, 0x06	; 6
    6c0c:	ce 01       	movw	r24, r28
    6c0e:	df 91       	pop	r29
    6c10:	cf 91       	pop	r28
    6c12:	1f 91       	pop	r17
    6c14:	0f 91       	pop	r16
    6c16:	08 95       	ret

00006c18 <__ultoa_invert>:
    6c18:	fa 01       	movw	r30, r20
    6c1a:	aa 27       	eor	r26, r26
    6c1c:	28 30       	cpi	r18, 0x08	; 8
    6c1e:	51 f1       	breq	.+84     	; 0x6c74 <__ultoa_invert+0x5c>
    6c20:	20 31       	cpi	r18, 0x10	; 16
    6c22:	81 f1       	breq	.+96     	; 0x6c84 <__ultoa_invert+0x6c>
    6c24:	e8 94       	clt
    6c26:	6f 93       	push	r22
    6c28:	6e 7f       	andi	r22, 0xFE	; 254
    6c2a:	6e 5f       	subi	r22, 0xFE	; 254
    6c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    6c30:	9f 4f       	sbci	r25, 0xFF	; 255
    6c32:	af 4f       	sbci	r26, 0xFF	; 255
    6c34:	b1 e0       	ldi	r27, 0x01	; 1
    6c36:	3e d0       	rcall	.+124    	; 0x6cb4 <__ultoa_invert+0x9c>
    6c38:	b4 e0       	ldi	r27, 0x04	; 4
    6c3a:	3c d0       	rcall	.+120    	; 0x6cb4 <__ultoa_invert+0x9c>
    6c3c:	67 0f       	add	r22, r23
    6c3e:	78 1f       	adc	r23, r24
    6c40:	89 1f       	adc	r24, r25
    6c42:	9a 1f       	adc	r25, r26
    6c44:	a1 1d       	adc	r26, r1
    6c46:	68 0f       	add	r22, r24
    6c48:	79 1f       	adc	r23, r25
    6c4a:	8a 1f       	adc	r24, r26
    6c4c:	91 1d       	adc	r25, r1
    6c4e:	a1 1d       	adc	r26, r1
    6c50:	6a 0f       	add	r22, r26
    6c52:	71 1d       	adc	r23, r1
    6c54:	81 1d       	adc	r24, r1
    6c56:	91 1d       	adc	r25, r1
    6c58:	a1 1d       	adc	r26, r1
    6c5a:	20 d0       	rcall	.+64     	; 0x6c9c <__ultoa_invert+0x84>
    6c5c:	09 f4       	brne	.+2      	; 0x6c60 <__ultoa_invert+0x48>
    6c5e:	68 94       	set
    6c60:	3f 91       	pop	r19
    6c62:	2a e0       	ldi	r18, 0x0A	; 10
    6c64:	26 9f       	mul	r18, r22
    6c66:	11 24       	eor	r1, r1
    6c68:	30 19       	sub	r19, r0
    6c6a:	30 5d       	subi	r19, 0xD0	; 208
    6c6c:	31 93       	st	Z+, r19
    6c6e:	de f6       	brtc	.-74     	; 0x6c26 <__ultoa_invert+0xe>
    6c70:	cf 01       	movw	r24, r30
    6c72:	08 95       	ret
    6c74:	46 2f       	mov	r20, r22
    6c76:	47 70       	andi	r20, 0x07	; 7
    6c78:	40 5d       	subi	r20, 0xD0	; 208
    6c7a:	41 93       	st	Z+, r20
    6c7c:	b3 e0       	ldi	r27, 0x03	; 3
    6c7e:	0f d0       	rcall	.+30     	; 0x6c9e <__ultoa_invert+0x86>
    6c80:	c9 f7       	brne	.-14     	; 0x6c74 <__ultoa_invert+0x5c>
    6c82:	f6 cf       	rjmp	.-20     	; 0x6c70 <__ultoa_invert+0x58>
    6c84:	46 2f       	mov	r20, r22
    6c86:	4f 70       	andi	r20, 0x0F	; 15
    6c88:	40 5d       	subi	r20, 0xD0	; 208
    6c8a:	4a 33       	cpi	r20, 0x3A	; 58
    6c8c:	18 f0       	brcs	.+6      	; 0x6c94 <__ultoa_invert+0x7c>
    6c8e:	49 5d       	subi	r20, 0xD9	; 217
    6c90:	31 fd       	sbrc	r19, 1
    6c92:	40 52       	subi	r20, 0x20	; 32
    6c94:	41 93       	st	Z+, r20
    6c96:	02 d0       	rcall	.+4      	; 0x6c9c <__ultoa_invert+0x84>
    6c98:	a9 f7       	brne	.-22     	; 0x6c84 <__ultoa_invert+0x6c>
    6c9a:	ea cf       	rjmp	.-44     	; 0x6c70 <__ultoa_invert+0x58>
    6c9c:	b4 e0       	ldi	r27, 0x04	; 4
    6c9e:	a6 95       	lsr	r26
    6ca0:	97 95       	ror	r25
    6ca2:	87 95       	ror	r24
    6ca4:	77 95       	ror	r23
    6ca6:	67 95       	ror	r22
    6ca8:	ba 95       	dec	r27
    6caa:	c9 f7       	brne	.-14     	; 0x6c9e <__ultoa_invert+0x86>
    6cac:	00 97       	sbiw	r24, 0x00	; 0
    6cae:	61 05       	cpc	r22, r1
    6cb0:	71 05       	cpc	r23, r1
    6cb2:	08 95       	ret
    6cb4:	9b 01       	movw	r18, r22
    6cb6:	ac 01       	movw	r20, r24
    6cb8:	0a 2e       	mov	r0, r26
    6cba:	06 94       	lsr	r0
    6cbc:	57 95       	ror	r21
    6cbe:	47 95       	ror	r20
    6cc0:	37 95       	ror	r19
    6cc2:	27 95       	ror	r18
    6cc4:	ba 95       	dec	r27
    6cc6:	c9 f7       	brne	.-14     	; 0x6cba <__ultoa_invert+0xa2>
    6cc8:	62 0f       	add	r22, r18
    6cca:	73 1f       	adc	r23, r19
    6ccc:	84 1f       	adc	r24, r20
    6cce:	95 1f       	adc	r25, r21
    6cd0:	a0 1d       	adc	r26, r0
    6cd2:	08 95       	ret

00006cd4 <eeprom_read_byte>:
    6cd4:	f9 99       	sbic	0x1f, 1	; 31
    6cd6:	fe cf       	rjmp	.-4      	; 0x6cd4 <eeprom_read_byte>
    6cd8:	92 bd       	out	0x22, r25	; 34
    6cda:	81 bd       	out	0x21, r24	; 33
    6cdc:	f8 9a       	sbi	0x1f, 0	; 31
    6cde:	99 27       	eor	r25, r25
    6ce0:	80 b5       	in	r24, 0x20	; 32
    6ce2:	08 95       	ret

00006ce4 <eeprom_read_dword>:
    6ce4:	a6 e1       	ldi	r26, 0x16	; 22
    6ce6:	b0 e0       	ldi	r27, 0x00	; 0
    6ce8:	44 e0       	ldi	r20, 0x04	; 4
    6cea:	50 e0       	ldi	r21, 0x00	; 0
    6cec:	0c 94 bf 36 	jmp	0x6d7e	; 0x6d7e <eeprom_read_blraw>

00006cf0 <eeprom_read_word>:
    6cf0:	a8 e1       	ldi	r26, 0x18	; 24
    6cf2:	b0 e0       	ldi	r27, 0x00	; 0
    6cf4:	42 e0       	ldi	r20, 0x02	; 2
    6cf6:	50 e0       	ldi	r21, 0x00	; 0
    6cf8:	0c 94 bf 36 	jmp	0x6d7e	; 0x6d7e <eeprom_read_blraw>

00006cfc <eeprom_update_byte>:
    6cfc:	26 2f       	mov	r18, r22

00006cfe <eeprom_update_r18>:
    6cfe:	f9 99       	sbic	0x1f, 1	; 31
    6d00:	fe cf       	rjmp	.-4      	; 0x6cfe <eeprom_update_r18>
    6d02:	92 bd       	out	0x22, r25	; 34
    6d04:	81 bd       	out	0x21, r24	; 33
    6d06:	f8 9a       	sbi	0x1f, 0	; 31
    6d08:	01 97       	sbiw	r24, 0x01	; 1
    6d0a:	00 b4       	in	r0, 0x20	; 32
    6d0c:	02 16       	cp	r0, r18
    6d0e:	39 f0       	breq	.+14     	; 0x6d1e <eeprom_update_r18+0x20>
    6d10:	1f ba       	out	0x1f, r1	; 31
    6d12:	20 bd       	out	0x20, r18	; 32
    6d14:	0f b6       	in	r0, 0x3f	; 63
    6d16:	f8 94       	cli
    6d18:	fa 9a       	sbi	0x1f, 2	; 31
    6d1a:	f9 9a       	sbi	0x1f, 1	; 31
    6d1c:	0f be       	out	0x3f, r0	; 63
    6d1e:	08 95       	ret

00006d20 <eeprom_update_dword>:
    6d20:	03 96       	adiw	r24, 0x03	; 3
    6d22:	27 2f       	mov	r18, r23
    6d24:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <eeprom_update_r18>
    6d28:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <eeprom_update_byte>
    6d2c:	25 2f       	mov	r18, r21
    6d2e:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <eeprom_update_r18>
    6d32:	24 2f       	mov	r18, r20
    6d34:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <eeprom_update_r18>

00006d38 <eeprom_update_word>:
    6d38:	01 96       	adiw	r24, 0x01	; 1
    6d3a:	27 2f       	mov	r18, r23
    6d3c:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <eeprom_update_r18>
    6d40:	0c 94 7e 36 	jmp	0x6cfc	; 0x6cfc <eeprom_update_byte>

00006d44 <eeprom_write_byte>:
    6d44:	26 2f       	mov	r18, r22

00006d46 <eeprom_write_r18>:
    6d46:	f9 99       	sbic	0x1f, 1	; 31
    6d48:	fe cf       	rjmp	.-4      	; 0x6d46 <eeprom_write_r18>
    6d4a:	1f ba       	out	0x1f, r1	; 31
    6d4c:	92 bd       	out	0x22, r25	; 34
    6d4e:	81 bd       	out	0x21, r24	; 33
    6d50:	20 bd       	out	0x20, r18	; 32
    6d52:	0f b6       	in	r0, 0x3f	; 63
    6d54:	f8 94       	cli
    6d56:	fa 9a       	sbi	0x1f, 2	; 31
    6d58:	f9 9a       	sbi	0x1f, 1	; 31
    6d5a:	0f be       	out	0x3f, r0	; 63
    6d5c:	01 96       	adiw	r24, 0x01	; 1
    6d5e:	08 95       	ret

00006d60 <eeprom_write_dword>:
    6d60:	24 2f       	mov	r18, r20
    6d62:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <eeprom_write_r18>
    6d66:	25 2f       	mov	r18, r21
    6d68:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <eeprom_write_r18>
    6d6c:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <eeprom_write_word>

00006d70 <eeprom_write_word>:
    6d70:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <eeprom_write_byte>
    6d74:	27 2f       	mov	r18, r23
    6d76:	0c 94 a3 36 	jmp	0x6d46	; 0x6d46 <eeprom_write_r18>

00006d7a <eeprom_read_block>:
    6d7a:	dc 01       	movw	r26, r24
    6d7c:	cb 01       	movw	r24, r22

00006d7e <eeprom_read_blraw>:
    6d7e:	fc 01       	movw	r30, r24
    6d80:	f9 99       	sbic	0x1f, 1	; 31
    6d82:	fe cf       	rjmp	.-4      	; 0x6d80 <eeprom_read_blraw+0x2>
    6d84:	06 c0       	rjmp	.+12     	; 0x6d92 <eeprom_read_blraw+0x14>
    6d86:	f2 bd       	out	0x22, r31	; 34
    6d88:	e1 bd       	out	0x21, r30	; 33
    6d8a:	f8 9a       	sbi	0x1f, 0	; 31
    6d8c:	31 96       	adiw	r30, 0x01	; 1
    6d8e:	00 b4       	in	r0, 0x20	; 32
    6d90:	0d 92       	st	X+, r0
    6d92:	41 50       	subi	r20, 0x01	; 1
    6d94:	50 40       	sbci	r21, 0x00	; 0
    6d96:	b8 f7       	brcc	.-18     	; 0x6d86 <eeprom_read_blraw+0x8>
    6d98:	08 95       	ret

00006d9a <__prologue_saves__>:
    6d9a:	2f 92       	push	r2
    6d9c:	3f 92       	push	r3
    6d9e:	4f 92       	push	r4
    6da0:	5f 92       	push	r5
    6da2:	6f 92       	push	r6
    6da4:	7f 92       	push	r7
    6da6:	8f 92       	push	r8
    6da8:	9f 92       	push	r9
    6daa:	af 92       	push	r10
    6dac:	bf 92       	push	r11
    6dae:	cf 92       	push	r12
    6db0:	df 92       	push	r13
    6db2:	ef 92       	push	r14
    6db4:	ff 92       	push	r15
    6db6:	0f 93       	push	r16
    6db8:	1f 93       	push	r17
    6dba:	cf 93       	push	r28
    6dbc:	df 93       	push	r29
    6dbe:	cd b7       	in	r28, 0x3d	; 61
    6dc0:	de b7       	in	r29, 0x3e	; 62
    6dc2:	ca 1b       	sub	r28, r26
    6dc4:	db 0b       	sbc	r29, r27
    6dc6:	0f b6       	in	r0, 0x3f	; 63
    6dc8:	f8 94       	cli
    6dca:	de bf       	out	0x3e, r29	; 62
    6dcc:	0f be       	out	0x3f, r0	; 63
    6dce:	cd bf       	out	0x3d, r28	; 61
    6dd0:	09 94       	ijmp

00006dd2 <__epilogue_restores__>:
    6dd2:	2a 88       	ldd	r2, Y+18	; 0x12
    6dd4:	39 88       	ldd	r3, Y+17	; 0x11
    6dd6:	48 88       	ldd	r4, Y+16	; 0x10
    6dd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    6dda:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ddc:	7d 84       	ldd	r7, Y+13	; 0x0d
    6dde:	8c 84       	ldd	r8, Y+12	; 0x0c
    6de0:	9b 84       	ldd	r9, Y+11	; 0x0b
    6de2:	aa 84       	ldd	r10, Y+10	; 0x0a
    6de4:	b9 84       	ldd	r11, Y+9	; 0x09
    6de6:	c8 84       	ldd	r12, Y+8	; 0x08
    6de8:	df 80       	ldd	r13, Y+7	; 0x07
    6dea:	ee 80       	ldd	r14, Y+6	; 0x06
    6dec:	fd 80       	ldd	r15, Y+5	; 0x05
    6dee:	0c 81       	ldd	r16, Y+4	; 0x04
    6df0:	1b 81       	ldd	r17, Y+3	; 0x03
    6df2:	aa 81       	ldd	r26, Y+2	; 0x02
    6df4:	b9 81       	ldd	r27, Y+1	; 0x01
    6df6:	ce 0f       	add	r28, r30
    6df8:	d1 1d       	adc	r29, r1
    6dfa:	0f b6       	in	r0, 0x3f	; 63
    6dfc:	f8 94       	cli
    6dfe:	de bf       	out	0x3e, r29	; 62
    6e00:	0f be       	out	0x3f, r0	; 63
    6e02:	cd bf       	out	0x3d, r28	; 61
    6e04:	ed 01       	movw	r28, r26
    6e06:	08 95       	ret

00006e08 <__do_global_dtors>:
    6e08:	11 e0       	ldi	r17, 0x01	; 1
    6e0a:	cd e2       	ldi	r28, 0x2D	; 45
    6e0c:	d1 e0       	ldi	r29, 0x01	; 1
    6e0e:	04 c0       	rjmp	.+8      	; 0x6e18 <__do_global_dtors+0x10>
    6e10:	fe 01       	movw	r30, r28
    6e12:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__tablejump2__>
    6e16:	21 96       	adiw	r28, 0x01	; 1
    6e18:	ce 32       	cpi	r28, 0x2E	; 46
    6e1a:	d1 07       	cpc	r29, r17
    6e1c:	c9 f7       	brne	.-14     	; 0x6e10 <__do_global_dtors+0x8>
    6e1e:	f8 94       	cli

00006e20 <__stop_program>:
    6e20:	ff cf       	rjmp	.-2      	; 0x6e20 <__stop_program>
