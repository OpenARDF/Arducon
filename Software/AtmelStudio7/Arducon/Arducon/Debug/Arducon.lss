
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  00005ab0  00005b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ab0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002af  008002ee  008002ee  00005d52  2**0
                  ALLOC
  3 .eeprom       000002e9  00810000  00810000  00005d52  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000603b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006098  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000488  00000000  00000000  000060d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006caa  00000000  00000000  00006560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001942  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004063  00000000  00000000  0000eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ce4  00000000  00000000  00012bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002275  00000000  00000000  00013894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005172  00000000  00000000  00015b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  0001ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__dtors_end>
       4:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__vector_1>
       8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
       c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      10:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      14:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_5>
      18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      1c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      20:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_8>
      24:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      2c:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_11>
      30:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      38:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_14>
      3c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      44:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      48:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_18>
      4c:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_19>
      50:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      54:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_21>
      58:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      5c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      60:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      64:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      68:	64 01       	movw	r12, r8
      6a:	6f 01       	movw	r12, r30
      6c:	7a 01       	movw	r14, r20
      6e:	85 01       	movw	r16, r10
      70:	90 01       	movw	r18, r0
      72:	9b 01       	movw	r18, r22
      74:	a6 01       	movw	r20, r12
      76:	b1 01       	movw	r22, r2
      78:	bc 01       	movw	r22, r24
      7a:	1d 02       	muls	r17, r29
      7c:	1d 02       	muls	r17, r29
      7e:	c7 01       	movw	r24, r14
      80:	d2 01       	movw	r26, r4
      82:	df 01       	movw	r26, r30
      84:	ec 01       	movw	r28, r24
      86:	f9 01       	movw	r30, r18
      88:	06 02       	muls	r16, r22
      8a:	13 02       	muls	r17, r19
      8c:	28 02       	muls	r18, r24
      8e:	2c 02       	muls	r18, r28
      90:	30 02       	muls	r19, r16
      92:	34 02       	muls	r19, r20
      94:	38 02       	muls	r19, r24
      96:	3c 02       	muls	r19, r28
      98:	40 02       	muls	r20, r16
      9a:	41 02       	muls	r20, r17
      9c:	42 02       	muls	r20, r18
      9e:	58 02       	muls	r21, r24
      a0:	58 02       	muls	r21, r24
      a2:	43 02       	muls	r20, r19
      a4:	47 02       	muls	r20, r23
      a6:	4c 02       	muls	r20, r28
      a8:	50 02       	muls	r21, r16
      aa:	54 02       	muls	r21, r20
      ac:	6a 02       	muls	r22, r26
      ae:	70 02       	muls	r23, r16
      b0:	76 02       	muls	r23, r22
      b2:	7c 02       	muls	r23, r28
      b4:	82 02       	muls	r24, r18
      b6:	88 02       	muls	r24, r24
      b8:	8e 02       	muls	r24, r30
      ba:	94 02       	muls	r25, r20
      bc:	9a 02       	muls	r25, r26
      be:	bd 02       	muls	r27, r29
      c0:	bd 02       	muls	r27, r29
      c2:	a0 02       	muls	r26, r16
      c4:	a6 02       	muls	r26, r22
      c6:	ac 02       	muls	r26, r28
      c8:	b2 02       	muls	r27, r18
      ca:	b8 02       	muls	r27, r24
      cc:	de 02       	muls	r29, r30
      ce:	1c 03       	fmul	r17, r20
      d0:	1c 03       	fmul	r17, r20
      d2:	0a 03       	fmul	r16, r18
      d4:	db 02       	muls	r29, r27
      d6:	0d 03       	fmul	r16, r21
      d8:	13 03       	mulsu	r17, r19
      da:	d8 02       	muls	r29, r24
      dc:	fb 02       	muls	r31, r27
      de:	fe 02       	muls	r31, r30
      e0:	01 03       	mulsu	r16, r17
      e2:	d5 02       	muls	r29, r21
      e4:	16 03       	mulsu	r17, r22
      e6:	5f 03       	fmul	r21, r23
      e8:	31 03       	mulsu	r19, r17
      ea:	62 03       	mulsu	r22, r18
      ec:	34 03       	mulsu	r19, r20
      ee:	37 03       	mulsu	r19, r23
      f0:	3a 03       	fmul	r19, r18
      f2:	3d 03       	fmul	r19, r21
      f4:	40 03       	mulsu	r20, r16
      f6:	43 03       	mulsu	r20, r19
      f8:	46 03       	mulsu	r20, r22
      fa:	49 03       	fmul	r20, r17
      fc:	d1 0e       	add	r13, r17
      fe:	d1 0e       	add	r13, r17
     100:	d1 0e       	add	r13, r17
     102:	d1 0e       	add	r13, r17
     104:	d1 0e       	add	r13, r17
     106:	d1 0e       	add	r13, r17
     108:	24 0f       	add	r18, r20
     10a:	24 0f       	add	r18, r20
     10c:	ef 0e       	add	r14, r31
     10e:	24 0f       	add	r18, r20
     110:	24 0f       	add	r18, r20
     112:	24 0f       	add	r18, r20
     114:	24 0f       	add	r18, r20
     116:	24 0f       	add	r18, r20
     118:	24 0f       	add	r18, r20
     11a:	24 0f       	add	r18, r20
     11c:	24 0f       	add	r18, r20
     11e:	ef 0e       	add	r14, r31
     120:	ef 0e       	add	r14, r31
     122:	bd 0e       	add	r11, r29
     124:	c7 0e       	add	r12, r23
     126:	c3 11       	cpse	r28, r3
     128:	f3 11       	cpse	r31, r3
     12a:	0f 12       	cpse	r0, r31
     12c:	60 13       	cpse	r22, r16
     12e:	60 13       	cpse	r22, r16
     130:	17 12       	cpse	r1, r23
     132:	52 12       	cpse	r5, r18
     134:	b2 12       	cpse	r11, r18
     136:	de 12       	cpse	r13, r30
     138:	e6 12       	cpse	r14, r22
     13a:	ee 12       	cpse	r14, r30
     13c:	f6 12       	cpse	r15, r22
     13e:	23 13       	cpse	r18, r19
     140:	49 21       	and	r20, r9
     142:	0d 21       	and	r16, r13
     144:	39 21       	and	r19, r9
     146:	51 21       	and	r21, r1
     148:	3d 21       	and	r19, r13
     14a:	51 21       	and	r21, r1
     14c:	1d 21       	and	r17, r13
     14e:	09 21       	and	r16, r9
     150:	15 21       	and	r17, r5
     152:	19 21       	and	r17, r9
     154:	51 21       	and	r21, r1
     156:	2d 21       	and	r18, r13
     158:	01 21       	and	r16, r1
     15a:	31 21       	and	r19, r1
     15c:	fd 20       	and	r15, r13
     15e:	11 21       	and	r17, r1
     160:	d5 20       	and	r13, r5
     162:	d9 20       	and	r13, r9
     164:	dd 20       	and	r13, r13
     166:	e1 20       	and	r14, r1
     168:	e5 20       	and	r14, r5
     16a:	e9 20       	and	r14, r9
     16c:	ed 20       	and	r14, r13
     16e:	f1 20       	and	r15, r1
     170:	f5 20       	and	r15, r5
     172:	f9 20       	and	r15, r9
     174:	21 21       	and	r18, r1
     176:	25 21       	and	r18, r5
     178:	4d 21       	and	r20, r13
     17a:	29 21       	and	r18, r9
     17c:	51 21       	and	r21, r1
     17e:	05 21       	and	r16, r5
     180:	41 21       	and	r20, r1
     182:	55 21       	and	r21, r5
     184:	71 20       	and	r7, r1
     186:	75 20       	and	r7, r5
     188:	79 20       	and	r7, r9
     18a:	7d 20       	and	r7, r13
     18c:	81 20       	and	r8, r1
     18e:	85 20       	and	r8, r5
     190:	89 20       	and	r8, r9
     192:	8d 20       	and	r8, r13
     194:	91 20       	and	r9, r1
     196:	95 20       	and	r9, r5
     198:	99 20       	and	r9, r9
     19a:	9d 20       	and	r9, r13
     19c:	a1 20       	and	r10, r1
     19e:	a5 20       	and	r10, r5
     1a0:	a9 20       	and	r10, r9
     1a2:	ad 20       	and	r10, r13
     1a4:	b1 20       	and	r11, r1
     1a6:	b5 20       	and	r11, r5
     1a8:	b9 20       	and	r11, r9
     1aa:	bd 20       	and	r11, r13
     1ac:	c1 20       	and	r12, r1
     1ae:	c5 20       	and	r12, r5
     1b0:	c9 20       	and	r12, r9
     1b2:	cd 20       	and	r12, r13
     1b4:	d1 20       	and	r13, r1
     1b6:	51 21       	and	r21, r1
     1b8:	51 21       	and	r21, r1
     1ba:	51 21       	and	r21, r1
     1bc:	51 21       	and	r21, r1
     1be:	35 21       	and	r19, r5
     1c0:	51 21       	and	r21, r1
     1c2:	51 21       	and	r21, r1
     1c4:	51 21       	and	r21, r1
     1c6:	51 21       	and	r21, r1
     1c8:	51 21       	and	r21, r1
     1ca:	51 21       	and	r21, r1
     1cc:	51 21       	and	r21, r1
     1ce:	51 21       	and	r21, r1
     1d0:	51 21       	and	r21, r1
     1d2:	51 21       	and	r21, r1
     1d4:	51 21       	and	r21, r1
     1d6:	51 21       	and	r21, r1
     1d8:	51 21       	and	r21, r1
     1da:	51 21       	and	r21, r1
     1dc:	51 21       	and	r21, r1
     1de:	51 21       	and	r21, r1
     1e0:	51 21       	and	r21, r1
     1e2:	51 21       	and	r21, r1
     1e4:	51 21       	and	r21, r1
     1e6:	51 21       	and	r21, r1
     1e8:	51 21       	and	r21, r1
     1ea:	51 21       	and	r21, r1
     1ec:	51 21       	and	r21, r1
     1ee:	51 21       	and	r21, r1
     1f0:	51 21       	and	r21, r1
     1f2:	51 21       	and	r21, r1
     1f4:	51 21       	and	r21, r1
     1f6:	51 21       	and	r21, r1
     1f8:	45 21       	and	r20, r5
     1fa:	05 a8       	ldd	r0, Z+53	; 0x35
     1fc:	4c cd       	rjmp	.-1384   	; 0xfffffc96 <__eeprom_end+0xff7ef9ad>
     1fe:	b2 d4       	rcall	.+2404   	; 0xb64 <_ZN8Goertzel13ProcessSampleEi+0x64>
     200:	4e b9       	out	0x0e, r20	; 14
     202:	38 36       	cpi	r19, 0x68	; 104
     204:	a9 02       	muls	r26, r25
     206:	0c 50       	subi	r16, 0x0C	; 12
     208:	b9 91       	ld	r27, Y+
     20a:	86 88       	ldd	r8, Z+22	; 0x16
     20c:	08 3c       	cpi	r16, 0xC8	; 200
     20e:	a6 aa       	std	Z+54, r10	; 0x36
     210:	aa 2a       	or	r10, r26
     212:	be 00       	.word	0x00be	; ????
     214:	00 00       	nop
     216:	80 3f       	cpi	r24, 0xF0	; 240

00000218 <__ctors_start>:
     218:	48 20       	and	r4, r8

0000021a <__ctors_end>:
     21a:	5d 20       	and	r5, r13

0000021c <__dtors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	d8 e0       	ldi	r29, 0x08	; 8
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61

00000228 <__do_copy_data>:
     228:	12 e0       	ldi	r17, 0x02	; 2
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b1 e0       	ldi	r27, 0x01	; 1
     22e:	e0 eb       	ldi	r30, 0xB0	; 176
     230:	fa e5       	ldi	r31, 0x5A	; 90
     232:	02 c0       	rjmp	.+4      	; 0x238 <__do_copy_data+0x10>
     234:	05 90       	lpm	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	ae 3e       	cpi	r26, 0xEE	; 238
     23a:	b1 07       	cpc	r27, r17
     23c:	d9 f7       	brne	.-10     	; 0x234 <__do_copy_data+0xc>

0000023e <__do_clear_bss>:
     23e:	25 e0       	ldi	r18, 0x05	; 5
     240:	ae ee       	ldi	r26, 0xEE	; 238
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	ad 39       	cpi	r26, 0x9D	; 157
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>

0000024e <__do_global_ctors>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	cd e0       	ldi	r28, 0x0D	; 13
     252:	d1 e0       	ldi	r29, 0x01	; 1
     254:	04 c0       	rjmp	.+8      	; 0x25e <__do_global_ctors+0x10>
     256:	21 97       	sbiw	r28, 0x01	; 1
     258:	fe 01       	movw	r30, r28
     25a:	0e 94 3e 28 	call	0x507c	; 0x507c <__tablejump2__>
     25e:	cc 30       	cpi	r28, 0x0C	; 12
     260:	d1 07       	cpc	r29, r17
     262:	c9 f7       	brne	.-14     	; 0x256 <__do_global_ctors+0x8>
     264:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <main>
     268:	0c 94 4b 2d 	jmp	0x5a96	; 0x5a96 <__do_global_dtors>

0000026c <__bad_interrupt>:
     26c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000270 <month_length>:
     270:	62 30       	cpi	r22, 0x02	; 2
     272:	21 f4       	brne	.+8      	; 0x27c <month_length+0xc>
     274:	0e 94 45 01 	call	0x28a	; 0x28a <is_leap_year>
     278:	84 5e       	subi	r24, 0xE4	; 228
     27a:	08 95       	ret
     27c:	68 30       	cpi	r22, 0x08	; 8
     27e:	08 f0       	brcs	.+2      	; 0x282 <month_length+0x12>
     280:	6f 5f       	subi	r22, 0xFF	; 255
     282:	61 70       	andi	r22, 0x01	; 1
     284:	8e e1       	ldi	r24, 0x1E	; 30
     286:	86 0f       	add	r24, r22
     288:	08 95       	ret

0000028a <is_leap_year>:
     28a:	9c 01       	movw	r18, r24
     28c:	23 70       	andi	r18, 0x03	; 3
     28e:	33 27       	eor	r19, r19
     290:	23 2b       	or	r18, r19
     292:	59 f4       	brne	.+22     	; 0x2aa <is_leap_year+0x20>
     294:	64 e6       	ldi	r22, 0x64	; 100
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
     29c:	89 2b       	or	r24, r25
     29e:	39 f4       	brne	.+14     	; 0x2ae <is_leap_year+0x24>
     2a0:	63 70       	andi	r22, 0x03	; 3
     2a2:	77 27       	eor	r23, r23
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	67 2b       	or	r22, r23
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <is_leap_year+0x26>
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	08 95       	ret

000002b2 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	32 97       	sbiw	r30, 0x02	; 2
     2b8:	e2 31       	cpi	r30, 0x12	; 18
     2ba:	f1 05       	cpc	r31, r1
     2bc:	08 f0       	brcs	.+2      	; 0x2c0 <_Z7pinModehh+0xe>
     2be:	bd c0       	rjmp	.+378    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     2c0:	ec 5c       	subi	r30, 0xCC	; 204
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     2c8:	61 30       	cpi	r22, 0x01	; 1
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     2cc:	52 9a       	sbi	0x0a, 2	; 10
     2ce:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2d0:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2d2:	63 30       	cpi	r22, 0x03	; 3
     2d4:	11 f4       	brne	.+4      	; 0x2da <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2d6:	5a 9a       	sbi	0x0b, 2	; 11
     2d8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2da:	5a 98       	cbi	0x0b, 2	; 11
     2dc:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2de:	61 30       	cpi	r22, 0x01	; 1
     2e0:	11 f4       	brne	.+4      	; 0x2e6 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2e2:	53 9a       	sbi	0x0a, 3	; 10
     2e4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2e6:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	11 f4       	brne	.+4      	; 0x2f0 <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2ec:	5b 9a       	sbi	0x0b, 3	; 11
     2ee:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2f0:	5b 98       	cbi	0x0b, 3	; 11
     2f2:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     2f4:	61 30       	cpi	r22, 0x01	; 1
     2f6:	11 f4       	brne	.+4      	; 0x2fc <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     2f8:	54 9a       	sbi	0x0a, 4	; 10
     2fa:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     2fc:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     2fe:	63 30       	cpi	r22, 0x03	; 3
     300:	11 f4       	brne	.+4      	; 0x306 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     302:	5c 9a       	sbi	0x0b, 4	; 11
     304:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     306:	5c 98       	cbi	0x0b, 4	; 11
     308:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     30a:	61 30       	cpi	r22, 0x01	; 1
     30c:	11 f4       	brne	.+4      	; 0x312 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     30e:	55 9a       	sbi	0x0a, 5	; 10
     310:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     312:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     314:	63 30       	cpi	r22, 0x03	; 3
     316:	11 f4       	brne	.+4      	; 0x31c <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     318:	5d 9a       	sbi	0x0b, 5	; 11
     31a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     31c:	5d 98       	cbi	0x0b, 5	; 11
     31e:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     320:	61 30       	cpi	r22, 0x01	; 1
     322:	11 f4       	brne	.+4      	; 0x328 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     324:	56 9a       	sbi	0x0a, 6	; 10
     326:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     328:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     32a:	63 30       	cpi	r22, 0x03	; 3
     32c:	11 f4       	brne	.+4      	; 0x332 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     32e:	5e 9a       	sbi	0x0b, 6	; 11
     330:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     332:	5e 98       	cbi	0x0b, 6	; 11
     334:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     336:	61 30       	cpi	r22, 0x01	; 1
     338:	11 f4       	brne	.+4      	; 0x33e <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     33a:	57 9a       	sbi	0x0a, 7	; 10
     33c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     33e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     340:	63 30       	cpi	r22, 0x03	; 3
     342:	11 f4       	brne	.+4      	; 0x348 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     344:	5f 9a       	sbi	0x0b, 7	; 11
     346:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     348:	5f 98       	cbi	0x0b, 7	; 11
     34a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     34c:	61 30       	cpi	r22, 0x01	; 1
     34e:	11 f4       	brne	.+4      	; 0x354 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB0);
     350:	20 9a       	sbi	0x04, 0	; 4
     352:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     354:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     356:	63 30       	cpi	r22, 0x03	; 3
     358:	11 f4       	brne	.+4      	; 0x35e <_Z7pinModehh+0xac>
				{
					PORTB  |= (1 << PORTB0);
     35a:	28 9a       	sbi	0x05, 0	; 5
     35c:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     35e:	28 98       	cbi	0x05, 0	; 5
     360:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     362:	61 30       	cpi	r22, 0x01	; 1
     364:	11 f4       	brne	.+4      	; 0x36a <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB1);
     366:	21 9a       	sbi	0x04, 1	; 4
     368:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     36a:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     36c:	63 30       	cpi	r22, 0x03	; 3
     36e:	11 f4       	brne	.+4      	; 0x374 <_Z7pinModehh+0xc2>
				{
					PORTB  |= (1 << PORTB1);
     370:	29 9a       	sbi	0x05, 1	; 5
     372:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     374:	29 98       	cbi	0x05, 1	; 5
     376:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     378:	61 30       	cpi	r22, 0x01	; 1
     37a:	11 f4       	brne	.+4      	; 0x380 <_Z7pinModehh+0xce>
			{
				DDRB  |= (1 << PORTB2);
     37c:	22 9a       	sbi	0x04, 2	; 4
     37e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     380:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     382:	63 30       	cpi	r22, 0x03	; 3
     384:	11 f4       	brne	.+4      	; 0x38a <_Z7pinModehh+0xd8>
				{
					PORTB  |= (1 << PORTB2);
     386:	2a 9a       	sbi	0x05, 2	; 5
     388:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     38a:	2a 98       	cbi	0x05, 2	; 5
     38c:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     38e:	61 30       	cpi	r22, 0x01	; 1
     390:	11 f4       	brne	.+4      	; 0x396 <_Z7pinModehh+0xe4>
			{
				DDRB  |= (1 << PORTB5);
     392:	25 9a       	sbi	0x04, 5	; 4
     394:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     396:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     398:	63 30       	cpi	r22, 0x03	; 3
     39a:	11 f4       	brne	.+4      	; 0x3a0 <_Z7pinModehh+0xee>
				{
					PORTD  |= (1 << PORTB5);
     39c:	5d 9a       	sbi	0x0b, 5	; 11
     39e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3a0:	5d 98       	cbi	0x0b, 5	; 11
     3a2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3a4:	61 30       	cpi	r22, 0x01	; 1
     3a6:	11 f4       	brne	.+4      	; 0x3ac <_Z7pinModehh+0xfa>
			{
				DDRC  |= (1 << PORTC0);
     3a8:	38 9a       	sbi	0x07, 0	; 7
     3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <_Z7pinModehh+0x110>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3ac:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ae:	63 30       	cpi	r22, 0x03	; 3
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <_Z7pinModehh+0x106>
				{
					PORTC  |= (1 << PORTC0);
     3b2:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3b4:	39 98       	cbi	0x07, 1	; 7
     3b6:	0a c0       	rjmp	.+20     	; 0x3cc <_Z7pinModehh+0x11a>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3b8:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3ba:	39 98       	cbi	0x07, 1	; 7
     3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <_Z7pinModehh+0x120>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     3be:	61 30       	cpi	r22, 0x01	; 1
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <_Z7pinModehh+0x114>
			{
				DDRC  |= (1 << PORTC1);
     3c2:	39 9a       	sbi	0x07, 1	; 7
     3c4:	0b c0       	rjmp	.+22     	; 0x3dc <_Z7pinModehh+0x12a>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3c6:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     3c8:	63 30       	cpi	r22, 0x03	; 3
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <_Z7pinModehh+0x120>
				{
					PORTC  |= (1 << PORTC1);
     3cc:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3ce:	3a 98       	cbi	0x07, 2	; 7
     3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <_Z7pinModehh+0x134>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     3d2:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3d4:	3a 98       	cbi	0x07, 2	; 7
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <_Z7pinModehh+0x13a>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     3d8:	61 30       	cpi	r22, 0x01	; 1
     3da:	11 f4       	brne	.+4      	; 0x3e0 <_Z7pinModehh+0x12e>
			{
				DDRC  |= (1 << PORTC2);
     3dc:	3a 9a       	sbi	0x07, 2	; 7
     3de:	0b c0       	rjmp	.+22     	; 0x3f6 <_Z7pinModehh+0x144>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3e0:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     3e2:	63 30       	cpi	r22, 0x03	; 3
     3e4:	19 f4       	brne	.+6      	; 0x3ec <_Z7pinModehh+0x13a>
				{
					PORTC  |= (1 << PORTC2);
     3e6:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3e8:	3b 98       	cbi	0x07, 3	; 7
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     3ec:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3ee:	3b 98       	cbi	0x07, 3	; 7
     3f0:	0a c0       	rjmp	.+20     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     3f2:	61 30       	cpi	r22, 0x01	; 1
     3f4:	11 f4       	brne	.+4      	; 0x3fa <_Z7pinModehh+0x148>
			{
				DDRC  |= (1 << PORTC3);
     3f6:	3b 9a       	sbi	0x07, 3	; 7
     3f8:	0b c0       	rjmp	.+22     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3fa:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     3fc:	63 30       	cpi	r22, 0x03	; 3
     3fe:	19 f4       	brne	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
				{
					PORTC  |= (1 << PORTC3);
     400:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     402:	3c 98       	cbi	0x07, 4	; 7
     404:	0a c0       	rjmp	.+20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     406:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     408:	3c 98       	cbi	0x07, 4	; 7
     40a:	0a c0       	rjmp	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     40c:	61 30       	cpi	r22, 0x01	; 1
     40e:	11 f4       	brne	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				DDRC  |= (1 << PORTC4);
     410:	3c 9a       	sbi	0x07, 4	; 7
     412:	0b c0       	rjmp	.+22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     414:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     416:	63 30       	cpi	r22, 0x03	; 3
     418:	19 f4       	brne	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					PORTC  |= (1 << PORTC4);
     41a:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     41c:	3d 98       	cbi	0x07, 5	; 7
     41e:	0a c0       	rjmp	.+20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     420:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     422:	3d 98       	cbi	0x07, 5	; 7
     424:	09 c0       	rjmp	.+18     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     426:	61 30       	cpi	r22, 0x01	; 1
     428:	11 f4       	brne	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				DDRC  |= (1 << PORTC5);
     42a:	3d 9a       	sbi	0x07, 5	; 7
     42c:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     42e:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     430:	63 30       	cpi	r22, 0x03	; 3
     432:	11 f4       	brne	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				{
					PORTC  |= (1 << PORTC5);
     434:	45 9a       	sbi	0x08, 5	; 8
     436:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     438:	45 98       	cbi	0x08, 5	; 8
     43a:	08 95       	ret

0000043c <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	32 97       	sbiw	r30, 0x02	; 2
     442:	e0 31       	cpi	r30, 0x10	; 16
     444:	f1 05       	cpc	r31, r1
     446:	a0 f5       	brcc	.+104    	; 0x4b0 <_Z11digitalReadh+0x74>
     448:	ea 5b       	subi	r30, 0xBA	; 186
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     450:	29 b1       	in	r18, 0x09	; 9
     452:	24 70       	andi	r18, 0x04	; 4
     454:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     456:	2e c0       	rjmp	.+92     	; 0x4b4 <_Z11digitalReadh+0x78>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     458:	29 b1       	in	r18, 0x09	; 9
     45a:	28 70       	andi	r18, 0x08	; 8
     45c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     45e:	2a c0       	rjmp	.+84     	; 0x4b4 <_Z11digitalReadh+0x78>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     460:	29 b1       	in	r18, 0x09	; 9
     462:	20 71       	andi	r18, 0x10	; 16
     464:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     466:	26 c0       	rjmp	.+76     	; 0x4b4 <_Z11digitalReadh+0x78>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     468:	29 b1       	in	r18, 0x09	; 9
     46a:	20 72       	andi	r18, 0x20	; 32
     46c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     46e:	22 c0       	rjmp	.+68     	; 0x4b4 <_Z11digitalReadh+0x78>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     470:	29 b1       	in	r18, 0x09	; 9
     472:	20 74       	andi	r18, 0x40	; 64
     474:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     476:	1e c0       	rjmp	.+60     	; 0x4b4 <_Z11digitalReadh+0x78>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     478:	29 b1       	in	r18, 0x09	; 9
     47a:	20 78       	andi	r18, 0x80	; 128
     47c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47e:	1a c0       	rjmp	.+52     	; 0x4b4 <_Z11digitalReadh+0x78>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     480:	83 b1       	in	r24, 0x03	; 3
		}

		case D9:
		{
			result = PINB & (1 << PORTB1);
     482:	83 b1       	in	r24, 0x03	; 3
		}

		case D10:
		{
			result = PINB & (1 << PORTB2);
     484:	83 b1       	in	r24, 0x03	; 3
		}

		case D13:
		{
			result = PINB & (1 << PORTB5);
     486:	23 b1       	in	r18, 0x03	; 3
     488:	20 72       	andi	r18, 0x20	; 32
     48a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48c:	13 c0       	rjmp	.+38     	; 0x4b4 <_Z11digitalReadh+0x78>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     48e:	86 b1       	in	r24, 0x06	; 6
     490:	28 2f       	mov	r18, r24
     492:	21 70       	andi	r18, 0x01	; 1
     494:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     496:	0e c0       	rjmp	.+28     	; 0x4b4 <_Z11digitalReadh+0x78>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     498:	26 b1       	in	r18, 0x06	; 6
     49a:	22 70       	andi	r18, 0x02	; 2
     49c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49e:	0a c0       	rjmp	.+20     	; 0x4b4 <_Z11digitalReadh+0x78>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4a0:	26 b1       	in	r18, 0x06	; 6
     4a2:	24 70       	andi	r18, 0x04	; 4
     4a4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <_Z11digitalReadh+0x78>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4a8:	26 b1       	in	r18, 0x06	; 6
     4aa:	28 70       	andi	r18, 0x08	; 8
     4ac:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_Z11digitalReadh+0x78>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	23 2b       	or	r18, r19
     4b8:	09 f4       	brne	.+2      	; 0x4bc <_Z11digitalReadh+0x80>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
}
     4bc:	08 95       	ret

000004be <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	32 97       	sbiw	r30, 0x02	; 2
     4c4:	e0 31       	cpi	r30, 0x10	; 16
     4c6:	f1 05       	cpc	r31, r1
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <_Z12digitalWritehh+0xe>
     4ca:	57 c0       	rjmp	.+174    	; 0x57a <_Z12digitalWritehh+0xbc>
     4cc:	ea 5a       	subi	r30, 0xAA	; 170
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
	{
		case D2:
		{
			if(value)
     4d4:	66 23       	and	r22, r22
     4d6:	11 f0       	breq	.+4      	; 0x4dc <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     4d8:	5a 9a       	sbi	0x0b, 2	; 11
     4da:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     4dc:	5a 98       	cbi	0x0b, 2	; 11
     4de:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     4e0:	66 23       	and	r22, r22
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     4e4:	5b 9a       	sbi	0x0b, 3	; 11
     4e6:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     4e8:	5b 98       	cbi	0x0b, 3	; 11
     4ea:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     4ec:	66 23       	and	r22, r22
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     4f0:	5c 9a       	sbi	0x0b, 4	; 11
     4f2:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     4f4:	5c 98       	cbi	0x0b, 4	; 11
     4f6:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     4f8:	66 23       	and	r22, r22
     4fa:	11 f0       	breq	.+4      	; 0x500 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     4fc:	5d 9a       	sbi	0x0b, 5	; 11
     4fe:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     500:	5d 98       	cbi	0x0b, 5	; 11
     502:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     504:	66 23       	and	r22, r22
     506:	11 f0       	breq	.+4      	; 0x50c <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     508:	5e 9a       	sbi	0x0b, 6	; 11
     50a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     50c:	5e 98       	cbi	0x0b, 6	; 11
     50e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     510:	66 23       	and	r22, r22
     512:	11 f0       	breq	.+4      	; 0x518 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     514:	5f 9a       	sbi	0x0b, 7	; 11
     516:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     518:	5f 98       	cbi	0x0b, 7	; 11
     51a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     51c:	66 23       	and	r22, r22
     51e:	11 f0       	breq	.+4      	; 0x524 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB0);
     520:	28 9a       	sbi	0x05, 0	; 5
     522:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     524:	28 98       	cbi	0x05, 0	; 5
     526:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     528:	66 23       	and	r22, r22
     52a:	11 f0       	breq	.+4      	; 0x530 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB1);
     52c:	29 9a       	sbi	0x05, 1	; 5
     52e:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     530:	29 98       	cbi	0x05, 1	; 5
     532:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     534:	66 23       	and	r22, r22
     536:	11 f0       	breq	.+4      	; 0x53c <_Z12digitalWritehh+0x7e>
			{
				PORTB  |= (1 << PORTB2);
     538:	2a 9a       	sbi	0x05, 2	; 5
     53a:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     53c:	2a 98       	cbi	0x05, 2	; 5
     53e:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     540:	66 23       	and	r22, r22
     542:	11 f0       	breq	.+4      	; 0x548 <_Z12digitalWritehh+0x8a>
			{
				PORTB  |= (1 << PORTB5);
     544:	2d 9a       	sbi	0x05, 5	; 5
     546:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     548:	2d 98       	cbi	0x05, 5	; 5
     54a:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     54c:	66 23       	and	r22, r22
     54e:	11 f0       	breq	.+4      	; 0x554 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC0);
     550:	40 9a       	sbi	0x08, 0	; 8
     552:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     554:	40 98       	cbi	0x08, 0	; 8
     556:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     558:	66 23       	and	r22, r22
     55a:	11 f0       	breq	.+4      	; 0x560 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC1);
     55c:	41 9a       	sbi	0x08, 1	; 8
     55e:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     560:	41 98       	cbi	0x08, 1	; 8
     562:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     564:	66 23       	and	r22, r22
     566:	11 f0       	breq	.+4      	; 0x56c <_Z12digitalWritehh+0xae>
			{
				PORTC  |= (1 << PORTC2);
     568:	42 9a       	sbi	0x08, 2	; 8
     56a:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     56c:	42 98       	cbi	0x08, 2	; 8
     56e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     570:	66 23       	and	r22, r22
     572:	11 f0       	breq	.+4      	; 0x578 <_Z12digitalWritehh+0xba>
			{
				PORTC  |= (1 << PORTC3);
     574:	43 9a       	sbi	0x08, 3	; 8
     576:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     578:	43 98       	cbi	0x08, 3	; 8
     57a:	08 95       	ret

0000057c <_ZN13EepromManagerC1Ev>:
extern uint8_t g_dataModulation[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     57c:	08 95       	ret

0000057e <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     57e:	08 95       	ret

00000580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val) return;
     588:	41 15       	cp	r20, r1
     58a:	51 05       	cpc	r21, r1
     58c:	09 f4       	brne	.+2      	; 0x590 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     58e:	54 c0       	rjmp	.+168    	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb8>

	switch(v)
     590:	86 2f       	mov	r24, r22
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	3b 97       	sbiw	r30, 0x0b	; 11
     598:	ed 30       	cpi	r30, 0x0D	; 13
     59a:	f1 05       	cpc	r31, r1
     59c:	08 f0       	brcs	.+2      	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     59e:	4c c0       	rjmp	.+152    	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb8>
     5a0:	da 01       	movw	r26, r20
     5a2:	ea 59       	subi	r30, 0x9A	; 154
     5a4:	ff 4f       	sbci	r31, 0xFF	; 255
     5a6:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5aa:	83 ee       	ldi	r24, 0xE3	; 227
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	2b c0       	rjmp	.+86     	; 0x606 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x86>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     5b0:	8b ed       	ldi	r24, 0xDB	; 219
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	3d c0       	rjmp	.+122    	; 0x630 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     5b6:	87 ed       	ldi	r24, 0xD7	; 215
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	31 c0       	rjmp	.+98     	; 0x61e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x9e>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     5bc:	8a 01       	movw	r16, r20
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     5c4:	66 23       	and	r22, r22
     5c6:	71 f0       	breq	.+28     	; 0x5e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     5c8:	c0 e0       	ldi	r28, 0x00	; 0
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]),(uint8_t)c);
     5cc:	21 96       	adiw	r28, 0x01	; 1
     5ce:	ce 01       	movw	r24, r28
     5d0:	88 5d       	subi	r24, 0xD8	; 216
     5d2:	9d 4f       	sbci	r25, 0xFD	; 253
     5d4:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <eeprom_update_byte>
				c = *char_addr++;
     5d8:	f8 01       	movw	r30, r16
     5da:	61 91       	ld	r22, Z+
     5dc:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     5de:	61 11       	cpse	r22, r1
     5e0:	f5 cf       	rjmp	.-22     	; 0x5cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]),(uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]),0);
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	87 5d       	subi	r24, 0xD7	; 215
     5ee:	9d 4f       	sbci	r25, 0xFD	; 253
     5f0:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <eeprom_update_byte>
     5f4:	21 c0       	rjmp	.+66     	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb8>
		}
		break;

		case Enable_start_timer:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_start_timer);
     5f6:	8d ed       	ldi	r24, 0xDD	; 221
     5f8:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     5fa:	11 c0       	rjmp	.+34     	; 0x61e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x9e>

		case Enable_transmitter:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_transmitter);
     5fc:	8e ed       	ldi	r24, 0xDE	; 222
     5fe:	92 e0       	ldi	r25, 0x02	; 2

		}
		break;
     600:	0e c0       	rjmp	.+28     	; 0x61e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x9e>

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     602:	8f ed       	ldi	r24, 0xDF	; 223
     604:	92 e0       	ldi	r25, 0x02	; 2
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     606:	4d 91       	ld	r20, X+
     608:	5d 91       	ld	r21, X+
     60a:	6d 91       	ld	r22, X+
     60c:	7c 91       	ld	r23, X
     60e:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <eeprom_update_dword>
     612:	12 c0       	rjmp	.+36     	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb8>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     614:	86 ed       	ldi	r24, 0xD6	; 214
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	02 c0       	rjmp	.+4      	; 0x61e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x9e>
		}
		break;

		case Enable_LEDs:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_LEDs);
     61a:	88 ed       	ldi	r24, 0xD8	; 216
     61c:	92 e0       	ldi	r25, 0x02	; 2
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     61e:	6c 91       	ld	r22, X
     620:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <eeprom_update_byte>
     624:	09 c0       	rjmp	.+18     	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb8>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     626:	89 ed       	ldi	r24, 0xD9	; 217
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	02 c0       	rjmp	.+4      	; 0x630 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xb0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     62c:	87 ee       	ldi	r24, 0xE7	; 231
     62e:	92 e0       	ldi	r25, 0x02	; 2
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     630:	6d 91       	ld	r22, X+
     632:	7c 91       	ld	r23, X
     634:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <eeprom_update_word>
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
	}
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
	char* ee_addr = NULL;

	switch(v)
     64c:	86 2f       	mov	r24, r22
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8b 30       	cpi	r24, 0x0B	; 11
     652:	91 05       	cpc	r25, r1
     654:	08 f0       	brcs	.+2      	; 0x658 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     656:	40 c0       	rjmp	.+128    	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x96>
     658:	fc 01       	movw	r30, r24
     65a:	ed 58       	subi	r30, 0x8D	; 141
     65c:	ff 4f       	sbci	r31, 0xFF	; 255
     65e:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     662:	8a e2       	ldi	r24, 0x2A	; 42
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	30 c0       	rjmp	.+96     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     668:	8d e4       	ldi	r24, 0x4D	; 77
     66a:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     66c:	2d c0       	rjmp	.+90     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     66e:	83 e7       	ldi	r24, 0x73	; 115
     670:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     672:	2a c0       	rjmp	.+84     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     674:	8a e9       	ldi	r24, 0x9A	; 154
     676:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     678:	27 c0       	rjmp	.+78     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     67a:	8b eb       	ldi	r24, 0xBB	; 187
     67c:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     67e:	24 c0       	rjmp	.+72     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     680:	86 ed       	ldi	r24, 0xD6	; 214
     682:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     684:	21 c0       	rjmp	.+66     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     686:	8c ee       	ldi	r24, 0xEC	; 236
     688:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     68a:	1e c0       	rjmp	.+60     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     690:	1b c0       	rjmp	.+54     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     692:	85 e1       	ldi	r24, 0x15	; 21
     694:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     696:	18 c0       	rjmp	.+48     	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     698:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     69a:	cc 23       	and	r28, r28
     69c:	e9 f0       	breq	.+58     	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x96>
		{
			lb_echo_char(c);
     69e:	8c 2f       	mov	r24, r28
     6a0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     6a4:	78 01       	movw	r14, r16
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	e8 1a       	sub	r14, r24
     6aa:	f8 0a       	sbc	r15, r24
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     6b2:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     6b4:	0e 94 ae 08 	call	0x115c	; 0x115c <_Z19linkbusTxInProgressv>
     6b8:	81 11       	cpse	r24, r1
     6ba:	fc cf       	rjmp	.-8      	; 0x6b4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x72>
     6bc:	ed cf       	rjmp	.-38     	; 0x698 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x56>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     6c4:	85 e2       	ldi	r24, 0x25	; 37
     6c6:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     6c8:	8c 01       	movw	r16, r24
     6ca:	0f 5f       	subi	r16, 0xFF	; 255
     6cc:	1f 4f       	sbci	r17, 0xFF	; 255
     6ce:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     6d2:	c8 2f       	mov	r28, r24

		while(c)
     6d4:	81 11       	cpse	r24, r1
     6d6:	e3 cf       	rjmp	.-58     	; 0x69e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x5c>
			{
				;
			}
		}
	}
}
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	08 95       	ret

000006e4 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     6f0:	87 ee       	ldi	r24, 0xE7	; 231
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     6f8:	8b 3b       	cpi	r24, 0xBB	; 187
     6fa:	91 05       	cpc	r25, r1
     6fc:	09 f0       	breq	.+2      	; 0x700 <_ZN13EepromManager11readNonVolsEv+0x1c>
     6fe:	a1 c0       	rjmp	.+322    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     700:	86 ed       	ldi	r24, 0xD6	; 214
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	91 05       	cpc	r25, r1
     70e:	14 f4       	brge	.+4      	; 0x714 <_ZN13EepromManager11readNonVolsEv+0x30>
     710:	85 e0       	ldi	r24, 0x05	; 5
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	85 31       	cpi	r24, 0x15	; 21
     716:	91 05       	cpc	r25, r1
     718:	14 f0       	brlt	.+4      	; 0x71e <_ZN13EepromManager11readNonVolsEv+0x3a>
     71a:	84 e1       	ldi	r24, 0x14	; 20
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), NO_CODE_START_TONES_5M);
     722:	87 ed       	ldi	r24, 0xD7	; 215
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     72a:	86 31       	cpi	r24, 0x16	; 22
     72c:	08 f0       	brcs	.+2      	; 0x730 <_ZN13EepromManager11readNonVolsEv+0x4c>
     72e:	85 e1       	ldi	r24, 0x15	; 21
     730:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <g_fox>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     734:	89 ed       	ldi	r24, 0xD9	; 217
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <eeprom_read_word>
     73c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_atmega_temp_calibration+0x1>
     740:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     744:	8b ed       	ldi	r24, 0xDB	; 219
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <eeprom_read_word>
     74c:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <g_rv3028_offset+0x1>
     750:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_rv3028_offset>
		g_enable_LEDs = eeprom_read_byte(&(EepromManager::ee_vars.enable_LEDs));
     754:	88 ed       	ldi	r24, 0xD8	; 216
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     75c:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&(EepromManager::ee_vars.enable_start_timer));
     760:	8d ed       	ldi	r24, 0xDD	; 221
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     768:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
     76c:	8e ed       	ldi	r24, 0xDE	; 222
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     774:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     778:	8f ed       	ldi	r24, 0xDF	; 223
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <eeprom_read_dword>
     780:	60 93 79 05 	sts	0x0579, r22	; 0x800579 <g_event_start_epoch>
     784:	70 93 7a 05 	sts	0x057A, r23	; 0x80057a <g_event_start_epoch+0x1>
     788:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <g_event_start_epoch+0x2>
     78c:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     790:	83 ee       	ldi	r24, 0xE3	; 227
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <eeprom_read_dword>
     798:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <g_event_finish_epoch>
     79c:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <g_event_finish_epoch+0x1>
     7a0:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <g_event_finish_epoch+0x2>
     7a4:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <g_event_finish_epoch+0x3>
     7a8:	09 e2       	ldi	r16, 0x29	; 41
     7aa:	12 e0       	ldi	r17, 0x02	; 2
     7ac:	c9 e2       	ldi	r28, 0x29	; 41
     7ae:	d5 e0       	ldi	r29, 0x05	; 5
     7b0:	0f 2e       	mov	r0, r31
     7b2:	fd e3       	ldi	r31, 0x3D	; 61
     7b4:	ef 2e       	mov	r14, r31
     7b6:	f5 e0       	ldi	r31, 0x05	; 5
     7b8:	ff 2e       	mov	r15, r31
     7ba:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     7bc:	c8 01       	movw	r24, r16
     7be:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     7c2:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     7c4:	81 11       	cpse	r24, r1
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <_ZN13EepromManager11readNonVolsEv+0xfa>
     7c8:	06 eb       	ldi	r16, 0xB6	; 182
     7ca:	12 e0       	ldi	r17, 0x02	; 2
     7cc:	c3 e5       	ldi	r28, 0x53	; 83
     7ce:	d5 e0       	ldi	r29, 0x05	; 5
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f3 e7       	ldi	r31, 0x73	; 115
     7d4:	ef 2e       	mov	r14, r31
     7d6:	f5 e0       	ldi	r31, 0x05	; 5
     7d8:	ff 2e       	mov	r15, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <_ZN13EepromManager11readNonVolsEv+0x106>
     7de:	0f 5f       	subi	r16, 0xFF	; 255
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_start_timer = eeprom_read_byte(&(EepromManager::ee_vars.enable_start_timer));
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     7e2:	ce 15       	cp	r28, r14
     7e4:	df 05       	cpc	r29, r15
     7e6:	51 f7       	brne	.-44     	; 0x7bc <_ZN13EepromManager11readNonVolsEv+0xd8>
     7e8:	ef cf       	rjmp	.-34     	; 0x7c8 <_ZN13EepromManager11readNonVolsEv+0xe4>
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     7ea:	c8 01       	movw	r24, r16
     7ec:	0e 94 cc 2c 	call	0x5998	; 0x5998 <eeprom_read_byte>
     7f0:	89 93       	st	Y+, r24
     7f2:	0f 5f       	subi	r16, 0xFF	; 255
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     7f6:	ce 15       	cp	r28, r14
     7f8:	df 05       	cpc	r29, r15
     7fa:	b9 f7       	brne	.-18     	; 0x7ea <_ZN13EepromManager11readNonVolsEv+0x106>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     7fc:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
     800:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
     804:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
     808:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
     80c:	89 2b       	or	r24, r25
     80e:	8a 2b       	or	r24, r26
     810:	8b 2b       	or	r24, r27
     812:	c9 f0       	breq	.+50     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     814:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <g_event_finish_epoch>
     818:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
     81c:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
     820:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
     824:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
     828:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
     82c:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
     830:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
     834:	84 17       	cp	r24, r20
     836:	95 07       	cpc	r25, r21
     838:	a6 07       	cpc	r26, r22
     83a:	b7 07       	cpc	r27, r23
     83c:	30 f4       	brcc	.+12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	19 c0       	rjmp	.+50     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	17 c0       	rjmp	.+46     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	15 c0       	rjmp	.+42     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     84a:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
     84e:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
     852:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
     856:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
     85a:	80 58       	subi	r24, 0x80	; 128
     85c:	9e 4a       	sbci	r25, 0xAE	; 174
     85e:	ae 4f       	sbci	r26, 0xFE	; 254
     860:	bf 4f       	sbci	r27, 0xFF	; 255
     862:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <g_event_finish_epoch>
     866:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <g_event_finish_epoch+0x1>
     86a:	a0 93 77 05 	sts	0x0577, r26	; 0x800577 <g_event_finish_epoch+0x2>
     86e:	b0 93 78 05 	sts	0x0578, r27	; 0x800578 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     872:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	08 95       	ret

00000882 <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     888:	0e 94 4f 09 	call	0x129e	; 0x129e <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	ce 01       	movw	r24, r28
     898:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     89c:	0e 94 4f 09 	call	0x129e	; 0x129e <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     8a0:	0e 94 4f 09 	call	0x129e	; 0x129e <_Z15lb_send_NewLinev>
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i]));
     8aa:	cb 01       	movw	r24, r22
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	82 5c       	subi	r24, 0xC2	; 194
     8b2:	9d 4f       	sbci	r25, 0xFD	; 253
     8b4:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <eeprom_read_word>
}
     8b8:	08 95       	ret

000008ba <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     8ba:	9c 01       	movw	r18, r24
     8bc:	2e 5f       	subi	r18, 0xFE	; 254
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	2b 33       	cpi	r18, 0x3B	; 59
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	38 07       	cpc	r19, r24
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <_Z8setAttenj+0x12>
     8c8:	2b e3       	ldi	r18, 0x3B	; 59
     8ca:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     8cc:	ad ec       	ldi	r26, 0xCD	; 205
     8ce:	bc ec       	ldi	r27, 0xCC	; 204
     8d0:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	96 95       	lsr	r25
     8da:	87 95       	ror	r24
     8dc:	9c 01       	movw	r18, r24
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	22 0f       	add	r18, r18
     8e4:	33 1f       	adc	r19, r19
     8e6:	28 0f       	add	r18, r24
     8e8:	39 1f       	adc	r19, r25
	att /= 5;
     8ea:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>
     8ee:	96 95       	lsr	r25
     8f0:	87 95       	ror	r24
     8f2:	96 95       	lsr	r25
     8f4:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     8f6:	9c 01       	movw	r18, r24
     8f8:	20 73       	andi	r18, 0x30	; 48
     8fa:	33 27       	eor	r19, r19
     8fc:	32 95       	swap	r19
     8fe:	22 95       	swap	r18
     900:	2f 70       	andi	r18, 0x0F	; 15
     902:	23 27       	eor	r18, r19
     904:	3f 70       	andi	r19, 0x0F	; 15
     906:	23 27       	eor	r18, r19
     908:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <__data_end>

	pattern = PORTC & 0xF0;
     90c:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     90e:	8f 70       	andi	r24, 0x0F	; 15
     910:	90 7f       	andi	r25, 0xF0	; 240
     912:	89 2b       	or	r24, r25
     914:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     916:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     918:	8c 7f       	andi	r24, 0xFC	; 252
     91a:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <__data_end>
     91e:	89 2b       	or	r24, r25
     920:	8b b9       	out	0x0b, r24	; 11
     922:	08 95       	ret

00000924 <_Z10setupPortsv>:
}

void setupPorts(void)
{
	linkbus_disable();
     924:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	8e e0       	ldi	r24, 0x0E	; 14
     92c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	8f e0       	ldi	r24, 0x0F	; 15
     934:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e1       	ldi	r24, 0x10	; 16
     93c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	81 e1       	ldi	r24, 0x11	; 17
     944:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	86 e0       	ldi	r24, 0x06	; 6
     95c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	86 e0       	ldi	r24, 0x06	; 6
     964:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
     968:	08 95       	ret

0000096a <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	e4 2e       	mov	r14, r20
     978:	f5 2e       	mov	r15, r21
     97a:	d6 2f       	mov	r29, r22
     97c:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     97e:	00 93 06 03 	sts	0x0306, r16	; 0x800306 <_SAMPLING_FREQUENCY>
     982:	10 93 07 03 	sts	0x0307, r17	; 0x800307 <_SAMPLING_FREQUENCY+0x1>
     986:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <_SAMPLING_FREQUENCY+0x2>
     98a:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	41 e5       	ldi	r20, 0x51	; 81
     994:	53 e4       	ldi	r21, 0x43	; 67
     996:	6e 2d       	mov	r22, r14
     998:	7f 2d       	mov	r23, r15
     99a:	8d 2f       	mov	r24, r29
     99c:	9c 2f       	mov	r25, r28
     99e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__gesf2>
     9a2:	18 16       	cp	r1, r24
     9a4:	6c f0       	brlt	.+26     	; 0x9c0 <_ZN8GoertzelC1Eff+0x56>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	48 ec       	ldi	r20, 0xC8	; 200
     9ac:	52 e4       	ldi	r21, 0x42	; 66
     9ae:	6e 2d       	mov	r22, r14
     9b0:	7f 2d       	mov	r23, r15
     9b2:	8d 2f       	mov	r24, r29
     9b4:	9c 2f       	mov	r25, r28
     9b6:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__cmpsf2>
     9ba:	88 23       	and	r24, r24
     9bc:	34 f0       	brlt	.+12     	; 0x9ca <_ZN8GoertzelC1Eff+0x60>
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <_ZN8GoertzelC1Eff+0x68>
     9c0:	e1 2c       	mov	r14, r1
     9c2:	f1 2c       	mov	r15, r1
     9c4:	d1 e5       	ldi	r29, 0x51	; 81
     9c6:	c3 e4       	ldi	r28, 0x43	; 67
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <_ZN8GoertzelC1Eff+0x68>
     9ca:	e1 2c       	mov	r14, r1
     9cc:	f1 2c       	mov	r15, r1
     9ce:	d8 ec       	ldi	r29, 0xC8	; 200
     9d0:	c2 e4       	ldi	r28, 0x42	; 66
     9d2:	6e 2d       	mov	r22, r14
     9d4:	7f 2d       	mov	r23, r15
     9d6:	8d 2f       	mov	r24, r29
     9d8:	9c 2f       	mov	r25, r28
     9da:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__fixsfsi>
     9de:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <_N+0x1>
     9e2:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     9e6:	cb 01       	movw	r24, r22
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	0e 94 6d 28 	call	0x50da	; 0x50da <malloc>
     9f0:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <testData+0x1>
     9f4:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <testData>
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     a06:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <testData>
     a0a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <testData+0x1>
     a0e:	0e 94 05 29 	call	0x520a	; 0x520a <free>
     a12:	08 95       	ret

00000a14 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     a14:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Q2>
     a18:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Q2+0x1>
     a1c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <Q2+0x2>
     a20:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <Q2+0x3>
	Q1 = 0;
     a24:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <Q1>
     a28:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <Q1+0x1>
     a2c:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <Q1+0x2>
     a30:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Q1+0x3>
	_samplesReady = false;
     a34:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_samplesReady>
     a38:	08 95       	ret

00000a3a <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
     a50:	4a 01       	movw	r8, r20
     a52:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     a54:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <_N>
     a58:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <_N+0x1>
     a5c:	07 2e       	mov	r0, r23
     a5e:	00 0c       	add	r0, r0
     a60:	88 0b       	sbc	r24, r24
     a62:	99 0b       	sbc	r25, r25
     a64:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__floatsisf>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     a6c:	80 92 02 03 	sts	0x0302, r8	; 0x800302 <_TARGET_FREQUENCY>
     a70:	90 92 03 03 	sts	0x0303, r9	; 0x800303 <_TARGET_FREQUENCY+0x1>
     a74:	a0 92 04 03 	sts	0x0304, r10	; 0x800304 <_TARGET_FREQUENCY+0x2>
     a78:	b0 92 05 03 	sts	0x0305, r11	; 0x800305 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     a7c:	a5 01       	movw	r20, r10
     a7e:	94 01       	movw	r18, r8
     a80:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     a84:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <_SAMPLING_FREQUENCY>
     a88:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <_SAMPLING_FREQUENCY+0x1>
     a8c:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <_SAMPLING_FREQUENCY+0x2>
     a90:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <_SAMPLING_FREQUENCY+0x3>
     a94:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__divsf3>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	0e 94 bc 24 	call	0x4978	; 0x4978 <__addsf3>
     aa4:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__fixsfsi>
     aa8:	07 2e       	mov	r0, r23
     aaa:	00 0c       	add	r0, r0
     aac:	88 0b       	sbc	r24, r24
     aae:	99 0b       	sbc	r25, r25
     ab0:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__floatsisf>
     ab4:	2b ed       	ldi	r18, 0xDB	; 219
     ab6:	3f e0       	ldi	r19, 0x0F	; 15
     ab8:	49 ec       	ldi	r20, 0xC9	; 201
     aba:	50 e4       	ldi	r21, 0x40	; 64
     abc:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     ac0:	a7 01       	movw	r20, r14
     ac2:	96 01       	movw	r18, r12
     ac4:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__divsf3>
     ac8:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <cos>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	0e 94 bc 24 	call	0x4978	; 0x4978 <__addsf3>
     ad4:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <g_coeff>
     ad8:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <g_coeff+0x1>
     adc:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <g_coeff+0x2>
     ae0:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <g_coeff+0x3>
	ResetGoertzel();
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN8Goertzel13ResetGoertzelEv>
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	08 95       	ret

00000b00 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     b00:	8f 92       	push	r8
     b02:	9f 92       	push	r9
     b04:	af 92       	push	r10
     b06:	bf 92       	push	r11
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     b16:	c0 90 f8 02 	lds	r12, 0x02F8	; 0x8002f8 <Q1>
     b1a:	d0 90 f9 02 	lds	r13, 0x02F9	; 0x8002f9 <Q1+0x1>
     b1e:	e0 90 fa 02 	lds	r14, 0x02FA	; 0x8002fa <Q1+0x2>
     b22:	f0 90 fb 02 	lds	r15, 0x02FB	; 0x8002fb <Q1+0x3>
     b26:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <g_coeff>
     b2a:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <g_coeff+0x1>
     b2e:	40 91 fe 02 	lds	r20, 0x02FE	; 0x8002fe <g_coeff+0x2>
     b32:	50 91 ff 02 	lds	r21, 0x02FF	; 0x8002ff <g_coeff+0x3>
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     b3e:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <Q2>
     b42:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <Q2+0x1>
     b46:	40 91 f6 02 	lds	r20, 0x02F6	; 0x8002f6 <Q2+0x2>
     b4a:	50 91 f7 02 	lds	r21, 0x02F7	; 0x8002f7 <Q2+0x3>
     b4e:	0e 94 bb 24 	call	0x4976	; 0x4976 <__subsf3>
     b52:	4b 01       	movw	r8, r22
     b54:	5c 01       	movw	r10, r24
     b56:	be 01       	movw	r22, r28
     b58:	72 50       	subi	r23, 0x02	; 2
     b5a:	07 2e       	mov	r0, r23
     b5c:	00 0c       	add	r0, r0
     b5e:	88 0b       	sbc	r24, r24
     b60:	99 0b       	sbc	r25, r25
     b62:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__floatsisf>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	c5 01       	movw	r24, r10
     b6c:	b4 01       	movw	r22, r8
     b6e:	0e 94 bc 24 	call	0x4978	; 0x4978 <__addsf3>

	Q2 = Q1;
     b72:	c0 92 f4 02 	sts	0x02F4, r12	; 0x8002f4 <Q2>
     b76:	d0 92 f5 02 	sts	0x02F5, r13	; 0x8002f5 <Q2+0x1>
     b7a:	e0 92 f6 02 	sts	0x02F6, r14	; 0x8002f6 <Q2+0x2>
     b7e:	f0 92 f7 02 	sts	0x02F7, r15	; 0x8002f7 <Q2+0x3>
	Q1 = Q0;
     b82:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <Q1>
     b86:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <Q1+0x1>
     b8a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <Q1+0x2>
     b8e:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Q1+0x3>
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	08 95       	ret

00000ba8 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     ba8:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_samplesReady>
     bac:	81 11       	cpse	r24, r1
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     bb0:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <_index>
     bb4:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <_index+0x1>
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <testData>
     bc0:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <testData+0x1>
     bc4:	e8 0f       	add	r30, r24
     bc6:	f9 1f       	adc	r31, r25
     bc8:	71 83       	std	Z+1, r23	; 0x01
     bca:	60 83       	st	Z, r22
	_index++;
     bcc:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <_index>
     bd0:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <_index+0x1>
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <_index+0x1>
     bda:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_index>
	if(_index >= _N)
     bde:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <_N>
     be2:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <_N+0x1>
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	3c f0       	brlt	.+14     	; 0xbfa <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     bec:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <_index+0x1>
     bf0:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <_index>
		_samplesReady = true;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <_samplesReady>
	}

	return(_samplesReady);
     bfa:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_samplesReady>
}
     bfe:	08 95       	ret

00000c00 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     c00:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_samplesReady>
     c04:	08 95       	ret

00000c06 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     c06:	4f 92       	push	r4
     c08:	5f 92       	push	r5
     c0a:	6f 92       	push	r6
     c0c:	7f 92       	push	r7
     c0e:	8f 92       	push	r8
     c10:	9f 92       	push	r9
     c12:	af 92       	push	r10
     c14:	bf 92       	push	r11
     c16:	cf 92       	push	r12
     c18:	df 92       	push	r13
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     c28:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_N>
     c2c:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <_N+0x1>
     c30:	18 16       	cp	r1, r24
     c32:	19 06       	cpc	r1, r25
     c34:	c4 f4       	brge	.+48     	; 0xc66 <_ZN8Goertzel10Magnitude2Ev+0x60>
     c36:	c0 e0       	ldi	r28, 0x00	; 0
     c38:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     c3a:	ce 01       	movw	r24, r28
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <testData>
     c44:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <testData+0x1>
     c48:	e8 0f       	add	r30, r24
     c4a:	f9 1f       	adc	r31, r25
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	c8 01       	movw	r24, r16
     c52:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     c56:	21 96       	adiw	r28, 0x01	; 1
     c58:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_N>
     c5c:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <_N+0x1>
     c60:	c8 17       	cp	r28, r24
     c62:	d9 07       	cpc	r29, r25
     c64:	54 f3       	brlt	.-44     	; 0xc3a <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     c66:	80 90 f8 02 	lds	r8, 0x02F8	; 0x8002f8 <Q1>
     c6a:	90 90 f9 02 	lds	r9, 0x02F9	; 0x8002f9 <Q1+0x1>
     c6e:	a0 90 fa 02 	lds	r10, 0x02FA	; 0x8002fa <Q1+0x2>
     c72:	b0 90 fb 02 	lds	r11, 0x02FB	; 0x8002fb <Q1+0x3>
     c76:	c0 90 f4 02 	lds	r12, 0x02F4	; 0x8002f4 <Q2>
     c7a:	d0 90 f5 02 	lds	r13, 0x02F5	; 0x8002f5 <Q2+0x1>
     c7e:	e0 90 f6 02 	lds	r14, 0x02F6	; 0x8002f6 <Q2+0x2>
     c82:	f0 90 f7 02 	lds	r15, 0x02F7	; 0x8002f7 <Q2+0x3>
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	c5 01       	movw	r24, r10
     c8c:	b4 01       	movw	r22, r8
     c8e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     c92:	2b 01       	movw	r4, r22
     c94:	3c 01       	movw	r6, r24
     c96:	a7 01       	movw	r20, r14
     c98:	96 01       	movw	r18, r12
     c9a:	c7 01       	movw	r24, r14
     c9c:	b6 01       	movw	r22, r12
     c9e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     ca2:	9b 01       	movw	r18, r22
     ca4:	ac 01       	movw	r20, r24
     ca6:	c3 01       	movw	r24, r6
     ca8:	b2 01       	movw	r22, r4
     caa:	0e 94 bc 24 	call	0x4978	; 0x4978 <__addsf3>
     cae:	2b 01       	movw	r4, r22
     cb0:	3c 01       	movw	r6, r24
     cb2:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <g_coeff>
     cb6:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <g_coeff+0x1>
     cba:	40 91 fe 02 	lds	r20, 0x02FE	; 0x8002fe <g_coeff+0x2>
     cbe:	50 91 ff 02 	lds	r21, 0x02FF	; 0x8002ff <g_coeff+0x3>
     cc2:	c5 01       	movw	r24, r10
     cc4:	b4 01       	movw	r22, r8
     cc6:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     cca:	a7 01       	movw	r20, r14
     ccc:	96 01       	movw	r18, r12
     cce:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	c3 01       	movw	r24, r6
     cd8:	b2 01       	movw	r22, r4
     cda:	0e 94 bb 24 	call	0x4976	; 0x4976 <__subsf3>
     cde:	6b 01       	movw	r12, r22
     ce0:	7c 01       	movw	r14, r24

	ResetGoertzel();
     ce2:	c8 01       	movw	r24, r16
     ce4:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	9f 90       	pop	r9
     d02:	8f 90       	pop	r8
     d04:	7f 90       	pop	r7
     d06:	6f 90       	pop	r6
     d08:	5f 90       	pop	r5
     d0a:	4f 90       	pop	r4
     d0c:	08 95       	ret

00000d0e <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     d0e:	e4 e6       	ldi	r30, 0x64	; 100
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     d18:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     d1c:	85 e2       	ldi	r24, 0x25	; 37
     d1e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     d22:	84 e0       	ldi	r24, 0x04	; 4
     d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     d2e:	08 95       	ret

00000d30 <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     d30:	84 ea       	ldi	r24, 0xA4	; 164
     d32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     d36:	ec eb       	ldi	r30, 0xBC	; 188
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 23       	and	r24, r24
     d3e:	64 f0       	brlt	.+24     	; 0xd58 <_Z9i2c_startv+0x28>
     d40:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     d44:	81 11       	cpse	r24, r1
     d46:	f9 cf       	rjmp	.-14     	; 0xd3a <_Z9i2c_startv+0xa>
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     d4a:	80 e9       	ldi	r24, 0x90	; 144
     d4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     d56:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     d58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     d5c:	88 23       	and	r24, r24
     d5e:	a9 f3       	breq	.-22     	; 0xd4a <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     d60:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     d62:	08 95       	ret

00000d64 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     d64:	84 e9       	ldi	r24, 0x94	; 148
     d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d6a:	08 95       	ret

00000d6c <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     d6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     d70:	84 e8       	ldi	r24, 0x84	; 132
     d72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     d76:	ec eb       	ldi	r30, 0xBC	; 188
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 23       	and	r24, r24
     d7e:	64 f0       	brlt	.+24     	; 0xd98 <_Z17i2c_write_successhh+0x2c>
     d80:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     d84:	81 11       	cpse	r24, r1
     d86:	f9 cf       	rjmp	.-14     	; 0xd7a <_Z17i2c_write_successhh+0xe>
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     d8a:	84 e9       	ldi	r24, 0x94	; 148
     d8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     d96:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     d98:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     d9c:	88 7f       	andi	r24, 0xF8	; 248
     d9e:	86 13       	cpse	r24, r22
     da0:	f4 cf       	rjmp	.-24     	; 0xd8a <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     da2:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     da4:	08 95       	ret

00000da6 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     da6:	84 ec       	ldi	r24, 0xC4	; 196
     da8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     dac:	ec eb       	ldi	r30, 0xBC	; 188
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	88 23       	and	r24, r24
     db4:	24 f0       	brlt	.+8      	; 0xdbe <_Z12i2c_read_ackv+0x18>
     db6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     dba:	81 11       	cpse	r24, r1
     dbc:	f9 cf       	rjmp	.-14     	; 0xdb0 <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     dbe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     dc2:	08 95       	ret

00000dc4 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     dc4:	84 e8       	ldi	r24, 0x84	; 132
     dc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     dca:	ec eb       	ldi	r30, 0xBC	; 188
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 23       	and	r24, r24
     dd2:	24 f0       	brlt	.+8      	; 0xddc <_Z13i2c_read_nackv+0x18>
     dd4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     dd8:	81 11       	cpse	r24, r1
     dda:	f9 cf       	rjmp	.-14     	; 0xdce <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     ddc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     de0:	08 95       	ret

00000de2 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     de2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     de6:	28 7f       	andi	r18, 0xF8	; 248
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	28 17       	cp	r18, r24
     dee:	39 07       	cpc	r19, r25
     df0:	29 f0       	breq	.+10     	; 0xdfc <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     df2:	84 e9       	ldi	r24, 0x94	; 148
     df4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	08 95       	ret
	}

	return(FALSE);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
}
     dfe:	08 95       	ret

00000e00 <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	00 d0       	rcall	.+0      	; 0xe06 <_Z16i2c_device_writehhPhh+0x6>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <_Z16i2c_device_writehhPhh+0x8>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <_Z16i2c_device_writehhPhh+0xa>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	6b 83       	std	Y+3, r22	; 0x03
     e12:	5d 83       	std	Y+5, r21	; 0x05
     e14:	4c 83       	std	Y+4, r20	; 0x04
     e16:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     e18:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     e1a:	0e 94 98 06 	call	0xd30	; 0xd30 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     e1e:	88 e0       	ldi	r24, 0x08	; 8
     e20:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10i2c_statush>
     e24:	98 2f       	mov	r25, r24
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	99 23       	and	r25, r25
     e2a:	09 f4       	brne	.+2      	; 0xe2e <_Z16i2c_device_writehhPhh+0x2e>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	88 23       	and	r24, r24
     e30:	11 f0       	breq	.+4      	; 0xe36 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     e36:	68 e1       	ldi	r22, 0x18	; 24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17i2c_write_successhh>
     e3e:	98 2f       	mov	r25, r24
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	99 23       	and	r25, r25
     e44:	09 f4       	brne	.+2      	; 0xe48 <_Z16i2c_device_writehhPhh+0x48>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	88 23       	and	r24, r24
     e4a:	11 f0       	breq	.+4      	; 0xe50 <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	32 c0       	rjmp	.+100    	; 0xeb4 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     e50:	68 e2       	ldi	r22, 0x28	; 40
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17i2c_write_successhh>
     e58:	98 2f       	mov	r25, r24
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	99 23       	and	r25, r25
     e5e:	09 f4       	brne	.+2      	; 0xe62 <_Z16i2c_device_writehhPhh+0x62>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	88 23       	and	r24, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	25 c0       	rjmp	.+74     	; 0xeb4 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     e6a:	8e 81       	ldd	r24, Y+6	; 0x06
     e6c:	9f ef       	ldi	r25, 0xFF	; 255
     e6e:	98 0f       	add	r25, r24
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	88 23       	and	r24, r24
     e76:	09 f4       	brne	.+2      	; 0xe7a <_Z16i2c_device_writehhPhh+0x7a>
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	99 23       	and	r25, r25
     e7c:	c1 f0       	breq	.+48     	; 0xeae <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	98 0f       	add	r25, r24
     e84:	99 83       	std	Y+1, r25	; 0x01
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	2c 81       	ldd	r18, Y+4	; 0x04
     e8c:	3d 81       	ldd	r19, Y+5	; 0x05
     e8e:	82 0f       	add	r24, r18
     e90:	93 1f       	adc	r25, r19
     e92:	fc 01       	movw	r30, r24
     e94:	80 81       	ld	r24, Z
     e96:	68 e2       	ldi	r22, 0x28	; 40
     e98:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17i2c_write_successhh>
     e9c:	98 2f       	mov	r25, r24
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	99 23       	and	r25, r25
     ea2:	09 f4       	brne	.+2      	; 0xea6 <_Z16i2c_device_writehhPhh+0xa6>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	88 23       	and	r24, r24
     ea8:	01 f3       	breq	.-64     	; 0xe6a <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     eae:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	00 d0       	rcall	.+0      	; 0xed0 <_Z15i2c_device_readhhPhh+0xa>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <_Z15i2c_device_readhhPhh+0xc>
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <_Z15i2c_device_readhhPhh+0xe>
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
     eda:	6b 83       	std	Y+3, r22	; 0x03
     edc:	5d 83       	std	Y+5, r21	; 0x05
     ede:	4c 83       	std	Y+4, r20	; 0x04
     ee0:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     ee2:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     ee4:	0e 94 98 06 	call	0xd30	; 0xd30 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10i2c_statush>
     eee:	98 2f       	mov	r25, r24
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	99 23       	and	r25, r25
     ef4:	09 f4       	brne	.+2      	; 0xef8 <_Z15i2c_device_readhhPhh+0x32>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	88 23       	and	r24, r24
     efa:	11 f0       	breq	.+4      	; 0xf00 <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	79 c0       	rjmp	.+242    	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     f00:	68 e1       	ldi	r22, 0x18	; 24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17i2c_write_successhh>
     f08:	98 2f       	mov	r25, r24
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	99 23       	and	r25, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <_Z15i2c_device_readhhPhh+0x4c>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	88 23       	and	r24, r24
     f14:	11 f0       	breq	.+4      	; 0xf1a <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	6c c0       	rjmp	.+216    	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     f1a:	68 e2       	ldi	r22, 0x28	; 40
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17i2c_write_successhh>
     f22:	98 2f       	mov	r25, r24
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	99 23       	and	r25, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <_Z15i2c_device_readhhPhh+0x66>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	88 23       	and	r24, r24
     f2e:	11 f0       	breq	.+4      	; 0xf34 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     f34:	0e 94 98 06 	call	0xd30	; 0xd30 <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10i2c_statush>
     f3e:	98 2f       	mov	r25, r24
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	99 23       	and	r25, r25
     f44:	09 f4       	brne	.+2      	; 0xf48 <_Z15i2c_device_readhhPhh+0x82>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	88 23       	and	r24, r24
     f4a:	11 f0       	breq	.+4      	; 0xf50 <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	51 c0       	rjmp	.+162    	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	60 e4       	ldi	r22, 0x40	; 64
     f56:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z17i2c_write_successhh>
     f5a:	98 2f       	mov	r25, r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	99 23       	and	r25, r25
     f60:	09 f4       	brne	.+2      	; 0xf64 <_Z15i2c_device_readhhPhh+0x9e>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	88 23       	and	r24, r24
     f66:	11 f0       	breq	.+4      	; 0xf6c <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	43 c0       	rjmp	.+134    	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f ef       	ldi	r25, 0xFF	; 255
     f70:	98 0f       	add	r25, r24
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <_Z15i2c_device_readhhPhh+0xb6>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	99 23       	and	r25, r25
     f7e:	b1 f1       	breq	.+108    	; 0xfec <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
     f80:	8e 81       	ldd	r24, Y+6	; 0x06
     f82:	88 23       	and	r24, r24
     f84:	d9 f0       	breq	.+54     	; 0xfbc <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	98 0f       	add	r25, r24
     f8c:	99 83       	std	Y+1, r25	; 0x01
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	89 01       	movw	r16, r18
     f98:	08 0f       	add	r16, r24
     f9a:	19 1f       	adc	r17, r25
     f9c:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z12i2c_read_ackv>
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
     fa4:	80 e5       	ldi	r24, 0x50	; 80
     fa6:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10i2c_statush>
     faa:	98 2f       	mov	r25, r24
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	99 23       	and	r25, r25
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <_Z15i2c_device_readhhPhh+0xee>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	88 23       	and	r24, r24
     fb6:	d1 f2       	breq	.-76     	; 0xf6c <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	89 01       	movw	r16, r18
     fc8:	08 0f       	add	r16, r24
     fca:	19 1f       	adc	r17, r25
     fcc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_Z13i2c_read_nackv>
     fd0:	f8 01       	movw	r30, r16
     fd2:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
     fd4:	88 e5       	ldi	r24, 0x58	; 88
     fd6:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10i2c_statush>
     fda:	98 2f       	mov	r25, r24
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	99 23       	and	r25, r25
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <_Z15i2c_device_readhhPhh+0x11e>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	88 23       	and	r24, r24
     fe6:	11 f2       	breq	.-124    	; 0xf6c <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
     fec:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
}
     ff2:	26 96       	adiw	r28, 0x06	; 6
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <_Z16nextFullTxBufferv>:

	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex = 0; bufferIndex < LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
    1008:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZZ16nextFullTxBuffervE11bufferIndex>
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	59 e2       	ldi	r21, 0x29	; 41
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	52 9f       	mul	r21, r18
    1016:	f0 01       	movw	r30, r0
    1018:	53 9f       	mul	r21, r19
    101a:	f0 0d       	add	r31, r0
    101c:	11 24       	eor	r1, r1
    101e:	e4 57       	subi	r30, 0x74	; 116
    1020:	fc 4f       	sbci	r31, 0xFC	; 252
    1022:	40 81       	ld	r20, Z
    1024:	41 11       	cpse	r20, r1
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <_Z16nextFullTxBufferv+0x38>
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	29 f0       	breq	.+10     	; 0x1036 <_Z16nextFullTxBufferv+0x2e>
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	78 f3       	brcs	.-34     	; 0x1010 <_Z16nextFullTxBufferv+0x8>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	ed cf       	rjmp	.-38     	; 0x1010 <_Z16nextFullTxBufferv+0x8>
    1036:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ16nextFullTxBuffervE11bufferIndex>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	08 95       	ret
    1040:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ16nextFullTxBuffervE11bufferIndex>
    1044:	49 e2       	ldi	r20, 0x29	; 41
    1046:	42 9f       	mul	r20, r18
    1048:	c0 01       	movw	r24, r0
    104a:	43 9f       	mul	r20, r19
    104c:	90 0d       	add	r25, r0
    104e:	11 24       	eor	r1, r1
    1050:	84 57       	subi	r24, 0x74	; 116
    1052:	9c 4f       	sbci	r25, 0xFC	; 252
    1054:	08 95       	ret

00001056 <_Z17nextEmptyTxBufferv>:
    1056:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	59 e2       	ldi	r21, 0x29	; 41
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	52 9f       	mul	r21, r18
    1064:	f0 01       	movw	r30, r0
    1066:	53 9f       	mul	r21, r19
    1068:	f0 0d       	add	r31, r0
    106a:	11 24       	eor	r1, r1
    106c:	e4 57       	subi	r30, 0x74	; 116
    106e:	fc 4f       	sbci	r31, 0xFC	; 252
    1070:	40 81       	ld	r20, Z
    1072:	44 23       	and	r20, r20
    1074:	61 f0       	breq	.+24     	; 0x108e <_Z17nextEmptyTxBufferv+0x38>
    1076:	91 50       	subi	r25, 0x01	; 1
    1078:	29 f0       	breq	.+10     	; 0x1084 <_Z17nextEmptyTxBufferv+0x2e>
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	78 f3       	brcs	.-34     	; 0x105e <_Z17nextEmptyTxBufferv+0x8>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	ed cf       	rjmp	.-38     	; 0x105e <_Z17nextEmptyTxBufferv+0x8>
    1084:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	08 95       	ret
    108e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1092:	49 e2       	ldi	r20, 0x29	; 41
    1094:	42 9f       	mul	r20, r18
    1096:	c0 01       	movw	r24, r0
    1098:	43 9f       	mul	r20, r19
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
    109e:	84 57       	subi	r24, 0x74	; 116
    10a0:	9c 4f       	sbci	r25, 0xFC	; 252
    10a2:	08 95       	ret

000010a4 <_Z17nextEmptyRxBufferv>:
    10a4:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	9f e3       	ldi	r25, 0x3F	; 63
    10ae:	89 9f       	mul	r24, r25
    10b0:	f0 01       	movw	r30, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	e2 5f       	subi	r30, 0xF2	; 242
    10b6:	fc 4f       	sbci	r31, 0xFC	; 252
    10b8:	41 81       	ldd	r20, Z+1	; 0x01
    10ba:	52 81       	ldd	r21, Z+2	; 0x02
    10bc:	45 2b       	or	r20, r21
    10be:	a9 f0       	breq	.+42     	; 0x10ea <_Z17nextEmptyRxBufferv+0x46>
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <_Z17nextEmptyRxBufferv+0x24>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	9f e3       	ldi	r25, 0x3F	; 63
    10ce:	89 9f       	mul	r24, r25
    10d0:	f0 01       	movw	r30, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	e2 5f       	subi	r30, 0xF2	; 242
    10d6:	fc 4f       	sbci	r31, 0xFC	; 252
    10d8:	41 81       	ldd	r20, Z+1	; 0x01
    10da:	52 81       	ldd	r21, Z+2	; 0x02
    10dc:	45 2b       	or	r20, r21
    10de:	29 f0       	breq	.+10     	; 0x10ea <_Z17nextEmptyRxBufferv+0x46>
    10e0:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	08 95       	ret
    10ea:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    10ee:	4f e3       	ldi	r20, 0x3F	; 63
    10f0:	42 9f       	mul	r20, r18
    10f2:	c0 01       	movw	r24, r0
    10f4:	43 9f       	mul	r20, r19
    10f6:	90 0d       	add	r25, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	82 5f       	subi	r24, 0xF2	; 242
    10fc:	9c 4f       	sbci	r25, 0xFC	; 252
    10fe:	08 95       	ret

00001100 <_Z16nextFullRxBufferv>:
    1100:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZZ16nextFullRxBuffervE11bufferIndex>
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	9f e3       	ldi	r25, 0x3F	; 63
    110a:	89 9f       	mul	r24, r25
    110c:	f0 01       	movw	r30, r0
    110e:	11 24       	eor	r1, r1
    1110:	e2 5f       	subi	r30, 0xF2	; 242
    1112:	fc 4f       	sbci	r31, 0xFC	; 252
    1114:	41 81       	ldd	r20, Z+1	; 0x01
    1116:	52 81       	ldd	r21, Z+2	; 0x02
    1118:	45 2b       	or	r20, r21
    111a:	a9 f4       	brne	.+42     	; 0x1146 <_Z16nextFullRxBufferv+0x46>
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	08 f0       	brcs	.+2      	; 0x1124 <_Z16nextFullRxBufferv+0x24>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	9f e3       	ldi	r25, 0x3F	; 63
    112a:	89 9f       	mul	r24, r25
    112c:	f0 01       	movw	r30, r0
    112e:	11 24       	eor	r1, r1
    1130:	e2 5f       	subi	r30, 0xF2	; 242
    1132:	fc 4f       	sbci	r31, 0xFC	; 252
    1134:	41 81       	ldd	r20, Z+1	; 0x01
    1136:	52 81       	ldd	r21, Z+2	; 0x02
    1138:	45 2b       	or	r20, r21
    113a:	29 f4       	brne	.+10     	; 0x1146 <_Z16nextFullRxBufferv+0x46>
    113c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_ZZ16nextFullRxBuffervE11bufferIndex>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	08 95       	ret
    1146:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_ZZ16nextFullRxBuffervE11bufferIndex>
    114a:	4f e3       	ldi	r20, 0x3F	; 63
    114c:	42 9f       	mul	r20, r18
    114e:	c0 01       	movw	r24, r0
    1150:	43 9f       	mul	r20, r19
    1152:	90 0d       	add	r25, r0
    1154:	11 24       	eor	r1, r1
    1156:	82 5f       	subi	r24, 0xF2	; 242
    1158:	9c 4f       	sbci	r25, 0xFC	; 252
    115a:	08 95       	ret

0000115c <_Z19linkbusTxInProgressv>:
    115c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZL17linkbus_tx_active>
    1160:	08 95       	ret

00001162 <_Z16linkbus_start_txv>:
    1162:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <_ZL17linkbus_tx_active>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	91 11       	cpse	r25, r1
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	91 11       	cpse	r25, r1
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <_Z16linkbus_start_txv+0x1e>
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <_ZL17linkbus_tx_active>
    1176:	e1 ec       	ldi	r30, 0xC1	; 193
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	90 81       	ld	r25, Z
    117c:	90 62       	ori	r25, 0x20	; 32
    117e:	90 83       	st	Z, r25
    1180:	08 95       	ret

00001182 <_Z14linkbus_end_txv>:
    1182:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZL17linkbus_tx_active>
    1186:	88 23       	and	r24, r24
    1188:	39 f0       	breq	.+14     	; 0x1198 <_Z14linkbus_end_txv+0x16>
    118a:	e1 ec       	ldi	r30, 0xC1	; 193
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 7d       	andi	r24, 0xDF	; 223
    1192:	80 83       	st	Z, r24
    1194:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZL17linkbus_tx_active>
    1198:	08 95       	ret

0000119a <_Z12linkbus_initm>:
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	8e e7       	ldi	r24, 0x7E	; 126
    11a0:	ee e0       	ldi	r30, 0x0E	; 14
    11a2:	f3 e0       	ldi	r31, 0x03	; 3
    11a4:	df 01       	movw	r26, r30
    11a6:	1d 92       	st	X+, r1
    11a8:	8a 95       	dec	r24
    11aa:	e9 f7       	brne	.-6      	; 0x11a6 <_Z12linkbus_initm+0xc>
    11ac:	ec e8       	ldi	r30, 0x8C	; 140
    11ae:	f3 e0       	ldi	r31, 0x03	; 3
    11b0:	10 82       	st	Z, r1
    11b2:	11 a6       	std	Z+41, r1	; 0x29
    11b4:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZL9tx_buffer+0x52>
    11b8:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_ZL9tx_buffer+0x7b>
    11bc:	60 e4       	ldi	r22, 0x40	; 64
    11be:	72 e4       	ldi	r23, 0x42	; 66
    11c0:	8f e0       	ldi	r24, 0x0F	; 15
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__udivmodsi4>
    11c8:	21 50       	subi	r18, 0x01	; 1
    11ca:	31 09       	sbc	r19, r1
    11cc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    11d0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    11d4:	88 e9       	ldi	r24, 0x98	; 152
    11d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    11da:	8e e0       	ldi	r24, 0x0E	; 14
    11dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    11e0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    11e4:	08 95       	ret

000011e6 <_Z15linkbus_disablev>:
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    11ec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    11f0:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z14linkbus_end_txv>
    11f4:	8e e7       	ldi	r24, 0x7E	; 126
    11f6:	ee e0       	ldi	r30, 0x0E	; 14
    11f8:	f3 e0       	ldi	r31, 0x03	; 3
    11fa:	df 01       	movw	r26, r30
    11fc:	1d 92       	st	X+, r1
    11fe:	8a 95       	dec	r24
    1200:	e9 f7       	brne	.-6      	; 0x11fc <_Z15linkbus_disablev+0x16>
    1202:	ec e8       	ldi	r30, 0x8C	; 140
    1204:	f3 e0       	ldi	r31, 0x03	; 3
    1206:	10 82       	st	Z, r1
    1208:	11 a6       	std	Z+41, r1	; 0x29
    120a:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZL9tx_buffer+0x52>
    120e:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_ZL9tx_buffer+0x7b>
    1212:	08 95       	ret

00001214 <_Z17linkbus_send_textPc>:
	}
}


BOOL linkbus_send_text(char* text)
{
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
    121c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1220:	21 11       	cpse	r18, r1
    1222:	14 c0       	rjmp	.+40     	; 0x124c <_Z17linkbus_send_textPc+0x38>
	{
		return( err);
	}

	if(text)
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	a1 f0       	breq	.+40     	; 0x1250 <_Z17linkbus_send_textPc+0x3c>
    1228:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
    122a:	0e 94 2b 08 	call	0x1056	; 0x1056 <_Z17nextEmptyTxBufferv>

		while(!buff && tries)
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	b9 f4       	brne	.+46     	; 0x1260 <_Z17linkbus_send_textPc+0x4c>
    1232:	c8 ec       	ldi	r28, 0xC8	; 200
    1234:	d0 e0       	ldi	r29, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <_Z17linkbus_send_textPc+0x28>
    1238:	20 97       	sbiw	r28, 0x00	; 0
    123a:	61 f0       	breq	.+24     	; 0x1254 <_Z17linkbus_send_textPc+0x40>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    123c:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <_ZL17linkbus_tx_active>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
		{
			while(linkbusTxInProgress() && tries)
    1240:	99 23       	and	r25, r25
    1242:	51 f0       	breq	.+20     	; 0x1258 <_Z17linkbus_send_textPc+0x44>
    1244:	20 97       	sbiw	r28, 0x00	; 0
    1246:	d1 f0       	breq	.+52     	; 0x127c <_Z17linkbus_send_textPc+0x68>
			{
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
    1248:	21 97       	sbiw	r28, 0x01	; 1
    124a:	f8 cf       	rjmp	.-16     	; 0x123c <_Z17linkbus_send_textPc+0x28>
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	1b c0       	rjmp	.+54     	; 0x1286 <_Z17linkbus_send_textPc+0x72>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	19 c0       	rjmp	.+50     	; 0x1286 <_Z17linkbus_send_textPc+0x72>
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	17 c0       	rjmp	.+46     	; 0x1286 <_Z17linkbus_send_textPc+0x72>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptyTxBuffer();
    1258:	0e 94 2b 08 	call	0x1056	; 0x1056 <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	61 f3       	breq	.-40     	; 0x1238 <_Z17linkbus_send_textPc+0x24>
			buff = nextEmptyTxBuffer();
		}

		if(buff)
		{
			sprintf(*buff, text);
    1260:	1f 93       	push	r17
    1262:	0f 93       	push	r16
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>

			linkbus_start_tx();
    126c:	0e 94 b1 08 	call	0x1162	; 0x1162 <_Z16linkbus_start_txv>
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
			err = FALSE;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <_Z17linkbus_send_textPc+0x72>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptyTxBuffer();
    127c:	0e 94 2b 08 	call	0x1056	; 0x1056 <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	71 f7       	brne	.-36     	; 0x1260 <_Z17linkbus_send_textPc+0x4c>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    1284:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <_Z17lb_send_NewPromptv>:
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
	while(linkbus_send_text((char*)textPrompt))
    1290:	83 e2       	ldi	r24, 0x23	; 35
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 0a 09 	call	0x1214	; 0x1214 <_Z17linkbus_send_textPc>
    1298:	81 11       	cpse	r24, r1
    129a:	fa cf       	rjmp	.-12     	; 0x1290 <_Z17lb_send_NewPromptv>
	{
		;
	}
}
    129c:	08 95       	ret

0000129e <_Z15lb_send_NewLinev>:

void lb_send_NewLine(void)
{
	linkbus_send_text((char*)crlf);
    129e:	86 e2       	ldi	r24, 0x26	; 38
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 0a 09 	call	0x1214	; 0x1214 <_Z17linkbus_send_textPc>
    12a6:	08 95       	ret

000012a8 <_Z12lb_echo_charh>:
}

void lb_echo_char(uint8_t c)
{
	g_tempMsgBuff[0] = c;
    12a8:	e1 e3       	ldi	r30, 0x31	; 49
    12aa:	f4 e0       	ldi	r31, 0x04	; 4
    12ac:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    12ae:	11 82       	std	Z+1, r1	; 0x01
	linkbus_send_text(g_tempMsgBuff);
    12b0:	cf 01       	movw	r24, r30
    12b2:	0e 94 0a 09 	call	0x1214	; 0x1214 <_Z17linkbus_send_textPc>
    12b6:	08 95       	ret

000012b8 <_Z14lb_send_stringPch>:
}

BOOL lb_send_string(char* str, BOOL wait)
{
    12b8:	cf 93       	push	r28
	BOOL err = FALSE;

	if(g_bus_disabled)
    12ba:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    12be:	21 11       	cpse	r18, r1
    12c0:	25 c0       	rjmp	.+74     	; 0x130c <_Z14lb_send_stringPch+0x54>
	{
		return TRUE;
	}

	if(str == NULL)
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	29 f1       	breq	.+74     	; 0x1310 <_Z14lb_send_stringPch+0x58>
	{
		return( TRUE);
	}

	if(strlen(str) > LINKBUS_MAX_TX_MSG_LENGTH)
    12c6:	fc 01       	movw	r30, r24
    12c8:	01 90       	ld	r0, Z+
    12ca:	00 20       	and	r0, r0
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <_Z14lb_send_stringPch+0x10>
    12ce:	31 97       	sbiw	r30, 0x01	; 1
    12d0:	e8 1b       	sub	r30, r24
    12d2:	f9 0b       	sbc	r31, r25
    12d4:	ba 97       	sbiw	r30, 0x2a	; 42
    12d6:	f0 f4       	brcc	.+60     	; 0x1314 <_Z14lb_send_stringPch+0x5c>
    12d8:	c6 2f       	mov	r28, r22
    12da:	bc 01       	movw	r22, r24
	{
		return( TRUE);
	}

	strncpy(g_tempMsgBuff, str, LINKBUS_MAX_TX_MSG_LENGTH);
    12dc:	49 e2       	ldi	r20, 0x29	; 41
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	81 e3       	ldi	r24, 0x31	; 49
    12e2:	94 e0       	ldi	r25, 0x04	; 4
    12e4:	0e 94 ed 29 	call	0x53da	; 0x53da <strncpy>

	if(wait)
    12e8:	cc 23       	and	r28, r28
    12ea:	59 f0       	breq	.+22     	; 0x1302 <_Z14lb_send_stringPch+0x4a>
	{
		while((err = linkbus_send_text(g_tempMsgBuff)))
    12ec:	81 e3       	ldi	r24, 0x31	; 49
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 0a 09 	call	0x1214	; 0x1214 <_Z17linkbus_send_textPc>
    12f4:	81 11       	cpse	r24, r1
    12f6:	fa cf       	rjmp	.-12     	; 0x12ec <_Z14lb_send_stringPch+0x34>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    12f8:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZL17linkbus_tx_active>
	{
		while((err = linkbus_send_text(g_tempMsgBuff)))
		{
			;
		}
		while(!err && linkbusTxInProgress())
    12fc:	81 11       	cpse	r24, r1
    12fe:	fc cf       	rjmp	.-8      	; 0x12f8 <_Z14lb_send_stringPch+0x40>
    1300:	0a c0       	rjmp	.+20     	; 0x1316 <_Z14lb_send_stringPch+0x5e>
			;
		}
	}
	else
	{
		err = linkbus_send_text(g_tempMsgBuff);
    1302:	81 e3       	ldi	r24, 0x31	; 49
    1304:	94 e0       	ldi	r25, 0x04	; 4
    1306:	0e 94 0a 09 	call	0x1214	; 0x1214 <_Z17linkbus_send_textPc>
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <_Z14lb_send_stringPch+0x5e>
{
	BOOL err = FALSE;

	if(g_bus_disabled)
	{
		return TRUE;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <_Z14lb_send_stringPch+0x5e>
	}

	if(str == NULL)
	{
		return( TRUE);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <_Z14lb_send_stringPch+0x5e>
	}

	if(strlen(str) > LINKBUS_MAX_TX_MSG_LENGTH)
	{
		return( TRUE);
    1314:	81 e0       	ldi	r24, 0x01	; 1
	{
		err = linkbus_send_text(g_tempMsgBuff);
	}

	return( err);
}
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	8b e0       	ldi	r24, 0x0B	; 11
    1340:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1344:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	95 e0       	ldi	r25, 0x05	; 5
    134e:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN8Goertzel9DataPointEi>
    1352:	88 23       	and	r24, r24
    1354:	29 f0       	breq	.+10     	; 0x1360 <__vector_21+0x46>
    1356:	ea e7       	ldi	r30, 0x7A	; 122
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	87 7f       	andi	r24, 0xF7	; 247
    135e:	80 83       	st	Z, r24
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	8b e0       	ldi	r24, 0x0B	; 11
    1364:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_18>:
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	1f 93       	push	r17
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    13b2:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13b6:	c0 91 d8 04 	lds	r28, 0x04D8	; 0x8004d8 <_ZZ11__vector_18E4buff>
    13ba:	d0 91 d9 04 	lds	r29, 0x04D9	; 0x8004d9 <_ZZ11__vector_18E4buff+0x1>
    13be:	20 97       	sbiw	r28, 0x00	; 0
    13c0:	51 f4       	brne	.+20     	; 0x13d6 <__vector_18+0x4c>
    13c2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_Z17nextEmptyRxBufferv>
    13c6:	ec 01       	movw	r28, r24
    13c8:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <_ZZ11__vector_18E4buff+0x1>
    13cc:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZZ11__vector_18E4buff>
    13d0:	89 2b       	or	r24, r25
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <__vector_18+0x4c>
    13d4:	62 c1       	rjmp	.+708    	; 0x169a <__vector_18+0x310>
    13d6:	81 2f       	mov	r24, r17
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <toupper>
    13de:	9c 01       	movw	r18, r24
    13e0:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E11ignoreCount>
    13e4:	88 23       	and	r24, r24
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <__vector_18+0x66>
    13e8:	81 50       	subi	r24, 0x01	; 1
    13ea:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZZ11__vector_18E11ignoreCount>
    13ee:	55 c1       	rjmp	.+682    	; 0x169a <__vector_18+0x310>
    13f0:	2b 31       	cpi	r18, 0x1B	; 27
    13f2:	21 f4       	brne	.+8      	; 0x13fc <__vector_18+0x72>
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZZ11__vector_18E11ignoreCount>
    13fa:	4f c1       	rjmp	.+670    	; 0x169a <__vector_18+0x310>
    13fc:	2d 30       	cpi	r18, 0x0D	; 13
    13fe:	09 f0       	breq	.+2      	; 0x1402 <__vector_18+0x78>
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <__vector_18+0xf6>
    1402:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZZ11__vector_18E13receiving_msg>
    1406:	88 23       	and	r24, r24
    1408:	31 f1       	breq	.+76     	; 0x1456 <__vector_18+0xcc>
    140a:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    140e:	ee 23       	and	r30, r30
    1410:	f9 f0       	breq	.+62     	; 0x1450 <__vector_18+0xc6>
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	88 83       	st	Y, r24
    1416:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    141a:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ11__vector_18E11field_index>
    1426:	88 23       	and	r24, r24
    1428:	79 f0       	breq	.+30     	; 0x1448 <__vector_18+0xbe>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <_ZZ11__vector_18E9field_len>
    1432:	54 e1       	ldi	r21, 0x14	; 20
    1434:	58 9f       	mul	r21, r24
    1436:	90 01       	movw	r18, r0
    1438:	59 9f       	mul	r21, r25
    143a:	30 0d       	add	r19, r0
    143c:	11 24       	eor	r1, r1
    143e:	c2 0f       	add	r28, r18
    1440:	d3 1f       	adc	r29, r19
    1442:	c4 0f       	add	r28, r20
    1444:	d1 1d       	adc	r29, r1
    1446:	1b 82       	std	Y+3, r1	; 0x03
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e9 56       	subi	r30, 0x69	; 105
    144c:	fb 4f       	sbci	r31, 0xFB	; 251
    144e:	10 82       	st	Z, r1
    1450:	0e 94 4f 09 	call	0x129e	; 0x129e <_Z15lb_send_NewLinev>
    1454:	04 c0       	rjmp	.+8      	; 0x145e <__vector_18+0xd4>
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	9f e7       	ldi	r25, 0x7F	; 127
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    1462:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ11__vector_18E9field_len>
    1466:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    146a:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    146e:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E11field_index>
    1472:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ11__vector_18E4buff+0x1>
    1476:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZZ11__vector_18E4buff>
    147a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E13receiving_msg>
    147e:	0d c1       	rjmp	.+538    	; 0x169a <__vector_18+0x310>
    1480:	22 23       	and	r18, r18
    1482:	09 f4       	brne	.+2      	; 0x1486 <__vector_18+0xfc>
    1484:	0a c1       	rjmp	.+532    	; 0x169a <__vector_18+0x310>
    1486:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    148a:	4e 2f       	mov	r20, r30
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	da 01       	movw	r26, r20
    1490:	a9 56       	subi	r26, 0x69	; 105
    1492:	bb 4f       	sbci	r27, 0xFB	; 251
    1494:	2c 93       	st	X, r18
    1496:	ee 23       	and	r30, r30
    1498:	09 f4       	brne	.+2      	; 0x149c <__vector_18+0x112>
    149a:	d6 c0       	rjmp	.+428    	; 0x1648 <__vector_18+0x2be>
    149c:	2f 37       	cpi	r18, 0x7F	; 127
    149e:	09 f0       	breq	.+2      	; 0x14a2 <__vector_18+0x118>
    14a0:	5f c0       	rjmp	.+190    	; 0x1560 <__vector_18+0x1d6>
    14a2:	e1 50       	subi	r30, 0x01	; 1
    14a4:	e0 93 d6 04 	sts	0x04D6, r30	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    14a8:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ11__vector_18E11field_index>
    14ac:	81 11       	cpse	r24, r1
    14ae:	13 c0       	rjmp	.+38     	; 0x14d6 <__vector_18+0x14c>
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	e9 56       	subi	r30, 0x69	; 105
    14b4:	fb 4f       	sbci	r31, 0xFB	; 251
    14b6:	40 81       	ld	r20, Z
    14b8:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    14bc:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    14c0:	84 1b       	sub	r24, r20
    14c2:	91 09       	sbc	r25, r1
    14c4:	6a e0       	ldi	r22, 0x0A	; 10
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    14cc:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    14d0:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    14d4:	39 c0       	rjmp	.+114    	; 0x1548 <__vector_18+0x1be>
    14d6:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <_ZZ11__vector_18E9field_len>
    14da:	99 23       	and	r25, r25
    14dc:	91 f0       	breq	.+36     	; 0x1502 <__vector_18+0x178>
    14de:	4f ef       	ldi	r20, 0xFF	; 255
    14e0:	49 0f       	add	r20, r25
    14e2:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <_ZZ11__vector_18E9field_len>
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	54 e1       	ldi	r21, 0x14	; 20
    14ec:	58 9f       	mul	r21, r24
    14ee:	b0 01       	movw	r22, r0
    14f0:	59 9f       	mul	r21, r25
    14f2:	70 0d       	add	r23, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	c6 0f       	add	r28, r22
    14f8:	d7 1f       	adc	r29, r23
    14fa:	c4 0f       	add	r28, r20
    14fc:	d1 1d       	adc	r29, r1
    14fe:	1b 82       	std	Y+3, r1	; 0x03
    1500:	23 c0       	rjmp	.+70     	; 0x1548 <__vector_18+0x1be>
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	e9 56       	subi	r30, 0x69	; 105
    1506:	fb 4f       	sbci	r31, 0xFB	; 251
    1508:	90 81       	ld	r25, Z
    150a:	90 32       	cpi	r25, 0x20	; 32
    150c:	a1 f4       	brne	.+40     	; 0x1536 <__vector_18+0x1ac>
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ11__vector_18E11field_index>
    1514:	de 01       	movw	r26, r28
    1516:	94 e1       	ldi	r25, 0x14	; 20
    1518:	89 9f       	mul	r24, r25
    151a:	a0 0d       	add	r26, r0
    151c:	b1 1d       	adc	r27, r1
    151e:	11 24       	eor	r1, r1
    1520:	13 96       	adiw	r26, 0x03	; 3
    1522:	fd 01       	movw	r30, r26
    1524:	01 90       	ld	r0, Z+
    1526:	00 20       	and	r0, r0
    1528:	e9 f7       	brne	.-6      	; 0x1524 <__vector_18+0x19a>
    152a:	31 97       	sbiw	r30, 0x01	; 1
    152c:	ea 1b       	sub	r30, r26
    152e:	fb 0b       	sbc	r31, r27
    1530:	e0 93 92 04 	sts	0x0492, r30	; 0x800492 <_ZZ11__vector_18E9field_len>
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <__vector_18+0x1be>
    1536:	94 e1       	ldi	r25, 0x14	; 20
    1538:	89 9f       	mul	r24, r25
    153a:	c0 0d       	add	r28, r0
    153c:	d1 1d       	adc	r29, r1
    153e:	11 24       	eor	r1, r1
    1540:	1b 82       	std	Y+3, r1	; 0x03
    1542:	81 50       	subi	r24, 0x01	; 1
    1544:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ11__vector_18E11field_index>
    1548:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    154c:	e8 2f       	mov	r30, r24
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	e9 56       	subi	r30, 0x69	; 105
    1552:	fb 4f       	sbci	r31, 0xFB	; 251
    1554:	10 82       	st	Z, r1
    1556:	81 11       	cpse	r24, r1
    1558:	93 c0       	rjmp	.+294    	; 0x1680 <__vector_18+0x2f6>
    155a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E13receiving_msg>
    155e:	90 c0       	rjmp	.+288    	; 0x1680 <__vector_18+0x2f6>
    1560:	20 32       	cpi	r18, 0x20	; 32
    1562:	79 f5       	brne	.+94     	; 0x15c2 <__vector_18+0x238>
    1564:	fa 01       	movw	r30, r20
    1566:	ea 56       	subi	r30, 0x6A	; 106
    1568:	fb 4f       	sbci	r31, 0xFB	; 251
    156a:	80 81       	ld	r24, Z
    156c:	80 32       	cpi	r24, 0x20	; 32
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_18+0x1e8>
    1570:	94 c0       	rjmp	.+296    	; 0x169a <__vector_18+0x310>
    1572:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ11__vector_18E11field_index>
    1576:	68 2f       	mov	r22, r24
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	fb 01       	movw	r30, r22
    157c:	31 96       	adiw	r30, 0x01	; 1
    157e:	33 97       	sbiw	r30, 0x03	; 3
    1580:	0c f0       	brlt	.+2      	; 0x1584 <__vector_18+0x1fa>
    1582:	8b c0       	rjmp	.+278    	; 0x169a <__vector_18+0x310>
    1584:	88 23       	and	r24, r24
    1586:	79 f0       	breq	.+30     	; 0x15a6 <__vector_18+0x21c>
    1588:	61 50       	subi	r22, 0x01	; 1
    158a:	71 09       	sbc	r23, r1
    158c:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <_ZZ11__vector_18E9field_len>
    1590:	a4 e1       	ldi	r26, 0x14	; 20
    1592:	a6 9f       	mul	r26, r22
    1594:	f0 01       	movw	r30, r0
    1596:	a7 9f       	mul	r26, r23
    1598:	f0 0d       	add	r31, r0
    159a:	11 24       	eor	r1, r1
    159c:	ce 0f       	add	r28, r30
    159e:	df 1f       	adc	r29, r31
    15a0:	c9 0f       	add	r28, r25
    15a2:	d1 1d       	adc	r29, r1
    15a4:	1b 82       	std	Y+3, r1	; 0x03
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ11__vector_18E11field_index>
    15ac:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ11__vector_18E9field_len>
    15b0:	4f 5f       	subi	r20, 0xFF	; 255
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	4e 33       	cpi	r20, 0x3E	; 62
    15b6:	51 05       	cpc	r21, r1
    15b8:	0c f0       	brlt	.+2      	; 0x15bc <__vector_18+0x232>
    15ba:	4e e3       	ldi	r20, 0x3E	; 62
    15bc:	40 93 d6 04 	sts	0x04D6, r20	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    15c0:	5f c0       	rjmp	.+190    	; 0x1680 <__vector_18+0x2f6>
    15c2:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ11__vector_18E9field_len>
    15c6:	84 31       	cpi	r24, 0x14	; 20
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <__vector_18+0x242>
    15ca:	67 c0       	rjmp	.+206    	; 0x169a <__vector_18+0x310>
    15cc:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <_ZZ11__vector_18E11field_index>
    15d0:	41 11       	cpse	r20, r1
    15d2:	19 c0       	rjmp	.+50     	; 0x1606 <__vector_18+0x27c>
    15d4:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    15d8:	50 91 95 04 	lds	r21, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    15dc:	ba 01       	movw	r22, r20
    15de:	66 0f       	add	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	44 0f       	add	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	44 0f       	add	r20, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	44 0f       	add	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	46 0f       	add	r20, r22
    15f0:	57 1f       	adc	r21, r23
    15f2:	42 0f       	add	r20, r18
    15f4:	51 1d       	adc	r21, r1
    15f6:	50 93 95 04 	sts	0x0495, r21	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    15fa:	40 93 94 04 	sts	0x0494, r20	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_ZZ11__vector_18E9field_len>
    1604:	16 c0       	rjmp	.+44     	; 0x1632 <__vector_18+0x2a8>
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	41 50       	subi	r20, 0x01	; 1
    160a:	51 09       	sbc	r21, r1
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	98 0f       	add	r25, r24
    1610:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <_ZZ11__vector_18E9field_len>
    1614:	e4 e1       	ldi	r30, 0x14	; 20
    1616:	e4 9f       	mul	r30, r20
    1618:	b0 01       	movw	r22, r0
    161a:	e5 9f       	mul	r30, r21
    161c:	70 0d       	add	r23, r0
    161e:	11 24       	eor	r1, r1
    1620:	c6 0f       	add	r28, r22
    1622:	d7 1f       	adc	r29, r23
    1624:	fe 01       	movw	r30, r28
    1626:	e8 0f       	add	r30, r24
    1628:	f1 1d       	adc	r31, r1
    162a:	23 83       	std	Z+3, r18	; 0x03
    162c:	c9 0f       	add	r28, r25
    162e:	d1 1d       	adc	r29, r1
    1630:	1b 82       	std	Y+3, r1	; 0x03
    1632:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	8e 33       	cpi	r24, 0x3E	; 62
    163c:	91 05       	cpc	r25, r1
    163e:	0c f0       	brlt	.+2      	; 0x1642 <__vector_18+0x2b8>
    1640:	8e e3       	ldi	r24, 0x3E	; 62
    1642:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    1646:	1c c0       	rjmp	.+56     	; 0x1680 <__vector_18+0x2f6>
    1648:	2f 37       	cpi	r18, 0x7F	; 127
    164a:	41 f4       	brne	.+16     	; 0x165c <__vector_18+0x2d2>
    164c:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    1650:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    1654:	18 16       	cp	r1, r24
    1656:	19 06       	cpc	r1, r25
    1658:	bc f0       	brlt	.+46     	; 0x1688 <__vector_18+0x2fe>
    165a:	1b c0       	rjmp	.+54     	; 0x1692 <__vector_18+0x308>
    165c:	20 32       	cpi	r18, 0x20	; 32
    165e:	e9 f0       	breq	.+58     	; 0x169a <__vector_18+0x310>
    1660:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E11field_index>
    1664:	c9 01       	movw	r24, r18
    1666:	99 27       	eor	r25, r25
    1668:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    166c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    1670:	1b 82       	std	Y+3, r1	; 0x03
    1672:	1f 8a       	std	Y+23, r1	; 0x17
    1674:	1b a6       	std	Y+43, r1	; 0x2b
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZZ11__vector_18E13receiving_msg>
    167c:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZZ11__vector_18E9charIndex>
    1680:	82 2f       	mov	r24, r18
    1682:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_Z12lb_echo_charh>
    1686:	09 c0       	rjmp	.+18     	; 0x169a <__vector_18+0x310>
    1688:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    168c:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    1690:	f7 cf       	rjmp	.-18     	; 0x1680 <__vector_18+0x2f6>
    1692:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID+0x1>
    1696:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E6msg_ID>
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	bf 91       	pop	r27
    16a4:	af 91       	pop	r26
    16a6:	9f 91       	pop	r25
    16a8:	8f 91       	pop	r24
    16aa:	7f 91       	pop	r23
    16ac:	6f 91       	pop	r22
    16ae:	5f 91       	pop	r21
    16b0:	4f 91       	pop	r20
    16b2:	3f 91       	pop	r19
    16b4:	2f 91       	pop	r18
    16b6:	1f 91       	pop	r17
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_19>:
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	2f 93       	push	r18
    16ce:	3f 93       	push	r19
    16d0:	4f 93       	push	r20
    16d2:	5f 93       	push	r21
    16d4:	6f 93       	push	r22
    16d6:	7f 93       	push	r23
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ11__vector_19E4buff>
    16e8:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZZ11__vector_19E4buff+0x1>
    16ec:	89 2b       	or	r24, r25
    16ee:	31 f4       	brne	.+12     	; 0x16fc <__vector_19+0x3a>
    16f0:	0e 94 04 08 	call	0x1008	; 0x1008 <_Z16nextFullTxBufferv>
    16f4:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <_ZZ11__vector_19E4buff+0x1>
    16f8:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ11__vector_19E4buff>
    16fc:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <_ZZ11__vector_19E4buff>
    1700:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <_ZZ11__vector_19E4buff+0x1>
    1704:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <_ZZ11__vector_19E9charIndex>
    1708:	df 01       	movw	r26, r30
    170a:	a8 0f       	add	r26, r24
    170c:	b1 1d       	adc	r27, r1
    170e:	9c 91       	ld	r25, X
    1710:	99 23       	and	r25, r25
    1712:	31 f0       	breq	.+12     	; 0x1720 <__vector_19+0x5e>
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <_ZZ11__vector_19E9charIndex>
    171a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    171e:	0d c0       	rjmp	.+26     	; 0x173a <__vector_19+0x78>
    1720:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <_ZZ11__vector_19E9charIndex>
    1724:	10 82       	st	Z, r1
    1726:	0e 94 04 08 	call	0x1008	; 0x1008 <_Z16nextFullTxBufferv>
    172a:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <_ZZ11__vector_19E4buff+0x1>
    172e:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ11__vector_19E4buff>
    1732:	89 2b       	or	r24, r25
    1734:	11 f4       	brne	.+4      	; 0x173a <__vector_19+0x78>
    1736:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z14linkbus_end_txv>
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	bf 91       	pop	r27
    1740:	af 91       	pop	r26
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	7f 91       	pop	r23
    1748:	6f 91       	pop	r22
    174a:	5f 91       	pop	r21
    174c:	4f 91       	pop	r20
    174e:	3f 91       	pop	r19
    1750:	2f 91       	pop	r18
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_14>:
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	2f 93       	push	r18
    1768:	3f 93       	push	r19
    176a:	4f 93       	push	r20
    176c:	5f 93       	push	r21
    176e:	6f 93       	push	r22
    1770:	7f 93       	push	r23
    1772:	8f 93       	push	r24
    1774:	9f 93       	push	r25
    1776:	af 93       	push	r26
    1778:	bf 93       	push	r27
    177a:	ef 93       	push	r30
    177c:	ff 93       	push	r31
    177e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZZ11__vector_14E6toggle>
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	81 11       	cpse	r24, r1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ11__vector_14E6toggle>
    178c:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <g_audio_tone_state>
    1790:	99 23       	and	r25, r25
    1792:	61 f0       	breq	.+24     	; 0x17ac <__vector_14+0x50>
    1794:	81 11       	cpse	r24, r1
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__vector_14+0x46>
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	89 e0       	ldi	r24, 0x09	; 9
    179c:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <__vector_14+0x58>
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	89 e0       	ldi	r24, 0x09	; 9
    17a6:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <__vector_14+0x58>
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	89 e0       	ldi	r24, 0x09	; 9
    17b0:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_11>:
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	ef 93       	push	r30
    17e6:	ff 93       	push	r31
    17e8:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_sendAMmodulation>
    17ec:	81 11       	cpse	r24, r1
    17ee:	2e c0       	rjmp	.+92     	; 0x184c <__vector_11+0x76>
    17f0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ11__vector_11E5index>
    17f4:	81 11       	cpse	r24, r1
    17f6:	2a c0       	rjmp	.+84     	; 0x184c <__vector_11+0x76>
    17f8:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <g_sendAMmodulationConstantly>
    17fc:	88 23       	and	r24, r24
    17fe:	91 f0       	breq	.+36     	; 0x1824 <__vector_11+0x4e>
    1800:	34 c0       	rjmp	.+104    	; 0x186a <__vector_11+0x94>
    1802:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ11__vector_11E5index>
    1806:	98 b1       	in	r25, 0x08	; 8
    1808:	8f 70       	andi	r24, 0x0F	; 15
    180a:	90 7f       	andi	r25, 0xF0	; 240
    180c:	89 2b       	or	r24, r25
    180e:	88 b9       	out	0x08, r24	; 8
    1810:	9b b1       	in	r25, 0x0b	; 11
    1812:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ11__vector_11E11controlPins>
    1816:	80 73       	andi	r24, 0x30	; 48
    1818:	82 95       	swap	r24
    181a:	8f 70       	andi	r24, 0x0F	; 15
    181c:	9c 7f       	andi	r25, 0xFC	; 252
    181e:	89 2b       	or	r24, r25
    1820:	8b b9       	out	0x0b, r24	; 11
    1822:	2b c0       	rjmp	.+86     	; 0x187a <__vector_11+0xa4>
    1824:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ11__vector_11E11controlPins>
    1828:	8f 33       	cpi	r24, 0x3F	; 63
    182a:	39 f1       	breq	.+78     	; 0x187a <__vector_11+0xa4>
    182c:	8f e3       	ldi	r24, 0x3F	; 63
    182e:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ11__vector_11E11controlPins>
    1832:	88 b1       	in	r24, 0x08	; 8
    1834:	8f 60       	ori	r24, 0x0F	; 15
    1836:	88 b9       	out	0x08, r24	; 8
    1838:	9b b1       	in	r25, 0x0b	; 11
    183a:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ11__vector_11E11controlPins>
    183e:	80 73       	andi	r24, 0x30	; 48
    1840:	82 95       	swap	r24
    1842:	8f 70       	andi	r24, 0x0F	; 15
    1844:	9c 7f       	andi	r25, 0xFC	; 252
    1846:	89 2b       	or	r24, r25
    1848:	8b b9       	out	0x0b, r24	; 11
    184a:	17 c0       	rjmp	.+46     	; 0x187a <__vector_11+0xa4>
    184c:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <_ZZ11__vector_11E5index>
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	9e 0f       	add	r25, r30
    1854:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <_ZZ11__vector_11E5index>
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	ed 5a       	subi	r30, 0xAD	; 173
    185c:	fa 4f       	sbci	r31, 0xFA	; 250
    185e:	80 81       	ld	r24, Z
    1860:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ11__vector_11E11controlPins>
    1864:	90 32       	cpi	r25, 0x20	; 32
    1866:	68 f6       	brcc	.-102    	; 0x1802 <__vector_11+0x2c>
    1868:	ce cf       	rjmp	.-100    	; 0x1806 <__vector_11+0x30>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ11__vector_11E5index>
    1870:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_dataModulation>
    1874:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ11__vector_11E11controlPins>
    1878:	c6 cf       	rjmp	.-116    	; 0x1806 <__vector_11+0x30>
    187a:	ff 91       	pop	r31
    187c:	ef 91       	pop	r30
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f 90       	pop	r0
    1888:	1f 90       	pop	r1
    188a:	18 95       	reti

0000188c <_Z23clockConfigurationErrorv>:
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1894:	88 23       	and	r24, r24
    1896:	09 f4       	brne	.+2      	; 0x189a <_Z23clockConfigurationErrorv+0xe>
    1898:	61 c0       	rjmp	.+194    	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    189a:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    189e:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    18a2:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    18a6:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    18aa:	89 2b       	or	r24, r25
    18ac:	8a 2b       	or	r24, r26
    18ae:	8b 2b       	or	r24, r27
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <_Z23clockConfigurationErrorv+0x28>
    18b2:	4d c0       	rjmp	.+154    	; 0x194e <_Z23clockConfigurationErrorv+0xc2>
    18b4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    18b8:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    18bc:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    18c0:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    18c4:	89 2b       	or	r24, r25
    18c6:	8a 2b       	or	r24, r26
    18c8:	8b 2b       	or	r24, r27
    18ca:	09 f4       	brne	.+2      	; 0x18ce <_Z23clockConfigurationErrorv+0x42>
    18cc:	42 c0       	rjmp	.+132    	; 0x1952 <_Z23clockConfigurationErrorv+0xc6>
    18ce:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    18d2:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    18d6:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    18da:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    18de:	81 15       	cp	r24, r1
    18e0:	96 46       	sbci	r25, 0x66	; 102
    18e2:	ae 4e       	sbci	r26, 0xEE	; 238
    18e4:	bf 45       	sbci	r27, 0x5F	; 95
    18e6:	b8 f1       	brcs	.+110    	; 0x1956 <_Z23clockConfigurationErrorv+0xca>
    18e8:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <g_event_finish_epoch>
    18ec:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    18f0:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    18f4:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    18f8:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
    18fc:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    1900:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    1904:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    1908:	84 17       	cp	r24, r20
    190a:	95 07       	cpc	r25, r21
    190c:	a6 07       	cpc	r26, r22
    190e:	b7 07       	cpc	r27, r23
    1910:	20 f5       	brcc	.+72     	; 0x195a <_Z23clockConfigurationErrorv+0xce>
    1912:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1916:	88 23       	and	r24, r24
    1918:	c1 f0       	breq	.+48     	; 0x194a <_Z23clockConfigurationErrorv+0xbe>
    191a:	00 91 7d 05 	lds	r16, 0x057D	; 0x80057d <g_current_epoch>
    191e:	10 91 7e 05 	lds	r17, 0x057E	; 0x80057e <g_current_epoch+0x1>
    1922:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <g_current_epoch+0x2>
    1926:	30 91 80 05 	lds	r19, 0x0580	; 0x800580 <g_current_epoch+0x3>
    192a:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <g_event_finish_epoch>
    192e:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    1932:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    1936:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	40 17       	cp	r20, r16
    193e:	51 07       	cpc	r21, r17
    1940:	62 07       	cpc	r22, r18
    1942:	73 07       	cpc	r23, r19
    1944:	58 f0       	brcs	.+22     	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	09 c0       	rjmp	.+18     	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	07 c0       	rjmp	.+14     	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	05 c0       	rjmp	.+10     	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	03 c0       	rjmp	.+6      	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	01 c0       	rjmp	.+2      	; 0x195c <_Z23clockConfigurationErrorv+0xd0>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	08 95       	ret

00001962 <_Z13sendMorseToneh>:
    1962:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <g_lastSeconds>
    1966:	91 11       	cpse	r25, r1
    1968:	0a c0       	rjmp	.+20     	; 0x197e <_Z13sendMorseToneh+0x1c>
    196a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_fox_tone_offset>
    196e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_fox_tone_offset+0x1>
    1972:	9f e2       	ldi	r25, 0x2F	; 47
    1974:	92 1b       	sub	r25, r18
    1976:	97 bd       	out	0x27, r25	; 39
    1978:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_audio_tone_state>
    197c:	08 95       	ret
    197e:	8f e2       	ldi	r24, 0x2F	; 47
    1980:	87 bd       	out	0x27, r24	; 39
    1982:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_audio_tone_state>
    1986:	08 95       	ret

00001988 <__vector_8>:
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <__vector_8+0x28>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tick_count>
    19b8:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <g_tick_count+0x1>
    19bc:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <g_tick_count+0x2>
    19c0:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <g_tick_count+0x3>
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	a1 1d       	adc	r26, r1
    19c8:	b1 1d       	adc	r27, r1
    19ca:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <g_tick_count>
    19ce:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <g_tick_count+0x1>
    19d2:	a0 93 06 05 	sts	0x0506, r26	; 0x800506 <g_tick_count+0x2>
    19d6:	b0 93 07 05 	sts	0x0507, r27	; 0x800507 <g_tick_count+0x3>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	1a 82       	std	Y+2, r1	; 0x02
    19e0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    19e4:	88 23       	and	r24, r24
    19e6:	19 f1       	breq	.+70     	; 0x1a2e <__vector_8+0xa6>
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z11digitalReadh>
    19ee:	81 11       	cpse	r24, r1
    19f0:	1e c0       	rjmp	.+60     	; 0x1a2e <__vector_8+0xa6>
    19f2:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_sync_pin_timer>
    19f6:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <g_sync_pin_timer+0x1>
    19fa:	8b 3b       	cpi	r24, 0xBB	; 187
    19fc:	90 41       	sbci	r25, 0x10	; 16
    19fe:	4c f4       	brge	.+18     	; 0x1a12 <__vector_8+0x8a>
    1a00:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_sync_pin_timer>
    1a04:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <g_sync_pin_timer+0x1>
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <g_sync_pin_timer+0x1>
    1a0e:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <g_sync_pin_timer>
    1a12:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_sync_pin_timer>
    1a16:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <g_sync_pin_timer+0x1>
    1a1a:	85 39       	cpi	r24, 0x95	; 149
    1a1c:	95 40       	sbci	r25, 0x05	; 5
    1a1e:	3c f0       	brlt	.+14     	; 0x1a2e <__vector_8+0xa6>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <g_sync_pin_stable>
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	87 e0       	ldi	r24, 0x07	; 7
    1a2a:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1a2e:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <g_dtmf_detected>
    1a32:	81 11       	cpse	r24, r1
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <__vector_8+0xb6>
    1a36:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_config_error>
    1a3a:	88 23       	and	r24, r24
    1a3c:	c1 f0       	breq	.+48     	; 0x1a6e <__vector_8+0xe6>
    1a3e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1a42:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1a46:	22 3e       	cpi	r18, 0xE2	; 226
    1a48:	8f ef       	ldi	r24, 0xFF	; 255
    1a4a:	38 07       	cpc	r19, r24
    1a4c:	34 f4       	brge	.+12     	; 0x1a5a <__vector_8+0xd2>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a56:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1a5a:	2f 31       	cpi	r18, 0x1F	; 31
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	a4 f0       	brlt	.+40     	; 0x1a88 <__vector_8+0x100>
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f ef       	ldi	r25, 0xFF	; 255
    1a64:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a68:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <__vector_8+0x100>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a76:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1a7a:	8f e1       	ldi	r24, 0x1F	; 31
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1a82:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1a86:	10 c0       	rjmp	.+32     	; 0x1aa8 <__vector_8+0x120>
    1a88:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1a8c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1a90:	82 0f       	add	r24, r18
    1a92:	93 1f       	adc	r25, r19
    1a94:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1a98:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1a9c:	99 23       	and	r25, r25
    1a9e:	24 f4       	brge	.+8      	; 0x1aa8 <__vector_8+0x120>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_blinky_time>
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <__vector_8+0x124>
    1aa8:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <g_blinky_time>
    1aac:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <_ZL16g_LEDs_Timed_Out>
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	24 c0       	rjmp	.+72     	; 0x1afc <__vector_8+0x174>
    1ab4:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <g_sync_pin_stable>
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <__vector_8+0x136>
    1abc:	1b c1       	rjmp	.+566    	; 0x1cf4 <__vector_8+0x36c>
    1abe:	1e c0       	rjmp	.+60     	; 0x1afc <__vector_8+0x174>
    1ac0:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_blinky_time>
    1ac4:	88 23       	and	r24, r24
    1ac6:	29 f0       	breq	.+10     	; 0x1ad2 <__vector_8+0x14a>
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	8d e0       	ldi	r24, 0x0D	; 13
    1acc:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <__vector_8+0x152>
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	8d e0       	ldi	r24, 0x0D	; 13
    1ad6:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1ada:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_config_error>
    1ade:	88 23       	and	r24, r24
    1ae0:	69 f0       	breq	.+26     	; 0x1afc <__vector_8+0x174>
    1ae2:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_blinky_time>
    1ae6:	88 23       	and	r24, r24
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <__vector_8+0x16c>
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	87 e0       	ldi	r24, 0x07	; 7
    1aee:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <__vector_8+0x174>
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	87 e0       	ldi	r24, 0x07	; 7
    1af8:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1afc:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_enable_start_timer>
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <__vector_8+0x17e>
    1b04:	58 c0       	rjmp	.+176    	; 0x1bb6 <__vector_8+0x22e>
    1b06:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_lastSeconds>
    1b0a:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <_ZZ10__vector_8E14hold_last10sec>
    1b0e:	98 17       	cp	r25, r24
    1b10:	b1 f0       	breq	.+44     	; 0x1b3e <__vector_8+0x1b6>
    1b12:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_lastSeconds>
    1b16:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E14hold_last10sec>
    1b1a:	88 23       	and	r24, r24
    1b1c:	49 f0       	breq	.+18     	; 0x1b30 <__vector_8+0x1a8>
    1b1e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1b22:	83 e6       	ldi	r24, 0x63	; 99
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E13starting_blip+0x1>
    1b2a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E13starting_blip>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <__vector_8+0x1d0>
    1b30:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ10__vector_8E13starting_blip+0x1>
    1b34:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ10__vector_8E13starting_blip>
    1b38:	87 e2       	ldi	r24, 0x27	; 39
    1b3a:	9b e0       	ldi	r25, 0x0B	; 11
    1b3c:	28 c0       	rjmp	.+80     	; 0x1b8e <__vector_8+0x206>
    1b3e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ10__vector_8E13starting_blip>
    1b42:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ10__vector_8E13starting_blip+0x1>
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	e1 f0       	breq	.+56     	; 0x1b82 <__vector_8+0x1fa>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E13starting_blip+0x1>
    1b50:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E13starting_blip>
    1b54:	89 2b       	or	r24, r25
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <__vector_8+0x1f0>
    1b58:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_lastSeconds>
    1b5c:	86 30       	cpi	r24, 0x06	; 6
    1b5e:	30 f0       	brcs	.+12     	; 0x1b6c <__vector_8+0x1e4>
    1b60:	8f e3       	ldi	r24, 0x3F	; 63
    1b62:	87 bd       	out	0x27, r24	; 39
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_audio_tone_state>
    1b6a:	25 c0       	rjmp	.+74     	; 0x1bb6 <__vector_8+0x22e>
    1b6c:	8f e1       	ldi	r24, 0x1F	; 31
    1b6e:	87 bd       	out	0x27, r24	; 39
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_audio_tone_state>
    1b76:	1f c0       	rjmp	.+62     	; 0x1bb6 <__vector_8+0x22e>
    1b78:	8f e2       	ldi	r24, 0x2F	; 47
    1b7a:	87 bd       	out	0x27, r24	; 39
    1b7c:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_audio_tone_state>
    1b80:	1a c0       	rjmp	.+52     	; 0x1bb6 <__vector_8+0x22e>
    1b82:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ10__vector_8E13starting_boop>
    1b86:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <_ZZ10__vector_8E13starting_boop+0x1>
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	a1 f0       	breq	.+40     	; 0x1bb6 <__vector_8+0x22e>
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <_ZZ10__vector_8E13starting_boop+0x1>
    1b94:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ10__vector_8E13starting_boop>
    1b98:	89 2b       	or	r24, r25
    1b9a:	41 f4       	brne	.+16     	; 0x1bac <__vector_8+0x224>
    1b9c:	8f e2       	ldi	r24, 0x2F	; 47
    1b9e:	87 bd       	out	0x27, r24	; 39
    1ba0:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_audio_tone_state>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <__vector_8+0x22e>
    1bac:	8f e4       	ldi	r24, 0x4F	; 79
    1bae:	87 bd       	out	0x27, r24	; 39
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_audio_tone_state>
    1bb6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1bba:	81 11       	cpse	r24, r1
    1bbc:	a8 c0       	rjmp	.+336    	; 0x1d0e <__vector_8+0x386>
    1bbe:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <g_on_the_air>
    1bc2:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <g_on_the_air+0x1>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <__vector_8+0x244>
    1bca:	99 c0       	rjmp	.+306    	; 0x1cfe <__vector_8+0x376>
    1bcc:	a0 c0       	rjmp	.+320    	; 0x1d0e <__vector_8+0x386>
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZ10__vector_8E7codeInc+0x1>
    1bd4:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ10__vector_8E7codeInc>
    1bd8:	89 2b       	or	r24, r25
    1bda:	09 f0       	breq	.+2      	; 0x1bde <__vector_8+0x256>
    1bdc:	a3 c0       	rjmp	.+326    	; 0x1d24 <__vector_8+0x39c>
    1bde:	ae 01       	movw	r20, r28
    1be0:	4e 5f       	subi	r20, 0xFE	; 254
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255
    1be4:	be 01       	movw	r22, r28
    1be6:	6f 5f       	subi	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_Z9makeMorsePcPhS0_>
    1bf2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10__vector_8E3key>
    1bf6:	99 81       	ldd	r25, Y+1	; 0x01
    1bf8:	91 11       	cpse	r25, r1
    1bfa:	11 c0       	rjmp	.+34     	; 0x1c1e <__vector_8+0x296>
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	99 23       	and	r25, r25
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <__vector_8+0x296>
    1c02:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10__vector_8E3key>
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_callsign_sent>
    1c0c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1c10:	88 23       	and	r24, r24
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <__vector_8+0x28e>
    1c14:	87 c0       	rjmp	.+270    	; 0x1d24 <__vector_8+0x39c>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_Z13sendMorseToneh>
    1c1c:	1e c0       	rjmp	.+60     	; 0x1c5a <__vector_8+0x2d2>
    1c1e:	88 23       	and	r24, r24
    1c20:	b9 f0       	breq	.+46     	; 0x1c50 <__vector_8+0x2c8>
    1c22:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <_ZL16g_LEDs_Timed_Out>
    1c26:	81 11       	cpse	r24, r1
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <__vector_8+0x2aa>
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	87 e0       	ldi	r24, 0x07	; 7
    1c2e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1c32:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_enable_transmitter>
    1c36:	88 23       	and	r24, r24
    1c38:	59 f0       	breq	.+22     	; 0x1c50 <__vector_8+0x2c8>
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	8a e0       	ldi	r24, 0x0A	; 10
    1c3e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	88 e0       	ldi	r24, 0x08	; 8
    1c46:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <g_sendAMmodulation>
    1c50:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1c54:	88 23       	and	r24, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <__vector_8+0x2d2>
    1c58:	65 c0       	rjmp	.+202    	; 0x1d24 <__vector_8+0x39c>
    1c5a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1c5e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_Z13sendMorseToneh>
    1c62:	60 c0       	rjmp	.+192    	; 0x1d24 <__vector_8+0x39c>
    1c64:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <_ZL16g_LEDs_Timed_Out>
    1c68:	81 11       	cpse	r24, r1
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <__vector_8+0x2ee>
    1c6c:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <g_sync_pin_stable>
    1c70:	88 23       	and	r24, r24
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <__vector_8+0x2ee>
    1c74:	51 c0       	rjmp	.+162    	; 0x1d18 <__vector_8+0x390>
    1c76:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_enable_transmitter>
    1c7a:	88 23       	and	r24, r24
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <__vector_8+0x312>
    1c7e:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1c82:	8a e0       	ldi	r24, 0x0A	; 10
    1c84:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1c88:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1c8c:	88 e0       	ldi	r24, 0x08	; 8
    1c8e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1c92:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1c96:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <g_sendAMmodulation>
    1c9a:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_code_throttle>
    1c9e:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_code_throttle+0x1>
    1ca2:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZ10__vector_8E7codeInc+0x1>
    1ca6:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ10__vector_8E7codeInc>
    1caa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1cae:	88 23       	and	r24, r24
    1cb0:	c9 f1       	breq	.+114    	; 0x1d24 <__vector_8+0x39c>
    1cb2:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1cb6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_Z13sendMorseToneh>
    1cba:	34 c0       	rjmp	.+104    	; 0x1d24 <__vector_8+0x39c>
    1cbc:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10__vector_8E3key>
    1cc0:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <g_sync_pin_stable>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <__vector_8+0x348>
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	87 e0       	ldi	r24, 0x07	; 7
    1ccc:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	8a e0       	ldi	r24, 0x0A	; 10
    1cd4:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	88 e0       	ldi	r24, 0x08	; 8
    1cdc:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1ce0:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_sendAMmodulation>
    1ce4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1ce8:	88 23       	and	r24, r24
    1cea:	e1 f0       	breq	.+56     	; 0x1d24 <__vector_8+0x39c>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_Z13sendMorseToneh>
    1cf2:	18 c0       	rjmp	.+48     	; 0x1d24 <__vector_8+0x39c>
    1cf4:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <g_dtmf_detected>
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	e2 ce       	rjmp	.-572    	; 0x1ac0 <__vector_8+0x138>
    1cfc:	ee ce       	rjmp	.-548    	; 0x1ada <__vector_8+0x152>
    1cfe:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ10__vector_8E7codeInc>
    1d02:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ10__vector_8E7codeInc+0x1>
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <__vector_8+0x384>
    1d0a:	61 cf       	rjmp	.-318    	; 0x1bce <__vector_8+0x246>
    1d0c:	ab cf       	rjmp	.-170    	; 0x1c64 <__vector_8+0x2dc>
    1d0e:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1d12:	81 11       	cpse	r24, r1
    1d14:	d3 cf       	rjmp	.-90     	; 0x1cbc <__vector_8+0x334>
    1d16:	e6 cf       	rjmp	.-52     	; 0x1ce4 <__vector_8+0x35c>
    1d18:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <_ZZ10__vector_8E3key>
    1d1c:	87 e0       	ldi	r24, 0x07	; 7
    1d1e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1d22:	a9 cf       	rjmp	.-174    	; 0x1c76 <__vector_8+0x2ee>
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	ff 91       	pop	r31
    1d2e:	ef 91       	pop	r30
    1d30:	bf 91       	pop	r27
    1d32:	af 91       	pop	r26
    1d34:	9f 91       	pop	r25
    1d36:	8f 91       	pop	r24
    1d38:	7f 91       	pop	r23
    1d3a:	6f 91       	pop	r22
    1d3c:	5f 91       	pop	r21
    1d3e:	4f 91       	pop	r20
    1d40:	3f 91       	pop	r19
    1d42:	2f 91       	pop	r18
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	0f 90       	pop	r0
    1d4a:	1f 90       	pop	r1
    1d4c:	18 95       	reti

00001d4e <_Z11setupForFoxP5Fox_t>:
#endif // #if !INIT_EEPROM_ONLY


void setupForFox(Fox_t* fox)
{
	if(fox)
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	31 f0       	breq	.+12     	; 0x1d5e <_Z11setupForFoxP5Fox_t+0x10>
	{
		if(*fox != INVALID_FOX)
    1d52:	fc 01       	movw	r30, r24
    1d54:	80 81       	ld	r24, Z
    1d56:	86 31       	cpi	r24, 0x16	; 22
    1d58:	11 f0       	breq	.+4      	; 0x1d5e <_Z11setupForFoxP5Fox_t+0x10>
		{
			g_fox = *fox;
    1d5a:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <g_fox>
		}
	}

	switch(g_fox)
    1d5e:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <g_fox>
    1d62:	8e 2f       	mov	r24, r30
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	fc 01       	movw	r30, r24
    1d68:	31 97       	sbiw	r30, 0x01	; 1
    1d6a:	e5 31       	cpi	r30, 0x15	; 21
    1d6c:	f1 05       	cpc	r31, r1
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <_Z11setupForFoxP5Fox_t+0x24>
    1d70:	6b c0       	rjmp	.+214    	; 0x1e48 <_Z11setupForFoxP5Fox_t+0xfa>
    1d72:	e2 58       	subi	r30, 0x82	; 130
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1d7a:	88 e7       	ldi	r24, 0x78	; 120
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1d82:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_enable_start_timer>
		}
		break;
    1d8c:	7d c0       	rjmp	.+250    	; 0x1e88 <_Z11setupForFoxP5Fox_t+0x13a>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1d8e:	8c e2       	ldi	r24, 0x2C	; 44
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1d96:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_enable_start_timer>
		}
		break;
    1da0:	73 c0       	rjmp	.+230    	; 0x1e88 <_Z11setupForFoxP5Fox_t+0x13a>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1da2:	8c e3       	ldi	r24, 0x3C	; 60
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_on_air_interval+0x1>
    1daa:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_on_air_interval>
			g_number_of_foxes = 5;
    1dae:	25 e0       	ldi	r18, 0x05	; 5
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	30 93 4e 05 	sts	0x054E, r19	; 0x80054e <g_number_of_foxes+0x1>
    1db6:	20 93 4d 05 	sts	0x054D, r18	; 0x80054d <g_number_of_foxes>
			g_fox_id_offset = 0;
    1dba:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_fox_id_offset+0x1>
    1dbe:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_fox_id_offset>
			g_pattern_codespeed = 8;
    1dc2:	28 e0       	ldi	r18, 0x08	; 8
    1dc4:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <g_pattern_codespeed>
			g_id_interval = 60;
    1dc8:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_id_interval+0x1>
    1dcc:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_id_interval>
			g_startclock_interval = 300;
    1dd0:	8c e2       	ldi	r24, 0x2C	; 44
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1dd8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1ddc:	55 c0       	rjmp	.+170    	; 0x1e88 <_Z11setupForFoxP5Fox_t+0x13a>

		case SPRINT_S1:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    1dde:	8c e0       	ldi	r24, 0x0C	; 12
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_on_air_interval+0x1>
    1de6:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_on_air_interval>
			g_number_of_foxes = 5;
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <g_number_of_foxes+0x1>
    1df2:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? 10 : 15;
    1df6:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    1dfa:	83 31       	cpi	r24, 0x13	; 19
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <_Z11setupForFoxP5Fox_t+0xbc>
    1dfe:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    1e02:	8e 30       	cpi	r24, 0x0E	; 14
    1e04:	20 f0       	brcs	.+8      	; 0x1e0e <_Z11setupForFoxP5Fox_t+0xc0>
    1e06:	8f e0       	ldi	r24, 0x0F	; 15
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <_Z11setupForFoxP5Fox_t+0xc2>
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <_Z11setupForFoxP5Fox_t+0xc2>
    1e0e:	8a e0       	ldi	r24, 0x0A	; 10
    1e10:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    1e14:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    1e18:	8e 30       	cpi	r24, 0x0E	; 14
    1e1a:	18 f0       	brcs	.+6      	; 0x1e22 <_Z11setupForFoxP5Fox_t+0xd4>
    1e1c:	8d e0       	ldi	r24, 0x0D	; 13
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <_Z11setupForFoxP5Fox_t+0xd8>
    1e22:	88 e0       	ldi	r24, 0x08	; 8
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <g_fox_id_offset+0x1>
    1e2a:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_fox_id_offset>
			g_id_interval = 600;
    1e2e:	88 e5       	ldi	r24, 0x58	; 88
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_id_interval+0x1>
    1e36:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_id_interval>
			g_startclock_interval = 120;
    1e3a:	88 e7       	ldi	r24, 0x78	; 120
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e42:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1e46:	20 c0       	rjmp	.+64     	; 0x1e88 <_Z11setupForFoxP5Fox_t+0x13a>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    1e48:	88 e5       	ldi	r24, 0x58	; 88
    1e4a:	92 e0       	ldi	r25, 0x02	; 2
    1e4c:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_on_air_interval+0x1>
    1e50:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_on_air_interval>
			g_number_of_foxes = 1;
    1e54:	21 e0       	ldi	r18, 0x01	; 1
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	30 93 4e 05 	sts	0x054E, r19	; 0x80054e <g_number_of_foxes+0x1>
    1e5c:	20 93 4d 05 	sts	0x054D, r18	; 0x80054d <g_number_of_foxes>
			g_pattern_codespeed = 8;
    1e60:	28 e0       	ldi	r18, 0x08	; 8
    1e62:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <g_pattern_codespeed>
			g_id_interval = 600;
    1e66:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_id_interval+0x1>
    1e6a:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    1e6e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    1e72:	88 30       	cpi	r24, 0x08	; 8
    1e74:	19 f0       	breq	.+6      	; 0x1e7c <_Z11setupForFoxP5Fox_t+0x12e>
    1e76:	8c e2       	ldi	r24, 0x2C	; 44
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <_Z11setupForFoxP5Fox_t+0x132>
    1e7c:	88 e7       	ldi	r24, 0x78	; 120
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e84:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
	}

	if(g_use_rtc_to_start)
    1e88:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <g_use_rtc_to_start>
    1e8c:	88 23       	and	r24, r24
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <_Z11setupForFoxP5Fox_t+0x144>
    1e90:	8a c0       	rjmp	.+276    	; 0x1fa6 <_Z11setupForFoxP5Fox_t+0x258>
	{
		if(g_event_start_epoch < g_current_epoch)   /* timed event in progress */
    1e92:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <g_event_start_epoch>
    1e96:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    1e9a:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    1e9e:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    1ea2:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    1ea6:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    1eaa:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    1eae:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    1eb2:	48 17       	cp	r20, r24
    1eb4:	59 07       	cpc	r21, r25
    1eb6:	6a 07       	cpc	r22, r26
    1eb8:	7b 07       	cpc	r23, r27
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <_Z11setupForFoxP5Fox_t+0x170>
    1ebc:	4d c0       	rjmp	.+154    	; 0x1f58 <_Z11setupForFoxP5Fox_t+0x20a>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;               /* Total elapsed time counter: synced at event start time */
    1ebe:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    1ec2:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    1ec6:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    1eca:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    1ece:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <g_event_start_epoch>
    1ed2:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    1ed6:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    1eda:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    1ede:	84 1b       	sub	r24, r20
    1ee0:	95 0b       	sbc	r25, r21
    1ee2:	a6 0b       	sbc	r26, r22
    1ee4:	b7 0b       	sbc	r27, r23
    1ee6:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_seconds_since_sync>
    1eea:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <g_seconds_since_sync+0x1>
    1eee:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <g_seconds_since_sync+0x2>
    1ef2:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    1ef6:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    1efa:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
			g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    1efe:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <g_code_throttle+0x1>
    1f02:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <g_code_throttle>
			g_callsign_sent = FALSE;
    1f06:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_callsign_sent>

			g_fox_counter = 1 + (g_seconds_since_sync % g_on_air_interval);
    1f0a:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_seconds_since_sync>
    1f0e:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_seconds_since_sync+0x1>
    1f12:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_seconds_since_sync+0x2>
    1f16:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_seconds_since_sync+0x3>
    1f1a:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_on_air_interval>
    1f1e:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_on_air_interval+0x1>
    1f22:	03 2e       	mov	r0, r19
    1f24:	00 0c       	add	r0, r0
    1f26:	44 0b       	sbc	r20, r20
    1f28:	55 0b       	sbc	r21, r21
    1f2a:	0e 94 1f 28 	call	0x503e	; 0x503e <__divmodsi4>
    1f2e:	6f 5f       	subi	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <g_fox_counter+0x1>
    1f36:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1f3a:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_fox_seconds_into_interval+0x1>
    1f3e:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1f42:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_fox_transition>
			g_fox_id_offset = 0;
    1f46:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_fox_id_offset+0x1>
    1f4a:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    1f4e:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_time_to_ID>
			g_audio_tone_state = OFF;
    1f52:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_audio_tone_state>
    1f56:	47 c0       	rjmp	.+142    	; 0x1fe6 <_Z11setupForFoxP5Fox_t+0x298>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    1f58:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <g_seconds_since_sync>
    1f5c:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_seconds_since_sync+0x1>
    1f60:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <g_seconds_since_sync+0x2>
    1f64:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    1f68:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    1f6c:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    1f70:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <g_code_throttle+0x1>
    1f74:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <g_code_throttle>
			g_callsign_sent = FALSE;
    1f78:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_callsign_sent>

			g_fox_counter = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    1f84:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1f88:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_fox_seconds_into_interval+0x1>
    1f8c:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1f90:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_fox_transition>
			g_fox_id_offset = 0;
    1f94:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_fox_id_offset+0x1>
    1f98:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    1f9c:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_time_to_ID>
			g_audio_tone_state = OFF;
    1fa0:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_audio_tone_state>
    1fa4:	20 c0       	rjmp	.+64     	; 0x1fe6 <_Z11setupForFoxP5Fox_t+0x298>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    1fa6:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <g_seconds_since_sync>
    1faa:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_seconds_since_sync+0x1>
    1fae:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <g_seconds_since_sync+0x2>
    1fb2:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    1fb6:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    1fba:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    1fbe:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <g_code_throttle+0x1>
    1fc2:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <g_code_throttle>
		g_callsign_sent = FALSE;
    1fc6:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_callsign_sent>

//		g_on_air_interval = 0;
		g_fox_seconds_into_interval = 0;
    1fca:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_fox_seconds_into_interval+0x1>
    1fce:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_fox_seconds_into_interval>
//		g_number_of_foxes = 0;
		g_fox_transition = FALSE;
    1fd2:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_fox_transition>
		g_fox_id_offset = 0;
    1fd6:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_fox_id_offset+0x1>
    1fda:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_fox_id_offset>
//		g_id_interval = 0;
		g_time_to_ID = FALSE;
    1fde:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_time_to_ID>
		g_audio_tone_state = OFF;
    1fe2:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_audio_tone_state>
	}

	g_LEDs_Timed_Out = !g_enable_LEDs;
    1fe6:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <g_enable_LEDs>
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	91 11       	cpse	r25, r1
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <_ZL16g_LEDs_Timed_Out>
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	87 e0       	ldi	r24, 0x07	; 7
    1ff8:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    1ffc:	08 95       	ret

00001ffe <__vector_1>:

/***********************************************************************
 * Handle RTC 1-second interrupts
 **********************************************************************/
ISR( INT0_vect )
{
    1ffe:	1f 92       	push	r1
    2000:	0f 92       	push	r0
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	0f 92       	push	r0
    2006:	11 24       	eor	r1, r1
    2008:	2f 93       	push	r18
    200a:	3f 93       	push	r19
    200c:	4f 93       	push	r20
    200e:	5f 93       	push	r21
    2010:	6f 93       	push	r22
    2012:	7f 93       	push	r23
    2014:	8f 93       	push	r24
    2016:	9f 93       	push	r25
    2018:	af 93       	push	r26
    201a:	bf 93       	push	r27
    201c:	ef 93       	push	r30
    201e:	ff 93       	push	r31
	static int id_countdown = 0;

	g_current_epoch++;
    2020:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    2024:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    2028:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    202c:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	a1 1d       	adc	r26, r1
    2034:	b1 1d       	adc	r27, r1
    2036:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <g_current_epoch>
    203a:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <g_current_epoch+0x1>
    203e:	a0 93 7f 05 	sts	0x057F, r26	; 0x80057f <g_current_epoch+0x2>
    2042:	b0 93 80 05 	sts	0x0580, r27	; 0x800580 <g_current_epoch+0x3>

	if(g_temperature_check_countdown)
    2046:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_temperature_check_countdown>
    204a:	88 23       	and	r24, r24
    204c:	29 f0       	breq	.+10     	; 0x2058 <__vector_1+0x5a>
	{
		g_temperature_check_countdown--;
    204e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_temperature_check_countdown>
    2052:	81 50       	subi	r24, 0x01	; 1
    2054:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_temperature_check_countdown>
		/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
		 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
	}

	if(g_transmissions_disabled)
    2058:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    205c:	88 23       	and	r24, r24
    205e:	91 f1       	breq	.+100    	; 0x20c4 <__vector_1+0xc6>
	{
		if(g_use_rtc_to_start)
    2060:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <g_use_rtc_to_start>
    2064:	88 23       	and	r24, r24
    2066:	09 f4       	brne	.+2      	; 0x206a <__vector_1+0x6c>
    2068:	35 c1       	rjmp	.+618    	; 0x22d4 <__vector_1+0x2d6>
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
    206a:	40 91 7d 05 	lds	r20, 0x057D	; 0x80057d <g_current_epoch>
    206e:	50 91 7e 05 	lds	r21, 0x057E	; 0x80057e <g_current_epoch+0x1>
    2072:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <g_current_epoch+0x2>
    2076:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <g_current_epoch+0x3>
    207a:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
    207e:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    2082:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    2086:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    208a:	48 17       	cp	r20, r24
    208c:	59 07       	cpc	r21, r25
    208e:	6a 07       	cpc	r22, r26
    2090:	7b 07       	cpc	r23, r27
    2092:	08 f4       	brcc	.+2      	; 0x2096 <__vector_1+0x98>
    2094:	1f c1       	rjmp	.+574    	; 0x22d4 <__vector_1+0x2d6>
    2096:	40 91 7d 05 	lds	r20, 0x057D	; 0x80057d <g_current_epoch>
    209a:	50 91 7e 05 	lds	r21, 0x057E	; 0x80057e <g_current_epoch+0x1>
    209e:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <g_current_epoch+0x2>
    20a2:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <g_current_epoch+0x3>
    20a6:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    20aa:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    20ae:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    20b2:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    20b6:	48 17       	cp	r20, r24
    20b8:	59 07       	cpc	r21, r25
    20ba:	6a 07       	cpc	r22, r26
    20bc:	7b 07       	cpc	r23, r27
    20be:	08 f4       	brcc	.+2      	; 0x20c2 <__vector_1+0xc4>
    20c0:	cf c0       	rjmp	.+414    	; 0x2260 <__vector_1+0x262>
    20c2:	08 c1       	rjmp	.+528    	; 0x22d4 <__vector_1+0x2d6>
			}
		}
	}
	else
	{
		if(g_use_rtc_to_start)
    20c4:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <g_use_rtc_to_start>
    20c8:	88 23       	and	r24, r24
    20ca:	f1 f0       	breq	.+60     	; 0x2108 <__vector_1+0x10a>
		{
			if(g_current_epoch >= g_event_finish_epoch)
    20cc:	40 91 7d 05 	lds	r20, 0x057D	; 0x80057d <g_current_epoch>
    20d0:	50 91 7e 05 	lds	r21, 0x057E	; 0x80057e <g_current_epoch+0x1>
    20d4:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <g_current_epoch+0x2>
    20d8:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <g_current_epoch+0x3>
    20dc:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    20e0:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    20e4:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    20e8:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    20ec:	48 17       	cp	r20, r24
    20ee:	59 07       	cpc	r21, r25
    20f0:	6a 07       	cpc	r22, r26
    20f2:	7b 07       	cpc	r23, r27
    20f4:	48 f0       	brcs	.+18     	; 0x2108 <__vector_1+0x10a>
			{
				g_use_rtc_to_start = FALSE;
    20f6:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_use_rtc_to_start>
				g_transmissions_disabled = TRUE;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
				g_on_the_air = FALSE;
    2100:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    2104:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
			}
		}

		if(!g_transmissions_disabled)
    2108:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    210c:	81 11       	cpse	r24, r1
    210e:	e2 c0       	rjmp	.+452    	; 0x22d4 <__vector_1+0x2d6>
		{
			if(g_seconds_since_sync == 0)   /* sync just occurred */
    2110:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_seconds_since_sync>
    2114:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_seconds_since_sync+0x1>
    2118:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <g_seconds_since_sync+0x2>
    211c:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <g_seconds_since_sync+0x3>
    2120:	89 2b       	or	r24, r25
    2122:	8a 2b       	or	r24, r26
    2124:	8b 2b       	or	r24, r27
    2126:	81 f4       	brne	.+32     	; 0x2148 <__vector_1+0x14a>
			{
				id_countdown = g_id_interval;
    2128:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_id_interval>
    212c:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_id_interval+0x1>
    2130:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E12id_countdown+0x1>
    2134:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E12id_countdown>
				g_fox_counter = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    2140:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
				g_lastSeconds = 0;
    2144:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <g_lastSeconds>
				/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
				 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
			}

			g_seconds_since_sync++; /* Total elapsed time counter */
    2148:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_seconds_since_sync>
    214c:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_seconds_since_sync+0x1>
    2150:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <g_seconds_since_sync+0x2>
    2154:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <g_seconds_since_sync+0x3>
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	a1 1d       	adc	r26, r1
    215c:	b1 1d       	adc	r27, r1
    215e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_seconds_since_sync>
    2162:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <g_seconds_since_sync+0x1>
    2166:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <g_seconds_since_sync+0x2>
    216a:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval++;
    216e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_fox_seconds_into_interval>
    2172:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <g_fox_seconds_into_interval+0x1>
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <g_fox_seconds_into_interval+0x1>
    217c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_fox_seconds_into_interval>

			if(id_countdown)
    2180:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10__vector_1E12id_countdown>
    2184:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10__vector_1E12id_countdown+0x1>
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	29 f0       	breq	.+10     	; 0x2196 <__vector_1+0x198>
			{
				id_countdown--;
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E12id_countdown+0x1>
    2192:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E12id_countdown>
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
    2196:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_number_of_foxes>
    219a:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_number_of_foxes+0x1>
    219e:	89 2b       	or	r24, r25
    21a0:	e1 f1       	breq	.+120    	; 0x221a <__vector_1+0x21c>
    21a2:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_seconds_since_sync>
    21a6:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_seconds_since_sync+0x1>
    21aa:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_seconds_since_sync+0x2>
    21ae:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_seconds_since_sync+0x3>
    21b2:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_on_air_interval>
    21b6:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_on_air_interval+0x1>
    21ba:	03 2e       	mov	r0, r19
    21bc:	00 0c       	add	r0, r0
    21be:	44 0b       	sbc	r20, r20
    21c0:	55 0b       	sbc	r21, r21
    21c2:	0e 94 1f 28 	call	0x503e	; 0x503e <__divmodsi4>
    21c6:	67 2b       	or	r22, r23
    21c8:	68 2b       	or	r22, r24
    21ca:	69 2b       	or	r22, r25
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <__vector_1+0x1d2>
    21ce:	4f c0       	rjmp	.+158    	; 0x226e <__vector_1+0x270>
    21d0:	24 c0       	rjmp	.+72     	; 0x221a <__vector_1+0x21c>
			{
				g_fox_counter++;

				if(g_fox_counter > g_number_of_foxes)
				{
					g_fox_counter = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    21da:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
//						pinMode(PIN_SYNC, INPUT);
//						pinMode(PIN_SYNC, OUTPUT);  /* Set sync pin as output low */
//						g_sync_enabled = FALSE;
//					}

					g_LEDs_Timed_Out = TRUE;
    21de:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <_ZL16g_LEDs_Timed_Out>
					digitalWrite(PIN_LED2, OFF);
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	87 e0       	ldi	r24, 0x07	; 7
    21e6:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
				}
				g_fox_transition = TRUE;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_fox_transition>
				g_fox_seconds_into_interval = 0;
    21f0:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_fox_seconds_into_interval+0x1>
    21f4:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_fox_seconds_into_interval>

				if(!id_countdown)
    21f8:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10__vector_1E12id_countdown>
    21fc:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10__vector_1E12id_countdown+0x1>
    2200:	89 2b       	or	r24, r25
    2202:	59 f4       	brne	.+22     	; 0x221a <__vector_1+0x21c>
				{
					id_countdown = g_id_interval;
    2204:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_id_interval>
    2208:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_id_interval+0x1>
    220c:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E12id_countdown+0x1>
    2210:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E12id_countdown>
					g_time_to_ID = TRUE;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_time_to_ID>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
    221a:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_enable_start_timer>
    221e:	88 23       	and	r24, r24
    2220:	09 f4       	brne	.+2      	; 0x2224 <__vector_1+0x226>
    2222:	56 c0       	rjmp	.+172    	; 0x22d0 <__vector_1+0x2d2>
    2224:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_seconds_since_sync>
    2228:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_seconds_since_sync+0x1>
    222c:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <g_seconds_since_sync+0x2>
    2230:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <g_seconds_since_sync+0x3>
    2234:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    2238:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	65 5f       	subi	r22, 0xF5	; 245
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8f 4f       	sbci	r24, 0xFF	; 255
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	03 2e       	mov	r0, r19
    224a:	00 0c       	add	r0, r0
    224c:	44 0b       	sbc	r20, r20
    224e:	55 0b       	sbc	r21, r21
    2250:	0e 94 1f 28 	call	0x503e	; 0x503e <__divmodsi4>
    2254:	6b 30       	cpi	r22, 0x0B	; 11
    2256:	71 05       	cpc	r23, r1
    2258:	81 05       	cpc	r24, r1
    225a:	91 05       	cpc	r25, r1
    225c:	f4 f0       	brlt	.+60     	; 0x229a <__vector_1+0x29c>
    225e:	38 c0       	rjmp	.+112    	; 0x22d0 <__vector_1+0x2d2>
	{
		if(g_use_rtc_to_start)
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
			{
				setupForFox(NULL);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <_Z11setupForFoxP5Fox_t>
				g_transmissions_disabled = FALSE;
    2268:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
    226c:	33 c0       	rjmp	.+102    	; 0x22d4 <__vector_1+0x2d6>
				id_countdown--;
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
			{
				g_fox_counter++;
    226e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    2272:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    227c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

				if(g_fox_counter > g_number_of_foxes)
    2280:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    2284:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    2288:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_number_of_foxes>
    228c:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_number_of_foxes+0x1>
    2290:	82 17       	cp	r24, r18
    2292:	93 07       	cpc	r25, r19
    2294:	0c f0       	brlt	.+2      	; 0x2298 <__vector_1+0x29a>
    2296:	a9 cf       	rjmp	.-174    	; 0x21ea <__vector_1+0x1ec>
    2298:	9c cf       	rjmp	.-200    	; 0x21d2 <__vector_1+0x1d4>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
			{
				g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    229a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_seconds_since_sync>
    229e:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_seconds_since_sync+0x1>
    22a2:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <g_seconds_since_sync+0x2>
    22a6:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <g_seconds_since_sync+0x3>
    22aa:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    22ae:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	65 5f       	subi	r22, 0xF5	; 245
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f 4f       	sbci	r24, 0xFF	; 255
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	03 2e       	mov	r0, r19
    22c0:	00 0c       	add	r0, r0
    22c2:	44 0b       	sbc	r20, r20
    22c4:	55 0b       	sbc	r21, r21
    22c6:	0e 94 1f 28 	call	0x503e	; 0x503e <__divmodsi4>
    22ca:	60 93 45 05 	sts	0x0545, r22	; 0x800545 <g_lastSeconds>
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <__vector_1+0x2d6>
			}
			else
			{
				g_lastSeconds = 0;
    22d0:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <g_lastSeconds>
			}
		}
	}
}   /* end of INT0 ISR */
    22d4:	ff 91       	pop	r31
    22d6:	ef 91       	pop	r30
    22d8:	bf 91       	pop	r27
    22da:	af 91       	pop	r26
    22dc:	9f 91       	pop	r25
    22de:	8f 91       	pop	r24
    22e0:	7f 91       	pop	r23
    22e2:	6f 91       	pop	r22
    22e4:	5f 91       	pop	r21
    22e6:	4f 91       	pop	r20
    22e8:	3f 91       	pop	r19
    22ea:	2f 91       	pop	r18
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <_Z12permCallsignPc>:
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
}

void permCallsign(char* call)
{
	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);
    22f6:	44 e1       	ldi	r20, 0x14	; 20
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	bc 01       	movw	r22, r24
    22fc:	89 e2       	ldi	r24, 0x29	; 41
    22fe:	95 e0       	ldi	r25, 0x05	; 5
    2300:	0e 94 ed 29 	call	0x53da	; 0x53da <strncpy>
	ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    2304:	49 e2       	ldi	r20, 0x29	; 41
    2306:	55 e0       	ldi	r21, 0x05	; 5
    2308:	6b e0       	ldi	r22, 0x0B	; 11
    230a:	8c e8       	ldi	r24, 0x8C	; 140
    230c:	95 e0       	ldi	r25, 0x05	; 5
    230e:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2312:	08 95       	ret

00002314 <_Z7permFox5Fox_t>:
}

void permFox(Fox_t fox)
{
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	1f 92       	push	r1
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	89 83       	std	Y+1, r24	; 0x01
	ee_mgr.updateEEPROMVar(Fox_setting, (void*)&fox);
    2320:	ae 01       	movw	r20, r28
    2322:	4f 5f       	subi	r20, 0xFF	; 255
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	6f e0       	ldi	r22, 0x0F	; 15
    2328:	8c e8       	ldi	r24, 0x8C	; 140
    232a:	95 e0       	ldi	r25, 0x05	; 5
    232c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
}
    2330:	0f 90       	pop	r0
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	08 95       	ret

00002338 <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
void processKey(char key)
{
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	1f 92       	push	r1
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
	static int digits;
	static int value;
	static int stringLength;
	static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };

	if(key == '*')
    2342:	8a 32       	cpi	r24, 0x2A	; 42
    2344:	99 f4       	brne	.+38     	; 0x236c <_Z10processKeyc+0x34>
	{
		state = STATE_SENTENCE_START;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    234e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    2352:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    2356:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ10processKeycE12stringLength>
			value = 0;
    235a:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE5value+0x1>
    235e:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE5value>
			digits = 0;
    2362:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    2366:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>
    236a:	aa c1       	rjmp	.+852    	; 0x26c0 <_Z10processKeyc+0x388>
	if(key == '*')
	{
		state = STATE_SENTENCE_START;
	}

	switch(state)
    236c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    2370:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2374:	31 97       	sbiw	r30, 0x01	; 1
    2376:	ed 30       	cpi	r30, 0x0D	; 13
    2378:	f1 05       	cpc	r31, r1
    237a:	08 f0       	brcs	.+2      	; 0x237e <_Z10processKeyc+0x46>
    237c:	a1 c1       	rjmp	.+834    	; 0x26c0 <_Z10processKeyc+0x388>
    237e:	ed 56       	subi	r30, 0x6D	; 109
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    2386:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    238a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ10processKeycE12stringLength>
			value = 0;
    238e:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE5value+0x1>
    2392:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE5value>
			digits = 0;
    2396:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    239a:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>

			if(key == 'C')
    239e:	83 34       	cpi	r24, 0x43	; 67
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <_Z10processKeyc+0x78>
			{
				state = STATE_C;
    23a2:	86 e0       	ldi	r24, 0x06	; 6
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23ae:	88 c1       	rjmp	.+784    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == 'A')
    23b0:	81 34       	cpi	r24, 0x41	; 65
    23b2:	39 f4       	brne	.+14     	; 0x23c2 <_Z10processKeyc+0x8a>
			{
				state = STATE_A;
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23c0:	7f c1       	rjmp	.+766    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key != '*')
    23c2:	8a 32       	cpi	r24, 0x2A	; 42
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <_Z10processKeyc+0x90>
    23c6:	7c c1       	rjmp	.+760    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				value = key - '0';
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	c0 97       	sbiw	r24, 0x30	; 48
    23cc:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    23d0:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
				setupPorts();
    23d4:	0e 94 92 04 	call	0x924	; 0x924 <_Z10setupPortsv>
				state = STATE_TEST_ATTENUATOR;
    23d8:	8d e0       	ldi	r24, 0x0D	; 13
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23e4:	6d c1       	rjmp	.+730    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_A:
		{
			if(key == '0')
    23e6:	80 33       	cpi	r24, 0x30	; 48
    23e8:	39 f4       	brne	.+14     	; 0x23f8 <_Z10processKeyc+0xc0>
			{
				state = STATE_PAUSE_TRANSMISSIONS;
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23f6:	64 c1       	rjmp	.+712    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '1')
    23f8:	81 33       	cpi	r24, 0x31	; 49
    23fa:	39 f4       	brne	.+14     	; 0x240a <_Z10processKeyc+0xd2>
			{
				state = STATE_START_TRANSMISSIONS;
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2404:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2408:	5b c1       	rjmp	.+694    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '2')
    240a:	82 33       	cpi	r24, 0x32	; 50
    240c:	09 f0       	breq	.+2      	; 0x2410 <_Z10processKeyc+0xd8>
    240e:	58 c1       	rjmp	.+688    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				state = STATE_RESTART_TRANSMISSIONS;
    2410:	85 e0       	ldi	r24, 0x05	; 5
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2418:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    241c:	51 c1       	rjmp	.+674    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_PAUSE_TRANSMISSIONS:
		{
			if(key == '#')
    241e:	83 32       	cpi	r24, 0x23	; 35
    2420:	09 f0       	breq	.+2      	; 0x2424 <_Z10processKeyc+0xec>
    2422:	4e c1       	rjmp	.+668    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				state = STATE_SHUTDOWN;
    2424:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2428:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    242c:	49 c1       	rjmp	.+658    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_C:
		{
			if(key == '1')
    242e:	81 33       	cpi	r24, 0x31	; 49
    2430:	39 f4       	brne	.+14     	; 0x2440 <_Z10processKeyc+0x108>
			{
				state = STATE_RECEIVING_CALLSIGN;
    2432:	87 e0       	ldi	r24, 0x07	; 7
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    243a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    243e:	40 c1       	rjmp	.+640    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '2')
    2440:	82 33       	cpi	r24, 0x32	; 50
    2442:	39 f4       	brne	.+14     	; 0x2452 <_Z10processKeyc+0x11a>
			{
				state = STATE_RECEIVING_FOXFORMATANDID;
    2444:	88 e0       	ldi	r24, 0x08	; 8
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    244c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2450:	37 c1       	rjmp	.+622    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '4')
    2452:	84 33       	cpi	r24, 0x34	; 52
    2454:	39 f4       	brne	.+14     	; 0x2464 <_Z10processKeyc+0x12c>
			{
				state = STATE_RECEIVING_START_TIME;
    2456:	89 e0       	ldi	r24, 0x09	; 9
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    245e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2462:	2e c1       	rjmp	.+604    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '5')
    2464:	85 33       	cpi	r24, 0x35	; 53
    2466:	39 f4       	brne	.+14     	; 0x2476 <_Z10processKeyc+0x13e>
			{
				state = STATE_RECEIVING_FINISH_TIME;
    2468:	8a e0       	ldi	r24, 0x0A	; 10
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2470:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2474:	25 c1       	rjmp	.+586    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '6')
    2476:	86 33       	cpi	r24, 0x36	; 54
    2478:	39 f4       	brne	.+14     	; 0x2488 <_Z10processKeyc+0x150>
			{
				state = STATE_RECEIVING_START_NOW;
    247a:	8b e0       	ldi	r24, 0x0B	; 11
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2482:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2486:	1c c1       	rjmp	.+568    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if(key == '7') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    2488:	87 33       	cpi	r24, 0x37	; 55
    248a:	39 f4       	brne	.+14     	; 0x249a <_Z10processKeyc+0x162>
			{
				state = STATE_RECEIVING_SET_CLOCK;
    248c:	8c e0       	ldi	r24, 0x0C	; 12
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2494:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2498:	13 c1       	rjmp	.+550    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else
			{
				state = STATE_SHUTDOWN;
    249a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    249e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    24a2:	0e c1       	rjmp	.+540    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_RECEIVING_CALLSIGN:
		{
			if(key == '#')
    24a4:	83 32       	cpi	r24, 0x23	; 35
    24a6:	71 f4       	brne	.+28     	; 0x24c4 <_Z10processKeyc+0x18c>
			{
				permCallsign(receivedString);
    24a8:	83 e6       	ldi	r24, 0x63	; 99
    24aa:	94 e0       	ldi	r25, 0x04	; 4
    24ac:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_Z12permCallsignPc>
				lb_send_string(receivedString,FALSE);
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	83 e6       	ldi	r24, 0x63	; 99
    24b4:	94 e0       	ldi	r25, 0x04	; 4
    24b6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
				state = STATE_SHUTDOWN;
    24ba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    24be:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    24c2:	fe c0       	rjmp	.+508    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if((key >= '0') && (key <= '9'))
    24c4:	90 ed       	ldi	r25, 0xD0	; 208
    24c6:	98 0f       	add	r25, r24
    24c8:	9a 30       	cpi	r25, 0x0A	; 10
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <_Z10processKeyc+0x196>
    24cc:	f9 c0       	rjmp	.+498    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				if(digits)
    24ce:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <_ZZ10processKeycE6digits>
    24d2:	30 91 79 04 	lds	r19, 0x0479	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    24d6:	23 2b       	or	r18, r19
    24d8:	c1 f1       	breq	.+112    	; 0x254a <_Z10processKeyc+0x212>
				{
					value = value * 10 + (key - '0');
    24da:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    24de:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    24e2:	a9 01       	movw	r20, r18
    24e4:	44 0f       	add	r20, r20
    24e6:	55 1f       	adc	r21, r21
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	22 0f       	add	r18, r18
    24ee:	33 1f       	adc	r19, r19
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	24 0f       	add	r18, r20
    24f6:	35 1f       	adc	r19, r21
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	c0 97       	sbiw	r24, 0x30	; 48
    24fc:	82 0f       	add	r24, r18
    24fe:	93 1f       	adc	r25, r19
    2500:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    2504:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
					if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    2508:	87 32       	cpi	r24, 0x27	; 39
    250a:	91 05       	cpc	r25, r1
    250c:	cc f4       	brge	.+50     	; 0x2540 <_Z10processKeyc+0x208>
    250e:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    2512:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    2516:	24 31       	cpi	r18, 0x14	; 20
    2518:	31 05       	cpc	r19, r1
    251a:	94 f4       	brge	.+36     	; 0x2540 <_Z10processKeyc+0x208>
					{
						receivedString[stringLength] = keyMorse[value];
    251c:	f9 01       	movw	r30, r18
    251e:	ed 59       	subi	r30, 0x9D	; 157
    2520:	fb 4f       	sbci	r31, 0xFB	; 251
    2522:	dc 01       	movw	r26, r24
    2524:	a8 5c       	subi	r26, 0xC8	; 200
    2526:	bd 4f       	sbci	r27, 0xFD	; 253
    2528:	8c 91       	ld	r24, X
    252a:	80 83       	st	Z, r24
						stringLength++;
    252c:	2f 5f       	subi	r18, 0xFF	; 255
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    2534:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    2538:	f9 01       	movw	r30, r18
    253a:	ed 59       	subi	r30, 0x9D	; 157
    253c:	fb 4f       	sbci	r31, 0xFB	; 251
    253e:	10 82       	st	Z, r1
					}

					digits = 0;
    2540:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    2544:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>
    2548:	bb c0       	rjmp	.+374    	; 0x26c0 <_Z10processKeyc+0x388>
				}
				else
				{
					value = key - '0';
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	c0 97       	sbiw	r24, 0x30	; 48
    254e:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    2552:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
					digits = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    255e:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE6digits>
    2562:	ae c0       	rjmp	.+348    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_RECEIVING_FOXFORMATANDID:
		{
			if(key == '#')
    2564:	83 32       	cpi	r24, 0x23	; 35
    2566:	c1 f4       	brne	.+48     	; 0x2598 <_Z10processKeyc+0x260>
			{
				if((value >= BEACON) && (value < INVALID_FOX))
    2568:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    256c:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    2570:	86 31       	cpi	r24, 0x16	; 22
    2572:	91 05       	cpc	r25, r1
    2574:	60 f4       	brcc	.+24     	; 0x258e <_Z10processKeyc+0x256>
				{
					Fox_t holdFox = (Fox_t)value;
    2576:	89 83       	std	Y+1, r24	; 0x01
					permFox(holdFox);
    2578:	0e 94 8a 11 	call	0x2314	; 0x2314 <_Z7permFox5Fox_t>
					if(holdFox != g_fox)
    257c:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    2580:	99 81       	ldd	r25, Y+1	; 0x01
    2582:	98 17       	cp	r25, r24
    2584:	21 f0       	breq	.+8      	; 0x258e <_Z10processKeyc+0x256>
					{
						setupForFox(&holdFox);
    2586:	ce 01       	movw	r24, r28
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <_Z11setupForFoxP5Fox_t>
					}
				}
				state = STATE_SHUTDOWN;
    258e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2592:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2596:	94 c0       	rjmp	.+296    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if((key >= '0') && (key <= '9'))
    2598:	90 ed       	ldi	r25, 0xD0	; 208
    259a:	98 0f       	add	r25, r24
    259c:	9a 30       	cpi	r25, 0x0A	; 10
    259e:	08 f0       	brcs	.+2      	; 0x25a2 <_Z10processKeyc+0x26a>
    25a0:	8f c0       	rjmp	.+286    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				value += key - '0';
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	c0 97       	sbiw	r24, 0x30	; 48
    25a6:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    25aa:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    25b6:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
    25ba:	82 c0       	rjmp	.+260    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_RECEIVING_START_TIME:
		{
			if(key == '#')
    25bc:	83 32       	cpi	r24, 0x23	; 35
    25be:	09 f0       	breq	.+2      	; 0x25c2 <_Z10processKeyc+0x28a>
    25c0:	7f c0       	rjmp	.+254    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				state = STATE_SHUTDOWN;
    25c2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25c6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25ca:	7a c0       	rjmp	.+244    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_RECEIVING_FINISH_TIME:
		{
			if(key == '#')
    25cc:	83 32       	cpi	r24, 0x23	; 35
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <_Z10processKeyc+0x29a>
    25d0:	77 c0       	rjmp	.+238    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				state = STATE_SHUTDOWN;
    25d2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25d6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25da:	72 c0       	rjmp	.+228    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_RECEIVING_START_NOW:
		{
			if(key == '#')
    25dc:	83 32       	cpi	r24, 0x23	; 35
    25de:	09 f0       	breq	.+2      	; 0x25e2 <_Z10processKeyc+0x2aa>
    25e0:	6f c0       	rjmp	.+222    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				state = STATE_SHUTDOWN;
    25e2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25e6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25ea:	6a c0       	rjmp	.+212    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_RECEIVING_SET_CLOCK:
		{
			if(key == '#')
    25ec:	83 32       	cpi	r24, 0x23	; 35
    25ee:	79 f4       	brne	.+30     	; 0x260e <_Z10processKeyc+0x2d6>
			{
				if(stringLength == 12)
    25f0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    25f4:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    25f8:	0c 97       	sbiw	r24, 0x0c	; 12
    25fa:	21 f4       	brne	.+8      	; 0x2604 <_Z10processKeyc+0x2cc>
				{
					rv3028_set_date_time(receivedString);   /* String format "YYMMDDhhmmss" */
    25fc:	83 e6       	ldi	r24, 0x63	; 99
    25fe:	94 e0       	ldi	r25, 0x04	; 4
    2600:	0e 94 ae 23 	call	0x475c	; 0x475c <_Z20rv3028_set_date_timePc>
				}

				state = STATE_SHUTDOWN;
    2604:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2608:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    260c:	59 c0       	rjmp	.+178    	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if((key >= '0') && (key <= '9'))
    260e:	90 ed       	ldi	r25, 0xD0	; 208
    2610:	98 0f       	add	r25, r24
    2612:	9a 30       	cpi	r25, 0x0A	; 10
    2614:	08 f0       	brcs	.+2      	; 0x2618 <_Z10processKeyc+0x2e0>
    2616:	54 c0       	rjmp	.+168    	; 0x26c0 <_Z10processKeyc+0x388>
			{
				if(stringLength < MAX_DTMF_ARG_LENGTH)
    2618:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    261c:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    2620:	28 32       	cpi	r18, 0x28	; 40
    2622:	31 05       	cpc	r19, r1
    2624:	0c f0       	brlt	.+2      	; 0x2628 <_Z10processKeyc+0x2f0>
    2626:	4c c0       	rjmp	.+152    	; 0x26c0 <_Z10processKeyc+0x388>
				{
					receivedString[stringLength] = key;
    2628:	f9 01       	movw	r30, r18
    262a:	ed 59       	subi	r30, 0x9D	; 157
    262c:	fb 4f       	sbci	r31, 0xFB	; 251
    262e:	80 83       	st	Z, r24
					stringLength++;
    2630:	2f 5f       	subi	r18, 0xFF	; 255
    2632:	3f 4f       	sbci	r19, 0xFF	; 255
    2634:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    2638:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <_ZZ10processKeycE12stringLength>
					receivedString[stringLength] = '\0';
    263c:	f9 01       	movw	r30, r18
    263e:	ed 59       	subi	r30, 0x9D	; 157
    2640:	fb 4f       	sbci	r31, 0xFB	; 251
    2642:	10 82       	st	Z, r1
    2644:	3d c0       	rjmp	.+122    	; 0x26c0 <_Z10processKeyc+0x388>
		}
		break;

		case STATE_TEST_ATTENUATOR:
		{
			if(key == '#')
    2646:	83 32       	cpi	r24, 0x23	; 35
    2648:	01 f5       	brne	.+64     	; 0x268a <_Z10processKeyc+0x352>
			{
				if(value == 0)
    264a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    264e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	41 f4       	brne	.+16     	; 0x2666 <_Z10processKeyc+0x32e>
				{
					setAtten(0);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z8setAttenj>
					// TIMSK1 |= (1 << OCIE1A); /* start timer 1 interrupts */
					g_sendAMmodulationConstantly = TRUE;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <g_sendAMmodulationConstantly>
    2664:	0d c0       	rjmp	.+26     	; 0x2680 <_Z10processKeyc+0x348>
				}
				else if(value > 315)
    2666:	8c 33       	cpi	r24, 0x3C	; 60
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	92 07       	cpc	r25, r18
    266c:	3c f0       	brlt	.+14     	; 0x267c <_Z10processKeyc+0x344>
				{
					g_sendAMmodulationConstantly = FALSE;
    266e:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <g_sendAMmodulationConstantly>
					// TIMSK1 &= ~(1 << OCIE1A); /* stop timer 1 interrupts */
					setAtten(315);
    2672:	8b e3       	ldi	r24, 0x3B	; 59
    2674:	91 e0       	ldi	r25, 0x01	; 1
    2676:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z8setAttenj>
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <_Z10processKeyc+0x348>
				}
				else
				{
					setAtten(value);
    267c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z8setAttenj>
				}

				state = STATE_SHUTDOWN;
    2680:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2684:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2688:	1b c0       	rjmp	.+54     	; 0x26c0 <_Z10processKeyc+0x388>
			}
			else if((key >= '0') && (key <= '9'))
    268a:	90 ed       	ldi	r25, 0xD0	; 208
    268c:	98 0f       	add	r25, r24
    268e:	9a 30       	cpi	r25, 0x0A	; 10
    2690:	b8 f4       	brcc	.+46     	; 0x26c0 <_Z10processKeyc+0x388>
			{
				value *= 10;
				value += key - '0';
    2692:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    2696:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    269a:	a9 01       	movw	r20, r18
    269c:	44 0f       	add	r20, r20
    269e:	55 1f       	adc	r21, r21
    26a0:	22 0f       	add	r18, r18
    26a2:	33 1f       	adc	r19, r19
    26a4:	22 0f       	add	r18, r18
    26a6:	33 1f       	adc	r19, r19
    26a8:	22 0f       	add	r18, r18
    26aa:	33 1f       	adc	r19, r19
    26ac:	24 0f       	add	r18, r20
    26ae:	35 1f       	adc	r19, r21
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	c0 97       	sbiw	r24, 0x30	; 48
    26b4:	82 0f       	add	r24, r18
    26b6:	93 1f       	adc	r25, r19
    26b8:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    26bc:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
			}
		}
		break;
	}
}
    26c0:	0f 90       	pop	r0
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    26c8:	ea e7       	ldi	r30, 0x7A	; 122
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	86 fd       	sbrc	r24, 6
    26d0:	fd cf       	rjmp	.-6      	; 0x26cc <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    26d2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    26d6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    26da:	ea e7       	ldi	r30, 0x7A	; 122
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	90 81       	ld	r25, Z
    26e0:	90 64       	ori	r25, 0x40	; 64
    26e2:	90 83       	st	Z, r25
	return( result);
}
    26e4:	c9 01       	movw	r24, r18
    26e6:	08 95       	ret

000026e8 <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    26e8:	88 ec       	ldi	r24, 0xC8	; 200
    26ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    26ee:	ea e7       	ldi	r30, 0x7A	; 122
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	87 e0       	ldi	r24, 0x07	; 7
    26f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    26f6:	80 81       	ld	r24, Z
    26f8:	80 68       	ori	r24, 0x80	; 128
    26fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    26fc:	80 81       	ld	r24, Z
    26fe:	80 64       	ori	r24, 0x40	; 64
    2700:	80 83       	st	Z, r24
	readADC();
    2702:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_Z7readADCv>
    2706:	08 95       	ret

00002708 <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
	float offset = CLAMP(-200.,(float)g_atmega_temp_calibration / 10.,200.);
    2710:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <g_atmega_temp_calibration>
    2714:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <g_atmega_temp_calibration+0x1>
    2718:	07 2e       	mov	r0, r23
    271a:	00 0c       	add	r0, r0
    271c:	88 0b       	sbc	r24, r24
    271e:	99 0b       	sbc	r25, r25
    2720:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__floatsisf>
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__divsf3>
    2730:	06 2f       	mov	r16, r22
    2732:	17 2f       	mov	r17, r23
    2734:	d8 2f       	mov	r29, r24
    2736:	c9 2f       	mov	r28, r25
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	48 e4       	ldi	r20, 0x48	; 72
    273e:	53 e4       	ldi	r21, 0x43	; 67
    2740:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__gesf2>
    2744:	18 16       	cp	r1, r24
    2746:	6c f0       	brlt	.+26     	; 0x2762 <_Z7getTempv+0x5a>
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	48 e4       	ldi	r20, 0x48	; 72
    274e:	53 ec       	ldi	r21, 0xC3	; 195
    2750:	60 2f       	mov	r22, r16
    2752:	71 2f       	mov	r23, r17
    2754:	8d 2f       	mov	r24, r29
    2756:	9c 2f       	mov	r25, r28
    2758:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__cmpsf2>
    275c:	88 23       	and	r24, r24
    275e:	34 f0       	brlt	.+12     	; 0x276c <_Z7getTempv+0x64>
    2760:	09 c0       	rjmp	.+18     	; 0x2774 <_Z7getTempv+0x6c>
    2762:	00 e0       	ldi	r16, 0x00	; 0
    2764:	10 e0       	ldi	r17, 0x00	; 0
    2766:	d8 e4       	ldi	r29, 0x48	; 72
    2768:	c3 e4       	ldi	r28, 0x43	; 67
    276a:	04 c0       	rjmp	.+8      	; 0x2774 <_Z7getTempv+0x6c>
    276c:	00 e0       	ldi	r16, 0x00	; 0
    276e:	10 e0       	ldi	r17, 0x00	; 0
    2770:	d8 e4       	ldi	r29, 0x48	; 72
    2772:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    2774:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    2778:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_Z7readADCv>
    277c:	bc 01       	movw	r22, r24
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <__floatunsisf>
    2786:	2e ea       	ldi	r18, 0xAE	; 174
    2788:	37 e2       	ldi	r19, 0x27	; 39
    278a:	42 ea       	ldi	r20, 0xA2	; 162
    278c:	53 e4       	ldi	r21, 0x43	; 67
    278e:	0e 94 bb 24 	call	0x4976	; 0x4976 <__subsf3>
    2792:	26 ef       	ldi	r18, 0xF6	; 246
    2794:	38 e2       	ldi	r19, 0x28	; 40
    2796:	4c e9       	ldi	r20, 0x9C	; 156
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__divsf3>
    279e:	20 2f       	mov	r18, r16
    27a0:	31 2f       	mov	r19, r17
    27a2:	4d 2f       	mov	r20, r29
    27a4:	5c 2f       	mov	r21, r28
    27a6:	0e 94 bc 24 	call	0x4978	; 0x4978 <__addsf3>
    27aa:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <round>
}
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	08 95       	ret

000027b8 <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    27b8:	ea e7       	ldi	r30, 0x7A	; 122
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    27be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    27c2:	ac e7       	ldi	r26, 0x7C	; 124
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    27c8:	9c 91       	ld	r25, X
    27ca:	96 60       	ori	r25, 0x06	; 6
    27cc:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    27ce:	9c 91       	ld	r25, X
    27d0:	90 6c       	ori	r25, 0xC0	; 192
    27d2:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    27d4:	9c 91       	ld	r25, X
    27d6:	90 62       	ori	r25, 0x20	; 32
    27d8:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    27da:	90 81       	ld	r25, Z
    27dc:	96 60       	ori	r25, 0x06	; 6
    27de:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    27e0:	90 81       	ld	r25, Z
    27e2:	90 62       	ori	r25, 0x20	; 32
    27e4:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    27e6:	90 81       	ld	r25, Z
    27e8:	98 60       	ori	r25, 0x08	; 8
    27ea:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    27ec:	90 81       	ld	r25, Z
    27ee:	90 68       	ori	r25, 0x80	; 128
    27f0:	90 83       	st	Z, r25

	if(enableSampling)
    27f2:	88 23       	and	r24, r24
    27f4:	31 f0       	breq	.+12     	; 0x2802 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    27f6:	80 81       	ld	r24, Z
    27f8:	88 60       	ori	r24, 0x08	; 8
    27fa:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    27fc:	80 81       	ld	r24, Z
    27fe:	80 64       	ori	r24, 0x40	; 64
    2800:	80 83       	st	Z, r24
    2802:	08 95       	ret

00002804 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2804:	fc 01       	movw	r30, r24
	while(*s)
    2806:	21 91       	ld	r18, Z+
    2808:	22 23       	and	r18, r18
    280a:	41 f0       	breq	.+16     	; 0x281c <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	20 53       	subi	r18, 0x30	; 48
    2810:	31 09       	sbc	r19, r1
    2812:	2a 30       	cpi	r18, 0x0A	; 10
    2814:	31 05       	cpc	r19, r1
    2816:	b8 f3       	brcs	.-18     	; 0x2806 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	08 95       	ret
		}
	}

	return( TRUE);
    281c:	81 e0       	ldi	r24, 0x01	; 1
}
    281e:	08 95       	ret

00002820 <_Z13startEventNowv>:

void startEventNow(void)
{
	setupForFox(NULL);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <_Z11setupForFoxP5Fox_t>
	g_transmissions_disabled = FALSE;
    2828:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
	lb_send_string((char*)"Sync OK\n",FALSE);
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	88 e2       	ldi	r24, 0x28	; 40
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    2836:	08 95       	ret

00002838 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	11 24       	eor	r1, r1
    2842:	2f 93       	push	r18
    2844:	3f 93       	push	r19
    2846:	4f 93       	push	r20
    2848:	5f 93       	push	r21
    284a:	6f 93       	push	r22
    284c:	7f 93       	push	r23
    284e:	8f 93       	push	r24
    2850:	9f 93       	push	r25
    2852:	af 93       	push	r26
    2854:	bf 93       	push	r27
    2856:	ef 93       	push	r30
    2858:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    285a:	84 e0       	ldi	r24, 0x04	; 4
    285c:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z11digitalReadh>

	if(pinVal)  /* Sync is high */
    2860:	88 23       	and	r24, r24
    2862:	71 f0       	breq	.+28     	; 0x2880 <__vector_5+0x48>
	{
		g_LEDs_Timed_Out = FALSE; /* Restart LEDs */
    2864:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <_ZL16g_LEDs_Timed_Out>

		if(g_sync_pin_stable)
    2868:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <g_sync_pin_stable>
    286c:	88 23       	and	r24, r24
    286e:	41 f0       	breq	.+16     	; 0x2880 <__vector_5+0x48>
		{
			startEventNow();
    2870:	0e 94 10 14 	call	0x2820	; 0x2820 <_Z13startEventNowv>
			g_sync_pin_stable = FALSE;
    2874:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_sync_pin_stable>
			digitalWrite(PIN_LED2, OFF);    /*  LED */
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	87 e0       	ldi	r24, 0x07	; 7
    287c:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
		}
	}

	g_sync_pin_timer = 0;
    2880:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <g_sync_pin_timer+0x1>
    2884:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_sync_pin_timer>
}
    2888:	ff 91       	pop	r31
    288a:	ef 91       	pop	r30
    288c:	bf 91       	pop	r27
    288e:	af 91       	pop	r26
    2890:	9f 91       	pop	r25
    2892:	8f 91       	pop	r24
    2894:	7f 91       	pop	r23
    2896:	6f 91       	pop	r22
    2898:	5f 91       	pop	r21
    289a:	4f 91       	pop	r20
    289c:	3f 91       	pop	r19
    289e:	2f 91       	pop	r18
    28a0:	0f 90       	pop	r0
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	0f 90       	pop	r0
    28a6:	1f 90       	pop	r1
    28a8:	18 95       	reti

000028aa <_Z18reportConfigErrorsv>:
	lb_send_string((char*)"Sync OK\n",FALSE);
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    28aa:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <g_messages_text+0x15>
    28ae:	81 11       	cpse	r24, r1
    28b0:	05 c0       	rjmp	.+10     	; 0x28bc <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    28b2:	65 e0       	ldi	r22, 0x05	; 5
    28b4:	8c e8       	ldi	r24, 0x8C	; 140
    28b6:	95 e0       	ldi	r25, 0x05	; 5
    28b8:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    28bc:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    28c0:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    28c4:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    28c8:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    28cc:	81 15       	cp	r24, r1
    28ce:	96 46       	sbci	r25, 0x66	; 102
    28d0:	ae 4e       	sbci	r26, 0xEE	; 238
    28d2:	bf 45       	sbci	r27, 0x5F	; 95
    28d4:	28 f4       	brcc	.+10     	; 0x28e0 <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    28d6:	62 e0       	ldi	r22, 0x02	; 2
    28d8:	8c e8       	ldi	r24, 0x8C	; 140
    28da:	95 e0       	ldi	r25, 0x05	; 5
    28dc:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)  /* Event has already finished */
    28e0:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <g_event_finish_epoch>
    28e4:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    28e8:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    28ec:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    28f0:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    28f4:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    28f8:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    28fc:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    2900:	48 17       	cp	r20, r24
    2902:	59 07       	cpc	r21, r25
    2904:	6a 07       	cpc	r22, r26
    2906:	7b 07       	cpc	r23, r27
    2908:	00 f5       	brcc	.+64     	; 0x294a <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    290a:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <g_event_start_epoch>
    290e:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    2912:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    2916:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    291a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    291e:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    2922:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    2926:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    292a:	48 17       	cp	r20, r24
    292c:	59 07       	cpc	r21, r25
    292e:	6a 07       	cpc	r22, r26
    2930:	7b 07       	cpc	r23, r27
    2932:	28 f4       	brcc	.+10     	; 0x293e <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    2934:	63 e0       	ldi	r22, 0x03	; 3
    2936:	8c e8       	ldi	r24, 0x8C	; 140
    2938:	95 e0       	ldi	r25, 0x05	; 5
    293a:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    293e:	64 e0       	ldi	r22, 0x04	; 4
    2940:	8c e8       	ldi	r24, 0x8C	; 140
    2942:	95 e0       	ldi	r25, 0x05	; 5
    2944:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2948:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    294a:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <g_event_start_epoch>
    294e:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    2952:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    2956:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    295a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    295e:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    2962:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    2966:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    296a:	48 17       	cp	r20, r24
    296c:	59 07       	cpc	r21, r25
    296e:	6a 07       	cpc	r22, r26
    2970:	7b 07       	cpc	r23, r27
    2972:	28 f4       	brcc	.+10     	; 0x297e <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char *)"Event running...\n", TRUE);
    2974:	61 e0       	ldi	r22, 0x01	; 1
    2976:	81 e3       	ldi	r24, 0x31	; 49
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    297e:	08 95       	ret

00002980 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
    2980:	2f 92       	push	r2
    2982:	3f 92       	push	r3
    2984:	4f 92       	push	r4
    2986:	5f 92       	push	r5
    2988:	6f 92       	push	r6
    298a:	7f 92       	push	r7
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	2c 97       	sbiw	r28, 0x0c	; 12
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	2b 01       	movw	r4, r22
    29b6:	3c 01       	movw	r6, r24
    29b8:	49 01       	movw	r8, r18
    29ba:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    29bc:	62 17       	cp	r22, r18
    29be:	73 07       	cpc	r23, r19
    29c0:	84 07       	cpc	r24, r20
    29c2:	95 07       	cpc	r25, r21
    29c4:	50 f0       	brcs	.+20     	; 0x29da <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    29c6:	e1 14       	cp	r14, r1
    29c8:	f1 04       	cpc	r15, r1
    29ca:	09 f4       	brne	.+2      	; 0x29ce <_Z14reportTimeTillmmPKcS0_+0x4e>
    29cc:	04 c1       	rjmp	.+520    	; 0x2bd6 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg,TRUE);
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	c7 01       	movw	r24, r14
    29d2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	ff c0       	rjmp	.+510    	; 0x2bd8 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg,TRUE);
		}
	}
	else
	{
		if(prefix)
    29da:	01 15       	cp	r16, r1
    29dc:	11 05       	cpc	r17, r1
    29de:	21 f0       	breq	.+8      	; 0x29e8 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix,TRUE);
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	c8 01       	movw	r24, r16
    29e4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    29e8:	75 01       	movw	r14, r10
    29ea:	64 01       	movw	r12, r8
    29ec:	c4 18       	sub	r12, r4
    29ee:	d5 08       	sbc	r13, r5
    29f0:	e6 08       	sbc	r14, r6
    29f2:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    29f4:	c7 01       	movw	r24, r14
    29f6:	b6 01       	movw	r22, r12
    29f8:	20 e8       	ldi	r18, 0x80	; 128
    29fa:	33 e3       	ldi	r19, 0x33	; 51
    29fc:	41 ee       	ldi	r20, 0xE1	; 225
    29fe:	51 e0       	ldi	r21, 0x01	; 1
    2a00:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__udivmodsi4>
    2a04:	29 01       	movw	r4, r18
    2a06:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2a08:	44 27       	eor	r20, r20
    2a0a:	55 27       	eor	r21, r21
    2a0c:	60 e8       	ldi	r22, 0x80	; 128
    2a0e:	73 e3       	ldi	r23, 0x33	; 51
    2a10:	81 ee       	ldi	r24, 0xE1	; 225
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__mulsi3>
    2a18:	c6 1a       	sub	r12, r22
    2a1a:	d7 0a       	sbc	r13, r23
    2a1c:	e8 0a       	sbc	r14, r24
    2a1e:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2a20:	c7 01       	movw	r24, r14
    2a22:	b6 01       	movw	r22, r12
    2a24:	20 e8       	ldi	r18, 0x80	; 128
    2a26:	31 e5       	ldi	r19, 0x51	; 81
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__udivmodsi4>
    2a30:	49 01       	movw	r8, r18
    2a32:	5a 01       	movw	r10, r20
    2a34:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2a36:	44 27       	eor	r20, r20
    2a38:	55 27       	eor	r21, r21
    2a3a:	60 e8       	ldi	r22, 0x80	; 128
    2a3c:	71 e5       	ldi	r23, 0x51	; 81
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__mulsi3>
    2a46:	c6 1a       	sub	r12, r22
    2a48:	d7 0a       	sbc	r13, r23
    2a4a:	e8 0a       	sbc	r14, r24
    2a4c:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2a4e:	c7 01       	movw	r24, r14
    2a50:	b6 01       	movw	r22, r12
    2a52:	20 e1       	ldi	r18, 0x10	; 16
    2a54:	3e e0       	ldi	r19, 0x0E	; 14
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__udivmodsi4>
    2a5e:	29 83       	std	Y+1, r18	; 0x01
    2a60:	3a 83       	std	Y+2, r19	; 0x02
    2a62:	4b 83       	std	Y+3, r20	; 0x03
    2a64:	5c 83       	std	Y+4, r21	; 0x04
    2a66:	29 81       	ldd	r18, Y+1	; 0x01
    2a68:	3a 81       	ldd	r19, Y+2	; 0x02
    2a6a:	3a 87       	std	Y+10, r19	; 0x0a
    2a6c:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2a6e:	29 81       	ldd	r18, Y+1	; 0x01
    2a70:	3a 81       	ldd	r19, Y+2	; 0x02
    2a72:	4b 81       	ldd	r20, Y+3	; 0x03
    2a74:	5c 81       	ldd	r21, Y+4	; 0x04
    2a76:	44 27       	eor	r20, r20
    2a78:	55 27       	eor	r21, r21
    2a7a:	a0 e1       	ldi	r26, 0x10	; 16
    2a7c:	be e0       	ldi	r27, 0x0E	; 14
    2a7e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__muluhisi3>
    2a82:	c6 1a       	sub	r12, r22
    2a84:	d7 0a       	sbc	r13, r23
    2a86:	e8 0a       	sbc	r14, r24
    2a88:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    2a8a:	c7 01       	movw	r24, r14
    2a8c:	b6 01       	movw	r22, r12
    2a8e:	2c e3       	ldi	r18, 0x3C	; 60
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__udivmodsi4>
    2a9a:	2d 83       	std	Y+5, r18	; 0x05
    2a9c:	3e 83       	std	Y+6, r19	; 0x06
    2a9e:	4f 83       	std	Y+7, r20	; 0x07
    2aa0:	58 87       	std	Y+8, r21	; 0x08
    2aa2:	0d 81       	ldd	r16, Y+5	; 0x05
    2aa4:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2aa6:	2c e3       	ldi	r18, 0x3C	; 60
    2aa8:	20 9f       	mul	r18, r16
    2aaa:	c0 01       	movw	r24, r0
    2aac:	21 9f       	mul	r18, r17
    2aae:	90 0d       	add	r25, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	a6 01       	movw	r20, r12
    2ab4:	48 1b       	sub	r20, r24
    2ab6:	59 0b       	sbc	r21, r25
    2ab8:	5c 87       	std	Y+12, r21	; 0x0c
    2aba:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    2abc:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_tempStr>

		if(years)
    2ac0:	41 14       	cp	r4, r1
    2ac2:	51 04       	cpc	r5, r1
    2ac4:	b9 f0       	breq	.+46     	; 0x2af4 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr,"%d yrs ",years);
    2ac6:	5f 92       	push	r5
    2ac8:	4f 92       	push	r4
    2aca:	83 e4       	ldi	r24, 0x43	; 67
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	9f 93       	push	r25
    2ad0:	8f 93       	push	r24
    2ad2:	8b ed       	ldi	r24, 0xDB	; 219
    2ad4:	94 e0       	ldi	r25, 0x04	; 4
    2ad6:	9f 93       	push	r25
    2ad8:	8f 93       	push	r24
    2ada:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2ade:	61 e0       	ldi	r22, 0x01	; 1
    2ae0:	8b ed       	ldi	r24, 0xDB	; 219
    2ae2:	94 e0       	ldi	r25, 0x04	; 4
    2ae4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
		}

		if(days)
    2af4:	23 28       	or	r2, r3
    2af6:	b9 f0       	breq	.+46     	; 0x2b26 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr,"%d days ",days);
    2af8:	9f 92       	push	r9
    2afa:	8f 92       	push	r8
    2afc:	8b e4       	ldi	r24, 0x4B	; 75
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	9f 93       	push	r25
    2b02:	8f 93       	push	r24
    2b04:	8b ed       	ldi	r24, 0xDB	; 219
    2b06:	94 e0       	ldi	r25, 0x04	; 4
    2b08:	9f 93       	push	r25
    2b0a:	8f 93       	push	r24
    2b0c:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	8b ed       	ldi	r24, 0xDB	; 219
    2b14:	94 e0       	ldi	r25, 0x04	; 4
    2b16:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
		}

		if(hours)
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	89 2b       	or	r24, r25
    2b2c:	c9 f0       	breq	.+50     	; 0x2b60 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr,"%d hrs ",hours);
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	9f 93       	push	r25
    2b32:	e9 81       	ldd	r30, Y+1	; 0x01
    2b34:	ef 93       	push	r30
    2b36:	84 e5       	ldi	r24, 0x54	; 84
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	9f 93       	push	r25
    2b3c:	8f 93       	push	r24
    2b3e:	8b ed       	ldi	r24, 0xDB	; 219
    2b40:	94 e0       	ldi	r25, 0x04	; 4
    2b42:	9f 93       	push	r25
    2b44:	8f 93       	push	r24
    2b46:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	8b ed       	ldi	r24, 0xDB	; 219
    2b4e:	94 e0       	ldi	r25, 0x04	; 4
    2b50:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
		}

		if(minutes)
    2b60:	01 2b       	or	r16, r17
    2b62:	c9 f0       	breq	.+50     	; 0x2b96 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr,"%d min ",minutes);
    2b64:	fe 81       	ldd	r31, Y+6	; 0x06
    2b66:	ff 93       	push	r31
    2b68:	2d 81       	ldd	r18, Y+5	; 0x05
    2b6a:	2f 93       	push	r18
    2b6c:	8c e5       	ldi	r24, 0x5C	; 92
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	9f 93       	push	r25
    2b72:	8f 93       	push	r24
    2b74:	8b ed       	ldi	r24, 0xDB	; 219
    2b76:	94 e0       	ldi	r25, 0x04	; 4
    2b78:	9f 93       	push	r25
    2b7a:	8f 93       	push	r24
    2b7c:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2b80:	61 e0       	ldi	r22, 0x01	; 1
    2b82:	8b ed       	ldi	r24, 0xDB	; 219
    2b84:	94 e0       	ldi	r25, 0x04	; 4
    2b86:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
		}

		sprintf(g_tempStr,"%d sec",seconds);
    2b96:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b98:	3f 93       	push	r19
    2b9a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b9c:	4f 93       	push	r20
    2b9e:	84 e6       	ldi	r24, 0x64	; 100
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	9f 93       	push	r25
    2ba4:	8f 93       	push	r24
    2ba6:	8b ed       	ldi	r24, 0xDB	; 219
    2ba8:	94 e0       	ldi	r25, 0x04	; 4
    2baa:	9f 93       	push	r25
    2bac:	8f 93       	push	r24
    2bae:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
		lb_send_string(g_tempStr,TRUE);
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	8b ed       	ldi	r24, 0xDB	; 219
    2bb6:	94 e0       	ldi	r25, 0x04	; 4
    2bb8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2bbc:	0e 94 4f 09 	call	0x129e	; 0x129e <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2bc0:	eb ed       	ldi	r30, 0xDB	; 219
    2bc2:	f4 e0       	ldi	r31, 0x04	; 4
    2bc4:	10 82       	st	Z, r1
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
	BOOL failure = FALSE;
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	01 c0       	rjmp	.+2      	; 0x2bd8 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2bd8:	2c 96       	adiw	r28, 0x0c	; 12
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	bf 90       	pop	r11
    2bf6:	af 90       	pop	r10
    2bf8:	9f 90       	pop	r9
    2bfa:	8f 90       	pop	r8
    2bfc:	7f 90       	pop	r7
    2bfe:	6f 90       	pop	r6
    2c00:	5f 90       	pop	r5
    2c02:	4f 90       	pop	r4
    2c04:	3f 90       	pop	r3
    2c06:	2f 90       	pop	r2
    2c08:	08 95       	ret

00002c0a <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2c0a:	2f 92       	push	r2
    2c0c:	3f 92       	push	r3
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	6f 92       	push	r6
    2c14:	7f 92       	push	r7
    2c16:	8f 92       	push	r8
    2c18:	9f 92       	push	r9
    2c1a:	af 92       	push	r10
    2c1c:	bf 92       	push	r11
    2c1e:	cf 92       	push	r12
    2c20:	df 92       	push	r13
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	28 97       	sbiw	r28, 0x08	; 8
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2c3e:	0f 2e       	mov	r0, r31
    2c40:	f2 e8       	ldi	r31, 0x82	; 130
    2c42:	6f 2e       	mov	r6, r31
    2c44:	f1 e0       	ldi	r31, 0x01	; 1
    2c46:	7f 2e       	mov	r7, r31
    2c48:	f0 2d       	mov	r31, r0
    2c4a:	0f 2e       	mov	r0, r31
    2c4c:	fb ed       	ldi	r31, 0xDB	; 219
    2c4e:	af 2e       	mov	r10, r31
    2c50:	f4 e0       	ldi	r31, 0x04	; 4
    2c52:	bf 2e       	mov	r11, r31
    2c54:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
					lb_send_string(g_tempStr,FALSE);
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    2c56:	0f 2e       	mov	r0, r31
    2c58:	f6 e0       	ldi	r31, 0x06	; 6
    2c5a:	8f 2e       	mov	r8, r31
    2c5c:	f2 e0       	ldi	r31, 0x02	; 2
    2c5e:	9f 2e       	mov	r9, r31
    2c60:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    2c62:	0f 2e       	mov	r0, r31
    2c64:	f3 ec       	ldi	r31, 0xC3	; 195
    2c66:	4f 2e       	mov	r4, r31
    2c68:	f1 e0       	ldi	r31, 0x01	; 1
    2c6a:	5f 2e       	mov	r5, r31
    2c6c:	f0 2d       	mov	r31, r0
							setupForFox(&holdFox);
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2c6e:	0f 2e       	mov	r0, r31
    2c70:	f2 e7       	ldi	r31, 0x72	; 114
    2c72:	2f 2e       	mov	r2, r31
    2c74:	f1 e0       	ldi	r31, 0x01	; 1
    2c76:	3f 2e       	mov	r3, r31
    2c78:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2c7a:	0e 94 80 08 	call	0x1100	; 0x1100 <_Z16nextFullRxBufferv>
    2c7e:	6c 01       	movw	r12, r24
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <_Z17handleLinkBusMsgsv+0x7c>
    2c84:	b0 c5       	rjmp	.+2912   	; 0x37e6 <_Z17handleLinkBusMsgsv+0xbdc>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2c86:	fc 01       	movw	r30, r24
    2c88:	81 81       	ldd	r24, Z+1	; 0x01
    2c8a:	92 81       	ldd	r25, Z+2	; 0x02
    2c8c:	8a 39       	cpi	r24, 0x9A	; 154
    2c8e:	f3 e2       	ldi	r31, 0x23	; 35
    2c90:	9f 07       	cpc	r25, r31
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <_Z17handleLinkBusMsgsv+0x8c>
    2c94:	90 c5       	rjmp	.+2848   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
    2c96:	c8 f4       	brcc	.+50     	; 0x2cca <_Z17handleLinkBusMsgsv+0xc0>
    2c98:	85 32       	cpi	r24, 0x25	; 37
    2c9a:	3e e1       	ldi	r19, 0x1E	; 30
    2c9c:	93 07       	cpc	r25, r19
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <_Z17handleLinkBusMsgsv+0x98>
    2ca0:	8a c5       	rjmp	.+2836   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
    2ca2:	50 f4       	brcc	.+20     	; 0x2cb8 <_Z17handleLinkBusMsgsv+0xae>
    2ca4:	8e 31       	cpi	r24, 0x1E	; 30
    2ca6:	e3 e0       	ldi	r30, 0x03	; 3
    2ca8:	9e 07       	cpc	r25, r30
    2caa:	09 f4       	brne	.+2      	; 0x2cae <_Z17handleLinkBusMsgsv+0xa4>
    2cac:	ca c1       	rjmp	.+916    	; 0x3042 <_Z17handleLinkBusMsgsv+0x438>
    2cae:	8f 36       	cpi	r24, 0x6F	; 111
    2cb0:	9d 41       	sbci	r25, 0x1D	; 29
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <_Z17handleLinkBusMsgsv+0xac>
    2cb4:	91 c2       	rjmp	.+1314   	; 0x31d8 <_Z17handleLinkBusMsgsv+0x5ce>
    2cb6:	7b c5       	rjmp	.+2806   	; 0x37ae <_Z17handleLinkBusMsgsv+0xba4>
    2cb8:	86 3c       	cpi	r24, 0xC6	; 198
    2cba:	2e e1       	ldi	r18, 0x1E	; 30
    2cbc:	92 07       	cpc	r25, r18
    2cbe:	f9 f0       	breq	.+62     	; 0x2cfe <_Z17handleLinkBusMsgsv+0xf4>
    2cc0:	86 3a       	cpi	r24, 0xA6	; 166
    2cc2:	90 42       	sbci	r25, 0x20	; 32
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <_Z17handleLinkBusMsgsv+0xbe>
    2cc6:	c5 c0       	rjmp	.+394    	; 0x2e52 <_Z17handleLinkBusMsgsv+0x248>
    2cc8:	72 c5       	rjmp	.+2788   	; 0x37ae <_Z17handleLinkBusMsgsv+0xba4>
    2cca:	85 3f       	cpi	r24, 0xF5	; 245
    2ccc:	43 e2       	ldi	r20, 0x23	; 35
    2cce:	94 07       	cpc	r25, r20
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <_Z17handleLinkBusMsgsv+0xca>
    2cd2:	06 c1       	rjmp	.+524    	; 0x2ee0 <_Z17handleLinkBusMsgsv+0x2d6>
    2cd4:	50 f4       	brcc	.+20     	; 0x2cea <_Z17handleLinkBusMsgsv+0xe0>
    2cd6:	8f 3c       	cpi	r24, 0xCF	; 207
    2cd8:	f3 e2       	ldi	r31, 0x23	; 35
    2cda:	9f 07       	cpc	r25, r31
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <_Z17handleLinkBusMsgsv+0xd6>
    2cde:	1a c5       	rjmp	.+2612   	; 0x3714 <_Z17handleLinkBusMsgsv+0xb0a>
    2ce0:	80 3d       	cpi	r24, 0xD0	; 208
    2ce2:	93 42       	sbci	r25, 0x23	; 35
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <_Z17handleLinkBusMsgsv+0xde>
    2ce6:	1c c2       	rjmp	.+1080   	; 0x3120 <_Z17handleLinkBusMsgsv+0x516>
    2ce8:	62 c5       	rjmp	.+2756   	; 0x37ae <_Z17handleLinkBusMsgsv+0xba4>
    2cea:	84 33       	cpi	r24, 0x34	; 52
    2cec:	34 e2       	ldi	r19, 0x24	; 36
    2cee:	93 07       	cpc	r25, r19
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <_Z17handleLinkBusMsgsv+0xea>
    2cf2:	2c c1       	rjmp	.+600    	; 0x2f4c <_Z17handleLinkBusMsgsv+0x342>
    2cf4:	8c 39       	cpi	r24, 0x9C	; 156
    2cf6:	94 42       	sbci	r25, 0x24	; 36
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <_Z17handleLinkBusMsgsv+0xf2>
    2cfa:	68 c2       	rjmp	.+1232   	; 0x31cc <_Z17handleLinkBusMsgsv+0x5c2>
    2cfc:	58 c5       	rjmp	.+2736   	; 0x37ae <_Z17handleLinkBusMsgsv+0xba4>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2cfe:	f6 01       	movw	r30, r12
    2d00:	83 81       	ldd	r24, Z+3	; 0x03
    2d02:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <_Z17handleLinkBusMsgsv+0x100>
    2d08:	8f c0       	rjmp	.+286    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
				{
					if(c == 'B')
    2d0a:	82 34       	cpi	r24, 0x42	; 66
    2d0c:	91 05       	cpc	r25, r1
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <_Z17handleLinkBusMsgsv+0x108>
    2d10:	58 c5       	rjmp	.+2736   	; 0x37c2 <_Z17handleLinkBusMsgsv+0xbb8>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2d12:	84 34       	cpi	r24, 0x44	; 68
    2d14:	91 05       	cpc	r25, r1
    2d16:	39 f4       	brne	.+14     	; 0x2d26 <_Z17handleLinkBusMsgsv+0x11c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2d18:	87 89       	ldd	r24, Z+23	; 0x17
    2d1a:	83 35       	cpi	r24, 0x53	; 83
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <_Z17handleLinkBusMsgsv+0x116>
    2d1e:	54 c5       	rjmp	.+2728   	; 0x37c8 <_Z17handleLinkBusMsgsv+0xbbe>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2d20:	86 e0       	ldi	r24, 0x06	; 6
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	75 c0       	rjmp	.+234    	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else if(c == 'F')
    2d26:	86 34       	cpi	r24, 0x46	; 70
    2d28:	91 05       	cpc	r25, r1
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <_Z17handleLinkBusMsgsv+0x124>
    2d2c:	50 c5       	rjmp	.+2720   	; 0x37ce <_Z17handleLinkBusMsgsv+0xbc4>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2d2e:	83 34       	cpi	r24, 0x43	; 67
    2d30:	91 05       	cpc	r25, r1
    2d32:	c9 f4       	brne	.+50     	; 0x2d66 <_Z17handleLinkBusMsgsv+0x15c>
					{
						char t = lb_buff->fields[FIELD2][0];
    2d34:	f6 01       	movw	r30, r12
    2d36:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2d38:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2d3a:	82 34       	cpi	r24, 0x42	; 66
    2d3c:	29 f0       	breq	.+10     	; 0x2d48 <_Z17handleLinkBusMsgsv+0x13e>
						{
							t = '0';
						}

						if(isdigit(t))
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	c0 97       	sbiw	r24, 0x30	; 48
    2d42:	0a 97       	sbiw	r24, 0x0a	; 10
    2d44:	08 f0       	brcs	.+2      	; 0x2d48 <_Z17handleLinkBusMsgsv+0x13e>
    2d46:	70 c0       	rjmp	.+224    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
						{
							c = CLAMP(BEACON,atoi(lb_buff->fields[FIELD2]),FOX_5);
    2d48:	c6 01       	movw	r24, r12
    2d4a:	47 96       	adiw	r24, 0x17	; 23
    2d4c:	0e 94 8e 29 	call	0x531c	; 0x531c <atoi>
    2d50:	99 23       	and	r25, r25
    2d52:	14 f4       	brge	.+4      	; 0x2d58 <_Z17handleLinkBusMsgsv+0x14e>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	86 30       	cpi	r24, 0x06	; 6
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	0c f4       	brge	.+2      	; 0x2d60 <_Z17handleLinkBusMsgsv+0x156>
    2d5e:	55 c0       	rjmp	.+170    	; 0x2e0a <_Z17handleLinkBusMsgsv+0x200>
    2d60:	85 e0       	ldi	r24, 0x05	; 5
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	52 c0       	rjmp	.+164    	; 0x2e0a <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'S')
    2d66:	83 35       	cpi	r24, 0x53	; 83
    2d68:	91 05       	cpc	r25, r1
    2d6a:	e9 f5       	brne	.+122    	; 0x2de6 <_Z17handleLinkBusMsgsv+0x1dc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2d6c:	f6 01       	movw	r30, r12
    2d6e:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2d70:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2d72:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2d74:	82 34       	cpi	r24, 0x42	; 66
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <_Z17handleLinkBusMsgsv+0x170>
    2d78:	57 c0       	rjmp	.+174    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2d7a:	86 34       	cpi	r24, 0x46	; 70
    2d7c:	49 f4       	brne	.+18     	; 0x2d90 <_Z17handleLinkBusMsgsv+0x186>
						{
							if((u > '0') && (u < '6'))
    2d7e:	8f ec       	ldi	r24, 0xCF	; 207
    2d80:	89 0f       	add	r24, r25
    2d82:	85 30       	cpi	r24, 0x05	; 5
    2d84:	08 f0       	brcs	.+2      	; 0x2d88 <_Z17handleLinkBusMsgsv+0x17e>
    2d86:	50 c0       	rjmp	.+160    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (u - '1');
    2d88:	89 2f       	mov	r24, r25
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	83 97       	sbiw	r24, 0x23	; 35
    2d8e:	1b c0       	rjmp	.+54     	; 0x2dc6 <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(t == 'S')
    2d90:	83 35       	cpi	r24, 0x53	; 83
    2d92:	41 f4       	brne	.+16     	; 0x2da4 <_Z17handleLinkBusMsgsv+0x19a>
						{
							if((u > '0') && (u < '6'))
    2d94:	8f ec       	ldi	r24, 0xCF	; 207
    2d96:	89 0f       	add	r24, r25
    2d98:	85 30       	cpi	r24, 0x05	; 5
    2d9a:	c0 f4       	brcc	.+48     	; 0x2dcc <_Z17handleLinkBusMsgsv+0x1c2>
							{
								x = SPRINT_S1 + (u - '1');
    2d9c:	89 2f       	mov	r24, r25
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	88 97       	sbiw	r24, 0x28	; 40
    2da2:	11 c0       	rjmp	.+34     	; 0x2dc6 <_Z17handleLinkBusMsgsv+0x1bc>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2da4:	96 34       	cpi	r25, 0x46	; 70
    2da6:	39 f4       	brne	.+14     	; 0x2db6 <_Z17handleLinkBusMsgsv+0x1ac>
						{
							if((t > '0') && (t < '6'))
    2da8:	9f ec       	ldi	r25, 0xCF	; 207
    2daa:	98 0f       	add	r25, r24
    2dac:	95 30       	cpi	r25, 0x05	; 5
    2dae:	e0 f5       	brcc	.+120    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (t - '1');
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	83 97       	sbiw	r24, 0x23	; 35
    2db4:	08 c0       	rjmp	.+16     	; 0x2dc6 <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(u == 'S')
    2db6:	93 35       	cpi	r25, 0x53	; 83
    2db8:	b9 f5       	brne	.+110    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
						{
							if((t > '0') && (t < '6'))
    2dba:	9f ec       	ldi	r25, 0xCF	; 207
    2dbc:	98 0f       	add	r25, r24
    2dbe:	95 30       	cpi	r25, 0x05	; 5
    2dc0:	98 f5       	brcc	.+102    	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (t - '1');
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	19 f4       	brne	.+6      	; 0x2dd0 <_Z17handleLinkBusMsgsv+0x1c6>
    2dca:	2e c0       	rjmp	.+92     	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2dcc:	88 e0       	ldi	r24, 0x08	; 8
    2dce:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR,x,SPRINT_F5);
    2dd0:	88 30       	cpi	r24, 0x08	; 8
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	14 f4       	brge	.+4      	; 0x2dda <_Z17handleLinkBusMsgsv+0x1d0>
    2dd6:	88 e0       	ldi	r24, 0x08	; 8
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	83 31       	cpi	r24, 0x13	; 19
    2ddc:	91 05       	cpc	r25, r1
    2dde:	ac f0       	brlt	.+42     	; 0x2e0a <_Z17handleLinkBusMsgsv+0x200>
    2de0:	82 e1       	ldi	r24, 0x12	; 18
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	12 c0       	rjmp	.+36     	; 0x2e0a <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'N')
    2de6:	8e 34       	cpi	r24, 0x4E	; 78
    2de8:	91 05       	cpc	r25, r1
    2dea:	59 f4       	brne	.+22     	; 0x2e02 <_Z17handleLinkBusMsgsv+0x1f8>
					{
						char t = lb_buff->fields[FIELD2][0];
    2dec:	f6 01       	movw	r30, r12
    2dee:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2df0:	82 33       	cpi	r24, 0x32	; 50
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <_Z17handleLinkBusMsgsv+0x1ec>
    2df4:	ee c4       	rjmp	.+2524   	; 0x37d2 <_Z17handleLinkBusMsgsv+0xbc8>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2df6:	85 33       	cpi	r24, 0x35	; 53
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <_Z17handleLinkBusMsgsv+0x1f2>
    2dfa:	ed c4       	rjmp	.+2522   	; 0x37d6 <_Z17handleLinkBusMsgsv+0xbcc>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	07 c0       	rjmp	.+14     	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2e02:	c6 01       	movw	r24, r12
    2e04:	03 96       	adiw	r24, 0x03	; 3
    2e06:	0e 94 8e 29 	call	0x531c	; 0x531c <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2e0a:	86 31       	cpi	r24, 0x16	; 22
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	60 f4       	brcc	.+24     	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
					{
						Fox_t holdFox = (Fox_t)c;
    2e10:	89 83       	std	Y+1, r24	; 0x01
						permFox(holdFox);
    2e12:	0e 94 8a 11 	call	0x2314	; 0x2314 <_Z7permFox5Fox_t>
						if(holdFox != g_fox)
    2e16:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    2e1a:	99 81       	ldd	r25, Y+1	; 0x01
    2e1c:	98 17       	cp	r25, r24
    2e1e:	21 f0       	breq	.+8      	; 0x2e28 <_Z17handleLinkBusMsgsv+0x21e>
						{
							setupForFox(&holdFox);
    2e20:	ce 01       	movw	r24, r28
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2e28:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    2e2c:	1f 92       	push	r1
    2e2e:	8f 93       	push	r24
    2e30:	3f 92       	push	r3
    2e32:	2f 92       	push	r2
    2e34:	bf 92       	push	r11
    2e36:	af 92       	push	r10
    2e38:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	c5 01       	movw	r24, r10
    2e40:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
			}
			break;
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	b2 c4       	rjmp	.+2404   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    2e52:	f6 01       	movw	r30, r12
    2e54:	83 81       	ldd	r24, Z+3	; 0x03
    2e56:	88 23       	and	r24, r24
    2e58:	09 f1       	breq	.+66     	; 0x2e9c <_Z17handleLinkBusMsgsv+0x292>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2e5a:	94 81       	ldd	r25, Z+4	; 0x04
    2e5c:	96 34       	cpi	r25, 0x46	; 70
    2e5e:	11 f0       	breq	.+4      	; 0x2e64 <_Z17handleLinkBusMsgsv+0x25a>
    2e60:	80 33       	cpi	r24, 0x30	; 48
    2e62:	59 f4       	brne	.+22     	; 0x2e7a <_Z17handleLinkBusMsgsv+0x270>
					{
						g_enable_LEDs = FALSE;
    2e64:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <g_enable_LEDs>
						digitalWrite(PIN_LED1,OFF); /*  LED Off */
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	8d e0       	ldi	r24, 0x0D	; 13
    2e6c:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
						digitalWrite(PIN_LED2,OFF);
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	87 e0       	ldi	r24, 0x07	; 7
    2e74:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
    2e78:	03 c0       	rjmp	.+6      	; 0x2e80 <_Z17handleLinkBusMsgsv+0x276>
					}
					else
					{
						g_enable_LEDs = TRUE;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_enable_LEDs>
					}

					ee_mgr.updateEEPROMVar(Enable_LEDs, (void*)&g_enable_LEDs);
    2e80:	41 e1       	ldi	r20, 0x11	; 17
    2e82:	55 e0       	ldi	r21, 0x05	; 5
    2e84:	60 e1       	ldi	r22, 0x10	; 16
    2e86:	8c e8       	ldi	r24, 0x8C	; 140
    2e88:	95 e0       	ldi	r25, 0x05	; 5
    2e8a:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    2e8e:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <g_enable_LEDs>
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	91 11       	cpse	r25, r1
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr,"LED:%s\n",g_enable_LEDs ? "ON" : "OFF");
    2e9c:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <g_enable_LEDs>
    2ea0:	81 11       	cpse	r24, r1
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <_Z17handleLinkBusMsgsv+0x2a4>
    2ea4:	2e e6       	ldi	r18, 0x6E	; 110
    2ea6:	31 e0       	ldi	r19, 0x01	; 1
    2ea8:	82 2f       	mov	r24, r18
    2eaa:	93 2f       	mov	r25, r19
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <_Z17handleLinkBusMsgsv+0x2ac>
    2eae:	eb e6       	ldi	r30, 0x6B	; 107
    2eb0:	f1 e0       	ldi	r31, 0x01	; 1
    2eb2:	8e 2f       	mov	r24, r30
    2eb4:	9f 2f       	mov	r25, r31
    2eb6:	9f 93       	push	r25
    2eb8:	8f 93       	push	r24
    2eba:	8a e7       	ldi	r24, 0x7A	; 122
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	9f 93       	push	r25
    2ec0:	8f 93       	push	r24
    2ec2:	bf 92       	push	r11
    2ec4:	af 92       	push	r10
    2ec6:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	c5 01       	movw	r24, r10
    2ece:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
			}
			break;
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	6b c4       	rjmp	.+2262   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    2ee0:	f6 01       	movw	r30, r12
    2ee2:	83 81       	ldd	r24, Z+3	; 0x03
    2ee4:	88 23       	and	r24, r24
    2ee6:	91 f0       	breq	.+36     	; 0x2f0c <_Z17handleLinkBusMsgsv+0x302>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2ee8:	94 81       	ldd	r25, Z+4	; 0x04
    2eea:	96 34       	cpi	r25, 0x46	; 70
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <_Z17handleLinkBusMsgsv+0x2e8>
    2eee:	80 33       	cpi	r24, 0x30	; 48
    2ef0:	19 f4       	brne	.+6      	; 0x2ef8 <_Z17handleLinkBusMsgsv+0x2ee>
					{
						g_enable_start_timer = FALSE;
    2ef2:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <g_enable_start_timer>
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <_Z17handleLinkBusMsgsv+0x2f4>
					}
					else
					{
						g_enable_start_timer = TRUE;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_enable_start_timer>
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
    2efe:	40 e1       	ldi	r20, 0x10	; 16
    2f00:	55 e0       	ldi	r21, 0x05	; 5
    2f02:	63 e1       	ldi	r22, 0x13	; 19
    2f04:	8c e8       	ldi	r24, 0x8C	; 140
    2f06:	95 e0       	ldi	r25, 0x05	; 5
    2f08:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2f0c:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_enable_start_timer>
    2f10:	81 11       	cpse	r24, r1
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <_Z17handleLinkBusMsgsv+0x314>
    2f14:	2e e6       	ldi	r18, 0x6E	; 110
    2f16:	31 e0       	ldi	r19, 0x01	; 1
    2f18:	82 2f       	mov	r24, r18
    2f1a:	93 2f       	mov	r25, r19
    2f1c:	04 c0       	rjmp	.+8      	; 0x2f26 <_Z17handleLinkBusMsgsv+0x31c>
    2f1e:	eb e6       	ldi	r30, 0x6B	; 107
    2f20:	f1 e0       	ldi	r31, 0x01	; 1
    2f22:	8e 2f       	mov	r24, r30
    2f24:	9f 2f       	mov	r25, r31
    2f26:	9f 93       	push	r25
    2f28:	8f 93       	push	r24
    2f2a:	7f 92       	push	r7
    2f2c:	6f 92       	push	r6
    2f2e:	bf 92       	push	r11
    2f30:	af 92       	push	r10
    2f32:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	c5 01       	movw	r24, r10
    2f3a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
			}
			break;
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	35 c4       	rjmp	.+2154   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    2f4c:	f6 01       	movw	r30, r12
    2f4e:	83 81       	ldd	r24, Z+3	; 0x03
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <_Z17handleLinkBusMsgsv+0x34c>
    2f54:	30 c4       	rjmp	.+2144   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    2f56:	80 33       	cpi	r24, 0x30	; 48
    2f58:	21 f4       	brne	.+8      	; 0x2f62 <_Z17handleLinkBusMsgsv+0x358>
					{
						g_transmissions_disabled = TRUE;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
    2f60:	2a c4       	rjmp	.+2132   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    2f62:	81 33       	cpi	r24, 0x31	; 49
    2f64:	19 f4       	brne	.+6      	; 0x2f6c <_Z17handleLinkBusMsgsv+0x362>
					{
						startEventNow();
    2f66:	0e 94 10 14 	call	0x2820	; 0x2820 <_Z13startEventNowv>
    2f6a:	25 c4       	rjmp	.+2122   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    2f6c:	82 33       	cpi	r24, 0x32	; 50
    2f6e:	09 f0       	breq	.+2      	; 0x2f72 <_Z17handleLinkBusMsgsv+0x368>
    2f70:	22 c4       	rjmp	.+2116   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
					{
						g_transmissions_disabled = TRUE;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>

						if(!clockConfigurationError())
    2f78:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z23clockConfigurationErrorv>
    2f7c:	81 11       	cpse	r24, r1
    2f7e:	5e c0       	rjmp	.+188    	; 0x303c <_Z17handleLinkBusMsgsv+0x432>
						{
							g_use_rtc_to_start = TRUE;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_use_rtc_to_start>
							reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    2f86:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <g_event_start_epoch>
    2f8a:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    2f8e:	40 91 7b 05 	lds	r20, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    2f92:	50 91 7c 05 	lds	r21, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    2f96:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <g_current_epoch>
    2f9a:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <g_current_epoch+0x1>
    2f9e:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_current_epoch+0x2>
    2fa2:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_current_epoch+0x3>
    2fa6:	0f 2e       	mov	r0, r31
    2fa8:	fa e8       	ldi	r31, 0x8A	; 138
    2faa:	ef 2e       	mov	r14, r31
    2fac:	f1 e0       	ldi	r31, 0x01	; 1
    2fae:	ff 2e       	mov	r15, r31
    2fb0:	f0 2d       	mov	r31, r0
    2fb2:	07 e9       	ldi	r16, 0x97	; 151
    2fb4:	11 e0       	ldi	r17, 0x01	; 1
    2fb6:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
							reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    2fba:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_event_finish_epoch>
    2fbe:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    2fc2:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    2fc6:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    2fca:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <g_event_start_epoch>
    2fce:	70 91 7a 05 	lds	r23, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    2fd2:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    2fd6:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    2fda:	e1 2c       	mov	r14, r1
    2fdc:	f1 2c       	mov	r15, r1
    2fde:	03 ea       	ldi	r16, 0xA3	; 163
    2fe0:	11 e0       	ldi	r17, 0x01	; 1
    2fe2:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
							if(g_event_start_epoch < g_current_epoch)
    2fe6:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <g_event_start_epoch>
    2fea:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    2fee:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    2ff2:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    2ff6:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    2ffa:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    2ffe:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    3002:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    3006:	48 17       	cp	r20, r24
    3008:	59 07       	cpc	r21, r25
    300a:	6a 07       	cpc	r22, r26
    300c:	7b 07       	cpc	r23, r27
    300e:	08 f0       	brcs	.+2      	; 0x3012 <_Z17handleLinkBusMsgsv+0x408>
    3010:	d2 c3       	rjmp	.+1956   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
							{
								reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    3012:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_event_finish_epoch>
    3016:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    301a:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    301e:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    3022:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <g_current_epoch>
    3026:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <g_current_epoch+0x1>
    302a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_current_epoch+0x2>
    302e:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_current_epoch+0x3>
    3032:	0b ea       	ldi	r16, 0xAB	; 171
    3034:	11 e0       	ldi	r17, 0x01	; 1
    3036:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
    303a:	bd c3       	rjmp	.+1914   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
							}
						}
						else
						{
							reportConfigErrors();
    303c:	0e 94 55 14 	call	0x28aa	; 0x28aa <_Z18reportConfigErrorsv>
    3040:	ba c3       	rjmp	.+1908   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    3042:	f6 01       	movw	r30, r12
    3044:	83 81       	ldd	r24, Z+3	; 0x03
    3046:	88 23       	and	r24, r24
    3048:	91 f1       	breq	.+100    	; 0x30ae <_Z17handleLinkBusMsgsv+0x4a4>
				{
					strcpy(g_tempStr," ");  /* Space before ID gets sent */
    304a:	80 e2       	ldi	r24, 0x20	; 32
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	f5 01       	movw	r30, r10
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
					strcat(g_tempStr,lb_buff->fields[FIELD1]);
    3054:	b6 01       	movw	r22, r12
    3056:	6d 5f       	subi	r22, 0xFD	; 253
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	c5 01       	movw	r24, r10
    305c:	0e 94 db 29 	call	0x53b6	; 0x53b6 <strcat>

					if(lb_buff->fields[FIELD2][0])
    3060:	f6 01       	movw	r30, r12
    3062:	87 89       	ldd	r24, Z+23	; 0x17
    3064:	88 23       	and	r24, r24
    3066:	79 f0       	breq	.+30     	; 0x3086 <_Z17handleLinkBusMsgsv+0x47c>
					{
						strcat(g_tempStr," ");
    3068:	f5 01       	movw	r30, r10
    306a:	01 90       	ld	r0, Z+
    306c:	00 20       	and	r0, r0
    306e:	e9 f7       	brne	.-6      	; 0x306a <_Z17handleLinkBusMsgsv+0x460>
    3070:	31 97       	sbiw	r30, 0x01	; 1
    3072:	80 e2       	ldi	r24, 0x20	; 32
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	80 83       	st	Z, r24
						strcat(g_tempStr,lb_buff->fields[FIELD2]);
    307a:	b6 01       	movw	r22, r12
    307c:	69 5e       	subi	r22, 0xE9	; 233
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	c5 01       	movw	r24, r10
    3082:	0e 94 db 29 	call	0x53b6	; 0x53b6 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    3086:	f5 01       	movw	r30, r10
    3088:	01 90       	ld	r0, Z+
    308a:	00 20       	and	r0, r0
    308c:	e9 f7       	brne	.-6      	; 0x3088 <_Z17handleLinkBusMsgsv+0x47e>
    308e:	31 97       	sbiw	r30, 0x01	; 1
    3090:	eb 5d       	subi	r30, 0xDB	; 219
    3092:	f4 40       	sbci	r31, 0x04	; 4
    3094:	75 97       	sbiw	r30, 0x15	; 21
    3096:	58 f4       	brcc	.+22     	; 0x30ae <_Z17handleLinkBusMsgsv+0x4a4>
					{
						strcpy(g_messages_text[STATION_ID],g_tempStr);
    3098:	b5 01       	movw	r22, r10
    309a:	89 e2       	ldi	r24, 0x29	; 41
    309c:	95 e0       	ldi	r25, 0x05	; 5
    309e:	0e 94 e6 29 	call	0x53cc	; 0x53cc <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    30a2:	a5 01       	movw	r20, r10
    30a4:	6b e0       	ldi	r22, 0x0B	; 11
    30a6:	8c e8       	ldi	r24, 0x8C	; 140
    30a8:	95 e0       	ldi	r25, 0x05	; 5
    30aa:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    30ae:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <g_messages_text+0x15>
    30b2:	88 23       	and	r24, r24
    30b4:	f1 f0       	breq	.+60     	; 0x30f2 <_Z17handleLinkBusMsgsv+0x4e8>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    30b6:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_id_codespeed>
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	89 e2       	ldi	r24, 0x29	; 41
    30be:	95 e0       	ldi	r25, 0x05	; 5
    30c0:	0e 94 57 22 	call	0x44ae	; 0x44ae <_Z26timeRequiredToSendStrAtWPMPcj>
    30c4:	8c 50       	subi	r24, 0x0C	; 12
    30c6:	9e 4f       	sbci	r25, 0xFE	; 254
    30c8:	9c 01       	movw	r18, r24
    30ca:	36 95       	lsr	r19
    30cc:	27 95       	ror	r18
    30ce:	36 95       	lsr	r19
    30d0:	27 95       	ror	r18
    30d2:	36 95       	lsr	r19
    30d4:	27 95       	ror	r18
    30d6:	a5 ec       	ldi	r26, 0xC5	; 197
    30d8:	b0 e2       	ldi	r27, 0x20	; 32
    30da:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>
    30de:	92 95       	swap	r25
    30e0:	82 95       	swap	r24
    30e2:	8f 70       	andi	r24, 0x0F	; 15
    30e4:	89 27       	eor	r24, r25
    30e6:	9f 70       	andi	r25, 0x0F	; 15
    30e8:	89 27       	eor	r24, r25
    30ea:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <g_time_needed_for_ID+0x1>
    30ee:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr,"ID:%s\n",g_messages_text[STATION_ID]);
    30f2:	89 e2       	ldi	r24, 0x29	; 41
    30f4:	95 e0       	ldi	r25, 0x05	; 5
    30f6:	9f 93       	push	r25
    30f8:	8f 93       	push	r24
    30fa:	8c eb       	ldi	r24, 0xBC	; 188
    30fc:	91 e0       	ldi	r25, 0x01	; 1
    30fe:	9f 93       	push	r25
    3100:	8f 93       	push	r24
    3102:	bf 92       	push	r11
    3104:	af 92       	push	r10
    3106:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
				lb_send_string(g_tempStr,TRUE);
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	c5 01       	movw	r24, r10
    310e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
			}
			break;
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	4b c3       	rjmp	.+1686   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    3120:	f6 01       	movw	r30, r12
    3122:	83 81       	ldd	r24, Z+3	; 0x03
    3124:	89 34       	cpi	r24, 0x49	; 73
    3126:	e9 f5       	brne	.+122    	; 0x31a2 <_Z17handleLinkBusMsgsv+0x598>
				{
					if(lb_buff->fields[FIELD2][0])
    3128:	87 89       	ldd	r24, Z+23	; 0x17
    312a:	88 23       	and	r24, r24
    312c:	d1 f1       	breq	.+116    	; 0x31a2 <_Z17handleLinkBusMsgsv+0x598>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    312e:	c6 01       	movw	r24, r12
    3130:	47 96       	adiw	r24, 0x17	; 23
    3132:	0e 94 ac 29 	call	0x5358	; 0x5358 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,speed,MAX_CODE_SPEED_WPM);
    3136:	86 2f       	mov	r24, r22
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	85 30       	cpi	r24, 0x05	; 5
    313c:	91 05       	cpc	r25, r1
    313e:	14 f4       	brge	.+4      	; 0x3144 <_Z17handleLinkBusMsgsv+0x53a>
    3140:	85 e0       	ldi	r24, 0x05	; 5
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	85 31       	cpi	r24, 0x15	; 21
    3146:	91 05       	cpc	r25, r1
    3148:	0c f0       	brlt	.+2      	; 0x314c <_Z17handleLinkBusMsgsv+0x542>
    314a:	84 e1       	ldi	r24, 0x14	; 20
    314c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    3150:	48 e1       	ldi	r20, 0x18	; 24
    3152:	51 e0       	ldi	r21, 0x01	; 1
    3154:	6e e0       	ldi	r22, 0x0E	; 14
    3156:	8c e8       	ldi	r24, 0x8C	; 140
    3158:	95 e0       	ldi	r25, 0x05	; 5
    315a:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    315e:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <g_messages_text+0x15>
    3162:	88 23       	and	r24, r24
    3164:	f1 f0       	breq	.+60     	; 0x31a2 <_Z17handleLinkBusMsgsv+0x598>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    3166:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_id_codespeed>
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	89 e2       	ldi	r24, 0x29	; 41
    316e:	95 e0       	ldi	r25, 0x05	; 5
    3170:	0e 94 57 22 	call	0x44ae	; 0x44ae <_Z26timeRequiredToSendStrAtWPMPcj>
    3174:	8c 50       	subi	r24, 0x0C	; 12
    3176:	9e 4f       	sbci	r25, 0xFE	; 254
    3178:	9c 01       	movw	r18, r24
    317a:	36 95       	lsr	r19
    317c:	27 95       	ror	r18
    317e:	36 95       	lsr	r19
    3180:	27 95       	ror	r18
    3182:	36 95       	lsr	r19
    3184:	27 95       	ror	r18
    3186:	a5 ec       	ldi	r26, 0xC5	; 197
    3188:	b0 e2       	ldi	r27, 0x20	; 32
    318a:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>
    318e:	92 95       	swap	r25
    3190:	82 95       	swap	r24
    3192:	8f 70       	andi	r24, 0x0F	; 15
    3194:	89 27       	eor	r24, r25
    3196:	9f 70       	andi	r25, 0x0F	; 15
    3198:	89 27       	eor	r24, r25
    319a:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <g_time_needed_for_ID+0x1>
    319e:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    31a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_id_codespeed>
    31a6:	1f 92       	push	r1
    31a8:	8f 93       	push	r24
    31aa:	5f 92       	push	r5
    31ac:	4f 92       	push	r4
    31ae:	bf 92       	push	r11
    31b0:	af 92       	push	r10
    31b2:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
				lb_send_string(g_tempStr,FALSE);
    31b6:	60 e0       	ldi	r22, 0x00	; 0
    31b8:	c5 01       	movw	r24, r10
    31ba:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
			}
			break;
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	f5 c2       	rjmp	.+1514   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>

			case MESSAGE_VERSION:
			{
				ee_mgr.sendEEPROMString(TextVersion);
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	8c e8       	ldi	r24, 0x8C	; 140
    31d0:	95 e0       	ldi	r25, 0x05	; 5
    31d2:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
			}
			break;
    31d6:	ef c2       	rjmp	.+1502   	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    31d8:	f6 01       	movw	r30, r12
    31da:	83 81       	ldd	r24, Z+3	; 0x03
    31dc:	84 35       	cpi	r24, 0x54	; 84
    31de:	09 f0       	breq	.+2      	; 0x31e2 <_Z17handleLinkBusMsgsv+0x5d8>
    31e0:	8d c0       	rjmp	.+282    	; 0x32fc <_Z17handleLinkBusMsgsv+0x6f2>
				{
					strncpy(g_tempStr,lb_buff->fields[FIELD2],12);
    31e2:	4c e0       	ldi	r20, 0x0C	; 12
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	b6 01       	movw	r22, r12
    31e8:	69 5e       	subi	r22, 0xE9	; 233
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	c5 01       	movw	r24, r10
    31ee:	0e 94 ed 29 	call	0x53da	; 0x53da <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    31f2:	f5 01       	movw	r30, r10
    31f4:	14 86       	std	Z+12, r1	; 0x0c
					int len = strlen(g_tempStr);
    31f6:	01 90       	ld	r0, Z+
    31f8:	00 20       	and	r0, r0
    31fa:	e9 f7       	brne	.-6      	; 0x31f6 <_Z17handleLinkBusMsgsv+0x5ec>
    31fc:	31 97       	sbiw	r30, 0x01	; 1
    31fe:	eb 5d       	subi	r30, 0xDB	; 219
    3200:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3202:	1e 16       	cp	r1, r30
    3204:	1f 06       	cpc	r1, r31
    3206:	0c f0       	brlt	.+2      	; 0x320a <_Z17handleLinkBusMsgsv+0x600>
    3208:	49 c0       	rjmp	.+146    	; 0x329c <_Z17handleLinkBusMsgsv+0x692>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    320a:	3c 97       	sbiw	r30, 0x0c	; 12
    320c:	09 f0       	breq	.+2      	; 0x3210 <_Z17handleLinkBusMsgsv+0x606>
    320e:	40 c0       	rjmp	.+128    	; 0x3290 <_Z17handleLinkBusMsgsv+0x686>
    3210:	c5 01       	movw	r24, r10
    3212:	0e 94 02 14 	call	0x2804	; 0x2804 <_Z11only_digitsPc>
    3216:	88 23       	and	r24, r24
    3218:	d9 f1       	breq	.+118    	; 0x3290 <_Z17handleLinkBusMsgsv+0x686>
						{
							time_t t = rv3028_get_epoch(NULL,g_tempStr);    /* String format "YYMMDDhhmmss" */
    321a:	b5 01       	movw	r22, r10
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	0e 94 a3 22 	call	0x4546	; 0x4546 <_Z16rv3028_get_epochPbPc>

							if(t > MINIMUM_EPOCH)
    3224:	61 30       	cpi	r22, 0x01	; 1
    3226:	76 46       	sbci	r23, 0x66	; 102
    3228:	8e 4e       	sbci	r24, 0xEE	; 238
    322a:	9f 45       	sbci	r25, 0x5F	; 95
    322c:	58 f1       	brcs	.+86     	; 0x3284 <_Z17handleLinkBusMsgsv+0x67a>
							{
								rv3028_set_date_time(g_tempStr);            /* String format "YYMMDDhhmmss" */
    322e:	c5 01       	movw	r24, r10
    3230:	0e 94 ae 23 	call	0x475c	; 0x475c <_Z20rv3028_set_date_timePc>
								g_current_epoch = rv3028_get_epoch(NULL,NULL);
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 a3 22 	call	0x4546	; 0x4546 <_Z16rv3028_get_epochPbPc>
    3240:	60 93 7d 05 	sts	0x057D, r22	; 0x80057d <g_current_epoch>
    3244:	70 93 7e 05 	sts	0x057E, r23	; 0x80057e <g_current_epoch+0x1>
    3248:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_current_epoch+0x2>
    324c:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <g_current_epoch+0x3>
								sprintf(g_tempStr,"Time:%lu\n",g_current_epoch);
    3250:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    3254:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    3258:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    325c:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    3260:	bf 93       	push	r27
    3262:	af 93       	push	r26
    3264:	9f 93       	push	r25
    3266:	8f 93       	push	r24
    3268:	84 ed       	ldi	r24, 0xD4	; 212
    326a:	91 e0       	ldi	r25, 0x01	; 1
    326c:	9f 93       	push	r25
    326e:	8f 93       	push	r24
    3270:	bf 92       	push	r11
    3272:	af 92       	push	r10
    3274:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	ac c2       	rjmp	.+1368   	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
							}
							else
							{
								ee_mgr.sendEEPROMString(TextErrTimeInPast);
    3284:	6a e0       	ldi	r22, 0x0A	; 10
    3286:	8c e8       	ldi	r24, 0x8C	; 140
    3288:	95 e0       	ldi	r25, 0x05	; 5
    328a:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    328e:	a6 c2       	rjmp	.+1356   	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
							}
						}
						else
						{
							ee_mgr.sendEEPROMString(TextErrInvalidTime);
    3290:	69 e0       	ldi	r22, 0x09	; 9
    3292:	8c e8       	ldi	r24, 0x8C	; 140
    3294:	95 e0       	ldi	r25, 0x05	; 5
    3296:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    329a:	a0 c2       	rjmp	.+1344   	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
						}
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ",NULL);
    329c:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <g_event_start_epoch>
    32a0:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    32a4:	40 91 7b 05 	lds	r20, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    32a8:	50 91 7c 05 	lds	r21, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    32ac:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <g_current_epoch>
    32b0:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <g_current_epoch+0x1>
    32b4:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_current_epoch+0x2>
    32b8:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_current_epoch+0x3>
    32bc:	e1 2c       	mov	r14, r1
    32be:	f1 2c       	mov	r15, r1
    32c0:	07 e9       	ldi	r16, 0x97	; 151
    32c2:	11 e0       	ldi	r17, 0x01	; 1
    32c4:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr,"UNIX Time:%lu\n",g_current_epoch);
    32c8:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    32cc:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    32d0:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    32d4:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    32d8:	bf 93       	push	r27
    32da:	af 93       	push	r26
    32dc:	9f 93       	push	r25
    32de:	8f 93       	push	r24
    32e0:	8f ec       	ldi	r24, 0xCF	; 207
    32e2:	91 e0       	ldi	r25, 0x01	; 1
    32e4:	9f 93       	push	r25
    32e6:	8f 93       	push	r24
    32e8:	bf 92       	push	r11
    32ea:	af 92       	push	r10
    32ec:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	70 c2       	rjmp	.+1248   	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    32fc:	83 35       	cpi	r24, 0x53	; 83
    32fe:	09 f0       	breq	.+2      	; 0x3302 <_Z17handleLinkBusMsgsv+0x6f8>
    3300:	c7 c0       	rjmp	.+398    	; 0x3490 <_Z17handleLinkBusMsgsv+0x886>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3302:	b6 01       	movw	r22, r12
    3304:	69 5e       	subi	r22, 0xE9	; 233
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	c5 01       	movw	r24, r10
    330a:	0e 94 e6 29 	call	0x53cc	; 0x53cc <strcpy>
					int len = strlen(g_tempStr);
    330e:	f5 01       	movw	r30, r10
    3310:	01 90       	ld	r0, Z+
    3312:	00 20       	and	r0, r0
    3314:	e9 f7       	brne	.-6      	; 0x3310 <_Z17handleLinkBusMsgsv+0x706>
    3316:	31 97       	sbiw	r30, 0x01	; 1
    3318:	eb 5d       	subi	r30, 0xDB	; 219
    331a:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    331c:	1e 16       	cp	r1, r30
    331e:	1f 06       	cpc	r1, r31
    3320:	0c f0       	brlt	.+2      	; 0x3324 <_Z17handleLinkBusMsgsv+0x71a>
    3322:	9c c0       	rjmp	.+312    	; 0x345c <_Z17handleLinkBusMsgsv+0x852>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    3324:	3c 97       	sbiw	r30, 0x0c	; 12
    3326:	09 f0       	breq	.+2      	; 0x332a <_Z17handleLinkBusMsgsv+0x720>
    3328:	93 c0       	rjmp	.+294    	; 0x3450 <_Z17handleLinkBusMsgsv+0x846>
    332a:	c5 01       	movw	r24, r10
    332c:	0e 94 02 14 	call	0x2804	; 0x2804 <_Z11only_digitsPc>
    3330:	88 23       	and	r24, r24
    3332:	09 f4       	brne	.+2      	; 0x3336 <_Z17handleLinkBusMsgsv+0x72c>
    3334:	8d c0       	rjmp	.+282    	; 0x3450 <_Z17handleLinkBusMsgsv+0x846>
						{
							time_t s;
							s = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    3336:	b5 01       	movw	r22, r10
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 a3 22 	call	0x4546	; 0x4546 <_Z16rv3028_get_epochPbPc>

							if(s > g_current_epoch)
    3340:	00 91 7d 05 	lds	r16, 0x057D	; 0x80057d <g_current_epoch>
    3344:	10 91 7e 05 	lds	r17, 0x057E	; 0x80057e <g_current_epoch+0x1>
    3348:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <g_current_epoch+0x2>
    334c:	30 91 80 05 	lds	r19, 0x0580	; 0x800580 <g_current_epoch+0x3>
    3350:	06 17       	cp	r16, r22
    3352:	17 07       	cpc	r17, r23
    3354:	28 07       	cpc	r18, r24
    3356:	39 07       	cpc	r19, r25
    3358:	08 f0       	brcs	.+2      	; 0x335c <_Z17handleLinkBusMsgsv+0x752>
    335a:	74 c0       	rjmp	.+232    	; 0x3444 <_Z17handleLinkBusMsgsv+0x83a>
							{
								g_event_start_epoch = s;
    335c:	60 93 79 05 	sts	0x0579, r22	; 0x800579 <g_event_start_epoch>
    3360:	70 93 7a 05 	sts	0x057A, r23	; 0x80057a <g_event_start_epoch+0x1>
    3364:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <g_event_start_epoch+0x2>
    3368:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <g_event_start_epoch+0x3>
								ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    336c:	49 e7       	ldi	r20, 0x79	; 121
    336e:	55 e0       	ldi	r21, 0x05	; 5
    3370:	65 e1       	ldi	r22, 0x15	; 21
    3372:	8c e8       	ldi	r24, 0x8C	; 140
    3374:	95 e0       	ldi	r25, 0x05	; 5
    3376:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
								g_event_finish_epoch = MAX(g_event_finish_epoch,(g_event_start_epoch + SECONDS_24H));
    337a:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    337e:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    3382:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    3386:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    338a:	8d 83       	std	Y+5, r24	; 0x05
    338c:	9e 83       	std	Y+6, r25	; 0x06
    338e:	af 83       	std	Y+7, r26	; 0x07
    3390:	b8 87       	std	Y+8, r27	; 0x08
    3392:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
    3396:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    339a:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    339e:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    33a2:	80 58       	subi	r24, 0x80	; 128
    33a4:	9e 4a       	sbci	r25, 0xAE	; 174
    33a6:	ae 4f       	sbci	r26, 0xFE	; 254
    33a8:	bf 4f       	sbci	r27, 0xFF	; 255
    33aa:	89 83       	std	Y+1, r24	; 0x01
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	ab 83       	std	Y+3, r26	; 0x03
    33b0:	bc 83       	std	Y+4, r27	; 0x04
    33b2:	4d 81       	ldd	r20, Y+5	; 0x05
    33b4:	5e 81       	ldd	r21, Y+6	; 0x06
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	48 17       	cp	r20, r24
    33bc:	59 07       	cpc	r21, r25
    33be:	6a 07       	cpc	r22, r26
    33c0:	7b 07       	cpc	r23, r27
    33c2:	28 f4       	brcc	.+10     	; 0x33ce <_Z17handleLinkBusMsgsv+0x7c4>
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	9a 81       	ldd	r25, Y+2	; 0x02
    33c8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ca:	bc 81       	ldd	r27, Y+4	; 0x04
    33cc:	04 c0       	rjmp	.+8      	; 0x33d6 <_Z17handleLinkBusMsgsv+0x7cc>
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	af 81       	ldd	r26, Y+7	; 0x07
    33d4:	b8 85       	ldd	r27, Y+8	; 0x08
    33d6:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <g_event_finish_epoch>
    33da:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <g_event_finish_epoch+0x1>
    33de:	a0 93 77 05 	sts	0x0577, r26	; 0x800577 <g_event_finish_epoch+0x2>
    33e2:	b0 93 78 05 	sts	0x0578, r27	; 0x800578 <g_event_finish_epoch+0x3>
								ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    33e6:	45 e7       	ldi	r20, 0x75	; 117
    33e8:	55 e0       	ldi	r21, 0x05	; 5
    33ea:	66 e1       	ldi	r22, 0x16	; 22
    33ec:	8c e8       	ldi	r24, 0x8C	; 140
    33ee:	95 e0       	ldi	r25, 0x05	; 5
    33f0:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
								sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    33f4:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
    33f8:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    33fc:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    3400:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    3404:	bf 93       	push	r27
    3406:	af 93       	push	r26
    3408:	9f 93       	push	r25
    340a:	8f 93       	push	r24
    340c:	8e ed       	ldi	r24, 0xDE	; 222
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	9f 93       	push	r25
    3412:	8f 93       	push	r24
    3414:	bf 92       	push	r11
    3416:	af 92       	push	r10
    3418:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
								g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    341c:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z23clockConfigurationErrorv>
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	81 11       	cpse	r24, r1
    342c:	07 c0       	rjmp	.+14     	; 0x343c <_Z17handleLinkBusMsgsv+0x832>
    342e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	91 11       	cpse	r25, r1
    3436:	03 c0       	rjmp	.+6      	; 0x343e <_Z17handleLinkBusMsgsv+0x834>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	01 c0       	rjmp	.+2      	; 0x343e <_Z17handleLinkBusMsgsv+0x834>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_use_rtc_to_start>
    3442:	cc c1       	rjmp	.+920    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
							}
							else
							{
								ee_mgr.sendEEPROMString(TextErrStartInPast);
    3444:	68 e0       	ldi	r22, 0x08	; 8
    3446:	8c e8       	ldi	r24, 0x8C	; 140
    3448:	95 e0       	ldi	r25, 0x05	; 5
    344a:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    344e:	c6 c1       	rjmp	.+908    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
							}
						}
						else
						{
							ee_mgr.sendEEPROMString(TextErrInvalidTime);
    3450:	69 e0       	ldi	r22, 0x09	; 9
    3452:	8c e8       	ldi	r24, 0x8C	; 140
    3454:	95 e0       	ldi	r25, 0x05	; 5
    3456:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    345a:	c0 c1       	rjmp	.+896    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
						}
					}
					else
					{
						sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    345c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_event_start_epoch>
    3460:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    3464:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    3468:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    346c:	bf 93       	push	r27
    346e:	af 93       	push	r26
    3470:	9f 93       	push	r25
    3472:	8f 93       	push	r24
    3474:	8e ed       	ldi	r24, 0xDE	; 222
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	9f 93       	push	r25
    347a:	8f 93       	push	r24
    347c:	bf 92       	push	r11
    347e:	af 92       	push	r10
    3480:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	a6 c1       	rjmp	.+844    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    3490:	86 34       	cpi	r24, 0x46	; 70
    3492:	09 f0       	breq	.+2      	; 0x3496 <_Z17handleLinkBusMsgsv+0x88c>
    3494:	b4 c0       	rjmp	.+360    	; 0x35fe <_Z17handleLinkBusMsgsv+0x9f4>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3496:	b6 01       	movw	r22, r12
    3498:	69 5e       	subi	r22, 0xE9	; 233
    349a:	7f 4f       	sbci	r23, 0xFF	; 255
    349c:	c5 01       	movw	r24, r10
    349e:	0e 94 e6 29 	call	0x53cc	; 0x53cc <strcpy>
					int len = strlen(g_tempStr);
    34a2:	f5 01       	movw	r30, r10
    34a4:	01 90       	ld	r0, Z+
    34a6:	00 20       	and	r0, r0
    34a8:	e9 f7       	brne	.-6      	; 0x34a4 <_Z17handleLinkBusMsgsv+0x89a>
    34aa:	31 97       	sbiw	r30, 0x01	; 1
    34ac:	eb 5d       	subi	r30, 0xDB	; 219
    34ae:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    34b0:	1e 16       	cp	r1, r30
    34b2:	1f 06       	cpc	r1, r31
    34b4:	0c f0       	brlt	.+2      	; 0x34b8 <_Z17handleLinkBusMsgsv+0x8ae>
    34b6:	89 c0       	rjmp	.+274    	; 0x35ca <_Z17handleLinkBusMsgsv+0x9c0>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    34b8:	3c 97       	sbiw	r30, 0x0c	; 12
    34ba:	09 f0       	breq	.+2      	; 0x34be <_Z17handleLinkBusMsgsv+0x8b4>
    34bc:	80 c0       	rjmp	.+256    	; 0x35be <_Z17handleLinkBusMsgsv+0x9b4>
    34be:	c5 01       	movw	r24, r10
    34c0:	0e 94 02 14 	call	0x2804	; 0x2804 <_Z11only_digitsPc>
    34c4:	88 23       	and	r24, r24
    34c6:	09 f4       	brne	.+2      	; 0x34ca <_Z17handleLinkBusMsgsv+0x8c0>
    34c8:	7a c0       	rjmp	.+244    	; 0x35be <_Z17handleLinkBusMsgsv+0x9b4>
						{
							time_t f;
							f = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    34ca:	b5 01       	movw	r22, r10
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 a3 22 	call	0x4546	; 0x4546 <_Z16rv3028_get_epochPbPc>

							if(f > g_current_epoch)
    34d4:	00 91 7d 05 	lds	r16, 0x057D	; 0x80057d <g_current_epoch>
    34d8:	10 91 7e 05 	lds	r17, 0x057E	; 0x80057e <g_current_epoch+0x1>
    34dc:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <g_current_epoch+0x2>
    34e0:	30 91 80 05 	lds	r19, 0x0580	; 0x800580 <g_current_epoch+0x3>
    34e4:	06 17       	cp	r16, r22
    34e6:	17 07       	cpc	r17, r23
    34e8:	28 07       	cpc	r18, r24
    34ea:	39 07       	cpc	r19, r25
    34ec:	08 f0       	brcs	.+2      	; 0x34f0 <_Z17handleLinkBusMsgsv+0x8e6>
    34ee:	61 c0       	rjmp	.+194    	; 0x35b2 <_Z17handleLinkBusMsgsv+0x9a8>
							{
								if(f > g_event_start_epoch)
    34f0:	00 91 79 05 	lds	r16, 0x0579	; 0x800579 <g_event_start_epoch>
    34f4:	10 91 7a 05 	lds	r17, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    34f8:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    34fc:	30 91 7c 05 	lds	r19, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    3500:	06 17       	cp	r16, r22
    3502:	17 07       	cpc	r17, r23
    3504:	28 07       	cpc	r18, r24
    3506:	39 07       	cpc	r19, r25
    3508:	08 f0       	brcs	.+2      	; 0x350c <_Z17handleLinkBusMsgsv+0x902>
    350a:	4d c0       	rjmp	.+154    	; 0x35a6 <_Z17handleLinkBusMsgsv+0x99c>
								{
									g_event_finish_epoch = f;
    350c:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <g_event_finish_epoch>
    3510:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <g_event_finish_epoch+0x1>
    3514:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <g_event_finish_epoch+0x2>
    3518:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <g_event_finish_epoch+0x3>
									ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    351c:	45 e7       	ldi	r20, 0x75	; 117
    351e:	55 e0       	ldi	r21, 0x05	; 5
    3520:	66 e1       	ldi	r22, 0x16	; 22
    3522:	8c e8       	ldi	r24, 0x8C	; 140
    3524:	95 e0       	ldi	r25, 0x05	; 5
    3526:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
									reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    352a:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_event_finish_epoch>
    352e:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    3532:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    3536:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    353a:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <g_event_start_epoch>
    353e:	70 91 7a 05 	lds	r23, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    3542:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    3546:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    354a:	e1 2c       	mov	r14, r1
    354c:	f1 2c       	mov	r15, r1
    354e:	03 ea       	ldi	r16, 0xA3	; 163
    3550:	11 e0       	ldi	r17, 0x01	; 1
    3552:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
									sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    3556:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    355a:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    355e:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    3562:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    3566:	bf 93       	push	r27
    3568:	af 93       	push	r26
    356a:	9f 93       	push	r25
    356c:	8f 93       	push	r24
    356e:	89 ee       	ldi	r24, 0xE9	; 233
    3570:	91 e0       	ldi	r25, 0x01	; 1
    3572:	9f 93       	push	r25
    3574:	8f 93       	push	r24
    3576:	bf 92       	push	r11
    3578:	af 92       	push	r10
    357a:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
									g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    357e:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z23clockConfigurationErrorv>
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	81 11       	cpse	r24, r1
    358e:	07 c0       	rjmp	.+14     	; 0x359e <_Z17handleLinkBusMsgsv+0x994>
    3590:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	91 11       	cpse	r25, r1
    3598:	03 c0       	rjmp	.+6      	; 0x35a0 <_Z17handleLinkBusMsgsv+0x996>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	01 c0       	rjmp	.+2      	; 0x35a0 <_Z17handleLinkBusMsgsv+0x996>
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_use_rtc_to_start>
    35a4:	1b c1       	rjmp	.+566    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
								}
								else
								{
									ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    35a6:	66 e0       	ldi	r22, 0x06	; 6
    35a8:	8c e8       	ldi	r24, 0x8C	; 140
    35aa:	95 e0       	ldi	r25, 0x05	; 5
    35ac:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    35b0:	15 c1       	rjmp	.+554    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
								}
							}
							else
							{
								ee_mgr.sendEEPROMString(TextErrFinishInPast);
    35b2:	67 e0       	ldi	r22, 0x07	; 7
    35b4:	8c e8       	ldi	r24, 0x8C	; 140
    35b6:	95 e0       	ldi	r25, 0x05	; 5
    35b8:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    35bc:	0f c1       	rjmp	.+542    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
							}
						}
						else
						{
							ee_mgr.sendEEPROMString(TextErrInvalidTime);
    35be:	69 e0       	ldi	r22, 0x09	; 9
    35c0:	8c e8       	ldi	r24, 0x8C	; 140
    35c2:	95 e0       	ldi	r25, 0x05	; 5
    35c4:	0e 94 21 03 	call	0x642	; 0x642 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    35c8:	09 c1       	rjmp	.+530    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
						}
					}
					else
					{
						sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    35ca:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_event_finish_epoch>
    35ce:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    35d2:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    35d6:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    35da:	bf 93       	push	r27
    35dc:	af 93       	push	r26
    35de:	9f 93       	push	r25
    35e0:	8f 93       	push	r24
    35e2:	89 ee       	ldi	r24, 0xE9	; 233
    35e4:	91 e0       	ldi	r25, 0x01	; 1
    35e6:	9f 93       	push	r25
    35e8:	8f 93       	push	r24
    35ea:	bf 92       	push	r11
    35ec:	af 92       	push	r10
    35ee:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	ef c0       	rjmp	.+478    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    35fe:	83 34       	cpi	r24, 0x43	; 67
    3600:	09 f5       	brne	.+66     	; 0x3644 <_Z17handleLinkBusMsgsv+0xa3a>
				{
					if(lb_buff->fields[FIELD2][0])
    3602:	f6 01       	movw	r30, r12
    3604:	87 89       	ldd	r24, Z+23	; 0x17
    3606:	88 23       	and	r24, r24
    3608:	51 f0       	breq	.+20     	; 0x361e <_Z17handleLinkBusMsgsv+0xa14>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    360a:	c6 01       	movw	r24, r12
    360c:	47 96       	adiw	r24, 0x17	; 23
    360e:	0e 94 8e 29 	call	0x531c	; 0x531c <atoi>

						if(c < 512)
    3612:	81 15       	cp	r24, r1
    3614:	f2 e0       	ldi	r31, 0x02	; 2
    3616:	9f 07       	cpc	r25, r31
    3618:	10 f4       	brcc	.+4      	; 0x361e <_Z17handleLinkBusMsgsv+0xa14>
						{
							rv3028_set_offset_RAM(c);
    361a:	0e 94 08 24 	call	0x4810	; 0x4810 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    361e:	0e 94 63 24 	call	0x48c6	; 0x48c6 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr,"C=%d\n",a);
    3622:	9f 93       	push	r25
    3624:	8f 93       	push	r24
    3626:	85 ef       	ldi	r24, 0xF5	; 245
    3628:	91 e0       	ldi	r25, 0x01	; 1
    362a:	9f 93       	push	r25
    362c:	8f 93       	push	r24
    362e:	bf 92       	push	r11
    3630:	af 92       	push	r10
    3632:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	cc c0       	rjmp	.+408    	; 0x37dc <_Z17handleLinkBusMsgsv+0xbd2>
					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'X')  /* Test only - Send 32 kHz square wave out of RTC */
    3644:	88 35       	cpi	r24, 0x58	; 88
    3646:	21 f4       	brne	.+8      	; 0x3650 <_Z17handleLinkBusMsgsv+0xa46>
				{
					EIMSK &= ~(1 << INT0);                  /* Disable INT0 interrupts */
    3648:	e8 98       	cbi	0x1d, 0	; 29
					rv3028_32kHz_sqw();
    364a:	0e 94 a8 24 	call	0x4950	; 0x4950 <_Z16rv3028_32kHz_sqwv>
    364e:	b3 c0       	rjmp	.+358    	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
				}
				else
				{
					if(clockConfigurationError())
    3650:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z23clockConfigurationErrorv>
    3654:	88 23       	and	r24, r24
    3656:	19 f0       	breq	.+6      	; 0x365e <_Z17handleLinkBusMsgsv+0xa54>
					{
						reportConfigErrors();
    3658:	0e 94 55 14 	call	0x28aa	; 0x28aa <_Z18reportConfigErrorsv>
    365c:	ac c0       	rjmp	.+344    	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    365e:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <g_event_start_epoch>
    3662:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    3666:	40 91 7b 05 	lds	r20, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    366a:	50 91 7c 05 	lds	r21, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    366e:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <g_current_epoch>
    3672:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <g_current_epoch+0x1>
    3676:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_current_epoch+0x2>
    367a:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_current_epoch+0x3>
    367e:	0f 2e       	mov	r0, r31
    3680:	fa e8       	ldi	r31, 0x8A	; 138
    3682:	ef 2e       	mov	r14, r31
    3684:	f1 e0       	ldi	r31, 0x01	; 1
    3686:	ff 2e       	mov	r15, r31
    3688:	f0 2d       	mov	r31, r0
    368a:	07 e9       	ldi	r16, 0x97	; 151
    368c:	11 e0       	ldi	r17, 0x01	; 1
    368e:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    3692:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_event_finish_epoch>
    3696:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    369a:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    369e:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    36a2:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <g_event_start_epoch>
    36a6:	70 91 7a 05 	lds	r23, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    36aa:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    36ae:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    36b2:	e1 2c       	mov	r14, r1
    36b4:	f1 2c       	mov	r15, r1
    36b6:	03 ea       	ldi	r16, 0xA3	; 163
    36b8:	11 e0       	ldi	r17, 0x01	; 1
    36ba:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    36be:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <g_event_start_epoch>
    36c2:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <g_event_start_epoch+0x1>
    36c6:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_event_start_epoch+0x2>
    36ca:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_event_start_epoch+0x3>
    36ce:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_current_epoch>
    36d2:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_current_epoch+0x1>
    36d6:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <g_current_epoch+0x2>
    36da:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <g_current_epoch+0x3>
    36de:	48 17       	cp	r20, r24
    36e0:	59 07       	cpc	r21, r25
    36e2:	6a 07       	cpc	r22, r26
    36e4:	7b 07       	cpc	r23, r27
    36e6:	08 f0       	brcs	.+2      	; 0x36ea <_Z17handleLinkBusMsgsv+0xae0>
    36e8:	66 c0       	rjmp	.+204    	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
						{
							reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    36ea:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_event_finish_epoch>
    36ee:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_event_finish_epoch+0x1>
    36f2:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <g_event_finish_epoch+0x2>
    36f6:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <g_event_finish_epoch+0x3>
    36fa:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <g_current_epoch>
    36fe:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <g_current_epoch+0x1>
    3702:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_current_epoch+0x2>
    3706:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_current_epoch+0x3>
    370a:	0b ea       	ldi	r16, 0xAB	; 171
    370c:	11 e0       	ldi	r17, 0x01	; 1
    370e:	0e 94 c0 14 	call	0x2980	; 0x2980 <_Z14reportTimeTillmmPKcS0_>
    3712:	51 c0       	rjmp	.+162    	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3714:	f6 01       	movw	r30, r12
    3716:	83 81       	ldd	r24, Z+3	; 0x03
    3718:	83 34       	cpi	r24, 0x43	; 67
    371a:	81 f5       	brne	.+96     	; 0x377c <_Z17handleLinkBusMsgsv+0xb72>
				{
					if(lb_buff->fields[FIELD2][0])
    371c:	87 89       	ldd	r24, Z+23	; 0x17
    371e:	88 23       	and	r24, r24
    3720:	a9 f0       	breq	.+42     	; 0x374c <_Z17handleLinkBusMsgsv+0xb42>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3722:	c6 01       	movw	r24, r12
    3724:	47 96       	adiw	r24, 0x17	; 23
    3726:	0e 94 8e 29 	call	0x531c	; 0x531c <atoi>

						if((v > -2000) && (v < 2000))
    372a:	9c 01       	movw	r18, r24
    372c:	21 53       	subi	r18, 0x31	; 49
    372e:	38 4f       	sbci	r19, 0xF8	; 248
    3730:	2f 39       	cpi	r18, 0x9F	; 159
    3732:	3f 40       	sbci	r19, 0x0F	; 15
    3734:	58 f4       	brcc	.+22     	; 0x374c <_Z17handleLinkBusMsgsv+0xb42>
						{
							g_atmega_temp_calibration = v;
    3736:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_atmega_temp_calibration+0x1>
    373a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    373e:	45 e1       	ldi	r20, 0x15	; 21
    3740:	51 e0       	ldi	r21, 0x01	; 1
    3742:	61 e1       	ldi	r22, 0x11	; 17
    3744:	8c e8       	ldi	r24, 0x8C	; 140
    3746:	95 e0       	ldi	r25, 0x05	; 5
    3748:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
    374c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_atmega_temp_calibration>
    3750:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <g_atmega_temp_calibration+0x1>
    3754:	9f 93       	push	r25
    3756:	8f 93       	push	r24
    3758:	2b ef       	ldi	r18, 0xFB	; 251
    375a:	31 e0       	ldi	r19, 0x01	; 1
    375c:	3f 93       	push	r19
    375e:	2f 93       	push	r18
    3760:	bf 92       	push	r11
    3762:	af 92       	push	r10
    3764:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
					lb_send_string(g_tempStr,FALSE);
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	c5 01       	movw	r24, r10
    376c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    377c:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_temperature>
    3780:	28 2f       	mov	r18, r24
    3782:	08 2e       	mov	r0, r24
    3784:	00 0c       	add	r0, r0
    3786:	33 0b       	sbc	r19, r19
    3788:	3f 93       	push	r19
    378a:	8f 93       	push	r24
    378c:	9f 92       	push	r9
    378e:	8f 92       	push	r8
    3790:	bf 92       	push	r11
    3792:	af 92       	push	r10
    3794:	0e 94 19 2a 	call	0x5432	; 0x5432 <sprintf>
				lb_send_string(g_tempStr,TRUE);
    3798:	61 e0       	ldi	r22, 0x01	; 1
    379a:	c5 01       	movw	r24, r10
    379c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
			}
			break;
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	04 c0       	rjmp	.+8      	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>

			default:
			{
				ee_mgr.send_Help();
    37ae:	8c e8       	ldi	r24, 0x8C	; 140
    37b0:	95 e0       	ldi	r25, 0x05	; 5
    37b2:	0e 94 41 04 	call	0x882	; 0x882 <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    37b6:	f6 01       	movw	r30, r12
    37b8:	12 82       	std	Z+2, r1	; 0x02
    37ba:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    37bc:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z17lb_send_NewPromptv>
    37c0:	5c ca       	rjmp	.-2888   	; 0x2c7a <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	24 cb       	rjmp	.-2488   	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    37c8:	83 e1       	ldi	r24, 0x13	; 19
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	21 cb       	rjmp	.-2494   	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    37ce:	87 e0       	ldi	r24, 0x07	; 7
    37d0:	1f cb       	rjmp	.-2498   	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    37d2:	84 e1       	ldi	r24, 0x14	; 20
    37d4:	1d cb       	rjmp	.-2502   	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    37d6:	85 e1       	ldi	r24, 0x15	; 21
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	1a cb       	rjmp	.-2508   	; 0x2e10 <_Z17handleLinkBusMsgsv+0x206>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr,TRUE);
    37dc:	61 e0       	ldi	r22, 0x01	; 1
    37de:	c5 01       	movw	r24, r10
    37e0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
    37e4:	e8 cf       	rjmp	.-48     	; 0x37b6 <_Z17handleLinkBusMsgsv+0xbac>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    37e6:	28 96       	adiw	r28, 0x08	; 8
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	ff 90       	pop	r15
    37fc:	ef 90       	pop	r14
    37fe:	df 90       	pop	r13
    3800:	cf 90       	pop	r12
    3802:	bf 90       	pop	r11
    3804:	af 90       	pop	r10
    3806:	9f 90       	pop	r9
    3808:	8f 90       	pop	r8
    380a:	7f 90       	pop	r7
    380c:	6f 90       	pop	r6
    380e:	5f 90       	pop	r5
    3810:	4f 90       	pop	r4
    3812:	3f 90       	pop	r3
    3814:	2f 90       	pop	r2
    3816:	08 95       	ret

00003818 <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    3818:	2f 92       	push	r2
    381a:	3f 92       	push	r3
    381c:	4f 92       	push	r4
    381e:	5f 92       	push	r5
    3820:	6f 92       	push	r6
    3822:	7f 92       	push	r7
    3824:	8f 92       	push	r8
    3826:	9f 92       	push	r9
    3828:	af 92       	push	r10
    382a:	bf 92       	push	r11
    382c:	cf 92       	push	r12
    382e:	df 92       	push	r13
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	1f 92       	push	r1
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    3842:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    3846:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <g_on_the_air>
    384a:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <g_on_the_air+0x1>
    384e:	89 2b       	or	r24, r25
    3850:	29 f0       	breq	.+10     	; 0x385c <_Z4loopv+0x44>
    3852:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZZ4loopvE7proceed>
    3856:	88 23       	and	r24, r24
    3858:	09 f4       	brne	.+2      	; 0x385c <_Z4loopv+0x44>
    385a:	da c0       	rjmp	.+436    	; 0x3a10 <_Z4loopv+0x1f8>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    385c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    3860:	81 11       	cpse	r24, r1
    3862:	2e c1       	rjmp	.+604    	; 0x3ac0 <_Z4loopv+0x2a8>
			{
				proceed = FALSE;
    3864:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    3868:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    386c:	86 30       	cpi	r24, 0x06	; 6
    386e:	91 f4       	brne	.+36     	; 0x3894 <_Z4loopv+0x7c>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter]);
    3870:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3874:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3878:	bc 01       	movw	r22, r24
    387a:	66 0f       	add	r22, r22
    387c:	77 1f       	adc	r23, r23
    387e:	66 0f       	add	r22, r22
    3880:	77 1f       	adc	r23, r23
    3882:	68 0f       	add	r22, r24
    3884:	79 1f       	adc	r23, r25
    3886:	61 57       	subi	r22, 0x71	; 113
    3888:	7d 4f       	sbci	r23, 0xFD	; 253
    388a:	84 e1       	ldi	r24, 0x14	; 20
    388c:	95 e0       	ldi	r25, 0x05	; 5
    388e:	0e 94 e6 29 	call	0x53cc	; 0x53cc <strcpy>
    3892:	27 c0       	rjmp	.+78     	; 0x38e2 <_Z4loopv+0xca>
				}
				else if(g_fox == SPRINT_DEMO)
    3894:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3898:	83 31       	cpi	r24, 0x13	; 19
    389a:	99 f4       	brne	.+38     	; 0x38c2 <_Z4loopv+0xaa>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter + 8]);
    389c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    38a0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    38a4:	08 96       	adiw	r24, 0x08	; 8
    38a6:	bc 01       	movw	r22, r24
    38a8:	66 0f       	add	r22, r22
    38aa:	77 1f       	adc	r23, r23
    38ac:	66 0f       	add	r22, r22
    38ae:	77 1f       	adc	r23, r23
    38b0:	68 0f       	add	r22, r24
    38b2:	79 1f       	adc	r23, r25
    38b4:	61 57       	subi	r22, 0x71	; 113
    38b6:	7d 4f       	sbci	r23, 0xFD	; 253
    38b8:	84 e1       	ldi	r24, 0x14	; 20
    38ba:	95 e0       	ldi	r25, 0x05	; 5
    38bc:	0e 94 e6 29 	call	0x53cc	; 0x53cc <strcpy>
    38c0:	10 c0       	rjmp	.+32     	; 0x38e2 <_Z4loopv+0xca>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox]);
    38c2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	bc 01       	movw	r22, r24
    38ca:	66 0f       	add	r22, r22
    38cc:	77 1f       	adc	r23, r23
    38ce:	66 0f       	add	r22, r22
    38d0:	77 1f       	adc	r23, r23
    38d2:	68 0f       	add	r22, r24
    38d4:	79 1f       	adc	r23, r25
    38d6:	61 57       	subi	r22, 0x71	; 113
    38d8:	7d 4f       	sbci	r23, 0xFD	; 253
    38da:	84 e1       	ldi	r24, 0x14	; 20
    38dc:	95 e0       	ldi	r25, 0x05	; 5
    38de:	0e 94 e6 29 	call	0x53cc	; 0x53cc <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    38e2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    38e6:	86 30       	cpi	r24, 0x06	; 6
    38e8:	09 f1       	breq	.+66     	; 0x392c <_Z4loopv+0x114>
    38ea:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    38ee:	83 31       	cpi	r24, 0x13	; 19
    38f0:	e9 f0       	breq	.+58     	; 0x392c <_Z4loopv+0x114>
    38f2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    38f6:	88 23       	and	r24, r24
    38f8:	c9 f0       	breq	.+50     	; 0x392c <_Z4loopv+0x114>
    38fa:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    38fe:	87 30       	cpi	r24, 0x07	; 7
    3900:	a9 f0       	breq	.+42     	; 0x392c <_Z4loopv+0x114>
    3902:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3906:	88 30       	cpi	r24, 0x08	; 8
    3908:	89 f0       	breq	.+34     	; 0x392c <_Z4loopv+0x114>
    390a:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_fox>
    390e:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_fox_counter>
    3912:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3916:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_fox_id_offset>
    391a:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_fox_id_offset+0x1>
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	84 0f       	add	r24, r20
    3922:	95 1f       	adc	r25, r21
    3924:	28 17       	cp	r18, r24
    3926:	39 07       	cpc	r19, r25
    3928:	09 f0       	breq	.+2      	; 0x392c <_Z4loopv+0x114>
    392a:	ca c0       	rjmp	.+404    	; 0x3ac0 <_Z4loopv+0x2a8>
				{
					BOOL repeat = TRUE;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    3930:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <g_pattern_codespeed>
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	82 e8       	ldi	r24, 0x82	; 130
    3938:	9b e1       	ldi	r25, 0x1B	; 27
    393a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    393e:	cb 01       	movw	r24, r22
    3940:	6a e0       	ldi	r22, 0x0A	; 10
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    3948:	66 0f       	add	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_code_throttle+0x1>
    3950:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT],&repeat,NULL);
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	be 01       	movw	r22, r28
    395a:	6f 5f       	subi	r22, 0xFF	; 255
    395c:	7f 4f       	sbci	r23, 0xFF	; 255
    395e:	84 e1       	ldi	r24, 0x14	; 20
    3960:	95 e0       	ldi	r25, 0x05	; 5
    3962:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    3966:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_time_to_ID>
    396a:	81 11       	cpse	r24, r1
    396c:	0b c0       	rjmp	.+22     	; 0x3984 <_Z4loopv+0x16c>
    396e:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_id_interval>
    3972:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_id_interval+0x1>
    3976:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_on_air_interval>
    397a:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_on_air_interval+0x1>
    397e:	82 17       	cp	r24, r18
    3980:	93 07       	cpc	r25, r19
    3982:	3c f1       	brlt	.+78     	; 0x39d2 <_Z4loopv+0x1ba>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    3984:	00 91 51 05 	lds	r16, 0x0551	; 0x800551 <g_on_air_interval>
    3988:	10 91 52 05 	lds	r17, 0x0552	; 0x800552 <g_on_air_interval+0x1>
    398c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_id_codespeed>
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	89 e2       	ldi	r24, 0x29	; 41
    3994:	95 e0       	ldi	r25, 0x05	; 5
    3996:	0e 94 57 22 	call	0x44ae	; 0x44ae <_Z26timeRequiredToSendStrAtWPMPcj>
    399a:	8c 50       	subi	r24, 0x0C	; 12
    399c:	9e 4f       	sbci	r25, 0xFE	; 254
    399e:	9c 01       	movw	r18, r24
    39a0:	36 95       	lsr	r19
    39a2:	27 95       	ror	r18
    39a4:	36 95       	lsr	r19
    39a6:	27 95       	ror	r18
    39a8:	36 95       	lsr	r19
    39aa:	27 95       	ror	r18
    39ac:	a5 ec       	ldi	r26, 0xC5	; 197
    39ae:	b0 e2       	ldi	r27, 0x20	; 32
    39b0:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>
    39b4:	92 95       	swap	r25
    39b6:	82 95       	swap	r24
    39b8:	8f 70       	andi	r24, 0x0F	; 15
    39ba:	89 27       	eor	r24, r25
    39bc:	9f 70       	andi	r25, 0x0F	; 15
    39be:	89 27       	eor	r24, r25
    39c0:	08 1b       	sub	r16, r24
    39c2:	19 0b       	sbc	r17, r25
    39c4:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    39c8:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    39cc:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_time_to_ID>
    39d0:	0a c0       	rjmp	.+20     	; 0x39e6 <_Z4loopv+0x1ce>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    39d2:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_on_air_interval>
    39d6:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_on_air_interval+0x1>
    39da:	8d 59       	subi	r24, 0x9D	; 157
    39dc:	9f 4f       	sbci	r25, 0xFF	; 255
    39de:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    39e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    39e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_on_the_air+0x1>
    39f2:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_on_the_air>
					g_callsign_sent = FALSE;
    39f6:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_callsign_sent>
					g_fox_transition = FALSE;
    39fa:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    39fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3a02:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3a06:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_tone_offset+0x1>
    3a0a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_tone_offset>
    3a0e:	58 c0       	rjmp	.+176    	; 0x3ac0 <_Z4loopv+0x2a8>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    3a10:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    3a14:	81 11       	cpse	r24, r1
    3a16:	a0 c1       	rjmp	.+832    	; 0x3d58 <_Z4loopv+0x540>
    3a18:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_fox_seconds_into_interval>
    3a1c:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_fox_seconds_into_interval+0x1>
    3a20:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    3a24:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3a28:	28 17       	cp	r18, r24
    3a2a:	39 07       	cpc	r19, r25
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <_Z4loopv+0x218>
    3a2e:	94 c1       	rjmp	.+808    	; 0x3d58 <_Z4loopv+0x540>
    3a30:	71 c1       	rjmp	.+738    	; 0x3d14 <_Z4loopv+0x4fc>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3a32:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a36:	84 31       	cpi	r24, 0x14	; 20
    3a38:	08 f4       	brcc	.+2      	; 0x3a3c <_Z4loopv+0x224>
    3a3a:	94 c1       	rjmp	.+808    	; 0x3d64 <_Z4loopv+0x54c>
    3a3c:	09 c0       	rjmp	.+18     	; 0x3a50 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    3a3e:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_fox_transition>
					g_on_the_air = FALSE;
    3a42:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    3a46:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
					proceed = TRUE;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    3a50:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a54:	86 30       	cpi	r24, 0x06	; 6
    3a56:	21 f0       	breq	.+8      	; 0x3a60 <_Z4loopv+0x248>
    3a58:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a5c:	83 31       	cpi	r24, 0x13	; 19
    3a5e:	49 f4       	brne	.+18     	; 0x3a72 <_Z4loopv+0x25a>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    3a60:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_callsign_sent>
    3a64:	88 23       	and	r24, r24
    3a66:	61 f1       	breq	.+88     	; 0x3ac0 <_Z4loopv+0x2a8>
    3a68:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_fox_transition>
    3a6c:	81 11       	cpse	r24, r1
    3a6e:	7f c1       	rjmp	.+766    	; 0x3d6e <_Z4loopv+0x556>
    3a70:	27 c0       	rjmp	.+78     	; 0x3ac0 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    3a72:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a76:	88 23       	and	r24, r24
    3a78:	41 f0       	breq	.+16     	; 0x3a8a <_Z4loopv+0x272>
    3a7a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a7e:	87 30       	cpi	r24, 0x07	; 7
    3a80:	21 f0       	breq	.+8      	; 0x3a8a <_Z4loopv+0x272>
    3a82:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a86:	88 30       	cpi	r24, 0x08	; 8
    3a88:	41 f4       	brne	.+16     	; 0x3a9a <_Z4loopv+0x282>
			{
				if(g_callsign_sent)
    3a8a:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_callsign_sent>
    3a8e:	88 23       	and	r24, r24
    3a90:	b9 f0       	breq	.+46     	; 0x3ac0 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ4loopvE7proceed>
    3a98:	13 c0       	rjmp	.+38     	; 0x3ac0 <_Z4loopv+0x2a8>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    3a9a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3a9e:	89 30       	cpi	r24, 0x09	; 9
    3aa0:	08 f4       	brcc	.+2      	; 0x3aa4 <_Z4loopv+0x28c>
    3aa2:	6e c1       	rjmp	.+732    	; 0x3d80 <_Z4loopv+0x568>
    3aa4:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3aa8:	83 31       	cpi	r24, 0x13	; 19
    3aaa:	08 f0       	brcs	.+2      	; 0x3aae <_Z4loopv+0x296>
    3aac:	69 c1       	rjmp	.+722    	; 0x3d80 <_Z4loopv+0x568>
    3aae:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_callsign_sent>
    3ab2:	81 11       	cpse	r24, r1
    3ab4:	60 c1       	rjmp	.+704    	; 0x3d76 <_Z4loopv+0x55e>
    3ab6:	64 c1       	rjmp	.+712    	; 0x3d80 <_Z4loopv+0x568>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3ab8:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_callsign_sent>
    3abc:	81 11       	cpse	r24, r1
    3abe:	6c c1       	rjmp	.+728    	; 0x3d98 <_Z4loopv+0x580>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    3ac0:	83 e0       	ldi	r24, 0x03	; 3
    3ac2:	95 e0       	ldi	r25, 0x05	; 5
    3ac4:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN8Goertzel12SamplesReadyEv>
    3ac8:	88 23       	and	r24, r24
    3aca:	09 f4       	brne	.+2      	; 0x3ace <_Z4loopv+0x2b6>
    3acc:	18 c1       	rjmp	.+560    	; 0x3cfe <_Z4loopv+0x4e6>
			static char lastKey = '\0';
			static int checkCount = 10;  /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1,y = -1;

			if(!g_temperature_check_countdown)
    3ace:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_temperature_check_countdown>
    3ad2:	81 11       	cpse	r24, r1
    3ad4:	66 c1       	rjmp	.+716    	; 0x3da2 <_Z4loopv+0x58a>
			{

				setUpTemp();
    3ad6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    3ada:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z7getTempv>
    3ade:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <__fixsfsi>
				if(temp != g_temperature)
    3ae2:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_temperature>
    3ae6:	68 17       	cp	r22, r24
    3ae8:	e1 f0       	breq	.+56     	; 0x3b22 <_Z4loopv+0x30a>
				{
					g_temperature = temp;
    3aea:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <g_temperature>
					int8_t delta25 = temp > 25 ? temp-25 : 25 - temp;
    3aee:	6a 31       	cpi	r22, 0x1A	; 26
    3af0:	14 f0       	brlt	.+4      	; 0x3af6 <_Z4loopv+0x2de>
    3af2:	69 51       	subi	r22, 0x19	; 25
    3af4:	03 c0       	rjmp	.+6      	; 0x3afc <_Z4loopv+0x2e4>
    3af6:	89 e1       	ldi	r24, 0x19	; 25
    3af8:	86 1b       	sub	r24, r22
    3afa:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    3afc:	06 2e       	mov	r0, r22
    3afe:	00 0c       	add	r0, r0
    3b00:	77 0b       	sbc	r23, r23
    3b02:	8c e8       	ldi	r24, 0x8C	; 140
    3b04:	95 e0       	ldi	r25, 0x05	; 5
    3b06:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    3b0a:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <g_rv3028_offset>
    3b0e:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <g_rv3028_offset+0x1>
    3b12:	a9 01       	movw	r20, r18
    3b14:	48 0f       	add	r20, r24
    3b16:	51 1d       	adc	r21, r1
    3b18:	87 fd       	sbrc	r24, 7
    3b1a:	5a 95       	dec	r21
    3b1c:	ca 01       	movw	r24, r20
    3b1e:	0e 94 08 24 	call	0x4810	; 0x4810 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    3b28:	8c e3       	ldi	r24, 0x3C	; 60
    3b2a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_temperature_check_countdown>
    3b2e:	39 c1       	rjmp	.+626    	; 0x3da2 <_Z4loopv+0x58a>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3b30:	f5 01       	movw	r30, r10
    3b32:	41 91       	ld	r20, Z+
    3b34:	51 91       	ld	r21, Z+
    3b36:	61 91       	ld	r22, Z+
    3b38:	71 91       	ld	r23, Z+
    3b3a:	5f 01       	movw	r10, r30
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	95 e0       	ldi	r25, 0x05	; 5
    3b40:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    3b44:	83 e0       	ldi	r24, 0x03	; 3
    3b46:	95 e0       	ldi	r25, 0x05	; 5
    3b48:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZN8Goertzel10Magnitude2Ev>
    3b4c:	e6 2e       	mov	r14, r22
    3b4e:	f7 2e       	mov	r15, r23
    3b50:	d8 2e       	mov	r13, r24
    3b52:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    3b54:	27 2d       	mov	r18, r7
    3b56:	36 2d       	mov	r19, r6
    3b58:	45 2d       	mov	r20, r5
    3b5a:	54 2d       	mov	r21, r4
    3b5c:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__gesf2>
    3b60:	18 16       	cp	r1, r24
    3b62:	b4 f4       	brge	.+44     	; 0x3b90 <_Z4loopv+0x378>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	34 e2       	ldi	r19, 0x24	; 36
    3b68:	44 e7       	ldi	r20, 0x74	; 116
    3b6a:	59 e4       	ldi	r21, 0x49	; 73
    3b6c:	6e 2d       	mov	r22, r14
    3b6e:	7f 2d       	mov	r23, r15
    3b70:	8d 2d       	mov	r24, r13
    3b72:	9c 2d       	mov	r25, r12
    3b74:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__gesf2>
    3b78:	18 16       	cp	r1, r24
    3b7a:	34 f4       	brge	.+12     	; 0x3b88 <_Z4loopv+0x370>
    3b7c:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    3b7e:	7e 2c       	mov	r7, r14
    3b80:	6f 2c       	mov	r6, r15
    3b82:	5d 2c       	mov	r5, r13
    3b84:	4c 2c       	mov	r4, r12
    3b86:	04 c0       	rjmp	.+8      	; 0x3b90 <_Z4loopv+0x378>
    3b88:	7e 2c       	mov	r7, r14
    3b8a:	6f 2c       	mov	r6, r15
    3b8c:	5d 2c       	mov	r5, r13
    3b8e:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    3b90:	0f 5f       	subi	r16, 0xFF	; 255
    3b92:	1f 4f       	sbci	r17, 0xFF	; 255
    3b94:	04 30       	cpi	r16, 0x04	; 4
    3b96:	11 05       	cpc	r17, r1
    3b98:	59 f6       	brne	.-106    	; 0x3b30 <_Z4loopv+0x318>
    3b9a:	13 c1       	rjmp	.+550    	; 0x3dc2 <_Z4loopv+0x5aa>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3b9c:	f5 01       	movw	r30, r10
    3b9e:	41 91       	ld	r20, Z+
    3ba0:	51 91       	ld	r21, Z+
    3ba2:	61 91       	ld	r22, Z+
    3ba4:	71 91       	ld	r23, Z+
    3ba6:	5f 01       	movw	r10, r30
    3ba8:	83 e0       	ldi	r24, 0x03	; 3
    3baa:	95 e0       	ldi	r25, 0x05	; 5
    3bac:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    3bb0:	83 e0       	ldi	r24, 0x03	; 3
    3bb2:	95 e0       	ldi	r25, 0x05	; 5
    3bb4:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZN8Goertzel10Magnitude2Ev>
    3bb8:	e6 2e       	mov	r14, r22
    3bba:	f7 2e       	mov	r15, r23
    3bbc:	d8 2e       	mov	r13, r24
    3bbe:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    3bc0:	25 2d       	mov	r18, r5
    3bc2:	34 2d       	mov	r19, r4
    3bc4:	43 2d       	mov	r20, r3
    3bc6:	52 2d       	mov	r21, r2
    3bc8:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__gesf2>
    3bcc:	18 16       	cp	r1, r24
    3bce:	b4 f4       	brge	.+44     	; 0x3bfc <_Z4loopv+0x3e4>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	34 e2       	ldi	r19, 0x24	; 36
    3bd4:	44 e7       	ldi	r20, 0x74	; 116
    3bd6:	59 e4       	ldi	r21, 0x49	; 73
    3bd8:	6e 2d       	mov	r22, r14
    3bda:	7f 2d       	mov	r23, r15
    3bdc:	8d 2d       	mov	r24, r13
    3bde:	9c 2d       	mov	r25, r12
    3be0:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__gesf2>
    3be4:	18 16       	cp	r1, r24
    3be6:	34 f4       	brge	.+12     	; 0x3bf4 <_Z4loopv+0x3dc>
    3be8:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    3bea:	5e 2c       	mov	r5, r14
    3bec:	4f 2c       	mov	r4, r15
    3bee:	3d 2c       	mov	r3, r13
    3bf0:	2c 2c       	mov	r2, r12
    3bf2:	04 c0       	rjmp	.+8      	; 0x3bfc <_Z4loopv+0x3e4>
    3bf4:	5e 2c       	mov	r5, r14
    3bf6:	4f 2c       	mov	r4, r15
    3bf8:	3d 2c       	mov	r3, r13
    3bfa:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    3bfc:	0f 5f       	subi	r16, 0xFF	; 255
    3bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3c00:	04 30       	cpi	r16, 0x04	; 4
    3c02:	11 05       	cpc	r17, r1
    3c04:	59 f6       	brne	.-106    	; 0x3b9c <_Z4loopv+0x384>
							lb_send_string(g_tempStr,TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    3c06:	77 20       	and	r7, r7
    3c08:	0c f4       	brge	.+2      	; 0x3c0c <_Z4loopv+0x3f4>
    3c0a:	71 c0       	rjmp	.+226    	; 0x3cee <_Z4loopv+0x4d6>
				{
					char newKey = key[4 * y + x];
    3c0c:	c4 01       	movw	r24, r8
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	81 5a       	subi	r24, 0xA1	; 161
    3c18:	9d 4f       	sbci	r25, 0xFD	; 253
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	e6 0d       	add	r30, r6
    3c1e:	f7 1d       	adc	r31, r7
    3c20:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    3c22:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ4loopvE7lastKey>
    3c26:	18 13       	cpse	r17, r24
    3c28:	17 c0       	rjmp	.+46     	; 0x3c58 <_Z4loopv+0x440>
					{
						checkCount++;
    3c2a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    3c2e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3c38:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    3c3c:	03 97       	sbiw	r24, 0x03	; 3
    3c3e:	61 f4       	brne	.+24     	; 0x3c58 <_Z4loopv+0x440>
						{
							g_dtmf_detected = TRUE;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <g_dtmf_detected>
							quietCount = 0;
    3c46:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    3c4a:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    3c4e:	10 93 0c 05 	sts	0x050C, r17	; 0x80050c <g_lastKey>
								sprintf(g_tempStr,"\"%c\"\n",g_lastKey);
								lb_send_string(g_tempStr,TRUE);
							}
#endif // DEBUG_DTMF

							processKey(newKey);
    3c52:	81 2f       	mov	r24, r17
    3c54:	0e 94 9c 11 	call	0x2338	; 0x2338 <_Z10processKeyc>
							}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    3c58:	10 93 80 04 	sts	0x0480, r17	; 0x800480 <_ZZ4loopvE7lastKey>
    3c5c:	48 c0       	rjmp	.+144    	; 0x3cee <_Z4loopv+0x4d6>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    3c5e:	c0 90 04 05 	lds	r12, 0x0504	; 0x800504 <g_tick_count>
    3c62:	d0 90 05 05 	lds	r13, 0x0505	; 0x800505 <g_tick_count+0x1>
    3c66:	e0 90 06 05 	lds	r14, 0x0506	; 0x800506 <g_tick_count+0x2>
    3c6a:	f0 90 07 05 	lds	r15, 0x0507	; 0x800507 <g_tick_count+0x3>
    3c6e:	80 90 08 05 	lds	r8, 0x0508	; 0x800508 <g_last>
    3c72:	90 90 09 05 	lds	r9, 0x0509	; 0x800509 <g_last+0x1>
    3c76:	a0 90 0a 05 	lds	r10, 0x050A	; 0x80050a <g_last+0x2>
    3c7a:	b0 90 0b 05 	lds	r11, 0x050B	; 0x80050b <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    3c7e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ4loopvE10quietCount>
    3c82:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    3c86:	9c 01       	movw	r18, r24
    3c88:	2f 5f       	subi	r18, 0xFF	; 255
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	30 93 7f 04 	sts	0x047F, r19	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    3c90:	20 93 7e 04 	sts	0x047E, r18	; 0x80047e <_ZZ4loopvE10quietCount>
    3c94:	03 97       	sbiw	r24, 0x03	; 3
    3c96:	5c f1       	brlt	.+86     	; 0x3cee <_Z4loopv+0x4d6>
				{
					g_dtmf_detected = FALSE;
    3c98:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <g_dtmf_detected>
					digitalWrite(PIN_LED1,OFF);
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	8d e0       	ldi	r24, 0x0D	; 13
    3ca0:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

					if(delta < 1500)
    3ca4:	c8 18       	sub	r12, r8
    3ca6:	d9 08       	sbc	r13, r9
    3ca8:	ea 08       	sbc	r14, r10
    3caa:	fb 08       	sbc	r15, r11
    3cac:	fc ed       	ldi	r31, 0xDC	; 220
    3cae:	cf 16       	cp	r12, r31
    3cb0:	f5 e0       	ldi	r31, 0x05	; 5
    3cb2:	df 06       	cpc	r13, r31
    3cb4:	e1 04       	cpc	r14, r1
    3cb6:	f1 04       	cpc	r15, r1
    3cb8:	20 f4       	brcc	.+8      	; 0x3cc2 <_Z4loopv+0x4aa>
					{
						checkCount = 0;
    3cba:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3cbe:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    3cc2:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    3cc6:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    3cca:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tick_count>
    3cce:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <g_tick_count+0x1>
    3cd2:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <g_tick_count+0x2>
    3cd6:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <g_tick_count+0x3>
    3cda:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <g_last>
    3cde:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <g_last+0x1>
    3ce2:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <g_last+0x2>
    3ce6:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <g_last+0x3>
					lastKey = '\0';
    3cea:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    3cee:	ea e7       	ldi	r30, 0x7A	; 122
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	88 60       	ori	r24, 0x08	; 8
    3cf6:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    3cf8:	80 81       	ld	r24, Z
    3cfa:	80 64       	ori	r24, 0x40	; 64
    3cfc:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
    3cfe:	10 91 3f 05 	lds	r17, 0x053F	; 0x80053f <g_config_error>
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    3d02:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z23clockConfigurationErrorv>
    3d06:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_config_error>
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	71 c0       	rjmp	.+226    	; 0x3df0 <_Z4loopv+0x5d8>
    3d0e:	11 11       	cpse	r17, r1
    3d10:	6b c0       	rjmp	.+214    	; 0x3de8 <_Z4loopv+0x5d0>
    3d12:	6e c0       	rjmp	.+220    	; 0x3df0 <_Z4loopv+0x5d8>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    3d14:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_id_codespeed>
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	82 e8       	ldi	r24, 0x82	; 130
    3d1c:	9b e1       	ldi	r25, 0x1B	; 27
    3d1e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    3d22:	cb 01       	movw	r24, r22
    3d24:	6a e0       	ldi	r22, 0x0A	; 10
    3d26:	70 e0       	ldi	r23, 0x00	; 0
    3d28:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    3d2c:	66 0f       	add	r22, r22
    3d2e:	77 1f       	adc	r23, r23
    3d30:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_code_throttle+0x1>
    3d34:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_code_throttle>
				BOOL repeat = FALSE;
    3d38:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
    3d3a:	40 e0       	ldi	r20, 0x00	; 0
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	be 01       	movw	r22, r28
    3d40:	6f 5f       	subi	r22, 0xFF	; 255
    3d42:	7f 4f       	sbci	r23, 0xFF	; 255
    3d44:	89 e2       	ldi	r24, 0x29	; 41
    3d46:	95 e0       	ldi	r25, 0x05	; 5
    3d48:	0e 94 59 21 	call	0x42b2	; 0x42b2 <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    3d52:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_callsign_sent>
    3d56:	7c ce       	rjmp	.-776    	; 0x3a50 <_Z4loopv+0x238>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3d58:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3d5c:	89 30       	cpi	r24, 0x09	; 9
    3d5e:	08 f0       	brcs	.+2      	; 0x3d62 <_Z4loopv+0x54a>
    3d60:	68 ce       	rjmp	.-816    	; 0x3a32 <_Z4loopv+0x21a>
    3d62:	76 ce       	rjmp	.-788    	; 0x3a50 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
    3d64:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_fox_transition>
    3d68:	81 11       	cpse	r24, r1
    3d6a:	69 ce       	rjmp	.-814    	; 0x3a3e <_Z4loopv+0x226>
    3d6c:	71 ce       	rjmp	.-798    	; 0x3a50 <_Z4loopv+0x238>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ4loopvE7proceed>
    3d74:	a5 ce       	rjmp	.-694    	; 0x3ac0 <_Z4loopv+0x2a8>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    3d76:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    3d7a:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
    3d7e:	a0 ce       	rjmp	.-704    	; 0x3ac0 <_Z4loopv+0x2a8>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3d80:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_fox>
    3d84:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    3d88:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	82 17       	cp	r24, r18
    3d90:	93 07       	cpc	r25, r19
    3d92:	09 f0       	breq	.+2      	; 0x3d96 <_Z4loopv+0x57e>
    3d94:	91 ce       	rjmp	.-734    	; 0x3ab8 <_Z4loopv+0x2a0>
    3d96:	94 ce       	rjmp	.-728    	; 0x3ac0 <_Z4loopv+0x2a8>
			{
				g_on_the_air = FALSE;
    3d98:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_on_the_air+0x1>
    3d9c:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_on_the_air>
    3da0:	8f ce       	rjmp	.-738    	; 0x3ac0 <_Z4loopv+0x2a8>
    3da2:	0f 2e       	mov	r0, r31
    3da4:	ff e6       	ldi	r31, 0x6F	; 111
    3da6:	af 2e       	mov	r10, r31
    3da8:	f2 e0       	ldi	r31, 0x02	; 2
    3daa:	bf 2e       	mov	r11, r31
    3dac:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    3dae:	00 e0       	ldi	r16, 0x00	; 0
    3db0:	10 e0       	ldi	r17, 0x00	; 0
    3db2:	88 24       	eor	r8, r8
    3db4:	8a 94       	dec	r8
    3db6:	98 2c       	mov	r9, r8
    3db8:	71 2c       	mov	r7, r1
    3dba:	61 2c       	mov	r6, r1
    3dbc:	51 2c       	mov	r5, r1
    3dbe:	41 2c       	mov	r4, r1
    3dc0:	b7 ce       	rjmp	.-658    	; 0x3b30 <_Z4loopv+0x318>
						lb_send_string(g_tempStr,TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    3dc2:	99 20       	and	r9, r9
    3dc4:	0c f4       	brge	.+2      	; 0x3dc8 <_Z4loopv+0x5b0>
    3dc6:	4b cf       	rjmp	.-362    	; 0x3c5e <_Z4loopv+0x446>
    3dc8:	0f 2e       	mov	r0, r31
    3dca:	ff e7       	ldi	r31, 0x7F	; 127
    3dcc:	af 2e       	mov	r10, r31
    3dce:	f2 e0       	ldi	r31, 0x02	; 2
    3dd0:	bf 2e       	mov	r11, r31
    3dd2:	f0 2d       	mov	r31, r0
    3dd4:	00 e0       	ldi	r16, 0x00	; 0
    3dd6:	10 e0       	ldi	r17, 0x00	; 0
    3dd8:	66 24       	eor	r6, r6
    3dda:	6a 94       	dec	r6
    3ddc:	76 2c       	mov	r7, r6
    3dde:	51 2c       	mov	r5, r1
    3de0:	41 2c       	mov	r4, r1
    3de2:	31 2c       	mov	r3, r1
    3de4:	21 2c       	mov	r2, r1
    3de6:	da ce       	rjmp	.-588    	; 0x3b9c <_Z4loopv+0x384>
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
		{
			digitalWrite(PIN_LED2,OFF); /* ensure LED is off */
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	87 e0       	ldi	r24, 0x07	; 7
    3dec:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>
		}
}
    3df0:	0f 90       	pop	r0
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	1f 91       	pop	r17
    3df8:	0f 91       	pop	r16
    3dfa:	ff 90       	pop	r15
    3dfc:	ef 90       	pop	r14
    3dfe:	df 90       	pop	r13
    3e00:	cf 90       	pop	r12
    3e02:	bf 90       	pop	r11
    3e04:	af 90       	pop	r10
    3e06:	9f 90       	pop	r9
    3e08:	8f 90       	pop	r8
    3e0a:	7f 90       	pop	r7
    3e0c:	6f 90       	pop	r6
    3e0e:	5f 90       	pop	r5
    3e10:	4f 90       	pop	r4
    3e12:	3f 90       	pop	r3
    3e14:	2f 90       	pop	r2
    3e16:	08 95       	ret

00003e18 <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);          /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    3e18:	61 e0       	ldi	r22, 0x01	; 1
    3e1a:	8d e0       	ldi	r24, 0x0D	; 13
    3e1c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	8d e0       	ldi	r24, 0x0D	; 13
    3e24:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    3e28:	61 e0       	ldi	r22, 0x01	; 1
    3e2a:	87 e0       	ldi	r24, 0x07	; 7
    3e2c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	87 e0       	ldi	r24, 0x07	; 7
    3e34:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    3e38:	61 e0       	ldi	r22, 0x01	; 1
    3e3a:	8a e0       	ldi	r24, 0x0A	; 10
    3e3c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3e40:	60 e0       	ldi	r22, 0x00	; 0
    3e42:	8a e0       	ldi	r24, 0x0A	; 10
    3e44:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    3e48:	61 e0       	ldi	r22, 0x01	; 1
    3e4a:	89 e0       	ldi	r24, 0x09	; 9
    3e4c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	89 e0       	ldi	r24, 0x09	; 9
    3e54:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    3e58:	61 e0       	ldi	r22, 0x01	; 1
    3e5a:	88 e0       	ldi	r24, 0x08	; 8
    3e5c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	88 e0       	ldi	r24, 0x08	; 8
    3e64:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	84 e1       	ldi	r24, 0x14	; 20
    3e6c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	85 e1       	ldi	r24, 0x15	; 21
    3e74:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    3e78:	63 e0       	ldi	r22, 0x03	; 3
    3e7a:	8c e0       	ldi	r24, 0x0C	; 12
    3e7c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    3e80:	61 e0       	ldi	r22, 0x01	; 1
    3e82:	8b e0       	ldi	r24, 0x0B	; 11
    3e84:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	8b e0       	ldi	r24, 0x0B	; 11
    3e8c:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    3e90:	63 e0       	ldi	r22, 0x03	; 3
    3e92:	84 e0       	ldi	r24, 0x04	; 4
    3e94:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    3e98:	61 e0       	ldi	r22, 0x01	; 1
    3e9a:	8e e0       	ldi	r24, 0x0E	; 14
    3e9c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    3ea0:	61 e0       	ldi	r22, 0x01	; 1
    3ea2:	8f e0       	ldi	r24, 0x0F	; 15
    3ea4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    3ea8:	61 e0       	ldi	r22, 0x01	; 1
    3eaa:	80 e1       	ldi	r24, 0x10	; 16
    3eac:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	81 e1       	ldi	r24, 0x11	; 17
    3eb4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    3eb8:	61 e0       	ldi	r22, 0x01	; 1
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    3ec0:	61 e0       	ldi	r22, 0x01	; 1
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>

	pinMode(PIN_PWDN, OUTPUT);
    3ec8:	61 e0       	ldi	r22, 0x01	; 1
    3eca:	86 e0       	ldi	r24, 0x06	; 6
    3ecc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    3ed0:	61 e0       	ldi	r22, 0x01	; 1
    3ed2:	86 e0       	ldi	r24, 0x06	; 6
    3ed4:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    3ed8:	63 e0       	ldi	r22, 0x03	; 3
    3eda:	82 e1       	ldi	r24, 0x12	; 18
    3edc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    3ee0:	63 e0       	ldi	r22, 0x03	; 3
    3ee2:	83 e1       	ldi	r24, 0x13	; 19
    3ee4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars();     /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    3ee8:	0e 94 87 06 	call	0xd0e	; 0xd0e <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    3eec:	8c e8       	ldi	r24, 0x8C	; 140
    3eee:	95 e0       	ldi	r25, 0x05	; 5
    3ef0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN13EepromManager11readNonVolsEv>
    3ef4:	c8 2f       	mov	r28, r24
		setUpAudioSampling(true);
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_Z18setUpAudioSamplingh>
#endif

	/********************************************************************/
	/* INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    3efc:	e9 e6       	ldi	r30, 0x69	; 105
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	80 81       	ld	r24, Z
    3f02:	82 60       	ori	r24, 0x02	; 2
    3f04:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    3f06:	e8 9a       	sbi	0x1d, 0	; 29


	/********************************************************************/
	/* TIMER2 is for periodic interrupts to drive Morse code generation */
	/* Reset control registers */
	TCCR2A = 0;
    3f08:	a0 eb       	ldi	r26, 0xB0	; 176
    3f0a:	b0 e0       	ldi	r27, 0x00	; 0
    3f0c:	1c 92       	st	X, r1
	TCCR2B = 0;
    3f0e:	e1 eb       	ldi	r30, 0xB1	; 177
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    3f14:	8c 91       	ld	r24, X
    3f16:	82 60       	ori	r24, 0x02	; 2
    3f18:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    3f1a:	80 81       	ld	r24, Z
    3f1c:	87 60       	ori	r24, 0x07	; 7
    3f1e:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    3f20:	8c e0       	ldi	r24, 0x0C	; 12
    3f22:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    3f26:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    3f2a:	e6 eb       	ldi	r30, 0xB6	; 182
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	80 81       	ld	r24, Z
    3f30:	8f 7d       	andi	r24, 0xDF	; 223
    3f32:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    3f34:	e0 e7       	ldi	r30, 0x70	; 112
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    3f3a:	80 81       	ld	r24, Z
    3f3c:	84 60       	ori	r24, 0x04	; 4
    3f3e:	80 83       	st	Z, r24

	/********************************************************************/
	/* Timer 1 is used for controlling the attenuator for AM generation */
		/* set timer1 interrupt at 16 kHz */

	TCCR1A = 0; /* set entire TCCR1A register to 0 */
    3f40:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0; /* same for TCCR1B */
    3f44:	e1 e8       	ldi	r30, 0x81	; 129
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	10 82       	st	Z, r1
	TCNT1 = 0;  /* initialize counter value to 0 */
    3f4a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    3f4e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 500; /* For ~1000 Hz tone output */
    3f52:	84 ef       	ldi	r24, 0xF4	; 244
    3f54:	91 e0       	ldi	r25, 0x01	; 1
    3f56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3f5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    3f5e:	80 81       	ld	r24, Z
    3f60:	88 60       	ori	r24, 0x08	; 8
    3f62:	80 83       	st	Z, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    3f64:	80 81       	ld	r24, Z
    3f66:	81 60       	ori	r24, 0x01	; 1
    3f68:	80 83       	st	Z, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    3f6a:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01);     /* Set CTC mode */
    3f6c:	84 b5       	in	r24, 0x24	; 36
    3f6e:	82 60       	ori	r24, 0x02	; 2
    3f70:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    3f72:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);      /* Prescale 256 */
    3f74:	85 b5       	in	r24, 0x25	; 37
    3f76:	84 60       	ori	r24, 0x04	; 4
    3f78:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    3f7a:	8f e2       	ldi	r24, 0x2F	; 47
    3f7c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    3f7e:	ee e6       	ldi	r30, 0x6E	; 110
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    3f84:	80 81       	ld	r24, Z
    3f86:	82 60       	ori	r24, 0x02	; 2
    3f88:	80 83       	st	Z, r24

	/********************************************************************/
	/* Sync button pin change interrupt */
	PCMSK2 = 0x00;
    3f8a:	ed e6       	ldi	r30, 0x6D	; 109
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    3f90:	80 e1       	ldi	r24, 0x10	; 16
    3f92:	80 83       	st	Z, r24
	PCICR = 0x00;
    3f94:	e8 e6       	ldi	r30, 0x68	; 104
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    3f9a:	84 e0       	ldi	r24, 0x04	; 4
    3f9c:	80 83       	st	Z, r24
	sei();                                                                                  /* Enable interrupts */
    3f9e:	78 94       	sei

	linkbus_init(BAUD);                                                                     /* Start the Link Bus serial comms */
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	71 ee       	ldi	r23, 0xE1	; 225
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	0e 94 cd 08 	call	0x119a	; 0x119a <_Z12linkbus_initm>
		lb_send_string((char *)"EEPROM Erase Error!\n", TRUE);
	}
	ee_mgr.dumpEEPROMVars();
	rv3028_1s_sqw();
#else
	if(eepromErr)
    3fac:	cc 23       	and	r28, r28
    3fae:	29 f0       	breq	.+10     	; 0x3fba <main+0x1a2>
	{
		lb_send_string((char *)"EEPROM Error!\n", TRUE);
    3fb0:	61 e0       	ldi	r22, 0x01	; 1
    3fb2:	8c e0       	ldi	r24, 0x0C	; 12
    3fb4:	92 e0       	ldi	r25, 0x02	; 2
    3fb6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
	}
	uint8_t result = rv3028_1s_sqw();
    3fba:	0e 94 7f 24 	call	0x48fe	; 0x48fe <_Z13rv3028_1s_sqwv>
    3fbe:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch(NULL, NULL);
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	70 e0       	ldi	r23, 0x00	; 0
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e 94 a3 22 	call	0x4546	; 0x4546 <_Z16rv3028_get_epochPbPc>
    3fcc:	60 93 7d 05 	sts	0x057D, r22	; 0x80057d <g_current_epoch>
    3fd0:	70 93 7e 05 	sts	0x057E, r23	; 0x80057e <g_current_epoch+0x1>
    3fd4:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_current_epoch+0x2>
    3fd8:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    3fdc:	8c e8       	ldi	r24, 0x8C	; 140
    3fde:	95 e0       	ldi	r25, 0x05	; 5
    3fe0:	0e 94 41 04 	call	0x882	; 0x882 <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    3fe4:	cc 23       	and	r28, r28
    3fe6:	54 f4       	brge	.+20     	; 0x3ffc <main+0x1e4>
		{
			sprintf(g_tempStr, "Err 1\n");
    3fe8:	87 e0       	ldi	r24, 0x07	; 7
    3fea:	eb e1       	ldi	r30, 0x1B	; 27
    3fec:	f2 e0       	ldi	r31, 0x02	; 2
    3fee:	ab ed       	ldi	r26, 0xDB	; 219
    3ff0:	b4 e0       	ldi	r27, 0x04	; 4
    3ff2:	01 90       	ld	r0, Z+
    3ff4:	0d 92       	st	X+, r0
    3ff6:	8a 95       	dec	r24
    3ff8:	e1 f7       	brne	.-8      	; 0x3ff2 <main+0x1da>
    3ffa:	23 c0       	rjmp	.+70     	; 0x4042 <main+0x22a>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    3ffc:	c0 ff       	sbrs	r28, 0
    3ffe:	0a c0       	rjmp	.+20     	; 0x4014 <main+0x1fc>
		{
			sprintf(g_tempStr, "Err 2\n");
    4000:	87 e0       	ldi	r24, 0x07	; 7
    4002:	e2 e2       	ldi	r30, 0x22	; 34
    4004:	f2 e0       	ldi	r31, 0x02	; 2
    4006:	ab ed       	ldi	r26, 0xDB	; 219
    4008:	b4 e0       	ldi	r27, 0x04	; 4
    400a:	01 90       	ld	r0, Z+
    400c:	0d 92       	st	X+, r0
    400e:	8a 95       	dec	r24
    4010:	e1 f7       	brne	.-8      	; 0x400a <main+0x1f2>
    4012:	17 c0       	rjmp	.+46     	; 0x4042 <main+0x22a>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4014:	c1 ff       	sbrs	r28, 1
    4016:	0a c0       	rjmp	.+20     	; 0x402c <main+0x214>
		{
			sprintf(g_tempStr, "Err 3\n");
    4018:	87 e0       	ldi	r24, 0x07	; 7
    401a:	e9 e2       	ldi	r30, 0x29	; 41
    401c:	f2 e0       	ldi	r31, 0x02	; 2
    401e:	ab ed       	ldi	r26, 0xDB	; 219
    4020:	b4 e0       	ldi	r27, 0x04	; 4
    4022:	01 90       	ld	r0, Z+
    4024:	0d 92       	st	X+, r0
    4026:	8a 95       	dec	r24
    4028:	e1 f7       	brne	.-8      	; 0x4022 <main+0x20a>
    402a:	0b c0       	rjmp	.+22     	; 0x4042 <main+0x22a>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    402c:	c5 ff       	sbrs	r28, 5
    402e:	09 c0       	rjmp	.+18     	; 0x4042 <main+0x22a>
		{
			sprintf(g_tempStr, "RTC OK\n");
    4030:	88 e0       	ldi	r24, 0x08	; 8
    4032:	e0 e3       	ldi	r30, 0x30	; 48
    4034:	f2 e0       	ldi	r31, 0x02	; 2
    4036:	ab ed       	ldi	r26, 0xDB	; 219
    4038:	b4 e0       	ldi	r27, 0x04	; 4
    403a:	01 90       	ld	r0, Z+
    403c:	0d 92       	st	X+, r0
    403e:	8a 95       	dec	r24
    4040:	e1 f7       	brne	.-8      	; 0x403a <main+0x222>
		}

		if(strlen(g_tempStr))
    4042:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_tempStr>
    4046:	88 23       	and	r24, r24
    4048:	29 f0       	breq	.+10     	; 0x4054 <main+0x23c>
		{
			lb_send_string(g_tempStr, TRUE);
    404a:	61 e0       	ldi	r22, 0x01	; 1
    404c:	8b ed       	ldi	r24, 0xDB	; 219
    404e:	94 e0       	ldi	r25, 0x04	; 4
    4050:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4054:	0e 94 55 14 	call	0x28aa	; 0x28aa <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4058:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A); /* start timer 1 interrupts */
    405c:	ef e6       	ldi	r30, 0x6F	; 111
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	82 60       	ori	r24, 0x02	; 2
    4064:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    406e:	0e 94 46 0c 	call	0x188c	; 0x188c <_Z23clockConfigurationErrorv>
    4072:	81 11       	cpse	r24, r1
    4074:	07 c0       	rjmp	.+14     	; 0x4084 <main+0x26c>
    4076:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	91 11       	cpse	r25, r1
    407e:	03 c0       	rjmp	.+6      	; 0x4086 <main+0x26e>
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	01 c0       	rjmp	.+2      	; 0x4086 <main+0x26e>
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    408a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <_Z4loopv>
    408e:	fd cf       	rjmp	.-6      	; 0x408a <main+0x272>

00004090 <_GLOBAL__sub_I_ee_mgr>:
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    4094:	8c e8       	ldi	r24, 0x8C	; 140
    4096:	95 e0       	ldi	r25, 0x05	; 5
    4098:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    409c:	00 e0       	ldi	r16, 0x00	; 0
    409e:	18 e7       	ldi	r17, 0x78	; 120
    40a0:	26 e9       	ldi	r18, 0x96	; 150
    40a2:	36 e4       	ldi	r19, 0x46	; 70
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	69 e4       	ldi	r22, 0x49	; 73
    40aa:	73 e4       	ldi	r23, 0x43	; 67
    40ac:	83 e0       	ldi	r24, 0x03	; 3
    40ae:	95 e0       	ldi	r25, 0x05	; 5
    40b0:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8GoertzelC1Eff>
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	08 95       	ret

000040ba <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    40ba:	83 e0       	ldi	r24, 0x03	; 3
    40bc:	95 e0       	ldi	r25, 0x05	; 5
    40be:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    40c2:	8c e8       	ldi	r24, 0x8C	; 140
    40c4:	95 e0       	ldi	r25, 0x05	; 5
    40c6:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13EepromManagerD1Ev>
    40ca:	08 95       	ret

000040cc <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	fc 01       	movw	r30, r24
    40d0:	b0 97       	sbiw	r30, 0x20	; 32
    40d2:	ed 35       	cpi	r30, 0x5D	; 93
    40d4:	f1 05       	cpc	r31, r1
    40d6:	08 f0       	brcs	.+2      	; 0x40da <_Z12getMorseCharc+0xe>
    40d8:	e4 c0       	rjmp	.+456    	; 0x42a2 <_Z12getMorseCharc+0x1d6>
    40da:	e0 56       	subi	r30, 0x60	; 96
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    40e2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    40e4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    40e6:	61 e0       	ldi	r22, 0x01	; 1
    40e8:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    40ea:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    40ec:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    40ee:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    40f0:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    40f2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    40f4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    40f6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    40f8:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    40fa:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    40fc:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    40fe:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    4100:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4102:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    4104:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4106:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4108:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    410a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    410c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    410e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4110:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    4112:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    4114:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4116:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4118:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    411a:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    411c:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    411e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    4120:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4122:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4124:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4126:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4128:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    412a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    412c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    412e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4130:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4132:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4134:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4136:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4138:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    413a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    413c:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    413e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4140:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4142:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4144:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4146:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4148:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    414a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    414c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    414e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4150:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4152:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4154:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4156:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4158:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    415a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    415c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    415e:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4160:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4162:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4164:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4166:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4168:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    416a:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    416c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    416e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4170:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4172:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4174:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4176:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4178:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    417a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    417c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    417e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4180:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4182:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4184:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4186:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4188:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    418a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    418c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    418e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4190:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4192:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4194:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4196:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4198:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    419a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    419c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    419e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    41a0:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    41a2:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    41a4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    41a6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    41a8:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    41aa:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    41ac:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    41ae:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    41b0:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    41b2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    41b4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    41b6:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    41b8:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    41ba:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    41bc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    41be:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    41c0:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    41c2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    41c4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    41c6:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    41c8:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    41ca:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    41cc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    41ce:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    41d0:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    41d2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    41d4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    41d6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    41d8:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    41da:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    41dc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    41de:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    41e0:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    41e2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    41e4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    41e6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    41e8:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    41ea:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    41ec:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    41ee:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    41f0:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    41f2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    41f4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    41f6:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    41f8:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    41fa:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    41fc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    41fe:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4200:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4202:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4204:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4206:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4208:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    420a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    420c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    420e:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4210:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4212:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4214:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4216:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4218:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    421a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    421c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    421e:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4220:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4222:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4224:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4226:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4228:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    422a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    422c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    422e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4230:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4232:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4234:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4236:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4238:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    423a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    423c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    423e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4240:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4242:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4244:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4246:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4248:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    424a:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    424c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    424e:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4250:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4252:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4254:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4256:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4258:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    425a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    425c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    425e:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4260:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4262:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4264:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4266:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4268:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    426a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    426c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    426e:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4270:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4272:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4274:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4276:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4278:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    427a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    427c:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    427e:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4280:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4282:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4284:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4286:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4288:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    428a:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    428c:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    428e:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4290:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4292:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4294:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4296:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4298:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    429a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    429c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    429e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    42a0:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    42a2:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    42a4:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    42a6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    42a8:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    42aa:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    42ac:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    42ae:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    42b0:	08 95       	ret

000042b2 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
    42b6:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	b1 f1       	breq	.+108    	; 0x4328 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    42bc:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    42c0:	61 15       	cp	r22, r1
    42c2:	71 05       	cpc	r23, r1
    42c4:	21 f0       	breq	.+8      	; 0x42ce <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    42c6:	db 01       	movw	r26, r22
    42c8:	2c 91       	ld	r18, X
    42ca:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    42ce:	fc 01       	movw	r30, r24
    42d0:	20 81       	ld	r18, Z
    42d2:	22 23       	and	r18, r18
    42d4:	d9 f0       	breq	.+54     	; 0x430c <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    42d6:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    42da:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    42de:	80 e2       	ldi	r24, 0x20	; 32
    42e0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    42e4:	82 2f       	mov	r24, r18
    42e6:	0e 94 66 20 	call	0x40cc	; 0x40cc <_Z12getMorseCharc>
    42ea:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    42ee:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    42f2:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    42f6:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    42fa:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    42fe:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4302:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4306:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <_ZZ9makeMorsePcPhS0_E15completedString>
    430a:	0a c0       	rjmp	.+20     	; 0x4320 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    430c:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4310:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    431a:	20 97       	sbiw	r28, 0x00	; 0
    431c:	09 f0       	breq	.+2      	; 0x4320 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    431e:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    4320:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	c0 c0       	rjmp	.+384    	; 0x44a8 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4328:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <_ZZ9makeMorsePcPhS0_E3str>
    432c:	f0 91 97 05 	lds	r31, 0x0597	; 0x800597 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4330:	30 97       	sbiw	r30, 0x00	; 0
    4332:	09 f4       	brne	.+2      	; 0x4336 <_Z9makeMorsePcPhS0_+0x84>
    4334:	aa c0       	rjmp	.+340    	; 0x448a <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4336:	61 15       	cp	r22, r1
    4338:	71 05       	cpc	r23, r1
    433a:	21 f0       	breq	.+8      	; 0x4344 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    433c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    4340:	db 01       	movw	r26, r22
    4342:	8c 93       	st	X, r24
		}

		if(completedString)
    4344:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <_ZZ9makeMorsePcPhS0_E15completedString>
    4348:	88 23       	and	r24, r24
    434a:	49 f0       	breq	.+18     	; 0x435e <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    434c:	20 97       	sbiw	r28, 0x00	; 0
    434e:	09 f4       	brne	.+2      	; 0x4352 <_Z9makeMorsePcPhS0_+0xa0>
    4350:	a8 c0       	rjmp	.+336    	; 0x44a2 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4356:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    435a:	80 e0       	ldi	r24, 0x00	; 0
    435c:	a5 c0       	rjmp	.+330    	; 0x44a8 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    435e:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4362:	88 23       	and	r24, r24
    4364:	21 f0       	breq	.+8      	; 0x436e <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4366:	81 50       	subi	r24, 0x01	; 1
    4368:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    436c:	7f c0       	rjmp	.+254    	; 0x446c <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    436e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4372:	88 23       	and	r24, r24
    4374:	81 f0       	breq	.+32     	; 0x4396 <_Z9makeMorsePcPhS0_+0xe4>
    4376:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    437a:	81 11       	cpse	r24, r1
    437c:	0c c0       	rjmp	.+24     	; 0x4396 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    437e:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    4382:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4386:	88 23       	and	r24, r24
    4388:	09 f4       	brne	.+2      	; 0x438c <_Z9makeMorsePcPhS0_+0xda>
    438a:	70 c0       	rjmp	.+224    	; 0x446c <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    438c:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    4390:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4394:	6b c0       	rjmp	.+214    	; 0x446c <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4396:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    439a:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    439e:	89 17       	cp	r24, r25
    43a0:	90 f1       	brcs	.+100    	; 0x4406 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    43a2:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <_ZZ9makeMorsePcPhS0_E9charIndex>
    43a6:	8f 5f       	subi	r24, 0xFF	; 255
    43a8:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <_ZZ9makeMorsePcPhS0_E9charIndex>
    43ac:	df 01       	movw	r26, r30
    43ae:	a8 0f       	add	r26, r24
    43b0:	b1 1d       	adc	r27, r1
    43b2:	8c 91       	ld	r24, X
    43b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    43b8:	81 11       	cpse	r24, r1
    43ba:	19 c0       	rjmp	.+50     	; 0x43ee <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    43bc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    43c0:	88 23       	and	r24, r24
    43c2:	31 f0       	breq	.+12     	; 0x43d0 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    43c4:	80 81       	ld	r24, Z
    43c6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    43ca:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZZ9makeMorsePcPhS0_E9charIndex>
    43ce:	0f c0       	rjmp	.+30     	; 0x43ee <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    43d0:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    43d4:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    43d8:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    43dc:	91 e0       	ldi	r25, 0x01	; 1
    43de:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    43e2:	20 97       	sbiw	r28, 0x00	; 0
    43e4:	09 f0       	breq	.+2      	; 0x43e8 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    43e6:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    43e8:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    43ec:	5d c0       	rjmp	.+186    	; 0x44a8 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    43ee:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    43f2:	0e 94 66 20 	call	0x40cc	; 0x40cc <_Z12getMorseCharc>
    43f6:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    43fa:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    43fe:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4402:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4406:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    440a:	2d 3f       	cpi	r18, 0xFD	; 253
    440c:	00 f5       	brcc	.+64     	; 0x444e <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    440e:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4412:	31 e0       	ldi	r19, 0x01	; 1
    4414:	34 0f       	add	r19, r20
    4416:	30 93 91 05 	sts	0x0591, r19	; 0x800591 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	02 c0       	rjmp	.+4      	; 0x4424 <_Z9makeMorsePcPhS0_+0x172>
    4420:	88 0f       	add	r24, r24
    4422:	99 1f       	adc	r25, r25
    4424:	4a 95       	dec	r20
    4426:	e2 f7       	brpl	.-8      	; 0x4420 <_Z9makeMorsePcPhS0_+0x16e>
    4428:	82 23       	and	r24, r18
    442a:	21 f0       	breq	.+8      	; 0x4434 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    442c:	82 e0       	ldi	r24, 0x02	; 2
    442e:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4434:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    443e:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4442:	38 17       	cp	r19, r24
    4444:	98 f0       	brcs	.+38     	; 0x446c <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4446:	82 e0       	ldi	r24, 0x02	; 2
    4448:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    444c:	0f c0       	rjmp	.+30     	; 0x446c <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    444e:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    4452:	9f ef       	ldi	r25, 0xFF	; 255
    4454:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4458:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    445c:	84 30       	cpi	r24, 0x04	; 4
    445e:	20 f0       	brcs	.+8      	; 0x4468 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    4460:	84 50       	subi	r24, 0x04	; 4
    4462:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4466:	02 c0       	rjmp	.+4      	; 0x446c <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4468:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    446c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    4470:	8c 33       	cpi	r24, 0x3C	; 60
    4472:	31 f4       	brne	.+12     	; 0x4480 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    447a:	20 97       	sbiw	r28, 0x00	; 0
    447c:	41 f4       	brne	.+16     	; 0x448e <_Z9makeMorsePcPhS0_+0x1dc>
    447e:	14 c0       	rjmp	.+40     	; 0x44a8 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    4480:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4484:	20 97       	sbiw	r28, 0x00	; 0
    4486:	19 f4       	brne	.+6      	; 0x448e <_Z9makeMorsePcPhS0_+0x1dc>
    4488:	09 c0       	rjmp	.+18     	; 0x449c <_Z9makeMorsePcPhS0_+0x1ea>
    448a:	20 97       	sbiw	r28, 0x00	; 0
    448c:	19 f0       	breq	.+6      	; 0x4494 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    448e:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <_ZZ9makeMorsePcPhS0_E15completedString>
    4492:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4494:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4498:	81 11       	cpse	r24, r1
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    449c:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    44a0:	03 c0       	rjmp	.+6      	; 0x44a8 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	01 c0       	rjmp	.+2      	; 0x44a8 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    44a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	08 95       	ret

000044ae <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    44ae:	cf 92       	push	r12
    44b0:	df 92       	push	r13
    44b2:	ef 92       	push	r14
    44b4:	ff 92       	push	r15
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	cf 93       	push	r28
    44bc:	fc 01       	movw	r30, r24
    44be:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    44c0:	80 81       	ld	r24, Z
		if(!c)
    44c2:	88 23       	and	r24, r24
    44c4:	c1 f0       	breq	.+48     	; 0x44f6 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    44c6:	8f 01       	movw	r16, r30
    44c8:	0f 5f       	subi	r16, 0xFF	; 255
    44ca:	1f 4f       	sbci	r17, 0xFF	; 255
    44cc:	7f 01       	movw	r14, r30
    44ce:	94 e1       	ldi	r25, 0x14	; 20
    44d0:	e9 0e       	add	r14, r25
    44d2:	f1 1c       	adc	r15, r1
    44d4:	c0 e0       	ldi	r28, 0x00	; 0
    44d6:	05 c0       	rjmp	.+10     	; 0x44e2 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    44d8:	f8 01       	movw	r30, r16
    44da:	81 91       	ld	r24, Z+
    44dc:	8f 01       	movw	r16, r30
		if(!c)
    44de:	88 23       	and	r24, r24
    44e0:	59 f0       	breq	.+22     	; 0x44f8 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    44e2:	0e 94 66 20 	call	0x40cc	; 0x40cc <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    44e6:	6d 3f       	cpi	r22, 0xFD	; 253
    44e8:	08 f4       	brcc	.+2      	; 0x44ec <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    44ea:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    44ec:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    44ee:	0e 15       	cp	r16, r14
    44f0:	1f 05       	cpc	r17, r15
    44f2:	91 f7       	brne	.-28     	; 0x44d8 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    44f4:	01 c0       	rjmp	.+2      	; 0x44f8 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    44f6:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    44f8:	80 eb       	ldi	r24, 0xB0	; 176
    44fa:	94 e0       	ldi	r25, 0x04	; 4
    44fc:	b6 01       	movw	r22, r12
    44fe:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__udivmodhi4>
}
    4502:	c6 9f       	mul	r28, r22
    4504:	c0 01       	movw	r24, r0
    4506:	c7 9f       	mul	r28, r23
    4508:	90 0d       	add	r25, r0
    450a:	11 24       	eor	r1, r1
    450c:	cf 91       	pop	r28
    450e:	1f 91       	pop	r17
    4510:	0f 91       	pop	r16
    4512:	ff 90       	pop	r15
    4514:	ef 90       	pop	r14
    4516:	df 90       	pop	r13
    4518:	cf 90       	pop	r12
    451a:	08 95       	ret

0000451c <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    451c:	98 2f       	mov	r25, r24
    451e:	96 95       	lsr	r25
    4520:	96 95       	lsr	r25
    4522:	96 95       	lsr	r25
    4524:	9e 71       	andi	r25, 0x1E	; 30
    4526:	29 2f       	mov	r18, r25
    4528:	22 0f       	add	r18, r18
    452a:	22 0f       	add	r18, r18
    452c:	92 0f       	add	r25, r18
    452e:	8f 70       	andi	r24, 0x0F	; 15
    4530:	89 0f       	add	r24, r25
    4532:	08 95       	ret

00004534 <_Z8char2bcdPc>:
    4534:	fc 01       	movw	r30, r24
    4536:	20 81       	ld	r18, Z
    4538:	81 81       	ldd	r24, Z+1	; 0x01
    453a:	80 53       	subi	r24, 0x30	; 48
    453c:	f0 e1       	ldi	r31, 0x10	; 16
    453e:	2f 9f       	mul	r18, r31
    4540:	80 0d       	add	r24, r0
    4542:	11 24       	eor	r1, r1
    4544:	08 95       	ret

00004546 <_Z16rv3028_get_epochPbPc>:
    4546:	4f 92       	push	r4
    4548:	5f 92       	push	r5
    454a:	6f 92       	push	r6
    454c:	7f 92       	push	r7
    454e:	8f 92       	push	r8
    4550:	9f 92       	push	r9
    4552:	af 92       	push	r10
    4554:	bf 92       	push	r11
    4556:	cf 92       	push	r12
    4558:	df 92       	push	r13
    455a:	ef 92       	push	r14
    455c:	ff 92       	push	r15
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
    456a:	27 97       	sbiw	r28, 0x07	; 7
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	f8 94       	cli
    4570:	de bf       	out	0x3e, r29	; 62
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	cd bf       	out	0x3d, r28	; 61
    4576:	6c 01       	movw	r12, r24
    4578:	7b 01       	movw	r14, r22
    457a:	fe 01       	movw	r30, r28
    457c:	31 96       	adiw	r30, 0x01	; 1
    457e:	87 e0       	ldi	r24, 0x07	; 7
    4580:	df 01       	movw	r26, r30
    4582:	1d 92       	st	X+, r1
    4584:	8a 95       	dec	r24
    4586:	e9 f7       	brne	.-6      	; 0x4582 <_Z16rv3028_get_epochPbPc+0x3c>
    4588:	61 15       	cp	r22, r1
    458a:	71 05       	cpc	r23, r1
    458c:	f1 f0       	breq	.+60     	; 0x45ca <_Z16rv3028_get_epochPbPc+0x84>
    458e:	cb 01       	movw	r24, r22
    4590:	0a 96       	adiw	r24, 0x0a	; 10
    4592:	0e 94 9a 22 	call	0x4534	; 0x4534 <_Z8char2bcdPc>
    4596:	89 83       	std	Y+1, r24	; 0x01
    4598:	c7 01       	movw	r24, r14
    459a:	08 96       	adiw	r24, 0x08	; 8
    459c:	0e 94 9a 22 	call	0x4534	; 0x4534 <_Z8char2bcdPc>
    45a0:	8a 83       	std	Y+2, r24	; 0x02
    45a2:	c7 01       	movw	r24, r14
    45a4:	06 96       	adiw	r24, 0x06	; 6
    45a6:	0e 94 9a 22 	call	0x4534	; 0x4534 <_Z8char2bcdPc>
    45aa:	8b 83       	std	Y+3, r24	; 0x03
    45ac:	c7 01       	movw	r24, r14
    45ae:	04 96       	adiw	r24, 0x04	; 4
    45b0:	0e 94 9a 22 	call	0x4534	; 0x4534 <_Z8char2bcdPc>
    45b4:	8d 83       	std	Y+5, r24	; 0x05
    45b6:	c7 01       	movw	r24, r14
    45b8:	02 96       	adiw	r24, 0x02	; 2
    45ba:	0e 94 9a 22 	call	0x4534	; 0x4534 <_Z8char2bcdPc>
    45be:	8e 83       	std	Y+6, r24	; 0x06
    45c0:	c7 01       	movw	r24, r14
    45c2:	0e 94 9a 22 	call	0x4534	; 0x4534 <_Z8char2bcdPc>
    45c6:	8f 83       	std	Y+7, r24	; 0x07
    45c8:	0b c0       	rjmp	.+22     	; 0x45e0 <_Z16rv3028_get_epochPbPc+0x9a>
    45ca:	27 e0       	ldi	r18, 0x07	; 7
    45cc:	ae 01       	movw	r20, r28
    45ce:	4f 5f       	subi	r20, 0xFF	; 255
    45d0:	5f 4f       	sbci	r21, 0xFF	; 255
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	84 ea       	ldi	r24, 0xA4	; 164
    45d6:	0e 94 63 07 	call	0xec6	; 0xec6 <_Z15i2c_device_readhhPhh>
    45da:	38 2f       	mov	r19, r24
    45dc:	81 11       	cpse	r24, r1
    45de:	9b c0       	rjmp	.+310    	; 0x4716 <_Z16rv3028_get_epochPbPc+0x1d0>
    45e0:	8f 81       	ldd	r24, Y+7	; 0x07
    45e2:	0e 94 8e 22 	call	0x451c	; 0x451c <_Z7bcd2dech>
    45e6:	a8 2e       	mov	r10, r24
    45e8:	b1 2c       	mov	r11, r1
    45ea:	45 01       	movw	r8, r10
    45ec:	b0 e3       	ldi	r27, 0x30	; 48
    45ee:	8b 1a       	sub	r8, r27
    45f0:	b8 ef       	ldi	r27, 0xF8	; 248
    45f2:	9b 0a       	sbc	r9, r27
    45f4:	8e 81       	ldd	r24, Y+6	; 0x06
    45f6:	0e 94 8e 22 	call	0x451c	; 0x451c <_Z7bcd2dech>
    45fa:	08 2f       	mov	r16, r24
    45fc:	8d 81       	ldd	r24, Y+5	; 0x05
    45fe:	0e 94 8e 22 	call	0x451c	; 0x451c <_Z7bcd2dech>
    4602:	78 2e       	mov	r7, r24
    4604:	02 30       	cpi	r16, 0x02	; 2
    4606:	68 f0       	brcs	.+26     	; 0x4622 <_Z16rv3028_get_epochPbPc+0xdc>
    4608:	e1 2c       	mov	r14, r1
    460a:	f1 2c       	mov	r15, r1
    460c:	11 e0       	ldi	r17, 0x01	; 1
    460e:	61 2f       	mov	r22, r17
    4610:	c4 01       	movw	r24, r8
    4612:	0e 94 38 01 	call	0x270	; 0x270 <month_length>
    4616:	e8 0e       	add	r14, r24
    4618:	f1 1c       	adc	r15, r1
    461a:	1f 5f       	subi	r17, 0xFF	; 255
    461c:	01 13       	cpse	r16, r17
    461e:	f7 cf       	rjmp	.-18     	; 0x460e <_Z16rv3028_get_epochPbPc+0xc8>
    4620:	02 c0       	rjmp	.+4      	; 0x4626 <_Z16rv3028_get_epochPbPc+0xe0>
    4622:	e1 2c       	mov	r14, r1
    4624:	f1 2c       	mov	r15, r1
    4626:	87 2d       	mov	r24, r7
    4628:	77 0c       	add	r7, r7
    462a:	99 0b       	sbc	r25, r25
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	e8 0e       	add	r14, r24
    4630:	f9 1e       	adc	r15, r25
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	0e 94 8e 22 	call	0x451c	; 0x451c <_Z7bcd2dech>
    4638:	48 2e       	mov	r4, r24
    463a:	8a 81       	ldd	r24, Y+2	; 0x02
    463c:	0e 94 8e 22 	call	0x451c	; 0x451c <_Z7bcd2dech>
    4640:	18 2f       	mov	r17, r24
    4642:	8b 81       	ldd	r24, Y+3	; 0x03
    4644:	0e 94 8e 22 	call	0x451c	; 0x451c <_Z7bcd2dech>
    4648:	04 2c       	mov	r0, r4
    464a:	00 0c       	add	r0, r0
    464c:	55 08       	sbc	r5, r5
    464e:	ec e3       	ldi	r30, 0x3C	; 60
    4650:	1e 02       	muls	r17, r30
    4652:	40 0c       	add	r4, r0
    4654:	51 1c       	adc	r5, r1
    4656:	11 24       	eor	r1, r1
    4658:	05 2c       	mov	r0, r5
    465a:	00 0c       	add	r0, r0
    465c:	66 08       	sbc	r6, r6
    465e:	77 08       	sbc	r7, r7
    4660:	a8 2f       	mov	r26, r24
    4662:	88 0f       	add	r24, r24
    4664:	bb 0b       	sbc	r27, r27
    4666:	20 e1       	ldi	r18, 0x10	; 16
    4668:	3e e0       	ldi	r19, 0x0E	; 14
    466a:	0e 94 53 28 	call	0x50a6	; 0x50a6 <__usmulhisi3>
    466e:	46 0e       	add	r4, r22
    4670:	57 1e       	adc	r5, r23
    4672:	68 1e       	adc	r6, r24
    4674:	79 1e       	adc	r7, r25
    4676:	d7 01       	movw	r26, r14
    4678:	20 e8       	ldi	r18, 0x80	; 128
    467a:	31 e5       	ldi	r19, 0x51	; 81
    467c:	41 e0       	ldi	r20, 0x01	; 1
    467e:	50 e0       	ldi	r21, 0x00	; 0
    4680:	0e 94 65 28 	call	0x50ca	; 0x50ca <__mulshisi3>
    4684:	46 0e       	add	r4, r22
    4686:	57 1e       	adc	r5, r23
    4688:	68 1e       	adc	r6, r24
    468a:	79 1e       	adc	r7, r25
    468c:	d5 01       	movw	r26, r10
    468e:	5e 96       	adiw	r26, 0x1e	; 30
    4690:	20 e8       	ldi	r18, 0x80	; 128
    4692:	33 e3       	ldi	r19, 0x33	; 51
    4694:	41 ee       	ldi	r20, 0xE1	; 225
    4696:	51 e0       	ldi	r21, 0x01	; 1
    4698:	0e 94 65 28 	call	0x50ca	; 0x50ca <__mulshisi3>
    469c:	46 0e       	add	r4, r22
    469e:	57 1e       	adc	r5, r23
    46a0:	68 1e       	adc	r6, r24
    46a2:	79 1e       	adc	r7, r25
    46a4:	c5 01       	movw	r24, r10
    46a6:	4f 96       	adiw	r24, 0x1f	; 31
    46a8:	dc 01       	movw	r26, r24
    46aa:	0a f4       	brpl	.+2      	; 0x46ae <_Z16rv3028_get_epochPbPc+0x168>
    46ac:	13 96       	adiw	r26, 0x03	; 3
    46ae:	b5 95       	asr	r27
    46b0:	a7 95       	ror	r26
    46b2:	b5 95       	asr	r27
    46b4:	a7 95       	ror	r26
    46b6:	20 e8       	ldi	r18, 0x80	; 128
    46b8:	31 e5       	ldi	r19, 0x51	; 81
    46ba:	41 e0       	ldi	r20, 0x01	; 1
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	0e 94 65 28 	call	0x50ca	; 0x50ca <__mulshisi3>
    46c2:	46 0e       	add	r4, r22
    46c4:	57 1e       	adc	r5, r23
    46c6:	68 1e       	adc	r6, r24
    46c8:	79 1e       	adc	r7, r25
    46ca:	c5 01       	movw	r24, r10
    46cc:	8d 59       	subi	r24, 0x9D	; 157
    46ce:	9f 4f       	sbci	r25, 0xFF	; 255
    46d0:	64 e6       	ldi	r22, 0x64	; 100
    46d2:	70 e0       	ldi	r23, 0x00	; 0
    46d4:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    46d8:	db 01       	movw	r26, r22
    46da:	20 e8       	ldi	r18, 0x80	; 128
    46dc:	3e ea       	ldi	r19, 0xAE	; 174
    46de:	4e ef       	ldi	r20, 0xFE	; 254
    46e0:	5f ef       	ldi	r21, 0xFF	; 255
    46e2:	0e 94 65 28 	call	0x50ca	; 0x50ca <__mulshisi3>
    46e6:	46 0e       	add	r4, r22
    46e8:	57 1e       	adc	r5, r23
    46ea:	68 1e       	adc	r6, r24
    46ec:	79 1e       	adc	r7, r25
    46ee:	c5 01       	movw	r24, r10
    46f0:	81 57       	subi	r24, 0x71	; 113
    46f2:	9e 4f       	sbci	r25, 0xFE	; 254
    46f4:	60 e9       	ldi	r22, 0x90	; 144
    46f6:	71 e0       	ldi	r23, 0x01	; 1
    46f8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__divmodhi4>
    46fc:	db 01       	movw	r26, r22
    46fe:	20 e8       	ldi	r18, 0x80	; 128
    4700:	31 e5       	ldi	r19, 0x51	; 81
    4702:	41 e0       	ldi	r20, 0x01	; 1
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	0e 94 65 28 	call	0x50ca	; 0x50ca <__mulshisi3>
    470a:	64 0d       	add	r22, r4
    470c:	75 1d       	adc	r23, r5
    470e:	86 1d       	adc	r24, r6
    4710:	97 1d       	adc	r25, r7
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	03 c0       	rjmp	.+6      	; 0x471c <_Z16rv3028_get_epochPbPc+0x1d6>
    4716:	60 e0       	ldi	r22, 0x00	; 0
    4718:	70 e0       	ldi	r23, 0x00	; 0
    471a:	cb 01       	movw	r24, r22
    471c:	c1 14       	cp	r12, r1
    471e:	d1 04       	cpc	r13, r1
    4720:	31 f0       	breq	.+12     	; 0x472e <_Z16rv3028_get_epochPbPc+0x1e8>
    4722:	21 e0       	ldi	r18, 0x01	; 1
    4724:	31 11       	cpse	r19, r1
    4726:	01 c0       	rjmp	.+2      	; 0x472a <_Z16rv3028_get_epochPbPc+0x1e4>
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	d6 01       	movw	r26, r12
    472c:	2c 93       	st	X, r18
    472e:	27 96       	adiw	r28, 0x07	; 7
    4730:	0f b6       	in	r0, 0x3f	; 63
    4732:	f8 94       	cli
    4734:	de bf       	out	0x3e, r29	; 62
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	cd bf       	out	0x3d, r28	; 61
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	ff 90       	pop	r15
    4744:	ef 90       	pop	r14
    4746:	df 90       	pop	r13
    4748:	cf 90       	pop	r12
    474a:	bf 90       	pop	r11
    474c:	af 90       	pop	r10
    474e:	9f 90       	pop	r9
    4750:	8f 90       	pop	r8
    4752:	7f 90       	pop	r7
    4754:	6f 90       	pop	r6
    4756:	5f 90       	pop	r5
    4758:	4f 90       	pop	r4
    475a:	08 95       	ret

0000475c <_Z20rv3028_set_date_timePc>:
    475c:	cf 93       	push	r28
    475e:	df 93       	push	r29
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
    4764:	27 97       	sbiw	r28, 0x07	; 7
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	f8 94       	cli
    476a:	de bf       	out	0x3e, r29	; 62
    476c:	0f be       	out	0x3f, r0	; 63
    476e:	cd bf       	out	0x3d, r28	; 61
    4770:	21 e0       	ldi	r18, 0x01	; 1
    4772:	2c 83       	std	Y+4, r18	; 0x04
    4774:	dc 01       	movw	r26, r24
    4776:	0d 90       	ld	r0, X+
    4778:	00 20       	and	r0, r0
    477a:	e9 f7       	brne	.-6      	; 0x4776 <_Z20rv3028_set_date_timePc+0x1a>
    477c:	11 97       	sbiw	r26, 0x01	; 1
    477e:	a8 1b       	sub	r26, r24
    4780:	b9 0b       	sbc	r27, r25
    4782:	1c 97       	sbiw	r26, 0x0c	; 12
    4784:	0c f4       	brge	.+2      	; 0x4788 <_Z20rv3028_set_date_timePc+0x2c>
    4786:	3a c0       	rjmp	.+116    	; 0x47fc <_Z20rv3028_set_date_timePc+0xa0>
    4788:	fc 01       	movw	r30, r24
    478a:	92 85       	ldd	r25, Z+10	; 0x0a
    478c:	83 85       	ldd	r24, Z+11	; 0x0b
    478e:	80 53       	subi	r24, 0x30	; 48
    4790:	20 e1       	ldi	r18, 0x10	; 16
    4792:	92 9f       	mul	r25, r18
    4794:	80 0d       	add	r24, r0
    4796:	11 24       	eor	r1, r1
    4798:	89 83       	std	Y+1, r24	; 0x01
    479a:	90 85       	ldd	r25, Z+8	; 0x08
    479c:	81 85       	ldd	r24, Z+9	; 0x09
    479e:	80 53       	subi	r24, 0x30	; 48
    47a0:	20 e1       	ldi	r18, 0x10	; 16
    47a2:	92 9f       	mul	r25, r18
    47a4:	80 0d       	add	r24, r0
    47a6:	11 24       	eor	r1, r1
    47a8:	8a 83       	std	Y+2, r24	; 0x02
    47aa:	96 81       	ldd	r25, Z+6	; 0x06
    47ac:	87 81       	ldd	r24, Z+7	; 0x07
    47ae:	80 53       	subi	r24, 0x30	; 48
    47b0:	20 e1       	ldi	r18, 0x10	; 16
    47b2:	92 9f       	mul	r25, r18
    47b4:	80 0d       	add	r24, r0
    47b6:	11 24       	eor	r1, r1
    47b8:	8b 83       	std	Y+3, r24	; 0x03
    47ba:	94 81       	ldd	r25, Z+4	; 0x04
    47bc:	85 81       	ldd	r24, Z+5	; 0x05
    47be:	80 53       	subi	r24, 0x30	; 48
    47c0:	20 e1       	ldi	r18, 0x10	; 16
    47c2:	92 9f       	mul	r25, r18
    47c4:	80 0d       	add	r24, r0
    47c6:	11 24       	eor	r1, r1
    47c8:	8d 83       	std	Y+5, r24	; 0x05
    47ca:	92 81       	ldd	r25, Z+2	; 0x02
    47cc:	83 81       	ldd	r24, Z+3	; 0x03
    47ce:	80 53       	subi	r24, 0x30	; 48
    47d0:	20 e1       	ldi	r18, 0x10	; 16
    47d2:	92 9f       	mul	r25, r18
    47d4:	80 0d       	add	r24, r0
    47d6:	11 24       	eor	r1, r1
    47d8:	8e 83       	std	Y+6, r24	; 0x06
    47da:	90 81       	ld	r25, Z
    47dc:	81 81       	ldd	r24, Z+1	; 0x01
    47de:	80 53       	subi	r24, 0x30	; 48
    47e0:	20 e1       	ldi	r18, 0x10	; 16
    47e2:	92 9f       	mul	r25, r18
    47e4:	80 0d       	add	r24, r0
    47e6:	11 24       	eor	r1, r1
    47e8:	8f 83       	std	Y+7, r24	; 0x07
    47ea:	27 e0       	ldi	r18, 0x07	; 7
    47ec:	ae 01       	movw	r20, r28
    47ee:	4f 5f       	subi	r20, 0xFF	; 255
    47f0:	5f 4f       	sbci	r21, 0xFF	; 255
    47f2:	60 e0       	ldi	r22, 0x00	; 0
    47f4:	84 ea       	ldi	r24, 0xA4	; 164
    47f6:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z16i2c_device_writehhPhh>
    47fa:	01 c0       	rjmp	.+2      	; 0x47fe <_Z20rv3028_set_date_timePc+0xa2>
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	27 96       	adiw	r28, 0x07	; 7
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	cd bf       	out	0x3d, r28	; 61
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	08 95       	ret

00004810 <_Z21rv3028_set_offset_RAMj>:
    4810:	cf 93       	push	r28
    4812:	df 93       	push	r29
    4814:	00 d0       	rcall	.+0      	; 0x4816 <_Z21rv3028_set_offset_RAMj+0x6>
    4816:	cd b7       	in	r28, 0x3d	; 61
    4818:	de b7       	in	r29, 0x3e	; 62
    481a:	20 e1       	ldi	r18, 0x10	; 16
    481c:	2a 83       	std	Y+2, r18	; 0x02
    481e:	9c 01       	movw	r18, r24
    4820:	36 95       	lsr	r19
    4822:	27 95       	ror	r18
    4824:	29 83       	std	Y+1, r18	; 0x01
    4826:	80 ff       	sbrs	r24, 0
    4828:	02 c0       	rjmp	.+4      	; 0x482e <_Z21rv3028_set_offset_RAMj+0x1e>
    482a:	80 e9       	ldi	r24, 0x90	; 144
    482c:	8a 83       	std	Y+2, r24	; 0x02
    482e:	22 e0       	ldi	r18, 0x02	; 2
    4830:	ae 01       	movw	r20, r28
    4832:	4f 5f       	subi	r20, 0xFF	; 255
    4834:	5f 4f       	sbci	r21, 0xFF	; 255
    4836:	66 e3       	ldi	r22, 0x36	; 54
    4838:	84 ea       	ldi	r24, 0xA4	; 164
    483a:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z16i2c_device_writehhPhh>
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	08 95       	ret

00004848 <_Z18waitForEEPROMReadyv>:
    4848:	cf 93       	push	r28
    484a:	df 93       	push	r29
    484c:	1f 92       	push	r1
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	89 83       	std	Y+1, r24	; 0x01
    4856:	21 e0       	ldi	r18, 0x01	; 1
    4858:	ae 01       	movw	r20, r28
    485a:	4f 5f       	subi	r20, 0xFF	; 255
    485c:	5f 4f       	sbci	r21, 0xFF	; 255
    485e:	6e e0       	ldi	r22, 0x0E	; 14
    4860:	84 ea       	ldi	r24, 0xA4	; 164
    4862:	0e 94 63 07 	call	0xec6	; 0xec6 <_Z15i2c_device_readhhPhh>
    4866:	81 11       	cpse	r24, r1
    4868:	07 c0       	rjmp	.+14     	; 0x4878 <_Z18waitForEEPROMReadyv+0x30>
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	80 78       	andi	r24, 0x80	; 128
    486e:	89 83       	std	Y+1, r24	; 0x01
    4870:	81 11       	cpse	r24, r1
    4872:	f1 cf       	rjmp	.-30     	; 0x4856 <_Z18waitForEEPROMReadyv+0xe>
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	03 c0       	rjmp	.+6      	; 0x487e <_Z18waitForEEPROMReadyv+0x36>
    4878:	89 81       	ldd	r24, Y+1	; 0x01
    487a:	88 23       	and	r24, r24
    487c:	d9 f3       	breq	.-10     	; 0x4874 <_Z18waitForEEPROMReadyv+0x2c>
    487e:	0f 90       	pop	r0
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	08 95       	ret

00004886 <_Z20refreshRAMfromEEPROMv>:

		return( fail);
	}
	
	void refreshRAMfromEEPROM(void)
	{
    4886:	cf 93       	push	r28
    4888:	df 93       	push	r29
    488a:	1f 92       	push	r1
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    4890:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4892:	21 e0       	ldi	r18, 0x01	; 1
    4894:	ae 01       	movw	r20, r28
    4896:	4f 5f       	subi	r20, 0xFF	; 255
    4898:	5f 4f       	sbci	r21, 0xFF	; 255
    489a:	67 e2       	ldi	r22, 0x27	; 39
    489c:	84 ea       	ldi	r24, 0xA4	; 164
    489e:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    48a2:	0e 94 24 24 	call	0x4848	; 0x4848 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    48a6:	82 e1       	ldi	r24, 0x12	; 18
    48a8:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    48aa:	21 e0       	ldi	r18, 0x01	; 1
    48ac:	ae 01       	movw	r20, r28
    48ae:	4f 5f       	subi	r20, 0xFF	; 255
    48b0:	5f 4f       	sbci	r21, 0xFF	; 255
    48b2:	67 e2       	ldi	r22, 0x27	; 39
    48b4:	84 ea       	ldi	r24, 0xA4	; 164
    48b6:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    48ba:	0e 94 24 24 	call	0x4848	; 0x4848 <_Z18waitForEEPROMReadyv>
	}
    48be:	0f 90       	pop	r0
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	08 95       	ret

000048c6 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    48c6:	cf 93       	push	r28
    48c8:	df 93       	push	r29
    48ca:	00 d0       	rcall	.+0      	; 0x48cc <_Z21rv3028_get_offset_RAMv+0x6>
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;
		
		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    48d0:	0e 94 43 24 	call	0x4886	; 0x4886 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    48d4:	22 e0       	ldi	r18, 0x02	; 2
    48d6:	ae 01       	movw	r20, r28
    48d8:	4f 5f       	subi	r20, 0xFF	; 255
    48da:	5f 4f       	sbci	r21, 0xFF	; 255
    48dc:	66 e3       	ldi	r22, 0x36	; 54
    48de:	84 ea       	ldi	r24, 0xA4	; 164
    48e0:	0e 94 63 07 	call	0xec6	; 0xec6 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    48e4:	89 81       	ldd	r24, Y+1	; 0x01
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	88 0f       	add	r24, r24
    48ea:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    48ec:	2a 81       	ldd	r18, Y+2	; 0x02
    48ee:	22 23       	and	r18, r18
    48f0:	0c f4       	brge	.+2      	; 0x48f4 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    48f2:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	08 95       	ret

000048fe <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    48fe:	cf 93       	push	r28
    4900:	df 93       	push	r29
    4902:	00 d0       	rcall	.+0      	; 0x4904 <_Z13rv3028_1s_sqwv+0x6>
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    4908:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    490a:	1a 82       	std	Y+2, r1	; 0x02
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY			
			
			refreshRAMfromEEPROM();
    490c:	0e 94 43 24 	call	0x4886	; 0x4886 <_Z20refreshRAMfromEEPROMv>
			
			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    4910:	89 81       	ldd	r24, Y+1	; 0x01
    4912:	81 11       	cpse	r24, r1
    4914:	0c c0       	rjmp	.+24     	; 0x492e <_Z13rv3028_1s_sqwv+0x30>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    4916:	21 e0       	ldi	r18, 0x01	; 1
    4918:	ae 01       	movw	r20, r28
    491a:	4f 5f       	subi	r20, 0xFF	; 255
    491c:	5f 4f       	sbci	r21, 0xFF	; 255
    491e:	6e e0       	ldi	r22, 0x0E	; 14
    4920:	84 ea       	ldi	r24, 0xA4	; 164
    4922:	0e 94 63 07 	call	0xec6	; 0xec6 <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    4926:	89 81       	ldd	r24, Y+1	; 0x01
    4928:	8f 76       	andi	r24, 0x6F	; 111
    492a:	89 83       	std	Y+1, r24	; 0x01
    492c:	02 c0       	rjmp	.+4      	; 0x4932 <_Z13rv3028_1s_sqwv+0x34>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    492e:	80 e8       	ldi	r24, 0x80	; 128
    4930:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    4932:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    4934:	21 e0       	ldi	r18, 0x01	; 1
    4936:	ae 01       	movw	r20, r28
    4938:	4e 5f       	subi	r20, 0xFE	; 254
    493a:	5f 4f       	sbci	r21, 0xFF	; 255
    493c:	6e e0       	ldi	r22, 0x0E	; 14
    493e:	84 ea       	ldi	r24, 0xA4	; 164
    4940:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z16i2c_device_writehhPhh>

			return(status);
		}
    4944:	89 81       	ldd	r24, Y+1	; 0x01
    4946:	0f 90       	pop	r0
    4948:	0f 90       	pop	r0
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
    494e:	08 95       	ret

00004950 <_Z16rv3028_32kHz_sqwv>:


#endif  /* INIT_EEPROM_ONLY */

	void rv3028_32kHz_sqw(void)
	{
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	1f 92       	push	r1
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
		/* Just set RAM value */
		uint8_t byte = 0xC0;    /* FD = 32.768 kHz */
    495a:	80 ec       	ldi	r24, 0xC0	; 192
    495c:	89 83       	std	Y+1, r24	; 0x01

		i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_CLKOUT, &byte, 1);
    495e:	21 e0       	ldi	r18, 0x01	; 1
    4960:	ae 01       	movw	r20, r28
    4962:	4f 5f       	subi	r20, 0xFF	; 255
    4964:	5f 4f       	sbci	r21, 0xFF	; 255
    4966:	65 e3       	ldi	r22, 0x35	; 53
    4968:	84 ea       	ldi	r24, 0xA4	; 164
    496a:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z16i2c_device_writehhPhh>
	}
    496e:	0f 90       	pop	r0
    4970:	df 91       	pop	r29
    4972:	cf 91       	pop	r28
    4974:	08 95       	ret

00004976 <__subsf3>:
    4976:	50 58       	subi	r21, 0x80	; 128

00004978 <__addsf3>:
    4978:	bb 27       	eor	r27, r27
    497a:	aa 27       	eor	r26, r26
    497c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__addsf3x>
    4980:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__fp_round>
    4984:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__fp_pscA>
    4988:	38 f0       	brcs	.+14     	; 0x4998 <__addsf3+0x20>
    498a:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__fp_pscB>
    498e:	20 f0       	brcs	.+8      	; 0x4998 <__addsf3+0x20>
    4990:	39 f4       	brne	.+14     	; 0x49a0 <__addsf3+0x28>
    4992:	9f 3f       	cpi	r25, 0xFF	; 255
    4994:	19 f4       	brne	.+6      	; 0x499c <__addsf3+0x24>
    4996:	26 f4       	brtc	.+8      	; 0x49a0 <__addsf3+0x28>
    4998:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__fp_nan>
    499c:	0e f4       	brtc	.+2      	; 0x49a0 <__addsf3+0x28>
    499e:	e0 95       	com	r30
    49a0:	e7 fb       	bst	r30, 7
    49a2:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__fp_inf>

000049a6 <__addsf3x>:
    49a6:	e9 2f       	mov	r30, r25
    49a8:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__fp_split3>
    49ac:	58 f3       	brcs	.-42     	; 0x4984 <__addsf3+0xc>
    49ae:	ba 17       	cp	r27, r26
    49b0:	62 07       	cpc	r22, r18
    49b2:	73 07       	cpc	r23, r19
    49b4:	84 07       	cpc	r24, r20
    49b6:	95 07       	cpc	r25, r21
    49b8:	20 f0       	brcs	.+8      	; 0x49c2 <__addsf3x+0x1c>
    49ba:	79 f4       	brne	.+30     	; 0x49da <__addsf3x+0x34>
    49bc:	a6 f5       	brtc	.+104    	; 0x4a26 <__addsf3x+0x80>
    49be:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_zero>
    49c2:	0e f4       	brtc	.+2      	; 0x49c6 <__addsf3x+0x20>
    49c4:	e0 95       	com	r30
    49c6:	0b 2e       	mov	r0, r27
    49c8:	ba 2f       	mov	r27, r26
    49ca:	a0 2d       	mov	r26, r0
    49cc:	0b 01       	movw	r0, r22
    49ce:	b9 01       	movw	r22, r18
    49d0:	90 01       	movw	r18, r0
    49d2:	0c 01       	movw	r0, r24
    49d4:	ca 01       	movw	r24, r20
    49d6:	a0 01       	movw	r20, r0
    49d8:	11 24       	eor	r1, r1
    49da:	ff 27       	eor	r31, r31
    49dc:	59 1b       	sub	r21, r25
    49de:	99 f0       	breq	.+38     	; 0x4a06 <__addsf3x+0x60>
    49e0:	59 3f       	cpi	r21, 0xF9	; 249
    49e2:	50 f4       	brcc	.+20     	; 0x49f8 <__addsf3x+0x52>
    49e4:	50 3e       	cpi	r21, 0xE0	; 224
    49e6:	68 f1       	brcs	.+90     	; 0x4a42 <__addsf3x+0x9c>
    49e8:	1a 16       	cp	r1, r26
    49ea:	f0 40       	sbci	r31, 0x00	; 0
    49ec:	a2 2f       	mov	r26, r18
    49ee:	23 2f       	mov	r18, r19
    49f0:	34 2f       	mov	r19, r20
    49f2:	44 27       	eor	r20, r20
    49f4:	58 5f       	subi	r21, 0xF8	; 248
    49f6:	f3 cf       	rjmp	.-26     	; 0x49de <__addsf3x+0x38>
    49f8:	46 95       	lsr	r20
    49fa:	37 95       	ror	r19
    49fc:	27 95       	ror	r18
    49fe:	a7 95       	ror	r26
    4a00:	f0 40       	sbci	r31, 0x00	; 0
    4a02:	53 95       	inc	r21
    4a04:	c9 f7       	brne	.-14     	; 0x49f8 <__addsf3x+0x52>
    4a06:	7e f4       	brtc	.+30     	; 0x4a26 <__addsf3x+0x80>
    4a08:	1f 16       	cp	r1, r31
    4a0a:	ba 0b       	sbc	r27, r26
    4a0c:	62 0b       	sbc	r22, r18
    4a0e:	73 0b       	sbc	r23, r19
    4a10:	84 0b       	sbc	r24, r20
    4a12:	ba f0       	brmi	.+46     	; 0x4a42 <__addsf3x+0x9c>
    4a14:	91 50       	subi	r25, 0x01	; 1
    4a16:	a1 f0       	breq	.+40     	; 0x4a40 <__addsf3x+0x9a>
    4a18:	ff 0f       	add	r31, r31
    4a1a:	bb 1f       	adc	r27, r27
    4a1c:	66 1f       	adc	r22, r22
    4a1e:	77 1f       	adc	r23, r23
    4a20:	88 1f       	adc	r24, r24
    4a22:	c2 f7       	brpl	.-16     	; 0x4a14 <__addsf3x+0x6e>
    4a24:	0e c0       	rjmp	.+28     	; 0x4a42 <__addsf3x+0x9c>
    4a26:	ba 0f       	add	r27, r26
    4a28:	62 1f       	adc	r22, r18
    4a2a:	73 1f       	adc	r23, r19
    4a2c:	84 1f       	adc	r24, r20
    4a2e:	48 f4       	brcc	.+18     	; 0x4a42 <__addsf3x+0x9c>
    4a30:	87 95       	ror	r24
    4a32:	77 95       	ror	r23
    4a34:	67 95       	ror	r22
    4a36:	b7 95       	ror	r27
    4a38:	f7 95       	ror	r31
    4a3a:	9e 3f       	cpi	r25, 0xFE	; 254
    4a3c:	08 f0       	brcs	.+2      	; 0x4a40 <__addsf3x+0x9a>
    4a3e:	b0 cf       	rjmp	.-160    	; 0x49a0 <__addsf3+0x28>
    4a40:	93 95       	inc	r25
    4a42:	88 0f       	add	r24, r24
    4a44:	08 f0       	brcs	.+2      	; 0x4a48 <__addsf3x+0xa2>
    4a46:	99 27       	eor	r25, r25
    4a48:	ee 0f       	add	r30, r30
    4a4a:	97 95       	ror	r25
    4a4c:	87 95       	ror	r24
    4a4e:	08 95       	ret

00004a50 <__cmpsf2>:
    4a50:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__fp_cmp>
    4a54:	08 f4       	brcc	.+2      	; 0x4a58 <__cmpsf2+0x8>
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	08 95       	ret

00004a5a <cos>:
    4a5a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__fp_rempio2>
    4a5e:	e3 95       	inc	r30
    4a60:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__fp_sinus>

00004a64 <__divsf3>:
    4a64:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__divsf3x>
    4a68:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__fp_round>
    4a6c:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__fp_pscB>
    4a70:	58 f0       	brcs	.+22     	; 0x4a88 <__divsf3+0x24>
    4a72:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__fp_pscA>
    4a76:	40 f0       	brcs	.+16     	; 0x4a88 <__divsf3+0x24>
    4a78:	29 f4       	brne	.+10     	; 0x4a84 <__divsf3+0x20>
    4a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    4a7c:	29 f0       	breq	.+10     	; 0x4a88 <__divsf3+0x24>
    4a7e:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__fp_inf>
    4a82:	51 11       	cpse	r21, r1
    4a84:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__fp_szero>
    4a88:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__fp_nan>

00004a8c <__divsf3x>:
    4a8c:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__fp_split3>
    4a90:	68 f3       	brcs	.-38     	; 0x4a6c <__divsf3+0x8>

00004a92 <__divsf3_pse>:
    4a92:	99 23       	and	r25, r25
    4a94:	b1 f3       	breq	.-20     	; 0x4a82 <__divsf3+0x1e>
    4a96:	55 23       	and	r21, r21
    4a98:	91 f3       	breq	.-28     	; 0x4a7e <__divsf3+0x1a>
    4a9a:	95 1b       	sub	r25, r21
    4a9c:	55 0b       	sbc	r21, r21
    4a9e:	bb 27       	eor	r27, r27
    4aa0:	aa 27       	eor	r26, r26
    4aa2:	62 17       	cp	r22, r18
    4aa4:	73 07       	cpc	r23, r19
    4aa6:	84 07       	cpc	r24, r20
    4aa8:	38 f0       	brcs	.+14     	; 0x4ab8 <__divsf3_pse+0x26>
    4aaa:	9f 5f       	subi	r25, 0xFF	; 255
    4aac:	5f 4f       	sbci	r21, 0xFF	; 255
    4aae:	22 0f       	add	r18, r18
    4ab0:	33 1f       	adc	r19, r19
    4ab2:	44 1f       	adc	r20, r20
    4ab4:	aa 1f       	adc	r26, r26
    4ab6:	a9 f3       	breq	.-22     	; 0x4aa2 <__divsf3_pse+0x10>
    4ab8:	35 d0       	rcall	.+106    	; 0x4b24 <__divsf3_pse+0x92>
    4aba:	0e 2e       	mov	r0, r30
    4abc:	3a f0       	brmi	.+14     	; 0x4acc <__divsf3_pse+0x3a>
    4abe:	e0 e8       	ldi	r30, 0x80	; 128
    4ac0:	32 d0       	rcall	.+100    	; 0x4b26 <__divsf3_pse+0x94>
    4ac2:	91 50       	subi	r25, 0x01	; 1
    4ac4:	50 40       	sbci	r21, 0x00	; 0
    4ac6:	e6 95       	lsr	r30
    4ac8:	00 1c       	adc	r0, r0
    4aca:	ca f7       	brpl	.-14     	; 0x4abe <__divsf3_pse+0x2c>
    4acc:	2b d0       	rcall	.+86     	; 0x4b24 <__divsf3_pse+0x92>
    4ace:	fe 2f       	mov	r31, r30
    4ad0:	29 d0       	rcall	.+82     	; 0x4b24 <__divsf3_pse+0x92>
    4ad2:	66 0f       	add	r22, r22
    4ad4:	77 1f       	adc	r23, r23
    4ad6:	88 1f       	adc	r24, r24
    4ad8:	bb 1f       	adc	r27, r27
    4ada:	26 17       	cp	r18, r22
    4adc:	37 07       	cpc	r19, r23
    4ade:	48 07       	cpc	r20, r24
    4ae0:	ab 07       	cpc	r26, r27
    4ae2:	b0 e8       	ldi	r27, 0x80	; 128
    4ae4:	09 f0       	breq	.+2      	; 0x4ae8 <__divsf3_pse+0x56>
    4ae6:	bb 0b       	sbc	r27, r27
    4ae8:	80 2d       	mov	r24, r0
    4aea:	bf 01       	movw	r22, r30
    4aec:	ff 27       	eor	r31, r31
    4aee:	93 58       	subi	r25, 0x83	; 131
    4af0:	5f 4f       	sbci	r21, 0xFF	; 255
    4af2:	3a f0       	brmi	.+14     	; 0x4b02 <__divsf3_pse+0x70>
    4af4:	9e 3f       	cpi	r25, 0xFE	; 254
    4af6:	51 05       	cpc	r21, r1
    4af8:	78 f0       	brcs	.+30     	; 0x4b18 <__divsf3_pse+0x86>
    4afa:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__fp_inf>
    4afe:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__fp_szero>
    4b02:	5f 3f       	cpi	r21, 0xFF	; 255
    4b04:	e4 f3       	brlt	.-8      	; 0x4afe <__divsf3_pse+0x6c>
    4b06:	98 3e       	cpi	r25, 0xE8	; 232
    4b08:	d4 f3       	brlt	.-12     	; 0x4afe <__divsf3_pse+0x6c>
    4b0a:	86 95       	lsr	r24
    4b0c:	77 95       	ror	r23
    4b0e:	67 95       	ror	r22
    4b10:	b7 95       	ror	r27
    4b12:	f7 95       	ror	r31
    4b14:	9f 5f       	subi	r25, 0xFF	; 255
    4b16:	c9 f7       	brne	.-14     	; 0x4b0a <__divsf3_pse+0x78>
    4b18:	88 0f       	add	r24, r24
    4b1a:	91 1d       	adc	r25, r1
    4b1c:	96 95       	lsr	r25
    4b1e:	87 95       	ror	r24
    4b20:	97 f9       	bld	r25, 7
    4b22:	08 95       	ret
    4b24:	e1 e0       	ldi	r30, 0x01	; 1
    4b26:	66 0f       	add	r22, r22
    4b28:	77 1f       	adc	r23, r23
    4b2a:	88 1f       	adc	r24, r24
    4b2c:	bb 1f       	adc	r27, r27
    4b2e:	62 17       	cp	r22, r18
    4b30:	73 07       	cpc	r23, r19
    4b32:	84 07       	cpc	r24, r20
    4b34:	ba 07       	cpc	r27, r26
    4b36:	20 f0       	brcs	.+8      	; 0x4b40 <__divsf3_pse+0xae>
    4b38:	62 1b       	sub	r22, r18
    4b3a:	73 0b       	sbc	r23, r19
    4b3c:	84 0b       	sbc	r24, r20
    4b3e:	ba 0b       	sbc	r27, r26
    4b40:	ee 1f       	adc	r30, r30
    4b42:	88 f7       	brcc	.-30     	; 0x4b26 <__divsf3_pse+0x94>
    4b44:	e0 95       	com	r30
    4b46:	08 95       	ret

00004b48 <__fixsfsi>:
    4b48:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__fixunssfsi>
    4b4c:	68 94       	set
    4b4e:	b1 11       	cpse	r27, r1
    4b50:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__fp_szero>
    4b54:	08 95       	ret

00004b56 <__fixunssfsi>:
    4b56:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__fp_splitA>
    4b5a:	88 f0       	brcs	.+34     	; 0x4b7e <__fixunssfsi+0x28>
    4b5c:	9f 57       	subi	r25, 0x7F	; 127
    4b5e:	98 f0       	brcs	.+38     	; 0x4b86 <__fixunssfsi+0x30>
    4b60:	b9 2f       	mov	r27, r25
    4b62:	99 27       	eor	r25, r25
    4b64:	b7 51       	subi	r27, 0x17	; 23
    4b66:	b0 f0       	brcs	.+44     	; 0x4b94 <__fixunssfsi+0x3e>
    4b68:	e1 f0       	breq	.+56     	; 0x4ba2 <__fixunssfsi+0x4c>
    4b6a:	66 0f       	add	r22, r22
    4b6c:	77 1f       	adc	r23, r23
    4b6e:	88 1f       	adc	r24, r24
    4b70:	99 1f       	adc	r25, r25
    4b72:	1a f0       	brmi	.+6      	; 0x4b7a <__fixunssfsi+0x24>
    4b74:	ba 95       	dec	r27
    4b76:	c9 f7       	brne	.-14     	; 0x4b6a <__fixunssfsi+0x14>
    4b78:	14 c0       	rjmp	.+40     	; 0x4ba2 <__fixunssfsi+0x4c>
    4b7a:	b1 30       	cpi	r27, 0x01	; 1
    4b7c:	91 f0       	breq	.+36     	; 0x4ba2 <__fixunssfsi+0x4c>
    4b7e:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <__fp_zero>
    4b82:	b1 e0       	ldi	r27, 0x01	; 1
    4b84:	08 95       	ret
    4b86:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_zero>
    4b8a:	67 2f       	mov	r22, r23
    4b8c:	78 2f       	mov	r23, r24
    4b8e:	88 27       	eor	r24, r24
    4b90:	b8 5f       	subi	r27, 0xF8	; 248
    4b92:	39 f0       	breq	.+14     	; 0x4ba2 <__fixunssfsi+0x4c>
    4b94:	b9 3f       	cpi	r27, 0xF9	; 249
    4b96:	cc f3       	brlt	.-14     	; 0x4b8a <__fixunssfsi+0x34>
    4b98:	86 95       	lsr	r24
    4b9a:	77 95       	ror	r23
    4b9c:	67 95       	ror	r22
    4b9e:	b3 95       	inc	r27
    4ba0:	d9 f7       	brne	.-10     	; 0x4b98 <__fixunssfsi+0x42>
    4ba2:	3e f4       	brtc	.+14     	; 0x4bb2 <__fixunssfsi+0x5c>
    4ba4:	90 95       	com	r25
    4ba6:	80 95       	com	r24
    4ba8:	70 95       	com	r23
    4baa:	61 95       	neg	r22
    4bac:	7f 4f       	sbci	r23, 0xFF	; 255
    4bae:	8f 4f       	sbci	r24, 0xFF	; 255
    4bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb2:	08 95       	ret

00004bb4 <__floatunsisf>:
    4bb4:	e8 94       	clt
    4bb6:	09 c0       	rjmp	.+18     	; 0x4bca <__floatsisf+0x12>

00004bb8 <__floatsisf>:
    4bb8:	97 fb       	bst	r25, 7
    4bba:	3e f4       	brtc	.+14     	; 0x4bca <__floatsisf+0x12>
    4bbc:	90 95       	com	r25
    4bbe:	80 95       	com	r24
    4bc0:	70 95       	com	r23
    4bc2:	61 95       	neg	r22
    4bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bca:	99 23       	and	r25, r25
    4bcc:	a9 f0       	breq	.+42     	; 0x4bf8 <__floatsisf+0x40>
    4bce:	f9 2f       	mov	r31, r25
    4bd0:	96 e9       	ldi	r25, 0x96	; 150
    4bd2:	bb 27       	eor	r27, r27
    4bd4:	93 95       	inc	r25
    4bd6:	f6 95       	lsr	r31
    4bd8:	87 95       	ror	r24
    4bda:	77 95       	ror	r23
    4bdc:	67 95       	ror	r22
    4bde:	b7 95       	ror	r27
    4be0:	f1 11       	cpse	r31, r1
    4be2:	f8 cf       	rjmp	.-16     	; 0x4bd4 <__floatsisf+0x1c>
    4be4:	fa f4       	brpl	.+62     	; 0x4c24 <__floatsisf+0x6c>
    4be6:	bb 0f       	add	r27, r27
    4be8:	11 f4       	brne	.+4      	; 0x4bee <__floatsisf+0x36>
    4bea:	60 ff       	sbrs	r22, 0
    4bec:	1b c0       	rjmp	.+54     	; 0x4c24 <__floatsisf+0x6c>
    4bee:	6f 5f       	subi	r22, 0xFF	; 255
    4bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    4bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf6:	16 c0       	rjmp	.+44     	; 0x4c24 <__floatsisf+0x6c>
    4bf8:	88 23       	and	r24, r24
    4bfa:	11 f0       	breq	.+4      	; 0x4c00 <__floatsisf+0x48>
    4bfc:	96 e9       	ldi	r25, 0x96	; 150
    4bfe:	11 c0       	rjmp	.+34     	; 0x4c22 <__floatsisf+0x6a>
    4c00:	77 23       	and	r23, r23
    4c02:	21 f0       	breq	.+8      	; 0x4c0c <__floatsisf+0x54>
    4c04:	9e e8       	ldi	r25, 0x8E	; 142
    4c06:	87 2f       	mov	r24, r23
    4c08:	76 2f       	mov	r23, r22
    4c0a:	05 c0       	rjmp	.+10     	; 0x4c16 <__floatsisf+0x5e>
    4c0c:	66 23       	and	r22, r22
    4c0e:	71 f0       	breq	.+28     	; 0x4c2c <__floatsisf+0x74>
    4c10:	96 e8       	ldi	r25, 0x86	; 134
    4c12:	86 2f       	mov	r24, r22
    4c14:	70 e0       	ldi	r23, 0x00	; 0
    4c16:	60 e0       	ldi	r22, 0x00	; 0
    4c18:	2a f0       	brmi	.+10     	; 0x4c24 <__floatsisf+0x6c>
    4c1a:	9a 95       	dec	r25
    4c1c:	66 0f       	add	r22, r22
    4c1e:	77 1f       	adc	r23, r23
    4c20:	88 1f       	adc	r24, r24
    4c22:	da f7       	brpl	.-10     	; 0x4c1a <__floatsisf+0x62>
    4c24:	88 0f       	add	r24, r24
    4c26:	96 95       	lsr	r25
    4c28:	87 95       	ror	r24
    4c2a:	97 f9       	bld	r25, 7
    4c2c:	08 95       	ret

00004c2e <__fp_cmp>:
    4c2e:	99 0f       	add	r25, r25
    4c30:	00 08       	sbc	r0, r0
    4c32:	55 0f       	add	r21, r21
    4c34:	aa 0b       	sbc	r26, r26
    4c36:	e0 e8       	ldi	r30, 0x80	; 128
    4c38:	fe ef       	ldi	r31, 0xFE	; 254
    4c3a:	16 16       	cp	r1, r22
    4c3c:	17 06       	cpc	r1, r23
    4c3e:	e8 07       	cpc	r30, r24
    4c40:	f9 07       	cpc	r31, r25
    4c42:	c0 f0       	brcs	.+48     	; 0x4c74 <__fp_cmp+0x46>
    4c44:	12 16       	cp	r1, r18
    4c46:	13 06       	cpc	r1, r19
    4c48:	e4 07       	cpc	r30, r20
    4c4a:	f5 07       	cpc	r31, r21
    4c4c:	98 f0       	brcs	.+38     	; 0x4c74 <__fp_cmp+0x46>
    4c4e:	62 1b       	sub	r22, r18
    4c50:	73 0b       	sbc	r23, r19
    4c52:	84 0b       	sbc	r24, r20
    4c54:	95 0b       	sbc	r25, r21
    4c56:	39 f4       	brne	.+14     	; 0x4c66 <__fp_cmp+0x38>
    4c58:	0a 26       	eor	r0, r26
    4c5a:	61 f0       	breq	.+24     	; 0x4c74 <__fp_cmp+0x46>
    4c5c:	23 2b       	or	r18, r19
    4c5e:	24 2b       	or	r18, r20
    4c60:	25 2b       	or	r18, r21
    4c62:	21 f4       	brne	.+8      	; 0x4c6c <__fp_cmp+0x3e>
    4c64:	08 95       	ret
    4c66:	0a 26       	eor	r0, r26
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <__fp_cmp+0x3e>
    4c6a:	a1 40       	sbci	r26, 0x01	; 1
    4c6c:	a6 95       	lsr	r26
    4c6e:	8f ef       	ldi	r24, 0xFF	; 255
    4c70:	81 1d       	adc	r24, r1
    4c72:	81 1d       	adc	r24, r1
    4c74:	08 95       	ret

00004c76 <__fp_inf>:
    4c76:	97 f9       	bld	r25, 7
    4c78:	9f 67       	ori	r25, 0x7F	; 127
    4c7a:	80 e8       	ldi	r24, 0x80	; 128
    4c7c:	70 e0       	ldi	r23, 0x00	; 0
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	08 95       	ret

00004c82 <__fp_nan>:
    4c82:	9f ef       	ldi	r25, 0xFF	; 255
    4c84:	80 ec       	ldi	r24, 0xC0	; 192
    4c86:	08 95       	ret

00004c88 <__fp_pscA>:
    4c88:	00 24       	eor	r0, r0
    4c8a:	0a 94       	dec	r0
    4c8c:	16 16       	cp	r1, r22
    4c8e:	17 06       	cpc	r1, r23
    4c90:	18 06       	cpc	r1, r24
    4c92:	09 06       	cpc	r0, r25
    4c94:	08 95       	ret

00004c96 <__fp_pscB>:
    4c96:	00 24       	eor	r0, r0
    4c98:	0a 94       	dec	r0
    4c9a:	12 16       	cp	r1, r18
    4c9c:	13 06       	cpc	r1, r19
    4c9e:	14 06       	cpc	r1, r20
    4ca0:	05 06       	cpc	r0, r21
    4ca2:	08 95       	ret
    4ca4:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__fp_nan>

00004ca8 <__fp_rempio2>:
    4ca8:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__fp_splitA>
    4cac:	d8 f3       	brcs	.-10     	; 0x4ca4 <__fp_pscB+0xe>
    4cae:	e8 94       	clt
    4cb0:	e0 e0       	ldi	r30, 0x00	; 0
    4cb2:	bb 27       	eor	r27, r27
    4cb4:	9f 57       	subi	r25, 0x7F	; 127
    4cb6:	f0 f0       	brcs	.+60     	; 0x4cf4 <__fp_rempio2+0x4c>
    4cb8:	2a ed       	ldi	r18, 0xDA	; 218
    4cba:	3f e0       	ldi	r19, 0x0F	; 15
    4cbc:	49 ec       	ldi	r20, 0xC9	; 201
    4cbe:	06 c0       	rjmp	.+12     	; 0x4ccc <__fp_rempio2+0x24>
    4cc0:	ee 0f       	add	r30, r30
    4cc2:	bb 0f       	add	r27, r27
    4cc4:	66 1f       	adc	r22, r22
    4cc6:	77 1f       	adc	r23, r23
    4cc8:	88 1f       	adc	r24, r24
    4cca:	28 f0       	brcs	.+10     	; 0x4cd6 <__fp_rempio2+0x2e>
    4ccc:	b2 3a       	cpi	r27, 0xA2	; 162
    4cce:	62 07       	cpc	r22, r18
    4cd0:	73 07       	cpc	r23, r19
    4cd2:	84 07       	cpc	r24, r20
    4cd4:	28 f0       	brcs	.+10     	; 0x4ce0 <__fp_rempio2+0x38>
    4cd6:	b2 5a       	subi	r27, 0xA2	; 162
    4cd8:	62 0b       	sbc	r22, r18
    4cda:	73 0b       	sbc	r23, r19
    4cdc:	84 0b       	sbc	r24, r20
    4cde:	e3 95       	inc	r30
    4ce0:	9a 95       	dec	r25
    4ce2:	72 f7       	brpl	.-36     	; 0x4cc0 <__fp_rempio2+0x18>
    4ce4:	80 38       	cpi	r24, 0x80	; 128
    4ce6:	30 f4       	brcc	.+12     	; 0x4cf4 <__fp_rempio2+0x4c>
    4ce8:	9a 95       	dec	r25
    4cea:	bb 0f       	add	r27, r27
    4cec:	66 1f       	adc	r22, r22
    4cee:	77 1f       	adc	r23, r23
    4cf0:	88 1f       	adc	r24, r24
    4cf2:	d2 f7       	brpl	.-12     	; 0x4ce8 <__fp_rempio2+0x40>
    4cf4:	90 48       	sbci	r25, 0x80	; 128
    4cf6:	0c 94 7e 27 	jmp	0x4efc	; 0x4efc <__fp_mpack_finite>

00004cfa <__fp_round>:
    4cfa:	09 2e       	mov	r0, r25
    4cfc:	03 94       	inc	r0
    4cfe:	00 0c       	add	r0, r0
    4d00:	11 f4       	brne	.+4      	; 0x4d06 <__fp_round+0xc>
    4d02:	88 23       	and	r24, r24
    4d04:	52 f0       	brmi	.+20     	; 0x4d1a <__fp_round+0x20>
    4d06:	bb 0f       	add	r27, r27
    4d08:	40 f4       	brcc	.+16     	; 0x4d1a <__fp_round+0x20>
    4d0a:	bf 2b       	or	r27, r31
    4d0c:	11 f4       	brne	.+4      	; 0x4d12 <__fp_round+0x18>
    4d0e:	60 ff       	sbrs	r22, 0
    4d10:	04 c0       	rjmp	.+8      	; 0x4d1a <__fp_round+0x20>
    4d12:	6f 5f       	subi	r22, 0xFF	; 255
    4d14:	7f 4f       	sbci	r23, 0xFF	; 255
    4d16:	8f 4f       	sbci	r24, 0xFF	; 255
    4d18:	9f 4f       	sbci	r25, 0xFF	; 255
    4d1a:	08 95       	ret

00004d1c <__fp_sinus>:
    4d1c:	ef 93       	push	r30
    4d1e:	e0 ff       	sbrs	r30, 0
    4d20:	07 c0       	rjmp	.+14     	; 0x4d30 <__fp_sinus+0x14>
    4d22:	a2 ea       	ldi	r26, 0xA2	; 162
    4d24:	2a ed       	ldi	r18, 0xDA	; 218
    4d26:	3f e0       	ldi	r19, 0x0F	; 15
    4d28:	49 ec       	ldi	r20, 0xC9	; 201
    4d2a:	5f eb       	ldi	r21, 0xBF	; 191
    4d2c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__addsf3x>
    4d30:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__fp_round>
    4d34:	0f 90       	pop	r0
    4d36:	03 94       	inc	r0
    4d38:	01 fc       	sbrc	r0, 1
    4d3a:	90 58       	subi	r25, 0x80	; 128
    4d3c:	ea ef       	ldi	r30, 0xFA	; 250
    4d3e:	f1 e0       	ldi	r31, 0x01	; 1
    4d40:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <__fp_powsodd>

00004d44 <__fp_split3>:
    4d44:	57 fd       	sbrc	r21, 7
    4d46:	90 58       	subi	r25, 0x80	; 128
    4d48:	44 0f       	add	r20, r20
    4d4a:	55 1f       	adc	r21, r21
    4d4c:	59 f0       	breq	.+22     	; 0x4d64 <__fp_splitA+0x10>
    4d4e:	5f 3f       	cpi	r21, 0xFF	; 255
    4d50:	71 f0       	breq	.+28     	; 0x4d6e <__fp_splitA+0x1a>
    4d52:	47 95       	ror	r20

00004d54 <__fp_splitA>:
    4d54:	88 0f       	add	r24, r24
    4d56:	97 fb       	bst	r25, 7
    4d58:	99 1f       	adc	r25, r25
    4d5a:	61 f0       	breq	.+24     	; 0x4d74 <__fp_splitA+0x20>
    4d5c:	9f 3f       	cpi	r25, 0xFF	; 255
    4d5e:	79 f0       	breq	.+30     	; 0x4d7e <__fp_splitA+0x2a>
    4d60:	87 95       	ror	r24
    4d62:	08 95       	ret
    4d64:	12 16       	cp	r1, r18
    4d66:	13 06       	cpc	r1, r19
    4d68:	14 06       	cpc	r1, r20
    4d6a:	55 1f       	adc	r21, r21
    4d6c:	f2 cf       	rjmp	.-28     	; 0x4d52 <__fp_split3+0xe>
    4d6e:	46 95       	lsr	r20
    4d70:	f1 df       	rcall	.-30     	; 0x4d54 <__fp_splitA>
    4d72:	08 c0       	rjmp	.+16     	; 0x4d84 <__fp_splitA+0x30>
    4d74:	16 16       	cp	r1, r22
    4d76:	17 06       	cpc	r1, r23
    4d78:	18 06       	cpc	r1, r24
    4d7a:	99 1f       	adc	r25, r25
    4d7c:	f1 cf       	rjmp	.-30     	; 0x4d60 <__fp_splitA+0xc>
    4d7e:	86 95       	lsr	r24
    4d80:	71 05       	cpc	r23, r1
    4d82:	61 05       	cpc	r22, r1
    4d84:	08 94       	sec
    4d86:	08 95       	ret

00004d88 <__fp_zero>:
    4d88:	e8 94       	clt

00004d8a <__fp_szero>:
    4d8a:	bb 27       	eor	r27, r27
    4d8c:	66 27       	eor	r22, r22
    4d8e:	77 27       	eor	r23, r23
    4d90:	cb 01       	movw	r24, r22
    4d92:	97 f9       	bld	r25, 7
    4d94:	08 95       	ret

00004d96 <__gesf2>:
    4d96:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__fp_cmp>
    4d9a:	08 f4       	brcc	.+2      	; 0x4d9e <__gesf2+0x8>
    4d9c:	8f ef       	ldi	r24, 0xFF	; 255
    4d9e:	08 95       	ret

00004da0 <__mulsf3>:
    4da0:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__mulsf3x>
    4da4:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__fp_round>
    4da8:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__fp_pscA>
    4dac:	38 f0       	brcs	.+14     	; 0x4dbc <__mulsf3+0x1c>
    4dae:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__fp_pscB>
    4db2:	20 f0       	brcs	.+8      	; 0x4dbc <__mulsf3+0x1c>
    4db4:	95 23       	and	r25, r21
    4db6:	11 f0       	breq	.+4      	; 0x4dbc <__mulsf3+0x1c>
    4db8:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__fp_inf>
    4dbc:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__fp_nan>
    4dc0:	11 24       	eor	r1, r1
    4dc2:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__fp_szero>

00004dc6 <__mulsf3x>:
    4dc6:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__fp_split3>
    4dca:	70 f3       	brcs	.-36     	; 0x4da8 <__mulsf3+0x8>

00004dcc <__mulsf3_pse>:
    4dcc:	95 9f       	mul	r25, r21
    4dce:	c1 f3       	breq	.-16     	; 0x4dc0 <__mulsf3+0x20>
    4dd0:	95 0f       	add	r25, r21
    4dd2:	50 e0       	ldi	r21, 0x00	; 0
    4dd4:	55 1f       	adc	r21, r21
    4dd6:	62 9f       	mul	r22, r18
    4dd8:	f0 01       	movw	r30, r0
    4dda:	72 9f       	mul	r23, r18
    4ddc:	bb 27       	eor	r27, r27
    4dde:	f0 0d       	add	r31, r0
    4de0:	b1 1d       	adc	r27, r1
    4de2:	63 9f       	mul	r22, r19
    4de4:	aa 27       	eor	r26, r26
    4de6:	f0 0d       	add	r31, r0
    4de8:	b1 1d       	adc	r27, r1
    4dea:	aa 1f       	adc	r26, r26
    4dec:	64 9f       	mul	r22, r20
    4dee:	66 27       	eor	r22, r22
    4df0:	b0 0d       	add	r27, r0
    4df2:	a1 1d       	adc	r26, r1
    4df4:	66 1f       	adc	r22, r22
    4df6:	82 9f       	mul	r24, r18
    4df8:	22 27       	eor	r18, r18
    4dfa:	b0 0d       	add	r27, r0
    4dfc:	a1 1d       	adc	r26, r1
    4dfe:	62 1f       	adc	r22, r18
    4e00:	73 9f       	mul	r23, r19
    4e02:	b0 0d       	add	r27, r0
    4e04:	a1 1d       	adc	r26, r1
    4e06:	62 1f       	adc	r22, r18
    4e08:	83 9f       	mul	r24, r19
    4e0a:	a0 0d       	add	r26, r0
    4e0c:	61 1d       	adc	r22, r1
    4e0e:	22 1f       	adc	r18, r18
    4e10:	74 9f       	mul	r23, r20
    4e12:	33 27       	eor	r19, r19
    4e14:	a0 0d       	add	r26, r0
    4e16:	61 1d       	adc	r22, r1
    4e18:	23 1f       	adc	r18, r19
    4e1a:	84 9f       	mul	r24, r20
    4e1c:	60 0d       	add	r22, r0
    4e1e:	21 1d       	adc	r18, r1
    4e20:	82 2f       	mov	r24, r18
    4e22:	76 2f       	mov	r23, r22
    4e24:	6a 2f       	mov	r22, r26
    4e26:	11 24       	eor	r1, r1
    4e28:	9f 57       	subi	r25, 0x7F	; 127
    4e2a:	50 40       	sbci	r21, 0x00	; 0
    4e2c:	9a f0       	brmi	.+38     	; 0x4e54 <__mulsf3_pse+0x88>
    4e2e:	f1 f0       	breq	.+60     	; 0x4e6c <__mulsf3_pse+0xa0>
    4e30:	88 23       	and	r24, r24
    4e32:	4a f0       	brmi	.+18     	; 0x4e46 <__mulsf3_pse+0x7a>
    4e34:	ee 0f       	add	r30, r30
    4e36:	ff 1f       	adc	r31, r31
    4e38:	bb 1f       	adc	r27, r27
    4e3a:	66 1f       	adc	r22, r22
    4e3c:	77 1f       	adc	r23, r23
    4e3e:	88 1f       	adc	r24, r24
    4e40:	91 50       	subi	r25, 0x01	; 1
    4e42:	50 40       	sbci	r21, 0x00	; 0
    4e44:	a9 f7       	brne	.-22     	; 0x4e30 <__mulsf3_pse+0x64>
    4e46:	9e 3f       	cpi	r25, 0xFE	; 254
    4e48:	51 05       	cpc	r21, r1
    4e4a:	80 f0       	brcs	.+32     	; 0x4e6c <__mulsf3_pse+0xa0>
    4e4c:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__fp_inf>
    4e50:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__fp_szero>
    4e54:	5f 3f       	cpi	r21, 0xFF	; 255
    4e56:	e4 f3       	brlt	.-8      	; 0x4e50 <__mulsf3_pse+0x84>
    4e58:	98 3e       	cpi	r25, 0xE8	; 232
    4e5a:	d4 f3       	brlt	.-12     	; 0x4e50 <__mulsf3_pse+0x84>
    4e5c:	86 95       	lsr	r24
    4e5e:	77 95       	ror	r23
    4e60:	67 95       	ror	r22
    4e62:	b7 95       	ror	r27
    4e64:	f7 95       	ror	r31
    4e66:	e7 95       	ror	r30
    4e68:	9f 5f       	subi	r25, 0xFF	; 255
    4e6a:	c1 f7       	brne	.-16     	; 0x4e5c <__mulsf3_pse+0x90>
    4e6c:	fe 2b       	or	r31, r30
    4e6e:	88 0f       	add	r24, r24
    4e70:	91 1d       	adc	r25, r1
    4e72:	96 95       	lsr	r25
    4e74:	87 95       	ror	r24
    4e76:	97 f9       	bld	r25, 7
    4e78:	08 95       	ret

00004e7a <round>:
    4e7a:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__fp_splitA>
    4e7e:	e8 f0       	brcs	.+58     	; 0x4eba <round+0x40>
    4e80:	9e 37       	cpi	r25, 0x7E	; 126
    4e82:	e8 f0       	brcs	.+58     	; 0x4ebe <round+0x44>
    4e84:	96 39       	cpi	r25, 0x96	; 150
    4e86:	b8 f4       	brcc	.+46     	; 0x4eb6 <round+0x3c>
    4e88:	9e 38       	cpi	r25, 0x8E	; 142
    4e8a:	48 f4       	brcc	.+18     	; 0x4e9e <round+0x24>
    4e8c:	67 2f       	mov	r22, r23
    4e8e:	78 2f       	mov	r23, r24
    4e90:	88 27       	eor	r24, r24
    4e92:	98 5f       	subi	r25, 0xF8	; 248
    4e94:	f9 cf       	rjmp	.-14     	; 0x4e88 <round+0xe>
    4e96:	86 95       	lsr	r24
    4e98:	77 95       	ror	r23
    4e9a:	67 95       	ror	r22
    4e9c:	93 95       	inc	r25
    4e9e:	95 39       	cpi	r25, 0x95	; 149
    4ea0:	d0 f3       	brcs	.-12     	; 0x4e96 <round+0x1c>
    4ea2:	b6 2f       	mov	r27, r22
    4ea4:	b1 70       	andi	r27, 0x01	; 1
    4ea6:	6b 0f       	add	r22, r27
    4ea8:	71 1d       	adc	r23, r1
    4eaa:	81 1d       	adc	r24, r1
    4eac:	20 f4       	brcc	.+8      	; 0x4eb6 <round+0x3c>
    4eae:	87 95       	ror	r24
    4eb0:	77 95       	ror	r23
    4eb2:	67 95       	ror	r22
    4eb4:	93 95       	inc	r25
    4eb6:	0c 94 61 27 	jmp	0x4ec2	; 0x4ec2 <__fp_mintl>
    4eba:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <__fp_mpack>
    4ebe:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__fp_szero>

00004ec2 <__fp_mintl>:
    4ec2:	88 23       	and	r24, r24
    4ec4:	71 f4       	brne	.+28     	; 0x4ee2 <__fp_mintl+0x20>
    4ec6:	77 23       	and	r23, r23
    4ec8:	21 f0       	breq	.+8      	; 0x4ed2 <__fp_mintl+0x10>
    4eca:	98 50       	subi	r25, 0x08	; 8
    4ecc:	87 2b       	or	r24, r23
    4ece:	76 2f       	mov	r23, r22
    4ed0:	07 c0       	rjmp	.+14     	; 0x4ee0 <__fp_mintl+0x1e>
    4ed2:	66 23       	and	r22, r22
    4ed4:	11 f4       	brne	.+4      	; 0x4eda <__fp_mintl+0x18>
    4ed6:	99 27       	eor	r25, r25
    4ed8:	0d c0       	rjmp	.+26     	; 0x4ef4 <__fp_mintl+0x32>
    4eda:	90 51       	subi	r25, 0x10	; 16
    4edc:	86 2b       	or	r24, r22
    4ede:	70 e0       	ldi	r23, 0x00	; 0
    4ee0:	60 e0       	ldi	r22, 0x00	; 0
    4ee2:	2a f0       	brmi	.+10     	; 0x4eee <__fp_mintl+0x2c>
    4ee4:	9a 95       	dec	r25
    4ee6:	66 0f       	add	r22, r22
    4ee8:	77 1f       	adc	r23, r23
    4eea:	88 1f       	adc	r24, r24
    4eec:	da f7       	brpl	.-10     	; 0x4ee4 <__fp_mintl+0x22>
    4eee:	88 0f       	add	r24, r24
    4ef0:	96 95       	lsr	r25
    4ef2:	87 95       	ror	r24
    4ef4:	97 f9       	bld	r25, 7
    4ef6:	08 95       	ret

00004ef8 <__fp_mpack>:
    4ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    4efa:	31 f0       	breq	.+12     	; 0x4f08 <__fp_mpack_finite+0xc>

00004efc <__fp_mpack_finite>:
    4efc:	91 50       	subi	r25, 0x01	; 1
    4efe:	20 f4       	brcc	.+8      	; 0x4f08 <__fp_mpack_finite+0xc>
    4f00:	87 95       	ror	r24
    4f02:	77 95       	ror	r23
    4f04:	67 95       	ror	r22
    4f06:	b7 95       	ror	r27
    4f08:	88 0f       	add	r24, r24
    4f0a:	91 1d       	adc	r25, r1
    4f0c:	96 95       	lsr	r25
    4f0e:	87 95       	ror	r24
    4f10:	97 f9       	bld	r25, 7
    4f12:	08 95       	ret

00004f14 <__fp_powsodd>:
    4f14:	9f 93       	push	r25
    4f16:	8f 93       	push	r24
    4f18:	7f 93       	push	r23
    4f1a:	6f 93       	push	r22
    4f1c:	ff 93       	push	r31
    4f1e:	ef 93       	push	r30
    4f20:	9b 01       	movw	r18, r22
    4f22:	ac 01       	movw	r20, r24
    4f24:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__mulsf3>
    4f28:	ef 91       	pop	r30
    4f2a:	ff 91       	pop	r31
    4f2c:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__fp_powser>
    4f30:	2f 91       	pop	r18
    4f32:	3f 91       	pop	r19
    4f34:	4f 91       	pop	r20
    4f36:	5f 91       	pop	r21
    4f38:	0c 94 d0 26 	jmp	0x4da0	; 0x4da0 <__mulsf3>

00004f3c <__fp_powser>:
    4f3c:	df 93       	push	r29
    4f3e:	cf 93       	push	r28
    4f40:	1f 93       	push	r17
    4f42:	0f 93       	push	r16
    4f44:	ff 92       	push	r15
    4f46:	ef 92       	push	r14
    4f48:	df 92       	push	r13
    4f4a:	7b 01       	movw	r14, r22
    4f4c:	8c 01       	movw	r16, r24
    4f4e:	68 94       	set
    4f50:	06 c0       	rjmp	.+12     	; 0x4f5e <__fp_powser+0x22>
    4f52:	da 2e       	mov	r13, r26
    4f54:	ef 01       	movw	r28, r30
    4f56:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__mulsf3x>
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	e8 94       	clt
    4f5e:	a5 91       	lpm	r26, Z+
    4f60:	25 91       	lpm	r18, Z+
    4f62:	35 91       	lpm	r19, Z+
    4f64:	45 91       	lpm	r20, Z+
    4f66:	55 91       	lpm	r21, Z+
    4f68:	a6 f3       	brts	.-24     	; 0x4f52 <__fp_powser+0x16>
    4f6a:	ef 01       	movw	r28, r30
    4f6c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__addsf3x>
    4f70:	fe 01       	movw	r30, r28
    4f72:	97 01       	movw	r18, r14
    4f74:	a8 01       	movw	r20, r16
    4f76:	da 94       	dec	r13
    4f78:	69 f7       	brne	.-38     	; 0x4f54 <__fp_powser+0x18>
    4f7a:	df 90       	pop	r13
    4f7c:	ef 90       	pop	r14
    4f7e:	ff 90       	pop	r15
    4f80:	0f 91       	pop	r16
    4f82:	1f 91       	pop	r17
    4f84:	cf 91       	pop	r28
    4f86:	df 91       	pop	r29
    4f88:	08 95       	ret

00004f8a <__mulsi3>:
    4f8a:	db 01       	movw	r26, r22
    4f8c:	8f 93       	push	r24
    4f8e:	9f 93       	push	r25
    4f90:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__muluhisi3>
    4f94:	bf 91       	pop	r27
    4f96:	af 91       	pop	r26
    4f98:	a2 9f       	mul	r26, r18
    4f9a:	80 0d       	add	r24, r0
    4f9c:	91 1d       	adc	r25, r1
    4f9e:	a3 9f       	mul	r26, r19
    4fa0:	90 0d       	add	r25, r0
    4fa2:	b2 9f       	mul	r27, r18
    4fa4:	90 0d       	add	r25, r0
    4fa6:	11 24       	eor	r1, r1
    4fa8:	08 95       	ret

00004faa <__udivmodhi4>:
    4faa:	aa 1b       	sub	r26, r26
    4fac:	bb 1b       	sub	r27, r27
    4fae:	51 e1       	ldi	r21, 0x11	; 17
    4fb0:	07 c0       	rjmp	.+14     	; 0x4fc0 <__udivmodhi4_ep>

00004fb2 <__udivmodhi4_loop>:
    4fb2:	aa 1f       	adc	r26, r26
    4fb4:	bb 1f       	adc	r27, r27
    4fb6:	a6 17       	cp	r26, r22
    4fb8:	b7 07       	cpc	r27, r23
    4fba:	10 f0       	brcs	.+4      	; 0x4fc0 <__udivmodhi4_ep>
    4fbc:	a6 1b       	sub	r26, r22
    4fbe:	b7 0b       	sbc	r27, r23

00004fc0 <__udivmodhi4_ep>:
    4fc0:	88 1f       	adc	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	5a 95       	dec	r21
    4fc6:	a9 f7       	brne	.-22     	; 0x4fb2 <__udivmodhi4_loop>
    4fc8:	80 95       	com	r24
    4fca:	90 95       	com	r25
    4fcc:	bc 01       	movw	r22, r24
    4fce:	cd 01       	movw	r24, r26
    4fd0:	08 95       	ret

00004fd2 <__divmodhi4>:
    4fd2:	97 fb       	bst	r25, 7
    4fd4:	07 2e       	mov	r0, r23
    4fd6:	16 f4       	brtc	.+4      	; 0x4fdc <__divmodhi4+0xa>
    4fd8:	00 94       	com	r0
    4fda:	07 d0       	rcall	.+14     	; 0x4fea <__divmodhi4_neg1>
    4fdc:	77 fd       	sbrc	r23, 7
    4fde:	09 d0       	rcall	.+18     	; 0x4ff2 <__divmodhi4_neg2>
    4fe0:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__udivmodhi4>
    4fe4:	07 fc       	sbrc	r0, 7
    4fe6:	05 d0       	rcall	.+10     	; 0x4ff2 <__divmodhi4_neg2>
    4fe8:	3e f4       	brtc	.+14     	; 0x4ff8 <__divmodhi4_exit>

00004fea <__divmodhi4_neg1>:
    4fea:	90 95       	com	r25
    4fec:	81 95       	neg	r24
    4fee:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff0:	08 95       	ret

00004ff2 <__divmodhi4_neg2>:
    4ff2:	70 95       	com	r23
    4ff4:	61 95       	neg	r22
    4ff6:	7f 4f       	sbci	r23, 0xFF	; 255

00004ff8 <__divmodhi4_exit>:
    4ff8:	08 95       	ret

00004ffa <__udivmodsi4>:
    4ffa:	a1 e2       	ldi	r26, 0x21	; 33
    4ffc:	1a 2e       	mov	r1, r26
    4ffe:	aa 1b       	sub	r26, r26
    5000:	bb 1b       	sub	r27, r27
    5002:	fd 01       	movw	r30, r26
    5004:	0d c0       	rjmp	.+26     	; 0x5020 <__udivmodsi4_ep>

00005006 <__udivmodsi4_loop>:
    5006:	aa 1f       	adc	r26, r26
    5008:	bb 1f       	adc	r27, r27
    500a:	ee 1f       	adc	r30, r30
    500c:	ff 1f       	adc	r31, r31
    500e:	a2 17       	cp	r26, r18
    5010:	b3 07       	cpc	r27, r19
    5012:	e4 07       	cpc	r30, r20
    5014:	f5 07       	cpc	r31, r21
    5016:	20 f0       	brcs	.+8      	; 0x5020 <__udivmodsi4_ep>
    5018:	a2 1b       	sub	r26, r18
    501a:	b3 0b       	sbc	r27, r19
    501c:	e4 0b       	sbc	r30, r20
    501e:	f5 0b       	sbc	r31, r21

00005020 <__udivmodsi4_ep>:
    5020:	66 1f       	adc	r22, r22
    5022:	77 1f       	adc	r23, r23
    5024:	88 1f       	adc	r24, r24
    5026:	99 1f       	adc	r25, r25
    5028:	1a 94       	dec	r1
    502a:	69 f7       	brne	.-38     	; 0x5006 <__udivmodsi4_loop>
    502c:	60 95       	com	r22
    502e:	70 95       	com	r23
    5030:	80 95       	com	r24
    5032:	90 95       	com	r25
    5034:	9b 01       	movw	r18, r22
    5036:	ac 01       	movw	r20, r24
    5038:	bd 01       	movw	r22, r26
    503a:	cf 01       	movw	r24, r30
    503c:	08 95       	ret

0000503e <__divmodsi4>:
    503e:	05 2e       	mov	r0, r21
    5040:	97 fb       	bst	r25, 7
    5042:	1e f4       	brtc	.+6      	; 0x504a <__divmodsi4+0xc>
    5044:	00 94       	com	r0
    5046:	0e 94 36 28 	call	0x506c	; 0x506c <__negsi2>
    504a:	57 fd       	sbrc	r21, 7
    504c:	07 d0       	rcall	.+14     	; 0x505c <__divmodsi4_neg2>
    504e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__udivmodsi4>
    5052:	07 fc       	sbrc	r0, 7
    5054:	03 d0       	rcall	.+6      	; 0x505c <__divmodsi4_neg2>
    5056:	4e f4       	brtc	.+18     	; 0x506a <__divmodsi4_exit>
    5058:	0c 94 36 28 	jmp	0x506c	; 0x506c <__negsi2>

0000505c <__divmodsi4_neg2>:
    505c:	50 95       	com	r21
    505e:	40 95       	com	r20
    5060:	30 95       	com	r19
    5062:	21 95       	neg	r18
    5064:	3f 4f       	sbci	r19, 0xFF	; 255
    5066:	4f 4f       	sbci	r20, 0xFF	; 255
    5068:	5f 4f       	sbci	r21, 0xFF	; 255

0000506a <__divmodsi4_exit>:
    506a:	08 95       	ret

0000506c <__negsi2>:
    506c:	90 95       	com	r25
    506e:	80 95       	com	r24
    5070:	70 95       	com	r23
    5072:	61 95       	neg	r22
    5074:	7f 4f       	sbci	r23, 0xFF	; 255
    5076:	8f 4f       	sbci	r24, 0xFF	; 255
    5078:	9f 4f       	sbci	r25, 0xFF	; 255
    507a:	08 95       	ret

0000507c <__tablejump2__>:
    507c:	ee 0f       	add	r30, r30
    507e:	ff 1f       	adc	r31, r31
    5080:	05 90       	lpm	r0, Z+
    5082:	f4 91       	lpm	r31, Z
    5084:	e0 2d       	mov	r30, r0
    5086:	09 94       	ijmp

00005088 <__umulhisi3>:
    5088:	a2 9f       	mul	r26, r18
    508a:	b0 01       	movw	r22, r0
    508c:	b3 9f       	mul	r27, r19
    508e:	c0 01       	movw	r24, r0
    5090:	a3 9f       	mul	r26, r19
    5092:	70 0d       	add	r23, r0
    5094:	81 1d       	adc	r24, r1
    5096:	11 24       	eor	r1, r1
    5098:	91 1d       	adc	r25, r1
    509a:	b2 9f       	mul	r27, r18
    509c:	70 0d       	add	r23, r0
    509e:	81 1d       	adc	r24, r1
    50a0:	11 24       	eor	r1, r1
    50a2:	91 1d       	adc	r25, r1
    50a4:	08 95       	ret

000050a6 <__usmulhisi3>:
    50a6:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>

000050aa <__usmulhisi3_tail>:
    50aa:	b7 ff       	sbrs	r27, 7
    50ac:	08 95       	ret
    50ae:	82 1b       	sub	r24, r18
    50b0:	93 0b       	sbc	r25, r19
    50b2:	08 95       	ret

000050b4 <__muluhisi3>:
    50b4:	0e 94 44 28 	call	0x5088	; 0x5088 <__umulhisi3>
    50b8:	a5 9f       	mul	r26, r21
    50ba:	90 0d       	add	r25, r0
    50bc:	b4 9f       	mul	r27, r20
    50be:	90 0d       	add	r25, r0
    50c0:	a4 9f       	mul	r26, r20
    50c2:	80 0d       	add	r24, r0
    50c4:	91 1d       	adc	r25, r1
    50c6:	11 24       	eor	r1, r1
    50c8:	08 95       	ret

000050ca <__mulshisi3>:
    50ca:	b7 ff       	sbrs	r27, 7
    50cc:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__muluhisi3>

000050d0 <__mulohisi3>:
    50d0:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__muluhisi3>
    50d4:	82 1b       	sub	r24, r18
    50d6:	93 0b       	sbc	r25, r19
    50d8:	08 95       	ret

000050da <malloc>:
    50da:	0f 93       	push	r16
    50dc:	1f 93       	push	r17
    50de:	cf 93       	push	r28
    50e0:	df 93       	push	r29
    50e2:	82 30       	cpi	r24, 0x02	; 2
    50e4:	91 05       	cpc	r25, r1
    50e6:	10 f4       	brcc	.+4      	; 0x50ec <malloc+0x12>
    50e8:	82 e0       	ldi	r24, 0x02	; 2
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <__flp>
    50f0:	f0 91 9c 05 	lds	r31, 0x059C	; 0x80059c <__flp+0x1>
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	a0 e0       	ldi	r26, 0x00	; 0
    50fa:	b0 e0       	ldi	r27, 0x00	; 0
    50fc:	30 97       	sbiw	r30, 0x00	; 0
    50fe:	19 f1       	breq	.+70     	; 0x5146 <malloc+0x6c>
    5100:	40 81       	ld	r20, Z
    5102:	51 81       	ldd	r21, Z+1	; 0x01
    5104:	02 81       	ldd	r16, Z+2	; 0x02
    5106:	13 81       	ldd	r17, Z+3	; 0x03
    5108:	48 17       	cp	r20, r24
    510a:	59 07       	cpc	r21, r25
    510c:	c8 f0       	brcs	.+50     	; 0x5140 <malloc+0x66>
    510e:	84 17       	cp	r24, r20
    5110:	95 07       	cpc	r25, r21
    5112:	69 f4       	brne	.+26     	; 0x512e <malloc+0x54>
    5114:	10 97       	sbiw	r26, 0x00	; 0
    5116:	31 f0       	breq	.+12     	; 0x5124 <malloc+0x4a>
    5118:	12 96       	adiw	r26, 0x02	; 2
    511a:	0c 93       	st	X, r16
    511c:	12 97       	sbiw	r26, 0x02	; 2
    511e:	13 96       	adiw	r26, 0x03	; 3
    5120:	1c 93       	st	X, r17
    5122:	27 c0       	rjmp	.+78     	; 0x5172 <malloc+0x98>
    5124:	00 93 9b 05 	sts	0x059B, r16	; 0x80059b <__flp>
    5128:	10 93 9c 05 	sts	0x059C, r17	; 0x80059c <__flp+0x1>
    512c:	22 c0       	rjmp	.+68     	; 0x5172 <malloc+0x98>
    512e:	21 15       	cp	r18, r1
    5130:	31 05       	cpc	r19, r1
    5132:	19 f0       	breq	.+6      	; 0x513a <malloc+0x60>
    5134:	42 17       	cp	r20, r18
    5136:	53 07       	cpc	r21, r19
    5138:	18 f4       	brcc	.+6      	; 0x5140 <malloc+0x66>
    513a:	9a 01       	movw	r18, r20
    513c:	bd 01       	movw	r22, r26
    513e:	ef 01       	movw	r28, r30
    5140:	df 01       	movw	r26, r30
    5142:	f8 01       	movw	r30, r16
    5144:	db cf       	rjmp	.-74     	; 0x50fc <malloc+0x22>
    5146:	21 15       	cp	r18, r1
    5148:	31 05       	cpc	r19, r1
    514a:	f9 f0       	breq	.+62     	; 0x518a <malloc+0xb0>
    514c:	28 1b       	sub	r18, r24
    514e:	39 0b       	sbc	r19, r25
    5150:	24 30       	cpi	r18, 0x04	; 4
    5152:	31 05       	cpc	r19, r1
    5154:	80 f4       	brcc	.+32     	; 0x5176 <malloc+0x9c>
    5156:	8a 81       	ldd	r24, Y+2	; 0x02
    5158:	9b 81       	ldd	r25, Y+3	; 0x03
    515a:	61 15       	cp	r22, r1
    515c:	71 05       	cpc	r23, r1
    515e:	21 f0       	breq	.+8      	; 0x5168 <malloc+0x8e>
    5160:	fb 01       	movw	r30, r22
    5162:	93 83       	std	Z+3, r25	; 0x03
    5164:	82 83       	std	Z+2, r24	; 0x02
    5166:	04 c0       	rjmp	.+8      	; 0x5170 <malloc+0x96>
    5168:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <__flp+0x1>
    516c:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <__flp>
    5170:	fe 01       	movw	r30, r28
    5172:	32 96       	adiw	r30, 0x02	; 2
    5174:	44 c0       	rjmp	.+136    	; 0x51fe <malloc+0x124>
    5176:	fe 01       	movw	r30, r28
    5178:	e2 0f       	add	r30, r18
    517a:	f3 1f       	adc	r31, r19
    517c:	81 93       	st	Z+, r24
    517e:	91 93       	st	Z+, r25
    5180:	22 50       	subi	r18, 0x02	; 2
    5182:	31 09       	sbc	r19, r1
    5184:	39 83       	std	Y+1, r19	; 0x01
    5186:	28 83       	st	Y, r18
    5188:	3a c0       	rjmp	.+116    	; 0x51fe <malloc+0x124>
    518a:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <__brkval>
    518e:	30 91 9a 05 	lds	r19, 0x059A	; 0x80059a <__brkval+0x1>
    5192:	23 2b       	or	r18, r19
    5194:	41 f4       	brne	.+16     	; 0x51a6 <malloc+0xcc>
    5196:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    519a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    519e:	30 93 9a 05 	sts	0x059A, r19	; 0x80059a <__brkval+0x1>
    51a2:	20 93 99 05 	sts	0x0599, r18	; 0x800599 <__brkval>
    51a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    51aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    51ae:	21 15       	cp	r18, r1
    51b0:	31 05       	cpc	r19, r1
    51b2:	41 f4       	brne	.+16     	; 0x51c4 <malloc+0xea>
    51b4:	2d b7       	in	r18, 0x3d	; 61
    51b6:	3e b7       	in	r19, 0x3e	; 62
    51b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    51bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    51c0:	24 1b       	sub	r18, r20
    51c2:	35 0b       	sbc	r19, r21
    51c4:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <__brkval>
    51c8:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <__brkval+0x1>
    51cc:	e2 17       	cp	r30, r18
    51ce:	f3 07       	cpc	r31, r19
    51d0:	a0 f4       	brcc	.+40     	; 0x51fa <malloc+0x120>
    51d2:	2e 1b       	sub	r18, r30
    51d4:	3f 0b       	sbc	r19, r31
    51d6:	28 17       	cp	r18, r24
    51d8:	39 07       	cpc	r19, r25
    51da:	78 f0       	brcs	.+30     	; 0x51fa <malloc+0x120>
    51dc:	ac 01       	movw	r20, r24
    51de:	4e 5f       	subi	r20, 0xFE	; 254
    51e0:	5f 4f       	sbci	r21, 0xFF	; 255
    51e2:	24 17       	cp	r18, r20
    51e4:	35 07       	cpc	r19, r21
    51e6:	48 f0       	brcs	.+18     	; 0x51fa <malloc+0x120>
    51e8:	4e 0f       	add	r20, r30
    51ea:	5f 1f       	adc	r21, r31
    51ec:	50 93 9a 05 	sts	0x059A, r21	; 0x80059a <__brkval+0x1>
    51f0:	40 93 99 05 	sts	0x0599, r20	; 0x800599 <__brkval>
    51f4:	81 93       	st	Z+, r24
    51f6:	91 93       	st	Z+, r25
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <malloc+0x124>
    51fa:	e0 e0       	ldi	r30, 0x00	; 0
    51fc:	f0 e0       	ldi	r31, 0x00	; 0
    51fe:	cf 01       	movw	r24, r30
    5200:	df 91       	pop	r29
    5202:	cf 91       	pop	r28
    5204:	1f 91       	pop	r17
    5206:	0f 91       	pop	r16
    5208:	08 95       	ret

0000520a <free>:
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	00 97       	sbiw	r24, 0x00	; 0
    5210:	09 f4       	brne	.+2      	; 0x5214 <free+0xa>
    5212:	81 c0       	rjmp	.+258    	; 0x5316 <free+0x10c>
    5214:	fc 01       	movw	r30, r24
    5216:	32 97       	sbiw	r30, 0x02	; 2
    5218:	13 82       	std	Z+3, r1	; 0x03
    521a:	12 82       	std	Z+2, r1	; 0x02
    521c:	a0 91 9b 05 	lds	r26, 0x059B	; 0x80059b <__flp>
    5220:	b0 91 9c 05 	lds	r27, 0x059C	; 0x80059c <__flp+0x1>
    5224:	10 97       	sbiw	r26, 0x00	; 0
    5226:	81 f4       	brne	.+32     	; 0x5248 <free+0x3e>
    5228:	20 81       	ld	r18, Z
    522a:	31 81       	ldd	r19, Z+1	; 0x01
    522c:	82 0f       	add	r24, r18
    522e:	93 1f       	adc	r25, r19
    5230:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <__brkval>
    5234:	30 91 9a 05 	lds	r19, 0x059A	; 0x80059a <__brkval+0x1>
    5238:	28 17       	cp	r18, r24
    523a:	39 07       	cpc	r19, r25
    523c:	51 f5       	brne	.+84     	; 0x5292 <free+0x88>
    523e:	f0 93 9a 05 	sts	0x059A, r31	; 0x80059a <__brkval+0x1>
    5242:	e0 93 99 05 	sts	0x0599, r30	; 0x800599 <__brkval>
    5246:	67 c0       	rjmp	.+206    	; 0x5316 <free+0x10c>
    5248:	ed 01       	movw	r28, r26
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	ce 17       	cp	r28, r30
    5250:	df 07       	cpc	r29, r31
    5252:	40 f4       	brcc	.+16     	; 0x5264 <free+0x5a>
    5254:	4a 81       	ldd	r20, Y+2	; 0x02
    5256:	5b 81       	ldd	r21, Y+3	; 0x03
    5258:	9e 01       	movw	r18, r28
    525a:	41 15       	cp	r20, r1
    525c:	51 05       	cpc	r21, r1
    525e:	f1 f0       	breq	.+60     	; 0x529c <free+0x92>
    5260:	ea 01       	movw	r28, r20
    5262:	f5 cf       	rjmp	.-22     	; 0x524e <free+0x44>
    5264:	d3 83       	std	Z+3, r29	; 0x03
    5266:	c2 83       	std	Z+2, r28	; 0x02
    5268:	40 81       	ld	r20, Z
    526a:	51 81       	ldd	r21, Z+1	; 0x01
    526c:	84 0f       	add	r24, r20
    526e:	95 1f       	adc	r25, r21
    5270:	c8 17       	cp	r28, r24
    5272:	d9 07       	cpc	r29, r25
    5274:	59 f4       	brne	.+22     	; 0x528c <free+0x82>
    5276:	88 81       	ld	r24, Y
    5278:	99 81       	ldd	r25, Y+1	; 0x01
    527a:	84 0f       	add	r24, r20
    527c:	95 1f       	adc	r25, r21
    527e:	02 96       	adiw	r24, 0x02	; 2
    5280:	91 83       	std	Z+1, r25	; 0x01
    5282:	80 83       	st	Z, r24
    5284:	8a 81       	ldd	r24, Y+2	; 0x02
    5286:	9b 81       	ldd	r25, Y+3	; 0x03
    5288:	93 83       	std	Z+3, r25	; 0x03
    528a:	82 83       	std	Z+2, r24	; 0x02
    528c:	21 15       	cp	r18, r1
    528e:	31 05       	cpc	r19, r1
    5290:	29 f4       	brne	.+10     	; 0x529c <free+0x92>
    5292:	f0 93 9c 05 	sts	0x059C, r31	; 0x80059c <__flp+0x1>
    5296:	e0 93 9b 05 	sts	0x059B, r30	; 0x80059b <__flp>
    529a:	3d c0       	rjmp	.+122    	; 0x5316 <free+0x10c>
    529c:	e9 01       	movw	r28, r18
    529e:	fb 83       	std	Y+3, r31	; 0x03
    52a0:	ea 83       	std	Y+2, r30	; 0x02
    52a2:	49 91       	ld	r20, Y+
    52a4:	59 91       	ld	r21, Y+
    52a6:	c4 0f       	add	r28, r20
    52a8:	d5 1f       	adc	r29, r21
    52aa:	ec 17       	cp	r30, r28
    52ac:	fd 07       	cpc	r31, r29
    52ae:	61 f4       	brne	.+24     	; 0x52c8 <free+0xbe>
    52b0:	80 81       	ld	r24, Z
    52b2:	91 81       	ldd	r25, Z+1	; 0x01
    52b4:	84 0f       	add	r24, r20
    52b6:	95 1f       	adc	r25, r21
    52b8:	02 96       	adiw	r24, 0x02	; 2
    52ba:	e9 01       	movw	r28, r18
    52bc:	99 83       	std	Y+1, r25	; 0x01
    52be:	88 83       	st	Y, r24
    52c0:	82 81       	ldd	r24, Z+2	; 0x02
    52c2:	93 81       	ldd	r25, Z+3	; 0x03
    52c4:	9b 83       	std	Y+3, r25	; 0x03
    52c6:	8a 83       	std	Y+2, r24	; 0x02
    52c8:	e0 e0       	ldi	r30, 0x00	; 0
    52ca:	f0 e0       	ldi	r31, 0x00	; 0
    52cc:	12 96       	adiw	r26, 0x02	; 2
    52ce:	8d 91       	ld	r24, X+
    52d0:	9c 91       	ld	r25, X
    52d2:	13 97       	sbiw	r26, 0x03	; 3
    52d4:	00 97       	sbiw	r24, 0x00	; 0
    52d6:	19 f0       	breq	.+6      	; 0x52de <free+0xd4>
    52d8:	fd 01       	movw	r30, r26
    52da:	dc 01       	movw	r26, r24
    52dc:	f7 cf       	rjmp	.-18     	; 0x52cc <free+0xc2>
    52de:	8d 91       	ld	r24, X+
    52e0:	9c 91       	ld	r25, X
    52e2:	11 97       	sbiw	r26, 0x01	; 1
    52e4:	9d 01       	movw	r18, r26
    52e6:	2e 5f       	subi	r18, 0xFE	; 254
    52e8:	3f 4f       	sbci	r19, 0xFF	; 255
    52ea:	82 0f       	add	r24, r18
    52ec:	93 1f       	adc	r25, r19
    52ee:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <__brkval>
    52f2:	30 91 9a 05 	lds	r19, 0x059A	; 0x80059a <__brkval+0x1>
    52f6:	28 17       	cp	r18, r24
    52f8:	39 07       	cpc	r19, r25
    52fa:	69 f4       	brne	.+26     	; 0x5316 <free+0x10c>
    52fc:	30 97       	sbiw	r30, 0x00	; 0
    52fe:	29 f4       	brne	.+10     	; 0x530a <free+0x100>
    5300:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <__flp+0x1>
    5304:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <__flp>
    5308:	02 c0       	rjmp	.+4      	; 0x530e <free+0x104>
    530a:	13 82       	std	Z+3, r1	; 0x03
    530c:	12 82       	std	Z+2, r1	; 0x02
    530e:	b0 93 9a 05 	sts	0x059A, r27	; 0x80059a <__brkval+0x1>
    5312:	a0 93 99 05 	sts	0x0599, r26	; 0x800599 <__brkval>
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	08 95       	ret

0000531c <atoi>:
    531c:	fc 01       	movw	r30, r24
    531e:	88 27       	eor	r24, r24
    5320:	99 27       	eor	r25, r25
    5322:	e8 94       	clt
    5324:	21 91       	ld	r18, Z+
    5326:	20 32       	cpi	r18, 0x20	; 32
    5328:	e9 f3       	breq	.-6      	; 0x5324 <atoi+0x8>
    532a:	29 30       	cpi	r18, 0x09	; 9
    532c:	10 f0       	brcs	.+4      	; 0x5332 <atoi+0x16>
    532e:	2e 30       	cpi	r18, 0x0E	; 14
    5330:	c8 f3       	brcs	.-14     	; 0x5324 <atoi+0x8>
    5332:	2b 32       	cpi	r18, 0x2B	; 43
    5334:	41 f0       	breq	.+16     	; 0x5346 <atoi+0x2a>
    5336:	2d 32       	cpi	r18, 0x2D	; 45
    5338:	39 f4       	brne	.+14     	; 0x5348 <atoi+0x2c>
    533a:	68 94       	set
    533c:	04 c0       	rjmp	.+8      	; 0x5346 <atoi+0x2a>
    533e:	0e 94 11 2a 	call	0x5422	; 0x5422 <__mulhi_const_10>
    5342:	82 0f       	add	r24, r18
    5344:	91 1d       	adc	r25, r1
    5346:	21 91       	ld	r18, Z+
    5348:	20 53       	subi	r18, 0x30	; 48
    534a:	2a 30       	cpi	r18, 0x0A	; 10
    534c:	c0 f3       	brcs	.-16     	; 0x533e <atoi+0x22>
    534e:	1e f4       	brtc	.+6      	; 0x5356 <atoi+0x3a>
    5350:	90 95       	com	r25
    5352:	81 95       	neg	r24
    5354:	9f 4f       	sbci	r25, 0xFF	; 255
    5356:	08 95       	ret

00005358 <atol>:
    5358:	1f 93       	push	r17
    535a:	fc 01       	movw	r30, r24
    535c:	99 27       	eor	r25, r25
    535e:	88 27       	eor	r24, r24
    5360:	bc 01       	movw	r22, r24
    5362:	e8 94       	clt
    5364:	11 91       	ld	r17, Z+
    5366:	10 32       	cpi	r17, 0x20	; 32
    5368:	e9 f3       	breq	.-6      	; 0x5364 <atol+0xc>
    536a:	19 30       	cpi	r17, 0x09	; 9
    536c:	10 f0       	brcs	.+4      	; 0x5372 <atol+0x1a>
    536e:	1e 30       	cpi	r17, 0x0E	; 14
    5370:	c8 f3       	brcs	.-14     	; 0x5364 <atol+0xc>
    5372:	1b 32       	cpi	r17, 0x2B	; 43
    5374:	51 f0       	breq	.+20     	; 0x538a <atol+0x32>
    5376:	1d 32       	cpi	r17, 0x2D	; 45
    5378:	49 f4       	brne	.+18     	; 0x538c <atol+0x34>
    537a:	68 94       	set
    537c:	06 c0       	rjmp	.+12     	; 0x538a <atol+0x32>
    537e:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <__mulsi_const_10>
    5382:	61 0f       	add	r22, r17
    5384:	71 1d       	adc	r23, r1
    5386:	81 1d       	adc	r24, r1
    5388:	91 1d       	adc	r25, r1
    538a:	11 91       	ld	r17, Z+
    538c:	10 53       	subi	r17, 0x30	; 48
    538e:	1a 30       	cpi	r17, 0x0A	; 10
    5390:	b0 f3       	brcs	.-20     	; 0x537e <atol+0x26>
    5392:	3e f4       	brtc	.+14     	; 0x53a2 <atol+0x4a>
    5394:	90 95       	com	r25
    5396:	80 95       	com	r24
    5398:	70 95       	com	r23
    539a:	61 95       	neg	r22
    539c:	7f 4f       	sbci	r23, 0xFF	; 255
    539e:	8f 4f       	sbci	r24, 0xFF	; 255
    53a0:	9f 4f       	sbci	r25, 0xFF	; 255
    53a2:	1f 91       	pop	r17
    53a4:	08 95       	ret

000053a6 <toupper>:
    53a6:	91 11       	cpse	r25, r1
    53a8:	08 95       	ret
    53aa:	81 56       	subi	r24, 0x61	; 97
    53ac:	8a 51       	subi	r24, 0x1A	; 26
    53ae:	08 f4       	brcc	.+2      	; 0x53b2 <toupper+0xc>
    53b0:	80 52       	subi	r24, 0x20	; 32
    53b2:	85 58       	subi	r24, 0x85	; 133
    53b4:	08 95       	ret

000053b6 <strcat>:
    53b6:	fb 01       	movw	r30, r22
    53b8:	dc 01       	movw	r26, r24
    53ba:	0d 90       	ld	r0, X+
    53bc:	00 20       	and	r0, r0
    53be:	e9 f7       	brne	.-6      	; 0x53ba <strcat+0x4>
    53c0:	11 97       	sbiw	r26, 0x01	; 1
    53c2:	01 90       	ld	r0, Z+
    53c4:	0d 92       	st	X+, r0
    53c6:	00 20       	and	r0, r0
    53c8:	e1 f7       	brne	.-8      	; 0x53c2 <strcat+0xc>
    53ca:	08 95       	ret

000053cc <strcpy>:
    53cc:	fb 01       	movw	r30, r22
    53ce:	dc 01       	movw	r26, r24
    53d0:	01 90       	ld	r0, Z+
    53d2:	0d 92       	st	X+, r0
    53d4:	00 20       	and	r0, r0
    53d6:	e1 f7       	brne	.-8      	; 0x53d0 <strcpy+0x4>
    53d8:	08 95       	ret

000053da <strncpy>:
    53da:	fb 01       	movw	r30, r22
    53dc:	dc 01       	movw	r26, r24
    53de:	41 50       	subi	r20, 0x01	; 1
    53e0:	50 40       	sbci	r21, 0x00	; 0
    53e2:	48 f0       	brcs	.+18     	; 0x53f6 <strncpy+0x1c>
    53e4:	01 90       	ld	r0, Z+
    53e6:	0d 92       	st	X+, r0
    53e8:	00 20       	and	r0, r0
    53ea:	c9 f7       	brne	.-14     	; 0x53de <strncpy+0x4>
    53ec:	01 c0       	rjmp	.+2      	; 0x53f0 <strncpy+0x16>
    53ee:	1d 92       	st	X+, r1
    53f0:	41 50       	subi	r20, 0x01	; 1
    53f2:	50 40       	sbci	r21, 0x00	; 0
    53f4:	e0 f7       	brcc	.-8      	; 0x53ee <strncpy+0x14>
    53f6:	08 95       	ret

000053f8 <__mulsi_const_10>:
    53f8:	59 2f       	mov	r21, r25
    53fa:	48 2f       	mov	r20, r24
    53fc:	37 2f       	mov	r19, r23
    53fe:	26 2f       	mov	r18, r22
    5400:	66 0f       	add	r22, r22
    5402:	77 1f       	adc	r23, r23
    5404:	88 1f       	adc	r24, r24
    5406:	99 1f       	adc	r25, r25
    5408:	66 0f       	add	r22, r22
    540a:	77 1f       	adc	r23, r23
    540c:	88 1f       	adc	r24, r24
    540e:	99 1f       	adc	r25, r25
    5410:	62 0f       	add	r22, r18
    5412:	73 1f       	adc	r23, r19
    5414:	84 1f       	adc	r24, r20
    5416:	95 1f       	adc	r25, r21
    5418:	66 0f       	add	r22, r22
    541a:	77 1f       	adc	r23, r23
    541c:	88 1f       	adc	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	08 95       	ret

00005422 <__mulhi_const_10>:
    5422:	7a e0       	ldi	r23, 0x0A	; 10
    5424:	97 9f       	mul	r25, r23
    5426:	90 2d       	mov	r25, r0
    5428:	87 9f       	mul	r24, r23
    542a:	80 2d       	mov	r24, r0
    542c:	91 0d       	add	r25, r1
    542e:	11 24       	eor	r1, r1
    5430:	08 95       	ret

00005432 <sprintf>:
    5432:	ae e0       	ldi	r26, 0x0E	; 14
    5434:	b0 e0       	ldi	r27, 0x00	; 0
    5436:	ef e1       	ldi	r30, 0x1F	; 31
    5438:	fa e2       	ldi	r31, 0x2A	; 42
    543a:	0c 94 22 2d 	jmp	0x5a44	; 0x5a44 <__prologue_saves__+0x1c>
    543e:	0d 89       	ldd	r16, Y+21	; 0x15
    5440:	1e 89       	ldd	r17, Y+22	; 0x16
    5442:	86 e0       	ldi	r24, 0x06	; 6
    5444:	8c 83       	std	Y+4, r24	; 0x04
    5446:	1a 83       	std	Y+2, r17	; 0x02
    5448:	09 83       	std	Y+1, r16	; 0x01
    544a:	8f ef       	ldi	r24, 0xFF	; 255
    544c:	9f e7       	ldi	r25, 0x7F	; 127
    544e:	9e 83       	std	Y+6, r25	; 0x06
    5450:	8d 83       	std	Y+5, r24	; 0x05
    5452:	ae 01       	movw	r20, r28
    5454:	47 5e       	subi	r20, 0xE7	; 231
    5456:	5f 4f       	sbci	r21, 0xFF	; 255
    5458:	6f 89       	ldd	r22, Y+23	; 0x17
    545a:	78 8d       	ldd	r23, Y+24	; 0x18
    545c:	ce 01       	movw	r24, r28
    545e:	01 96       	adiw	r24, 0x01	; 1
    5460:	0e 94 3b 2a 	call	0x5476	; 0x5476 <vfprintf>
    5464:	ef 81       	ldd	r30, Y+7	; 0x07
    5466:	f8 85       	ldd	r31, Y+8	; 0x08
    5468:	e0 0f       	add	r30, r16
    546a:	f1 1f       	adc	r31, r17
    546c:	10 82       	st	Z, r1
    546e:	2e 96       	adiw	r28, 0x0e	; 14
    5470:	e4 e0       	ldi	r30, 0x04	; 4
    5472:	0c 94 3e 2d 	jmp	0x5a7c	; 0x5a7c <__epilogue_restores__+0x1c>

00005476 <vfprintf>:
    5476:	ab e0       	ldi	r26, 0x0B	; 11
    5478:	b0 e0       	ldi	r27, 0x00	; 0
    547a:	e1 e4       	ldi	r30, 0x41	; 65
    547c:	fa e2       	ldi	r31, 0x2A	; 42
    547e:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__prologue_saves__>
    5482:	6c 01       	movw	r12, r24
    5484:	7b 01       	movw	r14, r22
    5486:	8a 01       	movw	r16, r20
    5488:	fc 01       	movw	r30, r24
    548a:	17 82       	std	Z+7, r1	; 0x07
    548c:	16 82       	std	Z+6, r1	; 0x06
    548e:	83 81       	ldd	r24, Z+3	; 0x03
    5490:	81 ff       	sbrs	r24, 1
    5492:	cc c1       	rjmp	.+920    	; 0x582c <vfprintf+0x3b6>
    5494:	ce 01       	movw	r24, r28
    5496:	01 96       	adiw	r24, 0x01	; 1
    5498:	3c 01       	movw	r6, r24
    549a:	f6 01       	movw	r30, r12
    549c:	93 81       	ldd	r25, Z+3	; 0x03
    549e:	f7 01       	movw	r30, r14
    54a0:	93 fd       	sbrc	r25, 3
    54a2:	85 91       	lpm	r24, Z+
    54a4:	93 ff       	sbrs	r25, 3
    54a6:	81 91       	ld	r24, Z+
    54a8:	7f 01       	movw	r14, r30
    54aa:	88 23       	and	r24, r24
    54ac:	09 f4       	brne	.+2      	; 0x54b0 <vfprintf+0x3a>
    54ae:	ba c1       	rjmp	.+884    	; 0x5824 <vfprintf+0x3ae>
    54b0:	85 32       	cpi	r24, 0x25	; 37
    54b2:	39 f4       	brne	.+14     	; 0x54c2 <vfprintf+0x4c>
    54b4:	93 fd       	sbrc	r25, 3
    54b6:	85 91       	lpm	r24, Z+
    54b8:	93 ff       	sbrs	r25, 3
    54ba:	81 91       	ld	r24, Z+
    54bc:	7f 01       	movw	r14, r30
    54be:	85 32       	cpi	r24, 0x25	; 37
    54c0:	29 f4       	brne	.+10     	; 0x54cc <vfprintf+0x56>
    54c2:	b6 01       	movw	r22, r12
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    54ca:	e7 cf       	rjmp	.-50     	; 0x549a <vfprintf+0x24>
    54cc:	91 2c       	mov	r9, r1
    54ce:	21 2c       	mov	r2, r1
    54d0:	31 2c       	mov	r3, r1
    54d2:	ff e1       	ldi	r31, 0x1F	; 31
    54d4:	f3 15       	cp	r31, r3
    54d6:	d8 f0       	brcs	.+54     	; 0x550e <vfprintf+0x98>
    54d8:	8b 32       	cpi	r24, 0x2B	; 43
    54da:	79 f0       	breq	.+30     	; 0x54fa <vfprintf+0x84>
    54dc:	38 f4       	brcc	.+14     	; 0x54ec <vfprintf+0x76>
    54de:	80 32       	cpi	r24, 0x20	; 32
    54e0:	79 f0       	breq	.+30     	; 0x5500 <vfprintf+0x8a>
    54e2:	83 32       	cpi	r24, 0x23	; 35
    54e4:	a1 f4       	brne	.+40     	; 0x550e <vfprintf+0x98>
    54e6:	23 2d       	mov	r18, r3
    54e8:	20 61       	ori	r18, 0x10	; 16
    54ea:	1d c0       	rjmp	.+58     	; 0x5526 <vfprintf+0xb0>
    54ec:	8d 32       	cpi	r24, 0x2D	; 45
    54ee:	61 f0       	breq	.+24     	; 0x5508 <vfprintf+0x92>
    54f0:	80 33       	cpi	r24, 0x30	; 48
    54f2:	69 f4       	brne	.+26     	; 0x550e <vfprintf+0x98>
    54f4:	23 2d       	mov	r18, r3
    54f6:	21 60       	ori	r18, 0x01	; 1
    54f8:	16 c0       	rjmp	.+44     	; 0x5526 <vfprintf+0xb0>
    54fa:	83 2d       	mov	r24, r3
    54fc:	82 60       	ori	r24, 0x02	; 2
    54fe:	38 2e       	mov	r3, r24
    5500:	e3 2d       	mov	r30, r3
    5502:	e4 60       	ori	r30, 0x04	; 4
    5504:	3e 2e       	mov	r3, r30
    5506:	2a c0       	rjmp	.+84     	; 0x555c <vfprintf+0xe6>
    5508:	f3 2d       	mov	r31, r3
    550a:	f8 60       	ori	r31, 0x08	; 8
    550c:	1d c0       	rjmp	.+58     	; 0x5548 <vfprintf+0xd2>
    550e:	37 fc       	sbrc	r3, 7
    5510:	2d c0       	rjmp	.+90     	; 0x556c <vfprintf+0xf6>
    5512:	20 ed       	ldi	r18, 0xD0	; 208
    5514:	28 0f       	add	r18, r24
    5516:	2a 30       	cpi	r18, 0x0A	; 10
    5518:	40 f0       	brcs	.+16     	; 0x552a <vfprintf+0xb4>
    551a:	8e 32       	cpi	r24, 0x2E	; 46
    551c:	b9 f4       	brne	.+46     	; 0x554c <vfprintf+0xd6>
    551e:	36 fc       	sbrc	r3, 6
    5520:	81 c1       	rjmp	.+770    	; 0x5824 <vfprintf+0x3ae>
    5522:	23 2d       	mov	r18, r3
    5524:	20 64       	ori	r18, 0x40	; 64
    5526:	32 2e       	mov	r3, r18
    5528:	19 c0       	rjmp	.+50     	; 0x555c <vfprintf+0xe6>
    552a:	36 fe       	sbrs	r3, 6
    552c:	06 c0       	rjmp	.+12     	; 0x553a <vfprintf+0xc4>
    552e:	8a e0       	ldi	r24, 0x0A	; 10
    5530:	98 9e       	mul	r9, r24
    5532:	20 0d       	add	r18, r0
    5534:	11 24       	eor	r1, r1
    5536:	92 2e       	mov	r9, r18
    5538:	11 c0       	rjmp	.+34     	; 0x555c <vfprintf+0xe6>
    553a:	ea e0       	ldi	r30, 0x0A	; 10
    553c:	2e 9e       	mul	r2, r30
    553e:	20 0d       	add	r18, r0
    5540:	11 24       	eor	r1, r1
    5542:	22 2e       	mov	r2, r18
    5544:	f3 2d       	mov	r31, r3
    5546:	f0 62       	ori	r31, 0x20	; 32
    5548:	3f 2e       	mov	r3, r31
    554a:	08 c0       	rjmp	.+16     	; 0x555c <vfprintf+0xe6>
    554c:	8c 36       	cpi	r24, 0x6C	; 108
    554e:	21 f4       	brne	.+8      	; 0x5558 <vfprintf+0xe2>
    5550:	83 2d       	mov	r24, r3
    5552:	80 68       	ori	r24, 0x80	; 128
    5554:	38 2e       	mov	r3, r24
    5556:	02 c0       	rjmp	.+4      	; 0x555c <vfprintf+0xe6>
    5558:	88 36       	cpi	r24, 0x68	; 104
    555a:	41 f4       	brne	.+16     	; 0x556c <vfprintf+0xf6>
    555c:	f7 01       	movw	r30, r14
    555e:	93 fd       	sbrc	r25, 3
    5560:	85 91       	lpm	r24, Z+
    5562:	93 ff       	sbrs	r25, 3
    5564:	81 91       	ld	r24, Z+
    5566:	7f 01       	movw	r14, r30
    5568:	81 11       	cpse	r24, r1
    556a:	b3 cf       	rjmp	.-154    	; 0x54d2 <vfprintf+0x5c>
    556c:	98 2f       	mov	r25, r24
    556e:	9f 7d       	andi	r25, 0xDF	; 223
    5570:	95 54       	subi	r25, 0x45	; 69
    5572:	93 30       	cpi	r25, 0x03	; 3
    5574:	28 f4       	brcc	.+10     	; 0x5580 <vfprintf+0x10a>
    5576:	0c 5f       	subi	r16, 0xFC	; 252
    5578:	1f 4f       	sbci	r17, 0xFF	; 255
    557a:	9f e3       	ldi	r25, 0x3F	; 63
    557c:	99 83       	std	Y+1, r25	; 0x01
    557e:	0d c0       	rjmp	.+26     	; 0x559a <vfprintf+0x124>
    5580:	83 36       	cpi	r24, 0x63	; 99
    5582:	31 f0       	breq	.+12     	; 0x5590 <vfprintf+0x11a>
    5584:	83 37       	cpi	r24, 0x73	; 115
    5586:	71 f0       	breq	.+28     	; 0x55a4 <vfprintf+0x12e>
    5588:	83 35       	cpi	r24, 0x53	; 83
    558a:	09 f0       	breq	.+2      	; 0x558e <vfprintf+0x118>
    558c:	59 c0       	rjmp	.+178    	; 0x5640 <vfprintf+0x1ca>
    558e:	21 c0       	rjmp	.+66     	; 0x55d2 <vfprintf+0x15c>
    5590:	f8 01       	movw	r30, r16
    5592:	80 81       	ld	r24, Z
    5594:	89 83       	std	Y+1, r24	; 0x01
    5596:	0e 5f       	subi	r16, 0xFE	; 254
    5598:	1f 4f       	sbci	r17, 0xFF	; 255
    559a:	88 24       	eor	r8, r8
    559c:	83 94       	inc	r8
    559e:	91 2c       	mov	r9, r1
    55a0:	53 01       	movw	r10, r6
    55a2:	13 c0       	rjmp	.+38     	; 0x55ca <vfprintf+0x154>
    55a4:	28 01       	movw	r4, r16
    55a6:	f2 e0       	ldi	r31, 0x02	; 2
    55a8:	4f 0e       	add	r4, r31
    55aa:	51 1c       	adc	r5, r1
    55ac:	f8 01       	movw	r30, r16
    55ae:	a0 80       	ld	r10, Z
    55b0:	b1 80       	ldd	r11, Z+1	; 0x01
    55b2:	36 fe       	sbrs	r3, 6
    55b4:	03 c0       	rjmp	.+6      	; 0x55bc <vfprintf+0x146>
    55b6:	69 2d       	mov	r22, r9
    55b8:	70 e0       	ldi	r23, 0x00	; 0
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <vfprintf+0x14a>
    55bc:	6f ef       	ldi	r22, 0xFF	; 255
    55be:	7f ef       	ldi	r23, 0xFF	; 255
    55c0:	c5 01       	movw	r24, r10
    55c2:	0e 94 27 2c 	call	0x584e	; 0x584e <strnlen>
    55c6:	4c 01       	movw	r8, r24
    55c8:	82 01       	movw	r16, r4
    55ca:	f3 2d       	mov	r31, r3
    55cc:	ff 77       	andi	r31, 0x7F	; 127
    55ce:	3f 2e       	mov	r3, r31
    55d0:	16 c0       	rjmp	.+44     	; 0x55fe <vfprintf+0x188>
    55d2:	28 01       	movw	r4, r16
    55d4:	22 e0       	ldi	r18, 0x02	; 2
    55d6:	42 0e       	add	r4, r18
    55d8:	51 1c       	adc	r5, r1
    55da:	f8 01       	movw	r30, r16
    55dc:	a0 80       	ld	r10, Z
    55de:	b1 80       	ldd	r11, Z+1	; 0x01
    55e0:	36 fe       	sbrs	r3, 6
    55e2:	03 c0       	rjmp	.+6      	; 0x55ea <vfprintf+0x174>
    55e4:	69 2d       	mov	r22, r9
    55e6:	70 e0       	ldi	r23, 0x00	; 0
    55e8:	02 c0       	rjmp	.+4      	; 0x55ee <vfprintf+0x178>
    55ea:	6f ef       	ldi	r22, 0xFF	; 255
    55ec:	7f ef       	ldi	r23, 0xFF	; 255
    55ee:	c5 01       	movw	r24, r10
    55f0:	0e 94 1c 2c 	call	0x5838	; 0x5838 <strnlen_P>
    55f4:	4c 01       	movw	r8, r24
    55f6:	f3 2d       	mov	r31, r3
    55f8:	f0 68       	ori	r31, 0x80	; 128
    55fa:	3f 2e       	mov	r3, r31
    55fc:	82 01       	movw	r16, r4
    55fe:	33 fc       	sbrc	r3, 3
    5600:	1b c0       	rjmp	.+54     	; 0x5638 <vfprintf+0x1c2>
    5602:	82 2d       	mov	r24, r2
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	88 16       	cp	r8, r24
    5608:	99 06       	cpc	r9, r25
    560a:	b0 f4       	brcc	.+44     	; 0x5638 <vfprintf+0x1c2>
    560c:	b6 01       	movw	r22, r12
    560e:	80 e2       	ldi	r24, 0x20	; 32
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    5616:	2a 94       	dec	r2
    5618:	f4 cf       	rjmp	.-24     	; 0x5602 <vfprintf+0x18c>
    561a:	f5 01       	movw	r30, r10
    561c:	37 fc       	sbrc	r3, 7
    561e:	85 91       	lpm	r24, Z+
    5620:	37 fe       	sbrs	r3, 7
    5622:	81 91       	ld	r24, Z+
    5624:	5f 01       	movw	r10, r30
    5626:	b6 01       	movw	r22, r12
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    562e:	21 10       	cpse	r2, r1
    5630:	2a 94       	dec	r2
    5632:	21 e0       	ldi	r18, 0x01	; 1
    5634:	82 1a       	sub	r8, r18
    5636:	91 08       	sbc	r9, r1
    5638:	81 14       	cp	r8, r1
    563a:	91 04       	cpc	r9, r1
    563c:	71 f7       	brne	.-36     	; 0x561a <vfprintf+0x1a4>
    563e:	e8 c0       	rjmp	.+464    	; 0x5810 <vfprintf+0x39a>
    5640:	84 36       	cpi	r24, 0x64	; 100
    5642:	11 f0       	breq	.+4      	; 0x5648 <vfprintf+0x1d2>
    5644:	89 36       	cpi	r24, 0x69	; 105
    5646:	41 f5       	brne	.+80     	; 0x5698 <vfprintf+0x222>
    5648:	f8 01       	movw	r30, r16
    564a:	37 fe       	sbrs	r3, 7
    564c:	07 c0       	rjmp	.+14     	; 0x565c <vfprintf+0x1e6>
    564e:	60 81       	ld	r22, Z
    5650:	71 81       	ldd	r23, Z+1	; 0x01
    5652:	82 81       	ldd	r24, Z+2	; 0x02
    5654:	93 81       	ldd	r25, Z+3	; 0x03
    5656:	0c 5f       	subi	r16, 0xFC	; 252
    5658:	1f 4f       	sbci	r17, 0xFF	; 255
    565a:	08 c0       	rjmp	.+16     	; 0x566c <vfprintf+0x1f6>
    565c:	60 81       	ld	r22, Z
    565e:	71 81       	ldd	r23, Z+1	; 0x01
    5660:	07 2e       	mov	r0, r23
    5662:	00 0c       	add	r0, r0
    5664:	88 0b       	sbc	r24, r24
    5666:	99 0b       	sbc	r25, r25
    5668:	0e 5f       	subi	r16, 0xFE	; 254
    566a:	1f 4f       	sbci	r17, 0xFF	; 255
    566c:	f3 2d       	mov	r31, r3
    566e:	ff 76       	andi	r31, 0x6F	; 111
    5670:	3f 2e       	mov	r3, r31
    5672:	97 ff       	sbrs	r25, 7
    5674:	09 c0       	rjmp	.+18     	; 0x5688 <vfprintf+0x212>
    5676:	90 95       	com	r25
    5678:	80 95       	com	r24
    567a:	70 95       	com	r23
    567c:	61 95       	neg	r22
    567e:	7f 4f       	sbci	r23, 0xFF	; 255
    5680:	8f 4f       	sbci	r24, 0xFF	; 255
    5682:	9f 4f       	sbci	r25, 0xFF	; 255
    5684:	f0 68       	ori	r31, 0x80	; 128
    5686:	3f 2e       	mov	r3, r31
    5688:	2a e0       	ldi	r18, 0x0A	; 10
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	a3 01       	movw	r20, r6
    568e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__ultoa_invert>
    5692:	88 2e       	mov	r8, r24
    5694:	86 18       	sub	r8, r6
    5696:	45 c0       	rjmp	.+138    	; 0x5722 <vfprintf+0x2ac>
    5698:	85 37       	cpi	r24, 0x75	; 117
    569a:	31 f4       	brne	.+12     	; 0x56a8 <vfprintf+0x232>
    569c:	23 2d       	mov	r18, r3
    569e:	2f 7e       	andi	r18, 0xEF	; 239
    56a0:	b2 2e       	mov	r11, r18
    56a2:	2a e0       	ldi	r18, 0x0A	; 10
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	25 c0       	rjmp	.+74     	; 0x56f2 <vfprintf+0x27c>
    56a8:	93 2d       	mov	r25, r3
    56aa:	99 7f       	andi	r25, 0xF9	; 249
    56ac:	b9 2e       	mov	r11, r25
    56ae:	8f 36       	cpi	r24, 0x6F	; 111
    56b0:	c1 f0       	breq	.+48     	; 0x56e2 <vfprintf+0x26c>
    56b2:	18 f4       	brcc	.+6      	; 0x56ba <vfprintf+0x244>
    56b4:	88 35       	cpi	r24, 0x58	; 88
    56b6:	79 f0       	breq	.+30     	; 0x56d6 <vfprintf+0x260>
    56b8:	b5 c0       	rjmp	.+362    	; 0x5824 <vfprintf+0x3ae>
    56ba:	80 37       	cpi	r24, 0x70	; 112
    56bc:	19 f0       	breq	.+6      	; 0x56c4 <vfprintf+0x24e>
    56be:	88 37       	cpi	r24, 0x78	; 120
    56c0:	21 f0       	breq	.+8      	; 0x56ca <vfprintf+0x254>
    56c2:	b0 c0       	rjmp	.+352    	; 0x5824 <vfprintf+0x3ae>
    56c4:	e9 2f       	mov	r30, r25
    56c6:	e0 61       	ori	r30, 0x10	; 16
    56c8:	be 2e       	mov	r11, r30
    56ca:	b4 fe       	sbrs	r11, 4
    56cc:	0d c0       	rjmp	.+26     	; 0x56e8 <vfprintf+0x272>
    56ce:	fb 2d       	mov	r31, r11
    56d0:	f4 60       	ori	r31, 0x04	; 4
    56d2:	bf 2e       	mov	r11, r31
    56d4:	09 c0       	rjmp	.+18     	; 0x56e8 <vfprintf+0x272>
    56d6:	34 fe       	sbrs	r3, 4
    56d8:	0a c0       	rjmp	.+20     	; 0x56ee <vfprintf+0x278>
    56da:	29 2f       	mov	r18, r25
    56dc:	26 60       	ori	r18, 0x06	; 6
    56de:	b2 2e       	mov	r11, r18
    56e0:	06 c0       	rjmp	.+12     	; 0x56ee <vfprintf+0x278>
    56e2:	28 e0       	ldi	r18, 0x08	; 8
    56e4:	30 e0       	ldi	r19, 0x00	; 0
    56e6:	05 c0       	rjmp	.+10     	; 0x56f2 <vfprintf+0x27c>
    56e8:	20 e1       	ldi	r18, 0x10	; 16
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	02 c0       	rjmp	.+4      	; 0x56f2 <vfprintf+0x27c>
    56ee:	20 e1       	ldi	r18, 0x10	; 16
    56f0:	32 e0       	ldi	r19, 0x02	; 2
    56f2:	f8 01       	movw	r30, r16
    56f4:	b7 fe       	sbrs	r11, 7
    56f6:	07 c0       	rjmp	.+14     	; 0x5706 <vfprintf+0x290>
    56f8:	60 81       	ld	r22, Z
    56fa:	71 81       	ldd	r23, Z+1	; 0x01
    56fc:	82 81       	ldd	r24, Z+2	; 0x02
    56fe:	93 81       	ldd	r25, Z+3	; 0x03
    5700:	0c 5f       	subi	r16, 0xFC	; 252
    5702:	1f 4f       	sbci	r17, 0xFF	; 255
    5704:	06 c0       	rjmp	.+12     	; 0x5712 <vfprintf+0x29c>
    5706:	60 81       	ld	r22, Z
    5708:	71 81       	ldd	r23, Z+1	; 0x01
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	0e 5f       	subi	r16, 0xFE	; 254
    5710:	1f 4f       	sbci	r17, 0xFF	; 255
    5712:	a3 01       	movw	r20, r6
    5714:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__ultoa_invert>
    5718:	88 2e       	mov	r8, r24
    571a:	86 18       	sub	r8, r6
    571c:	fb 2d       	mov	r31, r11
    571e:	ff 77       	andi	r31, 0x7F	; 127
    5720:	3f 2e       	mov	r3, r31
    5722:	36 fe       	sbrs	r3, 6
    5724:	0d c0       	rjmp	.+26     	; 0x5740 <vfprintf+0x2ca>
    5726:	23 2d       	mov	r18, r3
    5728:	2e 7f       	andi	r18, 0xFE	; 254
    572a:	a2 2e       	mov	r10, r18
    572c:	89 14       	cp	r8, r9
    572e:	58 f4       	brcc	.+22     	; 0x5746 <vfprintf+0x2d0>
    5730:	34 fe       	sbrs	r3, 4
    5732:	0b c0       	rjmp	.+22     	; 0x574a <vfprintf+0x2d4>
    5734:	32 fc       	sbrc	r3, 2
    5736:	09 c0       	rjmp	.+18     	; 0x574a <vfprintf+0x2d4>
    5738:	83 2d       	mov	r24, r3
    573a:	8e 7e       	andi	r24, 0xEE	; 238
    573c:	a8 2e       	mov	r10, r24
    573e:	05 c0       	rjmp	.+10     	; 0x574a <vfprintf+0x2d4>
    5740:	b8 2c       	mov	r11, r8
    5742:	a3 2c       	mov	r10, r3
    5744:	03 c0       	rjmp	.+6      	; 0x574c <vfprintf+0x2d6>
    5746:	b8 2c       	mov	r11, r8
    5748:	01 c0       	rjmp	.+2      	; 0x574c <vfprintf+0x2d6>
    574a:	b9 2c       	mov	r11, r9
    574c:	a4 fe       	sbrs	r10, 4
    574e:	0f c0       	rjmp	.+30     	; 0x576e <vfprintf+0x2f8>
    5750:	fe 01       	movw	r30, r28
    5752:	e8 0d       	add	r30, r8
    5754:	f1 1d       	adc	r31, r1
    5756:	80 81       	ld	r24, Z
    5758:	80 33       	cpi	r24, 0x30	; 48
    575a:	21 f4       	brne	.+8      	; 0x5764 <vfprintf+0x2ee>
    575c:	9a 2d       	mov	r25, r10
    575e:	99 7e       	andi	r25, 0xE9	; 233
    5760:	a9 2e       	mov	r10, r25
    5762:	09 c0       	rjmp	.+18     	; 0x5776 <vfprintf+0x300>
    5764:	a2 fe       	sbrs	r10, 2
    5766:	06 c0       	rjmp	.+12     	; 0x5774 <vfprintf+0x2fe>
    5768:	b3 94       	inc	r11
    576a:	b3 94       	inc	r11
    576c:	04 c0       	rjmp	.+8      	; 0x5776 <vfprintf+0x300>
    576e:	8a 2d       	mov	r24, r10
    5770:	86 78       	andi	r24, 0x86	; 134
    5772:	09 f0       	breq	.+2      	; 0x5776 <vfprintf+0x300>
    5774:	b3 94       	inc	r11
    5776:	a3 fc       	sbrc	r10, 3
    5778:	11 c0       	rjmp	.+34     	; 0x579c <vfprintf+0x326>
    577a:	a0 fe       	sbrs	r10, 0
    577c:	06 c0       	rjmp	.+12     	; 0x578a <vfprintf+0x314>
    577e:	b2 14       	cp	r11, r2
    5780:	88 f4       	brcc	.+34     	; 0x57a4 <vfprintf+0x32e>
    5782:	28 0c       	add	r2, r8
    5784:	92 2c       	mov	r9, r2
    5786:	9b 18       	sub	r9, r11
    5788:	0e c0       	rjmp	.+28     	; 0x57a6 <vfprintf+0x330>
    578a:	b2 14       	cp	r11, r2
    578c:	60 f4       	brcc	.+24     	; 0x57a6 <vfprintf+0x330>
    578e:	b6 01       	movw	r22, r12
    5790:	80 e2       	ldi	r24, 0x20	; 32
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    5798:	b3 94       	inc	r11
    579a:	f7 cf       	rjmp	.-18     	; 0x578a <vfprintf+0x314>
    579c:	b2 14       	cp	r11, r2
    579e:	18 f4       	brcc	.+6      	; 0x57a6 <vfprintf+0x330>
    57a0:	2b 18       	sub	r2, r11
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <vfprintf+0x332>
    57a4:	98 2c       	mov	r9, r8
    57a6:	21 2c       	mov	r2, r1
    57a8:	a4 fe       	sbrs	r10, 4
    57aa:	10 c0       	rjmp	.+32     	; 0x57cc <vfprintf+0x356>
    57ac:	b6 01       	movw	r22, r12
    57ae:	80 e3       	ldi	r24, 0x30	; 48
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    57b6:	a2 fe       	sbrs	r10, 2
    57b8:	17 c0       	rjmp	.+46     	; 0x57e8 <vfprintf+0x372>
    57ba:	a1 fc       	sbrc	r10, 1
    57bc:	03 c0       	rjmp	.+6      	; 0x57c4 <vfprintf+0x34e>
    57be:	88 e7       	ldi	r24, 0x78	; 120
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <vfprintf+0x352>
    57c4:	88 e5       	ldi	r24, 0x58	; 88
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	b6 01       	movw	r22, r12
    57ca:	0c c0       	rjmp	.+24     	; 0x57e4 <vfprintf+0x36e>
    57cc:	8a 2d       	mov	r24, r10
    57ce:	86 78       	andi	r24, 0x86	; 134
    57d0:	59 f0       	breq	.+22     	; 0x57e8 <vfprintf+0x372>
    57d2:	a1 fe       	sbrs	r10, 1
    57d4:	02 c0       	rjmp	.+4      	; 0x57da <vfprintf+0x364>
    57d6:	8b e2       	ldi	r24, 0x2B	; 43
    57d8:	01 c0       	rjmp	.+2      	; 0x57dc <vfprintf+0x366>
    57da:	80 e2       	ldi	r24, 0x20	; 32
    57dc:	a7 fc       	sbrc	r10, 7
    57de:	8d e2       	ldi	r24, 0x2D	; 45
    57e0:	b6 01       	movw	r22, r12
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    57e8:	89 14       	cp	r8, r9
    57ea:	38 f4       	brcc	.+14     	; 0x57fa <vfprintf+0x384>
    57ec:	b6 01       	movw	r22, r12
    57ee:	80 e3       	ldi	r24, 0x30	; 48
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    57f6:	9a 94       	dec	r9
    57f8:	f7 cf       	rjmp	.-18     	; 0x57e8 <vfprintf+0x372>
    57fa:	8a 94       	dec	r8
    57fc:	f3 01       	movw	r30, r6
    57fe:	e8 0d       	add	r30, r8
    5800:	f1 1d       	adc	r31, r1
    5802:	80 81       	ld	r24, Z
    5804:	b6 01       	movw	r22, r12
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    580c:	81 10       	cpse	r8, r1
    580e:	f5 cf       	rjmp	.-22     	; 0x57fa <vfprintf+0x384>
    5810:	22 20       	and	r2, r2
    5812:	09 f4       	brne	.+2      	; 0x5816 <vfprintf+0x3a0>
    5814:	42 ce       	rjmp	.-892    	; 0x549a <vfprintf+0x24>
    5816:	b6 01       	movw	r22, r12
    5818:	80 e2       	ldi	r24, 0x20	; 32
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	0e 94 32 2c 	call	0x5864	; 0x5864 <fputc>
    5820:	2a 94       	dec	r2
    5822:	f6 cf       	rjmp	.-20     	; 0x5810 <vfprintf+0x39a>
    5824:	f6 01       	movw	r30, r12
    5826:	86 81       	ldd	r24, Z+6	; 0x06
    5828:	97 81       	ldd	r25, Z+7	; 0x07
    582a:	02 c0       	rjmp	.+4      	; 0x5830 <vfprintf+0x3ba>
    582c:	8f ef       	ldi	r24, 0xFF	; 255
    582e:	9f ef       	ldi	r25, 0xFF	; 255
    5830:	2b 96       	adiw	r28, 0x0b	; 11
    5832:	e2 e1       	ldi	r30, 0x12	; 18
    5834:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__epilogue_restores__>

00005838 <strnlen_P>:
    5838:	fc 01       	movw	r30, r24
    583a:	05 90       	lpm	r0, Z+
    583c:	61 50       	subi	r22, 0x01	; 1
    583e:	70 40       	sbci	r23, 0x00	; 0
    5840:	01 10       	cpse	r0, r1
    5842:	d8 f7       	brcc	.-10     	; 0x583a <strnlen_P+0x2>
    5844:	80 95       	com	r24
    5846:	90 95       	com	r25
    5848:	8e 0f       	add	r24, r30
    584a:	9f 1f       	adc	r25, r31
    584c:	08 95       	ret

0000584e <strnlen>:
    584e:	fc 01       	movw	r30, r24
    5850:	61 50       	subi	r22, 0x01	; 1
    5852:	70 40       	sbci	r23, 0x00	; 0
    5854:	01 90       	ld	r0, Z+
    5856:	01 10       	cpse	r0, r1
    5858:	d8 f7       	brcc	.-10     	; 0x5850 <strnlen+0x2>
    585a:	80 95       	com	r24
    585c:	90 95       	com	r25
    585e:	8e 0f       	add	r24, r30
    5860:	9f 1f       	adc	r25, r31
    5862:	08 95       	ret

00005864 <fputc>:
    5864:	0f 93       	push	r16
    5866:	1f 93       	push	r17
    5868:	cf 93       	push	r28
    586a:	df 93       	push	r29
    586c:	fb 01       	movw	r30, r22
    586e:	23 81       	ldd	r18, Z+3	; 0x03
    5870:	21 fd       	sbrc	r18, 1
    5872:	03 c0       	rjmp	.+6      	; 0x587a <fputc+0x16>
    5874:	8f ef       	ldi	r24, 0xFF	; 255
    5876:	9f ef       	ldi	r25, 0xFF	; 255
    5878:	2c c0       	rjmp	.+88     	; 0x58d2 <fputc+0x6e>
    587a:	22 ff       	sbrs	r18, 2
    587c:	16 c0       	rjmp	.+44     	; 0x58aa <fputc+0x46>
    587e:	46 81       	ldd	r20, Z+6	; 0x06
    5880:	57 81       	ldd	r21, Z+7	; 0x07
    5882:	24 81       	ldd	r18, Z+4	; 0x04
    5884:	35 81       	ldd	r19, Z+5	; 0x05
    5886:	42 17       	cp	r20, r18
    5888:	53 07       	cpc	r21, r19
    588a:	44 f4       	brge	.+16     	; 0x589c <fputc+0x38>
    588c:	a0 81       	ld	r26, Z
    588e:	b1 81       	ldd	r27, Z+1	; 0x01
    5890:	9d 01       	movw	r18, r26
    5892:	2f 5f       	subi	r18, 0xFF	; 255
    5894:	3f 4f       	sbci	r19, 0xFF	; 255
    5896:	31 83       	std	Z+1, r19	; 0x01
    5898:	20 83       	st	Z, r18
    589a:	8c 93       	st	X, r24
    589c:	26 81       	ldd	r18, Z+6	; 0x06
    589e:	37 81       	ldd	r19, Z+7	; 0x07
    58a0:	2f 5f       	subi	r18, 0xFF	; 255
    58a2:	3f 4f       	sbci	r19, 0xFF	; 255
    58a4:	37 83       	std	Z+7, r19	; 0x07
    58a6:	26 83       	std	Z+6, r18	; 0x06
    58a8:	14 c0       	rjmp	.+40     	; 0x58d2 <fputc+0x6e>
    58aa:	8b 01       	movw	r16, r22
    58ac:	ec 01       	movw	r28, r24
    58ae:	fb 01       	movw	r30, r22
    58b0:	00 84       	ldd	r0, Z+8	; 0x08
    58b2:	f1 85       	ldd	r31, Z+9	; 0x09
    58b4:	e0 2d       	mov	r30, r0
    58b6:	09 95       	icall
    58b8:	89 2b       	or	r24, r25
    58ba:	e1 f6       	brne	.-72     	; 0x5874 <fputc+0x10>
    58bc:	d8 01       	movw	r26, r16
    58be:	16 96       	adiw	r26, 0x06	; 6
    58c0:	8d 91       	ld	r24, X+
    58c2:	9c 91       	ld	r25, X
    58c4:	17 97       	sbiw	r26, 0x07	; 7
    58c6:	01 96       	adiw	r24, 0x01	; 1
    58c8:	17 96       	adiw	r26, 0x07	; 7
    58ca:	9c 93       	st	X, r25
    58cc:	8e 93       	st	-X, r24
    58ce:	16 97       	sbiw	r26, 0x06	; 6
    58d0:	ce 01       	movw	r24, r28
    58d2:	df 91       	pop	r29
    58d4:	cf 91       	pop	r28
    58d6:	1f 91       	pop	r17
    58d8:	0f 91       	pop	r16
    58da:	08 95       	ret

000058dc <__ultoa_invert>:
    58dc:	fa 01       	movw	r30, r20
    58de:	aa 27       	eor	r26, r26
    58e0:	28 30       	cpi	r18, 0x08	; 8
    58e2:	51 f1       	breq	.+84     	; 0x5938 <__ultoa_invert+0x5c>
    58e4:	20 31       	cpi	r18, 0x10	; 16
    58e6:	81 f1       	breq	.+96     	; 0x5948 <__ultoa_invert+0x6c>
    58e8:	e8 94       	clt
    58ea:	6f 93       	push	r22
    58ec:	6e 7f       	andi	r22, 0xFE	; 254
    58ee:	6e 5f       	subi	r22, 0xFE	; 254
    58f0:	7f 4f       	sbci	r23, 0xFF	; 255
    58f2:	8f 4f       	sbci	r24, 0xFF	; 255
    58f4:	9f 4f       	sbci	r25, 0xFF	; 255
    58f6:	af 4f       	sbci	r26, 0xFF	; 255
    58f8:	b1 e0       	ldi	r27, 0x01	; 1
    58fa:	3e d0       	rcall	.+124    	; 0x5978 <__ultoa_invert+0x9c>
    58fc:	b4 e0       	ldi	r27, 0x04	; 4
    58fe:	3c d0       	rcall	.+120    	; 0x5978 <__ultoa_invert+0x9c>
    5900:	67 0f       	add	r22, r23
    5902:	78 1f       	adc	r23, r24
    5904:	89 1f       	adc	r24, r25
    5906:	9a 1f       	adc	r25, r26
    5908:	a1 1d       	adc	r26, r1
    590a:	68 0f       	add	r22, r24
    590c:	79 1f       	adc	r23, r25
    590e:	8a 1f       	adc	r24, r26
    5910:	91 1d       	adc	r25, r1
    5912:	a1 1d       	adc	r26, r1
    5914:	6a 0f       	add	r22, r26
    5916:	71 1d       	adc	r23, r1
    5918:	81 1d       	adc	r24, r1
    591a:	91 1d       	adc	r25, r1
    591c:	a1 1d       	adc	r26, r1
    591e:	20 d0       	rcall	.+64     	; 0x5960 <__ultoa_invert+0x84>
    5920:	09 f4       	brne	.+2      	; 0x5924 <__ultoa_invert+0x48>
    5922:	68 94       	set
    5924:	3f 91       	pop	r19
    5926:	2a e0       	ldi	r18, 0x0A	; 10
    5928:	26 9f       	mul	r18, r22
    592a:	11 24       	eor	r1, r1
    592c:	30 19       	sub	r19, r0
    592e:	30 5d       	subi	r19, 0xD0	; 208
    5930:	31 93       	st	Z+, r19
    5932:	de f6       	brtc	.-74     	; 0x58ea <__ultoa_invert+0xe>
    5934:	cf 01       	movw	r24, r30
    5936:	08 95       	ret
    5938:	46 2f       	mov	r20, r22
    593a:	47 70       	andi	r20, 0x07	; 7
    593c:	40 5d       	subi	r20, 0xD0	; 208
    593e:	41 93       	st	Z+, r20
    5940:	b3 e0       	ldi	r27, 0x03	; 3
    5942:	0f d0       	rcall	.+30     	; 0x5962 <__ultoa_invert+0x86>
    5944:	c9 f7       	brne	.-14     	; 0x5938 <__ultoa_invert+0x5c>
    5946:	f6 cf       	rjmp	.-20     	; 0x5934 <__ultoa_invert+0x58>
    5948:	46 2f       	mov	r20, r22
    594a:	4f 70       	andi	r20, 0x0F	; 15
    594c:	40 5d       	subi	r20, 0xD0	; 208
    594e:	4a 33       	cpi	r20, 0x3A	; 58
    5950:	18 f0       	brcs	.+6      	; 0x5958 <__ultoa_invert+0x7c>
    5952:	49 5d       	subi	r20, 0xD9	; 217
    5954:	31 fd       	sbrc	r19, 1
    5956:	40 52       	subi	r20, 0x20	; 32
    5958:	41 93       	st	Z+, r20
    595a:	02 d0       	rcall	.+4      	; 0x5960 <__ultoa_invert+0x84>
    595c:	a9 f7       	brne	.-22     	; 0x5948 <__ultoa_invert+0x6c>
    595e:	ea cf       	rjmp	.-44     	; 0x5934 <__ultoa_invert+0x58>
    5960:	b4 e0       	ldi	r27, 0x04	; 4
    5962:	a6 95       	lsr	r26
    5964:	97 95       	ror	r25
    5966:	87 95       	ror	r24
    5968:	77 95       	ror	r23
    596a:	67 95       	ror	r22
    596c:	ba 95       	dec	r27
    596e:	c9 f7       	brne	.-14     	; 0x5962 <__ultoa_invert+0x86>
    5970:	00 97       	sbiw	r24, 0x00	; 0
    5972:	61 05       	cpc	r22, r1
    5974:	71 05       	cpc	r23, r1
    5976:	08 95       	ret
    5978:	9b 01       	movw	r18, r22
    597a:	ac 01       	movw	r20, r24
    597c:	0a 2e       	mov	r0, r26
    597e:	06 94       	lsr	r0
    5980:	57 95       	ror	r21
    5982:	47 95       	ror	r20
    5984:	37 95       	ror	r19
    5986:	27 95       	ror	r18
    5988:	ba 95       	dec	r27
    598a:	c9 f7       	brne	.-14     	; 0x597e <__ultoa_invert+0xa2>
    598c:	62 0f       	add	r22, r18
    598e:	73 1f       	adc	r23, r19
    5990:	84 1f       	adc	r24, r20
    5992:	95 1f       	adc	r25, r21
    5994:	a0 1d       	adc	r26, r0
    5996:	08 95       	ret

00005998 <eeprom_read_byte>:
    5998:	f9 99       	sbic	0x1f, 1	; 31
    599a:	fe cf       	rjmp	.-4      	; 0x5998 <eeprom_read_byte>
    599c:	92 bd       	out	0x22, r25	; 34
    599e:	81 bd       	out	0x21, r24	; 33
    59a0:	f8 9a       	sbi	0x1f, 0	; 31
    59a2:	99 27       	eor	r25, r25
    59a4:	80 b5       	in	r24, 0x20	; 32
    59a6:	08 95       	ret

000059a8 <eeprom_read_dword>:
    59a8:	a6 e1       	ldi	r26, 0x16	; 22
    59aa:	b0 e0       	ldi	r27, 0x00	; 0
    59ac:	44 e0       	ldi	r20, 0x04	; 4
    59ae:	50 e0       	ldi	r21, 0x00	; 0
    59b0:	0c 94 06 2d 	jmp	0x5a0c	; 0x5a0c <eeprom_read_blraw>

000059b4 <eeprom_read_word>:
    59b4:	a8 e1       	ldi	r26, 0x18	; 24
    59b6:	b0 e0       	ldi	r27, 0x00	; 0
    59b8:	42 e0       	ldi	r20, 0x02	; 2
    59ba:	50 e0       	ldi	r21, 0x00	; 0
    59bc:	0c 94 06 2d 	jmp	0x5a0c	; 0x5a0c <eeprom_read_blraw>

000059c0 <eeprom_update_byte>:
    59c0:	26 2f       	mov	r18, r22

000059c2 <eeprom_update_r18>:
    59c2:	f9 99       	sbic	0x1f, 1	; 31
    59c4:	fe cf       	rjmp	.-4      	; 0x59c2 <eeprom_update_r18>
    59c6:	92 bd       	out	0x22, r25	; 34
    59c8:	81 bd       	out	0x21, r24	; 33
    59ca:	f8 9a       	sbi	0x1f, 0	; 31
    59cc:	01 97       	sbiw	r24, 0x01	; 1
    59ce:	00 b4       	in	r0, 0x20	; 32
    59d0:	02 16       	cp	r0, r18
    59d2:	39 f0       	breq	.+14     	; 0x59e2 <eeprom_update_r18+0x20>
    59d4:	1f ba       	out	0x1f, r1	; 31
    59d6:	20 bd       	out	0x20, r18	; 32
    59d8:	0f b6       	in	r0, 0x3f	; 63
    59da:	f8 94       	cli
    59dc:	fa 9a       	sbi	0x1f, 2	; 31
    59de:	f9 9a       	sbi	0x1f, 1	; 31
    59e0:	0f be       	out	0x3f, r0	; 63
    59e2:	08 95       	ret

000059e4 <eeprom_update_dword>:
    59e4:	03 96       	adiw	r24, 0x03	; 3
    59e6:	27 2f       	mov	r18, r23
    59e8:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <eeprom_update_r18>
    59ec:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <eeprom_update_byte>
    59f0:	25 2f       	mov	r18, r21
    59f2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <eeprom_update_r18>
    59f6:	24 2f       	mov	r18, r20
    59f8:	0c 94 e1 2c 	jmp	0x59c2	; 0x59c2 <eeprom_update_r18>

000059fc <eeprom_update_word>:
    59fc:	01 96       	adiw	r24, 0x01	; 1
    59fe:	27 2f       	mov	r18, r23
    5a00:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <eeprom_update_r18>
    5a04:	0c 94 e0 2c 	jmp	0x59c0	; 0x59c0 <eeprom_update_byte>

00005a08 <eeprom_read_block>:
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22

00005a0c <eeprom_read_blraw>:
    5a0c:	fc 01       	movw	r30, r24
    5a0e:	f9 99       	sbic	0x1f, 1	; 31
    5a10:	fe cf       	rjmp	.-4      	; 0x5a0e <eeprom_read_blraw+0x2>
    5a12:	06 c0       	rjmp	.+12     	; 0x5a20 <eeprom_read_blraw+0x14>
    5a14:	f2 bd       	out	0x22, r31	; 34
    5a16:	e1 bd       	out	0x21, r30	; 33
    5a18:	f8 9a       	sbi	0x1f, 0	; 31
    5a1a:	31 96       	adiw	r30, 0x01	; 1
    5a1c:	00 b4       	in	r0, 0x20	; 32
    5a1e:	0d 92       	st	X+, r0
    5a20:	41 50       	subi	r20, 0x01	; 1
    5a22:	50 40       	sbci	r21, 0x00	; 0
    5a24:	b8 f7       	brcc	.-18     	; 0x5a14 <eeprom_read_blraw+0x8>
    5a26:	08 95       	ret

00005a28 <__prologue_saves__>:
    5a28:	2f 92       	push	r2
    5a2a:	3f 92       	push	r3
    5a2c:	4f 92       	push	r4
    5a2e:	5f 92       	push	r5
    5a30:	6f 92       	push	r6
    5a32:	7f 92       	push	r7
    5a34:	8f 92       	push	r8
    5a36:	9f 92       	push	r9
    5a38:	af 92       	push	r10
    5a3a:	bf 92       	push	r11
    5a3c:	cf 92       	push	r12
    5a3e:	df 92       	push	r13
    5a40:	ef 92       	push	r14
    5a42:	ff 92       	push	r15
    5a44:	0f 93       	push	r16
    5a46:	1f 93       	push	r17
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	cd b7       	in	r28, 0x3d	; 61
    5a4e:	de b7       	in	r29, 0x3e	; 62
    5a50:	ca 1b       	sub	r28, r26
    5a52:	db 0b       	sbc	r29, r27
    5a54:	0f b6       	in	r0, 0x3f	; 63
    5a56:	f8 94       	cli
    5a58:	de bf       	out	0x3e, r29	; 62
    5a5a:	0f be       	out	0x3f, r0	; 63
    5a5c:	cd bf       	out	0x3d, r28	; 61
    5a5e:	09 94       	ijmp

00005a60 <__epilogue_restores__>:
    5a60:	2a 88       	ldd	r2, Y+18	; 0x12
    5a62:	39 88       	ldd	r3, Y+17	; 0x11
    5a64:	48 88       	ldd	r4, Y+16	; 0x10
    5a66:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a68:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a70:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a72:	b9 84       	ldd	r11, Y+9	; 0x09
    5a74:	c8 84       	ldd	r12, Y+8	; 0x08
    5a76:	df 80       	ldd	r13, Y+7	; 0x07
    5a78:	ee 80       	ldd	r14, Y+6	; 0x06
    5a7a:	fd 80       	ldd	r15, Y+5	; 0x05
    5a7c:	0c 81       	ldd	r16, Y+4	; 0x04
    5a7e:	1b 81       	ldd	r17, Y+3	; 0x03
    5a80:	aa 81       	ldd	r26, Y+2	; 0x02
    5a82:	b9 81       	ldd	r27, Y+1	; 0x01
    5a84:	ce 0f       	add	r28, r30
    5a86:	d1 1d       	adc	r29, r1
    5a88:	0f b6       	in	r0, 0x3f	; 63
    5a8a:	f8 94       	cli
    5a8c:	de bf       	out	0x3e, r29	; 62
    5a8e:	0f be       	out	0x3f, r0	; 63
    5a90:	cd bf       	out	0x3d, r28	; 61
    5a92:	ed 01       	movw	r28, r26
    5a94:	08 95       	ret

00005a96 <__do_global_dtors>:
    5a96:	11 e0       	ldi	r17, 0x01	; 1
    5a98:	cd e0       	ldi	r28, 0x0D	; 13
    5a9a:	d1 e0       	ldi	r29, 0x01	; 1
    5a9c:	04 c0       	rjmp	.+8      	; 0x5aa6 <__do_global_dtors+0x10>
    5a9e:	fe 01       	movw	r30, r28
    5aa0:	0e 94 3e 28 	call	0x507c	; 0x507c <__tablejump2__>
    5aa4:	21 96       	adiw	r28, 0x01	; 1
    5aa6:	ce 30       	cpi	r28, 0x0E	; 14
    5aa8:	d1 07       	cpc	r29, r17
    5aaa:	c9 f7       	brne	.-14     	; 0x5a9e <__do_global_dtors+0x8>
    5aac:	f8 94       	cli

00005aae <__stop_program>:
    5aae:	ff cf       	rjmp	.-2      	; 0x5aae <__stop_program>
