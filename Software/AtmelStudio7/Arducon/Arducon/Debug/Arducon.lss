
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  00002be8  00002c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002be8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001de  00800318  00800318  00002eb4  2**0
                  ALLOC
  3 .eeprom       0000001e  00810000  00810000  00002eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002ed2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000268  00000000  00000000  00002f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003077  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f84  00000000  00000000  0000624f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001adf  00000000  00000000  000071d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005e4  00000000  00000000  00008cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001002  00000000  00000000  00009298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b69  00000000  00000000  0000a29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  0000be03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__dtors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_8>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_18>
      4c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__vector_19>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_21>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	e2 00       	.word	0x00e2	; ????
      6a:	ed 00       	.word	0x00ed	; ????
      6c:	f8 00       	.word	0x00f8	; ????
      6e:	03 01       	movw	r0, r6
      70:	0e 01       	movw	r0, r28
      72:	19 01       	movw	r2, r18
      74:	6b 01       	movw	r12, r22
      76:	24 01       	movw	r4, r8
      78:	6b 01       	movw	r12, r22
      7a:	6b 01       	movw	r12, r22
      7c:	6b 01       	movw	r12, r22
      7e:	2f 01       	movw	r4, r30
      80:	6b 01       	movw	r12, r22
      82:	6b 01       	movw	r12, r22
      84:	6b 01       	movw	r12, r22
      86:	6b 01       	movw	r12, r22
      88:	6b 01       	movw	r12, r22
      8a:	6b 01       	movw	r12, r22
      8c:	6b 01       	movw	r12, r22
      8e:	6b 01       	movw	r12, r22
      90:	6b 01       	movw	r12, r22
      92:	6b 01       	movw	r12, r22
      94:	6b 01       	movw	r12, r22
      96:	6b 01       	movw	r12, r22
      98:	6b 01       	movw	r12, r22
      9a:	6b 01       	movw	r12, r22
      9c:	6b 01       	movw	r12, r22
      9e:	6b 01       	movw	r12, r22
      a0:	6b 01       	movw	r12, r22
      a2:	6b 01       	movw	r12, r22
      a4:	6b 01       	movw	r12, r22
      a6:	6b 01       	movw	r12, r22
      a8:	6b 01       	movw	r12, r22
      aa:	6b 01       	movw	r12, r22
      ac:	6b 01       	movw	r12, r22
      ae:	6b 01       	movw	r12, r22
      b0:	6b 01       	movw	r12, r22
      b2:	6b 01       	movw	r12, r22
      b4:	6b 01       	movw	r12, r22
      b6:	6b 01       	movw	r12, r22
      b8:	6b 01       	movw	r12, r22
      ba:	6b 01       	movw	r12, r22
      bc:	6b 01       	movw	r12, r22
      be:	6b 01       	movw	r12, r22
      c0:	6b 01       	movw	r12, r22
      c2:	6b 01       	movw	r12, r22
      c4:	6b 01       	movw	r12, r22
      c6:	6b 01       	movw	r12, r22
      c8:	3a 01       	movw	r6, r20
      ca:	47 01       	movw	r8, r14
      cc:	54 01       	movw	r10, r8
      ce:	61 01       	movw	r12, r2
      d0:	77 01       	movw	r14, r14
      d2:	7d 01       	movw	r14, r26
      d4:	83 01       	movw	r16, r6
      d6:	89 01       	movw	r16, r18
      d8:	8f 01       	movw	r16, r30
      da:	95 01       	movw	r18, r10
      dc:	be 01       	movw	r22, r28
      de:	9b 01       	movw	r18, r22
      e0:	be 01       	movw	r22, r28
      e2:	be 01       	movw	r22, r28
      e4:	be 01       	movw	r22, r28
      e6:	a1 01       	movw	r20, r2
      e8:	be 01       	movw	r22, r28
      ea:	be 01       	movw	r22, r28
      ec:	be 01       	movw	r22, r28
      ee:	be 01       	movw	r22, r28
      f0:	be 01       	movw	r22, r28
      f2:	be 01       	movw	r22, r28
      f4:	be 01       	movw	r22, r28
      f6:	be 01       	movw	r22, r28
      f8:	be 01       	movw	r22, r28
      fa:	be 01       	movw	r22, r28
      fc:	be 01       	movw	r22, r28
      fe:	be 01       	movw	r22, r28
     100:	be 01       	movw	r22, r28
     102:	be 01       	movw	r22, r28
     104:	be 01       	movw	r22, r28
     106:	be 01       	movw	r22, r28
     108:	be 01       	movw	r22, r28
     10a:	be 01       	movw	r22, r28
     10c:	be 01       	movw	r22, r28
     10e:	be 01       	movw	r22, r28
     110:	be 01       	movw	r22, r28
     112:	be 01       	movw	r22, r28
     114:	be 01       	movw	r22, r28
     116:	be 01       	movw	r22, r28
     118:	be 01       	movw	r22, r28
     11a:	be 01       	movw	r22, r28
     11c:	be 01       	movw	r22, r28
     11e:	be 01       	movw	r22, r28
     120:	be 01       	movw	r22, r28
     122:	be 01       	movw	r22, r28
     124:	be 01       	movw	r22, r28
     126:	be 01       	movw	r22, r28
     128:	be 01       	movw	r22, r28
     12a:	be 01       	movw	r22, r28
     12c:	be 01       	movw	r22, r28
     12e:	be 01       	movw	r22, r28
     130:	a7 01       	movw	r20, r14
     132:	ad 01       	movw	r20, r26
     134:	b3 01       	movw	r22, r6
     136:	b9 01       	movw	r22, r18
     138:	05 a8       	ldd	r0, Z+53	; 0x35
     13a:	4c cd       	rjmp	.-1384   	; 0xfffffbd4 <__eeprom_end+0xff7efbb6>
     13c:	b2 d4       	rcall	.+2404   	; 0xaa2 <__vector_21+0x26>
     13e:	4e b9       	out	0x0e, r20	; 14
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	a9 02       	muls	r26, r25
     144:	0c 50       	subi	r16, 0x0C	; 12
     146:	b9 91       	ld	r27, Y+
     148:	86 88       	ldd	r8, Z+22	; 0x16
     14a:	08 3c       	cpi	r16, 0xC8	; 200
     14c:	a6 aa       	std	Z+54, r10	; 0x36
     14e:	aa 2a       	or	r10, r26
     150:	be 00       	.word	0x00be	; ????
     152:	00 00       	nop
     154:	80 3f       	cpi	r24, 0xF0	; 240

00000156 <__ctors_start>:
     156:	d3 0d       	add	r29, r3

00000158 <__ctors_end>:
     158:	e4 0d       	add	r30, r4

0000015a <__dtors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d8 e0       	ldi	r29, 0x08	; 8
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	13 e0       	ldi	r17, 0x03	; 3
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	e8 ee       	ldi	r30, 0xE8	; 232
     16e:	fb e2       	ldi	r31, 0x2B	; 43
     170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x10>
     172:	05 90       	lpm	r0, Z+
     174:	0d 92       	st	X+, r0
     176:	a8 31       	cpi	r26, 0x18	; 24
     178:	b1 07       	cpc	r27, r17
     17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0xc>

0000017c <__do_clear_bss>:
     17c:	24 e0       	ldi	r18, 0x04	; 4
     17e:	a8 e1       	ldi	r26, 0x18	; 24
     180:	b3 e0       	ldi	r27, 0x03	; 3
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	a6 3f       	cpi	r26, 0xF6	; 246
     188:	b2 07       	cpc	r27, r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>

0000018c <__do_global_ctors>:
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	cc ea       	ldi	r28, 0xAC	; 172
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	04 c0       	rjmp	.+8      	; 0x19c <__do_global_ctors+0x10>
     194:	21 97       	sbiw	r28, 0x01	; 1
     196:	fe 01       	movw	r30, r28
     198:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__tablejump2__>
     19c:	cb 3a       	cpi	r28, 0xAB	; 171
     19e:	d1 07       	cpc	r29, r17
     1a0:	c9 f7       	brne	.-14     	; 0x194 <__do_global_ctors+0x8>
     1a2:	0e 94 a8 07 	call	0xf50	; 0xf50 <main>
     1a6:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__do_global_dtors>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <_Z7pinModehh>:
		}
		break;
	}

	return(result != 0);
}
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	fc 01       	movw	r30, r24
     1b2:	32 97       	sbiw	r30, 0x02	; 2
     1b4:	e4 33       	cpi	r30, 0x34	; 52
     1b6:	f1 05       	cpc	r31, r1
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <_Z7pinModehh+0xe>
     1ba:	8d c0       	rjmp	.+282    	; 0x2d6 <_Z7pinModehh+0x128>
     1bc:	ec 5c       	subi	r30, 0xCC	; 204
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__tablejump2__>
     1c4:	61 30       	cpi	r22, 0x01	; 1
     1c6:	11 f4       	brne	.+4      	; 0x1cc <_Z7pinModehh+0x1e>
     1c8:	52 9a       	sbi	0x0a, 2	; 10
     1ca:	08 95       	ret
     1cc:	52 98       	cbi	0x0a, 2	; 10
     1ce:	63 30       	cpi	r22, 0x03	; 3
     1d0:	11 f4       	brne	.+4      	; 0x1d6 <_Z7pinModehh+0x28>
     1d2:	5a 9a       	sbi	0x0b, 2	; 11
     1d4:	08 95       	ret
     1d6:	5a 98       	cbi	0x0b, 2	; 11
     1d8:	08 95       	ret
     1da:	61 30       	cpi	r22, 0x01	; 1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <_Z7pinModehh+0x34>
     1de:	53 9a       	sbi	0x0a, 3	; 10
     1e0:	08 95       	ret
     1e2:	53 98       	cbi	0x0a, 3	; 10
     1e4:	63 30       	cpi	r22, 0x03	; 3
     1e6:	11 f4       	brne	.+4      	; 0x1ec <_Z7pinModehh+0x3e>
     1e8:	5b 9a       	sbi	0x0b, 3	; 11
     1ea:	08 95       	ret
     1ec:	5b 98       	cbi	0x0b, 3	; 11
     1ee:	08 95       	ret
     1f0:	61 30       	cpi	r22, 0x01	; 1
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <_Z7pinModehh+0x4a>
     1f4:	54 9a       	sbi	0x0a, 4	; 10
     1f6:	08 95       	ret
     1f8:	54 98       	cbi	0x0a, 4	; 10
     1fa:	63 30       	cpi	r22, 0x03	; 3
     1fc:	11 f4       	brne	.+4      	; 0x202 <_Z7pinModehh+0x54>
     1fe:	5c 9a       	sbi	0x0b, 4	; 11
     200:	08 95       	ret
     202:	5c 98       	cbi	0x0b, 4	; 11
     204:	08 95       	ret
     206:	61 30       	cpi	r22, 0x01	; 1
     208:	11 f4       	brne	.+4      	; 0x20e <_Z7pinModehh+0x60>
     20a:	55 9a       	sbi	0x0a, 5	; 10
     20c:	08 95       	ret
     20e:	55 98       	cbi	0x0a, 5	; 10
     210:	63 30       	cpi	r22, 0x03	; 3
     212:	11 f4       	brne	.+4      	; 0x218 <_Z7pinModehh+0x6a>
     214:	5d 9a       	sbi	0x0b, 5	; 11
     216:	08 95       	ret
     218:	5d 98       	cbi	0x0b, 5	; 11
     21a:	08 95       	ret
     21c:	61 30       	cpi	r22, 0x01	; 1
     21e:	11 f4       	brne	.+4      	; 0x224 <_Z7pinModehh+0x76>
     220:	56 9a       	sbi	0x0a, 6	; 10
     222:	08 95       	ret
     224:	56 98       	cbi	0x0a, 6	; 10
     226:	63 30       	cpi	r22, 0x03	; 3
     228:	11 f4       	brne	.+4      	; 0x22e <_Z7pinModehh+0x80>
     22a:	5e 9a       	sbi	0x0b, 6	; 11
     22c:	08 95       	ret
     22e:	5e 98       	cbi	0x0b, 6	; 11
     230:	08 95       	ret
     232:	61 30       	cpi	r22, 0x01	; 1
     234:	11 f4       	brne	.+4      	; 0x23a <_Z7pinModehh+0x8c>
     236:	57 9a       	sbi	0x0a, 7	; 10
     238:	08 95       	ret
     23a:	57 98       	cbi	0x0a, 7	; 10
     23c:	63 30       	cpi	r22, 0x03	; 3
     23e:	11 f4       	brne	.+4      	; 0x244 <_Z7pinModehh+0x96>
     240:	5f 9a       	sbi	0x0b, 7	; 11
     242:	08 95       	ret
     244:	5f 98       	cbi	0x0b, 7	; 11
     246:	08 95       	ret
     248:	61 30       	cpi	r22, 0x01	; 1
     24a:	11 f4       	brne	.+4      	; 0x250 <_Z7pinModehh+0xa2>
     24c:	21 9a       	sbi	0x04, 1	; 4
     24e:	08 95       	ret
     250:	21 98       	cbi	0x04, 1	; 4
     252:	63 30       	cpi	r22, 0x03	; 3
     254:	11 f4       	brne	.+4      	; 0x25a <_Z7pinModehh+0xac>
     256:	59 9a       	sbi	0x0b, 1	; 11
     258:	08 95       	ret
     25a:	59 98       	cbi	0x0b, 1	; 11
     25c:	08 95       	ret
     25e:	61 30       	cpi	r22, 0x01	; 1
     260:	11 f4       	brne	.+4      	; 0x266 <_Z7pinModehh+0xb8>
     262:	25 9a       	sbi	0x04, 5	; 4
     264:	08 95       	ret
     266:	25 98       	cbi	0x04, 5	; 4
     268:	63 30       	cpi	r22, 0x03	; 3
     26a:	11 f4       	brne	.+4      	; 0x270 <_Z7pinModehh+0xc2>
     26c:	5d 9a       	sbi	0x0b, 5	; 11
     26e:	08 95       	ret
     270:	5d 98       	cbi	0x0b, 5	; 11
     272:	08 95       	ret
     274:	61 30       	cpi	r22, 0x01	; 1
     276:	11 f4       	brne	.+4      	; 0x27c <_Z7pinModehh+0xce>
     278:	38 9a       	sbi	0x07, 0	; 7
     27a:	0b c0       	rjmp	.+22     	; 0x292 <_Z7pinModehh+0xe4>
     27c:	38 98       	cbi	0x07, 0	; 7
     27e:	63 30       	cpi	r22, 0x03	; 3
     280:	19 f4       	brne	.+6      	; 0x288 <_Z7pinModehh+0xda>
     282:	40 9a       	sbi	0x08, 0	; 8
     284:	39 98       	cbi	0x07, 1	; 7
     286:	0a c0       	rjmp	.+20     	; 0x29c <_Z7pinModehh+0xee>
     288:	40 98       	cbi	0x08, 0	; 8
     28a:	39 98       	cbi	0x07, 1	; 7
     28c:	0a c0       	rjmp	.+20     	; 0x2a2 <_Z7pinModehh+0xf4>
     28e:	61 30       	cpi	r22, 0x01	; 1
     290:	11 f4       	brne	.+4      	; 0x296 <_Z7pinModehh+0xe8>
     292:	39 9a       	sbi	0x07, 1	; 7
     294:	0b c0       	rjmp	.+22     	; 0x2ac <_Z7pinModehh+0xfe>
     296:	39 98       	cbi	0x07, 1	; 7
     298:	63 30       	cpi	r22, 0x03	; 3
     29a:	19 f4       	brne	.+6      	; 0x2a2 <_Z7pinModehh+0xf4>
     29c:	41 9a       	sbi	0x08, 1	; 8
     29e:	3a 98       	cbi	0x07, 2	; 7
     2a0:	0a c0       	rjmp	.+20     	; 0x2b6 <_Z7pinModehh+0x108>
     2a2:	41 98       	cbi	0x08, 1	; 8
     2a4:	3a 98       	cbi	0x07, 2	; 7
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <_Z7pinModehh+0x10e>
     2a8:	61 30       	cpi	r22, 0x01	; 1
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <_Z7pinModehh+0x102>
     2ac:	3a 9a       	sbi	0x07, 2	; 7
     2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <_Z7pinModehh+0x118>
     2b0:	3a 98       	cbi	0x07, 2	; 7
     2b2:	63 30       	cpi	r22, 0x03	; 3
     2b4:	19 f4       	brne	.+6      	; 0x2bc <_Z7pinModehh+0x10e>
     2b6:	42 9a       	sbi	0x08, 2	; 8
     2b8:	3b 98       	cbi	0x07, 3	; 7
     2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <_Z7pinModehh+0x122>
     2bc:	42 98       	cbi	0x08, 2	; 8
     2be:	3b 98       	cbi	0x07, 3	; 7
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <_Z7pinModehh+0x126>
     2c2:	61 30       	cpi	r22, 0x01	; 1
     2c4:	11 f4       	brne	.+4      	; 0x2ca <_Z7pinModehh+0x11c>
     2c6:	3b 9a       	sbi	0x07, 3	; 7
     2c8:	08 95       	ret
     2ca:	3b 98       	cbi	0x07, 3	; 7
     2cc:	63 30       	cpi	r22, 0x03	; 3
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <_Z7pinModehh+0x126>
     2d0:	43 9a       	sbi	0x08, 3	; 8
     2d2:	08 95       	ret
     2d4:	43 98       	cbi	0x08, 3	; 8
     2d6:	08 95       	ret

000002d8 <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	fc 01       	movw	r30, r24
     2dc:	32 97       	sbiw	r30, 0x02	; 2
     2de:	e4 33       	cpi	r30, 0x34	; 52
     2e0:	f1 05       	cpc	r31, r1
     2e2:	08 f0       	brcs	.+2      	; 0x2e6 <_Z12digitalWritehh+0xe>
     2e4:	4b c0       	rjmp	.+150    	; 0x37c <_Z12digitalWritehh+0xa4>
     2e6:	e8 59       	subi	r30, 0x98	; 152
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__tablejump2__>
	{
		case 2:
		{
			if(value)
     2ee:	66 23       	and	r22, r22
     2f0:	11 f0       	breq	.+4      	; 0x2f6 <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     2f2:	5a 9a       	sbi	0x0b, 2	; 11
     2f4:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     2f6:	5a 98       	cbi	0x0b, 2	; 11
     2f8:	08 95       	ret
		}
		break;

		case 3:
		{
			if(value)
     2fa:	66 23       	and	r22, r22
     2fc:	11 f0       	breq	.+4      	; 0x302 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     2fe:	5b 9a       	sbi	0x0b, 3	; 11
     300:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     302:	5b 98       	cbi	0x0b, 3	; 11
     304:	08 95       	ret
		}
		break;

		case 4:
		{
			if(value)
     306:	66 23       	and	r22, r22
     308:	11 f0       	breq	.+4      	; 0x30e <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     30a:	5c 9a       	sbi	0x0b, 4	; 11
     30c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     30e:	5c 98       	cbi	0x0b, 4	; 11
     310:	08 95       	ret
		}
		break;

		case 5:
		{
			if(value)
     312:	66 23       	and	r22, r22
     314:	11 f0       	breq	.+4      	; 0x31a <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     316:	5d 9a       	sbi	0x0b, 5	; 11
     318:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     31a:	5d 98       	cbi	0x0b, 5	; 11
     31c:	08 95       	ret
		}
		break;

		case 6:
		{
			if(value)
     31e:	66 23       	and	r22, r22
     320:	11 f0       	breq	.+4      	; 0x326 <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     322:	5e 9a       	sbi	0x0b, 6	; 11
     324:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     326:	5e 98       	cbi	0x0b, 6	; 11
     328:	08 95       	ret
		}
		break;

		case 7:
		{
			if(value)
     32a:	66 23       	and	r22, r22
     32c:	11 f0       	breq	.+4      	; 0x332 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     32e:	5f 9a       	sbi	0x0b, 7	; 11
     330:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     332:	5f 98       	cbi	0x0b, 7	; 11
     334:	08 95       	ret
		}
		break;

		case 9:
		{
			if(value)
     336:	66 23       	and	r22, r22
     338:	11 f0       	breq	.+4      	; 0x33e <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB1);
     33a:	29 9a       	sbi	0x05, 1	; 5
     33c:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     33e:	29 98       	cbi	0x05, 1	; 5
     340:	08 95       	ret
		}
		break;

		case 13:
		{
			if(value)
     342:	66 23       	and	r22, r22
     344:	11 f0       	breq	.+4      	; 0x34a <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB5);
     346:	2d 9a       	sbi	0x05, 5	; 5
     348:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     34a:	2d 98       	cbi	0x05, 5	; 5
     34c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     34e:	66 23       	and	r22, r22
     350:	11 f0       	breq	.+4      	; 0x356 <_Z12digitalWritehh+0x7e>
			{
				PORTC  |= (1 << PORTC0);
     352:	40 9a       	sbi	0x08, 0	; 8
     354:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     356:	40 98       	cbi	0x08, 0	; 8
     358:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     35a:	66 23       	and	r22, r22
     35c:	11 f0       	breq	.+4      	; 0x362 <_Z12digitalWritehh+0x8a>
			{
				PORTC  |= (1 << PORTC1);
     35e:	41 9a       	sbi	0x08, 1	; 8
     360:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     362:	41 98       	cbi	0x08, 1	; 8
     364:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     366:	66 23       	and	r22, r22
     368:	11 f0       	breq	.+4      	; 0x36e <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC2);
     36a:	42 9a       	sbi	0x08, 2	; 8
     36c:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     36e:	42 98       	cbi	0x08, 2	; 8
     370:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     372:	66 23       	and	r22, r22
     374:	11 f0       	breq	.+4      	; 0x37a <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC3);
     376:	43 9a       	sbi	0x08, 3	; 8
     378:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     37a:	43 98       	cbi	0x08, 3	; 8
     37c:	08 95       	ret

0000037e <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	e4 2e       	mov	r14, r20
     38c:	f5 2e       	mov	r15, r21
     38e:	d6 2f       	mov	r29, r22
     390:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     392:	00 93 2f 03 	sts	0x032F, r16	; 0x80032f <_SAMPLING_FREQUENCY>
     396:	10 93 30 03 	sts	0x0330, r17	; 0x800330 <_SAMPLING_FREQUENCY+0x1>
     39a:	20 93 31 03 	sts	0x0331, r18	; 0x800331 <_SAMPLING_FREQUENCY+0x2>
     39e:	30 93 32 03 	sts	0x0332, r19	; 0x800332 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	41 e5       	ldi	r20, 0x51	; 81
     3a8:	53 e4       	ldi	r21, 0x43	; 67
     3aa:	6e 2d       	mov	r22, r14
     3ac:	7f 2d       	mov	r23, r15
     3ae:	8d 2f       	mov	r24, r29
     3b0:	9c 2f       	mov	r25, r28
     3b2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__gesf2>
     3b6:	18 16       	cp	r1, r24
     3b8:	6c f0       	brlt	.+26     	; 0x3d4 <_ZN8GoertzelC1Eff+0x56>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	48 ec       	ldi	r20, 0xC8	; 200
     3c0:	52 e4       	ldi	r21, 0x42	; 66
     3c2:	6e 2d       	mov	r22, r14
     3c4:	7f 2d       	mov	r23, r15
     3c6:	8d 2f       	mov	r24, r29
     3c8:	9c 2f       	mov	r25, r28
     3ca:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__cmpsf2>
     3ce:	88 23       	and	r24, r24
     3d0:	34 f0       	brlt	.+12     	; 0x3de <_ZN8GoertzelC1Eff+0x60>
     3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <_ZN8GoertzelC1Eff+0x68>
     3d4:	e1 2c       	mov	r14, r1
     3d6:	f1 2c       	mov	r15, r1
     3d8:	d1 e5       	ldi	r29, 0x51	; 81
     3da:	c3 e4       	ldi	r28, 0x43	; 67
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <_ZN8GoertzelC1Eff+0x68>
     3de:	e1 2c       	mov	r14, r1
     3e0:	f1 2c       	mov	r15, r1
     3e2:	d8 ec       	ldi	r29, 0xC8	; 200
     3e4:	c2 e4       	ldi	r28, 0x42	; 66
     3e6:	6e 2d       	mov	r22, r14
     3e8:	7f 2d       	mov	r23, r15
     3ea:	8d 2f       	mov	r24, r29
     3ec:	9c 2f       	mov	r25, r28
     3ee:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fixsfsi>
     3f2:	70 93 2a 03 	sts	0x032A, r23	; 0x80032a <_N+0x1>
     3f6:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     3fa:	cb 01       	movw	r24, r22
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0e 94 04 11 	call	0x2208	; 0x2208 <malloc>
     404:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <__data_end+0x1>
     408:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__data_end>
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	08 95       	ret

0000041a <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     41a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__data_end>
     41e:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__data_end+0x1>
     422:	0e 94 9c 11 	call	0x2338	; 0x2338 <free>
     426:	08 95       	ret

00000428 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     428:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Q2>
     42c:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Q2+0x1>
     430:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <Q2+0x2>
     434:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <Q2+0x3>
	Q1 = 0;
     438:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <Q1>
     43c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <Q1+0x1>
     440:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <Q1+0x2>
     444:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <Q1+0x3>
	_samplesReady = false;
     448:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_samplesReady>
     44c:	08 95       	ret

0000044e <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     44e:	8f 92       	push	r8
     450:	9f 92       	push	r9
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
     464:	4a 01       	movw	r8, r20
     466:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     468:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <_N>
     46c:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <_N+0x1>
     470:	07 2e       	mov	r0, r23
     472:	00 0c       	add	r0, r0
     474:	88 0b       	sbc	r24, r24
     476:	99 0b       	sbc	r25, r25
     478:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     47c:	6b 01       	movw	r12, r22
     47e:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     480:	80 92 2b 03 	sts	0x032B, r8	; 0x80032b <_TARGET_FREQUENCY>
     484:	90 92 2c 03 	sts	0x032C, r9	; 0x80032c <_TARGET_FREQUENCY+0x1>
     488:	a0 92 2d 03 	sts	0x032D, r10	; 0x80032d <_TARGET_FREQUENCY+0x2>
     48c:	b0 92 2e 03 	sts	0x032E, r11	; 0x80032e <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     490:	a5 01       	movw	r20, r10
     492:	94 01       	movw	r18, r8
     494:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     498:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <_SAMPLING_FREQUENCY>
     49c:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <_SAMPLING_FREQUENCY+0x1>
     4a0:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <_SAMPLING_FREQUENCY+0x2>
     4a4:	50 91 32 03 	lds	r21, 0x0332	; 0x800332 <_SAMPLING_FREQUENCY+0x3>
     4a8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__divsf3>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	5f e3       	ldi	r21, 0x3F	; 63
     4b4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3>
     4b8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fixsfsi>
     4bc:	07 2e       	mov	r0, r23
     4be:	00 0c       	add	r0, r0
     4c0:	88 0b       	sbc	r24, r24
     4c2:	99 0b       	sbc	r25, r25
     4c4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     4c8:	2b ed       	ldi	r18, 0xDB	; 219
     4ca:	3f e0       	ldi	r19, 0x0F	; 15
     4cc:	49 ec       	ldi	r20, 0xC9	; 201
     4ce:	50 e4       	ldi	r21, 0x40	; 64
     4d0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     4d4:	a7 01       	movw	r20, r14
     4d6:	96 01       	movw	r18, r12
     4d8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__divsf3>
     4dc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <cos>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3>
     4e8:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <g_coeff>
     4ec:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <g_coeff+0x1>
     4f0:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <g_coeff+0x2>
     4f4:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <g_coeff+0x3>
	ResetGoertzel();
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 14 02 	call	0x428	; 0x428 <_ZN8Goertzel13ResetGoertzelEv>
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	08 95       	ret

00000514 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     52a:	c0 90 21 03 	lds	r12, 0x0321	; 0x800321 <Q1>
     52e:	d0 90 22 03 	lds	r13, 0x0322	; 0x800322 <Q1+0x1>
     532:	e0 90 23 03 	lds	r14, 0x0323	; 0x800323 <Q1+0x2>
     536:	f0 90 24 03 	lds	r15, 0x0324	; 0x800324 <Q1+0x3>
     53a:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <g_coeff>
     53e:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <g_coeff+0x1>
     542:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <g_coeff+0x2>
     546:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <g_coeff+0x3>
     54a:	c7 01       	movw	r24, r14
     54c:	b6 01       	movw	r22, r12
     54e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     552:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <Q2>
     556:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <Q2+0x1>
     55a:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <Q2+0x2>
     55e:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <Q2+0x3>
     562:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__subsf3>
     566:	4b 01       	movw	r8, r22
     568:	5c 01       	movw	r10, r24
     56a:	be 01       	movw	r22, r28
     56c:	72 50       	subi	r23, 0x02	; 2
     56e:	07 2e       	mov	r0, r23
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	c5 01       	movw	r24, r10
     580:	b4 01       	movw	r22, r8
     582:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3>

	Q2 = Q1;
     586:	c0 92 1d 03 	sts	0x031D, r12	; 0x80031d <Q2>
     58a:	d0 92 1e 03 	sts	0x031E, r13	; 0x80031e <Q2+0x1>
     58e:	e0 92 1f 03 	sts	0x031F, r14	; 0x80031f <Q2+0x2>
     592:	f0 92 20 03 	sts	0x0320, r15	; 0x800320 <Q2+0x3>
	Q1 = Q0;
     596:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <Q1>
     59a:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <Q1+0x1>
     59e:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <Q1+0x2>
     5a2:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <Q1+0x3>
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	8f 90       	pop	r8
     5ba:	08 95       	ret

000005bc <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     5bc:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_samplesReady>
     5c0:	81 11       	cpse	r24, r1
     5c2:	27 c0       	rjmp	.+78     	; 0x612 <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     5c4:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <_index>
     5c8:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <_index+0x1>
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__data_end>
     5d4:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__data_end+0x1>
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	71 83       	std	Z+1, r23	; 0x01
     5de:	60 83       	st	Z, r22
	_index++;
     5e0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_index>
     5e4:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_index+0x1>
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_index+0x1>
     5ee:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_index>
	if(_index >= _N)
     5f2:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <_N>
     5f6:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <_N+0x1>
     5fa:	82 17       	cp	r24, r18
     5fc:	93 07       	cpc	r25, r19
     5fe:	3c f0       	brlt	.+14     	; 0x60e <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     600:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <_index+0x1>
     604:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_index>
		_samplesReady = true;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_samplesReady>
	}

	return(_samplesReady);
     60e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_samplesReady>
}
     612:	08 95       	ret

00000614 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     614:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_samplesReady>
     618:	08 95       	ret

0000061a <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     61a:	4f 92       	push	r4
     61c:	5f 92       	push	r5
     61e:	6f 92       	push	r6
     620:	7f 92       	push	r7
     622:	8f 92       	push	r8
     624:	9f 92       	push	r9
     626:	af 92       	push	r10
     628:	bf 92       	push	r11
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     63c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <_N>
     640:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <_N+0x1>
     644:	18 16       	cp	r1, r24
     646:	19 06       	cpc	r1, r25
     648:	c4 f4       	brge	.+48     	; 0x67a <_ZN8Goertzel10Magnitude2Ev+0x60>
     64a:	c0 e0       	ldi	r28, 0x00	; 0
     64c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     64e:	ce 01       	movw	r24, r28
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <__data_end>
     658:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <__data_end+0x1>
     65c:	e8 0f       	add	r30, r24
     65e:	f9 1f       	adc	r31, r25
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	c8 01       	movw	r24, r16
     666:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     66a:	21 96       	adiw	r28, 0x01	; 1
     66c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <_N>
     670:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <_N+0x1>
     674:	c8 17       	cp	r28, r24
     676:	d9 07       	cpc	r29, r25
     678:	54 f3       	brlt	.-44     	; 0x64e <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     67a:	80 90 21 03 	lds	r8, 0x0321	; 0x800321 <Q1>
     67e:	90 90 22 03 	lds	r9, 0x0322	; 0x800322 <Q1+0x1>
     682:	a0 90 23 03 	lds	r10, 0x0323	; 0x800323 <Q1+0x2>
     686:	b0 90 24 03 	lds	r11, 0x0324	; 0x800324 <Q1+0x3>
     68a:	c0 90 1d 03 	lds	r12, 0x031D	; 0x80031d <Q2>
     68e:	d0 90 1e 03 	lds	r13, 0x031E	; 0x80031e <Q2+0x1>
     692:	e0 90 1f 03 	lds	r14, 0x031F	; 0x80031f <Q2+0x2>
     696:	f0 90 20 03 	lds	r15, 0x0320	; 0x800320 <Q2+0x3>
     69a:	a5 01       	movw	r20, r10
     69c:	94 01       	movw	r18, r8
     69e:	c5 01       	movw	r24, r10
     6a0:	b4 01       	movw	r22, r8
     6a2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     6a6:	2b 01       	movw	r4, r22
     6a8:	3c 01       	movw	r6, r24
     6aa:	a7 01       	movw	r20, r14
     6ac:	96 01       	movw	r18, r12
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	c3 01       	movw	r24, r6
     6bc:	b2 01       	movw	r22, r4
     6be:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3>
     6c2:	2b 01       	movw	r4, r22
     6c4:	3c 01       	movw	r6, r24
     6c6:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <g_coeff>
     6ca:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <g_coeff+0x1>
     6ce:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <g_coeff+0x2>
     6d2:	50 91 28 03 	lds	r21, 0x0328	; 0x800328 <g_coeff+0x3>
     6d6:	c5 01       	movw	r24, r10
     6d8:	b4 01       	movw	r22, r8
     6da:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     6de:	a7 01       	movw	r20, r14
     6e0:	96 01       	movw	r18, r12
     6e2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	c3 01       	movw	r24, r6
     6ec:	b2 01       	movw	r22, r4
     6ee:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__subsf3>
     6f2:	6b 01       	movw	r12, r22
     6f4:	7c 01       	movw	r14, r24

	ResetGoertzel();
     6f6:	c8 01       	movw	r24, r16
     6f8:	0e 94 14 02 	call	0x428	; 0x428 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     6fc:	c7 01       	movw	r24, r14
     6fe:	b6 01       	movw	r22, r12
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	7f 90       	pop	r7
     71a:	6f 90       	pop	r6
     71c:	5f 90       	pop	r5
     71e:	4f 90       	pop	r4
     720:	08 95       	ret

00000722 <_Z16nextFullTxBufferv>:

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	linkbus_send_text(g_tempMsgBuff);
}
     722:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_ZZ16nextFullTxBuffervE11bufferIndex>
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	59 e2       	ldi	r21, 0x29	; 41
     72a:	28 2f       	mov	r18, r24
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	52 9f       	mul	r21, r18
     730:	f0 01       	movw	r30, r0
     732:	53 9f       	mul	r21, r19
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e7 58       	subi	r30, 0x87	; 135
     73a:	fc 4f       	sbci	r31, 0xFC	; 252
     73c:	40 81       	ld	r20, Z
     73e:	41 11       	cpse	r20, r1
     740:	0c c0       	rjmp	.+24     	; 0x75a <_Z16nextFullTxBufferv+0x38>
     742:	91 50       	subi	r25, 0x01	; 1
     744:	29 f0       	breq	.+10     	; 0x750 <_Z16nextFullTxBufferv+0x2e>
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	84 30       	cpi	r24, 0x04	; 4
     74a:	78 f3       	brcs	.-34     	; 0x72a <_Z16nextFullTxBufferv+0x8>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	ed cf       	rjmp	.-38     	; 0x72a <_Z16nextFullTxBufferv+0x8>
     750:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZZ16nextFullTxBuffervE11bufferIndex>
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret
     75a:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZZ16nextFullTxBuffervE11bufferIndex>
     75e:	49 e2       	ldi	r20, 0x29	; 41
     760:	42 9f       	mul	r20, r18
     762:	c0 01       	movw	r24, r0
     764:	43 9f       	mul	r20, r19
     766:	90 0d       	add	r25, r0
     768:	11 24       	eor	r1, r1
     76a:	87 58       	subi	r24, 0x87	; 135
     76c:	9c 4f       	sbci	r25, 0xFC	; 252
     76e:	08 95       	ret

00000770 <_Z17nextEmptyTxBufferv>:
     770:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	59 e2       	ldi	r21, 0x29	; 41
     778:	28 2f       	mov	r18, r24
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	52 9f       	mul	r21, r18
     77e:	f0 01       	movw	r30, r0
     780:	53 9f       	mul	r21, r19
     782:	f0 0d       	add	r31, r0
     784:	11 24       	eor	r1, r1
     786:	e7 58       	subi	r30, 0x87	; 135
     788:	fc 4f       	sbci	r31, 0xFC	; 252
     78a:	40 81       	ld	r20, Z
     78c:	44 23       	and	r20, r20
     78e:	61 f0       	breq	.+24     	; 0x7a8 <_Z17nextEmptyTxBufferv+0x38>
     790:	91 50       	subi	r25, 0x01	; 1
     792:	29 f0       	breq	.+10     	; 0x79e <_Z17nextEmptyTxBufferv+0x2e>
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	84 30       	cpi	r24, 0x04	; 4
     798:	78 f3       	brcs	.-34     	; 0x778 <_Z17nextEmptyTxBufferv+0x8>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	ed cf       	rjmp	.-38     	; 0x778 <_Z17nextEmptyTxBufferv+0x8>
     79e:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	08 95       	ret
     7a8:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     7ac:	49 e2       	ldi	r20, 0x29	; 41
     7ae:	42 9f       	mul	r20, r18
     7b0:	c0 01       	movw	r24, r0
     7b2:	43 9f       	mul	r20, r19
     7b4:	90 0d       	add	r25, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	87 58       	subi	r24, 0x87	; 135
     7ba:	9c 4f       	sbci	r25, 0xFC	; 252
     7bc:	08 95       	ret

000007be <_Z17nextEmptyRxBufferv>:
     7be:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     7c2:	28 2f       	mov	r18, r24
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	91 e2       	ldi	r25, 0x21	; 33
     7c8:	89 9f       	mul	r24, r25
     7ca:	f0 01       	movw	r30, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	e9 5c       	subi	r30, 0xC9	; 201
     7d0:	fc 4f       	sbci	r31, 0xFC	; 252
     7d2:	41 81       	ldd	r20, Z+1	; 0x01
     7d4:	52 81       	ldd	r21, Z+2	; 0x02
     7d6:	45 2b       	or	r20, r21
     7d8:	a9 f0       	breq	.+42     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	82 30       	cpi	r24, 0x02	; 2
     7de:	08 f0       	brcs	.+2      	; 0x7e2 <_Z17nextEmptyRxBufferv+0x24>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	91 e2       	ldi	r25, 0x21	; 33
     7e8:	89 9f       	mul	r24, r25
     7ea:	f0 01       	movw	r30, r0
     7ec:	11 24       	eor	r1, r1
     7ee:	e9 5c       	subi	r30, 0xC9	; 201
     7f0:	fc 4f       	sbci	r31, 0xFC	; 252
     7f2:	41 81       	ldd	r20, Z+1	; 0x01
     7f4:	52 81       	ldd	r21, Z+2	; 0x02
     7f6:	45 2b       	or	r20, r21
     7f8:	29 f0       	breq	.+10     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fa:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	08 95       	ret
     804:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     808:	41 e2       	ldi	r20, 0x21	; 33
     80a:	42 9f       	mul	r20, r18
     80c:	c0 01       	movw	r24, r0
     80e:	43 9f       	mul	r20, r19
     810:	90 0d       	add	r25, r0
     812:	11 24       	eor	r1, r1
     814:	89 5c       	subi	r24, 0xC9	; 201
     816:	9c 4f       	sbci	r25, 0xFC	; 252
     818:	08 95       	ret

0000081a <_Z16nextFullRxBufferv>:
     81a:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZZ16nextFullRxBuffervE11bufferIndex>
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	91 e2       	ldi	r25, 0x21	; 33
     824:	89 9f       	mul	r24, r25
     826:	f0 01       	movw	r30, r0
     828:	11 24       	eor	r1, r1
     82a:	e9 5c       	subi	r30, 0xC9	; 201
     82c:	fc 4f       	sbci	r31, 0xFC	; 252
     82e:	41 81       	ldd	r20, Z+1	; 0x01
     830:	52 81       	ldd	r21, Z+2	; 0x02
     832:	45 2b       	or	r20, r21
     834:	a9 f4       	brne	.+42     	; 0x860 <_Z16nextFullRxBufferv+0x46>
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	08 f0       	brcs	.+2      	; 0x83e <_Z16nextFullRxBufferv+0x24>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	91 e2       	ldi	r25, 0x21	; 33
     844:	89 9f       	mul	r24, r25
     846:	f0 01       	movw	r30, r0
     848:	11 24       	eor	r1, r1
     84a:	e9 5c       	subi	r30, 0xC9	; 201
     84c:	fc 4f       	sbci	r31, 0xFC	; 252
     84e:	41 81       	ldd	r20, Z+1	; 0x01
     850:	52 81       	ldd	r21, Z+2	; 0x02
     852:	45 2b       	or	r20, r21
     854:	29 f4       	brne	.+10     	; 0x860 <_Z16nextFullRxBufferv+0x46>
     856:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullRxBuffervE11bufferIndex>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	08 95       	ret
     860:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullRxBuffervE11bufferIndex>
     864:	41 e2       	ldi	r20, 0x21	; 33
     866:	42 9f       	mul	r20, r18
     868:	c0 01       	movw	r24, r0
     86a:	43 9f       	mul	r20, r19
     86c:	90 0d       	add	r25, r0
     86e:	11 24       	eor	r1, r1
     870:	89 5c       	subi	r24, 0xC9	; 201
     872:	9c 4f       	sbci	r25, 0xFC	; 252
     874:	08 95       	ret

00000876 <_Z16linkbus_start_txv>:
     876:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <_ZL17linkbus_tx_active>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	91 11       	cpse	r25, r1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	91 11       	cpse	r25, r1
     882:	08 c0       	rjmp	.+16     	; 0x894 <_Z16linkbus_start_txv+0x1e>
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <_ZL17linkbus_tx_active>
     88a:	e1 ec       	ldi	r30, 0xC1	; 193
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	90 81       	ld	r25, Z
     890:	90 62       	ori	r25, 0x20	; 32
     892:	90 83       	st	Z, r25
     894:	08 95       	ret

00000896 <_Z14linkbus_end_txv>:
     896:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZL17linkbus_tx_active>
     89a:	88 23       	and	r24, r24
     89c:	39 f0       	breq	.+14     	; 0x8ac <_Z14linkbus_end_txv+0x16>
     89e:	e1 ec       	ldi	r30, 0xC1	; 193
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	8f 7d       	andi	r24, 0xDF	; 223
     8a6:	80 83       	st	Z, r24
     8a8:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <_ZL17linkbus_tx_active>
     8ac:	08 95       	ret

000008ae <_Z12linkbus_initm>:
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	82 e4       	ldi	r24, 0x42	; 66
     8b4:	e7 e3       	ldi	r30, 0x37	; 55
     8b6:	f3 e0       	ldi	r31, 0x03	; 3
     8b8:	df 01       	movw	r26, r30
     8ba:	1d 92       	st	X+, r1
     8bc:	8a 95       	dec	r24
     8be:	e9 f7       	brne	.-6      	; 0x8ba <_Z12linkbus_initm+0xc>
     8c0:	e9 e7       	ldi	r30, 0x79	; 121
     8c2:	f3 e0       	ldi	r31, 0x03	; 3
     8c4:	10 82       	st	Z, r1
     8c6:	11 a6       	std	Z+41, r1	; 0x29
     8c8:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_ZL9tx_buffer+0x52>
     8cc:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <_ZL9tx_buffer+0x7b>
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	72 e4       	ldi	r23, 0x42	; 66
     8d4:	8f e0       	ldi	r24, 0x0F	; 15
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__udivmodsi4>
     8dc:	21 50       	subi	r18, 0x01	; 1
     8de:	31 09       	sbc	r19, r1
     8e0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     8e4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     8e8:	88 e9       	ldi	r24, 0x98	; 152
     8ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     8ee:	8e e0       	ldi	r24, 0x0E	; 14
     8f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     8f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_ZL14g_bus_disabled>
     8f8:	08 95       	ret

000008fa <_Z17linkbus_send_textPc>:
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZL14g_bus_disabled>
     906:	21 11       	cpse	r18, r1
     908:	14 c0       	rjmp	.+40     	; 0x932 <__stack+0x33>
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	a1 f0       	breq	.+40     	; 0x936 <__stack+0x37>
     90e:	8c 01       	movw	r16, r24
     910:	0e 94 b8 03 	call	0x770	; 0x770 <_Z17nextEmptyTxBufferv>
     914:	00 97       	sbiw	r24, 0x00	; 0
     916:	b9 f4       	brne	.+46     	; 0x946 <__stack+0x47>
     918:	c8 ec       	ldi	r28, 0xC8	; 200
     91a:	d0 e0       	ldi	r29, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
     91e:	20 97       	sbiw	r28, 0x00	; 0
     920:	61 f0       	breq	.+24     	; 0x93a <__stack+0x3b>
     922:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <_ZL17linkbus_tx_active>
     926:	99 23       	and	r25, r25
     928:	51 f0       	breq	.+20     	; 0x93e <__stack+0x3f>
     92a:	20 97       	sbiw	r28, 0x00	; 0
     92c:	d1 f0       	breq	.+52     	; 0x962 <__stack+0x63>
     92e:	21 97       	sbiw	r28, 0x01	; 1
     930:	f8 cf       	rjmp	.-16     	; 0x922 <__stack+0x23>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	1b c0       	rjmp	.+54     	; 0x96c <__stack+0x6d>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	19 c0       	rjmp	.+50     	; 0x96c <__stack+0x6d>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	17 c0       	rjmp	.+46     	; 0x96c <__stack+0x6d>
     93e:	0e 94 b8 03 	call	0x770	; 0x770 <_Z17nextEmptyTxBufferv>
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	61 f3       	breq	.-40     	; 0x91e <__stack+0x1f>
     946:	1f 93       	push	r17
     948:	0f 93       	push	r16
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
     952:	0e 94 3b 04 	call	0x876	; 0x876 <_Z16linkbus_start_txv>
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x6d>
     962:	0e 94 b8 03 	call	0x770	; 0x770 <_Z17nextEmptyTxBufferv>
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	71 f7       	brne	.-36     	; 0x946 <__stack+0x47>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <_Z17lb_send_NewPromptv>:
     976:	8c eb       	ldi	r24, 0xBC	; 188
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     97e:	81 11       	cpse	r24, r1
     980:	fa cf       	rjmp	.-12     	; 0x976 <_Z17lb_send_NewPromptv>
     982:	08 95       	ret

00000984 <_Z15lb_send_NewLinev>:
     984:	8f eb       	ldi	r24, 0xBF	; 191
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     98c:	08 95       	ret

0000098e <_Z12lb_echo_charh>:
     98e:	ee e1       	ldi	r30, 0x1E	; 30
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	80 83       	st	Z, r24
     994:	11 82       	std	Z+1, r1	; 0x01
     996:	cf 01       	movw	r24, r30
     998:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     99c:	08 95       	ret

0000099e <_Z14lb_send_stringPch>:
     99e:	cf 93       	push	r28
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	19 f1       	breq	.+70     	; 0x9ea <_Z14lb_send_stringPch+0x4c>
     9a4:	fc 01       	movw	r30, r24
     9a6:	01 90       	ld	r0, Z+
     9a8:	00 20       	and	r0, r0
     9aa:	e9 f7       	brne	.-6      	; 0x9a6 <_Z14lb_send_stringPch+0x8>
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	e8 1b       	sub	r30, r24
     9b0:	f9 0b       	sbc	r31, r25
     9b2:	ba 97       	sbiw	r30, 0x2a	; 42
     9b4:	e0 f4       	brcc	.+56     	; 0x9ee <_Z14lb_send_stringPch+0x50>
     9b6:	c6 2f       	mov	r28, r22
     9b8:	bc 01       	movw	r22, r24
     9ba:	49 e2       	ldi	r20, 0x29	; 41
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	8e e1       	ldi	r24, 0x1E	; 30
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	0e 94 8d 12 	call	0x251a	; 0x251a <strncpy>
     9c6:	cc 23       	and	r28, r28
     9c8:	59 f0       	breq	.+22     	; 0x9e0 <_Z14lb_send_stringPch+0x42>
     9ca:	8e e1       	ldi	r24, 0x1E	; 30
     9cc:	94 e0       	ldi	r25, 0x04	; 4
     9ce:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     9d2:	81 11       	cpse	r24, r1
     9d4:	fa cf       	rjmp	.-12     	; 0x9ca <_Z14lb_send_stringPch+0x2c>
     9d6:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZL17linkbus_tx_active>
     9da:	81 11       	cpse	r24, r1
     9dc:	fc cf       	rjmp	.-8      	; 0x9d6 <_Z14lb_send_stringPch+0x38>
     9de:	08 c0       	rjmp	.+16     	; 0x9f0 <_Z14lb_send_stringPch+0x52>
     9e0:	8e e1       	ldi	r24, 0x1E	; 30
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <_Z14lb_send_stringPch+0x52>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <_Z14lb_send_stringPch+0x52>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <_Z12lb_send_Helpv>:

/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	if(g_bus_disabled)
     9fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14g_bus_disabled>
     a00:	81 11       	cpse	r24, r1
     a02:	37 c0       	rjmp	.+110    	; 0xa72 <_Z12lb_send_Helpv+0x7e>
	{
		return;
	}

	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
     a04:	8c e6       	ldi	r24, 0x6C	; 108
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	9f 93       	push	r25
     a0a:	8f 93       	push	r24
     a0c:	85 e7       	ldi	r24, 0x75	; 117
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	8d e7       	ldi	r24, 0x7D	; 125
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	8e e1       	ldi	r24, 0x1E	; 30
     a1e:	94 e0       	ldi	r25, 0x04	; 4
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
     a28:	8d b7       	in	r24, 0x3d	; 61
     a2a:	9e b7       	in	r25, 0x3e	; 62
     a2c:	08 96       	adiw	r24, 0x08	; 8
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	9e bf       	out	0x3e, r25	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	8d bf       	out	0x3d, r24	; 61

	while(linkbus_send_text(g_tempMsgBuff))
     a38:	8e e1       	ldi	r24, 0x1E	; 30
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     a40:	81 11       	cpse	r24, r1
     a42:	fa cf       	rjmp	.-12     	; 0xa38 <_Z12lb_send_Helpv+0x44>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     a44:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZL17linkbus_tx_active>

	while(linkbus_send_text(g_tempMsgBuff))
	{
		;
	}
	while(linkbusTxInProgress())
     a48:	81 11       	cpse	r24, r1
     a4a:	fc cf       	rjmp	.-8      	; 0xa44 <_Z12lb_send_Helpv+0x50>
     a4c:	c1 e9       	ldi	r28, 0x91	; 145
     a4e:	d1 e0       	ldi	r29, 0x01	; 1
     a50:	0c eb       	ldi	r16, 0xBC	; 188
     a52:	12 e0       	ldi	r17, 0x02	; 2
	}

	size_t n = sizeof(textHelp) / sizeof(textHelp[0]);
	for(uint8_t i = 0; i < n; i++)
	{
		while(linkbus_send_text((char*)textHelp[i]))
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z17linkbus_send_textPc>
     a5a:	81 11       	cpse	r24, r1
     a5c:	fb cf       	rjmp	.-10     	; 0xa54 <_Z12lb_send_Helpv+0x60>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     a5e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZL17linkbus_tx_active>
	{
		while(linkbus_send_text((char*)textHelp[i]))
		{
			;
		}
		while(linkbusTxInProgress())
     a62:	81 11       	cpse	r24, r1
     a64:	fc cf       	rjmp	.-8      	; 0xa5e <_Z12lb_send_Helpv+0x6a>
     a66:	67 96       	adiw	r28, 0x17	; 23
	{
		;
	}

	size_t n = sizeof(textHelp) / sizeof(textHelp[0]);
	for(uint8_t i = 0; i < n; i++)
     a68:	c0 17       	cp	r28, r16
     a6a:	d1 07       	cpc	r29, r17
     a6c:	99 f7       	brne	.-26     	; 0xa54 <_Z12lb_send_Helpv+0x60>
		{
			;
		}
	}

	lb_send_NewLine();
     a6e:	0e 94 c2 04 	call	0x984	; 0x984 <_Z15lb_send_NewLinev>
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <__vector_21>:

/***********************************************************************
 * ADC Conversion Complete ISR
 ************************************************************************/
ISR(ADC_vect)
{
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
	digitalWrite(PIN_CAL_OUT, ON);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8b e0       	ldi	r24, 0x0B	; 11
     aa2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>
	if(g_goertzel.DataPoint(ADCH))
     aa6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	86 e8       	ldi	r24, 0x86	; 134
     aae:	94 e0       	ldi	r25, 0x04	; 4
     ab0:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN8Goertzel9DataPointEi>
     ab4:	88 23       	and	r24, r24
     ab6:	29 f0       	breq	.+10     	; 0xac2 <__vector_21+0x46>
	{
		ADCSRA &= ~(1 << ADIE); /* disable ADC interrupt */
     ab8:	ea e7       	ldi	r30, 0x7A	; 122
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	87 7f       	andi	r24, 0xF7	; 247
     ac0:	80 83       	st	Z, r24
	}
	digitalWrite(PIN_CAL_OUT, OFF);
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	8b e0       	ldi	r24, 0x0B	; 11
     ac6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>
}
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_8>:
 * Timer/Counter2 Compare Match B ISR
 *
 * Handles periodic tasks not requiring precise timing.
 ************************************************************************/
ISR( TIMER2_COMPB_vect )
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
	g_tick_count++;
     afe:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <g_tick_count>
     b02:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <g_tick_count+0x1>
     b06:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <g_tick_count+0x2>
     b0a:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <g_tick_count+0x3>
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	a1 1d       	adc	r26, r1
     b12:	b1 1d       	adc	r27, r1
     b14:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <g_tick_count>
     b18:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <g_tick_count+0x1>
     b1c:	a0 93 84 04 	sts	0x0484, r26	; 0x800484 <g_tick_count+0x2>
     b20:	b0 93 85 04 	sts	0x0485, r27	; 0x800485 <g_tick_count+0x3>
}   /* End of Timer 2 ISR */
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_18>:
 *                      fn = variable length fields
 *                      ; = end of message flag
 *
 ************************************************************************/
ISR(USART_RX_vect)
{
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	1f 93       	push	r17
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = UDR0;
     b5e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if(!buff)
     b62:	c0 91 a5 04 	lds	r28, 0x04A5	; 0x8004a5 <_ZZ11__vector_18E4buff>
     b66:	d0 91 a6 04 	lds	r29, 0x04A6	; 0x8004a6 <_ZZ11__vector_18E4buff+0x1>
     b6a:	20 97       	sbiw	r28, 0x00	; 0
     b6c:	51 f4       	brne	.+20     	; 0xb82 <__vector_18+0x4c>
	{
		buff = nextEmptyRxBuffer();
     b6e:	0e 94 df 03 	call	0x7be	; 0x7be <_Z17nextEmptyRxBufferv>
     b72:	ec 01       	movw	r28, r24
     b74:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <_ZZ11__vector_18E4buff+0x1>
     b78:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <_ZZ11__vector_18E4buff>
	}

	if(buff)
     b7c:	89 2b       	or	r24, r25
     b7e:	09 f4       	brne	.+2      	; 0xb82 <__vector_18+0x4c>
     b80:	86 c1       	rjmp	.+780    	; 0xe8e <__vector_18+0x358>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     b82:	81 2f       	mov	r24, r17
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <toupper>
     b8a:	9c 01       	movw	r18, r24

		if(ignoreCount)
     b8c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <_ZZ11__vector_18E11ignoreCount>
     b90:	88 23       	and	r24, r24
     b92:	21 f0       	breq	.+8      	; 0xb9c <__vector_18+0x66>
		{
			rx_char = '\0';
			ignoreCount--;
     b94:	81 50       	subi	r24, 0x01	; 1
     b96:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_ZZ11__vector_18E11ignoreCount>
     b9a:	79 c1       	rjmp	.+754    	; 0xe8e <__vector_18+0x358>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     b9c:	2b 31       	cpi	r18, 0x1B	; 27
     b9e:	21 f4       	brne	.+8      	; 0xba8 <__vector_18+0x72>
			if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_ZZ11__vector_18E11ignoreCount>
     ba6:	73 c1       	rjmp	.+742    	; 0xe8e <__vector_18+0x358>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     ba8:	2d 30       	cpi	r18, 0x0D	; 13
     baa:	09 f0       	breq	.+2      	; 0xbae <__vector_18+0x78>
     bac:	44 c0       	rjmp	.+136    	; 0xc36 <__vector_18+0x100>
		{
			if(receiving_msg)
     bae:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZZ11__vector_18E13receiving_msg>
     bb2:	88 23       	and	r24, r24
     bb4:	59 f1       	breq	.+86     	; 0xc0c <__vector_18+0xd6>
			{
				if(charIndex > 0)
     bb6:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
     bba:	ee 23       	and	r30, r30
     bbc:	21 f1       	breq	.+72     	; 0xc06 <__vector_18+0xd0>
				{
					buff->type = LINKBUS_MSG_QUERY;
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	88 83       	st	Y, r24
					buff->id = (LBMessageID)msg_ID;
     bc2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
     bc6:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01

					if(field_index > 0) /* terminate the last field */
     bce:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZZ11__vector_18E11field_index>
     bd2:	88 23       	and	r24, r24
     bd4:	a1 f0       	breq	.+40     	; 0xbfe <__vector_18+0xc8>
					{
						buff->fields[field_index - 1][field_len] = 0;
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <_ZZ11__vector_18E9field_len>
     bde:	ac 01       	movw	r20, r24
     be0:	44 0f       	add	r20, r20
     be2:	55 1f       	adc	r21, r21
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	84 0f       	add	r24, r20
     bf2:	95 1f       	adc	r25, r21
     bf4:	c8 0f       	add	r28, r24
     bf6:	d9 1f       	adc	r29, r25
     bf8:	c2 0f       	add	r28, r18
     bfa:	d1 1d       	adc	r29, r1
     bfc:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	e7 55       	subi	r30, 0x57	; 87
     c02:	fb 4f       	sbci	r31, 0xFB	; 251
     c04:	10 82       	st	Z, r1
				}

				lb_send_NewLine();
     c06:	0e 94 c2 04 	call	0x984	; 0x984 <_Z15lb_send_NewLinev>
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__vector_18+0xde>
			}
			else
			{
				buff->id = INVALID_MESSAGE; /* print help message */
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	9f e7       	ldi	r25, 0x7F	; 127
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
			}

			charIndex = 0;
     c14:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
			field_len = 0;
     c18:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <_ZZ11__vector_18E9field_len>
			msg_ID = MESSAGE_EMPTY;
     c1c:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     c20:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <_ZZ11__vector_18E6msg_ID>

			field_index = 0;
     c24:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <_ZZ11__vector_18E11field_index>
			buff = NULL;
     c28:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZZ11__vector_18E4buff+0x1>
     c2c:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <_ZZ11__vector_18E4buff>

			receiving_msg = FALSE;
     c30:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <_ZZ11__vector_18E13receiving_msg>
     c34:	2c c1       	rjmp	.+600    	; 0xe8e <__vector_18+0x358>
		}
		else if(rx_char)
     c36:	22 23       	and	r18, r18
     c38:	09 f4       	brne	.+2      	; 0xc3c <__vector_18+0x106>
     c3a:	29 c1       	rjmp	.+594    	; 0xe8e <__vector_18+0x358>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
     c3c:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
     c40:	4e 2f       	mov	r20, r30
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	da 01       	movw	r26, r20
     c46:	a7 55       	subi	r26, 0x57	; 87
     c48:	bb 4f       	sbci	r27, 0xFB	; 251
     c4a:	2c 93       	st	X, r18

			if(charIndex)
     c4c:	ee 23       	and	r30, r30
     c4e:	09 f4       	brne	.+2      	; 0xc52 <__vector_18+0x11c>
     c50:	f5 c0       	rjmp	.+490    	; 0xe3c <__vector_18+0x306>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
     c52:	2f 37       	cpi	r18, 0x7F	; 127
     c54:	09 f0       	breq	.+2      	; 0xc58 <__vector_18+0x122>
     c56:	76 c0       	rjmp	.+236    	; 0xd44 <__vector_18+0x20e>
				{
					charIndex--;
     c58:	e1 50       	subi	r30, 0x01	; 1
     c5a:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
					if(field_index == 0)
     c5e:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZZ11__vector_18E11field_index>
     c62:	81 11       	cpse	r24, r1
     c64:	13 c0       	rjmp	.+38     	; 0xc8c <__vector_18+0x156>
					{
						msg_ID -= textBuff[charIndex];
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	e7 55       	subi	r30, 0x57	; 87
     c6a:	fb 4f       	sbci	r31, 0xFB	; 251
						msg_ID /= 10;
     c6c:	40 81       	ld	r20, Z
     c6e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
     c72:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     c76:	84 1b       	sub	r24, r20
     c78:	91 09       	sbc	r25, r1
     c7a:	6a e0       	ldi	r22, 0x0A	; 10
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 b4 10 	call	0x2168	; 0x2168 <__divmodhi4>
     c82:	70 93 cc 04 	sts	0x04CC, r23	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     c86:	60 93 cb 04 	sts	0x04CB, r22	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
     c8a:	50 c0       	rjmp	.+160    	; 0xd2c <__vector_18+0x1f6>
					}
					else if(field_len)
     c8c:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <_ZZ11__vector_18E9field_len>
     c90:	99 23       	and	r25, r25
     c92:	b9 f0       	breq	.+46     	; 0xcc2 <__vector_18+0x18c>
					{
						field_len--;
     c94:	4f ef       	ldi	r20, 0xFF	; 255
     c96:	49 0f       	add	r20, r25
     c98:	40 93 ce 04 	sts	0x04CE, r20	; 0x8004ce <_ZZ11__vector_18E9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	bc 01       	movw	r22, r24
     ca2:	66 0f       	add	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	86 0f       	add	r24, r22
     cb4:	97 1f       	adc	r25, r23
     cb6:	c8 0f       	add	r28, r24
     cb8:	d9 1f       	adc	r29, r25
     cba:	c4 0f       	add	r28, r20
     cbc:	d1 1d       	adc	r29, r1
     cbe:	1b 82       	std	Y+3, r1	; 0x03
     cc0:	35 c0       	rjmp	.+106    	; 0xd2c <__vector_18+0x1f6>
					}
					else if(textBuff[charIndex] == ' ')
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	e7 55       	subi	r30, 0x57	; 87
     cc6:	fb 4f       	sbci	r31, 0xFB	; 251
     cc8:	90 81       	ld	r25, Z
     cca:	90 32       	cpi	r25, 0x20	; 32
     ccc:	e1 f4       	brne	.+56     	; 0xd06 <__vector_18+0x1d0>
					{
						field_index--;
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZZ11__vector_18E11field_index>
						field_len = strlen(buff->fields[field_index]);
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	ac 01       	movw	r20, r24
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	84 0f       	add	r24, r20
     cea:	95 1f       	adc	r25, r21
     cec:	03 96       	adiw	r24, 0x03	; 3
     cee:	c8 0f       	add	r28, r24
     cf0:	d9 1f       	adc	r29, r25
     cf2:	fe 01       	movw	r30, r28
     cf4:	01 90       	ld	r0, Z+
     cf6:	00 20       	and	r0, r0
     cf8:	e9 f7       	brne	.-6      	; 0xcf4 <__vector_18+0x1be>
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	ec 1b       	sub	r30, r28
     cfe:	fd 0b       	sbc	r31, r29
     d00:	e0 93 ce 04 	sts	0x04CE, r30	; 0x8004ce <_ZZ11__vector_18E9field_len>
     d04:	13 c0       	rjmp	.+38     	; 0xd2c <__vector_18+0x1f6>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
     d06:	48 2f       	mov	r20, r24
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	ba 01       	movw	r22, r20
     d0c:	66 0f       	add	r22, r22
     d0e:	77 1f       	adc	r23, r23
     d10:	44 0f       	add	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	44 0f       	add	r20, r20
     d16:	55 1f       	adc	r21, r21
     d18:	44 0f       	add	r20, r20
     d1a:	55 1f       	adc	r21, r21
     d1c:	46 0f       	add	r20, r22
     d1e:	57 1f       	adc	r21, r23
     d20:	c4 0f       	add	r28, r20
     d22:	d5 1f       	adc	r29, r21
     d24:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
     d26:	81 50       	subi	r24, 0x01	; 1
     d28:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZZ11__vector_18E11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
     d2c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
     d30:	e8 2f       	mov	r30, r24
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	e7 55       	subi	r30, 0x57	; 87
     d36:	fb 4f       	sbci	r31, 0xFB	; 251
     d38:	10 82       	st	Z, r1

					if(charIndex == 0)
     d3a:	81 11       	cpse	r24, r1
     d3c:	9b c0       	rjmp	.+310    	; 0xe74 <__vector_18+0x33e>
					{
						receiving_msg = FALSE;
     d3e:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <_ZZ11__vector_18E13receiving_msg>
     d42:	98 c0       	rjmp	.+304    	; 0xe74 <__vector_18+0x33e>
					}
				}
				else
				{
					if(rx_char == ' ')
     d44:	20 32       	cpi	r18, 0x20	; 32
     d46:	99 f5       	brne	.+102    	; 0xdae <__vector_18+0x278>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
     d48:	fa 01       	movw	r30, r20
     d4a:	e8 55       	subi	r30, 0x58	; 88
     d4c:	fb 4f       	sbci	r31, 0xFB	; 251
     d4e:	80 81       	ld	r24, Z
     d50:	80 32       	cpi	r24, 0x20	; 32
     d52:	09 f4       	brne	.+2      	; 0xd56 <__vector_18+0x220>
     d54:	9c c0       	rjmp	.+312    	; 0xe8e <__vector_18+0x358>
     d56:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <_ZZ11__vector_18E11field_index>
     d5a:	86 2f       	mov	r24, r22
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	fc 01       	movw	r30, r24
     d60:	31 96       	adiw	r30, 0x01	; 1
     d62:	33 97       	sbiw	r30, 0x03	; 3
     d64:	0c f0       	brlt	.+2      	; 0xd68 <__vector_18+0x232>
     d66:	93 c0       	rjmp	.+294    	; 0xe8e <__vector_18+0x358>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
     d68:	66 23       	and	r22, r22
     d6a:	99 f0       	breq	.+38     	; 0xd92 <__vector_18+0x25c>
							{
								buff->fields[field_index - 1][field_len] = '\0';
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <_ZZ11__vector_18E9field_len>
     d72:	fc 01       	movw	r30, r24
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	8e 0f       	add	r24, r30
     d86:	9f 1f       	adc	r25, r31
     d88:	c8 0f       	add	r28, r24
     d8a:	d9 1f       	adc	r29, r25
     d8c:	c7 0f       	add	r28, r23
     d8e:	d1 1d       	adc	r29, r1
     d90:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	60 93 cd 04 	sts	0x04CD, r22	; 0x8004cd <_ZZ11__vector_18E11field_index>
							field_len = 0;
     d98:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <_ZZ11__vector_18E9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_COMMANDLINE_LENGTH - 1));
     d9c:	4f 5f       	subi	r20, 0xFF	; 255
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	40 32       	cpi	r20, 0x20	; 32
     da2:	51 05       	cpc	r21, r1
     da4:	0c f0       	brlt	.+2      	; 0xda8 <__vector_18+0x272>
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	40 93 a8 04 	sts	0x04A8, r20	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
     dac:	63 c0       	rjmp	.+198    	; 0xe74 <__vector_18+0x33e>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
     dae:	40 91 ce 04 	lds	r20, 0x04CE	; 0x8004ce <_ZZ11__vector_18E9field_len>
     db2:	4a 30       	cpi	r20, 0x0A	; 10
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <__vector_18+0x282>
     db6:	6b c0       	rjmp	.+214    	; 0xe8e <__vector_18+0x358>
					{
						if(field_index == 0)    /* message ID received */
     db8:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZZ11__vector_18E11field_index>
     dbc:	81 11       	cpse	r24, r1
     dbe:	19 c0       	rjmp	.+50     	; 0xdf2 <__vector_18+0x2bc>
						{
							msg_ID = msg_ID * 10 + rx_char;
     dc0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
     dc4:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     dc8:	bc 01       	movw	r22, r24
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	86 0f       	add	r24, r22
     ddc:	97 1f       	adc	r25, r23
     dde:	82 0f       	add	r24, r18
     de0:	91 1d       	adc	r25, r1
     de2:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     de6:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
							field_len++;
     dea:	4f 5f       	subi	r20, 0xFF	; 255
     dec:	40 93 ce 04 	sts	0x04CE, r20	; 0x8004ce <_ZZ11__vector_18E9field_len>
     df0:	1a c0       	rjmp	.+52     	; 0xe26 <__vector_18+0x2f0>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	51 e0       	ldi	r21, 0x01	; 1
     df8:	54 0f       	add	r21, r20
     dfa:	50 93 ce 04 	sts	0x04CE, r21	; 0x8004ce <_ZZ11__vector_18E9field_len>
     dfe:	bc 01       	movw	r22, r24
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	86 0f       	add	r24, r22
     e12:	97 1f       	adc	r25, r23
     e14:	c8 0f       	add	r28, r24
     e16:	d9 1f       	adc	r29, r25
     e18:	fe 01       	movw	r30, r28
     e1a:	e4 0f       	add	r30, r20
     e1c:	f1 1d       	adc	r31, r1
     e1e:	23 83       	std	Z+3, r18	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
     e20:	c5 0f       	add	r28, r21
     e22:	d1 1d       	adc	r29, r1
     e24:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_COMMANDLINE_LENGTH - 1));
     e26:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	80 32       	cpi	r24, 0x20	; 32
     e30:	91 05       	cpc	r25, r1
     e32:	0c f0       	brlt	.+2      	; 0xe36 <__vector_18+0x300>
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
     e3a:	1c c0       	rjmp	.+56     	; 0xe74 <__vector_18+0x33e>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
     e3c:	2f 37       	cpi	r18, 0x7F	; 127
     e3e:	41 f4       	brne	.+16     	; 0xe50 <__vector_18+0x31a>
				{
					if(msg_ID <= 0)
     e40:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
     e44:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     e48:	18 16       	cp	r1, r24
     e4a:	19 06       	cpc	r1, r25
     e4c:	bc f0       	brlt	.+46     	; 0xe7c <__vector_18+0x346>
     e4e:	1b c0       	rjmp	.+54     	; 0xe86 <__vector_18+0x350>
						rx_char = '\0';
					}

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
     e50:	20 32       	cpi	r18, 0x20	; 32
     e52:	e9 f0       	breq	.+58     	; 0xe8e <__vector_18+0x358>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
     e54:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <_ZZ11__vector_18E11field_index>
					msg_ID = rx_char;
     e58:	c9 01       	movw	r24, r18
     e5a:	99 27       	eor	r25, r25
     e5c:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     e60:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZZ11__vector_18E6msg_ID>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
					{
						buff->fields[i][0] = '\0';
     e64:	1b 82       	std	Y+3, r1	; 0x03
     e66:	1d 86       	std	Y+13, r1	; 0x0d
     e68:	1f 8a       	std	Y+23, r1	; 0x17
					}

					receiving_msg = TRUE;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZZ11__vector_18E13receiving_msg>
					charIndex++;
     e70:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <_ZZ11__vector_18E9charIndex>
				}
			}

			if(rx_char)
			{
				lb_echo_char(rx_char);
     e74:	82 2f       	mov	r24, r18
     e76:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12lb_echo_charh>
			}
		}
	}
}   /* End of UART Rx ISR */
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <__vector_18+0x358>
					if(msg_ID <= 0)
					{
						rx_char = '\0';
					}

					msg_ID = 0;
     e7c:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     e80:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
     e84:	f7 cf       	rjmp	.-18     	; 0xe74 <__vector_18+0x33e>
     e86:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZZ11__vector_18E6msg_ID+0x1>
     e8a:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <_ZZ11__vector_18E6msg_ID>
			{
				lb_echo_char(rx_char);
			}
		}
	}
}   /* End of UART Rx ISR */
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	1f 91       	pop	r17
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__vector_19>:
 * This ISR is responsible for filling the USART transmit buffer. It
 * implements the transmit function of the Linkbus.
 *
 ************************************************************************/
ISR(USART_UDRE_vect)
{
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
     ed8:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <_ZZ11__vector_19E4buff>
     edc:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZZ11__vector_19E4buff+0x1>
     ee0:	89 2b       	or	r24, r25
     ee2:	31 f4       	brne	.+12     	; 0xef0 <__vector_19+0x3a>
	{
		buff = nextFullTxBuffer();
     ee4:	0e 94 91 03 	call	0x722	; 0x722 <_Z16nextFullTxBufferv>
     ee8:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <_ZZ11__vector_19E4buff+0x1>
     eec:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <_ZZ11__vector_19E4buff>
	}

	if((*buff)[charIndex])
     ef0:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <_ZZ11__vector_19E4buff>
     ef4:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <_ZZ11__vector_19E4buff+0x1>
     ef8:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZZ11__vector_19E9charIndex>
     efc:	df 01       	movw	r26, r30
     efe:	a8 0f       	add	r26, r24
     f00:	b1 1d       	adc	r27, r1
     f02:	9c 91       	ld	r25, X
     f04:	99 23       	and	r25, r25
     f06:	31 f0       	breq	.+12     	; 0xf14 <__vector_19+0x5e>
	{
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZZ11__vector_19E9charIndex>
     f0e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <__vector_19+0x78>
	}
	else
	{
		charIndex = 0;
     f14:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZZ11__vector_19E9charIndex>
		(*buff)[0] = '\0';
     f18:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
     f1a:	0e 94 91 03 	call	0x722	; 0x722 <_Z16nextFullTxBufferv>
     f1e:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <_ZZ11__vector_19E4buff+0x1>
     f22:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <_ZZ11__vector_19E4buff>
		if(!buff)
     f26:	89 2b       	or	r24, r25
     f28:	11 f4       	brne	.+4      	; 0xf2e <__vector_19+0x78>
		{
			linkbus_end_tx();
     f2a:	0e 94 4b 04 	call	0x896	; 0x896 <_Z14linkbus_end_txv>
		}
	}
}   /* End of UART Tx ISR */
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	initializeEEPROMVars(FALSE);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_Z20initializeEEPROMVarsh>
	linkbus_init(BAUD);                     /* Start the Link Bus serial comms */
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	71 ee       	ldi	r23, 0xE1	; 225
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z12linkbus_initm>
	/* set pins as outputs */
	pinMode(PIN_LED, OUTPUT);       /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	8d e0       	ldi	r24, 0x0D	; 13
     f66:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	digitalWrite(PIN_LED, OFF);
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	8d e0       	ldi	r24, 0x0D	; 13
     f6e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>
	pinMode(PIN_MORSE_KEY, OUTPUT); /* This pin is used to control the KEY line to the transmitter only active on cycle. */
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	digitalWrite(PIN_MORSE_KEY, OFF);
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>
	pinMode(PIN_AUDIO_OUT, OUTPUT);
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	89 e0       	ldi	r24, 0x09	; 9
     f86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	digitalWrite(PIN_AUDIO_OUT, OFF);
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	89 e0       	ldi	r24, 0x09	; 9
     f8e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>

	/* Set unused pins as outputs pulled high */
	pinMode(PIN_UNUSED_7, INPUT_PULLUP);
     f92:	63 e0       	ldi	r22, 0x03	; 3
     f94:	87 e0       	ldi	r24, 0x07	; 7
     f96:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(PIN_UNUSED_8, INPUT_PULLUP);
     f9a:	63 e0       	ldi	r22, 0x03	; 3
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(PIN_UNUSED_10, INPUT_PULLUP);
     fa2:	63 e0       	ldi	r22, 0x03	; 3
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(PIN_UNUSED_12, INPUT_PULLUP);
     faa:	63 e0       	ldi	r22, 0x03	; 3
     fac:	8c e0       	ldi	r24, 0x0C	; 12
     fae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(A0, INPUT); /* Audio input */
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	82 e3       	ldi	r24, 0x32	; 50
     fb6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(A1, INPUT_PULLUP);
     fba:	63 e0       	ldi	r22, 0x03	; 3
     fbc:	83 e3       	ldi	r24, 0x33	; 51
     fbe:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(A2, INPUT_PULLUP);
     fc2:	63 e0       	ldi	r22, 0x03	; 3
     fc4:	84 e3       	ldi	r24, 0x34	; 52
     fc6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(A3, INPUT_PULLUP);
     fca:	63 e0       	ldi	r22, 0x03	; 3
     fcc:	85 e3       	ldi	r24, 0x35	; 53
     fce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	pinMode(PIN_CAL_OUT, OUTPUT);
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	8b e0       	ldi	r24, 0x0B	; 11
     fd6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z7pinModehh>
	digitalWrite(PIN_CAL_OUT, OFF);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	8b e0       	ldi	r24, 0x0B	; 11
     fde:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>

	ADCSRA = 0;             /* clear ADCSRA register */
     fe2:	ea e7       	ldi	r30, 0x7A	; 122
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	10 82       	st	Z, r1
	ADCSRB = 0;             /* clear ADCSRB register */
     fe8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX |= (0 & 0x07);    /* set A0 analog input pin */
     fec:	ac e7       	ldi	r26, 0x7C	; 124
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	8c 91       	ld	r24, X
     ff2:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0);  /* set reference voltage */
     ff4:	8c 91       	ld	r24, X
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR);  /* left align ADC value to 8 bits from ADCH register */
     ffa:	8c 91       	ld	r24, X
     ffc:	80 62       	ori	r24, 0x20	; 32
     ffe:	8c 93       	st	X, r24
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    1000:	80 81       	ld	r24, Z
    1002:	86 60       	ori	r24, 0x06	; 6
    1004:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE); /* enable auto trigger */
    1006:	80 81       	ld	r24, Z
    1008:	80 62       	ori	r24, 0x20	; 32
    100a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    100c:	80 81       	ld	r24, Z
    100e:	88 60       	ori	r24, 0x08	; 8
    1010:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable ADC */
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    1018:	80 81       	ld	r24, Z
    101a:	80 64       	ori	r24, 0x40	; 64
    101c:	80 83       	st	Z, r24


	/**
	 * TIMER2 is for periodic interrupts to drive Morse code generation */
	/* Reset control registers */
	TCCR2A = 0;
    101e:	a0 eb       	ldi	r26, 0xB0	; 176
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	1c 92       	st	X, r1
	TCCR2B = 0;
    1024:	e1 eb       	ldi	r30, 0xB1	; 177
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    102a:	8c 91       	ld	r24, X
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	8c 93       	st	X, r24
#if CAL_SIGNAL_ON_PD3
		pinMode(PIN_CAL_OUT, OUTPUT);                   /* 601Hz Calibration Signal */
		TCCR2A |= (1 << COM2A0);                        /* Toggle OC2A (PB3) on compare match */
#endif /* CAL_SIGNAL_ON_PD3 */
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    1030:	80 81       	ld	r24, Z
    1032:	87 60       	ori	r24, 0x07	; 7
    1034:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    1036:	8c e0       	ldi	r24, 0x0C	; 12
    1038:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    103c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    1040:	e6 eb       	ldi	r30, 0xB6	; 182
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8f 7d       	andi	r24, 0xDF	; 223
    1048:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    104a:	e0 e7       	ldi	r30, 0x70	; 112
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    1050:	80 81       	ld	r24, Z
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	80 83       	st	Z, r24
/*	TCCR0B |= (1 << CS02);      / * Prescale 256 * / */
/*	OCR0A = DEFAULT_TONE_FREQUENCY; */
/*	TIMSK0 = 0x00; */
/*	TIMSK0 |= (1 << OCIE0A); */

	lb_send_string((char*)SW_REVISION, FALSE);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	8e e0       	ldi	r24, 0x0E	; 14
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
	 *  Serial.println(g_coeff); */

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    1060:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z4loopv>
    1064:	fd cf       	rjmp	.-6      	; 0x1060 <main+0x110>

00001066 <_Z4loopv>:

/*
 *  Here is the main loop
 * */
void loop()
{
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
	handleLinkBusMsgs();
    1076:	0e 94 13 09 	call	0x1226	; 0x1226 <_Z17handleLinkBusMsgsv>

	if(g_goertzel.SamplesReady())
    107a:	86 e8       	ldi	r24, 0x86	; 134
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN8Goertzel12SamplesReadyEv>
    1082:	88 23       	and	r24, r24
    1084:	09 f4       	brne	.+2      	; 0x1088 <_Z4loopv+0x22>
    1086:	c6 c0       	rjmp	.+396    	; 0x1214 <_Z4loopv+0x1ae>
    1088:	01 ed       	ldi	r16, 0xD1	; 209
    108a:	12 e0       	ldi	r17, 0x02	; 2
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
		static int quietCount = 0;
		int x = -1, y = -1;

		for(int i = 0; i < 4; i++)
		{
			g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    1090:	f8 01       	movw	r30, r16
    1092:	41 91       	ld	r20, Z+
    1094:	51 91       	ld	r21, Z+
    1096:	61 91       	ld	r22, Z+
    1098:	71 91       	ld	r23, Z+
    109a:	8f 01       	movw	r16, r30
    109c:	86 e8       	ldi	r24, 0x86	; 134
    109e:	94 e0       	ldi	r25, 0x04	; 4
    10a0:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN8Goertzel18SetTargetFrequencyEf>
			magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    10a4:	86 e8       	ldi	r24, 0x86	; 134
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN8Goertzel10Magnitude2Ev>

			if(magnitudeY > threshold)                          /*if you're getting false hits or no hits adjust the threshold */
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	34 e2       	ldi	r19, 0x24	; 36
    10b0:	44 e7       	ldi	r20, 0x74	; 116
    10b2:	5a e4       	ldi	r21, 0x4A	; 74
    10b4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__gesf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	0c f4       	brge	.+2      	; 0x10be <_Z4loopv+0x58>
    10bc:	9f c0       	rjmp	.+318    	; 0x11fc <_Z4loopv+0x196>
		static char lastKey = '\0';
		static int checkCount = 10; /* Set above the threshold to prevent an initial false key detect */
		static int quietCount = 0;
		int x = -1, y = -1;

		for(int i = 0; i < 4; i++)
    10be:	21 96       	adiw	r28, 0x01	; 1
    10c0:	c4 30       	cpi	r28, 0x04	; 4
    10c2:	d1 05       	cpc	r29, r1
    10c4:	29 f7       	brne	.-54     	; 0x1090 <_Z4loopv+0x2a>
    10c6:	5a c0       	rjmp	.+180    	; 0x117c <_Z4loopv+0x116>

		if(y >= 0)
		{
			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    10c8:	f7 01       	movw	r30, r14
    10ca:	41 91       	ld	r20, Z+
    10cc:	51 91       	ld	r21, Z+
    10ce:	61 91       	ld	r22, Z+
    10d0:	71 91       	ld	r23, Z+
    10d2:	7f 01       	movw	r14, r30
    10d4:	86 e8       	ldi	r24, 0x86	; 134
    10d6:	94 e0       	ldi	r25, 0x04	; 4
    10d8:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    10dc:	86 e8       	ldi	r24, 0x86	; 134
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN8Goertzel10Magnitude2Ev>

				if(magnitudeX > threshold)                          /*if you're getting false hits or no hits adjust the threshold */
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	34 e2       	ldi	r19, 0x24	; 36
    10e8:	44 e7       	ldi	r20, 0x74	; 116
    10ea:	5a e4       	ldi	r21, 0x4A	; 74
    10ec:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__gesf2>
    10f0:	18 16       	cp	r1, r24
    10f2:	34 f0       	brlt	.+12     	; 0x1100 <_Z4loopv+0x9a>
			}
		}

		if(y >= 0)
		{
			for(int i = 0; i < 4; i++)
    10f4:	0f 5f       	subi	r16, 0xFF	; 255
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	04 30       	cpi	r16, 0x04	; 4
    10fa:	11 05       	cpc	r17, r1
    10fc:	29 f7       	brne	.-54     	; 0x10c8 <_Z4loopv+0x62>
    10fe:	78 c0       	rjmp	.+240    	; 0x11f0 <_Z4loopv+0x18a>
					x = i;
					break;
				}
			}

			if(x >= 0)
    1100:	11 23       	and	r17, r17
    1102:	0c f4       	brge	.+2      	; 0x1106 <_Z4loopv+0xa0>
    1104:	75 c0       	rjmp	.+234    	; 0x11f0 <_Z4loopv+0x18a>
			{
				char newKey = key[4 * y + x];
    1106:	cc 0f       	add	r28, r28
    1108:	dd 1f       	adc	r29, r29
    110a:	cc 0f       	add	r28, r28
    110c:	dd 1f       	adc	r29, r29
    110e:	cf 51       	subi	r28, 0x1F	; 31
    1110:	dd 4f       	sbci	r29, 0xFD	; 253
    1112:	c0 0f       	add	r28, r16
    1114:	d1 1f       	adc	r29, r17
    1116:	c8 81       	ld	r28, Y

				if(lastKey == newKey)
    1118:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <_ZZ4loopvE7lastKey>
    111c:	c8 13       	cpse	r28, r24
    111e:	2b c0       	rjmp	.+86     	; 0x1176 <_Z4loopv+0x110>
				{
					checkCount++;
    1120:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE10checkCount>
    1124:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZZ4loopvE10checkCount+0x1>
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZZ4loopvE10checkCount+0x1>
    112e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE10checkCount>

					if(checkCount == 5)
    1132:	05 97       	sbiw	r24, 0x05	; 5
    1134:	01 f5       	brne	.+64     	; 0x1176 <_Z4loopv+0x110>
					{
						quietCount = 0;
    1136:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZZ4loopvE10quietCount+0x1>
    113a:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZZ4loopvE10quietCount>
						g_lastKey = newKey;
    113e:	c0 93 7d 04 	sts	0x047D, r28	; 0x80047d <g_lastKey>
						sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
    1142:	1f 92       	push	r1
    1144:	cf 93       	push	r28
    1146:	87 e1       	ldi	r24, 0x17	; 23
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	87 e8       	ldi	r24, 0x87	; 135
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
						lb_send_string(g_tempStr, FALSE);
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	87 e8       	ldi	r24, 0x87	; 135
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>

						processKey(newKey);
    1164:	8c 2f       	mov	r24, r28
    1166:	0e 94 8f 0b 	call	0x171e	; 0x171e <_Z10processKeyc>
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
 *            Serial.print(" / ");
 *            Serial.println(magnitudeY); */
					}
				}

				lastKey = newKey;
    1176:	c0 93 d2 04 	sts	0x04D2, r28	; 0x8004d2 <_ZZ4loopvE7lastKey>
    117a:	3a c0       	rjmp	.+116    	; 0x11f0 <_Z4loopv+0x18a>
			}
		}
		else    /* Quiet detected */
		{
			unsigned long delta = g_tick_count - g_last;
    117c:	40 91 82 04 	lds	r20, 0x0482	; 0x800482 <g_tick_count>
    1180:	50 91 83 04 	lds	r21, 0x0483	; 0x800483 <g_tick_count+0x1>
    1184:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <g_tick_count+0x2>
    1188:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <g_tick_count+0x3>
    118c:	c0 90 7e 04 	lds	r12, 0x047E	; 0x80047e <g_last>
    1190:	d0 90 7f 04 	lds	r13, 0x047F	; 0x80047f <g_last+0x1>
    1194:	e0 90 80 04 	lds	r14, 0x0480	; 0x800480 <g_last+0x2>
    1198:	f0 90 81 04 	lds	r15, 0x0481	; 0x800481 <g_last+0x3>
/*			lb_send_string((char*)".", FALSE); */

			/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
			if(quietCount++ > 2)
    119c:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <_ZZ4loopvE10quietCount>
    11a0:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <_ZZ4loopvE10quietCount+0x1>
    11a4:	9c 01       	movw	r18, r24
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	30 93 d4 04 	sts	0x04D4, r19	; 0x8004d4 <_ZZ4loopvE10quietCount+0x1>
    11ae:	20 93 d3 04 	sts	0x04D3, r18	; 0x8004d3 <_ZZ4loopvE10quietCount>
    11b2:	03 97       	sbiw	r24, 0x03	; 3
    11b4:	ec f0       	brlt	.+58     	; 0x11f0 <_Z4loopv+0x18a>
			{
				if(delta < 1500)
    11b6:	db 01       	movw	r26, r22
    11b8:	ca 01       	movw	r24, r20
    11ba:	8c 19       	sub	r24, r12
    11bc:	9d 09       	sbc	r25, r13
    11be:	ae 09       	sbc	r26, r14
    11c0:	bf 09       	sbc	r27, r15
    11c2:	8c 3d       	cpi	r24, 0xDC	; 220
    11c4:	95 40       	sbci	r25, 0x05	; 5
    11c6:	a1 05       	cpc	r26, r1
    11c8:	b1 05       	cpc	r27, r1
    11ca:	20 f4       	brcc	.+8      	; 0x11d4 <_Z4loopv+0x16e>
				{
					checkCount = 0;
    11cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <_ZZ4loopvE10checkCount+0x1>
    11d0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE10checkCount>
				}

				quietCount = 0;
    11d4:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZZ4loopvE10quietCount+0x1>
    11d8:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZZ4loopvE10quietCount>
				g_last = g_tick_count;
    11dc:	40 93 7e 04 	sts	0x047E, r20	; 0x80047e <g_last>
    11e0:	50 93 7f 04 	sts	0x047F, r21	; 0x80047f <g_last+0x1>
    11e4:	60 93 80 04 	sts	0x0480, r22	; 0x800480 <g_last+0x2>
    11e8:	70 93 81 04 	sts	0x0481, r23	; 0x800481 <g_last+0x3>
				lastKey = '\0';
    11ec:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <_ZZ4loopvE7lastKey>
			}
		}

		ADCSRA |= (1 << ADIE);  /* enable ADC interrupt */
    11f0:	ea e7       	ldi	r30, 0x7A	; 122
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	88 60       	ori	r24, 0x08	; 8
    11f8:	80 83       	st	Z, r24
	}
}
    11fa:	0c c0       	rjmp	.+24     	; 0x1214 <_Z4loopv+0x1ae>
				y = i;
				break;
			}
		}

		if(y >= 0)
    11fc:	dd 23       	and	r29, r29
    11fe:	0c f4       	brge	.+2      	; 0x1202 <_Z4loopv+0x19c>
    1200:	bd cf       	rjmp	.-134    	; 0x117c <_Z4loopv+0x116>
    1202:	0f 2e       	mov	r0, r31
    1204:	f1 ec       	ldi	r31, 0xC1	; 193
    1206:	ef 2e       	mov	r14, r31
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	ff 2e       	mov	r15, r31
    120c:	f0 2d       	mov	r31, r0
    120e:	00 e0       	ldi	r16, 0x00	; 0
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	5a cf       	rjmp	.-332    	; 0x10c8 <_Z4loopv+0x62>
			}
		}

		ADCSRA |= (1 << ADIE);  /* enable ADC interrupt */
	}
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	08 95       	ret

00001226 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly */
void __attribute__((optimize("O0"))) handleLinkBusMsgs()
{
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	2e 97       	sbiw	r28, 0x0e	; 14
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8a 83       	std	Y+2, r24	; 0x02

	while((lb_buff = nextFullRxBuffer()))
    1242:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z16nextFullRxBufferv>
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	89 2b       	or	r24, r25
    1252:	09 f4       	brne	.+2      	; 0x1256 <_Z17handleLinkBusMsgsv+0x30>
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	22 23       	and	r18, r18
    1258:	09 f4       	brne	.+2      	; 0x125c <_Z17handleLinkBusMsgsv+0x36>
    125a:	55 c2       	rjmp	.+1194   	; 0x1706 <_Z17handleLinkBusMsgsv+0x4e0>
	{
		LBMessageID msg_id = lb_buff->id;
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	fc 01       	movw	r30, r24
    1262:	81 81       	ldd	r24, Z+1	; 0x01
    1264:	92 81       	ldd	r25, Z+2	; 0x02
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05

		switch(msg_id)
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	86 3a       	cpi	r24, 0xA6	; 166
    1270:	f0 e2       	ldi	r31, 0x20	; 32
    1272:	9f 07       	cpc	r25, r31
    1274:	09 f4       	brne	.+2      	; 0x1278 <_Z17handleLinkBusMsgsv+0x52>
    1276:	43 c0       	rjmp	.+134    	; 0x12fe <_Z17handleLinkBusMsgsv+0xd8>
    1278:	87 3a       	cpi	r24, 0xA7	; 167
    127a:	20 e2       	ldi	r18, 0x20	; 32
    127c:	92 07       	cpc	r25, r18
    127e:	ec f4       	brge	.+58     	; 0x12ba <_Z17handleLinkBusMsgsv+0x94>
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	ed e1       	ldi	r30, 0x1D	; 29
    1284:	9e 07       	cpc	r25, r30
    1286:	09 f4       	brne	.+2      	; 0x128a <_Z17handleLinkBusMsgsv+0x64>
    1288:	cc c0       	rjmp	.+408    	; 0x1422 <_Z17handleLinkBusMsgsv+0x1fc>
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	fd e1       	ldi	r31, 0x1D	; 29
    128e:	9f 07       	cpc	r25, r31
    1290:	54 f4       	brge	.+20     	; 0x12a6 <_Z17handleLinkBusMsgsv+0x80>
    1292:	85 31       	cpi	r24, 0x15	; 21
    1294:	23 e0       	ldi	r18, 0x03	; 3
    1296:	92 07       	cpc	r25, r18
    1298:	09 f4       	brne	.+2      	; 0x129c <_Z17handleLinkBusMsgsv+0x76>
    129a:	1e c2       	rjmp	.+1084   	; 0x16d8 <_Z17handleLinkBusMsgsv+0x4b2>
    129c:	8e 31       	cpi	r24, 0x1E	; 30
    129e:	93 40       	sbci	r25, 0x03	; 3
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <_Z17handleLinkBusMsgsv+0x7e>
    12a2:	0c c1       	rjmp	.+536    	; 0x14bc <_Z17handleLinkBusMsgsv+0x296>
    12a4:	16 c2       	rjmp	.+1068   	; 0x16d2 <_Z17handleLinkBusMsgsv+0x4ac>
    12a6:	8a 3b       	cpi	r24, 0xBA	; 186
    12a8:	fd e1       	ldi	r31, 0x1D	; 29
    12aa:	9f 07       	cpc	r25, r31
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z17handleLinkBusMsgsv+0x8a>
    12ae:	16 c2       	rjmp	.+1068   	; 0x16dc <_Z17handleLinkBusMsgsv+0x4b6>
    12b0:	85 32       	cpi	r24, 0x25	; 37
    12b2:	9e 41       	sbci	r25, 0x1E	; 30
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <_Z17handleLinkBusMsgsv+0x92>
    12b6:	14 c2       	rjmp	.+1064   	; 0x16e0 <_Z17handleLinkBusMsgsv+0x4ba>
    12b8:	0c c2       	rjmp	.+1048   	; 0x16d2 <_Z17handleLinkBusMsgsv+0x4ac>
    12ba:	80 3d       	cpi	r24, 0xD0	; 208
    12bc:	e3 e2       	ldi	r30, 0x23	; 35
    12be:	9e 07       	cpc	r25, r30
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <_Z17handleLinkBusMsgsv+0x9e>
    12c2:	86 c1       	rjmp	.+780    	; 0x15d0 <_Z17handleLinkBusMsgsv+0x3aa>
    12c4:	81 3d       	cpi	r24, 0xD1	; 209
    12c6:	f3 e2       	ldi	r31, 0x23	; 35
    12c8:	9f 07       	cpc	r25, r31
    12ca:	54 f4       	brge	.+20     	; 0x12e0 <_Z17handleLinkBusMsgsv+0xba>
    12cc:	8a 39       	cpi	r24, 0x9A	; 154
    12ce:	23 e2       	ldi	r18, 0x23	; 35
    12d0:	92 07       	cpc	r25, r18
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <_Z17handleLinkBusMsgsv+0xb0>
    12d4:	07 c2       	rjmp	.+1038   	; 0x16e4 <_Z17handleLinkBusMsgsv+0x4be>
    12d6:	8f 3c       	cpi	r24, 0xCF	; 207
    12d8:	93 42       	sbci	r25, 0x23	; 35
    12da:	09 f4       	brne	.+2      	; 0x12de <_Z17handleLinkBusMsgsv+0xb8>
    12dc:	05 c2       	rjmp	.+1034   	; 0x16e8 <_Z17handleLinkBusMsgsv+0x4c2>
    12de:	f9 c1       	rjmp	.+1010   	; 0x16d2 <_Z17handleLinkBusMsgsv+0x4ac>
    12e0:	85 38       	cpi	r24, 0x85	; 133
    12e2:	f4 e2       	ldi	r31, 0x24	; 36
    12e4:	9f 07       	cpc	r25, r31
    12e6:	09 f4       	brne	.+2      	; 0x12ea <_Z17handleLinkBusMsgsv+0xc4>
    12e8:	01 c2       	rjmp	.+1026   	; 0x16ec <_Z17handleLinkBusMsgsv+0x4c6>
    12ea:	8c 39       	cpi	r24, 0x9C	; 156
    12ec:	24 e2       	ldi	r18, 0x24	; 36
    12ee:	92 07       	cpc	r25, r18
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <_Z17handleLinkBusMsgsv+0xce>
    12f2:	cc c1       	rjmp	.+920    	; 0x168c <_Z17handleLinkBusMsgsv+0x466>
    12f4:	85 3f       	cpi	r24, 0xF5	; 245
    12f6:	93 42       	sbci	r25, 0x23	; 35
    12f8:	09 f4       	brne	.+2      	; 0x12fc <_Z17handleLinkBusMsgsv+0xd6>
    12fa:	4c c0       	rjmp	.+152    	; 0x1394 <_Z17handleLinkBusMsgsv+0x16e>
    12fc:	ea c1       	rjmp	.+980    	; 0x16d2 <_Z17handleLinkBusMsgsv+0x4ac>
			}
			break;

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	fc 01       	movw	r30, r24
    1304:	83 81       	ldd	r24, Z+3	; 0x03
    1306:	88 23       	and	r24, r24
    1308:	e9 f0       	breq	.+58     	; 0x1344 <_Z17handleLinkBusMsgsv+0x11e>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	fc 01       	movw	r30, r24
    1310:	84 81       	ldd	r24, Z+4	; 0x04
    1312:	86 34       	cpi	r24, 0x46	; 70
    1314:	31 f0       	breq	.+12     	; 0x1322 <_Z17handleLinkBusMsgsv+0xfc>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	fc 01       	movw	r30, r24
    131c:	83 81       	ldd	r24, Z+3	; 0x03
    131e:	80 33       	cpi	r24, 0x30	; 48
    1320:	39 f4       	brne	.+14     	; 0x1330 <_Z17handleLinkBusMsgsv+0x10a>
					{
						g_enable_LEDs = FALSE;
    1322:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZL13g_enable_LEDs>
						digitalWrite(PIN_LED,OFF);  /*  LED Off */
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	8d e0       	ldi	r24, 0x0D	; 13
    132a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12digitalWritehh>
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <_Z17handleLinkBusMsgsv+0x110>
					}
					else
					{
						g_enable_LEDs = TRUE;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZL13g_enable_LEDs>
					}

					eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);
    1336:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZL13g_enable_LEDs>
    133a:	68 2f       	mov	r22, r24
    133c:	89 e1       	ldi	r24, 0x19	; 25
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
//					g_LEDs_Timed_Out = !g_enable_LEDs;
				}

				sprintf(g_tempStr,"LED:%s\n",g_enable_LEDs ? "ON" : "OFF");
    1344:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZL13g_enable_LEDs>
    1348:	88 23       	and	r24, r24
    134a:	19 f0       	breq	.+6      	; 0x1352 <_Z17handleLinkBusMsgsv+0x12c>
    134c:	8d e1       	ldi	r24, 0x1D	; 29
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <_Z17handleLinkBusMsgsv+0x130>
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	29 2f       	mov	r18, r25
    1358:	2f 93       	push	r18
    135a:	8f 93       	push	r24
    135c:	84 e2       	ldi	r24, 0x24	; 36
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	89 2f       	mov	r24, r25
    1362:	8f 93       	push	r24
    1364:	84 e2       	ldi	r24, 0x24	; 36
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	8f 93       	push	r24
    136a:	87 e8       	ldi	r24, 0x87	; 135
    136c:	94 e0       	ldi	r25, 0x04	; 4
    136e:	89 2f       	mov	r24, r25
    1370:	8f 93       	push	r24
    1372:	87 e8       	ldi	r24, 0x87	; 135
    1374:	94 e0       	ldi	r25, 0x04	; 4
    1376:	8f 93       	push	r24
    1378:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
				lb_send_string(g_tempStr,FALSE);
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	87 e8       	ldi	r24, 0x87	; 135
    138c:	94 e0       	ldi	r25, 0x04	; 4
    138e:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
			}
			break;
    1392:	ad c1       	rjmp	.+858    	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	fc 01       	movw	r30, r24
    139a:	83 81       	ldd	r24, Z+3	; 0x03
    139c:	88 23       	and	r24, r24
    139e:	c9 f0       	breq	.+50     	; 0x13d2 <_Z17handleLinkBusMsgsv+0x1ac>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	fc 01       	movw	r30, r24
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	86 34       	cpi	r24, 0x46	; 70
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <_Z17handleLinkBusMsgsv+0x192>
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	fc 01       	movw	r30, r24
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	80 33       	cpi	r24, 0x30	; 48
    13b6:	19 f4       	brne	.+6      	; 0x13be <_Z17handleLinkBusMsgsv+0x198>
					{
						g_enable_start_timer = FALSE;
    13b8:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZL20g_enable_start_timer>
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <_Z17handleLinkBusMsgsv+0x19e>
					}
					else
					{
						g_enable_start_timer = TRUE;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZL20g_enable_start_timer>
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
    13c4:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZL20g_enable_start_timer>
    13c8:	68 2f       	mov	r22, r24
    13ca:	8c e1       	ldi	r24, 0x1C	; 28
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    13d2:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZL20g_enable_start_timer>
    13d6:	88 23       	and	r24, r24
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <_Z17handleLinkBusMsgsv+0x1ba>
    13da:	8d e1       	ldi	r24, 0x1D	; 29
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <_Z17handleLinkBusMsgsv+0x1be>
    13e0:	80 e2       	ldi	r24, 0x20	; 32
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	29 2f       	mov	r18, r25
    13e6:	2f 93       	push	r18
    13e8:	8f 93       	push	r24
    13ea:	8c e2       	ldi	r24, 0x2C	; 44
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	89 2f       	mov	r24, r25
    13f0:	8f 93       	push	r24
    13f2:	8c e2       	ldi	r24, 0x2C	; 44
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	8f 93       	push	r24
    13f8:	87 e8       	ldi	r24, 0x87	; 135
    13fa:	94 e0       	ldi	r25, 0x04	; 4
    13fc:	89 2f       	mov	r24, r25
    13fe:	8f 93       	push	r24
    1400:	87 e8       	ldi	r24, 0x87	; 135
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	8f 93       	push	r24
    1406:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
				lb_send_string(g_tempStr,FALSE);
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	87 e8       	ldi	r24, 0x87	; 135
    141a:	94 e0       	ldi	r25, 0x04	; 4
    141c:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
			}
			break;
    1420:	66 c1       	rjmp	.+716    	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			}
			break;

			case MESSAGE_CLOCK_CAL:
			{
				if(lb_buff->fields[FIELD1][0])
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	fc 01       	movw	r30, r24
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	88 23       	and	r24, r24
    142c:	21 f1       	breq	.+72     	; 0x1476 <_Z17handleLinkBusMsgsv+0x250>
				{
					uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD1]);
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	03 96       	adiw	r24, 0x03	; 3
    1434:	0e 94 25 12 	call	0x244a	; 0x244a <atoi>
    1438:	98 87       	std	Y+8, r25	; 0x08
    143a:	8f 83       	std	Y+7, r24	; 0x07

					if(c > 100)
    143c:	8f 81       	ldd	r24, Y+7	; 0x07
    143e:	98 85       	ldd	r25, Y+8	; 0x08
    1440:	85 36       	cpi	r24, 0x65	; 101
    1442:	91 05       	cpc	r25, r1
    1444:	c0 f0       	brcs	.+48     	; 0x1476 <_Z17handleLinkBusMsgsv+0x250>
					{
						g_clock_calibration = c;
    1446:	8f 81       	ldd	r24, Y+7	; 0x07
    1448:	98 85       	ldd	r25, Y+8	; 0x08
    144a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19g_clock_calibration+0x1>
    144e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19g_clock_calibration>
						OCR1A = g_clock_calibration;
    1452:	88 e8       	ldi	r24, 0x88	; 136
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZL19g_clock_calibration>
    145a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZL19g_clock_calibration+0x1>
    145e:	fc 01       	movw	r30, r24
    1460:	31 83       	std	Z+1, r19	; 0x01
    1462:	20 83       	st	Z, r18
						eeprom_update_word(&ee_clock_calibration,g_clock_calibration);
    1464:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19g_clock_calibration>
    1468:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19g_clock_calibration+0x1>
    146c:	bc 01       	movw	r22, r24
    146e:	87 e1       	ldi	r24, 0x17	; 23
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <eeprom_update_word>
					}
				}

				sprintf(g_tempStr,"Cal=%u\n",g_clock_calibration);
    1476:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19g_clock_calibration>
    147a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19g_clock_calibration+0x1>
    147e:	29 2f       	mov	r18, r25
    1480:	2f 93       	push	r18
    1482:	8f 93       	push	r24
    1484:	84 e3       	ldi	r24, 0x34	; 52
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	89 2f       	mov	r24, r25
    148a:	8f 93       	push	r24
    148c:	84 e3       	ldi	r24, 0x34	; 52
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	8f 93       	push	r24
    1492:	87 e8       	ldi	r24, 0x87	; 135
    1494:	94 e0       	ldi	r25, 0x04	; 4
    1496:	89 2f       	mov	r24, r25
    1498:	8f 93       	push	r24
    149a:	87 e8       	ldi	r24, 0x87	; 135
    149c:	94 e0       	ldi	r25, 0x04	; 4
    149e:	8f 93       	push	r24
    14a0:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
				lb_send_string(g_tempStr,FALSE);
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	87 e8       	ldi	r24, 0x87	; 135
    14b4:	94 e0       	ldi	r25, 0x04	; 4
    14b6:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
			}
			break;
    14ba:	19 c1       	rjmp	.+562    	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	fc 01       	movw	r30, r24
    14c2:	83 81       	ldd	r24, Z+3	; 0x03
    14c4:	88 23       	and	r24, r24
    14c6:	09 f4       	brne	.+2      	; 0x14ca <_Z17handleLinkBusMsgsv+0x2a4>
    14c8:	60 c0       	rjmp	.+192    	; 0x158a <_Z17handleLinkBusMsgsv+0x364>
				{
					strcpy(g_tempStr," ");  /* Space before ID gets sent */
    14ca:	80 e2       	ldi	r24, 0x20	; 32
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZL9g_tempStr+0x1>
    14d2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZL9g_tempStr>
					strcat(g_tempStr,lb_buff->fields[FIELD1]);
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	03 96       	adiw	r24, 0x03	; 3
    14dc:	bc 01       	movw	r22, r24
    14de:	87 e8       	ldi	r24, 0x87	; 135
    14e0:	94 e0       	ldi	r25, 0x04	; 4
    14e2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <strcat>

					if(lb_buff->fields[FIELD2][0])
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	fc 01       	movw	r30, r24
    14ec:	85 85       	ldd	r24, Z+13	; 0x0d
    14ee:	88 23       	and	r24, r24
    14f0:	d1 f0       	breq	.+52     	; 0x1526 <_Z17handleLinkBusMsgsv+0x300>
					{
						strcat(g_tempStr," ");
    14f2:	87 e8       	ldi	r24, 0x87	; 135
    14f4:	94 e0       	ldi	r25, 0x04	; 4
    14f6:	9c 01       	movw	r18, r24
    14f8:	f9 01       	movw	r30, r18
    14fa:	01 90       	ld	r0, Z+
    14fc:	00 20       	and	r0, r0
    14fe:	e9 f7       	brne	.-6      	; 0x14fa <_Z17handleLinkBusMsgsv+0x2d4>
    1500:	cf 01       	movw	r24, r30
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	82 1b       	sub	r24, r18
    1506:	93 0b       	sbc	r25, r19
    1508:	89 57       	subi	r24, 0x79	; 121
    150a:	9b 4f       	sbci	r25, 0xFB	; 251
    150c:	20 e2       	ldi	r18, 0x20	; 32
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	31 83       	std	Z+1, r19	; 0x01
    1514:	20 83       	st	Z, r18
						strcat(g_tempStr,lb_buff->fields[FIELD2]);
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	0d 96       	adiw	r24, 0x0d	; 13
    151c:	bc 01       	movw	r22, r24
    151e:	87 e8       	ldi	r24, 0x87	; 135
    1520:	94 e0       	ldi	r25, 0x04	; 4
    1522:	0e 94 72 12 	call	0x24e4	; 0x24e4 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    1526:	87 e8       	ldi	r24, 0x87	; 135
    1528:	94 e0       	ldi	r25, 0x04	; 4
    152a:	0e 94 84 12 	call	0x2508	; 0x2508 <strlen>
    152e:	45 97       	sbiw	r24, 0x15	; 21
    1530:	60 f5       	brcc	.+88     	; 0x158a <_Z17handleLinkBusMsgsv+0x364>
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);
    1532:	67 e8       	ldi	r22, 0x87	; 135
    1534:	74 e0       	ldi	r23, 0x04	; 4
    1536:	85 e6       	ldi	r24, 0x65	; 101
    1538:	94 e0       	ldi	r25, 0x04	; 4
    153a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strcpy>

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    153e:	19 82       	std	Y+1, r1	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	08 2f       	mov	r16, r24
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	85 e6       	ldi	r24, 0x65	; 101
    1548:	94 e0       	ldi	r25, 0x04	; 4
    154a:	0e 94 84 12 	call	0x2508	; 0x2508 <strlen>
    154e:	08 17       	cp	r16, r24
    1550:	19 07       	cpc	r17, r25
    1552:	98 f4       	brcc	.+38     	; 0x157a <_Z17handleLinkBusMsgsv+0x354>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	8b 59       	subi	r24, 0x9B	; 155
    155c:	9b 4f       	sbci	r25, 0xFB	; 251
    155e:	fc 01       	movw	r30, r24
    1560:	20 81       	ld	r18, Z
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	62 2f       	mov	r22, r18
    156e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	e3 cf       	rjmp	.-58     	; 0x1540 <_Z17handleLinkBusMsgsv+0x31a>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
						}

						eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
				if(g_messages_text[STATION_ID][0])
				{
//					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
				}

				sprintf(g_tempStr,"ID:%s\n",g_messages_text[STATION_ID]);
    158a:	85 e6       	ldi	r24, 0x65	; 101
    158c:	94 e0       	ldi	r25, 0x04	; 4
    158e:	89 2f       	mov	r24, r25
    1590:	8f 93       	push	r24
    1592:	85 e6       	ldi	r24, 0x65	; 101
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	8f 93       	push	r24
    1598:	8c e3       	ldi	r24, 0x3C	; 60
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	89 2f       	mov	r24, r25
    159e:	8f 93       	push	r24
    15a0:	8c e3       	ldi	r24, 0x3C	; 60
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	8f 93       	push	r24
    15a6:	87 e8       	ldi	r24, 0x87	; 135
    15a8:	94 e0       	ldi	r25, 0x04	; 4
    15aa:	89 2f       	mov	r24, r25
    15ac:	8f 93       	push	r24
    15ae:	87 e8       	ldi	r24, 0x87	; 135
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	8f 93       	push	r24
    15b4:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
				lb_send_string(g_tempStr,TRUE);
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	87 e8       	ldi	r24, 0x87	; 135
    15c8:	94 e0       	ldi	r25, 0x04	; 4
    15ca:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
			}
			break;
    15ce:	8f c0       	rjmp	.+286    	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	fc 01       	movw	r30, r24
    15d6:	83 81       	ldd	r24, Z+3	; 0x03
    15d8:	89 34       	cpi	r24, 0x49	; 73
    15da:	a9 f5       	brne	.+106    	; 0x1646 <_Z17handleLinkBusMsgsv+0x420>
				{
					if(lb_buff->fields[FIELD2][0])
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	fc 01       	movw	r30, r24
    15e2:	85 85       	ldd	r24, Z+13	; 0x0d
    15e4:	88 23       	and	r24, r24
    15e6:	79 f1       	breq	.+94     	; 0x1646 <_Z17handleLinkBusMsgsv+0x420>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	0d 96       	adiw	r24, 0x0d	; 13
    15ee:	0e 94 43 12 	call	0x2486	; 0x2486 <atol>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	89 87       	std	Y+9, r24	; 0x09
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,speed,MAX_CODE_SPEED_WPM);
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	8a 87       	std	Y+10, r24	; 0x0a
    15fc:	85 e0       	ldi	r24, 0x05	; 5
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 87       	std	Y+12, r25	; 0x0c
    1602:	8b 87       	std	Y+11, r24	; 0x0b
    1604:	84 e1       	ldi	r24, 0x14	; 20
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9e 87       	std	Y+14, r25	; 0x0e
    160a:	8d 87       	std	Y+13, r24	; 0x0d
    160c:	8a 85       	ldd	r24, Y+10	; 0x0a
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	8d 85       	ldd	r24, Y+13	; 0x0d
    1614:	9e 85       	ldd	r25, Y+14	; 0x0e
    1616:	82 17       	cp	r24, r18
    1618:	93 07       	cpc	r25, r19
    161a:	54 f0       	brlt	.+20     	; 0x1630 <_Z17handleLinkBusMsgsv+0x40a>
    161c:	8a 85       	ldd	r24, Y+10	; 0x0a
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	2b 85       	ldd	r18, Y+11	; 0x0b
    1624:	3c 85       	ldd	r19, Y+12	; 0x0c
    1626:	82 17       	cp	r24, r18
    1628:	93 07       	cpc	r25, r19
    162a:	24 f4       	brge	.+8      	; 0x1634 <_Z17handleLinkBusMsgsv+0x40e>
    162c:	c9 01       	movw	r24, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <_Z17handleLinkBusMsgsv+0x40e>
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_id_codespeed>
						eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    1638:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_id_codespeed>
    163c:	68 2f       	mov	r22, r24
    163e:	86 e1       	ldi	r24, 0x16	; 22
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
						{
//							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr,"ID:  %d wpm\n",g_id_codespeed);
    1646:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_id_codespeed>
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	29 2f       	mov	r18, r25
    1650:	2f 93       	push	r18
    1652:	8f 93       	push	r24
    1654:	83 e4       	ldi	r24, 0x43	; 67
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	89 2f       	mov	r24, r25
    165a:	8f 93       	push	r24
    165c:	83 e4       	ldi	r24, 0x43	; 67
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	8f 93       	push	r24
    1662:	87 e8       	ldi	r24, 0x87	; 135
    1664:	94 e0       	ldi	r25, 0x04	; 4
    1666:	89 2f       	mov	r24, r25
    1668:	8f 93       	push	r24
    166a:	87 e8       	ldi	r24, 0x87	; 135
    166c:	94 e0       	ldi	r25, 0x04	; 4
    166e:	8f 93       	push	r24
    1670:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
				lb_send_string(g_tempStr,FALSE);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	87 e8       	ldi	r24, 0x87	; 135
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
			}
			break;
    168a:	31 c0       	rjmp	.+98     	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>

			case MESSAGE_VERSION:
			{
				sprintf(g_tempStr,"SW Ver:%s\n",SW_REVISION);
    168c:	8e e0       	ldi	r24, 0x0E	; 14
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	89 2f       	mov	r24, r25
    1692:	8f 93       	push	r24
    1694:	8e e0       	ldi	r24, 0x0E	; 14
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	8f 93       	push	r24
    169a:	80 e5       	ldi	r24, 0x50	; 80
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	89 2f       	mov	r24, r25
    16a0:	8f 93       	push	r24
    16a2:	80 e5       	ldi	r24, 0x50	; 80
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	8f 93       	push	r24
    16a8:	87 e8       	ldi	r24, 0x87	; 135
    16aa:	94 e0       	ldi	r25, 0x04	; 4
    16ac:	89 2f       	mov	r24, r25
    16ae:	8f 93       	push	r24
    16b0:	87 e8       	ldi	r24, 0x87	; 135
    16b2:	94 e0       	ldi	r25, 0x04	; 4
    16b4:	8f 93       	push	r24
    16b6:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
				lb_send_string(g_tempStr,FALSE);
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	87 e8       	ldi	r24, 0x87	; 135
    16ca:	94 e0       	ldi	r25, 0x04	; 4
    16cc:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
			}
			break;
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			}
			break;

			default:
			{
				lb_send_Help();
    16d2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_Z12lb_send_Helpv>
			}
			break;
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			break;

			case MESSAGE_GO:
			{
			}
			break;
    16d8:	00 00       	nop
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			break;

			case MESSAGE_OVERRIDE_DIP:
			{
			}
			break;
    16dc:	00 00       	nop
    16de:	07 c0       	rjmp	.+14     	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			case MESSAGE_FACTORY_RESET:
			{
//				initializeEEPROMVars(TRUE);
//				softwareReset();
			}
			break;
    16e0:	00 00       	nop
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
		switch(msg_id)
		{
			case MESSAGE_RESET:
			{
			}
			break;
    16e4:	00 00       	nop
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			break;

			case MESSAGE_TEMP:
			{
			}
			break;
    16e8:	00 00       	nop
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <_Z17handleLinkBusMsgsv+0x4c8>
			break;

			case MESSAGE_TRANSMITTER_ENABLE:
			{
			}
			break;
    16ec:	00 00       	nop
				lb_send_Help();
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	fc 01       	movw	r30, r24
    16f4:	12 82       	std	Z+2, r1	; 0x02
    16f6:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 23       	and	r24, r24
    16fc:	09 f4       	brne	.+2      	; 0x1700 <_Z17handleLinkBusMsgsv+0x4da>
    16fe:	a1 cd       	rjmp	.-1214   	; 0x1242 <_Z17handleLinkBusMsgsv+0x1c>
		{
			lb_send_NewPrompt();
    1700:	0e 94 bb 04 	call	0x976	; 0x976 <_Z17lb_send_NewPromptv>
void __attribute__((optimize("O0"))) handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    1704:	9e cd       	rjmp	.-1220   	; 0x1242 <_Z17handleLinkBusMsgsv+0x1c>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    1706:	00 00       	nop
    1708:	2e 96       	adiw	r28, 0x0e	; 14
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <_Z10processKeyc>:
	static int digits;
	static int value;
	static int callsignLength;
	static char callsign[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };

	switch(state)
    171e:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <_ZZ10processKeycE5state>
    1722:	30 91 d6 04 	lds	r19, 0x04D6	; 0x8004d6 <_ZZ10processKeycE5state+0x1>
    1726:	21 30       	cpi	r18, 0x01	; 1
    1728:	31 05       	cpc	r19, r1
    172a:	e1 f0       	breq	.+56     	; 0x1764 <_Z10processKeyc+0x46>
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	19 f1       	breq	.+70     	; 0x1778 <_Z10processKeyc+0x5a>
    1732:	23 2b       	or	r18, r19
    1734:	09 f0       	breq	.+2      	; 0x1738 <_Z10processKeyc+0x1a>
    1736:	7f c0       	rjmp	.+254    	; 0x1836 <_Z10processKeyc+0x118>
	{
		case STATE_IDLE:
		{
			callsignLength = 0;
    1738:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <_ZZ10processKeycE14callsignLength+0x1>
    173c:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZZ10processKeycE14callsignLength>
			value = 0;
    1740:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <_ZZ10processKeycE5value+0x1>
    1744:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ10processKeycE5value>
			digits = 0;
    1748:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <_ZZ10processKeycE6digits+0x1>
    174c:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <_ZZ10processKeycE6digits>

			if(key == 'C')
    1750:	83 34       	cpi	r24, 0x43	; 67
    1752:	09 f0       	breq	.+2      	; 0x1756 <_Z10processKeyc+0x38>
    1754:	70 c0       	rjmp	.+224    	; 0x1836 <_Z10processKeyc+0x118>
			{
				state = STATE_C;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <_ZZ10processKeycE5state+0x1>
    175e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZZ10processKeycE5state>
    1762:	08 95       	ret
		}
		break;

		case STATE_C:
		{
			if(key == '1')
    1764:	81 33       	cpi	r24, 0x31	; 49
    1766:	09 f0       	breq	.+2      	; 0x176a <_Z10processKeyc+0x4c>
    1768:	66 c0       	rjmp	.+204    	; 0x1836 <_Z10processKeyc+0x118>
			{
				state = STATE_RECEIVING_CALLSIGN;
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <_ZZ10processKeycE5state+0x1>
    1772:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZZ10processKeycE5state>
    1776:	08 95       	ret
		}
		break;

		case STATE_RECEIVING_CALLSIGN:
		{
			if(key == '#')
    1778:	83 32       	cpi	r24, 0x23	; 35
    177a:	71 f4       	brne	.+28     	; 0x1798 <_Z10processKeyc+0x7a>
			{
				permCallsign(callsign);
    177c:	8d ed       	ldi	r24, 0xDD	; 221
    177e:	94 e0       	ldi	r25, 0x04	; 4
    1780:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_Z12permCallsignPc>
				lb_send_string(callsign, FALSE);
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	8d ed       	ldi	r24, 0xDD	; 221
    1788:	94 e0       	ldi	r25, 0x04	; 4
    178a:	0e 94 cf 04 	call	0x99e	; 0x99e <_Z14lb_send_stringPch>
				state = STATE_IDLE;
    178e:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZZ10processKeycE5state+0x1>
    1792:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZZ10processKeycE5state>
    1796:	08 95       	ret
			}
			else if((key >= '0') && (key <= '9'))
    1798:	90 ed       	ldi	r25, 0xD0	; 208
    179a:	98 0f       	add	r25, r24
    179c:	9a 30       	cpi	r25, 0x0A	; 10
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <_Z10processKeyc+0x84>
    17a0:	4a c0       	rjmp	.+148    	; 0x1836 <_Z10processKeyc+0x118>
			{
				if(digits)
    17a2:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <_ZZ10processKeycE6digits>
    17a6:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <_ZZ10processKeycE6digits+0x1>
    17aa:	23 2b       	or	r18, r19
    17ac:	c1 f1       	breq	.+112    	; 0x181e <_Z10processKeyc+0x100>
				{
					value = value * 10 + (key - '0');
    17ae:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <_ZZ10processKeycE5value>
    17b2:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <_ZZ10processKeycE5value+0x1>
    17b6:	a9 01       	movw	r20, r18
    17b8:	44 0f       	add	r20, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	24 0f       	add	r18, r20
    17ca:	35 1f       	adc	r19, r21
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	c0 97       	sbiw	r24, 0x30	; 48
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <_ZZ10processKeycE5value+0x1>
    17d8:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_ZZ10processKeycE5value>
					if((value < 39) && (callsignLength < MAX_PATTERN_TEXT_LENGTH))
    17dc:	87 32       	cpi	r24, 0x27	; 39
    17de:	91 05       	cpc	r25, r1
    17e0:	cc f4       	brge	.+50     	; 0x1814 <_Z10processKeyc+0xf6>
    17e2:	20 91 d7 04 	lds	r18, 0x04D7	; 0x8004d7 <_ZZ10processKeycE14callsignLength>
    17e6:	30 91 d8 04 	lds	r19, 0x04D8	; 0x8004d8 <_ZZ10processKeycE14callsignLength+0x1>
    17ea:	24 31       	cpi	r18, 0x14	; 20
    17ec:	31 05       	cpc	r19, r1
    17ee:	94 f4       	brge	.+36     	; 0x1814 <_Z10processKeyc+0xf6>
					{
						callsign[callsignLength] = keyMorse[value];
    17f0:	f9 01       	movw	r30, r18
    17f2:	e3 52       	subi	r30, 0x23	; 35
    17f4:	fb 4f       	sbci	r31, 0xFB	; 251
    17f6:	dc 01       	movw	r26, r24
    17f8:	af 50       	subi	r26, 0x0F	; 15
    17fa:	bd 4f       	sbci	r27, 0xFD	; 253
    17fc:	8c 91       	ld	r24, X
    17fe:	80 83       	st	Z, r24
						callsignLength++;
    1800:	2f 5f       	subi	r18, 0xFF	; 255
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	30 93 d8 04 	sts	0x04D8, r19	; 0x8004d8 <_ZZ10processKeycE14callsignLength+0x1>
    1808:	20 93 d7 04 	sts	0x04D7, r18	; 0x8004d7 <_ZZ10processKeycE14callsignLength>
						callsign[callsignLength] = '\0';
    180c:	f9 01       	movw	r30, r18
    180e:	e3 52       	subi	r30, 0x23	; 35
    1810:	fb 4f       	sbci	r31, 0xFB	; 251
    1812:	10 82       	st	Z, r1
					}

					digits = 0;
    1814:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <_ZZ10processKeycE6digits+0x1>
    1818:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <_ZZ10processKeycE6digits>
    181c:	08 95       	ret
				}
				else
				{
					value = key - '0';
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	c0 97       	sbiw	r24, 0x30	; 48
    1822:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <_ZZ10processKeycE5value+0x1>
    1826:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_ZZ10processKeycE5value>
					digits = 1;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <_ZZ10processKeycE6digits+0x1>
    1832:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <_ZZ10processKeycE6digits>
    1836:	08 95       	ret

00001838 <_Z20initializeEEPROMVarsh>:

/*
 * Set non-volatile variables to their values stored in EEPROM
 */
void initializeEEPROMVars(BOOL resetAll)
{
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	c8 2f       	mov	r28, r24
	uint8_t i;

	uint8_t initialization_flag = eeprom_read_byte(&ee_interface_eeprom_initialization_flag);
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>

	if(!resetAll && (initialization_flag == EEPROM_INITIALIZED_FLAG))   /* EEPROM is up to date */
    184e:	c1 11       	cpse	r28, r1
    1850:	2b c1       	rjmp	.+598    	; 0x1aa8 <_Z20initializeEEPROMVarsh+0x270>
    1852:	88 3b       	cpi	r24, 0xB8	; 184
    1854:	09 f0       	breq	.+2      	; 0x1858 <_Z20initializeEEPROMVarsh+0x20>
    1856:	4a c0       	rjmp	.+148    	; 0x18ec <_Z20initializeEEPROMVarsh+0xb4>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&ee_id_codespeed), MAX_CODE_SPEED_WPM);
    1858:	86 e1       	ldi	r24, 0x16	; 22
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	85 30       	cpi	r24, 0x05	; 5
    1864:	91 05       	cpc	r25, r1
    1866:	14 f4       	brge	.+4      	; 0x186c <_Z20initializeEEPROMVarsh+0x34>
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	85 31       	cpi	r24, 0x15	; 21
    186e:	91 05       	cpc	r25, r1
    1870:	14 f0       	brlt	.+4      	; 0x1876 <_Z20initializeEEPROMVarsh+0x3e>
    1872:	84 e1       	ldi	r24, 0x14	; 20
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_id_codespeed>
		g_clock_calibration = eeprom_read_word(&ee_clock_calibration);
    187a:	87 e1       	ldi	r24, 0x17	; 23
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <eeprom_read_word>
    1882:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19g_clock_calibration+0x1>
    1886:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19g_clock_calibration>
		g_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration);
    188a:	8a e1       	ldi	r24, 0x1A	; 26
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <eeprom_read_word>
    1892:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL18g_temp_calibration+0x1>
    1896:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL18g_temp_calibration>
		g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    189a:	89 e1       	ldi	r24, 0x19	; 25
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    18a2:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZL13g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    18a6:	8c e1       	ldi	r24, 0x1C	; 28
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    18ae:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZL20g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    18b2:	8d e1       	ldi	r24, 0x1D	; 29
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    18ba:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZL20g_enable_transmitter>
    18be:	01 e0       	ldi	r16, 0x01	; 1
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	c5 e6       	ldi	r28, 0x65	; 101
    18c4:	d4 e0       	ldi	r29, 0x04	; 4
    18c6:	0f 2e       	mov	r0, r31
    18c8:	f9 e7       	ldi	r31, 0x79	; 121
    18ca:	ef 2e       	mov	r14, r31
    18cc:	f4 e0       	ldi	r31, 0x04	; 4
    18ce:	ff 2e       	mov	r15, r31
    18d0:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    18d8:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
    18da:	88 23       	and	r24, r24
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <_Z20initializeEEPROMVarsh+0xa8>
    18de:	2d c1       	rjmp	.+602    	; 0x1b3a <_Z20initializeEEPROMVarsh+0x302>
    18e0:	0f 5f       	subi	r16, 0xFF	; 255
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
		g_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration);
		g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    18e4:	ce 15       	cp	r28, r14
    18e6:	df 05       	cpc	r29, r15
    18e8:	a1 f7       	brne	.-24     	; 0x18d2 <_Z20initializeEEPROMVarsh+0x9a>
    18ea:	27 c1       	rjmp	.+590    	; 0x1b3a <_Z20initializeEEPROMVarsh+0x302>
			}
		}
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
    18ec:	86 e1       	ldi	r24, 0x16	; 22
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    18f4:	8f 3f       	cpi	r24, 0xFF	; 255
    18f6:	09 f4       	brne	.+2      	; 0x18fa <_Z20initializeEEPROMVarsh+0xc2>
    18f8:	cd c0       	rjmp	.+410    	; 0x1a94 <_Z20initializeEEPROMVarsh+0x25c>
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
			eeprom_update_byte(&ee_id_codespeed, g_id_codespeed);
		}
		else
		{
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&ee_id_codespeed), MAX_CODE_SPEED_WPM);
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	85 30       	cpi	r24, 0x05	; 5
    18fe:	91 05       	cpc	r25, r1
    1900:	14 f4       	brge	.+4      	; 0x1906 <_Z20initializeEEPROMVarsh+0xce>
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	85 31       	cpi	r24, 0x15	; 21
    1908:	91 05       	cpc	r25, r1
    190a:	14 f0       	brlt	.+4      	; 0x1910 <_Z20initializeEEPROMVarsh+0xd8>
    190c:	84 e1       	ldi	r24, 0x14	; 20
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_id_codespeed>
		}

		if(resetAll || (eeprom_read_word(&ee_clock_calibration) == 0xFFFF))
    1914:	87 e1       	ldi	r24, 0x17	; 23
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <eeprom_read_word>
    191c:	8f 3f       	cpi	r24, 0xFF	; 255
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	92 07       	cpc	r25, r18
    1922:	89 f4       	brne	.+34     	; 0x1946 <_Z20initializeEEPROMVarsh+0x10e>
		{
			g_clock_calibration = EEPROM_CLOCK_CALIBRATION_DEFAULT;
    1924:	8d e0       	ldi	r24, 0x0D	; 13
    1926:	9d e3       	ldi	r25, 0x3D	; 61
    1928:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19g_clock_calibration+0x1>
    192c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19g_clock_calibration>
			eeprom_update_word(&ee_clock_calibration, g_clock_calibration); /* Calibration only gets set by a serial command */
    1930:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZL19g_clock_calibration>
    1934:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZL19g_clock_calibration+0x1>
    1938:	87 e1       	ldi	r24, 0x17	; 23
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <eeprom_update_word>
		else
		{
			g_clock_calibration = eeprom_read_word(&ee_clock_calibration);
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration) == 0xFFFF))
    1940:	c1 11       	cpse	r28, r1
    1942:	bc c0       	rjmp	.+376    	; 0x1abc <_Z20initializeEEPROMVarsh+0x284>
    1944:	04 c0       	rjmp	.+8      	; 0x194e <_Z20initializeEEPROMVarsh+0x116>
			g_clock_calibration = EEPROM_CLOCK_CALIBRATION_DEFAULT;
			eeprom_update_word(&ee_clock_calibration, g_clock_calibration); /* Calibration only gets set by a serial command */
		}
		else
		{
			g_clock_calibration = eeprom_read_word(&ee_clock_calibration);
    1946:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19g_clock_calibration+0x1>
    194a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19g_clock_calibration>
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration) == 0xFFFF))
    194e:	8a e1       	ldi	r24, 0x1A	; 26
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <eeprom_read_word>
    1956:	8f 3f       	cpi	r24, 0xFF	; 255
    1958:	ef ef       	ldi	r30, 0xFF	; 255
    195a:	9e 07       	cpc	r25, r30
    195c:	89 f4       	brne	.+34     	; 0x1980 <_Z20initializeEEPROMVarsh+0x148>
		{
			g_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
    195e:	83 e9       	ldi	r24, 0x93	; 147
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL18g_temp_calibration+0x1>
    1966:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL18g_temp_calibration>
			eeprom_update_word((uint16_t*)&ee_temp_calibration, (uint16_t)g_temp_calibration);
    196a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <_ZL18g_temp_calibration>
    196e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <_ZL18g_temp_calibration+0x1>
    1972:	8a e1       	ldi	r24, 0x1A	; 26
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <eeprom_update_word>
		else
		{
			g_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
    197a:	cc 23       	and	r28, r28
    197c:	29 f0       	breq	.+10     	; 0x1988 <_Z20initializeEEPROMVarsh+0x150>
    197e:	ad c0       	rjmp	.+346    	; 0x1ada <_Z20initializeEEPROMVarsh+0x2a2>
			g_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
			eeprom_update_word((uint16_t*)&ee_temp_calibration, (uint16_t)g_temp_calibration);
		}
		else
		{
			g_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration);
    1980:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL18g_temp_calibration+0x1>
    1984:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL18g_temp_calibration>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
    1988:	89 e1       	ldi	r24, 0x19	; 25
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    1990:	8f 3f       	cpi	r24, 0xFF	; 255
    1992:	61 f4       	brne	.+24     	; 0x19ac <_Z20initializeEEPROMVarsh+0x174>
		{
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZL13g_enable_LEDs>
			eeprom_update_byte(&ee_enable_LEDs, g_enable_LEDs); /* Only gets set by a serial command */
    199a:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <_ZL13g_enable_LEDs>
    199e:	89 e1       	ldi	r24, 0x19	; 25
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
		else
		{
			g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_start_timer) == 0xFF))
    19a6:	c1 11       	cpse	r28, r1
    19a8:	a2 c0       	rjmp	.+324    	; 0x1aee <_Z20initializeEEPROMVarsh+0x2b6>
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <_Z20initializeEEPROMVarsh+0x178>
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
			eeprom_update_byte(&ee_enable_LEDs, g_enable_LEDs); /* Only gets set by a serial command */
		}
		else
		{
			g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    19ac:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZL13g_enable_LEDs>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_start_timer) == 0xFF))
    19b0:	8c e1       	ldi	r24, 0x1C	; 28
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    19b8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ba:	69 f4       	brne	.+26     	; 0x19d6 <_Z20initializeEEPROMVarsh+0x19e>
		{
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZL20g_enable_start_timer>
			eeprom_update_byte(&ee_enable_start_timer, g_enable_start_timer);   /* Only gets set by a serial command */
    19c2:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <_ZL20g_enable_start_timer>
    19c6:	8c e1       	ldi	r24, 0x1C	; 28
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    19ce:	cc 23       	and	r28, r28
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <_Z20initializeEEPROMVarsh+0x19c>
    19d2:	a1 c0       	rjmp	.+322    	; 0x1b16 <_Z20initializeEEPROMVarsh+0x2de>
    19d4:	a8 c0       	rjmp	.+336    	; 0x1b26 <_Z20initializeEEPROMVarsh+0x2ee>
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
			eeprom_update_byte(&ee_enable_start_timer, g_enable_start_timer);   /* Only gets set by a serial command */
		}
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    19d6:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZL20g_enable_start_timer>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    19da:	8d e1       	ldi	r24, 0x1D	; 29
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    19e2:	8f 3f       	cpi	r24, 0xFF	; 255
    19e4:	61 f4       	brne	.+24     	; 0x19fe <_Z20initializeEEPROMVarsh+0x1c6>
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter, g_enable_transmitter);   /* Only gets set by a serial command */
    19ec:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <_ZL20g_enable_transmitter>
    19f0:	8d e1       	ldi	r24, 0x1D	; 29
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
		else
		{
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		}

		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
    19f8:	c1 11       	cpse	r28, r1
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <_Z20initializeEEPROMVarsh+0x1d6>
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <_Z20initializeEEPROMVarsh+0x1ca>
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
			eeprom_update_byte(&ee_enable_transmitter, g_enable_transmitter);   /* Only gets set by a serial command */
		}
		else
		{
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    19fe:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZL20g_enable_transmitter>
		}

		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    1a0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a0c:	41 f5       	brne	.+80     	; 0x1a5e <_Z20initializeEEPROMVarsh+0x226>
		{
			uint16_t i;
			strncpy(g_messages_text[STATION_ID], EEPROM_STATION_ID_DEFAULT, MAX_PATTERN_TEXT_LENGTH);
    1a0e:	44 e1       	ldi	r20, 0x14	; 20
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	6b e5       	ldi	r22, 0x5B	; 91
    1a14:	71 e0       	ldi	r23, 0x01	; 1
    1a16:	85 e6       	ldi	r24, 0x65	; 101
    1a18:	94 e0       	ldi	r25, 0x04	; 4
    1a1a:	0e 94 8d 12 	call	0x251a	; 0x251a <strncpy>
    1a1e:	05 e6       	ldi	r16, 0x65	; 101
    1a20:	14 e0       	ldi	r17, 0x04	; 4

			for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)    /* Only gets set by a serial command */
    1a22:	c0 e0       	ldi	r28, 0x00	; 0
    1a24:	d0 e0       	ldi	r29, 0x00	; 0
    1a26:	78 01       	movw	r14, r16
    1a28:	f7 01       	movw	r30, r14
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	00 20       	and	r0, r0
    1a2e:	e9 f7       	brne	.-6      	; 0x1a2a <_Z20initializeEEPROMVarsh+0x1f2>
    1a30:	cf 01       	movw	r24, r30
    1a32:	86 56       	subi	r24, 0x66	; 102
    1a34:	94 40       	sbci	r25, 0x04	; 4
    1a36:	c8 17       	cp	r28, r24
    1a38:	d9 07       	cpc	r29, r25
    1a3a:	50 f4       	brcc	.+20     	; 0x1a50 <_Z20initializeEEPROMVarsh+0x218>
			{
				eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	61 91       	ld	r22, Z+
    1a40:	8f 01       	movw	r16, r30
    1a42:	ce 01       	movw	r24, r28
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
		{
			uint16_t i;
			strncpy(g_messages_text[STATION_ID], EEPROM_STATION_ID_DEFAULT, MAX_PATTERN_TEXT_LENGTH);

			for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)    /* Only gets set by a serial command */
    1a4c:	21 96       	adiw	r28, 0x01	; 1
    1a4e:	ec cf       	rjmp	.-40     	; 0x1a28 <_Z20initializeEEPROMVarsh+0x1f0>
			{
				eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
			}
			eeprom_update_byte((uint8_t*)&ee_stationID_text[i], 0);
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	ce 01       	movw	r24, r28
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1a5c:	15 c0       	rjmp	.+42     	; 0x1a88 <_Z20initializeEEPROMVarsh+0x250>
    1a5e:	01 e0       	ldi	r16, 0x01	; 1
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	c5 e6       	ldi	r28, 0x65	; 101
    1a64:	d4 e0       	ldi	r29, 0x04	; 4
    1a66:	0f 2e       	mov	r0, r31
    1a68:	f9 e7       	ldi	r31, 0x79	; 121
    1a6a:	ef 2e       	mov	r14, r31
    1a6c:	f4 e0       	ldi	r31, 0x04	; 4
    1a6e:	ff 2e       	mov	r15, r31
    1a70:	f0 2d       	mov	r31, r0
		}
		else
		{
			for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
			{
				g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    1a72:	c8 01       	movw	r24, r16
    1a74:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    1a78:	89 93       	st	Y+, r24
				if(!g_messages_text[STATION_ID][i])
    1a7a:	88 23       	and	r24, r24
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <_Z20initializeEEPROMVarsh+0x250>
    1a7e:	0f 5f       	subi	r16, 0xFF	; 255
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			eeprom_update_byte((uint8_t*)&ee_stationID_text[i], 0);
		}
		else
		{
			for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    1a82:	ce 15       	cp	r28, r14
    1a84:	df 05       	cpc	r29, r15
    1a86:	a9 f7       	brne	.-22     	; 0x1a72 <_Z20initializeEEPROMVarsh+0x23a>
					break;
				}
			}
		}

		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    1a88:	68 eb       	ldi	r22, 0xB8	; 184
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 92 15 	call	0x2b24	; 0x2b24 <eeprom_write_byte>
	}

	return;
    1a92:	53 c0       	rjmp	.+166    	; 0x1b3a <_Z20initializeEEPROMVarsh+0x302>
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    1a94:	84 e1       	ldi	r24, 0x14	; 20
    1a96:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_id_codespeed>
			eeprom_update_byte(&ee_id_codespeed, g_id_codespeed);
    1a9a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <_ZL14g_id_codespeed>
    1a9e:	86 e1       	ldi	r24, 0x16	; 22
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1aa6:	36 cf       	rjmp	.-404    	; 0x1914 <_Z20initializeEEPROMVarsh+0xdc>
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    1aa8:	84 e1       	ldi	r24, 0x14	; 20
    1aaa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_id_codespeed>
			eeprom_update_byte(&ee_id_codespeed, g_id_codespeed);
    1aae:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <_ZL14g_id_codespeed>
    1ab2:	86 e1       	ldi	r24, 0x16	; 22
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1aba:	34 cf       	rjmp	.-408    	; 0x1924 <_Z20initializeEEPROMVarsh+0xec>
			g_clock_calibration = eeprom_read_word(&ee_clock_calibration);
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration) == 0xFFFF))
		{
			g_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
    1abc:	83 e9       	ldi	r24, 0x93	; 147
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL18g_temp_calibration+0x1>
    1ac4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL18g_temp_calibration>
			eeprom_update_word((uint16_t*)&ee_temp_calibration, (uint16_t)g_temp_calibration);
    1ac8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <_ZL18g_temp_calibration>
    1acc:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <_ZL18g_temp_calibration+0x1>
    1ad0:	8a e1       	ldi	r24, 0x1A	; 26
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <eeprom_update_word>
    1ad8:	5d cf       	rjmp	.-326    	; 0x1994 <_Z20initializeEEPROMVarsh+0x15c>
			g_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_temp_calibration);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
		{
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZL13g_enable_LEDs>
			eeprom_update_byte(&ee_enable_LEDs, g_enable_LEDs); /* Only gets set by a serial command */
    1ae0:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <_ZL13g_enable_LEDs>
    1ae4:	89 e1       	ldi	r24, 0x19	; 25
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1aec:	67 cf       	rjmp	.-306    	; 0x19bc <_Z20initializeEEPROMVarsh+0x184>
			g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_start_timer) == 0xFF))
		{
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZL20g_enable_start_timer>
			eeprom_update_byte(&ee_enable_start_timer, g_enable_start_timer);   /* Only gets set by a serial command */
    1af4:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <_ZL20g_enable_start_timer>
    1af8:	8c e1       	ldi	r24, 0x1C	; 28
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1b00:	72 cf       	rjmp	.-284    	; 0x19e6 <_Z20initializeEEPROMVarsh+0x1ae>
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter, g_enable_transmitter);   /* Only gets set by a serial command */
    1b08:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <_ZL20g_enable_transmitter>
    1b0c:	8d e1       	ldi	r24, 0x1D	; 29
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1b14:	76 cf       	rjmp	.-276    	; 0x1a02 <_Z20initializeEEPROMVarsh+0x1ca>
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    1b16:	8d e1       	ldi	r24, 0x1D	; 29
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <eeprom_read_byte>
    1b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <_Z20initializeEEPROMVarsh+0x2ec>
    1b22:	6d cf       	rjmp	.-294    	; 0x19fe <_Z20initializeEEPROMVarsh+0x1c6>
    1b24:	ee cf       	rjmp	.-36     	; 0x1b02 <_Z20initializeEEPROMVarsh+0x2ca>
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter, g_enable_transmitter);   /* Only gets set by a serial command */
    1b2c:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <_ZL20g_enable_transmitter>
    1b30:	8d e1       	ldi	r24, 0x1D	; 29
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
    1b38:	6a cf       	rjmp	.-300    	; 0x1a0e <_Z20initializeEEPROMVarsh+0x1d6>

		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
	}

	return;
}
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	08 95       	ret

00001b48 <_Z12permCallsignPc>:

void permCallsign(char* call)
{
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
	uint8_t i;

	strncpy(g_messages_text[STATION_ID], call, MAX_PATTERN_TEXT_LENGTH);
    1b4e:	44 e1       	ldi	r20, 0x14	; 20
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	bc 01       	movw	r22, r24
    1b54:	85 e6       	ldi	r24, 0x65	; 101
    1b56:	94 e0       	ldi	r25, 0x04	; 4
    1b58:	0e 94 8d 12 	call	0x251a	; 0x251a <strncpy>

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    1b5c:	c0 e0       	ldi	r28, 0x00	; 0
    1b5e:	05 e6       	ldi	r16, 0x65	; 101
    1b60:	14 e0       	ldi	r17, 0x04	; 4
    1b62:	f8 01       	movw	r30, r16
    1b64:	01 90       	ld	r0, Z+
    1b66:	00 20       	and	r0, r0
    1b68:	e9 f7       	brne	.-6      	; 0x1b64 <_Z12permCallsignPc+0x1c>
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	86 56       	subi	r24, 0x66	; 102
    1b6e:	94 40       	sbci	r25, 0x04	; 4
    1b70:	2c 2f       	mov	r18, r28
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	28 17       	cp	r18, r24
    1b76:	39 07       	cpc	r19, r25
    1b78:	58 f4       	brcc	.+22     	; 0x1b90 <_Z12permCallsignPc+0x48>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e0 5b       	subi	r30, 0xB0	; 176
    1b80:	fb 4f       	sbci	r31, 0xFB	; 251
    1b82:	65 89       	ldd	r22, Z+21	; 0x15
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
{
	uint8_t i;

	strncpy(g_messages_text[STATION_ID], call, MAX_PATTERN_TEXT_LENGTH);

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    1b8c:	cf 5f       	subi	r28, 0xFF	; 255
    1b8e:	e9 cf       	rjmp	.-46     	; 0x1b62 <_Z12permCallsignPc+0x1a>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i], 0);
    1b90:	8c 2f       	mov	r24, r28
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <eeprom_update_byte>
}
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	08 95       	ret

00001ba6 <_GLOBAL__sub_I_g_lastKey>:
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
							'V', 'W', 'X', 'Y', 'Z', '<', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

Goertzel g_goertzel(N, sampling_freq);
    1baa:	00 e0       	ldi	r16, 0x00	; 0
    1bac:	18 e7       	ldi	r17, 0x78	; 120
    1bae:	26 e9       	ldi	r18, 0x96	; 150
    1bb0:	36 e4       	ldi	r19, 0x46	; 70
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	68 e4       	ldi	r22, 0x48	; 72
    1bb8:	73 e4       	ldi	r23, 0x43	; 67
    1bba:	86 e8       	ldi	r24, 0x86	; 134
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN8GoertzelC1Eff>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i], 0);
}
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <_GLOBAL__sub_D_g_lastKey>:
							'V', 'W', 'X', 'Y', 'Z', '<', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

Goertzel g_goertzel(N, sampling_freq);
    1bc8:	86 e8       	ldi	r24, 0x86	; 134
    1bca:	94 e0       	ldi	r25, 0x04	; 4
    1bcc:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN8GoertzelD1Ev>
    1bd0:	08 95       	ret

00001bd2 <__subsf3>:
    1bd2:	50 58       	subi	r21, 0x80	; 128

00001bd4 <__addsf3>:
    1bd4:	bb 27       	eor	r27, r27
    1bd6:	aa 27       	eor	r26, r26
    1bd8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__addsf3x>
    1bdc:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_round>
    1be0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fp_pscA>
    1be4:	38 f0       	brcs	.+14     	; 0x1bf4 <__addsf3+0x20>
    1be6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fp_pscB>
    1bea:	20 f0       	brcs	.+8      	; 0x1bf4 <__addsf3+0x20>
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <__addsf3+0x28>
    1bee:	9f 3f       	cpi	r25, 0xFF	; 255
    1bf0:	19 f4       	brne	.+6      	; 0x1bf8 <__addsf3+0x24>
    1bf2:	26 f4       	brtc	.+8      	; 0x1bfc <__addsf3+0x28>
    1bf4:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_nan>
    1bf8:	0e f4       	brtc	.+2      	; 0x1bfc <__addsf3+0x28>
    1bfa:	e0 95       	com	r30
    1bfc:	e7 fb       	bst	r30, 7
    1bfe:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_inf>

00001c02 <__addsf3x>:
    1c02:	e9 2f       	mov	r30, r25
    1c04:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fp_split3>
    1c08:	58 f3       	brcs	.-42     	; 0x1be0 <__addsf3+0xc>
    1c0a:	ba 17       	cp	r27, r26
    1c0c:	62 07       	cpc	r22, r18
    1c0e:	73 07       	cpc	r23, r19
    1c10:	84 07       	cpc	r24, r20
    1c12:	95 07       	cpc	r25, r21
    1c14:	20 f0       	brcs	.+8      	; 0x1c1e <__addsf3x+0x1c>
    1c16:	79 f4       	brne	.+30     	; 0x1c36 <__addsf3x+0x34>
    1c18:	a6 f5       	brtc	.+104    	; 0x1c82 <__addsf3x+0x80>
    1c1a:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_zero>
    1c1e:	0e f4       	brtc	.+2      	; 0x1c22 <__addsf3x+0x20>
    1c20:	e0 95       	com	r30
    1c22:	0b 2e       	mov	r0, r27
    1c24:	ba 2f       	mov	r27, r26
    1c26:	a0 2d       	mov	r26, r0
    1c28:	0b 01       	movw	r0, r22
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	90 01       	movw	r18, r0
    1c2e:	0c 01       	movw	r0, r24
    1c30:	ca 01       	movw	r24, r20
    1c32:	a0 01       	movw	r20, r0
    1c34:	11 24       	eor	r1, r1
    1c36:	ff 27       	eor	r31, r31
    1c38:	59 1b       	sub	r21, r25
    1c3a:	99 f0       	breq	.+38     	; 0x1c62 <__addsf3x+0x60>
    1c3c:	59 3f       	cpi	r21, 0xF9	; 249
    1c3e:	50 f4       	brcc	.+20     	; 0x1c54 <__addsf3x+0x52>
    1c40:	50 3e       	cpi	r21, 0xE0	; 224
    1c42:	68 f1       	brcs	.+90     	; 0x1c9e <__addsf3x+0x9c>
    1c44:	1a 16       	cp	r1, r26
    1c46:	f0 40       	sbci	r31, 0x00	; 0
    1c48:	a2 2f       	mov	r26, r18
    1c4a:	23 2f       	mov	r18, r19
    1c4c:	34 2f       	mov	r19, r20
    1c4e:	44 27       	eor	r20, r20
    1c50:	58 5f       	subi	r21, 0xF8	; 248
    1c52:	f3 cf       	rjmp	.-26     	; 0x1c3a <__addsf3x+0x38>
    1c54:	46 95       	lsr	r20
    1c56:	37 95       	ror	r19
    1c58:	27 95       	ror	r18
    1c5a:	a7 95       	ror	r26
    1c5c:	f0 40       	sbci	r31, 0x00	; 0
    1c5e:	53 95       	inc	r21
    1c60:	c9 f7       	brne	.-14     	; 0x1c54 <__addsf3x+0x52>
    1c62:	7e f4       	brtc	.+30     	; 0x1c82 <__addsf3x+0x80>
    1c64:	1f 16       	cp	r1, r31
    1c66:	ba 0b       	sbc	r27, r26
    1c68:	62 0b       	sbc	r22, r18
    1c6a:	73 0b       	sbc	r23, r19
    1c6c:	84 0b       	sbc	r24, r20
    1c6e:	ba f0       	brmi	.+46     	; 0x1c9e <__addsf3x+0x9c>
    1c70:	91 50       	subi	r25, 0x01	; 1
    1c72:	a1 f0       	breq	.+40     	; 0x1c9c <__addsf3x+0x9a>
    1c74:	ff 0f       	add	r31, r31
    1c76:	bb 1f       	adc	r27, r27
    1c78:	66 1f       	adc	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	c2 f7       	brpl	.-16     	; 0x1c70 <__addsf3x+0x6e>
    1c80:	0e c0       	rjmp	.+28     	; 0x1c9e <__addsf3x+0x9c>
    1c82:	ba 0f       	add	r27, r26
    1c84:	62 1f       	adc	r22, r18
    1c86:	73 1f       	adc	r23, r19
    1c88:	84 1f       	adc	r24, r20
    1c8a:	48 f4       	brcc	.+18     	; 0x1c9e <__addsf3x+0x9c>
    1c8c:	87 95       	ror	r24
    1c8e:	77 95       	ror	r23
    1c90:	67 95       	ror	r22
    1c92:	b7 95       	ror	r27
    1c94:	f7 95       	ror	r31
    1c96:	9e 3f       	cpi	r25, 0xFE	; 254
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <__addsf3x+0x9a>
    1c9a:	b0 cf       	rjmp	.-160    	; 0x1bfc <__addsf3+0x28>
    1c9c:	93 95       	inc	r25
    1c9e:	88 0f       	add	r24, r24
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <__addsf3x+0xa2>
    1ca2:	99 27       	eor	r25, r25
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	97 95       	ror	r25
    1ca8:	87 95       	ror	r24
    1caa:	08 95       	ret

00001cac <__cmpsf2>:
    1cac:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__fp_cmp>
    1cb0:	08 f4       	brcc	.+2      	; 0x1cb4 <__cmpsf2+0x8>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	08 95       	ret

00001cb6 <cos>:
    1cb6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_rempio2>
    1cba:	e3 95       	inc	r30
    1cbc:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_sinus>

00001cc0 <__divsf3>:
    1cc0:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__divsf3x>
    1cc4:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_round>
    1cc8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fp_pscB>
    1ccc:	58 f0       	brcs	.+22     	; 0x1ce4 <__divsf3+0x24>
    1cce:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fp_pscA>
    1cd2:	40 f0       	brcs	.+16     	; 0x1ce4 <__divsf3+0x24>
    1cd4:	29 f4       	brne	.+10     	; 0x1ce0 <__divsf3+0x20>
    1cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <__divsf3+0x24>
    1cda:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_inf>
    1cde:	51 11       	cpse	r21, r1
    1ce0:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_szero>
    1ce4:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_nan>

00001ce8 <__divsf3x>:
    1ce8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fp_split3>
    1cec:	68 f3       	brcs	.-38     	; 0x1cc8 <__divsf3+0x8>

00001cee <__divsf3_pse>:
    1cee:	99 23       	and	r25, r25
    1cf0:	b1 f3       	breq	.-20     	; 0x1cde <__divsf3+0x1e>
    1cf2:	55 23       	and	r21, r21
    1cf4:	91 f3       	breq	.-28     	; 0x1cda <__divsf3+0x1a>
    1cf6:	95 1b       	sub	r25, r21
    1cf8:	55 0b       	sbc	r21, r21
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	aa 27       	eor	r26, r26
    1cfe:	62 17       	cp	r22, r18
    1d00:	73 07       	cpc	r23, r19
    1d02:	84 07       	cpc	r24, r20
    1d04:	38 f0       	brcs	.+14     	; 0x1d14 <__divsf3_pse+0x26>
    1d06:	9f 5f       	subi	r25, 0xFF	; 255
    1d08:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0a:	22 0f       	add	r18, r18
    1d0c:	33 1f       	adc	r19, r19
    1d0e:	44 1f       	adc	r20, r20
    1d10:	aa 1f       	adc	r26, r26
    1d12:	a9 f3       	breq	.-22     	; 0x1cfe <__divsf3_pse+0x10>
    1d14:	35 d0       	rcall	.+106    	; 0x1d80 <__divsf3_pse+0x92>
    1d16:	0e 2e       	mov	r0, r30
    1d18:	3a f0       	brmi	.+14     	; 0x1d28 <__divsf3_pse+0x3a>
    1d1a:	e0 e8       	ldi	r30, 0x80	; 128
    1d1c:	32 d0       	rcall	.+100    	; 0x1d82 <__divsf3_pse+0x94>
    1d1e:	91 50       	subi	r25, 0x01	; 1
    1d20:	50 40       	sbci	r21, 0x00	; 0
    1d22:	e6 95       	lsr	r30
    1d24:	00 1c       	adc	r0, r0
    1d26:	ca f7       	brpl	.-14     	; 0x1d1a <__divsf3_pse+0x2c>
    1d28:	2b d0       	rcall	.+86     	; 0x1d80 <__divsf3_pse+0x92>
    1d2a:	fe 2f       	mov	r31, r30
    1d2c:	29 d0       	rcall	.+82     	; 0x1d80 <__divsf3_pse+0x92>
    1d2e:	66 0f       	add	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	88 1f       	adc	r24, r24
    1d34:	bb 1f       	adc	r27, r27
    1d36:	26 17       	cp	r18, r22
    1d38:	37 07       	cpc	r19, r23
    1d3a:	48 07       	cpc	r20, r24
    1d3c:	ab 07       	cpc	r26, r27
    1d3e:	b0 e8       	ldi	r27, 0x80	; 128
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <__divsf3_pse+0x56>
    1d42:	bb 0b       	sbc	r27, r27
    1d44:	80 2d       	mov	r24, r0
    1d46:	bf 01       	movw	r22, r30
    1d48:	ff 27       	eor	r31, r31
    1d4a:	93 58       	subi	r25, 0x83	; 131
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	3a f0       	brmi	.+14     	; 0x1d5e <__divsf3_pse+0x70>
    1d50:	9e 3f       	cpi	r25, 0xFE	; 254
    1d52:	51 05       	cpc	r21, r1
    1d54:	78 f0       	brcs	.+30     	; 0x1d74 <__divsf3_pse+0x86>
    1d56:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_inf>
    1d5a:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_szero>
    1d5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d60:	e4 f3       	brlt	.-8      	; 0x1d5a <__divsf3_pse+0x6c>
    1d62:	98 3e       	cpi	r25, 0xE8	; 232
    1d64:	d4 f3       	brlt	.-12     	; 0x1d5a <__divsf3_pse+0x6c>
    1d66:	86 95       	lsr	r24
    1d68:	77 95       	ror	r23
    1d6a:	67 95       	ror	r22
    1d6c:	b7 95       	ror	r27
    1d6e:	f7 95       	ror	r31
    1d70:	9f 5f       	subi	r25, 0xFF	; 255
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <__divsf3_pse+0x78>
    1d74:	88 0f       	add	r24, r24
    1d76:	91 1d       	adc	r25, r1
    1d78:	96 95       	lsr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	97 f9       	bld	r25, 7
    1d7e:	08 95       	ret
    1d80:	e1 e0       	ldi	r30, 0x01	; 1
    1d82:	66 0f       	add	r22, r22
    1d84:	77 1f       	adc	r23, r23
    1d86:	88 1f       	adc	r24, r24
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	62 17       	cp	r22, r18
    1d8c:	73 07       	cpc	r23, r19
    1d8e:	84 07       	cpc	r24, r20
    1d90:	ba 07       	cpc	r27, r26
    1d92:	20 f0       	brcs	.+8      	; 0x1d9c <__divsf3_pse+0xae>
    1d94:	62 1b       	sub	r22, r18
    1d96:	73 0b       	sbc	r23, r19
    1d98:	84 0b       	sbc	r24, r20
    1d9a:	ba 0b       	sbc	r27, r26
    1d9c:	ee 1f       	adc	r30, r30
    1d9e:	88 f7       	brcc	.-30     	; 0x1d82 <__divsf3_pse+0x94>
    1da0:	e0 95       	com	r30
    1da2:	08 95       	ret

00001da4 <__fixsfsi>:
    1da4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__fixunssfsi>
    1da8:	68 94       	set
    1daa:	b1 11       	cpse	r27, r1
    1dac:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_szero>
    1db0:	08 95       	ret

00001db2 <__fixunssfsi>:
    1db2:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fp_splitA>
    1db6:	88 f0       	brcs	.+34     	; 0x1dda <__fixunssfsi+0x28>
    1db8:	9f 57       	subi	r25, 0x7F	; 127
    1dba:	98 f0       	brcs	.+38     	; 0x1de2 <__fixunssfsi+0x30>
    1dbc:	b9 2f       	mov	r27, r25
    1dbe:	99 27       	eor	r25, r25
    1dc0:	b7 51       	subi	r27, 0x17	; 23
    1dc2:	b0 f0       	brcs	.+44     	; 0x1df0 <__fixunssfsi+0x3e>
    1dc4:	e1 f0       	breq	.+56     	; 0x1dfe <__fixunssfsi+0x4c>
    1dc6:	66 0f       	add	r22, r22
    1dc8:	77 1f       	adc	r23, r23
    1dca:	88 1f       	adc	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	1a f0       	brmi	.+6      	; 0x1dd6 <__fixunssfsi+0x24>
    1dd0:	ba 95       	dec	r27
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__fixunssfsi+0x14>
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <__fixunssfsi+0x4c>
    1dd6:	b1 30       	cpi	r27, 0x01	; 1
    1dd8:	91 f0       	breq	.+36     	; 0x1dfe <__fixunssfsi+0x4c>
    1dda:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fp_zero>
    1dde:	b1 e0       	ldi	r27, 0x01	; 1
    1de0:	08 95       	ret
    1de2:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_zero>
    1de6:	67 2f       	mov	r22, r23
    1de8:	78 2f       	mov	r23, r24
    1dea:	88 27       	eor	r24, r24
    1dec:	b8 5f       	subi	r27, 0xF8	; 248
    1dee:	39 f0       	breq	.+14     	; 0x1dfe <__fixunssfsi+0x4c>
    1df0:	b9 3f       	cpi	r27, 0xF9	; 249
    1df2:	cc f3       	brlt	.-14     	; 0x1de6 <__fixunssfsi+0x34>
    1df4:	86 95       	lsr	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	b3 95       	inc	r27
    1dfc:	d9 f7       	brne	.-10     	; 0x1df4 <__fixunssfsi+0x42>
    1dfe:	3e f4       	brtc	.+14     	; 0x1e0e <__fixunssfsi+0x5c>
    1e00:	90 95       	com	r25
    1e02:	80 95       	com	r24
    1e04:	70 95       	com	r23
    1e06:	61 95       	neg	r22
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	08 95       	ret

00001e10 <__floatunsisf>:
    1e10:	e8 94       	clt
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <__floatsisf+0x12>

00001e14 <__floatsisf>:
    1e14:	97 fb       	bst	r25, 7
    1e16:	3e f4       	brtc	.+14     	; 0x1e26 <__floatsisf+0x12>
    1e18:	90 95       	com	r25
    1e1a:	80 95       	com	r24
    1e1c:	70 95       	com	r23
    1e1e:	61 95       	neg	r22
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	8f 4f       	sbci	r24, 0xFF	; 255
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	99 23       	and	r25, r25
    1e28:	a9 f0       	breq	.+42     	; 0x1e54 <__floatsisf+0x40>
    1e2a:	f9 2f       	mov	r31, r25
    1e2c:	96 e9       	ldi	r25, 0x96	; 150
    1e2e:	bb 27       	eor	r27, r27
    1e30:	93 95       	inc	r25
    1e32:	f6 95       	lsr	r31
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	b7 95       	ror	r27
    1e3c:	f1 11       	cpse	r31, r1
    1e3e:	f8 cf       	rjmp	.-16     	; 0x1e30 <__floatsisf+0x1c>
    1e40:	fa f4       	brpl	.+62     	; 0x1e80 <__floatsisf+0x6c>
    1e42:	bb 0f       	add	r27, r27
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <__floatsisf+0x36>
    1e46:	60 ff       	sbrs	r22, 0
    1e48:	1b c0       	rjmp	.+54     	; 0x1e80 <__floatsisf+0x6c>
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	16 c0       	rjmp	.+44     	; 0x1e80 <__floatsisf+0x6c>
    1e54:	88 23       	and	r24, r24
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <__floatsisf+0x48>
    1e58:	96 e9       	ldi	r25, 0x96	; 150
    1e5a:	11 c0       	rjmp	.+34     	; 0x1e7e <__floatsisf+0x6a>
    1e5c:	77 23       	and	r23, r23
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <__floatsisf+0x54>
    1e60:	9e e8       	ldi	r25, 0x8E	; 142
    1e62:	87 2f       	mov	r24, r23
    1e64:	76 2f       	mov	r23, r22
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <__floatsisf+0x5e>
    1e68:	66 23       	and	r22, r22
    1e6a:	71 f0       	breq	.+28     	; 0x1e88 <__floatsisf+0x74>
    1e6c:	96 e8       	ldi	r25, 0x86	; 134
    1e6e:	86 2f       	mov	r24, r22
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	2a f0       	brmi	.+10     	; 0x1e80 <__floatsisf+0x6c>
    1e76:	9a 95       	dec	r25
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	da f7       	brpl	.-10     	; 0x1e76 <__floatsisf+0x62>
    1e80:	88 0f       	add	r24, r24
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	97 f9       	bld	r25, 7
    1e88:	08 95       	ret

00001e8a <__fp_cmp>:
    1e8a:	99 0f       	add	r25, r25
    1e8c:	00 08       	sbc	r0, r0
    1e8e:	55 0f       	add	r21, r21
    1e90:	aa 0b       	sbc	r26, r26
    1e92:	e0 e8       	ldi	r30, 0x80	; 128
    1e94:	fe ef       	ldi	r31, 0xFE	; 254
    1e96:	16 16       	cp	r1, r22
    1e98:	17 06       	cpc	r1, r23
    1e9a:	e8 07       	cpc	r30, r24
    1e9c:	f9 07       	cpc	r31, r25
    1e9e:	c0 f0       	brcs	.+48     	; 0x1ed0 <__fp_cmp+0x46>
    1ea0:	12 16       	cp	r1, r18
    1ea2:	13 06       	cpc	r1, r19
    1ea4:	e4 07       	cpc	r30, r20
    1ea6:	f5 07       	cpc	r31, r21
    1ea8:	98 f0       	brcs	.+38     	; 0x1ed0 <__fp_cmp+0x46>
    1eaa:	62 1b       	sub	r22, r18
    1eac:	73 0b       	sbc	r23, r19
    1eae:	84 0b       	sbc	r24, r20
    1eb0:	95 0b       	sbc	r25, r21
    1eb2:	39 f4       	brne	.+14     	; 0x1ec2 <__fp_cmp+0x38>
    1eb4:	0a 26       	eor	r0, r26
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <__fp_cmp+0x46>
    1eb8:	23 2b       	or	r18, r19
    1eba:	24 2b       	or	r18, r20
    1ebc:	25 2b       	or	r18, r21
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <__fp_cmp+0x3e>
    1ec0:	08 95       	ret
    1ec2:	0a 26       	eor	r0, r26
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <__fp_cmp+0x3e>
    1ec6:	a1 40       	sbci	r26, 0x01	; 1
    1ec8:	a6 95       	lsr	r26
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	81 1d       	adc	r24, r1
    1ece:	81 1d       	adc	r24, r1
    1ed0:	08 95       	ret

00001ed2 <__fp_inf>:
    1ed2:	97 f9       	bld	r25, 7
    1ed4:	9f 67       	ori	r25, 0x7F	; 127
    1ed6:	80 e8       	ldi	r24, 0x80	; 128
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	08 95       	ret

00001ede <__fp_nan>:
    1ede:	9f ef       	ldi	r25, 0xFF	; 255
    1ee0:	80 ec       	ldi	r24, 0xC0	; 192
    1ee2:	08 95       	ret

00001ee4 <__fp_pscA>:
    1ee4:	00 24       	eor	r0, r0
    1ee6:	0a 94       	dec	r0
    1ee8:	16 16       	cp	r1, r22
    1eea:	17 06       	cpc	r1, r23
    1eec:	18 06       	cpc	r1, r24
    1eee:	09 06       	cpc	r0, r25
    1ef0:	08 95       	ret

00001ef2 <__fp_pscB>:
    1ef2:	00 24       	eor	r0, r0
    1ef4:	0a 94       	dec	r0
    1ef6:	12 16       	cp	r1, r18
    1ef8:	13 06       	cpc	r1, r19
    1efa:	14 06       	cpc	r1, r20
    1efc:	05 06       	cpc	r0, r21
    1efe:	08 95       	ret
    1f00:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_nan>

00001f04 <__fp_rempio2>:
    1f04:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fp_splitA>
    1f08:	d8 f3       	brcs	.-10     	; 0x1f00 <__fp_pscB+0xe>
    1f0a:	e8 94       	clt
    1f0c:	e0 e0       	ldi	r30, 0x00	; 0
    1f0e:	bb 27       	eor	r27, r27
    1f10:	9f 57       	subi	r25, 0x7F	; 127
    1f12:	f0 f0       	brcs	.+60     	; 0x1f50 <__fp_rempio2+0x4c>
    1f14:	2a ed       	ldi	r18, 0xDA	; 218
    1f16:	3f e0       	ldi	r19, 0x0F	; 15
    1f18:	49 ec       	ldi	r20, 0xC9	; 201
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <__fp_rempio2+0x24>
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	bb 0f       	add	r27, r27
    1f20:	66 1f       	adc	r22, r22
    1f22:	77 1f       	adc	r23, r23
    1f24:	88 1f       	adc	r24, r24
    1f26:	28 f0       	brcs	.+10     	; 0x1f32 <__fp_rempio2+0x2e>
    1f28:	b2 3a       	cpi	r27, 0xA2	; 162
    1f2a:	62 07       	cpc	r22, r18
    1f2c:	73 07       	cpc	r23, r19
    1f2e:	84 07       	cpc	r24, r20
    1f30:	28 f0       	brcs	.+10     	; 0x1f3c <__fp_rempio2+0x38>
    1f32:	b2 5a       	subi	r27, 0xA2	; 162
    1f34:	62 0b       	sbc	r22, r18
    1f36:	73 0b       	sbc	r23, r19
    1f38:	84 0b       	sbc	r24, r20
    1f3a:	e3 95       	inc	r30
    1f3c:	9a 95       	dec	r25
    1f3e:	72 f7       	brpl	.-36     	; 0x1f1c <__fp_rempio2+0x18>
    1f40:	80 38       	cpi	r24, 0x80	; 128
    1f42:	30 f4       	brcc	.+12     	; 0x1f50 <__fp_rempio2+0x4c>
    1f44:	9a 95       	dec	r25
    1f46:	bb 0f       	add	r27, r27
    1f48:	66 1f       	adc	r22, r22
    1f4a:	77 1f       	adc	r23, r23
    1f4c:	88 1f       	adc	r24, r24
    1f4e:	d2 f7       	brpl	.-12     	; 0x1f44 <__fp_rempio2+0x40>
    1f50:	90 48       	sbci	r25, 0x80	; 128
    1f52:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__fp_mpack_finite>

00001f56 <__fp_round>:
    1f56:	09 2e       	mov	r0, r25
    1f58:	03 94       	inc	r0
    1f5a:	00 0c       	add	r0, r0
    1f5c:	11 f4       	brne	.+4      	; 0x1f62 <__fp_round+0xc>
    1f5e:	88 23       	and	r24, r24
    1f60:	52 f0       	brmi	.+20     	; 0x1f76 <__fp_round+0x20>
    1f62:	bb 0f       	add	r27, r27
    1f64:	40 f4       	brcc	.+16     	; 0x1f76 <__fp_round+0x20>
    1f66:	bf 2b       	or	r27, r31
    1f68:	11 f4       	brne	.+4      	; 0x1f6e <__fp_round+0x18>
    1f6a:	60 ff       	sbrs	r22, 0
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <__fp_round+0x20>
    1f6e:	6f 5f       	subi	r22, 0xFF	; 255
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	8f 4f       	sbci	r24, 0xFF	; 255
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	08 95       	ret

00001f78 <__fp_sinus>:
    1f78:	ef 93       	push	r30
    1f7a:	e0 ff       	sbrs	r30, 0
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <__fp_sinus+0x14>
    1f7e:	a2 ea       	ldi	r26, 0xA2	; 162
    1f80:	2a ed       	ldi	r18, 0xDA	; 218
    1f82:	3f e0       	ldi	r19, 0x0F	; 15
    1f84:	49 ec       	ldi	r20, 0xC9	; 201
    1f86:	5f eb       	ldi	r21, 0xBF	; 191
    1f88:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__addsf3x>
    1f8c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__fp_round>
    1f90:	0f 90       	pop	r0
    1f92:	03 94       	inc	r0
    1f94:	01 fc       	sbrc	r0, 1
    1f96:	90 58       	subi	r25, 0x80	; 128
    1f98:	e8 e3       	ldi	r30, 0x38	; 56
    1f9a:	f1 e0       	ldi	r31, 0x01	; 1
    1f9c:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__fp_powsodd>

00001fa0 <__fp_split3>:
    1fa0:	57 fd       	sbrc	r21, 7
    1fa2:	90 58       	subi	r25, 0x80	; 128
    1fa4:	44 0f       	add	r20, r20
    1fa6:	55 1f       	adc	r21, r21
    1fa8:	59 f0       	breq	.+22     	; 0x1fc0 <__fp_splitA+0x10>
    1faa:	5f 3f       	cpi	r21, 0xFF	; 255
    1fac:	71 f0       	breq	.+28     	; 0x1fca <__fp_splitA+0x1a>
    1fae:	47 95       	ror	r20

00001fb0 <__fp_splitA>:
    1fb0:	88 0f       	add	r24, r24
    1fb2:	97 fb       	bst	r25, 7
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <__fp_splitA+0x20>
    1fb8:	9f 3f       	cpi	r25, 0xFF	; 255
    1fba:	79 f0       	breq	.+30     	; 0x1fda <__fp_splitA+0x2a>
    1fbc:	87 95       	ror	r24
    1fbe:	08 95       	ret
    1fc0:	12 16       	cp	r1, r18
    1fc2:	13 06       	cpc	r1, r19
    1fc4:	14 06       	cpc	r1, r20
    1fc6:	55 1f       	adc	r21, r21
    1fc8:	f2 cf       	rjmp	.-28     	; 0x1fae <__fp_split3+0xe>
    1fca:	46 95       	lsr	r20
    1fcc:	f1 df       	rcall	.-30     	; 0x1fb0 <__fp_splitA>
    1fce:	08 c0       	rjmp	.+16     	; 0x1fe0 <__fp_splitA+0x30>
    1fd0:	16 16       	cp	r1, r22
    1fd2:	17 06       	cpc	r1, r23
    1fd4:	18 06       	cpc	r1, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	f1 cf       	rjmp	.-30     	; 0x1fbc <__fp_splitA+0xc>
    1fda:	86 95       	lsr	r24
    1fdc:	71 05       	cpc	r23, r1
    1fde:	61 05       	cpc	r22, r1
    1fe0:	08 94       	sec
    1fe2:	08 95       	ret

00001fe4 <__fp_zero>:
    1fe4:	e8 94       	clt

00001fe6 <__fp_szero>:
    1fe6:	bb 27       	eor	r27, r27
    1fe8:	66 27       	eor	r22, r22
    1fea:	77 27       	eor	r23, r23
    1fec:	cb 01       	movw	r24, r22
    1fee:	97 f9       	bld	r25, 7
    1ff0:	08 95       	ret

00001ff2 <__gesf2>:
    1ff2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__fp_cmp>
    1ff6:	08 f4       	brcc	.+2      	; 0x1ffa <__gesf2+0x8>
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	08 95       	ret

00001ffc <__mulsf3>:
    1ffc:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulsf3x>
    2000:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__fp_round>
    2004:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fp_pscA>
    2008:	38 f0       	brcs	.+14     	; 0x2018 <__mulsf3+0x1c>
    200a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fp_pscB>
    200e:	20 f0       	brcs	.+8      	; 0x2018 <__mulsf3+0x1c>
    2010:	95 23       	and	r25, r21
    2012:	11 f0       	breq	.+4      	; 0x2018 <__mulsf3+0x1c>
    2014:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_inf>
    2018:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_nan>
    201c:	11 24       	eor	r1, r1
    201e:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_szero>

00002022 <__mulsf3x>:
    2022:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fp_split3>
    2026:	70 f3       	brcs	.-36     	; 0x2004 <__mulsf3+0x8>

00002028 <__mulsf3_pse>:
    2028:	95 9f       	mul	r25, r21
    202a:	c1 f3       	breq	.-16     	; 0x201c <__mulsf3+0x20>
    202c:	95 0f       	add	r25, r21
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	55 1f       	adc	r21, r21
    2032:	62 9f       	mul	r22, r18
    2034:	f0 01       	movw	r30, r0
    2036:	72 9f       	mul	r23, r18
    2038:	bb 27       	eor	r27, r27
    203a:	f0 0d       	add	r31, r0
    203c:	b1 1d       	adc	r27, r1
    203e:	63 9f       	mul	r22, r19
    2040:	aa 27       	eor	r26, r26
    2042:	f0 0d       	add	r31, r0
    2044:	b1 1d       	adc	r27, r1
    2046:	aa 1f       	adc	r26, r26
    2048:	64 9f       	mul	r22, r20
    204a:	66 27       	eor	r22, r22
    204c:	b0 0d       	add	r27, r0
    204e:	a1 1d       	adc	r26, r1
    2050:	66 1f       	adc	r22, r22
    2052:	82 9f       	mul	r24, r18
    2054:	22 27       	eor	r18, r18
    2056:	b0 0d       	add	r27, r0
    2058:	a1 1d       	adc	r26, r1
    205a:	62 1f       	adc	r22, r18
    205c:	73 9f       	mul	r23, r19
    205e:	b0 0d       	add	r27, r0
    2060:	a1 1d       	adc	r26, r1
    2062:	62 1f       	adc	r22, r18
    2064:	83 9f       	mul	r24, r19
    2066:	a0 0d       	add	r26, r0
    2068:	61 1d       	adc	r22, r1
    206a:	22 1f       	adc	r18, r18
    206c:	74 9f       	mul	r23, r20
    206e:	33 27       	eor	r19, r19
    2070:	a0 0d       	add	r26, r0
    2072:	61 1d       	adc	r22, r1
    2074:	23 1f       	adc	r18, r19
    2076:	84 9f       	mul	r24, r20
    2078:	60 0d       	add	r22, r0
    207a:	21 1d       	adc	r18, r1
    207c:	82 2f       	mov	r24, r18
    207e:	76 2f       	mov	r23, r22
    2080:	6a 2f       	mov	r22, r26
    2082:	11 24       	eor	r1, r1
    2084:	9f 57       	subi	r25, 0x7F	; 127
    2086:	50 40       	sbci	r21, 0x00	; 0
    2088:	9a f0       	brmi	.+38     	; 0x20b0 <__mulsf3_pse+0x88>
    208a:	f1 f0       	breq	.+60     	; 0x20c8 <__mulsf3_pse+0xa0>
    208c:	88 23       	and	r24, r24
    208e:	4a f0       	brmi	.+18     	; 0x20a2 <__mulsf3_pse+0x7a>
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	bb 1f       	adc	r27, r27
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	91 50       	subi	r25, 0x01	; 1
    209e:	50 40       	sbci	r21, 0x00	; 0
    20a0:	a9 f7       	brne	.-22     	; 0x208c <__mulsf3_pse+0x64>
    20a2:	9e 3f       	cpi	r25, 0xFE	; 254
    20a4:	51 05       	cpc	r21, r1
    20a6:	80 f0       	brcs	.+32     	; 0x20c8 <__mulsf3_pse+0xa0>
    20a8:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_inf>
    20ac:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_szero>
    20b0:	5f 3f       	cpi	r21, 0xFF	; 255
    20b2:	e4 f3       	brlt	.-8      	; 0x20ac <__mulsf3_pse+0x84>
    20b4:	98 3e       	cpi	r25, 0xE8	; 232
    20b6:	d4 f3       	brlt	.-12     	; 0x20ac <__mulsf3_pse+0x84>
    20b8:	86 95       	lsr	r24
    20ba:	77 95       	ror	r23
    20bc:	67 95       	ror	r22
    20be:	b7 95       	ror	r27
    20c0:	f7 95       	ror	r31
    20c2:	e7 95       	ror	r30
    20c4:	9f 5f       	subi	r25, 0xFF	; 255
    20c6:	c1 f7       	brne	.-16     	; 0x20b8 <__mulsf3_pse+0x90>
    20c8:	fe 2b       	or	r31, r30
    20ca:	88 0f       	add	r24, r24
    20cc:	91 1d       	adc	r25, r1
    20ce:	96 95       	lsr	r25
    20d0:	87 95       	ror	r24
    20d2:	97 f9       	bld	r25, 7
    20d4:	08 95       	ret

000020d6 <__fp_mpack>:
    20d6:	9f 3f       	cpi	r25, 0xFF	; 255
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <__fp_mpack_finite+0xc>

000020da <__fp_mpack_finite>:
    20da:	91 50       	subi	r25, 0x01	; 1
    20dc:	20 f4       	brcc	.+8      	; 0x20e6 <__fp_mpack_finite+0xc>
    20de:	87 95       	ror	r24
    20e0:	77 95       	ror	r23
    20e2:	67 95       	ror	r22
    20e4:	b7 95       	ror	r27
    20e6:	88 0f       	add	r24, r24
    20e8:	91 1d       	adc	r25, r1
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	97 f9       	bld	r25, 7
    20f0:	08 95       	ret

000020f2 <__fp_powsodd>:
    20f2:	9f 93       	push	r25
    20f4:	8f 93       	push	r24
    20f6:	7f 93       	push	r23
    20f8:	6f 93       	push	r22
    20fa:	ff 93       	push	r31
    20fc:	ef 93       	push	r30
    20fe:	9b 01       	movw	r18, r22
    2100:	ac 01       	movw	r20, r24
    2102:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__mulsf3>
    2106:	ef 91       	pop	r30
    2108:	ff 91       	pop	r31
    210a:	0e 94 8d 10 	call	0x211a	; 0x211a <__fp_powser>
    210e:	2f 91       	pop	r18
    2110:	3f 91       	pop	r19
    2112:	4f 91       	pop	r20
    2114:	5f 91       	pop	r21
    2116:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__mulsf3>

0000211a <__fp_powser>:
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	1f 93       	push	r17
    2120:	0f 93       	push	r16
    2122:	ff 92       	push	r15
    2124:	ef 92       	push	r14
    2126:	df 92       	push	r13
    2128:	7b 01       	movw	r14, r22
    212a:	8c 01       	movw	r16, r24
    212c:	68 94       	set
    212e:	06 c0       	rjmp	.+12     	; 0x213c <__fp_powser+0x22>
    2130:	da 2e       	mov	r13, r26
    2132:	ef 01       	movw	r28, r30
    2134:	0e 94 11 10 	call	0x2022	; 0x2022 <__mulsf3x>
    2138:	fe 01       	movw	r30, r28
    213a:	e8 94       	clt
    213c:	a5 91       	lpm	r26, Z+
    213e:	25 91       	lpm	r18, Z+
    2140:	35 91       	lpm	r19, Z+
    2142:	45 91       	lpm	r20, Z+
    2144:	55 91       	lpm	r21, Z+
    2146:	a6 f3       	brts	.-24     	; 0x2130 <__fp_powser+0x16>
    2148:	ef 01       	movw	r28, r30
    214a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__addsf3x>
    214e:	fe 01       	movw	r30, r28
    2150:	97 01       	movw	r18, r14
    2152:	a8 01       	movw	r20, r16
    2154:	da 94       	dec	r13
    2156:	69 f7       	brne	.-38     	; 0x2132 <__fp_powser+0x18>
    2158:	df 90       	pop	r13
    215a:	ef 90       	pop	r14
    215c:	ff 90       	pop	r15
    215e:	0f 91       	pop	r16
    2160:	1f 91       	pop	r17
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <__divmodhi4>:
    2168:	97 fb       	bst	r25, 7
    216a:	07 2e       	mov	r0, r23
    216c:	16 f4       	brtc	.+4      	; 0x2172 <__divmodhi4+0xa>
    216e:	00 94       	com	r0
    2170:	07 d0       	rcall	.+14     	; 0x2180 <__divmodhi4_neg1>
    2172:	77 fd       	sbrc	r23, 7
    2174:	09 d0       	rcall	.+18     	; 0x2188 <__divmodhi4_neg2>
    2176:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__udivmodhi4>
    217a:	07 fc       	sbrc	r0, 7
    217c:	05 d0       	rcall	.+10     	; 0x2188 <__divmodhi4_neg2>
    217e:	3e f4       	brtc	.+14     	; 0x218e <__divmodhi4_exit>

00002180 <__divmodhi4_neg1>:
    2180:	90 95       	com	r25
    2182:	81 95       	neg	r24
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	08 95       	ret

00002188 <__divmodhi4_neg2>:
    2188:	70 95       	com	r23
    218a:	61 95       	neg	r22
    218c:	7f 4f       	sbci	r23, 0xFF	; 255

0000218e <__divmodhi4_exit>:
    218e:	08 95       	ret

00002190 <__udivmodsi4>:
    2190:	a1 e2       	ldi	r26, 0x21	; 33
    2192:	1a 2e       	mov	r1, r26
    2194:	aa 1b       	sub	r26, r26
    2196:	bb 1b       	sub	r27, r27
    2198:	fd 01       	movw	r30, r26
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <__udivmodsi4_ep>

0000219c <__udivmodsi4_loop>:
    219c:	aa 1f       	adc	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	ee 1f       	adc	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	a2 17       	cp	r26, r18
    21a6:	b3 07       	cpc	r27, r19
    21a8:	e4 07       	cpc	r30, r20
    21aa:	f5 07       	cpc	r31, r21
    21ac:	20 f0       	brcs	.+8      	; 0x21b6 <__udivmodsi4_ep>
    21ae:	a2 1b       	sub	r26, r18
    21b0:	b3 0b       	sbc	r27, r19
    21b2:	e4 0b       	sbc	r30, r20
    21b4:	f5 0b       	sbc	r31, r21

000021b6 <__udivmodsi4_ep>:
    21b6:	66 1f       	adc	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	88 1f       	adc	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	1a 94       	dec	r1
    21c0:	69 f7       	brne	.-38     	; 0x219c <__udivmodsi4_loop>
    21c2:	60 95       	com	r22
    21c4:	70 95       	com	r23
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	9b 01       	movw	r18, r22
    21cc:	ac 01       	movw	r20, r24
    21ce:	bd 01       	movw	r22, r26
    21d0:	cf 01       	movw	r24, r30
    21d2:	08 95       	ret

000021d4 <__tablejump2__>:
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	05 90       	lpm	r0, Z+
    21da:	f4 91       	lpm	r31, Z
    21dc:	e0 2d       	mov	r30, r0
    21de:	09 94       	ijmp

000021e0 <__udivmodhi4>:
    21e0:	aa 1b       	sub	r26, r26
    21e2:	bb 1b       	sub	r27, r27
    21e4:	51 e1       	ldi	r21, 0x11	; 17
    21e6:	07 c0       	rjmp	.+14     	; 0x21f6 <__udivmodhi4_ep>

000021e8 <__udivmodhi4_loop>:
    21e8:	aa 1f       	adc	r26, r26
    21ea:	bb 1f       	adc	r27, r27
    21ec:	a6 17       	cp	r26, r22
    21ee:	b7 07       	cpc	r27, r23
    21f0:	10 f0       	brcs	.+4      	; 0x21f6 <__udivmodhi4_ep>
    21f2:	a6 1b       	sub	r26, r22
    21f4:	b7 0b       	sbc	r27, r23

000021f6 <__udivmodhi4_ep>:
    21f6:	88 1f       	adc	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	5a 95       	dec	r21
    21fc:	a9 f7       	brne	.-22     	; 0x21e8 <__udivmodhi4_loop>
    21fe:	80 95       	com	r24
    2200:	90 95       	com	r25
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	08 95       	ret

00002208 <malloc>:
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	91 05       	cpc	r25, r1
    2214:	10 f4       	brcc	.+4      	; 0x221a <malloc+0x12>
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <__flp>
    221e:	f0 91 f5 04 	lds	r31, 0x04F5	; 0x8004f5 <__flp+0x1>
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	a0 e0       	ldi	r26, 0x00	; 0
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	30 97       	sbiw	r30, 0x00	; 0
    222c:	19 f1       	breq	.+70     	; 0x2274 <malloc+0x6c>
    222e:	40 81       	ld	r20, Z
    2230:	51 81       	ldd	r21, Z+1	; 0x01
    2232:	02 81       	ldd	r16, Z+2	; 0x02
    2234:	13 81       	ldd	r17, Z+3	; 0x03
    2236:	48 17       	cp	r20, r24
    2238:	59 07       	cpc	r21, r25
    223a:	c8 f0       	brcs	.+50     	; 0x226e <malloc+0x66>
    223c:	84 17       	cp	r24, r20
    223e:	95 07       	cpc	r25, r21
    2240:	69 f4       	brne	.+26     	; 0x225c <malloc+0x54>
    2242:	10 97       	sbiw	r26, 0x00	; 0
    2244:	31 f0       	breq	.+12     	; 0x2252 <malloc+0x4a>
    2246:	12 96       	adiw	r26, 0x02	; 2
    2248:	0c 93       	st	X, r16
    224a:	12 97       	sbiw	r26, 0x02	; 2
    224c:	13 96       	adiw	r26, 0x03	; 3
    224e:	1c 93       	st	X, r17
    2250:	27 c0       	rjmp	.+78     	; 0x22a0 <malloc+0x98>
    2252:	00 93 f4 04 	sts	0x04F4, r16	; 0x8004f4 <__flp>
    2256:	10 93 f5 04 	sts	0x04F5, r17	; 0x8004f5 <__flp+0x1>
    225a:	22 c0       	rjmp	.+68     	; 0x22a0 <malloc+0x98>
    225c:	21 15       	cp	r18, r1
    225e:	31 05       	cpc	r19, r1
    2260:	19 f0       	breq	.+6      	; 0x2268 <malloc+0x60>
    2262:	42 17       	cp	r20, r18
    2264:	53 07       	cpc	r21, r19
    2266:	18 f4       	brcc	.+6      	; 0x226e <malloc+0x66>
    2268:	9a 01       	movw	r18, r20
    226a:	bd 01       	movw	r22, r26
    226c:	ef 01       	movw	r28, r30
    226e:	df 01       	movw	r26, r30
    2270:	f8 01       	movw	r30, r16
    2272:	db cf       	rjmp	.-74     	; 0x222a <malloc+0x22>
    2274:	21 15       	cp	r18, r1
    2276:	31 05       	cpc	r19, r1
    2278:	f9 f0       	breq	.+62     	; 0x22b8 <malloc+0xb0>
    227a:	28 1b       	sub	r18, r24
    227c:	39 0b       	sbc	r19, r25
    227e:	24 30       	cpi	r18, 0x04	; 4
    2280:	31 05       	cpc	r19, r1
    2282:	80 f4       	brcc	.+32     	; 0x22a4 <malloc+0x9c>
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	61 15       	cp	r22, r1
    228a:	71 05       	cpc	r23, r1
    228c:	21 f0       	breq	.+8      	; 0x2296 <malloc+0x8e>
    228e:	fb 01       	movw	r30, r22
    2290:	93 83       	std	Z+3, r25	; 0x03
    2292:	82 83       	std	Z+2, r24	; 0x02
    2294:	04 c0       	rjmp	.+8      	; 0x229e <malloc+0x96>
    2296:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <__flp+0x1>
    229a:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <__flp>
    229e:	fe 01       	movw	r30, r28
    22a0:	32 96       	adiw	r30, 0x02	; 2
    22a2:	44 c0       	rjmp	.+136    	; 0x232c <malloc+0x124>
    22a4:	fe 01       	movw	r30, r28
    22a6:	e2 0f       	add	r30, r18
    22a8:	f3 1f       	adc	r31, r19
    22aa:	81 93       	st	Z+, r24
    22ac:	91 93       	st	Z+, r25
    22ae:	22 50       	subi	r18, 0x02	; 2
    22b0:	31 09       	sbc	r19, r1
    22b2:	39 83       	std	Y+1, r19	; 0x01
    22b4:	28 83       	st	Y, r18
    22b6:	3a c0       	rjmp	.+116    	; 0x232c <malloc+0x124>
    22b8:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <__brkval>
    22bc:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <__brkval+0x1>
    22c0:	23 2b       	or	r18, r19
    22c2:	41 f4       	brne	.+16     	; 0x22d4 <malloc+0xcc>
    22c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    22c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    22cc:	30 93 f3 04 	sts	0x04F3, r19	; 0x8004f3 <__brkval+0x1>
    22d0:	20 93 f2 04 	sts	0x04F2, r18	; 0x8004f2 <__brkval>
    22d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    22d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    22dc:	21 15       	cp	r18, r1
    22de:	31 05       	cpc	r19, r1
    22e0:	41 f4       	brne	.+16     	; 0x22f2 <malloc+0xea>
    22e2:	2d b7       	in	r18, 0x3d	; 61
    22e4:	3e b7       	in	r19, 0x3e	; 62
    22e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    22ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    22ee:	24 1b       	sub	r18, r20
    22f0:	35 0b       	sbc	r19, r21
    22f2:	e0 91 f2 04 	lds	r30, 0x04F2	; 0x8004f2 <__brkval>
    22f6:	f0 91 f3 04 	lds	r31, 0x04F3	; 0x8004f3 <__brkval+0x1>
    22fa:	e2 17       	cp	r30, r18
    22fc:	f3 07       	cpc	r31, r19
    22fe:	a0 f4       	brcc	.+40     	; 0x2328 <malloc+0x120>
    2300:	2e 1b       	sub	r18, r30
    2302:	3f 0b       	sbc	r19, r31
    2304:	28 17       	cp	r18, r24
    2306:	39 07       	cpc	r19, r25
    2308:	78 f0       	brcs	.+30     	; 0x2328 <malloc+0x120>
    230a:	ac 01       	movw	r20, r24
    230c:	4e 5f       	subi	r20, 0xFE	; 254
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	24 17       	cp	r18, r20
    2312:	35 07       	cpc	r19, r21
    2314:	48 f0       	brcs	.+18     	; 0x2328 <malloc+0x120>
    2316:	4e 0f       	add	r20, r30
    2318:	5f 1f       	adc	r21, r31
    231a:	50 93 f3 04 	sts	0x04F3, r21	; 0x8004f3 <__brkval+0x1>
    231e:	40 93 f2 04 	sts	0x04F2, r20	; 0x8004f2 <__brkval>
    2322:	81 93       	st	Z+, r24
    2324:	91 93       	st	Z+, r25
    2326:	02 c0       	rjmp	.+4      	; 0x232c <malloc+0x124>
    2328:	e0 e0       	ldi	r30, 0x00	; 0
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	cf 01       	movw	r24, r30
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <free>:
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	09 f4       	brne	.+2      	; 0x2342 <free+0xa>
    2340:	81 c0       	rjmp	.+258    	; 0x2444 <free+0x10c>
    2342:	fc 01       	movw	r30, r24
    2344:	32 97       	sbiw	r30, 0x02	; 2
    2346:	13 82       	std	Z+3, r1	; 0x03
    2348:	12 82       	std	Z+2, r1	; 0x02
    234a:	a0 91 f4 04 	lds	r26, 0x04F4	; 0x8004f4 <__flp>
    234e:	b0 91 f5 04 	lds	r27, 0x04F5	; 0x8004f5 <__flp+0x1>
    2352:	10 97       	sbiw	r26, 0x00	; 0
    2354:	81 f4       	brne	.+32     	; 0x2376 <free+0x3e>
    2356:	20 81       	ld	r18, Z
    2358:	31 81       	ldd	r19, Z+1	; 0x01
    235a:	82 0f       	add	r24, r18
    235c:	93 1f       	adc	r25, r19
    235e:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <__brkval>
    2362:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <__brkval+0x1>
    2366:	28 17       	cp	r18, r24
    2368:	39 07       	cpc	r19, r25
    236a:	51 f5       	brne	.+84     	; 0x23c0 <free+0x88>
    236c:	f0 93 f3 04 	sts	0x04F3, r31	; 0x8004f3 <__brkval+0x1>
    2370:	e0 93 f2 04 	sts	0x04F2, r30	; 0x8004f2 <__brkval>
    2374:	67 c0       	rjmp	.+206    	; 0x2444 <free+0x10c>
    2376:	ed 01       	movw	r28, r26
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	ce 17       	cp	r28, r30
    237e:	df 07       	cpc	r29, r31
    2380:	40 f4       	brcc	.+16     	; 0x2392 <free+0x5a>
    2382:	4a 81       	ldd	r20, Y+2	; 0x02
    2384:	5b 81       	ldd	r21, Y+3	; 0x03
    2386:	9e 01       	movw	r18, r28
    2388:	41 15       	cp	r20, r1
    238a:	51 05       	cpc	r21, r1
    238c:	f1 f0       	breq	.+60     	; 0x23ca <free+0x92>
    238e:	ea 01       	movw	r28, r20
    2390:	f5 cf       	rjmp	.-22     	; 0x237c <free+0x44>
    2392:	d3 83       	std	Z+3, r29	; 0x03
    2394:	c2 83       	std	Z+2, r28	; 0x02
    2396:	40 81       	ld	r20, Z
    2398:	51 81       	ldd	r21, Z+1	; 0x01
    239a:	84 0f       	add	r24, r20
    239c:	95 1f       	adc	r25, r21
    239e:	c8 17       	cp	r28, r24
    23a0:	d9 07       	cpc	r29, r25
    23a2:	59 f4       	brne	.+22     	; 0x23ba <free+0x82>
    23a4:	88 81       	ld	r24, Y
    23a6:	99 81       	ldd	r25, Y+1	; 0x01
    23a8:	84 0f       	add	r24, r20
    23aa:	95 1f       	adc	r25, r21
    23ac:	02 96       	adiw	r24, 0x02	; 2
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	93 83       	std	Z+3, r25	; 0x03
    23b8:	82 83       	std	Z+2, r24	; 0x02
    23ba:	21 15       	cp	r18, r1
    23bc:	31 05       	cpc	r19, r1
    23be:	29 f4       	brne	.+10     	; 0x23ca <free+0x92>
    23c0:	f0 93 f5 04 	sts	0x04F5, r31	; 0x8004f5 <__flp+0x1>
    23c4:	e0 93 f4 04 	sts	0x04F4, r30	; 0x8004f4 <__flp>
    23c8:	3d c0       	rjmp	.+122    	; 0x2444 <free+0x10c>
    23ca:	e9 01       	movw	r28, r18
    23cc:	fb 83       	std	Y+3, r31	; 0x03
    23ce:	ea 83       	std	Y+2, r30	; 0x02
    23d0:	49 91       	ld	r20, Y+
    23d2:	59 91       	ld	r21, Y+
    23d4:	c4 0f       	add	r28, r20
    23d6:	d5 1f       	adc	r29, r21
    23d8:	ec 17       	cp	r30, r28
    23da:	fd 07       	cpc	r31, r29
    23dc:	61 f4       	brne	.+24     	; 0x23f6 <free+0xbe>
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	84 0f       	add	r24, r20
    23e4:	95 1f       	adc	r25, r21
    23e6:	02 96       	adiw	r24, 0x02	; 2
    23e8:	e9 01       	movw	r28, r18
    23ea:	99 83       	std	Y+1, r25	; 0x01
    23ec:	88 83       	st	Y, r24
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	9b 83       	std	Y+3, r25	; 0x03
    23f4:	8a 83       	std	Y+2, r24	; 0x02
    23f6:	e0 e0       	ldi	r30, 0x00	; 0
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	12 96       	adiw	r26, 0x02	; 2
    23fc:	8d 91       	ld	r24, X+
    23fe:	9c 91       	ld	r25, X
    2400:	13 97       	sbiw	r26, 0x03	; 3
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	19 f0       	breq	.+6      	; 0x240c <free+0xd4>
    2406:	fd 01       	movw	r30, r26
    2408:	dc 01       	movw	r26, r24
    240a:	f7 cf       	rjmp	.-18     	; 0x23fa <free+0xc2>
    240c:	8d 91       	ld	r24, X+
    240e:	9c 91       	ld	r25, X
    2410:	11 97       	sbiw	r26, 0x01	; 1
    2412:	9d 01       	movw	r18, r26
    2414:	2e 5f       	subi	r18, 0xFE	; 254
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <__brkval>
    2420:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <__brkval+0x1>
    2424:	28 17       	cp	r18, r24
    2426:	39 07       	cpc	r19, r25
    2428:	69 f4       	brne	.+26     	; 0x2444 <free+0x10c>
    242a:	30 97       	sbiw	r30, 0x00	; 0
    242c:	29 f4       	brne	.+10     	; 0x2438 <free+0x100>
    242e:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <__flp+0x1>
    2432:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <__flp>
    2436:	02 c0       	rjmp	.+4      	; 0x243c <free+0x104>
    2438:	13 82       	std	Z+3, r1	; 0x03
    243a:	12 82       	std	Z+2, r1	; 0x02
    243c:	b0 93 f3 04 	sts	0x04F3, r27	; 0x8004f3 <__brkval+0x1>
    2440:	a0 93 f2 04 	sts	0x04F2, r26	; 0x8004f2 <__brkval>
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	08 95       	ret

0000244a <atoi>:
    244a:	fc 01       	movw	r30, r24
    244c:	88 27       	eor	r24, r24
    244e:	99 27       	eor	r25, r25
    2450:	e8 94       	clt
    2452:	21 91       	ld	r18, Z+
    2454:	20 32       	cpi	r18, 0x20	; 32
    2456:	e9 f3       	breq	.-6      	; 0x2452 <atoi+0x8>
    2458:	29 30       	cpi	r18, 0x09	; 9
    245a:	10 f0       	brcs	.+4      	; 0x2460 <atoi+0x16>
    245c:	2e 30       	cpi	r18, 0x0E	; 14
    245e:	c8 f3       	brcs	.-14     	; 0x2452 <atoi+0x8>
    2460:	2b 32       	cpi	r18, 0x2B	; 43
    2462:	41 f0       	breq	.+16     	; 0x2474 <atoi+0x2a>
    2464:	2d 32       	cpi	r18, 0x2D	; 45
    2466:	39 f4       	brne	.+14     	; 0x2476 <atoi+0x2c>
    2468:	68 94       	set
    246a:	04 c0       	rjmp	.+8      	; 0x2474 <atoi+0x2a>
    246c:	0e 94 b1 12 	call	0x2562	; 0x2562 <__mulhi_const_10>
    2470:	82 0f       	add	r24, r18
    2472:	91 1d       	adc	r25, r1
    2474:	21 91       	ld	r18, Z+
    2476:	20 53       	subi	r18, 0x30	; 48
    2478:	2a 30       	cpi	r18, 0x0A	; 10
    247a:	c0 f3       	brcs	.-16     	; 0x246c <atoi+0x22>
    247c:	1e f4       	brtc	.+6      	; 0x2484 <atoi+0x3a>
    247e:	90 95       	com	r25
    2480:	81 95       	neg	r24
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	08 95       	ret

00002486 <atol>:
    2486:	1f 93       	push	r17
    2488:	fc 01       	movw	r30, r24
    248a:	99 27       	eor	r25, r25
    248c:	88 27       	eor	r24, r24
    248e:	bc 01       	movw	r22, r24
    2490:	e8 94       	clt
    2492:	11 91       	ld	r17, Z+
    2494:	10 32       	cpi	r17, 0x20	; 32
    2496:	e9 f3       	breq	.-6      	; 0x2492 <atol+0xc>
    2498:	19 30       	cpi	r17, 0x09	; 9
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <atol+0x1a>
    249c:	1e 30       	cpi	r17, 0x0E	; 14
    249e:	c8 f3       	brcs	.-14     	; 0x2492 <atol+0xc>
    24a0:	1b 32       	cpi	r17, 0x2B	; 43
    24a2:	51 f0       	breq	.+20     	; 0x24b8 <atol+0x32>
    24a4:	1d 32       	cpi	r17, 0x2D	; 45
    24a6:	49 f4       	brne	.+18     	; 0x24ba <atol+0x34>
    24a8:	68 94       	set
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <atol+0x32>
    24ac:	0e 94 9c 12 	call	0x2538	; 0x2538 <__mulsi_const_10>
    24b0:	61 0f       	add	r22, r17
    24b2:	71 1d       	adc	r23, r1
    24b4:	81 1d       	adc	r24, r1
    24b6:	91 1d       	adc	r25, r1
    24b8:	11 91       	ld	r17, Z+
    24ba:	10 53       	subi	r17, 0x30	; 48
    24bc:	1a 30       	cpi	r17, 0x0A	; 10
    24be:	b0 f3       	brcs	.-20     	; 0x24ac <atol+0x26>
    24c0:	3e f4       	brtc	.+14     	; 0x24d0 <atol+0x4a>
    24c2:	90 95       	com	r25
    24c4:	80 95       	com	r24
    24c6:	70 95       	com	r23
    24c8:	61 95       	neg	r22
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	1f 91       	pop	r17
    24d2:	08 95       	ret

000024d4 <toupper>:
    24d4:	91 11       	cpse	r25, r1
    24d6:	08 95       	ret
    24d8:	81 56       	subi	r24, 0x61	; 97
    24da:	8a 51       	subi	r24, 0x1A	; 26
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <toupper+0xc>
    24de:	80 52       	subi	r24, 0x20	; 32
    24e0:	85 58       	subi	r24, 0x85	; 133
    24e2:	08 95       	ret

000024e4 <strcat>:
    24e4:	fb 01       	movw	r30, r22
    24e6:	dc 01       	movw	r26, r24
    24e8:	0d 90       	ld	r0, X+
    24ea:	00 20       	and	r0, r0
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <strcat+0x4>
    24ee:	11 97       	sbiw	r26, 0x01	; 1
    24f0:	01 90       	ld	r0, Z+
    24f2:	0d 92       	st	X+, r0
    24f4:	00 20       	and	r0, r0
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <strcat+0xc>
    24f8:	08 95       	ret

000024fa <strcpy>:
    24fa:	fb 01       	movw	r30, r22
    24fc:	dc 01       	movw	r26, r24
    24fe:	01 90       	ld	r0, Z+
    2500:	0d 92       	st	X+, r0
    2502:	00 20       	and	r0, r0
    2504:	e1 f7       	brne	.-8      	; 0x24fe <strcpy+0x4>
    2506:	08 95       	ret

00002508 <strlen>:
    2508:	fc 01       	movw	r30, r24
    250a:	01 90       	ld	r0, Z+
    250c:	00 20       	and	r0, r0
    250e:	e9 f7       	brne	.-6      	; 0x250a <strlen+0x2>
    2510:	80 95       	com	r24
    2512:	90 95       	com	r25
    2514:	8e 0f       	add	r24, r30
    2516:	9f 1f       	adc	r25, r31
    2518:	08 95       	ret

0000251a <strncpy>:
    251a:	fb 01       	movw	r30, r22
    251c:	dc 01       	movw	r26, r24
    251e:	41 50       	subi	r20, 0x01	; 1
    2520:	50 40       	sbci	r21, 0x00	; 0
    2522:	48 f0       	brcs	.+18     	; 0x2536 <strncpy+0x1c>
    2524:	01 90       	ld	r0, Z+
    2526:	0d 92       	st	X+, r0
    2528:	00 20       	and	r0, r0
    252a:	c9 f7       	brne	.-14     	; 0x251e <strncpy+0x4>
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <strncpy+0x16>
    252e:	1d 92       	st	X+, r1
    2530:	41 50       	subi	r20, 0x01	; 1
    2532:	50 40       	sbci	r21, 0x00	; 0
    2534:	e0 f7       	brcc	.-8      	; 0x252e <strncpy+0x14>
    2536:	08 95       	ret

00002538 <__mulsi_const_10>:
    2538:	59 2f       	mov	r21, r25
    253a:	48 2f       	mov	r20, r24
    253c:	37 2f       	mov	r19, r23
    253e:	26 2f       	mov	r18, r22
    2540:	66 0f       	add	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	88 1f       	adc	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	66 0f       	add	r22, r22
    254a:	77 1f       	adc	r23, r23
    254c:	88 1f       	adc	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	62 0f       	add	r22, r18
    2552:	73 1f       	adc	r23, r19
    2554:	84 1f       	adc	r24, r20
    2556:	95 1f       	adc	r25, r21
    2558:	66 0f       	add	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	88 1f       	adc	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	08 95       	ret

00002562 <__mulhi_const_10>:
    2562:	7a e0       	ldi	r23, 0x0A	; 10
    2564:	97 9f       	mul	r25, r23
    2566:	90 2d       	mov	r25, r0
    2568:	87 9f       	mul	r24, r23
    256a:	80 2d       	mov	r24, r0
    256c:	91 0d       	add	r25, r1
    256e:	11 24       	eor	r1, r1
    2570:	08 95       	ret

00002572 <sprintf>:
    2572:	ae e0       	ldi	r26, 0x0E	; 14
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef eb       	ldi	r30, 0xBF	; 191
    2578:	f2 e1       	ldi	r31, 0x12	; 18
    257a:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__prologue_saves__+0x1c>
    257e:	0d 89       	ldd	r16, Y+21	; 0x15
    2580:	1e 89       	ldd	r17, Y+22	; 0x16
    2582:	86 e0       	ldi	r24, 0x06	; 6
    2584:	8c 83       	std	Y+4, r24	; 0x04
    2586:	1a 83       	std	Y+2, r17	; 0x02
    2588:	09 83       	std	Y+1, r16	; 0x01
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	9f e7       	ldi	r25, 0x7F	; 127
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	ae 01       	movw	r20, r28
    2594:	47 5e       	subi	r20, 0xE7	; 231
    2596:	5f 4f       	sbci	r21, 0xFF	; 255
    2598:	6f 89       	ldd	r22, Y+23	; 0x17
    259a:	78 8d       	ldd	r23, Y+24	; 0x18
    259c:	ce 01       	movw	r24, r28
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <vfprintf>
    25a4:	ef 81       	ldd	r30, Y+7	; 0x07
    25a6:	f8 85       	ldd	r31, Y+8	; 0x08
    25a8:	e0 0f       	add	r30, r16
    25aa:	f1 1f       	adc	r31, r17
    25ac:	10 82       	st	Z, r1
    25ae:	2e 96       	adiw	r28, 0x0e	; 14
    25b0:	e4 e0       	ldi	r30, 0x04	; 4
    25b2:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__epilogue_restores__+0x1c>

000025b6 <vfprintf>:
    25b6:	ab e0       	ldi	r26, 0x0B	; 11
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e1 ee       	ldi	r30, 0xE1	; 225
    25bc:	f2 e1       	ldi	r31, 0x12	; 18
    25be:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__prologue_saves__>
    25c2:	6c 01       	movw	r12, r24
    25c4:	7b 01       	movw	r14, r22
    25c6:	8a 01       	movw	r16, r20
    25c8:	fc 01       	movw	r30, r24
    25ca:	17 82       	std	Z+7, r1	; 0x07
    25cc:	16 82       	std	Z+6, r1	; 0x06
    25ce:	83 81       	ldd	r24, Z+3	; 0x03
    25d0:	81 ff       	sbrs	r24, 1
    25d2:	cc c1       	rjmp	.+920    	; 0x296c <vfprintf+0x3b6>
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	3c 01       	movw	r6, r24
    25da:	f6 01       	movw	r30, r12
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	f7 01       	movw	r30, r14
    25e0:	93 fd       	sbrc	r25, 3
    25e2:	85 91       	lpm	r24, Z+
    25e4:	93 ff       	sbrs	r25, 3
    25e6:	81 91       	ld	r24, Z+
    25e8:	7f 01       	movw	r14, r30
    25ea:	88 23       	and	r24, r24
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <vfprintf+0x3a>
    25ee:	ba c1       	rjmp	.+884    	; 0x2964 <vfprintf+0x3ae>
    25f0:	85 32       	cpi	r24, 0x25	; 37
    25f2:	39 f4       	brne	.+14     	; 0x2602 <vfprintf+0x4c>
    25f4:	93 fd       	sbrc	r25, 3
    25f6:	85 91       	lpm	r24, Z+
    25f8:	93 ff       	sbrs	r25, 3
    25fa:	81 91       	ld	r24, Z+
    25fc:	7f 01       	movw	r14, r30
    25fe:	85 32       	cpi	r24, 0x25	; 37
    2600:	29 f4       	brne	.+10     	; 0x260c <vfprintf+0x56>
    2602:	b6 01       	movw	r22, r12
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    260a:	e7 cf       	rjmp	.-50     	; 0x25da <vfprintf+0x24>
    260c:	91 2c       	mov	r9, r1
    260e:	21 2c       	mov	r2, r1
    2610:	31 2c       	mov	r3, r1
    2612:	ff e1       	ldi	r31, 0x1F	; 31
    2614:	f3 15       	cp	r31, r3
    2616:	d8 f0       	brcs	.+54     	; 0x264e <vfprintf+0x98>
    2618:	8b 32       	cpi	r24, 0x2B	; 43
    261a:	79 f0       	breq	.+30     	; 0x263a <vfprintf+0x84>
    261c:	38 f4       	brcc	.+14     	; 0x262c <vfprintf+0x76>
    261e:	80 32       	cpi	r24, 0x20	; 32
    2620:	79 f0       	breq	.+30     	; 0x2640 <vfprintf+0x8a>
    2622:	83 32       	cpi	r24, 0x23	; 35
    2624:	a1 f4       	brne	.+40     	; 0x264e <vfprintf+0x98>
    2626:	23 2d       	mov	r18, r3
    2628:	20 61       	ori	r18, 0x10	; 16
    262a:	1d c0       	rjmp	.+58     	; 0x2666 <vfprintf+0xb0>
    262c:	8d 32       	cpi	r24, 0x2D	; 45
    262e:	61 f0       	breq	.+24     	; 0x2648 <vfprintf+0x92>
    2630:	80 33       	cpi	r24, 0x30	; 48
    2632:	69 f4       	brne	.+26     	; 0x264e <vfprintf+0x98>
    2634:	23 2d       	mov	r18, r3
    2636:	21 60       	ori	r18, 0x01	; 1
    2638:	16 c0       	rjmp	.+44     	; 0x2666 <vfprintf+0xb0>
    263a:	83 2d       	mov	r24, r3
    263c:	82 60       	ori	r24, 0x02	; 2
    263e:	38 2e       	mov	r3, r24
    2640:	e3 2d       	mov	r30, r3
    2642:	e4 60       	ori	r30, 0x04	; 4
    2644:	3e 2e       	mov	r3, r30
    2646:	2a c0       	rjmp	.+84     	; 0x269c <vfprintf+0xe6>
    2648:	f3 2d       	mov	r31, r3
    264a:	f8 60       	ori	r31, 0x08	; 8
    264c:	1d c0       	rjmp	.+58     	; 0x2688 <vfprintf+0xd2>
    264e:	37 fc       	sbrc	r3, 7
    2650:	2d c0       	rjmp	.+90     	; 0x26ac <vfprintf+0xf6>
    2652:	20 ed       	ldi	r18, 0xD0	; 208
    2654:	28 0f       	add	r18, r24
    2656:	2a 30       	cpi	r18, 0x0A	; 10
    2658:	40 f0       	brcs	.+16     	; 0x266a <vfprintf+0xb4>
    265a:	8e 32       	cpi	r24, 0x2E	; 46
    265c:	b9 f4       	brne	.+46     	; 0x268c <vfprintf+0xd6>
    265e:	36 fc       	sbrc	r3, 6
    2660:	81 c1       	rjmp	.+770    	; 0x2964 <vfprintf+0x3ae>
    2662:	23 2d       	mov	r18, r3
    2664:	20 64       	ori	r18, 0x40	; 64
    2666:	32 2e       	mov	r3, r18
    2668:	19 c0       	rjmp	.+50     	; 0x269c <vfprintf+0xe6>
    266a:	36 fe       	sbrs	r3, 6
    266c:	06 c0       	rjmp	.+12     	; 0x267a <vfprintf+0xc4>
    266e:	8a e0       	ldi	r24, 0x0A	; 10
    2670:	98 9e       	mul	r9, r24
    2672:	20 0d       	add	r18, r0
    2674:	11 24       	eor	r1, r1
    2676:	92 2e       	mov	r9, r18
    2678:	11 c0       	rjmp	.+34     	; 0x269c <vfprintf+0xe6>
    267a:	ea e0       	ldi	r30, 0x0A	; 10
    267c:	2e 9e       	mul	r2, r30
    267e:	20 0d       	add	r18, r0
    2680:	11 24       	eor	r1, r1
    2682:	22 2e       	mov	r2, r18
    2684:	f3 2d       	mov	r31, r3
    2686:	f0 62       	ori	r31, 0x20	; 32
    2688:	3f 2e       	mov	r3, r31
    268a:	08 c0       	rjmp	.+16     	; 0x269c <vfprintf+0xe6>
    268c:	8c 36       	cpi	r24, 0x6C	; 108
    268e:	21 f4       	brne	.+8      	; 0x2698 <vfprintf+0xe2>
    2690:	83 2d       	mov	r24, r3
    2692:	80 68       	ori	r24, 0x80	; 128
    2694:	38 2e       	mov	r3, r24
    2696:	02 c0       	rjmp	.+4      	; 0x269c <vfprintf+0xe6>
    2698:	88 36       	cpi	r24, 0x68	; 104
    269a:	41 f4       	brne	.+16     	; 0x26ac <vfprintf+0xf6>
    269c:	f7 01       	movw	r30, r14
    269e:	93 fd       	sbrc	r25, 3
    26a0:	85 91       	lpm	r24, Z+
    26a2:	93 ff       	sbrs	r25, 3
    26a4:	81 91       	ld	r24, Z+
    26a6:	7f 01       	movw	r14, r30
    26a8:	81 11       	cpse	r24, r1
    26aa:	b3 cf       	rjmp	.-154    	; 0x2612 <vfprintf+0x5c>
    26ac:	98 2f       	mov	r25, r24
    26ae:	9f 7d       	andi	r25, 0xDF	; 223
    26b0:	95 54       	subi	r25, 0x45	; 69
    26b2:	93 30       	cpi	r25, 0x03	; 3
    26b4:	28 f4       	brcc	.+10     	; 0x26c0 <vfprintf+0x10a>
    26b6:	0c 5f       	subi	r16, 0xFC	; 252
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	9f e3       	ldi	r25, 0x3F	; 63
    26bc:	99 83       	std	Y+1, r25	; 0x01
    26be:	0d c0       	rjmp	.+26     	; 0x26da <vfprintf+0x124>
    26c0:	83 36       	cpi	r24, 0x63	; 99
    26c2:	31 f0       	breq	.+12     	; 0x26d0 <vfprintf+0x11a>
    26c4:	83 37       	cpi	r24, 0x73	; 115
    26c6:	71 f0       	breq	.+28     	; 0x26e4 <vfprintf+0x12e>
    26c8:	83 35       	cpi	r24, 0x53	; 83
    26ca:	09 f0       	breq	.+2      	; 0x26ce <vfprintf+0x118>
    26cc:	59 c0       	rjmp	.+178    	; 0x2780 <vfprintf+0x1ca>
    26ce:	21 c0       	rjmp	.+66     	; 0x2712 <vfprintf+0x15c>
    26d0:	f8 01       	movw	r30, r16
    26d2:	80 81       	ld	r24, Z
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	0e 5f       	subi	r16, 0xFE	; 254
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	88 24       	eor	r8, r8
    26dc:	83 94       	inc	r8
    26de:	91 2c       	mov	r9, r1
    26e0:	53 01       	movw	r10, r6
    26e2:	13 c0       	rjmp	.+38     	; 0x270a <vfprintf+0x154>
    26e4:	28 01       	movw	r4, r16
    26e6:	f2 e0       	ldi	r31, 0x02	; 2
    26e8:	4f 0e       	add	r4, r31
    26ea:	51 1c       	adc	r5, r1
    26ec:	f8 01       	movw	r30, r16
    26ee:	a0 80       	ld	r10, Z
    26f0:	b1 80       	ldd	r11, Z+1	; 0x01
    26f2:	36 fe       	sbrs	r3, 6
    26f4:	03 c0       	rjmp	.+6      	; 0x26fc <vfprintf+0x146>
    26f6:	69 2d       	mov	r22, r9
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x14a>
    26fc:	6f ef       	ldi	r22, 0xFF	; 255
    26fe:	7f ef       	ldi	r23, 0xFF	; 255
    2700:	c5 01       	movw	r24, r10
    2702:	0e 94 c7 14 	call	0x298e	; 0x298e <strnlen>
    2706:	4c 01       	movw	r8, r24
    2708:	82 01       	movw	r16, r4
    270a:	f3 2d       	mov	r31, r3
    270c:	ff 77       	andi	r31, 0x7F	; 127
    270e:	3f 2e       	mov	r3, r31
    2710:	16 c0       	rjmp	.+44     	; 0x273e <vfprintf+0x188>
    2712:	28 01       	movw	r4, r16
    2714:	22 e0       	ldi	r18, 0x02	; 2
    2716:	42 0e       	add	r4, r18
    2718:	51 1c       	adc	r5, r1
    271a:	f8 01       	movw	r30, r16
    271c:	a0 80       	ld	r10, Z
    271e:	b1 80       	ldd	r11, Z+1	; 0x01
    2720:	36 fe       	sbrs	r3, 6
    2722:	03 c0       	rjmp	.+6      	; 0x272a <vfprintf+0x174>
    2724:	69 2d       	mov	r22, r9
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	02 c0       	rjmp	.+4      	; 0x272e <vfprintf+0x178>
    272a:	6f ef       	ldi	r22, 0xFF	; 255
    272c:	7f ef       	ldi	r23, 0xFF	; 255
    272e:	c5 01       	movw	r24, r10
    2730:	0e 94 bc 14 	call	0x2978	; 0x2978 <strnlen_P>
    2734:	4c 01       	movw	r8, r24
    2736:	f3 2d       	mov	r31, r3
    2738:	f0 68       	ori	r31, 0x80	; 128
    273a:	3f 2e       	mov	r3, r31
    273c:	82 01       	movw	r16, r4
    273e:	33 fc       	sbrc	r3, 3
    2740:	1b c0       	rjmp	.+54     	; 0x2778 <vfprintf+0x1c2>
    2742:	82 2d       	mov	r24, r2
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	88 16       	cp	r8, r24
    2748:	99 06       	cpc	r9, r25
    274a:	b0 f4       	brcc	.+44     	; 0x2778 <vfprintf+0x1c2>
    274c:	b6 01       	movw	r22, r12
    274e:	80 e2       	ldi	r24, 0x20	; 32
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    2756:	2a 94       	dec	r2
    2758:	f4 cf       	rjmp	.-24     	; 0x2742 <vfprintf+0x18c>
    275a:	f5 01       	movw	r30, r10
    275c:	37 fc       	sbrc	r3, 7
    275e:	85 91       	lpm	r24, Z+
    2760:	37 fe       	sbrs	r3, 7
    2762:	81 91       	ld	r24, Z+
    2764:	5f 01       	movw	r10, r30
    2766:	b6 01       	movw	r22, r12
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    276e:	21 10       	cpse	r2, r1
    2770:	2a 94       	dec	r2
    2772:	21 e0       	ldi	r18, 0x01	; 1
    2774:	82 1a       	sub	r8, r18
    2776:	91 08       	sbc	r9, r1
    2778:	81 14       	cp	r8, r1
    277a:	91 04       	cpc	r9, r1
    277c:	71 f7       	brne	.-36     	; 0x275a <vfprintf+0x1a4>
    277e:	e8 c0       	rjmp	.+464    	; 0x2950 <vfprintf+0x39a>
    2780:	84 36       	cpi	r24, 0x64	; 100
    2782:	11 f0       	breq	.+4      	; 0x2788 <vfprintf+0x1d2>
    2784:	89 36       	cpi	r24, 0x69	; 105
    2786:	41 f5       	brne	.+80     	; 0x27d8 <vfprintf+0x222>
    2788:	f8 01       	movw	r30, r16
    278a:	37 fe       	sbrs	r3, 7
    278c:	07 c0       	rjmp	.+14     	; 0x279c <vfprintf+0x1e6>
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	0c 5f       	subi	r16, 0xFC	; 252
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	08 c0       	rjmp	.+16     	; 0x27ac <vfprintf+0x1f6>
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	07 2e       	mov	r0, r23
    27a2:	00 0c       	add	r0, r0
    27a4:	88 0b       	sbc	r24, r24
    27a6:	99 0b       	sbc	r25, r25
    27a8:	0e 5f       	subi	r16, 0xFE	; 254
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	f3 2d       	mov	r31, r3
    27ae:	ff 76       	andi	r31, 0x6F	; 111
    27b0:	3f 2e       	mov	r3, r31
    27b2:	97 ff       	sbrs	r25, 7
    27b4:	09 c0       	rjmp	.+18     	; 0x27c8 <vfprintf+0x212>
    27b6:	90 95       	com	r25
    27b8:	80 95       	com	r24
    27ba:	70 95       	com	r23
    27bc:	61 95       	neg	r22
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	8f 4f       	sbci	r24, 0xFF	; 255
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	f0 68       	ori	r31, 0x80	; 128
    27c6:	3f 2e       	mov	r3, r31
    27c8:	2a e0       	ldi	r18, 0x0A	; 10
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	a3 01       	movw	r20, r6
    27ce:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__ultoa_invert>
    27d2:	88 2e       	mov	r8, r24
    27d4:	86 18       	sub	r8, r6
    27d6:	45 c0       	rjmp	.+138    	; 0x2862 <vfprintf+0x2ac>
    27d8:	85 37       	cpi	r24, 0x75	; 117
    27da:	31 f4       	brne	.+12     	; 0x27e8 <vfprintf+0x232>
    27dc:	23 2d       	mov	r18, r3
    27de:	2f 7e       	andi	r18, 0xEF	; 239
    27e0:	b2 2e       	mov	r11, r18
    27e2:	2a e0       	ldi	r18, 0x0A	; 10
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	25 c0       	rjmp	.+74     	; 0x2832 <vfprintf+0x27c>
    27e8:	93 2d       	mov	r25, r3
    27ea:	99 7f       	andi	r25, 0xF9	; 249
    27ec:	b9 2e       	mov	r11, r25
    27ee:	8f 36       	cpi	r24, 0x6F	; 111
    27f0:	c1 f0       	breq	.+48     	; 0x2822 <vfprintf+0x26c>
    27f2:	18 f4       	brcc	.+6      	; 0x27fa <vfprintf+0x244>
    27f4:	88 35       	cpi	r24, 0x58	; 88
    27f6:	79 f0       	breq	.+30     	; 0x2816 <vfprintf+0x260>
    27f8:	b5 c0       	rjmp	.+362    	; 0x2964 <vfprintf+0x3ae>
    27fa:	80 37       	cpi	r24, 0x70	; 112
    27fc:	19 f0       	breq	.+6      	; 0x2804 <vfprintf+0x24e>
    27fe:	88 37       	cpi	r24, 0x78	; 120
    2800:	21 f0       	breq	.+8      	; 0x280a <vfprintf+0x254>
    2802:	b0 c0       	rjmp	.+352    	; 0x2964 <vfprintf+0x3ae>
    2804:	e9 2f       	mov	r30, r25
    2806:	e0 61       	ori	r30, 0x10	; 16
    2808:	be 2e       	mov	r11, r30
    280a:	b4 fe       	sbrs	r11, 4
    280c:	0d c0       	rjmp	.+26     	; 0x2828 <vfprintf+0x272>
    280e:	fb 2d       	mov	r31, r11
    2810:	f4 60       	ori	r31, 0x04	; 4
    2812:	bf 2e       	mov	r11, r31
    2814:	09 c0       	rjmp	.+18     	; 0x2828 <vfprintf+0x272>
    2816:	34 fe       	sbrs	r3, 4
    2818:	0a c0       	rjmp	.+20     	; 0x282e <vfprintf+0x278>
    281a:	29 2f       	mov	r18, r25
    281c:	26 60       	ori	r18, 0x06	; 6
    281e:	b2 2e       	mov	r11, r18
    2820:	06 c0       	rjmp	.+12     	; 0x282e <vfprintf+0x278>
    2822:	28 e0       	ldi	r18, 0x08	; 8
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <vfprintf+0x27c>
    2828:	20 e1       	ldi	r18, 0x10	; 16
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <vfprintf+0x27c>
    282e:	20 e1       	ldi	r18, 0x10	; 16
    2830:	32 e0       	ldi	r19, 0x02	; 2
    2832:	f8 01       	movw	r30, r16
    2834:	b7 fe       	sbrs	r11, 7
    2836:	07 c0       	rjmp	.+14     	; 0x2846 <vfprintf+0x290>
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	0c 5f       	subi	r16, 0xFC	; 252
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	06 c0       	rjmp	.+12     	; 0x2852 <vfprintf+0x29c>
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 5f       	subi	r16, 0xFE	; 254
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	a3 01       	movw	r20, r6
    2854:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__ultoa_invert>
    2858:	88 2e       	mov	r8, r24
    285a:	86 18       	sub	r8, r6
    285c:	fb 2d       	mov	r31, r11
    285e:	ff 77       	andi	r31, 0x7F	; 127
    2860:	3f 2e       	mov	r3, r31
    2862:	36 fe       	sbrs	r3, 6
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <vfprintf+0x2ca>
    2866:	23 2d       	mov	r18, r3
    2868:	2e 7f       	andi	r18, 0xFE	; 254
    286a:	a2 2e       	mov	r10, r18
    286c:	89 14       	cp	r8, r9
    286e:	58 f4       	brcc	.+22     	; 0x2886 <vfprintf+0x2d0>
    2870:	34 fe       	sbrs	r3, 4
    2872:	0b c0       	rjmp	.+22     	; 0x288a <vfprintf+0x2d4>
    2874:	32 fc       	sbrc	r3, 2
    2876:	09 c0       	rjmp	.+18     	; 0x288a <vfprintf+0x2d4>
    2878:	83 2d       	mov	r24, r3
    287a:	8e 7e       	andi	r24, 0xEE	; 238
    287c:	a8 2e       	mov	r10, r24
    287e:	05 c0       	rjmp	.+10     	; 0x288a <vfprintf+0x2d4>
    2880:	b8 2c       	mov	r11, r8
    2882:	a3 2c       	mov	r10, r3
    2884:	03 c0       	rjmp	.+6      	; 0x288c <vfprintf+0x2d6>
    2886:	b8 2c       	mov	r11, r8
    2888:	01 c0       	rjmp	.+2      	; 0x288c <vfprintf+0x2d6>
    288a:	b9 2c       	mov	r11, r9
    288c:	a4 fe       	sbrs	r10, 4
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <vfprintf+0x2f8>
    2890:	fe 01       	movw	r30, r28
    2892:	e8 0d       	add	r30, r8
    2894:	f1 1d       	adc	r31, r1
    2896:	80 81       	ld	r24, Z
    2898:	80 33       	cpi	r24, 0x30	; 48
    289a:	21 f4       	brne	.+8      	; 0x28a4 <vfprintf+0x2ee>
    289c:	9a 2d       	mov	r25, r10
    289e:	99 7e       	andi	r25, 0xE9	; 233
    28a0:	a9 2e       	mov	r10, r25
    28a2:	09 c0       	rjmp	.+18     	; 0x28b6 <vfprintf+0x300>
    28a4:	a2 fe       	sbrs	r10, 2
    28a6:	06 c0       	rjmp	.+12     	; 0x28b4 <vfprintf+0x2fe>
    28a8:	b3 94       	inc	r11
    28aa:	b3 94       	inc	r11
    28ac:	04 c0       	rjmp	.+8      	; 0x28b6 <vfprintf+0x300>
    28ae:	8a 2d       	mov	r24, r10
    28b0:	86 78       	andi	r24, 0x86	; 134
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <vfprintf+0x300>
    28b4:	b3 94       	inc	r11
    28b6:	a3 fc       	sbrc	r10, 3
    28b8:	11 c0       	rjmp	.+34     	; 0x28dc <vfprintf+0x326>
    28ba:	a0 fe       	sbrs	r10, 0
    28bc:	06 c0       	rjmp	.+12     	; 0x28ca <vfprintf+0x314>
    28be:	b2 14       	cp	r11, r2
    28c0:	88 f4       	brcc	.+34     	; 0x28e4 <vfprintf+0x32e>
    28c2:	28 0c       	add	r2, r8
    28c4:	92 2c       	mov	r9, r2
    28c6:	9b 18       	sub	r9, r11
    28c8:	0e c0       	rjmp	.+28     	; 0x28e6 <vfprintf+0x330>
    28ca:	b2 14       	cp	r11, r2
    28cc:	60 f4       	brcc	.+24     	; 0x28e6 <vfprintf+0x330>
    28ce:	b6 01       	movw	r22, r12
    28d0:	80 e2       	ldi	r24, 0x20	; 32
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    28d8:	b3 94       	inc	r11
    28da:	f7 cf       	rjmp	.-18     	; 0x28ca <vfprintf+0x314>
    28dc:	b2 14       	cp	r11, r2
    28de:	18 f4       	brcc	.+6      	; 0x28e6 <vfprintf+0x330>
    28e0:	2b 18       	sub	r2, r11
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <vfprintf+0x332>
    28e4:	98 2c       	mov	r9, r8
    28e6:	21 2c       	mov	r2, r1
    28e8:	a4 fe       	sbrs	r10, 4
    28ea:	10 c0       	rjmp	.+32     	; 0x290c <vfprintf+0x356>
    28ec:	b6 01       	movw	r22, r12
    28ee:	80 e3       	ldi	r24, 0x30	; 48
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    28f6:	a2 fe       	sbrs	r10, 2
    28f8:	17 c0       	rjmp	.+46     	; 0x2928 <vfprintf+0x372>
    28fa:	a1 fc       	sbrc	r10, 1
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <vfprintf+0x34e>
    28fe:	88 e7       	ldi	r24, 0x78	; 120
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <vfprintf+0x352>
    2904:	88 e5       	ldi	r24, 0x58	; 88
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	b6 01       	movw	r22, r12
    290a:	0c c0       	rjmp	.+24     	; 0x2924 <vfprintf+0x36e>
    290c:	8a 2d       	mov	r24, r10
    290e:	86 78       	andi	r24, 0x86	; 134
    2910:	59 f0       	breq	.+22     	; 0x2928 <vfprintf+0x372>
    2912:	a1 fe       	sbrs	r10, 1
    2914:	02 c0       	rjmp	.+4      	; 0x291a <vfprintf+0x364>
    2916:	8b e2       	ldi	r24, 0x2B	; 43
    2918:	01 c0       	rjmp	.+2      	; 0x291c <vfprintf+0x366>
    291a:	80 e2       	ldi	r24, 0x20	; 32
    291c:	a7 fc       	sbrc	r10, 7
    291e:	8d e2       	ldi	r24, 0x2D	; 45
    2920:	b6 01       	movw	r22, r12
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    2928:	89 14       	cp	r8, r9
    292a:	38 f4       	brcc	.+14     	; 0x293a <vfprintf+0x384>
    292c:	b6 01       	movw	r22, r12
    292e:	80 e3       	ldi	r24, 0x30	; 48
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    2936:	9a 94       	dec	r9
    2938:	f7 cf       	rjmp	.-18     	; 0x2928 <vfprintf+0x372>
    293a:	8a 94       	dec	r8
    293c:	f3 01       	movw	r30, r6
    293e:	e8 0d       	add	r30, r8
    2940:	f1 1d       	adc	r31, r1
    2942:	80 81       	ld	r24, Z
    2944:	b6 01       	movw	r22, r12
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    294c:	81 10       	cpse	r8, r1
    294e:	f5 cf       	rjmp	.-22     	; 0x293a <vfprintf+0x384>
    2950:	22 20       	and	r2, r2
    2952:	09 f4       	brne	.+2      	; 0x2956 <vfprintf+0x3a0>
    2954:	42 ce       	rjmp	.-892    	; 0x25da <vfprintf+0x24>
    2956:	b6 01       	movw	r22, r12
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <fputc>
    2960:	2a 94       	dec	r2
    2962:	f6 cf       	rjmp	.-20     	; 0x2950 <vfprintf+0x39a>
    2964:	f6 01       	movw	r30, r12
    2966:	86 81       	ldd	r24, Z+6	; 0x06
    2968:	97 81       	ldd	r25, Z+7	; 0x07
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <vfprintf+0x3ba>
    296c:	8f ef       	ldi	r24, 0xFF	; 255
    296e:	9f ef       	ldi	r25, 0xFF	; 255
    2970:	2b 96       	adiw	r28, 0x0b	; 11
    2972:	e2 e1       	ldi	r30, 0x12	; 18
    2974:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__epilogue_restores__>

00002978 <strnlen_P>:
    2978:	fc 01       	movw	r30, r24
    297a:	05 90       	lpm	r0, Z+
    297c:	61 50       	subi	r22, 0x01	; 1
    297e:	70 40       	sbci	r23, 0x00	; 0
    2980:	01 10       	cpse	r0, r1
    2982:	d8 f7       	brcc	.-10     	; 0x297a <strnlen_P+0x2>
    2984:	80 95       	com	r24
    2986:	90 95       	com	r25
    2988:	8e 0f       	add	r24, r30
    298a:	9f 1f       	adc	r25, r31
    298c:	08 95       	ret

0000298e <strnlen>:
    298e:	fc 01       	movw	r30, r24
    2990:	61 50       	subi	r22, 0x01	; 1
    2992:	70 40       	sbci	r23, 0x00	; 0
    2994:	01 90       	ld	r0, Z+
    2996:	01 10       	cpse	r0, r1
    2998:	d8 f7       	brcc	.-10     	; 0x2990 <strnlen+0x2>
    299a:	80 95       	com	r24
    299c:	90 95       	com	r25
    299e:	8e 0f       	add	r24, r30
    29a0:	9f 1f       	adc	r25, r31
    29a2:	08 95       	ret

000029a4 <fputc>:
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	fb 01       	movw	r30, r22
    29ae:	23 81       	ldd	r18, Z+3	; 0x03
    29b0:	21 fd       	sbrc	r18, 1
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <fputc+0x16>
    29b4:	8f ef       	ldi	r24, 0xFF	; 255
    29b6:	9f ef       	ldi	r25, 0xFF	; 255
    29b8:	2c c0       	rjmp	.+88     	; 0x2a12 <fputc+0x6e>
    29ba:	22 ff       	sbrs	r18, 2
    29bc:	16 c0       	rjmp	.+44     	; 0x29ea <fputc+0x46>
    29be:	46 81       	ldd	r20, Z+6	; 0x06
    29c0:	57 81       	ldd	r21, Z+7	; 0x07
    29c2:	24 81       	ldd	r18, Z+4	; 0x04
    29c4:	35 81       	ldd	r19, Z+5	; 0x05
    29c6:	42 17       	cp	r20, r18
    29c8:	53 07       	cpc	r21, r19
    29ca:	44 f4       	brge	.+16     	; 0x29dc <fputc+0x38>
    29cc:	a0 81       	ld	r26, Z
    29ce:	b1 81       	ldd	r27, Z+1	; 0x01
    29d0:	9d 01       	movw	r18, r26
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	31 83       	std	Z+1, r19	; 0x01
    29d8:	20 83       	st	Z, r18
    29da:	8c 93       	st	X, r24
    29dc:	26 81       	ldd	r18, Z+6	; 0x06
    29de:	37 81       	ldd	r19, Z+7	; 0x07
    29e0:	2f 5f       	subi	r18, 0xFF	; 255
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	37 83       	std	Z+7, r19	; 0x07
    29e6:	26 83       	std	Z+6, r18	; 0x06
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <fputc+0x6e>
    29ea:	8b 01       	movw	r16, r22
    29ec:	ec 01       	movw	r28, r24
    29ee:	fb 01       	movw	r30, r22
    29f0:	00 84       	ldd	r0, Z+8	; 0x08
    29f2:	f1 85       	ldd	r31, Z+9	; 0x09
    29f4:	e0 2d       	mov	r30, r0
    29f6:	09 95       	icall
    29f8:	89 2b       	or	r24, r25
    29fa:	e1 f6       	brne	.-72     	; 0x29b4 <fputc+0x10>
    29fc:	d8 01       	movw	r26, r16
    29fe:	16 96       	adiw	r26, 0x06	; 6
    2a00:	8d 91       	ld	r24, X+
    2a02:	9c 91       	ld	r25, X
    2a04:	17 97       	sbiw	r26, 0x07	; 7
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	17 96       	adiw	r26, 0x07	; 7
    2a0a:	9c 93       	st	X, r25
    2a0c:	8e 93       	st	-X, r24
    2a0e:	16 97       	sbiw	r26, 0x06	; 6
    2a10:	ce 01       	movw	r24, r28
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	08 95       	ret

00002a1c <__ultoa_invert>:
    2a1c:	fa 01       	movw	r30, r20
    2a1e:	aa 27       	eor	r26, r26
    2a20:	28 30       	cpi	r18, 0x08	; 8
    2a22:	51 f1       	breq	.+84     	; 0x2a78 <__ultoa_invert+0x5c>
    2a24:	20 31       	cpi	r18, 0x10	; 16
    2a26:	81 f1       	breq	.+96     	; 0x2a88 <__ultoa_invert+0x6c>
    2a28:	e8 94       	clt
    2a2a:	6f 93       	push	r22
    2a2c:	6e 7f       	andi	r22, 0xFE	; 254
    2a2e:	6e 5f       	subi	r22, 0xFE	; 254
    2a30:	7f 4f       	sbci	r23, 0xFF	; 255
    2a32:	8f 4f       	sbci	r24, 0xFF	; 255
    2a34:	9f 4f       	sbci	r25, 0xFF	; 255
    2a36:	af 4f       	sbci	r26, 0xFF	; 255
    2a38:	b1 e0       	ldi	r27, 0x01	; 1
    2a3a:	3e d0       	rcall	.+124    	; 0x2ab8 <__ultoa_invert+0x9c>
    2a3c:	b4 e0       	ldi	r27, 0x04	; 4
    2a3e:	3c d0       	rcall	.+120    	; 0x2ab8 <__ultoa_invert+0x9c>
    2a40:	67 0f       	add	r22, r23
    2a42:	78 1f       	adc	r23, r24
    2a44:	89 1f       	adc	r24, r25
    2a46:	9a 1f       	adc	r25, r26
    2a48:	a1 1d       	adc	r26, r1
    2a4a:	68 0f       	add	r22, r24
    2a4c:	79 1f       	adc	r23, r25
    2a4e:	8a 1f       	adc	r24, r26
    2a50:	91 1d       	adc	r25, r1
    2a52:	a1 1d       	adc	r26, r1
    2a54:	6a 0f       	add	r22, r26
    2a56:	71 1d       	adc	r23, r1
    2a58:	81 1d       	adc	r24, r1
    2a5a:	91 1d       	adc	r25, r1
    2a5c:	a1 1d       	adc	r26, r1
    2a5e:	20 d0       	rcall	.+64     	; 0x2aa0 <__ultoa_invert+0x84>
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <__ultoa_invert+0x48>
    2a62:	68 94       	set
    2a64:	3f 91       	pop	r19
    2a66:	2a e0       	ldi	r18, 0x0A	; 10
    2a68:	26 9f       	mul	r18, r22
    2a6a:	11 24       	eor	r1, r1
    2a6c:	30 19       	sub	r19, r0
    2a6e:	30 5d       	subi	r19, 0xD0	; 208
    2a70:	31 93       	st	Z+, r19
    2a72:	de f6       	brtc	.-74     	; 0x2a2a <__ultoa_invert+0xe>
    2a74:	cf 01       	movw	r24, r30
    2a76:	08 95       	ret
    2a78:	46 2f       	mov	r20, r22
    2a7a:	47 70       	andi	r20, 0x07	; 7
    2a7c:	40 5d       	subi	r20, 0xD0	; 208
    2a7e:	41 93       	st	Z+, r20
    2a80:	b3 e0       	ldi	r27, 0x03	; 3
    2a82:	0f d0       	rcall	.+30     	; 0x2aa2 <__ultoa_invert+0x86>
    2a84:	c9 f7       	brne	.-14     	; 0x2a78 <__ultoa_invert+0x5c>
    2a86:	f6 cf       	rjmp	.-20     	; 0x2a74 <__ultoa_invert+0x58>
    2a88:	46 2f       	mov	r20, r22
    2a8a:	4f 70       	andi	r20, 0x0F	; 15
    2a8c:	40 5d       	subi	r20, 0xD0	; 208
    2a8e:	4a 33       	cpi	r20, 0x3A	; 58
    2a90:	18 f0       	brcs	.+6      	; 0x2a98 <__ultoa_invert+0x7c>
    2a92:	49 5d       	subi	r20, 0xD9	; 217
    2a94:	31 fd       	sbrc	r19, 1
    2a96:	40 52       	subi	r20, 0x20	; 32
    2a98:	41 93       	st	Z+, r20
    2a9a:	02 d0       	rcall	.+4      	; 0x2aa0 <__ultoa_invert+0x84>
    2a9c:	a9 f7       	brne	.-22     	; 0x2a88 <__ultoa_invert+0x6c>
    2a9e:	ea cf       	rjmp	.-44     	; 0x2a74 <__ultoa_invert+0x58>
    2aa0:	b4 e0       	ldi	r27, 0x04	; 4
    2aa2:	a6 95       	lsr	r26
    2aa4:	97 95       	ror	r25
    2aa6:	87 95       	ror	r24
    2aa8:	77 95       	ror	r23
    2aaa:	67 95       	ror	r22
    2aac:	ba 95       	dec	r27
    2aae:	c9 f7       	brne	.-14     	; 0x2aa2 <__ultoa_invert+0x86>
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	61 05       	cpc	r22, r1
    2ab4:	71 05       	cpc	r23, r1
    2ab6:	08 95       	ret
    2ab8:	9b 01       	movw	r18, r22
    2aba:	ac 01       	movw	r20, r24
    2abc:	0a 2e       	mov	r0, r26
    2abe:	06 94       	lsr	r0
    2ac0:	57 95       	ror	r21
    2ac2:	47 95       	ror	r20
    2ac4:	37 95       	ror	r19
    2ac6:	27 95       	ror	r18
    2ac8:	ba 95       	dec	r27
    2aca:	c9 f7       	brne	.-14     	; 0x2abe <__ultoa_invert+0xa2>
    2acc:	62 0f       	add	r22, r18
    2ace:	73 1f       	adc	r23, r19
    2ad0:	84 1f       	adc	r24, r20
    2ad2:	95 1f       	adc	r25, r21
    2ad4:	a0 1d       	adc	r26, r0
    2ad6:	08 95       	ret

00002ad8 <eeprom_read_byte>:
    2ad8:	f9 99       	sbic	0x1f, 1	; 31
    2ada:	fe cf       	rjmp	.-4      	; 0x2ad8 <eeprom_read_byte>
    2adc:	92 bd       	out	0x22, r25	; 34
    2ade:	81 bd       	out	0x21, r24	; 33
    2ae0:	f8 9a       	sbi	0x1f, 0	; 31
    2ae2:	99 27       	eor	r25, r25
    2ae4:	80 b5       	in	r24, 0x20	; 32
    2ae6:	08 95       	ret

00002ae8 <eeprom_read_word>:
    2ae8:	a8 e1       	ldi	r26, 0x18	; 24
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	42 e0       	ldi	r20, 0x02	; 2
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <eeprom_read_blraw>

00002af4 <eeprom_update_byte>:
    2af4:	26 2f       	mov	r18, r22

00002af6 <eeprom_update_r18>:
    2af6:	f9 99       	sbic	0x1f, 1	; 31
    2af8:	fe cf       	rjmp	.-4      	; 0x2af6 <eeprom_update_r18>
    2afa:	92 bd       	out	0x22, r25	; 34
    2afc:	81 bd       	out	0x21, r24	; 33
    2afe:	f8 9a       	sbi	0x1f, 0	; 31
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	00 b4       	in	r0, 0x20	; 32
    2b04:	02 16       	cp	r0, r18
    2b06:	39 f0       	breq	.+14     	; 0x2b16 <eeprom_update_r18+0x20>
    2b08:	1f ba       	out	0x1f, r1	; 31
    2b0a:	20 bd       	out	0x20, r18	; 32
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	fa 9a       	sbi	0x1f, 2	; 31
    2b12:	f9 9a       	sbi	0x1f, 1	; 31
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	08 95       	ret

00002b18 <eeprom_update_word>:
    2b18:	01 96       	adiw	r24, 0x01	; 1
    2b1a:	27 2f       	mov	r18, r23
    2b1c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <eeprom_update_r18>
    2b20:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <eeprom_update_byte>

00002b24 <eeprom_write_byte>:
    2b24:	26 2f       	mov	r18, r22

00002b26 <eeprom_write_r18>:
    2b26:	f9 99       	sbic	0x1f, 1	; 31
    2b28:	fe cf       	rjmp	.-4      	; 0x2b26 <eeprom_write_r18>
    2b2a:	1f ba       	out	0x1f, r1	; 31
    2b2c:	92 bd       	out	0x22, r25	; 34
    2b2e:	81 bd       	out	0x21, r24	; 33
    2b30:	20 bd       	out	0x20, r18	; 32
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	fa 9a       	sbi	0x1f, 2	; 31
    2b38:	f9 9a       	sbi	0x1f, 1	; 31
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	01 96       	adiw	r24, 0x01	; 1
    2b3e:	08 95       	ret

00002b40 <eeprom_read_block>:
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22

00002b44 <eeprom_read_blraw>:
    2b44:	fc 01       	movw	r30, r24
    2b46:	f9 99       	sbic	0x1f, 1	; 31
    2b48:	fe cf       	rjmp	.-4      	; 0x2b46 <eeprom_read_blraw+0x2>
    2b4a:	06 c0       	rjmp	.+12     	; 0x2b58 <eeprom_read_blraw+0x14>
    2b4c:	f2 bd       	out	0x22, r31	; 34
    2b4e:	e1 bd       	out	0x21, r30	; 33
    2b50:	f8 9a       	sbi	0x1f, 0	; 31
    2b52:	31 96       	adiw	r30, 0x01	; 1
    2b54:	00 b4       	in	r0, 0x20	; 32
    2b56:	0d 92       	st	X+, r0
    2b58:	41 50       	subi	r20, 0x01	; 1
    2b5a:	50 40       	sbci	r21, 0x00	; 0
    2b5c:	b8 f7       	brcc	.-18     	; 0x2b4c <eeprom_read_blraw+0x8>
    2b5e:	08 95       	ret

00002b60 <__prologue_saves__>:
    2b60:	2f 92       	push	r2
    2b62:	3f 92       	push	r3
    2b64:	4f 92       	push	r4
    2b66:	5f 92       	push	r5
    2b68:	6f 92       	push	r6
    2b6a:	7f 92       	push	r7
    2b6c:	8f 92       	push	r8
    2b6e:	9f 92       	push	r9
    2b70:	af 92       	push	r10
    2b72:	bf 92       	push	r11
    2b74:	cf 92       	push	r12
    2b76:	df 92       	push	r13
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	ca 1b       	sub	r28, r26
    2b8a:	db 0b       	sbc	r29, r27
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	09 94       	ijmp

00002b98 <__epilogue_restores__>:
    2b98:	2a 88       	ldd	r2, Y+18	; 0x12
    2b9a:	39 88       	ldd	r3, Y+17	; 0x11
    2b9c:	48 88       	ldd	r4, Y+16	; 0x10
    2b9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ba0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ba2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ba4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ba6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ba8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2baa:	b9 84       	ldd	r11, Y+9	; 0x09
    2bac:	c8 84       	ldd	r12, Y+8	; 0x08
    2bae:	df 80       	ldd	r13, Y+7	; 0x07
    2bb0:	ee 80       	ldd	r14, Y+6	; 0x06
    2bb2:	fd 80       	ldd	r15, Y+5	; 0x05
    2bb4:	0c 81       	ldd	r16, Y+4	; 0x04
    2bb6:	1b 81       	ldd	r17, Y+3	; 0x03
    2bb8:	aa 81       	ldd	r26, Y+2	; 0x02
    2bba:	b9 81       	ldd	r27, Y+1	; 0x01
    2bbc:	ce 0f       	add	r28, r30
    2bbe:	d1 1d       	adc	r29, r1
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	ed 01       	movw	r28, r26
    2bcc:	08 95       	ret

00002bce <__do_global_dtors>:
    2bce:	10 e0       	ldi	r17, 0x00	; 0
    2bd0:	cc ea       	ldi	r28, 0xAC	; 172
    2bd2:	d0 e0       	ldi	r29, 0x00	; 0
    2bd4:	04 c0       	rjmp	.+8      	; 0x2bde <__do_global_dtors+0x10>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__tablejump2__>
    2bdc:	21 96       	adiw	r28, 0x01	; 1
    2bde:	cd 3a       	cpi	r28, 0xAD	; 173
    2be0:	d1 07       	cpc	r29, r17
    2be2:	c9 f7       	brne	.-14     	; 0x2bd6 <__do_global_dtors+0x8>
    2be4:	f8 94       	cli

00002be6 <__stop_program>:
    2be6:	ff cf       	rjmp	.-2      	; 0x2be6 <__stop_program>
