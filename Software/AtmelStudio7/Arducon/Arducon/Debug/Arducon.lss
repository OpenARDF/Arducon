
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  00006312  000063c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006312  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bc  00800314  00800314  000065da  2**0
                  ALLOC
  3 .eeprom       000002f6  00810000  00810000  000065da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000692c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004a0  00000000  00000000  00006970  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007642  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001958  00000000  00000000  0000e452  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004597  00000000  00000000  0000fdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d84  00000000  00000000  00014344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000024d9  00000000  00000000  000150c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000596d  00000000  00000000  000175a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000478  00000000  00000000  0001cf0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 01 	jmp	0x228	; 0x228 <__dtors_end>
       4:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__vector_1>
       8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
       c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      14:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__vector_5>
      18:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      1c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      20:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__vector_8>
      24:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      28:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      2c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_11>
      30:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      34:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      38:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_14>
      3c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      44:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      48:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_18>
      4c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_19>
      50:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      54:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_21>
      58:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      5c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      60:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      64:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      68:	6a 01       	movw	r12, r20
      6a:	75 01       	movw	r14, r10
      6c:	80 01       	movw	r16, r0
      6e:	8b 01       	movw	r16, r22
      70:	96 01       	movw	r18, r12
      72:	a1 01       	movw	r20, r2
      74:	ac 01       	movw	r20, r24
      76:	b7 01       	movw	r22, r14
      78:	c2 01       	movw	r24, r4
      7a:	23 02       	muls	r18, r19
      7c:	23 02       	muls	r18, r19
      7e:	cd 01       	movw	r24, r26
      80:	d8 01       	movw	r26, r16
      82:	e5 01       	movw	r28, r10
      84:	f2 01       	movw	r30, r4
      86:	ff 01       	movw	r30, r30
      88:	0c 02       	muls	r16, r28
      8a:	19 02       	muls	r17, r25
      8c:	2e 02       	muls	r18, r30
      8e:	32 02       	muls	r19, r18
      90:	36 02       	muls	r19, r22
      92:	3a 02       	muls	r19, r26
      94:	3e 02       	muls	r19, r30
      96:	42 02       	muls	r20, r18
      98:	46 02       	muls	r20, r22
      9a:	4b 02       	muls	r20, r27
      9c:	4f 02       	muls	r20, r31
      9e:	68 02       	muls	r22, r24
      a0:	68 02       	muls	r22, r24
      a2:	53 02       	muls	r21, r19
      a4:	57 02       	muls	r21, r23
      a6:	5c 02       	muls	r21, r28
      a8:	60 02       	muls	r22, r16
      aa:	64 02       	muls	r22, r20
      ac:	7a 02       	muls	r23, r26
      ae:	80 02       	muls	r24, r16
      b0:	86 02       	muls	r24, r22
      b2:	8c 02       	muls	r24, r28
      b4:	92 02       	muls	r25, r18
      b6:	98 02       	muls	r25, r24
      b8:	9e 02       	muls	r25, r30
      ba:	a4 02       	muls	r26, r20
      bc:	aa 02       	muls	r26, r26
      be:	cd 02       	muls	r28, r29
      c0:	cd 02       	muls	r28, r29
      c2:	b0 02       	muls	r27, r16
      c4:	b6 02       	muls	r27, r22
      c6:	bc 02       	muls	r27, r28
      c8:	c2 02       	muls	r28, r18
      ca:	c8 02       	muls	r28, r24
      cc:	ee 02       	muls	r30, r30
      ce:	53 03       	mulsu	r21, r19
      d0:	53 03       	mulsu	r21, r19
      d2:	0b 03       	fmul	r16, r19
      d4:	41 03       	mulsu	r20, r17
      d6:	eb 02       	muls	r30, r27
      d8:	44 03       	mulsu	r20, r20
      da:	2c 03       	fmul	r18, r20
      dc:	4a 03       	fmul	r20, r18
      de:	e8 02       	muls	r30, r24
      e0:	2f 03       	fmul	r18, r23
      e2:	32 03       	mulsu	r19, r18
      e4:	38 03       	fmul	r19, r16
      e6:	e5 02       	muls	r30, r21
      e8:	35 03       	mulsu	r19, r21
      ea:	4d 03       	fmul	r20, r21
      ec:	9c 03       	fmulsu	r17, r20
      ee:	6e 03       	fmul	r22, r22
      f0:	9f 03       	fmulsu	r17, r23
      f2:	71 03       	mulsu	r23, r17
      f4:	74 03       	mulsu	r23, r20
      f6:	77 03       	mulsu	r23, r23
      f8:	7a 03       	fmul	r23, r18
      fa:	7d 03       	fmul	r23, r21
      fc:	80 03       	fmuls	r16, r16
      fe:	83 03       	fmuls	r16, r19
     100:	86 03       	fmuls	r16, r22
     102:	51 0f       	add	r21, r17
     104:	51 0f       	add	r21, r17
     106:	51 0f       	add	r21, r17
     108:	51 0f       	add	r21, r17
     10a:	51 0f       	add	r21, r17
     10c:	51 0f       	add	r21, r17
     10e:	a4 0f       	add	r26, r20
     110:	a4 0f       	add	r26, r20
     112:	6f 0f       	add	r22, r31
     114:	a4 0f       	add	r26, r20
     116:	a4 0f       	add	r26, r20
     118:	a4 0f       	add	r26, r20
     11a:	a4 0f       	add	r26, r20
     11c:	a4 0f       	add	r26, r20
     11e:	a4 0f       	add	r26, r20
     120:	a4 0f       	add	r26, r20
     122:	a4 0f       	add	r26, r20
     124:	6f 0f       	add	r22, r31
     126:	6f 0f       	add	r22, r31
     128:	3d 0f       	add	r19, r29
     12a:	47 0f       	add	r20, r23
     12c:	e0 1c       	adc	r14, r0
     12e:	15 1d       	adc	r17, r5
     130:	44 1d       	adc	r20, r4
     132:	4e 1d       	adc	r20, r14
     134:	58 1d       	adc	r21, r8
     136:	62 1d       	adc	r22, r2
     138:	e3 1d       	adc	r30, r3
     13a:	54 1e       	adc	r5, r20
     13c:	cf 1e       	adc	r12, r31
     13e:	16 1f       	adc	r17, r22
     140:	5d 1f       	adc	r21, r29
     142:	93 1e       	adc	r9, r19
     144:	a4 1f       	adc	r26, r20
     146:	ac 1d       	adc	r26, r12
     148:	c8 1f       	adc	r28, r24
     14a:	f4 1f       	adc	r31, r20
     14c:	b9 25       	eor	r27, r9
     14e:	7d 25       	eor	r23, r13
     150:	a9 25       	eor	r26, r9
     152:	c1 25       	eor	r28, r1
     154:	ad 25       	eor	r26, r13
     156:	c1 25       	eor	r28, r1
     158:	8d 25       	eor	r24, r13
     15a:	79 25       	eor	r23, r9
     15c:	85 25       	eor	r24, r5
     15e:	89 25       	eor	r24, r9
     160:	c1 25       	eor	r28, r1
     162:	9d 25       	eor	r25, r13
     164:	71 25       	eor	r23, r1
     166:	a1 25       	eor	r26, r1
     168:	6d 25       	eor	r22, r13
     16a:	81 25       	eor	r24, r1
     16c:	45 25       	eor	r20, r5
     16e:	49 25       	eor	r20, r9
     170:	4d 25       	eor	r20, r13
     172:	51 25       	eor	r21, r1
     174:	55 25       	eor	r21, r5
     176:	59 25       	eor	r21, r9
     178:	5d 25       	eor	r21, r13
     17a:	61 25       	eor	r22, r1
     17c:	65 25       	eor	r22, r5
     17e:	69 25       	eor	r22, r9
     180:	91 25       	eor	r25, r1
     182:	95 25       	eor	r25, r5
     184:	bd 25       	eor	r27, r13
     186:	99 25       	eor	r25, r9
     188:	c1 25       	eor	r28, r1
     18a:	75 25       	eor	r23, r5
     18c:	b1 25       	eor	r27, r1
     18e:	c5 25       	eor	r28, r5
     190:	e1 24       	eor	r14, r1
     192:	e5 24       	eor	r14, r5
     194:	e9 24       	eor	r14, r9
     196:	ed 24       	eor	r14, r13
     198:	f1 24       	eor	r15, r1
     19a:	f5 24       	eor	r15, r5
     19c:	f9 24       	eor	r15, r9
     19e:	fd 24       	eor	r15, r13
     1a0:	01 25       	eor	r16, r1
     1a2:	05 25       	eor	r16, r5
     1a4:	09 25       	eor	r16, r9
     1a6:	0d 25       	eor	r16, r13
     1a8:	11 25       	eor	r17, r1
     1aa:	15 25       	eor	r17, r5
     1ac:	19 25       	eor	r17, r9
     1ae:	1d 25       	eor	r17, r13
     1b0:	21 25       	eor	r18, r1
     1b2:	25 25       	eor	r18, r5
     1b4:	29 25       	eor	r18, r9
     1b6:	2d 25       	eor	r18, r13
     1b8:	31 25       	eor	r19, r1
     1ba:	35 25       	eor	r19, r5
     1bc:	39 25       	eor	r19, r9
     1be:	3d 25       	eor	r19, r13
     1c0:	41 25       	eor	r20, r1
     1c2:	c1 25       	eor	r28, r1
     1c4:	c1 25       	eor	r28, r1
     1c6:	c1 25       	eor	r28, r1
     1c8:	c1 25       	eor	r28, r1
     1ca:	a5 25       	eor	r26, r5
     1cc:	c1 25       	eor	r28, r1
     1ce:	c1 25       	eor	r28, r1
     1d0:	c1 25       	eor	r28, r1
     1d2:	c1 25       	eor	r28, r1
     1d4:	c1 25       	eor	r28, r1
     1d6:	c1 25       	eor	r28, r1
     1d8:	c1 25       	eor	r28, r1
     1da:	c1 25       	eor	r28, r1
     1dc:	c1 25       	eor	r28, r1
     1de:	c1 25       	eor	r28, r1
     1e0:	c1 25       	eor	r28, r1
     1e2:	c1 25       	eor	r28, r1
     1e4:	c1 25       	eor	r28, r1
     1e6:	c1 25       	eor	r28, r1
     1e8:	c1 25       	eor	r28, r1
     1ea:	c1 25       	eor	r28, r1
     1ec:	c1 25       	eor	r28, r1
     1ee:	c1 25       	eor	r28, r1
     1f0:	c1 25       	eor	r28, r1
     1f2:	c1 25       	eor	r28, r1
     1f4:	c1 25       	eor	r28, r1
     1f6:	c1 25       	eor	r28, r1
     1f8:	c1 25       	eor	r28, r1
     1fa:	c1 25       	eor	r28, r1
     1fc:	c1 25       	eor	r28, r1
     1fe:	c1 25       	eor	r28, r1
     200:	c1 25       	eor	r28, r1
     202:	c1 25       	eor	r28, r1
     204:	b5 25       	eor	r27, r5
     206:	05 a8       	ldd	r0, Z+53	; 0x35
     208:	4c cd       	rjmp	.-1384   	; 0xfffffca2 <__eeprom_end+0xff7ef9ac>
     20a:	b2 d4       	rcall	.+2404   	; 0xb70 <_ZN8Goertzel18SetTargetFrequencyEf+0x7a>
     20c:	4e b9       	out	0x0e, r20	; 14
     20e:	38 36       	cpi	r19, 0x68	; 104
     210:	a9 02       	muls	r26, r25
     212:	0c 50       	subi	r16, 0x0C	; 12
     214:	b9 91       	ld	r27, Y+
     216:	86 88       	ldd	r8, Z+22	; 0x16
     218:	08 3c       	cpi	r16, 0xC8	; 200
     21a:	a6 aa       	std	Z+54, r10	; 0x36
     21c:	aa 2a       	or	r10, r26
     21e:	be 00       	.word	0x00be	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240

00000224 <__ctors_start>:
     224:	b8 24       	eor	r11, r8

00000226 <__ctors_end>:
     226:	cd 24       	eor	r12, r13

00000228 <__dtors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	d8 e0       	ldi	r29, 0x08	; 8
     230:	de bf       	out	0x3e, r29	; 62
     232:	cd bf       	out	0x3d, r28	; 61

00000234 <__do_copy_data>:
     234:	13 e0       	ldi	r17, 0x03	; 3
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b1 e0       	ldi	r27, 0x01	; 1
     23a:	e2 e1       	ldi	r30, 0x12	; 18
     23c:	f3 e6       	ldi	r31, 0x63	; 99
     23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x10>
     240:	05 90       	lpm	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	a4 31       	cpi	r26, 0x14	; 20
     246:	b1 07       	cpc	r27, r17
     248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0xc>

0000024a <__do_clear_bss>:
     24a:	25 e0       	ldi	r18, 0x05	; 5
     24c:	a4 e1       	ldi	r26, 0x14	; 20
     24e:	b3 e0       	ldi	r27, 0x03	; 3
     250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
     252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
     254:	a0 3d       	cpi	r26, 0xD0	; 208
     256:	b2 07       	cpc	r27, r18
     258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>

0000025a <__do_global_ctors>:
     25a:	11 e0       	ldi	r17, 0x01	; 1
     25c:	c3 e1       	ldi	r28, 0x13	; 19
     25e:	d1 e0       	ldi	r29, 0x01	; 1
     260:	04 c0       	rjmp	.+8      	; 0x26a <__do_global_ctors+0x10>
     262:	21 97       	sbiw	r28, 0x01	; 1
     264:	fe 01       	movw	r30, r28
     266:	0e 94 6f 2c 	call	0x58de	; 0x58de <__tablejump2__>
     26a:	c2 31       	cpi	r28, 0x12	; 18
     26c:	d1 07       	cpc	r29, r17
     26e:	c9 f7       	brne	.-14     	; 0x262 <__do_global_ctors+0x8>
     270:	0e 94 88 23 	call	0x4710	; 0x4710 <main>
     274:	0c 94 7c 31 	jmp	0x62f8	; 0x62f8 <__do_global_dtors>

00000278 <__bad_interrupt>:
     278:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027c <month_length>:
     27c:	62 30       	cpi	r22, 0x02	; 2
     27e:	21 f4       	brne	.+8      	; 0x288 <month_length+0xc>
     280:	0e 94 4b 01 	call	0x296	; 0x296 <is_leap_year>
     284:	84 5e       	subi	r24, 0xE4	; 228
     286:	08 95       	ret
     288:	68 30       	cpi	r22, 0x08	; 8
     28a:	08 f0       	brcs	.+2      	; 0x28e <month_length+0x12>
     28c:	6f 5f       	subi	r22, 0xFF	; 255
     28e:	61 70       	andi	r22, 0x01	; 1
     290:	8e e1       	ldi	r24, 0x1E	; 30
     292:	86 0f       	add	r24, r22
     294:	08 95       	ret

00000296 <is_leap_year>:
     296:	9c 01       	movw	r18, r24
     298:	23 70       	andi	r18, 0x03	; 3
     29a:	33 27       	eor	r19, r19
     29c:	23 2b       	or	r18, r19
     29e:	59 f4       	brne	.+22     	; 0x2b6 <is_leap_year+0x20>
     2a0:	64 e6       	ldi	r22, 0x64	; 100
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
     2a8:	89 2b       	or	r24, r25
     2aa:	39 f4       	brne	.+14     	; 0x2ba <is_leap_year+0x24>
     2ac:	63 70       	andi	r22, 0x03	; 3
     2ae:	77 27       	eor	r23, r23
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	67 2b       	or	r22, r23
     2b4:	19 f0       	breq	.+6      	; 0x2bc <is_leap_year+0x26>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	08 95       	ret
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	08 95       	ret

000002be <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	32 97       	sbiw	r30, 0x02	; 2
     2c4:	e2 31       	cpi	r30, 0x12	; 18
     2c6:	f1 05       	cpc	r31, r1
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <_Z7pinModehh+0xe>
     2ca:	bd c0       	rjmp	.+378    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     2cc:	ec 5c       	subi	r30, 0xCC	; 204
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     2d4:	61 30       	cpi	r22, 0x01	; 1
     2d6:	11 f4       	brne	.+4      	; 0x2dc <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     2d8:	52 9a       	sbi	0x0a, 2	; 10
     2da:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2dc:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2de:	63 30       	cpi	r22, 0x03	; 3
     2e0:	11 f4       	brne	.+4      	; 0x2e6 <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2e2:	5a 9a       	sbi	0x0b, 2	; 11
     2e4:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2e6:	5a 98       	cbi	0x0b, 2	; 11
     2e8:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2ea:	61 30       	cpi	r22, 0x01	; 1
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2ee:	53 9a       	sbi	0x0a, 3	; 10
     2f0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2f2:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2f4:	63 30       	cpi	r22, 0x03	; 3
     2f6:	11 f4       	brne	.+4      	; 0x2fc <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2f8:	5b 9a       	sbi	0x0b, 3	; 11
     2fa:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2fc:	5b 98       	cbi	0x0b, 3	; 11
     2fe:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     300:	61 30       	cpi	r22, 0x01	; 1
     302:	11 f4       	brne	.+4      	; 0x308 <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     304:	54 9a       	sbi	0x0a, 4	; 10
     306:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     308:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     30a:	63 30       	cpi	r22, 0x03	; 3
     30c:	11 f4       	brne	.+4      	; 0x312 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     30e:	5c 9a       	sbi	0x0b, 4	; 11
     310:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     312:	5c 98       	cbi	0x0b, 4	; 11
     314:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     316:	61 30       	cpi	r22, 0x01	; 1
     318:	11 f4       	brne	.+4      	; 0x31e <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     31a:	55 9a       	sbi	0x0a, 5	; 10
     31c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     31e:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     320:	63 30       	cpi	r22, 0x03	; 3
     322:	11 f4       	brne	.+4      	; 0x328 <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     324:	5d 9a       	sbi	0x0b, 5	; 11
     326:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     32c:	61 30       	cpi	r22, 0x01	; 1
     32e:	11 f4       	brne	.+4      	; 0x334 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     330:	56 9a       	sbi	0x0a, 6	; 10
     332:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     334:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     336:	63 30       	cpi	r22, 0x03	; 3
     338:	11 f4       	brne	.+4      	; 0x33e <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     33a:	5e 9a       	sbi	0x0b, 6	; 11
     33c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     33e:	5e 98       	cbi	0x0b, 6	; 11
     340:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     342:	61 30       	cpi	r22, 0x01	; 1
     344:	11 f4       	brne	.+4      	; 0x34a <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     346:	57 9a       	sbi	0x0a, 7	; 10
     348:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     34a:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     34c:	63 30       	cpi	r22, 0x03	; 3
     34e:	11 f4       	brne	.+4      	; 0x354 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     350:	5f 9a       	sbi	0x0b, 7	; 11
     352:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     354:	5f 98       	cbi	0x0b, 7	; 11
     356:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     358:	61 30       	cpi	r22, 0x01	; 1
     35a:	11 f4       	brne	.+4      	; 0x360 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB0);
     35c:	20 9a       	sbi	0x04, 0	; 4
     35e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     360:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     362:	63 30       	cpi	r22, 0x03	; 3
     364:	11 f4       	brne	.+4      	; 0x36a <_Z7pinModehh+0xac>
				{
					PORTB  |= (1 << PORTB0);
     366:	28 9a       	sbi	0x05, 0	; 5
     368:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     36a:	28 98       	cbi	0x05, 0	; 5
     36c:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     36e:	61 30       	cpi	r22, 0x01	; 1
     370:	11 f4       	brne	.+4      	; 0x376 <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB1);
     372:	21 9a       	sbi	0x04, 1	; 4
     374:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     376:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     378:	63 30       	cpi	r22, 0x03	; 3
     37a:	11 f4       	brne	.+4      	; 0x380 <_Z7pinModehh+0xc2>
				{
					PORTB  |= (1 << PORTB1);
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     380:	29 98       	cbi	0x05, 1	; 5
     382:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     384:	61 30       	cpi	r22, 0x01	; 1
     386:	11 f4       	brne	.+4      	; 0x38c <_Z7pinModehh+0xce>
			{
				DDRB  |= (1 << PORTB2);
     388:	22 9a       	sbi	0x04, 2	; 4
     38a:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     38c:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     38e:	63 30       	cpi	r22, 0x03	; 3
     390:	11 f4       	brne	.+4      	; 0x396 <_Z7pinModehh+0xd8>
				{
					PORTB  |= (1 << PORTB2);
     392:	2a 9a       	sbi	0x05, 2	; 5
     394:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     396:	2a 98       	cbi	0x05, 2	; 5
     398:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     39a:	61 30       	cpi	r22, 0x01	; 1
     39c:	11 f4       	brne	.+4      	; 0x3a2 <_Z7pinModehh+0xe4>
			{
				DDRB  |= (1 << PORTB5);
     39e:	25 9a       	sbi	0x04, 5	; 4
     3a0:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3a2:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3a4:	63 30       	cpi	r22, 0x03	; 3
     3a6:	11 f4       	brne	.+4      	; 0x3ac <_Z7pinModehh+0xee>
				{
					PORTD  |= (1 << PORTB5);
     3a8:	5d 9a       	sbi	0x0b, 5	; 11
     3aa:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3ac:	5d 98       	cbi	0x0b, 5	; 11
     3ae:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3b0:	61 30       	cpi	r22, 0x01	; 1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <_Z7pinModehh+0xfa>
			{
				DDRC  |= (1 << PORTC0);
     3b4:	38 9a       	sbi	0x07, 0	; 7
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <_Z7pinModehh+0x110>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3b8:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ba:	63 30       	cpi	r22, 0x03	; 3
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <_Z7pinModehh+0x106>
				{
					PORTC  |= (1 << PORTC0);
     3be:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3c0:	39 98       	cbi	0x07, 1	; 7
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <_Z7pinModehh+0x11a>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3c4:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3c6:	39 98       	cbi	0x07, 1	; 7
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <_Z7pinModehh+0x120>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x114>
			{
				DDRC  |= (1 << PORTC1);
     3ce:	39 9a       	sbi	0x07, 1	; 7
     3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <_Z7pinModehh+0x12a>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3d2:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	19 f4       	brne	.+6      	; 0x3de <_Z7pinModehh+0x120>
				{
					PORTC  |= (1 << PORTC1);
     3d8:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3da:	3a 98       	cbi	0x07, 2	; 7
     3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <_Z7pinModehh+0x134>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     3de:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3e0:	3a 98       	cbi	0x07, 2	; 7
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <_Z7pinModehh+0x13a>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     3e4:	61 30       	cpi	r22, 0x01	; 1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <_Z7pinModehh+0x12e>
			{
				DDRC  |= (1 << PORTC2);
     3e8:	3a 9a       	sbi	0x07, 2	; 7
     3ea:	0b c0       	rjmp	.+22     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3ec:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     3ee:	63 30       	cpi	r22, 0x03	; 3
     3f0:	19 f4       	brne	.+6      	; 0x3f8 <_Z7pinModehh+0x13a>
				{
					PORTC  |= (1 << PORTC2);
     3f2:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3f4:	3b 98       	cbi	0x07, 3	; 7
     3f6:	0a c0       	rjmp	.+20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     3f8:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3fa:	3b 98       	cbi	0x07, 3	; 7
     3fc:	0a c0       	rjmp	.+20     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     3fe:	61 30       	cpi	r22, 0x01	; 1
     400:	11 f4       	brne	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			{
				DDRC  |= (1 << PORTC3);
     402:	3b 9a       	sbi	0x07, 3	; 7
     404:	0b c0       	rjmp	.+22     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     406:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     408:	63 30       	cpi	r22, 0x03	; 3
     40a:	19 f4       	brne	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				{
					PORTC  |= (1 << PORTC3);
     40c:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     40e:	3c 98       	cbi	0x07, 4	; 7
     410:	0a c0       	rjmp	.+20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     412:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     414:	3c 98       	cbi	0x07, 4	; 7
     416:	0a c0       	rjmp	.+20     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     418:	61 30       	cpi	r22, 0x01	; 1
     41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			{
				DDRC  |= (1 << PORTC4);
     41c:	3c 9a       	sbi	0x07, 4	; 7
     41e:	0b c0       	rjmp	.+22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     420:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     422:	63 30       	cpi	r22, 0x03	; 3
     424:	19 f4       	brne	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				{
					PORTC  |= (1 << PORTC4);
     426:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     428:	3d 98       	cbi	0x07, 5	; 7
     42a:	0a c0       	rjmp	.+20     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     42c:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     42e:	3d 98       	cbi	0x07, 5	; 7
     430:	09 c0       	rjmp	.+18     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     432:	61 30       	cpi	r22, 0x01	; 1
     434:	11 f4       	brne	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
				DDRC  |= (1 << PORTC5);
     436:	3d 9a       	sbi	0x07, 5	; 7
     438:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     43a:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     43c:	63 30       	cpi	r22, 0x03	; 3
     43e:	11 f4       	brne	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				{
					PORTC  |= (1 << PORTC5);
     440:	45 9a       	sbi	0x08, 5	; 8
     442:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     444:	45 98       	cbi	0x08, 5	; 8
     446:	08 95       	ret

00000448 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	32 97       	sbiw	r30, 0x02	; 2
     44e:	e0 31       	cpi	r30, 0x10	; 16
     450:	f1 05       	cpc	r31, r1
     452:	f0 f5       	brcc	.+124    	; 0x4d0 <_Z11digitalReadh+0x88>
     454:	ea 5b       	subi	r30, 0xBA	; 186
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     45c:	29 b1       	in	r18, 0x09	; 9
     45e:	24 70       	andi	r18, 0x04	; 4
     460:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     462:	38 c0       	rjmp	.+112    	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     464:	29 b1       	in	r18, 0x09	; 9
     466:	28 70       	andi	r18, 0x08	; 8
     468:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     46a:	34 c0       	rjmp	.+104    	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     46c:	29 b1       	in	r18, 0x09	; 9
     46e:	20 71       	andi	r18, 0x10	; 16
     470:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     472:	30 c0       	rjmp	.+96     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     474:	29 b1       	in	r18, 0x09	; 9
     476:	20 72       	andi	r18, 0x20	; 32
     478:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47a:	2c c0       	rjmp	.+88     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     47c:	29 b1       	in	r18, 0x09	; 9
     47e:	20 74       	andi	r18, 0x40	; 64
     480:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     482:	28 c0       	rjmp	.+80     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     484:	29 b1       	in	r18, 0x09	; 9
     486:	20 78       	andi	r18, 0x80	; 128
     488:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48a:	24 c0       	rjmp	.+72     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     48c:	83 b1       	in	r24, 0x03	; 3
     48e:	28 2f       	mov	r18, r24
     490:	21 70       	andi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     494:	1f c0       	rjmp	.+62     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     496:	23 b1       	in	r18, 0x03	; 3
     498:	22 70       	andi	r18, 0x02	; 2
     49a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49c:	1b c0       	rjmp	.+54     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     49e:	23 b1       	in	r18, 0x03	; 3
     4a0:	24 70       	andi	r18, 0x04	; 4
     4a2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a4:	17 c0       	rjmp	.+46     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4a6:	23 b1       	in	r18, 0x03	; 3
     4a8:	20 72       	andi	r18, 0x20	; 32
     4aa:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ac:	13 c0       	rjmp	.+38     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4ae:	86 b1       	in	r24, 0x06	; 6
     4b0:	28 2f       	mov	r18, r24
     4b2:	21 70       	andi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4b8:	26 b1       	in	r18, 0x06	; 6
     4ba:	22 70       	andi	r18, 0x02	; 2
     4bc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4be:	0a c0       	rjmp	.+20     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4c0:	26 b1       	in	r18, 0x06	; 6
     4c2:	24 70       	andi	r18, 0x04	; 4
     4c4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4c8:	26 b1       	in	r18, 0x06	; 6
     4ca:	28 70       	andi	r18, 0x08	; 8
     4cc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	23 2b       	or	r18, r19
     4d8:	09 f4       	brne	.+2      	; 0x4dc <_Z11digitalReadh+0x94>
     4da:	80 e0       	ldi	r24, 0x00	; 0
}
     4dc:	08 95       	ret

000004de <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	fc 01       	movw	r30, r24
     4e2:	32 97       	sbiw	r30, 0x02	; 2
     4e4:	e0 31       	cpi	r30, 0x10	; 16
     4e6:	f1 05       	cpc	r31, r1
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <_Z12digitalWritehh+0xe>
     4ea:	57 c0       	rjmp	.+174    	; 0x59a <_Z12digitalWritehh+0xbc>
     4ec:	ea 5a       	subi	r30, 0xAA	; 170
     4ee:	ff 4f       	sbci	r31, 0xFF	; 255
     4f0:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
	{
		case D2:
		{
			if(value)
     4f4:	66 23       	and	r22, r22
     4f6:	11 f0       	breq	.+4      	; 0x4fc <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     4f8:	5a 9a       	sbi	0x0b, 2	; 11
     4fa:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     4fc:	5a 98       	cbi	0x0b, 2	; 11
     4fe:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     500:	66 23       	and	r22, r22
     502:	11 f0       	breq	.+4      	; 0x508 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     504:	5b 9a       	sbi	0x0b, 3	; 11
     506:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     508:	5b 98       	cbi	0x0b, 3	; 11
     50a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     50c:	66 23       	and	r22, r22
     50e:	11 f0       	breq	.+4      	; 0x514 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     510:	5c 9a       	sbi	0x0b, 4	; 11
     512:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     514:	5c 98       	cbi	0x0b, 4	; 11
     516:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     518:	66 23       	and	r22, r22
     51a:	11 f0       	breq	.+4      	; 0x520 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     51c:	5d 9a       	sbi	0x0b, 5	; 11
     51e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     520:	5d 98       	cbi	0x0b, 5	; 11
     522:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     524:	66 23       	and	r22, r22
     526:	11 f0       	breq	.+4      	; 0x52c <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     528:	5e 9a       	sbi	0x0b, 6	; 11
     52a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     52c:	5e 98       	cbi	0x0b, 6	; 11
     52e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     530:	66 23       	and	r22, r22
     532:	11 f0       	breq	.+4      	; 0x538 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     534:	5f 9a       	sbi	0x0b, 7	; 11
     536:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     538:	5f 98       	cbi	0x0b, 7	; 11
     53a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     53c:	66 23       	and	r22, r22
     53e:	11 f0       	breq	.+4      	; 0x544 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB0);
     540:	28 9a       	sbi	0x05, 0	; 5
     542:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     544:	28 98       	cbi	0x05, 0	; 5
     546:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     548:	66 23       	and	r22, r22
     54a:	11 f0       	breq	.+4      	; 0x550 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB1);
     54c:	29 9a       	sbi	0x05, 1	; 5
     54e:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     550:	29 98       	cbi	0x05, 1	; 5
     552:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     554:	66 23       	and	r22, r22
     556:	11 f0       	breq	.+4      	; 0x55c <_Z12digitalWritehh+0x7e>
			{
				PORTB  |= (1 << PORTB2);
     558:	2a 9a       	sbi	0x05, 2	; 5
     55a:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     55c:	2a 98       	cbi	0x05, 2	; 5
     55e:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     560:	66 23       	and	r22, r22
     562:	11 f0       	breq	.+4      	; 0x568 <_Z12digitalWritehh+0x8a>
			{
				PORTB  |= (1 << PORTB5);
     564:	2d 9a       	sbi	0x05, 5	; 5
     566:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     568:	2d 98       	cbi	0x05, 5	; 5
     56a:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     56c:	66 23       	and	r22, r22
     56e:	11 f0       	breq	.+4      	; 0x574 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC0);
     570:	40 9a       	sbi	0x08, 0	; 8
     572:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     574:	40 98       	cbi	0x08, 0	; 8
     576:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     578:	66 23       	and	r22, r22
     57a:	11 f0       	breq	.+4      	; 0x580 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC1);
     57c:	41 9a       	sbi	0x08, 1	; 8
     57e:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     580:	41 98       	cbi	0x08, 1	; 8
     582:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     584:	66 23       	and	r22, r22
     586:	11 f0       	breq	.+4      	; 0x58c <_Z12digitalWritehh+0xae>
			{
				PORTC  |= (1 << PORTC2);
     588:	42 9a       	sbi	0x08, 2	; 8
     58a:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     58c:	42 98       	cbi	0x08, 2	; 8
     58e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     590:	66 23       	and	r22, r22
     592:	11 f0       	breq	.+4      	; 0x598 <_Z12digitalWritehh+0xba>
			{
				PORTC  |= (1 << PORTC3);
     594:	43 9a       	sbi	0x08, 3	; 8
     596:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     598:	43 98       	cbi	0x08, 3	; 8
     59a:	08 95       	ret

0000059c <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     59c:	08 95       	ret

0000059e <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     59e:	08 95       	ret

000005a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5a8:	41 15       	cp	r20, r1
     5aa:	51 05       	cpc	r21, r1
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5ae:	7b c0       	rjmp	.+246    	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
	{
		return;
	}

	switch(v)
     5b0:	86 2f       	mov	r24, r22
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	3b 97       	sbiw	r30, 0x0b	; 11
     5b8:	e0 31       	cpi	r30, 0x10	; 16
     5ba:	f1 05       	cpc	r31, r1
     5bc:	08 f0       	brcs	.+2      	; 0x5c0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5be:	73 c0       	rjmp	.+230    	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
     5c0:	da 01       	movw	r26, r20
     5c2:	ea 59       	subi	r30, 0x9A	; 154
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5ca:	8f ee       	ldi	r24, 0xEF	; 239
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	52 c0       	rjmp	.+164    	; 0x674 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xd4>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     5d0:	87 ee       	ldi	r24, 0xE7	; 231
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	64 c0       	rjmp	.+200    	; 0x69e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfe>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     5d6:	82 ee       	ldi	r24, 0xE2	; 226
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	58 c0       	rjmp	.+176    	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     5dc:	8a 01       	movw	r16, r20
     5de:	0f 5f       	subi	r16, 0xFF	; 255
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
     5e2:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     5e4:	66 23       	and	r22, r22
     5e6:	71 f0       	breq	.+28     	; 0x604 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     5e8:	c0 e0       	ldi	r28, 0x00	; 0
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	ce 01       	movw	r24, r28
     5f0:	86 5d       	subi	r24, 0xD6	; 214
     5f2:	9d 4f       	sbci	r25, 0xFD	; 253
     5f4:	0e 94 11 31 	call	0x6222	; 0x6222 <eeprom_update_byte>
				c = *char_addr++;
     5f8:	f8 01       	movw	r30, r16
     5fa:	61 91       	ld	r22, Z+
     5fc:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     5fe:	61 11       	cpse	r22, r1
     600:	f5 cf       	rjmp	.-22     	; 0x5ec <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     602:	02 c0       	rjmp	.+4      	; 0x608 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	ce 01       	movw	r24, r28
     60c:	85 5d       	subi	r24, 0xD5	; 213
     60e:	9d 4f       	sbci	r25, 0xFD	; 253
     610:	0e 94 11 31 	call	0x6222	; 0x6222 <eeprom_update_byte>
		}
		break;
     614:	48 c0       	rjmp	.+144    	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     616:	8a 01       	movw	r16, r20
     618:	0f 5f       	subi	r16, 0xFF	; 255
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     61e:	66 23       	and	r22, r22
     620:	91 f0       	breq	.+36     	; 0x646 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	03 c0       	rjmp	.+6      	; 0x62e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     628:	c8 30       	cpi	r28, 0x08	; 8
     62a:	d1 05       	cpc	r29, r1
     62c:	71 f0       	breq	.+28     	; 0x64a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	ce 01       	movw	r24, r28
     632:	89 52       	subi	r24, 0x29	; 41
     634:	9d 4f       	sbci	r25, 0xFD	; 253
     636:	0e 94 11 31 	call	0x6222	; 0x6222 <eeprom_update_byte>
				c = *uint8_addr++;
     63a:	f8 01       	movw	r30, r16
     63c:	61 91       	ld	r22, Z+
     63e:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     640:	61 11       	cpse	r22, r1
     642:	f2 cf       	rjmp	.-28     	; 0x628 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     644:	02 c0       	rjmp	.+4      	; 0x64a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     646:	c0 e0       	ldi	r28, 0x00	; 0
     648:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	ce 01       	movw	r24, r28
     64e:	88 52       	subi	r24, 0x28	; 40
     650:	9d 4f       	sbci	r25, 0xFD	; 253
     652:	0e 94 11 31 	call	0x6222	; 0x6222 <eeprom_update_byte>
		}
		break;
     656:	27 c0       	rjmp	.+78     	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
		}
		break;

		case Enable_LEDs:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_LEDs);
     658:	84 ee       	ldi	r24, 0xE4	; 228
     65a:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     65c:	17 c0       	rjmp	.+46     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Enable_start_timer:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_start_timer);
     65e:	89 ee       	ldi	r24, 0xE9	; 233
     660:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     662:	14 c0       	rjmp	.+40     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>

		case Enable_transmitter:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_transmitter);
     664:	8a ee       	ldi	r24, 0xEA	; 234
     666:	92 e0       	ldi	r25, 0x02	; 2

		}
		break;
     668:	11 c0       	rjmp	.+34     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     66a:	83 ef       	ldi	r24, 0xF3	; 243
     66c:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     66e:	0e c0       	rjmp	.+28     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     670:	8b ee       	ldi	r24, 0xEB	; 235
     672:	92 e0       	ldi	r25, 0x02	; 2
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     674:	4d 91       	ld	r20, X+
     676:	5d 91       	ld	r21, X+
     678:	6d 91       	ld	r22, X+
     67a:	7c 91       	ld	r23, X
     67c:	0e 94 23 31 	call	0x6246	; 0x6246 <eeprom_update_dword>
     680:	12 c0       	rjmp	.+36     	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     682:	81 ee       	ldi	r24, 0xE1	; 225
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     688:	83 ee       	ldi	r24, 0xE3	; 227
     68a:	92 e0       	ldi	r25, 0x02	; 2
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     68c:	6c 91       	ld	r22, X
     68e:	0e 94 11 31 	call	0x6222	; 0x6222 <eeprom_update_byte>
     692:	09 c0       	rjmp	.+18     	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     694:	85 ee       	ldi	r24, 0xE5	; 229
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	02 c0       	rjmp	.+4      	; 0x69e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfe>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     69a:	84 ef       	ldi	r24, 0xF4	; 244
     69c:	92 e0       	ldi	r25, 0x02	; 2
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     69e:	6d 91       	ld	r22, X+
     6a0:	7c 91       	ld	r23, X
     6a2:	0e 94 2f 31 	call	0x625e	; 0x625e <eeprom_update_word>
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
	}
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6bc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_Z10lb_enabledv>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6c4:	46 c0       	rjmp	.+140    	; 0x752 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6c6:	8c 2f       	mov	r24, r28
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	8b 30       	cpi	r24, 0x0B	; 11
     6cc:	91 05       	cpc	r25, r1
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6d0:	40 c0       	rjmp	.+128    	; 0x752 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6d2:	fc 01       	movw	r30, r24
     6d4:	ea 58       	subi	r30, 0x8A	; 138
     6d6:	ff 4f       	sbci	r31, 0xFF	; 255
     6d8:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     6dc:	8a e2       	ldi	r24, 0x2A	; 42
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	30 c0       	rjmp	.+96     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     6e2:	8f e4       	ldi	r24, 0x4F	; 79
     6e4:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6e6:	2d c0       	rjmp	.+90     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     6e8:	85 e7       	ldi	r24, 0x75	; 117
     6ea:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6ec:	2a c0       	rjmp	.+84     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     6ee:	8c e9       	ldi	r24, 0x9C	; 156
     6f0:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6f2:	27 c0       	rjmp	.+78     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     6f4:	8d eb       	ldi	r24, 0xBD	; 189
     6f6:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     6f8:	24 c0       	rjmp	.+72     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     6fa:	88 ed       	ldi	r24, 0xD8	; 216
     6fc:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6fe:	21 c0       	rjmp	.+66     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     704:	1e c0       	rjmp	.+60     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     70a:	1b c0       	rjmp	.+54     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     70c:	87 e1       	ldi	r24, 0x17	; 23
     70e:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     710:	18 c0       	rjmp	.+48     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     712:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     714:	cc 23       	and	r28, r28
     716:	e9 f0       	breq	.+58     	; 0x752 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     71e:	78 01       	movw	r14, r16
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	e8 1a       	sub	r14, r24
     724:	f8 0a       	sbc	r15, r24
     726:	c8 01       	movw	r24, r16
     728:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     72c:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     72e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_Z19linkbusTxInProgressv>
     732:	81 11       	cpse	r24, r1
     734:	fc cf       	rjmp	.-8      	; 0x72e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     736:	ed cf       	rjmp	.-38     	; 0x712 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     73e:	87 e2       	ldi	r24, 0x27	; 39
     740:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     742:	8c 01       	movw	r16, r24
     744:	0f 5f       	subi	r16, 0xFF	; 255
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     74c:	c8 2f       	mov	r28, r24

		while(c)
     74e:	81 11       	cpse	r24, r1
     750:	e3 cf       	rjmp	.-58     	; 0x718 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	08 95       	ret

0000075e <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     76a:	84 ef       	ldi	r24, 0xF4	; 244
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 0b 31 	call	0x6216	; 0x6216 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     772:	8b 3b       	cpi	r24, 0xBB	; 187
     774:	91 05       	cpc	r25, r1
     776:	09 f0       	breq	.+2      	; 0x77a <_ZN13EepromManager11readNonVolsEv+0x1c>
     778:	c2 c0       	rjmp	.+388    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     77a:	81 ee       	ldi	r24, 0xE1	; 225
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	91 05       	cpc	r25, r1
     788:	14 f4       	brge	.+4      	; 0x78e <_ZN13EepromManager11readNonVolsEv+0x30>
     78a:	85 e0       	ldi	r24, 0x05	; 5
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	85 31       	cpi	r24, 0x15	; 21
     790:	91 05       	cpc	r25, r1
     792:	14 f0       	brlt	.+4      	; 0x798 <_ZN13EepromManager11readNonVolsEv+0x3a>
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), NO_CODE_START_TONES_5M);
     79c:	82 ee       	ldi	r24, 0xE2	; 226
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     7a4:	86 31       	cpi	r24, 0x16	; 22
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <_ZN13EepromManager11readNonVolsEv+0x4c>
     7a8:	85 e1       	ldi	r24, 0x15	; 21
     7aa:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7ae:	83 ee       	ldi	r24, 0xE3	; 227
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     7b6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7ba:	85 ee       	ldi	r24, 0xE5	; 229
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 0b 31 	call	0x6216	; 0x6216 <eeprom_read_word>
     7c2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_atmega_temp_calibration+0x1>
     7c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7ca:	87 ee       	ldi	r24, 0xE7	; 231
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	0e 94 0b 31 	call	0x6216	; 0x6216 <eeprom_read_word>
     7d2:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <g_rv3028_offset+0x1>
     7d6:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <g_rv3028_offset>
		g_enable_LEDs = eeprom_read_byte(&(EepromManager::ee_vars.enable_LEDs));
     7da:	84 ee       	ldi	r24, 0xE4	; 228
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     7e2:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&(EepromManager::ee_vars.enable_start_timer));
     7e6:	89 ee       	ldi	r24, 0xE9	; 233
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     7ee:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
     7f2:	8a ee       	ldi	r24, 0xEA	; 234
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     7fa:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     7fe:	8b ee       	ldi	r24, 0xEB	; 235
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	0e 94 05 31 	call	0x620a	; 0x620a <eeprom_read_dword>
     806:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <g_event_start_epoch>
     80a:	70 93 ae 05 	sts	0x05AE, r23	; 0x8005ae <g_event_start_epoch+0x1>
     80e:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_event_start_epoch+0x2>
     812:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     816:	8f ee       	ldi	r24, 0xEF	; 239
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	0e 94 05 31 	call	0x620a	; 0x620a <eeprom_read_dword>
     81e:	60 93 a9 05 	sts	0x05A9, r22	; 0x8005a9 <g_event_finish_epoch>
     822:	70 93 aa 05 	sts	0x05AA, r23	; 0x8005aa <g_event_finish_epoch+0x1>
     826:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <g_event_finish_epoch+0x2>
     82a:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     82e:	83 ef       	ldi	r24, 0xF3	; 243
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     836:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <g_utc_offset>
     83a:	0b e2       	ldi	r16, 0x2B	; 43
     83c:	12 e0       	ldi	r17, 0x02	; 2
     83e:	c2 e5       	ldi	r28, 0x52	; 82
     840:	d5 e0       	ldi	r29, 0x05	; 5
     842:	0f 2e       	mov	r0, r31
     844:	f6 e6       	ldi	r31, 0x66	; 102
     846:	ef 2e       	mov	r14, r31
     848:	f5 e0       	ldi	r31, 0x05	; 5
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     84e:	c8 01       	movw	r24, r16
     850:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     854:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     856:	81 11       	cpse	r24, r1
     858:	0b c0       	rjmp	.+22     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     85a:	08 ed       	ldi	r16, 0xD8	; 216
     85c:	12 e0       	ldi	r17, 0x02	; 2
     85e:	ca e6       	ldi	r28, 0x6A	; 106
     860:	d5 e0       	ldi	r29, 0x05	; 5
     862:	0f 2e       	mov	r0, r31
     864:	f2 e7       	ldi	r31, 0x72	; 114
     866:	ef 2e       	mov	r14, r31
     868:	f5 e0       	ldi	r31, 0x05	; 5
     86a:	ff 2e       	mov	r15, r31
     86c:	f0 2d       	mov	r31, r0
     86e:	06 c0       	rjmp	.+12     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     874:	ce 15       	cp	r28, r14
     876:	df 05       	cpc	r29, r15
     878:	51 f7       	brne	.-44     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     87a:	ef cf       	rjmp	.-34     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     882:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     884:	88 23       	and	r24, r24
     886:	29 f0       	breq	.+10     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     888:	0f 5f       	subi	r16, 0xFF	; 255
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     88c:	ce 15       	cp	r28, r14
     88e:	df 05       	cpc	r29, r15
     890:	a9 f7       	brne	.-22     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     892:	08 eb       	ldi	r16, 0xB8	; 184
     894:	12 e0       	ldi	r17, 0x02	; 2
     896:	c5 e8       	ldi	r28, 0x85	; 133
     898:	d5 e0       	ldi	r29, 0x05	; 5
     89a:	0f 2e       	mov	r0, r31
     89c:	f5 ea       	ldi	r31, 0xA5	; 165
     89e:	ef 2e       	mov	r14, r31
     8a0:	f5 e0       	ldi	r31, 0x05	; 5
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 fd 30 	call	0x61fa	; 0x61fa <eeprom_read_byte>
     8ac:	89 93       	st	Y+, r24
     8ae:	0f 5f       	subi	r16, 0xFF	; 255
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     8b2:	ce 15       	cp	r28, r14
     8b4:	df 05       	cpc	r29, r15
     8b6:	b9 f7       	brne	.-18     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     8b8:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
     8bc:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
     8c0:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
     8c4:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
     8c8:	89 2b       	or	r24, r25
     8ca:	8a 2b       	or	r24, r26
     8cc:	8b 2b       	or	r24, r27
     8ce:	c9 f0       	breq	.+50     	; 0x902 <__stack+0x3>
     8d0:	40 91 a9 05 	lds	r20, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
     8d4:	50 91 aa 05 	lds	r21, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
     8d8:	60 91 ab 05 	lds	r22, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
     8dc:	70 91 ac 05 	lds	r23, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
     8e0:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
     8e4:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
     8e8:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
     8ec:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
     8f0:	84 17       	cp	r24, r20
     8f2:	95 07       	cpc	r25, r21
     8f4:	a6 07       	cpc	r26, r22
     8f6:	b7 07       	cpc	r27, r23
     8f8:	30 f4       	brcc	.+12     	; 0x906 <__stack+0x7>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	19 c0       	rjmp	.+50     	; 0x930 <__stack+0x31>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	17 c0       	rjmp	.+46     	; 0x930 <__stack+0x31>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	15 c0       	rjmp	.+42     	; 0x930 <__stack+0x31>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     906:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
     90a:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
     90e:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
     912:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
     916:	80 58       	subi	r24, 0x80	; 128
     918:	9e 4a       	sbci	r25, 0xAE	; 174
     91a:	ae 4f       	sbci	r26, 0xFE	; 254
     91c:	bf 4f       	sbci	r27, 0xFF	; 255
     91e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <g_event_finish_epoch>
     922:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <g_event_finish_epoch+0x1>
     926:	a0 93 ab 05 	sts	0x05AB, r26	; 0x8005ab <g_event_finish_epoch+0x2>
     92a:	b0 93 ac 05 	sts	0x05AC, r27	; 0x8005ac <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     92e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	08 95       	ret

0000093e <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     944:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	ce 01       	movw	r24, r28
     94c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	ce 01       	movw	r24, r28
     954:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     958:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     95c:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     966:	cb 01       	movw	r24, r22
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	80 5c       	subi	r24, 0xC0	; 192
     96e:	9d 4f       	sbci	r25, 0xFD	; 253
     970:	0e 94 0b 31 	call	0x6216	; 0x6216 <eeprom_read_word>
}
     974:	08 95       	ret

00000976 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     976:	9c 01       	movw	r18, r24
     978:	2e 5f       	subi	r18, 0xFE	; 254
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	2b 33       	cpi	r18, 0x3B	; 59
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	38 07       	cpc	r19, r24
     982:	10 f0       	brcs	.+4      	; 0x988 <_Z8setAttenj+0x12>
     984:	2b e3       	ldi	r18, 0x3B	; 59
     986:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     988:	ad ec       	ldi	r26, 0xCD	; 205
     98a:	bc ec       	ldi	r27, 0xCC	; 204
     98c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
     998:	9c 01       	movw	r18, r24
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	28 0f       	add	r18, r24
     9a4:	39 1f       	adc	r19, r25
	att /= 5;
     9a6:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>
     9aa:	96 95       	lsr	r25
     9ac:	87 95       	ror	r24
     9ae:	96 95       	lsr	r25
     9b0:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     9b2:	9c 01       	movw	r18, r24
     9b4:	20 73       	andi	r18, 0x30	; 48
     9b6:	33 27       	eor	r19, r19
     9b8:	32 95       	swap	r19
     9ba:	22 95       	swap	r18
     9bc:	2f 70       	andi	r18, 0x0F	; 15
     9be:	23 27       	eor	r18, r19
     9c0:	3f 70       	andi	r19, 0x0F	; 15
     9c2:	23 27       	eor	r18, r19
     9c4:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__data_end>

	pattern = PORTC & 0xF0;
     9c8:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	90 7f       	andi	r25, 0xF0	; 240
     9ce:	89 2b       	or	r24, r25
     9d0:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     9d2:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     9d4:	8c 7f       	andi	r24, 0xFC	; 252
     9d6:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <__data_end>
     9da:	89 2b       	or	r24, r25
     9dc:	8b b9       	out	0x0b, r24	; 11
     9de:	08 95       	ret

000009e0 <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     9e0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	8e e0       	ldi	r24, 0x0E	; 14
     9e8:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	8f e0       	ldi	r24, 0x0F	; 15
     9f0:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	81 e1       	ldi	r24, 0x11	; 17
     a00:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	86 e0       	ldi	r24, 0x06	; 6
     a20:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
     a24:	08 95       	ret

00000a26 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	e4 2e       	mov	r14, r20
     a34:	f5 2e       	mov	r15, r21
     a36:	d6 2f       	mov	r29, r22
     a38:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     a3a:	00 93 2c 03 	sts	0x032C, r16	; 0x80032c <_SAMPLING_FREQUENCY>
     a3e:	10 93 2d 03 	sts	0x032D, r17	; 0x80032d <_SAMPLING_FREQUENCY+0x1>
     a42:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <_SAMPLING_FREQUENCY+0x2>
     a46:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	41 e5       	ldi	r20, 0x51	; 81
     a50:	53 e4       	ldi	r21, 0x43	; 67
     a52:	6e 2d       	mov	r22, r14
     a54:	7f 2d       	mov	r23, r15
     a56:	8d 2f       	mov	r24, r29
     a58:	9c 2f       	mov	r25, r28
     a5a:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__gesf2>
     a5e:	18 16       	cp	r1, r24
     a60:	6c f0       	brlt	.+26     	; 0xa7c <_ZN8GoertzelC1Eff+0x56>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	48 ec       	ldi	r20, 0xC8	; 200
     a68:	52 e4       	ldi	r21, 0x42	; 66
     a6a:	6e 2d       	mov	r22, r14
     a6c:	7f 2d       	mov	r23, r15
     a6e:	8d 2f       	mov	r24, r29
     a70:	9c 2f       	mov	r25, r28
     a72:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__cmpsf2>
     a76:	88 23       	and	r24, r24
     a78:	34 f0       	brlt	.+12     	; 0xa86 <_ZN8GoertzelC1Eff+0x60>
     a7a:	09 c0       	rjmp	.+18     	; 0xa8e <_ZN8GoertzelC1Eff+0x68>
     a7c:	e1 2c       	mov	r14, r1
     a7e:	f1 2c       	mov	r15, r1
     a80:	d1 e5       	ldi	r29, 0x51	; 81
     a82:	c3 e4       	ldi	r28, 0x43	; 67
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <_ZN8GoertzelC1Eff+0x68>
     a86:	e1 2c       	mov	r14, r1
     a88:	f1 2c       	mov	r15, r1
     a8a:	d8 ec       	ldi	r29, 0xC8	; 200
     a8c:	c2 e4       	ldi	r28, 0x42	; 66
     a8e:	6e 2d       	mov	r22, r14
     a90:	7f 2d       	mov	r23, r15
     a92:	8d 2f       	mov	r24, r29
     a94:	9c 2f       	mov	r25, r28
     a96:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__fixsfsi>
     a9a:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <_N+0x1>
     a9e:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     aa2:	cb 01       	movw	r24, r22
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	0e 94 9e 2c 	call	0x593c	; 0x593c <malloc>
     aac:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <testData+0x1>
     ab0:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <testData>
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	08 95       	ret

00000ac2 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     ac2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <testData>
     ac6:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <testData+0x1>
     aca:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <free>
     ace:	08 95       	ret

00000ad0 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     ad0:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <Q2>
     ad4:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <Q2+0x1>
     ad8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <Q2+0x2>
     adc:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Q2+0x3>
	Q1 = 0;
     ae0:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Q1>
     ae4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <Q1+0x1>
     ae8:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <Q1+0x2>
     aec:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <Q1+0x3>
	_samplesReady = false;
     af0:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_samplesReady>
     af4:	08 95       	ret

00000af6 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	ec 01       	movw	r28, r24
     b0c:	4a 01       	movw	r8, r20
     b0e:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     b10:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <_N>
     b14:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <_N+0x1>
     b18:	07 2e       	mov	r0, r23
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 0d 2a 	call	0x541a	; 0x541a <__floatsisf>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     b28:	80 92 28 03 	sts	0x0328, r8	; 0x800328 <_TARGET_FREQUENCY>
     b2c:	90 92 29 03 	sts	0x0329, r9	; 0x800329 <_TARGET_FREQUENCY+0x1>
     b30:	a0 92 2a 03 	sts	0x032A, r10	; 0x80032a <_TARGET_FREQUENCY+0x2>
     b34:	b0 92 2b 03 	sts	0x032B, r11	; 0x80032b <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     b38:	a5 01       	movw	r20, r10
     b3a:	94 01       	movw	r18, r8
     b3c:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     b40:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <_SAMPLING_FREQUENCY>
     b44:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <_SAMPLING_FREQUENCY+0x1>
     b48:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <_SAMPLING_FREQUENCY+0x2>
     b4c:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <_SAMPLING_FREQUENCY+0x3>
     b50:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__divsf3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	5f e3       	ldi	r21, 0x3F	; 63
     b5c:	0e 94 ed 28 	call	0x51da	; 0x51da <__addsf3>
     b60:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__fixsfsi>
     b64:	07 2e       	mov	r0, r23
     b66:	00 0c       	add	r0, r0
     b68:	88 0b       	sbc	r24, r24
     b6a:	99 0b       	sbc	r25, r25
     b6c:	0e 94 0d 2a 	call	0x541a	; 0x541a <__floatsisf>
     b70:	2b ed       	ldi	r18, 0xDB	; 219
     b72:	3f e0       	ldi	r19, 0x0F	; 15
     b74:	49 ec       	ldi	r20, 0xC9	; 201
     b76:	50 e4       	ldi	r21, 0x40	; 64
     b78:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     b7c:	a7 01       	movw	r20, r14
     b7e:	96 01       	movw	r18, r12
     b80:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__divsf3>
     b84:	0e 94 5e 29 	call	0x52bc	; 0x52bc <cos>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	0e 94 ed 28 	call	0x51da	; 0x51da <__addsf3>
     b90:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <g_coeff>
     b94:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <g_coeff+0x1>
     b98:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <g_coeff+0x2>
     b9c:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <g_coeff+0x3>
	ResetGoertzel();
     ba0:	ce 01       	movw	r24, r28
     ba2:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8Goertzel13ResetGoertzelEv>
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	08 95       	ret

00000bbc <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     bd2:	c0 90 1e 03 	lds	r12, 0x031E	; 0x80031e <Q1>
     bd6:	d0 90 1f 03 	lds	r13, 0x031F	; 0x80031f <Q1+0x1>
     bda:	e0 90 20 03 	lds	r14, 0x0320	; 0x800320 <Q1+0x2>
     bde:	f0 90 21 03 	lds	r15, 0x0321	; 0x800321 <Q1+0x3>
     be2:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <g_coeff>
     be6:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <g_coeff+0x1>
     bea:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <g_coeff+0x2>
     bee:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <g_coeff+0x3>
     bf2:	c7 01       	movw	r24, r14
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     bfa:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <Q2>
     bfe:	30 91 1b 03 	lds	r19, 0x031B	; 0x80031b <Q2+0x1>
     c02:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <Q2+0x2>
     c06:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <Q2+0x3>
     c0a:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__subsf3>
     c0e:	4b 01       	movw	r8, r22
     c10:	5c 01       	movw	r10, r24
     c12:	be 01       	movw	r22, r28
     c14:	72 50       	subi	r23, 0x02	; 2
     c16:	07 2e       	mov	r0, r23
     c18:	00 0c       	add	r0, r0
     c1a:	88 0b       	sbc	r24, r24
     c1c:	99 0b       	sbc	r25, r25
     c1e:	0e 94 0d 2a 	call	0x541a	; 0x541a <__floatsisf>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	c5 01       	movw	r24, r10
     c28:	b4 01       	movw	r22, r8
     c2a:	0e 94 ed 28 	call	0x51da	; 0x51da <__addsf3>

	Q2 = Q1;
     c2e:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <Q2>
     c32:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <Q2+0x1>
     c36:	e0 92 1c 03 	sts	0x031C, r14	; 0x80031c <Q2+0x2>
     c3a:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <Q2+0x3>
	Q1 = Q0;
     c3e:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <Q1>
     c42:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <Q1+0x1>
     c46:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <Q1+0x2>
     c4a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <Q1+0x3>
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	08 95       	ret

00000c64 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     c64:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
     c68:	81 11       	cpse	r24, r1
     c6a:	27 c0       	rjmp	.+78     	; 0xcba <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     c6c:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <_index>
     c70:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <_index+0x1>
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <testData>
     c7c:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <testData+0x1>
     c80:	e8 0f       	add	r30, r24
     c82:	f9 1f       	adc	r31, r25
     c84:	71 83       	std	Z+1, r23	; 0x01
     c86:	60 83       	st	Z, r22
	_index++;
     c88:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_index>
     c8c:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_index+0x1>
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <_index+0x1>
     c96:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_index>
	if(_index >= _N)
     c9a:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <_N>
     c9e:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <_N+0x1>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	3c f0       	brlt	.+14     	; 0xcb6 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     ca8:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_index+0x1>
     cac:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_index>
		_samplesReady = true;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_samplesReady>
	}

	return(_samplesReady);
     cb6:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
}
     cba:	08 95       	ret

00000cbc <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     cbc:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
     cc0:	08 95       	ret

00000cc2 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     cc2:	4f 92       	push	r4
     cc4:	5f 92       	push	r5
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     ce4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_N>
     ce8:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_N+0x1>
     cec:	18 16       	cp	r1, r24
     cee:	19 06       	cpc	r1, r25
     cf0:	c4 f4       	brge	.+48     	; 0xd22 <_ZN8Goertzel10Magnitude2Ev+0x60>
     cf2:	c0 e0       	ldi	r28, 0x00	; 0
     cf4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     cf6:	ce 01       	movw	r24, r28
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <testData>
     d00:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <testData+0x1>
     d04:	e8 0f       	add	r30, r24
     d06:	f9 1f       	adc	r31, r25
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	c8 01       	movw	r24, r16
     d0e:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_N>
     d18:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_N+0x1>
     d1c:	c8 17       	cp	r28, r24
     d1e:	d9 07       	cpc	r29, r25
     d20:	54 f3       	brlt	.-44     	; 0xcf6 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     d22:	80 90 1e 03 	lds	r8, 0x031E	; 0x80031e <Q1>
     d26:	90 90 1f 03 	lds	r9, 0x031F	; 0x80031f <Q1+0x1>
     d2a:	a0 90 20 03 	lds	r10, 0x0320	; 0x800320 <Q1+0x2>
     d2e:	b0 90 21 03 	lds	r11, 0x0321	; 0x800321 <Q1+0x3>
     d32:	c0 90 1a 03 	lds	r12, 0x031A	; 0x80031a <Q2>
     d36:	d0 90 1b 03 	lds	r13, 0x031B	; 0x80031b <Q2+0x1>
     d3a:	e0 90 1c 03 	lds	r14, 0x031C	; 0x80031c <Q2+0x2>
     d3e:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <Q2+0x3>
     d42:	a5 01       	movw	r20, r10
     d44:	94 01       	movw	r18, r8
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     d4e:	2b 01       	movw	r4, r22
     d50:	3c 01       	movw	r6, r24
     d52:	a7 01       	movw	r20, r14
     d54:	96 01       	movw	r18, r12
     d56:	c7 01       	movw	r24, r14
     d58:	b6 01       	movw	r22, r12
     d5a:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	c3 01       	movw	r24, r6
     d64:	b2 01       	movw	r22, r4
     d66:	0e 94 ed 28 	call	0x51da	; 0x51da <__addsf3>
     d6a:	2b 01       	movw	r4, r22
     d6c:	3c 01       	movw	r6, r24
     d6e:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <g_coeff>
     d72:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <g_coeff+0x1>
     d76:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <g_coeff+0x2>
     d7a:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <g_coeff+0x3>
     d7e:	c5 01       	movw	r24, r10
     d80:	b4 01       	movw	r22, r8
     d82:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	c3 01       	movw	r24, r6
     d94:	b2 01       	movw	r22, r4
     d96:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__subsf3>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24

	ResetGoertzel();
     d9e:	c8 01       	movw	r24, r16
     da0:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     da4:	c7 01       	movw	r24, r14
     da6:	b6 01       	movw	r22, r12
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	08 95       	ret

00000dca <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     dca:	e4 e6       	ldi	r30, 0x64	; 100
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     dd4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     dd8:	85 e2       	ldi	r24, 0x25	; 37
     dda:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     dea:	08 95       	ret

00000dec <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     dec:	84 ea       	ldi	r24, 0xA4	; 164
     dee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     df2:	ec eb       	ldi	r30, 0xBC	; 188
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	64 f0       	brlt	.+24     	; 0xe14 <_Z9i2c_startv+0x28>
     dfc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e00:	81 11       	cpse	r24, r1
     e02:	f9 cf       	rjmp	.-14     	; 0xdf6 <_Z9i2c_startv+0xa>
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     e06:	80 e9       	ldi	r24, 0x90	; 144
     e08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     e12:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     e14:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e18:	88 23       	and	r24, r24
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     e1e:	08 95       	ret

00000e20 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e20:	84 e9       	ldi	r24, 0x94	; 148
     e22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e26:	08 95       	ret

00000e28 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     e28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     e2c:	84 e8       	ldi	r24, 0x84	; 132
     e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e32:	ec eb       	ldi	r30, 0xBC	; 188
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	64 f0       	brlt	.+24     	; 0xe54 <_Z17i2c_write_successhh+0x2c>
     e3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e40:	81 11       	cpse	r24, r1
     e42:	f9 cf       	rjmp	.-14     	; 0xe36 <_Z17i2c_write_successhh+0xe>
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e46:	84 e9       	ldi	r24, 0x94	; 148
     e48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     e52:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     e54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     e58:	88 7f       	andi	r24, 0xF8	; 248
     e5a:	86 13       	cpse	r24, r22
     e5c:	f4 cf       	rjmp	.-24     	; 0xe46 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     e60:	08 95       	ret

00000e62 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     e62:	84 ec       	ldi	r24, 0xC4	; 196
     e64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e68:	ec eb       	ldi	r30, 0xBC	; 188
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 23       	and	r24, r24
     e70:	24 f0       	brlt	.+8      	; 0xe7a <_Z12i2c_read_ackv+0x18>
     e72:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e76:	81 11       	cpse	r24, r1
     e78:	f9 cf       	rjmp	.-14     	; 0xe6c <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     e7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e7e:	08 95       	ret

00000e80 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     e80:	84 e8       	ldi	r24, 0x84	; 132
     e82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e86:	ec eb       	ldi	r30, 0xBC	; 188
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	24 f0       	brlt	.+8      	; 0xe98 <_Z13i2c_read_nackv+0x18>
     e90:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e94:	81 11       	cpse	r24, r1
     e96:	f9 cf       	rjmp	.-14     	; 0xe8a <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     e98:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e9c:	08 95       	ret

00000e9e <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     e9e:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ea2:	28 7f       	andi	r18, 0xF8	; 248
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 17       	cp	r18, r24
     eaa:	39 07       	cpc	r19, r25
     eac:	29 f0       	breq	.+10     	; 0xeb8 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     eae:	84 e9       	ldi	r24, 0x94	; 148
     eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	08 95       	ret
	}

	return(FALSE);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
}
     eba:	08 95       	ret

00000ebc <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <_Z16i2c_device_writehhPhh+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <_Z16i2c_device_writehhPhh+0x8>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <_Z16i2c_device_writehhPhh+0xa>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	5d 83       	std	Y+5, r21	; 0x05
     ed0:	4c 83       	std	Y+4, r20	; 0x04
     ed2:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     ed4:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     ed6:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z9i2c_startv>
		if(i2c_status(TW_START))
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
     ee0:	98 2f       	mov	r25, r24
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	99 23       	and	r25, r25
     ee6:	09 f4       	brne	.+2      	; 0xeea <_Z16i2c_device_writehhPhh+0x2e>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	88 23       	and	r24, r24
     eec:	11 f0       	breq	.+4      	; 0xef2 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     ef2:	68 e1       	ldi	r22, 0x18	; 24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     efa:	98 2f       	mov	r25, r24
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	99 23       	and	r25, r25
     f00:	09 f4       	brne	.+2      	; 0xf04 <_Z16i2c_device_writehhPhh+0x48>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	88 23       	and	r24, r24
     f06:	11 f0       	breq	.+4      	; 0xf0c <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	32 c0       	rjmp	.+100    	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     f0c:	68 e2       	ldi	r22, 0x28	; 40
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     f14:	98 2f       	mov	r25, r24
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	99 23       	and	r25, r25
     f1a:	09 f4       	brne	.+2      	; 0xf1e <_Z16i2c_device_writehhPhh+0x62>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	88 23       	and	r24, r24
     f20:	11 f0       	breq	.+4      	; 0xf26 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	25 c0       	rjmp	.+74     	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	98 0f       	add	r25, r24
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	88 23       	and	r24, r24
     f32:	09 f4       	brne	.+2      	; 0xf36 <_Z16i2c_device_writehhPhh+0x7a>
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	99 23       	and	r25, r25
     f38:	c1 f0       	breq	.+48     	; 0xf6a <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	98 0f       	add	r25, r24
     f40:	99 83       	std	Y+1, r25	; 0x01
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	68 e2       	ldi	r22, 0x28	; 40
     f54:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     f58:	98 2f       	mov	r25, r24
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	99 23       	and	r25, r25
     f5e:	09 f4       	brne	.+2      	; 0xf62 <_Z16i2c_device_writehhPhh+0xa6>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	88 23       	and	r24, r24
     f64:	01 f3       	breq	.-64     	; 0xf26 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     f6a:	0e 94 10 07 	call	0xe20	; 0xe20 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
}
     f70:	26 96       	adiw	r28, 0x06	; 6
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <_Z15i2c_device_readhhPhh+0xa>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <_Z15i2c_device_readhhPhh+0xc>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <_Z15i2c_device_readhhPhh+0xe>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	6b 83       	std	Y+3, r22	; 0x03
     f98:	5d 83       	std	Y+5, r21	; 0x05
     f9a:	4c 83       	std	Y+4, r20	; 0x04
     f9c:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f9e:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     fa0:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z9i2c_startv>
		if(i2c_status(TW_START))
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
     faa:	98 2f       	mov	r25, r24
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	99 23       	and	r25, r25
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <_Z15i2c_device_readhhPhh+0x32>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	88 23       	and	r24, r24
     fb6:	11 f0       	breq	.+4      	; 0xfbc <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	79 c0       	rjmp	.+242    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     fbc:	68 e1       	ldi	r22, 0x18	; 24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     fc4:	98 2f       	mov	r25, r24
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	99 23       	and	r25, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <_Z15i2c_device_readhhPhh+0x4c>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	88 23       	and	r24, r24
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	6c c0       	rjmp	.+216    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fd6:	68 e2       	ldi	r22, 0x28	; 40
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     fde:	98 2f       	mov	r25, r24
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	99 23       	and	r25, r25
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <_Z15i2c_device_readhhPhh+0x66>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	88 23       	and	r24, r24
     fea:	11 f0       	breq	.+4      	; 0xff0 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	5f c0       	rjmp	.+190    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     ff0:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
     ffa:	98 2f       	mov	r25, r24
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	99 23       	and	r25, r25
    1000:	09 f4       	brne	.+2      	; 0x1004 <_Z15i2c_device_readhhPhh+0x82>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	88 23       	and	r24, r24
    1006:	11 f0       	breq	.+4      	; 0x100c <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	51 c0       	rjmp	.+162    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	60 e4       	ldi	r22, 0x40	; 64
    1012:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
    1016:	98 2f       	mov	r25, r24
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	99 23       	and	r25, r25
    101c:	09 f4       	brne	.+2      	; 0x1020 <_Z15i2c_device_readhhPhh+0x9e>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	88 23       	and	r24, r24
    1022:	11 f0       	breq	.+4      	; 0x1028 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	43 c0       	rjmp	.+134    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    1028:	8e 81       	ldd	r24, Y+6	; 0x06
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	98 0f       	add	r25, r24
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <_Z15i2c_device_readhhPhh+0xb6>
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	99 23       	and	r25, r25
    103a:	b1 f1       	breq	.+108    	; 0x10a8 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	88 23       	and	r24, r24
    1040:	d9 f0       	breq	.+54     	; 0x1078 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	98 0f       	add	r25, r24
    1048:	99 83       	std	Y+1, r25	; 0x01
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	89 01       	movw	r16, r18
    1054:	08 0f       	add	r16, r24
    1056:	19 1f       	adc	r17, r25
    1058:	0e 94 31 07 	call	0xe62	; 0xe62 <_Z12i2c_read_ackv>
    105c:	f8 01       	movw	r30, r16
    105e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    1060:	80 e5       	ldi	r24, 0x50	; 80
    1062:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
    1066:	98 2f       	mov	r25, r24
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	99 23       	and	r25, r25
    106c:	09 f4       	brne	.+2      	; 0x1070 <_Z15i2c_device_readhhPhh+0xee>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	88 23       	and	r24, r24
    1072:	d1 f2       	breq	.-76     	; 0x1028 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	1b c0       	rjmp	.+54     	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	89 01       	movw	r16, r18
    1084:	08 0f       	add	r16, r24
    1086:	19 1f       	adc	r17, r25
    1088:	0e 94 40 07 	call	0xe80	; 0xe80 <_Z13i2c_read_nackv>
    108c:	f8 01       	movw	r30, r16
    108e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    1090:	88 e5       	ldi	r24, 0x58	; 88
    1092:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
    1096:	98 2f       	mov	r25, r24
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	99 23       	and	r25, r25
    109c:	09 f4       	brne	.+2      	; 0x10a0 <_Z15i2c_device_readhhPhh+0x11e>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	88 23       	and	r24, r24
    10a2:	11 f2       	breq	.-124    	; 0x1028 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    10a8:	0e 94 10 07 	call	0xe20	; 0xe20 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
}
    10ae:	26 96       	adiw	r28, 0x06	; 6
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    10c4:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	59 e2       	ldi	r21, 0x29	; 41
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	52 9f       	mul	r21, r18
    10d2:	f0 01       	movw	r30, r0
    10d4:	53 9f       	mul	r21, r19
    10d6:	f0 0d       	add	r31, r0
    10d8:	11 24       	eor	r1, r1
    10da:	ee 54       	subi	r30, 0x4E	; 78
    10dc:	fc 4f       	sbci	r31, 0xFC	; 252
    10de:	40 81       	ld	r20, Z
    10e0:	41 11       	cpse	r20, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <_Z16nextFullTxBufferv+0x38>
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	29 f0       	breq	.+10     	; 0x10f2 <_Z16nextFullTxBufferv+0x2e>
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	78 f3       	brcs	.-34     	; 0x10cc <_Z16nextFullTxBufferv+0x8>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	ed cf       	rjmp	.-38     	; 0x10cc <_Z16nextFullTxBufferv+0x8>
    10f2:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	08 95       	ret
    10fc:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1100:	49 e2       	ldi	r20, 0x29	; 41
    1102:	42 9f       	mul	r20, r18
    1104:	c0 01       	movw	r24, r0
    1106:	43 9f       	mul	r20, r19
    1108:	90 0d       	add	r25, r0
    110a:	11 24       	eor	r1, r1
    110c:	8e 54       	subi	r24, 0x4E	; 78
    110e:	9c 4f       	sbci	r25, 0xFC	; 252
    1110:	08 95       	ret

00001112 <_Z17nextEmptyTxBufferv>:
    1112:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	59 e2       	ldi	r21, 0x29	; 41
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	52 9f       	mul	r21, r18
    1120:	f0 01       	movw	r30, r0
    1122:	53 9f       	mul	r21, r19
    1124:	f0 0d       	add	r31, r0
    1126:	11 24       	eor	r1, r1
    1128:	ee 54       	subi	r30, 0x4E	; 78
    112a:	fc 4f       	sbci	r31, 0xFC	; 252
    112c:	40 81       	ld	r20, Z
    112e:	44 23       	and	r20, r20
    1130:	61 f0       	breq	.+24     	; 0x114a <_Z17nextEmptyTxBufferv+0x38>
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	29 f0       	breq	.+10     	; 0x1140 <_Z17nextEmptyTxBufferv+0x2e>
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	84 30       	cpi	r24, 0x04	; 4
    113a:	78 f3       	brcs	.-34     	; 0x111a <_Z17nextEmptyTxBufferv+0x8>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	ed cf       	rjmp	.-38     	; 0x111a <_Z17nextEmptyTxBufferv+0x8>
    1140:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	08 95       	ret
    114a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    114e:	49 e2       	ldi	r20, 0x29	; 41
    1150:	42 9f       	mul	r20, r18
    1152:	c0 01       	movw	r24, r0
    1154:	43 9f       	mul	r20, r19
    1156:	90 0d       	add	r25, r0
    1158:	11 24       	eor	r1, r1
    115a:	8e 54       	subi	r24, 0x4E	; 78
    115c:	9c 4f       	sbci	r25, 0xFC	; 252
    115e:	08 95       	ret

00001160 <_Z17nextEmptyRxBufferv>:
    1160:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	9f e3       	ldi	r25, 0x3F	; 63
    116a:	89 9f       	mul	r24, r25
    116c:	f0 01       	movw	r30, r0
    116e:	11 24       	eor	r1, r1
    1170:	ec 5c       	subi	r30, 0xCC	; 204
    1172:	fc 4f       	sbci	r31, 0xFC	; 252
    1174:	41 81       	ldd	r20, Z+1	; 0x01
    1176:	52 81       	ldd	r21, Z+2	; 0x02
    1178:	45 2b       	or	r20, r21
    117a:	a9 f0       	breq	.+42     	; 0x11a6 <_Z17nextEmptyRxBufferv+0x46>
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f0       	brcs	.+2      	; 0x1184 <_Z17nextEmptyRxBufferv+0x24>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	9f e3       	ldi	r25, 0x3F	; 63
    118a:	89 9f       	mul	r24, r25
    118c:	f0 01       	movw	r30, r0
    118e:	11 24       	eor	r1, r1
    1190:	ec 5c       	subi	r30, 0xCC	; 204
    1192:	fc 4f       	sbci	r31, 0xFC	; 252
    1194:	41 81       	ldd	r20, Z+1	; 0x01
    1196:	52 81       	ldd	r21, Z+2	; 0x02
    1198:	45 2b       	or	r20, r21
    119a:	29 f0       	breq	.+10     	; 0x11a6 <_Z17nextEmptyRxBufferv+0x46>
    119c:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	08 95       	ret
    11a6:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    11aa:	4f e3       	ldi	r20, 0x3F	; 63
    11ac:	42 9f       	mul	r20, r18
    11ae:	c0 01       	movw	r24, r0
    11b0:	43 9f       	mul	r20, r19
    11b2:	90 0d       	add	r25, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	8c 5c       	subi	r24, 0xCC	; 204
    11b8:	9c 4f       	sbci	r25, 0xFC	; 252
    11ba:	08 95       	ret

000011bc <_Z16nextFullRxBufferv>:
    11bc:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	9f e3       	ldi	r25, 0x3F	; 63
    11c6:	89 9f       	mul	r24, r25
    11c8:	f0 01       	movw	r30, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	ec 5c       	subi	r30, 0xCC	; 204
    11ce:	fc 4f       	sbci	r31, 0xFC	; 252
    11d0:	41 81       	ldd	r20, Z+1	; 0x01
    11d2:	52 81       	ldd	r21, Z+2	; 0x02
    11d4:	45 2b       	or	r20, r21
    11d6:	a9 f4       	brne	.+42     	; 0x1202 <_Z16nextFullRxBufferv+0x46>
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <_Z16nextFullRxBufferv+0x24>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	9f e3       	ldi	r25, 0x3F	; 63
    11e6:	89 9f       	mul	r24, r25
    11e8:	f0 01       	movw	r30, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	ec 5c       	subi	r30, 0xCC	; 204
    11ee:	fc 4f       	sbci	r31, 0xFC	; 252
    11f0:	41 81       	ldd	r20, Z+1	; 0x01
    11f2:	52 81       	ldd	r21, Z+2	; 0x02
    11f4:	45 2b       	or	r20, r21
    11f6:	29 f4       	brne	.+10     	; 0x1202 <_Z16nextFullRxBufferv+0x46>
    11f8:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	08 95       	ret
    1202:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1206:	4f e3       	ldi	r20, 0x3F	; 63
    1208:	42 9f       	mul	r20, r18
    120a:	c0 01       	movw	r24, r0
    120c:	43 9f       	mul	r20, r19
    120e:	90 0d       	add	r25, r0
    1210:	11 24       	eor	r1, r1
    1212:	8c 5c       	subi	r24, 0xCC	; 204
    1214:	9c 4f       	sbci	r25, 0xFC	; 252
    1216:	08 95       	ret

00001218 <_Z19linkbusTxInProgressv>:
    1218:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZL17linkbus_tx_active>
    121c:	08 95       	ret

0000121e <_Z16linkbus_start_txv>:
    121e:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_ZL17linkbus_tx_active>
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	91 11       	cpse	r25, r1
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	91 11       	cpse	r25, r1
    122a:	08 c0       	rjmp	.+16     	; 0x123c <_Z16linkbus_start_txv+0x1e>
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <_ZL17linkbus_tx_active>
    1232:	e1 ec       	ldi	r30, 0xC1	; 193
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	90 81       	ld	r25, Z
    1238:	90 62       	ori	r25, 0x20	; 32
    123a:	90 83       	st	Z, r25
    123c:	08 95       	ret

0000123e <_Z14linkbus_end_txv>:
    123e:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZL17linkbus_tx_active>
    1242:	88 23       	and	r24, r24
    1244:	39 f0       	breq	.+14     	; 0x1254 <_Z14linkbus_end_txv+0x16>
    1246:	e1 ec       	ldi	r30, 0xC1	; 193
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7d       	andi	r24, 0xDF	; 223
    124e:	80 83       	st	Z, r24
    1250:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZL17linkbus_tx_active>
    1254:	08 95       	ret

00001256 <_Z12linkbus_initm>:
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	8e e7       	ldi	r24, 0x7E	; 126
    125c:	e4 e3       	ldi	r30, 0x34	; 52
    125e:	f3 e0       	ldi	r31, 0x03	; 3
    1260:	df 01       	movw	r26, r30
    1262:	1d 92       	st	X+, r1
    1264:	8a 95       	dec	r24
    1266:	e9 f7       	brne	.-6      	; 0x1262 <_Z12linkbus_initm+0xc>
    1268:	e2 eb       	ldi	r30, 0xB2	; 178
    126a:	f3 e0       	ldi	r31, 0x03	; 3
    126c:	10 82       	st	Z, r1
    126e:	11 a6       	std	Z+41, r1	; 0x29
    1270:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9tx_buffer+0x52>
    1274:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZL9tx_buffer+0x7b>
    1278:	60 e4       	ldi	r22, 0x40	; 64
    127a:	72 e4       	ldi	r23, 0x42	; 66
    127c:	8f e0       	ldi	r24, 0x0F	; 15
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 2e 2c 	call	0x585c	; 0x585c <__udivmodsi4>
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	31 09       	sbc	r19, r1
    1288:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    128c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1290:	88 e9       	ldi	r24, 0x98	; 152
    1292:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1296:	8e e0       	ldi	r24, 0x0E	; 14
    1298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    129c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    12a0:	08 95       	ret

000012a2 <_Z15linkbus_disablev>:
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    12a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    12ac:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z14linkbus_end_txv>
    12b0:	8e e7       	ldi	r24, 0x7E	; 126
    12b2:	e4 e3       	ldi	r30, 0x34	; 52
    12b4:	f3 e0       	ldi	r31, 0x03	; 3
    12b6:	df 01       	movw	r26, r30
    12b8:	1d 92       	st	X+, r1
    12ba:	8a 95       	dec	r24
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <_Z15linkbus_disablev+0x16>
    12be:	e2 eb       	ldi	r30, 0xB2	; 178
    12c0:	f3 e0       	ldi	r31, 0x03	; 3
    12c2:	10 82       	st	Z, r1
    12c4:	11 a6       	std	Z+41, r1	; 0x29
    12c6:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9tx_buffer+0x52>
    12ca:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZL9tx_buffer+0x7b>
    12ce:	08 95       	ret

000012d0 <_Z17linkbus_send_textPc>:
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    12dc:	21 11       	cpse	r18, r1
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <_Z17linkbus_send_textPc+0x38>
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	a1 f0       	breq	.+40     	; 0x130c <_Z17linkbus_send_textPc+0x3c>
    12e4:	8c 01       	movw	r16, r24
    12e6:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z17nextEmptyTxBufferv>
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	b9 f4       	brne	.+46     	; 0x131c <_Z17linkbus_send_textPc+0x4c>
    12ee:	c8 ec       	ldi	r28, 0xC8	; 200
    12f0:	d0 e0       	ldi	r29, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <_Z17linkbus_send_textPc+0x28>
    12f4:	20 97       	sbiw	r28, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <_Z17linkbus_send_textPc+0x40>
    12f8:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_ZL17linkbus_tx_active>
    12fc:	99 23       	and	r25, r25
    12fe:	51 f0       	breq	.+20     	; 0x1314 <_Z17linkbus_send_textPc+0x44>
    1300:	20 97       	sbiw	r28, 0x00	; 0
    1302:	d1 f0       	breq	.+52     	; 0x1338 <_Z17linkbus_send_textPc+0x68>
    1304:	21 97       	sbiw	r28, 0x01	; 1
    1306:	f8 cf       	rjmp	.-16     	; 0x12f8 <_Z17linkbus_send_textPc+0x28>
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	1b c0       	rjmp	.+54     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	19 c0       	rjmp	.+50     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	17 c0       	rjmp	.+46     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    1314:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z17nextEmptyTxBufferv>
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	61 f3       	breq	.-40     	; 0x12f4 <_Z17linkbus_send_textPc+0x24>
    131c:	1f 93       	push	r17
    131e:	0f 93       	push	r16
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
    1324:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    1328:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z16linkbus_start_txv>
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    1338:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z17nextEmptyTxBufferv>
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	71 f7       	brne	.-36     	; 0x131c <_Z17linkbus_send_textPc+0x4c>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <_Z17lb_send_NewPromptv>:
    134c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1350:	81 11       	cpse	r24, r1
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <_Z17lb_send_NewPromptv+0x14>
    1354:	81 e2       	ldi	r24, 0x21	; 33
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    135c:	81 11       	cpse	r24, r1
    135e:	fa cf       	rjmp	.-12     	; 0x1354 <_Z17lb_send_NewPromptv+0x8>
    1360:	08 95       	ret

00001362 <_Z15lb_send_NewLinev>:
    1362:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1366:	81 11       	cpse	r24, r1
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <_Z15lb_send_NewLinev+0x10>
    136a:	84 e2       	ldi	r24, 0x24	; 36
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    1372:	08 95       	ret

00001374 <_Z12lb_echo_charh>:
    1374:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1378:	91 11       	cpse	r25, r1
    137a:	07 c0       	rjmp	.+14     	; 0x138a <_Z12lb_echo_charh+0x16>
    137c:	e7 e5       	ldi	r30, 0x57	; 87
    137e:	f4 e0       	ldi	r31, 0x04	; 4
    1380:	80 83       	st	Z, r24
    1382:	11 82       	std	Z+1, r1	; 0x01
    1384:	cf 01       	movw	r24, r30
    1386:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    138a:	08 95       	ret

0000138c <_Z14lb_send_stringPch>:
    138c:	cf 93       	push	r28
    138e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1392:	21 11       	cpse	r18, r1
    1394:	25 c0       	rjmp	.+74     	; 0x13e0 <_Z14lb_send_stringPch+0x54>
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	29 f1       	breq	.+74     	; 0x13e4 <_Z14lb_send_stringPch+0x58>
    139a:	fc 01       	movw	r30, r24
    139c:	01 90       	ld	r0, Z+
    139e:	00 20       	and	r0, r0
    13a0:	e9 f7       	brne	.-6      	; 0x139c <_Z14lb_send_stringPch+0x10>
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	e8 1b       	sub	r30, r24
    13a6:	f9 0b       	sbc	r31, r25
    13a8:	ba 97       	sbiw	r30, 0x2a	; 42
    13aa:	f0 f4       	brcc	.+60     	; 0x13e8 <_Z14lb_send_stringPch+0x5c>
    13ac:	c6 2f       	mov	r28, r22
    13ae:	bc 01       	movw	r22, r24
    13b0:	49 e2       	ldi	r20, 0x29	; 41
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	87 e5       	ldi	r24, 0x57	; 87
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <strncpy>
    13bc:	cc 23       	and	r28, r28
    13be:	59 f0       	breq	.+22     	; 0x13d6 <_Z14lb_send_stringPch+0x4a>
    13c0:	87 e5       	ldi	r24, 0x57	; 87
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    13c8:	81 11       	cpse	r24, r1
    13ca:	fa cf       	rjmp	.-12     	; 0x13c0 <_Z14lb_send_stringPch+0x34>
    13cc:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZL17linkbus_tx_active>
    13d0:	81 11       	cpse	r24, r1
    13d2:	fc cf       	rjmp	.-8      	; 0x13cc <_Z14lb_send_stringPch+0x40>
    13d4:	0a c0       	rjmp	.+20     	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13d6:	87 e5       	ldi	r24, 0x57	; 87
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return !g_bus_disabled;
    13ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	91 11       	cpse	r25, r1
    13f6:	80 e0       	ldi	r24, 0x00	; 0
}
    13f8:	08 95       	ret

000013fa <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	8b e0       	ldi	r24, 0x0B	; 11
    1420:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1424:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	8c e2       	ldi	r24, 0x2C	; 44
    142c:	95 e0       	ldi	r25, 0x05	; 5
    142e:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN8Goertzel9DataPointEi>
    1432:	88 23       	and	r24, r24
    1434:	29 f0       	breq	.+10     	; 0x1440 <__vector_21+0x46>
    1436:	ea e7       	ldi	r30, 0x7A	; 122
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	87 7f       	andi	r24, 0xF7	; 247
    143e:	80 83       	st	Z, r24
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	8b e0       	ldi	r24, 0x0B	; 11
    1444:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_18>:
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	1f 93       	push	r17
    1476:	2f 93       	push	r18
    1478:	3f 93       	push	r19
    147a:	4f 93       	push	r20
    147c:	5f 93       	push	r21
    147e:	6f 93       	push	r22
    1480:	7f 93       	push	r23
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	af 93       	push	r26
    1488:	bf 93       	push	r27
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1496:	c0 91 01 05 	lds	r28, 0x0501	; 0x800501 <_ZZ11__vector_18E4buff>
    149a:	d0 91 02 05 	lds	r29, 0x0502	; 0x800502 <_ZZ11__vector_18E4buff+0x1>
    149e:	20 97       	sbiw	r28, 0x00	; 0
    14a0:	51 f4       	brne	.+20     	; 0x14b6 <__vector_18+0x4c>
    14a2:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z17nextEmptyRxBufferv>
    14a6:	ec 01       	movw	r28, r24
    14a8:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZZ11__vector_18E4buff+0x1>
    14ac:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZZ11__vector_18E4buff>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <__vector_18+0x4c>
    14b4:	62 c1       	rjmp	.+708    	; 0x177a <__vector_18+0x310>
    14b6:	81 2f       	mov	r24, r17
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <toupper>
    14be:	9c 01       	movw	r18, r24
    14c0:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZZ11__vector_18E11ignoreCount>
    14c4:	88 23       	and	r24, r24
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <__vector_18+0x66>
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZZ11__vector_18E11ignoreCount>
    14ce:	55 c1       	rjmp	.+682    	; 0x177a <__vector_18+0x310>
    14d0:	2b 31       	cpi	r18, 0x1B	; 27
    14d2:	21 f4       	brne	.+8      	; 0x14dc <__vector_18+0x72>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZZ11__vector_18E11ignoreCount>
    14da:	4f c1       	rjmp	.+670    	; 0x177a <__vector_18+0x310>
    14dc:	2d 30       	cpi	r18, 0x0D	; 13
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__vector_18+0x78>
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <__vector_18+0xf6>
    14e2:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <_ZZ11__vector_18E13receiving_msg>
    14e6:	88 23       	and	r24, r24
    14e8:	31 f1       	breq	.+76     	; 0x1536 <__vector_18+0xcc>
    14ea:	e0 91 ff 04 	lds	r30, 0x04FF	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    14ee:	ee 23       	and	r30, r30
    14f0:	f9 f0       	breq	.+62     	; 0x1530 <__vector_18+0xc6>
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	88 83       	st	Y, r24
    14f6:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    14fa:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZZ11__vector_18E11field_index>
    1506:	88 23       	and	r24, r24
    1508:	79 f0       	breq	.+30     	; 0x1528 <__vector_18+0xbe>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	40 91 bb 04 	lds	r20, 0x04BB	; 0x8004bb <_ZZ11__vector_18E9field_len>
    1512:	54 e1       	ldi	r21, 0x14	; 20
    1514:	58 9f       	mul	r21, r24
    1516:	90 01       	movw	r18, r0
    1518:	59 9f       	mul	r21, r25
    151a:	30 0d       	add	r19, r0
    151c:	11 24       	eor	r1, r1
    151e:	c2 0f       	add	r28, r18
    1520:	d3 1f       	adc	r29, r19
    1522:	c4 0f       	add	r28, r20
    1524:	d1 1d       	adc	r29, r1
    1526:	1b 82       	std	Y+3, r1	; 0x03
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	e0 54       	subi	r30, 0x40	; 64
    152c:	fb 4f       	sbci	r31, 0xFB	; 251
    152e:	10 82       	st	Z, r1
    1530:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__vector_18+0xd4>
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	9f e7       	ldi	r25, 0x7F	; 127
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    1542:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <_ZZ11__vector_18E9field_len>
    1546:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    154a:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    154e:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZZ11__vector_18E11field_index>
    1552:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZZ11__vector_18E4buff+0x1>
    1556:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZZ11__vector_18E4buff>
    155a:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <_ZZ11__vector_18E13receiving_msg>
    155e:	0d c1       	rjmp	.+538    	; 0x177a <__vector_18+0x310>
    1560:	22 23       	and	r18, r18
    1562:	09 f4       	brne	.+2      	; 0x1566 <__vector_18+0xfc>
    1564:	0a c1       	rjmp	.+532    	; 0x177a <__vector_18+0x310>
    1566:	e0 91 ff 04 	lds	r30, 0x04FF	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    156a:	4e 2f       	mov	r20, r30
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	da 01       	movw	r26, r20
    1570:	a0 54       	subi	r26, 0x40	; 64
    1572:	bb 4f       	sbci	r27, 0xFB	; 251
    1574:	2c 93       	st	X, r18
    1576:	ee 23       	and	r30, r30
    1578:	09 f4       	brne	.+2      	; 0x157c <__vector_18+0x112>
    157a:	d6 c0       	rjmp	.+428    	; 0x1728 <__vector_18+0x2be>
    157c:	2f 37       	cpi	r18, 0x7F	; 127
    157e:	09 f0       	breq	.+2      	; 0x1582 <__vector_18+0x118>
    1580:	5f c0       	rjmp	.+190    	; 0x1640 <__vector_18+0x1d6>
    1582:	e1 50       	subi	r30, 0x01	; 1
    1584:	e0 93 ff 04 	sts	0x04FF, r30	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    1588:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZZ11__vector_18E11field_index>
    158c:	81 11       	cpse	r24, r1
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <__vector_18+0x14c>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	e0 54       	subi	r30, 0x40	; 64
    1594:	fb 4f       	sbci	r31, 0xFB	; 251
    1596:	40 81       	ld	r20, Z
    1598:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    159c:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    15a0:	84 1b       	sub	r24, r20
    15a2:	91 09       	sbc	r25, r1
    15a4:	6a e0       	ldi	r22, 0x0A	; 10
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    15ac:	70 93 be 04 	sts	0x04BE, r23	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    15b0:	60 93 bd 04 	sts	0x04BD, r22	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    15b4:	39 c0       	rjmp	.+114    	; 0x1628 <__vector_18+0x1be>
    15b6:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <_ZZ11__vector_18E9field_len>
    15ba:	99 23       	and	r25, r25
    15bc:	91 f0       	breq	.+36     	; 0x15e2 <__vector_18+0x178>
    15be:	4f ef       	ldi	r20, 0xFF	; 255
    15c0:	49 0f       	add	r20, r25
    15c2:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <_ZZ11__vector_18E9field_len>
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	54 e1       	ldi	r21, 0x14	; 20
    15cc:	58 9f       	mul	r21, r24
    15ce:	b0 01       	movw	r22, r0
    15d0:	59 9f       	mul	r21, r25
    15d2:	70 0d       	add	r23, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	c6 0f       	add	r28, r22
    15d8:	d7 1f       	adc	r29, r23
    15da:	c4 0f       	add	r28, r20
    15dc:	d1 1d       	adc	r29, r1
    15de:	1b 82       	std	Y+3, r1	; 0x03
    15e0:	23 c0       	rjmp	.+70     	; 0x1628 <__vector_18+0x1be>
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	e0 54       	subi	r30, 0x40	; 64
    15e6:	fb 4f       	sbci	r31, 0xFB	; 251
    15e8:	90 81       	ld	r25, Z
    15ea:	90 32       	cpi	r25, 0x20	; 32
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <__vector_18+0x1ac>
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <_ZZ11__vector_18E11field_index>
    15f4:	de 01       	movw	r26, r28
    15f6:	94 e1       	ldi	r25, 0x14	; 20
    15f8:	89 9f       	mul	r24, r25
    15fa:	a0 0d       	add	r26, r0
    15fc:	b1 1d       	adc	r27, r1
    15fe:	11 24       	eor	r1, r1
    1600:	13 96       	adiw	r26, 0x03	; 3
    1602:	fd 01       	movw	r30, r26
    1604:	01 90       	ld	r0, Z+
    1606:	00 20       	and	r0, r0
    1608:	e9 f7       	brne	.-6      	; 0x1604 <__vector_18+0x19a>
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	ea 1b       	sub	r30, r26
    160e:	fb 0b       	sbc	r31, r27
    1610:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <_ZZ11__vector_18E9field_len>
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <__vector_18+0x1be>
    1616:	94 e1       	ldi	r25, 0x14	; 20
    1618:	89 9f       	mul	r24, r25
    161a:	c0 0d       	add	r28, r0
    161c:	d1 1d       	adc	r29, r1
    161e:	11 24       	eor	r1, r1
    1620:	1b 82       	std	Y+3, r1	; 0x03
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <_ZZ11__vector_18E11field_index>
    1628:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    162c:	e8 2f       	mov	r30, r24
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	e0 54       	subi	r30, 0x40	; 64
    1632:	fb 4f       	sbci	r31, 0xFB	; 251
    1634:	10 82       	st	Z, r1
    1636:	81 11       	cpse	r24, r1
    1638:	93 c0       	rjmp	.+294    	; 0x1760 <__vector_18+0x2f6>
    163a:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <_ZZ11__vector_18E13receiving_msg>
    163e:	90 c0       	rjmp	.+288    	; 0x1760 <__vector_18+0x2f6>
    1640:	20 32       	cpi	r18, 0x20	; 32
    1642:	79 f5       	brne	.+94     	; 0x16a2 <__vector_18+0x238>
    1644:	fa 01       	movw	r30, r20
    1646:	e1 54       	subi	r30, 0x41	; 65
    1648:	fb 4f       	sbci	r31, 0xFB	; 251
    164a:	80 81       	ld	r24, Z
    164c:	80 32       	cpi	r24, 0x20	; 32
    164e:	09 f4       	brne	.+2      	; 0x1652 <__vector_18+0x1e8>
    1650:	94 c0       	rjmp	.+296    	; 0x177a <__vector_18+0x310>
    1652:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZZ11__vector_18E11field_index>
    1656:	68 2f       	mov	r22, r24
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	fb 01       	movw	r30, r22
    165c:	31 96       	adiw	r30, 0x01	; 1
    165e:	33 97       	sbiw	r30, 0x03	; 3
    1660:	0c f0       	brlt	.+2      	; 0x1664 <__vector_18+0x1fa>
    1662:	8b c0       	rjmp	.+278    	; 0x177a <__vector_18+0x310>
    1664:	88 23       	and	r24, r24
    1666:	79 f0       	breq	.+30     	; 0x1686 <__vector_18+0x21c>
    1668:	61 50       	subi	r22, 0x01	; 1
    166a:	71 09       	sbc	r23, r1
    166c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <_ZZ11__vector_18E9field_len>
    1670:	a4 e1       	ldi	r26, 0x14	; 20
    1672:	a6 9f       	mul	r26, r22
    1674:	f0 01       	movw	r30, r0
    1676:	a7 9f       	mul	r26, r23
    1678:	f0 0d       	add	r31, r0
    167a:	11 24       	eor	r1, r1
    167c:	ce 0f       	add	r28, r30
    167e:	df 1f       	adc	r29, r31
    1680:	c9 0f       	add	r28, r25
    1682:	d1 1d       	adc	r29, r1
    1684:	1b 82       	std	Y+3, r1	; 0x03
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <_ZZ11__vector_18E11field_index>
    168c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <_ZZ11__vector_18E9field_len>
    1690:	4f 5f       	subi	r20, 0xFF	; 255
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
    1694:	4e 33       	cpi	r20, 0x3E	; 62
    1696:	51 05       	cpc	r21, r1
    1698:	0c f0       	brlt	.+2      	; 0x169c <__vector_18+0x232>
    169a:	4e e3       	ldi	r20, 0x3E	; 62
    169c:	40 93 ff 04 	sts	0x04FF, r20	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    16a0:	5f c0       	rjmp	.+190    	; 0x1760 <__vector_18+0x2f6>
    16a2:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <_ZZ11__vector_18E9field_len>
    16a6:	84 31       	cpi	r24, 0x14	; 20
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <__vector_18+0x242>
    16aa:	67 c0       	rjmp	.+206    	; 0x177a <__vector_18+0x310>
    16ac:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <_ZZ11__vector_18E11field_index>
    16b0:	41 11       	cpse	r20, r1
    16b2:	19 c0       	rjmp	.+50     	; 0x16e6 <__vector_18+0x27c>
    16b4:	40 91 bd 04 	lds	r20, 0x04BD	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    16b8:	50 91 be 04 	lds	r21, 0x04BE	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    16bc:	ba 01       	movw	r22, r20
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	44 0f       	add	r20, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	44 0f       	add	r20, r20
    16c8:	55 1f       	adc	r21, r21
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	46 0f       	add	r20, r22
    16d0:	57 1f       	adc	r21, r23
    16d2:	42 0f       	add	r20, r18
    16d4:	51 1d       	adc	r21, r1
    16d6:	50 93 be 04 	sts	0x04BE, r21	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    16da:	40 93 bd 04 	sts	0x04BD, r20	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <_ZZ11__vector_18E9field_len>
    16e4:	16 c0       	rjmp	.+44     	; 0x1712 <__vector_18+0x2a8>
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	51 09       	sbc	r21, r1
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	98 0f       	add	r25, r24
    16f0:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <_ZZ11__vector_18E9field_len>
    16f4:	e4 e1       	ldi	r30, 0x14	; 20
    16f6:	e4 9f       	mul	r30, r20
    16f8:	b0 01       	movw	r22, r0
    16fa:	e5 9f       	mul	r30, r21
    16fc:	70 0d       	add	r23, r0
    16fe:	11 24       	eor	r1, r1
    1700:	c6 0f       	add	r28, r22
    1702:	d7 1f       	adc	r29, r23
    1704:	fe 01       	movw	r30, r28
    1706:	e8 0f       	add	r30, r24
    1708:	f1 1d       	adc	r31, r1
    170a:	23 83       	std	Z+3, r18	; 0x03
    170c:	c9 0f       	add	r28, r25
    170e:	d1 1d       	adc	r29, r1
    1710:	1b 82       	std	Y+3, r1	; 0x03
    1712:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	8e 33       	cpi	r24, 0x3E	; 62
    171c:	91 05       	cpc	r25, r1
    171e:	0c f0       	brlt	.+2      	; 0x1722 <__vector_18+0x2b8>
    1720:	8e e3       	ldi	r24, 0x3E	; 62
    1722:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    1726:	1c c0       	rjmp	.+56     	; 0x1760 <__vector_18+0x2f6>
    1728:	2f 37       	cpi	r18, 0x7F	; 127
    172a:	41 f4       	brne	.+16     	; 0x173c <__vector_18+0x2d2>
    172c:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    1730:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    1734:	18 16       	cp	r1, r24
    1736:	19 06       	cpc	r1, r25
    1738:	bc f0       	brlt	.+46     	; 0x1768 <__vector_18+0x2fe>
    173a:	1b c0       	rjmp	.+54     	; 0x1772 <__vector_18+0x308>
    173c:	20 32       	cpi	r18, 0x20	; 32
    173e:	e9 f0       	breq	.+58     	; 0x177a <__vector_18+0x310>
    1740:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZZ11__vector_18E11field_index>
    1744:	c9 01       	movw	r24, r18
    1746:	99 27       	eor	r25, r25
    1748:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    174c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    1750:	1b 82       	std	Y+3, r1	; 0x03
    1752:	1f 8a       	std	Y+23, r1	; 0x17
    1754:	1b a6       	std	Y+43, r1	; 0x2b
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <_ZZ11__vector_18E13receiving_msg>
    175c:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <_ZZ11__vector_18E9charIndex>
    1760:	82 2f       	mov	r24, r18
    1762:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z12lb_echo_charh>
    1766:	09 c0       	rjmp	.+18     	; 0x177a <__vector_18+0x310>
    1768:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    176c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    1770:	f7 cf       	rjmp	.-18     	; 0x1760 <__vector_18+0x2f6>
    1772:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <_ZZ11__vector_18E6msg_ID+0x1>
    1776:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <_ZZ11__vector_18E6msg_ID>
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	7f 91       	pop	r23
    178c:	6f 91       	pop	r22
    178e:	5f 91       	pop	r21
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	1f 91       	pop	r17
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_19>:
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
    17c4:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <_ZZ11__vector_19E4buff>
    17c8:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <_ZZ11__vector_19E4buff+0x1>
    17cc:	89 2b       	or	r24, r25
    17ce:	31 f4       	brne	.+12     	; 0x17dc <__vector_19+0x3a>
    17d0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_Z16nextFullTxBufferv>
    17d4:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <_ZZ11__vector_19E4buff+0x1>
    17d8:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <_ZZ11__vector_19E4buff>
    17dc:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <_ZZ11__vector_19E4buff>
    17e0:	f0 91 ba 04 	lds	r31, 0x04BA	; 0x8004ba <_ZZ11__vector_19E4buff+0x1>
    17e4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_ZZ11__vector_19E9charIndex>
    17e8:	df 01       	movw	r26, r30
    17ea:	a8 0f       	add	r26, r24
    17ec:	b1 1d       	adc	r27, r1
    17ee:	9c 91       	ld	r25, X
    17f0:	99 23       	and	r25, r25
    17f2:	31 f0       	breq	.+12     	; 0x1800 <__vector_19+0x5e>
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <_ZZ11__vector_19E9charIndex>
    17fa:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__vector_19+0x78>
    1800:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <_ZZ11__vector_19E9charIndex>
    1804:	10 82       	st	Z, r1
    1806:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_Z16nextFullTxBufferv>
    180a:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <_ZZ11__vector_19E4buff+0x1>
    180e:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <_ZZ11__vector_19E4buff>
    1812:	89 2b       	or	r24, r25
    1814:	11 f4       	brne	.+4      	; 0x181a <__vector_19+0x78>
    1816:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z14linkbus_end_txv>
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_14>:
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <_ZZ11__vector_14E6toggle>
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	81 11       	cpse	r24, r1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <_ZZ11__vector_14E6toggle>
    186c:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <g_audio_tone_state>
    1870:	99 23       	and	r25, r25
    1872:	61 f0       	breq	.+24     	; 0x188c <__vector_14+0x50>
    1874:	81 11       	cpse	r24, r1
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <__vector_14+0x46>
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	89 e0       	ldi	r24, 0x09	; 9
    187c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <__vector_14+0x58>
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	89 e0       	ldi	r24, 0x09	; 9
    1886:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <__vector_14+0x58>
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	89 e0       	ldi	r24, 0x09	; 9
    1890:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_11>:
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_sendAMmodulation>
    18cc:	81 11       	cpse	r24, r1
    18ce:	2e c0       	rjmp	.+92     	; 0x192c <__vector_11+0x76>
    18d0:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZZ11__vector_11E5index>
    18d4:	81 11       	cpse	r24, r1
    18d6:	2a c0       	rjmp	.+84     	; 0x192c <__vector_11+0x76>
    18d8:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <g_sendAMmodulationConstantly>
    18dc:	88 23       	and	r24, r24
    18de:	91 f0       	breq	.+36     	; 0x1904 <__vector_11+0x4e>
    18e0:	34 c0       	rjmp	.+104    	; 0x194a <__vector_11+0x94>
    18e2:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZZ11__vector_11E5index>
    18e6:	98 b1       	in	r25, 0x08	; 8
    18e8:	8f 70       	andi	r24, 0x0F	; 15
    18ea:	90 7f       	andi	r25, 0xF0	; 240
    18ec:	89 2b       	or	r24, r25
    18ee:	88 b9       	out	0x08, r24	; 8
    18f0:	9b b1       	in	r25, 0x0b	; 11
    18f2:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <_ZZ11__vector_11E11controlPins>
    18f6:	80 73       	andi	r24, 0x30	; 48
    18f8:	82 95       	swap	r24
    18fa:	8f 70       	andi	r24, 0x0F	; 15
    18fc:	9c 7f       	andi	r25, 0xFC	; 252
    18fe:	89 2b       	or	r24, r25
    1900:	8b b9       	out	0x0b, r24	; 11
    1902:	2b c0       	rjmp	.+86     	; 0x195a <__vector_11+0xa4>
    1904:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <_ZZ11__vector_11E11controlPins>
    1908:	8f 33       	cpi	r24, 0x3F	; 63
    190a:	39 f1       	breq	.+78     	; 0x195a <__vector_11+0xa4>
    190c:	8f e3       	ldi	r24, 0x3F	; 63
    190e:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <_ZZ11__vector_11E11controlPins>
    1912:	88 b1       	in	r24, 0x08	; 8
    1914:	8f 60       	ori	r24, 0x0F	; 15
    1916:	88 b9       	out	0x08, r24	; 8
    1918:	9b b1       	in	r25, 0x0b	; 11
    191a:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <_ZZ11__vector_11E11controlPins>
    191e:	80 73       	andi	r24, 0x30	; 48
    1920:	82 95       	swap	r24
    1922:	8f 70       	andi	r24, 0x0F	; 15
    1924:	9c 7f       	andi	r25, 0xFC	; 252
    1926:	89 2b       	or	r24, r25
    1928:	8b b9       	out	0x0b, r24	; 11
    192a:	17 c0       	rjmp	.+46     	; 0x195a <__vector_11+0xa4>
    192c:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <_ZZ11__vector_11E5index>
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	9e 0f       	add	r25, r30
    1934:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <_ZZ11__vector_11E5index>
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	eb 57       	subi	r30, 0x7B	; 123
    193c:	fa 4f       	sbci	r31, 0xFA	; 250
    193e:	80 81       	ld	r24, Z
    1940:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <_ZZ11__vector_11E11controlPins>
    1944:	90 32       	cpi	r25, 0x20	; 32
    1946:	68 f6       	brcc	.-102    	; 0x18e2 <__vector_11+0x2c>
    1948:	ce cf       	rjmp	.-100    	; 0x18e6 <__vector_11+0x30>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_ZZ11__vector_11E5index>
    1950:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <g_dataModulation>
    1954:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <_ZZ11__vector_11E11controlPins>
    1958:	c6 cf       	rjmp	.-116    	; 0x18e6 <__vector_11+0x30>
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <_Z23clockConfigurationCheckv>:
    196c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    1970:	88 23       	and	r24, r24
    1972:	09 f4       	brne	.+2      	; 0x1976 <_Z23clockConfigurationCheckv+0xa>
    1974:	57 c0       	rjmp	.+174    	; 0x1a24 <_Z23clockConfigurationCheckv+0xb8>
    1976:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    197a:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    197e:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    1982:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    1986:	89 2b       	or	r24, r25
    1988:	8a 2b       	or	r24, r26
    198a:	8b 2b       	or	r24, r27
    198c:	09 f4       	brne	.+2      	; 0x1990 <_Z23clockConfigurationCheckv+0x24>
    198e:	4c c0       	rjmp	.+152    	; 0x1a28 <_Z23clockConfigurationCheckv+0xbc>
    1990:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    1994:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    1998:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    199c:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    19a0:	89 2b       	or	r24, r25
    19a2:	8a 2b       	or	r24, r26
    19a4:	8b 2b       	or	r24, r27
    19a6:	09 f4       	brne	.+2      	; 0x19aa <_Z23clockConfigurationCheckv+0x3e>
    19a8:	41 c0       	rjmp	.+130    	; 0x1a2c <_Z23clockConfigurationCheckv+0xc0>
    19aa:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    19ae:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    19b2:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    19b6:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    19ba:	81 15       	cp	r24, r1
    19bc:	96 46       	sbci	r25, 0x66	; 102
    19be:	ae 4e       	sbci	r26, 0xEE	; 238
    19c0:	bf 45       	sbci	r27, 0x5F	; 95
    19c2:	b0 f1       	brcs	.+108    	; 0x1a30 <_Z23clockConfigurationCheckv+0xc4>
    19c4:	40 91 a9 05 	lds	r20, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    19c8:	50 91 aa 05 	lds	r21, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    19cc:	60 91 ab 05 	lds	r22, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    19d0:	70 91 ac 05 	lds	r23, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    19d4:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
    19d8:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    19dc:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    19e0:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    19e4:	84 17       	cp	r24, r20
    19e6:	95 07       	cpc	r25, r21
    19e8:	a6 07       	cpc	r26, r22
    19ea:	b7 07       	cpc	r27, r23
    19ec:	18 f5       	brcc	.+70     	; 0x1a34 <_Z23clockConfigurationCheckv+0xc8>
    19ee:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    19f2:	88 23       	and	r24, r24
    19f4:	09 f1       	breq	.+66     	; 0x1a38 <_Z23clockConfigurationCheckv+0xcc>
    19f6:	40 91 b1 05 	lds	r20, 0x05B1	; 0x8005b1 <g_current_epoch>
    19fa:	50 91 b2 05 	lds	r21, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    19fe:	60 91 b3 05 	lds	r22, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    1a02:	70 91 b4 05 	lds	r23, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    1a06:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    1a0a:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    1a0e:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    1a12:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    1a16:	84 17       	cp	r24, r20
    1a18:	95 07       	cpc	r25, r21
    1a1a:	a6 07       	cpc	r26, r22
    1a1c:	b7 07       	cpc	r27, r23
    1a1e:	70 f4       	brcc	.+28     	; 0x1a3c <_Z23clockConfigurationCheckv+0xd0>
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	08 95       	ret
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	08 95       	ret
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	08 95       	ret
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	08 95       	ret
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	08 95       	ret
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	08 95       	ret
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	08 95       	ret
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	08 95       	ret

00001a40 <_Z13sendMorseToneh>:
    1a40:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <g_lastSeconds>
    1a44:	91 11       	cpse	r25, r1
    1a46:	0a c0       	rjmp	.+20     	; 0x1a5c <_Z13sendMorseToneh+0x1c>
    1a48:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <g_fox_tone_offset>
    1a4c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <g_fox_tone_offset+0x1>
    1a50:	9f e2       	ldi	r25, 0x2F	; 47
    1a52:	92 1b       	sub	r25, r18
    1a54:	97 bd       	out	0x27, r25	; 39
    1a56:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <g_audio_tone_state>
    1a5a:	08 95       	ret
    1a5c:	8f e2       	ldi	r24, 0x2F	; 47
    1a5e:	87 bd       	out	0x27, r24	; 39
    1a60:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_audio_tone_state>
    1a64:	08 95       	ret

00001a66 <__vector_8>:
    1a66:	1f 92       	push	r1
    1a68:	0f 92       	push	r0
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	0f 92       	push	r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	2f 93       	push	r18
    1a72:	3f 93       	push	r19
    1a74:	4f 93       	push	r20
    1a76:	5f 93       	push	r21
    1a78:	6f 93       	push	r22
    1a7a:	7f 93       	push	r23
    1a7c:	8f 93       	push	r24
    1a7e:	9f 93       	push	r25
    1a80:	af 93       	push	r26
    1a82:	bf 93       	push	r27
    1a84:	ef 93       	push	r30
    1a86:	ff 93       	push	r31
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <__vector_8+0x28>
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <g_tick_count>
    1a96:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <g_tick_count+0x1>
    1a9a:	a0 91 2f 05 	lds	r26, 0x052F	; 0x80052f <g_tick_count+0x2>
    1a9e:	b0 91 30 05 	lds	r27, 0x0530	; 0x800530 <g_tick_count+0x3>
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <g_tick_count>
    1aac:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <g_tick_count+0x1>
    1ab0:	a0 93 2f 05 	sts	0x052F, r26	; 0x80052f <g_tick_count+0x2>
    1ab4:	b0 93 30 05 	sts	0x0530, r27	; 0x800530 <g_tick_count+0x3>
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	1a 82       	std	Y+2, r1	; 0x02
    1abe:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_sync_enabled>
    1ac2:	88 23       	and	r24, r24
    1ac4:	91 f1       	breq	.+100    	; 0x1b2a <__vector_8+0xc4>
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>
    1acc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_ZZ10__vector_8E15holdButtonState>
    1ad0:	89 13       	cpse	r24, r25
    1ad2:	25 c0       	rjmp	.+74     	; 0x1b1e <__vector_8+0xb8>
    1ad4:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_sync_pin_timer>
    1ad8:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_sync_pin_timer+0x1>
    1adc:	2b 3b       	cpi	r18, 0xBB	; 187
    1ade:	30 41       	sbci	r19, 0x10	; 16
    1ae0:	54 f4       	brge	.+20     	; 0x1af6 <__vector_8+0x90>
    1ae2:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_sync_pin_timer>
    1ae6:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_sync_pin_timer+0x1>
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	30 93 76 05 	sts	0x0576, r19	; 0x800576 <g_sync_pin_timer+0x1>
    1af2:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <g_sync_pin_timer>
    1af6:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <g_sync_pin_timer>
    1afa:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <g_sync_pin_timer+0x1>
    1afe:	25 36       	cpi	r18, 0x65	; 101
    1b00:	31 05       	cpc	r19, r1
    1b02:	9c f0       	brlt	.+38     	; 0x1b2a <__vector_8+0xc4>
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <__vector_8+0xa4>
    1b08:	73 c1       	rjmp	.+742    	; 0x1df0 <__vector_8+0x38a>
    1b0a:	92 e0       	ldi	r25, 0x02	; 2
    1b0c:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <g_sync_pin_stable>
    1b10:	81 11       	cpse	r24, r1
    1b12:	0b c0       	rjmp	.+22     	; 0x1b2a <__vector_8+0xc4>
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	8d e0       	ldi	r24, 0x0D	; 13
    1b18:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <__vector_8+0xc4>
    1b1e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E15holdButtonState>
    1b22:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <g_sync_pin_timer+0x1>
    1b26:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <g_sync_pin_timer>
    1b2a:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_enable_start_timer>
    1b2e:	88 23       	and	r24, r24
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <__vector_8+0xce>
    1b32:	58 c0       	rjmp	.+176    	; 0x1be4 <__vector_8+0x17e>
    1b34:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <g_lastSeconds>
    1b38:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <_ZZ10__vector_8E14hold_last10sec>
    1b3c:	98 17       	cp	r25, r24
    1b3e:	b1 f0       	breq	.+44     	; 0x1b6c <__vector_8+0x106>
    1b40:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <g_lastSeconds>
    1b44:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <_ZZ10__vector_8E14hold_last10sec>
    1b48:	88 23       	and	r24, r24
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <__vector_8+0xf8>
    1b4c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1b50:	83 e6       	ldi	r24, 0x63	; 99
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <_ZZ10__vector_8E13starting_blip+0x1>
    1b58:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <_ZZ10__vector_8E13starting_blip>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <__vector_8+0x120>
    1b5e:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <_ZZ10__vector_8E13starting_blip+0x1>
    1b62:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <_ZZ10__vector_8E13starting_blip>
    1b66:	87 e2       	ldi	r24, 0x27	; 39
    1b68:	9b e0       	ldi	r25, 0x0B	; 11
    1b6a:	28 c0       	rjmp	.+80     	; 0x1bbc <__vector_8+0x156>
    1b6c:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <_ZZ10__vector_8E13starting_blip>
    1b70:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <_ZZ10__vector_8E13starting_blip+0x1>
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	e1 f0       	breq	.+56     	; 0x1bb0 <__vector_8+0x14a>
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <_ZZ10__vector_8E13starting_blip+0x1>
    1b7e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <_ZZ10__vector_8E13starting_blip>
    1b82:	89 2b       	or	r24, r25
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <__vector_8+0x140>
    1b86:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <g_lastSeconds>
    1b8a:	86 30       	cpi	r24, 0x06	; 6
    1b8c:	30 f0       	brcs	.+12     	; 0x1b9a <__vector_8+0x134>
    1b8e:	8f e3       	ldi	r24, 0x3F	; 63
    1b90:	87 bd       	out	0x27, r24	; 39
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <g_audio_tone_state>
    1b98:	25 c0       	rjmp	.+74     	; 0x1be4 <__vector_8+0x17e>
    1b9a:	8f e1       	ldi	r24, 0x1F	; 31
    1b9c:	87 bd       	out	0x27, r24	; 39
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <g_audio_tone_state>
    1ba4:	1f c0       	rjmp	.+62     	; 0x1be4 <__vector_8+0x17e>
    1ba6:	8f e2       	ldi	r24, 0x2F	; 47
    1ba8:	87 bd       	out	0x27, r24	; 39
    1baa:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_audio_tone_state>
    1bae:	1a c0       	rjmp	.+52     	; 0x1be4 <__vector_8+0x17e>
    1bb0:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <_ZZ10__vector_8E13starting_boop>
    1bb4:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <_ZZ10__vector_8E13starting_boop+0x1>
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	a1 f0       	breq	.+40     	; 0x1be4 <__vector_8+0x17e>
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <_ZZ10__vector_8E13starting_boop+0x1>
    1bc2:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <_ZZ10__vector_8E13starting_boop>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	41 f4       	brne	.+16     	; 0x1bda <__vector_8+0x174>
    1bca:	8f e2       	ldi	r24, 0x2F	; 47
    1bcc:	87 bd       	out	0x27, r24	; 39
    1bce:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_audio_tone_state>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1bd8:	05 c0       	rjmp	.+10     	; 0x1be4 <__vector_8+0x17e>
    1bda:	8f e4       	ldi	r24, 0x4F	; 79
    1bdc:	87 bd       	out	0x27, r24	; 39
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <g_audio_tone_state>
    1be4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    1be8:	81 11       	cpse	r24, r1
    1bea:	06 c1       	rjmp	.+524    	; 0x1df8 <__vector_8+0x392>
    1bec:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <g_on_the_air>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	07 c1       	rjmp	.+526    	; 0x1e02 <__vector_8+0x39c>
    1bf4:	01 c1       	rjmp	.+514    	; 0x1df8 <__vector_8+0x392>
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	88 e0       	ldi	r24, 0x08	; 8
    1bfa:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1bfe:	84 e9       	ldi	r24, 0x94	; 148
    1c00:	95 e0       	ldi	r25, 0x05	; 5
    1c02:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <_ZZ10__vector_8E9ptt_delay+0x1>
    1c06:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZZ10__vector_8E9ptt_delay>
    1c0a:	07 c1       	rjmp	.+526    	; 0x1e1a <__vector_8+0x3b4>
    1c0c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZZ10__vector_8E9ptt_delay>
    1c10:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <_ZZ10__vector_8E9ptt_delay+0x1>
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	31 f0       	breq	.+12     	; 0x1c24 <__vector_8+0x1be>
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <_ZZ10__vector_8E9ptt_delay+0x1>
    1c1e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZZ10__vector_8E9ptt_delay>
    1c22:	fb c0       	rjmp	.+502    	; 0x1e1a <__vector_8+0x3b4>
    1c24:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1c28:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <__vector_8+0x1cc>
    1c30:	4b c0       	rjmp	.+150    	; 0x1cc8 <__vector_8+0x262>
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1c38:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1c3c:	89 2b       	or	r24, r25
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <__vector_8+0x1dc>
    1c40:	ec c0       	rjmp	.+472    	; 0x1e1a <__vector_8+0x3b4>
    1c42:	ae 01       	movw	r20, r28
    1c44:	4e 5f       	subi	r20, 0xFE	; 254
    1c46:	5f 4f       	sbci	r21, 0xFF	; 255
    1c48:	be 01       	movw	r22, r28
    1c4a:	6f 5f       	subi	r22, 0xFF	; 255
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>
    1c56:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <_ZZ10__vector_8E3key>
    1c5a:	99 81       	ldd	r25, Y+1	; 0x01
    1c5c:	91 11       	cpse	r25, r1
    1c5e:	11 c0       	rjmp	.+34     	; 0x1c82 <__vector_8+0x21c>
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	99 23       	and	r25, r25
    1c64:	71 f0       	breq	.+28     	; 0x1c82 <__vector_8+0x21c>
    1c66:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZZ10__vector_8E3key>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <g_callsign_sent>
    1c70:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1c74:	88 23       	and	r24, r24
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <__vector_8+0x214>
    1c78:	d0 c0       	rjmp	.+416    	; 0x1e1a <__vector_8+0x3b4>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z13sendMorseToneh>
    1c80:	1e c0       	rjmp	.+60     	; 0x1cbe <__vector_8+0x258>
    1c82:	88 23       	and	r24, r24
    1c84:	b9 f0       	breq	.+46     	; 0x1cb4 <__vector_8+0x24e>
    1c86:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL16g_LEDs_Timed_Out>
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <__vector_8+0x230>
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	8d e0       	ldi	r24, 0x0D	; 13
    1c92:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1c96:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_enable_transmitter>
    1c9a:	88 23       	and	r24, r24
    1c9c:	59 f0       	breq	.+22     	; 0x1cb4 <__vector_8+0x24e>
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	8a e0       	ldi	r24, 0x0A	; 10
    1ca2:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	88 e0       	ldi	r24, 0x08	; 8
    1caa:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <g_sendAMmodulation>
    1cb4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <__vector_8+0x258>
    1cbc:	ae c0       	rjmp	.+348    	; 0x1e1a <__vector_8+0x3b4>
    1cbe:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZZ10__vector_8E3key>
    1cc2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z13sendMorseToneh>
    1cc6:	a9 c0       	rjmp	.+338    	; 0x1e1a <__vector_8+0x3b4>
    1cc8:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL16g_LEDs_Timed_Out>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <__vector_8+0x274>
    1cd0:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_sync_pin_stable>
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <__vector_8+0x274>
    1cd8:	9a c0       	rjmp	.+308    	; 0x1e0e <__vector_8+0x3a8>
    1cda:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_enable_transmitter>
    1cde:	88 23       	and	r24, r24
    1ce0:	49 f0       	breq	.+18     	; 0x1cf4 <__vector_8+0x28e>
    1ce2:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <_ZZ10__vector_8E3key>
    1ce6:	8a e0       	ldi	r24, 0x0A	; 10
    1ce8:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1cec:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZZ10__vector_8E3key>
    1cf0:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <g_sendAMmodulation>
    1cf4:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <g_code_throttle>
    1cf8:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <g_code_throttle+0x1>
    1cfc:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1d00:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1d04:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1d08:	88 23       	and	r24, r24
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <__vector_8+0x2a8>
    1d0c:	86 c0       	rjmp	.+268    	; 0x1e1a <__vector_8+0x3b4>
    1d0e:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZZ10__vector_8E3key>
    1d12:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z13sendMorseToneh>
    1d16:	81 c0       	rjmp	.+258    	; 0x1e1a <__vector_8+0x3b4>
    1d18:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1d1c:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	09 f1       	breq	.+66     	; 0x1d66 <__vector_8+0x300>
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1d2a:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1d2e:	89 2b       	or	r24, r25
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <__vector_8+0x2ce>
    1d32:	73 c0       	rjmp	.+230    	; 0x1e1a <__vector_8+0x3b4>
    1d34:	ae 01       	movw	r20, r28
    1d36:	4e 5f       	subi	r20, 0xFE	; 254
    1d38:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3a:	be 01       	movw	r22, r28
    1d3c:	6f 5f       	subi	r22, 0xFF	; 255
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>
    1d48:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <_ZZ10__vector_8E3key>
    1d4c:	68 2f       	mov	r22, r24
    1d4e:	8d e0       	ldi	r24, 0x0D	; 13
    1d50:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1d54:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <g_code_throttle>
    1d58:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <g_code_throttle+0x1>
    1d5c:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1d60:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1d64:	5a c0       	rjmp	.+180    	; 0x1e1a <__vector_8+0x3b4>
    1d66:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <g_code_throttle>
    1d6a:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <g_code_throttle+0x1>
    1d6e:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ10__vector_8E7codeInc+0x1>
    1d72:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ10__vector_8E7codeInc>
    1d76:	51 c0       	rjmp	.+162    	; 0x1e1a <__vector_8+0x3b4>
    1d78:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZZ10__vector_8E3key>
    1d7c:	88 23       	and	r24, r24
    1d7e:	51 f0       	breq	.+20     	; 0x1d94 <__vector_8+0x32e>
    1d80:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZZ10__vector_8E3key>
    1d84:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_sync_pin_stable>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <__vector_8+0x32e>
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	8d e0       	ldi	r24, 0x0D	; 13
    1d90:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	8a e0       	ldi	r24, 0x0A	; 10
    1d98:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	88 e0       	ldi	r24, 0x08	; 8
    1da0:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1da4:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <g_sendAMmodulation>
    1da8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1dac:	88 23       	and	r24, r24
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <__vector_8+0x350>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z13sendMorseToneh>
    1db6:	88 e0       	ldi	r24, 0x08	; 8
    1db8:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>
    1dbc:	88 23       	and	r24, r24
    1dbe:	39 f0       	breq	.+14     	; 0x1dce <__vector_8+0x368>
    1dc0:	84 e6       	ldi	r24, 0x64	; 100
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <_ZZ10__vector_8E9ptt_delay+0x1>
    1dc8:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZZ10__vector_8E9ptt_delay>
    1dcc:	26 c0       	rjmp	.+76     	; 0x1e1a <__vector_8+0x3b4>
    1dce:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZZ10__vector_8E9ptt_delay>
    1dd2:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <_ZZ10__vector_8E9ptt_delay+0x1>
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <__vector_8+0x380>
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <_ZZ10__vector_8E9ptt_delay+0x1>
    1de0:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZZ10__vector_8E9ptt_delay>
    1de4:	1a c0       	rjmp	.+52     	; 0x1e1a <__vector_8+0x3b4>
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	88 e0       	ldi	r24, 0x08	; 8
    1dea:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1dee:	15 c0       	rjmp	.+42     	; 0x1e1a <__vector_8+0x3b4>
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <g_sync_pin_stable>
    1df6:	99 ce       	rjmp	.-718    	; 0x1b2a <__vector_8+0xc4>
    1df8:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <g_LED_enunciating>
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	8c cf       	rjmp	.-232    	; 0x1d18 <__vector_8+0x2b2>
    1e00:	bb cf       	rjmp	.-138    	; 0x1d78 <__vector_8+0x312>
    1e02:	88 e0       	ldi	r24, 0x08	; 8
    1e04:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	00 cf       	rjmp	.-512    	; 0x1c0c <__vector_8+0x1a6>
    1e0c:	f4 ce       	rjmp	.-536    	; 0x1bf6 <__vector_8+0x190>
    1e0e:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <_ZZ10__vector_8E3key>
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1e18:	60 cf       	rjmp	.-320    	; 0x1cda <__vector_8+0x274>
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	ff 91       	pop	r31
    1e24:	ef 91       	pop	r30
    1e26:	bf 91       	pop	r27
    1e28:	af 91       	pop	r26
    1e2a:	9f 91       	pop	r25
    1e2c:	8f 91       	pop	r24
    1e2e:	7f 91       	pop	r23
    1e30:	6f 91       	pop	r22
    1e32:	5f 91       	pop	r21
    1e34:	4f 91       	pop	r20
    1e36:	3f 91       	pop	r19
    1e38:	2f 91       	pop	r18
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	0f 90       	pop	r0
    1e40:	1f 90       	pop	r1
    1e42:	18 95       	reti

00001e44 <_Z11setupForFoxP5Fox_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox)
{
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <_Z11setupForFoxP5Fox_t+0x6>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	if(fox)
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	31 f0       	breq	.+12     	; 0x1e5e <_Z11setupForFoxP5Fox_t+0x1a>
	{
		if(*fox != INVALID_FOX)
    1e52:	fc 01       	movw	r30, r24
    1e54:	80 81       	ld	r24, Z
    1e56:	86 31       	cpi	r24, 0x16	; 22
    1e58:	11 f0       	breq	.+4      	; 0x1e5e <_Z11setupForFoxP5Fox_t+0x1a>
		{
			g_fox = *fox;
    1e5a:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <g_fox>
		}
	}

	switch(g_fox)
    1e5e:	e0 91 ba 05 	lds	r30, 0x05BA	; 0x8005ba <g_fox>
    1e62:	8e 2f       	mov	r24, r30
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	fc 01       	movw	r30, r24
    1e68:	31 97       	sbiw	r30, 0x01	; 1
    1e6a:	e5 31       	cpi	r30, 0x15	; 21
    1e6c:	f1 05       	cpc	r31, r1
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <_Z11setupForFoxP5Fox_t+0x2e>
    1e70:	6b c0       	rjmp	.+214    	; 0x1f48 <_Z11setupForFoxP5Fox_t+0x104>
    1e72:	ef 57       	subi	r30, 0x7F	; 127
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1e7a:	88 e7       	ldi	r24, 0x78	; 120
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_startclock_interval+0x1>
    1e82:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_enable_start_timer>
		}
		break;
    1e8c:	7d c0       	rjmp	.+250    	; 0x1f88 <_Z11setupForFoxP5Fox_t+0x144>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1e8e:	8c e2       	ldi	r24, 0x2C	; 44
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_startclock_interval+0x1>
    1e96:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_enable_start_timer>
		}
		break;
    1ea0:	73 c0       	rjmp	.+230    	; 0x1f88 <_Z11setupForFoxP5Fox_t+0x144>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1ea2:	8c e3       	ldi	r24, 0x3C	; 60
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_on_air_interval+0x1>
    1eaa:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_on_air_interval>
			g_number_of_foxes = 5;
    1eae:	25 e0       	ldi	r18, 0x05	; 5
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	30 93 80 05 	sts	0x0580, r19	; 0x800580 <g_number_of_foxes+0x1>
    1eb6:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <g_number_of_foxes>
			g_fox_id_offset = 0;
    1eba:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <g_fox_id_offset+0x1>
    1ebe:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <g_fox_id_offset>
			g_pattern_codespeed = 8;
    1ec2:	28 e0       	ldi	r18, 0x08	; 8
    1ec4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <g_pattern_codespeed>
			g_id_interval = 60;
    1ec8:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <g_id_interval+0x1>
    1ecc:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <g_id_interval>
			g_startclock_interval = 300;
    1ed0:	8c e2       	ldi	r24, 0x2C	; 44
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_startclock_interval+0x1>
    1ed8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_startclock_interval>
		}
		break;
    1edc:	55 c0       	rjmp	.+170    	; 0x1f88 <_Z11setupForFoxP5Fox_t+0x144>

		case SPRINT_S1:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    1ede:	8c e0       	ldi	r24, 0x0C	; 12
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_on_air_interval+0x1>
    1ee6:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_on_air_interval>
			g_number_of_foxes = 5;
    1eea:	85 e0       	ldi	r24, 0x05	; 5
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <g_number_of_foxes+0x1>
    1ef2:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? 10 : 15;
    1ef6:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    1efa:	83 31       	cpi	r24, 0x13	; 19
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <_Z11setupForFoxP5Fox_t+0xc6>
    1efe:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    1f02:	8e 30       	cpi	r24, 0x0E	; 14
    1f04:	20 f0       	brcs	.+8      	; 0x1f0e <_Z11setupForFoxP5Fox_t+0xca>
    1f06:	8f e0       	ldi	r24, 0x0F	; 15
    1f08:	03 c0       	rjmp	.+6      	; 0x1f10 <_Z11setupForFoxP5Fox_t+0xcc>
    1f0a:	8a e0       	ldi	r24, 0x0A	; 10
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <_Z11setupForFoxP5Fox_t+0xcc>
    1f0e:	8a e0       	ldi	r24, 0x0A	; 10
    1f10:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    1f14:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    1f18:	8e 30       	cpi	r24, 0x0E	; 14
    1f1a:	18 f0       	brcs	.+6      	; 0x1f22 <_Z11setupForFoxP5Fox_t+0xde>
    1f1c:	8d e0       	ldi	r24, 0x0D	; 13
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <_Z11setupForFoxP5Fox_t+0xe2>
    1f22:	88 e0       	ldi	r24, 0x08	; 8
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <g_fox_id_offset+0x1>
    1f2a:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <g_fox_id_offset>
			g_id_interval = 600;
    1f2e:	88 e5       	ldi	r24, 0x58	; 88
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <g_id_interval+0x1>
    1f36:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <g_id_interval>
			g_startclock_interval = 120;
    1f3a:	88 e7       	ldi	r24, 0x78	; 120
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_startclock_interval+0x1>
    1f42:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_startclock_interval>
		}
		break;
    1f46:	20 c0       	rjmp	.+64     	; 0x1f88 <_Z11setupForFoxP5Fox_t+0x144>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    1f48:	88 e5       	ldi	r24, 0x58	; 88
    1f4a:	92 e0       	ldi	r25, 0x02	; 2
    1f4c:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_on_air_interval+0x1>
    1f50:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_on_air_interval>
			g_number_of_foxes = 1;
    1f54:	21 e0       	ldi	r18, 0x01	; 1
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	30 93 80 05 	sts	0x0580, r19	; 0x800580 <g_number_of_foxes+0x1>
    1f5c:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <g_number_of_foxes>
			g_pattern_codespeed = 8;
    1f60:	28 e0       	ldi	r18, 0x08	; 8
    1f62:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <g_pattern_codespeed>
			g_id_interval = 600;
    1f66:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <g_id_interval+0x1>
    1f6a:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    1f6e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    1f72:	88 30       	cpi	r24, 0x08	; 8
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <_Z11setupForFoxP5Fox_t+0x138>
    1f76:	8c e2       	ldi	r24, 0x2C	; 44
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <_Z11setupForFoxP5Fox_t+0x13c>
    1f7c:	88 e7       	ldi	r24, 0x78	; 120
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_startclock_interval+0x1>
    1f84:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_startclock_interval>
		}
		break;
	}

	if(g_use_rtc_to_start)
    1f88:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <g_use_rtc_to_start>
    1f8c:	88 23       	and	r24, r24
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <_Z11setupForFoxP5Fox_t+0x14e>
    1f90:	bd c0       	rjmp	.+378    	; 0x210c <_Z11setupForFoxP5Fox_t+0x2c8>
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    1f92:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <g_event_start_epoch>
    1f96:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    1f9a:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    1f9e:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    1fa2:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    1fa6:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    1faa:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    1fae:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    1fb2:	48 17       	cp	r20, r24
    1fb4:	59 07       	cpc	r21, r25
    1fb6:	6a 07       	cpc	r22, r26
    1fb8:	7b 07       	cpc	r23, r27
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <_Z11setupForFoxP5Fox_t+0x17a>
    1fbc:	86 c0       	rjmp	.+268    	; 0x20ca <_Z11setupForFoxP5Fox_t+0x286>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    1fbe:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    1fc2:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    1fc6:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    1fca:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    1fce:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <g_event_start_epoch>
    1fd2:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    1fd6:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    1fda:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    1fde:	84 1b       	sub	r24, r20
    1fe0:	95 0b       	sbc	r25, r21
    1fe2:	a6 0b       	sbc	r26, r22
    1fe4:	b7 0b       	sbc	r27, r23
    1fe6:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <g_seconds_since_sync>
    1fea:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <g_seconds_since_sync+0x1>
    1fee:	a0 93 bd 05 	sts	0x05BD, r26	; 0x8005bd <g_seconds_since_sync+0x2>
    1ff2:	b0 93 be 05 	sts	0x05BE, r27	; 0x8005be <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;                                     /* Controls transmitter Morse activity */
    1ff6:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
			g_code_throttle    = 0;                                         /* Adjusts Morse code speed */
    1ffa:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <g_code_throttle+0x1>
    1ffe:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <g_code_throttle>
			g_callsign_sent = FALSE;
    2002:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <g_callsign_sent>

			g_fox_seconds_into_interval = g_seconds_since_sync % g_startclock_interval;
    2006:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    200a:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    200e:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    2012:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    2016:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_startclock_interval>
    201a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_startclock_interval+0x1>
    201e:	03 2e       	mov	r0, r19
    2020:	00 0c       	add	r0, r0
    2022:	44 0b       	sbc	r20, r20
    2024:	55 0b       	sbc	r21, r21
    2026:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__divmodsi4>
    202a:	70 93 82 05 	sts	0x0582, r23	; 0x800582 <g_fox_seconds_into_interval+0x1>
    202e:	60 93 81 05 	sts	0x0581, r22	; 0x800581 <g_fox_seconds_into_interval>
			g_fox_counter = CLAMP(1, 1 + (g_fox_seconds_into_interval / g_on_air_interval), g_number_of_foxes);
    2032:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_fox_seconds_into_interval>
    2036:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <g_fox_seconds_into_interval+0x1>
    203a:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <g_on_air_interval>
    203e:	70 91 84 05 	lds	r23, 0x0584	; 0x800584 <g_on_air_interval+0x1>
    2042:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    2046:	6f 5f       	subi	r22, 0xFF	; 255
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_number_of_foxes>
    204e:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_number_of_foxes+0x1>
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	86 17       	cp	r24, r22
    205c:	97 07       	cpc	r25, r23
    205e:	34 f0       	brlt	.+12     	; 0x206c <_Z11setupForFoxP5Fox_t+0x228>
    2060:	16 16       	cp	r1, r22
    2062:	17 06       	cpc	r1, r23
    2064:	2c f0       	brlt	.+10     	; 0x2070 <_Z11setupForFoxP5Fox_t+0x22c>
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <_Z11setupForFoxP5Fox_t+0x22c>
    206c:	69 81       	ldd	r22, Y+1	; 0x01
    206e:	7a 81       	ldd	r23, Y+2	; 0x02
    2070:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <g_fox_counter+0x1>
    2074:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <g_fox_counter>
			g_fox_transition = FALSE;
    2078:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_fox_transition>
			g_time_to_ID = FALSE;
    207c:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <g_time_to_ID>
			g_audio_tone_state = OFF;
    2080:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_audio_tone_state>
			g_fox_tone_offset = g_fox_counter;
    2084:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_fox_counter>
    2088:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_fox_counter+0x1>
    208c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_tone_offset+0x1>
    2090:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_tone_offset>
			g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    2094:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    2098:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    209c:	a0 91 bd 05 	lds	r26, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    20a0:	b0 91 be 05 	lds	r27, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    20a4:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_startclock_interval>
    20a8:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_startclock_interval+0x1>
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	65 5f       	subi	r22, 0xF5	; 245
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	8f 4f       	sbci	r24, 0xFF	; 255
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	03 2e       	mov	r0, r19
    20ba:	00 0c       	add	r0, r0
    20bc:	44 0b       	sbc	r20, r20
    20be:	55 0b       	sbc	r21, r21
    20c0:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__divmodsi4>
    20c4:	60 93 77 05 	sts	0x0577, r22	; 0x800577 <g_lastSeconds>
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <_Z11setupForFoxP5Fox_t+0x304>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    20ca:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <g_seconds_since_sync>
    20ce:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <g_seconds_since_sync+0x1>
    20d2:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <g_seconds_since_sync+0x2>
    20d6:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    20da:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    20de:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <g_code_throttle+0x1>
    20e2:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <g_code_throttle>
			g_callsign_sent = FALSE;
    20e6:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <g_callsign_sent>

			g_fox_counter = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_fox_counter+0x1>
    20f2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_fox_counter>
			g_fox_seconds_into_interval = 0;
    20f6:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_fox_seconds_into_interval+0x1>
    20fa:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <g_fox_seconds_into_interval>
			g_fox_transition = FALSE;
    20fe:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_fox_transition>
			g_time_to_ID = FALSE;
    2102:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <g_time_to_ID>
			g_audio_tone_state = OFF;
    2106:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_audio_tone_state>
    210a:	1e c0       	rjmp	.+60     	; 0x2148 <_Z11setupForFoxP5Fox_t+0x304>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    210c:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <g_seconds_since_sync>
    2110:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <g_seconds_since_sync+0x1>
    2114:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <g_seconds_since_sync+0x2>
    2118:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    211c:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    2120:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <g_code_throttle+0x1>
    2124:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <g_code_throttle>
		g_callsign_sent = FALSE;
    2128:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <g_callsign_sent>

/*		g_on_air_interval = 0; */
		g_fox_seconds_into_interval = 0;
    212c:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_fox_seconds_into_interval+0x1>
    2130:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <g_fox_seconds_into_interval>
/*		g_number_of_foxes = 0; */
		g_fox_transition = FALSE;
    2134:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_fox_transition>
		g_fox_id_offset = 0;
    2138:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <g_fox_id_offset+0x1>
    213c:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <g_fox_id_offset>
/*		g_id_interval = 0; */
		g_time_to_ID = FALSE;
    2140:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <g_time_to_ID>
		g_audio_tone_state = OFF;
    2144:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_audio_tone_state>
	}

	g_LEDs_Timed_Out = !g_enable_LEDs;
    2148:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <g_enable_LEDs>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	91 11       	cpse	r25, r1
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL16g_LEDs_Timed_Out>
	digitalWrite(PIN_LED2, OFF);    /*  LED Off - in case it was on in the middle of a transmission */
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	8d e0       	ldi	r24, 0x0D	; 13
    215a:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <__vector_1>:

/***********************************************************************
 * Handle RTC 1-second interrupts
 **********************************************************************/
ISR( INT0_vect )
{
    2168:	1f 92       	push	r1
    216a:	0f 92       	push	r0
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	0f 92       	push	r0
    2170:	11 24       	eor	r1, r1
    2172:	2f 93       	push	r18
    2174:	3f 93       	push	r19
    2176:	4f 93       	push	r20
    2178:	5f 93       	push	r21
    217a:	6f 93       	push	r22
    217c:	7f 93       	push	r23
    217e:	8f 93       	push	r24
    2180:	9f 93       	push	r25
    2182:	af 93       	push	r26
    2184:	bf 93       	push	r27
    2186:	ef 93       	push	r30
    2188:	ff 93       	push	r31
	static int id_countdown = 0;

	g_current_epoch++;
    218a:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    218e:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2192:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2196:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	a1 1d       	adc	r26, r1
    219e:	b1 1d       	adc	r27, r1
    21a0:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_current_epoch>
    21a4:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_current_epoch+0x1>
    21a8:	a0 93 b3 05 	sts	0x05B3, r26	; 0x8005b3 <g_current_epoch+0x2>
    21ac:	b0 93 b4 05 	sts	0x05B4, r27	; 0x8005b4 <g_current_epoch+0x3>

	if(g_temperature_check_countdown)
    21b0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_temperature_check_countdown>
    21b4:	88 23       	and	r24, r24
    21b6:	29 f0       	breq	.+10     	; 0x21c2 <__vector_1+0x5a>
	{
		g_temperature_check_countdown--;
    21b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_temperature_check_countdown>
    21bc:	81 50       	subi	r24, 0x01	; 1
    21be:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_temperature_check_countdown>
		/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
		 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
	}

	if(g_transmissions_disabled)
    21c2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    21c6:	88 23       	and	r24, r24
    21c8:	91 f1       	breq	.+100    	; 0x222e <__vector_1+0xc6>
	{
		if(g_use_rtc_to_start)
    21ca:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <g_use_rtc_to_start>
    21ce:	88 23       	and	r24, r24
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <__vector_1+0x6c>
    21d2:	35 c1       	rjmp	.+618    	; 0x243e <__vector_1+0x2d6>
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
    21d4:	40 91 b1 05 	lds	r20, 0x05B1	; 0x8005b1 <g_current_epoch>
    21d8:	50 91 b2 05 	lds	r21, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    21dc:	60 91 b3 05 	lds	r22, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    21e0:	70 91 b4 05 	lds	r23, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    21e4:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
    21e8:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    21ec:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    21f0:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    21f4:	48 17       	cp	r20, r24
    21f6:	59 07       	cpc	r21, r25
    21f8:	6a 07       	cpc	r22, r26
    21fa:	7b 07       	cpc	r23, r27
    21fc:	08 f4       	brcc	.+2      	; 0x2200 <__vector_1+0x98>
    21fe:	1f c1       	rjmp	.+574    	; 0x243e <__vector_1+0x2d6>
    2200:	40 91 b1 05 	lds	r20, 0x05B1	; 0x8005b1 <g_current_epoch>
    2204:	50 91 b2 05 	lds	r21, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2208:	60 91 b3 05 	lds	r22, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    220c:	70 91 b4 05 	lds	r23, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2210:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    2214:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    2218:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    221c:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    2220:	48 17       	cp	r20, r24
    2222:	59 07       	cpc	r21, r25
    2224:	6a 07       	cpc	r22, r26
    2226:	7b 07       	cpc	r23, r27
    2228:	08 f4       	brcc	.+2      	; 0x222c <__vector_1+0xc4>
    222a:	cd c0       	rjmp	.+410    	; 0x23c6 <__vector_1+0x25e>
    222c:	08 c1       	rjmp	.+528    	; 0x243e <__vector_1+0x2d6>
			}
		}
	}
	else
	{
		if(g_use_rtc_to_start)
    222e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <g_use_rtc_to_start>
    2232:	88 23       	and	r24, r24
    2234:	e1 f0       	breq	.+56     	; 0x226e <__vector_1+0x106>
		{
			if(g_current_epoch >= g_event_finish_epoch)
    2236:	40 91 b1 05 	lds	r20, 0x05B1	; 0x8005b1 <g_current_epoch>
    223a:	50 91 b2 05 	lds	r21, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    223e:	60 91 b3 05 	lds	r22, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2242:	70 91 b4 05 	lds	r23, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2246:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    224a:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    224e:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    2252:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    2256:	48 17       	cp	r20, r24
    2258:	59 07       	cpc	r21, r25
    225a:	6a 07       	cpc	r22, r26
    225c:	7b 07       	cpc	r23, r27
    225e:	38 f0       	brcs	.+14     	; 0x226e <__vector_1+0x106>
			{
				g_use_rtc_to_start = FALSE;
    2260:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <g_use_rtc_to_start>
				g_transmissions_disabled = TRUE;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_transmissions_disabled>
				g_on_the_air = FALSE;
    226a:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
			}
		}

		if(!g_transmissions_disabled)
    226e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    2272:	81 11       	cpse	r24, r1
    2274:	e4 c0       	rjmp	.+456    	; 0x243e <__vector_1+0x2d6>
		{
			if(g_seconds_since_sync == 0)   /* sync just occurred */
    2276:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    227a:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    227e:	a0 91 bd 05 	lds	r26, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    2282:	b0 91 be 05 	lds	r27, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    2286:	89 2b       	or	r24, r25
    2288:	8a 2b       	or	r24, r26
    228a:	8b 2b       	or	r24, r27
    228c:	81 f4       	brne	.+32     	; 0x22ae <__vector_1+0x146>
			{
				id_countdown = g_id_interval;
    228e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <g_id_interval>
    2292:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <g_id_interval+0x1>
    2296:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <_ZZ10__vector_1E12id_countdown+0x1>
    229a:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <_ZZ10__vector_1E12id_countdown>
				g_fox_counter = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_fox_counter+0x1>
    22a6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_fox_counter>
				g_lastSeconds = 0;
    22aa:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <g_lastSeconds>
				/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
				 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
			}

			g_seconds_since_sync++; /* Total elapsed time counter */
    22ae:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    22b2:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    22b6:	a0 91 bd 05 	lds	r26, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    22ba:	b0 91 be 05 	lds	r27, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	a1 1d       	adc	r26, r1
    22c2:	b1 1d       	adc	r27, r1
    22c4:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <g_seconds_since_sync>
    22c8:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <g_seconds_since_sync+0x1>
    22cc:	a0 93 bd 05 	sts	0x05BD, r26	; 0x8005bd <g_seconds_since_sync+0x2>
    22d0:	b0 93 be 05 	sts	0x05BE, r27	; 0x8005be <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval++;
    22d4:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_fox_seconds_into_interval>
    22d8:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <g_fox_seconds_into_interval+0x1>
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <g_fox_seconds_into_interval+0x1>
    22e2:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_fox_seconds_into_interval>

			if(id_countdown)
    22e6:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <_ZZ10__vector_1E12id_countdown>
    22ea:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <_ZZ10__vector_1E12id_countdown+0x1>
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	29 f0       	breq	.+10     	; 0x22fc <__vector_1+0x194>
			{
				id_countdown--;
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <_ZZ10__vector_1E12id_countdown+0x1>
    22f8:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <_ZZ10__vector_1E12id_countdown>
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
    22fc:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_number_of_foxes>
    2300:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_number_of_foxes+0x1>
    2304:	89 2b       	or	r24, r25
    2306:	e1 f1       	breq	.+120    	; 0x2380 <__vector_1+0x218>
    2308:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    230c:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    2310:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    2314:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    2318:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_on_air_interval>
    231c:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_on_air_interval+0x1>
    2320:	03 2e       	mov	r0, r19
    2322:	00 0c       	add	r0, r0
    2324:	44 0b       	sbc	r20, r20
    2326:	55 0b       	sbc	r21, r21
    2328:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__divmodsi4>
    232c:	67 2b       	or	r22, r23
    232e:	68 2b       	or	r22, r24
    2330:	69 2b       	or	r22, r25
    2332:	09 f4       	brne	.+2      	; 0x2336 <__vector_1+0x1ce>
    2334:	51 c0       	rjmp	.+162    	; 0x23d8 <__vector_1+0x270>
    2336:	24 c0       	rjmp	.+72     	; 0x2380 <__vector_1+0x218>
			{
				g_fox_counter++;

				if(g_fox_counter > g_number_of_foxes)
				{
					g_fox_counter = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_fox_counter+0x1>
    2340:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_fox_counter>
					g_LEDs_Timed_Out = TRUE;
    2344:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL16g_LEDs_Timed_Out>
					digitalWrite(PIN_LED2, OFF);
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	8d e0       	ldi	r24, 0x0D	; 13
    234c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
				}
				g_fox_transition = TRUE;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <g_fox_transition>
				g_fox_seconds_into_interval = 0;
    2356:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_fox_seconds_into_interval+0x1>
    235a:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <g_fox_seconds_into_interval>

				if(!id_countdown)
    235e:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <_ZZ10__vector_1E12id_countdown>
    2362:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <_ZZ10__vector_1E12id_countdown+0x1>
    2366:	89 2b       	or	r24, r25
    2368:	59 f4       	brne	.+22     	; 0x2380 <__vector_1+0x218>
				{
					id_countdown = g_id_interval;
    236a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <g_id_interval>
    236e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <g_id_interval+0x1>
    2372:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <_ZZ10__vector_1E12id_countdown+0x1>
    2376:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <_ZZ10__vector_1E12id_countdown>
					g_time_to_ID = TRUE;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <g_time_to_ID>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
    2380:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_enable_start_timer>
    2384:	88 23       	and	r24, r24
    2386:	09 f4       	brne	.+2      	; 0x238a <__vector_1+0x222>
    2388:	58 c0       	rjmp	.+176    	; 0x243a <__vector_1+0x2d2>
    238a:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    238e:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    2392:	a0 91 bd 05 	lds	r26, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    2396:	b0 91 be 05 	lds	r27, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    239a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_startclock_interval>
    239e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_startclock_interval+0x1>
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	65 5f       	subi	r22, 0xF5	; 245
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	8f 4f       	sbci	r24, 0xFF	; 255
    23ac:	9f 4f       	sbci	r25, 0xFF	; 255
    23ae:	03 2e       	mov	r0, r19
    23b0:	00 0c       	add	r0, r0
    23b2:	44 0b       	sbc	r20, r20
    23b4:	55 0b       	sbc	r21, r21
    23b6:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__divmodsi4>
    23ba:	6b 30       	cpi	r22, 0x0B	; 11
    23bc:	71 05       	cpc	r23, r1
    23be:	81 05       	cpc	r24, r1
    23c0:	91 05       	cpc	r25, r1
    23c2:	04 f1       	brlt	.+64     	; 0x2404 <__vector_1+0x29c>
    23c4:	3a c0       	rjmp	.+116    	; 0x243a <__vector_1+0x2d2>
	{
		if(g_use_rtc_to_start)
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
			{
				g_LED_enunciating = FALSE;
    23c6:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <g_LED_enunciating>
				setupForFox(NULL);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_Z11setupForFoxP5Fox_t>
				g_transmissions_disabled = FALSE;
    23d2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <g_transmissions_disabled>
    23d6:	33 c0       	rjmp	.+102    	; 0x243e <__vector_1+0x2d6>
				id_countdown--;
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
			{
				g_fox_counter++;
    23d8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_fox_counter>
    23dc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_fox_counter+0x1>
    23e0:	01 96       	adiw	r24, 0x01	; 1
    23e2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_fox_counter+0x1>
    23e6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_fox_counter>

				if(g_fox_counter > g_number_of_foxes)
    23ea:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_fox_counter>
    23ee:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_fox_counter+0x1>
    23f2:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_number_of_foxes>
    23f6:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <g_number_of_foxes+0x1>
    23fa:	82 17       	cp	r24, r18
    23fc:	93 07       	cpc	r25, r19
    23fe:	0c f0       	brlt	.+2      	; 0x2402 <__vector_1+0x29a>
    2400:	a7 cf       	rjmp	.-178    	; 0x2350 <__vector_1+0x1e8>
    2402:	9a cf       	rjmp	.-204    	; 0x2338 <__vector_1+0x1d0>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
			{
				g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    2404:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <g_seconds_since_sync>
    2408:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <g_seconds_since_sync+0x1>
    240c:	a0 91 bd 05 	lds	r26, 0x05BD	; 0x8005bd <g_seconds_since_sync+0x2>
    2410:	b0 91 be 05 	lds	r27, 0x05BE	; 0x8005be <g_seconds_since_sync+0x3>
    2414:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_startclock_interval>
    2418:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_startclock_interval+0x1>
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	65 5f       	subi	r22, 0xF5	; 245
    2422:	7f 4f       	sbci	r23, 0xFF	; 255
    2424:	8f 4f       	sbci	r24, 0xFF	; 255
    2426:	9f 4f       	sbci	r25, 0xFF	; 255
    2428:	03 2e       	mov	r0, r19
    242a:	00 0c       	add	r0, r0
    242c:	44 0b       	sbc	r20, r20
    242e:	55 0b       	sbc	r21, r21
    2430:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__divmodsi4>
    2434:	60 93 77 05 	sts	0x0577, r22	; 0x800577 <g_lastSeconds>
    2438:	02 c0       	rjmp	.+4      	; 0x243e <__vector_1+0x2d6>
			}
			else
			{
				g_lastSeconds = 0;
    243a:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <g_lastSeconds>
			}
		}
	}
}   /* end of INT0 ISR */
    243e:	ff 91       	pop	r31
    2440:	ef 91       	pop	r30
    2442:	bf 91       	pop	r27
    2444:	af 91       	pop	r26
    2446:	9f 91       	pop	r25
    2448:	8f 91       	pop	r24
    244a:	7f 91       	pop	r23
    244c:	6f 91       	pop	r22
    244e:	5f 91       	pop	r21
    2450:	4f 91       	pop	r20
    2452:	3f 91       	pop	r19
    2454:	2f 91       	pop	r18
    2456:	0f 90       	pop	r0
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	0f 90       	pop	r0
    245c:	1f 90       	pop	r1
    245e:	18 95       	reti

00002460 <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    2460:	ea e7       	ldi	r30, 0x7A	; 122
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	86 fd       	sbrc	r24, 6
    2468:	fd cf       	rjmp	.-6      	; 0x2464 <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    246a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    246e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    2472:	ea e7       	ldi	r30, 0x7A	; 122
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	90 81       	ld	r25, Z
    2478:	90 64       	ori	r25, 0x40	; 64
    247a:	90 83       	st	Z, r25
	return( result);
}
    247c:	c9 01       	movw	r24, r18
    247e:	08 95       	ret

00002480 <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    2480:	88 ec       	ldi	r24, 0xC8	; 200
    2482:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    2486:	ea e7       	ldi	r30, 0x7A	; 122
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	87 e0       	ldi	r24, 0x07	; 7
    248c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    248e:	80 81       	ld	r24, Z
    2490:	80 68       	ori	r24, 0x80	; 128
    2492:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    2494:	80 81       	ld	r24, Z
    2496:	80 64       	ori	r24, 0x40	; 64
    2498:	80 83       	st	Z, r24
	readADC();
    249a:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z7readADCv>
    249e:	08 95       	ret

000024a0 <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    24a8:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_atmega_temp_calibration>
    24ac:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <g_atmega_temp_calibration+0x1>
    24b0:	07 2e       	mov	r0, r23
    24b2:	00 0c       	add	r0, r0
    24b4:	88 0b       	sbc	r24, r24
    24b6:	99 0b       	sbc	r25, r25
    24b8:	0e 94 0d 2a 	call	0x541a	; 0x541a <__floatsisf>
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__divsf3>
    24c8:	06 2f       	mov	r16, r22
    24ca:	17 2f       	mov	r17, r23
    24cc:	d8 2f       	mov	r29, r24
    24ce:	c9 2f       	mov	r28, r25
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	48 e4       	ldi	r20, 0x48	; 72
    24d6:	53 e4       	ldi	r21, 0x43	; 67
    24d8:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__gesf2>
    24dc:	18 16       	cp	r1, r24
    24de:	6c f0       	brlt	.+26     	; 0x24fa <_Z7getTempv+0x5a>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	48 e4       	ldi	r20, 0x48	; 72
    24e6:	53 ec       	ldi	r21, 0xC3	; 195
    24e8:	60 2f       	mov	r22, r16
    24ea:	71 2f       	mov	r23, r17
    24ec:	8d 2f       	mov	r24, r29
    24ee:	9c 2f       	mov	r25, r28
    24f0:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__cmpsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	34 f0       	brlt	.+12     	; 0x2504 <_Z7getTempv+0x64>
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <_Z7getTempv+0x6c>
    24fa:	00 e0       	ldi	r16, 0x00	; 0
    24fc:	10 e0       	ldi	r17, 0x00	; 0
    24fe:	d8 e4       	ldi	r29, 0x48	; 72
    2500:	c3 e4       	ldi	r28, 0x43	; 67
    2502:	04 c0       	rjmp	.+8      	; 0x250c <_Z7getTempv+0x6c>
    2504:	00 e0       	ldi	r16, 0x00	; 0
    2506:	10 e0       	ldi	r17, 0x00	; 0
    2508:	d8 e4       	ldi	r29, 0x48	; 72
    250a:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    250c:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    2510:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z7readADCv>
    2514:	bc 01       	movw	r22, r24
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 0b 2a 	call	0x5416	; 0x5416 <__floatunsisf>
    251e:	2e ea       	ldi	r18, 0xAE	; 174
    2520:	37 e2       	ldi	r19, 0x27	; 39
    2522:	42 ea       	ldi	r20, 0xA2	; 162
    2524:	53 e4       	ldi	r21, 0x43	; 67
    2526:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <__subsf3>
    252a:	26 ef       	ldi	r18, 0xF6	; 246
    252c:	38 e2       	ldi	r19, 0x28	; 40
    252e:	4c e9       	ldi	r20, 0x9C	; 156
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__divsf3>
    2536:	20 2f       	mov	r18, r16
    2538:	31 2f       	mov	r19, r17
    253a:	4d 2f       	mov	r20, r29
    253c:	5c 2f       	mov	r21, r28
    253e:	0e 94 ed 28 	call	0x51da	; 0x51da <__addsf3>
    2542:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <round>
}
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	08 95       	ret

00002550 <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    2550:	ea e7       	ldi	r30, 0x7A	; 122
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    2556:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    255a:	ac e7       	ldi	r26, 0x7C	; 124
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    2560:	9c 91       	ld	r25, X
    2562:	96 60       	ori	r25, 0x06	; 6
    2564:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    2566:	9c 91       	ld	r25, X
    2568:	90 6c       	ori	r25, 0xC0	; 192
    256a:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    256c:	9c 91       	ld	r25, X
    256e:	90 62       	ori	r25, 0x20	; 32
    2570:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    2572:	90 81       	ld	r25, Z
    2574:	96 60       	ori	r25, 0x06	; 6
    2576:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    2578:	90 81       	ld	r25, Z
    257a:	90 62       	ori	r25, 0x20	; 32
    257c:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    257e:	90 81       	ld	r25, Z
    2580:	98 60       	ori	r25, 0x08	; 8
    2582:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    2584:	90 81       	ld	r25, Z
    2586:	90 68       	ori	r25, 0x80	; 128
    2588:	90 83       	st	Z, r25

	if(enableSampling)
    258a:	88 23       	and	r24, r24
    258c:	31 f0       	breq	.+12     	; 0x259a <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    2594:	80 81       	ld	r24, Z
    2596:	80 64       	ori	r24, 0x40	; 64
    2598:	80 83       	st	Z, r24
    259a:	08 95       	ret

0000259c <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    259c:	fc 01       	movw	r30, r24
	while(*s)
    259e:	21 91       	ld	r18, Z+
    25a0:	22 23       	and	r18, r18
    25a2:	41 f0       	breq	.+16     	; 0x25b4 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	20 53       	subi	r18, 0x30	; 48
    25a8:	31 09       	sbc	r19, r1
    25aa:	2a 30       	cpi	r18, 0x0A	; 10
    25ac:	31 05       	cpc	r19, r1
    25ae:	b8 f3       	brcs	.-18     	; 0x259e <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	08 95       	ret
		}
	}

	return( TRUE);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
}
    25b6:	08 95       	ret

000025b8 <_Z13startEventNowv>:

void startEventNow(void)
{
#if !INIT_EEPROM_ONLY
		linkbus_disable();
    25b8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_Z15linkbus_disablev>
		setupForFox(NULL);
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_Z11setupForFoxP5Fox_t>
		setupPortsForF1975();
    25c4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_Z18setupPortsForF1975v>
		g_transmissions_disabled = FALSE;
    25c8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <g_transmissions_disabled>
		g_LED_enunciating = FALSE;
    25cc:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <g_LED_enunciating>
		lb_send_string((char*)"Sync OK\n", FALSE);
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	86 e2       	ldi	r24, 0x26	; 38
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    25da:	08 95       	ret

000025dc <_Z12stopEventNowv>:
#endif  /* !INIT_EEPROM_ONLY */
}

void stopEventNow(void)
{
	g_transmissions_disabled = TRUE;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_transmissions_disabled>
	if(!g_sync_pin_stable)
    25e2:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_sync_pin_stable>
    25e6:	81 11       	cpse	r24, r1
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <_Z12stopEventNowv+0x16>
	{
		digitalWrite(PIN_LED2, OFF);        /*  LED Off */
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	8d e0       	ldi	r24, 0x0D	; 13
    25ee:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	}

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	8a e0       	ldi	r24, 0x0A	; 10
    25f6:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);       /* Unkey the microphone / de-energize transmitter */
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	88 e0       	ldi	r24, 0x08	; 8
    25fe:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    2602:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <g_sendAMmodulation>

	linkbus_init(BAUD);
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	71 ee       	ldi	r23, 0xE1	; 225
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z12linkbus_initm>
    2612:	08 95       	ret

00002614 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2614:	1f 92       	push	r1
    2616:	0f 92       	push	r0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>

	if(pinVal)                      /* Sync is high = button released */
    263c:	88 23       	and	r24, r24
    263e:	d9 f0       	breq	.+54     	; 0x2676 <__vector_5+0x62>
	{
		g_LEDs_Timed_Out = FALSE;   /* Restart LEDs */
    2640:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZL16g_LEDs_Timed_Out>

		if(g_transmissions_disabled)
    2644:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    2648:	88 23       	and	r24, r24
    264a:	69 f0       	breq	.+26     	; 0x2666 <__vector_5+0x52>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    264c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_sync_pin_stable>
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	89 f4       	brne	.+34     	; 0x2676 <__vector_5+0x62>
			{
				startEventNow();
    2654:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_Z13startEventNowv>
				g_sync_pin_stable = UNSTABLE;
    2658:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	8d e0       	ldi	r24, 0x0D	; 13
    2660:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    2664:	08 c0       	rjmp	.+16     	; 0x2676 <__vector_5+0x62>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2666:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_sync_pin_stable>
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	21 f4       	brne	.+8      	; 0x2676 <__vector_5+0x62>
			{
				stopEventNow();
    266e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_Z12stopEventNowv>
				g_sync_pin_stable = UNSTABLE;
    2672:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_sync_pin_stable>
			}
		}
	}

	g_sync_pin_timer = 0;
    2676:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <g_sync_pin_timer+0x1>
    267a:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <g_sync_pin_timer>
}
    267e:	ff 91       	pop	r31
    2680:	ef 91       	pop	r30
    2682:	bf 91       	pop	r27
    2684:	af 91       	pop	r26
    2686:	9f 91       	pop	r25
    2688:	8f 91       	pop	r24
    268a:	7f 91       	pop	r23
    268c:	6f 91       	pop	r22
    268e:	5f 91       	pop	r21
    2690:	4f 91       	pop	r20
    2692:	3f 91       	pop	r19
    2694:	2f 91       	pop	r18
    2696:	0f 90       	pop	r0
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	0f 90       	pop	r0
    269c:	1f 90       	pop	r1
    269e:	18 95       	reti

000026a0 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    26a0:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_messages_text+0x15>
    26a4:	81 11       	cpse	r24, r1
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    26a8:	65 e0       	ldi	r22, 0x05	; 5
    26aa:	8f eb       	ldi	r24, 0xBF	; 191
    26ac:	95 e0       	ldi	r25, 0x05	; 5
    26ae:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    26b2:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    26b6:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    26ba:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    26be:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    26c2:	81 15       	cp	r24, r1
    26c4:	96 46       	sbci	r25, 0x66	; 102
    26c6:	ae 4e       	sbci	r26, 0xEE	; 238
    26c8:	bf 45       	sbci	r27, 0x5F	; 95
    26ca:	28 f4       	brcc	.+10     	; 0x26d6 <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	8f eb       	ldi	r24, 0xBF	; 191
    26d0:	95 e0       	ldi	r25, 0x05	; 5
    26d2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    26d6:	40 91 a9 05 	lds	r20, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    26da:	50 91 aa 05 	lds	r21, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    26de:	60 91 ab 05 	lds	r22, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    26e2:	70 91 ac 05 	lds	r23, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    26e6:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    26ea:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    26ee:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    26f2:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    26f6:	48 17       	cp	r20, r24
    26f8:	59 07       	cpc	r21, r25
    26fa:	6a 07       	cpc	r22, r26
    26fc:	7b 07       	cpc	r23, r27
    26fe:	00 f5       	brcc	.+64     	; 0x2740 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2700:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <g_event_start_epoch>
    2704:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    2708:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    270c:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    2710:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    2714:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2718:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    271c:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2720:	48 17       	cp	r20, r24
    2722:	59 07       	cpc	r21, r25
    2724:	6a 07       	cpc	r22, r26
    2726:	7b 07       	cpc	r23, r27
    2728:	28 f4       	brcc	.+10     	; 0x2734 <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	8f eb       	ldi	r24, 0xBF	; 191
    272e:	95 e0       	ldi	r25, 0x05	; 5
    2730:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2734:	64 e0       	ldi	r22, 0x04	; 4
    2736:	8f eb       	ldi	r24, 0xBF	; 191
    2738:	95 e0       	ldi	r25, 0x05	; 5
    273a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    273e:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    2740:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <g_event_start_epoch>
    2744:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    2748:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    274c:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    2750:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    2754:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2758:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    275c:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2760:	48 17       	cp	r20, r24
    2762:	59 07       	cpc	r21, r25
    2764:	6a 07       	cpc	r22, r26
    2766:	7b 07       	cpc	r23, r27
    2768:	28 f4       	brcc	.+10     	; 0x2774 <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	8f e2       	ldi	r24, 0x2F	; 47
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    2774:	08 95       	ret

00002776 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    2776:	2f 92       	push	r2
    2778:	3f 92       	push	r3
    277a:	4f 92       	push	r4
    277c:	5f 92       	push	r5
    277e:	6f 92       	push	r6
    2780:	7f 92       	push	r7
    2782:	8f 92       	push	r8
    2784:	9f 92       	push	r9
    2786:	af 92       	push	r10
    2788:	bf 92       	push	r11
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	2c 97       	sbiw	r28, 0x0c	; 12
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	2b 01       	movw	r4, r22
    27ac:	3c 01       	movw	r6, r24
    27ae:	49 01       	movw	r8, r18
    27b0:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    27b2:	62 17       	cp	r22, r18
    27b4:	73 07       	cpc	r23, r19
    27b6:	84 07       	cpc	r24, r20
    27b8:	95 07       	cpc	r25, r21
    27ba:	50 f0       	brcs	.+20     	; 0x27d0 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    27bc:	e1 14       	cp	r14, r1
    27be:	f1 04       	cpc	r15, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <_Z14reportTimeTillmmPKcS0_+0x4e>
    27c2:	04 c1       	rjmp	.+520    	; 0x29cc <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    27c4:	61 e0       	ldi	r22, 0x01	; 1
    27c6:	c7 01       	movw	r24, r14
    27c8:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	ff c0       	rjmp	.+510    	; 0x29ce <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    27d0:	01 15       	cp	r16, r1
    27d2:	11 05       	cpc	r17, r1
    27d4:	21 f0       	breq	.+8      	; 0x27de <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	c8 01       	movw	r24, r16
    27da:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    27de:	75 01       	movw	r14, r10
    27e0:	64 01       	movw	r12, r8
    27e2:	c4 18       	sub	r12, r4
    27e4:	d5 08       	sbc	r13, r5
    27e6:	e6 08       	sbc	r14, r6
    27e8:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    27ea:	c7 01       	movw	r24, r14
    27ec:	b6 01       	movw	r22, r12
    27ee:	20 e8       	ldi	r18, 0x80	; 128
    27f0:	33 e3       	ldi	r19, 0x33	; 51
    27f2:	41 ee       	ldi	r20, 0xE1	; 225
    27f4:	51 e0       	ldi	r21, 0x01	; 1
    27f6:	0e 94 2e 2c 	call	0x585c	; 0x585c <__udivmodsi4>
    27fa:	29 01       	movw	r4, r18
    27fc:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    27fe:	44 27       	eor	r20, r20
    2800:	55 27       	eor	r21, r21
    2802:	60 e8       	ldi	r22, 0x80	; 128
    2804:	73 e3       	ldi	r23, 0x33	; 51
    2806:	81 ee       	ldi	r24, 0xE1	; 225
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__mulsi3>
    280e:	c6 1a       	sub	r12, r22
    2810:	d7 0a       	sbc	r13, r23
    2812:	e8 0a       	sbc	r14, r24
    2814:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2816:	c7 01       	movw	r24, r14
    2818:	b6 01       	movw	r22, r12
    281a:	20 e8       	ldi	r18, 0x80	; 128
    281c:	31 e5       	ldi	r19, 0x51	; 81
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	0e 94 2e 2c 	call	0x585c	; 0x585c <__udivmodsi4>
    2826:	49 01       	movw	r8, r18
    2828:	5a 01       	movw	r10, r20
    282a:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    282c:	44 27       	eor	r20, r20
    282e:	55 27       	eor	r21, r21
    2830:	60 e8       	ldi	r22, 0x80	; 128
    2832:	71 e5       	ldi	r23, 0x51	; 81
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__mulsi3>
    283c:	c6 1a       	sub	r12, r22
    283e:	d7 0a       	sbc	r13, r23
    2840:	e8 0a       	sbc	r14, r24
    2842:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2844:	c7 01       	movw	r24, r14
    2846:	b6 01       	movw	r22, r12
    2848:	20 e1       	ldi	r18, 0x10	; 16
    284a:	3e e0       	ldi	r19, 0x0E	; 14
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	0e 94 2e 2c 	call	0x585c	; 0x585c <__udivmodsi4>
    2854:	29 83       	std	Y+1, r18	; 0x01
    2856:	3a 83       	std	Y+2, r19	; 0x02
    2858:	4b 83       	std	Y+3, r20	; 0x03
    285a:	5c 83       	std	Y+4, r21	; 0x04
    285c:	29 81       	ldd	r18, Y+1	; 0x01
    285e:	3a 81       	ldd	r19, Y+2	; 0x02
    2860:	3a 87       	std	Y+10, r19	; 0x0a
    2862:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2864:	29 81       	ldd	r18, Y+1	; 0x01
    2866:	3a 81       	ldd	r19, Y+2	; 0x02
    2868:	4b 81       	ldd	r20, Y+3	; 0x03
    286a:	5c 81       	ldd	r21, Y+4	; 0x04
    286c:	44 27       	eor	r20, r20
    286e:	55 27       	eor	r21, r21
    2870:	a0 e1       	ldi	r26, 0x10	; 16
    2872:	be e0       	ldi	r27, 0x0E	; 14
    2874:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__muluhisi3>
    2878:	c6 1a       	sub	r12, r22
    287a:	d7 0a       	sbc	r13, r23
    287c:	e8 0a       	sbc	r14, r24
    287e:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    2880:	c7 01       	movw	r24, r14
    2882:	b6 01       	movw	r22, r12
    2884:	2c e3       	ldi	r18, 0x3C	; 60
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	0e 94 2e 2c 	call	0x585c	; 0x585c <__udivmodsi4>
    2890:	2d 83       	std	Y+5, r18	; 0x05
    2892:	3e 83       	std	Y+6, r19	; 0x06
    2894:	4f 83       	std	Y+7, r20	; 0x07
    2896:	58 87       	std	Y+8, r21	; 0x08
    2898:	0d 81       	ldd	r16, Y+5	; 0x05
    289a:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    289c:	2c e3       	ldi	r18, 0x3C	; 60
    289e:	20 9f       	mul	r18, r16
    28a0:	c0 01       	movw	r24, r0
    28a2:	21 9f       	mul	r18, r17
    28a4:	90 0d       	add	r25, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	a6 01       	movw	r20, r12
    28aa:	48 1b       	sub	r20, r24
    28ac:	59 0b       	sbc	r21, r25
    28ae:	5c 87       	std	Y+12, r21	; 0x0c
    28b0:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    28b2:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <g_tempStr>

		if(years)
    28b6:	41 14       	cp	r4, r1
    28b8:	51 04       	cpc	r5, r1
    28ba:	b9 f0       	breq	.+46     	; 0x28ea <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    28bc:	5f 92       	push	r5
    28be:	4f 92       	push	r4
    28c0:	81 e4       	ldi	r24, 0x41	; 65
    28c2:	91 e0       	ldi	r25, 0x01	; 1
    28c4:	9f 93       	push	r25
    28c6:	8f 93       	push	r24
    28c8:	84 e0       	ldi	r24, 0x04	; 4
    28ca:	95 e0       	ldi	r25, 0x05	; 5
    28cc:	9f 93       	push	r25
    28ce:	8f 93       	push	r24
    28d0:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	84 e0       	ldi	r24, 0x04	; 4
    28d8:	95 e0       	ldi	r25, 0x05	; 5
    28da:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
		}

		if(days)
    28ea:	23 28       	or	r2, r3
    28ec:	b9 f0       	breq	.+46     	; 0x291c <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    28ee:	9f 92       	push	r9
    28f0:	8f 92       	push	r8
    28f2:	89 e4       	ldi	r24, 0x49	; 73
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	9f 93       	push	r25
    28f8:	8f 93       	push	r24
    28fa:	84 e0       	ldi	r24, 0x04	; 4
    28fc:	95 e0       	ldi	r25, 0x05	; 5
    28fe:	9f 93       	push	r25
    2900:	8f 93       	push	r24
    2902:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2906:	61 e0       	ldi	r22, 0x01	; 1
    2908:	84 e0       	ldi	r24, 0x04	; 4
    290a:	95 e0       	ldi	r25, 0x05	; 5
    290c:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
		}

		if(hours)
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	89 2b       	or	r24, r25
    2922:	c9 f0       	breq	.+50     	; 0x2956 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	9f 93       	push	r25
    2928:	e9 81       	ldd	r30, Y+1	; 0x01
    292a:	ef 93       	push	r30
    292c:	82 e5       	ldi	r24, 0x52	; 82
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	9f 93       	push	r25
    2932:	8f 93       	push	r24
    2934:	84 e0       	ldi	r24, 0x04	; 4
    2936:	95 e0       	ldi	r25, 0x05	; 5
    2938:	9f 93       	push	r25
    293a:	8f 93       	push	r24
    293c:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2940:	61 e0       	ldi	r22, 0x01	; 1
    2942:	84 e0       	ldi	r24, 0x04	; 4
    2944:	95 e0       	ldi	r25, 0x05	; 5
    2946:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
		}

		if(minutes)
    2956:	01 2b       	or	r16, r17
    2958:	c9 f0       	breq	.+50     	; 0x298c <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    295a:	fe 81       	ldd	r31, Y+6	; 0x06
    295c:	ff 93       	push	r31
    295e:	2d 81       	ldd	r18, Y+5	; 0x05
    2960:	2f 93       	push	r18
    2962:	8a e5       	ldi	r24, 0x5A	; 90
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	9f 93       	push	r25
    2968:	8f 93       	push	r24
    296a:	84 e0       	ldi	r24, 0x04	; 4
    296c:	95 e0       	ldi	r25, 0x05	; 5
    296e:	9f 93       	push	r25
    2970:	8f 93       	push	r24
    2972:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	84 e0       	ldi	r24, 0x04	; 4
    297a:	95 e0       	ldi	r25, 0x05	; 5
    297c:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    298c:	3c 85       	ldd	r19, Y+12	; 0x0c
    298e:	3f 93       	push	r19
    2990:	4b 85       	ldd	r20, Y+11	; 0x0b
    2992:	4f 93       	push	r20
    2994:	82 e6       	ldi	r24, 0x62	; 98
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	9f 93       	push	r25
    299a:	8f 93       	push	r24
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	95 e0       	ldi	r25, 0x05	; 5
    29a0:	9f 93       	push	r25
    29a2:	8f 93       	push	r24
    29a4:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
		lb_send_string(g_tempStr, TRUE);
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	84 e0       	ldi	r24, 0x04	; 4
    29ac:	95 e0       	ldi	r25, 0x05	; 5
    29ae:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>

		lb_send_NewLine();
    29b2:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    29b6:	e4 e0       	ldi	r30, 0x04	; 4
    29b8:	f5 e0       	ldi	r31, 0x05	; 5
    29ba:	10 82       	st	Z, r1
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	01 c0       	rjmp	.+2      	; 0x29ce <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    29ce:	2c 96       	adiw	r28, 0x0c	; 12
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	9f 90       	pop	r9
    29f0:	8f 90       	pop	r8
    29f2:	7f 90       	pop	r7
    29f4:	6f 90       	pop	r6
    29f6:	5f 90       	pop	r5
    29f8:	4f 90       	pop	r4
    29fa:	3f 90       	pop	r3
    29fc:	2f 90       	pop	r2
    29fe:	08 95       	ret

00002a00 <_Z18startEventUsingRTCv>:

	linkbus_init(BAUD);
}

void startEventUsingRTC(void)
{
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
	g_transmissions_disabled = TRUE;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_transmissions_disabled>

	if(!clockConfigurationCheck())
    2a0e:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    2a12:	81 11       	cpse	r24, r1
    2a14:	5d c0       	rjmp	.+186    	; 0x2ad0 <_Z18startEventUsingRTCv+0xd0>
	{
		g_use_rtc_to_start = TRUE;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <g_use_rtc_to_start>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    2a1c:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <g_event_start_epoch>
    2a20:	30 91 ae 05 	lds	r19, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    2a24:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    2a28:	50 91 b0 05 	lds	r21, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    2a2c:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_current_epoch>
    2a30:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2a34:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2a38:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2a3c:	0f 2e       	mov	r0, r31
    2a3e:	f9 e6       	ldi	r31, 0x69	; 105
    2a40:	ef 2e       	mov	r14, r31
    2a42:	f1 e0       	ldi	r31, 0x01	; 1
    2a44:	ff 2e       	mov	r15, r31
    2a46:	f0 2d       	mov	r31, r0
    2a48:	06 e7       	ldi	r16, 0x76	; 118
    2a4a:	11 e0       	ldi	r17, 0x01	; 1
    2a4c:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    2a50:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    2a54:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    2a58:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    2a5c:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    2a60:	60 91 ad 05 	lds	r22, 0x05AD	; 0x8005ad <g_event_start_epoch>
    2a64:	70 91 ae 05 	lds	r23, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    2a68:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    2a6c:	90 91 b0 05 	lds	r25, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    2a70:	e1 2c       	mov	r14, r1
    2a72:	f1 2c       	mov	r15, r1
    2a74:	02 e8       	ldi	r16, 0x82	; 130
    2a76:	11 e0       	ldi	r17, 0x01	; 1
    2a78:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    2a7c:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <g_event_start_epoch>
    2a80:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    2a84:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    2a88:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    2a8c:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    2a90:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2a94:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2a98:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2a9c:	48 17       	cp	r20, r24
    2a9e:	59 07       	cpc	r21, r25
    2aa0:	6a 07       	cpc	r22, r26
    2aa2:	7b 07       	cpc	r23, r27
    2aa4:	b8 f4       	brcc	.+46     	; 0x2ad4 <_Z18startEventUsingRTCv+0xd4>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    2aa6:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    2aaa:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    2aae:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    2ab2:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    2ab6:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_current_epoch>
    2aba:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2abe:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2ac2:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2ac6:	0a e8       	ldi	r16, 0x8A	; 138
    2ac8:	11 e0       	ldi	r17, 0x01	; 1
    2aca:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <_Z18startEventUsingRTCv+0xd4>
		}
	}
	else
	{
		reportConfigErrors();
    2ad0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_Z18reportConfigErrorsv>
	}
}
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	08 95       	ret

00002ade <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
    2ade:	4f 92       	push	r4
    2ae0:	5f 92       	push	r5
    2ae2:	6f 92       	push	r6
    2ae4:	7f 92       	push	r7
    2ae6:	8f 92       	push	r8
    2ae8:	9f 92       	push	r9
    2aea:	af 92       	push	r10
    2aec:	bf 92       	push	r11
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	2c 97       	sbiw	r28, 0x0c	; 12
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	8c 01       	movw	r16, r24
    2b0c:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    2b0e:	fc 01       	movw	r30, r24
    2b10:	01 90       	ld	r0, Z+
    2b12:	00 20       	and	r0, r0
    2b14:	e9 f7       	brne	.-6      	; 0x2b10 <_Z18validateTimeStringPcPma+0x32>
    2b16:	31 97       	sbiw	r30, 0x01	; 1
    2b18:	e8 1b       	sub	r30, r24
    2b1a:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    2b1c:	25 e0       	ldi	r18, 0x05	; 5
    2b1e:	6d 3a       	cpi	r22, 0xAD	; 173
    2b20:	72 07       	cpc	r23, r18
    2b22:	49 f5       	brne	.+82     	; 0x2b76 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    2b24:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    2b28:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2b2c:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2b30:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2b34:	89 87       	std	Y+9, r24	; 0x09
    2b36:	9a 87       	std	Y+10, r25	; 0x0a
    2b38:	ab 87       	std	Y+11, r26	; 0x0b
    2b3a:	bc 87       	std	Y+12, r27	; 0x0c
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	96 e6       	ldi	r25, 0x66	; 102
    2b40:	ae ee       	ldi	r26, 0xEE	; 238
    2b42:	bf e5       	ldi	r27, 0x5F	; 95
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	ab 83       	std	Y+3, r26	; 0x03
    2b4a:	bc 83       	std	Y+4, r27	; 0x04
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b52:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b54:	81 15       	cp	r24, r1
    2b56:	96 46       	sbci	r25, 0x66	; 102
    2b58:	ae 4e       	sbci	r26, 0xEE	; 238
    2b5a:	bf 45       	sbci	r27, 0x5F	; 95
    2b5c:	28 f4       	brcc	.+10     	; 0x2b68 <_Z18validateTimeStringPcPma+0x8a>
    2b5e:	89 80       	ldd	r8, Y+1	; 0x01
    2b60:	9a 80       	ldd	r9, Y+2	; 0x02
    2b62:	ab 80       	ldd	r10, Y+3	; 0x03
    2b64:	bc 80       	ldd	r11, Y+4	; 0x04
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <_Z18validateTimeStringPcPma+0x92>
    2b68:	89 84       	ldd	r8, Y+9	; 0x09
    2b6a:	9a 84       	ldd	r9, Y+10	; 0x0a
    2b6c:	ab 84       	ldd	r10, Y+11	; 0x0b
    2b6e:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    2b70:	ff 24       	eor	r15, r15
    2b72:	f3 94       	inc	r15
    2b74:	42 c0       	rjmp	.+132    	; 0x2bfa <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    2b76:	69 5a       	subi	r22, 0xA9	; 169
    2b78:	75 40       	sbci	r23, 0x05	; 5
    2b7a:	a9 f5       	brne	.+106    	; 0x2be6 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2b7c:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
    2b80:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    2b84:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    2b88:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	af 83       	std	Y+7, r26	; 0x07
    2b92:	b8 87       	std	Y+8, r27	; 0x08
    2b94:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    2b98:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2b9c:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2ba0:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	ab 83       	std	Y+3, r26	; 0x03
    2baa:	bc 83       	std	Y+4, r27	; 0x04
    2bac:	4d 81       	ldd	r20, Y+5	; 0x05
    2bae:	5e 81       	ldd	r21, Y+6	; 0x06
    2bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb2:	78 85       	ldd	r23, Y+8	; 0x08
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	ab 81       	ldd	r26, Y+3	; 0x03
    2bba:	bc 81       	ldd	r27, Y+4	; 0x04
    2bbc:	48 17       	cp	r20, r24
    2bbe:	59 07       	cpc	r21, r25
    2bc0:	6a 07       	cpc	r22, r26
    2bc2:	7b 07       	cpc	r23, r27
    2bc4:	40 f4       	brcc	.+16     	; 0x2bd6 <_Z18validateTimeStringPcPma+0xf8>
    2bc6:	89 80       	ldd	r8, Y+1	; 0x01
    2bc8:	9a 80       	ldd	r9, Y+2	; 0x02
    2bca:	ab 80       	ldd	r10, Y+3	; 0x03
    2bcc:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    2bce:	68 94       	set
    2bd0:	ff 24       	eor	r15, r15
    2bd2:	f1 f8       	bld	r15, 1
    2bd4:	12 c0       	rjmp	.+36     	; 0x2bfa <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2bd6:	8d 80       	ldd	r8, Y+5	; 0x05
    2bd8:	9e 80       	ldd	r9, Y+6	; 0x06
    2bda:	af 80       	ldd	r10, Y+7	; 0x07
    2bdc:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    2bde:	68 94       	set
    2be0:	ff 24       	eor	r15, r15
    2be2:	f1 f8       	bld	r15, 1
    2be4:	0a c0       	rjmp	.+20     	; 0x2bfa <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    2be6:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    2be8:	0f 2e       	mov	r0, r31
    2bea:	81 2c       	mov	r8, r1
    2bec:	f6 e6       	ldi	r31, 0x66	; 102
    2bee:	9f 2e       	mov	r9, r31
    2bf0:	fe ee       	ldi	r31, 0xEE	; 238
    2bf2:	af 2e       	mov	r10, r31
    2bf4:	ff e5       	ldi	r31, 0x5F	; 95
    2bf6:	bf 2e       	mov	r11, r31
    2bf8:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    2bfa:	ec 30       	cpi	r30, 0x0C	; 12
    2bfc:	f1 05       	cpc	r31, r1
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <_Z18validateTimeStringPcPma+0x124>
    2c00:	5e c0       	rjmp	.+188    	; 0x2cbe <_Z18validateTimeStringPcPma+0x1e0>
    2c02:	c8 01       	movw	r24, r16
    2c04:	0e 94 ce 12 	call	0x259c	; 0x259c <_Z11only_digitsPc>
    2c08:	88 23       	and	r24, r24
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <_Z18validateTimeStringPcPma+0x130>
    2c0c:	4f c0       	rjmp	.+158    	; 0x2cac <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    2c0e:	b8 01       	movw	r22, r16
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_Z16rv3028_get_epochPbPc>
    2c18:	2b 01       	movw	r4, r22
    2c1a:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    2c1c:	ae 2d       	mov	r26, r14
    2c1e:	ee 0c       	add	r14, r14
    2c20:	bb 0b       	sbc	r27, r27
    2c22:	20 e1       	ldi	r18, 0x10	; 16
    2c24:	3e e0       	ldi	r19, 0x0E	; 14
    2c26:	0e 94 84 2c 	call	0x5908	; 0x5908 <__usmulhisi3>
    2c2a:	64 0d       	add	r22, r4
    2c2c:	75 1d       	adc	r23, r5
    2c2e:	86 1d       	adc	r24, r6
    2c30:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    2c32:	86 16       	cp	r8, r22
    2c34:	97 06       	cpc	r9, r23
    2c36:	a8 06       	cpc	r10, r24
    2c38:	b9 06       	cpc	r11, r25
    2c3a:	08 f4       	brcc	.+2      	; 0x2c3e <_Z18validateTimeStringPcPma+0x160>
    2c3c:	45 c0       	rjmp	.+138    	; 0x2cc8 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    2c3e:	21 e0       	ldi	r18, 0x01	; 1
    2c40:	f2 12       	cpse	r15, r18
    2c42:	09 c0       	rjmp	.+18     	; 0x2c56 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    2c44:	68 e0       	ldi	r22, 0x08	; 8
    2c46:	8f eb       	ldi	r24, 0xBF	; 191
    2c48:	95 e0       	ldi	r25, 0x05	; 5
    2c4a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	cb 01       	movw	r24, r22
    2c54:	39 c0       	rjmp	.+114    	; 0x2cc8 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    2c56:	22 e0       	ldi	r18, 0x02	; 2
    2c58:	f2 12       	cpse	r15, r18
    2c5a:	1f c0       	rjmp	.+62     	; 0x2c9a <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    2c5c:	00 91 b1 05 	lds	r16, 0x05B1	; 0x8005b1 <g_current_epoch>
    2c60:	10 91 b2 05 	lds	r17, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    2c64:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    2c68:	30 91 b4 05 	lds	r19, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    2c6c:	60 17       	cp	r22, r16
    2c6e:	71 07       	cpc	r23, r17
    2c70:	82 07       	cpc	r24, r18
    2c72:	93 07       	cpc	r25, r19
    2c74:	48 f4       	brcc	.+18     	; 0x2c88 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    2c76:	67 e0       	ldi	r22, 0x07	; 7
    2c78:	8f eb       	ldi	r24, 0xBF	; 191
    2c7a:	95 e0       	ldi	r25, 0x05	; 5
    2c7c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	cb 01       	movw	r24, r22
    2c86:	20 c0       	rjmp	.+64     	; 0x2cc8 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    2c88:	66 e0       	ldi	r22, 0x06	; 6
    2c8a:	8f eb       	ldi	r24, 0xBF	; 191
    2c8c:	95 e0       	ldi	r25, 0x05	; 5
    2c8e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	cb 01       	movw	r24, r22
    2c98:	17 c0       	rjmp	.+46     	; 0x2cc8 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    2c9a:	6a e0       	ldi	r22, 0x0A	; 10
    2c9c:	8f eb       	ldi	r24, 0xBF	; 191
    2c9e:	95 e0       	ldi	r25, 0x05	; 5
    2ca0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	cb 01       	movw	r24, r22
    2caa:	0e c0       	rjmp	.+28     	; 0x2cc8 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    2cac:	69 e0       	ldi	r22, 0x09	; 9
    2cae:	8f eb       	ldi	r24, 0xBF	; 191
    2cb0:	95 e0       	ldi	r25, 0x05	; 5
    2cb2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	cb 01       	movw	r24, r22
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    2cbe:	ef 2b       	or	r30, r31
    2cc0:	a9 f7       	brne	.-22     	; 0x2cac <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    2cc8:	2c 96       	adiw	r28, 0x0c	; 12
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	bf 90       	pop	r11
    2ce2:	af 90       	pop	r10
    2ce4:	9f 90       	pop	r9
    2ce6:	8f 90       	pop	r8
    2ce8:	7f 90       	pop	r7
    2cea:	6f 90       	pop	r6
    2cec:	5f 90       	pop	r5
    2cee:	4f 90       	pop	r4
    2cf0:	08 95       	ret

00002cf2 <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	switch(value)
    2cf2:	84 30       	cpi	r24, 0x04	; 4
    2cf4:	c9 f0       	breq	.+50     	; 0x2d28 <_Z18setAMToneFrequencyh+0x36>
    2cf6:	28 f4       	brcc	.+10     	; 0x2d02 <_Z18setAMToneFrequencyh+0x10>
    2cf8:	82 30       	cpi	r24, 0x02	; 2
    2cfa:	41 f0       	breq	.+16     	; 0x2d0c <_Z18setAMToneFrequencyh+0x1a>
    2cfc:	83 30       	cpi	r24, 0x03	; 3
    2cfe:	69 f0       	breq	.+26     	; 0x2d1a <_Z18setAMToneFrequencyh+0x28>
    2d00:	28 c0       	rjmp	.+80     	; 0x2d52 <_Z18setAMToneFrequencyh+0x60>
    2d02:	85 30       	cpi	r24, 0x05	; 5
    2d04:	c1 f0       	breq	.+48     	; 0x2d36 <_Z18setAMToneFrequencyh+0x44>
    2d06:	86 30       	cpi	r24, 0x06	; 6
    2d08:	e9 f0       	breq	.+58     	; 0x2d44 <_Z18setAMToneFrequencyh+0x52>
    2d0a:	23 c0       	rjmp	.+70     	; 0x2d52 <_Z18setAMToneFrequencyh+0x60>
	{
		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    2d0c:	8c e2       	ldi	r24, 0x2C	; 44
    2d0e:	92 e0       	ldi	r25, 0x02	; 2
    2d10:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d14:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d18:	08 95       	ret

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    2d1a:	81 e7       	ldi	r24, 0x71	; 113
    2d1c:	92 e0       	ldi	r25, 0x02	; 2
    2d1e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d22:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d26:	08 95       	ret

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    2d28:	8a ec       	ldi	r24, 0xCA	; 202
    2d2a:	92 e0       	ldi	r25, 0x02	; 2
    2d2c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d30:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d34:	08 95       	ret

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    2d36:	81 e4       	ldi	r24, 0x41	; 65
    2d38:	93 e0       	ldi	r25, 0x03	; 3
    2d3a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d3e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d42:	08 95       	ret

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    2d44:	88 ee       	ldi	r24, 0xE8	; 232
    2d46:	93 e0       	ldi	r25, 0x03	; 3
    2d48:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d4c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d50:	08 95       	ret

		default:
		{
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
    2d52:	84 ef       	ldi	r24, 0xF4	; 244
    2d54:	91 e0       	ldi	r25, 0x01	; 1
    2d56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2d5e:	08 95       	ret

00002d60 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2d60:	2f 92       	push	r2
    2d62:	3f 92       	push	r3
    2d64:	4f 92       	push	r4
    2d66:	5f 92       	push	r5
    2d68:	6f 92       	push	r6
    2d6a:	7f 92       	push	r7
    2d6c:	8f 92       	push	r8
    2d6e:	9f 92       	push	r9
    2d70:	af 92       	push	r10
    2d72:	bf 92       	push	r11
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	2c 97       	sbiw	r28, 0x0c	; 12
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    2d94:	0f 2e       	mov	r0, r31
    2d96:	fa e6       	ldi	r31, 0x6A	; 106
    2d98:	8f 2e       	mov	r8, r31
    2d9a:	f5 e0       	ldi	r31, 0x05	; 5
    2d9c:	9f 2e       	mov	r9, r31
    2d9e:	f0 2d       	mov	r31, r0
    2da0:	0f 2e       	mov	r0, r31
    2da2:	f4 ed       	ldi	r31, 0xD4	; 212
    2da4:	6f 2e       	mov	r6, r31
    2da6:	f1 e0       	ldi	r31, 0x01	; 1
    2da8:	7f 2e       	mov	r7, r31
    2daa:	f0 2d       	mov	r31, r0
    2dac:	0f 2e       	mov	r0, r31
    2dae:	f4 e0       	ldi	r31, 0x04	; 4
    2db0:	af 2e       	mov	r10, r31
    2db2:	f5 e0       	ldi	r31, 0x05	; 5
    2db4:	bf 2e       	mov	r11, r31
    2db6:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2db8:	0f 2e       	mov	r0, r31
    2dba:	f8 ec       	ldi	r31, 0xC8	; 200
    2dbc:	4f 2e       	mov	r4, r31
    2dbe:	f1 e0       	ldi	r31, 0x01	; 1
    2dc0:	5f 2e       	mov	r5, r31
    2dc2:	f0 2d       	mov	r31, r0
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
				}

				sprintf(g_tempStr, "STA:%s\n", g_enable_start_timer ? "ON" : "OFF");
    2dc4:	0f 2e       	mov	r0, r31
    2dc6:	f9 eb       	ldi	r31, 0xB9	; 185
    2dc8:	2f 2e       	mov	r2, r31
    2dca:	f1 e0       	ldi	r31, 0x01	; 1
    2dcc:	3f 2e       	mov	r3, r31
    2dce:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2dd0:	0e 94 de 08 	call	0x11bc	; 0x11bc <_Z16nextFullRxBufferv>
    2dd4:	6c 01       	movw	r12, r24
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <_Z17handleLinkBusMsgsv+0x7c>
    2dda:	94 c5       	rjmp	.+2856   	; 0x3904 <_Z17handleLinkBusMsgsv+0xba4>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2ddc:	dc 01       	movw	r26, r24
    2dde:	11 96       	adiw	r26, 0x01	; 1
    2de0:	8d 91       	ld	r24, X+
    2de2:	9c 91       	ld	r25, X
    2de4:	12 97       	sbiw	r26, 0x02	; 2
    2de6:	8a 3e       	cpi	r24, 0xEA	; 234
    2de8:	b2 e2       	ldi	r27, 0x22	; 34
    2dea:	9b 07       	cpc	r25, r27
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <_Z17handleLinkBusMsgsv+0x90>
    2dee:	91 c2       	rjmp	.+1314   	; 0x3312 <_Z17handleLinkBusMsgsv+0x5b2>
    2df0:	f0 f4       	brcc	.+60     	; 0x2e2e <_Z17handleLinkBusMsgsv+0xce>
    2df2:	8f 36       	cpi	r24, 0x6F	; 111
    2df4:	fd e1       	ldi	r31, 0x1D	; 29
    2df6:	9f 07       	cpc	r25, r31
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <_Z17handleLinkBusMsgsv+0x9c>
    2dfa:	bc c2       	rjmp	.+1400   	; 0x3374 <_Z17handleLinkBusMsgsv+0x614>
    2dfc:	50 f4       	brcc	.+20     	; 0x2e12 <_Z17handleLinkBusMsgsv+0xb2>
    2dfe:	87 3d       	cpi	r24, 0xD7	; 215
    2e00:	32 e0       	ldi	r19, 0x02	; 2
    2e02:	93 07       	cpc	r25, r19
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <_Z17handleLinkBusMsgsv+0xa8>
    2e06:	ee c0       	rjmp	.+476    	; 0x2fe4 <_Z17handleLinkBusMsgsv+0x284>
    2e08:	8e 31       	cpi	r24, 0x1E	; 30
    2e0a:	93 40       	sbci	r25, 0x03	; 3
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <_Z17handleLinkBusMsgsv+0xb0>
    2e0e:	b4 c1       	rjmp	.+872    	; 0x3178 <_Z17handleLinkBusMsgsv+0x418>
    2e10:	51 c5       	rjmp	.+2722   	; 0x38b4 <_Z17handleLinkBusMsgsv+0xb54>
    2e12:	86 3c       	cpi	r24, 0xC6	; 198
    2e14:	ae e1       	ldi	r26, 0x1E	; 30
    2e16:	9a 07       	cpc	r25, r26
    2e18:	49 f1       	breq	.+82     	; 0x2e6c <_Z17handleLinkBusMsgsv+0x10c>
    2e1a:	86 3a       	cpi	r24, 0xA6	; 166
    2e1c:	b0 e2       	ldi	r27, 0x20	; 32
    2e1e:	9b 07       	cpc	r25, r27
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <_Z17handleLinkBusMsgsv+0xc4>
    2e22:	18 c1       	rjmp	.+560    	; 0x3054 <_Z17handleLinkBusMsgsv+0x2f4>
    2e24:	85 32       	cpi	r24, 0x25	; 37
    2e26:	9e 41       	sbci	r25, 0x1E	; 30
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <_Z17handleLinkBusMsgsv+0xcc>
    2e2a:	44 c5       	rjmp	.+2696   	; 0x38b4 <_Z17handleLinkBusMsgsv+0xb54>
    2e2c:	47 c5       	rjmp	.+2702   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
    2e2e:	80 3d       	cpi	r24, 0xD0	; 208
    2e30:	f3 e2       	ldi	r31, 0x23	; 35
    2e32:	9f 07       	cpc	r25, r31
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <_Z17handleLinkBusMsgsv+0xd8>
    2e36:	11 c2       	rjmp	.+1058   	; 0x325a <_Z17handleLinkBusMsgsv+0x4fa>
    2e38:	50 f4       	brcc	.+20     	; 0x2e4e <_Z17handleLinkBusMsgsv+0xee>
    2e3a:	8a 39       	cpi	r24, 0x9A	; 154
    2e3c:	33 e2       	ldi	r19, 0x23	; 35
    2e3e:	93 07       	cpc	r25, r19
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <_Z17handleLinkBusMsgsv+0xe4>
    2e42:	3c c5       	rjmp	.+2680   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
    2e44:	8f 3c       	cpi	r24, 0xCF	; 207
    2e46:	93 42       	sbci	r25, 0x23	; 35
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <_Z17handleLinkBusMsgsv+0xec>
    2e4a:	e2 c4       	rjmp	.+2500   	; 0x3810 <_Z17handleLinkBusMsgsv+0xab0>
    2e4c:	33 c5       	rjmp	.+2662   	; 0x38b4 <_Z17handleLinkBusMsgsv+0xb54>
    2e4e:	84 33       	cpi	r24, 0x34	; 52
    2e50:	a4 e2       	ldi	r26, 0x24	; 36
    2e52:	9a 07       	cpc	r25, r26
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <_Z17handleLinkBusMsgsv+0xf8>
    2e56:	7b c1       	rjmp	.+758    	; 0x314e <_Z17handleLinkBusMsgsv+0x3ee>
    2e58:	8c 39       	cpi	r24, 0x9C	; 156
    2e5a:	b4 e2       	ldi	r27, 0x24	; 36
    2e5c:	9b 07       	cpc	r25, r27
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <_Z17handleLinkBusMsgsv+0x102>
    2e60:	52 c2       	rjmp	.+1188   	; 0x3306 <_Z17handleLinkBusMsgsv+0x5a6>
    2e62:	85 3f       	cpi	r24, 0xF5	; 245
    2e64:	93 42       	sbci	r25, 0x23	; 35
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <_Z17handleLinkBusMsgsv+0x10a>
    2e68:	25 c5       	rjmp	.+2634   	; 0x38b4 <_Z17handleLinkBusMsgsv+0xb54>
    2e6a:	3b c1       	rjmp	.+630    	; 0x30e2 <_Z17handleLinkBusMsgsv+0x382>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2e6c:	d6 01       	movw	r26, r12
    2e6e:	13 96       	adiw	r26, 0x03	; 3
    2e70:	8c 91       	ld	r24, X
    2e72:	13 97       	sbiw	r26, 0x03	; 3
    2e74:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <_Z17handleLinkBusMsgsv+0x11c>
    2e7a:	9d c0       	rjmp	.+314    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
				{
					if(c == 'B')
    2e7c:	82 34       	cpi	r24, 0x42	; 66
    2e7e:	91 05       	cpc	r25, r1
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <_Z17handleLinkBusMsgsv+0x124>
    2e82:	22 c5       	rjmp	.+2628   	; 0x38c8 <_Z17handleLinkBusMsgsv+0xb68>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2e84:	84 34       	cpi	r24, 0x44	; 68
    2e86:	91 05       	cpc	r25, r1
    2e88:	41 f4       	brne	.+16     	; 0x2e9a <_Z17handleLinkBusMsgsv+0x13a>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2e8a:	57 96       	adiw	r26, 0x17	; 23
    2e8c:	8c 91       	ld	r24, X
    2e8e:	83 35       	cpi	r24, 0x53	; 83
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <_Z17handleLinkBusMsgsv+0x134>
    2e92:	1d c5       	rjmp	.+2618   	; 0x38ce <_Z17handleLinkBusMsgsv+0xb6e>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2e94:	86 e0       	ldi	r24, 0x06	; 6
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	7c c0       	rjmp	.+248    	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
						}
					}
					else if(c == 'F')
    2e9a:	86 34       	cpi	r24, 0x46	; 70
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <_Z17handleLinkBusMsgsv+0x142>
    2ea0:	19 c5       	rjmp	.+2610   	; 0x38d4 <_Z17handleLinkBusMsgsv+0xb74>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2ea2:	83 34       	cpi	r24, 0x43	; 67
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	c9 f4       	brne	.+50     	; 0x2eda <_Z17handleLinkBusMsgsv+0x17a>
					{
						char t = lb_buff->fields[FIELD2][0];
    2ea8:	f6 01       	movw	r30, r12
    2eaa:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2eac:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2eae:	82 34       	cpi	r24, 0x42	; 66
    2eb0:	29 f0       	breq	.+10     	; 0x2ebc <_Z17handleLinkBusMsgsv+0x15c>
						{
							t = '0';
						}

						if(isdigit(t))
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	c0 97       	sbiw	r24, 0x30	; 48
    2eb6:	0a 97       	sbiw	r24, 0x0a	; 10
    2eb8:	08 f0       	brcs	.+2      	; 0x2ebc <_Z17handleLinkBusMsgsv+0x15c>
    2eba:	7d c0       	rjmp	.+250    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    2ebc:	c6 01       	movw	r24, r12
    2ebe:	47 96       	adiw	r24, 0x17	; 23
    2ec0:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <atoi>
    2ec4:	99 23       	and	r25, r25
    2ec6:	14 f4       	brge	.+4      	; 0x2ecc <_Z17handleLinkBusMsgsv+0x16c>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	86 30       	cpi	r24, 0x06	; 6
    2ece:	91 05       	cpc	r25, r1
    2ed0:	0c f4       	brge	.+2      	; 0x2ed4 <_Z17handleLinkBusMsgsv+0x174>
    2ed2:	5c c0       	rjmp	.+184    	; 0x2f8c <_Z17handleLinkBusMsgsv+0x22c>
    2ed4:	85 e0       	ldi	r24, 0x05	; 5
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	59 c0       	rjmp	.+178    	; 0x2f8c <_Z17handleLinkBusMsgsv+0x22c>
						}
					}
					else if(c == 'S')
    2eda:	83 35       	cpi	r24, 0x53	; 83
    2edc:	91 05       	cpc	r25, r1
    2ede:	09 f0       	breq	.+2      	; 0x2ee2 <_Z17handleLinkBusMsgsv+0x182>
    2ee0:	43 c0       	rjmp	.+134    	; 0x2f68 <_Z17handleLinkBusMsgsv+0x208>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2ee2:	d6 01       	movw	r26, r12
    2ee4:	57 96       	adiw	r26, 0x17	; 23
    2ee6:	8c 91       	ld	r24, X
    2ee8:	57 97       	sbiw	r26, 0x17	; 23
						char u = lb_buff->fields[FIELD2][1];
    2eea:	58 96       	adiw	r26, 0x18	; 24
    2eec:	9c 91       	ld	r25, X
    2eee:	58 97       	sbiw	r26, 0x18	; 24
						lb_buff->fields[FIELD2][2] = '\0';
    2ef0:	59 96       	adiw	r26, 0x19	; 25
    2ef2:	1c 92       	st	X, r1

						if(t == 'B')
    2ef4:	82 34       	cpi	r24, 0x42	; 66
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <_Z17handleLinkBusMsgsv+0x19a>
    2ef8:	5e c0       	rjmp	.+188    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2efa:	86 34       	cpi	r24, 0x46	; 70
    2efc:	49 f4       	brne	.+18     	; 0x2f10 <_Z17handleLinkBusMsgsv+0x1b0>
						{
							if((u > '0') && (u < '6'))
    2efe:	8f ec       	ldi	r24, 0xCF	; 207
    2f00:	89 0f       	add	r24, r25
    2f02:	85 30       	cpi	r24, 0x05	; 5
    2f04:	08 f0       	brcs	.+2      	; 0x2f08 <_Z17handleLinkBusMsgsv+0x1a8>
    2f06:	57 c0       	rjmp	.+174    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_F1 + (u - '1');
    2f08:	89 2f       	mov	r24, r25
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	83 97       	sbiw	r24, 0x23	; 35
    2f0e:	1c c0       	rjmp	.+56     	; 0x2f48 <_Z17handleLinkBusMsgsv+0x1e8>
							}
						}
						else if(t == 'S')
    2f10:	83 35       	cpi	r24, 0x53	; 83
    2f12:	41 f4       	brne	.+16     	; 0x2f24 <_Z17handleLinkBusMsgsv+0x1c4>
						{
							if((u > '0') && (u < '6'))
    2f14:	8f ec       	ldi	r24, 0xCF	; 207
    2f16:	89 0f       	add	r24, r25
    2f18:	85 30       	cpi	r24, 0x05	; 5
    2f1a:	c8 f4       	brcc	.+50     	; 0x2f4e <_Z17handleLinkBusMsgsv+0x1ee>
							{
								x = SPRINT_S1 + (u - '1');
    2f1c:	89 2f       	mov	r24, r25
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	88 97       	sbiw	r24, 0x28	; 40
    2f22:	12 c0       	rjmp	.+36     	; 0x2f48 <_Z17handleLinkBusMsgsv+0x1e8>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2f24:	96 34       	cpi	r25, 0x46	; 70
    2f26:	41 f4       	brne	.+16     	; 0x2f38 <_Z17handleLinkBusMsgsv+0x1d8>
						{
							if((t > '0') && (t < '6'))
    2f28:	9f ec       	ldi	r25, 0xCF	; 207
    2f2a:	98 0f       	add	r25, r24
    2f2c:	95 30       	cpi	r25, 0x05	; 5
    2f2e:	08 f0       	brcs	.+2      	; 0x2f32 <_Z17handleLinkBusMsgsv+0x1d2>
    2f30:	42 c0       	rjmp	.+132    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_F1 + (t - '1');
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	83 97       	sbiw	r24, 0x23	; 35
    2f36:	08 c0       	rjmp	.+16     	; 0x2f48 <_Z17handleLinkBusMsgsv+0x1e8>
							}
						}
						else if(u == 'S')
    2f38:	93 35       	cpi	r25, 0x53	; 83
    2f3a:	e9 f5       	brne	.+122    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
						{
							if((t > '0') && (t < '6'))
    2f3c:	9f ec       	ldi	r25, 0xCF	; 207
    2f3e:	98 0f       	add	r25, r24
    2f40:	95 30       	cpi	r25, 0x05	; 5
    2f42:	c8 f5       	brcc	.+114    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_S1 + (t - '1');
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	19 f4       	brne	.+6      	; 0x2f52 <_Z17handleLinkBusMsgsv+0x1f2>
    2f4c:	34 c0       	rjmp	.+104    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2f4e:	88 e0       	ldi	r24, 0x08	; 8
    2f50:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    2f52:	88 30       	cpi	r24, 0x08	; 8
    2f54:	91 05       	cpc	r25, r1
    2f56:	14 f4       	brge	.+4      	; 0x2f5c <_Z17handleLinkBusMsgsv+0x1fc>
    2f58:	88 e0       	ldi	r24, 0x08	; 8
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	83 31       	cpi	r24, 0x13	; 19
    2f5e:	91 05       	cpc	r25, r1
    2f60:	ac f0       	brlt	.+42     	; 0x2f8c <_Z17handleLinkBusMsgsv+0x22c>
    2f62:	82 e1       	ldi	r24, 0x12	; 18
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	12 c0       	rjmp	.+36     	; 0x2f8c <_Z17handleLinkBusMsgsv+0x22c>
						}
					}
					else if(c == 'N')
    2f68:	8e 34       	cpi	r24, 0x4E	; 78
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	59 f4       	brne	.+22     	; 0x2f84 <_Z17handleLinkBusMsgsv+0x224>
					{
						char t = lb_buff->fields[FIELD2][0];
    2f6e:	f6 01       	movw	r30, r12
    2f70:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2f72:	82 33       	cpi	r24, 0x32	; 50
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <_Z17handleLinkBusMsgsv+0x218>
    2f76:	b1 c4       	rjmp	.+2402   	; 0x38da <_Z17handleLinkBusMsgsv+0xb7a>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2f78:	85 33       	cpi	r24, 0x35	; 53
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <_Z17handleLinkBusMsgsv+0x21e>
    2f7c:	b0 c4       	rjmp	.+2400   	; 0x38de <_Z17handleLinkBusMsgsv+0xb7e>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	07 c0       	rjmp	.+14     	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2f84:	c6 01       	movw	r24, r12
    2f86:	03 96       	adiw	r24, 0x03	; 3
    2f88:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2f8c:	86 31       	cpi	r24, 0x16	; 22
    2f8e:	91 05       	cpc	r25, r1
    2f90:	90 f4       	brcc	.+36     	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
					{
						Fox_t holdFox = (Fox_t)c;
    2f92:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    2f94:	ae 01       	movw	r20, r28
    2f96:	4f 5f       	subi	r20, 0xFF	; 255
    2f98:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9a:	60 e1       	ldi	r22, 0x10	; 16
    2f9c:	8f eb       	ldi	r24, 0xBF	; 191
    2f9e:	95 e0       	ldi	r25, 0x05	; 5
    2fa0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    2fa4:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    2fa8:	99 81       	ldd	r25, Y+1	; 0x01
    2faa:	98 17       	cp	r25, r24
    2fac:	21 f0       	breq	.+8      	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x256>
						{
							setupForFox(&holdFox);
    2fae:	ce 01       	movw	r24, r28
    2fb0:	01 96       	adiw	r24, 0x01	; 1
    2fb2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    2fb6:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    2fba:	1f 92       	push	r1
    2fbc:	8f 93       	push	r24
    2fbe:	82 ea       	ldi	r24, 0xA2	; 162
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	9f 93       	push	r25
    2fc4:	8f 93       	push	r24
    2fc6:	bf 92       	push	r11
    2fc8:	af 92       	push	r10
    2fca:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	c5 01       	movw	r24, r10
    2fd2:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	6c c4       	rjmp	.+2264   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    2fe4:	d6 01       	movw	r26, r12
    2fe6:	13 96       	adiw	r26, 0x03	; 3
    2fe8:	8c 91       	ld	r24, X
    2fea:	88 23       	and	r24, r24
    2fec:	e1 f0       	breq	.+56     	; 0x3026 <_Z17handleLinkBusMsgsv+0x2c6>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    2fee:	c6 01       	movw	r24, r12
    2ff0:	03 96       	adiw	r24, 0x03	; 3
    2ff2:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	16 16       	cp	r1, r22
    2ffa:	17 06       	cpc	r1, r23
    2ffc:	14 f0       	brlt	.+4      	; 0x3002 <_Z17handleLinkBusMsgsv+0x2a2>
    2ffe:	61 e0       	ldi	r22, 0x01	; 1
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	67 30       	cpi	r22, 0x07	; 7
    3004:	71 05       	cpc	r23, r1
    3006:	14 f0       	brlt	.+4      	; 0x300c <_Z17handleLinkBusMsgsv+0x2ac>
    3008:	66 e0       	ldi	r22, 0x06	; 6
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	60 93 a6 05 	sts	0x05A6, r22	; 0x8005a6 <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3010:	46 ea       	ldi	r20, 0xA6	; 166
    3012:	55 e0       	ldi	r21, 0x05	; 5
    3014:	61 e1       	ldi	r22, 0x11	; 17
    3016:	8f eb       	ldi	r24, 0xBF	; 191
    3018:	95 e0       	ldi	r25, 0x05	; 5
    301a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    301e:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <g_AM_audio_frequency>
    3022:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    3026:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <g_AM_audio_frequency>
    302a:	1f 92       	push	r1
    302c:	8f 93       	push	r24
    302e:	8a ea       	ldi	r24, 0xAA	; 170
    3030:	91 e0       	ldi	r25, 0x01	; 1
    3032:	9f 93       	push	r25
    3034:	8f 93       	push	r24
    3036:	bf 92       	push	r11
    3038:	af 92       	push	r10
    303a:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	c5 01       	movw	r24, r10
    3042:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	34 c4       	rjmp	.+2152   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    3054:	f6 01       	movw	r30, r12
    3056:	83 81       	ldd	r24, Z+3	; 0x03
    3058:	88 23       	and	r24, r24
    305a:	09 f1       	breq	.+66     	; 0x309e <_Z17handleLinkBusMsgsv+0x33e>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    305c:	94 81       	ldd	r25, Z+4	; 0x04
    305e:	96 34       	cpi	r25, 0x46	; 70
    3060:	11 f0       	breq	.+4      	; 0x3066 <_Z17handleLinkBusMsgsv+0x306>
    3062:	80 33       	cpi	r24, 0x30	; 48
    3064:	59 f4       	brne	.+22     	; 0x307c <_Z17handleLinkBusMsgsv+0x31c>
					{
						g_enable_LEDs = FALSE;
    3066:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_enable_LEDs>
						digitalWrite(PIN_LED1, OFF);    /*  LED Off */
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	8d e0       	ldi	r24, 0x0D	; 13
    306e:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
						digitalWrite(PIN_LED2, OFF);
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	8d e0       	ldi	r24, 0x0D	; 13
    3076:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <_Z17handleLinkBusMsgsv+0x322>
					}
					else
					{
						g_enable_LEDs = TRUE;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_enable_LEDs>
					}

					ee_mgr.updateEEPROMVar(Enable_LEDs, (void*)&g_enable_LEDs);
    3082:	4a e3       	ldi	r20, 0x3A	; 58
    3084:	55 e0       	ldi	r21, 0x05	; 5
    3086:	62 e1       	ldi	r22, 0x12	; 18
    3088:	8f eb       	ldi	r24, 0xBF	; 191
    308a:	95 e0       	ldi	r25, 0x05	; 5
    308c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    3090:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <g_enable_LEDs>
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	91 11       	cpse	r25, r1
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr, "LED:%s\n", g_enable_LEDs ? "ON" : "OFF");
    309e:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_enable_LEDs>
    30a2:	81 11       	cpse	r24, r1
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <_Z17handleLinkBusMsgsv+0x350>
    30a6:	2e e9       	ldi	r18, 0x9E	; 158
    30a8:	31 e0       	ldi	r19, 0x01	; 1
    30aa:	82 2f       	mov	r24, r18
    30ac:	93 2f       	mov	r25, r19
    30ae:	04 c0       	rjmp	.+8      	; 0x30b8 <_Z17handleLinkBusMsgsv+0x358>
    30b0:	ab e9       	ldi	r26, 0x9B	; 155
    30b2:	b1 e0       	ldi	r27, 0x01	; 1
    30b4:	8a 2f       	mov	r24, r26
    30b6:	9b 2f       	mov	r25, r27
    30b8:	9f 93       	push	r25
    30ba:	8f 93       	push	r24
    30bc:	81 eb       	ldi	r24, 0xB1	; 177
    30be:	91 e0       	ldi	r25, 0x01	; 1
    30c0:	9f 93       	push	r25
    30c2:	8f 93       	push	r24
    30c4:	bf 92       	push	r11
    30c6:	af 92       	push	r10
    30c8:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	c5 01       	movw	r24, r10
    30d0:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	ed c3       	rjmp	.+2010   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    30e2:	f6 01       	movw	r30, r12
    30e4:	83 81       	ldd	r24, Z+3	; 0x03
    30e6:	88 23       	and	r24, r24
    30e8:	91 f0       	breq	.+36     	; 0x310e <_Z17handleLinkBusMsgsv+0x3ae>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    30ea:	94 81       	ldd	r25, Z+4	; 0x04
    30ec:	96 34       	cpi	r25, 0x46	; 70
    30ee:	11 f0       	breq	.+4      	; 0x30f4 <_Z17handleLinkBusMsgsv+0x394>
    30f0:	80 33       	cpi	r24, 0x30	; 48
    30f2:	19 f4       	brne	.+6      	; 0x30fa <_Z17handleLinkBusMsgsv+0x39a>
					{
						g_enable_start_timer = FALSE;
    30f4:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_enable_start_timer>
    30f8:	03 c0       	rjmp	.+6      	; 0x3100 <_Z17handleLinkBusMsgsv+0x3a0>
					}
					else
					{
						g_enable_start_timer = TRUE;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_enable_start_timer>
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
    3100:	49 e3       	ldi	r20, 0x39	; 57
    3102:	55 e0       	ldi	r21, 0x05	; 5
    3104:	65 e1       	ldi	r22, 0x15	; 21
    3106:	8f eb       	ldi	r24, 0xBF	; 191
    3108:	95 e0       	ldi	r25, 0x05	; 5
    310a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
				}

				sprintf(g_tempStr, "STA:%s\n", g_enable_start_timer ? "ON" : "OFF");
    310e:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_enable_start_timer>
    3112:	81 11       	cpse	r24, r1
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <_Z17handleLinkBusMsgsv+0x3c0>
    3116:	2e e9       	ldi	r18, 0x9E	; 158
    3118:	31 e0       	ldi	r19, 0x01	; 1
    311a:	82 2f       	mov	r24, r18
    311c:	93 2f       	mov	r25, r19
    311e:	04 c0       	rjmp	.+8      	; 0x3128 <_Z17handleLinkBusMsgsv+0x3c8>
    3120:	ab e9       	ldi	r26, 0x9B	; 155
    3122:	b1 e0       	ldi	r27, 0x01	; 1
    3124:	8a 2f       	mov	r24, r26
    3126:	9b 2f       	mov	r25, r27
    3128:	9f 93       	push	r25
    312a:	8f 93       	push	r24
    312c:	3f 92       	push	r3
    312e:	2f 92       	push	r2
    3130:	bf 92       	push	r11
    3132:	af 92       	push	r10
    3134:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	c5 01       	movw	r24, r10
    313c:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	b7 c3       	rjmp	.+1902   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    314e:	f6 01       	movw	r30, r12
    3150:	83 81       	ldd	r24, Z+3	; 0x03
    3152:	88 23       	and	r24, r24
    3154:	09 f4       	brne	.+2      	; 0x3158 <_Z17handleLinkBusMsgsv+0x3f8>
    3156:	b2 c3       	rjmp	.+1892   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    3158:	80 33       	cpi	r24, 0x30	; 48
    315a:	19 f4       	brne	.+6      	; 0x3162 <_Z17handleLinkBusMsgsv+0x402>
					{
						stopEventNow();
    315c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_Z12stopEventNowv>
    3160:	ad c3       	rjmp	.+1882   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3162:	81 33       	cpi	r24, 0x31	; 49
    3164:	19 f4       	brne	.+6      	; 0x316c <_Z17handleLinkBusMsgsv+0x40c>
					{
						startEventNow();
    3166:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_Z13startEventNowv>
    316a:	a8 c3       	rjmp	.+1872   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    316c:	82 33       	cpi	r24, 0x32	; 50
    316e:	09 f0       	breq	.+2      	; 0x3172 <_Z17handleLinkBusMsgsv+0x412>
    3170:	a5 c3       	rjmp	.+1866   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
					{
						startEventUsingRTC();
    3172:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_Z18startEventUsingRTCv>
    3176:	a2 c3       	rjmp	.+1860   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    3178:	d6 01       	movw	r26, r12
    317a:	13 96       	adiw	r26, 0x03	; 3
    317c:	8c 91       	ld	r24, X
    317e:	88 23       	and	r24, r24
    3180:	99 f1       	breq	.+102    	; 0x31e8 <_Z17handleLinkBusMsgsv+0x488>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    3182:	80 e2       	ldi	r24, 0x20	; 32
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	f5 01       	movw	r30, r10
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    318c:	b6 01       	movw	r22, r12
    318e:	6d 5f       	subi	r22, 0xFD	; 253
    3190:	7f 4f       	sbci	r23, 0xFF	; 255
    3192:	c5 01       	movw	r24, r10
    3194:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <strcat>

					if(lb_buff->fields[FIELD2][0])
    3198:	d6 01       	movw	r26, r12
    319a:	57 96       	adiw	r26, 0x17	; 23
    319c:	8c 91       	ld	r24, X
    319e:	88 23       	and	r24, r24
    31a0:	79 f0       	breq	.+30     	; 0x31c0 <_Z17handleLinkBusMsgsv+0x460>
					{
						strcat(g_tempStr, " ");
    31a2:	f5 01       	movw	r30, r10
    31a4:	01 90       	ld	r0, Z+
    31a6:	00 20       	and	r0, r0
    31a8:	e9 f7       	brne	.-6      	; 0x31a4 <_Z17handleLinkBusMsgsv+0x444>
    31aa:	31 97       	sbiw	r30, 0x01	; 1
    31ac:	80 e2       	ldi	r24, 0x20	; 32
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    31b4:	b6 01       	movw	r22, r12
    31b6:	69 5e       	subi	r22, 0xE9	; 233
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	c5 01       	movw	r24, r10
    31bc:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    31c0:	f5 01       	movw	r30, r10
    31c2:	01 90       	ld	r0, Z+
    31c4:	00 20       	and	r0, r0
    31c6:	e9 f7       	brne	.-6      	; 0x31c2 <_Z17handleLinkBusMsgsv+0x462>
    31c8:	31 97       	sbiw	r30, 0x01	; 1
    31ca:	e4 50       	subi	r30, 0x04	; 4
    31cc:	f5 40       	sbci	r31, 0x05	; 5
    31ce:	75 97       	sbiw	r30, 0x15	; 21
    31d0:	58 f4       	brcc	.+22     	; 0x31e8 <_Z17handleLinkBusMsgsv+0x488>
					{
						strcpy(g_messages_text[STATION_ID], g_tempStr);
    31d2:	b5 01       	movw	r22, r10
    31d4:	82 e5       	ldi	r24, 0x52	; 82
    31d6:	95 e0       	ldi	r25, 0x05	; 5
    31d8:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    31dc:	a5 01       	movw	r20, r10
    31de:	6b e0       	ldi	r22, 0x0B	; 11
    31e0:	8f eb       	ldi	r24, 0xBF	; 191
    31e2:	95 e0       	ldi	r25, 0x05	; 5
    31e4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    31e8:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_messages_text+0x15>
    31ec:	88 23       	and	r24, r24
    31ee:	f1 f0       	breq	.+60     	; 0x322c <_Z17handleLinkBusMsgsv+0x4cc>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    31f0:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <g_id_codespeed>
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	82 e5       	ldi	r24, 0x52	; 82
    31f8:	95 e0       	ldi	r25, 0x05	; 5
    31fa:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <_Z26timeRequiredToSendStrAtWPMPcj>
    31fe:	8c 50       	subi	r24, 0x0C	; 12
    3200:	9e 4f       	sbci	r25, 0xFE	; 254
    3202:	9c 01       	movw	r18, r24
    3204:	36 95       	lsr	r19
    3206:	27 95       	ror	r18
    3208:	36 95       	lsr	r19
    320a:	27 95       	ror	r18
    320c:	36 95       	lsr	r19
    320e:	27 95       	ror	r18
    3210:	a5 ec       	ldi	r26, 0xC5	; 197
    3212:	b0 e2       	ldi	r27, 0x20	; 32
    3214:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>
    3218:	92 95       	swap	r25
    321a:	82 95       	swap	r24
    321c:	8f 70       	andi	r24, 0x0F	; 15
    321e:	89 27       	eor	r24, r25
    3220:	9f 70       	andi	r25, 0x0F	; 15
    3222:	89 27       	eor	r24, r25
    3224:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <g_time_needed_for_ID+0x1>
    3228:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    322c:	82 e5       	ldi	r24, 0x52	; 82
    322e:	95 e0       	ldi	r25, 0x05	; 5
    3230:	9f 93       	push	r25
    3232:	8f 93       	push	r24
    3234:	81 ec       	ldi	r24, 0xC1	; 193
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	9f 93       	push	r25
    323a:	8f 93       	push	r24
    323c:	bf 92       	push	r11
    323e:	af 92       	push	r10
    3240:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3244:	61 e0       	ldi	r22, 0x01	; 1
    3246:	c5 01       	movw	r24, r10
    3248:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	31 c3       	rjmp	.+1634   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    325a:	f6 01       	movw	r30, r12
    325c:	83 81       	ldd	r24, Z+3	; 0x03
    325e:	89 34       	cpi	r24, 0x49	; 73
    3260:	e9 f5       	brne	.+122    	; 0x32dc <_Z17handleLinkBusMsgsv+0x57c>
				{
					if(lb_buff->fields[FIELD2][0])
    3262:	87 89       	ldd	r24, Z+23	; 0x17
    3264:	88 23       	and	r24, r24
    3266:	d1 f1       	breq	.+116    	; 0x32dc <_Z17handleLinkBusMsgsv+0x57c>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    3268:	c6 01       	movw	r24, r12
    326a:	47 96       	adiw	r24, 0x17	; 23
    326c:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    3270:	86 2f       	mov	r24, r22
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	85 30       	cpi	r24, 0x05	; 5
    3276:	91 05       	cpc	r25, r1
    3278:	14 f4       	brge	.+4      	; 0x327e <_Z17handleLinkBusMsgsv+0x51e>
    327a:	85 e0       	ldi	r24, 0x05	; 5
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	85 31       	cpi	r24, 0x15	; 21
    3280:	91 05       	cpc	r25, r1
    3282:	0c f0       	brlt	.+2      	; 0x3286 <_Z17handleLinkBusMsgsv+0x526>
    3284:	84 e1       	ldi	r24, 0x14	; 20
    3286:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    328a:	45 e1       	ldi	r20, 0x15	; 21
    328c:	51 e0       	ldi	r21, 0x01	; 1
    328e:	6f e0       	ldi	r22, 0x0F	; 15
    3290:	8f eb       	ldi	r24, 0xBF	; 191
    3292:	95 e0       	ldi	r25, 0x05	; 5
    3294:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    3298:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_messages_text+0x15>
    329c:	88 23       	and	r24, r24
    329e:	f1 f0       	breq	.+60     	; 0x32dc <_Z17handleLinkBusMsgsv+0x57c>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    32a0:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <g_id_codespeed>
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	82 e5       	ldi	r24, 0x52	; 82
    32a8:	95 e0       	ldi	r25, 0x05	; 5
    32aa:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <_Z26timeRequiredToSendStrAtWPMPcj>
    32ae:	8c 50       	subi	r24, 0x0C	; 12
    32b0:	9e 4f       	sbci	r25, 0xFE	; 254
    32b2:	9c 01       	movw	r18, r24
    32b4:	36 95       	lsr	r19
    32b6:	27 95       	ror	r18
    32b8:	36 95       	lsr	r19
    32ba:	27 95       	ror	r18
    32bc:	36 95       	lsr	r19
    32be:	27 95       	ror	r18
    32c0:	a5 ec       	ldi	r26, 0xC5	; 197
    32c2:	b0 e2       	ldi	r27, 0x20	; 32
    32c4:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>
    32c8:	92 95       	swap	r25
    32ca:	82 95       	swap	r24
    32cc:	8f 70       	andi	r24, 0x0F	; 15
    32ce:	89 27       	eor	r24, r25
    32d0:	9f 70       	andi	r25, 0x0F	; 15
    32d2:	89 27       	eor	r24, r25
    32d4:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <g_time_needed_for_ID+0x1>
    32d8:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    32dc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_id_codespeed>
    32e0:	1f 92       	push	r1
    32e2:	8f 93       	push	r24
    32e4:	5f 92       	push	r5
    32e6:	4f 92       	push	r4
    32e8:	bf 92       	push	r11
    32ea:	af 92       	push	r10
    32ec:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	c5 01       	movw	r24, r10
    32f4:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	db c2       	rjmp	.+1462   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_VERSION:
			{
				ee_mgr.sendEEPROMString(TextVersion);
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	8f eb       	ldi	r24, 0xBF	; 191
    330a:	95 e0       	ldi	r25, 0x05	; 5
    330c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
			}
			break;
    3310:	d5 c2       	rjmp	.+1450   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    3312:	d6 01       	movw	r26, r12
    3314:	13 96       	adiw	r26, 0x03	; 3
    3316:	8c 91       	ld	r24, X
    3318:	88 23       	and	r24, r24
    331a:	c9 f0       	breq	.+50     	; 0x334e <_Z17handleLinkBusMsgsv+0x5ee>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    331c:	48 e0       	ldi	r20, 0x08	; 8
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	b6 01       	movw	r22, r12
    3322:	6d 5f       	subi	r22, 0xFD	; 253
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	c5 01       	movw	r24, r10
    3328:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    332c:	f5 01       	movw	r30, r10
    332e:	10 86       	std	Z+8, r1	; 0x08

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    3330:	c5 01       	movw	r24, r10
    3332:	0e 94 ce 12 	call	0x259c	; 0x259c <_Z11only_digitsPc>
    3336:	88 23       	and	r24, r24
    3338:	51 f0       	breq	.+20     	; 0x334e <_Z17handleLinkBusMsgsv+0x5ee>
    333a:	f5 01       	movw	r30, r10
    333c:	01 90       	ld	r0, Z+
    333e:	00 20       	and	r0, r0
    3340:	e9 f7       	brne	.-6      	; 0x333c <_Z17handleLinkBusMsgsv+0x5dc>
    3342:	31 97       	sbiw	r30, 0x01	; 1
    3344:	e4 50       	subi	r30, 0x04	; 4
    3346:	f5 40       	sbci	r31, 0x05	; 5
    3348:	34 97       	sbiw	r30, 0x04	; 4
    334a:	08 f0       	brcs	.+2      	; 0x334e <_Z17handleLinkBusMsgsv+0x5ee>
    334c:	cb c2       	rjmp	.+1430   	; 0x38e4 <_Z17handleLinkBusMsgsv+0xb84>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    334e:	9f 92       	push	r9
    3350:	8f 92       	push	r8
    3352:	7f 92       	push	r7
    3354:	6f 92       	push	r6
    3356:	bf 92       	push	r11
    3358:	af 92       	push	r10
    335a:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    335e:	61 e0       	ldi	r22, 0x01	; 1
    3360:	c5 01       	movw	r24, r10
    3362:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	a4 c2       	rjmp	.+1352   	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    3374:	d6 01       	movw	r26, r12
    3376:	13 96       	adiw	r26, 0x03	; 3
    3378:	8c 91       	ld	r24, X
    337a:	84 35       	cpi	r24, 0x54	; 84
    337c:	09 f0       	breq	.+2      	; 0x3380 <_Z17handleLinkBusMsgsv+0x620>
    337e:	73 c0       	rjmp	.+230    	; 0x3466 <_Z17handleLinkBusMsgsv+0x706>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    3380:	4c e0       	ldi	r20, 0x0C	; 12
    3382:	50 e0       	ldi	r21, 0x00	; 0
    3384:	b6 01       	movw	r22, r12
    3386:	69 5e       	subi	r22, 0xE9	; 233
    3388:	7f 4f       	sbci	r23, 0xFF	; 255
    338a:	c5 01       	movw	r24, r10
    338c:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    3390:	f5 01       	movw	r30, r10
    3392:	14 86       	std	Z+12, r1	; 0x0c

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    3394:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <g_utc_offset>
    3398:	41 95       	neg	r20
    339a:	61 eb       	ldi	r22, 0xB1	; 177
    339c:	75 e0       	ldi	r23, 0x05	; 5
    339e:	c5 01       	movw	r24, r10
    33a0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z18validateTimeStringPcPma>
    33a4:	69 87       	std	Y+9, r22	; 0x09
    33a6:	7a 87       	std	Y+10, r23	; 0x0a
    33a8:	8b 87       	std	Y+11, r24	; 0x0b
    33aa:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    33ac:	61 15       	cp	r22, r1
    33ae:	71 05       	cpc	r23, r1
    33b0:	81 05       	cpc	r24, r1
    33b2:	91 05       	cpc	r25, r1
    33b4:	41 f1       	breq	.+80     	; 0x3406 <_Z17handleLinkBusMsgsv+0x6a6>
					{
						rv3028_set_epoch(t);
    33b6:	0e 94 13 27 	call	0x4e26	; 0x4e26 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	ab 85       	ldd	r26, Y+11	; 0x0b
    33c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    33c2:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_current_epoch>
    33c6:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_current_epoch+0x1>
    33ca:	a0 93 b3 05 	sts	0x05B3, r26	; 0x8005b3 <g_current_epoch+0x2>
    33ce:	b0 93 b4 05 	sts	0x05B4, r27	; 0x8005b4 <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    33d2:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    33d6:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    33da:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    33de:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    33e2:	bf 93       	push	r27
    33e4:	af 93       	push	r26
    33e6:	9f 93       	push	r25
    33e8:	8f 93       	push	r24
    33ea:	81 ee       	ldi	r24, 0xE1	; 225
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	9f 93       	push	r25
    33f0:	8f 93       	push	r24
    33f2:	bf 92       	push	r11
    33f4:	af 92       	push	r10
    33f6:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	7a c2       	rjmp	.+1268   	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3406:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <g_event_start_epoch>
    340a:	30 91 ae 05 	lds	r19, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    340e:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    3412:	50 91 b0 05 	lds	r21, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    3416:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_current_epoch>
    341a:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    341e:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    3422:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    3426:	e1 2c       	mov	r14, r1
    3428:	f1 2c       	mov	r15, r1
    342a:	06 e7       	ldi	r16, 0x76	; 118
    342c:	11 e0       	ldi	r17, 0x01	; 1
    342e:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    3432:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    3436:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    343a:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    343e:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    3442:	bf 93       	push	r27
    3444:	af 93       	push	r26
    3446:	9f 93       	push	r25
    3448:	8f 93       	push	r24
    344a:	8c ed       	ldi	r24, 0xDC	; 220
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	9f 93       	push	r25
    3450:	8f 93       	push	r24
    3452:	bf 92       	push	r11
    3454:	af 92       	push	r10
    3456:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	4a c2       	rjmp	.+1172   	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3466:	83 35       	cpi	r24, 0x53	; 83
    3468:	09 f0       	breq	.+2      	; 0x346c <_Z17handleLinkBusMsgsv+0x70c>
    346a:	9c c0       	rjmp	.+312    	; 0x35a4 <_Z17handleLinkBusMsgsv+0x844>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    346c:	b6 01       	movw	r22, r12
    346e:	69 5e       	subi	r22, 0xE9	; 233
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	c5 01       	movw	r24, r10
    3474:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3478:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <g_utc_offset>
    347c:	41 95       	neg	r20
    347e:	6d ea       	ldi	r22, 0xAD	; 173
    3480:	75 e0       	ldi	r23, 0x05	; 5
    3482:	c5 01       	movw	r24, r10
    3484:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z18validateTimeStringPcPma>

					if(s)
    3488:	61 15       	cp	r22, r1
    348a:	71 05       	cpc	r23, r1
    348c:	81 05       	cpc	r24, r1
    348e:	91 05       	cpc	r25, r1
    3490:	09 f4       	brne	.+2      	; 0x3494 <_Z17handleLinkBusMsgsv+0x734>
    3492:	6e c0       	rjmp	.+220    	; 0x3570 <_Z17handleLinkBusMsgsv+0x810>
					{
						g_event_start_epoch = s;
    3494:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <g_event_start_epoch>
    3498:	70 93 ae 05 	sts	0x05AE, r23	; 0x8005ae <g_event_start_epoch+0x1>
    349c:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_event_start_epoch+0x2>
    34a0:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    34a4:	4d ea       	ldi	r20, 0xAD	; 173
    34a6:	55 e0       	ldi	r21, 0x05	; 5
    34a8:	67 e1       	ldi	r22, 0x17	; 23
    34aa:	8f eb       	ldi	r24, 0xBF	; 191
    34ac:	95 e0       	ldi	r25, 0x05	; 5
    34ae:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    34b2:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    34b6:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    34ba:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    34be:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    34c2:	8d 83       	std	Y+5, r24	; 0x05
    34c4:	9e 83       	std	Y+6, r25	; 0x06
    34c6:	af 83       	std	Y+7, r26	; 0x07
    34c8:	b8 87       	std	Y+8, r27	; 0x08
    34ca:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
    34ce:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    34d2:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    34d6:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    34da:	80 58       	subi	r24, 0x80	; 128
    34dc:	9e 4a       	sbci	r25, 0xAE	; 174
    34de:	ae 4f       	sbci	r26, 0xFE	; 254
    34e0:	bf 4f       	sbci	r27, 0xFF	; 255
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	9a 83       	std	Y+2, r25	; 0x02
    34e6:	ab 83       	std	Y+3, r26	; 0x03
    34e8:	bc 83       	std	Y+4, r27	; 0x04
    34ea:	4d 81       	ldd	r20, Y+5	; 0x05
    34ec:	5e 81       	ldd	r21, Y+6	; 0x06
    34ee:	6f 81       	ldd	r22, Y+7	; 0x07
    34f0:	78 85       	ldd	r23, Y+8	; 0x08
    34f2:	48 17       	cp	r20, r24
    34f4:	59 07       	cpc	r21, r25
    34f6:	6a 07       	cpc	r22, r26
    34f8:	7b 07       	cpc	r23, r27
    34fa:	28 f4       	brcc	.+10     	; 0x3506 <_Z17handleLinkBusMsgsv+0x7a6>
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3500:	ab 81       	ldd	r26, Y+3	; 0x03
    3502:	bc 81       	ldd	r27, Y+4	; 0x04
    3504:	04 c0       	rjmp	.+8      	; 0x350e <_Z17handleLinkBusMsgsv+0x7ae>
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	af 81       	ldd	r26, Y+7	; 0x07
    350c:	b8 85       	ldd	r27, Y+8	; 0x08
    350e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <g_event_finish_epoch>
    3512:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <g_event_finish_epoch+0x1>
    3516:	a0 93 ab 05 	sts	0x05AB, r26	; 0x8005ab <g_event_finish_epoch+0x2>
    351a:	b0 93 ac 05 	sts	0x05AC, r27	; 0x8005ac <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    351e:	49 ea       	ldi	r20, 0xA9	; 169
    3520:	55 e0       	ldi	r21, 0x05	; 5
    3522:	68 e1       	ldi	r22, 0x18	; 24
    3524:	8f eb       	ldi	r24, 0xBF	; 191
    3526:	95 e0       	ldi	r25, 0x05	; 5
    3528:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    352c:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
    3530:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    3534:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    3538:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    353c:	bf 93       	push	r27
    353e:	af 93       	push	r26
    3540:	9f 93       	push	r25
    3542:	8f 93       	push	r24
    3544:	8b ee       	ldi	r24, 0xEB	; 235
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	9f 93       	push	r25
    354a:	8f 93       	push	r24
    354c:	bf 92       	push	r11
    354e:	af 92       	push	r10
    3550:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
						g_use_rtc_to_start = (clockConfigurationCheck() == WAITING_FOR_START);
    3554:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    3558:	91 e0       	ldi	r25, 0x01	; 1
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	09 f0       	breq	.+2      	; 0x356a <_Z17handleLinkBusMsgsv+0x80a>
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_use_rtc_to_start>
    356e:	c5 c1       	rjmp	.+906    	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3570:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_event_start_epoch>
    3574:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    3578:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    357c:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    3580:	bf 93       	push	r27
    3582:	af 93       	push	r26
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	8b ee       	ldi	r24, 0xEB	; 235
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	9f 93       	push	r25
    358e:	8f 93       	push	r24
    3590:	bf 92       	push	r11
    3592:	af 92       	push	r10
    3594:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	ab c1       	rjmp	.+854    	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    35a4:	86 34       	cpi	r24, 0x46	; 70
    35a6:	09 f0       	breq	.+2      	; 0x35aa <_Z17handleLinkBusMsgsv+0x84a>
    35a8:	75 c0       	rjmp	.+234    	; 0x3694 <_Z17handleLinkBusMsgsv+0x934>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    35aa:	b6 01       	movw	r22, r12
    35ac:	69 5e       	subi	r22, 0xE9	; 233
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	c5 01       	movw	r24, r10
    35b2:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    35b6:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <g_utc_offset>
    35ba:	41 95       	neg	r20
    35bc:	69 ea       	ldi	r22, 0xA9	; 169
    35be:	75 e0       	ldi	r23, 0x05	; 5
    35c0:	c5 01       	movw	r24, r10
    35c2:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z18validateTimeStringPcPma>

					if(f)
    35c6:	61 15       	cp	r22, r1
    35c8:	71 05       	cpc	r23, r1
    35ca:	81 05       	cpc	r24, r1
    35cc:	91 05       	cpc	r25, r1
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <_Z17handleLinkBusMsgsv+0x872>
    35d0:	47 c0       	rjmp	.+142    	; 0x3660 <_Z17handleLinkBusMsgsv+0x900>
					{
						g_event_finish_epoch = f;
    35d2:	60 93 a9 05 	sts	0x05A9, r22	; 0x8005a9 <g_event_finish_epoch>
    35d6:	70 93 aa 05 	sts	0x05AA, r23	; 0x8005aa <g_event_finish_epoch+0x1>
    35da:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <g_event_finish_epoch+0x2>
    35de:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    35e2:	49 ea       	ldi	r20, 0xA9	; 169
    35e4:	55 e0       	ldi	r21, 0x05	; 5
    35e6:	68 e1       	ldi	r22, 0x18	; 24
    35e8:	8f eb       	ldi	r24, 0xBF	; 191
    35ea:	95 e0       	ldi	r25, 0x05	; 5
    35ec:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    35f0:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    35f4:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    35f8:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    35fc:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    3600:	60 91 ad 05 	lds	r22, 0x05AD	; 0x8005ad <g_event_start_epoch>
    3604:	70 91 ae 05 	lds	r23, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    3608:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    360c:	90 91 b0 05 	lds	r25, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    3610:	e1 2c       	mov	r14, r1
    3612:	f1 2c       	mov	r15, r1
    3614:	02 e8       	ldi	r16, 0x82	; 130
    3616:	11 e0       	ldi	r17, 0x01	; 1
    3618:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    361c:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    3620:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    3624:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    3628:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    362c:	bf 93       	push	r27
    362e:	af 93       	push	r26
    3630:	9f 93       	push	r25
    3632:	8f 93       	push	r24
    3634:	86 ef       	ldi	r24, 0xF6	; 246
    3636:	91 e0       	ldi	r25, 0x01	; 1
    3638:	9f 93       	push	r25
    363a:	8f 93       	push	r24
    363c:	bf 92       	push	r11
    363e:	af 92       	push	r10
    3640:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
						g_use_rtc_to_start = (clockConfigurationCheck() == WAITING_FOR_START);
    3644:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    3648:	91 e0       	ldi	r25, 0x01	; 1
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	09 f0       	breq	.+2      	; 0x365a <_Z17handleLinkBusMsgsv+0x8fa>
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_use_rtc_to_start>
    365e:	4d c1       	rjmp	.+666    	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3660:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    3664:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    3668:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    366c:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    3670:	bf 93       	push	r27
    3672:	af 93       	push	r26
    3674:	9f 93       	push	r25
    3676:	8f 93       	push	r24
    3678:	86 ef       	ldi	r24, 0xF6	; 246
    367a:	91 e0       	ldi	r25, 0x01	; 1
    367c:	9f 93       	push	r25
    367e:	8f 93       	push	r24
    3680:	bf 92       	push	r11
    3682:	af 92       	push	r10
    3684:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	33 c1       	rjmp	.+614    	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    3694:	8f 34       	cpi	r24, 0x4F	; 79
    3696:	b9 f5       	brne	.+110    	; 0x3706 <_Z17handleLinkBusMsgsv+0x9a6>
				{
					if(lb_buff->fields[FIELD2][0])
    3698:	d6 01       	movw	r26, r12
    369a:	57 96       	adiw	r26, 0x17	; 23
    369c:	8c 91       	ld	r24, X
    369e:	88 23       	and	r24, r24
    36a0:	d9 f0       	breq	.+54     	; 0x36d8 <_Z17handleLinkBusMsgsv+0x978>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    36a2:	c6 01       	movw	r24, r12
    36a4:	47 96       	adiw	r24, 0x17	; 23
    36a6:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <atoi>

						offset = CLAMP(-24, offset, 24);
    36aa:	89 31       	cpi	r24, 0x19	; 25
    36ac:	54 f4       	brge	.+20     	; 0x36c2 <_Z17handleLinkBusMsgsv+0x962>
    36ae:	08 2e       	mov	r0, r24
    36b0:	00 0c       	add	r0, r0
    36b2:	99 0b       	sbc	r25, r25
    36b4:	88 3e       	cpi	r24, 0xE8	; 232
    36b6:	bf ef       	ldi	r27, 0xFF	; 255
    36b8:	9b 07       	cpc	r25, r27
    36ba:	2c f4       	brge	.+10     	; 0x36c6 <_Z17handleLinkBusMsgsv+0x966>
    36bc:	88 ee       	ldi	r24, 0xE8	; 232
    36be:	9f ef       	ldi	r25, 0xFF	; 255
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <_Z17handleLinkBusMsgsv+0x966>
    36c2:	88 e1       	ldi	r24, 0x18	; 24
    36c4:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    36c6:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    36ca:	48 ea       	ldi	r20, 0xA8	; 168
    36cc:	55 e0       	ldi	r21, 0x05	; 5
    36ce:	69 e1       	ldi	r22, 0x19	; 25
    36d0:	8f eb       	ldi	r24, 0xBF	; 191
    36d2:	95 e0       	ldi	r25, 0x05	; 5
    36d4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    36d8:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <g_utc_offset>
    36dc:	28 2f       	mov	r18, r24
    36de:	08 2e       	mov	r0, r24
    36e0:	00 0c       	add	r0, r0
    36e2:	33 0b       	sbc	r19, r19
    36e4:	3f 93       	push	r19
    36e6:	8f 93       	push	r24
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	92 e0       	ldi	r25, 0x02	; 2
    36ec:	9f 93       	push	r25
    36ee:	8f 93       	push	r24
    36f0:	bf 92       	push	r11
    36f2:	af 92       	push	r10
    36f4:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	fa c0       	rjmp	.+500    	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3706:	83 34       	cpi	r24, 0x43	; 67
    3708:	09 f5       	brne	.+66     	; 0x374c <_Z17handleLinkBusMsgsv+0x9ec>
				{
					if(lb_buff->fields[FIELD2][0])
    370a:	f6 01       	movw	r30, r12
    370c:	87 89       	ldd	r24, Z+23	; 0x17
    370e:	88 23       	and	r24, r24
    3710:	51 f0       	breq	.+20     	; 0x3726 <_Z17handleLinkBusMsgsv+0x9c6>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3712:	c6 01       	movw	r24, r12
    3714:	47 96       	adiw	r24, 0x17	; 23
    3716:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <atoi>

						if(c < 512)
    371a:	81 15       	cp	r24, r1
    371c:	f2 e0       	ldi	r31, 0x02	; 2
    371e:	9f 07       	cpc	r25, r31
    3720:	10 f4       	brcc	.+4      	; 0x3726 <_Z17handleLinkBusMsgsv+0x9c6>
						{
							rv3028_set_offset_RAM(c);
    3722:	0e 94 4c 28 	call	0x5098	; 0x5098 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3726:	0e 94 a7 28 	call	0x514e	; 0x514e <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    372a:	9f 93       	push	r25
    372c:	8f 93       	push	r24
    372e:	8d e0       	ldi	r24, 0x0D	; 13
    3730:	92 e0       	ldi	r25, 0x02	; 2
    3732:	9f 93       	push	r25
    3734:	8f 93       	push	r24
    3736:	bf 92       	push	r11
    3738:	af 92       	push	r10
    373a:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	d7 c0       	rjmp	.+430    	; 0x38fa <_Z17handleLinkBusMsgsv+0xb9a>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck())
    374c:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    3750:	88 23       	and	r24, r24
    3752:	19 f0       	breq	.+6      	; 0x375a <_Z17handleLinkBusMsgsv+0x9fa>
					{
						reportConfigErrors();
    3754:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_Z18reportConfigErrorsv>
    3758:	b1 c0       	rjmp	.+354    	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    375a:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <g_event_start_epoch>
    375e:	30 91 ae 05 	lds	r19, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    3762:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    3766:	50 91 b0 05 	lds	r21, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    376a:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_current_epoch>
    376e:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    3772:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    3776:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    377a:	0f 2e       	mov	r0, r31
    377c:	f9 e6       	ldi	r31, 0x69	; 105
    377e:	ef 2e       	mov	r14, r31
    3780:	f1 e0       	ldi	r31, 0x01	; 1
    3782:	ff 2e       	mov	r15, r31
    3784:	f0 2d       	mov	r31, r0
    3786:	06 e7       	ldi	r16, 0x76	; 118
    3788:	11 e0       	ldi	r17, 0x01	; 1
    378a:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    378e:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    3792:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    3796:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    379a:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    379e:	60 91 ad 05 	lds	r22, 0x05AD	; 0x8005ad <g_event_start_epoch>
    37a2:	70 91 ae 05 	lds	r23, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    37a6:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    37aa:	90 91 b0 05 	lds	r25, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    37ae:	e1 2c       	mov	r14, r1
    37b0:	f1 2c       	mov	r15, r1
    37b2:	02 e8       	ldi	r16, 0x82	; 130
    37b4:	11 e0       	ldi	r17, 0x01	; 1
    37b6:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    37ba:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <g_event_start_epoch>
    37be:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <g_event_start_epoch+0x1>
    37c2:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <g_event_start_epoch+0x2>
    37c6:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <g_event_start_epoch+0x3>
    37ca:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_current_epoch>
    37ce:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    37d2:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    37d6:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    37da:	48 17       	cp	r20, r24
    37dc:	59 07       	cpc	r21, r25
    37de:	6a 07       	cpc	r22, r26
    37e0:	7b 07       	cpc	r23, r27
    37e2:	08 f0       	brcs	.+2      	; 0x37e6 <_Z17handleLinkBusMsgsv+0xa86>
    37e4:	6b c0       	rjmp	.+214    	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    37e6:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_event_finish_epoch>
    37ea:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_event_finish_epoch+0x1>
    37ee:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <g_event_finish_epoch+0x2>
    37f2:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <g_event_finish_epoch+0x3>
    37f6:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_current_epoch>
    37fa:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_current_epoch+0x1>
    37fe:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_current_epoch+0x2>
    3802:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_current_epoch+0x3>
    3806:	0a e8       	ldi	r16, 0x8A	; 138
    3808:	11 e0       	ldi	r17, 0x01	; 1
    380a:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z14reportTimeTillmmPKcS0_>
    380e:	56 c0       	rjmp	.+172    	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3810:	d6 01       	movw	r26, r12
    3812:	13 96       	adiw	r26, 0x03	; 3
    3814:	8c 91       	ld	r24, X
    3816:	13 97       	sbiw	r26, 0x03	; 3
    3818:	83 34       	cpi	r24, 0x43	; 67
    381a:	89 f5       	brne	.+98     	; 0x387e <_Z17handleLinkBusMsgsv+0xb1e>
				{
					if(lb_buff->fields[FIELD2][0])
    381c:	57 96       	adiw	r26, 0x17	; 23
    381e:	8c 91       	ld	r24, X
    3820:	88 23       	and	r24, r24
    3822:	a9 f0       	breq	.+42     	; 0x384e <_Z17handleLinkBusMsgsv+0xaee>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3824:	c6 01       	movw	r24, r12
    3826:	47 96       	adiw	r24, 0x17	; 23
    3828:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <atoi>

						if((v > -2000) && (v < 2000))
    382c:	9c 01       	movw	r18, r24
    382e:	21 53       	subi	r18, 0x31	; 49
    3830:	38 4f       	sbci	r19, 0xF8	; 248
    3832:	2f 39       	cpi	r18, 0x9F	; 159
    3834:	3f 40       	sbci	r19, 0x0F	; 15
    3836:	58 f4       	brcc	.+22     	; 0x384e <_Z17handleLinkBusMsgsv+0xaee>
						{
							g_atmega_temp_calibration = v;
    3838:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_atmega_temp_calibration+0x1>
    383c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3840:	42 e1       	ldi	r20, 0x12	; 18
    3842:	51 e0       	ldi	r21, 0x01	; 1
    3844:	63 e1       	ldi	r22, 0x13	; 19
    3846:	8f eb       	ldi	r24, 0xBF	; 191
    3848:	95 e0       	ldi	r25, 0x05	; 5
    384a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    384e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_atmega_temp_calibration>
    3852:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_atmega_temp_calibration+0x1>
    3856:	9f 93       	push	r25
    3858:	8f 93       	push	r24
    385a:	e3 e1       	ldi	r30, 0x13	; 19
    385c:	f2 e0       	ldi	r31, 0x02	; 2
    385e:	ff 93       	push	r31
    3860:	ef 93       	push	r30
    3862:	bf 92       	push	r11
    3864:	af 92       	push	r10
    3866:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
					lb_send_string(g_tempStr, FALSE);
    386a:	60 e0       	ldi	r22, 0x00	; 0
    386c:	c5 01       	movw	r24, r10
    386e:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    387e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <g_temperature>
    3882:	28 2f       	mov	r18, r24
    3884:	08 2e       	mov	r0, r24
    3886:	00 0c       	add	r0, r0
    3888:	33 0b       	sbc	r19, r19
    388a:	3f 93       	push	r19
    388c:	8f 93       	push	r24
    388e:	8e e1       	ldi	r24, 0x1E	; 30
    3890:	92 e0       	ldi	r25, 0x02	; 2
    3892:	9f 93       	push	r25
    3894:	8f 93       	push	r24
    3896:	bf 92       	push	r11
    3898:	af 92       	push	r10
    389a:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    389e:	61 e0       	ldi	r22, 0x01	; 1
    38a0:	c5 01       	movw	r24, r10
    38a2:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	04 c0       	rjmp	.+8      	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>

			default:
			{
				ee_mgr.send_Help();
    38b4:	8f eb       	ldi	r24, 0xBF	; 191
    38b6:	95 e0       	ldi	r25, 0x05	; 5
    38b8:	0e 94 9f 04 	call	0x93e	; 0x93e <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    38bc:	f6 01       	movw	r30, r12
    38be:	12 82       	std	Z+2, r1	; 0x02
    38c0:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    38c2:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z17lb_send_NewPromptv>
    38c6:	84 ca       	rjmp	.-2808   	; 0x2dd0 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	62 cb       	rjmp	.-2364   	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    38ce:	83 e1       	ldi	r24, 0x13	; 19
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	5f cb       	rjmp	.-2370   	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    38d4:	87 e0       	ldi	r24, 0x07	; 7
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	5c cb       	rjmp	.-2376   	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    38da:	84 e1       	ldi	r24, 0x14	; 20
    38dc:	5a cb       	rjmp	.-2380   	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    38de:	85 e1       	ldi	r24, 0x15	; 21
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	57 cb       	rjmp	.-2386   	; 0x2f92 <_Z17handleLinkBusMsgsv+0x232>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    38e4:	b5 01       	movw	r22, r10
    38e6:	c4 01       	movw	r24, r8
    38e8:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    38ec:	a4 01       	movw	r20, r8
    38ee:	6e e0       	ldi	r22, 0x0E	; 14
    38f0:	8f eb       	ldi	r24, 0xBF	; 191
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    38f8:	2a cd       	rjmp	.-1452   	; 0x334e <_Z17handleLinkBusMsgsv+0x5ee>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    38fa:	61 e0       	ldi	r22, 0x01	; 1
    38fc:	c5 01       	movw	r24, r10
    38fe:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    3902:	dc cf       	rjmp	.-72     	; 0x38bc <_Z17handleLinkBusMsgsv+0xb5c>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3904:	2c 96       	adiw	r28, 0x0c	; 12
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	de bf       	out	0x3e, r29	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	df 91       	pop	r29
    3912:	cf 91       	pop	r28
    3914:	1f 91       	pop	r17
    3916:	0f 91       	pop	r16
    3918:	ff 90       	pop	r15
    391a:	ef 90       	pop	r14
    391c:	df 90       	pop	r13
    391e:	cf 90       	pop	r12
    3920:	bf 90       	pop	r11
    3922:	af 90       	pop	r10
    3924:	9f 90       	pop	r9
    3926:	8f 90       	pop	r8
    3928:	7f 90       	pop	r7
    392a:	6f 90       	pop	r6
    392c:	5f 90       	pop	r5
    392e:	4f 90       	pop	r4
    3930:	3f 90       	pop	r3
    3932:	2f 90       	pop	r2
    3934:	08 95       	ret

00003936 <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    3936:	cf 92       	push	r12
    3938:	df 92       	push	r13
    393a:	ef 92       	push	r14
    393c:	ff 92       	push	r15
    393e:	1f 93       	push	r17
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	1f 92       	push	r1
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    394a:	84 34       	cpi	r24, 0x44	; 68
    394c:	39 f4       	brne	.+14     	; 0x395c <_Z10processKeyc+0x26>
		{
			g_DTMF_unlocked = FALSE;
    394e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    3952:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3956:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    395a:	85 c3       	rjmp	.+1802   	; 0x4066 <_Z10processKeyc+0x730>
		}

		if(!g_DTMF_unlocked)
    395c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <g_DTMF_unlocked>
    3960:	91 11       	cpse	r25, r1
    3962:	07 c0       	rjmp	.+14     	; 0x3972 <_Z10processKeyc+0x3c>
		{
			state = STATE_CHECK_PASSWORD;
    3964:	2f e0       	ldi	r18, 0x0F	; 15
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    396c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    3970:	0f c3       	rjmp	.+1566   	; 0x3f90 <_Z10processKeyc+0x65a>
    3972:	18 2f       	mov	r17, r24
		}
		else
		{
			if(key == '*')
    3974:	8a 32       	cpi	r24, 0x2A	; 42
    3976:	b9 f4       	brne	.+46     	; 0x39a6 <_Z10processKeyc+0x70>
			{
				state = STATE_SENTENCE_START;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3980:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    3984:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3988:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <_ZZ10processKeycE12stringLength>
				value = 0;
    398c:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3990:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZZ10processKeycE5value>
				digits = 0;
    3994:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3998:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    399c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_DTMF_unlocked>
    39a0:	88 23       	and	r24, r24
    39a2:	c9 f1       	breq	.+114    	; 0x3a16 <_Z10processKeyc+0xe0>
    39a4:	60 c3       	rjmp	.+1728   	; 0x4066 <_Z10processKeyc+0x730>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    39a6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    39aa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39ae:	31 97       	sbiw	r30, 0x01	; 1
    39b0:	e0 31       	cpi	r30, 0x10	; 16
    39b2:	f1 05       	cpc	r31, r1
    39b4:	08 f0       	brcs	.+2      	; 0x39b8 <_Z10processKeyc+0x82>
    39b6:	57 c3       	rjmp	.+1710   	; 0x4066 <_Z10processKeyc+0x730>
    39b8:	ea 56       	subi	r30, 0x6A	; 106
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    39c0:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    39c4:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <_ZZ10processKeycE12stringLength>
				value = 0;
    39c8:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    39cc:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZZ10processKeycE5value>
				digits = 0;
    39d0:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    39d4:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    39d8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_DTMF_unlocked>
    39dc:	88 23       	and	r24, r24
    39de:	d9 f0       	breq	.+54     	; 0x3a16 <_Z10processKeyc+0xe0>
				{
					if(key == 'C')
    39e0:	13 34       	cpi	r17, 0x43	; 67
    39e2:	39 f4       	brne	.+14     	; 0x39f2 <_Z10processKeyc+0xbc>
					{
						state = STATE_C;
    39e4:	86 e0       	ldi	r24, 0x06	; 6
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    39f0:	3a c3       	rjmp	.+1652   	; 0x4066 <_Z10processKeyc+0x730>
					}
					else if(key != '*')
    39f2:	1a 32       	cpi	r17, 0x2A	; 42
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <_Z10processKeyc+0xc2>
    39f6:	37 c3       	rjmp	.+1646   	; 0x4066 <_Z10processKeyc+0x730>
					{
						value = key - '0';
    39f8:	81 2f       	mov	r24, r17
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	c0 97       	sbiw	r24, 0x30	; 48
    39fe:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3a02:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							setupPortsForF1975();
    3a06:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_Z18setupPortsForF1975v>
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    3a0a:	80 e1       	ldi	r24, 0x10	; 16
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a12:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					}
				}

				if(key == 'A')
    3a16:	11 34       	cpi	r17, 0x41	; 65
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <_Z10processKeyc+0xe6>
    3a1a:	25 c3       	rjmp	.+1610   	; 0x4066 <_Z10processKeyc+0x730>
				{
					state = STATE_A;
    3a1c:	82 e0       	ldi	r24, 0x02	; 2
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a24:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a28:	1e c3       	rjmp	.+1596   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_A:
			{
				if(g_DTMF_unlocked)
    3a2a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_DTMF_unlocked>
    3a2e:	88 23       	and	r24, r24
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <_Z10processKeyc+0xfe>
    3a32:	19 c3       	rjmp	.+1586   	; 0x4066 <_Z10processKeyc+0x730>
				{
					if(key == '0')
    3a34:	10 33       	cpi	r17, 0x30	; 48
    3a36:	39 f4       	brne	.+14     	; 0x3a46 <_Z10processKeyc+0x110>
					{
						state = STATE_PAUSE_TRANSMISSIONS;
    3a38:	83 e0       	ldi	r24, 0x03	; 3
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a40:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a44:	10 c3       	rjmp	.+1568   	; 0x4066 <_Z10processKeyc+0x730>
					}
					else if(key == '1')
    3a46:	11 33       	cpi	r17, 0x31	; 49
    3a48:	39 f4       	brne	.+14     	; 0x3a58 <_Z10processKeyc+0x122>
					{
						state = STATE_START_TRANSMISSIONS;
    3a4a:	84 e0       	ldi	r24, 0x04	; 4
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a52:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a56:	07 c3       	rjmp	.+1550   	; 0x4066 <_Z10processKeyc+0x730>
					}
					else if(key == '2')
    3a58:	12 33       	cpi	r17, 0x32	; 50
    3a5a:	39 f4       	brne	.+14     	; 0x3a6a <_Z10processKeyc+0x134>
					{
						state = STATE_START_TRANSMISSIONS_WITH_RTC;
    3a5c:	85 e0       	ldi	r24, 0x05	; 5
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a64:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a68:	fe c2       	rjmp	.+1532   	; 0x4066 <_Z10processKeyc+0x730>
					}
					else if((key == '8') && setPasswordEnabled)
    3a6a:	18 33       	cpi	r17, 0x38	; 56
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <_Z10processKeyc+0x13a>
    3a6e:	fb c2       	rjmp	.+1526   	; 0x4066 <_Z10processKeyc+0x730>
    3a70:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZ10processKeycE18setPasswordEnabled>
    3a74:	88 23       	and	r24, r24
    3a76:	09 f4       	brne	.+2      	; 0x3a7a <_Z10processKeyc+0x144>
    3a78:	f6 c2       	rjmp	.+1516   	; 0x4066 <_Z10processKeyc+0x730>
					{
						state = STATE_SET_PASSWORD;
    3a7a:	8e e0       	ldi	r24, 0x0E	; 14
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a82:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a86:	ef c2       	rjmp	.+1502   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    3a88:	83 32       	cpi	r24, 0x23	; 35
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <_Z10processKeyc+0x158>
    3a8c:	ec c2       	rjmp	.+1496   	; 0x4066 <_Z10processKeyc+0x730>
				{
					stopEventNow();
    3a8e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_Z12stopEventNowv>
					state = STATE_SHUTDOWN;
    3a92:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a96:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3a9a:	e5 c2       	rjmp	.+1482   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    3a9c:	83 32       	cpi	r24, 0x23	; 35
    3a9e:	09 f0       	breq	.+2      	; 0x3aa2 <_Z10processKeyc+0x16c>
    3aa0:	e2 c2       	rjmp	.+1476   	; 0x4066 <_Z10processKeyc+0x730>
				{
					startEventNow();
    3aa2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_Z13startEventNowv>
					state = STATE_SHUTDOWN;
    3aa6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3aaa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3aae:	db c2       	rjmp	.+1462   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    3ab0:	83 32       	cpi	r24, 0x23	; 35
    3ab2:	09 f0       	breq	.+2      	; 0x3ab6 <_Z10processKeyc+0x180>
    3ab4:	d8 c2       	rjmp	.+1456   	; 0x4066 <_Z10processKeyc+0x730>
				{
					startEventUsingRTC();
    3ab6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    3aba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3abe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3ac2:	d1 c2       	rjmp	.+1442   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    3ac4:	81 33       	cpi	r24, 0x31	; 49
    3ac6:	39 f4       	brne	.+14     	; 0x3ad6 <_Z10processKeyc+0x1a0>
				{
					state = STATE_RECEIVING_CALLSIGN;
    3ac8:	87 e0       	ldi	r24, 0x07	; 7
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ad0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ad4:	c8 c2       	rjmp	.+1424   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == '2')
    3ad6:	82 33       	cpi	r24, 0x32	; 50
    3ad8:	39 f4       	brne	.+14     	; 0x3ae8 <_Z10processKeyc+0x1b2>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    3ada:	88 e0       	ldi	r24, 0x08	; 8
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ae2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ae6:	bf c2       	rjmp	.+1406   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    3ae8:	83 33       	cpi	r24, 0x33	; 51
    3aea:	39 f4       	brne	.+14     	; 0x3afa <_Z10processKeyc+0x1c4>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    3aec:	8c e0       	ldi	r24, 0x0C	; 12
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3af4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3af8:	b6 c2       	rjmp	.+1388   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == '4')
    3afa:	84 33       	cpi	r24, 0x34	; 52
    3afc:	39 f4       	brne	.+14     	; 0x3b0c <_Z10processKeyc+0x1d6>
				{
					state = STATE_RECEIVING_START_TIME;
    3afe:	89 e0       	ldi	r24, 0x09	; 9
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b06:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b0a:	ad c2       	rjmp	.+1370   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == '5')
    3b0c:	85 33       	cpi	r24, 0x35	; 53
    3b0e:	39 f4       	brne	.+14     	; 0x3b1e <_Z10processKeyc+0x1e8>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    3b10:	8a e0       	ldi	r24, 0x0A	; 10
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b18:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b1c:	a4 c2       	rjmp	.+1352   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == '6')
    3b1e:	86 33       	cpi	r24, 0x36	; 54
    3b20:	69 f4       	brne	.+26     	; 0x3b3c <_Z10processKeyc+0x206>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    3b22:	8b e0       	ldi	r24, 0x0B	; 11
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b2a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3b36:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ10processKeycE6digits>
    3b3a:	95 c2       	rjmp	.+1322   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == '9')
    3b3c:	89 33       	cpi	r24, 0x39	; 57
    3b3e:	39 f4       	brne	.+14     	; 0x3b4e <_Z10processKeyc+0x218>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    3b40:	8d e0       	ldi	r24, 0x0D	; 13
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b48:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b4c:	8c c2       	rjmp	.+1304   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else
				{
					state = STATE_SHUTDOWN;
    3b4e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b52:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b56:	87 c2       	rjmp	.+1294   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    3b58:	83 32       	cpi	r24, 0x23	; 35
    3b5a:	c1 f4       	brne	.+48     	; 0x3b8c <_Z10processKeyc+0x256>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    3b5c:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3b60:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3b64:	04 97       	sbiw	r24, 0x04	; 4
    3b66:	6c f0       	brlt	.+26     	; 0x3b82 <_Z10processKeyc+0x24c>
					{
						strcpy((char*)g_unlockCode, receivedString);
    3b68:	69 e8       	ldi	r22, 0x89	; 137
    3b6a:	74 e0       	ldi	r23, 0x04	; 4
    3b6c:	8a e6       	ldi	r24, 0x6A	; 106
    3b6e:	95 e0       	ldi	r25, 0x05	; 5
    3b70:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3b74:	4a e6       	ldi	r20, 0x6A	; 106
    3b76:	55 e0       	ldi	r21, 0x05	; 5
    3b78:	6e e0       	ldi	r22, 0x0E	; 14
    3b7a:	8f eb       	ldi	r24, 0xBF	; 191
    3b7c:	95 e0       	ldi	r25, 0x05	; 5
    3b7e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3b82:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b86:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b8a:	6d c2       	rjmp	.+1242   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3b8c:	80 ed       	ldi	r24, 0xD0	; 208
    3b8e:	81 0f       	add	r24, r17
    3b90:	8a 30       	cpi	r24, 0x0A	; 10
    3b92:	08 f0       	brcs	.+2      	; 0x3b96 <_Z10processKeyc+0x260>
    3b94:	68 c2       	rjmp	.+1232   	; 0x4066 <_Z10processKeyc+0x730>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    3b96:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3b9a:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3b9e:	89 30       	cpi	r24, 0x09	; 9
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	0c f0       	brlt	.+2      	; 0x3ba6 <_Z10processKeyc+0x270>
    3ba4:	60 c2       	rjmp	.+1216   	; 0x4066 <_Z10processKeyc+0x730>
					{
						receivedString[stringLength++] = key;
    3ba6:	9c 01       	movw	r18, r24
    3ba8:	2f 5f       	subi	r18, 0xFF	; 255
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	30 93 a4 04 	sts	0x04A4, r19	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3bb0:	20 93 a3 04 	sts	0x04A3, r18	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	e7 57       	subi	r30, 0x77	; 119
    3bb8:	fb 4f       	sbci	r31, 0xFB	; 251
    3bba:	10 83       	st	Z, r17
						receivedString[stringLength] = '\0';
    3bbc:	f9 01       	movw	r30, r18
    3bbe:	e7 57       	subi	r30, 0x77	; 119
    3bc0:	fb 4f       	sbci	r31, 0xFB	; 251
    3bc2:	10 82       	st	Z, r1
    3bc4:	50 c2       	rjmp	.+1184   	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    3bc6:	83 32       	cpi	r24, 0x23	; 35
    3bc8:	e1 f4       	brne	.+56     	; 0x3c02 <_Z10processKeyc+0x2cc>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    3bca:	e9 e8       	ldi	r30, 0x89	; 137
    3bcc:	f4 e0       	ldi	r31, 0x04	; 4
    3bce:	01 90       	ld	r0, Z+
    3bd0:	00 20       	and	r0, r0
    3bd2:	e9 f7       	brne	.-6      	; 0x3bce <_Z10processKeyc+0x298>
    3bd4:	31 97       	sbiw	r30, 0x01	; 1
    3bd6:	e9 58       	subi	r30, 0x89	; 137
    3bd8:	f4 40       	sbci	r31, 0x04	; 4
    3bda:	75 97       	sbiw	r30, 0x15	; 21
    3bdc:	68 f4       	brcc	.+26     	; 0x3bf8 <_Z10processKeyc+0x2c2>
					{
						strcpy(g_messages_text[STATION_ID], receivedString);
    3bde:	69 e8       	ldi	r22, 0x89	; 137
    3be0:	74 e0       	ldi	r23, 0x04	; 4
    3be2:	82 e5       	ldi	r24, 0x52	; 82
    3be4:	95 e0       	ldi	r25, 0x05	; 5
    3be6:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    3bea:	42 e5       	ldi	r20, 0x52	; 82
    3bec:	55 e0       	ldi	r21, 0x05	; 5
    3bee:	6b e0       	ldi	r22, 0x0B	; 11
    3bf0:	8f eb       	ldi	r24, 0xBF	; 191
    3bf2:	95 e0       	ldi	r25, 0x05	; 5
    3bf4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3bf8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bfc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3c00:	32 c2       	rjmp	.+1124   	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3c02:	80 ed       	ldi	r24, 0xD0	; 208
    3c04:	81 0f       	add	r24, r17
    3c06:	8a 30       	cpi	r24, 0x0A	; 10
    3c08:	08 f0       	brcs	.+2      	; 0x3c0c <_Z10processKeyc+0x2d6>
    3c0a:	2d c2       	rjmp	.+1114   	; 0x4066 <_Z10processKeyc+0x730>
				{
					if(digits)
    3c0c:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ10processKeycE6digits>
    3c10:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3c14:	89 2b       	or	r24, r25
    3c16:	c9 f1       	breq	.+114    	; 0x3c8a <_Z10processKeyc+0x354>
					{
						value = value * 10 + (key - '0');
    3c18:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3c1c:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3c20:	9c 01       	movw	r18, r24
    3c22:	22 0f       	add	r18, r18
    3c24:	33 1f       	adc	r19, r19
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	88 0f       	add	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	82 0f       	add	r24, r18
    3c34:	93 1f       	adc	r25, r19
    3c36:	21 2f       	mov	r18, r17
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	20 53       	subi	r18, 0x30	; 48
    3c3c:	31 09       	sbc	r19, r1
    3c3e:	28 0f       	add	r18, r24
    3c40:	39 1f       	adc	r19, r25
    3c42:	30 93 a2 04 	sts	0x04A2, r19	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3c46:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    3c4a:	27 32       	cpi	r18, 0x27	; 39
    3c4c:	31 05       	cpc	r19, r1
    3c4e:	c4 f4       	brge	.+48     	; 0x3c80 <_Z10processKeyc+0x34a>
    3c50:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3c54:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3c58:	84 31       	cpi	r24, 0x14	; 20
    3c5a:	91 05       	cpc	r25, r1
    3c5c:	8c f4       	brge	.+34     	; 0x3c80 <_Z10processKeyc+0x34a>
						{
							receivedString[stringLength] = keyMorse[value];
    3c5e:	fc 01       	movw	r30, r24
    3c60:	e7 57       	subi	r30, 0x77	; 119
    3c62:	fb 4f       	sbci	r31, 0xFB	; 251
    3c64:	d9 01       	movw	r26, r18
    3c66:	a2 5a       	subi	r26, 0xA2	; 162
    3c68:	bd 4f       	sbci	r27, 0xFD	; 253
    3c6a:	2c 91       	ld	r18, X
    3c6c:	20 83       	st	Z, r18
							stringLength++;
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3c74:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    3c78:	fc 01       	movw	r30, r24
    3c7a:	e7 57       	subi	r30, 0x77	; 119
    3c7c:	fb 4f       	sbci	r31, 0xFB	; 251
    3c7e:	10 82       	st	Z, r1
						}

						digits = 0;
    3c80:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3c84:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZ10processKeycE6digits>
    3c88:	ee c1       	rjmp	.+988    	; 0x4066 <_Z10processKeyc+0x730>
					}
					else
					{
						value = key - '0';
    3c8a:	21 2f       	mov	r18, r17
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	20 53       	subi	r18, 0x30	; 48
    3c90:	31 09       	sbc	r19, r1
    3c92:	30 93 a2 04 	sts	0x04A2, r19	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3c96:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <_ZZ10processKeycE5value>
						digits = 1;
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3ca2:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ10processKeycE6digits>
    3ca6:	df c1       	rjmp	.+958    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    3ca8:	83 32       	cpi	r24, 0x23	; 35
    3caa:	f1 f4       	brne	.+60     	; 0x3ce8 <_Z10processKeyc+0x3b2>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    3cac:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3cb0:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3cb4:	86 31       	cpi	r24, 0x16	; 22
    3cb6:	91 05       	cpc	r25, r1
    3cb8:	90 f4       	brcc	.+36     	; 0x3cde <_Z10processKeyc+0x3a8>
					{
						Fox_t holdFox = (Fox_t)value;
    3cba:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3cbc:	ae 01       	movw	r20, r28
    3cbe:	4f 5f       	subi	r20, 0xFF	; 255
    3cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc2:	60 e1       	ldi	r22, 0x10	; 16
    3cc4:	8f eb       	ldi	r24, 0xBF	; 191
    3cc6:	95 e0       	ldi	r25, 0x05	; 5
    3cc8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3ccc:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    3cd0:	99 81       	ldd	r25, Y+1	; 0x01
    3cd2:	98 17       	cp	r25, r24
    3cd4:	21 f0       	breq	.+8      	; 0x3cde <_Z10processKeyc+0x3a8>
						{
							setupForFox(&holdFox);
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	01 96       	adiw	r24, 0x01	; 1
    3cda:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_Z11setupForFoxP5Fox_t>
						}
					}
					state = STATE_SHUTDOWN;
    3cde:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ce2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3ce6:	bf c1       	rjmp	.+894    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3ce8:	80 ed       	ldi	r24, 0xD0	; 208
    3cea:	81 0f       	add	r24, r17
    3cec:	8a 30       	cpi	r24, 0x0A	; 10
    3cee:	08 f0       	brcs	.+2      	; 0x3cf2 <_Z10processKeyc+0x3bc>
    3cf0:	ba c1       	rjmp	.+884    	; 0x4066 <_Z10processKeyc+0x730>
				{
					value *= 10;
					value += key - '0';
    3cf2:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3cf6:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3cfa:	9c 01       	movw	r18, r24
    3cfc:	22 0f       	add	r18, r18
    3cfe:	33 1f       	adc	r19, r19
    3d00:	88 0f       	add	r24, r24
    3d02:	99 1f       	adc	r25, r25
    3d04:	88 0f       	add	r24, r24
    3d06:	99 1f       	adc	r25, r25
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	82 0f       	add	r24, r18
    3d0e:	93 1f       	adc	r25, r19
    3d10:	21 2f       	mov	r18, r17
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	20 53       	subi	r18, 0x30	; 48
    3d16:	31 09       	sbc	r19, r1
    3d18:	82 0f       	add	r24, r18
    3d1a:	93 1f       	adc	r25, r19
    3d1c:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3d20:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZZ10processKeycE5value>
    3d24:	a0 c1       	rjmp	.+832    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    3d26:	83 32       	cpi	r24, 0x23	; 35
    3d28:	f9 f4       	brne	.+62     	; 0x3d68 <_Z10processKeyc+0x432>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    3d2a:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <g_utc_offset>
    3d2e:	41 95       	neg	r20
    3d30:	61 eb       	ldi	r22, 0xB1	; 177
    3d32:	75 e0       	ldi	r23, 0x05	; 5
    3d34:	89 e8       	ldi	r24, 0x89	; 137
    3d36:	94 e0       	ldi	r25, 0x04	; 4
    3d38:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z18validateTimeStringPcPma>
    3d3c:	6b 01       	movw	r12, r22
    3d3e:	7c 01       	movw	r14, r24

					if(t)
    3d40:	61 15       	cp	r22, r1
    3d42:	71 05       	cpc	r23, r1
    3d44:	81 05       	cpc	r24, r1
    3d46:	91 05       	cpc	r25, r1
    3d48:	51 f0       	breq	.+20     	; 0x3d5e <_Z10processKeyc+0x428>
					{
						rv3028_set_epoch(t);
    3d4a:	0e 94 13 27 	call	0x4e26	; 0x4e26 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3d4e:	c0 92 b1 05 	sts	0x05B1, r12	; 0x8005b1 <g_current_epoch>
    3d52:	d0 92 b2 05 	sts	0x05B2, r13	; 0x8005b2 <g_current_epoch+0x1>
    3d56:	e0 92 b3 05 	sts	0x05B3, r14	; 0x8005b3 <g_current_epoch+0x2>
    3d5a:	f0 92 b4 05 	sts	0x05B4, r15	; 0x8005b4 <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    3d5e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3d62:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3d66:	7f c1       	rjmp	.+766    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3d68:	80 ed       	ldi	r24, 0xD0	; 208
    3d6a:	81 0f       	add	r24, r17
    3d6c:	8a 30       	cpi	r24, 0x0A	; 10
    3d6e:	08 f0       	brcs	.+2      	; 0x3d72 <_Z10processKeyc+0x43c>
    3d70:	7a c1       	rjmp	.+756    	; 0x4066 <_Z10processKeyc+0x730>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3d72:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3d76:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3d7a:	88 32       	cpi	r24, 0x28	; 40
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	0c f0       	brlt	.+2      	; 0x3d82 <_Z10processKeyc+0x44c>
    3d80:	72 c1       	rjmp	.+740    	; 0x4066 <_Z10processKeyc+0x730>
					{
						receivedString[stringLength] = key;
    3d82:	fc 01       	movw	r30, r24
    3d84:	e7 57       	subi	r30, 0x77	; 119
    3d86:	fb 4f       	sbci	r31, 0xFB	; 251
    3d88:	10 83       	st	Z, r17
						stringLength++;
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3d90:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3d94:	fc 01       	movw	r30, r24
    3d96:	e7 57       	subi	r30, 0x77	; 119
    3d98:	fb 4f       	sbci	r31, 0xFB	; 251
    3d9a:	10 82       	st	Z, r1
    3d9c:	64 c1       	rjmp	.+712    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    3d9e:	83 32       	cpi	r24, 0x23	; 35
    3da0:	51 f5       	brne	.+84     	; 0x3df6 <_Z10processKeyc+0x4c0>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3da2:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <g_utc_offset>
    3da6:	41 95       	neg	r20
    3da8:	6d ea       	ldi	r22, 0xAD	; 173
    3daa:	75 e0       	ldi	r23, 0x05	; 5
    3dac:	89 e8       	ldi	r24, 0x89	; 137
    3dae:	94 e0       	ldi	r25, 0x04	; 4
    3db0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z18validateTimeStringPcPma>

					if(s)
    3db4:	61 15       	cp	r22, r1
    3db6:	71 05       	cpc	r23, r1
    3db8:	81 05       	cpc	r24, r1
    3dba:	91 05       	cpc	r25, r1
    3dbc:	b9 f0       	breq	.+46     	; 0x3dec <_Z10processKeyc+0x4b6>
					{
						g_event_start_epoch = s;
    3dbe:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <g_event_start_epoch>
    3dc2:	70 93 ae 05 	sts	0x05AE, r23	; 0x8005ae <g_event_start_epoch+0x1>
    3dc6:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_event_start_epoch+0x2>
    3dca:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3dce:	4d ea       	ldi	r20, 0xAD	; 173
    3dd0:	55 e0       	ldi	r21, 0x05	; 5
    3dd2:	67 e1       	ldi	r22, 0x17	; 23
    3dd4:	8f eb       	ldi	r24, 0xBF	; 191
    3dd6:	95 e0       	ldi	r25, 0x05	; 5
    3dd8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_rtc_to_start = (clockConfigurationCheck() == WAITING_FOR_START);
    3ddc:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    3de0:	91 e0       	ldi	r25, 0x01	; 1
    3de2:	81 30       	cpi	r24, 0x01	; 1
    3de4:	09 f0       	breq	.+2      	; 0x3de8 <_Z10processKeyc+0x4b2>
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_use_rtc_to_start>
					}

					state = STATE_SHUTDOWN;
    3dec:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3df0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3df4:	38 c1       	rjmp	.+624    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3df6:	80 ed       	ldi	r24, 0xD0	; 208
    3df8:	81 0f       	add	r24, r17
    3dfa:	8a 30       	cpi	r24, 0x0A	; 10
    3dfc:	08 f0       	brcs	.+2      	; 0x3e00 <_Z10processKeyc+0x4ca>
    3dfe:	33 c1       	rjmp	.+614    	; 0x4066 <_Z10processKeyc+0x730>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3e00:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3e04:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3e08:	88 32       	cpi	r24, 0x28	; 40
    3e0a:	91 05       	cpc	r25, r1
    3e0c:	0c f0       	brlt	.+2      	; 0x3e10 <_Z10processKeyc+0x4da>
    3e0e:	2b c1       	rjmp	.+598    	; 0x4066 <_Z10processKeyc+0x730>
					{
						receivedString[stringLength] = key;
    3e10:	fc 01       	movw	r30, r24
    3e12:	e7 57       	subi	r30, 0x77	; 119
    3e14:	fb 4f       	sbci	r31, 0xFB	; 251
    3e16:	10 83       	st	Z, r17
						stringLength++;
    3e18:	01 96       	adiw	r24, 0x01	; 1
    3e1a:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3e1e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3e22:	fc 01       	movw	r30, r24
    3e24:	e7 57       	subi	r30, 0x77	; 119
    3e26:	fb 4f       	sbci	r31, 0xFB	; 251
    3e28:	10 82       	st	Z, r1
    3e2a:	1d c1       	rjmp	.+570    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    3e2c:	83 32       	cpi	r24, 0x23	; 35
    3e2e:	51 f5       	brne	.+84     	; 0x3e84 <_Z10processKeyc+0x54e>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3e30:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <g_utc_offset>
    3e34:	41 95       	neg	r20
    3e36:	69 ea       	ldi	r22, 0xA9	; 169
    3e38:	75 e0       	ldi	r23, 0x05	; 5
    3e3a:	89 e8       	ldi	r24, 0x89	; 137
    3e3c:	94 e0       	ldi	r25, 0x04	; 4
    3e3e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z18validateTimeStringPcPma>

					if(f)
    3e42:	61 15       	cp	r22, r1
    3e44:	71 05       	cpc	r23, r1
    3e46:	81 05       	cpc	r24, r1
    3e48:	91 05       	cpc	r25, r1
    3e4a:	b9 f0       	breq	.+46     	; 0x3e7a <_Z10processKeyc+0x544>
					{
						g_event_finish_epoch = f;
    3e4c:	60 93 a9 05 	sts	0x05A9, r22	; 0x8005a9 <g_event_finish_epoch>
    3e50:	70 93 aa 05 	sts	0x05AA, r23	; 0x8005aa <g_event_finish_epoch+0x1>
    3e54:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <g_event_finish_epoch+0x2>
    3e58:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3e5c:	49 ea       	ldi	r20, 0xA9	; 169
    3e5e:	55 e0       	ldi	r21, 0x05	; 5
    3e60:	68 e1       	ldi	r22, 0x18	; 24
    3e62:	8f eb       	ldi	r24, 0xBF	; 191
    3e64:	95 e0       	ldi	r25, 0x05	; 5
    3e66:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_rtc_to_start = (clockConfigurationCheck() == WAITING_FOR_START);
    3e6a:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    3e6e:	91 e0       	ldi	r25, 0x01	; 1
    3e70:	81 30       	cpi	r24, 0x01	; 1
    3e72:	09 f0       	breq	.+2      	; 0x3e76 <_Z10processKeyc+0x540>
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_use_rtc_to_start>
					}

					state = STATE_SHUTDOWN;
    3e7a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3e7e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3e82:	f1 c0       	rjmp	.+482    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3e84:	80 ed       	ldi	r24, 0xD0	; 208
    3e86:	81 0f       	add	r24, r17
    3e88:	8a 30       	cpi	r24, 0x0A	; 10
    3e8a:	08 f0       	brcs	.+2      	; 0x3e8e <_Z10processKeyc+0x558>
    3e8c:	ec c0       	rjmp	.+472    	; 0x4066 <_Z10processKeyc+0x730>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3e8e:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <_ZZ10processKeycE12stringLength>
    3e92:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3e96:	88 32       	cpi	r24, 0x28	; 40
    3e98:	91 05       	cpc	r25, r1
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <_Z10processKeyc+0x568>
    3e9c:	e4 c0       	rjmp	.+456    	; 0x4066 <_Z10processKeyc+0x730>
					{
						receivedString[stringLength] = key;
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	e7 57       	subi	r30, 0x77	; 119
    3ea2:	fb 4f       	sbci	r31, 0xFB	; 251
    3ea4:	10 83       	st	Z, r17
						stringLength++;
    3ea6:	01 96       	adiw	r24, 0x01	; 1
    3ea8:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <_ZZ10processKeycE12stringLength+0x1>
    3eac:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	e7 57       	subi	r30, 0x77	; 119
    3eb4:	fb 4f       	sbci	r31, 0xFB	; 251
    3eb6:	10 82       	st	Z, r1
    3eb8:	d6 c0       	rjmp	.+428    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    3eba:	83 32       	cpi	r24, 0x23	; 35
    3ebc:	e9 f4       	brne	.+58     	; 0x3ef8 <_Z10processKeyc+0x5c2>
				{
					if((value >= 0) && (value < 24))
    3ebe:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3ec2:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3ec6:	88 31       	cpi	r24, 0x18	; 24
    3ec8:	91 05       	cpc	r25, r1
    3eca:	88 f4       	brcc	.+34     	; 0x3eee <_Z10processKeyc+0x5b8>
					{
						int8_t hold = value * digits;
    3ecc:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <_ZZ10processKeycE6digits>
    3ed0:	98 9f       	mul	r25, r24
    3ed2:	80 2d       	mov	r24, r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    3ed8:	ae 01       	movw	r20, r28
    3eda:	4f 5f       	subi	r20, 0xFF	; 255
    3edc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ede:	69 e1       	ldi	r22, 0x19	; 25
    3ee0:	8f eb       	ldi	r24, 0xBF	; 191
    3ee2:	95 e0       	ldi	r25, 0x05	; 5
    3ee4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    3eee:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ef2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3ef6:	b7 c0       	rjmp	.+366    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    3ef8:	80 ed       	ldi	r24, 0xD0	; 208
    3efa:	81 0f       	add	r24, r17
    3efc:	8a 30       	cpi	r24, 0x0A	; 10
    3efe:	d0 f4       	brcc	.+52     	; 0x3f34 <_Z10processKeyc+0x5fe>
				{
					value *= 10;
					value += key - '0';
    3f00:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3f04:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3f08:	9c 01       	movw	r18, r24
    3f0a:	22 0f       	add	r18, r18
    3f0c:	33 1f       	adc	r19, r19
    3f0e:	88 0f       	add	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	88 0f       	add	r24, r24
    3f14:	99 1f       	adc	r25, r25
    3f16:	88 0f       	add	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	82 0f       	add	r24, r18
    3f1c:	93 1f       	adc	r25, r19
    3f1e:	21 2f       	mov	r18, r17
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	20 53       	subi	r18, 0x30	; 48
    3f24:	31 09       	sbc	r19, r1
    3f26:	82 0f       	add	r24, r18
    3f28:	93 1f       	adc	r25, r19
    3f2a:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3f2e:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZZ10processKeycE5value>
    3f32:	99 c0       	rjmp	.+306    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if(key == 'B')
    3f34:	12 34       	cpi	r17, 0x42	; 66
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <_Z10processKeyc+0x604>
    3f38:	96 c0       	rjmp	.+300    	; 0x4066 <_Z10processKeyc+0x730>
				{
					digits = -1;
    3f3a:	8f ef       	ldi	r24, 0xFF	; 255
    3f3c:	9f ef       	ldi	r25, 0xFF	; 255
    3f3e:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3f42:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ10processKeycE6digits>
    3f46:	8f c0       	rjmp	.+286    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    3f48:	83 32       	cpi	r24, 0x23	; 35
    3f4a:	a1 f4       	brne	.+40     	; 0x3f74 <_Z10processKeyc+0x63e>
				{
					g_AM_audio_frequency = value;
    3f4c:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3f50:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    3f54:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <g_AM_audio_frequency>
    3f58:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3f5c:	46 ea       	ldi	r20, 0xA6	; 166
    3f5e:	55 e0       	ldi	r21, 0x05	; 5
    3f60:	61 e1       	ldi	r22, 0x11	; 17
    3f62:	8f eb       	ldi	r24, 0xBF	; 191
    3f64:	95 e0       	ldi	r25, 0x05	; 5
    3f66:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    3f6a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f6e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3f72:	79 c0       	rjmp	.+242    	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '1') && (key <= '6'))
    3f74:	8f ec       	ldi	r24, 0xCF	; 207
    3f76:	81 0f       	add	r24, r17
    3f78:	86 30       	cpi	r24, 0x06	; 6
    3f7a:	08 f0       	brcs	.+2      	; 0x3f7e <_Z10processKeyc+0x648>
    3f7c:	74 c0       	rjmp	.+232    	; 0x4066 <_Z10processKeyc+0x730>
				{
					value = key - '0';
    3f7e:	21 2f       	mov	r18, r17
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	20 53       	subi	r18, 0x30	; 48
    3f84:	31 09       	sbc	r19, r1
    3f86:	30 93 a2 04 	sts	0x04A2, r19	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3f8a:	20 93 a1 04 	sts	0x04A1, r18	; 0x8004a1 <_ZZ10processKeycE5value>
    3f8e:	6b c0       	rjmp	.+214    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    3f90:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <_ZZ10processKeycE6digits>
    3f94:	30 91 a0 04 	lds	r19, 0x04A0	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3f98:	a9 01       	movw	r20, r18
    3f9a:	4f 5f       	subi	r20, 0xFF	; 255
    3f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9e:	50 93 a0 04 	sts	0x04A0, r21	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3fa2:	40 93 9f 04 	sts	0x049F, r20	; 0x80049f <_ZZ10processKeycE6digits>
    3fa6:	f9 01       	movw	r30, r18
    3fa8:	e6 59       	subi	r30, 0x96	; 150
    3faa:	fa 4f       	sbci	r31, 0xFA	; 250
    3fac:	90 81       	ld	r25, Z
    3fae:	89 13       	cpse	r24, r25
    3fb0:	12 c0       	rjmp	.+36     	; 0x3fd6 <_Z10processKeyc+0x6a0>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    3fb2:	ea e6       	ldi	r30, 0x6A	; 106
    3fb4:	f5 e0       	ldi	r31, 0x05	; 5
    3fb6:	01 90       	ld	r0, Z+
    3fb8:	00 20       	and	r0, r0
    3fba:	e9 f7       	brne	.-6      	; 0x3fb6 <_Z10processKeyc+0x680>
    3fbc:	31 97       	sbiw	r30, 0x01	; 1
    3fbe:	ea 56       	subi	r30, 0x6A	; 106
    3fc0:	f5 40       	sbci	r31, 0x05	; 5
    3fc2:	e4 17       	cp	r30, r20
    3fc4:	f5 07       	cpc	r31, r21
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <_Z10processKeyc+0x694>
    3fc8:	4e c0       	rjmp	.+156    	; 0x4066 <_Z10processKeyc+0x730>
					{
						g_DTMF_unlocked = TRUE;
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    3fd0:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZZ10processKeycE18setPasswordEnabled>
    3fd4:	48 c0       	rjmp	.+144    	; 0x4066 <_Z10processKeyc+0x730>
					}
				}
				else
				{
					digits = 0;
    3fd6:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ10processKeycE6digits+0x1>
    3fda:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    3fde:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fe2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3fe6:	3f c0       	rjmp	.+126    	; 0x4066 <_Z10processKeyc+0x730>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    3fe8:	83 32       	cpi	r24, 0x23	; 35
    3fea:	01 f5       	brne	.+64     	; 0x402c <_Z10processKeyc+0x6f6>
				{
					if(value == 0)
    3fec:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    3ff0:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	41 f4       	brne	.+16     	; 0x4008 <_Z10processKeyc+0x6d2>
					{
						setAtten(0);
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	0e 94 bb 04 	call	0x976	; 0x976 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <g_sendAMmodulationConstantly>
    4006:	0d c0       	rjmp	.+26     	; 0x4022 <_Z10processKeyc+0x6ec>
					}
					else if(value > 315)
    4008:	8c 33       	cpi	r24, 0x3C	; 60
    400a:	21 e0       	ldi	r18, 0x01	; 1
    400c:	92 07       	cpc	r25, r18
    400e:	3c f0       	brlt	.+14     	; 0x401e <_Z10processKeyc+0x6e8>
					{
						g_sendAMmodulationConstantly = FALSE;
    4010:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    4014:	8b e3       	ldi	r24, 0x3B	; 59
    4016:	91 e0       	ldi	r25, 0x01	; 1
    4018:	0e 94 bb 04 	call	0x976	; 0x976 <_Z8setAttenj>
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <_Z10processKeyc+0x6ec>
					}
					else
					{
						setAtten(value);
    401e:	0e 94 bb 04 	call	0x976	; 0x976 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    4022:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4026:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    402a:	1d c0       	rjmp	.+58     	; 0x4066 <_Z10processKeyc+0x730>
				}
				else if((key >= '0') && (key <= '9'))
    402c:	80 ed       	ldi	r24, 0xD0	; 208
    402e:	81 0f       	add	r24, r17
    4030:	8a 30       	cpi	r24, 0x0A	; 10
    4032:	c8 f4       	brcc	.+50     	; 0x4066 <_Z10processKeyc+0x730>
				{
					value *= 10;
					value += key - '0';
    4034:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <_ZZ10processKeycE5value>
    4038:	30 91 a2 04 	lds	r19, 0x04A2	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    403c:	c9 01       	movw	r24, r18
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	22 0f       	add	r18, r18
    4044:	33 1f       	adc	r19, r19
    4046:	22 0f       	add	r18, r18
    4048:	33 1f       	adc	r19, r19
    404a:	22 0f       	add	r18, r18
    404c:	33 1f       	adc	r19, r19
    404e:	82 0f       	add	r24, r18
    4050:	93 1f       	adc	r25, r19
    4052:	21 2f       	mov	r18, r17
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	20 53       	subi	r18, 0x30	; 48
    4058:	31 09       	sbc	r19, r1
    405a:	82 0f       	add	r24, r18
    405c:	93 1f       	adc	r25, r19
    405e:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <_ZZ10processKeycE5value+0x1>
    4062:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    4066:	0f 90       	pop	r0
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	1f 91       	pop	r17
    406e:	ff 90       	pop	r15
    4070:	ef 90       	pop	r14
    4072:	df 90       	pop	r13
    4074:	cf 90       	pop	r12
    4076:	08 95       	ret

00004078 <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4078:	2f 92       	push	r2
    407a:	3f 92       	push	r3
    407c:	4f 92       	push	r4
    407e:	5f 92       	push	r5
    4080:	6f 92       	push	r6
    4082:	7f 92       	push	r7
    4084:	8f 92       	push	r8
    4086:	9f 92       	push	r9
    4088:	af 92       	push	r10
    408a:	bf 92       	push	r11
    408c:	cf 92       	push	r12
    408e:	df 92       	push	r13
    4090:	ef 92       	push	r14
    4092:	ff 92       	push	r15
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	1f 92       	push	r1
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    40a2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    40a6:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <g_on_the_air>
    40aa:	88 23       	and	r24, r24
    40ac:	29 f0       	breq	.+10     	; 0x40b8 <_Z4loopv+0x40>
    40ae:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <_ZZ4loopvE7proceed>
    40b2:	88 23       	and	r24, r24
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <_Z4loopv+0x40>
    40b6:	d7 c0       	rjmp	.+430    	; 0x4266 <_Z4loopv+0x1ee>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    40b8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    40bc:	81 11       	cpse	r24, r1
    40be:	29 c1       	rjmp	.+594    	; 0x4312 <_Z4loopv+0x29a>
			{
				proceed = FALSE;
    40c0:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    40c4:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    40c8:	86 30       	cpi	r24, 0x06	; 6
    40ca:	91 f4       	brne	.+36     	; 0x40f0 <_Z4loopv+0x78>
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox_counter]);
    40cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_fox_counter>
    40d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_fox_counter+0x1>
    40d4:	bc 01       	movw	r22, r24
    40d6:	66 0f       	add	r22, r22
    40d8:	77 1f       	adc	r23, r23
    40da:	66 0f       	add	r22, r22
    40dc:	77 1f       	adc	r23, r23
    40de:	68 0f       	add	r22, r24
    40e0:	79 1f       	adc	r23, r25
    40e2:	6b 54       	subi	r22, 0x4B	; 75
    40e4:	7d 4f       	sbci	r23, 0xFD	; 253
    40e6:	8d e3       	ldi	r24, 0x3D	; 61
    40e8:	95 e0       	ldi	r25, 0x05	; 5
    40ea:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
    40ee:	27 c0       	rjmp	.+78     	; 0x413e <_Z4loopv+0xc6>
				}
				else if(g_fox == SPRINT_DEMO)
    40f0:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    40f4:	83 31       	cpi	r24, 0x13	; 19
    40f6:	99 f4       	brne	.+38     	; 0x411e <_Z4loopv+0xa6>
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox_counter + 8]);
    40f8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_fox_counter>
    40fc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_fox_counter+0x1>
    4100:	08 96       	adiw	r24, 0x08	; 8
    4102:	bc 01       	movw	r22, r24
    4104:	66 0f       	add	r22, r22
    4106:	77 1f       	adc	r23, r23
    4108:	66 0f       	add	r22, r22
    410a:	77 1f       	adc	r23, r23
    410c:	68 0f       	add	r22, r24
    410e:	79 1f       	adc	r23, r25
    4110:	6b 54       	subi	r22, 0x4B	; 75
    4112:	7d 4f       	sbci	r23, 0xFD	; 253
    4114:	8d e3       	ldi	r24, 0x3D	; 61
    4116:	95 e0       	ldi	r25, 0x05	; 5
    4118:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
    411c:	10 c0       	rjmp	.+32     	; 0x413e <_Z4loopv+0xc6>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox]);
    411e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	bc 01       	movw	r22, r24
    4126:	66 0f       	add	r22, r22
    4128:	77 1f       	adc	r23, r23
    412a:	66 0f       	add	r22, r22
    412c:	77 1f       	adc	r23, r23
    412e:	68 0f       	add	r22, r24
    4130:	79 1f       	adc	r23, r25
    4132:	6b 54       	subi	r22, 0x4B	; 75
    4134:	7d 4f       	sbci	r23, 0xFD	; 253
    4136:	8d e3       	ldi	r24, 0x3D	; 61
    4138:	95 e0       	ldi	r25, 0x05	; 5
    413a:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    413e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    4142:	86 30       	cpi	r24, 0x06	; 6
    4144:	09 f1       	breq	.+66     	; 0x4188 <_Z4loopv+0x110>
    4146:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    414a:	83 31       	cpi	r24, 0x13	; 19
    414c:	e9 f0       	breq	.+58     	; 0x4188 <_Z4loopv+0x110>
    414e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    4152:	88 23       	and	r24, r24
    4154:	c9 f0       	breq	.+50     	; 0x4188 <_Z4loopv+0x110>
    4156:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    415a:	87 30       	cpi	r24, 0x07	; 7
    415c:	a9 f0       	breq	.+42     	; 0x4188 <_Z4loopv+0x110>
    415e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    4162:	88 30       	cpi	r24, 0x08	; 8
    4164:	89 f0       	breq	.+34     	; 0x4188 <_Z4loopv+0x110>
    4166:	20 91 ba 05 	lds	r18, 0x05BA	; 0x8005ba <g_fox>
    416a:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <g_fox_counter>
    416e:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <g_fox_counter+0x1>
    4172:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <g_fox_id_offset>
    4176:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <g_fox_id_offset+0x1>
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	84 0f       	add	r24, r20
    417e:	95 1f       	adc	r25, r21
    4180:	28 17       	cp	r18, r24
    4182:	39 07       	cpc	r19, r25
    4184:	09 f0       	breq	.+2      	; 0x4188 <_Z4loopv+0x110>
    4186:	c5 c0       	rjmp	.+394    	; 0x4312 <_Z4loopv+0x29a>
				{
					BOOL repeat = TRUE;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    418c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_pattern_codespeed>
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	82 e8       	ldi	r24, 0x82	; 130
    4194:	9b e1       	ldi	r25, 0x1B	; 27
    4196:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    419a:	cb 01       	movw	r24, r22
    419c:	6a e0       	ldi	r22, 0x0A	; 10
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    41a4:	66 0f       	add	r22, r22
    41a6:	77 1f       	adc	r23, r23
    41a8:	70 93 b8 05 	sts	0x05B8, r23	; 0x8005b8 <g_code_throttle+0x1>
    41ac:	60 93 b7 05 	sts	0x05B7, r22	; 0x8005b7 <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    41b0:	40 e0       	ldi	r20, 0x00	; 0
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	be 01       	movw	r22, r28
    41b6:	6f 5f       	subi	r22, 0xFF	; 255
    41b8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ba:	8d e3       	ldi	r24, 0x3D	; 61
    41bc:	95 e0       	ldi	r25, 0x05	; 5
    41be:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    41c2:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_time_to_ID>
    41c6:	81 11       	cpse	r24, r1
    41c8:	0b c0       	rjmp	.+22     	; 0x41e0 <_Z4loopv+0x168>
    41ca:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <g_id_interval>
    41ce:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <g_id_interval+0x1>
    41d2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_on_air_interval>
    41d6:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_on_air_interval+0x1>
    41da:	82 17       	cp	r24, r18
    41dc:	93 07       	cpc	r25, r19
    41de:	3c f1       	brlt	.+78     	; 0x422e <_Z4loopv+0x1b6>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    41e0:	00 91 83 05 	lds	r16, 0x0583	; 0x800583 <g_on_air_interval>
    41e4:	10 91 84 05 	lds	r17, 0x0584	; 0x800584 <g_on_air_interval+0x1>
    41e8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <g_id_codespeed>
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	82 e5       	ldi	r24, 0x52	; 82
    41f0:	95 e0       	ldi	r25, 0x05	; 5
    41f2:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <_Z26timeRequiredToSendStrAtWPMPcj>
    41f6:	8c 50       	subi	r24, 0x0C	; 12
    41f8:	9e 4f       	sbci	r25, 0xFE	; 254
    41fa:	9c 01       	movw	r18, r24
    41fc:	36 95       	lsr	r19
    41fe:	27 95       	ror	r18
    4200:	36 95       	lsr	r19
    4202:	27 95       	ror	r18
    4204:	36 95       	lsr	r19
    4206:	27 95       	ror	r18
    4208:	a5 ec       	ldi	r26, 0xC5	; 197
    420a:	b0 e2       	ldi	r27, 0x20	; 32
    420c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>
    4210:	92 95       	swap	r25
    4212:	82 95       	swap	r24
    4214:	8f 70       	andi	r24, 0x0F	; 15
    4216:	89 27       	eor	r24, r25
    4218:	9f 70       	andi	r25, 0x0F	; 15
    421a:	89 27       	eor	r24, r25
    421c:	08 1b       	sub	r16, r24
    421e:	19 0b       	sbc	r17, r25
    4220:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    4224:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    4228:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <g_time_to_ID>
    422c:	0a c0       	rjmp	.+20     	; 0x4242 <_Z4loopv+0x1ca>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    422e:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_on_air_interval>
    4232:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_on_air_interval+0x1>
    4236:	8d 59       	subi	r24, 0x9D	; 157
    4238:	9f 4f       	sbci	r25, 0xFF	; 255
    423a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    423e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    4242:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <g_on_the_air>
					g_callsign_sent = FALSE;
    424c:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <g_callsign_sent>
					g_fox_transition = FALSE;
    4250:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    4254:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_fox_counter>
    4258:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_fox_counter+0x1>
    425c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_tone_offset+0x1>
    4260:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_tone_offset>
    4264:	56 c0       	rjmp	.+172    	; 0x4312 <_Z4loopv+0x29a>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    4266:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    426a:	81 11       	cpse	r24, r1
    426c:	f4 c1       	rjmp	.+1000   	; 0x4656 <_Z4loopv+0x5de>
    426e:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <g_fox_seconds_into_interval>
    4272:	30 91 82 05 	lds	r19, 0x0582	; 0x800582 <g_fox_seconds_into_interval+0x1>
    4276:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    427a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    427e:	28 17       	cp	r18, r24
    4280:	39 07       	cpc	r19, r25
    4282:	09 f0       	breq	.+2      	; 0x4286 <_Z4loopv+0x20e>
    4284:	e8 c1       	rjmp	.+976    	; 0x4656 <_Z4loopv+0x5de>
    4286:	c5 c1       	rjmp	.+906    	; 0x4612 <_Z4loopv+0x59a>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID], &repeat, NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    4288:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    428c:	84 31       	cpi	r24, 0x14	; 20
    428e:	08 f4       	brcc	.+2      	; 0x4292 <_Z4loopv+0x21a>
    4290:	e8 c1       	rjmp	.+976    	; 0x4662 <_Z4loopv+0x5ea>
    4292:	07 c0       	rjmp	.+14     	; 0x42a2 <_Z4loopv+0x22a>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    4294:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_fox_transition>
					g_on_the_air = FALSE;
    4298:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
					proceed = TRUE;
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    42a2:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42a6:	86 30       	cpi	r24, 0x06	; 6
    42a8:	21 f0       	breq	.+8      	; 0x42b2 <_Z4loopv+0x23a>
    42aa:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42ae:	83 31       	cpi	r24, 0x13	; 19
    42b0:	49 f4       	brne	.+18     	; 0x42c4 <_Z4loopv+0x24c>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    42b2:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <g_callsign_sent>
    42b6:	88 23       	and	r24, r24
    42b8:	61 f1       	breq	.+88     	; 0x4312 <_Z4loopv+0x29a>
    42ba:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_fox_transition>
    42be:	81 11       	cpse	r24, r1
    42c0:	d5 c1       	rjmp	.+938    	; 0x466c <_Z4loopv+0x5f4>
    42c2:	27 c0       	rjmp	.+78     	; 0x4312 <_Z4loopv+0x29a>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    42c4:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42c8:	88 23       	and	r24, r24
    42ca:	41 f0       	breq	.+16     	; 0x42dc <_Z4loopv+0x264>
    42cc:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42d0:	87 30       	cpi	r24, 0x07	; 7
    42d2:	21 f0       	breq	.+8      	; 0x42dc <_Z4loopv+0x264>
    42d4:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42d8:	88 30       	cpi	r24, 0x08	; 8
    42da:	41 f4       	brne	.+16     	; 0x42ec <_Z4loopv+0x274>
			{
				if(g_callsign_sent)
    42dc:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <g_callsign_sent>
    42e0:	88 23       	and	r24, r24
    42e2:	b9 f0       	breq	.+46     	; 0x4312 <_Z4loopv+0x29a>
				{
					proceed = TRUE;
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <_ZZ4loopvE7proceed>
    42ea:	13 c0       	rjmp	.+38     	; 0x4312 <_Z4loopv+0x29a>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    42ec:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42f0:	89 30       	cpi	r24, 0x09	; 9
    42f2:	08 f4       	brcc	.+2      	; 0x42f6 <_Z4loopv+0x27e>
    42f4:	c2 c1       	rjmp	.+900    	; 0x467a <_Z4loopv+0x602>
    42f6:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    42fa:	83 31       	cpi	r24, 0x13	; 19
    42fc:	08 f0       	brcs	.+2      	; 0x4300 <_Z4loopv+0x288>
    42fe:	bd c1       	rjmp	.+890    	; 0x467a <_Z4loopv+0x602>
    4300:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <g_callsign_sent>
    4304:	81 11       	cpse	r24, r1
    4306:	b6 c1       	rjmp	.+876    	; 0x4674 <_Z4loopv+0x5fc>
    4308:	b8 c1       	rjmp	.+880    	; 0x467a <_Z4loopv+0x602>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    430a:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <g_callsign_sent>
    430e:	81 11       	cpse	r24, r1
    4310:	c0 c1       	rjmp	.+896    	; 0x4692 <_Z4loopv+0x61a>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    4312:	8c e2       	ldi	r24, 0x2C	; 44
    4314:	95 e0       	ldi	r25, 0x05	; 5
    4316:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN8Goertzel12SamplesReadyEv>
    431a:	88 23       	and	r24, r24
    431c:	09 f4       	brne	.+2      	; 0x4320 <_Z4loopv+0x2a8>
    431e:	1d c1       	rjmp	.+570    	; 0x455a <_Z4loopv+0x4e2>
			static char lastKey = '\0';
			static int checkCount = 10;                                                                                                                                                                                                                                                                                                                              /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4320:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_temperature_check_countdown>
    4324:	81 11       	cpse	r24, r1
    4326:	b8 c1       	rjmp	.+880    	; 0x4698 <_Z4loopv+0x620>
			{

				setUpTemp();
    4328:	0e 94 40 12 	call	0x2480	; 0x2480 <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    432c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_Z7getTempv>
    4330:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__fixsfsi>
				if(temp != g_temperature)
    4334:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <g_temperature>
    4338:	68 17       	cp	r22, r24
    433a:	e1 f0       	breq	.+56     	; 0x4374 <_Z4loopv+0x2fc>
				{
					g_temperature = temp;
    433c:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    4340:	6a 31       	cpi	r22, 0x1A	; 26
    4342:	14 f0       	brlt	.+4      	; 0x4348 <_Z4loopv+0x2d0>
    4344:	69 51       	subi	r22, 0x19	; 25
    4346:	03 c0       	rjmp	.+6      	; 0x434e <_Z4loopv+0x2d6>
    4348:	89 e1       	ldi	r24, 0x19	; 25
    434a:	86 1b       	sub	r24, r22
    434c:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    434e:	06 2e       	mov	r0, r22
    4350:	00 0c       	add	r0, r0
    4352:	77 0b       	sbc	r23, r23
    4354:	8f eb       	ldi	r24, 0xBF	; 191
    4356:	95 e0       	ldi	r25, 0x05	; 5
    4358:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    435c:	20 91 36 05 	lds	r18, 0x0536	; 0x800536 <g_rv3028_offset>
    4360:	30 91 37 05 	lds	r19, 0x0537	; 0x800537 <g_rv3028_offset+0x1>
    4364:	a9 01       	movw	r20, r18
    4366:	48 0f       	add	r20, r24
    4368:	51 1d       	adc	r21, r1
    436a:	87 fd       	sbrc	r24, 7
    436c:	5a 95       	dec	r21
    436e:	ca 01       	movw	r24, r20
    4370:	0e 94 4c 28 	call	0x5098	; 0x5098 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	0e 94 a8 12 	call	0x2550	; 0x2550 <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    437a:	8c e3       	ldi	r24, 0x3C	; 60
    437c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_temperature_check_countdown>
    4380:	8b c1       	rjmp	.+790    	; 0x4698 <_Z4loopv+0x620>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4382:	f5 01       	movw	r30, r10
    4384:	41 91       	ld	r20, Z+
    4386:	51 91       	ld	r21, Z+
    4388:	61 91       	ld	r22, Z+
    438a:	71 91       	ld	r23, Z+
    438c:	5f 01       	movw	r10, r30
    438e:	8c e2       	ldi	r24, 0x2C	; 44
    4390:	95 e0       	ldi	r25, 0x05	; 5
    4392:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    4396:	8c e2       	ldi	r24, 0x2C	; 44
    4398:	95 e0       	ldi	r25, 0x05	; 5
    439a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN8Goertzel10Magnitude2Ev>
    439e:	e6 2e       	mov	r14, r22
    43a0:	f7 2e       	mov	r15, r23
    43a2:	d8 2e       	mov	r13, r24
    43a4:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    43a6:	27 2d       	mov	r18, r7
    43a8:	36 2d       	mov	r19, r6
    43aa:	45 2d       	mov	r20, r5
    43ac:	54 2d       	mov	r21, r4
    43ae:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__gesf2>
    43b2:	18 16       	cp	r1, r24
    43b4:	b4 f4       	brge	.+44     	; 0x43e2 <_Z4loopv+0x36a>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	34 e2       	ldi	r19, 0x24	; 36
    43ba:	44 e7       	ldi	r20, 0x74	; 116
    43bc:	59 e4       	ldi	r21, 0x49	; 73
    43be:	6e 2d       	mov	r22, r14
    43c0:	7f 2d       	mov	r23, r15
    43c2:	8d 2d       	mov	r24, r13
    43c4:	9c 2d       	mov	r25, r12
    43c6:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__gesf2>
    43ca:	18 16       	cp	r1, r24
    43cc:	34 f4       	brge	.+12     	; 0x43da <_Z4loopv+0x362>
    43ce:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    43d0:	7e 2c       	mov	r7, r14
    43d2:	6f 2c       	mov	r6, r15
    43d4:	5d 2c       	mov	r5, r13
    43d6:	4c 2c       	mov	r4, r12
    43d8:	04 c0       	rjmp	.+8      	; 0x43e2 <_Z4loopv+0x36a>
    43da:	7e 2c       	mov	r7, r14
    43dc:	6f 2c       	mov	r6, r15
    43de:	5d 2c       	mov	r5, r13
    43e0:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    43e2:	0f 5f       	subi	r16, 0xFF	; 255
    43e4:	1f 4f       	sbci	r17, 0xFF	; 255
    43e6:	04 30       	cpi	r16, 0x04	; 4
    43e8:	11 05       	cpc	r17, r1
    43ea:	59 f6       	brne	.-106    	; 0x4382 <_Z4loopv+0x30a>
    43ec:	65 c1       	rjmp	.+714    	; 0x46b8 <_Z4loopv+0x640>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    43ee:	f5 01       	movw	r30, r10
    43f0:	41 91       	ld	r20, Z+
    43f2:	51 91       	ld	r21, Z+
    43f4:	61 91       	ld	r22, Z+
    43f6:	71 91       	ld	r23, Z+
    43f8:	5f 01       	movw	r10, r30
    43fa:	8c e2       	ldi	r24, 0x2C	; 44
    43fc:	95 e0       	ldi	r25, 0x05	; 5
    43fe:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    4402:	8c e2       	ldi	r24, 0x2C	; 44
    4404:	95 e0       	ldi	r25, 0x05	; 5
    4406:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN8Goertzel10Magnitude2Ev>
    440a:	e6 2e       	mov	r14, r22
    440c:	f7 2e       	mov	r15, r23
    440e:	d8 2e       	mov	r13, r24
    4410:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    4412:	25 2d       	mov	r18, r5
    4414:	34 2d       	mov	r19, r4
    4416:	43 2d       	mov	r20, r3
    4418:	52 2d       	mov	r21, r2
    441a:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__gesf2>
    441e:	18 16       	cp	r1, r24
    4420:	b4 f4       	brge	.+44     	; 0x444e <_Z4loopv+0x3d6>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	34 e2       	ldi	r19, 0x24	; 36
    4426:	44 e7       	ldi	r20, 0x74	; 116
    4428:	59 e4       	ldi	r21, 0x49	; 73
    442a:	6e 2d       	mov	r22, r14
    442c:	7f 2d       	mov	r23, r15
    442e:	8d 2d       	mov	r24, r13
    4430:	9c 2d       	mov	r25, r12
    4432:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__gesf2>
    4436:	18 16       	cp	r1, r24
    4438:	34 f4       	brge	.+12     	; 0x4446 <_Z4loopv+0x3ce>
    443a:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    443c:	5e 2c       	mov	r5, r14
    443e:	4f 2c       	mov	r4, r15
    4440:	3d 2c       	mov	r3, r13
    4442:	2c 2c       	mov	r2, r12
    4444:	04 c0       	rjmp	.+8      	; 0x444e <_Z4loopv+0x3d6>
    4446:	5e 2c       	mov	r5, r14
    4448:	4f 2c       	mov	r4, r15
    444a:	3d 2c       	mov	r3, r13
    444c:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    444e:	0f 5f       	subi	r16, 0xFF	; 255
    4450:	1f 4f       	sbci	r17, 0xFF	; 255
    4452:	04 30       	cpi	r16, 0x04	; 4
    4454:	11 05       	cpc	r17, r1
    4456:	59 f6       	brne	.-106    	; 0x43ee <_Z4loopv+0x376>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    4458:	77 20       	and	r7, r7
    445a:	0c f4       	brge	.+2      	; 0x445e <_Z4loopv+0x3e6>
    445c:	76 c0       	rjmp	.+236    	; 0x454a <_Z4loopv+0x4d2>
				{
					char newKey = key[4 * y + x];
    445e:	c4 01       	movw	r24, r8
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	88 0f       	add	r24, r24
    4466:	99 1f       	adc	r25, r25
    4468:	8b 57       	subi	r24, 0x7B	; 123
    446a:	9d 4f       	sbci	r25, 0xFD	; 253
    446c:	fc 01       	movw	r30, r24
    446e:	e6 0d       	add	r30, r6
    4470:	f7 1d       	adc	r31, r7
    4472:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    4474:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <_ZZ4loopvE7lastKey>
    4478:	18 13       	cpse	r17, r24
    447a:	17 c0       	rjmp	.+46     	; 0x44aa <_Z4loopv+0x432>
					{
						checkCount++;
    447c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    4480:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4484:	01 96       	adiw	r24, 0x01	; 1
    4486:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    448a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    448e:	03 97       	sbiw	r24, 0x03	; 3
    4490:	61 f4       	brne	.+24     	; 0x44aa <_Z4loopv+0x432>
						{
							g_dtmf_detected = TRUE;
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <g_dtmf_detected>
							quietCount = 0;
    4498:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZZ4loopvE10quietCount+0x1>
    449c:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    44a0:	10 93 35 05 	sts	0x0535, r17	; 0x800535 <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    44a4:	81 2f       	mov	r24, r17
    44a6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    44aa:	10 93 a7 04 	sts	0x04A7, r17	; 0x8004a7 <_ZZ4loopvE7lastKey>
    44ae:	4d c0       	rjmp	.+154    	; 0x454a <_Z4loopv+0x4d2>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    44b0:	c0 90 2d 05 	lds	r12, 0x052D	; 0x80052d <g_tick_count>
    44b4:	d0 90 2e 05 	lds	r13, 0x052E	; 0x80052e <g_tick_count+0x1>
    44b8:	e0 90 2f 05 	lds	r14, 0x052F	; 0x80052f <g_tick_count+0x2>
    44bc:	f0 90 30 05 	lds	r15, 0x0530	; 0x800530 <g_tick_count+0x3>
    44c0:	80 90 31 05 	lds	r8, 0x0531	; 0x800531 <g_last>
    44c4:	90 90 32 05 	lds	r9, 0x0532	; 0x800532 <g_last+0x1>
    44c8:	a0 90 33 05 	lds	r10, 0x0533	; 0x800533 <g_last+0x2>
    44cc:	b0 90 34 05 	lds	r11, 0x0534	; 0x800534 <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    44d0:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <_ZZ4loopvE10quietCount>
    44d4:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <_ZZ4loopvE10quietCount+0x1>
    44d8:	9c 01       	movw	r18, r24
    44da:	2f 5f       	subi	r18, 0xFF	; 255
    44dc:	3f 4f       	sbci	r19, 0xFF	; 255
    44de:	30 93 a6 04 	sts	0x04A6, r19	; 0x8004a6 <_ZZ4loopvE10quietCount+0x1>
    44e2:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <_ZZ4loopvE10quietCount>
    44e6:	03 97       	sbiw	r24, 0x03	; 3
    44e8:	84 f1       	brlt	.+96     	; 0x454a <_Z4loopv+0x4d2>
				{
					g_dtmf_detected = FALSE;
    44ea:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    44ee:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_transmissions_disabled>
    44f2:	88 23       	and	r24, r24
    44f4:	29 f0       	breq	.+10     	; 0x4500 <_Z4loopv+0x488>
    44f6:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <g_LED_enunciating>
    44fa:	88 23       	and	r24, r24
    44fc:	09 f4       	brne	.+2      	; 0x4500 <_Z4loopv+0x488>
    44fe:	ef c0       	rjmp	.+478    	; 0x46de <_Z4loopv+0x666>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    4500:	c8 18       	sub	r12, r8
    4502:	d9 08       	sbc	r13, r9
    4504:	ea 08       	sbc	r14, r10
    4506:	fb 08       	sbc	r15, r11
    4508:	fc ed       	ldi	r31, 0xDC	; 220
    450a:	cf 16       	cp	r12, r31
    450c:	f5 e0       	ldi	r31, 0x05	; 5
    450e:	df 06       	cpc	r13, r31
    4510:	e1 04       	cpc	r14, r1
    4512:	f1 04       	cpc	r15, r1
    4514:	20 f4       	brcc	.+8      	; 0x451e <_Z4loopv+0x4a6>
					{
						checkCount = 0;
    4516:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    451a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    451e:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZZ4loopvE10quietCount+0x1>
    4522:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4526:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <g_tick_count>
    452a:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <g_tick_count+0x1>
    452e:	a0 91 2f 05 	lds	r26, 0x052F	; 0x80052f <g_tick_count+0x2>
    4532:	b0 91 30 05 	lds	r27, 0x0530	; 0x800530 <g_tick_count+0x3>
    4536:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_last>
    453a:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <g_last+0x1>
    453e:	a0 93 33 05 	sts	0x0533, r26	; 0x800533 <g_last+0x2>
    4542:	b0 93 34 05 	sts	0x0534, r27	; 0x800534 <g_last+0x3>
					lastKey = '\0';
    4546:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    454a:	ea e7       	ldi	r30, 0x7A	; 122
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	80 81       	ld	r24, Z
    4550:	88 60       	ori	r24, 0x08	; 8
    4552:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    4554:	80 81       	ld	r24, Z
    4556:	80 64       	ori	r24, 0x40	; 64
    4558:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(g_dtmf_detected)
    455a:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <g_dtmf_detected>
    455e:	88 23       	and	r24, r24
    4560:	b1 f0       	breq	.+44     	; 0x458e <_Z4loopv+0x516>
	{
		BOOL repeat = FALSE;
    4562:	19 82       	std	Y+1, r1	; 0x01
		makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    4564:	40 e0       	ldi	r20, 0x00	; 0
    4566:	50 e0       	ldi	r21, 0x00	; 0
    4568:	be 01       	movw	r22, r28
    456a:	6f 5f       	subi	r22, 0xFF	; 255
    456c:	7f 4f       	sbci	r23, 0xFF	; 255
    456e:	84 e2       	ldi	r24, 0x24	; 36
    4570:	92 e0       	ldi	r25, 0x02	; 2
    4572:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>
		g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4576:	8c e8       	ldi	r24, 0x8C	; 140
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <g_code_throttle+0x1>
    457e:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <g_code_throttle>
		g_LED_enunciating = TRUE;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <g_LED_enunciating>
		g_config_error = JUST_STARTED_UP;
    4588:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <g_config_error>
    458c:	ad c0       	rjmp	.+346    	; 0x46e8 <_Z4loopv+0x670>
	}
	else
	{
		ConfigurationState_t hold_config_err = g_config_error;
    458e:	10 91 68 05 	lds	r17, 0x0568	; 0x800568 <g_config_error>
		g_config_error = clockConfigurationCheck();
    4592:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    4596:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_config_error>
		if(g_config_error != hold_config_err)
    459a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_config_error>
    459e:	18 17       	cp	r17, r24
    45a0:	09 f4       	brne	.+2      	; 0x45a4 <_Z4loopv+0x52c>
    45a2:	a2 c0       	rjmp	.+324    	; 0x46e8 <_Z4loopv+0x670>
		{
			if(g_config_error == CONFIGURATION_ERROR)
    45a4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_config_error>
    45a8:	82 30       	cpi	r24, 0x02	; 2
    45aa:	a1 f4       	brne	.+40     	; 0x45d4 <_Z4loopv+0x55c>
			{
				BOOL repeat = TRUE;
    45ac:	11 e0       	ldi	r17, 0x01	; 1
    45ae:	19 83       	std	Y+1, r17	; 0x01
				makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    45b0:	40 e0       	ldi	r20, 0x00	; 0
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	be 01       	movw	r22, r28
    45b6:	6f 5f       	subi	r22, 0xFF	; 255
    45b8:	7f 4f       	sbci	r23, 0xFF	; 255
    45ba:	86 e2       	ldi	r24, 0x26	; 38
    45bc:	92 e0       	ldi	r25, 0x02	; 2
    45be:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>
				g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    45c2:	8c e8       	ldi	r24, 0x8C	; 140
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <g_code_throttle+0x1>
    45ca:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <g_code_throttle>
				g_LED_enunciating = TRUE;
    45ce:	10 93 b5 05 	sts	0x05B5, r17	; 0x8005b5 <g_LED_enunciating>
    45d2:	8a c0       	rjmp	.+276    	; 0x46e8 <_Z4loopv+0x670>
			}
			else if(g_config_error == WAITING_FOR_START)
    45d4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_config_error>
    45d8:	81 30       	cpi	r24, 0x01	; 1
    45da:	a1 f4       	brne	.+40     	; 0x4604 <_Z4loopv+0x58c>
			{
				BOOL repeat = TRUE;
    45dc:	11 e0       	ldi	r17, 0x01	; 1
    45de:	19 83       	std	Y+1, r17	; 0x01
				makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    45e0:	40 e0       	ldi	r20, 0x00	; 0
    45e2:	50 e0       	ldi	r21, 0x00	; 0
    45e4:	be 01       	movw	r22, r28
    45e6:	6f 5f       	subi	r22, 0xFF	; 255
    45e8:	7f 4f       	sbci	r23, 0xFF	; 255
    45ea:	88 e2       	ldi	r24, 0x28	; 40
    45ec:	92 e0       	ldi	r25, 0x02	; 2
    45ee:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>
				g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    45f2:	86 e4       	ldi	r24, 0x46	; 70
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <g_code_throttle+0x1>
    45fa:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <g_code_throttle>
				g_LED_enunciating = TRUE;
    45fe:	10 93 b5 05 	sts	0x05B5, r17	; 0x8005b5 <g_LED_enunciating>
    4602:	72 c0       	rjmp	.+228    	; 0x46e8 <_Z4loopv+0x670>
			}
			else
			{
				g_LED_enunciating = FALSE;
    4604:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <g_LED_enunciating>
				digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    4608:	60 e0       	ldi	r22, 0x00	; 0
    460a:	8d e0       	ldi	r24, 0x0D	; 13
    460c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
			}
		}
	}
}
    4610:	6b c0       	rjmp	.+214    	; 0x46e8 <_Z4loopv+0x670>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    4612:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <g_id_codespeed>
    4616:	70 e0       	ldi	r23, 0x00	; 0
    4618:	82 e8       	ldi	r24, 0x82	; 130
    461a:	9b e1       	ldi	r25, 0x1B	; 27
    461c:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    4620:	cb 01       	movw	r24, r22
    4622:	6a e0       	ldi	r22, 0x0A	; 10
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    462a:	66 0f       	add	r22, r22
    462c:	77 1f       	adc	r23, r23
    462e:	70 93 b8 05 	sts	0x05B8, r23	; 0x8005b8 <g_code_throttle+0x1>
    4632:	60 93 b7 05 	sts	0x05B7, r22	; 0x8005b7 <g_code_throttle>
				BOOL repeat = FALSE;
    4636:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID], &repeat, NULL);
    4638:	40 e0       	ldi	r20, 0x00	; 0
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	be 01       	movw	r22, r28
    463e:	6f 5f       	subi	r22, 0xFF	; 255
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	82 e5       	ldi	r24, 0x52	; 82
    4644:	95 e0       	ldi	r25, 0x05	; 5
    4646:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    4650:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <g_callsign_sent>
    4654:	26 ce       	rjmp	.-948    	; 0x42a2 <_Z4loopv+0x22a>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    4656:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    465a:	89 30       	cpi	r24, 0x09	; 9
    465c:	08 f0       	brcs	.+2      	; 0x4660 <_Z4loopv+0x5e8>
    465e:	14 ce       	rjmp	.-984    	; 0x4288 <_Z4loopv+0x210>
    4660:	20 ce       	rjmp	.-960    	; 0x42a2 <_Z4loopv+0x22a>
			{
				if(g_fox_transition)
    4662:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_fox_transition>
    4666:	81 11       	cpse	r24, r1
    4668:	15 ce       	rjmp	.-982    	; 0x4294 <_Z4loopv+0x21c>
    466a:	1b ce       	rjmp	.-970    	; 0x42a2 <_Z4loopv+0x22a>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <_ZZ4loopvE7proceed>
    4672:	4f ce       	rjmp	.-866    	; 0x4312 <_Z4loopv+0x29a>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    4674:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
    4678:	4c ce       	rjmp	.-872    	; 0x4312 <_Z4loopv+0x29a>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    467a:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <g_fox>
    467e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_fox_counter>
    4682:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_fox_counter+0x1>
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	82 17       	cp	r24, r18
    468a:	93 07       	cpc	r25, r19
    468c:	09 f0       	breq	.+2      	; 0x4690 <_Z4loopv+0x618>
    468e:	3d ce       	rjmp	.-902    	; 0x430a <_Z4loopv+0x292>
    4690:	40 ce       	rjmp	.-896    	; 0x4312 <_Z4loopv+0x29a>
			{
				g_on_the_air = FALSE;
    4692:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <g_on_the_air>
    4696:	3d ce       	rjmp	.-902    	; 0x4312 <_Z4loopv+0x29a>
    4698:	0f 2e       	mov	r0, r31
    469a:	f5 e9       	ldi	r31, 0x95	; 149
    469c:	af 2e       	mov	r10, r31
    469e:	f2 e0       	ldi	r31, 0x02	; 2
    46a0:	bf 2e       	mov	r11, r31
    46a2:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    46a4:	00 e0       	ldi	r16, 0x00	; 0
    46a6:	10 e0       	ldi	r17, 0x00	; 0
    46a8:	88 24       	eor	r8, r8
    46aa:	8a 94       	dec	r8
    46ac:	98 2c       	mov	r9, r8
    46ae:	71 2c       	mov	r7, r1
    46b0:	61 2c       	mov	r6, r1
    46b2:	51 2c       	mov	r5, r1
    46b4:	41 2c       	mov	r4, r1
    46b6:	65 ce       	rjmp	.-822    	; 0x4382 <_Z4loopv+0x30a>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    46b8:	99 20       	and	r9, r9
    46ba:	0c f4       	brge	.+2      	; 0x46be <_Z4loopv+0x646>
    46bc:	f9 ce       	rjmp	.-526    	; 0x44b0 <_Z4loopv+0x438>
    46be:	0f 2e       	mov	r0, r31
    46c0:	f5 ea       	ldi	r31, 0xA5	; 165
    46c2:	af 2e       	mov	r10, r31
    46c4:	f2 e0       	ldi	r31, 0x02	; 2
    46c6:	bf 2e       	mov	r11, r31
    46c8:	f0 2d       	mov	r31, r0
    46ca:	00 e0       	ldi	r16, 0x00	; 0
    46cc:	10 e0       	ldi	r17, 0x00	; 0
    46ce:	66 24       	eor	r6, r6
    46d0:	6a 94       	dec	r6
    46d2:	76 2c       	mov	r7, r6
    46d4:	51 2c       	mov	r5, r1
    46d6:	41 2c       	mov	r4, r1
    46d8:	31 2c       	mov	r3, r1
    46da:	21 2c       	mov	r2, r1
    46dc:	88 ce       	rjmp	.-752    	; 0x43ee <_Z4loopv+0x376>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	8d e0       	ldi	r24, 0x0D	; 13
    46e2:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    46e6:	0c cf       	rjmp	.-488    	; 0x4500 <_Z4loopv+0x488>
				g_LED_enunciating = FALSE;
				digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
			}
		}
	}
}
    46e8:	0f 90       	pop	r0
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	1f 91       	pop	r17
    46f0:	0f 91       	pop	r16
    46f2:	ff 90       	pop	r15
    46f4:	ef 90       	pop	r14
    46f6:	df 90       	pop	r13
    46f8:	cf 90       	pop	r12
    46fa:	bf 90       	pop	r11
    46fc:	af 90       	pop	r10
    46fe:	9f 90       	pop	r9
    4700:	8f 90       	pop	r8
    4702:	7f 90       	pop	r7
    4704:	6f 90       	pop	r6
    4706:	5f 90       	pop	r5
    4708:	4f 90       	pop	r4
    470a:	3f 90       	pop	r3
    470c:	2f 90       	pop	r2
    470e:	08 95       	ret

00004710 <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);                                                                                                      /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    4710:	61 e0       	ldi	r22, 0x01	; 1
    4712:	8d e0       	ldi	r24, 0x0D	; 13
    4714:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    4718:	60 e0       	ldi	r22, 0x00	; 0
    471a:	8d e0       	ldi	r24, 0x0D	; 13
    471c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    4720:	61 e0       	ldi	r22, 0x01	; 1
    4722:	8d e0       	ldi	r24, 0x0D	; 13
    4724:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	8d e0       	ldi	r24, 0x0D	; 13
    472c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    4730:	61 e0       	ldi	r22, 0x01	; 1
    4732:	8a e0       	ldi	r24, 0x0A	; 10
    4734:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    4738:	60 e0       	ldi	r22, 0x00	; 0
    473a:	8a e0       	ldi	r24, 0x0A	; 10
    473c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    4740:	61 e0       	ldi	r22, 0x01	; 1
    4742:	89 e0       	ldi	r24, 0x09	; 9
    4744:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	89 e0       	ldi	r24, 0x09	; 9
    474c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    4750:	61 e0       	ldi	r22, 0x01	; 1
    4752:	88 e0       	ldi	r24, 0x08	; 8
    4754:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	88 e0       	ldi	r24, 0x08	; 8
    475c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    4760:	60 e0       	ldi	r22, 0x00	; 0
    4762:	84 e1       	ldi	r24, 0x14	; 20
    4764:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    4768:	60 e0       	ldi	r22, 0x00	; 0
    476a:	85 e1       	ldi	r24, 0x15	; 21
    476c:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    4770:	63 e0       	ldi	r22, 0x03	; 3
    4772:	8c e0       	ldi	r24, 0x0C	; 12
    4774:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    4778:	61 e0       	ldi	r22, 0x01	; 1
    477a:	8b e0       	ldi	r24, 0x0B	; 11
    477c:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    4780:	60 e0       	ldi	r22, 0x00	; 0
    4782:	8b e0       	ldi	r24, 0x0B	; 11
    4784:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    4788:	63 e0       	ldi	r22, 0x03	; 3
    478a:	84 e0       	ldi	r24, 0x04	; 4
    478c:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    4790:	61 e0       	ldi	r22, 0x01	; 1
    4792:	8e e0       	ldi	r24, 0x0E	; 14
    4794:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    4798:	61 e0       	ldi	r22, 0x01	; 1
    479a:	8f e0       	ldi	r24, 0x0F	; 15
    479c:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    47a0:	61 e0       	ldi	r22, 0x01	; 1
    47a2:	80 e1       	ldi	r24, 0x10	; 16
    47a4:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    47a8:	61 e0       	ldi	r22, 0x01	; 1
    47aa:	81 e1       	ldi	r24, 0x11	; 17
    47ac:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    47b0:	61 e0       	ldi	r22, 0x01	; 1
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    47b8:	61 e0       	ldi	r22, 0x01	; 1
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

	pinMode(PIN_PWDN, OUTPUT);
    47c0:	61 e0       	ldi	r22, 0x01	; 1
    47c2:	86 e0       	ldi	r24, 0x06	; 6
    47c4:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    47c8:	61 e0       	ldi	r22, 0x01	; 1
    47ca:	86 e0       	ldi	r24, 0x06	; 6
    47cc:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    47d0:	63 e0       	ldi	r22, 0x03	; 3
    47d2:	82 e1       	ldi	r24, 0x12	; 18
    47d4:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    47d8:	63 e0       	ldi	r22, 0x03	; 3
    47da:	83 e1       	ldi	r24, 0x13	; 19
    47dc:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    47e0:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    47e4:	8f eb       	ldi	r24, 0xBF	; 191
    47e6:	95 e0       	ldi	r25, 0x05	; 5
    47e8:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN13EepromManager11readNonVolsEv>
    47ec:	18 2f       	mov	r17, r24
		setUpAudioSampling(true);
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	0e 94 a8 12 	call	0x2550	; 0x2550 <_Z18setUpAudioSamplingh>
#endif

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    47f4:	e9 e6       	ldi	r30, 0x69	; 105
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	82 60       	ori	r24, 0x02	; 2
    47fc:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    47fe:	e8 9a       	sbi	0x1d, 0	; 29


	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    4800:	a0 eb       	ldi	r26, 0xB0	; 176
    4802:	b0 e0       	ldi	r27, 0x00	; 0
    4804:	1c 92       	st	X, r1
	TCCR2B = 0;
    4806:	e1 eb       	ldi	r30, 0xB1	; 177
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    480c:	8c 91       	ld	r24, X
    480e:	82 60       	ori	r24, 0x02	; 2
    4810:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    4812:	80 81       	ld	r24, Z
    4814:	87 60       	ori	r24, 0x07	; 7
    4816:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4818:	8c e0       	ldi	r24, 0x0C	; 12
    481a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    481e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    4822:	e6 eb       	ldi	r30, 0xB6	; 182
    4824:	f0 e0       	ldi	r31, 0x00	; 0
    4826:	80 81       	ld	r24, Z
    4828:	8f 7d       	andi	r24, 0xDF	; 223
    482a:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    482c:	e0 e7       	ldi	r30, 0x70	; 112
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    4832:	80 81       	ld	r24, Z
    4834:	84 60       	ori	r24, 0x04	; 4
    4836:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    4838:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    483c:	c1 e8       	ldi	r28, 0x81	; 129
    483e:	d0 e0       	ldi	r29, 0x00	; 0
    4840:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    4842:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4846:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    484a:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <g_AM_audio_frequency>
    484e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    4852:	88 81       	ld	r24, Y
    4854:	88 60       	ori	r24, 0x08	; 8
    4856:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    4858:	88 81       	ld	r24, Y
    485a:	81 60       	ori	r24, 0x01	; 1
    485c:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    485e:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    4860:	84 b5       	in	r24, 0x24	; 36
    4862:	82 60       	ori	r24, 0x02	; 2
    4864:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    4866:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    4868:	85 b5       	in	r24, 0x25	; 37
    486a:	84 60       	ori	r24, 0x04	; 4
    486c:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    486e:	8f e2       	ldi	r24, 0x2F	; 47
    4870:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4872:	ee e6       	ldi	r30, 0x6E	; 110
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    4878:	80 81       	ld	r24, Z
    487a:	82 60       	ori	r24, 0x02	; 2
    487c:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    487e:	ed e6       	ldi	r30, 0x6D	; 109
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4884:	80 e1       	ldi	r24, 0x10	; 16
    4886:	80 83       	st	Z, r24
	PCICR = 0x00;
    4888:	e8 e6       	ldi	r30, 0x68	; 104
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    488e:	84 e0       	ldi	r24, 0x04	; 4
    4890:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    4892:	78 94       	sei

	linkbus_init(BAUD);         /* Start the Link Bus serial comms */
    4894:	60 e0       	ldi	r22, 0x00	; 0
    4896:	71 ee       	ldi	r23, 0xE1	; 225
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z12linkbus_initm>
			lb_send_string((char*)"EEPROM Erase Error!\n", TRUE);
		}
		ee_mgr.dumpEEPROMVars();
		rv3028_1s_sqw();
#else
		if(eepromErr)
    48a0:	11 23       	and	r17, r17
    48a2:	29 f0       	breq	.+10     	; 0x48ae <main+0x19e>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    48a4:	61 e0       	ldi	r22, 0x01	; 1
    48a6:	82 e3       	ldi	r24, 0x32	; 50
    48a8:	92 e0       	ldi	r25, 0x02	; 2
    48aa:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
		}
		uint8_t result = rv3028_1s_sqw();
    48ae:	0e 94 c3 28 	call	0x5186	; 0x5186 <_Z13rv3028_1s_sqwv>
    48b2:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

	/*g_current_epoch = rv3028_get_epoch(NULL, NULL); */
	g_current_epoch = rv3028_get_epoch();
    48b4:	0e 94 33 27 	call	0x4e66	; 0x4e66 <_Z16rv3028_get_epochv>
    48b8:	60 93 b1 05 	sts	0x05B1, r22	; 0x8005b1 <g_current_epoch>
    48bc:	70 93 b2 05 	sts	0x05B2, r23	; 0x8005b2 <g_current_epoch+0x1>
    48c0:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <g_current_epoch+0x2>
    48c4:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    48c8:	8f eb       	ldi	r24, 0xBF	; 191
    48ca:	95 e0       	ldi	r25, 0x05	; 5
    48cc:	0e 94 9f 04 	call	0x93e	; 0x93e <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    48d0:	cc 23       	and	r28, r28
    48d2:	54 f4       	brge	.+20     	; 0x48e8 <main+0x1d8>
		{
			sprintf(g_tempStr, "Err 1\n");
    48d4:	87 e0       	ldi	r24, 0x07	; 7
    48d6:	e1 e4       	ldi	r30, 0x41	; 65
    48d8:	f2 e0       	ldi	r31, 0x02	; 2
    48da:	a4 e0       	ldi	r26, 0x04	; 4
    48dc:	b5 e0       	ldi	r27, 0x05	; 5
    48de:	01 90       	ld	r0, Z+
    48e0:	0d 92       	st	X+, r0
    48e2:	8a 95       	dec	r24
    48e4:	e1 f7       	brne	.-8      	; 0x48de <main+0x1ce>
    48e6:	23 c0       	rjmp	.+70     	; 0x492e <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    48e8:	c0 ff       	sbrs	r28, 0
    48ea:	0a c0       	rjmp	.+20     	; 0x4900 <main+0x1f0>
		{
			sprintf(g_tempStr, "Err 2\n");
    48ec:	87 e0       	ldi	r24, 0x07	; 7
    48ee:	e8 e4       	ldi	r30, 0x48	; 72
    48f0:	f2 e0       	ldi	r31, 0x02	; 2
    48f2:	a4 e0       	ldi	r26, 0x04	; 4
    48f4:	b5 e0       	ldi	r27, 0x05	; 5
    48f6:	01 90       	ld	r0, Z+
    48f8:	0d 92       	st	X+, r0
    48fa:	8a 95       	dec	r24
    48fc:	e1 f7       	brne	.-8      	; 0x48f6 <main+0x1e6>
    48fe:	17 c0       	rjmp	.+46     	; 0x492e <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4900:	c1 ff       	sbrs	r28, 1
    4902:	0a c0       	rjmp	.+20     	; 0x4918 <main+0x208>
		{
			sprintf(g_tempStr, "Err 3\n");
    4904:	87 e0       	ldi	r24, 0x07	; 7
    4906:	ef e4       	ldi	r30, 0x4F	; 79
    4908:	f2 e0       	ldi	r31, 0x02	; 2
    490a:	a4 e0       	ldi	r26, 0x04	; 4
    490c:	b5 e0       	ldi	r27, 0x05	; 5
    490e:	01 90       	ld	r0, Z+
    4910:	0d 92       	st	X+, r0
    4912:	8a 95       	dec	r24
    4914:	e1 f7       	brne	.-8      	; 0x490e <main+0x1fe>
    4916:	0b c0       	rjmp	.+22     	; 0x492e <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4918:	c5 ff       	sbrs	r28, 5
    491a:	09 c0       	rjmp	.+18     	; 0x492e <main+0x21e>
		{
			sprintf(g_tempStr, "RTC OK\n");
    491c:	88 e0       	ldi	r24, 0x08	; 8
    491e:	e6 e5       	ldi	r30, 0x56	; 86
    4920:	f2 e0       	ldi	r31, 0x02	; 2
    4922:	a4 e0       	ldi	r26, 0x04	; 4
    4924:	b5 e0       	ldi	r27, 0x05	; 5
    4926:	01 90       	ld	r0, Z+
    4928:	0d 92       	st	X+, r0
    492a:	8a 95       	dec	r24
    492c:	e1 f7       	brne	.-8      	; 0x4926 <main+0x216>
		}

		if(strlen(g_tempStr))
    492e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tempStr>
    4932:	88 23       	and	r24, r24
    4934:	29 f0       	breq	.+10     	; 0x4940 <main+0x230>
		{
			lb_send_string(g_tempStr, TRUE);
    4936:	61 e0       	ldi	r22, 0x01	; 1
    4938:	84 e0       	ldi	r24, 0x04	; 4
    493a:	95 e0       	ldi	r25, 0x05	; 5
    493c:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4940:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4944:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    4948:	ef e6       	ldi	r30, 0x6F	; 111
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	80 81       	ld	r24, Z
    494e:	82 60       	ori	r24, 0x02	; 2
    4950:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = (clockConfigurationCheck() == WAITING_FOR_START);
    495a:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationCheckv>
    495e:	91 e0       	ldi	r25, 0x01	; 1
    4960:	81 30       	cpi	r24, 0x01	; 1
    4962:	09 f0       	breq	.+2      	; 0x4966 <main+0x256>
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    496a:	0e 94 3c 20 	call	0x4078	; 0x4078 <_Z4loopv>
    496e:	fd cf       	rjmp	.-6      	; 0x496a <main+0x25a>

00004970 <_GLOBAL__sub_I_ee_mgr>:
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
		}
		break;
	}
}
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    4974:	8f eb       	ldi	r24, 0xBF	; 191
    4976:	95 e0       	ldi	r25, 0x05	; 5
    4978:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    497c:	00 e0       	ldi	r16, 0x00	; 0
    497e:	18 e7       	ldi	r17, 0x78	; 120
    4980:	26 e9       	ldi	r18, 0x96	; 150
    4982:	36 e4       	ldi	r19, 0x46	; 70
    4984:	40 e0       	ldi	r20, 0x00	; 0
    4986:	50 e0       	ldi	r21, 0x00	; 0
    4988:	69 e4       	ldi	r22, 0x49	; 73
    498a:	73 e4       	ldi	r23, 0x43	; 67
    498c:	8c e2       	ldi	r24, 0x2C	; 44
    498e:	95 e0       	ldi	r25, 0x05	; 5
    4990:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN8GoertzelC1Eff>
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
		}
		break;
	}
}
    4994:	1f 91       	pop	r17
    4996:	0f 91       	pop	r16
    4998:	08 95       	ret

0000499a <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    499a:	8c e2       	ldi	r24, 0x2C	; 44
    499c:	95 e0       	ldi	r25, 0x05	; 5
    499e:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    49a2:	8f eb       	ldi	r24, 0xBF	; 191
    49a4:	95 e0       	ldi	r25, 0x05	; 5
    49a6:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN13EepromManagerD1Ev>
    49aa:	08 95       	ret

000049ac <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	fc 01       	movw	r30, r24
    49b0:	b0 97       	sbiw	r30, 0x20	; 32
    49b2:	ed 35       	cpi	r30, 0x5D	; 93
    49b4:	f1 05       	cpc	r31, r1
    49b6:	08 f0       	brcs	.+2      	; 0x49ba <_Z12getMorseCharc+0xe>
    49b8:	e4 c0       	rjmp	.+456    	; 0x4b82 <_Z12getMorseCharc+0x1d6>
    49ba:	ea 55       	subi	r30, 0x5A	; 90
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	0c 94 6f 2c 	jmp	0x58de	; 0x58de <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    49c2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    49c4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    49c6:	61 e0       	ldi	r22, 0x01	; 1
    49c8:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    49ca:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    49cc:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    49ce:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    49d0:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    49d2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    49d4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    49d6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    49d8:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    49da:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    49dc:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49de:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    49e0:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    49e2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    49e4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    49e6:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    49e8:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    49ea:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    49ec:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    49ee:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    49f0:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    49f2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    49f4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49f6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    49f8:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    49fa:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    49fc:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49fe:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    4a00:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4a02:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4a04:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4a06:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4a08:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4a0a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4a0c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4a0e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4a10:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4a12:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4a14:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4a16:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4a18:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4a1a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    4a1c:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4a1e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4a20:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4a22:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4a24:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4a26:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4a28:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4a2a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    4a2c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4a2e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4a30:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4a32:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4a34:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4a36:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4a38:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4a3a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4a3c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4a3e:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4a40:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4a42:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4a44:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4a46:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4a48:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    4a4a:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    4a4c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4a4e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4a50:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4a52:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4a54:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4a56:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4a58:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4a5a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    4a5c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4a5e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4a60:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4a62:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4a64:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4a66:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4a68:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4a6a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    4a6c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4a6e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4a70:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4a72:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4a74:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4a76:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4a78:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4a7a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    4a7c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4a7e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4a80:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4a82:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4a84:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4a86:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4a88:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4a8a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4a8c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    4a8e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4a90:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4a92:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4a94:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4a96:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4a98:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4a9a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    4a9c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    4a9e:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4aa0:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4aa2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4aa4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4aa6:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4aa8:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4aaa:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4aac:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4aae:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4ab0:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4ab2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4ab4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4ab6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4ab8:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4aba:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    4abc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4abe:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4ac0:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4ac2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4ac4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4ac6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4ac8:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4aca:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    4acc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4ace:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4ad0:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4ad2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4ad4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4ad6:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4ad8:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4ada:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    4adc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    4ade:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4ae0:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4ae2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4ae4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4ae6:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ae8:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4aea:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    4aec:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    4aee:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4af0:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4af2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4af4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4af6:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4af8:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4afa:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    4afc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    4afe:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4b00:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4b02:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4b04:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4b06:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4b08:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4b0a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    4b0c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4b0e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4b10:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4b12:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4b14:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4b16:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4b18:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4b1a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    4b1c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4b1e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4b20:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4b22:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4b24:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4b26:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4b28:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4b2a:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    4b2c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    4b2e:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4b30:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4b32:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4b34:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4b36:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4b38:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4b3a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    4b3c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    4b3e:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4b40:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4b42:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4b44:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4b46:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4b48:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4b4a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    4b4c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    4b4e:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4b50:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4b52:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4b54:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4b56:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4b58:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    4b5a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    4b5c:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    4b5e:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4b60:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4b62:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4b64:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4b66:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4b68:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    4b6a:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4b6c:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    4b6e:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4b70:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4b72:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4b74:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4b76:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4b78:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4b7a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4b7c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    4b7e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4b80:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    4b82:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4b84:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4b86:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    4b88:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4b8a:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    4b8c:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4b8e:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    4b90:	08 95       	ret

00004b92 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4b98:	00 97       	sbiw	r24, 0x00	; 0
    4b9a:	b1 f1       	breq	.+108    	; 0x4c08 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    4b9c:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    4ba0:	61 15       	cp	r22, r1
    4ba2:	71 05       	cpc	r23, r1
    4ba4:	21 f0       	breq	.+8      	; 0x4bae <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4ba6:	db 01       	movw	r26, r22
    4ba8:	2c 91       	ld	r18, X
    4baa:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    4bae:	fc 01       	movw	r30, r24
    4bb0:	20 81       	ld	r18, Z
    4bb2:	22 23       	and	r18, r18
    4bb4:	d9 f0       	breq	.+54     	; 0x4bec <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4bb6:	90 93 ca 05 	sts	0x05CA, r25	; 0x8005ca <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4bba:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    4bbe:	80 e2       	ldi	r24, 0x20	; 32
    4bc0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4bc4:	82 2f       	mov	r24, r18
    4bc6:	0e 94 d6 24 	call	0x49ac	; 0x49ac <_Z12getMorseCharc>
    4bca:	60 93 c6 05 	sts	0x05C6, r22	; 0x8005c6 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4bce:	70 93 c7 05 	sts	0x05C7, r23	; 0x8005c7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4bd2:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4bd6:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4bda:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    4bde:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4be2:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4be6:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E15completedString>
    4bea:	0a c0       	rjmp	.+20     	; 0x4c00 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    4bec:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4bf0:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4bfa:	20 97       	sbiw	r28, 0x00	; 0
    4bfc:	09 f0       	breq	.+2      	; 0x4c00 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    4bfe:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    4c00:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	c0 c0       	rjmp	.+384    	; 0x4d88 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4c08:	e0 91 c9 05 	lds	r30, 0x05C9	; 0x8005c9 <_ZZ9makeMorsePcPhS0_E3str>
    4c0c:	f0 91 ca 05 	lds	r31, 0x05CA	; 0x8005ca <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4c10:	30 97       	sbiw	r30, 0x00	; 0
    4c12:	09 f4       	brne	.+2      	; 0x4c16 <_Z9makeMorsePcPhS0_+0x84>
    4c14:	aa c0       	rjmp	.+340    	; 0x4d6a <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4c16:	61 15       	cp	r22, r1
    4c18:	71 05       	cpc	r23, r1
    4c1a:	21 f0       	breq	.+8      	; 0x4c24 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    4c1c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZZ9makeMorsePcPhS0_E6repeat>
    4c20:	db 01       	movw	r26, r22
    4c22:	8c 93       	st	X, r24
		}

		if(completedString)
    4c24:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E15completedString>
    4c28:	88 23       	and	r24, r24
    4c2a:	49 f0       	breq	.+18     	; 0x4c3e <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    4c2c:	20 97       	sbiw	r28, 0x00	; 0
    4c2e:	09 f4       	brne	.+2      	; 0x4c32 <_Z9makeMorsePcPhS0_+0xa0>
    4c30:	a8 c0       	rjmp	.+336    	; 0x4d82 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4c36:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	a5 c0       	rjmp	.+330    	; 0x4d88 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    4c3e:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4c42:	88 23       	and	r24, r24
    4c44:	21 f0       	breq	.+8      	; 0x4c4e <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4c46:	81 50       	subi	r24, 0x01	; 1
    4c48:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4c4c:	7f c0       	rjmp	.+254    	; 0x4d4c <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    4c4e:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4c52:	88 23       	and	r24, r24
    4c54:	81 f0       	breq	.+32     	; 0x4c76 <_Z9makeMorsePcPhS0_+0xe4>
    4c56:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4c5a:	81 11       	cpse	r24, r1
    4c5c:	0c c0       	rjmp	.+24     	; 0x4c76 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    4c5e:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    4c62:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4c66:	88 23       	and	r24, r24
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <_Z9makeMorsePcPhS0_+0xda>
    4c6a:	70 c0       	rjmp	.+224    	; 0x4d4c <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    4c6c:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    4c70:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4c74:	6b c0       	rjmp	.+214    	; 0x4d4c <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4c76:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4c7a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4c7e:	89 17       	cp	r24, r25
    4c80:	90 f1       	brcs	.+100    	; 0x4ce6 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    4c82:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4c86:	8f 5f       	subi	r24, 0xFF	; 255
    4c88:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4c8c:	df 01       	movw	r26, r30
    4c8e:	a8 0f       	add	r26, r24
    4c90:	b1 1d       	adc	r27, r1
    4c92:	8c 91       	ld	r24, X
    4c94:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4c98:	81 11       	cpse	r24, r1
    4c9a:	19 c0       	rjmp	.+50     	; 0x4cce <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    4c9c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZZ9makeMorsePcPhS0_E6repeat>
    4ca0:	88 23       	and	r24, r24
    4ca2:	31 f0       	breq	.+12     	; 0x4cb0 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4ca4:	80 81       	ld	r24, Z
    4ca6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4caa:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4cae:	0f c0       	rjmp	.+30     	; 0x4cce <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    4cb0:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4cb4:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4cb8:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    4cbc:	91 e0       	ldi	r25, 0x01	; 1
    4cbe:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    4cc2:	20 97       	sbiw	r28, 0x00	; 0
    4cc4:	09 f0       	breq	.+2      	; 0x4cc8 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4cc6:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4cc8:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    4ccc:	5d c0       	rjmp	.+186    	; 0x4d88 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    4cce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZZ9makeMorsePcPhS0_E1c>
    4cd2:	0e 94 d6 24 	call	0x49ac	; 0x49ac <_Z12getMorseCharc>
    4cd6:	60 93 c6 05 	sts	0x05C6, r22	; 0x8005c6 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4cda:	70 93 c7 05 	sts	0x05C7, r23	; 0x8005c7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4cde:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4ce2:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4ce6:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4cea:	2d 3f       	cpi	r18, 0xFD	; 253
    4cec:	00 f5       	brcc	.+64     	; 0x4d2e <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    4cee:	40 91 c4 05 	lds	r20, 0x05C4	; 0x8005c4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4cf2:	31 e0       	ldi	r19, 0x01	; 1
    4cf4:	34 0f       	add	r19, r20
    4cf6:	30 93 c4 05 	sts	0x05C4, r19	; 0x8005c4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	02 c0       	rjmp	.+4      	; 0x4d04 <_Z9makeMorsePcPhS0_+0x172>
    4d00:	88 0f       	add	r24, r24
    4d02:	99 1f       	adc	r25, r25
    4d04:	4a 95       	dec	r20
    4d06:	e2 f7       	brpl	.-8      	; 0x4d00 <_Z9makeMorsePcPhS0_+0x16e>
    4d08:	82 23       	and	r24, r18
    4d0a:	21 f0       	breq	.+8      	; 0x4d14 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    4d0c:	82 e0       	ldi	r24, 0x02	; 2
    4d0e:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4d14:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    4d1e:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4d22:	38 17       	cp	r19, r24
    4d24:	98 f0       	brcs	.+38     	; 0x4d4c <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4d2c:	0f c0       	rjmp	.+30     	; 0x4d4c <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    4d2e:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    4d32:	9f ef       	ldi	r25, 0xFF	; 255
    4d34:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4d38:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    4d3c:	84 30       	cpi	r24, 0x04	; 4
    4d3e:	20 f0       	brcs	.+8      	; 0x4d48 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    4d40:	84 50       	subi	r24, 0x04	; 4
    4d42:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4d46:	02 c0       	rjmp	.+4      	; 0x4d4c <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4d48:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    4d4c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZZ9makeMorsePcPhS0_E1c>
    4d50:	8c 33       	cpi	r24, 0x3C	; 60
    4d52:	31 f4       	brne	.+12     	; 0x4d60 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    4d5a:	20 97       	sbiw	r28, 0x00	; 0
    4d5c:	41 f4       	brne	.+16     	; 0x4d6e <_Z9makeMorsePcPhS0_+0x1dc>
    4d5e:	14 c0       	rjmp	.+40     	; 0x4d88 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    4d60:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4d64:	20 97       	sbiw	r28, 0x00	; 0
    4d66:	19 f4       	brne	.+6      	; 0x4d6e <_Z9makeMorsePcPhS0_+0x1dc>
    4d68:	09 c0       	rjmp	.+18     	; 0x4d7c <_Z9makeMorsePcPhS0_+0x1ea>
    4d6a:	20 97       	sbiw	r28, 0x00	; 0
    4d6c:	19 f0       	breq	.+6      	; 0x4d74 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    4d6e:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E15completedString>
    4d72:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4d74:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4d78:	81 11       	cpse	r24, r1
    4d7a:	05 c0       	rjmp	.+10     	; 0x4d86 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    4d7c:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4d80:	03 c0       	rjmp	.+6      	; 0x4d88 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	01 c0       	rjmp	.+2      	; 0x4d88 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    4d86:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	08 95       	ret

00004d8e <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    4d8e:	cf 92       	push	r12
    4d90:	df 92       	push	r13
    4d92:	ef 92       	push	r14
    4d94:	ff 92       	push	r15
    4d96:	0f 93       	push	r16
    4d98:	1f 93       	push	r17
    4d9a:	cf 93       	push	r28
    4d9c:	fc 01       	movw	r30, r24
    4d9e:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4da0:	80 81       	ld	r24, Z
		if(!c)
    4da2:	88 23       	and	r24, r24
    4da4:	c1 f0       	breq	.+48     	; 0x4dd6 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4da6:	8f 01       	movw	r16, r30
    4da8:	0f 5f       	subi	r16, 0xFF	; 255
    4daa:	1f 4f       	sbci	r17, 0xFF	; 255
    4dac:	7f 01       	movw	r14, r30
    4dae:	94 e1       	ldi	r25, 0x14	; 20
    4db0:	e9 0e       	add	r14, r25
    4db2:	f1 1c       	adc	r15, r1
    4db4:	c0 e0       	ldi	r28, 0x00	; 0
    4db6:	05 c0       	rjmp	.+10     	; 0x4dc2 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4db8:	f8 01       	movw	r30, r16
    4dba:	81 91       	ld	r24, Z+
    4dbc:	8f 01       	movw	r16, r30
		if(!c)
    4dbe:	88 23       	and	r24, r24
    4dc0:	59 f0       	breq	.+22     	; 0x4dd8 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4dc2:	0e 94 d6 24 	call	0x49ac	; 0x49ac <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4dc6:	6d 3f       	cpi	r22, 0xFD	; 253
    4dc8:	08 f4       	brcc	.+2      	; 0x4dcc <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4dca:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    4dcc:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    4dce:	0e 15       	cp	r16, r14
    4dd0:	1f 05       	cpc	r17, r15
    4dd2:	91 f7       	brne	.-28     	; 0x4db8 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4dd4:	01 c0       	rjmp	.+2      	; 0x4dd8 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4dd6:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4dd8:	80 eb       	ldi	r24, 0xB0	; 176
    4dda:	94 e0       	ldi	r25, 0x04	; 4
    4ddc:	b6 01       	movw	r22, r12
    4dde:	0e 94 06 2c 	call	0x580c	; 0x580c <__udivmodhi4>
}
    4de2:	c6 9f       	mul	r28, r22
    4de4:	c0 01       	movw	r24, r0
    4de6:	c7 9f       	mul	r28, r23
    4de8:	90 0d       	add	r25, r0
    4dea:	11 24       	eor	r1, r1
    4dec:	cf 91       	pop	r28
    4dee:	1f 91       	pop	r17
    4df0:	0f 91       	pop	r16
    4df2:	ff 90       	pop	r15
    4df4:	ef 90       	pop	r14
    4df6:	df 90       	pop	r13
    4df8:	cf 90       	pop	r12
    4dfa:	08 95       	ret

00004dfc <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    4dfc:	98 2f       	mov	r25, r24
    4dfe:	96 95       	lsr	r25
    4e00:	96 95       	lsr	r25
    4e02:	96 95       	lsr	r25
    4e04:	9e 71       	andi	r25, 0x1E	; 30
    4e06:	29 2f       	mov	r18, r25
    4e08:	22 0f       	add	r18, r18
    4e0a:	22 0f       	add	r18, r18
    4e0c:	92 0f       	add	r25, r18
    4e0e:	8f 70       	andi	r24, 0x0F	; 15
    4e10:	89 0f       	add	r24, r25
    4e12:	08 95       	ret

00004e14 <_Z8char2bcdPc>:
    4e14:	fc 01       	movw	r30, r24
    4e16:	20 81       	ld	r18, Z
    4e18:	81 81       	ldd	r24, Z+1	; 0x01
    4e1a:	80 53       	subi	r24, 0x30	; 48
    4e1c:	f0 e1       	ldi	r31, 0x10	; 16
    4e1e:	2f 9f       	mul	r18, r31
    4e20:	80 0d       	add	r24, r0
    4e22:	11 24       	eor	r1, r1
    4e24:	08 95       	ret

00004e26 <_Z16rv3028_set_epochm>:
    4e26:	cf 93       	push	r28
    4e28:	df 93       	push	r29
    4e2a:	00 d0       	rcall	.+0      	; 0x4e2c <_Z16rv3028_set_epochm+0x6>
    4e2c:	00 d0       	rcall	.+0      	; 0x4e2e <_Z16rv3028_set_epochm+0x8>
    4e2e:	1f 92       	push	r1
    4e30:	cd b7       	in	r28, 0x3d	; 61
    4e32:	de b7       	in	r29, 0x3e	; 62
    4e34:	ae 01       	movw	r20, r28
    4e36:	4f 5f       	subi	r20, 0xFF	; 255
    4e38:	5f 4f       	sbci	r21, 0xFF	; 255
    4e3a:	25 e0       	ldi	r18, 0x05	; 5
    4e3c:	fa 01       	movw	r30, r20
    4e3e:	11 92       	st	Z+, r1
    4e40:	2a 95       	dec	r18
    4e42:	e9 f7       	brne	.-6      	; 0x4e3e <_Z16rv3028_set_epochm+0x18>
    4e44:	9c 83       	std	Y+4, r25	; 0x04
    4e46:	8b 83       	std	Y+3, r24	; 0x03
    4e48:	7a 83       	std	Y+2, r23	; 0x02
    4e4a:	69 83       	std	Y+1, r22	; 0x01
    4e4c:	24 e0       	ldi	r18, 0x04	; 4
    4e4e:	6b e1       	ldi	r22, 0x1B	; 27
    4e50:	84 ea       	ldi	r24, 0xA4	; 164
    4e52:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	08 95       	ret

00004e66 <_Z16rv3028_get_epochv>:
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	00 d0       	rcall	.+0      	; 0x4e6c <_Z16rv3028_get_epochv+0x6>
    4e6c:	00 d0       	rcall	.+0      	; 0x4e6e <_Z16rv3028_get_epochv+0x8>
    4e6e:	cd b7       	in	r28, 0x3d	; 61
    4e70:	de b7       	in	r29, 0x3e	; 62
    4e72:	19 82       	std	Y+1, r1	; 0x01
    4e74:	1a 82       	std	Y+2, r1	; 0x02
    4e76:	1b 82       	std	Y+3, r1	; 0x03
    4e78:	1c 82       	std	Y+4, r1	; 0x04
    4e7a:	24 e0       	ldi	r18, 0x04	; 4
    4e7c:	ae 01       	movw	r20, r28
    4e7e:	4f 5f       	subi	r20, 0xFF	; 255
    4e80:	5f 4f       	sbci	r21, 0xFF	; 255
    4e82:	6b e1       	ldi	r22, 0x1B	; 27
    4e84:	84 ea       	ldi	r24, 0xA4	; 164
    4e86:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
    4e8a:	81 11       	cpse	r24, r1
    4e8c:	11 c0       	rjmp	.+34     	; 0x4eb0 <_Z16rv3028_get_epochv+0x4a>
    4e8e:	2a 81       	ldd	r18, Y+2	; 0x02
    4e90:	6b 81       	ldd	r22, Y+3	; 0x03
    4e92:	86 2f       	mov	r24, r22
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	a0 e0       	ldi	r26, 0x00	; 0
    4e98:	b0 e0       	ldi	r27, 0x00	; 0
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	99 27       	eor	r25, r25
    4e9e:	88 27       	eor	r24, r24
    4ea0:	92 2b       	or	r25, r18
    4ea2:	29 81       	ldd	r18, Y+1	; 0x01
    4ea4:	82 2b       	or	r24, r18
    4ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    4ea8:	bc 01       	movw	r22, r24
    4eaa:	cd 01       	movw	r24, r26
    4eac:	92 2b       	or	r25, r18
    4eae:	03 c0       	rjmp	.+6      	; 0x4eb6 <_Z16rv3028_get_epochv+0x50>
    4eb0:	60 e0       	ldi	r22, 0x00	; 0
    4eb2:	70 e0       	ldi	r23, 0x00	; 0
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	0f 90       	pop	r0
    4eb8:	0f 90       	pop	r0
    4eba:	0f 90       	pop	r0
    4ebc:	0f 90       	pop	r0
    4ebe:	df 91       	pop	r29
    4ec0:	cf 91       	pop	r28
    4ec2:	08 95       	ret

00004ec4 <_Z16rv3028_get_epochPbPc>:
    4ec4:	6f 92       	push	r6
    4ec6:	7f 92       	push	r7
    4ec8:	8f 92       	push	r8
    4eca:	9f 92       	push	r9
    4ecc:	af 92       	push	r10
    4ece:	bf 92       	push	r11
    4ed0:	cf 92       	push	r12
    4ed2:	df 92       	push	r13
    4ed4:	ef 92       	push	r14
    4ed6:	ff 92       	push	r15
    4ed8:	0f 93       	push	r16
    4eda:	1f 93       	push	r17
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	6c 01       	movw	r12, r24
    4ee2:	eb 01       	movw	r28, r22
    4ee4:	20 97       	sbiw	r28, 0x00	; 0
    4ee6:	09 f4       	brne	.+2      	; 0x4eea <_Z16rv3028_get_epochPbPc+0x26>
    4ee8:	b6 c0       	rjmp	.+364    	; 0x5056 <_Z16rv3028_get_epochPbPc+0x192>
    4eea:	cb 01       	movw	r24, r22
    4eec:	0a 96       	adiw	r24, 0x0a	; 10
    4eee:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_Z8char2bcdPc>
    4ef2:	88 2e       	mov	r8, r24
    4ef4:	ce 01       	movw	r24, r28
    4ef6:	08 96       	adiw	r24, 0x08	; 8
    4ef8:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_Z8char2bcdPc>
    4efc:	78 2e       	mov	r7, r24
    4efe:	ce 01       	movw	r24, r28
    4f00:	06 96       	adiw	r24, 0x06	; 6
    4f02:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_Z8char2bcdPc>
    4f06:	98 2e       	mov	r9, r24
    4f08:	ce 01       	movw	r24, r28
    4f0a:	04 96       	adiw	r24, 0x04	; 4
    4f0c:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_Z8char2bcdPc>
    4f10:	18 2f       	mov	r17, r24
    4f12:	ce 01       	movw	r24, r28
    4f14:	02 96       	adiw	r24, 0x02	; 2
    4f16:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_Z8char2bcdPc>
    4f1a:	08 2f       	mov	r16, r24
    4f1c:	ce 01       	movw	r24, r28
    4f1e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_Z8char2bcdPc>
    4f22:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_Z7bcd2dech>
    4f26:	e8 2e       	mov	r14, r24
    4f28:	f1 2c       	mov	r15, r1
    4f2a:	57 01       	movw	r10, r14
    4f2c:	80 e3       	ldi	r24, 0x30	; 48
    4f2e:	a8 1a       	sub	r10, r24
    4f30:	88 ef       	ldi	r24, 0xF8	; 248
    4f32:	b8 0a       	sbc	r11, r24
    4f34:	80 2f       	mov	r24, r16
    4f36:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_Z7bcd2dech>
    4f3a:	d8 2f       	mov	r29, r24
    4f3c:	81 2f       	mov	r24, r17
    4f3e:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_Z7bcd2dech>
    4f42:	68 2e       	mov	r6, r24
    4f44:	d2 30       	cpi	r29, 0x02	; 2
    4f46:	68 f0       	brcs	.+26     	; 0x4f62 <_Z16rv3028_get_epochPbPc+0x9e>
    4f48:	00 e0       	ldi	r16, 0x00	; 0
    4f4a:	10 e0       	ldi	r17, 0x00	; 0
    4f4c:	c1 e0       	ldi	r28, 0x01	; 1
    4f4e:	6c 2f       	mov	r22, r28
    4f50:	c5 01       	movw	r24, r10
    4f52:	0e 94 3e 01 	call	0x27c	; 0x27c <month_length>
    4f56:	08 0f       	add	r16, r24
    4f58:	11 1d       	adc	r17, r1
    4f5a:	cf 5f       	subi	r28, 0xFF	; 255
    4f5c:	dc 13       	cpse	r29, r28
    4f5e:	f7 cf       	rjmp	.-18     	; 0x4f4e <_Z16rv3028_get_epochPbPc+0x8a>
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <_Z16rv3028_get_epochPbPc+0xa2>
    4f62:	00 e0       	ldi	r16, 0x00	; 0
    4f64:	10 e0       	ldi	r17, 0x00	; 0
    4f66:	86 2d       	mov	r24, r6
    4f68:	66 0c       	add	r6, r6
    4f6a:	99 0b       	sbc	r25, r25
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	08 0f       	add	r16, r24
    4f70:	19 1f       	adc	r17, r25
    4f72:	88 2d       	mov	r24, r8
    4f74:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_Z7bcd2dech>
    4f78:	88 2e       	mov	r8, r24
    4f7a:	87 2d       	mov	r24, r7
    4f7c:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_Z7bcd2dech>
    4f80:	c8 2f       	mov	r28, r24
    4f82:	89 2d       	mov	r24, r9
    4f84:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_Z7bcd2dech>
    4f88:	08 2c       	mov	r0, r8
    4f8a:	00 0c       	add	r0, r0
    4f8c:	99 08       	sbc	r9, r9
    4f8e:	9c e3       	ldi	r25, 0x3C	; 60
    4f90:	c9 02       	muls	r28, r25
    4f92:	80 0c       	add	r8, r0
    4f94:	91 1c       	adc	r9, r1
    4f96:	11 24       	eor	r1, r1
    4f98:	09 2c       	mov	r0, r9
    4f9a:	00 0c       	add	r0, r0
    4f9c:	aa 08       	sbc	r10, r10
    4f9e:	bb 08       	sbc	r11, r11
    4fa0:	a8 2f       	mov	r26, r24
    4fa2:	88 0f       	add	r24, r24
    4fa4:	bb 0b       	sbc	r27, r27
    4fa6:	20 e1       	ldi	r18, 0x10	; 16
    4fa8:	3e e0       	ldi	r19, 0x0E	; 14
    4faa:	0e 94 84 2c 	call	0x5908	; 0x5908 <__usmulhisi3>
    4fae:	86 0e       	add	r8, r22
    4fb0:	97 1e       	adc	r9, r23
    4fb2:	a8 1e       	adc	r10, r24
    4fb4:	b9 1e       	adc	r11, r25
    4fb6:	d8 01       	movw	r26, r16
    4fb8:	20 e8       	ldi	r18, 0x80	; 128
    4fba:	31 e5       	ldi	r19, 0x51	; 81
    4fbc:	41 e0       	ldi	r20, 0x01	; 1
    4fbe:	50 e0       	ldi	r21, 0x00	; 0
    4fc0:	0e 94 96 2c 	call	0x592c	; 0x592c <__mulshisi3>
    4fc4:	86 0e       	add	r8, r22
    4fc6:	97 1e       	adc	r9, r23
    4fc8:	a8 1e       	adc	r10, r24
    4fca:	b9 1e       	adc	r11, r25
    4fcc:	d7 01       	movw	r26, r14
    4fce:	5e 96       	adiw	r26, 0x1e	; 30
    4fd0:	20 e8       	ldi	r18, 0x80	; 128
    4fd2:	33 e3       	ldi	r19, 0x33	; 51
    4fd4:	41 ee       	ldi	r20, 0xE1	; 225
    4fd6:	51 e0       	ldi	r21, 0x01	; 1
    4fd8:	0e 94 96 2c 	call	0x592c	; 0x592c <__mulshisi3>
    4fdc:	86 0e       	add	r8, r22
    4fde:	97 1e       	adc	r9, r23
    4fe0:	a8 1e       	adc	r10, r24
    4fe2:	b9 1e       	adc	r11, r25
    4fe4:	c7 01       	movw	r24, r14
    4fe6:	4f 96       	adiw	r24, 0x1f	; 31
    4fe8:	dc 01       	movw	r26, r24
    4fea:	0a f4       	brpl	.+2      	; 0x4fee <_Z16rv3028_get_epochPbPc+0x12a>
    4fec:	13 96       	adiw	r26, 0x03	; 3
    4fee:	b5 95       	asr	r27
    4ff0:	a7 95       	ror	r26
    4ff2:	b5 95       	asr	r27
    4ff4:	a7 95       	ror	r26
    4ff6:	20 e8       	ldi	r18, 0x80	; 128
    4ff8:	31 e5       	ldi	r19, 0x51	; 81
    4ffa:	41 e0       	ldi	r20, 0x01	; 1
    4ffc:	50 e0       	ldi	r21, 0x00	; 0
    4ffe:	0e 94 96 2c 	call	0x592c	; 0x592c <__mulshisi3>
    5002:	86 0e       	add	r8, r22
    5004:	97 1e       	adc	r9, r23
    5006:	a8 1e       	adc	r10, r24
    5008:	b9 1e       	adc	r11, r25
    500a:	c7 01       	movw	r24, r14
    500c:	8d 59       	subi	r24, 0x9D	; 157
    500e:	9f 4f       	sbci	r25, 0xFF	; 255
    5010:	64 e6       	ldi	r22, 0x64	; 100
    5012:	70 e0       	ldi	r23, 0x00	; 0
    5014:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    5018:	db 01       	movw	r26, r22
    501a:	20 e8       	ldi	r18, 0x80	; 128
    501c:	3e ea       	ldi	r19, 0xAE	; 174
    501e:	4e ef       	ldi	r20, 0xFE	; 254
    5020:	5f ef       	ldi	r21, 0xFF	; 255
    5022:	0e 94 96 2c 	call	0x592c	; 0x592c <__mulshisi3>
    5026:	86 0e       	add	r8, r22
    5028:	97 1e       	adc	r9, r23
    502a:	a8 1e       	adc	r10, r24
    502c:	b9 1e       	adc	r11, r25
    502e:	c7 01       	movw	r24, r14
    5030:	81 57       	subi	r24, 0x71	; 113
    5032:	9e 4f       	sbci	r25, 0xFE	; 254
    5034:	60 e9       	ldi	r22, 0x90	; 144
    5036:	71 e0       	ldi	r23, 0x01	; 1
    5038:	0e 94 1a 2c 	call	0x5834	; 0x5834 <__divmodhi4>
    503c:	db 01       	movw	r26, r22
    503e:	20 e8       	ldi	r18, 0x80	; 128
    5040:	31 e5       	ldi	r19, 0x51	; 81
    5042:	41 e0       	ldi	r20, 0x01	; 1
    5044:	50 e0       	ldi	r21, 0x00	; 0
    5046:	0e 94 96 2c 	call	0x592c	; 0x592c <__mulshisi3>
    504a:	68 0d       	add	r22, r8
    504c:	79 1d       	adc	r23, r9
    504e:	8a 1d       	adc	r24, r10
    5050:	9b 1d       	adc	r25, r11
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	09 c0       	rjmp	.+18     	; 0x5068 <_Z16rv3028_get_epochPbPc+0x1a4>
    5056:	0e 94 33 27 	call	0x4e66	; 0x4e66 <_Z16rv3028_get_epochv>
    505a:	31 e0       	ldi	r19, 0x01	; 1
    505c:	61 15       	cp	r22, r1
    505e:	71 05       	cpc	r23, r1
    5060:	81 05       	cpc	r24, r1
    5062:	91 05       	cpc	r25, r1
    5064:	09 f0       	breq	.+2      	; 0x5068 <_Z16rv3028_get_epochPbPc+0x1a4>
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	c1 14       	cp	r12, r1
    506a:	d1 04       	cpc	r13, r1
    506c:	31 f0       	breq	.+12     	; 0x507a <_Z16rv3028_get_epochPbPc+0x1b6>
    506e:	21 e0       	ldi	r18, 0x01	; 1
    5070:	31 11       	cpse	r19, r1
    5072:	01 c0       	rjmp	.+2      	; 0x5076 <_Z16rv3028_get_epochPbPc+0x1b2>
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	f6 01       	movw	r30, r12
    5078:	20 83       	st	Z, r18
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	ff 90       	pop	r15
    5084:	ef 90       	pop	r14
    5086:	df 90       	pop	r13
    5088:	cf 90       	pop	r12
    508a:	bf 90       	pop	r11
    508c:	af 90       	pop	r10
    508e:	9f 90       	pop	r9
    5090:	8f 90       	pop	r8
    5092:	7f 90       	pop	r7
    5094:	6f 90       	pop	r6
    5096:	08 95       	ret

00005098 <_Z21rv3028_set_offset_RAMj>:
    5098:	cf 93       	push	r28
    509a:	df 93       	push	r29
    509c:	00 d0       	rcall	.+0      	; 0x509e <_Z21rv3028_set_offset_RAMj+0x6>
    509e:	cd b7       	in	r28, 0x3d	; 61
    50a0:	de b7       	in	r29, 0x3e	; 62
    50a2:	20 e1       	ldi	r18, 0x10	; 16
    50a4:	2a 83       	std	Y+2, r18	; 0x02
    50a6:	9c 01       	movw	r18, r24
    50a8:	36 95       	lsr	r19
    50aa:	27 95       	ror	r18
    50ac:	29 83       	std	Y+1, r18	; 0x01
    50ae:	80 ff       	sbrs	r24, 0
    50b0:	02 c0       	rjmp	.+4      	; 0x50b6 <_Z21rv3028_set_offset_RAMj+0x1e>
    50b2:	80 e9       	ldi	r24, 0x90	; 144
    50b4:	8a 83       	std	Y+2, r24	; 0x02
    50b6:	22 e0       	ldi	r18, 0x02	; 2
    50b8:	ae 01       	movw	r20, r28
    50ba:	4f 5f       	subi	r20, 0xFF	; 255
    50bc:	5f 4f       	sbci	r21, 0xFF	; 255
    50be:	66 e3       	ldi	r22, 0x36	; 54
    50c0:	84 ea       	ldi	r24, 0xA4	; 164
    50c2:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
    50c6:	0f 90       	pop	r0
    50c8:	0f 90       	pop	r0
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <_Z18waitForEEPROMReadyv>:
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	1f 92       	push	r1
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
    50da:	81 e0       	ldi	r24, 0x01	; 1
    50dc:	89 83       	std	Y+1, r24	; 0x01
    50de:	21 e0       	ldi	r18, 0x01	; 1
    50e0:	ae 01       	movw	r20, r28
    50e2:	4f 5f       	subi	r20, 0xFF	; 255
    50e4:	5f 4f       	sbci	r21, 0xFF	; 255
    50e6:	6e e0       	ldi	r22, 0x0E	; 14
    50e8:	84 ea       	ldi	r24, 0xA4	; 164
    50ea:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
    50ee:	81 11       	cpse	r24, r1
    50f0:	07 c0       	rjmp	.+14     	; 0x5100 <_Z18waitForEEPROMReadyv+0x30>
    50f2:	89 81       	ldd	r24, Y+1	; 0x01
    50f4:	80 78       	andi	r24, 0x80	; 128
    50f6:	89 83       	std	Y+1, r24	; 0x01
    50f8:	81 11       	cpse	r24, r1
    50fa:	f1 cf       	rjmp	.-30     	; 0x50de <_Z18waitForEEPROMReadyv+0xe>
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	03 c0       	rjmp	.+6      	; 0x5106 <_Z18waitForEEPROMReadyv+0x36>
    5100:	89 81       	ldd	r24, Y+1	; 0x01
    5102:	88 23       	and	r24, r24
    5104:	d9 f3       	breq	.-10     	; 0x50fc <_Z18waitForEEPROMReadyv+0x2c>
    5106:	0f 90       	pop	r0
    5108:	df 91       	pop	r29
    510a:	cf 91       	pop	r28
    510c:	08 95       	ret

0000510e <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	1f 92       	push	r1
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    5118:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    511a:	21 e0       	ldi	r18, 0x01	; 1
    511c:	ae 01       	movw	r20, r28
    511e:	4f 5f       	subi	r20, 0xFF	; 255
    5120:	5f 4f       	sbci	r21, 0xFF	; 255
    5122:	67 e2       	ldi	r22, 0x27	; 39
    5124:	84 ea       	ldi	r24, 0xA4	; 164
    5126:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    512a:	0e 94 68 28 	call	0x50d0	; 0x50d0 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    512e:	82 e1       	ldi	r24, 0x12	; 18
    5130:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    5132:	21 e0       	ldi	r18, 0x01	; 1
    5134:	ae 01       	movw	r20, r28
    5136:	4f 5f       	subi	r20, 0xFF	; 255
    5138:	5f 4f       	sbci	r21, 0xFF	; 255
    513a:	67 e2       	ldi	r22, 0x27	; 39
    513c:	84 ea       	ldi	r24, 0xA4	; 164
    513e:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    5142:	0e 94 68 28 	call	0x50d0	; 0x50d0 <_Z18waitForEEPROMReadyv>
	}
    5146:	0f 90       	pop	r0
    5148:	df 91       	pop	r29
    514a:	cf 91       	pop	r28
    514c:	08 95       	ret

0000514e <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    514e:	cf 93       	push	r28
    5150:	df 93       	push	r29
    5152:	00 d0       	rcall	.+0      	; 0x5154 <_Z21rv3028_get_offset_RAMv+0x6>
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    5158:	0e 94 87 28 	call	0x510e	; 0x510e <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    515c:	22 e0       	ldi	r18, 0x02	; 2
    515e:	ae 01       	movw	r20, r28
    5160:	4f 5f       	subi	r20, 0xFF	; 255
    5162:	5f 4f       	sbci	r21, 0xFF	; 255
    5164:	66 e3       	ldi	r22, 0x36	; 54
    5166:	84 ea       	ldi	r24, 0xA4	; 164
    5168:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    516c:	89 81       	ldd	r24, Y+1	; 0x01
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	88 0f       	add	r24, r24
    5172:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    5174:	2a 81       	ldd	r18, Y+2	; 0x02
    5176:	22 23       	and	r18, r18
    5178:	0c f4       	brge	.+2      	; 0x517c <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    517a:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    517c:	0f 90       	pop	r0
    517e:	0f 90       	pop	r0
    5180:	df 91       	pop	r29
    5182:	cf 91       	pop	r28
    5184:	08 95       	ret

00005186 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    5186:	cf 93       	push	r28
    5188:	df 93       	push	r29
    518a:	00 d0       	rcall	.+0      	; 0x518c <_Z13rv3028_1s_sqwv+0x6>
    518c:	cd b7       	in	r28, 0x3d	; 61
    518e:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    5190:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    5192:	1a 82       	std	Y+2, r1	; 0x02
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY

			refreshRAMfromEEPROM();
    5194:	0e 94 87 28 	call	0x510e	; 0x510e <_Z20refreshRAMfromEEPROMv>

			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    5198:	89 81       	ldd	r24, Y+1	; 0x01
    519a:	81 11       	cpse	r24, r1
    519c:	0c c0       	rjmp	.+24     	; 0x51b6 <_Z13rv3028_1s_sqwv+0x30>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    519e:	21 e0       	ldi	r18, 0x01	; 1
    51a0:	ae 01       	movw	r20, r28
    51a2:	4f 5f       	subi	r20, 0xFF	; 255
    51a4:	5f 4f       	sbci	r21, 0xFF	; 255
    51a6:	6e e0       	ldi	r22, 0x0E	; 14
    51a8:	84 ea       	ldi	r24, 0xA4	; 164
    51aa:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    51ae:	89 81       	ldd	r24, Y+1	; 0x01
    51b0:	8f 76       	andi	r24, 0x6F	; 111
    51b2:	89 83       	std	Y+1, r24	; 0x01
    51b4:	02 c0       	rjmp	.+4      	; 0x51ba <_Z13rv3028_1s_sqwv+0x34>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    51b6:	80 e8       	ldi	r24, 0x80	; 128
    51b8:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    51ba:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    51bc:	21 e0       	ldi	r18, 0x01	; 1
    51be:	ae 01       	movw	r20, r28
    51c0:	4e 5f       	subi	r20, 0xFE	; 254
    51c2:	5f 4f       	sbci	r21, 0xFF	; 255
    51c4:	6e e0       	ldi	r22, 0x0E	; 14
    51c6:	84 ea       	ldi	r24, 0xA4	; 164
    51c8:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>

			return(status);
		}
    51cc:	89 81       	ldd	r24, Y+1	; 0x01
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	df 91       	pop	r29
    51d4:	cf 91       	pop	r28
    51d6:	08 95       	ret

000051d8 <__subsf3>:
    51d8:	50 58       	subi	r21, 0x80	; 128

000051da <__addsf3>:
    51da:	bb 27       	eor	r27, r27
    51dc:	aa 27       	eor	r26, r26
    51de:	0e 94 04 29 	call	0x5208	; 0x5208 <__addsf3x>
    51e2:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <__fp_round>
    51e6:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__fp_pscA>
    51ea:	38 f0       	brcs	.+14     	; 0x51fa <__addsf3+0x20>
    51ec:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <__fp_pscB>
    51f0:	20 f0       	brcs	.+8      	; 0x51fa <__addsf3+0x20>
    51f2:	39 f4       	brne	.+14     	; 0x5202 <__addsf3+0x28>
    51f4:	9f 3f       	cpi	r25, 0xFF	; 255
    51f6:	19 f4       	brne	.+6      	; 0x51fe <__addsf3+0x24>
    51f8:	26 f4       	brtc	.+8      	; 0x5202 <__addsf3+0x28>
    51fa:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <__fp_nan>
    51fe:	0e f4       	brtc	.+2      	; 0x5202 <__addsf3+0x28>
    5200:	e0 95       	com	r30
    5202:	e7 fb       	bst	r30, 7
    5204:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__fp_inf>

00005208 <__addsf3x>:
    5208:	e9 2f       	mov	r30, r25
    520a:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__fp_split3>
    520e:	58 f3       	brcs	.-42     	; 0x51e6 <__addsf3+0xc>
    5210:	ba 17       	cp	r27, r26
    5212:	62 07       	cpc	r22, r18
    5214:	73 07       	cpc	r23, r19
    5216:	84 07       	cpc	r24, r20
    5218:	95 07       	cpc	r25, r21
    521a:	20 f0       	brcs	.+8      	; 0x5224 <__addsf3x+0x1c>
    521c:	79 f4       	brne	.+30     	; 0x523c <__addsf3x+0x34>
    521e:	a6 f5       	brtc	.+104    	; 0x5288 <__addsf3x+0x80>
    5220:	0c 94 f5 2a 	jmp	0x55ea	; 0x55ea <__fp_zero>
    5224:	0e f4       	brtc	.+2      	; 0x5228 <__addsf3x+0x20>
    5226:	e0 95       	com	r30
    5228:	0b 2e       	mov	r0, r27
    522a:	ba 2f       	mov	r27, r26
    522c:	a0 2d       	mov	r26, r0
    522e:	0b 01       	movw	r0, r22
    5230:	b9 01       	movw	r22, r18
    5232:	90 01       	movw	r18, r0
    5234:	0c 01       	movw	r0, r24
    5236:	ca 01       	movw	r24, r20
    5238:	a0 01       	movw	r20, r0
    523a:	11 24       	eor	r1, r1
    523c:	ff 27       	eor	r31, r31
    523e:	59 1b       	sub	r21, r25
    5240:	99 f0       	breq	.+38     	; 0x5268 <__addsf3x+0x60>
    5242:	59 3f       	cpi	r21, 0xF9	; 249
    5244:	50 f4       	brcc	.+20     	; 0x525a <__addsf3x+0x52>
    5246:	50 3e       	cpi	r21, 0xE0	; 224
    5248:	68 f1       	brcs	.+90     	; 0x52a4 <__addsf3x+0x9c>
    524a:	1a 16       	cp	r1, r26
    524c:	f0 40       	sbci	r31, 0x00	; 0
    524e:	a2 2f       	mov	r26, r18
    5250:	23 2f       	mov	r18, r19
    5252:	34 2f       	mov	r19, r20
    5254:	44 27       	eor	r20, r20
    5256:	58 5f       	subi	r21, 0xF8	; 248
    5258:	f3 cf       	rjmp	.-26     	; 0x5240 <__addsf3x+0x38>
    525a:	46 95       	lsr	r20
    525c:	37 95       	ror	r19
    525e:	27 95       	ror	r18
    5260:	a7 95       	ror	r26
    5262:	f0 40       	sbci	r31, 0x00	; 0
    5264:	53 95       	inc	r21
    5266:	c9 f7       	brne	.-14     	; 0x525a <__addsf3x+0x52>
    5268:	7e f4       	brtc	.+30     	; 0x5288 <__addsf3x+0x80>
    526a:	1f 16       	cp	r1, r31
    526c:	ba 0b       	sbc	r27, r26
    526e:	62 0b       	sbc	r22, r18
    5270:	73 0b       	sbc	r23, r19
    5272:	84 0b       	sbc	r24, r20
    5274:	ba f0       	brmi	.+46     	; 0x52a4 <__addsf3x+0x9c>
    5276:	91 50       	subi	r25, 0x01	; 1
    5278:	a1 f0       	breq	.+40     	; 0x52a2 <__addsf3x+0x9a>
    527a:	ff 0f       	add	r31, r31
    527c:	bb 1f       	adc	r27, r27
    527e:	66 1f       	adc	r22, r22
    5280:	77 1f       	adc	r23, r23
    5282:	88 1f       	adc	r24, r24
    5284:	c2 f7       	brpl	.-16     	; 0x5276 <__addsf3x+0x6e>
    5286:	0e c0       	rjmp	.+28     	; 0x52a4 <__addsf3x+0x9c>
    5288:	ba 0f       	add	r27, r26
    528a:	62 1f       	adc	r22, r18
    528c:	73 1f       	adc	r23, r19
    528e:	84 1f       	adc	r24, r20
    5290:	48 f4       	brcc	.+18     	; 0x52a4 <__addsf3x+0x9c>
    5292:	87 95       	ror	r24
    5294:	77 95       	ror	r23
    5296:	67 95       	ror	r22
    5298:	b7 95       	ror	r27
    529a:	f7 95       	ror	r31
    529c:	9e 3f       	cpi	r25, 0xFE	; 254
    529e:	08 f0       	brcs	.+2      	; 0x52a2 <__addsf3x+0x9a>
    52a0:	b0 cf       	rjmp	.-160    	; 0x5202 <__addsf3+0x28>
    52a2:	93 95       	inc	r25
    52a4:	88 0f       	add	r24, r24
    52a6:	08 f0       	brcs	.+2      	; 0x52aa <__addsf3x+0xa2>
    52a8:	99 27       	eor	r25, r25
    52aa:	ee 0f       	add	r30, r30
    52ac:	97 95       	ror	r25
    52ae:	87 95       	ror	r24
    52b0:	08 95       	ret

000052b2 <__cmpsf2>:
    52b2:	0e 94 48 2a 	call	0x5490	; 0x5490 <__fp_cmp>
    52b6:	08 f4       	brcc	.+2      	; 0x52ba <__cmpsf2+0x8>
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	08 95       	ret

000052bc <cos>:
    52bc:	0e 94 85 2a 	call	0x550a	; 0x550a <__fp_rempio2>
    52c0:	e3 95       	inc	r30
    52c2:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__fp_sinus>

000052c6 <__divsf3>:
    52c6:	0e 94 77 29 	call	0x52ee	; 0x52ee <__divsf3x>
    52ca:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <__fp_round>
    52ce:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <__fp_pscB>
    52d2:	58 f0       	brcs	.+22     	; 0x52ea <__divsf3+0x24>
    52d4:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__fp_pscA>
    52d8:	40 f0       	brcs	.+16     	; 0x52ea <__divsf3+0x24>
    52da:	29 f4       	brne	.+10     	; 0x52e6 <__divsf3+0x20>
    52dc:	5f 3f       	cpi	r21, 0xFF	; 255
    52de:	29 f0       	breq	.+10     	; 0x52ea <__divsf3+0x24>
    52e0:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__fp_inf>
    52e4:	51 11       	cpse	r21, r1
    52e6:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__fp_szero>
    52ea:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <__fp_nan>

000052ee <__divsf3x>:
    52ee:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__fp_split3>
    52f2:	68 f3       	brcs	.-38     	; 0x52ce <__divsf3+0x8>

000052f4 <__divsf3_pse>:
    52f4:	99 23       	and	r25, r25
    52f6:	b1 f3       	breq	.-20     	; 0x52e4 <__divsf3+0x1e>
    52f8:	55 23       	and	r21, r21
    52fa:	91 f3       	breq	.-28     	; 0x52e0 <__divsf3+0x1a>
    52fc:	95 1b       	sub	r25, r21
    52fe:	55 0b       	sbc	r21, r21
    5300:	bb 27       	eor	r27, r27
    5302:	aa 27       	eor	r26, r26
    5304:	62 17       	cp	r22, r18
    5306:	73 07       	cpc	r23, r19
    5308:	84 07       	cpc	r24, r20
    530a:	38 f0       	brcs	.+14     	; 0x531a <__divsf3_pse+0x26>
    530c:	9f 5f       	subi	r25, 0xFF	; 255
    530e:	5f 4f       	sbci	r21, 0xFF	; 255
    5310:	22 0f       	add	r18, r18
    5312:	33 1f       	adc	r19, r19
    5314:	44 1f       	adc	r20, r20
    5316:	aa 1f       	adc	r26, r26
    5318:	a9 f3       	breq	.-22     	; 0x5304 <__divsf3_pse+0x10>
    531a:	35 d0       	rcall	.+106    	; 0x5386 <__divsf3_pse+0x92>
    531c:	0e 2e       	mov	r0, r30
    531e:	3a f0       	brmi	.+14     	; 0x532e <__divsf3_pse+0x3a>
    5320:	e0 e8       	ldi	r30, 0x80	; 128
    5322:	32 d0       	rcall	.+100    	; 0x5388 <__divsf3_pse+0x94>
    5324:	91 50       	subi	r25, 0x01	; 1
    5326:	50 40       	sbci	r21, 0x00	; 0
    5328:	e6 95       	lsr	r30
    532a:	00 1c       	adc	r0, r0
    532c:	ca f7       	brpl	.-14     	; 0x5320 <__divsf3_pse+0x2c>
    532e:	2b d0       	rcall	.+86     	; 0x5386 <__divsf3_pse+0x92>
    5330:	fe 2f       	mov	r31, r30
    5332:	29 d0       	rcall	.+82     	; 0x5386 <__divsf3_pse+0x92>
    5334:	66 0f       	add	r22, r22
    5336:	77 1f       	adc	r23, r23
    5338:	88 1f       	adc	r24, r24
    533a:	bb 1f       	adc	r27, r27
    533c:	26 17       	cp	r18, r22
    533e:	37 07       	cpc	r19, r23
    5340:	48 07       	cpc	r20, r24
    5342:	ab 07       	cpc	r26, r27
    5344:	b0 e8       	ldi	r27, 0x80	; 128
    5346:	09 f0       	breq	.+2      	; 0x534a <__divsf3_pse+0x56>
    5348:	bb 0b       	sbc	r27, r27
    534a:	80 2d       	mov	r24, r0
    534c:	bf 01       	movw	r22, r30
    534e:	ff 27       	eor	r31, r31
    5350:	93 58       	subi	r25, 0x83	; 131
    5352:	5f 4f       	sbci	r21, 0xFF	; 255
    5354:	3a f0       	brmi	.+14     	; 0x5364 <__divsf3_pse+0x70>
    5356:	9e 3f       	cpi	r25, 0xFE	; 254
    5358:	51 05       	cpc	r21, r1
    535a:	78 f0       	brcs	.+30     	; 0x537a <__divsf3_pse+0x86>
    535c:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__fp_inf>
    5360:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__fp_szero>
    5364:	5f 3f       	cpi	r21, 0xFF	; 255
    5366:	e4 f3       	brlt	.-8      	; 0x5360 <__divsf3_pse+0x6c>
    5368:	98 3e       	cpi	r25, 0xE8	; 232
    536a:	d4 f3       	brlt	.-12     	; 0x5360 <__divsf3_pse+0x6c>
    536c:	86 95       	lsr	r24
    536e:	77 95       	ror	r23
    5370:	67 95       	ror	r22
    5372:	b7 95       	ror	r27
    5374:	f7 95       	ror	r31
    5376:	9f 5f       	subi	r25, 0xFF	; 255
    5378:	c9 f7       	brne	.-14     	; 0x536c <__divsf3_pse+0x78>
    537a:	88 0f       	add	r24, r24
    537c:	91 1d       	adc	r25, r1
    537e:	96 95       	lsr	r25
    5380:	87 95       	ror	r24
    5382:	97 f9       	bld	r25, 7
    5384:	08 95       	ret
    5386:	e1 e0       	ldi	r30, 0x01	; 1
    5388:	66 0f       	add	r22, r22
    538a:	77 1f       	adc	r23, r23
    538c:	88 1f       	adc	r24, r24
    538e:	bb 1f       	adc	r27, r27
    5390:	62 17       	cp	r22, r18
    5392:	73 07       	cpc	r23, r19
    5394:	84 07       	cpc	r24, r20
    5396:	ba 07       	cpc	r27, r26
    5398:	20 f0       	brcs	.+8      	; 0x53a2 <__divsf3_pse+0xae>
    539a:	62 1b       	sub	r22, r18
    539c:	73 0b       	sbc	r23, r19
    539e:	84 0b       	sbc	r24, r20
    53a0:	ba 0b       	sbc	r27, r26
    53a2:	ee 1f       	adc	r30, r30
    53a4:	88 f7       	brcc	.-30     	; 0x5388 <__divsf3_pse+0x94>
    53a6:	e0 95       	com	r30
    53a8:	08 95       	ret

000053aa <__fixsfsi>:
    53aa:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <__fixunssfsi>
    53ae:	68 94       	set
    53b0:	b1 11       	cpse	r27, r1
    53b2:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__fp_szero>
    53b6:	08 95       	ret

000053b8 <__fixunssfsi>:
    53b8:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <__fp_splitA>
    53bc:	88 f0       	brcs	.+34     	; 0x53e0 <__fixunssfsi+0x28>
    53be:	9f 57       	subi	r25, 0x7F	; 127
    53c0:	98 f0       	brcs	.+38     	; 0x53e8 <__fixunssfsi+0x30>
    53c2:	b9 2f       	mov	r27, r25
    53c4:	99 27       	eor	r25, r25
    53c6:	b7 51       	subi	r27, 0x17	; 23
    53c8:	b0 f0       	brcs	.+44     	; 0x53f6 <__fixunssfsi+0x3e>
    53ca:	e1 f0       	breq	.+56     	; 0x5404 <__fixunssfsi+0x4c>
    53cc:	66 0f       	add	r22, r22
    53ce:	77 1f       	adc	r23, r23
    53d0:	88 1f       	adc	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	1a f0       	brmi	.+6      	; 0x53dc <__fixunssfsi+0x24>
    53d6:	ba 95       	dec	r27
    53d8:	c9 f7       	brne	.-14     	; 0x53cc <__fixunssfsi+0x14>
    53da:	14 c0       	rjmp	.+40     	; 0x5404 <__fixunssfsi+0x4c>
    53dc:	b1 30       	cpi	r27, 0x01	; 1
    53de:	91 f0       	breq	.+36     	; 0x5404 <__fixunssfsi+0x4c>
    53e0:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <__fp_zero>
    53e4:	b1 e0       	ldi	r27, 0x01	; 1
    53e6:	08 95       	ret
    53e8:	0c 94 f5 2a 	jmp	0x55ea	; 0x55ea <__fp_zero>
    53ec:	67 2f       	mov	r22, r23
    53ee:	78 2f       	mov	r23, r24
    53f0:	88 27       	eor	r24, r24
    53f2:	b8 5f       	subi	r27, 0xF8	; 248
    53f4:	39 f0       	breq	.+14     	; 0x5404 <__fixunssfsi+0x4c>
    53f6:	b9 3f       	cpi	r27, 0xF9	; 249
    53f8:	cc f3       	brlt	.-14     	; 0x53ec <__fixunssfsi+0x34>
    53fa:	86 95       	lsr	r24
    53fc:	77 95       	ror	r23
    53fe:	67 95       	ror	r22
    5400:	b3 95       	inc	r27
    5402:	d9 f7       	brne	.-10     	; 0x53fa <__fixunssfsi+0x42>
    5404:	3e f4       	brtc	.+14     	; 0x5414 <__fixunssfsi+0x5c>
    5406:	90 95       	com	r25
    5408:	80 95       	com	r24
    540a:	70 95       	com	r23
    540c:	61 95       	neg	r22
    540e:	7f 4f       	sbci	r23, 0xFF	; 255
    5410:	8f 4f       	sbci	r24, 0xFF	; 255
    5412:	9f 4f       	sbci	r25, 0xFF	; 255
    5414:	08 95       	ret

00005416 <__floatunsisf>:
    5416:	e8 94       	clt
    5418:	09 c0       	rjmp	.+18     	; 0x542c <__floatsisf+0x12>

0000541a <__floatsisf>:
    541a:	97 fb       	bst	r25, 7
    541c:	3e f4       	brtc	.+14     	; 0x542c <__floatsisf+0x12>
    541e:	90 95       	com	r25
    5420:	80 95       	com	r24
    5422:	70 95       	com	r23
    5424:	61 95       	neg	r22
    5426:	7f 4f       	sbci	r23, 0xFF	; 255
    5428:	8f 4f       	sbci	r24, 0xFF	; 255
    542a:	9f 4f       	sbci	r25, 0xFF	; 255
    542c:	99 23       	and	r25, r25
    542e:	a9 f0       	breq	.+42     	; 0x545a <__floatsisf+0x40>
    5430:	f9 2f       	mov	r31, r25
    5432:	96 e9       	ldi	r25, 0x96	; 150
    5434:	bb 27       	eor	r27, r27
    5436:	93 95       	inc	r25
    5438:	f6 95       	lsr	r31
    543a:	87 95       	ror	r24
    543c:	77 95       	ror	r23
    543e:	67 95       	ror	r22
    5440:	b7 95       	ror	r27
    5442:	f1 11       	cpse	r31, r1
    5444:	f8 cf       	rjmp	.-16     	; 0x5436 <__floatsisf+0x1c>
    5446:	fa f4       	brpl	.+62     	; 0x5486 <__floatsisf+0x6c>
    5448:	bb 0f       	add	r27, r27
    544a:	11 f4       	brne	.+4      	; 0x5450 <__floatsisf+0x36>
    544c:	60 ff       	sbrs	r22, 0
    544e:	1b c0       	rjmp	.+54     	; 0x5486 <__floatsisf+0x6c>
    5450:	6f 5f       	subi	r22, 0xFF	; 255
    5452:	7f 4f       	sbci	r23, 0xFF	; 255
    5454:	8f 4f       	sbci	r24, 0xFF	; 255
    5456:	9f 4f       	sbci	r25, 0xFF	; 255
    5458:	16 c0       	rjmp	.+44     	; 0x5486 <__floatsisf+0x6c>
    545a:	88 23       	and	r24, r24
    545c:	11 f0       	breq	.+4      	; 0x5462 <__floatsisf+0x48>
    545e:	96 e9       	ldi	r25, 0x96	; 150
    5460:	11 c0       	rjmp	.+34     	; 0x5484 <__floatsisf+0x6a>
    5462:	77 23       	and	r23, r23
    5464:	21 f0       	breq	.+8      	; 0x546e <__floatsisf+0x54>
    5466:	9e e8       	ldi	r25, 0x8E	; 142
    5468:	87 2f       	mov	r24, r23
    546a:	76 2f       	mov	r23, r22
    546c:	05 c0       	rjmp	.+10     	; 0x5478 <__floatsisf+0x5e>
    546e:	66 23       	and	r22, r22
    5470:	71 f0       	breq	.+28     	; 0x548e <__floatsisf+0x74>
    5472:	96 e8       	ldi	r25, 0x86	; 134
    5474:	86 2f       	mov	r24, r22
    5476:	70 e0       	ldi	r23, 0x00	; 0
    5478:	60 e0       	ldi	r22, 0x00	; 0
    547a:	2a f0       	brmi	.+10     	; 0x5486 <__floatsisf+0x6c>
    547c:	9a 95       	dec	r25
    547e:	66 0f       	add	r22, r22
    5480:	77 1f       	adc	r23, r23
    5482:	88 1f       	adc	r24, r24
    5484:	da f7       	brpl	.-10     	; 0x547c <__floatsisf+0x62>
    5486:	88 0f       	add	r24, r24
    5488:	96 95       	lsr	r25
    548a:	87 95       	ror	r24
    548c:	97 f9       	bld	r25, 7
    548e:	08 95       	ret

00005490 <__fp_cmp>:
    5490:	99 0f       	add	r25, r25
    5492:	00 08       	sbc	r0, r0
    5494:	55 0f       	add	r21, r21
    5496:	aa 0b       	sbc	r26, r26
    5498:	e0 e8       	ldi	r30, 0x80	; 128
    549a:	fe ef       	ldi	r31, 0xFE	; 254
    549c:	16 16       	cp	r1, r22
    549e:	17 06       	cpc	r1, r23
    54a0:	e8 07       	cpc	r30, r24
    54a2:	f9 07       	cpc	r31, r25
    54a4:	c0 f0       	brcs	.+48     	; 0x54d6 <__fp_cmp+0x46>
    54a6:	12 16       	cp	r1, r18
    54a8:	13 06       	cpc	r1, r19
    54aa:	e4 07       	cpc	r30, r20
    54ac:	f5 07       	cpc	r31, r21
    54ae:	98 f0       	brcs	.+38     	; 0x54d6 <__fp_cmp+0x46>
    54b0:	62 1b       	sub	r22, r18
    54b2:	73 0b       	sbc	r23, r19
    54b4:	84 0b       	sbc	r24, r20
    54b6:	95 0b       	sbc	r25, r21
    54b8:	39 f4       	brne	.+14     	; 0x54c8 <__fp_cmp+0x38>
    54ba:	0a 26       	eor	r0, r26
    54bc:	61 f0       	breq	.+24     	; 0x54d6 <__fp_cmp+0x46>
    54be:	23 2b       	or	r18, r19
    54c0:	24 2b       	or	r18, r20
    54c2:	25 2b       	or	r18, r21
    54c4:	21 f4       	brne	.+8      	; 0x54ce <__fp_cmp+0x3e>
    54c6:	08 95       	ret
    54c8:	0a 26       	eor	r0, r26
    54ca:	09 f4       	brne	.+2      	; 0x54ce <__fp_cmp+0x3e>
    54cc:	a1 40       	sbci	r26, 0x01	; 1
    54ce:	a6 95       	lsr	r26
    54d0:	8f ef       	ldi	r24, 0xFF	; 255
    54d2:	81 1d       	adc	r24, r1
    54d4:	81 1d       	adc	r24, r1
    54d6:	08 95       	ret

000054d8 <__fp_inf>:
    54d8:	97 f9       	bld	r25, 7
    54da:	9f 67       	ori	r25, 0x7F	; 127
    54dc:	80 e8       	ldi	r24, 0x80	; 128
    54de:	70 e0       	ldi	r23, 0x00	; 0
    54e0:	60 e0       	ldi	r22, 0x00	; 0
    54e2:	08 95       	ret

000054e4 <__fp_nan>:
    54e4:	9f ef       	ldi	r25, 0xFF	; 255
    54e6:	80 ec       	ldi	r24, 0xC0	; 192
    54e8:	08 95       	ret

000054ea <__fp_pscA>:
    54ea:	00 24       	eor	r0, r0
    54ec:	0a 94       	dec	r0
    54ee:	16 16       	cp	r1, r22
    54f0:	17 06       	cpc	r1, r23
    54f2:	18 06       	cpc	r1, r24
    54f4:	09 06       	cpc	r0, r25
    54f6:	08 95       	ret

000054f8 <__fp_pscB>:
    54f8:	00 24       	eor	r0, r0
    54fa:	0a 94       	dec	r0
    54fc:	12 16       	cp	r1, r18
    54fe:	13 06       	cpc	r1, r19
    5500:	14 06       	cpc	r1, r20
    5502:	05 06       	cpc	r0, r21
    5504:	08 95       	ret
    5506:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <__fp_nan>

0000550a <__fp_rempio2>:
    550a:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <__fp_splitA>
    550e:	d8 f3       	brcs	.-10     	; 0x5506 <__fp_pscB+0xe>
    5510:	e8 94       	clt
    5512:	e0 e0       	ldi	r30, 0x00	; 0
    5514:	bb 27       	eor	r27, r27
    5516:	9f 57       	subi	r25, 0x7F	; 127
    5518:	f0 f0       	brcs	.+60     	; 0x5556 <__fp_rempio2+0x4c>
    551a:	2a ed       	ldi	r18, 0xDA	; 218
    551c:	3f e0       	ldi	r19, 0x0F	; 15
    551e:	49 ec       	ldi	r20, 0xC9	; 201
    5520:	06 c0       	rjmp	.+12     	; 0x552e <__fp_rempio2+0x24>
    5522:	ee 0f       	add	r30, r30
    5524:	bb 0f       	add	r27, r27
    5526:	66 1f       	adc	r22, r22
    5528:	77 1f       	adc	r23, r23
    552a:	88 1f       	adc	r24, r24
    552c:	28 f0       	brcs	.+10     	; 0x5538 <__fp_rempio2+0x2e>
    552e:	b2 3a       	cpi	r27, 0xA2	; 162
    5530:	62 07       	cpc	r22, r18
    5532:	73 07       	cpc	r23, r19
    5534:	84 07       	cpc	r24, r20
    5536:	28 f0       	brcs	.+10     	; 0x5542 <__fp_rempio2+0x38>
    5538:	b2 5a       	subi	r27, 0xA2	; 162
    553a:	62 0b       	sbc	r22, r18
    553c:	73 0b       	sbc	r23, r19
    553e:	84 0b       	sbc	r24, r20
    5540:	e3 95       	inc	r30
    5542:	9a 95       	dec	r25
    5544:	72 f7       	brpl	.-36     	; 0x5522 <__fp_rempio2+0x18>
    5546:	80 38       	cpi	r24, 0x80	; 128
    5548:	30 f4       	brcc	.+12     	; 0x5556 <__fp_rempio2+0x4c>
    554a:	9a 95       	dec	r25
    554c:	bb 0f       	add	r27, r27
    554e:	66 1f       	adc	r22, r22
    5550:	77 1f       	adc	r23, r23
    5552:	88 1f       	adc	r24, r24
    5554:	d2 f7       	brpl	.-12     	; 0x554a <__fp_rempio2+0x40>
    5556:	90 48       	sbci	r25, 0x80	; 128
    5558:	0c 94 af 2b 	jmp	0x575e	; 0x575e <__fp_mpack_finite>

0000555c <__fp_round>:
    555c:	09 2e       	mov	r0, r25
    555e:	03 94       	inc	r0
    5560:	00 0c       	add	r0, r0
    5562:	11 f4       	brne	.+4      	; 0x5568 <__fp_round+0xc>
    5564:	88 23       	and	r24, r24
    5566:	52 f0       	brmi	.+20     	; 0x557c <__fp_round+0x20>
    5568:	bb 0f       	add	r27, r27
    556a:	40 f4       	brcc	.+16     	; 0x557c <__fp_round+0x20>
    556c:	bf 2b       	or	r27, r31
    556e:	11 f4       	brne	.+4      	; 0x5574 <__fp_round+0x18>
    5570:	60 ff       	sbrs	r22, 0
    5572:	04 c0       	rjmp	.+8      	; 0x557c <__fp_round+0x20>
    5574:	6f 5f       	subi	r22, 0xFF	; 255
    5576:	7f 4f       	sbci	r23, 0xFF	; 255
    5578:	8f 4f       	sbci	r24, 0xFF	; 255
    557a:	9f 4f       	sbci	r25, 0xFF	; 255
    557c:	08 95       	ret

0000557e <__fp_sinus>:
    557e:	ef 93       	push	r30
    5580:	e0 ff       	sbrs	r30, 0
    5582:	07 c0       	rjmp	.+14     	; 0x5592 <__fp_sinus+0x14>
    5584:	a2 ea       	ldi	r26, 0xA2	; 162
    5586:	2a ed       	ldi	r18, 0xDA	; 218
    5588:	3f e0       	ldi	r19, 0x0F	; 15
    558a:	49 ec       	ldi	r20, 0xC9	; 201
    558c:	5f eb       	ldi	r21, 0xBF	; 191
    558e:	0e 94 04 29 	call	0x5208	; 0x5208 <__addsf3x>
    5592:	0e 94 ae 2a 	call	0x555c	; 0x555c <__fp_round>
    5596:	0f 90       	pop	r0
    5598:	03 94       	inc	r0
    559a:	01 fc       	sbrc	r0, 1
    559c:	90 58       	subi	r25, 0x80	; 128
    559e:	e6 e0       	ldi	r30, 0x06	; 6
    55a0:	f2 e0       	ldi	r31, 0x02	; 2
    55a2:	0c 94 bb 2b 	jmp	0x5776	; 0x5776 <__fp_powsodd>

000055a6 <__fp_split3>:
    55a6:	57 fd       	sbrc	r21, 7
    55a8:	90 58       	subi	r25, 0x80	; 128
    55aa:	44 0f       	add	r20, r20
    55ac:	55 1f       	adc	r21, r21
    55ae:	59 f0       	breq	.+22     	; 0x55c6 <__fp_splitA+0x10>
    55b0:	5f 3f       	cpi	r21, 0xFF	; 255
    55b2:	71 f0       	breq	.+28     	; 0x55d0 <__fp_splitA+0x1a>
    55b4:	47 95       	ror	r20

000055b6 <__fp_splitA>:
    55b6:	88 0f       	add	r24, r24
    55b8:	97 fb       	bst	r25, 7
    55ba:	99 1f       	adc	r25, r25
    55bc:	61 f0       	breq	.+24     	; 0x55d6 <__fp_splitA+0x20>
    55be:	9f 3f       	cpi	r25, 0xFF	; 255
    55c0:	79 f0       	breq	.+30     	; 0x55e0 <__fp_splitA+0x2a>
    55c2:	87 95       	ror	r24
    55c4:	08 95       	ret
    55c6:	12 16       	cp	r1, r18
    55c8:	13 06       	cpc	r1, r19
    55ca:	14 06       	cpc	r1, r20
    55cc:	55 1f       	adc	r21, r21
    55ce:	f2 cf       	rjmp	.-28     	; 0x55b4 <__fp_split3+0xe>
    55d0:	46 95       	lsr	r20
    55d2:	f1 df       	rcall	.-30     	; 0x55b6 <__fp_splitA>
    55d4:	08 c0       	rjmp	.+16     	; 0x55e6 <__fp_splitA+0x30>
    55d6:	16 16       	cp	r1, r22
    55d8:	17 06       	cpc	r1, r23
    55da:	18 06       	cpc	r1, r24
    55dc:	99 1f       	adc	r25, r25
    55de:	f1 cf       	rjmp	.-30     	; 0x55c2 <__fp_splitA+0xc>
    55e0:	86 95       	lsr	r24
    55e2:	71 05       	cpc	r23, r1
    55e4:	61 05       	cpc	r22, r1
    55e6:	08 94       	sec
    55e8:	08 95       	ret

000055ea <__fp_zero>:
    55ea:	e8 94       	clt

000055ec <__fp_szero>:
    55ec:	bb 27       	eor	r27, r27
    55ee:	66 27       	eor	r22, r22
    55f0:	77 27       	eor	r23, r23
    55f2:	cb 01       	movw	r24, r22
    55f4:	97 f9       	bld	r25, 7
    55f6:	08 95       	ret

000055f8 <__gesf2>:
    55f8:	0e 94 48 2a 	call	0x5490	; 0x5490 <__fp_cmp>
    55fc:	08 f4       	brcc	.+2      	; 0x5600 <__gesf2+0x8>
    55fe:	8f ef       	ldi	r24, 0xFF	; 255
    5600:	08 95       	ret

00005602 <__mulsf3>:
    5602:	0e 94 14 2b 	call	0x5628	; 0x5628 <__mulsf3x>
    5606:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <__fp_round>
    560a:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__fp_pscA>
    560e:	38 f0       	brcs	.+14     	; 0x561e <__mulsf3+0x1c>
    5610:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <__fp_pscB>
    5614:	20 f0       	brcs	.+8      	; 0x561e <__mulsf3+0x1c>
    5616:	95 23       	and	r25, r21
    5618:	11 f0       	breq	.+4      	; 0x561e <__mulsf3+0x1c>
    561a:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__fp_inf>
    561e:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <__fp_nan>
    5622:	11 24       	eor	r1, r1
    5624:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__fp_szero>

00005628 <__mulsf3x>:
    5628:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__fp_split3>
    562c:	70 f3       	brcs	.-36     	; 0x560a <__mulsf3+0x8>

0000562e <__mulsf3_pse>:
    562e:	95 9f       	mul	r25, r21
    5630:	c1 f3       	breq	.-16     	; 0x5622 <__mulsf3+0x20>
    5632:	95 0f       	add	r25, r21
    5634:	50 e0       	ldi	r21, 0x00	; 0
    5636:	55 1f       	adc	r21, r21
    5638:	62 9f       	mul	r22, r18
    563a:	f0 01       	movw	r30, r0
    563c:	72 9f       	mul	r23, r18
    563e:	bb 27       	eor	r27, r27
    5640:	f0 0d       	add	r31, r0
    5642:	b1 1d       	adc	r27, r1
    5644:	63 9f       	mul	r22, r19
    5646:	aa 27       	eor	r26, r26
    5648:	f0 0d       	add	r31, r0
    564a:	b1 1d       	adc	r27, r1
    564c:	aa 1f       	adc	r26, r26
    564e:	64 9f       	mul	r22, r20
    5650:	66 27       	eor	r22, r22
    5652:	b0 0d       	add	r27, r0
    5654:	a1 1d       	adc	r26, r1
    5656:	66 1f       	adc	r22, r22
    5658:	82 9f       	mul	r24, r18
    565a:	22 27       	eor	r18, r18
    565c:	b0 0d       	add	r27, r0
    565e:	a1 1d       	adc	r26, r1
    5660:	62 1f       	adc	r22, r18
    5662:	73 9f       	mul	r23, r19
    5664:	b0 0d       	add	r27, r0
    5666:	a1 1d       	adc	r26, r1
    5668:	62 1f       	adc	r22, r18
    566a:	83 9f       	mul	r24, r19
    566c:	a0 0d       	add	r26, r0
    566e:	61 1d       	adc	r22, r1
    5670:	22 1f       	adc	r18, r18
    5672:	74 9f       	mul	r23, r20
    5674:	33 27       	eor	r19, r19
    5676:	a0 0d       	add	r26, r0
    5678:	61 1d       	adc	r22, r1
    567a:	23 1f       	adc	r18, r19
    567c:	84 9f       	mul	r24, r20
    567e:	60 0d       	add	r22, r0
    5680:	21 1d       	adc	r18, r1
    5682:	82 2f       	mov	r24, r18
    5684:	76 2f       	mov	r23, r22
    5686:	6a 2f       	mov	r22, r26
    5688:	11 24       	eor	r1, r1
    568a:	9f 57       	subi	r25, 0x7F	; 127
    568c:	50 40       	sbci	r21, 0x00	; 0
    568e:	9a f0       	brmi	.+38     	; 0x56b6 <__mulsf3_pse+0x88>
    5690:	f1 f0       	breq	.+60     	; 0x56ce <__mulsf3_pse+0xa0>
    5692:	88 23       	and	r24, r24
    5694:	4a f0       	brmi	.+18     	; 0x56a8 <__mulsf3_pse+0x7a>
    5696:	ee 0f       	add	r30, r30
    5698:	ff 1f       	adc	r31, r31
    569a:	bb 1f       	adc	r27, r27
    569c:	66 1f       	adc	r22, r22
    569e:	77 1f       	adc	r23, r23
    56a0:	88 1f       	adc	r24, r24
    56a2:	91 50       	subi	r25, 0x01	; 1
    56a4:	50 40       	sbci	r21, 0x00	; 0
    56a6:	a9 f7       	brne	.-22     	; 0x5692 <__mulsf3_pse+0x64>
    56a8:	9e 3f       	cpi	r25, 0xFE	; 254
    56aa:	51 05       	cpc	r21, r1
    56ac:	80 f0       	brcs	.+32     	; 0x56ce <__mulsf3_pse+0xa0>
    56ae:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__fp_inf>
    56b2:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__fp_szero>
    56b6:	5f 3f       	cpi	r21, 0xFF	; 255
    56b8:	e4 f3       	brlt	.-8      	; 0x56b2 <__mulsf3_pse+0x84>
    56ba:	98 3e       	cpi	r25, 0xE8	; 232
    56bc:	d4 f3       	brlt	.-12     	; 0x56b2 <__mulsf3_pse+0x84>
    56be:	86 95       	lsr	r24
    56c0:	77 95       	ror	r23
    56c2:	67 95       	ror	r22
    56c4:	b7 95       	ror	r27
    56c6:	f7 95       	ror	r31
    56c8:	e7 95       	ror	r30
    56ca:	9f 5f       	subi	r25, 0xFF	; 255
    56cc:	c1 f7       	brne	.-16     	; 0x56be <__mulsf3_pse+0x90>
    56ce:	fe 2b       	or	r31, r30
    56d0:	88 0f       	add	r24, r24
    56d2:	91 1d       	adc	r25, r1
    56d4:	96 95       	lsr	r25
    56d6:	87 95       	ror	r24
    56d8:	97 f9       	bld	r25, 7
    56da:	08 95       	ret

000056dc <round>:
    56dc:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <__fp_splitA>
    56e0:	e8 f0       	brcs	.+58     	; 0x571c <round+0x40>
    56e2:	9e 37       	cpi	r25, 0x7E	; 126
    56e4:	e8 f0       	brcs	.+58     	; 0x5720 <round+0x44>
    56e6:	96 39       	cpi	r25, 0x96	; 150
    56e8:	b8 f4       	brcc	.+46     	; 0x5718 <round+0x3c>
    56ea:	9e 38       	cpi	r25, 0x8E	; 142
    56ec:	48 f4       	brcc	.+18     	; 0x5700 <round+0x24>
    56ee:	67 2f       	mov	r22, r23
    56f0:	78 2f       	mov	r23, r24
    56f2:	88 27       	eor	r24, r24
    56f4:	98 5f       	subi	r25, 0xF8	; 248
    56f6:	f9 cf       	rjmp	.-14     	; 0x56ea <round+0xe>
    56f8:	86 95       	lsr	r24
    56fa:	77 95       	ror	r23
    56fc:	67 95       	ror	r22
    56fe:	93 95       	inc	r25
    5700:	95 39       	cpi	r25, 0x95	; 149
    5702:	d0 f3       	brcs	.-12     	; 0x56f8 <round+0x1c>
    5704:	b6 2f       	mov	r27, r22
    5706:	b1 70       	andi	r27, 0x01	; 1
    5708:	6b 0f       	add	r22, r27
    570a:	71 1d       	adc	r23, r1
    570c:	81 1d       	adc	r24, r1
    570e:	20 f4       	brcc	.+8      	; 0x5718 <round+0x3c>
    5710:	87 95       	ror	r24
    5712:	77 95       	ror	r23
    5714:	67 95       	ror	r22
    5716:	93 95       	inc	r25
    5718:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <__fp_mintl>
    571c:	0c 94 ad 2b 	jmp	0x575a	; 0x575a <__fp_mpack>
    5720:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__fp_szero>

00005724 <__fp_mintl>:
    5724:	88 23       	and	r24, r24
    5726:	71 f4       	brne	.+28     	; 0x5744 <__fp_mintl+0x20>
    5728:	77 23       	and	r23, r23
    572a:	21 f0       	breq	.+8      	; 0x5734 <__fp_mintl+0x10>
    572c:	98 50       	subi	r25, 0x08	; 8
    572e:	87 2b       	or	r24, r23
    5730:	76 2f       	mov	r23, r22
    5732:	07 c0       	rjmp	.+14     	; 0x5742 <__fp_mintl+0x1e>
    5734:	66 23       	and	r22, r22
    5736:	11 f4       	brne	.+4      	; 0x573c <__fp_mintl+0x18>
    5738:	99 27       	eor	r25, r25
    573a:	0d c0       	rjmp	.+26     	; 0x5756 <__fp_mintl+0x32>
    573c:	90 51       	subi	r25, 0x10	; 16
    573e:	86 2b       	or	r24, r22
    5740:	70 e0       	ldi	r23, 0x00	; 0
    5742:	60 e0       	ldi	r22, 0x00	; 0
    5744:	2a f0       	brmi	.+10     	; 0x5750 <__fp_mintl+0x2c>
    5746:	9a 95       	dec	r25
    5748:	66 0f       	add	r22, r22
    574a:	77 1f       	adc	r23, r23
    574c:	88 1f       	adc	r24, r24
    574e:	da f7       	brpl	.-10     	; 0x5746 <__fp_mintl+0x22>
    5750:	88 0f       	add	r24, r24
    5752:	96 95       	lsr	r25
    5754:	87 95       	ror	r24
    5756:	97 f9       	bld	r25, 7
    5758:	08 95       	ret

0000575a <__fp_mpack>:
    575a:	9f 3f       	cpi	r25, 0xFF	; 255
    575c:	31 f0       	breq	.+12     	; 0x576a <__fp_mpack_finite+0xc>

0000575e <__fp_mpack_finite>:
    575e:	91 50       	subi	r25, 0x01	; 1
    5760:	20 f4       	brcc	.+8      	; 0x576a <__fp_mpack_finite+0xc>
    5762:	87 95       	ror	r24
    5764:	77 95       	ror	r23
    5766:	67 95       	ror	r22
    5768:	b7 95       	ror	r27
    576a:	88 0f       	add	r24, r24
    576c:	91 1d       	adc	r25, r1
    576e:	96 95       	lsr	r25
    5770:	87 95       	ror	r24
    5772:	97 f9       	bld	r25, 7
    5774:	08 95       	ret

00005776 <__fp_powsodd>:
    5776:	9f 93       	push	r25
    5778:	8f 93       	push	r24
    577a:	7f 93       	push	r23
    577c:	6f 93       	push	r22
    577e:	ff 93       	push	r31
    5780:	ef 93       	push	r30
    5782:	9b 01       	movw	r18, r22
    5784:	ac 01       	movw	r20, r24
    5786:	0e 94 01 2b 	call	0x5602	; 0x5602 <__mulsf3>
    578a:	ef 91       	pop	r30
    578c:	ff 91       	pop	r31
    578e:	0e 94 cf 2b 	call	0x579e	; 0x579e <__fp_powser>
    5792:	2f 91       	pop	r18
    5794:	3f 91       	pop	r19
    5796:	4f 91       	pop	r20
    5798:	5f 91       	pop	r21
    579a:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__mulsf3>

0000579e <__fp_powser>:
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	1f 93       	push	r17
    57a4:	0f 93       	push	r16
    57a6:	ff 92       	push	r15
    57a8:	ef 92       	push	r14
    57aa:	df 92       	push	r13
    57ac:	7b 01       	movw	r14, r22
    57ae:	8c 01       	movw	r16, r24
    57b0:	68 94       	set
    57b2:	06 c0       	rjmp	.+12     	; 0x57c0 <__fp_powser+0x22>
    57b4:	da 2e       	mov	r13, r26
    57b6:	ef 01       	movw	r28, r30
    57b8:	0e 94 14 2b 	call	0x5628	; 0x5628 <__mulsf3x>
    57bc:	fe 01       	movw	r30, r28
    57be:	e8 94       	clt
    57c0:	a5 91       	lpm	r26, Z+
    57c2:	25 91       	lpm	r18, Z+
    57c4:	35 91       	lpm	r19, Z+
    57c6:	45 91       	lpm	r20, Z+
    57c8:	55 91       	lpm	r21, Z+
    57ca:	a6 f3       	brts	.-24     	; 0x57b4 <__fp_powser+0x16>
    57cc:	ef 01       	movw	r28, r30
    57ce:	0e 94 04 29 	call	0x5208	; 0x5208 <__addsf3x>
    57d2:	fe 01       	movw	r30, r28
    57d4:	97 01       	movw	r18, r14
    57d6:	a8 01       	movw	r20, r16
    57d8:	da 94       	dec	r13
    57da:	69 f7       	brne	.-38     	; 0x57b6 <__fp_powser+0x18>
    57dc:	df 90       	pop	r13
    57de:	ef 90       	pop	r14
    57e0:	ff 90       	pop	r15
    57e2:	0f 91       	pop	r16
    57e4:	1f 91       	pop	r17
    57e6:	cf 91       	pop	r28
    57e8:	df 91       	pop	r29
    57ea:	08 95       	ret

000057ec <__mulsi3>:
    57ec:	db 01       	movw	r26, r22
    57ee:	8f 93       	push	r24
    57f0:	9f 93       	push	r25
    57f2:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__muluhisi3>
    57f6:	bf 91       	pop	r27
    57f8:	af 91       	pop	r26
    57fa:	a2 9f       	mul	r26, r18
    57fc:	80 0d       	add	r24, r0
    57fe:	91 1d       	adc	r25, r1
    5800:	a3 9f       	mul	r26, r19
    5802:	90 0d       	add	r25, r0
    5804:	b2 9f       	mul	r27, r18
    5806:	90 0d       	add	r25, r0
    5808:	11 24       	eor	r1, r1
    580a:	08 95       	ret

0000580c <__udivmodhi4>:
    580c:	aa 1b       	sub	r26, r26
    580e:	bb 1b       	sub	r27, r27
    5810:	51 e1       	ldi	r21, 0x11	; 17
    5812:	07 c0       	rjmp	.+14     	; 0x5822 <__udivmodhi4_ep>

00005814 <__udivmodhi4_loop>:
    5814:	aa 1f       	adc	r26, r26
    5816:	bb 1f       	adc	r27, r27
    5818:	a6 17       	cp	r26, r22
    581a:	b7 07       	cpc	r27, r23
    581c:	10 f0       	brcs	.+4      	; 0x5822 <__udivmodhi4_ep>
    581e:	a6 1b       	sub	r26, r22
    5820:	b7 0b       	sbc	r27, r23

00005822 <__udivmodhi4_ep>:
    5822:	88 1f       	adc	r24, r24
    5824:	99 1f       	adc	r25, r25
    5826:	5a 95       	dec	r21
    5828:	a9 f7       	brne	.-22     	; 0x5814 <__udivmodhi4_loop>
    582a:	80 95       	com	r24
    582c:	90 95       	com	r25
    582e:	bc 01       	movw	r22, r24
    5830:	cd 01       	movw	r24, r26
    5832:	08 95       	ret

00005834 <__divmodhi4>:
    5834:	97 fb       	bst	r25, 7
    5836:	07 2e       	mov	r0, r23
    5838:	16 f4       	brtc	.+4      	; 0x583e <__divmodhi4+0xa>
    583a:	00 94       	com	r0
    583c:	07 d0       	rcall	.+14     	; 0x584c <__divmodhi4_neg1>
    583e:	77 fd       	sbrc	r23, 7
    5840:	09 d0       	rcall	.+18     	; 0x5854 <__divmodhi4_neg2>
    5842:	0e 94 06 2c 	call	0x580c	; 0x580c <__udivmodhi4>
    5846:	07 fc       	sbrc	r0, 7
    5848:	05 d0       	rcall	.+10     	; 0x5854 <__divmodhi4_neg2>
    584a:	3e f4       	brtc	.+14     	; 0x585a <__divmodhi4_exit>

0000584c <__divmodhi4_neg1>:
    584c:	90 95       	com	r25
    584e:	81 95       	neg	r24
    5850:	9f 4f       	sbci	r25, 0xFF	; 255
    5852:	08 95       	ret

00005854 <__divmodhi4_neg2>:
    5854:	70 95       	com	r23
    5856:	61 95       	neg	r22
    5858:	7f 4f       	sbci	r23, 0xFF	; 255

0000585a <__divmodhi4_exit>:
    585a:	08 95       	ret

0000585c <__udivmodsi4>:
    585c:	a1 e2       	ldi	r26, 0x21	; 33
    585e:	1a 2e       	mov	r1, r26
    5860:	aa 1b       	sub	r26, r26
    5862:	bb 1b       	sub	r27, r27
    5864:	fd 01       	movw	r30, r26
    5866:	0d c0       	rjmp	.+26     	; 0x5882 <__udivmodsi4_ep>

00005868 <__udivmodsi4_loop>:
    5868:	aa 1f       	adc	r26, r26
    586a:	bb 1f       	adc	r27, r27
    586c:	ee 1f       	adc	r30, r30
    586e:	ff 1f       	adc	r31, r31
    5870:	a2 17       	cp	r26, r18
    5872:	b3 07       	cpc	r27, r19
    5874:	e4 07       	cpc	r30, r20
    5876:	f5 07       	cpc	r31, r21
    5878:	20 f0       	brcs	.+8      	; 0x5882 <__udivmodsi4_ep>
    587a:	a2 1b       	sub	r26, r18
    587c:	b3 0b       	sbc	r27, r19
    587e:	e4 0b       	sbc	r30, r20
    5880:	f5 0b       	sbc	r31, r21

00005882 <__udivmodsi4_ep>:
    5882:	66 1f       	adc	r22, r22
    5884:	77 1f       	adc	r23, r23
    5886:	88 1f       	adc	r24, r24
    5888:	99 1f       	adc	r25, r25
    588a:	1a 94       	dec	r1
    588c:	69 f7       	brne	.-38     	; 0x5868 <__udivmodsi4_loop>
    588e:	60 95       	com	r22
    5890:	70 95       	com	r23
    5892:	80 95       	com	r24
    5894:	90 95       	com	r25
    5896:	9b 01       	movw	r18, r22
    5898:	ac 01       	movw	r20, r24
    589a:	bd 01       	movw	r22, r26
    589c:	cf 01       	movw	r24, r30
    589e:	08 95       	ret

000058a0 <__divmodsi4>:
    58a0:	05 2e       	mov	r0, r21
    58a2:	97 fb       	bst	r25, 7
    58a4:	1e f4       	brtc	.+6      	; 0x58ac <__divmodsi4+0xc>
    58a6:	00 94       	com	r0
    58a8:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__negsi2>
    58ac:	57 fd       	sbrc	r21, 7
    58ae:	07 d0       	rcall	.+14     	; 0x58be <__divmodsi4_neg2>
    58b0:	0e 94 2e 2c 	call	0x585c	; 0x585c <__udivmodsi4>
    58b4:	07 fc       	sbrc	r0, 7
    58b6:	03 d0       	rcall	.+6      	; 0x58be <__divmodsi4_neg2>
    58b8:	4e f4       	brtc	.+18     	; 0x58cc <__divmodsi4_exit>
    58ba:	0c 94 67 2c 	jmp	0x58ce	; 0x58ce <__negsi2>

000058be <__divmodsi4_neg2>:
    58be:	50 95       	com	r21
    58c0:	40 95       	com	r20
    58c2:	30 95       	com	r19
    58c4:	21 95       	neg	r18
    58c6:	3f 4f       	sbci	r19, 0xFF	; 255
    58c8:	4f 4f       	sbci	r20, 0xFF	; 255
    58ca:	5f 4f       	sbci	r21, 0xFF	; 255

000058cc <__divmodsi4_exit>:
    58cc:	08 95       	ret

000058ce <__negsi2>:
    58ce:	90 95       	com	r25
    58d0:	80 95       	com	r24
    58d2:	70 95       	com	r23
    58d4:	61 95       	neg	r22
    58d6:	7f 4f       	sbci	r23, 0xFF	; 255
    58d8:	8f 4f       	sbci	r24, 0xFF	; 255
    58da:	9f 4f       	sbci	r25, 0xFF	; 255
    58dc:	08 95       	ret

000058de <__tablejump2__>:
    58de:	ee 0f       	add	r30, r30
    58e0:	ff 1f       	adc	r31, r31
    58e2:	05 90       	lpm	r0, Z+
    58e4:	f4 91       	lpm	r31, Z
    58e6:	e0 2d       	mov	r30, r0
    58e8:	09 94       	ijmp

000058ea <__umulhisi3>:
    58ea:	a2 9f       	mul	r26, r18
    58ec:	b0 01       	movw	r22, r0
    58ee:	b3 9f       	mul	r27, r19
    58f0:	c0 01       	movw	r24, r0
    58f2:	a3 9f       	mul	r26, r19
    58f4:	70 0d       	add	r23, r0
    58f6:	81 1d       	adc	r24, r1
    58f8:	11 24       	eor	r1, r1
    58fa:	91 1d       	adc	r25, r1
    58fc:	b2 9f       	mul	r27, r18
    58fe:	70 0d       	add	r23, r0
    5900:	81 1d       	adc	r24, r1
    5902:	11 24       	eor	r1, r1
    5904:	91 1d       	adc	r25, r1
    5906:	08 95       	ret

00005908 <__usmulhisi3>:
    5908:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>

0000590c <__usmulhisi3_tail>:
    590c:	b7 ff       	sbrs	r27, 7
    590e:	08 95       	ret
    5910:	82 1b       	sub	r24, r18
    5912:	93 0b       	sbc	r25, r19
    5914:	08 95       	ret

00005916 <__muluhisi3>:
    5916:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__umulhisi3>
    591a:	a5 9f       	mul	r26, r21
    591c:	90 0d       	add	r25, r0
    591e:	b4 9f       	mul	r27, r20
    5920:	90 0d       	add	r25, r0
    5922:	a4 9f       	mul	r26, r20
    5924:	80 0d       	add	r24, r0
    5926:	91 1d       	adc	r25, r1
    5928:	11 24       	eor	r1, r1
    592a:	08 95       	ret

0000592c <__mulshisi3>:
    592c:	b7 ff       	sbrs	r27, 7
    592e:	0c 94 8b 2c 	jmp	0x5916	; 0x5916 <__muluhisi3>

00005932 <__mulohisi3>:
    5932:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__muluhisi3>
    5936:	82 1b       	sub	r24, r18
    5938:	93 0b       	sbc	r25, r19
    593a:	08 95       	ret

0000593c <malloc>:
    593c:	0f 93       	push	r16
    593e:	1f 93       	push	r17
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
    5944:	82 30       	cpi	r24, 0x02	; 2
    5946:	91 05       	cpc	r25, r1
    5948:	10 f4       	brcc	.+4      	; 0x594e <malloc+0x12>
    594a:	82 e0       	ldi	r24, 0x02	; 2
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <__flp>
    5952:	f0 91 cf 05 	lds	r31, 0x05CF	; 0x8005cf <__flp+0x1>
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	a0 e0       	ldi	r26, 0x00	; 0
    595c:	b0 e0       	ldi	r27, 0x00	; 0
    595e:	30 97       	sbiw	r30, 0x00	; 0
    5960:	19 f1       	breq	.+70     	; 0x59a8 <malloc+0x6c>
    5962:	40 81       	ld	r20, Z
    5964:	51 81       	ldd	r21, Z+1	; 0x01
    5966:	02 81       	ldd	r16, Z+2	; 0x02
    5968:	13 81       	ldd	r17, Z+3	; 0x03
    596a:	48 17       	cp	r20, r24
    596c:	59 07       	cpc	r21, r25
    596e:	c8 f0       	brcs	.+50     	; 0x59a2 <malloc+0x66>
    5970:	84 17       	cp	r24, r20
    5972:	95 07       	cpc	r25, r21
    5974:	69 f4       	brne	.+26     	; 0x5990 <malloc+0x54>
    5976:	10 97       	sbiw	r26, 0x00	; 0
    5978:	31 f0       	breq	.+12     	; 0x5986 <malloc+0x4a>
    597a:	12 96       	adiw	r26, 0x02	; 2
    597c:	0c 93       	st	X, r16
    597e:	12 97       	sbiw	r26, 0x02	; 2
    5980:	13 96       	adiw	r26, 0x03	; 3
    5982:	1c 93       	st	X, r17
    5984:	27 c0       	rjmp	.+78     	; 0x59d4 <malloc+0x98>
    5986:	00 93 ce 05 	sts	0x05CE, r16	; 0x8005ce <__flp>
    598a:	10 93 cf 05 	sts	0x05CF, r17	; 0x8005cf <__flp+0x1>
    598e:	22 c0       	rjmp	.+68     	; 0x59d4 <malloc+0x98>
    5990:	21 15       	cp	r18, r1
    5992:	31 05       	cpc	r19, r1
    5994:	19 f0       	breq	.+6      	; 0x599c <malloc+0x60>
    5996:	42 17       	cp	r20, r18
    5998:	53 07       	cpc	r21, r19
    599a:	18 f4       	brcc	.+6      	; 0x59a2 <malloc+0x66>
    599c:	9a 01       	movw	r18, r20
    599e:	bd 01       	movw	r22, r26
    59a0:	ef 01       	movw	r28, r30
    59a2:	df 01       	movw	r26, r30
    59a4:	f8 01       	movw	r30, r16
    59a6:	db cf       	rjmp	.-74     	; 0x595e <malloc+0x22>
    59a8:	21 15       	cp	r18, r1
    59aa:	31 05       	cpc	r19, r1
    59ac:	f9 f0       	breq	.+62     	; 0x59ec <malloc+0xb0>
    59ae:	28 1b       	sub	r18, r24
    59b0:	39 0b       	sbc	r19, r25
    59b2:	24 30       	cpi	r18, 0x04	; 4
    59b4:	31 05       	cpc	r19, r1
    59b6:	80 f4       	brcc	.+32     	; 0x59d8 <malloc+0x9c>
    59b8:	8a 81       	ldd	r24, Y+2	; 0x02
    59ba:	9b 81       	ldd	r25, Y+3	; 0x03
    59bc:	61 15       	cp	r22, r1
    59be:	71 05       	cpc	r23, r1
    59c0:	21 f0       	breq	.+8      	; 0x59ca <malloc+0x8e>
    59c2:	fb 01       	movw	r30, r22
    59c4:	93 83       	std	Z+3, r25	; 0x03
    59c6:	82 83       	std	Z+2, r24	; 0x02
    59c8:	04 c0       	rjmp	.+8      	; 0x59d2 <malloc+0x96>
    59ca:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <__flp+0x1>
    59ce:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <__flp>
    59d2:	fe 01       	movw	r30, r28
    59d4:	32 96       	adiw	r30, 0x02	; 2
    59d6:	44 c0       	rjmp	.+136    	; 0x5a60 <malloc+0x124>
    59d8:	fe 01       	movw	r30, r28
    59da:	e2 0f       	add	r30, r18
    59dc:	f3 1f       	adc	r31, r19
    59de:	81 93       	st	Z+, r24
    59e0:	91 93       	st	Z+, r25
    59e2:	22 50       	subi	r18, 0x02	; 2
    59e4:	31 09       	sbc	r19, r1
    59e6:	39 83       	std	Y+1, r19	; 0x01
    59e8:	28 83       	st	Y, r18
    59ea:	3a c0       	rjmp	.+116    	; 0x5a60 <malloc+0x124>
    59ec:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <__brkval>
    59f0:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <__brkval+0x1>
    59f4:	23 2b       	or	r18, r19
    59f6:	41 f4       	brne	.+16     	; 0x5a08 <malloc+0xcc>
    59f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    59fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5a00:	30 93 cd 05 	sts	0x05CD, r19	; 0x8005cd <__brkval+0x1>
    5a04:	20 93 cc 05 	sts	0x05CC, r18	; 0x8005cc <__brkval>
    5a08:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5a0c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5a10:	21 15       	cp	r18, r1
    5a12:	31 05       	cpc	r19, r1
    5a14:	41 f4       	brne	.+16     	; 0x5a26 <malloc+0xea>
    5a16:	2d b7       	in	r18, 0x3d	; 61
    5a18:	3e b7       	in	r19, 0x3e	; 62
    5a1a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5a1e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5a22:	24 1b       	sub	r18, r20
    5a24:	35 0b       	sbc	r19, r21
    5a26:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <__brkval>
    5a2a:	f0 91 cd 05 	lds	r31, 0x05CD	; 0x8005cd <__brkval+0x1>
    5a2e:	e2 17       	cp	r30, r18
    5a30:	f3 07       	cpc	r31, r19
    5a32:	a0 f4       	brcc	.+40     	; 0x5a5c <malloc+0x120>
    5a34:	2e 1b       	sub	r18, r30
    5a36:	3f 0b       	sbc	r19, r31
    5a38:	28 17       	cp	r18, r24
    5a3a:	39 07       	cpc	r19, r25
    5a3c:	78 f0       	brcs	.+30     	; 0x5a5c <malloc+0x120>
    5a3e:	ac 01       	movw	r20, r24
    5a40:	4e 5f       	subi	r20, 0xFE	; 254
    5a42:	5f 4f       	sbci	r21, 0xFF	; 255
    5a44:	24 17       	cp	r18, r20
    5a46:	35 07       	cpc	r19, r21
    5a48:	48 f0       	brcs	.+18     	; 0x5a5c <malloc+0x120>
    5a4a:	4e 0f       	add	r20, r30
    5a4c:	5f 1f       	adc	r21, r31
    5a4e:	50 93 cd 05 	sts	0x05CD, r21	; 0x8005cd <__brkval+0x1>
    5a52:	40 93 cc 05 	sts	0x05CC, r20	; 0x8005cc <__brkval>
    5a56:	81 93       	st	Z+, r24
    5a58:	91 93       	st	Z+, r25
    5a5a:	02 c0       	rjmp	.+4      	; 0x5a60 <malloc+0x124>
    5a5c:	e0 e0       	ldi	r30, 0x00	; 0
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	cf 01       	movw	r24, r30
    5a62:	df 91       	pop	r29
    5a64:	cf 91       	pop	r28
    5a66:	1f 91       	pop	r17
    5a68:	0f 91       	pop	r16
    5a6a:	08 95       	ret

00005a6c <free>:
    5a6c:	cf 93       	push	r28
    5a6e:	df 93       	push	r29
    5a70:	00 97       	sbiw	r24, 0x00	; 0
    5a72:	09 f4       	brne	.+2      	; 0x5a76 <free+0xa>
    5a74:	81 c0       	rjmp	.+258    	; 0x5b78 <free+0x10c>
    5a76:	fc 01       	movw	r30, r24
    5a78:	32 97       	sbiw	r30, 0x02	; 2
    5a7a:	13 82       	std	Z+3, r1	; 0x03
    5a7c:	12 82       	std	Z+2, r1	; 0x02
    5a7e:	a0 91 ce 05 	lds	r26, 0x05CE	; 0x8005ce <__flp>
    5a82:	b0 91 cf 05 	lds	r27, 0x05CF	; 0x8005cf <__flp+0x1>
    5a86:	10 97       	sbiw	r26, 0x00	; 0
    5a88:	81 f4       	brne	.+32     	; 0x5aaa <free+0x3e>
    5a8a:	20 81       	ld	r18, Z
    5a8c:	31 81       	ldd	r19, Z+1	; 0x01
    5a8e:	82 0f       	add	r24, r18
    5a90:	93 1f       	adc	r25, r19
    5a92:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <__brkval>
    5a96:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <__brkval+0x1>
    5a9a:	28 17       	cp	r18, r24
    5a9c:	39 07       	cpc	r19, r25
    5a9e:	51 f5       	brne	.+84     	; 0x5af4 <free+0x88>
    5aa0:	f0 93 cd 05 	sts	0x05CD, r31	; 0x8005cd <__brkval+0x1>
    5aa4:	e0 93 cc 05 	sts	0x05CC, r30	; 0x8005cc <__brkval>
    5aa8:	67 c0       	rjmp	.+206    	; 0x5b78 <free+0x10c>
    5aaa:	ed 01       	movw	r28, r26
    5aac:	20 e0       	ldi	r18, 0x00	; 0
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	ce 17       	cp	r28, r30
    5ab2:	df 07       	cpc	r29, r31
    5ab4:	40 f4       	brcc	.+16     	; 0x5ac6 <free+0x5a>
    5ab6:	4a 81       	ldd	r20, Y+2	; 0x02
    5ab8:	5b 81       	ldd	r21, Y+3	; 0x03
    5aba:	9e 01       	movw	r18, r28
    5abc:	41 15       	cp	r20, r1
    5abe:	51 05       	cpc	r21, r1
    5ac0:	f1 f0       	breq	.+60     	; 0x5afe <free+0x92>
    5ac2:	ea 01       	movw	r28, r20
    5ac4:	f5 cf       	rjmp	.-22     	; 0x5ab0 <free+0x44>
    5ac6:	d3 83       	std	Z+3, r29	; 0x03
    5ac8:	c2 83       	std	Z+2, r28	; 0x02
    5aca:	40 81       	ld	r20, Z
    5acc:	51 81       	ldd	r21, Z+1	; 0x01
    5ace:	84 0f       	add	r24, r20
    5ad0:	95 1f       	adc	r25, r21
    5ad2:	c8 17       	cp	r28, r24
    5ad4:	d9 07       	cpc	r29, r25
    5ad6:	59 f4       	brne	.+22     	; 0x5aee <free+0x82>
    5ad8:	88 81       	ld	r24, Y
    5ada:	99 81       	ldd	r25, Y+1	; 0x01
    5adc:	84 0f       	add	r24, r20
    5ade:	95 1f       	adc	r25, r21
    5ae0:	02 96       	adiw	r24, 0x02	; 2
    5ae2:	91 83       	std	Z+1, r25	; 0x01
    5ae4:	80 83       	st	Z, r24
    5ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    5aea:	93 83       	std	Z+3, r25	; 0x03
    5aec:	82 83       	std	Z+2, r24	; 0x02
    5aee:	21 15       	cp	r18, r1
    5af0:	31 05       	cpc	r19, r1
    5af2:	29 f4       	brne	.+10     	; 0x5afe <free+0x92>
    5af4:	f0 93 cf 05 	sts	0x05CF, r31	; 0x8005cf <__flp+0x1>
    5af8:	e0 93 ce 05 	sts	0x05CE, r30	; 0x8005ce <__flp>
    5afc:	3d c0       	rjmp	.+122    	; 0x5b78 <free+0x10c>
    5afe:	e9 01       	movw	r28, r18
    5b00:	fb 83       	std	Y+3, r31	; 0x03
    5b02:	ea 83       	std	Y+2, r30	; 0x02
    5b04:	49 91       	ld	r20, Y+
    5b06:	59 91       	ld	r21, Y+
    5b08:	c4 0f       	add	r28, r20
    5b0a:	d5 1f       	adc	r29, r21
    5b0c:	ec 17       	cp	r30, r28
    5b0e:	fd 07       	cpc	r31, r29
    5b10:	61 f4       	brne	.+24     	; 0x5b2a <free+0xbe>
    5b12:	80 81       	ld	r24, Z
    5b14:	91 81       	ldd	r25, Z+1	; 0x01
    5b16:	84 0f       	add	r24, r20
    5b18:	95 1f       	adc	r25, r21
    5b1a:	02 96       	adiw	r24, 0x02	; 2
    5b1c:	e9 01       	movw	r28, r18
    5b1e:	99 83       	std	Y+1, r25	; 0x01
    5b20:	88 83       	st	Y, r24
    5b22:	82 81       	ldd	r24, Z+2	; 0x02
    5b24:	93 81       	ldd	r25, Z+3	; 0x03
    5b26:	9b 83       	std	Y+3, r25	; 0x03
    5b28:	8a 83       	std	Y+2, r24	; 0x02
    5b2a:	e0 e0       	ldi	r30, 0x00	; 0
    5b2c:	f0 e0       	ldi	r31, 0x00	; 0
    5b2e:	12 96       	adiw	r26, 0x02	; 2
    5b30:	8d 91       	ld	r24, X+
    5b32:	9c 91       	ld	r25, X
    5b34:	13 97       	sbiw	r26, 0x03	; 3
    5b36:	00 97       	sbiw	r24, 0x00	; 0
    5b38:	19 f0       	breq	.+6      	; 0x5b40 <free+0xd4>
    5b3a:	fd 01       	movw	r30, r26
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	f7 cf       	rjmp	.-18     	; 0x5b2e <free+0xc2>
    5b40:	8d 91       	ld	r24, X+
    5b42:	9c 91       	ld	r25, X
    5b44:	11 97       	sbiw	r26, 0x01	; 1
    5b46:	9d 01       	movw	r18, r26
    5b48:	2e 5f       	subi	r18, 0xFE	; 254
    5b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b4c:	82 0f       	add	r24, r18
    5b4e:	93 1f       	adc	r25, r19
    5b50:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <__brkval>
    5b54:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <__brkval+0x1>
    5b58:	28 17       	cp	r18, r24
    5b5a:	39 07       	cpc	r19, r25
    5b5c:	69 f4       	brne	.+26     	; 0x5b78 <free+0x10c>
    5b5e:	30 97       	sbiw	r30, 0x00	; 0
    5b60:	29 f4       	brne	.+10     	; 0x5b6c <free+0x100>
    5b62:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <__flp+0x1>
    5b66:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <__flp>
    5b6a:	02 c0       	rjmp	.+4      	; 0x5b70 <free+0x104>
    5b6c:	13 82       	std	Z+3, r1	; 0x03
    5b6e:	12 82       	std	Z+2, r1	; 0x02
    5b70:	b0 93 cd 05 	sts	0x05CD, r27	; 0x8005cd <__brkval+0x1>
    5b74:	a0 93 cc 05 	sts	0x05CC, r26	; 0x8005cc <__brkval>
    5b78:	df 91       	pop	r29
    5b7a:	cf 91       	pop	r28
    5b7c:	08 95       	ret

00005b7e <atoi>:
    5b7e:	fc 01       	movw	r30, r24
    5b80:	88 27       	eor	r24, r24
    5b82:	99 27       	eor	r25, r25
    5b84:	e8 94       	clt
    5b86:	21 91       	ld	r18, Z+
    5b88:	20 32       	cpi	r18, 0x20	; 32
    5b8a:	e9 f3       	breq	.-6      	; 0x5b86 <atoi+0x8>
    5b8c:	29 30       	cpi	r18, 0x09	; 9
    5b8e:	10 f0       	brcs	.+4      	; 0x5b94 <atoi+0x16>
    5b90:	2e 30       	cpi	r18, 0x0E	; 14
    5b92:	c8 f3       	brcs	.-14     	; 0x5b86 <atoi+0x8>
    5b94:	2b 32       	cpi	r18, 0x2B	; 43
    5b96:	41 f0       	breq	.+16     	; 0x5ba8 <atoi+0x2a>
    5b98:	2d 32       	cpi	r18, 0x2D	; 45
    5b9a:	39 f4       	brne	.+14     	; 0x5baa <atoi+0x2c>
    5b9c:	68 94       	set
    5b9e:	04 c0       	rjmp	.+8      	; 0x5ba8 <atoi+0x2a>
    5ba0:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <__mulhi_const_10>
    5ba4:	82 0f       	add	r24, r18
    5ba6:	91 1d       	adc	r25, r1
    5ba8:	21 91       	ld	r18, Z+
    5baa:	20 53       	subi	r18, 0x30	; 48
    5bac:	2a 30       	cpi	r18, 0x0A	; 10
    5bae:	c0 f3       	brcs	.-16     	; 0x5ba0 <atoi+0x22>
    5bb0:	1e f4       	brtc	.+6      	; 0x5bb8 <atoi+0x3a>
    5bb2:	90 95       	com	r25
    5bb4:	81 95       	neg	r24
    5bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb8:	08 95       	ret

00005bba <atol>:
    5bba:	1f 93       	push	r17
    5bbc:	fc 01       	movw	r30, r24
    5bbe:	99 27       	eor	r25, r25
    5bc0:	88 27       	eor	r24, r24
    5bc2:	bc 01       	movw	r22, r24
    5bc4:	e8 94       	clt
    5bc6:	11 91       	ld	r17, Z+
    5bc8:	10 32       	cpi	r17, 0x20	; 32
    5bca:	e9 f3       	breq	.-6      	; 0x5bc6 <atol+0xc>
    5bcc:	19 30       	cpi	r17, 0x09	; 9
    5bce:	10 f0       	brcs	.+4      	; 0x5bd4 <atol+0x1a>
    5bd0:	1e 30       	cpi	r17, 0x0E	; 14
    5bd2:	c8 f3       	brcs	.-14     	; 0x5bc6 <atol+0xc>
    5bd4:	1b 32       	cpi	r17, 0x2B	; 43
    5bd6:	51 f0       	breq	.+20     	; 0x5bec <atol+0x32>
    5bd8:	1d 32       	cpi	r17, 0x2D	; 45
    5bda:	49 f4       	brne	.+18     	; 0x5bee <atol+0x34>
    5bdc:	68 94       	set
    5bde:	06 c0       	rjmp	.+12     	; 0x5bec <atol+0x32>
    5be0:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__mulsi_const_10>
    5be4:	61 0f       	add	r22, r17
    5be6:	71 1d       	adc	r23, r1
    5be8:	81 1d       	adc	r24, r1
    5bea:	91 1d       	adc	r25, r1
    5bec:	11 91       	ld	r17, Z+
    5bee:	10 53       	subi	r17, 0x30	; 48
    5bf0:	1a 30       	cpi	r17, 0x0A	; 10
    5bf2:	b0 f3       	brcs	.-20     	; 0x5be0 <atol+0x26>
    5bf4:	3e f4       	brtc	.+14     	; 0x5c04 <atol+0x4a>
    5bf6:	90 95       	com	r25
    5bf8:	80 95       	com	r24
    5bfa:	70 95       	com	r23
    5bfc:	61 95       	neg	r22
    5bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5c00:	8f 4f       	sbci	r24, 0xFF	; 255
    5c02:	9f 4f       	sbci	r25, 0xFF	; 255
    5c04:	1f 91       	pop	r17
    5c06:	08 95       	ret

00005c08 <toupper>:
    5c08:	91 11       	cpse	r25, r1
    5c0a:	08 95       	ret
    5c0c:	81 56       	subi	r24, 0x61	; 97
    5c0e:	8a 51       	subi	r24, 0x1A	; 26
    5c10:	08 f4       	brcc	.+2      	; 0x5c14 <toupper+0xc>
    5c12:	80 52       	subi	r24, 0x20	; 32
    5c14:	85 58       	subi	r24, 0x85	; 133
    5c16:	08 95       	ret

00005c18 <strcat>:
    5c18:	fb 01       	movw	r30, r22
    5c1a:	dc 01       	movw	r26, r24
    5c1c:	0d 90       	ld	r0, X+
    5c1e:	00 20       	and	r0, r0
    5c20:	e9 f7       	brne	.-6      	; 0x5c1c <strcat+0x4>
    5c22:	11 97       	sbiw	r26, 0x01	; 1
    5c24:	01 90       	ld	r0, Z+
    5c26:	0d 92       	st	X+, r0
    5c28:	00 20       	and	r0, r0
    5c2a:	e1 f7       	brne	.-8      	; 0x5c24 <strcat+0xc>
    5c2c:	08 95       	ret

00005c2e <strcpy>:
    5c2e:	fb 01       	movw	r30, r22
    5c30:	dc 01       	movw	r26, r24
    5c32:	01 90       	ld	r0, Z+
    5c34:	0d 92       	st	X+, r0
    5c36:	00 20       	and	r0, r0
    5c38:	e1 f7       	brne	.-8      	; 0x5c32 <strcpy+0x4>
    5c3a:	08 95       	ret

00005c3c <strncpy>:
    5c3c:	fb 01       	movw	r30, r22
    5c3e:	dc 01       	movw	r26, r24
    5c40:	41 50       	subi	r20, 0x01	; 1
    5c42:	50 40       	sbci	r21, 0x00	; 0
    5c44:	48 f0       	brcs	.+18     	; 0x5c58 <strncpy+0x1c>
    5c46:	01 90       	ld	r0, Z+
    5c48:	0d 92       	st	X+, r0
    5c4a:	00 20       	and	r0, r0
    5c4c:	c9 f7       	brne	.-14     	; 0x5c40 <strncpy+0x4>
    5c4e:	01 c0       	rjmp	.+2      	; 0x5c52 <strncpy+0x16>
    5c50:	1d 92       	st	X+, r1
    5c52:	41 50       	subi	r20, 0x01	; 1
    5c54:	50 40       	sbci	r21, 0x00	; 0
    5c56:	e0 f7       	brcc	.-8      	; 0x5c50 <strncpy+0x14>
    5c58:	08 95       	ret

00005c5a <__mulsi_const_10>:
    5c5a:	59 2f       	mov	r21, r25
    5c5c:	48 2f       	mov	r20, r24
    5c5e:	37 2f       	mov	r19, r23
    5c60:	26 2f       	mov	r18, r22
    5c62:	66 0f       	add	r22, r22
    5c64:	77 1f       	adc	r23, r23
    5c66:	88 1f       	adc	r24, r24
    5c68:	99 1f       	adc	r25, r25
    5c6a:	66 0f       	add	r22, r22
    5c6c:	77 1f       	adc	r23, r23
    5c6e:	88 1f       	adc	r24, r24
    5c70:	99 1f       	adc	r25, r25
    5c72:	62 0f       	add	r22, r18
    5c74:	73 1f       	adc	r23, r19
    5c76:	84 1f       	adc	r24, r20
    5c78:	95 1f       	adc	r25, r21
    5c7a:	66 0f       	add	r22, r22
    5c7c:	77 1f       	adc	r23, r23
    5c7e:	88 1f       	adc	r24, r24
    5c80:	99 1f       	adc	r25, r25
    5c82:	08 95       	ret

00005c84 <__mulhi_const_10>:
    5c84:	7a e0       	ldi	r23, 0x0A	; 10
    5c86:	97 9f       	mul	r25, r23
    5c88:	90 2d       	mov	r25, r0
    5c8a:	87 9f       	mul	r24, r23
    5c8c:	80 2d       	mov	r24, r0
    5c8e:	91 0d       	add	r25, r1
    5c90:	11 24       	eor	r1, r1
    5c92:	08 95       	ret

00005c94 <sprintf>:
    5c94:	ae e0       	ldi	r26, 0x0E	; 14
    5c96:	b0 e0       	ldi	r27, 0x00	; 0
    5c98:	e0 e5       	ldi	r30, 0x50	; 80
    5c9a:	fe e2       	ldi	r31, 0x2E	; 46
    5c9c:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__prologue_saves__+0x1c>
    5ca0:	0d 89       	ldd	r16, Y+21	; 0x15
    5ca2:	1e 89       	ldd	r17, Y+22	; 0x16
    5ca4:	86 e0       	ldi	r24, 0x06	; 6
    5ca6:	8c 83       	std	Y+4, r24	; 0x04
    5ca8:	1a 83       	std	Y+2, r17	; 0x02
    5caa:	09 83       	std	Y+1, r16	; 0x01
    5cac:	8f ef       	ldi	r24, 0xFF	; 255
    5cae:	9f e7       	ldi	r25, 0x7F	; 127
    5cb0:	9e 83       	std	Y+6, r25	; 0x06
    5cb2:	8d 83       	std	Y+5, r24	; 0x05
    5cb4:	ae 01       	movw	r20, r28
    5cb6:	47 5e       	subi	r20, 0xE7	; 231
    5cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cba:	6f 89       	ldd	r22, Y+23	; 0x17
    5cbc:	78 8d       	ldd	r23, Y+24	; 0x18
    5cbe:	ce 01       	movw	r24, r28
    5cc0:	01 96       	adiw	r24, 0x01	; 1
    5cc2:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <vfprintf>
    5cc6:	ef 81       	ldd	r30, Y+7	; 0x07
    5cc8:	f8 85       	ldd	r31, Y+8	; 0x08
    5cca:	e0 0f       	add	r30, r16
    5ccc:	f1 1f       	adc	r31, r17
    5cce:	10 82       	st	Z, r1
    5cd0:	2e 96       	adiw	r28, 0x0e	; 14
    5cd2:	e4 e0       	ldi	r30, 0x04	; 4
    5cd4:	0c 94 6f 31 	jmp	0x62de	; 0x62de <__epilogue_restores__+0x1c>

00005cd8 <vfprintf>:
    5cd8:	ab e0       	ldi	r26, 0x0B	; 11
    5cda:	b0 e0       	ldi	r27, 0x00	; 0
    5cdc:	e2 e7       	ldi	r30, 0x72	; 114
    5cde:	fe e2       	ldi	r31, 0x2E	; 46
    5ce0:	0c 94 45 31 	jmp	0x628a	; 0x628a <__prologue_saves__>
    5ce4:	6c 01       	movw	r12, r24
    5ce6:	7b 01       	movw	r14, r22
    5ce8:	8a 01       	movw	r16, r20
    5cea:	fc 01       	movw	r30, r24
    5cec:	17 82       	std	Z+7, r1	; 0x07
    5cee:	16 82       	std	Z+6, r1	; 0x06
    5cf0:	83 81       	ldd	r24, Z+3	; 0x03
    5cf2:	81 ff       	sbrs	r24, 1
    5cf4:	cc c1       	rjmp	.+920    	; 0x608e <vfprintf+0x3b6>
    5cf6:	ce 01       	movw	r24, r28
    5cf8:	01 96       	adiw	r24, 0x01	; 1
    5cfa:	3c 01       	movw	r6, r24
    5cfc:	f6 01       	movw	r30, r12
    5cfe:	93 81       	ldd	r25, Z+3	; 0x03
    5d00:	f7 01       	movw	r30, r14
    5d02:	93 fd       	sbrc	r25, 3
    5d04:	85 91       	lpm	r24, Z+
    5d06:	93 ff       	sbrs	r25, 3
    5d08:	81 91       	ld	r24, Z+
    5d0a:	7f 01       	movw	r14, r30
    5d0c:	88 23       	and	r24, r24
    5d0e:	09 f4       	brne	.+2      	; 0x5d12 <vfprintf+0x3a>
    5d10:	ba c1       	rjmp	.+884    	; 0x6086 <vfprintf+0x3ae>
    5d12:	85 32       	cpi	r24, 0x25	; 37
    5d14:	39 f4       	brne	.+14     	; 0x5d24 <vfprintf+0x4c>
    5d16:	93 fd       	sbrc	r25, 3
    5d18:	85 91       	lpm	r24, Z+
    5d1a:	93 ff       	sbrs	r25, 3
    5d1c:	81 91       	ld	r24, Z+
    5d1e:	7f 01       	movw	r14, r30
    5d20:	85 32       	cpi	r24, 0x25	; 37
    5d22:	29 f4       	brne	.+10     	; 0x5d2e <vfprintf+0x56>
    5d24:	b6 01       	movw	r22, r12
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    5d2c:	e7 cf       	rjmp	.-50     	; 0x5cfc <vfprintf+0x24>
    5d2e:	91 2c       	mov	r9, r1
    5d30:	21 2c       	mov	r2, r1
    5d32:	31 2c       	mov	r3, r1
    5d34:	ff e1       	ldi	r31, 0x1F	; 31
    5d36:	f3 15       	cp	r31, r3
    5d38:	d8 f0       	brcs	.+54     	; 0x5d70 <vfprintf+0x98>
    5d3a:	8b 32       	cpi	r24, 0x2B	; 43
    5d3c:	79 f0       	breq	.+30     	; 0x5d5c <vfprintf+0x84>
    5d3e:	38 f4       	brcc	.+14     	; 0x5d4e <vfprintf+0x76>
    5d40:	80 32       	cpi	r24, 0x20	; 32
    5d42:	79 f0       	breq	.+30     	; 0x5d62 <vfprintf+0x8a>
    5d44:	83 32       	cpi	r24, 0x23	; 35
    5d46:	a1 f4       	brne	.+40     	; 0x5d70 <vfprintf+0x98>
    5d48:	23 2d       	mov	r18, r3
    5d4a:	20 61       	ori	r18, 0x10	; 16
    5d4c:	1d c0       	rjmp	.+58     	; 0x5d88 <vfprintf+0xb0>
    5d4e:	8d 32       	cpi	r24, 0x2D	; 45
    5d50:	61 f0       	breq	.+24     	; 0x5d6a <vfprintf+0x92>
    5d52:	80 33       	cpi	r24, 0x30	; 48
    5d54:	69 f4       	brne	.+26     	; 0x5d70 <vfprintf+0x98>
    5d56:	23 2d       	mov	r18, r3
    5d58:	21 60       	ori	r18, 0x01	; 1
    5d5a:	16 c0       	rjmp	.+44     	; 0x5d88 <vfprintf+0xb0>
    5d5c:	83 2d       	mov	r24, r3
    5d5e:	82 60       	ori	r24, 0x02	; 2
    5d60:	38 2e       	mov	r3, r24
    5d62:	e3 2d       	mov	r30, r3
    5d64:	e4 60       	ori	r30, 0x04	; 4
    5d66:	3e 2e       	mov	r3, r30
    5d68:	2a c0       	rjmp	.+84     	; 0x5dbe <vfprintf+0xe6>
    5d6a:	f3 2d       	mov	r31, r3
    5d6c:	f8 60       	ori	r31, 0x08	; 8
    5d6e:	1d c0       	rjmp	.+58     	; 0x5daa <vfprintf+0xd2>
    5d70:	37 fc       	sbrc	r3, 7
    5d72:	2d c0       	rjmp	.+90     	; 0x5dce <vfprintf+0xf6>
    5d74:	20 ed       	ldi	r18, 0xD0	; 208
    5d76:	28 0f       	add	r18, r24
    5d78:	2a 30       	cpi	r18, 0x0A	; 10
    5d7a:	40 f0       	brcs	.+16     	; 0x5d8c <vfprintf+0xb4>
    5d7c:	8e 32       	cpi	r24, 0x2E	; 46
    5d7e:	b9 f4       	brne	.+46     	; 0x5dae <vfprintf+0xd6>
    5d80:	36 fc       	sbrc	r3, 6
    5d82:	81 c1       	rjmp	.+770    	; 0x6086 <vfprintf+0x3ae>
    5d84:	23 2d       	mov	r18, r3
    5d86:	20 64       	ori	r18, 0x40	; 64
    5d88:	32 2e       	mov	r3, r18
    5d8a:	19 c0       	rjmp	.+50     	; 0x5dbe <vfprintf+0xe6>
    5d8c:	36 fe       	sbrs	r3, 6
    5d8e:	06 c0       	rjmp	.+12     	; 0x5d9c <vfprintf+0xc4>
    5d90:	8a e0       	ldi	r24, 0x0A	; 10
    5d92:	98 9e       	mul	r9, r24
    5d94:	20 0d       	add	r18, r0
    5d96:	11 24       	eor	r1, r1
    5d98:	92 2e       	mov	r9, r18
    5d9a:	11 c0       	rjmp	.+34     	; 0x5dbe <vfprintf+0xe6>
    5d9c:	ea e0       	ldi	r30, 0x0A	; 10
    5d9e:	2e 9e       	mul	r2, r30
    5da0:	20 0d       	add	r18, r0
    5da2:	11 24       	eor	r1, r1
    5da4:	22 2e       	mov	r2, r18
    5da6:	f3 2d       	mov	r31, r3
    5da8:	f0 62       	ori	r31, 0x20	; 32
    5daa:	3f 2e       	mov	r3, r31
    5dac:	08 c0       	rjmp	.+16     	; 0x5dbe <vfprintf+0xe6>
    5dae:	8c 36       	cpi	r24, 0x6C	; 108
    5db0:	21 f4       	brne	.+8      	; 0x5dba <vfprintf+0xe2>
    5db2:	83 2d       	mov	r24, r3
    5db4:	80 68       	ori	r24, 0x80	; 128
    5db6:	38 2e       	mov	r3, r24
    5db8:	02 c0       	rjmp	.+4      	; 0x5dbe <vfprintf+0xe6>
    5dba:	88 36       	cpi	r24, 0x68	; 104
    5dbc:	41 f4       	brne	.+16     	; 0x5dce <vfprintf+0xf6>
    5dbe:	f7 01       	movw	r30, r14
    5dc0:	93 fd       	sbrc	r25, 3
    5dc2:	85 91       	lpm	r24, Z+
    5dc4:	93 ff       	sbrs	r25, 3
    5dc6:	81 91       	ld	r24, Z+
    5dc8:	7f 01       	movw	r14, r30
    5dca:	81 11       	cpse	r24, r1
    5dcc:	b3 cf       	rjmp	.-154    	; 0x5d34 <vfprintf+0x5c>
    5dce:	98 2f       	mov	r25, r24
    5dd0:	9f 7d       	andi	r25, 0xDF	; 223
    5dd2:	95 54       	subi	r25, 0x45	; 69
    5dd4:	93 30       	cpi	r25, 0x03	; 3
    5dd6:	28 f4       	brcc	.+10     	; 0x5de2 <vfprintf+0x10a>
    5dd8:	0c 5f       	subi	r16, 0xFC	; 252
    5dda:	1f 4f       	sbci	r17, 0xFF	; 255
    5ddc:	9f e3       	ldi	r25, 0x3F	; 63
    5dde:	99 83       	std	Y+1, r25	; 0x01
    5de0:	0d c0       	rjmp	.+26     	; 0x5dfc <vfprintf+0x124>
    5de2:	83 36       	cpi	r24, 0x63	; 99
    5de4:	31 f0       	breq	.+12     	; 0x5df2 <vfprintf+0x11a>
    5de6:	83 37       	cpi	r24, 0x73	; 115
    5de8:	71 f0       	breq	.+28     	; 0x5e06 <vfprintf+0x12e>
    5dea:	83 35       	cpi	r24, 0x53	; 83
    5dec:	09 f0       	breq	.+2      	; 0x5df0 <vfprintf+0x118>
    5dee:	59 c0       	rjmp	.+178    	; 0x5ea2 <vfprintf+0x1ca>
    5df0:	21 c0       	rjmp	.+66     	; 0x5e34 <vfprintf+0x15c>
    5df2:	f8 01       	movw	r30, r16
    5df4:	80 81       	ld	r24, Z
    5df6:	89 83       	std	Y+1, r24	; 0x01
    5df8:	0e 5f       	subi	r16, 0xFE	; 254
    5dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    5dfc:	88 24       	eor	r8, r8
    5dfe:	83 94       	inc	r8
    5e00:	91 2c       	mov	r9, r1
    5e02:	53 01       	movw	r10, r6
    5e04:	13 c0       	rjmp	.+38     	; 0x5e2c <vfprintf+0x154>
    5e06:	28 01       	movw	r4, r16
    5e08:	f2 e0       	ldi	r31, 0x02	; 2
    5e0a:	4f 0e       	add	r4, r31
    5e0c:	51 1c       	adc	r5, r1
    5e0e:	f8 01       	movw	r30, r16
    5e10:	a0 80       	ld	r10, Z
    5e12:	b1 80       	ldd	r11, Z+1	; 0x01
    5e14:	36 fe       	sbrs	r3, 6
    5e16:	03 c0       	rjmp	.+6      	; 0x5e1e <vfprintf+0x146>
    5e18:	69 2d       	mov	r22, r9
    5e1a:	70 e0       	ldi	r23, 0x00	; 0
    5e1c:	02 c0       	rjmp	.+4      	; 0x5e22 <vfprintf+0x14a>
    5e1e:	6f ef       	ldi	r22, 0xFF	; 255
    5e20:	7f ef       	ldi	r23, 0xFF	; 255
    5e22:	c5 01       	movw	r24, r10
    5e24:	0e 94 58 30 	call	0x60b0	; 0x60b0 <strnlen>
    5e28:	4c 01       	movw	r8, r24
    5e2a:	82 01       	movw	r16, r4
    5e2c:	f3 2d       	mov	r31, r3
    5e2e:	ff 77       	andi	r31, 0x7F	; 127
    5e30:	3f 2e       	mov	r3, r31
    5e32:	16 c0       	rjmp	.+44     	; 0x5e60 <vfprintf+0x188>
    5e34:	28 01       	movw	r4, r16
    5e36:	22 e0       	ldi	r18, 0x02	; 2
    5e38:	42 0e       	add	r4, r18
    5e3a:	51 1c       	adc	r5, r1
    5e3c:	f8 01       	movw	r30, r16
    5e3e:	a0 80       	ld	r10, Z
    5e40:	b1 80       	ldd	r11, Z+1	; 0x01
    5e42:	36 fe       	sbrs	r3, 6
    5e44:	03 c0       	rjmp	.+6      	; 0x5e4c <vfprintf+0x174>
    5e46:	69 2d       	mov	r22, r9
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	02 c0       	rjmp	.+4      	; 0x5e50 <vfprintf+0x178>
    5e4c:	6f ef       	ldi	r22, 0xFF	; 255
    5e4e:	7f ef       	ldi	r23, 0xFF	; 255
    5e50:	c5 01       	movw	r24, r10
    5e52:	0e 94 4d 30 	call	0x609a	; 0x609a <strnlen_P>
    5e56:	4c 01       	movw	r8, r24
    5e58:	f3 2d       	mov	r31, r3
    5e5a:	f0 68       	ori	r31, 0x80	; 128
    5e5c:	3f 2e       	mov	r3, r31
    5e5e:	82 01       	movw	r16, r4
    5e60:	33 fc       	sbrc	r3, 3
    5e62:	1b c0       	rjmp	.+54     	; 0x5e9a <vfprintf+0x1c2>
    5e64:	82 2d       	mov	r24, r2
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	88 16       	cp	r8, r24
    5e6a:	99 06       	cpc	r9, r25
    5e6c:	b0 f4       	brcc	.+44     	; 0x5e9a <vfprintf+0x1c2>
    5e6e:	b6 01       	movw	r22, r12
    5e70:	80 e2       	ldi	r24, 0x20	; 32
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    5e78:	2a 94       	dec	r2
    5e7a:	f4 cf       	rjmp	.-24     	; 0x5e64 <vfprintf+0x18c>
    5e7c:	f5 01       	movw	r30, r10
    5e7e:	37 fc       	sbrc	r3, 7
    5e80:	85 91       	lpm	r24, Z+
    5e82:	37 fe       	sbrs	r3, 7
    5e84:	81 91       	ld	r24, Z+
    5e86:	5f 01       	movw	r10, r30
    5e88:	b6 01       	movw	r22, r12
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    5e90:	21 10       	cpse	r2, r1
    5e92:	2a 94       	dec	r2
    5e94:	21 e0       	ldi	r18, 0x01	; 1
    5e96:	82 1a       	sub	r8, r18
    5e98:	91 08       	sbc	r9, r1
    5e9a:	81 14       	cp	r8, r1
    5e9c:	91 04       	cpc	r9, r1
    5e9e:	71 f7       	brne	.-36     	; 0x5e7c <vfprintf+0x1a4>
    5ea0:	e8 c0       	rjmp	.+464    	; 0x6072 <vfprintf+0x39a>
    5ea2:	84 36       	cpi	r24, 0x64	; 100
    5ea4:	11 f0       	breq	.+4      	; 0x5eaa <vfprintf+0x1d2>
    5ea6:	89 36       	cpi	r24, 0x69	; 105
    5ea8:	41 f5       	brne	.+80     	; 0x5efa <vfprintf+0x222>
    5eaa:	f8 01       	movw	r30, r16
    5eac:	37 fe       	sbrs	r3, 7
    5eae:	07 c0       	rjmp	.+14     	; 0x5ebe <vfprintf+0x1e6>
    5eb0:	60 81       	ld	r22, Z
    5eb2:	71 81       	ldd	r23, Z+1	; 0x01
    5eb4:	82 81       	ldd	r24, Z+2	; 0x02
    5eb6:	93 81       	ldd	r25, Z+3	; 0x03
    5eb8:	0c 5f       	subi	r16, 0xFC	; 252
    5eba:	1f 4f       	sbci	r17, 0xFF	; 255
    5ebc:	08 c0       	rjmp	.+16     	; 0x5ece <vfprintf+0x1f6>
    5ebe:	60 81       	ld	r22, Z
    5ec0:	71 81       	ldd	r23, Z+1	; 0x01
    5ec2:	07 2e       	mov	r0, r23
    5ec4:	00 0c       	add	r0, r0
    5ec6:	88 0b       	sbc	r24, r24
    5ec8:	99 0b       	sbc	r25, r25
    5eca:	0e 5f       	subi	r16, 0xFE	; 254
    5ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ece:	f3 2d       	mov	r31, r3
    5ed0:	ff 76       	andi	r31, 0x6F	; 111
    5ed2:	3f 2e       	mov	r3, r31
    5ed4:	97 ff       	sbrs	r25, 7
    5ed6:	09 c0       	rjmp	.+18     	; 0x5eea <vfprintf+0x212>
    5ed8:	90 95       	com	r25
    5eda:	80 95       	com	r24
    5edc:	70 95       	com	r23
    5ede:	61 95       	neg	r22
    5ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee6:	f0 68       	ori	r31, 0x80	; 128
    5ee8:	3f 2e       	mov	r3, r31
    5eea:	2a e0       	ldi	r18, 0x0A	; 10
    5eec:	30 e0       	ldi	r19, 0x00	; 0
    5eee:	a3 01       	movw	r20, r6
    5ef0:	0e 94 9f 30 	call	0x613e	; 0x613e <__ultoa_invert>
    5ef4:	88 2e       	mov	r8, r24
    5ef6:	86 18       	sub	r8, r6
    5ef8:	45 c0       	rjmp	.+138    	; 0x5f84 <vfprintf+0x2ac>
    5efa:	85 37       	cpi	r24, 0x75	; 117
    5efc:	31 f4       	brne	.+12     	; 0x5f0a <vfprintf+0x232>
    5efe:	23 2d       	mov	r18, r3
    5f00:	2f 7e       	andi	r18, 0xEF	; 239
    5f02:	b2 2e       	mov	r11, r18
    5f04:	2a e0       	ldi	r18, 0x0A	; 10
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	25 c0       	rjmp	.+74     	; 0x5f54 <vfprintf+0x27c>
    5f0a:	93 2d       	mov	r25, r3
    5f0c:	99 7f       	andi	r25, 0xF9	; 249
    5f0e:	b9 2e       	mov	r11, r25
    5f10:	8f 36       	cpi	r24, 0x6F	; 111
    5f12:	c1 f0       	breq	.+48     	; 0x5f44 <vfprintf+0x26c>
    5f14:	18 f4       	brcc	.+6      	; 0x5f1c <vfprintf+0x244>
    5f16:	88 35       	cpi	r24, 0x58	; 88
    5f18:	79 f0       	breq	.+30     	; 0x5f38 <vfprintf+0x260>
    5f1a:	b5 c0       	rjmp	.+362    	; 0x6086 <vfprintf+0x3ae>
    5f1c:	80 37       	cpi	r24, 0x70	; 112
    5f1e:	19 f0       	breq	.+6      	; 0x5f26 <vfprintf+0x24e>
    5f20:	88 37       	cpi	r24, 0x78	; 120
    5f22:	21 f0       	breq	.+8      	; 0x5f2c <vfprintf+0x254>
    5f24:	b0 c0       	rjmp	.+352    	; 0x6086 <vfprintf+0x3ae>
    5f26:	e9 2f       	mov	r30, r25
    5f28:	e0 61       	ori	r30, 0x10	; 16
    5f2a:	be 2e       	mov	r11, r30
    5f2c:	b4 fe       	sbrs	r11, 4
    5f2e:	0d c0       	rjmp	.+26     	; 0x5f4a <vfprintf+0x272>
    5f30:	fb 2d       	mov	r31, r11
    5f32:	f4 60       	ori	r31, 0x04	; 4
    5f34:	bf 2e       	mov	r11, r31
    5f36:	09 c0       	rjmp	.+18     	; 0x5f4a <vfprintf+0x272>
    5f38:	34 fe       	sbrs	r3, 4
    5f3a:	0a c0       	rjmp	.+20     	; 0x5f50 <vfprintf+0x278>
    5f3c:	29 2f       	mov	r18, r25
    5f3e:	26 60       	ori	r18, 0x06	; 6
    5f40:	b2 2e       	mov	r11, r18
    5f42:	06 c0       	rjmp	.+12     	; 0x5f50 <vfprintf+0x278>
    5f44:	28 e0       	ldi	r18, 0x08	; 8
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	05 c0       	rjmp	.+10     	; 0x5f54 <vfprintf+0x27c>
    5f4a:	20 e1       	ldi	r18, 0x10	; 16
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	02 c0       	rjmp	.+4      	; 0x5f54 <vfprintf+0x27c>
    5f50:	20 e1       	ldi	r18, 0x10	; 16
    5f52:	32 e0       	ldi	r19, 0x02	; 2
    5f54:	f8 01       	movw	r30, r16
    5f56:	b7 fe       	sbrs	r11, 7
    5f58:	07 c0       	rjmp	.+14     	; 0x5f68 <vfprintf+0x290>
    5f5a:	60 81       	ld	r22, Z
    5f5c:	71 81       	ldd	r23, Z+1	; 0x01
    5f5e:	82 81       	ldd	r24, Z+2	; 0x02
    5f60:	93 81       	ldd	r25, Z+3	; 0x03
    5f62:	0c 5f       	subi	r16, 0xFC	; 252
    5f64:	1f 4f       	sbci	r17, 0xFF	; 255
    5f66:	06 c0       	rjmp	.+12     	; 0x5f74 <vfprintf+0x29c>
    5f68:	60 81       	ld	r22, Z
    5f6a:	71 81       	ldd	r23, Z+1	; 0x01
    5f6c:	80 e0       	ldi	r24, 0x00	; 0
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	0e 5f       	subi	r16, 0xFE	; 254
    5f72:	1f 4f       	sbci	r17, 0xFF	; 255
    5f74:	a3 01       	movw	r20, r6
    5f76:	0e 94 9f 30 	call	0x613e	; 0x613e <__ultoa_invert>
    5f7a:	88 2e       	mov	r8, r24
    5f7c:	86 18       	sub	r8, r6
    5f7e:	fb 2d       	mov	r31, r11
    5f80:	ff 77       	andi	r31, 0x7F	; 127
    5f82:	3f 2e       	mov	r3, r31
    5f84:	36 fe       	sbrs	r3, 6
    5f86:	0d c0       	rjmp	.+26     	; 0x5fa2 <vfprintf+0x2ca>
    5f88:	23 2d       	mov	r18, r3
    5f8a:	2e 7f       	andi	r18, 0xFE	; 254
    5f8c:	a2 2e       	mov	r10, r18
    5f8e:	89 14       	cp	r8, r9
    5f90:	58 f4       	brcc	.+22     	; 0x5fa8 <vfprintf+0x2d0>
    5f92:	34 fe       	sbrs	r3, 4
    5f94:	0b c0       	rjmp	.+22     	; 0x5fac <vfprintf+0x2d4>
    5f96:	32 fc       	sbrc	r3, 2
    5f98:	09 c0       	rjmp	.+18     	; 0x5fac <vfprintf+0x2d4>
    5f9a:	83 2d       	mov	r24, r3
    5f9c:	8e 7e       	andi	r24, 0xEE	; 238
    5f9e:	a8 2e       	mov	r10, r24
    5fa0:	05 c0       	rjmp	.+10     	; 0x5fac <vfprintf+0x2d4>
    5fa2:	b8 2c       	mov	r11, r8
    5fa4:	a3 2c       	mov	r10, r3
    5fa6:	03 c0       	rjmp	.+6      	; 0x5fae <vfprintf+0x2d6>
    5fa8:	b8 2c       	mov	r11, r8
    5faa:	01 c0       	rjmp	.+2      	; 0x5fae <vfprintf+0x2d6>
    5fac:	b9 2c       	mov	r11, r9
    5fae:	a4 fe       	sbrs	r10, 4
    5fb0:	0f c0       	rjmp	.+30     	; 0x5fd0 <vfprintf+0x2f8>
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	e8 0d       	add	r30, r8
    5fb6:	f1 1d       	adc	r31, r1
    5fb8:	80 81       	ld	r24, Z
    5fba:	80 33       	cpi	r24, 0x30	; 48
    5fbc:	21 f4       	brne	.+8      	; 0x5fc6 <vfprintf+0x2ee>
    5fbe:	9a 2d       	mov	r25, r10
    5fc0:	99 7e       	andi	r25, 0xE9	; 233
    5fc2:	a9 2e       	mov	r10, r25
    5fc4:	09 c0       	rjmp	.+18     	; 0x5fd8 <vfprintf+0x300>
    5fc6:	a2 fe       	sbrs	r10, 2
    5fc8:	06 c0       	rjmp	.+12     	; 0x5fd6 <vfprintf+0x2fe>
    5fca:	b3 94       	inc	r11
    5fcc:	b3 94       	inc	r11
    5fce:	04 c0       	rjmp	.+8      	; 0x5fd8 <vfprintf+0x300>
    5fd0:	8a 2d       	mov	r24, r10
    5fd2:	86 78       	andi	r24, 0x86	; 134
    5fd4:	09 f0       	breq	.+2      	; 0x5fd8 <vfprintf+0x300>
    5fd6:	b3 94       	inc	r11
    5fd8:	a3 fc       	sbrc	r10, 3
    5fda:	11 c0       	rjmp	.+34     	; 0x5ffe <vfprintf+0x326>
    5fdc:	a0 fe       	sbrs	r10, 0
    5fde:	06 c0       	rjmp	.+12     	; 0x5fec <vfprintf+0x314>
    5fe0:	b2 14       	cp	r11, r2
    5fe2:	88 f4       	brcc	.+34     	; 0x6006 <vfprintf+0x32e>
    5fe4:	28 0c       	add	r2, r8
    5fe6:	92 2c       	mov	r9, r2
    5fe8:	9b 18       	sub	r9, r11
    5fea:	0e c0       	rjmp	.+28     	; 0x6008 <vfprintf+0x330>
    5fec:	b2 14       	cp	r11, r2
    5fee:	60 f4       	brcc	.+24     	; 0x6008 <vfprintf+0x330>
    5ff0:	b6 01       	movw	r22, r12
    5ff2:	80 e2       	ldi	r24, 0x20	; 32
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    5ffa:	b3 94       	inc	r11
    5ffc:	f7 cf       	rjmp	.-18     	; 0x5fec <vfprintf+0x314>
    5ffe:	b2 14       	cp	r11, r2
    6000:	18 f4       	brcc	.+6      	; 0x6008 <vfprintf+0x330>
    6002:	2b 18       	sub	r2, r11
    6004:	02 c0       	rjmp	.+4      	; 0x600a <vfprintf+0x332>
    6006:	98 2c       	mov	r9, r8
    6008:	21 2c       	mov	r2, r1
    600a:	a4 fe       	sbrs	r10, 4
    600c:	10 c0       	rjmp	.+32     	; 0x602e <vfprintf+0x356>
    600e:	b6 01       	movw	r22, r12
    6010:	80 e3       	ldi	r24, 0x30	; 48
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    6018:	a2 fe       	sbrs	r10, 2
    601a:	17 c0       	rjmp	.+46     	; 0x604a <vfprintf+0x372>
    601c:	a1 fc       	sbrc	r10, 1
    601e:	03 c0       	rjmp	.+6      	; 0x6026 <vfprintf+0x34e>
    6020:	88 e7       	ldi	r24, 0x78	; 120
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	02 c0       	rjmp	.+4      	; 0x602a <vfprintf+0x352>
    6026:	88 e5       	ldi	r24, 0x58	; 88
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	b6 01       	movw	r22, r12
    602c:	0c c0       	rjmp	.+24     	; 0x6046 <vfprintf+0x36e>
    602e:	8a 2d       	mov	r24, r10
    6030:	86 78       	andi	r24, 0x86	; 134
    6032:	59 f0       	breq	.+22     	; 0x604a <vfprintf+0x372>
    6034:	a1 fe       	sbrs	r10, 1
    6036:	02 c0       	rjmp	.+4      	; 0x603c <vfprintf+0x364>
    6038:	8b e2       	ldi	r24, 0x2B	; 43
    603a:	01 c0       	rjmp	.+2      	; 0x603e <vfprintf+0x366>
    603c:	80 e2       	ldi	r24, 0x20	; 32
    603e:	a7 fc       	sbrc	r10, 7
    6040:	8d e2       	ldi	r24, 0x2D	; 45
    6042:	b6 01       	movw	r22, r12
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    604a:	89 14       	cp	r8, r9
    604c:	38 f4       	brcc	.+14     	; 0x605c <vfprintf+0x384>
    604e:	b6 01       	movw	r22, r12
    6050:	80 e3       	ldi	r24, 0x30	; 48
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    6058:	9a 94       	dec	r9
    605a:	f7 cf       	rjmp	.-18     	; 0x604a <vfprintf+0x372>
    605c:	8a 94       	dec	r8
    605e:	f3 01       	movw	r30, r6
    6060:	e8 0d       	add	r30, r8
    6062:	f1 1d       	adc	r31, r1
    6064:	80 81       	ld	r24, Z
    6066:	b6 01       	movw	r22, r12
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    606e:	81 10       	cpse	r8, r1
    6070:	f5 cf       	rjmp	.-22     	; 0x605c <vfprintf+0x384>
    6072:	22 20       	and	r2, r2
    6074:	09 f4       	brne	.+2      	; 0x6078 <vfprintf+0x3a0>
    6076:	42 ce       	rjmp	.-892    	; 0x5cfc <vfprintf+0x24>
    6078:	b6 01       	movw	r22, r12
    607a:	80 e2       	ldi	r24, 0x20	; 32
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	0e 94 63 30 	call	0x60c6	; 0x60c6 <fputc>
    6082:	2a 94       	dec	r2
    6084:	f6 cf       	rjmp	.-20     	; 0x6072 <vfprintf+0x39a>
    6086:	f6 01       	movw	r30, r12
    6088:	86 81       	ldd	r24, Z+6	; 0x06
    608a:	97 81       	ldd	r25, Z+7	; 0x07
    608c:	02 c0       	rjmp	.+4      	; 0x6092 <vfprintf+0x3ba>
    608e:	8f ef       	ldi	r24, 0xFF	; 255
    6090:	9f ef       	ldi	r25, 0xFF	; 255
    6092:	2b 96       	adiw	r28, 0x0b	; 11
    6094:	e2 e1       	ldi	r30, 0x12	; 18
    6096:	0c 94 61 31 	jmp	0x62c2	; 0x62c2 <__epilogue_restores__>

0000609a <strnlen_P>:
    609a:	fc 01       	movw	r30, r24
    609c:	05 90       	lpm	r0, Z+
    609e:	61 50       	subi	r22, 0x01	; 1
    60a0:	70 40       	sbci	r23, 0x00	; 0
    60a2:	01 10       	cpse	r0, r1
    60a4:	d8 f7       	brcc	.-10     	; 0x609c <strnlen_P+0x2>
    60a6:	80 95       	com	r24
    60a8:	90 95       	com	r25
    60aa:	8e 0f       	add	r24, r30
    60ac:	9f 1f       	adc	r25, r31
    60ae:	08 95       	ret

000060b0 <strnlen>:
    60b0:	fc 01       	movw	r30, r24
    60b2:	61 50       	subi	r22, 0x01	; 1
    60b4:	70 40       	sbci	r23, 0x00	; 0
    60b6:	01 90       	ld	r0, Z+
    60b8:	01 10       	cpse	r0, r1
    60ba:	d8 f7       	brcc	.-10     	; 0x60b2 <strnlen+0x2>
    60bc:	80 95       	com	r24
    60be:	90 95       	com	r25
    60c0:	8e 0f       	add	r24, r30
    60c2:	9f 1f       	adc	r25, r31
    60c4:	08 95       	ret

000060c6 <fputc>:
    60c6:	0f 93       	push	r16
    60c8:	1f 93       	push	r17
    60ca:	cf 93       	push	r28
    60cc:	df 93       	push	r29
    60ce:	fb 01       	movw	r30, r22
    60d0:	23 81       	ldd	r18, Z+3	; 0x03
    60d2:	21 fd       	sbrc	r18, 1
    60d4:	03 c0       	rjmp	.+6      	; 0x60dc <fputc+0x16>
    60d6:	8f ef       	ldi	r24, 0xFF	; 255
    60d8:	9f ef       	ldi	r25, 0xFF	; 255
    60da:	2c c0       	rjmp	.+88     	; 0x6134 <fputc+0x6e>
    60dc:	22 ff       	sbrs	r18, 2
    60de:	16 c0       	rjmp	.+44     	; 0x610c <fputc+0x46>
    60e0:	46 81       	ldd	r20, Z+6	; 0x06
    60e2:	57 81       	ldd	r21, Z+7	; 0x07
    60e4:	24 81       	ldd	r18, Z+4	; 0x04
    60e6:	35 81       	ldd	r19, Z+5	; 0x05
    60e8:	42 17       	cp	r20, r18
    60ea:	53 07       	cpc	r21, r19
    60ec:	44 f4       	brge	.+16     	; 0x60fe <fputc+0x38>
    60ee:	a0 81       	ld	r26, Z
    60f0:	b1 81       	ldd	r27, Z+1	; 0x01
    60f2:	9d 01       	movw	r18, r26
    60f4:	2f 5f       	subi	r18, 0xFF	; 255
    60f6:	3f 4f       	sbci	r19, 0xFF	; 255
    60f8:	31 83       	std	Z+1, r19	; 0x01
    60fa:	20 83       	st	Z, r18
    60fc:	8c 93       	st	X, r24
    60fe:	26 81       	ldd	r18, Z+6	; 0x06
    6100:	37 81       	ldd	r19, Z+7	; 0x07
    6102:	2f 5f       	subi	r18, 0xFF	; 255
    6104:	3f 4f       	sbci	r19, 0xFF	; 255
    6106:	37 83       	std	Z+7, r19	; 0x07
    6108:	26 83       	std	Z+6, r18	; 0x06
    610a:	14 c0       	rjmp	.+40     	; 0x6134 <fputc+0x6e>
    610c:	8b 01       	movw	r16, r22
    610e:	ec 01       	movw	r28, r24
    6110:	fb 01       	movw	r30, r22
    6112:	00 84       	ldd	r0, Z+8	; 0x08
    6114:	f1 85       	ldd	r31, Z+9	; 0x09
    6116:	e0 2d       	mov	r30, r0
    6118:	09 95       	icall
    611a:	89 2b       	or	r24, r25
    611c:	e1 f6       	brne	.-72     	; 0x60d6 <fputc+0x10>
    611e:	d8 01       	movw	r26, r16
    6120:	16 96       	adiw	r26, 0x06	; 6
    6122:	8d 91       	ld	r24, X+
    6124:	9c 91       	ld	r25, X
    6126:	17 97       	sbiw	r26, 0x07	; 7
    6128:	01 96       	adiw	r24, 0x01	; 1
    612a:	17 96       	adiw	r26, 0x07	; 7
    612c:	9c 93       	st	X, r25
    612e:	8e 93       	st	-X, r24
    6130:	16 97       	sbiw	r26, 0x06	; 6
    6132:	ce 01       	movw	r24, r28
    6134:	df 91       	pop	r29
    6136:	cf 91       	pop	r28
    6138:	1f 91       	pop	r17
    613a:	0f 91       	pop	r16
    613c:	08 95       	ret

0000613e <__ultoa_invert>:
    613e:	fa 01       	movw	r30, r20
    6140:	aa 27       	eor	r26, r26
    6142:	28 30       	cpi	r18, 0x08	; 8
    6144:	51 f1       	breq	.+84     	; 0x619a <__ultoa_invert+0x5c>
    6146:	20 31       	cpi	r18, 0x10	; 16
    6148:	81 f1       	breq	.+96     	; 0x61aa <__ultoa_invert+0x6c>
    614a:	e8 94       	clt
    614c:	6f 93       	push	r22
    614e:	6e 7f       	andi	r22, 0xFE	; 254
    6150:	6e 5f       	subi	r22, 0xFE	; 254
    6152:	7f 4f       	sbci	r23, 0xFF	; 255
    6154:	8f 4f       	sbci	r24, 0xFF	; 255
    6156:	9f 4f       	sbci	r25, 0xFF	; 255
    6158:	af 4f       	sbci	r26, 0xFF	; 255
    615a:	b1 e0       	ldi	r27, 0x01	; 1
    615c:	3e d0       	rcall	.+124    	; 0x61da <__ultoa_invert+0x9c>
    615e:	b4 e0       	ldi	r27, 0x04	; 4
    6160:	3c d0       	rcall	.+120    	; 0x61da <__ultoa_invert+0x9c>
    6162:	67 0f       	add	r22, r23
    6164:	78 1f       	adc	r23, r24
    6166:	89 1f       	adc	r24, r25
    6168:	9a 1f       	adc	r25, r26
    616a:	a1 1d       	adc	r26, r1
    616c:	68 0f       	add	r22, r24
    616e:	79 1f       	adc	r23, r25
    6170:	8a 1f       	adc	r24, r26
    6172:	91 1d       	adc	r25, r1
    6174:	a1 1d       	adc	r26, r1
    6176:	6a 0f       	add	r22, r26
    6178:	71 1d       	adc	r23, r1
    617a:	81 1d       	adc	r24, r1
    617c:	91 1d       	adc	r25, r1
    617e:	a1 1d       	adc	r26, r1
    6180:	20 d0       	rcall	.+64     	; 0x61c2 <__ultoa_invert+0x84>
    6182:	09 f4       	brne	.+2      	; 0x6186 <__ultoa_invert+0x48>
    6184:	68 94       	set
    6186:	3f 91       	pop	r19
    6188:	2a e0       	ldi	r18, 0x0A	; 10
    618a:	26 9f       	mul	r18, r22
    618c:	11 24       	eor	r1, r1
    618e:	30 19       	sub	r19, r0
    6190:	30 5d       	subi	r19, 0xD0	; 208
    6192:	31 93       	st	Z+, r19
    6194:	de f6       	brtc	.-74     	; 0x614c <__ultoa_invert+0xe>
    6196:	cf 01       	movw	r24, r30
    6198:	08 95       	ret
    619a:	46 2f       	mov	r20, r22
    619c:	47 70       	andi	r20, 0x07	; 7
    619e:	40 5d       	subi	r20, 0xD0	; 208
    61a0:	41 93       	st	Z+, r20
    61a2:	b3 e0       	ldi	r27, 0x03	; 3
    61a4:	0f d0       	rcall	.+30     	; 0x61c4 <__ultoa_invert+0x86>
    61a6:	c9 f7       	brne	.-14     	; 0x619a <__ultoa_invert+0x5c>
    61a8:	f6 cf       	rjmp	.-20     	; 0x6196 <__ultoa_invert+0x58>
    61aa:	46 2f       	mov	r20, r22
    61ac:	4f 70       	andi	r20, 0x0F	; 15
    61ae:	40 5d       	subi	r20, 0xD0	; 208
    61b0:	4a 33       	cpi	r20, 0x3A	; 58
    61b2:	18 f0       	brcs	.+6      	; 0x61ba <__ultoa_invert+0x7c>
    61b4:	49 5d       	subi	r20, 0xD9	; 217
    61b6:	31 fd       	sbrc	r19, 1
    61b8:	40 52       	subi	r20, 0x20	; 32
    61ba:	41 93       	st	Z+, r20
    61bc:	02 d0       	rcall	.+4      	; 0x61c2 <__ultoa_invert+0x84>
    61be:	a9 f7       	brne	.-22     	; 0x61aa <__ultoa_invert+0x6c>
    61c0:	ea cf       	rjmp	.-44     	; 0x6196 <__ultoa_invert+0x58>
    61c2:	b4 e0       	ldi	r27, 0x04	; 4
    61c4:	a6 95       	lsr	r26
    61c6:	97 95       	ror	r25
    61c8:	87 95       	ror	r24
    61ca:	77 95       	ror	r23
    61cc:	67 95       	ror	r22
    61ce:	ba 95       	dec	r27
    61d0:	c9 f7       	brne	.-14     	; 0x61c4 <__ultoa_invert+0x86>
    61d2:	00 97       	sbiw	r24, 0x00	; 0
    61d4:	61 05       	cpc	r22, r1
    61d6:	71 05       	cpc	r23, r1
    61d8:	08 95       	ret
    61da:	9b 01       	movw	r18, r22
    61dc:	ac 01       	movw	r20, r24
    61de:	0a 2e       	mov	r0, r26
    61e0:	06 94       	lsr	r0
    61e2:	57 95       	ror	r21
    61e4:	47 95       	ror	r20
    61e6:	37 95       	ror	r19
    61e8:	27 95       	ror	r18
    61ea:	ba 95       	dec	r27
    61ec:	c9 f7       	brne	.-14     	; 0x61e0 <__ultoa_invert+0xa2>
    61ee:	62 0f       	add	r22, r18
    61f0:	73 1f       	adc	r23, r19
    61f2:	84 1f       	adc	r24, r20
    61f4:	95 1f       	adc	r25, r21
    61f6:	a0 1d       	adc	r26, r0
    61f8:	08 95       	ret

000061fa <eeprom_read_byte>:
    61fa:	f9 99       	sbic	0x1f, 1	; 31
    61fc:	fe cf       	rjmp	.-4      	; 0x61fa <eeprom_read_byte>
    61fe:	92 bd       	out	0x22, r25	; 34
    6200:	81 bd       	out	0x21, r24	; 33
    6202:	f8 9a       	sbi	0x1f, 0	; 31
    6204:	99 27       	eor	r25, r25
    6206:	80 b5       	in	r24, 0x20	; 32
    6208:	08 95       	ret

0000620a <eeprom_read_dword>:
    620a:	a6 e1       	ldi	r26, 0x16	; 22
    620c:	b0 e0       	ldi	r27, 0x00	; 0
    620e:	44 e0       	ldi	r20, 0x04	; 4
    6210:	50 e0       	ldi	r21, 0x00	; 0
    6212:	0c 94 37 31 	jmp	0x626e	; 0x626e <eeprom_read_blraw>

00006216 <eeprom_read_word>:
    6216:	a8 e1       	ldi	r26, 0x18	; 24
    6218:	b0 e0       	ldi	r27, 0x00	; 0
    621a:	42 e0       	ldi	r20, 0x02	; 2
    621c:	50 e0       	ldi	r21, 0x00	; 0
    621e:	0c 94 37 31 	jmp	0x626e	; 0x626e <eeprom_read_blraw>

00006222 <eeprom_update_byte>:
    6222:	26 2f       	mov	r18, r22

00006224 <eeprom_update_r18>:
    6224:	f9 99       	sbic	0x1f, 1	; 31
    6226:	fe cf       	rjmp	.-4      	; 0x6224 <eeprom_update_r18>
    6228:	92 bd       	out	0x22, r25	; 34
    622a:	81 bd       	out	0x21, r24	; 33
    622c:	f8 9a       	sbi	0x1f, 0	; 31
    622e:	01 97       	sbiw	r24, 0x01	; 1
    6230:	00 b4       	in	r0, 0x20	; 32
    6232:	02 16       	cp	r0, r18
    6234:	39 f0       	breq	.+14     	; 0x6244 <eeprom_update_r18+0x20>
    6236:	1f ba       	out	0x1f, r1	; 31
    6238:	20 bd       	out	0x20, r18	; 32
    623a:	0f b6       	in	r0, 0x3f	; 63
    623c:	f8 94       	cli
    623e:	fa 9a       	sbi	0x1f, 2	; 31
    6240:	f9 9a       	sbi	0x1f, 1	; 31
    6242:	0f be       	out	0x3f, r0	; 63
    6244:	08 95       	ret

00006246 <eeprom_update_dword>:
    6246:	03 96       	adiw	r24, 0x03	; 3
    6248:	27 2f       	mov	r18, r23
    624a:	0e 94 12 31 	call	0x6224	; 0x6224 <eeprom_update_r18>
    624e:	0e 94 11 31 	call	0x6222	; 0x6222 <eeprom_update_byte>
    6252:	25 2f       	mov	r18, r21
    6254:	0e 94 12 31 	call	0x6224	; 0x6224 <eeprom_update_r18>
    6258:	24 2f       	mov	r18, r20
    625a:	0c 94 12 31 	jmp	0x6224	; 0x6224 <eeprom_update_r18>

0000625e <eeprom_update_word>:
    625e:	01 96       	adiw	r24, 0x01	; 1
    6260:	27 2f       	mov	r18, r23
    6262:	0e 94 12 31 	call	0x6224	; 0x6224 <eeprom_update_r18>
    6266:	0c 94 11 31 	jmp	0x6222	; 0x6222 <eeprom_update_byte>

0000626a <eeprom_read_block>:
    626a:	dc 01       	movw	r26, r24
    626c:	cb 01       	movw	r24, r22

0000626e <eeprom_read_blraw>:
    626e:	fc 01       	movw	r30, r24
    6270:	f9 99       	sbic	0x1f, 1	; 31
    6272:	fe cf       	rjmp	.-4      	; 0x6270 <eeprom_read_blraw+0x2>
    6274:	06 c0       	rjmp	.+12     	; 0x6282 <eeprom_read_blraw+0x14>
    6276:	f2 bd       	out	0x22, r31	; 34
    6278:	e1 bd       	out	0x21, r30	; 33
    627a:	f8 9a       	sbi	0x1f, 0	; 31
    627c:	31 96       	adiw	r30, 0x01	; 1
    627e:	00 b4       	in	r0, 0x20	; 32
    6280:	0d 92       	st	X+, r0
    6282:	41 50       	subi	r20, 0x01	; 1
    6284:	50 40       	sbci	r21, 0x00	; 0
    6286:	b8 f7       	brcc	.-18     	; 0x6276 <eeprom_read_blraw+0x8>
    6288:	08 95       	ret

0000628a <__prologue_saves__>:
    628a:	2f 92       	push	r2
    628c:	3f 92       	push	r3
    628e:	4f 92       	push	r4
    6290:	5f 92       	push	r5
    6292:	6f 92       	push	r6
    6294:	7f 92       	push	r7
    6296:	8f 92       	push	r8
    6298:	9f 92       	push	r9
    629a:	af 92       	push	r10
    629c:	bf 92       	push	r11
    629e:	cf 92       	push	r12
    62a0:	df 92       	push	r13
    62a2:	ef 92       	push	r14
    62a4:	ff 92       	push	r15
    62a6:	0f 93       	push	r16
    62a8:	1f 93       	push	r17
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
    62ae:	cd b7       	in	r28, 0x3d	; 61
    62b0:	de b7       	in	r29, 0x3e	; 62
    62b2:	ca 1b       	sub	r28, r26
    62b4:	db 0b       	sbc	r29, r27
    62b6:	0f b6       	in	r0, 0x3f	; 63
    62b8:	f8 94       	cli
    62ba:	de bf       	out	0x3e, r29	; 62
    62bc:	0f be       	out	0x3f, r0	; 63
    62be:	cd bf       	out	0x3d, r28	; 61
    62c0:	09 94       	ijmp

000062c2 <__epilogue_restores__>:
    62c2:	2a 88       	ldd	r2, Y+18	; 0x12
    62c4:	39 88       	ldd	r3, Y+17	; 0x11
    62c6:	48 88       	ldd	r4, Y+16	; 0x10
    62c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    62ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    62cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    62ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    62d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    62d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    62d4:	b9 84       	ldd	r11, Y+9	; 0x09
    62d6:	c8 84       	ldd	r12, Y+8	; 0x08
    62d8:	df 80       	ldd	r13, Y+7	; 0x07
    62da:	ee 80       	ldd	r14, Y+6	; 0x06
    62dc:	fd 80       	ldd	r15, Y+5	; 0x05
    62de:	0c 81       	ldd	r16, Y+4	; 0x04
    62e0:	1b 81       	ldd	r17, Y+3	; 0x03
    62e2:	aa 81       	ldd	r26, Y+2	; 0x02
    62e4:	b9 81       	ldd	r27, Y+1	; 0x01
    62e6:	ce 0f       	add	r28, r30
    62e8:	d1 1d       	adc	r29, r1
    62ea:	0f b6       	in	r0, 0x3f	; 63
    62ec:	f8 94       	cli
    62ee:	de bf       	out	0x3e, r29	; 62
    62f0:	0f be       	out	0x3f, r0	; 63
    62f2:	cd bf       	out	0x3d, r28	; 61
    62f4:	ed 01       	movw	r28, r26
    62f6:	08 95       	ret

000062f8 <__do_global_dtors>:
    62f8:	11 e0       	ldi	r17, 0x01	; 1
    62fa:	c3 e1       	ldi	r28, 0x13	; 19
    62fc:	d1 e0       	ldi	r29, 0x01	; 1
    62fe:	04 c0       	rjmp	.+8      	; 0x6308 <__do_global_dtors+0x10>
    6300:	fe 01       	movw	r30, r28
    6302:	0e 94 6f 2c 	call	0x58de	; 0x58de <__tablejump2__>
    6306:	21 96       	adiw	r28, 0x01	; 1
    6308:	c4 31       	cpi	r28, 0x14	; 20
    630a:	d1 07       	cpc	r29, r17
    630c:	c9 f7       	brne	.-14     	; 0x6300 <__do_global_dtors+0x8>
    630e:	f8 94       	cli

00006310 <__stop_program>:
    6310:	ff cf       	rjmp	.-2      	; 0x6310 <__stop_program>
