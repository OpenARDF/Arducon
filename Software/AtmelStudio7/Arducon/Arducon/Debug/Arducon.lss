
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800100  00006c66  00006d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c66  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  008002d6  008002d6  00006ef0  2**0
                  ALLOC
  3 .eeprom       0000032f  00810000  00810000  00006ef0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000721f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000727c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000510  00000000  00000000  000072c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007c5d  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019cb  00000000  00000000  0000f42d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004c86  00000000  00000000  00010df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e34  00000000  00000000  00015a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002696  00000000  00000000  000168b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067b7  00000000  00000000  00018f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005a0  00000000  00000000  0001f701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__dtors_end>
       4:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__vector_1>
       8:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
       c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      10:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__vector_4>
      14:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      18:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_6>
      1c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      20:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_8>
      24:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      28:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      2c:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__vector_11>
      30:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      34:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      38:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_14>
      3c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      40:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      44:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      48:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__vector_18>
      4c:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_19>
      50:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      54:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__vector_21>
      58:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      5c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      60:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      64:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      68:	83 01       	movw	r16, r6
      6a:	8e 01       	movw	r16, r28
      6c:	99 01       	movw	r18, r18
      6e:	a4 01       	movw	r20, r8
      70:	af 01       	movw	r20, r30
      72:	ba 01       	movw	r22, r20
      74:	c5 01       	movw	r24, r10
      76:	d0 01       	movw	r26, r0
      78:	db 01       	movw	r26, r22
      7a:	e6 01       	movw	r28, r12
      7c:	f1 01       	movw	r30, r2
      7e:	48 02       	muls	r20, r24
      80:	48 02       	muls	r20, r24
      82:	fc 01       	movw	r30, r24
      84:	07 02       	muls	r16, r23
      86:	12 02       	muls	r17, r18
      88:	1d 02       	muls	r17, r29
      8a:	28 02       	muls	r18, r24
      8c:	33 02       	muls	r19, r19
      8e:	3e 02       	muls	r19, r30
      90:	53 02       	muls	r21, r19
      92:	57 02       	muls	r21, r23
      94:	5b 02       	muls	r21, r27
      96:	5f 02       	muls	r21, r31
      98:	63 02       	muls	r22, r19
      9a:	67 02       	muls	r22, r23
      9c:	6b 02       	muls	r22, r27
      9e:	70 02       	muls	r23, r16
      a0:	74 02       	muls	r23, r20
      a2:	8d 02       	muls	r24, r29
      a4:	8d 02       	muls	r24, r29
      a6:	78 02       	muls	r23, r24
      a8:	7c 02       	muls	r23, r28
      aa:	81 02       	muls	r24, r17
      ac:	85 02       	muls	r24, r21
      ae:	89 02       	muls	r24, r25
      b0:	9e 02       	muls	r25, r30
      b2:	a4 02       	muls	r26, r20
      b4:	aa 02       	muls	r26, r26
      b6:	b0 02       	muls	r27, r16
      b8:	b6 02       	muls	r27, r22
      ba:	bc 02       	muls	r27, r28
      bc:	c2 02       	muls	r28, r18
      be:	c8 02       	muls	r28, r24
      c0:	ce 02       	muls	r28, r30
      c2:	d4 02       	muls	r29, r20
      c4:	da 02       	muls	r29, r26
      c6:	fd 02       	muls	r31, r29
      c8:	fd 02       	muls	r31, r29
      ca:	e0 02       	muls	r30, r16
      cc:	e6 02       	muls	r30, r22
      ce:	ec 02       	muls	r30, r28
      d0:	f2 02       	muls	r31, r18
      d2:	f8 02       	muls	r31, r24
      d4:	60 05       	cpc	r22, r0
      d6:	bf 05       	cpc	r27, r15
      d8:	bf 05       	cpc	r27, r15
      da:	7d 05       	cpc	r23, r13
      dc:	a4 05       	cpc	r26, r4
      de:	5d 05       	cpc	r21, r13
      e0:	a7 05       	cpc	r26, r7
      e2:	ad 05       	cpc	r26, r13
      e4:	5a 05       	cpc	r21, r10
      e6:	b7 05       	cpc	r27, r7
      e8:	57 05       	cpc	r21, r7
      ea:	9e 05       	cpc	r25, r14
      ec:	a1 05       	cpc	r26, r1
      ee:	b0 05       	cpc	r27, r0
      f0:	08 06       	cpc	r0, r24
      f2:	da 05       	cpc	r29, r10
      f4:	0b 06       	cpc	r0, r27
      f6:	dd 05       	cpc	r29, r13
      f8:	e0 05       	cpc	r30, r0
      fa:	e3 05       	cpc	r30, r3
      fc:	e6 05       	cpc	r30, r6
      fe:	e9 05       	cpc	r30, r9
     100:	ec 05       	cpc	r30, r12
     102:	ef 05       	cpc	r30, r15
     104:	f2 05       	cpc	r31, r2
     106:	fe 16       	cp	r15, r30
     108:	fe 16       	cp	r15, r30
     10a:	fe 16       	cp	r15, r30
     10c:	fe 16       	cp	r15, r30
     10e:	fe 16       	cp	r15, r30
     110:	7e 17       	cp	r23, r30
     112:	7e 17       	cp	r23, r30
     114:	1c 17       	cp	r17, r28
     116:	1c 17       	cp	r17, r28
     118:	1c 17       	cp	r17, r28
     11a:	1c 17       	cp	r17, r28
     11c:	1c 17       	cp	r17, r28
     11e:	3e 17       	cp	r19, r30
     120:	3e 17       	cp	r19, r30
     122:	3e 17       	cp	r19, r30
     124:	3e 17       	cp	r19, r30
     126:	3e 17       	cp	r19, r30
     128:	7e 17       	cp	r23, r30
     12a:	5e 17       	cp	r21, r30
     12c:	c8 23       	and	r28, r24
     12e:	ca 23       	and	r28, r26
     130:	1f 24       	eor	r1, r15
     132:	60 24       	eor	r6, r0
     134:	67 24       	eor	r6, r7
     136:	71 24       	eor	r7, r1
     138:	7a 24       	eor	r7, r10
     13a:	86 24       	eor	r8, r6
     13c:	02 25       	eor	r16, r2
     13e:	6d 25       	eor	r22, r13
     140:	f3 25       	eor	r31, r3
     142:	3a 26       	eor	r3, r26
     144:	52 27       	eor	r21, r18
     146:	ae 25       	eor	r26, r14
     148:	81 26       	eor	r8, r17
     14a:	0b 27       	eor	r16, r27
     14c:	a2 26       	eor	r10, r18
     14e:	cc 26       	eor	r12, r28
     150:	c6 24       	eor	r12, r6
     152:	db 26       	eor	r13, r27
     154:	27 24       	eor	r2, r7
     156:	c8 23       	and	r28, r24
     158:	ca 23       	and	r28, r26
     15a:	f8 23       	and	r31, r24
     15c:	54 27       	eor	r21, r20
     15e:	67 24       	eor	r6, r7
     160:	71 24       	eor	r7, r1
     162:	7a 24       	eor	r7, r10
     164:	86 24       	eor	r8, r6
     166:	02 25       	eor	r16, r2
     168:	6d 25       	eor	r22, r13
     16a:	f3 25       	eor	r31, r3
     16c:	3a 26       	eor	r3, r26
     16e:	54 27       	eor	r21, r20
     170:	ae 25       	eor	r26, r14
     172:	81 26       	eor	r8, r17
     174:	0b 27       	eor	r16, r27
     176:	a2 26       	eor	r10, r18
     178:	cc 26       	eor	r12, r28
     17a:	c6 24       	eor	r12, r6
     17c:	db 26       	eor	r13, r27
     17e:	27 24       	eor	r2, r7
     180:	67 2c       	mov	r6, r7
     182:	2b 2c       	mov	r2, r11
     184:	57 2c       	mov	r5, r7
     186:	6f 2c       	mov	r6, r15
     188:	5b 2c       	mov	r5, r11
     18a:	6f 2c       	mov	r6, r15
     18c:	3b 2c       	mov	r3, r11
     18e:	27 2c       	mov	r2, r7
     190:	33 2c       	mov	r3, r3
     192:	37 2c       	mov	r3, r7
     194:	6f 2c       	mov	r6, r15
     196:	4b 2c       	mov	r4, r11
     198:	1f 2c       	mov	r1, r15
     19a:	4f 2c       	mov	r4, r15
     19c:	1b 2c       	mov	r1, r11
     19e:	2f 2c       	mov	r2, r15
     1a0:	f3 2b       	or	r31, r19
     1a2:	f7 2b       	or	r31, r23
     1a4:	fb 2b       	or	r31, r27
     1a6:	ff 2b       	or	r31, r31
     1a8:	03 2c       	mov	r0, r3
     1aa:	07 2c       	mov	r0, r7
     1ac:	0b 2c       	mov	r0, r11
     1ae:	0f 2c       	mov	r0, r15
     1b0:	13 2c       	mov	r1, r3
     1b2:	17 2c       	mov	r1, r7
     1b4:	3f 2c       	mov	r3, r15
     1b6:	43 2c       	mov	r4, r3
     1b8:	6b 2c       	mov	r6, r11
     1ba:	47 2c       	mov	r4, r7
     1bc:	6f 2c       	mov	r6, r15
     1be:	23 2c       	mov	r2, r3
     1c0:	5f 2c       	mov	r5, r15
     1c2:	73 2c       	mov	r7, r3
     1c4:	8f 2b       	or	r24, r31
     1c6:	93 2b       	or	r25, r19
     1c8:	97 2b       	or	r25, r23
     1ca:	9b 2b       	or	r25, r27
     1cc:	9f 2b       	or	r25, r31
     1ce:	a3 2b       	or	r26, r19
     1d0:	a7 2b       	or	r26, r23
     1d2:	ab 2b       	or	r26, r27
     1d4:	af 2b       	or	r26, r31
     1d6:	b3 2b       	or	r27, r19
     1d8:	b7 2b       	or	r27, r23
     1da:	bb 2b       	or	r27, r27
     1dc:	bf 2b       	or	r27, r31
     1de:	c3 2b       	or	r28, r19
     1e0:	c7 2b       	or	r28, r23
     1e2:	cb 2b       	or	r28, r27
     1e4:	cf 2b       	or	r28, r31
     1e6:	d3 2b       	or	r29, r19
     1e8:	d7 2b       	or	r29, r23
     1ea:	db 2b       	or	r29, r27
     1ec:	df 2b       	or	r29, r31
     1ee:	e3 2b       	or	r30, r19
     1f0:	e7 2b       	or	r30, r23
     1f2:	eb 2b       	or	r30, r27
     1f4:	ef 2b       	or	r30, r31
     1f6:	6f 2c       	mov	r6, r15
     1f8:	6f 2c       	mov	r6, r15
     1fa:	6f 2c       	mov	r6, r15
     1fc:	6f 2c       	mov	r6, r15
     1fe:	53 2c       	mov	r5, r3
     200:	6f 2c       	mov	r6, r15
     202:	6f 2c       	mov	r6, r15
     204:	6f 2c       	mov	r6, r15
     206:	6f 2c       	mov	r6, r15
     208:	6f 2c       	mov	r6, r15
     20a:	6f 2c       	mov	r6, r15
     20c:	6f 2c       	mov	r6, r15
     20e:	6f 2c       	mov	r6, r15
     210:	6f 2c       	mov	r6, r15
     212:	6f 2c       	mov	r6, r15
     214:	6f 2c       	mov	r6, r15
     216:	6f 2c       	mov	r6, r15
     218:	6f 2c       	mov	r6, r15
     21a:	6f 2c       	mov	r6, r15
     21c:	6f 2c       	mov	r6, r15
     21e:	6f 2c       	mov	r6, r15
     220:	6f 2c       	mov	r6, r15
     222:	6f 2c       	mov	r6, r15
     224:	6f 2c       	mov	r6, r15
     226:	6f 2c       	mov	r6, r15
     228:	6f 2c       	mov	r6, r15
     22a:	6f 2c       	mov	r6, r15
     22c:	6f 2c       	mov	r6, r15
     22e:	6f 2c       	mov	r6, r15
     230:	6f 2c       	mov	r6, r15
     232:	6f 2c       	mov	r6, r15
     234:	6f 2c       	mov	r6, r15
     236:	6f 2c       	mov	r6, r15
     238:	63 2c       	mov	r6, r3
     23a:	05 a8       	ldd	r0, Z+53	; 0x35
     23c:	4c cd       	rjmp	.-1384   	; 0xfffffcd6 <__eeprom_end+0xff7ef9a7>
     23e:	b2 d4       	rcall	.+2404   	; 0xba4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x1c>
     240:	4e b9       	out	0x0e, r20	; 14
     242:	38 36       	cpi	r19, 0x68	; 104
     244:	a9 02       	muls	r26, r25
     246:	0c 50       	subi	r16, 0x0C	; 12
     248:	b9 91       	ld	r27, Y+
     24a:	86 88       	ldd	r8, Z+22	; 0x16
     24c:	08 3c       	cpi	r16, 0xC8	; 200
     24e:	a6 aa       	std	Z+54, r10	; 0x36
     250:	aa 2a       	or	r10, r26
     252:	be 00       	.word	0x00be	; ????
     254:	00 00       	nop
     256:	80 3f       	cpi	r24, 0xF0	; 240

00000258 <__ctors_start>:
     258:	63 2b       	or	r22, r19

0000025a <__ctors_end>:
     25a:	78 2b       	or	r23, r24

0000025c <__dtors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d8 e0       	ldi	r29, 0x08	; 8
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	12 e0       	ldi	r17, 0x02	; 2
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	e6 e6       	ldi	r30, 0x66	; 102
     270:	fc e6       	ldi	r31, 0x6C	; 108
     272:	02 c0       	rjmp	.+4      	; 0x278 <__do_copy_data+0x10>
     274:	05 90       	lpm	r0, Z+
     276:	0d 92       	st	X+, r0
     278:	a6 3d       	cpi	r26, 0xD6	; 214
     27a:	b1 07       	cpc	r27, r17
     27c:	d9 f7       	brne	.-10     	; 0x274 <__do_copy_data+0xc>

0000027e <__do_clear_bss>:
     27e:	25 e0       	ldi	r18, 0x05	; 5
     280:	a6 ed       	ldi	r26, 0xD6	; 214
     282:	b2 e0       	ldi	r27, 0x02	; 2
     284:	01 c0       	rjmp	.+2      	; 0x288 <.do_clear_bss_start>

00000286 <.do_clear_bss_loop>:
     286:	1d 92       	st	X+, r1

00000288 <.do_clear_bss_start>:
     288:	ad 37       	cpi	r26, 0x7D	; 125
     28a:	b2 07       	cpc	r27, r18
     28c:	e1 f7       	brne	.-8      	; 0x286 <.do_clear_bss_loop>

0000028e <__do_global_ctors>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	cd e2       	ldi	r28, 0x2D	; 45
     292:	d1 e0       	ldi	r29, 0x01	; 1
     294:	04 c0       	rjmp	.+8      	; 0x29e <__do_global_ctors+0x10>
     296:	21 97       	sbiw	r28, 0x01	; 1
     298:	fe 01       	movw	r30, r28
     29a:	0e 94 fe 30 	call	0x61fc	; 0x61fc <__tablejump2__>
     29e:	cc 32       	cpi	r28, 0x2C	; 44
     2a0:	d1 07       	cpc	r29, r17
     2a2:	c9 f7       	brne	.-14     	; 0x296 <__do_global_ctors+0x8>
     2a4:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <main>
     2a8:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__do_global_dtors>

000002ac <__bad_interrupt>:
     2ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b0 <month_length>:
     2b0:	62 30       	cpi	r22, 0x02	; 2
     2b2:	21 f4       	brne	.+8      	; 0x2bc <month_length+0xc>
     2b4:	0e 94 65 01 	call	0x2ca	; 0x2ca <is_leap_year>
     2b8:	84 5e       	subi	r24, 0xE4	; 228
     2ba:	08 95       	ret
     2bc:	68 30       	cpi	r22, 0x08	; 8
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <month_length+0x12>
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	61 70       	andi	r22, 0x01	; 1
     2c4:	8e e1       	ldi	r24, 0x1E	; 30
     2c6:	86 0f       	add	r24, r22
     2c8:	08 95       	ret

000002ca <is_leap_year>:
     2ca:	9c 01       	movw	r18, r24
     2cc:	23 70       	andi	r18, 0x03	; 3
     2ce:	33 27       	eor	r19, r19
     2d0:	23 2b       	or	r18, r19
     2d2:	59 f4       	brne	.+22     	; 0x2ea <is_leap_year+0x20>
     2d4:	64 e6       	ldi	r22, 0x64	; 100
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
     2dc:	89 2b       	or	r24, r25
     2de:	39 f4       	brne	.+14     	; 0x2ee <is_leap_year+0x24>
     2e0:	63 70       	andi	r22, 0x03	; 3
     2e2:	77 27       	eor	r23, r23
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	67 2b       	or	r22, r23
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <is_leap_year+0x26>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret

000002f2 <pinMode>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	84 31       	cpi	r24, 0x14	; 20
     2f6:	91 05       	cpc	r25, r1
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <pinMode+0xa>
     2fa:	ca c0       	rjmp	.+404    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     2fc:	fc 01       	movw	r30, r24
     2fe:	ec 5c       	subi	r30, 0xCC	; 204
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	11 f4       	brne	.+4      	; 0x30e <pinMode+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     30a:	50 9a       	sbi	0x0a, 0	; 10
     30c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     30e:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	11 f4       	brne	.+4      	; 0x318 <pinMode+0x26>
				{
					PORTD  |= (1 << PORTD0);
     314:	58 9a       	sbi	0x0b, 0	; 11
     316:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     318:	58 98       	cbi	0x0b, 0	; 11
     31a:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     31c:	61 30       	cpi	r22, 0x01	; 1
     31e:	11 f4       	brne	.+4      	; 0x324 <pinMode+0x32>
			{
				DDRD  |= (1 << PORTD1);
     320:	51 9a       	sbi	0x0a, 1	; 10
     322:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     324:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     326:	63 30       	cpi	r22, 0x03	; 3
     328:	11 f4       	brne	.+4      	; 0x32e <pinMode+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     32a:	59 9a       	sbi	0x0b, 1	; 11
     32c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     32e:	59 98       	cbi	0x0b, 1	; 11
     330:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	11 f4       	brne	.+4      	; 0x33a <pinMode+0x48>
			{
				DDRD  |= (1 << PORTD2);
     336:	52 9a       	sbi	0x0a, 2	; 10
     338:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     33a:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	11 f4       	brne	.+4      	; 0x344 <pinMode+0x52>
				{
					PORTD  |= (1 << PORTD2);
     340:	5a 9a       	sbi	0x0b, 2	; 11
     342:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     344:	5a 98       	cbi	0x0b, 2	; 11
     346:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <pinMode+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     34c:	53 9a       	sbi	0x0a, 3	; 10
     34e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     350:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	11 f4       	brne	.+4      	; 0x35a <pinMode+0x68>
				{
					PORTD  |= (1 << PORTD3);
     356:	5b 9a       	sbi	0x0b, 3	; 11
     358:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     35a:	5b 98       	cbi	0x0b, 3	; 11
     35c:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     35e:	61 30       	cpi	r22, 0x01	; 1
     360:	11 f4       	brne	.+4      	; 0x366 <pinMode+0x74>
			{
				DDRD  |= (1 << PORTD4);
     362:	54 9a       	sbi	0x0a, 4	; 10
     364:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     366:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     368:	63 30       	cpi	r22, 0x03	; 3
     36a:	11 f4       	brne	.+4      	; 0x370 <pinMode+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     36c:	5c 9a       	sbi	0x0b, 4	; 11
     36e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     370:	5c 98       	cbi	0x0b, 4	; 11
     372:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     374:	61 30       	cpi	r22, 0x01	; 1
     376:	11 f4       	brne	.+4      	; 0x37c <pinMode+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     378:	55 9a       	sbi	0x0a, 5	; 10
     37a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     37c:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	11 f4       	brne	.+4      	; 0x386 <pinMode+0x94>
				{
					PORTD  |= (1 << PORTD5);
     382:	5d 9a       	sbi	0x0b, 5	; 11
     384:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     386:	5d 98       	cbi	0x0b, 5	; 11
     388:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     38a:	61 30       	cpi	r22, 0x01	; 1
     38c:	11 f4       	brne	.+4      	; 0x392 <pinMode+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     38e:	56 9a       	sbi	0x0a, 6	; 10
     390:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     392:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     394:	63 30       	cpi	r22, 0x03	; 3
     396:	11 f4       	brne	.+4      	; 0x39c <pinMode+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     398:	5e 9a       	sbi	0x0b, 6	; 11
     39a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     39c:	5e 98       	cbi	0x0b, 6	; 11
     39e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	11 f4       	brne	.+4      	; 0x3a8 <pinMode+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     3a4:	57 9a       	sbi	0x0a, 7	; 10
     3a6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     3a8:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     3aa:	63 30       	cpi	r22, 0x03	; 3
     3ac:	11 f4       	brne	.+4      	; 0x3b2 <pinMode+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     3ae:	5f 9a       	sbi	0x0b, 7	; 11
     3b0:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     3b2:	5f 98       	cbi	0x0b, 7	; 11
     3b4:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     3b6:	61 30       	cpi	r22, 0x01	; 1
     3b8:	11 f4       	brne	.+4      	; 0x3be <pinMode+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     3ba:	20 9a       	sbi	0x04, 0	; 4
     3bc:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     3be:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     3c0:	63 30       	cpi	r22, 0x03	; 3
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <pinMode+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     3c4:	28 9a       	sbi	0x05, 0	; 5
     3c6:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     3c8:	28 98       	cbi	0x05, 0	; 5
     3ca:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     3cc:	61 30       	cpi	r22, 0x01	; 1
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <pinMode+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3d0:	21 9a       	sbi	0x04, 1	; 4
     3d2:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3d4:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3d6:	63 30       	cpi	r22, 0x03	; 3
     3d8:	11 f4       	brne	.+4      	; 0x3de <pinMode+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3da:	29 9a       	sbi	0x05, 1	; 5
     3dc:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3de:	29 98       	cbi	0x05, 1	; 5
     3e0:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3e2:	61 30       	cpi	r22, 0x01	; 1
     3e4:	11 f4       	brne	.+4      	; 0x3ea <pinMode+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3e6:	22 9a       	sbi	0x04, 2	; 4
     3e8:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3ea:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3ec:	63 30       	cpi	r22, 0x03	; 3
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <pinMode+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3f0:	2a 9a       	sbi	0x05, 2	; 5
     3f2:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3f4:	2a 98       	cbi	0x05, 2	; 5
     3f6:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3f8:	61 30       	cpi	r22, 0x01	; 1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
			{
				DDRB  |= (1 << PORTB5);
     3fc:	25 9a       	sbi	0x04, 5	; 4
     3fe:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     400:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     402:	63 30       	cpi	r22, 0x03	; 3
     404:	11 f4       	brne	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				{
					PORTD  |= (1 << PORTB5);
     406:	5d 9a       	sbi	0x0b, 5	; 11
     408:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     40a:	5d 98       	cbi	0x0b, 5	; 11
     40c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     40e:	61 30       	cpi	r22, 0x01	; 1
     410:	11 f4       	brne	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				DDRC  |= (1 << PORTC0);
     412:	38 9a       	sbi	0x07, 0	; 7
     414:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     416:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     418:	63 30       	cpi	r22, 0x03	; 3
     41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					PORTC  |= (1 << PORTC0);
     41c:	40 9a       	sbi	0x08, 0	; 8
     41e:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     420:	40 98       	cbi	0x08, 0	; 8
     422:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     424:	61 30       	cpi	r22, 0x01	; 1
     426:	11 f4       	brne	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				DDRC  |= (1 << PORTC1);
     428:	39 9a       	sbi	0x07, 1	; 7
     42a:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     42c:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     42e:	63 30       	cpi	r22, 0x03	; 3
     430:	11 f4       	brne	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
				{
					PORTC  |= (1 << PORTC1);
     432:	41 9a       	sbi	0x08, 1	; 8
     434:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     436:	41 98       	cbi	0x08, 1	; 8
     438:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     43a:	61 30       	cpi	r22, 0x01	; 1
     43c:	11 f4       	brne	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				DDRC  |= (1 << PORTC2);
     43e:	3a 9a       	sbi	0x07, 2	; 7
     440:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     442:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     444:	63 30       	cpi	r22, 0x03	; 3
     446:	11 f4       	brne	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				{
					PORTC  |= (1 << PORTC2);
     448:	42 9a       	sbi	0x08, 2	; 8
     44a:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     44c:	42 98       	cbi	0x08, 2	; 8
     44e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     450:	61 30       	cpi	r22, 0x01	; 1
     452:	11 f4       	brne	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
			{
				DDRC  |= (1 << PORTC3);
     454:	3b 9a       	sbi	0x07, 3	; 7
     456:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     458:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     45a:	63 30       	cpi	r22, 0x03	; 3
     45c:	11 f4       	brne	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				{
					PORTC  |= (1 << PORTC3);
     45e:	43 9a       	sbi	0x08, 3	; 8
     460:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     462:	43 98       	cbi	0x08, 3	; 8
     464:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     466:	61 30       	cpi	r22, 0x01	; 1
     468:	11 f4       	brne	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				DDRC  |= (1 << PORTC4);
     46a:	3c 9a       	sbi	0x07, 4	; 7
     46c:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     46e:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     470:	63 30       	cpi	r22, 0x03	; 3
     472:	11 f4       	brne	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				{
					PORTC  |= (1 << PORTC4);
     474:	44 9a       	sbi	0x08, 4	; 8
     476:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     478:	44 98       	cbi	0x08, 4	; 8
     47a:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     47c:	61 30       	cpi	r22, 0x01	; 1
     47e:	11 f4       	brne	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			{
				DDRC  |= (1 << PORTC5);
     480:	3d 9a       	sbi	0x07, 5	; 7
     482:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     484:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     486:	63 30       	cpi	r22, 0x03	; 3
     488:	11 f4       	brne	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
				{
					PORTC  |= (1 << PORTC5);
     48a:	45 9a       	sbi	0x08, 5	; 8
     48c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     48e:	45 98       	cbi	0x08, 5	; 8
     490:	08 95       	ret

00000492 <digitalRead>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	fc 01       	movw	r30, r24
     496:	32 97       	sbiw	r30, 0x02	; 2
     498:	e0 31       	cpi	r30, 0x10	; 16
     49a:	f1 05       	cpc	r31, r1
     49c:	f0 f5       	brcc	.+124    	; 0x51a <digitalRead+0x88>
     49e:	e8 5b       	subi	r30, 0xB8	; 184
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     4a6:	29 b1       	in	r18, 0x09	; 9
     4a8:	24 70       	andi	r18, 0x04	; 4
     4aa:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ac:	38 c0       	rjmp	.+112    	; 0x51e <digitalRead+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     4ae:	29 b1       	in	r18, 0x09	; 9
     4b0:	28 70       	andi	r18, 0x08	; 8
     4b2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b4:	34 c0       	rjmp	.+104    	; 0x51e <digitalRead+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     4b6:	29 b1       	in	r18, 0x09	; 9
     4b8:	20 71       	andi	r18, 0x10	; 16
     4ba:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4bc:	30 c0       	rjmp	.+96     	; 0x51e <digitalRead+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     4be:	29 b1       	in	r18, 0x09	; 9
     4c0:	20 72       	andi	r18, 0x20	; 32
     4c2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c4:	2c c0       	rjmp	.+88     	; 0x51e <digitalRead+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     4c6:	29 b1       	in	r18, 0x09	; 9
     4c8:	20 74       	andi	r18, 0x40	; 64
     4ca:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4cc:	28 c0       	rjmp	.+80     	; 0x51e <digitalRead+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     4ce:	29 b1       	in	r18, 0x09	; 9
     4d0:	20 78       	andi	r18, 0x80	; 128
     4d2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d4:	24 c0       	rjmp	.+72     	; 0x51e <digitalRead+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4d6:	83 b1       	in	r24, 0x03	; 3
     4d8:	28 2f       	mov	r18, r24
     4da:	21 70       	andi	r18, 0x01	; 1
     4dc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4de:	1f c0       	rjmp	.+62     	; 0x51e <digitalRead+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4e0:	23 b1       	in	r18, 0x03	; 3
     4e2:	22 70       	andi	r18, 0x02	; 2
     4e4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e6:	1b c0       	rjmp	.+54     	; 0x51e <digitalRead+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4e8:	23 b1       	in	r18, 0x03	; 3
     4ea:	24 70       	andi	r18, 0x04	; 4
     4ec:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ee:	17 c0       	rjmp	.+46     	; 0x51e <digitalRead+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4f0:	23 b1       	in	r18, 0x03	; 3
     4f2:	20 72       	andi	r18, 0x20	; 32
     4f4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4f6:	13 c0       	rjmp	.+38     	; 0x51e <digitalRead+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4f8:	86 b1       	in	r24, 0x06	; 6
     4fa:	28 2f       	mov	r18, r24
     4fc:	21 70       	andi	r18, 0x01	; 1
     4fe:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     500:	0e c0       	rjmp	.+28     	; 0x51e <digitalRead+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     502:	26 b1       	in	r18, 0x06	; 6
     504:	22 70       	andi	r18, 0x02	; 2
     506:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     508:	0a c0       	rjmp	.+20     	; 0x51e <digitalRead+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     50a:	26 b1       	in	r18, 0x06	; 6
     50c:	24 70       	andi	r18, 0x04	; 4
     50e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     510:	06 c0       	rjmp	.+12     	; 0x51e <digitalRead+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     512:	26 b1       	in	r18, 0x06	; 6
     514:	28 70       	andi	r18, 0x08	; 8
     516:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     518:	02 c0       	rjmp	.+4      	; 0x51e <digitalRead+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	23 2b       	or	r18, r19
     522:	09 f4       	brne	.+2      	; 0x526 <digitalRead+0x94>
     524:	80 e0       	ldi	r24, 0x00	; 0
}
     526:	08 95       	ret

00000528 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	82 31       	cpi	r24, 0x12	; 18
     52c:	91 05       	cpc	r25, r1
     52e:	08 f0       	brcs	.+2      	; 0x532 <digitalWrite+0xa>
     530:	64 c0       	rjmp	.+200    	; 0x5fa <digitalWrite+0xd2>
     532:	fc 01       	movw	r30, r24
     534:	e8 5a       	subi	r30, 0xA8	; 168
     536:	ff 4f       	sbci	r31, 0xFF	; 255
     538:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     53c:	66 23       	and	r22, r22
     53e:	11 f0       	breq	.+4      	; 0x544 <digitalWrite+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     540:	58 9a       	sbi	0x0b, 0	; 11
     542:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     544:	58 98       	cbi	0x0b, 0	; 11
     546:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     548:	66 23       	and	r22, r22
     54a:	11 f0       	breq	.+4      	; 0x550 <digitalWrite+0x28>
			{
				PORTD  |= (1 << PORTD1);
     54c:	59 9a       	sbi	0x0b, 1	; 11
     54e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     550:	59 98       	cbi	0x0b, 1	; 11
     552:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     554:	66 23       	and	r22, r22
     556:	11 f0       	breq	.+4      	; 0x55c <digitalWrite+0x34>
			{
				PORTD  |= (1 << PORTD2);
     558:	5a 9a       	sbi	0x0b, 2	; 11
     55a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     55c:	5a 98       	cbi	0x0b, 2	; 11
     55e:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     560:	66 23       	and	r22, r22
     562:	11 f0       	breq	.+4      	; 0x568 <digitalWrite+0x40>
			{
				PORTD  |= (1 << PORTD3);
     564:	5b 9a       	sbi	0x0b, 3	; 11
     566:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     568:	5b 98       	cbi	0x0b, 3	; 11
     56a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     56c:	66 23       	and	r22, r22
     56e:	11 f0       	breq	.+4      	; 0x574 <digitalWrite+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     570:	5c 9a       	sbi	0x0b, 4	; 11
     572:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     574:	5c 98       	cbi	0x0b, 4	; 11
     576:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     578:	66 23       	and	r22, r22
     57a:	11 f0       	breq	.+4      	; 0x580 <digitalWrite+0x58>
			{
				PORTD  |= (1 << PORTD5);
     57c:	5d 9a       	sbi	0x0b, 5	; 11
     57e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     580:	5d 98       	cbi	0x0b, 5	; 11
     582:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     584:	66 23       	and	r22, r22
     586:	11 f0       	breq	.+4      	; 0x58c <digitalWrite+0x64>
			{
				PORTD  |= (1 << PORTD6);
     588:	5e 9a       	sbi	0x0b, 6	; 11
     58a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     58c:	5e 98       	cbi	0x0b, 6	; 11
     58e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     590:	66 23       	and	r22, r22
     592:	11 f0       	breq	.+4      	; 0x598 <digitalWrite+0x70>
			{
				PORTD  |= (1 << PORTD7);
     594:	5f 9a       	sbi	0x0b, 7	; 11
     596:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     598:	5f 98       	cbi	0x0b, 7	; 11
     59a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     59c:	66 23       	and	r22, r22
     59e:	11 f0       	breq	.+4      	; 0x5a4 <digitalWrite+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     5a0:	28 9a       	sbi	0x05, 0	; 5
     5a2:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     5a4:	28 98       	cbi	0x05, 0	; 5
     5a6:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     5a8:	66 23       	and	r22, r22
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <digitalWrite+0x88>
			{
				PORTB  |= (1 << PORTB1);
     5ac:	29 9a       	sbi	0x05, 1	; 5
     5ae:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     5b0:	29 98       	cbi	0x05, 1	; 5
     5b2:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     5b4:	66 23       	and	r22, r22
     5b6:	11 f0       	breq	.+4      	; 0x5bc <digitalWrite+0x94>
			{
				PORTB  |= (1 << PORTB2);
     5b8:	2a 9a       	sbi	0x05, 2	; 5
     5ba:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     5bc:	2a 98       	cbi	0x05, 2	; 5
     5be:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     5c0:	66 23       	and	r22, r22
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <digitalWrite+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     5c4:	2d 9a       	sbi	0x05, 5	; 5
     5c6:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     5c8:	2d 98       	cbi	0x05, 5	; 5
     5ca:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     5cc:	66 23       	and	r22, r22
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <digitalWrite+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5d0:	40 9a       	sbi	0x08, 0	; 8
     5d2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5d4:	40 98       	cbi	0x08, 0	; 8
     5d6:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5d8:	66 23       	and	r22, r22
     5da:	11 f0       	breq	.+4      	; 0x5e0 <digitalWrite+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5dc:	41 9a       	sbi	0x08, 1	; 8
     5de:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5e0:	41 98       	cbi	0x08, 1	; 8
     5e2:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5e4:	66 23       	and	r22, r22
     5e6:	11 f0       	breq	.+4      	; 0x5ec <digitalWrite+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5e8:	42 9a       	sbi	0x08, 2	; 8
     5ea:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5ec:	42 98       	cbi	0x08, 2	; 8
     5ee:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5f0:	66 23       	and	r22, r22
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <digitalWrite+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5f4:	43 9a       	sbi	0x08, 3	; 8
     5f6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5f8:	43 98       	cbi	0x08, 3	; 8
     5fa:	08 95       	ret

000005fc <_Z7bcd2dech>:

uint8_t bcd2dec(uint8_t val)
{
	uint8_t result = 10 * (val >> 4) + (val & 0x0F);

	return( result);
     5fc:	98 2f       	mov	r25, r24
     5fe:	96 95       	lsr	r25
     600:	96 95       	lsr	r25
     602:	96 95       	lsr	r25
     604:	9e 71       	andi	r25, 0x1E	; 30
     606:	29 2f       	mov	r18, r25
     608:	22 0f       	add	r18, r18
     60a:	22 0f       	add	r18, r18
     60c:	92 0f       	add	r25, r18
     60e:	8f 70       	andi	r24, 0x0F	; 15
}
     610:	89 0f       	add	r24, r25
     612:	08 95       	ret

00000614 <_Z8char2bcdPc>:

uint8_t char2bcd(char c[])
{
	uint8_t result = (c[1] - '0') + ((c[0] - '0') << 4);

	return( result);
     614:	fc 01       	movw	r30, r24
     616:	20 81       	ld	r18, Z
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	80 53       	subi	r24, 0x30	; 48
}
     61c:	f0 e1       	ldi	r31, 0x10	; 16
     61e:	2f 9f       	mul	r18, r31
     620:	80 0d       	add	r24, r0
     622:	11 24       	eor	r1, r1
     624:	08 95       	ret

00000626 <_Z14epoch_from_ltmP2tm>:

		return(epoch);
	}
	
	time_t epoch_from_ltm(tm *ltm)
	{
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
		time_t epoch = ltm->tm_sec + ltm->tm_min * 60 + ltm->tm_hour * 3600L + ltm->tm_yday * 86400L +
		(ltm->tm_year - 70) * 31536000L + ((ltm->tm_year - 69) / 4) * 86400L -
     634:	ee 81       	ldd	r30, Y+6	; 0x06
     636:	ff 81       	ldd	r31, Y+7	; 0x07
		((ltm->tm_year - 1) / 100) * 86400L + ((ltm->tm_year + 299) / 400) * 86400L;
		
		return(epoch);
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	c8 80       	ld	r12, Y
     63c:	0c 2c       	mov	r0, r12
     63e:	00 0c       	add	r0, r0
     640:	dd 08       	sbc	r13, r13
     642:	9c e3       	ldi	r25, 0x3C	; 60
     644:	89 02       	muls	r24, r25
     646:	c0 0c       	add	r12, r0
     648:	d1 1c       	adc	r13, r1
     64a:	11 24       	eor	r1, r1
     64c:	0d 2c       	mov	r0, r13
     64e:	00 0c       	add	r0, r0
     650:	ee 08       	sbc	r14, r14
     652:	ff 08       	sbc	r15, r15
     654:	aa 81       	ldd	r26, Y+2	; 0x02
     656:	0a 2e       	mov	r0, r26
     658:	00 0c       	add	r0, r0
     65a:	bb 0b       	sbc	r27, r27
     65c:	20 e1       	ldi	r18, 0x10	; 16
     65e:	3e e0       	ldi	r19, 0x0E	; 14
     660:	0e 94 13 31 	call	0x6226	; 0x6226 <__usmulhisi3>
     664:	c6 0e       	add	r12, r22
     666:	d7 1e       	adc	r13, r23
     668:	e8 1e       	adc	r14, r24
     66a:	f9 1e       	adc	r15, r25
     66c:	a8 85       	ldd	r26, Y+8	; 0x08
     66e:	b9 85       	ldd	r27, Y+9	; 0x09
     670:	20 e8       	ldi	r18, 0x80	; 128
     672:	31 e5       	ldi	r19, 0x51	; 81
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 25 31 	call	0x624a	; 0x624a <__mulshisi3>
     67c:	c6 0e       	add	r12, r22
     67e:	d7 1e       	adc	r13, r23
     680:	e8 1e       	adc	r14, r24
     682:	f9 1e       	adc	r15, r25
     684:	df 01       	movw	r26, r30
     686:	a6 54       	subi	r26, 0x46	; 70
     688:	b1 09       	sbc	r27, r1
     68a:	20 e8       	ldi	r18, 0x80	; 128
     68c:	33 e3       	ldi	r19, 0x33	; 51
     68e:	41 ee       	ldi	r20, 0xE1	; 225
     690:	51 e0       	ldi	r21, 0x01	; 1
     692:	0e 94 25 31 	call	0x624a	; 0x624a <__mulshisi3>
     696:	c6 0e       	add	r12, r22
     698:	d7 1e       	adc	r13, r23
     69a:	e8 1e       	adc	r14, r24
     69c:	f9 1e       	adc	r15, r25
     69e:	cf 01       	movw	r24, r30
     6a0:	85 54       	subi	r24, 0x45	; 69
     6a2:	91 09       	sbc	r25, r1
     6a4:	dc 01       	movw	r26, r24
     6a6:	0a f4       	brpl	.+2      	; 0x6aa <_Z14epoch_from_ltmP2tm+0x84>
     6a8:	13 96       	adiw	r26, 0x03	; 3
     6aa:	b5 95       	asr	r27
     6ac:	a7 95       	ror	r26
     6ae:	b5 95       	asr	r27
     6b0:	a7 95       	ror	r26
     6b2:	20 e8       	ldi	r18, 0x80	; 128
     6b4:	31 e5       	ldi	r19, 0x51	; 81
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	0e 94 25 31 	call	0x624a	; 0x624a <__mulshisi3>
     6be:	c6 0e       	add	r12, r22
     6c0:	d7 1e       	adc	r13, r23
     6c2:	e8 1e       	adc	r14, r24
     6c4:	f9 1e       	adc	r15, r25
     6c6:	cf 01       	movw	r24, r30
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	64 e6       	ldi	r22, 0x64	; 100
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
     6d2:	db 01       	movw	r26, r22
     6d4:	20 e8       	ldi	r18, 0x80	; 128
     6d6:	3e ea       	ldi	r19, 0xAE	; 174
     6d8:	4e ef       	ldi	r20, 0xFE	; 254
     6da:	5f ef       	ldi	r21, 0xFF	; 255
     6dc:	0e 94 25 31 	call	0x624a	; 0x624a <__mulshisi3>
     6e0:	c6 0e       	add	r12, r22
     6e2:	d7 1e       	adc	r13, r23
     6e4:	e8 1e       	adc	r14, r24
     6e6:	f9 1e       	adc	r15, r25
     6e8:	cf 01       	movw	r24, r30
     6ea:	85 5d       	subi	r24, 0xD5	; 213
     6ec:	9e 4f       	sbci	r25, 0xFE	; 254
     6ee:	60 e9       	ldi	r22, 0x90	; 144
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
     6f6:	db 01       	movw	r26, r22
     6f8:	20 e8       	ldi	r18, 0x80	; 128
     6fa:	31 e5       	ldi	r19, 0x51	; 81
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	0e 94 25 31 	call	0x624a	; 0x624a <__mulshisi3>
     704:	6c 0d       	add	r22, r12
     706:	7d 1d       	adc	r23, r13
     708:	8e 1d       	adc	r24, r14
     70a:	9f 1d       	adc	r25, r15
	}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
     718:	08 95       	ret

0000071a <_Z13RTC_get_epochv>:

	time_t RTC_get_epoch(void)
	{
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	63 97       	sbiw	r28, 0x13	; 19
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
		time_t epoch = 0;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
     738:	ae 01       	movw	r20, r28
     73a:	4f 5f       	subi	r20, 0xFF	; 255
     73c:	5f 4f       	sbci	r21, 0xFF	; 255
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	da 01       	movw	r26, r20
     742:	1d 92       	st	X+, r1
     744:	8a 95       	dec	r24
     746:	e9 f7       	brne	.-6      	; 0x742 <_Z13RTC_get_epochv+0x28>

		if(!i2c_device_read(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7))
     748:	27 e0       	ldi	r18, 0x07	; 7
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	80 ed       	ldi	r24, 0xD0	; 208
     74e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <i2c_device_read>
     752:	81 11       	cpse	r24, r1
     754:	76 c0       	rjmp	.+236    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		{
			struct tm ltm = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
     756:	fe 01       	movw	r30, r28
     758:	38 96       	adiw	r30, 0x08	; 8
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	df 01       	movw	r26, r30
     75e:	1d 92       	st	X+, r1
     760:	8a 95       	dec	r24
     762:	e9 f7       	brne	.-6      	; 0x75e <_Z13RTC_get_epochv+0x44>
			uint8_t hour10;
			uint8_t hour;
			BOOL am_pm;
			BOOL twelvehour;

			am_pm = ((data[2] >> 5) & 0x01);
     764:	2b 81       	ldd	r18, Y+3	; 0x03
     766:	42 2f       	mov	r20, r18
     768:	50 e0       	ldi	r21, 0x00	; 0
			hour10 = ((data[2] >> 4) & 0x01);
     76a:	ca 01       	movw	r24, r20
     76c:	95 95       	asr	r25
     76e:	87 95       	ror	r24
     770:	95 95       	asr	r25
     772:	87 95       	ror	r24
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	95 95       	asr	r25
     77a:	87 95       	ror	r24
     77c:	81 70       	andi	r24, 0x01	; 1
			hour = (data[2] & 0x0f);
     77e:	2f 70       	andi	r18, 0x0F	; 15

			twelvehour = ((data[2] >> 6) & 0x01);

			if(!twelvehour && am_pm)
     780:	ba 01       	movw	r22, r20
     782:	06 2e       	mov	r0, r22
     784:	67 2f       	mov	r22, r23
     786:	00 0c       	add	r0, r0
     788:	66 1f       	adc	r22, r22
     78a:	77 0b       	sbc	r23, r23
     78c:	00 0c       	add	r0, r0
     78e:	66 1f       	adc	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	60 fd       	sbrc	r22, 0
     794:	0c c0       	rjmp	.+24     	; 0x7ae <_Z13RTC_get_epochv+0x94>
     796:	55 95       	asr	r21
     798:	47 95       	ror	r20
     79a:	55 95       	asr	r21
     79c:	47 95       	ror	r20
     79e:	55 95       	asr	r21
     7a0:	47 95       	ror	r20
     7a2:	55 95       	asr	r21
     7a4:	47 95       	ror	r20
     7a6:	55 95       	asr	r21
     7a8:	47 95       	ror	r20
     7aa:	40 fd       	sbrc	r20, 0
			{
				hour10 = 2;
     7ac:	82 e0       	ldi	r24, 0x02	; 2
			}
			
			hours = 10 * hour10 + hour;
     7ae:	88 0f       	add	r24, r24
     7b0:	d8 2e       	mov	r13, r24
     7b2:	dd 0c       	add	r13, r13
     7b4:	dd 0c       	add	r13, r13
     7b6:	8d 0d       	add	r24, r13
     7b8:	d8 2e       	mov	r13, r24
     7ba:	d2 0e       	add	r13, r18
			
			year += (int16_t)bcd2dec(data[6]);
     7bc:	8f 81       	ldd	r24, Y+7	; 0x07
     7be:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     7c2:	e8 2e       	mov	r14, r24
     7c4:	f1 2c       	mov	r15, r1
			ltm.tm_year = year;                         /* year since 1900 */
     7c6:	c7 01       	movw	r24, r14
     7c8:	8c 59       	subi	r24, 0x9C	; 156
     7ca:	9f 4f       	sbci	r25, 0xFF	; 255
     7cc:	9f 87       	std	Y+15, r25	; 0x0f
     7ce:	8e 87       	std	Y+14, r24	; 0x0e

			year += 1900;                               /* adjust year to calendar year */
     7d0:	b0 e3       	ldi	r27, 0x30	; 48
     7d2:	eb 1a       	sub	r14, r27
     7d4:	b8 ef       	ldi	r27, 0xF8	; 248
     7d6:	fb 0a       	sbc	r15, r27

			month = bcd2dec(data[5]);
     7d8:	8e 81       	ldd	r24, Y+6	; 0x06
     7da:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     7de:	08 2f       	mov	r16, r24
			ltm.tm_mon = month - 1;                     /* mon 0 to 11 */
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	80 0f       	add	r24, r16
     7e4:	8d 87       	std	Y+13, r24	; 0x0d

			date = bcd2dec(data[4]);
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
			ltm.tm_mday = date;                         /* month day 1 to 31 */
     7ec:	8b 87       	std	Y+11, r24	; 0x0b

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     7ee:	02 30       	cpi	r16, 0x02	; 2
     7f0:	70 f0       	brcs	.+28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7f2:	11 e0       	ldi	r17, 0x01	; 1
			{
				ltm.tm_yday += month_length(year, mon);;
     7f4:	61 2f       	mov	r22, r17
     7f6:	c7 01       	movw	r24, r14
     7f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <month_length>
     7fc:	28 89       	ldd	r18, Y+16	; 0x10
     7fe:	39 89       	ldd	r19, Y+17	; 0x11
     800:	28 0f       	add	r18, r24
     802:	31 1d       	adc	r19, r1
     804:	39 8b       	std	Y+17, r19	; 0x11
     806:	28 8b       	std	Y+16, r18	; 0x10

			date = bcd2dec(data[4]);
			ltm.tm_mday = date;                         /* month day 1 to 31 */

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     808:	1f 5f       	subi	r17, 0xFF	; 255
     80a:	01 13       	cpse	r16, r17
     80c:	f3 cf       	rjmp	.-26     	; 0x7f4 <_Z13RTC_get_epochv+0xda>
			{
				ltm.tm_yday += month_length(year, mon);;
			}

			ltm.tm_yday += (ltm.tm_mday - 1);
     80e:	8b 85       	ldd	r24, Y+11	; 0x0b
     810:	08 2e       	mov	r0, r24
     812:	00 0c       	add	r0, r0
     814:	99 0b       	sbc	r25, r25
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	28 89       	ldd	r18, Y+16	; 0x10
     81a:	39 89       	ldd	r19, Y+17	; 0x11
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	99 8b       	std	Y+17, r25	; 0x11
     822:	88 8b       	std	Y+16, r24	; 0x10

			seconds = bcd2dec(data[0]);
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     82a:	18 2f       	mov	r17, r24
			minutes = bcd2dec(data[1]);
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>

			ltm.tm_hour = hours;
     832:	da 86       	std	Y+10, r13	; 0x0a
			ltm.tm_min = minutes;
     834:	89 87       	std	Y+9, r24	; 0x09
			ltm.tm_sec = seconds;
     836:	18 87       	std	Y+8, r17	; 0x08

			epoch = epoch_from_ltm(&ltm);
     838:	ce 01       	movw	r24, r28
     83a:	08 96       	adiw	r24, 0x08	; 8
     83c:	0e 94 13 03 	call	0x626	; 0x626 <_Z14epoch_from_ltmP2tm>
     840:	03 c0       	rjmp	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		return(epoch);
	}

	time_t RTC_get_epoch(void)
	{
		time_t epoch = 0;
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	cb 01       	movw	r24, r22

			epoch = epoch_from_ltm(&ltm);
		}

		return( epoch);
	}
     848:	63 96       	adiw	r28, 0x13	; 19
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	08 95       	ret

00000864 <_Z13RTC_get_epochPbPc>:

	
/* Returns the UNIX epoch value for the character string passed in datetime. If datetime is null then it returns
the UNIX epoch for the time held in the DS3231 RTC. If error is not null then it holds 1 if an error occurred */	
	time_t RTC_get_epoch(bool *error, char *datetime)
	{
     864:	7f 92       	push	r7
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	2c 97       	sbiw	r28, 0x0c	; 12
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	6c 01       	movw	r12, r24
     890:	8b 01       	movw	r16, r22
		time_t epoch = 0;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };		

		struct tm ltm = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
     892:	fe 01       	movw	r30, r28
     894:	31 96       	adiw	r30, 0x01	; 1
     896:	8c e0       	ldi	r24, 0x0C	; 12
     898:	df 01       	movw	r26, r30
     89a:	1d 92       	st	X+, r1
     89c:	8a 95       	dec	r24
     89e:	e9 f7       	brne	.-6      	; 0x89a <_Z13RTC_get_epochPbPc+0x36>
		uint8_t date;
		uint8_t hours;
		uint8_t minutes;
		uint8_t seconds;

		if(datetime)                            /* String format "YYMMDDhhmmss" */
     8a0:	61 15       	cp	r22, r1
     8a2:	71 05       	cpc	r23, r1
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <_Z13RTC_get_epochPbPc+0x44>
     8a6:	64 c0       	rjmp	.+200    	; 0x970 <__stack+0x71>
		{
			data[0] = char2bcd(&datetime[10]);  /* seconds in BCD */
     8a8:	cb 01       	movw	r24, r22
     8aa:	0a 96       	adiw	r24, 0x0a	; 10
     8ac:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8b0:	a8 2e       	mov	r10, r24
			data[1] = char2bcd(&datetime[8]);   /* minutes in BCD */
     8b2:	c8 01       	movw	r24, r16
     8b4:	08 96       	adiw	r24, 0x08	; 8
     8b6:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8ba:	b8 2e       	mov	r11, r24
			data[2] = char2bcd(&datetime[6]);   /* hours in BCD */
     8bc:	c8 01       	movw	r24, r16
     8be:	06 96       	adiw	r24, 0x06	; 6
     8c0:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8c4:	f8 2e       	mov	r15, r24
			/* data[3] =  not used */
			data[4] = char2bcd(&datetime[4]);   /* day of month in BCD */
     8c6:	c8 01       	movw	r24, r16
     8c8:	04 96       	adiw	r24, 0x04	; 4
     8ca:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8ce:	88 2e       	mov	r8, r24
			data[5] = char2bcd(&datetime[2]);   /* month in BCD */
     8d0:	c8 01       	movw	r24, r16
     8d2:	02 96       	adiw	r24, 0x02	; 2
     8d4:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8d8:	78 2e       	mov	r7, r24
			data[6] = char2bcd(&datetime[0]);   /* 2-digit year in BCD */
     8da:	c8 01       	movw	r24, r16
     8dc:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     8e0:	18 2f       	mov	r17, r24

			hours = bcd2dec(data[2]); /* Must be calculated here */
     8e2:	8f 2d       	mov	r24, r15
     8e4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     8e8:	98 2e       	mov	r9, r24
			
			year += (int16_t)bcd2dec(data[6]);
     8ea:	81 2f       	mov	r24, r17
     8ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     8f0:	e8 2e       	mov	r14, r24
     8f2:	f1 2c       	mov	r15, r1
			ltm.tm_year = year;                         /* year since 1900 */
     8f4:	c7 01       	movw	r24, r14
     8f6:	8c 59       	subi	r24, 0x9C	; 156
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	98 87       	std	Y+8, r25	; 0x08
     8fc:	8f 83       	std	Y+7, r24	; 0x07

			year += 1900;                               /* adjust year to calendar year */
     8fe:	b0 e3       	ldi	r27, 0x30	; 48
     900:	eb 1a       	sub	r14, r27
     902:	b8 ef       	ldi	r27, 0xF8	; 248
     904:	fb 0a       	sbc	r15, r27

			month = bcd2dec(data[5]);
     906:	87 2d       	mov	r24, r7
     908:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     90c:	08 2f       	mov	r16, r24
			ltm.tm_mon = month - 1;                     /* mon 0 to 11 */
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	80 0f       	add	r24, r16
     912:	8e 83       	std	Y+6, r24	; 0x06

			date = bcd2dec(data[4]);
     914:	88 2d       	mov	r24, r8
     916:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
			ltm.tm_mday = date;                         /* month day 1 to 31 */
     91a:	8c 83       	std	Y+4, r24	; 0x04

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     91c:	02 30       	cpi	r16, 0x02	; 2
     91e:	70 f0       	brcs	.+28     	; 0x93c <__stack+0x3d>
     920:	11 e0       	ldi	r17, 0x01	; 1
			{
				ltm.tm_yday += month_length(year, mon);;
     922:	61 2f       	mov	r22, r17
     924:	c7 01       	movw	r24, r14
     926:	0e 94 58 01 	call	0x2b0	; 0x2b0 <month_length>
     92a:	29 85       	ldd	r18, Y+9	; 0x09
     92c:	3a 85       	ldd	r19, Y+10	; 0x0a
     92e:	28 0f       	add	r18, r24
     930:	31 1d       	adc	r19, r1
     932:	3a 87       	std	Y+10, r19	; 0x0a
     934:	29 87       	std	Y+9, r18	; 0x09

			date = bcd2dec(data[4]);
			ltm.tm_mday = date;                         /* month day 1 to 31 */

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     936:	1f 5f       	subi	r17, 0xFF	; 255
     938:	01 13       	cpse	r16, r17
     93a:	f3 cf       	rjmp	.-26     	; 0x922 <__stack+0x23>
			{
				ltm.tm_yday += month_length(year, mon);;
			}

			ltm.tm_yday += (ltm.tm_mday - 1);
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	08 2e       	mov	r0, r24
     940:	00 0c       	add	r0, r0
     942:	99 0b       	sbc	r25, r25
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	29 85       	ldd	r18, Y+9	; 0x09
     948:	3a 85       	ldd	r19, Y+10	; 0x0a
     94a:	82 0f       	add	r24, r18
     94c:	93 1f       	adc	r25, r19
     94e:	9a 87       	std	Y+10, r25	; 0x0a
     950:	89 87       	std	Y+9, r24	; 0x09

			seconds = bcd2dec(data[0]);
     952:	8a 2d       	mov	r24, r10
     954:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>
     958:	18 2f       	mov	r17, r24
			minutes = bcd2dec(data[1]);
     95a:	8b 2d       	mov	r24, r11
     95c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z7bcd2dech>

			ltm.tm_hour = hours;
     960:	9b 82       	std	Y+3, r9	; 0x03
			ltm.tm_min = minutes;
     962:	8a 83       	std	Y+2, r24	; 0x02
			ltm.tm_sec = seconds;
     964:	19 83       	std	Y+1, r17	; 0x01

			epoch = epoch_from_ltm(&ltm);
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	0e 94 13 03 	call	0x626	; 0x626 <_Z14epoch_from_ltmP2tm>
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
		}
		else
		{
			epoch = RTC_get_epoch();
     970:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
		}

		if(error)
     974:	c1 14       	cp	r12, r1
     976:	d1 04       	cpc	r13, r1
     978:	49 f0       	breq	.+18     	; 0x98c <__stack+0x8d>
		{
			*error = (epoch == 0);
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	61 15       	cp	r22, r1
     97e:	71 05       	cpc	r23, r1
     980:	81 05       	cpc	r24, r1
     982:	91 05       	cpc	r25, r1
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f6 01       	movw	r30, r12
     98a:	20 83       	st	Z, r18
		}

		return(epoch);
	}
     98c:	2c 96       	adiw	r28, 0x0c	; 12
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	9f 90       	pop	r9
     9ae:	8f 90       	pop	r8
     9b0:	7f 90       	pop	r7
     9b2:	08 95       	ret

000009b4 <_Z16RTC_set_datetimePc>:
		return( epoch);
	}
	
	
	BOOL RTC_set_datetime(char *datetime)
	{
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	27 97       	sbiw	r28, 0x07	; 7
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
		BOOL failure = TRUE;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
     9cc:	fe 01       	movw	r30, r28
     9ce:	31 96       	adiw	r30, 0x01	; 1
     9d0:	27 e0       	ldi	r18, 0x07	; 7
     9d2:	df 01       	movw	r26, r30
     9d4:	1d 92       	st	X+, r1
     9d6:	2a 95       	dec	r18
     9d8:	e9 f7       	brne	.-6      	; 0x9d4 <_Z16RTC_set_datetimePc+0x20>

		if(datetime)                            /* String format "YYMMDDhhmmss" */
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	31 f1       	breq	.+76     	; 0xa2a <_Z16RTC_set_datetimePc+0x76>
     9de:	8c 01       	movw	r16, r24
		{
			data[0] = char2bcd(&datetime[10]);  /* seconds in BCD */
     9e0:	0a 96       	adiw	r24, 0x0a	; 10
     9e2:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     9e6:	89 83       	std	Y+1, r24	; 0x01
			data[1] = char2bcd(&datetime[8]);   /* minutes in BCD */
     9e8:	c8 01       	movw	r24, r16
     9ea:	08 96       	adiw	r24, 0x08	; 8
     9ec:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     9f0:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = char2bcd(&datetime[6]);   /* hours in BCD 24-hour format */
     9f2:	c8 01       	movw	r24, r16
     9f4:	06 96       	adiw	r24, 0x06	; 6
     9f6:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     9fa:	8b 83       	std	Y+3, r24	; 0x03
			/* data[3] =  not used */
			data[4] = char2bcd(&datetime[4]);   /* day of month in BCD */
     9fc:	c8 01       	movw	r24, r16
     9fe:	04 96       	adiw	r24, 0x04	; 4
     a00:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     a04:	8d 83       	std	Y+5, r24	; 0x05
			data[5] = char2bcd(&datetime[2]);   /* month in BCD */
     a06:	c8 01       	movw	r24, r16
     a08:	02 96       	adiw	r24, 0x02	; 2
     a0a:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     a0e:	8e 83       	std	Y+6, r24	; 0x06
			data[6] = char2bcd(&datetime[0]);   /* 2-digit year in BCD */
     a10:	c8 01       	movw	r24, r16
     a12:	0e 94 0a 03 	call	0x614	; 0x614 <_Z8char2bcdPc>
     a16:	8f 83       	std	Y+7, r24	; 0x07

			failure = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7);		
     a18:	27 e0       	ldi	r18, 0x07	; 7
     a1a:	ae 01       	movw	r20, r28
     a1c:	4f 5f       	subi	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	80 ed       	ldi	r24, 0xD0	; 208
     a24:	0e 94 3d 0a 	call	0x147a	; 0x147a <i2c_device_write>
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <_Z16RTC_set_datetimePc+0x78>
	}
	
	
	BOOL RTC_set_datetime(char *datetime)
	{
		BOOL failure = TRUE;
     a2a:	81 e0       	ldi	r24, 0x01	; 1

			failure = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7);		
		}
		
		return(failure);
	}
     a2c:	27 96       	adiw	r28, 0x07	; 7
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <_Z10RTC_1s_sqwh>:


	BOOL RTC_1s_sqw(BOOL enable)
	{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	1f 92       	push	r1
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
		BOOL fail;
		
		if(enable)
     a4c:	88 23       	and	r24, r24
     a4e:	51 f0       	breq	.+20     	; 0xa64 <_Z10RTC_1s_sqwh+0x22>
		{
			uint8_t byte = 0x00;
     a50:	19 82       	std	Y+1, r1	; 0x01
			fail = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_CONTROL, &byte, 1);
     a52:	21 e0       	ldi	r18, 0x01	; 1
     a54:	ae 01       	movw	r20, r28
     a56:	4f 5f       	subi	r20, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	6e e0       	ldi	r22, 0x0E	; 14
     a5c:	80 ed       	ldi	r24, 0xD0	; 208
     a5e:	0e 94 3d 0a 	call	0x147a	; 0x147a <i2c_device_write>
     a62:	0a c0       	rjmp	.+20     	; 0xa78 <_Z10RTC_1s_sqwh+0x36>
		}
		else
		{
			uint8_t byte = 0x04;
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	89 83       	std	Y+1, r24	; 0x01
			fail = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_CONTROL, &byte, 1);
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	ae 01       	movw	r20, r28
     a6c:	4f 5f       	subi	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	6e e0       	ldi	r22, 0x0E	; 14
     a72:	80 ed       	ldi	r24, 0xD0	; 208
     a74:	0e 94 3d 0a 	call	0x147a	; 0x147a <i2c_device_write>
		}
		
		return(fail);
	}
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     a80:	08 95       	ret

00000a82 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     a82:	08 95       	ret

00000a84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     a8c:	41 15       	cp	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	09 f4       	brne	.+2      	; 0xa94 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     a92:	75 c0       	rjmp	.+234    	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     a94:	86 2f       	mov	r24, r22
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	fc 01       	movw	r30, r24
     a9a:	3b 97       	sbiw	r30, 0x0b	; 11
     a9c:	ee 30       	cpi	r30, 0x0E	; 14
     a9e:	f1 05       	cpc	r31, r1
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     aa2:	6d c0       	rjmp	.+218    	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     aa4:	da 01       	movw	r26, r20
     aa6:	e6 59       	subi	r30, 0x96	; 150
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     aae:	87 e2       	ldi	r24, 0x27	; 39
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	5f c0       	rjmp	.+190    	; 0xb72 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     ab4:	81 e2       	ldi	r24, 0x21	; 33
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	55 c0       	rjmp	.+170    	; 0xb64 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     aba:	8d e1       	ldi	r24, 0x1D	; 29
     abc:	93 e0       	ldi	r25, 0x03	; 3
     abe:	49 c0       	rjmp	.+146    	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     ac0:	8a 01       	movw	r16, r20
     ac2:	0f 5f       	subi	r16, 0xFF	; 255
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
     ac6:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     ac8:	66 23       	and	r22, r22
     aca:	71 f0       	breq	.+28     	; 0xae8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     ad0:	21 96       	adiw	r28, 0x01	; 1
     ad2:	ce 01       	movw	r24, r28
     ad4:	8b 59       	subi	r24, 0x9B	; 155
     ad6:	9d 4f       	sbci	r25, 0xFD	; 253
     ad8:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <eeprom_update_byte>
				c = *char_addr++;
     adc:	f8 01       	movw	r30, r16
     ade:	61 91       	ld	r22, Z+
     ae0:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     ae2:	61 11       	cpse	r22, r1
     ae4:	f5 cf       	rjmp	.-22     	; 0xad0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     ae8:	c0 e0       	ldi	r28, 0x00	; 0
     aea:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	ce 01       	movw	r24, r28
     af0:	8a 59       	subi	r24, 0x9A	; 154
     af2:	9d 4f       	sbci	r25, 0xFD	; 253
     af4:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <eeprom_update_byte>
		}
		break;
     af8:	42 c0       	rjmp	.+132    	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     afa:	8a 01       	movw	r16, r20
     afc:	0f 5f       	subi	r16, 0xFF	; 255
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
     b00:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     b02:	66 23       	and	r22, r22
     b04:	91 f0       	breq	.+36     	; 0xb2a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     b06:	c0 e0       	ldi	r28, 0x00	; 0
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     b0c:	c8 30       	cpi	r28, 0x08	; 8
     b0e:	d1 05       	cpc	r29, r1
     b10:	71 f0       	breq	.+28     	; 0xb2e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	ce 01       	movw	r24, r28
     b16:	8e 5e       	subi	r24, 0xEE	; 238
     b18:	9c 4f       	sbci	r25, 0xFC	; 252
     b1a:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <eeprom_update_byte>
				c = *uint8_addr++;
     b1e:	f8 01       	movw	r30, r16
     b20:	61 91       	ld	r22, Z+
     b22:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     b24:	61 11       	cpse	r22, r1
     b26:	f2 cf       	rjmp	.-28     	; 0xb0c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	ce 01       	movw	r24, r28
     b32:	8d 5e       	subi	r24, 0xED	; 237
     b34:	9c 4f       	sbci	r25, 0xFC	; 252
     b36:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <eeprom_update_byte>
		}
		break;
     b3a:	21 c0       	rjmp	.+66     	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     b3c:	8b e2       	ldi	r24, 0x2B	; 43
     b3e:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     b40:	08 c0       	rjmp	.+16     	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>

		case Ptt_periodic_reset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.ptt_periodic_reset);
     b42:	8c e2       	ldi	r24, 0x2C	; 44
     b44:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     b48:	8c e1       	ldi	r24, 0x1C	; 28
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     b4e:	8e e1       	ldi	r24, 0x1E	; 30
     b50:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     b52:	6c 91       	ld	r22, X
     b54:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <eeprom_update_byte>
     b58:	12 c0       	rjmp	.+36     	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     b5a:	8f e1       	ldi	r24, 0x1F	; 31
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     b60:	8d e2       	ldi	r24, 0x2D	; 45
     b62:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     b64:	6d 91       	ld	r22, X+
     b66:	7c 91       	ld	r23, X
     b68:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <eeprom_update_word>
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     b6e:	83 e2       	ldi	r24, 0x23	; 35
     b70:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     b72:	4d 91       	ld	r20, X+
     b74:	5d 91       	ld	r21, X+
     b76:	6d 91       	ld	r22, X+
     b78:	7c 91       	ld	r23, X
     b7a:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <eeprom_update_dword>
	}
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     b94:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <lb_enabled>
     b98:	88 23       	and	r24, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     b9c:	46 c0       	rjmp	.+140    	; 0xc2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     b9e:	8c 2f       	mov	r24, r28
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8b 30       	cpi	r24, 0x0B	; 11
     ba4:	91 05       	cpc	r25, r1
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     ba8:	40 c0       	rjmp	.+128    	; 0xc2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     baa:	fc 01       	movw	r30, r24
     bac:	e8 58       	subi	r30, 0x88	; 136
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     bb4:	8c e2       	ldi	r24, 0x2C	; 44
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	30 c0       	rjmp	.+96     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     bba:	8a e8       	ldi	r24, 0x8A	; 138
     bbc:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     bbe:	2d c0       	rjmp	.+90     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     bc0:	80 eb       	ldi	r24, 0xB0	; 176
     bc2:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     bc4:	2a c0       	rjmp	.+84     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     bc6:	87 ed       	ldi	r24, 0xD7	; 215
     bc8:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     bcc:	88 ef       	ldi	r24, 0xF8	; 248
     bce:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     bd0:	24 c0       	rjmp	.+72     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     bd2:	83 e1       	ldi	r24, 0x13	; 19
     bd4:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bd6:	21 c0       	rjmp	.+66     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     bd8:	89 e2       	ldi	r24, 0x29	; 41
     bda:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     bdc:	1e c0       	rjmp	.+60     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     bde:	8e e3       	ldi	r24, 0x3E	; 62
     be0:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     be2:	1b c0       	rjmp	.+54     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     be4:	82 e5       	ldi	r24, 0x52	; 82
     be6:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     be8:	18 c0       	rjmp	.+48     	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     bea:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     bec:	cc 23       	and	r28, r28
     bee:	e9 f0       	breq	.+58     	; 0xc2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lb_echo_char>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     bf6:	78 01       	movw	r14, r16
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	e8 1a       	sub	r14, r24
     bfc:	f8 0a       	sbc	r15, r24
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     c04:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     c06:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <linkbusTxInProgress>
     c0a:	81 11       	cpse	r24, r1
     c0c:	fc cf       	rjmp	.-8      	; 0xc06 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     c0e:	ed cf       	rjmp	.-38     	; 0xbea <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     c16:	82 e6       	ldi	r24, 0x62	; 98
     c18:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     c1a:	8c 01       	movw	r16, r24
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     c24:	c8 2f       	mov	r28, r24

		while(c)
     c26:	81 11       	cpse	r24, r1
     c28:	e3 cf       	rjmp	.-58     	; 0xbf0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     c42:	8d e2       	ldi	r24, 0x2D	; 45
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     c4a:	8b 3b       	cpi	r24, 0xBB	; 187
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <_ZN13EepromManager11readNonVolsEv+0x1c>
     c50:	b6 c0       	rjmp	.+364    	; 0xdbe <_ZN13EepromManager11readNonVolsEv+0x188>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     c52:	8c e1       	ldi	r24, 0x1C	; 28
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	85 30       	cpi	r24, 0x05	; 5
     c5e:	91 05       	cpc	r25, r1
     c60:	14 f4       	brge	.+4      	; 0xc66 <_ZN13EepromManager11readNonVolsEv+0x30>
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	85 31       	cpi	r24, 0x15	; 21
     c68:	91 05       	cpc	r25, r1
     c6a:	14 f0       	brlt	.+4      	; 0xc70 <_ZN13EepromManager11readNonVolsEv+0x3a>
     c6c:	84 e1       	ldi	r24, 0x14	; 20
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     c74:	8d e1       	ldi	r24, 0x1D	; 29
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     c7c:	82 31       	cpi	r24, 0x12	; 18
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <_ZN13EepromManager11readNonVolsEv+0x4c>
     c80:	81 e1       	ldi	r24, 0x11	; 17
     c82:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_fox>
		g_AM_audio_frequency = (AM_Tone_Freq_t)eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     c86:	8e e1       	ldi	r24, 0x1E	; 30
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     c8e:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     c92:	8f e1       	ldi	r24, 0x1F	; 31
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <eeprom_read_word>
     c9a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_atmega_temp_calibration+0x1>
     c9e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     ca2:	81 e2       	ldi	r24, 0x21	; 33
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <eeprom_read_word>
     caa:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <g_rv3028_offset+0x1>
     cae:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     cb2:	83 e2       	ldi	r24, 0x23	; 35
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 94 35 	call	0x6b28	; 0x6b28 <eeprom_read_dword>
     cba:	60 93 55 05 	sts	0x0555, r22	; 0x800555 <g_event_start_epoch>
     cbe:	70 93 56 05 	sts	0x0556, r23	; 0x800556 <g_event_start_epoch+0x1>
     cc2:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <g_event_start_epoch+0x2>
     cc6:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     cca:	87 e2       	ldi	r24, 0x27	; 39
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	0e 94 94 35 	call	0x6b28	; 0x6b28 <eeprom_read_dword>
     cd2:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_event_finish_epoch>
     cd6:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_event_finish_epoch+0x1>
     cda:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_event_finish_epoch+0x2>
     cde:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     ce2:	8b e2       	ldi	r24, 0x2B	; 43
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     cea:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_utc_offset>
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));
     cee:	8c e2       	ldi	r24, 0x2C	; 44
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     cf6:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_ptt_periodic_reset_enabled>
     cfa:	06 e6       	ldi	r16, 0x66	; 102
     cfc:	12 e0       	ldi	r17, 0x02	; 2
     cfe:	c5 ef       	ldi	r28, 0xF5	; 245
     d00:	d4 e0       	ldi	r29, 0x04	; 4
     d02:	0f 2e       	mov	r0, r31
     d04:	f9 e0       	ldi	r31, 0x09	; 9
     d06:	ef 2e       	mov	r14, r31
     d08:	f5 e0       	ldi	r31, 0x05	; 5
     d0a:	ff 2e       	mov	r15, r31
     d0c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     d0e:	c8 01       	movw	r24, r16
     d10:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     d14:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     d16:	81 11       	cpse	r24, r1
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <_ZN13EepromManager11readNonVolsEv+0xfa>
     d1a:	03 e1       	ldi	r16, 0x13	; 19
     d1c:	13 e0       	ldi	r17, 0x03	; 3
     d1e:	c2 e1       	ldi	r28, 0x12	; 18
     d20:	d5 e0       	ldi	r29, 0x05	; 5
     d22:	0f 2e       	mov	r0, r31
     d24:	fa e1       	ldi	r31, 0x1A	; 26
     d26:	ef 2e       	mov	r14, r31
     d28:	f5 e0       	ldi	r31, 0x05	; 5
     d2a:	ff 2e       	mov	r15, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <_ZN13EepromManager11readNonVolsEv+0x106>
     d30:	0f 5f       	subi	r16, 0xFF	; 255
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     d34:	ce 15       	cp	r28, r14
     d36:	df 05       	cpc	r29, r15
     d38:	51 f7       	brne	.-44     	; 0xd0e <_ZN13EepromManager11readNonVolsEv+0xd8>
     d3a:	ef cf       	rjmp	.-34     	; 0xd1a <_ZN13EepromManager11readNonVolsEv+0xe4>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     d42:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     d44:	88 23       	and	r24, r24
     d46:	29 f0       	breq	.+10     	; 0xd52 <_ZN13EepromManager11readNonVolsEv+0x11c>
     d48:	0f 5f       	subi	r16, 0xFF	; 255
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     d4c:	ce 15       	cp	r28, r14
     d4e:	df 05       	cpc	r29, r15
     d50:	a9 f7       	brne	.-22     	; 0xd3c <_ZN13EepromManager11readNonVolsEv+0x106>
     d52:	03 ef       	ldi	r16, 0xF3	; 243
     d54:	12 e0       	ldi	r17, 0x02	; 2
     d56:	cc e2       	ldi	r28, 0x2C	; 44
     d58:	d5 e0       	ldi	r29, 0x05	; 5
     d5a:	0f 2e       	mov	r0, r31
     d5c:	fc e4       	ldi	r31, 0x4C	; 76
     d5e:	ef 2e       	mov	r14, r31
     d60:	f5 e0       	ldi	r31, 0x05	; 5
     d62:	ff 2e       	mov	r15, r31
     d64:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <eeprom_read_byte>
     d6c:	89 93       	st	Y+, r24
     d6e:	0f 5f       	subi	r16, 0xFF	; 255
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     d72:	ce 15       	cp	r28, r14
     d74:	df 05       	cpc	r29, r15
     d76:	b9 f7       	brne	.-18     	; 0xd66 <_ZN13EepromManager11readNonVolsEv+0x130>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     d78:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
     d7c:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
     d80:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
     d84:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
     d88:	89 2b       	or	r24, r25
     d8a:	8a 2b       	or	r24, r26
     d8c:	8b 2b       	or	r24, r27
     d8e:	c9 f0       	breq	.+50     	; 0xdc2 <_ZN13EepromManager11readNonVolsEv+0x18c>
     d90:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_event_finish_epoch>
     d94:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
     d98:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
     d9c:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
     da0:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
     da4:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
     da8:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
     dac:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
     db0:	84 17       	cp	r24, r20
     db2:	95 07       	cpc	r25, r21
     db4:	a6 07       	cpc	r26, r22
     db6:	b7 07       	cpc	r27, r23
     db8:	30 f4       	brcc	.+12     	; 0xdc6 <_ZN13EepromManager11readNonVolsEv+0x190>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	19 c0       	rjmp	.+50     	; 0xdf0 <_ZN13EepromManager11readNonVolsEv+0x1ba>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	17 c0       	rjmp	.+46     	; 0xdf0 <_ZN13EepromManager11readNonVolsEv+0x1ba>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <_ZN13EepromManager11readNonVolsEv+0x1ba>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     dc6:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
     dca:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
     dce:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
     dd2:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
     dd6:	80 58       	subi	r24, 0x80	; 128
     dd8:	9e 4a       	sbci	r25, 0xAE	; 174
     dda:	ae 4f       	sbci	r26, 0xFE	; 254
     ddc:	bf 4f       	sbci	r27, 0xFF	; 255
     dde:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_event_finish_epoch>
     de2:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_event_finish_epoch+0x1>
     de6:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <g_event_finish_epoch+0x2>
     dea:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     dee:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	08 95       	ret

00000dfe <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	0c e1       	ldi	r16, 0x1C	; 28
     e0c:	11 e0       	ldi	r17, 0x01	; 1
     e0e:	c2 e1       	ldi	r28, 0x12	; 18
     e10:	d5 e0       	ldi	r29, 0x05	; 5
     e12:	0f 2e       	mov	r0, r31
     e14:	f6 e1       	ldi	r31, 0x16	; 22
     e16:	ef 2e       	mov	r14, r31
     e18:	f5 e0       	ldi	r31, 0x05	; 5
     e1a:	ff 2e       	mov	r15, r31
     e1c:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     e1e:	f8 01       	movw	r30, r16
     e20:	61 91       	ld	r22, Z+
     e22:	8f 01       	movw	r16, r30
     e24:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     e26:	ce 01       	movw	r24, r28
     e28:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <eeprom_write_byte>
     e2c:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     e2e:	ce 15       	cp	r28, r14
     e30:	df 05       	cpc	r29, r15
     e32:	a9 f7       	brne	.-22     	; 0xe1e <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	87 e1       	ldi	r24, 0x17	; 23
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     e3e:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <g_unlockCode+0x4>

	g_messages_text[STATION_ID][0] = '\0';
     e42:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <g_messages_text+0x15>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[0]), 0);
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	86 e6       	ldi	r24, 0x66	; 102
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <eeprom_write_byte>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     e50:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), (uint8_t)g_AM_audio_frequency);
     e54:	60 91 4d 05 	lds	r22, 0x054D	; 0x80054d <g_AM_audio_frequency>
     e58:	8e e1       	ldi	r24, 0x1E	; 30
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     e60:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_event_start_epoch>
     e64:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_event_start_epoch+0x1>
     e68:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_event_start_epoch+0x2>
     e6c:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     e70:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
     e74:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
     e78:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
     e7c:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
     e80:	83 e2       	ldi	r24, 0x23	; 35
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     e88:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <g_event_finish_epoch>
     e8c:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <g_event_finish_epoch+0x1>
     e90:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_event_finish_epoch+0x2>
     e94:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     e98:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_event_finish_epoch>
     e9c:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
     ea0:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
     ea4:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
     ea8:	87 e2       	ldi	r24, 0x27	; 39
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <eeprom_write_dword>
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	08 95       	ret

00000ebe <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     ec4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
	sendEEPROMString(TextVersion);
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     ed8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
	lb_send_NewLine();
     edc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <setAtten>:
#endif  /* ATMEL_STUDIO_7 */

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     ee6:	9c 01       	movw	r18, r24
     ee8:	2e 5f       	subi	r18, 0xFE	; 254
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	2b 33       	cpi	r18, 0x3B	; 59
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	38 07       	cpc	r19, r24
     ef2:	10 f0       	brcs	.+4      	; 0xef8 <setAtten+0x12>
     ef4:	2b e3       	ldi	r18, 0x3B	; 59
     ef6:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     ef8:	ad ec       	ldi	r26, 0xCD	; 205
     efa:	bc ec       	ldi	r27, 0xCC	; 204
     efc:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
     f00:	96 95       	lsr	r25
     f02:	87 95       	ror	r24
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	9c 01       	movw	r18, r24
     f0a:	22 0f       	add	r18, r18
     f0c:	33 1f       	adc	r19, r19
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	28 0f       	add	r18, r24
     f14:	39 1f       	adc	r19, r25
	att /= 5;

	pattern = (uint8_t)att;
     f16:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
	PORTB = pattern;
     f22:	85 b9       	out	0x05, r24	; 5
     f24:	08 95       	ret

00000f26 <setupPortsForF1975>:
}

void setupPortsForF1975(BOOL enable)
{
     f26:	cf 93       	push	r28
     f28:	c8 2f       	mov	r28, r24
#if !SUPPORT_ONLY_80M
	pinMode(PIN_D0, OUTPUT);
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	88 e0       	ldi	r24, 0x08	; 8
     f2e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D1, OUTPUT);
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	89 e0       	ldi	r24, 0x09	; 9
     f36:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D2, OUTPUT);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	8a e0       	ldi	r24, 0x0A	; 10
     f3e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D3, OUTPUT);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	8b e0       	ldi	r24, 0x0B	; 11
     f46:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	8c e0       	ldi	r24, 0x0C	; 12
     f4e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	8d e0       	ldi	r24, 0x0D	; 13
     f56:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_PWDN, OUTPUT);
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	87 e0       	ldi	r24, 0x07	; 7
     f5e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_PWDN, ON);
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	87 e0       	ldi	r24, 0x07	; 7
     f66:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
#endif // !SUPPORT_ONLY_80M

	if(!enable)
     f6a:	c1 11       	cpse	r28, r1
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <setupPortsForF1975+0x4a>
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
	att -= (att % 5); /* set to nearest multiple of 5 */
	att /= 5;

	pattern = (uint8_t)att;
	PORTB = pattern;
     f6e:	15 b8       	out	0x05, r1	; 5

	if(!enable)
	{
		setAtten(0);
	}
}
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <_ZN8GoertzelC1Eff>:

void Goertzel::Flush(void)
{
	memset(testData, 0x00, _N * sizeof(int));
	ResetGoertzel();
}
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	e4 2e       	mov	r14, r20
     f82:	f5 2e       	mov	r15, r21
     f84:	d6 2f       	mov	r29, r22
     f86:	c7 2f       	mov	r28, r23
     f88:	00 93 ef 02 	sts	0x02EF, r16	; 0x8002ef <_SAMPLING_FREQUENCY>
     f8c:	10 93 f0 02 	sts	0x02F0, r17	; 0x8002f0 <_SAMPLING_FREQUENCY+0x1>
     f90:	20 93 f1 02 	sts	0x02F1, r18	; 0x8002f1 <_SAMPLING_FREQUENCY+0x2>
     f94:	30 93 f2 02 	sts	0x02F2, r19	; 0x8002f2 <_SAMPLING_FREQUENCY+0x3>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	41 e5       	ldi	r20, 0x51	; 81
     f9e:	53 e4       	ldi	r21, 0x43	; 67
     fa0:	6e 2d       	mov	r22, r14
     fa2:	7f 2d       	mov	r23, r15
     fa4:	8d 2f       	mov	r24, r29
     fa6:	9c 2f       	mov	r25, r28
     fa8:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__gesf2>
     fac:	18 16       	cp	r1, r24
     fae:	6c f0       	brlt	.+26     	; 0xfca <_ZN8GoertzelC1Eff+0x56>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	48 ec       	ldi	r20, 0xC8	; 200
     fb6:	52 e4       	ldi	r21, 0x42	; 66
     fb8:	6e 2d       	mov	r22, r14
     fba:	7f 2d       	mov	r23, r15
     fbc:	8d 2f       	mov	r24, r29
     fbe:	9c 2f       	mov	r25, r28
     fc0:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <__cmpsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	34 f0       	brlt	.+12     	; 0xfd4 <_ZN8GoertzelC1Eff+0x60>
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <_ZN8GoertzelC1Eff+0x68>
     fca:	e1 2c       	mov	r14, r1
     fcc:	f1 2c       	mov	r15, r1
     fce:	d1 e5       	ldi	r29, 0x51	; 81
     fd0:	c3 e4       	ldi	r28, 0x43	; 67
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <_ZN8GoertzelC1Eff+0x68>
     fd4:	e1 2c       	mov	r14, r1
     fd6:	f1 2c       	mov	r15, r1
     fd8:	d8 ec       	ldi	r29, 0xC8	; 200
     fda:	c2 e4       	ldi	r28, 0x42	; 66
     fdc:	6e 2d       	mov	r22, r14
     fde:	7f 2d       	mov	r23, r15
     fe0:	8d 2f       	mov	r24, r29
     fe2:	9c 2f       	mov	r25, r28
     fe4:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__fixsfsi>
     fe8:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <_N+0x1>
     fec:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <_N>
     ff0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_N>
     ff4:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_N+0x1>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0e 94 2d 31 	call	0x625a	; 0x625a <malloc>
    1000:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <__data_end+0x1>
    1004:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__data_end>
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <_ZN8GoertzelD1Ev>:
    1016:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end>
    101a:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__data_end+0x1>
    101e:	0e 94 c5 31 	call	0x638a	; 0x638a <free>
    1022:	08 95       	ret

00001024 <_ZN8Goertzel13ResetGoertzelEv>:
    1024:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <Q2>
    1028:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <Q2+0x1>
    102c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <Q2+0x2>
    1030:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <Q2+0x3>
    1034:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <Q1>
    1038:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <Q1+0x1>
    103c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <Q1+0x2>
    1040:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <Q1+0x3>
    1044:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <_samplesReady>
    1048:	08 95       	ret

0000104a <_ZN8Goertzel18SetTargetFrequencyEf>:

void Goertzel::SetTargetFrequency(float target_frequency)
{
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
    1060:	4a 01       	movw	r8, r20
    1062:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
    1064:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <_N>
    1068:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <_N+0x1>
    106c:	07 2e       	mov	r0, r23
    106e:	00 0c       	add	r0, r0
    1070:	88 0b       	sbc	r24, r24
    1072:	99 0b       	sbc	r25, r25
    1074:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <__floatsisf>
    1078:	6b 01       	movw	r12, r22
    107a:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /* Ideally, this should be an integer multiple of SAMPLING_RATE/N */
    107c:	80 92 eb 02 	sts	0x02EB, r8	; 0x8002eb <_TARGET_FREQUENCY>
    1080:	90 92 ec 02 	sts	0x02EC, r9	; 0x8002ec <_TARGET_FREQUENCY+0x1>
    1084:	a0 92 ed 02 	sts	0x02ED, r10	; 0x8002ed <_TARGET_FREQUENCY+0x2>
    1088:	b0 92 ee 02 	sts	0x02EE, r11	; 0x8002ee <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
    108c:	a5 01       	movw	r20, r10
    108e:	94 01       	movw	r18, r8
    1090:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    1094:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <_SAMPLING_FREQUENCY>
    1098:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <_SAMPLING_FREQUENCY+0x1>
    109c:	40 91 f1 02 	lds	r20, 0x02F1	; 0x8002f1 <_SAMPLING_FREQUENCY+0x2>
    10a0:	50 91 f2 02 	lds	r21, 0x02F2	; 0x8002f2 <_SAMPLING_FREQUENCY+0x3>
    10a4:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <__divsf3>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <__addsf3>
    10b4:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__fixsfsi>
    10b8:	07 2e       	mov	r0, r23
    10ba:	00 0c       	add	r0, r0
    10bc:	88 0b       	sbc	r24, r24
    10be:	99 0b       	sbc	r25, r25
    10c0:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <__floatsisf>
    10c4:	2b ed       	ldi	r18, 0xDB	; 219
    10c6:	3f e0       	ldi	r19, 0x0F	; 15
    10c8:	49 ec       	ldi	r20, 0xC9	; 201
    10ca:	50 e4       	ldi	r21, 0x40	; 64
    10cc:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    10d0:	a7 01       	movw	r20, r14
    10d2:	96 01       	movw	r18, r12
    10d4:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <__divsf3>
    10d8:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <cos>
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <__addsf3>
    10e4:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <g_coeff>
    10e8:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <g_coeff+0x1>
    10ec:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <g_coeff+0x2>
    10f0:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <g_coeff+0x3>
	ResetGoertzel();
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN8Goertzel13ResetGoertzelEv>
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	08 95       	ret

00001110 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
    1126:	c0 90 e1 02 	lds	r12, 0x02E1	; 0x8002e1 <Q1>
    112a:	d0 90 e2 02 	lds	r13, 0x02E2	; 0x8002e2 <Q1+0x1>
    112e:	e0 90 e3 02 	lds	r14, 0x02E3	; 0x8002e3 <Q1+0x2>
    1132:	f0 90 e4 02 	lds	r15, 0x02E4	; 0x8002e4 <Q1+0x3>
    1136:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <g_coeff>
    113a:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <g_coeff+0x1>
    113e:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <g_coeff+0x2>
    1142:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <g_coeff+0x3>
    1146:	c7 01       	movw	r24, r14
    1148:	b6 01       	movw	r22, r12
    114a:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    114e:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <Q2>
    1152:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <Q2+0x1>
    1156:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <Q2+0x2>
    115a:	50 91 e0 02 	lds	r21, 0x02E0	; 0x8002e0 <Q2+0x3>
    115e:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__subsf3>
    1162:	4b 01       	movw	r8, r22
    1164:	5c 01       	movw	r10, r24
    1166:	be 01       	movw	r22, r28
    1168:	72 50       	subi	r23, 0x02	; 2
    116a:	07 2e       	mov	r0, r23
    116c:	00 0c       	add	r0, r0
    116e:	88 0b       	sbc	r24, r24
    1170:	99 0b       	sbc	r25, r25
    1172:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <__floatsisf>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c5 01       	movw	r24, r10
    117c:	b4 01       	movw	r22, r8
    117e:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <__addsf3>

	if(sample > 230)
    1182:	c7 3e       	cpi	r28, 0xE7	; 231
    1184:	d1 05       	cpc	r29, r1
    1186:	54 f0       	brlt	.+20     	; 0x119c <_ZN8Goertzel13ProcessSampleEi+0x8c>
	{
		highValueCount++;
    1188:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <highValueCount>
    118c:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <highValueCount+0x1>
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <highValueCount+0x1>
    1198:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <highValueCount>
	}

	Q2 = Q1;
    119c:	c0 92 dd 02 	sts	0x02DD, r12	; 0x8002dd <Q2>
    11a0:	d0 92 de 02 	sts	0x02DE, r13	; 0x8002de <Q2+0x1>
    11a4:	e0 92 df 02 	sts	0x02DF, r14	; 0x8002df <Q2+0x2>
    11a8:	f0 92 e0 02 	sts	0x02E0, r15	; 0x8002e0 <Q2+0x3>
	Q1 = Q0;
    11ac:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <Q1>
    11b0:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <Q1+0x1>
    11b4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <Q1+0x2>
    11b8:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <Q1+0x3>
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	08 95       	ret

000011d2 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    11d2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_samplesReady>
    11d6:	88 23       	and	r24, r24
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    11da:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_samplesReady>
    11de:	08 95       	ret
	}

	testData[_index] = data;
    11e0:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <_index>
    11e4:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <_index+0x1>
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end>
    11f0:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__data_end+0x1>
    11f4:	e8 0f       	add	r30, r24
    11f6:	f9 1f       	adc	r31, r25
    11f8:	71 83       	std	Z+1, r23	; 0x01
    11fa:	60 83       	st	Z, r22
	_index++;
    11fc:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_index>
    1200:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <_index+0x1>
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <_index+0x1>
    120a:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_index>
	if(_index >= _N)
    120e:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <_index>
    1212:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <_index+0x1>
    1216:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_N>
    121a:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_N+0x1>
    121e:	28 17       	cp	r18, r24
    1220:	39 07       	cpc	r19, r25
    1222:	3c f0       	brlt	.+14     	; 0x1232 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    1224:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_index+0x1>
    1228:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <_index>
		_samplesReady = true;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <_samplesReady>
	}

	return(_samplesReady);
    1232:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_samplesReady>
}
    1236:	08 95       	ret

00001238 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
    1238:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_samplesReady>
}
    123c:	08 95       	ret

0000123e <_ZN8Goertzel10Magnitude2EPi>:

float Goertzel::Magnitude2(int *highCount)
{
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	00 d0       	rcall	.+0      	; 0x125c <_ZN8Goertzel10Magnitude2EPi+0x1e>
    125c:	00 d0       	rcall	.+0      	; 0x125e <_ZN8Goertzel10Magnitude2EPi+0x20>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	7c 01       	movw	r14, r24
    1264:	8b 01       	movw	r16, r22
	float magnitude2;

	highValueCount = 0;
    1266:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <highValueCount+0x1>
    126a:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <highValueCount>

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
    126e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_N>
    1272:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_N+0x1>
    1276:	18 16       	cp	r1, r24
    1278:	19 06       	cpc	r1, r25
    127a:	f4 f4       	brge	.+60     	; 0x12b8 <_ZN8Goertzel10Magnitude2EPi+0x7a>
    127c:	1a 82       	std	Y+2, r1	; 0x02
    127e:	19 82       	std	Y+1, r1	; 0x01
	{
		ProcessSample(testData[index]);
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__data_end>
    128c:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__data_end+0x1>
    1290:	e8 0f       	add	r30, r24
    1292:	f9 1f       	adc	r31, r25
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	c7 01       	movw	r24, r14
    129a:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN8Goertzel13ProcessSampleEi>
	float magnitude2;

	highValueCount = 0;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
    129e:	29 81       	ldd	r18, Y+1	; 0x01
    12a0:	3a 81       	ldd	r19, Y+2	; 0x02
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	3a 83       	std	Y+2, r19	; 0x02
    12a8:	29 83       	std	Y+1, r18	; 0x01
    12aa:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_N>
    12ae:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_N+0x1>
    12b2:	28 17       	cp	r18, r24
    12b4:	39 07       	cpc	r19, r25
    12b6:	24 f3       	brlt	.-56     	; 0x1280 <_ZN8Goertzel10Magnitude2EPi+0x42>
	{
		ProcessSample(testData[index]);
	}

	if(highCount) *highCount = highValueCount;
    12b8:	01 15       	cp	r16, r1
    12ba:	11 05       	cpc	r17, r1
    12bc:	39 f0       	breq	.+14     	; 0x12cc <_ZN8Goertzel10Magnitude2EPi+0x8e>
    12be:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <highValueCount>
    12c2:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <highValueCount+0x1>
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
    12cc:	40 90 e1 02 	lds	r4, 0x02E1	; 0x8002e1 <Q1>
    12d0:	50 90 e2 02 	lds	r5, 0x02E2	; 0x8002e2 <Q1+0x1>
    12d4:	60 90 e3 02 	lds	r6, 0x02E3	; 0x8002e3 <Q1+0x2>
    12d8:	70 90 e4 02 	lds	r7, 0x02E4	; 0x8002e4 <Q1+0x3>
    12dc:	80 90 dd 02 	lds	r8, 0x02DD	; 0x8002dd <Q2>
    12e0:	90 90 de 02 	lds	r9, 0x02DE	; 0x8002de <Q2+0x1>
    12e4:	a0 90 df 02 	lds	r10, 0x02DF	; 0x8002df <Q2+0x2>
    12e8:	b0 90 e0 02 	lds	r11, 0x02E0	; 0x8002e0 <Q2+0x3>
    12ec:	a3 01       	movw	r20, r6
    12ee:	92 01       	movw	r18, r4
    12f0:	c3 01       	movw	r24, r6
    12f2:	b2 01       	movw	r22, r4
    12f4:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    12f8:	69 83       	std	Y+1, r22	; 0x01
    12fa:	7a 83       	std	Y+2, r23	; 0x02
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	a5 01       	movw	r20, r10
    1302:	94 01       	movw	r18, r8
    1304:	c5 01       	movw	r24, r10
    1306:	b4 01       	movw	r22, r8
    1308:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <__addsf3>
    131c:	69 83       	std	Y+1, r22	; 0x01
    131e:	7a 83       	std	Y+2, r23	; 0x02
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <g_coeff>
    1328:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <g_coeff+0x1>
    132c:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <g_coeff+0x2>
    1330:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <g_coeff+0x3>
    1334:	c3 01       	movw	r24, r6
    1336:	b2 01       	movw	r22, r4
    1338:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    133c:	a5 01       	movw	r20, r10
    133e:	94 01       	movw	r18, r8
    1340:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	69 81       	ldd	r22, Y+1	; 0x01
    134a:	7a 81       	ldd	r23, Y+2	; 0x02
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__subsf3>
    1354:	4b 01       	movw	r8, r22
    1356:	5c 01       	movw	r10, r24

	ResetGoertzel();
    1358:	c7 01       	movw	r24, r14
    135a:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
    135e:	c5 01       	movw	r24, r10
    1360:	b4 01       	movw	r22, r8
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	bf 90       	pop	r11
    1378:	af 90       	pop	r10
    137a:	9f 90       	pop	r9
    137c:	8f 90       	pop	r8
    137e:	7f 90       	pop	r7
    1380:	6f 90       	pop	r6
    1382:	5f 90       	pop	r5
    1384:	4f 90       	pop	r4
    1386:	08 95       	ret

00001388 <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    1388:	e4 e6       	ldi	r30, 0x64	; 100
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8f 77       	andi	r24, 0x7F	; 127
    1390:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    1392:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
    1396:	85 e2       	ldi	r24, 0x25	; 37
    1398:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
    13a8:	08 95       	ret

000013aa <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    13aa:	84 ea       	ldi	r24, 0xA4	; 164
    13ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    13b0:	ec eb       	ldi	r30, 0xBC	; 188
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 23       	and	r24, r24
    13b8:	64 f0       	brlt	.+24     	; 0x13d2 <i2c_start+0x28>
    13ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    13be:	81 11       	cpse	r24, r1
    13c0:	f9 cf       	rjmp	.-14     	; 0x13b4 <i2c_start+0xa>
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <i2c_start+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    13c4:	80 e9       	ldi	r24, 0x90	; 144
    13c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
    13d0:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    13d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    13d6:	88 23       	and	r24, r24
    13d8:	a9 f3       	breq	.-22     	; 0x13c4 <i2c_start+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
    13da:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    13dc:	08 95       	ret

000013de <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    13de:	84 e9       	ldi	r24, 0x94	; 148
    13e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    13e4:	08 95       	ret

000013e6 <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    13e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
    13ea:	84 e8       	ldi	r24, 0x84	; 132
    13ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    13f0:	ec eb       	ldi	r30, 0xBC	; 188
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 23       	and	r24, r24
    13f8:	64 f0       	brlt	.+24     	; 0x1412 <i2c_write_success+0x2c>
    13fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    13fe:	81 11       	cpse	r24, r1
    1400:	f9 cf       	rjmp	.-14     	; 0x13f4 <i2c_write_success+0xe>
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <i2c_write_success+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    1404:	84 e9       	ldi	r24, 0x94	; 148
    1406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
    1410:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
    1412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    1416:	88 7f       	andi	r24, 0xF8	; 248
    1418:	86 13       	cpse	r24, r22
    141a:	f4 cf       	rjmp	.-24     	; 0x1404 <i2c_write_success+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
    141c:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    141e:	08 95       	ret

00001420 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    1420:	84 ec       	ldi	r24, 0xC4	; 196
    1422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1426:	ec eb       	ldi	r30, 0xBC	; 188
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	88 23       	and	r24, r24
    142e:	24 f0       	brlt	.+8      	; 0x1438 <i2c_read_ack+0x18>
    1430:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1434:	81 11       	cpse	r24, r1
    1436:	f9 cf       	rjmp	.-14     	; 0x142a <i2c_read_ack+0xa>
		{
			;
		}

		return(TWDR);
    1438:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    143c:	08 95       	ret

0000143e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    143e:	84 e8       	ldi	r24, 0x84	; 132
    1440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1444:	ec eb       	ldi	r30, 0xBC	; 188
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	24 f0       	brlt	.+8      	; 0x1456 <i2c_read_nack+0x18>
    144e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1452:	81 11       	cpse	r24, r1
    1454:	f9 cf       	rjmp	.-14     	; 0x1448 <i2c_read_nack+0xa>
		{
			;
		}

		return( TWDR);
    1456:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    145a:	08 95       	ret

0000145c <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    145c:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1460:	28 7f       	andi	r18, 0xF8	; 248
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	28 17       	cp	r18, r24
    1468:	39 07       	cpc	r19, r25
    146a:	29 f0       	breq	.+10     	; 0x1476 <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    146c:	84 e9       	ldi	r24, 0x94	; 148
    146e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	08 95       	ret
	}

	return(FALSE);
    1476:	80 e0       	ldi	r24, 0x00	; 0
}
    1478:	08 95       	ret

0000147a <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	00 d0       	rcall	.+0      	; 0x1480 <i2c_device_write+0x6>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <i2c_device_write+0x8>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <i2c_device_write+0xa>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	6b 83       	std	Y+3, r22	; 0x03
    148c:	5d 83       	std	Y+5, r21	; 0x05
    148e:	4c 83       	std	Y+4, r20	; 0x04
    1490:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    1492:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    1494:	0e 94 d5 09 	call	0x13aa	; 0x13aa <i2c_start>
		if(i2c_status(TW_START))
    1498:	88 e0       	ldi	r24, 0x08	; 8
    149a:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    149e:	98 2f       	mov	r25, r24
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	99 23       	and	r25, r25
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <i2c_device_write+0x2e>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	88 23       	and	r24, r24
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <i2c_device_write+0x36>
		{
			return(TRUE);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <i2c_device_write+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    14b0:	68 e1       	ldi	r22, 0x18	; 24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    14b8:	98 2f       	mov	r25, r24
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	99 23       	and	r25, r25
    14be:	09 f4       	brne	.+2      	; 0x14c2 <i2c_device_write+0x48>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	88 23       	and	r24, r24
    14c4:	11 f0       	breq	.+4      	; 0x14ca <i2c_device_write+0x50>
		{
			return(TRUE);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	32 c0       	rjmp	.+100    	; 0x152e <i2c_device_write+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    14ca:	68 e2       	ldi	r22, 0x28	; 40
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    14d2:	98 2f       	mov	r25, r24
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	99 23       	and	r25, r25
    14d8:	09 f4       	brne	.+2      	; 0x14dc <i2c_device_write+0x62>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	88 23       	and	r24, r24
    14de:	11 f0       	breq	.+4      	; 0x14e4 <i2c_device_write+0x6a>
		{
			return(TRUE);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	25 c0       	rjmp	.+74     	; 0x152e <i2c_device_write+0xb4>
		}

		while(bytes2write--)
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	98 0f       	add	r25, r24
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <i2c_device_write+0x7a>
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	99 23       	and	r25, r25
    14f6:	c1 f0       	breq	.+48     	; 0x1528 <i2c_device_write+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	98 0f       	add	r25, r24
    14fe:	99 83       	std	Y+1, r25	; 0x01
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	2c 81       	ldd	r18, Y+4	; 0x04
    1506:	3d 81       	ldd	r19, Y+5	; 0x05
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	68 e2       	ldi	r22, 0x28	; 40
    1512:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    1516:	98 2f       	mov	r25, r24
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	99 23       	and	r25, r25
    151c:	09 f4       	brne	.+2      	; 0x1520 <i2c_device_write+0xa6>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	88 23       	and	r24, r24
    1522:	01 f3       	breq	.-64     	; 0x14e4 <i2c_device_write+0x6a>
			{
				return(TRUE);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	03 c0       	rjmp	.+6      	; 0x152e <i2c_device_write+0xb4>
			}
		}

		i2c_stop();
    1528:	0e 94 ef 09 	call	0x13de	; 0x13de <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    152c:	80 e0       	ldi	r24, 0x00	; 0
}
    152e:	26 96       	adiw	r28, 0x06	; 6
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <i2c_device_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	00 d0       	rcall	.+0      	; 0x154a <i2c_device_read+0xa>
    154a:	00 d0       	rcall	.+0      	; 0x154c <i2c_device_read+0xc>
    154c:	00 d0       	rcall	.+0      	; 0x154e <i2c_device_read+0xe>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	6b 83       	std	Y+3, r22	; 0x03
    1556:	5d 83       	std	Y+5, r21	; 0x05
    1558:	4c 83       	std	Y+4, r20	; 0x04
    155a:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    155c:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    155e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <i2c_start>
		if(i2c_status(TW_START))
    1562:	88 e0       	ldi	r24, 0x08	; 8
    1564:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    1568:	98 2f       	mov	r25, r24
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	99 23       	and	r25, r25
    156e:	09 f4       	brne	.+2      	; 0x1572 <i2c_device_read+0x32>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	88 23       	and	r24, r24
    1574:	11 f0       	breq	.+4      	; 0x157a <i2c_device_read+0x3a>
		{
			return(TRUE);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	79 c0       	rjmp	.+242    	; 0x166c <i2c_device_read+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    157a:	68 e1       	ldi	r22, 0x18	; 24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    1582:	98 2f       	mov	r25, r24
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	99 23       	and	r25, r25
    1588:	09 f4       	brne	.+2      	; 0x158c <i2c_device_read+0x4c>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	88 23       	and	r24, r24
    158e:	11 f0       	breq	.+4      	; 0x1594 <i2c_device_read+0x54>
		{
			return(TRUE);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	6c c0       	rjmp	.+216    	; 0x166c <i2c_device_read+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1594:	68 e2       	ldi	r22, 0x28	; 40
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    159c:	98 2f       	mov	r25, r24
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	99 23       	and	r25, r25
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <i2c_device_read+0x66>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	88 23       	and	r24, r24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <i2c_device_read+0x6e>
		{
			return(TRUE);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	5f c0       	rjmp	.+190    	; 0x166c <i2c_device_read+0x12c>
		}

		i2c_start();
    15ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <i2c_start>
		if(i2c_status(TW_REP_START))
    15b2:	80 e1       	ldi	r24, 0x10	; 16
    15b4:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    15b8:	98 2f       	mov	r25, r24
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	99 23       	and	r25, r25
    15be:	09 f4       	brne	.+2      	; 0x15c2 <i2c_device_read+0x82>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	88 23       	and	r24, r24
    15c4:	11 f0       	breq	.+4      	; 0x15ca <i2c_device_read+0x8a>
		{
			return(TRUE);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	51 c0       	rjmp	.+162    	; 0x166c <i2c_device_read+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	60 e4       	ldi	r22, 0x40	; 64
    15d0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <i2c_write_success>
    15d4:	98 2f       	mov	r25, r24
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	99 23       	and	r25, r25
    15da:	09 f4       	brne	.+2      	; 0x15de <i2c_device_read+0x9e>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	88 23       	and	r24, r24
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <i2c_device_read+0xa6>
		{
			return(TRUE);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	43 c0       	rjmp	.+134    	; 0x166c <i2c_device_read+0x12c>
		}

		while(bytes2read--)
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	98 0f       	add	r25, r24
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <i2c_device_read+0xb6>
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	99 23       	and	r25, r25
    15f8:	b1 f1       	breq	.+108    	; 0x1666 <i2c_device_read+0x126>
		{
			if(bytes2read)
    15fa:	8e 81       	ldd	r24, Y+6	; 0x06
    15fc:	88 23       	and	r24, r24
    15fe:	d9 f0       	breq	.+54     	; 0x1636 <i2c_device_read+0xf6>
			{
				data[index++] = i2c_read_ack();
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	98 0f       	add	r25, r24
    1606:	99 83       	std	Y+1, r25	; 0x01
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	2c 81       	ldd	r18, Y+4	; 0x04
    160e:	3d 81       	ldd	r19, Y+5	; 0x05
    1610:	89 01       	movw	r16, r18
    1612:	08 0f       	add	r16, r24
    1614:	19 1f       	adc	r17, r25
    1616:	0e 94 10 0a 	call	0x1420	; 0x1420 <i2c_read_ack>
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    161e:	80 e5       	ldi	r24, 0x50	; 80
    1620:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    1624:	98 2f       	mov	r25, r24
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	99 23       	and	r25, r25
    162a:	09 f4       	brne	.+2      	; 0x162e <i2c_device_read+0xee>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	88 23       	and	r24, r24
    1630:	d1 f2       	breq	.-76     	; 0x15e6 <i2c_device_read+0xa6>
				{
					return(TRUE);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	1b c0       	rjmp	.+54     	; 0x166c <i2c_device_read+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	89 01       	movw	r16, r18
    1642:	08 0f       	add	r16, r24
    1644:	19 1f       	adc	r17, r25
    1646:	0e 94 1f 0a 	call	0x143e	; 0x143e <i2c_read_nack>
    164a:	f8 01       	movw	r30, r16
    164c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    164e:	88 e5       	ldi	r24, 0x58	; 88
    1650:	0e 94 2e 0a 	call	0x145c	; 0x145c <i2c_status>
    1654:	98 2f       	mov	r25, r24
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	99 23       	and	r25, r25
    165a:	09 f4       	brne	.+2      	; 0x165e <i2c_device_read+0x11e>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	88 23       	and	r24, r24
    1660:	11 f2       	breq	.-124    	; 0x15e6 <i2c_device_read+0xa6>
				{
					return(TRUE);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	03 c0       	rjmp	.+6      	; 0x166c <i2c_device_read+0x12c>
				}
			}
		}

		i2c_stop();
    1666:	0e 94 ef 09 	call	0x13de	; 0x13de <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    166a:	80 e0       	ldi	r24, 0x00	; 0
}
    166c:	26 96       	adiw	r28, 0x06	; 6
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <nextFullTxBuffer>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1682:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_ZZ16nextFullTxBufferE11bufferIndex>
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	59 e2       	ldi	r21, 0x29	; 41
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	52 9f       	mul	r21, r18
    1690:	f0 01       	movw	r30, r0
    1692:	53 9f       	mul	r21, r19
    1694:	f0 0d       	add	r31, r0
    1696:	11 24       	eor	r1, r1
    1698:	eb 58       	subi	r30, 0x8B	; 139
    169a:	fc 4f       	sbci	r31, 0xFC	; 252
    169c:	40 81       	ld	r20, Z
    169e:	41 11       	cpse	r20, r1
    16a0:	0c c0       	rjmp	.+24     	; 0x16ba <nextFullTxBuffer+0x38>
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <nextFullTxBuffer+0x2e>
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	78 f3       	brcs	.-34     	; 0x168a <nextFullTxBuffer+0x8>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	ed cf       	rjmp	.-38     	; 0x168a <nextFullTxBuffer+0x8>
    16b0:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZZ16nextFullTxBufferE11bufferIndex>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	08 95       	ret
    16ba:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZZ16nextFullTxBufferE11bufferIndex>
    16be:	49 e2       	ldi	r20, 0x29	; 41
    16c0:	42 9f       	mul	r20, r18
    16c2:	c0 01       	movw	r24, r0
    16c4:	43 9f       	mul	r20, r19
    16c6:	90 0d       	add	r25, r0
    16c8:	11 24       	eor	r1, r1
    16ca:	8b 58       	subi	r24, 0x8B	; 139
    16cc:	9c 4f       	sbci	r25, 0xFC	; 252
    16ce:	08 95       	ret

000016d0 <nextEmptyTxBuffer>:
    16d0:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_ZZ17nextEmptyTxBufferE11bufferIndex>
    16d4:	93 e0       	ldi	r25, 0x03	; 3
    16d6:	59 e2       	ldi	r21, 0x29	; 41
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	52 9f       	mul	r21, r18
    16de:	f0 01       	movw	r30, r0
    16e0:	53 9f       	mul	r21, r19
    16e2:	f0 0d       	add	r31, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	eb 58       	subi	r30, 0x8B	; 139
    16e8:	fc 4f       	sbci	r31, 0xFC	; 252
    16ea:	40 81       	ld	r20, Z
    16ec:	44 23       	and	r20, r20
    16ee:	61 f0       	breq	.+24     	; 0x1708 <nextEmptyTxBuffer+0x38>
    16f0:	91 50       	subi	r25, 0x01	; 1
    16f2:	29 f0       	breq	.+10     	; 0x16fe <nextEmptyTxBuffer+0x2e>
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	78 f3       	brcs	.-34     	; 0x16d8 <nextEmptyTxBuffer+0x8>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	ed cf       	rjmp	.-38     	; 0x16d8 <nextEmptyTxBuffer+0x8>
    16fe:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZZ17nextEmptyTxBufferE11bufferIndex>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	08 95       	ret
    1708:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZZ17nextEmptyTxBufferE11bufferIndex>
    170c:	49 e2       	ldi	r20, 0x29	; 41
    170e:	42 9f       	mul	r20, r18
    1710:	c0 01       	movw	r24, r0
    1712:	43 9f       	mul	r20, r19
    1714:	90 0d       	add	r25, r0
    1716:	11 24       	eor	r1, r1
    1718:	8b 58       	subi	r24, 0x8B	; 139
    171a:	9c 4f       	sbci	r25, 0xFC	; 252
    171c:	08 95       	ret

0000171e <nextEmptyRxBuffer>:
    171e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZZ17nextEmptyRxBufferE11bufferIndex>
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	9f e3       	ldi	r25, 0x3F	; 63
    1728:	89 9f       	mul	r24, r25
    172a:	f0 01       	movw	r30, r0
    172c:	11 24       	eor	r1, r1
    172e:	e9 50       	subi	r30, 0x09	; 9
    1730:	fd 4f       	sbci	r31, 0xFD	; 253
    1732:	41 81       	ldd	r20, Z+1	; 0x01
    1734:	52 81       	ldd	r21, Z+2	; 0x02
    1736:	45 2b       	or	r20, r21
    1738:	a9 f0       	breq	.+42     	; 0x1764 <nextEmptyRxBuffer+0x46>
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	08 f0       	brcs	.+2      	; 0x1742 <nextEmptyRxBuffer+0x24>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	9f e3       	ldi	r25, 0x3F	; 63
    1748:	89 9f       	mul	r24, r25
    174a:	f0 01       	movw	r30, r0
    174c:	11 24       	eor	r1, r1
    174e:	e9 50       	subi	r30, 0x09	; 9
    1750:	fd 4f       	sbci	r31, 0xFD	; 253
    1752:	41 81       	ldd	r20, Z+1	; 0x01
    1754:	52 81       	ldd	r21, Z+2	; 0x02
    1756:	45 2b       	or	r20, r21
    1758:	29 f0       	breq	.+10     	; 0x1764 <nextEmptyRxBuffer+0x46>
    175a:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_ZZ17nextEmptyRxBufferE11bufferIndex>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	08 95       	ret
    1764:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_ZZ17nextEmptyRxBufferE11bufferIndex>
    1768:	4f e3       	ldi	r20, 0x3F	; 63
    176a:	42 9f       	mul	r20, r18
    176c:	c0 01       	movw	r24, r0
    176e:	43 9f       	mul	r20, r19
    1770:	90 0d       	add	r25, r0
    1772:	11 24       	eor	r1, r1
    1774:	89 50       	subi	r24, 0x09	; 9
    1776:	9d 4f       	sbci	r25, 0xFD	; 253
    1778:	08 95       	ret

0000177a <nextFullRxBuffer>:
    177a:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZZ16nextFullRxBufferE11bufferIndex>
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	9f e3       	ldi	r25, 0x3F	; 63
    1784:	89 9f       	mul	r24, r25
    1786:	f0 01       	movw	r30, r0
    1788:	11 24       	eor	r1, r1
    178a:	e9 50       	subi	r30, 0x09	; 9
    178c:	fd 4f       	sbci	r31, 0xFD	; 253
    178e:	41 81       	ldd	r20, Z+1	; 0x01
    1790:	52 81       	ldd	r21, Z+2	; 0x02
    1792:	45 2b       	or	r20, r21
    1794:	a9 f4       	brne	.+42     	; 0x17c0 <nextFullRxBuffer+0x46>
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	08 f0       	brcs	.+2      	; 0x179e <nextFullRxBuffer+0x24>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	9f e3       	ldi	r25, 0x3F	; 63
    17a4:	89 9f       	mul	r24, r25
    17a6:	f0 01       	movw	r30, r0
    17a8:	11 24       	eor	r1, r1
    17aa:	e9 50       	subi	r30, 0x09	; 9
    17ac:	fd 4f       	sbci	r31, 0xFD	; 253
    17ae:	41 81       	ldd	r20, Z+1	; 0x01
    17b0:	52 81       	ldd	r21, Z+2	; 0x02
    17b2:	45 2b       	or	r20, r21
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <nextFullRxBuffer+0x46>
    17b6:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZZ16nextFullRxBufferE11bufferIndex>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	08 95       	ret
    17c0:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZZ16nextFullRxBufferE11bufferIndex>
    17c4:	4f e3       	ldi	r20, 0x3F	; 63
    17c6:	42 9f       	mul	r20, r18
    17c8:	c0 01       	movw	r24, r0
    17ca:	43 9f       	mul	r20, r19
    17cc:	90 0d       	add	r25, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	89 50       	subi	r24, 0x09	; 9
    17d2:	9d 4f       	sbci	r25, 0xFD	; 253
    17d4:	08 95       	ret

000017d6 <linkbusTxInProgress>:
    17d6:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <_ZL17linkbus_tx_active>
    17da:	08 95       	ret

000017dc <_Z16linkbus_start_txv>:
    17dc:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <_ZL17linkbus_tx_active>
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	91 11       	cpse	r25, r1
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	91 11       	cpse	r25, r1
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <_Z16linkbus_start_txv+0x1e>
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <_ZL17linkbus_tx_active>
    17f0:	e1 ec       	ldi	r30, 0xC1	; 193
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	90 62       	ori	r25, 0x20	; 32
    17f8:	90 83       	st	Z, r25
    17fa:	08 95       	ret

000017fc <linkbus_end_tx>:
    17fc:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <_ZL17linkbus_tx_active>
    1800:	88 23       	and	r24, r24
    1802:	39 f0       	breq	.+14     	; 0x1812 <linkbus_end_tx+0x16>
    1804:	e1 ec       	ldi	r30, 0xC1	; 193
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 7d       	andi	r24, 0xDF	; 223
    180c:	80 83       	st	Z, r24
    180e:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <_ZL17linkbus_tx_active>
    1812:	08 95       	ret

00001814 <linkbus_init>:
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	8b 01       	movw	r16, r22
    181a:	9c 01       	movw	r18, r24
    181c:	8e e7       	ldi	r24, 0x7E	; 126
    181e:	e7 ef       	ldi	r30, 0xF7	; 247
    1820:	f2 e0       	ldi	r31, 0x02	; 2
    1822:	df 01       	movw	r26, r30
    1824:	1d 92       	st	X+, r1
    1826:	8a 95       	dec	r24
    1828:	e9 f7       	brne	.-6      	; 0x1824 <linkbus_init+0x10>
    182a:	e5 e7       	ldi	r30, 0x75	; 117
    182c:	f3 e0       	ldi	r31, 0x03	; 3
    182e:	10 82       	st	Z, r1
    1830:	11 a6       	std	Z+41, r1	; 0x29
    1832:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <_ZL9tx_buffer+0x52>
    1836:	d9 01       	movw	r26, r18
    1838:	c8 01       	movw	r24, r16
    183a:	80 58       	subi	r24, 0x80	; 128
    183c:	9b 47       	sbci	r25, 0x7B	; 123
    183e:	a1 4e       	sbci	r26, 0xE1	; 225
    1840:	bf 4f       	sbci	r27, 0xFF	; 255
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	aa 1f       	adc	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	aa 1f       	adc	r26, r26
    1850:	bb 1f       	adc	r27, r27
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	00 0f       	add	r16, r16
    1860:	11 1f       	adc	r17, r17
    1862:	22 1f       	adc	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	00 0f       	add	r16, r16
    1868:	11 1f       	adc	r17, r17
    186a:	22 1f       	adc	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	a9 01       	movw	r20, r18
    1870:	98 01       	movw	r18, r16
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	44 1f       	adc	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	44 1f       	adc	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	0e 94 bd 30 	call	0x617a	; 0x617a <__udivmodsi4>
    1886:	21 50       	subi	r18, 0x01	; 1
    1888:	31 09       	sbc	r19, r1
    188a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    188e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1892:	88 e9       	ldi	r24, 0x98	; 152
    1894:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1898:	8e e0       	ldi	r24, 0x0E	; 14
    189a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    189e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <linkbus_disable>:
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    18ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    18b2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <linkbus_end_tx>
    18b6:	8e e7       	ldi	r24, 0x7E	; 126
    18b8:	e7 ef       	ldi	r30, 0xF7	; 247
    18ba:	f2 e0       	ldi	r31, 0x02	; 2
    18bc:	df 01       	movw	r26, r30
    18be:	1d 92       	st	X+, r1
    18c0:	8a 95       	dec	r24
    18c2:	e9 f7       	brne	.-6      	; 0x18be <linkbus_disable+0x16>
    18c4:	e5 e7       	ldi	r30, 0x75	; 117
    18c6:	f3 e0       	ldi	r31, 0x03	; 3
    18c8:	10 82       	st	Z, r1
    18ca:	11 a6       	std	Z+41, r1	; 0x29
    18cc:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <_ZL9tx_buffer+0x52>
    18d0:	08 95       	ret

000018d2 <_Z17linkbus_send_textPc>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    18de:	21 11       	cpse	r18, r1
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <_Z17linkbus_send_textPc+0x38>
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	a1 f0       	breq	.+40     	; 0x190e <_Z17linkbus_send_textPc+0x3c>
    18e6:	8c 01       	movw	r16, r24
    18e8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <nextEmptyTxBuffer>
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	b9 f4       	brne	.+46     	; 0x191e <_Z17linkbus_send_textPc+0x4c>
    18f0:	c8 ec       	ldi	r28, 0xC8	; 200
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <_Z17linkbus_send_textPc+0x28>
    18f6:	20 97       	sbiw	r28, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <_Z17linkbus_send_textPc+0x40>
    18fa:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <_ZL17linkbus_tx_active>
    18fe:	99 23       	and	r25, r25
    1900:	51 f0       	breq	.+20     	; 0x1916 <_Z17linkbus_send_textPc+0x44>
    1902:	20 97       	sbiw	r28, 0x00	; 0
    1904:	d1 f0       	breq	.+52     	; 0x193a <_Z17linkbus_send_textPc+0x68>
    1906:	21 97       	sbiw	r28, 0x01	; 1
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <_Z17linkbus_send_textPc+0x28>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	1b c0       	rjmp	.+54     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	19 c0       	rjmp	.+50     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	17 c0       	rjmp	.+46     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    1916:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <nextEmptyTxBuffer>
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f3       	breq	.-40     	; 0x18f6 <_Z17linkbus_send_textPc+0x24>
    191e:	1f 93       	push	r17
    1920:	0f 93       	push	r16
    1922:	9f 93       	push	r25
    1924:	8f 93       	push	r24
    1926:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    192a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_Z16linkbus_start_txv>
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <_Z17linkbus_send_textPc+0x72>
    193a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <nextEmptyTxBuffer>
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	71 f7       	brne	.-36     	; 0x191e <_Z17linkbus_send_textPc+0x4c>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <lb_send_NewPrompt>:
    194e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1952:	81 11       	cpse	r24, r1
    1954:	06 c0       	rjmp	.+12     	; 0x1962 <lb_send_NewPrompt+0x14>
    1956:	81 e2       	ldi	r24, 0x21	; 33
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    195e:	81 11       	cpse	r24, r1
    1960:	fa cf       	rjmp	.-12     	; 0x1956 <lb_send_NewPrompt+0x8>
    1962:	08 95       	ret

00001964 <lb_send_NewLine>:
    1964:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1968:	81 11       	cpse	r24, r1
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <lb_send_NewLine+0x10>
    196c:	84 e2       	ldi	r24, 0x24	; 36
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    1974:	08 95       	ret

00001976 <lb_echo_char>:
    1976:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    197a:	91 11       	cpse	r25, r1
    197c:	07 c0       	rjmp	.+14     	; 0x198c <lb_echo_char+0x16>
    197e:	e1 ef       	ldi	r30, 0xF1	; 241
    1980:	f3 e0       	ldi	r31, 0x03	; 3
    1982:	80 83       	st	Z, r24
    1984:	11 82       	std	Z+1, r1	; 0x01
    1986:	cf 01       	movw	r24, r30
    1988:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    198c:	08 95       	ret

0000198e <lb_send_string>:
    198e:	cf 93       	push	r28
    1990:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1994:	21 11       	cpse	r18, r1
    1996:	28 c0       	rjmp	.+80     	; 0x19e8 <lb_send_string+0x5a>
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	41 f1       	breq	.+80     	; 0x19ec <lb_send_string+0x5e>
    199c:	fc 01       	movw	r30, r24
    199e:	20 81       	ld	r18, Z
    19a0:	22 23       	and	r18, r18
    19a2:	31 f1       	breq	.+76     	; 0x19f0 <lb_send_string+0x62>
    19a4:	01 90       	ld	r0, Z+
    19a6:	00 20       	and	r0, r0
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <lb_send_string+0x16>
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	e8 1b       	sub	r30, r24
    19ae:	f9 0b       	sbc	r31, r25
    19b0:	ba 97       	sbiw	r30, 0x2a	; 42
    19b2:	00 f5       	brcc	.+64     	; 0x19f4 <lb_send_string+0x66>
    19b4:	c6 2f       	mov	r28, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	49 e2       	ldi	r20, 0x29	; 41
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	81 ef       	ldi	r24, 0xF1	; 241
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0e 94 ad 32 	call	0x655a	; 0x655a <strncpy>
    19c4:	cc 23       	and	r28, r28
    19c6:	59 f0       	breq	.+22     	; 0x19de <lb_send_string+0x50>
    19c8:	81 ef       	ldi	r24, 0xF1	; 241
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    19d0:	81 11       	cpse	r24, r1
    19d2:	fa cf       	rjmp	.-12     	; 0x19c8 <lb_send_string+0x3a>
    19d4:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <_ZL17linkbus_tx_active>
    19d8:	81 11       	cpse	r24, r1
    19da:	fc cf       	rjmp	.-8      	; 0x19d4 <lb_send_string+0x46>
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <lb_send_string+0x68>
    19de:	81 ef       	ldi	r24, 0xF1	; 241
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z17linkbus_send_textPc>
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <lb_send_string+0x68>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <lb_send_string+0x68>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <lb_send_string+0x68>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <lb_send_string+0x68>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <lb_enabled>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    19fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	91 11       	cpse	r25, r1
    1a02:	80 e0       	ldi	r24, 0x00	; 0
}
    1a04:	08 95       	ret

00001a06 <__vector_6>:
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
	return(roundf(offset + (readADC() - 324.31) / 1.22));
}
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	0f 92       	push	r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	8f 93       	push	r24
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <g_i2c_not_timed_out>
    1a1a:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <_ZL24g_enableHardwareWDResets>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <__vector_6+0x26>
    1a22:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_6E5limit>
    1a26:	81 11       	cpse	r24, r1
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <__vector_6+0x36>
    1a2a:	0e c0       	rjmp	.+28     	; 0x1a48 <__vector_6+0x42>
    1a2c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_6E5limit>
    1a30:	88 23       	and	r24, r24
    1a32:	51 f0       	breq	.+20     	; 0x1a48 <__vector_6+0x42>
    1a34:	81 50       	subi	r24, 0x01	; 1
    1a36:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_6E5limit>
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <__vector_6+0x42>
    1a3c:	e0 e6       	ldi	r30, 0x60	; 96
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	80 83       	st	Z, r24
    1a46:	f2 cf       	rjmp	.-28     	; 0x1a2c <__vector_6+0x26>
    1a48:	ff 91       	pop	r31
    1a4a:	ef 91       	pop	r30
    1a4c:	8f 91       	pop	r24
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	0f 90       	pop	r0
    1a54:	1f 90       	pop	r1
    1a56:	18 95       	reti

00001a58 <_Z8wdt_init7WDReset>:
    1a58:	a8 95       	wdr
    1a5a:	04 b6       	in	r0, 0x34	; 52
    1a5c:	03 fe       	sbrs	r0, 3
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <_Z8wdt_init7WDReset+0xe>
    1a60:	94 b7       	in	r25, 0x34	; 52
    1a62:	98 70       	andi	r25, 0x08	; 8
    1a64:	94 bf       	out	0x34, r25	; 52
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <_Z8wdt_init7WDReset+0x2a>
    1a6a:	84 b7       	in	r24, 0x34	; 52
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	84 bf       	out	0x34, r24	; 52
    1a70:	e0 e6       	ldi	r30, 0x60	; 96
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 61       	ori	r24, 0x18	; 24
    1a78:	80 83       	st	Z, r24
    1a7a:	10 82       	st	Z, r1
    1a7c:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <_ZL24g_enableHardwareWDResets>
    1a80:	08 95       	ret
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	41 f4       	brne	.+16     	; 0x1a96 <_Z8wdt_init7WDReset+0x3e>
    1a86:	e0 e6       	ldi	r30, 0x60	; 96
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	98 61       	ori	r25, 0x18	; 24
    1a8e:	90 83       	st	Z, r25
    1a90:	98 e6       	ldi	r25, 0x68	; 104
    1a92:	90 83       	st	Z, r25
    1a94:	11 c0       	rjmp	.+34     	; 0x1ab8 <_Z8wdt_init7WDReset+0x60>
    1a96:	81 11       	cpse	r24, r1
    1a98:	08 c0       	rjmp	.+16     	; 0x1aaa <_Z8wdt_init7WDReset+0x52>
    1a9a:	e0 e6       	ldi	r30, 0x60	; 96
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	90 81       	ld	r25, Z
    1aa0:	98 61       	ori	r25, 0x18	; 24
    1aa2:	90 83       	st	Z, r25
    1aa4:	96 e4       	ldi	r25, 0x46	; 70
    1aa6:	90 83       	st	Z, r25
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <_Z8wdt_init7WDReset+0x60>
    1aaa:	e0 e6       	ldi	r30, 0x60	; 96
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	90 81       	ld	r25, Z
    1ab0:	98 61       	ori	r25, 0x18	; 24
    1ab2:	90 83       	st	Z, r25
    1ab4:	98 e4       	ldi	r25, 0x48	; 72
    1ab6:	90 83       	st	Z, r25
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	81 11       	cpse	r24, r1
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <_Z8wdt_init7WDReset+0x68>
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <_ZL24g_enableHardwareWDResets>
    1ac4:	08 95       	ret

00001ac6 <__vector_21>:
    1ac6:	1f 92       	push	r1
    1ac8:	0f 92       	push	r0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	0f 92       	push	r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	2f 93       	push	r18
    1ad2:	3f 93       	push	r19
    1ad4:	4f 93       	push	r20
    1ad6:	5f 93       	push	r21
    1ad8:	6f 93       	push	r22
    1ada:	7f 93       	push	r23
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	8e ec       	ldi	r24, 0xCE	; 206
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN8Goertzel9DataPointEi>
    1af6:	88 23       	and	r24, r24
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <__vector_21+0x3e>
    1afa:	ea e7       	ldi	r30, 0x7A	; 122
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	80 83       	st	Z, r24
    1b04:	ff 91       	pop	r31
    1b06:	ef 91       	pop	r30
    1b08:	bf 91       	pop	r27
    1b0a:	af 91       	pop	r26
    1b0c:	9f 91       	pop	r25
    1b0e:	8f 91       	pop	r24
    1b10:	7f 91       	pop	r23
    1b12:	6f 91       	pop	r22
    1b14:	5f 91       	pop	r21
    1b16:	4f 91       	pop	r20
    1b18:	3f 91       	pop	r19
    1b1a:	2f 91       	pop	r18
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0
    1b22:	1f 90       	pop	r1
    1b24:	18 95       	reti

00001b26 <__vector_18>:
    1b26:	1f 92       	push	r1
    1b28:	0f 92       	push	r0
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	0f 92       	push	r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	1f 93       	push	r17
    1b32:	2f 93       	push	r18
    1b34:	3f 93       	push	r19
    1b36:	4f 93       	push	r20
    1b38:	5f 93       	push	r21
    1b3a:	6f 93       	push	r22
    1b3c:	7f 93       	push	r23
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	af 93       	push	r26
    1b44:	bf 93       	push	r27
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	ef 93       	push	r30
    1b4c:	ff 93       	push	r31
    1b4e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1b52:	c0 91 a3 04 	lds	r28, 0x04A3	; 0x8004a3 <_ZZ11__vector_18E4buff>
    1b56:	d0 91 a4 04 	lds	r29, 0x04A4	; 0x8004a4 <_ZZ11__vector_18E4buff+0x1>
    1b5a:	20 97       	sbiw	r28, 0x00	; 0
    1b5c:	51 f4       	brne	.+20     	; 0x1b72 <__vector_18+0x4c>
    1b5e:	0e 94 8f 0b 	call	0x171e	; 0x171e <nextEmptyRxBuffer>
    1b62:	ec 01       	movw	r28, r24
    1b64:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <_ZZ11__vector_18E4buff+0x1>
    1b68:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_ZZ11__vector_18E4buff>
    1b6c:	89 2b       	or	r24, r25
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__vector_18+0x4c>
    1b70:	62 c1       	rjmp	.+708    	; 0x1e36 <__vector_18+0x310>
    1b72:	81 2f       	mov	r24, r17
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 93 32 	call	0x6526	; 0x6526 <toupper>
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <_ZZ11__vector_18E11ignoreCount>
    1b80:	88 23       	and	r24, r24
    1b82:	21 f0       	breq	.+8      	; 0x1b8c <__vector_18+0x66>
    1b84:	81 50       	subi	r24, 0x01	; 1
    1b86:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ11__vector_18E11ignoreCount>
    1b8a:	55 c1       	rjmp	.+682    	; 0x1e36 <__vector_18+0x310>
    1b8c:	2b 31       	cpi	r18, 0x1B	; 27
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <__vector_18+0x72>
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ11__vector_18E11ignoreCount>
    1b96:	4f c1       	rjmp	.+670    	; 0x1e36 <__vector_18+0x310>
    1b98:	2d 30       	cpi	r18, 0x0D	; 13
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <__vector_18+0x78>
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <__vector_18+0xf6>
    1b9e:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZZ11__vector_18E13receiving_msg>
    1ba2:	88 23       	and	r24, r24
    1ba4:	31 f1       	breq	.+76     	; 0x1bf2 <__vector_18+0xcc>
    1ba6:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1baa:	ee 23       	and	r30, r30
    1bac:	f9 f0       	breq	.+62     	; 0x1bec <__vector_18+0xc6>
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	88 83       	st	Y, r24
    1bb2:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1bb6:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZZ11__vector_18E11field_index>
    1bc2:	88 23       	and	r24, r24
    1bc4:	79 f0       	breq	.+30     	; 0x1be4 <__vector_18+0xbe>
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	40 91 5d 04 	lds	r20, 0x045D	; 0x80045d <_ZZ11__vector_18E9field_len>
    1bce:	54 e1       	ldi	r21, 0x14	; 20
    1bd0:	58 9f       	mul	r21, r24
    1bd2:	90 01       	movw	r18, r0
    1bd4:	59 9f       	mul	r21, r25
    1bd6:	30 0d       	add	r19, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	c2 0f       	add	r28, r18
    1bdc:	d3 1f       	adc	r29, r19
    1bde:	c4 0f       	add	r28, r20
    1be0:	d1 1d       	adc	r29, r1
    1be2:	1b 82       	std	Y+3, r1	; 0x03
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	ee 59       	subi	r30, 0x9E	; 158
    1be8:	fb 4f       	sbci	r31, 0xFB	; 251
    1bea:	10 82       	st	Z, r1
    1bec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <__vector_18+0xd4>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	9f e7       	ldi	r25, 0x7F	; 127
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1bfe:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <_ZZ11__vector_18E9field_len>
    1c02:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1c06:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1c0a:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZZ11__vector_18E11field_index>
    1c0e:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZZ11__vector_18E4buff+0x1>
    1c12:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <_ZZ11__vector_18E4buff>
    1c16:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZZ11__vector_18E13receiving_msg>
    1c1a:	0d c1       	rjmp	.+538    	; 0x1e36 <__vector_18+0x310>
    1c1c:	22 23       	and	r18, r18
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <__vector_18+0xfc>
    1c20:	0a c1       	rjmp	.+532    	; 0x1e36 <__vector_18+0x310>
    1c22:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1c26:	4e 2f       	mov	r20, r30
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	da 01       	movw	r26, r20
    1c2c:	ae 59       	subi	r26, 0x9E	; 158
    1c2e:	bb 4f       	sbci	r27, 0xFB	; 251
    1c30:	2c 93       	st	X, r18
    1c32:	ee 23       	and	r30, r30
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <__vector_18+0x112>
    1c36:	d6 c0       	rjmp	.+428    	; 0x1de4 <__vector_18+0x2be>
    1c38:	2f 37       	cpi	r18, 0x7F	; 127
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <__vector_18+0x118>
    1c3c:	5f c0       	rjmp	.+190    	; 0x1cfc <__vector_18+0x1d6>
    1c3e:	e1 50       	subi	r30, 0x01	; 1
    1c40:	e0 93 a1 04 	sts	0x04A1, r30	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1c44:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZZ11__vector_18E11field_index>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	13 c0       	rjmp	.+38     	; 0x1c72 <__vector_18+0x14c>
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	ee 59       	subi	r30, 0x9E	; 158
    1c50:	fb 4f       	sbci	r31, 0xFB	; 251
    1c52:	40 81       	ld	r20, Z
    1c54:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1c58:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1c5c:	84 1b       	sub	r24, r20
    1c5e:	91 09       	sbc	r25, r1
    1c60:	6a e0       	ldi	r22, 0x0A	; 10
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    1c68:	70 93 60 04 	sts	0x0460, r23	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1c6c:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1c70:	39 c0       	rjmp	.+114    	; 0x1ce4 <__vector_18+0x1be>
    1c72:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <_ZZ11__vector_18E9field_len>
    1c76:	99 23       	and	r25, r25
    1c78:	91 f0       	breq	.+36     	; 0x1c9e <__vector_18+0x178>
    1c7a:	4f ef       	ldi	r20, 0xFF	; 255
    1c7c:	49 0f       	add	r20, r25
    1c7e:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <_ZZ11__vector_18E9field_len>
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	54 e1       	ldi	r21, 0x14	; 20
    1c88:	58 9f       	mul	r21, r24
    1c8a:	b0 01       	movw	r22, r0
    1c8c:	59 9f       	mul	r21, r25
    1c8e:	70 0d       	add	r23, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	c6 0f       	add	r28, r22
    1c94:	d7 1f       	adc	r29, r23
    1c96:	c4 0f       	add	r28, r20
    1c98:	d1 1d       	adc	r29, r1
    1c9a:	1b 82       	std	Y+3, r1	; 0x03
    1c9c:	23 c0       	rjmp	.+70     	; 0x1ce4 <__vector_18+0x1be>
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	ee 59       	subi	r30, 0x9E	; 158
    1ca2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca4:	90 81       	ld	r25, Z
    1ca6:	90 32       	cpi	r25, 0x20	; 32
    1ca8:	a1 f4       	brne	.+40     	; 0x1cd2 <__vector_18+0x1ac>
    1caa:	81 50       	subi	r24, 0x01	; 1
    1cac:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZZ11__vector_18E11field_index>
    1cb0:	de 01       	movw	r26, r28
    1cb2:	94 e1       	ldi	r25, 0x14	; 20
    1cb4:	89 9f       	mul	r24, r25
    1cb6:	a0 0d       	add	r26, r0
    1cb8:	b1 1d       	adc	r27, r1
    1cba:	11 24       	eor	r1, r1
    1cbc:	13 96       	adiw	r26, 0x03	; 3
    1cbe:	fd 01       	movw	r30, r26
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	00 20       	and	r0, r0
    1cc4:	e9 f7       	brne	.-6      	; 0x1cc0 <__vector_18+0x19a>
    1cc6:	31 97       	sbiw	r30, 0x01	; 1
    1cc8:	ea 1b       	sub	r30, r26
    1cca:	fb 0b       	sbc	r31, r27
    1ccc:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <_ZZ11__vector_18E9field_len>
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <__vector_18+0x1be>
    1cd2:	94 e1       	ldi	r25, 0x14	; 20
    1cd4:	89 9f       	mul	r24, r25
    1cd6:	c0 0d       	add	r28, r0
    1cd8:	d1 1d       	adc	r29, r1
    1cda:	11 24       	eor	r1, r1
    1cdc:	1b 82       	std	Y+3, r1	; 0x03
    1cde:	81 50       	subi	r24, 0x01	; 1
    1ce0:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZZ11__vector_18E11field_index>
    1ce4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1ce8:	e8 2f       	mov	r30, r24
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	ee 59       	subi	r30, 0x9E	; 158
    1cee:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf0:	10 82       	st	Z, r1
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	93 c0       	rjmp	.+294    	; 0x1e1c <__vector_18+0x2f6>
    1cf6:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZZ11__vector_18E13receiving_msg>
    1cfa:	90 c0       	rjmp	.+288    	; 0x1e1c <__vector_18+0x2f6>
    1cfc:	20 32       	cpi	r18, 0x20	; 32
    1cfe:	79 f5       	brne	.+94     	; 0x1d5e <__vector_18+0x238>
    1d00:	fa 01       	movw	r30, r20
    1d02:	ef 59       	subi	r30, 0x9F	; 159
    1d04:	fb 4f       	sbci	r31, 0xFB	; 251
    1d06:	80 81       	ld	r24, Z
    1d08:	80 32       	cpi	r24, 0x20	; 32
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <__vector_18+0x1e8>
    1d0c:	94 c0       	rjmp	.+296    	; 0x1e36 <__vector_18+0x310>
    1d0e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <_ZZ11__vector_18E11field_index>
    1d12:	68 2f       	mov	r22, r24
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	fb 01       	movw	r30, r22
    1d18:	31 96       	adiw	r30, 0x01	; 1
    1d1a:	33 97       	sbiw	r30, 0x03	; 3
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <__vector_18+0x1fa>
    1d1e:	8b c0       	rjmp	.+278    	; 0x1e36 <__vector_18+0x310>
    1d20:	88 23       	and	r24, r24
    1d22:	79 f0       	breq	.+30     	; 0x1d42 <__vector_18+0x21c>
    1d24:	61 50       	subi	r22, 0x01	; 1
    1d26:	71 09       	sbc	r23, r1
    1d28:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <_ZZ11__vector_18E9field_len>
    1d2c:	a4 e1       	ldi	r26, 0x14	; 20
    1d2e:	a6 9f       	mul	r26, r22
    1d30:	f0 01       	movw	r30, r0
    1d32:	a7 9f       	mul	r26, r23
    1d34:	f0 0d       	add	r31, r0
    1d36:	11 24       	eor	r1, r1
    1d38:	ce 0f       	add	r28, r30
    1d3a:	df 1f       	adc	r29, r31
    1d3c:	c9 0f       	add	r28, r25
    1d3e:	d1 1d       	adc	r29, r1
    1d40:	1b 82       	std	Y+3, r1	; 0x03
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <_ZZ11__vector_18E11field_index>
    1d48:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <_ZZ11__vector_18E9field_len>
    1d4c:	4f 5f       	subi	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	4e 33       	cpi	r20, 0x3E	; 62
    1d52:	51 05       	cpc	r21, r1
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <__vector_18+0x232>
    1d56:	4e e3       	ldi	r20, 0x3E	; 62
    1d58:	40 93 a1 04 	sts	0x04A1, r20	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1d5c:	5f c0       	rjmp	.+190    	; 0x1e1c <__vector_18+0x2f6>
    1d5e:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <_ZZ11__vector_18E9field_len>
    1d62:	84 31       	cpi	r24, 0x14	; 20
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <__vector_18+0x242>
    1d66:	67 c0       	rjmp	.+206    	; 0x1e36 <__vector_18+0x310>
    1d68:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <_ZZ11__vector_18E11field_index>
    1d6c:	41 11       	cpse	r20, r1
    1d6e:	19 c0       	rjmp	.+50     	; 0x1da2 <__vector_18+0x27c>
    1d70:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1d74:	50 91 60 04 	lds	r21, 0x0460	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1d78:	ba 01       	movw	r22, r20
    1d7a:	66 0f       	add	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	44 0f       	add	r20, r20
    1d80:	55 1f       	adc	r21, r21
    1d82:	44 0f       	add	r20, r20
    1d84:	55 1f       	adc	r21, r21
    1d86:	44 0f       	add	r20, r20
    1d88:	55 1f       	adc	r21, r21
    1d8a:	46 0f       	add	r20, r22
    1d8c:	57 1f       	adc	r21, r23
    1d8e:	42 0f       	add	r20, r18
    1d90:	51 1d       	adc	r21, r1
    1d92:	50 93 60 04 	sts	0x0460, r21	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1d96:	40 93 5f 04 	sts	0x045F, r20	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <_ZZ11__vector_18E9field_len>
    1da0:	16 c0       	rjmp	.+44     	; 0x1dce <__vector_18+0x2a8>
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	41 50       	subi	r20, 0x01	; 1
    1da6:	51 09       	sbc	r21, r1
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	98 0f       	add	r25, r24
    1dac:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <_ZZ11__vector_18E9field_len>
    1db0:	e4 e1       	ldi	r30, 0x14	; 20
    1db2:	e4 9f       	mul	r30, r20
    1db4:	b0 01       	movw	r22, r0
    1db6:	e5 9f       	mul	r30, r21
    1db8:	70 0d       	add	r23, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	c6 0f       	add	r28, r22
    1dbe:	d7 1f       	adc	r29, r23
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e8 0f       	add	r30, r24
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	23 83       	std	Z+3, r18	; 0x03
    1dc8:	c9 0f       	add	r28, r25
    1dca:	d1 1d       	adc	r29, r1
    1dcc:	1b 82       	std	Y+3, r1	; 0x03
    1dce:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	8e 33       	cpi	r24, 0x3E	; 62
    1dd8:	91 05       	cpc	r25, r1
    1dda:	0c f0       	brlt	.+2      	; 0x1dde <__vector_18+0x2b8>
    1ddc:	8e e3       	ldi	r24, 0x3E	; 62
    1dde:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1de2:	1c c0       	rjmp	.+56     	; 0x1e1c <__vector_18+0x2f6>
    1de4:	2f 37       	cpi	r18, 0x7F	; 127
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <__vector_18+0x2d2>
    1de8:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1dec:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1df0:	18 16       	cp	r1, r24
    1df2:	19 06       	cpc	r1, r25
    1df4:	bc f0       	brlt	.+46     	; 0x1e24 <__vector_18+0x2fe>
    1df6:	1b c0       	rjmp	.+54     	; 0x1e2e <__vector_18+0x308>
    1df8:	20 32       	cpi	r18, 0x20	; 32
    1dfa:	e9 f0       	breq	.+58     	; 0x1e36 <__vector_18+0x310>
    1dfc:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZZ11__vector_18E11field_index>
    1e00:	c9 01       	movw	r24, r18
    1e02:	99 27       	eor	r25, r25
    1e04:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1e08:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1e0c:	1b 82       	std	Y+3, r1	; 0x03
    1e0e:	1f 8a       	std	Y+23, r1	; 0x17
    1e10:	1b a6       	std	Y+43, r1	; 0x2b
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <_ZZ11__vector_18E13receiving_msg>
    1e18:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZZ11__vector_18E9charIndex>
    1e1c:	82 2f       	mov	r24, r18
    1e1e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lb_echo_char>
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <__vector_18+0x310>
    1e24:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1e28:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1e2c:	f7 cf       	rjmp	.-18     	; 0x1e1c <__vector_18+0x2f6>
    1e2e:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZZ11__vector_18E6msg_ID+0x1>
    1e32:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZZ11__vector_18E6msg_ID>
    1e36:	ff 91       	pop	r31
    1e38:	ef 91       	pop	r30
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	bf 91       	pop	r27
    1e40:	af 91       	pop	r26
    1e42:	9f 91       	pop	r25
    1e44:	8f 91       	pop	r24
    1e46:	7f 91       	pop	r23
    1e48:	6f 91       	pop	r22
    1e4a:	5f 91       	pop	r21
    1e4c:	4f 91       	pop	r20
    1e4e:	3f 91       	pop	r19
    1e50:	2f 91       	pop	r18
    1e52:	1f 91       	pop	r17
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_19>:
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	2f 93       	push	r18
    1e6a:	3f 93       	push	r19
    1e6c:	4f 93       	push	r20
    1e6e:	5f 93       	push	r21
    1e70:	6f 93       	push	r22
    1e72:	7f 93       	push	r23
    1e74:	8f 93       	push	r24
    1e76:	9f 93       	push	r25
    1e78:	af 93       	push	r26
    1e7a:	bf 93       	push	r27
    1e7c:	ef 93       	push	r30
    1e7e:	ff 93       	push	r31
    1e80:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZZ11__vector_19E4buff>
    1e84:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <_ZZ11__vector_19E4buff+0x1>
    1e88:	89 2b       	or	r24, r25
    1e8a:	31 f4       	brne	.+12     	; 0x1e98 <__vector_19+0x3a>
    1e8c:	0e 94 41 0b 	call	0x1682	; 0x1682 <nextFullTxBuffer>
    1e90:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <_ZZ11__vector_19E4buff+0x1>
    1e94:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <_ZZ11__vector_19E4buff>
    1e98:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <_ZZ11__vector_19E4buff>
    1e9c:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <_ZZ11__vector_19E4buff+0x1>
    1ea0:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZZ11__vector_19E9charIndex>
    1ea4:	df 01       	movw	r26, r30
    1ea6:	a8 0f       	add	r26, r24
    1ea8:	b1 1d       	adc	r27, r1
    1eaa:	9c 91       	ld	r25, X
    1eac:	99 23       	and	r25, r25
    1eae:	31 f0       	breq	.+12     	; 0x1ebc <__vector_19+0x5e>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <_ZZ11__vector_19E9charIndex>
    1eb6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1eba:	0d c0       	rjmp	.+26     	; 0x1ed6 <__vector_19+0x78>
    1ebc:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <_ZZ11__vector_19E9charIndex>
    1ec0:	10 82       	st	Z, r1
    1ec2:	0e 94 41 0b 	call	0x1682	; 0x1682 <nextFullTxBuffer>
    1ec6:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <_ZZ11__vector_19E4buff+0x1>
    1eca:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <_ZZ11__vector_19E4buff>
    1ece:	89 2b       	or	r24, r25
    1ed0:	11 f4       	brne	.+4      	; 0x1ed6 <__vector_19+0x78>
    1ed2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <linkbus_end_tx>
    1ed6:	ff 91       	pop	r31
    1ed8:	ef 91       	pop	r30
    1eda:	bf 91       	pop	r27
    1edc:	af 91       	pop	r26
    1ede:	9f 91       	pop	r25
    1ee0:	8f 91       	pop	r24
    1ee2:	7f 91       	pop	r23
    1ee4:	6f 91       	pop	r22
    1ee6:	5f 91       	pop	r21
    1ee8:	4f 91       	pop	r20
    1eea:	3f 91       	pop	r19
    1eec:	2f 91       	pop	r18
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	0f 90       	pop	r0
    1ef4:	1f 90       	pop	r1
    1ef6:	18 95       	reti

00001ef8 <__vector_8>:
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	1f 93       	push	r17
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	4f 93       	push	r20
    1f0a:	5f 93       	push	r21
    1f0c:	6f 93       	push	r22
    1f0e:	7f 93       	push	r23
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	ef 93       	push	r30
    1f1a:	ff 93       	push	r31
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <__vector_8+0x2a>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_tick_count>
    1f2a:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_tick_count+0x1>
    1f2e:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <g_tick_count+0x2>
    1f32:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <g_tick_count+0x3>
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	a1 1d       	adc	r26, r1
    1f3a:	b1 1d       	adc	r27, r1
    1f3c:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <g_tick_count>
    1f40:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <g_tick_count+0x1>
    1f44:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <g_tick_count+0x2>
    1f48:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <g_tick_count+0x3>
    1f4c:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_dtmf_error_countdown>
    1f50:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <g_dtmf_error_countdown+0x1>
    1f54:	89 2b       	or	r24, r25
    1f56:	49 f0       	breq	.+18     	; 0x1f6a <__vector_8+0x72>
    1f58:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_dtmf_error_countdown>
    1f5c:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <g_dtmf_error_countdown+0x1>
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <g_dtmf_error_countdown+0x1>
    1f66:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <g_dtmf_error_countdown>
    1f6a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_LED_Enunciation_holdoff>
    1f6e:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    1f72:	89 2b       	or	r24, r25
    1f74:	49 f0       	breq	.+18     	; 0x1f88 <__vector_8+0x90>
    1f76:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_LED_Enunciation_holdoff>
    1f7a:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    1f84:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_LED_Enunciation_holdoff>
    1f88:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <g_dtmf_detected>
    1f8c:	88 23       	and	r24, r24
    1f8e:	81 f0       	breq	.+32     	; 0x1fb0 <__vector_8+0xb8>
    1f90:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_tone_duration_ticks>
    1f94:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_tone_duration_ticks+0x1>
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <g_tone_duration_ticks+0x1>
    1f9e:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_tone_duration_ticks>
    1fa2:	84 e9       	ldi	r24, 0x94	; 148
    1fa4:	95 e0       	ldi	r25, 0x05	; 5
    1fa6:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    1faa:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_LED_Enunciation_holdoff>
    1fae:	04 c0       	rjmp	.+8      	; 0x1fb8 <__vector_8+0xc0>
    1fb0:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <g_tone_duration_ticks+0x1>
    1fb4:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <g_tone_duration_ticks>
    1fb8:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    1fbc:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    1fc0:	89 2b       	or	r24, r25
    1fc2:	49 f0       	breq	.+18     	; 0x1fd6 <__vector_8+0xde>
    1fc4:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    1fc8:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    1fd2:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	1a 82       	std	Y+2, r1	; 0x02
    1fdc:	81 e1       	ldi	r24, 0x11	; 17
    1fde:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    1fe2:	18 2f       	mov	r17, r24
    1fe4:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_reset_button_held>
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f4       	brne	.+2      	; 0x1fee <__vector_8+0xf6>
    1fec:	6a c1       	rjmp	.+724    	; 0x22c2 <__vector_8+0x3ca>
    1fee:	11 23       	and	r17, r17
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <__vector_8+0xfc>
    1ff2:	59 c1       	rjmp	.+690    	; 0x22a6 <__vector_8+0x3ae>
    1ff4:	66 c1       	rjmp	.+716    	; 0x22c2 <__vector_8+0x3ca>
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	80 e1       	ldi	r24, 0x10	; 16
    1ffa:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    1ffe:	1b c0       	rjmp	.+54     	; 0x2036 <__vector_8+0x13e>
    2000:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_seconds_since_powerup>
    2004:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <g_seconds_since_powerup+0x1>
    2008:	a0 91 66 05 	lds	r26, 0x0566	; 0x800566 <g_seconds_since_powerup+0x2>
    200c:	b0 91 67 05 	lds	r27, 0x0567	; 0x800567 <g_seconds_since_powerup+0x3>
    2010:	05 97       	sbiw	r24, 0x05	; 5
    2012:	a1 05       	cpc	r26, r1
    2014:	b1 05       	cpc	r27, r1
    2016:	79 f4       	brne	.+30     	; 0x2036 <__vector_8+0x13e>
    2018:	86 e0       	ldi	r24, 0x06	; 6
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_seconds_since_powerup>
    2024:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <g_seconds_since_powerup+0x1>
    2028:	a0 93 66 05 	sts	0x0566, r26	; 0x800566 <g_seconds_since_powerup+0x2>
    202c:	b0 93 67 05 	sts	0x0567, r27	; 0x800567 <g_seconds_since_powerup+0x3>
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <g_perform_EEPROM_reset>
    2036:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E15holdButtonState>
    203a:	18 13       	cpse	r17, r24
    203c:	28 c0       	rjmp	.+80     	; 0x208e <__vector_8+0x196>
    203e:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <g_sync_pin_timer>
    2042:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <g_sync_pin_timer+0x1>
    2046:	8b 3b       	cpi	r24, 0xBB	; 187
    2048:	90 41       	sbci	r25, 0x10	; 16
    204a:	4c f4       	brge	.+18     	; 0x205e <__vector_8+0x166>
    204c:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <g_sync_pin_timer>
    2050:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <g_sync_pin_timer+0x1>
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <g_sync_pin_timer+0x1>
    205a:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <g_sync_pin_timer>
    205e:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <g_sync_pin_timer>
    2062:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <g_sync_pin_timer+0x1>
    2066:	80 39       	cpi	r24, 0x90	; 144
    2068:	91 05       	cpc	r25, r1
    206a:	bc f0       	brlt	.+46     	; 0x209a <__vector_8+0x1a2>
    206c:	11 30       	cpi	r17, 0x01	; 1
    206e:	09 f4       	brne	.+2      	; 0x2072 <__vector_8+0x17a>
    2070:	2b c1       	rjmp	.+598    	; 0x22c8 <__vector_8+0x3d0>
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <g_sync_pin_stable>
    2078:	11 11       	cpse	r17, r1
    207a:	0f c0       	rjmp	.+30     	; 0x209a <__vector_8+0x1a2>
    207c:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_reset_button_held>
    2080:	81 11       	cpse	r24, r1
    2082:	0b c0       	rjmp	.+22     	; 0x209a <__vector_8+0x1a2>
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	80 e1       	ldi	r24, 0x10	; 16
    2088:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    208c:	06 c0       	rjmp	.+12     	; 0x209a <__vector_8+0x1a2>
    208e:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <_ZZ10__vector_8E15holdButtonState>
    2092:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <g_sync_pin_timer+0x1>
    2096:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_sync_pin_timer>
    209a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    209e:	81 11       	cpse	r24, r1
    20a0:	1d c1       	rjmp	.+570    	; 0x22dc <__vector_8+0x3e4>
    20a2:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_on_the_air>
    20a6:	88 23       	and	r24, r24
    20a8:	09 f4       	brne	.+2      	; 0x20ac <__vector_8+0x1b4>
    20aa:	18 c1       	rjmp	.+560    	; 0x22dc <__vector_8+0x3e4>
    20ac:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <_ZZ10__vector_8E11ptt_dropped>
    20b0:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <_ZZ10__vector_8E11ptt_dropped+0x1>
    20b4:	89 2b       	or	r24, r25
    20b6:	09 f4       	brne	.+2      	; 0x20ba <__vector_8+0x1c2>
    20b8:	0b c1       	rjmp	.+534    	; 0x22d0 <__vector_8+0x3d8>
    20ba:	10 c1       	rjmp	.+544    	; 0x22dc <__vector_8+0x3e4>
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	84 e0       	ldi	r24, 0x04	; 4
    20c0:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    20c4:	84 e9       	ldi	r24, 0x94	; 148
    20c6:	95 e0       	ldi	r25, 0x05	; 5
    20c8:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E9ptt_delay+0x1>
    20cc:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E9ptt_delay>
    20d0:	0b c1       	rjmp	.+534    	; 0x22e8 <__vector_8+0x3f0>
    20d2:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZZ10__vector_8E9ptt_delay>
    20d6:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <_ZZ10__vector_8E9ptt_delay+0x1>
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	31 f0       	breq	.+12     	; 0x20ea <__vector_8+0x1f2>
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E9ptt_delay+0x1>
    20e4:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E9ptt_delay>
    20e8:	ff c0       	rjmp	.+510    	; 0x22e8 <__vector_8+0x3f0>
    20ea:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZZ10__vector_8E7codeInc>
    20ee:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	f1 f1       	breq	.+124    	; 0x2172 <__vector_8+0x27a>
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    20fc:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ10__vector_8E7codeInc>
    2100:	89 2b       	or	r24, r25
    2102:	09 f0       	breq	.+2      	; 0x2106 <__vector_8+0x20e>
    2104:	f1 c0       	rjmp	.+482    	; 0x22e8 <__vector_8+0x3f0>
    2106:	ae 01       	movw	r20, r28
    2108:	4e 5f       	subi	r20, 0xFE	; 254
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	be 01       	movw	r22, r28
    210e:	6f 5f       	subi	r22, 0xFF	; 255
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    211a:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_ZZ10__vector_8E3key>
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	81 11       	cpse	r24, r1
    2122:	14 c0       	rjmp	.+40     	; 0x214c <__vector_8+0x254>
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	88 23       	and	r24, r24
    2128:	89 f0       	breq	.+34     	; 0x214c <__vector_8+0x254>
    212a:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZZ10__vector_8E3key>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_callsign_sent>
    2134:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <g_use_ptt_periodic_reset>
    2138:	88 23       	and	r24, r24
    213a:	41 f0       	breq	.+16     	; 0x214c <__vector_8+0x254>
    213c:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_on_the_air>
    2140:	84 e9       	ldi	r24, 0x94	; 148
    2142:	95 e0       	ldi	r25, 0x05	; 5
    2144:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZZ10__vector_8E11ptt_dropped+0x1>
    2148:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZZ10__vector_8E11ptt_dropped>
    214c:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    2150:	80 e1       	ldi	r24, 0x10	; 16
    2152:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2156:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2160:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    2164:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_sendAMmodulation>
    2168:	9f e2       	ldi	r25, 0x2F	; 47
    216a:	97 bd       	out	0x27, r25	; 39
    216c:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <g_audio_tone_state>
    2170:	bb c0       	rjmp	.+374    	; 0x22e8 <__vector_8+0x3f0>
    2172:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <g_sync_pin_stable>
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	29 f0       	breq	.+10     	; 0x2184 <__vector_8+0x28c>
    217a:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    217e:	80 e1       	ldi	r24, 0x10	; 16
    2180:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2184:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    2188:	86 e0       	ldi	r24, 0x06	; 6
    218a:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    218e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    2192:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_sendAMmodulation>
    2196:	9f e2       	ldi	r25, 0x2F	; 47
    2198:	97 bd       	out	0x27, r25	; 39
    219a:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <g_audio_tone_state>
    219e:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_code_throttle>
    21a2:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_code_throttle+0x1>
    21a6:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    21aa:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ10__vector_8E7codeInc>
    21ae:	9c c0       	rjmp	.+312    	; 0x22e8 <__vector_8+0x3f0>
    21b0:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZZ10__vector_8E9ptt_delay>
    21b4:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <_ZZ10__vector_8E9ptt_delay+0x1>
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	39 f4       	brne	.+14     	; 0x21ca <__vector_8+0x2d2>
    21bc:	84 e6       	ldi	r24, 0x64	; 100
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E9ptt_delay+0x1>
    21c4:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E9ptt_delay>
    21c8:	1c c0       	rjmp	.+56     	; 0x2202 <__vector_8+0x30a>
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_ZZ10__vector_8E9ptt_delay+0x1>
    21d0:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <_ZZ10__vector_8E9ptt_delay>
    21d4:	89 2b       	or	r24, r25
    21d6:	a9 f4       	brne	.+42     	; 0x2202 <__vector_8+0x30a>
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	84 e0       	ldi	r24, 0x04	; 4
    21dc:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    21e0:	10 c0       	rjmp	.+32     	; 0x2202 <__vector_8+0x30a>
    21e2:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <_ZZ10__vector_8E11ptt_dropped>
    21e6:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <_ZZ10__vector_8E11ptt_dropped+0x1>
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	51 f0       	breq	.+20     	; 0x2202 <__vector_8+0x30a>
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZZ10__vector_8E11ptt_dropped+0x1>
    21f4:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZZ10__vector_8E11ptt_dropped>
    21f8:	89 2b       	or	r24, r25
    21fa:	19 f4       	brne	.+6      	; 0x2202 <__vector_8+0x30a>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_on_the_air>
    2202:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_LED_enunciating>
    2206:	88 23       	and	r24, r24
    2208:	a9 f1       	breq	.+106    	; 0x2274 <__vector_8+0x37c>
    220a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_LED_Enunciation_holdoff>
    220e:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    2212:	89 2b       	or	r24, r25
    2214:	e9 f5       	brne	.+122    	; 0x2290 <__vector_8+0x398>
    2216:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZZ10__vector_8E7codeInc>
    221a:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	01 f1       	breq	.+64     	; 0x2262 <__vector_8+0x36a>
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    2228:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ10__vector_8E7codeInc>
    222c:	89 2b       	or	r24, r25
    222e:	81 f5       	brne	.+96     	; 0x2290 <__vector_8+0x398>
    2230:	ae 01       	movw	r20, r28
    2232:	4e 5f       	subi	r20, 0xFE	; 254
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
    2236:	be 01       	movw	r22, r28
    2238:	6f 5f       	subi	r22, 0xFF	; 255
    223a:	7f 4f       	sbci	r23, 0xFF	; 255
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    2244:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_ZZ10__vector_8E3key>
    2248:	68 2f       	mov	r22, r24
    224a:	80 e1       	ldi	r24, 0x10	; 16
    224c:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2250:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_code_throttle>
    2254:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_code_throttle+0x1>
    2258:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    225c:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ10__vector_8E7codeInc>
    2260:	17 c0       	rjmp	.+46     	; 0x2290 <__vector_8+0x398>
    2262:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_code_throttle>
    2266:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_code_throttle+0x1>
    226a:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <_ZZ10__vector_8E7codeInc+0x1>
    226e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ10__vector_8E7codeInc>
    2272:	0e c0       	rjmp	.+28     	; 0x2290 <__vector_8+0x398>
    2274:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZZ10__vector_8E3key>
    2278:	88 23       	and	r24, r24
    227a:	51 f0       	breq	.+20     	; 0x2290 <__vector_8+0x398>
    227c:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZZ10__vector_8E3key>
    2280:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <g_sync_pin_stable>
    2284:	82 30       	cpi	r24, 0x02	; 2
    2286:	21 f0       	breq	.+8      	; 0x2290 <__vector_8+0x398>
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	80 e1       	ldi	r24, 0x10	; 16
    228c:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	86 e0       	ldi	r24, 0x06	; 6
    2294:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2298:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sendAMmodulation>
    229c:	8f e2       	ldi	r24, 0x2F	; 47
    229e:	87 bd       	out	0x27, r24	; 39
    22a0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <g_audio_tone_state>
    22a4:	21 c0       	rjmp	.+66     	; 0x22e8 <__vector_8+0x3f0>
    22a6:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_seconds_since_powerup>
    22aa:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <g_seconds_since_powerup+0x1>
    22ae:	a0 91 66 05 	lds	r26, 0x0566	; 0x800566 <g_seconds_since_powerup+0x2>
    22b2:	b0 91 67 05 	lds	r27, 0x0567	; 0x800567 <g_seconds_since_powerup+0x3>
    22b6:	05 97       	sbiw	r24, 0x05	; 5
    22b8:	a1 05       	cpc	r26, r1
    22ba:	b1 05       	cpc	r27, r1
    22bc:	0c f0       	brlt	.+2      	; 0x22c0 <__vector_8+0x3c8>
    22be:	a0 ce       	rjmp	.-704    	; 0x2000 <__vector_8+0x108>
    22c0:	9a ce       	rjmp	.-716    	; 0x1ff6 <__vector_8+0xfe>
    22c2:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <g_reset_button_held>
    22c6:	b7 ce       	rjmp	.-658    	; 0x2036 <__vector_8+0x13e>
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <g_sync_pin_stable>
    22ce:	e5 ce       	rjmp	.-566    	; 0x209a <__vector_8+0x1a2>
    22d0:	84 e0       	ldi	r24, 0x04	; 4
    22d2:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    22d6:	81 11       	cpse	r24, r1
    22d8:	fc ce       	rjmp	.-520    	; 0x20d2 <__vector_8+0x1da>
    22da:	f0 ce       	rjmp	.-544    	; 0x20bc <__vector_8+0x1c4>
    22dc:	84 e0       	ldi	r24, 0x04	; 4
    22de:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    22e2:	81 11       	cpse	r24, r1
    22e4:	65 cf       	rjmp	.-310    	; 0x21b0 <__vector_8+0x2b8>
    22e6:	7d cf       	rjmp	.-262    	; 0x21e2 <__vector_8+0x2ea>
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	ff 91       	pop	r31
    22f2:	ef 91       	pop	r30
    22f4:	bf 91       	pop	r27
    22f6:	af 91       	pop	r26
    22f8:	9f 91       	pop	r25
    22fa:	8f 91       	pop	r24
    22fc:	7f 91       	pop	r23
    22fe:	6f 91       	pop	r22
    2300:	5f 91       	pop	r21
    2302:	4f 91       	pop	r20
    2304:	3f 91       	pop	r19
    2306:	2f 91       	pop	r18
    2308:	1f 91       	pop	r17
    230a:	0f 90       	pop	r0
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	0f 90       	pop	r0
    2310:	1f 90       	pop	r1
    2312:	18 95       	reti

00002314 <__vector_1>:
    2314:	1f 92       	push	r1
    2316:	0f 92       	push	r0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	0f 92       	push	r0
    231c:	11 24       	eor	r1, r1
    231e:	8f 92       	push	r8
    2320:	9f 92       	push	r9
    2322:	af 92       	push	r10
    2324:	bf 92       	push	r11
    2326:	cf 92       	push	r12
    2328:	df 92       	push	r13
    232a:	ef 92       	push	r14
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	2f 93       	push	r18
    2334:	3f 93       	push	r19
    2336:	4f 93       	push	r20
    2338:	5f 93       	push	r21
    233a:	6f 93       	push	r22
    233c:	7f 93       	push	r23
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	af 93       	push	r26
    2344:	bf 93       	push	r27
    2346:	ef 93       	push	r30
    2348:	ff 93       	push	r31
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	1f 92       	push	r1
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    2358:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    235c:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    2360:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	a1 1d       	adc	r26, r1
    2368:	b1 1d       	adc	r27, r1
    236a:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_current_epoch>
    236e:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_current_epoch+0x1>
    2372:	a0 93 5b 05 	sts	0x055B, r26	; 0x80055b <g_current_epoch+0x2>
    2376:	b0 93 5c 05 	sts	0x055C, r27	; 0x80055c <g_current_epoch+0x3>
    237a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_seconds_since_powerup>
    237e:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <g_seconds_since_powerup+0x1>
    2382:	a0 91 66 05 	lds	r26, 0x0566	; 0x800566 <g_seconds_since_powerup+0x2>
    2386:	b0 91 67 05 	lds	r27, 0x0567	; 0x800567 <g_seconds_since_powerup+0x3>
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	a1 1d       	adc	r26, r1
    238e:	b1 1d       	adc	r27, r1
    2390:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_seconds_since_powerup>
    2394:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <g_seconds_since_powerup+0x1>
    2398:	a0 93 66 05 	sts	0x0566, r26	; 0x800566 <g_seconds_since_powerup+0x2>
    239c:	b0 93 67 05 	sts	0x0567, r27	; 0x800567 <g_seconds_since_powerup+0x3>
    23a0:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_temperature_check_countdown>
    23a4:	88 23       	and	r24, r24
    23a6:	29 f0       	breq	.+10     	; 0x23b2 <__vector_1+0x9e>
    23a8:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_temperature_check_countdown>
    23ac:	81 50       	subi	r24, 0x01	; 1
    23ae:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <g_temperature_check_countdown>
    23b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    23b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    23ba:	89 2b       	or	r24, r25
    23bc:	49 f0       	breq	.+18     	; 0x23d0 <__vector_1+0xbc>
    23be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    23c2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    23cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
    23d0:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <g_voltage_check_countdown>
    23d4:	88 23       	and	r24, r24
    23d6:	29 f0       	breq	.+10     	; 0x23e2 <__vector_1+0xce>
    23d8:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <g_voltage_check_countdown>
    23dc:	81 50       	subi	r24, 0x01	; 1
    23de:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_voltage_check_countdown>
    23e2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    23e6:	88 23       	and	r24, r24
    23e8:	91 f1       	breq	.+100    	; 0x244e <__vector_1+0x13a>
    23ea:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_use_rtc_for_startstop>
    23ee:	88 23       	and	r24, r24
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__vector_1+0xe0>
    23f2:	ba c3       	rjmp	.+1908   	; 0x2b68 <__vector_1+0x854>
    23f4:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_current_epoch>
    23f8:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_current_epoch+0x1>
    23fc:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch+0x2>
    2400:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2404:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    2408:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    240c:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    2410:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    2414:	48 17       	cp	r20, r24
    2416:	59 07       	cpc	r21, r25
    2418:	6a 07       	cpc	r22, r26
    241a:	7b 07       	cpc	r23, r27
    241c:	08 f4       	brcc	.+2      	; 0x2420 <__vector_1+0x10c>
    241e:	a4 c3       	rjmp	.+1864   	; 0x2b68 <__vector_1+0x854>
    2420:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_current_epoch>
    2424:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_current_epoch+0x1>
    2428:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch+0x2>
    242c:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2430:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    2434:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    2438:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    243c:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    2440:	48 17       	cp	r20, r24
    2442:	59 07       	cpc	r21, r25
    2444:	6a 07       	cpc	r22, r26
    2446:	7b 07       	cpc	r23, r27
    2448:	08 f4       	brcc	.+2      	; 0x244c <__vector_1+0x138>
    244a:	02 c3       	rjmp	.+1540   	; 0x2a50 <__vector_1+0x73c>
    244c:	8d c3       	rjmp	.+1818   	; 0x2b68 <__vector_1+0x854>
    244e:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_use_rtc_for_startstop>
    2452:	88 23       	and	r24, r24
    2454:	d1 f0       	breq	.+52     	; 0x248a <__vector_1+0x176>
    2456:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_current_epoch>
    245a:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_current_epoch+0x1>
    245e:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch+0x2>
    2462:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2466:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    246a:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    246e:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    2472:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    2476:	48 17       	cp	r20, r24
    2478:	59 07       	cpc	r21, r25
    247a:	6a 07       	cpc	r22, r26
    247c:	7b 07       	cpc	r23, r27
    247e:	28 f0       	brcs	.+10     	; 0x248a <__vector_1+0x176>
    2480:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <g_use_rtc_for_startstop>
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_transmissions_disabled>
    248a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    248e:	81 11       	cpse	r24, r1
    2490:	6b c3       	rjmp	.+1750   	; 0x2b68 <__vector_1+0x854>
    2492:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	85 ef       	ldi	r24, 0xF5	; 245
    249a:	94 e0       	ldi	r25, 0x04	; 4
    249c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <timeRequiredToSendStrAtWPM>
    24a0:	8c 50       	subi	r24, 0x0C	; 12
    24a2:	9e 4f       	sbci	r25, 0xFE	; 254
    24a4:	9c 01       	movw	r18, r24
    24a6:	36 95       	lsr	r19
    24a8:	27 95       	ror	r18
    24aa:	36 95       	lsr	r19
    24ac:	27 95       	ror	r18
    24ae:	36 95       	lsr	r19
    24b0:	27 95       	ror	r18
    24b2:	a5 ec       	ldi	r26, 0xC5	; 197
    24b4:	b0 e2       	ldi	r27, 0x20	; 32
    24b6:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    24ba:	8c 01       	movw	r16, r24
    24bc:	12 95       	swap	r17
    24be:	02 95       	swap	r16
    24c0:	0f 70       	andi	r16, 0x0F	; 15
    24c2:	01 27       	eor	r16, r17
    24c4:	1f 70       	andi	r17, 0x0F	; 15
    24c6:	01 27       	eor	r16, r17
    24c8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_seconds_since_sync>
    24cc:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    24d0:	a0 91 6a 05 	lds	r26, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    24d4:	b0 91 6b 05 	lds	r27, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    24d8:	89 2b       	or	r24, r25
    24da:	8a 2b       	or	r24, r26
    24dc:	8b 2b       	or	r24, r27
    24de:	09 f0       	breq	.+2      	; 0x24e2 <__vector_1+0x1ce>
    24e0:	ee c2       	rjmp	.+1500   	; 0x2abe <__vector_1+0x7aa>
    24e2:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <g_initialize_fox_transmissions>
    24e6:	88 23       	and	r24, r24
    24e8:	09 f4       	brne	.+2      	; 0x24ec <__vector_1+0x1d8>
    24ea:	dc c2       	rjmp	.+1464   	; 0x2aa4 <__vector_1+0x790>
    24ec:	e8 c2       	rjmp	.+1488   	; 0x2abe <__vector_1+0x7aa>
    24ee:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    24f2:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <g_fox_id_offset>
    24f6:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <g_fox_id_offset+0x1>
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    2500:	50 91 2b 05 	lds	r21, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    2504:	82 1b       	sub	r24, r18
    2506:	93 0b       	sbc	r25, r19
    2508:	18 16       	cp	r1, r24
    250a:	19 06       	cpc	r1, r25
    250c:	14 f0       	brlt	.+4      	; 0x2512 <__vector_1+0x1fe>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	84 9f       	mul	r24, r20
    2514:	90 01       	movw	r18, r0
    2516:	85 9f       	mul	r24, r21
    2518:	30 0d       	add	r19, r0
    251a:	94 9f       	mul	r25, r20
    251c:	30 0d       	add	r19, r0
    251e:	11 24       	eor	r1, r1
    2520:	c9 01       	movw	r24, r18
    2522:	80 1b       	sub	r24, r16
    2524:	91 0b       	sbc	r25, r17
    2526:	09 2e       	mov	r0, r25
    2528:	00 0c       	add	r0, r0
    252a:	aa 0b       	sbc	r26, r26
    252c:	bb 0b       	sbc	r27, r27
    252e:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2532:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2536:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    253a:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    253e:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2542:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZZ10__vector_1E18seconds_into_cycle>
    2546:	10 e0       	ldi	r17, 0x00	; 0
    2548:	fe c2       	rjmp	.+1532   	; 0x2b46 <__vector_1+0x832>
    254a:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <g_initialize_fox_transmissions>
    254e:	21 30       	cpi	r18, 0x01	; 1
    2550:	31 f5       	brne	.+76     	; 0x259e <__vector_1+0x28a>
    2552:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    2556:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    255a:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_seconds_since_sync>
    255e:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2562:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2566:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    256a:	09 2e       	mov	r0, r25
    256c:	00 0c       	add	r0, r0
    256e:	aa 0b       	sbc	r26, r26
    2570:	bb 0b       	sbc	r27, r27
    2572:	84 0f       	add	r24, r20
    2574:	95 1f       	adc	r25, r21
    2576:	a6 1f       	adc	r26, r22
    2578:	b7 1f       	adc	r27, r23
    257a:	01 2e       	mov	r0, r17
    257c:	00 0c       	add	r0, r0
    257e:	22 0b       	sbc	r18, r18
    2580:	33 0b       	sbc	r19, r19
    2582:	80 1b       	sub	r24, r16
    2584:	91 0b       	sbc	r25, r17
    2586:	a2 0b       	sbc	r26, r18
    2588:	b3 0b       	sbc	r27, r19
    258a:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    258e:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2592:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2596:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    259a:	11 e0       	ldi	r17, 0x01	; 1
    259c:	d4 c2       	rjmp	.+1448   	; 0x2b46 <__vector_1+0x832>
    259e:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <g_initialize_fox_transmissions>
    25a2:	23 30       	cpi	r18, 0x03	; 3
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <__vector_1+0x294>
    25a6:	e2 c0       	rjmp	.+452    	; 0x276c <__vector_1+0x458>
    25a8:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <g_fox>
    25ac:	a0 91 24 05 	lds	r26, 0x0524	; 0x800524 <g_fox_id_offset>
    25b0:	b0 91 25 05 	lds	r27, 0x0525	; 0x800525 <g_fox_id_offset+0x1>
    25b4:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <g_fox_counter>
    25b8:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <g_fox_counter+0x1>
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	2a 1b       	sub	r18, r26
    25c0:	3b 0b       	sbc	r19, r27
    25c2:	2e 17       	cp	r18, r30
    25c4:	3f 07       	cpc	r19, r31
    25c6:	41 f0       	breq	.+16     	; 0x25d8 <__vector_1+0x2c4>
    25c8:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <g_number_of_foxes>
    25cc:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <g_number_of_foxes+0x1>
    25d0:	21 30       	cpi	r18, 0x01	; 1
    25d2:	31 05       	cpc	r19, r1
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <__vector_1+0x2c4>
    25d6:	66 c0       	rjmp	.+204    	; 0x26a4 <__vector_1+0x390>
    25d8:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    25dc:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    25e0:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    25e4:	70 91 2b 05 	lds	r23, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    25e8:	ca 01       	movw	r24, r20
    25ea:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    25ee:	a9 01       	movw	r20, r18
    25f0:	48 1b       	sub	r20, r24
    25f2:	59 0b       	sbc	r21, r25
    25f4:	ca 01       	movw	r24, r20
    25f6:	04 17       	cp	r16, r20
    25f8:	15 07       	cpc	r17, r21
    25fa:	14 f5       	brge	.+68     	; 0x2640 <__vector_1+0x32c>
    25fc:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_seconds_since_sync>
    2600:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2604:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2608:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    260c:	09 2e       	mov	r0, r25
    260e:	00 0c       	add	r0, r0
    2610:	aa 0b       	sbc	r26, r26
    2612:	bb 0b       	sbc	r27, r27
    2614:	84 0f       	add	r24, r20
    2616:	95 1f       	adc	r25, r21
    2618:	a6 1f       	adc	r26, r22
    261a:	b7 1f       	adc	r27, r23
    261c:	01 2e       	mov	r0, r17
    261e:	00 0c       	add	r0, r0
    2620:	22 0b       	sbc	r18, r18
    2622:	33 0b       	sbc	r19, r19
    2624:	80 1b       	sub	r24, r16
    2626:	91 0b       	sbc	r25, r17
    2628:	a2 0b       	sbc	r26, r18
    262a:	b3 0b       	sbc	r27, r19
    262c:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2630:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2634:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2638:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    263c:	11 e0       	ldi	r17, 0x01	; 1
    263e:	83 c2       	rjmp	.+1286   	; 0x2b46 <__vector_1+0x832>
    2640:	40 17       	cp	r20, r16
    2642:	51 07       	cpc	r21, r17
    2644:	0c f0       	brlt	.+2      	; 0x2648 <__vector_1+0x334>
    2646:	87 c2       	rjmp	.+1294   	; 0x2b56 <__vector_1+0x842>
    2648:	c0 90 68 05 	lds	r12, 0x0568	; 0x800568 <g_seconds_since_sync>
    264c:	d0 90 69 05 	lds	r13, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2650:	e0 90 6a 05 	lds	r14, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2654:	f0 90 6b 05 	lds	r15, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    2658:	40 91 28 05 	lds	r20, 0x0528	; 0x800528 <g_cycle_period_seconds>
    265c:	50 91 29 05 	lds	r21, 0x0529	; 0x800529 <g_cycle_period_seconds+0x1>
    2660:	09 2e       	mov	r0, r25
    2662:	00 0c       	add	r0, r0
    2664:	aa 0b       	sbc	r26, r26
    2666:	bb 0b       	sbc	r27, r27
    2668:	8c 0d       	add	r24, r12
    266a:	9d 1d       	adc	r25, r13
    266c:	ae 1d       	adc	r26, r14
    266e:	bf 1d       	adc	r27, r15
    2670:	05 2e       	mov	r0, r21
    2672:	00 0c       	add	r0, r0
    2674:	66 0b       	sbc	r22, r22
    2676:	77 0b       	sbc	r23, r23
    2678:	84 0f       	add	r24, r20
    267a:	95 1f       	adc	r25, r21
    267c:	a6 1f       	adc	r26, r22
    267e:	b7 1f       	adc	r27, r23
    2680:	01 2e       	mov	r0, r17
    2682:	00 0c       	add	r0, r0
    2684:	22 0b       	sbc	r18, r18
    2686:	33 0b       	sbc	r19, r19
    2688:	80 1b       	sub	r24, r16
    268a:	91 0b       	sbc	r25, r17
    268c:	a2 0b       	sbc	r26, r18
    268e:	b3 0b       	sbc	r27, r19
    2690:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2694:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2698:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    269c:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    26a0:	11 e0       	ldi	r17, 0x01	; 1
    26a2:	51 c2       	rjmp	.+1186   	; 0x2b46 <__vector_1+0x832>
    26a4:	80 90 68 05 	lds	r8, 0x0568	; 0x800568 <g_seconds_since_sync>
    26a8:	90 90 69 05 	lds	r9, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    26ac:	a0 90 6a 05 	lds	r10, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    26b0:	b0 90 6b 05 	lds	r11, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    26b4:	e0 91 63 05 	lds	r30, 0x0563	; 0x800563 <g_fox>
    26b8:	e0 90 24 05 	lds	r14, 0x0524	; 0x800524 <g_fox_id_offset>
    26bc:	f0 90 25 05 	lds	r15, 0x0525	; 0x800525 <g_fox_id_offset+0x1>
    26c0:	a0 91 2a 05 	lds	r26, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    26c4:	b0 91 2b 05 	lds	r27, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	ee 19       	sub	r30, r14
    26cc:	ff 09       	sbc	r31, r15
    26ce:	ea 9f       	mul	r30, r26
    26d0:	60 01       	movw	r12, r0
    26d2:	eb 9f       	mul	r30, r27
    26d4:	d0 0c       	add	r13, r0
    26d6:	fa 9f       	mul	r31, r26
    26d8:	d0 0c       	add	r13, r0
    26da:	11 24       	eor	r1, r1
    26dc:	0d 2c       	mov	r0, r13
    26de:	00 0c       	add	r0, r0
    26e0:	ee 08       	sbc	r14, r14
    26e2:	ff 08       	sbc	r15, r15
    26e4:	cb 01       	movw	r24, r22
    26e6:	77 0f       	add	r23, r23
    26e8:	aa 0b       	sbc	r26, r26
    26ea:	bb 0b       	sbc	r27, r27
    26ec:	a5 01       	movw	r20, r10
    26ee:	94 01       	movw	r18, r8
    26f0:	28 1b       	sub	r18, r24
    26f2:	39 0b       	sbc	r19, r25
    26f4:	4a 0b       	sbc	r20, r26
    26f6:	5b 0b       	sbc	r21, r27
    26f8:	da 01       	movw	r26, r20
    26fa:	c9 01       	movw	r24, r18
    26fc:	8c 0d       	add	r24, r12
    26fe:	9d 1d       	adc	r25, r13
    2700:	ae 1d       	adc	r26, r14
    2702:	bf 1d       	adc	r27, r15
    2704:	01 2e       	mov	r0, r17
    2706:	00 0c       	add	r0, r0
    2708:	22 0b       	sbc	r18, r18
    270a:	33 0b       	sbc	r19, r19
    270c:	80 1b       	sub	r24, r16
    270e:	91 0b       	sbc	r25, r17
    2710:	a2 0b       	sbc	r26, r18
    2712:	b3 0b       	sbc	r27, r19
    2714:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2718:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    271c:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2720:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    2724:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_seconds_since_sync>
    2728:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    272c:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2730:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    2734:	84 17       	cp	r24, r20
    2736:	95 07       	cpc	r25, r21
    2738:	a6 07       	cpc	r26, r22
    273a:	b7 07       	cpc	r27, r23
    273c:	0c f0       	brlt	.+2      	; 0x2740 <__vector_1+0x42c>
    273e:	00 c2       	rjmp	.+1024   	; 0x2b40 <__vector_1+0x82c>
    2740:	40 91 22 05 	lds	r20, 0x0522	; 0x800522 <g_id_interval_seconds>
    2744:	50 91 23 05 	lds	r21, 0x0523	; 0x800523 <g_id_interval_seconds+0x1>
    2748:	05 2e       	mov	r0, r21
    274a:	00 0c       	add	r0, r0
    274c:	66 0b       	sbc	r22, r22
    274e:	77 0b       	sbc	r23, r23
    2750:	84 0f       	add	r24, r20
    2752:	95 1f       	adc	r25, r21
    2754:	a6 1f       	adc	r26, r22
    2756:	b7 1f       	adc	r27, r23
    2758:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    275c:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2760:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2764:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    2768:	10 e0       	ldi	r17, 0x00	; 0
    276a:	ed c1       	rjmp	.+986    	; 0x2b46 <__vector_1+0x832>
    276c:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_seconds_since_sync>
    2770:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2774:	a0 91 6a 05 	lds	r26, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2778:	b0 91 6b 05 	lds	r27, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    277c:	40 91 4f 04 	lds	r20, 0x044F	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2780:	50 91 50 04 	lds	r21, 0x0450	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2784:	60 91 51 04 	lds	r22, 0x0451	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2788:	70 91 52 04 	lds	r23, 0x0452	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    278c:	48 17       	cp	r20, r24
    278e:	59 07       	cpc	r21, r25
    2790:	6a 07       	cpc	r22, r26
    2792:	7b 07       	cpc	r23, r27
    2794:	09 f0       	breq	.+2      	; 0x2798 <__vector_1+0x484>
    2796:	d6 c1       	rjmp	.+940    	; 0x2b44 <__vector_1+0x830>
    2798:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_id_interval_seconds>
    279c:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <g_id_interval_seconds+0x1>
    27a0:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_seconds_since_sync>
    27a4:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    27a8:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    27ac:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    27b0:	09 2e       	mov	r0, r25
    27b2:	00 0c       	add	r0, r0
    27b4:	aa 0b       	sbc	r26, r26
    27b6:	bb 0b       	sbc	r27, r27
    27b8:	84 0f       	add	r24, r20
    27ba:	95 1f       	adc	r25, r21
    27bc:	a6 1f       	adc	r26, r22
    27be:	b7 1f       	adc	r27, r23
    27c0:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    27c4:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    27c8:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    27cc:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    27d0:	10 e0       	ldi	r17, 0x00	; 0
    27d2:	c2 c1       	rjmp	.+900    	; 0x2b58 <__vector_1+0x844>
    27d4:	00 e0       	ldi	r16, 0x00	; 0
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <__vector_1+0x4c6>
    27d8:	01 e0       	ldi	r16, 0x01	; 1
    27da:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_seconds_since_sync>
    27de:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    27e2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    27e6:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    27ea:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    27ee:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    27f2:	03 2e       	mov	r0, r19
    27f4:	00 0c       	add	r0, r0
    27f6:	44 0b       	sbc	r20, r20
    27f8:	55 0b       	sbc	r21, r21
    27fa:	0e 94 df 30 	call	0x61be	; 0x61be <__divmodsi4>
    27fe:	67 2b       	or	r22, r23
    2800:	68 2b       	or	r22, r24
    2802:	69 2b       	or	r22, r25
    2804:	09 f4       	brne	.+2      	; 0x2808 <__vector_1+0x4f4>
    2806:	7b c1       	rjmp	.+758    	; 0x2afe <__vector_1+0x7ea>
    2808:	20 c0       	rjmp	.+64     	; 0x284a <__vector_1+0x536>
    280a:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <g_initialize_fox_transmissions>
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <__vector_1+0x500>
    2812:	83 c1       	rjmp	.+774    	; 0x2b1a <__vector_1+0x806>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ10__vector_1E23fox_transition_occurred>
    281a:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <g_fox_counter>
    281e:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <g_fox_counter+0x1>
    2822:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_number_of_foxes>
    2826:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_number_of_foxes+0x1>
    282a:	82 17       	cp	r24, r18
    282c:	93 07       	cpc	r25, r19
    282e:	34 f4       	brge	.+12     	; 0x283c <__vector_1+0x528>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_fox_counter+0x1>
    2838:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_fox_counter>
    283c:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2840:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZZ10__vector_1E18seconds_into_cycle>
    2844:	01 11       	cpse	r16, r1
    2846:	03 c0       	rjmp	.+6      	; 0x284e <__vector_1+0x53a>
    2848:	36 c0       	rjmp	.+108    	; 0x28b6 <__vector_1+0x5a2>
    284a:	00 23       	and	r16, r16
    284c:	81 f1       	breq	.+96     	; 0x28ae <__vector_1+0x59a>
    284e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	82 e8       	ldi	r24, 0x82	; 130
    2856:	9b e1       	ldi	r25, 0x1B	; 27
    2858:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    285c:	cb 01       	movw	r24, r22
    285e:	6a e0       	ldi	r22, 0x0A	; 10
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <g_code_throttle+0x1>
    286e:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <g_code_throttle>
    2872:	19 82       	std	Y+1, r1	; 0x01
    2874:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_messages_text+0x15>
    2878:	88 23       	and	r24, r24
    287a:	51 f0       	breq	.+20     	; 0x2890 <__vector_1+0x57c>
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	be 01       	movw	r22, r28
    2882:	6f 5f       	subi	r22, 0xFF	; 255
    2884:	7f 4f       	sbci	r23, 0xFF	; 255
    2886:	85 ef       	ldi	r24, 0xF5	; 245
    2888:	94 e0       	ldi	r25, 0x04	; 4
    288a:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    288e:	09 c0       	rjmp	.+18     	; 0x28a2 <__vector_1+0x58e>
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	be 01       	movw	r22, r28
    2896:	6f 5f       	subi	r22, 0xFF	; 255
    2898:	7f 4f       	sbci	r23, 0xFF	; 255
    289a:	8a e4       	ldi	r24, 0x4A	; 74
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    28a2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_callsign_sent>
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_on_the_air>
    28ac:	b2 c0       	rjmp	.+356    	; 0x2a12 <__vector_1+0x6fe>
    28ae:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZZ10__vector_1E23fox_transition_occurred>
    28b2:	88 23       	and	r24, r24
    28b4:	21 f0       	breq	.+8      	; 0x28be <__vector_1+0x5aa>
    28b6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_callsign_sent>
    28ba:	81 11       	cpse	r24, r1
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <__vector_1+0x5b0>
    28be:	11 23       	and	r17, r17
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <__vector_1+0x5b0>
    28c2:	a7 c0       	rjmp	.+334    	; 0x2a12 <__vector_1+0x6fe>
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	80 e1       	ldi	r24, 0x10	; 16
    28c8:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    28cc:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZZ10__vector_1E23fox_transition_occurred>
    28d0:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_number_of_foxes>
    28d4:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_number_of_foxes+0x1>
    28d8:	02 97       	sbiw	r24, 0x02	; 2
    28da:	0c f4       	brge	.+2      	; 0x28de <__vector_1+0x5ca>
    28dc:	2b c1       	rjmp	.+598    	; 0x2b34 <__vector_1+0x820>
    28de:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <g_fox>
    28e2:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <g_fox_counter>
    28e6:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <g_fox_counter+0x1>
    28ea:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <g_fox_id_offset>
    28ee:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <g_fox_id_offset+0x1>
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	84 0f       	add	r24, r20
    28f6:	95 1f       	adc	r25, r21
    28f8:	28 17       	cp	r18, r24
    28fa:	39 07       	cpc	r19, r25
    28fc:	09 f0       	breq	.+2      	; 0x2900 <__vector_1+0x5ec>
    28fe:	17 c1       	rjmp	.+558    	; 0x2b2e <__vector_1+0x81a>
    2900:	19 c1       	rjmp	.+562    	; 0x2b34 <__vector_1+0x820>
    2902:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <g_voltage>
    2906:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <g_voltage+0x1>
    290a:	4b 5f       	subi	r20, 0xFB	; 251
    290c:	5f 4f       	sbci	r21, 0xFF	; 255
    290e:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <g_temperature>
    2912:	28 2f       	mov	r18, r24
    2914:	08 2e       	mov	r0, r24
    2916:	00 0c       	add	r0, r0
    2918:	33 0b       	sbc	r19, r19
    291a:	3f 93       	push	r19
    291c:	8f 93       	push	r24
    291e:	fa 01       	movw	r30, r20
    2920:	f6 95       	lsr	r31
    2922:	e7 95       	ror	r30
    2924:	f6 95       	lsr	r31
    2926:	e7 95       	ror	r30
    2928:	9f 01       	movw	r18, r30
    292a:	ab e7       	ldi	r26, 0x7B	; 123
    292c:	b4 e1       	ldi	r27, 0x14	; 20
    292e:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    2932:	96 95       	lsr	r25
    2934:	87 95       	ror	r24
    2936:	64 e6       	ldi	r22, 0x64	; 100
    2938:	68 9f       	mul	r22, r24
    293a:	90 01       	movw	r18, r0
    293c:	69 9f       	mul	r22, r25
    293e:	30 0d       	add	r19, r0
    2940:	11 24       	eor	r1, r1
    2942:	ca 01       	movw	r24, r20
    2944:	82 1b       	sub	r24, r18
    2946:	93 0b       	sbc	r25, r19
    2948:	9c 01       	movw	r18, r24
    294a:	ad ec       	ldi	r26, 0xCD	; 205
    294c:	bc ec       	ldi	r27, 0xCC	; 204
    294e:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    2952:	96 95       	lsr	r25
    2954:	87 95       	ror	r24
    2956:	96 95       	lsr	r25
    2958:	87 95       	ror	r24
    295a:	96 95       	lsr	r25
    295c:	87 95       	ror	r24
    295e:	9f 93       	push	r25
    2960:	8f 93       	push	r24
    2962:	9f 01       	movw	r18, r30
    2964:	ab e7       	ldi	r26, 0x7B	; 123
    2966:	b4 e1       	ldi	r27, 0x14	; 20
    2968:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    296c:	96 95       	lsr	r25
    296e:	87 95       	ror	r24
    2970:	9f 93       	push	r25
    2972:	8f 93       	push	r24
    2974:	86 e2       	ldi	r24, 0x26	; 38
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	9f 93       	push	r25
    297a:	8f 93       	push	r24
    297c:	86 ea       	ldi	r24, 0xA6	; 166
    297e:	94 e0       	ldi	r25, 0x04	; 4
    2980:	9f 93       	push	r25
    2982:	8f 93       	push	r24
    2984:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    2988:	66 ea       	ldi	r22, 0xA6	; 166
    298a:	74 e0       	ldi	r23, 0x04	; 4
    298c:	80 ee       	ldi	r24, 0xE0	; 224
    298e:	94 e0       	ldi	r25, 0x04	; 4
    2990:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
    2994:	19 82       	std	Y+1, r1	; 0x01
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	12 c0       	rjmp	.+36     	; 0x29c6 <__vector_1+0x6b2>
    29a2:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	bc 01       	movw	r22, r24
    29aa:	66 0f       	add	r22, r22
    29ac:	77 1f       	adc	r23, r23
    29ae:	66 0f       	add	r22, r22
    29b0:	77 1f       	adc	r23, r23
    29b2:	68 0f       	add	r22, r24
    29b4:	79 1f       	adc	r23, r25
    29b6:	65 58       	subi	r22, 0x85	; 133
    29b8:	7d 4f       	sbci	r23, 0xFD	; 253
    29ba:	80 ee       	ldi	r24, 0xE0	; 224
    29bc:	94 e0       	ldi	r25, 0x04	; 4
    29be:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_pattern_codespeed>
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	82 e8       	ldi	r24, 0x82	; 130
    29ce:	9b e1       	ldi	r25, 0x1B	; 27
    29d0:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    29d4:	cb 01       	movw	r24, r22
    29d6:	6a e0       	ldi	r22, 0x0A	; 10
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    29de:	66 0f       	add	r22, r22
    29e0:	77 1f       	adc	r23, r23
    29e2:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <g_code_throttle+0x1>
    29e6:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <g_code_throttle>
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	8a e1       	ldi	r24, 0x1A	; 26
    29f4:	91 e0       	ldi	r25, 0x01	; 1
    29f6:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	be 01       	movw	r22, r28
    2a00:	6f 5f       	subi	r22, 0xFF	; 255
    2a02:	7f 4f       	sbci	r23, 0xFF	; 255
    2a04:	80 ee       	ldi	r24, 0xE0	; 224
    2a06:	94 e0       	ldi	r25, 0x04	; 4
    2a08:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_on_the_air>
    2a12:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_initialize_fox_transmissions>
    2a16:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_seconds_since_sync>
    2a1a:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2a1e:	a0 91 6a 05 	lds	r26, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2a22:	b0 91 6b 05 	lds	r27, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	b1 1d       	adc	r27, r1
    2a2c:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_seconds_since_sync>
    2a30:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <g_seconds_since_sync+0x1>
    2a34:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <g_seconds_since_sync+0x2>
    2a38:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <g_seconds_since_sync+0x3>
    2a3c:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZZ10__vector_1E18seconds_into_cycle>
    2a40:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2a4a:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZZ10__vector_1E18seconds_into_cycle>
    2a4e:	8c c0       	rjmp	.+280    	; 0x2b68 <__vector_1+0x854>
    2a50:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_LED_enunciating>
    2a54:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_transmissions_disabled>
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	8a e1       	ldi	r24, 0x1A	; 26
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	be 01       	movw	r22, r28
    2a72:	6f 5f       	subi	r22, 0xFF	; 255
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255
    2a76:	80 ee       	ldi	r24, 0xE0	; 224
    2a78:	94 e0       	ldi	r25, 0x04	; 4
    2a7a:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
    2a7e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_pattern_codespeed>
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	82 e8       	ldi	r24, 0x82	; 130
    2a86:	9b e1       	ldi	r25, 0x1B	; 27
    2a88:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	6a e0       	ldi	r22, 0x0A	; 10
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	0e 94 a9 30 	call	0x6152	; 0x6152 <__divmodhi4>
    2a96:	66 0f       	add	r22, r22
    2a98:	77 1f       	adc	r23, r23
    2a9a:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <g_code_throttle+0x1>
    2a9e:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <g_code_throttle>
    2aa2:	62 c0       	rjmp	.+196    	; 0x2b68 <__vector_1+0x854>
    2aa4:	20 91 22 05 	lds	r18, 0x0522	; 0x800522 <g_id_interval_seconds>
    2aa8:	30 91 23 05 	lds	r19, 0x0523	; 0x800523 <g_id_interval_seconds+0x1>
    2aac:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_cycle_period_seconds>
    2ab0:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_cycle_period_seconds+0x1>
    2ab4:	82 17       	cp	r24, r18
    2ab6:	93 07       	cpc	r25, r19
    2ab8:	0c f0       	brlt	.+2      	; 0x2abc <__vector_1+0x7a8>
    2aba:	19 cd       	rjmp	.-1486   	; 0x24ee <__vector_1+0x1da>
    2abc:	40 cd       	rjmp	.-1408   	; 0x253e <__vector_1+0x22a>
    2abe:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_seconds_since_sync>
    2ac2:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2ac6:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2aca:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    2ace:	20 91 28 05 	lds	r18, 0x0528	; 0x800528 <g_cycle_period_seconds>
    2ad2:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <g_cycle_period_seconds+0x1>
    2ad6:	03 2e       	mov	r0, r19
    2ad8:	00 0c       	add	r0, r0
    2ada:	44 0b       	sbc	r20, r20
    2adc:	55 0b       	sbc	r21, r21
    2ade:	0e 94 df 30 	call	0x61be	; 0x61be <__divmodsi4>
    2ae2:	ab 01       	movw	r20, r22
    2ae4:	70 93 4e 04 	sts	0x044E, r23	; 0x80044e <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2ae8:	60 93 4d 04 	sts	0x044D, r22	; 0x80044d <_ZZ10__vector_1E18seconds_into_cycle>
    2aec:	20 91 22 05 	lds	r18, 0x0522	; 0x800522 <g_id_interval_seconds>
    2af0:	30 91 23 05 	lds	r19, 0x0523	; 0x800523 <g_id_interval_seconds+0x1>
    2af4:	23 2b       	or	r18, r19
    2af6:	09 f0       	breq	.+2      	; 0x2afa <__vector_1+0x7e6>
    2af8:	28 cd       	rjmp	.-1456   	; 0x254a <__vector_1+0x236>
    2afa:	10 e0       	ldi	r17, 0x00	; 0
    2afc:	24 c0       	rjmp	.+72     	; 0x2b46 <__vector_1+0x832>
    2afe:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <g_seconds_since_sync>
    2b02:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    2b06:	a0 91 6a 05 	lds	r26, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    2b0a:	b0 91 6b 05 	lds	r27, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    2b0e:	89 2b       	or	r24, r25
    2b10:	8a 2b       	or	r24, r26
    2b12:	8b 2b       	or	r24, r27
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <__vector_1+0x804>
    2b16:	79 ce       	rjmp	.-782    	; 0x280a <__vector_1+0x4f6>
    2b18:	7d ce       	rjmp	.-774    	; 0x2814 <__vector_1+0x500>
    2b1a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_fox_counter>
    2b1e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_fox_counter+0x1>
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_fox_counter+0x1>
    2b28:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_fox_counter>
    2b2c:	73 ce       	rjmp	.-794    	; 0x2814 <__vector_1+0x500>
    2b2e:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_on_the_air>
    2b32:	6f cf       	rjmp	.-290    	; 0x2a12 <__vector_1+0x6fe>
    2b34:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    2b38:	83 31       	cpi	r24, 0x13	; 19
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <__vector_1+0x82a>
    2b3c:	32 cf       	rjmp	.-412    	; 0x29a2 <__vector_1+0x68e>
    2b3e:	e1 ce       	rjmp	.-574    	; 0x2902 <__vector_1+0x5ee>
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <__vector_1+0x832>
    2b44:	10 e0       	ldi	r17, 0x00	; 0
    2b46:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_number_of_foxes>
    2b4a:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_number_of_foxes+0x1>
    2b4e:	89 2b       	or	r24, r25
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <__vector_1+0x840>
    2b52:	40 ce       	rjmp	.-896    	; 0x27d4 <__vector_1+0x4c0>
    2b54:	ac ce       	rjmp	.-680    	; 0x28ae <__vector_1+0x59a>
    2b56:	11 e0       	ldi	r17, 0x01	; 1
    2b58:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_number_of_foxes>
    2b5c:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_number_of_foxes+0x1>
    2b60:	89 2b       	or	r24, r25
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <__vector_1+0x852>
    2b64:	74 ce       	rjmp	.-792    	; 0x284e <__vector_1+0x53a>
    2b66:	38 ce       	rjmp	.-912    	; 0x27d8 <__vector_1+0x4c4>
    2b68:	0f 90       	pop	r0
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	ff 91       	pop	r31
    2b70:	ef 91       	pop	r30
    2b72:	bf 91       	pop	r27
    2b74:	af 91       	pop	r26
    2b76:	9f 91       	pop	r25
    2b78:	8f 91       	pop	r24
    2b7a:	7f 91       	pop	r23
    2b7c:	6f 91       	pop	r22
    2b7e:	5f 91       	pop	r21
    2b80:	4f 91       	pop	r20
    2b82:	3f 91       	pop	r19
    2b84:	2f 91       	pop	r18
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	ff 90       	pop	r15
    2b8c:	ef 90       	pop	r14
    2b8e:	df 90       	pop	r13
    2b90:	cf 90       	pop	r12
    2b92:	bf 90       	pop	r11
    2b94:	af 90       	pop	r10
    2b96:	9f 90       	pop	r9
    2b98:	8f 90       	pop	r8
    2b9a:	0f 90       	pop	r0
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	0f 90       	pop	r0
    2ba0:	1f 90       	pop	r1
    2ba2:	18 95       	reti

00002ba4 <__vector_14>:
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	2f 93       	push	r18
    2bb0:	3f 93       	push	r19
    2bb2:	4f 93       	push	r20
    2bb4:	5f 93       	push	r21
    2bb6:	6f 93       	push	r22
    2bb8:	7f 93       	push	r23
    2bba:	8f 93       	push	r24
    2bbc:	9f 93       	push	r25
    2bbe:	af 93       	push	r26
    2bc0:	bf 93       	push	r27
    2bc2:	ef 93       	push	r30
    2bc4:	ff 93       	push	r31
    2bc6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_AM_enabled>
    2bca:	81 11       	cpse	r24, r1
    2bcc:	13 c0       	rjmp	.+38     	; 0x2bf4 <__vector_14+0x50>
    2bce:	61 e0       	ldi	r22, 0x01	; 1
    2bd0:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZZ11__vector_14E6toggle>
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	60 93 4b 04 	sts	0x044B, r22	; 0x80044b <_ZZ11__vector_14E6toggle>
    2bdc:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <g_audio_tone_state>
    2be0:	88 23       	and	r24, r24
    2be2:	21 f0       	breq	.+8      	; 0x2bec <__vector_14+0x48>
    2be4:	85 e0       	ldi	r24, 0x05	; 5
    2be6:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <__vector_14+0x50>
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	85 e0       	ldi	r24, 0x05	; 5
    2bf0:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    2bf4:	ff 91       	pop	r31
    2bf6:	ef 91       	pop	r30
    2bf8:	bf 91       	pop	r27
    2bfa:	af 91       	pop	r26
    2bfc:	9f 91       	pop	r25
    2bfe:	8f 91       	pop	r24
    2c00:	7f 91       	pop	r23
    2c02:	6f 91       	pop	r22
    2c04:	5f 91       	pop	r21
    2c06:	4f 91       	pop	r20
    2c08:	3f 91       	pop	r19
    2c0a:	2f 91       	pop	r18
    2c0c:	0f 90       	pop	r0
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	0f 90       	pop	r0
    2c12:	1f 90       	pop	r1
    2c14:	18 95       	reti

00002c16 <__vector_11>:
    2c16:	1f 92       	push	r1
    2c18:	0f 92       	push	r0
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	0f 92       	push	r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	8f 93       	push	r24
    2c22:	9f 93       	push	r25
    2c24:	ef 93       	push	r30
    2c26:	ff 93       	push	r31
    2c28:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_AM_enabled>
    2c2c:	88 23       	and	r24, r24
    2c2e:	79 f1       	breq	.+94     	; 0x2c8e <__vector_11+0x78>
    2c30:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sendAMmodulation>
    2c34:	81 11       	cpse	r24, r1
    2c36:	18 c0       	rjmp	.+48     	; 0x2c68 <__vector_11+0x52>
    2c38:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZZ11__vector_11E5index>
    2c3c:	81 11       	cpse	r24, r1
    2c3e:	14 c0       	rjmp	.+40     	; 0x2c68 <__vector_11+0x52>
    2c40:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_sendAMmodulationConstantly>
    2c44:	88 23       	and	r24, r24
    2c46:	39 f0       	breq	.+14     	; 0x2c56 <__vector_11+0x40>
    2c48:	1c c0       	rjmp	.+56     	; 0x2c82 <__vector_11+0x6c>
    2c4a:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZZ11__vector_11E5index>
    2c4e:	95 b9       	out	0x05, r25	; 5
    2c50:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ11__vector_11E11controlPins>
    2c54:	1c c0       	rjmp	.+56     	; 0x2c8e <__vector_11+0x78>
    2c56:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZZ11__vector_11E11controlPins>
    2c5a:	8f 33       	cpi	r24, 0x3F	; 63
    2c5c:	c1 f0       	breq	.+48     	; 0x2c8e <__vector_11+0x78>
    2c5e:	8f e3       	ldi	r24, 0x3F	; 63
    2c60:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZZ11__vector_11E11controlPins>
    2c64:	85 b9       	out	0x05, r24	; 5
    2c66:	13 c0       	rjmp	.+38     	; 0x2c8e <__vector_11+0x78>
    2c68:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <_ZZ11__vector_11E5index>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	8e 0f       	add	r24, r30
    2c70:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ11__vector_11E5index>
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	e4 5d       	subi	r30, 0xD4	; 212
    2c78:	fa 4f       	sbci	r31, 0xFA	; 250
    2c7a:	90 81       	ld	r25, Z
    2c7c:	80 32       	cpi	r24, 0x20	; 32
    2c7e:	28 f7       	brcc	.-54     	; 0x2c4a <__vector_11+0x34>
    2c80:	e6 cf       	rjmp	.-52     	; 0x2c4e <__vector_11+0x38>
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ11__vector_11E5index>
    2c88:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <g_dataModulation>
    2c8c:	e0 cf       	rjmp	.-64     	; 0x2c4e <__vector_11+0x38>
    2c8e:	ff 91       	pop	r31
    2c90:	ef 91       	pop	r30
    2c92:	9f 91       	pop	r25
    2c94:	8f 91       	pop	r24
    2c96:	0f 90       	pop	r0
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	0f 90       	pop	r0
    2c9c:	1f 90       	pop	r1
    2c9e:	18 95       	reti

00002ca0 <_Z23clockConfigurationCheckv>:
    2ca0:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    2ca4:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    2ca8:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    2cac:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    2cb0:	81 15       	cp	r24, r1
    2cb2:	96 46       	sbci	r25, 0x66	; 102
    2cb4:	ae 4e       	sbci	r26, 0xEE	; 238
    2cb6:	bf 45       	sbci	r27, 0x5F	; 95
    2cb8:	08 f4       	brcc	.+2      	; 0x2cbc <_Z23clockConfigurationCheckv+0x1c>
    2cba:	67 c0       	rjmp	.+206    	; 0x2d8a <_Z23clockConfigurationCheckv+0xea>
    2cbc:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    2cc0:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    2cc4:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    2cc8:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    2ccc:	81 15       	cp	r24, r1
    2cce:	96 46       	sbci	r25, 0x66	; 102
    2cd0:	ae 4e       	sbci	r26, 0xEE	; 238
    2cd2:	bf 45       	sbci	r27, 0x5F	; 95
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <_Z23clockConfigurationCheckv+0x38>
    2cd6:	5b c0       	rjmp	.+182    	; 0x2d8e <_Z23clockConfigurationCheckv+0xee>
    2cd8:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    2cdc:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    2ce0:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    2ce4:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2ce8:	81 15       	cp	r24, r1
    2cea:	96 46       	sbci	r25, 0x66	; 102
    2cec:	ae 4e       	sbci	r26, 0xEE	; 238
    2cee:	bf 45       	sbci	r27, 0x5F	; 95
    2cf0:	08 f4       	brcc	.+2      	; 0x2cf4 <_Z23clockConfigurationCheckv+0x54>
    2cf2:	4f c0       	rjmp	.+158    	; 0x2d92 <_Z23clockConfigurationCheckv+0xf2>
    2cf4:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_event_finish_epoch>
    2cf8:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    2cfc:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    2d00:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    2d04:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    2d08:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    2d0c:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    2d10:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    2d14:	84 17       	cp	r24, r20
    2d16:	95 07       	cpc	r25, r21
    2d18:	a6 07       	cpc	r26, r22
    2d1a:	b7 07       	cpc	r27, r23
    2d1c:	e0 f5       	brcc	.+120    	; 0x2d96 <_Z23clockConfigurationCheckv+0xf6>
    2d1e:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_current_epoch>
    2d22:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_current_epoch+0x1>
    2d26:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch+0x2>
    2d2a:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2d2e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    2d32:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    2d36:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    2d3a:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    2d3e:	84 17       	cp	r24, r20
    2d40:	95 07       	cpc	r25, r21
    2d42:	a6 07       	cpc	r26, r22
    2d44:	b7 07       	cpc	r27, r23
    2d46:	48 f1       	brcs	.+82     	; 0x2d9a <_Z23clockConfigurationCheckv+0xfa>
    2d48:	40 91 59 05 	lds	r20, 0x0559	; 0x800559 <g_current_epoch>
    2d4c:	50 91 5a 05 	lds	r21, 0x055A	; 0x80055a <g_current_epoch+0x1>
    2d50:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_current_epoch+0x2>
    2d54:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_current_epoch+0x3>
    2d58:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    2d5c:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    2d60:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    2d64:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    2d68:	84 17       	cp	r24, r20
    2d6a:	95 07       	cpc	r25, r21
    2d6c:	a6 07       	cpc	r26, r22
    2d6e:	b7 07       	cpc	r27, r23
    2d70:	30 f4       	brcc	.+12     	; 0x2d7e <_Z23clockConfigurationCheckv+0xde>
    2d72:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    2d76:	81 11       	cpse	r24, r1
    2d78:	12 c0       	rjmp	.+36     	; 0x2d9e <_Z23clockConfigurationCheckv+0xfe>
    2d7a:	85 e0       	ldi	r24, 0x05	; 5
    2d7c:	08 95       	ret
    2d7e:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_use_rtc_for_startstop>
    2d82:	88 23       	and	r24, r24
    2d84:	71 f0       	breq	.+28     	; 0x2da2 <_Z23clockConfigurationCheckv+0x102>
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	08 95       	ret
    2d8a:	82 e0       	ldi	r24, 0x02	; 2
    2d8c:	08 95       	ret
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	08 95       	ret
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	08 95       	ret
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	08 95       	ret
    2d9a:	82 e0       	ldi	r24, 0x02	; 2
    2d9c:	08 95       	ret
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	08 95       	ret
    2da2:	84 e0       	ldi	r24, 0x04	; 4
    2da4:	08 95       	ret

00002da6 <_Z11setupForFoxP5Fox_t13EventAction_t>:
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <_Z11setupForFoxP5Fox_t13EventAction_t+0xa>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	16 2f       	mov	r17, r22
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	31 f0       	breq	.+12     	; 0x2dc6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
    2dba:	fc 01       	movw	r30, r24
    2dbc:	80 81       	ld	r24, Z
    2dbe:	82 31       	cpi	r24, 0x12	; 18
    2dc0:	11 f0       	breq	.+4      	; 0x2dc6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
    2dc2:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_fox>
    2dc6:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    2dca:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <g_current_epoch>
    2dce:	70 93 5a 05 	sts	0x055A, r23	; 0x80055a <g_current_epoch+0x1>
    2dd2:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_current_epoch+0x2>
    2dd6:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_current_epoch+0x3>
    2dda:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <g_use_ptt_periodic_reset>
    2dde:	f8 94       	cli
    2de0:	e0 91 63 05 	lds	r30, 0x0563	; 0x800563 <g_fox>
    2de4:	8e 2f       	mov	r24, r30
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	fc 01       	movw	r30, r24
    2dea:	31 97       	sbiw	r30, 0x01	; 1
    2dec:	e3 31       	cpi	r30, 0x13	; 19
    2dee:	f1 05       	cpc	r31, r1
    2df0:	08 f0       	brcs	.+2      	; 0x2df4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4e>
    2df2:	84 c0       	rjmp	.+264    	; 0x2efc <_Z11setupForFoxP5Fox_t13EventAction_t+0x156>
    2df4:	ed 57       	subi	r30, 0x7D	; 125
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
    2dfc:	8c e3       	ldi	r24, 0x3C	; 60
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_on_air_interval_seconds+0x1>
    2e04:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_on_air_interval_seconds>
    2e08:	8c e2       	ldi	r24, 0x2C	; 44
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_cycle_period_seconds+0x1>
    2e10:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_cycle_period_seconds>
    2e14:	25 e0       	ldi	r18, 0x05	; 5
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <g_number_of_foxes+0x1>
    2e1c:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <g_number_of_foxes>
    2e20:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <g_fox_id_offset+0x1>
    2e24:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <g_fox_id_offset>
    2e28:	28 e0       	ldi	r18, 0x08	; 8
    2e2a:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
    2e2e:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_id_interval_seconds+0x1>
    2e32:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_id_interval_seconds>
    2e36:	90 c0       	rjmp	.+288    	; 0x2f58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
    2e38:	8c e0       	ldi	r24, 0x0C	; 12
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_on_air_interval_seconds+0x1>
    2e40:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_on_air_interval_seconds>
    2e44:	8c e3       	ldi	r24, 0x3C	; 60
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_cycle_period_seconds+0x1>
    2e4c:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_cycle_period_seconds>
    2e50:	85 e0       	ldi	r24, 0x05	; 5
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <g_number_of_foxes+0x1>
    2e58:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <g_number_of_foxes>
    2e5c:	88 e0       	ldi	r24, 0x08	; 8
    2e5e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_pattern_codespeed>
    2e62:	87 e0       	ldi	r24, 0x07	; 7
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_fox_id_offset+0x1>
    2e6a:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_fox_id_offset>
    2e6e:	88 e5       	ldi	r24, 0x58	; 88
    2e70:	92 e0       	ldi	r25, 0x02	; 2
    2e72:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_id_interval_seconds+0x1>
    2e76:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_id_interval_seconds>
    2e7a:	6e c0       	rjmp	.+220    	; 0x2f58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
    2e7c:	8c e0       	ldi	r24, 0x0C	; 12
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_on_air_interval_seconds+0x1>
    2e84:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_on_air_interval_seconds>
    2e88:	2c e3       	ldi	r18, 0x3C	; 60
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	30 93 29 05 	sts	0x0529, r19	; 0x800529 <g_cycle_period_seconds+0x1>
    2e90:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <g_cycle_period_seconds>
    2e94:	25 e0       	ldi	r18, 0x05	; 5
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <g_number_of_foxes+0x1>
    2e9c:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <g_number_of_foxes>
    2ea0:	2f e0       	ldi	r18, 0x0F	; 15
    2ea2:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
    2ea6:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <g_fox_id_offset+0x1>
    2eaa:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <g_fox_id_offset>
    2eae:	88 e5       	ldi	r24, 0x58	; 88
    2eb0:	92 e0       	ldi	r25, 0x02	; 2
    2eb2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_id_interval_seconds+0x1>
    2eb6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_id_interval_seconds>
    2eba:	4e c0       	rjmp	.+156    	; 0x2f58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
    2ebc:	8e e1       	ldi	r24, 0x1E	; 30
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_on_air_interval_seconds+0x1>
    2ec4:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_on_air_interval_seconds>
    2ec8:	8c e3       	ldi	r24, 0x3C	; 60
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_cycle_period_seconds+0x1>
    2ed0:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_cycle_period_seconds>
    2ed4:	22 e0       	ldi	r18, 0x02	; 2
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <g_number_of_foxes+0x1>
    2edc:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <g_number_of_foxes>
    2ee0:	28 e0       	ldi	r18, 0x08	; 8
    2ee2:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
    2ee6:	22 e1       	ldi	r18, 0x12	; 18
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	30 93 25 05 	sts	0x0525, r19	; 0x800525 <g_fox_id_offset+0x1>
    2eee:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <g_fox_id_offset>
    2ef2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_id_interval_seconds+0x1>
    2ef6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_id_interval_seconds>
    2efa:	2e c0       	rjmp	.+92     	; 0x2f58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
    2efc:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_ptt_periodic_reset_enabled>
    2f00:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <g_use_ptt_periodic_reset>
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <g_number_of_foxes+0x1>
    2f0c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <g_number_of_foxes>
    2f10:	88 e0       	ldi	r24, 0x08	; 8
    2f12:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_pattern_codespeed>
    2f16:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_ptt_periodic_reset_enabled>
    2f1a:	81 11       	cpse	r24, r1
    2f1c:	03 c0       	rjmp	.+6      	; 0x2f24 <_Z11setupForFoxP5Fox_t13EventAction_t+0x17e>
    2f1e:	88 e5       	ldi	r24, 0x58	; 88
    2f20:	92 e0       	ldi	r25, 0x02	; 2
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <_Z11setupForFoxP5Fox_t13EventAction_t+0x182>
    2f24:	8c e3       	ldi	r24, 0x3C	; 60
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_id_interval_seconds+0x1>
    2f2c:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_id_interval_seconds>
    2f30:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_id_interval_seconds>
    2f34:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <g_id_interval_seconds+0x1>
    2f38:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <g_on_air_interval_seconds+0x1>
    2f3c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <g_on_air_interval_seconds>
    2f40:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <g_fox_id_offset+0x1>
    2f44:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <g_fox_id_offset>
    2f48:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_id_interval_seconds>
    2f4c:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <g_id_interval_seconds+0x1>
    2f50:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_cycle_period_seconds+0x1>
    2f54:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_cycle_period_seconds>
    2f58:	11 11       	cpse	r17, r1
    2f5a:	06 c0       	rjmp	.+12     	; 0x2f68 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1c2>
    2f5c:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <g_use_rtc_for_startstop>
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_transmissions_disabled>
    2f66:	e0 c0       	rjmp	.+448    	; 0x3128 <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
    2f68:	11 30       	cpi	r17, 0x01	; 1
    2f6a:	99 f4       	brne	.+38     	; 0x2f92 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ec>
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_fox_counter+0x1>
    2f74:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_fox_counter>
    2f78:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <g_seconds_since_sync>
    2f7c:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <g_seconds_since_sync+0x1>
    2f80:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_seconds_since_sync+0x2>
    2f84:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_seconds_since_sync+0x3>
    2f88:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <g_use_rtc_for_startstop>
    2f8c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_transmissions_disabled>
    2f90:	cb c0       	rjmp	.+406    	; 0x3128 <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
    2f92:	12 30       	cpi	r17, 0x02	; 2
    2f94:	b9 f5       	brne	.+110    	; 0x3004 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
    2f96:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    2f9a:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <g_fox_id_offset>
    2f9e:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <g_fox_id_offset+0x1>
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	82 1b       	sub	r24, r18
    2fa6:	93 0b       	sbc	r25, r19
    2fa8:	18 16       	cp	r1, r24
    2faa:	19 06       	cpc	r1, r25
    2fac:	14 f0       	brlt	.+4      	; 0x2fb2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20c>
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_fox_counter+0x1>
    2fb6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_fox_counter>
    2fba:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <g_fox_counter>
    2fbe:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <g_fox_counter+0x1>
    2fc2:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    2fc6:	50 91 2b 05 	lds	r21, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    2fca:	21 50       	subi	r18, 0x01	; 1
    2fcc:	31 09       	sbc	r19, r1
    2fce:	24 9f       	mul	r18, r20
    2fd0:	c0 01       	movw	r24, r0
    2fd2:	25 9f       	mul	r18, r21
    2fd4:	90 0d       	add	r25, r0
    2fd6:	34 9f       	mul	r19, r20
    2fd8:	90 0d       	add	r25, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	09 2e       	mov	r0, r25
    2fde:	00 0c       	add	r0, r0
    2fe0:	aa 0b       	sbc	r26, r26
    2fe2:	bb 0b       	sbc	r27, r27
    2fe4:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_seconds_since_sync>
    2fe8:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <g_seconds_since_sync+0x1>
    2fec:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <g_seconds_since_sync+0x2>
    2ff0:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <g_seconds_since_sync+0x3>
    2ff4:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <g_use_rtc_for_startstop>
    2ff8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_transmissions_disabled>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <g_initialize_fox_transmissions>
    3002:	92 c0       	rjmp	.+292    	; 0x3128 <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
    3004:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
    3008:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    300c:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    3010:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    3014:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    3018:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    301c:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3020:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3024:	48 17       	cp	r20, r24
    3026:	59 07       	cpc	r21, r25
    3028:	6a 07       	cpc	r22, r26
    302a:	7b 07       	cpc	r23, r27
    302c:	08 f0       	brcs	.+2      	; 0x3030 <_Z11setupForFoxP5Fox_t13EventAction_t+0x28a>
    302e:	69 c0       	rjmp	.+210    	; 0x3102 <_Z11setupForFoxP5Fox_t13EventAction_t+0x35c>
    3030:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    3034:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    3038:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    303c:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3040:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
    3044:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    3048:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    304c:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    3050:	84 1b       	sub	r24, r20
    3052:	95 0b       	sbc	r25, r21
    3054:	a6 0b       	sbc	r26, r22
    3056:	b7 0b       	sbc	r27, r23
    3058:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_seconds_since_sync>
    305c:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <g_seconds_since_sync+0x1>
    3060:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <g_seconds_since_sync+0x2>
    3064:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <g_seconds_since_sync+0x3>
    3068:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_seconds_since_sync>
    306c:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_seconds_since_sync+0x1>
    3070:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_seconds_since_sync+0x2>
    3074:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_seconds_since_sync+0x3>
    3078:	20 91 28 05 	lds	r18, 0x0528	; 0x800528 <g_cycle_period_seconds>
    307c:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <g_cycle_period_seconds+0x1>
    3080:	00 91 2a 05 	lds	r16, 0x052A	; 0x80052a <g_on_air_interval_seconds>
    3084:	10 91 2b 05 	lds	r17, 0x052B	; 0x80052b <g_on_air_interval_seconds+0x1>
    3088:	03 2e       	mov	r0, r19
    308a:	00 0c       	add	r0, r0
    308c:	44 0b       	sbc	r20, r20
    308e:	55 0b       	sbc	r21, r21
    3090:	0e 94 df 30 	call	0x61be	; 0x61be <__divmodsi4>
    3094:	98 01       	movw	r18, r16
    3096:	11 0f       	add	r17, r17
    3098:	44 0b       	sbc	r20, r20
    309a:	55 0b       	sbc	r21, r21
    309c:	0e 94 df 30 	call	0x61be	; 0x61be <__divmodsi4>
    30a0:	ba 01       	movw	r22, r20
    30a2:	a9 01       	movw	r20, r18
    30a4:	4f 5f       	subi	r20, 0xFF	; 255
    30a6:	5f 4f       	sbci	r21, 0xFF	; 255
    30a8:	6f 4f       	sbci	r22, 0xFF	; 255
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <g_number_of_foxes>
    30b0:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <g_number_of_foxes+0x1>
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	09 2e       	mov	r0, r25
    30be:	00 0c       	add	r0, r0
    30c0:	aa 0b       	sbc	r26, r26
    30c2:	bb 0b       	sbc	r27, r27
    30c4:	84 17       	cp	r24, r20
    30c6:	95 07       	cpc	r25, r21
    30c8:	a6 07       	cpc	r26, r22
    30ca:	b7 07       	cpc	r27, r23
    30cc:	3c f4       	brge	.+14     	; 0x30dc <_Z11setupForFoxP5Fox_t13EventAction_t+0x336>
    30ce:	29 81       	ldd	r18, Y+1	; 0x01
    30d0:	3a 81       	ldd	r19, Y+2	; 0x02
    30d2:	c9 01       	movw	r24, r18
    30d4:	33 0f       	add	r19, r19
    30d6:	aa 0b       	sbc	r26, r26
    30d8:	bb 0b       	sbc	r27, r27
    30da:	0b c0       	rjmp	.+22     	; 0x30f2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    30dc:	db 01       	movw	r26, r22
    30de:	ca 01       	movw	r24, r20
    30e0:	14 16       	cp	r1, r20
    30e2:	15 06       	cpc	r1, r21
    30e4:	16 06       	cpc	r1, r22
    30e6:	17 06       	cpc	r1, r23
    30e8:	24 f0       	brlt	.+8      	; 0x30f2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e0       	ldi	r26, 0x00	; 0
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_fox_counter+0x1>
    30f6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_fox_counter>
    30fa:	83 e0       	ldi	r24, 0x03	; 3
    30fc:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <g_initialize_fox_transmissions>
    3100:	0e c0       	rjmp	.+28     	; 0x311e <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
    3102:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <g_seconds_since_sync>
    3106:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <g_seconds_since_sync+0x1>
    310a:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_seconds_since_sync+0x2>
    310e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_seconds_since_sync+0x3>
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_fox_counter+0x1>
    311a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_fox_counter>
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_use_rtc_for_startstop>
    3124:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_transmissions_disabled>
    3128:	8f e2       	ldi	r24, 0x2F	; 47
    312a:	87 bd       	out	0x27, r24	; 39
    312c:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <g_audio_tone_state>
    3130:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_code_throttle+0x1>
    3134:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <g_code_throttle>
    3138:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_on_the_air>
    313c:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	80 e1       	ldi	r24, 0x10	; 16
    3144:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	86 e0       	ldi	r24, 0x06	; 6
    314c:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    3150:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sendAMmodulation>
    3154:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_LED_enunciating>
    3158:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>
    315c:	78 94       	sei
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	08 95       	ret

0000316c <_Z7readADCv>:
    316c:	8f ef       	ldi	r24, 0xFF	; 255
    316e:	9f ef       	ldi	r25, 0xFF	; 255
    3170:	ea e7       	ldi	r30, 0x7A	; 122
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	20 81       	ld	r18, Z
    3176:	26 ff       	sbrs	r18, 6
    3178:	04 c0       	rjmp	.+8      	; 0x3182 <_Z7readADCv+0x16>
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	11 f0       	breq	.+4      	; 0x3182 <_Z7readADCv+0x16>
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f9 cf       	rjmp	.-14     	; 0x3174 <_Z7readADCv+0x8>
    3182:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    3186:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    318a:	ea e7       	ldi	r30, 0x7A	; 122
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	90 81       	ld	r25, Z
    3190:	90 64       	ori	r25, 0x40	; 64
    3192:	90 83       	st	Z, r25
    3194:	c9 01       	movw	r24, r18
    3196:	08 95       	ret

00003198 <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    3198:	0e 94 b6 18 	call	0x316c	; 0x316c <_Z7readADCv>
	uint16_t hold = readADC();
    319c:	0e 94 b6 18 	call	0x316c	; 0x316c <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    31a0:	9c 01       	movw	r18, r24
    31a2:	ad ee       	ldi	r26, 0xED	; 237
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	68 94       	set
    31b0:	16 f8       	bld	r1, 6
    31b2:	b6 95       	lsr	r27
    31b4:	a7 95       	ror	r26
    31b6:	97 95       	ror	r25
    31b8:	87 95       	ror	r24
    31ba:	16 94       	lsr	r1
    31bc:	d1 f7       	brne	.-12     	; 0x31b2 <_Z10getVoltagev+0x1a>
	return(hold);
}
    31be:	08 95       	ret

000031c0 <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    31c0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    31c4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    31c8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    31cc:	81 11       	cpse	r24, r1
    31ce:	22 c0       	rjmp	.+68     	; 0x3214 <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    31d0:	ec e7       	ldi	r30, 0x7C	; 124
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	86 60       	ori	r24, 0x06	; 6
    31d8:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    31da:	80 81       	ld	r24, Z
    31dc:	80 6c       	ori	r24, 0xC0	; 192
    31de:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    31e0:	80 81       	ld	r24, Z
    31e2:	80 62       	ori	r24, 0x20	; 32
    31e4:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
				ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
				ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
				ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    31e6:	ea e7       	ldi	r30, 0x7A	; 122
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	86 60       	ori	r24, 0x06	; 6
    31ee:	80 83       	st	Z, r24
#else
#error "Select a valid sample rate."
#endif
#endif /* F_CPU == 16000000 */

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    31f0:	80 81       	ld	r24, Z
    31f2:	80 62       	ori	r24, 0x20	; 32
    31f4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    31f6:	80 81       	ld	r24, Z
    31f8:	88 60       	ori	r24, 0x08	; 8
    31fa:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    31fc:	80 81       	ld	r24, Z
    31fe:	80 68       	ori	r24, 0x80	; 128
    3200:	80 83       	st	Z, r24

		if(enableSampling)
    3202:	66 23       	and	r22, r22
    3204:	21 f1       	breq	.+72     	; 0x324e <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    3206:	80 81       	ld	r24, Z
    3208:	88 60       	ori	r24, 0x08	; 8
    320a:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    320c:	80 81       	ld	r24, Z
    320e:	80 64       	ori	r24, 0x40	; 64
    3210:	80 83       	st	Z, r24
    3212:	08 95       	ret
		/* The internal temperature has to be used
		 *  with the internal reference of 1.1V.
		 *  Channel 8 can not be selected with
		 *  the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    3214:	ec e7       	ldi	r30, 0x7C	; 124
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	90 81       	ld	r25, Z
    321a:	90 6c       	ori	r25, 0xC0	; 192
    321c:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	21 f4       	brne	.+8      	; 0x322a <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    3222:	80 81       	ld	r24, Z
    3224:	88 60       	ori	r24, 0x08	; 8
    3226:	80 83       	st	Z, r24
    3228:	05 c0       	rjmp	.+10     	; 0x3234 <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    322a:	ec e7       	ldi	r30, 0x7C	; 124
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	87 60       	ori	r24, 0x07	; 7
    3232:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 *  by dividing by 128. Assumes that the
		 *  standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    3234:	ea e7       	ldi	r30, 0x7A	; 122
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	87 60       	ori	r24, 0x07	; 7
    323c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    323e:	80 81       	ld	r24, Z
    3240:	80 68       	ori	r24, 0x80	; 128
    3242:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    3244:	80 81       	ld	r24, Z
    3246:	80 64       	ori	r24, 0x40	; 64
    3248:	80 83       	st	Z, r24
		readADC();
    324a:	0e 94 b6 18 	call	0x316c	; 0x316c <_Z7readADCv>
    324e:	08 95       	ret

00003250 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    3250:	fc 01       	movw	r30, r24
	while(*s)
    3252:	21 91       	ld	r18, Z+
    3254:	22 23       	and	r18, r18
    3256:	41 f0       	breq	.+16     	; 0x3268 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	20 53       	subi	r18, 0x30	; 48
    325c:	31 09       	sbc	r19, r1
    325e:	2a 30       	cpi	r18, 0x0A	; 10
    3260:	31 05       	cpc	r19, r1
    3262:	b8 f3       	brcs	.-18     	; 0x3252 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	08 95       	ret
		}
	}

	return( TRUE);
    3268:	81 e0       	ldi	r24, 0x01	; 1
}
    326a:	08 95       	ret

0000326c <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    326c:	cf 93       	push	r28
    326e:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    3270:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z23clockConfigurationCheckv>

	cli();
    3274:	f8 94       	cli
	if(activationSource == POWER_UP)
    3276:	c1 11       	cpse	r28, r1
    3278:	0e c0       	rjmp	.+28     	; 0x3296 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    327a:	82 30       	cpi	r24, 0x02	; 2
    327c:	31 f4       	brne	.+12     	; 0x328a <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3288:	3e c0       	rjmp	.+124    	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    328a:	63 e0       	ldi	r22, 0x03	; 3
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3294:	38 c0       	rjmp	.+112    	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    3296:	c2 30       	cpi	r28, 0x02	; 2
    3298:	c9 f4       	brne	.+50     	; 0x32cc <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	31 f4       	brne	.+12     	; 0x32aa <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    32a8:	2e c0       	rjmp	.+92     	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	19 f0       	breq	.+6      	; 0x32b4 <_Z13startEventNow19EventActionSource_t+0x48>
    32ae:	83 50       	subi	r24, 0x03	; 3
    32b0:	82 30       	cpi	r24, 0x02	; 2
    32b2:	30 f4       	brcc	.+12     	; 0x32c0 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    32be:	23 c0       	rjmp	.+70     	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    32c0:	63 e0       	ldi	r22, 0x03	; 3
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    32ca:	1d c0       	rjmp	.+58     	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    32cc:	82 30       	cpi	r24, 0x02	; 2
    32ce:	31 f4       	brne	.+12     	; 0x32dc <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    32d0:	61 e0       	ldi	r22, 0x01	; 1
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    32da:	15 c0       	rjmp	.+42     	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    32dc:	81 30       	cpi	r24, 0x01	; 1
    32de:	31 f4       	brne	.+12     	; 0x32ec <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    32e0:	62 e0       	ldi	r22, 0x02	; 2
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    32ea:	0d c0       	rjmp	.+26     	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    32ec:	84 30       	cpi	r24, 0x04	; 4
    32ee:	31 f4       	brne	.+12     	; 0x32fc <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    32f0:	63 e0       	ldi	r22, 0x03	; 3
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    32fc:	63 e0       	ldi	r22, 0x03	; 3
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    3306:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_LED_enunciating>
	sei();
    330a:	78 94       	sei
}
    330c:	cf 91       	pop	r28
    330e:	08 95       	ret

00003310 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    3310:	cf 93       	push	r28
    3312:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    3314:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z23clockConfigurationCheckv>

	cli();
    3318:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    331a:	c2 30       	cpi	r28, 0x02	; 2
    331c:	31 f4       	brne	.+12     	; 0x332a <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3328:	15 c0       	rjmp	.+42     	; 0x3354 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	31 f4       	brne	.+12     	; 0x333a <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    332e:	62 e0       	ldi	r22, 0x02	; 2
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3338:	08 c0       	rjmp	.+16     	; 0x334a <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    333a:	84 30       	cpi	r24, 0x04	; 4
    333c:	31 f4       	brne	.+12     	; 0x334a <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3348:	05 c0       	rjmp	.+10     	; 0x3354 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    3354:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <g_sync_pin_stable>
    3358:	82 30       	cpi	r24, 0x02	; 2
    335a:	21 f4       	brne	.+8      	; 0x3364 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED, OFF); /*  LED Off */
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	80 e1       	ldi	r24, 0x10	; 16
    3360:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
	}
}
    3364:	cf 91       	pop	r28
    3366:	08 95       	ret

00003368 <__vector_4>:
 *
 *  Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT1_vect)
{
    3368:	1f 92       	push	r1
    336a:	0f 92       	push	r0
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	0f 92       	push	r0
    3370:	11 24       	eor	r1, r1
    3372:	2f 93       	push	r18
    3374:	3f 93       	push	r19
    3376:	4f 93       	push	r20
    3378:	5f 93       	push	r21
    337a:	6f 93       	push	r22
    337c:	7f 93       	push	r23
    337e:	8f 93       	push	r24
    3380:	9f 93       	push	r25
    3382:	af 93       	push	r26
    3384:	bf 93       	push	r27
    3386:	cf 93       	push	r28
    3388:	ef 93       	push	r30
    338a:	ff 93       	push	r31
	static BOOL holdPinVal = OFF;
	BOOL pinVal = digitalRead(PIN_SYNC);
    338c:	81 e1       	ldi	r24, 0x11	; 17
    338e:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    3392:	c8 2f       	mov	r28, r24

	g_sync_pin_timer = 0;
    3394:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <g_sync_pin_timer+0x1>
    3398:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_sync_pin_timer>

	if(pinVal && !holdPinVal)   /* Sync is high = button released, and was low previously */
    339c:	88 23       	and	r24, r24
    339e:	91 f1       	breq	.+100    	; 0x3404 <__vector_4+0x9c>
    33a0:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <_ZZ10__vector_4E10holdPinVal>
    33a4:	81 11       	cpse	r24, r1
    33a6:	2e c0       	rjmp	.+92     	; 0x3404 <__vector_4+0x9c>
	{
		if(g_LED_timeout_countdown)
    33a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    33ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    33b0:	89 2b       	or	r24, r25
    33b2:	01 f1       	breq	.+64     	; 0x33f4 <__vector_4+0x8c>
		{
			if(!g_perform_EEPROM_reset)
    33b4:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <g_perform_EEPROM_reset>
    33b8:	81 11       	cpse	r24, r1
    33ba:	1e c0       	rjmp	.+60     	; 0x33f8 <__vector_4+0x90>
			{
				if(g_transmissions_disabled)
    33bc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    33c0:	88 23       	and	r24, r24
    33c2:	71 f0       	breq	.+28     	; 0x33e0 <__vector_4+0x78>
				{
					if(g_sync_pin_stable == STABLE_LOW)
    33c4:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <g_sync_pin_stable>
    33c8:	82 30       	cpi	r24, 0x02	; 2
    33ca:	b1 f4       	brne	.+44     	; 0x33f8 <__vector_4+0x90>
					{
						g_sync_pin_stable = UNSTABLE;
    33cc:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <g_sync_pin_stable>
						digitalWrite(PIN_LED, OFF); /*  LED */
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	80 e1       	ldi	r24, 0x10	; 16
    33d4:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
						startEventNow(PUSHBUTTON);
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	0e 94 36 19 	call	0x326c	; 0x326c <_Z13startEventNow19EventActionSource_t>
    33de:	0c c0       	rjmp	.+24     	; 0x33f8 <__vector_4+0x90>
					}
				}
				else
				{
					if(g_sync_pin_stable == STABLE_LOW)
    33e0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <g_sync_pin_stable>
    33e4:	82 30       	cpi	r24, 0x02	; 2
    33e6:	41 f4       	brne	.+16     	; 0x33f8 <__vector_4+0x90>
					{
						g_sync_pin_stable = UNSTABLE;
    33e8:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <g_sync_pin_stable>
						stopEventNow(PUSHBUTTON);
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z12stopEventNow19EventActionSource_t>
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <__vector_4+0x90>
				}
			}
		}
		else
		{
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    33f4:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>
		}

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    33f8:	8c e2       	ldi	r24, 0x2C	; 44
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    3400:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
	}

	holdPinVal = pinVal;
    3404:	c0 93 a5 04 	sts	0x04A5, r28	; 0x8004a5 <_ZZ10__vector_4E10holdPinVal>
}
    3408:	ff 91       	pop	r31
    340a:	ef 91       	pop	r30
    340c:	cf 91       	pop	r28
    340e:	bf 91       	pop	r27
    3410:	af 91       	pop	r26
    3412:	9f 91       	pop	r25
    3414:	8f 91       	pop	r24
    3416:	7f 91       	pop	r23
    3418:	6f 91       	pop	r22
    341a:	5f 91       	pop	r21
    341c:	4f 91       	pop	r20
    341e:	3f 91       	pop	r19
    3420:	2f 91       	pop	r18
    3422:	0f 90       	pop	r0
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	0f 90       	pop	r0
    3428:	1f 90       	pop	r1
    342a:	18 95       	reti

0000342c <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	g_current_epoch = RTC_get_epoch();
    342c:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    3430:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <g_current_epoch>
    3434:	70 93 5a 05 	sts	0x055A, r23	; 0x80055a <g_current_epoch+0x1>
    3438:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_current_epoch+0x2>
    343c:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    3440:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_messages_text+0x15>
    3444:	81 11       	cpse	r24, r1
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <_Z18reportConfigErrorsv+0x26>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    3448:	65 e0       	ldi	r22, 0x05	; 5
    344a:	8c e6       	ldi	r24, 0x6C	; 108
    344c:	95 e0       	ldi	r25, 0x05	; 5
    344e:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    3452:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    3456:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    345a:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    345e:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3462:	81 15       	cp	r24, r1
    3464:	96 46       	sbci	r25, 0x66	; 102
    3466:	ae 4e       	sbci	r26, 0xEE	; 238
    3468:	bf 45       	sbci	r27, 0x5F	; 95
    346a:	28 f4       	brcc	.+10     	; 0x3476 <_Z18reportConfigErrorsv+0x4a>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    346c:	62 e0       	ldi	r22, 0x02	; 2
    346e:	8c e6       	ldi	r24, 0x6C	; 108
    3470:	95 e0       	ldi	r25, 0x05	; 5
    3472:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    3476:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_event_finish_epoch>
    347a:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    347e:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    3482:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    3486:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    348a:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    348e:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3492:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3496:	48 17       	cp	r20, r24
    3498:	59 07       	cpc	r21, r25
    349a:	6a 07       	cpc	r22, r26
    349c:	7b 07       	cpc	r23, r27
    349e:	00 f5       	brcc	.+64     	; 0x34e0 <_Z18reportConfigErrorsv+0xb4>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    34a0:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
    34a4:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    34a8:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    34ac:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    34b0:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    34b4:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    34b8:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    34bc:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    34c0:	48 17       	cp	r20, r24
    34c2:	59 07       	cpc	r21, r25
    34c4:	6a 07       	cpc	r22, r26
    34c6:	7b 07       	cpc	r23, r27
    34c8:	28 f4       	brcc	.+10     	; 0x34d4 <_Z18reportConfigErrorsv+0xa8>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    34ca:	63 e0       	ldi	r22, 0x03	; 3
    34cc:	8c e6       	ldi	r24, 0x6C	; 108
    34ce:	95 e0       	ldi	r25, 0x05	; 5
    34d0:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    34d4:	64 e0       	ldi	r22, 0x04	; 4
    34d6:	8c e6       	ldi	r24, 0x6C	; 108
    34d8:	95 e0       	ldi	r25, 0x05	; 5
    34da:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    34de:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    34e0:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
    34e4:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    34e8:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    34ec:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    34f0:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    34f4:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    34f8:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    34fc:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3500:	48 17       	cp	r20, r24
    3502:	59 07       	cpc	r21, r25
    3504:	6a 07       	cpc	r22, r26
    3506:	7b 07       	cpc	r23, r27
    3508:	c0 f4       	brcc	.+48     	; 0x353a <_Z18reportConfigErrorsv+0x10e>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    350a:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    350e:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    3512:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    3516:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    351a:	81 15       	cp	r24, r1
    351c:	96 46       	sbci	r25, 0x66	; 102
    351e:	ae 4e       	sbci	r26, 0xEE	; 238
    3520:	bf 45       	sbci	r27, 0x5F	; 95
    3522:	30 f4       	brcc	.+12     	; 0x3530 <_Z18reportConfigErrorsv+0x104>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    3524:	63 e0       	ldi	r22, 0x03	; 3
    3526:	8c e6       	ldi	r24, 0x6C	; 108
    3528:	95 e0       	ldi	r25, 0x05	; 5
    352a:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    352e:	08 95       	ret
		}
		else
		{
			lb_send_string((char*)"Event running...\n", TRUE);
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	82 e3       	ldi	r24, 0x32	; 50
    3534:	91 e0       	ldi	r25, 0x01	; 1
    3536:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    353a:	08 95       	ret

0000353c <_Z14reportTimeTillmmPKcS0_>:
		}
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    353c:	2f 92       	push	r2
    353e:	3f 92       	push	r3
    3540:	4f 92       	push	r4
    3542:	5f 92       	push	r5
    3544:	6f 92       	push	r6
    3546:	7f 92       	push	r7
    3548:	8f 92       	push	r8
    354a:	9f 92       	push	r9
    354c:	af 92       	push	r10
    354e:	bf 92       	push	r11
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	2c 97       	sbiw	r28, 0x0c	; 12
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	2b 01       	movw	r4, r22
    3572:	3c 01       	movw	r6, r24
    3574:	49 01       	movw	r8, r18
    3576:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    3578:	62 17       	cp	r22, r18
    357a:	73 07       	cpc	r23, r19
    357c:	84 07       	cpc	r24, r20
    357e:	95 07       	cpc	r25, r21
    3580:	50 f0       	brcs	.+20     	; 0x3596 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    3582:	e1 14       	cp	r14, r1
    3584:	f1 04       	cpc	r15, r1
    3586:	09 f4       	brne	.+2      	; 0x358a <_Z14reportTimeTillmmPKcS0_+0x4e>
    3588:	04 c1       	rjmp	.+520    	; 0x3792 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    358a:	61 e0       	ldi	r22, 0x01	; 1
    358c:	c7 01       	movw	r24, r14
    358e:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	ff c0       	rjmp	.+510    	; 0x3794 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    3596:	01 15       	cp	r16, r1
    3598:	11 05       	cpc	r17, r1
    359a:	21 f0       	breq	.+8      	; 0x35a4 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    359c:	61 e0       	ldi	r22, 0x01	; 1
    359e:	c8 01       	movw	r24, r16
    35a0:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
		}
		time_t dif = until - from;
    35a4:	75 01       	movw	r14, r10
    35a6:	64 01       	movw	r12, r8
    35a8:	c4 18       	sub	r12, r4
    35aa:	d5 08       	sbc	r13, r5
    35ac:	e6 08       	sbc	r14, r6
    35ae:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    35b0:	c7 01       	movw	r24, r14
    35b2:	b6 01       	movw	r22, r12
    35b4:	20 e8       	ldi	r18, 0x80	; 128
    35b6:	33 e3       	ldi	r19, 0x33	; 51
    35b8:	41 ee       	ldi	r20, 0xE1	; 225
    35ba:	51 e0       	ldi	r21, 0x01	; 1
    35bc:	0e 94 bd 30 	call	0x617a	; 0x617a <__udivmodsi4>
    35c0:	29 01       	movw	r4, r18
    35c2:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    35c4:	44 27       	eor	r20, r20
    35c6:	55 27       	eor	r21, r21
    35c8:	60 e8       	ldi	r22, 0x80	; 128
    35ca:	73 e3       	ldi	r23, 0x33	; 51
    35cc:	81 ee       	ldi	r24, 0xE1	; 225
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	0e 94 85 30 	call	0x610a	; 0x610a <__mulsi3>
    35d4:	c6 1a       	sub	r12, r22
    35d6:	d7 0a       	sbc	r13, r23
    35d8:	e8 0a       	sbc	r14, r24
    35da:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    35dc:	c7 01       	movw	r24, r14
    35de:	b6 01       	movw	r22, r12
    35e0:	20 e8       	ldi	r18, 0x80	; 128
    35e2:	31 e5       	ldi	r19, 0x51	; 81
    35e4:	41 e0       	ldi	r20, 0x01	; 1
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	0e 94 bd 30 	call	0x617a	; 0x617a <__udivmodsi4>
    35ec:	49 01       	movw	r8, r18
    35ee:	5a 01       	movw	r10, r20
    35f0:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    35f2:	44 27       	eor	r20, r20
    35f4:	55 27       	eor	r21, r21
    35f6:	60 e8       	ldi	r22, 0x80	; 128
    35f8:	71 e5       	ldi	r23, 0x51	; 81
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	0e 94 85 30 	call	0x610a	; 0x610a <__mulsi3>
    3602:	c6 1a       	sub	r12, r22
    3604:	d7 0a       	sbc	r13, r23
    3606:	e8 0a       	sbc	r14, r24
    3608:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    360a:	c7 01       	movw	r24, r14
    360c:	b6 01       	movw	r22, r12
    360e:	20 e1       	ldi	r18, 0x10	; 16
    3610:	3e e0       	ldi	r19, 0x0E	; 14
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	0e 94 bd 30 	call	0x617a	; 0x617a <__udivmodsi4>
    361a:	29 83       	std	Y+1, r18	; 0x01
    361c:	3a 83       	std	Y+2, r19	; 0x02
    361e:	4b 83       	std	Y+3, r20	; 0x03
    3620:	5c 83       	std	Y+4, r21	; 0x04
    3622:	29 81       	ldd	r18, Y+1	; 0x01
    3624:	3a 81       	ldd	r19, Y+2	; 0x02
    3626:	3a 87       	std	Y+10, r19	; 0x0a
    3628:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    362a:	29 81       	ldd	r18, Y+1	; 0x01
    362c:	3a 81       	ldd	r19, Y+2	; 0x02
    362e:	4b 81       	ldd	r20, Y+3	; 0x03
    3630:	5c 81       	ldd	r21, Y+4	; 0x04
    3632:	44 27       	eor	r20, r20
    3634:	55 27       	eor	r21, r21
    3636:	a0 e1       	ldi	r26, 0x10	; 16
    3638:	be e0       	ldi	r27, 0x0E	; 14
    363a:	0e 94 1a 31 	call	0x6234	; 0x6234 <__muluhisi3>
    363e:	c6 1a       	sub	r12, r22
    3640:	d7 0a       	sbc	r13, r23
    3642:	e8 0a       	sbc	r14, r24
    3644:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    3646:	c7 01       	movw	r24, r14
    3648:	b6 01       	movw	r22, r12
    364a:	2c e3       	ldi	r18, 0x3C	; 60
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	0e 94 bd 30 	call	0x617a	; 0x617a <__udivmodsi4>
    3656:	2d 83       	std	Y+5, r18	; 0x05
    3658:	3e 83       	std	Y+6, r19	; 0x06
    365a:	4f 83       	std	Y+7, r20	; 0x07
    365c:	58 87       	std	Y+8, r21	; 0x08
    365e:	0d 81       	ldd	r16, Y+5	; 0x05
    3660:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    3662:	2c e3       	ldi	r18, 0x3C	; 60
    3664:	20 9f       	mul	r18, r16
    3666:	c0 01       	movw	r24, r0
    3668:	21 9f       	mul	r18, r17
    366a:	90 0d       	add	r25, r0
    366c:	11 24       	eor	r1, r1
    366e:	a6 01       	movw	r20, r12
    3670:	48 1b       	sub	r20, r24
    3672:	59 0b       	sbc	r21, r25
    3674:	5c 87       	std	Y+12, r21	; 0x0c
    3676:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    3678:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <g_tempStr>

		if(years)
    367c:	41 14       	cp	r4, r1
    367e:	51 04       	cpc	r5, r1
    3680:	b9 f0       	breq	.+46     	; 0x36b0 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    3682:	5f 92       	push	r5
    3684:	4f 92       	push	r4
    3686:	84 e4       	ldi	r24, 0x44	; 68
    3688:	91 e0       	ldi	r25, 0x01	; 1
    368a:	9f 93       	push	r25
    368c:	8f 93       	push	r24
    368e:	86 ea       	ldi	r24, 0xA6	; 166
    3690:	94 e0       	ldi	r25, 0x04	; 4
    3692:	9f 93       	push	r25
    3694:	8f 93       	push	r24
    3696:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	86 ea       	ldi	r24, 0xA6	; 166
    369e:	94 e0       	ldi	r25, 0x04	; 4
    36a0:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
		}

		if(days)
    36b0:	23 28       	or	r2, r3
    36b2:	b9 f0       	breq	.+46     	; 0x36e2 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    36b4:	9f 92       	push	r9
    36b6:	8f 92       	push	r8
    36b8:	8c e4       	ldi	r24, 0x4C	; 76
    36ba:	91 e0       	ldi	r25, 0x01	; 1
    36bc:	9f 93       	push	r25
    36be:	8f 93       	push	r24
    36c0:	86 ea       	ldi	r24, 0xA6	; 166
    36c2:	94 e0       	ldi	r25, 0x04	; 4
    36c4:	9f 93       	push	r25
    36c6:	8f 93       	push	r24
    36c8:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    36cc:	61 e0       	ldi	r22, 0x01	; 1
    36ce:	86 ea       	ldi	r24, 0xA6	; 166
    36d0:	94 e0       	ldi	r25, 0x04	; 4
    36d2:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
		}

		if(hours)
    36e2:	89 85       	ldd	r24, Y+9	; 0x09
    36e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e6:	89 2b       	or	r24, r25
    36e8:	c9 f0       	breq	.+50     	; 0x371c <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    36ea:	9a 81       	ldd	r25, Y+2	; 0x02
    36ec:	9f 93       	push	r25
    36ee:	e9 81       	ldd	r30, Y+1	; 0x01
    36f0:	ef 93       	push	r30
    36f2:	85 e5       	ldi	r24, 0x55	; 85
    36f4:	91 e0       	ldi	r25, 0x01	; 1
    36f6:	9f 93       	push	r25
    36f8:	8f 93       	push	r24
    36fa:	86 ea       	ldi	r24, 0xA6	; 166
    36fc:	94 e0       	ldi	r25, 0x04	; 4
    36fe:	9f 93       	push	r25
    3700:	8f 93       	push	r24
    3702:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3706:	61 e0       	ldi	r22, 0x01	; 1
    3708:	86 ea       	ldi	r24, 0xA6	; 166
    370a:	94 e0       	ldi	r25, 0x04	; 4
    370c:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
		}

		if(minutes)
    371c:	01 2b       	or	r16, r17
    371e:	c9 f0       	breq	.+50     	; 0x3752 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    3720:	fe 81       	ldd	r31, Y+6	; 0x06
    3722:	ff 93       	push	r31
    3724:	2d 81       	ldd	r18, Y+5	; 0x05
    3726:	2f 93       	push	r18
    3728:	8d e5       	ldi	r24, 0x5D	; 93
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	9f 93       	push	r25
    372e:	8f 93       	push	r24
    3730:	86 ea       	ldi	r24, 0xA6	; 166
    3732:	94 e0       	ldi	r25, 0x04	; 4
    3734:	9f 93       	push	r25
    3736:	8f 93       	push	r24
    3738:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	86 ea       	ldi	r24, 0xA6	; 166
    3740:	94 e0       	ldi	r25, 0x04	; 4
    3742:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    3752:	3c 85       	ldd	r19, Y+12	; 0x0c
    3754:	3f 93       	push	r19
    3756:	4b 85       	ldd	r20, Y+11	; 0x0b
    3758:	4f 93       	push	r20
    375a:	85 e6       	ldi	r24, 0x65	; 101
    375c:	91 e0       	ldi	r25, 0x01	; 1
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	86 ea       	ldi	r24, 0xA6	; 166
    3764:	94 e0       	ldi	r25, 0x04	; 4
    3766:	9f 93       	push	r25
    3768:	8f 93       	push	r24
    376a:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
		lb_send_string(g_tempStr, TRUE);
    376e:	61 e0       	ldi	r22, 0x01	; 1
    3770:	86 ea       	ldi	r24, 0xA6	; 166
    3772:	94 e0       	ldi	r25, 0x04	; 4
    3774:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>

		lb_send_NewLine();
    3778:	0e 94 b2 0c 	call	0x1964	; 0x1964 <lb_send_NewLine>
		g_tempStr[0] = '\0';
    377c:	e6 ea       	ldi	r30, 0xA6	; 166
    377e:	f4 e0       	ldi	r31, 0x04	; 4
    3780:	10 82       	st	Z, r1
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3792:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3794:	2c 96       	adiw	r28, 0x0c	; 12
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	f8 94       	cli
    379a:	de bf       	out	0x3e, r29	; 62
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	cd bf       	out	0x3d, r28	; 61
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
    37a4:	1f 91       	pop	r17
    37a6:	0f 91       	pop	r16
    37a8:	ff 90       	pop	r15
    37aa:	ef 90       	pop	r14
    37ac:	df 90       	pop	r13
    37ae:	cf 90       	pop	r12
    37b0:	bf 90       	pop	r11
    37b2:	af 90       	pop	r10
    37b4:	9f 90       	pop	r9
    37b6:	8f 90       	pop	r8
    37b8:	7f 90       	pop	r7
    37ba:	6f 90       	pop	r6
    37bc:	5f 90       	pop	r5
    37be:	4f 90       	pop	r4
    37c0:	3f 90       	pop	r3
    37c2:	2f 90       	pop	r2
    37c4:	08 95       	ret

000037c6 <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED, OFF); /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
	g_current_epoch = RTC_get_epoch();
    37ce:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    37d2:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <g_current_epoch>
    37d6:	70 93 5a 05 	sts	0x055A, r23	; 0x80055a <g_current_epoch+0x1>
    37da:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_current_epoch+0x2>
    37de:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    37e2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    37e6:	82 30       	cpi	r24, 0x02	; 2
    37e8:	09 f4       	brne	.+2      	; 0x37ec <_Z18startEventUsingRTCv+0x26>
    37ea:	62 c0       	rjmp	.+196    	; 0x38b0 <_Z18startEventUsingRTCv+0xea>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    37ec:	63 e0       	ldi	r22, 0x03	; 3
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    37f6:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <g_event_start_epoch>
    37fa:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    37fe:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    3802:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    3806:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_current_epoch>
    380a:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_current_epoch+0x1>
    380e:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3812:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3816:	0f 2e       	mov	r0, r31
    3818:	fc e6       	ldi	r31, 0x6C	; 108
    381a:	ef 2e       	mov	r14, r31
    381c:	f1 e0       	ldi	r31, 0x01	; 1
    381e:	ff 2e       	mov	r15, r31
    3820:	f0 2d       	mov	r31, r0
    3822:	09 e7       	ldi	r16, 0x79	; 121
    3824:	11 e0       	ldi	r17, 0x01	; 1
    3826:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    382a:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
    382e:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    3832:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    3836:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    383a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    383e:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    3842:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3846:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    384a:	48 17       	cp	r20, r24
    384c:	59 07       	cpc	r21, r25
    384e:	6a 07       	cpc	r22, r26
    3850:	7b 07       	cpc	r23, r27
    3852:	b8 f4       	brcc	.+46     	; 0x3882 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3854:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_event_finish_epoch>
    3858:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    385c:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    3860:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    3864:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_current_epoch>
    3868:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_current_epoch+0x1>
    386c:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3870:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3874:	e1 2c       	mov	r14, r1
    3876:	f1 2c       	mov	r15, r1
    3878:	05 e8       	ldi	r16, 0x85	; 133
    387a:	11 e0       	ldi	r17, 0x01	; 1
    387c:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>
    3880:	19 c0       	rjmp	.+50     	; 0x38b4 <_Z18startEventUsingRTCv+0xee>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3882:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_event_finish_epoch>
    3886:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    388a:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    388e:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    3892:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <g_event_start_epoch>
    3896:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    389a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    389e:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    38a2:	e1 2c       	mov	r14, r1
    38a4:	f1 2c       	mov	r15, r1
    38a6:	06 e9       	ldi	r16, 0x96	; 150
    38a8:	11 e0       	ldi	r17, 0x01	; 1
    38aa:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <_Z18startEventUsingRTCv+0xee>
		}
	}
	else
	{
		reportConfigErrors();
    38b0:	0e 94 16 1a 	call	0x342c	; 0x342c <_Z18reportConfigErrorsv>
	}
}
    38b4:	1f 91       	pop	r17
    38b6:	0f 91       	pop	r16
    38b8:	ff 90       	pop	r15
    38ba:	ef 90       	pop	r14
    38bc:	08 95       	ret

000038be <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
    38be:	4f 92       	push	r4
    38c0:	5f 92       	push	r5
    38c2:	6f 92       	push	r6
    38c4:	7f 92       	push	r7
    38c6:	8f 92       	push	r8
    38c8:	9f 92       	push	r9
    38ca:	af 92       	push	r10
    38cc:	bf 92       	push	r11
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	2c 97       	sbiw	r28, 0x0c	; 12
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	8c 01       	movw	r16, r24
    38ec:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    38ee:	fc 01       	movw	r30, r24
    38f0:	01 90       	ld	r0, Z+
    38f2:	00 20       	and	r0, r0
    38f4:	e9 f7       	brne	.-6      	; 0x38f0 <_Z18validateTimeStringPcPma+0x32>
    38f6:	31 97       	sbiw	r30, 0x01	; 1
    38f8:	e8 1b       	sub	r30, r24
    38fa:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    38fc:	25 e0       	ldi	r18, 0x05	; 5
    38fe:	65 35       	cpi	r22, 0x55	; 85
    3900:	72 07       	cpc	r23, r18
    3902:	49 f5       	brne	.+82     	; 0x3956 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3904:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    3908:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    390c:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3910:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3914:	89 87       	std	Y+9, r24	; 0x09
    3916:	9a 87       	std	Y+10, r25	; 0x0a
    3918:	ab 87       	std	Y+11, r26	; 0x0b
    391a:	bc 87       	std	Y+12, r27	; 0x0c
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	96 e6       	ldi	r25, 0x66	; 102
    3920:	ae ee       	ldi	r26, 0xEE	; 238
    3922:	bf e5       	ldi	r27, 0x5F	; 95
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	9a 83       	std	Y+2, r25	; 0x02
    3928:	ab 83       	std	Y+3, r26	; 0x03
    392a:	bc 83       	std	Y+4, r27	; 0x04
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	ab 85       	ldd	r26, Y+11	; 0x0b
    3932:	bc 85       	ldd	r27, Y+12	; 0x0c
    3934:	81 15       	cp	r24, r1
    3936:	96 46       	sbci	r25, 0x66	; 102
    3938:	ae 4e       	sbci	r26, 0xEE	; 238
    393a:	bf 45       	sbci	r27, 0x5F	; 95
    393c:	28 f4       	brcc	.+10     	; 0x3948 <_Z18validateTimeStringPcPma+0x8a>
    393e:	89 80       	ldd	r8, Y+1	; 0x01
    3940:	9a 80       	ldd	r9, Y+2	; 0x02
    3942:	ab 80       	ldd	r10, Y+3	; 0x03
    3944:	bc 80       	ldd	r11, Y+4	; 0x04
    3946:	04 c0       	rjmp	.+8      	; 0x3950 <_Z18validateTimeStringPcPma+0x92>
    3948:	89 84       	ldd	r8, Y+9	; 0x09
    394a:	9a 84       	ldd	r9, Y+10	; 0x0a
    394c:	ab 84       	ldd	r10, Y+11	; 0x0b
    394e:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    3950:	ff 24       	eor	r15, r15
    3952:	f3 94       	inc	r15
    3954:	42 c0       	rjmp	.+132    	; 0x39da <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epochVar == &g_event_finish_epoch)
    3956:	61 55       	subi	r22, 0x51	; 81
    3958:	75 40       	sbci	r23, 0x05	; 5
    395a:	a9 f5       	brne	.+106    	; 0x39c6 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    395c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    3960:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    3964:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    3968:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    396c:	8d 83       	std	Y+5, r24	; 0x05
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	af 83       	std	Y+7, r26	; 0x07
    3972:	b8 87       	std	Y+8, r27	; 0x08
    3974:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    3978:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    397c:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3980:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	ab 83       	std	Y+3, r26	; 0x03
    398a:	bc 83       	std	Y+4, r27	; 0x04
    398c:	4d 81       	ldd	r20, Y+5	; 0x05
    398e:	5e 81       	ldd	r21, Y+6	; 0x06
    3990:	6f 81       	ldd	r22, Y+7	; 0x07
    3992:	78 85       	ldd	r23, Y+8	; 0x08
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	ab 81       	ldd	r26, Y+3	; 0x03
    399a:	bc 81       	ldd	r27, Y+4	; 0x04
    399c:	48 17       	cp	r20, r24
    399e:	59 07       	cpc	r21, r25
    39a0:	6a 07       	cpc	r22, r26
    39a2:	7b 07       	cpc	r23, r27
    39a4:	40 f4       	brcc	.+16     	; 0x39b6 <_Z18validateTimeStringPcPma+0xf8>
    39a6:	89 80       	ldd	r8, Y+1	; 0x01
    39a8:	9a 80       	ldd	r9, Y+2	; 0x02
    39aa:	ab 80       	ldd	r10, Y+3	; 0x03
    39ac:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    39ae:	68 94       	set
    39b0:	ff 24       	eor	r15, r15
    39b2:	f1 f8       	bld	r15, 1
    39b4:	12 c0       	rjmp	.+36     	; 0x39da <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    39b6:	8d 80       	ldd	r8, Y+5	; 0x05
    39b8:	9e 80       	ldd	r9, Y+6	; 0x06
    39ba:	af 80       	ldd	r10, Y+7	; 0x07
    39bc:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    39be:	68 94       	set
    39c0:	ff 24       	eor	r15, r15
    39c2:	f1 f8       	bld	r15, 1
    39c4:	0a c0       	rjmp	.+20     	; 0x39da <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    39c6:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    39c8:	0f 2e       	mov	r0, r31
    39ca:	81 2c       	mov	r8, r1
    39cc:	f6 e6       	ldi	r31, 0x66	; 102
    39ce:	9f 2e       	mov	r9, r31
    39d0:	fe ee       	ldi	r31, 0xEE	; 238
    39d2:	af 2e       	mov	r10, r31
    39d4:	ff e5       	ldi	r31, 0x5F	; 95
    39d6:	bf 2e       	mov	r11, r31
    39d8:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    39da:	ec 30       	cpi	r30, 0x0C	; 12
    39dc:	f1 05       	cpc	r31, r1
    39de:	09 f0       	breq	.+2      	; 0x39e2 <_Z18validateTimeStringPcPma+0x124>
    39e0:	5e c0       	rjmp	.+188    	; 0x3a9e <_Z18validateTimeStringPcPma+0x1e0>
    39e2:	c8 01       	movw	r24, r16
    39e4:	0e 94 28 19 	call	0x3250	; 0x3250 <_Z11only_digitsPc>
    39e8:	88 23       	and	r24, r24
    39ea:	09 f4       	brne	.+2      	; 0x39ee <_Z18validateTimeStringPcPma+0x130>
    39ec:	4f c0       	rjmp	.+158    	; 0x3a8c <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = RTC_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    39ee:	b8 01       	movw	r22, r16
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	0e 94 32 04 	call	0x864	; 0x864 <_Z13RTC_get_epochPbPc>
    39f8:	2b 01       	movw	r4, r22
    39fa:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    39fc:	ae 2d       	mov	r26, r14
    39fe:	ee 0c       	add	r14, r14
    3a00:	bb 0b       	sbc	r27, r27
    3a02:	20 e1       	ldi	r18, 0x10	; 16
    3a04:	3e e0       	ldi	r19, 0x0E	; 14
    3a06:	0e 94 13 31 	call	0x6226	; 0x6226 <__usmulhisi3>
    3a0a:	64 0d       	add	r22, r4
    3a0c:	75 1d       	adc	r23, r5
    3a0e:	86 1d       	adc	r24, r6
    3a10:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    3a12:	86 16       	cp	r8, r22
    3a14:	97 06       	cpc	r9, r23
    3a16:	a8 06       	cpc	r10, r24
    3a18:	b9 06       	cpc	r11, r25
    3a1a:	08 f4       	brcc	.+2      	; 0x3a1e <_Z18validateTimeStringPcPma+0x160>
    3a1c:	45 c0       	rjmp	.+138    	; 0x3aa8 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    3a1e:	21 e0       	ldi	r18, 0x01	; 1
    3a20:	f2 12       	cpse	r15, r18
    3a22:	09 c0       	rjmp	.+18     	; 0x3a36 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    3a24:	68 e0       	ldi	r22, 0x08	; 8
    3a26:	8c e6       	ldi	r24, 0x6C	; 108
    3a28:	95 e0       	ldi	r25, 0x05	; 5
    3a2a:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	70 e0       	ldi	r23, 0x00	; 0
    3a32:	cb 01       	movw	r24, r22
    3a34:	39 c0       	rjmp	.+114    	; 0x3aa8 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    3a36:	22 e0       	ldi	r18, 0x02	; 2
    3a38:	f2 12       	cpse	r15, r18
    3a3a:	1f c0       	rjmp	.+62     	; 0x3a7a <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    3a3c:	00 91 59 05 	lds	r16, 0x0559	; 0x800559 <g_current_epoch>
    3a40:	10 91 5a 05 	lds	r17, 0x055A	; 0x80055a <g_current_epoch+0x1>
    3a44:	20 91 5b 05 	lds	r18, 0x055B	; 0x80055b <g_current_epoch+0x2>
    3a48:	30 91 5c 05 	lds	r19, 0x055C	; 0x80055c <g_current_epoch+0x3>
    3a4c:	60 17       	cp	r22, r16
    3a4e:	71 07       	cpc	r23, r17
    3a50:	82 07       	cpc	r24, r18
    3a52:	93 07       	cpc	r25, r19
    3a54:	48 f4       	brcc	.+18     	; 0x3a68 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    3a56:	67 e0       	ldi	r22, 0x07	; 7
    3a58:	8c e6       	ldi	r24, 0x6C	; 108
    3a5a:	95 e0       	ldi	r25, 0x05	; 5
    3a5c:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a60:	60 e0       	ldi	r22, 0x00	; 0
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	cb 01       	movw	r24, r22
    3a66:	20 c0       	rjmp	.+64     	; 0x3aa8 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    3a68:	66 e0       	ldi	r22, 0x06	; 6
    3a6a:	8c e6       	ldi	r24, 0x6C	; 108
    3a6c:	95 e0       	ldi	r25, 0x05	; 5
    3a6e:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	cb 01       	movw	r24, r22
    3a78:	17 c0       	rjmp	.+46     	; 0x3aa8 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    3a7a:	6a e0       	ldi	r22, 0x0A	; 10
    3a7c:	8c e6       	ldi	r24, 0x6C	; 108
    3a7e:	95 e0       	ldi	r25, 0x05	; 5
    3a80:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a84:	60 e0       	ldi	r22, 0x00	; 0
    3a86:	70 e0       	ldi	r23, 0x00	; 0
    3a88:	cb 01       	movw	r24, r22
    3a8a:	0e c0       	rjmp	.+28     	; 0x3aa8 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    3a8c:	69 e0       	ldi	r22, 0x09	; 9
    3a8e:	8c e6       	ldi	r24, 0x6C	; 108
    3a90:	95 e0       	ldi	r25, 0x05	; 5
    3a92:	0e 94 c4 05 	call	0xb88	; 0xb88 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	05 c0       	rjmp	.+10     	; 0x3aa8 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    3a9e:	ef 2b       	or	r30, r31
    3aa0:	a9 f7       	brne	.-22     	; 0x3a8c <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	70 e0       	ldi	r23, 0x00	; 0
    3aa6:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    3aa8:	2c 96       	adiw	r28, 0x0c	; 12
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	bf 90       	pop	r11
    3ac2:	af 90       	pop	r10
    3ac4:	9f 90       	pop	r9
    3ac6:	8f 90       	pop	r8
    3ac8:	7f 90       	pop	r7
    3aca:	6f 90       	pop	r6
    3acc:	5f 90       	pop	r5
    3ace:	4f 90       	pop	r4
    3ad0:	08 95       	ret

00003ad2 <_Z18setAMToneFrequency14AM_Tone_Freq_t>:

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
    3ad2:	cf 93       	push	r28
	BOOL enableAM = TRUE;

#if INIT_EEPROM_ONLY
	if(value) enableAM = FALSE; /* Remove compiler warning */
#else
	switch(value)
    3ad4:	82 30       	cpi	r24, 0x02	; 2
    3ad6:	19 f1       	breq	.+70     	; 0x3b1e <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x4c>
    3ad8:	28 f4       	brcc	.+10     	; 0x3ae4 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x12>
    3ada:	88 23       	and	r24, r24
    3adc:	c1 f1       	breq	.+112    	; 0x3b4e <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7c>
    3ade:	81 30       	cpi	r24, 0x01	; 1
    3ae0:	31 f1       	breq	.+76     	; 0x3b2e <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x5c>
    3ae2:	2d c0       	rjmp	.+90     	; 0x3b3e <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x6c>
    3ae4:	84 30       	cpi	r24, 0x04	; 4
    3ae6:	59 f0       	breq	.+22     	; 0x3afe <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x2c>
    3ae8:	90 f0       	brcs	.+36     	; 0x3b0e <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x3c>
    3aea:	85 30       	cpi	r24, 0x05	; 5
    3aec:	41 f5       	brne	.+80     	; 0x3b3e <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x6c>
		break;

		case AM_900Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 556;    /* For ~900 Hz tone output */
    3aee:	8c e2       	ldi	r24, 0x2C	; 44
    3af0:	92 e0       	ldi	r25, 0x02	; 2
    3af2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3af6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3afa:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 556;    /* For ~900 Hz tone output */
#else
				OCR1A = 278;
#endif
		}
		break;
    3afc:	29 c0       	rjmp	.+82     	; 0x3b50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_800Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 625;    /* For ~800 Hz tone output */
    3afe:	81 e7       	ldi	r24, 0x71	; 113
    3b00:	92 e0       	ldi	r25, 0x02	; 2
    3b02:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b06:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3b0a:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 625;    /* For ~800 Hz tone output */
#else
				OCR1A = 312;
#endif
		}
		break;
    3b0c:	21 c0       	rjmp	.+66     	; 0x3b50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_700Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 714;    /* For ~700 Hz tone output */
    3b0e:	8a ec       	ldi	r24, 0xCA	; 202
    3b10:	92 e0       	ldi	r25, 0x02	; 2
    3b12:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b16:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3b1a:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 714;    /* For ~700 Hz tone output */
#else
				OCR1A = 357;
#endif
		}
		break;
    3b1c:	19 c0       	rjmp	.+50     	; 0x3b50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_600Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 833;    /* For ~600 Hz tone output */
    3b1e:	81 e4       	ldi	r24, 0x41	; 65
    3b20:	93 e0       	ldi	r25, 0x03	; 3
    3b22:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b26:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3b2a:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 833;    /* For ~600 Hz tone output */
#else
				OCR1A = 416;
#endif
		}
		break;
    3b2c:	11 c0       	rjmp	.+34     	; 0x3b50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_500Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 1000;   /* For ~500 Hz tone output */
    3b2e:	88 ee       	ldi	r24, 0xE8	; 232
    3b30:	93 e0       	ldi	r25, 0x03	; 3
    3b32:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b36:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3b3a:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 1000;   /* For ~500 Hz tone output */
#else
				OCR1A = 500;
#endif
		}
		break;
    3b3c:	09 c0       	rjmp	.+18     	; 0x3b50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_1000Hz:
		default:
		{
#if F_CPU == 16000000UL
				OCR1A = 500;    /* For ~1000 Hz tone output */
    3b3e:	84 ef       	ldi	r24, 0xF4	; 244
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b46:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3b4a:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 500;    /* For ~1000 Hz tone output */
#else
				OCR1A = 250;
#endif
		}
		break;
    3b4c:	01 c0       	rjmp	.+2      	; 0x3b50 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>
#else
	switch(value)
	{
		case AM_DISABLED:
		{
			enableAM = FALSE;
    3b4e:	c0 e0       	ldi	r28, 0x00	; 0
#endif
		}
		break;
	}

	if(!OCR0A)
    3b50:	87 b5       	in	r24, 0x27	; 39
    3b52:	81 11       	cpse	r24, r1
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x88>
	{
		OCR0A = DEFAULT_TONE_FREQUENCY; /* Ensure that FM tone setting is initialized - even if it won't be used */
    3b56:	8f e2       	ldi	r24, 0x2F	; 47
    3b58:	87 bd       	out	0x27, r24	; 39

	}

 	if(!OCR1A)
    3b5a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    3b5e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b62:	89 2b       	or	r24, r25
    3b64:	31 f4       	brne	.+12     	; 0x3b72 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xa0>
 	{
		OCR1A = 1000;  /* Ensure that AM tone setting is initialized - even if it won't be used */
    3b66:	88 ee       	ldi	r24, 0xE8	; 232
    3b68:	93 e0       	ldi	r25, 0x03	; 3
    3b6a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3b6e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 	}

	cli();
    3b72:	f8 94       	cli
	setupPortsForF1975(enableAM);
    3b74:	8c 2f       	mov	r24, r28
    3b76:	0e 94 93 07 	call	0xf26	; 0xf26 <setupPortsForF1975>

	if(enableAM)
    3b7a:	cc 23       	and	r28, r28
    3b7c:	59 f0       	breq	.+22     	; 0x3b94 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xc2>
	{
		TIMSK0 &= ~(1 << OCIE0A);   /* Timer/Counter0 Output Compare Match A Interrupt Disable (CW Tone Output for FM) */
    3b7e:	ee e6       	ldi	r30, 0x6E	; 110
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	8d 7f       	andi	r24, 0xFD	; 253
    3b86:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);    /* Timer/Counter1 Output Compare Match A Interrupt Enable (CW Tone Output for AM) */
    3b88:	ef e6       	ldi	r30, 0x6F	; 111
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 81       	ld	r24, Z
    3b8e:	82 60       	ori	r24, 0x02	; 2
    3b90:	80 83       	st	Z, r24
    3b92:	0a c0       	rjmp	.+20     	; 0x3ba8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xd6>
	}
	else
	{
		TIMSK0 |= (1 << OCIE0A);    /* Timer/Counter0 Output Compare Match A Interrupt Enable (CW Tone Output for FM) */
    3b94:	ee e6       	ldi	r30, 0x6E	; 110
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	82 60       	ori	r24, 0x02	; 2
    3b9c:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);   /* Timer/Counter1 Output Compare Match A Interrupt Disable (CW Tone Output for AM) */
    3b9e:	ef e6       	ldi	r30, 0x6F	; 111
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	8d 7f       	andi	r24, 0xFD	; 253
    3ba6:	80 83       	st	Z, r24
	}

	g_AM_enabled = enableAM;
    3ba8:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <g_AM_enabled>
	sei();
    3bac:	78 94       	sei
#endif  /* INIT_EEPROM_ONLY */
	return(enableAM);
}
    3bae:	8c 2f       	mov	r24, r28
    3bb0:	cf 91       	pop	r28
    3bb2:	08 95       	ret

00003bb4 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to always optimize large switch statements correctly
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    3bb4:	2f 92       	push	r2
    3bb6:	3f 92       	push	r3
    3bb8:	4f 92       	push	r4
    3bba:	5f 92       	push	r5
    3bbc:	6f 92       	push	r6
    3bbe:	7f 92       	push	r7
    3bc0:	8f 92       	push	r8
    3bc2:	9f 92       	push	r9
    3bc4:	af 92       	push	r10
    3bc6:	bf 92       	push	r11
    3bc8:	cf 92       	push	r12
    3bca:	df 92       	push	r13
    3bcc:	ef 92       	push	r14
    3bce:	ff 92       	push	r15
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	2c 97       	sbiw	r28, 0x0c	; 12
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3be8:	0f 2e       	mov	r0, r31
    3bea:	fe e9       	ldi	r31, 0x9E	; 158
    3bec:	6f 2e       	mov	r6, r31
    3bee:	f1 e0       	ldi	r31, 0x01	; 1
    3bf0:	7f 2e       	mov	r7, r31
    3bf2:	f0 2d       	mov	r31, r0
    3bf4:	0f 2e       	mov	r0, r31
    3bf6:	f6 ea       	ldi	r31, 0xA6	; 166
    3bf8:	af 2e       	mov	r10, r31
    3bfa:	f4 e0       	ldi	r31, 0x04	; 4
    3bfc:	bf 2e       	mov	r11, r31
    3bfe:	f0 2d       	mov	r31, r0
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);

						if(g_messages_text[STATION_ID][0])
    3c00:	0f 2e       	mov	r0, r31
    3c02:	f0 ee       	ldi	r31, 0xE0	; 224
    3c04:	4f 2e       	mov	r4, r31
    3c06:	f4 e0       	ldi	r31, 0x04	; 4
    3c08:	5f 2e       	mov	r5, r31
    3c0a:	f0 2d       	mov	r31, r0
						setAtten(0);
						sei();
					}
#endif /* INIT_EEPROM_ONLY */

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3c0c:	0f 2e       	mov	r0, r31
    3c0e:	fc e0       	ldi	r31, 0x0C	; 12
    3c10:	8f 2e       	mov	r8, r31
    3c12:	f2 e0       	ldi	r31, 0x02	; 2
    3c14:	9f 2e       	mov	r9, r31
    3c16:	f0 2d       	mov	r31, r0
				lb_send_string(g_tempStr, TRUE);

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3c18:	0f 2e       	mov	r0, r31
    3c1a:	f3 e1       	ldi	r31, 0x13	; 19
    3c1c:	2f 2e       	mov	r2, r31
    3c1e:	f2 e0       	ldi	r31, 0x02	; 2
    3c20:	3f 2e       	mov	r3, r31
    3c22:	f0 2d       	mov	r31, r0
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;

	while((lb_buff = nextFullRxBuffer()))
    3c24:	0e 94 bd 0b 	call	0x177a	; 0x177a <nextFullRxBuffer>
    3c28:	6c 01       	movw	r12, r24
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <_Z17handleLinkBusMsgsv+0x7c>
    3c2e:	01 c5       	rjmp	.+2562   	; 0x4632 <_Z17handleLinkBusMsgsv+0xa7e>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    3c30:	dc 01       	movw	r26, r24
    3c32:	11 96       	adiw	r26, 0x01	; 1
    3c34:	8d 91       	ld	r24, X+
    3c36:	9c 91       	ld	r25, X
    3c38:	12 97       	sbiw	r26, 0x02	; 2
    3c3a:	86 3c       	cpi	r24, 0xC6	; 198
    3c3c:	be e1       	ldi	r27, 0x1E	; 30
    3c3e:	9b 07       	cpc	r25, r27
    3c40:	29 f1       	breq	.+74     	; 0x3c8c <_Z17handleLinkBusMsgsv+0xd8>
    3c42:	78 f4       	brcc	.+30     	; 0x3c62 <_Z17handleLinkBusMsgsv+0xae>
    3c44:	8e 31       	cpi	r24, 0x1E	; 30
    3c46:	f3 e0       	ldi	r31, 0x03	; 3
    3c48:	9f 07       	cpc	r25, r31
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <_Z17handleLinkBusMsgsv+0x9a>
    3c4c:	15 c1       	rjmp	.+554    	; 0x3e78 <_Z17handleLinkBusMsgsv+0x2c4>
    3c4e:	8f 36       	cpi	r24, 0x6F	; 111
    3c50:	2d e1       	ldi	r18, 0x1D	; 29
    3c52:	92 07       	cpc	r25, r18
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <_Z17handleLinkBusMsgsv+0xa4>
    3c56:	4d c2       	rjmp	.+1178   	; 0x40f2 <_Z17handleLinkBusMsgsv+0x53e>
    3c58:	87 3d       	cpi	r24, 0xD7	; 215
    3c5a:	92 40       	sbci	r25, 0x02	; 2
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <_Z17handleLinkBusMsgsv+0xac>
    3c5e:	bd c4       	rjmp	.+2426   	; 0x45da <_Z17handleLinkBusMsgsv+0xa26>
    3c60:	ad c0       	rjmp	.+346    	; 0x3dbc <_Z17handleLinkBusMsgsv+0x208>
    3c62:	82 37       	cpi	r24, 0x72	; 114
    3c64:	a3 e2       	ldi	r26, 0x23	; 35
    3c66:	9a 07       	cpc	r25, r26
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <_Z17handleLinkBusMsgsv+0xb8>
    3c6a:	77 c1       	rjmp	.+750    	; 0x3f5a <_Z17handleLinkBusMsgsv+0x3a6>
    3c6c:	28 f4       	brcc	.+10     	; 0x3c78 <_Z17handleLinkBusMsgsv+0xc4>
    3c6e:	8a 3e       	cpi	r24, 0xEA	; 234
    3c70:	92 42       	sbci	r25, 0x22	; 34
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <_Z17handleLinkBusMsgsv+0xc2>
    3c74:	09 c2       	rjmp	.+1042   	; 0x4088 <_Z17handleLinkBusMsgsv+0x4d4>
    3c76:	b1 c4       	rjmp	.+2402   	; 0x45da <_Z17handleLinkBusMsgsv+0xa26>
    3c78:	84 33       	cpi	r24, 0x34	; 52
    3c7a:	f4 e2       	ldi	r31, 0x24	; 36
    3c7c:	9f 07       	cpc	r25, r31
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <_Z17handleLinkBusMsgsv+0xce>
    3c80:	cf c0       	rjmp	.+414    	; 0x3e20 <_Z17handleLinkBusMsgsv+0x26c>
    3c82:	85 3c       	cpi	r24, 0xC5	; 197
    3c84:	94 42       	sbci	r25, 0x24	; 36
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <_Z17handleLinkBusMsgsv+0xd6>
    3c88:	17 c4       	rjmp	.+2094   	; 0x44b8 <_Z17handleLinkBusMsgsv+0x904>
    3c8a:	a7 c4       	rjmp	.+2382   	; 0x45da <_Z17handleLinkBusMsgsv+0xa26>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    3c8c:	d6 01       	movw	r26, r12
    3c8e:	13 96       	adiw	r26, 0x03	; 3
    3c90:	8c 91       	ld	r24, X
    3c92:	13 97       	sbiw	r26, 0x03	; 3
    3c94:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <_Z17handleLinkBusMsgsv+0xe8>
    3c9a:	7b c0       	rjmp	.+246    	; 0x3d92 <_Z17handleLinkBusMsgsv+0x1de>
				{
					if(c == 'B')
    3c9c:	82 34       	cpi	r24, 0x42	; 66
    3c9e:	91 05       	cpc	r25, r1
    3ca0:	09 f4       	brne	.+2      	; 0x3ca4 <_Z17handleLinkBusMsgsv+0xf0>
    3ca2:	af c4       	rjmp	.+2398   	; 0x4602 <_Z17handleLinkBusMsgsv+0xa4e>
					{
						c = BEACON;
					}
					else if(c == 'F')
    3ca4:	86 34       	cpi	r24, 0x46	; 70
    3ca6:	91 05       	cpc	r25, r1
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <_Z17handleLinkBusMsgsv+0xf8>
    3caa:	ad c4       	rjmp	.+2394   	; 0x4606 <_Z17handleLinkBusMsgsv+0xa52>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    3cac:	83 34       	cpi	r24, 0x43	; 67
    3cae:	91 05       	cpc	r25, r1
    3cb0:	d1 f4       	brne	.+52     	; 0x3ce6 <_Z17handleLinkBusMsgsv+0x132>
					{
						char t = lb_buff->fields[FIELD2][0];
    3cb2:	57 96       	adiw	r26, 0x17	; 23
    3cb4:	8c 91       	ld	r24, X
    3cb6:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    3cb8:	58 96       	adiw	r26, 0x18	; 24
    3cba:	1c 92       	st	X, r1

						if(t == 'B')
    3cbc:	82 34       	cpi	r24, 0x42	; 66
    3cbe:	29 f0       	breq	.+10     	; 0x3cca <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	c0 97       	sbiw	r24, 0x30	; 48
    3cc4:	0a 97       	sbiw	r24, 0x0a	; 10
    3cc6:	08 f0       	brcs	.+2      	; 0x3cca <_Z17handleLinkBusMsgsv+0x116>
    3cc8:	64 c0       	rjmp	.+200    	; 0x3d92 <_Z17handleLinkBusMsgsv+0x1de>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    3cca:	c6 01       	movw	r24, r12
    3ccc:	47 96       	adiw	r24, 0x17	; 23
    3cce:	0e 94 4e 32 	call	0x649c	; 0x649c <atoi>
    3cd2:	99 23       	and	r25, r25
    3cd4:	14 f4       	brge	.+4      	; 0x3cda <_Z17handleLinkBusMsgsv+0x126>
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	86 30       	cpi	r24, 0x06	; 6
    3cdc:	91 05       	cpc	r25, r1
    3cde:	cc f1       	brlt	.+114    	; 0x3d52 <_Z17handleLinkBusMsgsv+0x19e>
    3ce0:	85 e0       	ldi	r24, 0x05	; 5
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	36 c0       	rjmp	.+108    	; 0x3d52 <_Z17handleLinkBusMsgsv+0x19e>
						}
					}
					else if(c == 'S')
    3ce6:	83 35       	cpi	r24, 0x53	; 83
    3ce8:	91 05       	cpc	r25, r1
    3cea:	79 f5       	brne	.+94     	; 0x3d4a <_Z17handleLinkBusMsgsv+0x196>
					{
						char x = 0;
						char t = lb_buff->fields[FIELD2][0];
    3cec:	f6 01       	movw	r30, r12
    3cee:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    3cf0:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    3cf2:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    3cf4:	82 34       	cpi	r24, 0x42	; 66
    3cf6:	89 f1       	breq	.+98     	; 0x3d5a <_Z17handleLinkBusMsgsv+0x1a6>
						{
							x = BEACON;
						}
						else if(t == 'F')
    3cf8:	86 34       	cpi	r24, 0x46	; 70
    3cfa:	39 f4       	brne	.+14     	; 0x3d0a <_Z17handleLinkBusMsgsv+0x156>
						{
							if((u > '0') && (u < '6'))
    3cfc:	8f ec       	ldi	r24, 0xCF	; 207
    3cfe:	89 0f       	add	r24, r25
    3d00:	85 30       	cpi	r24, 0x05	; 5
    3d02:	68 f5       	brcc	.+90     	; 0x3d5e <_Z17handleLinkBusMsgsv+0x1aa>
							{
								x = SPRINT_F1 + (u - '1');
    3d04:	8c ed       	ldi	r24, 0xDC	; 220
    3d06:	89 0f       	add	r24, r25
    3d08:	18 c0       	rjmp	.+48     	; 0x3d3a <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(t == 'S')
    3d0a:	83 35       	cpi	r24, 0x53	; 83
    3d0c:	39 f4       	brne	.+14     	; 0x3d1c <_Z17handleLinkBusMsgsv+0x168>
						{
							if((u > '0') && (u < '6'))
    3d0e:	8f ec       	ldi	r24, 0xCF	; 207
    3d10:	89 0f       	add	r24, r25
    3d12:	85 30       	cpi	r24, 0x05	; 5
    3d14:	b8 f4       	brcc	.+46     	; 0x3d44 <_Z17handleLinkBusMsgsv+0x190>
							{
								x = SPRINT_S1 + (u - '1');
    3d16:	87 ed       	ldi	r24, 0xD7	; 215
    3d18:	89 0f       	add	r24, r25
    3d1a:	0f c0       	rjmp	.+30     	; 0x3d3a <_Z17handleLinkBusMsgsv+0x186>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    3d1c:	96 34       	cpi	r25, 0x46	; 70
    3d1e:	31 f4       	brne	.+12     	; 0x3d2c <_Z17handleLinkBusMsgsv+0x178>
						{
							if((t > '0') && (t < '6'))
    3d20:	9f ec       	ldi	r25, 0xCF	; 207
    3d22:	98 0f       	add	r25, r24
    3d24:	95 30       	cpi	r25, 0x05	; 5
    3d26:	e8 f4       	brcc	.+58     	; 0x3d62 <_Z17handleLinkBusMsgsv+0x1ae>
							{
								x = SPRINT_F1 + (t - '1');
    3d28:	84 52       	subi	r24, 0x24	; 36
    3d2a:	07 c0       	rjmp	.+14     	; 0x3d3a <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(u == 'S')
    3d2c:	93 35       	cpi	r25, 0x53	; 83
    3d2e:	d9 f4       	brne	.+54     	; 0x3d66 <_Z17handleLinkBusMsgsv+0x1b2>
						{
							if((t > '0') && (t < '6'))
    3d30:	9f ec       	ldi	r25, 0xCF	; 207
    3d32:	98 0f       	add	r25, r24
    3d34:	95 30       	cpi	r25, 0x05	; 5
    3d36:	c8 f4       	brcc	.+50     	; 0x3d6a <_Z17handleLinkBusMsgsv+0x1b6>
							{
								x = SPRINT_S1 + (t - '1');
    3d38:	89 52       	subi	r24, 0x29	; 41
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
    3d3a:	99 ef       	ldi	r25, 0xF9	; 249
    3d3c:	98 0f       	add	r25, r24
    3d3e:	9b 30       	cpi	r25, 0x0B	; 11
    3d40:	10 f0       	brcs	.+4      	; 0x3d46 <_Z17handleLinkBusMsgsv+0x192>
    3d42:	63 c4       	rjmp	.+2246   	; 0x460a <_Z17handleLinkBusMsgsv+0xa56>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    3d44:	87 e0       	ldi	r24, 0x07	; 7
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
						{
							c = x;
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <_Z17handleLinkBusMsgsv+0x19e>
							c = BEACON;
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    3d4a:	c6 01       	movw	r24, r12
    3d4c:	03 96       	adiw	r24, 0x03	; 3
    3d4e:	0e 94 4e 32 	call	0x649c	; 0x649c <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    3d52:	82 31       	cpi	r24, 0x12	; 18
    3d54:	91 05       	cpc	r25, r1
    3d56:	e8 f4       	brcc	.+58     	; 0x3d92 <_Z17handleLinkBusMsgsv+0x1de>
    3d58:	09 c0       	rjmp	.+18     	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	07 c0       	rjmp	.+14     	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	05 c0       	rjmp	.+10     	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	03 c0       	rjmp	.+6      	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
					{
						Fox_t holdFox = (Fox_t)c;
    3d6c:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3d6e:	ae 01       	movw	r20, r28
    3d70:	4f 5f       	subi	r20, 0xFF	; 255
    3d72:	5f 4f       	sbci	r21, 0xFF	; 255
    3d74:	60 e1       	ldi	r22, 0x10	; 16
    3d76:	8c e6       	ldi	r24, 0x6C	; 108
    3d78:	95 e0       	ldi	r25, 0x05	; 5
    3d7a:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3d7e:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    3d82:	99 81       	ldd	r25, Y+1	; 0x01
    3d84:	98 17       	cp	r25, r24
    3d86:	29 f0       	breq	.+10     	; 0x3d92 <_Z17handleLinkBusMsgsv+0x1de>
						{
							setupForFox(&holdFox, START_NOTHING);
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3d92:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    3d96:	1f 92       	push	r1
    3d98:	8f 93       	push	r24
    3d9a:	7f 92       	push	r7
    3d9c:	6f 92       	push	r6
    3d9e:	bf 92       	push	r11
    3da0:	af 92       	push	r10
    3da2:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	c5 01       	movw	r24, r10
    3daa:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	13 c4       	rjmp	.+2086   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>

#if !SUPPORT_ONLY_80M
					case MESSAGE_SET_AM_TONE:
					{
						if(lb_buff->fields[FIELD1][0])
    3dbc:	d6 01       	movw	r26, r12
    3dbe:	13 96       	adiw	r26, 0x03	; 3
    3dc0:	8c 91       	ld	r24, X
    3dc2:	88 23       	and	r24, r24
    3dc4:	b1 f0       	breq	.+44     	; 0x3df2 <_Z17handleLinkBusMsgsv+0x23e>
						{
							uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3dc6:	c6 01       	movw	r24, r12
    3dc8:	03 96       	adiw	r24, 0x03	; 3
    3dca:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <atol>
							g_AM_audio_frequency = (AM_Tone_Freq_t)CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3dce:	70 e0       	ldi	r23, 0x00	; 0
    3dd0:	67 30       	cpi	r22, 0x07	; 7
    3dd2:	71 05       	cpc	r23, r1
    3dd4:	0c f0       	brlt	.+2      	; 0x3dd8 <_Z17handleLinkBusMsgsv+0x224>
    3dd6:	66 e0       	ldi	r22, 0x06	; 6
    3dd8:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <g_AM_audio_frequency>
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3ddc:	4d e4       	ldi	r20, 0x4D	; 77
    3dde:	55 e0       	ldi	r21, 0x05	; 5
    3de0:	61 e1       	ldi	r22, 0x11	; 17
    3de2:	8c e6       	ldi	r24, 0x6C	; 108
    3de4:	95 e0       	ldi	r25, 0x05	; 5
    3de6:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
							setAMToneFrequency(g_AM_audio_frequency);
    3dea:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_AM_audio_frequency>
    3dee:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_Z18setAMToneFrequency14AM_Tone_Freq_t>
						}

						sprintf(g_tempStr, "AM:%d\n", (uint8_t)g_AM_audio_frequency);
    3df2:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_AM_audio_frequency>
    3df6:	1f 92       	push	r1
    3df8:	8f 93       	push	r24
    3dfa:	86 ea       	ldi	r24, 0xA6	; 166
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	9f 93       	push	r25
    3e00:	8f 93       	push	r24
    3e02:	bf 92       	push	r11
    3e04:	af 92       	push	r10
    3e06:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
						lb_send_string(g_tempStr, FALSE);
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	c5 01       	movw	r24, r10
    3e0e:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
					}
					break;
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	e1 c3       	rjmp	.+1986   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
#endif  /* !SUPPORT_ONLY_80M */

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3e20:	f6 01       	movw	r30, r12
    3e22:	83 81       	ldd	r24, Z+3	; 0x03
    3e24:	88 23       	and	r24, r24
    3e26:	11 f1       	breq	.+68     	; 0x3e6c <_Z17handleLinkBusMsgsv+0x2b8>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    3e28:	80 33       	cpi	r24, 0x30	; 48
    3e2a:	21 f4       	brne	.+8      	; 0x3e34 <_Z17handleLinkBusMsgsv+0x280>
					{
						stopEventNow(PROGRAMMATIC);
    3e2c:	82 e0       	ldi	r24, 0x02	; 2
    3e2e:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z12stopEventNow19EventActionSource_t>
    3e32:	d7 c3       	rjmp	.+1966   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3e34:	81 33       	cpi	r24, 0x31	; 49
    3e36:	21 f4       	brne	.+8      	; 0x3e40 <_Z17handleLinkBusMsgsv+0x28c>
					{
						startEventNow(PROGRAMMATIC);
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	0e 94 36 19 	call	0x326c	; 0x326c <_Z13startEventNow19EventActionSource_t>
    3e3e:	d1 c3       	rjmp	.+1954   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    3e40:	82 33       	cpi	r24, 0x32	; 50
    3e42:	31 f4       	brne	.+12     	; 0x3e50 <_Z17handleLinkBusMsgsv+0x29c>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_transmissions_disabled>
						startEventUsingRTC();
    3e4a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_Z18startEventUsingRTCv>
    3e4e:	c9 c3       	rjmp	.+1938   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else if(lb_buff->fields[FIELD1][0] == '3')  /* Start the event at the programmed start time */
    3e50:	83 33       	cpi	r24, 0x33	; 51
    3e52:	31 f4       	brne	.+12     	; 0x3e60 <_Z17handleLinkBusMsgsv+0x2ac>
					{
						setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3e54:	62 e0       	ldi	r22, 0x02	; 2
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3e5e:	c1 c3       	rjmp	.+1922   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else
					{
						lb_send_string((char*)"err\n", TRUE);
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	8d ea       	ldi	r24, 0xAD	; 173
    3e64:	91 e0       	ldi	r25, 0x01	; 1
    3e66:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3e6a:	bb c3       	rjmp	.+1910   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
				}
				else
				{
					lb_send_string((char*)"err\n", TRUE);
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	8d ea       	ldi	r24, 0xAD	; 173
    3e70:	91 e0       	ldi	r25, 0x01	; 1
    3e72:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    3e76:	b5 c3       	rjmp	.+1898   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    3e78:	d6 01       	movw	r26, r12
    3e7a:	13 96       	adiw	r26, 0x03	; 3
    3e7c:	8c 91       	ld	r24, X
    3e7e:	88 23       	and	r24, r24
    3e80:	99 f1       	breq	.+102    	; 0x3ee8 <_Z17handleLinkBusMsgsv+0x334>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    3e82:	80 e2       	ldi	r24, 0x20	; 32
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	f5 01       	movw	r30, r10
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    3e8c:	b6 01       	movw	r22, r12
    3e8e:	6d 5f       	subi	r22, 0xFD	; 253
    3e90:	7f 4f       	sbci	r23, 0xFF	; 255
    3e92:	c5 01       	movw	r24, r10
    3e94:	0e 94 9b 32 	call	0x6536	; 0x6536 <strcat>

					if(lb_buff->fields[FIELD2][0])
    3e98:	d6 01       	movw	r26, r12
    3e9a:	57 96       	adiw	r26, 0x17	; 23
    3e9c:	8c 91       	ld	r24, X
    3e9e:	88 23       	and	r24, r24
    3ea0:	79 f0       	breq	.+30     	; 0x3ec0 <_Z17handleLinkBusMsgsv+0x30c>
					{
						strcat(g_tempStr, " ");
    3ea2:	f5 01       	movw	r30, r10
    3ea4:	01 90       	ld	r0, Z+
    3ea6:	00 20       	and	r0, r0
    3ea8:	e9 f7       	brne	.-6      	; 0x3ea4 <_Z17handleLinkBusMsgsv+0x2f0>
    3eaa:	31 97       	sbiw	r30, 0x01	; 1
    3eac:	80 e2       	ldi	r24, 0x20	; 32
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	91 83       	std	Z+1, r25	; 0x01
    3eb2:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    3eb4:	b6 01       	movw	r22, r12
    3eb6:	69 5e       	subi	r22, 0xE9	; 233
    3eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eba:	c5 01       	movw	r24, r10
    3ebc:	0e 94 9b 32 	call	0x6536	; 0x6536 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    3ec0:	f5 01       	movw	r30, r10
    3ec2:	01 90       	ld	r0, Z+
    3ec4:	00 20       	and	r0, r0
    3ec6:	e9 f7       	brne	.-6      	; 0x3ec2 <_Z17handleLinkBusMsgsv+0x30e>
    3ec8:	31 97       	sbiw	r30, 0x01	; 1
    3eca:	e6 5a       	subi	r30, 0xA6	; 166
    3ecc:	f4 40       	sbci	r31, 0x04	; 4
    3ece:	75 97       	sbiw	r30, 0x15	; 21
    3ed0:	58 f4       	brcc	.+22     	; 0x3ee8 <_Z17handleLinkBusMsgsv+0x334>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    3ed2:	b5 01       	movw	r22, r10
    3ed4:	85 ef       	ldi	r24, 0xF5	; 245
    3ed6:	94 e0       	ldi	r25, 0x04	; 4
    3ed8:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    3edc:	a5 01       	movw	r20, r10
    3ede:	6b e0       	ldi	r22, 0x0B	; 11
    3ee0:	8c e6       	ldi	r24, 0x6C	; 108
    3ee2:	95 e0       	ldi	r25, 0x05	; 5
    3ee4:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    3ee8:	f2 01       	movw	r30, r4
    3eea:	85 89       	ldd	r24, Z+21	; 0x15
    3eec:	88 23       	and	r24, r24
    3eee:	f1 f0       	breq	.+60     	; 0x3f2c <_Z17handleLinkBusMsgsv+0x378>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3ef0:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	85 ef       	ldi	r24, 0xF5	; 245
    3ef8:	94 e0       	ldi	r25, 0x04	; 4
    3efa:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <timeRequiredToSendStrAtWPM>
    3efe:	88 5a       	subi	r24, 0xA8	; 168
    3f00:	9d 4f       	sbci	r25, 0xFD	; 253
    3f02:	9c 01       	movw	r18, r24
    3f04:	36 95       	lsr	r19
    3f06:	27 95       	ror	r18
    3f08:	36 95       	lsr	r19
    3f0a:	27 95       	ror	r18
    3f0c:	36 95       	lsr	r19
    3f0e:	27 95       	ror	r18
    3f10:	a5 ec       	ldi	r26, 0xC5	; 197
    3f12:	b0 e2       	ldi	r27, 0x20	; 32
    3f14:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    3f18:	92 95       	swap	r25
    3f1a:	82 95       	swap	r24
    3f1c:	8f 70       	andi	r24, 0x0F	; 15
    3f1e:	89 27       	eor	r24, r25
    3f20:	9f 70       	andi	r25, 0x0F	; 15
    3f22:	89 27       	eor	r24, r25
    3f24:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <g_time_needed_for_ID+0x1>
    3f28:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    3f2c:	85 ef       	ldi	r24, 0xF5	; 245
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	82 eb       	ldi	r24, 0xB2	; 178
    3f36:	91 e0       	ldi	r25, 0x01	; 1
    3f38:	9f 93       	push	r25
    3f3a:	8f 93       	push	r24
    3f3c:	bf 92       	push	r11
    3f3e:	af 92       	push	r10
    3f40:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3f44:	61 e0       	ldi	r22, 0x01	; 1
    3f46:	c5 01       	movw	r24, r10
    3f48:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	44 c3       	rjmp	.+1672   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>


			case MESSAGE_CODE_SETTINGS:
			{
				if(lb_buff->fields[FIELD1][0] == 'S')
    3f5a:	d6 01       	movw	r26, r12
    3f5c:	13 96       	adiw	r26, 0x03	; 3
    3f5e:	8c 91       	ld	r24, X
    3f60:	13 97       	sbiw	r26, 0x03	; 3
    3f62:	83 35       	cpi	r24, 0x53	; 83
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <_Z17handleLinkBusMsgsv+0x3b4>
    3f66:	51 c0       	rjmp	.+162    	; 0x400a <_Z17handleLinkBusMsgsv+0x456>
				{
					char x = lb_buff->fields[FIELD2][0];

					if(x)
    3f68:	57 96       	adiw	r26, 0x17	; 23
    3f6a:	8c 91       	ld	r24, X
    3f6c:	88 23       	and	r24, r24
    3f6e:	d1 f1       	breq	.+116    	; 0x3fe4 <_Z17handleLinkBusMsgsv+0x430>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    3f70:	c6 01       	movw	r24, r12
    3f72:	47 96       	adiw	r24, 0x17	; 23
    3f74:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    3f78:	86 2f       	mov	r24, r22
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	85 30       	cpi	r24, 0x05	; 5
    3f7e:	91 05       	cpc	r25, r1
    3f80:	14 f4       	brge	.+4      	; 0x3f86 <_Z17handleLinkBusMsgsv+0x3d2>
    3f82:	85 e0       	ldi	r24, 0x05	; 5
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	85 31       	cpi	r24, 0x15	; 21
    3f88:	91 05       	cpc	r25, r1
    3f8a:	0c f0       	brlt	.+2      	; 0x3f8e <_Z17handleLinkBusMsgsv+0x3da>
    3f8c:	84 e1       	ldi	r24, 0x14	; 20
    3f8e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    3f92:	4f e0       	ldi	r20, 0x0F	; 15
    3f94:	51 e0       	ldi	r21, 0x01	; 1
    3f96:	6f e0       	ldi	r22, 0x0F	; 15
    3f98:	8c e6       	ldi	r24, 0x6C	; 108
    3f9a:	95 e0       	ldi	r25, 0x05	; 5
    3f9c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    3fa0:	f2 01       	movw	r30, r4
    3fa2:	85 89       	ldd	r24, Z+21	; 0x15
    3fa4:	88 23       	and	r24, r24
    3fa6:	f1 f0       	breq	.+60     	; 0x3fe4 <_Z17handleLinkBusMsgsv+0x430>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3fa8:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	85 ef       	ldi	r24, 0xF5	; 245
    3fb0:	94 e0       	ldi	r25, 0x04	; 4
    3fb2:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <timeRequiredToSendStrAtWPM>
    3fb6:	88 5a       	subi	r24, 0xA8	; 168
    3fb8:	9d 4f       	sbci	r25, 0xFD	; 253
    3fba:	9c 01       	movw	r18, r24
    3fbc:	36 95       	lsr	r19
    3fbe:	27 95       	ror	r18
    3fc0:	36 95       	lsr	r19
    3fc2:	27 95       	ror	r18
    3fc4:	36 95       	lsr	r19
    3fc6:	27 95       	ror	r18
    3fc8:	a5 ec       	ldi	r26, 0xC5	; 197
    3fca:	b0 e2       	ldi	r27, 0x20	; 32
    3fcc:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    3fd0:	92 95       	swap	r25
    3fd2:	82 95       	swap	r24
    3fd4:	8f 70       	andi	r24, 0x0F	; 15
    3fd6:	89 27       	eor	r24, r25
    3fd8:	9f 70       	andi	r25, 0x0F	; 15
    3fda:	89 27       	eor	r24, r25
    3fdc:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <g_time_needed_for_ID+0x1>
    3fe0:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <g_time_needed_for_ID>
						}
					}

					sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    3fe4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_id_codespeed>
    3fe8:	1f 92       	push	r1
    3fea:	8f 93       	push	r24
    3fec:	89 eb       	ldi	r24, 0xB9	; 185
    3fee:	91 e0       	ldi	r25, 0x01	; 1
    3ff0:	9f 93       	push	r25
    3ff2:	8f 93       	push	r24
    3ff4:	bf 92       	push	r11
    3ff6:	af 92       	push	r10
    3ff8:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	3a c0       	rjmp	.+116    	; 0x407e <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    400a:	80 35       	cpi	r24, 0x50	; 80
    400c:	81 f5       	brne	.+96     	; 0x406e <_Z17handleLinkBusMsgsv+0x4ba>
				{
					char x = lb_buff->fields[FIELD2][0];
    400e:	f6 01       	movw	r30, r12
    4010:	87 89       	ldd	r24, Z+23	; 0x17

					if(x)
    4012:	88 23       	and	r24, r24
    4014:	c9 f0       	breq	.+50     	; 0x4048 <_Z17handleLinkBusMsgsv+0x494>
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
    4016:	81 33       	cpi	r24, 0x31	; 49
    4018:	39 f0       	breq	.+14     	; 0x4028 <_Z17handleLinkBusMsgsv+0x474>
    401a:	84 35       	cpi	r24, 0x54	; 84
    401c:	39 f0       	breq	.+14     	; 0x402c <_Z17handleLinkBusMsgsv+0x478>
    401e:	91 e0       	ldi	r25, 0x01	; 1
    4020:	89 35       	cpi	r24, 0x59	; 89
    4022:	29 f0       	breq	.+10     	; 0x402e <_Z17handleLinkBusMsgsv+0x47a>
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	03 c0       	rjmp	.+6      	; 0x402e <_Z17handleLinkBusMsgsv+0x47a>
    4028:	91 e0       	ldi	r25, 0x01	; 1
    402a:	01 c0       	rjmp	.+2      	; 0x402e <_Z17handleLinkBusMsgsv+0x47a>
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <g_ptt_periodic_reset_enabled>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    4032:	4f e4       	ldi	r20, 0x4F	; 79
    4034:	55 e0       	ldi	r21, 0x05	; 5
    4036:	67 e1       	ldi	r22, 0x17	; 23
    4038:	8c e6       	ldi	r24, 0x6C	; 108
    403a:	95 e0       	ldi	r25, 0x05	; 5
    403c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    4040:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_ptt_periodic_reset_enabled>
    4044:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <g_use_ptt_periodic_reset>
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    4048:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_ptt_periodic_reset_enabled>
    404c:	1f 92       	push	r1
    404e:	8f 93       	push	r24
    4050:	85 ec       	ldi	r24, 0xC5	; 197
    4052:	91 e0       	ldi	r25, 0x01	; 1
    4054:	9f 93       	push	r25
    4056:	8f 93       	push	r24
    4058:	bf 92       	push	r11
    405a:	af 92       	push	r10
    405c:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	0f 90       	pop	r0
    4066:	0f 90       	pop	r0
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	08 c0       	rjmp	.+16     	; 0x407e <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else
				{
					sprintf(g_tempStr, "err\n");
    406e:	85 e0       	ldi	r24, 0x05	; 5
    4070:	ed ea       	ldi	r30, 0xAD	; 173
    4072:	f1 e0       	ldi	r31, 0x01	; 1
    4074:	d5 01       	movw	r26, r10
    4076:	01 90       	ld	r0, Z+
    4078:	0d 92       	st	X+, r0
    407a:	8a 95       	dec	r24
    407c:	e1 f7       	brne	.-8      	; 0x4076 <_Z17handleLinkBusMsgsv+0x4c2>
				}

				lb_send_string(g_tempStr, FALSE);
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	c5 01       	movw	r24, r10
    4082:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    4086:	ad c2       	rjmp	.+1370   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    4088:	f6 01       	movw	r30, r12
    408a:	83 81       	ldd	r24, Z+3	; 0x03
    408c:	88 23       	and	r24, r24
    408e:	d1 f0       	breq	.+52     	; 0x40c4 <_Z17handleLinkBusMsgsv+0x510>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    4090:	48 e0       	ldi	r20, 0x08	; 8
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	b6 01       	movw	r22, r12
    4096:	6d 5f       	subi	r22, 0xFD	; 253
    4098:	7f 4f       	sbci	r23, 0xFF	; 255
    409a:	c5 01       	movw	r24, r10
    409c:	0e 94 ad 32 	call	0x655a	; 0x655a <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    40a0:	d5 01       	movw	r26, r10
    40a2:	18 96       	adiw	r26, 0x08	; 8
    40a4:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    40a6:	c5 01       	movw	r24, r10
    40a8:	0e 94 28 19 	call	0x3250	; 0x3250 <_Z11only_digitsPc>
    40ac:	88 23       	and	r24, r24
    40ae:	51 f0       	breq	.+20     	; 0x40c4 <_Z17handleLinkBusMsgsv+0x510>
    40b0:	f5 01       	movw	r30, r10
    40b2:	01 90       	ld	r0, Z+
    40b4:	00 20       	and	r0, r0
    40b6:	e9 f7       	brne	.-6      	; 0x40b2 <_Z17handleLinkBusMsgsv+0x4fe>
    40b8:	31 97       	sbiw	r30, 0x01	; 1
    40ba:	e6 5a       	subi	r30, 0xA6	; 166
    40bc:	f4 40       	sbci	r31, 0x04	; 4
    40be:	34 97       	sbiw	r30, 0x04	; 4
    40c0:	08 f0       	brcs	.+2      	; 0x40c4 <_Z17handleLinkBusMsgsv+0x510>
    40c2:	a5 c2       	rjmp	.+1354   	; 0x460e <_Z17handleLinkBusMsgsv+0xa5a>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    40c4:	82 e1       	ldi	r24, 0x12	; 18
    40c6:	95 e0       	ldi	r25, 0x05	; 5
    40c8:	9f 93       	push	r25
    40ca:	8f 93       	push	r24
    40cc:	8d ec       	ldi	r24, 0xCD	; 205
    40ce:	91 e0       	ldi	r25, 0x01	; 1
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	bf 92       	push	r11
    40d6:	af 92       	push	r10
    40d8:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	c5 01       	movw	r24, r10
    40e0:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	0f 90       	pop	r0
    40ee:	0f 90       	pop	r0
    40f0:	78 c2       	rjmp	.+1264   	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    40f2:	f6 01       	movw	r30, r12
    40f4:	83 81       	ldd	r24, Z+3	; 0x03
    40f6:	84 35       	cpi	r24, 0x54	; 84
    40f8:	09 f0       	breq	.+2      	; 0x40fc <_Z17handleLinkBusMsgsv+0x548>
    40fa:	83 c0       	rjmp	.+262    	; 0x4202 <_Z17handleLinkBusMsgsv+0x64e>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    40fc:	4c e0       	ldi	r20, 0x0C	; 12
    40fe:	50 e0       	ldi	r21, 0x00	; 0
    4100:	b6 01       	movw	r22, r12
    4102:	69 5e       	subi	r22, 0xE9	; 233
    4104:	7f 4f       	sbci	r23, 0xFF	; 255
    4106:	c5 01       	movw	r24, r10
    4108:	0e 94 ad 32 	call	0x655a	; 0x655a <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    410c:	d5 01       	movw	r26, r10
    410e:	1c 96       	adiw	r26, 0x0c	; 12
    4110:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    4112:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_utc_offset>
    4116:	41 95       	neg	r20
    4118:	69 e5       	ldi	r22, 0x59	; 89
    411a:	75 e0       	ldi	r23, 0x05	; 5
    411c:	c5 01       	movw	r24, r10
    411e:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z18validateTimeStringPcPma>
    4122:	69 87       	std	Y+9, r22	; 0x09
    4124:	7a 87       	std	Y+10, r23	; 0x0a
    4126:	8b 87       	std	Y+11, r24	; 0x0b
    4128:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    412a:	67 2b       	or	r22, r23
    412c:	68 2b       	or	r22, r24
    412e:	69 2b       	or	r22, r25
    4130:	71 f1       	breq	.+92     	; 0x418e <_Z17handleLinkBusMsgsv+0x5da>
					{
						#if INCLUDE_RV3028_SUPPORT
							RTC_set_epoch(t);
						#else
							RTC_set_datetime(g_tempStr);
    4132:	c5 01       	movw	r24, r10
    4134:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z16RTC_set_datetimePc>
						#endif

						g_current_epoch = t;
    4138:	89 85       	ldd	r24, Y+9	; 0x09
    413a:	9a 85       	ldd	r25, Y+10	; 0x0a
    413c:	ab 85       	ldd	r26, Y+11	; 0x0b
    413e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4140:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_current_epoch>
    4144:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_current_epoch+0x1>
    4148:	a0 93 5b 05 	sts	0x055B, r26	; 0x80055b <g_current_epoch+0x2>
    414c:	b0 93 5c 05 	sts	0x055C, r27	; 0x80055c <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    4150:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    4154:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    4158:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    415c:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    4160:	bf 93       	push	r27
    4162:	af 93       	push	r26
    4164:	9f 93       	push	r25
    4166:	8f 93       	push	r24
    4168:	85 ed       	ldi	r24, 0xD5	; 213
    416a:	91 e0       	ldi	r25, 0x01	; 1
    416c:	9f 93       	push	r25
    416e:	8f 93       	push	r24
    4170:	bf 92       	push	r11
    4172:	af 92       	push	r10
    4174:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	4d c2       	rjmp	.+1178   	; 0x4628 <_Z17handleLinkBusMsgsv+0xa74>
					}
					else
					{
						g_current_epoch = RTC_get_epoch();
    418e:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z13RTC_get_epochv>
    4192:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <g_current_epoch>
    4196:	70 93 5a 05 	sts	0x055A, r23	; 0x80055a <g_current_epoch+0x1>
    419a:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_current_epoch+0x2>
    419e:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_current_epoch+0x3>
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    41a2:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <g_event_start_epoch>
    41a6:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    41aa:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    41ae:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    41b2:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_current_epoch>
    41b6:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_current_epoch+0x1>
    41ba:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch+0x2>
    41be:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x3>
    41c2:	e1 2c       	mov	r14, r1
    41c4:	f1 2c       	mov	r15, r1
    41c6:	09 e7       	ldi	r16, 0x79	; 121
    41c8:	11 e0       	ldi	r17, 0x01	; 1
    41ca:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Epoch:%lu\n", g_current_epoch);
    41ce:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    41d2:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    41d6:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    41da:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    41de:	bf 93       	push	r27
    41e0:	af 93       	push	r26
    41e2:	9f 93       	push	r25
    41e4:	8f 93       	push	r24
    41e6:	8f ed       	ldi	r24, 0xDF	; 223
    41e8:	91 e0       	ldi	r25, 0x01	; 1
    41ea:	9f 93       	push	r25
    41ec:	8f 93       	push	r24
    41ee:	bf 92       	push	r11
    41f0:	af 92       	push	r10
    41f2:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	cd bf       	out	0x3d, r28	; 61
    4200:	13 c2       	rjmp	.+1062   	; 0x4628 <_Z17handleLinkBusMsgsv+0xa74>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    4202:	83 35       	cpi	r24, 0x53	; 83
    4204:	09 f0       	breq	.+2      	; 0x4208 <_Z17handleLinkBusMsgsv+0x654>
    4206:	96 c0       	rjmp	.+300    	; 0x4334 <_Z17handleLinkBusMsgsv+0x780>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    4208:	b6 01       	movw	r22, r12
    420a:	69 5e       	subi	r22, 0xE9	; 233
    420c:	7f 4f       	sbci	r23, 0xFF	; 255
    420e:	c5 01       	movw	r24, r10
    4210:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    4214:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_utc_offset>
    4218:	41 95       	neg	r20
    421a:	65 e5       	ldi	r22, 0x55	; 85
    421c:	75 e0       	ldi	r23, 0x05	; 5
    421e:	c5 01       	movw	r24, r10
    4220:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z18validateTimeStringPcPma>

					if(s)
    4224:	61 15       	cp	r22, r1
    4226:	71 05       	cpc	r23, r1
    4228:	81 05       	cpc	r24, r1
    422a:	91 05       	cpc	r25, r1
    422c:	09 f4       	brne	.+2      	; 0x4230 <_Z17handleLinkBusMsgsv+0x67c>
    422e:	68 c0       	rjmp	.+208    	; 0x4300 <_Z17handleLinkBusMsgsv+0x74c>
					{
						g_event_start_epoch = s;
    4230:	60 93 55 05 	sts	0x0555, r22	; 0x800555 <g_event_start_epoch>
    4234:	70 93 56 05 	sts	0x0556, r23	; 0x800556 <g_event_start_epoch+0x1>
    4238:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <g_event_start_epoch+0x2>
    423c:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    4240:	45 e5       	ldi	r20, 0x55	; 85
    4242:	55 e0       	ldi	r21, 0x05	; 5
    4244:	64 e1       	ldi	r22, 0x14	; 20
    4246:	8c e6       	ldi	r24, 0x6C	; 108
    4248:	95 e0       	ldi	r25, 0x05	; 5
    424a:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    424e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    4252:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    4256:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    425a:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	9e 83       	std	Y+6, r25	; 0x06
    4262:	af 83       	std	Y+7, r26	; 0x07
    4264:	b8 87       	std	Y+8, r27	; 0x08
    4266:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    426a:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    426e:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    4272:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    4276:	80 58       	subi	r24, 0x80	; 128
    4278:	9e 4a       	sbci	r25, 0xAE	; 174
    427a:	ae 4f       	sbci	r26, 0xFE	; 254
    427c:	bf 4f       	sbci	r27, 0xFF	; 255
    427e:	89 83       	std	Y+1, r24	; 0x01
    4280:	9a 83       	std	Y+2, r25	; 0x02
    4282:	ab 83       	std	Y+3, r26	; 0x03
    4284:	bc 83       	std	Y+4, r27	; 0x04
    4286:	4d 81       	ldd	r20, Y+5	; 0x05
    4288:	5e 81       	ldd	r21, Y+6	; 0x06
    428a:	6f 81       	ldd	r22, Y+7	; 0x07
    428c:	78 85       	ldd	r23, Y+8	; 0x08
    428e:	48 17       	cp	r20, r24
    4290:	59 07       	cpc	r21, r25
    4292:	6a 07       	cpc	r22, r26
    4294:	7b 07       	cpc	r23, r27
    4296:	28 f4       	brcc	.+10     	; 0x42a2 <_Z17handleLinkBusMsgsv+0x6ee>
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	9a 81       	ldd	r25, Y+2	; 0x02
    429c:	ab 81       	ldd	r26, Y+3	; 0x03
    429e:	bc 81       	ldd	r27, Y+4	; 0x04
    42a0:	04 c0       	rjmp	.+8      	; 0x42aa <_Z17handleLinkBusMsgsv+0x6f6>
    42a2:	8d 81       	ldd	r24, Y+5	; 0x05
    42a4:	9e 81       	ldd	r25, Y+6	; 0x06
    42a6:	af 81       	ldd	r26, Y+7	; 0x07
    42a8:	b8 85       	ldd	r27, Y+8	; 0x08
    42aa:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_event_finish_epoch>
    42ae:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_event_finish_epoch+0x1>
    42b2:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <g_event_finish_epoch+0x2>
    42b6:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    42ba:	41 e5       	ldi	r20, 0x51	; 81
    42bc:	55 e0       	ldi	r21, 0x05	; 5
    42be:	65 e1       	ldi	r22, 0x15	; 21
    42c0:	8c e6       	ldi	r24, 0x6C	; 108
    42c2:	95 e0       	ldi	r25, 0x05	; 5
    42c4:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    42c8:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    42cc:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    42d0:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    42d4:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    42d8:	bf 93       	push	r27
    42da:	af 93       	push	r26
    42dc:	9f 93       	push	r25
    42de:	8f 93       	push	r24
    42e0:	8a ee       	ldi	r24, 0xEA	; 234
    42e2:	91 e0       	ldi	r25, 0x01	; 1
    42e4:	9f 93       	push	r25
    42e6:	8f 93       	push	r24
    42e8:	bf 92       	push	r11
    42ea:	af 92       	push	r10
    42ec:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
						startEventUsingRTC();
    42f0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_Z18startEventUsingRTCv>
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	94 c1       	rjmp	.+808    	; 0x4628 <_Z17handleLinkBusMsgsv+0xa74>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    4300:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_event_start_epoch>
    4304:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    4308:	a0 91 57 05 	lds	r26, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    430c:	b0 91 58 05 	lds	r27, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    4310:	bf 93       	push	r27
    4312:	af 93       	push	r26
    4314:	9f 93       	push	r25
    4316:	8f 93       	push	r24
    4318:	8a ee       	ldi	r24, 0xEA	; 234
    431a:	91 e0       	ldi	r25, 0x01	; 1
    431c:	9f 93       	push	r25
    431e:	8f 93       	push	r24
    4320:	bf 92       	push	r11
    4322:	af 92       	push	r10
    4324:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	7a c1       	rjmp	.+756    	; 0x4628 <_Z17handleLinkBusMsgsv+0xa74>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    4334:	86 34       	cpi	r24, 0x46	; 70
    4336:	09 f0       	breq	.+2      	; 0x433a <_Z17handleLinkBusMsgsv+0x786>
    4338:	5c c0       	rjmp	.+184    	; 0x43f2 <_Z17handleLinkBusMsgsv+0x83e>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    433a:	b6 01       	movw	r22, r12
    433c:	69 5e       	subi	r22, 0xE9	; 233
    433e:	7f 4f       	sbci	r23, 0xFF	; 255
    4340:	c5 01       	movw	r24, r10
    4342:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4346:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_utc_offset>
    434a:	41 95       	neg	r20
    434c:	61 e5       	ldi	r22, 0x51	; 81
    434e:	75 e0       	ldi	r23, 0x05	; 5
    4350:	c5 01       	movw	r24, r10
    4352:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z18validateTimeStringPcPma>

					if(f)
    4356:	61 15       	cp	r22, r1
    4358:	71 05       	cpc	r23, r1
    435a:	81 05       	cpc	r24, r1
    435c:	91 05       	cpc	r25, r1
    435e:	79 f1       	breq	.+94     	; 0x43be <_Z17handleLinkBusMsgsv+0x80a>
					{
						g_event_finish_epoch = f;
    4360:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_event_finish_epoch>
    4364:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_event_finish_epoch+0x1>
    4368:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_event_finish_epoch+0x2>
    436c:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4370:	41 e5       	ldi	r20, 0x51	; 81
    4372:	55 e0       	ldi	r21, 0x05	; 5
    4374:	65 e1       	ldi	r22, 0x15	; 21
    4376:	8c e6       	ldi	r24, 0x6C	; 108
    4378:	95 e0       	ldi	r25, 0x05	; 5
    437a:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    437e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    4382:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    4386:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    438a:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    438e:	bf 93       	push	r27
    4390:	af 93       	push	r26
    4392:	9f 93       	push	r25
    4394:	8f 93       	push	r24
    4396:	85 ef       	ldi	r24, 0xF5	; 245
    4398:	91 e0       	ldi	r25, 0x01	; 1
    439a:	9f 93       	push	r25
    439c:	8f 93       	push	r24
    439e:	bf 92       	push	r11
    43a0:	af 92       	push	r10
    43a2:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
						lb_send_string(g_tempStr, TRUE);
    43a6:	61 e0       	ldi	r22, 0x01	; 1
    43a8:	c5 01       	movw	r24, r10
    43aa:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
						startEventUsingRTC();
    43ae:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_Z18startEventUsingRTCv>
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	12 c1       	rjmp	.+548    	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    43be:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_event_finish_epoch>
    43c2:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    43c6:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    43ca:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    43ce:	bf 93       	push	r27
    43d0:	af 93       	push	r26
    43d2:	9f 93       	push	r25
    43d4:	8f 93       	push	r24
    43d6:	85 ef       	ldi	r24, 0xF5	; 245
    43d8:	91 e0       	ldi	r25, 0x01	; 1
    43da:	9f 93       	push	r25
    43dc:	8f 93       	push	r24
    43de:	bf 92       	push	r11
    43e0:	af 92       	push	r10
    43e2:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
    43f0:	1b c1       	rjmp	.+566    	; 0x4628 <_Z17handleLinkBusMsgsv+0xa74>
					doprint = true;
				}
#endif // #if INCLUDE_RV3028_SUPPORT
				else
				{
					ConfigurationState_t cfg = clockConfigurationCheck();
    43f2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z23clockConfigurationCheckv>

					if((cfg != WAITING_FOR_START) && (cfg != EVENT_IN_PROGRESS))
    43f6:	8b 7f       	andi	r24, 0xFB	; 251
    43f8:	81 30       	cpi	r24, 0x01	; 1
    43fa:	19 f0       	breq	.+6      	; 0x4402 <_Z17handleLinkBusMsgsv+0x84e>
					{
						reportConfigErrors();
    43fc:	0e 94 16 1a 	call	0x342c	; 0x342c <_Z18reportConfigErrorsv>
    4400:	f0 c0       	rjmp	.+480    	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    4402:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <g_event_start_epoch>
    4406:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    440a:	40 91 57 05 	lds	r20, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    440e:	50 91 58 05 	lds	r21, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    4412:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_current_epoch>
    4416:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_current_epoch+0x1>
    441a:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch+0x2>
    441e:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x3>
    4422:	0f 2e       	mov	r0, r31
    4424:	fc e6       	ldi	r31, 0x6C	; 108
    4426:	ef 2e       	mov	r14, r31
    4428:	f1 e0       	ldi	r31, 0x01	; 1
    442a:	ff 2e       	mov	r15, r31
    442c:	f0 2d       	mov	r31, r0
    442e:	09 e7       	ldi	r16, 0x79	; 121
    4430:	11 e0       	ldi	r17, 0x01	; 1
    4432:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    4436:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_event_finish_epoch>
    443a:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    443e:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    4442:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    4446:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <g_event_start_epoch>
    444a:	70 91 56 05 	lds	r23, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    444e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    4452:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    4456:	e1 2c       	mov	r14, r1
    4458:	f1 2c       	mov	r15, r1
    445a:	06 e9       	ldi	r16, 0x96	; 150
    445c:	11 e0       	ldi	r17, 0x01	; 1
    445e:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    4462:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <g_event_start_epoch>
    4466:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <g_event_start_epoch+0x1>
    446a:	60 91 57 05 	lds	r22, 0x0557	; 0x800557 <g_event_start_epoch+0x2>
    446e:	70 91 58 05 	lds	r23, 0x0558	; 0x800558 <g_event_start_epoch+0x3>
    4472:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_current_epoch>
    4476:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_current_epoch+0x1>
    447a:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_current_epoch+0x2>
    447e:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_current_epoch+0x3>
    4482:	48 17       	cp	r20, r24
    4484:	59 07       	cpc	r21, r25
    4486:	6a 07       	cpc	r22, r26
    4488:	7b 07       	cpc	r23, r27
    448a:	08 f0       	brcs	.+2      	; 0x448e <_Z17handleLinkBusMsgsv+0x8da>
    448c:	aa c0       	rjmp	.+340    	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    448e:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_event_finish_epoch>
    4492:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_event_finish_epoch+0x1>
    4496:	40 91 53 05 	lds	r20, 0x0553	; 0x800553 <g_event_finish_epoch+0x2>
    449a:	50 91 54 05 	lds	r21, 0x0554	; 0x800554 <g_event_finish_epoch+0x3>
    449e:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_current_epoch>
    44a2:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_current_epoch+0x1>
    44a6:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_current_epoch+0x2>
    44aa:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_current_epoch+0x3>
    44ae:	05 e8       	ldi	r16, 0x85	; 133
    44b0:	11 e0       	ldi	r17, 0x01	; 1
    44b2:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z14reportTimeTillmmPKcS0_>
    44b6:	95 c0       	rjmp	.+298    	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    44b8:	d6 01       	movw	r26, r12
    44ba:	13 96       	adiw	r26, 0x03	; 3
    44bc:	8c 91       	ld	r24, X
    44be:	13 97       	sbiw	r26, 0x03	; 3
    44c0:	83 34       	cpi	r24, 0x43	; 67
    44c2:	91 f5       	brne	.+100    	; 0x4528 <_Z17handleLinkBusMsgsv+0x974>
				{
					if(lb_buff->fields[FIELD2][0])
    44c4:	57 96       	adiw	r26, 0x17	; 23
    44c6:	8c 91       	ld	r24, X
    44c8:	88 23       	and	r24, r24
    44ca:	a9 f0       	breq	.+42     	; 0x44f6 <_Z17handleLinkBusMsgsv+0x942>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    44cc:	c6 01       	movw	r24, r12
    44ce:	47 96       	adiw	r24, 0x17	; 23
    44d0:	0e 94 4e 32 	call	0x649c	; 0x649c <atoi>

						if((v > -2000) && (v < 2000))
    44d4:	9c 01       	movw	r18, r24
    44d6:	21 53       	subi	r18, 0x31	; 49
    44d8:	38 4f       	sbci	r19, 0xF8	; 248
    44da:	2f 39       	cpi	r18, 0x9F	; 159
    44dc:	3f 40       	sbci	r19, 0x0F	; 15
    44de:	58 f4       	brcc	.+22     	; 0x44f6 <_Z17handleLinkBusMsgsv+0x942>
						{
							g_atmega_temp_calibration = v;
    44e0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_atmega_temp_calibration+0x1>
    44e4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    44e8:	4c e0       	ldi	r20, 0x0C	; 12
    44ea:	51 e0       	ldi	r21, 0x01	; 1
    44ec:	62 e1       	ldi	r22, 0x12	; 18
    44ee:	8c e6       	ldi	r24, 0x6C	; 108
    44f0:	95 e0       	ldi	r25, 0x05	; 5
    44f2:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    44f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_atmega_temp_calibration>
    44fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_atmega_temp_calibration+0x1>
    44fe:	9f 93       	push	r25
    4500:	8f 93       	push	r24
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	92 e0       	ldi	r25, 0x02	; 2
    4506:	9f 93       	push	r25
    4508:	8f 93       	push	r24
    450a:	bf 92       	push	r11
    450c:	af 92       	push	r10
    450e:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
					lb_send_string(g_tempStr, TRUE);
    4512:	61 e0       	ldi	r22, 0x01	; 1
    4514:	c5 01       	movw	r24, r10
    4516:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	0f c0       	rjmp	.+30     	; 0x4546 <_Z17handleLinkBusMsgsv+0x992>
				}
#if !INIT_EEPROM_ONLY && !SUPPORT_ONLY_80M
					else if(lb_buff->fields[FIELD1][0] == 'Z')
    4528:	8a 35       	cpi	r24, 0x5A	; 90
    452a:	69 f4       	brne	.+26     	; 0x4546 <_Z17handleLinkBusMsgsv+0x992>
					{
						cli();
    452c:	f8 94       	cli
						g_AM_enabled = FALSE;
    452e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_AM_enabled>
						TIMSK0 |= (1 << OCIE0A);    /* Timer/Counter0 Output Compare Match A Interrupt Enable (CW Tone Output for FM) */
    4532:	ee e6       	ldi	r30, 0x6E	; 110
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	80 81       	ld	r24, Z
    4538:	82 60       	ori	r24, 0x02	; 2
    453a:	80 83       	st	Z, r24
						setAtten(0);
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
						sei();
    4544:	78 94       	sei
					}
#endif /* INIT_EEPROM_ONLY */

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    4546:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <g_temperature>
    454a:	28 2f       	mov	r18, r24
    454c:	08 2e       	mov	r0, r24
    454e:	00 0c       	add	r0, r0
    4550:	33 0b       	sbc	r19, r19
    4552:	3f 93       	push	r19
    4554:	8f 93       	push	r24
    4556:	9f 92       	push	r9
    4558:	8f 92       	push	r8
    455a:	bf 92       	push	r11
    455c:	af 92       	push	r10
    455e:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4562:	61 e0       	ldi	r22, 0x01	; 1
    4564:	c5 01       	movw	r24, r10
    4566:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    456a:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <g_voltage>
    456e:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <g_voltage+0x1>
    4572:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <g_voltage>
    4576:	f0 91 10 05 	lds	r31, 0x0510	; 0x800510 <g_voltage+0x1>
    457a:	9a 01       	movw	r18, r20
    457c:	36 95       	lsr	r19
    457e:	27 95       	ror	r18
    4580:	36 95       	lsr	r19
    4582:	27 95       	ror	r18
    4584:	ab e7       	ldi	r26, 0x7B	; 123
    4586:	b4 e1       	ldi	r27, 0x14	; 20
    4588:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    458c:	96 95       	lsr	r25
    458e:	87 95       	ror	r24
    4590:	64 e6       	ldi	r22, 0x64	; 100
    4592:	68 9f       	mul	r22, r24
    4594:	90 01       	movw	r18, r0
    4596:	69 9f       	mul	r22, r25
    4598:	30 0d       	add	r19, r0
    459a:	11 24       	eor	r1, r1
    459c:	42 1b       	sub	r20, r18
    459e:	53 0b       	sbc	r21, r19
    45a0:	5f 93       	push	r21
    45a2:	4f 93       	push	r20
    45a4:	9f 01       	movw	r18, r30
    45a6:	36 95       	lsr	r19
    45a8:	27 95       	ror	r18
    45aa:	36 95       	lsr	r19
    45ac:	27 95       	ror	r18
    45ae:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    45b2:	96 95       	lsr	r25
    45b4:	87 95       	ror	r24
    45b6:	9f 93       	push	r25
    45b8:	8f 93       	push	r24
    45ba:	3f 92       	push	r3
    45bc:	2f 92       	push	r2
    45be:	bf 92       	push	r11
    45c0:	af 92       	push	r10
    45c2:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    45c6:	61 e0       	ldi	r22, 0x01	; 1
    45c8:	c5 01       	movw	r24, r10
    45ca:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
			}
			break;
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	04 c0       	rjmp	.+8      	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>

			default:
			{
				ee_mgr.send_Help();
    45da:	8c e6       	ldi	r24, 0x6C	; 108
    45dc:	95 e0       	ldi	r25, 0x05	; 5
    45de:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    45e2:	d6 01       	movw	r26, r12
    45e4:	12 96       	adiw	r26, 0x02	; 2
    45e6:	1c 92       	st	X, r1
    45e8:	1e 92       	st	-X, r1
    45ea:	11 97       	sbiw	r26, 0x01	; 1
		lb_send_NewPrompt();
    45ec:	0e 94 a7 0c 	call	0x194e	; 0x194e <lb_send_NewPrompt>

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    45f0:	8c e2       	ldi	r24, 0x2C	; 44
    45f2:	91 e0       	ldi	r25, 0x01	; 1
    45f4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    45f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    45fc:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;

	while((lb_buff = nextFullRxBuffer()))
    4600:	11 cb       	rjmp	.-2526   	; 0x3c24 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	b3 cb       	rjmp	.-2202   	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    4606:	86 e0       	ldi	r24, 0x06	; 6
    4608:	b1 cb       	rjmp	.-2206   	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
						{
							c = x;
						}
						else
						{
							c = BEACON;
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	af cb       	rjmp	.-2210   	; 0x3d6c <_Z17handleLinkBusMsgsv+0x1b8>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    460e:	b5 01       	movw	r22, r10
    4610:	82 e1       	ldi	r24, 0x12	; 18
    4612:	95 e0       	ldi	r25, 0x05	; 5
    4614:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    4618:	42 e1       	ldi	r20, 0x12	; 18
    461a:	55 e0       	ldi	r21, 0x05	; 5
    461c:	6e e0       	ldi	r22, 0x0E	; 14
    461e:	8c e6       	ldi	r24, 0x6C	; 108
    4620:	95 e0       	ldi	r25, 0x05	; 5
    4622:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    4626:	4e cd       	rjmp	.-1380   	; 0x40c4 <_Z17handleLinkBusMsgsv+0x510>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    4628:	61 e0       	ldi	r22, 0x01	; 1
    462a:	c5 01       	movw	r24, r10
    462c:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    4630:	d8 cf       	rjmp	.-80     	; 0x45e2 <_Z17handleLinkBusMsgsv+0xa2e>
		lb_send_NewPrompt();

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
	}
}
    4632:	2c 96       	adiw	r28, 0x0c	; 12
    4634:	0f b6       	in	r0, 0x3f	; 63
    4636:	f8 94       	cli
    4638:	de bf       	out	0x3e, r29	; 62
    463a:	0f be       	out	0x3f, r0	; 63
    463c:	cd bf       	out	0x3d, r28	; 61
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	1f 91       	pop	r17
    4644:	0f 91       	pop	r16
    4646:	ff 90       	pop	r15
    4648:	ef 90       	pop	r14
    464a:	df 90       	pop	r13
    464c:	cf 90       	pop	r12
    464e:	bf 90       	pop	r11
    4650:	af 90       	pop	r10
    4652:	9f 90       	pop	r9
    4654:	8f 90       	pop	r8
    4656:	7f 90       	pop	r7
    4658:	6f 90       	pop	r6
    465a:	5f 90       	pop	r5
    465c:	4f 90       	pop	r4
    465e:	3f 90       	pop	r3
    4660:	2f 90       	pop	r2
    4662:	08 95       	ret

00004664 <_Z11value2Morsec>:

char value2Morse(char value)
{
	char morse = ' ';

	if(value == 0x7F)
    4664:	8f 37       	cpi	r24, 0x7F	; 127
    4666:	91 f0       	breq	.+36     	; 0x468c <_Z11value2Morsec+0x28>
	{
		return( 39);    /* Return the maximum value that will be accepted + 1 */

	}

	if((value >= 1) && (value <= 26))
    4668:	9f ef       	ldi	r25, 0xFF	; 255
    466a:	98 0f       	add	r25, r24
    466c:	9a 31       	cpi	r25, 0x1A	; 26
    466e:	10 f4       	brcc	.+4      	; 0x4674 <_Z11value2Morsec+0x10>
	{
		morse = 'A' + value - 1;
    4670:	80 5c       	subi	r24, 0xC0	; 192
    4672:	08 95       	ret
	}
	else if((value >= 29) && (value <= 38))
    4674:	93 ee       	ldi	r25, 0xE3	; 227
    4676:	98 0f       	add	r25, r24
    4678:	9a 30       	cpi	r25, 0x0A	; 10
    467a:	10 f4       	brcc	.+4      	; 0x4680 <_Z11value2Morsec+0x1c>
	{
		morse = '0' + value - 29;
    467c:	8d 5e       	subi	r24, 0xED	; 237
    467e:	08 95       	ret
	}
	else if(value == 27)
    4680:	8b 31       	cpi	r24, 0x1B	; 27
    4682:	31 f0       	breq	.+12     	; 0x4690 <_Z11value2Morsec+0x2c>
	{
		morse = '<';
	}
	else if(value == 28)
    4684:	8c 31       	cpi	r24, 0x1C	; 28
    4686:	31 f4       	brne	.+12     	; 0x4694 <_Z11value2Morsec+0x30>
	{
		morse = '/';
    4688:	8f e2       	ldi	r24, 0x2F	; 47
    468a:	08 95       	ret
{
	char morse = ' ';

	if(value == 0x7F)
	{
		return( 39);    /* Return the maximum value that will be accepted + 1 */
    468c:	87 e2       	ldi	r24, 0x27	; 39
    468e:	08 95       	ret
	{
		morse = '0' + value - 29;
	}
	else if(value == 27)
	{
		morse = '<';
    4690:	8c e3       	ldi	r24, 0x3C	; 60
    4692:	08 95       	ret
}


char value2Morse(char value)
{
	char morse = ' ';
    4694:	80 e2       	ldi	r24, 0x20	; 32
	{
		morse = '/';
	}

	return( morse);
}
    4696:	08 95       	ret

00004698 <_Z20processDTMFdetection10DTMF_key_t>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	BOOL processDTMFdetection(DTMF_key_t key)
	{
    4698:	cf 92       	push	r12
    469a:	df 92       	push	r13
    469c:	ef 92       	push	r14
    469e:	ff 92       	push	r15
    46a0:	0f 93       	push	r16
    46a2:	1f 93       	push	r17
    46a4:	cf 93       	push	r28
    46a6:	df 93       	push	r29
    46a8:	1f 92       	push	r1
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;

		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    46ae:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>

		if(key == 'D')
    46b2:	84 34       	cpi	r24, 0x44	; 68
    46b4:	31 f4       	brne	.+12     	; 0x46c2 <_Z20processDTMFdetection10DTMF_key_t+0x2a>
		{
			g_DTMF_unlocked = FALSE;
    46b6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    46ba:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
			return(entryError);
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	29 c4       	rjmp	.+2130   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
		}

		if(key == NO_KEY)
    46c2:	81 11       	cpse	r24, r1
    46c4:	21 c0       	rjmp	.+66     	; 0x4708 <_Z20processDTMFdetection10DTMF_key_t+0x70>
		{
			if(!g_DTMF_sentence_in_progress_ticks)
    46c6:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    46ca:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    46ce:	89 2b       	or	r24, r25
    46d0:	89 f4       	brne	.+34     	; 0x46f4 <_Z20processDTMFdetection10DTMF_key_t+0x5c>
			{
				if((last_in_progress_ticks) && (state != STATE_SHUTDOWN))
    46d2:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks>
    46d6:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks+0x1>
    46da:	89 2b       	or	r24, r25
    46dc:	39 f0       	breq	.+14     	; 0x46ec <_Z20processDTMFdetection10DTMF_key_t+0x54>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    46e4:	91 11       	cpse	r25, r1
    46e6:	03 c0       	rjmp	.+6      	; 0x46ee <_Z20processDTMFdetection10DTMF_key_t+0x56>
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	01 c0       	rjmp	.+2      	; 0x46ee <_Z20processDTMFdetection10DTMF_key_t+0x56>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
				if((last_in_progress_ticks) && (state != STATE_SHUTDOWN))
				{
					entryError = TRUE;
				}

				state = STATE_SHUTDOWN;
    46ee:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <_Z20processDTMFdetection10DTMF_key_t+0x5e>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    46f4:	80 e0       	ldi	r24, 0x00	; 0
				}

				state = STATE_SHUTDOWN;
			}

			last_in_progress_ticks = g_DTMF_sentence_in_progress_ticks;
    46f6:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    46fa:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    46fe:	30 93 40 04 	sts	0x0440, r19	; 0x800440 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks+0x1>
    4702:	20 93 3f 04 	sts	0x043F, r18	; 0x80043f <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks>

			return(entryError);
    4706:	06 c4       	rjmp	.+2060   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
		}

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    4708:	2c e2       	ldi	r18, 0x2C	; 44
    470a:	31 e0       	ldi	r19, 0x01	; 1
    470c:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <g_LED_timeout_countdown+0x1>
    4710:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <g_LED_timeout_countdown>

		if(!g_DTMF_unlocked)
    4714:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_DTMF_unlocked>
    4718:	91 11       	cpse	r25, r1
    471a:	04 c0       	rjmp	.+8      	; 0x4724 <_Z20processDTMFdetection10DTMF_key_t+0x8c>
		{
			state = STATE_CHECK_PASSWORD;
    471c:	93 e1       	ldi	r25, 0x13	; 19
    471e:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4722:	49 c3       	rjmp	.+1682   	; 0x4db6 <_Z20processDTMFdetection10DTMF_key_t+0x71e>
		}
		else
		{
			if(key == '*')
    4724:	8a 32       	cpi	r24, 0x2A	; 42
    4726:	59 f4       	brne	.+22     	; 0x473e <_Z20processDTMFdetection10DTMF_key_t+0xa6>
			{
				state = STATE_SENTENCE_START;
    4728:	81 e0       	ldi	r24, 0x01	; 1
    472a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
    472e:	88 ec       	ldi	r24, 0xC8	; 200
    4730:	97 e3       	ldi	r25, 0x37	; 55
    4732:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4736:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
				return(entryError);
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	eb c3       	rjmp	.+2006   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    473e:	98 2f       	mov	r25, r24
			}

			if(key == '#')
    4740:	83 32       	cpi	r24, 0x23	; 35
    4742:	89 f4       	brne	.+34     	; 0x4766 <_Z20processDTMFdetection10DTMF_key_t+0xce>
			{
				g_DTMF_sentence_in_progress_ticks = 0;
    4744:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4748:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
			}
		}

		switch(state)
    474c:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4750:	4e 2f       	mov	r20, r30
    4752:	50 e0       	ldi	r21, 0x00	; 0
    4754:	45 31       	cpi	r20, 0x15	; 21
    4756:	51 05       	cpc	r21, r1
    4758:	08 f0       	brcs	.+2      	; 0x475c <_Z20processDTMFdetection10DTMF_key_t+0xc4>
    475a:	a4 c3       	rjmp	.+1864   	; 0x4ea4 <_Z20processDTMFdetection10DTMF_key_t+0x80c>
    475c:	fa 01       	movw	r30, r20
    475e:	ea 56       	subi	r30, 0x6A	; 106
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>

			if(key == '#')
			{
				g_DTMF_sentence_in_progress_ticks = 0;
			}
			else if(state != STATE_SHUTDOWN)
    4766:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    476a:	ee 23       	and	r30, r30
    476c:	89 f0       	breq	.+34     	; 0x4790 <_Z20processDTMFdetection10DTMF_key_t+0xf8>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
    476e:	28 ec       	ldi	r18, 0xC8	; 200
    4770:	37 e3       	ldi	r19, 0x37	; 55
    4772:	30 93 d0 04 	sts	0x04D0, r19	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4776:	20 93 cf 04 	sts	0x04CF, r18	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
			}
		}

		switch(state)
    477a:	4e 2f       	mov	r20, r30
    477c:	50 e0       	ldi	r21, 0x00	; 0
    477e:	45 31       	cpi	r20, 0x15	; 21
    4780:	51 05       	cpc	r21, r1
    4782:	08 f0       	brcs	.+2      	; 0x4786 <_Z20processDTMFdetection10DTMF_key_t+0xee>
    4784:	91 c3       	rjmp	.+1826   	; 0x4ea8 <_Z20processDTMFdetection10DTMF_key_t+0x810>
    4786:	fa 01       	movw	r30, r20
    4788:	e5 55       	subi	r30, 0x55	; 85
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>
		{
			case STATE_SHUTDOWN:
			{
				entryError = TRUE;
    4790:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
    4792:	c0 c3       	rjmp	.+1920   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    4794:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4798:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
				value = 0;
    479c:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    47a0:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
				digits = 0;
    47a4:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    47a8:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>

				if(g_DTMF_unlocked)
    47ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_DTMF_unlocked>
    47b0:	88 23       	and	r24, r24
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <_Z20processDTMFdetection10DTMF_key_t+0x11e>
    47b4:	7b c3       	rjmp	.+1782   	; 0x4eac <_Z20processDTMFdetection10DTMF_key_t+0x814>
				{
					if(key == 'A')
    47b6:	91 34       	cpi	r25, 0x41	; 65
    47b8:	29 f4       	brne	.+10     	; 0x47c4 <_Z20processDTMFdetection10DTMF_key_t+0x12c>
					{
						state = STATE_A;
    47ba:	82 e0       	ldi	r24, 0x02	; 2
    47bc:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	a8 c3       	rjmp	.+1872   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				{
					if(key == 'A')
					{
						state = STATE_A;
					}
					else if(key == 'B')
    47c4:	92 34       	cpi	r25, 0x42	; 66
    47c6:	29 f4       	brne	.+10     	; 0x47d2 <_Z20processDTMFdetection10DTMF_key_t+0x13a>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    47c8:	84 e1       	ldi	r24, 0x14	; 20
    47ca:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	a1 c3       	rjmp	.+1858   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					}
					else if(key == 'B')
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
					}
					else if(key == 'C')
    47d2:	93 34       	cpi	r25, 0x43	; 67
    47d4:	29 f4       	brne	.+10     	; 0x47e0 <_Z20processDTMFdetection10DTMF_key_t+0x148>
					{
						state = STATE_C;
    47d6:	87 e0       	ldi	r24, 0x07	; 7
    47d8:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	9a c3       	rjmp	.+1844   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
						state = STATE_C;
					}
					else
					{
						entryError = TRUE;
						g_DTMF_sentence_in_progress_ticks = 0;
    47e0:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    47e4:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
						state = STATE_SHUTDOWN;
    47e8:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					{
						state = STATE_C;
					}
					else
					{
						entryError = TRUE;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	92 c3       	rjmp	.+1828   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_A:
			{
				if(key == '0')
    47f0:	80 33       	cpi	r24, 0x30	; 48
    47f2:	29 f4       	brne	.+10     	; 0x47fe <_Z20processDTMFdetection10DTMF_key_t+0x166>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    47f4:	83 e0       	ldi	r24, 0x03	; 3
    47f6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	8b c3       	rjmp	.+1814   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			{
				if(key == '0')
				{
					state = STATE_PAUSE_TRANSMISSIONS;
				}
				else if(key == '1')
    47fe:	81 33       	cpi	r24, 0x31	; 49
    4800:	29 f4       	brne	.+10     	; 0x480c <_Z20processDTMFdetection10DTMF_key_t+0x174>
				{
					state = STATE_START_TRANSMISSIONS;
    4802:	84 e0       	ldi	r24, 0x04	; 4
    4804:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	84 c3       	rjmp	.+1800   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '1')
				{
					state = STATE_START_TRANSMISSIONS;
				}
				else if(key == '2')
    480c:	82 33       	cpi	r24, 0x32	; 50
    480e:	29 f4       	brne	.+10     	; 0x481a <_Z20processDTMFdetection10DTMF_key_t+0x182>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    4810:	85 e0       	ldi	r24, 0x05	; 5
    4812:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	7d c3       	rjmp	.+1786   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '2')
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
				}
				else if(key == '3')
    481a:	83 33       	cpi	r24, 0x33	; 51
    481c:	29 f4       	brne	.+10     	; 0x4828 <_Z20processDTMFdetection10DTMF_key_t+0x190>
				{
					state = STATE_START_TRANSMITTING_NOW;
    481e:	86 e0       	ldi	r24, 0x06	; 6
    4820:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	76 c3       	rjmp	.+1772   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '3')
				{
					state = STATE_START_TRANSMITTING_NOW;
				}
				else if((key == '8') && setPasswordEnabled)
    4828:	88 33       	cpi	r24, 0x38	; 56
    482a:	49 f4       	brne	.+18     	; 0x483e <_Z20processDTMFdetection10DTMF_key_t+0x1a6>
    482c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <_ZZ20processDTMFdetection10DTMF_key_tE18setPasswordEnabled>
    4830:	88 23       	and	r24, r24
    4832:	29 f0       	breq	.+10     	; 0x483e <_Z20processDTMFdetection10DTMF_key_t+0x1a6>
				{
					state = STATE_SET_PASSWORD;
    4834:	82 e1       	ldi	r24, 0x12	; 18
    4836:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    483a:	80 e0       	ldi	r24, 0x00	; 0
				{
					state = STATE_START_TRANSMITTING_NOW;
				}
				else if((key == '8') && setPasswordEnabled)
				{
					state = STATE_SET_PASSWORD;
    483c:	6b c3       	rjmp	.+1750   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else
				{
					entryError = TRUE;
					g_DTMF_sentence_in_progress_ticks = 0;
    483e:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4842:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
					state = STATE_SHUTDOWN;
    4846:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				{
					state = STATE_SET_PASSWORD;
				}
				else
				{
					entryError = TRUE;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	63 c3       	rjmp	.+1734   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    484e:	80 ed       	ldi	r24, 0xD0	; 208
    4850:	89 0f       	add	r24, r25
    4852:	8a 30       	cpi	r24, 0x0A	; 10
    4854:	08 f5       	brcc	.+66     	; 0x4898 <_Z20processDTMFdetection10DTMF_key_t+0x200>
				{
					value *= 10;
					value += key - '0';
    4856:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    485a:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    485e:	a9 01       	movw	r20, r18
    4860:	44 0f       	add	r20, r20
    4862:	55 1f       	adc	r21, r21
    4864:	22 0f       	add	r18, r18
    4866:	33 1f       	adc	r19, r19
    4868:	22 0f       	add	r18, r18
    486a:	33 1f       	adc	r19, r19
    486c:	22 0f       	add	r18, r18
    486e:	33 1f       	adc	r19, r19
    4870:	24 0f       	add	r18, r20
    4872:	35 1f       	adc	r19, r21
    4874:	89 2f       	mov	r24, r25
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	c0 97       	sbiw	r24, 0x30	; 48
    487a:	28 0f       	add	r18, r24
    487c:	39 1f       	adc	r19, r25
    487e:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4882:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
					digits++;
    4886:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    488a:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    488e:	01 96       	adiw	r24, 0x01	; 1
    4890:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4894:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
				}

				if(digits >= 2)
    4898:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    489c:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    48a0:	02 97       	sbiw	r24, 0x02	; 2
    48a2:	0c f4       	brge	.+2      	; 0x48a6 <_Z20processDTMFdetection10DTMF_key_t+0x20e>
    48a4:	05 c3       	rjmp	.+1546   	; 0x4eb0 <_Z20processDTMFdetection10DTMF_key_t+0x818>
				{
					state = STATE_SHUTDOWN;
    48a6:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    48aa:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    48ae:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    48b2:	98 13       	cpse	r25, r24
    48b4:	ff c2       	rjmp	.+1534   	; 0x4eb4 <_Z20processDTMFdetection10DTMF_key_t+0x81c>
					{
						state = STATE_SENTENCE_START;
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	2a c3       	rjmp	.+1620   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
				{
					stopEventNow(PROGRAMMATIC);
    48c0:	82 e0       	ldi	r24, 0x02	; 2
    48c2:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    48c6:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	23 c3       	rjmp	.+1606   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    48ce:	93 32       	cpi	r25, 0x23	; 35
    48d0:	09 f0       	breq	.+2      	; 0x48d4 <_Z20processDTMFdetection10DTMF_key_t+0x23c>
    48d2:	f2 c2       	rjmp	.+1508   	; 0x4eb8 <_Z20processDTMFdetection10DTMF_key_t+0x820>
				{
					startEventNow(PROGRAMMATIC);
    48d4:	82 e0       	ldi	r24, 0x02	; 2
    48d6:	0e 94 36 19 	call	0x326c	; 0x326c <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    48da:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	19 c3       	rjmp	.+1586   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    48e2:	93 32       	cpi	r25, 0x23	; 35
    48e4:	09 f0       	breq	.+2      	; 0x48e8 <_Z20processDTMFdetection10DTMF_key_t+0x250>
    48e6:	ea c2       	rjmp	.+1492   	; 0x4ebc <_Z20processDTMFdetection10DTMF_key_t+0x824>
				{
					startEventUsingRTC();
    48e8:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    48ec:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	10 c3       	rjmp	.+1568   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    48f4:	93 32       	cpi	r25, 0x23	; 35
    48f6:	09 f0       	breq	.+2      	; 0x48fa <_Z20processDTMFdetection10DTMF_key_t+0x262>
    48f8:	e3 c2       	rjmp	.+1478   	; 0x4ec0 <_Z20processDTMFdetection10DTMF_key_t+0x828>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    48fa:	62 e0       	ldi	r22, 0x02	; 2
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    4904:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	04 c3       	rjmp	.+1544   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    490c:	91 33       	cpi	r25, 0x31	; 49
    490e:	29 f4       	brne	.+10     	; 0x491a <_Z20processDTMFdetection10DTMF_key_t+0x282>
				{
					state = STATE_RECEIVING_CALLSIGN;
    4910:	88 e0       	ldi	r24, 0x08	; 8
    4912:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	fd c2       	rjmp	.+1530   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			{
				if(key == '1')
				{
					state = STATE_RECEIVING_CALLSIGN;
				}
				else if(key == '2')
    491a:	92 33       	cpi	r25, 0x32	; 50
    491c:	29 f4       	brne	.+10     	; 0x4928 <_Z20processDTMFdetection10DTMF_key_t+0x290>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    491e:	89 e0       	ldi	r24, 0x09	; 9
    4920:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	f6 c2       	rjmp	.+1516   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '2')
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    4928:	93 33       	cpi	r25, 0x33	; 51
    492a:	29 f4       	brne	.+10     	; 0x4936 <_Z20processDTMFdetection10DTMF_key_t+0x29e>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    492c:	8d e0       	ldi	r24, 0x0D	; 13
    492e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	ef c2       	rjmp	.+1502   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
				{
					state = STATE_RECEIVING_SET_CLOCK;
				}
				else if(key == '4')
    4936:	94 33       	cpi	r25, 0x34	; 52
    4938:	29 f4       	brne	.+10     	; 0x4944 <_Z20processDTMFdetection10DTMF_key_t+0x2ac>
				{
					state = STATE_RECEIVING_START_TIME;
    493a:	8a e0       	ldi	r24, 0x0A	; 10
    493c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	e8 c2       	rjmp	.+1488   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if(key == '4')
				{
					state = STATE_RECEIVING_START_TIME;
				}
				else if(key == '5')
    4944:	95 33       	cpi	r25, 0x35	; 53
    4946:	29 f4       	brne	.+10     	; 0x4952 <_Z20processDTMFdetection10DTMF_key_t+0x2ba>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    4948:	8b e0       	ldi	r24, 0x0B	; 11
    494a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	e1 c2       	rjmp	.+1474   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					state = STATE_RECEIVING_UTC_OFFSET;
					digits = 1;
				}
#endif // #if INCLUDE_RV3028_SUPPORT
#if !SUPPORT_ONLY_80M
					else if(key == '9')
    4952:	99 33       	cpi	r25, 0x39	; 57
    4954:	29 f4       	brne	.+10     	; 0x4960 <_Z20processDTMFdetection10DTMF_key_t+0x2c8>
					{
						state = STATE_SET_AM_TONE_FREQUENCY;
    4956:	8e e0       	ldi	r24, 0x0E	; 14
    4958:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	da c2       	rjmp	.+1460   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					else if(key == '9')
					{
						state = STATE_SET_AM_TONE_FREQUENCY;
					}
#endif  /* !SUPPORT_ONLY_80M */
				else if(key == 'A')
    4960:	91 34       	cpi	r25, 0x41	; 65
    4962:	29 f4       	brne	.+10     	; 0x496e <_Z20processDTMFdetection10DTMF_key_t+0x2d6>
				{
					state = STATE_SET_PTT_PERIODIC_RESET;
    4964:	80 e1       	ldi	r24, 0x10	; 16
    4966:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	d3 c2       	rjmp	.+1446   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
#endif  /* !SUPPORT_ONLY_80M */
				else if(key == 'A')
				{
					state = STATE_SET_PTT_PERIODIC_RESET;
				}
				else if(key == 'B')
    496e:	92 34       	cpi	r25, 0x42	; 66
    4970:	29 f4       	brne	.+10     	; 0x497c <_Z20processDTMFdetection10DTMF_key_t+0x2e4>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
    4972:	81 e1       	ldi	r24, 0x11	; 17
    4974:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	cc c2       	rjmp	.+1432   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					state = STATE_GET_BATTERY_VOLTAGE;
				}
				else
				{
					entryError = TRUE;
					g_DTMF_sentence_in_progress_ticks = 0;
    497c:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4980:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
					state = STATE_SHUTDOWN;
    4984:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
				}
				else
				{
					entryError = TRUE;
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	c4 c2       	rjmp	.+1416   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    498c:	93 32       	cpi	r25, 0x23	; 35
    498e:	c9 f4       	brne	.+50     	; 0x49c2 <_Z20processDTMFdetection10DTMF_key_t+0x32a>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    4990:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4994:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4998:	04 97       	sbiw	r24, 0x04	; 4
    499a:	7c f0       	brlt	.+30     	; 0x49ba <_Z20processDTMFdetection10DTMF_key_t+0x322>
					{
						strcpy((char*)g_unlockCode, receivedString);
    499c:	63 e2       	ldi	r22, 0x23	; 35
    499e:	74 e0       	ldi	r23, 0x04	; 4
    49a0:	82 e1       	ldi	r24, 0x12	; 18
    49a2:	95 e0       	ldi	r25, 0x05	; 5
    49a4:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    49a8:	42 e1       	ldi	r20, 0x12	; 18
    49aa:	55 e0       	ldi	r21, 0x05	; 5
    49ac:	6e e0       	ldi	r22, 0x0E	; 14
    49ae:	8c e6       	ldi	r24, 0x6C	; 108
    49b0:	95 e0       	ldi	r25, 0x05	; 5
    49b2:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	01 c0       	rjmp	.+2      	; 0x49bc <_Z20processDTMFdetection10DTMF_key_t+0x324>
						strcpy((char*)g_unlockCode, receivedString);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
					else
					{
						entryError = TRUE;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    49bc:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    49c0:	a9 c2       	rjmp	.+1362   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    49c2:	80 ed       	ldi	r24, 0xD0	; 208
    49c4:	89 0f       	add	r24, r25
    49c6:	8a 30       	cpi	r24, 0x0A	; 10
    49c8:	c8 f4       	brcc	.+50     	; 0x49fc <_Z20processDTMFdetection10DTMF_key_t+0x364>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    49ca:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    49ce:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    49d2:	29 30       	cpi	r18, 0x09	; 9
    49d4:	31 05       	cpc	r19, r1
    49d6:	0c f0       	brlt	.+2      	; 0x49da <_Z20processDTMFdetection10DTMF_key_t+0x342>
    49d8:	75 c2       	rjmp	.+1258   	; 0x4ec4 <_Z20processDTMFdetection10DTMF_key_t+0x82c>
					{
						receivedString[stringLength++] = key;
    49da:	a9 01       	movw	r20, r18
    49dc:	4f 5f       	subi	r20, 0xFF	; 255
    49de:	5f 4f       	sbci	r21, 0xFF	; 255
    49e0:	50 93 3e 04 	sts	0x043E, r21	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    49e4:	40 93 3d 04 	sts	0x043D, r20	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    49e8:	f9 01       	movw	r30, r18
    49ea:	ed 5d       	subi	r30, 0xDD	; 221
    49ec:	fb 4f       	sbci	r31, 0xFB	; 251
    49ee:	90 83       	st	Z, r25
						receivedString[stringLength] = '\0';
    49f0:	fa 01       	movw	r30, r20
    49f2:	ed 5d       	subi	r30, 0xDD	; 221
    49f4:	fb 4f       	sbci	r31, 0xFB	; 251
    49f6:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	8c c2       	rjmp	.+1304   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					}
				}
				else
				{
					entryError = TRUE;
					state = STATE_SHUTDOWN;
    49fc:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
						receivedString[stringLength] = '\0';
					}
				}
				else
				{
					entryError = TRUE;
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	88 c2       	rjmp	.+1296   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    4a04:	93 32       	cpi	r25, 0x23	; 35
    4a06:	e9 f4       	brne	.+58     	; 0x4a42 <_Z20processDTMFdetection10DTMF_key_t+0x3aa>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    4a08:	e3 e2       	ldi	r30, 0x23	; 35
    4a0a:	f4 e0       	ldi	r31, 0x04	; 4
    4a0c:	01 90       	ld	r0, Z+
    4a0e:	00 20       	and	r0, r0
    4a10:	e9 f7       	brne	.-6      	; 0x4a0c <_Z20processDTMFdetection10DTMF_key_t+0x374>
    4a12:	31 97       	sbiw	r30, 0x01	; 1
    4a14:	e3 52       	subi	r30, 0x23	; 35
    4a16:	f4 40       	sbci	r31, 0x04	; 4
    4a18:	75 97       	sbiw	r30, 0x15	; 21
    4a1a:	78 f4       	brcc	.+30     	; 0x4a3a <_Z20processDTMFdetection10DTMF_key_t+0x3a2>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    4a1c:	63 e2       	ldi	r22, 0x23	; 35
    4a1e:	74 e0       	ldi	r23, 0x04	; 4
    4a20:	85 ef       	ldi	r24, 0xF5	; 245
    4a22:	94 e0       	ldi	r25, 0x04	; 4
    4a24:	0e 94 a6 32 	call	0x654c	; 0x654c <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    4a28:	45 ef       	ldi	r20, 0xF5	; 245
    4a2a:	54 e0       	ldi	r21, 0x04	; 4
    4a2c:	6b e0       	ldi	r22, 0x0B	; 11
    4a2e:	8c e6       	ldi	r24, 0x6C	; 108
    4a30:	95 e0       	ldi	r25, 0x05	; 5
    4a32:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a36:	80 e0       	ldi	r24, 0x00	; 0
    4a38:	01 c0       	rjmp	.+2      	; 0x4a3c <_Z20processDTMFdetection10DTMF_key_t+0x3a4>
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
					}
					else
					{
						entryError = TRUE;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4a3c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4a40:	69 c2       	rjmp	.+1234   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4a42:	80 ed       	ldi	r24, 0xD0	; 208
    4a44:	89 0f       	add	r24, r25
    4a46:	8a 30       	cpi	r24, 0x0A	; 10
    4a48:	08 f0       	brcs	.+2      	; 0x4a4c <_Z20processDTMFdetection10DTMF_key_t+0x3b4>
    4a4a:	43 c0       	rjmp	.+134    	; 0x4ad2 <_Z20processDTMFdetection10DTMF_key_t+0x43a>
				{
					if(digits)
    4a4c:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4a50:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4a54:	23 2b       	or	r18, r19
    4a56:	71 f1       	breq	.+92     	; 0x4ab4 <_Z20processDTMFdetection10DTMF_key_t+0x41c>
					{
						value = value * 10 + (key - '0');
    4a58:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4a5c:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4a60:	89 01       	movw	r16, r18
    4a62:	00 0f       	add	r16, r16
    4a64:	11 1f       	adc	r17, r17
    4a66:	22 0f       	add	r18, r18
    4a68:	33 1f       	adc	r19, r19
    4a6a:	22 0f       	add	r18, r18
    4a6c:	33 1f       	adc	r19, r19
    4a6e:	22 0f       	add	r18, r18
    4a70:	33 1f       	adc	r19, r19
    4a72:	02 0f       	add	r16, r18
    4a74:	13 1f       	adc	r17, r19
    4a76:	89 2f       	mov	r24, r25
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	c0 97       	sbiw	r24, 0x30	; 48
    4a7c:	08 0f       	add	r16, r24
    4a7e:	19 1f       	adc	r17, r25
    4a80:	10 93 3c 04 	sts	0x043C, r17	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4a84:	00 93 3b 04 	sts	0x043B, r16	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
						if((value < value2Morse(0x7F)) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    4a88:	8f e7       	ldi	r24, 0x7F	; 127
    4a8a:	0e 94 32 23 	call	0x4664	; 0x4664 <_Z11value2Morsec>
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	08 17       	cp	r16, r24
    4a92:	19 07       	cpc	r17, r25
    4a94:	4c f4       	brge	.+18     	; 0x4aa8 <_Z20processDTMFdetection10DTMF_key_t+0x410>
    4a96:	e0 90 3d 04 	lds	r14, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4a9a:	f0 90 3e 04 	lds	r15, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4a9e:	24 e1       	ldi	r18, 0x14	; 20
    4aa0:	e2 16       	cp	r14, r18
    4aa2:	f1 04       	cpc	r15, r1
    4aa4:	0c f4       	brge	.+2      	; 0x4aa8 <_Z20processDTMFdetection10DTMF_key_t+0x410>
    4aa6:	24 c2       	rjmp	.+1096   	; 0x4ef0 <_Z20processDTMFdetection10DTMF_key_t+0x858>
							receivedString[stringLength] = value2Morse(value);
							stringLength++;
							receivedString[stringLength] = '\0';
						}

						digits = 0;
    4aa8:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4aac:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	30 c2       	rjmp	.+1120   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

						digits = 0;
					}
					else
					{
						value = key - '0';
    4ab4:	89 2f       	mov	r24, r25
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	c0 97       	sbiw	r24, 0x30	; 48
    4aba:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4abe:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
						digits = 1;
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4aca:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	21 c2       	rjmp	.+1090   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					}
				}
				else
				{
					entryError = TRUE;
					state = STATE_SHUTDOWN;
    4ad2:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
						digits = 1;
					}
				}
				else
				{
					entryError = TRUE;
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	1d c2       	rjmp	.+1082   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    4ada:	93 32       	cpi	r25, 0x23	; 35
    4adc:	01 f5       	brne	.+64     	; 0x4b1e <_Z20processDTMFdetection10DTMF_key_t+0x486>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    4ade:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4ae2:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4ae6:	82 31       	cpi	r24, 0x12	; 18
    4ae8:	91 05       	cpc	r25, r1
    4aea:	a8 f4       	brcc	.+42     	; 0x4b16 <_Z20processDTMFdetection10DTMF_key_t+0x47e>
					{
						Fox_t holdFox = (Fox_t)value;
    4aec:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    4aee:	ae 01       	movw	r20, r28
    4af0:	4f 5f       	subi	r20, 0xFF	; 255
    4af2:	5f 4f       	sbci	r21, 0xFF	; 255
    4af4:	60 e1       	ldi	r22, 0x10	; 16
    4af6:	8c e6       	ldi	r24, 0x6C	; 108
    4af8:	95 e0       	ldi	r25, 0x05	; 5
    4afa:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    4afe:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_fox>
    4b02:	99 81       	ldd	r25, Y+1	; 0x01
    4b04:	98 17       	cp	r25, r24
    4b06:	29 f0       	breq	.+10     	; 0x4b12 <_Z20processDTMFdetection10DTMF_key_t+0x47a>
						{
							setupForFox(&holdFox, START_NOTHING);
    4b08:	60 e0       	ldi	r22, 0x00	; 0
    4b0a:	ce 01       	movw	r24, r28
    4b0c:	01 96       	adiw	r24, 0x01	; 1
    4b0e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	01 c0       	rjmp	.+2      	; 0x4b18 <_Z20processDTMFdetection10DTMF_key_t+0x480>
							setupForFox(&holdFox, START_NOTHING);
						}
					}
					else
					{
						entryError = TRUE;
    4b16:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4b18:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4b1c:	fb c1       	rjmp	.+1014   	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4b1e:	80 ed       	ldi	r24, 0xD0	; 208
    4b20:	89 0f       	add	r24, r25
    4b22:	8a 30       	cpi	r24, 0x0A	; 10
    4b24:	08 f0       	brcs	.+2      	; 0x4b28 <_Z20processDTMFdetection10DTMF_key_t+0x490>
    4b26:	d0 c1       	rjmp	.+928    	; 0x4ec8 <_Z20processDTMFdetection10DTMF_key_t+0x830>
				{
					value *= 10;
					value += key - '0';
    4b28:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4b2c:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4b30:	a9 01       	movw	r20, r18
    4b32:	44 0f       	add	r20, r20
    4b34:	55 1f       	adc	r21, r21
    4b36:	22 0f       	add	r18, r18
    4b38:	33 1f       	adc	r19, r19
    4b3a:	22 0f       	add	r18, r18
    4b3c:	33 1f       	adc	r19, r19
    4b3e:	22 0f       	add	r18, r18
    4b40:	33 1f       	adc	r19, r19
    4b42:	24 0f       	add	r18, r20
    4b44:	35 1f       	adc	r19, r21
    4b46:	89 2f       	mov	r24, r25
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	c0 97       	sbiw	r24, 0x30	; 48
    4b4c:	28 0f       	add	r18, r24
    4b4e:	39 1f       	adc	r19, r25
    4b50:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4b54:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	dc c1       	rjmp	.+952    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    4b5c:	93 32       	cpi	r25, 0x23	; 35
    4b5e:	31 f5       	brne	.+76     	; 0x4bac <_Z20processDTMFdetection10DTMF_key_t+0x514>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    4b60:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_utc_offset>
    4b64:	41 95       	neg	r20
    4b66:	69 e5       	ldi	r22, 0x59	; 89
    4b68:	75 e0       	ldi	r23, 0x05	; 5
    4b6a:	83 e2       	ldi	r24, 0x23	; 35
    4b6c:	94 e0       	ldi	r25, 0x04	; 4
    4b6e:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z18validateTimeStringPcPma>
    4b72:	6b 01       	movw	r12, r22
    4b74:	7c 01       	movw	r14, r24

					if(t)
    4b76:	67 2b       	or	r22, r23
    4b78:	68 2b       	or	r22, r24
    4b7a:	69 2b       	or	r22, r25
    4b7c:	99 f0       	breq	.+38     	; 0x4ba4 <_Z20processDTMFdetection10DTMF_key_t+0x50c>
					{
						#if INCLUDE_RV3028_SUPPORT
							RTC_set_epoch(t);
						#else
							RTC_set_datetime(receivedString);
    4b7e:	83 e2       	ldi	r24, 0x23	; 35
    4b80:	94 e0       	ldi	r25, 0x04	; 4
    4b82:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z16RTC_set_datetimePc>
						#endif

						g_current_epoch = t;
    4b86:	c0 92 59 05 	sts	0x0559, r12	; 0x800559 <g_current_epoch>
    4b8a:	d0 92 5a 05 	sts	0x055A, r13	; 0x80055a <g_current_epoch+0x1>
    4b8e:	e0 92 5b 05 	sts	0x055B, r14	; 0x80055b <g_current_epoch+0x2>
    4b92:	f0 92 5c 05 	sts	0x055C, r15	; 0x80055c <g_current_epoch+0x3>
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ba0:	80 e0       	ldi	r24, 0x00	; 0
    4ba2:	01 c0       	rjmp	.+2      	; 0x4ba6 <_Z20processDTMFdetection10DTMF_key_t+0x50e>
						g_current_epoch = t;
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
					}
					else
					{
						entryError = TRUE;
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4ba6:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4baa:	b4 c1       	rjmp	.+872    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4bac:	80 ed       	ldi	r24, 0xD0	; 208
    4bae:	89 0f       	add	r24, r25
    4bb0:	8a 30       	cpi	r24, 0x0A	; 10
    4bb2:	08 f0       	brcs	.+2      	; 0x4bb6 <_Z20processDTMFdetection10DTMF_key_t+0x51e>
    4bb4:	8b c1       	rjmp	.+790    	; 0x4ecc <_Z20processDTMFdetection10DTMF_key_t+0x834>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4bb6:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4bba:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4bbe:	28 32       	cpi	r18, 0x28	; 40
    4bc0:	31 05       	cpc	r19, r1
    4bc2:	0c f0       	brlt	.+2      	; 0x4bc6 <_Z20processDTMFdetection10DTMF_key_t+0x52e>
    4bc4:	85 c1       	rjmp	.+778    	; 0x4ed0 <_Z20processDTMFdetection10DTMF_key_t+0x838>
					{
						receivedString[stringLength] = key;
    4bc6:	f9 01       	movw	r30, r18
    4bc8:	ed 5d       	subi	r30, 0xDD	; 221
    4bca:	fb 4f       	sbci	r31, 0xFB	; 251
    4bcc:	90 83       	st	Z, r25
						stringLength++;
    4bce:	2f 5f       	subi	r18, 0xFF	; 255
    4bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd2:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4bd6:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4bda:	f9 01       	movw	r30, r18
    4bdc:	ed 5d       	subi	r30, 0xDD	; 221
    4bde:	fb 4f       	sbci	r31, 0xFB	; 251
    4be0:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	97 c1       	rjmp	.+814    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    4be6:	93 32       	cpi	r25, 0x23	; 35
    4be8:	41 f5       	brne	.+80     	; 0x4c3a <_Z20processDTMFdetection10DTMF_key_t+0x5a2>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    4bea:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_utc_offset>
    4bee:	41 95       	neg	r20
    4bf0:	65 e5       	ldi	r22, 0x55	; 85
    4bf2:	75 e0       	ldi	r23, 0x05	; 5
    4bf4:	83 e2       	ldi	r24, 0x23	; 35
    4bf6:	94 e0       	ldi	r25, 0x04	; 4
    4bf8:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z18validateTimeStringPcPma>

					if(s)
    4bfc:	61 15       	cp	r22, r1
    4bfe:	71 05       	cpc	r23, r1
    4c00:	81 05       	cpc	r24, r1
    4c02:	91 05       	cpc	r25, r1
    4c04:	b1 f0       	breq	.+44     	; 0x4c32 <_Z20processDTMFdetection10DTMF_key_t+0x59a>
					{
						g_event_start_epoch = s;
    4c06:	60 93 55 05 	sts	0x0555, r22	; 0x800555 <g_event_start_epoch>
    4c0a:	70 93 56 05 	sts	0x0556, r23	; 0x800556 <g_event_start_epoch+0x1>
    4c0e:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <g_event_start_epoch+0x2>
    4c12:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    4c16:	45 e5       	ldi	r20, 0x55	; 85
    4c18:	55 e0       	ldi	r21, 0x05	; 5
    4c1a:	64 e1       	ldi	r22, 0x14	; 20
    4c1c:	8c e6       	ldi	r24, 0x6C	; 108
    4c1e:	95 e0       	ldi	r25, 0x05	; 5
    4c20:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4c24:	63 e0       	ldi	r22, 0x03	; 3
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	01 c0       	rjmp	.+2      	; 0x4c34 <_Z20processDTMFdetection10DTMF_key_t+0x59c>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
					}
					else
					{
						entryError = TRUE;
    4c32:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4c34:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4c38:	6d c1       	rjmp	.+730    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4c3a:	80 ed       	ldi	r24, 0xD0	; 208
    4c3c:	89 0f       	add	r24, r25
    4c3e:	8a 30       	cpi	r24, 0x0A	; 10
    4c40:	08 f0       	brcs	.+2      	; 0x4c44 <_Z20processDTMFdetection10DTMF_key_t+0x5ac>
    4c42:	48 c1       	rjmp	.+656    	; 0x4ed4 <_Z20processDTMFdetection10DTMF_key_t+0x83c>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4c44:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4c48:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4c4c:	28 32       	cpi	r18, 0x28	; 40
    4c4e:	31 05       	cpc	r19, r1
    4c50:	0c f0       	brlt	.+2      	; 0x4c54 <_Z20processDTMFdetection10DTMF_key_t+0x5bc>
    4c52:	42 c1       	rjmp	.+644    	; 0x4ed8 <_Z20processDTMFdetection10DTMF_key_t+0x840>
					{
						receivedString[stringLength] = key;
    4c54:	f9 01       	movw	r30, r18
    4c56:	ed 5d       	subi	r30, 0xDD	; 221
    4c58:	fb 4f       	sbci	r31, 0xFB	; 251
    4c5a:	90 83       	st	Z, r25
						stringLength++;
    4c5c:	2f 5f       	subi	r18, 0xFF	; 255
    4c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c60:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4c64:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4c68:	f9 01       	movw	r30, r18
    4c6a:	ed 5d       	subi	r30, 0xDD	; 221
    4c6c:	fb 4f       	sbci	r31, 0xFB	; 251
    4c6e:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	50 c1       	rjmp	.+672    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    4c74:	93 32       	cpi	r25, 0x23	; 35
    4c76:	41 f5       	brne	.+80     	; 0x4cc8 <_Z20processDTMFdetection10DTMF_key_t+0x630>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4c78:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_utc_offset>
    4c7c:	41 95       	neg	r20
    4c7e:	61 e5       	ldi	r22, 0x51	; 81
    4c80:	75 e0       	ldi	r23, 0x05	; 5
    4c82:	83 e2       	ldi	r24, 0x23	; 35
    4c84:	94 e0       	ldi	r25, 0x04	; 4
    4c86:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z18validateTimeStringPcPma>

					if(f)
    4c8a:	61 15       	cp	r22, r1
    4c8c:	71 05       	cpc	r23, r1
    4c8e:	81 05       	cpc	r24, r1
    4c90:	91 05       	cpc	r25, r1
    4c92:	b1 f0       	breq	.+44     	; 0x4cc0 <_Z20processDTMFdetection10DTMF_key_t+0x628>
					{
						g_event_finish_epoch = f;
    4c94:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_event_finish_epoch>
    4c98:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_event_finish_epoch+0x1>
    4c9c:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_event_finish_epoch+0x2>
    4ca0:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4ca4:	41 e5       	ldi	r20, 0x51	; 81
    4ca6:	55 e0       	ldi	r21, 0x05	; 5
    4ca8:	65 e1       	ldi	r22, 0x15	; 21
    4caa:	8c e6       	ldi	r24, 0x6C	; 108
    4cac:	95 e0       	ldi	r25, 0x05	; 5
    4cae:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4cb2:	63 e0       	ldi	r22, 0x03	; 3
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <_Z20processDTMFdetection10DTMF_key_t+0x62a>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
					}
					else
					{
						entryError = TRUE;
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4cc2:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4cc6:	26 c1       	rjmp	.+588    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '9'))
    4cc8:	80 ed       	ldi	r24, 0xD0	; 208
    4cca:	89 0f       	add	r24, r25
    4ccc:	8a 30       	cpi	r24, 0x0A	; 10
    4cce:	08 f0       	brcs	.+2      	; 0x4cd2 <_Z20processDTMFdetection10DTMF_key_t+0x63a>
    4cd0:	05 c1       	rjmp	.+522    	; 0x4edc <_Z20processDTMFdetection10DTMF_key_t+0x844>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4cd2:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4cd6:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4cda:	28 32       	cpi	r18, 0x28	; 40
    4cdc:	31 05       	cpc	r19, r1
    4cde:	0c f0       	brlt	.+2      	; 0x4ce2 <_Z20processDTMFdetection10DTMF_key_t+0x64a>
    4ce0:	ff c0       	rjmp	.+510    	; 0x4ee0 <_Z20processDTMFdetection10DTMF_key_t+0x848>
					{
						receivedString[stringLength] = key;
    4ce2:	f9 01       	movw	r30, r18
    4ce4:	ed 5d       	subi	r30, 0xDD	; 221
    4ce6:	fb 4f       	sbci	r31, 0xFB	; 251
    4ce8:	90 83       	st	Z, r25
						stringLength++;
    4cea:	2f 5f       	subi	r18, 0xFF	; 255
    4cec:	3f 4f       	sbci	r19, 0xFF	; 255
    4cee:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4cf2:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4cf6:	f9 01       	movw	r30, r18
    4cf8:	ed 5d       	subi	r30, 0xDD	; 221
    4cfa:	fb 4f       	sbci	r31, 0xFB	; 251
    4cfc:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4cfe:	80 e0       	ldi	r24, 0x00	; 0
    4d00:	09 c1       	rjmp	.+530    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			break;

#if !SUPPORT_ONLY_80M
					case STATE_SET_AM_TONE_FREQUENCY:
					{
						if(key == '#')
    4d02:	93 32       	cpi	r25, 0x23	; 35
    4d04:	99 f4       	brne	.+38     	; 0x4d2c <_Z20processDTMFdetection10DTMF_key_t+0x694>
						{
							g_AM_audio_frequency = (AM_Tone_Freq_t)value;
    4d06:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4d0a:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <g_AM_audio_frequency>
							setAMToneFrequency(g_AM_audio_frequency);
    4d0e:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_AM_audio_frequency>
    4d12:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_Z18setAMToneFrequency14AM_Tone_Freq_t>
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    4d16:	4d e4       	ldi	r20, 0x4D	; 77
    4d18:	55 e0       	ldi	r21, 0x05	; 5
    4d1a:	61 e1       	ldi	r22, 0x11	; 17
    4d1c:	8c e6       	ldi	r24, 0x6C	; 108
    4d1e:	95 e0       	ldi	r25, 0x05	; 5
    4d20:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

							state = STATE_SHUTDOWN;
    4d24:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	f4 c0       	rjmp	.+488    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
							setAMToneFrequency(g_AM_audio_frequency);
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);

							state = STATE_SHUTDOWN;
						}
						else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    4d2c:	97 30       	cpi	r25, 0x07	; 7
    4d2e:	08 f0       	brcs	.+2      	; 0x4d32 <_Z20processDTMFdetection10DTMF_key_t+0x69a>
    4d30:	d9 c0       	rjmp	.+434    	; 0x4ee4 <_Z20processDTMFdetection10DTMF_key_t+0x84c>
						{
							value = key - '0';
    4d32:	89 2f       	mov	r24, r25
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	c0 97       	sbiw	r24, 0x30	; 48
    4d38:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4d3c:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	e8 c0       	rjmp	.+464    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					break;
#endif  /* !SUPPORT_ONLY_80M */

			case STATE_SET_PTT_PERIODIC_RESET:
			{
				if(key == '#')
    4d44:	93 32       	cpi	r25, 0x23	; 35
    4d46:	d1 f4       	brne	.+52     	; 0x4d7c <_Z20processDTMFdetection10DTMF_key_t+0x6e4>
				{
					if((value >= 0) && (value <= 1))
    4d48:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4d4c:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4d50:	82 30       	cpi	r24, 0x02	; 2
    4d52:	91 05       	cpc	r25, r1
    4d54:	78 f4       	brcc	.+30     	; 0x4d74 <_Z20processDTMFdetection10DTMF_key_t+0x6dc>
					{
						g_ptt_periodic_reset_enabled = (uint8_t)value;
    4d56:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_ptt_periodic_reset_enabled>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    4d5a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_ptt_periodic_reset_enabled>
    4d5e:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <g_use_ptt_periodic_reset>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    4d62:	4f e4       	ldi	r20, 0x4F	; 79
    4d64:	55 e0       	ldi	r21, 0x05	; 5
    4d66:	67 e1       	ldi	r22, 0x17	; 23
    4d68:	8c e6       	ldi	r24, 0x6C	; 108
    4d6a:	95 e0       	ldi	r25, 0x05	; 5
    4d6c:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	01 c0       	rjmp	.+2      	; 0x4d76 <_Z20processDTMFdetection10DTMF_key_t+0x6de>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
					}
					else
					{
						entryError = TRUE;
    4d74:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4d76:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4d7a:	cc c0       	rjmp	.+408    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				}
				else if((key >= '0') && (key <= '1'))
    4d7c:	80 ed       	ldi	r24, 0xD0	; 208
    4d7e:	89 0f       	add	r24, r25
    4d80:	82 30       	cpi	r24, 0x02	; 2
    4d82:	08 f0       	brcs	.+2      	; 0x4d86 <_Z20processDTMFdetection10DTMF_key_t+0x6ee>
    4d84:	b1 c0       	rjmp	.+354    	; 0x4ee8 <_Z20processDTMFdetection10DTMF_key_t+0x850>
				{
					value = key - '0';
    4d86:	89 2f       	mov	r24, r25
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	c0 97       	sbiw	r24, 0x30	; 48
    4d8c:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4d90:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	be c0       	rjmp	.+380    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			}
			break;

			case STATE_GET_BATTERY_VOLTAGE:
			{
				if(key == '#')
    4d98:	93 32       	cpi	r25, 0x23	; 35
    4d9a:	49 f4       	brne	.+18     	; 0x4dae <_Z20processDTMFdetection10DTMF_key_t+0x716>
				{
					Fox_t f = REPORT_BATTERY;
    4d9c:	83 e1       	ldi	r24, 0x13	; 19
    4d9e:	89 83       	std	Y+1, r24	; 0x01
					setupForFox(&f, START_TRANSMISSIONS_NOW);
    4da0:	62 e0       	ldi	r22, 0x02	; 2
    4da2:	ce 01       	movw	r24, r28
    4da4:	01 96       	adiw	r24, 0x01	; 1
    4da6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	01 c0       	rjmp	.+2      	; 0x4db0 <_Z20processDTMFdetection10DTMF_key_t+0x718>
					Fox_t f = REPORT_BATTERY;
					setupForFox(&f, START_TRANSMISSIONS_NOW);
				}
				else
				{
					entryError = TRUE;
    4dae:	81 e0       	ldi	r24, 0x01	; 1
				}

				state = STATE_SHUTDOWN;
    4db0:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
			}
			break;
    4db4:	af c0       	rjmp	.+350    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    4db6:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4dba:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4dbe:	a9 01       	movw	r20, r18
    4dc0:	4f 5f       	subi	r20, 0xFF	; 255
    4dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc4:	50 93 3a 04 	sts	0x043A, r21	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4dc8:	40 93 39 04 	sts	0x0439, r20	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4dcc:	f9 01       	movw	r30, r18
    4dce:	ee 5e       	subi	r30, 0xEE	; 238
    4dd0:	fa 4f       	sbci	r31, 0xFA	; 250
    4dd2:	90 81       	ld	r25, Z
    4dd4:	89 13       	cpse	r24, r25
    4dd6:	13 c0       	rjmp	.+38     	; 0x4dfe <_Z20processDTMFdetection10DTMF_key_t+0x766>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    4dd8:	e2 e1       	ldi	r30, 0x12	; 18
    4dda:	f5 e0       	ldi	r31, 0x05	; 5
    4ddc:	01 90       	ld	r0, Z+
    4dde:	00 20       	and	r0, r0
    4de0:	e9 f7       	brne	.-6      	; 0x4ddc <_Z20processDTMFdetection10DTMF_key_t+0x744>
    4de2:	31 97       	sbiw	r30, 0x01	; 1
    4de4:	e2 51       	subi	r30, 0x12	; 18
    4de6:	f5 40       	sbci	r31, 0x05	; 5
    4de8:	e4 17       	cp	r30, r20
    4dea:	f5 07       	cpc	r31, r21
    4dec:	09 f0       	breq	.+2      	; 0x4df0 <_Z20processDTMFdetection10DTMF_key_t+0x758>
    4dee:	7e c0       	rjmp	.+252    	; 0x4eec <_Z20processDTMFdetection10DTMF_key_t+0x854>
					{
						g_DTMF_unlocked = TRUE;
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    4df6:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <_ZZ20processDTMFdetection10DTMF_key_tE18setPasswordEnabled>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	8b c0       	rjmp	.+278    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
						setPasswordEnabled = TRUE;
					}
				}
				else
				{
					g_DTMF_sentence_in_progress_ticks = 0;
    4dfe:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4e02:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
					digits = 0;
    4e06:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4e0a:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
					state = STATE_SHUTDOWN;
    4e0e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					entryError = TRUE;
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	7f c0       	rjmp	.+254    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
			break;

#if !SUPPORT_ONLY_80M
					case STATE_TEST_ATTENUATOR:
					{
						if(key == '#')
    4e16:	93 32       	cpi	r25, 0x23	; 35
    4e18:	f9 f4       	brne	.+62     	; 0x4e58 <_Z20processDTMFdetection10DTMF_key_t+0x7c0>
						{
							if(value == 0)
    4e1a:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4e1e:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	41 f4       	brne	.+16     	; 0x4e36 <_Z20processDTMFdetection10DTMF_key_t+0x79e>
							{
								setAtten(0);
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
								g_sendAMmodulationConstantly = TRUE;
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_sendAMmodulationConstantly>
    4e34:	0d c0       	rjmp	.+26     	; 0x4e50 <_Z20processDTMFdetection10DTMF_key_t+0x7b8>
							}
							else if(value > 315)
    4e36:	8c 33       	cpi	r24, 0x3C	; 60
    4e38:	21 e0       	ldi	r18, 0x01	; 1
    4e3a:	92 07       	cpc	r25, r18
    4e3c:	3c f0       	brlt	.+14     	; 0x4e4c <_Z20processDTMFdetection10DTMF_key_t+0x7b4>
							{
								g_sendAMmodulationConstantly = FALSE;
    4e3e:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_sendAMmodulationConstantly>
								setAtten(315);
    4e42:	8b e3       	ldi	r24, 0x3B	; 59
    4e44:	91 e0       	ldi	r25, 0x01	; 1
    4e46:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
    4e4a:	02 c0       	rjmp	.+4      	; 0x4e50 <_Z20processDTMFdetection10DTMF_key_t+0x7b8>
							}
							else
							{
								setAtten(value);
    4e4c:	0e 94 73 07 	call	0xee6	; 0xee6 <setAtten>
							}

							state = STATE_SHUTDOWN;
    4e50:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	5e c0       	rjmp	.+188    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
								setAtten(value);
							}

							state = STATE_SHUTDOWN;
						}
						else if((key >= '0') && (key <= '9'))
    4e58:	80 ed       	ldi	r24, 0xD0	; 208
    4e5a:	89 0f       	add	r24, r25
    4e5c:	8a 30       	cpi	r24, 0x0A	; 10
    4e5e:	d0 f4       	brcc	.+52     	; 0x4e94 <_Z20processDTMFdetection10DTMF_key_t+0x7fc>
						{
							value *= 10;
							value += key - '0';
    4e60:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4e64:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4e68:	a9 01       	movw	r20, r18
    4e6a:	44 0f       	add	r20, r20
    4e6c:	55 1f       	adc	r21, r21
    4e6e:	22 0f       	add	r18, r18
    4e70:	33 1f       	adc	r19, r19
    4e72:	22 0f       	add	r18, r18
    4e74:	33 1f       	adc	r19, r19
    4e76:	22 0f       	add	r18, r18
    4e78:	33 1f       	adc	r19, r19
    4e7a:	24 0f       	add	r18, r20
    4e7c:	35 1f       	adc	r19, r21
    4e7e:	89 2f       	mov	r24, r25
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	c0 97       	sbiw	r24, 0x30	; 48
    4e84:	82 0f       	add	r24, r18
    4e86:	93 1f       	adc	r25, r19
    4e88:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4e8c:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	40 c0       	rjmp	.+128    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
							value *= 10;
							value += key - '0';
						}
						else
						{
							g_DTMF_sentence_in_progress_ticks = 0;
    4e94:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    4e98:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
							state = STATE_SHUTDOWN;
    4e9c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
							entryError = TRUE;
    4ea0:	81 e0       	ldi	r24, 0x01	; 1
    4ea2:	38 c0       	rjmp	.+112    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	36 c0       	rjmp	.+108    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	34 c0       	rjmp	.+104    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	32 c0       	rjmp	.+100    	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	30 c0       	rjmp	.+96     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	2e c0       	rjmp	.+92     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4eb8:	80 e0       	ldi	r24, 0x00	; 0
    4eba:	2c c0       	rjmp	.+88     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ebc:	80 e0       	ldi	r24, 0x00	; 0
    4ebe:	2a c0       	rjmp	.+84     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	28 c0       	rjmp	.+80     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	26 c0       	rjmp	.+76     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	24 c0       	rjmp	.+72     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	22 c0       	rjmp	.+68     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	20 c0       	rjmp	.+64     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	1e c0       	rjmp	.+60     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	1c c0       	rjmp	.+56     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4edc:	80 e0       	ldi	r24, 0x00	; 0
    4ede:	1a c0       	rjmp	.+52     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	18 c0       	rjmp	.+48     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	16 c0       	rjmp	.+44     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4ee8:	80 e0       	ldi	r24, 0x00	; 0
    4eea:	14 c0       	rjmp	.+40     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	12 c0       	rjmp	.+36     	; 0x4f14 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
					if(digits)
					{
						value = value * 10 + (key - '0');
						if((value < value2Morse(0x7F)) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
						{
							receivedString[stringLength] = value2Morse(value);
    4ef0:	80 2f       	mov	r24, r16
    4ef2:	0e 94 32 23 	call	0x4664	; 0x4664 <_Z11value2Morsec>
    4ef6:	f7 01       	movw	r30, r14
    4ef8:	ed 5d       	subi	r30, 0xDD	; 221
    4efa:	fb 4f       	sbci	r31, 0xFB	; 251
    4efc:	80 83       	st	Z, r24
							stringLength++;
    4efe:	c7 01       	movw	r24, r14
    4f00:	01 96       	adiw	r24, 0x01	; 1
    4f02:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4f06:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
							receivedString[stringLength] = '\0';
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	ed 5d       	subi	r30, 0xDD	; 221
    4f0e:	fb 4f       	sbci	r31, 0xFB	; 251
    4f10:	10 82       	st	Z, r1
    4f12:	ca cd       	rjmp	.-1132   	; 0x4aa8 <_Z20processDTMFdetection10DTMF_key_t+0x410>
					break;
#endif  /* !SUPPORT_ONLY_80M */
		}

		return(entryError);
	}
    4f14:	0f 90       	pop	r0
    4f16:	df 91       	pop	r29
    4f18:	cf 91       	pop	r28
    4f1a:	1f 91       	pop	r17
    4f1c:	0f 91       	pop	r16
    4f1e:	ff 90       	pop	r15
    4f20:	ef 90       	pop	r14
    4f22:	df 90       	pop	r13
    4f24:	cf 90       	pop	r12
    4f26:	08 95       	ret

00004f28 <_Z13value2DTMFKeyh>:

DTMF_key_t value2DTMFKey(uint8_t value)
{
	DTMF_key_t key = NO_KEY;

	if(value <= 2)
    4f28:	83 30       	cpi	r24, 0x03	; 3
    4f2a:	10 f4       	brcc	.+4      	; 0x4f30 <_Z13value2DTMFKeyh+0x8>
	{
		key = (DTMF_key_t)('1' + value);
    4f2c:	8f 5c       	subi	r24, 0xCF	; 207
    4f2e:	08 95       	ret
	}
	else if((value >= 4) && (value <= 6))
    4f30:	9c ef       	ldi	r25, 0xFC	; 252
    4f32:	98 0f       	add	r25, r24
    4f34:	93 30       	cpi	r25, 0x03	; 3
    4f36:	10 f4       	brcc	.+4      	; 0x4f3c <_Z13value2DTMFKeyh+0x14>
	{
		key = (DTMF_key_t)('0' + value);
    4f38:	80 5d       	subi	r24, 0xD0	; 208
    4f3a:	08 95       	ret
	}
	else if((value >= 8) && (value <= 10))
    4f3c:	98 ef       	ldi	r25, 0xF8	; 248
    4f3e:	98 0f       	add	r25, r24
    4f40:	93 30       	cpi	r25, 0x03	; 3
    4f42:	10 f4       	brcc	.+4      	; 0x4f48 <_Z13value2DTMFKeyh+0x20>
	{
		key = (DTMF_key_t)('/' + value);
    4f44:	81 5d       	subi	r24, 0xD1	; 209
    4f46:	08 95       	ret
	}
	else if(value == 3)
    4f48:	83 30       	cpi	r24, 0x03	; 3
    4f4a:	71 f0       	breq	.+28     	; 0x4f68 <_Z13value2DTMFKeyh+0x40>
	{
		key = A_KEY;
	}
	else if(value == 7)
    4f4c:	87 30       	cpi	r24, 0x07	; 7
    4f4e:	71 f0       	breq	.+28     	; 0x4f6c <_Z13value2DTMFKeyh+0x44>
	{
		key = B_KEY;
	}
	else if(value == 11)
    4f50:	8b 30       	cpi	r24, 0x0B	; 11
    4f52:	71 f0       	breq	.+28     	; 0x4f70 <_Z13value2DTMFKeyh+0x48>
	{
		key = C_KEY;
	}
	else if(value == 12)
    4f54:	8c 30       	cpi	r24, 0x0C	; 12
    4f56:	71 f0       	breq	.+28     	; 0x4f74 <_Z13value2DTMFKeyh+0x4c>
	{
		key = STAR_KEY;
	}
	else if(value == 13)
    4f58:	8d 30       	cpi	r24, 0x0D	; 13
    4f5a:	71 f0       	breq	.+28     	; 0x4f78 <_Z13value2DTMFKeyh+0x50>
	{
		key = ZERO_KEY;
	}
	else if(value == 14)
    4f5c:	8e 30       	cpi	r24, 0x0E	; 14
    4f5e:	71 f0       	breq	.+28     	; 0x4f7c <_Z13value2DTMFKeyh+0x54>
	{
		key = POUND_KEY;
	}
	else if(value == 15)
    4f60:	8f 30       	cpi	r24, 0x0F	; 15
    4f62:	71 f4       	brne	.+28     	; 0x4f80 <_Z13value2DTMFKeyh+0x58>
	{
		key = D_KEY;
    4f64:	84 e4       	ldi	r24, 0x44	; 68
    4f66:	08 95       	ret
	{
		key = (DTMF_key_t)('/' + value);
	}
	else if(value == 3)
	{
		key = A_KEY;
    4f68:	81 e4       	ldi	r24, 0x41	; 65
    4f6a:	08 95       	ret
	}
	else if(value == 7)
	{
		key = B_KEY;
    4f6c:	82 e4       	ldi	r24, 0x42	; 66
    4f6e:	08 95       	ret
	}
	else if(value == 11)
	{
		key = C_KEY;
    4f70:	83 e4       	ldi	r24, 0x43	; 67
    4f72:	08 95       	ret
	}
	else if(value == 12)
	{
		key = STAR_KEY;
    4f74:	8a e2       	ldi	r24, 0x2A	; 42
    4f76:	08 95       	ret
	}
	else if(value == 13)
	{
		key = ZERO_KEY;
    4f78:	80 e3       	ldi	r24, 0x30	; 48
    4f7a:	08 95       	ret
	}
	else if(value == 14)
	{
		key = POUND_KEY;
    4f7c:	83 e2       	ldi	r24, 0x23	; 35
    4f7e:	08 95       	ret
	return( morse);
}

DTMF_key_t value2DTMFKey(uint8_t value)
{
	DTMF_key_t key = NO_KEY;
    4f80:	80 e0       	ldi	r24, 0x00	; 0
	{
		key = D_KEY;
	}

	return( key);
}
    4f82:	08 95       	ret

00004f84 <_Z4loopv>:

/***********************************************************************
 *   Here is the main loop
 ************************************************************************/
void loop()
{
    4f84:	4f 92       	push	r4
    4f86:	5f 92       	push	r5
    4f88:	6f 92       	push	r6
    4f8a:	7f 92       	push	r7
    4f8c:	8f 92       	push	r8
    4f8e:	9f 92       	push	r9
    4f90:	af 92       	push	r10
    4f92:	bf 92       	push	r11
    4f94:	cf 92       	push	r12
    4f96:	df 92       	push	r13
    4f98:	ef 92       	push	r14
    4f9a:	ff 92       	push	r15
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	00 d0       	rcall	.+0      	; 0x4fa6 <_Z4loopv+0x22>
    4fa6:	1f 92       	push	r1
    4fa8:	cd b7       	in	r28, 0x3d	; 61
    4faa:	de b7       	in	r29, 0x3e	; 62
		int8_t dtmfY = -1;
		float largestX;
		float largestY;
		BOOL dtmfDetected = FALSE;
		BOOL noiseDetected = FALSE;
		int clipCount = 0;
    4fac:	1a 82       	std	Y+2, r1	; 0x02
    4fae:	19 82       	std	Y+1, r1	; 0x01
		BOOL dtmfEntryError = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
    4fb0:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <g_perform_EEPROM_reset>
    4fb4:	88 23       	and	r24, r24
    4fb6:	c1 f0       	breq	.+48     	; 0x4fe8 <_Z4loopv+0x64>
		{
			ee_mgr.resetEEPROMValues();
    4fb8:	8c e6       	ldi	r24, 0x6C	; 108
    4fba:	95 e0       	ldi	r25, 0x05	; 5
    4fbc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	71 ee       	ldi	r23, 0xE1	; 225
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	0e 94 0a 0c 	call	0x1814	; 0x1814 <linkbus_init>
			while(g_reset_button_held)
    4fcc:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_reset_button_held>
    4fd0:	88 23       	and	r24, r24
    4fd2:	41 f0       	breq	.+16     	; 0x4fe4 <_Z4loopv+0x60>
			{
				digitalWrite(PIN_LED, OFF); /*  LED */
    4fd4:	60 e0       	ldi	r22, 0x00	; 0
    4fd6:	80 e1       	ldi	r24, 0x10	; 16
    4fd8:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
		{
			ee_mgr.resetEEPROMValues();
			linkbus_init(BAUD);
			while(g_reset_button_held)
    4fdc:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_reset_button_held>
    4fe0:	81 11       	cpse	r24, r1
    4fe2:	f8 cf       	rjmp	.-16     	; 0x4fd4 <_Z4loopv+0x50>
			{
				digitalWrite(PIN_LED, OFF); /*  LED */
			}

			g_perform_EEPROM_reset = FALSE;
    4fe4:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <g_perform_EEPROM_reset>
		}

		dtmfEntryError = processDTMFdetection(NO_KEY);
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	0e 94 4c 23 	call	0x4698	; 0x4698 <_Z20processDTMFdetection10DTMF_key_t>
    4fee:	18 2f       	mov	r17, r24
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    4ff0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <_Z17handleLinkBusMsgsv>

#ifndef TRANQUILIZE_WATCHDOG
		wdt_reset();    /* HW watchdog */
    4ff4:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */


#if !INIT_EEPROM_ONLY
		if(!dtmfEntryError)
    4ff6:	11 11       	cpse	r17, r1
    4ff8:	89 c1       	rjmp	.+786    	; 0x530c <_Z4loopv+0x388>
		{
			if(g_goertzel.SamplesReady())
    4ffa:	8e ec       	ldi	r24, 0xCE	; 206
    4ffc:	94 e0       	ldi	r25, 0x04	; 4
    4ffe:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZN8Goertzel12SamplesReadyEv>
    5002:	88 23       	and	r24, r24
    5004:	09 f4       	brne	.+2      	; 0x5008 <_Z4loopv+0x84>
    5006:	82 c1       	rjmp	.+772    	; 0x530c <_Z4loopv+0x388>
				dtmfX = -1;
				dtmfY = -1;

				dtmfDetected = FALSE;
				noiseDetected = FALSE;
				clipCount = 0;
    5008:	1a 82       	std	Y+2, r1	; 0x02
    500a:	19 82       	std	Y+1, r1	; 0x01

				if(!g_temperature_check_countdown)
    500c:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_temperature_check_countdown>
    5010:	81 11       	cpse	r24, r1
    5012:	07 c0       	rjmp	.+14     	; 0x5022 <_Z4loopv+0x9e>
						int8_t adj = ee_mgr.readTemperatureTable(delta25);
						rv3028_set_offset_RAM(g_rv3028_offset + adj);
					}
#endif // INCLUDE_DS3231_SUPPORT

					setUpSampling(AUDIO_SAMPLING, FALSE);
    5014:	60 e0       	ldi	r22, 0x00	; 0
    5016:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_Z13setUpSampling12ADCChannel_th>
					g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    501a:	8b e3       	ldi	r24, 0x3B	; 59
    501c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <g_temperature_check_countdown>
    5020:	24 c2       	rjmp	.+1096   	; 0x546a <_Z4loopv+0x4e6>
				}
				else if(!g_voltage_check_countdown)
    5022:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <g_voltage_check_countdown>
    5026:	81 11       	cpse	r24, r1
    5028:	20 c2       	rjmp	.+1088   	; 0x546a <_Z4loopv+0x4e6>
				{
					setUpSampling(VOLTAGE_SAMPLING, FALSE);
    502a:	60 e0       	ldi	r22, 0x00	; 0
    502c:	82 e0       	ldi	r24, 0x02	; 2
    502e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_Z13setUpSampling12ADCChannel_th>
					g_voltage = getVoltage();
    5032:	0e 94 cc 18 	call	0x3198	; 0x3198 <_Z10getVoltagev>
    5036:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <g_voltage+0x1>
    503a:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_voltage>
					setUpSampling(AUDIO_SAMPLING, FALSE);
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_Z13setUpSampling12ADCChannel_th>
					g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    5046:	8b e0       	ldi	r24, 0x0B	; 11
    5048:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_voltage_check_countdown>
    504c:	0e c2       	rjmp	.+1052   	; 0x546a <_Z4loopv+0x4e6>
				}

				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(y_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
    504e:	f5 01       	movw	r30, r10
    5050:	41 91       	ld	r20, Z+
    5052:	51 91       	ld	r21, Z+
    5054:	61 91       	ld	r22, Z+
    5056:	71 91       	ld	r23, Z+
    5058:	5f 01       	movw	r10, r30
    505a:	8e ec       	ldi	r24, 0xCE	; 206
    505c:	94 e0       	ldi	r25, 0x04	; 4
    505e:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeY = g_goertzel.Magnitude2(&clipCount);     /* Check samples for presence of the target frequency */
    5062:	be 01       	movw	r22, r28
    5064:	6f 5f       	subi	r22, 0xFF	; 255
    5066:	7f 4f       	sbci	r23, 0xFF	; 255
    5068:	8e ec       	ldi	r24, 0xCE	; 206
    506a:	94 e0       	ldi	r25, 0x04	; 4
    506c:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN8Goertzel10Magnitude2EPi>
    5070:	e6 2e       	mov	r14, r22
    5072:	f7 2e       	mov	r15, r23
    5074:	08 2f       	mov	r16, r24
    5076:	d9 2e       	mov	r13, r25

					if(magnitudeY > largestY)                           /* Use only the greatest Y value */
    5078:	29 2d       	mov	r18, r9
    507a:	38 2d       	mov	r19, r8
    507c:	47 2d       	mov	r20, r7
    507e:	56 2d       	mov	r21, r6
    5080:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__gesf2>
    5084:	18 16       	cp	r1, r24
    5086:	b4 f4       	brge	.+44     	; 0x50b4 <_Z4loopv+0x130>
					{
						largestY = magnitudeY;
						if(magnitudeY > threshold)                      /* Only consider Y above a certain threshold */
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	34 e2       	ldi	r19, 0x24	; 36
    508c:	44 e7       	ldi	r20, 0x74	; 116
    508e:	59 e4       	ldi	r21, 0x49	; 73
    5090:	6e 2d       	mov	r22, r14
    5092:	7f 2d       	mov	r23, r15
    5094:	80 2f       	mov	r24, r16
    5096:	9d 2d       	mov	r25, r13
    5098:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__gesf2>
    509c:	18 16       	cp	r1, r24
    509e:	34 f4       	brge	.+12     	; 0x50ac <_Z4loopv+0x128>
						{
							dtmfY = i;
    50a0:	5c 2c       	mov	r5, r12
					g_goertzel.SetTargetFrequency(y_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
					magnitudeY = g_goertzel.Magnitude2(&clipCount);     /* Check samples for presence of the target frequency */

					if(magnitudeY > largestY)                           /* Use only the greatest Y value */
					{
						largestY = magnitudeY;
    50a2:	9e 2c       	mov	r9, r14
    50a4:	8f 2c       	mov	r8, r15
    50a6:	70 2e       	mov	r7, r16
    50a8:	6d 2c       	mov	r6, r13
    50aa:	04 c0       	rjmp	.+8      	; 0x50b4 <_Z4loopv+0x130>
    50ac:	9e 2c       	mov	r9, r14
    50ae:	8f 2c       	mov	r8, r15
    50b0:	70 2e       	mov	r7, r16
    50b2:	6d 2c       	mov	r6, r13
    50b4:	c3 94       	inc	r12
					g_voltage = getVoltage();
					setUpSampling(AUDIO_SAMPLING, FALSE);
					g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
				}

				for(int i = 0; i < 4; i++)
    50b6:	f4 e0       	ldi	r31, 0x04	; 4
    50b8:	cf 12       	cpse	r12, r31
    50ba:	c9 cf       	rjmp	.-110    	; 0x504e <_Z4loopv+0xca>
    50bc:	e4 c1       	rjmp	.+968    	; 0x5486 <_Z4loopv+0x502>

				if(dtmfY >= 0)
				{
					for(int i = 0; i < 4; i++)
					{
						g_goertzel.SetTargetFrequency(x_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
    50be:	f5 01       	movw	r30, r10
    50c0:	41 91       	ld	r20, Z+
    50c2:	51 91       	ld	r21, Z+
    50c4:	61 91       	ld	r22, Z+
    50c6:	71 91       	ld	r23, Z+
    50c8:	5f 01       	movw	r10, r30
    50ca:	8e ec       	ldi	r24, 0xCE	; 206
    50cc:	94 e0       	ldi	r25, 0x04	; 4
    50ce:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN8Goertzel18SetTargetFrequencyEf>
						magnitudeX = g_goertzel.Magnitude2(NULL);           /* Check samples for presence of the target frequency */
    50d2:	60 e0       	ldi	r22, 0x00	; 0
    50d4:	70 e0       	ldi	r23, 0x00	; 0
    50d6:	8e ec       	ldi	r24, 0xCE	; 206
    50d8:	94 e0       	ldi	r25, 0x04	; 4
    50da:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN8Goertzel10Magnitude2EPi>
    50de:	e6 2e       	mov	r14, r22
    50e0:	f7 2e       	mov	r15, r23
    50e2:	08 2f       	mov	r16, r24
    50e4:	d9 2e       	mov	r13, r25

						if(magnitudeX > largestX)                           /* Use only the greatest X value */
    50e6:	29 2d       	mov	r18, r9
    50e8:	38 2d       	mov	r19, r8
    50ea:	47 2d       	mov	r20, r7
    50ec:	56 2d       	mov	r21, r6
    50ee:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__gesf2>
    50f2:	18 16       	cp	r1, r24
    50f4:	b4 f4       	brge	.+44     	; 0x5122 <_Z4loopv+0x19e>
						{
							largestX = magnitudeX;
							if(magnitudeX > threshold)                      /* Only consider X above a certain threshold */
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	34 e2       	ldi	r19, 0x24	; 36
    50fa:	44 e7       	ldi	r20, 0x74	; 116
    50fc:	59 e4       	ldi	r21, 0x49	; 73
    50fe:	6e 2d       	mov	r22, r14
    5100:	7f 2d       	mov	r23, r15
    5102:	80 2f       	mov	r24, r16
    5104:	9d 2d       	mov	r25, r13
    5106:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__gesf2>
    510a:	18 16       	cp	r1, r24
    510c:	34 f4       	brge	.+12     	; 0x511a <_Z4loopv+0x196>
							{
								dtmfX = i;
    510e:	4c 2c       	mov	r4, r12
						g_goertzel.SetTargetFrequency(x_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
						magnitudeX = g_goertzel.Magnitude2(NULL);           /* Check samples for presence of the target frequency */

						if(magnitudeX > largestX)                           /* Use only the greatest X value */
						{
							largestX = magnitudeX;
    5110:	9e 2c       	mov	r9, r14
    5112:	8f 2c       	mov	r8, r15
    5114:	70 2e       	mov	r7, r16
    5116:	6d 2c       	mov	r6, r13
    5118:	04 c0       	rjmp	.+8      	; 0x5122 <_Z4loopv+0x19e>
    511a:	9e 2c       	mov	r9, r14
    511c:	8f 2c       	mov	r8, r15
    511e:	70 2e       	mov	r7, r16
    5120:	6d 2c       	mov	r6, r13
    5122:	c3 94       	inc	r12
#endif  /* DEBUG_DTMF */
				}

				if(dtmfY >= 0)
				{
					for(int i = 0; i < 4; i++)
    5124:	f4 e0       	ldi	r31, 0x04	; 4
    5126:	cf 12       	cpse	r12, r31
    5128:	ca cf       	rjmp	.-108    	; 0x50be <_Z4loopv+0x13a>
								lb_send_string(g_tempStr, TRUE);
							}
#endif  /* DEBUG_DTMF */
					}

					if(g_DTMF_sentence_in_progress_ticks || (checkCount < 3) || (clipCount < 50))
    512a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    512e:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    5132:	89 2b       	or	r24, r25
    5134:	59 f4       	brne	.+22     	; 0x514c <_Z4loopv+0x1c8>
    5136:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    513a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    513e:	03 97       	sbiw	r24, 0x03	; 3
    5140:	2c f0       	brlt	.+10     	; 0x514c <_Z4loopv+0x1c8>
    5142:	89 81       	ldd	r24, Y+1	; 0x01
    5144:	9a 81       	ldd	r25, Y+2	; 0x02
    5146:	c2 97       	sbiw	r24, 0x32	; 50
    5148:	0c f0       	brlt	.+2      	; 0x514c <_Z4loopv+0x1c8>
    514a:	4d c0       	rjmp	.+154    	; 0x51e6 <_Z4loopv+0x262>
					{
						if(dtmfX >= 0)
    514c:	44 20       	and	r4, r4
    514e:	0c f4       	brge	.+2      	; 0x5152 <_Z4loopv+0x1ce>
    5150:	70 c0       	rjmp	.+224    	; 0x5232 <_Z4loopv+0x2ae>
						{
							DTMF_key_t newKey = value2DTMFKey(4 * dtmfY + dtmfX);
    5152:	85 2d       	mov	r24, r5
    5154:	88 0f       	add	r24, r24
    5156:	88 0f       	add	r24, r24
    5158:	84 0d       	add	r24, r4
    515a:	0e 94 94 27 	call	0x4f28	; 0x4f28 <_Z13value2DTMFKeyh>
    515e:	08 2f       	mov	r16, r24
							dtmfDetected = TRUE;

							/* If the same key is detected three times in a row with no silent periods between them then register a new keypress */
							if(lastKey == newKey)
    5160:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_ZZ4loopvE7lastKey>
    5164:	08 13       	cpse	r16, r24
    5166:	3c c0       	rjmp	.+120    	; 0x51e0 <_Z4loopv+0x25c>
							{
								if(checkCount < 10)
    5168:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    516c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    5170:	8a 30       	cpi	r24, 0x0A	; 10
    5172:	91 05       	cpc	r25, r1
    5174:	2c f4       	brge	.+10     	; 0x5180 <_Z4loopv+0x1fc>
								{
									checkCount++;
    5176:	01 96       	adiw	r24, 0x01	; 1
    5178:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    517c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ4loopvE10checkCount>
								}

								if(checkCount == 3)
    5180:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    5184:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    5188:	03 97       	sbiw	r24, 0x03	; 3
    518a:	51 f5       	brne	.+84     	; 0x51e0 <_Z4loopv+0x25c>
								{
									g_dtmf_detected = TRUE;
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <g_dtmf_detected>
									quietCount = 0;
    5192:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZZ4loopvE10quietCount+0x1>
    5196:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <_ZZ4loopvE10quietCount>
									g_lastKey = newKey;
    519a:	00 93 d9 04 	sts	0x04D9, r16	; 0x8004d9 <g_lastKey>

/*#ifdef DEBUG_DTMF */
									if(lb_enabled())
    519e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <lb_enabled>
    51a2:	88 23       	and	r24, r24
    51a4:	c9 f0       	breq	.+50     	; 0x51d8 <_Z4loopv+0x254>
									{
										sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
    51a6:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_lastKey>
    51aa:	1f 92       	push	r1
    51ac:	8f 93       	push	r24
    51ae:	8f e1       	ldi	r24, 0x1F	; 31
    51b0:	92 e0       	ldi	r25, 0x02	; 2
    51b2:	9f 93       	push	r25
    51b4:	8f 93       	push	r24
    51b6:	86 ea       	ldi	r24, 0xA6	; 166
    51b8:	94 e0       	ldi	r25, 0x04	; 4
    51ba:	9f 93       	push	r25
    51bc:	8f 93       	push	r24
    51be:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
										lb_send_string(g_tempStr, TRUE);
    51c2:	61 e0       	ldi	r22, 0x01	; 1
    51c4:	86 ea       	ldi	r24, 0xA6	; 166
    51c6:	94 e0       	ldi	r25, 0x04	; 4
    51c8:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    51cc:	0f 90       	pop	r0
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	0f 90       	pop	r0
    51d4:	0f 90       	pop	r0
    51d6:	0f 90       	pop	r0
									}
/*#endif  / * DEBUG_DTMF * / */

									dtmfEntryError = processDTMFdetection(newKey);
    51d8:	80 2f       	mov	r24, r16
    51da:	0e 94 4c 23 	call	0x4698	; 0x4698 <_Z20processDTMFdetection10DTMF_key_t>
    51de:	18 2f       	mov	r17, r24
										}
#endif  /* DEBUG_DTMF */
								}
							}

							lastKey = newKey;
    51e0:	00 93 48 04 	sts	0x0448, r16	; 0x800448 <_ZZ4loopvE7lastKey>
    51e4:	75 c0       	rjmp	.+234    	; 0x52d0 <_Z4loopv+0x34c>
						}
					}
					else
					{
						noiseDetected = TRUE;
						g_dtmf_detected = TRUE;
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <g_dtmf_detected>

						digitalWrite(PIN_LED, ON);
    51ec:	61 e0       	ldi	r22, 0x01	; 1
    51ee:	80 e1       	ldi	r24, 0x10	; 16
    51f0:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
/*					g_config_error = NULL_CONFIG;   / * Trigger a new configuration enunciation * / */

						/*#ifdef DEBUG_DTMF */
						if(lb_enabled())
    51f4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <lb_enabled>
    51f8:	88 23       	and	r24, r24
    51fa:	09 f4       	brne	.+2      	; 0x51fe <_Z4loopv+0x27a>
    51fc:	69 c0       	rjmp	.+210    	; 0x52d0 <_Z4loopv+0x34c>
						{

							sprintf(g_tempStr, "ClipCount=%d\n", clipCount);
    51fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5200:	8f 93       	push	r24
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	8f 93       	push	r24
    5206:	85 e2       	ldi	r24, 0x25	; 37
    5208:	92 e0       	ldi	r25, 0x02	; 2
    520a:	9f 93       	push	r25
    520c:	8f 93       	push	r24
    520e:	86 ea       	ldi	r24, 0xA6	; 166
    5210:	94 e0       	ldi	r25, 0x04	; 4
    5212:	9f 93       	push	r25
    5214:	8f 93       	push	r24
    5216:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <sprintf>
							lb_send_string(g_tempStr, TRUE);
    521a:	61 e0       	ldi	r22, 0x01	; 1
    521c:	86 ea       	ldi	r24, 0xA6	; 166
    521e:	94 e0       	ldi	r25, 0x04	; 4
    5220:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
    5224:	0f 90       	pop	r0
    5226:	0f 90       	pop	r0
    5228:	0f 90       	pop	r0
    522a:	0f 90       	pop	r0
    522c:	0f 90       	pop	r0
    522e:	0f 90       	pop	r0
    5230:	4f c0       	rjmp	.+158    	; 0x52d0 <_Z4loopv+0x34c>
				}

				if(!dtmfDetected && !noiseDetected) /* Quiet detected */
				{
					static unsigned long lastQuiet = 0;
					unsigned long delta = g_tick_count - lastQuiet;
    5232:	c0 90 d5 04 	lds	r12, 0x04D5	; 0x8004d5 <g_tick_count>
    5236:	d0 90 d6 04 	lds	r13, 0x04D6	; 0x8004d6 <g_tick_count+0x1>
    523a:	e0 90 d7 04 	lds	r14, 0x04D7	; 0x8004d7 <g_tick_count+0x2>
    523e:	f0 90 d8 04 	lds	r15, 0x04D8	; 0x8004d8 <g_tick_count+0x3>
    5242:	80 90 42 04 	lds	r8, 0x0442	; 0x800442 <_ZZ4loopvE9lastQuiet>
    5246:	90 90 43 04 	lds	r9, 0x0443	; 0x800443 <_ZZ4loopvE9lastQuiet+0x1>
    524a:	a0 90 44 04 	lds	r10, 0x0444	; 0x800444 <_ZZ4loopvE9lastQuiet+0x2>
    524e:	b0 90 45 04 	lds	r11, 0x0445	; 0x800445 <_ZZ4loopvE9lastQuiet+0x3>

					/* Quieting must be detected at least 3 times in less than 2 seconds before another key can be accepted */
					if(quietCount++ > 2)
    5252:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <_ZZ4loopvE10quietCount>
    5256:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <_ZZ4loopvE10quietCount+0x1>
    525a:	9c 01       	movw	r18, r24
    525c:	2f 5f       	subi	r18, 0xFF	; 255
    525e:	3f 4f       	sbci	r19, 0xFF	; 255
    5260:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <_ZZ4loopvE10quietCount+0x1>
    5264:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <_ZZ4loopvE10quietCount>
    5268:	03 97       	sbiw	r24, 0x03	; 3
    526a:	0c f4       	brge	.+2      	; 0x526e <_Z4loopv+0x2ea>
    526c:	47 c0       	rjmp	.+142    	; 0x52fc <_Z4loopv+0x378>
					{
						g_dtmf_detected = FALSE;
    526e:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <g_dtmf_detected>
						if(g_transmissions_disabled && !g_LED_enunciating)
    5272:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    5276:	88 23       	and	r24, r24
    5278:	29 f0       	breq	.+10     	; 0x5284 <_Z4loopv+0x300>
    527a:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_LED_enunciating>
    527e:	88 23       	and	r24, r24
    5280:	09 f4       	brne	.+2      	; 0x5284 <_Z4loopv+0x300>
    5282:	12 c1       	rjmp	.+548    	; 0x54a8 <_Z4loopv+0x524>
						{
							digitalWrite(PIN_LED, OFF);
						}

						if(delta < TIMER2_SECONDS_2)
    5284:	c8 18       	sub	r12, r8
    5286:	d9 08       	sbc	r13, r9
    5288:	ea 08       	sbc	r14, r10
    528a:	fb 08       	sbc	r15, r11
    528c:	27 e2       	ldi	r18, 0x27	; 39
    528e:	c2 16       	cp	r12, r18
    5290:	2b e0       	ldi	r18, 0x0B	; 11
    5292:	d2 06       	cpc	r13, r18
    5294:	e1 04       	cpc	r14, r1
    5296:	f1 04       	cpc	r15, r1
    5298:	20 f4       	brcc	.+8      	; 0x52a2 <_Z4loopv+0x31e>
						{
							checkCount = 0;
    529a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    529e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ4loopvE10checkCount>
						}

						quietCount = 0;
    52a2:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZZ4loopvE10quietCount+0x1>
    52a6:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <_ZZ4loopvE10quietCount>
						lastQuiet = g_tick_count;
    52aa:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_tick_count>
    52ae:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_tick_count+0x1>
    52b2:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <g_tick_count+0x2>
    52b6:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <g_tick_count+0x3>
    52ba:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_ZZ4loopvE9lastQuiet>
    52be:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <_ZZ4loopvE9lastQuiet+0x1>
    52c2:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <_ZZ4loopvE9lastQuiet+0x2>
    52c6:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <_ZZ4loopvE9lastQuiet+0x3>
						lastKey = '\0';
    52ca:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZZ4loopvE7lastKey>
    52ce:	16 c0       	rjmp	.+44     	; 0x52fc <_Z4loopv+0x378>
					}
				}
				else if(g_tone_duration_ticks >= TIMER2_SECONDS_5)  /* The most likely cause of such a long tone is loud noise */
    52d0:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_tone_duration_ticks>
    52d4:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_tone_duration_ticks+0x1>
    52d8:	82 3e       	cpi	r24, 0xE2	; 226
    52da:	9b 41       	sbci	r25, 0x1B	; 27
    52dc:	78 f0       	brcs	.+30     	; 0x52fc <_Z4loopv+0x378>
				{
					g_dtmf_detected = FALSE;
    52de:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <g_dtmf_detected>
					g_config_error = NULL_CONFIG;
    52e2:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>

					if(g_transmissions_disabled && !g_LED_enunciating)
    52e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    52ea:	88 23       	and	r24, r24
    52ec:	29 f0       	breq	.+10     	; 0x52f8 <_Z4loopv+0x374>
    52ee:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_LED_enunciating>
    52f2:	88 23       	and	r24, r24
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <_Z4loopv+0x374>
    52f6:	dd c0       	rjmp	.+442    	; 0x54b2 <_Z4loopv+0x52e>
					{
						digitalWrite(PIN_LED, OFF);
					}

					lastKey = '\0';
    52f8:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZZ4loopvE7lastKey>
				}

				ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    52fc:	ea e7       	ldi	r30, 0x7A	; 122
    52fe:	f0 e0       	ldi	r31, 0x00	; 0
    5300:	80 81       	ld	r24, Z
    5302:	88 60       	ori	r24, 0x08	; 8
    5304:	80 83       	st	Z, r24
				ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    5306:	80 81       	ld	r24, Z
    5308:	80 64       	ori	r24, 0x40	; 64
    530a:	80 83       	st	Z, r24
			}
		}

	if(!g_on_the_air)
    530c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_on_the_air>
    5310:	81 11       	cpse	r24, r1
    5312:	e1 c0       	rjmp	.+450    	; 0x54d6 <_Z4loopv+0x552>
	{
		if(g_dtmf_error_countdown)
    5314:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_dtmf_error_countdown>
    5318:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <g_dtmf_error_countdown+0x1>
    531c:	89 2b       	or	r24, r25
    531e:	19 f0       	breq	.+6      	; 0x5326 <_Z4loopv+0x3a2>
		{
			g_dtmf_detected = FALSE;
    5320:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <g_dtmf_detected>
    5324:	d8 c0       	rjmp	.+432    	; 0x54d6 <_Z4loopv+0x552>
		}
		else if(dtmfEntryError)
    5326:	11 23       	and	r17, r17
    5328:	01 f1       	breq	.+64     	; 0x536a <_Z4loopv+0x3e6>
		{
			BOOL repeat = FALSE;
    532a:	1b 82       	std	Y+3, r1	; 0x03
			makeMorse(DTMF_ERROR_BLINK_PATTERN, &repeat, NULL);
    532c:	40 e0       	ldi	r20, 0x00	; 0
    532e:	50 e0       	ldi	r21, 0x00	; 0
    5330:	be 01       	movw	r22, r28
    5332:	6d 5f       	subi	r22, 0xFD	; 253
    5334:	7f 4f       	sbci	r23, 0xFF	; 255
    5336:	83 e3       	ldi	r24, 0x33	; 51
    5338:	92 e0       	ldi	r25, 0x02	; 2
    533a:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(30);
    533e:	8e e2       	ldi	r24, 0x2E	; 46
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_code_throttle+0x1>
    5346:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_code_throttle>
			g_LED_enunciating = TRUE;
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_LED_enunciating>
			g_dtmf_detected = FALSE;
    5350:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <g_dtmf_detected>
			g_dtmf_error_countdown = TIMER2_SECONDS_3;
    5354:	8b eb       	ldi	r24, 0xBB	; 187
    5356:	90 e1       	ldi	r25, 0x10	; 16
    5358:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <g_dtmf_error_countdown+0x1>
    535c:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <g_dtmf_error_countdown>
			g_LED_Enunciation_holdoff = 0;
    5360:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    5364:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_LED_Enunciation_holdoff>
    5368:	b6 c0       	rjmp	.+364    	; 0x54d6 <_Z4loopv+0x552>
		}
		else if(g_dtmf_detected)
    536a:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <g_dtmf_detected>
    536e:	88 23       	and	r24, r24
    5370:	39 f0       	breq	.+14     	; 0x5380 <_Z4loopv+0x3fc>
		{
			digitalWrite(PIN_LED, ON);
    5372:	61 e0       	ldi	r22, 0x01	; 1
    5374:	80 e1       	ldi	r24, 0x10	; 16
    5376:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    537a:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_config_error>
    537e:	ab c0       	rjmp	.+342    	; 0x54d6 <_Z4loopv+0x552>
		}
		else if(g_transmissions_disabled)
    5380:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_transmissions_disabled>
    5384:	88 23       	and	r24, r24
    5386:	09 f4       	brne	.+2      	; 0x538a <_Z4loopv+0x406>
    5388:	69 c0       	rjmp	.+210    	; 0x545c <_Z4loopv+0x4d8>
		{
			if(g_LED_timeout_countdown && !g_LED_Enunciation_holdoff && !g_DTMF_sentence_in_progress_ticks)
    538a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    538e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    5392:	89 2b       	or	r24, r25
    5394:	09 f4       	brne	.+2      	; 0x5398 <_Z4loopv+0x414>
    5396:	9d c0       	rjmp	.+314    	; 0x54d2 <_Z4loopv+0x54e>
    5398:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_LED_Enunciation_holdoff>
    539c:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_LED_Enunciation_holdoff+0x1>
    53a0:	89 2b       	or	r24, r25
    53a2:	09 f0       	breq	.+2      	; 0x53a6 <_Z4loopv+0x422>
    53a4:	96 c0       	rjmp	.+300    	; 0x54d2 <_Z4loopv+0x54e>
    53a6:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_DTMF_sentence_in_progress_ticks>
    53aa:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_DTMF_sentence_in_progress_ticks+0x1>
    53ae:	89 2b       	or	r24, r25
    53b0:	09 f4       	brne	.+2      	; 0x53b4 <_Z4loopv+0x430>
    53b2:	84 c0       	rjmp	.+264    	; 0x54bc <_Z4loopv+0x538>
    53b4:	8e c0       	rjmp	.+284    	; 0x54d2 <_Z4loopv+0x54e>
				ConfigurationState_t hold_config_err = g_config_error;
				g_config_error = clockConfigurationCheck();

				if(g_config_error != hold_config_err)
				{
					if(g_config_error == CONFIGURATION_ERROR)
    53b6:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_config_error>
    53ba:	82 30       	cpi	r24, 0x02	; 2
    53bc:	a1 f4       	brne	.+40     	; 0x53e6 <_Z4loopv+0x462>
					{
						BOOL repeat = TRUE;
    53be:	11 e0       	ldi	r17, 0x01	; 1
    53c0:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    53c2:	40 e0       	ldi	r20, 0x00	; 0
    53c4:	50 e0       	ldi	r21, 0x00	; 0
    53c6:	be 01       	movw	r22, r28
    53c8:	6d 5f       	subi	r22, 0xFD	; 253
    53ca:	7f 4f       	sbci	r23, 0xFF	; 255
    53cc:	8c e3       	ldi	r24, 0x3C	; 60
    53ce:	92 e0       	ldi	r25, 0x02	; 2
    53d0:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    53d4:	8c e8       	ldi	r24, 0x8C	; 140
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_code_throttle+0x1>
    53dc:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_code_throttle>
						g_LED_enunciating = TRUE;
    53e0:	10 93 5d 05 	sts	0x055D, r17	; 0x80055d <g_LED_enunciating>
    53e4:	78 c0       	rjmp	.+240    	; 0x54d6 <_Z4loopv+0x552>
					}
					else if(g_config_error == WAITING_FOR_START)
    53e6:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_config_error>
    53ea:	81 30       	cpi	r24, 0x01	; 1
    53ec:	a1 f4       	brne	.+40     	; 0x5416 <_Z4loopv+0x492>
					{
						BOOL repeat = TRUE;
    53ee:	11 e0       	ldi	r17, 0x01	; 1
    53f0:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    53f2:	40 e0       	ldi	r20, 0x00	; 0
    53f4:	50 e0       	ldi	r21, 0x00	; 0
    53f6:	be 01       	movw	r22, r28
    53f8:	6d 5f       	subi	r22, 0xFD	; 253
    53fa:	7f 4f       	sbci	r23, 0xFF	; 255
    53fc:	8f e3       	ldi	r24, 0x3F	; 63
    53fe:	92 e0       	ldi	r25, 0x02	; 2
    5400:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    5404:	86 e4       	ldi	r24, 0x46	; 70
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_code_throttle+0x1>
    540c:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_code_throttle>
						g_LED_enunciating = TRUE;
    5410:	10 93 5d 05 	sts	0x055D, r17	; 0x80055d <g_LED_enunciating>
    5414:	60 c0       	rjmp	.+192    	; 0x54d6 <_Z4loopv+0x552>
					}
					else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    5416:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_config_error>
    541a:	84 30       	cpi	r24, 0x04	; 4
    541c:	21 f0       	breq	.+8      	; 0x5426 <_Z4loopv+0x4a2>
    541e:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_config_error>
    5422:	83 30       	cpi	r24, 0x03	; 3
    5424:	a1 f4       	brne	.+40     	; 0x544e <_Z4loopv+0x4ca>
					{
						BOOL repeat = TRUE;
    5426:	11 e0       	ldi	r17, 0x01	; 1
    5428:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    542a:	40 e0       	ldi	r20, 0x00	; 0
    542c:	50 e0       	ldi	r21, 0x00	; 0
    542e:	be 01       	movw	r22, r28
    5430:	6d 5f       	subi	r22, 0xFD	; 253
    5432:	7f 4f       	sbci	r23, 0xFF	; 255
    5434:	8c e3       	ldi	r24, 0x3C	; 60
    5436:	92 e0       	ldi	r25, 0x02	; 2
    5438:	0e 94 77 2c 	call	0x58ee	; 0x58ee <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    543c:	8c e8       	ldi	r24, 0x8C	; 140
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_code_throttle+0x1>
    5444:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_code_throttle>
						g_LED_enunciating = TRUE;
    5448:	10 93 5d 05 	sts	0x055D, r17	; 0x80055d <g_LED_enunciating>
    544c:	44 c0       	rjmp	.+136    	; 0x54d6 <_Z4loopv+0x552>
					}
					else
					{
						g_LED_enunciating = FALSE;
    544e:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_LED_enunciating>
						digitalWrite(PIN_LED, OFF); /* ensure LED is off */
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	80 e1       	ldi	r24, 0x10	; 16
    5456:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    545a:	3d c0       	rjmp	.+122    	; 0x54d6 <_Z4loopv+0x552>
				g_LED_enunciating = FALSE;
			}
		}
		else
		{
			g_LED_enunciating = FALSE;
    545c:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_LED_enunciating>
			digitalWrite(PIN_LED, OFF); /* ensure LED is off */
    5460:	60 e0       	ldi	r22, 0x00	; 0
    5462:	80 e1       	ldi	r24, 0x10	; 16
    5464:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
		}
	}
#endif  /* !INIT_EEPROM_ONLY */
}
    5468:	36 c0       	rjmp	.+108    	; 0x54d6 <_Z4loopv+0x552>
    546a:	0f 2e       	mov	r0, r31
    546c:	fb e5       	ldi	r31, 0x5B	; 91
    546e:	af 2e       	mov	r10, r31
    5470:	f2 e0       	ldi	r31, 0x02	; 2
    5472:	bf 2e       	mov	r11, r31
    5474:	f0 2d       	mov	r31, r0

/***********************************************************************
 *   Here is the main loop
 ************************************************************************/
void loop()
{
    5476:	c1 2c       	mov	r12, r1
    5478:	91 2c       	mov	r9, r1
    547a:	81 2c       	mov	r8, r1
    547c:	71 2c       	mov	r7, r1
    547e:	61 2c       	mov	r6, r1
    5480:	55 24       	eor	r5, r5
    5482:	5a 94       	dec	r5
    5484:	e4 cd       	rjmp	.-1080   	; 0x504e <_Z4loopv+0xca>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(dtmfY >= 0)
    5486:	55 20       	and	r5, r5
    5488:	0c f4       	brge	.+2      	; 0x548c <_Z4loopv+0x508>
    548a:	d3 ce       	rjmp	.-602    	; 0x5232 <_Z4loopv+0x2ae>
    548c:	0f 2e       	mov	r0, r31
    548e:	fb e6       	ldi	r31, 0x6B	; 107
    5490:	af 2e       	mov	r10, r31
    5492:	f2 e0       	ldi	r31, 0x02	; 2
    5494:	bf 2e       	mov	r11, r31
    5496:	f0 2d       	mov	r31, r0
    5498:	c1 2c       	mov	r12, r1
    549a:	91 2c       	mov	r9, r1
    549c:	81 2c       	mov	r8, r1
    549e:	71 2c       	mov	r7, r1
    54a0:	61 2c       	mov	r6, r1
    54a2:	44 24       	eor	r4, r4
    54a4:	4a 94       	dec	r4
    54a6:	0b ce       	rjmp	.-1002   	; 0x50be <_Z4loopv+0x13a>
					if(quietCount++ > 2)
					{
						g_dtmf_detected = FALSE;
						if(g_transmissions_disabled && !g_LED_enunciating)
						{
							digitalWrite(PIN_LED, OFF);
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	80 e1       	ldi	r24, 0x10	; 16
    54ac:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    54b0:	e9 ce       	rjmp	.-558    	; 0x5284 <_Z4loopv+0x300>
					g_dtmf_detected = FALSE;
					g_config_error = NULL_CONFIG;

					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED, OFF);
    54b2:	60 e0       	ldi	r22, 0x00	; 0
    54b4:	80 e1       	ldi	r24, 0x10	; 16
    54b6:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>
    54ba:	1e cf       	rjmp	.-452    	; 0x52f8 <_Z4loopv+0x374>
		}
		else if(g_transmissions_disabled)
		{
			if(g_LED_timeout_countdown && !g_LED_Enunciation_holdoff && !g_DTMF_sentence_in_progress_ticks)
			{
				ConfigurationState_t hold_config_err = g_config_error;
    54bc:	10 91 0e 05 	lds	r17, 0x050E	; 0x80050e <g_config_error>
				g_config_error = clockConfigurationCheck();
    54c0:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z23clockConfigurationCheckv>
    54c4:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <g_config_error>

				if(g_config_error != hold_config_err)
    54c8:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_config_error>
    54cc:	18 13       	cpse	r17, r24
    54ce:	73 cf       	rjmp	.-282    	; 0x53b6 <_Z4loopv+0x432>
    54d0:	02 c0       	rjmp	.+4      	; 0x54d6 <_Z4loopv+0x552>
					}
				}
			}
			else
			{
				g_LED_enunciating = FALSE;
    54d2:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_LED_enunciating>
			g_LED_enunciating = FALSE;
			digitalWrite(PIN_LED, OFF); /* ensure LED is off */
		}
	}
#endif  /* !INIT_EEPROM_ONLY */
}
    54d6:	0f 90       	pop	r0
    54d8:	0f 90       	pop	r0
    54da:	0f 90       	pop	r0
    54dc:	df 91       	pop	r29
    54de:	cf 91       	pop	r28
    54e0:	1f 91       	pop	r17
    54e2:	0f 91       	pop	r16
    54e4:	ff 90       	pop	r15
    54e6:	ef 90       	pop	r14
    54e8:	df 90       	pop	r13
    54ea:	cf 90       	pop	r12
    54ec:	bf 90       	pop	r11
    54ee:	af 90       	pop	r10
    54f0:	9f 90       	pop	r9
    54f2:	8f 90       	pop	r8
    54f4:	7f 90       	pop	r7
    54f6:	6f 90       	pop	r6
    54f8:	5f 90       	pop	r5
    54fa:	4f 90       	pop	r4
    54fc:	08 95       	ret

000054fe <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    54fe:	63 e0       	ldi	r22, 0x03	; 3
    5500:	81 e1       	ldi	r24, 0x11	; 17
    5502:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	pinMode(PIN_LED, OUTPUT);                             /* This is the enunciator LED */
    5506:	61 e0       	ldi	r22, 0x01	; 1
    5508:	80 e1       	ldi	r24, 0x10	; 16
    550a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_LED, OFF);
    550e:	60 e0       	ldi	r22, 0x00	; 0
    5510:	80 e1       	ldi	r24, 0x10	; 16
    5512:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    5516:	61 e0       	ldi	r22, 0x01	; 1
    5518:	86 e0       	ldi	r24, 0x06	; 6
    551a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    551e:	60 e0       	ldi	r22, 0x00	; 0
    5520:	86 e0       	ldi	r24, 0x06	; 6
    5522:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    5526:	61 e0       	ldi	r22, 0x01	; 1
    5528:	85 e0       	ldi	r24, 0x05	; 5
    552a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    552e:	60 e0       	ldi	r22, 0x00	; 0
    5530:	85 e0       	ldi	r24, 0x05	; 5
    5532:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    5536:	61 e0       	ldi	r22, 0x01	; 1
    5538:	84 e0       	ldi	r24, 0x04	; 4
    553a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    553e:	60 e0       	ldi	r22, 0x00	; 0
    5540:	84 e0       	ldi	r24, 0x04	; 4
    5542:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    5546:	60 e0       	ldi	r22, 0x00	; 0
    5548:	84 e1       	ldi	r24, 0x14	; 20
    554a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    554e:	60 e0       	ldi	r22, 0x00	; 0
    5550:	85 e1       	ldi	r24, 0x15	; 21
    5552:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	pinMode(PIN_PWDN, OUTPUT);
    5556:	61 e0       	ldi	r22, 0x01	; 1
    5558:	87 e0       	ldi	r24, 0x07	; 7
    555a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	digitalWrite(PIN_PWDN, ON);
    555e:	61 e0       	ldi	r22, 0x01	; 1
    5560:	87 e0       	ldi	r24, 0x07	; 7
    5562:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

	pinMode(PIN_SCL, INPUT_PULLUP);
    5566:	63 e0       	ldi	r22, 0x03	; 3
    5568:	83 e1       	ldi	r24, 0x13	; 19
    556a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
	pinMode(PIN_SDA, INPUT_PULLUP);
    556e:	63 e0       	ldi	r22, 0x03	; 3
    5570:	82 e1       	ldi	r24, 0x12	; 18
    5572:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	pinMode(PIN_RTC_SQW, INPUT_PULLUP);
    5576:	63 e0       	ldi	r22, 0x03	; 3
    5578:	82 e0       	ldi	r24, 0x02	; 2
    557a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>

	linkbus_disable();
    557e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <linkbus_disable>

		pinMode(PIN_UNUSED_8, OUTPUT);
		digitalWrite(PIN_UNUSED_8, OFF);
#else
		/*	Set unused port pins */
		pinMode(PIN_UNUSED_1, OUTPUT);
    5582:	61 e0       	ldi	r22, 0x01	; 1
    5584:	83 e0       	ldi	r24, 0x03	; 3
    5586:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
		digitalWrite(PIN_UNUSED_1, OFF);
    558a:	60 e0       	ldi	r22, 0x00	; 0
    558c:	83 e0       	ldi	r24, 0x03	; 3
    558e:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

		pinMode(PIN_UNUSED_2, OUTPUT);
    5592:	61 e0       	ldi	r22, 0x01	; 1
    5594:	8e e0       	ldi	r24, 0x0E	; 14
    5596:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
		digitalWrite(PIN_UNUSED_2, OFF);
    559a:	60 e0       	ldi	r22, 0x00	; 0
    559c:	8e e0       	ldi	r24, 0x0E	; 14
    559e:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

		pinMode(PIN_UNUSED_3, OUTPUT);
    55a2:	61 e0       	ldi	r22, 0x01	; 1
    55a4:	8f e0       	ldi	r24, 0x0F	; 15
    55a6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pinMode>
		digitalWrite(PIN_UNUSED_3, OFF);
    55aa:	60 e0       	ldi	r22, 0x00	; 0
    55ac:	8f e0       	ldi	r24, 0x0F	; 15
    55ae:	0e 94 94 02 	call	0x528	; 0x528 <digitalWrite>

		/*	Set attenuator control port pins */
		DDRB |= 0x3F;
    55b2:	84 b1       	in	r24, 0x04	; 4
    55b4:	8f 63       	ori	r24, 0x3F	; 63
    55b6:	84 b9       	out	0x04, r24	; 4
		PORTB &= 0xC0;
    55b8:	85 b1       	in	r24, 0x05	; 5
    55ba:	80 7c       	andi	r24, 0xC0	; 192
    55bc:	85 b9       	out	0x05, r24	; 5
#endif  /* !SUPPORT_ONLY_80M */

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars();                                 /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    55be:	0e 94 c4 09 	call	0x1388	; 0x1388 <i2c_init>
		BOOL eepromErr = ee_mgr.readNonVols();
    55c2:	8c e6       	ldi	r24, 0x6C	; 108
    55c4:	95 e0       	ldi	r25, 0x05	; 5
    55c6:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13EepromManager11readNonVolsEv>
    55ca:	c8 2f       	mov	r28, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    55cc:	61 e0       	ldi	r22, 0x01	; 1
    55ce:	80 e0       	ldi	r24, 0x00	; 0
    55d0:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    55d4:	f8 94       	cli

	/*******************************************************************
	 *  TIMER2 is for periodic interrupts to drive Morse code generation
	 *  Reset control registers */
	TCCR2A = 0;
    55d6:	a0 eb       	ldi	r26, 0xB0	; 176
    55d8:	b0 e0       	ldi	r27, 0x00	; 0
    55da:	1c 92       	st	X, r1
	TCCR2B = 0;
    55dc:	e1 eb       	ldi	r30, 0xB1	; 177
    55de:	f0 e0       	ldi	r31, 0x00	; 0
    55e0:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    55e2:	8c 91       	ld	r24, X
    55e4:	82 60       	ori	r24, 0x02	; 2
    55e6:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    55e8:	80 81       	ld	r24, Z
    55ea:	87 60       	ori	r24, 0x07	; 7
    55ec:	80 83       	st	Z, r24

#if F_CPU == 16000000UL
		OCR2A = 0x0C;                                   /* set frequency to ~300 Hz (0x0c) */
    55ee:	8c e0       	ldi	r24, 0x0C	; 12
    55f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
#else
		OCR2A = 0x06;                                   /* set frequency to ~300 Hz (0x0c) */
#endif

	OCR2B = 0x00;
    55f4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    55f8:	e6 eb       	ldi	r30, 0xB6	; 182
    55fa:	f0 e0       	ldi	r31, 0x00	; 0
    55fc:	80 81       	ld	r24, Z
    55fe:	8f 7d       	andi	r24, 0xDF	; 223
    5600:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    5602:	e0 e7       	ldi	r30, 0x70	; 112
    5604:	f0 e0       	ldi	r31, 0x00	; 0
    5606:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    5608:	80 81       	ld	r24, Z
    560a:	84 60       	ori	r24, 0x04	; 4
    560c:	80 83       	st	Z, r24

	/*******************************************************************
	 *  Timer 1 is used for controlling the attenuator for AM generation
	 *  set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                 /* set entire TCCR1A register to 0 */
    560e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                 /* same for TCCR1B */
    5612:	e1 e8       	ldi	r30, 0x81	; 129
    5614:	f0 e0       	ldi	r31, 0x00	; 0
    5616:	10 82       	st	Z, r1
	TCNT1 = 0;                  /* initialize counter value to 0 */
    5618:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    561c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
#if !SUPPORT_ONLY_80M
		/* turn on CTC mode */
		TCCR1B |= (1 << WGM12);
    5620:	80 81       	ld	r24, Z
    5622:	88 60       	ori	r24, 0x08	; 8
    5624:	80 83       	st	Z, r24
		/* Set CS10 bit for no prescaling */
		TCCR1B |= (1 << CS10);
    5626:	80 81       	ld	r24, Z
    5628:	81 60       	ori	r24, 0x01	; 1
    562a:	80 83       	st	Z, r24
#endif  /* !SUPPORT_ONLY_80M */

	/********************************************************************/
	/* Timer 0 is for FM audio tone generation and control
	 *  Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    562c:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    562e:	84 b5       	in	r24, 0x24	; 36
    5630:	82 60       	ori	r24, 0x02	; 2
    5632:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    5634:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    5636:	85 b5       	in	r24, 0x25	; 37
    5638:	84 60       	ori	r24, 0x04	; 4
    563a:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    563c:	8f e2       	ldi	r24, 0x2F	; 47
    563e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    5640:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

	/*******************************************************************
	 *  Sync button pin change interrupt */
	PCMSK2 = 0x00;
    5644:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	PCMSK1 = 0x00;
    5648:	ec e6       	ldi	r30, 0x6C	; 108
    564a:	f0 e0       	ldi	r31, 0x00	; 0
    564c:	10 82       	st	Z, r1
	PCMSK1 = (1 << PCINT11);    /* Enable PCINT11 */
    564e:	88 e0       	ldi	r24, 0x08	; 8
    5650:	80 83       	st	Z, r24
	PCICR = 0x00;
    5652:	e8 e6       	ldi	r30, 0x68	; 104
    5654:	f0 e0       	ldi	r31, 0x00	; 0
    5656:	10 82       	st	Z, r1
	PCICR = (1 << PCIE1);       /* Enable pin change interrupt 1 */
    5658:	82 e0       	ldi	r24, 0x02	; 2
    565a:	80 83       	st	Z, r24
#if SUPPORT_ONLY_80M
		setAMToneFrequency(AM_DISABLED);
#else
		/*******************************************************************
		*  AM attenuator initialization (also affects FM tone enable)     */
		setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    565c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_AM_audio_frequency>
    5660:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_Z18setAMToneFrequency14AM_Tone_Freq_t>
#endif /* !SUPPORT_ONLY_80M */

	sei();                                          /* Enable interrupts */
    5664:	78 94       	sei

	linkbus_init(BAUD);                             /* Start the Link Bus serial comms */
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	71 ee       	ldi	r23, 0xE1	; 225
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <linkbus_init>

#ifndef TRANQUILIZE_WATCHDOG
		wdt_init(WD_SW_RESETS);
    5672:	80 e0       	ldi	r24, 0x00	; 0
    5674:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z8wdt_init7WDReset>
		wdt_reset();                                /* HW watchdog */
    5678:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */

	g_reset_button_held = !digitalRead(PIN_SYNC);
    567a:	81 e1       	ldi	r24, 0x11	; 17
    567c:	0e 94 49 02 	call	0x492	; 0x492 <digitalRead>
    5680:	91 e0       	ldi	r25, 0x01	; 1
    5682:	81 11       	cpse	r24, r1
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    568a:	cc 23       	and	r28, r28
    568c:	29 f0       	breq	.+10     	; 0x5698 <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    568e:	61 e0       	ldi	r22, 0x01	; 1
    5690:	8c e4       	ldi	r24, 0x4C	; 76
    5692:	92 e0       	ldi	r25, 0x02	; 2
    5694:	0e 94 c7 0c 	call	0x198e	; 0x198e <lb_send_string>
		}

#if INCLUDE_RV3028_SUPPORT
		BOOL result = RTC_1s_sqw(ON);
#else
		RTC_1s_sqw(ON);
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	0e 94 21 05 	call	0xa42	; 0xa42 <_Z10RTC_1s_sqwh>
#endif

#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    569e:	8c e6       	ldi	r24, 0x6C	; 108
    56a0:	95 e0       	ldi	r25, 0x05	; 5
    56a2:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13EepromManager9send_HelpEv>
		{
			lb_send_string(g_tempStr, TRUE);
		}
#endif

		reportConfigErrors();
    56a6:	0e 94 16 1a 	call	0x342c	; 0x342c <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    56aa:	0e 94 a7 0c 	call	0x194e	; 0x194e <lb_send_NewPrompt>

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    56ae:	80 e0       	ldi	r24, 0x00	; 0
    56b0:	0e 94 36 19 	call	0x326c	; 0x326c <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 *  INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    56b4:	e9 e6       	ldi	r30, 0x69	; 105
    56b6:	f0 e0       	ldi	r31, 0x00	; 0
    56b8:	80 81       	ld	r24, Z
    56ba:	82 60       	ori	r24, 0x02	; 2
    56bc:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    56be:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    56c0:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <_Z4loopv>
    56c4:	fd cf       	rjmp	.-6      	; 0x56c0 <main+0x1c2>

000056c6 <_GLOBAL__sub_I_ee_mgr>:
	{
		key = D_KEY;
	}

	return( key);
}
    56c6:	0f 93       	push	r16
    56c8:	1f 93       	push	r17
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

#include <avr/wdt.h>

EepromManager ee_mgr;
    56ca:	8c e6       	ldi	r24, 0x6C	; 108
    56cc:	95 e0       	ldi	r25, 0x05	; 5
    56ce:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN13EepromManagerC1Ev>
volatile unsigned int g_tone_duration_ticks = 0;
volatile unsigned int g_LED_Enunciation_holdoff = 0;
volatile unsigned int g_DTMF_sentence_in_progress_ticks = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    56d2:	00 e0       	ldi	r16, 0x00	; 0
    56d4:	18 e7       	ldi	r17, 0x78	; 120
    56d6:	26 e9       	ldi	r18, 0x96	; 150
    56d8:	36 e4       	ldi	r19, 0x46	; 70
    56da:	40 e0       	ldi	r20, 0x00	; 0
    56dc:	50 e0       	ldi	r21, 0x00	; 0
    56de:	69 e4       	ldi	r22, 0x49	; 73
    56e0:	73 e4       	ldi	r23, 0x43	; 67
    56e2:	8e ec       	ldi	r24, 0xCE	; 206
    56e4:	94 e0       	ldi	r25, 0x04	; 4
    56e6:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN8GoertzelC1Eff>
	{
		key = D_KEY;
	}

	return( key);
}
    56ea:	1f 91       	pop	r17
    56ec:	0f 91       	pop	r16
    56ee:	08 95       	ret

000056f0 <_GLOBAL__sub_D_ee_mgr>:
volatile unsigned int g_tone_duration_ticks = 0;
volatile unsigned int g_LED_Enunciation_holdoff = 0;
volatile unsigned int g_DTMF_sentence_in_progress_ticks = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    56f0:	8e ec       	ldi	r24, 0xCE	; 206
    56f2:	94 e0       	ldi	r25, 0x04	; 4
    56f4:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN8GoertzelD1Ev>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

#include <avr/wdt.h>

EepromManager ee_mgr;
    56f8:	8c e6       	ldi	r24, 0x6C	; 108
    56fa:	95 e0       	ldi	r25, 0x05	; 5
    56fc:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13EepromManagerD1Ev>
    5700:	08 95       	ret

00005702 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	0e 94 93 32 	call	0x6526	; 0x6526 <toupper>

	switch( c )
    5708:	fc 01       	movw	r30, r24
    570a:	ff 27       	eor	r31, r31
    570c:	b0 97       	sbiw	r30, 0x20	; 32
    570e:	ed 35       	cpi	r30, 0x5D	; 93
    5710:	f1 05       	cpc	r31, r1
    5712:	08 f0       	brcs	.+2      	; 0x5716 <_Z12getMorseCharc+0x14>
    5714:	e4 c0       	rjmp	.+456    	; 0x58de <_Z12getMorseCharc+0x1dc>
    5716:	e0 54       	subi	r30, 0x40	; 64
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    571e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    5720:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5722:	61 e0       	ldi	r22, 0x01	; 1
    5724:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5726:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    5728:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    572a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    572c:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    572e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    5730:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5732:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    5734:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    5736:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    5738:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    573a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    573c:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    573e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    5740:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5742:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    5744:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5746:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    5748:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    574a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    574c:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    574e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    5750:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5752:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    5754:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    5756:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    5758:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    575a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    575c:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    575e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    5760:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    5762:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    5764:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5766:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    5768:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    576a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    576c:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    576e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    5770:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5772:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    5774:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    5776:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    5778:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    577a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    577c:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    577e:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    5780:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5782:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    5784:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    5786:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    5788:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    578a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    578c:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    578e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    5790:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5792:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    5794:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    5796:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    5798:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    579a:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    579c:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    579e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    57a0:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    57a2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    57a4:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    57a6:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    57a8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    57aa:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    57ac:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    57ae:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    57b0:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    57b2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    57b4:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    57b6:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    57b8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    57ba:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    57bc:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    57be:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    57c0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    57c2:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    57c4:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    57c6:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    57c8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    57ca:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    57cc:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    57ce:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    57d0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    57d2:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    57d4:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    57d6:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    57d8:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    57da:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    57dc:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    57de:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    57e0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    57e2:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    57e4:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    57e6:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    57e8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    57ea:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    57ec:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    57ee:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    57f0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    57f2:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    57f4:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    57f6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    57f8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    57fa:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    57fc:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    57fe:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    5800:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    5802:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5804:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5806:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    5808:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    580a:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    580c:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    580e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    5810:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5812:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    5814:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5816:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    5818:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    581a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    581c:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    581e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    5820:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5822:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5824:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5826:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    5828:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    582a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    582c:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    582e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    5830:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    5832:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    5834:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5836:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    5838:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    583a:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    583c:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    583e:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    5840:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    5842:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5844:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5846:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    5848:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    584a:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    584c:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    584e:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    5850:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5852:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5854:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5856:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    5858:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    585a:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    585c:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    585e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    5860:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5862:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5864:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5866:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    5868:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    586a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    586c:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    586e:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    5870:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    5872:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5874:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5876:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    5878:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    587a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    587c:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    587e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    5880:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5882:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5884:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    5886:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    5888:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    588a:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    588c:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    588e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    5890:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    5892:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5894:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5896:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    5898:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    589a:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    589c:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    589e:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    58a0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    58a2:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    58a4:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    58a6:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    58a8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    58aa:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    58ac:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    58ae:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    58b0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    58b2:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    58b4:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    58b6:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    58b8:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    58ba:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    58bc:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    58be:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    58c0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    58c2:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    58c4:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    58c6:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    58c8:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    58ca:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    58cc:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    58ce:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    58d0:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    58d2:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    58d4:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    58d6:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    58d8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    58da:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    58dc:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    58de:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    58e0:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    58e2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    58e4:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    58e6:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    58e8:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    58ea:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    58ec:	08 95       	ret

000058ee <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    58ee:	cf 93       	push	r28
    58f0:	df 93       	push	r29
    58f2:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	09 f4       	brne	.+2      	; 0x58fa <makeMorse+0xc>
    58f8:	41 c0       	rjmp	.+130    	; 0x597c <makeMorse+0x8e>
	{
		holdKeyDown = FALSE;
    58fa:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>

		if(repeating)
    58fe:	61 15       	cp	r22, r1
    5900:	71 05       	cpc	r23, r1
    5902:	21 f0       	breq	.+8      	; 0x590c <makeMorse+0x1e>
		{
			repeat = *repeating;
    5904:	db 01       	movw	r26, r22
    5906:	2c 91       	ld	r18, X
    5908:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <_ZZ9makeMorseE6repeat>
		}

		if(*s)
    590c:	fc 01       	movw	r30, r24
    590e:	20 81       	ld	r18, Z
    5910:	22 23       	and	r18, r18
    5912:	31 f1       	breq	.+76     	; 0x5960 <makeMorse+0x72>
		{
			if(str != s) /* Passing in the same pointer will not change the state of Morse.c */
    5914:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <_ZZ9makeMorseE3str>
    5918:	50 91 77 05 	lds	r21, 0x0577	; 0x800577 <_ZZ9makeMorseE3str+0x1>
    591c:	84 17       	cp	r24, r20
    591e:	95 07       	cpc	r25, r21
    5920:	09 f4       	brne	.+2      	; 0x5924 <makeMorse+0x36>
    5922:	e9 c0       	rjmp	.+466    	; 0x5af6 <makeMorse+0x208>
			{
				str = s;
    5924:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <_ZZ9makeMorseE3str+0x1>
    5928:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <_ZZ9makeMorseE3str>
				c = ' ';
    592c:	80 e2       	ldi	r24, 0x20	; 32
    592e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZZ9makeMorseE1c>
				morseInProgress = getMorseChar(*str);
    5932:	82 2f       	mov	r24, r18
    5934:	0e 94 81 2b 	call	0x5702	; 0x5702 <_Z12getMorseCharc>
    5938:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <_ZZ9makeMorseE15morseInProgress>
    593c:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <_ZZ9makeMorseE15morseInProgress+0x1>
    5940:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <_ZZ9makeMorseE15morseInProgress+0x2>
				charIndex = 0;
    5944:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_ZZ9makeMorseE9charIndex>
				symbolIndex = 0;
    5948:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_ZZ9makeMorseE11symbolIndex>
				elementIndex = 0;
    594c:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE12elementIndex>
				addedSpace = 0;
    5950:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE10addedSpace>
				completedString = FALSE;
    5954:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <_ZZ9makeMorseE15completedString>
				carrierOn = FALSE;
    5958:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZZ9makeMorseE9carrierOn>
			}

			carrierOn = FALSE;
		}

		return( OFF);
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	d0 c0       	rjmp	.+416    	; 0x5b00 <makeMorse+0x212>
				carrierOn = FALSE;
			}
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    5960:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <_ZZ9makeMorseE3str+0x1>
    5964:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <_ZZ9makeMorseE3str>
			completedString = TRUE;
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <_ZZ9makeMorseE15completedString>
			if(finished)
    596e:	20 97       	sbiw	r28, 0x00	; 0
    5970:	09 f0       	breq	.+2      	; 0x5974 <makeMorse+0x86>
			{
				*finished = TRUE;
    5972:	88 83       	st	Y, r24
			}

			carrierOn = FALSE;
    5974:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZZ9makeMorseE9carrierOn>
		}

		return( OFF);
    5978:	80 e0       	ldi	r24, 0x00	; 0
    597a:	c2 c0       	rjmp	.+388    	; 0x5b00 <makeMorse+0x212>
	}
	else if(str)
    597c:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <_ZZ9makeMorseE3str>
    5980:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <_ZZ9makeMorseE3str+0x1>
    5984:	30 97       	sbiw	r30, 0x00	; 0
    5986:	09 f4       	brne	.+2      	; 0x598a <makeMorse+0x9c>
    5988:	aa c0       	rjmp	.+340    	; 0x5ade <makeMorse+0x1f0>
	{
		if(repeating)
    598a:	61 15       	cp	r22, r1
    598c:	71 05       	cpc	r23, r1
    598e:	21 f0       	breq	.+8      	; 0x5998 <makeMorse+0xaa>
		{
			*repeating = repeat;
    5990:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZZ9makeMorseE6repeat>
    5994:	db 01       	movw	r26, r22
    5996:	8c 93       	st	X, r24
		}

		if(completedString)
    5998:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ZZ9makeMorseE15completedString>
    599c:	88 23       	and	r24, r24
    599e:	49 f0       	breq	.+18     	; 0x59b2 <makeMorse+0xc4>
		{
			if(finished)
    59a0:	20 97       	sbiw	r28, 0x00	; 0
    59a2:	09 f4       	brne	.+2      	; 0x59a6 <makeMorse+0xb8>
    59a4:	aa c0       	rjmp	.+340    	; 0x5afa <makeMorse+0x20c>
			{
				*finished = TRUE;
    59a6:	81 e0       	ldi	r24, 0x01	; 1
    59a8:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    59aa:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>
			}
			return( OFF);
    59ae:	80 e0       	ldi	r24, 0x00	; 0
    59b0:	a7 c0       	rjmp	.+334    	; 0x5b00 <makeMorse+0x212>
		}

		if(elementIndex)
    59b2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ZZ9makeMorseE12elementIndex>
    59b6:	88 23       	and	r24, r24
    59b8:	21 f0       	breq	.+8      	; 0x59c2 <makeMorse+0xd4>
		{
			elementIndex--;
    59ba:	81 50       	subi	r24, 0x01	; 1
    59bc:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZZ9makeMorseE12elementIndex>
    59c0:	7f c0       	rjmp	.+254    	; 0x5ac0 <makeMorse+0x1d2>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    59c2:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <_ZZ9makeMorseE9carrierOn>
    59c6:	88 23       	and	r24, r24
    59c8:	81 f0       	breq	.+32     	; 0x59ea <makeMorse+0xfc>
    59ca:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>
    59ce:	81 11       	cpse	r24, r1
    59d0:	0c c0       	rjmp	.+24     	; 0x59ea <makeMorse+0xfc>
		{
			carrierOn = FALSE;
    59d2:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZZ9makeMorseE9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    59d6:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <_ZZ9makeMorseE10addedSpace>
    59da:	88 23       	and	r24, r24
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <makeMorse+0xf2>
    59de:	70 c0       	rjmp	.+224    	; 0x5ac0 <makeMorse+0x1d2>
			{
				elementIndex = addedSpace;
    59e0:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZZ9makeMorseE12elementIndex>
				addedSpace = 0;
    59e4:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE10addedSpace>
    59e8:	6b c0       	rjmp	.+214    	; 0x5ac0 <makeMorse+0x1d2>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    59ea:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <_ZZ9makeMorseE15morseInProgress+0x1>
    59ee:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <_ZZ9makeMorseE11symbolIndex>
    59f2:	89 17       	cp	r24, r25
    59f4:	90 f1       	brcs	.+100    	; 0x5a5a <makeMorse+0x16c>
			{
				c = (*(str + ++charIndex));
    59f6:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <_ZZ9makeMorseE9charIndex>
    59fa:	8f 5f       	subi	r24, 0xFF	; 255
    59fc:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <_ZZ9makeMorseE9charIndex>
    5a00:	df 01       	movw	r26, r30
    5a02:	a8 0f       	add	r26, r24
    5a04:	b1 1d       	adc	r27, r1
    5a06:	8c 91       	ld	r24, X
    5a08:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZZ9makeMorseE1c>

				if(!c)  /* wrap to beginning of text */
    5a0c:	81 11       	cpse	r24, r1
    5a0e:	19 c0       	rjmp	.+50     	; 0x5a42 <makeMorse+0x154>
				{
					if(repeat)
    5a10:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZZ9makeMorseE6repeat>
    5a14:	88 23       	and	r24, r24
    5a16:	31 f0       	breq	.+12     	; 0x5a24 <makeMorse+0x136>
					{
						c = *str;
    5a18:	80 81       	ld	r24, Z
    5a1a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZZ9makeMorseE1c>
						charIndex = 0;
    5a1e:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_ZZ9makeMorseE9charIndex>
    5a22:	0f c0       	rjmp	.+30     	; 0x5a42 <makeMorse+0x154>
					}
					else
					{
						str = NULL;
    5a24:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <_ZZ9makeMorseE3str+0x1>
    5a28:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <_ZZ9makeMorseE3str>
						carrierOn = FALSE;
    5a2c:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZZ9makeMorseE9carrierOn>
						completedString = TRUE;
    5a30:	91 e0       	ldi	r25, 0x01	; 1
    5a32:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <_ZZ9makeMorseE15completedString>
						if(finished)
    5a36:	20 97       	sbiw	r28, 0x00	; 0
    5a38:	09 f0       	breq	.+2      	; 0x5a3c <makeMorse+0x14e>
						{
							*finished = TRUE;
    5a3a:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    5a3c:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>
						return( OFF );
    5a40:	5f c0       	rjmp	.+190    	; 0x5b00 <makeMorse+0x212>
					}
				}

				morseInProgress = getMorseChar(c);
    5a42:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZZ9makeMorseE1c>
    5a46:	0e 94 81 2b 	call	0x5702	; 0x5702 <_Z12getMorseCharc>
    5a4a:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <_ZZ9makeMorseE15morseInProgress>
    5a4e:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <_ZZ9makeMorseE15morseInProgress+0x1>
    5a52:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <_ZZ9makeMorseE15morseInProgress+0x2>
				symbolIndex = 0;
    5a56:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_ZZ9makeMorseE11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    5a5a:	20 91 73 05 	lds	r18, 0x0573	; 0x800573 <_ZZ9makeMorseE15morseInProgress>
    5a5e:	2d 3f       	cpi	r18, 0xFD	; 253
    5a60:	00 f5       	brcc	.+64     	; 0x5aa2 <makeMorse+0x1b4>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    5a62:	40 91 71 05 	lds	r20, 0x0571	; 0x800571 <_ZZ9makeMorseE11symbolIndex>
    5a66:	31 e0       	ldi	r19, 0x01	; 1
    5a68:	34 0f       	add	r19, r20
    5a6a:	30 93 71 05 	sts	0x0571, r19	; 0x800571 <_ZZ9makeMorseE11symbolIndex>

				if(isDah)
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	02 c0       	rjmp	.+4      	; 0x5a78 <makeMorse+0x18a>
    5a74:	88 0f       	add	r24, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	4a 95       	dec	r20
    5a7a:	e2 f7       	brpl	.-8      	; 0x5a74 <makeMorse+0x186>
    5a7c:	82 23       	and	r24, r18
    5a7e:	21 f0       	breq	.+8      	; 0x5a88 <makeMorse+0x19a>
				{
					elementIndex = 2;
    5a80:	82 e0       	ldi	r24, 0x02	; 2
    5a82:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZZ9makeMorseE12elementIndex>
    5a86:	02 c0       	rjmp	.+4      	; 0x5a8c <makeMorse+0x19e>
				}
				else
				{
					elementIndex = 0;
    5a88:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE12elementIndex>
				}

				carrierOn = TRUE;
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_ZZ9makeMorseE9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5a92:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <_ZZ9makeMorseE15morseInProgress+0x1>
    5a96:	38 17       	cp	r19, r24
    5a98:	98 f0       	brcs	.+38     	; 0x5ac0 <makeMorse+0x1d2>
				{
					addedSpace = 2;
    5a9a:	82 e0       	ldi	r24, 0x02	; 2
    5a9c:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <_ZZ9makeMorseE10addedSpace>
    5aa0:	0f c0       	rjmp	.+30     	; 0x5ac0 <makeMorse+0x1d2>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5aa2:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <_ZZ9makeMorseE15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    5aa6:	9f ef       	ldi	r25, 0xFF	; 255
    5aa8:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <_ZZ9makeMorseE11symbolIndex>
				carrierOn = FALSE;
    5aac:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <_ZZ9makeMorseE9carrierOn>
				if(sym >= 4 )
    5ab0:	84 30       	cpi	r24, 0x04	; 4
    5ab2:	20 f0       	brcs	.+8      	; 0x5abc <makeMorse+0x1ce>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5ab4:	84 50       	subi	r24, 0x04	; 4
    5ab6:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZZ9makeMorseE12elementIndex>
    5aba:	02 c0       	rjmp	.+4      	; 0x5ac0 <makeMorse+0x1d2>
				}
				else
				{
					elementIndex = 0;
    5abc:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5ac0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZZ9makeMorseE1c>
    5ac4:	8c 33       	cpi	r24, 0x3C	; 60
    5ac6:	31 f4       	brne	.+12     	; 0x5ad4 <makeMorse+0x1e6>
		{
			holdKeyDown = TRUE;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    5ace:	20 97       	sbiw	r28, 0x00	; 0
    5ad0:	41 f4       	brne	.+16     	; 0x5ae2 <makeMorse+0x1f4>
    5ad2:	16 c0       	rjmp	.+44     	; 0x5b00 <makeMorse+0x212>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    5ad4:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>
		}
	}

	if(finished)
    5ad8:	20 97       	sbiw	r28, 0x00	; 0
    5ada:	19 f4       	brne	.+6      	; 0x5ae2 <makeMorse+0x1f4>
    5adc:	09 c0       	rjmp	.+18     	; 0x5af0 <makeMorse+0x202>
    5ade:	20 97       	sbiw	r28, 0x00	; 0
    5ae0:	19 f0       	breq	.+6      	; 0x5ae8 <makeMorse+0x1fa>
	{
		*finished = completedString;
    5ae2:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ZZ9makeMorseE15completedString>
    5ae6:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    5ae8:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ZZ9makeMorseE11holdKeyDown>
    5aec:	81 11       	cpse	r24, r1
    5aee:	07 c0       	rjmp	.+14     	; 0x5afe <makeMorse+0x210>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    5af0:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <_ZZ9makeMorseE9carrierOn>
    5af4:	05 c0       	rjmp	.+10     	; 0x5b00 <makeMorse+0x212>
			}

			carrierOn = FALSE;
		}

		return( OFF);
    5af6:	80 e0       	ldi	r24, 0x00	; 0
    5af8:	03 c0       	rjmp	.+6      	; 0x5b00 <makeMorse+0x212>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	01 c0       	rjmp	.+2      	; 0x5b00 <makeMorse+0x212>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    5afe:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    5b00:	df 91       	pop	r29
    5b02:	cf 91       	pop	r28
    5b04:	08 95       	ret

00005b06 <timeRequiredToSendStrAtWPM>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    5b06:	cf 92       	push	r12
    5b08:	df 92       	push	r13
    5b0a:	ef 92       	push	r14
    5b0c:	ff 92       	push	r15
    5b0e:	0f 93       	push	r16
    5b10:	1f 93       	push	r17
    5b12:	cf 93       	push	r28
    5b14:	fc 01       	movw	r30, r24
    5b16:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5b18:	80 81       	ld	r24, Z
		if(!c)
    5b1a:	88 23       	and	r24, r24
    5b1c:	c1 f0       	breq	.+48     	; 0x5b4e <timeRequiredToSendStrAtWPM+0x48>
    5b1e:	8f 01       	movw	r16, r30
    5b20:	0f 5f       	subi	r16, 0xFF	; 255
    5b22:	1f 4f       	sbci	r17, 0xFF	; 255
    5b24:	7f 01       	movw	r14, r30
    5b26:	94 e1       	ldi	r25, 0x14	; 20
    5b28:	e9 0e       	add	r14, r25
    5b2a:	f1 1c       	adc	r15, r1
    5b2c:	c0 e0       	ldi	r28, 0x00	; 0
    5b2e:	05 c0       	rjmp	.+10     	; 0x5b3a <timeRequiredToSendStrAtWPM+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5b30:	f8 01       	movw	r30, r16
    5b32:	81 91       	ld	r24, Z+
    5b34:	8f 01       	movw	r16, r30
		if(!c)
    5b36:	88 23       	and	r24, r24
    5b38:	59 f0       	breq	.+22     	; 0x5b50 <timeRequiredToSendStrAtWPM+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    5b3a:	0e 94 81 2b 	call	0x5702	; 0x5702 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    5b3e:	6d 3f       	cpi	r22, 0xFD	; 253
    5b40:	08 f4       	brcc	.+2      	; 0x5b44 <timeRequiredToSendStrAtWPM+0x3e>
		{
			elements += 3;
    5b42:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    5b44:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5b46:	0e 15       	cp	r16, r14
    5b48:	1f 05       	cpc	r17, r15
    5b4a:	91 f7       	brne	.-28     	; 0x5b30 <timeRequiredToSendStrAtWPM+0x2a>
    5b4c:	01 c0       	rjmp	.+2      	; 0x5b50 <timeRequiredToSendStrAtWPM+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    5b4e:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    5b50:	80 eb       	ldi	r24, 0xB0	; 176
    5b52:	94 e0       	ldi	r25, 0x04	; 4
    5b54:	b6 01       	movw	r22, r12
    5b56:	0e 94 95 30 	call	0x612a	; 0x612a <__udivmodhi4>
}
    5b5a:	c6 9f       	mul	r28, r22
    5b5c:	c0 01       	movw	r24, r0
    5b5e:	c7 9f       	mul	r28, r23
    5b60:	90 0d       	add	r25, r0
    5b62:	11 24       	eor	r1, r1
    5b64:	cf 91       	pop	r28
    5b66:	1f 91       	pop	r17
    5b68:	0f 91       	pop	r16
    5b6a:	ff 90       	pop	r15
    5b6c:	ef 90       	pop	r14
    5b6e:	df 90       	pop	r13
    5b70:	cf 90       	pop	r12
    5b72:	08 95       	ret

00005b74 <__subsf3>:
    5b74:	50 58       	subi	r21, 0x80	; 128

00005b76 <__addsf3>:
    5b76:	bb 27       	eor	r27, r27
    5b78:	aa 27       	eor	r26, r26
    5b7a:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__addsf3x>
    5b7e:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <__fp_round>
    5b82:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__fp_pscA>
    5b86:	38 f0       	brcs	.+14     	; 0x5b96 <__addsf3+0x20>
    5b88:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__fp_pscB>
    5b8c:	20 f0       	brcs	.+8      	; 0x5b96 <__addsf3+0x20>
    5b8e:	39 f4       	brne	.+14     	; 0x5b9e <__addsf3+0x28>
    5b90:	9f 3f       	cpi	r25, 0xFF	; 255
    5b92:	19 f4       	brne	.+6      	; 0x5b9a <__addsf3+0x24>
    5b94:	26 f4       	brtc	.+8      	; 0x5b9e <__addsf3+0x28>
    5b96:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__fp_nan>
    5b9a:	0e f4       	brtc	.+2      	; 0x5b9e <__addsf3+0x28>
    5b9c:	e0 95       	com	r30
    5b9e:	e7 fb       	bst	r30, 7
    5ba0:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__fp_inf>

00005ba4 <__addsf3x>:
    5ba4:	e9 2f       	mov	r30, r25
    5ba6:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <__fp_split3>
    5baa:	58 f3       	brcs	.-42     	; 0x5b82 <__addsf3+0xc>
    5bac:	ba 17       	cp	r27, r26
    5bae:	62 07       	cpc	r22, r18
    5bb0:	73 07       	cpc	r23, r19
    5bb2:	84 07       	cpc	r24, r20
    5bb4:	95 07       	cpc	r25, r21
    5bb6:	20 f0       	brcs	.+8      	; 0x5bc0 <__addsf3x+0x1c>
    5bb8:	79 f4       	brne	.+30     	; 0x5bd8 <__addsf3x+0x34>
    5bba:	a6 f5       	brtc	.+104    	; 0x5c24 <__addsf3x+0x80>
    5bbc:	0c 94 c3 2f 	jmp	0x5f86	; 0x5f86 <__fp_zero>
    5bc0:	0e f4       	brtc	.+2      	; 0x5bc4 <__addsf3x+0x20>
    5bc2:	e0 95       	com	r30
    5bc4:	0b 2e       	mov	r0, r27
    5bc6:	ba 2f       	mov	r27, r26
    5bc8:	a0 2d       	mov	r26, r0
    5bca:	0b 01       	movw	r0, r22
    5bcc:	b9 01       	movw	r22, r18
    5bce:	90 01       	movw	r18, r0
    5bd0:	0c 01       	movw	r0, r24
    5bd2:	ca 01       	movw	r24, r20
    5bd4:	a0 01       	movw	r20, r0
    5bd6:	11 24       	eor	r1, r1
    5bd8:	ff 27       	eor	r31, r31
    5bda:	59 1b       	sub	r21, r25
    5bdc:	99 f0       	breq	.+38     	; 0x5c04 <__addsf3x+0x60>
    5bde:	59 3f       	cpi	r21, 0xF9	; 249
    5be0:	50 f4       	brcc	.+20     	; 0x5bf6 <__addsf3x+0x52>
    5be2:	50 3e       	cpi	r21, 0xE0	; 224
    5be4:	68 f1       	brcs	.+90     	; 0x5c40 <__addsf3x+0x9c>
    5be6:	1a 16       	cp	r1, r26
    5be8:	f0 40       	sbci	r31, 0x00	; 0
    5bea:	a2 2f       	mov	r26, r18
    5bec:	23 2f       	mov	r18, r19
    5bee:	34 2f       	mov	r19, r20
    5bf0:	44 27       	eor	r20, r20
    5bf2:	58 5f       	subi	r21, 0xF8	; 248
    5bf4:	f3 cf       	rjmp	.-26     	; 0x5bdc <__addsf3x+0x38>
    5bf6:	46 95       	lsr	r20
    5bf8:	37 95       	ror	r19
    5bfa:	27 95       	ror	r18
    5bfc:	a7 95       	ror	r26
    5bfe:	f0 40       	sbci	r31, 0x00	; 0
    5c00:	53 95       	inc	r21
    5c02:	c9 f7       	brne	.-14     	; 0x5bf6 <__addsf3x+0x52>
    5c04:	7e f4       	brtc	.+30     	; 0x5c24 <__addsf3x+0x80>
    5c06:	1f 16       	cp	r1, r31
    5c08:	ba 0b       	sbc	r27, r26
    5c0a:	62 0b       	sbc	r22, r18
    5c0c:	73 0b       	sbc	r23, r19
    5c0e:	84 0b       	sbc	r24, r20
    5c10:	ba f0       	brmi	.+46     	; 0x5c40 <__addsf3x+0x9c>
    5c12:	91 50       	subi	r25, 0x01	; 1
    5c14:	a1 f0       	breq	.+40     	; 0x5c3e <__addsf3x+0x9a>
    5c16:	ff 0f       	add	r31, r31
    5c18:	bb 1f       	adc	r27, r27
    5c1a:	66 1f       	adc	r22, r22
    5c1c:	77 1f       	adc	r23, r23
    5c1e:	88 1f       	adc	r24, r24
    5c20:	c2 f7       	brpl	.-16     	; 0x5c12 <__addsf3x+0x6e>
    5c22:	0e c0       	rjmp	.+28     	; 0x5c40 <__addsf3x+0x9c>
    5c24:	ba 0f       	add	r27, r26
    5c26:	62 1f       	adc	r22, r18
    5c28:	73 1f       	adc	r23, r19
    5c2a:	84 1f       	adc	r24, r20
    5c2c:	48 f4       	brcc	.+18     	; 0x5c40 <__addsf3x+0x9c>
    5c2e:	87 95       	ror	r24
    5c30:	77 95       	ror	r23
    5c32:	67 95       	ror	r22
    5c34:	b7 95       	ror	r27
    5c36:	f7 95       	ror	r31
    5c38:	9e 3f       	cpi	r25, 0xFE	; 254
    5c3a:	08 f0       	brcs	.+2      	; 0x5c3e <__addsf3x+0x9a>
    5c3c:	b0 cf       	rjmp	.-160    	; 0x5b9e <__addsf3+0x28>
    5c3e:	93 95       	inc	r25
    5c40:	88 0f       	add	r24, r24
    5c42:	08 f0       	brcs	.+2      	; 0x5c46 <__addsf3x+0xa2>
    5c44:	99 27       	eor	r25, r25
    5c46:	ee 0f       	add	r30, r30
    5c48:	97 95       	ror	r25
    5c4a:	87 95       	ror	r24
    5c4c:	08 95       	ret

00005c4e <__cmpsf2>:
    5c4e:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__fp_cmp>
    5c52:	08 f4       	brcc	.+2      	; 0x5c56 <__cmpsf2+0x8>
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	08 95       	ret

00005c58 <cos>:
    5c58:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__fp_rempio2>
    5c5c:	e3 95       	inc	r30
    5c5e:	0c 94 8d 2f 	jmp	0x5f1a	; 0x5f1a <__fp_sinus>

00005c62 <__divsf3>:
    5c62:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <__divsf3x>
    5c66:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <__fp_round>
    5c6a:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__fp_pscB>
    5c6e:	58 f0       	brcs	.+22     	; 0x5c86 <__divsf3+0x24>
    5c70:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__fp_pscA>
    5c74:	40 f0       	brcs	.+16     	; 0x5c86 <__divsf3+0x24>
    5c76:	29 f4       	brne	.+10     	; 0x5c82 <__divsf3+0x20>
    5c78:	5f 3f       	cpi	r21, 0xFF	; 255
    5c7a:	29 f0       	breq	.+10     	; 0x5c86 <__divsf3+0x24>
    5c7c:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__fp_inf>
    5c80:	51 11       	cpse	r21, r1
    5c82:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__fp_szero>
    5c86:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__fp_nan>

00005c8a <__divsf3x>:
    5c8a:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <__fp_split3>
    5c8e:	68 f3       	brcs	.-38     	; 0x5c6a <__divsf3+0x8>

00005c90 <__divsf3_pse>:
    5c90:	99 23       	and	r25, r25
    5c92:	b1 f3       	breq	.-20     	; 0x5c80 <__divsf3+0x1e>
    5c94:	55 23       	and	r21, r21
    5c96:	91 f3       	breq	.-28     	; 0x5c7c <__divsf3+0x1a>
    5c98:	95 1b       	sub	r25, r21
    5c9a:	55 0b       	sbc	r21, r21
    5c9c:	bb 27       	eor	r27, r27
    5c9e:	aa 27       	eor	r26, r26
    5ca0:	62 17       	cp	r22, r18
    5ca2:	73 07       	cpc	r23, r19
    5ca4:	84 07       	cpc	r24, r20
    5ca6:	38 f0       	brcs	.+14     	; 0x5cb6 <__divsf3_pse+0x26>
    5ca8:	9f 5f       	subi	r25, 0xFF	; 255
    5caa:	5f 4f       	sbci	r21, 0xFF	; 255
    5cac:	22 0f       	add	r18, r18
    5cae:	33 1f       	adc	r19, r19
    5cb0:	44 1f       	adc	r20, r20
    5cb2:	aa 1f       	adc	r26, r26
    5cb4:	a9 f3       	breq	.-22     	; 0x5ca0 <__divsf3_pse+0x10>
    5cb6:	35 d0       	rcall	.+106    	; 0x5d22 <__divsf3_pse+0x92>
    5cb8:	0e 2e       	mov	r0, r30
    5cba:	3a f0       	brmi	.+14     	; 0x5cca <__divsf3_pse+0x3a>
    5cbc:	e0 e8       	ldi	r30, 0x80	; 128
    5cbe:	32 d0       	rcall	.+100    	; 0x5d24 <__divsf3_pse+0x94>
    5cc0:	91 50       	subi	r25, 0x01	; 1
    5cc2:	50 40       	sbci	r21, 0x00	; 0
    5cc4:	e6 95       	lsr	r30
    5cc6:	00 1c       	adc	r0, r0
    5cc8:	ca f7       	brpl	.-14     	; 0x5cbc <__divsf3_pse+0x2c>
    5cca:	2b d0       	rcall	.+86     	; 0x5d22 <__divsf3_pse+0x92>
    5ccc:	fe 2f       	mov	r31, r30
    5cce:	29 d0       	rcall	.+82     	; 0x5d22 <__divsf3_pse+0x92>
    5cd0:	66 0f       	add	r22, r22
    5cd2:	77 1f       	adc	r23, r23
    5cd4:	88 1f       	adc	r24, r24
    5cd6:	bb 1f       	adc	r27, r27
    5cd8:	26 17       	cp	r18, r22
    5cda:	37 07       	cpc	r19, r23
    5cdc:	48 07       	cpc	r20, r24
    5cde:	ab 07       	cpc	r26, r27
    5ce0:	b0 e8       	ldi	r27, 0x80	; 128
    5ce2:	09 f0       	breq	.+2      	; 0x5ce6 <__divsf3_pse+0x56>
    5ce4:	bb 0b       	sbc	r27, r27
    5ce6:	80 2d       	mov	r24, r0
    5ce8:	bf 01       	movw	r22, r30
    5cea:	ff 27       	eor	r31, r31
    5cec:	93 58       	subi	r25, 0x83	; 131
    5cee:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf0:	3a f0       	brmi	.+14     	; 0x5d00 <__divsf3_pse+0x70>
    5cf2:	9e 3f       	cpi	r25, 0xFE	; 254
    5cf4:	51 05       	cpc	r21, r1
    5cf6:	78 f0       	brcs	.+30     	; 0x5d16 <__divsf3_pse+0x86>
    5cf8:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__fp_inf>
    5cfc:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__fp_szero>
    5d00:	5f 3f       	cpi	r21, 0xFF	; 255
    5d02:	e4 f3       	brlt	.-8      	; 0x5cfc <__divsf3_pse+0x6c>
    5d04:	98 3e       	cpi	r25, 0xE8	; 232
    5d06:	d4 f3       	brlt	.-12     	; 0x5cfc <__divsf3_pse+0x6c>
    5d08:	86 95       	lsr	r24
    5d0a:	77 95       	ror	r23
    5d0c:	67 95       	ror	r22
    5d0e:	b7 95       	ror	r27
    5d10:	f7 95       	ror	r31
    5d12:	9f 5f       	subi	r25, 0xFF	; 255
    5d14:	c9 f7       	brne	.-14     	; 0x5d08 <__divsf3_pse+0x78>
    5d16:	88 0f       	add	r24, r24
    5d18:	91 1d       	adc	r25, r1
    5d1a:	96 95       	lsr	r25
    5d1c:	87 95       	ror	r24
    5d1e:	97 f9       	bld	r25, 7
    5d20:	08 95       	ret
    5d22:	e1 e0       	ldi	r30, 0x01	; 1
    5d24:	66 0f       	add	r22, r22
    5d26:	77 1f       	adc	r23, r23
    5d28:	88 1f       	adc	r24, r24
    5d2a:	bb 1f       	adc	r27, r27
    5d2c:	62 17       	cp	r22, r18
    5d2e:	73 07       	cpc	r23, r19
    5d30:	84 07       	cpc	r24, r20
    5d32:	ba 07       	cpc	r27, r26
    5d34:	20 f0       	brcs	.+8      	; 0x5d3e <__divsf3_pse+0xae>
    5d36:	62 1b       	sub	r22, r18
    5d38:	73 0b       	sbc	r23, r19
    5d3a:	84 0b       	sbc	r24, r20
    5d3c:	ba 0b       	sbc	r27, r26
    5d3e:	ee 1f       	adc	r30, r30
    5d40:	88 f7       	brcc	.-30     	; 0x5d24 <__divsf3_pse+0x94>
    5d42:	e0 95       	com	r30
    5d44:	08 95       	ret

00005d46 <__fixsfsi>:
    5d46:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <__fixunssfsi>
    5d4a:	68 94       	set
    5d4c:	b1 11       	cpse	r27, r1
    5d4e:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__fp_szero>
    5d52:	08 95       	ret

00005d54 <__fixunssfsi>:
    5d54:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <__fp_splitA>
    5d58:	88 f0       	brcs	.+34     	; 0x5d7c <__fixunssfsi+0x28>
    5d5a:	9f 57       	subi	r25, 0x7F	; 127
    5d5c:	98 f0       	brcs	.+38     	; 0x5d84 <__fixunssfsi+0x30>
    5d5e:	b9 2f       	mov	r27, r25
    5d60:	99 27       	eor	r25, r25
    5d62:	b7 51       	subi	r27, 0x17	; 23
    5d64:	b0 f0       	brcs	.+44     	; 0x5d92 <__fixunssfsi+0x3e>
    5d66:	e1 f0       	breq	.+56     	; 0x5da0 <__fixunssfsi+0x4c>
    5d68:	66 0f       	add	r22, r22
    5d6a:	77 1f       	adc	r23, r23
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	1a f0       	brmi	.+6      	; 0x5d78 <__fixunssfsi+0x24>
    5d72:	ba 95       	dec	r27
    5d74:	c9 f7       	brne	.-14     	; 0x5d68 <__fixunssfsi+0x14>
    5d76:	14 c0       	rjmp	.+40     	; 0x5da0 <__fixunssfsi+0x4c>
    5d78:	b1 30       	cpi	r27, 0x01	; 1
    5d7a:	91 f0       	breq	.+36     	; 0x5da0 <__fixunssfsi+0x4c>
    5d7c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <__fp_zero>
    5d80:	b1 e0       	ldi	r27, 0x01	; 1
    5d82:	08 95       	ret
    5d84:	0c 94 c3 2f 	jmp	0x5f86	; 0x5f86 <__fp_zero>
    5d88:	67 2f       	mov	r22, r23
    5d8a:	78 2f       	mov	r23, r24
    5d8c:	88 27       	eor	r24, r24
    5d8e:	b8 5f       	subi	r27, 0xF8	; 248
    5d90:	39 f0       	breq	.+14     	; 0x5da0 <__fixunssfsi+0x4c>
    5d92:	b9 3f       	cpi	r27, 0xF9	; 249
    5d94:	cc f3       	brlt	.-14     	; 0x5d88 <__fixunssfsi+0x34>
    5d96:	86 95       	lsr	r24
    5d98:	77 95       	ror	r23
    5d9a:	67 95       	ror	r22
    5d9c:	b3 95       	inc	r27
    5d9e:	d9 f7       	brne	.-10     	; 0x5d96 <__fixunssfsi+0x42>
    5da0:	3e f4       	brtc	.+14     	; 0x5db0 <__fixunssfsi+0x5c>
    5da2:	90 95       	com	r25
    5da4:	80 95       	com	r24
    5da6:	70 95       	com	r23
    5da8:	61 95       	neg	r22
    5daa:	7f 4f       	sbci	r23, 0xFF	; 255
    5dac:	8f 4f       	sbci	r24, 0xFF	; 255
    5dae:	9f 4f       	sbci	r25, 0xFF	; 255
    5db0:	08 95       	ret

00005db2 <__floatunsisf>:
    5db2:	e8 94       	clt
    5db4:	09 c0       	rjmp	.+18     	; 0x5dc8 <__floatsisf+0x12>

00005db6 <__floatsisf>:
    5db6:	97 fb       	bst	r25, 7
    5db8:	3e f4       	brtc	.+14     	; 0x5dc8 <__floatsisf+0x12>
    5dba:	90 95       	com	r25
    5dbc:	80 95       	com	r24
    5dbe:	70 95       	com	r23
    5dc0:	61 95       	neg	r22
    5dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc8:	99 23       	and	r25, r25
    5dca:	a9 f0       	breq	.+42     	; 0x5df6 <__floatsisf+0x40>
    5dcc:	f9 2f       	mov	r31, r25
    5dce:	96 e9       	ldi	r25, 0x96	; 150
    5dd0:	bb 27       	eor	r27, r27
    5dd2:	93 95       	inc	r25
    5dd4:	f6 95       	lsr	r31
    5dd6:	87 95       	ror	r24
    5dd8:	77 95       	ror	r23
    5dda:	67 95       	ror	r22
    5ddc:	b7 95       	ror	r27
    5dde:	f1 11       	cpse	r31, r1
    5de0:	f8 cf       	rjmp	.-16     	; 0x5dd2 <__floatsisf+0x1c>
    5de2:	fa f4       	brpl	.+62     	; 0x5e22 <__floatsisf+0x6c>
    5de4:	bb 0f       	add	r27, r27
    5de6:	11 f4       	brne	.+4      	; 0x5dec <__floatsisf+0x36>
    5de8:	60 ff       	sbrs	r22, 0
    5dea:	1b c0       	rjmp	.+54     	; 0x5e22 <__floatsisf+0x6c>
    5dec:	6f 5f       	subi	r22, 0xFF	; 255
    5dee:	7f 4f       	sbci	r23, 0xFF	; 255
    5df0:	8f 4f       	sbci	r24, 0xFF	; 255
    5df2:	9f 4f       	sbci	r25, 0xFF	; 255
    5df4:	16 c0       	rjmp	.+44     	; 0x5e22 <__floatsisf+0x6c>
    5df6:	88 23       	and	r24, r24
    5df8:	11 f0       	breq	.+4      	; 0x5dfe <__floatsisf+0x48>
    5dfa:	96 e9       	ldi	r25, 0x96	; 150
    5dfc:	11 c0       	rjmp	.+34     	; 0x5e20 <__floatsisf+0x6a>
    5dfe:	77 23       	and	r23, r23
    5e00:	21 f0       	breq	.+8      	; 0x5e0a <__floatsisf+0x54>
    5e02:	9e e8       	ldi	r25, 0x8E	; 142
    5e04:	87 2f       	mov	r24, r23
    5e06:	76 2f       	mov	r23, r22
    5e08:	05 c0       	rjmp	.+10     	; 0x5e14 <__floatsisf+0x5e>
    5e0a:	66 23       	and	r22, r22
    5e0c:	71 f0       	breq	.+28     	; 0x5e2a <__floatsisf+0x74>
    5e0e:	96 e8       	ldi	r25, 0x86	; 134
    5e10:	86 2f       	mov	r24, r22
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	60 e0       	ldi	r22, 0x00	; 0
    5e16:	2a f0       	brmi	.+10     	; 0x5e22 <__floatsisf+0x6c>
    5e18:	9a 95       	dec	r25
    5e1a:	66 0f       	add	r22, r22
    5e1c:	77 1f       	adc	r23, r23
    5e1e:	88 1f       	adc	r24, r24
    5e20:	da f7       	brpl	.-10     	; 0x5e18 <__floatsisf+0x62>
    5e22:	88 0f       	add	r24, r24
    5e24:	96 95       	lsr	r25
    5e26:	87 95       	ror	r24
    5e28:	97 f9       	bld	r25, 7
    5e2a:	08 95       	ret

00005e2c <__fp_cmp>:
    5e2c:	99 0f       	add	r25, r25
    5e2e:	00 08       	sbc	r0, r0
    5e30:	55 0f       	add	r21, r21
    5e32:	aa 0b       	sbc	r26, r26
    5e34:	e0 e8       	ldi	r30, 0x80	; 128
    5e36:	fe ef       	ldi	r31, 0xFE	; 254
    5e38:	16 16       	cp	r1, r22
    5e3a:	17 06       	cpc	r1, r23
    5e3c:	e8 07       	cpc	r30, r24
    5e3e:	f9 07       	cpc	r31, r25
    5e40:	c0 f0       	brcs	.+48     	; 0x5e72 <__fp_cmp+0x46>
    5e42:	12 16       	cp	r1, r18
    5e44:	13 06       	cpc	r1, r19
    5e46:	e4 07       	cpc	r30, r20
    5e48:	f5 07       	cpc	r31, r21
    5e4a:	98 f0       	brcs	.+38     	; 0x5e72 <__fp_cmp+0x46>
    5e4c:	62 1b       	sub	r22, r18
    5e4e:	73 0b       	sbc	r23, r19
    5e50:	84 0b       	sbc	r24, r20
    5e52:	95 0b       	sbc	r25, r21
    5e54:	39 f4       	brne	.+14     	; 0x5e64 <__fp_cmp+0x38>
    5e56:	0a 26       	eor	r0, r26
    5e58:	61 f0       	breq	.+24     	; 0x5e72 <__fp_cmp+0x46>
    5e5a:	23 2b       	or	r18, r19
    5e5c:	24 2b       	or	r18, r20
    5e5e:	25 2b       	or	r18, r21
    5e60:	21 f4       	brne	.+8      	; 0x5e6a <__fp_cmp+0x3e>
    5e62:	08 95       	ret
    5e64:	0a 26       	eor	r0, r26
    5e66:	09 f4       	brne	.+2      	; 0x5e6a <__fp_cmp+0x3e>
    5e68:	a1 40       	sbci	r26, 0x01	; 1
    5e6a:	a6 95       	lsr	r26
    5e6c:	8f ef       	ldi	r24, 0xFF	; 255
    5e6e:	81 1d       	adc	r24, r1
    5e70:	81 1d       	adc	r24, r1
    5e72:	08 95       	ret

00005e74 <__fp_inf>:
    5e74:	97 f9       	bld	r25, 7
    5e76:	9f 67       	ori	r25, 0x7F	; 127
    5e78:	80 e8       	ldi	r24, 0x80	; 128
    5e7a:	70 e0       	ldi	r23, 0x00	; 0
    5e7c:	60 e0       	ldi	r22, 0x00	; 0
    5e7e:	08 95       	ret

00005e80 <__fp_nan>:
    5e80:	9f ef       	ldi	r25, 0xFF	; 255
    5e82:	80 ec       	ldi	r24, 0xC0	; 192
    5e84:	08 95       	ret

00005e86 <__fp_pscA>:
    5e86:	00 24       	eor	r0, r0
    5e88:	0a 94       	dec	r0
    5e8a:	16 16       	cp	r1, r22
    5e8c:	17 06       	cpc	r1, r23
    5e8e:	18 06       	cpc	r1, r24
    5e90:	09 06       	cpc	r0, r25
    5e92:	08 95       	ret

00005e94 <__fp_pscB>:
    5e94:	00 24       	eor	r0, r0
    5e96:	0a 94       	dec	r0
    5e98:	12 16       	cp	r1, r18
    5e9a:	13 06       	cpc	r1, r19
    5e9c:	14 06       	cpc	r1, r20
    5e9e:	05 06       	cpc	r0, r21
    5ea0:	08 95       	ret
    5ea2:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__fp_nan>

00005ea6 <__fp_rempio2>:
    5ea6:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <__fp_splitA>
    5eaa:	d8 f3       	brcs	.-10     	; 0x5ea2 <__fp_pscB+0xe>
    5eac:	e8 94       	clt
    5eae:	e0 e0       	ldi	r30, 0x00	; 0
    5eb0:	bb 27       	eor	r27, r27
    5eb2:	9f 57       	subi	r25, 0x7F	; 127
    5eb4:	f0 f0       	brcs	.+60     	; 0x5ef2 <__fp_rempio2+0x4c>
    5eb6:	2a ed       	ldi	r18, 0xDA	; 218
    5eb8:	3f e0       	ldi	r19, 0x0F	; 15
    5eba:	49 ec       	ldi	r20, 0xC9	; 201
    5ebc:	06 c0       	rjmp	.+12     	; 0x5eca <__fp_rempio2+0x24>
    5ebe:	ee 0f       	add	r30, r30
    5ec0:	bb 0f       	add	r27, r27
    5ec2:	66 1f       	adc	r22, r22
    5ec4:	77 1f       	adc	r23, r23
    5ec6:	88 1f       	adc	r24, r24
    5ec8:	28 f0       	brcs	.+10     	; 0x5ed4 <__fp_rempio2+0x2e>
    5eca:	b2 3a       	cpi	r27, 0xA2	; 162
    5ecc:	62 07       	cpc	r22, r18
    5ece:	73 07       	cpc	r23, r19
    5ed0:	84 07       	cpc	r24, r20
    5ed2:	28 f0       	brcs	.+10     	; 0x5ede <__fp_rempio2+0x38>
    5ed4:	b2 5a       	subi	r27, 0xA2	; 162
    5ed6:	62 0b       	sbc	r22, r18
    5ed8:	73 0b       	sbc	r23, r19
    5eda:	84 0b       	sbc	r24, r20
    5edc:	e3 95       	inc	r30
    5ede:	9a 95       	dec	r25
    5ee0:	72 f7       	brpl	.-36     	; 0x5ebe <__fp_rempio2+0x18>
    5ee2:	80 38       	cpi	r24, 0x80	; 128
    5ee4:	30 f4       	brcc	.+12     	; 0x5ef2 <__fp_rempio2+0x4c>
    5ee6:	9a 95       	dec	r25
    5ee8:	bb 0f       	add	r27, r27
    5eea:	66 1f       	adc	r22, r22
    5eec:	77 1f       	adc	r23, r23
    5eee:	88 1f       	adc	r24, r24
    5ef0:	d2 f7       	brpl	.-12     	; 0x5ee6 <__fp_rempio2+0x40>
    5ef2:	90 48       	sbci	r25, 0x80	; 128
    5ef4:	0c 94 3e 30 	jmp	0x607c	; 0x607c <__fp_mpack_finite>

00005ef8 <__fp_round>:
    5ef8:	09 2e       	mov	r0, r25
    5efa:	03 94       	inc	r0
    5efc:	00 0c       	add	r0, r0
    5efe:	11 f4       	brne	.+4      	; 0x5f04 <__fp_round+0xc>
    5f00:	88 23       	and	r24, r24
    5f02:	52 f0       	brmi	.+20     	; 0x5f18 <__fp_round+0x20>
    5f04:	bb 0f       	add	r27, r27
    5f06:	40 f4       	brcc	.+16     	; 0x5f18 <__fp_round+0x20>
    5f08:	bf 2b       	or	r27, r31
    5f0a:	11 f4       	brne	.+4      	; 0x5f10 <__fp_round+0x18>
    5f0c:	60 ff       	sbrs	r22, 0
    5f0e:	04 c0       	rjmp	.+8      	; 0x5f18 <__fp_round+0x20>
    5f10:	6f 5f       	subi	r22, 0xFF	; 255
    5f12:	7f 4f       	sbci	r23, 0xFF	; 255
    5f14:	8f 4f       	sbci	r24, 0xFF	; 255
    5f16:	9f 4f       	sbci	r25, 0xFF	; 255
    5f18:	08 95       	ret

00005f1a <__fp_sinus>:
    5f1a:	ef 93       	push	r30
    5f1c:	e0 ff       	sbrs	r30, 0
    5f1e:	07 c0       	rjmp	.+14     	; 0x5f2e <__fp_sinus+0x14>
    5f20:	a2 ea       	ldi	r26, 0xA2	; 162
    5f22:	2a ed       	ldi	r18, 0xDA	; 218
    5f24:	3f e0       	ldi	r19, 0x0F	; 15
    5f26:	49 ec       	ldi	r20, 0xC9	; 201
    5f28:	5f eb       	ldi	r21, 0xBF	; 191
    5f2a:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__addsf3x>
    5f2e:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__fp_round>
    5f32:	0f 90       	pop	r0
    5f34:	03 94       	inc	r0
    5f36:	01 fc       	sbrc	r0, 1
    5f38:	90 58       	subi	r25, 0x80	; 128
    5f3a:	ea e3       	ldi	r30, 0x3A	; 58
    5f3c:	f2 e0       	ldi	r31, 0x02	; 2
    5f3e:	0c 94 4a 30 	jmp	0x6094	; 0x6094 <__fp_powsodd>

00005f42 <__fp_split3>:
    5f42:	57 fd       	sbrc	r21, 7
    5f44:	90 58       	subi	r25, 0x80	; 128
    5f46:	44 0f       	add	r20, r20
    5f48:	55 1f       	adc	r21, r21
    5f4a:	59 f0       	breq	.+22     	; 0x5f62 <__fp_splitA+0x10>
    5f4c:	5f 3f       	cpi	r21, 0xFF	; 255
    5f4e:	71 f0       	breq	.+28     	; 0x5f6c <__fp_splitA+0x1a>
    5f50:	47 95       	ror	r20

00005f52 <__fp_splitA>:
    5f52:	88 0f       	add	r24, r24
    5f54:	97 fb       	bst	r25, 7
    5f56:	99 1f       	adc	r25, r25
    5f58:	61 f0       	breq	.+24     	; 0x5f72 <__fp_splitA+0x20>
    5f5a:	9f 3f       	cpi	r25, 0xFF	; 255
    5f5c:	79 f0       	breq	.+30     	; 0x5f7c <__fp_splitA+0x2a>
    5f5e:	87 95       	ror	r24
    5f60:	08 95       	ret
    5f62:	12 16       	cp	r1, r18
    5f64:	13 06       	cpc	r1, r19
    5f66:	14 06       	cpc	r1, r20
    5f68:	55 1f       	adc	r21, r21
    5f6a:	f2 cf       	rjmp	.-28     	; 0x5f50 <__fp_split3+0xe>
    5f6c:	46 95       	lsr	r20
    5f6e:	f1 df       	rcall	.-30     	; 0x5f52 <__fp_splitA>
    5f70:	08 c0       	rjmp	.+16     	; 0x5f82 <__fp_splitA+0x30>
    5f72:	16 16       	cp	r1, r22
    5f74:	17 06       	cpc	r1, r23
    5f76:	18 06       	cpc	r1, r24
    5f78:	99 1f       	adc	r25, r25
    5f7a:	f1 cf       	rjmp	.-30     	; 0x5f5e <__fp_splitA+0xc>
    5f7c:	86 95       	lsr	r24
    5f7e:	71 05       	cpc	r23, r1
    5f80:	61 05       	cpc	r22, r1
    5f82:	08 94       	sec
    5f84:	08 95       	ret

00005f86 <__fp_zero>:
    5f86:	e8 94       	clt

00005f88 <__fp_szero>:
    5f88:	bb 27       	eor	r27, r27
    5f8a:	66 27       	eor	r22, r22
    5f8c:	77 27       	eor	r23, r23
    5f8e:	cb 01       	movw	r24, r22
    5f90:	97 f9       	bld	r25, 7
    5f92:	08 95       	ret

00005f94 <__gesf2>:
    5f94:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__fp_cmp>
    5f98:	08 f4       	brcc	.+2      	; 0x5f9c <__gesf2+0x8>
    5f9a:	8f ef       	ldi	r24, 0xFF	; 255
    5f9c:	08 95       	ret

00005f9e <__mulsf3>:
    5f9e:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__mulsf3x>
    5fa2:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <__fp_round>
    5fa6:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__fp_pscA>
    5faa:	38 f0       	brcs	.+14     	; 0x5fba <__mulsf3+0x1c>
    5fac:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__fp_pscB>
    5fb0:	20 f0       	brcs	.+8      	; 0x5fba <__mulsf3+0x1c>
    5fb2:	95 23       	and	r25, r21
    5fb4:	11 f0       	breq	.+4      	; 0x5fba <__mulsf3+0x1c>
    5fb6:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__fp_inf>
    5fba:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__fp_nan>
    5fbe:	11 24       	eor	r1, r1
    5fc0:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__fp_szero>

00005fc4 <__mulsf3x>:
    5fc4:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <__fp_split3>
    5fc8:	70 f3       	brcs	.-36     	; 0x5fa6 <__mulsf3+0x8>

00005fca <__mulsf3_pse>:
    5fca:	95 9f       	mul	r25, r21
    5fcc:	c1 f3       	breq	.-16     	; 0x5fbe <__mulsf3+0x20>
    5fce:	95 0f       	add	r25, r21
    5fd0:	50 e0       	ldi	r21, 0x00	; 0
    5fd2:	55 1f       	adc	r21, r21
    5fd4:	62 9f       	mul	r22, r18
    5fd6:	f0 01       	movw	r30, r0
    5fd8:	72 9f       	mul	r23, r18
    5fda:	bb 27       	eor	r27, r27
    5fdc:	f0 0d       	add	r31, r0
    5fde:	b1 1d       	adc	r27, r1
    5fe0:	63 9f       	mul	r22, r19
    5fe2:	aa 27       	eor	r26, r26
    5fe4:	f0 0d       	add	r31, r0
    5fe6:	b1 1d       	adc	r27, r1
    5fe8:	aa 1f       	adc	r26, r26
    5fea:	64 9f       	mul	r22, r20
    5fec:	66 27       	eor	r22, r22
    5fee:	b0 0d       	add	r27, r0
    5ff0:	a1 1d       	adc	r26, r1
    5ff2:	66 1f       	adc	r22, r22
    5ff4:	82 9f       	mul	r24, r18
    5ff6:	22 27       	eor	r18, r18
    5ff8:	b0 0d       	add	r27, r0
    5ffa:	a1 1d       	adc	r26, r1
    5ffc:	62 1f       	adc	r22, r18
    5ffe:	73 9f       	mul	r23, r19
    6000:	b0 0d       	add	r27, r0
    6002:	a1 1d       	adc	r26, r1
    6004:	62 1f       	adc	r22, r18
    6006:	83 9f       	mul	r24, r19
    6008:	a0 0d       	add	r26, r0
    600a:	61 1d       	adc	r22, r1
    600c:	22 1f       	adc	r18, r18
    600e:	74 9f       	mul	r23, r20
    6010:	33 27       	eor	r19, r19
    6012:	a0 0d       	add	r26, r0
    6014:	61 1d       	adc	r22, r1
    6016:	23 1f       	adc	r18, r19
    6018:	84 9f       	mul	r24, r20
    601a:	60 0d       	add	r22, r0
    601c:	21 1d       	adc	r18, r1
    601e:	82 2f       	mov	r24, r18
    6020:	76 2f       	mov	r23, r22
    6022:	6a 2f       	mov	r22, r26
    6024:	11 24       	eor	r1, r1
    6026:	9f 57       	subi	r25, 0x7F	; 127
    6028:	50 40       	sbci	r21, 0x00	; 0
    602a:	9a f0       	brmi	.+38     	; 0x6052 <__mulsf3_pse+0x88>
    602c:	f1 f0       	breq	.+60     	; 0x606a <__mulsf3_pse+0xa0>
    602e:	88 23       	and	r24, r24
    6030:	4a f0       	brmi	.+18     	; 0x6044 <__mulsf3_pse+0x7a>
    6032:	ee 0f       	add	r30, r30
    6034:	ff 1f       	adc	r31, r31
    6036:	bb 1f       	adc	r27, r27
    6038:	66 1f       	adc	r22, r22
    603a:	77 1f       	adc	r23, r23
    603c:	88 1f       	adc	r24, r24
    603e:	91 50       	subi	r25, 0x01	; 1
    6040:	50 40       	sbci	r21, 0x00	; 0
    6042:	a9 f7       	brne	.-22     	; 0x602e <__mulsf3_pse+0x64>
    6044:	9e 3f       	cpi	r25, 0xFE	; 254
    6046:	51 05       	cpc	r21, r1
    6048:	80 f0       	brcs	.+32     	; 0x606a <__mulsf3_pse+0xa0>
    604a:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__fp_inf>
    604e:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__fp_szero>
    6052:	5f 3f       	cpi	r21, 0xFF	; 255
    6054:	e4 f3       	brlt	.-8      	; 0x604e <__mulsf3_pse+0x84>
    6056:	98 3e       	cpi	r25, 0xE8	; 232
    6058:	d4 f3       	brlt	.-12     	; 0x604e <__mulsf3_pse+0x84>
    605a:	86 95       	lsr	r24
    605c:	77 95       	ror	r23
    605e:	67 95       	ror	r22
    6060:	b7 95       	ror	r27
    6062:	f7 95       	ror	r31
    6064:	e7 95       	ror	r30
    6066:	9f 5f       	subi	r25, 0xFF	; 255
    6068:	c1 f7       	brne	.-16     	; 0x605a <__mulsf3_pse+0x90>
    606a:	fe 2b       	or	r31, r30
    606c:	88 0f       	add	r24, r24
    606e:	91 1d       	adc	r25, r1
    6070:	96 95       	lsr	r25
    6072:	87 95       	ror	r24
    6074:	97 f9       	bld	r25, 7
    6076:	08 95       	ret

00006078 <__fp_mpack>:
    6078:	9f 3f       	cpi	r25, 0xFF	; 255
    607a:	31 f0       	breq	.+12     	; 0x6088 <__fp_mpack_finite+0xc>

0000607c <__fp_mpack_finite>:
    607c:	91 50       	subi	r25, 0x01	; 1
    607e:	20 f4       	brcc	.+8      	; 0x6088 <__fp_mpack_finite+0xc>
    6080:	87 95       	ror	r24
    6082:	77 95       	ror	r23
    6084:	67 95       	ror	r22
    6086:	b7 95       	ror	r27
    6088:	88 0f       	add	r24, r24
    608a:	91 1d       	adc	r25, r1
    608c:	96 95       	lsr	r25
    608e:	87 95       	ror	r24
    6090:	97 f9       	bld	r25, 7
    6092:	08 95       	ret

00006094 <__fp_powsodd>:
    6094:	9f 93       	push	r25
    6096:	8f 93       	push	r24
    6098:	7f 93       	push	r23
    609a:	6f 93       	push	r22
    609c:	ff 93       	push	r31
    609e:	ef 93       	push	r30
    60a0:	9b 01       	movw	r18, r22
    60a2:	ac 01       	movw	r20, r24
    60a4:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <__mulsf3>
    60a8:	ef 91       	pop	r30
    60aa:	ff 91       	pop	r31
    60ac:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fp_powser>
    60b0:	2f 91       	pop	r18
    60b2:	3f 91       	pop	r19
    60b4:	4f 91       	pop	r20
    60b6:	5f 91       	pop	r21
    60b8:	0c 94 cf 2f 	jmp	0x5f9e	; 0x5f9e <__mulsf3>

000060bc <__fp_powser>:
    60bc:	df 93       	push	r29
    60be:	cf 93       	push	r28
    60c0:	1f 93       	push	r17
    60c2:	0f 93       	push	r16
    60c4:	ff 92       	push	r15
    60c6:	ef 92       	push	r14
    60c8:	df 92       	push	r13
    60ca:	7b 01       	movw	r14, r22
    60cc:	8c 01       	movw	r16, r24
    60ce:	68 94       	set
    60d0:	06 c0       	rjmp	.+12     	; 0x60de <__fp_powser+0x22>
    60d2:	da 2e       	mov	r13, r26
    60d4:	ef 01       	movw	r28, r30
    60d6:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__mulsf3x>
    60da:	fe 01       	movw	r30, r28
    60dc:	e8 94       	clt
    60de:	a5 91       	lpm	r26, Z+
    60e0:	25 91       	lpm	r18, Z+
    60e2:	35 91       	lpm	r19, Z+
    60e4:	45 91       	lpm	r20, Z+
    60e6:	55 91       	lpm	r21, Z+
    60e8:	a6 f3       	brts	.-24     	; 0x60d2 <__fp_powser+0x16>
    60ea:	ef 01       	movw	r28, r30
    60ec:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__addsf3x>
    60f0:	fe 01       	movw	r30, r28
    60f2:	97 01       	movw	r18, r14
    60f4:	a8 01       	movw	r20, r16
    60f6:	da 94       	dec	r13
    60f8:	69 f7       	brne	.-38     	; 0x60d4 <__fp_powser+0x18>
    60fa:	df 90       	pop	r13
    60fc:	ef 90       	pop	r14
    60fe:	ff 90       	pop	r15
    6100:	0f 91       	pop	r16
    6102:	1f 91       	pop	r17
    6104:	cf 91       	pop	r28
    6106:	df 91       	pop	r29
    6108:	08 95       	ret

0000610a <__mulsi3>:
    610a:	db 01       	movw	r26, r22
    610c:	8f 93       	push	r24
    610e:	9f 93       	push	r25
    6110:	0e 94 1a 31 	call	0x6234	; 0x6234 <__muluhisi3>
    6114:	bf 91       	pop	r27
    6116:	af 91       	pop	r26
    6118:	a2 9f       	mul	r26, r18
    611a:	80 0d       	add	r24, r0
    611c:	91 1d       	adc	r25, r1
    611e:	a3 9f       	mul	r26, r19
    6120:	90 0d       	add	r25, r0
    6122:	b2 9f       	mul	r27, r18
    6124:	90 0d       	add	r25, r0
    6126:	11 24       	eor	r1, r1
    6128:	08 95       	ret

0000612a <__udivmodhi4>:
    612a:	aa 1b       	sub	r26, r26
    612c:	bb 1b       	sub	r27, r27
    612e:	51 e1       	ldi	r21, 0x11	; 17
    6130:	07 c0       	rjmp	.+14     	; 0x6140 <__udivmodhi4_ep>

00006132 <__udivmodhi4_loop>:
    6132:	aa 1f       	adc	r26, r26
    6134:	bb 1f       	adc	r27, r27
    6136:	a6 17       	cp	r26, r22
    6138:	b7 07       	cpc	r27, r23
    613a:	10 f0       	brcs	.+4      	; 0x6140 <__udivmodhi4_ep>
    613c:	a6 1b       	sub	r26, r22
    613e:	b7 0b       	sbc	r27, r23

00006140 <__udivmodhi4_ep>:
    6140:	88 1f       	adc	r24, r24
    6142:	99 1f       	adc	r25, r25
    6144:	5a 95       	dec	r21
    6146:	a9 f7       	brne	.-22     	; 0x6132 <__udivmodhi4_loop>
    6148:	80 95       	com	r24
    614a:	90 95       	com	r25
    614c:	bc 01       	movw	r22, r24
    614e:	cd 01       	movw	r24, r26
    6150:	08 95       	ret

00006152 <__divmodhi4>:
    6152:	97 fb       	bst	r25, 7
    6154:	07 2e       	mov	r0, r23
    6156:	16 f4       	brtc	.+4      	; 0x615c <__divmodhi4+0xa>
    6158:	00 94       	com	r0
    615a:	07 d0       	rcall	.+14     	; 0x616a <__divmodhi4_neg1>
    615c:	77 fd       	sbrc	r23, 7
    615e:	09 d0       	rcall	.+18     	; 0x6172 <__divmodhi4_neg2>
    6160:	0e 94 95 30 	call	0x612a	; 0x612a <__udivmodhi4>
    6164:	07 fc       	sbrc	r0, 7
    6166:	05 d0       	rcall	.+10     	; 0x6172 <__divmodhi4_neg2>
    6168:	3e f4       	brtc	.+14     	; 0x6178 <__divmodhi4_exit>

0000616a <__divmodhi4_neg1>:
    616a:	90 95       	com	r25
    616c:	81 95       	neg	r24
    616e:	9f 4f       	sbci	r25, 0xFF	; 255
    6170:	08 95       	ret

00006172 <__divmodhi4_neg2>:
    6172:	70 95       	com	r23
    6174:	61 95       	neg	r22
    6176:	7f 4f       	sbci	r23, 0xFF	; 255

00006178 <__divmodhi4_exit>:
    6178:	08 95       	ret

0000617a <__udivmodsi4>:
    617a:	a1 e2       	ldi	r26, 0x21	; 33
    617c:	1a 2e       	mov	r1, r26
    617e:	aa 1b       	sub	r26, r26
    6180:	bb 1b       	sub	r27, r27
    6182:	fd 01       	movw	r30, r26
    6184:	0d c0       	rjmp	.+26     	; 0x61a0 <__udivmodsi4_ep>

00006186 <__udivmodsi4_loop>:
    6186:	aa 1f       	adc	r26, r26
    6188:	bb 1f       	adc	r27, r27
    618a:	ee 1f       	adc	r30, r30
    618c:	ff 1f       	adc	r31, r31
    618e:	a2 17       	cp	r26, r18
    6190:	b3 07       	cpc	r27, r19
    6192:	e4 07       	cpc	r30, r20
    6194:	f5 07       	cpc	r31, r21
    6196:	20 f0       	brcs	.+8      	; 0x61a0 <__udivmodsi4_ep>
    6198:	a2 1b       	sub	r26, r18
    619a:	b3 0b       	sbc	r27, r19
    619c:	e4 0b       	sbc	r30, r20
    619e:	f5 0b       	sbc	r31, r21

000061a0 <__udivmodsi4_ep>:
    61a0:	66 1f       	adc	r22, r22
    61a2:	77 1f       	adc	r23, r23
    61a4:	88 1f       	adc	r24, r24
    61a6:	99 1f       	adc	r25, r25
    61a8:	1a 94       	dec	r1
    61aa:	69 f7       	brne	.-38     	; 0x6186 <__udivmodsi4_loop>
    61ac:	60 95       	com	r22
    61ae:	70 95       	com	r23
    61b0:	80 95       	com	r24
    61b2:	90 95       	com	r25
    61b4:	9b 01       	movw	r18, r22
    61b6:	ac 01       	movw	r20, r24
    61b8:	bd 01       	movw	r22, r26
    61ba:	cf 01       	movw	r24, r30
    61bc:	08 95       	ret

000061be <__divmodsi4>:
    61be:	05 2e       	mov	r0, r21
    61c0:	97 fb       	bst	r25, 7
    61c2:	1e f4       	brtc	.+6      	; 0x61ca <__divmodsi4+0xc>
    61c4:	00 94       	com	r0
    61c6:	0e 94 f6 30 	call	0x61ec	; 0x61ec <__negsi2>
    61ca:	57 fd       	sbrc	r21, 7
    61cc:	07 d0       	rcall	.+14     	; 0x61dc <__divmodsi4_neg2>
    61ce:	0e 94 bd 30 	call	0x617a	; 0x617a <__udivmodsi4>
    61d2:	07 fc       	sbrc	r0, 7
    61d4:	03 d0       	rcall	.+6      	; 0x61dc <__divmodsi4_neg2>
    61d6:	4e f4       	brtc	.+18     	; 0x61ea <__divmodsi4_exit>
    61d8:	0c 94 f6 30 	jmp	0x61ec	; 0x61ec <__negsi2>

000061dc <__divmodsi4_neg2>:
    61dc:	50 95       	com	r21
    61de:	40 95       	com	r20
    61e0:	30 95       	com	r19
    61e2:	21 95       	neg	r18
    61e4:	3f 4f       	sbci	r19, 0xFF	; 255
    61e6:	4f 4f       	sbci	r20, 0xFF	; 255
    61e8:	5f 4f       	sbci	r21, 0xFF	; 255

000061ea <__divmodsi4_exit>:
    61ea:	08 95       	ret

000061ec <__negsi2>:
    61ec:	90 95       	com	r25
    61ee:	80 95       	com	r24
    61f0:	70 95       	com	r23
    61f2:	61 95       	neg	r22
    61f4:	7f 4f       	sbci	r23, 0xFF	; 255
    61f6:	8f 4f       	sbci	r24, 0xFF	; 255
    61f8:	9f 4f       	sbci	r25, 0xFF	; 255
    61fa:	08 95       	ret

000061fc <__tablejump2__>:
    61fc:	ee 0f       	add	r30, r30
    61fe:	ff 1f       	adc	r31, r31
    6200:	05 90       	lpm	r0, Z+
    6202:	f4 91       	lpm	r31, Z
    6204:	e0 2d       	mov	r30, r0
    6206:	09 94       	ijmp

00006208 <__umulhisi3>:
    6208:	a2 9f       	mul	r26, r18
    620a:	b0 01       	movw	r22, r0
    620c:	b3 9f       	mul	r27, r19
    620e:	c0 01       	movw	r24, r0
    6210:	a3 9f       	mul	r26, r19
    6212:	70 0d       	add	r23, r0
    6214:	81 1d       	adc	r24, r1
    6216:	11 24       	eor	r1, r1
    6218:	91 1d       	adc	r25, r1
    621a:	b2 9f       	mul	r27, r18
    621c:	70 0d       	add	r23, r0
    621e:	81 1d       	adc	r24, r1
    6220:	11 24       	eor	r1, r1
    6222:	91 1d       	adc	r25, r1
    6224:	08 95       	ret

00006226 <__usmulhisi3>:
    6226:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>

0000622a <__usmulhisi3_tail>:
    622a:	b7 ff       	sbrs	r27, 7
    622c:	08 95       	ret
    622e:	82 1b       	sub	r24, r18
    6230:	93 0b       	sbc	r25, r19
    6232:	08 95       	ret

00006234 <__muluhisi3>:
    6234:	0e 94 04 31 	call	0x6208	; 0x6208 <__umulhisi3>
    6238:	a5 9f       	mul	r26, r21
    623a:	90 0d       	add	r25, r0
    623c:	b4 9f       	mul	r27, r20
    623e:	90 0d       	add	r25, r0
    6240:	a4 9f       	mul	r26, r20
    6242:	80 0d       	add	r24, r0
    6244:	91 1d       	adc	r25, r1
    6246:	11 24       	eor	r1, r1
    6248:	08 95       	ret

0000624a <__mulshisi3>:
    624a:	b7 ff       	sbrs	r27, 7
    624c:	0c 94 1a 31 	jmp	0x6234	; 0x6234 <__muluhisi3>

00006250 <__mulohisi3>:
    6250:	0e 94 1a 31 	call	0x6234	; 0x6234 <__muluhisi3>
    6254:	82 1b       	sub	r24, r18
    6256:	93 0b       	sbc	r25, r19
    6258:	08 95       	ret

0000625a <malloc>:
    625a:	0f 93       	push	r16
    625c:	1f 93       	push	r17
    625e:	cf 93       	push	r28
    6260:	df 93       	push	r29
    6262:	82 30       	cpi	r24, 0x02	; 2
    6264:	91 05       	cpc	r25, r1
    6266:	10 f4       	brcc	.+4      	; 0x626c <malloc+0x12>
    6268:	82 e0       	ldi	r24, 0x02	; 2
    626a:	90 e0       	ldi	r25, 0x00	; 0
    626c:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <__flp>
    6270:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <__flp+0x1>
    6274:	20 e0       	ldi	r18, 0x00	; 0
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	a0 e0       	ldi	r26, 0x00	; 0
    627a:	b0 e0       	ldi	r27, 0x00	; 0
    627c:	30 97       	sbiw	r30, 0x00	; 0
    627e:	19 f1       	breq	.+70     	; 0x62c6 <malloc+0x6c>
    6280:	40 81       	ld	r20, Z
    6282:	51 81       	ldd	r21, Z+1	; 0x01
    6284:	02 81       	ldd	r16, Z+2	; 0x02
    6286:	13 81       	ldd	r17, Z+3	; 0x03
    6288:	48 17       	cp	r20, r24
    628a:	59 07       	cpc	r21, r25
    628c:	c8 f0       	brcs	.+50     	; 0x62c0 <malloc+0x66>
    628e:	84 17       	cp	r24, r20
    6290:	95 07       	cpc	r25, r21
    6292:	69 f4       	brne	.+26     	; 0x62ae <malloc+0x54>
    6294:	10 97       	sbiw	r26, 0x00	; 0
    6296:	31 f0       	breq	.+12     	; 0x62a4 <malloc+0x4a>
    6298:	12 96       	adiw	r26, 0x02	; 2
    629a:	0c 93       	st	X, r16
    629c:	12 97       	sbiw	r26, 0x02	; 2
    629e:	13 96       	adiw	r26, 0x03	; 3
    62a0:	1c 93       	st	X, r17
    62a2:	27 c0       	rjmp	.+78     	; 0x62f2 <malloc+0x98>
    62a4:	00 93 7b 05 	sts	0x057B, r16	; 0x80057b <__flp>
    62a8:	10 93 7c 05 	sts	0x057C, r17	; 0x80057c <__flp+0x1>
    62ac:	22 c0       	rjmp	.+68     	; 0x62f2 <malloc+0x98>
    62ae:	21 15       	cp	r18, r1
    62b0:	31 05       	cpc	r19, r1
    62b2:	19 f0       	breq	.+6      	; 0x62ba <malloc+0x60>
    62b4:	42 17       	cp	r20, r18
    62b6:	53 07       	cpc	r21, r19
    62b8:	18 f4       	brcc	.+6      	; 0x62c0 <malloc+0x66>
    62ba:	9a 01       	movw	r18, r20
    62bc:	bd 01       	movw	r22, r26
    62be:	ef 01       	movw	r28, r30
    62c0:	df 01       	movw	r26, r30
    62c2:	f8 01       	movw	r30, r16
    62c4:	db cf       	rjmp	.-74     	; 0x627c <malloc+0x22>
    62c6:	21 15       	cp	r18, r1
    62c8:	31 05       	cpc	r19, r1
    62ca:	f9 f0       	breq	.+62     	; 0x630a <malloc+0xb0>
    62cc:	28 1b       	sub	r18, r24
    62ce:	39 0b       	sbc	r19, r25
    62d0:	24 30       	cpi	r18, 0x04	; 4
    62d2:	31 05       	cpc	r19, r1
    62d4:	80 f4       	brcc	.+32     	; 0x62f6 <malloc+0x9c>
    62d6:	8a 81       	ldd	r24, Y+2	; 0x02
    62d8:	9b 81       	ldd	r25, Y+3	; 0x03
    62da:	61 15       	cp	r22, r1
    62dc:	71 05       	cpc	r23, r1
    62de:	21 f0       	breq	.+8      	; 0x62e8 <malloc+0x8e>
    62e0:	fb 01       	movw	r30, r22
    62e2:	93 83       	std	Z+3, r25	; 0x03
    62e4:	82 83       	std	Z+2, r24	; 0x02
    62e6:	04 c0       	rjmp	.+8      	; 0x62f0 <malloc+0x96>
    62e8:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <__flp+0x1>
    62ec:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <__flp>
    62f0:	fe 01       	movw	r30, r28
    62f2:	32 96       	adiw	r30, 0x02	; 2
    62f4:	44 c0       	rjmp	.+136    	; 0x637e <malloc+0x124>
    62f6:	fe 01       	movw	r30, r28
    62f8:	e2 0f       	add	r30, r18
    62fa:	f3 1f       	adc	r31, r19
    62fc:	81 93       	st	Z+, r24
    62fe:	91 93       	st	Z+, r25
    6300:	22 50       	subi	r18, 0x02	; 2
    6302:	31 09       	sbc	r19, r1
    6304:	39 83       	std	Y+1, r19	; 0x01
    6306:	28 83       	st	Y, r18
    6308:	3a c0       	rjmp	.+116    	; 0x637e <malloc+0x124>
    630a:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    630e:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    6312:	23 2b       	or	r18, r19
    6314:	41 f4       	brne	.+16     	; 0x6326 <malloc+0xcc>
    6316:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    631a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    631e:	30 93 7a 05 	sts	0x057A, r19	; 0x80057a <__brkval+0x1>
    6322:	20 93 79 05 	sts	0x0579, r18	; 0x800579 <__brkval>
    6326:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    632a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    632e:	21 15       	cp	r18, r1
    6330:	31 05       	cpc	r19, r1
    6332:	41 f4       	brne	.+16     	; 0x6344 <malloc+0xea>
    6334:	2d b7       	in	r18, 0x3d	; 61
    6336:	3e b7       	in	r19, 0x3e	; 62
    6338:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    633c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6340:	24 1b       	sub	r18, r20
    6342:	35 0b       	sbc	r19, r21
    6344:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <__brkval>
    6348:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <__brkval+0x1>
    634c:	e2 17       	cp	r30, r18
    634e:	f3 07       	cpc	r31, r19
    6350:	a0 f4       	brcc	.+40     	; 0x637a <malloc+0x120>
    6352:	2e 1b       	sub	r18, r30
    6354:	3f 0b       	sbc	r19, r31
    6356:	28 17       	cp	r18, r24
    6358:	39 07       	cpc	r19, r25
    635a:	78 f0       	brcs	.+30     	; 0x637a <malloc+0x120>
    635c:	ac 01       	movw	r20, r24
    635e:	4e 5f       	subi	r20, 0xFE	; 254
    6360:	5f 4f       	sbci	r21, 0xFF	; 255
    6362:	24 17       	cp	r18, r20
    6364:	35 07       	cpc	r19, r21
    6366:	48 f0       	brcs	.+18     	; 0x637a <malloc+0x120>
    6368:	4e 0f       	add	r20, r30
    636a:	5f 1f       	adc	r21, r31
    636c:	50 93 7a 05 	sts	0x057A, r21	; 0x80057a <__brkval+0x1>
    6370:	40 93 79 05 	sts	0x0579, r20	; 0x800579 <__brkval>
    6374:	81 93       	st	Z+, r24
    6376:	91 93       	st	Z+, r25
    6378:	02 c0       	rjmp	.+4      	; 0x637e <malloc+0x124>
    637a:	e0 e0       	ldi	r30, 0x00	; 0
    637c:	f0 e0       	ldi	r31, 0x00	; 0
    637e:	cf 01       	movw	r24, r30
    6380:	df 91       	pop	r29
    6382:	cf 91       	pop	r28
    6384:	1f 91       	pop	r17
    6386:	0f 91       	pop	r16
    6388:	08 95       	ret

0000638a <free>:
    638a:	cf 93       	push	r28
    638c:	df 93       	push	r29
    638e:	00 97       	sbiw	r24, 0x00	; 0
    6390:	09 f4       	brne	.+2      	; 0x6394 <free+0xa>
    6392:	81 c0       	rjmp	.+258    	; 0x6496 <free+0x10c>
    6394:	fc 01       	movw	r30, r24
    6396:	32 97       	sbiw	r30, 0x02	; 2
    6398:	13 82       	std	Z+3, r1	; 0x03
    639a:	12 82       	std	Z+2, r1	; 0x02
    639c:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <__flp>
    63a0:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <__flp+0x1>
    63a4:	10 97       	sbiw	r26, 0x00	; 0
    63a6:	81 f4       	brne	.+32     	; 0x63c8 <free+0x3e>
    63a8:	20 81       	ld	r18, Z
    63aa:	31 81       	ldd	r19, Z+1	; 0x01
    63ac:	82 0f       	add	r24, r18
    63ae:	93 1f       	adc	r25, r19
    63b0:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    63b4:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    63b8:	28 17       	cp	r18, r24
    63ba:	39 07       	cpc	r19, r25
    63bc:	51 f5       	brne	.+84     	; 0x6412 <free+0x88>
    63be:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <__brkval+0x1>
    63c2:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <__brkval>
    63c6:	67 c0       	rjmp	.+206    	; 0x6496 <free+0x10c>
    63c8:	ed 01       	movw	r28, r26
    63ca:	20 e0       	ldi	r18, 0x00	; 0
    63cc:	30 e0       	ldi	r19, 0x00	; 0
    63ce:	ce 17       	cp	r28, r30
    63d0:	df 07       	cpc	r29, r31
    63d2:	40 f4       	brcc	.+16     	; 0x63e4 <free+0x5a>
    63d4:	4a 81       	ldd	r20, Y+2	; 0x02
    63d6:	5b 81       	ldd	r21, Y+3	; 0x03
    63d8:	9e 01       	movw	r18, r28
    63da:	41 15       	cp	r20, r1
    63dc:	51 05       	cpc	r21, r1
    63de:	f1 f0       	breq	.+60     	; 0x641c <free+0x92>
    63e0:	ea 01       	movw	r28, r20
    63e2:	f5 cf       	rjmp	.-22     	; 0x63ce <free+0x44>
    63e4:	d3 83       	std	Z+3, r29	; 0x03
    63e6:	c2 83       	std	Z+2, r28	; 0x02
    63e8:	40 81       	ld	r20, Z
    63ea:	51 81       	ldd	r21, Z+1	; 0x01
    63ec:	84 0f       	add	r24, r20
    63ee:	95 1f       	adc	r25, r21
    63f0:	c8 17       	cp	r28, r24
    63f2:	d9 07       	cpc	r29, r25
    63f4:	59 f4       	brne	.+22     	; 0x640c <free+0x82>
    63f6:	88 81       	ld	r24, Y
    63f8:	99 81       	ldd	r25, Y+1	; 0x01
    63fa:	84 0f       	add	r24, r20
    63fc:	95 1f       	adc	r25, r21
    63fe:	02 96       	adiw	r24, 0x02	; 2
    6400:	91 83       	std	Z+1, r25	; 0x01
    6402:	80 83       	st	Z, r24
    6404:	8a 81       	ldd	r24, Y+2	; 0x02
    6406:	9b 81       	ldd	r25, Y+3	; 0x03
    6408:	93 83       	std	Z+3, r25	; 0x03
    640a:	82 83       	std	Z+2, r24	; 0x02
    640c:	21 15       	cp	r18, r1
    640e:	31 05       	cpc	r19, r1
    6410:	29 f4       	brne	.+10     	; 0x641c <free+0x92>
    6412:	f0 93 7c 05 	sts	0x057C, r31	; 0x80057c <__flp+0x1>
    6416:	e0 93 7b 05 	sts	0x057B, r30	; 0x80057b <__flp>
    641a:	3d c0       	rjmp	.+122    	; 0x6496 <free+0x10c>
    641c:	e9 01       	movw	r28, r18
    641e:	fb 83       	std	Y+3, r31	; 0x03
    6420:	ea 83       	std	Y+2, r30	; 0x02
    6422:	49 91       	ld	r20, Y+
    6424:	59 91       	ld	r21, Y+
    6426:	c4 0f       	add	r28, r20
    6428:	d5 1f       	adc	r29, r21
    642a:	ec 17       	cp	r30, r28
    642c:	fd 07       	cpc	r31, r29
    642e:	61 f4       	brne	.+24     	; 0x6448 <free+0xbe>
    6430:	80 81       	ld	r24, Z
    6432:	91 81       	ldd	r25, Z+1	; 0x01
    6434:	84 0f       	add	r24, r20
    6436:	95 1f       	adc	r25, r21
    6438:	02 96       	adiw	r24, 0x02	; 2
    643a:	e9 01       	movw	r28, r18
    643c:	99 83       	std	Y+1, r25	; 0x01
    643e:	88 83       	st	Y, r24
    6440:	82 81       	ldd	r24, Z+2	; 0x02
    6442:	93 81       	ldd	r25, Z+3	; 0x03
    6444:	9b 83       	std	Y+3, r25	; 0x03
    6446:	8a 83       	std	Y+2, r24	; 0x02
    6448:	e0 e0       	ldi	r30, 0x00	; 0
    644a:	f0 e0       	ldi	r31, 0x00	; 0
    644c:	12 96       	adiw	r26, 0x02	; 2
    644e:	8d 91       	ld	r24, X+
    6450:	9c 91       	ld	r25, X
    6452:	13 97       	sbiw	r26, 0x03	; 3
    6454:	00 97       	sbiw	r24, 0x00	; 0
    6456:	19 f0       	breq	.+6      	; 0x645e <free+0xd4>
    6458:	fd 01       	movw	r30, r26
    645a:	dc 01       	movw	r26, r24
    645c:	f7 cf       	rjmp	.-18     	; 0x644c <free+0xc2>
    645e:	8d 91       	ld	r24, X+
    6460:	9c 91       	ld	r25, X
    6462:	11 97       	sbiw	r26, 0x01	; 1
    6464:	9d 01       	movw	r18, r26
    6466:	2e 5f       	subi	r18, 0xFE	; 254
    6468:	3f 4f       	sbci	r19, 0xFF	; 255
    646a:	82 0f       	add	r24, r18
    646c:	93 1f       	adc	r25, r19
    646e:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    6472:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    6476:	28 17       	cp	r18, r24
    6478:	39 07       	cpc	r19, r25
    647a:	69 f4       	brne	.+26     	; 0x6496 <free+0x10c>
    647c:	30 97       	sbiw	r30, 0x00	; 0
    647e:	29 f4       	brne	.+10     	; 0x648a <free+0x100>
    6480:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <__flp+0x1>
    6484:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <__flp>
    6488:	02 c0       	rjmp	.+4      	; 0x648e <free+0x104>
    648a:	13 82       	std	Z+3, r1	; 0x03
    648c:	12 82       	std	Z+2, r1	; 0x02
    648e:	b0 93 7a 05 	sts	0x057A, r27	; 0x80057a <__brkval+0x1>
    6492:	a0 93 79 05 	sts	0x0579, r26	; 0x800579 <__brkval>
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	08 95       	ret

0000649c <atoi>:
    649c:	fc 01       	movw	r30, r24
    649e:	88 27       	eor	r24, r24
    64a0:	99 27       	eor	r25, r25
    64a2:	e8 94       	clt
    64a4:	21 91       	ld	r18, Z+
    64a6:	20 32       	cpi	r18, 0x20	; 32
    64a8:	e9 f3       	breq	.-6      	; 0x64a4 <atoi+0x8>
    64aa:	29 30       	cpi	r18, 0x09	; 9
    64ac:	10 f0       	brcs	.+4      	; 0x64b2 <atoi+0x16>
    64ae:	2e 30       	cpi	r18, 0x0E	; 14
    64b0:	c8 f3       	brcs	.-14     	; 0x64a4 <atoi+0x8>
    64b2:	2b 32       	cpi	r18, 0x2B	; 43
    64b4:	41 f0       	breq	.+16     	; 0x64c6 <atoi+0x2a>
    64b6:	2d 32       	cpi	r18, 0x2D	; 45
    64b8:	39 f4       	brne	.+14     	; 0x64c8 <atoi+0x2c>
    64ba:	68 94       	set
    64bc:	04 c0       	rjmp	.+8      	; 0x64c6 <atoi+0x2a>
    64be:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__mulhi_const_10>
    64c2:	82 0f       	add	r24, r18
    64c4:	91 1d       	adc	r25, r1
    64c6:	21 91       	ld	r18, Z+
    64c8:	20 53       	subi	r18, 0x30	; 48
    64ca:	2a 30       	cpi	r18, 0x0A	; 10
    64cc:	c0 f3       	brcs	.-16     	; 0x64be <atoi+0x22>
    64ce:	1e f4       	brtc	.+6      	; 0x64d6 <atoi+0x3a>
    64d0:	90 95       	com	r25
    64d2:	81 95       	neg	r24
    64d4:	9f 4f       	sbci	r25, 0xFF	; 255
    64d6:	08 95       	ret

000064d8 <atol>:
    64d8:	1f 93       	push	r17
    64da:	fc 01       	movw	r30, r24
    64dc:	99 27       	eor	r25, r25
    64de:	88 27       	eor	r24, r24
    64e0:	bc 01       	movw	r22, r24
    64e2:	e8 94       	clt
    64e4:	11 91       	ld	r17, Z+
    64e6:	10 32       	cpi	r17, 0x20	; 32
    64e8:	e9 f3       	breq	.-6      	; 0x64e4 <atol+0xc>
    64ea:	19 30       	cpi	r17, 0x09	; 9
    64ec:	10 f0       	brcs	.+4      	; 0x64f2 <atol+0x1a>
    64ee:	1e 30       	cpi	r17, 0x0E	; 14
    64f0:	c8 f3       	brcs	.-14     	; 0x64e4 <atol+0xc>
    64f2:	1b 32       	cpi	r17, 0x2B	; 43
    64f4:	51 f0       	breq	.+20     	; 0x650a <atol+0x32>
    64f6:	1d 32       	cpi	r17, 0x2D	; 45
    64f8:	49 f4       	brne	.+18     	; 0x650c <atol+0x34>
    64fa:	68 94       	set
    64fc:	06 c0       	rjmp	.+12     	; 0x650a <atol+0x32>
    64fe:	0e 94 bc 32 	call	0x6578	; 0x6578 <__mulsi_const_10>
    6502:	61 0f       	add	r22, r17
    6504:	71 1d       	adc	r23, r1
    6506:	81 1d       	adc	r24, r1
    6508:	91 1d       	adc	r25, r1
    650a:	11 91       	ld	r17, Z+
    650c:	10 53       	subi	r17, 0x30	; 48
    650e:	1a 30       	cpi	r17, 0x0A	; 10
    6510:	b0 f3       	brcs	.-20     	; 0x64fe <atol+0x26>
    6512:	3e f4       	brtc	.+14     	; 0x6522 <atol+0x4a>
    6514:	90 95       	com	r25
    6516:	80 95       	com	r24
    6518:	70 95       	com	r23
    651a:	61 95       	neg	r22
    651c:	7f 4f       	sbci	r23, 0xFF	; 255
    651e:	8f 4f       	sbci	r24, 0xFF	; 255
    6520:	9f 4f       	sbci	r25, 0xFF	; 255
    6522:	1f 91       	pop	r17
    6524:	08 95       	ret

00006526 <toupper>:
    6526:	91 11       	cpse	r25, r1
    6528:	08 95       	ret
    652a:	81 56       	subi	r24, 0x61	; 97
    652c:	8a 51       	subi	r24, 0x1A	; 26
    652e:	08 f4       	brcc	.+2      	; 0x6532 <toupper+0xc>
    6530:	80 52       	subi	r24, 0x20	; 32
    6532:	85 58       	subi	r24, 0x85	; 133
    6534:	08 95       	ret

00006536 <strcat>:
    6536:	fb 01       	movw	r30, r22
    6538:	dc 01       	movw	r26, r24
    653a:	0d 90       	ld	r0, X+
    653c:	00 20       	and	r0, r0
    653e:	e9 f7       	brne	.-6      	; 0x653a <strcat+0x4>
    6540:	11 97       	sbiw	r26, 0x01	; 1
    6542:	01 90       	ld	r0, Z+
    6544:	0d 92       	st	X+, r0
    6546:	00 20       	and	r0, r0
    6548:	e1 f7       	brne	.-8      	; 0x6542 <strcat+0xc>
    654a:	08 95       	ret

0000654c <strcpy>:
    654c:	fb 01       	movw	r30, r22
    654e:	dc 01       	movw	r26, r24
    6550:	01 90       	ld	r0, Z+
    6552:	0d 92       	st	X+, r0
    6554:	00 20       	and	r0, r0
    6556:	e1 f7       	brne	.-8      	; 0x6550 <strcpy+0x4>
    6558:	08 95       	ret

0000655a <strncpy>:
    655a:	fb 01       	movw	r30, r22
    655c:	dc 01       	movw	r26, r24
    655e:	41 50       	subi	r20, 0x01	; 1
    6560:	50 40       	sbci	r21, 0x00	; 0
    6562:	48 f0       	brcs	.+18     	; 0x6576 <strncpy+0x1c>
    6564:	01 90       	ld	r0, Z+
    6566:	0d 92       	st	X+, r0
    6568:	00 20       	and	r0, r0
    656a:	c9 f7       	brne	.-14     	; 0x655e <strncpy+0x4>
    656c:	01 c0       	rjmp	.+2      	; 0x6570 <strncpy+0x16>
    656e:	1d 92       	st	X+, r1
    6570:	41 50       	subi	r20, 0x01	; 1
    6572:	50 40       	sbci	r21, 0x00	; 0
    6574:	e0 f7       	brcc	.-8      	; 0x656e <strncpy+0x14>
    6576:	08 95       	ret

00006578 <__mulsi_const_10>:
    6578:	59 2f       	mov	r21, r25
    657a:	48 2f       	mov	r20, r24
    657c:	37 2f       	mov	r19, r23
    657e:	26 2f       	mov	r18, r22
    6580:	66 0f       	add	r22, r22
    6582:	77 1f       	adc	r23, r23
    6584:	88 1f       	adc	r24, r24
    6586:	99 1f       	adc	r25, r25
    6588:	66 0f       	add	r22, r22
    658a:	77 1f       	adc	r23, r23
    658c:	88 1f       	adc	r24, r24
    658e:	99 1f       	adc	r25, r25
    6590:	62 0f       	add	r22, r18
    6592:	73 1f       	adc	r23, r19
    6594:	84 1f       	adc	r24, r20
    6596:	95 1f       	adc	r25, r21
    6598:	66 0f       	add	r22, r22
    659a:	77 1f       	adc	r23, r23
    659c:	88 1f       	adc	r24, r24
    659e:	99 1f       	adc	r25, r25
    65a0:	08 95       	ret

000065a2 <__mulhi_const_10>:
    65a2:	7a e0       	ldi	r23, 0x0A	; 10
    65a4:	97 9f       	mul	r25, r23
    65a6:	90 2d       	mov	r25, r0
    65a8:	87 9f       	mul	r24, r23
    65aa:	80 2d       	mov	r24, r0
    65ac:	91 0d       	add	r25, r1
    65ae:	11 24       	eor	r1, r1
    65b0:	08 95       	ret

000065b2 <sprintf>:
    65b2:	ae e0       	ldi	r26, 0x0E	; 14
    65b4:	b0 e0       	ldi	r27, 0x00	; 0
    65b6:	ef ed       	ldi	r30, 0xDF	; 223
    65b8:	f2 e3       	ldi	r31, 0x32	; 50
    65ba:	0c 94 fd 35 	jmp	0x6bfa	; 0x6bfa <__prologue_saves__+0x1c>
    65be:	0d 89       	ldd	r16, Y+21	; 0x15
    65c0:	1e 89       	ldd	r17, Y+22	; 0x16
    65c2:	86 e0       	ldi	r24, 0x06	; 6
    65c4:	8c 83       	std	Y+4, r24	; 0x04
    65c6:	1a 83       	std	Y+2, r17	; 0x02
    65c8:	09 83       	std	Y+1, r16	; 0x01
    65ca:	8f ef       	ldi	r24, 0xFF	; 255
    65cc:	9f e7       	ldi	r25, 0x7F	; 127
    65ce:	9e 83       	std	Y+6, r25	; 0x06
    65d0:	8d 83       	std	Y+5, r24	; 0x05
    65d2:	ae 01       	movw	r20, r28
    65d4:	47 5e       	subi	r20, 0xE7	; 231
    65d6:	5f 4f       	sbci	r21, 0xFF	; 255
    65d8:	6f 89       	ldd	r22, Y+23	; 0x17
    65da:	78 8d       	ldd	r23, Y+24	; 0x18
    65dc:	ce 01       	movw	r24, r28
    65de:	01 96       	adiw	r24, 0x01	; 1
    65e0:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <vfprintf>
    65e4:	ef 81       	ldd	r30, Y+7	; 0x07
    65e6:	f8 85       	ldd	r31, Y+8	; 0x08
    65e8:	e0 0f       	add	r30, r16
    65ea:	f1 1f       	adc	r31, r17
    65ec:	10 82       	st	Z, r1
    65ee:	2e 96       	adiw	r28, 0x0e	; 14
    65f0:	e4 e0       	ldi	r30, 0x04	; 4
    65f2:	0c 94 19 36 	jmp	0x6c32	; 0x6c32 <__epilogue_restores__+0x1c>

000065f6 <vfprintf>:
    65f6:	ab e0       	ldi	r26, 0x0B	; 11
    65f8:	b0 e0       	ldi	r27, 0x00	; 0
    65fa:	e1 e0       	ldi	r30, 0x01	; 1
    65fc:	f3 e3       	ldi	r31, 0x33	; 51
    65fe:	0c 94 ef 35 	jmp	0x6bde	; 0x6bde <__prologue_saves__>
    6602:	6c 01       	movw	r12, r24
    6604:	7b 01       	movw	r14, r22
    6606:	8a 01       	movw	r16, r20
    6608:	fc 01       	movw	r30, r24
    660a:	17 82       	std	Z+7, r1	; 0x07
    660c:	16 82       	std	Z+6, r1	; 0x06
    660e:	83 81       	ldd	r24, Z+3	; 0x03
    6610:	81 ff       	sbrs	r24, 1
    6612:	cc c1       	rjmp	.+920    	; 0x69ac <vfprintf+0x3b6>
    6614:	ce 01       	movw	r24, r28
    6616:	01 96       	adiw	r24, 0x01	; 1
    6618:	3c 01       	movw	r6, r24
    661a:	f6 01       	movw	r30, r12
    661c:	93 81       	ldd	r25, Z+3	; 0x03
    661e:	f7 01       	movw	r30, r14
    6620:	93 fd       	sbrc	r25, 3
    6622:	85 91       	lpm	r24, Z+
    6624:	93 ff       	sbrs	r25, 3
    6626:	81 91       	ld	r24, Z+
    6628:	7f 01       	movw	r14, r30
    662a:	88 23       	and	r24, r24
    662c:	09 f4       	brne	.+2      	; 0x6630 <vfprintf+0x3a>
    662e:	ba c1       	rjmp	.+884    	; 0x69a4 <vfprintf+0x3ae>
    6630:	85 32       	cpi	r24, 0x25	; 37
    6632:	39 f4       	brne	.+14     	; 0x6642 <vfprintf+0x4c>
    6634:	93 fd       	sbrc	r25, 3
    6636:	85 91       	lpm	r24, Z+
    6638:	93 ff       	sbrs	r25, 3
    663a:	81 91       	ld	r24, Z+
    663c:	7f 01       	movw	r14, r30
    663e:	85 32       	cpi	r24, 0x25	; 37
    6640:	29 f4       	brne	.+10     	; 0x664c <vfprintf+0x56>
    6642:	b6 01       	movw	r22, r12
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    664a:	e7 cf       	rjmp	.-50     	; 0x661a <vfprintf+0x24>
    664c:	91 2c       	mov	r9, r1
    664e:	21 2c       	mov	r2, r1
    6650:	31 2c       	mov	r3, r1
    6652:	ff e1       	ldi	r31, 0x1F	; 31
    6654:	f3 15       	cp	r31, r3
    6656:	d8 f0       	brcs	.+54     	; 0x668e <vfprintf+0x98>
    6658:	8b 32       	cpi	r24, 0x2B	; 43
    665a:	79 f0       	breq	.+30     	; 0x667a <vfprintf+0x84>
    665c:	38 f4       	brcc	.+14     	; 0x666c <vfprintf+0x76>
    665e:	80 32       	cpi	r24, 0x20	; 32
    6660:	79 f0       	breq	.+30     	; 0x6680 <vfprintf+0x8a>
    6662:	83 32       	cpi	r24, 0x23	; 35
    6664:	a1 f4       	brne	.+40     	; 0x668e <vfprintf+0x98>
    6666:	23 2d       	mov	r18, r3
    6668:	20 61       	ori	r18, 0x10	; 16
    666a:	1d c0       	rjmp	.+58     	; 0x66a6 <vfprintf+0xb0>
    666c:	8d 32       	cpi	r24, 0x2D	; 45
    666e:	61 f0       	breq	.+24     	; 0x6688 <vfprintf+0x92>
    6670:	80 33       	cpi	r24, 0x30	; 48
    6672:	69 f4       	brne	.+26     	; 0x668e <vfprintf+0x98>
    6674:	23 2d       	mov	r18, r3
    6676:	21 60       	ori	r18, 0x01	; 1
    6678:	16 c0       	rjmp	.+44     	; 0x66a6 <vfprintf+0xb0>
    667a:	83 2d       	mov	r24, r3
    667c:	82 60       	ori	r24, 0x02	; 2
    667e:	38 2e       	mov	r3, r24
    6680:	e3 2d       	mov	r30, r3
    6682:	e4 60       	ori	r30, 0x04	; 4
    6684:	3e 2e       	mov	r3, r30
    6686:	2a c0       	rjmp	.+84     	; 0x66dc <vfprintf+0xe6>
    6688:	f3 2d       	mov	r31, r3
    668a:	f8 60       	ori	r31, 0x08	; 8
    668c:	1d c0       	rjmp	.+58     	; 0x66c8 <vfprintf+0xd2>
    668e:	37 fc       	sbrc	r3, 7
    6690:	2d c0       	rjmp	.+90     	; 0x66ec <vfprintf+0xf6>
    6692:	20 ed       	ldi	r18, 0xD0	; 208
    6694:	28 0f       	add	r18, r24
    6696:	2a 30       	cpi	r18, 0x0A	; 10
    6698:	40 f0       	brcs	.+16     	; 0x66aa <vfprintf+0xb4>
    669a:	8e 32       	cpi	r24, 0x2E	; 46
    669c:	b9 f4       	brne	.+46     	; 0x66cc <vfprintf+0xd6>
    669e:	36 fc       	sbrc	r3, 6
    66a0:	81 c1       	rjmp	.+770    	; 0x69a4 <vfprintf+0x3ae>
    66a2:	23 2d       	mov	r18, r3
    66a4:	20 64       	ori	r18, 0x40	; 64
    66a6:	32 2e       	mov	r3, r18
    66a8:	19 c0       	rjmp	.+50     	; 0x66dc <vfprintf+0xe6>
    66aa:	36 fe       	sbrs	r3, 6
    66ac:	06 c0       	rjmp	.+12     	; 0x66ba <vfprintf+0xc4>
    66ae:	8a e0       	ldi	r24, 0x0A	; 10
    66b0:	98 9e       	mul	r9, r24
    66b2:	20 0d       	add	r18, r0
    66b4:	11 24       	eor	r1, r1
    66b6:	92 2e       	mov	r9, r18
    66b8:	11 c0       	rjmp	.+34     	; 0x66dc <vfprintf+0xe6>
    66ba:	ea e0       	ldi	r30, 0x0A	; 10
    66bc:	2e 9e       	mul	r2, r30
    66be:	20 0d       	add	r18, r0
    66c0:	11 24       	eor	r1, r1
    66c2:	22 2e       	mov	r2, r18
    66c4:	f3 2d       	mov	r31, r3
    66c6:	f0 62       	ori	r31, 0x20	; 32
    66c8:	3f 2e       	mov	r3, r31
    66ca:	08 c0       	rjmp	.+16     	; 0x66dc <vfprintf+0xe6>
    66cc:	8c 36       	cpi	r24, 0x6C	; 108
    66ce:	21 f4       	brne	.+8      	; 0x66d8 <vfprintf+0xe2>
    66d0:	83 2d       	mov	r24, r3
    66d2:	80 68       	ori	r24, 0x80	; 128
    66d4:	38 2e       	mov	r3, r24
    66d6:	02 c0       	rjmp	.+4      	; 0x66dc <vfprintf+0xe6>
    66d8:	88 36       	cpi	r24, 0x68	; 104
    66da:	41 f4       	brne	.+16     	; 0x66ec <vfprintf+0xf6>
    66dc:	f7 01       	movw	r30, r14
    66de:	93 fd       	sbrc	r25, 3
    66e0:	85 91       	lpm	r24, Z+
    66e2:	93 ff       	sbrs	r25, 3
    66e4:	81 91       	ld	r24, Z+
    66e6:	7f 01       	movw	r14, r30
    66e8:	81 11       	cpse	r24, r1
    66ea:	b3 cf       	rjmp	.-154    	; 0x6652 <vfprintf+0x5c>
    66ec:	98 2f       	mov	r25, r24
    66ee:	9f 7d       	andi	r25, 0xDF	; 223
    66f0:	95 54       	subi	r25, 0x45	; 69
    66f2:	93 30       	cpi	r25, 0x03	; 3
    66f4:	28 f4       	brcc	.+10     	; 0x6700 <vfprintf+0x10a>
    66f6:	0c 5f       	subi	r16, 0xFC	; 252
    66f8:	1f 4f       	sbci	r17, 0xFF	; 255
    66fa:	9f e3       	ldi	r25, 0x3F	; 63
    66fc:	99 83       	std	Y+1, r25	; 0x01
    66fe:	0d c0       	rjmp	.+26     	; 0x671a <vfprintf+0x124>
    6700:	83 36       	cpi	r24, 0x63	; 99
    6702:	31 f0       	breq	.+12     	; 0x6710 <vfprintf+0x11a>
    6704:	83 37       	cpi	r24, 0x73	; 115
    6706:	71 f0       	breq	.+28     	; 0x6724 <vfprintf+0x12e>
    6708:	83 35       	cpi	r24, 0x53	; 83
    670a:	09 f0       	breq	.+2      	; 0x670e <vfprintf+0x118>
    670c:	59 c0       	rjmp	.+178    	; 0x67c0 <vfprintf+0x1ca>
    670e:	21 c0       	rjmp	.+66     	; 0x6752 <vfprintf+0x15c>
    6710:	f8 01       	movw	r30, r16
    6712:	80 81       	ld	r24, Z
    6714:	89 83       	std	Y+1, r24	; 0x01
    6716:	0e 5f       	subi	r16, 0xFE	; 254
    6718:	1f 4f       	sbci	r17, 0xFF	; 255
    671a:	88 24       	eor	r8, r8
    671c:	83 94       	inc	r8
    671e:	91 2c       	mov	r9, r1
    6720:	53 01       	movw	r10, r6
    6722:	13 c0       	rjmp	.+38     	; 0x674a <vfprintf+0x154>
    6724:	28 01       	movw	r4, r16
    6726:	f2 e0       	ldi	r31, 0x02	; 2
    6728:	4f 0e       	add	r4, r31
    672a:	51 1c       	adc	r5, r1
    672c:	f8 01       	movw	r30, r16
    672e:	a0 80       	ld	r10, Z
    6730:	b1 80       	ldd	r11, Z+1	; 0x01
    6732:	36 fe       	sbrs	r3, 6
    6734:	03 c0       	rjmp	.+6      	; 0x673c <vfprintf+0x146>
    6736:	69 2d       	mov	r22, r9
    6738:	70 e0       	ldi	r23, 0x00	; 0
    673a:	02 c0       	rjmp	.+4      	; 0x6740 <vfprintf+0x14a>
    673c:	6f ef       	ldi	r22, 0xFF	; 255
    673e:	7f ef       	ldi	r23, 0xFF	; 255
    6740:	c5 01       	movw	r24, r10
    6742:	0e 94 e7 34 	call	0x69ce	; 0x69ce <strnlen>
    6746:	4c 01       	movw	r8, r24
    6748:	82 01       	movw	r16, r4
    674a:	f3 2d       	mov	r31, r3
    674c:	ff 77       	andi	r31, 0x7F	; 127
    674e:	3f 2e       	mov	r3, r31
    6750:	16 c0       	rjmp	.+44     	; 0x677e <vfprintf+0x188>
    6752:	28 01       	movw	r4, r16
    6754:	22 e0       	ldi	r18, 0x02	; 2
    6756:	42 0e       	add	r4, r18
    6758:	51 1c       	adc	r5, r1
    675a:	f8 01       	movw	r30, r16
    675c:	a0 80       	ld	r10, Z
    675e:	b1 80       	ldd	r11, Z+1	; 0x01
    6760:	36 fe       	sbrs	r3, 6
    6762:	03 c0       	rjmp	.+6      	; 0x676a <vfprintf+0x174>
    6764:	69 2d       	mov	r22, r9
    6766:	70 e0       	ldi	r23, 0x00	; 0
    6768:	02 c0       	rjmp	.+4      	; 0x676e <vfprintf+0x178>
    676a:	6f ef       	ldi	r22, 0xFF	; 255
    676c:	7f ef       	ldi	r23, 0xFF	; 255
    676e:	c5 01       	movw	r24, r10
    6770:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <strnlen_P>
    6774:	4c 01       	movw	r8, r24
    6776:	f3 2d       	mov	r31, r3
    6778:	f0 68       	ori	r31, 0x80	; 128
    677a:	3f 2e       	mov	r3, r31
    677c:	82 01       	movw	r16, r4
    677e:	33 fc       	sbrc	r3, 3
    6780:	1b c0       	rjmp	.+54     	; 0x67b8 <vfprintf+0x1c2>
    6782:	82 2d       	mov	r24, r2
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	88 16       	cp	r8, r24
    6788:	99 06       	cpc	r9, r25
    678a:	b0 f4       	brcc	.+44     	; 0x67b8 <vfprintf+0x1c2>
    678c:	b6 01       	movw	r22, r12
    678e:	80 e2       	ldi	r24, 0x20	; 32
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    6796:	2a 94       	dec	r2
    6798:	f4 cf       	rjmp	.-24     	; 0x6782 <vfprintf+0x18c>
    679a:	f5 01       	movw	r30, r10
    679c:	37 fc       	sbrc	r3, 7
    679e:	85 91       	lpm	r24, Z+
    67a0:	37 fe       	sbrs	r3, 7
    67a2:	81 91       	ld	r24, Z+
    67a4:	5f 01       	movw	r10, r30
    67a6:	b6 01       	movw	r22, r12
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    67ae:	21 10       	cpse	r2, r1
    67b0:	2a 94       	dec	r2
    67b2:	21 e0       	ldi	r18, 0x01	; 1
    67b4:	82 1a       	sub	r8, r18
    67b6:	91 08       	sbc	r9, r1
    67b8:	81 14       	cp	r8, r1
    67ba:	91 04       	cpc	r9, r1
    67bc:	71 f7       	brne	.-36     	; 0x679a <vfprintf+0x1a4>
    67be:	e8 c0       	rjmp	.+464    	; 0x6990 <vfprintf+0x39a>
    67c0:	84 36       	cpi	r24, 0x64	; 100
    67c2:	11 f0       	breq	.+4      	; 0x67c8 <vfprintf+0x1d2>
    67c4:	89 36       	cpi	r24, 0x69	; 105
    67c6:	41 f5       	brne	.+80     	; 0x6818 <vfprintf+0x222>
    67c8:	f8 01       	movw	r30, r16
    67ca:	37 fe       	sbrs	r3, 7
    67cc:	07 c0       	rjmp	.+14     	; 0x67dc <vfprintf+0x1e6>
    67ce:	60 81       	ld	r22, Z
    67d0:	71 81       	ldd	r23, Z+1	; 0x01
    67d2:	82 81       	ldd	r24, Z+2	; 0x02
    67d4:	93 81       	ldd	r25, Z+3	; 0x03
    67d6:	0c 5f       	subi	r16, 0xFC	; 252
    67d8:	1f 4f       	sbci	r17, 0xFF	; 255
    67da:	08 c0       	rjmp	.+16     	; 0x67ec <vfprintf+0x1f6>
    67dc:	60 81       	ld	r22, Z
    67de:	71 81       	ldd	r23, Z+1	; 0x01
    67e0:	07 2e       	mov	r0, r23
    67e2:	00 0c       	add	r0, r0
    67e4:	88 0b       	sbc	r24, r24
    67e6:	99 0b       	sbc	r25, r25
    67e8:	0e 5f       	subi	r16, 0xFE	; 254
    67ea:	1f 4f       	sbci	r17, 0xFF	; 255
    67ec:	f3 2d       	mov	r31, r3
    67ee:	ff 76       	andi	r31, 0x6F	; 111
    67f0:	3f 2e       	mov	r3, r31
    67f2:	97 ff       	sbrs	r25, 7
    67f4:	09 c0       	rjmp	.+18     	; 0x6808 <vfprintf+0x212>
    67f6:	90 95       	com	r25
    67f8:	80 95       	com	r24
    67fa:	70 95       	com	r23
    67fc:	61 95       	neg	r22
    67fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6800:	8f 4f       	sbci	r24, 0xFF	; 255
    6802:	9f 4f       	sbci	r25, 0xFF	; 255
    6804:	f0 68       	ori	r31, 0x80	; 128
    6806:	3f 2e       	mov	r3, r31
    6808:	2a e0       	ldi	r18, 0x0A	; 10
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	a3 01       	movw	r20, r6
    680e:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__ultoa_invert>
    6812:	88 2e       	mov	r8, r24
    6814:	86 18       	sub	r8, r6
    6816:	45 c0       	rjmp	.+138    	; 0x68a2 <vfprintf+0x2ac>
    6818:	85 37       	cpi	r24, 0x75	; 117
    681a:	31 f4       	brne	.+12     	; 0x6828 <vfprintf+0x232>
    681c:	23 2d       	mov	r18, r3
    681e:	2f 7e       	andi	r18, 0xEF	; 239
    6820:	b2 2e       	mov	r11, r18
    6822:	2a e0       	ldi	r18, 0x0A	; 10
    6824:	30 e0       	ldi	r19, 0x00	; 0
    6826:	25 c0       	rjmp	.+74     	; 0x6872 <vfprintf+0x27c>
    6828:	93 2d       	mov	r25, r3
    682a:	99 7f       	andi	r25, 0xF9	; 249
    682c:	b9 2e       	mov	r11, r25
    682e:	8f 36       	cpi	r24, 0x6F	; 111
    6830:	c1 f0       	breq	.+48     	; 0x6862 <vfprintf+0x26c>
    6832:	18 f4       	brcc	.+6      	; 0x683a <vfprintf+0x244>
    6834:	88 35       	cpi	r24, 0x58	; 88
    6836:	79 f0       	breq	.+30     	; 0x6856 <vfprintf+0x260>
    6838:	b5 c0       	rjmp	.+362    	; 0x69a4 <vfprintf+0x3ae>
    683a:	80 37       	cpi	r24, 0x70	; 112
    683c:	19 f0       	breq	.+6      	; 0x6844 <vfprintf+0x24e>
    683e:	88 37       	cpi	r24, 0x78	; 120
    6840:	21 f0       	breq	.+8      	; 0x684a <vfprintf+0x254>
    6842:	b0 c0       	rjmp	.+352    	; 0x69a4 <vfprintf+0x3ae>
    6844:	e9 2f       	mov	r30, r25
    6846:	e0 61       	ori	r30, 0x10	; 16
    6848:	be 2e       	mov	r11, r30
    684a:	b4 fe       	sbrs	r11, 4
    684c:	0d c0       	rjmp	.+26     	; 0x6868 <vfprintf+0x272>
    684e:	fb 2d       	mov	r31, r11
    6850:	f4 60       	ori	r31, 0x04	; 4
    6852:	bf 2e       	mov	r11, r31
    6854:	09 c0       	rjmp	.+18     	; 0x6868 <vfprintf+0x272>
    6856:	34 fe       	sbrs	r3, 4
    6858:	0a c0       	rjmp	.+20     	; 0x686e <vfprintf+0x278>
    685a:	29 2f       	mov	r18, r25
    685c:	26 60       	ori	r18, 0x06	; 6
    685e:	b2 2e       	mov	r11, r18
    6860:	06 c0       	rjmp	.+12     	; 0x686e <vfprintf+0x278>
    6862:	28 e0       	ldi	r18, 0x08	; 8
    6864:	30 e0       	ldi	r19, 0x00	; 0
    6866:	05 c0       	rjmp	.+10     	; 0x6872 <vfprintf+0x27c>
    6868:	20 e1       	ldi	r18, 0x10	; 16
    686a:	30 e0       	ldi	r19, 0x00	; 0
    686c:	02 c0       	rjmp	.+4      	; 0x6872 <vfprintf+0x27c>
    686e:	20 e1       	ldi	r18, 0x10	; 16
    6870:	32 e0       	ldi	r19, 0x02	; 2
    6872:	f8 01       	movw	r30, r16
    6874:	b7 fe       	sbrs	r11, 7
    6876:	07 c0       	rjmp	.+14     	; 0x6886 <vfprintf+0x290>
    6878:	60 81       	ld	r22, Z
    687a:	71 81       	ldd	r23, Z+1	; 0x01
    687c:	82 81       	ldd	r24, Z+2	; 0x02
    687e:	93 81       	ldd	r25, Z+3	; 0x03
    6880:	0c 5f       	subi	r16, 0xFC	; 252
    6882:	1f 4f       	sbci	r17, 0xFF	; 255
    6884:	06 c0       	rjmp	.+12     	; 0x6892 <vfprintf+0x29c>
    6886:	60 81       	ld	r22, Z
    6888:	71 81       	ldd	r23, Z+1	; 0x01
    688a:	80 e0       	ldi	r24, 0x00	; 0
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	0e 5f       	subi	r16, 0xFE	; 254
    6890:	1f 4f       	sbci	r17, 0xFF	; 255
    6892:	a3 01       	movw	r20, r6
    6894:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__ultoa_invert>
    6898:	88 2e       	mov	r8, r24
    689a:	86 18       	sub	r8, r6
    689c:	fb 2d       	mov	r31, r11
    689e:	ff 77       	andi	r31, 0x7F	; 127
    68a0:	3f 2e       	mov	r3, r31
    68a2:	36 fe       	sbrs	r3, 6
    68a4:	0d c0       	rjmp	.+26     	; 0x68c0 <vfprintf+0x2ca>
    68a6:	23 2d       	mov	r18, r3
    68a8:	2e 7f       	andi	r18, 0xFE	; 254
    68aa:	a2 2e       	mov	r10, r18
    68ac:	89 14       	cp	r8, r9
    68ae:	58 f4       	brcc	.+22     	; 0x68c6 <vfprintf+0x2d0>
    68b0:	34 fe       	sbrs	r3, 4
    68b2:	0b c0       	rjmp	.+22     	; 0x68ca <vfprintf+0x2d4>
    68b4:	32 fc       	sbrc	r3, 2
    68b6:	09 c0       	rjmp	.+18     	; 0x68ca <vfprintf+0x2d4>
    68b8:	83 2d       	mov	r24, r3
    68ba:	8e 7e       	andi	r24, 0xEE	; 238
    68bc:	a8 2e       	mov	r10, r24
    68be:	05 c0       	rjmp	.+10     	; 0x68ca <vfprintf+0x2d4>
    68c0:	b8 2c       	mov	r11, r8
    68c2:	a3 2c       	mov	r10, r3
    68c4:	03 c0       	rjmp	.+6      	; 0x68cc <vfprintf+0x2d6>
    68c6:	b8 2c       	mov	r11, r8
    68c8:	01 c0       	rjmp	.+2      	; 0x68cc <vfprintf+0x2d6>
    68ca:	b9 2c       	mov	r11, r9
    68cc:	a4 fe       	sbrs	r10, 4
    68ce:	0f c0       	rjmp	.+30     	; 0x68ee <vfprintf+0x2f8>
    68d0:	fe 01       	movw	r30, r28
    68d2:	e8 0d       	add	r30, r8
    68d4:	f1 1d       	adc	r31, r1
    68d6:	80 81       	ld	r24, Z
    68d8:	80 33       	cpi	r24, 0x30	; 48
    68da:	21 f4       	brne	.+8      	; 0x68e4 <vfprintf+0x2ee>
    68dc:	9a 2d       	mov	r25, r10
    68de:	99 7e       	andi	r25, 0xE9	; 233
    68e0:	a9 2e       	mov	r10, r25
    68e2:	09 c0       	rjmp	.+18     	; 0x68f6 <vfprintf+0x300>
    68e4:	a2 fe       	sbrs	r10, 2
    68e6:	06 c0       	rjmp	.+12     	; 0x68f4 <vfprintf+0x2fe>
    68e8:	b3 94       	inc	r11
    68ea:	b3 94       	inc	r11
    68ec:	04 c0       	rjmp	.+8      	; 0x68f6 <vfprintf+0x300>
    68ee:	8a 2d       	mov	r24, r10
    68f0:	86 78       	andi	r24, 0x86	; 134
    68f2:	09 f0       	breq	.+2      	; 0x68f6 <vfprintf+0x300>
    68f4:	b3 94       	inc	r11
    68f6:	a3 fc       	sbrc	r10, 3
    68f8:	11 c0       	rjmp	.+34     	; 0x691c <vfprintf+0x326>
    68fa:	a0 fe       	sbrs	r10, 0
    68fc:	06 c0       	rjmp	.+12     	; 0x690a <vfprintf+0x314>
    68fe:	b2 14       	cp	r11, r2
    6900:	88 f4       	brcc	.+34     	; 0x6924 <vfprintf+0x32e>
    6902:	28 0c       	add	r2, r8
    6904:	92 2c       	mov	r9, r2
    6906:	9b 18       	sub	r9, r11
    6908:	0e c0       	rjmp	.+28     	; 0x6926 <vfprintf+0x330>
    690a:	b2 14       	cp	r11, r2
    690c:	60 f4       	brcc	.+24     	; 0x6926 <vfprintf+0x330>
    690e:	b6 01       	movw	r22, r12
    6910:	80 e2       	ldi	r24, 0x20	; 32
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    6918:	b3 94       	inc	r11
    691a:	f7 cf       	rjmp	.-18     	; 0x690a <vfprintf+0x314>
    691c:	b2 14       	cp	r11, r2
    691e:	18 f4       	brcc	.+6      	; 0x6926 <vfprintf+0x330>
    6920:	2b 18       	sub	r2, r11
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <vfprintf+0x332>
    6924:	98 2c       	mov	r9, r8
    6926:	21 2c       	mov	r2, r1
    6928:	a4 fe       	sbrs	r10, 4
    692a:	10 c0       	rjmp	.+32     	; 0x694c <vfprintf+0x356>
    692c:	b6 01       	movw	r22, r12
    692e:	80 e3       	ldi	r24, 0x30	; 48
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    6936:	a2 fe       	sbrs	r10, 2
    6938:	17 c0       	rjmp	.+46     	; 0x6968 <vfprintf+0x372>
    693a:	a1 fc       	sbrc	r10, 1
    693c:	03 c0       	rjmp	.+6      	; 0x6944 <vfprintf+0x34e>
    693e:	88 e7       	ldi	r24, 0x78	; 120
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	02 c0       	rjmp	.+4      	; 0x6948 <vfprintf+0x352>
    6944:	88 e5       	ldi	r24, 0x58	; 88
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	b6 01       	movw	r22, r12
    694a:	0c c0       	rjmp	.+24     	; 0x6964 <vfprintf+0x36e>
    694c:	8a 2d       	mov	r24, r10
    694e:	86 78       	andi	r24, 0x86	; 134
    6950:	59 f0       	breq	.+22     	; 0x6968 <vfprintf+0x372>
    6952:	a1 fe       	sbrs	r10, 1
    6954:	02 c0       	rjmp	.+4      	; 0x695a <vfprintf+0x364>
    6956:	8b e2       	ldi	r24, 0x2B	; 43
    6958:	01 c0       	rjmp	.+2      	; 0x695c <vfprintf+0x366>
    695a:	80 e2       	ldi	r24, 0x20	; 32
    695c:	a7 fc       	sbrc	r10, 7
    695e:	8d e2       	ldi	r24, 0x2D	; 45
    6960:	b6 01       	movw	r22, r12
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    6968:	89 14       	cp	r8, r9
    696a:	38 f4       	brcc	.+14     	; 0x697a <vfprintf+0x384>
    696c:	b6 01       	movw	r22, r12
    696e:	80 e3       	ldi	r24, 0x30	; 48
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    6976:	9a 94       	dec	r9
    6978:	f7 cf       	rjmp	.-18     	; 0x6968 <vfprintf+0x372>
    697a:	8a 94       	dec	r8
    697c:	f3 01       	movw	r30, r6
    697e:	e8 0d       	add	r30, r8
    6980:	f1 1d       	adc	r31, r1
    6982:	80 81       	ld	r24, Z
    6984:	b6 01       	movw	r22, r12
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    698c:	81 10       	cpse	r8, r1
    698e:	f5 cf       	rjmp	.-22     	; 0x697a <vfprintf+0x384>
    6990:	22 20       	and	r2, r2
    6992:	09 f4       	brne	.+2      	; 0x6996 <vfprintf+0x3a0>
    6994:	42 ce       	rjmp	.-892    	; 0x661a <vfprintf+0x24>
    6996:	b6 01       	movw	r22, r12
    6998:	80 e2       	ldi	r24, 0x20	; 32
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <fputc>
    69a0:	2a 94       	dec	r2
    69a2:	f6 cf       	rjmp	.-20     	; 0x6990 <vfprintf+0x39a>
    69a4:	f6 01       	movw	r30, r12
    69a6:	86 81       	ldd	r24, Z+6	; 0x06
    69a8:	97 81       	ldd	r25, Z+7	; 0x07
    69aa:	02 c0       	rjmp	.+4      	; 0x69b0 <vfprintf+0x3ba>
    69ac:	8f ef       	ldi	r24, 0xFF	; 255
    69ae:	9f ef       	ldi	r25, 0xFF	; 255
    69b0:	2b 96       	adiw	r28, 0x0b	; 11
    69b2:	e2 e1       	ldi	r30, 0x12	; 18
    69b4:	0c 94 0b 36 	jmp	0x6c16	; 0x6c16 <__epilogue_restores__>

000069b8 <strnlen_P>:
    69b8:	fc 01       	movw	r30, r24
    69ba:	05 90       	lpm	r0, Z+
    69bc:	61 50       	subi	r22, 0x01	; 1
    69be:	70 40       	sbci	r23, 0x00	; 0
    69c0:	01 10       	cpse	r0, r1
    69c2:	d8 f7       	brcc	.-10     	; 0x69ba <strnlen_P+0x2>
    69c4:	80 95       	com	r24
    69c6:	90 95       	com	r25
    69c8:	8e 0f       	add	r24, r30
    69ca:	9f 1f       	adc	r25, r31
    69cc:	08 95       	ret

000069ce <strnlen>:
    69ce:	fc 01       	movw	r30, r24
    69d0:	61 50       	subi	r22, 0x01	; 1
    69d2:	70 40       	sbci	r23, 0x00	; 0
    69d4:	01 90       	ld	r0, Z+
    69d6:	01 10       	cpse	r0, r1
    69d8:	d8 f7       	brcc	.-10     	; 0x69d0 <strnlen+0x2>
    69da:	80 95       	com	r24
    69dc:	90 95       	com	r25
    69de:	8e 0f       	add	r24, r30
    69e0:	9f 1f       	adc	r25, r31
    69e2:	08 95       	ret

000069e4 <fputc>:
    69e4:	0f 93       	push	r16
    69e6:	1f 93       	push	r17
    69e8:	cf 93       	push	r28
    69ea:	df 93       	push	r29
    69ec:	fb 01       	movw	r30, r22
    69ee:	23 81       	ldd	r18, Z+3	; 0x03
    69f0:	21 fd       	sbrc	r18, 1
    69f2:	03 c0       	rjmp	.+6      	; 0x69fa <fputc+0x16>
    69f4:	8f ef       	ldi	r24, 0xFF	; 255
    69f6:	9f ef       	ldi	r25, 0xFF	; 255
    69f8:	2c c0       	rjmp	.+88     	; 0x6a52 <fputc+0x6e>
    69fa:	22 ff       	sbrs	r18, 2
    69fc:	16 c0       	rjmp	.+44     	; 0x6a2a <fputc+0x46>
    69fe:	46 81       	ldd	r20, Z+6	; 0x06
    6a00:	57 81       	ldd	r21, Z+7	; 0x07
    6a02:	24 81       	ldd	r18, Z+4	; 0x04
    6a04:	35 81       	ldd	r19, Z+5	; 0x05
    6a06:	42 17       	cp	r20, r18
    6a08:	53 07       	cpc	r21, r19
    6a0a:	44 f4       	brge	.+16     	; 0x6a1c <fputc+0x38>
    6a0c:	a0 81       	ld	r26, Z
    6a0e:	b1 81       	ldd	r27, Z+1	; 0x01
    6a10:	9d 01       	movw	r18, r26
    6a12:	2f 5f       	subi	r18, 0xFF	; 255
    6a14:	3f 4f       	sbci	r19, 0xFF	; 255
    6a16:	31 83       	std	Z+1, r19	; 0x01
    6a18:	20 83       	st	Z, r18
    6a1a:	8c 93       	st	X, r24
    6a1c:	26 81       	ldd	r18, Z+6	; 0x06
    6a1e:	37 81       	ldd	r19, Z+7	; 0x07
    6a20:	2f 5f       	subi	r18, 0xFF	; 255
    6a22:	3f 4f       	sbci	r19, 0xFF	; 255
    6a24:	37 83       	std	Z+7, r19	; 0x07
    6a26:	26 83       	std	Z+6, r18	; 0x06
    6a28:	14 c0       	rjmp	.+40     	; 0x6a52 <fputc+0x6e>
    6a2a:	8b 01       	movw	r16, r22
    6a2c:	ec 01       	movw	r28, r24
    6a2e:	fb 01       	movw	r30, r22
    6a30:	00 84       	ldd	r0, Z+8	; 0x08
    6a32:	f1 85       	ldd	r31, Z+9	; 0x09
    6a34:	e0 2d       	mov	r30, r0
    6a36:	09 95       	icall
    6a38:	89 2b       	or	r24, r25
    6a3a:	e1 f6       	brne	.-72     	; 0x69f4 <fputc+0x10>
    6a3c:	d8 01       	movw	r26, r16
    6a3e:	16 96       	adiw	r26, 0x06	; 6
    6a40:	8d 91       	ld	r24, X+
    6a42:	9c 91       	ld	r25, X
    6a44:	17 97       	sbiw	r26, 0x07	; 7
    6a46:	01 96       	adiw	r24, 0x01	; 1
    6a48:	17 96       	adiw	r26, 0x07	; 7
    6a4a:	9c 93       	st	X, r25
    6a4c:	8e 93       	st	-X, r24
    6a4e:	16 97       	sbiw	r26, 0x06	; 6
    6a50:	ce 01       	movw	r24, r28
    6a52:	df 91       	pop	r29
    6a54:	cf 91       	pop	r28
    6a56:	1f 91       	pop	r17
    6a58:	0f 91       	pop	r16
    6a5a:	08 95       	ret

00006a5c <__ultoa_invert>:
    6a5c:	fa 01       	movw	r30, r20
    6a5e:	aa 27       	eor	r26, r26
    6a60:	28 30       	cpi	r18, 0x08	; 8
    6a62:	51 f1       	breq	.+84     	; 0x6ab8 <__ultoa_invert+0x5c>
    6a64:	20 31       	cpi	r18, 0x10	; 16
    6a66:	81 f1       	breq	.+96     	; 0x6ac8 <__ultoa_invert+0x6c>
    6a68:	e8 94       	clt
    6a6a:	6f 93       	push	r22
    6a6c:	6e 7f       	andi	r22, 0xFE	; 254
    6a6e:	6e 5f       	subi	r22, 0xFE	; 254
    6a70:	7f 4f       	sbci	r23, 0xFF	; 255
    6a72:	8f 4f       	sbci	r24, 0xFF	; 255
    6a74:	9f 4f       	sbci	r25, 0xFF	; 255
    6a76:	af 4f       	sbci	r26, 0xFF	; 255
    6a78:	b1 e0       	ldi	r27, 0x01	; 1
    6a7a:	3e d0       	rcall	.+124    	; 0x6af8 <__ultoa_invert+0x9c>
    6a7c:	b4 e0       	ldi	r27, 0x04	; 4
    6a7e:	3c d0       	rcall	.+120    	; 0x6af8 <__ultoa_invert+0x9c>
    6a80:	67 0f       	add	r22, r23
    6a82:	78 1f       	adc	r23, r24
    6a84:	89 1f       	adc	r24, r25
    6a86:	9a 1f       	adc	r25, r26
    6a88:	a1 1d       	adc	r26, r1
    6a8a:	68 0f       	add	r22, r24
    6a8c:	79 1f       	adc	r23, r25
    6a8e:	8a 1f       	adc	r24, r26
    6a90:	91 1d       	adc	r25, r1
    6a92:	a1 1d       	adc	r26, r1
    6a94:	6a 0f       	add	r22, r26
    6a96:	71 1d       	adc	r23, r1
    6a98:	81 1d       	adc	r24, r1
    6a9a:	91 1d       	adc	r25, r1
    6a9c:	a1 1d       	adc	r26, r1
    6a9e:	20 d0       	rcall	.+64     	; 0x6ae0 <__ultoa_invert+0x84>
    6aa0:	09 f4       	brne	.+2      	; 0x6aa4 <__ultoa_invert+0x48>
    6aa2:	68 94       	set
    6aa4:	3f 91       	pop	r19
    6aa6:	2a e0       	ldi	r18, 0x0A	; 10
    6aa8:	26 9f       	mul	r18, r22
    6aaa:	11 24       	eor	r1, r1
    6aac:	30 19       	sub	r19, r0
    6aae:	30 5d       	subi	r19, 0xD0	; 208
    6ab0:	31 93       	st	Z+, r19
    6ab2:	de f6       	brtc	.-74     	; 0x6a6a <__ultoa_invert+0xe>
    6ab4:	cf 01       	movw	r24, r30
    6ab6:	08 95       	ret
    6ab8:	46 2f       	mov	r20, r22
    6aba:	47 70       	andi	r20, 0x07	; 7
    6abc:	40 5d       	subi	r20, 0xD0	; 208
    6abe:	41 93       	st	Z+, r20
    6ac0:	b3 e0       	ldi	r27, 0x03	; 3
    6ac2:	0f d0       	rcall	.+30     	; 0x6ae2 <__ultoa_invert+0x86>
    6ac4:	c9 f7       	brne	.-14     	; 0x6ab8 <__ultoa_invert+0x5c>
    6ac6:	f6 cf       	rjmp	.-20     	; 0x6ab4 <__ultoa_invert+0x58>
    6ac8:	46 2f       	mov	r20, r22
    6aca:	4f 70       	andi	r20, 0x0F	; 15
    6acc:	40 5d       	subi	r20, 0xD0	; 208
    6ace:	4a 33       	cpi	r20, 0x3A	; 58
    6ad0:	18 f0       	brcs	.+6      	; 0x6ad8 <__ultoa_invert+0x7c>
    6ad2:	49 5d       	subi	r20, 0xD9	; 217
    6ad4:	31 fd       	sbrc	r19, 1
    6ad6:	40 52       	subi	r20, 0x20	; 32
    6ad8:	41 93       	st	Z+, r20
    6ada:	02 d0       	rcall	.+4      	; 0x6ae0 <__ultoa_invert+0x84>
    6adc:	a9 f7       	brne	.-22     	; 0x6ac8 <__ultoa_invert+0x6c>
    6ade:	ea cf       	rjmp	.-44     	; 0x6ab4 <__ultoa_invert+0x58>
    6ae0:	b4 e0       	ldi	r27, 0x04	; 4
    6ae2:	a6 95       	lsr	r26
    6ae4:	97 95       	ror	r25
    6ae6:	87 95       	ror	r24
    6ae8:	77 95       	ror	r23
    6aea:	67 95       	ror	r22
    6aec:	ba 95       	dec	r27
    6aee:	c9 f7       	brne	.-14     	; 0x6ae2 <__ultoa_invert+0x86>
    6af0:	00 97       	sbiw	r24, 0x00	; 0
    6af2:	61 05       	cpc	r22, r1
    6af4:	71 05       	cpc	r23, r1
    6af6:	08 95       	ret
    6af8:	9b 01       	movw	r18, r22
    6afa:	ac 01       	movw	r20, r24
    6afc:	0a 2e       	mov	r0, r26
    6afe:	06 94       	lsr	r0
    6b00:	57 95       	ror	r21
    6b02:	47 95       	ror	r20
    6b04:	37 95       	ror	r19
    6b06:	27 95       	ror	r18
    6b08:	ba 95       	dec	r27
    6b0a:	c9 f7       	brne	.-14     	; 0x6afe <__ultoa_invert+0xa2>
    6b0c:	62 0f       	add	r22, r18
    6b0e:	73 1f       	adc	r23, r19
    6b10:	84 1f       	adc	r24, r20
    6b12:	95 1f       	adc	r25, r21
    6b14:	a0 1d       	adc	r26, r0
    6b16:	08 95       	ret

00006b18 <eeprom_read_byte>:
    6b18:	f9 99       	sbic	0x1f, 1	; 31
    6b1a:	fe cf       	rjmp	.-4      	; 0x6b18 <eeprom_read_byte>
    6b1c:	92 bd       	out	0x22, r25	; 34
    6b1e:	81 bd       	out	0x21, r24	; 33
    6b20:	f8 9a       	sbi	0x1f, 0	; 31
    6b22:	99 27       	eor	r25, r25
    6b24:	80 b5       	in	r24, 0x20	; 32
    6b26:	08 95       	ret

00006b28 <eeprom_read_dword>:
    6b28:	a6 e1       	ldi	r26, 0x16	; 22
    6b2a:	b0 e0       	ldi	r27, 0x00	; 0
    6b2c:	44 e0       	ldi	r20, 0x04	; 4
    6b2e:	50 e0       	ldi	r21, 0x00	; 0
    6b30:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <eeprom_read_blraw>

00006b34 <eeprom_read_word>:
    6b34:	a8 e1       	ldi	r26, 0x18	; 24
    6b36:	b0 e0       	ldi	r27, 0x00	; 0
    6b38:	42 e0       	ldi	r20, 0x02	; 2
    6b3a:	50 e0       	ldi	r21, 0x00	; 0
    6b3c:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <eeprom_read_blraw>

00006b40 <eeprom_update_byte>:
    6b40:	26 2f       	mov	r18, r22

00006b42 <eeprom_update_r18>:
    6b42:	f9 99       	sbic	0x1f, 1	; 31
    6b44:	fe cf       	rjmp	.-4      	; 0x6b42 <eeprom_update_r18>
    6b46:	92 bd       	out	0x22, r25	; 34
    6b48:	81 bd       	out	0x21, r24	; 33
    6b4a:	f8 9a       	sbi	0x1f, 0	; 31
    6b4c:	01 97       	sbiw	r24, 0x01	; 1
    6b4e:	00 b4       	in	r0, 0x20	; 32
    6b50:	02 16       	cp	r0, r18
    6b52:	39 f0       	breq	.+14     	; 0x6b62 <eeprom_update_r18+0x20>
    6b54:	1f ba       	out	0x1f, r1	; 31
    6b56:	20 bd       	out	0x20, r18	; 32
    6b58:	0f b6       	in	r0, 0x3f	; 63
    6b5a:	f8 94       	cli
    6b5c:	fa 9a       	sbi	0x1f, 2	; 31
    6b5e:	f9 9a       	sbi	0x1f, 1	; 31
    6b60:	0f be       	out	0x3f, r0	; 63
    6b62:	08 95       	ret

00006b64 <eeprom_update_dword>:
    6b64:	03 96       	adiw	r24, 0x03	; 3
    6b66:	27 2f       	mov	r18, r23
    6b68:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <eeprom_update_r18>
    6b6c:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <eeprom_update_byte>
    6b70:	25 2f       	mov	r18, r21
    6b72:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <eeprom_update_r18>
    6b76:	24 2f       	mov	r18, r20
    6b78:	0c 94 a1 35 	jmp	0x6b42	; 0x6b42 <eeprom_update_r18>

00006b7c <eeprom_update_word>:
    6b7c:	01 96       	adiw	r24, 0x01	; 1
    6b7e:	27 2f       	mov	r18, r23
    6b80:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <eeprom_update_r18>
    6b84:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <eeprom_update_byte>

00006b88 <eeprom_write_byte>:
    6b88:	26 2f       	mov	r18, r22

00006b8a <eeprom_write_r18>:
    6b8a:	f9 99       	sbic	0x1f, 1	; 31
    6b8c:	fe cf       	rjmp	.-4      	; 0x6b8a <eeprom_write_r18>
    6b8e:	1f ba       	out	0x1f, r1	; 31
    6b90:	92 bd       	out	0x22, r25	; 34
    6b92:	81 bd       	out	0x21, r24	; 33
    6b94:	20 bd       	out	0x20, r18	; 32
    6b96:	0f b6       	in	r0, 0x3f	; 63
    6b98:	f8 94       	cli
    6b9a:	fa 9a       	sbi	0x1f, 2	; 31
    6b9c:	f9 9a       	sbi	0x1f, 1	; 31
    6b9e:	0f be       	out	0x3f, r0	; 63
    6ba0:	01 96       	adiw	r24, 0x01	; 1
    6ba2:	08 95       	ret

00006ba4 <eeprom_write_dword>:
    6ba4:	24 2f       	mov	r18, r20
    6ba6:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <eeprom_write_r18>
    6baa:	25 2f       	mov	r18, r21
    6bac:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <eeprom_write_r18>
    6bb0:	0c 94 da 35 	jmp	0x6bb4	; 0x6bb4 <eeprom_write_word>

00006bb4 <eeprom_write_word>:
    6bb4:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <eeprom_write_byte>
    6bb8:	27 2f       	mov	r18, r23
    6bba:	0c 94 c5 35 	jmp	0x6b8a	; 0x6b8a <eeprom_write_r18>

00006bbe <eeprom_read_block>:
    6bbe:	dc 01       	movw	r26, r24
    6bc0:	cb 01       	movw	r24, r22

00006bc2 <eeprom_read_blraw>:
    6bc2:	fc 01       	movw	r30, r24
    6bc4:	f9 99       	sbic	0x1f, 1	; 31
    6bc6:	fe cf       	rjmp	.-4      	; 0x6bc4 <eeprom_read_blraw+0x2>
    6bc8:	06 c0       	rjmp	.+12     	; 0x6bd6 <eeprom_read_blraw+0x14>
    6bca:	f2 bd       	out	0x22, r31	; 34
    6bcc:	e1 bd       	out	0x21, r30	; 33
    6bce:	f8 9a       	sbi	0x1f, 0	; 31
    6bd0:	31 96       	adiw	r30, 0x01	; 1
    6bd2:	00 b4       	in	r0, 0x20	; 32
    6bd4:	0d 92       	st	X+, r0
    6bd6:	41 50       	subi	r20, 0x01	; 1
    6bd8:	50 40       	sbci	r21, 0x00	; 0
    6bda:	b8 f7       	brcc	.-18     	; 0x6bca <eeprom_read_blraw+0x8>
    6bdc:	08 95       	ret

00006bde <__prologue_saves__>:
    6bde:	2f 92       	push	r2
    6be0:	3f 92       	push	r3
    6be2:	4f 92       	push	r4
    6be4:	5f 92       	push	r5
    6be6:	6f 92       	push	r6
    6be8:	7f 92       	push	r7
    6bea:	8f 92       	push	r8
    6bec:	9f 92       	push	r9
    6bee:	af 92       	push	r10
    6bf0:	bf 92       	push	r11
    6bf2:	cf 92       	push	r12
    6bf4:	df 92       	push	r13
    6bf6:	ef 92       	push	r14
    6bf8:	ff 92       	push	r15
    6bfa:	0f 93       	push	r16
    6bfc:	1f 93       	push	r17
    6bfe:	cf 93       	push	r28
    6c00:	df 93       	push	r29
    6c02:	cd b7       	in	r28, 0x3d	; 61
    6c04:	de b7       	in	r29, 0x3e	; 62
    6c06:	ca 1b       	sub	r28, r26
    6c08:	db 0b       	sbc	r29, r27
    6c0a:	0f b6       	in	r0, 0x3f	; 63
    6c0c:	f8 94       	cli
    6c0e:	de bf       	out	0x3e, r29	; 62
    6c10:	0f be       	out	0x3f, r0	; 63
    6c12:	cd bf       	out	0x3d, r28	; 61
    6c14:	09 94       	ijmp

00006c16 <__epilogue_restores__>:
    6c16:	2a 88       	ldd	r2, Y+18	; 0x12
    6c18:	39 88       	ldd	r3, Y+17	; 0x11
    6c1a:	48 88       	ldd	r4, Y+16	; 0x10
    6c1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c20:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c22:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c24:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c26:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c28:	b9 84       	ldd	r11, Y+9	; 0x09
    6c2a:	c8 84       	ldd	r12, Y+8	; 0x08
    6c2c:	df 80       	ldd	r13, Y+7	; 0x07
    6c2e:	ee 80       	ldd	r14, Y+6	; 0x06
    6c30:	fd 80       	ldd	r15, Y+5	; 0x05
    6c32:	0c 81       	ldd	r16, Y+4	; 0x04
    6c34:	1b 81       	ldd	r17, Y+3	; 0x03
    6c36:	aa 81       	ldd	r26, Y+2	; 0x02
    6c38:	b9 81       	ldd	r27, Y+1	; 0x01
    6c3a:	ce 0f       	add	r28, r30
    6c3c:	d1 1d       	adc	r29, r1
    6c3e:	0f b6       	in	r0, 0x3f	; 63
    6c40:	f8 94       	cli
    6c42:	de bf       	out	0x3e, r29	; 62
    6c44:	0f be       	out	0x3f, r0	; 63
    6c46:	cd bf       	out	0x3d, r28	; 61
    6c48:	ed 01       	movw	r28, r26
    6c4a:	08 95       	ret

00006c4c <__do_global_dtors>:
    6c4c:	11 e0       	ldi	r17, 0x01	; 1
    6c4e:	cd e2       	ldi	r28, 0x2D	; 45
    6c50:	d1 e0       	ldi	r29, 0x01	; 1
    6c52:	04 c0       	rjmp	.+8      	; 0x6c5c <__do_global_dtors+0x10>
    6c54:	fe 01       	movw	r30, r28
    6c56:	0e 94 fe 30 	call	0x61fc	; 0x61fc <__tablejump2__>
    6c5a:	21 96       	adiw	r28, 0x01	; 1
    6c5c:	ce 32       	cpi	r28, 0x2E	; 46
    6c5e:	d1 07       	cpc	r29, r17
    6c60:	c9 f7       	brne	.-14     	; 0x6c54 <__do_global_dtors+0x8>
    6c62:	f8 94       	cli

00006c64 <__stop_program>:
    6c64:	ff cf       	rjmp	.-2      	; 0x6c64 <__stop_program>
