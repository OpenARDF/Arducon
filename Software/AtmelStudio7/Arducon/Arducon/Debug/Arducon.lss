
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  000068b2  00006966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000068b2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029a  00800314  00800314  00006b7a  2**0
                  ALLOC
  3 .eeprom       0000032d  00810000  00810000  00006b7a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00006ea7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f04  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00006f48  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007b9b  00000000  00000000  00007450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001971  00000000  00000000  0000efeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004848  00000000  00000000  0001095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000df8  00000000  00000000  000151a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000275c  00000000  00000000  00015f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005e36  00000000  00000000  000186f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000518  00000000  00000000  0001e52e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__dtors_end>
       4:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_1>
       8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      14:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__vector_5>
      18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      20:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__vector_8>
      24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      2c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_11>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      38:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_14>
      3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      48:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_18>
      4c:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_19>
      50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      54:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_21>
      58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      68:	6c 01       	movw	r12, r24
      6a:	77 01       	movw	r14, r14
      6c:	82 01       	movw	r16, r4
      6e:	8d 01       	movw	r16, r26
      70:	98 01       	movw	r18, r16
      72:	a3 01       	movw	r20, r6
      74:	ae 01       	movw	r20, r28
      76:	b9 01       	movw	r22, r18
      78:	c4 01       	movw	r24, r8
      7a:	cf 01       	movw	r24, r30
      7c:	da 01       	movw	r26, r20
      7e:	31 02       	muls	r19, r17
      80:	31 02       	muls	r19, r17
      82:	e5 01       	movw	r28, r10
      84:	f0 01       	movw	r30, r0
      86:	fb 01       	movw	r30, r22
      88:	06 02       	muls	r16, r22
      8a:	11 02       	muls	r17, r17
      8c:	1c 02       	muls	r17, r28
      8e:	27 02       	muls	r18, r23
      90:	3c 02       	muls	r19, r28
      92:	40 02       	muls	r20, r16
      94:	44 02       	muls	r20, r20
      96:	48 02       	muls	r20, r24
      98:	4c 02       	muls	r20, r28
      9a:	50 02       	muls	r21, r16
      9c:	54 02       	muls	r21, r20
      9e:	59 02       	muls	r21, r25
      a0:	5d 02       	muls	r21, r29
      a2:	76 02       	muls	r23, r22
      a4:	76 02       	muls	r23, r22
      a6:	61 02       	muls	r22, r17
      a8:	65 02       	muls	r22, r21
      aa:	6a 02       	muls	r22, r26
      ac:	6e 02       	muls	r22, r30
      ae:	72 02       	muls	r23, r18
      b0:	87 02       	muls	r24, r23
      b2:	8d 02       	muls	r24, r29
      b4:	93 02       	muls	r25, r19
      b6:	99 02       	muls	r25, r25
      b8:	9f 02       	muls	r25, r31
      ba:	a5 02       	muls	r26, r21
      bc:	ab 02       	muls	r26, r27
      be:	b1 02       	muls	r27, r17
      c0:	b7 02       	muls	r27, r23
      c2:	bd 02       	muls	r27, r29
      c4:	c3 02       	muls	r28, r19
      c6:	e6 02       	muls	r30, r22
      c8:	e6 02       	muls	r30, r22
      ca:	c9 02       	muls	r28, r25
      cc:	cf 02       	muls	r28, r31
      ce:	d5 02       	muls	r29, r21
      d0:	db 02       	muls	r29, r27
      d2:	e1 02       	muls	r30, r17
      d4:	07 03       	mulsu	r16, r23
      d6:	66 03       	mulsu	r22, r22
      d8:	66 03       	mulsu	r22, r22
      da:	24 03       	mulsu	r18, r20
      dc:	4b 03       	fmul	r20, r19
      de:	04 03       	mulsu	r16, r20
      e0:	4e 03       	fmul	r20, r22
      e2:	54 03       	mulsu	r21, r20
      e4:	01 03       	mulsu	r16, r17
      e6:	5e 03       	fmul	r21, r22
      e8:	fe 02       	muls	r31, r30
      ea:	45 03       	mulsu	r20, r21
      ec:	48 03       	fmul	r20, r16
      ee:	57 03       	mulsu	r21, r23
      f0:	af 03       	fmulsu	r18, r23
      f2:	81 03       	fmuls	r16, r17
      f4:	b2 03       	fmuls	r19, r18
      f6:	84 03       	fmuls	r16, r20
      f8:	87 03       	fmuls	r16, r23
      fa:	8a 03       	fmulsu	r16, r18
      fc:	8d 03       	fmulsu	r16, r21
      fe:	90 03       	fmuls	r17, r16
     100:	93 03       	fmuls	r17, r19
     102:	96 03       	fmuls	r17, r22
     104:	99 03       	fmulsu	r17, r17
     106:	96 13       	cpse	r25, r22
     108:	96 13       	cpse	r25, r22
     10a:	96 13       	cpse	r25, r22
     10c:	96 13       	cpse	r25, r22
     10e:	96 13       	cpse	r25, r22
     110:	16 14       	cp	r1, r6
     112:	16 14       	cp	r1, r6
     114:	b4 13       	cpse	r27, r20
     116:	b4 13       	cpse	r27, r20
     118:	b4 13       	cpse	r27, r20
     11a:	b4 13       	cpse	r27, r20
     11c:	b4 13       	cpse	r27, r20
     11e:	d6 13       	cpse	r29, r22
     120:	d6 13       	cpse	r29, r22
     122:	d6 13       	cpse	r29, r22
     124:	d6 13       	cpse	r29, r22
     126:	d6 13       	cpse	r29, r22
     128:	16 14       	cp	r1, r6
     12a:	f6 13       	cpse	r31, r22
     12c:	4f 20       	and	r4, r15
     12e:	91 20       	and	r9, r1
     130:	05 21       	and	r16, r5
     132:	10 21       	and	r17, r0
     134:	1b 21       	and	r17, r11
     136:	25 21       	and	r18, r5
     138:	32 21       	and	r19, r2
     13a:	bc 21       	and	r27, r12
     13c:	2b 22       	and	r2, r27
     13e:	a6 22       	and	r10, r22
     140:	ea 22       	and	r14, r26
     142:	2e 23       	and	r18, r30
     144:	6a 22       	and	r6, r26
     146:	74 23       	and	r23, r20
     148:	96 23       	and	r25, r22
     14a:	85 21       	and	r24, r5
     14c:	a4 23       	and	r26, r20
     14e:	c8 20       	and	r12, r8
     150:	d0 23       	and	r29, r16
     152:	5d 28       	or	r5, r13
     154:	21 28       	or	r2, r1
     156:	4d 28       	or	r4, r13
     158:	65 28       	or	r6, r5
     15a:	51 28       	or	r5, r1
     15c:	65 28       	or	r6, r5
     15e:	31 28       	or	r3, r1
     160:	1d 28       	or	r1, r13
     162:	29 28       	or	r2, r9
     164:	2d 28       	or	r2, r13
     166:	65 28       	or	r6, r5
     168:	41 28       	or	r4, r1
     16a:	15 28       	or	r1, r5
     16c:	45 28       	or	r4, r5
     16e:	11 28       	or	r1, r1
     170:	25 28       	or	r2, r5
     172:	e9 27       	eor	r30, r25
     174:	ed 27       	eor	r30, r29
     176:	f1 27       	eor	r31, r17
     178:	f5 27       	eor	r31, r21
     17a:	f9 27       	eor	r31, r25
     17c:	fd 27       	eor	r31, r29
     17e:	01 28       	or	r0, r1
     180:	05 28       	or	r0, r5
     182:	09 28       	or	r0, r9
     184:	0d 28       	or	r0, r13
     186:	35 28       	or	r3, r5
     188:	39 28       	or	r3, r9
     18a:	61 28       	or	r6, r1
     18c:	3d 28       	or	r3, r13
     18e:	65 28       	or	r6, r5
     190:	19 28       	or	r1, r9
     192:	55 28       	or	r5, r5
     194:	69 28       	or	r6, r9
     196:	85 27       	eor	r24, r21
     198:	89 27       	eor	r24, r25
     19a:	8d 27       	eor	r24, r29
     19c:	91 27       	eor	r25, r17
     19e:	95 27       	eor	r25, r21
     1a0:	99 27       	eor	r25, r25
     1a2:	9d 27       	eor	r25, r29
     1a4:	a1 27       	eor	r26, r17
     1a6:	a5 27       	eor	r26, r21
     1a8:	a9 27       	eor	r26, r25
     1aa:	ad 27       	eor	r26, r29
     1ac:	b1 27       	eor	r27, r17
     1ae:	b5 27       	eor	r27, r21
     1b0:	b9 27       	eor	r27, r25
     1b2:	bd 27       	eor	r27, r29
     1b4:	c1 27       	eor	r28, r17
     1b6:	c5 27       	eor	r28, r21
     1b8:	c9 27       	eor	r28, r25
     1ba:	cd 27       	eor	r28, r29
     1bc:	d1 27       	eor	r29, r17
     1be:	d5 27       	eor	r29, r21
     1c0:	d9 27       	eor	r29, r25
     1c2:	dd 27       	eor	r29, r29
     1c4:	e1 27       	eor	r30, r17
     1c6:	e5 27       	eor	r30, r21
     1c8:	65 28       	or	r6, r5
     1ca:	65 28       	or	r6, r5
     1cc:	65 28       	or	r6, r5
     1ce:	65 28       	or	r6, r5
     1d0:	49 28       	or	r4, r9
     1d2:	65 28       	or	r6, r5
     1d4:	65 28       	or	r6, r5
     1d6:	65 28       	or	r6, r5
     1d8:	65 28       	or	r6, r5
     1da:	65 28       	or	r6, r5
     1dc:	65 28       	or	r6, r5
     1de:	65 28       	or	r6, r5
     1e0:	65 28       	or	r6, r5
     1e2:	65 28       	or	r6, r5
     1e4:	65 28       	or	r6, r5
     1e6:	65 28       	or	r6, r5
     1e8:	65 28       	or	r6, r5
     1ea:	65 28       	or	r6, r5
     1ec:	65 28       	or	r6, r5
     1ee:	65 28       	or	r6, r5
     1f0:	65 28       	or	r6, r5
     1f2:	65 28       	or	r6, r5
     1f4:	65 28       	or	r6, r5
     1f6:	65 28       	or	r6, r5
     1f8:	65 28       	or	r6, r5
     1fa:	65 28       	or	r6, r5
     1fc:	65 28       	or	r6, r5
     1fe:	65 28       	or	r6, r5
     200:	65 28       	or	r6, r5
     202:	65 28       	or	r6, r5
     204:	65 28       	or	r6, r5
     206:	65 28       	or	r6, r5
     208:	65 28       	or	r6, r5
     20a:	59 28       	or	r5, r9
     20c:	05 a8       	ldd	r0, Z+53	; 0x35
     20e:	4c cd       	rjmp	.-1384   	; 0xfffffca8 <__eeprom_end+0xff7ef97b>
     210:	b2 d4       	rcall	.+2404   	; 0xb76 <_ZN8GoertzelC1Eff+0x90>
     212:	4e b9       	out	0x0e, r20	; 14
     214:	38 36       	cpi	r19, 0x68	; 104
     216:	a9 02       	muls	r26, r25
     218:	0c 50       	subi	r16, 0x0C	; 12
     21a:	b9 91       	ld	r27, Y+
     21c:	86 88       	ldd	r8, Z+22	; 0x16
     21e:	08 3c       	cpi	r16, 0xC8	; 200
     220:	a6 aa       	std	Z+54, r10	; 0x36
     222:	aa 2a       	or	r10, r26
     224:	be 00       	.word	0x00be	; ????
     226:	00 00       	nop
     228:	80 3f       	cpi	r24, 0xF0	; 240

0000022a <__ctors_start>:
     22a:	59 27       	eor	r21, r25

0000022c <__ctors_end>:
     22c:	6e 27       	eor	r22, r30

0000022e <__dtors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d8 e0       	ldi	r29, 0x08	; 8
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61

0000023a <__do_copy_data>:
     23a:	13 e0       	ldi	r17, 0x03	; 3
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	e2 eb       	ldi	r30, 0xB2	; 178
     242:	f8 e6       	ldi	r31, 0x68	; 104
     244:	02 c0       	rjmp	.+4      	; 0x24a <__do_copy_data+0x10>
     246:	05 90       	lpm	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	a4 31       	cpi	r26, 0x14	; 20
     24c:	b1 07       	cpc	r27, r17
     24e:	d9 f7       	brne	.-10     	; 0x246 <__do_copy_data+0xc>

00000250 <__do_clear_bss>:
     250:	25 e0       	ldi	r18, 0x05	; 5
     252:	a4 e1       	ldi	r26, 0x14	; 20
     254:	b3 e0       	ldi	r27, 0x03	; 3
     256:	01 c0       	rjmp	.+2      	; 0x25a <.do_clear_bss_start>

00000258 <.do_clear_bss_loop>:
     258:	1d 92       	st	X+, r1

0000025a <.do_clear_bss_start>:
     25a:	ae 3a       	cpi	r26, 0xAE	; 174
     25c:	b2 07       	cpc	r27, r18
     25e:	e1 f7       	brne	.-8      	; 0x258 <.do_clear_bss_loop>

00000260 <__do_global_ctors>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	c6 e1       	ldi	r28, 0x16	; 22
     264:	d1 e0       	ldi	r29, 0x01	; 1
     266:	04 c0       	rjmp	.+8      	; 0x270 <__do_global_ctors+0x10>
     268:	21 97       	sbiw	r28, 0x01	; 1
     26a:	fe 01       	movw	r30, r28
     26c:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__tablejump2__>
     270:	c5 31       	cpi	r28, 0x15	; 21
     272:	d1 07       	cpc	r29, r17
     274:	c9 f7       	brne	.-14     	; 0x268 <__do_global_ctors+0x8>
     276:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <main>
     27a:	0c 94 4c 34 	jmp	0x6898	; 0x6898 <__do_global_dtors>

0000027e <__bad_interrupt>:
     27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <month_length>:
     282:	62 30       	cpi	r22, 0x02	; 2
     284:	21 f4       	brne	.+8      	; 0x28e <month_length+0xc>
     286:	0e 94 4e 01 	call	0x29c	; 0x29c <is_leap_year>
     28a:	84 5e       	subi	r24, 0xE4	; 228
     28c:	08 95       	ret
     28e:	68 30       	cpi	r22, 0x08	; 8
     290:	08 f0       	brcs	.+2      	; 0x294 <month_length+0x12>
     292:	6f 5f       	subi	r22, 0xFF	; 255
     294:	61 70       	andi	r22, 0x01	; 1
     296:	8e e1       	ldi	r24, 0x1E	; 30
     298:	86 0f       	add	r24, r22
     29a:	08 95       	ret

0000029c <is_leap_year>:
     29c:	9c 01       	movw	r18, r24
     29e:	23 70       	andi	r18, 0x03	; 3
     2a0:	33 27       	eor	r19, r19
     2a2:	23 2b       	or	r18, r19
     2a4:	59 f4       	brne	.+22     	; 0x2bc <is_leap_year+0x20>
     2a6:	64 e6       	ldi	r22, 0x64	; 100
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
     2ae:	89 2b       	or	r24, r25
     2b0:	39 f4       	brne	.+14     	; 0x2c0 <is_leap_year+0x24>
     2b2:	63 70       	andi	r22, 0x03	; 3
     2b4:	77 27       	eor	r23, r23
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	67 2b       	or	r22, r23
     2ba:	19 f0       	breq	.+6      	; 0x2c2 <is_leap_year+0x26>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 95       	ret
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	08 95       	ret

000002c4 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	84 31       	cpi	r24, 0x14	; 20
     2c8:	91 05       	cpc	r25, r1
     2ca:	08 f0       	brcs	.+2      	; 0x2ce <_Z7pinModehh+0xa>
     2cc:	ca c0       	rjmp	.+404    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     2ce:	fc 01       	movw	r30, r24
     2d0:	ec 5c       	subi	r30, 0xCC	; 204
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     2d8:	61 30       	cpi	r22, 0x01	; 1
     2da:	11 f4       	brne	.+4      	; 0x2e0 <_Z7pinModehh+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     2dc:	50 9a       	sbi	0x0a, 0	; 10
     2de:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     2e0:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     2e2:	63 30       	cpi	r22, 0x03	; 3
     2e4:	11 f4       	brne	.+4      	; 0x2ea <_Z7pinModehh+0x26>
				{
					PORTD  |= (1 << PORTD0);
     2e6:	58 9a       	sbi	0x0b, 0	; 11
     2e8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     2ea:	58 98       	cbi	0x0b, 0	; 11
     2ec:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     2ee:	61 30       	cpi	r22, 0x01	; 1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <_Z7pinModehh+0x32>
			{
				DDRD  |= (1 << PORTD1);
     2f2:	51 9a       	sbi	0x0a, 1	; 10
     2f4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     2f6:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     2f8:	63 30       	cpi	r22, 0x03	; 3
     2fa:	11 f4       	brne	.+4      	; 0x300 <_Z7pinModehh+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     2fc:	59 9a       	sbi	0x0b, 1	; 11
     2fe:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     300:	59 98       	cbi	0x0b, 1	; 11
     302:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     304:	61 30       	cpi	r22, 0x01	; 1
     306:	11 f4       	brne	.+4      	; 0x30c <_Z7pinModehh+0x48>
			{
				DDRD  |= (1 << PORTD2);
     308:	52 9a       	sbi	0x0a, 2	; 10
     30a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     30c:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     30e:	63 30       	cpi	r22, 0x03	; 3
     310:	11 f4       	brne	.+4      	; 0x316 <_Z7pinModehh+0x52>
				{
					PORTD  |= (1 << PORTD2);
     312:	5a 9a       	sbi	0x0b, 2	; 11
     314:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     316:	5a 98       	cbi	0x0b, 2	; 11
     318:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     31a:	61 30       	cpi	r22, 0x01	; 1
     31c:	11 f4       	brne	.+4      	; 0x322 <_Z7pinModehh+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     31e:	53 9a       	sbi	0x0a, 3	; 10
     320:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     322:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     324:	63 30       	cpi	r22, 0x03	; 3
     326:	11 f4       	brne	.+4      	; 0x32c <_Z7pinModehh+0x68>
				{
					PORTD  |= (1 << PORTD3);
     328:	5b 9a       	sbi	0x0b, 3	; 11
     32a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     32c:	5b 98       	cbi	0x0b, 3	; 11
     32e:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     330:	61 30       	cpi	r22, 0x01	; 1
     332:	11 f4       	brne	.+4      	; 0x338 <_Z7pinModehh+0x74>
			{
				DDRD  |= (1 << PORTD4);
     334:	54 9a       	sbi	0x0a, 4	; 10
     336:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     338:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     33a:	63 30       	cpi	r22, 0x03	; 3
     33c:	11 f4       	brne	.+4      	; 0x342 <_Z7pinModehh+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     33e:	5c 9a       	sbi	0x0b, 4	; 11
     340:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     342:	5c 98       	cbi	0x0b, 4	; 11
     344:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     346:	61 30       	cpi	r22, 0x01	; 1
     348:	11 f4       	brne	.+4      	; 0x34e <_Z7pinModehh+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     34a:	55 9a       	sbi	0x0a, 5	; 10
     34c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     34e:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     350:	63 30       	cpi	r22, 0x03	; 3
     352:	11 f4       	brne	.+4      	; 0x358 <_Z7pinModehh+0x94>
				{
					PORTD  |= (1 << PORTD5);
     354:	5d 9a       	sbi	0x0b, 5	; 11
     356:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     35c:	61 30       	cpi	r22, 0x01	; 1
     35e:	11 f4       	brne	.+4      	; 0x364 <_Z7pinModehh+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     360:	56 9a       	sbi	0x0a, 6	; 10
     362:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     364:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     366:	63 30       	cpi	r22, 0x03	; 3
     368:	11 f4       	brne	.+4      	; 0x36e <_Z7pinModehh+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     36a:	5e 9a       	sbi	0x0b, 6	; 11
     36c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     36e:	5e 98       	cbi	0x0b, 6	; 11
     370:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     372:	61 30       	cpi	r22, 0x01	; 1
     374:	11 f4       	brne	.+4      	; 0x37a <_Z7pinModehh+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     376:	57 9a       	sbi	0x0a, 7	; 10
     378:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     37a:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     37c:	63 30       	cpi	r22, 0x03	; 3
     37e:	11 f4       	brne	.+4      	; 0x384 <_Z7pinModehh+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     380:	5f 9a       	sbi	0x0b, 7	; 11
     382:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     384:	5f 98       	cbi	0x0b, 7	; 11
     386:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     388:	61 30       	cpi	r22, 0x01	; 1
     38a:	11 f4       	brne	.+4      	; 0x390 <_Z7pinModehh+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     38c:	20 9a       	sbi	0x04, 0	; 4
     38e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     390:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     392:	63 30       	cpi	r22, 0x03	; 3
     394:	11 f4       	brne	.+4      	; 0x39a <_Z7pinModehh+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     396:	28 9a       	sbi	0x05, 0	; 5
     398:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     39a:	28 98       	cbi	0x05, 0	; 5
     39c:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     39e:	61 30       	cpi	r22, 0x01	; 1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <_Z7pinModehh+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3a2:	21 9a       	sbi	0x04, 1	; 4
     3a4:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3a6:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3a8:	63 30       	cpi	r22, 0x03	; 3
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <_Z7pinModehh+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3ac:	29 9a       	sbi	0x05, 1	; 5
     3ae:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3b0:	29 98       	cbi	0x05, 1	; 5
     3b2:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3b4:	61 30       	cpi	r22, 0x01	; 1
     3b6:	11 f4       	brne	.+4      	; 0x3bc <_Z7pinModehh+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3b8:	22 9a       	sbi	0x04, 2	; 4
     3ba:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3bc:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3be:	63 30       	cpi	r22, 0x03	; 3
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <_Z7pinModehh+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3c2:	2a 9a       	sbi	0x05, 2	; 5
     3c4:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3c6:	2a 98       	cbi	0x05, 2	; 5
     3c8:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x10e>
			{
				DDRB  |= (1 << PORTB5);
     3ce:	25 9a       	sbi	0x04, 5	; 4
     3d0:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3d2:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModehh+0x118>
				{
					PORTD  |= (1 << PORTB5);
     3d8:	5d 9a       	sbi	0x0b, 5	; 11
     3da:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3dc:	5d 98       	cbi	0x0b, 5	; 11
     3de:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3e0:	61 30       	cpi	r22, 0x01	; 1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <_Z7pinModehh+0x124>
			{
				DDRC  |= (1 << PORTC0);
     3e4:	38 9a       	sbi	0x07, 0	; 7
     3e6:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3e8:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ea:	63 30       	cpi	r22, 0x03	; 3
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <_Z7pinModehh+0x12e>
				{
					PORTC  |= (1 << PORTC0);
     3ee:	40 9a       	sbi	0x08, 0	; 8
     3f0:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3f2:	40 98       	cbi	0x08, 0	; 8
     3f4:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     3f6:	61 30       	cpi	r22, 0x01	; 1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <_Z7pinModehh+0x13a>
			{
				DDRC  |= (1 << PORTC1);
     3fa:	39 9a       	sbi	0x07, 1	; 7
     3fc:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3fe:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     400:	63 30       	cpi	r22, 0x03	; 3
     402:	11 f4       	brne	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				{
					PORTC  |= (1 << PORTC1);
     404:	41 9a       	sbi	0x08, 1	; 8
     406:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     408:	41 98       	cbi	0x08, 1	; 8
     40a:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     40c:	61 30       	cpi	r22, 0x01	; 1
     40e:	11 f4       	brne	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				DDRC  |= (1 << PORTC2);
     410:	3a 9a       	sbi	0x07, 2	; 7
     412:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     414:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     416:	63 30       	cpi	r22, 0x03	; 3
     418:	11 f4       	brne	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				{
					PORTC  |= (1 << PORTC2);
     41a:	42 9a       	sbi	0x08, 2	; 8
     41c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     41e:	42 98       	cbi	0x08, 2	; 8
     420:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     422:	61 30       	cpi	r22, 0x01	; 1
     424:	11 f4       	brne	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				DDRC  |= (1 << PORTC3);
     426:	3b 9a       	sbi	0x07, 3	; 7
     428:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     42a:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     42c:	63 30       	cpi	r22, 0x03	; 3
     42e:	11 f4       	brne	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				{
					PORTC  |= (1 << PORTC3);
     430:	43 9a       	sbi	0x08, 3	; 8
     432:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     434:	43 98       	cbi	0x08, 3	; 8
     436:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     438:	61 30       	cpi	r22, 0x01	; 1
     43a:	11 f4       	brne	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			{
				DDRC  |= (1 << PORTC4);
     43c:	3c 9a       	sbi	0x07, 4	; 7
     43e:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     440:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     442:	63 30       	cpi	r22, 0x03	; 3
     444:	11 f4       	brne	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				{
					PORTC  |= (1 << PORTC4);
     446:	44 9a       	sbi	0x08, 4	; 8
     448:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     44a:	44 98       	cbi	0x08, 4	; 8
     44c:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     44e:	61 30       	cpi	r22, 0x01	; 1
     450:	11 f4       	brne	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				DDRC  |= (1 << PORTC5);
     452:	3d 9a       	sbi	0x07, 5	; 7
     454:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     456:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     458:	63 30       	cpi	r22, 0x03	; 3
     45a:	11 f4       	brne	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				{
					PORTC  |= (1 << PORTC5);
     45c:	45 9a       	sbi	0x08, 5	; 8
     45e:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     460:	45 98       	cbi	0x08, 5	; 8
     462:	08 95       	ret

00000464 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	32 97       	sbiw	r30, 0x02	; 2
     46a:	e0 31       	cpi	r30, 0x10	; 16
     46c:	f1 05       	cpc	r31, r1
     46e:	f0 f5       	brcc	.+124    	; 0x4ec <_Z11digitalReadh+0x88>
     470:	e8 5b       	subi	r30, 0xB8	; 184
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     478:	29 b1       	in	r18, 0x09	; 9
     47a:	24 70       	andi	r18, 0x04	; 4
     47c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47e:	38 c0       	rjmp	.+112    	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     480:	29 b1       	in	r18, 0x09	; 9
     482:	28 70       	andi	r18, 0x08	; 8
     484:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     486:	34 c0       	rjmp	.+104    	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     488:	29 b1       	in	r18, 0x09	; 9
     48a:	20 71       	andi	r18, 0x10	; 16
     48c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48e:	30 c0       	rjmp	.+96     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     490:	29 b1       	in	r18, 0x09	; 9
     492:	20 72       	andi	r18, 0x20	; 32
     494:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     496:	2c c0       	rjmp	.+88     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     498:	29 b1       	in	r18, 0x09	; 9
     49a:	20 74       	andi	r18, 0x40	; 64
     49c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49e:	28 c0       	rjmp	.+80     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     4a0:	29 b1       	in	r18, 0x09	; 9
     4a2:	20 78       	andi	r18, 0x80	; 128
     4a4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a6:	24 c0       	rjmp	.+72     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4a8:	83 b1       	in	r24, 0x03	; 3
     4aa:	28 2f       	mov	r18, r24
     4ac:	21 70       	andi	r18, 0x01	; 1
     4ae:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b0:	1f c0       	rjmp	.+62     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4b2:	23 b1       	in	r18, 0x03	; 3
     4b4:	22 70       	andi	r18, 0x02	; 2
     4b6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4ba:	23 b1       	in	r18, 0x03	; 3
     4bc:	24 70       	andi	r18, 0x04	; 4
     4be:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4c2:	23 b1       	in	r18, 0x03	; 3
     4c4:	20 72       	andi	r18, 0x20	; 32
     4c6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4ca:	86 b1       	in	r24, 0x06	; 6
     4cc:	28 2f       	mov	r18, r24
     4ce:	21 70       	andi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4d4:	26 b1       	in	r18, 0x06	; 6
     4d6:	22 70       	andi	r18, 0x02	; 2
     4d8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4da:	0a c0       	rjmp	.+20     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4dc:	26 b1       	in	r18, 0x06	; 6
     4de:	24 70       	andi	r18, 0x04	; 4
     4e0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4e4:	26 b1       	in	r18, 0x06	; 6
     4e6:	28 70       	andi	r18, 0x08	; 8
     4e8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	23 2b       	or	r18, r19
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <_Z11digitalReadh+0x94>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
}
     4f8:	08 95       	ret

000004fa <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	82 31       	cpi	r24, 0x12	; 18
     4fe:	91 05       	cpc	r25, r1
     500:	08 f0       	brcs	.+2      	; 0x504 <_Z12digitalWritehh+0xa>
     502:	64 c0       	rjmp	.+200    	; 0x5cc <_Z12digitalWritehh+0xd2>
     504:	fc 01       	movw	r30, r24
     506:	e8 5a       	subi	r30, 0xA8	; 168
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     50e:	66 23       	and	r22, r22
     510:	11 f0       	breq	.+4      	; 0x516 <_Z12digitalWritehh+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     512:	58 9a       	sbi	0x0b, 0	; 11
     514:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     516:	58 98       	cbi	0x0b, 0	; 11
     518:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     51a:	66 23       	and	r22, r22
     51c:	11 f0       	breq	.+4      	; 0x522 <_Z12digitalWritehh+0x28>
			{
				PORTD  |= (1 << PORTD1);
     51e:	59 9a       	sbi	0x0b, 1	; 11
     520:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     522:	59 98       	cbi	0x0b, 1	; 11
     524:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     526:	66 23       	and	r22, r22
     528:	11 f0       	breq	.+4      	; 0x52e <_Z12digitalWritehh+0x34>
			{
				PORTD  |= (1 << PORTD2);
     52a:	5a 9a       	sbi	0x0b, 2	; 11
     52c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     52e:	5a 98       	cbi	0x0b, 2	; 11
     530:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     532:	66 23       	and	r22, r22
     534:	11 f0       	breq	.+4      	; 0x53a <_Z12digitalWritehh+0x40>
			{
				PORTD  |= (1 << PORTD3);
     536:	5b 9a       	sbi	0x0b, 3	; 11
     538:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     53a:	5b 98       	cbi	0x0b, 3	; 11
     53c:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     53e:	66 23       	and	r22, r22
     540:	11 f0       	breq	.+4      	; 0x546 <_Z12digitalWritehh+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     542:	5c 9a       	sbi	0x0b, 4	; 11
     544:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     546:	5c 98       	cbi	0x0b, 4	; 11
     548:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     54a:	66 23       	and	r22, r22
     54c:	11 f0       	breq	.+4      	; 0x552 <_Z12digitalWritehh+0x58>
			{
				PORTD  |= (1 << PORTD5);
     54e:	5d 9a       	sbi	0x0b, 5	; 11
     550:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     552:	5d 98       	cbi	0x0b, 5	; 11
     554:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     556:	66 23       	and	r22, r22
     558:	11 f0       	breq	.+4      	; 0x55e <_Z12digitalWritehh+0x64>
			{
				PORTD  |= (1 << PORTD6);
     55a:	5e 9a       	sbi	0x0b, 6	; 11
     55c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     55e:	5e 98       	cbi	0x0b, 6	; 11
     560:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     562:	66 23       	and	r22, r22
     564:	11 f0       	breq	.+4      	; 0x56a <_Z12digitalWritehh+0x70>
			{
				PORTD  |= (1 << PORTD7);
     566:	5f 9a       	sbi	0x0b, 7	; 11
     568:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     56a:	5f 98       	cbi	0x0b, 7	; 11
     56c:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     56e:	66 23       	and	r22, r22
     570:	11 f0       	breq	.+4      	; 0x576 <_Z12digitalWritehh+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     572:	28 9a       	sbi	0x05, 0	; 5
     574:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     576:	28 98       	cbi	0x05, 0	; 5
     578:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     57a:	66 23       	and	r22, r22
     57c:	11 f0       	breq	.+4      	; 0x582 <_Z12digitalWritehh+0x88>
			{
				PORTB  |= (1 << PORTB1);
     57e:	29 9a       	sbi	0x05, 1	; 5
     580:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     582:	29 98       	cbi	0x05, 1	; 5
     584:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     586:	66 23       	and	r22, r22
     588:	11 f0       	breq	.+4      	; 0x58e <_Z12digitalWritehh+0x94>
			{
				PORTB  |= (1 << PORTB2);
     58a:	2a 9a       	sbi	0x05, 2	; 5
     58c:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     58e:	2a 98       	cbi	0x05, 2	; 5
     590:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     592:	66 23       	and	r22, r22
     594:	11 f0       	breq	.+4      	; 0x59a <_Z12digitalWritehh+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     596:	2d 9a       	sbi	0x05, 5	; 5
     598:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     59a:	2d 98       	cbi	0x05, 5	; 5
     59c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     59e:	66 23       	and	r22, r22
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <_Z12digitalWritehh+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5a2:	40 9a       	sbi	0x08, 0	; 8
     5a4:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5a6:	40 98       	cbi	0x08, 0	; 8
     5a8:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5aa:	66 23       	and	r22, r22
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <_Z12digitalWritehh+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5ae:	41 9a       	sbi	0x08, 1	; 8
     5b0:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5b2:	41 98       	cbi	0x08, 1	; 8
     5b4:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5b6:	66 23       	and	r22, r22
     5b8:	11 f0       	breq	.+4      	; 0x5be <_Z12digitalWritehh+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5ba:	42 9a       	sbi	0x08, 2	; 8
     5bc:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5be:	42 98       	cbi	0x08, 2	; 8
     5c0:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5c2:	66 23       	and	r22, r22
     5c4:	11 f0       	breq	.+4      	; 0x5ca <_Z12digitalWritehh+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5c6:	43 9a       	sbi	0x08, 3	; 8
     5c8:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5ca:	43 98       	cbi	0x08, 3	; 8
     5cc:	08 95       	ret

000005ce <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     5ce:	08 95       	ret

000005d0 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     5d0:	08 95       	ret

000005d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5da:	41 15       	cp	r20, r1
     5dc:	51 05       	cpc	r21, r1
     5de:	09 f4       	brne	.+2      	; 0x5e2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5e0:	75 c0       	rjmp	.+234    	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     5e2:	86 2f       	mov	r24, r22
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	3b 97       	sbiw	r30, 0x0b	; 11
     5ea:	ee 30       	cpi	r30, 0x0E	; 14
     5ec:	f1 05       	cpc	r31, r1
     5ee:	08 f0       	brcs	.+2      	; 0x5f2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5f0:	6d c0       	rjmp	.+218    	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     5f2:	da 01       	movw	r26, r20
     5f4:	e6 59       	subi	r30, 0x96	; 150
     5f6:	ff 4f       	sbci	r31, 0xFF	; 255
     5f8:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5fc:	85 e2       	ldi	r24, 0x25	; 37
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	5f c0       	rjmp	.+190    	; 0x6c0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     602:	8f e1       	ldi	r24, 0x1F	; 31
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	55 c0       	rjmp	.+170    	; 0x6b2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     608:	8b e1       	ldi	r24, 0x1B	; 27
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	49 c0       	rjmp	.+146    	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     60e:	8a 01       	movw	r16, r20
     610:	0f 5f       	subi	r16, 0xFF	; 255
     612:	1f 4f       	sbci	r17, 0xFF	; 255
     614:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     616:	66 23       	and	r22, r22
     618:	71 f0       	breq	.+28     	; 0x636 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     61e:	21 96       	adiw	r28, 0x01	; 1
     620:	ce 01       	movw	r24, r28
     622:	8d 59       	subi	r24, 0x9D	; 157
     624:	9d 4f       	sbci	r25, 0xFD	; 253
     626:	0e 94 c6 33 	call	0x678c	; 0x678c <eeprom_update_byte>
				c = *char_addr++;
     62a:	f8 01       	movw	r30, r16
     62c:	61 91       	ld	r22, Z+
     62e:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     630:	61 11       	cpse	r22, r1
     632:	f5 cf       	rjmp	.-22     	; 0x61e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     634:	02 c0       	rjmp	.+4      	; 0x63a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     636:	c0 e0       	ldi	r28, 0x00	; 0
     638:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	ce 01       	movw	r24, r28
     63e:	8c 59       	subi	r24, 0x9C	; 156
     640:	9d 4f       	sbci	r25, 0xFD	; 253
     642:	0e 94 c6 33 	call	0x678c	; 0x678c <eeprom_update_byte>
		}
		break;
     646:	42 c0       	rjmp	.+132    	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     648:	8a 01       	movw	r16, r20
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     650:	66 23       	and	r22, r22
     652:	91 f0       	breq	.+36     	; 0x678 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     654:	c0 e0       	ldi	r28, 0x00	; 0
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	03 c0       	rjmp	.+6      	; 0x660 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     65a:	c8 30       	cpi	r28, 0x08	; 8
     65c:	d1 05       	cpc	r29, r1
     65e:	71 f0       	breq	.+28     	; 0x67c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	ce 01       	movw	r24, r28
     664:	80 5f       	subi	r24, 0xF0	; 240
     666:	9c 4f       	sbci	r25, 0xFC	; 252
     668:	0e 94 c6 33 	call	0x678c	; 0x678c <eeprom_update_byte>
				c = *uint8_addr++;
     66c:	f8 01       	movw	r30, r16
     66e:	61 91       	ld	r22, Z+
     670:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     672:	61 11       	cpse	r22, r1
     674:	f2 cf       	rjmp	.-28     	; 0x65a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     676:	02 c0       	rjmp	.+4      	; 0x67c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     678:	c0 e0       	ldi	r28, 0x00	; 0
     67a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	ce 01       	movw	r24, r28
     680:	8f 5e       	subi	r24, 0xEF	; 239
     682:	9c 4f       	sbci	r25, 0xFC	; 252
     684:	0e 94 c6 33 	call	0x678c	; 0x678c <eeprom_update_byte>
		}
		break;
     688:	21 c0       	rjmp	.+66     	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     68a:	89 e2       	ldi	r24, 0x29	; 41
     68c:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>

		case Ptt_periodic_reset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.ptt_periodic_reset);
     690:	8a e2       	ldi	r24, 0x2A	; 42
     692:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     694:	05 c0       	rjmp	.+10     	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     696:	8a e1       	ldi	r24, 0x1A	; 26
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     69c:	8c e1       	ldi	r24, 0x1C	; 28
     69e:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     6a0:	6c 91       	ld	r22, X
     6a2:	0e 94 c6 33 	call	0x678c	; 0x678c <eeprom_update_byte>
     6a6:	12 c0       	rjmp	.+36     	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     6a8:	8d e1       	ldi	r24, 0x1D	; 29
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     6ae:	8b e2       	ldi	r24, 0x2B	; 43
     6b0:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     6b2:	6d 91       	ld	r22, X+
     6b4:	7c 91       	ld	r23, X
     6b6:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <eeprom_update_word>
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     6bc:	81 e2       	ldi	r24, 0x21	; 33
     6be:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     6c0:	4d 91       	ld	r20, X+
     6c2:	5d 91       	ld	r21, X+
     6c4:	6d 91       	ld	r22, X+
     6c6:	7c 91       	ld	r23, X
     6c8:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <eeprom_update_dword>
	}
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6e2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z10lb_enabledv>
     6e6:	88 23       	and	r24, r24
     6e8:	09 f4       	brne	.+2      	; 0x6ec <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6ea:	46 c0       	rjmp	.+140    	; 0x778 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6ec:	8c 2f       	mov	r24, r28
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	8b 30       	cpi	r24, 0x0B	; 11
     6f2:	91 05       	cpc	r25, r1
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6f6:	40 c0       	rjmp	.+128    	; 0x778 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6f8:	fc 01       	movw	r30, r24
     6fa:	e8 58       	subi	r30, 0x88	; 136
     6fc:	ff 4f       	sbci	r31, 0xFF	; 255
     6fe:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     702:	8a e2       	ldi	r24, 0x2A	; 42
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	30 c0       	rjmp	.+96     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     708:	88 e8       	ldi	r24, 0x88	; 136
     70a:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     70c:	2d c0       	rjmp	.+90     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     70e:	8e ea       	ldi	r24, 0xAE	; 174
     710:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     712:	2a c0       	rjmp	.+84     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     714:	85 ed       	ldi	r24, 0xD5	; 213
     716:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     718:	27 c0       	rjmp	.+78     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     71a:	86 ef       	ldi	r24, 0xF6	; 246
     71c:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     71e:	24 c0       	rjmp	.+72     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     720:	81 e1       	ldi	r24, 0x11	; 17
     722:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     724:	21 c0       	rjmp	.+66     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     726:	87 e2       	ldi	r24, 0x27	; 39
     728:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     72a:	1e c0       	rjmp	.+60     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     72c:	8c e3       	ldi	r24, 0x3C	; 60
     72e:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     730:	1b c0       	rjmp	.+54     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     732:	80 e5       	ldi	r24, 0x50	; 80
     734:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     736:	18 c0       	rjmp	.+48     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     738:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     73a:	cc 23       	and	r28, r28
     73c:	e9 f0       	breq	.+58     	; 0x778 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     73e:	8c 2f       	mov	r24, r28
     740:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     744:	78 01       	movw	r14, r16
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	e8 1a       	sub	r14, r24
     74a:	f8 0a       	sbc	r15, r24
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     752:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     754:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z19linkbusTxInProgressv>
     758:	81 11       	cpse	r24, r1
     75a:	fc cf       	rjmp	.-8      	; 0x754 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     75c:	ed cf       	rjmp	.-38     	; 0x738 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     764:	80 e6       	ldi	r24, 0x60	; 96
     766:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     768:	8c 01       	movw	r16, r24
     76a:	0f 5f       	subi	r16, 0xFF	; 255
     76c:	1f 4f       	sbci	r17, 0xFF	; 255
     76e:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     772:	c8 2f       	mov	r28, r24

		while(c)
     774:	81 11       	cpse	r24, r1
     776:	e3 cf       	rjmp	.-58     	; 0x73e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	08 95       	ret

00000784 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     790:	8b e2       	ldi	r24, 0x2B	; 43
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 c0 33 	call	0x6780	; 0x6780 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     798:	8b 3b       	cpi	r24, 0xBB	; 187
     79a:	91 05       	cpc	r25, r1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <_ZN13EepromManager11readNonVolsEv+0x1c>
     79e:	b6 c0       	rjmp	.+364    	; 0x90c <__stack+0xd>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     7a0:	8a e1       	ldi	r24, 0x1A	; 26
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	85 30       	cpi	r24, 0x05	; 5
     7ac:	91 05       	cpc	r25, r1
     7ae:	14 f4       	brge	.+4      	; 0x7b4 <_ZN13EepromManager11readNonVolsEv+0x30>
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	85 31       	cpi	r24, 0x15	; 21
     7b6:	91 05       	cpc	r25, r1
     7b8:	14 f0       	brlt	.+4      	; 0x7be <_ZN13EepromManager11readNonVolsEv+0x3a>
     7ba:	84 e1       	ldi	r24, 0x14	; 20
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     7c2:	8b e1       	ldi	r24, 0x1B	; 27
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     7ca:	82 31       	cpi	r24, 0x12	; 18
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <_ZN13EepromManager11readNonVolsEv+0x4c>
     7ce:	81 e1       	ldi	r24, 0x11	; 17
     7d0:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7d4:	8c e1       	ldi	r24, 0x1C	; 28
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     7dc:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7e0:	8d e1       	ldi	r24, 0x1D	; 29
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 c0 33 	call	0x6780	; 0x6780 <eeprom_read_word>
     7e8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_atmega_temp_calibration+0x1>
     7ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7f0:	8f e1       	ldi	r24, 0x1F	; 31
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	0e 94 c0 33 	call	0x6780	; 0x6780 <eeprom_read_word>
     7f8:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <g_rv3028_offset+0x1>
     7fc:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     800:	81 e2       	ldi	r24, 0x21	; 33
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 ba 33 	call	0x6774	; 0x6774 <eeprom_read_dword>
     808:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <g_event_start_epoch>
     80c:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <g_event_start_epoch+0x1>
     810:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_start_epoch+0x2>
     814:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     818:	85 e2       	ldi	r24, 0x25	; 37
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 ba 33 	call	0x6774	; 0x6774 <eeprom_read_dword>
     820:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_event_finish_epoch>
     824:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_event_finish_epoch+0x1>
     828:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_event_finish_epoch+0x2>
     82c:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     830:	89 e2       	ldi	r24, 0x29	; 41
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     838:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_utc_offset>
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));
     83c:	8a e2       	ldi	r24, 0x2A	; 42
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     844:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_ptt_periodic_reset_enabled>
     848:	04 e6       	ldi	r16, 0x64	; 100
     84a:	12 e0       	ldi	r17, 0x02	; 2
     84c:	c8 e2       	ldi	r28, 0x28	; 40
     84e:	d5 e0       	ldi	r29, 0x05	; 5
     850:	0f 2e       	mov	r0, r31
     852:	fc e3       	ldi	r31, 0x3C	; 60
     854:	ef 2e       	mov	r14, r31
     856:	f5 e0       	ldi	r31, 0x05	; 5
     858:	ff 2e       	mov	r15, r31
     85a:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     862:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     864:	81 11       	cpse	r24, r1
     866:	0b c0       	rjmp	.+22     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     868:	01 e1       	ldi	r16, 0x11	; 17
     86a:	13 e0       	ldi	r17, 0x03	; 3
     86c:	c4 e4       	ldi	r28, 0x44	; 68
     86e:	d5 e0       	ldi	r29, 0x05	; 5
     870:	0f 2e       	mov	r0, r31
     872:	fc e4       	ldi	r31, 0x4C	; 76
     874:	ef 2e       	mov	r14, r31
     876:	f5 e0       	ldi	r31, 0x05	; 5
     878:	ff 2e       	mov	r15, r31
     87a:	f0 2d       	mov	r31, r0
     87c:	06 c0       	rjmp	.+12     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     882:	ce 15       	cp	r28, r14
     884:	df 05       	cpc	r29, r15
     886:	51 f7       	brne	.-44     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     888:	ef cf       	rjmp	.-34     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     890:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     892:	88 23       	and	r24, r24
     894:	29 f0       	breq	.+10     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     896:	0f 5f       	subi	r16, 0xFF	; 255
     898:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     89a:	ce 15       	cp	r28, r14
     89c:	df 05       	cpc	r29, r15
     89e:	a9 f7       	brne	.-22     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     8a0:	01 ef       	ldi	r16, 0xF1	; 241
     8a2:	12 e0       	ldi	r17, 0x02	; 2
     8a4:	ce e5       	ldi	r28, 0x5E	; 94
     8a6:	d5 e0       	ldi	r29, 0x05	; 5
     8a8:	0f 2e       	mov	r0, r31
     8aa:	fe e7       	ldi	r31, 0x7E	; 126
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f5 e0       	ldi	r31, 0x05	; 5
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 b2 33 	call	0x6764	; 0x6764 <eeprom_read_byte>
     8ba:	89 93       	st	Y+, r24
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     8c0:	ce 15       	cp	r28, r14
     8c2:	df 05       	cpc	r29, r15
     8c4:	b9 f7       	brne	.-18     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     8c6:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
     8ca:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     8ce:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     8d2:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     8d6:	89 2b       	or	r24, r25
     8d8:	8a 2b       	or	r24, r26
     8da:	8b 2b       	or	r24, r27
     8dc:	c9 f0       	breq	.+50     	; 0x910 <__stack+0x11>
     8de:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
     8e2:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
     8e6:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
     8ea:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
     8ee:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
     8f2:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     8f6:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     8fa:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     8fe:	84 17       	cp	r24, r20
     900:	95 07       	cpc	r25, r21
     902:	a6 07       	cpc	r26, r22
     904:	b7 07       	cpc	r27, r23
     906:	30 f4       	brcc	.+12     	; 0x914 <__stack+0x15>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	19 c0       	rjmp	.+50     	; 0x93e <__stack+0x3f>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	17 c0       	rjmp	.+46     	; 0x93e <__stack+0x3f>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	15 c0       	rjmp	.+42     	; 0x93e <__stack+0x3f>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     914:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
     918:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     91c:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     920:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     924:	80 58       	subi	r24, 0x80	; 128
     926:	9e 4a       	sbci	r25, 0xAE	; 174
     928:	ae 4f       	sbci	r26, 0xFE	; 254
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
     92c:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_event_finish_epoch>
     930:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_event_finish_epoch+0x1>
     934:	a0 93 85 05 	sts	0x0585, r26	; 0x800585 <g_event_finish_epoch+0x2>
     938:	b0 93 86 05 	sts	0x0586, r27	; 0x800586 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     93c:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	0b e1       	ldi	r16, 0x1B	; 27
     95a:	11 e0       	ldi	r17, 0x01	; 1
     95c:	c4 e4       	ldi	r28, 0x44	; 68
     95e:	d5 e0       	ldi	r29, 0x05	; 5
     960:	0f 2e       	mov	r0, r31
     962:	f8 e4       	ldi	r31, 0x48	; 72
     964:	ef 2e       	mov	r14, r31
     966:	f5 e0       	ldi	r31, 0x05	; 5
     968:	ff 2e       	mov	r15, r31
     96a:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     96c:	f8 01       	movw	r30, r16
     96e:	61 91       	ld	r22, Z+
     970:	8f 01       	movw	r16, r30
     972:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     974:	ce 01       	movw	r24, r28
     976:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <eeprom_write_byte>
     97a:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     97c:	ce 15       	cp	r28, r14
     97e:	df 05       	cpc	r29, r15
     980:	a9 f7       	brne	.-22     	; 0x96c <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	85 e1       	ldi	r24, 0x15	; 21
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     98c:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_unlockCode+0x4>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     990:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), g_AM_audio_frequency);
     994:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <g_AM_audio_frequency>
     998:	8c e1       	ldi	r24, 0x1C	; 28
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     9a0:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <g_event_start_epoch>
     9a4:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <g_event_start_epoch+0x1>
     9a8:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_event_start_epoch+0x2>
     9ac:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     9b0:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
     9b4:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     9b8:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     9bc:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     9c0:	81 e2       	ldi	r24, 0x21	; 33
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     9c8:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <g_event_finish_epoch>
     9cc:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <g_event_finish_epoch+0x1>
     9d0:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_event_finish_epoch+0x2>
     9d4:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     9d8:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
     9dc:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
     9e0:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
     9e4:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
     9e8:	85 e2       	ldi	r24, 0x25	; 37
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <eeprom_write_dword>
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     a04:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     a18:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     a1c:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     a26:	cb 01       	movw	r24, r22
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	87 58       	subi	r24, 0x87	; 135
     a2e:	9d 4f       	sbci	r25, 0xFD	; 253
     a30:	0e 94 c0 33 	call	0x6780	; 0x6780 <eeprom_read_word>
}
     a34:	08 95       	ret

00000a36 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     a36:	9c 01       	movw	r18, r24
     a38:	2e 5f       	subi	r18, 0xFE	; 254
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	2b 33       	cpi	r18, 0x3B	; 59
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	38 07       	cpc	r19, r24
     a42:	10 f0       	brcs	.+4      	; 0xa48 <_Z8setAttenj+0x12>
     a44:	2b e3       	ldi	r18, 0x3B	; 59
     a46:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     a48:	ad ec       	ldi	r26, 0xCD	; 205
     a4a:	bc ec       	ldi	r27, 0xCC	; 204
     a4c:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	9c 01       	movw	r18, r24
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	28 0f       	add	r18, r24
     a64:	39 1f       	adc	r19, r25
	att /= 5;
     a66:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     a72:	9c 01       	movw	r18, r24
     a74:	20 73       	andi	r18, 0x30	; 48
     a76:	33 27       	eor	r19, r19
     a78:	32 95       	swap	r19
     a7a:	22 95       	swap	r18
     a7c:	2f 70       	andi	r18, 0x0F	; 15
     a7e:	23 27       	eor	r18, r19
     a80:	3f 70       	andi	r19, 0x0F	; 15
     a82:	23 27       	eor	r18, r19
     a84:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__data_end>

	pattern = PORTC & 0xF0;
     a88:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     a8a:	8f 70       	andi	r24, 0x0F	; 15
     a8c:	90 7f       	andi	r25, 0xF0	; 240
     a8e:	89 2b       	or	r24, r25
     a90:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     a92:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     a94:	8c 7f       	andi	r24, 0xFC	; 252
     a96:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <__data_end>
     a9a:	89 2b       	or	r24, r25
     a9c:	8b b9       	out	0x0b, r24	; 11
     a9e:	08 95       	ret

00000aa0 <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     aa0:	0e 94 af 09 	call	0x135e	; 0x135e <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	8e e0       	ldi	r24, 0x0E	; 14
     aa8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	8f e0       	ldi	r24, 0x0F	; 15
     ab0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	80 e1       	ldi	r24, 0x10	; 16
     ab8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	86 e0       	ldi	r24, 0x06	; 6
     ad8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
     ae4:	08 95       	ret

00000ae6 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	e4 2e       	mov	r14, r20
     af4:	f5 2e       	mov	r15, r21
     af6:	d6 2f       	mov	r29, r22
     af8:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     afa:	00 93 2c 03 	sts	0x032C, r16	; 0x80032c <_SAMPLING_FREQUENCY>
     afe:	10 93 2d 03 	sts	0x032D, r17	; 0x80032d <_SAMPLING_FREQUENCY+0x1>
     b02:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <_SAMPLING_FREQUENCY+0x2>
     b06:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	41 e5       	ldi	r20, 0x51	; 81
     b10:	53 e4       	ldi	r21, 0x43	; 67
     b12:	6e 2d       	mov	r22, r14
     b14:	7f 2d       	mov	r23, r15
     b16:	8d 2f       	mov	r24, r29
     b18:	9c 2f       	mov	r25, r28
     b1a:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__gesf2>
     b1e:	18 16       	cp	r1, r24
     b20:	6c f0       	brlt	.+26     	; 0xb3c <_ZN8GoertzelC1Eff+0x56>
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 ec       	ldi	r20, 0xC8	; 200
     b28:	52 e4       	ldi	r21, 0x42	; 66
     b2a:	6e 2d       	mov	r22, r14
     b2c:	7f 2d       	mov	r23, r15
     b2e:	8d 2f       	mov	r24, r29
     b30:	9c 2f       	mov	r25, r28
     b32:	0e 94 0e 2c 	call	0x581c	; 0x581c <__cmpsf2>
     b36:	88 23       	and	r24, r24
     b38:	34 f0       	brlt	.+12     	; 0xb46 <_ZN8GoertzelC1Eff+0x60>
     b3a:	09 c0       	rjmp	.+18     	; 0xb4e <_ZN8GoertzelC1Eff+0x68>
     b3c:	e1 2c       	mov	r14, r1
     b3e:	f1 2c       	mov	r15, r1
     b40:	d1 e5       	ldi	r29, 0x51	; 81
     b42:	c3 e4       	ldi	r28, 0x43	; 67
     b44:	04 c0       	rjmp	.+8      	; 0xb4e <_ZN8GoertzelC1Eff+0x68>
     b46:	e1 2c       	mov	r14, r1
     b48:	f1 2c       	mov	r15, r1
     b4a:	d8 ec       	ldi	r29, 0xC8	; 200
     b4c:	c2 e4       	ldi	r28, 0x42	; 66
     b4e:	6e 2d       	mov	r22, r14
     b50:	7f 2d       	mov	r23, r15
     b52:	8d 2f       	mov	r24, r29
     b54:	9c 2f       	mov	r25, r28
     b56:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__fixsfsi>
     b5a:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <_N+0x1>
     b5e:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     b62:	cb 01       	movw	r24, r22
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <malloc>
     b6c:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <testData+0x1>
     b70:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <testData>
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	08 95       	ret

00000b82 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     b82:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <testData>
     b86:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <testData+0x1>
     b8a:	0e 94 eb 2f 	call	0x5fd6	; 0x5fd6 <free>
     b8e:	08 95       	ret

00000b90 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     b90:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <Q2>
     b94:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <Q2+0x1>
     b98:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <Q2+0x2>
     b9c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Q2+0x3>
	Q1 = 0;
     ba0:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Q1>
     ba4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <Q1+0x1>
     ba8:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <Q1+0x2>
     bac:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <Q1+0x3>
	_samplesReady = false;
     bb0:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_samplesReady>
     bb4:	08 95       	ret

00000bb6 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     bb6:	8f 92       	push	r8
     bb8:	9f 92       	push	r9
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
     bcc:	4a 01       	movw	r8, r20
     bce:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     bd0:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <_N>
     bd4:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <_N+0x1>
     bd8:	07 2e       	mov	r0, r23
     bda:	00 0c       	add	r0, r0
     bdc:	88 0b       	sbc	r24, r24
     bde:	99 0b       	sbc	r25, r25
     be0:	0e 94 c2 2c 	call	0x5984	; 0x5984 <__floatsisf>
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     be8:	80 92 28 03 	sts	0x0328, r8	; 0x800328 <_TARGET_FREQUENCY>
     bec:	90 92 29 03 	sts	0x0329, r9	; 0x800329 <_TARGET_FREQUENCY+0x1>
     bf0:	a0 92 2a 03 	sts	0x032A, r10	; 0x80032a <_TARGET_FREQUENCY+0x2>
     bf4:	b0 92 2b 03 	sts	0x032B, r11	; 0x80032b <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     bf8:	a5 01       	movw	r20, r10
     bfa:	94 01       	movw	r18, r8
     bfc:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     c00:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <_SAMPLING_FREQUENCY>
     c04:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <_SAMPLING_FREQUENCY+0x1>
     c08:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <_SAMPLING_FREQUENCY+0x2>
     c0c:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <_SAMPLING_FREQUENCY+0x3>
     c10:	0e 94 18 2c 	call	0x5830	; 0x5830 <__divsf3>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	5f e3       	ldi	r21, 0x3F	; 63
     c1c:	0e 94 a2 2b 	call	0x5744	; 0x5744 <__addsf3>
     c20:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__fixsfsi>
     c24:	07 2e       	mov	r0, r23
     c26:	00 0c       	add	r0, r0
     c28:	88 0b       	sbc	r24, r24
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 c2 2c 	call	0x5984	; 0x5984 <__floatsisf>
     c30:	2b ed       	ldi	r18, 0xDB	; 219
     c32:	3f e0       	ldi	r19, 0x0F	; 15
     c34:	49 ec       	ldi	r20, 0xC9	; 201
     c36:	50 e4       	ldi	r21, 0x40	; 64
     c38:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	0e 94 18 2c 	call	0x5830	; 0x5830 <__divsf3>
     c44:	0e 94 13 2c 	call	0x5826	; 0x5826 <cos>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	0e 94 a2 2b 	call	0x5744	; 0x5744 <__addsf3>
     c50:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <g_coeff>
     c54:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <g_coeff+0x1>
     c58:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <g_coeff+0x2>
     c5c:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <g_coeff+0x3>
	ResetGoertzel();
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN8Goertzel13ResetGoertzelEv>
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	8f 90       	pop	r8
     c7a:	08 95       	ret

00000c7c <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     c92:	c0 90 1e 03 	lds	r12, 0x031E	; 0x80031e <Q1>
     c96:	d0 90 1f 03 	lds	r13, 0x031F	; 0x80031f <Q1+0x1>
     c9a:	e0 90 20 03 	lds	r14, 0x0320	; 0x800320 <Q1+0x2>
     c9e:	f0 90 21 03 	lds	r15, 0x0321	; 0x800321 <Q1+0x3>
     ca2:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <g_coeff>
     ca6:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <g_coeff+0x1>
     caa:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <g_coeff+0x2>
     cae:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <g_coeff+0x3>
     cb2:	c7 01       	movw	r24, r14
     cb4:	b6 01       	movw	r22, r12
     cb6:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     cba:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <Q2>
     cbe:	30 91 1b 03 	lds	r19, 0x031B	; 0x80031b <Q2+0x1>
     cc2:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <Q2+0x2>
     cc6:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <Q2+0x3>
     cca:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__subsf3>
     cce:	4b 01       	movw	r8, r22
     cd0:	5c 01       	movw	r10, r24
     cd2:	be 01       	movw	r22, r28
     cd4:	72 50       	subi	r23, 0x02	; 2
     cd6:	07 2e       	mov	r0, r23
     cd8:	00 0c       	add	r0, r0
     cda:	88 0b       	sbc	r24, r24
     cdc:	99 0b       	sbc	r25, r25
     cde:	0e 94 c2 2c 	call	0x5984	; 0x5984 <__floatsisf>
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	c5 01       	movw	r24, r10
     ce8:	b4 01       	movw	r22, r8
     cea:	0e 94 a2 2b 	call	0x5744	; 0x5744 <__addsf3>

	Q2 = Q1;
     cee:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <Q2>
     cf2:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <Q2+0x1>
     cf6:	e0 92 1c 03 	sts	0x031C, r14	; 0x80031c <Q2+0x2>
     cfa:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <Q2+0x3>
	Q1 = Q0;
     cfe:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <Q1>
     d02:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <Q1+0x1>
     d06:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <Q1+0x2>
     d0a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <Q1+0x3>
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	bf 90       	pop	r11
     d1c:	af 90       	pop	r10
     d1e:	9f 90       	pop	r9
     d20:	8f 90       	pop	r8
     d22:	08 95       	ret

00000d24 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     d24:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
     d28:	81 11       	cpse	r24, r1
     d2a:	27 c0       	rjmp	.+78     	; 0xd7a <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     d2c:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <_index>
     d30:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <_index+0x1>
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <testData>
     d3c:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <testData+0x1>
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	71 83       	std	Z+1, r23	; 0x01
     d46:	60 83       	st	Z, r22
	_index++;
     d48:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_index>
     d4c:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_index+0x1>
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <_index+0x1>
     d56:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_index>
	if(_index >= _N)
     d5a:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <_N>
     d5e:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <_N+0x1>
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	3c f0       	brlt	.+14     	; 0xd76 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     d68:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_index+0x1>
     d6c:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_index>
		_samplesReady = true;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_samplesReady>
	}

	return(_samplesReady);
     d76:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
}
     d7a:	08 95       	ret

00000d7c <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     d7c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
     d80:	08 95       	ret

00000d82 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     d82:	4f 92       	push	r4
     d84:	5f 92       	push	r5
     d86:	6f 92       	push	r6
     d88:	7f 92       	push	r7
     d8a:	8f 92       	push	r8
     d8c:	9f 92       	push	r9
     d8e:	af 92       	push	r10
     d90:	bf 92       	push	r11
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     da4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_N>
     da8:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_N+0x1>
     dac:	18 16       	cp	r1, r24
     dae:	19 06       	cpc	r1, r25
     db0:	c4 f4       	brge	.+48     	; 0xde2 <_ZN8Goertzel10Magnitude2Ev+0x60>
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     db6:	ce 01       	movw	r24, r28
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <testData>
     dc0:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <testData+0x1>
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     dd2:	21 96       	adiw	r28, 0x01	; 1
     dd4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_N>
     dd8:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_N+0x1>
     ddc:	c8 17       	cp	r28, r24
     dde:	d9 07       	cpc	r29, r25
     de0:	54 f3       	brlt	.-44     	; 0xdb6 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     de2:	80 90 1e 03 	lds	r8, 0x031E	; 0x80031e <Q1>
     de6:	90 90 1f 03 	lds	r9, 0x031F	; 0x80031f <Q1+0x1>
     dea:	a0 90 20 03 	lds	r10, 0x0320	; 0x800320 <Q1+0x2>
     dee:	b0 90 21 03 	lds	r11, 0x0321	; 0x800321 <Q1+0x3>
     df2:	c0 90 1a 03 	lds	r12, 0x031A	; 0x80031a <Q2>
     df6:	d0 90 1b 03 	lds	r13, 0x031B	; 0x80031b <Q2+0x1>
     dfa:	e0 90 1c 03 	lds	r14, 0x031C	; 0x80031c <Q2+0x2>
     dfe:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <Q2+0x3>
     e02:	a5 01       	movw	r20, r10
     e04:	94 01       	movw	r18, r8
     e06:	c5 01       	movw	r24, r10
     e08:	b4 01       	movw	r22, r8
     e0a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     e0e:	2b 01       	movw	r4, r22
     e10:	3c 01       	movw	r6, r24
     e12:	a7 01       	movw	r20, r14
     e14:	96 01       	movw	r18, r12
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	c3 01       	movw	r24, r6
     e24:	b2 01       	movw	r22, r4
     e26:	0e 94 a2 2b 	call	0x5744	; 0x5744 <__addsf3>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
     e2e:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <g_coeff>
     e32:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <g_coeff+0x1>
     e36:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <g_coeff+0x2>
     e3a:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <g_coeff+0x3>
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     e46:	a7 01       	movw	r20, r14
     e48:	96 01       	movw	r18, r12
     e4a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
     e4e:	9b 01       	movw	r18, r22
     e50:	ac 01       	movw	r20, r24
     e52:	c3 01       	movw	r24, r6
     e54:	b2 01       	movw	r22, r4
     e56:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__subsf3>
     e5a:	6b 01       	movw	r12, r22
     e5c:	7c 01       	movw	r14, r24

	ResetGoertzel();
     e5e:	c8 01       	movw	r24, r16
     e60:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	5f 90       	pop	r5
     e86:	4f 90       	pop	r4
     e88:	08 95       	ret

00000e8a <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     e8a:	e4 e6       	ldi	r30, 0x64	; 100
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 77       	andi	r24, 0x7F	; 127
     e92:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     e94:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     e98:	85 e2       	ldi	r24, 0x25	; 37
     e9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     eaa:	08 95       	ret

00000eac <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     eac:	84 ea       	ldi	r24, 0xA4	; 164
     eae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     eb2:	ec eb       	ldi	r30, 0xBC	; 188
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	64 f0       	brlt	.+24     	; 0xed4 <_Z9i2c_startv+0x28>
     ebc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ec0:	81 11       	cpse	r24, r1
     ec2:	f9 cf       	rjmp	.-14     	; 0xeb6 <_Z9i2c_startv+0xa>
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     ec6:	80 e9       	ldi	r24, 0x90	; 144
     ec8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     ed2:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     ed4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ed8:	88 23       	and	r24, r24
     eda:	a9 f3       	breq	.-22     	; 0xec6 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     edc:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     ede:	08 95       	ret

00000ee0 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ee0:	84 e9       	ldi	r24, 0x94	; 148
     ee2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ee6:	08 95       	ret

00000ee8 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     ee8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     eec:	84 e8       	ldi	r24, 0x84	; 132
     eee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     ef2:	ec eb       	ldi	r30, 0xBC	; 188
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	64 f0       	brlt	.+24     	; 0xf14 <_Z17i2c_write_successhh+0x2c>
     efc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f00:	81 11       	cpse	r24, r1
     f02:	f9 cf       	rjmp	.-14     	; 0xef6 <_Z17i2c_write_successhh+0xe>
     f04:	07 c0       	rjmp	.+14     	; 0xf14 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f06:	84 e9       	ldi	r24, 0x94	; 148
     f08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     f12:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     f14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     f18:	88 7f       	andi	r24, 0xF8	; 248
     f1a:	86 13       	cpse	r24, r22
     f1c:	f4 cf       	rjmp	.-24     	; 0xf06 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     f20:	08 95       	ret

00000f22 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     f22:	84 ec       	ldi	r24, 0xC4	; 196
     f24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f28:	ec eb       	ldi	r30, 0xBC	; 188
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	88 23       	and	r24, r24
     f30:	24 f0       	brlt	.+8      	; 0xf3a <_Z12i2c_read_ackv+0x18>
     f32:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f36:	81 11       	cpse	r24, r1
     f38:	f9 cf       	rjmp	.-14     	; 0xf2c <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     f3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f3e:	08 95       	ret

00000f40 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     f40:	84 e8       	ldi	r24, 0x84	; 132
     f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f46:	ec eb       	ldi	r30, 0xBC	; 188
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	24 f0       	brlt	.+8      	; 0xf58 <_Z13i2c_read_nackv+0x18>
     f50:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f54:	81 11       	cpse	r24, r1
     f56:	f9 cf       	rjmp	.-14     	; 0xf4a <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     f58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f5c:	08 95       	ret

00000f5e <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     f5e:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f62:	28 7f       	andi	r18, 0xF8	; 248
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	29 f0       	breq	.+10     	; 0xf78 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f6e:	84 e9       	ldi	r24, 0x94	; 148
     f70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	08 95       	ret
	}

	return(FALSE);
     f78:	80 e0       	ldi	r24, 0x00	; 0
}
     f7a:	08 95       	ret

00000f7c <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	00 d0       	rcall	.+0      	; 0xf82 <_Z16i2c_device_writehhPhh+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <_Z16i2c_device_writehhPhh+0x8>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <_Z16i2c_device_writehhPhh+0xa>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	6b 83       	std	Y+3, r22	; 0x03
     f8e:	5d 83       	std	Y+5, r21	; 0x05
     f90:	4c 83       	std	Y+4, r20	; 0x04
     f92:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f94:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f96:	0e 94 56 07 	call	0xeac	; 0xeac <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f9a:	88 e0       	ldi	r24, 0x08	; 8
     f9c:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
     fa0:	98 2f       	mov	r25, r24
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	99 23       	and	r25, r25
     fa6:	09 f4       	brne	.+2      	; 0xfaa <_Z16i2c_device_writehhPhh+0x2e>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	11 f0       	breq	.+4      	; 0xfb2 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     fb2:	68 e1       	ldi	r22, 0x18	; 24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
     fba:	98 2f       	mov	r25, r24
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	99 23       	and	r25, r25
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_Z16i2c_device_writehhPhh+0x48>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	88 23       	and	r24, r24
     fc6:	11 f0       	breq	.+4      	; 0xfcc <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	32 c0       	rjmp	.+100    	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fcc:	68 e2       	ldi	r22, 0x28	; 40
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
     fd4:	98 2f       	mov	r25, r24
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	99 23       	and	r25, r25
     fda:	09 f4       	brne	.+2      	; 0xfde <_Z16i2c_device_writehhPhh+0x62>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	88 23       	and	r24, r24
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	25 c0       	rjmp	.+74     	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f ef       	ldi	r25, 0xFF	; 255
     fea:	98 0f       	add	r25, r24
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <_Z16i2c_device_writehhPhh+0x7a>
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	99 23       	and	r25, r25
     ff8:	c1 f0       	breq	.+48     	; 0x102a <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	98 0f       	add	r25, r24
    1000:	99 83       	std	Y+1, r25	; 0x01
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	fc 01       	movw	r30, r24
    1010:	80 81       	ld	r24, Z
    1012:	68 e2       	ldi	r22, 0x28	; 40
    1014:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    1018:	98 2f       	mov	r25, r24
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	99 23       	and	r25, r25
    101e:	09 f4       	brne	.+2      	; 0x1022 <_Z16i2c_device_writehhPhh+0xa6>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	88 23       	and	r24, r24
    1024:	01 f3       	breq	.-64     	; 0xfe6 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
    102a:	0e 94 70 07 	call	0xee0	; 0xee0 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    102e:	80 e0       	ldi	r24, 0x00	; 0
}
    1030:	26 96       	adiw	r28, 0x06	; 6
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	00 d0       	rcall	.+0      	; 0x104c <_Z15i2c_device_readhhPhh+0xa>
    104c:	00 d0       	rcall	.+0      	; 0x104e <_Z15i2c_device_readhhPhh+0xc>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <_Z15i2c_device_readhhPhh+0xe>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	6b 83       	std	Y+3, r22	; 0x03
    1058:	5d 83       	std	Y+5, r21	; 0x05
    105a:	4c 83       	std	Y+4, r20	; 0x04
    105c:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    105e:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    1060:	0e 94 56 07 	call	0xeac	; 0xeac <_Z9i2c_startv>
		if(i2c_status(TW_START))
    1064:	88 e0       	ldi	r24, 0x08	; 8
    1066:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    106a:	98 2f       	mov	r25, r24
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	99 23       	and	r25, r25
    1070:	09 f4       	brne	.+2      	; 0x1074 <_Z15i2c_device_readhhPhh+0x32>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	88 23       	and	r24, r24
    1076:	11 f0       	breq	.+4      	; 0x107c <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	79 c0       	rjmp	.+242    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    107c:	68 e1       	ldi	r22, 0x18	; 24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    1084:	98 2f       	mov	r25, r24
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	99 23       	and	r25, r25
    108a:	09 f4       	brne	.+2      	; 0x108e <_Z15i2c_device_readhhPhh+0x4c>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	88 23       	and	r24, r24
    1090:	11 f0       	breq	.+4      	; 0x1096 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	6c c0       	rjmp	.+216    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1096:	68 e2       	ldi	r22, 0x28	; 40
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    109e:	98 2f       	mov	r25, r24
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	99 23       	and	r25, r25
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <_Z15i2c_device_readhhPhh+0x66>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	88 23       	and	r24, r24
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
    10b0:	0e 94 56 07 	call	0xeac	; 0xeac <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
    10b4:	80 e1       	ldi	r24, 0x10	; 16
    10b6:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    10ba:	98 2f       	mov	r25, r24
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	99 23       	and	r25, r25
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <_Z15i2c_device_readhhPhh+0x82>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	88 23       	and	r24, r24
    10c6:	11 f0       	breq	.+4      	; 0x10cc <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	51 c0       	rjmp	.+162    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	60 e4       	ldi	r22, 0x40	; 64
    10d2:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    10d6:	98 2f       	mov	r25, r24
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	99 23       	and	r25, r25
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <_Z15i2c_device_readhhPhh+0x9e>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	88 23       	and	r24, r24
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	43 c0       	rjmp	.+134    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	98 0f       	add	r25, r24
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <_Z15i2c_device_readhhPhh+0xb6>
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	99 23       	and	r25, r25
    10fa:	b1 f1       	breq	.+108    	; 0x1168 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	88 23       	and	r24, r24
    1100:	d9 f0       	breq	.+54     	; 0x1138 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	98 0f       	add	r25, r24
    1108:	99 83       	std	Y+1, r25	; 0x01
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	89 01       	movw	r16, r18
    1114:	08 0f       	add	r16, r24
    1116:	19 1f       	adc	r17, r25
    1118:	0e 94 91 07 	call	0xf22	; 0xf22 <_Z12i2c_read_ackv>
    111c:	f8 01       	movw	r30, r16
    111e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    1120:	80 e5       	ldi	r24, 0x50	; 80
    1122:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    1126:	98 2f       	mov	r25, r24
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	99 23       	and	r25, r25
    112c:	09 f4       	brne	.+2      	; 0x1130 <_Z15i2c_device_readhhPhh+0xee>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	88 23       	and	r24, r24
    1132:	d1 f2       	breq	.-76     	; 0x10e8 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	1b c0       	rjmp	.+54     	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	89 01       	movw	r16, r18
    1144:	08 0f       	add	r16, r24
    1146:	19 1f       	adc	r17, r25
    1148:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z13i2c_read_nackv>
    114c:	f8 01       	movw	r30, r16
    114e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    1150:	88 e5       	ldi	r24, 0x58	; 88
    1152:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    1156:	98 2f       	mov	r25, r24
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	99 23       	and	r25, r25
    115c:	09 f4       	brne	.+2      	; 0x1160 <_Z15i2c_device_readhhPhh+0x11e>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	88 23       	and	r24, r24
    1162:	11 f2       	breq	.-124    	; 0x10e8 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    1168:	0e 94 70 07 	call	0xee0	; 0xee0 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    116c:	80 e0       	ldi	r24, 0x00	; 0
}
    116e:	26 96       	adiw	r28, 0x06	; 6
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1184:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1188:	93 e0       	ldi	r25, 0x03	; 3
    118a:	59 e2       	ldi	r21, 0x29	; 41
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	52 9f       	mul	r21, r18
    1192:	f0 01       	movw	r30, r0
    1194:	53 9f       	mul	r21, r19
    1196:	f0 0d       	add	r31, r0
    1198:	11 24       	eor	r1, r1
    119a:	ee 54       	subi	r30, 0x4E	; 78
    119c:	fc 4f       	sbci	r31, 0xFC	; 252
    119e:	40 81       	ld	r20, Z
    11a0:	41 11       	cpse	r20, r1
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <_Z16nextFullTxBufferv+0x38>
    11a4:	91 50       	subi	r25, 0x01	; 1
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <_Z16nextFullTxBufferv+0x2e>
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	78 f3       	brcs	.-34     	; 0x118c <_Z16nextFullTxBufferv+0x8>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	ed cf       	rjmp	.-38     	; 0x118c <_Z16nextFullTxBufferv+0x8>
    11b2:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	08 95       	ret
    11bc:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    11c0:	49 e2       	ldi	r20, 0x29	; 41
    11c2:	42 9f       	mul	r20, r18
    11c4:	c0 01       	movw	r24, r0
    11c6:	43 9f       	mul	r20, r19
    11c8:	90 0d       	add	r25, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	8e 54       	subi	r24, 0x4E	; 78
    11ce:	9c 4f       	sbci	r25, 0xFC	; 252
    11d0:	08 95       	ret

000011d2 <_Z17nextEmptyTxBufferv>:
    11d2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11d6:	93 e0       	ldi	r25, 0x03	; 3
    11d8:	59 e2       	ldi	r21, 0x29	; 41
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	52 9f       	mul	r21, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	53 9f       	mul	r21, r19
    11e4:	f0 0d       	add	r31, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	ee 54       	subi	r30, 0x4E	; 78
    11ea:	fc 4f       	sbci	r31, 0xFC	; 252
    11ec:	40 81       	ld	r20, Z
    11ee:	44 23       	and	r20, r20
    11f0:	61 f0       	breq	.+24     	; 0x120a <_Z17nextEmptyTxBufferv+0x38>
    11f2:	91 50       	subi	r25, 0x01	; 1
    11f4:	29 f0       	breq	.+10     	; 0x1200 <_Z17nextEmptyTxBufferv+0x2e>
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	78 f3       	brcs	.-34     	; 0x11da <_Z17nextEmptyTxBufferv+0x8>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	ed cf       	rjmp	.-38     	; 0x11da <_Z17nextEmptyTxBufferv+0x8>
    1200:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 95       	ret
    120a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    120e:	49 e2       	ldi	r20, 0x29	; 41
    1210:	42 9f       	mul	r20, r18
    1212:	c0 01       	movw	r24, r0
    1214:	43 9f       	mul	r20, r19
    1216:	90 0d       	add	r25, r0
    1218:	11 24       	eor	r1, r1
    121a:	8e 54       	subi	r24, 0x4E	; 78
    121c:	9c 4f       	sbci	r25, 0xFC	; 252
    121e:	08 95       	ret

00001220 <_Z17nextEmptyRxBufferv>:
    1220:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	9f e3       	ldi	r25, 0x3F	; 63
    122a:	89 9f       	mul	r24, r25
    122c:	f0 01       	movw	r30, r0
    122e:	11 24       	eor	r1, r1
    1230:	ec 5c       	subi	r30, 0xCC	; 204
    1232:	fc 4f       	sbci	r31, 0xFC	; 252
    1234:	41 81       	ldd	r20, Z+1	; 0x01
    1236:	52 81       	ldd	r21, Z+2	; 0x02
    1238:	45 2b       	or	r20, r21
    123a:	a9 f0       	breq	.+42     	; 0x1266 <_Z17nextEmptyRxBufferv+0x46>
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	08 f0       	brcs	.+2      	; 0x1244 <_Z17nextEmptyRxBufferv+0x24>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	9f e3       	ldi	r25, 0x3F	; 63
    124a:	89 9f       	mul	r24, r25
    124c:	f0 01       	movw	r30, r0
    124e:	11 24       	eor	r1, r1
    1250:	ec 5c       	subi	r30, 0xCC	; 204
    1252:	fc 4f       	sbci	r31, 0xFC	; 252
    1254:	41 81       	ldd	r20, Z+1	; 0x01
    1256:	52 81       	ldd	r21, Z+2	; 0x02
    1258:	45 2b       	or	r20, r21
    125a:	29 f0       	breq	.+10     	; 0x1266 <_Z17nextEmptyRxBufferv+0x46>
    125c:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret
    1266:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    126a:	4f e3       	ldi	r20, 0x3F	; 63
    126c:	42 9f       	mul	r20, r18
    126e:	c0 01       	movw	r24, r0
    1270:	43 9f       	mul	r20, r19
    1272:	90 0d       	add	r25, r0
    1274:	11 24       	eor	r1, r1
    1276:	8c 5c       	subi	r24, 0xCC	; 204
    1278:	9c 4f       	sbci	r25, 0xFC	; 252
    127a:	08 95       	ret

0000127c <_Z16nextFullRxBufferv>:
    127c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	9f e3       	ldi	r25, 0x3F	; 63
    1286:	89 9f       	mul	r24, r25
    1288:	f0 01       	movw	r30, r0
    128a:	11 24       	eor	r1, r1
    128c:	ec 5c       	subi	r30, 0xCC	; 204
    128e:	fc 4f       	sbci	r31, 0xFC	; 252
    1290:	41 81       	ldd	r20, Z+1	; 0x01
    1292:	52 81       	ldd	r21, Z+2	; 0x02
    1294:	45 2b       	or	r20, r21
    1296:	a9 f4       	brne	.+42     	; 0x12c2 <_Z16nextFullRxBufferv+0x46>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <_Z16nextFullRxBufferv+0x24>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	9f e3       	ldi	r25, 0x3F	; 63
    12a6:	89 9f       	mul	r24, r25
    12a8:	f0 01       	movw	r30, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	ec 5c       	subi	r30, 0xCC	; 204
    12ae:	fc 4f       	sbci	r31, 0xFC	; 252
    12b0:	41 81       	ldd	r20, Z+1	; 0x01
    12b2:	52 81       	ldd	r21, Z+2	; 0x02
    12b4:	45 2b       	or	r20, r21
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <_Z16nextFullRxBufferv+0x46>
    12b8:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 95       	ret
    12c2:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    12c6:	4f e3       	ldi	r20, 0x3F	; 63
    12c8:	42 9f       	mul	r20, r18
    12ca:	c0 01       	movw	r24, r0
    12cc:	43 9f       	mul	r20, r19
    12ce:	90 0d       	add	r25, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	8c 5c       	subi	r24, 0xCC	; 204
    12d4:	9c 4f       	sbci	r25, 0xFC	; 252
    12d6:	08 95       	ret

000012d8 <_Z19linkbusTxInProgressv>:
    12d8:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    12dc:	08 95       	ret

000012de <_Z16linkbus_start_txv>:
    12de:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	91 11       	cpse	r25, r1
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	91 11       	cpse	r25, r1
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <_Z16linkbus_start_txv+0x1e>
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <_ZL17linkbus_tx_active>
    12f2:	e1 ec       	ldi	r30, 0xC1	; 193
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	90 81       	ld	r25, Z
    12f8:	90 62       	ori	r25, 0x20	; 32
    12fa:	90 83       	st	Z, r25
    12fc:	08 95       	ret

000012fe <_Z14linkbus_end_txv>:
    12fe:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    1302:	88 23       	and	r24, r24
    1304:	39 f0       	breq	.+14     	; 0x1314 <_Z14linkbus_end_txv+0x16>
    1306:	e1 ec       	ldi	r30, 0xC1	; 193
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8f 7d       	andi	r24, 0xDF	; 223
    130e:	80 83       	st	Z, r24
    1310:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZL17linkbus_tx_active>
    1314:	08 95       	ret

00001316 <_Z12linkbus_initm>:
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	8e e7       	ldi	r24, 0x7E	; 126
    131c:	e4 e3       	ldi	r30, 0x34	; 52
    131e:	f3 e0       	ldi	r31, 0x03	; 3
    1320:	df 01       	movw	r26, r30
    1322:	1d 92       	st	X+, r1
    1324:	8a 95       	dec	r24
    1326:	e9 f7       	brne	.-6      	; 0x1322 <_Z12linkbus_initm+0xc>
    1328:	e2 eb       	ldi	r30, 0xB2	; 178
    132a:	f3 e0       	ldi	r31, 0x03	; 3
    132c:	10 82       	st	Z, r1
    132e:	11 a6       	std	Z+41, r1	; 0x29
    1330:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9tx_buffer+0x52>
    1334:	60 e4       	ldi	r22, 0x40	; 64
    1336:	72 e4       	ldi	r23, 0x42	; 66
    1338:	8f e0       	ldi	r24, 0x0F	; 15
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__udivmodsi4>
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	31 09       	sbc	r19, r1
    1344:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1348:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    134c:	88 e9       	ldi	r24, 0x98	; 152
    134e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1352:	8e e0       	ldi	r24, 0x0E	; 14
    1354:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1358:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    135c:	08 95       	ret

0000135e <_Z15linkbus_disablev>:
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    1364:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1368:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_Z14linkbus_end_txv>
    136c:	8e e7       	ldi	r24, 0x7E	; 126
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f3 e0       	ldi	r31, 0x03	; 3
    1372:	df 01       	movw	r26, r30
    1374:	1d 92       	st	X+, r1
    1376:	8a 95       	dec	r24
    1378:	e9 f7       	brne	.-6      	; 0x1374 <_Z15linkbus_disablev+0x16>
    137a:	e2 eb       	ldi	r30, 0xB2	; 178
    137c:	f3 e0       	ldi	r31, 0x03	; 3
    137e:	10 82       	st	Z, r1
    1380:	11 a6       	std	Z+41, r1	; 0x29
    1382:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9tx_buffer+0x52>
    1386:	08 95       	ret

00001388 <_Z17linkbus_send_textPc>:
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1394:	21 11       	cpse	r18, r1
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <_Z17linkbus_send_textPc+0x38>
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <_Z17linkbus_send_textPc+0x3c>
    139c:	8c 01       	movw	r16, r24
    139e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z17nextEmptyTxBufferv>
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	b9 f4       	brne	.+46     	; 0x13d4 <_Z17linkbus_send_textPc+0x4c>
    13a6:	c8 ec       	ldi	r28, 0xC8	; 200
    13a8:	d0 e0       	ldi	r29, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <_Z17linkbus_send_textPc+0x28>
    13ac:	20 97       	sbiw	r28, 0x00	; 0
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <_Z17linkbus_send_textPc+0x40>
    13b0:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    13b4:	99 23       	and	r25, r25
    13b6:	51 f0       	breq	.+20     	; 0x13cc <_Z17linkbus_send_textPc+0x44>
    13b8:	20 97       	sbiw	r28, 0x00	; 0
    13ba:	d1 f0       	breq	.+52     	; 0x13f0 <_Z17linkbus_send_textPc+0x68>
    13bc:	21 97       	sbiw	r28, 0x01	; 1
    13be:	f8 cf       	rjmp	.-16     	; 0x13b0 <_Z17linkbus_send_textPc+0x28>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	17 c0       	rjmp	.+46     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13cc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z17nextEmptyTxBufferv>
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f3       	breq	.-40     	; 0x13ac <_Z17linkbus_send_textPc+0x24>
    13d4:	1f 93       	push	r17
    13d6:	0f 93       	push	r16
    13d8:	9f 93       	push	r25
    13da:	8f 93       	push	r24
    13dc:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    13e0:	0e 94 6f 09 	call	0x12de	; 0x12de <_Z16linkbus_start_txv>
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	05 c0       	rjmp	.+10     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z17nextEmptyTxBufferv>
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	71 f7       	brne	.-36     	; 0x13d4 <_Z17linkbus_send_textPc+0x4c>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <_Z17lb_send_NewPromptv>:
    1404:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1408:	81 11       	cpse	r24, r1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <_Z17lb_send_NewPromptv+0x14>
    140c:	80 e2       	ldi	r24, 0x20	; 32
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    1414:	81 11       	cpse	r24, r1
    1416:	fa cf       	rjmp	.-12     	; 0x140c <_Z17lb_send_NewPromptv+0x8>
    1418:	08 95       	ret

0000141a <_Z15lb_send_NewLinev>:
    141a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    141e:	81 11       	cpse	r24, r1
    1420:	04 c0       	rjmp	.+8      	; 0x142a <_Z15lb_send_NewLinev+0x10>
    1422:	83 e2       	ldi	r24, 0x23	; 35
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    142a:	08 95       	ret

0000142c <_Z12lb_echo_charh>:
    142c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1430:	91 11       	cpse	r25, r1
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <_Z12lb_echo_charh+0x16>
    1434:	ee e2       	ldi	r30, 0x2E	; 46
    1436:	f4 e0       	ldi	r31, 0x04	; 4
    1438:	80 83       	st	Z, r24
    143a:	11 82       	std	Z+1, r1	; 0x01
    143c:	cf 01       	movw	r24, r30
    143e:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    1442:	08 95       	ret

00001444 <_Z14lb_send_stringPch>:
    1444:	cf 93       	push	r28
    1446:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    144a:	21 11       	cpse	r18, r1
    144c:	28 c0       	rjmp	.+80     	; 0x149e <_Z14lb_send_stringPch+0x5a>
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	41 f1       	breq	.+80     	; 0x14a2 <_Z14lb_send_stringPch+0x5e>
    1452:	fc 01       	movw	r30, r24
    1454:	20 81       	ld	r18, Z
    1456:	22 23       	and	r18, r18
    1458:	31 f1       	breq	.+76     	; 0x14a6 <_Z14lb_send_stringPch+0x62>
    145a:	01 90       	ld	r0, Z+
    145c:	00 20       	and	r0, r0
    145e:	e9 f7       	brne	.-6      	; 0x145a <_Z14lb_send_stringPch+0x16>
    1460:	31 97       	sbiw	r30, 0x01	; 1
    1462:	e8 1b       	sub	r30, r24
    1464:	f9 0b       	sbc	r31, r25
    1466:	ba 97       	sbiw	r30, 0x2a	; 42
    1468:	00 f5       	brcc	.+64     	; 0x14aa <_Z14lb_send_stringPch+0x66>
    146a:	c6 2f       	mov	r28, r22
    146c:	bc 01       	movw	r22, r24
    146e:	49 e2       	ldi	r20, 0x29	; 41
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	8e e2       	ldi	r24, 0x2E	; 46
    1474:	94 e0       	ldi	r25, 0x04	; 4
    1476:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <strncpy>
    147a:	cc 23       	and	r28, r28
    147c:	59 f0       	breq	.+22     	; 0x1494 <_Z14lb_send_stringPch+0x50>
    147e:	8e e2       	ldi	r24, 0x2E	; 46
    1480:	94 e0       	ldi	r25, 0x04	; 4
    1482:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    1486:	81 11       	cpse	r24, r1
    1488:	fa cf       	rjmp	.-12     	; 0x147e <_Z14lb_send_stringPch+0x3a>
    148a:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    148e:	81 11       	cpse	r24, r1
    1490:	fc cf       	rjmp	.-8      	; 0x148a <_Z14lb_send_stringPch+0x46>
    1492:	0c c0       	rjmp	.+24     	; 0x14ac <_Z14lb_send_stringPch+0x68>
    1494:	8e e2       	ldi	r24, 0x2E	; 46
    1496:	94 e0       	ldi	r25, 0x04	; 4
    1498:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <_Z14lb_send_stringPch+0x68>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <_Z14lb_send_stringPch+0x68>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <_Z14lb_send_stringPch+0x68>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_Z14lb_send_stringPch+0x68>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    14b0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	91 11       	cpse	r25, r1
    14b8:	80 e0       	ldi	r24, 0x00	; 0
}
    14ba:	08 95       	ret

000014bc <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	8b e0       	ldi	r24, 0x0B	; 11
    14e2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    14e6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	0e 94 92 06 	call	0xd24	; 0xd24 <_ZN8Goertzel9DataPointEi>
    14f4:	88 23       	and	r24, r24
    14f6:	29 f0       	breq	.+10     	; 0x1502 <__vector_21+0x46>
    14f8:	ea e7       	ldi	r30, 0x7A	; 122
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	80 83       	st	Z, r24
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	8b e0       	ldi	r24, 0x0B	; 11
    1506:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_18>:
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	1f 93       	push	r17
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	5f 93       	push	r21
    1540:	6f 93       	push	r22
    1542:	7f 93       	push	r23
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
    1548:	af 93       	push	r26
    154a:	bf 93       	push	r27
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
    1554:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1558:	c0 91 d9 04 	lds	r28, 0x04D9	; 0x8004d9 <_ZZ11__vector_18E4buff>
    155c:	d0 91 da 04 	lds	r29, 0x04DA	; 0x8004da <_ZZ11__vector_18E4buff+0x1>
    1560:	20 97       	sbiw	r28, 0x00	; 0
    1562:	51 f4       	brne	.+20     	; 0x1578 <__vector_18+0x4c>
    1564:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z17nextEmptyRxBufferv>
    1568:	ec 01       	movw	r28, r24
    156a:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <_ZZ11__vector_18E4buff+0x1>
    156e:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_ZZ11__vector_18E4buff>
    1572:	89 2b       	or	r24, r25
    1574:	09 f4       	brne	.+2      	; 0x1578 <__vector_18+0x4c>
    1576:	62 c1       	rjmp	.+708    	; 0x183c <__vector_18+0x310>
    1578:	81 2f       	mov	r24, r17
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 b9 30 	call	0x6172	; 0x6172 <toupper>
    1580:	9c 01       	movw	r18, r24
    1582:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_ZZ11__vector_18E11ignoreCount>
    1586:	88 23       	and	r24, r24
    1588:	21 f0       	breq	.+8      	; 0x1592 <__vector_18+0x66>
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZZ11__vector_18E11ignoreCount>
    1590:	55 c1       	rjmp	.+682    	; 0x183c <__vector_18+0x310>
    1592:	2b 31       	cpi	r18, 0x1B	; 27
    1594:	21 f4       	brne	.+8      	; 0x159e <__vector_18+0x72>
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZZ11__vector_18E11ignoreCount>
    159c:	4f c1       	rjmp	.+670    	; 0x183c <__vector_18+0x310>
    159e:	2d 30       	cpi	r18, 0x0D	; 13
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <__vector_18+0x78>
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <__vector_18+0xf6>
    15a4:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    15a8:	88 23       	and	r24, r24
    15aa:	31 f1       	breq	.+76     	; 0x15f8 <__vector_18+0xcc>
    15ac:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    15b0:	ee 23       	and	r30, r30
    15b2:	f9 f0       	breq	.+62     	; 0x15f2 <__vector_18+0xc6>
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	88 83       	st	Y, r24
    15b8:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    15bc:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    15c8:	88 23       	and	r24, r24
    15ca:	79 f0       	breq	.+30     	; 0x15ea <__vector_18+0xbe>
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    15d4:	54 e1       	ldi	r21, 0x14	; 20
    15d6:	58 9f       	mul	r21, r24
    15d8:	90 01       	movw	r18, r0
    15da:	59 9f       	mul	r21, r25
    15dc:	30 0d       	add	r19, r0
    15de:	11 24       	eor	r1, r1
    15e0:	c2 0f       	add	r28, r18
    15e2:	d3 1f       	adc	r29, r19
    15e4:	c4 0f       	add	r28, r20
    15e6:	d1 1d       	adc	r29, r1
    15e8:	1b 82       	std	Y+3, r1	; 0x03
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	e8 56       	subi	r30, 0x68	; 104
    15ee:	fb 4f       	sbci	r31, 0xFB	; 251
    15f0:	10 82       	st	Z, r1
    15f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__vector_18+0xd4>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f e7       	ldi	r25, 0x7F	; 127
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    1604:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E9field_len>
    1608:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    160c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1610:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E11field_index>
    1614:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <_ZZ11__vector_18E4buff+0x1>
    1618:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ11__vector_18E4buff>
    161c:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    1620:	0d c1       	rjmp	.+538    	; 0x183c <__vector_18+0x310>
    1622:	22 23       	and	r18, r18
    1624:	09 f4       	brne	.+2      	; 0x1628 <__vector_18+0xfc>
    1626:	0a c1       	rjmp	.+532    	; 0x183c <__vector_18+0x310>
    1628:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    162c:	4e 2f       	mov	r20, r30
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	da 01       	movw	r26, r20
    1632:	a8 56       	subi	r26, 0x68	; 104
    1634:	bb 4f       	sbci	r27, 0xFB	; 251
    1636:	2c 93       	st	X, r18
    1638:	ee 23       	and	r30, r30
    163a:	09 f4       	brne	.+2      	; 0x163e <__vector_18+0x112>
    163c:	d6 c0       	rjmp	.+428    	; 0x17ea <__vector_18+0x2be>
    163e:	2f 37       	cpi	r18, 0x7F	; 127
    1640:	09 f0       	breq	.+2      	; 0x1644 <__vector_18+0x118>
    1642:	5f c0       	rjmp	.+190    	; 0x1702 <__vector_18+0x1d6>
    1644:	e1 50       	subi	r30, 0x01	; 1
    1646:	e0 93 d7 04 	sts	0x04D7, r30	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    164a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    164e:	81 11       	cpse	r24, r1
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <__vector_18+0x14c>
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e8 56       	subi	r30, 0x68	; 104
    1656:	fb 4f       	sbci	r31, 0xFB	; 251
    1658:	40 81       	ld	r20, Z
    165a:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    165e:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1662:	84 1b       	sub	r24, r20
    1664:	91 09       	sbc	r25, r1
    1666:	6a e0       	ldi	r22, 0x0A	; 10
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    166e:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1672:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1676:	39 c0       	rjmp	.+114    	; 0x16ea <__vector_18+0x1be>
    1678:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    167c:	99 23       	and	r25, r25
    167e:	91 f0       	breq	.+36     	; 0x16a4 <__vector_18+0x178>
    1680:	4f ef       	ldi	r20, 0xFF	; 255
    1682:	49 0f       	add	r20, r25
    1684:	40 93 93 04 	sts	0x0493, r20	; 0x800493 <_ZZ11__vector_18E9field_len>
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	54 e1       	ldi	r21, 0x14	; 20
    168e:	58 9f       	mul	r21, r24
    1690:	b0 01       	movw	r22, r0
    1692:	59 9f       	mul	r21, r25
    1694:	70 0d       	add	r23, r0
    1696:	11 24       	eor	r1, r1
    1698:	c6 0f       	add	r28, r22
    169a:	d7 1f       	adc	r29, r23
    169c:	c4 0f       	add	r28, r20
    169e:	d1 1d       	adc	r29, r1
    16a0:	1b 82       	std	Y+3, r1	; 0x03
    16a2:	23 c0       	rjmp	.+70     	; 0x16ea <__vector_18+0x1be>
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	e8 56       	subi	r30, 0x68	; 104
    16a8:	fb 4f       	sbci	r31, 0xFB	; 251
    16aa:	90 81       	ld	r25, Z
    16ac:	90 32       	cpi	r25, 0x20	; 32
    16ae:	a1 f4       	brne	.+40     	; 0x16d8 <__vector_18+0x1ac>
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E11field_index>
    16b6:	de 01       	movw	r26, r28
    16b8:	94 e1       	ldi	r25, 0x14	; 20
    16ba:	89 9f       	mul	r24, r25
    16bc:	a0 0d       	add	r26, r0
    16be:	b1 1d       	adc	r27, r1
    16c0:	11 24       	eor	r1, r1
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	fd 01       	movw	r30, r26
    16c6:	01 90       	ld	r0, Z+
    16c8:	00 20       	and	r0, r0
    16ca:	e9 f7       	brne	.-6      	; 0x16c6 <__vector_18+0x19a>
    16cc:	31 97       	sbiw	r30, 0x01	; 1
    16ce:	ea 1b       	sub	r30, r26
    16d0:	fb 0b       	sbc	r31, r27
    16d2:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <_ZZ11__vector_18E9field_len>
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <__vector_18+0x1be>
    16d8:	94 e1       	ldi	r25, 0x14	; 20
    16da:	89 9f       	mul	r24, r25
    16dc:	c0 0d       	add	r28, r0
    16de:	d1 1d       	adc	r29, r1
    16e0:	11 24       	eor	r1, r1
    16e2:	1b 82       	std	Y+3, r1	; 0x03
    16e4:	81 50       	subi	r24, 0x01	; 1
    16e6:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E11field_index>
    16ea:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    16ee:	e8 2f       	mov	r30, r24
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	e8 56       	subi	r30, 0x68	; 104
    16f4:	fb 4f       	sbci	r31, 0xFB	; 251
    16f6:	10 82       	st	Z, r1
    16f8:	81 11       	cpse	r24, r1
    16fa:	93 c0       	rjmp	.+294    	; 0x1822 <__vector_18+0x2f6>
    16fc:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    1700:	90 c0       	rjmp	.+288    	; 0x1822 <__vector_18+0x2f6>
    1702:	20 32       	cpi	r18, 0x20	; 32
    1704:	79 f5       	brne	.+94     	; 0x1764 <__vector_18+0x238>
    1706:	fa 01       	movw	r30, r20
    1708:	e9 56       	subi	r30, 0x69	; 105
    170a:	fb 4f       	sbci	r31, 0xFB	; 251
    170c:	80 81       	ld	r24, Z
    170e:	80 32       	cpi	r24, 0x20	; 32
    1710:	09 f4       	brne	.+2      	; 0x1714 <__vector_18+0x1e8>
    1712:	94 c0       	rjmp	.+296    	; 0x183c <__vector_18+0x310>
    1714:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    1718:	68 2f       	mov	r22, r24
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	fb 01       	movw	r30, r22
    171e:	31 96       	adiw	r30, 0x01	; 1
    1720:	33 97       	sbiw	r30, 0x03	; 3
    1722:	0c f0       	brlt	.+2      	; 0x1726 <__vector_18+0x1fa>
    1724:	8b c0       	rjmp	.+278    	; 0x183c <__vector_18+0x310>
    1726:	88 23       	and	r24, r24
    1728:	79 f0       	breq	.+30     	; 0x1748 <__vector_18+0x21c>
    172a:	61 50       	subi	r22, 0x01	; 1
    172c:	71 09       	sbc	r23, r1
    172e:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    1732:	a4 e1       	ldi	r26, 0x14	; 20
    1734:	a6 9f       	mul	r26, r22
    1736:	f0 01       	movw	r30, r0
    1738:	a7 9f       	mul	r26, r23
    173a:	f0 0d       	add	r31, r0
    173c:	11 24       	eor	r1, r1
    173e:	ce 0f       	add	r28, r30
    1740:	df 1f       	adc	r29, r31
    1742:	c9 0f       	add	r28, r25
    1744:	d1 1d       	adc	r29, r1
    1746:	1b 82       	std	Y+3, r1	; 0x03
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E11field_index>
    174e:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E9field_len>
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	4e 33       	cpi	r20, 0x3E	; 62
    1758:	51 05       	cpc	r21, r1
    175a:	0c f0       	brlt	.+2      	; 0x175e <__vector_18+0x232>
    175c:	4e e3       	ldi	r20, 0x3E	; 62
    175e:	40 93 d7 04 	sts	0x04D7, r20	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    1762:	5f c0       	rjmp	.+190    	; 0x1822 <__vector_18+0x2f6>
    1764:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    1768:	84 31       	cpi	r24, 0x14	; 20
    176a:	08 f0       	brcs	.+2      	; 0x176e <__vector_18+0x242>
    176c:	67 c0       	rjmp	.+206    	; 0x183c <__vector_18+0x310>
    176e:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    1772:	41 11       	cpse	r20, r1
    1774:	19 c0       	rjmp	.+50     	; 0x17a8 <__vector_18+0x27c>
    1776:	40 91 95 04 	lds	r20, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    177a:	50 91 96 04 	lds	r21, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    177e:	ba 01       	movw	r22, r20
    1780:	66 0f       	add	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	44 0f       	add	r20, r20
    1786:	55 1f       	adc	r21, r21
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	44 0f       	add	r20, r20
    178e:	55 1f       	adc	r21, r21
    1790:	46 0f       	add	r20, r22
    1792:	57 1f       	adc	r21, r23
    1794:	42 0f       	add	r20, r18
    1796:	51 1d       	adc	r21, r1
    1798:	50 93 96 04 	sts	0x0496, r21	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    179c:	40 93 95 04 	sts	0x0495, r20	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ11__vector_18E9field_len>
    17a6:	16 c0       	rjmp	.+44     	; 0x17d4 <__vector_18+0x2a8>
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	41 50       	subi	r20, 0x01	; 1
    17ac:	51 09       	sbc	r21, r1
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	98 0f       	add	r25, r24
    17b2:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <_ZZ11__vector_18E9field_len>
    17b6:	e4 e1       	ldi	r30, 0x14	; 20
    17b8:	e4 9f       	mul	r30, r20
    17ba:	b0 01       	movw	r22, r0
    17bc:	e5 9f       	mul	r30, r21
    17be:	70 0d       	add	r23, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	c6 0f       	add	r28, r22
    17c4:	d7 1f       	adc	r29, r23
    17c6:	fe 01       	movw	r30, r28
    17c8:	e8 0f       	add	r30, r24
    17ca:	f1 1d       	adc	r31, r1
    17cc:	23 83       	std	Z+3, r18	; 0x03
    17ce:	c9 0f       	add	r28, r25
    17d0:	d1 1d       	adc	r29, r1
    17d2:	1b 82       	std	Y+3, r1	; 0x03
    17d4:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	8e 33       	cpi	r24, 0x3E	; 62
    17de:	91 05       	cpc	r25, r1
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <__vector_18+0x2b8>
    17e2:	8e e3       	ldi	r24, 0x3E	; 62
    17e4:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    17e8:	1c c0       	rjmp	.+56     	; 0x1822 <__vector_18+0x2f6>
    17ea:	2f 37       	cpi	r18, 0x7F	; 127
    17ec:	41 f4       	brne	.+16     	; 0x17fe <__vector_18+0x2d2>
    17ee:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    17f2:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    17f6:	18 16       	cp	r1, r24
    17f8:	19 06       	cpc	r1, r25
    17fa:	bc f0       	brlt	.+46     	; 0x182a <__vector_18+0x2fe>
    17fc:	1b c0       	rjmp	.+54     	; 0x1834 <__vector_18+0x308>
    17fe:	20 32       	cpi	r18, 0x20	; 32
    1800:	e9 f0       	breq	.+58     	; 0x183c <__vector_18+0x310>
    1802:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E11field_index>
    1806:	c9 01       	movw	r24, r18
    1808:	99 27       	eor	r25, r25
    180a:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    180e:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1812:	1b 82       	std	Y+3, r1	; 0x03
    1814:	1f 8a       	std	Y+23, r1	; 0x17
    1816:	1b a6       	std	Y+43, r1	; 0x2b
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    181e:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    1822:	82 2f       	mov	r24, r18
    1824:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12lb_echo_charh>
    1828:	09 c0       	rjmp	.+18     	; 0x183c <__vector_18+0x310>
    182a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    182e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1832:	f7 cf       	rjmp	.-18     	; 0x1822 <__vector_18+0x2f6>
    1834:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1838:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	1f 91       	pop	r17
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_19>:
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	2f 93       	push	r18
    1870:	3f 93       	push	r19
    1872:	4f 93       	push	r20
    1874:	5f 93       	push	r21
    1876:	6f 93       	push	r22
    1878:	7f 93       	push	r23
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	af 93       	push	r26
    1880:	bf 93       	push	r27
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
    1886:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_19E4buff>
    188a:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    188e:	89 2b       	or	r24, r25
    1890:	31 f4       	brne	.+12     	; 0x189e <__vector_19+0x3a>
    1892:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z16nextFullTxBufferv>
    1896:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    189a:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_19E4buff>
    189e:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <_ZZ11__vector_19E4buff>
    18a2:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    18a6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ11__vector_19E9charIndex>
    18aa:	df 01       	movw	r26, r30
    18ac:	a8 0f       	add	r26, r24
    18ae:	b1 1d       	adc	r27, r1
    18b0:	9c 91       	ld	r25, X
    18b2:	99 23       	and	r25, r25
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <__vector_19+0x5e>
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ11__vector_19E9charIndex>
    18bc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <__vector_19+0x78>
    18c2:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZZ11__vector_19E9charIndex>
    18c6:	10 82       	st	Z, r1
    18c8:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z16nextFullTxBufferv>
    18cc:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    18d0:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_19E4buff>
    18d4:	89 2b       	or	r24, r25
    18d6:	11 f4       	brne	.+4      	; 0x18dc <__vector_19+0x78>
    18d8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_Z14linkbus_end_txv>
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	bf 91       	pop	r27
    18e2:	af 91       	pop	r26
    18e4:	9f 91       	pop	r25
    18e6:	8f 91       	pop	r24
    18e8:	7f 91       	pop	r23
    18ea:	6f 91       	pop	r22
    18ec:	5f 91       	pop	r21
    18ee:	4f 91       	pop	r20
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_1>:
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	8f 92       	push	r8
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	1f 92       	push	r1
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    1942:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    1946:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    194a:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	a1 1d       	adc	r26, r1
    1952:	b1 1d       	adc	r27, r1
    1954:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_current_epoch>
    1958:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_current_epoch+0x1>
    195c:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <g_current_epoch+0x2>
    1960:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <g_current_epoch+0x3>
    1964:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <g_seconds_since_powerup>
    1968:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <g_seconds_since_powerup+0x1>
    196c:	a0 91 96 05 	lds	r26, 0x0596	; 0x800596 <g_seconds_since_powerup+0x2>
    1970:	b0 91 97 05 	lds	r27, 0x0597	; 0x800597 <g_seconds_since_powerup+0x3>
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	a1 1d       	adc	r26, r1
    1978:	b1 1d       	adc	r27, r1
    197a:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <g_seconds_since_powerup>
    197e:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <g_seconds_since_powerup+0x1>
    1982:	a0 93 96 05 	sts	0x0596, r26	; 0x800596 <g_seconds_since_powerup+0x2>
    1986:	b0 93 97 05 	sts	0x0597, r27	; 0x800597 <g_seconds_since_powerup+0x3>
    198a:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_temperature_check_countdown>
    198e:	88 23       	and	r24, r24
    1990:	29 f0       	breq	.+10     	; 0x199c <__vector_1+0x9e>
    1992:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_temperature_check_countdown>
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_temperature_check_countdown>
    199c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_voltage_check_countdown>
    19a0:	88 23       	and	r24, r24
    19a2:	29 f0       	breq	.+10     	; 0x19ae <__vector_1+0xb0>
    19a4:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_voltage_check_countdown>
    19a8:	81 50       	subi	r24, 0x01	; 1
    19aa:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_voltage_check_countdown>
    19ae:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    19b2:	88 23       	and	r24, r24
    19b4:	91 f1       	breq	.+100    	; 0x1a1a <__vector_1+0x11c>
    19b6:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_use_rtc_for_startstop>
    19ba:	88 23       	and	r24, r24
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__vector_1+0xc2>
    19be:	a1 c3       	rjmp	.+1858   	; 0x2102 <__vector_1+0x804>
    19c0:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    19c4:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    19c8:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    19cc:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    19d0:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    19d4:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    19d8:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    19dc:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    19e0:	48 17       	cp	r20, r24
    19e2:	59 07       	cpc	r21, r25
    19e4:	6a 07       	cpc	r22, r26
    19e6:	7b 07       	cpc	r23, r27
    19e8:	08 f4       	brcc	.+2      	; 0x19ec <__vector_1+0xee>
    19ea:	8b c3       	rjmp	.+1814   	; 0x2102 <__vector_1+0x804>
    19ec:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    19f0:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    19f4:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    19f8:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    19fc:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    1a00:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    1a04:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    1a08:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    1a0c:	48 17       	cp	r20, r24
    1a0e:	59 07       	cpc	r21, r25
    1a10:	6a 07       	cpc	r22, r26
    1a12:	7b 07       	cpc	r23, r27
    1a14:	08 f4       	brcc	.+2      	; 0x1a18 <__vector_1+0x11a>
    1a16:	f1 c2       	rjmp	.+1506   	; 0x1ffa <__vector_1+0x6fc>
    1a18:	74 c3       	rjmp	.+1768   	; 0x2102 <__vector_1+0x804>
    1a1a:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_use_rtc_for_startstop>
    1a1e:	88 23       	and	r24, r24
    1a20:	d1 f0       	breq	.+52     	; 0x1a56 <__vector_1+0x158>
    1a22:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    1a26:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    1a2a:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    1a2e:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    1a32:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    1a36:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    1a3a:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    1a3e:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    1a42:	48 17       	cp	r20, r24
    1a44:	59 07       	cpc	r21, r25
    1a46:	6a 07       	cpc	r22, r26
    1a48:	7b 07       	cpc	r23, r27
    1a4a:	28 f0       	brcs	.+10     	; 0x1a56 <__vector_1+0x158>
    1a4c:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
    1a56:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	52 c3       	rjmp	.+1700   	; 0x2102 <__vector_1+0x804>
    1a5e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	88 e2       	ldi	r24, 0x28	; 40
    1a66:	95 e0       	ldi	r25, 0x05	; 5
    1a68:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_Z26timeRequiredToSendStrAtWPMPcj>
    1a6c:	8c 50       	subi	r24, 0x0C	; 12
    1a6e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a70:	9c 01       	movw	r18, r24
    1a72:	36 95       	lsr	r19
    1a74:	27 95       	ror	r18
    1a76:	36 95       	lsr	r19
    1a78:	27 95       	ror	r18
    1a7a:	36 95       	lsr	r19
    1a7c:	27 95       	ror	r18
    1a7e:	a5 ec       	ldi	r26, 0xC5	; 197
    1a80:	b0 e2       	ldi	r27, 0x20	; 32
    1a82:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    1a86:	8c 01       	movw	r16, r24
    1a88:	12 95       	swap	r17
    1a8a:	02 95       	swap	r16
    1a8c:	0f 70       	andi	r16, 0x0F	; 15
    1a8e:	01 27       	eor	r16, r17
    1a90:	1f 70       	andi	r17, 0x0F	; 15
    1a92:	01 27       	eor	r16, r17
    1a94:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    1a98:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1a9c:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1aa0:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	8a 2b       	or	r24, r26
    1aa8:	8b 2b       	or	r24, r27
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <__vector_1+0x1b0>
    1aac:	d5 c2       	rjmp	.+1450   	; 0x2058 <__vector_1+0x75a>
    1aae:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <__vector_1+0x1ba>
    1ab6:	c3 c2       	rjmp	.+1414   	; 0x203e <__vector_1+0x740>
    1ab8:	cf c2       	rjmp	.+1438   	; 0x2058 <__vector_1+0x75a>
    1aba:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    1abe:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_fox_id_offset>
    1ac2:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	40 91 5c 05 	lds	r20, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1acc:	50 91 5d 05 	lds	r21, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1ad0:	82 1b       	sub	r24, r18
    1ad2:	93 0b       	sbc	r25, r19
    1ad4:	18 16       	cp	r1, r24
    1ad6:	19 06       	cpc	r1, r25
    1ad8:	14 f0       	brlt	.+4      	; 0x1ade <__vector_1+0x1e0>
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	84 9f       	mul	r24, r20
    1ae0:	90 01       	movw	r18, r0
    1ae2:	85 9f       	mul	r24, r21
    1ae4:	30 0d       	add	r19, r0
    1ae6:	94 9f       	mul	r25, r20
    1ae8:	30 0d       	add	r19, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	c9 01       	movw	r24, r18
    1aee:	80 1b       	sub	r24, r16
    1af0:	91 0b       	sbc	r25, r17
    1af2:	09 2e       	mov	r0, r25
    1af4:	00 0c       	add	r0, r0
    1af6:	aa 0b       	sbc	r26, r26
    1af8:	bb 0b       	sbc	r27, r27
    1afa:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1afe:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1b02:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1b06:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1b0a:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    1b0e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	ee c2       	rjmp	.+1500   	; 0x20f2 <__vector_1+0x7f4>
    1b16:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1b1a:	21 30       	cpi	r18, 0x01	; 1
    1b1c:	31 f5       	brne	.+76     	; 0x1b6a <__vector_1+0x26c>
    1b1e:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1b22:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1b26:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1b2a:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1b2e:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1b32:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1b36:	09 2e       	mov	r0, r25
    1b38:	00 0c       	add	r0, r0
    1b3a:	aa 0b       	sbc	r26, r26
    1b3c:	bb 0b       	sbc	r27, r27
    1b3e:	84 0f       	add	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	a6 1f       	adc	r26, r22
    1b44:	b7 1f       	adc	r27, r23
    1b46:	01 2e       	mov	r0, r17
    1b48:	00 0c       	add	r0, r0
    1b4a:	22 0b       	sbc	r18, r18
    1b4c:	33 0b       	sbc	r19, r19
    1b4e:	80 1b       	sub	r24, r16
    1b50:	91 0b       	sbc	r25, r17
    1b52:	a2 0b       	sbc	r26, r18
    1b54:	b3 0b       	sbc	r27, r19
    1b56:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1b5a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1b5e:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1b62:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1b66:	11 e0       	ldi	r17, 0x01	; 1
    1b68:	c4 c2       	rjmp	.+1416   	; 0x20f2 <__vector_1+0x7f4>
    1b6a:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1b6e:	23 30       	cpi	r18, 0x03	; 3
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <__vector_1+0x276>
    1b72:	e2 c0       	rjmp	.+452    	; 0x1d38 <__vector_1+0x43a>
    1b74:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <g_fox>
    1b78:	a0 91 56 05 	lds	r26, 0x0556	; 0x800556 <g_fox_id_offset>
    1b7c:	b0 91 57 05 	lds	r27, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1b80:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <g_fox_counter>
    1b84:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	2a 1b       	sub	r18, r26
    1b8c:	3b 0b       	sbc	r19, r27
    1b8e:	2e 17       	cp	r18, r30
    1b90:	3f 07       	cpc	r19, r31
    1b92:	41 f0       	breq	.+16     	; 0x1ba4 <__vector_1+0x2a6>
    1b94:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <g_number_of_foxes>
    1b98:	30 91 59 05 	lds	r19, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    1b9c:	21 30       	cpi	r18, 0x01	; 1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <__vector_1+0x2a6>
    1ba2:	66 c0       	rjmp	.+204    	; 0x1c70 <__vector_1+0x372>
    1ba4:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1ba8:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1bac:	60 91 5c 05 	lds	r22, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1bb0:	70 91 5d 05 	lds	r23, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1bb4:	ca 01       	movw	r24, r20
    1bb6:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    1bba:	a9 01       	movw	r20, r18
    1bbc:	48 1b       	sub	r20, r24
    1bbe:	59 0b       	sbc	r21, r25
    1bc0:	ca 01       	movw	r24, r20
    1bc2:	04 17       	cp	r16, r20
    1bc4:	15 07       	cpc	r17, r21
    1bc6:	14 f5       	brge	.+68     	; 0x1c0c <__vector_1+0x30e>
    1bc8:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1bcc:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1bd0:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1bd4:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1bd8:	09 2e       	mov	r0, r25
    1bda:	00 0c       	add	r0, r0
    1bdc:	aa 0b       	sbc	r26, r26
    1bde:	bb 0b       	sbc	r27, r27
    1be0:	84 0f       	add	r24, r20
    1be2:	95 1f       	adc	r25, r21
    1be4:	a6 1f       	adc	r26, r22
    1be6:	b7 1f       	adc	r27, r23
    1be8:	01 2e       	mov	r0, r17
    1bea:	00 0c       	add	r0, r0
    1bec:	22 0b       	sbc	r18, r18
    1bee:	33 0b       	sbc	r19, r19
    1bf0:	80 1b       	sub	r24, r16
    1bf2:	91 0b       	sbc	r25, r17
    1bf4:	a2 0b       	sbc	r26, r18
    1bf6:	b3 0b       	sbc	r27, r19
    1bf8:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1bfc:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1c00:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1c04:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1c08:	11 e0       	ldi	r17, 0x01	; 1
    1c0a:	73 c2       	rjmp	.+1254   	; 0x20f2 <__vector_1+0x7f4>
    1c0c:	40 17       	cp	r20, r16
    1c0e:	51 07       	cpc	r21, r17
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <__vector_1+0x316>
    1c12:	63 c2       	rjmp	.+1222   	; 0x20da <__vector_1+0x7dc>
    1c14:	c0 90 98 05 	lds	r12, 0x0598	; 0x800598 <g_seconds_since_sync>
    1c18:	d0 90 99 05 	lds	r13, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1c1c:	e0 90 9a 05 	lds	r14, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1c20:	f0 90 9b 05 	lds	r15, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1c24:	40 91 5a 05 	lds	r20, 0x055A	; 0x80055a <g_cycle_period_seconds>
    1c28:	50 91 5b 05 	lds	r21, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    1c2c:	09 2e       	mov	r0, r25
    1c2e:	00 0c       	add	r0, r0
    1c30:	aa 0b       	sbc	r26, r26
    1c32:	bb 0b       	sbc	r27, r27
    1c34:	8c 0d       	add	r24, r12
    1c36:	9d 1d       	adc	r25, r13
    1c38:	ae 1d       	adc	r26, r14
    1c3a:	bf 1d       	adc	r27, r15
    1c3c:	05 2e       	mov	r0, r21
    1c3e:	00 0c       	add	r0, r0
    1c40:	66 0b       	sbc	r22, r22
    1c42:	77 0b       	sbc	r23, r23
    1c44:	84 0f       	add	r24, r20
    1c46:	95 1f       	adc	r25, r21
    1c48:	a6 1f       	adc	r26, r22
    1c4a:	b7 1f       	adc	r27, r23
    1c4c:	01 2e       	mov	r0, r17
    1c4e:	00 0c       	add	r0, r0
    1c50:	22 0b       	sbc	r18, r18
    1c52:	33 0b       	sbc	r19, r19
    1c54:	80 1b       	sub	r24, r16
    1c56:	91 0b       	sbc	r25, r17
    1c58:	a2 0b       	sbc	r26, r18
    1c5a:	b3 0b       	sbc	r27, r19
    1c5c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1c60:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1c64:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1c68:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1c6c:	11 e0       	ldi	r17, 0x01	; 1
    1c6e:	41 c2       	rjmp	.+1154   	; 0x20f2 <__vector_1+0x7f4>
    1c70:	80 90 98 05 	lds	r8, 0x0598	; 0x800598 <g_seconds_since_sync>
    1c74:	90 90 99 05 	lds	r9, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1c78:	a0 90 9a 05 	lds	r10, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1c7c:	b0 90 9b 05 	lds	r11, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1c80:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <g_fox>
    1c84:	e0 90 56 05 	lds	r14, 0x0556	; 0x800556 <g_fox_id_offset>
    1c88:	f0 90 57 05 	lds	r15, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1c8c:	a0 91 5c 05 	lds	r26, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1c90:	b0 91 5d 05 	lds	r27, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	ee 19       	sub	r30, r14
    1c98:	ff 09       	sbc	r31, r15
    1c9a:	ea 9f       	mul	r30, r26
    1c9c:	60 01       	movw	r12, r0
    1c9e:	eb 9f       	mul	r30, r27
    1ca0:	d0 0c       	add	r13, r0
    1ca2:	fa 9f       	mul	r31, r26
    1ca4:	d0 0c       	add	r13, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	0d 2c       	mov	r0, r13
    1caa:	00 0c       	add	r0, r0
    1cac:	ee 08       	sbc	r14, r14
    1cae:	ff 08       	sbc	r15, r15
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	77 0f       	add	r23, r23
    1cb4:	aa 0b       	sbc	r26, r26
    1cb6:	bb 0b       	sbc	r27, r27
    1cb8:	a5 01       	movw	r20, r10
    1cba:	94 01       	movw	r18, r8
    1cbc:	28 1b       	sub	r18, r24
    1cbe:	39 0b       	sbc	r19, r25
    1cc0:	4a 0b       	sbc	r20, r26
    1cc2:	5b 0b       	sbc	r21, r27
    1cc4:	da 01       	movw	r26, r20
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	8c 0d       	add	r24, r12
    1cca:	9d 1d       	adc	r25, r13
    1ccc:	ae 1d       	adc	r26, r14
    1cce:	bf 1d       	adc	r27, r15
    1cd0:	01 2e       	mov	r0, r17
    1cd2:	00 0c       	add	r0, r0
    1cd4:	22 0b       	sbc	r18, r18
    1cd6:	33 0b       	sbc	r19, r19
    1cd8:	80 1b       	sub	r24, r16
    1cda:	91 0b       	sbc	r25, r17
    1cdc:	a2 0b       	sbc	r26, r18
    1cde:	b3 0b       	sbc	r27, r19
    1ce0:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1ce4:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1ce8:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1cec:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1cf0:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1cf4:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1cf8:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1cfc:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1d00:	84 17       	cp	r24, r20
    1d02:	95 07       	cpc	r25, r21
    1d04:	a6 07       	cpc	r26, r22
    1d06:	b7 07       	cpc	r27, r23
    1d08:	0c f0       	brlt	.+2      	; 0x1d0c <__vector_1+0x40e>
    1d0a:	f0 c1       	rjmp	.+992    	; 0x20ec <__vector_1+0x7ee>
    1d0c:	40 91 54 05 	lds	r20, 0x0554	; 0x800554 <g_id_interval_seconds>
    1d10:	50 91 55 05 	lds	r21, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    1d14:	05 2e       	mov	r0, r21
    1d16:	00 0c       	add	r0, r0
    1d18:	66 0b       	sbc	r22, r22
    1d1a:	77 0b       	sbc	r23, r23
    1d1c:	84 0f       	add	r24, r20
    1d1e:	95 1f       	adc	r25, r21
    1d20:	a6 1f       	adc	r26, r22
    1d22:	b7 1f       	adc	r27, r23
    1d24:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1d28:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1d2c:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1d30:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1d34:	10 e0       	ldi	r17, 0x00	; 0
    1d36:	dd c1       	rjmp	.+954    	; 0x20f2 <__vector_1+0x7f4>
    1d38:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    1d3c:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1d40:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1d44:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1d48:	40 91 85 04 	lds	r20, 0x0485	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1d4c:	50 91 86 04 	lds	r21, 0x0486	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1d50:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1d54:	70 91 88 04 	lds	r23, 0x0488	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1d58:	48 17       	cp	r20, r24
    1d5a:	59 07       	cpc	r21, r25
    1d5c:	6a 07       	cpc	r22, r26
    1d5e:	7b 07       	cpc	r23, r27
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <__vector_1+0x466>
    1d62:	c6 c1       	rjmp	.+908    	; 0x20f0 <__vector_1+0x7f2>
    1d64:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_id_interval_seconds>
    1d68:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    1d6c:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1d70:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1d74:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1d78:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1d7c:	09 2e       	mov	r0, r25
    1d7e:	00 0c       	add	r0, r0
    1d80:	aa 0b       	sbc	r26, r26
    1d82:	bb 0b       	sbc	r27, r27
    1d84:	84 0f       	add	r24, r20
    1d86:	95 1f       	adc	r25, r21
    1d88:	a6 1f       	adc	r26, r22
    1d8a:	b7 1f       	adc	r27, r23
    1d8c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1d90:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1d94:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1d98:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
    1d9e:	9e c1       	rjmp	.+828    	; 0x20dc <__vector_1+0x7de>
    1da0:	01 e0       	ldi	r16, 0x01	; 1
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <__vector_1+0x4a8>
    1da4:	00 e0       	ldi	r16, 0x00	; 0
    1da6:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <g_seconds_since_sync>
    1daa:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1dae:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1db2:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1db6:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1dba:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1dbe:	03 2e       	mov	r0, r19
    1dc0:	00 0c       	add	r0, r0
    1dc2:	44 0b       	sbc	r20, r20
    1dc4:	55 0b       	sbc	r21, r21
    1dc6:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__divmodsi4>
    1dca:	67 2b       	or	r22, r23
    1dcc:	68 2b       	or	r22, r24
    1dce:	69 2b       	or	r22, r25
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <__vector_1+0x4d6>
    1dd2:	62 c1       	rjmp	.+708    	; 0x2098 <__vector_1+0x79a>
    1dd4:	1d c0       	rjmp	.+58     	; 0x1e10 <__vector_1+0x512>
    1dd6:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1dda:	88 23       	and	r24, r24
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <__vector_1+0x4e2>
    1dde:	6a c1       	rjmp	.+724    	; 0x20b4 <__vector_1+0x7b6>
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ10__vector_1E23fox_transition_occurred>
    1de6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <g_fox_counter>
    1dea:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1dee:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    1df2:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    1df6:	82 17       	cp	r24, r18
    1df8:	93 07       	cpc	r25, r19
    1dfa:	34 f4       	brge	.+12     	; 0x1e08 <__vector_1+0x50a>
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    1e04:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
    1e08:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    1e0c:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    1e10:	00 23       	and	r16, r16
    1e12:	11 f1       	breq	.+68     	; 0x1e58 <__vector_1+0x55a>
    1e14:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	82 e8       	ldi	r24, 0x82	; 130
    1e1c:	9b e1       	ldi	r25, 0x1B	; 27
    1e1e:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    1e22:	cb 01       	movw	r24, r22
    1e24:	6a e0       	ldi	r22, 0x0A	; 10
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	70 93 91 05 	sts	0x0591, r23	; 0x800591 <g_code_throttle+0x1>
    1e34:	60 93 90 05 	sts	0x0590, r22	; 0x800590 <g_code_throttle>
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	be 01       	movw	r22, r28
    1e40:	6f 5f       	subi	r22, 0xFF	; 255
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	88 e2       	ldi	r24, 0x28	; 40
    1e46:	95 e0       	ldi	r25, 0x05	; 5
    1e48:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
    1e4c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_callsign_sent>
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_on_the_air>
    1e56:	b2 c0       	rjmp	.+356    	; 0x1fbc <__vector_1+0x6be>
    1e58:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ10__vector_1E23fox_transition_occurred>
    1e5c:	88 23       	and	r24, r24
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <__vector_1+0x56a>
    1e60:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_callsign_sent>
    1e64:	81 11       	cpse	r24, r1
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <__vector_1+0x570>
    1e68:	11 23       	and	r17, r17
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <__vector_1+0x570>
    1e6c:	a7 c0       	rjmp	.+334    	; 0x1fbc <__vector_1+0x6be>
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	8d e0       	ldi	r24, 0x0D	; 13
    1e72:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    1e76:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_ZZ10__vector_1E23fox_transition_occurred>
    1e7a:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    1e7e:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    1e82:	02 97       	sbiw	r24, 0x02	; 2
    1e84:	0c f4       	brge	.+2      	; 0x1e88 <__vector_1+0x58a>
    1e86:	23 c1       	rjmp	.+582    	; 0x20ce <__vector_1+0x7d0>
    1e88:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <g_fox>
    1e8c:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <g_fox_counter>
    1e90:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1e94:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_fox_id_offset>
    1e98:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	84 0f       	add	r24, r20
    1ea0:	95 1f       	adc	r25, r21
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <__vector_1+0x5ac>
    1ea8:	0f c1       	rjmp	.+542    	; 0x20c8 <__vector_1+0x7ca>
    1eaa:	11 c1       	rjmp	.+546    	; 0x20ce <__vector_1+0x7d0>
    1eac:	40 91 41 05 	lds	r20, 0x0541	; 0x800541 <g_voltage>
    1eb0:	50 91 42 05 	lds	r21, 0x0542	; 0x800542 <g_voltage+0x1>
    1eb4:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_temperature>
    1eb8:	28 2f       	mov	r18, r24
    1eba:	08 2e       	mov	r0, r24
    1ebc:	00 0c       	add	r0, r0
    1ebe:	33 0b       	sbc	r19, r19
    1ec0:	3f 93       	push	r19
    1ec2:	8f 93       	push	r24
    1ec4:	fa 01       	movw	r30, r20
    1ec6:	f6 95       	lsr	r31
    1ec8:	e7 95       	ror	r30
    1eca:	f6 95       	lsr	r31
    1ecc:	e7 95       	ror	r30
    1ece:	9f 01       	movw	r18, r30
    1ed0:	ab e7       	ldi	r26, 0x7B	; 123
    1ed2:	b4 e1       	ldi	r27, 0x14	; 20
    1ed4:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    1ed8:	96 95       	lsr	r25
    1eda:	87 95       	ror	r24
    1edc:	64 e6       	ldi	r22, 0x64	; 100
    1ede:	68 9f       	mul	r22, r24
    1ee0:	90 01       	movw	r18, r0
    1ee2:	69 9f       	mul	r22, r25
    1ee4:	30 0d       	add	r19, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	ca 01       	movw	r24, r20
    1eea:	82 1b       	sub	r24, r18
    1eec:	93 0b       	sbc	r25, r19
    1eee:	9c 01       	movw	r18, r24
    1ef0:	2b 5f       	subi	r18, 0xFB	; 251
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	ad ec       	ldi	r26, 0xCD	; 205
    1ef6:	bc ec       	ldi	r27, 0xCC	; 204
    1ef8:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    1efc:	96 95       	lsr	r25
    1efe:	87 95       	ror	r24
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	96 95       	lsr	r25
    1f06:	87 95       	ror	r24
    1f08:	9f 93       	push	r25
    1f0a:	8f 93       	push	r24
    1f0c:	9f 01       	movw	r18, r30
    1f0e:	ab e7       	ldi	r26, 0x7B	; 123
    1f10:	b4 e1       	ldi	r27, 0x14	; 20
    1f12:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    1f16:	96 95       	lsr	r25
    1f18:	87 95       	ror	r24
    1f1a:	9f 93       	push	r25
    1f1c:	8f 93       	push	r24
    1f1e:	85 e2       	ldi	r24, 0x25	; 37
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	9f 93       	push	r25
    1f24:	8f 93       	push	r24
    1f26:	8b ed       	ldi	r24, 0xDB	; 219
    1f28:	94 e0       	ldi	r25, 0x04	; 4
    1f2a:	9f 93       	push	r25
    1f2c:	8f 93       	push	r24
    1f2e:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    1f32:	6b ed       	ldi	r22, 0xDB	; 219
    1f34:	74 e0       	ldi	r23, 0x04	; 4
    1f36:	83 e1       	ldi	r24, 0x13	; 19
    1f38:	95 e0       	ldi	r25, 0x05	; 5
    1f3a:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
    1f3e:	19 82       	std	Y+1, r1	; 0x01
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	12 c0       	rjmp	.+36     	; 0x1f70 <__vector_1+0x672>
    1f4c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	bc 01       	movw	r22, r24
    1f54:	66 0f       	add	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	66 0f       	add	r22, r22
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	68 0f       	add	r22, r24
    1f5e:	79 1f       	adc	r23, r25
    1f60:	66 54       	subi	r22, 0x46	; 70
    1f62:	7d 4f       	sbci	r23, 0xFD	; 253
    1f64:	83 e1       	ldi	r24, 0x13	; 19
    1f66:	95 e0       	ldi	r25, 0x05	; 5
    1f68:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_pattern_codespeed>
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	82 e8       	ldi	r24, 0x82	; 130
    1f78:	9b e1       	ldi	r25, 0x1B	; 27
    1f7a:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    1f7e:	cb 01       	movw	r24, r22
    1f80:	6a e0       	ldi	r22, 0x0A	; 10
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    1f88:	66 0f       	add	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	70 93 91 05 	sts	0x0591, r23	; 0x800591 <g_code_throttle+0x1>
    1f90:	60 93 90 05 	sts	0x0590, r22	; 0x800590 <g_code_throttle>
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	be 01       	movw	r22, r28
    1f9a:	6f 5f       	subi	r22, 0xFF	; 255
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9e:	83 e1       	ldi	r24, 0x13	; 19
    1fa0:	95 e0       	ldi	r25, 0x05	; 5
    1fa2:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_on_the_air>
    1fac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_fox_counter>
    1fb0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1fb4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_fox_tone_offset+0x1>
    1fb8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_fox_tone_offset>
    1fbc:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_initialize_fox_transmissions>
    1fc0:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    1fc4:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1fc8:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1fcc:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	b1 1d       	adc	r27, r1
    1fd6:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_seconds_since_sync>
    1fda:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_seconds_since_sync+0x1>
    1fde:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <g_seconds_since_sync+0x2>
    1fe2:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <g_seconds_since_sync+0x3>
    1fe6:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    1fea:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    1ff4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    1ff8:	84 c0       	rjmp	.+264    	; 0x2102 <__vector_1+0x804>
    1ffa:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
    1ffe:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_transmissions_disabled>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	be 01       	movw	r22, r28
    200c:	6f 5f       	subi	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	83 e1       	ldi	r24, 0x13	; 19
    2012:	95 e0       	ldi	r25, 0x05	; 5
    2014:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
    2018:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_pattern_codespeed>
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	82 e8       	ldi	r24, 0x82	; 130
    2020:	9b e1       	ldi	r25, 0x1B	; 27
    2022:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    2026:	cb 01       	movw	r24, r22
    2028:	6a e0       	ldi	r22, 0x0A	; 10
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    2030:	66 0f       	add	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	70 93 91 05 	sts	0x0591, r23	; 0x800591 <g_code_throttle+0x1>
    2038:	60 93 90 05 	sts	0x0590, r22	; 0x800590 <g_code_throttle>
    203c:	62 c0       	rjmp	.+196    	; 0x2102 <__vector_1+0x804>
    203e:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_id_interval_seconds>
    2042:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    2046:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_cycle_period_seconds>
    204a:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    204e:	82 17       	cp	r24, r18
    2050:	93 07       	cpc	r25, r19
    2052:	0c f0       	brlt	.+2      	; 0x2056 <__vector_1+0x758>
    2054:	32 cd       	rjmp	.-1436   	; 0x1aba <__vector_1+0x1bc>
    2056:	59 cd       	rjmp	.-1358   	; 0x1b0a <__vector_1+0x20c>
    2058:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <g_seconds_since_sync>
    205c:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    2060:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    2064:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    2068:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_cycle_period_seconds>
    206c:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    2070:	03 2e       	mov	r0, r19
    2072:	00 0c       	add	r0, r0
    2074:	44 0b       	sbc	r20, r20
    2076:	55 0b       	sbc	r21, r21
    2078:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__divmodsi4>
    207c:	ab 01       	movw	r20, r22
    207e:	70 93 84 04 	sts	0x0484, r23	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2082:	60 93 83 04 	sts	0x0483, r22	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    2086:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_id_interval_seconds>
    208a:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    208e:	23 2b       	or	r18, r19
    2090:	09 f0       	breq	.+2      	; 0x2094 <__vector_1+0x796>
    2092:	41 cd       	rjmp	.-1406   	; 0x1b16 <__vector_1+0x218>
    2094:	10 e0       	ldi	r17, 0x00	; 0
    2096:	2d c0       	rjmp	.+90     	; 0x20f2 <__vector_1+0x7f4>
    2098:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    209c:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    20a0:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    20a4:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    20a8:	89 2b       	or	r24, r25
    20aa:	8a 2b       	or	r24, r26
    20ac:	8b 2b       	or	r24, r27
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <__vector_1+0x7b4>
    20b0:	92 ce       	rjmp	.-732    	; 0x1dd6 <__vector_1+0x4d8>
    20b2:	96 ce       	rjmp	.-724    	; 0x1de0 <__vector_1+0x4e2>
    20b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_fox_counter>
    20b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_fox_counter+0x1>
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    20c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
    20c6:	8c ce       	rjmp	.-744    	; 0x1de0 <__vector_1+0x4e2>
    20c8:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_on_the_air>
    20cc:	77 cf       	rjmp	.-274    	; 0x1fbc <__vector_1+0x6be>
    20ce:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    20d2:	83 31       	cpi	r24, 0x13	; 19
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <__vector_1+0x7da>
    20d6:	3a cf       	rjmp	.-396    	; 0x1f4c <__vector_1+0x64e>
    20d8:	e9 ce       	rjmp	.-558    	; 0x1eac <__vector_1+0x5ae>
    20da:	11 e0       	ldi	r17, 0x01	; 1
    20dc:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    20e0:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    20e4:	89 2b       	or	r24, r25
    20e6:	09 f0       	breq	.+2      	; 0x20ea <__vector_1+0x7ec>
    20e8:	5b ce       	rjmp	.-842    	; 0x1da0 <__vector_1+0x4a2>
    20ea:	94 ce       	rjmp	.-728    	; 0x1e14 <__vector_1+0x516>
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <__vector_1+0x7f4>
    20f0:	10 e0       	ldi	r17, 0x00	; 0
    20f2:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    20f6:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    20fa:	89 2b       	or	r24, r25
    20fc:	09 f0       	breq	.+2      	; 0x2100 <__vector_1+0x802>
    20fe:	52 ce       	rjmp	.-860    	; 0x1da4 <__vector_1+0x4a6>
    2100:	ab ce       	rjmp	.-682    	; 0x1e58 <__vector_1+0x55a>
    2102:	0f 90       	pop	r0
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	ff 91       	pop	r31
    210a:	ef 91       	pop	r30
    210c:	bf 91       	pop	r27
    210e:	af 91       	pop	r26
    2110:	9f 91       	pop	r25
    2112:	8f 91       	pop	r24
    2114:	7f 91       	pop	r23
    2116:	6f 91       	pop	r22
    2118:	5f 91       	pop	r21
    211a:	4f 91       	pop	r20
    211c:	3f 91       	pop	r19
    211e:	2f 91       	pop	r18
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	bf 90       	pop	r11
    212e:	af 90       	pop	r10
    2130:	9f 90       	pop	r9
    2132:	8f 90       	pop	r8
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_14>:
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	4f 93       	push	r20
    214e:	5f 93       	push	r21
    2150:	6f 93       	push	r22
    2152:	7f 93       	push	r23
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	af 93       	push	r26
    215a:	bf 93       	push	r27
    215c:	ef 93       	push	r30
    215e:	ff 93       	push	r31
    2160:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZZ11__vector_14E6toggle>
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	81 11       	cpse	r24, r1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ11__vector_14E6toggle>
    216e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_audio_tone_state>
    2172:	99 23       	and	r25, r25
    2174:	61 f0       	breq	.+24     	; 0x218e <__vector_14+0x50>
    2176:	81 11       	cpse	r24, r1
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <__vector_14+0x46>
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	89 e0       	ldi	r24, 0x09	; 9
    217e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <__vector_14+0x58>
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	89 e0       	ldi	r24, 0x09	; 9
    2188:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <__vector_14+0x58>
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	89 e0       	ldi	r24, 0x09	; 9
    2192:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2196:	ff 91       	pop	r31
    2198:	ef 91       	pop	r30
    219a:	bf 91       	pop	r27
    219c:	af 91       	pop	r26
    219e:	9f 91       	pop	r25
    21a0:	8f 91       	pop	r24
    21a2:	7f 91       	pop	r23
    21a4:	6f 91       	pop	r22
    21a6:	5f 91       	pop	r21
    21a8:	4f 91       	pop	r20
    21aa:	3f 91       	pop	r19
    21ac:	2f 91       	pop	r18
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0f 90       	pop	r0
    21b4:	1f 90       	pop	r1
    21b6:	18 95       	reti

000021b8 <__vector_11>:
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	ef 93       	push	r30
    21c8:	ff 93       	push	r31
    21ca:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_AM_enabled>
    21ce:	88 23       	and	r24, r24
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <__vector_11+0x1c>
    21d2:	4b c0       	rjmp	.+150    	; 0x226a <__vector_11+0xb2>
    21d4:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <g_sendAMmodulation>
    21d8:	81 11       	cpse	r24, r1
    21da:	30 c0       	rjmp	.+96     	; 0x223c <__vector_11+0x84>
    21dc:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ11__vector_11E5index>
    21e0:	81 11       	cpse	r24, r1
    21e2:	2c c0       	rjmp	.+88     	; 0x223c <__vector_11+0x84>
    21e4:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_sendAMmodulationConstantly>
    21e8:	88 23       	and	r24, r24
    21ea:	a1 f0       	breq	.+40     	; 0x2214 <__vector_11+0x5c>
    21ec:	36 c0       	rjmp	.+108    	; 0x225a <__vector_11+0xa2>
    21ee:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZZ11__vector_11E5index>
    21f2:	98 b1       	in	r25, 0x08	; 8
    21f4:	8f 70       	andi	r24, 0x0F	; 15
    21f6:	90 7f       	andi	r25, 0xF0	; 240
    21f8:	89 2b       	or	r24, r25
    21fa:	88 b9       	out	0x08, r24	; 8
    21fc:	9b b1       	in	r25, 0x0b	; 11
    21fe:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2202:	80 73       	andi	r24, 0x30	; 48
    2204:	82 95       	swap	r24
    2206:	8f 70       	andi	r24, 0x0F	; 15
    2208:	9c 7f       	andi	r25, 0xFC	; 252
    220a:	89 2b       	or	r24, r25
    220c:	8b b9       	out	0x0b, r24	; 11
    220e:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2212:	2b c0       	rjmp	.+86     	; 0x226a <__vector_11+0xb2>
    2214:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2218:	8f 33       	cpi	r24, 0x3F	; 63
    221a:	39 f1       	breq	.+78     	; 0x226a <__vector_11+0xb2>
    221c:	8f e3       	ldi	r24, 0x3F	; 63
    221e:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2222:	88 b1       	in	r24, 0x08	; 8
    2224:	8f 60       	ori	r24, 0x0F	; 15
    2226:	88 b9       	out	0x08, r24	; 8
    2228:	8b b1       	in	r24, 0x0b	; 11
    222a:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <_ZZ11__vector_11E11controlPins>
    222e:	90 73       	andi	r25, 0x30	; 48
    2230:	92 95       	swap	r25
    2232:	9f 70       	andi	r25, 0x0F	; 15
    2234:	8c 7f       	andi	r24, 0xFC	; 252
    2236:	89 2b       	or	r24, r25
    2238:	8b b9       	out	0x0b, r24	; 11
    223a:	17 c0       	rjmp	.+46     	; 0x226a <__vector_11+0xb2>
    223c:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <_ZZ11__vector_11E5index>
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	9e 0f       	add	r25, r30
    2244:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <_ZZ11__vector_11E5index>
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	e2 5a       	subi	r30, 0xA2	; 162
    224c:	fa 4f       	sbci	r31, 0xFA	; 250
    224e:	80 81       	ld	r24, Z
    2250:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2254:	90 32       	cpi	r25, 0x20	; 32
    2256:	58 f6       	brcc	.-106    	; 0x21ee <__vector_11+0x36>
    2258:	cc cf       	rjmp	.-104    	; 0x21f2 <__vector_11+0x3a>
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ11__vector_11E5index>
    2260:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_dataModulation>
    2264:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2268:	c4 cf       	rjmp	.-120    	; 0x21f2 <__vector_11+0x3a>
    226a:	ff 91       	pop	r31
    226c:	ef 91       	pop	r30
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <_Z23clockConfigurationCheckv>:
    227c:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    2280:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    2284:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    2288:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    228c:	81 15       	cp	r24, r1
    228e:	96 46       	sbci	r25, 0x66	; 102
    2290:	ae 4e       	sbci	r26, 0xEE	; 238
    2292:	bf 45       	sbci	r27, 0x5F	; 95
    2294:	08 f4       	brcc	.+2      	; 0x2298 <_Z23clockConfigurationCheckv+0x1c>
    2296:	67 c0       	rjmp	.+206    	; 0x2366 <_Z23clockConfigurationCheckv+0xea>
    2298:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    229c:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    22a0:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    22a4:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    22a8:	81 15       	cp	r24, r1
    22aa:	96 46       	sbci	r25, 0x66	; 102
    22ac:	ae 4e       	sbci	r26, 0xEE	; 238
    22ae:	bf 45       	sbci	r27, 0x5F	; 95
    22b0:	08 f4       	brcc	.+2      	; 0x22b4 <_Z23clockConfigurationCheckv+0x38>
    22b2:	5b c0       	rjmp	.+182    	; 0x236a <_Z23clockConfigurationCheckv+0xee>
    22b4:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    22b8:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    22bc:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    22c0:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    22c4:	81 15       	cp	r24, r1
    22c6:	96 46       	sbci	r25, 0x66	; 102
    22c8:	ae 4e       	sbci	r26, 0xEE	; 238
    22ca:	bf 45       	sbci	r27, 0x5F	; 95
    22cc:	08 f4       	brcc	.+2      	; 0x22d0 <_Z23clockConfigurationCheckv+0x54>
    22ce:	4f c0       	rjmp	.+158    	; 0x236e <_Z23clockConfigurationCheckv+0xf2>
    22d0:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
    22d4:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    22d8:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    22dc:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    22e0:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    22e4:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    22e8:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    22ec:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    22f0:	84 17       	cp	r24, r20
    22f2:	95 07       	cpc	r25, r21
    22f4:	a6 07       	cpc	r26, r22
    22f6:	b7 07       	cpc	r27, r23
    22f8:	e0 f5       	brcc	.+120    	; 0x2372 <_Z23clockConfigurationCheckv+0xf6>
    22fa:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    22fe:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2302:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2306:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    230a:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    230e:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    2312:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    2316:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    231a:	84 17       	cp	r24, r20
    231c:	95 07       	cpc	r25, r21
    231e:	a6 07       	cpc	r26, r22
    2320:	b7 07       	cpc	r27, r23
    2322:	48 f1       	brcs	.+82     	; 0x2376 <_Z23clockConfigurationCheckv+0xfa>
    2324:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    2328:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    232c:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2330:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2334:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    2338:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    233c:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2340:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2344:	84 17       	cp	r24, r20
    2346:	95 07       	cpc	r25, r21
    2348:	a6 07       	cpc	r26, r22
    234a:	b7 07       	cpc	r27, r23
    234c:	30 f4       	brcc	.+12     	; 0x235a <_Z23clockConfigurationCheckv+0xde>
    234e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    2352:	81 11       	cpse	r24, r1
    2354:	12 c0       	rjmp	.+36     	; 0x237a <_Z23clockConfigurationCheckv+0xfe>
    2356:	85 e0       	ldi	r24, 0x05	; 5
    2358:	08 95       	ret
    235a:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_use_rtc_for_startstop>
    235e:	88 23       	and	r24, r24
    2360:	71 f0       	breq	.+28     	; 0x237e <_Z23clockConfigurationCheckv+0x102>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	08 95       	ret
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	08 95       	ret
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	08 95       	ret
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	08 95       	ret
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	08 95       	ret
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	08 95       	ret
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	08 95       	ret
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	08 95       	ret

00002382 <_Z13sendMorseToneh>:
    2382:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <g_fox_tone_offset>
    2386:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <g_fox_tone_offset+0x1>
    238a:	9f e2       	ldi	r25, 0x2F	; 47
    238c:	92 1b       	sub	r25, r18
    238e:	97 bd       	out	0x27, r25	; 39
    2390:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_audio_tone_state>
    2394:	08 95       	ret

00002396 <__vector_8>:
    2396:	1f 92       	push	r1
    2398:	0f 92       	push	r0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	0f 92       	push	r0
    239e:	11 24       	eor	r1, r1
    23a0:	2f 93       	push	r18
    23a2:	3f 93       	push	r19
    23a4:	4f 93       	push	r20
    23a6:	5f 93       	push	r21
    23a8:	6f 93       	push	r22
    23aa:	7f 93       	push	r23
    23ac:	8f 93       	push	r24
    23ae:	9f 93       	push	r25
    23b0:	af 93       	push	r26
    23b2:	bf 93       	push	r27
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	00 d0       	rcall	.+0      	; 0x23be <__vector_8+0x28>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tick_count>
    23c6:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <g_tick_count+0x1>
    23ca:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <g_tick_count+0x2>
    23ce:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <g_tick_count+0x3>
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	a1 1d       	adc	r26, r1
    23d6:	b1 1d       	adc	r27, r1
    23d8:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <g_tick_count>
    23dc:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <g_tick_count+0x1>
    23e0:	a0 93 06 05 	sts	0x0506, r26	; 0x800506 <g_tick_count+0x2>
    23e4:	b0 93 07 05 	sts	0x0507, r27	; 0x800507 <g_tick_count+0x3>
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	1a 82       	std	Y+2, r1	; 0x02
    23ee:	84 e0       	ldi	r24, 0x04	; 4
    23f0:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    23f4:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <g_reset_button_held>
    23f8:	99 23       	and	r25, r25
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__vector_8+0x68>
    23fc:	35 c1       	rjmp	.+618    	; 0x2668 <__vector_8+0x2d2>
    23fe:	88 23       	and	r24, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <__vector_8+0x6e>
    2402:	35 c1       	rjmp	.+618    	; 0x266e <__vector_8+0x2d8>
    2404:	31 c1       	rjmp	.+610    	; 0x2668 <__vector_8+0x2d2>
    2406:	44 e0       	ldi	r20, 0x04	; 4
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	40 93 94 05 	sts	0x0594, r20	; 0x800594 <g_seconds_since_powerup>
    2412:	50 93 95 05 	sts	0x0595, r21	; 0x800595 <g_seconds_since_powerup+0x1>
    2416:	60 93 96 05 	sts	0x0596, r22	; 0x800596 <g_seconds_since_powerup+0x2>
    241a:	70 93 97 05 	sts	0x0597, r23	; 0x800597 <g_seconds_since_powerup+0x3>
    241e:	91 e0       	ldi	r25, 0x01	; 1
    2420:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <g_perform_EEPROM_reset>
    2424:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZZ10__vector_8E15holdButtonState>
    2428:	89 13       	cpse	r24, r25
    242a:	25 c0       	rjmp	.+74     	; 0x2476 <__vector_8+0xe0>
    242c:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_sync_pin_timer>
    2430:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_sync_pin_timer+0x1>
    2434:	2b 3b       	cpi	r18, 0xBB	; 187
    2436:	30 41       	sbci	r19, 0x10	; 16
    2438:	54 f4       	brge	.+20     	; 0x244e <__vector_8+0xb8>
    243a:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_sync_pin_timer>
    243e:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_sync_pin_timer+0x1>
    2442:	2f 5f       	subi	r18, 0xFF	; 255
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	30 93 50 05 	sts	0x0550, r19	; 0x800550 <g_sync_pin_timer+0x1>
    244a:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <g_sync_pin_timer>
    244e:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_sync_pin_timer>
    2452:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_sync_pin_timer+0x1>
    2456:	20 39       	cpi	r18, 0x90	; 144
    2458:	31 05       	cpc	r19, r1
    245a:	9c f0       	brlt	.+38     	; 0x2482 <__vector_8+0xec>
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	09 f4       	brne	.+2      	; 0x2462 <__vector_8+0xcc>
    2460:	15 c1       	rjmp	.+554    	; 0x268c <__vector_8+0x2f6>
    2462:	92 e0       	ldi	r25, 0x02	; 2
    2464:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <g_sync_pin_stable>
    2468:	81 11       	cpse	r24, r1
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <__vector_8+0xec>
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	8d e0       	ldi	r24, 0x0D	; 13
    2470:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <__vector_8+0xec>
    2476:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10__vector_8E15holdButtonState>
    247a:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_sync_pin_timer+0x1>
    247e:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_sync_pin_timer>
    2482:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    2486:	81 11       	cpse	r24, r1
    2488:	0b c1       	rjmp	.+534    	; 0x26a0 <__vector_8+0x30a>
    248a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_on_the_air>
    248e:	81 11       	cpse	r24, r1
    2490:	01 c1       	rjmp	.+514    	; 0x2694 <__vector_8+0x2fe>
    2492:	06 c1       	rjmp	.+524    	; 0x26a0 <__vector_8+0x30a>
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	88 e0       	ldi	r24, 0x08	; 8
    2498:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    249c:	84 e9       	ldi	r24, 0x94	; 148
    249e:	95 e0       	ldi	r25, 0x05	; 5
    24a0:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ10__vector_8E9ptt_delay+0x1>
    24a4:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E9ptt_delay>
    24a8:	01 c1       	rjmp	.+514    	; 0x26ac <__vector_8+0x316>
    24aa:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ10__vector_8E9ptt_delay>
    24ae:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZZ10__vector_8E9ptt_delay+0x1>
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	31 f0       	breq	.+12     	; 0x24c2 <__vector_8+0x12c>
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ10__vector_8E9ptt_delay+0x1>
    24bc:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E9ptt_delay>
    24c0:	f5 c0       	rjmp	.+490    	; 0x26ac <__vector_8+0x316>
    24c2:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ10__vector_8E7codeInc>
    24c6:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	e1 f1       	breq	.+120    	; 0x2546 <__vector_8+0x1b0>
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    24d4:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E7codeInc>
    24d8:	89 2b       	or	r24, r25
    24da:	09 f0       	breq	.+2      	; 0x24de <__vector_8+0x148>
    24dc:	e7 c0       	rjmp	.+462    	; 0x26ac <__vector_8+0x316>
    24de:	ae 01       	movw	r20, r28
    24e0:	4e 5f       	subi	r20, 0xFE	; 254
    24e2:	5f 4f       	sbci	r21, 0xFF	; 255
    24e4:	be 01       	movw	r22, r28
    24e6:	6f 5f       	subi	r22, 0xFF	; 255
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
    24f2:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10__vector_8E3key>
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	81 11       	cpse	r24, r1
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <__vector_8+0x18e>
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	88 23       	and	r24, r24
    2500:	89 f0       	breq	.+34     	; 0x2524 <__vector_8+0x18e>
    2502:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ10__vector_8E3key>
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_callsign_sent>
    250c:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_use_ptt_periodic_reset>
    2510:	88 23       	and	r24, r24
    2512:	41 f0       	breq	.+16     	; 0x2524 <__vector_8+0x18e>
    2514:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_on_the_air>
    2518:	84 e9       	ldi	r24, 0x94	; 148
    251a:	95 e0       	ldi	r25, 0x05	; 5
    251c:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E11ptt_dropped+0x1>
    2520:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E11ptt_dropped>
    2524:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    2528:	8d e0       	ldi	r24, 0x0D	; 13
    252a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    252e:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    2532:	8a e0       	ldi	r24, 0x0A	; 10
    2534:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2538:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    253c:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <g_sendAMmodulation>
    2540:	0e 94 c1 11 	call	0x2382	; 0x2382 <_Z13sendMorseToneh>
    2544:	b3 c0       	rjmp	.+358    	; 0x26ac <__vector_8+0x316>
    2546:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	29 f0       	breq	.+10     	; 0x2558 <__vector_8+0x1c2>
    254e:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    2552:	8d e0       	ldi	r24, 0x0D	; 13
    2554:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2558:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    255c:	8a e0       	ldi	r24, 0x0A	; 10
    255e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2562:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    2566:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <g_sendAMmodulation>
    256a:	0e 94 c1 11 	call	0x2382	; 0x2382 <_Z13sendMorseToneh>
    256e:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <g_code_throttle>
    2572:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <g_code_throttle+0x1>
    2576:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    257a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E7codeInc>
    257e:	96 c0       	rjmp	.+300    	; 0x26ac <__vector_8+0x316>
    2580:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ10__vector_8E9ptt_delay>
    2584:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZZ10__vector_8E9ptt_delay+0x1>
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	39 f4       	brne	.+14     	; 0x259a <__vector_8+0x204>
    258c:	84 e6       	ldi	r24, 0x64	; 100
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ10__vector_8E9ptt_delay+0x1>
    2594:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E9ptt_delay>
    2598:	1c c0       	rjmp	.+56     	; 0x25d2 <__vector_8+0x23c>
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ10__vector_8E9ptt_delay+0x1>
    25a0:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E9ptt_delay>
    25a4:	89 2b       	or	r24, r25
    25a6:	a9 f4       	brne	.+42     	; 0x25d2 <__vector_8+0x23c>
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	88 e0       	ldi	r24, 0x08	; 8
    25ac:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    25b0:	10 c0       	rjmp	.+32     	; 0x25d2 <__vector_8+0x23c>
    25b2:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10__vector_8E11ptt_dropped>
    25b6:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10__vector_8E11ptt_dropped+0x1>
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	51 f0       	breq	.+20     	; 0x25d2 <__vector_8+0x23c>
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E11ptt_dropped+0x1>
    25c4:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E11ptt_dropped>
    25c8:	89 2b       	or	r24, r25
    25ca:	19 f4       	brne	.+6      	; 0x25d2 <__vector_8+0x23c>
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_on_the_air>
    25d2:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_LED_enunciating>
    25d6:	88 23       	and	r24, r24
    25d8:	79 f1       	breq	.+94     	; 0x2638 <__vector_8+0x2a2>
    25da:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ10__vector_8E7codeInc>
    25de:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	01 f1       	breq	.+64     	; 0x2626 <__vector_8+0x290>
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    25ec:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E7codeInc>
    25f0:	89 2b       	or	r24, r25
    25f2:	81 f5       	brne	.+96     	; 0x2654 <__vector_8+0x2be>
    25f4:	ae 01       	movw	r20, r28
    25f6:	4e 5f       	subi	r20, 0xFE	; 254
    25f8:	5f 4f       	sbci	r21, 0xFF	; 255
    25fa:	be 01       	movw	r22, r28
    25fc:	6f 5f       	subi	r22, 0xFF	; 255
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
    2608:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10__vector_8E3key>
    260c:	68 2f       	mov	r22, r24
    260e:	8d e0       	ldi	r24, 0x0D	; 13
    2610:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2614:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <g_code_throttle>
    2618:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <g_code_throttle+0x1>
    261c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    2620:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E7codeInc>
    2624:	17 c0       	rjmp	.+46     	; 0x2654 <__vector_8+0x2be>
    2626:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <g_code_throttle>
    262a:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <g_code_throttle+0x1>
    262e:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E7codeInc+0x1>
    2632:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E7codeInc>
    2636:	0e c0       	rjmp	.+28     	; 0x2654 <__vector_8+0x2be>
    2638:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10__vector_8E3key>
    263c:	88 23       	and	r24, r24
    263e:	51 f0       	breq	.+20     	; 0x2654 <__vector_8+0x2be>
    2640:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ10__vector_8E3key>
    2644:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	21 f0       	breq	.+8      	; 0x2654 <__vector_8+0x2be>
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	8d e0       	ldi	r24, 0x0D	; 13
    2650:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	8a e0       	ldi	r24, 0x0A	; 10
    2658:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    265c:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <g_sendAMmodulation>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	0e 94 c1 11 	call	0x2382	; 0x2382 <_Z13sendMorseToneh>
    2666:	22 c0       	rjmp	.+68     	; 0x26ac <__vector_8+0x316>
    2668:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_reset_button_held>
    266c:	db ce       	rjmp	.-586    	; 0x2424 <__vector_8+0x8e>
    266e:	40 91 94 05 	lds	r20, 0x0594	; 0x800594 <g_seconds_since_powerup>
    2672:	50 91 95 05 	lds	r21, 0x0595	; 0x800595 <g_seconds_since_powerup+0x1>
    2676:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <g_seconds_since_powerup+0x2>
    267a:	70 91 97 05 	lds	r23, 0x0597	; 0x800597 <g_seconds_since_powerup+0x3>
    267e:	43 30       	cpi	r20, 0x03	; 3
    2680:	51 05       	cpc	r21, r1
    2682:	61 05       	cpc	r22, r1
    2684:	71 05       	cpc	r23, r1
    2686:	09 f0       	breq	.+2      	; 0x268a <__vector_8+0x2f4>
    2688:	cd ce       	rjmp	.-614    	; 0x2424 <__vector_8+0x8e>
    268a:	bd ce       	rjmp	.-646    	; 0x2406 <__vector_8+0x70>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_sync_pin_stable>
    2692:	f7 ce       	rjmp	.-530    	; 0x2482 <__vector_8+0xec>
    2694:	88 e0       	ldi	r24, 0x08	; 8
    2696:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    269a:	81 11       	cpse	r24, r1
    269c:	06 cf       	rjmp	.-500    	; 0x24aa <__vector_8+0x114>
    269e:	fa ce       	rjmp	.-524    	; 0x2494 <__vector_8+0xfe>
    26a0:	88 e0       	ldi	r24, 0x08	; 8
    26a2:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    26a6:	81 11       	cpse	r24, r1
    26a8:	6b cf       	rjmp	.-298    	; 0x2580 <__vector_8+0x1ea>
    26aa:	83 cf       	rjmp	.-250    	; 0x25b2 <__vector_8+0x21c>
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	ff 91       	pop	r31
    26b6:	ef 91       	pop	r30
    26b8:	bf 91       	pop	r27
    26ba:	af 91       	pop	r26
    26bc:	9f 91       	pop	r25
    26be:	8f 91       	pop	r24
    26c0:	7f 91       	pop	r23
    26c2:	6f 91       	pop	r22
    26c4:	5f 91       	pop	r21
    26c6:	4f 91       	pop	r20
    26c8:	3f 91       	pop	r19
    26ca:	2f 91       	pop	r18
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	0f 90       	pop	r0
    26d2:	1f 90       	pop	r1
    26d4:	18 95       	reti

000026d6 <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox, EventAction_t action)
{
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <_Z11setupForFoxP5Fox_t13EventAction_t+0xa>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	16 2f       	mov	r17, r22
	if(fox)
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	31 f0       	breq	.+12     	; 0x26f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
	{
		if(*fox != INVALID_FOX)
    26ea:	fc 01       	movw	r30, r24
    26ec:	80 81       	ld	r24, Z
    26ee:	82 31       	cpi	r24, 0x12	; 18
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
		{
			g_fox = *fox;
    26f2:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_fox>
		}
	}

	g_current_epoch = rv3028_get_epoch();
    26f6:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_Z16rv3028_get_epochv>
    26fa:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_current_epoch>
    26fe:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_current_epoch+0x1>
    2702:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_current_epoch+0x2>
    2706:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_current_epoch+0x3>
	g_use_ptt_periodic_reset = FALSE;
    270a:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <g_use_ptt_periodic_reset>

	cli();
    270e:	f8 94       	cli

	switch(g_fox)
    2710:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <g_fox>
    2714:	8e 2f       	mov	r24, r30
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	fc 01       	movw	r30, r24
    271a:	31 97       	sbiw	r30, 0x01	; 1
    271c:	e3 31       	cpi	r30, 0x13	; 19
    271e:	f1 05       	cpc	r31, r1
    2720:	08 f0       	brcs	.+2      	; 0x2724 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4e>
    2722:	84 c0       	rjmp	.+264    	; 0x282c <_Z11setupForFoxP5Fox_t13EventAction_t+0x156>
    2724:	ed 57       	subi	r30, 0x7D	; 125
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval_seconds = 60;
    272c:	8c e3       	ldi	r24, 0x3C	; 60
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    2734:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 300;
    2738:	8c e2       	ldi	r24, 0x2C	; 44
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    2740:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2744:	25 e0       	ldi	r18, 0x05	; 5
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <g_number_of_foxes+0x1>
    274c:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <g_number_of_foxes>
			g_fox_id_offset = 0;
    2750:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_fox_id_offset+0x1>
    2754:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    2758:	28 e0       	ldi	r18, 0x08	; 8
    275a:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <g_pattern_codespeed>
			g_id_interval_seconds = 300;
    275e:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    2762:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    2766:	90 c0       	rjmp	.+288    	; 0x2888 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval_seconds = 12;
    2768:	8c e0       	ldi	r24, 0x0C	; 12
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    2770:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    2774:	8c e3       	ldi	r24, 0x3C	; 60
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    277c:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2780:	85 e0       	ldi	r24, 0x05	; 5
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_number_of_foxes+0x1>
    2788:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    278c:	88 e0       	ldi	r24, 0x08	; 8
    278e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1 - 1;
    2792:	87 e0       	ldi	r24, 0x07	; 7
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_fox_id_offset+0x1>
    279a:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_fox_id_offset>
			g_id_interval_seconds = 600;
    279e:	88 e5       	ldi	r24, 0x58	; 88
    27a0:	92 e0       	ldi	r25, 0x02	; 2
    27a2:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    27a6:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    27aa:	6e c0       	rjmp	.+220    	; 0x2888 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval_seconds = 12;
    27ac:	8c e0       	ldi	r24, 0x0C	; 12
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    27b4:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    27b8:	2c e3       	ldi	r18, 0x3C	; 60
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	30 93 5b 05 	sts	0x055B, r19	; 0x80055b <g_cycle_period_seconds+0x1>
    27c0:	20 93 5a 05 	sts	0x055A, r18	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    27c4:	25 e0       	ldi	r18, 0x05	; 5
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <g_number_of_foxes+0x1>
    27cc:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    27d0:	2f e0       	ldi	r18, 0x0F	; 15
    27d2:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    27d6:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_fox_id_offset+0x1>
    27da:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_fox_id_offset>
			g_id_interval_seconds = 600;
    27de:	88 e5       	ldi	r24, 0x58	; 88
    27e0:	92 e0       	ldi	r25, 0x02	; 2
    27e2:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    27e6:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    27ea:	4e c0       	rjmp	.+156    	; 0x2888 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>

		case REPORT_BATTERY:
		{
			g_on_air_interval_seconds = 30;
    27ec:	8e e1       	ldi	r24, 0x1E	; 30
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    27f4:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    27f8:	8c e3       	ldi	r24, 0x3C	; 60
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    2800:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 2;
    2804:	22 e0       	ldi	r18, 0x02	; 2
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <g_number_of_foxes+0x1>
    280c:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    2810:	28 e0       	ldi	r18, 0x08	; 8
    2812:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <g_pattern_codespeed>
			g_fox_id_offset = REPORT_BATTERY - 1;
    2816:	22 e1       	ldi	r18, 0x12	; 18
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	30 93 57 05 	sts	0x0557, r19	; 0x800557 <g_fox_id_offset+0x1>
    281e:	20 93 56 05 	sts	0x0556, r18	; 0x800556 <g_fox_id_offset>
			g_id_interval_seconds = 60;
    2822:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    2826:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    282a:	2e c0       	rjmp	.+92     	; 0x2888 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    282c:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    2830:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_use_ptt_periodic_reset>
			g_number_of_foxes = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_number_of_foxes+0x1>
    283c:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    2840:	88 e0       	ldi	r24, 0x08	; 8
    2842:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_pattern_codespeed>
			g_id_interval_seconds = g_ptt_periodic_reset_enabled ? 60 : 600;
    2846:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    284a:	81 11       	cpse	r24, r1
    284c:	03 c0       	rjmp	.+6      	; 0x2854 <_Z11setupForFoxP5Fox_t13EventAction_t+0x17e>
    284e:	88 e5       	ldi	r24, 0x58	; 88
    2850:	92 e0       	ldi	r25, 0x02	; 2
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <_Z11setupForFoxP5Fox_t13EventAction_t+0x182>
    2854:	8c e3       	ldi	r24, 0x3C	; 60
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    285c:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
			g_on_air_interval_seconds = g_id_interval_seconds;
    2860:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_id_interval_seconds>
    2864:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    2868:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    286c:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_fox_id_offset = 0;
    2870:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_fox_id_offset+0x1>
    2874:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_fox_id_offset>
			g_cycle_period_seconds = g_id_interval_seconds;
    2878:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_id_interval_seconds>
    287c:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    2880:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    2884:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
		}
		break;
	}

	if(action == START_NOTHING)
    2888:	11 11       	cpse	r17, r1
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1c2>
	{
		g_use_rtc_for_startstop = FALSE;
    288c:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
    2896:	e0 c0       	rjmp	.+448    	; 0x2a58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else if(action == START_EVENT_NOW)
    2898:	11 30       	cpi	r17, 0x01	; 1
    289a:	99 f4       	brne	.+38     	; 0x28c2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ec>
	{
		g_fox_counter = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    28a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
		g_seconds_since_sync = 0;                                           /* Total elapsed time since synchronization */
    28a8:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_seconds_since_sync>
    28ac:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_seconds_since_sync+0x1>
    28b0:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_seconds_since_sync+0x2>
    28b4:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    28b8:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    28bc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_transmissions_disabled>
    28c0:	cb c0       	rjmp	.+406    	; 0x2a58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else if(action == START_TRANSMISSIONS_NOW)                              /* Immediately start transmitting, regardless RTC or time slot */
    28c2:	12 30       	cpi	r17, 0x02	; 2
    28c4:	b9 f5       	brne	.+110    	; 0x2934 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
	{
		g_fox_counter = MAX(1, g_fox - g_fox_id_offset);
    28c6:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    28ca:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_fox_id_offset>
    28ce:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	82 1b       	sub	r24, r18
    28d6:	93 0b       	sbc	r25, r19
    28d8:	18 16       	cp	r1, r24
    28da:	19 06       	cpc	r1, r25
    28dc:	14 f0       	brlt	.+4      	; 0x28e2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20c>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    28e6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds;           /* Total elapsed time since start of event */
    28ea:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <g_fox_counter>
    28ee:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <g_fox_counter+0x1>
    28f2:	40 91 5c 05 	lds	r20, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    28f6:	50 91 5d 05 	lds	r21, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    28fa:	21 50       	subi	r18, 0x01	; 1
    28fc:	31 09       	sbc	r19, r1
    28fe:	24 9f       	mul	r18, r20
    2900:	c0 01       	movw	r24, r0
    2902:	25 9f       	mul	r18, r21
    2904:	90 0d       	add	r25, r0
    2906:	34 9f       	mul	r19, r20
    2908:	90 0d       	add	r25, r0
    290a:	11 24       	eor	r1, r1
    290c:	09 2e       	mov	r0, r25
    290e:	00 0c       	add	r0, r0
    2910:	aa 0b       	sbc	r26, r26
    2912:	bb 0b       	sbc	r27, r27
    2914:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_seconds_since_sync>
    2918:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_seconds_since_sync+0x1>
    291c:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <g_seconds_since_sync+0x2>
    2920:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    2924:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    2928:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_transmissions_disabled>
		g_initialize_fox_transmissions = INIT_EVENT_STARTING_NOW;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_initialize_fox_transmissions>
    2932:	92 c0       	rjmp	.+292    	; 0x2a58 <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    2934:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    2938:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    293c:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2940:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2944:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2948:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    294c:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2950:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2954:	48 17       	cp	r20, r24
    2956:	59 07       	cpc	r21, r25
    2958:	6a 07       	cpc	r22, r26
    295a:	7b 07       	cpc	r23, r27
    295c:	08 f0       	brcs	.+2      	; 0x2960 <_Z11setupForFoxP5Fox_t13EventAction_t+0x28a>
    295e:	69 c0       	rjmp	.+210    	; 0x2a32 <_Z11setupForFoxP5Fox_t13EventAction_t+0x35c>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    2960:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2964:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2968:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    296c:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2970:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    2974:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2978:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    297c:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2980:	84 1b       	sub	r24, r20
    2982:	95 0b       	sbc	r25, r21
    2984:	a6 0b       	sbc	r26, r22
    2986:	b7 0b       	sbc	r27, r23
    2988:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_seconds_since_sync>
    298c:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_seconds_since_sync+0x1>
    2990:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <g_seconds_since_sync+0x2>
    2994:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <g_seconds_since_sync+0x3>
			g_fox_counter = CLAMP(1, 1 + ((g_seconds_since_sync % g_cycle_period_seconds) / g_on_air_interval_seconds), g_number_of_foxes);
    2998:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <g_seconds_since_sync>
    299c:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    29a0:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    29a4:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    29a8:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_cycle_period_seconds>
    29ac:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    29b0:	00 91 5c 05 	lds	r16, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    29b4:	10 91 5d 05 	lds	r17, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    29b8:	03 2e       	mov	r0, r19
    29ba:	00 0c       	add	r0, r0
    29bc:	44 0b       	sbc	r20, r20
    29be:	55 0b       	sbc	r21, r21
    29c0:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__divmodsi4>
    29c4:	98 01       	movw	r18, r16
    29c6:	11 0f       	add	r17, r17
    29c8:	44 0b       	sbc	r20, r20
    29ca:	55 0b       	sbc	r21, r21
    29cc:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__divmodsi4>
    29d0:	ba 01       	movw	r22, r20
    29d2:	a9 01       	movw	r20, r18
    29d4:	4f 5f       	subi	r20, 0xFF	; 255
    29d6:	5f 4f       	sbci	r21, 0xFF	; 255
    29d8:	6f 4f       	sbci	r22, 0xFF	; 255
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    29e0:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    29e4:	9a 83       	std	Y+2, r25	; 0x02
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	9a 81       	ldd	r25, Y+2	; 0x02
    29ec:	09 2e       	mov	r0, r25
    29ee:	00 0c       	add	r0, r0
    29f0:	aa 0b       	sbc	r26, r26
    29f2:	bb 0b       	sbc	r27, r27
    29f4:	84 17       	cp	r24, r20
    29f6:	95 07       	cpc	r25, r21
    29f8:	a6 07       	cpc	r26, r22
    29fa:	b7 07       	cpc	r27, r23
    29fc:	3c f4       	brge	.+14     	; 0x2a0c <_Z11setupForFoxP5Fox_t13EventAction_t+0x336>
    29fe:	29 81       	ldd	r18, Y+1	; 0x01
    2a00:	3a 81       	ldd	r19, Y+2	; 0x02
    2a02:	c9 01       	movw	r24, r18
    2a04:	33 0f       	add	r19, r19
    2a06:	aa 0b       	sbc	r26, r26
    2a08:	bb 0b       	sbc	r27, r27
    2a0a:	0b c0       	rjmp	.+22     	; 0x2a22 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    2a0c:	db 01       	movw	r26, r22
    2a0e:	ca 01       	movw	r24, r20
    2a10:	14 16       	cp	r1, r20
    2a12:	15 06       	cpc	r1, r21
    2a14:	16 06       	cpc	r1, r22
    2a16:	17 06       	cpc	r1, r23
    2a18:	24 f0       	brlt	.+8      	; 0x2a22 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    2a26:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
			g_initialize_fox_transmissions = INIT_EVENT_IN_PROGRESS_WITH_STARTFINISH_TIMES;
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_initialize_fox_transmissions>
    2a30:	0e c0       	rjmp	.+28     	; 0x2a4e <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    2a32:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_seconds_since_sync>
    2a36:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_seconds_since_sync+0x1>
    2a3a:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_seconds_since_sync+0x2>
    2a3e:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    2a4a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
		}

		g_use_rtc_for_startstop = TRUE;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    2a54:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
	}

	g_fox_tone_offset = g_fox_counter;
    2a58:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_fox_counter>
    2a5c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_fox_counter+0x1>
    2a60:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_fox_tone_offset+0x1>
    2a64:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_fox_tone_offset>

	sendMorseTone(OFF);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	0e 94 c1 11 	call	0x2382	; 0x2382 <_Z13sendMorseToneh>
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    2a6e:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <g_code_throttle+0x1>
    2a72:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <g_code_throttle>
	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    2a76:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2a7a:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_config_error>
	digitalWrite(PIN_LED2, OFF);            /*  LED Off - in case it was left on */
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	8d e0       	ldi	r24, 0x0D	; 13
    2a82:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    2a86:	60 e0       	ldi	r22, 0x00	; 0
    2a88:	8a e0       	ldi	r24, 0x0A	; 10
    2a8a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    2a8e:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    2a92:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2a96:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_config_error>

	sei();
    2a9a:	78 94       	sei
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	08 95       	ret

00002aaa <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;
    2aaa:	8f ef       	ldi	r24, 0xFF	; 255
    2aac:	9f ef       	ldi	r25, 0xFF	; 255

	while((ADCSRA & (1 << ADSC)) && c)
    2aae:	ea e7       	ldi	r30, 0x7A	; 122
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	20 81       	ld	r18, Z
    2ab4:	26 ff       	sbrs	r18, 6
    2ab6:	04 c0       	rjmp	.+8      	; 0x2ac0 <_Z7readADCv+0x16>
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	11 f0       	breq	.+4      	; 0x2ac0 <_Z7readADCv+0x16>
	{
		c--;    /* Just wait for ADC to finish. */
    2abc:	01 97       	sbiw	r24, 0x01	; 1
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;

	while((ADCSRA & (1 << ADSC)) && c)
    2abe:	f9 cf       	rjmp	.-14     	; 0x2ab2 <_Z7readADCv+0x8>
	{
		c--;    /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    2ac0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2ac4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    2ac8:	ea e7       	ldi	r30, 0x7A	; 122
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	90 81       	ld	r25, Z
    2ace:	90 64       	ori	r25, 0x40	; 64
    2ad0:	90 83       	st	Z, r25
	return( result);
}
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	08 95       	ret

00002ad6 <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    2ade:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <g_atmega_temp_calibration>
    2ae2:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <g_atmega_temp_calibration+0x1>
    2ae6:	07 2e       	mov	r0, r23
    2ae8:	00 0c       	add	r0, r0
    2aea:	88 0b       	sbc	r24, r24
    2aec:	99 0b       	sbc	r25, r25
    2aee:	0e 94 c2 2c 	call	0x5984	; 0x5984 <__floatsisf>
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e2       	ldi	r20, 0x20	; 32
    2af8:	51 e4       	ldi	r21, 0x41	; 65
    2afa:	0e 94 18 2c 	call	0x5830	; 0x5830 <__divsf3>
    2afe:	06 2f       	mov	r16, r22
    2b00:	17 2f       	mov	r17, r23
    2b02:	d8 2f       	mov	r29, r24
    2b04:	c9 2f       	mov	r28, r25
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	48 e4       	ldi	r20, 0x48	; 72
    2b0c:	53 e4       	ldi	r21, 0x43	; 67
    2b0e:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__gesf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	6c f0       	brlt	.+26     	; 0x2b30 <_Z7getTempv+0x5a>
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	48 e4       	ldi	r20, 0x48	; 72
    2b1c:	53 ec       	ldi	r21, 0xC3	; 195
    2b1e:	60 2f       	mov	r22, r16
    2b20:	71 2f       	mov	r23, r17
    2b22:	8d 2f       	mov	r24, r29
    2b24:	9c 2f       	mov	r25, r28
    2b26:	0e 94 0e 2c 	call	0x581c	; 0x581c <__cmpsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	34 f0       	brlt	.+12     	; 0x2b3a <_Z7getTempv+0x64>
    2b2e:	09 c0       	rjmp	.+18     	; 0x2b42 <_Z7getTempv+0x6c>
    2b30:	00 e0       	ldi	r16, 0x00	; 0
    2b32:	10 e0       	ldi	r17, 0x00	; 0
    2b34:	d8 e4       	ldi	r29, 0x48	; 72
    2b36:	c3 e4       	ldi	r28, 0x43	; 67
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <_Z7getTempv+0x6c>
    2b3a:	00 e0       	ldi	r16, 0x00	; 0
    2b3c:	10 e0       	ldi	r17, 0x00	; 0
    2b3e:	d8 e4       	ldi	r29, 0x48	; 72
    2b40:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    2b42:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    2b46:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_Z7readADCv>
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatunsisf>
    2b54:	2e ea       	ldi	r18, 0xAE	; 174
    2b56:	37 e2       	ldi	r19, 0x27	; 39
    2b58:	42 ea       	ldi	r20, 0xA2	; 162
    2b5a:	53 e4       	ldi	r21, 0x43	; 67
    2b5c:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__subsf3>
    2b60:	26 ef       	ldi	r18, 0xF6	; 246
    2b62:	38 e2       	ldi	r19, 0x28	; 40
    2b64:	4c e9       	ldi	r20, 0x9C	; 156
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 18 2c 	call	0x5830	; 0x5830 <__divsf3>
    2b6c:	20 2f       	mov	r18, r16
    2b6e:	31 2f       	mov	r19, r17
    2b70:	4d 2f       	mov	r20, r29
    2b72:	5c 2f       	mov	r21, r28
    2b74:	0e 94 a2 2b 	call	0x5744	; 0x5744 <__addsf3>
    2b78:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <round>
}
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    2b86:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_Z7readADCv>
	uint16_t hold = readADC();
    2b8a:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    2b8e:	9c 01       	movw	r18, r24
    2b90:	ad ee       	ldi	r26, 0xED	; 237
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	68 94       	set
    2b9e:	16 f8       	bld	r1, 6
    2ba0:	b6 95       	lsr	r27
    2ba2:	a7 95       	ror	r26
    2ba4:	97 95       	ror	r25
    2ba6:	87 95       	ror	r24
    2ba8:	16 94       	lsr	r1
    2baa:	d1 f7       	brne	.-12     	; 0x2ba0 <_Z10getVoltagev+0x1a>
	return(hold);
}
    2bac:	08 95       	ret

00002bae <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    2bae:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    2bb2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    2bb6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    2bba:	81 11       	cpse	r24, r1
    2bbc:	22 c0       	rjmp	.+68     	; 0x2c02 <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    2bbe:	ec e7       	ldi	r30, 0x7C	; 124
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	86 60       	ori	r24, 0x06	; 6
    2bc6:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    2bc8:	80 81       	ld	r24, Z
    2bca:	80 6c       	ori	r24, 0xC0	; 192
    2bcc:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 62       	ori	r24, 0x20	; 32
    2bd2:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
			ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
			ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    2bd4:	ea e7       	ldi	r30, 0x7A	; 122
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	86 60       	ori	r24, 0x06	; 6
    2bdc:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    2bde:	80 81       	ld	r24, Z
    2be0:	80 62       	ori	r24, 0x20	; 32
    2be2:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    2be4:	80 81       	ld	r24, Z
    2be6:	88 60       	ori	r24, 0x08	; 8
    2be8:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    2bea:	80 81       	ld	r24, Z
    2bec:	80 68       	ori	r24, 0x80	; 128
    2bee:	80 83       	st	Z, r24

		if(enableSampling)
    2bf0:	66 23       	and	r22, r22
    2bf2:	21 f1       	breq	.+72     	; 0x2c3c <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    2bf4:	80 81       	ld	r24, Z
    2bf6:	88 60       	ori	r24, 0x08	; 8
    2bf8:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    2bfa:	80 81       	ld	r24, Z
    2bfc:	80 64       	ori	r24, 0x40	; 64
    2bfe:	80 83       	st	Z, r24
    2c00:	08 95       	ret
		/* The internal temperature has to be used
		 * with the internal reference of 1.1V.
		 * Channel 8 can not be selected with
		 * the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    2c02:	ec e7       	ldi	r30, 0x7C	; 124
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	90 81       	ld	r25, Z
    2c08:	90 6c       	ori	r25, 0xC0	; 192
    2c0a:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    2c0c:	81 30       	cpi	r24, 0x01	; 1
    2c0e:	21 f4       	brne	.+8      	; 0x2c18 <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    2c10:	80 81       	ld	r24, Z
    2c12:	88 60       	ori	r24, 0x08	; 8
    2c14:	80 83       	st	Z, r24
    2c16:	05 c0       	rjmp	.+10     	; 0x2c22 <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    2c18:	ec e7       	ldi	r30, 0x7C	; 124
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	87 60       	ori	r24, 0x07	; 7
    2c20:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 * by dividing by 128. Assumes that the
		 * standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    2c22:	ea e7       	ldi	r30, 0x7A	; 122
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	87 60       	ori	r24, 0x07	; 7
    2c2a:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 68       	ori	r24, 0x80	; 128
    2c30:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    2c32:	80 81       	ld	r24, Z
    2c34:	80 64       	ori	r24, 0x40	; 64
    2c36:	80 83       	st	Z, r24
		readADC();
    2c38:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_Z7readADCv>
    2c3c:	08 95       	ret

00002c3e <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2c3e:	fc 01       	movw	r30, r24
	while(*s)
    2c40:	21 91       	ld	r18, Z+
    2c42:	22 23       	and	r18, r18
    2c44:	41 f0       	breq	.+16     	; 0x2c56 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	20 53       	subi	r18, 0x30	; 48
    2c4a:	31 09       	sbc	r19, r1
    2c4c:	2a 30       	cpi	r18, 0x0A	; 10
    2c4e:	31 05       	cpc	r19, r1
    2c50:	b8 f3       	brcs	.-18     	; 0x2c40 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	08 95       	ret
		}
	}

	return( TRUE);
    2c56:	81 e0       	ldi	r24, 0x01	; 1
}
    2c58:	08 95       	ret

00002c5a <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    2c5a:	cf 93       	push	r28
    2c5c:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2c5e:	0e 94 3e 11 	call	0x227c	; 0x227c <_Z23clockConfigurationCheckv>

	cli();
    2c62:	f8 94       	cli
	if(activationSource == POWER_UP)
    2c64:	c1 11       	cpse	r28, r1
    2c66:	0e c0       	rjmp	.+28     	; 0x2c84 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    2c68:	82 30       	cpi	r24, 0x02	; 2
    2c6a:	31 f4       	brne	.+12     	; 0x2c78 <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c76:	3e c0       	rjmp	.+124    	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    2c78:	63 e0       	ldi	r22, 0x03	; 3
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c82:	38 c0       	rjmp	.+112    	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    2c84:	c2 30       	cpi	r28, 0x02	; 2
    2c86:	c9 f4       	brne	.+50     	; 0x2cba <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    2c88:	82 30       	cpi	r24, 0x02	; 2
    2c8a:	31 f4       	brne	.+12     	; 0x2c98 <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c96:	2e c0       	rjmp	.+92     	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	19 f0       	breq	.+6      	; 0x2ca2 <_Z13startEventNow19EventActionSource_t+0x48>
    2c9c:	83 50       	subi	r24, 0x03	; 3
    2c9e:	82 30       	cpi	r24, 0x02	; 2
    2ca0:	30 f4       	brcc	.+12     	; 0x2cae <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cac:	23 c0       	rjmp	.+70     	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    2cae:	63 e0       	ldi	r22, 0x03	; 3
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cb8:	1d c0       	rjmp	.+58     	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	31 f4       	brne	.+12     	; 0x2cca <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2cbe:	61 e0       	ldi	r22, 0x01	; 1
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cc8:	15 c0       	rjmp	.+42     	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    2cca:	81 30       	cpi	r24, 0x01	; 1
    2ccc:	31 f4       	brne	.+12     	; 0x2cda <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    2cce:	62 e0       	ldi	r22, 0x02	; 2
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cd8:	0d c0       	rjmp	.+26     	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    2cda:	84 30       	cpi	r24, 0x04	; 4
    2cdc:	31 f4       	brne	.+12     	; 0x2cea <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    2cde:	63 e0       	ldi	r22, 0x03	; 3
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    2cea:	63 e0       	ldi	r22, 0x03	; 3
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    2cf4:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
	sei();
    2cf8:	78 94       	sei

/*	g_current_epoch = rv3028_get_epoch();
 *	lb_send_string((char*)"Sync OK\n", FALSE); */
}
    2cfa:	cf 91       	pop	r28
    2cfc:	08 95       	ret

00002cfe <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    2cfe:	cf 93       	push	r28
    2d00:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2d02:	0e 94 3e 11 	call	0x227c	; 0x227c <_Z23clockConfigurationCheckv>

	cli();
    2d06:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    2d08:	c2 30       	cpi	r28, 0x02	; 2
    2d0a:	31 f4       	brne	.+12     	; 0x2d18 <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d16:	15 c0       	rjmp	.+42     	; 0x2d42 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	31 f4       	brne	.+12     	; 0x2d28 <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    2d1c:	62 e0       	ldi	r22, 0x02	; 2
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    2d28:	84 30       	cpi	r24, 0x04	; 4
    2d2a:	31 f4       	brne	.+12     	; 0x2d38 <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d36:	05 c0       	rjmp	.+10     	; 0x2d42 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    2d42:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	21 f4       	brne	.+8      	; 0x2d52 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	8d e0       	ldi	r24, 0x0D	; 13
    2d4e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
	}
}
    2d52:	cf 91       	pop	r28
    2d54:	08 95       	ret

00002d56 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2d56:	1f 92       	push	r1
    2d58:	0f 92       	push	r0
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	0f 92       	push	r0
    2d5e:	11 24       	eor	r1, r1
    2d60:	2f 93       	push	r18
    2d62:	3f 93       	push	r19
    2d64:	4f 93       	push	r20
    2d66:	5f 93       	push	r21
    2d68:	6f 93       	push	r22
    2d6a:	7f 93       	push	r23
    2d6c:	8f 93       	push	r24
    2d6e:	9f 93       	push	r25
    2d70:	af 93       	push	r26
    2d72:	bf 93       	push	r27
    2d74:	ef 93       	push	r30
    2d76:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    2d78:	84 e0       	ldi	r24, 0x04	; 4
    2d7a:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>

	g_sync_pin_timer = 0;
    2d7e:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_sync_pin_timer+0x1>
    2d82:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_sync_pin_timer>

	if(pinVal)  /* Sync is high = button released */
    2d86:	88 23       	and	r24, r24
    2d88:	d9 f0       	breq	.+54     	; 0x2dc0 <__vector_5+0x6a>
	{
		if(g_transmissions_disabled)
    2d8a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    2d8e:	88 23       	and	r24, r24
    2d90:	71 f0       	breq	.+28     	; 0x2dae <__vector_5+0x58>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2d92:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	99 f4       	brne	.+38     	; 0x2dc0 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    2d9a:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	8d e0       	ldi	r24, 0x0D	; 13
    2da2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
				startEventNow(PUSHBUTTON);
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_Z13startEventNow19EventActionSource_t>
    2dac:	09 c0       	rjmp	.+18     	; 0x2dc0 <__vector_5+0x6a>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2dae:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2db2:	82 30       	cpi	r24, 0x02	; 2
    2db4:	29 f4       	brne	.+10     	; 0x2dc0 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    2db6:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sync_pin_stable>
				stopEventNow(PUSHBUTTON);
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_Z12stopEventNow19EventActionSource_t>
			}
		}
	}
}
    2dc0:	ff 91       	pop	r31
    2dc2:	ef 91       	pop	r30
    2dc4:	bf 91       	pop	r27
    2dc6:	af 91       	pop	r26
    2dc8:	9f 91       	pop	r25
    2dca:	8f 91       	pop	r24
    2dcc:	7f 91       	pop	r23
    2dce:	6f 91       	pop	r22
    2dd0:	5f 91       	pop	r21
    2dd2:	4f 91       	pop	r20
    2dd4:	3f 91       	pop	r19
    2dd6:	2f 91       	pop	r18
    2dd8:	0f 90       	pop	r0
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	0f 90       	pop	r0
    2dde:	1f 90       	pop	r1
    2de0:	18 95       	reti

00002de2 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	g_current_epoch = rv3028_get_epoch();
    2de2:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_Z16rv3028_get_epochv>
    2de6:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_current_epoch>
    2dea:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_current_epoch+0x1>
    2dee:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_current_epoch+0x2>
    2df2:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    2df6:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_messages_text+0x15>
    2dfa:	81 11       	cpse	r24, r1
    2dfc:	05 c0       	rjmp	.+10     	; 0x2e08 <_Z18reportConfigErrorsv+0x26>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    2dfe:	65 e0       	ldi	r22, 0x05	; 5
    2e00:	8c e9       	ldi	r24, 0x9C	; 156
    2e02:	95 e0       	ldi	r25, 0x05	; 5
    2e04:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    2e08:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2e0c:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2e10:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2e14:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2e18:	81 15       	cp	r24, r1
    2e1a:	96 46       	sbci	r25, 0x66	; 102
    2e1c:	ae 4e       	sbci	r26, 0xEE	; 238
    2e1e:	bf 45       	sbci	r27, 0x5F	; 95
    2e20:	28 f4       	brcc	.+10     	; 0x2e2c <_Z18reportConfigErrorsv+0x4a>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2e22:	62 e0       	ldi	r22, 0x02	; 2
    2e24:	8c e9       	ldi	r24, 0x9C	; 156
    2e26:	95 e0       	ldi	r25, 0x05	; 5
    2e28:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    2e2c:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
    2e30:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    2e34:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    2e38:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    2e3c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2e40:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2e44:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2e48:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2e4c:	48 17       	cp	r20, r24
    2e4e:	59 07       	cpc	r21, r25
    2e50:	6a 07       	cpc	r22, r26
    2e52:	7b 07       	cpc	r23, r27
    2e54:	00 f5       	brcc	.+64     	; 0x2e96 <_Z18reportConfigErrorsv+0xb4>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2e56:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    2e5a:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2e5e:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2e62:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2e66:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2e6a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2e6e:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2e72:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2e76:	48 17       	cp	r20, r24
    2e78:	59 07       	cpc	r21, r25
    2e7a:	6a 07       	cpc	r22, r26
    2e7c:	7b 07       	cpc	r23, r27
    2e7e:	28 f4       	brcc	.+10     	; 0x2e8a <_Z18reportConfigErrorsv+0xa8>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    2e80:	63 e0       	ldi	r22, 0x03	; 3
    2e82:	8c e9       	ldi	r24, 0x9C	; 156
    2e84:	95 e0       	ldi	r25, 0x05	; 5
    2e86:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2e8a:	64 e0       	ldi	r22, 0x04	; 4
    2e8c:	8c e9       	ldi	r24, 0x9C	; 156
    2e8e:	95 e0       	ldi	r25, 0x05	; 5
    2e90:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2e94:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    2e96:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    2e9a:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2e9e:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2ea2:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2ea6:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2eaa:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2eae:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2eb2:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2eb6:	48 17       	cp	r20, r24
    2eb8:	59 07       	cpc	r21, r25
    2eba:	6a 07       	cpc	r22, r26
    2ebc:	7b 07       	cpc	r23, r27
    2ebe:	28 f4       	brcc	.+10     	; 0x2eca <_Z18reportConfigErrorsv+0xe8>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	81 e3       	ldi	r24, 0x31	; 49
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    2eca:	08 95       	ret

00002ecc <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    2ecc:	2f 92       	push	r2
    2ece:	3f 92       	push	r3
    2ed0:	4f 92       	push	r4
    2ed2:	5f 92       	push	r5
    2ed4:	6f 92       	push	r6
    2ed6:	7f 92       	push	r7
    2ed8:	8f 92       	push	r8
    2eda:	9f 92       	push	r9
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	2c 97       	sbiw	r28, 0x0c	; 12
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	2b 01       	movw	r4, r22
    2f02:	3c 01       	movw	r6, r24
    2f04:	49 01       	movw	r8, r18
    2f06:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2f08:	62 17       	cp	r22, r18
    2f0a:	73 07       	cpc	r23, r19
    2f0c:	84 07       	cpc	r24, r20
    2f0e:	95 07       	cpc	r25, r21
    2f10:	50 f0       	brcs	.+20     	; 0x2f26 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2f12:	e1 14       	cp	r14, r1
    2f14:	f1 04       	cpc	r15, r1
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <_Z14reportTimeTillmmPKcS0_+0x4e>
    2f18:	04 c1       	rjmp	.+520    	; 0x3122 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	c7 01       	movw	r24, r14
    2f1e:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	ff c0       	rjmp	.+510    	; 0x3124 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    2f26:	01 15       	cp	r16, r1
    2f28:	11 05       	cpc	r17, r1
    2f2a:	21 f0       	breq	.+8      	; 0x2f34 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	c8 01       	movw	r24, r16
    2f30:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2f34:	75 01       	movw	r14, r10
    2f36:	64 01       	movw	r12, r8
    2f38:	c4 18       	sub	r12, r4
    2f3a:	d5 08       	sbc	r13, r5
    2f3c:	e6 08       	sbc	r14, r6
    2f3e:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2f40:	c7 01       	movw	r24, r14
    2f42:	b6 01       	movw	r22, r12
    2f44:	20 e8       	ldi	r18, 0x80	; 128
    2f46:	33 e3       	ldi	r19, 0x33	; 51
    2f48:	41 ee       	ldi	r20, 0xE1	; 225
    2f4a:	51 e0       	ldi	r21, 0x01	; 1
    2f4c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__udivmodsi4>
    2f50:	29 01       	movw	r4, r18
    2f52:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2f54:	44 27       	eor	r20, r20
    2f56:	55 27       	eor	r21, r21
    2f58:	60 e8       	ldi	r22, 0x80	; 128
    2f5a:	73 e3       	ldi	r23, 0x33	; 51
    2f5c:	81 ee       	ldi	r24, 0xE1	; 225
    2f5e:	91 e0       	ldi	r25, 0x01	; 1
    2f60:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__mulsi3>
    2f64:	c6 1a       	sub	r12, r22
    2f66:	d7 0a       	sbc	r13, r23
    2f68:	e8 0a       	sbc	r14, r24
    2f6a:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2f6c:	c7 01       	movw	r24, r14
    2f6e:	b6 01       	movw	r22, r12
    2f70:	20 e8       	ldi	r18, 0x80	; 128
    2f72:	31 e5       	ldi	r19, 0x51	; 81
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__udivmodsi4>
    2f7c:	49 01       	movw	r8, r18
    2f7e:	5a 01       	movw	r10, r20
    2f80:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2f82:	44 27       	eor	r20, r20
    2f84:	55 27       	eor	r21, r21
    2f86:	60 e8       	ldi	r22, 0x80	; 128
    2f88:	71 e5       	ldi	r23, 0x51	; 81
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__mulsi3>
    2f92:	c6 1a       	sub	r12, r22
    2f94:	d7 0a       	sbc	r13, r23
    2f96:	e8 0a       	sbc	r14, r24
    2f98:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2f9a:	c7 01       	movw	r24, r14
    2f9c:	b6 01       	movw	r22, r12
    2f9e:	20 e1       	ldi	r18, 0x10	; 16
    2fa0:	3e e0       	ldi	r19, 0x0E	; 14
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__udivmodsi4>
    2faa:	29 83       	std	Y+1, r18	; 0x01
    2fac:	3a 83       	std	Y+2, r19	; 0x02
    2fae:	4b 83       	std	Y+3, r20	; 0x03
    2fb0:	5c 83       	std	Y+4, r21	; 0x04
    2fb2:	29 81       	ldd	r18, Y+1	; 0x01
    2fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fb6:	3a 87       	std	Y+10, r19	; 0x0a
    2fb8:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2fba:	29 81       	ldd	r18, Y+1	; 0x01
    2fbc:	3a 81       	ldd	r19, Y+2	; 0x02
    2fbe:	4b 81       	ldd	r20, Y+3	; 0x03
    2fc0:	5c 81       	ldd	r21, Y+4	; 0x04
    2fc2:	44 27       	eor	r20, r20
    2fc4:	55 27       	eor	r21, r21
    2fc6:	a0 e1       	ldi	r26, 0x10	; 16
    2fc8:	be e0       	ldi	r27, 0x0E	; 14
    2fca:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__muluhisi3>
    2fce:	c6 1a       	sub	r12, r22
    2fd0:	d7 0a       	sbc	r13, r23
    2fd2:	e8 0a       	sbc	r14, r24
    2fd4:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    2fd6:	c7 01       	movw	r24, r14
    2fd8:	b6 01       	movw	r22, r12
    2fda:	2c e3       	ldi	r18, 0x3C	; 60
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__udivmodsi4>
    2fe6:	2d 83       	std	Y+5, r18	; 0x05
    2fe8:	3e 83       	std	Y+6, r19	; 0x06
    2fea:	4f 83       	std	Y+7, r20	; 0x07
    2fec:	58 87       	std	Y+8, r21	; 0x08
    2fee:	0d 81       	ldd	r16, Y+5	; 0x05
    2ff0:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2ff2:	2c e3       	ldi	r18, 0x3C	; 60
    2ff4:	20 9f       	mul	r18, r16
    2ff6:	c0 01       	movw	r24, r0
    2ff8:	21 9f       	mul	r18, r17
    2ffa:	90 0d       	add	r25, r0
    2ffc:	11 24       	eor	r1, r1
    2ffe:	a6 01       	movw	r20, r12
    3000:	48 1b       	sub	r20, r24
    3002:	59 0b       	sbc	r21, r25
    3004:	5c 87       	std	Y+12, r21	; 0x0c
    3006:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    3008:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_tempStr>

		if(years)
    300c:	41 14       	cp	r4, r1
    300e:	51 04       	cpc	r5, r1
    3010:	b9 f0       	breq	.+46     	; 0x3040 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    3012:	5f 92       	push	r5
    3014:	4f 92       	push	r4
    3016:	83 e4       	ldi	r24, 0x43	; 67
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	9f 93       	push	r25
    301c:	8f 93       	push	r24
    301e:	8b ed       	ldi	r24, 0xDB	; 219
    3020:	94 e0       	ldi	r25, 0x04	; 4
    3022:	9f 93       	push	r25
    3024:	8f 93       	push	r24
    3026:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
			lb_send_string(g_tempStr, TRUE);
    302a:	61 e0       	ldi	r22, 0x01	; 1
    302c:	8b ed       	ldi	r24, 0xDB	; 219
    302e:	94 e0       	ldi	r25, 0x04	; 4
    3030:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
		}

		if(days)
    3040:	23 28       	or	r2, r3
    3042:	b9 f0       	breq	.+46     	; 0x3072 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    3044:	9f 92       	push	r9
    3046:	8f 92       	push	r8
    3048:	8b e4       	ldi	r24, 0x4B	; 75
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	9f 93       	push	r25
    304e:	8f 93       	push	r24
    3050:	8b ed       	ldi	r24, 0xDB	; 219
    3052:	94 e0       	ldi	r25, 0x04	; 4
    3054:	9f 93       	push	r25
    3056:	8f 93       	push	r24
    3058:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
			lb_send_string(g_tempStr, TRUE);
    305c:	61 e0       	ldi	r22, 0x01	; 1
    305e:	8b ed       	ldi	r24, 0xDB	; 219
    3060:	94 e0       	ldi	r25, 0x04	; 4
    3062:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
		}

		if(hours)
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	89 2b       	or	r24, r25
    3078:	c9 f0       	breq	.+50     	; 0x30ac <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    307a:	9a 81       	ldd	r25, Y+2	; 0x02
    307c:	9f 93       	push	r25
    307e:	e9 81       	ldd	r30, Y+1	; 0x01
    3080:	ef 93       	push	r30
    3082:	84 e5       	ldi	r24, 0x54	; 84
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	9f 93       	push	r25
    3088:	8f 93       	push	r24
    308a:	8b ed       	ldi	r24, 0xDB	; 219
    308c:	94 e0       	ldi	r25, 0x04	; 4
    308e:	9f 93       	push	r25
    3090:	8f 93       	push	r24
    3092:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	8b ed       	ldi	r24, 0xDB	; 219
    309a:	94 e0       	ldi	r25, 0x04	; 4
    309c:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
		}

		if(minutes)
    30ac:	01 2b       	or	r16, r17
    30ae:	c9 f0       	breq	.+50     	; 0x30e2 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    30b0:	fe 81       	ldd	r31, Y+6	; 0x06
    30b2:	ff 93       	push	r31
    30b4:	2d 81       	ldd	r18, Y+5	; 0x05
    30b6:	2f 93       	push	r18
    30b8:	8c e5       	ldi	r24, 0x5C	; 92
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	9f 93       	push	r25
    30be:	8f 93       	push	r24
    30c0:	8b ed       	ldi	r24, 0xDB	; 219
    30c2:	94 e0       	ldi	r25, 0x04	; 4
    30c4:	9f 93       	push	r25
    30c6:	8f 93       	push	r24
    30c8:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
			lb_send_string(g_tempStr, TRUE);
    30cc:	61 e0       	ldi	r22, 0x01	; 1
    30ce:	8b ed       	ldi	r24, 0xDB	; 219
    30d0:	94 e0       	ldi	r25, 0x04	; 4
    30d2:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    30e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    30e4:	3f 93       	push	r19
    30e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    30e8:	4f 93       	push	r20
    30ea:	84 e6       	ldi	r24, 0x64	; 100
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	9f 93       	push	r25
    30f0:	8f 93       	push	r24
    30f2:	8b ed       	ldi	r24, 0xDB	; 219
    30f4:	94 e0       	ldi	r25, 0x04	; 4
    30f6:	9f 93       	push	r25
    30f8:	8f 93       	push	r24
    30fa:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
		lb_send_string(g_tempStr, TRUE);
    30fe:	61 e0       	ldi	r22, 0x01	; 1
    3100:	8b ed       	ldi	r24, 0xDB	; 219
    3102:	94 e0       	ldi	r25, 0x04	; 4
    3104:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    3108:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    310c:	eb ed       	ldi	r30, 0xDB	; 219
    310e:	f4 e0       	ldi	r31, 0x04	; 4
    3110:	10 82       	st	Z, r1
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	01 c0       	rjmp	.+2      	; 0x3124 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3122:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3124:	2c 96       	adiw	r28, 0x0c	; 12
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	7f 90       	pop	r7
    314a:	6f 90       	pop	r6
    314c:	5f 90       	pop	r5
    314e:	4f 90       	pop	r4
    3150:	3f 90       	pop	r3
    3152:	2f 90       	pop	r2
    3154:	08 95       	ret

00003156 <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
	setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    315e:	63 e0       	ldi	r22, 0x03	; 3
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
	g_current_epoch = rv3028_get_epoch();
    3168:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_Z16rv3028_get_epochv>
    316c:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_current_epoch>
    3170:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_current_epoch+0x1>
    3174:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_current_epoch+0x2>
    3178:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    317c:	0e 94 3e 11 	call	0x227c	; 0x227c <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    3180:	82 30       	cpi	r24, 0x02	; 2
    3182:	09 f4       	brne	.+2      	; 0x3186 <_Z18startEventUsingRTCv+0x30>
    3184:	5a c0       	rjmp	.+180    	; 0x323a <_Z18startEventUsingRTCv+0xe4>
	{
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    3186:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_event_start_epoch>
    318a:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    318e:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3192:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3196:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    319a:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    319e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    31a2:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    31a6:	0f 2e       	mov	r0, r31
    31a8:	fb e6       	ldi	r31, 0x6B	; 107
    31aa:	ef 2e       	mov	r14, r31
    31ac:	f1 e0       	ldi	r31, 0x01	; 1
    31ae:	ff 2e       	mov	r15, r31
    31b0:	f0 2d       	mov	r31, r0
    31b2:	08 e7       	ldi	r16, 0x78	; 120
    31b4:	11 e0       	ldi	r17, 0x01	; 1
    31b6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    31ba:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    31be:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    31c2:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    31c6:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    31ca:	60 91 87 05 	lds	r22, 0x0587	; 0x800587 <g_event_start_epoch>
    31ce:	70 91 88 05 	lds	r23, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    31d2:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    31d6:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    31da:	e1 2c       	mov	r14, r1
    31dc:	f1 2c       	mov	r15, r1
    31de:	04 e8       	ldi	r16, 0x84	; 132
    31e0:	11 e0       	ldi	r17, 0x01	; 1
    31e2:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    31e6:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    31ea:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    31ee:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    31f2:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    31f6:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    31fa:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    31fe:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3202:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3206:	48 17       	cp	r20, r24
    3208:	59 07       	cpc	r21, r25
    320a:	6a 07       	cpc	r22, r26
    320c:	7b 07       	cpc	r23, r27
    320e:	b8 f4       	brcc	.+46     	; 0x323e <_Z18startEventUsingRTCv+0xe8>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3210:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3214:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3218:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    321c:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3220:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3224:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3228:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    322c:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3230:	0c e8       	ldi	r16, 0x8C	; 140
    3232:	11 e0       	ldi	r17, 0x01	; 1
    3234:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
    3238:	02 c0       	rjmp	.+4      	; 0x323e <_Z18startEventUsingRTCv+0xe8>
		}
	}
	else
	{
		reportConfigErrors();
    323a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_Z18reportConfigErrorsv>
	}
}
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	08 95       	ret

00003248 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
    3248:	4f 92       	push	r4
    324a:	5f 92       	push	r5
    324c:	6f 92       	push	r6
    324e:	7f 92       	push	r7
    3250:	8f 92       	push	r8
    3252:	9f 92       	push	r9
    3254:	af 92       	push	r10
    3256:	bf 92       	push	r11
    3258:	ef 92       	push	r14
    325a:	ff 92       	push	r15
    325c:	0f 93       	push	r16
    325e:	1f 93       	push	r17
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	2c 97       	sbiw	r28, 0x0c	; 12
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	8c 01       	movw	r16, r24
    3276:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    3278:	fc 01       	movw	r30, r24
    327a:	01 90       	ld	r0, Z+
    327c:	00 20       	and	r0, r0
    327e:	e9 f7       	brne	.-6      	; 0x327a <_Z18validateTimeStringPcPma+0x32>
    3280:	31 97       	sbiw	r30, 0x01	; 1
    3282:	e8 1b       	sub	r30, r24
    3284:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    3286:	25 e0       	ldi	r18, 0x05	; 5
    3288:	67 38       	cpi	r22, 0x87	; 135
    328a:	72 07       	cpc	r23, r18
    328c:	49 f5       	brne	.+82     	; 0x32e0 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    328e:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3292:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3296:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    329a:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    329e:	89 87       	std	Y+9, r24	; 0x09
    32a0:	9a 87       	std	Y+10, r25	; 0x0a
    32a2:	ab 87       	std	Y+11, r26	; 0x0b
    32a4:	bc 87       	std	Y+12, r27	; 0x0c
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	96 e6       	ldi	r25, 0x66	; 102
    32aa:	ae ee       	ldi	r26, 0xEE	; 238
    32ac:	bf e5       	ldi	r27, 0x5F	; 95
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	ab 83       	std	Y+3, r26	; 0x03
    32b4:	bc 83       	std	Y+4, r27	; 0x04
    32b6:	89 85       	ldd	r24, Y+9	; 0x09
    32b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    32bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    32be:	81 15       	cp	r24, r1
    32c0:	96 46       	sbci	r25, 0x66	; 102
    32c2:	ae 4e       	sbci	r26, 0xEE	; 238
    32c4:	bf 45       	sbci	r27, 0x5F	; 95
    32c6:	28 f4       	brcc	.+10     	; 0x32d2 <_Z18validateTimeStringPcPma+0x8a>
    32c8:	89 80       	ldd	r8, Y+1	; 0x01
    32ca:	9a 80       	ldd	r9, Y+2	; 0x02
    32cc:	ab 80       	ldd	r10, Y+3	; 0x03
    32ce:	bc 80       	ldd	r11, Y+4	; 0x04
    32d0:	04 c0       	rjmp	.+8      	; 0x32da <_Z18validateTimeStringPcPma+0x92>
    32d2:	89 84       	ldd	r8, Y+9	; 0x09
    32d4:	9a 84       	ldd	r9, Y+10	; 0x0a
    32d6:	ab 84       	ldd	r10, Y+11	; 0x0b
    32d8:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    32da:	ff 24       	eor	r15, r15
    32dc:	f3 94       	inc	r15
    32de:	42 c0       	rjmp	.+132    	; 0x3364 <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    32e0:	63 58       	subi	r22, 0x83	; 131
    32e2:	75 40       	sbci	r23, 0x05	; 5
    32e4:	a9 f5       	brne	.+106    	; 0x3350 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    32e6:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    32ea:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    32ee:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    32f2:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	af 83       	std	Y+7, r26	; 0x07
    32fc:	b8 87       	std	Y+8, r27	; 0x08
    32fe:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3302:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3306:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    330a:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	9a 83       	std	Y+2, r25	; 0x02
    3312:	ab 83       	std	Y+3, r26	; 0x03
    3314:	bc 83       	std	Y+4, r27	; 0x04
    3316:	4d 81       	ldd	r20, Y+5	; 0x05
    3318:	5e 81       	ldd	r21, Y+6	; 0x06
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	ab 81       	ldd	r26, Y+3	; 0x03
    3324:	bc 81       	ldd	r27, Y+4	; 0x04
    3326:	48 17       	cp	r20, r24
    3328:	59 07       	cpc	r21, r25
    332a:	6a 07       	cpc	r22, r26
    332c:	7b 07       	cpc	r23, r27
    332e:	40 f4       	brcc	.+16     	; 0x3340 <_Z18validateTimeStringPcPma+0xf8>
    3330:	89 80       	ldd	r8, Y+1	; 0x01
    3332:	9a 80       	ldd	r9, Y+2	; 0x02
    3334:	ab 80       	ldd	r10, Y+3	; 0x03
    3336:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    3338:	68 94       	set
    333a:	ff 24       	eor	r15, r15
    333c:	f1 f8       	bld	r15, 1
    333e:	12 c0       	rjmp	.+36     	; 0x3364 <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    3340:	8d 80       	ldd	r8, Y+5	; 0x05
    3342:	9e 80       	ldd	r9, Y+6	; 0x06
    3344:	af 80       	ldd	r10, Y+7	; 0x07
    3346:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    3348:	68 94       	set
    334a:	ff 24       	eor	r15, r15
    334c:	f1 f8       	bld	r15, 1
    334e:	0a c0       	rjmp	.+20     	; 0x3364 <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    3350:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    3352:	0f 2e       	mov	r0, r31
    3354:	81 2c       	mov	r8, r1
    3356:	f6 e6       	ldi	r31, 0x66	; 102
    3358:	9f 2e       	mov	r9, r31
    335a:	fe ee       	ldi	r31, 0xEE	; 238
    335c:	af 2e       	mov	r10, r31
    335e:	ff e5       	ldi	r31, 0x5F	; 95
    3360:	bf 2e       	mov	r11, r31
    3362:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    3364:	ec 30       	cpi	r30, 0x0C	; 12
    3366:	f1 05       	cpc	r31, r1
    3368:	09 f0       	breq	.+2      	; 0x336c <_Z18validateTimeStringPcPma+0x124>
    336a:	5e c0       	rjmp	.+188    	; 0x3428 <_Z18validateTimeStringPcPma+0x1e0>
    336c:	c8 01       	movw	r24, r16
    336e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_Z11only_digitsPc>
    3372:	88 23       	and	r24, r24
    3374:	09 f4       	brne	.+2      	; 0x3378 <_Z18validateTimeStringPcPma+0x130>
    3376:	4f c0       	rjmp	.+158    	; 0x3416 <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    3378:	b8 01       	movw	r22, r16
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 06 2a 	call	0x540c	; 0x540c <_Z16rv3028_get_epochPbPc>
    3382:	2b 01       	movw	r4, r22
    3384:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    3386:	ae 2d       	mov	r26, r14
    3388:	ee 0c       	add	r14, r14
    338a:	bb 0b       	sbc	r27, r27
    338c:	20 e1       	ldi	r18, 0x10	; 16
    338e:	3e e0       	ldi	r19, 0x0E	; 14
    3390:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <__usmulhisi3>
    3394:	64 0d       	add	r22, r4
    3396:	75 1d       	adc	r23, r5
    3398:	86 1d       	adc	r24, r6
    339a:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    339c:	86 16       	cp	r8, r22
    339e:	97 06       	cpc	r9, r23
    33a0:	a8 06       	cpc	r10, r24
    33a2:	b9 06       	cpc	r11, r25
    33a4:	08 f4       	brcc	.+2      	; 0x33a8 <_Z18validateTimeStringPcPma+0x160>
    33a6:	45 c0       	rjmp	.+138    	; 0x3432 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    33a8:	21 e0       	ldi	r18, 0x01	; 1
    33aa:	f2 12       	cpse	r15, r18
    33ac:	09 c0       	rjmp	.+18     	; 0x33c0 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    33ae:	68 e0       	ldi	r22, 0x08	; 8
    33b0:	8c e9       	ldi	r24, 0x9C	; 156
    33b2:	95 e0       	ldi	r25, 0x05	; 5
    33b4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	cb 01       	movw	r24, r22
    33be:	39 c0       	rjmp	.+114    	; 0x3432 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    33c0:	22 e0       	ldi	r18, 0x02	; 2
    33c2:	f2 12       	cpse	r15, r18
    33c4:	1f c0       	rjmp	.+62     	; 0x3404 <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    33c6:	00 91 8b 05 	lds	r16, 0x058B	; 0x80058b <g_current_epoch>
    33ca:	10 91 8c 05 	lds	r17, 0x058C	; 0x80058c <g_current_epoch+0x1>
    33ce:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <g_current_epoch+0x2>
    33d2:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <g_current_epoch+0x3>
    33d6:	60 17       	cp	r22, r16
    33d8:	71 07       	cpc	r23, r17
    33da:	82 07       	cpc	r24, r18
    33dc:	93 07       	cpc	r25, r19
    33de:	48 f4       	brcc	.+18     	; 0x33f2 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    33e0:	67 e0       	ldi	r22, 0x07	; 7
    33e2:	8c e9       	ldi	r24, 0x9C	; 156
    33e4:	95 e0       	ldi	r25, 0x05	; 5
    33e6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	70 e0       	ldi	r23, 0x00	; 0
    33ee:	cb 01       	movw	r24, r22
    33f0:	20 c0       	rjmp	.+64     	; 0x3432 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	8c e9       	ldi	r24, 0x9C	; 156
    33f6:	95 e0       	ldi	r25, 0x05	; 5
    33f8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	cb 01       	movw	r24, r22
    3402:	17 c0       	rjmp	.+46     	; 0x3432 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    3404:	6a e0       	ldi	r22, 0x0A	; 10
    3406:	8c e9       	ldi	r24, 0x9C	; 156
    3408:	95 e0       	ldi	r25, 0x05	; 5
    340a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	cb 01       	movw	r24, r22
    3414:	0e c0       	rjmp	.+28     	; 0x3432 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    3416:	69 e0       	ldi	r22, 0x09	; 9
    3418:	8c e9       	ldi	r24, 0x9C	; 156
    341a:	95 e0       	ldi	r25, 0x05	; 5
    341c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	cb 01       	movw	r24, r22
    3426:	05 c0       	rjmp	.+10     	; 0x3432 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    3428:	ef 2b       	or	r30, r31
    342a:	a9 f7       	brne	.-22     	; 0x3416 <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	70 e0       	ldi	r23, 0x00	; 0
    3430:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    3432:	2c 96       	adiw	r28, 0x0c	; 12
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	bf 90       	pop	r11
    344c:	af 90       	pop	r10
    344e:	9f 90       	pop	r9
    3450:	8f 90       	pop	r8
    3452:	7f 90       	pop	r7
    3454:	6f 90       	pop	r6
    3456:	5f 90       	pop	r5
    3458:	4f 90       	pop	r4
    345a:	08 95       	ret

0000345c <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	BOOL enableAM = TRUE;

	switch(value)
    345c:	83 30       	cpi	r24, 0x03	; 3
    345e:	09 f1       	breq	.+66     	; 0x34a2 <_Z18setAMToneFrequencyh+0x46>
    3460:	28 f4       	brcc	.+10     	; 0x346c <_Z18setAMToneFrequencyh+0x10>
    3462:	88 23       	and	r24, r24
    3464:	49 f0       	breq	.+18     	; 0x3478 <_Z18setAMToneFrequencyh+0x1c>
    3466:	82 30       	cpi	r24, 0x02	; 2
    3468:	a9 f0       	breq	.+42     	; 0x3494 <_Z18setAMToneFrequencyh+0x38>
    346a:	37 c0       	rjmp	.+110    	; 0x34da <_Z18setAMToneFrequencyh+0x7e>
    346c:	85 30       	cpi	r24, 0x05	; 5
    346e:	39 f1       	breq	.+78     	; 0x34be <_Z18setAMToneFrequencyh+0x62>
    3470:	f8 f0       	brcs	.+62     	; 0x34b0 <_Z18setAMToneFrequencyh+0x54>
    3472:	86 30       	cpi	r24, 0x06	; 6
    3474:	59 f1       	breq	.+86     	; 0x34cc <_Z18setAMToneFrequencyh+0x70>
    3476:	31 c0       	rjmp	.+98     	; 0x34da <_Z18setAMToneFrequencyh+0x7e>
	{
		case 0:
		{
			enableAM = FALSE;
			OCR1A = 1000;
    3478:	88 ee       	ldi	r24, 0xE8	; 232
    347a:	93 e0       	ldi	r25, 0x03	; 3
    347c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3480:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			linkbus_init(BAUD);
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	71 ee       	ldi	r23, 0xE1	; 225
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z12linkbus_initm>

	switch(value)
	{
		case 0:
		{
			enableAM = FALSE;
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	2a c0       	rjmp	.+84     	; 0x34e8 <_Z18setAMToneFrequencyh+0x8c>
		}
		break;

		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    3494:	8c e2       	ldi	r24, 0x2C	; 44
    3496:	92 e0       	ldi	r25, 0x02	; 2
    3498:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    349c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34a0:	26 c0       	rjmp	.+76     	; 0x34ee <_Z18setAMToneFrequencyh+0x92>

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    34a2:	81 e7       	ldi	r24, 0x71	; 113
    34a4:	92 e0       	ldi	r25, 0x02	; 2
    34a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34ae:	1f c0       	rjmp	.+62     	; 0x34ee <_Z18setAMToneFrequencyh+0x92>

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    34b0:	8a ec       	ldi	r24, 0xCA	; 202
    34b2:	92 e0       	ldi	r25, 0x02	; 2
    34b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34bc:	18 c0       	rjmp	.+48     	; 0x34ee <_Z18setAMToneFrequencyh+0x92>

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    34be:	81 e4       	ldi	r24, 0x41	; 65
    34c0:	93 e0       	ldi	r25, 0x03	; 3
    34c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34ca:	11 c0       	rjmp	.+34     	; 0x34ee <_Z18setAMToneFrequencyh+0x92>

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    34cc:	88 ee       	ldi	r24, 0xE8	; 232
    34ce:	93 e0       	ldi	r25, 0x03	; 3
    34d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34d8:	0a c0       	rjmp	.+20     	; 0x34ee <_Z18setAMToneFrequencyh+0x92>

		default:
		{
			OCR1A = 500;    /* For ~1000 Hz tone output */
    34da:	84 ef       	ldi	r24, 0xF4	; 244
    34dc:	91 e0       	ldi	r25, 0x01	; 1
    34de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <_Z18setAMToneFrequencyh+0x92>
		{
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
    34e8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_AM_enabled>
}
    34ec:	08 95       	ret
	}

#if !INIT_EEPROM_ONLY
		if(enableAM)
		{
			setupPortsForF1975();
    34ee:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_Z18setupPortsForF1975v>
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	f9 cf       	rjmp	.-14     	; 0x34e8 <_Z18setAMToneFrequencyh+0x8c>

000034f6 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to always optimize large switch statements correctly */
//void __attribute__((optimize("O3"))) handleLinkBusMsgs()
void handleLinkBusMsgs()
{
    34f6:	2f 92       	push	r2
    34f8:	3f 92       	push	r3
    34fa:	4f 92       	push	r4
    34fc:	5f 92       	push	r5
    34fe:	6f 92       	push	r6
    3500:	7f 92       	push	r7
    3502:	8f 92       	push	r8
    3504:	9f 92       	push	r9
    3506:	af 92       	push	r10
    3508:	bf 92       	push	r11
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	2c 97       	sbiw	r28, 0x0c	; 12
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    352a:	0f 2e       	mov	r0, r31
    352c:	fd e9       	ldi	r31, 0x9D	; 157
    352e:	6f 2e       	mov	r6, r31
    3530:	f1 e0       	ldi	r31, 0x01	; 1
    3532:	7f 2e       	mov	r7, r31
    3534:	f0 2d       	mov	r31, r0
    3536:	0f 2e       	mov	r0, r31
    3538:	fb ed       	ldi	r31, 0xDB	; 219
    353a:	af 2e       	mov	r10, r31
    353c:	f4 e0       	ldi	r31, 0x04	; 4
    353e:	bf 2e       	mov	r11, r31
    3540:	f0 2d       	mov	r31, r0
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);

						if(g_messages_text[STATION_ID][0])
    3542:	0f 2e       	mov	r0, r31
    3544:	f3 e1       	ldi	r31, 0x13	; 19
    3546:	2f 2e       	mov	r2, r31
    3548:	f5 e0       	ldi	r31, 0x05	; 5
    354a:	3f 2e       	mov	r3, r31
    354c:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, TRUE);
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    354e:	0f 2e       	mov	r0, r31
    3550:	f6 e1       	ldi	r31, 0x16	; 22
    3552:	8f 2e       	mov	r8, r31
    3554:	f2 e0       	ldi	r31, 0x02	; 2
    3556:	9f 2e       	mov	r9, r31
    3558:	f0 2d       	mov	r31, r0
				lb_send_string(g_tempStr, TRUE);

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    355a:	0f 2e       	mov	r0, r31
    355c:	fd e1       	ldi	r31, 0x1D	; 29
    355e:	4f 2e       	mov	r4, r31
    3560:	f2 e0       	ldi	r31, 0x02	; 2
    3562:	5f 2e       	mov	r5, r31
    3564:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    3566:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z16nextFullRxBufferv>
    356a:	6c 01       	movw	r12, r24
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	09 f4       	brne	.+2      	; 0x3572 <_Z17handleLinkBusMsgsv+0x7c>
    3570:	3b c5       	rjmp	.+2678   	; 0x3fe8 <_Z17handleLinkBusMsgsv+0xaf2>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    3572:	dc 01       	movw	r26, r24
    3574:	11 96       	adiw	r26, 0x01	; 1
    3576:	8d 91       	ld	r24, X+
    3578:	9c 91       	ld	r25, X
    357a:	12 97       	sbiw	r26, 0x02	; 2
    357c:	86 3c       	cpi	r24, 0xC6	; 198
    357e:	be e1       	ldi	r27, 0x1E	; 30
    3580:	9b 07       	cpc	r25, r27
    3582:	29 f1       	breq	.+74     	; 0x35ce <_Z17handleLinkBusMsgsv+0xd8>
    3584:	78 f4       	brcc	.+30     	; 0x35a4 <_Z17handleLinkBusMsgsv+0xae>
    3586:	8e 31       	cpi	r24, 0x1E	; 30
    3588:	f3 e0       	ldi	r31, 0x03	; 3
    358a:	9f 07       	cpc	r25, r31
    358c:	09 f4       	brne	.+2      	; 0x3590 <_Z17handleLinkBusMsgsv+0x9a>
    358e:	15 c1       	rjmp	.+554    	; 0x37ba <_Z17handleLinkBusMsgsv+0x2c4>
    3590:	8f 36       	cpi	r24, 0x6F	; 111
    3592:	2d e1       	ldi	r18, 0x1D	; 29
    3594:	92 07       	cpc	r25, r18
    3596:	09 f4       	brne	.+2      	; 0x359a <_Z17handleLinkBusMsgsv+0xa4>
    3598:	49 c2       	rjmp	.+1170   	; 0x3a2c <_Z17handleLinkBusMsgsv+0x536>
    359a:	87 3d       	cpi	r24, 0xD7	; 215
    359c:	92 40       	sbci	r25, 0x02	; 2
    359e:	09 f0       	breq	.+2      	; 0x35a2 <_Z17handleLinkBusMsgsv+0xac>
    35a0:	ff c4       	rjmp	.+2558   	; 0x3fa0 <_Z17handleLinkBusMsgsv+0xaaa>
    35a2:	ad c0       	rjmp	.+346    	; 0x36fe <_Z17handleLinkBusMsgsv+0x208>
    35a4:	82 37       	cpi	r24, 0x72	; 114
    35a6:	a3 e2       	ldi	r26, 0x23	; 35
    35a8:	9a 07       	cpc	r25, r26
    35aa:	09 f4       	brne	.+2      	; 0x35ae <_Z17handleLinkBusMsgsv+0xb8>
    35ac:	77 c1       	rjmp	.+750    	; 0x389c <_Z17handleLinkBusMsgsv+0x3a6>
    35ae:	28 f4       	brcc	.+10     	; 0x35ba <_Z17handleLinkBusMsgsv+0xc4>
    35b0:	8a 3e       	cpi	r24, 0xEA	; 234
    35b2:	92 42       	sbci	r25, 0x22	; 34
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <_Z17handleLinkBusMsgsv+0xc2>
    35b6:	05 c2       	rjmp	.+1034   	; 0x39c2 <_Z17handleLinkBusMsgsv+0x4cc>
    35b8:	f3 c4       	rjmp	.+2534   	; 0x3fa0 <_Z17handleLinkBusMsgsv+0xaaa>
    35ba:	84 33       	cpi	r24, 0x34	; 52
    35bc:	f4 e2       	ldi	r31, 0x24	; 36
    35be:	9f 07       	cpc	r25, r31
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <_Z17handleLinkBusMsgsv+0xce>
    35c2:	cf c0       	rjmp	.+414    	; 0x3762 <_Z17handleLinkBusMsgsv+0x26c>
    35c4:	85 3c       	cpi	r24, 0xC5	; 197
    35c6:	94 42       	sbci	r25, 0x24	; 36
    35c8:	09 f4       	brne	.+2      	; 0x35cc <_Z17handleLinkBusMsgsv+0xd6>
    35ca:	70 c4       	rjmp	.+2272   	; 0x3eac <_Z17handleLinkBusMsgsv+0x9b6>
    35cc:	e9 c4       	rjmp	.+2514   	; 0x3fa0 <_Z17handleLinkBusMsgsv+0xaaa>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    35ce:	d6 01       	movw	r26, r12
    35d0:	13 96       	adiw	r26, 0x03	; 3
    35d2:	8c 91       	ld	r24, X
    35d4:	13 97       	sbiw	r26, 0x03	; 3
    35d6:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	09 f4       	brne	.+2      	; 0x35de <_Z17handleLinkBusMsgsv+0xe8>
    35dc:	7b c0       	rjmp	.+246    	; 0x36d4 <_Z17handleLinkBusMsgsv+0x1de>
				{
					if(c == 'B')
    35de:	82 34       	cpi	r24, 0x42	; 66
    35e0:	91 05       	cpc	r25, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <_Z17handleLinkBusMsgsv+0xf0>
    35e4:	e9 c4       	rjmp	.+2514   	; 0x3fb8 <_Z17handleLinkBusMsgsv+0xac2>
					{
						c = BEACON;
					}
					else if(c == 'F')
    35e6:	86 34       	cpi	r24, 0x46	; 70
    35e8:	91 05       	cpc	r25, r1
    35ea:	09 f4       	brne	.+2      	; 0x35ee <_Z17handleLinkBusMsgsv+0xf8>
    35ec:	e7 c4       	rjmp	.+2510   	; 0x3fbc <_Z17handleLinkBusMsgsv+0xac6>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    35ee:	83 34       	cpi	r24, 0x43	; 67
    35f0:	91 05       	cpc	r25, r1
    35f2:	d1 f4       	brne	.+52     	; 0x3628 <_Z17handleLinkBusMsgsv+0x132>
					{
						char t = lb_buff->fields[FIELD2][0];
    35f4:	57 96       	adiw	r26, 0x17	; 23
    35f6:	8c 91       	ld	r24, X
    35f8:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    35fa:	58 96       	adiw	r26, 0x18	; 24
    35fc:	1c 92       	st	X, r1

						if(t == 'B')
    35fe:	82 34       	cpi	r24, 0x42	; 66
    3600:	29 f0       	breq	.+10     	; 0x360c <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	c0 97       	sbiw	r24, 0x30	; 48
    3606:	0a 97       	sbiw	r24, 0x0a	; 10
    3608:	08 f0       	brcs	.+2      	; 0x360c <_Z17handleLinkBusMsgsv+0x116>
    360a:	64 c0       	rjmp	.+200    	; 0x36d4 <_Z17handleLinkBusMsgsv+0x1de>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    360c:	c6 01       	movw	r24, r12
    360e:	47 96       	adiw	r24, 0x17	; 23
    3610:	0e 94 74 30 	call	0x60e8	; 0x60e8 <atoi>
    3614:	99 23       	and	r25, r25
    3616:	14 f4       	brge	.+4      	; 0x361c <_Z17handleLinkBusMsgsv+0x126>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	86 30       	cpi	r24, 0x06	; 6
    361e:	91 05       	cpc	r25, r1
    3620:	cc f1       	brlt	.+114    	; 0x3694 <_Z17handleLinkBusMsgsv+0x19e>
    3622:	85 e0       	ldi	r24, 0x05	; 5
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	36 c0       	rjmp	.+108    	; 0x3694 <_Z17handleLinkBusMsgsv+0x19e>
						}
					}
					else if(c == 'S')
    3628:	83 35       	cpi	r24, 0x53	; 83
    362a:	91 05       	cpc	r25, r1
    362c:	79 f5       	brne	.+94     	; 0x368c <_Z17handleLinkBusMsgsv+0x196>
					{
						char x = 0;
						char t = lb_buff->fields[FIELD2][0];
    362e:	f6 01       	movw	r30, r12
    3630:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    3632:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    3634:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    3636:	82 34       	cpi	r24, 0x42	; 66
    3638:	89 f1       	breq	.+98     	; 0x369c <_Z17handleLinkBusMsgsv+0x1a6>
						{
							x = BEACON;
						}
						else if(t == 'F')
    363a:	86 34       	cpi	r24, 0x46	; 70
    363c:	39 f4       	brne	.+14     	; 0x364c <_Z17handleLinkBusMsgsv+0x156>
						{
							if((u > '0') && (u < '6'))
    363e:	8f ec       	ldi	r24, 0xCF	; 207
    3640:	89 0f       	add	r24, r25
    3642:	85 30       	cpi	r24, 0x05	; 5
    3644:	68 f5       	brcc	.+90     	; 0x36a0 <_Z17handleLinkBusMsgsv+0x1aa>
							{
								x = SPRINT_F1 + (u - '1');
    3646:	8c ed       	ldi	r24, 0xDC	; 220
    3648:	89 0f       	add	r24, r25
    364a:	18 c0       	rjmp	.+48     	; 0x367c <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(t == 'S')
    364c:	83 35       	cpi	r24, 0x53	; 83
    364e:	39 f4       	brne	.+14     	; 0x365e <_Z17handleLinkBusMsgsv+0x168>
						{
							if((u > '0') && (u < '6'))
    3650:	8f ec       	ldi	r24, 0xCF	; 207
    3652:	89 0f       	add	r24, r25
    3654:	85 30       	cpi	r24, 0x05	; 5
    3656:	b8 f4       	brcc	.+46     	; 0x3686 <_Z17handleLinkBusMsgsv+0x190>
							{
								x = SPRINT_S1 + (u - '1');
    3658:	87 ed       	ldi	r24, 0xD7	; 215
    365a:	89 0f       	add	r24, r25
    365c:	0f c0       	rjmp	.+30     	; 0x367c <_Z17handleLinkBusMsgsv+0x186>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    365e:	96 34       	cpi	r25, 0x46	; 70
    3660:	31 f4       	brne	.+12     	; 0x366e <_Z17handleLinkBusMsgsv+0x178>
						{
							if((t > '0') && (t < '6'))
    3662:	9f ec       	ldi	r25, 0xCF	; 207
    3664:	98 0f       	add	r25, r24
    3666:	95 30       	cpi	r25, 0x05	; 5
    3668:	e8 f4       	brcc	.+58     	; 0x36a4 <_Z17handleLinkBusMsgsv+0x1ae>
							{
								x = SPRINT_F1 + (t - '1');
    366a:	84 52       	subi	r24, 0x24	; 36
    366c:	07 c0       	rjmp	.+14     	; 0x367c <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(u == 'S')
    366e:	93 35       	cpi	r25, 0x53	; 83
    3670:	d9 f4       	brne	.+54     	; 0x36a8 <_Z17handleLinkBusMsgsv+0x1b2>
						{
							if((t > '0') && (t < '6'))
    3672:	9f ec       	ldi	r25, 0xCF	; 207
    3674:	98 0f       	add	r25, r24
    3676:	95 30       	cpi	r25, 0x05	; 5
    3678:	c8 f4       	brcc	.+50     	; 0x36ac <_Z17handleLinkBusMsgsv+0x1b6>
							{
								x = SPRINT_S1 + (t - '1');
    367a:	89 52       	subi	r24, 0x29	; 41
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
    367c:	99 ef       	ldi	r25, 0xF9	; 249
    367e:	98 0f       	add	r25, r24
    3680:	9b 30       	cpi	r25, 0x0B	; 11
    3682:	10 f0       	brcs	.+4      	; 0x3688 <_Z17handleLinkBusMsgsv+0x192>
    3684:	9d c4       	rjmp	.+2362   	; 0x3fc0 <_Z17handleLinkBusMsgsv+0xaca>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    3686:	87 e0       	ldi	r24, 0x07	; 7
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
						{
							c = x;
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	04 c0       	rjmp	.+8      	; 0x3694 <_Z17handleLinkBusMsgsv+0x19e>
							c = BEACON;
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    368c:	c6 01       	movw	r24, r12
    368e:	03 96       	adiw	r24, 0x03	; 3
    3690:	0e 94 74 30 	call	0x60e8	; 0x60e8 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    3694:	82 31       	cpi	r24, 0x12	; 18
    3696:	91 05       	cpc	r25, r1
    3698:	e8 f4       	brcc	.+58     	; 0x36d4 <_Z17handleLinkBusMsgsv+0x1de>
    369a:	09 c0       	rjmp	.+18     	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	07 c0       	rjmp	.+14     	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	05 c0       	rjmp	.+10     	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
    36ac:	80 e0       	ldi	r24, 0x00	; 0
					{
						Fox_t holdFox = (Fox_t)c;
    36ae:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    36b0:	ae 01       	movw	r20, r28
    36b2:	4f 5f       	subi	r20, 0xFF	; 255
    36b4:	5f 4f       	sbci	r21, 0xFF	; 255
    36b6:	60 e1       	ldi	r22, 0x10	; 16
    36b8:	8c e9       	ldi	r24, 0x9C	; 156
    36ba:	95 e0       	ldi	r25, 0x05	; 5
    36bc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    36c0:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    36c4:	99 81       	ldd	r25, Y+1	; 0x01
    36c6:	98 17       	cp	r25, r24
    36c8:	29 f0       	breq	.+10     	; 0x36d4 <_Z17handleLinkBusMsgsv+0x1de>
						{
							setupForFox(&holdFox, START_NOTHING);
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	ce 01       	movw	r24, r28
    36ce:	01 96       	adiw	r24, 0x01	; 1
    36d0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    36d4:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    36d8:	1f 92       	push	r1
    36da:	8f 93       	push	r24
    36dc:	7f 92       	push	r7
    36de:	6f 92       	push	r6
    36e0:	bf 92       	push	r11
    36e2:	af 92       	push	r10
    36e4:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
				lb_send_string(g_tempStr, FALSE);
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	c5 01       	movw	r24, r10
    36ec:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	55 c4       	rjmp	.+2218   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    36fe:	d6 01       	movw	r26, r12
    3700:	13 96       	adiw	r26, 0x03	; 3
    3702:	8c 91       	ld	r24, X
    3704:	88 23       	and	r24, r24
    3706:	b1 f0       	breq	.+44     	; 0x3734 <_Z17handleLinkBusMsgsv+0x23e>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3708:	c6 01       	movw	r24, r12
    370a:	03 96       	adiw	r24, 0x03	; 3
    370c:	0e 94 92 30 	call	0x6124	; 0x6124 <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	67 30       	cpi	r22, 0x07	; 7
    3714:	71 05       	cpc	r23, r1
    3716:	0c f0       	brlt	.+2      	; 0x371a <_Z17handleLinkBusMsgsv+0x224>
    3718:	66 e0       	ldi	r22, 0x06	; 6
    371a:	60 93 7f 05 	sts	0x057F, r22	; 0x80057f <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	55 e0       	ldi	r21, 0x05	; 5
    3722:	61 e1       	ldi	r22, 0x11	; 17
    3724:	8c e9       	ldi	r24, 0x9C	; 156
    3726:	95 e0       	ldi	r25, 0x05	; 5
    3728:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    372c:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    3730:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    3734:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    3738:	1f 92       	push	r1
    373a:	8f 93       	push	r24
    373c:	85 ea       	ldi	r24, 0xA5	; 165
    373e:	91 e0       	ldi	r25, 0x01	; 1
    3740:	9f 93       	push	r25
    3742:	8f 93       	push	r24
    3744:	bf 92       	push	r11
    3746:	af 92       	push	r10
    3748:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
				lb_send_string(g_tempStr, FALSE);
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	c5 01       	movw	r24, r10
    3750:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	23 c4       	rjmp	.+2118   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3762:	f6 01       	movw	r30, r12
    3764:	83 81       	ldd	r24, Z+3	; 0x03
    3766:	88 23       	and	r24, r24
    3768:	11 f1       	breq	.+68     	; 0x37ae <_Z17handleLinkBusMsgsv+0x2b8>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    376a:	80 33       	cpi	r24, 0x30	; 48
    376c:	21 f4       	brne	.+8      	; 0x3776 <_Z17handleLinkBusMsgsv+0x280>
					{
						stopEventNow(PROGRAMMATIC);
    376e:	82 e0       	ldi	r24, 0x02	; 2
    3770:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_Z12stopEventNow19EventActionSource_t>
    3774:	19 c4       	rjmp	.+2098   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3776:	81 33       	cpi	r24, 0x31	; 49
    3778:	21 f4       	brne	.+8      	; 0x3782 <_Z17handleLinkBusMsgsv+0x28c>
					{
						startEventNow(PROGRAMMATIC);
    377a:	82 e0       	ldi	r24, 0x02	; 2
    377c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_Z13startEventNow19EventActionSource_t>
    3780:	13 c4       	rjmp	.+2086   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    3782:	82 33       	cpi	r24, 0x32	; 50
    3784:	31 f4       	brne	.+12     	; 0x3792 <_Z17handleLinkBusMsgsv+0x29c>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
						startEventUsingRTC();
    378c:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z18startEventUsingRTCv>
    3790:	0b c4       	rjmp	.+2070   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
					}
					else if(lb_buff->fields[FIELD1][0] == '3')  /* Start the event at the programmed start time */
    3792:	83 33       	cpi	r24, 0x33	; 51
    3794:	31 f4       	brne	.+12     	; 0x37a2 <_Z17handleLinkBusMsgsv+0x2ac>
					{
						setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3796:	62 e0       	ldi	r22, 0x02	; 2
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
    37a0:	03 c4       	rjmp	.+2054   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
					}
					else
					{
						lb_send_string((char*)"err\n", TRUE);
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	8c ea       	ldi	r24, 0xAC	; 172
    37a6:	91 e0       	ldi	r25, 0x01	; 1
    37a8:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    37ac:	fd c3       	rjmp	.+2042   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
					}
				}
				else
				{
					lb_send_string((char*)"err\n", TRUE);
    37ae:	61 e0       	ldi	r22, 0x01	; 1
    37b0:	8c ea       	ldi	r24, 0xAC	; 172
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    37b8:	f7 c3       	rjmp	.+2030   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    37ba:	d6 01       	movw	r26, r12
    37bc:	13 96       	adiw	r26, 0x03	; 3
    37be:	8c 91       	ld	r24, X
    37c0:	88 23       	and	r24, r24
    37c2:	99 f1       	breq	.+102    	; 0x382a <_Z17handleLinkBusMsgsv+0x334>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    37c4:	80 e2       	ldi	r24, 0x20	; 32
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	f5 01       	movw	r30, r10
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    37ce:	b6 01       	movw	r22, r12
    37d0:	6d 5f       	subi	r22, 0xFD	; 253
    37d2:	7f 4f       	sbci	r23, 0xFF	; 255
    37d4:	c5 01       	movw	r24, r10
    37d6:	0e 94 c1 30 	call	0x6182	; 0x6182 <strcat>

					if(lb_buff->fields[FIELD2][0])
    37da:	d6 01       	movw	r26, r12
    37dc:	57 96       	adiw	r26, 0x17	; 23
    37de:	8c 91       	ld	r24, X
    37e0:	88 23       	and	r24, r24
    37e2:	79 f0       	breq	.+30     	; 0x3802 <_Z17handleLinkBusMsgsv+0x30c>
					{
						strcat(g_tempStr, " ");
    37e4:	f5 01       	movw	r30, r10
    37e6:	01 90       	ld	r0, Z+
    37e8:	00 20       	and	r0, r0
    37ea:	e9 f7       	brne	.-6      	; 0x37e6 <_Z17handleLinkBusMsgsv+0x2f0>
    37ec:	31 97       	sbiw	r30, 0x01	; 1
    37ee:	80 e2       	ldi	r24, 0x20	; 32
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	91 83       	std	Z+1, r25	; 0x01
    37f4:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    37f6:	b6 01       	movw	r22, r12
    37f8:	69 5e       	subi	r22, 0xE9	; 233
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255
    37fc:	c5 01       	movw	r24, r10
    37fe:	0e 94 c1 30 	call	0x6182	; 0x6182 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    3802:	f5 01       	movw	r30, r10
    3804:	01 90       	ld	r0, Z+
    3806:	00 20       	and	r0, r0
    3808:	e9 f7       	brne	.-6      	; 0x3804 <_Z17handleLinkBusMsgsv+0x30e>
    380a:	31 97       	sbiw	r30, 0x01	; 1
    380c:	eb 5d       	subi	r30, 0xDB	; 219
    380e:	f4 40       	sbci	r31, 0x04	; 4
    3810:	75 97       	sbiw	r30, 0x15	; 21
    3812:	58 f4       	brcc	.+22     	; 0x382a <_Z17handleLinkBusMsgsv+0x334>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    3814:	b5 01       	movw	r22, r10
    3816:	88 e2       	ldi	r24, 0x28	; 40
    3818:	95 e0       	ldi	r25, 0x05	; 5
    381a:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    381e:	a5 01       	movw	r20, r10
    3820:	6b e0       	ldi	r22, 0x0B	; 11
    3822:	8c e9       	ldi	r24, 0x9C	; 156
    3824:	95 e0       	ldi	r25, 0x05	; 5
    3826:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    382a:	f1 01       	movw	r30, r2
    382c:	85 89       	ldd	r24, Z+21	; 0x15
    382e:	88 23       	and	r24, r24
    3830:	f1 f0       	breq	.+60     	; 0x386e <_Z17handleLinkBusMsgsv+0x378>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3832:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	88 e2       	ldi	r24, 0x28	; 40
    383a:	95 e0       	ldi	r25, 0x05	; 5
    383c:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_Z26timeRequiredToSendStrAtWPMPcj>
    3840:	88 5a       	subi	r24, 0xA8	; 168
    3842:	9d 4f       	sbci	r25, 0xFD	; 253
    3844:	9c 01       	movw	r18, r24
    3846:	36 95       	lsr	r19
    3848:	27 95       	ror	r18
    384a:	36 95       	lsr	r19
    384c:	27 95       	ror	r18
    384e:	36 95       	lsr	r19
    3850:	27 95       	ror	r18
    3852:	a5 ec       	ldi	r26, 0xC5	; 197
    3854:	b0 e2       	ldi	r27, 0x20	; 32
    3856:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    385a:	92 95       	swap	r25
    385c:	82 95       	swap	r24
    385e:	8f 70       	andi	r24, 0x0F	; 15
    3860:	89 27       	eor	r24, r25
    3862:	9f 70       	andi	r25, 0x0F	; 15
    3864:	89 27       	eor	r24, r25
    3866:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <g_time_needed_for_ID+0x1>
    386a:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    386e:	88 e2       	ldi	r24, 0x28	; 40
    3870:	95 e0       	ldi	r25, 0x05	; 5
    3872:	9f 93       	push	r25
    3874:	8f 93       	push	r24
    3876:	81 eb       	ldi	r24, 0xB1	; 177
    3878:	91 e0       	ldi	r25, 0x01	; 1
    387a:	9f 93       	push	r25
    387c:	8f 93       	push	r24
    387e:	bf 92       	push	r11
    3880:	af 92       	push	r10
    3882:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	c5 01       	movw	r24, r10
    388a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	86 c3       	rjmp	.+1804   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>


			case MESSAGE_CODE_SETTINGS:
			{
				if(lb_buff->fields[FIELD1][0] == 'S')
    389c:	d6 01       	movw	r26, r12
    389e:	13 96       	adiw	r26, 0x03	; 3
    38a0:	8c 91       	ld	r24, X
    38a2:	13 97       	sbiw	r26, 0x03	; 3
    38a4:	83 35       	cpi	r24, 0x53	; 83
    38a6:	09 f0       	breq	.+2      	; 0x38aa <_Z17handleLinkBusMsgsv+0x3b4>
    38a8:	51 c0       	rjmp	.+162    	; 0x394c <_Z17handleLinkBusMsgsv+0x456>
				{
					char x = lb_buff->fields[FIELD2][0];

					if(x)
    38aa:	57 96       	adiw	r26, 0x17	; 23
    38ac:	8c 91       	ld	r24, X
    38ae:	88 23       	and	r24, r24
    38b0:	d1 f1       	breq	.+116    	; 0x3926 <_Z17handleLinkBusMsgsv+0x430>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    38b2:	c6 01       	movw	r24, r12
    38b4:	47 96       	adiw	r24, 0x17	; 23
    38b6:	0e 94 92 30 	call	0x6124	; 0x6124 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    38ba:	86 2f       	mov	r24, r22
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	85 30       	cpi	r24, 0x05	; 5
    38c0:	91 05       	cpc	r25, r1
    38c2:	14 f4       	brge	.+4      	; 0x38c8 <_Z17handleLinkBusMsgsv+0x3d2>
    38c4:	85 e0       	ldi	r24, 0x05	; 5
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	85 31       	cpi	r24, 0x15	; 21
    38ca:	91 05       	cpc	r25, r1
    38cc:	0c f0       	brlt	.+2      	; 0x38d0 <_Z17handleLinkBusMsgsv+0x3da>
    38ce:	84 e1       	ldi	r24, 0x14	; 20
    38d0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    38d4:	40 e1       	ldi	r20, 0x10	; 16
    38d6:	51 e0       	ldi	r21, 0x01	; 1
    38d8:	6f e0       	ldi	r22, 0x0F	; 15
    38da:	8c e9       	ldi	r24, 0x9C	; 156
    38dc:	95 e0       	ldi	r25, 0x05	; 5
    38de:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    38e2:	f1 01       	movw	r30, r2
    38e4:	85 89       	ldd	r24, Z+21	; 0x15
    38e6:	88 23       	and	r24, r24
    38e8:	f1 f0       	breq	.+60     	; 0x3926 <_Z17handleLinkBusMsgsv+0x430>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    38ea:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    38ee:	70 e0       	ldi	r23, 0x00	; 0
    38f0:	88 e2       	ldi	r24, 0x28	; 40
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_Z26timeRequiredToSendStrAtWPMPcj>
    38f8:	88 5a       	subi	r24, 0xA8	; 168
    38fa:	9d 4f       	sbci	r25, 0xFD	; 253
    38fc:	9c 01       	movw	r18, r24
    38fe:	36 95       	lsr	r19
    3900:	27 95       	ror	r18
    3902:	36 95       	lsr	r19
    3904:	27 95       	ror	r18
    3906:	36 95       	lsr	r19
    3908:	27 95       	ror	r18
    390a:	a5 ec       	ldi	r26, 0xC5	; 197
    390c:	b0 e2       	ldi	r27, 0x20	; 32
    390e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    3912:	92 95       	swap	r25
    3914:	82 95       	swap	r24
    3916:	8f 70       	andi	r24, 0x0F	; 15
    3918:	89 27       	eor	r24, r25
    391a:	9f 70       	andi	r25, 0x0F	; 15
    391c:	89 27       	eor	r24, r25
    391e:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <g_time_needed_for_ID+0x1>
    3922:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_time_needed_for_ID>
						}
					}

					sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    3926:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_id_codespeed>
    392a:	1f 92       	push	r1
    392c:	8f 93       	push	r24
    392e:	88 eb       	ldi	r24, 0xB8	; 184
    3930:	91 e0       	ldi	r25, 0x01	; 1
    3932:	9f 93       	push	r25
    3934:	8f 93       	push	r24
    3936:	bf 92       	push	r11
    3938:	af 92       	push	r10
    393a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	36 c0       	rjmp	.+108    	; 0x39b8 <_Z17handleLinkBusMsgsv+0x4c2>
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    394c:	80 35       	cpi	r24, 0x50	; 80
    394e:	61 f5       	brne	.+88     	; 0x39a8 <_Z17handleLinkBusMsgsv+0x4b2>
				{
					char x = lb_buff->fields[FIELD2][0];
    3950:	f6 01       	movw	r30, r12
    3952:	87 89       	ldd	r24, Z+23	; 0x17

					if(x)
    3954:	88 23       	and	r24, r24
    3956:	a9 f0       	breq	.+42     	; 0x3982 <_Z17handleLinkBusMsgsv+0x48c>
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
    3958:	81 33       	cpi	r24, 0x31	; 49
    395a:	39 f0       	breq	.+14     	; 0x396a <_Z17handleLinkBusMsgsv+0x474>
    395c:	84 35       	cpi	r24, 0x54	; 84
    395e:	39 f0       	breq	.+14     	; 0x396e <_Z17handleLinkBusMsgsv+0x478>
    3960:	91 e0       	ldi	r25, 0x01	; 1
    3962:	89 35       	cpi	r24, 0x59	; 89
    3964:	29 f0       	breq	.+10     	; 0x3970 <_Z17handleLinkBusMsgsv+0x47a>
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	03 c0       	rjmp	.+6      	; 0x3970 <_Z17handleLinkBusMsgsv+0x47a>
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <_Z17handleLinkBusMsgsv+0x47a>
    396e:	91 e0       	ldi	r25, 0x01	; 1
    3970:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <g_ptt_periodic_reset_enabled>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    3974:	41 e8       	ldi	r20, 0x81	; 129
    3976:	55 e0       	ldi	r21, 0x05	; 5
    3978:	67 e1       	ldi	r22, 0x17	; 23
    397a:	8c e9       	ldi	r24, 0x9C	; 156
    397c:	95 e0       	ldi	r25, 0x05	; 5
    397e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    3982:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    3986:	1f 92       	push	r1
    3988:	8f 93       	push	r24
    398a:	84 ec       	ldi	r24, 0xC4	; 196
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	9f 93       	push	r25
    3990:	8f 93       	push	r24
    3992:	bf 92       	push	r11
    3994:	af 92       	push	r10
    3996:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	08 c0       	rjmp	.+16     	; 0x39b8 <_Z17handleLinkBusMsgsv+0x4c2>
				}
				else
				{
					sprintf(g_tempStr, "err\n");
    39a8:	85 e0       	ldi	r24, 0x05	; 5
    39aa:	ec ea       	ldi	r30, 0xAC	; 172
    39ac:	f1 e0       	ldi	r31, 0x01	; 1
    39ae:	d5 01       	movw	r26, r10
    39b0:	01 90       	ld	r0, Z+
    39b2:	0d 92       	st	X+, r0
    39b4:	8a 95       	dec	r24
    39b6:	e1 f7       	brne	.-8      	; 0x39b0 <_Z17handleLinkBusMsgsv+0x4ba>
				}

				lb_send_string(g_tempStr, FALSE);
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	c5 01       	movw	r24, r10
    39bc:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    39c0:	f3 c2       	rjmp	.+1510   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    39c2:	f6 01       	movw	r30, r12
    39c4:	83 81       	ldd	r24, Z+3	; 0x03
    39c6:	88 23       	and	r24, r24
    39c8:	d1 f0       	breq	.+52     	; 0x39fe <_Z17handleLinkBusMsgsv+0x508>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    39ca:	48 e0       	ldi	r20, 0x08	; 8
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	b6 01       	movw	r22, r12
    39d0:	6d 5f       	subi	r22, 0xFD	; 253
    39d2:	7f 4f       	sbci	r23, 0xFF	; 255
    39d4:	c5 01       	movw	r24, r10
    39d6:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    39da:	d5 01       	movw	r26, r10
    39dc:	18 96       	adiw	r26, 0x08	; 8
    39de:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    39e0:	c5 01       	movw	r24, r10
    39e2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_Z11only_digitsPc>
    39e6:	88 23       	and	r24, r24
    39e8:	51 f0       	breq	.+20     	; 0x39fe <_Z17handleLinkBusMsgsv+0x508>
    39ea:	f5 01       	movw	r30, r10
    39ec:	01 90       	ld	r0, Z+
    39ee:	00 20       	and	r0, r0
    39f0:	e9 f7       	brne	.-6      	; 0x39ec <_Z17handleLinkBusMsgsv+0x4f6>
    39f2:	31 97       	sbiw	r30, 0x01	; 1
    39f4:	eb 5d       	subi	r30, 0xDB	; 219
    39f6:	f4 40       	sbci	r31, 0x04	; 4
    39f8:	34 97       	sbiw	r30, 0x04	; 4
    39fa:	08 f0       	brcs	.+2      	; 0x39fe <_Z17handleLinkBusMsgsv+0x508>
    39fc:	e3 c2       	rjmp	.+1478   	; 0x3fc4 <_Z17handleLinkBusMsgsv+0xace>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    39fe:	84 e4       	ldi	r24, 0x44	; 68
    3a00:	95 e0       	ldi	r25, 0x05	; 5
    3a02:	9f 93       	push	r25
    3a04:	8f 93       	push	r24
    3a06:	8c ec       	ldi	r24, 0xCC	; 204
    3a08:	91 e0       	ldi	r25, 0x01	; 1
    3a0a:	9f 93       	push	r25
    3a0c:	8f 93       	push	r24
    3a0e:	bf 92       	push	r11
    3a10:	af 92       	push	r10
    3a12:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3a16:	61 e0       	ldi	r22, 0x01	; 1
    3a18:	c5 01       	movw	r24, r10
    3a1a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	be c2       	rjmp	.+1404   	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    3a2c:	f6 01       	movw	r30, r12
    3a2e:	83 81       	ldd	r24, Z+3	; 0x03
    3a30:	84 35       	cpi	r24, 0x54	; 84
    3a32:	09 f0       	breq	.+2      	; 0x3a36 <_Z17handleLinkBusMsgsv+0x540>
    3a34:	74 c0       	rjmp	.+232    	; 0x3b1e <_Z17handleLinkBusMsgsv+0x628>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    3a36:	4c e0       	ldi	r20, 0x0C	; 12
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	b6 01       	movw	r22, r12
    3a3c:	69 5e       	subi	r22, 0xE9	; 233
    3a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a40:	c5 01       	movw	r24, r10
    3a42:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    3a46:	d5 01       	movw	r26, r10
    3a48:	1c 96       	adiw	r26, 0x0c	; 12
    3a4a:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    3a4c:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    3a50:	41 95       	neg	r20
    3a52:	6b e8       	ldi	r22, 0x8B	; 139
    3a54:	75 e0       	ldi	r23, 0x05	; 5
    3a56:	c5 01       	movw	r24, r10
    3a58:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z18validateTimeStringPcPma>
    3a5c:	69 87       	std	Y+9, r22	; 0x09
    3a5e:	7a 87       	std	Y+10, r23	; 0x0a
    3a60:	8b 87       	std	Y+11, r24	; 0x0b
    3a62:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    3a64:	61 15       	cp	r22, r1
    3a66:	71 05       	cpc	r23, r1
    3a68:	81 05       	cpc	r24, r1
    3a6a:	91 05       	cpc	r25, r1
    3a6c:	41 f1       	breq	.+80     	; 0x3abe <_Z17handleLinkBusMsgsv+0x5c8>
					{
						rv3028_set_epoch(t);
    3a6e:	0e 94 b7 29 	call	0x536e	; 0x536e <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3a72:	89 85       	ldd	r24, Y+9	; 0x09
    3a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a76:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a78:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a7a:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_current_epoch>
    3a7e:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_current_epoch+0x1>
    3a82:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <g_current_epoch+0x2>
    3a86:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    3a8a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3a8e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3a92:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3a96:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3a9a:	bf 93       	push	r27
    3a9c:	af 93       	push	r26
    3a9e:	9f 93       	push	r25
    3aa0:	8f 93       	push	r24
    3aa2:	89 ed       	ldi	r24, 0xD9	; 217
    3aa4:	91 e0       	ldi	r25, 0x01	; 1
    3aa6:	9f 93       	push	r25
    3aa8:	8f 93       	push	r24
    3aaa:	bf 92       	push	r11
    3aac:	af 92       	push	r10
    3aae:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	90 c2       	rjmp	.+1312   	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3abe:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_event_start_epoch>
    3ac2:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3ac6:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3aca:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3ace:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3ad2:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3ad6:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3ada:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3ade:	e1 2c       	mov	r14, r1
    3ae0:	f1 2c       	mov	r15, r1
    3ae2:	08 e7       	ldi	r16, 0x78	; 120
    3ae4:	11 e0       	ldi	r17, 0x01	; 1
    3ae6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    3aea:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3aee:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3af2:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3af6:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3afa:	bf 93       	push	r27
    3afc:	af 93       	push	r26
    3afe:	9f 93       	push	r25
    3b00:	8f 93       	push	r24
    3b02:	84 ed       	ldi	r24, 0xD4	; 212
    3b04:	91 e0       	ldi	r25, 0x01	; 1
    3b06:	9f 93       	push	r25
    3b08:	8f 93       	push	r24
    3b0a:	bf 92       	push	r11
    3b0c:	af 92       	push	r10
    3b0e:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	60 c2       	rjmp	.+1216   	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3b1e:	83 35       	cpi	r24, 0x53	; 83
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <_Z17handleLinkBusMsgsv+0x62e>
    3b22:	96 c0       	rjmp	.+300    	; 0x3c50 <_Z17handleLinkBusMsgsv+0x75a>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3b24:	b6 01       	movw	r22, r12
    3b26:	69 5e       	subi	r22, 0xE9	; 233
    3b28:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2a:	c5 01       	movw	r24, r10
    3b2c:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3b30:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    3b34:	41 95       	neg	r20
    3b36:	67 e8       	ldi	r22, 0x87	; 135
    3b38:	75 e0       	ldi	r23, 0x05	; 5
    3b3a:	c5 01       	movw	r24, r10
    3b3c:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z18validateTimeStringPcPma>

					if(s)
    3b40:	61 15       	cp	r22, r1
    3b42:	71 05       	cpc	r23, r1
    3b44:	81 05       	cpc	r24, r1
    3b46:	91 05       	cpc	r25, r1
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <_Z17handleLinkBusMsgsv+0x656>
    3b4a:	68 c0       	rjmp	.+208    	; 0x3c1c <_Z17handleLinkBusMsgsv+0x726>
					{
						g_event_start_epoch = s;
    3b4c:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <g_event_start_epoch>
    3b50:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <g_event_start_epoch+0x1>
    3b54:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_start_epoch+0x2>
    3b58:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3b5c:	47 e8       	ldi	r20, 0x87	; 135
    3b5e:	55 e0       	ldi	r21, 0x05	; 5
    3b60:	64 e1       	ldi	r22, 0x14	; 20
    3b62:	8c e9       	ldi	r24, 0x9C	; 156
    3b64:	95 e0       	ldi	r25, 0x05	; 5
    3b66:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    3b6a:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    3b6e:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3b72:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3b76:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
    3b7c:	9e 83       	std	Y+6, r25	; 0x06
    3b7e:	af 83       	std	Y+7, r26	; 0x07
    3b80:	b8 87       	std	Y+8, r27	; 0x08
    3b82:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    3b86:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3b8a:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3b8e:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3b92:	80 58       	subi	r24, 0x80	; 128
    3b94:	9e 4a       	sbci	r25, 0xAE	; 174
    3b96:	ae 4f       	sbci	r26, 0xFE	; 254
    3b98:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	ab 83       	std	Y+3, r26	; 0x03
    3ba0:	bc 83       	std	Y+4, r27	; 0x04
    3ba2:	4d 81       	ldd	r20, Y+5	; 0x05
    3ba4:	5e 81       	ldd	r21, Y+6	; 0x06
    3ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba8:	78 85       	ldd	r23, Y+8	; 0x08
    3baa:	48 17       	cp	r20, r24
    3bac:	59 07       	cpc	r21, r25
    3bae:	6a 07       	cpc	r22, r26
    3bb0:	7b 07       	cpc	r23, r27
    3bb2:	28 f4       	brcc	.+10     	; 0x3bbe <_Z17handleLinkBusMsgsv+0x6c8>
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb8:	ab 81       	ldd	r26, Y+3	; 0x03
    3bba:	bc 81       	ldd	r27, Y+4	; 0x04
    3bbc:	04 c0       	rjmp	.+8      	; 0x3bc6 <_Z17handleLinkBusMsgsv+0x6d0>
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc2:	af 81       	ldd	r26, Y+7	; 0x07
    3bc4:	b8 85       	ldd	r27, Y+8	; 0x08
    3bc6:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_event_finish_epoch>
    3bca:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_event_finish_epoch+0x1>
    3bce:	a0 93 85 05 	sts	0x0585, r26	; 0x800585 <g_event_finish_epoch+0x2>
    3bd2:	b0 93 86 05 	sts	0x0586, r27	; 0x800586 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3bd6:	43 e8       	ldi	r20, 0x83	; 131
    3bd8:	55 e0       	ldi	r21, 0x05	; 5
    3bda:	65 e1       	ldi	r22, 0x15	; 21
    3bdc:	8c e9       	ldi	r24, 0x9C	; 156
    3bde:	95 e0       	ldi	r25, 0x05	; 5
    3be0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3be4:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    3be8:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3bec:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3bf0:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3bf4:	bf 93       	push	r27
    3bf6:	af 93       	push	r26
    3bf8:	9f 93       	push	r25
    3bfa:	8f 93       	push	r24
    3bfc:	83 ee       	ldi	r24, 0xE3	; 227
    3bfe:	91 e0       	ldi	r25, 0x01	; 1
    3c00:	9f 93       	push	r25
    3c02:	8f 93       	push	r24
    3c04:	bf 92       	push	r11
    3c06:	af 92       	push	r10
    3c08:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
						startEventUsingRTC();
    3c0c:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z18startEventUsingRTCv>
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	e1 c1       	rjmp	.+962    	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3c1c:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    3c20:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3c24:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3c28:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3c2c:	bf 93       	push	r27
    3c2e:	af 93       	push	r26
    3c30:	9f 93       	push	r25
    3c32:	8f 93       	push	r24
    3c34:	83 ee       	ldi	r24, 0xE3	; 227
    3c36:	91 e0       	ldi	r25, 0x01	; 1
    3c38:	9f 93       	push	r25
    3c3a:	8f 93       	push	r24
    3c3c:	bf 92       	push	r11
    3c3e:	af 92       	push	r10
    3c40:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	c7 c1       	rjmp	.+910    	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    3c50:	86 34       	cpi	r24, 0x46	; 70
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <_Z17handleLinkBusMsgsv+0x760>
    3c54:	6f c0       	rjmp	.+222    	; 0x3d34 <_Z17handleLinkBusMsgsv+0x83e>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3c56:	b6 01       	movw	r22, r12
    3c58:	69 5e       	subi	r22, 0xE9	; 233
    3c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5c:	c5 01       	movw	r24, r10
    3c5e:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3c62:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    3c66:	41 95       	neg	r20
    3c68:	63 e8       	ldi	r22, 0x83	; 131
    3c6a:	75 e0       	ldi	r23, 0x05	; 5
    3c6c:	c5 01       	movw	r24, r10
    3c6e:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z18validateTimeStringPcPma>

					if(f)
    3c72:	61 15       	cp	r22, r1
    3c74:	71 05       	cpc	r23, r1
    3c76:	81 05       	cpc	r24, r1
    3c78:	91 05       	cpc	r25, r1
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <_Z17handleLinkBusMsgsv+0x788>
    3c7c:	41 c0       	rjmp	.+130    	; 0x3d00 <_Z17handleLinkBusMsgsv+0x80a>
					{
						g_event_finish_epoch = f;
    3c7e:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_event_finish_epoch>
    3c82:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_event_finish_epoch+0x1>
    3c86:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_event_finish_epoch+0x2>
    3c8a:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3c8e:	43 e8       	ldi	r20, 0x83	; 131
    3c90:	55 e0       	ldi	r21, 0x05	; 5
    3c92:	65 e1       	ldi	r22, 0x15	; 21
    3c94:	8c e9       	ldi	r24, 0x9C	; 156
    3c96:	95 e0       	ldi	r25, 0x05	; 5
    3c98:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3c9c:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3ca0:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3ca4:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3ca8:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3cac:	60 91 87 05 	lds	r22, 0x0587	; 0x800587 <g_event_start_epoch>
    3cb0:	70 91 88 05 	lds	r23, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3cb4:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3cb8:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3cbc:	e1 2c       	mov	r14, r1
    3cbe:	f1 2c       	mov	r15, r1
    3cc0:	04 e8       	ldi	r16, 0x84	; 132
    3cc2:	11 e0       	ldi	r17, 0x01	; 1
    3cc4:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3cc8:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    3ccc:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3cd0:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3cd4:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3cd8:	bf 93       	push	r27
    3cda:	af 93       	push	r26
    3cdc:	9f 93       	push	r25
    3cde:	8f 93       	push	r24
    3ce0:	8e ee       	ldi	r24, 0xEE	; 238
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	9f 93       	push	r25
    3ce6:	8f 93       	push	r24
    3ce8:	bf 92       	push	r11
    3cea:	af 92       	push	r10
    3cec:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
						startEventUsingRTC();
    3cf0:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z18startEventUsingRTCv>
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	6f c1       	rjmp	.+734    	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3d00:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    3d04:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3d08:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3d0c:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3d10:	bf 93       	push	r27
    3d12:	af 93       	push	r26
    3d14:	9f 93       	push	r25
    3d16:	8f 93       	push	r24
    3d18:	8e ee       	ldi	r24, 0xEE	; 238
    3d1a:	91 e0       	ldi	r25, 0x01	; 1
    3d1c:	9f 93       	push	r25
    3d1e:	8f 93       	push	r24
    3d20:	bf 92       	push	r11
    3d22:	af 92       	push	r10
    3d24:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	55 c1       	rjmp	.+682    	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    3d34:	8f 34       	cpi	r24, 0x4F	; 79
    3d36:	a9 f5       	brne	.+106    	; 0x3da2 <_Z17handleLinkBusMsgsv+0x8ac>
				{
					if(lb_buff->fields[FIELD2][0])
    3d38:	87 89       	ldd	r24, Z+23	; 0x17
    3d3a:	88 23       	and	r24, r24
    3d3c:	d9 f0       	breq	.+54     	; 0x3d74 <_Z17handleLinkBusMsgsv+0x87e>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3d3e:	c6 01       	movw	r24, r12
    3d40:	47 96       	adiw	r24, 0x17	; 23
    3d42:	0e 94 74 30 	call	0x60e8	; 0x60e8 <atoi>

						offset = CLAMP(-24, offset, 24);
    3d46:	89 31       	cpi	r24, 0x19	; 25
    3d48:	54 f4       	brge	.+20     	; 0x3d5e <_Z17handleLinkBusMsgsv+0x868>
    3d4a:	08 2e       	mov	r0, r24
    3d4c:	00 0c       	add	r0, r0
    3d4e:	99 0b       	sbc	r25, r25
    3d50:	88 3e       	cpi	r24, 0xE8	; 232
    3d52:	bf ef       	ldi	r27, 0xFF	; 255
    3d54:	9b 07       	cpc	r25, r27
    3d56:	2c f4       	brge	.+10     	; 0x3d62 <_Z17handleLinkBusMsgsv+0x86c>
    3d58:	88 ee       	ldi	r24, 0xE8	; 232
    3d5a:	9f ef       	ldi	r25, 0xFF	; 255
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <_Z17handleLinkBusMsgsv+0x86c>
    3d5e:	88 e1       	ldi	r24, 0x18	; 24
    3d60:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    3d62:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    3d66:	42 e8       	ldi	r20, 0x82	; 130
    3d68:	55 e0       	ldi	r21, 0x05	; 5
    3d6a:	66 e1       	ldi	r22, 0x16	; 22
    3d6c:	8c e9       	ldi	r24, 0x9C	; 156
    3d6e:	95 e0       	ldi	r25, 0x05	; 5
    3d70:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    3d74:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_utc_offset>
    3d78:	28 2f       	mov	r18, r24
    3d7a:	08 2e       	mov	r0, r24
    3d7c:	00 0c       	add	r0, r0
    3d7e:	33 0b       	sbc	r19, r19
    3d80:	3f 93       	push	r19
    3d82:	8f 93       	push	r24
    3d84:	8a ef       	ldi	r24, 0xFA	; 250
    3d86:	91 e0       	ldi	r25, 0x01	; 1
    3d88:	9f 93       	push	r25
    3d8a:	8f 93       	push	r24
    3d8c:	bf 92       	push	r11
    3d8e:	af 92       	push	r10
    3d90:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	1e c1       	rjmp	.+572    	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3da2:	83 34       	cpi	r24, 0x43	; 67
    3da4:	09 f5       	brne	.+66     	; 0x3de8 <_Z17handleLinkBusMsgsv+0x8f2>
				{
					if(lb_buff->fields[FIELD2][0])
    3da6:	f6 01       	movw	r30, r12
    3da8:	87 89       	ldd	r24, Z+23	; 0x17
    3daa:	88 23       	and	r24, r24
    3dac:	51 f0       	breq	.+20     	; 0x3dc2 <_Z17handleLinkBusMsgsv+0x8cc>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3dae:	c6 01       	movw	r24, r12
    3db0:	47 96       	adiw	r24, 0x17	; 23
    3db2:	0e 94 74 30 	call	0x60e8	; 0x60e8 <atoi>

						if(c < 512)
    3db6:	81 15       	cp	r24, r1
    3db8:	f2 e0       	ldi	r31, 0x02	; 2
    3dba:	9f 07       	cpc	r25, r31
    3dbc:	10 f4       	brcc	.+4      	; 0x3dc2 <_Z17handleLinkBusMsgsv+0x8cc>
						{
							rv3028_set_offset_RAM(c);
    3dbe:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3dc2:	0e 94 85 2b 	call	0x570a	; 0x570a <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    3dc6:	9f 93       	push	r25
    3dc8:	8f 93       	push	r24
    3dca:	85 e0       	ldi	r24, 0x05	; 5
    3dcc:	92 e0       	ldi	r25, 0x02	; 2
    3dce:	9f 93       	push	r25
    3dd0:	8f 93       	push	r24
    3dd2:	bf 92       	push	r11
    3dd4:	af 92       	push	r10
    3dd6:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	fb c0       	rjmp	.+502    	; 0x3fde <_Z17handleLinkBusMsgsv+0xae8>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck() == CONFIGURATION_ERROR)
    3de8:	0e 94 3e 11 	call	0x227c	; 0x227c <_Z23clockConfigurationCheckv>
    3dec:	82 30       	cpi	r24, 0x02	; 2
    3dee:	19 f4       	brne	.+6      	; 0x3df6 <_Z17handleLinkBusMsgsv+0x900>
					{
						reportConfigErrors();
    3df0:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_Z18reportConfigErrorsv>
    3df4:	d9 c0       	rjmp	.+434    	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    3df6:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_event_start_epoch>
    3dfa:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3dfe:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3e02:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3e06:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3e0a:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3e0e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3e12:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3e16:	0f 2e       	mov	r0, r31
    3e18:	fb e6       	ldi	r31, 0x6B	; 107
    3e1a:	ef 2e       	mov	r14, r31
    3e1c:	f1 e0       	ldi	r31, 0x01	; 1
    3e1e:	ff 2e       	mov	r15, r31
    3e20:	f0 2d       	mov	r31, r0
    3e22:	08 e7       	ldi	r16, 0x78	; 120
    3e24:	11 e0       	ldi	r17, 0x01	; 1
    3e26:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3e2a:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3e2e:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3e32:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3e36:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3e3a:	60 91 87 05 	lds	r22, 0x0587	; 0x800587 <g_event_start_epoch>
    3e3e:	70 91 88 05 	lds	r23, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3e42:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3e46:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3e4a:	e1 2c       	mov	r14, r1
    3e4c:	f1 2c       	mov	r15, r1
    3e4e:	04 e8       	ldi	r16, 0x84	; 132
    3e50:	11 e0       	ldi	r17, 0x01	; 1
    3e52:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    3e56:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    3e5a:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3e5e:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3e62:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3e66:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3e6a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3e6e:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3e72:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3e76:	48 17       	cp	r20, r24
    3e78:	59 07       	cpc	r21, r25
    3e7a:	6a 07       	cpc	r22, r26
    3e7c:	7b 07       	cpc	r23, r27
    3e7e:	08 f0       	brcs	.+2      	; 0x3e82 <_Z17handleLinkBusMsgsv+0x98c>
    3e80:	93 c0       	rjmp	.+294    	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3e82:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3e86:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3e8a:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3e8e:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3e92:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3e96:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3e9a:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3e9e:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3ea2:	0c e8       	ldi	r16, 0x8C	; 140
    3ea4:	11 e0       	ldi	r17, 0x01	; 1
    3ea6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z14reportTimeTillmmPKcS0_>
    3eaa:	7e c0       	rjmp	.+252    	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3eac:	d6 01       	movw	r26, r12
    3eae:	13 96       	adiw	r26, 0x03	; 3
    3eb0:	8c 91       	ld	r24, X
    3eb2:	13 97       	sbiw	r26, 0x03	; 3
    3eb4:	83 34       	cpi	r24, 0x43	; 67
    3eb6:	89 f5       	brne	.+98     	; 0x3f1a <_Z17handleLinkBusMsgsv+0xa24>
				{
					if(lb_buff->fields[FIELD2][0])
    3eb8:	57 96       	adiw	r26, 0x17	; 23
    3eba:	8c 91       	ld	r24, X
    3ebc:	88 23       	and	r24, r24
    3ebe:	a9 f0       	breq	.+42     	; 0x3eea <_Z17handleLinkBusMsgsv+0x9f4>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3ec0:	c6 01       	movw	r24, r12
    3ec2:	47 96       	adiw	r24, 0x17	; 23
    3ec4:	0e 94 74 30 	call	0x60e8	; 0x60e8 <atoi>

						if((v > -2000) && (v < 2000))
    3ec8:	9c 01       	movw	r18, r24
    3eca:	21 53       	subi	r18, 0x31	; 49
    3ecc:	38 4f       	sbci	r19, 0xF8	; 248
    3ece:	2f 39       	cpi	r18, 0x9F	; 159
    3ed0:	3f 40       	sbci	r19, 0x0F	; 15
    3ed2:	58 f4       	brcc	.+22     	; 0x3eea <_Z17handleLinkBusMsgsv+0x9f4>
						{
							g_atmega_temp_calibration = v;
    3ed4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_atmega_temp_calibration+0x1>
    3ed8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3edc:	4d e0       	ldi	r20, 0x0D	; 13
    3ede:	51 e0       	ldi	r21, 0x01	; 1
    3ee0:	62 e1       	ldi	r22, 0x12	; 18
    3ee2:	8c e9       	ldi	r24, 0x9C	; 156
    3ee4:	95 e0       	ldi	r25, 0x05	; 5
    3ee6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    3eea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_atmega_temp_calibration>
    3eee:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <g_atmega_temp_calibration+0x1>
    3ef2:	9f 93       	push	r25
    3ef4:	8f 93       	push	r24
    3ef6:	eb e0       	ldi	r30, 0x0B	; 11
    3ef8:	f2 e0       	ldi	r31, 0x02	; 2
    3efa:	ff 93       	push	r31
    3efc:	ef 93       	push	r30
    3efe:	bf 92       	push	r11
    3f00:	af 92       	push	r10
    3f02:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
					lb_send_string(g_tempStr, TRUE);
    3f06:	61 e0       	ldi	r22, 0x01	; 1
    3f08:	c5 01       	movw	r24, r10
    3f0a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3f0e:	0f 90       	pop	r0
    3f10:	0f 90       	pop	r0
    3f12:	0f 90       	pop	r0
    3f14:	0f 90       	pop	r0
    3f16:	0f 90       	pop	r0
    3f18:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3f1a:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_temperature>
    3f1e:	28 2f       	mov	r18, r24
    3f20:	08 2e       	mov	r0, r24
    3f22:	00 0c       	add	r0, r0
    3f24:	33 0b       	sbc	r19, r19
    3f26:	3f 93       	push	r19
    3f28:	8f 93       	push	r24
    3f2a:	9f 92       	push	r9
    3f2c:	8f 92       	push	r8
    3f2e:	bf 92       	push	r11
    3f30:	af 92       	push	r10
    3f32:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3f36:	61 e0       	ldi	r22, 0x01	; 1
    3f38:	c5 01       	movw	r24, r10
    3f3a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3f3e:	40 91 41 05 	lds	r20, 0x0541	; 0x800541 <g_voltage>
    3f42:	50 91 42 05 	lds	r21, 0x0542	; 0x800542 <g_voltage+0x1>
    3f46:	fa 01       	movw	r30, r20
    3f48:	f6 95       	lsr	r31
    3f4a:	e7 95       	ror	r30
    3f4c:	f6 95       	lsr	r31
    3f4e:	e7 95       	ror	r30
    3f50:	9f 01       	movw	r18, r30
    3f52:	ab e7       	ldi	r26, 0x7B	; 123
    3f54:	b4 e1       	ldi	r27, 0x14	; 20
    3f56:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    3f5a:	96 95       	lsr	r25
    3f5c:	87 95       	ror	r24
    3f5e:	64 e6       	ldi	r22, 0x64	; 100
    3f60:	68 9f       	mul	r22, r24
    3f62:	90 01       	movw	r18, r0
    3f64:	69 9f       	mul	r22, r25
    3f66:	30 0d       	add	r19, r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	42 1b       	sub	r20, r18
    3f6c:	53 0b       	sbc	r21, r19
    3f6e:	5f 93       	push	r21
    3f70:	4f 93       	push	r20
    3f72:	9f 01       	movw	r18, r30
    3f74:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    3f78:	96 95       	lsr	r25
    3f7a:	87 95       	ror	r24
    3f7c:	9f 93       	push	r25
    3f7e:	8f 93       	push	r24
    3f80:	5f 92       	push	r5
    3f82:	4f 92       	push	r4
    3f84:	bf 92       	push	r11
    3f86:	af 92       	push	r10
    3f88:	0e 94 ff 30 	call	0x61fe	; 0x61fe <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3f8c:	61 e0       	ldi	r22, 0x01	; 1
    3f8e:	c5 01       	movw	r24, r10
    3f90:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	04 c0       	rjmp	.+8      	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>

			default:
			{
				ee_mgr.send_Help();
    3fa0:	8c e9       	ldi	r24, 0x9C	; 156
    3fa2:	95 e0       	ldi	r25, 0x05	; 5
    3fa4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    3fa8:	d6 01       	movw	r26, r12
    3faa:	12 96       	adiw	r26, 0x02	; 2
    3fac:	1c 92       	st	X, r1
    3fae:	1e 92       	st	-X, r1
    3fb0:	11 97       	sbiw	r26, 0x01	; 1
		if(send_ack)
		{
			lb_send_NewPrompt();
    3fb2:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z17lb_send_NewPromptv>
    3fb6:	d7 ca       	rjmp	.-2642   	; 0x3566 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	79 cb       	rjmp	.-2318   	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3fbc:	86 e0       	ldi	r24, 0x06	; 6
    3fbe:	77 cb       	rjmp	.-2322   	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
						{
							c = x;
						}
						else
						{
							c = BEACON;
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	75 cb       	rjmp	.-2326   	; 0x36ae <_Z17handleLinkBusMsgsv+0x1b8>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    3fc4:	b5 01       	movw	r22, r10
    3fc6:	84 e4       	ldi	r24, 0x44	; 68
    3fc8:	95 e0       	ldi	r25, 0x05	; 5
    3fca:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3fce:	44 e4       	ldi	r20, 0x44	; 68
    3fd0:	55 e0       	ldi	r21, 0x05	; 5
    3fd2:	6e e0       	ldi	r22, 0x0E	; 14
    3fd4:	8c e9       	ldi	r24, 0x9C	; 156
    3fd6:	95 e0       	ldi	r25, 0x05	; 5
    3fd8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    3fdc:	10 cd       	rjmp	.-1504   	; 0x39fe <_Z17handleLinkBusMsgsv+0x508>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    3fde:	61 e0       	ldi	r22, 0x01	; 1
    3fe0:	c5 01       	movw	r24, r10
    3fe2:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3fe6:	e0 cf       	rjmp	.-64     	; 0x3fa8 <_Z17handleLinkBusMsgsv+0xab2>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3fe8:	2c 96       	adiw	r28, 0x0c	; 12
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	ff 90       	pop	r15
    3ffe:	ef 90       	pop	r14
    4000:	df 90       	pop	r13
    4002:	cf 90       	pop	r12
    4004:	bf 90       	pop	r11
    4006:	af 90       	pop	r10
    4008:	9f 90       	pop	r9
    400a:	8f 90       	pop	r8
    400c:	7f 90       	pop	r7
    400e:	6f 90       	pop	r6
    4010:	5f 90       	pop	r5
    4012:	4f 90       	pop	r4
    4014:	3f 90       	pop	r3
    4016:	2f 90       	pop	r2
    4018:	08 95       	ret

0000401a <_Z10processKeyc>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    401a:	cf 92       	push	r12
    401c:	df 92       	push	r13
    401e:	ef 92       	push	r14
    4020:	ff 92       	push	r15
    4022:	cf 93       	push	r28
    4024:	df 93       	push	r29
    4026:	1f 92       	push	r1
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    402c:	84 34       	cpi	r24, 0x44	; 68
    402e:	39 f4       	brne	.+14     	; 0x403e <_Z10processKeyc+0x24>
		{
			g_DTMF_unlocked = FALSE;
    4030:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    4034:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4038:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    403c:	ef c3       	rjmp	.+2014   	; 0x481c <_Z10processKeyc+0x802>
		}

		if(!g_DTMF_unlocked)
    403e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_DTMF_unlocked>
    4042:	91 11       	cpse	r25, r1
    4044:	07 c0       	rjmp	.+14     	; 0x4054 <_Z10processKeyc+0x3a>
		{
			state = STATE_CHECK_PASSWORD;
    4046:	21 e1       	ldi	r18, 0x11	; 17
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    404e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    4052:	7a c3       	rjmp	.+1780   	; 0x4748 <_Z10processKeyc+0x72e>
		}
		else
		{
			if(key == '*')
    4054:	8a 32       	cpi	r24, 0x2A	; 42
    4056:	a9 f4       	brne	.+42     	; 0x4082 <_Z10processKeyc+0x68>
			{
				state = STATE_SENTENCE_START;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4060:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    4064:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4068:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE12stringLength>
				value = 0;
    406c:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4070:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE5value>
				digits = 0;
    4074:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4078:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    407c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_DTMF_unlocked>
    4080:	cd c3       	rjmp	.+1946   	; 0x481c <_Z10processKeyc+0x802>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    4082:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    4086:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    408a:	31 97       	sbiw	r30, 0x01	; 1
    408c:	e3 31       	cpi	r30, 0x13	; 19
    408e:	f1 05       	cpc	r31, r1
    4090:	08 f0       	brcs	.+2      	; 0x4094 <_Z10processKeyc+0x7a>
    4092:	c4 c3       	rjmp	.+1928   	; 0x481c <_Z10processKeyc+0x802>
    4094:	28 2f       	mov	r18, r24
    4096:	ea 56       	subi	r30, 0x6A	; 106
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    409e:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    40a2:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE12stringLength>
				value = 0;
    40a6:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE5value+0x1>
    40aa:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE5value>
				digits = 0;
    40ae:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    40b2:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    40b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_DTMF_unlocked>
    40ba:	88 23       	and	r24, r24
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <_Z10processKeyc+0xa6>
    40be:	ae c3       	rjmp	.+1884   	; 0x481c <_Z10processKeyc+0x802>
				{
					if(key == 'A')
    40c0:	21 34       	cpi	r18, 0x41	; 65
    40c2:	39 f4       	brne	.+14     	; 0x40d2 <_Z10processKeyc+0xb8>
					{
						state = STATE_A;
    40c4:	82 e0       	ldi	r24, 0x02	; 2
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    40d0:	a5 c3       	rjmp	.+1866   	; 0x481c <_Z10processKeyc+0x802>
					}
					else if(key == 'B')
    40d2:	22 34       	cpi	r18, 0x42	; 66
    40d4:	39 f4       	brne	.+14     	; 0x40e4 <_Z10processKeyc+0xca>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    40d6:	82 e1       	ldi	r24, 0x12	; 18
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    40e2:	9c c3       	rjmp	.+1848   	; 0x481c <_Z10processKeyc+0x802>
					}
					else if(key == 'C')
    40e4:	23 34       	cpi	r18, 0x43	; 67
    40e6:	39 f4       	brne	.+14     	; 0x40f6 <_Z10processKeyc+0xdc>
					{
						state = STATE_C;
    40e8:	87 e0       	ldi	r24, 0x07	; 7
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    40f4:	93 c3       	rjmp	.+1830   	; 0x481c <_Z10processKeyc+0x802>
					}
					else if(key != '*')
    40f6:	2a 32       	cpi	r18, 0x2A	; 42
    40f8:	09 f4       	brne	.+2      	; 0x40fc <_Z10processKeyc+0xe2>
    40fa:	90 c3       	rjmp	.+1824   	; 0x481c <_Z10processKeyc+0x802>
					{
						value = key - '0';
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	20 53       	subi	r18, 0x30	; 48
    4100:	31 09       	sbc	r19, r1
    4102:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4106:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							if(g_AM_enabled)
    410a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_AM_enabled>
    410e:	81 11       	cpse	r24, r1
							{
								setupPortsForF1975();
    4110:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_Z18setupPortsForF1975v>
							}
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    4114:	83 e1       	ldi	r24, 0x13	; 19
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    411c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4120:	7d c3       	rjmp	.+1786   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_A:
			{
				state = STATE_SHUTDOWN;
    4122:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4126:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>

				if(key == '0')
    412a:	80 33       	cpi	r24, 0x30	; 48
    412c:	39 f4       	brne	.+14     	; 0x413c <_Z10processKeyc+0x122>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4136:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    413a:	70 c3       	rjmp	.+1760   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '1')
    413c:	81 33       	cpi	r24, 0x31	; 49
    413e:	39 f4       	brne	.+14     	; 0x414e <_Z10processKeyc+0x134>
				{
					state = STATE_START_TRANSMISSIONS;
    4140:	84 e0       	ldi	r24, 0x04	; 4
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4148:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    414c:	67 c3       	rjmp	.+1742   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '2')
    414e:	82 33       	cpi	r24, 0x32	; 50
    4150:	39 f4       	brne	.+14     	; 0x4160 <_Z10processKeyc+0x146>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    4152:	85 e0       	ldi	r24, 0x05	; 5
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    415a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    415e:	5e c3       	rjmp	.+1724   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '3')
    4160:	83 33       	cpi	r24, 0x33	; 51
    4162:	39 f4       	brne	.+14     	; 0x4172 <_Z10processKeyc+0x158>
				{
					state = STATE_START_TRANSMITTING_NOW;
    4164:	86 e0       	ldi	r24, 0x06	; 6
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    416c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4170:	55 c3       	rjmp	.+1706   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key == '8') && setPasswordEnabled)
    4172:	88 33       	cpi	r24, 0x38	; 56
    4174:	09 f0       	breq	.+2      	; 0x4178 <_Z10processKeyc+0x15e>
    4176:	52 c3       	rjmp	.+1700   	; 0x481c <_Z10processKeyc+0x802>
    4178:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE18setPasswordEnabled>
    417c:	88 23       	and	r24, r24
    417e:	09 f4       	brne	.+2      	; 0x4182 <_Z10processKeyc+0x168>
    4180:	4d c3       	rjmp	.+1690   	; 0x481c <_Z10processKeyc+0x802>
				{
					state = STATE_SET_PASSWORD;
    4182:	80 e1       	ldi	r24, 0x10	; 16
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    418a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    418e:	46 c3       	rjmp	.+1676   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    4190:	80 ed       	ldi	r24, 0xD0	; 208
    4192:	82 0f       	add	r24, r18
    4194:	8a 30       	cpi	r24, 0x0A	; 10
    4196:	08 f5       	brcc	.+66     	; 0x41da <_Z10processKeyc+0x1c0>
				{
					value *= 10;
					value += key - '0';
    4198:	40 91 78 04 	lds	r20, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    419c:	50 91 79 04 	lds	r21, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    41a0:	ca 01       	movw	r24, r20
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	44 0f       	add	r20, r20
    41a8:	55 1f       	adc	r21, r21
    41aa:	44 0f       	add	r20, r20
    41ac:	55 1f       	adc	r21, r21
    41ae:	44 0f       	add	r20, r20
    41b0:	55 1f       	adc	r21, r21
    41b2:	48 0f       	add	r20, r24
    41b4:	59 1f       	adc	r21, r25
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	20 53       	subi	r18, 0x30	; 48
    41ba:	31 09       	sbc	r19, r1
    41bc:	42 0f       	add	r20, r18
    41be:	53 1f       	adc	r21, r19
    41c0:	50 93 79 04 	sts	0x0479, r21	; 0x800479 <_ZZ10processKeycE5value+0x1>
    41c4:	40 93 78 04 	sts	0x0478, r20	; 0x800478 <_ZZ10processKeycE5value>
					digits++;
    41c8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    41cc:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    41d0:	01 96       	adiw	r24, 0x01	; 1
    41d2:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    41d6:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
				}

				if(digits >= 2)
    41da:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    41de:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    41e2:	02 97       	sbiw	r24, 0x02	; 2
    41e4:	0c f4       	brge	.+2      	; 0x41e8 <_Z10processKeyc+0x1ce>
    41e6:	1a c3       	rjmp	.+1588   	; 0x481c <_Z10processKeyc+0x802>
				{
					state = STATE_SHUTDOWN;
    41e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    41ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    41f0:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    41f4:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    41f8:	98 13       	cpse	r25, r24
    41fa:	10 c3       	rjmp	.+1568   	; 0x481c <_Z10processKeyc+0x802>
					{
						state = STATE_SENTENCE_START;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4204:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4208:	09 c3       	rjmp	.+1554   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    420a:	83 32       	cpi	r24, 0x23	; 35
    420c:	09 f0       	breq	.+2      	; 0x4210 <_Z10processKeyc+0x1f6>
    420e:	06 c3       	rjmp	.+1548   	; 0x481c <_Z10processKeyc+0x802>
				{
					stopEventNow(PROGRAMMATIC);
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    4216:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    421a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    421e:	fe c2       	rjmp	.+1532   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    4220:	83 32       	cpi	r24, 0x23	; 35
    4222:	09 f0       	breq	.+2      	; 0x4226 <_Z10processKeyc+0x20c>
    4224:	fb c2       	rjmp	.+1526   	; 0x481c <_Z10processKeyc+0x802>
				{
					startEventNow(PROGRAMMATIC);
    4226:	82 e0       	ldi	r24, 0x02	; 2
    4228:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    422c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4230:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4234:	f3 c2       	rjmp	.+1510   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    4236:	83 32       	cpi	r24, 0x23	; 35
    4238:	09 f0       	breq	.+2      	; 0x423c <_Z10processKeyc+0x222>
    423a:	f0 c2       	rjmp	.+1504   	; 0x481c <_Z10processKeyc+0x802>
				{
					startEventUsingRTC();
    423c:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    4240:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4244:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4248:	e9 c2       	rjmp	.+1490   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    424a:	83 32       	cpi	r24, 0x23	; 35
    424c:	09 f0       	breq	.+2      	; 0x4250 <_Z10processKeyc+0x236>
    424e:	e6 c2       	rjmp	.+1484   	; 0x481c <_Z10processKeyc+0x802>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    4250:	62 e0       	ldi	r22, 0x02	; 2
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    425a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    425e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4262:	dc c2       	rjmp	.+1464   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    4264:	81 33       	cpi	r24, 0x31	; 49
    4266:	39 f4       	brne	.+14     	; 0x4276 <_Z10processKeyc+0x25c>
				{
					state = STATE_RECEIVING_CALLSIGN;
    4268:	88 e0       	ldi	r24, 0x08	; 8
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4270:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4274:	d3 c2       	rjmp	.+1446   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '2')
    4276:	82 33       	cpi	r24, 0x32	; 50
    4278:	39 f4       	brne	.+14     	; 0x4288 <_Z10processKeyc+0x26e>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    427a:	89 e0       	ldi	r24, 0x09	; 9
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4282:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4286:	ca c2       	rjmp	.+1428   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    4288:	83 33       	cpi	r24, 0x33	; 51
    428a:	39 f4       	brne	.+14     	; 0x429a <_Z10processKeyc+0x280>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    428c:	8d e0       	ldi	r24, 0x0D	; 13
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4294:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4298:	c1 c2       	rjmp	.+1410   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '4')
    429a:	84 33       	cpi	r24, 0x34	; 52
    429c:	39 f4       	brne	.+14     	; 0x42ac <_Z10processKeyc+0x292>
				{
					state = STATE_RECEIVING_START_TIME;
    429e:	8a e0       	ldi	r24, 0x0A	; 10
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42aa:	b8 c2       	rjmp	.+1392   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '5')
    42ac:	85 33       	cpi	r24, 0x35	; 53
    42ae:	39 f4       	brne	.+14     	; 0x42be <_Z10processKeyc+0x2a4>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    42b0:	8b e0       	ldi	r24, 0x0B	; 11
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42b8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42bc:	af c2       	rjmp	.+1374   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '6')
    42be:	86 33       	cpi	r24, 0x36	; 54
    42c0:	69 f4       	brne	.+26     	; 0x42dc <_Z10processKeyc+0x2c2>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    42c2:	8c e0       	ldi	r24, 0x0C	; 12
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    42d6:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
    42da:	a0 c2       	rjmp	.+1344   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == '9')
    42dc:	89 33       	cpi	r24, 0x39	; 57
    42de:	39 f4       	brne	.+14     	; 0x42ee <_Z10processKeyc+0x2d4>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    42e0:	8e e0       	ldi	r24, 0x0E	; 14
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42ec:	97 c2       	rjmp	.+1326   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == 'B')
    42ee:	82 34       	cpi	r24, 0x42	; 66
    42f0:	39 f4       	brne	.+14     	; 0x4300 <_Z10processKeyc+0x2e6>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
    42f2:	8f e0       	ldi	r24, 0x0F	; 15
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42fe:	8e c2       	rjmp	.+1308   	; 0x481c <_Z10processKeyc+0x802>
				}
				else
				{
					state = STATE_SHUTDOWN;
    4300:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4304:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4308:	89 c2       	rjmp	.+1298   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    430a:	83 32       	cpi	r24, 0x23	; 35
    430c:	c1 f4       	brne	.+48     	; 0x433e <_Z10processKeyc+0x324>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    430e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4312:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4316:	04 97       	sbiw	r24, 0x04	; 4
    4318:	6c f0       	brlt	.+26     	; 0x4334 <_Z10processKeyc+0x31a>
					{
						strcpy((char*)g_unlockCode, receivedString);
    431a:	60 e6       	ldi	r22, 0x60	; 96
    431c:	74 e0       	ldi	r23, 0x04	; 4
    431e:	84 e4       	ldi	r24, 0x44	; 68
    4320:	95 e0       	ldi	r25, 0x05	; 5
    4322:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    4326:	44 e4       	ldi	r20, 0x44	; 68
    4328:	55 e0       	ldi	r21, 0x05	; 5
    432a:	6e e0       	ldi	r22, 0x0E	; 14
    432c:	8c e9       	ldi	r24, 0x9C	; 156
    432e:	95 e0       	ldi	r25, 0x05	; 5
    4330:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    4334:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4338:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    433c:	6f c2       	rjmp	.+1246   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    433e:	80 ed       	ldi	r24, 0xD0	; 208
    4340:	82 0f       	add	r24, r18
    4342:	8a 30       	cpi	r24, 0x0A	; 10
    4344:	08 f0       	brcs	.+2      	; 0x4348 <_Z10processKeyc+0x32e>
    4346:	6a c2       	rjmp	.+1236   	; 0x481c <_Z10processKeyc+0x802>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    4348:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    434c:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4350:	89 30       	cpi	r24, 0x09	; 9
    4352:	91 05       	cpc	r25, r1
    4354:	0c f0       	brlt	.+2      	; 0x4358 <_Z10processKeyc+0x33e>
    4356:	62 c2       	rjmp	.+1220   	; 0x481c <_Z10processKeyc+0x802>
					{
						receivedString[stringLength++] = key;
    4358:	ac 01       	movw	r20, r24
    435a:	4f 5f       	subi	r20, 0xFF	; 255
    435c:	5f 4f       	sbci	r21, 0xFF	; 255
    435e:	50 93 7b 04 	sts	0x047B, r21	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4362:	40 93 7a 04 	sts	0x047A, r20	; 0x80047a <_ZZ10processKeycE12stringLength>
    4366:	fc 01       	movw	r30, r24
    4368:	e0 5a       	subi	r30, 0xA0	; 160
    436a:	fb 4f       	sbci	r31, 0xFB	; 251
    436c:	20 83       	st	Z, r18
						receivedString[stringLength] = '\0';
    436e:	fa 01       	movw	r30, r20
    4370:	e0 5a       	subi	r30, 0xA0	; 160
    4372:	fb 4f       	sbci	r31, 0xFB	; 251
    4374:	10 82       	st	Z, r1
    4376:	52 c2       	rjmp	.+1188   	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    4378:	83 32       	cpi	r24, 0x23	; 35
    437a:	e1 f4       	brne	.+56     	; 0x43b4 <_Z10processKeyc+0x39a>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    437c:	e0 e6       	ldi	r30, 0x60	; 96
    437e:	f4 e0       	ldi	r31, 0x04	; 4
    4380:	01 90       	ld	r0, Z+
    4382:	00 20       	and	r0, r0
    4384:	e9 f7       	brne	.-6      	; 0x4380 <_Z10processKeyc+0x366>
    4386:	31 97       	sbiw	r30, 0x01	; 1
    4388:	e0 56       	subi	r30, 0x60	; 96
    438a:	f4 40       	sbci	r31, 0x04	; 4
    438c:	75 97       	sbiw	r30, 0x15	; 21
    438e:	68 f4       	brcc	.+26     	; 0x43aa <_Z10processKeyc+0x390>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    4390:	60 e6       	ldi	r22, 0x60	; 96
    4392:	74 e0       	ldi	r23, 0x04	; 4
    4394:	88 e2       	ldi	r24, 0x28	; 40
    4396:	95 e0       	ldi	r25, 0x05	; 5
    4398:	0e 94 cc 30 	call	0x6198	; 0x6198 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    439c:	48 e2       	ldi	r20, 0x28	; 40
    439e:	55 e0       	ldi	r21, 0x05	; 5
    43a0:	6b e0       	ldi	r22, 0x0B	; 11
    43a2:	8c e9       	ldi	r24, 0x9C	; 156
    43a4:	95 e0       	ldi	r25, 0x05	; 5
    43a6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    43aa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    43ae:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    43b2:	34 c2       	rjmp	.+1128   	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    43b4:	80 ed       	ldi	r24, 0xD0	; 208
    43b6:	82 0f       	add	r24, r18
    43b8:	8a 30       	cpi	r24, 0x0A	; 10
    43ba:	08 f0       	brcs	.+2      	; 0x43be <_Z10processKeyc+0x3a4>
    43bc:	2f c2       	rjmp	.+1118   	; 0x481c <_Z10processKeyc+0x802>
				{
					if(digits)
    43be:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    43c2:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    43c6:	89 2b       	or	r24, r25
    43c8:	c1 f1       	breq	.+112    	; 0x443a <_Z10processKeyc+0x420>
					{
						value = value * 10 + (key - '0');
    43ca:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    43ce:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    43d2:	ac 01       	movw	r20, r24
    43d4:	44 0f       	add	r20, r20
    43d6:	55 1f       	adc	r21, r21
    43d8:	88 0f       	add	r24, r24
    43da:	99 1f       	adc	r25, r25
    43dc:	88 0f       	add	r24, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	84 0f       	add	r24, r20
    43e6:	95 1f       	adc	r25, r21
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	20 53       	subi	r18, 0x30	; 48
    43ec:	31 09       	sbc	r19, r1
    43ee:	28 0f       	add	r18, r24
    43f0:	39 1f       	adc	r19, r25
    43f2:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    43f6:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    43fa:	27 32       	cpi	r18, 0x27	; 39
    43fc:	31 05       	cpc	r19, r1
    43fe:	c4 f4       	brge	.+48     	; 0x4430 <_Z10processKeyc+0x416>
    4400:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4404:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4408:	84 31       	cpi	r24, 0x14	; 20
    440a:	91 05       	cpc	r25, r1
    440c:	8c f4       	brge	.+34     	; 0x4430 <_Z10processKeyc+0x416>
						{
							receivedString[stringLength] = keyMorse[value];
    440e:	fc 01       	movw	r30, r24
    4410:	e0 5a       	subi	r30, 0xA0	; 160
    4412:	fb 4f       	sbci	r31, 0xFB	; 251
    4414:	d9 01       	movw	r26, r18
    4416:	ad 59       	subi	r26, 0x9D	; 157
    4418:	bd 4f       	sbci	r27, 0xFD	; 253
    441a:	2c 91       	ld	r18, X
    441c:	20 83       	st	Z, r18
							stringLength++;
    441e:	01 96       	adiw	r24, 0x01	; 1
    4420:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4424:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    4428:	fc 01       	movw	r30, r24
    442a:	e0 5a       	subi	r30, 0xA0	; 160
    442c:	fb 4f       	sbci	r31, 0xFB	; 251
    442e:	10 82       	st	Z, r1
						}

						digits = 0;
    4430:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4434:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>
    4438:	f1 c1       	rjmp	.+994    	; 0x481c <_Z10processKeyc+0x802>
					}
					else
					{
						value = key - '0';
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	20 53       	subi	r18, 0x30	; 48
    443e:	31 09       	sbc	r19, r1
    4440:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4444:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
						digits = 1;
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4450:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
    4454:	e3 c1       	rjmp	.+966    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    4456:	83 32       	cpi	r24, 0x23	; 35
    4458:	f9 f4       	brne	.+62     	; 0x4498 <_Z10processKeyc+0x47e>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    445a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    445e:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4462:	82 31       	cpi	r24, 0x12	; 18
    4464:	91 05       	cpc	r25, r1
    4466:	98 f4       	brcc	.+38     	; 0x448e <_Z10processKeyc+0x474>
					{
						Fox_t holdFox = (Fox_t)value;
    4468:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    446a:	ae 01       	movw	r20, r28
    446c:	4f 5f       	subi	r20, 0xFF	; 255
    446e:	5f 4f       	sbci	r21, 0xFF	; 255
    4470:	60 e1       	ldi	r22, 0x10	; 16
    4472:	8c e9       	ldi	r24, 0x9C	; 156
    4474:	95 e0       	ldi	r25, 0x05	; 5
    4476:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    447a:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    447e:	99 81       	ldd	r25, Y+1	; 0x01
    4480:	98 17       	cp	r25, r24
    4482:	29 f0       	breq	.+10     	; 0x448e <_Z10processKeyc+0x474>
						{
							setupForFox(&holdFox, START_NOTHING);
    4484:	60 e0       	ldi	r22, 0x00	; 0
    4486:	ce 01       	movw	r24, r28
    4488:	01 96       	adiw	r24, 0x01	; 1
    448a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
					state = STATE_SHUTDOWN;
    448e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4492:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4496:	c2 c1       	rjmp	.+900    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4498:	80 ed       	ldi	r24, 0xD0	; 208
    449a:	82 0f       	add	r24, r18
    449c:	8a 30       	cpi	r24, 0x0A	; 10
    449e:	08 f0       	brcs	.+2      	; 0x44a2 <_Z10processKeyc+0x488>
    44a0:	bd c1       	rjmp	.+890    	; 0x481c <_Z10processKeyc+0x802>
				{
					value *= 10;
					value += key - '0';
    44a2:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    44a6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    44aa:	ac 01       	movw	r20, r24
    44ac:	44 0f       	add	r20, r20
    44ae:	55 1f       	adc	r21, r21
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	88 0f       	add	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	88 0f       	add	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	84 0f       	add	r24, r20
    44be:	95 1f       	adc	r25, r21
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	20 53       	subi	r18, 0x30	; 48
    44c4:	31 09       	sbc	r19, r1
    44c6:	82 0f       	add	r24, r18
    44c8:	93 1f       	adc	r25, r19
    44ca:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE5value+0x1>
    44ce:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE5value>
    44d2:	a4 c1       	rjmp	.+840    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    44d4:	83 32       	cpi	r24, 0x23	; 35
    44d6:	f9 f4       	brne	.+62     	; 0x4516 <_Z10processKeyc+0x4fc>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    44d8:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    44dc:	41 95       	neg	r20
    44de:	6b e8       	ldi	r22, 0x8B	; 139
    44e0:	75 e0       	ldi	r23, 0x05	; 5
    44e2:	80 e6       	ldi	r24, 0x60	; 96
    44e4:	94 e0       	ldi	r25, 0x04	; 4
    44e6:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z18validateTimeStringPcPma>
    44ea:	6b 01       	movw	r12, r22
    44ec:	7c 01       	movw	r14, r24

					if(t)
    44ee:	61 15       	cp	r22, r1
    44f0:	71 05       	cpc	r23, r1
    44f2:	81 05       	cpc	r24, r1
    44f4:	91 05       	cpc	r25, r1
    44f6:	51 f0       	breq	.+20     	; 0x450c <_Z10processKeyc+0x4f2>
					{
						rv3028_set_epoch(t);
    44f8:	0e 94 b7 29 	call	0x536e	; 0x536e <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    44fc:	c0 92 8b 05 	sts	0x058B, r12	; 0x80058b <g_current_epoch>
    4500:	d0 92 8c 05 	sts	0x058C, r13	; 0x80058c <g_current_epoch+0x1>
    4504:	e0 92 8d 05 	sts	0x058D, r14	; 0x80058d <g_current_epoch+0x2>
    4508:	f0 92 8e 05 	sts	0x058E, r15	; 0x80058e <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    450c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4510:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4514:	83 c1       	rjmp	.+774    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4516:	80 ed       	ldi	r24, 0xD0	; 208
    4518:	82 0f       	add	r24, r18
    451a:	8a 30       	cpi	r24, 0x0A	; 10
    451c:	08 f0       	brcs	.+2      	; 0x4520 <_Z10processKeyc+0x506>
    451e:	7e c1       	rjmp	.+764    	; 0x481c <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4520:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4524:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4528:	88 32       	cpi	r24, 0x28	; 40
    452a:	91 05       	cpc	r25, r1
    452c:	0c f0       	brlt	.+2      	; 0x4530 <_Z10processKeyc+0x516>
    452e:	76 c1       	rjmp	.+748    	; 0x481c <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    4530:	fc 01       	movw	r30, r24
    4532:	e0 5a       	subi	r30, 0xA0	; 160
    4534:	fb 4f       	sbci	r31, 0xFB	; 251
    4536:	20 83       	st	Z, r18
						stringLength++;
    4538:	01 96       	adiw	r24, 0x01	; 1
    453a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    453e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    4542:	fc 01       	movw	r30, r24
    4544:	e0 5a       	subi	r30, 0xA0	; 160
    4546:	fb 4f       	sbci	r31, 0xFB	; 251
    4548:	10 82       	st	Z, r1
    454a:	68 c1       	rjmp	.+720    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    454c:	83 32       	cpi	r24, 0x23	; 35
    454e:	39 f5       	brne	.+78     	; 0x459e <_Z10processKeyc+0x584>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    4550:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    4554:	41 95       	neg	r20
    4556:	67 e8       	ldi	r22, 0x87	; 135
    4558:	75 e0       	ldi	r23, 0x05	; 5
    455a:	80 e6       	ldi	r24, 0x60	; 96
    455c:	94 e0       	ldi	r25, 0x04	; 4
    455e:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z18validateTimeStringPcPma>

					if(s)
    4562:	61 15       	cp	r22, r1
    4564:	71 05       	cpc	r23, r1
    4566:	81 05       	cpc	r24, r1
    4568:	91 05       	cpc	r25, r1
    456a:	a1 f0       	breq	.+40     	; 0x4594 <_Z10processKeyc+0x57a>
					{
						g_event_start_epoch = s;
    456c:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <g_event_start_epoch>
    4570:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <g_event_start_epoch+0x1>
    4574:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_start_epoch+0x2>
    4578:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    457c:	47 e8       	ldi	r20, 0x87	; 135
    457e:	55 e0       	ldi	r21, 0x05	; 5
    4580:	64 e1       	ldi	r22, 0x14	; 20
    4582:	8c e9       	ldi	r24, 0x9C	; 156
    4584:	95 e0       	ldi	r25, 0x05	; 5
    4586:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    458a:	63 e0       	ldi	r22, 0x03	; 3
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    4594:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4598:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    459c:	3f c1       	rjmp	.+638    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    459e:	80 ed       	ldi	r24, 0xD0	; 208
    45a0:	82 0f       	add	r24, r18
    45a2:	8a 30       	cpi	r24, 0x0A	; 10
    45a4:	08 f0       	brcs	.+2      	; 0x45a8 <_Z10processKeyc+0x58e>
    45a6:	3a c1       	rjmp	.+628    	; 0x481c <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    45a8:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    45ac:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    45b0:	88 32       	cpi	r24, 0x28	; 40
    45b2:	91 05       	cpc	r25, r1
    45b4:	0c f0       	brlt	.+2      	; 0x45b8 <_Z10processKeyc+0x59e>
    45b6:	32 c1       	rjmp	.+612    	; 0x481c <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    45b8:	fc 01       	movw	r30, r24
    45ba:	e0 5a       	subi	r30, 0xA0	; 160
    45bc:	fb 4f       	sbci	r31, 0xFB	; 251
    45be:	20 83       	st	Z, r18
						stringLength++;
    45c0:	01 96       	adiw	r24, 0x01	; 1
    45c2:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    45c6:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    45ca:	fc 01       	movw	r30, r24
    45cc:	e0 5a       	subi	r30, 0xA0	; 160
    45ce:	fb 4f       	sbci	r31, 0xFB	; 251
    45d0:	10 82       	st	Z, r1
    45d2:	24 c1       	rjmp	.+584    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    45d4:	83 32       	cpi	r24, 0x23	; 35
    45d6:	39 f5       	brne	.+78     	; 0x4626 <_Z10processKeyc+0x60c>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    45d8:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    45dc:	41 95       	neg	r20
    45de:	63 e8       	ldi	r22, 0x83	; 131
    45e0:	75 e0       	ldi	r23, 0x05	; 5
    45e2:	80 e6       	ldi	r24, 0x60	; 96
    45e4:	94 e0       	ldi	r25, 0x04	; 4
    45e6:	0e 94 24 19 	call	0x3248	; 0x3248 <_Z18validateTimeStringPcPma>

					if(f)
    45ea:	61 15       	cp	r22, r1
    45ec:	71 05       	cpc	r23, r1
    45ee:	81 05       	cpc	r24, r1
    45f0:	91 05       	cpc	r25, r1
    45f2:	a1 f0       	breq	.+40     	; 0x461c <_Z10processKeyc+0x602>
					{
						g_event_finish_epoch = f;
    45f4:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_event_finish_epoch>
    45f8:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_event_finish_epoch+0x1>
    45fc:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_event_finish_epoch+0x2>
    4600:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4604:	43 e8       	ldi	r20, 0x83	; 131
    4606:	55 e0       	ldi	r21, 0x05	; 5
    4608:	65 e1       	ldi	r22, 0x15	; 21
    460a:	8c e9       	ldi	r24, 0x9C	; 156
    460c:	95 e0       	ldi	r25, 0x05	; 5
    460e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4612:	63 e0       	ldi	r22, 0x03	; 3
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    461c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4620:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4624:	fb c0       	rjmp	.+502    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4626:	80 ed       	ldi	r24, 0xD0	; 208
    4628:	82 0f       	add	r24, r18
    462a:	8a 30       	cpi	r24, 0x0A	; 10
    462c:	08 f0       	brcs	.+2      	; 0x4630 <_Z10processKeyc+0x616>
    462e:	f6 c0       	rjmp	.+492    	; 0x481c <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4630:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4634:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4638:	88 32       	cpi	r24, 0x28	; 40
    463a:	91 05       	cpc	r25, r1
    463c:	0c f0       	brlt	.+2      	; 0x4640 <_Z10processKeyc+0x626>
    463e:	ee c0       	rjmp	.+476    	; 0x481c <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    4640:	fc 01       	movw	r30, r24
    4642:	e0 5a       	subi	r30, 0xA0	; 160
    4644:	fb 4f       	sbci	r31, 0xFB	; 251
    4646:	20 83       	st	Z, r18
						stringLength++;
    4648:	01 96       	adiw	r24, 0x01	; 1
    464a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    464e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    4652:	fc 01       	movw	r30, r24
    4654:	e0 5a       	subi	r30, 0xA0	; 160
    4656:	fb 4f       	sbci	r31, 0xFB	; 251
    4658:	10 82       	st	Z, r1
    465a:	e0 c0       	rjmp	.+448    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    465c:	83 32       	cpi	r24, 0x23	; 35
    465e:	e9 f4       	brne	.+58     	; 0x469a <_Z10processKeyc+0x680>
				{
					if((value >= 0) && (value < 24))
    4660:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    4664:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4668:	88 31       	cpi	r24, 0x18	; 24
    466a:	91 05       	cpc	r25, r1
    466c:	88 f4       	brcc	.+34     	; 0x4690 <_Z10processKeyc+0x676>
					{
						int8_t hold = value * digits;
    466e:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    4672:	98 9f       	mul	r25, r24
    4674:	80 2d       	mov	r24, r0
    4676:	11 24       	eor	r1, r1
    4678:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    467a:	ae 01       	movw	r20, r28
    467c:	4f 5f       	subi	r20, 0xFF	; 255
    467e:	5f 4f       	sbci	r21, 0xFF	; 255
    4680:	66 e1       	ldi	r22, 0x16	; 22
    4682:	8c e9       	ldi	r24, 0x9C	; 156
    4684:	95 e0       	ldi	r25, 0x05	; 5
    4686:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    4690:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4694:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4698:	c1 c0       	rjmp	.+386    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    469a:	80 ed       	ldi	r24, 0xD0	; 208
    469c:	82 0f       	add	r24, r18
    469e:	8a 30       	cpi	r24, 0x0A	; 10
    46a0:	c8 f4       	brcc	.+50     	; 0x46d4 <_Z10processKeyc+0x6ba>
				{
					value *= 10;
					value += key - '0';
    46a2:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    46a6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    46aa:	ac 01       	movw	r20, r24
    46ac:	44 0f       	add	r20, r20
    46ae:	55 1f       	adc	r21, r21
    46b0:	88 0f       	add	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	88 0f       	add	r24, r24
    46b6:	99 1f       	adc	r25, r25
    46b8:	88 0f       	add	r24, r24
    46ba:	99 1f       	adc	r25, r25
    46bc:	84 0f       	add	r24, r20
    46be:	95 1f       	adc	r25, r21
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	20 53       	subi	r18, 0x30	; 48
    46c4:	31 09       	sbc	r19, r1
    46c6:	82 0f       	add	r24, r18
    46c8:	93 1f       	adc	r25, r19
    46ca:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE5value+0x1>
    46ce:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE5value>
    46d2:	a4 c0       	rjmp	.+328    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if(key == 'B')
    46d4:	22 34       	cpi	r18, 0x42	; 66
    46d6:	09 f0       	breq	.+2      	; 0x46da <_Z10processKeyc+0x6c0>
    46d8:	a1 c0       	rjmp	.+322    	; 0x481c <_Z10processKeyc+0x802>
				{
					digits = -1;
    46da:	8f ef       	ldi	r24, 0xFF	; 255
    46dc:	9f ef       	ldi	r25, 0xFF	; 255
    46de:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    46e2:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
    46e6:	9a c0       	rjmp	.+308    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    46e8:	83 32       	cpi	r24, 0x23	; 35
    46ea:	a1 f4       	brne	.+40     	; 0x4714 <_Z10processKeyc+0x6fa>
				{
					g_AM_audio_frequency = value;
    46ec:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    46f0:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    46f4:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    46f8:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	55 e0       	ldi	r21, 0x05	; 5
    4700:	61 e1       	ldi	r22, 0x11	; 17
    4702:	8c e9       	ldi	r24, 0x9C	; 156
    4704:	95 e0       	ldi	r25, 0x05	; 5
    4706:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    470a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    470e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4712:	84 c0       	rjmp	.+264    	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    4714:	87 30       	cpi	r24, 0x07	; 7
    4716:	08 f0       	brcs	.+2      	; 0x471a <_Z10processKeyc+0x700>
    4718:	81 c0       	rjmp	.+258    	; 0x481c <_Z10processKeyc+0x802>
				{
					value = key - '0';
    471a:	28 2f       	mov	r18, r24
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	20 53       	subi	r18, 0x30	; 48
    4720:	31 09       	sbc	r19, r1
    4722:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4726:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
    472a:	78 c0       	rjmp	.+240    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_GET_BATTERY_VOLTAGE:
			{
				if(key == '#')
    472c:	83 32       	cpi	r24, 0x23	; 35
    472e:	39 f4       	brne	.+14     	; 0x473e <_Z10processKeyc+0x724>
				{
					Fox_t f = REPORT_BATTERY;
    4730:	83 e1       	ldi	r24, 0x13	; 19
    4732:	89 83       	std	Y+1, r24	; 0x01
					setupForFox(&f, START_TRANSMISSIONS_NOW);
    4734:	62 e0       	ldi	r22, 0x02	; 2
    4736:	ce 01       	movw	r24, r28
    4738:	01 96       	adiw	r24, 0x01	; 1
    473a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_Z11setupForFoxP5Fox_t13EventAction_t>
				}

				state = STATE_SHUTDOWN;
    473e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4742:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;
    4746:	6a c0       	rjmp	.+212    	; 0x481c <_Z10processKeyc+0x802>

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    4748:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    474c:	30 91 77 04 	lds	r19, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4750:	a9 01       	movw	r20, r18
    4752:	4f 5f       	subi	r20, 0xFF	; 255
    4754:	5f 4f       	sbci	r21, 0xFF	; 255
    4756:	50 93 77 04 	sts	0x0477, r21	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    475a:	40 93 76 04 	sts	0x0476, r20	; 0x800476 <_ZZ10processKeycE6digits>
    475e:	f9 01       	movw	r30, r18
    4760:	ec 5b       	subi	r30, 0xBC	; 188
    4762:	fa 4f       	sbci	r31, 0xFA	; 250
    4764:	90 81       	ld	r25, Z
    4766:	89 13       	cpse	r24, r25
    4768:	12 c0       	rjmp	.+36     	; 0x478e <_Z10processKeyc+0x774>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    476a:	e4 e4       	ldi	r30, 0x44	; 68
    476c:	f5 e0       	ldi	r31, 0x05	; 5
    476e:	01 90       	ld	r0, Z+
    4770:	00 20       	and	r0, r0
    4772:	e9 f7       	brne	.-6      	; 0x476e <_Z10processKeyc+0x754>
    4774:	31 97       	sbiw	r30, 0x01	; 1
    4776:	e4 54       	subi	r30, 0x44	; 68
    4778:	f5 40       	sbci	r31, 0x05	; 5
    477a:	e4 17       	cp	r30, r20
    477c:	f5 07       	cpc	r31, r21
    477e:	09 f0       	breq	.+2      	; 0x4782 <_Z10processKeyc+0x768>
    4780:	4d c0       	rjmp	.+154    	; 0x481c <_Z10processKeyc+0x802>
					{
						g_DTMF_unlocked = TRUE;
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    4788:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ10processKeycE18setPasswordEnabled>
    478c:	47 c0       	rjmp	.+142    	; 0x481c <_Z10processKeyc+0x802>
					}
				}
				else
				{
					digits = 0;
    478e:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4792:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    4796:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    479a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    479e:	3e c0       	rjmp	.+124    	; 0x481c <_Z10processKeyc+0x802>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    47a0:	83 32       	cpi	r24, 0x23	; 35
    47a2:	01 f5       	brne	.+64     	; 0x47e4 <_Z10processKeyc+0x7ca>
				{
					if(value == 0)
    47a4:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    47a8:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    47ac:	00 97       	sbiw	r24, 0x00	; 0
    47ae:	41 f4       	brne	.+16     	; 0x47c0 <_Z10processKeyc+0x7a6>
					{
						setAtten(0);
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <g_sendAMmodulationConstantly>
    47be:	0d c0       	rjmp	.+26     	; 0x47da <_Z10processKeyc+0x7c0>
					}
					else if(value > 315)
    47c0:	8c 33       	cpi	r24, 0x3C	; 60
    47c2:	21 e0       	ldi	r18, 0x01	; 1
    47c4:	92 07       	cpc	r25, r18
    47c6:	3c f0       	brlt	.+14     	; 0x47d6 <_Z10processKeyc+0x7bc>
					{
						g_sendAMmodulationConstantly = FALSE;
    47c8:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    47cc:	8b e3       	ldi	r24, 0x3B	; 59
    47ce:	91 e0       	ldi	r25, 0x01	; 1
    47d0:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z8setAttenj>
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <_Z10processKeyc+0x7c0>
					}
					else
					{
						setAtten(value);
    47d6:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    47da:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    47de:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    47e2:	1c c0       	rjmp	.+56     	; 0x481c <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    47e4:	80 ed       	ldi	r24, 0xD0	; 208
    47e6:	82 0f       	add	r24, r18
    47e8:	8a 30       	cpi	r24, 0x0A	; 10
    47ea:	c0 f4       	brcc	.+48     	; 0x481c <_Z10processKeyc+0x802>
				{
					value *= 10;
					value += key - '0';
    47ec:	40 91 78 04 	lds	r20, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    47f0:	50 91 79 04 	lds	r21, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    47f4:	ca 01       	movw	r24, r20
    47f6:	88 0f       	add	r24, r24
    47f8:	99 1f       	adc	r25, r25
    47fa:	44 0f       	add	r20, r20
    47fc:	55 1f       	adc	r21, r21
    47fe:	44 0f       	add	r20, r20
    4800:	55 1f       	adc	r21, r21
    4802:	44 0f       	add	r20, r20
    4804:	55 1f       	adc	r21, r21
    4806:	84 0f       	add	r24, r20
    4808:	95 1f       	adc	r25, r21
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	20 53       	subi	r18, 0x30	; 48
    480e:	31 09       	sbc	r19, r1
    4810:	82 0f       	add	r24, r18
    4812:	93 1f       	adc	r25, r19
    4814:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4818:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    481c:	0f 90       	pop	r0
    481e:	df 91       	pop	r29
    4820:	cf 91       	pop	r28
    4822:	ff 90       	pop	r15
    4824:	ef 90       	pop	r14
    4826:	df 90       	pop	r13
    4828:	cf 90       	pop	r12
    482a:	08 95       	ret

0000482c <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    482c:	2f 92       	push	r2
    482e:	3f 92       	push	r3
    4830:	4f 92       	push	r4
    4832:	5f 92       	push	r5
    4834:	6f 92       	push	r6
    4836:	7f 92       	push	r7
    4838:	8f 92       	push	r8
    483a:	9f 92       	push	r9
    483c:	af 92       	push	r10
    483e:	bf 92       	push	r11
    4840:	cf 92       	push	r12
    4842:	df 92       	push	r13
    4844:	ef 92       	push	r14
    4846:	ff 92       	push	r15
    4848:	0f 93       	push	r16
    484a:	1f 93       	push	r17
    484c:	cf 93       	push	r28
    484e:	df 93       	push	r29
    4850:	1f 92       	push	r1
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
    4856:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_perform_EEPROM_reset>
    485a:	88 23       	and	r24, r24
    485c:	61 f0       	breq	.+24     	; 0x4876 <_Z4loopv+0x4a>
		{
			g_perform_EEPROM_reset = FALSE;
    485e:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_perform_EEPROM_reset>
			ee_mgr.resetEEPROMValues();
    4862:	8c e9       	ldi	r24, 0x9C	; 156
    4864:	95 e0       	ldi	r25, 0x05	; 5
    4866:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	71 ee       	ldi	r23, 0xE1	; 225
    486e:	80 e0       	ldi	r24, 0x00	; 0
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z12linkbus_initm>
		}
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    4876:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(g_goertzel.SamplesReady())
    487a:	83 e0       	ldi	r24, 0x03	; 3
    487c:	95 e0       	ldi	r25, 0x05	; 5
    487e:	0e 94 be 06 	call	0xd7c	; 0xd7c <_ZN8Goertzel12SamplesReadyEv>
    4882:	88 23       	and	r24, r24
    4884:	09 f4       	brne	.+2      	; 0x4888 <_Z4loopv+0x5c>
    4886:	36 c1       	rjmp	.+620    	; 0x4af4 <_Z4loopv+0x2c8>
			static char lastKey = '\0';
			static int checkCount = 10;                                         /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4888:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_temperature_check_countdown>
    488c:	81 11       	cpse	r24, r1
    488e:	30 c0       	rjmp	.+96     	; 0x48f0 <_Z4loopv+0xc4>
			{

				setUpSampling(TEMPERATURE_SAMPLING, FALSE);
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_Z13setUpSampling12ADCChannel_th>
				int8_t temp = (int8_t)getTemp();
    4898:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_Z7getTempv>
    489c:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__fixsfsi>
				if(temp != g_temperature)
    48a0:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_temperature>
    48a4:	68 17       	cp	r22, r24
    48a6:	e1 f0       	breq	.+56     	; 0x48e0 <_Z4loopv+0xb4>
				{
					g_temperature = temp;
    48a8:	60 93 43 05 	sts	0x0543, r22	; 0x800543 <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    48ac:	6a 31       	cpi	r22, 0x1A	; 26
    48ae:	14 f0       	brlt	.+4      	; 0x48b4 <_Z4loopv+0x88>
    48b0:	69 51       	subi	r22, 0x19	; 25
    48b2:	03 c0       	rjmp	.+6      	; 0x48ba <_Z4loopv+0x8e>
    48b4:	89 e1       	ldi	r24, 0x19	; 25
    48b6:	86 1b       	sub	r24, r22
    48b8:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    48ba:	06 2e       	mov	r0, r22
    48bc:	00 0c       	add	r0, r0
    48be:	77 0b       	sbc	r23, r23
    48c0:	8c e9       	ldi	r24, 0x9C	; 156
    48c2:	95 e0       	ldi	r25, 0x05	; 5
    48c4:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    48c8:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <g_rv3028_offset>
    48cc:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <g_rv3028_offset+0x1>
    48d0:	a9 01       	movw	r20, r18
    48d2:	48 0f       	add	r20, r24
    48d4:	51 1d       	adc	r21, r1
    48d6:	87 fd       	sbrc	r24, 7
    48d8:	5a 95       	dec	r21
    48da:	ca 01       	movw	r24, r20
    48dc:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <_Z21rv3028_set_offset_RAMj>
				}

				setUpSampling(AUDIO_SAMPLING, FALSE);
    48e0:	60 e0       	ldi	r22, 0x00	; 0
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_Z13setUpSampling12ADCChannel_th>
				g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    48e8:	8b e3       	ldi	r24, 0x3B	; 59
    48ea:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_temperature_check_countdown>
    48ee:	83 c1       	rjmp	.+774    	; 0x4bf6 <_Z4loopv+0x3ca>
			}
			else if(!g_voltage_check_countdown)
    48f0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_voltage_check_countdown>
    48f4:	81 11       	cpse	r24, r1
    48f6:	7f c1       	rjmp	.+766    	; 0x4bf6 <_Z4loopv+0x3ca>
			{
				setUpSampling(VOLTAGE_SAMPLING, FALSE);
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	82 e0       	ldi	r24, 0x02	; 2
    48fc:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_Z13setUpSampling12ADCChannel_th>
				g_voltage = getVoltage();
    4900:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_Z10getVoltagev>
    4904:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <g_voltage+0x1>
    4908:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <g_voltage>
				setUpSampling(AUDIO_SAMPLING, FALSE);
    490c:	60 e0       	ldi	r22, 0x00	; 0
    490e:	80 e0       	ldi	r24, 0x00	; 0
    4910:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_Z13setUpSampling12ADCChannel_th>
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    4914:	8b e0       	ldi	r24, 0x0B	; 11
    4916:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_voltage_check_countdown>
    491a:	6d c1       	rjmp	.+730    	; 0x4bf6 <_Z4loopv+0x3ca>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    491c:	f5 01       	movw	r30, r10
    491e:	41 91       	ld	r20, Z+
    4920:	51 91       	ld	r21, Z+
    4922:	61 91       	ld	r22, Z+
    4924:	71 91       	ld	r23, Z+
    4926:	5f 01       	movw	r10, r30
    4928:	83 e0       	ldi	r24, 0x03	; 3
    492a:	95 e0       	ldi	r25, 0x05	; 5
    492c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    4930:	83 e0       	ldi	r24, 0x03	; 3
    4932:	95 e0       	ldi	r25, 0x05	; 5
    4934:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN8Goertzel10Magnitude2Ev>
    4938:	e6 2e       	mov	r14, r22
    493a:	f7 2e       	mov	r15, r23
    493c:	d8 2e       	mov	r13, r24
    493e:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    4940:	27 2d       	mov	r18, r7
    4942:	36 2d       	mov	r19, r6
    4944:	45 2d       	mov	r20, r5
    4946:	54 2d       	mov	r21, r4
    4948:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__gesf2>
    494c:	18 16       	cp	r1, r24
    494e:	b4 f4       	brge	.+44     	; 0x497c <_Z4loopv+0x150>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	34 e2       	ldi	r19, 0x24	; 36
    4954:	44 e7       	ldi	r20, 0x74	; 116
    4956:	59 e4       	ldi	r21, 0x49	; 73
    4958:	6e 2d       	mov	r22, r14
    495a:	7f 2d       	mov	r23, r15
    495c:	8d 2d       	mov	r24, r13
    495e:	9c 2d       	mov	r25, r12
    4960:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__gesf2>
    4964:	18 16       	cp	r1, r24
    4966:	34 f4       	brge	.+12     	; 0x4974 <_Z4loopv+0x148>
    4968:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    496a:	7e 2c       	mov	r7, r14
    496c:	6f 2c       	mov	r6, r15
    496e:	5d 2c       	mov	r5, r13
    4970:	4c 2c       	mov	r4, r12
    4972:	04 c0       	rjmp	.+8      	; 0x497c <_Z4loopv+0x150>
    4974:	7e 2c       	mov	r7, r14
    4976:	6f 2c       	mov	r6, r15
    4978:	5d 2c       	mov	r5, r13
    497a:	4c 2c       	mov	r4, r12
				g_voltage = getVoltage();
				setUpSampling(AUDIO_SAMPLING, FALSE);
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
			}

			for(int i = 0; i < 4; i++)
    497c:	0f 5f       	subi	r16, 0xFF	; 255
    497e:	1f 4f       	sbci	r17, 0xFF	; 255
    4980:	04 30       	cpi	r16, 0x04	; 4
    4982:	11 05       	cpc	r17, r1
    4984:	59 f6       	brne	.-106    	; 0x491c <_Z4loopv+0xf0>
    4986:	47 c1       	rjmp	.+654    	; 0x4c16 <_Z4loopv+0x3ea>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4988:	f5 01       	movw	r30, r10
    498a:	41 91       	ld	r20, Z+
    498c:	51 91       	ld	r21, Z+
    498e:	61 91       	ld	r22, Z+
    4990:	71 91       	ld	r23, Z+
    4992:	5f 01       	movw	r10, r30
    4994:	83 e0       	ldi	r24, 0x03	; 3
    4996:	95 e0       	ldi	r25, 0x05	; 5
    4998:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    499c:	83 e0       	ldi	r24, 0x03	; 3
    499e:	95 e0       	ldi	r25, 0x05	; 5
    49a0:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN8Goertzel10Magnitude2Ev>
    49a4:	e6 2e       	mov	r14, r22
    49a6:	f7 2e       	mov	r15, r23
    49a8:	d8 2e       	mov	r13, r24
    49aa:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    49ac:	25 2d       	mov	r18, r5
    49ae:	34 2d       	mov	r19, r4
    49b0:	43 2d       	mov	r20, r3
    49b2:	52 2d       	mov	r21, r2
    49b4:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__gesf2>
    49b8:	18 16       	cp	r1, r24
    49ba:	b4 f4       	brge	.+44     	; 0x49e8 <_Z4loopv+0x1bc>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	34 e2       	ldi	r19, 0x24	; 36
    49c0:	44 e7       	ldi	r20, 0x74	; 116
    49c2:	59 e4       	ldi	r21, 0x49	; 73
    49c4:	6e 2d       	mov	r22, r14
    49c6:	7f 2d       	mov	r23, r15
    49c8:	8d 2d       	mov	r24, r13
    49ca:	9c 2d       	mov	r25, r12
    49cc:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__gesf2>
    49d0:	18 16       	cp	r1, r24
    49d2:	34 f4       	brge	.+12     	; 0x49e0 <_Z4loopv+0x1b4>
    49d4:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    49d6:	5e 2c       	mov	r5, r14
    49d8:	4f 2c       	mov	r4, r15
    49da:	3d 2c       	mov	r3, r13
    49dc:	2c 2c       	mov	r2, r12
    49de:	04 c0       	rjmp	.+8      	; 0x49e8 <_Z4loopv+0x1bc>
    49e0:	5e 2c       	mov	r5, r14
    49e2:	4f 2c       	mov	r4, r15
    49e4:	3d 2c       	mov	r3, r13
    49e6:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    49e8:	0f 5f       	subi	r16, 0xFF	; 255
    49ea:	1f 4f       	sbci	r17, 0xFF	; 255
    49ec:	04 30       	cpi	r16, 0x04	; 4
    49ee:	11 05       	cpc	r17, r1
    49f0:	59 f6       	brne	.-106    	; 0x4988 <_Z4loopv+0x15c>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    49f2:	77 20       	and	r7, r7
    49f4:	0c f4       	brge	.+2      	; 0x49f8 <_Z4loopv+0x1cc>
    49f6:	76 c0       	rjmp	.+236    	; 0x4ae4 <_Z4loopv+0x2b8>
				{
					char newKey = key[4 * y + x];
    49f8:	c4 01       	movw	r24, r8
    49fa:	88 0f       	add	r24, r24
    49fc:	99 1f       	adc	r25, r25
    49fe:	88 0f       	add	r24, r24
    4a00:	99 1f       	adc	r25, r25
    4a02:	86 57       	subi	r24, 0x76	; 118
    4a04:	9d 4f       	sbci	r25, 0xFD	; 253
    4a06:	fc 01       	movw	r30, r24
    4a08:	e6 0d       	add	r30, r6
    4a0a:	f7 1d       	adc	r31, r7
    4a0c:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    4a0e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ4loopvE7lastKey>
    4a12:	18 13       	cpse	r17, r24
    4a14:	17 c0       	rjmp	.+46     	; 0x4a44 <_Z4loopv+0x218>
					{
						checkCount++;
    4a16:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    4a1a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4a1e:	01 96       	adiw	r24, 0x01	; 1
    4a20:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4a24:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    4a28:	03 97       	sbiw	r24, 0x03	; 3
    4a2a:	61 f4       	brne	.+24     	; 0x4a44 <_Z4loopv+0x218>
						{
							g_dtmf_detected = TRUE;
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <g_dtmf_detected>
							quietCount = 0;
    4a32:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4a36:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    4a3a:	10 93 0c 05 	sts	0x050C, r17	; 0x80050c <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    4a3e:	81 2f       	mov	r24, r17
    4a40:	0e 94 0d 20 	call	0x401a	; 0x401a <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    4a44:	10 93 7e 04 	sts	0x047E, r17	; 0x80047e <_ZZ4loopvE7lastKey>
    4a48:	4d c0       	rjmp	.+154    	; 0x4ae4 <_Z4loopv+0x2b8>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    4a4a:	c0 90 04 05 	lds	r12, 0x0504	; 0x800504 <g_tick_count>
    4a4e:	d0 90 05 05 	lds	r13, 0x0505	; 0x800505 <g_tick_count+0x1>
    4a52:	e0 90 06 05 	lds	r14, 0x0506	; 0x800506 <g_tick_count+0x2>
    4a56:	f0 90 07 05 	lds	r15, 0x0507	; 0x800507 <g_tick_count+0x3>
    4a5a:	80 90 08 05 	lds	r8, 0x0508	; 0x800508 <g_last>
    4a5e:	90 90 09 05 	lds	r9, 0x0509	; 0x800509 <g_last+0x1>
    4a62:	a0 90 0a 05 	lds	r10, 0x050A	; 0x80050a <g_last+0x2>
    4a66:	b0 90 0b 05 	lds	r11, 0x050B	; 0x80050b <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    4a6a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ4loopvE10quietCount>
    4a6e:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4a72:	9c 01       	movw	r18, r24
    4a74:	2f 5f       	subi	r18, 0xFF	; 255
    4a76:	3f 4f       	sbci	r19, 0xFF	; 255
    4a78:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4a7c:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <_ZZ4loopvE10quietCount>
    4a80:	03 97       	sbiw	r24, 0x03	; 3
    4a82:	84 f1       	brlt	.+96     	; 0x4ae4 <_Z4loopv+0x2b8>
				{
					g_dtmf_detected = FALSE;
    4a84:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    4a88:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    4a8c:	88 23       	and	r24, r24
    4a8e:	29 f0       	breq	.+10     	; 0x4a9a <_Z4loopv+0x26e>
    4a90:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_LED_enunciating>
    4a94:	88 23       	and	r24, r24
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <_Z4loopv+0x26e>
    4a98:	d1 c0       	rjmp	.+418    	; 0x4c3c <_Z4loopv+0x410>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    4a9a:	c8 18       	sub	r12, r8
    4a9c:	d9 08       	sbc	r13, r9
    4a9e:	ea 08       	sbc	r14, r10
    4aa0:	fb 08       	sbc	r15, r11
    4aa2:	fc ed       	ldi	r31, 0xDC	; 220
    4aa4:	cf 16       	cp	r12, r31
    4aa6:	f5 e0       	ldi	r31, 0x05	; 5
    4aa8:	df 06       	cpc	r13, r31
    4aaa:	e1 04       	cpc	r14, r1
    4aac:	f1 04       	cpc	r15, r1
    4aae:	20 f4       	brcc	.+8      	; 0x4ab8 <_Z4loopv+0x28c>
					{
						checkCount = 0;
    4ab0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4ab4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    4ab8:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4abc:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4ac0:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tick_count>
    4ac4:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <g_tick_count+0x1>
    4ac8:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <g_tick_count+0x2>
    4acc:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <g_tick_count+0x3>
    4ad0:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <g_last>
    4ad4:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <g_last+0x1>
    4ad8:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <g_last+0x2>
    4adc:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <g_last+0x3>
					lastKey = '\0';
    4ae0:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    4ae4:	ea e7       	ldi	r30, 0x7A	; 122
    4ae6:	f0 e0       	ldi	r31, 0x00	; 0
    4ae8:	80 81       	ld	r24, Z
    4aea:	88 60       	ori	r24, 0x08	; 8
    4aec:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    4aee:	80 81       	ld	r24, Z
    4af0:	80 64       	ori	r24, 0x40	; 64
    4af2:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(!g_on_the_air)
    4af4:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_on_the_air>
    4af8:	81 11       	cpse	r24, r1
    4afa:	a5 c0       	rjmp	.+330    	; 0x4c46 <_Z4loopv+0x41a>
	{
		if(g_dtmf_detected)
    4afc:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_dtmf_detected>
    4b00:	88 23       	and	r24, r24
    4b02:	b1 f0       	breq	.+44     	; 0x4b30 <_Z4loopv+0x304>
		{
			BOOL repeat = FALSE;
    4b04:	19 82       	std	Y+1, r1	; 0x01
			makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    4b06:	40 e0       	ldi	r20, 0x00	; 0
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	be 01       	movw	r22, r28
    4b0c:	6f 5f       	subi	r22, 0xFF	; 255
    4b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b10:	89 e2       	ldi	r24, 0x29	; 41
    4b12:	92 e0       	ldi	r25, 0x02	; 2
    4b14:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4b18:	8c e8       	ldi	r24, 0x8C	; 140
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4b20:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
			g_LED_enunciating = TRUE;
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_LED_enunciating>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    4b2a:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_config_error>
    4b2e:	8b c0       	rjmp	.+278    	; 0x4c46 <_Z4loopv+0x41a>
		}
		else if(g_transmissions_disabled)
    4b30:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    4b34:	88 23       	and	r24, r24
    4b36:	09 f4       	brne	.+2      	; 0x4b3a <_Z4loopv+0x30e>
    4b38:	86 c0       	rjmp	.+268    	; 0x4c46 <_Z4loopv+0x41a>
		{
			ConfigurationState_t hold_config_err = g_config_error;
    4b3a:	10 91 40 05 	lds	r17, 0x0540	; 0x800540 <g_config_error>
			g_config_error = clockConfigurationCheck();
    4b3e:	0e 94 3e 11 	call	0x227c	; 0x227c <_Z23clockConfigurationCheckv>
    4b42:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_config_error>

			if(g_config_error != hold_config_err)
    4b46:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4b4a:	18 17       	cp	r17, r24
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <_Z4loopv+0x324>
    4b4e:	7b c0       	rjmp	.+246    	; 0x4c46 <_Z4loopv+0x41a>
			{
				if(g_config_error == CONFIGURATION_ERROR)
    4b50:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4b54:	82 30       	cpi	r24, 0x02	; 2
    4b56:	a1 f4       	brne	.+40     	; 0x4b80 <_Z4loopv+0x354>
				{
					BOOL repeat = TRUE;
    4b58:	11 e0       	ldi	r17, 0x01	; 1
    4b5a:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4b5c:	40 e0       	ldi	r20, 0x00	; 0
    4b5e:	50 e0       	ldi	r21, 0x00	; 0
    4b60:	be 01       	movw	r22, r28
    4b62:	6f 5f       	subi	r22, 0xFF	; 255
    4b64:	7f 4f       	sbci	r23, 0xFF	; 255
    4b66:	8b e2       	ldi	r24, 0x2B	; 43
    4b68:	92 e0       	ldi	r25, 0x02	; 2
    4b6a:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4b6e:	8c e8       	ldi	r24, 0x8C	; 140
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4b76:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4b7a:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <g_LED_enunciating>
    4b7e:	63 c0       	rjmp	.+198    	; 0x4c46 <_Z4loopv+0x41a>
				}
				else if(g_config_error == WAITING_FOR_START)
    4b80:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4b84:	81 30       	cpi	r24, 0x01	; 1
    4b86:	a1 f4       	brne	.+40     	; 0x4bb0 <_Z4loopv+0x384>
				{
					BOOL repeat = TRUE;
    4b88:	11 e0       	ldi	r17, 0x01	; 1
    4b8a:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    4b8c:	40 e0       	ldi	r20, 0x00	; 0
    4b8e:	50 e0       	ldi	r21, 0x00	; 0
    4b90:	be 01       	movw	r22, r28
    4b92:	6f 5f       	subi	r22, 0xFF	; 255
    4b94:	7f 4f       	sbci	r23, 0xFF	; 255
    4b96:	8d e2       	ldi	r24, 0x2D	; 45
    4b98:	92 e0       	ldi	r25, 0x02	; 2
    4b9a:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    4b9e:	86 e4       	ldi	r24, 0x46	; 70
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4ba6:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4baa:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <g_LED_enunciating>
    4bae:	4b c0       	rjmp	.+150    	; 0x4c46 <_Z4loopv+0x41a>
				}
				else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    4bb0:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4bb4:	84 30       	cpi	r24, 0x04	; 4
    4bb6:	21 f0       	breq	.+8      	; 0x4bc0 <_Z4loopv+0x394>
    4bb8:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4bbc:	83 30       	cpi	r24, 0x03	; 3
    4bbe:	a1 f4       	brne	.+40     	; 0x4be8 <_Z4loopv+0x3bc>
				{
					BOOL repeat = TRUE;
    4bc0:	11 e0       	ldi	r17, 0x01	; 1
    4bc2:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4bc4:	40 e0       	ldi	r20, 0x00	; 0
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	be 01       	movw	r22, r28
    4bca:	6f 5f       	subi	r22, 0xFF	; 255
    4bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bce:	8b e2       	ldi	r24, 0x2B	; 43
    4bd0:	92 e0       	ldi	r25, 0x02	; 2
    4bd2:	0e 94 6d 28 	call	0x50da	; 0x50da <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4bd6:	8c e8       	ldi	r24, 0x8C	; 140
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4bde:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4be2:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <g_LED_enunciating>
    4be6:	2f c0       	rjmp	.+94     	; 0x4c46 <_Z4loopv+0x41a>
				}
				else
				{
					g_LED_enunciating = FALSE;
    4be8:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    4bec:	60 e0       	ldi	r22, 0x00	; 0
    4bee:	8d e0       	ldi	r24, 0x0D	; 13
    4bf0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
				}
			}
		}
	}
}
    4bf4:	28 c0       	rjmp	.+80     	; 0x4c46 <_Z4loopv+0x41a>
    4bf6:	0f 2e       	mov	r0, r31
    4bf8:	fa e9       	ldi	r31, 0x9A	; 154
    4bfa:	af 2e       	mov	r10, r31
    4bfc:	f2 e0       	ldi	r31, 0x02	; 2
    4bfe:	bf 2e       	mov	r11, r31
    4c00:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4c02:	00 e0       	ldi	r16, 0x00	; 0
    4c04:	10 e0       	ldi	r17, 0x00	; 0
    4c06:	88 24       	eor	r8, r8
    4c08:	8a 94       	dec	r8
    4c0a:	98 2c       	mov	r9, r8
    4c0c:	71 2c       	mov	r7, r1
    4c0e:	61 2c       	mov	r6, r1
    4c10:	51 2c       	mov	r5, r1
    4c12:	41 2c       	mov	r4, r1
    4c14:	83 ce       	rjmp	.-762    	; 0x491c <_Z4loopv+0xf0>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    4c16:	99 20       	and	r9, r9
    4c18:	0c f4       	brge	.+2      	; 0x4c1c <_Z4loopv+0x3f0>
    4c1a:	17 cf       	rjmp	.-466    	; 0x4a4a <_Z4loopv+0x21e>
    4c1c:	0f 2e       	mov	r0, r31
    4c1e:	fa ea       	ldi	r31, 0xAA	; 170
    4c20:	af 2e       	mov	r10, r31
    4c22:	f2 e0       	ldi	r31, 0x02	; 2
    4c24:	bf 2e       	mov	r11, r31
    4c26:	f0 2d       	mov	r31, r0
    4c28:	00 e0       	ldi	r16, 0x00	; 0
    4c2a:	10 e0       	ldi	r17, 0x00	; 0
    4c2c:	66 24       	eor	r6, r6
    4c2e:	6a 94       	dec	r6
    4c30:	76 2c       	mov	r7, r6
    4c32:	51 2c       	mov	r5, r1
    4c34:	41 2c       	mov	r4, r1
    4c36:	31 2c       	mov	r3, r1
    4c38:	21 2c       	mov	r2, r1
    4c3a:	a6 ce       	rjmp	.-692    	; 0x4988 <_Z4loopv+0x15c>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	8d e0       	ldi	r24, 0x0D	; 13
    4c40:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    4c44:	2a cf       	rjmp	.-428    	; 0x4a9a <_Z4loopv+0x26e>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
				}
			}
		}
	}
}
    4c46:	0f 90       	pop	r0
    4c48:	df 91       	pop	r29
    4c4a:	cf 91       	pop	r28
    4c4c:	1f 91       	pop	r17
    4c4e:	0f 91       	pop	r16
    4c50:	ff 90       	pop	r15
    4c52:	ef 90       	pop	r14
    4c54:	df 90       	pop	r13
    4c56:	cf 90       	pop	r12
    4c58:	bf 90       	pop	r11
    4c5a:	af 90       	pop	r10
    4c5c:	9f 90       	pop	r9
    4c5e:	8f 90       	pop	r8
    4c60:	7f 90       	pop	r7
    4c62:	6f 90       	pop	r6
    4c64:	5f 90       	pop	r5
    4c66:	4f 90       	pop	r4
    4c68:	3f 90       	pop	r3
    4c6a:	2f 90       	pop	r2
    4c6c:	08 95       	ret

00004c6e <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    4c6e:	63 e0       	ldi	r22, 0x03	; 3
    4c70:	84 e0       	ldi	r24, 0x04	; 4
    4c72:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>

	pinMode(PIN_LED1, OUTPUT);                      /* This led blinks when off cycle and blinks with code when on cycle. */
    4c76:	61 e0       	ldi	r22, 0x01	; 1
    4c78:	8d e0       	ldi	r24, 0x0D	; 13
    4c7a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	8d e0       	ldi	r24, 0x0D	; 13
    4c82:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    4c86:	61 e0       	ldi	r22, 0x01	; 1
    4c88:	8d e0       	ldi	r24, 0x0D	; 13
    4c8a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    4c8e:	60 e0       	ldi	r22, 0x00	; 0
    4c90:	8d e0       	ldi	r24, 0x0D	; 13
    4c92:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    4c96:	61 e0       	ldi	r22, 0x01	; 1
    4c98:	8a e0       	ldi	r24, 0x0A	; 10
    4c9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    4c9e:	60 e0       	ldi	r22, 0x00	; 0
    4ca0:	8a e0       	ldi	r24, 0x0A	; 10
    4ca2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	89 e0       	ldi	r24, 0x09	; 9
    4caa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	89 e0       	ldi	r24, 0x09	; 9
    4cb2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    4cb6:	61 e0       	ldi	r22, 0x01	; 1
    4cb8:	88 e0       	ldi	r24, 0x08	; 8
    4cba:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    4cbe:	60 e0       	ldi	r22, 0x00	; 0
    4cc0:	88 e0       	ldi	r24, 0x08	; 8
    4cc2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    4cc6:	60 e0       	ldi	r22, 0x00	; 0
    4cc8:	84 e1       	ldi	r24, 0x14	; 20
    4cca:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    4cce:	60 e0       	ldi	r22, 0x00	; 0
    4cd0:	85 e1       	ldi	r24, 0x15	; 21
    4cd2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    4cd6:	63 e0       	ldi	r22, 0x03	; 3
    4cd8:	8c e0       	ldi	r24, 0x0C	; 12
    4cda:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    4cde:	61 e0       	ldi	r22, 0x01	; 1
    4ce0:	8b e0       	ldi	r24, 0x0B	; 11
    4ce2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    4ce6:	60 e0       	ldi	r22, 0x00	; 0
    4ce8:	8b e0       	ldi	r24, 0x0B	; 11
    4cea:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	linkbus_disable();
    4cee:	0e 94 af 09 	call	0x135e	; 0x135e <_Z15linkbus_disablev>
 *	digitalWrite(PIN_D1, OFF);
 *	digitalWrite(PIN_D2, OFF);
 *	digitalWrite(PIN_D3, OFF);
 *	digitalWrite(PIN_D4, OFF);
 *	digitalWrite(PIN_D5, OFF); */
	DDRC |= 0x0F;
    4cf2:	87 b1       	in	r24, 0x07	; 7
    4cf4:	8f 60       	ori	r24, 0x0F	; 15
    4cf6:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
    4cf8:	88 b1       	in	r24, 0x08	; 8
    4cfa:	80 7f       	andi	r24, 0xF0	; 240
    4cfc:	88 b9       	out	0x08, r24	; 8
	DDRD |= 0x03;
    4cfe:	8a b1       	in	r24, 0x0a	; 10
    4d00:	83 60       	ori	r24, 0x03	; 3
    4d02:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0xFC;
    4d04:	8b b1       	in	r24, 0x0b	; 11
    4d06:	8c 7f       	andi	r24, 0xFC	; 252
    4d08:	8b b9       	out	0x0b, r24	; 11

	pinMode(PIN_PWDN, OUTPUT);
    4d0a:	61 e0       	ldi	r22, 0x01	; 1
    4d0c:	86 e0       	ldi	r24, 0x06	; 6
    4d0e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    4d12:	61 e0       	ldi	r22, 0x01	; 1
    4d14:	86 e0       	ldi	r24, 0x06	; 6
    4d16:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    4d1a:	63 e0       	ldi	r22, 0x03	; 3
    4d1c:	82 e1       	ldi	r24, 0x12	; 18
    4d1e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    4d22:	63 e0       	ldi	r22, 0x03	; 3
    4d24:	83 e1       	ldi	r24, 0x13	; 19
    4d26:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    4d2a:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    4d2e:	8c e9       	ldi	r24, 0x9C	; 156
    4d30:	95 e0       	ldi	r25, 0x05	; 5
    4d32:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN13EepromManager11readNonVolsEv>
    4d36:	18 2f       	mov	r17, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    4d38:	61 e0       	ldi	r22, 0x01	; 1
    4d3a:	80 e0       	ldi	r24, 0x00	; 0
    4d3c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    4d40:	f8 94       	cli
	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    4d42:	a0 eb       	ldi	r26, 0xB0	; 176
    4d44:	b0 e0       	ldi	r27, 0x00	; 0
    4d46:	1c 92       	st	X, r1
	TCCR2B = 0;
    4d48:	e1 eb       	ldi	r30, 0xB1	; 177
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    4d4e:	8c 91       	ld	r24, X
    4d50:	82 60       	ori	r24, 0x02	; 2
    4d52:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    4d54:	80 81       	ld	r24, Z
    4d56:	87 60       	ori	r24, 0x07	; 7
    4d58:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4d5a:	8c e0       	ldi	r24, 0x0C	; 12
    4d5c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    4d60:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    4d64:	e6 eb       	ldi	r30, 0xB6	; 182
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	80 81       	ld	r24, Z
    4d6a:	8f 7d       	andi	r24, 0xDF	; 223
    4d6c:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    4d6e:	e0 e7       	ldi	r30, 0x70	; 112
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    4d74:	80 81       	ld	r24, Z
    4d76:	84 60       	ori	r24, 0x04	; 4
    4d78:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    4d7a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    4d7e:	c1 e8       	ldi	r28, 0x81	; 129
    4d80:	d0 e0       	ldi	r29, 0x00	; 0
    4d82:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    4d84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4d88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    4d8c:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    4d90:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    4d94:	88 81       	ld	r24, Y
    4d96:	88 60       	ori	r24, 0x08	; 8
    4d98:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    4d9a:	88 81       	ld	r24, Y
    4d9c:	81 60       	ori	r24, 0x01	; 1
    4d9e:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    4da0:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    4da2:	84 b5       	in	r24, 0x24	; 36
    4da4:	82 60       	ori	r24, 0x02	; 2
    4da6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    4da8:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    4daa:	85 b5       	in	r24, 0x25	; 37
    4dac:	84 60       	ori	r24, 0x04	; 4
    4dae:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    4db0:	8f e2       	ldi	r24, 0x2F	; 47
    4db2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4db4:	ee e6       	ldi	r30, 0x6E	; 110
    4db6:	f0 e0       	ldi	r31, 0x00	; 0
    4db8:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    4dba:	80 81       	ld	r24, Z
    4dbc:	82 60       	ori	r24, 0x02	; 2
    4dbe:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    4dc0:	ed e6       	ldi	r30, 0x6D	; 109
    4dc2:	f0 e0       	ldi	r31, 0x00	; 0
    4dc4:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4dc6:	80 e1       	ldi	r24, 0x10	; 16
    4dc8:	80 83       	st	Z, r24
	PCICR = 0x00;
    4dca:	e8 e6       	ldi	r30, 0x68	; 104
    4dcc:	f0 e0       	ldi	r31, 0x00	; 0
    4dce:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    4dd0:	84 e0       	ldi	r24, 0x04	; 4
    4dd2:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    4dd4:	78 94       	sei

	if(!g_AM_enabled)
    4dd6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_AM_enabled>
    4dda:	81 11       	cpse	r24, r1
    4ddc:	06 c0       	rjmp	.+12     	; 0x4dea <main+0x17c>
	{
		linkbus_init(BAUD);     /* Start the Link Bus serial comms */
    4dde:	60 e0       	ldi	r22, 0x00	; 0
    4de0:	71 ee       	ldi	r23, 0xE1	; 225
    4de2:	80 e0       	ldi	r24, 0x00	; 0
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z12linkbus_initm>
	}

	g_reset_button_held = !digitalRead(PIN_SYNC);
    4dea:	84 e0       	ldi	r24, 0x04	; 4
    4dec:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    4df0:	91 e0       	ldi	r25, 0x01	; 1
    4df2:	81 11       	cpse	r24, r1
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    4dfa:	11 23       	and	r17, r17
    4dfc:	29 f0       	breq	.+10     	; 0x4e08 <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	87 e3       	ldi	r24, 0x37	; 55
    4e02:	92 e0       	ldi	r25, 0x02	; 2
    4e04:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
		}

		uint8_t result = rv3028_1s_sqw(ON);
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	0e 94 0c 2b 	call	0x5618	; 0x5618 <_Z13rv3028_1s_sqwh>
    4e0e:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    4e10:	8c e9       	ldi	r24, 0x9C	; 156
    4e12:	95 e0       	ldi	r25, 0x05	; 5
    4e14:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    4e18:	cc 23       	and	r28, r28
    4e1a:	54 f4       	brge	.+20     	; 0x4e30 <main+0x1c2>
		{
			sprintf(g_tempStr, "Err 1\n");
    4e1c:	87 e0       	ldi	r24, 0x07	; 7
    4e1e:	e6 e4       	ldi	r30, 0x46	; 70
    4e20:	f2 e0       	ldi	r31, 0x02	; 2
    4e22:	ab ed       	ldi	r26, 0xDB	; 219
    4e24:	b4 e0       	ldi	r27, 0x04	; 4
    4e26:	01 90       	ld	r0, Z+
    4e28:	0d 92       	st	X+, r0
    4e2a:	8a 95       	dec	r24
    4e2c:	e1 f7       	brne	.-8      	; 0x4e26 <main+0x1b8>
    4e2e:	23 c0       	rjmp	.+70     	; 0x4e76 <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    4e30:	c0 ff       	sbrs	r28, 0
    4e32:	0a c0       	rjmp	.+20     	; 0x4e48 <main+0x1da>
		{
			sprintf(g_tempStr, "Err 2\n");
    4e34:	87 e0       	ldi	r24, 0x07	; 7
    4e36:	ed e4       	ldi	r30, 0x4D	; 77
    4e38:	f2 e0       	ldi	r31, 0x02	; 2
    4e3a:	ab ed       	ldi	r26, 0xDB	; 219
    4e3c:	b4 e0       	ldi	r27, 0x04	; 4
    4e3e:	01 90       	ld	r0, Z+
    4e40:	0d 92       	st	X+, r0
    4e42:	8a 95       	dec	r24
    4e44:	e1 f7       	brne	.-8      	; 0x4e3e <main+0x1d0>
    4e46:	17 c0       	rjmp	.+46     	; 0x4e76 <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4e48:	c1 ff       	sbrs	r28, 1
    4e4a:	0a c0       	rjmp	.+20     	; 0x4e60 <main+0x1f2>
		{
			sprintf(g_tempStr, "Err 3\n");
    4e4c:	87 e0       	ldi	r24, 0x07	; 7
    4e4e:	e4 e5       	ldi	r30, 0x54	; 84
    4e50:	f2 e0       	ldi	r31, 0x02	; 2
    4e52:	ab ed       	ldi	r26, 0xDB	; 219
    4e54:	b4 e0       	ldi	r27, 0x04	; 4
    4e56:	01 90       	ld	r0, Z+
    4e58:	0d 92       	st	X+, r0
    4e5a:	8a 95       	dec	r24
    4e5c:	e1 f7       	brne	.-8      	; 0x4e56 <main+0x1e8>
    4e5e:	0b c0       	rjmp	.+22     	; 0x4e76 <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4e60:	c5 ff       	sbrs	r28, 5
    4e62:	09 c0       	rjmp	.+18     	; 0x4e76 <main+0x208>
		{
			sprintf(g_tempStr, "RTC OK\n");
    4e64:	88 e0       	ldi	r24, 0x08	; 8
    4e66:	eb e5       	ldi	r30, 0x5B	; 91
    4e68:	f2 e0       	ldi	r31, 0x02	; 2
    4e6a:	ab ed       	ldi	r26, 0xDB	; 219
    4e6c:	b4 e0       	ldi	r27, 0x04	; 4
    4e6e:	01 90       	ld	r0, Z+
    4e70:	0d 92       	st	X+, r0
    4e72:	8a 95       	dec	r24
    4e74:	e1 f7       	brne	.-8      	; 0x4e6e <main+0x200>
		}

		if(strlen(g_tempStr))
    4e76:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_tempStr>
    4e7a:	88 23       	and	r24, r24
    4e7c:	29 f0       	breq	.+10     	; 0x4e88 <main+0x21a>
		{
			lb_send_string(g_tempStr, TRUE);
    4e7e:	61 e0       	ldi	r22, 0x01	; 1
    4e80:	8b ed       	ldi	r24, 0xDB	; 219
    4e82:	94 e0       	ldi	r25, 0x04	; 4
    4e84:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4e88:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4e8c:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    4e90:	ef e6       	ldi	r30, 0x6F	; 111
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	80 81       	ld	r24, Z
    4e96:	82 60       	ori	r24, 0x02	; 2
    4e98:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    4ea0:	e9 e6       	ldi	r30, 0x69	; 105
    4ea2:	f0 e0       	ldi	r31, 0x00	; 0
    4ea4:	80 81       	ld	r24, Z
    4ea6:	82 60       	ori	r24, 0x02	; 2
    4ea8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    4eaa:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    4eac:	0e 94 16 24 	call	0x482c	; 0x482c <_Z4loopv>
    4eb0:	fd cf       	rjmp	.-6      	; 0x4eac <main+0x23e>

00004eb2 <_GLOBAL__sub_I_ee_mgr>:
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4eb2:	0f 93       	push	r16
    4eb4:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4eb6:	8c e9       	ldi	r24, 0x9C	; 156
    4eb8:	95 e0       	ldi	r25, 0x05	; 5
    4eba:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4ebe:	00 e0       	ldi	r16, 0x00	; 0
    4ec0:	18 e7       	ldi	r17, 0x78	; 120
    4ec2:	26 e9       	ldi	r18, 0x96	; 150
    4ec4:	36 e4       	ldi	r19, 0x46	; 70
    4ec6:	40 e0       	ldi	r20, 0x00	; 0
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	69 e4       	ldi	r22, 0x49	; 73
    4ecc:	73 e4       	ldi	r23, 0x43	; 67
    4ece:	83 e0       	ldi	r24, 0x03	; 3
    4ed0:	95 e0       	ldi	r25, 0x05	; 5
    4ed2:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN8GoertzelC1Eff>
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4ed6:	1f 91       	pop	r17
    4ed8:	0f 91       	pop	r16
    4eda:	08 95       	ret

00004edc <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4edc:	83 e0       	ldi	r24, 0x03	; 3
    4ede:	95 e0       	ldi	r25, 0x05	; 5
    4ee0:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4ee4:	8c e9       	ldi	r24, 0x9C	; 156
    4ee6:	95 e0       	ldi	r25, 0x05	; 5
    4ee8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManagerD1Ev>
    4eec:	08 95       	ret

00004eee <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	0e 94 b9 30 	call	0x6172	; 0x6172 <toupper>

	switch( c )
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	ff 27       	eor	r31, r31
    4ef8:	b0 97       	sbiw	r30, 0x20	; 32
    4efa:	ed 35       	cpi	r30, 0x5D	; 93
    4efc:	f1 05       	cpc	r31, r1
    4efe:	08 f0       	brcs	.+2      	; 0x4f02 <_Z12getMorseCharc+0x14>
    4f00:	e4 c0       	rjmp	.+456    	; 0x50ca <_Z12getMorseCharc+0x1dc>
    4f02:	e7 55       	subi	r30, 0x57	; 87
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4f0a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    4f0c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4f0e:	61 e0       	ldi	r22, 0x01	; 1
    4f10:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4f12:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    4f14:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4f16:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4f18:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4f1a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    4f1c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4f1e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4f20:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    4f22:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    4f24:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4f26:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    4f28:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4f2a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    4f2c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4f2e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4f30:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4f32:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    4f34:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4f36:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4f38:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    4f3a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    4f3c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4f3e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4f40:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    4f42:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    4f44:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4f46:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    4f48:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4f4a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4f4c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4f4e:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4f50:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4f52:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4f54:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4f56:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4f58:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4f5a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4f5c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4f5e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4f60:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4f62:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    4f64:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4f66:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4f68:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4f6a:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4f6c:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4f6e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4f70:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4f72:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    4f74:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4f76:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4f78:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4f7a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4f7c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4f7e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4f80:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4f82:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4f84:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4f86:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4f88:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4f8a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4f8c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4f8e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4f90:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    4f92:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    4f94:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4f96:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4f98:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4f9a:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4f9c:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4f9e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4fa0:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4fa2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    4fa4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4fa6:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4fa8:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4faa:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4fac:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4fae:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4fb0:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4fb2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    4fb4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4fb6:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4fb8:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4fba:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4fbc:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4fbe:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4fc0:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4fc2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    4fc4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4fc6:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4fc8:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4fca:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4fcc:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4fce:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4fd0:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4fd2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4fd4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    4fd6:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4fd8:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4fda:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4fdc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4fde:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4fe0:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4fe2:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    4fe4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    4fe6:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4fe8:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4fea:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4fec:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4fee:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4ff0:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4ff2:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4ff4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4ff6:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4ff8:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4ffa:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4ffc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4ffe:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    5000:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5002:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    5004:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5006:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5008:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    500a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    500c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    500e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5010:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5012:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    5014:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5016:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    5018:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    501a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    501c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    501e:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    5020:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5022:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    5024:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    5026:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5028:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    502a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    502c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    502e:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5030:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5032:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    5034:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    5036:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    5038:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    503a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    503c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    503e:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5040:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5042:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    5044:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    5046:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5048:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    504a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    504c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    504e:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5050:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5052:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    5054:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5056:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    5058:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    505a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    505c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    505e:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5060:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5062:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    5064:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5066:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5068:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    506a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    506c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    506e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5070:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    5072:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    5074:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    5076:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    5078:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    507a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    507c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    507e:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5080:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5082:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    5084:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    5086:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5088:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    508a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    508c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    508e:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    5090:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5092:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    5094:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    5096:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5098:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    509a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    509c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    509e:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    50a0:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    50a2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    50a4:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    50a6:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    50a8:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    50aa:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    50ac:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    50ae:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    50b0:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    50b2:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    50b4:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    50b6:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    50b8:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    50ba:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    50bc:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    50be:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    50c0:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    50c2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    50c4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    50c6:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    50c8:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    50ca:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    50cc:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    50ce:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    50d0:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    50d2:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    50d4:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    50d6:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    50d8:	08 95       	ret

000050da <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    50e0:	00 97       	sbiw	r24, 0x00	; 0
    50e2:	b1 f1       	breq	.+108    	; 0x5150 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    50e4:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    50e8:	61 15       	cp	r22, r1
    50ea:	71 05       	cpc	r23, r1
    50ec:	21 f0       	breq	.+8      	; 0x50f6 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    50ee:	db 01       	movw	r26, r22
    50f0:	2c 91       	ld	r18, X
    50f2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    50f6:	fc 01       	movw	r30, r24
    50f8:	20 81       	ld	r18, Z
    50fa:	22 23       	and	r18, r18
    50fc:	d9 f0       	breq	.+54     	; 0x5134 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    50fe:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    5102:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    5106:	80 e2       	ldi	r24, 0x20	; 32
    5108:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    510c:	82 2f       	mov	r24, r18
    510e:	0e 94 77 27 	call	0x4eee	; 0x4eee <_Z12getMorseCharc>
    5112:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5116:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    511a:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    511e:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    5122:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    5126:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    512a:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    512e:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
    5132:	0a c0       	rjmp	.+20     	; 0x5148 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    5134:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    5138:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    5142:	20 97       	sbiw	r28, 0x00	; 0
    5144:	09 f0       	breq	.+2      	; 0x5148 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    5146:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    5148:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	c0 c0       	rjmp	.+384    	; 0x52d0 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    5150:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
    5154:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    5158:	30 97       	sbiw	r30, 0x00	; 0
    515a:	09 f4       	brne	.+2      	; 0x515e <_Z9makeMorsePcPhS0_+0x84>
    515c:	aa c0       	rjmp	.+340    	; 0x52b2 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    515e:	61 15       	cp	r22, r1
    5160:	71 05       	cpc	r23, r1
    5162:	21 f0       	breq	.+8      	; 0x516c <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    5164:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorsePcPhS0_E6repeat>
    5168:	db 01       	movw	r26, r22
    516a:	8c 93       	st	X, r24
		}

		if(completedString)
    516c:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
    5170:	88 23       	and	r24, r24
    5172:	49 f0       	breq	.+18     	; 0x5186 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    5174:	20 97       	sbiw	r28, 0x00	; 0
    5176:	09 f4       	brne	.+2      	; 0x517a <_Z9makeMorsePcPhS0_+0xa0>
    5178:	a8 c0       	rjmp	.+336    	; 0x52ca <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    517a:	81 e0       	ldi	r24, 0x01	; 1
    517c:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    517e:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	a5 c0       	rjmp	.+330    	; 0x52d0 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    5186:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    518a:	88 23       	and	r24, r24
    518c:	21 f0       	breq	.+8      	; 0x5196 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    518e:	81 50       	subi	r24, 0x01	; 1
    5190:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5194:	7f c0       	rjmp	.+254    	; 0x5294 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    5196:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    519a:	88 23       	and	r24, r24
    519c:	81 f0       	breq	.+32     	; 0x51be <_Z9makeMorsePcPhS0_+0xe4>
    519e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    51a2:	81 11       	cpse	r24, r1
    51a4:	0c c0       	rjmp	.+24     	; 0x51be <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    51a6:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    51aa:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    51ae:	88 23       	and	r24, r24
    51b0:	09 f4       	brne	.+2      	; 0x51b4 <_Z9makeMorsePcPhS0_+0xda>
    51b2:	70 c0       	rjmp	.+224    	; 0x5294 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    51b4:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    51b8:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    51bc:	6b c0       	rjmp	.+214    	; 0x5294 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    51be:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    51c2:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    51c6:	89 17       	cp	r24, r25
    51c8:	90 f1       	brcs	.+100    	; 0x522e <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    51ca:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
    51ce:	8f 5f       	subi	r24, 0xFF	; 255
    51d0:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
    51d4:	df 01       	movw	r26, r30
    51d6:	a8 0f       	add	r26, r24
    51d8:	b1 1d       	adc	r27, r1
    51da:	8c 91       	ld	r24, X
    51dc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    51e0:	81 11       	cpse	r24, r1
    51e2:	19 c0       	rjmp	.+50     	; 0x5216 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    51e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorsePcPhS0_E6repeat>
    51e8:	88 23       	and	r24, r24
    51ea:	31 f0       	breq	.+12     	; 0x51f8 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    51ec:	80 81       	ld	r24, Z
    51ee:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    51f2:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
    51f6:	0f c0       	rjmp	.+30     	; 0x5216 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    51f8:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    51fc:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    5200:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    5204:	91 e0       	ldi	r25, 0x01	; 1
    5206:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    520a:	20 97       	sbiw	r28, 0x00	; 0
    520c:	09 f0       	breq	.+2      	; 0x5210 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    520e:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    5210:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    5214:	5d c0       	rjmp	.+186    	; 0x52d0 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    5216:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
    521a:	0e 94 77 27 	call	0x4eee	; 0x4eee <_Z12getMorseCharc>
    521e:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5222:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5226:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    522a:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    522e:	20 91 a3 05 	lds	r18, 0x05A3	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5232:	2d 3f       	cpi	r18, 0xFD	; 253
    5234:	00 f5       	brcc	.+64     	; 0x5276 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    5236:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    523a:	31 e0       	ldi	r19, 0x01	; 1
    523c:	34 0f       	add	r19, r20
    523e:	30 93 a1 05 	sts	0x05A1, r19	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	02 c0       	rjmp	.+4      	; 0x524c <_Z9makeMorsePcPhS0_+0x172>
    5248:	88 0f       	add	r24, r24
    524a:	99 1f       	adc	r25, r25
    524c:	4a 95       	dec	r20
    524e:	e2 f7       	brpl	.-8      	; 0x5248 <_Z9makeMorsePcPhS0_+0x16e>
    5250:	82 23       	and	r24, r18
    5252:	21 f0       	breq	.+8      	; 0x525c <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    5254:	82 e0       	ldi	r24, 0x02	; 2
    5256:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    525a:	02 c0       	rjmp	.+4      	; 0x5260 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    525c:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5266:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    526a:	38 17       	cp	r19, r24
    526c:	98 f0       	brcs	.+38     	; 0x5294 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    526e:	82 e0       	ldi	r24, 0x02	; 2
    5270:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5274:	0f c0       	rjmp	.+30     	; 0x5294 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5276:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    527a:	9f ef       	ldi	r25, 0xFF	; 255
    527c:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    5280:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    5284:	84 30       	cpi	r24, 0x04	; 4
    5286:	20 f0       	brcs	.+8      	; 0x5290 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5288:	84 50       	subi	r24, 0x04	; 4
    528a:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    528e:	02 c0       	rjmp	.+4      	; 0x5294 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    5290:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5294:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
    5298:	8c 33       	cpi	r24, 0x3C	; 60
    529a:	31 f4       	brne	.+12     	; 0x52a8 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    52a2:	20 97       	sbiw	r28, 0x00	; 0
    52a4:	41 f4       	brne	.+16     	; 0x52b6 <_Z9makeMorsePcPhS0_+0x1dc>
    52a6:	14 c0       	rjmp	.+40     	; 0x52d0 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    52a8:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    52ac:	20 97       	sbiw	r28, 0x00	; 0
    52ae:	19 f4       	brne	.+6      	; 0x52b6 <_Z9makeMorsePcPhS0_+0x1dc>
    52b0:	09 c0       	rjmp	.+18     	; 0x52c4 <_Z9makeMorsePcPhS0_+0x1ea>
    52b2:	20 97       	sbiw	r28, 0x00	; 0
    52b4:	19 f0       	breq	.+6      	; 0x52bc <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    52b6:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
    52ba:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    52bc:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    52c0:	81 11       	cpse	r24, r1
    52c2:	05 c0       	rjmp	.+10     	; 0x52ce <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    52c4:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    52c8:	03 c0       	rjmp	.+6      	; 0x52d0 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    52ca:	80 e0       	ldi	r24, 0x00	; 0
    52cc:	01 c0       	rjmp	.+2      	; 0x52d0 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    52ce:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	08 95       	ret

000052d6 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    52d6:	cf 92       	push	r12
    52d8:	df 92       	push	r13
    52da:	ef 92       	push	r14
    52dc:	ff 92       	push	r15
    52de:	0f 93       	push	r16
    52e0:	1f 93       	push	r17
    52e2:	cf 93       	push	r28
    52e4:	fc 01       	movw	r30, r24
    52e6:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    52e8:	80 81       	ld	r24, Z
		if(!c)
    52ea:	88 23       	and	r24, r24
    52ec:	c1 f0       	breq	.+48     	; 0x531e <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    52ee:	8f 01       	movw	r16, r30
    52f0:	0f 5f       	subi	r16, 0xFF	; 255
    52f2:	1f 4f       	sbci	r17, 0xFF	; 255
    52f4:	7f 01       	movw	r14, r30
    52f6:	94 e1       	ldi	r25, 0x14	; 20
    52f8:	e9 0e       	add	r14, r25
    52fa:	f1 1c       	adc	r15, r1
    52fc:	c0 e0       	ldi	r28, 0x00	; 0
    52fe:	05 c0       	rjmp	.+10     	; 0x530a <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5300:	f8 01       	movw	r30, r16
    5302:	81 91       	ld	r24, Z+
    5304:	8f 01       	movw	r16, r30
		if(!c)
    5306:	88 23       	and	r24, r24
    5308:	59 f0       	breq	.+22     	; 0x5320 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    530a:	0e 94 77 27 	call	0x4eee	; 0x4eee <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    530e:	6d 3f       	cpi	r22, 0xFD	; 253
    5310:	08 f4       	brcc	.+2      	; 0x5314 <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    5312:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    5314:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5316:	0e 15       	cp	r16, r14
    5318:	1f 05       	cpc	r17, r15
    531a:	91 f7       	brne	.-28     	; 0x5300 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    531c:	01 c0       	rjmp	.+2      	; 0x5320 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    531e:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    5320:	80 eb       	ldi	r24, 0xB0	; 176
    5322:	94 e0       	ldi	r25, 0x04	; 4
    5324:	b6 01       	movw	r22, r12
    5326:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <__udivmodhi4>
}
    532a:	c6 9f       	mul	r28, r22
    532c:	c0 01       	movw	r24, r0
    532e:	c7 9f       	mul	r28, r23
    5330:	90 0d       	add	r25, r0
    5332:	11 24       	eor	r1, r1
    5334:	cf 91       	pop	r28
    5336:	1f 91       	pop	r17
    5338:	0f 91       	pop	r16
    533a:	ff 90       	pop	r15
    533c:	ef 90       	pop	r14
    533e:	df 90       	pop	r13
    5340:	cf 90       	pop	r12
    5342:	08 95       	ret

00005344 <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    5344:	98 2f       	mov	r25, r24
    5346:	96 95       	lsr	r25
    5348:	96 95       	lsr	r25
    534a:	96 95       	lsr	r25
    534c:	9e 71       	andi	r25, 0x1E	; 30
    534e:	29 2f       	mov	r18, r25
    5350:	22 0f       	add	r18, r18
    5352:	22 0f       	add	r18, r18
    5354:	92 0f       	add	r25, r18
    5356:	8f 70       	andi	r24, 0x0F	; 15
    5358:	89 0f       	add	r24, r25
    535a:	08 95       	ret

0000535c <_Z8char2bcdPc>:
    535c:	fc 01       	movw	r30, r24
    535e:	20 81       	ld	r18, Z
    5360:	81 81       	ldd	r24, Z+1	; 0x01
    5362:	80 53       	subi	r24, 0x30	; 48
    5364:	f0 e1       	ldi	r31, 0x10	; 16
    5366:	2f 9f       	mul	r18, r31
    5368:	80 0d       	add	r24, r0
    536a:	11 24       	eor	r1, r1
    536c:	08 95       	ret

0000536e <_Z16rv3028_set_epochm>:
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	00 d0       	rcall	.+0      	; 0x5374 <_Z16rv3028_set_epochm+0x6>
    5374:	00 d0       	rcall	.+0      	; 0x5376 <_Z16rv3028_set_epochm+0x8>
    5376:	1f 92       	push	r1
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
    537c:	ae 01       	movw	r20, r28
    537e:	4f 5f       	subi	r20, 0xFF	; 255
    5380:	5f 4f       	sbci	r21, 0xFF	; 255
    5382:	25 e0       	ldi	r18, 0x05	; 5
    5384:	fa 01       	movw	r30, r20
    5386:	11 92       	st	Z+, r1
    5388:	2a 95       	dec	r18
    538a:	e9 f7       	brne	.-6      	; 0x5386 <_Z16rv3028_set_epochm+0x18>
    538c:	9c 83       	std	Y+4, r25	; 0x04
    538e:	8b 83       	std	Y+3, r24	; 0x03
    5390:	7a 83       	std	Y+2, r23	; 0x02
    5392:	69 83       	std	Y+1, r22	; 0x01
    5394:	24 e0       	ldi	r18, 0x04	; 4
    5396:	6b e1       	ldi	r22, 0x1B	; 27
    5398:	84 ea       	ldi	r24, 0xA4	; 164
    539a:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    539e:	0f 90       	pop	r0
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	08 95       	ret

000053ae <_Z16rv3028_get_epochv>:
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	00 d0       	rcall	.+0      	; 0x53b4 <_Z16rv3028_get_epochv+0x6>
    53b4:	00 d0       	rcall	.+0      	; 0x53b6 <_Z16rv3028_get_epochv+0x8>
    53b6:	cd b7       	in	r28, 0x3d	; 61
    53b8:	de b7       	in	r29, 0x3e	; 62
    53ba:	19 82       	std	Y+1, r1	; 0x01
    53bc:	1a 82       	std	Y+2, r1	; 0x02
    53be:	1b 82       	std	Y+3, r1	; 0x03
    53c0:	1c 82       	std	Y+4, r1	; 0x04
    53c2:	24 e0       	ldi	r18, 0x04	; 4
    53c4:	ae 01       	movw	r20, r28
    53c6:	4f 5f       	subi	r20, 0xFF	; 255
    53c8:	5f 4f       	sbci	r21, 0xFF	; 255
    53ca:	6b e1       	ldi	r22, 0x1B	; 27
    53cc:	84 ea       	ldi	r24, 0xA4	; 164
    53ce:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
    53d2:	81 11       	cpse	r24, r1
    53d4:	11 c0       	rjmp	.+34     	; 0x53f8 <_Z16rv3028_get_epochv+0x4a>
    53d6:	2a 81       	ldd	r18, Y+2	; 0x02
    53d8:	6b 81       	ldd	r22, Y+3	; 0x03
    53da:	86 2f       	mov	r24, r22
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	a0 e0       	ldi	r26, 0x00	; 0
    53e0:	b0 e0       	ldi	r27, 0x00	; 0
    53e2:	dc 01       	movw	r26, r24
    53e4:	99 27       	eor	r25, r25
    53e6:	88 27       	eor	r24, r24
    53e8:	92 2b       	or	r25, r18
    53ea:	29 81       	ldd	r18, Y+1	; 0x01
    53ec:	82 2b       	or	r24, r18
    53ee:	2c 81       	ldd	r18, Y+4	; 0x04
    53f0:	bc 01       	movw	r22, r24
    53f2:	cd 01       	movw	r24, r26
    53f4:	92 2b       	or	r25, r18
    53f6:	03 c0       	rjmp	.+6      	; 0x53fe <_Z16rv3028_get_epochv+0x50>
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	70 e0       	ldi	r23, 0x00	; 0
    53fc:	cb 01       	movw	r24, r22
    53fe:	0f 90       	pop	r0
    5400:	0f 90       	pop	r0
    5402:	0f 90       	pop	r0
    5404:	0f 90       	pop	r0
    5406:	df 91       	pop	r29
    5408:	cf 91       	pop	r28
    540a:	08 95       	ret

0000540c <_Z16rv3028_get_epochPbPc>:
    540c:	6f 92       	push	r6
    540e:	7f 92       	push	r7
    5410:	8f 92       	push	r8
    5412:	9f 92       	push	r9
    5414:	af 92       	push	r10
    5416:	bf 92       	push	r11
    5418:	cf 92       	push	r12
    541a:	df 92       	push	r13
    541c:	ef 92       	push	r14
    541e:	ff 92       	push	r15
    5420:	0f 93       	push	r16
    5422:	1f 93       	push	r17
    5424:	cf 93       	push	r28
    5426:	df 93       	push	r29
    5428:	6c 01       	movw	r12, r24
    542a:	eb 01       	movw	r28, r22
    542c:	20 97       	sbiw	r28, 0x00	; 0
    542e:	09 f4       	brne	.+2      	; 0x5432 <_Z16rv3028_get_epochPbPc+0x26>
    5430:	b6 c0       	rjmp	.+364    	; 0x559e <_Z16rv3028_get_epochPbPc+0x192>
    5432:	cb 01       	movw	r24, r22
    5434:	0a 96       	adiw	r24, 0x0a	; 10
    5436:	0e 94 ae 29 	call	0x535c	; 0x535c <_Z8char2bcdPc>
    543a:	88 2e       	mov	r8, r24
    543c:	ce 01       	movw	r24, r28
    543e:	08 96       	adiw	r24, 0x08	; 8
    5440:	0e 94 ae 29 	call	0x535c	; 0x535c <_Z8char2bcdPc>
    5444:	78 2e       	mov	r7, r24
    5446:	ce 01       	movw	r24, r28
    5448:	06 96       	adiw	r24, 0x06	; 6
    544a:	0e 94 ae 29 	call	0x535c	; 0x535c <_Z8char2bcdPc>
    544e:	98 2e       	mov	r9, r24
    5450:	ce 01       	movw	r24, r28
    5452:	04 96       	adiw	r24, 0x04	; 4
    5454:	0e 94 ae 29 	call	0x535c	; 0x535c <_Z8char2bcdPc>
    5458:	18 2f       	mov	r17, r24
    545a:	ce 01       	movw	r24, r28
    545c:	02 96       	adiw	r24, 0x02	; 2
    545e:	0e 94 ae 29 	call	0x535c	; 0x535c <_Z8char2bcdPc>
    5462:	08 2f       	mov	r16, r24
    5464:	ce 01       	movw	r24, r28
    5466:	0e 94 ae 29 	call	0x535c	; 0x535c <_Z8char2bcdPc>
    546a:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z7bcd2dech>
    546e:	e8 2e       	mov	r14, r24
    5470:	f1 2c       	mov	r15, r1
    5472:	57 01       	movw	r10, r14
    5474:	80 e3       	ldi	r24, 0x30	; 48
    5476:	a8 1a       	sub	r10, r24
    5478:	88 ef       	ldi	r24, 0xF8	; 248
    547a:	b8 0a       	sbc	r11, r24
    547c:	80 2f       	mov	r24, r16
    547e:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z7bcd2dech>
    5482:	d8 2f       	mov	r29, r24
    5484:	81 2f       	mov	r24, r17
    5486:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z7bcd2dech>
    548a:	68 2e       	mov	r6, r24
    548c:	d2 30       	cpi	r29, 0x02	; 2
    548e:	68 f0       	brcs	.+26     	; 0x54aa <_Z16rv3028_get_epochPbPc+0x9e>
    5490:	00 e0       	ldi	r16, 0x00	; 0
    5492:	10 e0       	ldi	r17, 0x00	; 0
    5494:	c1 e0       	ldi	r28, 0x01	; 1
    5496:	6c 2f       	mov	r22, r28
    5498:	c5 01       	movw	r24, r10
    549a:	0e 94 41 01 	call	0x282	; 0x282 <month_length>
    549e:	08 0f       	add	r16, r24
    54a0:	11 1d       	adc	r17, r1
    54a2:	cf 5f       	subi	r28, 0xFF	; 255
    54a4:	dc 13       	cpse	r29, r28
    54a6:	f7 cf       	rjmp	.-18     	; 0x5496 <_Z16rv3028_get_epochPbPc+0x8a>
    54a8:	02 c0       	rjmp	.+4      	; 0x54ae <_Z16rv3028_get_epochPbPc+0xa2>
    54aa:	00 e0       	ldi	r16, 0x00	; 0
    54ac:	10 e0       	ldi	r17, 0x00	; 0
    54ae:	86 2d       	mov	r24, r6
    54b0:	66 0c       	add	r6, r6
    54b2:	99 0b       	sbc	r25, r25
    54b4:	01 97       	sbiw	r24, 0x01	; 1
    54b6:	08 0f       	add	r16, r24
    54b8:	19 1f       	adc	r17, r25
    54ba:	88 2d       	mov	r24, r8
    54bc:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z7bcd2dech>
    54c0:	88 2e       	mov	r8, r24
    54c2:	87 2d       	mov	r24, r7
    54c4:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z7bcd2dech>
    54c8:	c8 2f       	mov	r28, r24
    54ca:	89 2d       	mov	r24, r9
    54cc:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z7bcd2dech>
    54d0:	08 2c       	mov	r0, r8
    54d2:	00 0c       	add	r0, r0
    54d4:	99 08       	sbc	r9, r9
    54d6:	9c e3       	ldi	r25, 0x3C	; 60
    54d8:	c9 02       	muls	r28, r25
    54da:	80 0c       	add	r8, r0
    54dc:	91 1c       	adc	r9, r1
    54de:	11 24       	eor	r1, r1
    54e0:	09 2c       	mov	r0, r9
    54e2:	00 0c       	add	r0, r0
    54e4:	aa 08       	sbc	r10, r10
    54e6:	bb 08       	sbc	r11, r11
    54e8:	a8 2f       	mov	r26, r24
    54ea:	88 0f       	add	r24, r24
    54ec:	bb 0b       	sbc	r27, r27
    54ee:	20 e1       	ldi	r18, 0x10	; 16
    54f0:	3e e0       	ldi	r19, 0x0E	; 14
    54f2:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <__usmulhisi3>
    54f6:	86 0e       	add	r8, r22
    54f8:	97 1e       	adc	r9, r23
    54fa:	a8 1e       	adc	r10, r24
    54fc:	b9 1e       	adc	r11, r25
    54fe:	d8 01       	movw	r26, r16
    5500:	20 e8       	ldi	r18, 0x80	; 128
    5502:	31 e5       	ldi	r19, 0x51	; 81
    5504:	41 e0       	ldi	r20, 0x01	; 1
    5506:	50 e0       	ldi	r21, 0x00	; 0
    5508:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulshisi3>
    550c:	86 0e       	add	r8, r22
    550e:	97 1e       	adc	r9, r23
    5510:	a8 1e       	adc	r10, r24
    5512:	b9 1e       	adc	r11, r25
    5514:	d7 01       	movw	r26, r14
    5516:	5e 96       	adiw	r26, 0x1e	; 30
    5518:	20 e8       	ldi	r18, 0x80	; 128
    551a:	33 e3       	ldi	r19, 0x33	; 51
    551c:	41 ee       	ldi	r20, 0xE1	; 225
    551e:	51 e0       	ldi	r21, 0x01	; 1
    5520:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulshisi3>
    5524:	86 0e       	add	r8, r22
    5526:	97 1e       	adc	r9, r23
    5528:	a8 1e       	adc	r10, r24
    552a:	b9 1e       	adc	r11, r25
    552c:	c7 01       	movw	r24, r14
    552e:	4f 96       	adiw	r24, 0x1f	; 31
    5530:	dc 01       	movw	r26, r24
    5532:	0a f4       	brpl	.+2      	; 0x5536 <_Z16rv3028_get_epochPbPc+0x12a>
    5534:	13 96       	adiw	r26, 0x03	; 3
    5536:	b5 95       	asr	r27
    5538:	a7 95       	ror	r26
    553a:	b5 95       	asr	r27
    553c:	a7 95       	ror	r26
    553e:	20 e8       	ldi	r18, 0x80	; 128
    5540:	31 e5       	ldi	r19, 0x51	; 81
    5542:	41 e0       	ldi	r20, 0x01	; 1
    5544:	50 e0       	ldi	r21, 0x00	; 0
    5546:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulshisi3>
    554a:	86 0e       	add	r8, r22
    554c:	97 1e       	adc	r9, r23
    554e:	a8 1e       	adc	r10, r24
    5550:	b9 1e       	adc	r11, r25
    5552:	c7 01       	movw	r24, r14
    5554:	8d 59       	subi	r24, 0x9D	; 157
    5556:	9f 4f       	sbci	r25, 0xFF	; 255
    5558:	64 e6       	ldi	r22, 0x64	; 100
    555a:	70 e0       	ldi	r23, 0x00	; 0
    555c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    5560:	db 01       	movw	r26, r22
    5562:	20 e8       	ldi	r18, 0x80	; 128
    5564:	3e ea       	ldi	r19, 0xAE	; 174
    5566:	4e ef       	ldi	r20, 0xFE	; 254
    5568:	5f ef       	ldi	r21, 0xFF	; 255
    556a:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulshisi3>
    556e:	86 0e       	add	r8, r22
    5570:	97 1e       	adc	r9, r23
    5572:	a8 1e       	adc	r10, r24
    5574:	b9 1e       	adc	r11, r25
    5576:	c7 01       	movw	r24, r14
    5578:	81 57       	subi	r24, 0x71	; 113
    557a:	9e 4f       	sbci	r25, 0xFE	; 254
    557c:	60 e9       	ldi	r22, 0x90	; 144
    557e:	71 e0       	ldi	r23, 0x01	; 1
    5580:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodhi4>
    5584:	db 01       	movw	r26, r22
    5586:	20 e8       	ldi	r18, 0x80	; 128
    5588:	31 e5       	ldi	r19, 0x51	; 81
    558a:	41 e0       	ldi	r20, 0x01	; 1
    558c:	50 e0       	ldi	r21, 0x00	; 0
    558e:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulshisi3>
    5592:	68 0d       	add	r22, r8
    5594:	79 1d       	adc	r23, r9
    5596:	8a 1d       	adc	r24, r10
    5598:	9b 1d       	adc	r25, r11
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	09 c0       	rjmp	.+18     	; 0x55b0 <_Z16rv3028_get_epochPbPc+0x1a4>
    559e:	0e 94 d7 29 	call	0x53ae	; 0x53ae <_Z16rv3028_get_epochv>
    55a2:	31 e0       	ldi	r19, 0x01	; 1
    55a4:	61 15       	cp	r22, r1
    55a6:	71 05       	cpc	r23, r1
    55a8:	81 05       	cpc	r24, r1
    55aa:	91 05       	cpc	r25, r1
    55ac:	09 f0       	breq	.+2      	; 0x55b0 <_Z16rv3028_get_epochPbPc+0x1a4>
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	c1 14       	cp	r12, r1
    55b2:	d1 04       	cpc	r13, r1
    55b4:	31 f0       	breq	.+12     	; 0x55c2 <_Z16rv3028_get_epochPbPc+0x1b6>
    55b6:	21 e0       	ldi	r18, 0x01	; 1
    55b8:	31 11       	cpse	r19, r1
    55ba:	01 c0       	rjmp	.+2      	; 0x55be <_Z16rv3028_get_epochPbPc+0x1b2>
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	f6 01       	movw	r30, r12
    55c0:	20 83       	st	Z, r18
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	1f 91       	pop	r17
    55c8:	0f 91       	pop	r16
    55ca:	ff 90       	pop	r15
    55cc:	ef 90       	pop	r14
    55ce:	df 90       	pop	r13
    55d0:	cf 90       	pop	r12
    55d2:	bf 90       	pop	r11
    55d4:	af 90       	pop	r10
    55d6:	9f 90       	pop	r9
    55d8:	8f 90       	pop	r8
    55da:	7f 90       	pop	r7
    55dc:	6f 90       	pop	r6
    55de:	08 95       	ret

000055e0 <_Z21rv3028_set_offset_RAMj>:
    55e0:	cf 93       	push	r28
    55e2:	df 93       	push	r29
    55e4:	00 d0       	rcall	.+0      	; 0x55e6 <_Z21rv3028_set_offset_RAMj+0x6>
    55e6:	cd b7       	in	r28, 0x3d	; 61
    55e8:	de b7       	in	r29, 0x3e	; 62
    55ea:	20 e1       	ldi	r18, 0x10	; 16
    55ec:	2a 83       	std	Y+2, r18	; 0x02
    55ee:	9c 01       	movw	r18, r24
    55f0:	36 95       	lsr	r19
    55f2:	27 95       	ror	r18
    55f4:	29 83       	std	Y+1, r18	; 0x01
    55f6:	80 ff       	sbrs	r24, 0
    55f8:	02 c0       	rjmp	.+4      	; 0x55fe <_Z21rv3028_set_offset_RAMj+0x1e>
    55fa:	80 e9       	ldi	r24, 0x90	; 144
    55fc:	8a 83       	std	Y+2, r24	; 0x02
    55fe:	22 e0       	ldi	r18, 0x02	; 2
    5600:	ae 01       	movw	r20, r28
    5602:	4f 5f       	subi	r20, 0xFF	; 255
    5604:	5f 4f       	sbci	r21, 0xFF	; 255
    5606:	66 e3       	ldi	r22, 0x36	; 54
    5608:	84 ea       	ldi	r24, 0xA4	; 164
    560a:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    560e:	0f 90       	pop	r0
    5610:	0f 90       	pop	r0
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	08 95       	ret

00005618 <_Z13rv3028_1s_sqwh>:
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	00 d0       	rcall	.+0      	; 0x561e <_Z13rv3028_1s_sqwh+0x6>
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	19 82       	std	Y+1, r1	; 0x01
    5624:	88 23       	and	r24, r24
    5626:	31 f0       	breq	.+12     	; 0x5634 <_Z13rv3028_1s_sqwh+0x1c>
    5628:	85 ec       	ldi	r24, 0xC5	; 197
    562a:	8a 83       	std	Y+2, r24	; 0x02
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <_ZL14g_1HzSqWave_on>
    5632:	04 c0       	rjmp	.+8      	; 0x563c <_Z13rv3028_1s_sqwh+0x24>
    5634:	85 e4       	ldi	r24, 0x45	; 69
    5636:	8a 83       	std	Y+2, r24	; 0x02
    5638:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZL14g_1HzSqWave_on>
    563c:	21 e0       	ldi	r18, 0x01	; 1
    563e:	ae 01       	movw	r20, r28
    5640:	4e 5f       	subi	r20, 0xFE	; 254
    5642:	5f 4f       	sbci	r21, 0xFF	; 255
    5644:	65 e3       	ldi	r22, 0x35	; 53
    5646:	84 ea       	ldi	r24, 0xA4	; 164
    5648:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    564c:	89 81       	ldd	r24, Y+1	; 0x01
    564e:	81 11       	cpse	r24, r1
    5650:	0c c0       	rjmp	.+24     	; 0x566a <_Z13rv3028_1s_sqwh+0x52>
    5652:	21 e0       	ldi	r18, 0x01	; 1
    5654:	ae 01       	movw	r20, r28
    5656:	4f 5f       	subi	r20, 0xFF	; 255
    5658:	5f 4f       	sbci	r21, 0xFF	; 255
    565a:	6e e0       	ldi	r22, 0x0E	; 14
    565c:	84 ea       	ldi	r24, 0xA4	; 164
    565e:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
    5662:	89 81       	ldd	r24, Y+1	; 0x01
    5664:	8f 76       	andi	r24, 0x6F	; 111
    5666:	89 83       	std	Y+1, r24	; 0x01
    5668:	02 c0       	rjmp	.+4      	; 0x566e <_Z13rv3028_1s_sqwh+0x56>
    566a:	80 e8       	ldi	r24, 0x80	; 128
    566c:	89 83       	std	Y+1, r24	; 0x01
    566e:	1a 82       	std	Y+2, r1	; 0x02
    5670:	21 e0       	ldi	r18, 0x01	; 1
    5672:	ae 01       	movw	r20, r28
    5674:	4e 5f       	subi	r20, 0xFE	; 254
    5676:	5f 4f       	sbci	r21, 0xFF	; 255
    5678:	6e e0       	ldi	r22, 0x0E	; 14
    567a:	84 ea       	ldi	r24, 0xA4	; 164
    567c:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    5680:	89 81       	ldd	r24, Y+1	; 0x01
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	df 91       	pop	r29
    5688:	cf 91       	pop	r28
    568a:	08 95       	ret

0000568c <_Z18waitForEEPROMReadyv>:
    568c:	cf 93       	push	r28
    568e:	df 93       	push	r29
    5690:	1f 92       	push	r1
    5692:	cd b7       	in	r28, 0x3d	; 61
    5694:	de b7       	in	r29, 0x3e	; 62
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	89 83       	std	Y+1, r24	; 0x01
    569a:	21 e0       	ldi	r18, 0x01	; 1
    569c:	ae 01       	movw	r20, r28
    569e:	4f 5f       	subi	r20, 0xFF	; 255
    56a0:	5f 4f       	sbci	r21, 0xFF	; 255
    56a2:	6e e0       	ldi	r22, 0x0E	; 14
    56a4:	84 ea       	ldi	r24, 0xA4	; 164
    56a6:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
    56aa:	81 11       	cpse	r24, r1
    56ac:	07 c0       	rjmp	.+14     	; 0x56bc <_Z18waitForEEPROMReadyv+0x30>
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	80 78       	andi	r24, 0x80	; 128
    56b2:	89 83       	std	Y+1, r24	; 0x01
    56b4:	81 11       	cpse	r24, r1
    56b6:	f1 cf       	rjmp	.-30     	; 0x569a <_Z18waitForEEPROMReadyv+0xe>
    56b8:	80 e0       	ldi	r24, 0x00	; 0
    56ba:	03 c0       	rjmp	.+6      	; 0x56c2 <_Z18waitForEEPROMReadyv+0x36>
    56bc:	89 81       	ldd	r24, Y+1	; 0x01
    56be:	88 23       	and	r24, r24
    56c0:	d9 f3       	breq	.-10     	; 0x56b8 <_Z18waitForEEPROMReadyv+0x2c>
    56c2:	0f 90       	pop	r0
    56c4:	df 91       	pop	r29
    56c6:	cf 91       	pop	r28
    56c8:	08 95       	ret

000056ca <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	1f 92       	push	r1
    56d0:	cd b7       	in	r28, 0x3d	; 61
    56d2:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    56d4:	19 82       	std	Y+1, r1	; 0x01

		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    56d6:	21 e0       	ldi	r18, 0x01	; 1
    56d8:	ae 01       	movw	r20, r28
    56da:	4f 5f       	subi	r20, 0xFF	; 255
    56dc:	5f 4f       	sbci	r21, 0xFF	; 255
    56de:	67 e2       	ldi	r22, 0x27	; 39
    56e0:	84 ea       	ldi	r24, 0xA4	; 164
    56e2:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    56e6:	0e 94 46 2b 	call	0x568c	; 0x568c <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    56ea:	82 e1       	ldi	r24, 0x12	; 18
    56ec:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    56ee:	21 e0       	ldi	r18, 0x01	; 1
    56f0:	ae 01       	movw	r20, r28
    56f2:	4f 5f       	subi	r20, 0xFF	; 255
    56f4:	5f 4f       	sbci	r21, 0xFF	; 255
    56f6:	67 e2       	ldi	r22, 0x27	; 39
    56f8:	84 ea       	ldi	r24, 0xA4	; 164
    56fa:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    56fe:	0e 94 46 2b 	call	0x568c	; 0x568c <_Z18waitForEEPROMReadyv>
	}
    5702:	0f 90       	pop	r0
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	08 95       	ret

0000570a <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	00 d0       	rcall	.+0      	; 0x5710 <_Z21rv3028_get_offset_RAMv+0x6>
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    5714:	0e 94 65 2b 	call	0x56ca	; 0x56ca <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    5718:	22 e0       	ldi	r18, 0x02	; 2
    571a:	ae 01       	movw	r20, r28
    571c:	4f 5f       	subi	r20, 0xFF	; 255
    571e:	5f 4f       	sbci	r21, 0xFF	; 255
    5720:	66 e3       	ldi	r22, 0x36	; 54
    5722:	84 ea       	ldi	r24, 0xA4	; 164
    5724:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    5728:	89 81       	ldd	r24, Y+1	; 0x01
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	88 0f       	add	r24, r24
    572e:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    5730:	2a 81       	ldd	r18, Y+2	; 0x02
    5732:	22 23       	and	r18, r18
    5734:	0c f4       	brge	.+2      	; 0x5738 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    5736:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    5738:	0f 90       	pop	r0
    573a:	0f 90       	pop	r0
    573c:	df 91       	pop	r29
    573e:	cf 91       	pop	r28
    5740:	08 95       	ret

00005742 <__subsf3>:
    5742:	50 58       	subi	r21, 0x80	; 128

00005744 <__addsf3>:
    5744:	bb 27       	eor	r27, r27
    5746:	aa 27       	eor	r26, r26
    5748:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__addsf3x>
    574c:	0c 94 63 2d 	jmp	0x5ac6	; 0x5ac6 <__fp_round>
    5750:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <__fp_pscA>
    5754:	38 f0       	brcs	.+14     	; 0x5764 <__addsf3+0x20>
    5756:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__fp_pscB>
    575a:	20 f0       	brcs	.+8      	; 0x5764 <__addsf3+0x20>
    575c:	39 f4       	brne	.+14     	; 0x576c <__addsf3+0x28>
    575e:	9f 3f       	cpi	r25, 0xFF	; 255
    5760:	19 f4       	brne	.+6      	; 0x5768 <__addsf3+0x24>
    5762:	26 f4       	brtc	.+8      	; 0x576c <__addsf3+0x28>
    5764:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_nan>
    5768:	0e f4       	brtc	.+2      	; 0x576c <__addsf3+0x28>
    576a:	e0 95       	com	r30
    576c:	e7 fb       	bst	r30, 7
    576e:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__fp_inf>

00005772 <__addsf3x>:
    5772:	e9 2f       	mov	r30, r25
    5774:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <__fp_split3>
    5778:	58 f3       	brcs	.-42     	; 0x5750 <__addsf3+0xc>
    577a:	ba 17       	cp	r27, r26
    577c:	62 07       	cpc	r22, r18
    577e:	73 07       	cpc	r23, r19
    5780:	84 07       	cpc	r24, r20
    5782:	95 07       	cpc	r25, r21
    5784:	20 f0       	brcs	.+8      	; 0x578e <__addsf3x+0x1c>
    5786:	79 f4       	brne	.+30     	; 0x57a6 <__addsf3x+0x34>
    5788:	a6 f5       	brtc	.+104    	; 0x57f2 <__addsf3x+0x80>
    578a:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__fp_zero>
    578e:	0e f4       	brtc	.+2      	; 0x5792 <__addsf3x+0x20>
    5790:	e0 95       	com	r30
    5792:	0b 2e       	mov	r0, r27
    5794:	ba 2f       	mov	r27, r26
    5796:	a0 2d       	mov	r26, r0
    5798:	0b 01       	movw	r0, r22
    579a:	b9 01       	movw	r22, r18
    579c:	90 01       	movw	r18, r0
    579e:	0c 01       	movw	r0, r24
    57a0:	ca 01       	movw	r24, r20
    57a2:	a0 01       	movw	r20, r0
    57a4:	11 24       	eor	r1, r1
    57a6:	ff 27       	eor	r31, r31
    57a8:	59 1b       	sub	r21, r25
    57aa:	99 f0       	breq	.+38     	; 0x57d2 <__addsf3x+0x60>
    57ac:	59 3f       	cpi	r21, 0xF9	; 249
    57ae:	50 f4       	brcc	.+20     	; 0x57c4 <__addsf3x+0x52>
    57b0:	50 3e       	cpi	r21, 0xE0	; 224
    57b2:	68 f1       	brcs	.+90     	; 0x580e <__addsf3x+0x9c>
    57b4:	1a 16       	cp	r1, r26
    57b6:	f0 40       	sbci	r31, 0x00	; 0
    57b8:	a2 2f       	mov	r26, r18
    57ba:	23 2f       	mov	r18, r19
    57bc:	34 2f       	mov	r19, r20
    57be:	44 27       	eor	r20, r20
    57c0:	58 5f       	subi	r21, 0xF8	; 248
    57c2:	f3 cf       	rjmp	.-26     	; 0x57aa <__addsf3x+0x38>
    57c4:	46 95       	lsr	r20
    57c6:	37 95       	ror	r19
    57c8:	27 95       	ror	r18
    57ca:	a7 95       	ror	r26
    57cc:	f0 40       	sbci	r31, 0x00	; 0
    57ce:	53 95       	inc	r21
    57d0:	c9 f7       	brne	.-14     	; 0x57c4 <__addsf3x+0x52>
    57d2:	7e f4       	brtc	.+30     	; 0x57f2 <__addsf3x+0x80>
    57d4:	1f 16       	cp	r1, r31
    57d6:	ba 0b       	sbc	r27, r26
    57d8:	62 0b       	sbc	r22, r18
    57da:	73 0b       	sbc	r23, r19
    57dc:	84 0b       	sbc	r24, r20
    57de:	ba f0       	brmi	.+46     	; 0x580e <__addsf3x+0x9c>
    57e0:	91 50       	subi	r25, 0x01	; 1
    57e2:	a1 f0       	breq	.+40     	; 0x580c <__addsf3x+0x9a>
    57e4:	ff 0f       	add	r31, r31
    57e6:	bb 1f       	adc	r27, r27
    57e8:	66 1f       	adc	r22, r22
    57ea:	77 1f       	adc	r23, r23
    57ec:	88 1f       	adc	r24, r24
    57ee:	c2 f7       	brpl	.-16     	; 0x57e0 <__addsf3x+0x6e>
    57f0:	0e c0       	rjmp	.+28     	; 0x580e <__addsf3x+0x9c>
    57f2:	ba 0f       	add	r27, r26
    57f4:	62 1f       	adc	r22, r18
    57f6:	73 1f       	adc	r23, r19
    57f8:	84 1f       	adc	r24, r20
    57fa:	48 f4       	brcc	.+18     	; 0x580e <__addsf3x+0x9c>
    57fc:	87 95       	ror	r24
    57fe:	77 95       	ror	r23
    5800:	67 95       	ror	r22
    5802:	b7 95       	ror	r27
    5804:	f7 95       	ror	r31
    5806:	9e 3f       	cpi	r25, 0xFE	; 254
    5808:	08 f0       	brcs	.+2      	; 0x580c <__addsf3x+0x9a>
    580a:	b0 cf       	rjmp	.-160    	; 0x576c <__addsf3+0x28>
    580c:	93 95       	inc	r25
    580e:	88 0f       	add	r24, r24
    5810:	08 f0       	brcs	.+2      	; 0x5814 <__addsf3x+0xa2>
    5812:	99 27       	eor	r25, r25
    5814:	ee 0f       	add	r30, r30
    5816:	97 95       	ror	r25
    5818:	87 95       	ror	r24
    581a:	08 95       	ret

0000581c <__cmpsf2>:
    581c:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__fp_cmp>
    5820:	08 f4       	brcc	.+2      	; 0x5824 <__cmpsf2+0x8>
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	08 95       	ret

00005826 <cos>:
    5826:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__fp_rempio2>
    582a:	e3 95       	inc	r30
    582c:	0c 94 74 2d 	jmp	0x5ae8	; 0x5ae8 <__fp_sinus>

00005830 <__divsf3>:
    5830:	0e 94 2c 2c 	call	0x5858	; 0x5858 <__divsf3x>
    5834:	0c 94 63 2d 	jmp	0x5ac6	; 0x5ac6 <__fp_round>
    5838:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__fp_pscB>
    583c:	58 f0       	brcs	.+22     	; 0x5854 <__divsf3+0x24>
    583e:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <__fp_pscA>
    5842:	40 f0       	brcs	.+16     	; 0x5854 <__divsf3+0x24>
    5844:	29 f4       	brne	.+10     	; 0x5850 <__divsf3+0x20>
    5846:	5f 3f       	cpi	r21, 0xFF	; 255
    5848:	29 f0       	breq	.+10     	; 0x5854 <__divsf3+0x24>
    584a:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__fp_inf>
    584e:	51 11       	cpse	r21, r1
    5850:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__fp_szero>
    5854:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_nan>

00005858 <__divsf3x>:
    5858:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <__fp_split3>
    585c:	68 f3       	brcs	.-38     	; 0x5838 <__divsf3+0x8>

0000585e <__divsf3_pse>:
    585e:	99 23       	and	r25, r25
    5860:	b1 f3       	breq	.-20     	; 0x584e <__divsf3+0x1e>
    5862:	55 23       	and	r21, r21
    5864:	91 f3       	breq	.-28     	; 0x584a <__divsf3+0x1a>
    5866:	95 1b       	sub	r25, r21
    5868:	55 0b       	sbc	r21, r21
    586a:	bb 27       	eor	r27, r27
    586c:	aa 27       	eor	r26, r26
    586e:	62 17       	cp	r22, r18
    5870:	73 07       	cpc	r23, r19
    5872:	84 07       	cpc	r24, r20
    5874:	38 f0       	brcs	.+14     	; 0x5884 <__divsf3_pse+0x26>
    5876:	9f 5f       	subi	r25, 0xFF	; 255
    5878:	5f 4f       	sbci	r21, 0xFF	; 255
    587a:	22 0f       	add	r18, r18
    587c:	33 1f       	adc	r19, r19
    587e:	44 1f       	adc	r20, r20
    5880:	aa 1f       	adc	r26, r26
    5882:	a9 f3       	breq	.-22     	; 0x586e <__divsf3_pse+0x10>
    5884:	35 d0       	rcall	.+106    	; 0x58f0 <__divsf3_pse+0x92>
    5886:	0e 2e       	mov	r0, r30
    5888:	3a f0       	brmi	.+14     	; 0x5898 <__divsf3_pse+0x3a>
    588a:	e0 e8       	ldi	r30, 0x80	; 128
    588c:	32 d0       	rcall	.+100    	; 0x58f2 <__divsf3_pse+0x94>
    588e:	91 50       	subi	r25, 0x01	; 1
    5890:	50 40       	sbci	r21, 0x00	; 0
    5892:	e6 95       	lsr	r30
    5894:	00 1c       	adc	r0, r0
    5896:	ca f7       	brpl	.-14     	; 0x588a <__divsf3_pse+0x2c>
    5898:	2b d0       	rcall	.+86     	; 0x58f0 <__divsf3_pse+0x92>
    589a:	fe 2f       	mov	r31, r30
    589c:	29 d0       	rcall	.+82     	; 0x58f0 <__divsf3_pse+0x92>
    589e:	66 0f       	add	r22, r22
    58a0:	77 1f       	adc	r23, r23
    58a2:	88 1f       	adc	r24, r24
    58a4:	bb 1f       	adc	r27, r27
    58a6:	26 17       	cp	r18, r22
    58a8:	37 07       	cpc	r19, r23
    58aa:	48 07       	cpc	r20, r24
    58ac:	ab 07       	cpc	r26, r27
    58ae:	b0 e8       	ldi	r27, 0x80	; 128
    58b0:	09 f0       	breq	.+2      	; 0x58b4 <__divsf3_pse+0x56>
    58b2:	bb 0b       	sbc	r27, r27
    58b4:	80 2d       	mov	r24, r0
    58b6:	bf 01       	movw	r22, r30
    58b8:	ff 27       	eor	r31, r31
    58ba:	93 58       	subi	r25, 0x83	; 131
    58bc:	5f 4f       	sbci	r21, 0xFF	; 255
    58be:	3a f0       	brmi	.+14     	; 0x58ce <__divsf3_pse+0x70>
    58c0:	9e 3f       	cpi	r25, 0xFE	; 254
    58c2:	51 05       	cpc	r21, r1
    58c4:	78 f0       	brcs	.+30     	; 0x58e4 <__divsf3_pse+0x86>
    58c6:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__fp_inf>
    58ca:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__fp_szero>
    58ce:	5f 3f       	cpi	r21, 0xFF	; 255
    58d0:	e4 f3       	brlt	.-8      	; 0x58ca <__divsf3_pse+0x6c>
    58d2:	98 3e       	cpi	r25, 0xE8	; 232
    58d4:	d4 f3       	brlt	.-12     	; 0x58ca <__divsf3_pse+0x6c>
    58d6:	86 95       	lsr	r24
    58d8:	77 95       	ror	r23
    58da:	67 95       	ror	r22
    58dc:	b7 95       	ror	r27
    58de:	f7 95       	ror	r31
    58e0:	9f 5f       	subi	r25, 0xFF	; 255
    58e2:	c9 f7       	brne	.-14     	; 0x58d6 <__divsf3_pse+0x78>
    58e4:	88 0f       	add	r24, r24
    58e6:	91 1d       	adc	r25, r1
    58e8:	96 95       	lsr	r25
    58ea:	87 95       	ror	r24
    58ec:	97 f9       	bld	r25, 7
    58ee:	08 95       	ret
    58f0:	e1 e0       	ldi	r30, 0x01	; 1
    58f2:	66 0f       	add	r22, r22
    58f4:	77 1f       	adc	r23, r23
    58f6:	88 1f       	adc	r24, r24
    58f8:	bb 1f       	adc	r27, r27
    58fa:	62 17       	cp	r22, r18
    58fc:	73 07       	cpc	r23, r19
    58fe:	84 07       	cpc	r24, r20
    5900:	ba 07       	cpc	r27, r26
    5902:	20 f0       	brcs	.+8      	; 0x590c <__divsf3_pse+0xae>
    5904:	62 1b       	sub	r22, r18
    5906:	73 0b       	sbc	r23, r19
    5908:	84 0b       	sbc	r24, r20
    590a:	ba 0b       	sbc	r27, r26
    590c:	ee 1f       	adc	r30, r30
    590e:	88 f7       	brcc	.-30     	; 0x58f2 <__divsf3_pse+0x94>
    5910:	e0 95       	com	r30
    5912:	08 95       	ret

00005914 <__fixsfsi>:
    5914:	0e 94 91 2c 	call	0x5922	; 0x5922 <__fixunssfsi>
    5918:	68 94       	set
    591a:	b1 11       	cpse	r27, r1
    591c:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__fp_szero>
    5920:	08 95       	ret

00005922 <__fixunssfsi>:
    5922:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <__fp_splitA>
    5926:	88 f0       	brcs	.+34     	; 0x594a <__fixunssfsi+0x28>
    5928:	9f 57       	subi	r25, 0x7F	; 127
    592a:	98 f0       	brcs	.+38     	; 0x5952 <__fixunssfsi+0x30>
    592c:	b9 2f       	mov	r27, r25
    592e:	99 27       	eor	r25, r25
    5930:	b7 51       	subi	r27, 0x17	; 23
    5932:	b0 f0       	brcs	.+44     	; 0x5960 <__fixunssfsi+0x3e>
    5934:	e1 f0       	breq	.+56     	; 0x596e <__fixunssfsi+0x4c>
    5936:	66 0f       	add	r22, r22
    5938:	77 1f       	adc	r23, r23
    593a:	88 1f       	adc	r24, r24
    593c:	99 1f       	adc	r25, r25
    593e:	1a f0       	brmi	.+6      	; 0x5946 <__fixunssfsi+0x24>
    5940:	ba 95       	dec	r27
    5942:	c9 f7       	brne	.-14     	; 0x5936 <__fixunssfsi+0x14>
    5944:	14 c0       	rjmp	.+40     	; 0x596e <__fixunssfsi+0x4c>
    5946:	b1 30       	cpi	r27, 0x01	; 1
    5948:	91 f0       	breq	.+36     	; 0x596e <__fixunssfsi+0x4c>
    594a:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <__fp_zero>
    594e:	b1 e0       	ldi	r27, 0x01	; 1
    5950:	08 95       	ret
    5952:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__fp_zero>
    5956:	67 2f       	mov	r22, r23
    5958:	78 2f       	mov	r23, r24
    595a:	88 27       	eor	r24, r24
    595c:	b8 5f       	subi	r27, 0xF8	; 248
    595e:	39 f0       	breq	.+14     	; 0x596e <__fixunssfsi+0x4c>
    5960:	b9 3f       	cpi	r27, 0xF9	; 249
    5962:	cc f3       	brlt	.-14     	; 0x5956 <__fixunssfsi+0x34>
    5964:	86 95       	lsr	r24
    5966:	77 95       	ror	r23
    5968:	67 95       	ror	r22
    596a:	b3 95       	inc	r27
    596c:	d9 f7       	brne	.-10     	; 0x5964 <__fixunssfsi+0x42>
    596e:	3e f4       	brtc	.+14     	; 0x597e <__fixunssfsi+0x5c>
    5970:	90 95       	com	r25
    5972:	80 95       	com	r24
    5974:	70 95       	com	r23
    5976:	61 95       	neg	r22
    5978:	7f 4f       	sbci	r23, 0xFF	; 255
    597a:	8f 4f       	sbci	r24, 0xFF	; 255
    597c:	9f 4f       	sbci	r25, 0xFF	; 255
    597e:	08 95       	ret

00005980 <__floatunsisf>:
    5980:	e8 94       	clt
    5982:	09 c0       	rjmp	.+18     	; 0x5996 <__floatsisf+0x12>

00005984 <__floatsisf>:
    5984:	97 fb       	bst	r25, 7
    5986:	3e f4       	brtc	.+14     	; 0x5996 <__floatsisf+0x12>
    5988:	90 95       	com	r25
    598a:	80 95       	com	r24
    598c:	70 95       	com	r23
    598e:	61 95       	neg	r22
    5990:	7f 4f       	sbci	r23, 0xFF	; 255
    5992:	8f 4f       	sbci	r24, 0xFF	; 255
    5994:	9f 4f       	sbci	r25, 0xFF	; 255
    5996:	99 23       	and	r25, r25
    5998:	a9 f0       	breq	.+42     	; 0x59c4 <__floatsisf+0x40>
    599a:	f9 2f       	mov	r31, r25
    599c:	96 e9       	ldi	r25, 0x96	; 150
    599e:	bb 27       	eor	r27, r27
    59a0:	93 95       	inc	r25
    59a2:	f6 95       	lsr	r31
    59a4:	87 95       	ror	r24
    59a6:	77 95       	ror	r23
    59a8:	67 95       	ror	r22
    59aa:	b7 95       	ror	r27
    59ac:	f1 11       	cpse	r31, r1
    59ae:	f8 cf       	rjmp	.-16     	; 0x59a0 <__floatsisf+0x1c>
    59b0:	fa f4       	brpl	.+62     	; 0x59f0 <__floatsisf+0x6c>
    59b2:	bb 0f       	add	r27, r27
    59b4:	11 f4       	brne	.+4      	; 0x59ba <__floatsisf+0x36>
    59b6:	60 ff       	sbrs	r22, 0
    59b8:	1b c0       	rjmp	.+54     	; 0x59f0 <__floatsisf+0x6c>
    59ba:	6f 5f       	subi	r22, 0xFF	; 255
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	8f 4f       	sbci	r24, 0xFF	; 255
    59c0:	9f 4f       	sbci	r25, 0xFF	; 255
    59c2:	16 c0       	rjmp	.+44     	; 0x59f0 <__floatsisf+0x6c>
    59c4:	88 23       	and	r24, r24
    59c6:	11 f0       	breq	.+4      	; 0x59cc <__floatsisf+0x48>
    59c8:	96 e9       	ldi	r25, 0x96	; 150
    59ca:	11 c0       	rjmp	.+34     	; 0x59ee <__floatsisf+0x6a>
    59cc:	77 23       	and	r23, r23
    59ce:	21 f0       	breq	.+8      	; 0x59d8 <__floatsisf+0x54>
    59d0:	9e e8       	ldi	r25, 0x8E	; 142
    59d2:	87 2f       	mov	r24, r23
    59d4:	76 2f       	mov	r23, r22
    59d6:	05 c0       	rjmp	.+10     	; 0x59e2 <__floatsisf+0x5e>
    59d8:	66 23       	and	r22, r22
    59da:	71 f0       	breq	.+28     	; 0x59f8 <__floatsisf+0x74>
    59dc:	96 e8       	ldi	r25, 0x86	; 134
    59de:	86 2f       	mov	r24, r22
    59e0:	70 e0       	ldi	r23, 0x00	; 0
    59e2:	60 e0       	ldi	r22, 0x00	; 0
    59e4:	2a f0       	brmi	.+10     	; 0x59f0 <__floatsisf+0x6c>
    59e6:	9a 95       	dec	r25
    59e8:	66 0f       	add	r22, r22
    59ea:	77 1f       	adc	r23, r23
    59ec:	88 1f       	adc	r24, r24
    59ee:	da f7       	brpl	.-10     	; 0x59e6 <__floatsisf+0x62>
    59f0:	88 0f       	add	r24, r24
    59f2:	96 95       	lsr	r25
    59f4:	87 95       	ror	r24
    59f6:	97 f9       	bld	r25, 7
    59f8:	08 95       	ret

000059fa <__fp_cmp>:
    59fa:	99 0f       	add	r25, r25
    59fc:	00 08       	sbc	r0, r0
    59fe:	55 0f       	add	r21, r21
    5a00:	aa 0b       	sbc	r26, r26
    5a02:	e0 e8       	ldi	r30, 0x80	; 128
    5a04:	fe ef       	ldi	r31, 0xFE	; 254
    5a06:	16 16       	cp	r1, r22
    5a08:	17 06       	cpc	r1, r23
    5a0a:	e8 07       	cpc	r30, r24
    5a0c:	f9 07       	cpc	r31, r25
    5a0e:	c0 f0       	brcs	.+48     	; 0x5a40 <__fp_cmp+0x46>
    5a10:	12 16       	cp	r1, r18
    5a12:	13 06       	cpc	r1, r19
    5a14:	e4 07       	cpc	r30, r20
    5a16:	f5 07       	cpc	r31, r21
    5a18:	98 f0       	brcs	.+38     	; 0x5a40 <__fp_cmp+0x46>
    5a1a:	62 1b       	sub	r22, r18
    5a1c:	73 0b       	sbc	r23, r19
    5a1e:	84 0b       	sbc	r24, r20
    5a20:	95 0b       	sbc	r25, r21
    5a22:	39 f4       	brne	.+14     	; 0x5a32 <__fp_cmp+0x38>
    5a24:	0a 26       	eor	r0, r26
    5a26:	61 f0       	breq	.+24     	; 0x5a40 <__fp_cmp+0x46>
    5a28:	23 2b       	or	r18, r19
    5a2a:	24 2b       	or	r18, r20
    5a2c:	25 2b       	or	r18, r21
    5a2e:	21 f4       	brne	.+8      	; 0x5a38 <__fp_cmp+0x3e>
    5a30:	08 95       	ret
    5a32:	0a 26       	eor	r0, r26
    5a34:	09 f4       	brne	.+2      	; 0x5a38 <__fp_cmp+0x3e>
    5a36:	a1 40       	sbci	r26, 0x01	; 1
    5a38:	a6 95       	lsr	r26
    5a3a:	8f ef       	ldi	r24, 0xFF	; 255
    5a3c:	81 1d       	adc	r24, r1
    5a3e:	81 1d       	adc	r24, r1
    5a40:	08 95       	ret

00005a42 <__fp_inf>:
    5a42:	97 f9       	bld	r25, 7
    5a44:	9f 67       	ori	r25, 0x7F	; 127
    5a46:	80 e8       	ldi	r24, 0x80	; 128
    5a48:	70 e0       	ldi	r23, 0x00	; 0
    5a4a:	60 e0       	ldi	r22, 0x00	; 0
    5a4c:	08 95       	ret

00005a4e <__fp_nan>:
    5a4e:	9f ef       	ldi	r25, 0xFF	; 255
    5a50:	80 ec       	ldi	r24, 0xC0	; 192
    5a52:	08 95       	ret

00005a54 <__fp_pscA>:
    5a54:	00 24       	eor	r0, r0
    5a56:	0a 94       	dec	r0
    5a58:	16 16       	cp	r1, r22
    5a5a:	17 06       	cpc	r1, r23
    5a5c:	18 06       	cpc	r1, r24
    5a5e:	09 06       	cpc	r0, r25
    5a60:	08 95       	ret

00005a62 <__fp_pscB>:
    5a62:	00 24       	eor	r0, r0
    5a64:	0a 94       	dec	r0
    5a66:	12 16       	cp	r1, r18
    5a68:	13 06       	cpc	r1, r19
    5a6a:	14 06       	cpc	r1, r20
    5a6c:	05 06       	cpc	r0, r21
    5a6e:	08 95       	ret
    5a70:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_nan>

00005a74 <__fp_rempio2>:
    5a74:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <__fp_splitA>
    5a78:	d8 f3       	brcs	.-10     	; 0x5a70 <__fp_pscB+0xe>
    5a7a:	e8 94       	clt
    5a7c:	e0 e0       	ldi	r30, 0x00	; 0
    5a7e:	bb 27       	eor	r27, r27
    5a80:	9f 57       	subi	r25, 0x7F	; 127
    5a82:	f0 f0       	brcs	.+60     	; 0x5ac0 <__fp_rempio2+0x4c>
    5a84:	2a ed       	ldi	r18, 0xDA	; 218
    5a86:	3f e0       	ldi	r19, 0x0F	; 15
    5a88:	49 ec       	ldi	r20, 0xC9	; 201
    5a8a:	06 c0       	rjmp	.+12     	; 0x5a98 <__fp_rempio2+0x24>
    5a8c:	ee 0f       	add	r30, r30
    5a8e:	bb 0f       	add	r27, r27
    5a90:	66 1f       	adc	r22, r22
    5a92:	77 1f       	adc	r23, r23
    5a94:	88 1f       	adc	r24, r24
    5a96:	28 f0       	brcs	.+10     	; 0x5aa2 <__fp_rempio2+0x2e>
    5a98:	b2 3a       	cpi	r27, 0xA2	; 162
    5a9a:	62 07       	cpc	r22, r18
    5a9c:	73 07       	cpc	r23, r19
    5a9e:	84 07       	cpc	r24, r20
    5aa0:	28 f0       	brcs	.+10     	; 0x5aac <__fp_rempio2+0x38>
    5aa2:	b2 5a       	subi	r27, 0xA2	; 162
    5aa4:	62 0b       	sbc	r22, r18
    5aa6:	73 0b       	sbc	r23, r19
    5aa8:	84 0b       	sbc	r24, r20
    5aaa:	e3 95       	inc	r30
    5aac:	9a 95       	dec	r25
    5aae:	72 f7       	brpl	.-36     	; 0x5a8c <__fp_rempio2+0x18>
    5ab0:	80 38       	cpi	r24, 0x80	; 128
    5ab2:	30 f4       	brcc	.+12     	; 0x5ac0 <__fp_rempio2+0x4c>
    5ab4:	9a 95       	dec	r25
    5ab6:	bb 0f       	add	r27, r27
    5ab8:	66 1f       	adc	r22, r22
    5aba:	77 1f       	adc	r23, r23
    5abc:	88 1f       	adc	r24, r24
    5abe:	d2 f7       	brpl	.-12     	; 0x5ab4 <__fp_rempio2+0x40>
    5ac0:	90 48       	sbci	r25, 0x80	; 128
    5ac2:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__fp_mpack_finite>

00005ac6 <__fp_round>:
    5ac6:	09 2e       	mov	r0, r25
    5ac8:	03 94       	inc	r0
    5aca:	00 0c       	add	r0, r0
    5acc:	11 f4       	brne	.+4      	; 0x5ad2 <__fp_round+0xc>
    5ace:	88 23       	and	r24, r24
    5ad0:	52 f0       	brmi	.+20     	; 0x5ae6 <__fp_round+0x20>
    5ad2:	bb 0f       	add	r27, r27
    5ad4:	40 f4       	brcc	.+16     	; 0x5ae6 <__fp_round+0x20>
    5ad6:	bf 2b       	or	r27, r31
    5ad8:	11 f4       	brne	.+4      	; 0x5ade <__fp_round+0x18>
    5ada:	60 ff       	sbrs	r22, 0
    5adc:	04 c0       	rjmp	.+8      	; 0x5ae6 <__fp_round+0x20>
    5ade:	6f 5f       	subi	r22, 0xFF	; 255
    5ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae6:	08 95       	ret

00005ae8 <__fp_sinus>:
    5ae8:	ef 93       	push	r30
    5aea:	e0 ff       	sbrs	r30, 0
    5aec:	07 c0       	rjmp	.+14     	; 0x5afc <__fp_sinus+0x14>
    5aee:	a2 ea       	ldi	r26, 0xA2	; 162
    5af0:	2a ed       	ldi	r18, 0xDA	; 218
    5af2:	3f e0       	ldi	r19, 0x0F	; 15
    5af4:	49 ec       	ldi	r20, 0xC9	; 201
    5af6:	5f eb       	ldi	r21, 0xBF	; 191
    5af8:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__addsf3x>
    5afc:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__fp_round>
    5b00:	0f 90       	pop	r0
    5b02:	03 94       	inc	r0
    5b04:	01 fc       	sbrc	r0, 1
    5b06:	90 58       	subi	r25, 0x80	; 128
    5b08:	ec e0       	ldi	r30, 0x0C	; 12
    5b0a:	f2 e0       	ldi	r31, 0x02	; 2
    5b0c:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__fp_powsodd>

00005b10 <__fp_split3>:
    5b10:	57 fd       	sbrc	r21, 7
    5b12:	90 58       	subi	r25, 0x80	; 128
    5b14:	44 0f       	add	r20, r20
    5b16:	55 1f       	adc	r21, r21
    5b18:	59 f0       	breq	.+22     	; 0x5b30 <__fp_splitA+0x10>
    5b1a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1c:	71 f0       	breq	.+28     	; 0x5b3a <__fp_splitA+0x1a>
    5b1e:	47 95       	ror	r20

00005b20 <__fp_splitA>:
    5b20:	88 0f       	add	r24, r24
    5b22:	97 fb       	bst	r25, 7
    5b24:	99 1f       	adc	r25, r25
    5b26:	61 f0       	breq	.+24     	; 0x5b40 <__fp_splitA+0x20>
    5b28:	9f 3f       	cpi	r25, 0xFF	; 255
    5b2a:	79 f0       	breq	.+30     	; 0x5b4a <__fp_splitA+0x2a>
    5b2c:	87 95       	ror	r24
    5b2e:	08 95       	ret
    5b30:	12 16       	cp	r1, r18
    5b32:	13 06       	cpc	r1, r19
    5b34:	14 06       	cpc	r1, r20
    5b36:	55 1f       	adc	r21, r21
    5b38:	f2 cf       	rjmp	.-28     	; 0x5b1e <__fp_split3+0xe>
    5b3a:	46 95       	lsr	r20
    5b3c:	f1 df       	rcall	.-30     	; 0x5b20 <__fp_splitA>
    5b3e:	08 c0       	rjmp	.+16     	; 0x5b50 <__fp_splitA+0x30>
    5b40:	16 16       	cp	r1, r22
    5b42:	17 06       	cpc	r1, r23
    5b44:	18 06       	cpc	r1, r24
    5b46:	99 1f       	adc	r25, r25
    5b48:	f1 cf       	rjmp	.-30     	; 0x5b2c <__fp_splitA+0xc>
    5b4a:	86 95       	lsr	r24
    5b4c:	71 05       	cpc	r23, r1
    5b4e:	61 05       	cpc	r22, r1
    5b50:	08 94       	sec
    5b52:	08 95       	ret

00005b54 <__fp_zero>:
    5b54:	e8 94       	clt

00005b56 <__fp_szero>:
    5b56:	bb 27       	eor	r27, r27
    5b58:	66 27       	eor	r22, r22
    5b5a:	77 27       	eor	r23, r23
    5b5c:	cb 01       	movw	r24, r22
    5b5e:	97 f9       	bld	r25, 7
    5b60:	08 95       	ret

00005b62 <__gesf2>:
    5b62:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__fp_cmp>
    5b66:	08 f4       	brcc	.+2      	; 0x5b6a <__gesf2+0x8>
    5b68:	8f ef       	ldi	r24, 0xFF	; 255
    5b6a:	08 95       	ret

00005b6c <__mulsf3>:
    5b6c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsf3x>
    5b70:	0c 94 63 2d 	jmp	0x5ac6	; 0x5ac6 <__fp_round>
    5b74:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <__fp_pscA>
    5b78:	38 f0       	brcs	.+14     	; 0x5b88 <__mulsf3+0x1c>
    5b7a:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__fp_pscB>
    5b7e:	20 f0       	brcs	.+8      	; 0x5b88 <__mulsf3+0x1c>
    5b80:	95 23       	and	r25, r21
    5b82:	11 f0       	breq	.+4      	; 0x5b88 <__mulsf3+0x1c>
    5b84:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__fp_inf>
    5b88:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_nan>
    5b8c:	11 24       	eor	r1, r1
    5b8e:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__fp_szero>

00005b92 <__mulsf3x>:
    5b92:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <__fp_split3>
    5b96:	70 f3       	brcs	.-36     	; 0x5b74 <__mulsf3+0x8>

00005b98 <__mulsf3_pse>:
    5b98:	95 9f       	mul	r25, r21
    5b9a:	c1 f3       	breq	.-16     	; 0x5b8c <__mulsf3+0x20>
    5b9c:	95 0f       	add	r25, r21
    5b9e:	50 e0       	ldi	r21, 0x00	; 0
    5ba0:	55 1f       	adc	r21, r21
    5ba2:	62 9f       	mul	r22, r18
    5ba4:	f0 01       	movw	r30, r0
    5ba6:	72 9f       	mul	r23, r18
    5ba8:	bb 27       	eor	r27, r27
    5baa:	f0 0d       	add	r31, r0
    5bac:	b1 1d       	adc	r27, r1
    5bae:	63 9f       	mul	r22, r19
    5bb0:	aa 27       	eor	r26, r26
    5bb2:	f0 0d       	add	r31, r0
    5bb4:	b1 1d       	adc	r27, r1
    5bb6:	aa 1f       	adc	r26, r26
    5bb8:	64 9f       	mul	r22, r20
    5bba:	66 27       	eor	r22, r22
    5bbc:	b0 0d       	add	r27, r0
    5bbe:	a1 1d       	adc	r26, r1
    5bc0:	66 1f       	adc	r22, r22
    5bc2:	82 9f       	mul	r24, r18
    5bc4:	22 27       	eor	r18, r18
    5bc6:	b0 0d       	add	r27, r0
    5bc8:	a1 1d       	adc	r26, r1
    5bca:	62 1f       	adc	r22, r18
    5bcc:	73 9f       	mul	r23, r19
    5bce:	b0 0d       	add	r27, r0
    5bd0:	a1 1d       	adc	r26, r1
    5bd2:	62 1f       	adc	r22, r18
    5bd4:	83 9f       	mul	r24, r19
    5bd6:	a0 0d       	add	r26, r0
    5bd8:	61 1d       	adc	r22, r1
    5bda:	22 1f       	adc	r18, r18
    5bdc:	74 9f       	mul	r23, r20
    5bde:	33 27       	eor	r19, r19
    5be0:	a0 0d       	add	r26, r0
    5be2:	61 1d       	adc	r22, r1
    5be4:	23 1f       	adc	r18, r19
    5be6:	84 9f       	mul	r24, r20
    5be8:	60 0d       	add	r22, r0
    5bea:	21 1d       	adc	r18, r1
    5bec:	82 2f       	mov	r24, r18
    5bee:	76 2f       	mov	r23, r22
    5bf0:	6a 2f       	mov	r22, r26
    5bf2:	11 24       	eor	r1, r1
    5bf4:	9f 57       	subi	r25, 0x7F	; 127
    5bf6:	50 40       	sbci	r21, 0x00	; 0
    5bf8:	9a f0       	brmi	.+38     	; 0x5c20 <__mulsf3_pse+0x88>
    5bfa:	f1 f0       	breq	.+60     	; 0x5c38 <__mulsf3_pse+0xa0>
    5bfc:	88 23       	and	r24, r24
    5bfe:	4a f0       	brmi	.+18     	; 0x5c12 <__mulsf3_pse+0x7a>
    5c00:	ee 0f       	add	r30, r30
    5c02:	ff 1f       	adc	r31, r31
    5c04:	bb 1f       	adc	r27, r27
    5c06:	66 1f       	adc	r22, r22
    5c08:	77 1f       	adc	r23, r23
    5c0a:	88 1f       	adc	r24, r24
    5c0c:	91 50       	subi	r25, 0x01	; 1
    5c0e:	50 40       	sbci	r21, 0x00	; 0
    5c10:	a9 f7       	brne	.-22     	; 0x5bfc <__mulsf3_pse+0x64>
    5c12:	9e 3f       	cpi	r25, 0xFE	; 254
    5c14:	51 05       	cpc	r21, r1
    5c16:	80 f0       	brcs	.+32     	; 0x5c38 <__mulsf3_pse+0xa0>
    5c18:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__fp_inf>
    5c1c:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__fp_szero>
    5c20:	5f 3f       	cpi	r21, 0xFF	; 255
    5c22:	e4 f3       	brlt	.-8      	; 0x5c1c <__mulsf3_pse+0x84>
    5c24:	98 3e       	cpi	r25, 0xE8	; 232
    5c26:	d4 f3       	brlt	.-12     	; 0x5c1c <__mulsf3_pse+0x84>
    5c28:	86 95       	lsr	r24
    5c2a:	77 95       	ror	r23
    5c2c:	67 95       	ror	r22
    5c2e:	b7 95       	ror	r27
    5c30:	f7 95       	ror	r31
    5c32:	e7 95       	ror	r30
    5c34:	9f 5f       	subi	r25, 0xFF	; 255
    5c36:	c1 f7       	brne	.-16     	; 0x5c28 <__mulsf3_pse+0x90>
    5c38:	fe 2b       	or	r31, r30
    5c3a:	88 0f       	add	r24, r24
    5c3c:	91 1d       	adc	r25, r1
    5c3e:	96 95       	lsr	r25
    5c40:	87 95       	ror	r24
    5c42:	97 f9       	bld	r25, 7
    5c44:	08 95       	ret

00005c46 <round>:
    5c46:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <__fp_splitA>
    5c4a:	e8 f0       	brcs	.+58     	; 0x5c86 <round+0x40>
    5c4c:	9e 37       	cpi	r25, 0x7E	; 126
    5c4e:	e8 f0       	brcs	.+58     	; 0x5c8a <round+0x44>
    5c50:	96 39       	cpi	r25, 0x96	; 150
    5c52:	b8 f4       	brcc	.+46     	; 0x5c82 <round+0x3c>
    5c54:	9e 38       	cpi	r25, 0x8E	; 142
    5c56:	48 f4       	brcc	.+18     	; 0x5c6a <round+0x24>
    5c58:	67 2f       	mov	r22, r23
    5c5a:	78 2f       	mov	r23, r24
    5c5c:	88 27       	eor	r24, r24
    5c5e:	98 5f       	subi	r25, 0xF8	; 248
    5c60:	f9 cf       	rjmp	.-14     	; 0x5c54 <round+0xe>
    5c62:	86 95       	lsr	r24
    5c64:	77 95       	ror	r23
    5c66:	67 95       	ror	r22
    5c68:	93 95       	inc	r25
    5c6a:	95 39       	cpi	r25, 0x95	; 149
    5c6c:	d0 f3       	brcs	.-12     	; 0x5c62 <round+0x1c>
    5c6e:	b6 2f       	mov	r27, r22
    5c70:	b1 70       	andi	r27, 0x01	; 1
    5c72:	6b 0f       	add	r22, r27
    5c74:	71 1d       	adc	r23, r1
    5c76:	81 1d       	adc	r24, r1
    5c78:	20 f4       	brcc	.+8      	; 0x5c82 <round+0x3c>
    5c7a:	87 95       	ror	r24
    5c7c:	77 95       	ror	r23
    5c7e:	67 95       	ror	r22
    5c80:	93 95       	inc	r25
    5c82:	0c 94 47 2e 	jmp	0x5c8e	; 0x5c8e <__fp_mintl>
    5c86:	0c 94 62 2e 	jmp	0x5cc4	; 0x5cc4 <__fp_mpack>
    5c8a:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <__fp_szero>

00005c8e <__fp_mintl>:
    5c8e:	88 23       	and	r24, r24
    5c90:	71 f4       	brne	.+28     	; 0x5cae <__fp_mintl+0x20>
    5c92:	77 23       	and	r23, r23
    5c94:	21 f0       	breq	.+8      	; 0x5c9e <__fp_mintl+0x10>
    5c96:	98 50       	subi	r25, 0x08	; 8
    5c98:	87 2b       	or	r24, r23
    5c9a:	76 2f       	mov	r23, r22
    5c9c:	07 c0       	rjmp	.+14     	; 0x5cac <__fp_mintl+0x1e>
    5c9e:	66 23       	and	r22, r22
    5ca0:	11 f4       	brne	.+4      	; 0x5ca6 <__fp_mintl+0x18>
    5ca2:	99 27       	eor	r25, r25
    5ca4:	0d c0       	rjmp	.+26     	; 0x5cc0 <__fp_mintl+0x32>
    5ca6:	90 51       	subi	r25, 0x10	; 16
    5ca8:	86 2b       	or	r24, r22
    5caa:	70 e0       	ldi	r23, 0x00	; 0
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	2a f0       	brmi	.+10     	; 0x5cba <__fp_mintl+0x2c>
    5cb0:	9a 95       	dec	r25
    5cb2:	66 0f       	add	r22, r22
    5cb4:	77 1f       	adc	r23, r23
    5cb6:	88 1f       	adc	r24, r24
    5cb8:	da f7       	brpl	.-10     	; 0x5cb0 <__fp_mintl+0x22>
    5cba:	88 0f       	add	r24, r24
    5cbc:	96 95       	lsr	r25
    5cbe:	87 95       	ror	r24
    5cc0:	97 f9       	bld	r25, 7
    5cc2:	08 95       	ret

00005cc4 <__fp_mpack>:
    5cc4:	9f 3f       	cpi	r25, 0xFF	; 255
    5cc6:	31 f0       	breq	.+12     	; 0x5cd4 <__fp_mpack_finite+0xc>

00005cc8 <__fp_mpack_finite>:
    5cc8:	91 50       	subi	r25, 0x01	; 1
    5cca:	20 f4       	brcc	.+8      	; 0x5cd4 <__fp_mpack_finite+0xc>
    5ccc:	87 95       	ror	r24
    5cce:	77 95       	ror	r23
    5cd0:	67 95       	ror	r22
    5cd2:	b7 95       	ror	r27
    5cd4:	88 0f       	add	r24, r24
    5cd6:	91 1d       	adc	r25, r1
    5cd8:	96 95       	lsr	r25
    5cda:	87 95       	ror	r24
    5cdc:	97 f9       	bld	r25, 7
    5cde:	08 95       	ret

00005ce0 <__fp_powsodd>:
    5ce0:	9f 93       	push	r25
    5ce2:	8f 93       	push	r24
    5ce4:	7f 93       	push	r23
    5ce6:	6f 93       	push	r22
    5ce8:	ff 93       	push	r31
    5cea:	ef 93       	push	r30
    5cec:	9b 01       	movw	r18, r22
    5cee:	ac 01       	movw	r20, r24
    5cf0:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__mulsf3>
    5cf4:	ef 91       	pop	r30
    5cf6:	ff 91       	pop	r31
    5cf8:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__fp_powser>
    5cfc:	2f 91       	pop	r18
    5cfe:	3f 91       	pop	r19
    5d00:	4f 91       	pop	r20
    5d02:	5f 91       	pop	r21
    5d04:	0c 94 b6 2d 	jmp	0x5b6c	; 0x5b6c <__mulsf3>

00005d08 <__fp_powser>:
    5d08:	df 93       	push	r29
    5d0a:	cf 93       	push	r28
    5d0c:	1f 93       	push	r17
    5d0e:	0f 93       	push	r16
    5d10:	ff 92       	push	r15
    5d12:	ef 92       	push	r14
    5d14:	df 92       	push	r13
    5d16:	7b 01       	movw	r14, r22
    5d18:	8c 01       	movw	r16, r24
    5d1a:	68 94       	set
    5d1c:	06 c0       	rjmp	.+12     	; 0x5d2a <__fp_powser+0x22>
    5d1e:	da 2e       	mov	r13, r26
    5d20:	ef 01       	movw	r28, r30
    5d22:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsf3x>
    5d26:	fe 01       	movw	r30, r28
    5d28:	e8 94       	clt
    5d2a:	a5 91       	lpm	r26, Z+
    5d2c:	25 91       	lpm	r18, Z+
    5d2e:	35 91       	lpm	r19, Z+
    5d30:	45 91       	lpm	r20, Z+
    5d32:	55 91       	lpm	r21, Z+
    5d34:	a6 f3       	brts	.-24     	; 0x5d1e <__fp_powser+0x16>
    5d36:	ef 01       	movw	r28, r30
    5d38:	0e 94 b9 2b 	call	0x5772	; 0x5772 <__addsf3x>
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	97 01       	movw	r18, r14
    5d40:	a8 01       	movw	r20, r16
    5d42:	da 94       	dec	r13
    5d44:	69 f7       	brne	.-38     	; 0x5d20 <__fp_powser+0x18>
    5d46:	df 90       	pop	r13
    5d48:	ef 90       	pop	r14
    5d4a:	ff 90       	pop	r15
    5d4c:	0f 91       	pop	r16
    5d4e:	1f 91       	pop	r17
    5d50:	cf 91       	pop	r28
    5d52:	df 91       	pop	r29
    5d54:	08 95       	ret

00005d56 <__mulsi3>:
    5d56:	db 01       	movw	r26, r22
    5d58:	8f 93       	push	r24
    5d5a:	9f 93       	push	r25
    5d5c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__muluhisi3>
    5d60:	bf 91       	pop	r27
    5d62:	af 91       	pop	r26
    5d64:	a2 9f       	mul	r26, r18
    5d66:	80 0d       	add	r24, r0
    5d68:	91 1d       	adc	r25, r1
    5d6a:	a3 9f       	mul	r26, r19
    5d6c:	90 0d       	add	r25, r0
    5d6e:	b2 9f       	mul	r27, r18
    5d70:	90 0d       	add	r25, r0
    5d72:	11 24       	eor	r1, r1
    5d74:	08 95       	ret

00005d76 <__udivmodhi4>:
    5d76:	aa 1b       	sub	r26, r26
    5d78:	bb 1b       	sub	r27, r27
    5d7a:	51 e1       	ldi	r21, 0x11	; 17
    5d7c:	07 c0       	rjmp	.+14     	; 0x5d8c <__udivmodhi4_ep>

00005d7e <__udivmodhi4_loop>:
    5d7e:	aa 1f       	adc	r26, r26
    5d80:	bb 1f       	adc	r27, r27
    5d82:	a6 17       	cp	r26, r22
    5d84:	b7 07       	cpc	r27, r23
    5d86:	10 f0       	brcs	.+4      	; 0x5d8c <__udivmodhi4_ep>
    5d88:	a6 1b       	sub	r26, r22
    5d8a:	b7 0b       	sbc	r27, r23

00005d8c <__udivmodhi4_ep>:
    5d8c:	88 1f       	adc	r24, r24
    5d8e:	99 1f       	adc	r25, r25
    5d90:	5a 95       	dec	r21
    5d92:	a9 f7       	brne	.-22     	; 0x5d7e <__udivmodhi4_loop>
    5d94:	80 95       	com	r24
    5d96:	90 95       	com	r25
    5d98:	bc 01       	movw	r22, r24
    5d9a:	cd 01       	movw	r24, r26
    5d9c:	08 95       	ret

00005d9e <__divmodhi4>:
    5d9e:	97 fb       	bst	r25, 7
    5da0:	07 2e       	mov	r0, r23
    5da2:	16 f4       	brtc	.+4      	; 0x5da8 <__divmodhi4+0xa>
    5da4:	00 94       	com	r0
    5da6:	07 d0       	rcall	.+14     	; 0x5db6 <__divmodhi4_neg1>
    5da8:	77 fd       	sbrc	r23, 7
    5daa:	09 d0       	rcall	.+18     	; 0x5dbe <__divmodhi4_neg2>
    5dac:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <__udivmodhi4>
    5db0:	07 fc       	sbrc	r0, 7
    5db2:	05 d0       	rcall	.+10     	; 0x5dbe <__divmodhi4_neg2>
    5db4:	3e f4       	brtc	.+14     	; 0x5dc4 <__divmodhi4_exit>

00005db6 <__divmodhi4_neg1>:
    5db6:	90 95       	com	r25
    5db8:	81 95       	neg	r24
    5dba:	9f 4f       	sbci	r25, 0xFF	; 255
    5dbc:	08 95       	ret

00005dbe <__divmodhi4_neg2>:
    5dbe:	70 95       	com	r23
    5dc0:	61 95       	neg	r22
    5dc2:	7f 4f       	sbci	r23, 0xFF	; 255

00005dc4 <__divmodhi4_exit>:
    5dc4:	08 95       	ret

00005dc6 <__udivmodsi4>:
    5dc6:	a1 e2       	ldi	r26, 0x21	; 33
    5dc8:	1a 2e       	mov	r1, r26
    5dca:	aa 1b       	sub	r26, r26
    5dcc:	bb 1b       	sub	r27, r27
    5dce:	fd 01       	movw	r30, r26
    5dd0:	0d c0       	rjmp	.+26     	; 0x5dec <__udivmodsi4_ep>

00005dd2 <__udivmodsi4_loop>:
    5dd2:	aa 1f       	adc	r26, r26
    5dd4:	bb 1f       	adc	r27, r27
    5dd6:	ee 1f       	adc	r30, r30
    5dd8:	ff 1f       	adc	r31, r31
    5dda:	a2 17       	cp	r26, r18
    5ddc:	b3 07       	cpc	r27, r19
    5dde:	e4 07       	cpc	r30, r20
    5de0:	f5 07       	cpc	r31, r21
    5de2:	20 f0       	brcs	.+8      	; 0x5dec <__udivmodsi4_ep>
    5de4:	a2 1b       	sub	r26, r18
    5de6:	b3 0b       	sbc	r27, r19
    5de8:	e4 0b       	sbc	r30, r20
    5dea:	f5 0b       	sbc	r31, r21

00005dec <__udivmodsi4_ep>:
    5dec:	66 1f       	adc	r22, r22
    5dee:	77 1f       	adc	r23, r23
    5df0:	88 1f       	adc	r24, r24
    5df2:	99 1f       	adc	r25, r25
    5df4:	1a 94       	dec	r1
    5df6:	69 f7       	brne	.-38     	; 0x5dd2 <__udivmodsi4_loop>
    5df8:	60 95       	com	r22
    5dfa:	70 95       	com	r23
    5dfc:	80 95       	com	r24
    5dfe:	90 95       	com	r25
    5e00:	9b 01       	movw	r18, r22
    5e02:	ac 01       	movw	r20, r24
    5e04:	bd 01       	movw	r22, r26
    5e06:	cf 01       	movw	r24, r30
    5e08:	08 95       	ret

00005e0a <__divmodsi4>:
    5e0a:	05 2e       	mov	r0, r21
    5e0c:	97 fb       	bst	r25, 7
    5e0e:	1e f4       	brtc	.+6      	; 0x5e16 <__divmodsi4+0xc>
    5e10:	00 94       	com	r0
    5e12:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__negsi2>
    5e16:	57 fd       	sbrc	r21, 7
    5e18:	07 d0       	rcall	.+14     	; 0x5e28 <__divmodsi4_neg2>
    5e1a:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <__udivmodsi4>
    5e1e:	07 fc       	sbrc	r0, 7
    5e20:	03 d0       	rcall	.+6      	; 0x5e28 <__divmodsi4_neg2>
    5e22:	4e f4       	brtc	.+18     	; 0x5e36 <__divmodsi4_exit>
    5e24:	0c 94 1c 2f 	jmp	0x5e38	; 0x5e38 <__negsi2>

00005e28 <__divmodsi4_neg2>:
    5e28:	50 95       	com	r21
    5e2a:	40 95       	com	r20
    5e2c:	30 95       	com	r19
    5e2e:	21 95       	neg	r18
    5e30:	3f 4f       	sbci	r19, 0xFF	; 255
    5e32:	4f 4f       	sbci	r20, 0xFF	; 255
    5e34:	5f 4f       	sbci	r21, 0xFF	; 255

00005e36 <__divmodsi4_exit>:
    5e36:	08 95       	ret

00005e38 <__negsi2>:
    5e38:	90 95       	com	r25
    5e3a:	80 95       	com	r24
    5e3c:	70 95       	com	r23
    5e3e:	61 95       	neg	r22
    5e40:	7f 4f       	sbci	r23, 0xFF	; 255
    5e42:	8f 4f       	sbci	r24, 0xFF	; 255
    5e44:	9f 4f       	sbci	r25, 0xFF	; 255
    5e46:	08 95       	ret

00005e48 <__tablejump2__>:
    5e48:	ee 0f       	add	r30, r30
    5e4a:	ff 1f       	adc	r31, r31
    5e4c:	05 90       	lpm	r0, Z+
    5e4e:	f4 91       	lpm	r31, Z
    5e50:	e0 2d       	mov	r30, r0
    5e52:	09 94       	ijmp

00005e54 <__umulhisi3>:
    5e54:	a2 9f       	mul	r26, r18
    5e56:	b0 01       	movw	r22, r0
    5e58:	b3 9f       	mul	r27, r19
    5e5a:	c0 01       	movw	r24, r0
    5e5c:	a3 9f       	mul	r26, r19
    5e5e:	70 0d       	add	r23, r0
    5e60:	81 1d       	adc	r24, r1
    5e62:	11 24       	eor	r1, r1
    5e64:	91 1d       	adc	r25, r1
    5e66:	b2 9f       	mul	r27, r18
    5e68:	70 0d       	add	r23, r0
    5e6a:	81 1d       	adc	r24, r1
    5e6c:	11 24       	eor	r1, r1
    5e6e:	91 1d       	adc	r25, r1
    5e70:	08 95       	ret

00005e72 <__usmulhisi3>:
    5e72:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>

00005e76 <__usmulhisi3_tail>:
    5e76:	b7 ff       	sbrs	r27, 7
    5e78:	08 95       	ret
    5e7a:	82 1b       	sub	r24, r18
    5e7c:	93 0b       	sbc	r25, r19
    5e7e:	08 95       	ret

00005e80 <__muluhisi3>:
    5e80:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__umulhisi3>
    5e84:	a5 9f       	mul	r26, r21
    5e86:	90 0d       	add	r25, r0
    5e88:	b4 9f       	mul	r27, r20
    5e8a:	90 0d       	add	r25, r0
    5e8c:	a4 9f       	mul	r26, r20
    5e8e:	80 0d       	add	r24, r0
    5e90:	91 1d       	adc	r25, r1
    5e92:	11 24       	eor	r1, r1
    5e94:	08 95       	ret

00005e96 <__mulshisi3>:
    5e96:	b7 ff       	sbrs	r27, 7
    5e98:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__muluhisi3>

00005e9c <__mulohisi3>:
    5e9c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__muluhisi3>
    5ea0:	82 1b       	sub	r24, r18
    5ea2:	93 0b       	sbc	r25, r19
    5ea4:	08 95       	ret

00005ea6 <malloc>:
    5ea6:	0f 93       	push	r16
    5ea8:	1f 93       	push	r17
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	82 30       	cpi	r24, 0x02	; 2
    5eb0:	91 05       	cpc	r25, r1
    5eb2:	10 f4       	brcc	.+4      	; 0x5eb8 <malloc+0x12>
    5eb4:	82 e0       	ldi	r24, 0x02	; 2
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <__flp>
    5ebc:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <__flp+0x1>
    5ec0:	20 e0       	ldi	r18, 0x00	; 0
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	a0 e0       	ldi	r26, 0x00	; 0
    5ec6:	b0 e0       	ldi	r27, 0x00	; 0
    5ec8:	30 97       	sbiw	r30, 0x00	; 0
    5eca:	19 f1       	breq	.+70     	; 0x5f12 <malloc+0x6c>
    5ecc:	40 81       	ld	r20, Z
    5ece:	51 81       	ldd	r21, Z+1	; 0x01
    5ed0:	02 81       	ldd	r16, Z+2	; 0x02
    5ed2:	13 81       	ldd	r17, Z+3	; 0x03
    5ed4:	48 17       	cp	r20, r24
    5ed6:	59 07       	cpc	r21, r25
    5ed8:	c8 f0       	brcs	.+50     	; 0x5f0c <malloc+0x66>
    5eda:	84 17       	cp	r24, r20
    5edc:	95 07       	cpc	r25, r21
    5ede:	69 f4       	brne	.+26     	; 0x5efa <malloc+0x54>
    5ee0:	10 97       	sbiw	r26, 0x00	; 0
    5ee2:	31 f0       	breq	.+12     	; 0x5ef0 <malloc+0x4a>
    5ee4:	12 96       	adiw	r26, 0x02	; 2
    5ee6:	0c 93       	st	X, r16
    5ee8:	12 97       	sbiw	r26, 0x02	; 2
    5eea:	13 96       	adiw	r26, 0x03	; 3
    5eec:	1c 93       	st	X, r17
    5eee:	27 c0       	rjmp	.+78     	; 0x5f3e <malloc+0x98>
    5ef0:	00 93 ac 05 	sts	0x05AC, r16	; 0x8005ac <__flp>
    5ef4:	10 93 ad 05 	sts	0x05AD, r17	; 0x8005ad <__flp+0x1>
    5ef8:	22 c0       	rjmp	.+68     	; 0x5f3e <malloc+0x98>
    5efa:	21 15       	cp	r18, r1
    5efc:	31 05       	cpc	r19, r1
    5efe:	19 f0       	breq	.+6      	; 0x5f06 <malloc+0x60>
    5f00:	42 17       	cp	r20, r18
    5f02:	53 07       	cpc	r21, r19
    5f04:	18 f4       	brcc	.+6      	; 0x5f0c <malloc+0x66>
    5f06:	9a 01       	movw	r18, r20
    5f08:	bd 01       	movw	r22, r26
    5f0a:	ef 01       	movw	r28, r30
    5f0c:	df 01       	movw	r26, r30
    5f0e:	f8 01       	movw	r30, r16
    5f10:	db cf       	rjmp	.-74     	; 0x5ec8 <malloc+0x22>
    5f12:	21 15       	cp	r18, r1
    5f14:	31 05       	cpc	r19, r1
    5f16:	f9 f0       	breq	.+62     	; 0x5f56 <malloc+0xb0>
    5f18:	28 1b       	sub	r18, r24
    5f1a:	39 0b       	sbc	r19, r25
    5f1c:	24 30       	cpi	r18, 0x04	; 4
    5f1e:	31 05       	cpc	r19, r1
    5f20:	80 f4       	brcc	.+32     	; 0x5f42 <malloc+0x9c>
    5f22:	8a 81       	ldd	r24, Y+2	; 0x02
    5f24:	9b 81       	ldd	r25, Y+3	; 0x03
    5f26:	61 15       	cp	r22, r1
    5f28:	71 05       	cpc	r23, r1
    5f2a:	21 f0       	breq	.+8      	; 0x5f34 <malloc+0x8e>
    5f2c:	fb 01       	movw	r30, r22
    5f2e:	93 83       	std	Z+3, r25	; 0x03
    5f30:	82 83       	std	Z+2, r24	; 0x02
    5f32:	04 c0       	rjmp	.+8      	; 0x5f3c <malloc+0x96>
    5f34:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <__flp+0x1>
    5f38:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <__flp>
    5f3c:	fe 01       	movw	r30, r28
    5f3e:	32 96       	adiw	r30, 0x02	; 2
    5f40:	44 c0       	rjmp	.+136    	; 0x5fca <malloc+0x124>
    5f42:	fe 01       	movw	r30, r28
    5f44:	e2 0f       	add	r30, r18
    5f46:	f3 1f       	adc	r31, r19
    5f48:	81 93       	st	Z+, r24
    5f4a:	91 93       	st	Z+, r25
    5f4c:	22 50       	subi	r18, 0x02	; 2
    5f4e:	31 09       	sbc	r19, r1
    5f50:	39 83       	std	Y+1, r19	; 0x01
    5f52:	28 83       	st	Y, r18
    5f54:	3a c0       	rjmp	.+116    	; 0x5fca <malloc+0x124>
    5f56:	20 91 aa 05 	lds	r18, 0x05AA	; 0x8005aa <__brkval>
    5f5a:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <__brkval+0x1>
    5f5e:	23 2b       	or	r18, r19
    5f60:	41 f4       	brne	.+16     	; 0x5f72 <malloc+0xcc>
    5f62:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5f66:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5f6a:	30 93 ab 05 	sts	0x05AB, r19	; 0x8005ab <__brkval+0x1>
    5f6e:	20 93 aa 05 	sts	0x05AA, r18	; 0x8005aa <__brkval>
    5f72:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5f76:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5f7a:	21 15       	cp	r18, r1
    5f7c:	31 05       	cpc	r19, r1
    5f7e:	41 f4       	brne	.+16     	; 0x5f90 <malloc+0xea>
    5f80:	2d b7       	in	r18, 0x3d	; 61
    5f82:	3e b7       	in	r19, 0x3e	; 62
    5f84:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5f88:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5f8c:	24 1b       	sub	r18, r20
    5f8e:	35 0b       	sbc	r19, r21
    5f90:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <__brkval>
    5f94:	f0 91 ab 05 	lds	r31, 0x05AB	; 0x8005ab <__brkval+0x1>
    5f98:	e2 17       	cp	r30, r18
    5f9a:	f3 07       	cpc	r31, r19
    5f9c:	a0 f4       	brcc	.+40     	; 0x5fc6 <malloc+0x120>
    5f9e:	2e 1b       	sub	r18, r30
    5fa0:	3f 0b       	sbc	r19, r31
    5fa2:	28 17       	cp	r18, r24
    5fa4:	39 07       	cpc	r19, r25
    5fa6:	78 f0       	brcs	.+30     	; 0x5fc6 <malloc+0x120>
    5fa8:	ac 01       	movw	r20, r24
    5faa:	4e 5f       	subi	r20, 0xFE	; 254
    5fac:	5f 4f       	sbci	r21, 0xFF	; 255
    5fae:	24 17       	cp	r18, r20
    5fb0:	35 07       	cpc	r19, r21
    5fb2:	48 f0       	brcs	.+18     	; 0x5fc6 <malloc+0x120>
    5fb4:	4e 0f       	add	r20, r30
    5fb6:	5f 1f       	adc	r21, r31
    5fb8:	50 93 ab 05 	sts	0x05AB, r21	; 0x8005ab <__brkval+0x1>
    5fbc:	40 93 aa 05 	sts	0x05AA, r20	; 0x8005aa <__brkval>
    5fc0:	81 93       	st	Z+, r24
    5fc2:	91 93       	st	Z+, r25
    5fc4:	02 c0       	rjmp	.+4      	; 0x5fca <malloc+0x124>
    5fc6:	e0 e0       	ldi	r30, 0x00	; 0
    5fc8:	f0 e0       	ldi	r31, 0x00	; 0
    5fca:	cf 01       	movw	r24, r30
    5fcc:	df 91       	pop	r29
    5fce:	cf 91       	pop	r28
    5fd0:	1f 91       	pop	r17
    5fd2:	0f 91       	pop	r16
    5fd4:	08 95       	ret

00005fd6 <free>:
    5fd6:	cf 93       	push	r28
    5fd8:	df 93       	push	r29
    5fda:	00 97       	sbiw	r24, 0x00	; 0
    5fdc:	09 f4       	brne	.+2      	; 0x5fe0 <free+0xa>
    5fde:	81 c0       	rjmp	.+258    	; 0x60e2 <free+0x10c>
    5fe0:	fc 01       	movw	r30, r24
    5fe2:	32 97       	sbiw	r30, 0x02	; 2
    5fe4:	13 82       	std	Z+3, r1	; 0x03
    5fe6:	12 82       	std	Z+2, r1	; 0x02
    5fe8:	a0 91 ac 05 	lds	r26, 0x05AC	; 0x8005ac <__flp>
    5fec:	b0 91 ad 05 	lds	r27, 0x05AD	; 0x8005ad <__flp+0x1>
    5ff0:	10 97       	sbiw	r26, 0x00	; 0
    5ff2:	81 f4       	brne	.+32     	; 0x6014 <free+0x3e>
    5ff4:	20 81       	ld	r18, Z
    5ff6:	31 81       	ldd	r19, Z+1	; 0x01
    5ff8:	82 0f       	add	r24, r18
    5ffa:	93 1f       	adc	r25, r19
    5ffc:	20 91 aa 05 	lds	r18, 0x05AA	; 0x8005aa <__brkval>
    6000:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <__brkval+0x1>
    6004:	28 17       	cp	r18, r24
    6006:	39 07       	cpc	r19, r25
    6008:	51 f5       	brne	.+84     	; 0x605e <free+0x88>
    600a:	f0 93 ab 05 	sts	0x05AB, r31	; 0x8005ab <__brkval+0x1>
    600e:	e0 93 aa 05 	sts	0x05AA, r30	; 0x8005aa <__brkval>
    6012:	67 c0       	rjmp	.+206    	; 0x60e2 <free+0x10c>
    6014:	ed 01       	movw	r28, r26
    6016:	20 e0       	ldi	r18, 0x00	; 0
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	ce 17       	cp	r28, r30
    601c:	df 07       	cpc	r29, r31
    601e:	40 f4       	brcc	.+16     	; 0x6030 <free+0x5a>
    6020:	4a 81       	ldd	r20, Y+2	; 0x02
    6022:	5b 81       	ldd	r21, Y+3	; 0x03
    6024:	9e 01       	movw	r18, r28
    6026:	41 15       	cp	r20, r1
    6028:	51 05       	cpc	r21, r1
    602a:	f1 f0       	breq	.+60     	; 0x6068 <free+0x92>
    602c:	ea 01       	movw	r28, r20
    602e:	f5 cf       	rjmp	.-22     	; 0x601a <free+0x44>
    6030:	d3 83       	std	Z+3, r29	; 0x03
    6032:	c2 83       	std	Z+2, r28	; 0x02
    6034:	40 81       	ld	r20, Z
    6036:	51 81       	ldd	r21, Z+1	; 0x01
    6038:	84 0f       	add	r24, r20
    603a:	95 1f       	adc	r25, r21
    603c:	c8 17       	cp	r28, r24
    603e:	d9 07       	cpc	r29, r25
    6040:	59 f4       	brne	.+22     	; 0x6058 <free+0x82>
    6042:	88 81       	ld	r24, Y
    6044:	99 81       	ldd	r25, Y+1	; 0x01
    6046:	84 0f       	add	r24, r20
    6048:	95 1f       	adc	r25, r21
    604a:	02 96       	adiw	r24, 0x02	; 2
    604c:	91 83       	std	Z+1, r25	; 0x01
    604e:	80 83       	st	Z, r24
    6050:	8a 81       	ldd	r24, Y+2	; 0x02
    6052:	9b 81       	ldd	r25, Y+3	; 0x03
    6054:	93 83       	std	Z+3, r25	; 0x03
    6056:	82 83       	std	Z+2, r24	; 0x02
    6058:	21 15       	cp	r18, r1
    605a:	31 05       	cpc	r19, r1
    605c:	29 f4       	brne	.+10     	; 0x6068 <free+0x92>
    605e:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__flp+0x1>
    6062:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__flp>
    6066:	3d c0       	rjmp	.+122    	; 0x60e2 <free+0x10c>
    6068:	e9 01       	movw	r28, r18
    606a:	fb 83       	std	Y+3, r31	; 0x03
    606c:	ea 83       	std	Y+2, r30	; 0x02
    606e:	49 91       	ld	r20, Y+
    6070:	59 91       	ld	r21, Y+
    6072:	c4 0f       	add	r28, r20
    6074:	d5 1f       	adc	r29, r21
    6076:	ec 17       	cp	r30, r28
    6078:	fd 07       	cpc	r31, r29
    607a:	61 f4       	brne	.+24     	; 0x6094 <free+0xbe>
    607c:	80 81       	ld	r24, Z
    607e:	91 81       	ldd	r25, Z+1	; 0x01
    6080:	84 0f       	add	r24, r20
    6082:	95 1f       	adc	r25, r21
    6084:	02 96       	adiw	r24, 0x02	; 2
    6086:	e9 01       	movw	r28, r18
    6088:	99 83       	std	Y+1, r25	; 0x01
    608a:	88 83       	st	Y, r24
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	93 81       	ldd	r25, Z+3	; 0x03
    6090:	9b 83       	std	Y+3, r25	; 0x03
    6092:	8a 83       	std	Y+2, r24	; 0x02
    6094:	e0 e0       	ldi	r30, 0x00	; 0
    6096:	f0 e0       	ldi	r31, 0x00	; 0
    6098:	12 96       	adiw	r26, 0x02	; 2
    609a:	8d 91       	ld	r24, X+
    609c:	9c 91       	ld	r25, X
    609e:	13 97       	sbiw	r26, 0x03	; 3
    60a0:	00 97       	sbiw	r24, 0x00	; 0
    60a2:	19 f0       	breq	.+6      	; 0x60aa <free+0xd4>
    60a4:	fd 01       	movw	r30, r26
    60a6:	dc 01       	movw	r26, r24
    60a8:	f7 cf       	rjmp	.-18     	; 0x6098 <free+0xc2>
    60aa:	8d 91       	ld	r24, X+
    60ac:	9c 91       	ld	r25, X
    60ae:	11 97       	sbiw	r26, 0x01	; 1
    60b0:	9d 01       	movw	r18, r26
    60b2:	2e 5f       	subi	r18, 0xFE	; 254
    60b4:	3f 4f       	sbci	r19, 0xFF	; 255
    60b6:	82 0f       	add	r24, r18
    60b8:	93 1f       	adc	r25, r19
    60ba:	20 91 aa 05 	lds	r18, 0x05AA	; 0x8005aa <__brkval>
    60be:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <__brkval+0x1>
    60c2:	28 17       	cp	r18, r24
    60c4:	39 07       	cpc	r19, r25
    60c6:	69 f4       	brne	.+26     	; 0x60e2 <free+0x10c>
    60c8:	30 97       	sbiw	r30, 0x00	; 0
    60ca:	29 f4       	brne	.+10     	; 0x60d6 <free+0x100>
    60cc:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <__flp+0x1>
    60d0:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <__flp>
    60d4:	02 c0       	rjmp	.+4      	; 0x60da <free+0x104>
    60d6:	13 82       	std	Z+3, r1	; 0x03
    60d8:	12 82       	std	Z+2, r1	; 0x02
    60da:	b0 93 ab 05 	sts	0x05AB, r27	; 0x8005ab <__brkval+0x1>
    60de:	a0 93 aa 05 	sts	0x05AA, r26	; 0x8005aa <__brkval>
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

000060e8 <atoi>:
    60e8:	fc 01       	movw	r30, r24
    60ea:	88 27       	eor	r24, r24
    60ec:	99 27       	eor	r25, r25
    60ee:	e8 94       	clt
    60f0:	21 91       	ld	r18, Z+
    60f2:	20 32       	cpi	r18, 0x20	; 32
    60f4:	e9 f3       	breq	.-6      	; 0x60f0 <atoi+0x8>
    60f6:	29 30       	cpi	r18, 0x09	; 9
    60f8:	10 f0       	brcs	.+4      	; 0x60fe <atoi+0x16>
    60fa:	2e 30       	cpi	r18, 0x0E	; 14
    60fc:	c8 f3       	brcs	.-14     	; 0x60f0 <atoi+0x8>
    60fe:	2b 32       	cpi	r18, 0x2B	; 43
    6100:	41 f0       	breq	.+16     	; 0x6112 <atoi+0x2a>
    6102:	2d 32       	cpi	r18, 0x2D	; 45
    6104:	39 f4       	brne	.+14     	; 0x6114 <atoi+0x2c>
    6106:	68 94       	set
    6108:	04 c0       	rjmp	.+8      	; 0x6112 <atoi+0x2a>
    610a:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__mulhi_const_10>
    610e:	82 0f       	add	r24, r18
    6110:	91 1d       	adc	r25, r1
    6112:	21 91       	ld	r18, Z+
    6114:	20 53       	subi	r18, 0x30	; 48
    6116:	2a 30       	cpi	r18, 0x0A	; 10
    6118:	c0 f3       	brcs	.-16     	; 0x610a <atoi+0x22>
    611a:	1e f4       	brtc	.+6      	; 0x6122 <atoi+0x3a>
    611c:	90 95       	com	r25
    611e:	81 95       	neg	r24
    6120:	9f 4f       	sbci	r25, 0xFF	; 255
    6122:	08 95       	ret

00006124 <atol>:
    6124:	1f 93       	push	r17
    6126:	fc 01       	movw	r30, r24
    6128:	99 27       	eor	r25, r25
    612a:	88 27       	eor	r24, r24
    612c:	bc 01       	movw	r22, r24
    612e:	e8 94       	clt
    6130:	11 91       	ld	r17, Z+
    6132:	10 32       	cpi	r17, 0x20	; 32
    6134:	e9 f3       	breq	.-6      	; 0x6130 <atol+0xc>
    6136:	19 30       	cpi	r17, 0x09	; 9
    6138:	10 f0       	brcs	.+4      	; 0x613e <atol+0x1a>
    613a:	1e 30       	cpi	r17, 0x0E	; 14
    613c:	c8 f3       	brcs	.-14     	; 0x6130 <atol+0xc>
    613e:	1b 32       	cpi	r17, 0x2B	; 43
    6140:	51 f0       	breq	.+20     	; 0x6156 <atol+0x32>
    6142:	1d 32       	cpi	r17, 0x2D	; 45
    6144:	49 f4       	brne	.+18     	; 0x6158 <atol+0x34>
    6146:	68 94       	set
    6148:	06 c0       	rjmp	.+12     	; 0x6156 <atol+0x32>
    614a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi_const_10>
    614e:	61 0f       	add	r22, r17
    6150:	71 1d       	adc	r23, r1
    6152:	81 1d       	adc	r24, r1
    6154:	91 1d       	adc	r25, r1
    6156:	11 91       	ld	r17, Z+
    6158:	10 53       	subi	r17, 0x30	; 48
    615a:	1a 30       	cpi	r17, 0x0A	; 10
    615c:	b0 f3       	brcs	.-20     	; 0x614a <atol+0x26>
    615e:	3e f4       	brtc	.+14     	; 0x616e <atol+0x4a>
    6160:	90 95       	com	r25
    6162:	80 95       	com	r24
    6164:	70 95       	com	r23
    6166:	61 95       	neg	r22
    6168:	7f 4f       	sbci	r23, 0xFF	; 255
    616a:	8f 4f       	sbci	r24, 0xFF	; 255
    616c:	9f 4f       	sbci	r25, 0xFF	; 255
    616e:	1f 91       	pop	r17
    6170:	08 95       	ret

00006172 <toupper>:
    6172:	91 11       	cpse	r25, r1
    6174:	08 95       	ret
    6176:	81 56       	subi	r24, 0x61	; 97
    6178:	8a 51       	subi	r24, 0x1A	; 26
    617a:	08 f4       	brcc	.+2      	; 0x617e <toupper+0xc>
    617c:	80 52       	subi	r24, 0x20	; 32
    617e:	85 58       	subi	r24, 0x85	; 133
    6180:	08 95       	ret

00006182 <strcat>:
    6182:	fb 01       	movw	r30, r22
    6184:	dc 01       	movw	r26, r24
    6186:	0d 90       	ld	r0, X+
    6188:	00 20       	and	r0, r0
    618a:	e9 f7       	brne	.-6      	; 0x6186 <strcat+0x4>
    618c:	11 97       	sbiw	r26, 0x01	; 1
    618e:	01 90       	ld	r0, Z+
    6190:	0d 92       	st	X+, r0
    6192:	00 20       	and	r0, r0
    6194:	e1 f7       	brne	.-8      	; 0x618e <strcat+0xc>
    6196:	08 95       	ret

00006198 <strcpy>:
    6198:	fb 01       	movw	r30, r22
    619a:	dc 01       	movw	r26, r24
    619c:	01 90       	ld	r0, Z+
    619e:	0d 92       	st	X+, r0
    61a0:	00 20       	and	r0, r0
    61a2:	e1 f7       	brne	.-8      	; 0x619c <strcpy+0x4>
    61a4:	08 95       	ret

000061a6 <strncpy>:
    61a6:	fb 01       	movw	r30, r22
    61a8:	dc 01       	movw	r26, r24
    61aa:	41 50       	subi	r20, 0x01	; 1
    61ac:	50 40       	sbci	r21, 0x00	; 0
    61ae:	48 f0       	brcs	.+18     	; 0x61c2 <strncpy+0x1c>
    61b0:	01 90       	ld	r0, Z+
    61b2:	0d 92       	st	X+, r0
    61b4:	00 20       	and	r0, r0
    61b6:	c9 f7       	brne	.-14     	; 0x61aa <strncpy+0x4>
    61b8:	01 c0       	rjmp	.+2      	; 0x61bc <strncpy+0x16>
    61ba:	1d 92       	st	X+, r1
    61bc:	41 50       	subi	r20, 0x01	; 1
    61be:	50 40       	sbci	r21, 0x00	; 0
    61c0:	e0 f7       	brcc	.-8      	; 0x61ba <strncpy+0x14>
    61c2:	08 95       	ret

000061c4 <__mulsi_const_10>:
    61c4:	59 2f       	mov	r21, r25
    61c6:	48 2f       	mov	r20, r24
    61c8:	37 2f       	mov	r19, r23
    61ca:	26 2f       	mov	r18, r22
    61cc:	66 0f       	add	r22, r22
    61ce:	77 1f       	adc	r23, r23
    61d0:	88 1f       	adc	r24, r24
    61d2:	99 1f       	adc	r25, r25
    61d4:	66 0f       	add	r22, r22
    61d6:	77 1f       	adc	r23, r23
    61d8:	88 1f       	adc	r24, r24
    61da:	99 1f       	adc	r25, r25
    61dc:	62 0f       	add	r22, r18
    61de:	73 1f       	adc	r23, r19
    61e0:	84 1f       	adc	r24, r20
    61e2:	95 1f       	adc	r25, r21
    61e4:	66 0f       	add	r22, r22
    61e6:	77 1f       	adc	r23, r23
    61e8:	88 1f       	adc	r24, r24
    61ea:	99 1f       	adc	r25, r25
    61ec:	08 95       	ret

000061ee <__mulhi_const_10>:
    61ee:	7a e0       	ldi	r23, 0x0A	; 10
    61f0:	97 9f       	mul	r25, r23
    61f2:	90 2d       	mov	r25, r0
    61f4:	87 9f       	mul	r24, r23
    61f6:	80 2d       	mov	r24, r0
    61f8:	91 0d       	add	r25, r1
    61fa:	11 24       	eor	r1, r1
    61fc:	08 95       	ret

000061fe <sprintf>:
    61fe:	ae e0       	ldi	r26, 0x0E	; 14
    6200:	b0 e0       	ldi	r27, 0x00	; 0
    6202:	e5 e0       	ldi	r30, 0x05	; 5
    6204:	f1 e3       	ldi	r31, 0x31	; 49
    6206:	0c 94 23 34 	jmp	0x6846	; 0x6846 <__prologue_saves__+0x1c>
    620a:	0d 89       	ldd	r16, Y+21	; 0x15
    620c:	1e 89       	ldd	r17, Y+22	; 0x16
    620e:	86 e0       	ldi	r24, 0x06	; 6
    6210:	8c 83       	std	Y+4, r24	; 0x04
    6212:	1a 83       	std	Y+2, r17	; 0x02
    6214:	09 83       	std	Y+1, r16	; 0x01
    6216:	8f ef       	ldi	r24, 0xFF	; 255
    6218:	9f e7       	ldi	r25, 0x7F	; 127
    621a:	9e 83       	std	Y+6, r25	; 0x06
    621c:	8d 83       	std	Y+5, r24	; 0x05
    621e:	ae 01       	movw	r20, r28
    6220:	47 5e       	subi	r20, 0xE7	; 231
    6222:	5f 4f       	sbci	r21, 0xFF	; 255
    6224:	6f 89       	ldd	r22, Y+23	; 0x17
    6226:	78 8d       	ldd	r23, Y+24	; 0x18
    6228:	ce 01       	movw	r24, r28
    622a:	01 96       	adiw	r24, 0x01	; 1
    622c:	0e 94 21 31 	call	0x6242	; 0x6242 <vfprintf>
    6230:	ef 81       	ldd	r30, Y+7	; 0x07
    6232:	f8 85       	ldd	r31, Y+8	; 0x08
    6234:	e0 0f       	add	r30, r16
    6236:	f1 1f       	adc	r31, r17
    6238:	10 82       	st	Z, r1
    623a:	2e 96       	adiw	r28, 0x0e	; 14
    623c:	e4 e0       	ldi	r30, 0x04	; 4
    623e:	0c 94 3f 34 	jmp	0x687e	; 0x687e <__epilogue_restores__+0x1c>

00006242 <vfprintf>:
    6242:	ab e0       	ldi	r26, 0x0B	; 11
    6244:	b0 e0       	ldi	r27, 0x00	; 0
    6246:	e7 e2       	ldi	r30, 0x27	; 39
    6248:	f1 e3       	ldi	r31, 0x31	; 49
    624a:	0c 94 15 34 	jmp	0x682a	; 0x682a <__prologue_saves__>
    624e:	6c 01       	movw	r12, r24
    6250:	7b 01       	movw	r14, r22
    6252:	8a 01       	movw	r16, r20
    6254:	fc 01       	movw	r30, r24
    6256:	17 82       	std	Z+7, r1	; 0x07
    6258:	16 82       	std	Z+6, r1	; 0x06
    625a:	83 81       	ldd	r24, Z+3	; 0x03
    625c:	81 ff       	sbrs	r24, 1
    625e:	cc c1       	rjmp	.+920    	; 0x65f8 <vfprintf+0x3b6>
    6260:	ce 01       	movw	r24, r28
    6262:	01 96       	adiw	r24, 0x01	; 1
    6264:	3c 01       	movw	r6, r24
    6266:	f6 01       	movw	r30, r12
    6268:	93 81       	ldd	r25, Z+3	; 0x03
    626a:	f7 01       	movw	r30, r14
    626c:	93 fd       	sbrc	r25, 3
    626e:	85 91       	lpm	r24, Z+
    6270:	93 ff       	sbrs	r25, 3
    6272:	81 91       	ld	r24, Z+
    6274:	7f 01       	movw	r14, r30
    6276:	88 23       	and	r24, r24
    6278:	09 f4       	brne	.+2      	; 0x627c <vfprintf+0x3a>
    627a:	ba c1       	rjmp	.+884    	; 0x65f0 <vfprintf+0x3ae>
    627c:	85 32       	cpi	r24, 0x25	; 37
    627e:	39 f4       	brne	.+14     	; 0x628e <vfprintf+0x4c>
    6280:	93 fd       	sbrc	r25, 3
    6282:	85 91       	lpm	r24, Z+
    6284:	93 ff       	sbrs	r25, 3
    6286:	81 91       	ld	r24, Z+
    6288:	7f 01       	movw	r14, r30
    628a:	85 32       	cpi	r24, 0x25	; 37
    628c:	29 f4       	brne	.+10     	; 0x6298 <vfprintf+0x56>
    628e:	b6 01       	movw	r22, r12
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    6296:	e7 cf       	rjmp	.-50     	; 0x6266 <vfprintf+0x24>
    6298:	91 2c       	mov	r9, r1
    629a:	21 2c       	mov	r2, r1
    629c:	31 2c       	mov	r3, r1
    629e:	ff e1       	ldi	r31, 0x1F	; 31
    62a0:	f3 15       	cp	r31, r3
    62a2:	d8 f0       	brcs	.+54     	; 0x62da <vfprintf+0x98>
    62a4:	8b 32       	cpi	r24, 0x2B	; 43
    62a6:	79 f0       	breq	.+30     	; 0x62c6 <vfprintf+0x84>
    62a8:	38 f4       	brcc	.+14     	; 0x62b8 <vfprintf+0x76>
    62aa:	80 32       	cpi	r24, 0x20	; 32
    62ac:	79 f0       	breq	.+30     	; 0x62cc <vfprintf+0x8a>
    62ae:	83 32       	cpi	r24, 0x23	; 35
    62b0:	a1 f4       	brne	.+40     	; 0x62da <vfprintf+0x98>
    62b2:	23 2d       	mov	r18, r3
    62b4:	20 61       	ori	r18, 0x10	; 16
    62b6:	1d c0       	rjmp	.+58     	; 0x62f2 <vfprintf+0xb0>
    62b8:	8d 32       	cpi	r24, 0x2D	; 45
    62ba:	61 f0       	breq	.+24     	; 0x62d4 <vfprintf+0x92>
    62bc:	80 33       	cpi	r24, 0x30	; 48
    62be:	69 f4       	brne	.+26     	; 0x62da <vfprintf+0x98>
    62c0:	23 2d       	mov	r18, r3
    62c2:	21 60       	ori	r18, 0x01	; 1
    62c4:	16 c0       	rjmp	.+44     	; 0x62f2 <vfprintf+0xb0>
    62c6:	83 2d       	mov	r24, r3
    62c8:	82 60       	ori	r24, 0x02	; 2
    62ca:	38 2e       	mov	r3, r24
    62cc:	e3 2d       	mov	r30, r3
    62ce:	e4 60       	ori	r30, 0x04	; 4
    62d0:	3e 2e       	mov	r3, r30
    62d2:	2a c0       	rjmp	.+84     	; 0x6328 <vfprintf+0xe6>
    62d4:	f3 2d       	mov	r31, r3
    62d6:	f8 60       	ori	r31, 0x08	; 8
    62d8:	1d c0       	rjmp	.+58     	; 0x6314 <vfprintf+0xd2>
    62da:	37 fc       	sbrc	r3, 7
    62dc:	2d c0       	rjmp	.+90     	; 0x6338 <vfprintf+0xf6>
    62de:	20 ed       	ldi	r18, 0xD0	; 208
    62e0:	28 0f       	add	r18, r24
    62e2:	2a 30       	cpi	r18, 0x0A	; 10
    62e4:	40 f0       	brcs	.+16     	; 0x62f6 <vfprintf+0xb4>
    62e6:	8e 32       	cpi	r24, 0x2E	; 46
    62e8:	b9 f4       	brne	.+46     	; 0x6318 <vfprintf+0xd6>
    62ea:	36 fc       	sbrc	r3, 6
    62ec:	81 c1       	rjmp	.+770    	; 0x65f0 <vfprintf+0x3ae>
    62ee:	23 2d       	mov	r18, r3
    62f0:	20 64       	ori	r18, 0x40	; 64
    62f2:	32 2e       	mov	r3, r18
    62f4:	19 c0       	rjmp	.+50     	; 0x6328 <vfprintf+0xe6>
    62f6:	36 fe       	sbrs	r3, 6
    62f8:	06 c0       	rjmp	.+12     	; 0x6306 <vfprintf+0xc4>
    62fa:	8a e0       	ldi	r24, 0x0A	; 10
    62fc:	98 9e       	mul	r9, r24
    62fe:	20 0d       	add	r18, r0
    6300:	11 24       	eor	r1, r1
    6302:	92 2e       	mov	r9, r18
    6304:	11 c0       	rjmp	.+34     	; 0x6328 <vfprintf+0xe6>
    6306:	ea e0       	ldi	r30, 0x0A	; 10
    6308:	2e 9e       	mul	r2, r30
    630a:	20 0d       	add	r18, r0
    630c:	11 24       	eor	r1, r1
    630e:	22 2e       	mov	r2, r18
    6310:	f3 2d       	mov	r31, r3
    6312:	f0 62       	ori	r31, 0x20	; 32
    6314:	3f 2e       	mov	r3, r31
    6316:	08 c0       	rjmp	.+16     	; 0x6328 <vfprintf+0xe6>
    6318:	8c 36       	cpi	r24, 0x6C	; 108
    631a:	21 f4       	brne	.+8      	; 0x6324 <vfprintf+0xe2>
    631c:	83 2d       	mov	r24, r3
    631e:	80 68       	ori	r24, 0x80	; 128
    6320:	38 2e       	mov	r3, r24
    6322:	02 c0       	rjmp	.+4      	; 0x6328 <vfprintf+0xe6>
    6324:	88 36       	cpi	r24, 0x68	; 104
    6326:	41 f4       	brne	.+16     	; 0x6338 <vfprintf+0xf6>
    6328:	f7 01       	movw	r30, r14
    632a:	93 fd       	sbrc	r25, 3
    632c:	85 91       	lpm	r24, Z+
    632e:	93 ff       	sbrs	r25, 3
    6330:	81 91       	ld	r24, Z+
    6332:	7f 01       	movw	r14, r30
    6334:	81 11       	cpse	r24, r1
    6336:	b3 cf       	rjmp	.-154    	; 0x629e <vfprintf+0x5c>
    6338:	98 2f       	mov	r25, r24
    633a:	9f 7d       	andi	r25, 0xDF	; 223
    633c:	95 54       	subi	r25, 0x45	; 69
    633e:	93 30       	cpi	r25, 0x03	; 3
    6340:	28 f4       	brcc	.+10     	; 0x634c <vfprintf+0x10a>
    6342:	0c 5f       	subi	r16, 0xFC	; 252
    6344:	1f 4f       	sbci	r17, 0xFF	; 255
    6346:	9f e3       	ldi	r25, 0x3F	; 63
    6348:	99 83       	std	Y+1, r25	; 0x01
    634a:	0d c0       	rjmp	.+26     	; 0x6366 <vfprintf+0x124>
    634c:	83 36       	cpi	r24, 0x63	; 99
    634e:	31 f0       	breq	.+12     	; 0x635c <vfprintf+0x11a>
    6350:	83 37       	cpi	r24, 0x73	; 115
    6352:	71 f0       	breq	.+28     	; 0x6370 <vfprintf+0x12e>
    6354:	83 35       	cpi	r24, 0x53	; 83
    6356:	09 f0       	breq	.+2      	; 0x635a <vfprintf+0x118>
    6358:	59 c0       	rjmp	.+178    	; 0x640c <vfprintf+0x1ca>
    635a:	21 c0       	rjmp	.+66     	; 0x639e <vfprintf+0x15c>
    635c:	f8 01       	movw	r30, r16
    635e:	80 81       	ld	r24, Z
    6360:	89 83       	std	Y+1, r24	; 0x01
    6362:	0e 5f       	subi	r16, 0xFE	; 254
    6364:	1f 4f       	sbci	r17, 0xFF	; 255
    6366:	88 24       	eor	r8, r8
    6368:	83 94       	inc	r8
    636a:	91 2c       	mov	r9, r1
    636c:	53 01       	movw	r10, r6
    636e:	13 c0       	rjmp	.+38     	; 0x6396 <vfprintf+0x154>
    6370:	28 01       	movw	r4, r16
    6372:	f2 e0       	ldi	r31, 0x02	; 2
    6374:	4f 0e       	add	r4, r31
    6376:	51 1c       	adc	r5, r1
    6378:	f8 01       	movw	r30, r16
    637a:	a0 80       	ld	r10, Z
    637c:	b1 80       	ldd	r11, Z+1	; 0x01
    637e:	36 fe       	sbrs	r3, 6
    6380:	03 c0       	rjmp	.+6      	; 0x6388 <vfprintf+0x146>
    6382:	69 2d       	mov	r22, r9
    6384:	70 e0       	ldi	r23, 0x00	; 0
    6386:	02 c0       	rjmp	.+4      	; 0x638c <vfprintf+0x14a>
    6388:	6f ef       	ldi	r22, 0xFF	; 255
    638a:	7f ef       	ldi	r23, 0xFF	; 255
    638c:	c5 01       	movw	r24, r10
    638e:	0e 94 0d 33 	call	0x661a	; 0x661a <strnlen>
    6392:	4c 01       	movw	r8, r24
    6394:	82 01       	movw	r16, r4
    6396:	f3 2d       	mov	r31, r3
    6398:	ff 77       	andi	r31, 0x7F	; 127
    639a:	3f 2e       	mov	r3, r31
    639c:	16 c0       	rjmp	.+44     	; 0x63ca <vfprintf+0x188>
    639e:	28 01       	movw	r4, r16
    63a0:	22 e0       	ldi	r18, 0x02	; 2
    63a2:	42 0e       	add	r4, r18
    63a4:	51 1c       	adc	r5, r1
    63a6:	f8 01       	movw	r30, r16
    63a8:	a0 80       	ld	r10, Z
    63aa:	b1 80       	ldd	r11, Z+1	; 0x01
    63ac:	36 fe       	sbrs	r3, 6
    63ae:	03 c0       	rjmp	.+6      	; 0x63b6 <vfprintf+0x174>
    63b0:	69 2d       	mov	r22, r9
    63b2:	70 e0       	ldi	r23, 0x00	; 0
    63b4:	02 c0       	rjmp	.+4      	; 0x63ba <vfprintf+0x178>
    63b6:	6f ef       	ldi	r22, 0xFF	; 255
    63b8:	7f ef       	ldi	r23, 0xFF	; 255
    63ba:	c5 01       	movw	r24, r10
    63bc:	0e 94 02 33 	call	0x6604	; 0x6604 <strnlen_P>
    63c0:	4c 01       	movw	r8, r24
    63c2:	f3 2d       	mov	r31, r3
    63c4:	f0 68       	ori	r31, 0x80	; 128
    63c6:	3f 2e       	mov	r3, r31
    63c8:	82 01       	movw	r16, r4
    63ca:	33 fc       	sbrc	r3, 3
    63cc:	1b c0       	rjmp	.+54     	; 0x6404 <vfprintf+0x1c2>
    63ce:	82 2d       	mov	r24, r2
    63d0:	90 e0       	ldi	r25, 0x00	; 0
    63d2:	88 16       	cp	r8, r24
    63d4:	99 06       	cpc	r9, r25
    63d6:	b0 f4       	brcc	.+44     	; 0x6404 <vfprintf+0x1c2>
    63d8:	b6 01       	movw	r22, r12
    63da:	80 e2       	ldi	r24, 0x20	; 32
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    63e2:	2a 94       	dec	r2
    63e4:	f4 cf       	rjmp	.-24     	; 0x63ce <vfprintf+0x18c>
    63e6:	f5 01       	movw	r30, r10
    63e8:	37 fc       	sbrc	r3, 7
    63ea:	85 91       	lpm	r24, Z+
    63ec:	37 fe       	sbrs	r3, 7
    63ee:	81 91       	ld	r24, Z+
    63f0:	5f 01       	movw	r10, r30
    63f2:	b6 01       	movw	r22, r12
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    63fa:	21 10       	cpse	r2, r1
    63fc:	2a 94       	dec	r2
    63fe:	21 e0       	ldi	r18, 0x01	; 1
    6400:	82 1a       	sub	r8, r18
    6402:	91 08       	sbc	r9, r1
    6404:	81 14       	cp	r8, r1
    6406:	91 04       	cpc	r9, r1
    6408:	71 f7       	brne	.-36     	; 0x63e6 <vfprintf+0x1a4>
    640a:	e8 c0       	rjmp	.+464    	; 0x65dc <vfprintf+0x39a>
    640c:	84 36       	cpi	r24, 0x64	; 100
    640e:	11 f0       	breq	.+4      	; 0x6414 <vfprintf+0x1d2>
    6410:	89 36       	cpi	r24, 0x69	; 105
    6412:	41 f5       	brne	.+80     	; 0x6464 <vfprintf+0x222>
    6414:	f8 01       	movw	r30, r16
    6416:	37 fe       	sbrs	r3, 7
    6418:	07 c0       	rjmp	.+14     	; 0x6428 <vfprintf+0x1e6>
    641a:	60 81       	ld	r22, Z
    641c:	71 81       	ldd	r23, Z+1	; 0x01
    641e:	82 81       	ldd	r24, Z+2	; 0x02
    6420:	93 81       	ldd	r25, Z+3	; 0x03
    6422:	0c 5f       	subi	r16, 0xFC	; 252
    6424:	1f 4f       	sbci	r17, 0xFF	; 255
    6426:	08 c0       	rjmp	.+16     	; 0x6438 <vfprintf+0x1f6>
    6428:	60 81       	ld	r22, Z
    642a:	71 81       	ldd	r23, Z+1	; 0x01
    642c:	07 2e       	mov	r0, r23
    642e:	00 0c       	add	r0, r0
    6430:	88 0b       	sbc	r24, r24
    6432:	99 0b       	sbc	r25, r25
    6434:	0e 5f       	subi	r16, 0xFE	; 254
    6436:	1f 4f       	sbci	r17, 0xFF	; 255
    6438:	f3 2d       	mov	r31, r3
    643a:	ff 76       	andi	r31, 0x6F	; 111
    643c:	3f 2e       	mov	r3, r31
    643e:	97 ff       	sbrs	r25, 7
    6440:	09 c0       	rjmp	.+18     	; 0x6454 <vfprintf+0x212>
    6442:	90 95       	com	r25
    6444:	80 95       	com	r24
    6446:	70 95       	com	r23
    6448:	61 95       	neg	r22
    644a:	7f 4f       	sbci	r23, 0xFF	; 255
    644c:	8f 4f       	sbci	r24, 0xFF	; 255
    644e:	9f 4f       	sbci	r25, 0xFF	; 255
    6450:	f0 68       	ori	r31, 0x80	; 128
    6452:	3f 2e       	mov	r3, r31
    6454:	2a e0       	ldi	r18, 0x0A	; 10
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	a3 01       	movw	r20, r6
    645a:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__ultoa_invert>
    645e:	88 2e       	mov	r8, r24
    6460:	86 18       	sub	r8, r6
    6462:	45 c0       	rjmp	.+138    	; 0x64ee <vfprintf+0x2ac>
    6464:	85 37       	cpi	r24, 0x75	; 117
    6466:	31 f4       	brne	.+12     	; 0x6474 <vfprintf+0x232>
    6468:	23 2d       	mov	r18, r3
    646a:	2f 7e       	andi	r18, 0xEF	; 239
    646c:	b2 2e       	mov	r11, r18
    646e:	2a e0       	ldi	r18, 0x0A	; 10
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	25 c0       	rjmp	.+74     	; 0x64be <vfprintf+0x27c>
    6474:	93 2d       	mov	r25, r3
    6476:	99 7f       	andi	r25, 0xF9	; 249
    6478:	b9 2e       	mov	r11, r25
    647a:	8f 36       	cpi	r24, 0x6F	; 111
    647c:	c1 f0       	breq	.+48     	; 0x64ae <vfprintf+0x26c>
    647e:	18 f4       	brcc	.+6      	; 0x6486 <vfprintf+0x244>
    6480:	88 35       	cpi	r24, 0x58	; 88
    6482:	79 f0       	breq	.+30     	; 0x64a2 <vfprintf+0x260>
    6484:	b5 c0       	rjmp	.+362    	; 0x65f0 <vfprintf+0x3ae>
    6486:	80 37       	cpi	r24, 0x70	; 112
    6488:	19 f0       	breq	.+6      	; 0x6490 <vfprintf+0x24e>
    648a:	88 37       	cpi	r24, 0x78	; 120
    648c:	21 f0       	breq	.+8      	; 0x6496 <vfprintf+0x254>
    648e:	b0 c0       	rjmp	.+352    	; 0x65f0 <vfprintf+0x3ae>
    6490:	e9 2f       	mov	r30, r25
    6492:	e0 61       	ori	r30, 0x10	; 16
    6494:	be 2e       	mov	r11, r30
    6496:	b4 fe       	sbrs	r11, 4
    6498:	0d c0       	rjmp	.+26     	; 0x64b4 <vfprintf+0x272>
    649a:	fb 2d       	mov	r31, r11
    649c:	f4 60       	ori	r31, 0x04	; 4
    649e:	bf 2e       	mov	r11, r31
    64a0:	09 c0       	rjmp	.+18     	; 0x64b4 <vfprintf+0x272>
    64a2:	34 fe       	sbrs	r3, 4
    64a4:	0a c0       	rjmp	.+20     	; 0x64ba <vfprintf+0x278>
    64a6:	29 2f       	mov	r18, r25
    64a8:	26 60       	ori	r18, 0x06	; 6
    64aa:	b2 2e       	mov	r11, r18
    64ac:	06 c0       	rjmp	.+12     	; 0x64ba <vfprintf+0x278>
    64ae:	28 e0       	ldi	r18, 0x08	; 8
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	05 c0       	rjmp	.+10     	; 0x64be <vfprintf+0x27c>
    64b4:	20 e1       	ldi	r18, 0x10	; 16
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	02 c0       	rjmp	.+4      	; 0x64be <vfprintf+0x27c>
    64ba:	20 e1       	ldi	r18, 0x10	; 16
    64bc:	32 e0       	ldi	r19, 0x02	; 2
    64be:	f8 01       	movw	r30, r16
    64c0:	b7 fe       	sbrs	r11, 7
    64c2:	07 c0       	rjmp	.+14     	; 0x64d2 <vfprintf+0x290>
    64c4:	60 81       	ld	r22, Z
    64c6:	71 81       	ldd	r23, Z+1	; 0x01
    64c8:	82 81       	ldd	r24, Z+2	; 0x02
    64ca:	93 81       	ldd	r25, Z+3	; 0x03
    64cc:	0c 5f       	subi	r16, 0xFC	; 252
    64ce:	1f 4f       	sbci	r17, 0xFF	; 255
    64d0:	06 c0       	rjmp	.+12     	; 0x64de <vfprintf+0x29c>
    64d2:	60 81       	ld	r22, Z
    64d4:	71 81       	ldd	r23, Z+1	; 0x01
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	0e 5f       	subi	r16, 0xFE	; 254
    64dc:	1f 4f       	sbci	r17, 0xFF	; 255
    64de:	a3 01       	movw	r20, r6
    64e0:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__ultoa_invert>
    64e4:	88 2e       	mov	r8, r24
    64e6:	86 18       	sub	r8, r6
    64e8:	fb 2d       	mov	r31, r11
    64ea:	ff 77       	andi	r31, 0x7F	; 127
    64ec:	3f 2e       	mov	r3, r31
    64ee:	36 fe       	sbrs	r3, 6
    64f0:	0d c0       	rjmp	.+26     	; 0x650c <vfprintf+0x2ca>
    64f2:	23 2d       	mov	r18, r3
    64f4:	2e 7f       	andi	r18, 0xFE	; 254
    64f6:	a2 2e       	mov	r10, r18
    64f8:	89 14       	cp	r8, r9
    64fa:	58 f4       	brcc	.+22     	; 0x6512 <vfprintf+0x2d0>
    64fc:	34 fe       	sbrs	r3, 4
    64fe:	0b c0       	rjmp	.+22     	; 0x6516 <vfprintf+0x2d4>
    6500:	32 fc       	sbrc	r3, 2
    6502:	09 c0       	rjmp	.+18     	; 0x6516 <vfprintf+0x2d4>
    6504:	83 2d       	mov	r24, r3
    6506:	8e 7e       	andi	r24, 0xEE	; 238
    6508:	a8 2e       	mov	r10, r24
    650a:	05 c0       	rjmp	.+10     	; 0x6516 <vfprintf+0x2d4>
    650c:	b8 2c       	mov	r11, r8
    650e:	a3 2c       	mov	r10, r3
    6510:	03 c0       	rjmp	.+6      	; 0x6518 <vfprintf+0x2d6>
    6512:	b8 2c       	mov	r11, r8
    6514:	01 c0       	rjmp	.+2      	; 0x6518 <vfprintf+0x2d6>
    6516:	b9 2c       	mov	r11, r9
    6518:	a4 fe       	sbrs	r10, 4
    651a:	0f c0       	rjmp	.+30     	; 0x653a <vfprintf+0x2f8>
    651c:	fe 01       	movw	r30, r28
    651e:	e8 0d       	add	r30, r8
    6520:	f1 1d       	adc	r31, r1
    6522:	80 81       	ld	r24, Z
    6524:	80 33       	cpi	r24, 0x30	; 48
    6526:	21 f4       	brne	.+8      	; 0x6530 <vfprintf+0x2ee>
    6528:	9a 2d       	mov	r25, r10
    652a:	99 7e       	andi	r25, 0xE9	; 233
    652c:	a9 2e       	mov	r10, r25
    652e:	09 c0       	rjmp	.+18     	; 0x6542 <vfprintf+0x300>
    6530:	a2 fe       	sbrs	r10, 2
    6532:	06 c0       	rjmp	.+12     	; 0x6540 <vfprintf+0x2fe>
    6534:	b3 94       	inc	r11
    6536:	b3 94       	inc	r11
    6538:	04 c0       	rjmp	.+8      	; 0x6542 <vfprintf+0x300>
    653a:	8a 2d       	mov	r24, r10
    653c:	86 78       	andi	r24, 0x86	; 134
    653e:	09 f0       	breq	.+2      	; 0x6542 <vfprintf+0x300>
    6540:	b3 94       	inc	r11
    6542:	a3 fc       	sbrc	r10, 3
    6544:	11 c0       	rjmp	.+34     	; 0x6568 <vfprintf+0x326>
    6546:	a0 fe       	sbrs	r10, 0
    6548:	06 c0       	rjmp	.+12     	; 0x6556 <vfprintf+0x314>
    654a:	b2 14       	cp	r11, r2
    654c:	88 f4       	brcc	.+34     	; 0x6570 <vfprintf+0x32e>
    654e:	28 0c       	add	r2, r8
    6550:	92 2c       	mov	r9, r2
    6552:	9b 18       	sub	r9, r11
    6554:	0e c0       	rjmp	.+28     	; 0x6572 <vfprintf+0x330>
    6556:	b2 14       	cp	r11, r2
    6558:	60 f4       	brcc	.+24     	; 0x6572 <vfprintf+0x330>
    655a:	b6 01       	movw	r22, r12
    655c:	80 e2       	ldi	r24, 0x20	; 32
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    6564:	b3 94       	inc	r11
    6566:	f7 cf       	rjmp	.-18     	; 0x6556 <vfprintf+0x314>
    6568:	b2 14       	cp	r11, r2
    656a:	18 f4       	brcc	.+6      	; 0x6572 <vfprintf+0x330>
    656c:	2b 18       	sub	r2, r11
    656e:	02 c0       	rjmp	.+4      	; 0x6574 <vfprintf+0x332>
    6570:	98 2c       	mov	r9, r8
    6572:	21 2c       	mov	r2, r1
    6574:	a4 fe       	sbrs	r10, 4
    6576:	10 c0       	rjmp	.+32     	; 0x6598 <vfprintf+0x356>
    6578:	b6 01       	movw	r22, r12
    657a:	80 e3       	ldi	r24, 0x30	; 48
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    6582:	a2 fe       	sbrs	r10, 2
    6584:	17 c0       	rjmp	.+46     	; 0x65b4 <vfprintf+0x372>
    6586:	a1 fc       	sbrc	r10, 1
    6588:	03 c0       	rjmp	.+6      	; 0x6590 <vfprintf+0x34e>
    658a:	88 e7       	ldi	r24, 0x78	; 120
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	02 c0       	rjmp	.+4      	; 0x6594 <vfprintf+0x352>
    6590:	88 e5       	ldi	r24, 0x58	; 88
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	b6 01       	movw	r22, r12
    6596:	0c c0       	rjmp	.+24     	; 0x65b0 <vfprintf+0x36e>
    6598:	8a 2d       	mov	r24, r10
    659a:	86 78       	andi	r24, 0x86	; 134
    659c:	59 f0       	breq	.+22     	; 0x65b4 <vfprintf+0x372>
    659e:	a1 fe       	sbrs	r10, 1
    65a0:	02 c0       	rjmp	.+4      	; 0x65a6 <vfprintf+0x364>
    65a2:	8b e2       	ldi	r24, 0x2B	; 43
    65a4:	01 c0       	rjmp	.+2      	; 0x65a8 <vfprintf+0x366>
    65a6:	80 e2       	ldi	r24, 0x20	; 32
    65a8:	a7 fc       	sbrc	r10, 7
    65aa:	8d e2       	ldi	r24, 0x2D	; 45
    65ac:	b6 01       	movw	r22, r12
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    65b4:	89 14       	cp	r8, r9
    65b6:	38 f4       	brcc	.+14     	; 0x65c6 <vfprintf+0x384>
    65b8:	b6 01       	movw	r22, r12
    65ba:	80 e3       	ldi	r24, 0x30	; 48
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    65c2:	9a 94       	dec	r9
    65c4:	f7 cf       	rjmp	.-18     	; 0x65b4 <vfprintf+0x372>
    65c6:	8a 94       	dec	r8
    65c8:	f3 01       	movw	r30, r6
    65ca:	e8 0d       	add	r30, r8
    65cc:	f1 1d       	adc	r31, r1
    65ce:	80 81       	ld	r24, Z
    65d0:	b6 01       	movw	r22, r12
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    65d8:	81 10       	cpse	r8, r1
    65da:	f5 cf       	rjmp	.-22     	; 0x65c6 <vfprintf+0x384>
    65dc:	22 20       	and	r2, r2
    65de:	09 f4       	brne	.+2      	; 0x65e2 <vfprintf+0x3a0>
    65e0:	42 ce       	rjmp	.-892    	; 0x6266 <vfprintf+0x24>
    65e2:	b6 01       	movw	r22, r12
    65e4:	80 e2       	ldi	r24, 0x20	; 32
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	0e 94 18 33 	call	0x6630	; 0x6630 <fputc>
    65ec:	2a 94       	dec	r2
    65ee:	f6 cf       	rjmp	.-20     	; 0x65dc <vfprintf+0x39a>
    65f0:	f6 01       	movw	r30, r12
    65f2:	86 81       	ldd	r24, Z+6	; 0x06
    65f4:	97 81       	ldd	r25, Z+7	; 0x07
    65f6:	02 c0       	rjmp	.+4      	; 0x65fc <vfprintf+0x3ba>
    65f8:	8f ef       	ldi	r24, 0xFF	; 255
    65fa:	9f ef       	ldi	r25, 0xFF	; 255
    65fc:	2b 96       	adiw	r28, 0x0b	; 11
    65fe:	e2 e1       	ldi	r30, 0x12	; 18
    6600:	0c 94 31 34 	jmp	0x6862	; 0x6862 <__epilogue_restores__>

00006604 <strnlen_P>:
    6604:	fc 01       	movw	r30, r24
    6606:	05 90       	lpm	r0, Z+
    6608:	61 50       	subi	r22, 0x01	; 1
    660a:	70 40       	sbci	r23, 0x00	; 0
    660c:	01 10       	cpse	r0, r1
    660e:	d8 f7       	brcc	.-10     	; 0x6606 <strnlen_P+0x2>
    6610:	80 95       	com	r24
    6612:	90 95       	com	r25
    6614:	8e 0f       	add	r24, r30
    6616:	9f 1f       	adc	r25, r31
    6618:	08 95       	ret

0000661a <strnlen>:
    661a:	fc 01       	movw	r30, r24
    661c:	61 50       	subi	r22, 0x01	; 1
    661e:	70 40       	sbci	r23, 0x00	; 0
    6620:	01 90       	ld	r0, Z+
    6622:	01 10       	cpse	r0, r1
    6624:	d8 f7       	brcc	.-10     	; 0x661c <strnlen+0x2>
    6626:	80 95       	com	r24
    6628:	90 95       	com	r25
    662a:	8e 0f       	add	r24, r30
    662c:	9f 1f       	adc	r25, r31
    662e:	08 95       	ret

00006630 <fputc>:
    6630:	0f 93       	push	r16
    6632:	1f 93       	push	r17
    6634:	cf 93       	push	r28
    6636:	df 93       	push	r29
    6638:	fb 01       	movw	r30, r22
    663a:	23 81       	ldd	r18, Z+3	; 0x03
    663c:	21 fd       	sbrc	r18, 1
    663e:	03 c0       	rjmp	.+6      	; 0x6646 <fputc+0x16>
    6640:	8f ef       	ldi	r24, 0xFF	; 255
    6642:	9f ef       	ldi	r25, 0xFF	; 255
    6644:	2c c0       	rjmp	.+88     	; 0x669e <fputc+0x6e>
    6646:	22 ff       	sbrs	r18, 2
    6648:	16 c0       	rjmp	.+44     	; 0x6676 <fputc+0x46>
    664a:	46 81       	ldd	r20, Z+6	; 0x06
    664c:	57 81       	ldd	r21, Z+7	; 0x07
    664e:	24 81       	ldd	r18, Z+4	; 0x04
    6650:	35 81       	ldd	r19, Z+5	; 0x05
    6652:	42 17       	cp	r20, r18
    6654:	53 07       	cpc	r21, r19
    6656:	44 f4       	brge	.+16     	; 0x6668 <fputc+0x38>
    6658:	a0 81       	ld	r26, Z
    665a:	b1 81       	ldd	r27, Z+1	; 0x01
    665c:	9d 01       	movw	r18, r26
    665e:	2f 5f       	subi	r18, 0xFF	; 255
    6660:	3f 4f       	sbci	r19, 0xFF	; 255
    6662:	31 83       	std	Z+1, r19	; 0x01
    6664:	20 83       	st	Z, r18
    6666:	8c 93       	st	X, r24
    6668:	26 81       	ldd	r18, Z+6	; 0x06
    666a:	37 81       	ldd	r19, Z+7	; 0x07
    666c:	2f 5f       	subi	r18, 0xFF	; 255
    666e:	3f 4f       	sbci	r19, 0xFF	; 255
    6670:	37 83       	std	Z+7, r19	; 0x07
    6672:	26 83       	std	Z+6, r18	; 0x06
    6674:	14 c0       	rjmp	.+40     	; 0x669e <fputc+0x6e>
    6676:	8b 01       	movw	r16, r22
    6678:	ec 01       	movw	r28, r24
    667a:	fb 01       	movw	r30, r22
    667c:	00 84       	ldd	r0, Z+8	; 0x08
    667e:	f1 85       	ldd	r31, Z+9	; 0x09
    6680:	e0 2d       	mov	r30, r0
    6682:	09 95       	icall
    6684:	89 2b       	or	r24, r25
    6686:	e1 f6       	brne	.-72     	; 0x6640 <fputc+0x10>
    6688:	d8 01       	movw	r26, r16
    668a:	16 96       	adiw	r26, 0x06	; 6
    668c:	8d 91       	ld	r24, X+
    668e:	9c 91       	ld	r25, X
    6690:	17 97       	sbiw	r26, 0x07	; 7
    6692:	01 96       	adiw	r24, 0x01	; 1
    6694:	17 96       	adiw	r26, 0x07	; 7
    6696:	9c 93       	st	X, r25
    6698:	8e 93       	st	-X, r24
    669a:	16 97       	sbiw	r26, 0x06	; 6
    669c:	ce 01       	movw	r24, r28
    669e:	df 91       	pop	r29
    66a0:	cf 91       	pop	r28
    66a2:	1f 91       	pop	r17
    66a4:	0f 91       	pop	r16
    66a6:	08 95       	ret

000066a8 <__ultoa_invert>:
    66a8:	fa 01       	movw	r30, r20
    66aa:	aa 27       	eor	r26, r26
    66ac:	28 30       	cpi	r18, 0x08	; 8
    66ae:	51 f1       	breq	.+84     	; 0x6704 <__ultoa_invert+0x5c>
    66b0:	20 31       	cpi	r18, 0x10	; 16
    66b2:	81 f1       	breq	.+96     	; 0x6714 <__ultoa_invert+0x6c>
    66b4:	e8 94       	clt
    66b6:	6f 93       	push	r22
    66b8:	6e 7f       	andi	r22, 0xFE	; 254
    66ba:	6e 5f       	subi	r22, 0xFE	; 254
    66bc:	7f 4f       	sbci	r23, 0xFF	; 255
    66be:	8f 4f       	sbci	r24, 0xFF	; 255
    66c0:	9f 4f       	sbci	r25, 0xFF	; 255
    66c2:	af 4f       	sbci	r26, 0xFF	; 255
    66c4:	b1 e0       	ldi	r27, 0x01	; 1
    66c6:	3e d0       	rcall	.+124    	; 0x6744 <__ultoa_invert+0x9c>
    66c8:	b4 e0       	ldi	r27, 0x04	; 4
    66ca:	3c d0       	rcall	.+120    	; 0x6744 <__ultoa_invert+0x9c>
    66cc:	67 0f       	add	r22, r23
    66ce:	78 1f       	adc	r23, r24
    66d0:	89 1f       	adc	r24, r25
    66d2:	9a 1f       	adc	r25, r26
    66d4:	a1 1d       	adc	r26, r1
    66d6:	68 0f       	add	r22, r24
    66d8:	79 1f       	adc	r23, r25
    66da:	8a 1f       	adc	r24, r26
    66dc:	91 1d       	adc	r25, r1
    66de:	a1 1d       	adc	r26, r1
    66e0:	6a 0f       	add	r22, r26
    66e2:	71 1d       	adc	r23, r1
    66e4:	81 1d       	adc	r24, r1
    66e6:	91 1d       	adc	r25, r1
    66e8:	a1 1d       	adc	r26, r1
    66ea:	20 d0       	rcall	.+64     	; 0x672c <__ultoa_invert+0x84>
    66ec:	09 f4       	brne	.+2      	; 0x66f0 <__ultoa_invert+0x48>
    66ee:	68 94       	set
    66f0:	3f 91       	pop	r19
    66f2:	2a e0       	ldi	r18, 0x0A	; 10
    66f4:	26 9f       	mul	r18, r22
    66f6:	11 24       	eor	r1, r1
    66f8:	30 19       	sub	r19, r0
    66fa:	30 5d       	subi	r19, 0xD0	; 208
    66fc:	31 93       	st	Z+, r19
    66fe:	de f6       	brtc	.-74     	; 0x66b6 <__ultoa_invert+0xe>
    6700:	cf 01       	movw	r24, r30
    6702:	08 95       	ret
    6704:	46 2f       	mov	r20, r22
    6706:	47 70       	andi	r20, 0x07	; 7
    6708:	40 5d       	subi	r20, 0xD0	; 208
    670a:	41 93       	st	Z+, r20
    670c:	b3 e0       	ldi	r27, 0x03	; 3
    670e:	0f d0       	rcall	.+30     	; 0x672e <__ultoa_invert+0x86>
    6710:	c9 f7       	brne	.-14     	; 0x6704 <__ultoa_invert+0x5c>
    6712:	f6 cf       	rjmp	.-20     	; 0x6700 <__ultoa_invert+0x58>
    6714:	46 2f       	mov	r20, r22
    6716:	4f 70       	andi	r20, 0x0F	; 15
    6718:	40 5d       	subi	r20, 0xD0	; 208
    671a:	4a 33       	cpi	r20, 0x3A	; 58
    671c:	18 f0       	brcs	.+6      	; 0x6724 <__ultoa_invert+0x7c>
    671e:	49 5d       	subi	r20, 0xD9	; 217
    6720:	31 fd       	sbrc	r19, 1
    6722:	40 52       	subi	r20, 0x20	; 32
    6724:	41 93       	st	Z+, r20
    6726:	02 d0       	rcall	.+4      	; 0x672c <__ultoa_invert+0x84>
    6728:	a9 f7       	brne	.-22     	; 0x6714 <__ultoa_invert+0x6c>
    672a:	ea cf       	rjmp	.-44     	; 0x6700 <__ultoa_invert+0x58>
    672c:	b4 e0       	ldi	r27, 0x04	; 4
    672e:	a6 95       	lsr	r26
    6730:	97 95       	ror	r25
    6732:	87 95       	ror	r24
    6734:	77 95       	ror	r23
    6736:	67 95       	ror	r22
    6738:	ba 95       	dec	r27
    673a:	c9 f7       	brne	.-14     	; 0x672e <__ultoa_invert+0x86>
    673c:	00 97       	sbiw	r24, 0x00	; 0
    673e:	61 05       	cpc	r22, r1
    6740:	71 05       	cpc	r23, r1
    6742:	08 95       	ret
    6744:	9b 01       	movw	r18, r22
    6746:	ac 01       	movw	r20, r24
    6748:	0a 2e       	mov	r0, r26
    674a:	06 94       	lsr	r0
    674c:	57 95       	ror	r21
    674e:	47 95       	ror	r20
    6750:	37 95       	ror	r19
    6752:	27 95       	ror	r18
    6754:	ba 95       	dec	r27
    6756:	c9 f7       	brne	.-14     	; 0x674a <__ultoa_invert+0xa2>
    6758:	62 0f       	add	r22, r18
    675a:	73 1f       	adc	r23, r19
    675c:	84 1f       	adc	r24, r20
    675e:	95 1f       	adc	r25, r21
    6760:	a0 1d       	adc	r26, r0
    6762:	08 95       	ret

00006764 <eeprom_read_byte>:
    6764:	f9 99       	sbic	0x1f, 1	; 31
    6766:	fe cf       	rjmp	.-4      	; 0x6764 <eeprom_read_byte>
    6768:	92 bd       	out	0x22, r25	; 34
    676a:	81 bd       	out	0x21, r24	; 33
    676c:	f8 9a       	sbi	0x1f, 0	; 31
    676e:	99 27       	eor	r25, r25
    6770:	80 b5       	in	r24, 0x20	; 32
    6772:	08 95       	ret

00006774 <eeprom_read_dword>:
    6774:	a6 e1       	ldi	r26, 0x16	; 22
    6776:	b0 e0       	ldi	r27, 0x00	; 0
    6778:	44 e0       	ldi	r20, 0x04	; 4
    677a:	50 e0       	ldi	r21, 0x00	; 0
    677c:	0c 94 07 34 	jmp	0x680e	; 0x680e <eeprom_read_blraw>

00006780 <eeprom_read_word>:
    6780:	a8 e1       	ldi	r26, 0x18	; 24
    6782:	b0 e0       	ldi	r27, 0x00	; 0
    6784:	42 e0       	ldi	r20, 0x02	; 2
    6786:	50 e0       	ldi	r21, 0x00	; 0
    6788:	0c 94 07 34 	jmp	0x680e	; 0x680e <eeprom_read_blraw>

0000678c <eeprom_update_byte>:
    678c:	26 2f       	mov	r18, r22

0000678e <eeprom_update_r18>:
    678e:	f9 99       	sbic	0x1f, 1	; 31
    6790:	fe cf       	rjmp	.-4      	; 0x678e <eeprom_update_r18>
    6792:	92 bd       	out	0x22, r25	; 34
    6794:	81 bd       	out	0x21, r24	; 33
    6796:	f8 9a       	sbi	0x1f, 0	; 31
    6798:	01 97       	sbiw	r24, 0x01	; 1
    679a:	00 b4       	in	r0, 0x20	; 32
    679c:	02 16       	cp	r0, r18
    679e:	39 f0       	breq	.+14     	; 0x67ae <eeprom_update_r18+0x20>
    67a0:	1f ba       	out	0x1f, r1	; 31
    67a2:	20 bd       	out	0x20, r18	; 32
    67a4:	0f b6       	in	r0, 0x3f	; 63
    67a6:	f8 94       	cli
    67a8:	fa 9a       	sbi	0x1f, 2	; 31
    67aa:	f9 9a       	sbi	0x1f, 1	; 31
    67ac:	0f be       	out	0x3f, r0	; 63
    67ae:	08 95       	ret

000067b0 <eeprom_update_dword>:
    67b0:	03 96       	adiw	r24, 0x03	; 3
    67b2:	27 2f       	mov	r18, r23
    67b4:	0e 94 c7 33 	call	0x678e	; 0x678e <eeprom_update_r18>
    67b8:	0e 94 c6 33 	call	0x678c	; 0x678c <eeprom_update_byte>
    67bc:	25 2f       	mov	r18, r21
    67be:	0e 94 c7 33 	call	0x678e	; 0x678e <eeprom_update_r18>
    67c2:	24 2f       	mov	r18, r20
    67c4:	0c 94 c7 33 	jmp	0x678e	; 0x678e <eeprom_update_r18>

000067c8 <eeprom_update_word>:
    67c8:	01 96       	adiw	r24, 0x01	; 1
    67ca:	27 2f       	mov	r18, r23
    67cc:	0e 94 c7 33 	call	0x678e	; 0x678e <eeprom_update_r18>
    67d0:	0c 94 c6 33 	jmp	0x678c	; 0x678c <eeprom_update_byte>

000067d4 <eeprom_write_byte>:
    67d4:	26 2f       	mov	r18, r22

000067d6 <eeprom_write_r18>:
    67d6:	f9 99       	sbic	0x1f, 1	; 31
    67d8:	fe cf       	rjmp	.-4      	; 0x67d6 <eeprom_write_r18>
    67da:	1f ba       	out	0x1f, r1	; 31
    67dc:	92 bd       	out	0x22, r25	; 34
    67de:	81 bd       	out	0x21, r24	; 33
    67e0:	20 bd       	out	0x20, r18	; 32
    67e2:	0f b6       	in	r0, 0x3f	; 63
    67e4:	f8 94       	cli
    67e6:	fa 9a       	sbi	0x1f, 2	; 31
    67e8:	f9 9a       	sbi	0x1f, 1	; 31
    67ea:	0f be       	out	0x3f, r0	; 63
    67ec:	01 96       	adiw	r24, 0x01	; 1
    67ee:	08 95       	ret

000067f0 <eeprom_write_dword>:
    67f0:	24 2f       	mov	r18, r20
    67f2:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <eeprom_write_r18>
    67f6:	25 2f       	mov	r18, r21
    67f8:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <eeprom_write_r18>
    67fc:	0c 94 00 34 	jmp	0x6800	; 0x6800 <eeprom_write_word>

00006800 <eeprom_write_word>:
    6800:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <eeprom_write_byte>
    6804:	27 2f       	mov	r18, r23
    6806:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <eeprom_write_r18>

0000680a <eeprom_read_block>:
    680a:	dc 01       	movw	r26, r24
    680c:	cb 01       	movw	r24, r22

0000680e <eeprom_read_blraw>:
    680e:	fc 01       	movw	r30, r24
    6810:	f9 99       	sbic	0x1f, 1	; 31
    6812:	fe cf       	rjmp	.-4      	; 0x6810 <eeprom_read_blraw+0x2>
    6814:	06 c0       	rjmp	.+12     	; 0x6822 <eeprom_read_blraw+0x14>
    6816:	f2 bd       	out	0x22, r31	; 34
    6818:	e1 bd       	out	0x21, r30	; 33
    681a:	f8 9a       	sbi	0x1f, 0	; 31
    681c:	31 96       	adiw	r30, 0x01	; 1
    681e:	00 b4       	in	r0, 0x20	; 32
    6820:	0d 92       	st	X+, r0
    6822:	41 50       	subi	r20, 0x01	; 1
    6824:	50 40       	sbci	r21, 0x00	; 0
    6826:	b8 f7       	brcc	.-18     	; 0x6816 <eeprom_read_blraw+0x8>
    6828:	08 95       	ret

0000682a <__prologue_saves__>:
    682a:	2f 92       	push	r2
    682c:	3f 92       	push	r3
    682e:	4f 92       	push	r4
    6830:	5f 92       	push	r5
    6832:	6f 92       	push	r6
    6834:	7f 92       	push	r7
    6836:	8f 92       	push	r8
    6838:	9f 92       	push	r9
    683a:	af 92       	push	r10
    683c:	bf 92       	push	r11
    683e:	cf 92       	push	r12
    6840:	df 92       	push	r13
    6842:	ef 92       	push	r14
    6844:	ff 92       	push	r15
    6846:	0f 93       	push	r16
    6848:	1f 93       	push	r17
    684a:	cf 93       	push	r28
    684c:	df 93       	push	r29
    684e:	cd b7       	in	r28, 0x3d	; 61
    6850:	de b7       	in	r29, 0x3e	; 62
    6852:	ca 1b       	sub	r28, r26
    6854:	db 0b       	sbc	r29, r27
    6856:	0f b6       	in	r0, 0x3f	; 63
    6858:	f8 94       	cli
    685a:	de bf       	out	0x3e, r29	; 62
    685c:	0f be       	out	0x3f, r0	; 63
    685e:	cd bf       	out	0x3d, r28	; 61
    6860:	09 94       	ijmp

00006862 <__epilogue_restores__>:
    6862:	2a 88       	ldd	r2, Y+18	; 0x12
    6864:	39 88       	ldd	r3, Y+17	; 0x11
    6866:	48 88       	ldd	r4, Y+16	; 0x10
    6868:	5f 84       	ldd	r5, Y+15	; 0x0f
    686a:	6e 84       	ldd	r6, Y+14	; 0x0e
    686c:	7d 84       	ldd	r7, Y+13	; 0x0d
    686e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6870:	9b 84       	ldd	r9, Y+11	; 0x0b
    6872:	aa 84       	ldd	r10, Y+10	; 0x0a
    6874:	b9 84       	ldd	r11, Y+9	; 0x09
    6876:	c8 84       	ldd	r12, Y+8	; 0x08
    6878:	df 80       	ldd	r13, Y+7	; 0x07
    687a:	ee 80       	ldd	r14, Y+6	; 0x06
    687c:	fd 80       	ldd	r15, Y+5	; 0x05
    687e:	0c 81       	ldd	r16, Y+4	; 0x04
    6880:	1b 81       	ldd	r17, Y+3	; 0x03
    6882:	aa 81       	ldd	r26, Y+2	; 0x02
    6884:	b9 81       	ldd	r27, Y+1	; 0x01
    6886:	ce 0f       	add	r28, r30
    6888:	d1 1d       	adc	r29, r1
    688a:	0f b6       	in	r0, 0x3f	; 63
    688c:	f8 94       	cli
    688e:	de bf       	out	0x3e, r29	; 62
    6890:	0f be       	out	0x3f, r0	; 63
    6892:	cd bf       	out	0x3d, r28	; 61
    6894:	ed 01       	movw	r28, r26
    6896:	08 95       	ret

00006898 <__do_global_dtors>:
    6898:	11 e0       	ldi	r17, 0x01	; 1
    689a:	c6 e1       	ldi	r28, 0x16	; 22
    689c:	d1 e0       	ldi	r29, 0x01	; 1
    689e:	04 c0       	rjmp	.+8      	; 0x68a8 <__do_global_dtors+0x10>
    68a0:	fe 01       	movw	r30, r28
    68a2:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__tablejump2__>
    68a6:	21 96       	adiw	r28, 0x01	; 1
    68a8:	c7 31       	cpi	r28, 0x17	; 23
    68aa:	d1 07       	cpc	r29, r17
    68ac:	c9 f7       	brne	.-14     	; 0x68a0 <__do_global_dtors+0x8>
    68ae:	f8 94       	cli

000068b0 <__stop_program>:
    68b0:	ff cf       	rjmp	.-2      	; 0x68b0 <__stop_program>
