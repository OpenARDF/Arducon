
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00005c98  00005d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c98  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028c  008002e2  008002e2  00005f2e  2**0
                  ALLOC
  3 .eeprom       000002c7  00810000  00810000  00005f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000061f5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006254  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000458  00000000  00000000  00006298  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006322  00000000  00000000  000066f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001720  00000000  00000000  0000ca12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003fa2  00000000  00000000  0000e132  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c30  00000000  00000000  000120d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f26  00000000  00000000  00012d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004cb4  00000000  00000000  00014c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  000198de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__dtors_end>
       4:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__vector_5>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_8>
      24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_14>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_18>
      4c:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_19>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_21>
      58:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      5c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      60:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      68:	4c 01       	movw	r8, r24
      6a:	57 01       	movw	r10, r14
      6c:	62 01       	movw	r12, r4
      6e:	6d 01       	movw	r12, r26
      70:	78 01       	movw	r14, r16
      72:	83 01       	movw	r16, r6
      74:	ef 01       	movw	r28, r30
      76:	8e 01       	movw	r16, r28
      78:	ef 01       	movw	r28, r30
      7a:	ef 01       	movw	r28, r30
      7c:	ef 01       	movw	r28, r30
      7e:	99 01       	movw	r18, r18
      80:	a4 01       	movw	r20, r8
      82:	b1 01       	movw	r22, r2
      84:	be 01       	movw	r22, r28
      86:	cb 01       	movw	r24, r22
      88:	d8 01       	movw	r26, r16
      8a:	e5 01       	movw	r28, r10
      8c:	fa 01       	movw	r30, r20
      8e:	fe 01       	movw	r30, r28
      90:	02 02       	muls	r16, r18
      92:	06 02       	muls	r16, r22
      94:	0a 02       	muls	r16, r26
      96:	0e 02       	muls	r16, r30
      98:	28 02       	muls	r18, r24
      9a:	12 02       	muls	r17, r18
      9c:	28 02       	muls	r18, r24
      9e:	28 02       	muls	r18, r24
      a0:	28 02       	muls	r18, r24
      a2:	13 02       	muls	r17, r19
      a4:	17 02       	muls	r17, r23
      a6:	1c 02       	muls	r17, r28
      a8:	20 02       	muls	r18, r16
      aa:	24 02       	muls	r18, r20
      ac:	3a 02       	muls	r19, r26
      ae:	40 02       	muls	r20, r16
      b0:	46 02       	muls	r20, r22
      b2:	4c 02       	muls	r20, r28
      b4:	52 02       	muls	r21, r18
      b6:	58 02       	muls	r21, r24
      b8:	81 02       	muls	r24, r17
      ba:	5e 02       	muls	r21, r30
      bc:	81 02       	muls	r24, r17
      be:	81 02       	muls	r24, r17
      c0:	81 02       	muls	r24, r17
      c2:	64 02       	muls	r22, r20
      c4:	6a 02       	muls	r22, r26
      c6:	70 02       	muls	r23, r16
      c8:	76 02       	muls	r23, r22
      ca:	7c 02       	muls	r23, r28
      cc:	2c 0f       	add	r18, r28
      ce:	2c 0f       	add	r18, r28
      d0:	2c 0f       	add	r18, r28
      d2:	2c 0f       	add	r18, r28
      d4:	2c 0f       	add	r18, r28
      d6:	2c 0f       	add	r18, r28
      d8:	7f 0f       	add	r23, r31
      da:	7f 0f       	add	r23, r31
      dc:	4a 0f       	add	r20, r26
      de:	7f 0f       	add	r23, r31
      e0:	7f 0f       	add	r23, r31
      e2:	7f 0f       	add	r23, r31
      e4:	7f 0f       	add	r23, r31
      e6:	7f 0f       	add	r23, r31
      e8:	7f 0f       	add	r23, r31
      ea:	7f 0f       	add	r23, r31
      ec:	7f 0f       	add	r23, r31
      ee:	4a 0f       	add	r20, r26
      f0:	4a 0f       	add	r20, r26
      f2:	18 0f       	add	r17, r24
      f4:	22 0f       	add	r18, r18
      f6:	4c 12       	cpse	r4, r28
      f8:	7c 12       	cpse	r7, r28
      fa:	98 12       	cpse	r9, r24
      fc:	d2 13       	cpse	r29, r18
      fe:	d2 13       	cpse	r29, r18
     100:	a0 12       	cpse	r10, r16
     102:	db 12       	cpse	r13, r27
     104:	3b 13       	cpse	r19, r27
     106:	67 13       	cpse	r22, r23
     108:	6f 13       	cpse	r22, r31
     10a:	77 13       	cpse	r23, r23
     10c:	7f 13       	cpse	r23, r31
     10e:	aa 13       	cpse	r26, r26
     110:	9f 21       	and	r25, r15
     112:	63 21       	and	r22, r3
     114:	8f 21       	and	r24, r15
     116:	a7 21       	and	r26, r7
     118:	93 21       	and	r25, r3
     11a:	a7 21       	and	r26, r7
     11c:	73 21       	and	r23, r3
     11e:	5f 21       	and	r21, r15
     120:	6b 21       	and	r22, r11
     122:	6f 21       	and	r22, r15
     124:	a7 21       	and	r26, r7
     126:	83 21       	and	r24, r3
     128:	57 21       	and	r21, r7
     12a:	87 21       	and	r24, r7
     12c:	53 21       	and	r21, r3
     12e:	67 21       	and	r22, r7
     130:	2b 21       	and	r18, r11
     132:	2f 21       	and	r18, r15
     134:	33 21       	and	r19, r3
     136:	37 21       	and	r19, r7
     138:	3b 21       	and	r19, r11
     13a:	3f 21       	and	r19, r15
     13c:	43 21       	and	r20, r3
     13e:	47 21       	and	r20, r7
     140:	4b 21       	and	r20, r11
     142:	4f 21       	and	r20, r15
     144:	77 21       	and	r23, r7
     146:	7b 21       	and	r23, r11
     148:	a3 21       	and	r26, r3
     14a:	7f 21       	and	r23, r15
     14c:	a7 21       	and	r26, r7
     14e:	5b 21       	and	r21, r11
     150:	97 21       	and	r25, r7
     152:	ab 21       	and	r26, r11
     154:	c7 20       	and	r12, r7
     156:	cb 20       	and	r12, r11
     158:	cf 20       	and	r12, r15
     15a:	d3 20       	and	r13, r3
     15c:	d7 20       	and	r13, r7
     15e:	db 20       	and	r13, r11
     160:	df 20       	and	r13, r15
     162:	e3 20       	and	r14, r3
     164:	e7 20       	and	r14, r7
     166:	eb 20       	and	r14, r11
     168:	ef 20       	and	r14, r15
     16a:	f3 20       	and	r15, r3
     16c:	f7 20       	and	r15, r7
     16e:	fb 20       	and	r15, r11
     170:	ff 20       	and	r15, r15
     172:	03 21       	and	r16, r3
     174:	07 21       	and	r16, r7
     176:	0b 21       	and	r16, r11
     178:	0f 21       	and	r16, r15
     17a:	13 21       	and	r17, r3
     17c:	17 21       	and	r17, r7
     17e:	1b 21       	and	r17, r11
     180:	1f 21       	and	r17, r15
     182:	23 21       	and	r18, r3
     184:	27 21       	and	r18, r7
     186:	a7 21       	and	r26, r7
     188:	a7 21       	and	r26, r7
     18a:	a7 21       	and	r26, r7
     18c:	a7 21       	and	r26, r7
     18e:	8b 21       	and	r24, r11
     190:	a7 21       	and	r26, r7
     192:	a7 21       	and	r26, r7
     194:	a7 21       	and	r26, r7
     196:	a7 21       	and	r26, r7
     198:	a7 21       	and	r26, r7
     19a:	a7 21       	and	r26, r7
     19c:	a7 21       	and	r26, r7
     19e:	a7 21       	and	r26, r7
     1a0:	a7 21       	and	r26, r7
     1a2:	a7 21       	and	r26, r7
     1a4:	a7 21       	and	r26, r7
     1a6:	a7 21       	and	r26, r7
     1a8:	a7 21       	and	r26, r7
     1aa:	a7 21       	and	r26, r7
     1ac:	a7 21       	and	r26, r7
     1ae:	a7 21       	and	r26, r7
     1b0:	a7 21       	and	r26, r7
     1b2:	a7 21       	and	r26, r7
     1b4:	a7 21       	and	r26, r7
     1b6:	a7 21       	and	r26, r7
     1b8:	a7 21       	and	r26, r7
     1ba:	a7 21       	and	r26, r7
     1bc:	a7 21       	and	r26, r7
     1be:	a7 21       	and	r26, r7
     1c0:	a7 21       	and	r26, r7
     1c2:	a7 21       	and	r26, r7
     1c4:	a7 21       	and	r26, r7
     1c6:	a7 21       	and	r26, r7
     1c8:	9b 21       	and	r25, r11
     1ca:	05 a8       	ldd	r0, Z+53	; 0x35
     1cc:	4c cd       	rjmp	.-1384   	; 0xfffffc66 <__eeprom_end+0xff7ef99f>
     1ce:	b2 d4       	rcall	.+2404   	; 0xb34 <_Z16i2c_device_writehhPhh+0xae>
     1d0:	4e b9       	out	0x0e, r20	; 14
     1d2:	38 36       	cpi	r19, 0x68	; 104
     1d4:	a9 02       	muls	r26, r25
     1d6:	0c 50       	subi	r16, 0x0C	; 12
     1d8:	b9 91       	ld	r27, Y+
     1da:	86 88       	ldd	r8, Z+22	; 0x16
     1dc:	08 3c       	cpi	r16, 0xC8	; 200
     1de:	a6 aa       	std	Z+54, r10	; 0x36
     1e0:	aa 2a       	or	r10, r26
     1e2:	be 00       	.word	0x00be	; ????
     1e4:	00 00       	nop
     1e6:	80 3f       	cpi	r24, 0xF0	; 240

000001e8 <__ctors_start>:
     1e8:	a6 20       	and	r10, r6

000001ea <__ctors_end>:
     1ea:	b7 20       	and	r11, r7

000001ec <__dtors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d8 e0       	ldi	r29, 0x08	; 8
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e8 e9       	ldi	r30, 0x98	; 152
     200:	fc e5       	ldi	r31, 0x5C	; 92
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a2 3e       	cpi	r26, 0xE2	; 226
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	25 e0       	ldi	r18, 0x05	; 5
     210:	a2 ee       	ldi	r26, 0xE2	; 226
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	ae 36       	cpi	r26, 0x6E	; 110
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>

0000021e <__do_global_ctors>:
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	c5 ef       	ldi	r28, 0xF5	; 245
     222:	d0 e0       	ldi	r29, 0x00	; 0
     224:	04 c0       	rjmp	.+8      	; 0x22e <__do_global_ctors+0x10>
     226:	21 97       	sbiw	r28, 0x01	; 1
     228:	fe 01       	movw	r30, r28
     22a:	0e 94 32 29 	call	0x5264	; 0x5264 <__tablejump2__>
     22e:	c4 3f       	cpi	r28, 0xF4	; 244
     230:	d1 07       	cpc	r29, r17
     232:	c9 f7       	brne	.-14     	; 0x226 <__do_global_ctors+0x8>
     234:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <main>
     238:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__do_global_dtors>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <month_length>:
     240:	62 30       	cpi	r22, 0x02	; 2
     242:	21 f4       	brne	.+8      	; 0x24c <month_length+0xc>
     244:	0e 94 2d 01 	call	0x25a	; 0x25a <is_leap_year>
     248:	84 5e       	subi	r24, 0xE4	; 228
     24a:	08 95       	ret
     24c:	68 30       	cpi	r22, 0x08	; 8
     24e:	08 f0       	brcs	.+2      	; 0x252 <month_length+0x12>
     250:	6f 5f       	subi	r22, 0xFF	; 255
     252:	61 70       	andi	r22, 0x01	; 1
     254:	8e e1       	ldi	r24, 0x1E	; 30
     256:	86 0f       	add	r24, r22
     258:	08 95       	ret

0000025a <is_leap_year>:
     25a:	9c 01       	movw	r18, r24
     25c:	23 70       	andi	r18, 0x03	; 3
     25e:	33 27       	eor	r19, r19
     260:	23 2b       	or	r18, r19
     262:	59 f4       	brne	.+22     	; 0x27a <is_leap_year+0x20>
     264:	64 e6       	ldi	r22, 0x64	; 100
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
     26c:	89 2b       	or	r24, r25
     26e:	39 f4       	brne	.+14     	; 0x27e <is_leap_year+0x24>
     270:	63 70       	andi	r22, 0x03	; 3
     272:	77 27       	eor	r23, r23
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	67 2b       	or	r22, r23
     278:	19 f0       	breq	.+6      	; 0x280 <is_leap_year+0x26>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	08 95       	ret
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	08 95       	ret

00000282 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	fc 01       	movw	r30, r24
     286:	32 97       	sbiw	r30, 0x02	; 2
     288:	e2 31       	cpi	r30, 0x12	; 18
     28a:	f1 05       	cpc	r31, r1
     28c:	08 f0       	brcs	.+2      	; 0x290 <_Z7pinModehh+0xe>
     28e:	a7 c0       	rjmp	.+334    	; 0x3de <_Z7pinModehh+0x15c>
     290:	ec 5c       	subi	r30, 0xCC	; 204
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     298:	61 30       	cpi	r22, 0x01	; 1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     29c:	52 9a       	sbi	0x0a, 2	; 10
     29e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2a0:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2a2:	63 30       	cpi	r22, 0x03	; 3
     2a4:	11 f4       	brne	.+4      	; 0x2aa <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2a6:	5a 9a       	sbi	0x0b, 2	; 11
     2a8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2aa:	5a 98       	cbi	0x0b, 2	; 11
     2ac:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2ae:	61 30       	cpi	r22, 0x01	; 1
     2b0:	11 f4       	brne	.+4      	; 0x2b6 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2b2:	53 9a       	sbi	0x0a, 3	; 10
     2b4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2b6:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2b8:	63 30       	cpi	r22, 0x03	; 3
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2bc:	5b 9a       	sbi	0x0b, 3	; 11
     2be:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2c0:	5b 98       	cbi	0x0b, 3	; 11
     2c2:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     2c4:	61 30       	cpi	r22, 0x01	; 1
     2c6:	11 f4       	brne	.+4      	; 0x2cc <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     2c8:	54 9a       	sbi	0x0a, 4	; 10
     2ca:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     2cc:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     2ce:	63 30       	cpi	r22, 0x03	; 3
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     2d2:	5c 9a       	sbi	0x0b, 4	; 11
     2d4:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     2d6:	5c 98       	cbi	0x0b, 4	; 11
     2d8:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     2da:	61 30       	cpi	r22, 0x01	; 1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     2de:	55 9a       	sbi	0x0a, 5	; 10
     2e0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     2e2:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     2e4:	63 30       	cpi	r22, 0x03	; 3
     2e6:	11 f4       	brne	.+4      	; 0x2ec <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     2e8:	5d 9a       	sbi	0x0b, 5	; 11
     2ea:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     2ec:	5d 98       	cbi	0x0b, 5	; 11
     2ee:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     2f4:	56 9a       	sbi	0x0a, 6	; 10
     2f6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     2f8:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     2fa:	63 30       	cpi	r22, 0x03	; 3
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     2fe:	5e 9a       	sbi	0x0b, 6	; 11
     300:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     302:	5e 98       	cbi	0x0b, 6	; 11
     304:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	11 f4       	brne	.+4      	; 0x30e <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     30a:	57 9a       	sbi	0x0a, 7	; 10
     30c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     30e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	11 f4       	brne	.+4      	; 0x318 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     314:	5f 9a       	sbi	0x0b, 7	; 11
     316:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     318:	5f 98       	cbi	0x0b, 7	; 11
     31a:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     31c:	61 30       	cpi	r22, 0x01	; 1
     31e:	11 f4       	brne	.+4      	; 0x324 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB1);
     320:	21 9a       	sbi	0x04, 1	; 4
     322:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     324:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     326:	63 30       	cpi	r22, 0x03	; 3
     328:	11 f4       	brne	.+4      	; 0x32e <_Z7pinModehh+0xac>
				{
					PORTD  |= (1 << PORTB1);
     32a:	59 9a       	sbi	0x0b, 1	; 11
     32c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB1);
     32e:	59 98       	cbi	0x0b, 1	; 11
     330:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	11 f4       	brne	.+4      	; 0x33a <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB5);
     336:	25 9a       	sbi	0x04, 5	; 4
     338:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     33a:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	11 f4       	brne	.+4      	; 0x344 <_Z7pinModehh+0xc2>
				{
					PORTD  |= (1 << PORTB5);
     340:	5d 9a       	sbi	0x0b, 5	; 11
     342:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     344:	5d 98       	cbi	0x0b, 5	; 11
     346:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <_Z7pinModehh+0xce>
			{
				DDRC  |= (1 << PORTC0);
     34c:	38 9a       	sbi	0x07, 0	; 7
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_Z7pinModehh+0xe4>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     350:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	19 f4       	brne	.+6      	; 0x35c <_Z7pinModehh+0xda>
				{
					PORTC  |= (1 << PORTC0);
     356:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     358:	39 98       	cbi	0x07, 1	; 7
     35a:	0a c0       	rjmp	.+20     	; 0x370 <_Z7pinModehh+0xee>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     35c:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     35e:	39 98       	cbi	0x07, 1	; 7
     360:	0a c0       	rjmp	.+20     	; 0x376 <_Z7pinModehh+0xf4>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     362:	61 30       	cpi	r22, 0x01	; 1
     364:	11 f4       	brne	.+4      	; 0x36a <_Z7pinModehh+0xe8>
			{
				DDRC  |= (1 << PORTC1);
     366:	39 9a       	sbi	0x07, 1	; 7
     368:	0b c0       	rjmp	.+22     	; 0x380 <_Z7pinModehh+0xfe>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     36a:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     36c:	63 30       	cpi	r22, 0x03	; 3
     36e:	19 f4       	brne	.+6      	; 0x376 <_Z7pinModehh+0xf4>
				{
					PORTC  |= (1 << PORTC1);
     370:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     372:	3a 98       	cbi	0x07, 2	; 7
     374:	0a c0       	rjmp	.+20     	; 0x38a <_Z7pinModehh+0x108>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     376:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     378:	3a 98       	cbi	0x07, 2	; 7
     37a:	0a c0       	rjmp	.+20     	; 0x390 <_Z7pinModehh+0x10e>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     37c:	61 30       	cpi	r22, 0x01	; 1
     37e:	11 f4       	brne	.+4      	; 0x384 <_Z7pinModehh+0x102>
			{
				DDRC  |= (1 << PORTC2);
     380:	3a 9a       	sbi	0x07, 2	; 7
     382:	0b c0       	rjmp	.+22     	; 0x39a <_Z7pinModehh+0x118>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     384:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     386:	63 30       	cpi	r22, 0x03	; 3
     388:	19 f4       	brne	.+6      	; 0x390 <_Z7pinModehh+0x10e>
				{
					PORTC  |= (1 << PORTC2);
     38a:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     38c:	3b 98       	cbi	0x07, 3	; 7
     38e:	0a c0       	rjmp	.+20     	; 0x3a4 <_Z7pinModehh+0x122>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     390:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     392:	3b 98       	cbi	0x07, 3	; 7
     394:	0a c0       	rjmp	.+20     	; 0x3aa <_Z7pinModehh+0x128>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     396:	61 30       	cpi	r22, 0x01	; 1
     398:	11 f4       	brne	.+4      	; 0x39e <_Z7pinModehh+0x11c>
			{
				DDRC  |= (1 << PORTC3);
     39a:	3b 9a       	sbi	0x07, 3	; 7
     39c:	0b c0       	rjmp	.+22     	; 0x3b4 <_Z7pinModehh+0x132>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     39e:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     3a0:	63 30       	cpi	r22, 0x03	; 3
     3a2:	19 f4       	brne	.+6      	; 0x3aa <_Z7pinModehh+0x128>
				{
					PORTC  |= (1 << PORTC3);
     3a4:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3a6:	3c 98       	cbi	0x07, 4	; 7
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <_Z7pinModehh+0x13c>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     3aa:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3ac:	3c 98       	cbi	0x07, 4	; 7
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <_Z7pinModehh+0x142>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     3b0:	61 30       	cpi	r22, 0x01	; 1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <_Z7pinModehh+0x136>
			{
				DDRC  |= (1 << PORTC4);
     3b4:	3c 9a       	sbi	0x07, 4	; 7
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <_Z7pinModehh+0x14c>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3b8:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     3ba:	63 30       	cpi	r22, 0x03	; 3
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <_Z7pinModehh+0x142>
				{
					PORTC  |= (1 << PORTC4);
     3be:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3c0:	3d 98       	cbi	0x07, 5	; 7
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <_Z7pinModehh+0x156>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     3c4:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3c6:	3d 98       	cbi	0x07, 5	; 7
     3c8:	09 c0       	rjmp	.+18     	; 0x3dc <_Z7pinModehh+0x15a>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x150>
			{
				DDRC  |= (1 << PORTC5);
     3ce:	3d 9a       	sbi	0x07, 5	; 7
     3d0:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3d2:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModehh+0x15a>
				{
					PORTC  |= (1 << PORTC5);
     3d8:	45 9a       	sbi	0x08, 5	; 8
     3da:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     3dc:	45 98       	cbi	0x08, 5	; 8
     3de:	08 95       	ret

000003e0 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	32 97       	sbiw	r30, 0x02	; 2
     3e6:	e0 31       	cpi	r30, 0x10	; 16
     3e8:	f1 05       	cpc	r31, r1
     3ea:	90 f5       	brcc	.+100    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     3ec:	ea 5b       	subi	r30, 0xBA	; 186
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     3f4:	29 b1       	in	r18, 0x09	; 9
     3f6:	24 70       	andi	r18, 0x04	; 4
     3f8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     3fa:	2c c0       	rjmp	.+88     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     3fc:	29 b1       	in	r18, 0x09	; 9
     3fe:	28 70       	andi	r18, 0x08	; 8
     400:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     402:	28 c0       	rjmp	.+80     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     404:	29 b1       	in	r18, 0x09	; 9
     406:	20 71       	andi	r18, 0x10	; 16
     408:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     40a:	24 c0       	rjmp	.+72     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     40c:	29 b1       	in	r18, 0x09	; 9
     40e:	20 72       	andi	r18, 0x20	; 32
     410:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     412:	20 c0       	rjmp	.+64     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     414:	29 b1       	in	r18, 0x09	; 9
     416:	20 74       	andi	r18, 0x40	; 64
     418:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     41a:	1c c0       	rjmp	.+56     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     41c:	29 b1       	in	r18, 0x09	; 9
     41e:	20 78       	andi	r18, 0x80	; 128
     420:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     422:	18 c0       	rjmp	.+48     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     424:	83 b1       	in	r24, 0x03	; 3
		}

		case D13:
		{
			result = PINB & (1 << PORTB5);
     426:	23 b1       	in	r18, 0x03	; 3
     428:	20 72       	andi	r18, 0x20	; 32
     42a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     42c:	13 c0       	rjmp	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     42e:	86 b1       	in	r24, 0x06	; 6
     430:	28 2f       	mov	r18, r24
     432:	21 70       	andi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     436:	0e c0       	rjmp	.+28     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     438:	26 b1       	in	r18, 0x06	; 6
     43a:	22 70       	andi	r18, 0x02	; 2
     43c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     440:	26 b1       	in	r18, 0x06	; 6
     442:	24 70       	andi	r18, 0x04	; 4
     444:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     448:	26 b1       	in	r18, 0x06	; 6
     44a:	28 70       	andi	r18, 0x08	; 8
     44c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	23 2b       	or	r18, r19
     458:	09 f4       	brne	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	80 e0       	ldi	r24, 0x00	; 0
}
     45c:	08 95       	ret

0000045e <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	32 97       	sbiw	r30, 0x02	; 2
     464:	e0 31       	cpi	r30, 0x10	; 16
     466:	f1 05       	cpc	r31, r1
     468:	08 f0       	brcs	.+2      	; 0x46c <_Z12digitalWritehh+0xe>
     46a:	4b c0       	rjmp	.+150    	; 0x502 <_Z12digitalWritehh+0xa4>
     46c:	ea 5a       	subi	r30, 0xAA	; 170
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__tablejump2__>
	{
		case D2:
		{
			if(value)
     474:	66 23       	and	r22, r22
     476:	11 f0       	breq	.+4      	; 0x47c <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     478:	5a 9a       	sbi	0x0b, 2	; 11
     47a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     47c:	5a 98       	cbi	0x0b, 2	; 11
     47e:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     480:	66 23       	and	r22, r22
     482:	11 f0       	breq	.+4      	; 0x488 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     484:	5b 9a       	sbi	0x0b, 3	; 11
     486:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     488:	5b 98       	cbi	0x0b, 3	; 11
     48a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     48c:	66 23       	and	r22, r22
     48e:	11 f0       	breq	.+4      	; 0x494 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     490:	5c 9a       	sbi	0x0b, 4	; 11
     492:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     498:	66 23       	and	r22, r22
     49a:	11 f0       	breq	.+4      	; 0x4a0 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     49c:	5d 9a       	sbi	0x0b, 5	; 11
     49e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     4a0:	5d 98       	cbi	0x0b, 5	; 11
     4a2:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     4a4:	66 23       	and	r22, r22
     4a6:	11 f0       	breq	.+4      	; 0x4ac <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     4a8:	5e 9a       	sbi	0x0b, 6	; 11
     4aa:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     4ac:	5e 98       	cbi	0x0b, 6	; 11
     4ae:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     4b0:	66 23       	and	r22, r22
     4b2:	11 f0       	breq	.+4      	; 0x4b8 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     4b4:	5f 9a       	sbi	0x0b, 7	; 11
     4b6:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     4b8:	5f 98       	cbi	0x0b, 7	; 11
     4ba:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     4bc:	66 23       	and	r22, r22
     4be:	11 f0       	breq	.+4      	; 0x4c4 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB1);
     4c0:	29 9a       	sbi	0x05, 1	; 5
     4c2:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     4c4:	29 98       	cbi	0x05, 1	; 5
     4c6:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     4c8:	66 23       	and	r22, r22
     4ca:	11 f0       	breq	.+4      	; 0x4d0 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB5);
     4cc:	2d 9a       	sbi	0x05, 5	; 5
     4ce:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     4d0:	2d 98       	cbi	0x05, 5	; 5
     4d2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     4d4:	66 23       	and	r22, r22
     4d6:	11 f0       	breq	.+4      	; 0x4dc <_Z12digitalWritehh+0x7e>
			{
				PORTC  |= (1 << PORTC0);
     4d8:	40 9a       	sbi	0x08, 0	; 8
     4da:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     4dc:	40 98       	cbi	0x08, 0	; 8
     4de:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     4e0:	66 23       	and	r22, r22
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <_Z12digitalWritehh+0x8a>
			{
				PORTC  |= (1 << PORTC1);
     4e4:	41 9a       	sbi	0x08, 1	; 8
     4e6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     4e8:	41 98       	cbi	0x08, 1	; 8
     4ea:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     4ec:	66 23       	and	r22, r22
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC2);
     4f0:	42 9a       	sbi	0x08, 2	; 8
     4f2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     4f4:	42 98       	cbi	0x08, 2	; 8
     4f6:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     4f8:	66 23       	and	r22, r22
     4fa:	11 f0       	breq	.+4      	; 0x500 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC3);
     4fc:	43 9a       	sbi	0x08, 3	; 8
     4fe:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     500:	43 98       	cbi	0x08, 3	; 8
     502:	08 95       	ret

00000504 <_Z16sendEEPROMStringPc>:
char EEMEM ee_textErrStartInPast[sizeof(TEXT_ERR_START_IN_PAST)];
char EEMEM ee_textErrInvalidTime[sizeof(TEXT_ERR_INVALID_TIME)];
char EEMEM ee_textErrTimeInPast[sizeof(TEXT_ERR_TIME_IN_PAST)];

void sendEEPROMString(char ee_addr[])
{
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	ec 01       	movw	r28, r24
	char c = eeprom_read_byte((uint8_t*)&ee_addr[0]);
     50c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
     510:	18 2f       	mov	r17, r24
	int i = 0;

	while(c)
     512:	88 23       	and	r24, r24
     514:	89 f0       	breq	.+34     	; 0x538 <_Z16sendEEPROMStringPc+0x34>
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	03 c0       	rjmp	.+6      	; 0x520 <_Z16sendEEPROMStringPc+0x1c>
     51a:	21 96       	adiw	r28, 0x01	; 1
     51c:	11 23       	and	r17, r17
     51e:	61 f0       	breq	.+24     	; 0x538 <_Z16sendEEPROMStringPc+0x34>
	{
		lb_echo_char(c);
     520:	81 2f       	mov	r24, r17
     522:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z12lb_echo_charh>
		c = eeprom_read_byte((uint8_t*)&ee_addr[++i]);
     526:	ce 01       	movw	r24, r28
     528:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
     52c:	18 2f       	mov	r17, r24

		while(linkbusTxInProgress())
     52e:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z19linkbusTxInProgressv>
     532:	81 11       	cpse	r24, r1
     534:	fc cf       	rjmp	.-8      	; 0x52e <_Z16sendEEPROMStringPc+0x2a>
     536:	f1 cf       	rjmp	.-30     	; 0x51a <_Z16sendEEPROMStringPc+0x16>
		{
			;
		}
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{	

	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     540:	9c 01       	movw	r18, r24
     542:	2e 5f       	subi	r18, 0xFE	; 254
     544:	3f 4f       	sbci	r19, 0xFF	; 255
     546:	2b 33       	cpi	r18, 0x3B	; 59
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	38 07       	cpc	r19, r24
     54c:	10 f0       	brcs	.+4      	; 0x552 <_Z8setAttenj+0x12>
     54e:	2b e3       	ldi	r18, 0x3B	; 59
     550:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     552:	ad ec       	ldi	r26, 0xCD	; 205
     554:	bc ec       	ldi	r27, 0xCC	; 204
     556:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
     55e:	96 95       	lsr	r25
     560:	87 95       	ror	r24
     562:	9c 01       	movw	r18, r24
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
	att /= 5;
     570:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
     574:	96 95       	lsr	r25
     576:	87 95       	ror	r24
     578:	96 95       	lsr	r25
     57a:	87 95       	ror	r24

	lower4 = dB_low(att);
     57c:	28 2f       	mov	r18, r24
     57e:	2f 70       	andi	r18, 0x0F	; 15
     580:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <_ZL6lower4>
	upper2 = dB_high(att);
     584:	80 73       	andi	r24, 0x30	; 48
     586:	99 27       	eor	r25, r25
     588:	92 95       	swap	r25
     58a:	82 95       	swap	r24
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	89 27       	eor	r24, r25
     590:	9f 70       	andi	r25, 0x0F	; 15
     592:	89 27       	eor	r24, r25
     594:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__data_end>
	
	PORTC  &= 0xF0;
     598:	88 b1       	in	r24, 0x08	; 8
     59a:	80 7f       	andi	r24, 0xF0	; 240
     59c:	88 b9       	out	0x08, r24	; 8
	PORTC |= lower4;
     59e:	98 b1       	in	r25, 0x08	; 8
     5a0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <_ZL6lower4>
     5a4:	89 2b       	or	r24, r25
     5a6:	88 b9       	out	0x08, r24	; 8
	
	PORTD &= 0xFC;
     5a8:	8b b1       	in	r24, 0x0b	; 11
     5aa:	8c 7f       	andi	r24, 0xFC	; 252
     5ac:	8b b9       	out	0x0b, r24	; 11
	PORTD |= upper2;
     5ae:	9b b1       	in	r25, 0x0b	; 11
     5b0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__data_end>
     5b4:	89 2b       	or	r24, r25
     5b6:	8b b9       	out	0x0b, r24	; 11
     5b8:	08 95       	ret

000005ba <_Z10setupPortsv>:
}

void setupPorts(void)
{
	linkbus_disable();
     5ba:	0e 94 36 07 	call	0xe6c	; 0xe6c <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);    
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	8e e0       	ldi	r24, 0x0E	; 14
     5c2:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT); 
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	8f e0       	ldi	r24, 0x0F	; 15
     5ca:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	80 e1       	ldi	r24, 0x10	; 16
     5d2:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	81 e1       	ldi	r24, 0x11	; 17
     5da:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
     5ee:	08 95       	ret

000005f0 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	e4 2e       	mov	r14, r20
     5fe:	f5 2e       	mov	r15, r21
     600:	d6 2f       	mov	r29, r22
     602:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     604:	00 93 fb 02 	sts	0x02FB, r16	; 0x8002fb <_SAMPLING_FREQUENCY>
     608:	10 93 fc 02 	sts	0x02FC, r17	; 0x8002fc <_SAMPLING_FREQUENCY+0x1>
     60c:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <_SAMPLING_FREQUENCY+0x2>
     610:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	41 e5       	ldi	r20, 0x51	; 81
     61a:	53 e4       	ldi	r21, 0x43	; 67
     61c:	6e 2d       	mov	r22, r14
     61e:	7f 2d       	mov	r23, r15
     620:	8d 2f       	mov	r24, r29
     622:	9c 2f       	mov	r25, r28
     624:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__gesf2>
     628:	18 16       	cp	r1, r24
     62a:	6c f0       	brlt	.+26     	; 0x646 <_ZN8GoertzelC1Eff+0x56>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	48 ec       	ldi	r20, 0xC8	; 200
     632:	52 e4       	ldi	r21, 0x42	; 66
     634:	6e 2d       	mov	r22, r14
     636:	7f 2d       	mov	r23, r15
     638:	8d 2f       	mov	r24, r29
     63a:	9c 2f       	mov	r25, r28
     63c:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__cmpsf2>
     640:	88 23       	and	r24, r24
     642:	34 f0       	brlt	.+12     	; 0x650 <_ZN8GoertzelC1Eff+0x60>
     644:	09 c0       	rjmp	.+18     	; 0x658 <_ZN8GoertzelC1Eff+0x68>
     646:	e1 2c       	mov	r14, r1
     648:	f1 2c       	mov	r15, r1
     64a:	d1 e5       	ldi	r29, 0x51	; 81
     64c:	c3 e4       	ldi	r28, 0x43	; 67
     64e:	04 c0       	rjmp	.+8      	; 0x658 <_ZN8GoertzelC1Eff+0x68>
     650:	e1 2c       	mov	r14, r1
     652:	f1 2c       	mov	r15, r1
     654:	d8 ec       	ldi	r29, 0xC8	; 200
     656:	c2 e4       	ldi	r28, 0x42	; 66
     658:	6e 2d       	mov	r22, r14
     65a:	7f 2d       	mov	r23, r15
     65c:	8d 2f       	mov	r24, r29
     65e:	9c 2f       	mov	r25, r28
     660:	0e 94 98 26 	call	0x4d30	; 0x4d30 <__fixsfsi>
     664:	70 93 f6 02 	sts	0x02F6, r23	; 0x8002f6 <_N+0x1>
     668:	60 93 f5 02 	sts	0x02F5, r22	; 0x8002f5 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     66c:	cb 01       	movw	r24, r22
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	0e 94 61 29 	call	0x52c2	; 0x52c2 <malloc>
     676:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <testData+0x1>
     67a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <testData>
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	08 95       	ret

0000068c <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     68c:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <testData>
     690:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <testData+0x1>
     694:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <free>
     698:	08 95       	ret

0000069a <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     69a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <Q2>
     69e:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <Q2+0x1>
     6a2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <Q2+0x2>
     6a6:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <Q2+0x3>
	Q1 = 0;
     6aa:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <Q1>
     6ae:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <Q1+0x1>
     6b2:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <Q1+0x2>
     6b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <Q1+0x3>
	_samplesReady = false;
     6ba:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_samplesReady>
     6be:	08 95       	ret

000006c0 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	ec 01       	movw	r28, r24
     6d6:	4a 01       	movw	r8, r20
     6d8:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     6da:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <_N>
     6de:	70 91 f6 02 	lds	r23, 0x02F6	; 0x8002f6 <_N+0x1>
     6e2:	07 2e       	mov	r0, r23
     6e4:	00 0c       	add	r0, r0
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__floatsisf>
     6ee:	6b 01       	movw	r12, r22
     6f0:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     6f2:	80 92 f7 02 	sts	0x02F7, r8	; 0x8002f7 <_TARGET_FREQUENCY>
     6f6:	90 92 f8 02 	sts	0x02F8, r9	; 0x8002f8 <_TARGET_FREQUENCY+0x1>
     6fa:	a0 92 f9 02 	sts	0x02F9, r10	; 0x8002f9 <_TARGET_FREQUENCY+0x2>
     6fe:	b0 92 fa 02 	sts	0x02FA, r11	; 0x8002fa <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     702:	a5 01       	movw	r20, r10
     704:	94 01       	movw	r18, r8
     706:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     70a:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <_SAMPLING_FREQUENCY>
     70e:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <_SAMPLING_FREQUENCY+0x1>
     712:	40 91 fd 02 	lds	r20, 0x02FD	; 0x8002fd <_SAMPLING_FREQUENCY+0x2>
     716:	50 91 fe 02 	lds	r21, 0x02FE	; 0x8002fe <_SAMPLING_FREQUENCY+0x3>
     71a:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__divsf3>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__addsf3>
     72a:	0e 94 98 26 	call	0x4d30	; 0x4d30 <__fixsfsi>
     72e:	07 2e       	mov	r0, r23
     730:	00 0c       	add	r0, r0
     732:	88 0b       	sbc	r24, r24
     734:	99 0b       	sbc	r25, r25
     736:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__floatsisf>
     73a:	2b ed       	ldi	r18, 0xDB	; 219
     73c:	3f e0       	ldi	r19, 0x0F	; 15
     73e:	49 ec       	ldi	r20, 0xC9	; 201
     740:	50 e4       	ldi	r21, 0x40	; 64
     742:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     746:	a7 01       	movw	r20, r14
     748:	96 01       	movw	r18, r12
     74a:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__divsf3>
     74e:	0e 94 21 26 	call	0x4c42	; 0x4c42 <cos>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__addsf3>
     75a:	60 93 f1 02 	sts	0x02F1, r22	; 0x8002f1 <g_coeff>
     75e:	70 93 f2 02 	sts	0x02F2, r23	; 0x8002f2 <g_coeff+0x1>
     762:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <g_coeff+0x2>
     766:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <g_coeff+0x3>
	ResetGoertzel();
     76a:	ce 01       	movw	r24, r28
     76c:	0e 94 4d 03 	call	0x69a	; 0x69a <_ZN8Goertzel13ResetGoertzelEv>
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	08 95       	ret

00000786 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     786:	8f 92       	push	r8
     788:	9f 92       	push	r9
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     79c:	c0 90 ed 02 	lds	r12, 0x02ED	; 0x8002ed <Q1>
     7a0:	d0 90 ee 02 	lds	r13, 0x02EE	; 0x8002ee <Q1+0x1>
     7a4:	e0 90 ef 02 	lds	r14, 0x02EF	; 0x8002ef <Q1+0x2>
     7a8:	f0 90 f0 02 	lds	r15, 0x02F0	; 0x8002f0 <Q1+0x3>
     7ac:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <g_coeff>
     7b0:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <g_coeff+0x1>
     7b4:	40 91 f3 02 	lds	r20, 0x02F3	; 0x8002f3 <g_coeff+0x2>
     7b8:	50 91 f4 02 	lds	r21, 0x02F4	; 0x8002f4 <g_coeff+0x3>
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     7c4:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <Q2>
     7c8:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <Q2+0x1>
     7cc:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <Q2+0x2>
     7d0:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <Q2+0x3>
     7d4:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__subsf3>
     7d8:	4b 01       	movw	r8, r22
     7da:	5c 01       	movw	r10, r24
     7dc:	be 01       	movw	r22, r28
     7de:	72 50       	subi	r23, 0x02	; 2
     7e0:	07 2e       	mov	r0, r23
     7e2:	00 0c       	add	r0, r0
     7e4:	88 0b       	sbc	r24, r24
     7e6:	99 0b       	sbc	r25, r25
     7e8:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__floatsisf>
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	c5 01       	movw	r24, r10
     7f2:	b4 01       	movw	r22, r8
     7f4:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__addsf3>

	Q2 = Q1;
     7f8:	c0 92 e9 02 	sts	0x02E9, r12	; 0x8002e9 <Q2>
     7fc:	d0 92 ea 02 	sts	0x02EA, r13	; 0x8002ea <Q2+0x1>
     800:	e0 92 eb 02 	sts	0x02EB, r14	; 0x8002eb <Q2+0x2>
     804:	f0 92 ec 02 	sts	0x02EC, r15	; 0x8002ec <Q2+0x3>
	Q1 = Q0;
     808:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <Q1>
     80c:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <Q1+0x1>
     810:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <Q1+0x2>
     814:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <Q1+0x3>
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	bf 90       	pop	r11
     826:	af 90       	pop	r10
     828:	9f 90       	pop	r9
     82a:	8f 90       	pop	r8
     82c:	08 95       	ret

0000082e <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     82e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_samplesReady>
     832:	81 11       	cpse	r24, r1
     834:	27 c0       	rjmp	.+78     	; 0x884 <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     836:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_index>
     83a:	f0 91 e8 02 	lds	r31, 0x02E8	; 0x8002e8 <_index+0x1>
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <testData>
     846:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <testData+0x1>
     84a:	e8 0f       	add	r30, r24
     84c:	f9 1f       	adc	r31, r25
     84e:	71 83       	std	Z+1, r23	; 0x01
     850:	60 83       	st	Z, r22
	_index++;
     852:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <_index>
     856:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <_index+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_index+0x1>
     860:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_index>
	if(_index >= _N)
     864:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <_N>
     868:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <_N+0x1>
     86c:	82 17       	cp	r24, r18
     86e:	93 07       	cpc	r25, r19
     870:	3c f0       	brlt	.+14     	; 0x880 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     872:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <_index+0x1>
     876:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <_index>
		_samplesReady = true;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_samplesReady>
	}

	return(_samplesReady);
     880:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_samplesReady>
}
     884:	08 95       	ret

00000886 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     886:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_samplesReady>
     88a:	08 95       	ret

0000088c <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     88c:	4f 92       	push	r4
     88e:	5f 92       	push	r5
     890:	6f 92       	push	r6
     892:	7f 92       	push	r7
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     8ae:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_N>
     8b2:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <_N+0x1>
     8b6:	18 16       	cp	r1, r24
     8b8:	19 06       	cpc	r1, r25
     8ba:	c4 f4       	brge	.+48     	; 0x8ec <_ZN8Goertzel10Magnitude2Ev+0x60>
     8bc:	c0 e0       	ldi	r28, 0x00	; 0
     8be:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     8c0:	ce 01       	movw	r24, r28
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <testData>
     8ca:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <testData+0x1>
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	60 81       	ld	r22, Z
     8d4:	71 81       	ldd	r23, Z+1	; 0x01
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     8dc:	21 96       	adiw	r28, 0x01	; 1
     8de:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_N>
     8e2:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <_N+0x1>
     8e6:	c8 17       	cp	r28, r24
     8e8:	d9 07       	cpc	r29, r25
     8ea:	54 f3       	brlt	.-44     	; 0x8c0 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     8ec:	80 90 ed 02 	lds	r8, 0x02ED	; 0x8002ed <Q1>
     8f0:	90 90 ee 02 	lds	r9, 0x02EE	; 0x8002ee <Q1+0x1>
     8f4:	a0 90 ef 02 	lds	r10, 0x02EF	; 0x8002ef <Q1+0x2>
     8f8:	b0 90 f0 02 	lds	r11, 0x02F0	; 0x8002f0 <Q1+0x3>
     8fc:	c0 90 e9 02 	lds	r12, 0x02E9	; 0x8002e9 <Q2>
     900:	d0 90 ea 02 	lds	r13, 0x02EA	; 0x8002ea <Q2+0x1>
     904:	e0 90 eb 02 	lds	r14, 0x02EB	; 0x8002eb <Q2+0x2>
     908:	f0 90 ec 02 	lds	r15, 0x02EC	; 0x8002ec <Q2+0x3>
     90c:	a5 01       	movw	r20, r10
     90e:	94 01       	movw	r18, r8
     910:	c5 01       	movw	r24, r10
     912:	b4 01       	movw	r22, r8
     914:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     918:	2b 01       	movw	r4, r22
     91a:	3c 01       	movw	r6, r24
     91c:	a7 01       	movw	r20, r14
     91e:	96 01       	movw	r18, r12
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	c3 01       	movw	r24, r6
     92e:	b2 01       	movw	r22, r4
     930:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__addsf3>
     934:	2b 01       	movw	r4, r22
     936:	3c 01       	movw	r6, r24
     938:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <g_coeff>
     93c:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <g_coeff+0x1>
     940:	40 91 f3 02 	lds	r20, 0x02F3	; 0x8002f3 <g_coeff+0x2>
     944:	50 91 f4 02 	lds	r21, 0x02F4	; 0x8002f4 <g_coeff+0x3>
     948:	c5 01       	movw	r24, r10
     94a:	b4 01       	movw	r22, r8
     94c:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     950:	a7 01       	movw	r20, r14
     952:	96 01       	movw	r18, r12
     954:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
     958:	9b 01       	movw	r18, r22
     95a:	ac 01       	movw	r20, r24
     95c:	c3 01       	movw	r24, r6
     95e:	b2 01       	movw	r22, r4
     960:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__subsf3>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24

	ResetGoertzel();
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 4d 03 	call	0x69a	; 0x69a <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	bf 90       	pop	r11
     984:	af 90       	pop	r10
     986:	9f 90       	pop	r9
     988:	8f 90       	pop	r8
     98a:	7f 90       	pop	r7
     98c:	6f 90       	pop	r6
     98e:	5f 90       	pop	r5
     990:	4f 90       	pop	r4
     992:	08 95       	ret

00000994 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     994:	e4 e6       	ldi	r30, 0x64	; 100
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8f 77       	andi	r24, 0x7F	; 127
     99c:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     99e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     9a2:	85 e2       	ldi	r24, 0x25	; 37
     9a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     9b4:	08 95       	ret

000009b6 <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     9b6:	84 ea       	ldi	r24, 0xA4	; 164
     9b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     9bc:	ec eb       	ldi	r30, 0xBC	; 188
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	88 23       	and	r24, r24
     9c4:	64 f0       	brlt	.+24     	; 0x9de <_Z9i2c_startv+0x28>
     9c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     9ca:	81 11       	cpse	r24, r1
     9cc:	f9 cf       	rjmp	.-14     	; 0x9c0 <_Z9i2c_startv+0xa>
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     9d0:	80 e9       	ldi	r24, 0x90	; 144
     9d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     9dc:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     9de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     9e2:	88 23       	and	r24, r24
     9e4:	a9 f3       	breq	.-22     	; 0x9d0 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     9e8:	08 95       	ret

000009ea <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     9ea:	84 e9       	ldi	r24, 0x94	; 148
     9ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9f0:	08 95       	ret

000009f2 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     9f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     9f6:	84 e8       	ldi	r24, 0x84	; 132
     9f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     9fc:	ec eb       	ldi	r30, 0xBC	; 188
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	88 23       	and	r24, r24
     a04:	64 f0       	brlt	.+24     	; 0xa1e <_Z17i2c_write_successhh+0x2c>
     a06:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     a0a:	81 11       	cpse	r24, r1
     a0c:	f9 cf       	rjmp	.-14     	; 0xa00 <_Z17i2c_write_successhh+0xe>
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     a10:	84 e9       	ldi	r24, 0x94	; 148
     a12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     a1c:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     a1e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     a22:	88 7f       	andi	r24, 0xF8	; 248
     a24:	86 13       	cpse	r24, r22
     a26:	f4 cf       	rjmp	.-24     	; 0xa10 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     a28:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     a2a:	08 95       	ret

00000a2c <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     a2c:	84 ec       	ldi	r24, 0xC4	; 196
     a2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     a32:	ec eb       	ldi	r30, 0xBC	; 188
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	88 23       	and	r24, r24
     a3a:	24 f0       	brlt	.+8      	; 0xa44 <_Z12i2c_read_ackv+0x18>
     a3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     a40:	81 11       	cpse	r24, r1
     a42:	f9 cf       	rjmp	.-14     	; 0xa36 <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     a44:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     a48:	08 95       	ret

00000a4a <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     a4a:	84 e8       	ldi	r24, 0x84	; 132
     a4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     a50:	ec eb       	ldi	r30, 0xBC	; 188
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	88 23       	and	r24, r24
     a58:	24 f0       	brlt	.+8      	; 0xa62 <_Z13i2c_read_nackv+0x18>
     a5a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     a5e:	81 11       	cpse	r24, r1
     a60:	f9 cf       	rjmp	.-14     	; 0xa54 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     a62:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     a66:	08 95       	ret

00000a68 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     a68:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a6c:	28 7f       	andi	r18, 0xF8	; 248
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	28 17       	cp	r18, r24
     a74:	39 07       	cpc	r19, r25
     a76:	29 f0       	breq	.+10     	; 0xa82 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     a78:	84 e9       	ldi	r24, 0x94	; 148
     a7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	08 95       	ret
	}

	return(FALSE);
     a82:	80 e0       	ldi	r24, 0x00	; 0
}
     a84:	08 95       	ret

00000a86 <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <_Z16i2c_device_writehhPhh+0x6>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <_Z16i2c_device_writehhPhh+0x8>
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <_Z16i2c_device_writehhPhh+0xa>
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	8a 83       	std	Y+2, r24	; 0x02
     a96:	6b 83       	std	Y+3, r22	; 0x03
     a98:	5d 83       	std	Y+5, r21	; 0x05
     a9a:	4c 83       	std	Y+4, r20	; 0x04
     a9c:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     a9e:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     aa0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     aa4:	88 e0       	ldi	r24, 0x08	; 8
     aa6:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z10i2c_statush>
     aaa:	98 2f       	mov	r25, r24
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	99 23       	and	r25, r25
     ab0:	09 f4       	brne	.+2      	; 0xab4 <_Z16i2c_device_writehhPhh+0x2e>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	88 23       	and	r24, r24
     ab6:	11 f0       	breq	.+4      	; 0xabc <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	3f c0       	rjmp	.+126    	; 0xb3a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     abc:	68 e1       	ldi	r22, 0x18	; 24
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17i2c_write_successhh>
     ac4:	98 2f       	mov	r25, r24
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	99 23       	and	r25, r25
     aca:	09 f4       	brne	.+2      	; 0xace <_Z16i2c_device_writehhPhh+0x48>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	88 23       	and	r24, r24
     ad0:	11 f0       	breq	.+4      	; 0xad6 <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	32 c0       	rjmp	.+100    	; 0xb3a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     ad6:	68 e2       	ldi	r22, 0x28	; 40
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17i2c_write_successhh>
     ade:	98 2f       	mov	r25, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	99 23       	and	r25, r25
     ae4:	09 f4       	brne	.+2      	; 0xae8 <_Z16i2c_device_writehhPhh+0x62>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	88 23       	and	r24, r24
     aea:	11 f0       	breq	.+4      	; 0xaf0 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	25 c0       	rjmp	.+74     	; 0xb3a <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	98 0f       	add	r25, r24
     af6:	9e 83       	std	Y+6, r25	; 0x06
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <_Z16i2c_device_writehhPhh+0x7a>
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	99 23       	and	r25, r25
     b02:	c1 f0       	breq	.+48     	; 0xb34 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	98 0f       	add	r25, r24
     b0a:	99 83       	std	Y+1, r25	; 0x01
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	2c 81       	ldd	r18, Y+4	; 0x04
     b12:	3d 81       	ldd	r19, Y+5	; 0x05
     b14:	82 0f       	add	r24, r18
     b16:	93 1f       	adc	r25, r19
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	68 e2       	ldi	r22, 0x28	; 40
     b1e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17i2c_write_successhh>
     b22:	98 2f       	mov	r25, r24
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	99 23       	and	r25, r25
     b28:	09 f4       	brne	.+2      	; 0xb2c <_Z16i2c_device_writehhPhh+0xa6>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	88 23       	and	r24, r24
     b2e:	01 f3       	breq	.-64     	; 0xaf0 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     b34:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     b38:	80 e0       	ldi	r24, 0x00	; 0
}
     b3a:	26 96       	adiw	r28, 0x06	; 6
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_Z15i2c_device_readhhPhh+0xa>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <_Z15i2c_device_readhhPhh+0xc>
     b58:	00 d0       	rcall	.+0      	; 0xb5a <_Z15i2c_device_readhhPhh+0xe>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	8a 83       	std	Y+2, r24	; 0x02
     b60:	6b 83       	std	Y+3, r22	; 0x03
     b62:	5d 83       	std	Y+5, r21	; 0x05
     b64:	4c 83       	std	Y+4, r20	; 0x04
     b66:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     b68:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     b6a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z10i2c_statush>
     b74:	98 2f       	mov	r25, r24
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	99 23       	and	r25, r25
     b7a:	09 f4       	brne	.+2      	; 0xb7e <_Z15i2c_device_readhhPhh+0x32>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	88 23       	and	r24, r24
     b80:	11 f0       	breq	.+4      	; 0xb86 <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	79 c0       	rjmp	.+242    	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     b86:	68 e1       	ldi	r22, 0x18	; 24
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17i2c_write_successhh>
     b8e:	98 2f       	mov	r25, r24
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	99 23       	and	r25, r25
     b94:	09 f4       	brne	.+2      	; 0xb98 <_Z15i2c_device_readhhPhh+0x4c>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	88 23       	and	r24, r24
     b9a:	11 f0       	breq	.+4      	; 0xba0 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	6c c0       	rjmp	.+216    	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     ba0:	68 e2       	ldi	r22, 0x28	; 40
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17i2c_write_successhh>
     ba8:	98 2f       	mov	r25, r24
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	99 23       	and	r25, r25
     bae:	09 f4       	brne	.+2      	; 0xbb2 <_Z15i2c_device_readhhPhh+0x66>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	88 23       	and	r24, r24
     bb4:	11 f0       	breq	.+4      	; 0xbba <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	5f c0       	rjmp	.+190    	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     bba:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     bbe:	80 e1       	ldi	r24, 0x10	; 16
     bc0:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z10i2c_statush>
     bc4:	98 2f       	mov	r25, r24
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	99 23       	and	r25, r25
     bca:	09 f4       	brne	.+2      	; 0xbce <_Z15i2c_device_readhhPhh+0x82>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	88 23       	and	r24, r24
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	51 c0       	rjmp	.+162    	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	81 60       	ori	r24, 0x01	; 1
     bda:	60 e4       	ldi	r22, 0x40	; 64
     bdc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17i2c_write_successhh>
     be0:	98 2f       	mov	r25, r24
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	99 23       	and	r25, r25
     be6:	09 f4       	brne	.+2      	; 0xbea <_Z15i2c_device_readhhPhh+0x9e>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	88 23       	and	r24, r24
     bec:	11 f0       	breq	.+4      	; 0xbf2 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
     bf2:	8e 81       	ldd	r24, Y+6	; 0x06
     bf4:	9f ef       	ldi	r25, 0xFF	; 255
     bf6:	98 0f       	add	r25, r24
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	88 23       	and	r24, r24
     bfe:	09 f4       	brne	.+2      	; 0xc02 <_Z15i2c_device_readhhPhh+0xb6>
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	99 23       	and	r25, r25
     c04:	b1 f1       	breq	.+108    	; 0xc72 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
     c06:	8e 81       	ldd	r24, Y+6	; 0x06
     c08:	88 23       	and	r24, r24
     c0a:	d9 f0       	breq	.+54     	; 0xc42 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	98 0f       	add	r25, r24
     c12:	99 83       	std	Y+1, r25	; 0x01
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	2c 81       	ldd	r18, Y+4	; 0x04
     c1a:	3d 81       	ldd	r19, Y+5	; 0x05
     c1c:	89 01       	movw	r16, r18
     c1e:	08 0f       	add	r16, r24
     c20:	19 1f       	adc	r17, r25
     c22:	0e 94 16 05 	call	0xa2c	; 0xa2c <_Z12i2c_read_ackv>
     c26:	f8 01       	movw	r30, r16
     c28:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
     c2a:	80 e5       	ldi	r24, 0x50	; 80
     c2c:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z10i2c_statush>
     c30:	98 2f       	mov	r25, r24
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	99 23       	and	r25, r25
     c36:	09 f4       	brne	.+2      	; 0xc3a <_Z15i2c_device_readhhPhh+0xee>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	88 23       	and	r24, r24
     c3c:	d1 f2       	breq	.-76     	; 0xbf2 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	2c 81       	ldd	r18, Y+4	; 0x04
     c4a:	3d 81       	ldd	r19, Y+5	; 0x05
     c4c:	89 01       	movw	r16, r18
     c4e:	08 0f       	add	r16, r24
     c50:	19 1f       	adc	r17, r25
     c52:	0e 94 25 05 	call	0xa4a	; 0xa4a <_Z13i2c_read_nackv>
     c56:	f8 01       	movw	r30, r16
     c58:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
     c5a:	88 e5       	ldi	r24, 0x58	; 88
     c5c:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z10i2c_statush>
     c60:	98 2f       	mov	r25, r24
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	99 23       	and	r25, r25
     c66:	09 f4       	brne	.+2      	; 0xc6a <_Z15i2c_device_readhhPhh+0x11e>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	88 23       	and	r24, r24
     c6c:	11 f2       	breq	.-124    	; 0xbf2 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
     c72:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     c76:	80 e0       	ldi	r24, 0x00	; 0
}
     c78:	26 96       	adiw	r28, 0x06	; 6
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	08 95       	ret

00000c8e <_Z16nextFullTxBufferv>:

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	linkbus_send_text(g_tempMsgBuff);
}
     c8e:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c92:	94 e0       	ldi	r25, 0x04	; 4
     c94:	59 e2       	ldi	r21, 0x29	; 41
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	52 9f       	mul	r21, r18
     c9c:	f0 01       	movw	r30, r0
     c9e:	53 9f       	mul	r21, r19
     ca0:	f0 0d       	add	r31, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	ef 57       	subi	r30, 0x7F	; 127
     ca6:	fc 4f       	sbci	r31, 0xFC	; 252
     ca8:	40 81       	ld	r20, Z
     caa:	41 11       	cpse	r20, r1
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <_Z16nextFullTxBufferv+0x38>
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	29 f0       	breq	.+10     	; 0xcbc <_Z16nextFullTxBufferv+0x2e>
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	78 f3       	brcs	.-34     	; 0xc96 <_Z16nextFullTxBufferv+0x8>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	ed cf       	rjmp	.-38     	; 0xc96 <_Z16nextFullTxBufferv+0x8>
     cbc:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZZ16nextFullTxBuffervE11bufferIndex>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	08 95       	ret
     cc6:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZZ16nextFullTxBuffervE11bufferIndex>
     cca:	49 e2       	ldi	r20, 0x29	; 41
     ccc:	42 9f       	mul	r20, r18
     cce:	c0 01       	movw	r24, r0
     cd0:	43 9f       	mul	r20, r19
     cd2:	90 0d       	add	r25, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	8f 57       	subi	r24, 0x7F	; 127
     cd8:	9c 4f       	sbci	r25, 0xFC	; 252
     cda:	08 95       	ret

00000cdc <_Z17nextEmptyTxBufferv>:
     cdc:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	59 e2       	ldi	r21, 0x29	; 41
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	52 9f       	mul	r21, r18
     cea:	f0 01       	movw	r30, r0
     cec:	53 9f       	mul	r21, r19
     cee:	f0 0d       	add	r31, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	ef 57       	subi	r30, 0x7F	; 127
     cf4:	fc 4f       	sbci	r31, 0xFC	; 252
     cf6:	40 81       	ld	r20, Z
     cf8:	44 23       	and	r20, r20
     cfa:	61 f0       	breq	.+24     	; 0xd14 <_Z17nextEmptyTxBufferv+0x38>
     cfc:	91 50       	subi	r25, 0x01	; 1
     cfe:	29 f0       	breq	.+10     	; 0xd0a <_Z17nextEmptyTxBufferv+0x2e>
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	78 f3       	brcs	.-34     	; 0xce4 <_Z17nextEmptyTxBufferv+0x8>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	ed cf       	rjmp	.-38     	; 0xce4 <_Z17nextEmptyTxBufferv+0x8>
     d0a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 95       	ret
     d14:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     d18:	49 e2       	ldi	r20, 0x29	; 41
     d1a:	42 9f       	mul	r20, r18
     d1c:	c0 01       	movw	r24, r0
     d1e:	43 9f       	mul	r20, r19
     d20:	90 0d       	add	r25, r0
     d22:	11 24       	eor	r1, r1
     d24:	8f 57       	subi	r24, 0x7F	; 127
     d26:	9c 4f       	sbci	r25, 0xFC	; 252
     d28:	08 95       	ret

00000d2a <_Z17nextEmptyRxBufferv>:
     d2a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	9f e3       	ldi	r25, 0x3F	; 63
     d34:	89 9f       	mul	r24, r25
     d36:	f0 01       	movw	r30, r0
     d38:	11 24       	eor	r1, r1
     d3a:	ed 5f       	subi	r30, 0xFD	; 253
     d3c:	fc 4f       	sbci	r31, 0xFC	; 252
     d3e:	41 81       	ldd	r20, Z+1	; 0x01
     d40:	52 81       	ldd	r21, Z+2	; 0x02
     d42:	45 2b       	or	r20, r21
     d44:	a9 f0       	breq	.+42     	; 0xd70 <_Z17nextEmptyRxBufferv+0x46>
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <_Z17nextEmptyRxBufferv+0x24>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	9f e3       	ldi	r25, 0x3F	; 63
     d54:	89 9f       	mul	r24, r25
     d56:	f0 01       	movw	r30, r0
     d58:	11 24       	eor	r1, r1
     d5a:	ed 5f       	subi	r30, 0xFD	; 253
     d5c:	fc 4f       	sbci	r31, 0xFC	; 252
     d5e:	41 81       	ldd	r20, Z+1	; 0x01
     d60:	52 81       	ldd	r21, Z+2	; 0x02
     d62:	45 2b       	or	r20, r21
     d64:	29 f0       	breq	.+10     	; 0xd70 <_Z17nextEmptyRxBufferv+0x46>
     d66:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	08 95       	ret
     d70:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     d74:	4f e3       	ldi	r20, 0x3F	; 63
     d76:	42 9f       	mul	r20, r18
     d78:	c0 01       	movw	r24, r0
     d7a:	43 9f       	mul	r20, r19
     d7c:	90 0d       	add	r25, r0
     d7e:	11 24       	eor	r1, r1
     d80:	8d 5f       	subi	r24, 0xFD	; 253
     d82:	9c 4f       	sbci	r25, 0xFC	; 252
     d84:	08 95       	ret

00000d86 <_Z16nextFullRxBufferv>:
     d86:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZZ16nextFullRxBuffervE11bufferIndex>
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	9f e3       	ldi	r25, 0x3F	; 63
     d90:	89 9f       	mul	r24, r25
     d92:	f0 01       	movw	r30, r0
     d94:	11 24       	eor	r1, r1
     d96:	ed 5f       	subi	r30, 0xFD	; 253
     d98:	fc 4f       	sbci	r31, 0xFC	; 252
     d9a:	41 81       	ldd	r20, Z+1	; 0x01
     d9c:	52 81       	ldd	r21, Z+2	; 0x02
     d9e:	45 2b       	or	r20, r21
     da0:	a9 f4       	brne	.+42     	; 0xdcc <_Z16nextFullRxBufferv+0x46>
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	08 f0       	brcs	.+2      	; 0xdaa <_Z16nextFullRxBufferv+0x24>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	9f e3       	ldi	r25, 0x3F	; 63
     db0:	89 9f       	mul	r24, r25
     db2:	f0 01       	movw	r30, r0
     db4:	11 24       	eor	r1, r1
     db6:	ed 5f       	subi	r30, 0xFD	; 253
     db8:	fc 4f       	sbci	r31, 0xFC	; 252
     dba:	41 81       	ldd	r20, Z+1	; 0x01
     dbc:	52 81       	ldd	r21, Z+2	; 0x02
     dbe:	45 2b       	or	r20, r21
     dc0:	29 f4       	brne	.+10     	; 0xdcc <_Z16nextFullRxBufferv+0x46>
     dc2:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZ16nextFullRxBuffervE11bufferIndex>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	08 95       	ret
     dcc:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZ16nextFullRxBuffervE11bufferIndex>
     dd0:	4f e3       	ldi	r20, 0x3F	; 63
     dd2:	42 9f       	mul	r20, r18
     dd4:	c0 01       	movw	r24, r0
     dd6:	43 9f       	mul	r20, r19
     dd8:	90 0d       	add	r25, r0
     dda:	11 24       	eor	r1, r1
     ddc:	8d 5f       	subi	r24, 0xFD	; 253
     dde:	9c 4f       	sbci	r25, 0xFC	; 252
     de0:	08 95       	ret

00000de2 <_Z19linkbusTxInProgressv>:
     de2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZL17linkbus_tx_active>
     de6:	08 95       	ret

00000de8 <_Z16linkbus_start_txv>:
     de8:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <_ZL17linkbus_tx_active>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	91 11       	cpse	r25, r1
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	91 11       	cpse	r25, r1
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <_Z16linkbus_start_txv+0x1e>
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <_ZL17linkbus_tx_active>
     dfc:	e1 ec       	ldi	r30, 0xC1	; 193
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	90 81       	ld	r25, Z
     e02:	90 62       	ori	r25, 0x20	; 32
     e04:	90 83       	st	Z, r25
     e06:	08 95       	ret

00000e08 <_Z14linkbus_end_txv>:
     e08:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZL17linkbus_tx_active>
     e0c:	88 23       	and	r24, r24
     e0e:	39 f0       	breq	.+14     	; 0xe1e <_Z14linkbus_end_txv+0x16>
     e10:	e1 ec       	ldi	r30, 0xC1	; 193
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	80 83       	st	Z, r24
     e1a:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_ZL17linkbus_tx_active>
     e1e:	08 95       	ret

00000e20 <_Z12linkbus_initm>:
     e20:	9b 01       	movw	r18, r22
     e22:	ac 01       	movw	r20, r24
     e24:	8e e7       	ldi	r24, 0x7E	; 126
     e26:	e3 e0       	ldi	r30, 0x03	; 3
     e28:	f3 e0       	ldi	r31, 0x03	; 3
     e2a:	df 01       	movw	r26, r30
     e2c:	1d 92       	st	X+, r1
     e2e:	8a 95       	dec	r24
     e30:	e9 f7       	brne	.-6      	; 0xe2c <_Z12linkbus_initm+0xc>
     e32:	e1 e8       	ldi	r30, 0x81	; 129
     e34:	f3 e0       	ldi	r31, 0x03	; 3
     e36:	10 82       	st	Z, r1
     e38:	11 a6       	std	Z+41, r1	; 0x29
     e3a:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <_ZL9tx_buffer+0x52>
     e3e:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ZL9tx_buffer+0x7b>
     e42:	60 e4       	ldi	r22, 0x40	; 64
     e44:	72 e4       	ldi	r23, 0x42	; 66
     e46:	8f e0       	ldi	r24, 0x0F	; 15
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <__udivmodsi4>
     e4e:	21 50       	subi	r18, 0x01	; 1
     e50:	31 09       	sbc	r19, r1
     e52:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e56:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     e5a:	88 e9       	ldi	r24, 0x98	; 152
     e5c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e60:	8e e0       	ldi	r24, 0x0E	; 14
     e62:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     e66:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
     e6a:	08 95       	ret

00000e6c <_Z15linkbus_disablev>:
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
     e72:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e76:	0e 94 04 07 	call	0xe08	; 0xe08 <_Z14linkbus_end_txv>
     e7a:	8e e7       	ldi	r24, 0x7E	; 126
     e7c:	e3 e0       	ldi	r30, 0x03	; 3
     e7e:	f3 e0       	ldi	r31, 0x03	; 3
     e80:	df 01       	movw	r26, r30
     e82:	1d 92       	st	X+, r1
     e84:	8a 95       	dec	r24
     e86:	e9 f7       	brne	.-6      	; 0xe82 <_Z15linkbus_disablev+0x16>
     e88:	e1 e8       	ldi	r30, 0x81	; 129
     e8a:	f3 e0       	ldi	r31, 0x03	; 3
     e8c:	10 82       	st	Z, r1
     e8e:	11 a6       	std	Z+41, r1	; 0x29
     e90:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <_ZL9tx_buffer+0x52>
     e94:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ZL9tx_buffer+0x7b>
     e98:	08 95       	ret

00000e9a <_Z17linkbus_send_textPc>:
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     ea6:	21 11       	cpse	r18, r1
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <_Z17linkbus_send_textPc+0x38>
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 f0       	breq	.+40     	; 0xed6 <_Z17linkbus_send_textPc+0x3c>
     eae:	8c 01       	movw	r16, r24
     eb0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z17nextEmptyTxBufferv>
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	b9 f4       	brne	.+46     	; 0xee6 <_Z17linkbus_send_textPc+0x4c>
     eb8:	c8 ec       	ldi	r28, 0xC8	; 200
     eba:	d0 e0       	ldi	r29, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <_Z17linkbus_send_textPc+0x28>
     ebe:	20 97       	sbiw	r28, 0x00	; 0
     ec0:	61 f0       	breq	.+24     	; 0xeda <_Z17linkbus_send_textPc+0x40>
     ec2:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <_ZL17linkbus_tx_active>
     ec6:	99 23       	and	r25, r25
     ec8:	51 f0       	breq	.+20     	; 0xede <_Z17linkbus_send_textPc+0x44>
     eca:	20 97       	sbiw	r28, 0x00	; 0
     ecc:	d1 f0       	breq	.+52     	; 0xf02 <_Z17linkbus_send_textPc+0x68>
     ece:	21 97       	sbiw	r28, 0x01	; 1
     ed0:	f8 cf       	rjmp	.-16     	; 0xec2 <_Z17linkbus_send_textPc+0x28>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	1b c0       	rjmp	.+54     	; 0xf0c <_Z17linkbus_send_textPc+0x72>
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	19 c0       	rjmp	.+50     	; 0xf0c <_Z17linkbus_send_textPc+0x72>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	17 c0       	rjmp	.+46     	; 0xf0c <_Z17linkbus_send_textPc+0x72>
     ede:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z17nextEmptyTxBufferv>
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	61 f3       	breq	.-40     	; 0xebe <_Z17linkbus_send_textPc+0x24>
     ee6:	1f 93       	push	r17
     ee8:	0f 93       	push	r16
     eea:	9f 93       	push	r25
     eec:	8f 93       	push	r24
     eee:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
     ef2:	0e 94 f4 06 	call	0xde8	; 0xde8 <_Z16linkbus_start_txv>
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <_Z17linkbus_send_textPc+0x72>
     f02:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_Z17nextEmptyTxBufferv>
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	71 f7       	brne	.-36     	; 0xee6 <_Z17linkbus_send_textPc+0x4c>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <_Z17lb_send_NewPromptv>:
     f16:	83 e2       	ldi	r24, 0x23	; 35
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_Z17linkbus_send_textPc>
     f1e:	81 11       	cpse	r24, r1
     f20:	fa cf       	rjmp	.-12     	; 0xf16 <_Z17lb_send_NewPromptv>
     f22:	08 95       	ret

00000f24 <_Z15lb_send_NewLinev>:
     f24:	86 e2       	ldi	r24, 0x26	; 38
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_Z17linkbus_send_textPc>
     f2c:	08 95       	ret

00000f2e <_Z12lb_echo_charh>:
     f2e:	e6 e2       	ldi	r30, 0x26	; 38
     f30:	f4 e0       	ldi	r31, 0x04	; 4
     f32:	80 83       	st	Z, r24
     f34:	11 82       	std	Z+1, r1	; 0x01
     f36:	cf 01       	movw	r24, r30
     f38:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_Z17linkbus_send_textPc>
     f3c:	08 95       	ret

00000f3e <_Z14lb_send_stringPch>:
     f3e:	cf 93       	push	r28
     f40:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     f44:	21 11       	cpse	r18, r1
     f46:	25 c0       	rjmp	.+74     	; 0xf92 <_Z14lb_send_stringPch+0x54>
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	29 f1       	breq	.+74     	; 0xf96 <_Z14lb_send_stringPch+0x58>
     f4c:	fc 01       	movw	r30, r24
     f4e:	01 90       	ld	r0, Z+
     f50:	00 20       	and	r0, r0
     f52:	e9 f7       	brne	.-6      	; 0xf4e <_Z14lb_send_stringPch+0x10>
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	e8 1b       	sub	r30, r24
     f58:	f9 0b       	sbc	r31, r25
     f5a:	ba 97       	sbiw	r30, 0x2a	; 42
     f5c:	f0 f4       	brcc	.+60     	; 0xf9a <_Z14lb_send_stringPch+0x5c>
     f5e:	c6 2f       	mov	r28, r22
     f60:	bc 01       	movw	r22, r24
     f62:	49 e2       	ldi	r20, 0x29	; 41
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	86 e2       	ldi	r24, 0x26	; 38
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <strncpy>
     f6e:	cc 23       	and	r28, r28
     f70:	59 f0       	breq	.+22     	; 0xf88 <_Z14lb_send_stringPch+0x4a>
     f72:	86 e2       	ldi	r24, 0x26	; 38
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_Z17linkbus_send_textPc>
     f7a:	81 11       	cpse	r24, r1
     f7c:	fa cf       	rjmp	.-12     	; 0xf72 <_Z14lb_send_stringPch+0x34>
     f7e:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZL17linkbus_tx_active>
     f82:	81 11       	cpse	r24, r1
     f84:	fc cf       	rjmp	.-8      	; 0xf7e <_Z14lb_send_stringPch+0x40>
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <_Z14lb_send_stringPch+0x5e>
     f88:	86 e2       	ldi	r24, 0x26	; 38
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_Z17linkbus_send_textPc>
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <_Z14lb_send_stringPch+0x5e>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <_Z14lb_send_stringPch+0x5e>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <_Z14lb_send_stringPch+0x5e>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <_Z12lb_send_Helpv>:
/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
	if(g_bus_disabled)
     fa0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     fa4:	81 11       	cpse	r24, r1
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <_Z12lb_send_Helpv+0x24>
	{
		return;
	}

	lb_send_NewLine();
     fa8:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z15lb_send_NewLinev>
	sendEEPROMString(&ee_textVersion[0]);
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textHelp[0]);
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	lb_send_NewLine();
     fbc:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     fc0:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z15lb_send_NewLinev>
     fc4:	08 95       	ret

00000fc6 <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	8b e0       	ldi	r24, 0x0B	; 11
     fec:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
     ff0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	86 ef       	ldi	r24, 0xF6	; 246
     ff8:	94 e0       	ldi	r25, 0x04	; 4
     ffa:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN8Goertzel9DataPointEi>
     ffe:	88 23       	and	r24, r24
    1000:	29 f0       	breq	.+10     	; 0x100c <__vector_21+0x46>
    1002:	ea e7       	ldi	r30, 0x7A	; 122
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	87 7f       	andi	r24, 0xF7	; 247
    100a:	80 83       	st	Z, r24
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	8b e0       	ldi	r24, 0x0B	; 11
    1010:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__vector_18>:
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	1f 93       	push	r17
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1062:	c0 91 cb 04 	lds	r28, 0x04CB	; 0x8004cb <_ZZ11__vector_18E4buff>
    1066:	d0 91 cc 04 	lds	r29, 0x04CC	; 0x8004cc <_ZZ11__vector_18E4buff+0x1>
    106a:	20 97       	sbiw	r28, 0x00	; 0
    106c:	51 f4       	brne	.+20     	; 0x1082 <__vector_18+0x4c>
    106e:	0e 94 95 06 	call	0xd2a	; 0xd2a <_Z17nextEmptyRxBufferv>
    1072:	ec 01       	movw	r28, r24
    1074:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <_ZZ11__vector_18E4buff+0x1>
    1078:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZZ11__vector_18E4buff>
    107c:	89 2b       	or	r24, r25
    107e:	09 f4       	brne	.+2      	; 0x1082 <__vector_18+0x4c>
    1080:	62 c1       	rjmp	.+708    	; 0x1346 <__vector_18+0x310>
    1082:	81 2f       	mov	r24, r17
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 c7 2a 	call	0x558e	; 0x558e <toupper>
    108a:	9c 01       	movw	r18, r24
    108c:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZZ11__vector_18E11ignoreCount>
    1090:	88 23       	and	r24, r24
    1092:	21 f0       	breq	.+8      	; 0x109c <__vector_18+0x66>
    1094:	81 50       	subi	r24, 0x01	; 1
    1096:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZZ11__vector_18E11ignoreCount>
    109a:	55 c1       	rjmp	.+682    	; 0x1346 <__vector_18+0x310>
    109c:	2b 31       	cpi	r18, 0x1B	; 27
    109e:	21 f4       	brne	.+8      	; 0x10a8 <__vector_18+0x72>
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZZ11__vector_18E11ignoreCount>
    10a6:	4f c1       	rjmp	.+670    	; 0x1346 <__vector_18+0x310>
    10a8:	2d 30       	cpi	r18, 0x0D	; 13
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__vector_18+0x78>
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <__vector_18+0xf6>
    10ae:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ11__vector_18E13receiving_msg>
    10b2:	88 23       	and	r24, r24
    10b4:	31 f1       	breq	.+76     	; 0x1102 <__vector_18+0xcc>
    10b6:	e0 91 c9 04 	lds	r30, 0x04C9	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    10ba:	ee 23       	and	r30, r30
    10bc:	f9 f0       	breq	.+62     	; 0x10fc <__vector_18+0xc6>
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	88 83       	st	Y, r24
    10c2:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    10c6:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ11__vector_18E11field_index>
    10d2:	88 23       	and	r24, r24
    10d4:	79 f0       	breq	.+30     	; 0x10f4 <__vector_18+0xbe>
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	40 91 85 04 	lds	r20, 0x0485	; 0x800485 <_ZZ11__vector_18E9field_len>
    10de:	54 e1       	ldi	r21, 0x14	; 20
    10e0:	58 9f       	mul	r21, r24
    10e2:	90 01       	movw	r18, r0
    10e4:	59 9f       	mul	r21, r25
    10e6:	30 0d       	add	r19, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	c2 0f       	add	r28, r18
    10ec:	d3 1f       	adc	r29, r19
    10ee:	c4 0f       	add	r28, r20
    10f0:	d1 1d       	adc	r29, r1
    10f2:	1b 82       	std	Y+3, r1	; 0x03
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	e6 57       	subi	r30, 0x76	; 118
    10f8:	fb 4f       	sbci	r31, 0xFB	; 251
    10fa:	10 82       	st	Z, r1
    10fc:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z15lb_send_NewLinev>
    1100:	04 c0       	rjmp	.+8      	; 0x110a <__vector_18+0xd4>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	9f e7       	ldi	r25, 0x7F	; 127
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    110e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ11__vector_18E9field_len>
    1112:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    1116:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    111a:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ11__vector_18E11field_index>
    111e:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZZ11__vector_18E4buff+0x1>
    1122:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <_ZZ11__vector_18E4buff>
    1126:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E13receiving_msg>
    112a:	0d c1       	rjmp	.+538    	; 0x1346 <__vector_18+0x310>
    112c:	22 23       	and	r18, r18
    112e:	09 f4       	brne	.+2      	; 0x1132 <__vector_18+0xfc>
    1130:	0a c1       	rjmp	.+532    	; 0x1346 <__vector_18+0x310>
    1132:	e0 91 c9 04 	lds	r30, 0x04C9	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    1136:	4e 2f       	mov	r20, r30
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	da 01       	movw	r26, r20
    113c:	a6 57       	subi	r26, 0x76	; 118
    113e:	bb 4f       	sbci	r27, 0xFB	; 251
    1140:	2c 93       	st	X, r18
    1142:	ee 23       	and	r30, r30
    1144:	09 f4       	brne	.+2      	; 0x1148 <__vector_18+0x112>
    1146:	d6 c0       	rjmp	.+428    	; 0x12f4 <__vector_18+0x2be>
    1148:	2f 37       	cpi	r18, 0x7F	; 127
    114a:	09 f0       	breq	.+2      	; 0x114e <__vector_18+0x118>
    114c:	5f c0       	rjmp	.+190    	; 0x120c <__vector_18+0x1d6>
    114e:	e1 50       	subi	r30, 0x01	; 1
    1150:	e0 93 c9 04 	sts	0x04C9, r30	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    1154:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ11__vector_18E11field_index>
    1158:	81 11       	cpse	r24, r1
    115a:	13 c0       	rjmp	.+38     	; 0x1182 <__vector_18+0x14c>
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	e6 57       	subi	r30, 0x76	; 118
    1160:	fb 4f       	sbci	r31, 0xFB	; 251
    1162:	40 81       	ld	r20, Z
    1164:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    1168:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    116c:	84 1b       	sub	r24, r20
    116e:	91 09       	sbc	r25, r1
    1170:	6a e0       	ldi	r22, 0x0A	; 10
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    1178:	70 93 88 04 	sts	0x0488, r23	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    117c:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    1180:	39 c0       	rjmp	.+114    	; 0x11f4 <__vector_18+0x1be>
    1182:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZZ11__vector_18E9field_len>
    1186:	99 23       	and	r25, r25
    1188:	91 f0       	breq	.+36     	; 0x11ae <__vector_18+0x178>
    118a:	4f ef       	ldi	r20, 0xFF	; 255
    118c:	49 0f       	add	r20, r25
    118e:	40 93 85 04 	sts	0x0485, r20	; 0x800485 <_ZZ11__vector_18E9field_len>
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	54 e1       	ldi	r21, 0x14	; 20
    1198:	58 9f       	mul	r21, r24
    119a:	b0 01       	movw	r22, r0
    119c:	59 9f       	mul	r21, r25
    119e:	70 0d       	add	r23, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	c6 0f       	add	r28, r22
    11a4:	d7 1f       	adc	r29, r23
    11a6:	c4 0f       	add	r28, r20
    11a8:	d1 1d       	adc	r29, r1
    11aa:	1b 82       	std	Y+3, r1	; 0x03
    11ac:	23 c0       	rjmp	.+70     	; 0x11f4 <__vector_18+0x1be>
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	e6 57       	subi	r30, 0x76	; 118
    11b2:	fb 4f       	sbci	r31, 0xFB	; 251
    11b4:	90 81       	ld	r25, Z
    11b6:	90 32       	cpi	r25, 0x20	; 32
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <__vector_18+0x1ac>
    11ba:	81 50       	subi	r24, 0x01	; 1
    11bc:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ11__vector_18E11field_index>
    11c0:	de 01       	movw	r26, r28
    11c2:	94 e1       	ldi	r25, 0x14	; 20
    11c4:	89 9f       	mul	r24, r25
    11c6:	a0 0d       	add	r26, r0
    11c8:	b1 1d       	adc	r27, r1
    11ca:	11 24       	eor	r1, r1
    11cc:	13 96       	adiw	r26, 0x03	; 3
    11ce:	fd 01       	movw	r30, r26
    11d0:	01 90       	ld	r0, Z+
    11d2:	00 20       	and	r0, r0
    11d4:	e9 f7       	brne	.-6      	; 0x11d0 <__vector_18+0x19a>
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	ea 1b       	sub	r30, r26
    11da:	fb 0b       	sbc	r31, r27
    11dc:	e0 93 85 04 	sts	0x0485, r30	; 0x800485 <_ZZ11__vector_18E9field_len>
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <__vector_18+0x1be>
    11e2:	94 e1       	ldi	r25, 0x14	; 20
    11e4:	89 9f       	mul	r24, r25
    11e6:	c0 0d       	add	r28, r0
    11e8:	d1 1d       	adc	r29, r1
    11ea:	11 24       	eor	r1, r1
    11ec:	1b 82       	std	Y+3, r1	; 0x03
    11ee:	81 50       	subi	r24, 0x01	; 1
    11f0:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ11__vector_18E11field_index>
    11f4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    11f8:	e8 2f       	mov	r30, r24
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	e6 57       	subi	r30, 0x76	; 118
    11fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1200:	10 82       	st	Z, r1
    1202:	81 11       	cpse	r24, r1
    1204:	93 c0       	rjmp	.+294    	; 0x132c <__vector_18+0x2f6>
    1206:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E13receiving_msg>
    120a:	90 c0       	rjmp	.+288    	; 0x132c <__vector_18+0x2f6>
    120c:	20 32       	cpi	r18, 0x20	; 32
    120e:	79 f5       	brne	.+94     	; 0x126e <__vector_18+0x238>
    1210:	fa 01       	movw	r30, r20
    1212:	e7 57       	subi	r30, 0x77	; 119
    1214:	fb 4f       	sbci	r31, 0xFB	; 251
    1216:	80 81       	ld	r24, Z
    1218:	80 32       	cpi	r24, 0x20	; 32
    121a:	09 f4       	brne	.+2      	; 0x121e <__vector_18+0x1e8>
    121c:	94 c0       	rjmp	.+296    	; 0x1346 <__vector_18+0x310>
    121e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ11__vector_18E11field_index>
    1222:	68 2f       	mov	r22, r24
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	fb 01       	movw	r30, r22
    1228:	31 96       	adiw	r30, 0x01	; 1
    122a:	33 97       	sbiw	r30, 0x03	; 3
    122c:	0c f0       	brlt	.+2      	; 0x1230 <__vector_18+0x1fa>
    122e:	8b c0       	rjmp	.+278    	; 0x1346 <__vector_18+0x310>
    1230:	88 23       	and	r24, r24
    1232:	79 f0       	breq	.+30     	; 0x1252 <__vector_18+0x21c>
    1234:	61 50       	subi	r22, 0x01	; 1
    1236:	71 09       	sbc	r23, r1
    1238:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZZ11__vector_18E9field_len>
    123c:	a4 e1       	ldi	r26, 0x14	; 20
    123e:	a6 9f       	mul	r26, r22
    1240:	f0 01       	movw	r30, r0
    1242:	a7 9f       	mul	r26, r23
    1244:	f0 0d       	add	r31, r0
    1246:	11 24       	eor	r1, r1
    1248:	ce 0f       	add	r28, r30
    124a:	df 1f       	adc	r29, r31
    124c:	c9 0f       	add	r28, r25
    124e:	d1 1d       	adc	r29, r1
    1250:	1b 82       	std	Y+3, r1	; 0x03
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ11__vector_18E11field_index>
    1258:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ11__vector_18E9field_len>
    125c:	4f 5f       	subi	r20, 0xFF	; 255
    125e:	5f 4f       	sbci	r21, 0xFF	; 255
    1260:	4e 33       	cpi	r20, 0x3E	; 62
    1262:	51 05       	cpc	r21, r1
    1264:	0c f0       	brlt	.+2      	; 0x1268 <__vector_18+0x232>
    1266:	4e e3       	ldi	r20, 0x3E	; 62
    1268:	40 93 c9 04 	sts	0x04C9, r20	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    126c:	5f c0       	rjmp	.+190    	; 0x132c <__vector_18+0x2f6>
    126e:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ11__vector_18E9field_len>
    1272:	84 31       	cpi	r24, 0x14	; 20
    1274:	08 f0       	brcs	.+2      	; 0x1278 <__vector_18+0x242>
    1276:	67 c0       	rjmp	.+206    	; 0x1346 <__vector_18+0x310>
    1278:	40 91 86 04 	lds	r20, 0x0486	; 0x800486 <_ZZ11__vector_18E11field_index>
    127c:	41 11       	cpse	r20, r1
    127e:	19 c0       	rjmp	.+50     	; 0x12b2 <__vector_18+0x27c>
    1280:	40 91 87 04 	lds	r20, 0x0487	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    1284:	50 91 88 04 	lds	r21, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    1288:	ba 01       	movw	r22, r20
    128a:	66 0f       	add	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	44 0f       	add	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	44 0f       	add	r20, r20
    1294:	55 1f       	adc	r21, r21
    1296:	44 0f       	add	r20, r20
    1298:	55 1f       	adc	r21, r21
    129a:	46 0f       	add	r20, r22
    129c:	57 1f       	adc	r21, r23
    129e:	42 0f       	add	r20, r18
    12a0:	51 1d       	adc	r21, r1
    12a2:	50 93 88 04 	sts	0x0488, r21	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    12a6:	40 93 87 04 	sts	0x0487, r20	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ11__vector_18E9field_len>
    12b0:	16 c0       	rjmp	.+44     	; 0x12de <__vector_18+0x2a8>
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	41 50       	subi	r20, 0x01	; 1
    12b6:	51 09       	sbc	r21, r1
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	98 0f       	add	r25, r24
    12bc:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <_ZZ11__vector_18E9field_len>
    12c0:	e4 e1       	ldi	r30, 0x14	; 20
    12c2:	e4 9f       	mul	r30, r20
    12c4:	b0 01       	movw	r22, r0
    12c6:	e5 9f       	mul	r30, r21
    12c8:	70 0d       	add	r23, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	c6 0f       	add	r28, r22
    12ce:	d7 1f       	adc	r29, r23
    12d0:	fe 01       	movw	r30, r28
    12d2:	e8 0f       	add	r30, r24
    12d4:	f1 1d       	adc	r31, r1
    12d6:	23 83       	std	Z+3, r18	; 0x03
    12d8:	c9 0f       	add	r28, r25
    12da:	d1 1d       	adc	r29, r1
    12dc:	1b 82       	std	Y+3, r1	; 0x03
    12de:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	8e 33       	cpi	r24, 0x3E	; 62
    12e8:	91 05       	cpc	r25, r1
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <__vector_18+0x2b8>
    12ec:	8e e3       	ldi	r24, 0x3E	; 62
    12ee:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    12f2:	1c c0       	rjmp	.+56     	; 0x132c <__vector_18+0x2f6>
    12f4:	2f 37       	cpi	r18, 0x7F	; 127
    12f6:	41 f4       	brne	.+16     	; 0x1308 <__vector_18+0x2d2>
    12f8:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    12fc:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    1300:	18 16       	cp	r1, r24
    1302:	19 06       	cpc	r1, r25
    1304:	bc f0       	brlt	.+46     	; 0x1334 <__vector_18+0x2fe>
    1306:	1b c0       	rjmp	.+54     	; 0x133e <__vector_18+0x308>
    1308:	20 32       	cpi	r18, 0x20	; 32
    130a:	e9 f0       	breq	.+58     	; 0x1346 <__vector_18+0x310>
    130c:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ11__vector_18E11field_index>
    1310:	c9 01       	movw	r24, r18
    1312:	99 27       	eor	r25, r25
    1314:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    1318:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    131c:	1b 82       	std	Y+3, r1	; 0x03
    131e:	1f 8a       	std	Y+23, r1	; 0x17
    1320:	1b a6       	std	Y+43, r1	; 0x2b
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ11__vector_18E13receiving_msg>
    1328:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <_ZZ11__vector_18E9charIndex>
    132c:	82 2f       	mov	r24, r18
    132e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z12lb_echo_charh>
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <__vector_18+0x310>
    1334:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    1338:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    133c:	f7 cf       	rjmp	.-18     	; 0x132c <__vector_18+0x2f6>
    133e:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ11__vector_18E6msg_ID+0x1>
    1342:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ11__vector_18E6msg_ID>
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	bf 91       	pop	r27
    1350:	af 91       	pop	r26
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	7f 91       	pop	r23
    1358:	6f 91       	pop	r22
    135a:	5f 91       	pop	r21
    135c:	4f 91       	pop	r20
    135e:	3f 91       	pop	r19
    1360:	2f 91       	pop	r18
    1362:	1f 91       	pop	r17
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_19>:
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ11__vector_19E4buff>
    1394:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ11__vector_19E4buff+0x1>
    1398:	89 2b       	or	r24, r25
    139a:	31 f4       	brne	.+12     	; 0x13a8 <__vector_19+0x3a>
    139c:	0e 94 47 06 	call	0xc8e	; 0xc8e <_Z16nextFullTxBufferv>
    13a0:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ11__vector_19E4buff+0x1>
    13a4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ11__vector_19E4buff>
    13a8:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <_ZZ11__vector_19E4buff>
    13ac:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <_ZZ11__vector_19E4buff+0x1>
    13b0:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ11__vector_19E9charIndex>
    13b4:	df 01       	movw	r26, r30
    13b6:	a8 0f       	add	r26, r24
    13b8:	b1 1d       	adc	r27, r1
    13ba:	9c 91       	ld	r25, X
    13bc:	99 23       	and	r25, r25
    13be:	31 f0       	breq	.+12     	; 0x13cc <__vector_19+0x5e>
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ11__vector_19E9charIndex>
    13c6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <__vector_19+0x78>
    13cc:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_ZZ11__vector_19E9charIndex>
    13d0:	10 82       	st	Z, r1
    13d2:	0e 94 47 06 	call	0xc8e	; 0xc8e <_Z16nextFullTxBufferv>
    13d6:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ11__vector_19E4buff+0x1>
    13da:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ11__vector_19E4buff>
    13de:	89 2b       	or	r24, r25
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__vector_19+0x78>
    13e2:	0e 94 04 07 	call	0xe08	; 0xe08 <_Z14linkbus_end_txv>
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	bf 91       	pop	r27
    13ec:	af 91       	pop	r26
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	7f 91       	pop	r23
    13f4:	6f 91       	pop	r22
    13f6:	5f 91       	pop	r21
    13f8:	4f 91       	pop	r20
    13fa:	3f 91       	pop	r19
    13fc:	2f 91       	pop	r18
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <__vector_14>:
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
    142a:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ11__vector_14E6toggle>
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	81 11       	cpse	r24, r1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ11__vector_14E6toggle>
    1438:	90 91 39 05 	lds	r25, 0x0539	; 0x800539 <g_audio_tone_state>
    143c:	99 23       	and	r25, r25
    143e:	61 f0       	breq	.+24     	; 0x1458 <__vector_14+0x50>
    1440:	81 11       	cpse	r24, r1
    1442:	05 c0       	rjmp	.+10     	; 0x144e <__vector_14+0x46>
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	89 e0       	ldi	r24, 0x09	; 9
    1448:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    144c:	09 c0       	rjmp	.+18     	; 0x1460 <__vector_14+0x58>
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	89 e0       	ldi	r24, 0x09	; 9
    1452:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <__vector_14+0x58>
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	89 e0       	ldi	r24, 0x09	; 9
    145c:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1460:	ff 91       	pop	r31
    1462:	ef 91       	pop	r30
    1464:	bf 91       	pop	r27
    1466:	af 91       	pop	r26
    1468:	9f 91       	pop	r25
    146a:	8f 91       	pop	r24
    146c:	7f 91       	pop	r23
    146e:	6f 91       	pop	r22
    1470:	5f 91       	pop	r21
    1472:	4f 91       	pop	r20
    1474:	3f 91       	pop	r19
    1476:	2f 91       	pop	r18
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	0f 90       	pop	r0
    147e:	1f 90       	pop	r1
    1480:	18 95       	reti

00001482 <_Z23clockConfigurationErrorv>:
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    148a:	88 23       	and	r24, r24
    148c:	09 f4       	brne	.+2      	; 0x1490 <_Z23clockConfigurationErrorv+0xe>
    148e:	61 c0       	rjmp	.+194    	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    1490:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    1494:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    1498:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    149c:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    14a0:	89 2b       	or	r24, r25
    14a2:	8a 2b       	or	r24, r26
    14a4:	8b 2b       	or	r24, r27
    14a6:	09 f4       	brne	.+2      	; 0x14aa <_Z23clockConfigurationErrorv+0x28>
    14a8:	4d c0       	rjmp	.+154    	; 0x1544 <_Z23clockConfigurationErrorv+0xc2>
    14aa:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    14ae:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    14b2:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    14b6:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    14ba:	89 2b       	or	r24, r25
    14bc:	8a 2b       	or	r24, r26
    14be:	8b 2b       	or	r24, r27
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <_Z23clockConfigurationErrorv+0x42>
    14c2:	42 c0       	rjmp	.+132    	; 0x1548 <_Z23clockConfigurationErrorv+0xc6>
    14c4:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    14c8:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    14cc:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    14d0:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    14d4:	81 15       	cp	r24, r1
    14d6:	96 46       	sbci	r25, 0x66	; 102
    14d8:	ae 4e       	sbci	r26, 0xEE	; 238
    14da:	bf 45       	sbci	r27, 0x5F	; 95
    14dc:	b8 f1       	brcs	.+110    	; 0x154c <_Z23clockConfigurationErrorv+0xca>
    14de:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_event_finish_epoch>
    14e2:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    14e6:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    14ea:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    14ee:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    14f2:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    14f6:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    14fa:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    14fe:	84 17       	cp	r24, r20
    1500:	95 07       	cpc	r25, r21
    1502:	a6 07       	cpc	r26, r22
    1504:	b7 07       	cpc	r27, r23
    1506:	20 f5       	brcc	.+72     	; 0x1550 <_Z23clockConfigurationErrorv+0xce>
    1508:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    150c:	88 23       	and	r24, r24
    150e:	c1 f0       	breq	.+48     	; 0x1540 <_Z23clockConfigurationErrorv+0xbe>
    1510:	00 91 4e 05 	lds	r16, 0x054E	; 0x80054e <g_current_epoch>
    1514:	10 91 4f 05 	lds	r17, 0x054F	; 0x80054f <g_current_epoch+0x1>
    1518:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <g_current_epoch+0x2>
    151c:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <g_current_epoch+0x3>
    1520:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_event_finish_epoch>
    1524:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    1528:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    152c:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	40 17       	cp	r20, r16
    1534:	51 07       	cpc	r21, r17
    1536:	62 07       	cpc	r22, r18
    1538:	73 07       	cpc	r23, r19
    153a:	58 f0       	brcs	.+22     	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <_Z23clockConfigurationErrorv+0xd0>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <_Z13sendMorseToneh>:
    1558:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <g_lastSeconds>
    155c:	91 11       	cpse	r25, r1
    155e:	0a c0       	rjmp	.+20     	; 0x1574 <_Z13sendMorseToneh+0x1c>
    1560:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_fox_tone_offset>
    1564:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_fox_tone_offset+0x1>
    1568:	9f e2       	ldi	r25, 0x2F	; 47
    156a:	92 1b       	sub	r25, r18
    156c:	97 bd       	out	0x27, r25	; 39
    156e:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_audio_tone_state>
    1572:	08 95       	ret
    1574:	8f e2       	ldi	r24, 0x2F	; 47
    1576:	87 bd       	out	0x27, r24	; 39
    1578:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_audio_tone_state>
    157c:	08 95       	ret

0000157e <__vector_8>:
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <__vector_8+0x28>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_tick_count>
    15ae:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_tick_count+0x1>
    15b2:	a0 91 f9 04 	lds	r26, 0x04F9	; 0x8004f9 <g_tick_count+0x2>
    15b6:	b0 91 fa 04 	lds	r27, 0x04FA	; 0x8004fa <g_tick_count+0x3>
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	a1 1d       	adc	r26, r1
    15be:	b1 1d       	adc	r27, r1
    15c0:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <g_tick_count>
    15c4:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_tick_count+0x1>
    15c8:	a0 93 f9 04 	sts	0x04F9, r26	; 0x8004f9 <g_tick_count+0x2>
    15cc:	b0 93 fa 04 	sts	0x04FA, r27	; 0x8004fa <g_tick_count+0x3>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	1a 82       	std	Y+2, r1	; 0x02
    15d6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    15da:	88 23       	and	r24, r24
    15dc:	19 f1       	breq	.+70     	; 0x1624 <__vector_8+0xa6>
    15de:	84 e0       	ldi	r24, 0x04	; 4
    15e0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z11digitalReadh>
    15e4:	81 11       	cpse	r24, r1
    15e6:	1e c0       	rjmp	.+60     	; 0x1624 <__vector_8+0xa6>
    15e8:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_timer>
    15ec:	90 91 37 05 	lds	r25, 0x0537	; 0x800537 <g_sync_pin_timer+0x1>
    15f0:	8b 3b       	cpi	r24, 0xBB	; 187
    15f2:	90 41       	sbci	r25, 0x10	; 16
    15f4:	4c f4       	brge	.+18     	; 0x1608 <__vector_8+0x8a>
    15f6:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_timer>
    15fa:	90 91 37 05 	lds	r25, 0x0537	; 0x800537 <g_sync_pin_timer+0x1>
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <g_sync_pin_timer+0x1>
    1604:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <g_sync_pin_timer>
    1608:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_timer>
    160c:	90 91 37 05 	lds	r25, 0x0537	; 0x800537 <g_sync_pin_timer+0x1>
    1610:	85 39       	cpi	r24, 0x95	; 149
    1612:	95 40       	sbci	r25, 0x05	; 5
    1614:	3c f0       	brlt	.+14     	; 0x1624 <__vector_8+0xa6>
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_sync_pin_stable>
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	87 e0       	ldi	r24, 0x07	; 7
    1620:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1624:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <g_dtmf_detected>
    1628:	81 11       	cpse	r24, r1
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <__vector_8+0xb6>
    162c:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_config_error>
    1630:	88 23       	and	r24, r24
    1632:	c1 f0       	breq	.+48     	; 0x1664 <__vector_8+0xe6>
    1634:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1638:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    163c:	22 3e       	cpi	r18, 0xE2	; 226
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	38 07       	cpc	r19, r24
    1642:	34 f4       	brge	.+12     	; 0x1650 <__vector_8+0xd2>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    164c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1650:	2f 31       	cpi	r18, 0x1F	; 31
    1652:	31 05       	cpc	r19, r1
    1654:	a4 f0       	brlt	.+40     	; 0x167e <__vector_8+0x100>
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    165e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1662:	0d c0       	rjmp	.+26     	; 0x167e <__vector_8+0x100>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    166c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1670:	8f e1       	ldi	r24, 0x1F	; 31
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1678:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    167c:	10 c0       	rjmp	.+32     	; 0x169e <__vector_8+0x120>
    167e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1682:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1686:	82 0f       	add	r24, r18
    1688:	93 1f       	adc	r25, r19
    168a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    168e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1692:	99 23       	and	r25, r25
    1694:	24 f4       	brge	.+8      	; 0x169e <__vector_8+0x120>
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_blinky_time>
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <__vector_8+0x124>
    169e:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <g_blinky_time>
    16a2:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZL16g_LEDs_Timed_Out>
    16a6:	81 11       	cpse	r24, r1
    16a8:	24 c0       	rjmp	.+72     	; 0x16f2 <__vector_8+0x174>
    16aa:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_sync_pin_stable>
    16ae:	88 23       	and	r24, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <__vector_8+0x136>
    16b2:	05 c1       	rjmp	.+522    	; 0x18be <__vector_8+0x340>
    16b4:	1e c0       	rjmp	.+60     	; 0x16f2 <__vector_8+0x174>
    16b6:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_blinky_time>
    16ba:	88 23       	and	r24, r24
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <__vector_8+0x14a>
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	8d e0       	ldi	r24, 0x0D	; 13
    16c2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <__vector_8+0x152>
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	8d e0       	ldi	r24, 0x0D	; 13
    16cc:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    16d0:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_config_error>
    16d4:	88 23       	and	r24, r24
    16d6:	69 f0       	breq	.+26     	; 0x16f2 <__vector_8+0x174>
    16d8:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_blinky_time>
    16dc:	88 23       	and	r24, r24
    16de:	29 f0       	breq	.+10     	; 0x16ea <__vector_8+0x16c>
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	87 e0       	ldi	r24, 0x07	; 7
    16e4:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__vector_8+0x174>
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	87 e0       	ldi	r24, 0x07	; 7
    16ee:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    16f2:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL20g_enable_start_timer>
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <__vector_8+0x17e>
    16fa:	58 c0       	rjmp	.+176    	; 0x17ac <__vector_8+0x22e>
    16fc:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_lastSeconds>
    1700:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZZ10__vector_8E14hold_last10sec>
    1704:	98 17       	cp	r25, r24
    1706:	b1 f0       	breq	.+44     	; 0x1734 <__vector_8+0x1b6>
    1708:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_lastSeconds>
    170c:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ10__vector_8E14hold_last10sec>
    1710:	88 23       	and	r24, r24
    1712:	49 f0       	breq	.+18     	; 0x1726 <__vector_8+0x1a8>
    1714:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1718:	83 e6       	ldi	r24, 0x63	; 99
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <_ZZ10__vector_8E13starting_blip+0x1>
    1720:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ10__vector_8E13starting_blip>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <__vector_8+0x1d0>
    1726:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZZ10__vector_8E13starting_blip+0x1>
    172a:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ10__vector_8E13starting_blip>
    172e:	87 e2       	ldi	r24, 0x27	; 39
    1730:	9b e0       	ldi	r25, 0x0B	; 11
    1732:	28 c0       	rjmp	.+80     	; 0x1784 <__vector_8+0x206>
    1734:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ10__vector_8E13starting_blip>
    1738:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <_ZZ10__vector_8E13starting_blip+0x1>
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	e1 f0       	breq	.+56     	; 0x1778 <__vector_8+0x1fa>
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <_ZZ10__vector_8E13starting_blip+0x1>
    1746:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ10__vector_8E13starting_blip>
    174a:	89 2b       	or	r24, r25
    174c:	81 f0       	breq	.+32     	; 0x176e <__vector_8+0x1f0>
    174e:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_lastSeconds>
    1752:	86 30       	cpi	r24, 0x06	; 6
    1754:	30 f0       	brcs	.+12     	; 0x1762 <__vector_8+0x1e4>
    1756:	8f e3       	ldi	r24, 0x3F	; 63
    1758:	87 bd       	out	0x27, r24	; 39
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_audio_tone_state>
    1760:	25 c0       	rjmp	.+74     	; 0x17ac <__vector_8+0x22e>
    1762:	8f e1       	ldi	r24, 0x1F	; 31
    1764:	87 bd       	out	0x27, r24	; 39
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_audio_tone_state>
    176c:	1f c0       	rjmp	.+62     	; 0x17ac <__vector_8+0x22e>
    176e:	8f e2       	ldi	r24, 0x2F	; 47
    1770:	87 bd       	out	0x27, r24	; 39
    1772:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_audio_tone_state>
    1776:	1a c0       	rjmp	.+52     	; 0x17ac <__vector_8+0x22e>
    1778:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <_ZZ10__vector_8E13starting_boop>
    177c:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <_ZZ10__vector_8E13starting_boop+0x1>
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	a1 f0       	breq	.+40     	; 0x17ac <__vector_8+0x22e>
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <_ZZ10__vector_8E13starting_boop+0x1>
    178a:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <_ZZ10__vector_8E13starting_boop>
    178e:	89 2b       	or	r24, r25
    1790:	41 f4       	brne	.+16     	; 0x17a2 <__vector_8+0x224>
    1792:	8f e2       	ldi	r24, 0x2F	; 47
    1794:	87 bd       	out	0x27, r24	; 39
    1796:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_audio_tone_state>
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E9playMorse>
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <__vector_8+0x22e>
    17a2:	8f e4       	ldi	r24, 0x4F	; 79
    17a4:	87 bd       	out	0x27, r24	; 39
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_audio_tone_state>
    17ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    17b0:	81 11       	cpse	r24, r1
    17b2:	92 c0       	rjmp	.+292    	; 0x18d8 <__vector_8+0x35a>
    17b4:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_on_the_air>
    17b8:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_on_the_air+0x1>
    17bc:	89 2b       	or	r24, r25
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__vector_8+0x244>
    17c0:	83 c0       	rjmp	.+262    	; 0x18c8 <__vector_8+0x34a>
    17c2:	8a c0       	rjmp	.+276    	; 0x18d8 <__vector_8+0x35a>
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <_ZZ10__vector_8E7codeInc+0x1>
    17ca:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZZ10__vector_8E7codeInc>
    17ce:	89 2b       	or	r24, r25
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__vector_8+0x256>
    17d2:	8d c0       	rjmp	.+282    	; 0x18ee <__vector_8+0x370>
    17d4:	ae 01       	movw	r20, r28
    17d6:	4e 5f       	subi	r20, 0xFE	; 254
    17d8:	5f 4f       	sbci	r21, 0xFF	; 255
    17da:	be 01       	movw	r22, r28
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 af 21 	call	0x435e	; 0x435e <_Z9makeMorsePcPhS0_>
    17e8:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10__vector_8E3key>
    17ec:	99 81       	ldd	r25, Y+1	; 0x01
    17ee:	91 11       	cpse	r25, r1
    17f0:	11 c0       	rjmp	.+34     	; 0x1814 <__vector_8+0x296>
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	99 23       	and	r25, r25
    17f6:	71 f0       	breq	.+28     	; 0x1814 <__vector_8+0x296>
    17f8:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10__vector_8E3key>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_callsign_sent>
    1802:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <__vector_8+0x28e>
    180a:	71 c0       	rjmp	.+226    	; 0x18ee <__vector_8+0x370>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z13sendMorseToneh>
    1812:	17 c0       	rjmp	.+46     	; 0x1842 <__vector_8+0x2c4>
    1814:	88 23       	and	r24, r24
    1816:	81 f0       	breq	.+32     	; 0x1838 <__vector_8+0x2ba>
    1818:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZL16g_LEDs_Timed_Out>
    181c:	81 11       	cpse	r24, r1
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <__vector_8+0x2aa>
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1828:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZL20g_enable_transmitter>
    182c:	88 23       	and	r24, r24
    182e:	21 f0       	breq	.+8      	; 0x1838 <__vector_8+0x2ba>
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	8a e0       	ldi	r24, 0x0A	; 10
    1834:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1838:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    183c:	88 23       	and	r24, r24
    183e:	09 f4       	brne	.+2      	; 0x1842 <__vector_8+0x2c4>
    1840:	56 c0       	rjmp	.+172    	; 0x18ee <__vector_8+0x370>
    1842:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10__vector_8E3key>
    1846:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z13sendMorseToneh>
    184a:	51 c0       	rjmp	.+162    	; 0x18ee <__vector_8+0x370>
    184c:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZL16g_LEDs_Timed_Out>
    1850:	81 11       	cpse	r24, r1
    1852:	05 c0       	rjmp	.+10     	; 0x185e <__vector_8+0x2e0>
    1854:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_sync_pin_stable>
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <__vector_8+0x2e0>
    185c:	42 c0       	rjmp	.+132    	; 0x18e2 <__vector_8+0x364>
    185e:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZL20g_enable_transmitter>
    1862:	88 23       	and	r24, r24
    1864:	29 f0       	breq	.+10     	; 0x1870 <__vector_8+0x2f2>
    1866:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <_ZZ10__vector_8E3key>
    186a:	8a e0       	ldi	r24, 0x0A	; 10
    186c:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1870:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_code_throttle>
    1874:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_code_throttle+0x1>
    1878:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <_ZZ10__vector_8E7codeInc+0x1>
    187c:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZZ10__vector_8E7codeInc>
    1880:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1884:	88 23       	and	r24, r24
    1886:	99 f1       	breq	.+102    	; 0x18ee <__vector_8+0x370>
    1888:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10__vector_8E3key>
    188c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z13sendMorseToneh>
    1890:	2e c0       	rjmp	.+92     	; 0x18ee <__vector_8+0x370>
    1892:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10__vector_8E3key>
    1896:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_sync_pin_stable>
    189a:	81 11       	cpse	r24, r1
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <__vector_8+0x328>
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	8a e0       	ldi	r24, 0x0A	; 10
    18aa:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    18ae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    18b2:	88 23       	and	r24, r24
    18b4:	e1 f0       	breq	.+56     	; 0x18ee <__vector_8+0x370>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z13sendMorseToneh>
    18bc:	18 c0       	rjmp	.+48     	; 0x18ee <__vector_8+0x370>
    18be:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <g_dtmf_detected>
    18c2:	81 11       	cpse	r24, r1
    18c4:	f8 ce       	rjmp	.-528    	; 0x16b6 <__vector_8+0x138>
    18c6:	04 cf       	rjmp	.-504    	; 0x16d0 <__vector_8+0x152>
    18c8:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ10__vector_8E7codeInc>
    18cc:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <_ZZ10__vector_8E7codeInc+0x1>
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <__vector_8+0x358>
    18d4:	77 cf       	rjmp	.-274    	; 0x17c4 <__vector_8+0x246>
    18d6:	ba cf       	rjmp	.-140    	; 0x184c <__vector_8+0x2ce>
    18d8:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10__vector_8E3key>
    18dc:	81 11       	cpse	r24, r1
    18de:	d9 cf       	rjmp	.-78     	; 0x1892 <__vector_8+0x314>
    18e0:	e6 cf       	rjmp	.-52     	; 0x18ae <__vector_8+0x330>
    18e2:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <_ZZ10__vector_8E3key>
    18e6:	87 e0       	ldi	r24, 0x07	; 7
    18e8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    18ec:	b8 cf       	rjmp	.-144    	; 0x185e <__vector_8+0x2e0>
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <_Z20initializeEEPROMVarsh>:

/*
 * Set non-volatile variables to their values stored in EEPROM
 */
void initializeEEPROMVars(BOOL resetAll)
{
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	c8 2f       	mov	r28, r24
	uint16_t i;
	uint8_t initialization_flag = eeprom_read_byte(&ee_interface_eeprom_initialization_flag);
    192a:	86 ec       	ldi	r24, 0xC6	; 198
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1932:	d8 2f       	mov	r29, r24

	i2c_init();                                                         /* Needs to happen here */
    1934:	0e 94 ca 04 	call	0x994	; 0x994 <_Z8i2c_initv>

	if(!resetAll && (initialization_flag == EEPROM_INITIALIZED_FLAG))   /* EEPROM is up to date */
    1938:	c1 11       	cpse	r28, r1
    193a:	df c1       	rjmp	.+958    	; 0x1cfa <_Z20initializeEEPROMVarsh+0x3e2>
    193c:	da 3b       	cpi	r29, 0xBA	; 186
    193e:	09 f0       	breq	.+2      	; 0x1942 <_Z20initializeEEPROMVarsh+0x2a>
    1940:	6b c0       	rjmp	.+214    	; 0x1a18 <_Z20initializeEEPROMVarsh+0x100>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
    1942:	88 e3       	ldi	r24, 0x38	; 56
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	85 30       	cpi	r24, 0x05	; 5
    194e:	91 05       	cpc	r25, r1
    1950:	14 f4       	brge	.+4      	; 0x1956 <_Z20initializeEEPROMVarsh+0x3e>
    1952:	85 e0       	ldi	r24, 0x05	; 5
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	85 31       	cpi	r24, 0x15	; 21
    1958:	91 05       	cpc	r25, r1
    195a:	14 f0       	brlt	.+4      	; 0x1960 <_Z20initializeEEPROMVarsh+0x48>
    195c:	84 e1       	ldi	r24, 0x14	; 20
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
		g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),NO_CODE_START_TONES_5M);
    1964:	87 e3       	ldi	r24, 0x37	; 55
    1966:	92 e0       	ldi	r25, 0x02	; 2
    1968:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    196c:	86 31       	cpi	r24, 0x16	; 22
    196e:	08 f0       	brcs	.+2      	; 0x1972 <_Z20initializeEEPROMVarsh+0x5a>
    1970:	85 e1       	ldi	r24, 0x15	; 21
    1972:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_fox>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration);
    1976:	84 e3       	ldi	r24, 0x34	; 52
    1978:	92 e0       	ldi	r25, 0x02	; 2
    197a:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <eeprom_read_word>
    197e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    1982:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
    1986:	82 e3       	ldi	r24, 0x32	; 50
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <eeprom_read_word>
    198e:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZL15g_rv3028_offset+0x1>
    1992:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZL15g_rv3028_offset>
		g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    1996:	86 e3       	ldi	r24, 0x36	; 54
    1998:	92 e0       	ldi	r25, 0x02	; 2
    199a:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    199e:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL13g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    19a2:	81 e3       	ldi	r24, 0x31	; 49
    19a4:	92 e0       	ldi	r25, 0x02	; 2
    19a6:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    19aa:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL20g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    19ae:	80 e3       	ldi	r24, 0x30	; 48
    19b0:	92 e0       	ldi	r25, 0x02	; 2
    19b2:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    19b6:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZL20g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
    19ba:	8c e2       	ldi	r24, 0x2C	; 44
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <eeprom_read_dword>
    19c2:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_event_start_epoch>
    19c6:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <g_event_start_epoch+0x1>
    19ca:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_event_start_epoch+0x2>
    19ce:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&ee_event_finish_epoch);
    19d2:	88 e2       	ldi	r24, 0x28	; 40
    19d4:	92 e0       	ldi	r25, 0x02	; 2
    19d6:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <eeprom_read_dword>
    19da:	60 93 46 05 	sts	0x0546, r22	; 0x800546 <g_event_finish_epoch>
    19de:	70 93 47 05 	sts	0x0547, r23	; 0x800547 <g_event_finish_epoch+0x1>
    19e2:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_event_finish_epoch+0x2>
    19e6:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_event_finish_epoch+0x3>
    19ea:	01 eb       	ldi	r16, 0xB1	; 177
    19ec:	12 e0       	ldi	r17, 0x02	; 2
    19ee:	cc e1       	ldi	r28, 0x1C	; 28
    19f0:	d5 e0       	ldi	r29, 0x05	; 5
    19f2:	0f 2e       	mov	r0, r31
    19f4:	f0 e3       	ldi	r31, 0x30	; 48
    19f6:	ef 2e       	mov	r14, r31
    19f8:	f5 e0       	ldi	r31, 0x05	; 5
    19fa:	ff 2e       	mov	r15, r31
    19fc:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    19fe:	c8 01       	movw	r24, r16
    1a00:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1a04:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <_Z20initializeEEPROMVarsh+0xf4>
    1a0a:	2e c1       	rjmp	.+604    	; 0x1c68 <_Z20initializeEEPROMVarsh+0x350>
    1a0c:	0f 5f       	subi	r16, 0xFF	; 255
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		g_event_finish_epoch = eeprom_read_dword(&ee_event_finish_epoch);

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    1a10:	ce 15       	cp	r28, r14
    1a12:	df 05       	cpc	r29, r15
    1a14:	a1 f7       	brne	.-24     	; 0x19fe <_Z20initializeEEPROMVarsh+0xe6>
    1a16:	28 c1       	rjmp	.+592    	; 0x1c68 <_Z20initializeEEPROMVarsh+0x350>
			}
		}
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
    1a18:	88 e3       	ldi	r24, 0x38	; 56
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1a20:	8f 3f       	cpi	r24, 0xFF	; 255
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <_Z20initializeEEPROMVarsh+0x10e>
    1a24:	59 c1       	rjmp	.+690    	; 0x1cd8 <_Z20initializeEEPROMVarsh+0x3c0>
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
			eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
		}
		else
		{
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	85 30       	cpi	r24, 0x05	; 5
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	14 f4       	brge	.+4      	; 0x1a32 <_Z20initializeEEPROMVarsh+0x11a>
    1a2e:	85 e0       	ldi	r24, 0x05	; 5
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	85 31       	cpi	r24, 0x15	; 21
    1a34:	91 05       	cpc	r25, r1
    1a36:	14 f0       	brlt	.+4      	; 0x1a3c <_Z20initializeEEPROMVarsh+0x124>
    1a38:	84 e1       	ldi	r24, 0x14	; 20
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
		}

		if(resetAll || (eeprom_read_byte(&ee_fox_setting) == 0xFF))
    1a40:	87 e3       	ldi	r24, 0x37	; 55
    1a42:	92 e0       	ldi	r25, 0x02	; 2
    1a44:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1a48:	8f 3f       	cpi	r24, 0xFF	; 255
    1a4a:	61 f4       	brne	.+24     	; 0x1a64 <_Z20initializeEEPROMVarsh+0x14c>
    1a4c:	60 c1       	rjmp	.+704    	; 0x1d0e <_Z20initializeEEPROMVarsh+0x3f6>
		{
			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    1a4e:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_fox>
			eeprom_update_byte(&ee_fox_setting,g_fox);
    1a52:	60 91 58 05 	lds	r22, 0x0558	; 0x800558 <g_fox>
    1a56:	87 e3       	ldi	r24, 0x37	; 55
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
		else
		{
			g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),INVALID_FOX);
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration) == 0xFFFF))
    1a5e:	c1 11       	cpse	r28, r1
    1a60:	0e c0       	rjmp	.+28     	; 0x1a7e <_Z20initializeEEPROMVarsh+0x166>
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <_Z20initializeEEPROMVarsh+0x156>
    1a64:	87 31       	cpi	r24, 0x17	; 23
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <_Z20initializeEEPROMVarsh+0x152>
    1a68:	86 e1       	ldi	r24, 0x16	; 22
			g_fox = EEPROM_FOX_SETTING_DEFAULT;
			eeprom_update_byte(&ee_fox_setting,g_fox);
		}
		else
		{
			g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),INVALID_FOX);
    1a6a:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_fox>
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration) == 0xFFFF))
    1a6e:	84 e3       	ldi	r24, 0x34	; 52
    1a70:	92 e0       	ldi	r25, 0x02	; 2
    1a72:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <eeprom_read_word>
    1a76:	8f 3f       	cpi	r24, 0xFF	; 255
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	92 07       	cpc	r25, r18
    1a7c:	79 f4       	brne	.+30     	; 0x1a9c <_Z20initializeEEPROMVarsh+0x184>
		{
			g_atmega_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
    1a7e:	82 e9       	ldi	r24, 0x92	; 146
    1a80:	9f ef       	ldi	r25, 0xFF	; 255
    1a82:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    1a86:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
			eeprom_update_word((uint16_t*)&ee_atmega_temp_calibration,(uint16_t)g_atmega_temp_calibration);
    1a8a:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    1a8e:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    1a92:	84 e3       	ldi	r24, 0x34	; 52
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <eeprom_update_word>
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <_Z20initializeEEPROMVarsh+0x18c>
		}
		else
		{
			g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration);
    1a9c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    1aa0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
		}

		if((uint16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset) == 0xFFFF)
    1aa4:	82 e3       	ldi	r24, 0x32	; 50
    1aa6:	92 e0       	ldi	r25, 0x02	; 2
    1aa8:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <eeprom_read_word>
    1aac:	8f 3f       	cpi	r24, 0xFF	; 255
    1aae:	2f ef       	ldi	r18, 0xFF	; 255
    1ab0:	92 07       	cpc	r25, r18
    1ab2:	91 f4       	brne	.+36     	; 0x1ad8 <_Z20initializeEEPROMVarsh+0x1c0>
		{
			g_rv3028_offset = rv3028_get_offset_RAM();
    1ab4:	0e 94 5e 24 	call	0x48bc	; 0x48bc <_Z21rv3028_get_offset_RAMv>
    1ab8:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZL15g_rv3028_offset+0x1>
    1abc:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZL15g_rv3028_offset>
			eeprom_update_word((uint16_t*)&ee_rv3028_offset,(uint16_t)g_rv3028_offset);
    1ac0:	60 91 00 05 	lds	r22, 0x0500	; 0x800500 <_ZL15g_rv3028_offset>
    1ac4:	70 91 01 05 	lds	r23, 0x0501	; 0x800501 <_ZL15g_rv3028_offset+0x1>
    1ac8:	82 e3       	ldi	r24, 0x32	; 50
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <eeprom_update_word>
			g_allow_rv3028_eeprom_changes = TRUE;   /* Allow 1-sec interrupt to get permanently saved within the RTC EEPROM */
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <g_allow_rv3028_eeprom_changes>
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <_Z20initializeEEPROMVarsh+0x1c8>
		}
		else
		{
			g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
    1ad8:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZL15g_rv3028_offset+0x1>
    1adc:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZL15g_rv3028_offset>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
    1ae0:	c1 11       	cpse	r28, r1
    1ae2:	28 c1       	rjmp	.+592    	; 0x1d34 <_Z20initializeEEPROMVarsh+0x41c>
    1ae4:	86 e3       	ldi	r24, 0x36	; 54
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1aec:	8f 3f       	cpi	r24, 0xFF	; 255
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <_Z20initializeEEPROMVarsh+0x1da>
    1af0:	17 c1       	rjmp	.+558    	; 0x1d20 <_Z20initializeEEPROMVarsh+0x408>
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
			eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
		}
		else
		{
			g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    1af2:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL13g_enable_LEDs>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_start_timer) == 0xFF))
    1af6:	81 e3       	ldi	r24, 0x31	; 49
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	59 f4       	brne	.+22     	; 0x1b18 <_Z20initializeEEPROMVarsh+0x200>
		{
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
    1b02:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZL20g_enable_start_timer>
			eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);    /* Only gets set by a serial command */
    1b06:	60 91 03 05 	lds	r22, 0x0503	; 0x800503 <_ZL20g_enable_start_timer>
    1b0a:	81 e3       	ldi	r24, 0x31	; 49
    1b0c:	92 e0       	ldi	r25, 0x02	; 2
    1b0e:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    1b12:	c1 11       	cpse	r28, r1
    1b14:	19 c1       	rjmp	.+562    	; 0x1d48 <_Z20initializeEEPROMVarsh+0x430>
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <_Z20initializeEEPROMVarsh+0x204>
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
			eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);    /* Only gets set by a serial command */
		}
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    1b18:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL20g_enable_start_timer>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    1b1c:	80 e3       	ldi	r24, 0x30	; 48
    1b1e:	92 e0       	ldi	r25, 0x02	; 2
    1b20:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1b24:	8f 3f       	cpi	r24, 0xFF	; 255
    1b26:	61 f4       	brne	.+24     	; 0x1b40 <_Z20initializeEEPROMVarsh+0x228>
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
    1b2e:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <_ZL20g_enable_transmitter>
    1b32:	80 e3       	ldi	r24, 0x30	; 48
    1b34:	92 e0       	ldi	r25, 0x02	; 2
    1b36:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
		else
		{
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_start_epoch) == 0xFFFFFFFF))
    1b3a:	cc 23       	and	r28, r28
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <_Z20initializeEEPROMVarsh+0x22c>
    1b3e:	0e c1       	rjmp	.+540    	; 0x1d5c <_Z20initializeEEPROMVarsh+0x444>
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
			eeprom_update_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
		}
		else
		{
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    1b40:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZL20g_enable_transmitter>
		}

		if(resetAll || (eeprom_read_dword(&ee_event_start_epoch) == 0xFFFFFFFF))
    1b44:	8c e2       	ldi	r24, 0x2C	; 44
    1b46:	92 e0       	ldi	r25, 0x02	; 2
    1b48:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <eeprom_read_dword>
    1b4c:	6f 3f       	cpi	r22, 0xFF	; 255
    1b4e:	2f ef       	ldi	r18, 0xFF	; 255
    1b50:	72 07       	cpc	r23, r18
    1b52:	82 07       	cpc	r24, r18
    1b54:	92 07       	cpc	r25, r18
    1b56:	b9 f4       	brne	.+46     	; 0x1b86 <_Z20initializeEEPROMVarsh+0x26e>
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1b58:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_event_start_epoch>
    1b5c:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_event_start_epoch+0x1>
    1b60:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_event_start_epoch+0x2>
    1b64:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    1b68:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1b6c:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1b70:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1b74:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1b78:	8c e2       	ldi	r24, 0x2C	; 44
    1b7a:	92 e0       	ldi	r25, 0x02	; 2
    1b7c:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
    1b80:	c1 11       	cpse	r28, r1
    1b82:	22 c1       	rjmp	.+580    	; 0x1dc8 <_Z20initializeEEPROMVarsh+0x4b0>
    1b84:	15 c1       	rjmp	.+554    	; 0x1db0 <_Z20initializeEEPROMVarsh+0x498>
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
			eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
		}
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
    1b86:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_event_start_epoch>
    1b8a:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <g_event_start_epoch+0x1>
    1b8e:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_event_start_epoch+0x2>
    1b92:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <g_event_start_epoch+0x3>
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
    1b96:	88 e2       	ldi	r24, 0x28	; 40
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <eeprom_read_dword>
    1b9e:	6f 3f       	cpi	r22, 0xFF	; 255
    1ba0:	2f ef       	ldi	r18, 0xFF	; 255
    1ba2:	72 07       	cpc	r23, r18
    1ba4:	82 07       	cpc	r24, r18
    1ba6:	92 07       	cpc	r25, r18
    1ba8:	b9 f4       	brne	.+46     	; 0x1bd8 <_Z20initializeEEPROMVarsh+0x2c0>
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1baa:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_event_start_epoch>
    1bae:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_event_start_epoch+0x1>
    1bb2:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_event_start_epoch+0x2>
    1bb6:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
    1bba:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1bbe:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1bc2:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1bc6:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1bca:	88 e2       	ldi	r24, 0x28	; 40
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_finish_epoch);
		}

		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
    1bd2:	cc 23       	and	r28, r28
    1bd4:	49 f0       	breq	.+18     	; 0x1be8 <_Z20initializeEEPROMVarsh+0x2d0>
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <_Z20initializeEEPROMVarsh+0x2dc>
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
		}
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_finish_epoch);
    1bd8:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_event_start_epoch>
    1bdc:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <g_event_start_epoch+0x1>
    1be0:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_event_start_epoch+0x2>
    1be4:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <g_event_start_epoch+0x3>
		}

		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
    1be8:	81 eb       	ldi	r24, 0xB1	; 177
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <_Z20initializeEEPROMVarsh+0x2e8>

//			for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)    /* Only gets set by a serial command */
//			{
//				eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
//			}
			eeprom_update_byte((uint8_t*)&ee_stationID_text[0],0);
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	81 eb       	ldi	r24, 0xB1	; 177
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    1bfe:	5f c0       	rjmp	.+190    	; 0x1cbe <_Z20initializeEEPROMVarsh+0x3a6>
    1c00:	01 eb       	ldi	r16, 0xB1	; 177
    1c02:	12 e0       	ldi	r17, 0x02	; 2
    1c04:	cc e1       	ldi	r28, 0x1C	; 28
    1c06:	d5 e0       	ldi	r29, 0x05	; 5
    1c08:	0f 2e       	mov	r0, r31
    1c0a:	f0 e3       	ldi	r31, 0x30	; 48
    1c0c:	ef 2e       	mov	r14, r31
    1c0e:	f5 e0       	ldi	r31, 0x05	; 5
    1c10:	ff 2e       	mov	r15, r31
    1c12:	f0 2d       	mov	r31, r0
		}
		else
		{
			for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
			{
				g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    1c14:	c8 01       	movw	r24, r16
    1c16:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1c1a:	89 93       	st	Y+, r24
				if(!g_messages_text[STATION_ID][i])
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <_Z20initializeEEPROMVarsh+0x30a>
    1c20:	4e c0       	rjmp	.+156    	; 0x1cbe <_Z20initializeEEPROMVarsh+0x3a6>
    1c22:	0f 5f       	subi	r16, 0xFF	; 255
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
//			}
			eeprom_update_byte((uint8_t*)&ee_stationID_text[0],0);
		}
		else
		{
			for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    1c26:	ce 15       	cp	r28, r14
    1c28:	df 05       	cpc	r29, r15
    1c2a:	a1 f7       	brne	.-24     	; 0x1c14 <_Z20initializeEEPROMVarsh+0x2fc>
    1c2c:	48 c0       	rjmp	.+144    	; 0x1cbe <_Z20initializeEEPROMVarsh+0x3a6>
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_update_byte((uint8_t*)&ee_temperature_table[i],val);
    1c2e:	cc 9f       	mul	r28, r28
    1c30:	90 01       	movw	r18, r0
    1c32:	cd 9f       	mul	r28, r29
    1c34:	30 0d       	add	r19, r0
    1c36:	30 0d       	add	r19, r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	a5 e2       	ldi	r26, 0x25	; 37
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
    1c42:	a7 01       	movw	r20, r14
    1c44:	96 01       	movw	r18, r12
    1c46:	0e 94 13 29 	call	0x5226	; 0x5226 <__divmodsi4>
    1c4a:	62 2f       	mov	r22, r18
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
		}

		/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
    1c52:	21 96       	adiw	r28, 0x01	; 1
    1c54:	0e 5f       	subi	r16, 0xFE	; 254
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	cc 33       	cpi	r28, 0x3C	; 60
    1c5a:	d1 05       	cpc	r29, r1
    1c5c:	41 f7       	brne	.-48     	; 0x1c2e <_Z20initializeEEPROMVarsh+0x316>
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_update_byte((uint8_t*)&ee_temperature_table[i],val);
		}

		eeprom_update_byte(&ee_interface_eeprom_initialization_flag,EEPROM_INITIALIZED_FLAG);
    1c5e:	6a eb       	ldi	r22, 0xBA	; 186
    1c60:	86 ec       	ldi	r24, 0xC6	; 198
    1c62:	92 e0       	ldi	r25, 0x02	; 2
    1c64:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
	}

/* Perform sanity checks */
	if(g_event_finish_epoch <= g_event_start_epoch)
    1c68:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_event_finish_epoch>
    1c6c:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    1c70:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    1c74:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    1c78:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    1c7c:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1c80:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1c84:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1c88:	84 17       	cp	r24, r20
    1c8a:	95 07       	cpc	r25, r21
    1c8c:	a6 07       	cpc	r26, r22
    1c8e:	b7 07       	cpc	r27, r23
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <_Z20initializeEEPROMVarsh+0x37c>
    1c92:	af c0       	rjmp	.+350    	; 0x1df2 <_Z20initializeEEPROMVarsh+0x4da>
	{
		g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    1c94:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    1c98:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1c9c:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1ca0:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1ca4:	80 58       	subi	r24, 0x80	; 128
    1ca6:	9e 4a       	sbci	r25, 0xAE	; 174
    1ca8:	ae 4f       	sbci	r26, 0xFE	; 254
    1caa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cac:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_event_finish_epoch>
    1cb0:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_event_finish_epoch+0x1>
    1cb4:	a0 93 48 05 	sts	0x0548, r26	; 0x800548 <g_event_finish_epoch+0x2>
    1cb8:	b0 93 49 05 	sts	0x0549, r27	; 0x800549 <g_event_finish_epoch+0x3>
	}

	return;
    1cbc:	9a c0       	rjmp	.+308    	; 0x1df2 <_Z20initializeEEPROMVarsh+0x4da>
    1cbe:	09 e3       	ldi	r16, 0x39	; 57
    1cc0:	12 e0       	ldi	r17, 0x02	; 2

/*
 * Set non-volatile variables to their values stored in EEPROM
 */
void initializeEEPROMVars(BOOL resetAll)
{
    1cc2:	c0 e0       	ldi	r28, 0x00	; 0
    1cc4:	d0 e0       	ldi	r29, 0x00	; 0
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_update_byte((uint8_t*)&ee_temperature_table[i],val);
    1cc6:	0f 2e       	mov	r0, r31
    1cc8:	f8 ee       	ldi	r31, 0xE8	; 232
    1cca:	cf 2e       	mov	r12, r31
    1ccc:	f3 e0       	ldi	r31, 0x03	; 3
    1cce:	df 2e       	mov	r13, r31
    1cd0:	e1 2c       	mov	r14, r1
    1cd2:	f1 2c       	mov	r15, r1
    1cd4:	f0 2d       	mov	r31, r0
    1cd6:	ab cf       	rjmp	.-170    	; 0x1c2e <_Z20initializeEEPROMVarsh+0x316>
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    1cd8:	84 e1       	ldi	r24, 0x14	; 20
    1cda:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
			eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    1cde:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    1ce2:	88 e3       	ldi	r24, 0x38	; 56
    1ce4:	92 e0       	ldi	r25, 0x02	; 2
    1ce6:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
		else
		{
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
		}

		if(resetAll || (eeprom_read_byte(&ee_fox_setting) == 0xFF))
    1cea:	87 e3       	ldi	r24, 0x37	; 55
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
    1cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <_Z20initializeEEPROMVarsh+0x3e0>
    1cf6:	b6 ce       	rjmp	.-660    	; 0x1a64 <_Z20initializeEEPROMVarsh+0x14c>
    1cf8:	aa ce       	rjmp	.-684    	; 0x1a4e <_Z20initializeEEPROMVarsh+0x136>
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    1cfa:	84 e1       	ldi	r24, 0x14	; 20
    1cfc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
			eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    1d00:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    1d04:	88 e3       	ldi	r24, 0x38	; 56
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    1d0c:	a0 ce       	rjmp	.-704    	; 0x1a4e <_Z20initializeEEPROMVarsh+0x136>
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
		}

		if(resetAll || (eeprom_read_byte(&ee_fox_setting) == 0xFF))
		{
			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    1d0e:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_fox>
			eeprom_update_byte(&ee_fox_setting,g_fox);
    1d12:	60 91 58 05 	lds	r22, 0x0558	; 0x800558 <g_fox>
    1d16:	87 e3       	ldi	r24, 0x37	; 55
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    1d1e:	a7 ce       	rjmp	.-690    	; 0x1a6e <_Z20initializeEEPROMVarsh+0x156>
			g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
		{
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL13g_enable_LEDs>
			eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
    1d26:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <_ZL13g_enable_LEDs>
    1d2a:	86 e3       	ldi	r24, 0x36	; 54
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    1d32:	e1 ce       	rjmp	.-574    	; 0x1af6 <_Z20initializeEEPROMVarsh+0x1de>
			g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
		{
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL13g_enable_LEDs>
			eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
    1d3a:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <_ZL13g_enable_LEDs>
    1d3e:	86 e3       	ldi	r24, 0x36	; 54
    1d40:	92 e0       	ldi	r25, 0x02	; 2
    1d42:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    1d46:	dd ce       	rjmp	.-582    	; 0x1b02 <_Z20initializeEEPROMVarsh+0x1ea>
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
    1d4e:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <_ZL20g_enable_transmitter>
    1d52:	80 e3       	ldi	r24, 0x30	; 48
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    1d5a:	fe ce       	rjmp	.-516    	; 0x1b58 <_Z20initializeEEPROMVarsh+0x240>
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_start_epoch) == 0xFFFFFFFF))
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1d5c:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_event_start_epoch>
    1d60:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_event_start_epoch+0x1>
    1d64:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_event_start_epoch+0x2>
    1d68:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    1d6c:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1d70:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1d74:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1d78:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1d7c:	8c e2       	ldi	r24, 0x2C	; 44
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
    1d84:	12 cf       	rjmp	.-476    	; 0x1baa <_Z20initializeEEPROMVarsh+0x292>
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1d86:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_event_start_epoch>
    1d8a:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_event_start_epoch+0x1>
    1d8e:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_event_start_epoch+0x2>
    1d92:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
    1d96:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1d9a:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1d9e:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1da2:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1da6:	88 e2       	ldi	r24, 0x28	; 40
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
    1dae:	1c cf       	rjmp	.-456    	; 0x1be8 <_Z20initializeEEPROMVarsh+0x2d0>
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
    1db0:	88 e2       	ldi	r24, 0x28	; 40
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <eeprom_read_dword>
    1db8:	6f 3f       	cpi	r22, 0xFF	; 255
    1dba:	2f ef       	ldi	r18, 0xFF	; 255
    1dbc:	72 07       	cpc	r23, r18
    1dbe:	82 07       	cpc	r24, r18
    1dc0:	92 07       	cpc	r25, r18
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <_Z20initializeEEPROMVarsh+0x4ae>
    1dc4:	09 cf       	rjmp	.-494    	; 0x1bd8 <_Z20initializeEEPROMVarsh+0x2c0>
    1dc6:	df cf       	rjmp	.-66     	; 0x1d86 <_Z20initializeEEPROMVarsh+0x46e>
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1dc8:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_event_start_epoch>
    1dcc:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_event_start_epoch+0x1>
    1dd0:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_event_start_epoch+0x2>
    1dd4:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
    1dd8:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1ddc:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1de0:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1de4:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1de8:	88 e2       	ldi	r24, 0x28	; 40
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
    1df0:	01 cf       	rjmp	.-510    	; 0x1bf4 <_Z20initializeEEPROMVarsh+0x2dc>
	{
		g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
	}

	return;
}
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	08 95       	ret

00001e04 <_Z11setupForFoxP5Fox_t>:

void setupForFox(Fox_t* fox)
{
	if(fox)
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	31 f0       	breq	.+12     	; 0x1e14 <_Z11setupForFoxP5Fox_t+0x10>
	{
		if(*fox != INVALID_FOX)
    1e08:	fc 01       	movw	r30, r24
    1e0a:	80 81       	ld	r24, Z
    1e0c:	86 31       	cpi	r24, 0x16	; 22
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <_Z11setupForFoxP5Fox_t+0x10>
		{
			g_fox = *fox;
    1e10:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_fox>
		}
	}

	switch(g_fox)
    1e14:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <g_fox>
    1e18:	8e 2f       	mov	r24, r30
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	31 97       	sbiw	r30, 0x01	; 1
    1e20:	e5 31       	cpi	r30, 0x15	; 21
    1e22:	f1 05       	cpc	r31, r1
    1e24:	08 f0       	brcs	.+2      	; 0x1e28 <_Z11setupForFoxP5Fox_t+0x24>
    1e26:	6b c0       	rjmp	.+214    	; 0x1efe <_Z11setupForFoxP5Fox_t+0xfa>
    1e28:	ea 59       	subi	r30, 0x9A	; 154
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__tablejump2__>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1e30:	88 e7       	ldi	r24, 0x78	; 120
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e38:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL20g_enable_start_timer>
		}
		break;
    1e42:	7d c0       	rjmp	.+250    	; 0x1f3e <_Z11setupForFoxP5Fox_t+0x13a>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1e44:	8c e2       	ldi	r24, 0x2C	; 44
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e4c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL20g_enable_start_timer>
		}
		break;
    1e56:	73 c0       	rjmp	.+230    	; 0x1f3e <_Z11setupForFoxP5Fox_t+0x13a>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1e58:	8c e3       	ldi	r24, 0x3C	; 60
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <g_on_air_interval+0x1>
    1e60:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <g_on_air_interval>
			g_number_of_foxes = 5;
    1e64:	25 e0       	ldi	r18, 0x05	; 5
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	30 93 41 05 	sts	0x0541, r19	; 0x800541 <g_number_of_foxes+0x1>
    1e6c:	20 93 40 05 	sts	0x0540, r18	; 0x800540 <g_number_of_foxes>
			g_fox_id_offset = 0;
    1e70:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset+0x1>
    1e74:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_id_offset>
			g_pattern_codespeed = 8;
    1e78:	28 e0       	ldi	r18, 0x08	; 8
    1e7a:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <_ZL19g_pattern_codespeed>
			g_id_interval = 60;
    1e7e:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <g_id_interval+0x1>
    1e82:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <g_id_interval>
			g_startclock_interval = 300;
    1e86:	8c e2       	ldi	r24, 0x2C	; 44
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e8e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1e92:	55 c0       	rjmp	.+170    	; 0x1f3e <_Z11setupForFoxP5Fox_t+0x13a>

		case SPRINT_S1:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    1e94:	8c e0       	ldi	r24, 0x0C	; 12
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <g_on_air_interval+0x1>
    1e9c:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <g_on_air_interval>
			g_number_of_foxes = 5;
    1ea0:	85 e0       	ldi	r24, 0x05	; 5
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <g_number_of_foxes+0x1>
    1ea8:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? 10 : 15;
    1eac:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    1eb0:	83 31       	cpi	r24, 0x13	; 19
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <_Z11setupForFoxP5Fox_t+0xbc>
    1eb4:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    1eb8:	8e 30       	cpi	r24, 0x0E	; 14
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <_Z11setupForFoxP5Fox_t+0xc0>
    1ebc:	8f e0       	ldi	r24, 0x0F	; 15
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <_Z11setupForFoxP5Fox_t+0xc2>
    1ec0:	8a e0       	ldi	r24, 0x0A	; 10
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <_Z11setupForFoxP5Fox_t+0xc2>
    1ec4:	8a e0       	ldi	r24, 0x0A	; 10
    1ec6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZL19g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    1eca:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    1ece:	8e 30       	cpi	r24, 0x0E	; 14
    1ed0:	18 f0       	brcs	.+6      	; 0x1ed8 <_Z11setupForFoxP5Fox_t+0xd4>
    1ed2:	8d e0       	ldi	r24, 0x0D	; 13
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <_Z11setupForFoxP5Fox_t+0xd8>
    1ed8:	88 e0       	ldi	r24, 0x08	; 8
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <g_fox_id_offset+0x1>
    1ee0:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <g_fox_id_offset>
			g_id_interval = 600;
    1ee4:	88 e5       	ldi	r24, 0x58	; 88
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <g_id_interval+0x1>
    1eec:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <g_id_interval>
			g_startclock_interval = 120;
    1ef0:	88 e7       	ldi	r24, 0x78	; 120
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1ef8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1efc:	20 c0       	rjmp	.+64     	; 0x1f3e <_Z11setupForFoxP5Fox_t+0x13a>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    1efe:	88 e5       	ldi	r24, 0x58	; 88
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <g_on_air_interval+0x1>
    1f06:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <g_on_air_interval>
			g_number_of_foxes = 1;
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	30 93 41 05 	sts	0x0541, r19	; 0x800541 <g_number_of_foxes+0x1>
    1f12:	20 93 40 05 	sts	0x0540, r18	; 0x800540 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    1f16:	28 e0       	ldi	r18, 0x08	; 8
    1f18:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <_ZL19g_pattern_codespeed>
			g_id_interval = 600;
    1f1c:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <g_id_interval+0x1>
    1f20:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    1f24:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    1f28:	88 30       	cpi	r24, 0x08	; 8
    1f2a:	19 f0       	breq	.+6      	; 0x1f32 <_Z11setupForFoxP5Fox_t+0x12e>
    1f2c:	8c e2       	ldi	r24, 0x2C	; 44
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <_Z11setupForFoxP5Fox_t+0x132>
    1f32:	88 e7       	ldi	r24, 0x78	; 120
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1f3a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
	}

	if(g_use_rtc_to_start)
    1f3e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <g_use_rtc_to_start>
    1f42:	88 23       	and	r24, r24
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <_Z11setupForFoxP5Fox_t+0x144>
    1f46:	8a c0       	rjmp	.+276    	; 0x205c <_Z11setupForFoxP5Fox_t+0x258>
	{
		if(g_event_start_epoch < g_current_epoch)   /* timed event in progress */
    1f48:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1f4c:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1f50:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1f54:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1f58:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    1f5c:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    1f60:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    1f64:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    1f68:	48 17       	cp	r20, r24
    1f6a:	59 07       	cpc	r21, r25
    1f6c:	6a 07       	cpc	r22, r26
    1f6e:	7b 07       	cpc	r23, r27
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <_Z11setupForFoxP5Fox_t+0x170>
    1f72:	4d c0       	rjmp	.+154    	; 0x200e <_Z11setupForFoxP5Fox_t+0x20a>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;               /* Total elapsed time counter: synced at event start time */
    1f74:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    1f78:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    1f7c:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    1f80:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    1f84:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    1f88:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    1f8c:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    1f90:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    1f94:	84 1b       	sub	r24, r20
    1f96:	95 0b       	sbc	r25, r21
    1f98:	a6 0b       	sbc	r26, r22
    1f9a:	b7 0b       	sbc	r27, r23
    1f9c:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_seconds_since_sync>
    1fa0:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_seconds_since_sync+0x1>
    1fa4:	a0 93 5b 05 	sts	0x055B, r26	; 0x80055b <g_seconds_since_sync+0x2>
    1fa8:	b0 93 5c 05 	sts	0x055C, r27	; 0x80055c <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    1fac:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    1fb0:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
			g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    1fb4:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_code_throttle+0x1>
    1fb8:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_code_throttle>
			g_callsign_sent = FALSE;
    1fbc:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_callsign_sent>

			g_fox_counter = 1 + (g_seconds_since_sync % g_on_air_interval);
    1fc0:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_seconds_since_sync>
    1fc4:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_seconds_since_sync+0x1>
    1fc8:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_seconds_since_sync+0x2>
    1fcc:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_seconds_since_sync+0x3>
    1fd0:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <g_on_air_interval>
    1fd4:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <g_on_air_interval+0x1>
    1fd8:	03 2e       	mov	r0, r19
    1fda:	00 0c       	add	r0, r0
    1fdc:	44 0b       	sbc	r20, r20
    1fde:	55 0b       	sbc	r21, r21
    1fe0:	0e 94 13 29 	call	0x5226	; 0x5226 <__divmodsi4>
    1fe4:	6f 5f       	subi	r22, 0xFF	; 255
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <g_fox_counter+0x1>
    1fec:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1ff0:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval+0x1>
    1ff4:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1ff8:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_transition>
			g_fox_id_offset = 0;
    1ffc:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset+0x1>
    2000:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    2004:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_time_to_ID>
			g_audio_tone_state = OFF;
    2008:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_audio_tone_state>
    200c:	47 c0       	rjmp	.+142    	; 0x209c <_Z11setupForFoxP5Fox_t+0x298>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    200e:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_seconds_since_sync>
    2012:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_seconds_since_sync+0x1>
    2016:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_seconds_since_sync+0x2>
    201a:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    201e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    2022:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    2026:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_code_throttle+0x1>
    202a:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_code_throttle>
			g_callsign_sent = FALSE;
    202e:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_callsign_sent>

			g_fox_counter = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    203a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    203e:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval+0x1>
    2042:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    2046:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_transition>
			g_fox_id_offset = 0;
    204a:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset+0x1>
    204e:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    2052:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_time_to_ID>
			g_audio_tone_state = OFF;
    2056:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_audio_tone_state>
    205a:	20 c0       	rjmp	.+64     	; 0x209c <_Z11setupForFoxP5Fox_t+0x298>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    205c:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_seconds_since_sync>
    2060:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_seconds_since_sync+0x1>
    2064:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_seconds_since_sync+0x2>
    2068:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    206c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    2070:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    2074:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_code_throttle+0x1>
    2078:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_code_throttle>
		g_callsign_sent = FALSE;
    207c:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_callsign_sent>

//		g_on_air_interval = 0;
		g_fox_seconds_into_interval = 0;
    2080:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval+0x1>
    2084:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_seconds_into_interval>
//		g_number_of_foxes = 0;
		g_fox_transition = FALSE;
    2088:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_transition>
		g_fox_id_offset = 0;
    208c:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset+0x1>
    2090:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_id_offset>
//		g_id_interval = 0;
		g_time_to_ID = FALSE;
    2094:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_time_to_ID>
		g_audio_tone_state = OFF;
    2098:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_audio_tone_state>
	}

	g_LEDs_Timed_Out = !g_enable_LEDs;
    209c:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <_ZL13g_enable_LEDs>
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	91 11       	cpse	r25, r1
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZL16g_LEDs_Timed_Out>
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	87 e0       	ldi	r24, 0x07	; 7
    20ae:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    20b2:	08 95       	ret

000020b4 <__vector_1>:

/***********************************************************************
 * Handle RTC 1-second interrupts
 **********************************************************************/
ISR( INT0_vect )
{
    20b4:	1f 92       	push	r1
    20b6:	0f 92       	push	r0
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	0f 92       	push	r0
    20bc:	11 24       	eor	r1, r1
    20be:	2f 93       	push	r18
    20c0:	3f 93       	push	r19
    20c2:	4f 93       	push	r20
    20c4:	5f 93       	push	r21
    20c6:	6f 93       	push	r22
    20c8:	7f 93       	push	r23
    20ca:	8f 93       	push	r24
    20cc:	9f 93       	push	r25
    20ce:	af 93       	push	r26
    20d0:	bf 93       	push	r27
    20d2:	ef 93       	push	r30
    20d4:	ff 93       	push	r31
	static int id_countdown = 0;

	g_current_epoch++;
    20d6:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    20da:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    20de:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    20e2:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	a1 1d       	adc	r26, r1
    20ea:	b1 1d       	adc	r27, r1
    20ec:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_current_epoch>
    20f0:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <g_current_epoch+0x1>
    20f4:	a0 93 50 05 	sts	0x0550, r26	; 0x800550 <g_current_epoch+0x2>
    20f8:	b0 93 51 05 	sts	0x0551, r27	; 0x800551 <g_current_epoch+0x3>

	if(g_temperature_check_countdown)
    20fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    2100:	88 23       	and	r24, r24
    2102:	29 f0       	breq	.+10     	; 0x210e <__vector_1+0x5a>
	{
		g_temperature_check_countdown--;
    2104:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    2108:	81 50       	subi	r24, 0x01	; 1
    210a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL29g_temperature_check_countdown>
		/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
		 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
	}

	if(g_transmissions_disabled)
    210e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    2112:	88 23       	and	r24, r24
    2114:	91 f1       	breq	.+100    	; 0x217a <__vector_1+0xc6>
	{
		if(g_use_rtc_to_start)
    2116:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <g_use_rtc_to_start>
    211a:	88 23       	and	r24, r24
    211c:	09 f4       	brne	.+2      	; 0x2120 <__vector_1+0x6c>
    211e:	4f c1       	rjmp	.+670    	; 0x23be <__vector_1+0x30a>
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
    2120:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_current_epoch>
    2124:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_current_epoch+0x1>
    2128:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch+0x2>
    212c:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x3>
    2130:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    2134:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    2138:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    213c:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    2140:	48 17       	cp	r20, r24
    2142:	59 07       	cpc	r21, r25
    2144:	6a 07       	cpc	r22, r26
    2146:	7b 07       	cpc	r23, r27
    2148:	08 f4       	brcc	.+2      	; 0x214c <__vector_1+0x98>
    214a:	39 c1       	rjmp	.+626    	; 0x23be <__vector_1+0x30a>
    214c:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_current_epoch>
    2150:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_current_epoch+0x1>
    2154:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch+0x2>
    2158:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x3>
    215c:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    2160:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    2164:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    2168:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    216c:	48 17       	cp	r20, r24
    216e:	59 07       	cpc	r21, r25
    2170:	6a 07       	cpc	r22, r26
    2172:	7b 07       	cpc	r23, r27
    2174:	08 f4       	brcc	.+2      	; 0x2178 <__vector_1+0xc4>
    2176:	e9 c0       	rjmp	.+466    	; 0x234a <__vector_1+0x296>
    2178:	22 c1       	rjmp	.+580    	; 0x23be <__vector_1+0x30a>
			}
		}
	}
	else
	{
		if(g_use_rtc_to_start)
    217a:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <g_use_rtc_to_start>
    217e:	88 23       	and	r24, r24
    2180:	f1 f0       	breq	.+60     	; 0x21be <__vector_1+0x10a>
		{
			if(g_current_epoch >= g_event_finish_epoch)
    2182:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_current_epoch>
    2186:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_current_epoch+0x1>
    218a:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch+0x2>
    218e:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x3>
    2192:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    2196:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    219a:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    219e:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    21a2:	48 17       	cp	r20, r24
    21a4:	59 07       	cpc	r21, r25
    21a6:	6a 07       	cpc	r22, r26
    21a8:	7b 07       	cpc	r23, r27
    21aa:	48 f0       	brcs	.+18     	; 0x21be <__vector_1+0x10a>
			{
				g_use_rtc_to_start = FALSE;
    21ac:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <g_use_rtc_to_start>
				g_transmissions_disabled = TRUE;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
				g_on_the_air = FALSE;
    21b6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    21ba:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
			}
		}

		if(!g_transmissions_disabled)
    21be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    21c2:	81 11       	cpse	r24, r1
    21c4:	fc c0       	rjmp	.+504    	; 0x23be <__vector_1+0x30a>
		{
			if(g_seconds_since_sync == 0)   /* sync just occurred */
    21c6:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_seconds_since_sync>
    21ca:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_seconds_since_sync+0x1>
    21ce:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_seconds_since_sync+0x2>
    21d2:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_seconds_since_sync+0x3>
    21d6:	89 2b       	or	r24, r25
    21d8:	8a 2b       	or	r24, r26
    21da:	8b 2b       	or	r24, r27
    21dc:	81 f4       	brne	.+32     	; 0x21fe <__vector_1+0x14a>
			{
				id_countdown = g_id_interval;
    21de:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <g_id_interval>
    21e2:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <g_id_interval+0x1>
    21e6:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10__vector_1E12id_countdown+0x1>
    21ea:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10__vector_1E12id_countdown>
				g_fox_counter = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    21f6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
				g_lastSeconds = 0;
    21fa:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <g_lastSeconds>
				/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
				 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
			}

			g_seconds_since_sync++; /* Total elapsed time counter */
    21fe:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_seconds_since_sync>
    2202:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_seconds_since_sync+0x1>
    2206:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_seconds_since_sync+0x2>
    220a:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_seconds_since_sync+0x3>
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	a1 1d       	adc	r26, r1
    2212:	b1 1d       	adc	r27, r1
    2214:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_seconds_since_sync>
    2218:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_seconds_since_sync+0x1>
    221c:	a0 93 5b 05 	sts	0x055B, r26	; 0x80055b <g_seconds_since_sync+0x2>
    2220:	b0 93 5c 05 	sts	0x055C, r27	; 0x80055c <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval++;
    2224:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <g_fox_seconds_into_interval>
    2228:	90 91 43 05 	lds	r25, 0x0543	; 0x800543 <g_fox_seconds_into_interval+0x1>
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <g_fox_seconds_into_interval+0x1>
    2232:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <g_fox_seconds_into_interval>

			if(id_countdown)
    2236:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10__vector_1E12id_countdown>
    223a:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10__vector_1E12id_countdown+0x1>
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	29 f0       	breq	.+10     	; 0x224c <__vector_1+0x198>
			{
				id_countdown--;
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10__vector_1E12id_countdown+0x1>
    2248:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10__vector_1E12id_countdown>
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
    224c:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_number_of_foxes>
    2250:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <g_number_of_foxes+0x1>
    2254:	89 2b       	or	r24, r25
    2256:	09 f4       	brne	.+2      	; 0x225a <__vector_1+0x1a6>
    2258:	55 c0       	rjmp	.+170    	; 0x2304 <__vector_1+0x250>
    225a:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <g_seconds_since_sync>
    225e:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <g_seconds_since_sync+0x1>
    2262:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_seconds_since_sync+0x2>
    2266:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_seconds_since_sync+0x3>
    226a:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <g_on_air_interval>
    226e:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <g_on_air_interval+0x1>
    2272:	03 2e       	mov	r0, r19
    2274:	00 0c       	add	r0, r0
    2276:	44 0b       	sbc	r20, r20
    2278:	55 0b       	sbc	r21, r21
    227a:	0e 94 13 29 	call	0x5226	; 0x5226 <__divmodsi4>
    227e:	67 2b       	or	r22, r23
    2280:	68 2b       	or	r22, r24
    2282:	69 2b       	or	r22, r25
    2284:	09 f4       	brne	.+2      	; 0x2288 <__vector_1+0x1d4>
    2286:	68 c0       	rjmp	.+208    	; 0x2358 <__vector_1+0x2a4>
    2288:	3d c0       	rjmp	.+122    	; 0x2304 <__vector_1+0x250>
			{
				g_fox_counter++;

				if(g_fox_counter > g_number_of_foxes)
				{
					g_fox_counter = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    2292:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

					if(g_sync_enabled)
    2296:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    229a:	88 23       	and	r24, r24
    229c:	a1 f0       	breq	.+40     	; 0x22c6 <__vector_1+0x212>
					{
						PCMSK2 &= ~(1 << PCINT20);  /* Disable PCINT20 */
    229e:	ed e6       	ldi	r30, 0x6D	; 109
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	8f 7e       	andi	r24, 0xEF	; 239
    22a6:	80 83       	st	Z, r24
						PCICR &= ~(1 << PCIE2);     /* Disable pin change interrupt 2 */
    22a8:	e8 e6       	ldi	r30, 0x68	; 104
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8b 7f       	andi	r24, 0xFB	; 251
    22b0:	80 83       	st	Z, r24
						pinMode(PIN_SYNC, INPUT);
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	84 e0       	ldi	r24, 0x04	; 4
    22b6:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
						pinMode(PIN_SYNC, OUTPUT);  /* Set sync pin as output low */
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
						g_sync_enabled = FALSE;
    22c2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_sync_enabled>
					}

					g_LEDs_Timed_Out = TRUE;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZL16g_LEDs_Timed_Out>
					digitalWrite(PIN_LED2, OFF);
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	87 e0       	ldi	r24, 0x07	; 7
    22d0:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
				}
				g_fox_transition = TRUE;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_fox_transition>
				g_fox_seconds_into_interval = 0;
    22da:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval+0x1>
    22de:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_seconds_into_interval>

				if(!id_countdown)
    22e2:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10__vector_1E12id_countdown>
    22e6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10__vector_1E12id_countdown+0x1>
    22ea:	89 2b       	or	r24, r25
    22ec:	59 f4       	brne	.+22     	; 0x2304 <__vector_1+0x250>
				{
					id_countdown = g_id_interval;
    22ee:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <g_id_interval>
    22f2:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <g_id_interval+0x1>
    22f6:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10__vector_1E12id_countdown+0x1>
    22fa:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10__vector_1E12id_countdown>
					g_time_to_ID = TRUE;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_time_to_ID>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
    2304:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL20g_enable_start_timer>
    2308:	88 23       	and	r24, r24
    230a:	09 f4       	brne	.+2      	; 0x230e <__vector_1+0x25a>
    230c:	56 c0       	rjmp	.+172    	; 0x23ba <__vector_1+0x306>
    230e:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_seconds_since_sync>
    2312:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_seconds_since_sync+0x1>
    2316:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_seconds_since_sync+0x2>
    231a:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_seconds_since_sync+0x3>
    231e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    2322:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	65 5f       	subi	r22, 0xF5	; 245
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	8f 4f       	sbci	r24, 0xFF	; 255
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	03 2e       	mov	r0, r19
    2334:	00 0c       	add	r0, r0
    2336:	44 0b       	sbc	r20, r20
    2338:	55 0b       	sbc	r21, r21
    233a:	0e 94 13 29 	call	0x5226	; 0x5226 <__divmodsi4>
    233e:	6b 30       	cpi	r22, 0x0B	; 11
    2340:	71 05       	cpc	r23, r1
    2342:	81 05       	cpc	r24, r1
    2344:	91 05       	cpc	r25, r1
    2346:	f4 f0       	brlt	.+60     	; 0x2384 <__vector_1+0x2d0>
    2348:	38 c0       	rjmp	.+112    	; 0x23ba <__vector_1+0x306>
	{
		if(g_use_rtc_to_start)
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
			{
				setupForFox(NULL);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z11setupForFoxP5Fox_t>
				g_transmissions_disabled = FALSE;
    2352:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
    2356:	33 c0       	rjmp	.+102    	; 0x23be <__vector_1+0x30a>
				id_countdown--;
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
			{
				g_fox_counter++;
    2358:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    235c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    2366:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

				if(g_fox_counter > g_number_of_foxes)
    236a:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    236e:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    2372:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_number_of_foxes>
    2376:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <g_number_of_foxes+0x1>
    237a:	82 17       	cp	r24, r18
    237c:	93 07       	cpc	r25, r19
    237e:	0c f4       	brge	.+2      	; 0x2382 <__vector_1+0x2ce>
    2380:	84 cf       	rjmp	.-248    	; 0x228a <__vector_1+0x1d6>
    2382:	a8 cf       	rjmp	.-176    	; 0x22d4 <__vector_1+0x220>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
			{
				g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    2384:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_seconds_since_sync>
    2388:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_seconds_since_sync+0x1>
    238c:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <g_seconds_since_sync+0x2>
    2390:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <g_seconds_since_sync+0x3>
    2394:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    2398:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	65 5f       	subi	r22, 0xF5	; 245
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	03 2e       	mov	r0, r19
    23aa:	00 0c       	add	r0, r0
    23ac:	44 0b       	sbc	r20, r20
    23ae:	55 0b       	sbc	r21, r21
    23b0:	0e 94 13 29 	call	0x5226	; 0x5226 <__divmodsi4>
    23b4:	60 93 38 05 	sts	0x0538, r22	; 0x800538 <g_lastSeconds>
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <__vector_1+0x30a>
			}
			else
			{
				g_lastSeconds = 0;
    23ba:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <g_lastSeconds>
			}
		}
	}
}   /* end of Timer1 ISR */
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	bf 91       	pop	r27
    23c4:	af 91       	pop	r26
    23c6:	9f 91       	pop	r25
    23c8:	8f 91       	pop	r24
    23ca:	7f 91       	pop	r23
    23cc:	6f 91       	pop	r22
    23ce:	5f 91       	pop	r21
    23d0:	4f 91       	pop	r20
    23d2:	3f 91       	pop	r19
    23d4:	2f 91       	pop	r18
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	0f 90       	pop	r0
    23dc:	1f 90       	pop	r1
    23de:	18 95       	reti

000023e0 <_Z12permCallsignPc>:
	g_LEDs_Timed_Out = !g_enable_LEDs;
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
}

void permCallsign(char* call)
{
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
	uint8_t i;

	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);
    23e6:	44 e1       	ldi	r20, 0x14	; 20
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	bc 01       	movw	r22, r24
    23ec:	8c e1       	ldi	r24, 0x1C	; 28
    23ee:	95 e0       	ldi	r25, 0x05	; 5
    23f0:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <strncpy>

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    23f4:	c0 e0       	ldi	r28, 0x00	; 0
    23f6:	0c e1       	ldi	r16, 0x1C	; 28
    23f8:	15 e0       	ldi	r17, 0x05	; 5
    23fa:	f8 01       	movw	r30, r16
    23fc:	01 90       	ld	r0, Z+
    23fe:	00 20       	and	r0, r0
    2400:	e9 f7       	brne	.-6      	; 0x23fc <_Z12permCallsignPc+0x1c>
    2402:	cf 01       	movw	r24, r30
    2404:	8d 51       	subi	r24, 0x1D	; 29
    2406:	95 40       	sbci	r25, 0x05	; 5
    2408:	2c 2f       	mov	r18, r28
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	28 17       	cp	r18, r24
    240e:	39 07       	cpc	r19, r25
    2410:	58 f4       	brcc	.+22     	; 0x2428 <_Z12permCallsignPc+0x48>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    2412:	c9 01       	movw	r24, r18
    2414:	fc 01       	movw	r30, r24
    2416:	e9 5f       	subi	r30, 0xF9	; 249
    2418:	fa 4f       	sbci	r31, 0xFA	; 250
    241a:	65 89       	ldd	r22, Z+21	; 0x15
    241c:	8f 54       	subi	r24, 0x4F	; 79
    241e:	9d 4f       	sbci	r25, 0xFD	; 253
    2420:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
{
	uint8_t i;

	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    2424:	cf 5f       	subi	r28, 0xFF	; 255
    2426:	e9 cf       	rjmp	.-46     	; 0x23fa <_Z12permCallsignPc+0x1a>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    2428:	8c 2f       	mov	r24, r28
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	8f 54       	subi	r24, 0x4F	; 79
    2430:	9d 4f       	sbci	r25, 0xFD	; 253
    2432:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
}
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <_Z7permFox5Fox_t>:

void permFox(Fox_t fox)
{
	eeprom_update_byte((uint8_t*)&ee_fox_setting,(uint8_t)fox);
    243e:	68 2f       	mov	r22, r24
    2440:	87 e3       	ldi	r24, 0x37	; 55
    2442:	92 e0       	ldi	r25, 0x02	; 2
    2444:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    2448:	08 95       	ret

0000244a <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
void processKey(char key)
{
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	1f 92       	push	r1
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
	static int digits;
	static int value;
	static int stringLength;
	static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };

	if(key == '*')
    2454:	8a 32       	cpi	r24, 0x2A	; 42
    2456:	99 f4       	brne	.+38     	; 0x247e <_Z10processKeyc+0x34>
	{
		state = STATE_SENTENCE_START;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2460:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    2464:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    2468:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZZ10processKeycE12stringLength>
			value = 0;
    246c:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_ZZ10processKeycE5value+0x1>
    2470:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <_ZZ10processKeycE5value>
			digits = 0;
    2474:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZZ10processKeycE6digits+0x1>
    2478:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZZ10processKeycE6digits>
    247c:	93 c1       	rjmp	.+806    	; 0x27a4 <_Z10processKeyc+0x35a>
	if(key == '*')
	{
		state = STATE_SENTENCE_START;
	}

	switch(state)
    247e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    2482:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2486:	31 97       	sbiw	r30, 0x01	; 1
    2488:	ed 30       	cpi	r30, 0x0D	; 13
    248a:	f1 05       	cpc	r31, r1
    248c:	08 f0       	brcs	.+2      	; 0x2490 <_Z10processKeyc+0x46>
    248e:	8a c1       	rjmp	.+788    	; 0x27a4 <_Z10processKeyc+0x35a>
    2490:	e5 58       	subi	r30, 0x85	; 133
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__tablejump2__>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    2498:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    249c:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZZ10processKeycE12stringLength>
			value = 0;
    24a0:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_ZZ10processKeycE5value+0x1>
    24a4:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <_ZZ10processKeycE5value>
			digits = 0;
    24a8:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZZ10processKeycE6digits+0x1>
    24ac:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZZ10processKeycE6digits>

			if(key == 'C')
    24b0:	83 34       	cpi	r24, 0x43	; 67
    24b2:	39 f4       	brne	.+14     	; 0x24c2 <_Z10processKeyc+0x78>
			{
				state = STATE_C;
    24b4:	86 e0       	ldi	r24, 0x06	; 6
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    24bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    24c0:	71 c1       	rjmp	.+738    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == 'A')
    24c2:	81 34       	cpi	r24, 0x41	; 65
    24c4:	39 f4       	brne	.+14     	; 0x24d4 <_Z10processKeyc+0x8a>
			{
				state = STATE_A;
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    24ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    24d2:	68 c1       	rjmp	.+720    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key != '*')
    24d4:	8a 32       	cpi	r24, 0x2A	; 42
    24d6:	09 f4       	brne	.+2      	; 0x24da <_Z10processKeyc+0x90>
    24d8:	65 c1       	rjmp	.+714    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				value = key - '0';
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	c0 97       	sbiw	r24, 0x30	; 48
    24de:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <_ZZ10processKeycE5value+0x1>
    24e2:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_ZZ10processKeycE5value>
				setupPorts();
    24e6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_Z10setupPortsv>
				state = STATE_TEST_ATTENUATOR;
    24ea:	8d e0       	ldi	r24, 0x0D	; 13
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    24f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    24f6:	56 c1       	rjmp	.+684    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_A:
		{
			if(key == '0')
    24f8:	80 33       	cpi	r24, 0x30	; 48
    24fa:	39 f4       	brne	.+14     	; 0x250a <_Z10processKeyc+0xc0>
			{
				state = STATE_PAUSE_TRANSMISSIONS;
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2504:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2508:	4d c1       	rjmp	.+666    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '1')
    250a:	81 33       	cpi	r24, 0x31	; 49
    250c:	39 f4       	brne	.+14     	; 0x251c <_Z10processKeyc+0xd2>
			{
				state = STATE_START_TRANSMISSIONS;
    250e:	84 e0       	ldi	r24, 0x04	; 4
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2516:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    251a:	44 c1       	rjmp	.+648    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '2')
    251c:	82 33       	cpi	r24, 0x32	; 50
    251e:	09 f0       	breq	.+2      	; 0x2522 <_Z10processKeyc+0xd8>
    2520:	41 c1       	rjmp	.+642    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				state = STATE_RESTART_TRANSMISSIONS;
    2522:	85 e0       	ldi	r24, 0x05	; 5
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    252a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    252e:	3a c1       	rjmp	.+628    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_PAUSE_TRANSMISSIONS:
		{
			if(key == '#')
    2530:	83 32       	cpi	r24, 0x23	; 35
    2532:	09 f0       	breq	.+2      	; 0x2536 <_Z10processKeyc+0xec>
    2534:	37 c1       	rjmp	.+622    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				state = STATE_SHUTDOWN;
    2536:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    253a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    253e:	32 c1       	rjmp	.+612    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_C:
		{
			if(key == '1')
    2540:	81 33       	cpi	r24, 0x31	; 49
    2542:	39 f4       	brne	.+14     	; 0x2552 <_Z10processKeyc+0x108>
			{
				state = STATE_RECEIVING_CALLSIGN;
    2544:	87 e0       	ldi	r24, 0x07	; 7
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    254c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2550:	29 c1       	rjmp	.+594    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '2')
    2552:	82 33       	cpi	r24, 0x32	; 50
    2554:	39 f4       	brne	.+14     	; 0x2564 <_Z10processKeyc+0x11a>
			{
				state = STATE_RECEIVING_FOXFORMATANDID;
    2556:	88 e0       	ldi	r24, 0x08	; 8
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    255e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2562:	20 c1       	rjmp	.+576    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '4')
    2564:	84 33       	cpi	r24, 0x34	; 52
    2566:	39 f4       	brne	.+14     	; 0x2576 <_Z10processKeyc+0x12c>
			{
				state = STATE_RECEIVING_START_TIME;
    2568:	89 e0       	ldi	r24, 0x09	; 9
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2570:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2574:	17 c1       	rjmp	.+558    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '5')
    2576:	85 33       	cpi	r24, 0x35	; 53
    2578:	39 f4       	brne	.+14     	; 0x2588 <_Z10processKeyc+0x13e>
			{
				state = STATE_RECEIVING_FINISH_TIME;
    257a:	8a e0       	ldi	r24, 0x0A	; 10
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2582:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2586:	0e c1       	rjmp	.+540    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '6')
    2588:	86 33       	cpi	r24, 0x36	; 54
    258a:	39 f4       	brne	.+14     	; 0x259a <_Z10processKeyc+0x150>
			{
				state = STATE_RECEIVING_START_NOW;
    258c:	8b e0       	ldi	r24, 0x0B	; 11
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2594:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2598:	05 c1       	rjmp	.+522    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if(key == '7') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    259a:	87 33       	cpi	r24, 0x37	; 55
    259c:	39 f4       	brne	.+14     	; 0x25ac <_Z10processKeyc+0x162>
			{
				state = STATE_RECEIVING_SET_CLOCK;
    259e:	8c e0       	ldi	r24, 0x0C	; 12
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    25aa:	fc c0       	rjmp	.+504    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else
			{
				state = STATE_SHUTDOWN;
    25ac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25b0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25b4:	f7 c0       	rjmp	.+494    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_RECEIVING_CALLSIGN:
		{
			if(key == '#')
    25b6:	83 32       	cpi	r24, 0x23	; 35
    25b8:	71 f4       	brne	.+28     	; 0x25d6 <_Z10processKeyc+0x18c>
			{
				permCallsign(receivedString);
    25ba:	88 e5       	ldi	r24, 0x58	; 88
    25bc:	94 e0       	ldi	r25, 0x04	; 4
    25be:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_Z12permCallsignPc>
				lb_send_string(receivedString,FALSE);
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	88 e5       	ldi	r24, 0x58	; 88
    25c6:	94 e0       	ldi	r25, 0x04	; 4
    25c8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
				state = STATE_SHUTDOWN;
    25cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25d4:	e7 c0       	rjmp	.+462    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if((key >= '0') && (key <= '9'))
    25d6:	90 ed       	ldi	r25, 0xD0	; 208
    25d8:	98 0f       	add	r25, r24
    25da:	9a 30       	cpi	r25, 0x0A	; 10
    25dc:	08 f0       	brcs	.+2      	; 0x25e0 <_Z10processKeyc+0x196>
    25de:	e2 c0       	rjmp	.+452    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				if(digits)
    25e0:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <_ZZ10processKeycE6digits>
    25e4:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <_ZZ10processKeycE6digits+0x1>
    25e8:	23 2b       	or	r18, r19
    25ea:	c1 f1       	breq	.+112    	; 0x265c <_Z10processKeyc+0x212>
				{
					value = value * 10 + (key - '0');
    25ec:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <_ZZ10processKeycE5value>
    25f0:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <_ZZ10processKeycE5value+0x1>
    25f4:	a9 01       	movw	r20, r18
    25f6:	44 0f       	add	r20, r20
    25f8:	55 1f       	adc	r21, r21
    25fa:	22 0f       	add	r18, r18
    25fc:	33 1f       	adc	r19, r19
    25fe:	22 0f       	add	r18, r18
    2600:	33 1f       	adc	r19, r19
    2602:	22 0f       	add	r18, r18
    2604:	33 1f       	adc	r19, r19
    2606:	24 0f       	add	r18, r20
    2608:	35 1f       	adc	r19, r21
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	c0 97       	sbiw	r24, 0x30	; 48
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <_ZZ10processKeycE5value+0x1>
    2616:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_ZZ10processKeycE5value>
					if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    261a:	87 32       	cpi	r24, 0x27	; 39
    261c:	91 05       	cpc	r25, r1
    261e:	cc f4       	brge	.+50     	; 0x2652 <_Z10processKeyc+0x208>
    2620:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZZ10processKeycE12stringLength>
    2624:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    2628:	24 31       	cpi	r18, 0x14	; 20
    262a:	31 05       	cpc	r19, r1
    262c:	94 f4       	brge	.+36     	; 0x2652 <_Z10processKeyc+0x208>
					{
						receivedString[stringLength] = keyMorse[value];
    262e:	f9 01       	movw	r30, r18
    2630:	e8 5a       	subi	r30, 0xA8	; 168
    2632:	fb 4f       	sbci	r31, 0xFB	; 251
    2634:	dc 01       	movw	r26, r24
    2636:	a5 5d       	subi	r26, 0xD5	; 213
    2638:	bd 4f       	sbci	r27, 0xFD	; 253
    263a:	8c 91       	ld	r24, X
    263c:	80 83       	st	Z, r24
						stringLength++;
    263e:	2f 5f       	subi	r18, 0xFF	; 255
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    2646:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    264a:	f9 01       	movw	r30, r18
    264c:	e8 5a       	subi	r30, 0xA8	; 168
    264e:	fb 4f       	sbci	r31, 0xFB	; 251
    2650:	10 82       	st	Z, r1
					}

					digits = 0;
    2652:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZZ10processKeycE6digits+0x1>
    2656:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZZ10processKeycE6digits>
    265a:	a4 c0       	rjmp	.+328    	; 0x27a4 <_Z10processKeyc+0x35a>
				}
				else
				{
					value = key - '0';
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	c0 97       	sbiw	r24, 0x30	; 48
    2660:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <_ZZ10processKeycE5value+0x1>
    2664:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_ZZ10processKeycE5value>
					digits = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <_ZZ10processKeycE6digits+0x1>
    2670:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <_ZZ10processKeycE6digits>
    2674:	97 c0       	rjmp	.+302    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_RECEIVING_FOXFORMATANDID:
		{
			if(key == '#')
    2676:	83 32       	cpi	r24, 0x23	; 35
    2678:	c1 f4       	brne	.+48     	; 0x26aa <_Z10processKeyc+0x260>
			{
				if((value >= BEACON) && (value < INVALID_FOX))
    267a:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_ZZ10processKeycE5value>
    267e:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <_ZZ10processKeycE5value+0x1>
    2682:	86 31       	cpi	r24, 0x16	; 22
    2684:	91 05       	cpc	r25, r1
    2686:	60 f4       	brcc	.+24     	; 0x26a0 <_Z10processKeyc+0x256>
				{
					Fox_t holdFox = (Fox_t)value;
    2688:	89 83       	std	Y+1, r24	; 0x01
					permFox(holdFox);
    268a:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z7permFox5Fox_t>
					if(holdFox != g_fox)
    268e:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    2692:	99 81       	ldd	r25, Y+1	; 0x01
    2694:	98 17       	cp	r25, r24
    2696:	21 f0       	breq	.+8      	; 0x26a0 <_Z10processKeyc+0x256>
					{
						setupForFox(&holdFox);
    2698:	ce 01       	movw	r24, r28
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z11setupForFoxP5Fox_t>
					}
				}
				state = STATE_SHUTDOWN;
    26a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    26a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    26a8:	7d c0       	rjmp	.+250    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if((key >= '0') && (key <= '9'))
    26aa:	90 ed       	ldi	r25, 0xD0	; 208
    26ac:	98 0f       	add	r25, r24
    26ae:	9a 30       	cpi	r25, 0x0A	; 10
    26b0:	08 f0       	brcs	.+2      	; 0x26b4 <_Z10processKeyc+0x26a>
    26b2:	78 c0       	rjmp	.+240    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				value += key - '0';
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	c0 97       	sbiw	r24, 0x30	; 48
    26b8:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <_ZZ10processKeycE5value>
    26bc:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <_ZZ10processKeycE5value+0x1>
    26c0:	82 0f       	add	r24, r18
    26c2:	93 1f       	adc	r25, r19
    26c4:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <_ZZ10processKeycE5value+0x1>
    26c8:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_ZZ10processKeycE5value>
    26cc:	6b c0       	rjmp	.+214    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_RECEIVING_START_TIME:
		{
			if(key == '#')
    26ce:	83 32       	cpi	r24, 0x23	; 35
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <_Z10processKeyc+0x28a>
    26d2:	68 c0       	rjmp	.+208    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				state = STATE_SHUTDOWN;
    26d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    26d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    26dc:	63 c0       	rjmp	.+198    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_RECEIVING_FINISH_TIME:
		{
			if(key == '#')
    26de:	83 32       	cpi	r24, 0x23	; 35
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <_Z10processKeyc+0x29a>
    26e2:	60 c0       	rjmp	.+192    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				state = STATE_SHUTDOWN;
    26e4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    26e8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    26ec:	5b c0       	rjmp	.+182    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_RECEIVING_START_NOW:
		{
			if(key == '#')
    26ee:	83 32       	cpi	r24, 0x23	; 35
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <_Z10processKeyc+0x2aa>
    26f2:	58 c0       	rjmp	.+176    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				state = STATE_SHUTDOWN;
    26f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    26f8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    26fc:	53 c0       	rjmp	.+166    	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;

		case STATE_RECEIVING_SET_CLOCK:
		{
			if(key == '#')
    26fe:	83 32       	cpi	r24, 0x23	; 35
    2700:	79 f4       	brne	.+30     	; 0x2720 <_Z10processKeyc+0x2d6>
			{
				if(stringLength == 12)
    2702:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZZ10processKeycE12stringLength>
    2706:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    270a:	0c 97       	sbiw	r24, 0x0c	; 12
    270c:	21 f4       	brne	.+8      	; 0x2716 <_Z10processKeyc+0x2cc>
				{
					rv3028_set_date_time(receivedString);   /* String format "YYMMDDhhmmss" */
    270e:	88 e5       	ldi	r24, 0x58	; 88
    2710:	94 e0       	ldi	r25, 0x04	; 4
    2712:	0e 94 04 24 	call	0x4808	; 0x4808 <_Z20rv3028_set_date_timePc>
				}

				state = STATE_SHUTDOWN;
    2716:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    271a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    271e:	42 c0       	rjmp	.+132    	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if((key >= '0') && (key <= '9'))
    2720:	90 ed       	ldi	r25, 0xD0	; 208
    2722:	98 0f       	add	r25, r24
    2724:	9a 30       	cpi	r25, 0x0A	; 10
    2726:	f0 f5       	brcc	.+124    	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				if(stringLength < MAX_DTMF_ARG_LENGTH)
    2728:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZZ10processKeycE12stringLength>
    272c:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    2730:	28 32       	cpi	r18, 0x28	; 40
    2732:	31 05       	cpc	r19, r1
    2734:	bc f5       	brge	.+110    	; 0x27a4 <_Z10processKeyc+0x35a>
				{
					receivedString[stringLength] = key;
    2736:	f9 01       	movw	r30, r18
    2738:	e8 5a       	subi	r30, 0xA8	; 168
    273a:	fb 4f       	sbci	r31, 0xFB	; 251
    273c:	80 83       	st	Z, r24
					stringLength++;
    273e:	2f 5f       	subi	r18, 0xFF	; 255
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <_ZZ10processKeycE12stringLength+0x1>
    2746:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <_ZZ10processKeycE12stringLength>
					receivedString[stringLength] = '\0';
    274a:	f9 01       	movw	r30, r18
    274c:	e8 5a       	subi	r30, 0xA8	; 168
    274e:	fb 4f       	sbci	r31, 0xFB	; 251
    2750:	10 82       	st	Z, r1
    2752:	28 c0       	rjmp	.+80     	; 0x27a4 <_Z10processKeyc+0x35a>
		}
		break;
		
		case STATE_TEST_ATTENUATOR:
		{
			if(key == '#')
    2754:	83 32       	cpi	r24, 0x23	; 35
    2756:	59 f4       	brne	.+22     	; 0x276e <_Z10processKeyc+0x324>
			{
				setAtten(value);
    2758:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_ZZ10processKeycE5value>
    275c:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <_ZZ10processKeycE5value+0x1>
    2760:	0e 94 a0 02 	call	0x540	; 0x540 <_Z8setAttenj>
				state = STATE_SHUTDOWN;
    2764:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2768:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    276c:	1b c0       	rjmp	.+54     	; 0x27a4 <_Z10processKeyc+0x35a>
			}
			else if((key >= '0') && (key <= '9'))
    276e:	90 ed       	ldi	r25, 0xD0	; 208
    2770:	98 0f       	add	r25, r24
    2772:	9a 30       	cpi	r25, 0x0A	; 10
    2774:	b8 f4       	brcc	.+46     	; 0x27a4 <_Z10processKeyc+0x35a>
			{
				value *= 10;
				value += key - '0';
    2776:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <_ZZ10processKeycE5value>
    277a:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <_ZZ10processKeycE5value+0x1>
    277e:	a9 01       	movw	r20, r18
    2780:	44 0f       	add	r20, r20
    2782:	55 1f       	adc	r21, r21
    2784:	22 0f       	add	r18, r18
    2786:	33 1f       	adc	r19, r19
    2788:	22 0f       	add	r18, r18
    278a:	33 1f       	adc	r19, r19
    278c:	22 0f       	add	r18, r18
    278e:	33 1f       	adc	r19, r19
    2790:	24 0f       	add	r18, r20
    2792:	35 1f       	adc	r19, r21
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	c0 97       	sbiw	r24, 0x30	; 48
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <_ZZ10processKeycE5value+0x1>
    27a0:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_ZZ10processKeycE5value>
			}
		}
		break;
	}
}
    27a4:	0f 90       	pop	r0
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    27ac:	ea e7       	ldi	r30, 0x7A	; 122
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	86 fd       	sbrc	r24, 6
    27b4:	fd cf       	rjmp	.-6      	; 0x27b0 <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    27b6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    27ba:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    27be:	ea e7       	ldi	r30, 0x7A	; 122
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	90 81       	ld	r25, Z
    27c4:	90 64       	ori	r25, 0x40	; 64
    27c6:	90 83       	st	Z, r25
	return( result);
}
    27c8:	c9 01       	movw	r24, r18
    27ca:	08 95       	ret

000027cc <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    27cc:	88 ec       	ldi	r24, 0xC8	; 200
    27ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    27d2:	ea e7       	ldi	r30, 0x7A	; 122
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	87 e0       	ldi	r24, 0x07	; 7
    27d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    27da:	80 81       	ld	r24, Z
    27dc:	80 68       	ori	r24, 0x80	; 128
    27de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    27e0:	80 81       	ld	r24, Z
    27e2:	80 64       	ori	r24, 0x40	; 64
    27e4:	80 83       	st	Z, r24
	readADC();
    27e6:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_Z7readADCv>
    27ea:	08 95       	ret

000027ec <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
	float offset = CLAMP(-200.,(float)g_atmega_temp_calibration / 10.,200.);
    27f4:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    27f8:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    27fc:	07 2e       	mov	r0, r23
    27fe:	00 0c       	add	r0, r0
    2800:	88 0b       	sbc	r24, r24
    2802:	99 0b       	sbc	r25, r25
    2804:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__floatsisf>
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__divsf3>
    2814:	06 2f       	mov	r16, r22
    2816:	17 2f       	mov	r17, r23
    2818:	d8 2f       	mov	r29, r24
    281a:	c9 2f       	mov	r28, r25
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	48 e4       	ldi	r20, 0x48	; 72
    2822:	53 e4       	ldi	r21, 0x43	; 67
    2824:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__gesf2>
    2828:	18 16       	cp	r1, r24
    282a:	6c f0       	brlt	.+26     	; 0x2846 <_Z7getTempv+0x5a>
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	48 e4       	ldi	r20, 0x48	; 72
    2832:	53 ec       	ldi	r21, 0xC3	; 195
    2834:	60 2f       	mov	r22, r16
    2836:	71 2f       	mov	r23, r17
    2838:	8d 2f       	mov	r24, r29
    283a:	9c 2f       	mov	r25, r28
    283c:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__cmpsf2>
    2840:	88 23       	and	r24, r24
    2842:	34 f0       	brlt	.+12     	; 0x2850 <_Z7getTempv+0x64>
    2844:	09 c0       	rjmp	.+18     	; 0x2858 <_Z7getTempv+0x6c>
    2846:	00 e0       	ldi	r16, 0x00	; 0
    2848:	10 e0       	ldi	r17, 0x00	; 0
    284a:	d8 e4       	ldi	r29, 0x48	; 72
    284c:	c3 e4       	ldi	r28, 0x43	; 67
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <_Z7getTempv+0x6c>
    2850:	00 e0       	ldi	r16, 0x00	; 0
    2852:	10 e0       	ldi	r17, 0x00	; 0
    2854:	d8 e4       	ldi	r29, 0x48	; 72
    2856:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    2858:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    285c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_Z7readADCv>
    2860:	bc 01       	movw	r22, r24
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <__floatunsisf>
    286a:	2e ea       	ldi	r18, 0xAE	; 174
    286c:	37 e2       	ldi	r19, 0x27	; 39
    286e:	42 ea       	ldi	r20, 0xA2	; 162
    2870:	53 e4       	ldi	r21, 0x43	; 67
    2872:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__subsf3>
    2876:	26 ef       	ldi	r18, 0xF6	; 246
    2878:	38 e2       	ldi	r19, 0x28	; 40
    287a:	4c e9       	ldi	r20, 0x9C	; 156
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__divsf3>
    2882:	20 2f       	mov	r18, r16
    2884:	31 2f       	mov	r19, r17
    2886:	4d 2f       	mov	r20, r29
    2888:	5c 2f       	mov	r21, r28
    288a:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__addsf3>
    288e:	0e 94 31 28 	call	0x5062	; 0x5062 <round>
}
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	08 95       	ret

0000289c <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    289c:	ea e7       	ldi	r30, 0x7A	; 122
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    28a2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    28a6:	ac e7       	ldi	r26, 0x7C	; 124
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    28ac:	9c 91       	ld	r25, X
    28ae:	96 60       	ori	r25, 0x06	; 6
    28b0:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    28b2:	9c 91       	ld	r25, X
    28b4:	90 6c       	ori	r25, 0xC0	; 192
    28b6:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    28b8:	9c 91       	ld	r25, X
    28ba:	90 62       	ori	r25, 0x20	; 32
    28bc:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    28be:	90 81       	ld	r25, Z
    28c0:	96 60       	ori	r25, 0x06	; 6
    28c2:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    28c4:	90 81       	ld	r25, Z
    28c6:	90 62       	ori	r25, 0x20	; 32
    28c8:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    28ca:	90 81       	ld	r25, Z
    28cc:	98 60       	ori	r25, 0x08	; 8
    28ce:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    28d0:	90 81       	ld	r25, Z
    28d2:	90 68       	ori	r25, 0x80	; 128
    28d4:	90 83       	st	Z, r25

	if(enableSampling)
    28d6:	88 23       	and	r24, r24
    28d8:	31 f0       	breq	.+12     	; 0x28e6 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    28da:	80 81       	ld	r24, Z
    28dc:	88 60       	ori	r24, 0x08	; 8
    28de:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    28e0:	80 81       	ld	r24, Z
    28e2:	80 64       	ori	r24, 0x40	; 64
    28e4:	80 83       	st	Z, r24
    28e6:	08 95       	ret

000028e8 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    28e8:	fc 01       	movw	r30, r24
	while(*s)
    28ea:	21 91       	ld	r18, Z+
    28ec:	22 23       	and	r18, r18
    28ee:	41 f0       	breq	.+16     	; 0x2900 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	20 53       	subi	r18, 0x30	; 48
    28f4:	31 09       	sbc	r19, r1
    28f6:	2a 30       	cpi	r18, 0x0A	; 10
    28f8:	31 05       	cpc	r19, r1
    28fa:	b8 f3       	brcs	.-18     	; 0x28ea <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	08 95       	ret
		}
	}

	return( TRUE);
    2900:	81 e0       	ldi	r24, 0x01	; 1
}
    2902:	08 95       	ret

00002904 <_Z13startEventNowv>:

void startEventNow(void)
{
	setupForFox(NULL);
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z11setupForFoxP5Fox_t>
	g_transmissions_disabled = FALSE;
    290c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
	lb_send_string((char*)"Sync OK\n> ",FALSE);
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	88 e2       	ldi	r24, 0x28	; 40
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    291a:	08 95       	ret

0000291c <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    291c:	1f 92       	push	r1
    291e:	0f 92       	push	r0
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	0f 92       	push	r0
    2924:	11 24       	eor	r1, r1
    2926:	2f 93       	push	r18
    2928:	3f 93       	push	r19
    292a:	4f 93       	push	r20
    292c:	5f 93       	push	r21
    292e:	6f 93       	push	r22
    2930:	7f 93       	push	r23
    2932:	8f 93       	push	r24
    2934:	9f 93       	push	r25
    2936:	af 93       	push	r26
    2938:	bf 93       	push	r27
    293a:	ef 93       	push	r30
    293c:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    293e:	84 e0       	ldi	r24, 0x04	; 4
    2940:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z11digitalReadh>

	if(pinVal)  /* Sync is high */
    2944:	88 23       	and	r24, r24
    2946:	61 f0       	breq	.+24     	; 0x2960 <__vector_5+0x44>
	{
		if(g_sync_pin_stable)
    2948:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_sync_pin_stable>
    294c:	88 23       	and	r24, r24
    294e:	41 f0       	breq	.+16     	; 0x2960 <__vector_5+0x44>
		{
			startEventNow();
    2950:	0e 94 82 14 	call	0x2904	; 0x2904 <_Z13startEventNowv>
			g_sync_pin_stable = FALSE;
    2954:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <g_sync_pin_stable>
			digitalWrite(PIN_LED2, OFF);    /*  LED */
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	87 e0       	ldi	r24, 0x07	; 7
    295c:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
		}
	}

	g_sync_pin_timer = 0;
    2960:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <g_sync_pin_timer+0x1>
    2964:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <g_sync_pin_timer>
}
    2968:	ff 91       	pop	r31
    296a:	ef 91       	pop	r30
    296c:	bf 91       	pop	r27
    296e:	af 91       	pop	r26
    2970:	9f 91       	pop	r25
    2972:	8f 91       	pop	r24
    2974:	7f 91       	pop	r23
    2976:	6f 91       	pop	r22
    2978:	5f 91       	pop	r21
    297a:	4f 91       	pop	r20
    297c:	3f 91       	pop	r19
    297e:	2f 91       	pop	r18
    2980:	0f 90       	pop	r0
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	0f 90       	pop	r0
    2986:	1f 90       	pop	r1
    2988:	18 95       	reti

0000298a <_Z18reportConfigErrorsv>:
	lb_send_string((char*)"Sync OK\n> ",FALSE);
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    298a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZL15g_messages_text+0x15>
    298e:	81 11       	cpse	r24, r1
    2990:	04 c0       	rjmp	.+8      	; 0x299a <_Z18reportConfigErrorsv+0x10>
	{
		sendEEPROMString(&ee_textSetID[0]);
    2992:	8e e6       	ldi	r24, 0x6E	; 110
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	}
	
	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    299a:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    299e:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    29a2:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    29a6:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    29aa:	81 15       	cp	r24, r1
    29ac:	96 46       	sbci	r25, 0x66	; 102
    29ae:	ae 4e       	sbci	r26, 0xEE	; 238
    29b0:	bf 45       	sbci	r27, 0x5F	; 95
    29b2:	20 f4       	brcc	.+8      	; 0x29bc <_Z18reportConfigErrorsv+0x32>
	{
		sendEEPROMString(&ee_textSetTime[0]);
    29b4:	8c ed       	ldi	r24, 0xDC	; 220
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	}

	if(g_event_finish_epoch < g_current_epoch)  /* Event has already finished */
    29bc:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_event_finish_epoch>
    29c0:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    29c4:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    29c8:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    29cc:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    29d0:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    29d4:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    29d8:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    29dc:	48 17       	cp	r20, r24
    29de:	59 07       	cpc	r21, r25
    29e0:	6a 07       	cpc	r22, r26
    29e2:	7b 07       	cpc	r23, r27
    29e4:	f0 f4       	brcc	.+60     	; 0x2a22 <_Z18reportConfigErrorsv+0x98>
	{	
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    29e6:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    29ea:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    29ee:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    29f2:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    29f6:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    29fa:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    29fe:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    2a02:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    2a06:	48 17       	cp	r20, r24
    2a08:	59 07       	cpc	r21, r25
    2a0a:	6a 07       	cpc	r22, r26
    2a0c:	7b 07       	cpc	r23, r27
    2a0e:	20 f4       	brcc	.+8      	; 0x2a18 <_Z18reportConfigErrorsv+0x8e>
		{
			sendEEPROMString(&ee_textSetStart[0]);
    2a10:	86 eb       	ldi	r24, 0xB6	; 182
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
		}

		sendEEPROMString(&ee_textSetFinish[0]);
    2a18:	8f e8       	ldi	r24, 0x8F	; 143
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    2a20:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2a22:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    2a26:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    2a2a:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    2a2e:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    2a32:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    2a36:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    2a3a:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    2a3e:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    2a42:	48 17       	cp	r20, r24
    2a44:	59 07       	cpc	r21, r25
    2a46:	6a 07       	cpc	r22, r26
    2a48:	7b 07       	cpc	r23, r27
    2a4a:	28 f4       	brcc	.+10     	; 0x2a56 <_Z18reportConfigErrorsv+0xcc>
	{
		lb_send_string((char *)"Event running...\n", TRUE);
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	83 e3       	ldi	r24, 0x33	; 51
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    2a56:	08 95       	ret

00002a58 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
    2a58:	2f 92       	push	r2
    2a5a:	3f 92       	push	r3
    2a5c:	4f 92       	push	r4
    2a5e:	5f 92       	push	r5
    2a60:	6f 92       	push	r6
    2a62:	7f 92       	push	r7
    2a64:	8f 92       	push	r8
    2a66:	9f 92       	push	r9
    2a68:	af 92       	push	r10
    2a6a:	bf 92       	push	r11
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	2c 97       	sbiw	r28, 0x0c	; 12
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	2b 01       	movw	r4, r22
    2a8e:	3c 01       	movw	r6, r24
    2a90:	49 01       	movw	r8, r18
    2a92:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2a94:	62 17       	cp	r22, r18
    2a96:	73 07       	cpc	r23, r19
    2a98:	84 07       	cpc	r24, r20
    2a9a:	95 07       	cpc	r25, r21
    2a9c:	50 f0       	brcs	.+20     	; 0x2ab2 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2a9e:	e1 14       	cp	r14, r1
    2aa0:	f1 04       	cpc	r15, r1
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <_Z14reportTimeTillmmPKcS0_+0x4e>
    2aa4:	04 c1       	rjmp	.+520    	; 0x2cae <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg,TRUE);
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	c7 01       	movw	r24, r14
    2aaa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	ff c0       	rjmp	.+510    	; 0x2cb0 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg,TRUE);
		}
	}
	else
	{
		if(prefix)
    2ab2:	01 15       	cp	r16, r1
    2ab4:	11 05       	cpc	r17, r1
    2ab6:	21 f0       	breq	.+8      	; 0x2ac0 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix,TRUE);
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	c8 01       	movw	r24, r16
    2abc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2ac0:	75 01       	movw	r14, r10
    2ac2:	64 01       	movw	r12, r8
    2ac4:	c4 18       	sub	r12, r4
    2ac6:	d5 08       	sbc	r13, r5
    2ac8:	e6 08       	sbc	r14, r6
    2aca:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2acc:	c7 01       	movw	r24, r14
    2ace:	b6 01       	movw	r22, r12
    2ad0:	20 e8       	ldi	r18, 0x80	; 128
    2ad2:	33 e3       	ldi	r19, 0x33	; 51
    2ad4:	41 ee       	ldi	r20, 0xE1	; 225
    2ad6:	51 e0       	ldi	r21, 0x01	; 1
    2ad8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <__udivmodsi4>
    2adc:	29 01       	movw	r4, r18
    2ade:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2ae0:	44 27       	eor	r20, r20
    2ae2:	55 27       	eor	r21, r21
    2ae4:	60 e8       	ldi	r22, 0x80	; 128
    2ae6:	73 e3       	ldi	r23, 0x33	; 51
    2ae8:	81 ee       	ldi	r24, 0xE1	; 225
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	0e 94 b9 28 	call	0x5172	; 0x5172 <__mulsi3>
    2af0:	c6 1a       	sub	r12, r22
    2af2:	d7 0a       	sbc	r13, r23
    2af4:	e8 0a       	sbc	r14, r24
    2af6:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2af8:	c7 01       	movw	r24, r14
    2afa:	b6 01       	movw	r22, r12
    2afc:	20 e8       	ldi	r18, 0x80	; 128
    2afe:	31 e5       	ldi	r19, 0x51	; 81
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <__udivmodsi4>
    2b08:	49 01       	movw	r8, r18
    2b0a:	5a 01       	movw	r10, r20
    2b0c:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2b0e:	44 27       	eor	r20, r20
    2b10:	55 27       	eor	r21, r21
    2b12:	60 e8       	ldi	r22, 0x80	; 128
    2b14:	71 e5       	ldi	r23, 0x51	; 81
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 b9 28 	call	0x5172	; 0x5172 <__mulsi3>
    2b1e:	c6 1a       	sub	r12, r22
    2b20:	d7 0a       	sbc	r13, r23
    2b22:	e8 0a       	sbc	r14, r24
    2b24:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2b26:	c7 01       	movw	r24, r14
    2b28:	b6 01       	movw	r22, r12
    2b2a:	20 e1       	ldi	r18, 0x10	; 16
    2b2c:	3e e0       	ldi	r19, 0x0E	; 14
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <__udivmodsi4>
    2b36:	29 83       	std	Y+1, r18	; 0x01
    2b38:	3a 83       	std	Y+2, r19	; 0x02
    2b3a:	4b 83       	std	Y+3, r20	; 0x03
    2b3c:	5c 83       	std	Y+4, r21	; 0x04
    2b3e:	29 81       	ldd	r18, Y+1	; 0x01
    2b40:	3a 81       	ldd	r19, Y+2	; 0x02
    2b42:	3a 87       	std	Y+10, r19	; 0x0a
    2b44:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2b46:	29 81       	ldd	r18, Y+1	; 0x01
    2b48:	3a 81       	ldd	r19, Y+2	; 0x02
    2b4a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b4c:	5c 81       	ldd	r21, Y+4	; 0x04
    2b4e:	44 27       	eor	r20, r20
    2b50:	55 27       	eor	r21, r21
    2b52:	a0 e1       	ldi	r26, 0x10	; 16
    2b54:	be e0       	ldi	r27, 0x0E	; 14
    2b56:	0e 94 4e 29 	call	0x529c	; 0x529c <__muluhisi3>
    2b5a:	c6 1a       	sub	r12, r22
    2b5c:	d7 0a       	sbc	r13, r23
    2b5e:	e8 0a       	sbc	r14, r24
    2b60:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    2b62:	c7 01       	movw	r24, r14
    2b64:	b6 01       	movw	r22, r12
    2b66:	2c e3       	ldi	r18, 0x3C	; 60
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <__udivmodsi4>
    2b72:	2d 83       	std	Y+5, r18	; 0x05
    2b74:	3e 83       	std	Y+6, r19	; 0x06
    2b76:	4f 83       	std	Y+7, r20	; 0x07
    2b78:	58 87       	std	Y+8, r21	; 0x08
    2b7a:	0d 81       	ldd	r16, Y+5	; 0x05
    2b7c:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2b7e:	2c e3       	ldi	r18, 0x3C	; 60
    2b80:	20 9f       	mul	r18, r16
    2b82:	c0 01       	movw	r24, r0
    2b84:	21 9f       	mul	r18, r17
    2b86:	90 0d       	add	r25, r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	a6 01       	movw	r20, r12
    2b8c:	48 1b       	sub	r20, r24
    2b8e:	59 0b       	sbc	r21, r25
    2b90:	5c 87       	std	Y+12, r21	; 0x0c
    2b92:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    2b94:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <g_tempStr>

		if(years)
    2b98:	41 14       	cp	r4, r1
    2b9a:	51 04       	cpc	r5, r1
    2b9c:	b9 f0       	breq	.+46     	; 0x2bcc <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr,"%d yrs ",years);
    2b9e:	5f 92       	push	r5
    2ba0:	4f 92       	push	r4
    2ba2:	85 e4       	ldi	r24, 0x45	; 69
    2ba4:	91 e0       	ldi	r25, 0x01	; 1
    2ba6:	9f 93       	push	r25
    2ba8:	8f 93       	push	r24
    2baa:	8e ec       	ldi	r24, 0xCE	; 206
    2bac:	94 e0       	ldi	r25, 0x04	; 4
    2bae:	9f 93       	push	r25
    2bb0:	8f 93       	push	r24
    2bb2:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	8e ec       	ldi	r24, 0xCE	; 206
    2bba:	94 e0       	ldi	r25, 0x04	; 4
    2bbc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
		}

		if(days)
    2bcc:	23 28       	or	r2, r3
    2bce:	b9 f0       	breq	.+46     	; 0x2bfe <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr,"%d days ",days);
    2bd0:	9f 92       	push	r9
    2bd2:	8f 92       	push	r8
    2bd4:	8d e4       	ldi	r24, 0x4D	; 77
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	9f 93       	push	r25
    2bda:	8f 93       	push	r24
    2bdc:	8e ec       	ldi	r24, 0xCE	; 206
    2bde:	94 e0       	ldi	r25, 0x04	; 4
    2be0:	9f 93       	push	r25
    2be2:	8f 93       	push	r24
    2be4:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2be8:	61 e0       	ldi	r22, 0x01	; 1
    2bea:	8e ec       	ldi	r24, 0xCE	; 206
    2bec:	94 e0       	ldi	r25, 0x04	; 4
    2bee:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
		}

		if(hours)
    2bfe:	89 85       	ldd	r24, Y+9	; 0x09
    2c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c02:	89 2b       	or	r24, r25
    2c04:	c9 f0       	breq	.+50     	; 0x2c38 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr,"%d hrs ",hours);
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	9f 93       	push	r25
    2c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0c:	ef 93       	push	r30
    2c0e:	86 e5       	ldi	r24, 0x56	; 86
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	9f 93       	push	r25
    2c14:	8f 93       	push	r24
    2c16:	8e ec       	ldi	r24, 0xCE	; 206
    2c18:	94 e0       	ldi	r25, 0x04	; 4
    2c1a:	9f 93       	push	r25
    2c1c:	8f 93       	push	r24
    2c1e:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2c22:	61 e0       	ldi	r22, 0x01	; 1
    2c24:	8e ec       	ldi	r24, 0xCE	; 206
    2c26:	94 e0       	ldi	r25, 0x04	; 4
    2c28:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
		}

		if(minutes)
    2c38:	01 2b       	or	r16, r17
    2c3a:	c9 f0       	breq	.+50     	; 0x2c6e <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr,"%d min ",minutes);
    2c3c:	fe 81       	ldd	r31, Y+6	; 0x06
    2c3e:	ff 93       	push	r31
    2c40:	2d 81       	ldd	r18, Y+5	; 0x05
    2c42:	2f 93       	push	r18
    2c44:	8e e5       	ldi	r24, 0x5E	; 94
    2c46:	91 e0       	ldi	r25, 0x01	; 1
    2c48:	9f 93       	push	r25
    2c4a:	8f 93       	push	r24
    2c4c:	8e ec       	ldi	r24, 0xCE	; 206
    2c4e:	94 e0       	ldi	r25, 0x04	; 4
    2c50:	9f 93       	push	r25
    2c52:	8f 93       	push	r24
    2c54:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	8e ec       	ldi	r24, 0xCE	; 206
    2c5c:	94 e0       	ldi	r25, 0x04	; 4
    2c5e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
		}

		sprintf(g_tempStr,"%d sec",seconds);
    2c6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c70:	3f 93       	push	r19
    2c72:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c74:	4f 93       	push	r20
    2c76:	86 e6       	ldi	r24, 0x66	; 102
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	9f 93       	push	r25
    2c7c:	8f 93       	push	r24
    2c7e:	8e ec       	ldi	r24, 0xCE	; 206
    2c80:	94 e0       	ldi	r25, 0x04	; 4
    2c82:	9f 93       	push	r25
    2c84:	8f 93       	push	r24
    2c86:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
		lb_send_string(g_tempStr,TRUE);
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	8e ec       	ldi	r24, 0xCE	; 206
    2c8e:	94 e0       	ldi	r25, 0x04	; 4
    2c90:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2c94:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2c98:	ee ec       	ldi	r30, 0xCE	; 206
    2c9a:	f4 e0       	ldi	r31, 0x04	; 4
    2c9c:	10 82       	st	Z, r1
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
	BOOL failure = FALSE;
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2cb0:	2c 96       	adiw	r28, 0x0c	; 12
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	7f 90       	pop	r7
    2cd6:	6f 90       	pop	r6
    2cd8:	5f 90       	pop	r5
    2cda:	4f 90       	pop	r4
    2cdc:	3f 90       	pop	r3
    2cde:	2f 90       	pop	r2
    2ce0:	08 95       	ret

00002ce2 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2ce2:	2f 92       	push	r2
    2ce4:	3f 92       	push	r3
    2ce6:	4f 92       	push	r4
    2ce8:	5f 92       	push	r5
    2cea:	6f 92       	push	r6
    2cec:	7f 92       	push	r7
    2cee:	8f 92       	push	r8
    2cf0:	9f 92       	push	r9
    2cf2:	af 92       	push	r10
    2cf4:	bf 92       	push	r11
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	28 97       	sbiw	r28, 0x08	; 8
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2d16:	0f 2e       	mov	r0, r31
    2d18:	f4 e8       	ldi	r31, 0x84	; 132
    2d1a:	6f 2e       	mov	r6, r31
    2d1c:	f1 e0       	ldi	r31, 0x01	; 1
    2d1e:	7f 2e       	mov	r7, r31
    2d20:	f0 2d       	mov	r31, r0
    2d22:	0f 2e       	mov	r0, r31
    2d24:	fe ec       	ldi	r31, 0xCE	; 206
    2d26:	af 2e       	mov	r10, r31
    2d28:	f4 e0       	ldi	r31, 0x04	; 4
    2d2a:	bf 2e       	mov	r11, r31
    2d2c:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
					lb_send_string(g_tempStr,FALSE);
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    2d2e:	0f 2e       	mov	r0, r31
    2d30:	f8 e0       	ldi	r31, 0x08	; 8
    2d32:	8f 2e       	mov	r8, r31
    2d34:	f2 e0       	ldi	r31, 0x02	; 2
    2d36:	9f 2e       	mov	r9, r31
    2d38:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    2d3a:	0f 2e       	mov	r0, r31
    2d3c:	f5 ec       	ldi	r31, 0xC5	; 197
    2d3e:	4f 2e       	mov	r4, r31
    2d40:	f1 e0       	ldi	r31, 0x01	; 1
    2d42:	5f 2e       	mov	r5, r31
    2d44:	f0 2d       	mov	r31, r0
							setupForFox(&holdFox);
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2d46:	0f 2e       	mov	r0, r31
    2d48:	f4 e7       	ldi	r31, 0x74	; 116
    2d4a:	2f 2e       	mov	r2, r31
    2d4c:	f1 e0       	ldi	r31, 0x01	; 1
    2d4e:	3f 2e       	mov	r3, r31
    2d50:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2d52:	0e 94 c3 06 	call	0xd86	; 0xd86 <_Z16nextFullRxBufferv>
    2d56:	6c 01       	movw	r12, r24
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <_Z17handleLinkBusMsgsv+0x7c>
    2d5c:	cf c5       	rjmp	.+2974   	; 0x38fc <_Z17handleLinkBusMsgsv+0xc1a>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2d5e:	fc 01       	movw	r30, r24
    2d60:	81 81       	ldd	r24, Z+1	; 0x01
    2d62:	92 81       	ldd	r25, Z+2	; 0x02
    2d64:	8a 39       	cpi	r24, 0x9A	; 154
    2d66:	f3 e2       	ldi	r31, 0x23	; 35
    2d68:	9f 07       	cpc	r25, r31
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <_Z17handleLinkBusMsgsv+0x8c>
    2d6c:	af c5       	rjmp	.+2910   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
    2d6e:	c8 f4       	brcc	.+50     	; 0x2da2 <_Z17handleLinkBusMsgsv+0xc0>
    2d70:	85 32       	cpi	r24, 0x25	; 37
    2d72:	3e e1       	ldi	r19, 0x1E	; 30
    2d74:	93 07       	cpc	r25, r19
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <_Z17handleLinkBusMsgsv+0x98>
    2d78:	a9 c5       	rjmp	.+2898   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
    2d7a:	50 f4       	brcc	.+20     	; 0x2d90 <_Z17handleLinkBusMsgsv+0xae>
    2d7c:	8e 31       	cpi	r24, 0x1E	; 30
    2d7e:	e3 e0       	ldi	r30, 0x03	; 3
    2d80:	9e 07       	cpc	r25, r30
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <_Z17handleLinkBusMsgsv+0xa4>
    2d84:	c8 c1       	rjmp	.+912    	; 0x3116 <_Z17handleLinkBusMsgsv+0x434>
    2d86:	8f 36       	cpi	r24, 0x6F	; 111
    2d88:	9d 41       	sbci	r25, 0x1D	; 29
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <_Z17handleLinkBusMsgsv+0xac>
    2d8c:	a9 c2       	rjmp	.+1362   	; 0x32e0 <_Z17handleLinkBusMsgsv+0x5fe>
    2d8e:	9c c5       	rjmp	.+2872   	; 0x38c8 <_Z17handleLinkBusMsgsv+0xbe6>
    2d90:	86 3c       	cpi	r24, 0xC6	; 198
    2d92:	2e e1       	ldi	r18, 0x1E	; 30
    2d94:	92 07       	cpc	r25, r18
    2d96:	f9 f0       	breq	.+62     	; 0x2dd6 <_Z17handleLinkBusMsgsv+0xf4>
    2d98:	86 3a       	cpi	r24, 0xA6	; 166
    2d9a:	90 42       	sbci	r25, 0x20	; 32
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <_Z17handleLinkBusMsgsv+0xbe>
    2d9e:	c5 c0       	rjmp	.+394    	; 0x2f2a <_Z17handleLinkBusMsgsv+0x248>
    2da0:	93 c5       	rjmp	.+2854   	; 0x38c8 <_Z17handleLinkBusMsgsv+0xbe6>
    2da2:	85 3f       	cpi	r24, 0xF5	; 245
    2da4:	43 e2       	ldi	r20, 0x23	; 35
    2da6:	94 07       	cpc	r25, r20
    2da8:	09 f4       	brne	.+2      	; 0x2dac <_Z17handleLinkBusMsgsv+0xca>
    2daa:	05 c1       	rjmp	.+522    	; 0x2fb6 <_Z17handleLinkBusMsgsv+0x2d4>
    2dac:	50 f4       	brcc	.+20     	; 0x2dc2 <_Z17handleLinkBusMsgsv+0xe0>
    2dae:	8f 3c       	cpi	r24, 0xCF	; 207
    2db0:	f3 e2       	ldi	r31, 0x23	; 35
    2db2:	9f 07       	cpc	r25, r31
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <_Z17handleLinkBusMsgsv+0xd6>
    2db6:	3a c5       	rjmp	.+2676   	; 0x382c <_Z17handleLinkBusMsgsv+0xb4a>
    2db8:	80 3d       	cpi	r24, 0xD0	; 208
    2dba:	93 42       	sbci	r25, 0x23	; 35
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <_Z17handleLinkBusMsgsv+0xde>
    2dbe:	36 c2       	rjmp	.+1132   	; 0x322c <_Z17handleLinkBusMsgsv+0x54a>
    2dc0:	83 c5       	rjmp	.+2822   	; 0x38c8 <_Z17handleLinkBusMsgsv+0xbe6>
    2dc2:	84 33       	cpi	r24, 0x34	; 52
    2dc4:	34 e2       	ldi	r19, 0x24	; 36
    2dc6:	93 07       	cpc	r25, r19
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <_Z17handleLinkBusMsgsv+0xea>
    2dca:	2a c1       	rjmp	.+596    	; 0x3020 <_Z17handleLinkBusMsgsv+0x33e>
    2dcc:	8c 39       	cpi	r24, 0x9C	; 156
    2dce:	94 42       	sbci	r25, 0x24	; 36
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <_Z17handleLinkBusMsgsv+0xf2>
    2dd2:	81 c2       	rjmp	.+1282   	; 0x32d6 <_Z17handleLinkBusMsgsv+0x5f4>
    2dd4:	79 c5       	rjmp	.+2802   	; 0x38c8 <_Z17handleLinkBusMsgsv+0xbe6>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2dd6:	f6 01       	movw	r30, r12
    2dd8:	83 81       	ldd	r24, Z+3	; 0x03
    2dda:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <_Z17handleLinkBusMsgsv+0x100>
    2de0:	8f c0       	rjmp	.+286    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
				{
					if(c == 'B')
    2de2:	82 34       	cpi	r24, 0x42	; 66
    2de4:	91 05       	cpc	r25, r1
    2de6:	09 f4       	brne	.+2      	; 0x2dea <_Z17handleLinkBusMsgsv+0x108>
    2de8:	77 c5       	rjmp	.+2798   	; 0x38d8 <_Z17handleLinkBusMsgsv+0xbf6>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2dea:	84 34       	cpi	r24, 0x44	; 68
    2dec:	91 05       	cpc	r25, r1
    2dee:	39 f4       	brne	.+14     	; 0x2dfe <_Z17handleLinkBusMsgsv+0x11c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2df0:	87 89       	ldd	r24, Z+23	; 0x17
    2df2:	83 35       	cpi	r24, 0x53	; 83
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <_Z17handleLinkBusMsgsv+0x116>
    2df6:	73 c5       	rjmp	.+2790   	; 0x38de <_Z17handleLinkBusMsgsv+0xbfc>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2df8:	86 e0       	ldi	r24, 0x06	; 6
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	75 c0       	rjmp	.+234    	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else if(c == 'F')
    2dfe:	86 34       	cpi	r24, 0x46	; 70
    2e00:	91 05       	cpc	r25, r1
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <_Z17handleLinkBusMsgsv+0x124>
    2e04:	6f c5       	rjmp	.+2782   	; 0x38e4 <_Z17handleLinkBusMsgsv+0xc02>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2e06:	83 34       	cpi	r24, 0x43	; 67
    2e08:	91 05       	cpc	r25, r1
    2e0a:	c9 f4       	brne	.+50     	; 0x2e3e <_Z17handleLinkBusMsgsv+0x15c>
					{
						char t = lb_buff->fields[FIELD2][0];
    2e0c:	f6 01       	movw	r30, r12
    2e0e:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2e10:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2e12:	82 34       	cpi	r24, 0x42	; 66
    2e14:	29 f0       	breq	.+10     	; 0x2e20 <_Z17handleLinkBusMsgsv+0x13e>
						{
							t = '0';
						}

						if(isdigit(t))
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	c0 97       	sbiw	r24, 0x30	; 48
    2e1a:	0a 97       	sbiw	r24, 0x0a	; 10
    2e1c:	08 f0       	brcs	.+2      	; 0x2e20 <_Z17handleLinkBusMsgsv+0x13e>
    2e1e:	70 c0       	rjmp	.+224    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
						{
							c = CLAMP(BEACON,atoi(lb_buff->fields[FIELD2]),FOX_5);
    2e20:	c6 01       	movw	r24, r12
    2e22:	47 96       	adiw	r24, 0x17	; 23
    2e24:	0e 94 82 2a 	call	0x5504	; 0x5504 <atoi>
    2e28:	99 23       	and	r25, r25
    2e2a:	14 f4       	brge	.+4      	; 0x2e30 <_Z17handleLinkBusMsgsv+0x14e>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	86 30       	cpi	r24, 0x06	; 6
    2e32:	91 05       	cpc	r25, r1
    2e34:	0c f4       	brge	.+2      	; 0x2e38 <_Z17handleLinkBusMsgsv+0x156>
    2e36:	55 c0       	rjmp	.+170    	; 0x2ee2 <_Z17handleLinkBusMsgsv+0x200>
    2e38:	85 e0       	ldi	r24, 0x05	; 5
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	52 c0       	rjmp	.+164    	; 0x2ee2 <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'S')
    2e3e:	83 35       	cpi	r24, 0x53	; 83
    2e40:	91 05       	cpc	r25, r1
    2e42:	e9 f5       	brne	.+122    	; 0x2ebe <_Z17handleLinkBusMsgsv+0x1dc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2e44:	f6 01       	movw	r30, r12
    2e46:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2e48:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2e4a:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2e4c:	82 34       	cpi	r24, 0x42	; 66
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <_Z17handleLinkBusMsgsv+0x170>
    2e50:	57 c0       	rjmp	.+174    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2e52:	86 34       	cpi	r24, 0x46	; 70
    2e54:	49 f4       	brne	.+18     	; 0x2e68 <_Z17handleLinkBusMsgsv+0x186>
						{
							if((u > '0') && (u < '6'))
    2e56:	8f ec       	ldi	r24, 0xCF	; 207
    2e58:	89 0f       	add	r24, r25
    2e5a:	85 30       	cpi	r24, 0x05	; 5
    2e5c:	08 f0       	brcs	.+2      	; 0x2e60 <_Z17handleLinkBusMsgsv+0x17e>
    2e5e:	50 c0       	rjmp	.+160    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (u - '1');
    2e60:	89 2f       	mov	r24, r25
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	83 97       	sbiw	r24, 0x23	; 35
    2e66:	1b c0       	rjmp	.+54     	; 0x2e9e <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(t == 'S')
    2e68:	83 35       	cpi	r24, 0x53	; 83
    2e6a:	41 f4       	brne	.+16     	; 0x2e7c <_Z17handleLinkBusMsgsv+0x19a>
						{
							if((u > '0') && (u < '6'))
    2e6c:	8f ec       	ldi	r24, 0xCF	; 207
    2e6e:	89 0f       	add	r24, r25
    2e70:	85 30       	cpi	r24, 0x05	; 5
    2e72:	c0 f4       	brcc	.+48     	; 0x2ea4 <_Z17handleLinkBusMsgsv+0x1c2>
							{
								x = SPRINT_S1 + (u - '1');
    2e74:	89 2f       	mov	r24, r25
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	88 97       	sbiw	r24, 0x28	; 40
    2e7a:	11 c0       	rjmp	.+34     	; 0x2e9e <_Z17handleLinkBusMsgsv+0x1bc>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2e7c:	96 34       	cpi	r25, 0x46	; 70
    2e7e:	39 f4       	brne	.+14     	; 0x2e8e <_Z17handleLinkBusMsgsv+0x1ac>
						{
							if((t > '0') && (t < '6'))
    2e80:	9f ec       	ldi	r25, 0xCF	; 207
    2e82:	98 0f       	add	r25, r24
    2e84:	95 30       	cpi	r25, 0x05	; 5
    2e86:	e0 f5       	brcc	.+120    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (t - '1');
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	83 97       	sbiw	r24, 0x23	; 35
    2e8c:	08 c0       	rjmp	.+16     	; 0x2e9e <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(u == 'S')
    2e8e:	93 35       	cpi	r25, 0x53	; 83
    2e90:	b9 f5       	brne	.+110    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
						{
							if((t > '0') && (t < '6'))
    2e92:	9f ec       	ldi	r25, 0xCF	; 207
    2e94:	98 0f       	add	r25, r24
    2e96:	95 30       	cpi	r25, 0x05	; 5
    2e98:	98 f5       	brcc	.+102    	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (t - '1');
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	19 f4       	brne	.+6      	; 0x2ea8 <_Z17handleLinkBusMsgsv+0x1c6>
    2ea2:	2e c0       	rjmp	.+92     	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2ea4:	88 e0       	ldi	r24, 0x08	; 8
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR,x,SPRINT_F5);
    2ea8:	88 30       	cpi	r24, 0x08	; 8
    2eaa:	91 05       	cpc	r25, r1
    2eac:	14 f4       	brge	.+4      	; 0x2eb2 <_Z17handleLinkBusMsgsv+0x1d0>
    2eae:	88 e0       	ldi	r24, 0x08	; 8
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	83 31       	cpi	r24, 0x13	; 19
    2eb4:	91 05       	cpc	r25, r1
    2eb6:	ac f0       	brlt	.+42     	; 0x2ee2 <_Z17handleLinkBusMsgsv+0x200>
    2eb8:	82 e1       	ldi	r24, 0x12	; 18
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	12 c0       	rjmp	.+36     	; 0x2ee2 <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'N')
    2ebe:	8e 34       	cpi	r24, 0x4E	; 78
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	59 f4       	brne	.+22     	; 0x2eda <_Z17handleLinkBusMsgsv+0x1f8>
					{
						char t = lb_buff->fields[FIELD2][0];
    2ec4:	f6 01       	movw	r30, r12
    2ec6:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2ec8:	82 33       	cpi	r24, 0x32	; 50
    2eca:	09 f4       	brne	.+2      	; 0x2ece <_Z17handleLinkBusMsgsv+0x1ec>
    2ecc:	0d c5       	rjmp	.+2586   	; 0x38e8 <_Z17handleLinkBusMsgsv+0xc06>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2ece:	85 33       	cpi	r24, 0x35	; 53
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <_Z17handleLinkBusMsgsv+0x1f2>
    2ed2:	0c c5       	rjmp	.+2584   	; 0x38ec <_Z17handleLinkBusMsgsv+0xc0a>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	07 c0       	rjmp	.+14     	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2eda:	c6 01       	movw	r24, r12
    2edc:	03 96       	adiw	r24, 0x03	; 3
    2ede:	0e 94 82 2a 	call	0x5504	; 0x5504 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2ee2:	86 31       	cpi	r24, 0x16	; 22
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	60 f4       	brcc	.+24     	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
					{
						Fox_t holdFox = (Fox_t)c;
    2ee8:	89 83       	std	Y+1, r24	; 0x01
						permFox(holdFox);
    2eea:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z7permFox5Fox_t>
						if(holdFox != g_fox)
    2eee:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    2ef2:	99 81       	ldd	r25, Y+1	; 0x01
    2ef4:	98 17       	cp	r25, r24
    2ef6:	21 f0       	breq	.+8      	; 0x2f00 <_Z17handleLinkBusMsgsv+0x21e>
						{
							setupForFox(&holdFox);
    2ef8:	ce 01       	movw	r24, r28
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2f00:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    2f04:	1f 92       	push	r1
    2f06:	8f 93       	push	r24
    2f08:	3f 92       	push	r3
    2f0a:	2f 92       	push	r2
    2f0c:	bf 92       	push	r11
    2f0e:	af 92       	push	r10
    2f10:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	c5 01       	movw	r24, r10
    2f18:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
			}
			break;
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	d1 c4       	rjmp	.+2466   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    2f2a:	f6 01       	movw	r30, r12
    2f2c:	83 81       	ldd	r24, Z+3	; 0x03
    2f2e:	88 23       	and	r24, r24
    2f30:	01 f1       	breq	.+64     	; 0x2f72 <_Z17handleLinkBusMsgsv+0x290>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2f32:	94 81       	ldd	r25, Z+4	; 0x04
    2f34:	96 34       	cpi	r25, 0x46	; 70
    2f36:	11 f0       	breq	.+4      	; 0x2f3c <_Z17handleLinkBusMsgsv+0x25a>
    2f38:	80 33       	cpi	r24, 0x30	; 48
    2f3a:	59 f4       	brne	.+22     	; 0x2f52 <_Z17handleLinkBusMsgsv+0x270>
					{
						g_enable_LEDs = FALSE;
    2f3c:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZL13g_enable_LEDs>
						digitalWrite(PIN_LED1,OFF); /*  LED Off */
    2f40:	60 e0       	ldi	r22, 0x00	; 0
    2f42:	8d e0       	ldi	r24, 0x0D	; 13
    2f44:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
						digitalWrite(PIN_LED2,OFF);
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	87 e0       	ldi	r24, 0x07	; 7
    2f4c:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <_Z17handleLinkBusMsgsv+0x276>
					}
					else
					{
						g_enable_LEDs = TRUE;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL13g_enable_LEDs>
					}

					eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);
    2f58:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <_ZL13g_enable_LEDs>
    2f5c:	86 e3       	ldi	r24, 0x36	; 54
    2f5e:	92 e0       	ldi	r25, 0x02	; 2
    2f60:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    2f64:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <_ZL13g_enable_LEDs>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	91 11       	cpse	r25, r1
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr,"LED:%s\n",g_enable_LEDs ? "ON" : "OFF");
    2f72:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <_ZL13g_enable_LEDs>
    2f76:	81 11       	cpse	r24, r1
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <_Z17handleLinkBusMsgsv+0x2a2>
    2f7a:	20 e7       	ldi	r18, 0x70	; 112
    2f7c:	31 e0       	ldi	r19, 0x01	; 1
    2f7e:	82 2f       	mov	r24, r18
    2f80:	93 2f       	mov	r25, r19
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <_Z17handleLinkBusMsgsv+0x2aa>
    2f84:	ed e6       	ldi	r30, 0x6D	; 109
    2f86:	f1 e0       	ldi	r31, 0x01	; 1
    2f88:	8e 2f       	mov	r24, r30
    2f8a:	9f 2f       	mov	r25, r31
    2f8c:	9f 93       	push	r25
    2f8e:	8f 93       	push	r24
    2f90:	8c e7       	ldi	r24, 0x7C	; 124
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	9f 93       	push	r25
    2f96:	8f 93       	push	r24
    2f98:	bf 92       	push	r11
    2f9a:	af 92       	push	r10
    2f9c:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	c5 01       	movw	r24, r10
    2fa4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
			}
			break;
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	8b c4       	rjmp	.+2326   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    2fb6:	f6 01       	movw	r30, r12
    2fb8:	83 81       	ldd	r24, Z+3	; 0x03
    2fba:	88 23       	and	r24, r24
    2fbc:	89 f0       	breq	.+34     	; 0x2fe0 <_Z17handleLinkBusMsgsv+0x2fe>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2fbe:	94 81       	ldd	r25, Z+4	; 0x04
    2fc0:	96 34       	cpi	r25, 0x46	; 70
    2fc2:	11 f0       	breq	.+4      	; 0x2fc8 <_Z17handleLinkBusMsgsv+0x2e6>
    2fc4:	80 33       	cpi	r24, 0x30	; 48
    2fc6:	19 f4       	brne	.+6      	; 0x2fce <_Z17handleLinkBusMsgsv+0x2ec>
					{
						g_enable_start_timer = FALSE;
    2fc8:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_ZL20g_enable_start_timer>
    2fcc:	03 c0       	rjmp	.+6      	; 0x2fd4 <_Z17handleLinkBusMsgsv+0x2f2>
					}
					else
					{
						g_enable_start_timer = TRUE;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL20g_enable_start_timer>
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
    2fd4:	60 91 03 05 	lds	r22, 0x0503	; 0x800503 <_ZL20g_enable_start_timer>
    2fd8:	81 e3       	ldi	r24, 0x31	; 49
    2fda:	92 e0       	ldi	r25, 0x02	; 2
    2fdc:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2fe0:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL20g_enable_start_timer>
    2fe4:	81 11       	cpse	r24, r1
    2fe6:	05 c0       	rjmp	.+10     	; 0x2ff2 <_Z17handleLinkBusMsgsv+0x310>
    2fe8:	20 e7       	ldi	r18, 0x70	; 112
    2fea:	31 e0       	ldi	r19, 0x01	; 1
    2fec:	82 2f       	mov	r24, r18
    2fee:	93 2f       	mov	r25, r19
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <_Z17handleLinkBusMsgsv+0x318>
    2ff2:	ed e6       	ldi	r30, 0x6D	; 109
    2ff4:	f1 e0       	ldi	r31, 0x01	; 1
    2ff6:	8e 2f       	mov	r24, r30
    2ff8:	9f 2f       	mov	r25, r31
    2ffa:	9f 93       	push	r25
    2ffc:	8f 93       	push	r24
    2ffe:	7f 92       	push	r7
    3000:	6f 92       	push	r6
    3002:	bf 92       	push	r11
    3004:	af 92       	push	r10
    3006:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
				lb_send_string(g_tempStr,FALSE);
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	c5 01       	movw	r24, r10
    300e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
			}
			break;
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	56 c4       	rjmp	.+2220   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3020:	f6 01       	movw	r30, r12
    3022:	83 81       	ldd	r24, Z+3	; 0x03
    3024:	88 23       	and	r24, r24
    3026:	09 f4       	brne	.+2      	; 0x302a <_Z17handleLinkBusMsgsv+0x348>
    3028:	51 c4       	rjmp	.+2210   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    302a:	80 33       	cpi	r24, 0x30	; 48
    302c:	21 f4       	brne	.+8      	; 0x3036 <_Z17handleLinkBusMsgsv+0x354>
					{
						g_transmissions_disabled = TRUE;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
    3034:	4b c4       	rjmp	.+2198   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3036:	81 33       	cpi	r24, 0x31	; 49
    3038:	19 f4       	brne	.+6      	; 0x3040 <_Z17handleLinkBusMsgsv+0x35e>
					{
						startEventNow();
    303a:	0e 94 82 14 	call	0x2904	; 0x2904 <_Z13startEventNowv>
    303e:	46 c4       	rjmp	.+2188   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    3040:	82 33       	cpi	r24, 0x32	; 50
    3042:	09 f0       	breq	.+2      	; 0x3046 <_Z17handleLinkBusMsgsv+0x364>
    3044:	43 c4       	rjmp	.+2182   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
					{
						g_transmissions_disabled = TRUE;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>

						if(!clockConfigurationError())
    304c:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z23clockConfigurationErrorv>
    3050:	81 11       	cpse	r24, r1
    3052:	5e c0       	rjmp	.+188    	; 0x3110 <_Z17handleLinkBusMsgsv+0x42e>
						{
							g_use_rtc_to_start = TRUE;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_use_rtc_to_start>
							reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    305a:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_start_epoch>
    305e:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    3062:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    3066:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    306a:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_current_epoch>
    306e:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_current_epoch+0x1>
    3072:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch+0x2>
    3076:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x3>
    307a:	0f 2e       	mov	r0, r31
    307c:	fc e8       	ldi	r31, 0x8C	; 140
    307e:	ef 2e       	mov	r14, r31
    3080:	f1 e0       	ldi	r31, 0x01	; 1
    3082:	ff 2e       	mov	r15, r31
    3084:	f0 2d       	mov	r31, r0
    3086:	09 e9       	ldi	r16, 0x99	; 153
    3088:	11 e0       	ldi	r17, 0x01	; 1
    308a:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
							reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    308e:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <g_event_finish_epoch>
    3092:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    3096:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    309a:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    309e:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_start_epoch>
    30a2:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    30a6:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    30aa:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    30ae:	e1 2c       	mov	r14, r1
    30b0:	f1 2c       	mov	r15, r1
    30b2:	05 ea       	ldi	r16, 0xA5	; 165
    30b4:	11 e0       	ldi	r17, 0x01	; 1
    30b6:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
							if(g_event_start_epoch < g_current_epoch)
    30ba:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    30be:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    30c2:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    30c6:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    30ca:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    30ce:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    30d2:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    30d6:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    30da:	48 17       	cp	r20, r24
    30dc:	59 07       	cpc	r21, r25
    30de:	6a 07       	cpc	r22, r26
    30e0:	7b 07       	cpc	r23, r27
    30e2:	08 f0       	brcs	.+2      	; 0x30e6 <_Z17handleLinkBusMsgsv+0x404>
    30e4:	f3 c3       	rjmp	.+2022   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
							{
								reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    30e6:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <g_event_finish_epoch>
    30ea:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    30ee:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    30f2:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    30f6:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_current_epoch>
    30fa:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_current_epoch+0x1>
    30fe:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch+0x2>
    3102:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x3>
    3106:	0d ea       	ldi	r16, 0xAD	; 173
    3108:	11 e0       	ldi	r17, 0x01	; 1
    310a:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
    310e:	de c3       	rjmp	.+1980   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
							}
						}
						else
						{
							reportConfigErrors();
    3110:	0e 94 c5 14 	call	0x298a	; 0x298a <_Z18reportConfigErrorsv>
    3114:	db c3       	rjmp	.+1974   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    3116:	f6 01       	movw	r30, r12
    3118:	83 81       	ldd	r24, Z+3	; 0x03
    311a:	88 23       	and	r24, r24
    311c:	09 f4       	brne	.+2      	; 0x3120 <_Z17handleLinkBusMsgsv+0x43e>
    311e:	4d c0       	rjmp	.+154    	; 0x31ba <_Z17handleLinkBusMsgsv+0x4d8>
				{
					strcpy(g_tempStr," ");  /* Space before ID gets sent */
    3120:	80 e2       	ldi	r24, 0x20	; 32
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	f5 01       	movw	r30, r10
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	80 83       	st	Z, r24
					strcat(g_tempStr,lb_buff->fields[FIELD1]);
    312a:	b6 01       	movw	r22, r12
    312c:	6d 5f       	subi	r22, 0xFD	; 253
    312e:	7f 4f       	sbci	r23, 0xFF	; 255
    3130:	c5 01       	movw	r24, r10
    3132:	0e 94 cf 2a 	call	0x559e	; 0x559e <strcat>

					if(lb_buff->fields[FIELD2][0])
    3136:	f6 01       	movw	r30, r12
    3138:	87 89       	ldd	r24, Z+23	; 0x17
    313a:	88 23       	and	r24, r24
    313c:	79 f0       	breq	.+30     	; 0x315c <_Z17handleLinkBusMsgsv+0x47a>
					{
						strcat(g_tempStr," ");
    313e:	f5 01       	movw	r30, r10
    3140:	01 90       	ld	r0, Z+
    3142:	00 20       	and	r0, r0
    3144:	e9 f7       	brne	.-6      	; 0x3140 <_Z17handleLinkBusMsgsv+0x45e>
    3146:	31 97       	sbiw	r30, 0x01	; 1
    3148:	80 e2       	ldi	r24, 0x20	; 32
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	80 83       	st	Z, r24
						strcat(g_tempStr,lb_buff->fields[FIELD2]);
    3150:	b6 01       	movw	r22, r12
    3152:	69 5e       	subi	r22, 0xE9	; 233
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	c5 01       	movw	r24, r10
    3158:	0e 94 cf 2a 	call	0x559e	; 0x559e <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    315c:	f5 01       	movw	r30, r10
    315e:	01 90       	ld	r0, Z+
    3160:	00 20       	and	r0, r0
    3162:	e9 f7       	brne	.-6      	; 0x315e <_Z17handleLinkBusMsgsv+0x47c>
    3164:	31 97       	sbiw	r30, 0x01	; 1
    3166:	ee 5c       	subi	r30, 0xCE	; 206
    3168:	f4 40       	sbci	r31, 0x04	; 4
    316a:	75 97       	sbiw	r30, 0x15	; 21
    316c:	30 f5       	brcc	.+76     	; 0x31ba <_Z17handleLinkBusMsgsv+0x4d8>
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);
    316e:	b5 01       	movw	r22, r10
    3170:	8c e1       	ldi	r24, 0x1C	; 28
    3172:	95 e0       	ldi	r25, 0x05	; 5
    3174:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <strcpy>

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    3178:	f1 2c       	mov	r15, r1
    317a:	0c e1       	ldi	r16, 0x1C	; 28
    317c:	15 e0       	ldi	r17, 0x05	; 5
    317e:	f8 01       	movw	r30, r16
    3180:	01 90       	ld	r0, Z+
    3182:	00 20       	and	r0, r0
    3184:	e9 f7       	brne	.-6      	; 0x3180 <_Z17handleLinkBusMsgsv+0x49e>
    3186:	cf 01       	movw	r24, r30
    3188:	8d 51       	subi	r24, 0x1D	; 29
    318a:	95 40       	sbci	r25, 0x05	; 5
    318c:	2f 2d       	mov	r18, r15
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	28 17       	cp	r18, r24
    3192:	39 07       	cpc	r19, r25
    3194:	58 f4       	brcc	.+22     	; 0x31ac <_Z17handleLinkBusMsgsv+0x4ca>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    3196:	c9 01       	movw	r24, r18
    3198:	fc 01       	movw	r30, r24
    319a:	e9 5f       	subi	r30, 0xF9	; 249
    319c:	fa 4f       	sbci	r31, 0xFA	; 250
    319e:	65 89       	ldd	r22, Z+21	; 0x15
    31a0:	8f 54       	subi	r24, 0x4F	; 79
    31a2:	9d 4f       	sbci	r25, 0xFD	; 253
    31a4:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    31a8:	f3 94       	inc	r15
    31aa:	e9 cf       	rjmp	.-46     	; 0x317e <_Z17handleLinkBusMsgsv+0x49c>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
						}

						eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    31ac:	8f 2d       	mov	r24, r15
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	8f 54       	subi	r24, 0x4F	; 79
    31b4:	9d 4f       	sbci	r25, 0xFD	; 253
    31b6:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
					}
				}

				if(g_messages_text[STATION_ID][0])
    31ba:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZL15g_messages_text+0x15>
    31be:	88 23       	and	r24, r24
    31c0:	f1 f0       	breq	.+60     	; 0x31fe <_Z17handleLinkBusMsgsv+0x51c>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    31c2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	8c e1       	ldi	r24, 0x1C	; 28
    31ca:	95 e0       	ldi	r25, 0x05	; 5
    31cc:	0e 94 ad 22 	call	0x455a	; 0x455a <_Z26timeRequiredToSendStrAtWPMPcj>
    31d0:	8c 50       	subi	r24, 0x0C	; 12
    31d2:	9e 4f       	sbci	r25, 0xFE	; 254
    31d4:	9c 01       	movw	r18, r24
    31d6:	36 95       	lsr	r19
    31d8:	27 95       	ror	r18
    31da:	36 95       	lsr	r19
    31dc:	27 95       	ror	r18
    31de:	36 95       	lsr	r19
    31e0:	27 95       	ror	r18
    31e2:	a5 ec       	ldi	r26, 0xC5	; 197
    31e4:	b0 e2       	ldi	r27, 0x20	; 32
    31e6:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
    31ea:	92 95       	swap	r25
    31ec:	82 95       	swap	r24
    31ee:	8f 70       	andi	r24, 0x0F	; 15
    31f0:	89 27       	eor	r24, r25
    31f2:	9f 70       	andi	r25, 0x0F	; 15
    31f4:	89 27       	eor	r24, r25
    31f6:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <_ZL20g_time_needed_for_ID+0x1>
    31fa:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZL20g_time_needed_for_ID>
				}

				sprintf(g_tempStr,"ID:%s\n",g_messages_text[STATION_ID]);
    31fe:	8c e1       	ldi	r24, 0x1C	; 28
    3200:	95 e0       	ldi	r25, 0x05	; 5
    3202:	9f 93       	push	r25
    3204:	8f 93       	push	r24
    3206:	8e eb       	ldi	r24, 0xBE	; 190
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	9f 93       	push	r25
    320c:	8f 93       	push	r24
    320e:	bf 92       	push	r11
    3210:	af 92       	push	r10
    3212:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
				lb_send_string(g_tempStr,TRUE);
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	c5 01       	movw	r24, r10
    321a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
			}
			break;
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	50 c3       	rjmp	.+1696   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    322c:	f6 01       	movw	r30, r12
    322e:	83 81       	ldd	r24, Z+3	; 0x03
    3230:	89 34       	cpi	r24, 0x49	; 73
    3232:	e1 f5       	brne	.+120    	; 0x32ac <_Z17handleLinkBusMsgsv+0x5ca>
				{
					if(lb_buff->fields[FIELD2][0])
    3234:	87 89       	ldd	r24, Z+23	; 0x17
    3236:	88 23       	and	r24, r24
    3238:	c9 f1       	breq	.+114    	; 0x32ac <_Z17handleLinkBusMsgsv+0x5ca>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    323a:	c6 01       	movw	r24, r12
    323c:	47 96       	adiw	r24, 0x17	; 23
    323e:	0e 94 a0 2a 	call	0x5540	; 0x5540 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,speed,MAX_CODE_SPEED_WPM);
    3242:	86 2f       	mov	r24, r22
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	85 30       	cpi	r24, 0x05	; 5
    3248:	91 05       	cpc	r25, r1
    324a:	14 f4       	brge	.+4      	; 0x3250 <_Z17handleLinkBusMsgsv+0x56e>
    324c:	85 e0       	ldi	r24, 0x05	; 5
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	85 31       	cpi	r24, 0x15	; 21
    3252:	91 05       	cpc	r25, r1
    3254:	0c f0       	brlt	.+2      	; 0x3258 <_Z17handleLinkBusMsgsv+0x576>
    3256:	84 e1       	ldi	r24, 0x14	; 20
    3258:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
						eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    325c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3260:	88 e3       	ldi	r24, 0x38	; 56
    3262:	92 e0       	ldi	r25, 0x02	; 2
    3264:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>

						if(g_messages_text[STATION_ID][0])
    3268:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZL15g_messages_text+0x15>
    326c:	88 23       	and	r24, r24
    326e:	f1 f0       	breq	.+60     	; 0x32ac <_Z17handleLinkBusMsgsv+0x5ca>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    3270:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	8c e1       	ldi	r24, 0x1C	; 28
    3278:	95 e0       	ldi	r25, 0x05	; 5
    327a:	0e 94 ad 22 	call	0x455a	; 0x455a <_Z26timeRequiredToSendStrAtWPMPcj>
    327e:	8c 50       	subi	r24, 0x0C	; 12
    3280:	9e 4f       	sbci	r25, 0xFE	; 254
    3282:	9c 01       	movw	r18, r24
    3284:	36 95       	lsr	r19
    3286:	27 95       	ror	r18
    3288:	36 95       	lsr	r19
    328a:	27 95       	ror	r18
    328c:	36 95       	lsr	r19
    328e:	27 95       	ror	r18
    3290:	a5 ec       	ldi	r26, 0xC5	; 197
    3292:	b0 e2       	ldi	r27, 0x20	; 32
    3294:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
    3298:	92 95       	swap	r25
    329a:	82 95       	swap	r24
    329c:	8f 70       	andi	r24, 0x0F	; 15
    329e:	89 27       	eor	r24, r25
    32a0:	9f 70       	andi	r25, 0x0F	; 15
    32a2:	89 27       	eor	r24, r25
    32a4:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <_ZL20g_time_needed_for_ID+0x1>
    32a8:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZL20g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    32ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    32b0:	1f 92       	push	r1
    32b2:	8f 93       	push	r24
    32b4:	5f 92       	push	r5
    32b6:	4f 92       	push	r4
    32b8:	bf 92       	push	r11
    32ba:	af 92       	push	r10
    32bc:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
				lb_send_string(g_tempStr,FALSE);
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	c5 01       	movw	r24, r10
    32c4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
			}
			break;
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	fb c2       	rjmp	.+1526   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_VERSION:
			{
				sendEEPROMString(&ee_textVersion[0]);
    32d6:	8f ef       	ldi	r24, 0xFF	; 255
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
			}
			break;
    32de:	f6 c2       	rjmp	.+1516   	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    32e0:	f6 01       	movw	r30, r12
    32e2:	83 81       	ldd	r24, Z+3	; 0x03
    32e4:	84 35       	cpi	r24, 0x54	; 84
    32e6:	09 f0       	breq	.+2      	; 0x32ea <_Z17handleLinkBusMsgsv+0x608>
    32e8:	8b c0       	rjmp	.+278    	; 0x3400 <_Z17handleLinkBusMsgsv+0x71e>
				{
					strncpy(g_tempStr,lb_buff->fields[FIELD2],12);
    32ea:	4c e0       	ldi	r20, 0x0C	; 12
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	b6 01       	movw	r22, r12
    32f0:	69 5e       	subi	r22, 0xE9	; 233
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	c5 01       	movw	r24, r10
    32f6:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    32fa:	f5 01       	movw	r30, r10
    32fc:	14 86       	std	Z+12, r1	; 0x0c
					int len = strlen(g_tempStr);
    32fe:	01 90       	ld	r0, Z+
    3300:	00 20       	and	r0, r0
    3302:	e9 f7       	brne	.-6      	; 0x32fe <_Z17handleLinkBusMsgsv+0x61c>
    3304:	31 97       	sbiw	r30, 0x01	; 1
    3306:	ee 5c       	subi	r30, 0xCE	; 206
    3308:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    330a:	1e 16       	cp	r1, r30
    330c:	1f 06       	cpc	r1, r31
    330e:	0c f0       	brlt	.+2      	; 0x3312 <_Z17handleLinkBusMsgsv+0x630>
    3310:	47 c0       	rjmp	.+142    	; 0x33a0 <_Z17handleLinkBusMsgsv+0x6be>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    3312:	3c 97       	sbiw	r30, 0x0c	; 12
    3314:	09 f0       	breq	.+2      	; 0x3318 <_Z17handleLinkBusMsgsv+0x636>
    3316:	3f c0       	rjmp	.+126    	; 0x3396 <_Z17handleLinkBusMsgsv+0x6b4>
    3318:	c5 01       	movw	r24, r10
    331a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_Z11only_digitsPc>
    331e:	88 23       	and	r24, r24
    3320:	d1 f1       	breq	.+116    	; 0x3396 <_Z17handleLinkBusMsgsv+0x6b4>
						{
							time_t t = rv3028_get_epoch(NULL,g_tempStr);    /* String format "YYMMDDhhmmss" */
    3322:	b5 01       	movw	r22, r10
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z16rv3028_get_epochPbPc>

							if(t > MINIMUM_EPOCH)
    332c:	61 30       	cpi	r22, 0x01	; 1
    332e:	76 46       	sbci	r23, 0x66	; 102
    3330:	8e 4e       	sbci	r24, 0xEE	; 238
    3332:	9f 45       	sbci	r25, 0x5F	; 95
    3334:	58 f1       	brcs	.+86     	; 0x338c <_Z17handleLinkBusMsgsv+0x6aa>
							{
								rv3028_set_date_time(g_tempStr);            /* String format "YYMMDDhhmmss" */
    3336:	c5 01       	movw	r24, r10
    3338:	0e 94 04 24 	call	0x4808	; 0x4808 <_Z20rv3028_set_date_timePc>
								g_current_epoch = rv3028_get_epoch(NULL,NULL);
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	70 e0       	ldi	r23, 0x00	; 0
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z16rv3028_get_epochPbPc>
    3348:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <g_current_epoch>
    334c:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <g_current_epoch+0x1>
    3350:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_current_epoch+0x2>
    3354:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_current_epoch+0x3>
								sprintf(g_tempStr,"Time:%lu\n",g_current_epoch);
    3358:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    335c:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    3360:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    3364:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    3368:	bf 93       	push	r27
    336a:	af 93       	push	r26
    336c:	9f 93       	push	r25
    336e:	8f 93       	push	r24
    3370:	86 ed       	ldi	r24, 0xD6	; 214
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	9f 93       	push	r25
    3376:	8f 93       	push	r24
    3378:	bf 92       	push	r11
    337a:	af 92       	push	r10
    337c:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	b3 c2       	rjmp	.+1382   	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrTimeInPast[0]);
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3394:	ae c2       	rjmp	.+1372   	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    3396:	84 e1       	ldi	r24, 0x14	; 20
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    339e:	a9 c2       	rjmp	.+1362   	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ",NULL);
    33a0:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_start_epoch>
    33a4:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    33a8:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    33ac:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    33b0:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_current_epoch>
    33b4:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_current_epoch+0x1>
    33b8:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch+0x2>
    33bc:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x3>
    33c0:	e1 2c       	mov	r14, r1
    33c2:	f1 2c       	mov	r15, r1
    33c4:	09 e9       	ldi	r16, 0x99	; 153
    33c6:	11 e0       	ldi	r17, 0x01	; 1
    33c8:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr,"UNIX Time:%lu\n",g_current_epoch);
    33cc:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    33d0:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    33d4:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    33d8:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    33dc:	bf 93       	push	r27
    33de:	af 93       	push	r26
    33e0:	9f 93       	push	r25
    33e2:	8f 93       	push	r24
    33e4:	81 ed       	ldi	r24, 0xD1	; 209
    33e6:	91 e0       	ldi	r25, 0x01	; 1
    33e8:	9f 93       	push	r25
    33ea:	8f 93       	push	r24
    33ec:	bf 92       	push	r11
    33ee:	af 92       	push	r10
    33f0:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	79 c2       	rjmp	.+1266   	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3400:	83 35       	cpi	r24, 0x53	; 83
    3402:	09 f0       	breq	.+2      	; 0x3406 <_Z17handleLinkBusMsgsv+0x724>
    3404:	cf c0       	rjmp	.+414    	; 0x35a4 <_Z17handleLinkBusMsgsv+0x8c2>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3406:	b6 01       	movw	r22, r12
    3408:	69 5e       	subi	r22, 0xE9	; 233
    340a:	7f 4f       	sbci	r23, 0xFF	; 255
    340c:	c5 01       	movw	r24, r10
    340e:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <strcpy>
					int len = strlen(g_tempStr);
    3412:	f5 01       	movw	r30, r10
    3414:	01 90       	ld	r0, Z+
    3416:	00 20       	and	r0, r0
    3418:	e9 f7       	brne	.-6      	; 0x3414 <_Z17handleLinkBusMsgsv+0x732>
    341a:	31 97       	sbiw	r30, 0x01	; 1
    341c:	ee 5c       	subi	r30, 0xCE	; 206
    341e:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3420:	1e 16       	cp	r1, r30
    3422:	1f 06       	cpc	r1, r31
    3424:	0c f0       	brlt	.+2      	; 0x3428 <_Z17handleLinkBusMsgsv+0x746>
    3426:	a4 c0       	rjmp	.+328    	; 0x3570 <_Z17handleLinkBusMsgsv+0x88e>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    3428:	3c 97       	sbiw	r30, 0x0c	; 12
    342a:	09 f0       	breq	.+2      	; 0x342e <_Z17handleLinkBusMsgsv+0x74c>
    342c:	9c c0       	rjmp	.+312    	; 0x3566 <_Z17handleLinkBusMsgsv+0x884>
    342e:	c5 01       	movw	r24, r10
    3430:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_Z11only_digitsPc>
    3434:	88 23       	and	r24, r24
    3436:	09 f4       	brne	.+2      	; 0x343a <_Z17handleLinkBusMsgsv+0x758>
    3438:	96 c0       	rjmp	.+300    	; 0x3566 <_Z17handleLinkBusMsgsv+0x884>
						{
							time_t s;
							s = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    343a:	b5 01       	movw	r22, r10
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z16rv3028_get_epochPbPc>

							if(s > g_current_epoch)
    3444:	00 91 4e 05 	lds	r16, 0x054E	; 0x80054e <g_current_epoch>
    3448:	10 91 4f 05 	lds	r17, 0x054F	; 0x80054f <g_current_epoch+0x1>
    344c:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <g_current_epoch+0x2>
    3450:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <g_current_epoch+0x3>
    3454:	06 17       	cp	r16, r22
    3456:	17 07       	cpc	r17, r23
    3458:	28 07       	cpc	r18, r24
    345a:	39 07       	cpc	r19, r25
    345c:	08 f0       	brcs	.+2      	; 0x3460 <_Z17handleLinkBusMsgsv+0x77e>
    345e:	7e c0       	rjmp	.+252    	; 0x355c <_Z17handleLinkBusMsgsv+0x87a>
							{
								g_event_start_epoch = s;
    3460:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_event_start_epoch>
    3464:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <g_event_start_epoch+0x1>
    3468:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_event_start_epoch+0x2>
    346c:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <g_event_start_epoch+0x3>
								eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    3470:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    3474:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    3478:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    347c:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    3480:	8c e2       	ldi	r24, 0x2C	; 44
    3482:	92 e0       	ldi	r25, 0x02	; 2
    3484:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
								g_event_finish_epoch = MAX(g_event_finish_epoch,(g_event_start_epoch + SECONDS_24H));
    3488:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    348c:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    3490:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    3494:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    3498:	8d 83       	std	Y+5, r24	; 0x05
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	af 83       	std	Y+7, r26	; 0x07
    349e:	b8 87       	std	Y+8, r27	; 0x08
    34a0:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    34a4:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    34a8:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    34ac:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    34b0:	80 58       	subi	r24, 0x80	; 128
    34b2:	9e 4a       	sbci	r25, 0xAE	; 174
    34b4:	ae 4f       	sbci	r26, 0xFE	; 254
    34b6:	bf 4f       	sbci	r27, 0xFF	; 255
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	ab 83       	std	Y+3, r26	; 0x03
    34be:	bc 83       	std	Y+4, r27	; 0x04
    34c0:	4d 81       	ldd	r20, Y+5	; 0x05
    34c2:	5e 81       	ldd	r21, Y+6	; 0x06
    34c4:	6f 81       	ldd	r22, Y+7	; 0x07
    34c6:	78 85       	ldd	r23, Y+8	; 0x08
    34c8:	48 17       	cp	r20, r24
    34ca:	59 07       	cpc	r21, r25
    34cc:	6a 07       	cpc	r22, r26
    34ce:	7b 07       	cpc	r23, r27
    34d0:	28 f4       	brcc	.+10     	; 0x34dc <_Z17handleLinkBusMsgsv+0x7fa>
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	ab 81       	ldd	r26, Y+3	; 0x03
    34d8:	bc 81       	ldd	r27, Y+4	; 0x04
    34da:	04 c0       	rjmp	.+8      	; 0x34e4 <_Z17handleLinkBusMsgsv+0x802>
    34dc:	8d 81       	ldd	r24, Y+5	; 0x05
    34de:	9e 81       	ldd	r25, Y+6	; 0x06
    34e0:	af 81       	ldd	r26, Y+7	; 0x07
    34e2:	b8 85       	ldd	r27, Y+8	; 0x08
    34e4:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_event_finish_epoch>
    34e8:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_event_finish_epoch+0x1>
    34ec:	a0 93 48 05 	sts	0x0548, r26	; 0x800548 <g_event_finish_epoch+0x2>
    34f0:	b0 93 49 05 	sts	0x0549, r27	; 0x800549 <g_event_finish_epoch+0x3>
								eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    34f4:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_event_finish_epoch>
    34f8:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    34fc:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    3500:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    3504:	88 e2       	ldi	r24, 0x28	; 40
    3506:	92 e0       	ldi	r25, 0x02	; 2
    3508:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
								sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    350c:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    3510:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    3514:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    3518:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    351c:	bf 93       	push	r27
    351e:	af 93       	push	r26
    3520:	9f 93       	push	r25
    3522:	8f 93       	push	r24
    3524:	80 ee       	ldi	r24, 0xE0	; 224
    3526:	91 e0       	ldi	r25, 0x01	; 1
    3528:	9f 93       	push	r25
    352a:	8f 93       	push	r24
    352c:	bf 92       	push	r11
    352e:	af 92       	push	r10
    3530:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
								g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3534:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z23clockConfigurationErrorv>
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	81 11       	cpse	r24, r1
    3544:	07 c0       	rjmp	.+14     	; 0x3554 <_Z17handleLinkBusMsgsv+0x872>
    3546:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	91 11       	cpse	r25, r1
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <_Z17handleLinkBusMsgsv+0x874>
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	01 c0       	rjmp	.+2      	; 0x3556 <_Z17handleLinkBusMsgsv+0x874>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_use_rtc_to_start>
    355a:	cb c1       	rjmp	.+918    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrStartInPast[0]);
    355c:	88 e2       	ldi	r24, 0x28	; 40
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3564:	c6 c1       	rjmp	.+908    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    3566:	84 e1       	ldi	r24, 0x14	; 20
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    356e:	c1 c1       	rjmp	.+898    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    3570:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_start_epoch>
    3574:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    3578:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    357c:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    3580:	bf 93       	push	r27
    3582:	af 93       	push	r26
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	80 ee       	ldi	r24, 0xE0	; 224
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	9f 93       	push	r25
    358e:	8f 93       	push	r24
    3590:	bf 92       	push	r11
    3592:	af 92       	push	r10
    3594:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	a7 c1       	rjmp	.+846    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    35a4:	86 34       	cpi	r24, 0x46	; 70
    35a6:	09 f0       	breq	.+2      	; 0x35aa <_Z17handleLinkBusMsgsv+0x8c8>
    35a8:	b6 c0       	rjmp	.+364    	; 0x3716 <_Z17handleLinkBusMsgsv+0xa34>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    35aa:	b6 01       	movw	r22, r12
    35ac:	69 5e       	subi	r22, 0xE9	; 233
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	c5 01       	movw	r24, r10
    35b2:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <strcpy>
					int len = strlen(g_tempStr);
    35b6:	f5 01       	movw	r30, r10
    35b8:	01 90       	ld	r0, Z+
    35ba:	00 20       	and	r0, r0
    35bc:	e9 f7       	brne	.-6      	; 0x35b8 <_Z17handleLinkBusMsgsv+0x8d6>
    35be:	31 97       	sbiw	r30, 0x01	; 1
    35c0:	ee 5c       	subi	r30, 0xCE	; 206
    35c2:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    35c4:	1e 16       	cp	r1, r30
    35c6:	1f 06       	cpc	r1, r31
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <_Z17handleLinkBusMsgsv+0x8ea>
    35ca:	8b c0       	rjmp	.+278    	; 0x36e2 <_Z17handleLinkBusMsgsv+0xa00>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    35cc:	3c 97       	sbiw	r30, 0x0c	; 12
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <_Z17handleLinkBusMsgsv+0x8f0>
    35d0:	83 c0       	rjmp	.+262    	; 0x36d8 <_Z17handleLinkBusMsgsv+0x9f6>
    35d2:	c5 01       	movw	r24, r10
    35d4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_Z11only_digitsPc>
    35d8:	88 23       	and	r24, r24
    35da:	09 f4       	brne	.+2      	; 0x35de <_Z17handleLinkBusMsgsv+0x8fc>
    35dc:	7d c0       	rjmp	.+250    	; 0x36d8 <_Z17handleLinkBusMsgsv+0x9f6>
						{
							time_t f;
							f = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    35de:	b5 01       	movw	r22, r10
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z16rv3028_get_epochPbPc>

							if(f > g_current_epoch)
    35e8:	00 91 4e 05 	lds	r16, 0x054E	; 0x80054e <g_current_epoch>
    35ec:	10 91 4f 05 	lds	r17, 0x054F	; 0x80054f <g_current_epoch+0x1>
    35f0:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <g_current_epoch+0x2>
    35f4:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <g_current_epoch+0x3>
    35f8:	06 17       	cp	r16, r22
    35fa:	17 07       	cpc	r17, r23
    35fc:	28 07       	cpc	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	08 f0       	brcs	.+2      	; 0x3604 <_Z17handleLinkBusMsgsv+0x922>
    3602:	65 c0       	rjmp	.+202    	; 0x36ce <_Z17handleLinkBusMsgsv+0x9ec>
							{
								if(f > g_event_start_epoch)
    3604:	00 91 4a 05 	lds	r16, 0x054A	; 0x80054a <g_event_start_epoch>
    3608:	10 91 4b 05 	lds	r17, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    360c:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    3610:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    3614:	06 17       	cp	r16, r22
    3616:	17 07       	cpc	r17, r23
    3618:	28 07       	cpc	r18, r24
    361a:	39 07       	cpc	r19, r25
    361c:	08 f0       	brcs	.+2      	; 0x3620 <_Z17handleLinkBusMsgsv+0x93e>
    361e:	52 c0       	rjmp	.+164    	; 0x36c4 <_Z17handleLinkBusMsgsv+0x9e2>
								{
									g_event_finish_epoch = f;
    3620:	60 93 46 05 	sts	0x0546, r22	; 0x800546 <g_event_finish_epoch>
    3624:	70 93 47 05 	sts	0x0547, r23	; 0x800547 <g_event_finish_epoch+0x1>
    3628:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_event_finish_epoch+0x2>
    362c:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_event_finish_epoch+0x3>
									eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    3630:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_event_finish_epoch>
    3634:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    3638:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    363c:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    3640:	88 e2       	ldi	r24, 0x28	; 40
    3642:	92 e0       	ldi	r25, 0x02	; 2
    3644:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <eeprom_update_dword>
									reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    3648:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <g_event_finish_epoch>
    364c:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    3650:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    3654:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    3658:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_start_epoch>
    365c:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    3660:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    3664:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    3668:	e1 2c       	mov	r14, r1
    366a:	f1 2c       	mov	r15, r1
    366c:	05 ea       	ldi	r16, 0xA5	; 165
    366e:	11 e0       	ldi	r17, 0x01	; 1
    3670:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
									sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    3674:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    3678:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    367c:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    3680:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    3684:	bf 93       	push	r27
    3686:	af 93       	push	r26
    3688:	9f 93       	push	r25
    368a:	8f 93       	push	r24
    368c:	8b ee       	ldi	r24, 0xEB	; 235
    368e:	91 e0       	ldi	r25, 0x01	; 1
    3690:	9f 93       	push	r25
    3692:	8f 93       	push	r24
    3694:	bf 92       	push	r11
    3696:	af 92       	push	r10
    3698:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
									g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    369c:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z23clockConfigurationErrorv>
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	81 11       	cpse	r24, r1
    36ac:	07 c0       	rjmp	.+14     	; 0x36bc <_Z17handleLinkBusMsgsv+0x9da>
    36ae:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	91 11       	cpse	r25, r1
    36b6:	03 c0       	rjmp	.+6      	; 0x36be <_Z17handleLinkBusMsgsv+0x9dc>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	01 c0       	rjmp	.+2      	; 0x36be <_Z17handleLinkBusMsgsv+0x9dc>
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_use_rtc_to_start>
    36c2:	17 c1       	rjmp	.+558    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
								}
								else
								{
									sendEEPROMString(&ee_textErrFinishB4Start[0]);
    36c4:	83 e5       	ldi	r24, 0x53	; 83
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    36cc:	12 c1       	rjmp	.+548    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
								}
							}
							else
							{
								sendEEPROMString(&ee_textErrFinishInPast[0]);
    36ce:	8d e3       	ldi	r24, 0x3D	; 61
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    36d6:	0d c1       	rjmp	.+538    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    36d8:	84 e1       	ldi	r24, 0x14	; 20
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    36e0:	08 c1       	rjmp	.+528    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    36e2:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_event_finish_epoch>
    36e6:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    36ea:	a0 91 48 05 	lds	r26, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    36ee:	b0 91 49 05 	lds	r27, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    36f2:	bf 93       	push	r27
    36f4:	af 93       	push	r26
    36f6:	9f 93       	push	r25
    36f8:	8f 93       	push	r24
    36fa:	8b ee       	ldi	r24, 0xEB	; 235
    36fc:	91 e0       	ldi	r25, 0x01	; 1
    36fe:	9f 93       	push	r25
    3700:	8f 93       	push	r24
    3702:	bf 92       	push	r11
    3704:	af 92       	push	r10
    3706:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	ee c0       	rjmp	.+476    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3716:	83 34       	cpi	r24, 0x43	; 67
    3718:	09 f5       	brne	.+66     	; 0x375c <_Z17handleLinkBusMsgsv+0xa7a>
				{
					if(lb_buff->fields[FIELD2][0])
    371a:	f6 01       	movw	r30, r12
    371c:	87 89       	ldd	r24, Z+23	; 0x17
    371e:	88 23       	and	r24, r24
    3720:	51 f0       	breq	.+20     	; 0x3736 <_Z17handleLinkBusMsgsv+0xa54>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3722:	c6 01       	movw	r24, r12
    3724:	47 96       	adiw	r24, 0x17	; 23
    3726:	0e 94 82 2a 	call	0x5504	; 0x5504 <atoi>

						if(c < 512)
    372a:	81 15       	cp	r24, r1
    372c:	f2 e0       	ldi	r31, 0x02	; 2
    372e:	9f 07       	cpc	r25, r31
    3730:	10 f4       	brcc	.+4      	; 0x3736 <_Z17handleLinkBusMsgsv+0xa54>
						{
							rv3028_set_offset_RAM(c);
    3732:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3736:	0e 94 5e 24 	call	0x48bc	; 0x48bc <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr,"C=%d\n",a);
    373a:	9f 93       	push	r25
    373c:	8f 93       	push	r24
    373e:	87 ef       	ldi	r24, 0xF7	; 247
    3740:	91 e0       	ldi	r25, 0x01	; 1
    3742:	9f 93       	push	r25
    3744:	8f 93       	push	r24
    3746:	bf 92       	push	r11
    3748:	af 92       	push	r10
    374a:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	cb c0       	rjmp	.+406    	; 0x38f2 <_Z17handleLinkBusMsgsv+0xc10>
					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'X')  /* Test only - Send 32 kHz square wave out of RTC */
    375c:	88 35       	cpi	r24, 0x58	; 88
    375e:	21 f4       	brne	.+8      	; 0x3768 <_Z17handleLinkBusMsgsv+0xa86>
				{
					EIMSK &= ~(1 << INT0);                  /* Disable INT0 interrupts */
    3760:	e8 98       	cbi	0x1d, 0	; 29
					rv3028_32kHz_sqw();
    3762:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_Z16rv3028_32kHz_sqwv>
    3766:	b2 c0       	rjmp	.+356    	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
				}
				else
				{
					if(clockConfigurationError())
    3768:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z23clockConfigurationErrorv>
    376c:	88 23       	and	r24, r24
    376e:	19 f0       	breq	.+6      	; 0x3776 <_Z17handleLinkBusMsgsv+0xa94>
					{
						reportConfigErrors();
    3770:	0e 94 c5 14 	call	0x298a	; 0x298a <_Z18reportConfigErrorsv>
    3774:	ab c0       	rjmp	.+342    	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    3776:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_start_epoch>
    377a:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    377e:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    3782:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    3786:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_current_epoch>
    378a:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_current_epoch+0x1>
    378e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch+0x2>
    3792:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x3>
    3796:	0f 2e       	mov	r0, r31
    3798:	fc e8       	ldi	r31, 0x8C	; 140
    379a:	ef 2e       	mov	r14, r31
    379c:	f1 e0       	ldi	r31, 0x01	; 1
    379e:	ff 2e       	mov	r15, r31
    37a0:	f0 2d       	mov	r31, r0
    37a2:	09 e9       	ldi	r16, 0x99	; 153
    37a4:	11 e0       	ldi	r17, 0x01	; 1
    37a6:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    37aa:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <g_event_finish_epoch>
    37ae:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    37b2:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    37b6:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    37ba:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_start_epoch>
    37be:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    37c2:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    37c6:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    37ca:	e1 2c       	mov	r14, r1
    37cc:	f1 2c       	mov	r15, r1
    37ce:	05 ea       	ldi	r16, 0xA5	; 165
    37d0:	11 e0       	ldi	r17, 0x01	; 1
    37d2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    37d6:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_start_epoch>
    37da:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_start_epoch+0x1>
    37de:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch+0x2>
    37e2:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x3>
    37e6:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_current_epoch>
    37ea:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_current_epoch+0x1>
    37ee:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_current_epoch+0x2>
    37f2:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_current_epoch+0x3>
    37f6:	48 17       	cp	r20, r24
    37f8:	59 07       	cpc	r21, r25
    37fa:	6a 07       	cpc	r22, r26
    37fc:	7b 07       	cpc	r23, r27
    37fe:	08 f0       	brcs	.+2      	; 0x3802 <_Z17handleLinkBusMsgsv+0xb20>
    3800:	65 c0       	rjmp	.+202    	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
						{
							reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    3802:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <g_event_finish_epoch>
    3806:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <g_event_finish_epoch+0x1>
    380a:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch+0x2>
    380e:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x3>
    3812:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_current_epoch>
    3816:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_current_epoch+0x1>
    381a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch+0x2>
    381e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x3>
    3822:	0d ea       	ldi	r16, 0xAD	; 173
    3824:	11 e0       	ldi	r17, 0x01	; 1
    3826:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_Z14reportTimeTillmmPKcS0_>
    382a:	50 c0       	rjmp	.+160    	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    382c:	f6 01       	movw	r30, r12
    382e:	83 81       	ldd	r24, Z+3	; 0x03
    3830:	83 34       	cpi	r24, 0x43	; 67
    3832:	89 f5       	brne	.+98     	; 0x3896 <_Z17handleLinkBusMsgsv+0xbb4>
				{
					if(lb_buff->fields[FIELD2][0])
    3834:	87 89       	ldd	r24, Z+23	; 0x17
    3836:	88 23       	and	r24, r24
    3838:	b1 f0       	breq	.+44     	; 0x3866 <_Z17handleLinkBusMsgsv+0xb84>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    383a:	c6 01       	movw	r24, r12
    383c:	47 96       	adiw	r24, 0x17	; 23
    383e:	0e 94 82 2a 	call	0x5504	; 0x5504 <atoi>

						if((v > -2000) && (v < 2000))
    3842:	9c 01       	movw	r18, r24
    3844:	21 53       	subi	r18, 0x31	; 49
    3846:	38 4f       	sbci	r19, 0xF8	; 248
    3848:	2f 39       	cpi	r18, 0x9F	; 159
    384a:	3f 40       	sbci	r19, 0x0F	; 15
    384c:	60 f4       	brcc	.+24     	; 0x3866 <_Z17handleLinkBusMsgsv+0xb84>
						{
							g_atmega_temp_calibration = v;
    384e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    3852:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
							eeprom_update_word((uint16_t*)&ee_atmega_temp_calibration,(int16_t)g_atmega_temp_calibration);
    3856:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    385a:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    385e:	84 e3       	ldi	r24, 0x34	; 52
    3860:	92 e0       	ldi	r25, 0x02	; 2
    3862:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <eeprom_update_word>
						}
					}

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
    3866:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    386a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    386e:	9f 93       	push	r25
    3870:	8f 93       	push	r24
    3872:	2d ef       	ldi	r18, 0xFD	; 253
    3874:	31 e0       	ldi	r19, 0x01	; 1
    3876:	3f 93       	push	r19
    3878:	2f 93       	push	r18
    387a:	bf 92       	push	r11
    387c:	af 92       	push	r10
    387e:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
					lb_send_string(g_tempStr,FALSE);
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	c5 01       	movw	r24, r10
    3886:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    3896:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <g_temperature>
    389a:	28 2f       	mov	r18, r24
    389c:	08 2e       	mov	r0, r24
    389e:	00 0c       	add	r0, r0
    38a0:	33 0b       	sbc	r19, r19
    38a2:	3f 93       	push	r19
    38a4:	8f 93       	push	r24
    38a6:	9f 92       	push	r9
    38a8:	8f 92       	push	r8
    38aa:	bf 92       	push	r11
    38ac:	af 92       	push	r10
    38ae:	0e 94 0d 2b 	call	0x561a	; 0x561a <sprintf>
				lb_send_string(g_tempStr,TRUE);
    38b2:	61 e0       	ldi	r22, 0x01	; 1
    38b4:	c5 01       	movw	r24, r10
    38b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
			}
			break;
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>

			default:
			{
				lb_send_Help();
    38c8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_Z12lb_send_Helpv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    38cc:	f6 01       	movw	r30, r12
    38ce:	12 82       	std	Z+2, r1	; 0x02
    38d0:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    38d2:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z17lb_send_NewPromptv>
    38d6:	3d ca       	rjmp	.-2950   	; 0x2d52 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	05 cb       	rjmp	.-2550   	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    38de:	83 e1       	ldi	r24, 0x13	; 19
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	02 cb       	rjmp	.-2556   	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    38e4:	87 e0       	ldi	r24, 0x07	; 7
    38e6:	00 cb       	rjmp	.-2560   	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    38e8:	84 e1       	ldi	r24, 0x14	; 20
    38ea:	fe ca       	rjmp	.-2564   	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    38ec:	85 e1       	ldi	r24, 0x15	; 21
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	fb ca       	rjmp	.-2570   	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x206>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr,TRUE);
    38f2:	61 e0       	ldi	r22, 0x01	; 1
    38f4:	c5 01       	movw	r24, r10
    38f6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
    38fa:	e8 cf       	rjmp	.-48     	; 0x38cc <_Z17handleLinkBusMsgsv+0xbea>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    38fc:	28 96       	adiw	r28, 0x08	; 8
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	1f 91       	pop	r17
    390e:	0f 91       	pop	r16
    3910:	ff 90       	pop	r15
    3912:	ef 90       	pop	r14
    3914:	df 90       	pop	r13
    3916:	cf 90       	pop	r12
    3918:	bf 90       	pop	r11
    391a:	af 90       	pop	r10
    391c:	9f 90       	pop	r9
    391e:	8f 90       	pop	r8
    3920:	7f 90       	pop	r7
    3922:	6f 90       	pop	r6
    3924:	5f 90       	pop	r5
    3926:	4f 90       	pop	r4
    3928:	3f 90       	pop	r3
    392a:	2f 90       	pop	r2
    392c:	08 95       	ret

0000392e <_Z4loopv>:

/*
 *  Here is the main loop
 * */
void loop()
{
    392e:	2f 92       	push	r2
    3930:	3f 92       	push	r3
    3932:	4f 92       	push	r4
    3934:	5f 92       	push	r5
    3936:	6f 92       	push	r6
    3938:	7f 92       	push	r7
    393a:	8f 92       	push	r8
    393c:	9f 92       	push	r9
    393e:	af 92       	push	r10
    3940:	bf 92       	push	r11
    3942:	cf 92       	push	r12
    3944:	df 92       	push	r13
    3946:	ef 92       	push	r14
    3948:	ff 92       	push	r15
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	cf 93       	push	r28
    3950:	df 93       	push	r29
    3952:	1f 92       	push	r1
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    3958:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    395c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_on_the_air>
    3960:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_on_the_air+0x1>
    3964:	89 2b       	or	r24, r25
    3966:	29 f0       	breq	.+10     	; 0x3972 <_Z4loopv+0x44>
    3968:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ4loopvE7proceed>
    396c:	88 23       	and	r24, r24
    396e:	09 f4       	brne	.+2      	; 0x3972 <_Z4loopv+0x44>
    3970:	da c0       	rjmp	.+436    	; 0x3b26 <_Z4loopv+0x1f8>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    3972:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    3976:	81 11       	cpse	r24, r1
    3978:	2e c1       	rjmp	.+604    	; 0x3bd6 <_Z4loopv+0x2a8>
			{
				proceed = FALSE;
    397a:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    397e:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3982:	86 30       	cpi	r24, 0x06	; 6
    3984:	91 f4       	brne	.+36     	; 0x39aa <_Z4loopv+0x7c>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter]);
    3986:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    398a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    398e:	bc 01       	movw	r22, r24
    3990:	66 0f       	add	r22, r22
    3992:	77 1f       	adc	r23, r23
    3994:	66 0f       	add	r22, r22
    3996:	77 1f       	adc	r23, r23
    3998:	68 0f       	add	r22, r24
    399a:	79 1f       	adc	r23, r25
    399c:	6e 57       	subi	r22, 0x7E	; 126
    399e:	7d 4f       	sbci	r23, 0xFD	; 253
    39a0:	87 e0       	ldi	r24, 0x07	; 7
    39a2:	95 e0       	ldi	r25, 0x05	; 5
    39a4:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <strcpy>
    39a8:	27 c0       	rjmp	.+78     	; 0x39f8 <_Z4loopv+0xca>
				}
				else if(g_fox == SPRINT_DEMO)
    39aa:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    39ae:	83 31       	cpi	r24, 0x13	; 19
    39b0:	99 f4       	brne	.+38     	; 0x39d8 <_Z4loopv+0xaa>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter + 8]);
    39b2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    39b6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    39ba:	08 96       	adiw	r24, 0x08	; 8
    39bc:	bc 01       	movw	r22, r24
    39be:	66 0f       	add	r22, r22
    39c0:	77 1f       	adc	r23, r23
    39c2:	66 0f       	add	r22, r22
    39c4:	77 1f       	adc	r23, r23
    39c6:	68 0f       	add	r22, r24
    39c8:	79 1f       	adc	r23, r25
    39ca:	6e 57       	subi	r22, 0x7E	; 126
    39cc:	7d 4f       	sbci	r23, 0xFD	; 253
    39ce:	87 e0       	ldi	r24, 0x07	; 7
    39d0:	95 e0       	ldi	r25, 0x05	; 5
    39d2:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <strcpy>
    39d6:	10 c0       	rjmp	.+32     	; 0x39f8 <_Z4loopv+0xca>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox]);
    39d8:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	bc 01       	movw	r22, r24
    39e0:	66 0f       	add	r22, r22
    39e2:	77 1f       	adc	r23, r23
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	68 0f       	add	r22, r24
    39ea:	79 1f       	adc	r23, r25
    39ec:	6e 57       	subi	r22, 0x7E	; 126
    39ee:	7d 4f       	sbci	r23, 0xFD	; 253
    39f0:	87 e0       	ldi	r24, 0x07	; 7
    39f2:	95 e0       	ldi	r25, 0x05	; 5
    39f4:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    39f8:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    39fc:	86 30       	cpi	r24, 0x06	; 6
    39fe:	09 f1       	breq	.+66     	; 0x3a42 <_Z4loopv+0x114>
    3a00:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3a04:	83 31       	cpi	r24, 0x13	; 19
    3a06:	e9 f0       	breq	.+58     	; 0x3a42 <_Z4loopv+0x114>
    3a08:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3a0c:	88 23       	and	r24, r24
    3a0e:	c9 f0       	breq	.+50     	; 0x3a42 <_Z4loopv+0x114>
    3a10:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3a14:	87 30       	cpi	r24, 0x07	; 7
    3a16:	a9 f0       	breq	.+42     	; 0x3a42 <_Z4loopv+0x114>
    3a18:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3a1c:	88 30       	cpi	r24, 0x08	; 8
    3a1e:	89 f0       	breq	.+34     	; 0x3a42 <_Z4loopv+0x114>
    3a20:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <g_fox>
    3a24:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_fox_counter>
    3a28:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3a2c:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_fox_id_offset>
    3a30:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <g_fox_id_offset+0x1>
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	84 0f       	add	r24, r20
    3a38:	95 1f       	adc	r25, r21
    3a3a:	28 17       	cp	r18, r24
    3a3c:	39 07       	cpc	r19, r25
    3a3e:	09 f0       	breq	.+2      	; 0x3a42 <_Z4loopv+0x114>
    3a40:	ca c0       	rjmp	.+404    	; 0x3bd6 <_Z4loopv+0x2a8>
				{
					BOOL repeat = TRUE;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    3a46:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <_ZL19g_pattern_codespeed>
    3a4a:	70 e0       	ldi	r23, 0x00	; 0
    3a4c:	82 e8       	ldi	r24, 0x82	; 130
    3a4e:	9b e1       	ldi	r25, 0x1B	; 27
    3a50:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    3a54:	cb 01       	movw	r24, r22
    3a56:	6a e0       	ldi	r22, 0x0A	; 10
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    3a5e:	66 0f       	add	r22, r22
    3a60:	77 1f       	adc	r23, r23
    3a62:	70 93 55 05 	sts	0x0555, r23	; 0x800555 <g_code_throttle+0x1>
    3a66:	60 93 54 05 	sts	0x0554, r22	; 0x800554 <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT],&repeat,NULL);
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	be 01       	movw	r22, r28
    3a70:	6f 5f       	subi	r22, 0xFF	; 255
    3a72:	7f 4f       	sbci	r23, 0xFF	; 255
    3a74:	87 e0       	ldi	r24, 0x07	; 7
    3a76:	95 e0       	ldi	r25, 0x05	; 5
    3a78:	0e 94 af 21 	call	0x435e	; 0x435e <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    3a7c:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_time_to_ID>
    3a80:	81 11       	cpse	r24, r1
    3a82:	0b c0       	rjmp	.+22     	; 0x3a9a <_Z4loopv+0x16c>
    3a84:	20 91 3b 05 	lds	r18, 0x053B	; 0x80053b <g_id_interval>
    3a88:	30 91 3c 05 	lds	r19, 0x053C	; 0x80053c <g_id_interval+0x1>
    3a8c:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <g_on_air_interval>
    3a90:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <g_on_air_interval+0x1>
    3a94:	82 17       	cp	r24, r18
    3a96:	93 07       	cpc	r25, r19
    3a98:	3c f1       	brlt	.+78     	; 0x3ae8 <_Z4loopv+0x1ba>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    3a9a:	00 91 44 05 	lds	r16, 0x0544	; 0x800544 <g_on_air_interval>
    3a9e:	10 91 45 05 	lds	r17, 0x0545	; 0x800545 <g_on_air_interval+0x1>
    3aa2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3aa6:	70 e0       	ldi	r23, 0x00	; 0
    3aa8:	8c e1       	ldi	r24, 0x1C	; 28
    3aaa:	95 e0       	ldi	r25, 0x05	; 5
    3aac:	0e 94 ad 22 	call	0x455a	; 0x455a <_Z26timeRequiredToSendStrAtWPMPcj>
    3ab0:	8c 50       	subi	r24, 0x0C	; 12
    3ab2:	9e 4f       	sbci	r25, 0xFE	; 254
    3ab4:	9c 01       	movw	r18, r24
    3ab6:	36 95       	lsr	r19
    3ab8:	27 95       	ror	r18
    3aba:	36 95       	lsr	r19
    3abc:	27 95       	ror	r18
    3abe:	36 95       	lsr	r19
    3ac0:	27 95       	ror	r18
    3ac2:	a5 ec       	ldi	r26, 0xC5	; 197
    3ac4:	b0 e2       	ldi	r27, 0x20	; 32
    3ac6:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
    3aca:	92 95       	swap	r25
    3acc:	82 95       	swap	r24
    3ace:	8f 70       	andi	r24, 0x0F	; 15
    3ad0:	89 27       	eor	r24, r25
    3ad2:	9f 70       	andi	r25, 0x0F	; 15
    3ad4:	89 27       	eor	r24, r25
    3ad6:	08 1b       	sub	r16, r24
    3ad8:	19 0b       	sbc	r17, r25
    3ada:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3ade:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    3ae2:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_time_to_ID>
    3ae6:	0a c0       	rjmp	.+20     	; 0x3afc <_Z4loopv+0x1ce>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    3ae8:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <g_on_air_interval>
    3aec:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <g_on_air_interval+0x1>
    3af0:	8d 59       	subi	r24, 0x9D	; 157
    3af2:	9f 4f       	sbci	r25, 0xFF	; 255
    3af4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3af8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    3afc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_on_the_air+0x1>
    3b08:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_on_the_air>
					g_callsign_sent = FALSE;
    3b0c:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_callsign_sent>
					g_fox_transition = FALSE;
    3b10:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    3b14:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3b18:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3b1c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_tone_offset+0x1>
    3b20:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_tone_offset>
    3b24:	58 c0       	rjmp	.+176    	; 0x3bd6 <_Z4loopv+0x2a8>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    3b26:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    3b2a:	81 11       	cpse	r24, r1
    3b2c:	9a c1       	rjmp	.+820    	; 0x3e62 <_Z4loopv+0x534>
    3b2e:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <g_fox_seconds_into_interval>
    3b32:	30 91 43 05 	lds	r19, 0x0543	; 0x800543 <g_fox_seconds_into_interval+0x1>
    3b36:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    3b3a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3b3e:	28 17       	cp	r18, r24
    3b40:	39 07       	cpc	r19, r25
    3b42:	09 f0       	breq	.+2      	; 0x3b46 <_Z4loopv+0x218>
    3b44:	8e c1       	rjmp	.+796    	; 0x3e62 <_Z4loopv+0x534>
    3b46:	6b c1       	rjmp	.+726    	; 0x3e1e <_Z4loopv+0x4f0>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3b48:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3b4c:	84 31       	cpi	r24, 0x14	; 20
    3b4e:	08 f4       	brcc	.+2      	; 0x3b52 <_Z4loopv+0x224>
    3b50:	8e c1       	rjmp	.+796    	; 0x3e6e <_Z4loopv+0x540>
    3b52:	09 c0       	rjmp	.+18     	; 0x3b66 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    3b54:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_transition>
					g_on_the_air = FALSE;
    3b58:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    3b5c:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
					proceed = TRUE;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    3b66:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3b6a:	86 30       	cpi	r24, 0x06	; 6
    3b6c:	21 f0       	breq	.+8      	; 0x3b76 <_Z4loopv+0x248>
    3b6e:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3b72:	83 31       	cpi	r24, 0x13	; 19
    3b74:	49 f4       	brne	.+18     	; 0x3b88 <_Z4loopv+0x25a>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    3b76:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_callsign_sent>
    3b7a:	88 23       	and	r24, r24
    3b7c:	61 f1       	breq	.+88     	; 0x3bd6 <_Z4loopv+0x2a8>
    3b7e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_fox_transition>
    3b82:	81 11       	cpse	r24, r1
    3b84:	79 c1       	rjmp	.+754    	; 0x3e78 <_Z4loopv+0x54a>
    3b86:	27 c0       	rjmp	.+78     	; 0x3bd6 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    3b88:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3b8c:	88 23       	and	r24, r24
    3b8e:	41 f0       	breq	.+16     	; 0x3ba0 <_Z4loopv+0x272>
    3b90:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3b94:	87 30       	cpi	r24, 0x07	; 7
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <_Z4loopv+0x272>
    3b98:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3b9c:	88 30       	cpi	r24, 0x08	; 8
    3b9e:	41 f4       	brne	.+16     	; 0x3bb0 <_Z4loopv+0x282>
			{
				if(g_callsign_sent)
    3ba0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_callsign_sent>
    3ba4:	88 23       	and	r24, r24
    3ba6:	b9 f0       	breq	.+46     	; 0x3bd6 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ4loopvE7proceed>
    3bae:	13 c0       	rjmp	.+38     	; 0x3bd6 <_Z4loopv+0x2a8>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    3bb0:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3bb4:	89 30       	cpi	r24, 0x09	; 9
    3bb6:	08 f4       	brcc	.+2      	; 0x3bba <_Z4loopv+0x28c>
    3bb8:	68 c1       	rjmp	.+720    	; 0x3e8a <_Z4loopv+0x55c>
    3bba:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3bbe:	83 31       	cpi	r24, 0x13	; 19
    3bc0:	08 f0       	brcs	.+2      	; 0x3bc4 <_Z4loopv+0x296>
    3bc2:	63 c1       	rjmp	.+710    	; 0x3e8a <_Z4loopv+0x55c>
    3bc4:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_callsign_sent>
    3bc8:	81 11       	cpse	r24, r1
    3bca:	5a c1       	rjmp	.+692    	; 0x3e80 <_Z4loopv+0x552>
    3bcc:	5e c1       	rjmp	.+700    	; 0x3e8a <_Z4loopv+0x55c>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3bce:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_callsign_sent>
    3bd2:	81 11       	cpse	r24, r1
    3bd4:	66 c1       	rjmp	.+716    	; 0x3ea2 <_Z4loopv+0x574>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    3bd6:	86 ef       	ldi	r24, 0xF6	; 246
    3bd8:	94 e0       	ldi	r25, 0x04	; 4
    3bda:	0e 94 43 04 	call	0x886	; 0x886 <_ZN8Goertzel12SamplesReadyEv>
    3bde:	88 23       	and	r24, r24
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <_Z4loopv+0x2b6>
    3be2:	12 c1       	rjmp	.+548    	; 0x3e08 <_Z4loopv+0x4da>
			static char lastKey = '\0';
			static int checkCount = 10;  /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1,y = -1;

			if(!g_temperature_check_countdown)
    3be4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    3be8:	81 11       	cpse	r24, r1
    3bea:	60 c1       	rjmp	.+704    	; 0x3eac <_Z4loopv+0x57e>
			{

				setUpTemp();
    3bec:	0e 94 e6 13 	call	0x27cc	; 0x27cc <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    3bf0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_Z7getTempv>
    3bf4:	0e 94 98 26 	call	0x4d30	; 0x4d30 <__fixsfsi>
				if(temp != g_temperature)
    3bf8:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <g_temperature>
    3bfc:	68 17       	cp	r22, r24
    3bfe:	b1 f0       	breq	.+44     	; 0x3c2c <_Z4loopv+0x2fe>
				{
					g_temperature = temp;
    3c00:	60 93 33 05 	sts	0x0533, r22	; 0x800533 <g_temperature>
					int8_t delta25 = 25 - temp;
					int8_t adj = eeprom_read_byte((uint8_t*)&ee_temperature_table[delta25]);
    3c04:	89 e1       	ldi	r24, 0x19	; 25
    3c06:	86 1b       	sub	r24, r22
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 0b       	sbc	r25, r25
    3c0c:	87 5c       	subi	r24, 0xC7	; 199
    3c0e:	9d 4f       	sbci	r25, 0xFD	; 253
    3c10:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <eeprom_read_byte>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    3c14:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <_ZL15g_rv3028_offset>
    3c18:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <_ZL15g_rv3028_offset+0x1>
    3c1c:	a9 01       	movw	r20, r18
    3c1e:	48 0f       	add	r20, r24
    3c20:	51 1d       	adc	r21, r1
    3c22:	87 fd       	sbrc	r24, 7
    3c24:	5a 95       	dec	r21
    3c26:	ca 01       	movw	r24, r20
    3c28:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	0e 94 4e 14 	call	0x289c	; 0x289c <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    3c32:	8c e3       	ldi	r24, 0x3C	; 60
    3c34:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL29g_temperature_check_countdown>
    3c38:	39 c1       	rjmp	.+626    	; 0x3eac <_Z4loopv+0x57e>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3c3a:	f5 01       	movw	r30, r10
    3c3c:	41 91       	ld	r20, Z+
    3c3e:	51 91       	ld	r21, Z+
    3c40:	61 91       	ld	r22, Z+
    3c42:	71 91       	ld	r23, Z+
    3c44:	5f 01       	movw	r10, r30
    3c46:	86 ef       	ldi	r24, 0xF6	; 246
    3c48:	94 e0       	ldi	r25, 0x04	; 4
    3c4a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    3c4e:	86 ef       	ldi	r24, 0xF6	; 246
    3c50:	94 e0       	ldi	r25, 0x04	; 4
    3c52:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN8Goertzel10Magnitude2Ev>
    3c56:	e6 2e       	mov	r14, r22
    3c58:	f7 2e       	mov	r15, r23
    3c5a:	d8 2e       	mov	r13, r24
    3c5c:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    3c5e:	27 2d       	mov	r18, r7
    3c60:	36 2d       	mov	r19, r6
    3c62:	45 2d       	mov	r20, r5
    3c64:	54 2d       	mov	r21, r4
    3c66:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__gesf2>
    3c6a:	18 16       	cp	r1, r24
    3c6c:	b4 f4       	brge	.+44     	; 0x3c9a <_Z4loopv+0x36c>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	34 e2       	ldi	r19, 0x24	; 36
    3c72:	44 e7       	ldi	r20, 0x74	; 116
    3c74:	59 e4       	ldi	r21, 0x49	; 73
    3c76:	6e 2d       	mov	r22, r14
    3c78:	7f 2d       	mov	r23, r15
    3c7a:	8d 2d       	mov	r24, r13
    3c7c:	9c 2d       	mov	r25, r12
    3c7e:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__gesf2>
    3c82:	18 16       	cp	r1, r24
    3c84:	34 f4       	brge	.+12     	; 0x3c92 <_Z4loopv+0x364>
    3c86:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    3c88:	7e 2c       	mov	r7, r14
    3c8a:	6f 2c       	mov	r6, r15
    3c8c:	5d 2c       	mov	r5, r13
    3c8e:	4c 2c       	mov	r4, r12
    3c90:	04 c0       	rjmp	.+8      	; 0x3c9a <_Z4loopv+0x36c>
    3c92:	7e 2c       	mov	r7, r14
    3c94:	6f 2c       	mov	r6, r15
    3c96:	5d 2c       	mov	r5, r13
    3c98:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    3c9a:	0f 5f       	subi	r16, 0xFF	; 255
    3c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9e:	04 30       	cpi	r16, 0x04	; 4
    3ca0:	11 05       	cpc	r17, r1
    3ca2:	59 f6       	brne	.-106    	; 0x3c3a <_Z4loopv+0x30c>
    3ca4:	13 c1       	rjmp	.+550    	; 0x3ecc <_Z4loopv+0x59e>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3ca6:	f5 01       	movw	r30, r10
    3ca8:	41 91       	ld	r20, Z+
    3caa:	51 91       	ld	r21, Z+
    3cac:	61 91       	ld	r22, Z+
    3cae:	71 91       	ld	r23, Z+
    3cb0:	5f 01       	movw	r10, r30
    3cb2:	86 ef       	ldi	r24, 0xF6	; 246
    3cb4:	94 e0       	ldi	r25, 0x04	; 4
    3cb6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    3cba:	86 ef       	ldi	r24, 0xF6	; 246
    3cbc:	94 e0       	ldi	r25, 0x04	; 4
    3cbe:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN8Goertzel10Magnitude2Ev>
    3cc2:	e6 2e       	mov	r14, r22
    3cc4:	f7 2e       	mov	r15, r23
    3cc6:	d8 2e       	mov	r13, r24
    3cc8:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    3cca:	25 2d       	mov	r18, r5
    3ccc:	34 2d       	mov	r19, r4
    3cce:	43 2d       	mov	r20, r3
    3cd0:	52 2d       	mov	r21, r2
    3cd2:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__gesf2>
    3cd6:	18 16       	cp	r1, r24
    3cd8:	b4 f4       	brge	.+44     	; 0x3d06 <_Z4loopv+0x3d8>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	34 e2       	ldi	r19, 0x24	; 36
    3cde:	44 e7       	ldi	r20, 0x74	; 116
    3ce0:	59 e4       	ldi	r21, 0x49	; 73
    3ce2:	6e 2d       	mov	r22, r14
    3ce4:	7f 2d       	mov	r23, r15
    3ce6:	8d 2d       	mov	r24, r13
    3ce8:	9c 2d       	mov	r25, r12
    3cea:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <__gesf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	34 f4       	brge	.+12     	; 0x3cfe <_Z4loopv+0x3d0>
    3cf2:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    3cf4:	5e 2c       	mov	r5, r14
    3cf6:	4f 2c       	mov	r4, r15
    3cf8:	3d 2c       	mov	r3, r13
    3cfa:	2c 2c       	mov	r2, r12
    3cfc:	04 c0       	rjmp	.+8      	; 0x3d06 <_Z4loopv+0x3d8>
    3cfe:	5e 2c       	mov	r5, r14
    3d00:	4f 2c       	mov	r4, r15
    3d02:	3d 2c       	mov	r3, r13
    3d04:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    3d06:	0f 5f       	subi	r16, 0xFF	; 255
    3d08:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0a:	04 30       	cpi	r16, 0x04	; 4
    3d0c:	11 05       	cpc	r17, r1
    3d0e:	59 f6       	brne	.-106    	; 0x3ca6 <_Z4loopv+0x378>
							lb_send_string(g_tempStr,TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    3d10:	77 20       	and	r7, r7
    3d12:	0c f4       	brge	.+2      	; 0x3d16 <_Z4loopv+0x3e8>
    3d14:	71 c0       	rjmp	.+226    	; 0x3df8 <_Z4loopv+0x4ca>
				{
					char newKey = key[4 * y + x];
    3d16:	c4 01       	movw	r24, r8
    3d18:	88 0f       	add	r24, r24
    3d1a:	99 1f       	adc	r25, r25
    3d1c:	88 0f       	add	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	8e 5a       	subi	r24, 0xAE	; 174
    3d22:	9d 4f       	sbci	r25, 0xFD	; 253
    3d24:	fc 01       	movw	r30, r24
    3d26:	e6 0d       	add	r30, r6
    3d28:	f7 1d       	adc	r31, r7
    3d2a:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    3d2c:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ4loopvE7lastKey>
    3d30:	18 13       	cpse	r17, r24
    3d32:	17 c0       	rjmp	.+46     	; 0x3d62 <_Z4loopv+0x434>
					{
						checkCount++;
    3d34:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    3d38:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3d42:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    3d46:	03 97       	sbiw	r24, 0x03	; 3
    3d48:	61 f4       	brne	.+24     	; 0x3d62 <_Z4loopv+0x434>
						{
							g_dtmf_detected = TRUE;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <g_dtmf_detected>
							quietCount = 0;
    3d50:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ4loopvE10quietCount+0x1>
    3d54:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    3d58:	10 93 ff 04 	sts	0x04FF, r17	; 0x8004ff <g_lastKey>
								sprintf(g_tempStr,"\"%c\"\n",g_lastKey);
								lb_send_string(g_tempStr,TRUE);								
							}
#endif // DEBUG_DTMF

							processKey(newKey);
    3d5c:	81 2f       	mov	r24, r17
    3d5e:	0e 94 25 12 	call	0x244a	; 0x244a <_Z10processKeyc>
							}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    3d62:	10 93 75 04 	sts	0x0475, r17	; 0x800475 <_ZZ4loopvE7lastKey>
    3d66:	48 c0       	rjmp	.+144    	; 0x3df8 <_Z4loopv+0x4ca>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    3d68:	c0 90 f7 04 	lds	r12, 0x04F7	; 0x8004f7 <g_tick_count>
    3d6c:	d0 90 f8 04 	lds	r13, 0x04F8	; 0x8004f8 <g_tick_count+0x1>
    3d70:	e0 90 f9 04 	lds	r14, 0x04F9	; 0x8004f9 <g_tick_count+0x2>
    3d74:	f0 90 fa 04 	lds	r15, 0x04FA	; 0x8004fa <g_tick_count+0x3>
    3d78:	80 90 fb 04 	lds	r8, 0x04FB	; 0x8004fb <g_last>
    3d7c:	90 90 fc 04 	lds	r9, 0x04FC	; 0x8004fc <g_last+0x1>
    3d80:	a0 90 fd 04 	lds	r10, 0x04FD	; 0x8004fd <g_last+0x2>
    3d84:	b0 90 fe 04 	lds	r11, 0x04FE	; 0x8004fe <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    3d88:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZZ4loopvE10quietCount>
    3d8c:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZZ4loopvE10quietCount+0x1>
    3d90:	9c 01       	movw	r18, r24
    3d92:	2f 5f       	subi	r18, 0xFF	; 255
    3d94:	3f 4f       	sbci	r19, 0xFF	; 255
    3d96:	30 93 74 04 	sts	0x0474, r19	; 0x800474 <_ZZ4loopvE10quietCount+0x1>
    3d9a:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <_ZZ4loopvE10quietCount>
    3d9e:	03 97       	sbiw	r24, 0x03	; 3
    3da0:	5c f1       	brlt	.+86     	; 0x3df8 <_Z4loopv+0x4ca>
				{
					g_dtmf_detected = FALSE;
    3da2:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <g_dtmf_detected>
					digitalWrite(PIN_LED1,OFF);
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	8d e0       	ldi	r24, 0x0D	; 13
    3daa:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

					if(delta < 1500)
    3dae:	c8 18       	sub	r12, r8
    3db0:	d9 08       	sbc	r13, r9
    3db2:	ea 08       	sbc	r14, r10
    3db4:	fb 08       	sbc	r15, r11
    3db6:	fc ed       	ldi	r31, 0xDC	; 220
    3db8:	cf 16       	cp	r12, r31
    3dba:	f5 e0       	ldi	r31, 0x05	; 5
    3dbc:	df 06       	cpc	r13, r31
    3dbe:	e1 04       	cpc	r14, r1
    3dc0:	f1 04       	cpc	r15, r1
    3dc2:	20 f4       	brcc	.+8      	; 0x3dcc <_Z4loopv+0x49e>
					{
						checkCount = 0;
    3dc4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3dc8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    3dcc:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ4loopvE10quietCount+0x1>
    3dd0:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    3dd4:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_tick_count>
    3dd8:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_tick_count+0x1>
    3ddc:	a0 91 f9 04 	lds	r26, 0x04F9	; 0x8004f9 <g_tick_count+0x2>
    3de0:	b0 91 fa 04 	lds	r27, 0x04FA	; 0x8004fa <g_tick_count+0x3>
    3de4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <g_last>
    3de8:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <g_last+0x1>
    3dec:	a0 93 fd 04 	sts	0x04FD, r26	; 0x8004fd <g_last+0x2>
    3df0:	b0 93 fe 04 	sts	0x04FE, r27	; 0x8004fe <g_last+0x3>
					lastKey = '\0';
    3df4:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    3df8:	ea e7       	ldi	r30, 0x7A	; 122
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	88 60       	ori	r24, 0x08	; 8
    3e00:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    3e02:	80 81       	ld	r24, Z
    3e04:	80 64       	ori	r24, 0x40	; 64
    3e06:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
    3e08:	10 91 32 05 	lds	r17, 0x0532	; 0x800532 <g_config_error>
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    3e0c:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z23clockConfigurationErrorv>
    3e10:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <g_config_error>
    3e14:	81 11       	cpse	r24, r1
    3e16:	71 c0       	rjmp	.+226    	; 0x3efa <_Z4loopv+0x5cc>
    3e18:	11 11       	cpse	r17, r1
    3e1a:	6b c0       	rjmp	.+214    	; 0x3ef2 <_Z4loopv+0x5c4>
    3e1c:	6e c0       	rjmp	.+220    	; 0x3efa <_Z4loopv+0x5cc>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    3e1e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	82 e8       	ldi	r24, 0x82	; 130
    3e26:	9b e1       	ldi	r25, 0x1B	; 27
    3e28:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	6a e0       	ldi	r22, 0x0A	; 10
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    3e36:	66 0f       	add	r22, r22
    3e38:	77 1f       	adc	r23, r23
    3e3a:	70 93 55 05 	sts	0x0555, r23	; 0x800555 <g_code_throttle+0x1>
    3e3e:	60 93 54 05 	sts	0x0554, r22	; 0x800554 <g_code_throttle>
				BOOL repeat = FALSE;
    3e42:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	be 01       	movw	r22, r28
    3e4a:	6f 5f       	subi	r22, 0xFF	; 255
    3e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4e:	8c e1       	ldi	r24, 0x1C	; 28
    3e50:	95 e0       	ldi	r25, 0x05	; 5
    3e52:	0e 94 af 21 	call	0x435e	; 0x435e <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    3e5c:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_callsign_sent>
    3e60:	82 ce       	rjmp	.-764    	; 0x3b66 <_Z4loopv+0x238>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3e62:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3e66:	89 30       	cpi	r24, 0x09	; 9
    3e68:	08 f0       	brcs	.+2      	; 0x3e6c <_Z4loopv+0x53e>
    3e6a:	6e ce       	rjmp	.-804    	; 0x3b48 <_Z4loopv+0x21a>
    3e6c:	7c ce       	rjmp	.-776    	; 0x3b66 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
    3e6e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_fox_transition>
    3e72:	81 11       	cpse	r24, r1
    3e74:	6f ce       	rjmp	.-802    	; 0x3b54 <_Z4loopv+0x226>
    3e76:	77 ce       	rjmp	.-786    	; 0x3b66 <_Z4loopv+0x238>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ4loopvE7proceed>
    3e7e:	ab ce       	rjmp	.-682    	; 0x3bd6 <_Z4loopv+0x2a8>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    3e80:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    3e84:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
    3e88:	a6 ce       	rjmp	.-692    	; 0x3bd6 <_Z4loopv+0x2a8>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3e8a:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_fox>
    3e8e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    3e92:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	82 17       	cp	r24, r18
    3e9a:	93 07       	cpc	r25, r19
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <_Z4loopv+0x572>
    3e9e:	97 ce       	rjmp	.-722    	; 0x3bce <_Z4loopv+0x2a0>
    3ea0:	9a ce       	rjmp	.-716    	; 0x3bd6 <_Z4loopv+0x2a8>
			{
				g_on_the_air = FALSE;
    3ea2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_on_the_air+0x1>
    3ea6:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_on_the_air>
    3eaa:	95 ce       	rjmp	.-726    	; 0x3bd6 <_Z4loopv+0x2a8>
    3eac:	0f 2e       	mov	r0, r31
    3eae:	f2 e6       	ldi	r31, 0x62	; 98
    3eb0:	af 2e       	mov	r10, r31
    3eb2:	f2 e0       	ldi	r31, 0x02	; 2
    3eb4:	bf 2e       	mov	r11, r31
    3eb6:	f0 2d       	mov	r31, r0

/*
 *  Here is the main loop
 * */
void loop()
{
    3eb8:	00 e0       	ldi	r16, 0x00	; 0
    3eba:	10 e0       	ldi	r17, 0x00	; 0
    3ebc:	88 24       	eor	r8, r8
    3ebe:	8a 94       	dec	r8
    3ec0:	98 2c       	mov	r9, r8
    3ec2:	71 2c       	mov	r7, r1
    3ec4:	61 2c       	mov	r6, r1
    3ec6:	51 2c       	mov	r5, r1
    3ec8:	41 2c       	mov	r4, r1
    3eca:	b7 ce       	rjmp	.-658    	; 0x3c3a <_Z4loopv+0x30c>
						lb_send_string(g_tempStr,TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    3ecc:	99 20       	and	r9, r9
    3ece:	0c f4       	brge	.+2      	; 0x3ed2 <_Z4loopv+0x5a4>
    3ed0:	4b cf       	rjmp	.-362    	; 0x3d68 <_Z4loopv+0x43a>
    3ed2:	0f 2e       	mov	r0, r31
    3ed4:	f2 e7       	ldi	r31, 0x72	; 114
    3ed6:	af 2e       	mov	r10, r31
    3ed8:	f2 e0       	ldi	r31, 0x02	; 2
    3eda:	bf 2e       	mov	r11, r31
    3edc:	f0 2d       	mov	r31, r0
    3ede:	00 e0       	ldi	r16, 0x00	; 0
    3ee0:	10 e0       	ldi	r17, 0x00	; 0
    3ee2:	66 24       	eor	r6, r6
    3ee4:	6a 94       	dec	r6
    3ee6:	76 2c       	mov	r7, r6
    3ee8:	51 2c       	mov	r5, r1
    3eea:	41 2c       	mov	r4, r1
    3eec:	31 2c       	mov	r3, r1
    3eee:	21 2c       	mov	r2, r1
    3ef0:	da ce       	rjmp	.-588    	; 0x3ca6 <_Z4loopv+0x378>
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
		{
			digitalWrite(PIN_LED2,OFF); /* ensure LED is off */
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	87 e0       	ldi	r24, 0x07	; 7
    3ef6:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
		}
}
    3efa:	0f 90       	pop	r0
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	bf 90       	pop	r11
    3f0e:	af 90       	pop	r10
    3f10:	9f 90       	pop	r9
    3f12:	8f 90       	pop	r8
    3f14:	7f 90       	pop	r7
    3f16:	6f 90       	pop	r6
    3f18:	5f 90       	pop	r5
    3f1a:	4f 90       	pop	r4
    3f1c:	3f 90       	pop	r3
    3f1e:	2f 90       	pop	r2
    3f20:	08 95       	ret

00003f22 <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);          /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    3f22:	61 e0       	ldi	r22, 0x01	; 1
    3f24:	8d e0       	ldi	r24, 0x0D	; 13
    3f26:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	8d e0       	ldi	r24, 0x0D	; 13
    3f2e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	87 e0       	ldi	r24, 0x07	; 7
    3f36:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	87 e0       	ldi	r24, 0x07	; 7
    3f3e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    3f42:	61 e0       	ldi	r22, 0x01	; 1
    3f44:	8a e0       	ldi	r24, 0x0A	; 10
    3f46:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3f4a:	60 e0       	ldi	r22, 0x00	; 0
    3f4c:	8a e0       	ldi	r24, 0x0A	; 10
    3f4e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    3f52:	61 e0       	ldi	r22, 0x01	; 1
    3f54:	89 e0       	ldi	r24, 0x09	; 9
    3f56:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	89 e0       	ldi	r24, 0x09	; 9
    3f5e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    3f62:	61 e0       	ldi	r22, 0x01	; 1
    3f64:	88 e0       	ldi	r24, 0x08	; 8
    3f66:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    3f6a:	60 e0       	ldi	r22, 0x00	; 0
    3f6c:	88 e0       	ldi	r24, 0x08	; 8
    3f6e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);
    3f72:	61 e0       	ldi	r22, 0x01	; 1
    3f74:	8a e0       	ldi	r24, 0x0A	; 10
    3f76:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	8a e0       	ldi	r24, 0x0A	; 10
    3f7e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	84 e1       	ldi	r24, 0x14	; 20
    3f86:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    3f8a:	60 e0       	ldi	r22, 0x00	; 0
    3f8c:	85 e1       	ldi	r24, 0x15	; 21
    3f8e:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    3f92:	63 e0       	ldi	r22, 0x03	; 3
    3f94:	8c e0       	ldi	r24, 0x0C	; 12
    3f96:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    3f9a:	61 e0       	ldi	r22, 0x01	; 1
    3f9c:	8b e0       	ldi	r24, 0x0B	; 11
    3f9e:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    3fa2:	60 e0       	ldi	r22, 0x00	; 0
    3fa4:	8b e0       	ldi	r24, 0x0B	; 11
    3fa6:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    3faa:	63 e0       	ldi	r22, 0x03	; 3
    3fac:	84 e0       	ldi	r24, 0x04	; 4
    3fae:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    3fb2:	61 e0       	ldi	r22, 0x01	; 1
    3fb4:	8e e0       	ldi	r24, 0x0E	; 14
    3fb6:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    3fba:	61 e0       	ldi	r22, 0x01	; 1
    3fbc:	8f e0       	ldi	r24, 0x0F	; 15
    3fbe:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    3fc2:	61 e0       	ldi	r22, 0x01	; 1
    3fc4:	80 e1       	ldi	r24, 0x10	; 16
    3fc6:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    3fca:	61 e0       	ldi	r22, 0x01	; 1
    3fcc:	81 e1       	ldi	r24, 0x11	; 17
    3fce:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    3fd2:	61 e0       	ldi	r22, 0x01	; 1
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    3fda:	61 e0       	ldi	r22, 0x01	; 1
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    3fe2:	63 e0       	ldi	r22, 0x03	; 3
    3fe4:	82 e1       	ldi	r24, 0x12	; 18
    3fe6:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    3fea:	63 e0       	ldi	r22, 0x03	; 3
    3fec:	83 e1       	ldi	r24, 0x13	; 19
    3fee:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		initializeEEPROMVars(TRUE);     /* Must happen after pins are configured due to I2C access */
#else
		initializeEEPROMVars(FALSE);    /* Must happen after pins are configured due to I2C access */
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z20initializeEEPROMVarsh>
		setUpAudioSampling(true);
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	0e 94 4e 14 	call	0x289c	; 0x289c <_Z18setUpAudioSamplingh>
#endif

	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    3ffe:	e9 e6       	ldi	r30, 0x69	; 105
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	80 81       	ld	r24, Z
    4004:	82 60       	ori	r24, 0x02	; 2
    4006:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    4008:	e8 9a       	sbi	0x1d, 0	; 29

	/**
	 * TIMER2 is for periodic interrupts to drive Morse code generation */
	/* Reset control registers */
	TCCR2A = 0;
    400a:	a0 eb       	ldi	r26, 0xB0	; 176
    400c:	b0 e0       	ldi	r27, 0x00	; 0
    400e:	1c 92       	st	X, r1
	TCCR2B = 0;
    4010:	e1 eb       	ldi	r30, 0xB1	; 177
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    4016:	8c 91       	ld	r24, X
    4018:	82 60       	ori	r24, 0x02	; 2
    401a:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    401c:	80 81       	ld	r24, Z
    401e:	87 60       	ori	r24, 0x07	; 7
    4020:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4022:	8c e0       	ldi	r24, 0x0C	; 12
    4024:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    4028:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    402c:	e6 eb       	ldi	r30, 0xB6	; 182
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	8f 7d       	andi	r24, 0xDF	; 223
    4034:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    4036:	e0 e7       	ldi	r30, 0x70	; 112
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    403c:	80 81       	ld	r24, Z
    403e:	84 60       	ori	r24, 0x04	; 4
    4040:	80 83       	st	Z, r24

	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    4042:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01);     /* Set CTC mode */
    4044:	84 b5       	in	r24, 0x24	; 36
    4046:	82 60       	ori	r24, 0x02	; 2
    4048:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    404a:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);      /* Prescale 256 */
    404c:	85 b5       	in	r24, 0x25	; 37
    404e:	84 60       	ori	r24, 0x04	; 4
    4050:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    4052:	8f e2       	ldi	r24, 0x2F	; 47
    4054:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4056:	ee e6       	ldi	r30, 0x6E	; 110
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    405c:	80 81       	ld	r24, Z
    405e:	82 60       	ori	r24, 0x02	; 2
    4060:	80 83       	st	Z, r24

	/* Sync button pin change interrupt */
	PCMSK2 = 0x00;
    4062:	ed e6       	ldi	r30, 0x6D	; 109
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4068:	80 e1       	ldi	r24, 0x10	; 16
    406a:	80 83       	st	Z, r24
	PCICR = 0x00;
    406c:	e8 e6       	ldi	r30, 0x68	; 104
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    4072:	84 e0       	ldi	r24, 0x04	; 4
    4074:	80 83       	st	Z, r24
	sei();                                                                                  /* Enable interrupts */
    4076:	78 94       	sei

	linkbus_init(BAUD);                                                                     /* Start the Link Bus serial comms */
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	71 ee       	ldi	r23, 0xE1	; 225
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 10 07 	call	0xe20	; 0xe20 <_Z12linkbus_initm>

#if !INIT_EEPROM_ONLY
		uint8_t result = rv3028_1s_sqw();
    4084:	0e 94 38 25 	call	0x4a70	; 0x4a70 <_Z13rv3028_1s_sqwv>
    4088:	c8 2f       	mov	r28, r24
#else
		rv3028_1s_sqw();
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch(NULL, NULL);
    408a:	60 e0       	ldi	r22, 0x00	; 0
    408c:	70 e0       	ldi	r23, 0x00	; 0
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z16rv3028_get_epochPbPc>
    4096:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <g_current_epoch>
    409a:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <g_current_epoch+0x1>
    409e:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_current_epoch+0x2>
    40a2:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		lb_send_Help();
    40a6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_Z12lb_send_Helpv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    40aa:	cc 23       	and	r28, r28
    40ac:	54 f4       	brge	.+20     	; 0x40c2 <main+0x1a0>
		{
			sprintf(g_tempStr, "Err 1\n");
    40ae:	87 e0       	ldi	r24, 0x07	; 7
    40b0:	ee e0       	ldi	r30, 0x0E	; 14
    40b2:	f2 e0       	ldi	r31, 0x02	; 2
    40b4:	ae ec       	ldi	r26, 0xCE	; 206
    40b6:	b4 e0       	ldi	r27, 0x04	; 4
    40b8:	01 90       	ld	r0, Z+
    40ba:	0d 92       	st	X+, r0
    40bc:	8a 95       	dec	r24
    40be:	e1 f7       	brne	.-8      	; 0x40b8 <main+0x196>
    40c0:	23 c0       	rjmp	.+70     	; 0x4108 <main+0x1e6>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    40c2:	c0 ff       	sbrs	r28, 0
    40c4:	0a c0       	rjmp	.+20     	; 0x40da <main+0x1b8>
		{
			sprintf(g_tempStr, "Err 2\n");
    40c6:	87 e0       	ldi	r24, 0x07	; 7
    40c8:	e5 e1       	ldi	r30, 0x15	; 21
    40ca:	f2 e0       	ldi	r31, 0x02	; 2
    40cc:	ae ec       	ldi	r26, 0xCE	; 206
    40ce:	b4 e0       	ldi	r27, 0x04	; 4
    40d0:	01 90       	ld	r0, Z+
    40d2:	0d 92       	st	X+, r0
    40d4:	8a 95       	dec	r24
    40d6:	e1 f7       	brne	.-8      	; 0x40d0 <main+0x1ae>
    40d8:	17 c0       	rjmp	.+46     	; 0x4108 <main+0x1e6>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    40da:	c1 ff       	sbrs	r28, 1
    40dc:	0a c0       	rjmp	.+20     	; 0x40f2 <main+0x1d0>
		{
			sprintf(g_tempStr, "Err 3\n");
    40de:	87 e0       	ldi	r24, 0x07	; 7
    40e0:	ec e1       	ldi	r30, 0x1C	; 28
    40e2:	f2 e0       	ldi	r31, 0x02	; 2
    40e4:	ae ec       	ldi	r26, 0xCE	; 206
    40e6:	b4 e0       	ldi	r27, 0x04	; 4
    40e8:	01 90       	ld	r0, Z+
    40ea:	0d 92       	st	X+, r0
    40ec:	8a 95       	dec	r24
    40ee:	e1 f7       	brne	.-8      	; 0x40e8 <main+0x1c6>
    40f0:	0b c0       	rjmp	.+22     	; 0x4108 <main+0x1e6>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    40f2:	c5 ff       	sbrs	r28, 5
    40f4:	09 c0       	rjmp	.+18     	; 0x4108 <main+0x1e6>
		{
			sprintf(g_tempStr, "RTC OK\n");
    40f6:	88 e0       	ldi	r24, 0x08	; 8
    40f8:	e3 e2       	ldi	r30, 0x23	; 35
    40fa:	f2 e0       	ldi	r31, 0x02	; 2
    40fc:	ae ec       	ldi	r26, 0xCE	; 206
    40fe:	b4 e0       	ldi	r27, 0x04	; 4
    4100:	01 90       	ld	r0, Z+
    4102:	0d 92       	st	X+, r0
    4104:	8a 95       	dec	r24
    4106:	e1 f7       	brne	.-8      	; 0x4100 <main+0x1de>
		}

		if(strlen(g_tempStr))
    4108:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <g_tempStr>
    410c:	88 23       	and	r24, r24
    410e:	29 f0       	breq	.+10     	; 0x411a <main+0x1f8>
		{
			lb_send_string(g_tempStr, TRUE);
    4110:	61 e0       	ldi	r22, 0x01	; 1
    4112:	8e ec       	ldi	r24, 0xCE	; 206
    4114:	94 e0       	ldi	r25, 0x04	; 4
    4116:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    411a:	0e 94 c5 14 	call	0x298a	; 0x298a <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    411e:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z17lb_send_NewPromptv>

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    412a:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z23clockConfigurationErrorv>
    412e:	81 11       	cpse	r24, r1
    4130:	07 c0       	rjmp	.+14     	; 0x4140 <main+0x21e>
    4132:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	91 11       	cpse	r25, r1
    413a:	03 c0       	rjmp	.+6      	; 0x4142 <main+0x220>
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	01 c0       	rjmp	.+2      	; 0x4142 <main+0x220>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    4146:	0e 94 97 1c 	call	0x392e	; 0x392e <_Z4loopv>
    414a:	fd cf       	rjmp	.-6      	; 0x4146 <main+0x224>

0000414c <_GLOBAL__sub_I_g_seconds_since_sync>:
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    4150:	00 e0       	ldi	r16, 0x00	; 0
    4152:	18 e7       	ldi	r17, 0x78	; 120
    4154:	26 e9       	ldi	r18, 0x96	; 150
    4156:	36 e4       	ldi	r19, 0x46	; 70
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	69 e4       	ldi	r22, 0x49	; 73
    415e:	73 e4       	ldi	r23, 0x43	; 67
    4160:	86 ef       	ldi	r24, 0xF6	; 246
    4162:	94 e0       	ldi	r25, 0x04	; 4
    4164:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN8GoertzelC1Eff>
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4168:	1f 91       	pop	r17
    416a:	0f 91       	pop	r16
    416c:	08 95       	ret

0000416e <_GLOBAL__sub_D_g_seconds_since_sync>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    416e:	86 ef       	ldi	r24, 0xF6	; 246
    4170:	94 e0       	ldi	r25, 0x04	; 4
    4172:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN8GoertzelD1Ev>
    4176:	08 95       	ret

00004178 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	fc 01       	movw	r30, r24
    417c:	b0 97       	sbiw	r30, 0x20	; 32
    417e:	ed 35       	cpi	r30, 0x5D	; 93
    4180:	f1 05       	cpc	r31, r1
    4182:	08 f0       	brcs	.+2      	; 0x4186 <_Z12getMorseCharc+0xe>
    4184:	e4 c0       	rjmp	.+456    	; 0x434e <_Z12getMorseCharc+0x1d6>
    4186:	e8 57       	subi	r30, 0x78	; 120
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    418e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    4190:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4192:	61 e0       	ldi	r22, 0x01	; 1
    4194:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4196:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    4198:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    419a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    419c:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    419e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    41a0:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    41a2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    41a4:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    41a6:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    41a8:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    41aa:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    41ac:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    41ae:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    41b0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    41b2:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    41b4:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    41b6:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    41b8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    41ba:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    41bc:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    41be:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    41c0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    41c2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    41c4:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    41c6:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    41c8:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    41ca:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    41cc:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    41ce:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    41d0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    41d2:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    41d4:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    41d6:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    41d8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    41da:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    41dc:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    41de:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    41e0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    41e2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    41e4:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    41e6:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    41e8:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    41ea:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    41ec:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    41ee:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    41f0:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    41f2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    41f4:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    41f6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    41f8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    41fa:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    41fc:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    41fe:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4200:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4202:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4204:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4206:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4208:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    420a:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    420c:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    420e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4210:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4212:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4214:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    4216:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    4218:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    421a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    421c:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    421e:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4220:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4222:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4224:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4226:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    4228:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    422a:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    422c:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    422e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4230:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4232:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4234:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4236:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    4238:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    423a:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    423c:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    423e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4240:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4242:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4244:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4246:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    4248:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    424a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    424c:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    424e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4250:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4252:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4254:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4256:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4258:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    425a:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    425c:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    425e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4260:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4262:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4264:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4266:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    4268:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    426a:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    426c:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    426e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4270:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4272:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4274:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4276:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4278:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    427a:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    427c:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    427e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4280:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4282:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4284:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4286:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    4288:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    428a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    428c:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    428e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4290:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4292:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4294:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4296:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    4298:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    429a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    429c:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    429e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    42a0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    42a2:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    42a4:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    42a6:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    42a8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    42aa:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    42ac:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    42ae:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    42b0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    42b2:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    42b4:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    42b6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    42b8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    42ba:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    42bc:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    42be:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    42c0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    42c2:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    42c4:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    42c6:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    42c8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    42ca:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    42cc:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    42ce:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    42d0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    42d2:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    42d4:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    42d6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    42d8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    42da:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    42dc:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    42de:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    42e0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    42e2:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    42e4:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    42e6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    42e8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    42ea:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    42ec:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    42ee:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    42f0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    42f2:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    42f4:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    42f6:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    42f8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    42fa:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    42fc:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    42fe:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4300:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4302:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4304:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4306:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    4308:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    430a:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    430c:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    430e:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4310:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4312:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4314:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4316:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    4318:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    431a:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    431c:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    431e:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4320:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4322:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4324:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    4326:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    4328:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    432a:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    432c:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    432e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4330:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4332:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4334:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    4336:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4338:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    433a:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    433c:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    433e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4340:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4342:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4344:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4346:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4348:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    434a:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    434c:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    434e:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4350:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4352:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    4354:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4356:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    4358:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    435a:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    435c:	08 95       	ret

0000435e <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4364:	00 97       	sbiw	r24, 0x00	; 0
    4366:	b1 f1       	breq	.+108    	; 0x43d4 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    4368:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    436c:	61 15       	cp	r22, r1
    436e:	71 05       	cpc	r23, r1
    4370:	21 f0       	breq	.+8      	; 0x437a <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4372:	db 01       	movw	r26, r22
    4374:	2c 91       	ld	r18, X
    4376:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    437a:	fc 01       	movw	r30, r24
    437c:	20 81       	ld	r18, Z
    437e:	22 23       	and	r18, r18
    4380:	d9 f0       	breq	.+54     	; 0x43b8 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4382:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4386:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    438a:	80 e2       	ldi	r24, 0x20	; 32
    438c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4390:	82 2f       	mov	r24, r18
    4392:	0e 94 bc 20 	call	0x4178	; 0x4178 <_Z12getMorseCharc>
    4396:	60 93 63 05 	sts	0x0563, r22	; 0x800563 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    439a:	70 93 64 05 	sts	0x0564, r23	; 0x800564 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    439e:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    43a2:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    43a6:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    43aa:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    43ae:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    43b2:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <_ZZ9makeMorsePcPhS0_E15completedString>
    43b6:	0a c0       	rjmp	.+20     	; 0x43cc <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    43b8:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    43bc:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    43c6:	20 97       	sbiw	r28, 0x00	; 0
    43c8:	09 f0       	breq	.+2      	; 0x43cc <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    43ca:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    43cc:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	c0 c0       	rjmp	.+384    	; 0x4554 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    43d4:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <_ZZ9makeMorsePcPhS0_E3str>
    43d8:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    43dc:	30 97       	sbiw	r30, 0x00	; 0
    43de:	09 f4       	brne	.+2      	; 0x43e2 <_Z9makeMorsePcPhS0_+0x84>
    43e0:	aa c0       	rjmp	.+340    	; 0x4536 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    43e2:	61 15       	cp	r22, r1
    43e4:	71 05       	cpc	r23, r1
    43e6:	21 f0       	breq	.+8      	; 0x43f0 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    43e8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    43ec:	db 01       	movw	r26, r22
    43ee:	8c 93       	st	X, r24
		}

		if(completedString)
    43f0:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <_ZZ9makeMorsePcPhS0_E15completedString>
    43f4:	88 23       	and	r24, r24
    43f6:	49 f0       	breq	.+18     	; 0x440a <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    43f8:	20 97       	sbiw	r28, 0x00	; 0
    43fa:	09 f4       	brne	.+2      	; 0x43fe <_Z9makeMorsePcPhS0_+0xa0>
    43fc:	a8 c0       	rjmp	.+336    	; 0x454e <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4402:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	a5 c0       	rjmp	.+330    	; 0x4554 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    440a:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    440e:	88 23       	and	r24, r24
    4410:	21 f0       	breq	.+8      	; 0x441a <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4412:	81 50       	subi	r24, 0x01	; 1
    4414:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4418:	7f c0       	rjmp	.+254    	; 0x4518 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    441a:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    441e:	88 23       	and	r24, r24
    4420:	81 f0       	breq	.+32     	; 0x4442 <_Z9makeMorsePcPhS0_+0xe4>
    4422:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4426:	81 11       	cpse	r24, r1
    4428:	0c c0       	rjmp	.+24     	; 0x4442 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    442a:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    442e:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4432:	88 23       	and	r24, r24
    4434:	09 f4       	brne	.+2      	; 0x4438 <_Z9makeMorsePcPhS0_+0xda>
    4436:	70 c0       	rjmp	.+224    	; 0x4518 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    4438:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    443c:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4440:	6b c0       	rjmp	.+214    	; 0x4518 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4442:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4446:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    444a:	89 17       	cp	r24, r25
    444c:	90 f1       	brcs	.+100    	; 0x44b2 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    444e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4452:	8f 5f       	subi	r24, 0xFF	; 255
    4454:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4458:	df 01       	movw	r26, r30
    445a:	a8 0f       	add	r26, r24
    445c:	b1 1d       	adc	r27, r1
    445e:	8c 91       	ld	r24, X
    4460:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4464:	81 11       	cpse	r24, r1
    4466:	19 c0       	rjmp	.+50     	; 0x449a <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    4468:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    446c:	88 23       	and	r24, r24
    446e:	31 f0       	breq	.+12     	; 0x447c <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4470:	80 81       	ld	r24, Z
    4472:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4476:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <_ZZ9makeMorsePcPhS0_E9charIndex>
    447a:	0f c0       	rjmp	.+30     	; 0x449a <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    447c:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4480:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4484:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    4488:	91 e0       	ldi	r25, 0x01	; 1
    448a:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    448e:	20 97       	sbiw	r28, 0x00	; 0
    4490:	09 f0       	breq	.+2      	; 0x4494 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4492:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4494:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    4498:	5d c0       	rjmp	.+186    	; 0x4554 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    449a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    449e:	0e 94 bc 20 	call	0x4178	; 0x4178 <_Z12getMorseCharc>
    44a2:	60 93 63 05 	sts	0x0563, r22	; 0x800563 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    44a6:	70 93 64 05 	sts	0x0564, r23	; 0x800564 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    44aa:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    44ae:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    44b2:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    44b6:	2d 3f       	cpi	r18, 0xFD	; 253
    44b8:	00 f5       	brcc	.+64     	; 0x44fa <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    44ba:	40 91 61 05 	lds	r20, 0x0561	; 0x800561 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    44be:	31 e0       	ldi	r19, 0x01	; 1
    44c0:	34 0f       	add	r19, r20
    44c2:	30 93 61 05 	sts	0x0561, r19	; 0x800561 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <_Z9makeMorsePcPhS0_+0x172>
    44cc:	88 0f       	add	r24, r24
    44ce:	99 1f       	adc	r25, r25
    44d0:	4a 95       	dec	r20
    44d2:	e2 f7       	brpl	.-8      	; 0x44cc <_Z9makeMorsePcPhS0_+0x16e>
    44d4:	82 23       	and	r24, r18
    44d6:	21 f0       	breq	.+8      	; 0x44e0 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    44d8:	82 e0       	ldi	r24, 0x02	; 2
    44da:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    44de:	02 c0       	rjmp	.+4      	; 0x44e4 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    44e0:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    44ea:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    44ee:	38 17       	cp	r19, r24
    44f0:	98 f0       	brcs	.+38     	; 0x4518 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    44f2:	82 e0       	ldi	r24, 0x02	; 2
    44f4:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    44f8:	0f c0       	rjmp	.+30     	; 0x4518 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    44fa:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    44fe:	9f ef       	ldi	r25, 0xFF	; 255
    4500:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4504:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    4508:	84 30       	cpi	r24, 0x04	; 4
    450a:	20 f0       	brcs	.+8      	; 0x4514 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    450c:	84 50       	subi	r24, 0x04	; 4
    450e:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4512:	02 c0       	rjmp	.+4      	; 0x4518 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4514:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    4518:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    451c:	8c 33       	cpi	r24, 0x3C	; 60
    451e:	31 f4       	brne	.+12     	; 0x452c <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    4526:	20 97       	sbiw	r28, 0x00	; 0
    4528:	41 f4       	brne	.+16     	; 0x453a <_Z9makeMorsePcPhS0_+0x1dc>
    452a:	14 c0       	rjmp	.+40     	; 0x4554 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    452c:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4530:	20 97       	sbiw	r28, 0x00	; 0
    4532:	19 f4       	brne	.+6      	; 0x453a <_Z9makeMorsePcPhS0_+0x1dc>
    4534:	09 c0       	rjmp	.+18     	; 0x4548 <_Z9makeMorsePcPhS0_+0x1ea>
    4536:	20 97       	sbiw	r28, 0x00	; 0
    4538:	19 f0       	breq	.+6      	; 0x4540 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    453a:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <_ZZ9makeMorsePcPhS0_E15completedString>
    453e:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4540:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4544:	81 11       	cpse	r24, r1
    4546:	05 c0       	rjmp	.+10     	; 0x4552 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    4548:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    454c:	03 c0       	rjmp	.+6      	; 0x4554 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	01 c0       	rjmp	.+2      	; 0x4554 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    4552:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    4554:	df 91       	pop	r29
    4556:	cf 91       	pop	r28
    4558:	08 95       	ret

0000455a <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    455a:	cf 92       	push	r12
    455c:	df 92       	push	r13
    455e:	ef 92       	push	r14
    4560:	ff 92       	push	r15
    4562:	0f 93       	push	r16
    4564:	1f 93       	push	r17
    4566:	cf 93       	push	r28
    4568:	fc 01       	movw	r30, r24
    456a:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    456c:	80 81       	ld	r24, Z
		if(!c)
    456e:	88 23       	and	r24, r24
    4570:	c1 f0       	breq	.+48     	; 0x45a2 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4572:	8f 01       	movw	r16, r30
    4574:	0f 5f       	subi	r16, 0xFF	; 255
    4576:	1f 4f       	sbci	r17, 0xFF	; 255
    4578:	7f 01       	movw	r14, r30
    457a:	94 e1       	ldi	r25, 0x14	; 20
    457c:	e9 0e       	add	r14, r25
    457e:	f1 1c       	adc	r15, r1
    4580:	c0 e0       	ldi	r28, 0x00	; 0
    4582:	05 c0       	rjmp	.+10     	; 0x458e <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4584:	f8 01       	movw	r30, r16
    4586:	81 91       	ld	r24, Z+
    4588:	8f 01       	movw	r16, r30
		if(!c)
    458a:	88 23       	and	r24, r24
    458c:	59 f0       	breq	.+22     	; 0x45a4 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    458e:	0e 94 bc 20 	call	0x4178	; 0x4178 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4592:	6d 3f       	cpi	r22, 0xFD	; 253
    4594:	08 f4       	brcc	.+2      	; 0x4598 <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4596:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    4598:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    459a:	0e 15       	cp	r16, r14
    459c:	1f 05       	cpc	r17, r15
    459e:	91 f7       	brne	.-28     	; 0x4584 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    45a0:	01 c0       	rjmp	.+2      	; 0x45a4 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    45a2:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    45a4:	80 eb       	ldi	r24, 0xB0	; 176
    45a6:	94 e0       	ldi	r25, 0x04	; 4
    45a8:	b6 01       	movw	r22, r12
    45aa:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodhi4>
}
    45ae:	c6 9f       	mul	r28, r22
    45b0:	c0 01       	movw	r24, r0
    45b2:	c7 9f       	mul	r28, r23
    45b4:	90 0d       	add	r25, r0
    45b6:	11 24       	eor	r1, r1
    45b8:	cf 91       	pop	r28
    45ba:	1f 91       	pop	r17
    45bc:	0f 91       	pop	r16
    45be:	ff 90       	pop	r15
    45c0:	ef 90       	pop	r14
    45c2:	df 90       	pop	r13
    45c4:	cf 90       	pop	r12
    45c6:	08 95       	ret

000045c8 <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    45c8:	98 2f       	mov	r25, r24
    45ca:	96 95       	lsr	r25
    45cc:	96 95       	lsr	r25
    45ce:	96 95       	lsr	r25
    45d0:	9e 71       	andi	r25, 0x1E	; 30
    45d2:	29 2f       	mov	r18, r25
    45d4:	22 0f       	add	r18, r18
    45d6:	22 0f       	add	r18, r18
    45d8:	92 0f       	add	r25, r18
    45da:	8f 70       	andi	r24, 0x0F	; 15
    45dc:	89 0f       	add	r24, r25
    45de:	08 95       	ret

000045e0 <_Z8char2bcdPc>:
    45e0:	fc 01       	movw	r30, r24
    45e2:	20 81       	ld	r18, Z
    45e4:	81 81       	ldd	r24, Z+1	; 0x01
    45e6:	80 53       	subi	r24, 0x30	; 48
    45e8:	f0 e1       	ldi	r31, 0x10	; 16
    45ea:	2f 9f       	mul	r18, r31
    45ec:	80 0d       	add	r24, r0
    45ee:	11 24       	eor	r1, r1
    45f0:	08 95       	ret

000045f2 <_Z16rv3028_get_epochPbPc>:
    45f2:	4f 92       	push	r4
    45f4:	5f 92       	push	r5
    45f6:	6f 92       	push	r6
    45f8:	7f 92       	push	r7
    45fa:	8f 92       	push	r8
    45fc:	9f 92       	push	r9
    45fe:	af 92       	push	r10
    4600:	bf 92       	push	r11
    4602:	cf 92       	push	r12
    4604:	df 92       	push	r13
    4606:	ef 92       	push	r14
    4608:	ff 92       	push	r15
    460a:	0f 93       	push	r16
    460c:	1f 93       	push	r17
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	27 97       	sbiw	r28, 0x07	; 7
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	cd bf       	out	0x3d, r28	; 61
    4622:	6c 01       	movw	r12, r24
    4624:	7b 01       	movw	r14, r22
    4626:	fe 01       	movw	r30, r28
    4628:	31 96       	adiw	r30, 0x01	; 1
    462a:	87 e0       	ldi	r24, 0x07	; 7
    462c:	df 01       	movw	r26, r30
    462e:	1d 92       	st	X+, r1
    4630:	8a 95       	dec	r24
    4632:	e9 f7       	brne	.-6      	; 0x462e <_Z16rv3028_get_epochPbPc+0x3c>
    4634:	61 15       	cp	r22, r1
    4636:	71 05       	cpc	r23, r1
    4638:	f1 f0       	breq	.+60     	; 0x4676 <_Z16rv3028_get_epochPbPc+0x84>
    463a:	cb 01       	movw	r24, r22
    463c:	0a 96       	adiw	r24, 0x0a	; 10
    463e:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z8char2bcdPc>
    4642:	89 83       	std	Y+1, r24	; 0x01
    4644:	c7 01       	movw	r24, r14
    4646:	08 96       	adiw	r24, 0x08	; 8
    4648:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z8char2bcdPc>
    464c:	8a 83       	std	Y+2, r24	; 0x02
    464e:	c7 01       	movw	r24, r14
    4650:	06 96       	adiw	r24, 0x06	; 6
    4652:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z8char2bcdPc>
    4656:	8b 83       	std	Y+3, r24	; 0x03
    4658:	c7 01       	movw	r24, r14
    465a:	04 96       	adiw	r24, 0x04	; 4
    465c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z8char2bcdPc>
    4660:	8d 83       	std	Y+5, r24	; 0x05
    4662:	c7 01       	movw	r24, r14
    4664:	02 96       	adiw	r24, 0x02	; 2
    4666:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z8char2bcdPc>
    466a:	8e 83       	std	Y+6, r24	; 0x06
    466c:	c7 01       	movw	r24, r14
    466e:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z8char2bcdPc>
    4672:	8f 83       	std	Y+7, r24	; 0x07
    4674:	0b c0       	rjmp	.+22     	; 0x468c <_Z16rv3028_get_epochPbPc+0x9a>
    4676:	27 e0       	ldi	r18, 0x07	; 7
    4678:	ae 01       	movw	r20, r28
    467a:	4f 5f       	subi	r20, 0xFF	; 255
    467c:	5f 4f       	sbci	r21, 0xFF	; 255
    467e:	60 e0       	ldi	r22, 0x00	; 0
    4680:	84 ea       	ldi	r24, 0xA4	; 164
    4682:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z15i2c_device_readhhPhh>
    4686:	38 2f       	mov	r19, r24
    4688:	81 11       	cpse	r24, r1
    468a:	9b c0       	rjmp	.+310    	; 0x47c2 <_Z16rv3028_get_epochPbPc+0x1d0>
    468c:	8f 81       	ldd	r24, Y+7	; 0x07
    468e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_Z7bcd2dech>
    4692:	a8 2e       	mov	r10, r24
    4694:	b1 2c       	mov	r11, r1
    4696:	45 01       	movw	r8, r10
    4698:	b0 e3       	ldi	r27, 0x30	; 48
    469a:	8b 1a       	sub	r8, r27
    469c:	b8 ef       	ldi	r27, 0xF8	; 248
    469e:	9b 0a       	sbc	r9, r27
    46a0:	8e 81       	ldd	r24, Y+6	; 0x06
    46a2:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_Z7bcd2dech>
    46a6:	08 2f       	mov	r16, r24
    46a8:	8d 81       	ldd	r24, Y+5	; 0x05
    46aa:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_Z7bcd2dech>
    46ae:	78 2e       	mov	r7, r24
    46b0:	02 30       	cpi	r16, 0x02	; 2
    46b2:	68 f0       	brcs	.+26     	; 0x46ce <_Z16rv3028_get_epochPbPc+0xdc>
    46b4:	e1 2c       	mov	r14, r1
    46b6:	f1 2c       	mov	r15, r1
    46b8:	11 e0       	ldi	r17, 0x01	; 1
    46ba:	61 2f       	mov	r22, r17
    46bc:	c4 01       	movw	r24, r8
    46be:	0e 94 20 01 	call	0x240	; 0x240 <month_length>
    46c2:	e8 0e       	add	r14, r24
    46c4:	f1 1c       	adc	r15, r1
    46c6:	1f 5f       	subi	r17, 0xFF	; 255
    46c8:	01 13       	cpse	r16, r17
    46ca:	f7 cf       	rjmp	.-18     	; 0x46ba <_Z16rv3028_get_epochPbPc+0xc8>
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <_Z16rv3028_get_epochPbPc+0xe0>
    46ce:	e1 2c       	mov	r14, r1
    46d0:	f1 2c       	mov	r15, r1
    46d2:	87 2d       	mov	r24, r7
    46d4:	77 0c       	add	r7, r7
    46d6:	99 0b       	sbc	r25, r25
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	e8 0e       	add	r14, r24
    46dc:	f9 1e       	adc	r15, r25
    46de:	89 81       	ldd	r24, Y+1	; 0x01
    46e0:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_Z7bcd2dech>
    46e4:	48 2e       	mov	r4, r24
    46e6:	8a 81       	ldd	r24, Y+2	; 0x02
    46e8:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_Z7bcd2dech>
    46ec:	18 2f       	mov	r17, r24
    46ee:	8b 81       	ldd	r24, Y+3	; 0x03
    46f0:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_Z7bcd2dech>
    46f4:	04 2c       	mov	r0, r4
    46f6:	00 0c       	add	r0, r0
    46f8:	55 08       	sbc	r5, r5
    46fa:	ec e3       	ldi	r30, 0x3C	; 60
    46fc:	1e 02       	muls	r17, r30
    46fe:	40 0c       	add	r4, r0
    4700:	51 1c       	adc	r5, r1
    4702:	11 24       	eor	r1, r1
    4704:	05 2c       	mov	r0, r5
    4706:	00 0c       	add	r0, r0
    4708:	66 08       	sbc	r6, r6
    470a:	77 08       	sbc	r7, r7
    470c:	a8 2f       	mov	r26, r24
    470e:	88 0f       	add	r24, r24
    4710:	bb 0b       	sbc	r27, r27
    4712:	20 e1       	ldi	r18, 0x10	; 16
    4714:	3e e0       	ldi	r19, 0x0E	; 14
    4716:	0e 94 47 29 	call	0x528e	; 0x528e <__usmulhisi3>
    471a:	46 0e       	add	r4, r22
    471c:	57 1e       	adc	r5, r23
    471e:	68 1e       	adc	r6, r24
    4720:	79 1e       	adc	r7, r25
    4722:	d7 01       	movw	r26, r14
    4724:	20 e8       	ldi	r18, 0x80	; 128
    4726:	31 e5       	ldi	r19, 0x51	; 81
    4728:	41 e0       	ldi	r20, 0x01	; 1
    472a:	50 e0       	ldi	r21, 0x00	; 0
    472c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulshisi3>
    4730:	46 0e       	add	r4, r22
    4732:	57 1e       	adc	r5, r23
    4734:	68 1e       	adc	r6, r24
    4736:	79 1e       	adc	r7, r25
    4738:	d5 01       	movw	r26, r10
    473a:	5e 96       	adiw	r26, 0x1e	; 30
    473c:	20 e8       	ldi	r18, 0x80	; 128
    473e:	33 e3       	ldi	r19, 0x33	; 51
    4740:	41 ee       	ldi	r20, 0xE1	; 225
    4742:	51 e0       	ldi	r21, 0x01	; 1
    4744:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulshisi3>
    4748:	46 0e       	add	r4, r22
    474a:	57 1e       	adc	r5, r23
    474c:	68 1e       	adc	r6, r24
    474e:	79 1e       	adc	r7, r25
    4750:	c5 01       	movw	r24, r10
    4752:	4f 96       	adiw	r24, 0x1f	; 31
    4754:	dc 01       	movw	r26, r24
    4756:	0a f4       	brpl	.+2      	; 0x475a <_Z16rv3028_get_epochPbPc+0x168>
    4758:	13 96       	adiw	r26, 0x03	; 3
    475a:	b5 95       	asr	r27
    475c:	a7 95       	ror	r26
    475e:	b5 95       	asr	r27
    4760:	a7 95       	ror	r26
    4762:	20 e8       	ldi	r18, 0x80	; 128
    4764:	31 e5       	ldi	r19, 0x51	; 81
    4766:	41 e0       	ldi	r20, 0x01	; 1
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulshisi3>
    476e:	46 0e       	add	r4, r22
    4770:	57 1e       	adc	r5, r23
    4772:	68 1e       	adc	r6, r24
    4774:	79 1e       	adc	r7, r25
    4776:	c5 01       	movw	r24, r10
    4778:	8d 59       	subi	r24, 0x9D	; 157
    477a:	9f 4f       	sbci	r25, 0xFF	; 255
    477c:	64 e6       	ldi	r22, 0x64	; 100
    477e:	70 e0       	ldi	r23, 0x00	; 0
    4780:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    4784:	db 01       	movw	r26, r22
    4786:	20 e8       	ldi	r18, 0x80	; 128
    4788:	3e ea       	ldi	r19, 0xAE	; 174
    478a:	4e ef       	ldi	r20, 0xFE	; 254
    478c:	5f ef       	ldi	r21, 0xFF	; 255
    478e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulshisi3>
    4792:	46 0e       	add	r4, r22
    4794:	57 1e       	adc	r5, r23
    4796:	68 1e       	adc	r6, r24
    4798:	79 1e       	adc	r7, r25
    479a:	c5 01       	movw	r24, r10
    479c:	81 57       	subi	r24, 0x71	; 113
    479e:	9e 4f       	sbci	r25, 0xFE	; 254
    47a0:	60 e9       	ldi	r22, 0x90	; 144
    47a2:	71 e0       	ldi	r23, 0x01	; 1
    47a4:	0e 94 dd 28 	call	0x51ba	; 0x51ba <__divmodhi4>
    47a8:	db 01       	movw	r26, r22
    47aa:	20 e8       	ldi	r18, 0x80	; 128
    47ac:	31 e5       	ldi	r19, 0x51	; 81
    47ae:	41 e0       	ldi	r20, 0x01	; 1
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulshisi3>
    47b6:	64 0d       	add	r22, r4
    47b8:	75 1d       	adc	r23, r5
    47ba:	86 1d       	adc	r24, r6
    47bc:	97 1d       	adc	r25, r7
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	03 c0       	rjmp	.+6      	; 0x47c8 <_Z16rv3028_get_epochPbPc+0x1d6>
    47c2:	60 e0       	ldi	r22, 0x00	; 0
    47c4:	70 e0       	ldi	r23, 0x00	; 0
    47c6:	cb 01       	movw	r24, r22
    47c8:	c1 14       	cp	r12, r1
    47ca:	d1 04       	cpc	r13, r1
    47cc:	31 f0       	breq	.+12     	; 0x47da <_Z16rv3028_get_epochPbPc+0x1e8>
    47ce:	21 e0       	ldi	r18, 0x01	; 1
    47d0:	31 11       	cpse	r19, r1
    47d2:	01 c0       	rjmp	.+2      	; 0x47d6 <_Z16rv3028_get_epochPbPc+0x1e4>
    47d4:	20 e0       	ldi	r18, 0x00	; 0
    47d6:	d6 01       	movw	r26, r12
    47d8:	2c 93       	st	X, r18
    47da:	27 96       	adiw	r28, 0x07	; 7
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	de bf       	out	0x3e, r29	; 62
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	cd bf       	out	0x3d, r28	; 61
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	9f 90       	pop	r9
    47fc:	8f 90       	pop	r8
    47fe:	7f 90       	pop	r7
    4800:	6f 90       	pop	r6
    4802:	5f 90       	pop	r5
    4804:	4f 90       	pop	r4
    4806:	08 95       	ret

00004808 <_Z20rv3028_set_date_timePc>:
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	cd b7       	in	r28, 0x3d	; 61
    480e:	de b7       	in	r29, 0x3e	; 62
    4810:	27 97       	sbiw	r28, 0x07	; 7
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	f8 94       	cli
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	0f be       	out	0x3f, r0	; 63
    481a:	cd bf       	out	0x3d, r28	; 61
    481c:	21 e0       	ldi	r18, 0x01	; 1
    481e:	2c 83       	std	Y+4, r18	; 0x04
    4820:	dc 01       	movw	r26, r24
    4822:	0d 90       	ld	r0, X+
    4824:	00 20       	and	r0, r0
    4826:	e9 f7       	brne	.-6      	; 0x4822 <_Z20rv3028_set_date_timePc+0x1a>
    4828:	11 97       	sbiw	r26, 0x01	; 1
    482a:	a8 1b       	sub	r26, r24
    482c:	b9 0b       	sbc	r27, r25
    482e:	1c 97       	sbiw	r26, 0x0c	; 12
    4830:	0c f4       	brge	.+2      	; 0x4834 <_Z20rv3028_set_date_timePc+0x2c>
    4832:	3a c0       	rjmp	.+116    	; 0x48a8 <_Z20rv3028_set_date_timePc+0xa0>
    4834:	fc 01       	movw	r30, r24
    4836:	92 85       	ldd	r25, Z+10	; 0x0a
    4838:	83 85       	ldd	r24, Z+11	; 0x0b
    483a:	80 53       	subi	r24, 0x30	; 48
    483c:	20 e1       	ldi	r18, 0x10	; 16
    483e:	92 9f       	mul	r25, r18
    4840:	80 0d       	add	r24, r0
    4842:	11 24       	eor	r1, r1
    4844:	89 83       	std	Y+1, r24	; 0x01
    4846:	90 85       	ldd	r25, Z+8	; 0x08
    4848:	81 85       	ldd	r24, Z+9	; 0x09
    484a:	80 53       	subi	r24, 0x30	; 48
    484c:	20 e1       	ldi	r18, 0x10	; 16
    484e:	92 9f       	mul	r25, r18
    4850:	80 0d       	add	r24, r0
    4852:	11 24       	eor	r1, r1
    4854:	8a 83       	std	Y+2, r24	; 0x02
    4856:	96 81       	ldd	r25, Z+6	; 0x06
    4858:	87 81       	ldd	r24, Z+7	; 0x07
    485a:	80 53       	subi	r24, 0x30	; 48
    485c:	20 e1       	ldi	r18, 0x10	; 16
    485e:	92 9f       	mul	r25, r18
    4860:	80 0d       	add	r24, r0
    4862:	11 24       	eor	r1, r1
    4864:	8b 83       	std	Y+3, r24	; 0x03
    4866:	94 81       	ldd	r25, Z+4	; 0x04
    4868:	85 81       	ldd	r24, Z+5	; 0x05
    486a:	80 53       	subi	r24, 0x30	; 48
    486c:	20 e1       	ldi	r18, 0x10	; 16
    486e:	92 9f       	mul	r25, r18
    4870:	80 0d       	add	r24, r0
    4872:	11 24       	eor	r1, r1
    4874:	8d 83       	std	Y+5, r24	; 0x05
    4876:	92 81       	ldd	r25, Z+2	; 0x02
    4878:	83 81       	ldd	r24, Z+3	; 0x03
    487a:	80 53       	subi	r24, 0x30	; 48
    487c:	20 e1       	ldi	r18, 0x10	; 16
    487e:	92 9f       	mul	r25, r18
    4880:	80 0d       	add	r24, r0
    4882:	11 24       	eor	r1, r1
    4884:	8e 83       	std	Y+6, r24	; 0x06
    4886:	90 81       	ld	r25, Z
    4888:	81 81       	ldd	r24, Z+1	; 0x01
    488a:	80 53       	subi	r24, 0x30	; 48
    488c:	20 e1       	ldi	r18, 0x10	; 16
    488e:	92 9f       	mul	r25, r18
    4890:	80 0d       	add	r24, r0
    4892:	11 24       	eor	r1, r1
    4894:	8f 83       	std	Y+7, r24	; 0x07
    4896:	27 e0       	ldi	r18, 0x07	; 7
    4898:	ae 01       	movw	r20, r28
    489a:	4f 5f       	subi	r20, 0xFF	; 255
    489c:	5f 4f       	sbci	r21, 0xFF	; 255
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	84 ea       	ldi	r24, 0xA4	; 164
    48a2:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    48a6:	01 c0       	rjmp	.+2      	; 0x48aa <_Z20rv3028_set_date_timePc+0xa2>
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	27 96       	adiw	r28, 0x07	; 7
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	f8 94       	cli
    48b0:	de bf       	out	0x3e, r29	; 62
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	08 95       	ret

000048bc <_Z21rv3028_get_offset_RAMv>:
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <_Z21rv3028_get_offset_RAMv+0x6>
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62
    48c6:	22 e0       	ldi	r18, 0x02	; 2
    48c8:	ae 01       	movw	r20, r28
    48ca:	4f 5f       	subi	r20, 0xFF	; 255
    48cc:	5f 4f       	sbci	r21, 0xFF	; 255
    48ce:	66 e3       	ldi	r22, 0x36	; 54
    48d0:	84 ea       	ldi	r24, 0xA4	; 164
    48d2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z15i2c_device_readhhPhh>
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	2a 81       	ldd	r18, Y+2	; 0x02
    48e0:	22 23       	and	r18, r18
    48e2:	0c f4       	brge	.+2      	; 0x48e6 <_Z21rv3028_get_offset_RAMv+0x2a>
    48e4:	01 96       	adiw	r24, 0x01	; 1
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	08 95       	ret

000048f0 <_Z21rv3028_set_offset_RAMj>:
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	00 d0       	rcall	.+0      	; 0x48f6 <_Z21rv3028_set_offset_RAMj+0x6>
    48f6:	cd b7       	in	r28, 0x3d	; 61
    48f8:	de b7       	in	r29, 0x3e	; 62
    48fa:	20 e1       	ldi	r18, 0x10	; 16
    48fc:	2a 83       	std	Y+2, r18	; 0x02
    48fe:	9c 01       	movw	r18, r24
    4900:	36 95       	lsr	r19
    4902:	27 95       	ror	r18
    4904:	29 83       	std	Y+1, r18	; 0x01
    4906:	80 ff       	sbrs	r24, 0
    4908:	02 c0       	rjmp	.+4      	; 0x490e <_Z21rv3028_set_offset_RAMj+0x1e>
    490a:	80 e9       	ldi	r24, 0x90	; 144
    490c:	8a 83       	std	Y+2, r24	; 0x02
    490e:	22 e0       	ldi	r18, 0x02	; 2
    4910:	ae 01       	movw	r20, r28
    4912:	4f 5f       	subi	r20, 0xFF	; 255
    4914:	5f 4f       	sbci	r21, 0xFF	; 255
    4916:	66 e3       	ldi	r22, 0x36	; 54
    4918:	84 ea       	ldi	r24, 0xA4	; 164
    491a:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	df 91       	pop	r29
    4924:	cf 91       	pop	r28
    4926:	08 95       	ret

00004928 <_Z18waitForEEPROMReadyv>:
    4928:	cf 93       	push	r28
    492a:	df 93       	push	r29
    492c:	1f 92       	push	r1
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
    4932:	81 e0       	ldi	r24, 0x01	; 1
    4934:	89 83       	std	Y+1, r24	; 0x01
    4936:	21 e0       	ldi	r18, 0x01	; 1
    4938:	ae 01       	movw	r20, r28
    493a:	4f 5f       	subi	r20, 0xFF	; 255
    493c:	5f 4f       	sbci	r21, 0xFF	; 255
    493e:	6e e0       	ldi	r22, 0x0E	; 14
    4940:	84 ea       	ldi	r24, 0xA4	; 164
    4942:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z15i2c_device_readhhPhh>
    4946:	81 11       	cpse	r24, r1
    4948:	07 c0       	rjmp	.+14     	; 0x4958 <_Z18waitForEEPROMReadyv+0x30>
    494a:	89 81       	ldd	r24, Y+1	; 0x01
    494c:	80 78       	andi	r24, 0x80	; 128
    494e:	89 83       	std	Y+1, r24	; 0x01
    4950:	81 11       	cpse	r24, r1
    4952:	f1 cf       	rjmp	.-30     	; 0x4936 <_Z18waitForEEPROMReadyv+0xe>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	03 c0       	rjmp	.+6      	; 0x495e <_Z18waitForEEPROMReadyv+0x36>
    4958:	89 81       	ldd	r24, Y+1	; 0x01
    495a:	88 23       	and	r24, r24
    495c:	d9 f3       	breq	.-10     	; 0x4954 <_Z18waitForEEPROMReadyv+0x2c>
    495e:	0f 90       	pop	r0
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	08 95       	ret

00004966 <_Z18writeOneEEPROMBytehhh>:
    4966:	1f 93       	push	r17
    4968:	cf 93       	push	r28
    496a:	df 93       	push	r29
    496c:	00 d0       	rcall	.+0      	; 0x496e <_Z18writeOneEEPROMBytehhh+0x8>
    496e:	00 d0       	rcall	.+0      	; 0x4970 <_Z18writeOneEEPROMBytehhh+0xa>
    4970:	cd b7       	in	r28, 0x3d	; 61
    4972:	de b7       	in	r29, 0x3e	; 62
    4974:	8b 83       	std	Y+3, r24	; 0x03
    4976:	16 2f       	mov	r17, r22
    4978:	4c 83       	std	Y+4, r20	; 0x04
    497a:	19 82       	std	Y+1, r1	; 0x01
    497c:	0e 94 94 24 	call	0x4928	; 0x4928 <_Z18waitForEEPROMReadyv>
    4980:	81 11       	cpse	r24, r1
    4982:	5e c0       	rjmp	.+188    	; 0x4a40 <_Z18writeOneEEPROMBytehhh+0xda>
    4984:	88 e0       	ldi	r24, 0x08	; 8
    4986:	89 83       	std	Y+1, r24	; 0x01
    4988:	21 e0       	ldi	r18, 0x01	; 1
    498a:	ae 01       	movw	r20, r28
    498c:	4f 5f       	subi	r20, 0xFF	; 255
    498e:	5f 4f       	sbci	r21, 0xFF	; 255
    4990:	6f e0       	ldi	r22, 0x0F	; 15
    4992:	84 ea       	ldi	r24, 0xA4	; 164
    4994:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    4998:	81 11       	cpse	r24, r1
    499a:	54 c0       	rjmp	.+168    	; 0x4a44 <_Z18writeOneEEPROMBytehhh+0xde>
    499c:	21 e0       	ldi	r18, 0x01	; 1
    499e:	ae 01       	movw	r20, r28
    49a0:	4e 5f       	subi	r20, 0xFE	; 254
    49a2:	5f 4f       	sbci	r21, 0xFF	; 255
    49a4:	6b 81       	ldd	r22, Y+3	; 0x03
    49a6:	84 ea       	ldi	r24, 0xA4	; 164
    49a8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z15i2c_device_readhhPhh>
    49ac:	91 2f       	mov	r25, r17
    49ae:	90 95       	com	r25
    49b0:	8a 81       	ldd	r24, Y+2	; 0x02
    49b2:	89 23       	and	r24, r25
    49b4:	8a 83       	std	Y+2, r24	; 0x02
    49b6:	9c 81       	ldd	r25, Y+4	; 0x04
    49b8:	19 23       	and	r17, r25
    49ba:	81 2b       	or	r24, r17
    49bc:	8c 83       	std	Y+4, r24	; 0x04
    49be:	21 e0       	ldi	r18, 0x01	; 1
    49c0:	ae 01       	movw	r20, r28
    49c2:	4d 5f       	subi	r20, 0xFD	; 253
    49c4:	5f 4f       	sbci	r21, 0xFF	; 255
    49c6:	65 e2       	ldi	r22, 0x25	; 37
    49c8:	84 ea       	ldi	r24, 0xA4	; 164
    49ca:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    49ce:	81 11       	cpse	r24, r1
    49d0:	3b c0       	rjmp	.+118    	; 0x4a48 <_Z18writeOneEEPROMBytehhh+0xe2>
    49d2:	21 e0       	ldi	r18, 0x01	; 1
    49d4:	ae 01       	movw	r20, r28
    49d6:	4c 5f       	subi	r20, 0xFC	; 252
    49d8:	5f 4f       	sbci	r21, 0xFF	; 255
    49da:	66 e2       	ldi	r22, 0x26	; 38
    49dc:	84 ea       	ldi	r24, 0xA4	; 164
    49de:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    49e2:	81 11       	cpse	r24, r1
    49e4:	33 c0       	rjmp	.+102    	; 0x4a4c <_Z18writeOneEEPROMBytehhh+0xe6>
    49e6:	19 82       	std	Y+1, r1	; 0x01
    49e8:	21 e0       	ldi	r18, 0x01	; 1
    49ea:	ae 01       	movw	r20, r28
    49ec:	4f 5f       	subi	r20, 0xFF	; 255
    49ee:	5f 4f       	sbci	r21, 0xFF	; 255
    49f0:	67 e2       	ldi	r22, 0x27	; 39
    49f2:	84 ea       	ldi	r24, 0xA4	; 164
    49f4:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    49f8:	81 11       	cpse	r24, r1
    49fa:	2a c0       	rjmp	.+84     	; 0x4a50 <_Z18writeOneEEPROMBytehhh+0xea>
    49fc:	0e 94 94 24 	call	0x4928	; 0x4928 <_Z18waitForEEPROMReadyv>
    4a00:	81 11       	cpse	r24, r1
    4a02:	28 c0       	rjmp	.+80     	; 0x4a54 <_Z18writeOneEEPROMBytehhh+0xee>
    4a04:	81 e2       	ldi	r24, 0x21	; 33
    4a06:	89 83       	std	Y+1, r24	; 0x01
    4a08:	21 e0       	ldi	r18, 0x01	; 1
    4a0a:	ae 01       	movw	r20, r28
    4a0c:	4f 5f       	subi	r20, 0xFF	; 255
    4a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a10:	67 e2       	ldi	r22, 0x27	; 39
    4a12:	84 ea       	ldi	r24, 0xA4	; 164
    4a14:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    4a18:	81 11       	cpse	r24, r1
    4a1a:	1e c0       	rjmp	.+60     	; 0x4a58 <_Z18writeOneEEPROMBytehhh+0xf2>
    4a1c:	0e 94 94 24 	call	0x4928	; 0x4928 <_Z18waitForEEPROMReadyv>
    4a20:	81 11       	cpse	r24, r1
    4a22:	1c c0       	rjmp	.+56     	; 0x4a5c <_Z18writeOneEEPROMBytehhh+0xf6>
    4a24:	19 82       	std	Y+1, r1	; 0x01
    4a26:	21 e0       	ldi	r18, 0x01	; 1
    4a28:	ae 01       	movw	r20, r28
    4a2a:	4f 5f       	subi	r20, 0xFF	; 255
    4a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a2e:	6f e0       	ldi	r22, 0x0F	; 15
    4a30:	84 ea       	ldi	r24, 0xA4	; 164
    4a32:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    4a36:	91 e0       	ldi	r25, 0x01	; 1
    4a38:	81 11       	cpse	r24, r1
    4a3a:	11 c0       	rjmp	.+34     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	0f c0       	rjmp	.+30     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a40:	91 e0       	ldi	r25, 0x01	; 1
    4a42:	0d c0       	rjmp	.+26     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a44:	91 e0       	ldi	r25, 0x01	; 1
    4a46:	0b c0       	rjmp	.+22     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a48:	91 e0       	ldi	r25, 0x01	; 1
    4a4a:	09 c0       	rjmp	.+18     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a4c:	91 e0       	ldi	r25, 0x01	; 1
    4a4e:	07 c0       	rjmp	.+14     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a50:	91 e0       	ldi	r25, 0x01	; 1
    4a52:	05 c0       	rjmp	.+10     	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a54:	91 e0       	ldi	r25, 0x01	; 1
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a58:	91 e0       	ldi	r25, 0x01	; 1
    4a5a:	01 c0       	rjmp	.+2      	; 0x4a5e <_Z18writeOneEEPROMBytehhh+0xf8>
    4a5c:	91 e0       	ldi	r25, 0x01	; 1
    4a5e:	89 2f       	mov	r24, r25
    4a60:	0f 90       	pop	r0
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	1f 91       	pop	r17
    4a6e:	08 95       	ret

00004a70 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	00 d0       	rcall	.+0      	; 0x4a76 <_Z13rv3028_1s_sqwv+0x6>
    4a76:	cd b7       	in	r28, 0x3d	; 61
    4a78:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    4a7a:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0, mask;
    4a7c:	1a 82       	std	Y+2, r1	; 0x02
			status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
			waitForEEPROMReady();
			
			if(1)
#else
			if(g_allow_rv3028_eeprom_changes)
    4a7e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <g_allow_rv3028_eeprom_changes>
    4a82:	88 23       	and	r24, r24
    4a84:	c9 f0       	breq	.+50     	; 0x4ab8 <_Z13rv3028_1s_sqwv+0x48>
#endif
			{
				if(waitForEEPROMReady())
    4a86:	0e 94 94 24 	call	0x4928	; 0x4928 <_Z18waitForEEPROMReadyv>
    4a8a:	81 11       	cpse	r24, r1
    4a8c:	4b c0       	rjmp	.+150    	; 0x4b24 <_Z13rv3028_1s_sqwv+0xb4>
				{
					return( 1);
				}

				temp = 0xC5;    /* Enable 1Hz Output */
    4a8e:	85 ec       	ldi	r24, 0xC5	; 197
    4a90:	8a 83       	std	Y+2, r24	; 0x02
				mask = 0xFF;    /* 11111111 */
				if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
    4a92:	45 ec       	ldi	r20, 0xC5	; 197
    4a94:	6f ef       	ldi	r22, 0xFF	; 255
    4a96:	85 e3       	ldi	r24, 0x35	; 53
    4a98:	0e 94 b3 24 	call	0x4966	; 0x4966 <_Z18writeOneEEPROMBytehhh>
    4a9c:	81 11       	cpse	r24, r1
    4a9e:	44 c0       	rjmp	.+136    	; 0x4b28 <_Z13rv3028_1s_sqwv+0xb8>
				{
					return( 1);
				}

				temp = 0x04;    /* Enable direct switching mode */
    4aa0:	84 e0       	ldi	r24, 0x04	; 4
    4aa2:	8a 83       	std	Y+2, r24	; 0x02
				mask = 0x06;    /* 00001100 */
				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
    4aa4:	44 e0       	ldi	r20, 0x04	; 4
    4aa6:	66 e0       	ldi	r22, 0x06	; 6
    4aa8:	87 e3       	ldi	r24, 0x37	; 55
    4aaa:	0e 94 b3 24 	call	0x4966	; 0x4966 <_Z18writeOneEEPROMBytehhh>
    4aae:	81 11       	cpse	r24, r1
    4ab0:	3d c0       	rjmp	.+122    	; 0x4b2c <_Z13rv3028_1s_sqwv+0xbc>
 *				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
 *				{
 *					return( 1);
 *				} */

				g_allow_rv3028_eeprom_changes = FALSE;
    4ab2:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <g_allow_rv3028_eeprom_changes>
    4ab6:	1a c0       	rjmp	.+52     	; 0x4aec <_Z13rv3028_1s_sqwv+0x7c>
			}
			else    /* Read values from EEPROM - happens automatically for POR but not debugger reset */
			{
				temp = 0x00;
				status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4ab8:	21 e0       	ldi	r18, 0x01	; 1
    4aba:	ae 01       	movw	r20, r28
    4abc:	4e 5f       	subi	r20, 0xFE	; 254
    4abe:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac0:	67 e2       	ldi	r22, 0x27	; 39
    4ac2:	84 ea       	ldi	r24, 0xA4	; 164
    4ac4:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    4ac8:	89 83       	std	Y+1, r24	; 0x01
				waitForEEPROMReady();
    4aca:	0e 94 94 24 	call	0x4928	; 0x4928 <_Z18waitForEEPROMReadyv>
				temp = 0x12;    /* Refresh RAM from EEPROM */
    4ace:	82 e1       	ldi	r24, 0x12	; 18
    4ad0:	8a 83       	std	Y+2, r24	; 0x02
				status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4ad2:	21 e0       	ldi	r18, 0x01	; 1
    4ad4:	ae 01       	movw	r20, r28
    4ad6:	4e 5f       	subi	r20, 0xFE	; 254
    4ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    4ada:	67 e2       	ldi	r22, 0x27	; 39
    4adc:	84 ea       	ldi	r24, 0xA4	; 164
    4ade:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
    4ae2:	99 81       	ldd	r25, Y+1	; 0x01
    4ae4:	89 2b       	or	r24, r25
    4ae6:	89 83       	std	Y+1, r24	; 0x01
				waitForEEPROMReady();
    4ae8:	0e 94 94 24 	call	0x4928	; 0x4928 <_Z18waitForEEPROMReadyv>
			
			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	81 11       	cpse	r24, r1
    4af0:	0c c0       	rjmp	.+24     	; 0x4b0a <_Z13rv3028_1s_sqwv+0x9a>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    4af2:	21 e0       	ldi	r18, 0x01	; 1
    4af4:	ae 01       	movw	r20, r28
    4af6:	4f 5f       	subi	r20, 0xFF	; 255
    4af8:	5f 4f       	sbci	r21, 0xFF	; 255
    4afa:	6e e0       	ldi	r22, 0x0E	; 14
    4afc:	84 ea       	ldi	r24, 0xA4	; 164
    4afe:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	8f 76       	andi	r24, 0x6F	; 111
    4b06:	89 83       	std	Y+1, r24	; 0x01
    4b08:	02 c0       	rjmp	.+4      	; 0x4b0e <_Z13rv3028_1s_sqwv+0x9e>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    4b0a:	80 e8       	ldi	r24, 0x80	; 128
    4b0c:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    4b0e:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    4b10:	21 e0       	ldi	r18, 0x01	; 1
    4b12:	ae 01       	movw	r20, r28
    4b14:	4e 5f       	subi	r20, 0xFE	; 254
    4b16:	5f 4f       	sbci	r21, 0xFF	; 255
    4b18:	6e e0       	ldi	r22, 0x0E	; 14
    4b1a:	84 ea       	ldi	r24, 0xA4	; 164
    4b1c:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>

			return(status);
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	05 c0       	rjmp	.+10     	; 0x4b2e <_Z13rv3028_1s_sqwv+0xbe>
			if(g_allow_rv3028_eeprom_changes)
#endif
			{
				if(waitForEEPROMReady())
				{
					return( 1);
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	03 c0       	rjmp	.+6      	; 0x4b2e <_Z13rv3028_1s_sqwv+0xbe>

				temp = 0xC5;    /* Enable 1Hz Output */
				mask = 0xFF;    /* 11111111 */
				if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
				{
					return( 1);
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <_Z13rv3028_1s_sqwv+0xbe>

				temp = 0x04;    /* Enable direct switching mode */
				mask = 0x06;    /* 00001100 */
				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
				{
					return( 1);
    4b2c:	81 e0       	ldi	r24, 0x01	; 1

			temp = 0x00;    /* Clear status flags */
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);

			return(status);
		}
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	df 91       	pop	r29
    4b34:	cf 91       	pop	r28
    4b36:	08 95       	ret

00004b38 <_Z16rv3028_32kHz_sqwv>:


#endif  /* INIT_EEPROM_ONLY */

	void rv3028_32kHz_sqw(void)
	{
    4b38:	cf 93       	push	r28
    4b3a:	df 93       	push	r29
    4b3c:	1f 92       	push	r1
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
		/* Just set RAM value */
		uint8_t byte = 0xC0;    /* FD = 32.768 kHz */
    4b42:	80 ec       	ldi	r24, 0xC0	; 192
    4b44:	89 83       	std	Y+1, r24	; 0x01

		i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_CLKOUT, &byte, 1);
    4b46:	21 e0       	ldi	r18, 0x01	; 1
    4b48:	ae 01       	movw	r20, r28
    4b4a:	4f 5f       	subi	r20, 0xFF	; 255
    4b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b4e:	65 e3       	ldi	r22, 0x35	; 53
    4b50:	84 ea       	ldi	r24, 0xA4	; 164
    4b52:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z16i2c_device_writehhPhh>
	}
    4b56:	0f 90       	pop	r0
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	08 95       	ret

00004b5e <__subsf3>:
    4b5e:	50 58       	subi	r21, 0x80	; 128

00004b60 <__addsf3>:
    4b60:	bb 27       	eor	r27, r27
    4b62:	aa 27       	eor	r26, r26
    4b64:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__addsf3x>
    4b68:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <__fp_round>
    4b6c:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__fp_pscA>
    4b70:	38 f0       	brcs	.+14     	; 0x4b80 <__addsf3+0x20>
    4b72:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__fp_pscB>
    4b76:	20 f0       	brcs	.+8      	; 0x4b80 <__addsf3+0x20>
    4b78:	39 f4       	brne	.+14     	; 0x4b88 <__addsf3+0x28>
    4b7a:	9f 3f       	cpi	r25, 0xFF	; 255
    4b7c:	19 f4       	brne	.+6      	; 0x4b84 <__addsf3+0x24>
    4b7e:	26 f4       	brtc	.+8      	; 0x4b88 <__addsf3+0x28>
    4b80:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__fp_nan>
    4b84:	0e f4       	brtc	.+2      	; 0x4b88 <__addsf3+0x28>
    4b86:	e0 95       	com	r30
    4b88:	e7 fb       	bst	r30, 7
    4b8a:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__fp_inf>

00004b8e <__addsf3x>:
    4b8e:	e9 2f       	mov	r30, r25
    4b90:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <__fp_split3>
    4b94:	58 f3       	brcs	.-42     	; 0x4b6c <__addsf3+0xc>
    4b96:	ba 17       	cp	r27, r26
    4b98:	62 07       	cpc	r22, r18
    4b9a:	73 07       	cpc	r23, r19
    4b9c:	84 07       	cpc	r24, r20
    4b9e:	95 07       	cpc	r25, r21
    4ba0:	20 f0       	brcs	.+8      	; 0x4baa <__addsf3x+0x1c>
    4ba2:	79 f4       	brne	.+30     	; 0x4bc2 <__addsf3x+0x34>
    4ba4:	a6 f5       	brtc	.+104    	; 0x4c0e <__addsf3x+0x80>
    4ba6:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__fp_zero>
    4baa:	0e f4       	brtc	.+2      	; 0x4bae <__addsf3x+0x20>
    4bac:	e0 95       	com	r30
    4bae:	0b 2e       	mov	r0, r27
    4bb0:	ba 2f       	mov	r27, r26
    4bb2:	a0 2d       	mov	r26, r0
    4bb4:	0b 01       	movw	r0, r22
    4bb6:	b9 01       	movw	r22, r18
    4bb8:	90 01       	movw	r18, r0
    4bba:	0c 01       	movw	r0, r24
    4bbc:	ca 01       	movw	r24, r20
    4bbe:	a0 01       	movw	r20, r0
    4bc0:	11 24       	eor	r1, r1
    4bc2:	ff 27       	eor	r31, r31
    4bc4:	59 1b       	sub	r21, r25
    4bc6:	99 f0       	breq	.+38     	; 0x4bee <__addsf3x+0x60>
    4bc8:	59 3f       	cpi	r21, 0xF9	; 249
    4bca:	50 f4       	brcc	.+20     	; 0x4be0 <__addsf3x+0x52>
    4bcc:	50 3e       	cpi	r21, 0xE0	; 224
    4bce:	68 f1       	brcs	.+90     	; 0x4c2a <__addsf3x+0x9c>
    4bd0:	1a 16       	cp	r1, r26
    4bd2:	f0 40       	sbci	r31, 0x00	; 0
    4bd4:	a2 2f       	mov	r26, r18
    4bd6:	23 2f       	mov	r18, r19
    4bd8:	34 2f       	mov	r19, r20
    4bda:	44 27       	eor	r20, r20
    4bdc:	58 5f       	subi	r21, 0xF8	; 248
    4bde:	f3 cf       	rjmp	.-26     	; 0x4bc6 <__addsf3x+0x38>
    4be0:	46 95       	lsr	r20
    4be2:	37 95       	ror	r19
    4be4:	27 95       	ror	r18
    4be6:	a7 95       	ror	r26
    4be8:	f0 40       	sbci	r31, 0x00	; 0
    4bea:	53 95       	inc	r21
    4bec:	c9 f7       	brne	.-14     	; 0x4be0 <__addsf3x+0x52>
    4bee:	7e f4       	brtc	.+30     	; 0x4c0e <__addsf3x+0x80>
    4bf0:	1f 16       	cp	r1, r31
    4bf2:	ba 0b       	sbc	r27, r26
    4bf4:	62 0b       	sbc	r22, r18
    4bf6:	73 0b       	sbc	r23, r19
    4bf8:	84 0b       	sbc	r24, r20
    4bfa:	ba f0       	brmi	.+46     	; 0x4c2a <__addsf3x+0x9c>
    4bfc:	91 50       	subi	r25, 0x01	; 1
    4bfe:	a1 f0       	breq	.+40     	; 0x4c28 <__addsf3x+0x9a>
    4c00:	ff 0f       	add	r31, r31
    4c02:	bb 1f       	adc	r27, r27
    4c04:	66 1f       	adc	r22, r22
    4c06:	77 1f       	adc	r23, r23
    4c08:	88 1f       	adc	r24, r24
    4c0a:	c2 f7       	brpl	.-16     	; 0x4bfc <__addsf3x+0x6e>
    4c0c:	0e c0       	rjmp	.+28     	; 0x4c2a <__addsf3x+0x9c>
    4c0e:	ba 0f       	add	r27, r26
    4c10:	62 1f       	adc	r22, r18
    4c12:	73 1f       	adc	r23, r19
    4c14:	84 1f       	adc	r24, r20
    4c16:	48 f4       	brcc	.+18     	; 0x4c2a <__addsf3x+0x9c>
    4c18:	87 95       	ror	r24
    4c1a:	77 95       	ror	r23
    4c1c:	67 95       	ror	r22
    4c1e:	b7 95       	ror	r27
    4c20:	f7 95       	ror	r31
    4c22:	9e 3f       	cpi	r25, 0xFE	; 254
    4c24:	08 f0       	brcs	.+2      	; 0x4c28 <__addsf3x+0x9a>
    4c26:	b0 cf       	rjmp	.-160    	; 0x4b88 <__addsf3+0x28>
    4c28:	93 95       	inc	r25
    4c2a:	88 0f       	add	r24, r24
    4c2c:	08 f0       	brcs	.+2      	; 0x4c30 <__addsf3x+0xa2>
    4c2e:	99 27       	eor	r25, r25
    4c30:	ee 0f       	add	r30, r30
    4c32:	97 95       	ror	r25
    4c34:	87 95       	ror	r24
    4c36:	08 95       	ret

00004c38 <__cmpsf2>:
    4c38:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__fp_cmp>
    4c3c:	08 f4       	brcc	.+2      	; 0x4c40 <__cmpsf2+0x8>
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	08 95       	ret

00004c42 <cos>:
    4c42:	0e 94 48 27 	call	0x4e90	; 0x4e90 <__fp_rempio2>
    4c46:	e3 95       	inc	r30
    4c48:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <__fp_sinus>

00004c4c <__divsf3>:
    4c4c:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <__divsf3x>
    4c50:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <__fp_round>
    4c54:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__fp_pscB>
    4c58:	58 f0       	brcs	.+22     	; 0x4c70 <__divsf3+0x24>
    4c5a:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__fp_pscA>
    4c5e:	40 f0       	brcs	.+16     	; 0x4c70 <__divsf3+0x24>
    4c60:	29 f4       	brne	.+10     	; 0x4c6c <__divsf3+0x20>
    4c62:	5f 3f       	cpi	r21, 0xFF	; 255
    4c64:	29 f0       	breq	.+10     	; 0x4c70 <__divsf3+0x24>
    4c66:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__fp_inf>
    4c6a:	51 11       	cpse	r21, r1
    4c6c:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__fp_szero>
    4c70:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__fp_nan>

00004c74 <__divsf3x>:
    4c74:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <__fp_split3>
    4c78:	68 f3       	brcs	.-38     	; 0x4c54 <__divsf3+0x8>

00004c7a <__divsf3_pse>:
    4c7a:	99 23       	and	r25, r25
    4c7c:	b1 f3       	breq	.-20     	; 0x4c6a <__divsf3+0x1e>
    4c7e:	55 23       	and	r21, r21
    4c80:	91 f3       	breq	.-28     	; 0x4c66 <__divsf3+0x1a>
    4c82:	95 1b       	sub	r25, r21
    4c84:	55 0b       	sbc	r21, r21
    4c86:	bb 27       	eor	r27, r27
    4c88:	aa 27       	eor	r26, r26
    4c8a:	62 17       	cp	r22, r18
    4c8c:	73 07       	cpc	r23, r19
    4c8e:	84 07       	cpc	r24, r20
    4c90:	38 f0       	brcs	.+14     	; 0x4ca0 <__divsf3_pse+0x26>
    4c92:	9f 5f       	subi	r25, 0xFF	; 255
    4c94:	5f 4f       	sbci	r21, 0xFF	; 255
    4c96:	22 0f       	add	r18, r18
    4c98:	33 1f       	adc	r19, r19
    4c9a:	44 1f       	adc	r20, r20
    4c9c:	aa 1f       	adc	r26, r26
    4c9e:	a9 f3       	breq	.-22     	; 0x4c8a <__divsf3_pse+0x10>
    4ca0:	35 d0       	rcall	.+106    	; 0x4d0c <__divsf3_pse+0x92>
    4ca2:	0e 2e       	mov	r0, r30
    4ca4:	3a f0       	brmi	.+14     	; 0x4cb4 <__divsf3_pse+0x3a>
    4ca6:	e0 e8       	ldi	r30, 0x80	; 128
    4ca8:	32 d0       	rcall	.+100    	; 0x4d0e <__divsf3_pse+0x94>
    4caa:	91 50       	subi	r25, 0x01	; 1
    4cac:	50 40       	sbci	r21, 0x00	; 0
    4cae:	e6 95       	lsr	r30
    4cb0:	00 1c       	adc	r0, r0
    4cb2:	ca f7       	brpl	.-14     	; 0x4ca6 <__divsf3_pse+0x2c>
    4cb4:	2b d0       	rcall	.+86     	; 0x4d0c <__divsf3_pse+0x92>
    4cb6:	fe 2f       	mov	r31, r30
    4cb8:	29 d0       	rcall	.+82     	; 0x4d0c <__divsf3_pse+0x92>
    4cba:	66 0f       	add	r22, r22
    4cbc:	77 1f       	adc	r23, r23
    4cbe:	88 1f       	adc	r24, r24
    4cc0:	bb 1f       	adc	r27, r27
    4cc2:	26 17       	cp	r18, r22
    4cc4:	37 07       	cpc	r19, r23
    4cc6:	48 07       	cpc	r20, r24
    4cc8:	ab 07       	cpc	r26, r27
    4cca:	b0 e8       	ldi	r27, 0x80	; 128
    4ccc:	09 f0       	breq	.+2      	; 0x4cd0 <__divsf3_pse+0x56>
    4cce:	bb 0b       	sbc	r27, r27
    4cd0:	80 2d       	mov	r24, r0
    4cd2:	bf 01       	movw	r22, r30
    4cd4:	ff 27       	eor	r31, r31
    4cd6:	93 58       	subi	r25, 0x83	; 131
    4cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cda:	3a f0       	brmi	.+14     	; 0x4cea <__divsf3_pse+0x70>
    4cdc:	9e 3f       	cpi	r25, 0xFE	; 254
    4cde:	51 05       	cpc	r21, r1
    4ce0:	78 f0       	brcs	.+30     	; 0x4d00 <__divsf3_pse+0x86>
    4ce2:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__fp_inf>
    4ce6:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__fp_szero>
    4cea:	5f 3f       	cpi	r21, 0xFF	; 255
    4cec:	e4 f3       	brlt	.-8      	; 0x4ce6 <__divsf3_pse+0x6c>
    4cee:	98 3e       	cpi	r25, 0xE8	; 232
    4cf0:	d4 f3       	brlt	.-12     	; 0x4ce6 <__divsf3_pse+0x6c>
    4cf2:	86 95       	lsr	r24
    4cf4:	77 95       	ror	r23
    4cf6:	67 95       	ror	r22
    4cf8:	b7 95       	ror	r27
    4cfa:	f7 95       	ror	r31
    4cfc:	9f 5f       	subi	r25, 0xFF	; 255
    4cfe:	c9 f7       	brne	.-14     	; 0x4cf2 <__divsf3_pse+0x78>
    4d00:	88 0f       	add	r24, r24
    4d02:	91 1d       	adc	r25, r1
    4d04:	96 95       	lsr	r25
    4d06:	87 95       	ror	r24
    4d08:	97 f9       	bld	r25, 7
    4d0a:	08 95       	ret
    4d0c:	e1 e0       	ldi	r30, 0x01	; 1
    4d0e:	66 0f       	add	r22, r22
    4d10:	77 1f       	adc	r23, r23
    4d12:	88 1f       	adc	r24, r24
    4d14:	bb 1f       	adc	r27, r27
    4d16:	62 17       	cp	r22, r18
    4d18:	73 07       	cpc	r23, r19
    4d1a:	84 07       	cpc	r24, r20
    4d1c:	ba 07       	cpc	r27, r26
    4d1e:	20 f0       	brcs	.+8      	; 0x4d28 <__divsf3_pse+0xae>
    4d20:	62 1b       	sub	r22, r18
    4d22:	73 0b       	sbc	r23, r19
    4d24:	84 0b       	sbc	r24, r20
    4d26:	ba 0b       	sbc	r27, r26
    4d28:	ee 1f       	adc	r30, r30
    4d2a:	88 f7       	brcc	.-30     	; 0x4d0e <__divsf3_pse+0x94>
    4d2c:	e0 95       	com	r30
    4d2e:	08 95       	ret

00004d30 <__fixsfsi>:
    4d30:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <__fixunssfsi>
    4d34:	68 94       	set
    4d36:	b1 11       	cpse	r27, r1
    4d38:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__fp_szero>
    4d3c:	08 95       	ret

00004d3e <__fixunssfsi>:
    4d3e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__fp_splitA>
    4d42:	88 f0       	brcs	.+34     	; 0x4d66 <__fixunssfsi+0x28>
    4d44:	9f 57       	subi	r25, 0x7F	; 127
    4d46:	98 f0       	brcs	.+38     	; 0x4d6e <__fixunssfsi+0x30>
    4d48:	b9 2f       	mov	r27, r25
    4d4a:	99 27       	eor	r25, r25
    4d4c:	b7 51       	subi	r27, 0x17	; 23
    4d4e:	b0 f0       	brcs	.+44     	; 0x4d7c <__fixunssfsi+0x3e>
    4d50:	e1 f0       	breq	.+56     	; 0x4d8a <__fixunssfsi+0x4c>
    4d52:	66 0f       	add	r22, r22
    4d54:	77 1f       	adc	r23, r23
    4d56:	88 1f       	adc	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	1a f0       	brmi	.+6      	; 0x4d62 <__fixunssfsi+0x24>
    4d5c:	ba 95       	dec	r27
    4d5e:	c9 f7       	brne	.-14     	; 0x4d52 <__fixunssfsi+0x14>
    4d60:	14 c0       	rjmp	.+40     	; 0x4d8a <__fixunssfsi+0x4c>
    4d62:	b1 30       	cpi	r27, 0x01	; 1
    4d64:	91 f0       	breq	.+36     	; 0x4d8a <__fixunssfsi+0x4c>
    4d66:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__fp_zero>
    4d6a:	b1 e0       	ldi	r27, 0x01	; 1
    4d6c:	08 95       	ret
    4d6e:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__fp_zero>
    4d72:	67 2f       	mov	r22, r23
    4d74:	78 2f       	mov	r23, r24
    4d76:	88 27       	eor	r24, r24
    4d78:	b8 5f       	subi	r27, 0xF8	; 248
    4d7a:	39 f0       	breq	.+14     	; 0x4d8a <__fixunssfsi+0x4c>
    4d7c:	b9 3f       	cpi	r27, 0xF9	; 249
    4d7e:	cc f3       	brlt	.-14     	; 0x4d72 <__fixunssfsi+0x34>
    4d80:	86 95       	lsr	r24
    4d82:	77 95       	ror	r23
    4d84:	67 95       	ror	r22
    4d86:	b3 95       	inc	r27
    4d88:	d9 f7       	brne	.-10     	; 0x4d80 <__fixunssfsi+0x42>
    4d8a:	3e f4       	brtc	.+14     	; 0x4d9a <__fixunssfsi+0x5c>
    4d8c:	90 95       	com	r25
    4d8e:	80 95       	com	r24
    4d90:	70 95       	com	r23
    4d92:	61 95       	neg	r22
    4d94:	7f 4f       	sbci	r23, 0xFF	; 255
    4d96:	8f 4f       	sbci	r24, 0xFF	; 255
    4d98:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9a:	08 95       	ret

00004d9c <__floatunsisf>:
    4d9c:	e8 94       	clt
    4d9e:	09 c0       	rjmp	.+18     	; 0x4db2 <__floatsisf+0x12>

00004da0 <__floatsisf>:
    4da0:	97 fb       	bst	r25, 7
    4da2:	3e f4       	brtc	.+14     	; 0x4db2 <__floatsisf+0x12>
    4da4:	90 95       	com	r25
    4da6:	80 95       	com	r24
    4da8:	70 95       	com	r23
    4daa:	61 95       	neg	r22
    4dac:	7f 4f       	sbci	r23, 0xFF	; 255
    4dae:	8f 4f       	sbci	r24, 0xFF	; 255
    4db0:	9f 4f       	sbci	r25, 0xFF	; 255
    4db2:	99 23       	and	r25, r25
    4db4:	a9 f0       	breq	.+42     	; 0x4de0 <__floatsisf+0x40>
    4db6:	f9 2f       	mov	r31, r25
    4db8:	96 e9       	ldi	r25, 0x96	; 150
    4dba:	bb 27       	eor	r27, r27
    4dbc:	93 95       	inc	r25
    4dbe:	f6 95       	lsr	r31
    4dc0:	87 95       	ror	r24
    4dc2:	77 95       	ror	r23
    4dc4:	67 95       	ror	r22
    4dc6:	b7 95       	ror	r27
    4dc8:	f1 11       	cpse	r31, r1
    4dca:	f8 cf       	rjmp	.-16     	; 0x4dbc <__floatsisf+0x1c>
    4dcc:	fa f4       	brpl	.+62     	; 0x4e0c <__floatsisf+0x6c>
    4dce:	bb 0f       	add	r27, r27
    4dd0:	11 f4       	brne	.+4      	; 0x4dd6 <__floatsisf+0x36>
    4dd2:	60 ff       	sbrs	r22, 0
    4dd4:	1b c0       	rjmp	.+54     	; 0x4e0c <__floatsisf+0x6c>
    4dd6:	6f 5f       	subi	r22, 0xFF	; 255
    4dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dda:	8f 4f       	sbci	r24, 0xFF	; 255
    4ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dde:	16 c0       	rjmp	.+44     	; 0x4e0c <__floatsisf+0x6c>
    4de0:	88 23       	and	r24, r24
    4de2:	11 f0       	breq	.+4      	; 0x4de8 <__floatsisf+0x48>
    4de4:	96 e9       	ldi	r25, 0x96	; 150
    4de6:	11 c0       	rjmp	.+34     	; 0x4e0a <__floatsisf+0x6a>
    4de8:	77 23       	and	r23, r23
    4dea:	21 f0       	breq	.+8      	; 0x4df4 <__floatsisf+0x54>
    4dec:	9e e8       	ldi	r25, 0x8E	; 142
    4dee:	87 2f       	mov	r24, r23
    4df0:	76 2f       	mov	r23, r22
    4df2:	05 c0       	rjmp	.+10     	; 0x4dfe <__floatsisf+0x5e>
    4df4:	66 23       	and	r22, r22
    4df6:	71 f0       	breq	.+28     	; 0x4e14 <__floatsisf+0x74>
    4df8:	96 e8       	ldi	r25, 0x86	; 134
    4dfa:	86 2f       	mov	r24, r22
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	60 e0       	ldi	r22, 0x00	; 0
    4e00:	2a f0       	brmi	.+10     	; 0x4e0c <__floatsisf+0x6c>
    4e02:	9a 95       	dec	r25
    4e04:	66 0f       	add	r22, r22
    4e06:	77 1f       	adc	r23, r23
    4e08:	88 1f       	adc	r24, r24
    4e0a:	da f7       	brpl	.-10     	; 0x4e02 <__floatsisf+0x62>
    4e0c:	88 0f       	add	r24, r24
    4e0e:	96 95       	lsr	r25
    4e10:	87 95       	ror	r24
    4e12:	97 f9       	bld	r25, 7
    4e14:	08 95       	ret

00004e16 <__fp_cmp>:
    4e16:	99 0f       	add	r25, r25
    4e18:	00 08       	sbc	r0, r0
    4e1a:	55 0f       	add	r21, r21
    4e1c:	aa 0b       	sbc	r26, r26
    4e1e:	e0 e8       	ldi	r30, 0x80	; 128
    4e20:	fe ef       	ldi	r31, 0xFE	; 254
    4e22:	16 16       	cp	r1, r22
    4e24:	17 06       	cpc	r1, r23
    4e26:	e8 07       	cpc	r30, r24
    4e28:	f9 07       	cpc	r31, r25
    4e2a:	c0 f0       	brcs	.+48     	; 0x4e5c <__fp_cmp+0x46>
    4e2c:	12 16       	cp	r1, r18
    4e2e:	13 06       	cpc	r1, r19
    4e30:	e4 07       	cpc	r30, r20
    4e32:	f5 07       	cpc	r31, r21
    4e34:	98 f0       	brcs	.+38     	; 0x4e5c <__fp_cmp+0x46>
    4e36:	62 1b       	sub	r22, r18
    4e38:	73 0b       	sbc	r23, r19
    4e3a:	84 0b       	sbc	r24, r20
    4e3c:	95 0b       	sbc	r25, r21
    4e3e:	39 f4       	brne	.+14     	; 0x4e4e <__fp_cmp+0x38>
    4e40:	0a 26       	eor	r0, r26
    4e42:	61 f0       	breq	.+24     	; 0x4e5c <__fp_cmp+0x46>
    4e44:	23 2b       	or	r18, r19
    4e46:	24 2b       	or	r18, r20
    4e48:	25 2b       	or	r18, r21
    4e4a:	21 f4       	brne	.+8      	; 0x4e54 <__fp_cmp+0x3e>
    4e4c:	08 95       	ret
    4e4e:	0a 26       	eor	r0, r26
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <__fp_cmp+0x3e>
    4e52:	a1 40       	sbci	r26, 0x01	; 1
    4e54:	a6 95       	lsr	r26
    4e56:	8f ef       	ldi	r24, 0xFF	; 255
    4e58:	81 1d       	adc	r24, r1
    4e5a:	81 1d       	adc	r24, r1
    4e5c:	08 95       	ret

00004e5e <__fp_inf>:
    4e5e:	97 f9       	bld	r25, 7
    4e60:	9f 67       	ori	r25, 0x7F	; 127
    4e62:	80 e8       	ldi	r24, 0x80	; 128
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	60 e0       	ldi	r22, 0x00	; 0
    4e68:	08 95       	ret

00004e6a <__fp_nan>:
    4e6a:	9f ef       	ldi	r25, 0xFF	; 255
    4e6c:	80 ec       	ldi	r24, 0xC0	; 192
    4e6e:	08 95       	ret

00004e70 <__fp_pscA>:
    4e70:	00 24       	eor	r0, r0
    4e72:	0a 94       	dec	r0
    4e74:	16 16       	cp	r1, r22
    4e76:	17 06       	cpc	r1, r23
    4e78:	18 06       	cpc	r1, r24
    4e7a:	09 06       	cpc	r0, r25
    4e7c:	08 95       	ret

00004e7e <__fp_pscB>:
    4e7e:	00 24       	eor	r0, r0
    4e80:	0a 94       	dec	r0
    4e82:	12 16       	cp	r1, r18
    4e84:	13 06       	cpc	r1, r19
    4e86:	14 06       	cpc	r1, r20
    4e88:	05 06       	cpc	r0, r21
    4e8a:	08 95       	ret
    4e8c:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__fp_nan>

00004e90 <__fp_rempio2>:
    4e90:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__fp_splitA>
    4e94:	d8 f3       	brcs	.-10     	; 0x4e8c <__fp_pscB+0xe>
    4e96:	e8 94       	clt
    4e98:	e0 e0       	ldi	r30, 0x00	; 0
    4e9a:	bb 27       	eor	r27, r27
    4e9c:	9f 57       	subi	r25, 0x7F	; 127
    4e9e:	f0 f0       	brcs	.+60     	; 0x4edc <__fp_rempio2+0x4c>
    4ea0:	2a ed       	ldi	r18, 0xDA	; 218
    4ea2:	3f e0       	ldi	r19, 0x0F	; 15
    4ea4:	49 ec       	ldi	r20, 0xC9	; 201
    4ea6:	06 c0       	rjmp	.+12     	; 0x4eb4 <__fp_rempio2+0x24>
    4ea8:	ee 0f       	add	r30, r30
    4eaa:	bb 0f       	add	r27, r27
    4eac:	66 1f       	adc	r22, r22
    4eae:	77 1f       	adc	r23, r23
    4eb0:	88 1f       	adc	r24, r24
    4eb2:	28 f0       	brcs	.+10     	; 0x4ebe <__fp_rempio2+0x2e>
    4eb4:	b2 3a       	cpi	r27, 0xA2	; 162
    4eb6:	62 07       	cpc	r22, r18
    4eb8:	73 07       	cpc	r23, r19
    4eba:	84 07       	cpc	r24, r20
    4ebc:	28 f0       	brcs	.+10     	; 0x4ec8 <__fp_rempio2+0x38>
    4ebe:	b2 5a       	subi	r27, 0xA2	; 162
    4ec0:	62 0b       	sbc	r22, r18
    4ec2:	73 0b       	sbc	r23, r19
    4ec4:	84 0b       	sbc	r24, r20
    4ec6:	e3 95       	inc	r30
    4ec8:	9a 95       	dec	r25
    4eca:	72 f7       	brpl	.-36     	; 0x4ea8 <__fp_rempio2+0x18>
    4ecc:	80 38       	cpi	r24, 0x80	; 128
    4ece:	30 f4       	brcc	.+12     	; 0x4edc <__fp_rempio2+0x4c>
    4ed0:	9a 95       	dec	r25
    4ed2:	bb 0f       	add	r27, r27
    4ed4:	66 1f       	adc	r22, r22
    4ed6:	77 1f       	adc	r23, r23
    4ed8:	88 1f       	adc	r24, r24
    4eda:	d2 f7       	brpl	.-12     	; 0x4ed0 <__fp_rempio2+0x40>
    4edc:	90 48       	sbci	r25, 0x80	; 128
    4ede:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__fp_mpack_finite>

00004ee2 <__fp_round>:
    4ee2:	09 2e       	mov	r0, r25
    4ee4:	03 94       	inc	r0
    4ee6:	00 0c       	add	r0, r0
    4ee8:	11 f4       	brne	.+4      	; 0x4eee <__fp_round+0xc>
    4eea:	88 23       	and	r24, r24
    4eec:	52 f0       	brmi	.+20     	; 0x4f02 <__fp_round+0x20>
    4eee:	bb 0f       	add	r27, r27
    4ef0:	40 f4       	brcc	.+16     	; 0x4f02 <__fp_round+0x20>
    4ef2:	bf 2b       	or	r27, r31
    4ef4:	11 f4       	brne	.+4      	; 0x4efa <__fp_round+0x18>
    4ef6:	60 ff       	sbrs	r22, 0
    4ef8:	04 c0       	rjmp	.+8      	; 0x4f02 <__fp_round+0x20>
    4efa:	6f 5f       	subi	r22, 0xFF	; 255
    4efc:	7f 4f       	sbci	r23, 0xFF	; 255
    4efe:	8f 4f       	sbci	r24, 0xFF	; 255
    4f00:	9f 4f       	sbci	r25, 0xFF	; 255
    4f02:	08 95       	ret

00004f04 <__fp_sinus>:
    4f04:	ef 93       	push	r30
    4f06:	e0 ff       	sbrs	r30, 0
    4f08:	07 c0       	rjmp	.+14     	; 0x4f18 <__fp_sinus+0x14>
    4f0a:	a2 ea       	ldi	r26, 0xA2	; 162
    4f0c:	2a ed       	ldi	r18, 0xDA	; 218
    4f0e:	3f e0       	ldi	r19, 0x0F	; 15
    4f10:	49 ec       	ldi	r20, 0xC9	; 201
    4f12:	5f eb       	ldi	r21, 0xBF	; 191
    4f14:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__addsf3x>
    4f18:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <__fp_round>
    4f1c:	0f 90       	pop	r0
    4f1e:	03 94       	inc	r0
    4f20:	01 fc       	sbrc	r0, 1
    4f22:	90 58       	subi	r25, 0x80	; 128
    4f24:	ea ec       	ldi	r30, 0xCA	; 202
    4f26:	f1 e0       	ldi	r31, 0x01	; 1
    4f28:	0c 94 7e 28 	jmp	0x50fc	; 0x50fc <__fp_powsodd>

00004f2c <__fp_split3>:
    4f2c:	57 fd       	sbrc	r21, 7
    4f2e:	90 58       	subi	r25, 0x80	; 128
    4f30:	44 0f       	add	r20, r20
    4f32:	55 1f       	adc	r21, r21
    4f34:	59 f0       	breq	.+22     	; 0x4f4c <__fp_splitA+0x10>
    4f36:	5f 3f       	cpi	r21, 0xFF	; 255
    4f38:	71 f0       	breq	.+28     	; 0x4f56 <__fp_splitA+0x1a>
    4f3a:	47 95       	ror	r20

00004f3c <__fp_splitA>:
    4f3c:	88 0f       	add	r24, r24
    4f3e:	97 fb       	bst	r25, 7
    4f40:	99 1f       	adc	r25, r25
    4f42:	61 f0       	breq	.+24     	; 0x4f5c <__fp_splitA+0x20>
    4f44:	9f 3f       	cpi	r25, 0xFF	; 255
    4f46:	79 f0       	breq	.+30     	; 0x4f66 <__fp_splitA+0x2a>
    4f48:	87 95       	ror	r24
    4f4a:	08 95       	ret
    4f4c:	12 16       	cp	r1, r18
    4f4e:	13 06       	cpc	r1, r19
    4f50:	14 06       	cpc	r1, r20
    4f52:	55 1f       	adc	r21, r21
    4f54:	f2 cf       	rjmp	.-28     	; 0x4f3a <__fp_split3+0xe>
    4f56:	46 95       	lsr	r20
    4f58:	f1 df       	rcall	.-30     	; 0x4f3c <__fp_splitA>
    4f5a:	08 c0       	rjmp	.+16     	; 0x4f6c <__fp_splitA+0x30>
    4f5c:	16 16       	cp	r1, r22
    4f5e:	17 06       	cpc	r1, r23
    4f60:	18 06       	cpc	r1, r24
    4f62:	99 1f       	adc	r25, r25
    4f64:	f1 cf       	rjmp	.-30     	; 0x4f48 <__fp_splitA+0xc>
    4f66:	86 95       	lsr	r24
    4f68:	71 05       	cpc	r23, r1
    4f6a:	61 05       	cpc	r22, r1
    4f6c:	08 94       	sec
    4f6e:	08 95       	ret

00004f70 <__fp_zero>:
    4f70:	e8 94       	clt

00004f72 <__fp_szero>:
    4f72:	bb 27       	eor	r27, r27
    4f74:	66 27       	eor	r22, r22
    4f76:	77 27       	eor	r23, r23
    4f78:	cb 01       	movw	r24, r22
    4f7a:	97 f9       	bld	r25, 7
    4f7c:	08 95       	ret

00004f7e <__gesf2>:
    4f7e:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__fp_cmp>
    4f82:	08 f4       	brcc	.+2      	; 0x4f86 <__gesf2+0x8>
    4f84:	8f ef       	ldi	r24, 0xFF	; 255
    4f86:	08 95       	ret

00004f88 <__mulsf3>:
    4f88:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__mulsf3x>
    4f8c:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <__fp_round>
    4f90:	0e 94 38 27 	call	0x4e70	; 0x4e70 <__fp_pscA>
    4f94:	38 f0       	brcs	.+14     	; 0x4fa4 <__mulsf3+0x1c>
    4f96:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <__fp_pscB>
    4f9a:	20 f0       	brcs	.+8      	; 0x4fa4 <__mulsf3+0x1c>
    4f9c:	95 23       	and	r25, r21
    4f9e:	11 f0       	breq	.+4      	; 0x4fa4 <__mulsf3+0x1c>
    4fa0:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__fp_inf>
    4fa4:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__fp_nan>
    4fa8:	11 24       	eor	r1, r1
    4faa:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__fp_szero>

00004fae <__mulsf3x>:
    4fae:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <__fp_split3>
    4fb2:	70 f3       	brcs	.-36     	; 0x4f90 <__mulsf3+0x8>

00004fb4 <__mulsf3_pse>:
    4fb4:	95 9f       	mul	r25, r21
    4fb6:	c1 f3       	breq	.-16     	; 0x4fa8 <__mulsf3+0x20>
    4fb8:	95 0f       	add	r25, r21
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	55 1f       	adc	r21, r21
    4fbe:	62 9f       	mul	r22, r18
    4fc0:	f0 01       	movw	r30, r0
    4fc2:	72 9f       	mul	r23, r18
    4fc4:	bb 27       	eor	r27, r27
    4fc6:	f0 0d       	add	r31, r0
    4fc8:	b1 1d       	adc	r27, r1
    4fca:	63 9f       	mul	r22, r19
    4fcc:	aa 27       	eor	r26, r26
    4fce:	f0 0d       	add	r31, r0
    4fd0:	b1 1d       	adc	r27, r1
    4fd2:	aa 1f       	adc	r26, r26
    4fd4:	64 9f       	mul	r22, r20
    4fd6:	66 27       	eor	r22, r22
    4fd8:	b0 0d       	add	r27, r0
    4fda:	a1 1d       	adc	r26, r1
    4fdc:	66 1f       	adc	r22, r22
    4fde:	82 9f       	mul	r24, r18
    4fe0:	22 27       	eor	r18, r18
    4fe2:	b0 0d       	add	r27, r0
    4fe4:	a1 1d       	adc	r26, r1
    4fe6:	62 1f       	adc	r22, r18
    4fe8:	73 9f       	mul	r23, r19
    4fea:	b0 0d       	add	r27, r0
    4fec:	a1 1d       	adc	r26, r1
    4fee:	62 1f       	adc	r22, r18
    4ff0:	83 9f       	mul	r24, r19
    4ff2:	a0 0d       	add	r26, r0
    4ff4:	61 1d       	adc	r22, r1
    4ff6:	22 1f       	adc	r18, r18
    4ff8:	74 9f       	mul	r23, r20
    4ffa:	33 27       	eor	r19, r19
    4ffc:	a0 0d       	add	r26, r0
    4ffe:	61 1d       	adc	r22, r1
    5000:	23 1f       	adc	r18, r19
    5002:	84 9f       	mul	r24, r20
    5004:	60 0d       	add	r22, r0
    5006:	21 1d       	adc	r18, r1
    5008:	82 2f       	mov	r24, r18
    500a:	76 2f       	mov	r23, r22
    500c:	6a 2f       	mov	r22, r26
    500e:	11 24       	eor	r1, r1
    5010:	9f 57       	subi	r25, 0x7F	; 127
    5012:	50 40       	sbci	r21, 0x00	; 0
    5014:	9a f0       	brmi	.+38     	; 0x503c <__mulsf3_pse+0x88>
    5016:	f1 f0       	breq	.+60     	; 0x5054 <__mulsf3_pse+0xa0>
    5018:	88 23       	and	r24, r24
    501a:	4a f0       	brmi	.+18     	; 0x502e <__mulsf3_pse+0x7a>
    501c:	ee 0f       	add	r30, r30
    501e:	ff 1f       	adc	r31, r31
    5020:	bb 1f       	adc	r27, r27
    5022:	66 1f       	adc	r22, r22
    5024:	77 1f       	adc	r23, r23
    5026:	88 1f       	adc	r24, r24
    5028:	91 50       	subi	r25, 0x01	; 1
    502a:	50 40       	sbci	r21, 0x00	; 0
    502c:	a9 f7       	brne	.-22     	; 0x5018 <__mulsf3_pse+0x64>
    502e:	9e 3f       	cpi	r25, 0xFE	; 254
    5030:	51 05       	cpc	r21, r1
    5032:	80 f0       	brcs	.+32     	; 0x5054 <__mulsf3_pse+0xa0>
    5034:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__fp_inf>
    5038:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__fp_szero>
    503c:	5f 3f       	cpi	r21, 0xFF	; 255
    503e:	e4 f3       	brlt	.-8      	; 0x5038 <__mulsf3_pse+0x84>
    5040:	98 3e       	cpi	r25, 0xE8	; 232
    5042:	d4 f3       	brlt	.-12     	; 0x5038 <__mulsf3_pse+0x84>
    5044:	86 95       	lsr	r24
    5046:	77 95       	ror	r23
    5048:	67 95       	ror	r22
    504a:	b7 95       	ror	r27
    504c:	f7 95       	ror	r31
    504e:	e7 95       	ror	r30
    5050:	9f 5f       	subi	r25, 0xFF	; 255
    5052:	c1 f7       	brne	.-16     	; 0x5044 <__mulsf3_pse+0x90>
    5054:	fe 2b       	or	r31, r30
    5056:	88 0f       	add	r24, r24
    5058:	91 1d       	adc	r25, r1
    505a:	96 95       	lsr	r25
    505c:	87 95       	ror	r24
    505e:	97 f9       	bld	r25, 7
    5060:	08 95       	ret

00005062 <round>:
    5062:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__fp_splitA>
    5066:	e8 f0       	brcs	.+58     	; 0x50a2 <round+0x40>
    5068:	9e 37       	cpi	r25, 0x7E	; 126
    506a:	e8 f0       	brcs	.+58     	; 0x50a6 <round+0x44>
    506c:	96 39       	cpi	r25, 0x96	; 150
    506e:	b8 f4       	brcc	.+46     	; 0x509e <round+0x3c>
    5070:	9e 38       	cpi	r25, 0x8E	; 142
    5072:	48 f4       	brcc	.+18     	; 0x5086 <round+0x24>
    5074:	67 2f       	mov	r22, r23
    5076:	78 2f       	mov	r23, r24
    5078:	88 27       	eor	r24, r24
    507a:	98 5f       	subi	r25, 0xF8	; 248
    507c:	f9 cf       	rjmp	.-14     	; 0x5070 <round+0xe>
    507e:	86 95       	lsr	r24
    5080:	77 95       	ror	r23
    5082:	67 95       	ror	r22
    5084:	93 95       	inc	r25
    5086:	95 39       	cpi	r25, 0x95	; 149
    5088:	d0 f3       	brcs	.-12     	; 0x507e <round+0x1c>
    508a:	b6 2f       	mov	r27, r22
    508c:	b1 70       	andi	r27, 0x01	; 1
    508e:	6b 0f       	add	r22, r27
    5090:	71 1d       	adc	r23, r1
    5092:	81 1d       	adc	r24, r1
    5094:	20 f4       	brcc	.+8      	; 0x509e <round+0x3c>
    5096:	87 95       	ror	r24
    5098:	77 95       	ror	r23
    509a:	67 95       	ror	r22
    509c:	93 95       	inc	r25
    509e:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__fp_mintl>
    50a2:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__fp_mpack>
    50a6:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__fp_szero>

000050aa <__fp_mintl>:
    50aa:	88 23       	and	r24, r24
    50ac:	71 f4       	brne	.+28     	; 0x50ca <__fp_mintl+0x20>
    50ae:	77 23       	and	r23, r23
    50b0:	21 f0       	breq	.+8      	; 0x50ba <__fp_mintl+0x10>
    50b2:	98 50       	subi	r25, 0x08	; 8
    50b4:	87 2b       	or	r24, r23
    50b6:	76 2f       	mov	r23, r22
    50b8:	07 c0       	rjmp	.+14     	; 0x50c8 <__fp_mintl+0x1e>
    50ba:	66 23       	and	r22, r22
    50bc:	11 f4       	brne	.+4      	; 0x50c2 <__fp_mintl+0x18>
    50be:	99 27       	eor	r25, r25
    50c0:	0d c0       	rjmp	.+26     	; 0x50dc <__fp_mintl+0x32>
    50c2:	90 51       	subi	r25, 0x10	; 16
    50c4:	86 2b       	or	r24, r22
    50c6:	70 e0       	ldi	r23, 0x00	; 0
    50c8:	60 e0       	ldi	r22, 0x00	; 0
    50ca:	2a f0       	brmi	.+10     	; 0x50d6 <__fp_mintl+0x2c>
    50cc:	9a 95       	dec	r25
    50ce:	66 0f       	add	r22, r22
    50d0:	77 1f       	adc	r23, r23
    50d2:	88 1f       	adc	r24, r24
    50d4:	da f7       	brpl	.-10     	; 0x50cc <__fp_mintl+0x22>
    50d6:	88 0f       	add	r24, r24
    50d8:	96 95       	lsr	r25
    50da:	87 95       	ror	r24
    50dc:	97 f9       	bld	r25, 7
    50de:	08 95       	ret

000050e0 <__fp_mpack>:
    50e0:	9f 3f       	cpi	r25, 0xFF	; 255
    50e2:	31 f0       	breq	.+12     	; 0x50f0 <__fp_mpack_finite+0xc>

000050e4 <__fp_mpack_finite>:
    50e4:	91 50       	subi	r25, 0x01	; 1
    50e6:	20 f4       	brcc	.+8      	; 0x50f0 <__fp_mpack_finite+0xc>
    50e8:	87 95       	ror	r24
    50ea:	77 95       	ror	r23
    50ec:	67 95       	ror	r22
    50ee:	b7 95       	ror	r27
    50f0:	88 0f       	add	r24, r24
    50f2:	91 1d       	adc	r25, r1
    50f4:	96 95       	lsr	r25
    50f6:	87 95       	ror	r24
    50f8:	97 f9       	bld	r25, 7
    50fa:	08 95       	ret

000050fc <__fp_powsodd>:
    50fc:	9f 93       	push	r25
    50fe:	8f 93       	push	r24
    5100:	7f 93       	push	r23
    5102:	6f 93       	push	r22
    5104:	ff 93       	push	r31
    5106:	ef 93       	push	r30
    5108:	9b 01       	movw	r18, r22
    510a:	ac 01       	movw	r20, r24
    510c:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__mulsf3>
    5110:	ef 91       	pop	r30
    5112:	ff 91       	pop	r31
    5114:	0e 94 92 28 	call	0x5124	; 0x5124 <__fp_powser>
    5118:	2f 91       	pop	r18
    511a:	3f 91       	pop	r19
    511c:	4f 91       	pop	r20
    511e:	5f 91       	pop	r21
    5120:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <__mulsf3>

00005124 <__fp_powser>:
    5124:	df 93       	push	r29
    5126:	cf 93       	push	r28
    5128:	1f 93       	push	r17
    512a:	0f 93       	push	r16
    512c:	ff 92       	push	r15
    512e:	ef 92       	push	r14
    5130:	df 92       	push	r13
    5132:	7b 01       	movw	r14, r22
    5134:	8c 01       	movw	r16, r24
    5136:	68 94       	set
    5138:	06 c0       	rjmp	.+12     	; 0x5146 <__fp_powser+0x22>
    513a:	da 2e       	mov	r13, r26
    513c:	ef 01       	movw	r28, r30
    513e:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__mulsf3x>
    5142:	fe 01       	movw	r30, r28
    5144:	e8 94       	clt
    5146:	a5 91       	lpm	r26, Z+
    5148:	25 91       	lpm	r18, Z+
    514a:	35 91       	lpm	r19, Z+
    514c:	45 91       	lpm	r20, Z+
    514e:	55 91       	lpm	r21, Z+
    5150:	a6 f3       	brts	.-24     	; 0x513a <__fp_powser+0x16>
    5152:	ef 01       	movw	r28, r30
    5154:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__addsf3x>
    5158:	fe 01       	movw	r30, r28
    515a:	97 01       	movw	r18, r14
    515c:	a8 01       	movw	r20, r16
    515e:	da 94       	dec	r13
    5160:	69 f7       	brne	.-38     	; 0x513c <__fp_powser+0x18>
    5162:	df 90       	pop	r13
    5164:	ef 90       	pop	r14
    5166:	ff 90       	pop	r15
    5168:	0f 91       	pop	r16
    516a:	1f 91       	pop	r17
    516c:	cf 91       	pop	r28
    516e:	df 91       	pop	r29
    5170:	08 95       	ret

00005172 <__mulsi3>:
    5172:	db 01       	movw	r26, r22
    5174:	8f 93       	push	r24
    5176:	9f 93       	push	r25
    5178:	0e 94 4e 29 	call	0x529c	; 0x529c <__muluhisi3>
    517c:	bf 91       	pop	r27
    517e:	af 91       	pop	r26
    5180:	a2 9f       	mul	r26, r18
    5182:	80 0d       	add	r24, r0
    5184:	91 1d       	adc	r25, r1
    5186:	a3 9f       	mul	r26, r19
    5188:	90 0d       	add	r25, r0
    518a:	b2 9f       	mul	r27, r18
    518c:	90 0d       	add	r25, r0
    518e:	11 24       	eor	r1, r1
    5190:	08 95       	ret

00005192 <__udivmodhi4>:
    5192:	aa 1b       	sub	r26, r26
    5194:	bb 1b       	sub	r27, r27
    5196:	51 e1       	ldi	r21, 0x11	; 17
    5198:	07 c0       	rjmp	.+14     	; 0x51a8 <__udivmodhi4_ep>

0000519a <__udivmodhi4_loop>:
    519a:	aa 1f       	adc	r26, r26
    519c:	bb 1f       	adc	r27, r27
    519e:	a6 17       	cp	r26, r22
    51a0:	b7 07       	cpc	r27, r23
    51a2:	10 f0       	brcs	.+4      	; 0x51a8 <__udivmodhi4_ep>
    51a4:	a6 1b       	sub	r26, r22
    51a6:	b7 0b       	sbc	r27, r23

000051a8 <__udivmodhi4_ep>:
    51a8:	88 1f       	adc	r24, r24
    51aa:	99 1f       	adc	r25, r25
    51ac:	5a 95       	dec	r21
    51ae:	a9 f7       	brne	.-22     	; 0x519a <__udivmodhi4_loop>
    51b0:	80 95       	com	r24
    51b2:	90 95       	com	r25
    51b4:	bc 01       	movw	r22, r24
    51b6:	cd 01       	movw	r24, r26
    51b8:	08 95       	ret

000051ba <__divmodhi4>:
    51ba:	97 fb       	bst	r25, 7
    51bc:	07 2e       	mov	r0, r23
    51be:	16 f4       	brtc	.+4      	; 0x51c4 <__divmodhi4+0xa>
    51c0:	00 94       	com	r0
    51c2:	07 d0       	rcall	.+14     	; 0x51d2 <__divmodhi4_neg1>
    51c4:	77 fd       	sbrc	r23, 7
    51c6:	09 d0       	rcall	.+18     	; 0x51da <__divmodhi4_neg2>
    51c8:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodhi4>
    51cc:	07 fc       	sbrc	r0, 7
    51ce:	05 d0       	rcall	.+10     	; 0x51da <__divmodhi4_neg2>
    51d0:	3e f4       	brtc	.+14     	; 0x51e0 <__divmodhi4_exit>

000051d2 <__divmodhi4_neg1>:
    51d2:	90 95       	com	r25
    51d4:	81 95       	neg	r24
    51d6:	9f 4f       	sbci	r25, 0xFF	; 255
    51d8:	08 95       	ret

000051da <__divmodhi4_neg2>:
    51da:	70 95       	com	r23
    51dc:	61 95       	neg	r22
    51de:	7f 4f       	sbci	r23, 0xFF	; 255

000051e0 <__divmodhi4_exit>:
    51e0:	08 95       	ret

000051e2 <__udivmodsi4>:
    51e2:	a1 e2       	ldi	r26, 0x21	; 33
    51e4:	1a 2e       	mov	r1, r26
    51e6:	aa 1b       	sub	r26, r26
    51e8:	bb 1b       	sub	r27, r27
    51ea:	fd 01       	movw	r30, r26
    51ec:	0d c0       	rjmp	.+26     	; 0x5208 <__udivmodsi4_ep>

000051ee <__udivmodsi4_loop>:
    51ee:	aa 1f       	adc	r26, r26
    51f0:	bb 1f       	adc	r27, r27
    51f2:	ee 1f       	adc	r30, r30
    51f4:	ff 1f       	adc	r31, r31
    51f6:	a2 17       	cp	r26, r18
    51f8:	b3 07       	cpc	r27, r19
    51fa:	e4 07       	cpc	r30, r20
    51fc:	f5 07       	cpc	r31, r21
    51fe:	20 f0       	brcs	.+8      	; 0x5208 <__udivmodsi4_ep>
    5200:	a2 1b       	sub	r26, r18
    5202:	b3 0b       	sbc	r27, r19
    5204:	e4 0b       	sbc	r30, r20
    5206:	f5 0b       	sbc	r31, r21

00005208 <__udivmodsi4_ep>:
    5208:	66 1f       	adc	r22, r22
    520a:	77 1f       	adc	r23, r23
    520c:	88 1f       	adc	r24, r24
    520e:	99 1f       	adc	r25, r25
    5210:	1a 94       	dec	r1
    5212:	69 f7       	brne	.-38     	; 0x51ee <__udivmodsi4_loop>
    5214:	60 95       	com	r22
    5216:	70 95       	com	r23
    5218:	80 95       	com	r24
    521a:	90 95       	com	r25
    521c:	9b 01       	movw	r18, r22
    521e:	ac 01       	movw	r20, r24
    5220:	bd 01       	movw	r22, r26
    5222:	cf 01       	movw	r24, r30
    5224:	08 95       	ret

00005226 <__divmodsi4>:
    5226:	05 2e       	mov	r0, r21
    5228:	97 fb       	bst	r25, 7
    522a:	1e f4       	brtc	.+6      	; 0x5232 <__divmodsi4+0xc>
    522c:	00 94       	com	r0
    522e:	0e 94 2a 29 	call	0x5254	; 0x5254 <__negsi2>
    5232:	57 fd       	sbrc	r21, 7
    5234:	07 d0       	rcall	.+14     	; 0x5244 <__divmodsi4_neg2>
    5236:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <__udivmodsi4>
    523a:	07 fc       	sbrc	r0, 7
    523c:	03 d0       	rcall	.+6      	; 0x5244 <__divmodsi4_neg2>
    523e:	4e f4       	brtc	.+18     	; 0x5252 <__divmodsi4_exit>
    5240:	0c 94 2a 29 	jmp	0x5254	; 0x5254 <__negsi2>

00005244 <__divmodsi4_neg2>:
    5244:	50 95       	com	r21
    5246:	40 95       	com	r20
    5248:	30 95       	com	r19
    524a:	21 95       	neg	r18
    524c:	3f 4f       	sbci	r19, 0xFF	; 255
    524e:	4f 4f       	sbci	r20, 0xFF	; 255
    5250:	5f 4f       	sbci	r21, 0xFF	; 255

00005252 <__divmodsi4_exit>:
    5252:	08 95       	ret

00005254 <__negsi2>:
    5254:	90 95       	com	r25
    5256:	80 95       	com	r24
    5258:	70 95       	com	r23
    525a:	61 95       	neg	r22
    525c:	7f 4f       	sbci	r23, 0xFF	; 255
    525e:	8f 4f       	sbci	r24, 0xFF	; 255
    5260:	9f 4f       	sbci	r25, 0xFF	; 255
    5262:	08 95       	ret

00005264 <__tablejump2__>:
    5264:	ee 0f       	add	r30, r30
    5266:	ff 1f       	adc	r31, r31
    5268:	05 90       	lpm	r0, Z+
    526a:	f4 91       	lpm	r31, Z
    526c:	e0 2d       	mov	r30, r0
    526e:	09 94       	ijmp

00005270 <__umulhisi3>:
    5270:	a2 9f       	mul	r26, r18
    5272:	b0 01       	movw	r22, r0
    5274:	b3 9f       	mul	r27, r19
    5276:	c0 01       	movw	r24, r0
    5278:	a3 9f       	mul	r26, r19
    527a:	70 0d       	add	r23, r0
    527c:	81 1d       	adc	r24, r1
    527e:	11 24       	eor	r1, r1
    5280:	91 1d       	adc	r25, r1
    5282:	b2 9f       	mul	r27, r18
    5284:	70 0d       	add	r23, r0
    5286:	81 1d       	adc	r24, r1
    5288:	11 24       	eor	r1, r1
    528a:	91 1d       	adc	r25, r1
    528c:	08 95       	ret

0000528e <__usmulhisi3>:
    528e:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>

00005292 <__usmulhisi3_tail>:
    5292:	b7 ff       	sbrs	r27, 7
    5294:	08 95       	ret
    5296:	82 1b       	sub	r24, r18
    5298:	93 0b       	sbc	r25, r19
    529a:	08 95       	ret

0000529c <__muluhisi3>:
    529c:	0e 94 38 29 	call	0x5270	; 0x5270 <__umulhisi3>
    52a0:	a5 9f       	mul	r26, r21
    52a2:	90 0d       	add	r25, r0
    52a4:	b4 9f       	mul	r27, r20
    52a6:	90 0d       	add	r25, r0
    52a8:	a4 9f       	mul	r26, r20
    52aa:	80 0d       	add	r24, r0
    52ac:	91 1d       	adc	r25, r1
    52ae:	11 24       	eor	r1, r1
    52b0:	08 95       	ret

000052b2 <__mulshisi3>:
    52b2:	b7 ff       	sbrs	r27, 7
    52b4:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__muluhisi3>

000052b8 <__mulohisi3>:
    52b8:	0e 94 4e 29 	call	0x529c	; 0x529c <__muluhisi3>
    52bc:	82 1b       	sub	r24, r18
    52be:	93 0b       	sbc	r25, r19
    52c0:	08 95       	ret

000052c2 <malloc>:
    52c2:	0f 93       	push	r16
    52c4:	1f 93       	push	r17
    52c6:	cf 93       	push	r28
    52c8:	df 93       	push	r29
    52ca:	82 30       	cpi	r24, 0x02	; 2
    52cc:	91 05       	cpc	r25, r1
    52ce:	10 f4       	brcc	.+4      	; 0x52d4 <malloc+0x12>
    52d0:	82 e0       	ldi	r24, 0x02	; 2
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <__flp>
    52d8:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <__flp+0x1>
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	30 e0       	ldi	r19, 0x00	; 0
    52e0:	a0 e0       	ldi	r26, 0x00	; 0
    52e2:	b0 e0       	ldi	r27, 0x00	; 0
    52e4:	30 97       	sbiw	r30, 0x00	; 0
    52e6:	19 f1       	breq	.+70     	; 0x532e <malloc+0x6c>
    52e8:	40 81       	ld	r20, Z
    52ea:	51 81       	ldd	r21, Z+1	; 0x01
    52ec:	02 81       	ldd	r16, Z+2	; 0x02
    52ee:	13 81       	ldd	r17, Z+3	; 0x03
    52f0:	48 17       	cp	r20, r24
    52f2:	59 07       	cpc	r21, r25
    52f4:	c8 f0       	brcs	.+50     	; 0x5328 <malloc+0x66>
    52f6:	84 17       	cp	r24, r20
    52f8:	95 07       	cpc	r25, r21
    52fa:	69 f4       	brne	.+26     	; 0x5316 <malloc+0x54>
    52fc:	10 97       	sbiw	r26, 0x00	; 0
    52fe:	31 f0       	breq	.+12     	; 0x530c <malloc+0x4a>
    5300:	12 96       	adiw	r26, 0x02	; 2
    5302:	0c 93       	st	X, r16
    5304:	12 97       	sbiw	r26, 0x02	; 2
    5306:	13 96       	adiw	r26, 0x03	; 3
    5308:	1c 93       	st	X, r17
    530a:	27 c0       	rjmp	.+78     	; 0x535a <malloc+0x98>
    530c:	00 93 6c 05 	sts	0x056C, r16	; 0x80056c <__flp>
    5310:	10 93 6d 05 	sts	0x056D, r17	; 0x80056d <__flp+0x1>
    5314:	22 c0       	rjmp	.+68     	; 0x535a <malloc+0x98>
    5316:	21 15       	cp	r18, r1
    5318:	31 05       	cpc	r19, r1
    531a:	19 f0       	breq	.+6      	; 0x5322 <malloc+0x60>
    531c:	42 17       	cp	r20, r18
    531e:	53 07       	cpc	r21, r19
    5320:	18 f4       	brcc	.+6      	; 0x5328 <malloc+0x66>
    5322:	9a 01       	movw	r18, r20
    5324:	bd 01       	movw	r22, r26
    5326:	ef 01       	movw	r28, r30
    5328:	df 01       	movw	r26, r30
    532a:	f8 01       	movw	r30, r16
    532c:	db cf       	rjmp	.-74     	; 0x52e4 <malloc+0x22>
    532e:	21 15       	cp	r18, r1
    5330:	31 05       	cpc	r19, r1
    5332:	f9 f0       	breq	.+62     	; 0x5372 <malloc+0xb0>
    5334:	28 1b       	sub	r18, r24
    5336:	39 0b       	sbc	r19, r25
    5338:	24 30       	cpi	r18, 0x04	; 4
    533a:	31 05       	cpc	r19, r1
    533c:	80 f4       	brcc	.+32     	; 0x535e <malloc+0x9c>
    533e:	8a 81       	ldd	r24, Y+2	; 0x02
    5340:	9b 81       	ldd	r25, Y+3	; 0x03
    5342:	61 15       	cp	r22, r1
    5344:	71 05       	cpc	r23, r1
    5346:	21 f0       	breq	.+8      	; 0x5350 <malloc+0x8e>
    5348:	fb 01       	movw	r30, r22
    534a:	93 83       	std	Z+3, r25	; 0x03
    534c:	82 83       	std	Z+2, r24	; 0x02
    534e:	04 c0       	rjmp	.+8      	; 0x5358 <malloc+0x96>
    5350:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <__flp+0x1>
    5354:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <__flp>
    5358:	fe 01       	movw	r30, r28
    535a:	32 96       	adiw	r30, 0x02	; 2
    535c:	44 c0       	rjmp	.+136    	; 0x53e6 <malloc+0x124>
    535e:	fe 01       	movw	r30, r28
    5360:	e2 0f       	add	r30, r18
    5362:	f3 1f       	adc	r31, r19
    5364:	81 93       	st	Z+, r24
    5366:	91 93       	st	Z+, r25
    5368:	22 50       	subi	r18, 0x02	; 2
    536a:	31 09       	sbc	r19, r1
    536c:	39 83       	std	Y+1, r19	; 0x01
    536e:	28 83       	st	Y, r18
    5370:	3a c0       	rjmp	.+116    	; 0x53e6 <malloc+0x124>
    5372:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <__brkval>
    5376:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <__brkval+0x1>
    537a:	23 2b       	or	r18, r19
    537c:	41 f4       	brne	.+16     	; 0x538e <malloc+0xcc>
    537e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5382:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5386:	30 93 6b 05 	sts	0x056B, r19	; 0x80056b <__brkval+0x1>
    538a:	20 93 6a 05 	sts	0x056A, r18	; 0x80056a <__brkval>
    538e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5392:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5396:	21 15       	cp	r18, r1
    5398:	31 05       	cpc	r19, r1
    539a:	41 f4       	brne	.+16     	; 0x53ac <malloc+0xea>
    539c:	2d b7       	in	r18, 0x3d	; 61
    539e:	3e b7       	in	r19, 0x3e	; 62
    53a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    53a4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    53a8:	24 1b       	sub	r18, r20
    53aa:	35 0b       	sbc	r19, r21
    53ac:	e0 91 6a 05 	lds	r30, 0x056A	; 0x80056a <__brkval>
    53b0:	f0 91 6b 05 	lds	r31, 0x056B	; 0x80056b <__brkval+0x1>
    53b4:	e2 17       	cp	r30, r18
    53b6:	f3 07       	cpc	r31, r19
    53b8:	a0 f4       	brcc	.+40     	; 0x53e2 <malloc+0x120>
    53ba:	2e 1b       	sub	r18, r30
    53bc:	3f 0b       	sbc	r19, r31
    53be:	28 17       	cp	r18, r24
    53c0:	39 07       	cpc	r19, r25
    53c2:	78 f0       	brcs	.+30     	; 0x53e2 <malloc+0x120>
    53c4:	ac 01       	movw	r20, r24
    53c6:	4e 5f       	subi	r20, 0xFE	; 254
    53c8:	5f 4f       	sbci	r21, 0xFF	; 255
    53ca:	24 17       	cp	r18, r20
    53cc:	35 07       	cpc	r19, r21
    53ce:	48 f0       	brcs	.+18     	; 0x53e2 <malloc+0x120>
    53d0:	4e 0f       	add	r20, r30
    53d2:	5f 1f       	adc	r21, r31
    53d4:	50 93 6b 05 	sts	0x056B, r21	; 0x80056b <__brkval+0x1>
    53d8:	40 93 6a 05 	sts	0x056A, r20	; 0x80056a <__brkval>
    53dc:	81 93       	st	Z+, r24
    53de:	91 93       	st	Z+, r25
    53e0:	02 c0       	rjmp	.+4      	; 0x53e6 <malloc+0x124>
    53e2:	e0 e0       	ldi	r30, 0x00	; 0
    53e4:	f0 e0       	ldi	r31, 0x00	; 0
    53e6:	cf 01       	movw	r24, r30
    53e8:	df 91       	pop	r29
    53ea:	cf 91       	pop	r28
    53ec:	1f 91       	pop	r17
    53ee:	0f 91       	pop	r16
    53f0:	08 95       	ret

000053f2 <free>:
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	00 97       	sbiw	r24, 0x00	; 0
    53f8:	09 f4       	brne	.+2      	; 0x53fc <free+0xa>
    53fa:	81 c0       	rjmp	.+258    	; 0x54fe <free+0x10c>
    53fc:	fc 01       	movw	r30, r24
    53fe:	32 97       	sbiw	r30, 0x02	; 2
    5400:	13 82       	std	Z+3, r1	; 0x03
    5402:	12 82       	std	Z+2, r1	; 0x02
    5404:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <__flp>
    5408:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <__flp+0x1>
    540c:	10 97       	sbiw	r26, 0x00	; 0
    540e:	81 f4       	brne	.+32     	; 0x5430 <free+0x3e>
    5410:	20 81       	ld	r18, Z
    5412:	31 81       	ldd	r19, Z+1	; 0x01
    5414:	82 0f       	add	r24, r18
    5416:	93 1f       	adc	r25, r19
    5418:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <__brkval>
    541c:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <__brkval+0x1>
    5420:	28 17       	cp	r18, r24
    5422:	39 07       	cpc	r19, r25
    5424:	51 f5       	brne	.+84     	; 0x547a <free+0x88>
    5426:	f0 93 6b 05 	sts	0x056B, r31	; 0x80056b <__brkval+0x1>
    542a:	e0 93 6a 05 	sts	0x056A, r30	; 0x80056a <__brkval>
    542e:	67 c0       	rjmp	.+206    	; 0x54fe <free+0x10c>
    5430:	ed 01       	movw	r28, r26
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	ce 17       	cp	r28, r30
    5438:	df 07       	cpc	r29, r31
    543a:	40 f4       	brcc	.+16     	; 0x544c <free+0x5a>
    543c:	4a 81       	ldd	r20, Y+2	; 0x02
    543e:	5b 81       	ldd	r21, Y+3	; 0x03
    5440:	9e 01       	movw	r18, r28
    5442:	41 15       	cp	r20, r1
    5444:	51 05       	cpc	r21, r1
    5446:	f1 f0       	breq	.+60     	; 0x5484 <free+0x92>
    5448:	ea 01       	movw	r28, r20
    544a:	f5 cf       	rjmp	.-22     	; 0x5436 <free+0x44>
    544c:	d3 83       	std	Z+3, r29	; 0x03
    544e:	c2 83       	std	Z+2, r28	; 0x02
    5450:	40 81       	ld	r20, Z
    5452:	51 81       	ldd	r21, Z+1	; 0x01
    5454:	84 0f       	add	r24, r20
    5456:	95 1f       	adc	r25, r21
    5458:	c8 17       	cp	r28, r24
    545a:	d9 07       	cpc	r29, r25
    545c:	59 f4       	brne	.+22     	; 0x5474 <free+0x82>
    545e:	88 81       	ld	r24, Y
    5460:	99 81       	ldd	r25, Y+1	; 0x01
    5462:	84 0f       	add	r24, r20
    5464:	95 1f       	adc	r25, r21
    5466:	02 96       	adiw	r24, 0x02	; 2
    5468:	91 83       	std	Z+1, r25	; 0x01
    546a:	80 83       	st	Z, r24
    546c:	8a 81       	ldd	r24, Y+2	; 0x02
    546e:	9b 81       	ldd	r25, Y+3	; 0x03
    5470:	93 83       	std	Z+3, r25	; 0x03
    5472:	82 83       	std	Z+2, r24	; 0x02
    5474:	21 15       	cp	r18, r1
    5476:	31 05       	cpc	r19, r1
    5478:	29 f4       	brne	.+10     	; 0x5484 <free+0x92>
    547a:	f0 93 6d 05 	sts	0x056D, r31	; 0x80056d <__flp+0x1>
    547e:	e0 93 6c 05 	sts	0x056C, r30	; 0x80056c <__flp>
    5482:	3d c0       	rjmp	.+122    	; 0x54fe <free+0x10c>
    5484:	e9 01       	movw	r28, r18
    5486:	fb 83       	std	Y+3, r31	; 0x03
    5488:	ea 83       	std	Y+2, r30	; 0x02
    548a:	49 91       	ld	r20, Y+
    548c:	59 91       	ld	r21, Y+
    548e:	c4 0f       	add	r28, r20
    5490:	d5 1f       	adc	r29, r21
    5492:	ec 17       	cp	r30, r28
    5494:	fd 07       	cpc	r31, r29
    5496:	61 f4       	brne	.+24     	; 0x54b0 <free+0xbe>
    5498:	80 81       	ld	r24, Z
    549a:	91 81       	ldd	r25, Z+1	; 0x01
    549c:	84 0f       	add	r24, r20
    549e:	95 1f       	adc	r25, r21
    54a0:	02 96       	adiw	r24, 0x02	; 2
    54a2:	e9 01       	movw	r28, r18
    54a4:	99 83       	std	Y+1, r25	; 0x01
    54a6:	88 83       	st	Y, r24
    54a8:	82 81       	ldd	r24, Z+2	; 0x02
    54aa:	93 81       	ldd	r25, Z+3	; 0x03
    54ac:	9b 83       	std	Y+3, r25	; 0x03
    54ae:	8a 83       	std	Y+2, r24	; 0x02
    54b0:	e0 e0       	ldi	r30, 0x00	; 0
    54b2:	f0 e0       	ldi	r31, 0x00	; 0
    54b4:	12 96       	adiw	r26, 0x02	; 2
    54b6:	8d 91       	ld	r24, X+
    54b8:	9c 91       	ld	r25, X
    54ba:	13 97       	sbiw	r26, 0x03	; 3
    54bc:	00 97       	sbiw	r24, 0x00	; 0
    54be:	19 f0       	breq	.+6      	; 0x54c6 <free+0xd4>
    54c0:	fd 01       	movw	r30, r26
    54c2:	dc 01       	movw	r26, r24
    54c4:	f7 cf       	rjmp	.-18     	; 0x54b4 <free+0xc2>
    54c6:	8d 91       	ld	r24, X+
    54c8:	9c 91       	ld	r25, X
    54ca:	11 97       	sbiw	r26, 0x01	; 1
    54cc:	9d 01       	movw	r18, r26
    54ce:	2e 5f       	subi	r18, 0xFE	; 254
    54d0:	3f 4f       	sbci	r19, 0xFF	; 255
    54d2:	82 0f       	add	r24, r18
    54d4:	93 1f       	adc	r25, r19
    54d6:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <__brkval>
    54da:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <__brkval+0x1>
    54de:	28 17       	cp	r18, r24
    54e0:	39 07       	cpc	r19, r25
    54e2:	69 f4       	brne	.+26     	; 0x54fe <free+0x10c>
    54e4:	30 97       	sbiw	r30, 0x00	; 0
    54e6:	29 f4       	brne	.+10     	; 0x54f2 <free+0x100>
    54e8:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <__flp+0x1>
    54ec:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <__flp>
    54f0:	02 c0       	rjmp	.+4      	; 0x54f6 <free+0x104>
    54f2:	13 82       	std	Z+3, r1	; 0x03
    54f4:	12 82       	std	Z+2, r1	; 0x02
    54f6:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <__brkval+0x1>
    54fa:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <__brkval>
    54fe:	df 91       	pop	r29
    5500:	cf 91       	pop	r28
    5502:	08 95       	ret

00005504 <atoi>:
    5504:	fc 01       	movw	r30, r24
    5506:	88 27       	eor	r24, r24
    5508:	99 27       	eor	r25, r25
    550a:	e8 94       	clt
    550c:	21 91       	ld	r18, Z+
    550e:	20 32       	cpi	r18, 0x20	; 32
    5510:	e9 f3       	breq	.-6      	; 0x550c <atoi+0x8>
    5512:	29 30       	cpi	r18, 0x09	; 9
    5514:	10 f0       	brcs	.+4      	; 0x551a <atoi+0x16>
    5516:	2e 30       	cpi	r18, 0x0E	; 14
    5518:	c8 f3       	brcs	.-14     	; 0x550c <atoi+0x8>
    551a:	2b 32       	cpi	r18, 0x2B	; 43
    551c:	41 f0       	breq	.+16     	; 0x552e <atoi+0x2a>
    551e:	2d 32       	cpi	r18, 0x2D	; 45
    5520:	39 f4       	brne	.+14     	; 0x5530 <atoi+0x2c>
    5522:	68 94       	set
    5524:	04 c0       	rjmp	.+8      	; 0x552e <atoi+0x2a>
    5526:	0e 94 05 2b 	call	0x560a	; 0x560a <__mulhi_const_10>
    552a:	82 0f       	add	r24, r18
    552c:	91 1d       	adc	r25, r1
    552e:	21 91       	ld	r18, Z+
    5530:	20 53       	subi	r18, 0x30	; 48
    5532:	2a 30       	cpi	r18, 0x0A	; 10
    5534:	c0 f3       	brcs	.-16     	; 0x5526 <atoi+0x22>
    5536:	1e f4       	brtc	.+6      	; 0x553e <atoi+0x3a>
    5538:	90 95       	com	r25
    553a:	81 95       	neg	r24
    553c:	9f 4f       	sbci	r25, 0xFF	; 255
    553e:	08 95       	ret

00005540 <atol>:
    5540:	1f 93       	push	r17
    5542:	fc 01       	movw	r30, r24
    5544:	99 27       	eor	r25, r25
    5546:	88 27       	eor	r24, r24
    5548:	bc 01       	movw	r22, r24
    554a:	e8 94       	clt
    554c:	11 91       	ld	r17, Z+
    554e:	10 32       	cpi	r17, 0x20	; 32
    5550:	e9 f3       	breq	.-6      	; 0x554c <atol+0xc>
    5552:	19 30       	cpi	r17, 0x09	; 9
    5554:	10 f0       	brcs	.+4      	; 0x555a <atol+0x1a>
    5556:	1e 30       	cpi	r17, 0x0E	; 14
    5558:	c8 f3       	brcs	.-14     	; 0x554c <atol+0xc>
    555a:	1b 32       	cpi	r17, 0x2B	; 43
    555c:	51 f0       	breq	.+20     	; 0x5572 <atol+0x32>
    555e:	1d 32       	cpi	r17, 0x2D	; 45
    5560:	49 f4       	brne	.+18     	; 0x5574 <atol+0x34>
    5562:	68 94       	set
    5564:	06 c0       	rjmp	.+12     	; 0x5572 <atol+0x32>
    5566:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <__mulsi_const_10>
    556a:	61 0f       	add	r22, r17
    556c:	71 1d       	adc	r23, r1
    556e:	81 1d       	adc	r24, r1
    5570:	91 1d       	adc	r25, r1
    5572:	11 91       	ld	r17, Z+
    5574:	10 53       	subi	r17, 0x30	; 48
    5576:	1a 30       	cpi	r17, 0x0A	; 10
    5578:	b0 f3       	brcs	.-20     	; 0x5566 <atol+0x26>
    557a:	3e f4       	brtc	.+14     	; 0x558a <atol+0x4a>
    557c:	90 95       	com	r25
    557e:	80 95       	com	r24
    5580:	70 95       	com	r23
    5582:	61 95       	neg	r22
    5584:	7f 4f       	sbci	r23, 0xFF	; 255
    5586:	8f 4f       	sbci	r24, 0xFF	; 255
    5588:	9f 4f       	sbci	r25, 0xFF	; 255
    558a:	1f 91       	pop	r17
    558c:	08 95       	ret

0000558e <toupper>:
    558e:	91 11       	cpse	r25, r1
    5590:	08 95       	ret
    5592:	81 56       	subi	r24, 0x61	; 97
    5594:	8a 51       	subi	r24, 0x1A	; 26
    5596:	08 f4       	brcc	.+2      	; 0x559a <toupper+0xc>
    5598:	80 52       	subi	r24, 0x20	; 32
    559a:	85 58       	subi	r24, 0x85	; 133
    559c:	08 95       	ret

0000559e <strcat>:
    559e:	fb 01       	movw	r30, r22
    55a0:	dc 01       	movw	r26, r24
    55a2:	0d 90       	ld	r0, X+
    55a4:	00 20       	and	r0, r0
    55a6:	e9 f7       	brne	.-6      	; 0x55a2 <strcat+0x4>
    55a8:	11 97       	sbiw	r26, 0x01	; 1
    55aa:	01 90       	ld	r0, Z+
    55ac:	0d 92       	st	X+, r0
    55ae:	00 20       	and	r0, r0
    55b0:	e1 f7       	brne	.-8      	; 0x55aa <strcat+0xc>
    55b2:	08 95       	ret

000055b4 <strcpy>:
    55b4:	fb 01       	movw	r30, r22
    55b6:	dc 01       	movw	r26, r24
    55b8:	01 90       	ld	r0, Z+
    55ba:	0d 92       	st	X+, r0
    55bc:	00 20       	and	r0, r0
    55be:	e1 f7       	brne	.-8      	; 0x55b8 <strcpy+0x4>
    55c0:	08 95       	ret

000055c2 <strncpy>:
    55c2:	fb 01       	movw	r30, r22
    55c4:	dc 01       	movw	r26, r24
    55c6:	41 50       	subi	r20, 0x01	; 1
    55c8:	50 40       	sbci	r21, 0x00	; 0
    55ca:	48 f0       	brcs	.+18     	; 0x55de <strncpy+0x1c>
    55cc:	01 90       	ld	r0, Z+
    55ce:	0d 92       	st	X+, r0
    55d0:	00 20       	and	r0, r0
    55d2:	c9 f7       	brne	.-14     	; 0x55c6 <strncpy+0x4>
    55d4:	01 c0       	rjmp	.+2      	; 0x55d8 <strncpy+0x16>
    55d6:	1d 92       	st	X+, r1
    55d8:	41 50       	subi	r20, 0x01	; 1
    55da:	50 40       	sbci	r21, 0x00	; 0
    55dc:	e0 f7       	brcc	.-8      	; 0x55d6 <strncpy+0x14>
    55de:	08 95       	ret

000055e0 <__mulsi_const_10>:
    55e0:	59 2f       	mov	r21, r25
    55e2:	48 2f       	mov	r20, r24
    55e4:	37 2f       	mov	r19, r23
    55e6:	26 2f       	mov	r18, r22
    55e8:	66 0f       	add	r22, r22
    55ea:	77 1f       	adc	r23, r23
    55ec:	88 1f       	adc	r24, r24
    55ee:	99 1f       	adc	r25, r25
    55f0:	66 0f       	add	r22, r22
    55f2:	77 1f       	adc	r23, r23
    55f4:	88 1f       	adc	r24, r24
    55f6:	99 1f       	adc	r25, r25
    55f8:	62 0f       	add	r22, r18
    55fa:	73 1f       	adc	r23, r19
    55fc:	84 1f       	adc	r24, r20
    55fe:	95 1f       	adc	r25, r21
    5600:	66 0f       	add	r22, r22
    5602:	77 1f       	adc	r23, r23
    5604:	88 1f       	adc	r24, r24
    5606:	99 1f       	adc	r25, r25
    5608:	08 95       	ret

0000560a <__mulhi_const_10>:
    560a:	7a e0       	ldi	r23, 0x0A	; 10
    560c:	97 9f       	mul	r25, r23
    560e:	90 2d       	mov	r25, r0
    5610:	87 9f       	mul	r24, r23
    5612:	80 2d       	mov	r24, r0
    5614:	91 0d       	add	r25, r1
    5616:	11 24       	eor	r1, r1
    5618:	08 95       	ret

0000561a <sprintf>:
    561a:	ae e0       	ldi	r26, 0x0E	; 14
    561c:	b0 e0       	ldi	r27, 0x00	; 0
    561e:	e3 e1       	ldi	r30, 0x13	; 19
    5620:	fb e2       	ldi	r31, 0x2B	; 43
    5622:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__prologue_saves__+0x1c>
    5626:	0d 89       	ldd	r16, Y+21	; 0x15
    5628:	1e 89       	ldd	r17, Y+22	; 0x16
    562a:	86 e0       	ldi	r24, 0x06	; 6
    562c:	8c 83       	std	Y+4, r24	; 0x04
    562e:	1a 83       	std	Y+2, r17	; 0x02
    5630:	09 83       	std	Y+1, r16	; 0x01
    5632:	8f ef       	ldi	r24, 0xFF	; 255
    5634:	9f e7       	ldi	r25, 0x7F	; 127
    5636:	9e 83       	std	Y+6, r25	; 0x06
    5638:	8d 83       	std	Y+5, r24	; 0x05
    563a:	ae 01       	movw	r20, r28
    563c:	47 5e       	subi	r20, 0xE7	; 231
    563e:	5f 4f       	sbci	r21, 0xFF	; 255
    5640:	6f 89       	ldd	r22, Y+23	; 0x17
    5642:	78 8d       	ldd	r23, Y+24	; 0x18
    5644:	ce 01       	movw	r24, r28
    5646:	01 96       	adiw	r24, 0x01	; 1
    5648:	0e 94 2f 2b 	call	0x565e	; 0x565e <vfprintf>
    564c:	ef 81       	ldd	r30, Y+7	; 0x07
    564e:	f8 85       	ldd	r31, Y+8	; 0x08
    5650:	e0 0f       	add	r30, r16
    5652:	f1 1f       	adc	r31, r17
    5654:	10 82       	st	Z, r1
    5656:	2e 96       	adiw	r28, 0x0e	; 14
    5658:	e4 e0       	ldi	r30, 0x04	; 4
    565a:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <__epilogue_restores__+0x1c>

0000565e <vfprintf>:
    565e:	ab e0       	ldi	r26, 0x0B	; 11
    5660:	b0 e0       	ldi	r27, 0x00	; 0
    5662:	e5 e3       	ldi	r30, 0x35	; 53
    5664:	fb e2       	ldi	r31, 0x2B	; 43
    5666:	0c 94 08 2e 	jmp	0x5c10	; 0x5c10 <__prologue_saves__>
    566a:	6c 01       	movw	r12, r24
    566c:	7b 01       	movw	r14, r22
    566e:	8a 01       	movw	r16, r20
    5670:	fc 01       	movw	r30, r24
    5672:	17 82       	std	Z+7, r1	; 0x07
    5674:	16 82       	std	Z+6, r1	; 0x06
    5676:	83 81       	ldd	r24, Z+3	; 0x03
    5678:	81 ff       	sbrs	r24, 1
    567a:	cc c1       	rjmp	.+920    	; 0x5a14 <vfprintf+0x3b6>
    567c:	ce 01       	movw	r24, r28
    567e:	01 96       	adiw	r24, 0x01	; 1
    5680:	3c 01       	movw	r6, r24
    5682:	f6 01       	movw	r30, r12
    5684:	93 81       	ldd	r25, Z+3	; 0x03
    5686:	f7 01       	movw	r30, r14
    5688:	93 fd       	sbrc	r25, 3
    568a:	85 91       	lpm	r24, Z+
    568c:	93 ff       	sbrs	r25, 3
    568e:	81 91       	ld	r24, Z+
    5690:	7f 01       	movw	r14, r30
    5692:	88 23       	and	r24, r24
    5694:	09 f4       	brne	.+2      	; 0x5698 <vfprintf+0x3a>
    5696:	ba c1       	rjmp	.+884    	; 0x5a0c <vfprintf+0x3ae>
    5698:	85 32       	cpi	r24, 0x25	; 37
    569a:	39 f4       	brne	.+14     	; 0x56aa <vfprintf+0x4c>
    569c:	93 fd       	sbrc	r25, 3
    569e:	85 91       	lpm	r24, Z+
    56a0:	93 ff       	sbrs	r25, 3
    56a2:	81 91       	ld	r24, Z+
    56a4:	7f 01       	movw	r14, r30
    56a6:	85 32       	cpi	r24, 0x25	; 37
    56a8:	29 f4       	brne	.+10     	; 0x56b4 <vfprintf+0x56>
    56aa:	b6 01       	movw	r22, r12
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    56b2:	e7 cf       	rjmp	.-50     	; 0x5682 <vfprintf+0x24>
    56b4:	91 2c       	mov	r9, r1
    56b6:	21 2c       	mov	r2, r1
    56b8:	31 2c       	mov	r3, r1
    56ba:	ff e1       	ldi	r31, 0x1F	; 31
    56bc:	f3 15       	cp	r31, r3
    56be:	d8 f0       	brcs	.+54     	; 0x56f6 <vfprintf+0x98>
    56c0:	8b 32       	cpi	r24, 0x2B	; 43
    56c2:	79 f0       	breq	.+30     	; 0x56e2 <vfprintf+0x84>
    56c4:	38 f4       	brcc	.+14     	; 0x56d4 <vfprintf+0x76>
    56c6:	80 32       	cpi	r24, 0x20	; 32
    56c8:	79 f0       	breq	.+30     	; 0x56e8 <vfprintf+0x8a>
    56ca:	83 32       	cpi	r24, 0x23	; 35
    56cc:	a1 f4       	brne	.+40     	; 0x56f6 <vfprintf+0x98>
    56ce:	23 2d       	mov	r18, r3
    56d0:	20 61       	ori	r18, 0x10	; 16
    56d2:	1d c0       	rjmp	.+58     	; 0x570e <vfprintf+0xb0>
    56d4:	8d 32       	cpi	r24, 0x2D	; 45
    56d6:	61 f0       	breq	.+24     	; 0x56f0 <vfprintf+0x92>
    56d8:	80 33       	cpi	r24, 0x30	; 48
    56da:	69 f4       	brne	.+26     	; 0x56f6 <vfprintf+0x98>
    56dc:	23 2d       	mov	r18, r3
    56de:	21 60       	ori	r18, 0x01	; 1
    56e0:	16 c0       	rjmp	.+44     	; 0x570e <vfprintf+0xb0>
    56e2:	83 2d       	mov	r24, r3
    56e4:	82 60       	ori	r24, 0x02	; 2
    56e6:	38 2e       	mov	r3, r24
    56e8:	e3 2d       	mov	r30, r3
    56ea:	e4 60       	ori	r30, 0x04	; 4
    56ec:	3e 2e       	mov	r3, r30
    56ee:	2a c0       	rjmp	.+84     	; 0x5744 <vfprintf+0xe6>
    56f0:	f3 2d       	mov	r31, r3
    56f2:	f8 60       	ori	r31, 0x08	; 8
    56f4:	1d c0       	rjmp	.+58     	; 0x5730 <vfprintf+0xd2>
    56f6:	37 fc       	sbrc	r3, 7
    56f8:	2d c0       	rjmp	.+90     	; 0x5754 <vfprintf+0xf6>
    56fa:	20 ed       	ldi	r18, 0xD0	; 208
    56fc:	28 0f       	add	r18, r24
    56fe:	2a 30       	cpi	r18, 0x0A	; 10
    5700:	40 f0       	brcs	.+16     	; 0x5712 <vfprintf+0xb4>
    5702:	8e 32       	cpi	r24, 0x2E	; 46
    5704:	b9 f4       	brne	.+46     	; 0x5734 <vfprintf+0xd6>
    5706:	36 fc       	sbrc	r3, 6
    5708:	81 c1       	rjmp	.+770    	; 0x5a0c <vfprintf+0x3ae>
    570a:	23 2d       	mov	r18, r3
    570c:	20 64       	ori	r18, 0x40	; 64
    570e:	32 2e       	mov	r3, r18
    5710:	19 c0       	rjmp	.+50     	; 0x5744 <vfprintf+0xe6>
    5712:	36 fe       	sbrs	r3, 6
    5714:	06 c0       	rjmp	.+12     	; 0x5722 <vfprintf+0xc4>
    5716:	8a e0       	ldi	r24, 0x0A	; 10
    5718:	98 9e       	mul	r9, r24
    571a:	20 0d       	add	r18, r0
    571c:	11 24       	eor	r1, r1
    571e:	92 2e       	mov	r9, r18
    5720:	11 c0       	rjmp	.+34     	; 0x5744 <vfprintf+0xe6>
    5722:	ea e0       	ldi	r30, 0x0A	; 10
    5724:	2e 9e       	mul	r2, r30
    5726:	20 0d       	add	r18, r0
    5728:	11 24       	eor	r1, r1
    572a:	22 2e       	mov	r2, r18
    572c:	f3 2d       	mov	r31, r3
    572e:	f0 62       	ori	r31, 0x20	; 32
    5730:	3f 2e       	mov	r3, r31
    5732:	08 c0       	rjmp	.+16     	; 0x5744 <vfprintf+0xe6>
    5734:	8c 36       	cpi	r24, 0x6C	; 108
    5736:	21 f4       	brne	.+8      	; 0x5740 <vfprintf+0xe2>
    5738:	83 2d       	mov	r24, r3
    573a:	80 68       	ori	r24, 0x80	; 128
    573c:	38 2e       	mov	r3, r24
    573e:	02 c0       	rjmp	.+4      	; 0x5744 <vfprintf+0xe6>
    5740:	88 36       	cpi	r24, 0x68	; 104
    5742:	41 f4       	brne	.+16     	; 0x5754 <vfprintf+0xf6>
    5744:	f7 01       	movw	r30, r14
    5746:	93 fd       	sbrc	r25, 3
    5748:	85 91       	lpm	r24, Z+
    574a:	93 ff       	sbrs	r25, 3
    574c:	81 91       	ld	r24, Z+
    574e:	7f 01       	movw	r14, r30
    5750:	81 11       	cpse	r24, r1
    5752:	b3 cf       	rjmp	.-154    	; 0x56ba <vfprintf+0x5c>
    5754:	98 2f       	mov	r25, r24
    5756:	9f 7d       	andi	r25, 0xDF	; 223
    5758:	95 54       	subi	r25, 0x45	; 69
    575a:	93 30       	cpi	r25, 0x03	; 3
    575c:	28 f4       	brcc	.+10     	; 0x5768 <vfprintf+0x10a>
    575e:	0c 5f       	subi	r16, 0xFC	; 252
    5760:	1f 4f       	sbci	r17, 0xFF	; 255
    5762:	9f e3       	ldi	r25, 0x3F	; 63
    5764:	99 83       	std	Y+1, r25	; 0x01
    5766:	0d c0       	rjmp	.+26     	; 0x5782 <vfprintf+0x124>
    5768:	83 36       	cpi	r24, 0x63	; 99
    576a:	31 f0       	breq	.+12     	; 0x5778 <vfprintf+0x11a>
    576c:	83 37       	cpi	r24, 0x73	; 115
    576e:	71 f0       	breq	.+28     	; 0x578c <vfprintf+0x12e>
    5770:	83 35       	cpi	r24, 0x53	; 83
    5772:	09 f0       	breq	.+2      	; 0x5776 <vfprintf+0x118>
    5774:	59 c0       	rjmp	.+178    	; 0x5828 <vfprintf+0x1ca>
    5776:	21 c0       	rjmp	.+66     	; 0x57ba <vfprintf+0x15c>
    5778:	f8 01       	movw	r30, r16
    577a:	80 81       	ld	r24, Z
    577c:	89 83       	std	Y+1, r24	; 0x01
    577e:	0e 5f       	subi	r16, 0xFE	; 254
    5780:	1f 4f       	sbci	r17, 0xFF	; 255
    5782:	88 24       	eor	r8, r8
    5784:	83 94       	inc	r8
    5786:	91 2c       	mov	r9, r1
    5788:	53 01       	movw	r10, r6
    578a:	13 c0       	rjmp	.+38     	; 0x57b2 <vfprintf+0x154>
    578c:	28 01       	movw	r4, r16
    578e:	f2 e0       	ldi	r31, 0x02	; 2
    5790:	4f 0e       	add	r4, r31
    5792:	51 1c       	adc	r5, r1
    5794:	f8 01       	movw	r30, r16
    5796:	a0 80       	ld	r10, Z
    5798:	b1 80       	ldd	r11, Z+1	; 0x01
    579a:	36 fe       	sbrs	r3, 6
    579c:	03 c0       	rjmp	.+6      	; 0x57a4 <vfprintf+0x146>
    579e:	69 2d       	mov	r22, r9
    57a0:	70 e0       	ldi	r23, 0x00	; 0
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <vfprintf+0x14a>
    57a4:	6f ef       	ldi	r22, 0xFF	; 255
    57a6:	7f ef       	ldi	r23, 0xFF	; 255
    57a8:	c5 01       	movw	r24, r10
    57aa:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <strnlen>
    57ae:	4c 01       	movw	r8, r24
    57b0:	82 01       	movw	r16, r4
    57b2:	f3 2d       	mov	r31, r3
    57b4:	ff 77       	andi	r31, 0x7F	; 127
    57b6:	3f 2e       	mov	r3, r31
    57b8:	16 c0       	rjmp	.+44     	; 0x57e6 <vfprintf+0x188>
    57ba:	28 01       	movw	r4, r16
    57bc:	22 e0       	ldi	r18, 0x02	; 2
    57be:	42 0e       	add	r4, r18
    57c0:	51 1c       	adc	r5, r1
    57c2:	f8 01       	movw	r30, r16
    57c4:	a0 80       	ld	r10, Z
    57c6:	b1 80       	ldd	r11, Z+1	; 0x01
    57c8:	36 fe       	sbrs	r3, 6
    57ca:	03 c0       	rjmp	.+6      	; 0x57d2 <vfprintf+0x174>
    57cc:	69 2d       	mov	r22, r9
    57ce:	70 e0       	ldi	r23, 0x00	; 0
    57d0:	02 c0       	rjmp	.+4      	; 0x57d6 <vfprintf+0x178>
    57d2:	6f ef       	ldi	r22, 0xFF	; 255
    57d4:	7f ef       	ldi	r23, 0xFF	; 255
    57d6:	c5 01       	movw	r24, r10
    57d8:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <strnlen_P>
    57dc:	4c 01       	movw	r8, r24
    57de:	f3 2d       	mov	r31, r3
    57e0:	f0 68       	ori	r31, 0x80	; 128
    57e2:	3f 2e       	mov	r3, r31
    57e4:	82 01       	movw	r16, r4
    57e6:	33 fc       	sbrc	r3, 3
    57e8:	1b c0       	rjmp	.+54     	; 0x5820 <vfprintf+0x1c2>
    57ea:	82 2d       	mov	r24, r2
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	88 16       	cp	r8, r24
    57f0:	99 06       	cpc	r9, r25
    57f2:	b0 f4       	brcc	.+44     	; 0x5820 <vfprintf+0x1c2>
    57f4:	b6 01       	movw	r22, r12
    57f6:	80 e2       	ldi	r24, 0x20	; 32
    57f8:	90 e0       	ldi	r25, 0x00	; 0
    57fa:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    57fe:	2a 94       	dec	r2
    5800:	f4 cf       	rjmp	.-24     	; 0x57ea <vfprintf+0x18c>
    5802:	f5 01       	movw	r30, r10
    5804:	37 fc       	sbrc	r3, 7
    5806:	85 91       	lpm	r24, Z+
    5808:	37 fe       	sbrs	r3, 7
    580a:	81 91       	ld	r24, Z+
    580c:	5f 01       	movw	r10, r30
    580e:	b6 01       	movw	r22, r12
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    5816:	21 10       	cpse	r2, r1
    5818:	2a 94       	dec	r2
    581a:	21 e0       	ldi	r18, 0x01	; 1
    581c:	82 1a       	sub	r8, r18
    581e:	91 08       	sbc	r9, r1
    5820:	81 14       	cp	r8, r1
    5822:	91 04       	cpc	r9, r1
    5824:	71 f7       	brne	.-36     	; 0x5802 <vfprintf+0x1a4>
    5826:	e8 c0       	rjmp	.+464    	; 0x59f8 <vfprintf+0x39a>
    5828:	84 36       	cpi	r24, 0x64	; 100
    582a:	11 f0       	breq	.+4      	; 0x5830 <vfprintf+0x1d2>
    582c:	89 36       	cpi	r24, 0x69	; 105
    582e:	41 f5       	brne	.+80     	; 0x5880 <vfprintf+0x222>
    5830:	f8 01       	movw	r30, r16
    5832:	37 fe       	sbrs	r3, 7
    5834:	07 c0       	rjmp	.+14     	; 0x5844 <vfprintf+0x1e6>
    5836:	60 81       	ld	r22, Z
    5838:	71 81       	ldd	r23, Z+1	; 0x01
    583a:	82 81       	ldd	r24, Z+2	; 0x02
    583c:	93 81       	ldd	r25, Z+3	; 0x03
    583e:	0c 5f       	subi	r16, 0xFC	; 252
    5840:	1f 4f       	sbci	r17, 0xFF	; 255
    5842:	08 c0       	rjmp	.+16     	; 0x5854 <vfprintf+0x1f6>
    5844:	60 81       	ld	r22, Z
    5846:	71 81       	ldd	r23, Z+1	; 0x01
    5848:	07 2e       	mov	r0, r23
    584a:	00 0c       	add	r0, r0
    584c:	88 0b       	sbc	r24, r24
    584e:	99 0b       	sbc	r25, r25
    5850:	0e 5f       	subi	r16, 0xFE	; 254
    5852:	1f 4f       	sbci	r17, 0xFF	; 255
    5854:	f3 2d       	mov	r31, r3
    5856:	ff 76       	andi	r31, 0x6F	; 111
    5858:	3f 2e       	mov	r3, r31
    585a:	97 ff       	sbrs	r25, 7
    585c:	09 c0       	rjmp	.+18     	; 0x5870 <vfprintf+0x212>
    585e:	90 95       	com	r25
    5860:	80 95       	com	r24
    5862:	70 95       	com	r23
    5864:	61 95       	neg	r22
    5866:	7f 4f       	sbci	r23, 0xFF	; 255
    5868:	8f 4f       	sbci	r24, 0xFF	; 255
    586a:	9f 4f       	sbci	r25, 0xFF	; 255
    586c:	f0 68       	ori	r31, 0x80	; 128
    586e:	3f 2e       	mov	r3, r31
    5870:	2a e0       	ldi	r18, 0x0A	; 10
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	a3 01       	movw	r20, r6
    5876:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <__ultoa_invert>
    587a:	88 2e       	mov	r8, r24
    587c:	86 18       	sub	r8, r6
    587e:	45 c0       	rjmp	.+138    	; 0x590a <vfprintf+0x2ac>
    5880:	85 37       	cpi	r24, 0x75	; 117
    5882:	31 f4       	brne	.+12     	; 0x5890 <vfprintf+0x232>
    5884:	23 2d       	mov	r18, r3
    5886:	2f 7e       	andi	r18, 0xEF	; 239
    5888:	b2 2e       	mov	r11, r18
    588a:	2a e0       	ldi	r18, 0x0A	; 10
    588c:	30 e0       	ldi	r19, 0x00	; 0
    588e:	25 c0       	rjmp	.+74     	; 0x58da <vfprintf+0x27c>
    5890:	93 2d       	mov	r25, r3
    5892:	99 7f       	andi	r25, 0xF9	; 249
    5894:	b9 2e       	mov	r11, r25
    5896:	8f 36       	cpi	r24, 0x6F	; 111
    5898:	c1 f0       	breq	.+48     	; 0x58ca <vfprintf+0x26c>
    589a:	18 f4       	brcc	.+6      	; 0x58a2 <vfprintf+0x244>
    589c:	88 35       	cpi	r24, 0x58	; 88
    589e:	79 f0       	breq	.+30     	; 0x58be <vfprintf+0x260>
    58a0:	b5 c0       	rjmp	.+362    	; 0x5a0c <vfprintf+0x3ae>
    58a2:	80 37       	cpi	r24, 0x70	; 112
    58a4:	19 f0       	breq	.+6      	; 0x58ac <vfprintf+0x24e>
    58a6:	88 37       	cpi	r24, 0x78	; 120
    58a8:	21 f0       	breq	.+8      	; 0x58b2 <vfprintf+0x254>
    58aa:	b0 c0       	rjmp	.+352    	; 0x5a0c <vfprintf+0x3ae>
    58ac:	e9 2f       	mov	r30, r25
    58ae:	e0 61       	ori	r30, 0x10	; 16
    58b0:	be 2e       	mov	r11, r30
    58b2:	b4 fe       	sbrs	r11, 4
    58b4:	0d c0       	rjmp	.+26     	; 0x58d0 <vfprintf+0x272>
    58b6:	fb 2d       	mov	r31, r11
    58b8:	f4 60       	ori	r31, 0x04	; 4
    58ba:	bf 2e       	mov	r11, r31
    58bc:	09 c0       	rjmp	.+18     	; 0x58d0 <vfprintf+0x272>
    58be:	34 fe       	sbrs	r3, 4
    58c0:	0a c0       	rjmp	.+20     	; 0x58d6 <vfprintf+0x278>
    58c2:	29 2f       	mov	r18, r25
    58c4:	26 60       	ori	r18, 0x06	; 6
    58c6:	b2 2e       	mov	r11, r18
    58c8:	06 c0       	rjmp	.+12     	; 0x58d6 <vfprintf+0x278>
    58ca:	28 e0       	ldi	r18, 0x08	; 8
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	05 c0       	rjmp	.+10     	; 0x58da <vfprintf+0x27c>
    58d0:	20 e1       	ldi	r18, 0x10	; 16
    58d2:	30 e0       	ldi	r19, 0x00	; 0
    58d4:	02 c0       	rjmp	.+4      	; 0x58da <vfprintf+0x27c>
    58d6:	20 e1       	ldi	r18, 0x10	; 16
    58d8:	32 e0       	ldi	r19, 0x02	; 2
    58da:	f8 01       	movw	r30, r16
    58dc:	b7 fe       	sbrs	r11, 7
    58de:	07 c0       	rjmp	.+14     	; 0x58ee <vfprintf+0x290>
    58e0:	60 81       	ld	r22, Z
    58e2:	71 81       	ldd	r23, Z+1	; 0x01
    58e4:	82 81       	ldd	r24, Z+2	; 0x02
    58e6:	93 81       	ldd	r25, Z+3	; 0x03
    58e8:	0c 5f       	subi	r16, 0xFC	; 252
    58ea:	1f 4f       	sbci	r17, 0xFF	; 255
    58ec:	06 c0       	rjmp	.+12     	; 0x58fa <vfprintf+0x29c>
    58ee:	60 81       	ld	r22, Z
    58f0:	71 81       	ldd	r23, Z+1	; 0x01
    58f2:	80 e0       	ldi	r24, 0x00	; 0
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 5f       	subi	r16, 0xFE	; 254
    58f8:	1f 4f       	sbci	r17, 0xFF	; 255
    58fa:	a3 01       	movw	r20, r6
    58fc:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <__ultoa_invert>
    5900:	88 2e       	mov	r8, r24
    5902:	86 18       	sub	r8, r6
    5904:	fb 2d       	mov	r31, r11
    5906:	ff 77       	andi	r31, 0x7F	; 127
    5908:	3f 2e       	mov	r3, r31
    590a:	36 fe       	sbrs	r3, 6
    590c:	0d c0       	rjmp	.+26     	; 0x5928 <vfprintf+0x2ca>
    590e:	23 2d       	mov	r18, r3
    5910:	2e 7f       	andi	r18, 0xFE	; 254
    5912:	a2 2e       	mov	r10, r18
    5914:	89 14       	cp	r8, r9
    5916:	58 f4       	brcc	.+22     	; 0x592e <vfprintf+0x2d0>
    5918:	34 fe       	sbrs	r3, 4
    591a:	0b c0       	rjmp	.+22     	; 0x5932 <vfprintf+0x2d4>
    591c:	32 fc       	sbrc	r3, 2
    591e:	09 c0       	rjmp	.+18     	; 0x5932 <vfprintf+0x2d4>
    5920:	83 2d       	mov	r24, r3
    5922:	8e 7e       	andi	r24, 0xEE	; 238
    5924:	a8 2e       	mov	r10, r24
    5926:	05 c0       	rjmp	.+10     	; 0x5932 <vfprintf+0x2d4>
    5928:	b8 2c       	mov	r11, r8
    592a:	a3 2c       	mov	r10, r3
    592c:	03 c0       	rjmp	.+6      	; 0x5934 <vfprintf+0x2d6>
    592e:	b8 2c       	mov	r11, r8
    5930:	01 c0       	rjmp	.+2      	; 0x5934 <vfprintf+0x2d6>
    5932:	b9 2c       	mov	r11, r9
    5934:	a4 fe       	sbrs	r10, 4
    5936:	0f c0       	rjmp	.+30     	; 0x5956 <vfprintf+0x2f8>
    5938:	fe 01       	movw	r30, r28
    593a:	e8 0d       	add	r30, r8
    593c:	f1 1d       	adc	r31, r1
    593e:	80 81       	ld	r24, Z
    5940:	80 33       	cpi	r24, 0x30	; 48
    5942:	21 f4       	brne	.+8      	; 0x594c <vfprintf+0x2ee>
    5944:	9a 2d       	mov	r25, r10
    5946:	99 7e       	andi	r25, 0xE9	; 233
    5948:	a9 2e       	mov	r10, r25
    594a:	09 c0       	rjmp	.+18     	; 0x595e <vfprintf+0x300>
    594c:	a2 fe       	sbrs	r10, 2
    594e:	06 c0       	rjmp	.+12     	; 0x595c <vfprintf+0x2fe>
    5950:	b3 94       	inc	r11
    5952:	b3 94       	inc	r11
    5954:	04 c0       	rjmp	.+8      	; 0x595e <vfprintf+0x300>
    5956:	8a 2d       	mov	r24, r10
    5958:	86 78       	andi	r24, 0x86	; 134
    595a:	09 f0       	breq	.+2      	; 0x595e <vfprintf+0x300>
    595c:	b3 94       	inc	r11
    595e:	a3 fc       	sbrc	r10, 3
    5960:	11 c0       	rjmp	.+34     	; 0x5984 <vfprintf+0x326>
    5962:	a0 fe       	sbrs	r10, 0
    5964:	06 c0       	rjmp	.+12     	; 0x5972 <vfprintf+0x314>
    5966:	b2 14       	cp	r11, r2
    5968:	88 f4       	brcc	.+34     	; 0x598c <vfprintf+0x32e>
    596a:	28 0c       	add	r2, r8
    596c:	92 2c       	mov	r9, r2
    596e:	9b 18       	sub	r9, r11
    5970:	0e c0       	rjmp	.+28     	; 0x598e <vfprintf+0x330>
    5972:	b2 14       	cp	r11, r2
    5974:	60 f4       	brcc	.+24     	; 0x598e <vfprintf+0x330>
    5976:	b6 01       	movw	r22, r12
    5978:	80 e2       	ldi	r24, 0x20	; 32
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    5980:	b3 94       	inc	r11
    5982:	f7 cf       	rjmp	.-18     	; 0x5972 <vfprintf+0x314>
    5984:	b2 14       	cp	r11, r2
    5986:	18 f4       	brcc	.+6      	; 0x598e <vfprintf+0x330>
    5988:	2b 18       	sub	r2, r11
    598a:	02 c0       	rjmp	.+4      	; 0x5990 <vfprintf+0x332>
    598c:	98 2c       	mov	r9, r8
    598e:	21 2c       	mov	r2, r1
    5990:	a4 fe       	sbrs	r10, 4
    5992:	10 c0       	rjmp	.+32     	; 0x59b4 <vfprintf+0x356>
    5994:	b6 01       	movw	r22, r12
    5996:	80 e3       	ldi	r24, 0x30	; 48
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    599e:	a2 fe       	sbrs	r10, 2
    59a0:	17 c0       	rjmp	.+46     	; 0x59d0 <vfprintf+0x372>
    59a2:	a1 fc       	sbrc	r10, 1
    59a4:	03 c0       	rjmp	.+6      	; 0x59ac <vfprintf+0x34e>
    59a6:	88 e7       	ldi	r24, 0x78	; 120
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	02 c0       	rjmp	.+4      	; 0x59b0 <vfprintf+0x352>
    59ac:	88 e5       	ldi	r24, 0x58	; 88
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	b6 01       	movw	r22, r12
    59b2:	0c c0       	rjmp	.+24     	; 0x59cc <vfprintf+0x36e>
    59b4:	8a 2d       	mov	r24, r10
    59b6:	86 78       	andi	r24, 0x86	; 134
    59b8:	59 f0       	breq	.+22     	; 0x59d0 <vfprintf+0x372>
    59ba:	a1 fe       	sbrs	r10, 1
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <vfprintf+0x364>
    59be:	8b e2       	ldi	r24, 0x2B	; 43
    59c0:	01 c0       	rjmp	.+2      	; 0x59c4 <vfprintf+0x366>
    59c2:	80 e2       	ldi	r24, 0x20	; 32
    59c4:	a7 fc       	sbrc	r10, 7
    59c6:	8d e2       	ldi	r24, 0x2D	; 45
    59c8:	b6 01       	movw	r22, r12
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    59d0:	89 14       	cp	r8, r9
    59d2:	38 f4       	brcc	.+14     	; 0x59e2 <vfprintf+0x384>
    59d4:	b6 01       	movw	r22, r12
    59d6:	80 e3       	ldi	r24, 0x30	; 48
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    59de:	9a 94       	dec	r9
    59e0:	f7 cf       	rjmp	.-18     	; 0x59d0 <vfprintf+0x372>
    59e2:	8a 94       	dec	r8
    59e4:	f3 01       	movw	r30, r6
    59e6:	e8 0d       	add	r30, r8
    59e8:	f1 1d       	adc	r31, r1
    59ea:	80 81       	ld	r24, Z
    59ec:	b6 01       	movw	r22, r12
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    59f4:	81 10       	cpse	r8, r1
    59f6:	f5 cf       	rjmp	.-22     	; 0x59e2 <vfprintf+0x384>
    59f8:	22 20       	and	r2, r2
    59fa:	09 f4       	brne	.+2      	; 0x59fe <vfprintf+0x3a0>
    59fc:	42 ce       	rjmp	.-892    	; 0x5682 <vfprintf+0x24>
    59fe:	b6 01       	movw	r22, r12
    5a00:	80 e2       	ldi	r24, 0x20	; 32
    5a02:	90 e0       	ldi	r25, 0x00	; 0
    5a04:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <fputc>
    5a08:	2a 94       	dec	r2
    5a0a:	f6 cf       	rjmp	.-20     	; 0x59f8 <vfprintf+0x39a>
    5a0c:	f6 01       	movw	r30, r12
    5a0e:	86 81       	ldd	r24, Z+6	; 0x06
    5a10:	97 81       	ldd	r25, Z+7	; 0x07
    5a12:	02 c0       	rjmp	.+4      	; 0x5a18 <vfprintf+0x3ba>
    5a14:	8f ef       	ldi	r24, 0xFF	; 255
    5a16:	9f ef       	ldi	r25, 0xFF	; 255
    5a18:	2b 96       	adiw	r28, 0x0b	; 11
    5a1a:	e2 e1       	ldi	r30, 0x12	; 18
    5a1c:	0c 94 24 2e 	jmp	0x5c48	; 0x5c48 <__epilogue_restores__>

00005a20 <strnlen_P>:
    5a20:	fc 01       	movw	r30, r24
    5a22:	05 90       	lpm	r0, Z+
    5a24:	61 50       	subi	r22, 0x01	; 1
    5a26:	70 40       	sbci	r23, 0x00	; 0
    5a28:	01 10       	cpse	r0, r1
    5a2a:	d8 f7       	brcc	.-10     	; 0x5a22 <strnlen_P+0x2>
    5a2c:	80 95       	com	r24
    5a2e:	90 95       	com	r25
    5a30:	8e 0f       	add	r24, r30
    5a32:	9f 1f       	adc	r25, r31
    5a34:	08 95       	ret

00005a36 <strnlen>:
    5a36:	fc 01       	movw	r30, r24
    5a38:	61 50       	subi	r22, 0x01	; 1
    5a3a:	70 40       	sbci	r23, 0x00	; 0
    5a3c:	01 90       	ld	r0, Z+
    5a3e:	01 10       	cpse	r0, r1
    5a40:	d8 f7       	brcc	.-10     	; 0x5a38 <strnlen+0x2>
    5a42:	80 95       	com	r24
    5a44:	90 95       	com	r25
    5a46:	8e 0f       	add	r24, r30
    5a48:	9f 1f       	adc	r25, r31
    5a4a:	08 95       	ret

00005a4c <fputc>:
    5a4c:	0f 93       	push	r16
    5a4e:	1f 93       	push	r17
    5a50:	cf 93       	push	r28
    5a52:	df 93       	push	r29
    5a54:	fb 01       	movw	r30, r22
    5a56:	23 81       	ldd	r18, Z+3	; 0x03
    5a58:	21 fd       	sbrc	r18, 1
    5a5a:	03 c0       	rjmp	.+6      	; 0x5a62 <fputc+0x16>
    5a5c:	8f ef       	ldi	r24, 0xFF	; 255
    5a5e:	9f ef       	ldi	r25, 0xFF	; 255
    5a60:	2c c0       	rjmp	.+88     	; 0x5aba <fputc+0x6e>
    5a62:	22 ff       	sbrs	r18, 2
    5a64:	16 c0       	rjmp	.+44     	; 0x5a92 <fputc+0x46>
    5a66:	46 81       	ldd	r20, Z+6	; 0x06
    5a68:	57 81       	ldd	r21, Z+7	; 0x07
    5a6a:	24 81       	ldd	r18, Z+4	; 0x04
    5a6c:	35 81       	ldd	r19, Z+5	; 0x05
    5a6e:	42 17       	cp	r20, r18
    5a70:	53 07       	cpc	r21, r19
    5a72:	44 f4       	brge	.+16     	; 0x5a84 <fputc+0x38>
    5a74:	a0 81       	ld	r26, Z
    5a76:	b1 81       	ldd	r27, Z+1	; 0x01
    5a78:	9d 01       	movw	r18, r26
    5a7a:	2f 5f       	subi	r18, 0xFF	; 255
    5a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a7e:	31 83       	std	Z+1, r19	; 0x01
    5a80:	20 83       	st	Z, r18
    5a82:	8c 93       	st	X, r24
    5a84:	26 81       	ldd	r18, Z+6	; 0x06
    5a86:	37 81       	ldd	r19, Z+7	; 0x07
    5a88:	2f 5f       	subi	r18, 0xFF	; 255
    5a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a8c:	37 83       	std	Z+7, r19	; 0x07
    5a8e:	26 83       	std	Z+6, r18	; 0x06
    5a90:	14 c0       	rjmp	.+40     	; 0x5aba <fputc+0x6e>
    5a92:	8b 01       	movw	r16, r22
    5a94:	ec 01       	movw	r28, r24
    5a96:	fb 01       	movw	r30, r22
    5a98:	00 84       	ldd	r0, Z+8	; 0x08
    5a9a:	f1 85       	ldd	r31, Z+9	; 0x09
    5a9c:	e0 2d       	mov	r30, r0
    5a9e:	09 95       	icall
    5aa0:	89 2b       	or	r24, r25
    5aa2:	e1 f6       	brne	.-72     	; 0x5a5c <fputc+0x10>
    5aa4:	d8 01       	movw	r26, r16
    5aa6:	16 96       	adiw	r26, 0x06	; 6
    5aa8:	8d 91       	ld	r24, X+
    5aaa:	9c 91       	ld	r25, X
    5aac:	17 97       	sbiw	r26, 0x07	; 7
    5aae:	01 96       	adiw	r24, 0x01	; 1
    5ab0:	17 96       	adiw	r26, 0x07	; 7
    5ab2:	9c 93       	st	X, r25
    5ab4:	8e 93       	st	-X, r24
    5ab6:	16 97       	sbiw	r26, 0x06	; 6
    5ab8:	ce 01       	movw	r24, r28
    5aba:	df 91       	pop	r29
    5abc:	cf 91       	pop	r28
    5abe:	1f 91       	pop	r17
    5ac0:	0f 91       	pop	r16
    5ac2:	08 95       	ret

00005ac4 <__ultoa_invert>:
    5ac4:	fa 01       	movw	r30, r20
    5ac6:	aa 27       	eor	r26, r26
    5ac8:	28 30       	cpi	r18, 0x08	; 8
    5aca:	51 f1       	breq	.+84     	; 0x5b20 <__ultoa_invert+0x5c>
    5acc:	20 31       	cpi	r18, 0x10	; 16
    5ace:	81 f1       	breq	.+96     	; 0x5b30 <__ultoa_invert+0x6c>
    5ad0:	e8 94       	clt
    5ad2:	6f 93       	push	r22
    5ad4:	6e 7f       	andi	r22, 0xFE	; 254
    5ad6:	6e 5f       	subi	r22, 0xFE	; 254
    5ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    5ada:	8f 4f       	sbci	r24, 0xFF	; 255
    5adc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ade:	af 4f       	sbci	r26, 0xFF	; 255
    5ae0:	b1 e0       	ldi	r27, 0x01	; 1
    5ae2:	3e d0       	rcall	.+124    	; 0x5b60 <__ultoa_invert+0x9c>
    5ae4:	b4 e0       	ldi	r27, 0x04	; 4
    5ae6:	3c d0       	rcall	.+120    	; 0x5b60 <__ultoa_invert+0x9c>
    5ae8:	67 0f       	add	r22, r23
    5aea:	78 1f       	adc	r23, r24
    5aec:	89 1f       	adc	r24, r25
    5aee:	9a 1f       	adc	r25, r26
    5af0:	a1 1d       	adc	r26, r1
    5af2:	68 0f       	add	r22, r24
    5af4:	79 1f       	adc	r23, r25
    5af6:	8a 1f       	adc	r24, r26
    5af8:	91 1d       	adc	r25, r1
    5afa:	a1 1d       	adc	r26, r1
    5afc:	6a 0f       	add	r22, r26
    5afe:	71 1d       	adc	r23, r1
    5b00:	81 1d       	adc	r24, r1
    5b02:	91 1d       	adc	r25, r1
    5b04:	a1 1d       	adc	r26, r1
    5b06:	20 d0       	rcall	.+64     	; 0x5b48 <__ultoa_invert+0x84>
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <__ultoa_invert+0x48>
    5b0a:	68 94       	set
    5b0c:	3f 91       	pop	r19
    5b0e:	2a e0       	ldi	r18, 0x0A	; 10
    5b10:	26 9f       	mul	r18, r22
    5b12:	11 24       	eor	r1, r1
    5b14:	30 19       	sub	r19, r0
    5b16:	30 5d       	subi	r19, 0xD0	; 208
    5b18:	31 93       	st	Z+, r19
    5b1a:	de f6       	brtc	.-74     	; 0x5ad2 <__ultoa_invert+0xe>
    5b1c:	cf 01       	movw	r24, r30
    5b1e:	08 95       	ret
    5b20:	46 2f       	mov	r20, r22
    5b22:	47 70       	andi	r20, 0x07	; 7
    5b24:	40 5d       	subi	r20, 0xD0	; 208
    5b26:	41 93       	st	Z+, r20
    5b28:	b3 e0       	ldi	r27, 0x03	; 3
    5b2a:	0f d0       	rcall	.+30     	; 0x5b4a <__ultoa_invert+0x86>
    5b2c:	c9 f7       	brne	.-14     	; 0x5b20 <__ultoa_invert+0x5c>
    5b2e:	f6 cf       	rjmp	.-20     	; 0x5b1c <__ultoa_invert+0x58>
    5b30:	46 2f       	mov	r20, r22
    5b32:	4f 70       	andi	r20, 0x0F	; 15
    5b34:	40 5d       	subi	r20, 0xD0	; 208
    5b36:	4a 33       	cpi	r20, 0x3A	; 58
    5b38:	18 f0       	brcs	.+6      	; 0x5b40 <__ultoa_invert+0x7c>
    5b3a:	49 5d       	subi	r20, 0xD9	; 217
    5b3c:	31 fd       	sbrc	r19, 1
    5b3e:	40 52       	subi	r20, 0x20	; 32
    5b40:	41 93       	st	Z+, r20
    5b42:	02 d0       	rcall	.+4      	; 0x5b48 <__ultoa_invert+0x84>
    5b44:	a9 f7       	brne	.-22     	; 0x5b30 <__ultoa_invert+0x6c>
    5b46:	ea cf       	rjmp	.-44     	; 0x5b1c <__ultoa_invert+0x58>
    5b48:	b4 e0       	ldi	r27, 0x04	; 4
    5b4a:	a6 95       	lsr	r26
    5b4c:	97 95       	ror	r25
    5b4e:	87 95       	ror	r24
    5b50:	77 95       	ror	r23
    5b52:	67 95       	ror	r22
    5b54:	ba 95       	dec	r27
    5b56:	c9 f7       	brne	.-14     	; 0x5b4a <__ultoa_invert+0x86>
    5b58:	00 97       	sbiw	r24, 0x00	; 0
    5b5a:	61 05       	cpc	r22, r1
    5b5c:	71 05       	cpc	r23, r1
    5b5e:	08 95       	ret
    5b60:	9b 01       	movw	r18, r22
    5b62:	ac 01       	movw	r20, r24
    5b64:	0a 2e       	mov	r0, r26
    5b66:	06 94       	lsr	r0
    5b68:	57 95       	ror	r21
    5b6a:	47 95       	ror	r20
    5b6c:	37 95       	ror	r19
    5b6e:	27 95       	ror	r18
    5b70:	ba 95       	dec	r27
    5b72:	c9 f7       	brne	.-14     	; 0x5b66 <__ultoa_invert+0xa2>
    5b74:	62 0f       	add	r22, r18
    5b76:	73 1f       	adc	r23, r19
    5b78:	84 1f       	adc	r24, r20
    5b7a:	95 1f       	adc	r25, r21
    5b7c:	a0 1d       	adc	r26, r0
    5b7e:	08 95       	ret

00005b80 <eeprom_read_byte>:
    5b80:	f9 99       	sbic	0x1f, 1	; 31
    5b82:	fe cf       	rjmp	.-4      	; 0x5b80 <eeprom_read_byte>
    5b84:	92 bd       	out	0x22, r25	; 34
    5b86:	81 bd       	out	0x21, r24	; 33
    5b88:	f8 9a       	sbi	0x1f, 0	; 31
    5b8a:	99 27       	eor	r25, r25
    5b8c:	80 b5       	in	r24, 0x20	; 32
    5b8e:	08 95       	ret

00005b90 <eeprom_read_dword>:
    5b90:	a6 e1       	ldi	r26, 0x16	; 22
    5b92:	b0 e0       	ldi	r27, 0x00	; 0
    5b94:	44 e0       	ldi	r20, 0x04	; 4
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <eeprom_read_blraw>

00005b9c <eeprom_read_word>:
    5b9c:	a8 e1       	ldi	r26, 0x18	; 24
    5b9e:	b0 e0       	ldi	r27, 0x00	; 0
    5ba0:	42 e0       	ldi	r20, 0x02	; 2
    5ba2:	50 e0       	ldi	r21, 0x00	; 0
    5ba4:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <eeprom_read_blraw>

00005ba8 <eeprom_update_byte>:
    5ba8:	26 2f       	mov	r18, r22

00005baa <eeprom_update_r18>:
    5baa:	f9 99       	sbic	0x1f, 1	; 31
    5bac:	fe cf       	rjmp	.-4      	; 0x5baa <eeprom_update_r18>
    5bae:	92 bd       	out	0x22, r25	; 34
    5bb0:	81 bd       	out	0x21, r24	; 33
    5bb2:	f8 9a       	sbi	0x1f, 0	; 31
    5bb4:	01 97       	sbiw	r24, 0x01	; 1
    5bb6:	00 b4       	in	r0, 0x20	; 32
    5bb8:	02 16       	cp	r0, r18
    5bba:	39 f0       	breq	.+14     	; 0x5bca <eeprom_update_r18+0x20>
    5bbc:	1f ba       	out	0x1f, r1	; 31
    5bbe:	20 bd       	out	0x20, r18	; 32
    5bc0:	0f b6       	in	r0, 0x3f	; 63
    5bc2:	f8 94       	cli
    5bc4:	fa 9a       	sbi	0x1f, 2	; 31
    5bc6:	f9 9a       	sbi	0x1f, 1	; 31
    5bc8:	0f be       	out	0x3f, r0	; 63
    5bca:	08 95       	ret

00005bcc <eeprom_update_dword>:
    5bcc:	03 96       	adiw	r24, 0x03	; 3
    5bce:	27 2f       	mov	r18, r23
    5bd0:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <eeprom_update_r18>
    5bd4:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <eeprom_update_byte>
    5bd8:	25 2f       	mov	r18, r21
    5bda:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <eeprom_update_r18>
    5bde:	24 2f       	mov	r18, r20
    5be0:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <eeprom_update_r18>

00005be4 <eeprom_update_word>:
    5be4:	01 96       	adiw	r24, 0x01	; 1
    5be6:	27 2f       	mov	r18, r23
    5be8:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <eeprom_update_r18>
    5bec:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <eeprom_update_byte>

00005bf0 <eeprom_read_block>:
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22

00005bf4 <eeprom_read_blraw>:
    5bf4:	fc 01       	movw	r30, r24
    5bf6:	f9 99       	sbic	0x1f, 1	; 31
    5bf8:	fe cf       	rjmp	.-4      	; 0x5bf6 <eeprom_read_blraw+0x2>
    5bfa:	06 c0       	rjmp	.+12     	; 0x5c08 <eeprom_read_blraw+0x14>
    5bfc:	f2 bd       	out	0x22, r31	; 34
    5bfe:	e1 bd       	out	0x21, r30	; 33
    5c00:	f8 9a       	sbi	0x1f, 0	; 31
    5c02:	31 96       	adiw	r30, 0x01	; 1
    5c04:	00 b4       	in	r0, 0x20	; 32
    5c06:	0d 92       	st	X+, r0
    5c08:	41 50       	subi	r20, 0x01	; 1
    5c0a:	50 40       	sbci	r21, 0x00	; 0
    5c0c:	b8 f7       	brcc	.-18     	; 0x5bfc <eeprom_read_blraw+0x8>
    5c0e:	08 95       	ret

00005c10 <__prologue_saves__>:
    5c10:	2f 92       	push	r2
    5c12:	3f 92       	push	r3
    5c14:	4f 92       	push	r4
    5c16:	5f 92       	push	r5
    5c18:	6f 92       	push	r6
    5c1a:	7f 92       	push	r7
    5c1c:	8f 92       	push	r8
    5c1e:	9f 92       	push	r9
    5c20:	af 92       	push	r10
    5c22:	bf 92       	push	r11
    5c24:	cf 92       	push	r12
    5c26:	df 92       	push	r13
    5c28:	ef 92       	push	r14
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
    5c30:	cf 93       	push	r28
    5c32:	df 93       	push	r29
    5c34:	cd b7       	in	r28, 0x3d	; 61
    5c36:	de b7       	in	r29, 0x3e	; 62
    5c38:	ca 1b       	sub	r28, r26
    5c3a:	db 0b       	sbc	r29, r27
    5c3c:	0f b6       	in	r0, 0x3f	; 63
    5c3e:	f8 94       	cli
    5c40:	de bf       	out	0x3e, r29	; 62
    5c42:	0f be       	out	0x3f, r0	; 63
    5c44:	cd bf       	out	0x3d, r28	; 61
    5c46:	09 94       	ijmp

00005c48 <__epilogue_restores__>:
    5c48:	2a 88       	ldd	r2, Y+18	; 0x12
    5c4a:	39 88       	ldd	r3, Y+17	; 0x11
    5c4c:	48 88       	ldd	r4, Y+16	; 0x10
    5c4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c50:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c52:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c54:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c56:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c58:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c5a:	b9 84       	ldd	r11, Y+9	; 0x09
    5c5c:	c8 84       	ldd	r12, Y+8	; 0x08
    5c5e:	df 80       	ldd	r13, Y+7	; 0x07
    5c60:	ee 80       	ldd	r14, Y+6	; 0x06
    5c62:	fd 80       	ldd	r15, Y+5	; 0x05
    5c64:	0c 81       	ldd	r16, Y+4	; 0x04
    5c66:	1b 81       	ldd	r17, Y+3	; 0x03
    5c68:	aa 81       	ldd	r26, Y+2	; 0x02
    5c6a:	b9 81       	ldd	r27, Y+1	; 0x01
    5c6c:	ce 0f       	add	r28, r30
    5c6e:	d1 1d       	adc	r29, r1
    5c70:	0f b6       	in	r0, 0x3f	; 63
    5c72:	f8 94       	cli
    5c74:	de bf       	out	0x3e, r29	; 62
    5c76:	0f be       	out	0x3f, r0	; 63
    5c78:	cd bf       	out	0x3d, r28	; 61
    5c7a:	ed 01       	movw	r28, r26
    5c7c:	08 95       	ret

00005c7e <__do_global_dtors>:
    5c7e:	10 e0       	ldi	r17, 0x00	; 0
    5c80:	c5 ef       	ldi	r28, 0xF5	; 245
    5c82:	d0 e0       	ldi	r29, 0x00	; 0
    5c84:	04 c0       	rjmp	.+8      	; 0x5c8e <__do_global_dtors+0x10>
    5c86:	fe 01       	movw	r30, r28
    5c88:	0e 94 32 29 	call	0x5264	; 0x5264 <__tablejump2__>
    5c8c:	21 96       	adiw	r28, 0x01	; 1
    5c8e:	c6 3f       	cpi	r28, 0xF6	; 246
    5c90:	d1 07       	cpc	r29, r17
    5c92:	c9 f7       	brne	.-14     	; 0x5c86 <__do_global_dtors+0x8>
    5c94:	f8 94       	cli

00005c96 <__stop_program>:
    5c96:	ff cf       	rjmp	.-2      	; 0x5c96 <__stop_program>
