
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000210  00800100  0000651a  000065ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000651a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000281  00800310  00800310  000067de  2**0
                  ALLOC
  3 .eeprom       00000315  00810000  00810000  000067de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00006af3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b50  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00006b90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000079d8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001971  00000000  00000000  0000ea70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004774  00000000  00000000  000103e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dbc  00000000  00000000  00014b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000263b  00000000  00000000  00015914  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b2f  00000000  00000000  00017f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000458  00000000  00000000  0001da7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__dtors_end>
       4:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__vector_1>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__vector_5>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_8>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_11>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_14>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__vector_18>
      4c:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_19>
      50:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      54:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_21>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      68:	6b 01       	movw	r12, r22
      6a:	76 01       	movw	r14, r12
      6c:	81 01       	movw	r16, r2
      6e:	8c 01       	movw	r16, r24
      70:	97 01       	movw	r18, r14
      72:	a2 01       	movw	r20, r4
      74:	ad 01       	movw	r20, r26
      76:	b8 01       	movw	r22, r16
      78:	c3 01       	movw	r24, r6
      7a:	ce 01       	movw	r24, r28
      7c:	d9 01       	movw	r26, r18
      7e:	30 02       	muls	r19, r16
      80:	30 02       	muls	r19, r16
      82:	e4 01       	movw	r28, r8
      84:	ef 01       	movw	r28, r30
      86:	fa 01       	movw	r30, r20
      88:	05 02       	muls	r16, r21
      8a:	10 02       	muls	r17, r16
      8c:	1b 02       	muls	r17, r27
      8e:	26 02       	muls	r18, r22
      90:	3b 02       	muls	r19, r27
      92:	3f 02       	muls	r19, r31
      94:	43 02       	muls	r20, r19
      96:	47 02       	muls	r20, r23
      98:	4b 02       	muls	r20, r27
      9a:	4f 02       	muls	r20, r31
      9c:	53 02       	muls	r21, r19
      9e:	58 02       	muls	r21, r24
      a0:	5c 02       	muls	r21, r28
      a2:	75 02       	muls	r23, r21
      a4:	75 02       	muls	r23, r21
      a6:	60 02       	muls	r22, r16
      a8:	64 02       	muls	r22, r20
      aa:	69 02       	muls	r22, r25
      ac:	6d 02       	muls	r22, r29
      ae:	71 02       	muls	r23, r17
      b0:	86 02       	muls	r24, r22
      b2:	8c 02       	muls	r24, r28
      b4:	92 02       	muls	r25, r18
      b6:	98 02       	muls	r25, r24
      b8:	9e 02       	muls	r25, r30
      ba:	a4 02       	muls	r26, r20
      bc:	aa 02       	muls	r26, r26
      be:	b0 02       	muls	r27, r16
      c0:	b6 02       	muls	r27, r22
      c2:	bc 02       	muls	r27, r28
      c4:	c2 02       	muls	r28, r18
      c6:	e5 02       	muls	r30, r21
      c8:	e5 02       	muls	r30, r21
      ca:	c8 02       	muls	r28, r24
      cc:	ce 02       	muls	r28, r30
      ce:	d4 02       	muls	r29, r20
      d0:	da 02       	muls	r29, r26
      d2:	e0 02       	muls	r30, r16
      d4:	06 03       	mulsu	r16, r22
      d6:	62 03       	mulsu	r22, r18
      d8:	62 03       	mulsu	r22, r18
      da:	23 03       	mulsu	r18, r19
      dc:	47 03       	mulsu	r20, r23
      de:	03 03       	mulsu	r16, r19
      e0:	4a 03       	fmul	r20, r18
      e2:	50 03       	mulsu	r21, r16
      e4:	00 03       	mulsu	r16, r16
      e6:	5a 03       	fmul	r21, r18
      e8:	fd 02       	muls	r31, r29
      ea:	44 03       	mulsu	r20, r20
      ec:	53 03       	mulsu	r21, r19
      ee:	ab 03       	fmulsu	r18, r19
      f0:	7d 03       	fmul	r23, r21
      f2:	ae 03       	fmulsu	r18, r22
      f4:	80 03       	fmuls	r16, r16
      f6:	83 03       	fmuls	r16, r19
      f8:	86 03       	fmuls	r16, r22
      fa:	89 03       	fmulsu	r16, r17
      fc:	8c 03       	fmulsu	r16, r20
      fe:	8f 03       	fmulsu	r16, r23
     100:	92 03       	fmuls	r17, r18
     102:	95 03       	fmuls	r17, r21
     104:	bc 10       	cpse	r11, r12
     106:	bc 10       	cpse	r11, r12
     108:	bc 10       	cpse	r11, r12
     10a:	bc 10       	cpse	r11, r12
     10c:	bc 10       	cpse	r11, r12
     10e:	3e 11       	cpse	r19, r14
     110:	3e 11       	cpse	r19, r14
     112:	da 10       	cpse	r13, r10
     114:	da 10       	cpse	r13, r10
     116:	da 10       	cpse	r13, r10
     118:	da 10       	cpse	r13, r10
     11a:	da 10       	cpse	r13, r10
     11c:	fc 10       	cpse	r15, r12
     11e:	fc 10       	cpse	r15, r12
     120:	fc 10       	cpse	r15, r12
     122:	fc 10       	cpse	r15, r12
     124:	fc 10       	cpse	r15, r12
     126:	3e 11       	cpse	r19, r14
     128:	1c 11       	cpse	r17, r12
     12a:	f8 1c       	adc	r15, r8
     12c:	3a 1d       	adc	r19, r10
     12e:	ae 1d       	adc	r26, r14
     130:	b9 1d       	adc	r27, r9
     132:	c4 1d       	adc	r28, r4
     134:	ce 1d       	adc	r28, r14
     136:	db 1d       	adc	r29, r11
     138:	65 1e       	adc	r6, r21
     13a:	d4 1e       	adc	r13, r20
     13c:	4f 1f       	adc	r20, r31
     13e:	93 1f       	adc	r25, r19
     140:	d7 1f       	adc	r29, r23
     142:	13 1f       	adc	r17, r19
     144:	1d 20       	and	r1, r13
     146:	3f 20       	and	r3, r15
     148:	2e 1e       	adc	r2, r30
     14a:	4d 20       	and	r4, r13
     14c:	71 1d       	adc	r23, r1
     14e:	79 20       	and	r7, r9
     150:	91 26       	eor	r9, r17
     152:	55 26       	eor	r5, r21
     154:	81 26       	eor	r8, r17
     156:	99 26       	eor	r9, r25
     158:	85 26       	eor	r8, r21
     15a:	99 26       	eor	r9, r25
     15c:	65 26       	eor	r6, r21
     15e:	51 26       	eor	r5, r17
     160:	5d 26       	eor	r5, r29
     162:	61 26       	eor	r6, r17
     164:	99 26       	eor	r9, r25
     166:	75 26       	eor	r7, r21
     168:	49 26       	eor	r4, r25
     16a:	79 26       	eor	r7, r25
     16c:	45 26       	eor	r4, r21
     16e:	59 26       	eor	r5, r25
     170:	1d 26       	eor	r1, r29
     172:	21 26       	eor	r2, r17
     174:	25 26       	eor	r2, r21
     176:	29 26       	eor	r2, r25
     178:	2d 26       	eor	r2, r29
     17a:	31 26       	eor	r3, r17
     17c:	35 26       	eor	r3, r21
     17e:	39 26       	eor	r3, r25
     180:	3d 26       	eor	r3, r29
     182:	41 26       	eor	r4, r17
     184:	69 26       	eor	r6, r25
     186:	6d 26       	eor	r6, r29
     188:	95 26       	eor	r9, r21
     18a:	71 26       	eor	r7, r17
     18c:	99 26       	eor	r9, r25
     18e:	4d 26       	eor	r4, r29
     190:	89 26       	eor	r8, r25
     192:	9d 26       	eor	r9, r29
     194:	b9 25       	eor	r27, r9
     196:	bd 25       	eor	r27, r13
     198:	c1 25       	eor	r28, r1
     19a:	c5 25       	eor	r28, r5
     19c:	c9 25       	eor	r28, r9
     19e:	cd 25       	eor	r28, r13
     1a0:	d1 25       	eor	r29, r1
     1a2:	d5 25       	eor	r29, r5
     1a4:	d9 25       	eor	r29, r9
     1a6:	dd 25       	eor	r29, r13
     1a8:	e1 25       	eor	r30, r1
     1aa:	e5 25       	eor	r30, r5
     1ac:	e9 25       	eor	r30, r9
     1ae:	ed 25       	eor	r30, r13
     1b0:	f1 25       	eor	r31, r1
     1b2:	f5 25       	eor	r31, r5
     1b4:	f9 25       	eor	r31, r9
     1b6:	fd 25       	eor	r31, r13
     1b8:	01 26       	eor	r0, r17
     1ba:	05 26       	eor	r0, r21
     1bc:	09 26       	eor	r0, r25
     1be:	0d 26       	eor	r0, r29
     1c0:	11 26       	eor	r1, r17
     1c2:	15 26       	eor	r1, r21
     1c4:	19 26       	eor	r1, r25
     1c6:	99 26       	eor	r9, r25
     1c8:	99 26       	eor	r9, r25
     1ca:	99 26       	eor	r9, r25
     1cc:	99 26       	eor	r9, r25
     1ce:	7d 26       	eor	r7, r29
     1d0:	99 26       	eor	r9, r25
     1d2:	99 26       	eor	r9, r25
     1d4:	99 26       	eor	r9, r25
     1d6:	99 26       	eor	r9, r25
     1d8:	99 26       	eor	r9, r25
     1da:	99 26       	eor	r9, r25
     1dc:	99 26       	eor	r9, r25
     1de:	99 26       	eor	r9, r25
     1e0:	99 26       	eor	r9, r25
     1e2:	99 26       	eor	r9, r25
     1e4:	99 26       	eor	r9, r25
     1e6:	99 26       	eor	r9, r25
     1e8:	99 26       	eor	r9, r25
     1ea:	99 26       	eor	r9, r25
     1ec:	99 26       	eor	r9, r25
     1ee:	99 26       	eor	r9, r25
     1f0:	99 26       	eor	r9, r25
     1f2:	99 26       	eor	r9, r25
     1f4:	99 26       	eor	r9, r25
     1f6:	99 26       	eor	r9, r25
     1f8:	99 26       	eor	r9, r25
     1fa:	99 26       	eor	r9, r25
     1fc:	99 26       	eor	r9, r25
     1fe:	99 26       	eor	r9, r25
     200:	99 26       	eor	r9, r25
     202:	99 26       	eor	r9, r25
     204:	99 26       	eor	r9, r25
     206:	99 26       	eor	r9, r25
     208:	8d 26       	eor	r8, r29
     20a:	05 a8       	ldd	r0, Z+53	; 0x35
     20c:	4c cd       	rjmp	.-1384   	; 0xfffffca6 <__eeprom_end+0xff7ef991>
     20e:	b2 d4       	rcall	.+2404   	; 0xb74 <_ZN8GoertzelD1Ev+0x6>
     210:	4e b9       	out	0x0e, r20	; 14
     212:	38 36       	cpi	r19, 0x68	; 104
     214:	a9 02       	muls	r26, r25
     216:	0c 50       	subi	r16, 0x0C	; 12
     218:	b9 91       	ld	r27, Y+
     21a:	86 88       	ldd	r8, Z+22	; 0x16
     21c:	08 3c       	cpi	r16, 0xC8	; 200
     21e:	a6 aa       	std	Z+54, r10	; 0x36
     220:	aa 2a       	or	r10, r26
     222:	be 00       	.word	0x00be	; ????
     224:	00 00       	nop
     226:	80 3f       	cpi	r24, 0xF0	; 240

00000228 <__ctors_start>:
     228:	8d 25       	eor	r24, r13

0000022a <__ctors_end>:
     22a:	a2 25       	eor	r26, r2

0000022c <__dtors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d8 e0       	ldi	r29, 0x08	; 8
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	13 e0       	ldi	r17, 0x03	; 3
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	ea e1       	ldi	r30, 0x1A	; 26
     240:	f5 e6       	ldi	r31, 0x65	; 101
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a0 31       	cpi	r26, 0x10	; 16
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	25 e0       	ldi	r18, 0x05	; 5
     250:	a0 e1       	ldi	r26, 0x10	; 16
     252:	b3 e0       	ldi	r27, 0x03	; 3
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a1 39       	cpi	r26, 0x91	; 145
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>

0000025e <__do_global_ctors>:
     25e:	11 e0       	ldi	r17, 0x01	; 1
     260:	c5 e1       	ldi	r28, 0x15	; 21
     262:	d1 e0       	ldi	r29, 0x01	; 1
     264:	04 c0       	rjmp	.+8      	; 0x26e <__do_global_ctors+0x10>
     266:	21 97       	sbiw	r28, 0x01	; 1
     268:	fe 01       	movw	r30, r28
     26a:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <__tablejump2__>
     26e:	c4 31       	cpi	r28, 0x14	; 20
     270:	d1 07       	cpc	r29, r17
     272:	c9 f7       	brne	.-14     	; 0x266 <__do_global_ctors+0x8>
     274:	0e 94 61 24 	call	0x48c2	; 0x48c2 <main>
     278:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__do_global_dtors>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <month_length>:
     280:	62 30       	cpi	r22, 0x02	; 2
     282:	21 f4       	brne	.+8      	; 0x28c <month_length+0xc>
     284:	0e 94 4d 01 	call	0x29a	; 0x29a <is_leap_year>
     288:	84 5e       	subi	r24, 0xE4	; 228
     28a:	08 95       	ret
     28c:	68 30       	cpi	r22, 0x08	; 8
     28e:	08 f0       	brcs	.+2      	; 0x292 <month_length+0x12>
     290:	6f 5f       	subi	r22, 0xFF	; 255
     292:	61 70       	andi	r22, 0x01	; 1
     294:	8e e1       	ldi	r24, 0x1E	; 30
     296:	86 0f       	add	r24, r22
     298:	08 95       	ret

0000029a <is_leap_year>:
     29a:	9c 01       	movw	r18, r24
     29c:	23 70       	andi	r18, 0x03	; 3
     29e:	33 27       	eor	r19, r19
     2a0:	23 2b       	or	r18, r19
     2a2:	59 f4       	brne	.+22     	; 0x2ba <is_leap_year+0x20>
     2a4:	64 e6       	ldi	r22, 0x64	; 100
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
     2ac:	89 2b       	or	r24, r25
     2ae:	39 f4       	brne	.+14     	; 0x2be <is_leap_year+0x24>
     2b0:	63 70       	andi	r22, 0x03	; 3
     2b2:	77 27       	eor	r23, r23
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	67 2b       	or	r22, r23
     2b8:	19 f0       	breq	.+6      	; 0x2c0 <is_leap_year+0x26>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 95       	ret
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	08 95       	ret

000002c2 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	84 31       	cpi	r24, 0x14	; 20
     2c6:	91 05       	cpc	r25, r1
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <_Z7pinModehh+0xa>
     2ca:	ca c0       	rjmp	.+404    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     2cc:	fc 01       	movw	r30, r24
     2ce:	ec 5c       	subi	r30, 0xCC	; 204
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     2d6:	61 30       	cpi	r22, 0x01	; 1
     2d8:	11 f4       	brne	.+4      	; 0x2de <_Z7pinModehh+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     2da:	50 9a       	sbi	0x0a, 0	; 10
     2dc:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     2de:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     2e0:	63 30       	cpi	r22, 0x03	; 3
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <_Z7pinModehh+0x26>
				{
					PORTD  |= (1 << PORTD0);
     2e4:	58 9a       	sbi	0x0b, 0	; 11
     2e6:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     2e8:	58 98       	cbi	0x0b, 0	; 11
     2ea:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <_Z7pinModehh+0x32>
			{
				DDRD  |= (1 << PORTD1);
     2f0:	51 9a       	sbi	0x0a, 1	; 10
     2f2:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     2f4:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     2f6:	63 30       	cpi	r22, 0x03	; 3
     2f8:	11 f4       	brne	.+4      	; 0x2fe <_Z7pinModehh+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     2fa:	59 9a       	sbi	0x0b, 1	; 11
     2fc:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     2fe:	59 98       	cbi	0x0b, 1	; 11
     300:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     302:	61 30       	cpi	r22, 0x01	; 1
     304:	11 f4       	brne	.+4      	; 0x30a <_Z7pinModehh+0x48>
			{
				DDRD  |= (1 << PORTD2);
     306:	52 9a       	sbi	0x0a, 2	; 10
     308:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     30a:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     30c:	63 30       	cpi	r22, 0x03	; 3
     30e:	11 f4       	brne	.+4      	; 0x314 <_Z7pinModehh+0x52>
				{
					PORTD  |= (1 << PORTD2);
     310:	5a 9a       	sbi	0x0b, 2	; 11
     312:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     314:	5a 98       	cbi	0x0b, 2	; 11
     316:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     318:	61 30       	cpi	r22, 0x01	; 1
     31a:	11 f4       	brne	.+4      	; 0x320 <_Z7pinModehh+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     31c:	53 9a       	sbi	0x0a, 3	; 10
     31e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     320:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     322:	63 30       	cpi	r22, 0x03	; 3
     324:	11 f4       	brne	.+4      	; 0x32a <_Z7pinModehh+0x68>
				{
					PORTD  |= (1 << PORTD3);
     326:	5b 9a       	sbi	0x0b, 3	; 11
     328:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     32a:	5b 98       	cbi	0x0b, 3	; 11
     32c:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     32e:	61 30       	cpi	r22, 0x01	; 1
     330:	11 f4       	brne	.+4      	; 0x336 <_Z7pinModehh+0x74>
			{
				DDRD  |= (1 << PORTD4);
     332:	54 9a       	sbi	0x0a, 4	; 10
     334:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     336:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     338:	63 30       	cpi	r22, 0x03	; 3
     33a:	11 f4       	brne	.+4      	; 0x340 <_Z7pinModehh+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     33c:	5c 9a       	sbi	0x0b, 4	; 11
     33e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     340:	5c 98       	cbi	0x0b, 4	; 11
     342:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     344:	61 30       	cpi	r22, 0x01	; 1
     346:	11 f4       	brne	.+4      	; 0x34c <_Z7pinModehh+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     348:	55 9a       	sbi	0x0a, 5	; 10
     34a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     34c:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     34e:	63 30       	cpi	r22, 0x03	; 3
     350:	11 f4       	brne	.+4      	; 0x356 <_Z7pinModehh+0x94>
				{
					PORTD  |= (1 << PORTD5);
     352:	5d 9a       	sbi	0x0b, 5	; 11
     354:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     356:	5d 98       	cbi	0x0b, 5	; 11
     358:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     35a:	61 30       	cpi	r22, 0x01	; 1
     35c:	11 f4       	brne	.+4      	; 0x362 <_Z7pinModehh+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     35e:	56 9a       	sbi	0x0a, 6	; 10
     360:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     362:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     364:	63 30       	cpi	r22, 0x03	; 3
     366:	11 f4       	brne	.+4      	; 0x36c <_Z7pinModehh+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     368:	5e 9a       	sbi	0x0b, 6	; 11
     36a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     36c:	5e 98       	cbi	0x0b, 6	; 11
     36e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     370:	61 30       	cpi	r22, 0x01	; 1
     372:	11 f4       	brne	.+4      	; 0x378 <_Z7pinModehh+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     374:	57 9a       	sbi	0x0a, 7	; 10
     376:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     378:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     37a:	63 30       	cpi	r22, 0x03	; 3
     37c:	11 f4       	brne	.+4      	; 0x382 <_Z7pinModehh+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     37e:	5f 9a       	sbi	0x0b, 7	; 11
     380:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     382:	5f 98       	cbi	0x0b, 7	; 11
     384:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	11 f4       	brne	.+4      	; 0x38e <_Z7pinModehh+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     38a:	20 9a       	sbi	0x04, 0	; 4
     38c:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     38e:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     390:	63 30       	cpi	r22, 0x03	; 3
     392:	11 f4       	brne	.+4      	; 0x398 <_Z7pinModehh+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     394:	28 9a       	sbi	0x05, 0	; 5
     396:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     398:	28 98       	cbi	0x05, 0	; 5
     39a:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     39c:	61 30       	cpi	r22, 0x01	; 1
     39e:	11 f4       	brne	.+4      	; 0x3a4 <_Z7pinModehh+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3a0:	21 9a       	sbi	0x04, 1	; 4
     3a2:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3a4:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3a6:	63 30       	cpi	r22, 0x03	; 3
     3a8:	11 f4       	brne	.+4      	; 0x3ae <_Z7pinModehh+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3aa:	29 9a       	sbi	0x05, 1	; 5
     3ac:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3ae:	29 98       	cbi	0x05, 1	; 5
     3b0:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3b2:	61 30       	cpi	r22, 0x01	; 1
     3b4:	11 f4       	brne	.+4      	; 0x3ba <_Z7pinModehh+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3b6:	22 9a       	sbi	0x04, 2	; 4
     3b8:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3ba:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3bc:	63 30       	cpi	r22, 0x03	; 3
     3be:	11 f4       	brne	.+4      	; 0x3c4 <_Z7pinModehh+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3c0:	2a 9a       	sbi	0x05, 2	; 5
     3c2:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3c4:	2a 98       	cbi	0x05, 2	; 5
     3c6:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3c8:	61 30       	cpi	r22, 0x01	; 1
     3ca:	11 f4       	brne	.+4      	; 0x3d0 <_Z7pinModehh+0x10e>
			{
				DDRB  |= (1 << PORTB5);
     3cc:	25 9a       	sbi	0x04, 5	; 4
     3ce:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3d0:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3d2:	63 30       	cpi	r22, 0x03	; 3
     3d4:	11 f4       	brne	.+4      	; 0x3da <_Z7pinModehh+0x118>
				{
					PORTD  |= (1 << PORTB5);
     3d6:	5d 9a       	sbi	0x0b, 5	; 11
     3d8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3da:	5d 98       	cbi	0x0b, 5	; 11
     3dc:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3de:	61 30       	cpi	r22, 0x01	; 1
     3e0:	11 f4       	brne	.+4      	; 0x3e6 <_Z7pinModehh+0x124>
			{
				DDRC  |= (1 << PORTC0);
     3e2:	38 9a       	sbi	0x07, 0	; 7
     3e4:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3e6:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3e8:	63 30       	cpi	r22, 0x03	; 3
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <_Z7pinModehh+0x12e>
				{
					PORTC  |= (1 << PORTC0);
     3ec:	40 9a       	sbi	0x08, 0	; 8
     3ee:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3f0:	40 98       	cbi	0x08, 0	; 8
     3f2:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     3f4:	61 30       	cpi	r22, 0x01	; 1
     3f6:	11 f4       	brne	.+4      	; 0x3fc <_Z7pinModehh+0x13a>
			{
				DDRC  |= (1 << PORTC1);
     3f8:	39 9a       	sbi	0x07, 1	; 7
     3fa:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3fc:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     3fe:	63 30       	cpi	r22, 0x03	; 3
     400:	11 f4       	brne	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
				{
					PORTC  |= (1 << PORTC1);
     402:	41 9a       	sbi	0x08, 1	; 8
     404:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     406:	41 98       	cbi	0x08, 1	; 8
     408:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     40a:	61 30       	cpi	r22, 0x01	; 1
     40c:	11 f4       	brne	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			{
				DDRC  |= (1 << PORTC2);
     40e:	3a 9a       	sbi	0x07, 2	; 7
     410:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     412:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     414:	63 30       	cpi	r22, 0x03	; 3
     416:	11 f4       	brne	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				{
					PORTC  |= (1 << PORTC2);
     418:	42 9a       	sbi	0x08, 2	; 8
     41a:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     41c:	42 98       	cbi	0x08, 2	; 8
     41e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     420:	61 30       	cpi	r22, 0x01	; 1
     422:	11 f4       	brne	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				DDRC  |= (1 << PORTC3);
     424:	3b 9a       	sbi	0x07, 3	; 7
     426:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     428:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     42a:	63 30       	cpi	r22, 0x03	; 3
     42c:	11 f4       	brne	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				{
					PORTC  |= (1 << PORTC3);
     42e:	43 9a       	sbi	0x08, 3	; 8
     430:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     432:	43 98       	cbi	0x08, 3	; 8
     434:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     436:	61 30       	cpi	r22, 0x01	; 1
     438:	11 f4       	brne	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				DDRC  |= (1 << PORTC4);
     43a:	3c 9a       	sbi	0x07, 4	; 7
     43c:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     43e:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     440:	63 30       	cpi	r22, 0x03	; 3
     442:	11 f4       	brne	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
				{
					PORTC  |= (1 << PORTC4);
     444:	44 9a       	sbi	0x08, 4	; 8
     446:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     448:	44 98       	cbi	0x08, 4	; 8
     44a:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     44c:	61 30       	cpi	r22, 0x01	; 1
     44e:	11 f4       	brne	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			{
				DDRC  |= (1 << PORTC5);
     450:	3d 9a       	sbi	0x07, 5	; 7
     452:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     454:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     456:	63 30       	cpi	r22, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
				{
					PORTC  |= (1 << PORTC5);
     45a:	45 9a       	sbi	0x08, 5	; 8
     45c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     45e:	45 98       	cbi	0x08, 5	; 8
     460:	08 95       	ret

00000462 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	fc 01       	movw	r30, r24
     466:	32 97       	sbiw	r30, 0x02	; 2
     468:	e0 31       	cpi	r30, 0x10	; 16
     46a:	f1 05       	cpc	r31, r1
     46c:	f0 f5       	brcc	.+124    	; 0x4ea <_Z11digitalReadh+0x88>
     46e:	e8 5b       	subi	r30, 0xB8	; 184
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     476:	29 b1       	in	r18, 0x09	; 9
     478:	24 70       	andi	r18, 0x04	; 4
     47a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47c:	38 c0       	rjmp	.+112    	; 0x4ee <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     47e:	29 b1       	in	r18, 0x09	; 9
     480:	28 70       	andi	r18, 0x08	; 8
     482:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     484:	34 c0       	rjmp	.+104    	; 0x4ee <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     486:	29 b1       	in	r18, 0x09	; 9
     488:	20 71       	andi	r18, 0x10	; 16
     48a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48c:	30 c0       	rjmp	.+96     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     48e:	29 b1       	in	r18, 0x09	; 9
     490:	20 72       	andi	r18, 0x20	; 32
     492:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     494:	2c c0       	rjmp	.+88     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     496:	29 b1       	in	r18, 0x09	; 9
     498:	20 74       	andi	r18, 0x40	; 64
     49a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49c:	28 c0       	rjmp	.+80     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     49e:	29 b1       	in	r18, 0x09	; 9
     4a0:	20 78       	andi	r18, 0x80	; 128
     4a2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a4:	24 c0       	rjmp	.+72     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4a6:	83 b1       	in	r24, 0x03	; 3
     4a8:	28 2f       	mov	r18, r24
     4aa:	21 70       	andi	r18, 0x01	; 1
     4ac:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ae:	1f c0       	rjmp	.+62     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4b0:	23 b1       	in	r18, 0x03	; 3
     4b2:	22 70       	andi	r18, 0x02	; 2
     4b4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b6:	1b c0       	rjmp	.+54     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4b8:	23 b1       	in	r18, 0x03	; 3
     4ba:	24 70       	andi	r18, 0x04	; 4
     4bc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4be:	17 c0       	rjmp	.+46     	; 0x4ee <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4c0:	23 b1       	in	r18, 0x03	; 3
     4c2:	20 72       	andi	r18, 0x20	; 32
     4c4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4c8:	86 b1       	in	r24, 0x06	; 6
     4ca:	28 2f       	mov	r18, r24
     4cc:	21 70       	andi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d0:	0e c0       	rjmp	.+28     	; 0x4ee <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4d2:	26 b1       	in	r18, 0x06	; 6
     4d4:	22 70       	andi	r18, 0x02	; 2
     4d6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d8:	0a c0       	rjmp	.+20     	; 0x4ee <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4da:	26 b1       	in	r18, 0x06	; 6
     4dc:	24 70       	andi	r18, 0x04	; 4
     4de:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4e2:	26 b1       	in	r18, 0x06	; 6
     4e4:	28 70       	andi	r18, 0x08	; 8
     4e6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	23 2b       	or	r18, r19
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <_Z11digitalReadh+0x94>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
}
     4f6:	08 95       	ret

000004f8 <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	82 31       	cpi	r24, 0x12	; 18
     4fc:	91 05       	cpc	r25, r1
     4fe:	08 f0       	brcs	.+2      	; 0x502 <_Z12digitalWritehh+0xa>
     500:	64 c0       	rjmp	.+200    	; 0x5ca <_Z12digitalWritehh+0xd2>
     502:	fc 01       	movw	r30, r24
     504:	e8 5a       	subi	r30, 0xA8	; 168
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     50c:	66 23       	and	r22, r22
     50e:	11 f0       	breq	.+4      	; 0x514 <_Z12digitalWritehh+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     510:	58 9a       	sbi	0x0b, 0	; 11
     512:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     514:	58 98       	cbi	0x0b, 0	; 11
     516:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     518:	66 23       	and	r22, r22
     51a:	11 f0       	breq	.+4      	; 0x520 <_Z12digitalWritehh+0x28>
			{
				PORTD  |= (1 << PORTD1);
     51c:	59 9a       	sbi	0x0b, 1	; 11
     51e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     520:	59 98       	cbi	0x0b, 1	; 11
     522:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     524:	66 23       	and	r22, r22
     526:	11 f0       	breq	.+4      	; 0x52c <_Z12digitalWritehh+0x34>
			{
				PORTD  |= (1 << PORTD2);
     528:	5a 9a       	sbi	0x0b, 2	; 11
     52a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     52c:	5a 98       	cbi	0x0b, 2	; 11
     52e:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     530:	66 23       	and	r22, r22
     532:	11 f0       	breq	.+4      	; 0x538 <_Z12digitalWritehh+0x40>
			{
				PORTD  |= (1 << PORTD3);
     534:	5b 9a       	sbi	0x0b, 3	; 11
     536:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     538:	5b 98       	cbi	0x0b, 3	; 11
     53a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     53c:	66 23       	and	r22, r22
     53e:	11 f0       	breq	.+4      	; 0x544 <_Z12digitalWritehh+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     540:	5c 9a       	sbi	0x0b, 4	; 11
     542:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     544:	5c 98       	cbi	0x0b, 4	; 11
     546:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     548:	66 23       	and	r22, r22
     54a:	11 f0       	breq	.+4      	; 0x550 <_Z12digitalWritehh+0x58>
			{
				PORTD  |= (1 << PORTD5);
     54c:	5d 9a       	sbi	0x0b, 5	; 11
     54e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     550:	5d 98       	cbi	0x0b, 5	; 11
     552:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     554:	66 23       	and	r22, r22
     556:	11 f0       	breq	.+4      	; 0x55c <_Z12digitalWritehh+0x64>
			{
				PORTD  |= (1 << PORTD6);
     558:	5e 9a       	sbi	0x0b, 6	; 11
     55a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     55c:	5e 98       	cbi	0x0b, 6	; 11
     55e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     560:	66 23       	and	r22, r22
     562:	11 f0       	breq	.+4      	; 0x568 <_Z12digitalWritehh+0x70>
			{
				PORTD  |= (1 << PORTD7);
     564:	5f 9a       	sbi	0x0b, 7	; 11
     566:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     568:	5f 98       	cbi	0x0b, 7	; 11
     56a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     56c:	66 23       	and	r22, r22
     56e:	11 f0       	breq	.+4      	; 0x574 <_Z12digitalWritehh+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     570:	28 9a       	sbi	0x05, 0	; 5
     572:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     574:	28 98       	cbi	0x05, 0	; 5
     576:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     578:	66 23       	and	r22, r22
     57a:	11 f0       	breq	.+4      	; 0x580 <_Z12digitalWritehh+0x88>
			{
				PORTB  |= (1 << PORTB1);
     57c:	29 9a       	sbi	0x05, 1	; 5
     57e:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     580:	29 98       	cbi	0x05, 1	; 5
     582:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     584:	66 23       	and	r22, r22
     586:	11 f0       	breq	.+4      	; 0x58c <_Z12digitalWritehh+0x94>
			{
				PORTB  |= (1 << PORTB2);
     588:	2a 9a       	sbi	0x05, 2	; 5
     58a:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     58c:	2a 98       	cbi	0x05, 2	; 5
     58e:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     590:	66 23       	and	r22, r22
     592:	11 f0       	breq	.+4      	; 0x598 <_Z12digitalWritehh+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     594:	2d 9a       	sbi	0x05, 5	; 5
     596:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     598:	2d 98       	cbi	0x05, 5	; 5
     59a:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     59c:	66 23       	and	r22, r22
     59e:	11 f0       	breq	.+4      	; 0x5a4 <_Z12digitalWritehh+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5a0:	40 9a       	sbi	0x08, 0	; 8
     5a2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5a4:	40 98       	cbi	0x08, 0	; 8
     5a6:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5a8:	66 23       	and	r22, r22
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <_Z12digitalWritehh+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5ac:	41 9a       	sbi	0x08, 1	; 8
     5ae:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5b0:	41 98       	cbi	0x08, 1	; 8
     5b2:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5b4:	66 23       	and	r22, r22
     5b6:	11 f0       	breq	.+4      	; 0x5bc <_Z12digitalWritehh+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5b8:	42 9a       	sbi	0x08, 2	; 8
     5ba:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5bc:	42 98       	cbi	0x08, 2	; 8
     5be:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5c0:	66 23       	and	r22, r22
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <_Z12digitalWritehh+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5c4:	43 9a       	sbi	0x08, 3	; 8
     5c6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5c8:	43 98       	cbi	0x08, 3	; 8
     5ca:	08 95       	ret

000005cc <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     5cc:	08 95       	ret

000005ce <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     5ce:	08 95       	ret

000005d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5d8:	41 15       	cp	r20, r1
     5da:	51 05       	cpc	r21, r1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5de:	72 c0       	rjmp	.+228    	; 0x6c4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
	{
		return;
	}

	switch(v)
     5e0:	86 2f       	mov	r24, r22
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	3b 97       	sbiw	r30, 0x0b	; 11
     5e8:	ed 30       	cpi	r30, 0x0D	; 13
     5ea:	f1 05       	cpc	r31, r1
     5ec:	08 f0       	brcs	.+2      	; 0x5f0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5ee:	6a c0       	rjmp	.+212    	; 0x6c4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
     5f0:	da 01       	movw	r26, r20
     5f2:	e6 59       	subi	r30, 0x96	; 150
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5fa:	8e e0       	ldi	r24, 0x0E	; 14
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	5c c0       	rjmp	.+184    	; 0x6b8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe8>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	52 c0       	rjmp	.+164    	; 0x6aa <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xda>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	46 c0       	rjmp	.+140    	; 0x698 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xc8>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     60c:	8a 01       	movw	r16, r20
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     614:	66 23       	and	r22, r22
     616:	71 f0       	breq	.+28     	; 0x634 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     618:	c0 e0       	ldi	r28, 0x00	; 0
     61a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     61c:	21 96       	adiw	r28, 0x01	; 1
     61e:	ce 01       	movw	r24, r28
     620:	84 5b       	subi	r24, 0xB4	; 180
     622:	9d 4f       	sbci	r25, 0xFD	; 253
     624:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <eeprom_update_byte>
				c = *char_addr++;
     628:	f8 01       	movw	r30, r16
     62a:	61 91       	ld	r22, Z+
     62c:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     62e:	61 11       	cpse	r22, r1
     630:	f5 cf       	rjmp	.-22     	; 0x61c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     632:	02 c0       	rjmp	.+4      	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     634:	c0 e0       	ldi	r28, 0x00	; 0
     636:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	ce 01       	movw	r24, r28
     63c:	83 5b       	subi	r24, 0xB3	; 179
     63e:	9d 4f       	sbci	r25, 0xFD	; 253
     640:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <eeprom_update_byte>
		}
		break;
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     646:	8a 01       	movw	r16, r20
     648:	0f 5f       	subi	r16, 0xFF	; 255
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
     64c:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     64e:	66 23       	and	r22, r22
     650:	91 f0       	breq	.+36     	; 0x676 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     652:	c0 e0       	ldi	r28, 0x00	; 0
     654:	d0 e0       	ldi	r29, 0x00	; 0
     656:	03 c0       	rjmp	.+6      	; 0x65e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     658:	c8 30       	cpi	r28, 0x08	; 8
     65a:	d1 05       	cpc	r29, r1
     65c:	71 f0       	breq	.+28     	; 0x67a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     65e:	21 96       	adiw	r28, 0x01	; 1
     660:	ce 01       	movw	r24, r28
     662:	87 50       	subi	r24, 0x07	; 7
     664:	9d 4f       	sbci	r25, 0xFD	; 253
     666:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <eeprom_update_byte>
				c = *uint8_addr++;
     66a:	f8 01       	movw	r30, r16
     66c:	61 91       	ld	r22, Z+
     66e:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     670:	61 11       	cpse	r22, r1
     672:	f2 cf       	rjmp	.-28     	; 0x658 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     674:	02 c0       	rjmp	.+4      	; 0x67a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     676:	c0 e0       	ldi	r28, 0x00	; 0
     678:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	86 50       	subi	r24, 0x06	; 6
     680:	9d 4f       	sbci	r25, 0xFD	; 253
     682:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <eeprom_update_byte>
		}
		break;
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     688:	82 e1       	ldi	r24, 0x12	; 18
     68a:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     68c:	05 c0       	rjmp	.+10     	; 0x698 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xc8>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	02 c0       	rjmp	.+4      	; 0x698 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xc8>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     694:	85 e0       	ldi	r24, 0x05	; 5
     696:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     698:	6c 91       	ld	r22, X
     69a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <eeprom_update_byte>
     69e:	12 c0       	rjmp	.+36     	; 0x6c4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     6a0:	86 e0       	ldi	r24, 0x06	; 6
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xda>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     6a6:	83 e1       	ldi	r24, 0x13	; 19
     6a8:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     6aa:	6d 91       	ld	r22, X+
     6ac:	7c 91       	ld	r23, X
     6ae:	0e 94 18 32 	call	0x6430	; 0x6430 <eeprom_update_word>
     6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     6b4:	8a e0       	ldi	r24, 0x0A	; 10
     6b6:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     6b8:	4d 91       	ld	r20, X+
     6ba:	5d 91       	ld	r21, X+
     6bc:	6d 91       	ld	r22, X+
     6be:	7c 91       	ld	r23, X
     6c0:	0e 94 0c 32 	call	0x6418	; 0x6418 <eeprom_update_dword>
	}
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6da:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_Z10lb_enabledv>
     6de:	88 23       	and	r24, r24
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6e2:	46 c0       	rjmp	.+140    	; 0x770 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6e4:	8c 2f       	mov	r24, r28
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	8b 30       	cpi	r24, 0x0B	; 11
     6ea:	91 05       	cpc	r25, r1
     6ec:	08 f0       	brcs	.+2      	; 0x6f0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6ee:	40 c0       	rjmp	.+128    	; 0x770 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6f0:	fc 01       	movw	r30, r24
     6f2:	e9 58       	subi	r30, 0x89	; 137
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     6fa:	8a e2       	ldi	r24, 0x2A	; 42
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	30 c0       	rjmp	.+96     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     700:	81 e7       	ldi	r24, 0x71	; 113
     702:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     704:	2d c0       	rjmp	.+90     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     706:	87 e9       	ldi	r24, 0x97	; 151
     708:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     70a:	2a c0       	rjmp	.+84     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     70c:	8e eb       	ldi	r24, 0xBE	; 190
     70e:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     710:	27 c0       	rjmp	.+78     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     712:	8f ed       	ldi	r24, 0xDF	; 223
     714:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     716:	24 c0       	rjmp	.+72     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     718:	8a ef       	ldi	r24, 0xFA	; 250
     71a:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     71c:	21 c0       	rjmp	.+66     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     71e:	80 e1       	ldi	r24, 0x10	; 16
     720:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     722:	1e c0       	rjmp	.+60     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     724:	85 e2       	ldi	r24, 0x25	; 37
     726:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     728:	1b c0       	rjmp	.+54     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     72a:	89 e3       	ldi	r24, 0x39	; 57
     72c:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     72e:	18 c0       	rjmp	.+48     	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     730:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     732:	cc 23       	and	r28, r28
     734:	e9 f0       	breq	.+58     	; 0x770 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     736:	8c 2f       	mov	r24, r28
     738:	0e 94 10 0a 	call	0x1420	; 0x1420 <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     73c:	78 01       	movw	r14, r16
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	e8 1a       	sub	r14, r24
     742:	f8 0a       	sbc	r15, r24
     744:	c8 01       	movw	r24, r16
     746:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     74a:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     74c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_Z19linkbusTxInProgressv>
     750:	81 11       	cpse	r24, r1
     752:	fc cf       	rjmp	.-8      	; 0x74c <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     754:	ed cf       	rjmp	.-38     	; 0x730 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	02 c0       	rjmp	.+4      	; 0x760 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     75c:	89 e4       	ldi	r24, 0x49	; 73
     75e:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     760:	8c 01       	movw	r16, r24
     762:	0f 5f       	subi	r16, 0xFF	; 255
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     76a:	c8 2f       	mov	r28, r24

		while(c)
     76c:	81 11       	cpse	r24, r1
     76e:	e3 cf       	rjmp	.-58     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	08 95       	ret

0000077c <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     788:	83 e1       	ldi	r24, 0x13	; 19
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     790:	8b 3b       	cpi	r24, 0xBB	; 187
     792:	91 05       	cpc	r25, r1
     794:	09 f0       	breq	.+2      	; 0x798 <_ZN13EepromManager11readNonVolsEv+0x1c>
     796:	b0 c0       	rjmp	.+352    	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	85 30       	cpi	r24, 0x05	; 5
     7a4:	91 05       	cpc	r25, r1
     7a6:	14 f4       	brge	.+4      	; 0x7ac <_ZN13EepromManager11readNonVolsEv+0x30>
     7a8:	85 e0       	ldi	r24, 0x05	; 5
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	85 31       	cpi	r24, 0x15	; 21
     7ae:	91 05       	cpc	r25, r1
     7b0:	14 f0       	brlt	.+4      	; 0x7b6 <_ZN13EepromManager11readNonVolsEv+0x3a>
     7b2:	84 e1       	ldi	r24, 0x14	; 20
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     7ba:	84 e0       	ldi	r24, 0x04	; 4
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     7c2:	82 31       	cpi	r24, 0x12	; 18
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <_ZN13EepromManager11readNonVolsEv+0x4c>
     7c6:	81 e1       	ldi	r24, 0x11	; 17
     7c8:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	93 e0       	ldi	r25, 0x03	; 3
     7d0:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     7d4:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <eeprom_read_word>
     7e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_atmega_temp_calibration+0x1>
     7e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7e8:	88 e0       	ldi	r24, 0x08	; 8
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <eeprom_read_word>
     7f0:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <g_rv3028_offset+0x1>
     7f4:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 ee 31 	call	0x63dc	; 0x63dc <eeprom_read_dword>
     800:	60 93 6a 05 	sts	0x056A, r22	; 0x80056a <g_event_start_epoch>
     804:	70 93 6b 05 	sts	0x056B, r23	; 0x80056b <g_event_start_epoch+0x1>
     808:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <g_event_start_epoch+0x2>
     80c:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     810:	8e e0       	ldi	r24, 0x0E	; 14
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 ee 31 	call	0x63dc	; 0x63dc <eeprom_read_dword>
     818:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <g_event_finish_epoch>
     81c:	70 93 67 05 	sts	0x0567, r23	; 0x800567 <g_event_finish_epoch+0x1>
     820:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_event_finish_epoch+0x2>
     824:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     828:	82 e1       	ldi	r24, 0x12	; 18
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     830:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_utc_offset>
     834:	0d e4       	ldi	r16, 0x4D	; 77
     836:	12 e0       	ldi	r17, 0x02	; 2
     838:	ca e0       	ldi	r28, 0x0A	; 10
     83a:	d5 e0       	ldi	r29, 0x05	; 5
     83c:	0f 2e       	mov	r0, r31
     83e:	fe e1       	ldi	r31, 0x1E	; 30
     840:	ef 2e       	mov	r14, r31
     842:	f5 e0       	ldi	r31, 0x05	; 5
     844:	ff 2e       	mov	r15, r31
     846:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     848:	c8 01       	movw	r24, r16
     84a:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     84e:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     850:	81 11       	cpse	r24, r1
     852:	0b c0       	rjmp	.+22     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     854:	0a ef       	ldi	r16, 0xFA	; 250
     856:	12 e0       	ldi	r17, 0x02	; 2
     858:	c6 e2       	ldi	r28, 0x26	; 38
     85a:	d5 e0       	ldi	r29, 0x05	; 5
     85c:	0f 2e       	mov	r0, r31
     85e:	fe e2       	ldi	r31, 0x2E	; 46
     860:	ef 2e       	mov	r14, r31
     862:	f5 e0       	ldi	r31, 0x05	; 5
     864:	ff 2e       	mov	r15, r31
     866:	f0 2d       	mov	r31, r0
     868:	06 c0       	rjmp	.+12     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     86a:	0f 5f       	subi	r16, 0xFF	; 255
     86c:	1f 4f       	sbci	r17, 0xFF	; 255
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     86e:	ce 15       	cp	r28, r14
     870:	df 05       	cpc	r29, r15
     872:	51 f7       	brne	.-44     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     874:	ef cf       	rjmp	.-34     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     876:	c8 01       	movw	r24, r16
     878:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     87c:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     87e:	88 23       	and	r24, r24
     880:	29 f0       	breq	.+10     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     886:	ce 15       	cp	r28, r14
     888:	df 05       	cpc	r29, r15
     88a:	a9 f7       	brne	.-22     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     88c:	0a ed       	ldi	r16, 0xDA	; 218
     88e:	12 e0       	ldi	r17, 0x02	; 2
     890:	c2 e4       	ldi	r28, 0x42	; 66
     892:	d5 e0       	ldi	r29, 0x05	; 5
     894:	0f 2e       	mov	r0, r31
     896:	f2 e6       	ldi	r31, 0x62	; 98
     898:	ef 2e       	mov	r14, r31
     89a:	f5 e0       	ldi	r31, 0x05	; 5
     89c:	ff 2e       	mov	r15, r31
     89e:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     8a0:	c8 01       	movw	r24, r16
     8a2:	0e 94 e6 31 	call	0x63cc	; 0x63cc <eeprom_read_byte>
     8a6:	89 93       	st	Y+, r24
     8a8:	0f 5f       	subi	r16, 0xFF	; 255
     8aa:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     8ac:	ce 15       	cp	r28, r14
     8ae:	df 05       	cpc	r29, r15
     8b0:	b9 f7       	brne	.-18     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     8b2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
     8b6:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
     8ba:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
     8be:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
     8c2:	89 2b       	or	r24, r25
     8c4:	8a 2b       	or	r24, r26
     8c6:	8b 2b       	or	r24, r27
     8c8:	c9 f0       	breq	.+50     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8ca:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <g_event_finish_epoch>
     8ce:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
     8d2:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
     8d6:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
     8da:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
     8de:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
     8e2:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
     8e6:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
     8ea:	84 17       	cp	r24, r20
     8ec:	95 07       	cpc	r25, r21
     8ee:	a6 07       	cpc	r26, r22
     8f0:	b7 07       	cpc	r27, r23
     8f2:	30 f4       	brcc	.+12     	; 0x900 <__stack+0x1>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	19 c0       	rjmp	.+50     	; 0x92a <__stack+0x2b>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <__stack+0x2b>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	15 c0       	rjmp	.+42     	; 0x92a <__stack+0x2b>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     900:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
     904:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
     908:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
     90c:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
     910:	80 58       	subi	r24, 0x80	; 128
     912:	9e 4a       	sbci	r25, 0xAE	; 174
     914:	ae 4f       	sbci	r26, 0xFE	; 254
     916:	bf 4f       	sbci	r27, 0xFF	; 255
     918:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <g_event_finish_epoch>
     91c:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_event_finish_epoch+0x1>
     920:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <g_event_finish_epoch+0x2>
     924:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     928:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	08 95       	ret

00000938 <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	0e e1       	ldi	r16, 0x1E	; 30
     946:	11 e0       	ldi	r17, 0x01	; 1
     948:	c6 e2       	ldi	r28, 0x26	; 38
     94a:	d5 e0       	ldi	r29, 0x05	; 5
     94c:	0f 2e       	mov	r0, r31
     94e:	fa e2       	ldi	r31, 0x2A	; 42
     950:	ef 2e       	mov	r14, r31
     952:	f5 e0       	ldi	r31, 0x05	; 5
     954:	ff 2e       	mov	r15, r31
     956:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     958:	f8 01       	movw	r30, r16
     95a:	61 91       	ld	r22, Z+
     95c:	8f 01       	movw	r16, r30
     95e:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     960:	ce 01       	movw	r24, r28
     962:	0e 94 1e 32 	call	0x643c	; 0x643c <eeprom_write_byte>
     966:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     968:	ce 15       	cp	r28, r14
     96a:	df 05       	cpc	r29, r15
     96c:	a9 f7       	brne	.-22     	; 0x958 <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	8e ef       	ldi	r24, 0xFE	; 254
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 1e 32 	call	0x643c	; 0x643c <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     978:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <g_unlockCode+0x4>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     97c:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), g_AM_audio_frequency);
     980:	60 91 63 05 	lds	r22, 0x0563	; 0x800563 <g_AM_audio_frequency>
     984:	85 e0       	ldi	r24, 0x05	; 5
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	0e 94 1e 32 	call	0x643c	; 0x643c <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     98c:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_event_start_epoch>
     990:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_event_start_epoch+0x1>
     994:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <g_event_start_epoch+0x2>
     998:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     99c:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
     9a0:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
     9a4:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
     9a8:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
     9ac:	8a e0       	ldi	r24, 0x0A	; 10
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0e 94 2c 32 	call	0x6458	; 0x6458 <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     9b4:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <g_event_finish_epoch>
     9b8:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <g_event_finish_epoch+0x1>
     9bc:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <g_event_finish_epoch+0x2>
     9c0:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     9c4:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <g_event_finish_epoch>
     9c8:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
     9cc:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
     9d0:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
     9d4:	8e e0       	ldi	r24, 0x0E	; 14
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 2c 32 	call	0x6458	; 0x6458 <eeprom_write_dword>
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     9f0:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	ce 01       	movw	r24, r28
     9f8:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     a04:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     a08:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z15lb_send_NewLinev>
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     a12:	cb 01       	movw	r24, r22
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	8e 59       	subi	r24, 0x9E	; 158
     a1a:	9d 4f       	sbci	r25, 0xFD	; 253
     a1c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <eeprom_read_word>
}
     a20:	08 95       	ret

00000a22 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     a22:	9c 01       	movw	r18, r24
     a24:	2e 5f       	subi	r18, 0xFE	; 254
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	2b 33       	cpi	r18, 0x3B	; 59
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	38 07       	cpc	r19, r24
     a2e:	10 f0       	brcs	.+4      	; 0xa34 <_Z8setAttenj+0x12>
     a30:	2b e3       	ldi	r18, 0x3B	; 59
     a32:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     a34:	ad ec       	ldi	r26, 0xCD	; 205
     a36:	bc ec       	ldi	r27, 0xCC	; 204
     a38:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
     a3c:	96 95       	lsr	r25
     a3e:	87 95       	ror	r24
     a40:	96 95       	lsr	r25
     a42:	87 95       	ror	r24
     a44:	9c 01       	movw	r18, r24
     a46:	22 0f       	add	r18, r18
     a48:	33 1f       	adc	r19, r19
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	28 0f       	add	r18, r24
     a50:	39 1f       	adc	r19, r25
	att /= 5;
     a52:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
     a56:	96 95       	lsr	r25
     a58:	87 95       	ror	r24
     a5a:	96 95       	lsr	r25
     a5c:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     a5e:	9c 01       	movw	r18, r24
     a60:	20 73       	andi	r18, 0x30	; 48
     a62:	33 27       	eor	r19, r19
     a64:	32 95       	swap	r19
     a66:	22 95       	swap	r18
     a68:	2f 70       	andi	r18, 0x0F	; 15
     a6a:	23 27       	eor	r18, r19
     a6c:	3f 70       	andi	r19, 0x0F	; 15
     a6e:	23 27       	eor	r18, r19
     a70:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <__data_end>

	pattern = PORTC & 0xF0;
     a74:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     a76:	8f 70       	andi	r24, 0x0F	; 15
     a78:	90 7f       	andi	r25, 0xF0	; 240
     a7a:	89 2b       	or	r24, r25
     a7c:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     a7e:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     a80:	8c 7f       	andi	r24, 0xFC	; 252
     a82:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <__data_end>
     a86:	89 2b       	or	r24, r25
     a88:	8b b9       	out	0x0b, r24	; 11
     a8a:	08 95       	ret

00000a8c <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     a8c:	0e 94 a7 09 	call	0x134e	; 0x134e <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	8e e0       	ldi	r24, 0x0E	; 14
     a94:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	8f e0       	ldi	r24, 0x0F	; 15
     a9c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	80 e1       	ldi	r24, 0x10	; 16
     aa4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	81 e1       	ldi	r24, 0x11	; 17
     aac:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	86 e0       	ldi	r24, 0x06	; 6
     ac4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
     ad0:	08 95       	ret

00000ad2 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	e4 2e       	mov	r14, r20
     ae0:	f5 2e       	mov	r15, r21
     ae2:	d6 2f       	mov	r29, r22
     ae4:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     ae6:	00 93 28 03 	sts	0x0328, r16	; 0x800328 <_SAMPLING_FREQUENCY>
     aea:	10 93 29 03 	sts	0x0329, r17	; 0x800329 <_SAMPLING_FREQUENCY+0x1>
     aee:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <_SAMPLING_FREQUENCY+0x2>
     af2:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	41 e5       	ldi	r20, 0x51	; 81
     afc:	53 e4       	ldi	r21, 0x43	; 67
     afe:	6e 2d       	mov	r22, r14
     b00:	7f 2d       	mov	r23, r15
     b02:	8d 2f       	mov	r24, r29
     b04:	9c 2f       	mov	r25, r28
     b06:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__gesf2>
     b0a:	18 16       	cp	r1, r24
     b0c:	6c f0       	brlt	.+26     	; 0xb28 <_ZN8GoertzelC1Eff+0x56>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	48 ec       	ldi	r20, 0xC8	; 200
     b14:	52 e4       	ldi	r21, 0x42	; 66
     b16:	6e 2d       	mov	r22, r14
     b18:	7f 2d       	mov	r23, r15
     b1a:	8d 2f       	mov	r24, r29
     b1c:	9c 2f       	mov	r25, r28
     b1e:	0e 94 42 2a 	call	0x5484	; 0x5484 <__cmpsf2>
     b22:	88 23       	and	r24, r24
     b24:	34 f0       	brlt	.+12     	; 0xb32 <_ZN8GoertzelC1Eff+0x60>
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <_ZN8GoertzelC1Eff+0x68>
     b28:	e1 2c       	mov	r14, r1
     b2a:	f1 2c       	mov	r15, r1
     b2c:	d1 e5       	ldi	r29, 0x51	; 81
     b2e:	c3 e4       	ldi	r28, 0x43	; 67
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <_ZN8GoertzelC1Eff+0x68>
     b32:	e1 2c       	mov	r14, r1
     b34:	f1 2c       	mov	r15, r1
     b36:	d8 ec       	ldi	r29, 0xC8	; 200
     b38:	c2 e4       	ldi	r28, 0x42	; 66
     b3a:	6e 2d       	mov	r22, r14
     b3c:	7f 2d       	mov	r23, r15
     b3e:	8d 2f       	mov	r24, r29
     b40:	9c 2f       	mov	r25, r28
     b42:	0e 94 be 2a 	call	0x557c	; 0x557c <__fixsfsi>
     b46:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <_N+0x1>
     b4a:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     b4e:	cb 01       	movw	r24, r22
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <malloc>
     b58:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <testData+0x1>
     b5c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <testData>
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	08 95       	ret

00000b6e <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     b6e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <testData>
     b72:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <testData+0x1>
     b76:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <free>
     b7a:	08 95       	ret

00000b7c <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     b7c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <Q2>
     b80:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <Q2+0x1>
     b84:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <Q2+0x2>
     b88:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <Q2+0x3>
	Q1 = 0;
     b8c:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <Q1>
     b90:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <Q1+0x1>
     b94:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <Q1+0x2>
     b98:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Q1+0x3>
	_samplesReady = false;
     b9c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_samplesReady>
     ba0:	08 95       	ret

00000ba2 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	4a 01       	movw	r8, r20
     bba:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     bbc:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <_N>
     bc0:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <_N+0x1>
     bc4:	07 2e       	mov	r0, r23
     bc6:	00 0c       	add	r0, r0
     bc8:	88 0b       	sbc	r24, r24
     bca:	99 0b       	sbc	r25, r25
     bcc:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__floatsisf>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     bd4:	80 92 24 03 	sts	0x0324, r8	; 0x800324 <_TARGET_FREQUENCY>
     bd8:	90 92 25 03 	sts	0x0325, r9	; 0x800325 <_TARGET_FREQUENCY+0x1>
     bdc:	a0 92 26 03 	sts	0x0326, r10	; 0x800326 <_TARGET_FREQUENCY+0x2>
     be0:	b0 92 27 03 	sts	0x0327, r11	; 0x800327 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     be4:	a5 01       	movw	r20, r10
     be6:	94 01       	movw	r18, r8
     be8:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     bec:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <_SAMPLING_FREQUENCY>
     bf0:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <_SAMPLING_FREQUENCY+0x1>
     bf4:	40 91 2a 03 	lds	r20, 0x032A	; 0x80032a <_SAMPLING_FREQUENCY+0x2>
     bf8:	50 91 2b 03 	lds	r21, 0x032B	; 0x80032b <_SAMPLING_FREQUENCY+0x3>
     bfc:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__divsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	5f e3       	ldi	r21, 0x3F	; 63
     c08:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__addsf3>
     c0c:	0e 94 be 2a 	call	0x557c	; 0x557c <__fixsfsi>
     c10:	07 2e       	mov	r0, r23
     c12:	00 0c       	add	r0, r0
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__floatsisf>
     c1c:	2b ed       	ldi	r18, 0xDB	; 219
     c1e:	3f e0       	ldi	r19, 0x0F	; 15
     c20:	49 ec       	ldi	r20, 0xC9	; 201
     c22:	50 e4       	ldi	r21, 0x40	; 64
     c24:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     c28:	a7 01       	movw	r20, r14
     c2a:	96 01       	movw	r18, r12
     c2c:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__divsf3>
     c30:	0e 94 47 2a 	call	0x548e	; 0x548e <cos>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__addsf3>
     c3c:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <g_coeff>
     c40:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <g_coeff+0x1>
     c44:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <g_coeff+0x2>
     c48:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <g_coeff+0x3>
	ResetGoertzel();
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN8Goertzel13ResetGoertzelEv>
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	08 95       	ret

00000c68 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     c7e:	c0 90 1a 03 	lds	r12, 0x031A	; 0x80031a <Q1>
     c82:	d0 90 1b 03 	lds	r13, 0x031B	; 0x80031b <Q1+0x1>
     c86:	e0 90 1c 03 	lds	r14, 0x031C	; 0x80031c <Q1+0x2>
     c8a:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <Q1+0x3>
     c8e:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <g_coeff>
     c92:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <g_coeff+0x1>
     c96:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <g_coeff+0x2>
     c9a:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <g_coeff+0x3>
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     ca6:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <Q2>
     caa:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <Q2+0x1>
     cae:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <Q2+0x2>
     cb2:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <Q2+0x3>
     cb6:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__subsf3>
     cba:	4b 01       	movw	r8, r22
     cbc:	5c 01       	movw	r10, r24
     cbe:	be 01       	movw	r22, r28
     cc0:	72 50       	subi	r23, 0x02	; 2
     cc2:	07 2e       	mov	r0, r23
     cc4:	00 0c       	add	r0, r0
     cc6:	88 0b       	sbc	r24, r24
     cc8:	99 0b       	sbc	r25, r25
     cca:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__floatsisf>
     cce:	9b 01       	movw	r18, r22
     cd0:	ac 01       	movw	r20, r24
     cd2:	c5 01       	movw	r24, r10
     cd4:	b4 01       	movw	r22, r8
     cd6:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__addsf3>

	Q2 = Q1;
     cda:	c0 92 16 03 	sts	0x0316, r12	; 0x800316 <Q2>
     cde:	d0 92 17 03 	sts	0x0317, r13	; 0x800317 <Q2+0x1>
     ce2:	e0 92 18 03 	sts	0x0318, r14	; 0x800318 <Q2+0x2>
     ce6:	f0 92 19 03 	sts	0x0319, r15	; 0x800319 <Q2+0x3>
	Q1 = Q0;
     cea:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <Q1>
     cee:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <Q1+0x1>
     cf2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <Q1+0x2>
     cf6:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <Q1+0x3>
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	08 95       	ret

00000d10 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     d10:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_samplesReady>
     d14:	81 11       	cpse	r24, r1
     d16:	27 c0       	rjmp	.+78     	; 0xd66 <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     d18:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <_index>
     d1c:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <_index+0x1>
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <testData>
     d28:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <testData+0x1>
     d2c:	e8 0f       	add	r30, r24
     d2e:	f9 1f       	adc	r31, r25
     d30:	71 83       	std	Z+1, r23	; 0x01
     d32:	60 83       	st	Z, r22
	_index++;
     d34:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <_index>
     d38:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <_index+0x1>
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <_index+0x1>
     d42:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_index>
	if(_index >= _N)
     d46:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <_N>
     d4a:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <_N+0x1>
     d4e:	82 17       	cp	r24, r18
     d50:	93 07       	cpc	r25, r19
     d52:	3c f0       	brlt	.+14     	; 0xd62 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     d54:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_index+0x1>
     d58:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_index>
		_samplesReady = true;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_samplesReady>
	}

	return(_samplesReady);
     d62:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_samplesReady>
}
     d66:	08 95       	ret

00000d68 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     d68:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_samplesReady>
     d6c:	08 95       	ret

00000d6e <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     d6e:	4f 92       	push	r4
     d70:	5f 92       	push	r5
     d72:	6f 92       	push	r6
     d74:	7f 92       	push	r7
     d76:	8f 92       	push	r8
     d78:	9f 92       	push	r9
     d7a:	af 92       	push	r10
     d7c:	bf 92       	push	r11
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     d90:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_N>
     d94:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_N+0x1>
     d98:	18 16       	cp	r1, r24
     d9a:	19 06       	cpc	r1, r25
     d9c:	c4 f4       	brge	.+48     	; 0xdce <_ZN8Goertzel10Magnitude2Ev+0x60>
     d9e:	c0 e0       	ldi	r28, 0x00	; 0
     da0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     da2:	ce 01       	movw	r24, r28
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <testData>
     dac:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <testData+0x1>
     db0:	e8 0f       	add	r30, r24
     db2:	f9 1f       	adc	r31, r25
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	c8 01       	movw	r24, r16
     dba:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     dbe:	21 96       	adiw	r28, 0x01	; 1
     dc0:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_N>
     dc4:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_N+0x1>
     dc8:	c8 17       	cp	r28, r24
     dca:	d9 07       	cpc	r29, r25
     dcc:	54 f3       	brlt	.-44     	; 0xda2 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     dce:	80 90 1a 03 	lds	r8, 0x031A	; 0x80031a <Q1>
     dd2:	90 90 1b 03 	lds	r9, 0x031B	; 0x80031b <Q1+0x1>
     dd6:	a0 90 1c 03 	lds	r10, 0x031C	; 0x80031c <Q1+0x2>
     dda:	b0 90 1d 03 	lds	r11, 0x031D	; 0x80031d <Q1+0x3>
     dde:	c0 90 16 03 	lds	r12, 0x0316	; 0x800316 <Q2>
     de2:	d0 90 17 03 	lds	r13, 0x0317	; 0x800317 <Q2+0x1>
     de6:	e0 90 18 03 	lds	r14, 0x0318	; 0x800318 <Q2+0x2>
     dea:	f0 90 19 03 	lds	r15, 0x0319	; 0x800319 <Q2+0x3>
     dee:	a5 01       	movw	r20, r10
     df0:	94 01       	movw	r18, r8
     df2:	c5 01       	movw	r24, r10
     df4:	b4 01       	movw	r22, r8
     df6:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     dfa:	2b 01       	movw	r4, r22
     dfc:	3c 01       	movw	r6, r24
     dfe:	a7 01       	movw	r20, r14
     e00:	96 01       	movw	r18, r12
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c3 01       	movw	r24, r6
     e10:	b2 01       	movw	r22, r4
     e12:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__addsf3>
     e16:	2b 01       	movw	r4, r22
     e18:	3c 01       	movw	r6, r24
     e1a:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <g_coeff>
     e1e:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <g_coeff+0x1>
     e22:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <g_coeff+0x2>
     e26:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <g_coeff+0x3>
     e2a:	c5 01       	movw	r24, r10
     e2c:	b4 01       	movw	r22, r8
     e2e:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     e32:	a7 01       	movw	r20, r14
     e34:	96 01       	movw	r18, r12
     e36:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
     e3a:	9b 01       	movw	r18, r22
     e3c:	ac 01       	movw	r20, r24
     e3e:	c3 01       	movw	r24, r6
     e40:	b2 01       	movw	r22, r4
     e42:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__subsf3>
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24

	ResetGoertzel();
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     e50:	c7 01       	movw	r24, r14
     e52:	b6 01       	movw	r22, r12
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	7f 90       	pop	r7
     e6e:	6f 90       	pop	r6
     e70:	5f 90       	pop	r5
     e72:	4f 90       	pop	r4
     e74:	08 95       	ret

00000e76 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     e76:	e4 e6       	ldi	r30, 0x64	; 100
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     e80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     e84:	85 e2       	ldi	r24, 0x25	; 37
     e86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     e96:	08 95       	ret

00000e98 <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     e98:	84 ea       	ldi	r24, 0xA4	; 164
     e9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e9e:	ec eb       	ldi	r30, 0xBC	; 188
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 23       	and	r24, r24
     ea6:	64 f0       	brlt	.+24     	; 0xec0 <_Z9i2c_startv+0x28>
     ea8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     eac:	81 11       	cpse	r24, r1
     eae:	f9 cf       	rjmp	.-14     	; 0xea2 <_Z9i2c_startv+0xa>
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     eb2:	80 e9       	ldi	r24, 0x90	; 144
     eb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     ebe:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     ec0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ec4:	88 23       	and	r24, r24
     ec6:	a9 f3       	breq	.-22     	; 0xeb2 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     eca:	08 95       	ret

00000ecc <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ecc:	84 e9       	ldi	r24, 0x94	; 148
     ece:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ed2:	08 95       	ret

00000ed4 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     ed4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     ed8:	84 e8       	ldi	r24, 0x84	; 132
     eda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     ede:	ec eb       	ldi	r30, 0xBC	; 188
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	88 23       	and	r24, r24
     ee6:	64 f0       	brlt	.+24     	; 0xf00 <_Z17i2c_write_successhh+0x2c>
     ee8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     eec:	81 11       	cpse	r24, r1
     eee:	f9 cf       	rjmp	.-14     	; 0xee2 <_Z17i2c_write_successhh+0xe>
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ef2:	84 e9       	ldi	r24, 0x94	; 148
     ef4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     efe:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     f00:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     f04:	88 7f       	andi	r24, 0xF8	; 248
     f06:	86 13       	cpse	r24, r22
     f08:	f4 cf       	rjmp	.-24     	; 0xef2 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     f0a:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     f0c:	08 95       	ret

00000f0e <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     f0e:	84 ec       	ldi	r24, 0xC4	; 196
     f10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f14:	ec eb       	ldi	r30, 0xBC	; 188
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 23       	and	r24, r24
     f1c:	24 f0       	brlt	.+8      	; 0xf26 <_Z12i2c_read_ackv+0x18>
     f1e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f22:	81 11       	cpse	r24, r1
     f24:	f9 cf       	rjmp	.-14     	; 0xf18 <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     f26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f2a:	08 95       	ret

00000f2c <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     f2c:	84 e8       	ldi	r24, 0x84	; 132
     f2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f32:	ec eb       	ldi	r30, 0xBC	; 188
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	88 23       	and	r24, r24
     f3a:	24 f0       	brlt	.+8      	; 0xf44 <_Z13i2c_read_nackv+0x18>
     f3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f40:	81 11       	cpse	r24, r1
     f42:	f9 cf       	rjmp	.-14     	; 0xf36 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     f44:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f48:	08 95       	ret

00000f4a <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     f4a:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f4e:	28 7f       	andi	r18, 0xF8	; 248
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	28 17       	cp	r18, r24
     f56:	39 07       	cpc	r19, r25
     f58:	29 f0       	breq	.+10     	; 0xf64 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f5a:	84 e9       	ldi	r24, 0x94	; 148
     f5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	08 95       	ret
	}

	return(FALSE);
     f64:	80 e0       	ldi	r24, 0x00	; 0
}
     f66:	08 95       	ret

00000f68 <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <_Z16i2c_device_writehhPhh+0x6>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <_Z16i2c_device_writehhPhh+0x8>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <_Z16i2c_device_writehhPhh+0xa>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	8a 83       	std	Y+2, r24	; 0x02
     f78:	6b 83       	std	Y+3, r22	; 0x03
     f7a:	5d 83       	std	Y+5, r21	; 0x05
     f7c:	4c 83       	std	Y+4, r20	; 0x04
     f7e:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f80:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f82:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f86:	88 e0       	ldi	r24, 0x08	; 8
     f88:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z10i2c_statush>
     f8c:	98 2f       	mov	r25, r24
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	99 23       	and	r25, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <_Z16i2c_device_writehhPhh+0x2e>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	88 23       	and	r24, r24
     f98:	11 f0       	breq	.+4      	; 0xf9e <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     f9e:	68 e1       	ldi	r22, 0x18	; 24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17i2c_write_successhh>
     fa6:	98 2f       	mov	r25, r24
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	99 23       	and	r25, r25
     fac:	09 f4       	brne	.+2      	; 0xfb0 <_Z16i2c_device_writehhPhh+0x48>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	88 23       	and	r24, r24
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	32 c0       	rjmp	.+100    	; 0x101c <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fb8:	68 e2       	ldi	r22, 0x28	; 40
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17i2c_write_successhh>
     fc0:	98 2f       	mov	r25, r24
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	99 23       	and	r25, r25
     fc6:	09 f4       	brne	.+2      	; 0xfca <_Z16i2c_device_writehhPhh+0x62>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	25 c0       	rjmp	.+74     	; 0x101c <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     fd2:	8e 81       	ldd	r24, Y+6	; 0x06
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	98 0f       	add	r25, r24
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	88 23       	and	r24, r24
     fde:	09 f4       	brne	.+2      	; 0xfe2 <_Z16i2c_device_writehhPhh+0x7a>
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	99 23       	and	r25, r25
     fe4:	c1 f0       	breq	.+48     	; 0x1016 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	98 0f       	add	r25, r24
     fec:	99 83       	std	Y+1, r25	; 0x01
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	68 e2       	ldi	r22, 0x28	; 40
    1000:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17i2c_write_successhh>
    1004:	98 2f       	mov	r25, r24
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	99 23       	and	r25, r25
    100a:	09 f4       	brne	.+2      	; 0x100e <_Z16i2c_device_writehhPhh+0xa6>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	88 23       	and	r24, r24
    1010:	01 f3       	breq	.-64     	; 0xfd2 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
    1016:	0e 94 66 07 	call	0xecc	; 0xecc <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    101a:	80 e0       	ldi	r24, 0x00	; 0
}
    101c:	26 96       	adiw	r28, 0x06	; 6
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <_Z15i2c_device_readhhPhh+0xa>
    1038:	00 d0       	rcall	.+0      	; 0x103a <_Z15i2c_device_readhhPhh+0xc>
    103a:	00 d0       	rcall	.+0      	; 0x103c <_Z15i2c_device_readhhPhh+0xe>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03
    1044:	5d 83       	std	Y+5, r21	; 0x05
    1046:	4c 83       	std	Y+4, r20	; 0x04
    1048:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    104a:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    104c:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z9i2c_startv>
		if(i2c_status(TW_START))
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z10i2c_statush>
    1056:	98 2f       	mov	r25, r24
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	99 23       	and	r25, r25
    105c:	09 f4       	brne	.+2      	; 0x1060 <_Z15i2c_device_readhhPhh+0x32>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	88 23       	and	r24, r24
    1062:	11 f0       	breq	.+4      	; 0x1068 <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	79 c0       	rjmp	.+242    	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    1068:	68 e1       	ldi	r22, 0x18	; 24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17i2c_write_successhh>
    1070:	98 2f       	mov	r25, r24
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	99 23       	and	r25, r25
    1076:	09 f4       	brne	.+2      	; 0x107a <_Z15i2c_device_readhhPhh+0x4c>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	11 f0       	breq	.+4      	; 0x1082 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	6c c0       	rjmp	.+216    	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1082:	68 e2       	ldi	r22, 0x28	; 40
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17i2c_write_successhh>
    108a:	98 2f       	mov	r25, r24
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	99 23       	and	r25, r25
    1090:	09 f4       	brne	.+2      	; 0x1094 <_Z15i2c_device_readhhPhh+0x66>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	88 23       	and	r24, r24
    1096:	11 f0       	breq	.+4      	; 0x109c <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	5f c0       	rjmp	.+190    	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
    109c:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
    10a0:	80 e1       	ldi	r24, 0x10	; 16
    10a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z10i2c_statush>
    10a6:	98 2f       	mov	r25, r24
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	99 23       	and	r25, r25
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <_Z15i2c_device_readhhPhh+0x82>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	88 23       	and	r24, r24
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	51 c0       	rjmp	.+162    	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	60 e4       	ldi	r22, 0x40	; 64
    10be:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17i2c_write_successhh>
    10c2:	98 2f       	mov	r25, r24
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	99 23       	and	r25, r25
    10c8:	09 f4       	brne	.+2      	; 0x10cc <_Z15i2c_device_readhhPhh+0x9e>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	88 23       	and	r24, r24
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	43 c0       	rjmp	.+134    	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    10d4:	8e 81       	ldd	r24, Y+6	; 0x06
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	98 0f       	add	r25, r24
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <_Z15i2c_device_readhhPhh+0xb6>
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	99 23       	and	r25, r25
    10e6:	b1 f1       	breq	.+108    	; 0x1154 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	88 23       	and	r24, r24
    10ec:	d9 f0       	breq	.+54     	; 0x1124 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	98 0f       	add	r25, r24
    10f4:	99 83       	std	Y+1, r25	; 0x01
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	89 01       	movw	r16, r18
    1100:	08 0f       	add	r16, r24
    1102:	19 1f       	adc	r17, r25
    1104:	0e 94 87 07 	call	0xf0e	; 0xf0e <_Z12i2c_read_ackv>
    1108:	f8 01       	movw	r30, r16
    110a:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    110c:	80 e5       	ldi	r24, 0x50	; 80
    110e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z10i2c_statush>
    1112:	98 2f       	mov	r25, r24
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	99 23       	and	r25, r25
    1118:	09 f4       	brne	.+2      	; 0x111c <_Z15i2c_device_readhhPhh+0xee>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	88 23       	and	r24, r24
    111e:	d1 f2       	breq	.-76     	; 0x10d4 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	1b c0       	rjmp	.+54     	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	3d 81       	ldd	r19, Y+5	; 0x05
    112e:	89 01       	movw	r16, r18
    1130:	08 0f       	add	r16, r24
    1132:	19 1f       	adc	r17, r25
    1134:	0e 94 96 07 	call	0xf2c	; 0xf2c <_Z13i2c_read_nackv>
    1138:	f8 01       	movw	r30, r16
    113a:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    113c:	88 e5       	ldi	r24, 0x58	; 88
    113e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z10i2c_statush>
    1142:	98 2f       	mov	r25, r24
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	99 23       	and	r25, r25
    1148:	09 f4       	brne	.+2      	; 0x114c <_Z15i2c_device_readhhPhh+0x11e>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	88 23       	and	r24, r24
    114e:	11 f2       	breq	.-124    	; 0x10d4 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	03 c0       	rjmp	.+6      	; 0x115a <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    1154:	0e 94 66 07 	call	0xecc	; 0xecc <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    1158:	80 e0       	ldi	r24, 0x00	; 0
}
    115a:	26 96       	adiw	r28, 0x06	; 6
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1170:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_ZZ16nextFullTxBuffervE11bufferIndex>
    1174:	94 e0       	ldi	r25, 0x04	; 4
    1176:	59 e2       	ldi	r21, 0x29	; 41
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	52 9f       	mul	r21, r18
    117e:	f0 01       	movw	r30, r0
    1180:	53 9f       	mul	r21, r19
    1182:	f0 0d       	add	r31, r0
    1184:	11 24       	eor	r1, r1
    1186:	ea 57       	subi	r30, 0x7A	; 122
    1188:	fc 4f       	sbci	r31, 0xFC	; 252
    118a:	40 81       	ld	r20, Z
    118c:	41 11       	cpse	r20, r1
    118e:	0c c0       	rjmp	.+24     	; 0x11a8 <_Z16nextFullTxBufferv+0x38>
    1190:	91 50       	subi	r25, 0x01	; 1
    1192:	29 f0       	breq	.+10     	; 0x119e <_Z16nextFullTxBufferv+0x2e>
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	78 f3       	brcs	.-34     	; 0x1178 <_Z16nextFullTxBufferv+0x8>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	ed cf       	rjmp	.-38     	; 0x1178 <_Z16nextFullTxBufferv+0x8>
    119e:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <_ZZ16nextFullTxBuffervE11bufferIndex>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	08 95       	ret
    11a8:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <_ZZ16nextFullTxBuffervE11bufferIndex>
    11ac:	49 e2       	ldi	r20, 0x29	; 41
    11ae:	42 9f       	mul	r20, r18
    11b0:	c0 01       	movw	r24, r0
    11b2:	43 9f       	mul	r20, r19
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	8a 57       	subi	r24, 0x7A	; 122
    11ba:	9c 4f       	sbci	r25, 0xFC	; 252
    11bc:	08 95       	ret

000011be <_Z17nextEmptyTxBufferv>:
    11be:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11c2:	94 e0       	ldi	r25, 0x04	; 4
    11c4:	59 e2       	ldi	r21, 0x29	; 41
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	52 9f       	mul	r21, r18
    11cc:	f0 01       	movw	r30, r0
    11ce:	53 9f       	mul	r21, r19
    11d0:	f0 0d       	add	r31, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	ea 57       	subi	r30, 0x7A	; 122
    11d6:	fc 4f       	sbci	r31, 0xFC	; 252
    11d8:	40 81       	ld	r20, Z
    11da:	44 23       	and	r20, r20
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <_Z17nextEmptyTxBufferv+0x38>
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	29 f0       	breq	.+10     	; 0x11ec <_Z17nextEmptyTxBufferv+0x2e>
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	78 f3       	brcs	.-34     	; 0x11c6 <_Z17nextEmptyTxBufferv+0x8>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	ed cf       	rjmp	.-38     	; 0x11c6 <_Z17nextEmptyTxBufferv+0x8>
    11ec:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	08 95       	ret
    11f6:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11fa:	49 e2       	ldi	r20, 0x29	; 41
    11fc:	42 9f       	mul	r20, r18
    11fe:	c0 01       	movw	r24, r0
    1200:	43 9f       	mul	r20, r19
    1202:	90 0d       	add	r25, r0
    1204:	11 24       	eor	r1, r1
    1206:	8a 57       	subi	r24, 0x7A	; 122
    1208:	9c 4f       	sbci	r25, 0xFC	; 252
    120a:	08 95       	ret

0000120c <_Z17nextEmptyRxBufferv>:
    120c:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	9b e2       	ldi	r25, 0x2B	; 43
    1216:	89 9f       	mul	r24, r25
    1218:	f0 01       	movw	r30, r0
    121a:	11 24       	eor	r1, r1
    121c:	e0 5d       	subi	r30, 0xD0	; 208
    121e:	fc 4f       	sbci	r31, 0xFC	; 252
    1220:	41 81       	ldd	r20, Z+1	; 0x01
    1222:	52 81       	ldd	r21, Z+2	; 0x02
    1224:	45 2b       	or	r20, r21
    1226:	a9 f0       	breq	.+42     	; 0x1252 <_Z17nextEmptyRxBufferv+0x46>
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	08 f0       	brcs	.+2      	; 0x1230 <_Z17nextEmptyRxBufferv+0x24>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	9b e2       	ldi	r25, 0x2B	; 43
    1236:	89 9f       	mul	r24, r25
    1238:	f0 01       	movw	r30, r0
    123a:	11 24       	eor	r1, r1
    123c:	e0 5d       	subi	r30, 0xD0	; 208
    123e:	fc 4f       	sbci	r31, 0xFC	; 252
    1240:	41 81       	ldd	r20, Z+1	; 0x01
    1242:	52 81       	ldd	r21, Z+2	; 0x02
    1244:	45 2b       	or	r20, r21
    1246:	29 f0       	breq	.+10     	; 0x1252 <_Z17nextEmptyRxBufferv+0x46>
    1248:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	08 95       	ret
    1252:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1256:	4b e2       	ldi	r20, 0x2B	; 43
    1258:	42 9f       	mul	r20, r18
    125a:	c0 01       	movw	r24, r0
    125c:	43 9f       	mul	r20, r19
    125e:	90 0d       	add	r25, r0
    1260:	11 24       	eor	r1, r1
    1262:	80 5d       	subi	r24, 0xD0	; 208
    1264:	9c 4f       	sbci	r25, 0xFC	; 252
    1266:	08 95       	ret

00001268 <_Z16nextFullRxBufferv>:
    1268:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <_ZZ16nextFullRxBuffervE11bufferIndex>
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	9b e2       	ldi	r25, 0x2B	; 43
    1272:	89 9f       	mul	r24, r25
    1274:	f0 01       	movw	r30, r0
    1276:	11 24       	eor	r1, r1
    1278:	e0 5d       	subi	r30, 0xD0	; 208
    127a:	fc 4f       	sbci	r31, 0xFC	; 252
    127c:	41 81       	ldd	r20, Z+1	; 0x01
    127e:	52 81       	ldd	r21, Z+2	; 0x02
    1280:	45 2b       	or	r20, r21
    1282:	a9 f4       	brne	.+42     	; 0x12ae <_Z16nextFullRxBufferv+0x46>
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	08 f0       	brcs	.+2      	; 0x128c <_Z16nextFullRxBufferv+0x24>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	9b e2       	ldi	r25, 0x2B	; 43
    1292:	89 9f       	mul	r24, r25
    1294:	f0 01       	movw	r30, r0
    1296:	11 24       	eor	r1, r1
    1298:	e0 5d       	subi	r30, 0xD0	; 208
    129a:	fc 4f       	sbci	r31, 0xFC	; 252
    129c:	41 81       	ldd	r20, Z+1	; 0x01
    129e:	52 81       	ldd	r21, Z+2	; 0x02
    12a0:	45 2b       	or	r20, r21
    12a2:	29 f4       	brne	.+10     	; 0x12ae <_Z16nextFullRxBufferv+0x46>
    12a4:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZZ16nextFullRxBuffervE11bufferIndex>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	08 95       	ret
    12ae:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZZ16nextFullRxBuffervE11bufferIndex>
    12b2:	4b e2       	ldi	r20, 0x2B	; 43
    12b4:	42 9f       	mul	r20, r18
    12b6:	c0 01       	movw	r24, r0
    12b8:	43 9f       	mul	r20, r19
    12ba:	90 0d       	add	r25, r0
    12bc:	11 24       	eor	r1, r1
    12be:	80 5d       	subi	r24, 0xD0	; 208
    12c0:	9c 4f       	sbci	r25, 0xFC	; 252
    12c2:	08 95       	ret

000012c4 <_Z19linkbusTxInProgressv>:
    12c4:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <_ZL17linkbus_tx_active>
    12c8:	08 95       	ret

000012ca <_Z16linkbus_start_txv>:
    12ca:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <_ZL17linkbus_tx_active>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	91 11       	cpse	r25, r1
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	91 11       	cpse	r25, r1
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <_Z16linkbus_start_txv+0x1e>
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <_ZL17linkbus_tx_active>
    12de:	e1 ec       	ldi	r30, 0xC1	; 193
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	90 81       	ld	r25, Z
    12e4:	90 62       	ori	r25, 0x20	; 32
    12e6:	90 83       	st	Z, r25
    12e8:	08 95       	ret

000012ea <_Z14linkbus_end_txv>:
    12ea:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <_ZL17linkbus_tx_active>
    12ee:	88 23       	and	r24, r24
    12f0:	39 f0       	breq	.+14     	; 0x1300 <_Z14linkbus_end_txv+0x16>
    12f2:	e1 ec       	ldi	r30, 0xC1	; 193
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8f 7d       	andi	r24, 0xDF	; 223
    12fa:	80 83       	st	Z, r24
    12fc:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <_ZL17linkbus_tx_active>
    1300:	08 95       	ret

00001302 <_Z12linkbus_initm>:
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	86 e5       	ldi	r24, 0x56	; 86
    1308:	e0 e3       	ldi	r30, 0x30	; 48
    130a:	f3 e0       	ldi	r31, 0x03	; 3
    130c:	df 01       	movw	r26, r30
    130e:	1d 92       	st	X+, r1
    1310:	8a 95       	dec	r24
    1312:	e9 f7       	brne	.-6      	; 0x130e <_Z12linkbus_initm+0xc>
    1314:	e6 e8       	ldi	r30, 0x86	; 134
    1316:	f3 e0       	ldi	r31, 0x03	; 3
    1318:	10 82       	st	Z, r1
    131a:	11 a6       	std	Z+41, r1	; 0x29
    131c:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <_ZL9tx_buffer+0x52>
    1320:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZL9tx_buffer+0x7b>
    1324:	60 e4       	ldi	r22, 0x40	; 64
    1326:	72 e4       	ldi	r23, 0x42	; 66
    1328:	8f e0       	ldi	r24, 0x0F	; 15
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__udivmodsi4>
    1330:	21 50       	subi	r18, 0x01	; 1
    1332:	31 09       	sbc	r19, r1
    1334:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1338:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    133c:	88 e9       	ldi	r24, 0x98	; 152
    133e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1342:	8e e0       	ldi	r24, 0x0E	; 14
    1344:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1348:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    134c:	08 95       	ret

0000134e <_Z15linkbus_disablev>:
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    1354:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1358:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z14linkbus_end_txv>
    135c:	86 e5       	ldi	r24, 0x56	; 86
    135e:	e0 e3       	ldi	r30, 0x30	; 48
    1360:	f3 e0       	ldi	r31, 0x03	; 3
    1362:	df 01       	movw	r26, r30
    1364:	1d 92       	st	X+, r1
    1366:	8a 95       	dec	r24
    1368:	e9 f7       	brne	.-6      	; 0x1364 <_Z15linkbus_disablev+0x16>
    136a:	e6 e8       	ldi	r30, 0x86	; 134
    136c:	f3 e0       	ldi	r31, 0x03	; 3
    136e:	10 82       	st	Z, r1
    1370:	11 a6       	std	Z+41, r1	; 0x29
    1372:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <_ZL9tx_buffer+0x52>
    1376:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZL9tx_buffer+0x7b>
    137a:	08 95       	ret

0000137c <_Z17linkbus_send_textPc>:
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1388:	21 11       	cpse	r18, r1
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <_Z17linkbus_send_textPc+0x38>
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	a1 f0       	breq	.+40     	; 0x13b8 <_Z17linkbus_send_textPc+0x3c>
    1390:	8c 01       	movw	r16, r24
    1392:	0e 94 df 08 	call	0x11be	; 0x11be <_Z17nextEmptyTxBufferv>
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	b9 f4       	brne	.+46     	; 0x13c8 <_Z17linkbus_send_textPc+0x4c>
    139a:	c8 ec       	ldi	r28, 0xC8	; 200
    139c:	d0 e0       	ldi	r29, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <_Z17linkbus_send_textPc+0x28>
    13a0:	20 97       	sbiw	r28, 0x00	; 0
    13a2:	61 f0       	breq	.+24     	; 0x13bc <_Z17linkbus_send_textPc+0x40>
    13a4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <_ZL17linkbus_tx_active>
    13a8:	99 23       	and	r25, r25
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <_Z17linkbus_send_textPc+0x44>
    13ac:	20 97       	sbiw	r28, 0x00	; 0
    13ae:	d1 f0       	breq	.+52     	; 0x13e4 <_Z17linkbus_send_textPc+0x68>
    13b0:	21 97       	sbiw	r28, 0x01	; 1
    13b2:	f8 cf       	rjmp	.-16     	; 0x13a4 <_Z17linkbus_send_textPc+0x28>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <_Z17linkbus_send_textPc+0x72>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	19 c0       	rjmp	.+50     	; 0x13ee <_Z17linkbus_send_textPc+0x72>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	17 c0       	rjmp	.+46     	; 0x13ee <_Z17linkbus_send_textPc+0x72>
    13c0:	0e 94 df 08 	call	0x11be	; 0x11be <_Z17nextEmptyTxBufferv>
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f3       	breq	.-40     	; 0x13a0 <_Z17linkbus_send_textPc+0x24>
    13c8:	1f 93       	push	r17
    13ca:	0f 93       	push	r16
    13cc:	9f 93       	push	r25
    13ce:	8f 93       	push	r24
    13d0:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    13d4:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z16linkbus_start_txv>
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <_Z17linkbus_send_textPc+0x72>
    13e4:	0e 94 df 08 	call	0x11be	; 0x11be <_Z17nextEmptyTxBufferv>
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	71 f7       	brne	.-36     	; 0x13c8 <_Z17linkbus_send_textPc+0x4c>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <_Z17lb_send_NewPromptv>:
    13f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13fc:	81 11       	cpse	r24, r1
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <_Z17lb_send_NewPromptv+0x14>
    1400:	83 e2       	ldi	r24, 0x23	; 35
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 be 09 	call	0x137c	; 0x137c <_Z17linkbus_send_textPc>
    1408:	81 11       	cpse	r24, r1
    140a:	fa cf       	rjmp	.-12     	; 0x1400 <_Z17lb_send_NewPromptv+0x8>
    140c:	08 95       	ret

0000140e <_Z15lb_send_NewLinev>:
    140e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1412:	81 11       	cpse	r24, r1
    1414:	04 c0       	rjmp	.+8      	; 0x141e <_Z15lb_send_NewLinev+0x10>
    1416:	86 e2       	ldi	r24, 0x26	; 38
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	0e 94 be 09 	call	0x137c	; 0x137c <_Z17linkbus_send_textPc>
    141e:	08 95       	ret

00001420 <_Z12lb_echo_charh>:
    1420:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1424:	91 11       	cpse	r25, r1
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <_Z12lb_echo_charh+0x16>
    1428:	eb e2       	ldi	r30, 0x2B	; 43
    142a:	f4 e0       	ldi	r31, 0x04	; 4
    142c:	80 83       	st	Z, r24
    142e:	11 82       	std	Z+1, r1	; 0x01
    1430:	cf 01       	movw	r24, r30
    1432:	0e 94 be 09 	call	0x137c	; 0x137c <_Z17linkbus_send_textPc>
    1436:	08 95       	ret

00001438 <_Z14lb_send_stringPch>:
    1438:	cf 93       	push	r28
    143a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    143e:	21 11       	cpse	r18, r1
    1440:	28 c0       	rjmp	.+80     	; 0x1492 <_Z14lb_send_stringPch+0x5a>
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	41 f1       	breq	.+80     	; 0x1496 <_Z14lb_send_stringPch+0x5e>
    1446:	fc 01       	movw	r30, r24
    1448:	20 81       	ld	r18, Z
    144a:	22 23       	and	r18, r18
    144c:	31 f1       	breq	.+76     	; 0x149a <_Z14lb_send_stringPch+0x62>
    144e:	01 90       	ld	r0, Z+
    1450:	00 20       	and	r0, r0
    1452:	e9 f7       	brne	.-6      	; 0x144e <_Z14lb_send_stringPch+0x16>
    1454:	31 97       	sbiw	r30, 0x01	; 1
    1456:	e8 1b       	sub	r30, r24
    1458:	f9 0b       	sbc	r31, r25
    145a:	ba 97       	sbiw	r30, 0x2a	; 42
    145c:	00 f5       	brcc	.+64     	; 0x149e <_Z14lb_send_stringPch+0x66>
    145e:	c6 2f       	mov	r28, r22
    1460:	bc 01       	movw	r22, r24
    1462:	49 e2       	ldi	r20, 0x29	; 41
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	8b e2       	ldi	r24, 0x2B	; 43
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <strncpy>
    146e:	cc 23       	and	r28, r28
    1470:	59 f0       	breq	.+22     	; 0x1488 <_Z14lb_send_stringPch+0x50>
    1472:	8b e2       	ldi	r24, 0x2B	; 43
    1474:	94 e0       	ldi	r25, 0x04	; 4
    1476:	0e 94 be 09 	call	0x137c	; 0x137c <_Z17linkbus_send_textPc>
    147a:	81 11       	cpse	r24, r1
    147c:	fa cf       	rjmp	.-12     	; 0x1472 <_Z14lb_send_stringPch+0x3a>
    147e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <_ZL17linkbus_tx_active>
    1482:	81 11       	cpse	r24, r1
    1484:	fc cf       	rjmp	.-8      	; 0x147e <_Z14lb_send_stringPch+0x46>
    1486:	0c c0       	rjmp	.+24     	; 0x14a0 <_Z14lb_send_stringPch+0x68>
    1488:	8b e2       	ldi	r24, 0x2B	; 43
    148a:	94 e0       	ldi	r25, 0x04	; 4
    148c:	0e 94 be 09 	call	0x137c	; 0x137c <_Z17linkbus_send_textPc>
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <_Z14lb_send_stringPch+0x68>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <_Z14lb_send_stringPch+0x68>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <_Z14lb_send_stringPch+0x68>
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <_Z14lb_send_stringPch+0x68>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    14a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	91 11       	cpse	r25, r1
    14ac:	80 e0       	ldi	r24, 0x00	; 0
}
    14ae:	08 95       	ret

000014b0 <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	8b e0       	ldi	r24, 0x0B	; 11
    14d6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    14da:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	85 ee       	ldi	r24, 0xE5	; 229
    14e2:	94 e0       	ldi	r25, 0x04	; 4
    14e4:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN8Goertzel9DataPointEi>
    14e8:	88 23       	and	r24, r24
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <__vector_21+0x46>
    14ec:	ea e7       	ldi	r30, 0x7A	; 122
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	87 7f       	andi	r24, 0xF7	; 247
    14f4:	80 83       	st	Z, r24
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	8b e0       	ldi	r24, 0x0B	; 11
    14fa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	0f 90       	pop	r0
    151c:	1f 90       	pop	r1
    151e:	18 95       	reti

00001520 <__vector_18>:
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	1f 93       	push	r17
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    154c:	c0 91 bb 04 	lds	r28, 0x04BB	; 0x8004bb <_ZZ11__vector_18E4buff>
    1550:	d0 91 bc 04 	lds	r29, 0x04BC	; 0x8004bc <_ZZ11__vector_18E4buff+0x1>
    1554:	20 97       	sbiw	r28, 0x00	; 0
    1556:	51 f4       	brne	.+20     	; 0x156c <__vector_18+0x4c>
    1558:	0e 94 06 09 	call	0x120c	; 0x120c <_Z17nextEmptyRxBufferv>
    155c:	ec 01       	movw	r28, r24
    155e:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <_ZZ11__vector_18E4buff+0x1>
    1562:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <_ZZ11__vector_18E4buff>
    1566:	89 2b       	or	r24, r25
    1568:	09 f4       	brne	.+2      	; 0x156c <__vector_18+0x4c>
    156a:	61 c1       	rjmp	.+706    	; 0x182e <__vector_18+0x30e>
    156c:	81 2f       	mov	r24, r17
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <toupper>
    1574:	9c 01       	movw	r18, r24
    1576:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <_ZZ11__vector_18E11ignoreCount>
    157a:	88 23       	and	r24, r24
    157c:	21 f0       	breq	.+8      	; 0x1586 <__vector_18+0x66>
    157e:	81 50       	subi	r24, 0x01	; 1
    1580:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <_ZZ11__vector_18E11ignoreCount>
    1584:	54 c1       	rjmp	.+680    	; 0x182e <__vector_18+0x30e>
    1586:	2b 31       	cpi	r18, 0x1B	; 27
    1588:	21 f4       	brne	.+8      	; 0x1592 <__vector_18+0x72>
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <_ZZ11__vector_18E11ignoreCount>
    1590:	4e c1       	rjmp	.+668    	; 0x182e <__vector_18+0x30e>
    1592:	2d 30       	cpi	r18, 0x0D	; 13
    1594:	09 f0       	breq	.+2      	; 0x1598 <__vector_18+0x78>
    1596:	3f c0       	rjmp	.+126    	; 0x1616 <__vector_18+0xf6>
    1598:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ11__vector_18E13receiving_msg>
    159c:	88 23       	and	r24, r24
    159e:	31 f1       	breq	.+76     	; 0x15ec <__vector_18+0xcc>
    15a0:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    15a4:	ee 23       	and	r30, r30
    15a6:	f9 f0       	breq	.+62     	; 0x15e6 <__vector_18+0xc6>
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	88 83       	st	Y, r24
    15ac:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    15b0:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ11__vector_18E11field_index>
    15bc:	88 23       	and	r24, r24
    15be:	79 f0       	breq	.+30     	; 0x15de <__vector_18+0xbe>
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <_ZZ11__vector_18E9field_len>
    15c8:	54 e1       	ldi	r21, 0x14	; 20
    15ca:	58 9f       	mul	r21, r24
    15cc:	90 01       	movw	r18, r0
    15ce:	59 9f       	mul	r21, r25
    15d0:	30 0d       	add	r19, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	c2 0f       	add	r28, r18
    15d6:	d3 1f       	adc	r29, r19
    15d8:	c4 0f       	add	r28, r20
    15da:	d1 1d       	adc	r29, r1
    15dc:	1b 82       	std	Y+3, r1	; 0x03
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	e1 57       	subi	r30, 0x71	; 113
    15e2:	fb 4f       	sbci	r31, 0xFB	; 251
    15e4:	10 82       	st	Z, r1
    15e6:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z15lb_send_NewLinev>
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <__vector_18+0xd4>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	9f e7       	ldi	r25, 0x7F	; 127
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    15f8:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ11__vector_18E9field_len>
    15fc:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1600:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    1604:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ11__vector_18E11field_index>
    1608:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <_ZZ11__vector_18E4buff+0x1>
    160c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <_ZZ11__vector_18E4buff>
    1610:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <_ZZ11__vector_18E13receiving_msg>
    1614:	0c c1       	rjmp	.+536    	; 0x182e <__vector_18+0x30e>
    1616:	22 23       	and	r18, r18
    1618:	09 f4       	brne	.+2      	; 0x161c <__vector_18+0xfc>
    161a:	09 c1       	rjmp	.+530    	; 0x182e <__vector_18+0x30e>
    161c:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    1620:	4e 2f       	mov	r20, r30
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	da 01       	movw	r26, r20
    1626:	a1 57       	subi	r26, 0x71	; 113
    1628:	bb 4f       	sbci	r27, 0xFB	; 251
    162a:	2c 93       	st	X, r18
    162c:	ee 23       	and	r30, r30
    162e:	09 f4       	brne	.+2      	; 0x1632 <__vector_18+0x112>
    1630:	d6 c0       	rjmp	.+428    	; 0x17de <__vector_18+0x2be>
    1632:	2f 37       	cpi	r18, 0x7F	; 127
    1634:	09 f0       	breq	.+2      	; 0x1638 <__vector_18+0x118>
    1636:	5f c0       	rjmp	.+190    	; 0x16f6 <__vector_18+0x1d6>
    1638:	e1 50       	subi	r30, 0x01	; 1
    163a:	e0 93 b9 04 	sts	0x04B9, r30	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    163e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ11__vector_18E11field_index>
    1642:	81 11       	cpse	r24, r1
    1644:	13 c0       	rjmp	.+38     	; 0x166c <__vector_18+0x14c>
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	e1 57       	subi	r30, 0x71	; 113
    164a:	fb 4f       	sbci	r31, 0xFB	; 251
    164c:	40 81       	ld	r20, Z
    164e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    1652:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1656:	84 1b       	sub	r24, r20
    1658:	91 09       	sbc	r25, r1
    165a:	6a e0       	ldi	r22, 0x0A	; 10
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    1662:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1666:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    166a:	39 c0       	rjmp	.+114    	; 0x16de <__vector_18+0x1be>
    166c:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ11__vector_18E9field_len>
    1670:	99 23       	and	r25, r25
    1672:	91 f0       	breq	.+36     	; 0x1698 <__vector_18+0x178>
    1674:	4f ef       	ldi	r20, 0xFF	; 255
    1676:	49 0f       	add	r20, r25
    1678:	40 93 8a 04 	sts	0x048A, r20	; 0x80048a <_ZZ11__vector_18E9field_len>
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	54 e1       	ldi	r21, 0x14	; 20
    1682:	58 9f       	mul	r21, r24
    1684:	b0 01       	movw	r22, r0
    1686:	59 9f       	mul	r21, r25
    1688:	70 0d       	add	r23, r0
    168a:	11 24       	eor	r1, r1
    168c:	c6 0f       	add	r28, r22
    168e:	d7 1f       	adc	r29, r23
    1690:	c4 0f       	add	r28, r20
    1692:	d1 1d       	adc	r29, r1
    1694:	1b 82       	std	Y+3, r1	; 0x03
    1696:	23 c0       	rjmp	.+70     	; 0x16de <__vector_18+0x1be>
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	e1 57       	subi	r30, 0x71	; 113
    169c:	fb 4f       	sbci	r31, 0xFB	; 251
    169e:	90 81       	ld	r25, Z
    16a0:	90 32       	cpi	r25, 0x20	; 32
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <__vector_18+0x1ac>
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ11__vector_18E11field_index>
    16aa:	de 01       	movw	r26, r28
    16ac:	94 e1       	ldi	r25, 0x14	; 20
    16ae:	89 9f       	mul	r24, r25
    16b0:	a0 0d       	add	r26, r0
    16b2:	b1 1d       	adc	r27, r1
    16b4:	11 24       	eor	r1, r1
    16b6:	13 96       	adiw	r26, 0x03	; 3
    16b8:	fd 01       	movw	r30, r26
    16ba:	01 90       	ld	r0, Z+
    16bc:	00 20       	and	r0, r0
    16be:	e9 f7       	brne	.-6      	; 0x16ba <__vector_18+0x19a>
    16c0:	31 97       	sbiw	r30, 0x01	; 1
    16c2:	ea 1b       	sub	r30, r26
    16c4:	fb 0b       	sbc	r31, r27
    16c6:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <_ZZ11__vector_18E9field_len>
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <__vector_18+0x1be>
    16cc:	94 e1       	ldi	r25, 0x14	; 20
    16ce:	89 9f       	mul	r24, r25
    16d0:	c0 0d       	add	r28, r0
    16d2:	d1 1d       	adc	r29, r1
    16d4:	11 24       	eor	r1, r1
    16d6:	1b 82       	std	Y+3, r1	; 0x03
    16d8:	81 50       	subi	r24, 0x01	; 1
    16da:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ11__vector_18E11field_index>
    16de:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    16e2:	e8 2f       	mov	r30, r24
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	e1 57       	subi	r30, 0x71	; 113
    16e8:	fb 4f       	sbci	r31, 0xFB	; 251
    16ea:	10 82       	st	Z, r1
    16ec:	81 11       	cpse	r24, r1
    16ee:	92 c0       	rjmp	.+292    	; 0x1814 <__vector_18+0x2f4>
    16f0:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <_ZZ11__vector_18E13receiving_msg>
    16f4:	8f c0       	rjmp	.+286    	; 0x1814 <__vector_18+0x2f4>
    16f6:	20 32       	cpi	r18, 0x20	; 32
    16f8:	79 f5       	brne	.+94     	; 0x1758 <__vector_18+0x238>
    16fa:	fa 01       	movw	r30, r20
    16fc:	e2 57       	subi	r30, 0x72	; 114
    16fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1700:	80 81       	ld	r24, Z
    1702:	80 32       	cpi	r24, 0x20	; 32
    1704:	09 f4       	brne	.+2      	; 0x1708 <__vector_18+0x1e8>
    1706:	93 c0       	rjmp	.+294    	; 0x182e <__vector_18+0x30e>
    1708:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ11__vector_18E11field_index>
    170c:	68 2f       	mov	r22, r24
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	fb 01       	movw	r30, r22
    1712:	31 96       	adiw	r30, 0x01	; 1
    1714:	32 97       	sbiw	r30, 0x02	; 2
    1716:	0c f0       	brlt	.+2      	; 0x171a <__vector_18+0x1fa>
    1718:	8a c0       	rjmp	.+276    	; 0x182e <__vector_18+0x30e>
    171a:	88 23       	and	r24, r24
    171c:	79 f0       	breq	.+30     	; 0x173c <__vector_18+0x21c>
    171e:	61 50       	subi	r22, 0x01	; 1
    1720:	71 09       	sbc	r23, r1
    1722:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ11__vector_18E9field_len>
    1726:	a4 e1       	ldi	r26, 0x14	; 20
    1728:	a6 9f       	mul	r26, r22
    172a:	f0 01       	movw	r30, r0
    172c:	a7 9f       	mul	r26, r23
    172e:	f0 0d       	add	r31, r0
    1730:	11 24       	eor	r1, r1
    1732:	ec 0f       	add	r30, r28
    1734:	fd 1f       	adc	r31, r29
    1736:	e9 0f       	add	r30, r25
    1738:	f1 1d       	adc	r31, r1
    173a:	13 82       	std	Z+3, r1	; 0x03
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ11__vector_18E11field_index>
    1742:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ11__vector_18E9field_len>
    1746:	4f 5f       	subi	r20, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
    174a:	49 32       	cpi	r20, 0x29	; 41
    174c:	51 05       	cpc	r21, r1
    174e:	0c f0       	brlt	.+2      	; 0x1752 <__vector_18+0x232>
    1750:	49 e2       	ldi	r20, 0x29	; 41
    1752:	40 93 b9 04 	sts	0x04B9, r20	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    1756:	5e c0       	rjmp	.+188    	; 0x1814 <__vector_18+0x2f4>
    1758:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ11__vector_18E9field_len>
    175c:	84 31       	cpi	r24, 0x14	; 20
    175e:	08 f0       	brcs	.+2      	; 0x1762 <__vector_18+0x242>
    1760:	66 c0       	rjmp	.+204    	; 0x182e <__vector_18+0x30e>
    1762:	40 91 8b 04 	lds	r20, 0x048B	; 0x80048b <_ZZ11__vector_18E11field_index>
    1766:	41 11       	cpse	r20, r1
    1768:	19 c0       	rjmp	.+50     	; 0x179c <__vector_18+0x27c>
    176a:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    176e:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1772:	ba 01       	movw	r22, r20
    1774:	66 0f       	add	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	44 0f       	add	r20, r20
    177a:	55 1f       	adc	r21, r21
    177c:	44 0f       	add	r20, r20
    177e:	55 1f       	adc	r21, r21
    1780:	44 0f       	add	r20, r20
    1782:	55 1f       	adc	r21, r21
    1784:	46 0f       	add	r20, r22
    1786:	57 1f       	adc	r21, r23
    1788:	42 0f       	add	r20, r18
    178a:	51 1d       	adc	r21, r1
    178c:	50 93 8d 04 	sts	0x048D, r21	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1790:	40 93 8c 04 	sts	0x048C, r20	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ11__vector_18E9field_len>
    179a:	16 c0       	rjmp	.+44     	; 0x17c8 <__vector_18+0x2a8>
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	41 50       	subi	r20, 0x01	; 1
    17a0:	51 09       	sbc	r21, r1
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	98 0f       	add	r25, r24
    17a6:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ11__vector_18E9field_len>
    17aa:	e4 e1       	ldi	r30, 0x14	; 20
    17ac:	e4 9f       	mul	r30, r20
    17ae:	b0 01       	movw	r22, r0
    17b0:	e5 9f       	mul	r30, r21
    17b2:	70 0d       	add	r23, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	c6 0f       	add	r28, r22
    17b8:	d7 1f       	adc	r29, r23
    17ba:	fe 01       	movw	r30, r28
    17bc:	e8 0f       	add	r30, r24
    17be:	f1 1d       	adc	r31, r1
    17c0:	23 83       	std	Z+3, r18	; 0x03
    17c2:	c9 0f       	add	r28, r25
    17c4:	d1 1d       	adc	r29, r1
    17c6:	1b 82       	std	Y+3, r1	; 0x03
    17c8:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	89 32       	cpi	r24, 0x29	; 41
    17d2:	91 05       	cpc	r25, r1
    17d4:	0c f0       	brlt	.+2      	; 0x17d8 <__vector_18+0x2b8>
    17d6:	89 e2       	ldi	r24, 0x29	; 41
    17d8:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    17dc:	1b c0       	rjmp	.+54     	; 0x1814 <__vector_18+0x2f4>
    17de:	2f 37       	cpi	r18, 0x7F	; 127
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <__vector_18+0x2d2>
    17e2:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    17e6:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    17ea:	18 16       	cp	r1, r24
    17ec:	19 06       	cpc	r1, r25
    17ee:	b4 f0       	brlt	.+44     	; 0x181c <__vector_18+0x2fc>
    17f0:	1a c0       	rjmp	.+52     	; 0x1826 <__vector_18+0x306>
    17f2:	20 32       	cpi	r18, 0x20	; 32
    17f4:	e1 f0       	breq	.+56     	; 0x182e <__vector_18+0x30e>
    17f6:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ11__vector_18E11field_index>
    17fa:	c9 01       	movw	r24, r18
    17fc:	99 27       	eor	r25, r25
    17fe:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1802:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    1806:	1b 82       	std	Y+3, r1	; 0x03
    1808:	1f 8a       	std	Y+23, r1	; 0x17
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ11__vector_18E13receiving_msg>
    1810:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <_ZZ11__vector_18E9charIndex>
    1814:	82 2f       	mov	r24, r18
    1816:	0e 94 10 0a 	call	0x1420	; 0x1420 <_Z12lb_echo_charh>
    181a:	09 c0       	rjmp	.+18     	; 0x182e <__vector_18+0x30e>
    181c:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    1820:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    1824:	f7 cf       	rjmp	.-18     	; 0x1814 <__vector_18+0x2f4>
    1826:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_18E6msg_ID+0x1>
    182a:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ11__vector_18E6msg_ID>
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	1f 91       	pop	r17
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <__vector_19>:
    1856:	1f 92       	push	r1
    1858:	0f 92       	push	r0
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	0f 92       	push	r0
    185e:	11 24       	eor	r1, r1
    1860:	2f 93       	push	r18
    1862:	3f 93       	push	r19
    1864:	4f 93       	push	r20
    1866:	5f 93       	push	r21
    1868:	6f 93       	push	r22
    186a:	7f 93       	push	r23
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
    1878:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ11__vector_19E4buff>
    187c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ11__vector_19E4buff+0x1>
    1880:	89 2b       	or	r24, r25
    1882:	31 f4       	brne	.+12     	; 0x1890 <__vector_19+0x3a>
    1884:	0e 94 b8 08 	call	0x1170	; 0x1170 <_Z16nextFullTxBufferv>
    1888:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZ11__vector_19E4buff+0x1>
    188c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ11__vector_19E4buff>
    1890:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <_ZZ11__vector_19E4buff>
    1894:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <_ZZ11__vector_19E4buff+0x1>
    1898:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_19E9charIndex>
    189c:	df 01       	movw	r26, r30
    189e:	a8 0f       	add	r26, r24
    18a0:	b1 1d       	adc	r27, r1
    18a2:	9c 91       	ld	r25, X
    18a4:	99 23       	and	r25, r25
    18a6:	31 f0       	breq	.+12     	; 0x18b4 <__vector_19+0x5e>
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_19E9charIndex>
    18ae:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <__vector_19+0x78>
    18b4:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ11__vector_19E9charIndex>
    18b8:	10 82       	st	Z, r1
    18ba:	0e 94 b8 08 	call	0x1170	; 0x1170 <_Z16nextFullTxBufferv>
    18be:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZ11__vector_19E4buff+0x1>
    18c2:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ11__vector_19E4buff>
    18c6:	89 2b       	or	r24, r25
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__vector_19+0x78>
    18ca:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z14linkbus_end_txv>
    18ce:	ff 91       	pop	r31
    18d0:	ef 91       	pop	r30
    18d2:	bf 91       	pop	r27
    18d4:	af 91       	pop	r26
    18d6:	9f 91       	pop	r25
    18d8:	8f 91       	pop	r24
    18da:	7f 91       	pop	r23
    18dc:	6f 91       	pop	r22
    18de:	5f 91       	pop	r21
    18e0:	4f 91       	pop	r20
    18e2:	3f 91       	pop	r19
    18e4:	2f 91       	pop	r18
    18e6:	0f 90       	pop	r0
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	0f 90       	pop	r0
    18ec:	1f 90       	pop	r1
    18ee:	18 95       	reti

000018f0 <__vector_1>:
    18f0:	1f 92       	push	r1
    18f2:	0f 92       	push	r0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	0f 92       	push	r0
    18f8:	11 24       	eor	r1, r1
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	1f 92       	push	r1
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    1920:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    1924:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    1928:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	a1 1d       	adc	r26, r1
    1930:	b1 1d       	adc	r27, r1
    1932:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <g_current_epoch>
    1936:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <g_current_epoch+0x1>
    193a:	a0 93 70 05 	sts	0x0570, r26	; 0x800570 <g_current_epoch+0x2>
    193e:	b0 93 71 05 	sts	0x0571, r27	; 0x800571 <g_current_epoch+0x3>
    1942:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <g_seconds_since_powerup>
    1946:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <g_seconds_since_powerup+0x1>
    194a:	a0 91 79 05 	lds	r26, 0x0579	; 0x800579 <g_seconds_since_powerup+0x2>
    194e:	b0 91 7a 05 	lds	r27, 0x057A	; 0x80057a <g_seconds_since_powerup+0x3>
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	a1 1d       	adc	r26, r1
    1956:	b1 1d       	adc	r27, r1
    1958:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <g_seconds_since_powerup>
    195c:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <g_seconds_since_powerup+0x1>
    1960:	a0 93 79 05 	sts	0x0579, r26	; 0x800579 <g_seconds_since_powerup+0x2>
    1964:	b0 93 7a 05 	sts	0x057A, r27	; 0x80057a <g_seconds_since_powerup+0x3>
    1968:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <g_temperature_check_countdown>
    196c:	88 23       	and	r24, r24
    196e:	29 f0       	breq	.+10     	; 0x197a <__vector_1+0x8a>
    1970:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <g_temperature_check_countdown>
    1974:	81 50       	subi	r24, 0x01	; 1
    1976:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <g_temperature_check_countdown>
    197a:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <g_voltage_check_countdown>
    197e:	88 23       	and	r24, r24
    1980:	29 f0       	breq	.+10     	; 0x198c <__vector_1+0x9c>
    1982:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <g_voltage_check_countdown>
    1986:	81 50       	subi	r24, 0x01	; 1
    1988:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <g_voltage_check_countdown>
    198c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    1990:	88 23       	and	r24, r24
    1992:	91 f1       	breq	.+100    	; 0x19f8 <__vector_1+0x108>
    1994:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <g_use_rtc_for_startstop>
    1998:	88 23       	and	r24, r24
    199a:	09 f4       	brne	.+2      	; 0x199e <__vector_1+0xae>
    199c:	0b c1       	rjmp	.+534    	; 0x1bb4 <__vector_1+0x2c4>
    199e:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <g_current_epoch>
    19a2:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <g_current_epoch+0x1>
    19a6:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <g_current_epoch+0x2>
    19aa:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <g_current_epoch+0x3>
    19ae:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    19b2:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    19b6:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    19ba:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    19be:	48 17       	cp	r20, r24
    19c0:	59 07       	cpc	r21, r25
    19c2:	6a 07       	cpc	r22, r26
    19c4:	7b 07       	cpc	r23, r27
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <__vector_1+0xda>
    19c8:	f5 c0       	rjmp	.+490    	; 0x1bb4 <__vector_1+0x2c4>
    19ca:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <g_current_epoch>
    19ce:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <g_current_epoch+0x1>
    19d2:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <g_current_epoch+0x2>
    19d6:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <g_current_epoch+0x3>
    19da:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    19de:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    19e2:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    19e6:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    19ea:	48 17       	cp	r20, r24
    19ec:	59 07       	cpc	r21, r25
    19ee:	6a 07       	cpc	r22, r26
    19f0:	7b 07       	cpc	r23, r27
    19f2:	08 f4       	brcc	.+2      	; 0x19f6 <__vector_1+0x106>
    19f4:	a7 c0       	rjmp	.+334    	; 0x1b44 <__vector_1+0x254>
    19f6:	de c0       	rjmp	.+444    	; 0x1bb4 <__vector_1+0x2c4>
    19f8:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <g_use_rtc_for_startstop>
    19fc:	88 23       	and	r24, r24
    19fe:	d1 f0       	breq	.+52     	; 0x1a34 <__vector_1+0x144>
    1a00:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <g_current_epoch>
    1a04:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <g_current_epoch+0x1>
    1a08:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <g_current_epoch+0x2>
    1a0c:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <g_current_epoch+0x3>
    1a10:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    1a14:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    1a18:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    1a1c:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    1a20:	48 17       	cp	r20, r24
    1a22:	59 07       	cpc	r21, r25
    1a24:	6a 07       	cpc	r22, r26
    1a26:	7b 07       	cpc	r23, r27
    1a28:	28 f0       	brcs	.+10     	; 0x1a34 <__vector_1+0x144>
    1a2a:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_use_rtc_for_startstop>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_transmissions_disabled>
    1a34:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	bc c0       	rjmp	.+376    	; 0x1bb4 <__vector_1+0x2c4>
    1a3c:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <g_seconds_since_sync>
    1a40:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <g_seconds_since_sync+0x1>
    1a44:	a0 91 7d 05 	lds	r26, 0x057D	; 0x80057d <g_seconds_since_sync+0x2>
    1a48:	b0 91 7e 05 	lds	r27, 0x057E	; 0x80057e <g_seconds_since_sync+0x3>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	8a 2b       	or	r24, r26
    1a50:	8b 2b       	or	r24, r27
    1a52:	71 f4       	brne	.+28     	; 0x1a70 <__vector_1+0x180>
    1a54:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_id_interval>
    1a58:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <g_id_interval+0x1>
    1a5c:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ10__vector_1E12id_countdown+0x1>
    1a60:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ10__vector_1E12id_countdown>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_counter+0x1>
    1a6c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_counter>
    1a70:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <g_seconds_since_sync>
    1a74:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <g_seconds_since_sync+0x1>
    1a78:	a0 91 7d 05 	lds	r26, 0x057D	; 0x80057d <g_seconds_since_sync+0x2>
    1a7c:	b0 91 7e 05 	lds	r27, 0x057E	; 0x80057e <g_seconds_since_sync+0x3>
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	a1 1d       	adc	r26, r1
    1a84:	b1 1d       	adc	r27, r1
    1a86:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <g_seconds_since_sync>
    1a8a:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <g_seconds_since_sync+0x1>
    1a8e:	a0 93 7d 05 	sts	0x057D, r26	; 0x80057d <g_seconds_since_sync+0x2>
    1a92:	b0 93 7e 05 	sts	0x057E, r27	; 0x80057e <g_seconds_since_sync+0x3>
    1a96:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_fox_seconds_into_interval>
    1a9a:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <g_fox_seconds_into_interval+0x1>
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <g_fox_seconds_into_interval+0x1>
    1aa4:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <g_fox_seconds_into_interval>
    1aa8:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ10__vector_1E12id_countdown>
    1aac:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZZ10__vector_1E12id_countdown+0x1>
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <__vector_1+0x1ce>
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ10__vector_1E12id_countdown+0x1>
    1aba:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ10__vector_1E12id_countdown>
    1abe:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_number_of_foxes>
    1ac2:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_number_of_foxes+0x1>
    1ac6:	89 2b       	or	r24, r25
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <__vector_1+0x1dc>
    1aca:	74 c0       	rjmp	.+232    	; 0x1bb4 <__vector_1+0x2c4>
    1acc:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_seconds_since_sync>
    1ad0:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_seconds_since_sync+0x1>
    1ad4:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_seconds_since_sync+0x2>
    1ad8:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_seconds_since_sync+0x3>
    1adc:	20 91 40 05 	lds	r18, 0x0540	; 0x800540 <g_on_air_interval>
    1ae0:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <g_on_air_interval+0x1>
    1ae4:	03 2e       	mov	r0, r19
    1ae6:	00 0c       	add	r0, r0
    1ae8:	44 0b       	sbc	r20, r20
    1aea:	55 0b       	sbc	r21, r21
    1aec:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__divmodsi4>
    1af0:	67 2b       	or	r22, r23
    1af2:	68 2b       	or	r22, r24
    1af4:	69 2b       	or	r22, r25
    1af6:	09 f4       	brne	.+2      	; 0x1afa <__vector_1+0x20a>
    1af8:	47 c0       	rjmp	.+142    	; 0x1b88 <__vector_1+0x298>
    1afa:	5c c0       	rjmp	.+184    	; 0x1bb4 <__vector_1+0x2c4>
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_counter+0x1>
    1b04:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_counter>
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	8d e0       	ldi	r24, 0x0D	; 13
    1b0c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_fox_transition>
    1b16:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_seconds_into_interval+0x1>
    1b1a:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_fox_seconds_into_interval>
    1b1e:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ10__vector_1E12id_countdown>
    1b22:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZZ10__vector_1E12id_countdown+0x1>
    1b26:	89 2b       	or	r24, r25
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <__vector_1+0x23c>
    1b2a:	44 c0       	rjmp	.+136    	; 0x1bb4 <__vector_1+0x2c4>
    1b2c:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_id_interval>
    1b30:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <g_id_interval+0x1>
    1b34:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ10__vector_1E12id_countdown+0x1>
    1b38:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ10__vector_1E12id_countdown>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <g_time_to_ID>
    1b42:	38 c0       	rjmp	.+112    	; 0x1bb4 <__vector_1+0x2c4>
    1b44:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <g_LED_enunciating>
    1b48:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_transmissions_disabled>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	be 01       	movw	r22, r28
    1b56:	6f 5f       	subi	r22, 0xFF	; 255
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	85 ef       	ldi	r24, 0xF5	; 245
    1b5c:	94 e0       	ldi	r25, 0x04	; 4
    1b5e:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
    1b62:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_pattern_codespeed>
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	82 e8       	ldi	r24, 0x82	; 130
    1b6a:	9b e1       	ldi	r25, 0x1B	; 27
    1b6c:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    1b70:	cb 01       	movw	r24, r22
    1b72:	6a e0       	ldi	r22, 0x0A	; 10
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    1b7a:	66 0f       	add	r22, r22
    1b7c:	77 1f       	adc	r23, r23
    1b7e:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <g_code_throttle+0x1>
    1b82:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <g_code_throttle>
    1b86:	16 c0       	rjmp	.+44     	; 0x1bb4 <__vector_1+0x2c4>
    1b88:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_fox_counter>
    1b8c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <g_fox_counter+0x1>
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_counter+0x1>
    1b96:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_counter>
    1b9a:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <g_fox_counter>
    1b9e:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <g_fox_counter+0x1>
    1ba2:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_number_of_foxes>
    1ba6:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_number_of_foxes+0x1>
    1baa:	82 17       	cp	r24, r18
    1bac:	93 07       	cpc	r25, r19
    1bae:	0c f0       	brlt	.+2      	; 0x1bb2 <__vector_1+0x2c2>
    1bb0:	af cf       	rjmp	.-162    	; 0x1b10 <__vector_1+0x220>
    1bb2:	a4 cf       	rjmp	.-184    	; 0x1afc <__vector_1+0x20c>
    1bb4:	0f 90       	pop	r0
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <__vector_14>:
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	2f 93       	push	r18
    1be8:	3f 93       	push	r19
    1bea:	4f 93       	push	r20
    1bec:	5f 93       	push	r21
    1bee:	6f 93       	push	r22
    1bf0:	7f 93       	push	r23
    1bf2:	8f 93       	push	r24
    1bf4:	9f 93       	push	r25
    1bf6:	af 93       	push	r26
    1bf8:	bf 93       	push	r27
    1bfa:	ef 93       	push	r30
    1bfc:	ff 93       	push	r31
    1bfe:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ11__vector_14E6toggle>
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	81 11       	cpse	r24, r1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <_ZZ11__vector_14E6toggle>
    1c0c:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <g_audio_tone_state>
    1c10:	99 23       	and	r25, r25
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <__vector_14+0x50>
    1c14:	81 11       	cpse	r24, r1
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <__vector_14+0x46>
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	89 e0       	ldi	r24, 0x09	; 9
    1c1c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <__vector_14+0x58>
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	89 e0       	ldi	r24, 0x09	; 9
    1c26:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <__vector_14+0x58>
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	89 e0       	ldi	r24, 0x09	; 9
    1c30:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1c34:	ff 91       	pop	r31
    1c36:	ef 91       	pop	r30
    1c38:	bf 91       	pop	r27
    1c3a:	af 91       	pop	r26
    1c3c:	9f 91       	pop	r25
    1c3e:	8f 91       	pop	r24
    1c40:	7f 91       	pop	r23
    1c42:	6f 91       	pop	r22
    1c44:	5f 91       	pop	r21
    1c46:	4f 91       	pop	r20
    1c48:	3f 91       	pop	r19
    1c4a:	2f 91       	pop	r18
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	0f 90       	pop	r0
    1c52:	1f 90       	pop	r1
    1c54:	18 95       	reti

00001c56 <__vector_11>:
    1c56:	1f 92       	push	r1
    1c58:	0f 92       	push	r0
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	8f 93       	push	r24
    1c62:	9f 93       	push	r25
    1c64:	ef 93       	push	r30
    1c66:	ff 93       	push	r31
    1c68:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_AM_enabled>
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <__vector_11+0x1c>
    1c70:	4b c0       	rjmp	.+150    	; 0x1d08 <__vector_11+0xb2>
    1c72:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <g_sendAMmodulation>
    1c76:	81 11       	cpse	r24, r1
    1c78:	30 c0       	rjmp	.+96     	; 0x1cda <__vector_11+0x84>
    1c7a:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ11__vector_11E5index>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	2c c0       	rjmp	.+88     	; 0x1cda <__vector_11+0x84>
    1c82:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_sendAMmodulationConstantly>
    1c86:	88 23       	and	r24, r24
    1c88:	a1 f0       	breq	.+40     	; 0x1cb2 <__vector_11+0x5c>
    1c8a:	36 c0       	rjmp	.+108    	; 0x1cf8 <__vector_11+0xa2>
    1c8c:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ11__vector_11E5index>
    1c90:	98 b1       	in	r25, 0x08	; 8
    1c92:	8f 70       	andi	r24, 0x0F	; 15
    1c94:	90 7f       	andi	r25, 0xF0	; 240
    1c96:	89 2b       	or	r24, r25
    1c98:	88 b9       	out	0x08, r24	; 8
    1c9a:	9b b1       	in	r25, 0x0b	; 11
    1c9c:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1ca0:	80 73       	andi	r24, 0x30	; 48
    1ca2:	82 95       	swap	r24
    1ca4:	8f 70       	andi	r24, 0x0F	; 15
    1ca6:	9c 7f       	andi	r25, 0xFC	; 252
    1ca8:	89 2b       	or	r24, r25
    1caa:	8b b9       	out	0x0b, r24	; 11
    1cac:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1cb0:	2b c0       	rjmp	.+86     	; 0x1d08 <__vector_11+0xb2>
    1cb2:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1cb6:	8f 33       	cpi	r24, 0x3F	; 63
    1cb8:	39 f1       	breq	.+78     	; 0x1d08 <__vector_11+0xb2>
    1cba:	8f e3       	ldi	r24, 0x3F	; 63
    1cbc:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1cc0:	88 b1       	in	r24, 0x08	; 8
    1cc2:	8f 60       	ori	r24, 0x0F	; 15
    1cc4:	88 b9       	out	0x08, r24	; 8
    1cc6:	8b b1       	in	r24, 0x0b	; 11
    1cc8:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1ccc:	90 73       	andi	r25, 0x30	; 48
    1cce:	92 95       	swap	r25
    1cd0:	9f 70       	andi	r25, 0x0F	; 15
    1cd2:	8c 7f       	andi	r24, 0xFC	; 252
    1cd4:	89 2b       	or	r24, r25
    1cd6:	8b b9       	out	0x0b, r24	; 11
    1cd8:	17 c0       	rjmp	.+46     	; 0x1d08 <__vector_11+0xb2>
    1cda:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <_ZZ11__vector_11E5index>
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9e 0f       	add	r25, r30
    1ce2:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <_ZZ11__vector_11E5index>
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ee 5b       	subi	r30, 0xBE	; 190
    1cea:	fa 4f       	sbci	r31, 0xFA	; 250
    1cec:	80 81       	ld	r24, Z
    1cee:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1cf2:	90 32       	cpi	r25, 0x20	; 32
    1cf4:	58 f6       	brcc	.-106    	; 0x1c8c <__vector_11+0x36>
    1cf6:	cc cf       	rjmp	.-104    	; 0x1c90 <__vector_11+0x3a>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <_ZZ11__vector_11E5index>
    1cfe:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <g_dataModulation>
    1d02:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <_ZZ11__vector_11E11controlPins>
    1d06:	c4 cf       	rjmp	.-120    	; 0x1c90 <__vector_11+0x3a>
    1d08:	ff 91       	pop	r31
    1d0a:	ef 91       	pop	r30
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <_Z23clockConfigurationCheckv>:
    1d1a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    1d1e:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    1d22:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    1d26:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    1d2a:	81 15       	cp	r24, r1
    1d2c:	96 46       	sbci	r25, 0x66	; 102
    1d2e:	ae 4e       	sbci	r26, 0xEE	; 238
    1d30:	bf 45       	sbci	r27, 0x5F	; 95
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <_Z23clockConfigurationCheckv+0x1c>
    1d34:	67 c0       	rjmp	.+206    	; 0x1e04 <_Z23clockConfigurationCheckv+0xea>
    1d36:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    1d3a:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    1d3e:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    1d42:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    1d46:	81 15       	cp	r24, r1
    1d48:	96 46       	sbci	r25, 0x66	; 102
    1d4a:	ae 4e       	sbci	r26, 0xEE	; 238
    1d4c:	bf 45       	sbci	r27, 0x5F	; 95
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <_Z23clockConfigurationCheckv+0x38>
    1d50:	5b c0       	rjmp	.+182    	; 0x1e08 <_Z23clockConfigurationCheckv+0xee>
    1d52:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    1d56:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    1d5a:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    1d5e:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    1d62:	81 15       	cp	r24, r1
    1d64:	96 46       	sbci	r25, 0x66	; 102
    1d66:	ae 4e       	sbci	r26, 0xEE	; 238
    1d68:	bf 45       	sbci	r27, 0x5F	; 95
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <_Z23clockConfigurationCheckv+0x54>
    1d6c:	4f c0       	rjmp	.+158    	; 0x1e0c <_Z23clockConfigurationCheckv+0xf2>
    1d6e:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <g_event_finish_epoch>
    1d72:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    1d76:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    1d7a:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    1d7e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    1d82:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    1d86:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    1d8a:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    1d8e:	84 17       	cp	r24, r20
    1d90:	95 07       	cpc	r25, r21
    1d92:	a6 07       	cpc	r26, r22
    1d94:	b7 07       	cpc	r27, r23
    1d96:	e0 f5       	brcc	.+120    	; 0x1e10 <_Z23clockConfigurationCheckv+0xf6>
    1d98:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <g_current_epoch>
    1d9c:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <g_current_epoch+0x1>
    1da0:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <g_current_epoch+0x2>
    1da4:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <g_current_epoch+0x3>
    1da8:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    1dac:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    1db0:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    1db4:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    1db8:	84 17       	cp	r24, r20
    1dba:	95 07       	cpc	r25, r21
    1dbc:	a6 07       	cpc	r26, r22
    1dbe:	b7 07       	cpc	r27, r23
    1dc0:	48 f1       	brcs	.+82     	; 0x1e14 <_Z23clockConfigurationCheckv+0xfa>
    1dc2:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <g_current_epoch>
    1dc6:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <g_current_epoch+0x1>
    1dca:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <g_current_epoch+0x2>
    1dce:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <g_current_epoch+0x3>
    1dd2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    1dd6:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    1dda:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    1dde:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    1de2:	84 17       	cp	r24, r20
    1de4:	95 07       	cpc	r25, r21
    1de6:	a6 07       	cpc	r26, r22
    1de8:	b7 07       	cpc	r27, r23
    1dea:	30 f4       	brcc	.+12     	; 0x1df8 <_Z23clockConfigurationCheckv+0xde>
    1dec:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    1df0:	81 11       	cpse	r24, r1
    1df2:	12 c0       	rjmp	.+36     	; 0x1e18 <_Z23clockConfigurationCheckv+0xfe>
    1df4:	85 e0       	ldi	r24, 0x05	; 5
    1df6:	08 95       	ret
    1df8:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <g_use_rtc_for_startstop>
    1dfc:	88 23       	and	r24, r24
    1dfe:	71 f0       	breq	.+28     	; 0x1e1c <_Z23clockConfigurationCheckv+0x102>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	08 95       	ret
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	08 95       	ret
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	08 95       	ret
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	08 95       	ret
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	08 95       	ret
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	08 95       	ret
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	08 95       	ret
    1e1c:	84 e0       	ldi	r24, 0x04	; 4
    1e1e:	08 95       	ret

00001e20 <_Z13sendMorseToneh>:
    1e20:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_fox_tone_offset>
    1e24:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_fox_tone_offset+0x1>
    1e28:	9f e2       	ldi	r25, 0x2F	; 47
    1e2a:	92 1b       	sub	r25, r18
    1e2c:	97 bd       	out	0x27, r25	; 39
    1e2e:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <g_audio_tone_state>
    1e32:	08 95       	ret

00001e34 <__vector_8>:
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <__vector_8+0x28>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_tick_count>
    1e64:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <g_tick_count+0x1>
    1e68:	a0 91 e8 04 	lds	r26, 0x04E8	; 0x8004e8 <g_tick_count+0x2>
    1e6c:	b0 91 e9 04 	lds	r27, 0x04E9	; 0x8004e9 <g_tick_count+0x3>
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	b1 1d       	adc	r27, r1
    1e76:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <g_tick_count>
    1e7a:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <g_tick_count+0x1>
    1e7e:	a0 93 e8 04 	sts	0x04E8, r26	; 0x8004e8 <g_tick_count+0x2>
    1e82:	b0 93 e9 04 	sts	0x04E9, r27	; 0x8004e9 <g_tick_count+0x3>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	1a 82       	std	Y+2, r1	; 0x02
    1e8c:	84 e0       	ldi	r24, 0x04	; 4
    1e8e:	0e 94 31 02 	call	0x462	; 0x462 <_Z11digitalReadh>
    1e92:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <g_reset_button_held>
    1e96:	99 23       	and	r25, r25
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <__vector_8+0x68>
    1e9a:	1b c1       	rjmp	.+566    	; 0x20d2 <__vector_8+0x29e>
    1e9c:	88 23       	and	r24, r24
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <__vector_8+0x6e>
    1ea0:	1b c1       	rjmp	.+566    	; 0x20d8 <__vector_8+0x2a4>
    1ea2:	17 c1       	rjmp	.+558    	; 0x20d2 <__vector_8+0x29e>
    1ea4:	44 e0       	ldi	r20, 0x04	; 4
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	40 93 77 05 	sts	0x0577, r20	; 0x800577 <g_seconds_since_powerup>
    1eb0:	50 93 78 05 	sts	0x0578, r21	; 0x800578 <g_seconds_since_powerup+0x1>
    1eb4:	60 93 79 05 	sts	0x0579, r22	; 0x800579 <g_seconds_since_powerup+0x2>
    1eb8:	70 93 7a 05 	sts	0x057A, r23	; 0x80057a <g_seconds_since_powerup+0x3>
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <g_perform_EEPROM_reset>
    1ec2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1ec6:	89 13       	cpse	r24, r25
    1ec8:	25 c0       	rjmp	.+74     	; 0x1f14 <__vector_8+0xe0>
    1eca:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <g_sync_pin_timer>
    1ece:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <g_sync_pin_timer+0x1>
    1ed2:	2b 3b       	cpi	r18, 0xBB	; 187
    1ed4:	30 41       	sbci	r19, 0x10	; 16
    1ed6:	54 f4       	brge	.+20     	; 0x1eec <__vector_8+0xb8>
    1ed8:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <g_sync_pin_timer>
    1edc:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <g_sync_pin_timer+0x1>
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	30 93 32 05 	sts	0x0532, r19	; 0x800532 <g_sync_pin_timer+0x1>
    1ee8:	20 93 31 05 	sts	0x0531, r18	; 0x800531 <g_sync_pin_timer>
    1eec:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <g_sync_pin_timer>
    1ef0:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <g_sync_pin_timer+0x1>
    1ef4:	20 39       	cpi	r18, 0x90	; 144
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	9c f0       	brlt	.+38     	; 0x1f20 <__vector_8+0xec>
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <__vector_8+0xcc>
    1efe:	fb c0       	rjmp	.+502    	; 0x20f6 <__vector_8+0x2c2>
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	90 93 30 05 	sts	0x0530, r25	; 0x800530 <g_sync_pin_stable>
    1f06:	81 11       	cpse	r24, r1
    1f08:	0b c0       	rjmp	.+22     	; 0x1f20 <__vector_8+0xec>
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	8d e0       	ldi	r24, 0x0D	; 13
    1f0e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <__vector_8+0xec>
    1f14:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1f18:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <g_sync_pin_timer+0x1>
    1f1c:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <g_sync_pin_timer>
    1f20:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    1f24:	81 11       	cpse	r24, r1
    1f26:	eb c0       	rjmp	.+470    	; 0x20fe <__vector_8+0x2ca>
    1f28:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_on_the_air>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	ed c0       	rjmp	.+474    	; 0x210a <__vector_8+0x2d6>
    1f30:	e6 c0       	rjmp	.+460    	; 0x20fe <__vector_8+0x2ca>
    1f32:	61 e0       	ldi	r22, 0x01	; 1
    1f34:	88 e0       	ldi	r24, 0x08	; 8
    1f36:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1f3a:	84 e9       	ldi	r24, 0x94	; 148
    1f3c:	95 e0       	ldi	r25, 0x05	; 5
    1f3e:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_8E9ptt_delay+0x1>
    1f42:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_8E9ptt_delay>
    1f46:	e7 c0       	rjmp	.+462    	; 0x2116 <__vector_8+0x2e2>
    1f48:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10__vector_8E9ptt_delay>
    1f4c:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10__vector_8E9ptt_delay+0x1>
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	31 f0       	breq	.+12     	; 0x1f60 <__vector_8+0x12c>
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_8E9ptt_delay+0x1>
    1f5a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_8E9ptt_delay>
    1f5e:	db c0       	rjmp	.+438    	; 0x2116 <__vector_8+0x2e2>
    1f60:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10__vector_8E7codeInc>
    1f64:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	99 f1       	breq	.+102    	; 0x1fd2 <__vector_8+0x19e>
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    1f72:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E7codeInc>
    1f76:	89 2b       	or	r24, r25
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <__vector_8+0x148>
    1f7a:	cd c0       	rjmp	.+410    	; 0x2116 <__vector_8+0x2e2>
    1f7c:	ae 01       	movw	r20, r28
    1f7e:	4e 5f       	subi	r20, 0xFE	; 254
    1f80:	5f 4f       	sbci	r21, 0xFF	; 255
    1f82:	be 01       	movw	r22, r28
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
    1f90:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ10__vector_8E3key>
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	81 11       	cpse	r24, r1
    1f98:	0b c0       	rjmp	.+22     	; 0x1fb0 <__vector_8+0x17c>
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	88 23       	and	r24, r24
    1f9e:	41 f0       	breq	.+16     	; 0x1fb0 <__vector_8+0x17c>
    1fa0:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_ZZ10__vector_8E3key>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_callsign_sent>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z13sendMorseToneh>
    1fb0:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    1fb4:	8d e0       	ldi	r24, 0x0D	; 13
    1fb6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1fba:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    1fbe:	8a e0       	ldi	r24, 0x0A	; 10
    1fc0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1fc4:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    1fc8:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_sendAMmodulation>
    1fcc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z13sendMorseToneh>
    1fd0:	a2 c0       	rjmp	.+324    	; 0x2116 <__vector_8+0x2e2>
    1fd2:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <g_sync_pin_stable>
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <__vector_8+0x1b0>
    1fda:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    1fde:	8d e0       	ldi	r24, 0x0D	; 13
    1fe0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1fe4:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    1fe8:	8a e0       	ldi	r24, 0x0A	; 10
    1fea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    1fee:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    1ff2:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <g_sendAMmodulation>
    1ff6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z13sendMorseToneh>
    1ffa:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <g_code_throttle>
    1ffe:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <g_code_throttle+0x1>
    2002:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    2006:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E7codeInc>
    200a:	85 c0       	rjmp	.+266    	; 0x2116 <__vector_8+0x2e2>
    200c:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10__vector_8E9ptt_delay>
    2010:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10__vector_8E9ptt_delay+0x1>
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	39 f4       	brne	.+14     	; 0x2026 <__vector_8+0x1f2>
    2018:	84 e6       	ldi	r24, 0x64	; 100
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_8E9ptt_delay+0x1>
    2020:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_8E9ptt_delay>
    2024:	0b c0       	rjmp	.+22     	; 0x203c <__vector_8+0x208>
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_8E9ptt_delay+0x1>
    202c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_8E9ptt_delay>
    2030:	89 2b       	or	r24, r25
    2032:	21 f4       	brne	.+8      	; 0x203c <__vector_8+0x208>
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    203c:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <g_LED_enunciating>
    2040:	88 23       	and	r24, r24
    2042:	79 f1       	breq	.+94     	; 0x20a2 <__vector_8+0x26e>
    2044:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10__vector_8E7codeInc>
    2048:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	01 f1       	breq	.+64     	; 0x2090 <__vector_8+0x25c>
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    2056:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E7codeInc>
    205a:	89 2b       	or	r24, r25
    205c:	81 f5       	brne	.+96     	; 0x20be <__vector_8+0x28a>
    205e:	ae 01       	movw	r20, r28
    2060:	4e 5f       	subi	r20, 0xFE	; 254
    2062:	5f 4f       	sbci	r21, 0xFF	; 255
    2064:	be 01       	movw	r22, r28
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
    2072:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ10__vector_8E3key>
    2076:	68 2f       	mov	r22, r24
    2078:	8d e0       	ldi	r24, 0x0D	; 13
    207a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    207e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <g_code_throttle>
    2082:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <g_code_throttle+0x1>
    2086:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    208a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E7codeInc>
    208e:	17 c0       	rjmp	.+46     	; 0x20be <__vector_8+0x28a>
    2090:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <g_code_throttle>
    2094:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <g_code_throttle+0x1>
    2098:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E7codeInc+0x1>
    209c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E7codeInc>
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <__vector_8+0x28a>
    20a2:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ10__vector_8E3key>
    20a6:	88 23       	and	r24, r24
    20a8:	51 f0       	breq	.+20     	; 0x20be <__vector_8+0x28a>
    20aa:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_ZZ10__vector_8E3key>
    20ae:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <g_sync_pin_stable>
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	21 f0       	breq	.+8      	; 0x20be <__vector_8+0x28a>
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	8d e0       	ldi	r24, 0x0D	; 13
    20ba:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	8a e0       	ldi	r24, 0x0A	; 10
    20c2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    20c6:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <g_sendAMmodulation>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z13sendMorseToneh>
    20d0:	22 c0       	rjmp	.+68     	; 0x2116 <__vector_8+0x2e2>
    20d2:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <g_reset_button_held>
    20d6:	f5 ce       	rjmp	.-534    	; 0x1ec2 <__vector_8+0x8e>
    20d8:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <g_seconds_since_powerup>
    20dc:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <g_seconds_since_powerup+0x1>
    20e0:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <g_seconds_since_powerup+0x2>
    20e4:	70 91 7a 05 	lds	r23, 0x057A	; 0x80057a <g_seconds_since_powerup+0x3>
    20e8:	43 30       	cpi	r20, 0x03	; 3
    20ea:	51 05       	cpc	r21, r1
    20ec:	61 05       	cpc	r22, r1
    20ee:	71 05       	cpc	r23, r1
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <__vector_8+0x2c0>
    20f2:	e7 ce       	rjmp	.-562    	; 0x1ec2 <__vector_8+0x8e>
    20f4:	d7 ce       	rjmp	.-594    	; 0x1ea4 <__vector_8+0x70>
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <g_sync_pin_stable>
    20fc:	11 cf       	rjmp	.-478    	; 0x1f20 <__vector_8+0xec>
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	0e 94 31 02 	call	0x462	; 0x462 <_Z11digitalReadh>
    2104:	81 11       	cpse	r24, r1
    2106:	82 cf       	rjmp	.-252    	; 0x200c <__vector_8+0x1d8>
    2108:	99 cf       	rjmp	.-206    	; 0x203c <__vector_8+0x208>
    210a:	88 e0       	ldi	r24, 0x08	; 8
    210c:	0e 94 31 02 	call	0x462	; 0x462 <_Z11digitalReadh>
    2110:	81 11       	cpse	r24, r1
    2112:	1a cf       	rjmp	.-460    	; 0x1f48 <__vector_8+0x114>
    2114:	0e cf       	rjmp	.-484    	; 0x1f32 <__vector_8+0xfe>
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	ff 91       	pop	r31
    2120:	ef 91       	pop	r30
    2122:	bf 91       	pop	r27
    2124:	af 91       	pop	r26
    2126:	9f 91       	pop	r25
    2128:	8f 91       	pop	r24
    212a:	7f 91       	pop	r23
    212c:	6f 91       	pop	r22
    212e:	5f 91       	pop	r21
    2130:	4f 91       	pop	r20
    2132:	3f 91       	pop	r19
    2134:	2f 91       	pop	r18
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	0f 90       	pop	r0
    213c:	1f 90       	pop	r1
    213e:	18 95       	reti

00002140 <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox, EventAction_t action)
{
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	00 d0       	rcall	.+0      	; 0x2146 <_Z11setupForFoxP5Fox_t13EventAction_t+0x6>
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	if(fox)
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	31 f0       	breq	.+12     	; 0x215a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a>
	{
		if(*fox != INVALID_FOX)
    214e:	fc 01       	movw	r30, r24
    2150:	80 81       	ld	r24, Z
    2152:	82 31       	cpi	r24, 0x12	; 18
    2154:	11 f0       	breq	.+4      	; 0x215a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a>
		{
			g_fox = *fox;
    2156:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <g_fox>
		}
	}

	cli();
    215a:	f8 94       	cli

	switch(g_fox)
    215c:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <g_fox>
    2160:	8e 2f       	mov	r24, r30
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	fc 01       	movw	r30, r24
    2166:	31 97       	sbiw	r30, 0x01	; 1
    2168:	e3 31       	cpi	r30, 0x13	; 19
    216a:	f1 05       	cpc	r31, r1
    216c:	08 f0       	brcs	.+2      	; 0x2170 <_Z11setupForFoxP5Fox_t13EventAction_t+0x30>
    216e:	86 c0       	rjmp	.+268    	; 0x227c <_Z11setupForFoxP5Fox_t13EventAction_t+0x13c>
    2170:	ee 57       	subi	r30, 0x7E	; 126
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval = 60;
    2178:	8c e3       	ldi	r24, 0x3C	; 60
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <g_on_air_interval+0x1>
    2180:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_on_air_interval>
			g_cycle_period_seconds = 300;
    2184:	2c e2       	ldi	r18, 0x2C	; 44
    2186:	31 e0       	ldi	r19, 0x01	; 1
    2188:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <g_cycle_period_seconds+0x1>
    218c:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2190:	25 e0       	ldi	r18, 0x05	; 5
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	30 93 3b 05 	sts	0x053B, r19	; 0x80053b <g_number_of_foxes+0x1>
    2198:	20 93 3a 05 	sts	0x053A, r18	; 0x80053a <g_number_of_foxes>
			g_fox_id_offset = 0;
    219c:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <g_fox_id_offset+0x1>
    21a0:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    21a4:	28 e0       	ldi	r18, 0x08	; 8
    21a6:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <g_pattern_codespeed>
			g_id_interval = 60;
    21aa:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <g_id_interval+0x1>
    21ae:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_id_interval>
		}
		break;
    21b2:	77 c0       	rjmp	.+238    	; 0x22a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x162>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval = 12;
    21b4:	8c e0       	ldi	r24, 0x0C	; 12
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <g_on_air_interval+0x1>
    21bc:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_on_air_interval>
			g_cycle_period_seconds = 60;
    21c0:	8c e3       	ldi	r24, 0x3C	; 60
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <g_cycle_period_seconds+0x1>
    21c8:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    21cc:	85 e0       	ldi	r24, 0x05	; 5
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <g_number_of_foxes+0x1>
    21d4:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1 - 1;
    21de:	87 e0       	ldi	r24, 0x07	; 7
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <g_fox_id_offset+0x1>
    21e6:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <g_fox_id_offset>
			g_id_interval = 600;
    21ea:	88 e5       	ldi	r24, 0x58	; 88
    21ec:	92 e0       	ldi	r25, 0x02	; 2
    21ee:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <g_id_interval+0x1>
    21f2:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_id_interval>
		}
		break;
    21f6:	55 c0       	rjmp	.+170    	; 0x22a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x162>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval = 12;
    21f8:	8c e0       	ldi	r24, 0x0C	; 12
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <g_on_air_interval+0x1>
    2200:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_on_air_interval>
			g_cycle_period_seconds = 60;
    2204:	2c e3       	ldi	r18, 0x3C	; 60
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <g_cycle_period_seconds+0x1>
    220c:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2210:	25 e0       	ldi	r18, 0x05	; 5
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	30 93 3b 05 	sts	0x053B, r19	; 0x80053b <g_number_of_foxes+0x1>
    2218:	20 93 3a 05 	sts	0x053A, r18	; 0x80053a <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    221c:	2f e0       	ldi	r18, 0x0F	; 15
    221e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    2222:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <g_fox_id_offset+0x1>
    2226:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <g_fox_id_offset>
			g_id_interval = 600;
    222a:	88 e5       	ldi	r24, 0x58	; 88
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <g_id_interval+0x1>
    2232:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_id_interval>
		}
		break;
    2236:	35 c0       	rjmp	.+106    	; 0x22a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x162>

		case REPORT_BATTERY:
		{
			g_on_air_interval = 30;
    2238:	8e e1       	ldi	r24, 0x1E	; 30
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <g_on_air_interval+0x1>
    2240:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_on_air_interval>
			g_cycle_period_seconds = 60;
    2244:	8c e3       	ldi	r24, 0x3C	; 60
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <g_cycle_period_seconds+0x1>
    224c:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_cycle_period_seconds>
			g_number_of_foxes = 2;
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <g_number_of_foxes+0x1>
    2258:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    225c:	88 e0       	ldi	r24, 0x08	; 8
    225e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_pattern_codespeed>
			g_fox_id_offset = REPORT_BATTERY - 1;
    2262:	82 e1       	ldi	r24, 0x12	; 18
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <g_fox_id_offset+0x1>
    226a:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <g_fox_id_offset>
			g_id_interval = 15;
    226e:	8f e0       	ldi	r24, 0x0F	; 15
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <g_id_interval+0x1>
    2276:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_id_interval>
		}
		break;
    227a:	13 c0       	rjmp	.+38     	; 0x22a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x162>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    227c:	88 e5       	ldi	r24, 0x58	; 88
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <g_on_air_interval+0x1>
    2284:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_on_air_interval>
			g_number_of_foxes = 1;
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	30 93 3b 05 	sts	0x053B, r19	; 0x80053b <g_number_of_foxes+0x1>
    2290:	20 93 3a 05 	sts	0x053A, r18	; 0x80053a <g_number_of_foxes>
			g_pattern_codespeed = 8;
    2294:	28 e0       	ldi	r18, 0x08	; 8
    2296:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <g_pattern_codespeed>
			g_id_interval = 600;
    229a:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <g_id_interval+0x1>
    229e:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_id_interval>
		}
		break;
	}

	if(action == START_NOTHING)
    22a2:	63 30       	cpi	r22, 0x03	; 3
    22a4:	31 f4       	brne	.+12     	; 0x22b2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x172>
	{
		g_use_rtc_for_startstop = FALSE;
    22a6:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_transmissions_disabled>
    22b0:	cf c0       	rjmp	.+414    	; 0x2450 <_Z11setupForFoxP5Fox_t13EventAction_t+0x310>
	}
	else if(action == START_EVENT_NOW)
    22b2:	61 11       	cpse	r22, r1
    22b4:	17 c0       	rjmp	.+46     	; 0x22e4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a4>
	{
		g_fox_counter = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_counter+0x1>
    22be:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_counter>
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    22c2:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <g_seconds_since_sync>
    22c6:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <g_seconds_since_sync+0x1>
    22ca:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <g_seconds_since_sync+0x2>
    22ce:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_seconds_since_sync+0x3>
		g_fox_seconds_into_interval = 0;
    22d2:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_seconds_into_interval+0x1>
    22d6:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_fox_seconds_into_interval>
		g_use_rtc_for_startstop = FALSE;
    22da:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    22de:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_transmissions_disabled>
    22e2:	b6 c0       	rjmp	.+364    	; 0x2450 <_Z11setupForFoxP5Fox_t13EventAction_t+0x310>
	}
	else if(action == START_TRANSMISSIONS_NOW)                      /* Immediately start transmitting, regardless RTC or time slot */
    22e4:	61 30       	cpi	r22, 0x01	; 1
    22e6:	89 f5       	brne	.+98     	; 0x234a <_Z11setupForFoxP5Fox_t13EventAction_t+0x20a>
	{
		g_fox_counter = g_fox - g_fox_id_offset;
    22e8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    22ec:	20 91 37 05 	lds	r18, 0x0537	; 0x800537 <g_fox_id_offset>
    22f0:	30 91 38 05 	lds	r19, 0x0538	; 0x800538 <g_fox_id_offset+0x1>
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	82 1b       	sub	r24, r18
    22f8:	93 0b       	sbc	r25, r19
    22fa:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_counter+0x1>
    22fe:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_counter>
		g_seconds_since_sync = g_fox_counter * g_on_air_interval;   /* Total elapsed time counter */
    2302:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <g_fox_counter>
    2306:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <g_fox_counter+0x1>
    230a:	20 91 40 05 	lds	r18, 0x0540	; 0x800540 <g_on_air_interval>
    230e:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <g_on_air_interval+0x1>
    2312:	42 9f       	mul	r20, r18
    2314:	c0 01       	movw	r24, r0
    2316:	43 9f       	mul	r20, r19
    2318:	90 0d       	add	r25, r0
    231a:	52 9f       	mul	r21, r18
    231c:	90 0d       	add	r25, r0
    231e:	11 24       	eor	r1, r1
    2320:	09 2e       	mov	r0, r25
    2322:	00 0c       	add	r0, r0
    2324:	aa 0b       	sbc	r26, r26
    2326:	bb 0b       	sbc	r27, r27
    2328:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <g_seconds_since_sync>
    232c:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <g_seconds_since_sync+0x1>
    2330:	a0 93 7d 05 	sts	0x057D, r26	; 0x80057d <g_seconds_since_sync+0x2>
    2334:	b0 93 7e 05 	sts	0x057E, r27	; 0x80057e <g_seconds_since_sync+0x3>
		g_fox_seconds_into_interval = 0;
    2338:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_seconds_into_interval+0x1>
    233c:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_fox_seconds_into_interval>
		g_use_rtc_for_startstop = FALSE;
    2340:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    2344:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_transmissions_disabled>
    2348:	83 c0       	rjmp	.+262    	; 0x2450 <_Z11setupForFoxP5Fox_t13EventAction_t+0x310>
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    234a:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
    234e:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    2352:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2356:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    235a:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    235e:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2362:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2366:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    236a:	48 17       	cp	r20, r24
    236c:	59 07       	cpc	r21, r25
    236e:	6a 07       	cpc	r22, r26
    2370:	7b 07       	cpc	r23, r27
    2372:	08 f0       	brcs	.+2      	; 0x2376 <_Z11setupForFoxP5Fox_t13EventAction_t+0x236>
    2374:	56 c0       	rjmp	.+172    	; 0x2422 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2e2>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    2376:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    237a:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    237e:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2382:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2386:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
    238a:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    238e:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2392:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2396:	84 1b       	sub	r24, r20
    2398:	95 0b       	sbc	r25, r21
    239a:	a6 0b       	sbc	r26, r22
    239c:	b7 0b       	sbc	r27, r23
    239e:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <g_seconds_since_sync>
    23a2:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <g_seconds_since_sync+0x1>
    23a6:	a0 93 7d 05 	sts	0x057D, r26	; 0x80057d <g_seconds_since_sync+0x2>
    23aa:	b0 93 7e 05 	sts	0x057E, r27	; 0x80057e <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval = g_seconds_since_sync % g_cycle_period_seconds;
    23ae:	60 91 7b 05 	lds	r22, 0x057B	; 0x80057b <g_seconds_since_sync>
    23b2:	70 91 7c 05 	lds	r23, 0x057C	; 0x80057c <g_seconds_since_sync+0x1>
    23b6:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_seconds_since_sync+0x2>
    23ba:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <g_seconds_since_sync+0x3>
    23be:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <g_cycle_period_seconds>
    23c2:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <g_cycle_period_seconds+0x1>
    23c6:	03 2e       	mov	r0, r19
    23c8:	00 0c       	add	r0, r0
    23ca:	44 0b       	sbc	r20, r20
    23cc:	55 0b       	sbc	r21, r21
    23ce:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__divmodsi4>
    23d2:	70 93 3d 05 	sts	0x053D, r23	; 0x80053d <g_fox_seconds_into_interval+0x1>
    23d6:	60 93 3c 05 	sts	0x053C, r22	; 0x80053c <g_fox_seconds_into_interval>
			g_fox_counter = CLAMP(1, 1 + (g_fox_seconds_into_interval / g_on_air_interval), g_number_of_foxes);
    23da:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_fox_seconds_into_interval>
    23de:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <g_fox_seconds_into_interval+0x1>
    23e2:	60 91 40 05 	lds	r22, 0x0540	; 0x800540 <g_on_air_interval>
    23e6:	70 91 41 05 	lds	r23, 0x0541	; 0x800541 <g_on_air_interval+0x1>
    23ea:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    23ee:	6f 5f       	subi	r22, 0xFF	; 255
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_number_of_foxes>
    23f6:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_number_of_foxes+0x1>
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	86 17       	cp	r24, r22
    2404:	97 07       	cpc	r25, r23
    2406:	34 f0       	brlt	.+12     	; 0x2414 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d4>
    2408:	16 16       	cp	r1, r22
    240a:	17 06       	cpc	r1, r23
    240c:	2c f0       	brlt	.+10     	; 0x2418 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d8>
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d8>
    2414:	69 81       	ldd	r22, Y+1	; 0x01
    2416:	7a 81       	ldd	r23, Y+2	; 0x02
    2418:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <g_fox_counter+0x1>
    241c:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <g_fox_counter>
    2420:	12 c0       	rjmp	.+36     	; 0x2446 <_Z11setupForFoxP5Fox_t13EventAction_t+0x306>
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    2422:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <g_seconds_since_sync>
    2426:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <g_seconds_since_sync+0x1>
    242a:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <g_seconds_since_sync+0x2>
    242e:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_counter+0x1>
    243a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_counter>
			g_fox_seconds_into_interval = 0;
    243e:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_fox_seconds_into_interval+0x1>
    2442:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_fox_seconds_into_interval>
		}


		g_use_rtc_for_startstop = TRUE;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    244c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_transmissions_disabled>
	}

	g_fox_tone_offset = g_fox_counter;
    2450:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_fox_counter>
    2454:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <g_fox_counter+0x1>
    2458:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_tone_offset+0x1>
    245c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_tone_offset>

	sendMorseTone(OFF);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_Z13sendMorseToneh>
	g_time_to_ID = FALSE;
    2466:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <g_time_to_ID>
	g_callsign_sent = TRUE;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_callsign_sent>
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    2470:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_code_throttle+0x1>
    2474:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <g_code_throttle>
	g_fox_transition = FALSE;
    2478:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_fox_transition>

	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    247c:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2480:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <g_config_error>
	digitalWrite(PIN_LED2, OFF);            /*  LED Off - in case it was left on */
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	8d e0       	ldi	r24, 0x0D	; 13
    2488:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	8a e0       	ldi	r24, 0x0A	; 10
    2490:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    2494:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    2498:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    249c:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <g_config_error>

	sei();
    24a0:	78 94       	sei
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	08 95       	ret

000024ac <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	9f ef       	ldi	r25, 0xFF	; 255

	while((ADCSRA & (1 << ADSC)) && c)
    24b0:	ea e7       	ldi	r30, 0x7A	; 122
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	20 81       	ld	r18, Z
    24b6:	26 ff       	sbrs	r18, 6
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <_Z7readADCv+0x16>
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	11 f0       	breq	.+4      	; 0x24c2 <_Z7readADCv+0x16>
	{
		c--;    /* Just wait for ADC to finish. */
    24be:	01 97       	sbiw	r24, 0x01	; 1
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;

	while((ADCSRA & (1 << ADSC)) && c)
    24c0:	f9 cf       	rjmp	.-14     	; 0x24b4 <_Z7readADCv+0x8>
	{
		c--;    /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    24c2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    24c6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    24ca:	ea e7       	ldi	r30, 0x7A	; 122
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	90 81       	ld	r25, Z
    24d0:	90 64       	ori	r25, 0x40	; 64
    24d2:	90 83       	st	Z, r25
	return( result);
}
    24d4:	c9 01       	movw	r24, r18
    24d6:	08 95       	ret

000024d8 <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    24e0:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_atmega_temp_calibration>
    24e4:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <g_atmega_temp_calibration+0x1>
    24e8:	07 2e       	mov	r0, r23
    24ea:	00 0c       	add	r0, r0
    24ec:	88 0b       	sbc	r24, r24
    24ee:	99 0b       	sbc	r25, r25
    24f0:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__floatsisf>
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__divsf3>
    2500:	06 2f       	mov	r16, r22
    2502:	17 2f       	mov	r17, r23
    2504:	d8 2f       	mov	r29, r24
    2506:	c9 2f       	mov	r28, r25
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	48 e4       	ldi	r20, 0x48	; 72
    250e:	53 e4       	ldi	r21, 0x43	; 67
    2510:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__gesf2>
    2514:	18 16       	cp	r1, r24
    2516:	6c f0       	brlt	.+26     	; 0x2532 <_Z7getTempv+0x5a>
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	48 e4       	ldi	r20, 0x48	; 72
    251e:	53 ec       	ldi	r21, 0xC3	; 195
    2520:	60 2f       	mov	r22, r16
    2522:	71 2f       	mov	r23, r17
    2524:	8d 2f       	mov	r24, r29
    2526:	9c 2f       	mov	r25, r28
    2528:	0e 94 42 2a 	call	0x5484	; 0x5484 <__cmpsf2>
    252c:	88 23       	and	r24, r24
    252e:	34 f0       	brlt	.+12     	; 0x253c <_Z7getTempv+0x64>
    2530:	09 c0       	rjmp	.+18     	; 0x2544 <_Z7getTempv+0x6c>
    2532:	00 e0       	ldi	r16, 0x00	; 0
    2534:	10 e0       	ldi	r17, 0x00	; 0
    2536:	d8 e4       	ldi	r29, 0x48	; 72
    2538:	c3 e4       	ldi	r28, 0x43	; 67
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <_Z7getTempv+0x6c>
    253c:	00 e0       	ldi	r16, 0x00	; 0
    253e:	10 e0       	ldi	r17, 0x00	; 0
    2540:	d8 e4       	ldi	r29, 0x48	; 72
    2542:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    2544:	0e 94 56 12 	call	0x24ac	; 0x24ac <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    2548:	0e 94 56 12 	call	0x24ac	; 0x24ac <_Z7readADCv>
    254c:	bc 01       	movw	r22, r24
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <__floatunsisf>
    2556:	2e ea       	ldi	r18, 0xAE	; 174
    2558:	37 e2       	ldi	r19, 0x27	; 39
    255a:	42 ea       	ldi	r20, 0xA2	; 162
    255c:	53 e4       	ldi	r21, 0x43	; 67
    255e:	0e 94 d5 29 	call	0x53aa	; 0x53aa <__subsf3>
    2562:	26 ef       	ldi	r18, 0xF6	; 246
    2564:	38 e2       	ldi	r19, 0x28	; 40
    2566:	4c e9       	ldi	r20, 0x9C	; 156
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__divsf3>
    256e:	20 2f       	mov	r18, r16
    2570:	31 2f       	mov	r19, r17
    2572:	4d 2f       	mov	r20, r29
    2574:	5c 2f       	mov	r21, r28
    2576:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__addsf3>
    257a:	0e 94 57 2c 	call	0x58ae	; 0x58ae <round>
}
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	08 95       	ret

00002588 <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    2588:	0e 94 56 12 	call	0x24ac	; 0x24ac <_Z7readADCv>
	uint16_t hold = readADC();
    258c:	0e 94 56 12 	call	0x24ac	; 0x24ac <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    2590:	9c 01       	movw	r18, r24
    2592:	ad ee       	ldi	r26, 0xED	; 237
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	68 94       	set
    25a0:	16 f8       	bld	r1, 6
    25a2:	b6 95       	lsr	r27
    25a4:	a7 95       	ror	r26
    25a6:	97 95       	ror	r25
    25a8:	87 95       	ror	r24
    25aa:	16 94       	lsr	r1
    25ac:	d1 f7       	brne	.-12     	; 0x25a2 <_Z10getVoltagev+0x1a>
	return(hold);
}
    25ae:	08 95       	ret

000025b0 <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    25b0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    25b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    25b8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    25bc:	81 11       	cpse	r24, r1
    25be:	22 c0       	rjmp	.+68     	; 0x2604 <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    25c0:	ec e7       	ldi	r30, 0x7C	; 124
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	86 60       	ori	r24, 0x06	; 6
    25c8:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    25ca:	80 81       	ld	r24, Z
    25cc:	80 6c       	ori	r24, 0xC0	; 192
    25ce:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    25d0:	80 81       	ld	r24, Z
    25d2:	80 62       	ori	r24, 0x20	; 32
    25d4:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
			ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
			ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    25d6:	ea e7       	ldi	r30, 0x7A	; 122
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	86 60       	ori	r24, 0x06	; 6
    25de:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    25e0:	80 81       	ld	r24, Z
    25e2:	80 62       	ori	r24, 0x20	; 32
    25e4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    25e6:	80 81       	ld	r24, Z
    25e8:	88 60       	ori	r24, 0x08	; 8
    25ea:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    25ec:	80 81       	ld	r24, Z
    25ee:	80 68       	ori	r24, 0x80	; 128
    25f0:	80 83       	st	Z, r24

		if(enableSampling)
    25f2:	66 23       	and	r22, r22
    25f4:	21 f1       	breq	.+72     	; 0x263e <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    25f6:	80 81       	ld	r24, Z
    25f8:	88 60       	ori	r24, 0x08	; 8
    25fa:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    25fc:	80 81       	ld	r24, Z
    25fe:	80 64       	ori	r24, 0x40	; 64
    2600:	80 83       	st	Z, r24
    2602:	08 95       	ret
		/* The internal temperature has to be used
		 * with the internal reference of 1.1V.
		 * Channel 8 can not be selected with
		 * the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    2604:	ec e7       	ldi	r30, 0x7C	; 124
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	90 81       	ld	r25, Z
    260a:	90 6c       	ori	r25, 0xC0	; 192
    260c:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	21 f4       	brne	.+8      	; 0x261a <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    2612:	80 81       	ld	r24, Z
    2614:	88 60       	ori	r24, 0x08	; 8
    2616:	80 83       	st	Z, r24
    2618:	05 c0       	rjmp	.+10     	; 0x2624 <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    261a:	ec e7       	ldi	r30, 0x7C	; 124
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	87 60       	ori	r24, 0x07	; 7
    2622:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 * by dividing by 128. Assumes that the
		 * standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    2624:	ea e7       	ldi	r30, 0x7A	; 122
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	87 60       	ori	r24, 0x07	; 7
    262c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    262e:	80 81       	ld	r24, Z
    2630:	80 68       	ori	r24, 0x80	; 128
    2632:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    2634:	80 81       	ld	r24, Z
    2636:	80 64       	ori	r24, 0x40	; 64
    2638:	80 83       	st	Z, r24
		readADC();
    263a:	0e 94 56 12 	call	0x24ac	; 0x24ac <_Z7readADCv>
    263e:	08 95       	ret

00002640 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2640:	fc 01       	movw	r30, r24
	while(*s)
    2642:	21 91       	ld	r18, Z+
    2644:	22 23       	and	r18, r18
    2646:	41 f0       	breq	.+16     	; 0x2658 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	20 53       	subi	r18, 0x30	; 48
    264c:	31 09       	sbc	r19, r1
    264e:	2a 30       	cpi	r18, 0x0A	; 10
    2650:	31 05       	cpc	r19, r1
    2652:	b8 f3       	brcs	.-18     	; 0x2642 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	08 95       	ret
		}
	}

	return( TRUE);
    2658:	81 e0       	ldi	r24, 0x01	; 1
}
    265a:	08 95       	ret

0000265c <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    265c:	cf 93       	push	r28
    265e:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2660:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z23clockConfigurationCheckv>

	cli();
    2664:	f8 94       	cli
	if(activationSource == POWER_UP)
    2666:	c1 11       	cpse	r28, r1
    2668:	0e c0       	rjmp	.+28     	; 0x2686 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	31 f4       	brne	.+12     	; 0x267a <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2678:	3e c0       	rjmp	.+124    	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    267a:	62 e0       	ldi	r22, 0x02	; 2
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2684:	38 c0       	rjmp	.+112    	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    2686:	c2 30       	cpi	r28, 0x02	; 2
    2688:	c9 f4       	brne	.+50     	; 0x26bc <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	31 f4       	brne	.+12     	; 0x269a <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2698:	2e c0       	rjmp	.+92     	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	19 f0       	breq	.+6      	; 0x26a4 <_Z13startEventNow19EventActionSource_t+0x48>
    269e:	83 50       	subi	r24, 0x03	; 3
    26a0:	82 30       	cpi	r24, 0x02	; 2
    26a2:	30 f4       	brcc	.+12     	; 0x26b0 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    26ae:	23 c0       	rjmp	.+70     	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    26b0:	62 e0       	ldi	r22, 0x02	; 2
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    26ba:	1d c0       	rjmp	.+58     	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	31 f4       	brne	.+12     	; 0x26cc <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    26ca:	15 c0       	rjmp	.+42     	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	31 f4       	brne	.+12     	; 0x26dc <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    26da:	0d c0       	rjmp	.+26     	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	31 f4       	brne	.+12     	; 0x26ec <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    26ec:	62 e0       	ldi	r22, 0x02	; 2
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    26f6:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <g_LED_enunciating>
	sei();
    26fa:	78 94       	sei

/*	g_current_epoch = rv3028_get_epoch();
 *	lb_send_string((char*)"Sync OK\n", FALSE); */
}
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    2700:	cf 93       	push	r28
    2702:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2704:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z23clockConfigurationCheckv>

	cli();
    2708:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    270a:	c2 30       	cpi	r28, 0x02	; 2
    270c:	31 f4       	brne	.+12     	; 0x271a <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    270e:	63 e0       	ldi	r22, 0x03	; 3
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2718:	15 c0       	rjmp	.+42     	; 0x2744 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	31 f4       	brne	.+12     	; 0x272a <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2728:	08 c0       	rjmp	.+16     	; 0x273a <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	31 f4       	brne	.+12     	; 0x273a <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    272e:	63 e0       	ldi	r22, 0x03	; 3
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    273a:	63 e0       	ldi	r22, 0x03	; 3
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    2744:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <g_sync_pin_stable>
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	21 f4       	brne	.+8      	; 0x2754 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	8d e0       	ldi	r24, 0x0D	; 13
    2750:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
	}
}
    2754:	cf 91       	pop	r28
    2756:	08 95       	ret

00002758 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2758:	1f 92       	push	r1
    275a:	0f 92       	push	r0
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	0f 92       	push	r0
    2760:	11 24       	eor	r1, r1
    2762:	2f 93       	push	r18
    2764:	3f 93       	push	r19
    2766:	4f 93       	push	r20
    2768:	5f 93       	push	r21
    276a:	6f 93       	push	r22
    276c:	7f 93       	push	r23
    276e:	8f 93       	push	r24
    2770:	9f 93       	push	r25
    2772:	af 93       	push	r26
    2774:	bf 93       	push	r27
    2776:	ef 93       	push	r30
    2778:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    277a:	84 e0       	ldi	r24, 0x04	; 4
    277c:	0e 94 31 02 	call	0x462	; 0x462 <_Z11digitalReadh>

	g_sync_pin_timer = 0;
    2780:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <g_sync_pin_timer+0x1>
    2784:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <g_sync_pin_timer>

	if(pinVal)  /* Sync is high = button released */
    2788:	88 23       	and	r24, r24
    278a:	d9 f0       	breq	.+54     	; 0x27c2 <__vector_5+0x6a>
	{
		if(g_transmissions_disabled)
    278c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    2790:	88 23       	and	r24, r24
    2792:	71 f0       	breq	.+28     	; 0x27b0 <__vector_5+0x58>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2794:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <g_sync_pin_stable>
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	99 f4       	brne	.+38     	; 0x27c2 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    279c:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	8d e0       	ldi	r24, 0x0D	; 13
    27a4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
				startEventNow(PUSHBUTTON);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0e 94 2e 13 	call	0x265c	; 0x265c <_Z13startEventNow19EventActionSource_t>
    27ae:	09 c0       	rjmp	.+18     	; 0x27c2 <__vector_5+0x6a>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    27b0:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <g_sync_pin_stable>
    27b4:	82 30       	cpi	r24, 0x02	; 2
    27b6:	29 f4       	brne	.+10     	; 0x27c2 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    27b8:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <g_sync_pin_stable>
				stopEventNow(PUSHBUTTON);
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	0e 94 80 13 	call	0x2700	; 0x2700 <_Z12stopEventNow19EventActionSource_t>
			}
		}
	}
}
    27c2:	ff 91       	pop	r31
    27c4:	ef 91       	pop	r30
    27c6:	bf 91       	pop	r27
    27c8:	af 91       	pop	r26
    27ca:	9f 91       	pop	r25
    27cc:	8f 91       	pop	r24
    27ce:	7f 91       	pop	r23
    27d0:	6f 91       	pop	r22
    27d2:	5f 91       	pop	r21
    27d4:	4f 91       	pop	r20
    27d6:	3f 91       	pop	r19
    27d8:	2f 91       	pop	r18
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

000027e4 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    27e4:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <g_messages_text+0x15>
    27e8:	81 11       	cpse	r24, r1
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    27ec:	65 e0       	ldi	r22, 0x05	; 5
    27ee:	8f e7       	ldi	r24, 0x7F	; 127
    27f0:	95 e0       	ldi	r25, 0x05	; 5
    27f2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    27f6:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    27fa:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    27fe:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2802:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2806:	81 15       	cp	r24, r1
    2808:	96 46       	sbci	r25, 0x66	; 102
    280a:	ae 4e       	sbci	r26, 0xEE	; 238
    280c:	bf 45       	sbci	r27, 0x5F	; 95
    280e:	28 f4       	brcc	.+10     	; 0x281a <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	8f e7       	ldi	r24, 0x7F	; 127
    2814:	95 e0       	ldi	r25, 0x05	; 5
    2816:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    281a:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <g_event_finish_epoch>
    281e:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    2822:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    2826:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    282a:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    282e:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2832:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2836:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    283a:	48 17       	cp	r20, r24
    283c:	59 07       	cpc	r21, r25
    283e:	6a 07       	cpc	r22, r26
    2840:	7b 07       	cpc	r23, r27
    2842:	00 f5       	brcc	.+64     	; 0x2884 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2844:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
    2848:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    284c:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2850:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2854:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    2858:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    285c:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2860:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2864:	48 17       	cp	r20, r24
    2866:	59 07       	cpc	r21, r25
    2868:	6a 07       	cpc	r22, r26
    286a:	7b 07       	cpc	r23, r27
    286c:	28 f4       	brcc	.+10     	; 0x2878 <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    286e:	63 e0       	ldi	r22, 0x03	; 3
    2870:	8f e7       	ldi	r24, 0x7F	; 127
    2872:	95 e0       	ldi	r25, 0x05	; 5
    2874:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2878:	64 e0       	ldi	r22, 0x04	; 4
    287a:	8f e7       	ldi	r24, 0x7F	; 127
    287c:	95 e0       	ldi	r25, 0x05	; 5
    287e:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2882:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    2884:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
    2888:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    288c:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2890:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2894:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    2898:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    289c:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    28a0:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    28a4:	48 17       	cp	r20, r24
    28a6:	59 07       	cpc	r21, r25
    28a8:	6a 07       	cpc	r22, r26
    28aa:	7b 07       	cpc	r23, r27
    28ac:	28 f4       	brcc	.+10     	; 0x28b8 <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	88 e2       	ldi	r24, 0x28	; 40
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    28b8:	08 95       	ret

000028ba <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    28ba:	2f 92       	push	r2
    28bc:	3f 92       	push	r3
    28be:	4f 92       	push	r4
    28c0:	5f 92       	push	r5
    28c2:	6f 92       	push	r6
    28c4:	7f 92       	push	r7
    28c6:	8f 92       	push	r8
    28c8:	9f 92       	push	r9
    28ca:	af 92       	push	r10
    28cc:	bf 92       	push	r11
    28ce:	cf 92       	push	r12
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	2c 97       	sbiw	r28, 0x0c	; 12
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	2b 01       	movw	r4, r22
    28f0:	3c 01       	movw	r6, r24
    28f2:	49 01       	movw	r8, r18
    28f4:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    28f6:	62 17       	cp	r22, r18
    28f8:	73 07       	cpc	r23, r19
    28fa:	84 07       	cpc	r24, r20
    28fc:	95 07       	cpc	r25, r21
    28fe:	50 f0       	brcs	.+20     	; 0x2914 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2900:	e1 14       	cp	r14, r1
    2902:	f1 04       	cpc	r15, r1
    2904:	09 f4       	brne	.+2      	; 0x2908 <_Z14reportTimeTillmmPKcS0_+0x4e>
    2906:	04 c1       	rjmp	.+520    	; 0x2b10 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    2908:	61 e0       	ldi	r22, 0x01	; 1
    290a:	c7 01       	movw	r24, r14
    290c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	ff c0       	rjmp	.+510    	; 0x2b12 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    2914:	01 15       	cp	r16, r1
    2916:	11 05       	cpc	r17, r1
    2918:	21 f0       	breq	.+8      	; 0x2922 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	c8 01       	movw	r24, r16
    291e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2922:	75 01       	movw	r14, r10
    2924:	64 01       	movw	r12, r8
    2926:	c4 18       	sub	r12, r4
    2928:	d5 08       	sbc	r13, r5
    292a:	e6 08       	sbc	r14, r6
    292c:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    292e:	c7 01       	movw	r24, r14
    2930:	b6 01       	movw	r22, r12
    2932:	20 e8       	ldi	r18, 0x80	; 128
    2934:	33 e3       	ldi	r19, 0x33	; 51
    2936:	41 ee       	ldi	r20, 0xE1	; 225
    2938:	51 e0       	ldi	r21, 0x01	; 1
    293a:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__udivmodsi4>
    293e:	29 01       	movw	r4, r18
    2940:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2942:	44 27       	eor	r20, r20
    2944:	55 27       	eor	r21, r21
    2946:	60 e8       	ldi	r22, 0x80	; 128
    2948:	73 e3       	ldi	r23, 0x33	; 51
    294a:	81 ee       	ldi	r24, 0xE1	; 225
    294c:	91 e0       	ldi	r25, 0x01	; 1
    294e:	0e 94 df 2c 	call	0x59be	; 0x59be <__mulsi3>
    2952:	c6 1a       	sub	r12, r22
    2954:	d7 0a       	sbc	r13, r23
    2956:	e8 0a       	sbc	r14, r24
    2958:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    295a:	c7 01       	movw	r24, r14
    295c:	b6 01       	movw	r22, r12
    295e:	20 e8       	ldi	r18, 0x80	; 128
    2960:	31 e5       	ldi	r19, 0x51	; 81
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__udivmodsi4>
    296a:	49 01       	movw	r8, r18
    296c:	5a 01       	movw	r10, r20
    296e:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2970:	44 27       	eor	r20, r20
    2972:	55 27       	eor	r21, r21
    2974:	60 e8       	ldi	r22, 0x80	; 128
    2976:	71 e5       	ldi	r23, 0x51	; 81
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 df 2c 	call	0x59be	; 0x59be <__mulsi3>
    2980:	c6 1a       	sub	r12, r22
    2982:	d7 0a       	sbc	r13, r23
    2984:	e8 0a       	sbc	r14, r24
    2986:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2988:	c7 01       	movw	r24, r14
    298a:	b6 01       	movw	r22, r12
    298c:	20 e1       	ldi	r18, 0x10	; 16
    298e:	3e e0       	ldi	r19, 0x0E	; 14
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__udivmodsi4>
    2998:	29 83       	std	Y+1, r18	; 0x01
    299a:	3a 83       	std	Y+2, r19	; 0x02
    299c:	4b 83       	std	Y+3, r20	; 0x03
    299e:	5c 83       	std	Y+4, r21	; 0x04
    29a0:	29 81       	ldd	r18, Y+1	; 0x01
    29a2:	3a 81       	ldd	r19, Y+2	; 0x02
    29a4:	3a 87       	std	Y+10, r19	; 0x0a
    29a6:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    29a8:	29 81       	ldd	r18, Y+1	; 0x01
    29aa:	3a 81       	ldd	r19, Y+2	; 0x02
    29ac:	4b 81       	ldd	r20, Y+3	; 0x03
    29ae:	5c 81       	ldd	r21, Y+4	; 0x04
    29b0:	44 27       	eor	r20, r20
    29b2:	55 27       	eor	r21, r21
    29b4:	a0 e1       	ldi	r26, 0x10	; 16
    29b6:	be e0       	ldi	r27, 0x0E	; 14
    29b8:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <__muluhisi3>
    29bc:	c6 1a       	sub	r12, r22
    29be:	d7 0a       	sbc	r13, r23
    29c0:	e8 0a       	sbc	r14, r24
    29c2:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    29c4:	c7 01       	movw	r24, r14
    29c6:	b6 01       	movw	r22, r12
    29c8:	2c e3       	ldi	r18, 0x3C	; 60
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__udivmodsi4>
    29d4:	2d 83       	std	Y+5, r18	; 0x05
    29d6:	3e 83       	std	Y+6, r19	; 0x06
    29d8:	4f 83       	std	Y+7, r20	; 0x07
    29da:	58 87       	std	Y+8, r21	; 0x08
    29dc:	0d 81       	ldd	r16, Y+5	; 0x05
    29de:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    29e0:	2c e3       	ldi	r18, 0x3C	; 60
    29e2:	20 9f       	mul	r18, r16
    29e4:	c0 01       	movw	r24, r0
    29e6:	21 9f       	mul	r18, r17
    29e8:	90 0d       	add	r25, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	a6 01       	movw	r20, r12
    29ee:	48 1b       	sub	r20, r24
    29f0:	59 0b       	sbc	r21, r25
    29f2:	5c 87       	std	Y+12, r21	; 0x0c
    29f4:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    29f6:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_tempStr>

		if(years)
    29fa:	41 14       	cp	r4, r1
    29fc:	51 04       	cpc	r5, r1
    29fe:	b9 f0       	breq	.+46     	; 0x2a2e <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    2a00:	5f 92       	push	r5
    2a02:	4f 92       	push	r4
    2a04:	8a e3       	ldi	r24, 0x3A	; 58
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	9f 93       	push	r25
    2a0a:	8f 93       	push	r24
    2a0c:	8d eb       	ldi	r24, 0xBD	; 189
    2a0e:	94 e0       	ldi	r25, 0x04	; 4
    2a10:	9f 93       	push	r25
    2a12:	8f 93       	push	r24
    2a14:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	8d eb       	ldi	r24, 0xBD	; 189
    2a1c:	94 e0       	ldi	r25, 0x04	; 4
    2a1e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
		}

		if(days)
    2a2e:	23 28       	or	r2, r3
    2a30:	b9 f0       	breq	.+46     	; 0x2a60 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    2a32:	9f 92       	push	r9
    2a34:	8f 92       	push	r8
    2a36:	82 e4       	ldi	r24, 0x42	; 66
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	9f 93       	push	r25
    2a3c:	8f 93       	push	r24
    2a3e:	8d eb       	ldi	r24, 0xBD	; 189
    2a40:	94 e0       	ldi	r25, 0x04	; 4
    2a42:	9f 93       	push	r25
    2a44:	8f 93       	push	r24
    2a46:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	8d eb       	ldi	r24, 0xBD	; 189
    2a4e:	94 e0       	ldi	r25, 0x04	; 4
    2a50:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
		}

		if(hours)
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	89 2b       	or	r24, r25
    2a66:	c9 f0       	breq	.+50     	; 0x2a9a <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	9f 93       	push	r25
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	ef 93       	push	r30
    2a70:	8b e4       	ldi	r24, 0x4B	; 75
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	9f 93       	push	r25
    2a76:	8f 93       	push	r24
    2a78:	8d eb       	ldi	r24, 0xBD	; 189
    2a7a:	94 e0       	ldi	r25, 0x04	; 4
    2a7c:	9f 93       	push	r25
    2a7e:	8f 93       	push	r24
    2a80:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	8d eb       	ldi	r24, 0xBD	; 189
    2a88:	94 e0       	ldi	r25, 0x04	; 4
    2a8a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
		}

		if(minutes)
    2a9a:	01 2b       	or	r16, r17
    2a9c:	c9 f0       	breq	.+50     	; 0x2ad0 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    2a9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2aa0:	ff 93       	push	r31
    2aa2:	2d 81       	ldd	r18, Y+5	; 0x05
    2aa4:	2f 93       	push	r18
    2aa6:	83 e5       	ldi	r24, 0x53	; 83
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	9f 93       	push	r25
    2aac:	8f 93       	push	r24
    2aae:	8d eb       	ldi	r24, 0xBD	; 189
    2ab0:	94 e0       	ldi	r25, 0x04	; 4
    2ab2:	9f 93       	push	r25
    2ab4:	8f 93       	push	r24
    2ab6:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2aba:	61 e0       	ldi	r22, 0x01	; 1
    2abc:	8d eb       	ldi	r24, 0xBD	; 189
    2abe:	94 e0       	ldi	r25, 0x04	; 4
    2ac0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    2ad0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ad2:	3f 93       	push	r19
    2ad4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ad6:	4f 93       	push	r20
    2ad8:	8b e5       	ldi	r24, 0x5B	; 91
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	9f 93       	push	r25
    2ade:	8f 93       	push	r24
    2ae0:	8d eb       	ldi	r24, 0xBD	; 189
    2ae2:	94 e0       	ldi	r25, 0x04	; 4
    2ae4:	9f 93       	push	r25
    2ae6:	8f 93       	push	r24
    2ae8:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
		lb_send_string(g_tempStr, TRUE);
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	8d eb       	ldi	r24, 0xBD	; 189
    2af0:	94 e0       	ldi	r25, 0x04	; 4
    2af2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2af6:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2afa:	ed eb       	ldi	r30, 0xBD	; 189
    2afc:	f4 e0       	ldi	r31, 0x04	; 4
    2afe:	10 82       	st	Z, r1
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	01 c0       	rjmp	.+2      	; 0x2b12 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2b12:	2c 96       	adiw	r28, 0x0c	; 12
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	ef 90       	pop	r14
    2b2a:	df 90       	pop	r13
    2b2c:	cf 90       	pop	r12
    2b2e:	bf 90       	pop	r11
    2b30:	af 90       	pop	r10
    2b32:	9f 90       	pop	r9
    2b34:	8f 90       	pop	r8
    2b36:	7f 90       	pop	r7
    2b38:	6f 90       	pop	r6
    2b3a:	5f 90       	pop	r5
    2b3c:	4f 90       	pop	r4
    2b3e:	3f 90       	pop	r3
    2b40:	2f 90       	pop	r2
    2b42:	08 95       	ret

00002b44 <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
	setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    2b4c:	62 e0       	ldi	r22, 0x02	; 2
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
	g_current_epoch = rv3028_get_epoch();
    2b56:	0e 94 0b 28 	call	0x5016	; 0x5016 <_Z16rv3028_get_epochv>
    2b5a:	60 93 6e 05 	sts	0x056E, r22	; 0x80056e <g_current_epoch>
    2b5e:	70 93 6f 05 	sts	0x056F, r23	; 0x80056f <g_current_epoch+0x1>
    2b62:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <g_current_epoch+0x2>
    2b66:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    2b6a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <_Z18startEventUsingRTCv+0x30>
    2b72:	5a c0       	rjmp	.+180    	; 0x2c28 <_Z18startEventUsingRTCv+0xe4>
	{
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    2b74:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <g_event_start_epoch>
    2b78:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    2b7c:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2b80:	50 91 6d 05 	lds	r21, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2b84:	60 91 6e 05 	lds	r22, 0x056E	; 0x80056e <g_current_epoch>
    2b88:	70 91 6f 05 	lds	r23, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2b8c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2b90:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2b94:	0f 2e       	mov	r0, r31
    2b96:	f2 e6       	ldi	r31, 0x62	; 98
    2b98:	ef 2e       	mov	r14, r31
    2b9a:	f1 e0       	ldi	r31, 0x01	; 1
    2b9c:	ff 2e       	mov	r15, r31
    2b9e:	f0 2d       	mov	r31, r0
    2ba0:	0f e6       	ldi	r16, 0x6F	; 111
    2ba2:	11 e0       	ldi	r17, 0x01	; 1
    2ba4:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    2ba8:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <g_event_finish_epoch>
    2bac:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    2bb0:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    2bb4:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    2bb8:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_event_start_epoch>
    2bbc:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    2bc0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2bc4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2bc8:	e1 2c       	mov	r14, r1
    2bca:	f1 2c       	mov	r15, r1
    2bcc:	0b e7       	ldi	r16, 0x7B	; 123
    2bce:	11 e0       	ldi	r17, 0x01	; 1
    2bd0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    2bd4:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
    2bd8:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    2bdc:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2be0:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2be4:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    2be8:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2bec:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2bf0:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2bf4:	48 17       	cp	r20, r24
    2bf6:	59 07       	cpc	r21, r25
    2bf8:	6a 07       	cpc	r22, r26
    2bfa:	7b 07       	cpc	r23, r27
    2bfc:	b8 f4       	brcc	.+46     	; 0x2c2c <_Z18startEventUsingRTCv+0xe8>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    2bfe:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <g_event_finish_epoch>
    2c02:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    2c06:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    2c0a:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    2c0e:	60 91 6e 05 	lds	r22, 0x056E	; 0x80056e <g_current_epoch>
    2c12:	70 91 6f 05 	lds	r23, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2c16:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2c1a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2c1e:	03 e8       	ldi	r16, 0x83	; 131
    2c20:	11 e0       	ldi	r17, 0x01	; 1
    2c22:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <_Z18startEventUsingRTCv+0xe8>
		}
	}
	else
	{
		reportConfigErrors();
    2c28:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <_Z18reportConfigErrorsv>
	}
}
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	08 95       	ret

00002c36 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
    2c36:	4f 92       	push	r4
    2c38:	5f 92       	push	r5
    2c3a:	6f 92       	push	r6
    2c3c:	7f 92       	push	r7
    2c3e:	8f 92       	push	r8
    2c40:	9f 92       	push	r9
    2c42:	af 92       	push	r10
    2c44:	bf 92       	push	r11
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	2c 97       	sbiw	r28, 0x0c	; 12
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	8c 01       	movw	r16, r24
    2c64:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    2c66:	fc 01       	movw	r30, r24
    2c68:	01 90       	ld	r0, Z+
    2c6a:	00 20       	and	r0, r0
    2c6c:	e9 f7       	brne	.-6      	; 0x2c68 <_Z18validateTimeStringPcPma+0x32>
    2c6e:	31 97       	sbiw	r30, 0x01	; 1
    2c70:	e8 1b       	sub	r30, r24
    2c72:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    2c74:	25 e0       	ldi	r18, 0x05	; 5
    2c76:	6a 36       	cpi	r22, 0x6A	; 106
    2c78:	72 07       	cpc	r23, r18
    2c7a:	49 f5       	brne	.+82     	; 0x2cce <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    2c7c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    2c80:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2c84:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2c88:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2c8c:	89 87       	std	Y+9, r24	; 0x09
    2c8e:	9a 87       	std	Y+10, r25	; 0x0a
    2c90:	ab 87       	std	Y+11, r26	; 0x0b
    2c92:	bc 87       	std	Y+12, r27	; 0x0c
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	96 e6       	ldi	r25, 0x66	; 102
    2c98:	ae ee       	ldi	r26, 0xEE	; 238
    2c9a:	bf e5       	ldi	r27, 0x5F	; 95
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	ab 83       	std	Y+3, r26	; 0x03
    2ca2:	bc 83       	std	Y+4, r27	; 0x04
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	ab 85       	ldd	r26, Y+11	; 0x0b
    2caa:	bc 85       	ldd	r27, Y+12	; 0x0c
    2cac:	81 15       	cp	r24, r1
    2cae:	96 46       	sbci	r25, 0x66	; 102
    2cb0:	ae 4e       	sbci	r26, 0xEE	; 238
    2cb2:	bf 45       	sbci	r27, 0x5F	; 95
    2cb4:	28 f4       	brcc	.+10     	; 0x2cc0 <_Z18validateTimeStringPcPma+0x8a>
    2cb6:	89 80       	ldd	r8, Y+1	; 0x01
    2cb8:	9a 80       	ldd	r9, Y+2	; 0x02
    2cba:	ab 80       	ldd	r10, Y+3	; 0x03
    2cbc:	bc 80       	ldd	r11, Y+4	; 0x04
    2cbe:	04 c0       	rjmp	.+8      	; 0x2cc8 <_Z18validateTimeStringPcPma+0x92>
    2cc0:	89 84       	ldd	r8, Y+9	; 0x09
    2cc2:	9a 84       	ldd	r9, Y+10	; 0x0a
    2cc4:	ab 84       	ldd	r10, Y+11	; 0x0b
    2cc6:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    2cc8:	ff 24       	eor	r15, r15
    2cca:	f3 94       	inc	r15
    2ccc:	42 c0       	rjmp	.+132    	; 0x2d52 <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    2cce:	66 56       	subi	r22, 0x66	; 102
    2cd0:	75 40       	sbci	r23, 0x05	; 5
    2cd2:	a9 f5       	brne	.+106    	; 0x2d3e <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2cd4:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    2cd8:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    2cdc:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    2ce0:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	af 83       	std	Y+7, r26	; 0x07
    2cea:	b8 87       	std	Y+8, r27	; 0x08
    2cec:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    2cf0:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2cf4:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2cf8:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	ab 83       	std	Y+3, r26	; 0x03
    2d02:	bc 83       	std	Y+4, r27	; 0x04
    2d04:	4d 81       	ldd	r20, Y+5	; 0x05
    2d06:	5e 81       	ldd	r21, Y+6	; 0x06
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	ab 81       	ldd	r26, Y+3	; 0x03
    2d12:	bc 81       	ldd	r27, Y+4	; 0x04
    2d14:	48 17       	cp	r20, r24
    2d16:	59 07       	cpc	r21, r25
    2d18:	6a 07       	cpc	r22, r26
    2d1a:	7b 07       	cpc	r23, r27
    2d1c:	40 f4       	brcc	.+16     	; 0x2d2e <_Z18validateTimeStringPcPma+0xf8>
    2d1e:	89 80       	ldd	r8, Y+1	; 0x01
    2d20:	9a 80       	ldd	r9, Y+2	; 0x02
    2d22:	ab 80       	ldd	r10, Y+3	; 0x03
    2d24:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    2d26:	68 94       	set
    2d28:	ff 24       	eor	r15, r15
    2d2a:	f1 f8       	bld	r15, 1
    2d2c:	12 c0       	rjmp	.+36     	; 0x2d52 <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2d2e:	8d 80       	ldd	r8, Y+5	; 0x05
    2d30:	9e 80       	ldd	r9, Y+6	; 0x06
    2d32:	af 80       	ldd	r10, Y+7	; 0x07
    2d34:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    2d36:	68 94       	set
    2d38:	ff 24       	eor	r15, r15
    2d3a:	f1 f8       	bld	r15, 1
    2d3c:	0a c0       	rjmp	.+20     	; 0x2d52 <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    2d3e:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    2d40:	0f 2e       	mov	r0, r31
    2d42:	81 2c       	mov	r8, r1
    2d44:	f6 e6       	ldi	r31, 0x66	; 102
    2d46:	9f 2e       	mov	r9, r31
    2d48:	fe ee       	ldi	r31, 0xEE	; 238
    2d4a:	af 2e       	mov	r10, r31
    2d4c:	ff e5       	ldi	r31, 0x5F	; 95
    2d4e:	bf 2e       	mov	r11, r31
    2d50:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    2d52:	ec 30       	cpi	r30, 0x0C	; 12
    2d54:	f1 05       	cpc	r31, r1
    2d56:	09 f0       	breq	.+2      	; 0x2d5a <_Z18validateTimeStringPcPma+0x124>
    2d58:	5e c0       	rjmp	.+188    	; 0x2e16 <_Z18validateTimeStringPcPma+0x1e0>
    2d5a:	c8 01       	movw	r24, r16
    2d5c:	0e 94 20 13 	call	0x2640	; 0x2640 <_Z11only_digitsPc>
    2d60:	88 23       	and	r24, r24
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <_Z18validateTimeStringPcPma+0x130>
    2d64:	4f c0       	rjmp	.+158    	; 0x2e04 <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    2d66:	b8 01       	movw	r22, r16
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 3a 28 	call	0x5074	; 0x5074 <_Z16rv3028_get_epochPbPc>
    2d70:	2b 01       	movw	r4, r22
    2d72:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    2d74:	ae 2d       	mov	r26, r14
    2d76:	ee 0c       	add	r14, r14
    2d78:	bb 0b       	sbc	r27, r27
    2d7a:	20 e1       	ldi	r18, 0x10	; 16
    2d7c:	3e e0       	ldi	r19, 0x0E	; 14
    2d7e:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <__usmulhisi3>
    2d82:	64 0d       	add	r22, r4
    2d84:	75 1d       	adc	r23, r5
    2d86:	86 1d       	adc	r24, r6
    2d88:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    2d8a:	86 16       	cp	r8, r22
    2d8c:	97 06       	cpc	r9, r23
    2d8e:	a8 06       	cpc	r10, r24
    2d90:	b9 06       	cpc	r11, r25
    2d92:	08 f4       	brcc	.+2      	; 0x2d96 <_Z18validateTimeStringPcPma+0x160>
    2d94:	45 c0       	rjmp	.+138    	; 0x2e20 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	f2 12       	cpse	r15, r18
    2d9a:	09 c0       	rjmp	.+18     	; 0x2dae <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    2d9c:	68 e0       	ldi	r22, 0x08	; 8
    2d9e:	8f e7       	ldi	r24, 0x7F	; 127
    2da0:	95 e0       	ldi	r25, 0x05	; 5
    2da2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	cb 01       	movw	r24, r22
    2dac:	39 c0       	rjmp	.+114    	; 0x2e20 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    2dae:	22 e0       	ldi	r18, 0x02	; 2
    2db0:	f2 12       	cpse	r15, r18
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    2db4:	00 91 6e 05 	lds	r16, 0x056E	; 0x80056e <g_current_epoch>
    2db8:	10 91 6f 05 	lds	r17, 0x056F	; 0x80056f <g_current_epoch+0x1>
    2dbc:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <g_current_epoch+0x2>
    2dc0:	30 91 71 05 	lds	r19, 0x0571	; 0x800571 <g_current_epoch+0x3>
    2dc4:	60 17       	cp	r22, r16
    2dc6:	71 07       	cpc	r23, r17
    2dc8:	82 07       	cpc	r24, r18
    2dca:	93 07       	cpc	r25, r19
    2dcc:	48 f4       	brcc	.+18     	; 0x2de0 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    2dce:	67 e0       	ldi	r22, 0x07	; 7
    2dd0:	8f e7       	ldi	r24, 0x7F	; 127
    2dd2:	95 e0       	ldi	r25, 0x05	; 5
    2dd4:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	cb 01       	movw	r24, r22
    2dde:	20 c0       	rjmp	.+64     	; 0x2e20 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    2de0:	66 e0       	ldi	r22, 0x06	; 6
    2de2:	8f e7       	ldi	r24, 0x7F	; 127
    2de4:	95 e0       	ldi	r25, 0x05	; 5
    2de6:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	cb 01       	movw	r24, r22
    2df0:	17 c0       	rjmp	.+46     	; 0x2e20 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    2df2:	6a e0       	ldi	r22, 0x0A	; 10
    2df4:	8f e7       	ldi	r24, 0x7F	; 127
    2df6:	95 e0       	ldi	r25, 0x05	; 5
    2df8:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2dfc:	60 e0       	ldi	r22, 0x00	; 0
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	cb 01       	movw	r24, r22
    2e02:	0e c0       	rjmp	.+28     	; 0x2e20 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    2e04:	69 e0       	ldi	r22, 0x09	; 9
    2e06:	8f e7       	ldi	r24, 0x7F	; 127
    2e08:	95 e0       	ldi	r25, 0x05	; 5
    2e0a:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	cb 01       	movw	r24, r22
    2e14:	05 c0       	rjmp	.+10     	; 0x2e20 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    2e16:	ef 2b       	or	r30, r31
    2e18:	a9 f7       	brne	.-22     	; 0x2e04 <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    2e20:	2c 96       	adiw	r28, 0x0c	; 12
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	bf 90       	pop	r11
    2e3a:	af 90       	pop	r10
    2e3c:	9f 90       	pop	r9
    2e3e:	8f 90       	pop	r8
    2e40:	7f 90       	pop	r7
    2e42:	6f 90       	pop	r6
    2e44:	5f 90       	pop	r5
    2e46:	4f 90       	pop	r4
    2e48:	08 95       	ret

00002e4a <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	BOOL enableAM = TRUE;

	switch(value)
    2e4a:	83 30       	cpi	r24, 0x03	; 3
    2e4c:	09 f1       	breq	.+66     	; 0x2e90 <_Z18setAMToneFrequencyh+0x46>
    2e4e:	28 f4       	brcc	.+10     	; 0x2e5a <_Z18setAMToneFrequencyh+0x10>
    2e50:	88 23       	and	r24, r24
    2e52:	49 f0       	breq	.+18     	; 0x2e66 <_Z18setAMToneFrequencyh+0x1c>
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	a9 f0       	breq	.+42     	; 0x2e82 <_Z18setAMToneFrequencyh+0x38>
    2e58:	37 c0       	rjmp	.+110    	; 0x2ec8 <_Z18setAMToneFrequencyh+0x7e>
    2e5a:	85 30       	cpi	r24, 0x05	; 5
    2e5c:	39 f1       	breq	.+78     	; 0x2eac <_Z18setAMToneFrequencyh+0x62>
    2e5e:	f8 f0       	brcs	.+62     	; 0x2e9e <_Z18setAMToneFrequencyh+0x54>
    2e60:	86 30       	cpi	r24, 0x06	; 6
    2e62:	59 f1       	breq	.+86     	; 0x2eba <_Z18setAMToneFrequencyh+0x70>
    2e64:	31 c0       	rjmp	.+98     	; 0x2ec8 <_Z18setAMToneFrequencyh+0x7e>
	{
		case 0:
		{
			enableAM = FALSE;
			OCR1A = 1000;
    2e66:	88 ee       	ldi	r24, 0xE8	; 232
    2e68:	93 e0       	ldi	r25, 0x03	; 3
    2e6a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2e6e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			linkbus_init(BAUD);
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	71 ee       	ldi	r23, 0xE1	; 225
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 81 09 	call	0x1302	; 0x1302 <_Z12linkbus_initm>

	switch(value)
	{
		case 0:
		{
			enableAM = FALSE;
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	2a c0       	rjmp	.+84     	; 0x2ed6 <_Z18setAMToneFrequencyh+0x8c>
		}
		break;

		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    2e82:	8c e2       	ldi	r24, 0x2C	; 44
    2e84:	92 e0       	ldi	r25, 0x02	; 2
    2e86:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2e8a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2e8e:	26 c0       	rjmp	.+76     	; 0x2edc <_Z18setAMToneFrequencyh+0x92>

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    2e90:	81 e7       	ldi	r24, 0x71	; 113
    2e92:	92 e0       	ldi	r25, 0x02	; 2
    2e94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2e98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2e9c:	1f c0       	rjmp	.+62     	; 0x2edc <_Z18setAMToneFrequencyh+0x92>

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    2e9e:	8a ec       	ldi	r24, 0xCA	; 202
    2ea0:	92 e0       	ldi	r25, 0x02	; 2
    2ea2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2ea6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2eaa:	18 c0       	rjmp	.+48     	; 0x2edc <_Z18setAMToneFrequencyh+0x92>

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    2eac:	81 e4       	ldi	r24, 0x41	; 65
    2eae:	93 e0       	ldi	r25, 0x03	; 3
    2eb0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2eb4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2eb8:	11 c0       	rjmp	.+34     	; 0x2edc <_Z18setAMToneFrequencyh+0x92>

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    2eba:	88 ee       	ldi	r24, 0xE8	; 232
    2ebc:	93 e0       	ldi	r25, 0x03	; 3
    2ebe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2ec2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2ec6:	0a c0       	rjmp	.+20     	; 0x2edc <_Z18setAMToneFrequencyh+0x92>

		default:
		{
			OCR1A = 500;    /* For ~1000 Hz tone output */
    2ec8:	84 ef       	ldi	r24, 0xF4	; 244
    2eca:	91 e0       	ldi	r25, 0x01	; 1
    2ecc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2ed0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <_Z18setAMToneFrequencyh+0x92>
		{
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
    2ed6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_AM_enabled>
}
    2eda:	08 95       	ret
	}

#if !INIT_EEPROM_ONLY
		if(enableAM)
		{
			setupPortsForF1975();
    2edc:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z18setupPortsForF1975v>
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	f9 cf       	rjmp	.-14     	; 0x2ed6 <_Z18setAMToneFrequencyh+0x8c>

00002ee4 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2ee4:	2f 92       	push	r2
    2ee6:	3f 92       	push	r3
    2ee8:	4f 92       	push	r4
    2eea:	5f 92       	push	r5
    2eec:	6f 92       	push	r6
    2eee:	7f 92       	push	r7
    2ef0:	8f 92       	push	r8
    2ef2:	9f 92       	push	r9
    2ef4:	af 92       	push	r10
    2ef6:	bf 92       	push	r11
    2ef8:	cf 92       	push	r12
    2efa:	df 92       	push	r13
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	2c 97       	sbiw	r28, 0x0c	; 12
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    2f18:	0f 2e       	mov	r0, r31
    2f1a:	f4 e9       	ldi	r31, 0x94	; 148
    2f1c:	6f 2e       	mov	r6, r31
    2f1e:	f1 e0       	ldi	r31, 0x01	; 1
    2f20:	7f 2e       	mov	r7, r31
    2f22:	f0 2d       	mov	r31, r0
    2f24:	0f 2e       	mov	r0, r31
    2f26:	fd eb       	ldi	r31, 0xBD	; 189
    2f28:	af 2e       	mov	r10, r31
    2f2a:	f4 e0       	ldi	r31, 0x04	; 4
    2f2c:	bf 2e       	mov	r11, r31
    2f2e:	f0 2d       	mov	r31, r0
					{
						g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
					}
				}

				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2f30:	0f 2e       	mov	r0, r31
    2f32:	fa ea       	ldi	r31, 0xAA	; 170
    2f34:	8f 2e       	mov	r8, r31
    2f36:	f1 e0       	ldi	r31, 0x01	; 1
    2f38:	9f 2e       	mov	r9, r31
    2f3a:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, TRUE);
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    2f3c:	0f 2e       	mov	r0, r31
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	4f 2e       	mov	r4, r31
    2f42:	f2 e0       	ldi	r31, 0x02	; 2
    2f44:	5f 2e       	mov	r5, r31
    2f46:	f0 2d       	mov	r31, r0
				lb_send_string(g_tempStr, TRUE);

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    2f48:	0f 2e       	mov	r0, r31
    2f4a:	f7 e0       	ldi	r31, 0x07	; 7
    2f4c:	2f 2e       	mov	r2, r31
    2f4e:	f2 e0       	ldi	r31, 0x02	; 2
    2f50:	3f 2e       	mov	r3, r31
    2f52:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2f54:	0e 94 34 09 	call	0x1268	; 0x1268 <_Z16nextFullRxBufferv>
    2f58:	6c 01       	movw	r12, r24
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <_Z17handleLinkBusMsgsv+0x7c>
    2f5e:	ed c4       	rjmp	.+2522   	; 0x393a <_Z17handleLinkBusMsgsv+0xa56>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2f60:	dc 01       	movw	r26, r24
    2f62:	11 96       	adiw	r26, 0x01	; 1
    2f64:	8d 91       	ld	r24, X+
    2f66:	9c 91       	ld	r25, X
    2f68:	12 97       	sbiw	r26, 0x02	; 2
    2f6a:	86 3c       	cpi	r24, 0xC6	; 198
    2f6c:	be e1       	ldi	r27, 0x1E	; 30
    2f6e:	9b 07       	cpc	r25, r27
    2f70:	29 f1       	breq	.+74     	; 0x2fbc <_Z17handleLinkBusMsgsv+0xd8>
    2f72:	78 f4       	brcc	.+30     	; 0x2f92 <_Z17handleLinkBusMsgsv+0xae>
    2f74:	8e 31       	cpi	r24, 0x1E	; 30
    2f76:	f3 e0       	ldi	r31, 0x03	; 3
    2f78:	9f 07       	cpc	r25, r31
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <_Z17handleLinkBusMsgsv+0x9a>
    2f7c:	08 c1       	rjmp	.+528    	; 0x318e <_Z17handleLinkBusMsgsv+0x2aa>
    2f7e:	8f 36       	cpi	r24, 0x6F	; 111
    2f80:	2d e1       	ldi	r18, 0x1D	; 29
    2f82:	92 07       	cpc	r25, r18
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <_Z17handleLinkBusMsgsv+0xa4>
    2f86:	fb c1       	rjmp	.+1014   	; 0x337e <_Z17handleLinkBusMsgsv+0x49a>
    2f88:	87 3d       	cpi	r24, 0xD7	; 215
    2f8a:	92 40       	sbci	r25, 0x02	; 2
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <_Z17handleLinkBusMsgsv+0xac>
    2f8e:	b3 c4       	rjmp	.+2406   	; 0x38f6 <_Z17handleLinkBusMsgsv+0xa12>
    2f90:	b2 c0       	rjmp	.+356    	; 0x30f6 <_Z17handleLinkBusMsgsv+0x212>
    2f92:	80 3d       	cpi	r24, 0xD0	; 208
    2f94:	a3 e2       	ldi	r26, 0x23	; 35
    2f96:	9a 07       	cpc	r25, r26
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <_Z17handleLinkBusMsgsv+0xb8>
    2f9a:	6a c1       	rjmp	.+724    	; 0x3270 <_Z17handleLinkBusMsgsv+0x38c>
    2f9c:	28 f4       	brcc	.+10     	; 0x2fa8 <_Z17handleLinkBusMsgsv+0xc4>
    2f9e:	8a 3e       	cpi	r24, 0xEA	; 234
    2fa0:	92 42       	sbci	r25, 0x22	; 34
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <_Z17handleLinkBusMsgsv+0xc2>
    2fa4:	b7 c1       	rjmp	.+878    	; 0x3314 <_Z17handleLinkBusMsgsv+0x430>
    2fa6:	a7 c4       	rjmp	.+2382   	; 0x38f6 <_Z17handleLinkBusMsgsv+0xa12>
    2fa8:	84 33       	cpi	r24, 0x34	; 52
    2faa:	f4 e2       	ldi	r31, 0x24	; 36
    2fac:	9f 07       	cpc	r25, r31
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <_Z17handleLinkBusMsgsv+0xce>
    2fb0:	d4 c0       	rjmp	.+424    	; 0x315a <_Z17handleLinkBusMsgsv+0x276>
    2fb2:	85 3c       	cpi	r24, 0xC5	; 197
    2fb4:	94 42       	sbci	r25, 0x24	; 36
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <_Z17handleLinkBusMsgsv+0xd6>
    2fb8:	24 c4       	rjmp	.+2120   	; 0x3802 <_Z17handleLinkBusMsgsv+0x91e>
    2fba:	9d c4       	rjmp	.+2362   	; 0x38f6 <_Z17handleLinkBusMsgsv+0xa12>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2fbc:	d6 01       	movw	r26, r12
    2fbe:	13 96       	adiw	r26, 0x03	; 3
    2fc0:	8c 91       	ld	r24, X
    2fc2:	13 97       	sbiw	r26, 0x03	; 3
    2fc4:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <_Z17handleLinkBusMsgsv+0xe8>
    2fca:	80 c0       	rjmp	.+256    	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
				{
					if(c == 'B')
    2fcc:	82 34       	cpi	r24, 0x42	; 66
    2fce:	91 05       	cpc	r25, r1
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <_Z17handleLinkBusMsgsv+0xf0>
    2fd2:	9d c4       	rjmp	.+2362   	; 0x390e <_Z17handleLinkBusMsgsv+0xa2a>
					{
						c = BEACON;
					}
					else if(c == 'F')
    2fd4:	86 34       	cpi	r24, 0x46	; 70
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <_Z17handleLinkBusMsgsv+0xf8>
    2fda:	9b c4       	rjmp	.+2358   	; 0x3912 <_Z17handleLinkBusMsgsv+0xa2e>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2fdc:	83 34       	cpi	r24, 0x43	; 67
    2fde:	91 05       	cpc	r25, r1
    2fe0:	d9 f4       	brne	.+54     	; 0x3018 <_Z17handleLinkBusMsgsv+0x134>
					{
						char t = lb_buff->fields[FIELD2][0];
    2fe2:	57 96       	adiw	r26, 0x17	; 23
    2fe4:	8c 91       	ld	r24, X
    2fe6:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    2fe8:	58 96       	adiw	r26, 0x18	; 24
    2fea:	1c 92       	st	X, r1

						if(t == 'B')
    2fec:	82 34       	cpi	r24, 0x42	; 66
    2fee:	29 f0       	breq	.+10     	; 0x2ffa <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	c0 97       	sbiw	r24, 0x30	; 48
    2ff4:	0a 97       	sbiw	r24, 0x0a	; 10
    2ff6:	08 f0       	brcs	.+2      	; 0x2ffa <_Z17handleLinkBusMsgsv+0x116>
    2ff8:	69 c0       	rjmp	.+210    	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    2ffa:	c6 01       	movw	r24, r12
    2ffc:	47 96       	adiw	r24, 0x17	; 23
    2ffe:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <atoi>
    3002:	99 23       	and	r25, r25
    3004:	14 f4       	brge	.+4      	; 0x300a <_Z17handleLinkBusMsgsv+0x126>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	86 30       	cpi	r24, 0x06	; 6
    300c:	91 05       	cpc	r25, r1
    300e:	0c f4       	brge	.+2      	; 0x3012 <_Z17handleLinkBusMsgsv+0x12e>
    3010:	47 c0       	rjmp	.+142    	; 0x30a0 <_Z17handleLinkBusMsgsv+0x1bc>
    3012:	85 e0       	ldi	r24, 0x05	; 5
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	44 c0       	rjmp	.+136    	; 0x30a0 <_Z17handleLinkBusMsgsv+0x1bc>
						}
					}
					else if(c == 'S')
    3018:	83 35       	cpi	r24, 0x53	; 83
    301a:	91 05       	cpc	r25, r1
    301c:	e9 f5       	brne	.+122    	; 0x3098 <_Z17handleLinkBusMsgsv+0x1b4>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    301e:	f6 01       	movw	r30, r12
    3020:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    3022:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    3024:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    3026:	82 34       	cpi	r24, 0x42	; 66
    3028:	09 f4       	brne	.+2      	; 0x302c <_Z17handleLinkBusMsgsv+0x148>
    302a:	50 c0       	rjmp	.+160    	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
						{
							x = BEACON;
						}
						else if(t == 'F')
    302c:	86 34       	cpi	r24, 0x46	; 70
    302e:	49 f4       	brne	.+18     	; 0x3042 <_Z17handleLinkBusMsgsv+0x15e>
						{
							if((u > '0') && (u < '6'))
    3030:	8f ec       	ldi	r24, 0xCF	; 207
    3032:	89 0f       	add	r24, r25
    3034:	85 30       	cpi	r24, 0x05	; 5
    3036:	08 f0       	brcs	.+2      	; 0x303a <_Z17handleLinkBusMsgsv+0x156>
    3038:	49 c0       	rjmp	.+146    	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_F1 + (u - '1');
    303a:	89 2f       	mov	r24, r25
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	84 97       	sbiw	r24, 0x24	; 36
    3040:	1b c0       	rjmp	.+54     	; 0x3078 <_Z17handleLinkBusMsgsv+0x194>
							}
						}
						else if(t == 'S')
    3042:	83 35       	cpi	r24, 0x53	; 83
    3044:	41 f4       	brne	.+16     	; 0x3056 <_Z17handleLinkBusMsgsv+0x172>
						{
							if((u > '0') && (u < '6'))
    3046:	8f ec       	ldi	r24, 0xCF	; 207
    3048:	89 0f       	add	r24, r25
    304a:	85 30       	cpi	r24, 0x05	; 5
    304c:	c0 f4       	brcc	.+48     	; 0x307e <_Z17handleLinkBusMsgsv+0x19a>
							{
								x = SPRINT_S1 + (u - '1');
    304e:	89 2f       	mov	r24, r25
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	89 97       	sbiw	r24, 0x29	; 41
    3054:	11 c0       	rjmp	.+34     	; 0x3078 <_Z17handleLinkBusMsgsv+0x194>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    3056:	96 34       	cpi	r25, 0x46	; 70
    3058:	39 f4       	brne	.+14     	; 0x3068 <_Z17handleLinkBusMsgsv+0x184>
						{
							if((t > '0') && (t < '6'))
    305a:	9f ec       	ldi	r25, 0xCF	; 207
    305c:	98 0f       	add	r25, r24
    305e:	95 30       	cpi	r25, 0x05	; 5
    3060:	a8 f5       	brcc	.+106    	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_F1 + (t - '1');
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	84 97       	sbiw	r24, 0x24	; 36
    3066:	08 c0       	rjmp	.+16     	; 0x3078 <_Z17handleLinkBusMsgsv+0x194>
							}
						}
						else if(u == 'S')
    3068:	93 35       	cpi	r25, 0x53	; 83
    306a:	81 f5       	brne	.+96     	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
						{
							if((t > '0') && (t < '6'))
    306c:	9f ec       	ldi	r25, 0xCF	; 207
    306e:	98 0f       	add	r25, r24
    3070:	95 30       	cpi	r25, 0x05	; 5
    3072:	60 f5       	brcc	.+88     	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_S1 + (t - '1');
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	89 97       	sbiw	r24, 0x29	; 41
							}
						}

						if(x != BEACON)
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	19 f4       	brne	.+6      	; 0x3082 <_Z17handleLinkBusMsgsv+0x19e>
    307c:	27 c0       	rjmp	.+78     	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    307e:	87 e0       	ldi	r24, 0x07	; 7
    3080:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    3082:	87 30       	cpi	r24, 0x07	; 7
    3084:	91 05       	cpc	r25, r1
    3086:	14 f4       	brge	.+4      	; 0x308c <_Z17handleLinkBusMsgsv+0x1a8>
    3088:	87 e0       	ldi	r24, 0x07	; 7
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	82 31       	cpi	r24, 0x12	; 18
    308e:	91 05       	cpc	r25, r1
    3090:	3c f0       	brlt	.+14     	; 0x30a0 <_Z17handleLinkBusMsgsv+0x1bc>
    3092:	81 e1       	ldi	r24, 0x11	; 17
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <_Z17handleLinkBusMsgsv+0x1bc>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    3098:	c6 01       	movw	r24, r12
    309a:	03 96       	adiw	r24, 0x03	; 3
    309c:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    30a0:	82 31       	cpi	r24, 0x12	; 18
    30a2:	91 05       	cpc	r25, r1
    30a4:	98 f4       	brcc	.+38     	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
					{
						Fox_t holdFox = (Fox_t)c;
    30a6:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    30a8:	ae 01       	movw	r20, r28
    30aa:	4f 5f       	subi	r20, 0xFF	; 255
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255
    30ae:	60 e1       	ldi	r22, 0x10	; 16
    30b0:	8f e7       	ldi	r24, 0x7F	; 127
    30b2:	95 e0       	ldi	r25, 0x05	; 5
    30b4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    30b8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    30bc:	99 81       	ldd	r25, Y+1	; 0x01
    30be:	98 17       	cp	r25, r24
    30c0:	29 f0       	breq	.+10     	; 0x30cc <_Z17handleLinkBusMsgsv+0x1e8>
						{
							setupForFox(&holdFox, START_NOTHING);
    30c2:	63 e0       	ldi	r22, 0x03	; 3
    30c4:	ce 01       	movw	r24, r28
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    30cc:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    30d0:	1f 92       	push	r1
    30d2:	8f 93       	push	r24
    30d4:	7f 92       	push	r7
    30d6:	6f 92       	push	r6
    30d8:	bf 92       	push	r11
    30da:	af 92       	push	r10
    30dc:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	c5 01       	movw	r24, r10
    30e4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
			}
			break;
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	04 c4       	rjmp	.+2056   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    30f6:	d6 01       	movw	r26, r12
    30f8:	13 96       	adiw	r26, 0x03	; 3
    30fa:	8c 91       	ld	r24, X
    30fc:	88 23       	and	r24, r24
    30fe:	b1 f0       	breq	.+44     	; 0x312c <_Z17handleLinkBusMsgsv+0x248>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3100:	c6 01       	movw	r24, r12
    3102:	03 96       	adiw	r24, 0x03	; 3
    3104:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3108:	70 e0       	ldi	r23, 0x00	; 0
    310a:	67 30       	cpi	r22, 0x07	; 7
    310c:	71 05       	cpc	r23, r1
    310e:	0c f0       	brlt	.+2      	; 0x3112 <_Z17handleLinkBusMsgsv+0x22e>
    3110:	66 e0       	ldi	r22, 0x06	; 6
    3112:	60 93 63 05 	sts	0x0563, r22	; 0x800563 <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3116:	43 e6       	ldi	r20, 0x63	; 99
    3118:	55 e0       	ldi	r21, 0x05	; 5
    311a:	61 e1       	ldi	r22, 0x11	; 17
    311c:	8f e7       	ldi	r24, 0x7F	; 127
    311e:	95 e0       	ldi	r25, 0x05	; 5
    3120:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    3124:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_AM_audio_frequency>
    3128:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    312c:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_AM_audio_frequency>
    3130:	1f 92       	push	r1
    3132:	8f 93       	push	r24
    3134:	8c e9       	ldi	r24, 0x9C	; 156
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	9f 93       	push	r25
    313a:	8f 93       	push	r24
    313c:	bf 92       	push	r11
    313e:	af 92       	push	r10
    3140:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	c5 01       	movw	r24, r10
    3148:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
			}
			break;
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	d2 c3       	rjmp	.+1956   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    315a:	f6 01       	movw	r30, r12
    315c:	83 81       	ldd	r24, Z+3	; 0x03
    315e:	88 23       	and	r24, r24
    3160:	09 f4       	brne	.+2      	; 0x3164 <_Z17handleLinkBusMsgsv+0x280>
    3162:	cd c3       	rjmp	.+1946   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    3164:	80 33       	cpi	r24, 0x30	; 48
    3166:	21 f4       	brne	.+8      	; 0x3170 <_Z17handleLinkBusMsgsv+0x28c>
					{
						stopEventNow(PROGRAMMATIC);
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	0e 94 80 13 	call	0x2700	; 0x2700 <_Z12stopEventNow19EventActionSource_t>
    316e:	c7 c3       	rjmp	.+1934   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3170:	81 33       	cpi	r24, 0x31	; 49
    3172:	21 f4       	brne	.+8      	; 0x317c <_Z17handleLinkBusMsgsv+0x298>
					{
						startEventNow(PROGRAMMATIC);
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	0e 94 2e 13 	call	0x265c	; 0x265c <_Z13startEventNow19EventActionSource_t>
    317a:	c1 c3       	rjmp	.+1922   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    317c:	82 33       	cpi	r24, 0x32	; 50
    317e:	09 f0       	breq	.+2      	; 0x3182 <_Z17handleLinkBusMsgsv+0x29e>
    3180:	be c3       	rjmp	.+1916   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_transmissions_disabled>
						startEventUsingRTC();
    3188:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_Z18startEventUsingRTCv>
    318c:	b8 c3       	rjmp	.+1904   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    318e:	d6 01       	movw	r26, r12
    3190:	13 96       	adiw	r26, 0x03	; 3
    3192:	8c 91       	ld	r24, X
    3194:	88 23       	and	r24, r24
    3196:	99 f1       	breq	.+102    	; 0x31fe <_Z17handleLinkBusMsgsv+0x31a>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    3198:	80 e2       	ldi	r24, 0x20	; 32
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	f5 01       	movw	r30, r10
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    31a2:	b6 01       	movw	r22, r12
    31a4:	6d 5f       	subi	r22, 0xFD	; 253
    31a6:	7f 4f       	sbci	r23, 0xFF	; 255
    31a8:	c5 01       	movw	r24, r10
    31aa:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <strcat>

					if(lb_buff->fields[FIELD2][0])
    31ae:	d6 01       	movw	r26, r12
    31b0:	57 96       	adiw	r26, 0x17	; 23
    31b2:	8c 91       	ld	r24, X
    31b4:	88 23       	and	r24, r24
    31b6:	79 f0       	breq	.+30     	; 0x31d6 <_Z17handleLinkBusMsgsv+0x2f2>
					{
						strcat(g_tempStr, " ");
    31b8:	f5 01       	movw	r30, r10
    31ba:	01 90       	ld	r0, Z+
    31bc:	00 20       	and	r0, r0
    31be:	e9 f7       	brne	.-6      	; 0x31ba <_Z17handleLinkBusMsgsv+0x2d6>
    31c0:	31 97       	sbiw	r30, 0x01	; 1
    31c2:	80 e2       	ldi	r24, 0x20	; 32
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    31ca:	b6 01       	movw	r22, r12
    31cc:	69 5e       	subi	r22, 0xE9	; 233
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	c5 01       	movw	r24, r10
    31d2:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    31d6:	f5 01       	movw	r30, r10
    31d8:	01 90       	ld	r0, Z+
    31da:	00 20       	and	r0, r0
    31dc:	e9 f7       	brne	.-6      	; 0x31d8 <_Z17handleLinkBusMsgsv+0x2f4>
    31de:	31 97       	sbiw	r30, 0x01	; 1
    31e0:	ed 5b       	subi	r30, 0xBD	; 189
    31e2:	f4 40       	sbci	r31, 0x04	; 4
    31e4:	75 97       	sbiw	r30, 0x15	; 21
    31e6:	58 f4       	brcc	.+22     	; 0x31fe <_Z17handleLinkBusMsgsv+0x31a>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    31e8:	b5 01       	movw	r22, r10
    31ea:	8a e0       	ldi	r24, 0x0A	; 10
    31ec:	95 e0       	ldi	r25, 0x05	; 5
    31ee:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    31f2:	a5 01       	movw	r20, r10
    31f4:	6b e0       	ldi	r22, 0x0B	; 11
    31f6:	8f e7       	ldi	r24, 0x7F	; 127
    31f8:	95 e0       	ldi	r25, 0x05	; 5
    31fa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    31fe:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <g_messages_text+0x15>
    3202:	88 23       	and	r24, r24
    3204:	f1 f0       	breq	.+60     	; 0x3242 <_Z17handleLinkBusMsgsv+0x35e>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3206:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	8a e0       	ldi	r24, 0x0A	; 10
    320e:	95 e0       	ldi	r25, 0x05	; 5
    3210:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <_Z26timeRequiredToSendStrAtWPMPcj>
    3214:	88 5a       	subi	r24, 0xA8	; 168
    3216:	9d 4f       	sbci	r25, 0xFD	; 253
    3218:	9c 01       	movw	r18, r24
    321a:	36 95       	lsr	r19
    321c:	27 95       	ror	r18
    321e:	36 95       	lsr	r19
    3220:	27 95       	ror	r18
    3222:	36 95       	lsr	r19
    3224:	27 95       	ror	r18
    3226:	a5 ec       	ldi	r26, 0xC5	; 197
    3228:	b0 e2       	ldi	r27, 0x20	; 32
    322a:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    322e:	92 95       	swap	r25
    3230:	82 95       	swap	r24
    3232:	8f 70       	andi	r24, 0x0F	; 15
    3234:	89 27       	eor	r24, r25
    3236:	9f 70       	andi	r25, 0x0F	; 15
    3238:	89 27       	eor	r24, r25
    323a:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <g_time_needed_for_ID+0x1>
    323e:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    3242:	8a e0       	ldi	r24, 0x0A	; 10
    3244:	95 e0       	ldi	r25, 0x05	; 5
    3246:	9f 93       	push	r25
    3248:	8f 93       	push	r24
    324a:	83 ea       	ldi	r24, 0xA3	; 163
    324c:	91 e0       	ldi	r25, 0x01	; 1
    324e:	9f 93       	push	r25
    3250:	8f 93       	push	r24
    3252:	bf 92       	push	r11
    3254:	af 92       	push	r10
    3256:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    325a:	61 e0       	ldi	r22, 0x01	; 1
    325c:	c5 01       	movw	r24, r10
    325e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
			}
			break;
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	47 c3       	rjmp	.+1678   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0])
    3270:	f6 01       	movw	r30, r12
    3272:	83 81       	ldd	r24, Z+3	; 0x03
    3274:	88 23       	and	r24, r24
    3276:	c9 f1       	breq	.+114    	; 0x32ea <_Z17handleLinkBusMsgsv+0x406>
				{
					uint8_t speed = atol(lb_buff->fields[FIELD2]);
    3278:	c6 01       	movw	r24, r12
    327a:	47 96       	adiw	r24, 0x17	; 23
    327c:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <atol>
					g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	65 30       	cpi	r22, 0x05	; 5
    3284:	71 05       	cpc	r23, r1
    3286:	14 f4       	brge	.+4      	; 0x328c <_Z17handleLinkBusMsgsv+0x3a8>
    3288:	65 e0       	ldi	r22, 0x05	; 5
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	65 31       	cpi	r22, 0x15	; 21
    328e:	71 05       	cpc	r23, r1
    3290:	0c f0       	brlt	.+2      	; 0x3294 <_Z17handleLinkBusMsgsv+0x3b0>
    3292:	64 e1       	ldi	r22, 0x14	; 20
    3294:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <g_id_codespeed>
					ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    3298:	43 e1       	ldi	r20, 0x13	; 19
    329a:	51 e0       	ldi	r21, 0x01	; 1
    329c:	6f e0       	ldi	r22, 0x0F	; 15
    329e:	8f e7       	ldi	r24, 0x7F	; 127
    32a0:	95 e0       	ldi	r25, 0x05	; 5
    32a2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					if(g_messages_text[STATION_ID][0])
    32a6:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <g_messages_text+0x15>
    32aa:	88 23       	and	r24, r24
    32ac:	f1 f0       	breq	.+60     	; 0x32ea <_Z17handleLinkBusMsgsv+0x406>
					{
						g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    32ae:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    32b2:	70 e0       	ldi	r23, 0x00	; 0
    32b4:	8a e0       	ldi	r24, 0x0A	; 10
    32b6:	95 e0       	ldi	r25, 0x05	; 5
    32b8:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <_Z26timeRequiredToSendStrAtWPMPcj>
    32bc:	88 5a       	subi	r24, 0xA8	; 168
    32be:	9d 4f       	sbci	r25, 0xFD	; 253
    32c0:	9c 01       	movw	r18, r24
    32c2:	36 95       	lsr	r19
    32c4:	27 95       	ror	r18
    32c6:	36 95       	lsr	r19
    32c8:	27 95       	ror	r18
    32ca:	36 95       	lsr	r19
    32cc:	27 95       	ror	r18
    32ce:	a5 ec       	ldi	r26, 0xC5	; 197
    32d0:	b0 e2       	ldi	r27, 0x20	; 32
    32d2:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    32d6:	92 95       	swap	r25
    32d8:	82 95       	swap	r24
    32da:	8f 70       	andi	r24, 0x0F	; 15
    32dc:	89 27       	eor	r24, r25
    32de:	9f 70       	andi	r25, 0x0F	; 15
    32e0:	89 27       	eor	r24, r25
    32e2:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <g_time_needed_for_ID+0x1>
    32e6:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <g_time_needed_for_ID>
					}
				}

				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    32ea:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_id_codespeed>
    32ee:	1f 92       	push	r1
    32f0:	8f 93       	push	r24
    32f2:	9f 92       	push	r9
    32f4:	8f 92       	push	r8
    32f6:	bf 92       	push	r11
    32f8:	af 92       	push	r10
    32fa:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	c5 01       	movw	r24, r10
    3302:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
			}
			break;
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	f5 c2       	rjmp	.+1514   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    3314:	d6 01       	movw	r26, r12
    3316:	13 96       	adiw	r26, 0x03	; 3
    3318:	8c 91       	ld	r24, X
    331a:	88 23       	and	r24, r24
    331c:	c9 f0       	breq	.+50     	; 0x3350 <_Z17handleLinkBusMsgsv+0x46c>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    331e:	48 e0       	ldi	r20, 0x08	; 8
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	b6 01       	movw	r22, r12
    3324:	6d 5f       	subi	r22, 0xFD	; 253
    3326:	7f 4f       	sbci	r23, 0xFF	; 255
    3328:	c5 01       	movw	r24, r10
    332a:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    332e:	f5 01       	movw	r30, r10
    3330:	10 86       	std	Z+8, r1	; 0x08

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    3332:	c5 01       	movw	r24, r10
    3334:	0e 94 20 13 	call	0x2640	; 0x2640 <_Z11only_digitsPc>
    3338:	88 23       	and	r24, r24
    333a:	51 f0       	breq	.+20     	; 0x3350 <_Z17handleLinkBusMsgsv+0x46c>
    333c:	f5 01       	movw	r30, r10
    333e:	01 90       	ld	r0, Z+
    3340:	00 20       	and	r0, r0
    3342:	e9 f7       	brne	.-6      	; 0x333e <_Z17handleLinkBusMsgsv+0x45a>
    3344:	31 97       	sbiw	r30, 0x01	; 1
    3346:	ed 5b       	subi	r30, 0xBD	; 189
    3348:	f4 40       	sbci	r31, 0x04	; 4
    334a:	34 97       	sbiw	r30, 0x04	; 4
    334c:	08 f0       	brcs	.+2      	; 0x3350 <_Z17handleLinkBusMsgsv+0x46c>
    334e:	e3 c2       	rjmp	.+1478   	; 0x3916 <_Z17handleLinkBusMsgsv+0xa32>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    3350:	86 e2       	ldi	r24, 0x26	; 38
    3352:	95 e0       	ldi	r25, 0x05	; 5
    3354:	9f 93       	push	r25
    3356:	8f 93       	push	r24
    3358:	86 eb       	ldi	r24, 0xB6	; 182
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	9f 93       	push	r25
    335e:	8f 93       	push	r24
    3360:	bf 92       	push	r11
    3362:	af 92       	push	r10
    3364:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3368:	61 e0       	ldi	r22, 0x01	; 1
    336a:	c5 01       	movw	r24, r10
    336c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
			}
			break;
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	c0 c2       	rjmp	.+1408   	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    337e:	d6 01       	movw	r26, r12
    3380:	13 96       	adiw	r26, 0x03	; 3
    3382:	8c 91       	ld	r24, X
    3384:	84 35       	cpi	r24, 0x54	; 84
    3386:	09 f0       	breq	.+2      	; 0x338a <_Z17handleLinkBusMsgsv+0x4a6>
    3388:	73 c0       	rjmp	.+230    	; 0x3470 <_Z17handleLinkBusMsgsv+0x58c>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    338a:	4c e0       	ldi	r20, 0x0C	; 12
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	b6 01       	movw	r22, r12
    3390:	69 5e       	subi	r22, 0xE9	; 233
    3392:	7f 4f       	sbci	r23, 0xFF	; 255
    3394:	c5 01       	movw	r24, r10
    3396:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    339a:	f5 01       	movw	r30, r10
    339c:	14 86       	std	Z+12, r1	; 0x0c

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    339e:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <g_utc_offset>
    33a2:	41 95       	neg	r20
    33a4:	6e e6       	ldi	r22, 0x6E	; 110
    33a6:	75 e0       	ldi	r23, 0x05	; 5
    33a8:	c5 01       	movw	r24, r10
    33aa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_Z18validateTimeStringPcPma>
    33ae:	69 87       	std	Y+9, r22	; 0x09
    33b0:	7a 87       	std	Y+10, r23	; 0x0a
    33b2:	8b 87       	std	Y+11, r24	; 0x0b
    33b4:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    33b6:	61 15       	cp	r22, r1
    33b8:	71 05       	cpc	r23, r1
    33ba:	81 05       	cpc	r24, r1
    33bc:	91 05       	cpc	r25, r1
    33be:	41 f1       	breq	.+80     	; 0x3410 <_Z17handleLinkBusMsgsv+0x52c>
					{
						rv3028_set_epoch(t);
    33c0:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    33ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    33cc:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <g_current_epoch>
    33d0:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <g_current_epoch+0x1>
    33d4:	a0 93 70 05 	sts	0x0570, r26	; 0x800570 <g_current_epoch+0x2>
    33d8:	b0 93 71 05 	sts	0x0571, r27	; 0x800571 <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    33dc:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    33e0:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    33e4:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    33e8:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    33ec:	bf 93       	push	r27
    33ee:	af 93       	push	r26
    33f0:	9f 93       	push	r25
    33f2:	8f 93       	push	r24
    33f4:	83 ec       	ldi	r24, 0xC3	; 195
    33f6:	91 e0       	ldi	r25, 0x01	; 1
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	bf 92       	push	r11
    33fe:	af 92       	push	r10
    3400:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	90 c2       	rjmp	.+1312   	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3410:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <g_event_start_epoch>
    3414:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    3418:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    341c:	50 91 6d 05 	lds	r21, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    3420:	60 91 6e 05 	lds	r22, 0x056E	; 0x80056e <g_current_epoch>
    3424:	70 91 6f 05 	lds	r23, 0x056F	; 0x80056f <g_current_epoch+0x1>
    3428:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_current_epoch+0x2>
    342c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_current_epoch+0x3>
    3430:	e1 2c       	mov	r14, r1
    3432:	f1 2c       	mov	r15, r1
    3434:	0f e6       	ldi	r16, 0x6F	; 111
    3436:	11 e0       	ldi	r17, 0x01	; 1
    3438:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    343c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    3440:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    3444:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    3448:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    344c:	bf 93       	push	r27
    344e:	af 93       	push	r26
    3450:	9f 93       	push	r25
    3452:	8f 93       	push	r24
    3454:	8e eb       	ldi	r24, 0xBE	; 190
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9f 93       	push	r25
    345a:	8f 93       	push	r24
    345c:	bf 92       	push	r11
    345e:	af 92       	push	r10
    3460:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	60 c2       	rjmp	.+1216   	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3470:	83 35       	cpi	r24, 0x53	; 83
    3472:	09 f0       	breq	.+2      	; 0x3476 <_Z17handleLinkBusMsgsv+0x592>
    3474:	96 c0       	rjmp	.+300    	; 0x35a2 <_Z17handleLinkBusMsgsv+0x6be>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3476:	b6 01       	movw	r22, r12
    3478:	69 5e       	subi	r22, 0xE9	; 233
    347a:	7f 4f       	sbci	r23, 0xFF	; 255
    347c:	c5 01       	movw	r24, r10
    347e:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3482:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <g_utc_offset>
    3486:	41 95       	neg	r20
    3488:	6a e6       	ldi	r22, 0x6A	; 106
    348a:	75 e0       	ldi	r23, 0x05	; 5
    348c:	c5 01       	movw	r24, r10
    348e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_Z18validateTimeStringPcPma>

					if(s)
    3492:	61 15       	cp	r22, r1
    3494:	71 05       	cpc	r23, r1
    3496:	81 05       	cpc	r24, r1
    3498:	91 05       	cpc	r25, r1
    349a:	09 f4       	brne	.+2      	; 0x349e <_Z17handleLinkBusMsgsv+0x5ba>
    349c:	68 c0       	rjmp	.+208    	; 0x356e <_Z17handleLinkBusMsgsv+0x68a>
					{
						g_event_start_epoch = s;
    349e:	60 93 6a 05 	sts	0x056A, r22	; 0x80056a <g_event_start_epoch>
    34a2:	70 93 6b 05 	sts	0x056B, r23	; 0x80056b <g_event_start_epoch+0x1>
    34a6:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <g_event_start_epoch+0x2>
    34aa:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    34ae:	4a e6       	ldi	r20, 0x6A	; 106
    34b0:	55 e0       	ldi	r21, 0x05	; 5
    34b2:	64 e1       	ldi	r22, 0x14	; 20
    34b4:	8f e7       	ldi	r24, 0x7F	; 127
    34b6:	95 e0       	ldi	r25, 0x05	; 5
    34b8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    34bc:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    34c0:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    34c4:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    34c8:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    34cc:	8d 83       	std	Y+5, r24	; 0x05
    34ce:	9e 83       	std	Y+6, r25	; 0x06
    34d0:	af 83       	std	Y+7, r26	; 0x07
    34d2:	b8 87       	std	Y+8, r27	; 0x08
    34d4:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    34d8:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    34dc:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    34e0:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    34e4:	80 58       	subi	r24, 0x80	; 128
    34e6:	9e 4a       	sbci	r25, 0xAE	; 174
    34e8:	ae 4f       	sbci	r26, 0xFE	; 254
    34ea:	bf 4f       	sbci	r27, 0xFF	; 255
    34ec:	89 83       	std	Y+1, r24	; 0x01
    34ee:	9a 83       	std	Y+2, r25	; 0x02
    34f0:	ab 83       	std	Y+3, r26	; 0x03
    34f2:	bc 83       	std	Y+4, r27	; 0x04
    34f4:	4d 81       	ldd	r20, Y+5	; 0x05
    34f6:	5e 81       	ldd	r21, Y+6	; 0x06
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	78 85       	ldd	r23, Y+8	; 0x08
    34fc:	48 17       	cp	r20, r24
    34fe:	59 07       	cpc	r21, r25
    3500:	6a 07       	cpc	r22, r26
    3502:	7b 07       	cpc	r23, r27
    3504:	28 f4       	brcc	.+10     	; 0x3510 <_Z17handleLinkBusMsgsv+0x62c>
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	ab 81       	ldd	r26, Y+3	; 0x03
    350c:	bc 81       	ldd	r27, Y+4	; 0x04
    350e:	04 c0       	rjmp	.+8      	; 0x3518 <_Z17handleLinkBusMsgsv+0x634>
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	9e 81       	ldd	r25, Y+6	; 0x06
    3514:	af 81       	ldd	r26, Y+7	; 0x07
    3516:	b8 85       	ldd	r27, Y+8	; 0x08
    3518:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <g_event_finish_epoch>
    351c:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <g_event_finish_epoch+0x1>
    3520:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <g_event_finish_epoch+0x2>
    3524:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3528:	46 e6       	ldi	r20, 0x66	; 102
    352a:	55 e0       	ldi	r21, 0x05	; 5
    352c:	65 e1       	ldi	r22, 0x15	; 21
    352e:	8f e7       	ldi	r24, 0x7F	; 127
    3530:	95 e0       	ldi	r25, 0x05	; 5
    3532:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3536:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    353a:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    353e:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    3542:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    3546:	bf 93       	push	r27
    3548:	af 93       	push	r26
    354a:	9f 93       	push	r25
    354c:	8f 93       	push	r24
    354e:	8d ec       	ldi	r24, 0xCD	; 205
    3550:	91 e0       	ldi	r25, 0x01	; 1
    3552:	9f 93       	push	r25
    3554:	8f 93       	push	r24
    3556:	bf 92       	push	r11
    3558:	af 92       	push	r10
    355a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
/*						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES); */
						startEventUsingRTC();
    355e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_Z18startEventUsingRTCv>
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	e1 c1       	rjmp	.+962    	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    356e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_event_start_epoch>
    3572:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    3576:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    357a:	b0 91 6d 05 	lds	r27, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    357e:	bf 93       	push	r27
    3580:	af 93       	push	r26
    3582:	9f 93       	push	r25
    3584:	8f 93       	push	r24
    3586:	8d ec       	ldi	r24, 0xCD	; 205
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	9f 93       	push	r25
    358c:	8f 93       	push	r24
    358e:	bf 92       	push	r11
    3590:	af 92       	push	r10
    3592:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	c7 c1       	rjmp	.+910    	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    35a2:	86 34       	cpi	r24, 0x46	; 70
    35a4:	09 f0       	breq	.+2      	; 0x35a8 <_Z17handleLinkBusMsgsv+0x6c4>
    35a6:	6f c0       	rjmp	.+222    	; 0x3686 <_Z17handleLinkBusMsgsv+0x7a2>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    35a8:	b6 01       	movw	r22, r12
    35aa:	69 5e       	subi	r22, 0xE9	; 233
    35ac:	7f 4f       	sbci	r23, 0xFF	; 255
    35ae:	c5 01       	movw	r24, r10
    35b0:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    35b4:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <g_utc_offset>
    35b8:	41 95       	neg	r20
    35ba:	66 e6       	ldi	r22, 0x66	; 102
    35bc:	75 e0       	ldi	r23, 0x05	; 5
    35be:	c5 01       	movw	r24, r10
    35c0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_Z18validateTimeStringPcPma>

					if(f)
    35c4:	61 15       	cp	r22, r1
    35c6:	71 05       	cpc	r23, r1
    35c8:	81 05       	cpc	r24, r1
    35ca:	91 05       	cpc	r25, r1
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <_Z17handleLinkBusMsgsv+0x6ec>
    35ce:	41 c0       	rjmp	.+130    	; 0x3652 <_Z17handleLinkBusMsgsv+0x76e>
					{
						g_event_finish_epoch = f;
    35d0:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <g_event_finish_epoch>
    35d4:	70 93 67 05 	sts	0x0567, r23	; 0x800567 <g_event_finish_epoch+0x1>
    35d8:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_event_finish_epoch+0x2>
    35dc:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    35e0:	46 e6       	ldi	r20, 0x66	; 102
    35e2:	55 e0       	ldi	r21, 0x05	; 5
    35e4:	65 e1       	ldi	r22, 0x15	; 21
    35e6:	8f e7       	ldi	r24, 0x7F	; 127
    35e8:	95 e0       	ldi	r25, 0x05	; 5
    35ea:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    35ee:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <g_event_finish_epoch>
    35f2:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    35f6:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    35fa:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    35fe:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_event_start_epoch>
    3602:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    3606:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    360a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    360e:	e1 2c       	mov	r14, r1
    3610:	f1 2c       	mov	r15, r1
    3612:	0b e7       	ldi	r16, 0x7B	; 123
    3614:	11 e0       	ldi	r17, 0x01	; 1
    3616:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    361a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    361e:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    3622:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    3626:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    362a:	bf 93       	push	r27
    362c:	af 93       	push	r26
    362e:	9f 93       	push	r25
    3630:	8f 93       	push	r24
    3632:	88 ed       	ldi	r24, 0xD8	; 216
    3634:	91 e0       	ldi	r25, 0x01	; 1
    3636:	9f 93       	push	r25
    3638:	8f 93       	push	r24
    363a:	bf 92       	push	r11
    363c:	af 92       	push	r10
    363e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
/*						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES); */
						startEventUsingRTC();
    3642:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_Z18startEventUsingRTCv>
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	6f c1       	rjmp	.+734    	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3652:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <g_event_finish_epoch>
    3656:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    365a:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    365e:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    3662:	bf 93       	push	r27
    3664:	af 93       	push	r26
    3666:	9f 93       	push	r25
    3668:	8f 93       	push	r24
    366a:	88 ed       	ldi	r24, 0xD8	; 216
    366c:	91 e0       	ldi	r25, 0x01	; 1
    366e:	9f 93       	push	r25
    3670:	8f 93       	push	r24
    3672:	bf 92       	push	r11
    3674:	af 92       	push	r10
    3676:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
    3684:	55 c1       	rjmp	.+682    	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    3686:	8f 34       	cpi	r24, 0x4F	; 79
    3688:	b9 f5       	brne	.+110    	; 0x36f8 <_Z17handleLinkBusMsgsv+0x814>
				{
					if(lb_buff->fields[FIELD2][0])
    368a:	d6 01       	movw	r26, r12
    368c:	57 96       	adiw	r26, 0x17	; 23
    368e:	8c 91       	ld	r24, X
    3690:	88 23       	and	r24, r24
    3692:	d9 f0       	breq	.+54     	; 0x36ca <_Z17handleLinkBusMsgsv+0x7e6>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3694:	c6 01       	movw	r24, r12
    3696:	47 96       	adiw	r24, 0x17	; 23
    3698:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <atoi>

						offset = CLAMP(-24, offset, 24);
    369c:	89 31       	cpi	r24, 0x19	; 25
    369e:	54 f4       	brge	.+20     	; 0x36b4 <_Z17handleLinkBusMsgsv+0x7d0>
    36a0:	08 2e       	mov	r0, r24
    36a2:	00 0c       	add	r0, r0
    36a4:	99 0b       	sbc	r25, r25
    36a6:	88 3e       	cpi	r24, 0xE8	; 232
    36a8:	bf ef       	ldi	r27, 0xFF	; 255
    36aa:	9b 07       	cpc	r25, r27
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <_Z17handleLinkBusMsgsv+0x7d4>
    36ae:	88 ee       	ldi	r24, 0xE8	; 232
    36b0:	9f ef       	ldi	r25, 0xFF	; 255
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <_Z17handleLinkBusMsgsv+0x7d4>
    36b4:	88 e1       	ldi	r24, 0x18	; 24
    36b6:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    36b8:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    36bc:	45 e6       	ldi	r20, 0x65	; 101
    36be:	55 e0       	ldi	r21, 0x05	; 5
    36c0:	66 e1       	ldi	r22, 0x16	; 22
    36c2:	8f e7       	ldi	r24, 0x7F	; 127
    36c4:	95 e0       	ldi	r25, 0x05	; 5
    36c6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    36ca:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_utc_offset>
    36ce:	28 2f       	mov	r18, r24
    36d0:	08 2e       	mov	r0, r24
    36d2:	00 0c       	add	r0, r0
    36d4:	33 0b       	sbc	r19, r19
    36d6:	3f 93       	push	r19
    36d8:	8f 93       	push	r24
    36da:	84 ee       	ldi	r24, 0xE4	; 228
    36dc:	91 e0       	ldi	r25, 0x01	; 1
    36de:	9f 93       	push	r25
    36e0:	8f 93       	push	r24
    36e2:	bf 92       	push	r11
    36e4:	af 92       	push	r10
    36e6:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	1c c1       	rjmp	.+568    	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    36f8:	83 34       	cpi	r24, 0x43	; 67
    36fa:	09 f5       	brne	.+66     	; 0x373e <_Z17handleLinkBusMsgsv+0x85a>
				{
					if(lb_buff->fields[FIELD2][0])
    36fc:	f6 01       	movw	r30, r12
    36fe:	87 89       	ldd	r24, Z+23	; 0x17
    3700:	88 23       	and	r24, r24
    3702:	51 f0       	breq	.+20     	; 0x3718 <_Z17handleLinkBusMsgsv+0x834>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3704:	c6 01       	movw	r24, r12
    3706:	47 96       	adiw	r24, 0x17	; 23
    3708:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <atoi>

						if(c < 512)
    370c:	81 15       	cp	r24, r1
    370e:	f2 e0       	ldi	r31, 0x02	; 2
    3710:	9f 07       	cpc	r25, r31
    3712:	10 f4       	brcc	.+4      	; 0x3718 <_Z17handleLinkBusMsgsv+0x834>
						{
							rv3028_set_offset_RAM(c);
    3714:	0e 94 24 29 	call	0x5248	; 0x5248 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3718:	0e 94 b9 29 	call	0x5372	; 0x5372 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    371c:	9f 93       	push	r25
    371e:	8f 93       	push	r24
    3720:	8f ee       	ldi	r24, 0xEF	; 239
    3722:	91 e0       	ldi	r25, 0x01	; 1
    3724:	9f 93       	push	r25
    3726:	8f 93       	push	r24
    3728:	bf 92       	push	r11
    372a:	af 92       	push	r10
    372c:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	f9 c0       	rjmp	.+498    	; 0x3930 <_Z17handleLinkBusMsgsv+0xa4c>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck() == CONFIGURATION_ERROR)
    373e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z23clockConfigurationCheckv>
    3742:	82 30       	cpi	r24, 0x02	; 2
    3744:	19 f4       	brne	.+6      	; 0x374c <_Z17handleLinkBusMsgsv+0x868>
					{
						reportConfigErrors();
    3746:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <_Z18reportConfigErrorsv>
    374a:	d9 c0       	rjmp	.+434    	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    374c:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <g_event_start_epoch>
    3750:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    3754:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    3758:	50 91 6d 05 	lds	r21, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    375c:	60 91 6e 05 	lds	r22, 0x056E	; 0x80056e <g_current_epoch>
    3760:	70 91 6f 05 	lds	r23, 0x056F	; 0x80056f <g_current_epoch+0x1>
    3764:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_current_epoch+0x2>
    3768:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_current_epoch+0x3>
    376c:	0f 2e       	mov	r0, r31
    376e:	f2 e6       	ldi	r31, 0x62	; 98
    3770:	ef 2e       	mov	r14, r31
    3772:	f1 e0       	ldi	r31, 0x01	; 1
    3774:	ff 2e       	mov	r15, r31
    3776:	f0 2d       	mov	r31, r0
    3778:	0f e6       	ldi	r16, 0x6F	; 111
    377a:	11 e0       	ldi	r17, 0x01	; 1
    377c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3780:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <g_event_finish_epoch>
    3784:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    3788:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    378c:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    3790:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <g_event_start_epoch>
    3794:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    3798:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    379c:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    37a0:	e1 2c       	mov	r14, r1
    37a2:	f1 2c       	mov	r15, r1
    37a4:	0b e7       	ldi	r16, 0x7B	; 123
    37a6:	11 e0       	ldi	r17, 0x01	; 1
    37a8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    37ac:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <g_event_start_epoch>
    37b0:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <g_event_start_epoch+0x1>
    37b4:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <g_event_start_epoch+0x2>
    37b8:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <g_event_start_epoch+0x3>
    37bc:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <g_current_epoch>
    37c0:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <g_current_epoch+0x1>
    37c4:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <g_current_epoch+0x2>
    37c8:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <g_current_epoch+0x3>
    37cc:	48 17       	cp	r20, r24
    37ce:	59 07       	cpc	r21, r25
    37d0:	6a 07       	cpc	r22, r26
    37d2:	7b 07       	cpc	r23, r27
    37d4:	08 f0       	brcs	.+2      	; 0x37d8 <_Z17handleLinkBusMsgsv+0x8f4>
    37d6:	93 c0       	rjmp	.+294    	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    37d8:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <g_event_finish_epoch>
    37dc:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <g_event_finish_epoch+0x1>
    37e0:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <g_event_finish_epoch+0x2>
    37e4:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <g_event_finish_epoch+0x3>
    37e8:	60 91 6e 05 	lds	r22, 0x056E	; 0x80056e <g_current_epoch>
    37ec:	70 91 6f 05 	lds	r23, 0x056F	; 0x80056f <g_current_epoch+0x1>
    37f0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_current_epoch+0x2>
    37f4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_current_epoch+0x3>
    37f8:	03 e8       	ldi	r16, 0x83	; 131
    37fa:	11 e0       	ldi	r17, 0x01	; 1
    37fc:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z14reportTimeTillmmPKcS0_>
    3800:	7e c0       	rjmp	.+252    	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3802:	d6 01       	movw	r26, r12
    3804:	13 96       	adiw	r26, 0x03	; 3
    3806:	8c 91       	ld	r24, X
    3808:	13 97       	sbiw	r26, 0x03	; 3
    380a:	83 34       	cpi	r24, 0x43	; 67
    380c:	89 f5       	brne	.+98     	; 0x3870 <_Z17handleLinkBusMsgsv+0x98c>
				{
					if(lb_buff->fields[FIELD2][0])
    380e:	57 96       	adiw	r26, 0x17	; 23
    3810:	8c 91       	ld	r24, X
    3812:	88 23       	and	r24, r24
    3814:	a9 f0       	breq	.+42     	; 0x3840 <_Z17handleLinkBusMsgsv+0x95c>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3816:	c6 01       	movw	r24, r12
    3818:	47 96       	adiw	r24, 0x17	; 23
    381a:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <atoi>

						if((v > -2000) && (v < 2000))
    381e:	9c 01       	movw	r18, r24
    3820:	21 53       	subi	r18, 0x31	; 49
    3822:	38 4f       	sbci	r19, 0xF8	; 248
    3824:	2f 39       	cpi	r18, 0x9F	; 159
    3826:	3f 40       	sbci	r19, 0x0F	; 15
    3828:	58 f4       	brcc	.+22     	; 0x3840 <_Z17handleLinkBusMsgsv+0x95c>
						{
							g_atmega_temp_calibration = v;
    382a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_atmega_temp_calibration+0x1>
    382e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3832:	40 e1       	ldi	r20, 0x10	; 16
    3834:	51 e0       	ldi	r21, 0x01	; 1
    3836:	62 e1       	ldi	r22, 0x12	; 18
    3838:	8f e7       	ldi	r24, 0x7F	; 127
    383a:	95 e0       	ldi	r25, 0x05	; 5
    383c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    3840:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_atmega_temp_calibration>
    3844:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_atmega_temp_calibration+0x1>
    3848:	9f 93       	push	r25
    384a:	8f 93       	push	r24
    384c:	85 ef       	ldi	r24, 0xF5	; 245
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	9f 93       	push	r25
    3852:	8f 93       	push	r24
    3854:	bf 92       	push	r11
    3856:	af 92       	push	r10
    3858:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
					lb_send_string(g_tempStr, TRUE);
    385c:	61 e0       	ldi	r22, 0x01	; 1
    385e:	c5 01       	movw	r24, r10
    3860:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3870:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <g_temperature>
    3874:	28 2f       	mov	r18, r24
    3876:	08 2e       	mov	r0, r24
    3878:	00 0c       	add	r0, r0
    387a:	33 0b       	sbc	r19, r19
    387c:	3f 93       	push	r19
    387e:	8f 93       	push	r24
    3880:	5f 92       	push	r5
    3882:	4f 92       	push	r4
    3884:	bf 92       	push	r11
    3886:	af 92       	push	r10
    3888:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    388c:	61 e0       	ldi	r22, 0x01	; 1
    388e:	c5 01       	movw	r24, r10
    3890:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3894:	40 91 23 05 	lds	r20, 0x0523	; 0x800523 <g_voltage>
    3898:	50 91 24 05 	lds	r21, 0x0524	; 0x800524 <g_voltage+0x1>
    389c:	fa 01       	movw	r30, r20
    389e:	f6 95       	lsr	r31
    38a0:	e7 95       	ror	r30
    38a2:	f6 95       	lsr	r31
    38a4:	e7 95       	ror	r30
    38a6:	9f 01       	movw	r18, r30
    38a8:	ab e7       	ldi	r26, 0x7B	; 123
    38aa:	b4 e1       	ldi	r27, 0x14	; 20
    38ac:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    38b0:	96 95       	lsr	r25
    38b2:	87 95       	ror	r24
    38b4:	64 e6       	ldi	r22, 0x64	; 100
    38b6:	68 9f       	mul	r22, r24
    38b8:	90 01       	movw	r18, r0
    38ba:	69 9f       	mul	r22, r25
    38bc:	30 0d       	add	r19, r0
    38be:	11 24       	eor	r1, r1
    38c0:	42 1b       	sub	r20, r18
    38c2:	53 0b       	sbc	r21, r19
    38c4:	5f 93       	push	r21
    38c6:	4f 93       	push	r20
    38c8:	9f 01       	movw	r18, r30
    38ca:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    38ce:	96 95       	lsr	r25
    38d0:	87 95       	ror	r24
    38d2:	9f 93       	push	r25
    38d4:	8f 93       	push	r24
    38d6:	3f 92       	push	r3
    38d8:	2f 92       	push	r2
    38da:	bf 92       	push	r11
    38dc:	af 92       	push	r10
    38de:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    38e2:	61 e0       	ldi	r22, 0x01	; 1
    38e4:	c5 01       	movw	r24, r10
    38e6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
			}
			break;
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	04 c0       	rjmp	.+8      	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>

			default:
			{
				ee_mgr.send_Help();
    38f6:	8f e7       	ldi	r24, 0x7F	; 127
    38f8:	95 e0       	ldi	r25, 0x05	; 5
    38fa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    38fe:	d6 01       	movw	r26, r12
    3900:	12 96       	adiw	r26, 0x02	; 2
    3902:	1c 92       	st	X, r1
    3904:	1e 92       	st	-X, r1
    3906:	11 97       	sbiw	r26, 0x01	; 1
		if(send_ack)
		{
			lb_send_NewPrompt();
    3908:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_Z17lb_send_NewPromptv>
    390c:	23 cb       	rjmp	.-2490   	; 0x2f54 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	ca cb       	rjmp	.-2156   	; 0x30a6 <_Z17handleLinkBusMsgsv+0x1c2>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3912:	86 e0       	ldi	r24, 0x06	; 6
    3914:	c8 cb       	rjmp	.-2160   	; 0x30a6 <_Z17handleLinkBusMsgsv+0x1c2>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    3916:	b5 01       	movw	r22, r10
    3918:	86 e2       	ldi	r24, 0x26	; 38
    391a:	95 e0       	ldi	r25, 0x05	; 5
    391c:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3920:	46 e2       	ldi	r20, 0x26	; 38
    3922:	55 e0       	ldi	r21, 0x05	; 5
    3924:	6e e0       	ldi	r22, 0x0E	; 14
    3926:	8f e7       	ldi	r24, 0x7F	; 127
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    392e:	10 cd       	rjmp	.-1504   	; 0x3350 <_Z17handleLinkBusMsgsv+0x46c>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	c5 01       	movw	r24, r10
    3934:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
    3938:	e2 cf       	rjmp	.-60     	; 0x38fe <_Z17handleLinkBusMsgsv+0xa1a>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    393a:	2c 96       	adiw	r28, 0x0c	; 12
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	1f 91       	pop	r17
    394c:	0f 91       	pop	r16
    394e:	ff 90       	pop	r15
    3950:	ef 90       	pop	r14
    3952:	df 90       	pop	r13
    3954:	cf 90       	pop	r12
    3956:	bf 90       	pop	r11
    3958:	af 90       	pop	r10
    395a:	9f 90       	pop	r9
    395c:	8f 90       	pop	r8
    395e:	7f 90       	pop	r7
    3960:	6f 90       	pop	r6
    3962:	5f 90       	pop	r5
    3964:	4f 90       	pop	r4
    3966:	3f 90       	pop	r3
    3968:	2f 90       	pop	r2
    396a:	08 95       	ret

0000396c <_Z10processKeyc>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    396c:	cf 92       	push	r12
    396e:	df 92       	push	r13
    3970:	ef 92       	push	r14
    3972:	ff 92       	push	r15
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	1f 92       	push	r1
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    397e:	84 34       	cpi	r24, 0x44	; 68
    3980:	39 f4       	brne	.+14     	; 0x3990 <_Z10processKeyc+0x24>
		{
			g_DTMF_unlocked = FALSE;
    3982:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    3986:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    398a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    398e:	ef c3       	rjmp	.+2014   	; 0x416e <_Z10processKeyc+0x802>
		}

		if(!g_DTMF_unlocked)
    3990:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_DTMF_unlocked>
    3994:	91 11       	cpse	r25, r1
    3996:	07 c0       	rjmp	.+14     	; 0x39a6 <_Z10processKeyc+0x3a>
		{
			state = STATE_CHECK_PASSWORD;
    3998:	21 e1       	ldi	r18, 0x11	; 17
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39a0:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    39a4:	7a c3       	rjmp	.+1780   	; 0x409a <_Z10processKeyc+0x72e>
		}
		else
		{
			if(key == '*')
    39a6:	8a 32       	cpi	r24, 0x2A	; 42
    39a8:	a9 f4       	brne	.+42     	; 0x39d4 <_Z10processKeyc+0x68>
			{
				state = STATE_SENTENCE_START;
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    39b6:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    39ba:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE12stringLength>
				value = 0;
    39be:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE5value+0x1>
    39c2:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZZ10processKeycE5value>
				digits = 0;
    39c6:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    39ca:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    39ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_DTMF_unlocked>
    39d2:	cd c3       	rjmp	.+1946   	; 0x416e <_Z10processKeyc+0x802>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    39d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    39d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39dc:	31 97       	sbiw	r30, 0x01	; 1
    39de:	e3 31       	cpi	r30, 0x13	; 19
    39e0:	f1 05       	cpc	r31, r1
    39e2:	08 f0       	brcs	.+2      	; 0x39e6 <_Z10processKeyc+0x7a>
    39e4:	c4 c3       	rjmp	.+1928   	; 0x416e <_Z10processKeyc+0x802>
    39e6:	28 2f       	mov	r18, r24
    39e8:	eb 56       	subi	r30, 0x6B	; 107
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    39f0:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    39f4:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE12stringLength>
				value = 0;
    39f8:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE5value+0x1>
    39fc:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZZ10processKeycE5value>
				digits = 0;
    3a00:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3a04:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    3a08:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_DTMF_unlocked>
    3a0c:	88 23       	and	r24, r24
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <_Z10processKeyc+0xa6>
    3a10:	ae c3       	rjmp	.+1884   	; 0x416e <_Z10processKeyc+0x802>
				{
					if(key == 'A')
    3a12:	21 34       	cpi	r18, 0x41	; 65
    3a14:	39 f4       	brne	.+14     	; 0x3a24 <_Z10processKeyc+0xb8>
					{
						state = STATE_A;
    3a16:	82 e0       	ldi	r24, 0x02	; 2
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a1e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a22:	a5 c3       	rjmp	.+1866   	; 0x416e <_Z10processKeyc+0x802>
					}
					else if(key == 'B')
    3a24:	22 34       	cpi	r18, 0x42	; 66
    3a26:	39 f4       	brne	.+14     	; 0x3a36 <_Z10processKeyc+0xca>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    3a28:	82 e1       	ldi	r24, 0x12	; 18
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a30:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a34:	9c c3       	rjmp	.+1848   	; 0x416e <_Z10processKeyc+0x802>
					}
					else if(key == 'C')
    3a36:	23 34       	cpi	r18, 0x43	; 67
    3a38:	39 f4       	brne	.+14     	; 0x3a48 <_Z10processKeyc+0xdc>
					{
						state = STATE_C;
    3a3a:	87 e0       	ldi	r24, 0x07	; 7
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a42:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a46:	93 c3       	rjmp	.+1830   	; 0x416e <_Z10processKeyc+0x802>
					}
					else if(key != '*')
    3a48:	2a 32       	cpi	r18, 0x2A	; 42
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <_Z10processKeyc+0xe2>
    3a4c:	90 c3       	rjmp	.+1824   	; 0x416e <_Z10processKeyc+0x802>
					{
						value = key - '0';
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	20 53       	subi	r18, 0x30	; 48
    3a52:	31 09       	sbc	r19, r1
    3a54:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3a58:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							if(g_AM_enabled)
    3a5c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_AM_enabled>
    3a60:	81 11       	cpse	r24, r1
							{
								setupPortsForF1975();
    3a62:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z18setupPortsForF1975v>
							}
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    3a66:	83 e1       	ldi	r24, 0x13	; 19
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a6e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a72:	7d c3       	rjmp	.+1786   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_A:
			{
				state = STATE_SHUTDOWN;
    3a74:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a78:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>

				if(key == '0')
    3a7c:	80 33       	cpi	r24, 0x30	; 48
    3a7e:	39 f4       	brne	.+14     	; 0x3a8e <_Z10processKeyc+0x122>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    3a80:	83 e0       	ldi	r24, 0x03	; 3
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a88:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a8c:	70 c3       	rjmp	.+1760   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '1')
    3a8e:	81 33       	cpi	r24, 0x31	; 49
    3a90:	39 f4       	brne	.+14     	; 0x3aa0 <_Z10processKeyc+0x134>
				{
					state = STATE_START_TRANSMISSIONS;
    3a92:	84 e0       	ldi	r24, 0x04	; 4
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a9a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a9e:	67 c3       	rjmp	.+1742   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '2')
    3aa0:	82 33       	cpi	r24, 0x32	; 50
    3aa2:	39 f4       	brne	.+14     	; 0x3ab2 <_Z10processKeyc+0x146>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    3aa4:	85 e0       	ldi	r24, 0x05	; 5
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3aac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ab0:	5e c3       	rjmp	.+1724   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '3')
    3ab2:	83 33       	cpi	r24, 0x33	; 51
    3ab4:	39 f4       	brne	.+14     	; 0x3ac4 <_Z10processKeyc+0x158>
				{
					state = STATE_START_TRANSMITTING_NOW;
    3ab6:	86 e0       	ldi	r24, 0x06	; 6
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3abe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ac2:	55 c3       	rjmp	.+1706   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key == '8') && setPasswordEnabled)
    3ac4:	88 33       	cpi	r24, 0x38	; 56
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <_Z10processKeyc+0x15e>
    3ac8:	52 c3       	rjmp	.+1700   	; 0x416e <_Z10processKeyc+0x802>
    3aca:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <_ZZ10processKeycE18setPasswordEnabled>
    3ace:	88 23       	and	r24, r24
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <_Z10processKeyc+0x168>
    3ad2:	4d c3       	rjmp	.+1690   	; 0x416e <_Z10processKeyc+0x802>
				{
					state = STATE_SET_PASSWORD;
    3ad4:	80 e1       	ldi	r24, 0x10	; 16
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3adc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ae0:	46 c3       	rjmp	.+1676   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    3ae2:	80 ed       	ldi	r24, 0xD0	; 208
    3ae4:	82 0f       	add	r24, r18
    3ae6:	8a 30       	cpi	r24, 0x0A	; 10
    3ae8:	08 f5       	brcc	.+66     	; 0x3b2c <_Z10processKeyc+0x1c0>
				{
					value *= 10;
					value += key - '0';
    3aea:	40 91 75 04 	lds	r20, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3aee:	50 91 76 04 	lds	r21, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3af2:	ca 01       	movw	r24, r20
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	44 0f       	add	r20, r20
    3afa:	55 1f       	adc	r21, r21
    3afc:	44 0f       	add	r20, r20
    3afe:	55 1f       	adc	r21, r21
    3b00:	44 0f       	add	r20, r20
    3b02:	55 1f       	adc	r21, r21
    3b04:	48 0f       	add	r20, r24
    3b06:	59 1f       	adc	r21, r25
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	20 53       	subi	r18, 0x30	; 48
    3b0c:	31 09       	sbc	r19, r1
    3b0e:	42 0f       	add	r20, r18
    3b10:	53 1f       	adc	r21, r19
    3b12:	50 93 76 04 	sts	0x0476, r21	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3b16:	40 93 75 04 	sts	0x0475, r20	; 0x800475 <_ZZ10processKeycE5value>
					digits++;
    3b1a:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZZ10processKeycE6digits>
    3b1e:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3b28:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE6digits>
				}

				if(digits >= 2)
    3b2c:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZZ10processKeycE6digits>
    3b30:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3b34:	02 97       	sbiw	r24, 0x02	; 2
    3b36:	0c f4       	brge	.+2      	; 0x3b3a <_Z10processKeyc+0x1ce>
    3b38:	1a c3       	rjmp	.+1588   	; 0x416e <_Z10processKeyc+0x802>
				{
					state = STATE_SHUTDOWN;
    3b3a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b3e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    3b42:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    3b46:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3b4a:	98 13       	cpse	r25, r24
    3b4c:	10 c3       	rjmp	.+1568   	; 0x416e <_Z10processKeyc+0x802>
					{
						state = STATE_SENTENCE_START;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b56:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b5a:	09 c3       	rjmp	.+1554   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    3b5c:	83 32       	cpi	r24, 0x23	; 35
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <_Z10processKeyc+0x1f6>
    3b60:	06 c3       	rjmp	.+1548   	; 0x416e <_Z10processKeyc+0x802>
				{
					stopEventNow(PROGRAMMATIC);
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	0e 94 80 13 	call	0x2700	; 0x2700 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    3b68:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b6c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b70:	fe c2       	rjmp	.+1532   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    3b72:	83 32       	cpi	r24, 0x23	; 35
    3b74:	09 f0       	breq	.+2      	; 0x3b78 <_Z10processKeyc+0x20c>
    3b76:	fb c2       	rjmp	.+1526   	; 0x416e <_Z10processKeyc+0x802>
				{
					startEventNow(PROGRAMMATIC);
    3b78:	82 e0       	ldi	r24, 0x02	; 2
    3b7a:	0e 94 2e 13 	call	0x265c	; 0x265c <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    3b7e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b82:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b86:	f3 c2       	rjmp	.+1510   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    3b88:	83 32       	cpi	r24, 0x23	; 35
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <_Z10processKeyc+0x222>
    3b8c:	f0 c2       	rjmp	.+1504   	; 0x416e <_Z10processKeyc+0x802>
				{
					startEventUsingRTC();
    3b8e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    3b92:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b96:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b9a:	e9 c2       	rjmp	.+1490   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    3b9c:	83 32       	cpi	r24, 0x23	; 35
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <_Z10processKeyc+0x236>
    3ba0:	e6 c2       	rjmp	.+1484   	; 0x416e <_Z10processKeyc+0x802>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3ba2:	61 e0       	ldi	r22, 0x01	; 1
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    3bac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bb0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3bb4:	dc c2       	rjmp	.+1464   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    3bb6:	81 33       	cpi	r24, 0x31	; 49
    3bb8:	39 f4       	brne	.+14     	; 0x3bc8 <_Z10processKeyc+0x25c>
				{
					state = STATE_RECEIVING_CALLSIGN;
    3bba:	88 e0       	ldi	r24, 0x08	; 8
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bc2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3bc6:	d3 c2       	rjmp	.+1446   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '2')
    3bc8:	82 33       	cpi	r24, 0x32	; 50
    3bca:	39 f4       	brne	.+14     	; 0x3bda <_Z10processKeyc+0x26e>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    3bcc:	89 e0       	ldi	r24, 0x09	; 9
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bd4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3bd8:	ca c2       	rjmp	.+1428   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    3bda:	83 33       	cpi	r24, 0x33	; 51
    3bdc:	39 f4       	brne	.+14     	; 0x3bec <_Z10processKeyc+0x280>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    3bde:	8d e0       	ldi	r24, 0x0D	; 13
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3be6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3bea:	c1 c2       	rjmp	.+1410   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '4')
    3bec:	84 33       	cpi	r24, 0x34	; 52
    3bee:	39 f4       	brne	.+14     	; 0x3bfe <_Z10processKeyc+0x292>
				{
					state = STATE_RECEIVING_START_TIME;
    3bf0:	8a e0       	ldi	r24, 0x0A	; 10
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bf8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3bfc:	b8 c2       	rjmp	.+1392   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '5')
    3bfe:	85 33       	cpi	r24, 0x35	; 53
    3c00:	39 f4       	brne	.+14     	; 0x3c10 <_Z10processKeyc+0x2a4>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    3c02:	8b e0       	ldi	r24, 0x0B	; 11
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c0a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3c0e:	af c2       	rjmp	.+1374   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '6')
    3c10:	86 33       	cpi	r24, 0x36	; 54
    3c12:	69 f4       	brne	.+26     	; 0x3c2e <_Z10processKeyc+0x2c2>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    3c14:	8c e0       	ldi	r24, 0x0C	; 12
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c1c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3c28:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE6digits>
    3c2c:	a0 c2       	rjmp	.+1344   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == '9')
    3c2e:	89 33       	cpi	r24, 0x39	; 57
    3c30:	39 f4       	brne	.+14     	; 0x3c40 <_Z10processKeyc+0x2d4>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    3c32:	8e e0       	ldi	r24, 0x0E	; 14
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c3a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3c3e:	97 c2       	rjmp	.+1326   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == 'B')
    3c40:	82 34       	cpi	r24, 0x42	; 66
    3c42:	39 f4       	brne	.+14     	; 0x3c52 <_Z10processKeyc+0x2e6>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
    3c44:	8f e0       	ldi	r24, 0x0F	; 15
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c4c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3c50:	8e c2       	rjmp	.+1308   	; 0x416e <_Z10processKeyc+0x802>
				}
				else
				{
					state = STATE_SHUTDOWN;
    3c52:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c56:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3c5a:	89 c2       	rjmp	.+1298   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    3c5c:	83 32       	cpi	r24, 0x23	; 35
    3c5e:	c1 f4       	brne	.+48     	; 0x3c90 <_Z10processKeyc+0x324>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    3c60:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE12stringLength>
    3c64:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3c68:	04 97       	sbiw	r24, 0x04	; 4
    3c6a:	6c f0       	brlt	.+26     	; 0x3c86 <_Z10processKeyc+0x31a>
					{
						strcpy((char*)g_unlockCode, receivedString);
    3c6c:	6d e5       	ldi	r22, 0x5D	; 93
    3c6e:	74 e0       	ldi	r23, 0x04	; 4
    3c70:	86 e2       	ldi	r24, 0x26	; 38
    3c72:	95 e0       	ldi	r25, 0x05	; 5
    3c74:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3c78:	46 e2       	ldi	r20, 0x26	; 38
    3c7a:	55 e0       	ldi	r21, 0x05	; 5
    3c7c:	6e e0       	ldi	r22, 0x0E	; 14
    3c7e:	8f e7       	ldi	r24, 0x7F	; 127
    3c80:	95 e0       	ldi	r25, 0x05	; 5
    3c82:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3c86:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c8a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3c8e:	6f c2       	rjmp	.+1246   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3c90:	80 ed       	ldi	r24, 0xD0	; 208
    3c92:	82 0f       	add	r24, r18
    3c94:	8a 30       	cpi	r24, 0x0A	; 10
    3c96:	08 f0       	brcs	.+2      	; 0x3c9a <_Z10processKeyc+0x32e>
    3c98:	6a c2       	rjmp	.+1236   	; 0x416e <_Z10processKeyc+0x802>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    3c9a:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE12stringLength>
    3c9e:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3ca2:	89 30       	cpi	r24, 0x09	; 9
    3ca4:	91 05       	cpc	r25, r1
    3ca6:	0c f0       	brlt	.+2      	; 0x3caa <_Z10processKeyc+0x33e>
    3ca8:	62 c2       	rjmp	.+1220   	; 0x416e <_Z10processKeyc+0x802>
					{
						receivedString[stringLength++] = key;
    3caa:	ac 01       	movw	r20, r24
    3cac:	4f 5f       	subi	r20, 0xFF	; 255
    3cae:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb0:	50 93 78 04 	sts	0x0478, r21	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3cb4:	40 93 77 04 	sts	0x0477, r20	; 0x800477 <_ZZ10processKeycE12stringLength>
    3cb8:	fc 01       	movw	r30, r24
    3cba:	e3 5a       	subi	r30, 0xA3	; 163
    3cbc:	fb 4f       	sbci	r31, 0xFB	; 251
    3cbe:	20 83       	st	Z, r18
						receivedString[stringLength] = '\0';
    3cc0:	fa 01       	movw	r30, r20
    3cc2:	e3 5a       	subi	r30, 0xA3	; 163
    3cc4:	fb 4f       	sbci	r31, 0xFB	; 251
    3cc6:	10 82       	st	Z, r1
    3cc8:	52 c2       	rjmp	.+1188   	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    3cca:	83 32       	cpi	r24, 0x23	; 35
    3ccc:	e1 f4       	brne	.+56     	; 0x3d06 <_Z10processKeyc+0x39a>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    3cce:	ed e5       	ldi	r30, 0x5D	; 93
    3cd0:	f4 e0       	ldi	r31, 0x04	; 4
    3cd2:	01 90       	ld	r0, Z+
    3cd4:	00 20       	and	r0, r0
    3cd6:	e9 f7       	brne	.-6      	; 0x3cd2 <_Z10processKeyc+0x366>
    3cd8:	31 97       	sbiw	r30, 0x01	; 1
    3cda:	ed 55       	subi	r30, 0x5D	; 93
    3cdc:	f4 40       	sbci	r31, 0x04	; 4
    3cde:	75 97       	sbiw	r30, 0x15	; 21
    3ce0:	68 f4       	brcc	.+26     	; 0x3cfc <_Z10processKeyc+0x390>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    3ce2:	6d e5       	ldi	r22, 0x5D	; 93
    3ce4:	74 e0       	ldi	r23, 0x04	; 4
    3ce6:	8a e0       	ldi	r24, 0x0A	; 10
    3ce8:	95 e0       	ldi	r25, 0x05	; 5
    3cea:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    3cee:	4a e0       	ldi	r20, 0x0A	; 10
    3cf0:	55 e0       	ldi	r21, 0x05	; 5
    3cf2:	6b e0       	ldi	r22, 0x0B	; 11
    3cf4:	8f e7       	ldi	r24, 0x7F	; 127
    3cf6:	95 e0       	ldi	r25, 0x05	; 5
    3cf8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3cfc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3d00:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3d04:	34 c2       	rjmp	.+1128   	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3d06:	80 ed       	ldi	r24, 0xD0	; 208
    3d08:	82 0f       	add	r24, r18
    3d0a:	8a 30       	cpi	r24, 0x0A	; 10
    3d0c:	08 f0       	brcs	.+2      	; 0x3d10 <_Z10processKeyc+0x3a4>
    3d0e:	2f c2       	rjmp	.+1118   	; 0x416e <_Z10processKeyc+0x802>
				{
					if(digits)
    3d10:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZZ10processKeycE6digits>
    3d14:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3d18:	89 2b       	or	r24, r25
    3d1a:	c1 f1       	breq	.+112    	; 0x3d8c <_Z10processKeyc+0x420>
					{
						value = value * 10 + (key - '0');
    3d1c:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3d20:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3d24:	ac 01       	movw	r20, r24
    3d26:	44 0f       	add	r20, r20
    3d28:	55 1f       	adc	r21, r21
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	88 0f       	add	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	84 0f       	add	r24, r20
    3d38:	95 1f       	adc	r25, r21
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	20 53       	subi	r18, 0x30	; 48
    3d3e:	31 09       	sbc	r19, r1
    3d40:	28 0f       	add	r18, r24
    3d42:	39 1f       	adc	r19, r25
    3d44:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3d48:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    3d4c:	27 32       	cpi	r18, 0x27	; 39
    3d4e:	31 05       	cpc	r19, r1
    3d50:	c4 f4       	brge	.+48     	; 0x3d82 <_Z10processKeyc+0x416>
    3d52:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE12stringLength>
    3d56:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3d5a:	84 31       	cpi	r24, 0x14	; 20
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	8c f4       	brge	.+34     	; 0x3d82 <_Z10processKeyc+0x416>
						{
							receivedString[stringLength] = keyMorse[value];
    3d60:	fc 01       	movw	r30, r24
    3d62:	e3 5a       	subi	r30, 0xA3	; 163
    3d64:	fb 4f       	sbci	r31, 0xFB	; 251
    3d66:	d9 01       	movw	r26, r18
    3d68:	a7 5a       	subi	r26, 0xA7	; 167
    3d6a:	bd 4f       	sbci	r27, 0xFD	; 253
    3d6c:	2c 91       	ld	r18, X
    3d6e:	20 83       	st	Z, r18
							stringLength++;
    3d70:	01 96       	adiw	r24, 0x01	; 1
    3d72:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3d76:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	e3 5a       	subi	r30, 0xA3	; 163
    3d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    3d80:	10 82       	st	Z, r1
						}

						digits = 0;
    3d82:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3d86:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ10processKeycE6digits>
    3d8a:	f1 c1       	rjmp	.+994    	; 0x416e <_Z10processKeyc+0x802>
					}
					else
					{
						value = key - '0';
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	20 53       	subi	r18, 0x30	; 48
    3d90:	31 09       	sbc	r19, r1
    3d92:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3d96:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZZ10processKeycE5value>
						digits = 1;
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    3da2:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE6digits>
    3da6:	e3 c1       	rjmp	.+966    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    3da8:	83 32       	cpi	r24, 0x23	; 35
    3daa:	f9 f4       	brne	.+62     	; 0x3dea <_Z10processKeyc+0x47e>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    3dac:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3db0:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3db4:	82 31       	cpi	r24, 0x12	; 18
    3db6:	91 05       	cpc	r25, r1
    3db8:	98 f4       	brcc	.+38     	; 0x3de0 <_Z10processKeyc+0x474>
					{
						Fox_t holdFox = (Fox_t)value;
    3dba:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3dbc:	ae 01       	movw	r20, r28
    3dbe:	4f 5f       	subi	r20, 0xFF	; 255
    3dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc2:	60 e1       	ldi	r22, 0x10	; 16
    3dc4:	8f e7       	ldi	r24, 0x7F	; 127
    3dc6:	95 e0       	ldi	r25, 0x05	; 5
    3dc8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3dcc:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    3dd0:	99 81       	ldd	r25, Y+1	; 0x01
    3dd2:	98 17       	cp	r25, r24
    3dd4:	29 f0       	breq	.+10     	; 0x3de0 <_Z10processKeyc+0x474>
						{
							setupForFox(&holdFox, START_NOTHING);
    3dd6:	63 e0       	ldi	r22, 0x03	; 3
    3dd8:	ce 01       	movw	r24, r28
    3dda:	01 96       	adiw	r24, 0x01	; 1
    3ddc:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
					state = STATE_SHUTDOWN;
    3de0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3de4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3de8:	c2 c1       	rjmp	.+900    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3dea:	80 ed       	ldi	r24, 0xD0	; 208
    3dec:	82 0f       	add	r24, r18
    3dee:	8a 30       	cpi	r24, 0x0A	; 10
    3df0:	08 f0       	brcs	.+2      	; 0x3df4 <_Z10processKeyc+0x488>
    3df2:	bd c1       	rjmp	.+890    	; 0x416e <_Z10processKeyc+0x802>
				{
					value *= 10;
					value += key - '0';
    3df4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3df8:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3dfc:	ac 01       	movw	r20, r24
    3dfe:	44 0f       	add	r20, r20
    3e00:	55 1f       	adc	r21, r21
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	84 0f       	add	r24, r20
    3e10:	95 1f       	adc	r25, r21
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	20 53       	subi	r18, 0x30	; 48
    3e16:	31 09       	sbc	r19, r1
    3e18:	82 0f       	add	r24, r18
    3e1a:	93 1f       	adc	r25, r19
    3e1c:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3e20:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ10processKeycE5value>
    3e24:	a4 c1       	rjmp	.+840    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    3e26:	83 32       	cpi	r24, 0x23	; 35
    3e28:	f9 f4       	brne	.+62     	; 0x3e68 <_Z10processKeyc+0x4fc>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    3e2a:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <g_utc_offset>
    3e2e:	41 95       	neg	r20
    3e30:	6e e6       	ldi	r22, 0x6E	; 110
    3e32:	75 e0       	ldi	r23, 0x05	; 5
    3e34:	8d e5       	ldi	r24, 0x5D	; 93
    3e36:	94 e0       	ldi	r25, 0x04	; 4
    3e38:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_Z18validateTimeStringPcPma>
    3e3c:	6b 01       	movw	r12, r22
    3e3e:	7c 01       	movw	r14, r24

					if(t)
    3e40:	61 15       	cp	r22, r1
    3e42:	71 05       	cpc	r23, r1
    3e44:	81 05       	cpc	r24, r1
    3e46:	91 05       	cpc	r25, r1
    3e48:	51 f0       	breq	.+20     	; 0x3e5e <_Z10processKeyc+0x4f2>
					{
						rv3028_set_epoch(t);
    3e4a:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3e4e:	c0 92 6e 05 	sts	0x056E, r12	; 0x80056e <g_current_epoch>
    3e52:	d0 92 6f 05 	sts	0x056F, r13	; 0x80056f <g_current_epoch+0x1>
    3e56:	e0 92 70 05 	sts	0x0570, r14	; 0x800570 <g_current_epoch+0x2>
    3e5a:	f0 92 71 05 	sts	0x0571, r15	; 0x800571 <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    3e5e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3e62:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3e66:	83 c1       	rjmp	.+774    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3e68:	80 ed       	ldi	r24, 0xD0	; 208
    3e6a:	82 0f       	add	r24, r18
    3e6c:	8a 30       	cpi	r24, 0x0A	; 10
    3e6e:	08 f0       	brcs	.+2      	; 0x3e72 <_Z10processKeyc+0x506>
    3e70:	7e c1       	rjmp	.+764    	; 0x416e <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3e72:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE12stringLength>
    3e76:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3e7a:	88 32       	cpi	r24, 0x28	; 40
    3e7c:	91 05       	cpc	r25, r1
    3e7e:	0c f0       	brlt	.+2      	; 0x3e82 <_Z10processKeyc+0x516>
    3e80:	76 c1       	rjmp	.+748    	; 0x416e <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    3e82:	fc 01       	movw	r30, r24
    3e84:	e3 5a       	subi	r30, 0xA3	; 163
    3e86:	fb 4f       	sbci	r31, 0xFB	; 251
    3e88:	20 83       	st	Z, r18
						stringLength++;
    3e8a:	01 96       	adiw	r24, 0x01	; 1
    3e8c:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3e90:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3e94:	fc 01       	movw	r30, r24
    3e96:	e3 5a       	subi	r30, 0xA3	; 163
    3e98:	fb 4f       	sbci	r31, 0xFB	; 251
    3e9a:	10 82       	st	Z, r1
    3e9c:	68 c1       	rjmp	.+720    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    3e9e:	83 32       	cpi	r24, 0x23	; 35
    3ea0:	39 f5       	brne	.+78     	; 0x3ef0 <_Z10processKeyc+0x584>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3ea2:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <g_utc_offset>
    3ea6:	41 95       	neg	r20
    3ea8:	6a e6       	ldi	r22, 0x6A	; 106
    3eaa:	75 e0       	ldi	r23, 0x05	; 5
    3eac:	8d e5       	ldi	r24, 0x5D	; 93
    3eae:	94 e0       	ldi	r25, 0x04	; 4
    3eb0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_Z18validateTimeStringPcPma>

					if(s)
    3eb4:	61 15       	cp	r22, r1
    3eb6:	71 05       	cpc	r23, r1
    3eb8:	81 05       	cpc	r24, r1
    3eba:	91 05       	cpc	r25, r1
    3ebc:	a1 f0       	breq	.+40     	; 0x3ee6 <_Z10processKeyc+0x57a>
					{
						g_event_start_epoch = s;
    3ebe:	60 93 6a 05 	sts	0x056A, r22	; 0x80056a <g_event_start_epoch>
    3ec2:	70 93 6b 05 	sts	0x056B, r23	; 0x80056b <g_event_start_epoch+0x1>
    3ec6:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <g_event_start_epoch+0x2>
    3eca:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3ece:	4a e6       	ldi	r20, 0x6A	; 106
    3ed0:	55 e0       	ldi	r21, 0x05	; 5
    3ed2:	64 e1       	ldi	r22, 0x14	; 20
    3ed4:	8f e7       	ldi	r24, 0x7F	; 127
    3ed6:	95 e0       	ldi	r25, 0x05	; 5
    3ed8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3edc:	62 e0       	ldi	r22, 0x02	; 2
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    3ee6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3eea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3eee:	3f c1       	rjmp	.+638    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3ef0:	80 ed       	ldi	r24, 0xD0	; 208
    3ef2:	82 0f       	add	r24, r18
    3ef4:	8a 30       	cpi	r24, 0x0A	; 10
    3ef6:	08 f0       	brcs	.+2      	; 0x3efa <_Z10processKeyc+0x58e>
    3ef8:	3a c1       	rjmp	.+628    	; 0x416e <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3efa:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE12stringLength>
    3efe:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3f02:	88 32       	cpi	r24, 0x28	; 40
    3f04:	91 05       	cpc	r25, r1
    3f06:	0c f0       	brlt	.+2      	; 0x3f0a <_Z10processKeyc+0x59e>
    3f08:	32 c1       	rjmp	.+612    	; 0x416e <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	e3 5a       	subi	r30, 0xA3	; 163
    3f0e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f10:	20 83       	st	Z, r18
						stringLength++;
    3f12:	01 96       	adiw	r24, 0x01	; 1
    3f14:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3f18:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	e3 5a       	subi	r30, 0xA3	; 163
    3f20:	fb 4f       	sbci	r31, 0xFB	; 251
    3f22:	10 82       	st	Z, r1
    3f24:	24 c1       	rjmp	.+584    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    3f26:	83 32       	cpi	r24, 0x23	; 35
    3f28:	39 f5       	brne	.+78     	; 0x3f78 <_Z10processKeyc+0x60c>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3f2a:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <g_utc_offset>
    3f2e:	41 95       	neg	r20
    3f30:	66 e6       	ldi	r22, 0x66	; 102
    3f32:	75 e0       	ldi	r23, 0x05	; 5
    3f34:	8d e5       	ldi	r24, 0x5D	; 93
    3f36:	94 e0       	ldi	r25, 0x04	; 4
    3f38:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_Z18validateTimeStringPcPma>

					if(f)
    3f3c:	61 15       	cp	r22, r1
    3f3e:	71 05       	cpc	r23, r1
    3f40:	81 05       	cpc	r24, r1
    3f42:	91 05       	cpc	r25, r1
    3f44:	a1 f0       	breq	.+40     	; 0x3f6e <_Z10processKeyc+0x602>
					{
						g_event_finish_epoch = f;
    3f46:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <g_event_finish_epoch>
    3f4a:	70 93 67 05 	sts	0x0567, r23	; 0x800567 <g_event_finish_epoch+0x1>
    3f4e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <g_event_finish_epoch+0x2>
    3f52:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3f56:	46 e6       	ldi	r20, 0x66	; 102
    3f58:	55 e0       	ldi	r21, 0x05	; 5
    3f5a:	65 e1       	ldi	r22, 0x15	; 21
    3f5c:	8f e7       	ldi	r24, 0x7F	; 127
    3f5e:	95 e0       	ldi	r25, 0x05	; 5
    3f60:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3f64:	62 e0       	ldi	r22, 0x02	; 2
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    3f6e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f72:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3f76:	fb c0       	rjmp	.+502    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3f78:	80 ed       	ldi	r24, 0xD0	; 208
    3f7a:	82 0f       	add	r24, r18
    3f7c:	8a 30       	cpi	r24, 0x0A	; 10
    3f7e:	08 f0       	brcs	.+2      	; 0x3f82 <_Z10processKeyc+0x616>
    3f80:	f6 c0       	rjmp	.+492    	; 0x416e <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3f82:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE12stringLength>
    3f86:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3f8a:	88 32       	cpi	r24, 0x28	; 40
    3f8c:	91 05       	cpc	r25, r1
    3f8e:	0c f0       	brlt	.+2      	; 0x3f92 <_Z10processKeyc+0x626>
    3f90:	ee c0       	rjmp	.+476    	; 0x416e <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    3f92:	fc 01       	movw	r30, r24
    3f94:	e3 5a       	subi	r30, 0xA3	; 163
    3f96:	fb 4f       	sbci	r31, 0xFB	; 251
    3f98:	20 83       	st	Z, r18
						stringLength++;
    3f9a:	01 96       	adiw	r24, 0x01	; 1
    3f9c:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <_ZZ10processKeycE12stringLength+0x1>
    3fa0:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	e3 5a       	subi	r30, 0xA3	; 163
    3fa8:	fb 4f       	sbci	r31, 0xFB	; 251
    3faa:	10 82       	st	Z, r1
    3fac:	e0 c0       	rjmp	.+448    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    3fae:	83 32       	cpi	r24, 0x23	; 35
    3fb0:	e9 f4       	brne	.+58     	; 0x3fec <_Z10processKeyc+0x680>
				{
					if((value >= 0) && (value < 24))
    3fb2:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3fb6:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3fba:	88 31       	cpi	r24, 0x18	; 24
    3fbc:	91 05       	cpc	r25, r1
    3fbe:	88 f4       	brcc	.+34     	; 0x3fe2 <_Z10processKeyc+0x676>
					{
						int8_t hold = value * digits;
    3fc0:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <_ZZ10processKeycE6digits>
    3fc4:	98 9f       	mul	r25, r24
    3fc6:	80 2d       	mov	r24, r0
    3fc8:	11 24       	eor	r1, r1
    3fca:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    3fcc:	ae 01       	movw	r20, r28
    3fce:	4f 5f       	subi	r20, 0xFF	; 255
    3fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fd2:	66 e1       	ldi	r22, 0x16	; 22
    3fd4:	8f e7       	ldi	r24, 0x7F	; 127
    3fd6:	95 e0       	ldi	r25, 0x05	; 5
    3fd8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    3fe2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fe6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3fea:	c1 c0       	rjmp	.+386    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    3fec:	80 ed       	ldi	r24, 0xD0	; 208
    3fee:	82 0f       	add	r24, r18
    3ff0:	8a 30       	cpi	r24, 0x0A	; 10
    3ff2:	c8 f4       	brcc	.+50     	; 0x4026 <_Z10processKeyc+0x6ba>
				{
					value *= 10;
					value += key - '0';
    3ff4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    3ff8:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    3ffc:	ac 01       	movw	r20, r24
    3ffe:	44 0f       	add	r20, r20
    4000:	55 1f       	adc	r21, r21
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	88 0f       	add	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	84 0f       	add	r24, r20
    4010:	95 1f       	adc	r25, r21
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	20 53       	subi	r18, 0x30	; 48
    4016:	31 09       	sbc	r19, r1
    4018:	82 0f       	add	r24, r18
    401a:	93 1f       	adc	r25, r19
    401c:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <_ZZ10processKeycE5value+0x1>
    4020:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ10processKeycE5value>
    4024:	a4 c0       	rjmp	.+328    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if(key == 'B')
    4026:	22 34       	cpi	r18, 0x42	; 66
    4028:	09 f0       	breq	.+2      	; 0x402c <_Z10processKeyc+0x6c0>
    402a:	a1 c0       	rjmp	.+322    	; 0x416e <_Z10processKeyc+0x802>
				{
					digits = -1;
    402c:	8f ef       	ldi	r24, 0xFF	; 255
    402e:	9f ef       	ldi	r25, 0xFF	; 255
    4030:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    4034:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE6digits>
    4038:	9a c0       	rjmp	.+308    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    403a:	83 32       	cpi	r24, 0x23	; 35
    403c:	a1 f4       	brne	.+40     	; 0x4066 <_Z10processKeyc+0x6fa>
				{
					g_AM_audio_frequency = value;
    403e:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    4042:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    4046:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_AM_audio_frequency>
    404a:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    404e:	43 e6       	ldi	r20, 0x63	; 99
    4050:	55 e0       	ldi	r21, 0x05	; 5
    4052:	61 e1       	ldi	r22, 0x11	; 17
    4054:	8f e7       	ldi	r24, 0x7F	; 127
    4056:	95 e0       	ldi	r25, 0x05	; 5
    4058:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    405c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4060:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4064:	84 c0       	rjmp	.+264    	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    4066:	87 30       	cpi	r24, 0x07	; 7
    4068:	08 f0       	brcs	.+2      	; 0x406c <_Z10processKeyc+0x700>
    406a:	81 c0       	rjmp	.+258    	; 0x416e <_Z10processKeyc+0x802>
				{
					value = key - '0';
    406c:	28 2f       	mov	r18, r24
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	20 53       	subi	r18, 0x30	; 48
    4072:	31 09       	sbc	r19, r1
    4074:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <_ZZ10processKeycE5value+0x1>
    4078:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZZ10processKeycE5value>
    407c:	78 c0       	rjmp	.+240    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_GET_BATTERY_VOLTAGE:
			{
				if(key == '#')
    407e:	83 32       	cpi	r24, 0x23	; 35
    4080:	39 f4       	brne	.+14     	; 0x4090 <_Z10processKeyc+0x724>
				{
					Fox_t f = REPORT_BATTERY;
    4082:	83 e1       	ldi	r24, 0x13	; 19
    4084:	89 83       	std	Y+1, r24	; 0x01
					setupForFox(&f, START_TRANSMISSIONS_NOW);
    4086:	61 e0       	ldi	r22, 0x01	; 1
    4088:	ce 01       	movw	r24, r28
    408a:	01 96       	adiw	r24, 0x01	; 1
    408c:	0e 94 a0 10 	call	0x2140	; 0x2140 <_Z11setupForFoxP5Fox_t13EventAction_t>
				}

				state = STATE_SHUTDOWN;
    4090:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4094:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;
    4098:	6a c0       	rjmp	.+212    	; 0x416e <_Z10processKeyc+0x802>

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    409a:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <_ZZ10processKeycE6digits>
    409e:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    40a2:	a9 01       	movw	r20, r18
    40a4:	4f 5f       	subi	r20, 0xFF	; 255
    40a6:	5f 4f       	sbci	r21, 0xFF	; 255
    40a8:	50 93 74 04 	sts	0x0474, r21	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    40ac:	40 93 73 04 	sts	0x0473, r20	; 0x800473 <_ZZ10processKeycE6digits>
    40b0:	f9 01       	movw	r30, r18
    40b2:	ea 5d       	subi	r30, 0xDA	; 218
    40b4:	fa 4f       	sbci	r31, 0xFA	; 250
    40b6:	90 81       	ld	r25, Z
    40b8:	89 13       	cpse	r24, r25
    40ba:	12 c0       	rjmp	.+36     	; 0x40e0 <_Z10processKeyc+0x774>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    40bc:	e6 e2       	ldi	r30, 0x26	; 38
    40be:	f5 e0       	ldi	r31, 0x05	; 5
    40c0:	01 90       	ld	r0, Z+
    40c2:	00 20       	and	r0, r0
    40c4:	e9 f7       	brne	.-6      	; 0x40c0 <_Z10processKeyc+0x754>
    40c6:	31 97       	sbiw	r30, 0x01	; 1
    40c8:	e6 52       	subi	r30, 0x26	; 38
    40ca:	f5 40       	sbci	r31, 0x05	; 5
    40cc:	e4 17       	cp	r30, r20
    40ce:	f5 07       	cpc	r31, r21
    40d0:	09 f0       	breq	.+2      	; 0x40d4 <_Z10processKeyc+0x768>
    40d2:	4d c0       	rjmp	.+154    	; 0x416e <_Z10processKeyc+0x802>
					{
						g_DTMF_unlocked = TRUE;
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    40da:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <_ZZ10processKeycE18setPasswordEnabled>
    40de:	47 c0       	rjmp	.+142    	; 0x416e <_Z10processKeyc+0x802>
					}
				}
				else
				{
					digits = 0;
    40e0:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ10processKeycE6digits+0x1>
    40e4:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    40e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    40f0:	3e c0       	rjmp	.+124    	; 0x416e <_Z10processKeyc+0x802>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    40f2:	83 32       	cpi	r24, 0x23	; 35
    40f4:	01 f5       	brne	.+64     	; 0x4136 <_Z10processKeyc+0x7ca>
				{
					if(value == 0)
    40f6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    40fa:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	41 f4       	brne	.+16     	; 0x4112 <_Z10processKeyc+0x7a6>
					{
						setAtten(0);
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 11 05 	call	0xa22	; 0xa22 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <g_sendAMmodulationConstantly>
    4110:	0d c0       	rjmp	.+26     	; 0x412c <_Z10processKeyc+0x7c0>
					}
					else if(value > 315)
    4112:	8c 33       	cpi	r24, 0x3C	; 60
    4114:	21 e0       	ldi	r18, 0x01	; 1
    4116:	92 07       	cpc	r25, r18
    4118:	3c f0       	brlt	.+14     	; 0x4128 <_Z10processKeyc+0x7bc>
					{
						g_sendAMmodulationConstantly = FALSE;
    411a:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    411e:	8b e3       	ldi	r24, 0x3B	; 59
    4120:	91 e0       	ldi	r25, 0x01	; 1
    4122:	0e 94 11 05 	call	0xa22	; 0xa22 <_Z8setAttenj>
    4126:	02 c0       	rjmp	.+4      	; 0x412c <_Z10processKeyc+0x7c0>
					}
					else
					{
						setAtten(value);
    4128:	0e 94 11 05 	call	0xa22	; 0xa22 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    412c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4130:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4134:	1c c0       	rjmp	.+56     	; 0x416e <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4136:	80 ed       	ldi	r24, 0xD0	; 208
    4138:	82 0f       	add	r24, r18
    413a:	8a 30       	cpi	r24, 0x0A	; 10
    413c:	c0 f4       	brcc	.+48     	; 0x416e <_Z10processKeyc+0x802>
				{
					value *= 10;
					value += key - '0';
    413e:	40 91 75 04 	lds	r20, 0x0475	; 0x800475 <_ZZ10processKeycE5value>
    4142:	50 91 76 04 	lds	r21, 0x0476	; 0x800476 <_ZZ10processKeycE5value+0x1>
    4146:	ca 01       	movw	r24, r20
    4148:	88 0f       	add	r24, r24
    414a:	99 1f       	adc	r25, r25
    414c:	44 0f       	add	r20, r20
    414e:	55 1f       	adc	r21, r21
    4150:	44 0f       	add	r20, r20
    4152:	55 1f       	adc	r21, r21
    4154:	44 0f       	add	r20, r20
    4156:	55 1f       	adc	r21, r21
    4158:	84 0f       	add	r24, r20
    415a:	95 1f       	adc	r25, r21
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	20 53       	subi	r18, 0x30	; 48
    4160:	31 09       	sbc	r19, r1
    4162:	82 0f       	add	r24, r18
    4164:	93 1f       	adc	r25, r19
    4166:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <_ZZ10processKeycE5value+0x1>
    416a:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    416e:	0f 90       	pop	r0
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	ff 90       	pop	r15
    4176:	ef 90       	pop	r14
    4178:	df 90       	pop	r13
    417a:	cf 90       	pop	r12
    417c:	08 95       	ret

0000417e <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    417e:	2f 92       	push	r2
    4180:	3f 92       	push	r3
    4182:	4f 92       	push	r4
    4184:	5f 92       	push	r5
    4186:	6f 92       	push	r6
    4188:	7f 92       	push	r7
    418a:	8f 92       	push	r8
    418c:	9f 92       	push	r9
    418e:	af 92       	push	r10
    4190:	bf 92       	push	r11
    4192:	cf 92       	push	r12
    4194:	df 92       	push	r13
    4196:	ef 92       	push	r14
    4198:	ff 92       	push	r15
    419a:	0f 93       	push	r16
    419c:	1f 93       	push	r17
    419e:	cf 93       	push	r28
    41a0:	df 93       	push	r29
    41a2:	1f 92       	push	r1
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
#if !INIT_EEPROM_ONLY
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;

		if(g_perform_EEPROM_reset)
    41a8:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <g_perform_EEPROM_reset>
    41ac:	88 23       	and	r24, r24
    41ae:	61 f0       	breq	.+24     	; 0x41c8 <_Z4loopv+0x4a>
		{
			g_perform_EEPROM_reset = FALSE;
    41b0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <g_perform_EEPROM_reset>
			ee_mgr.resetEEPROMValues();
    41b4:	8f e7       	ldi	r24, 0x7F	; 127
    41b6:	95 e0       	ldi	r25, 0x05	; 5
    41b8:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	71 ee       	ldi	r23, 0xE1	; 225
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	0e 94 81 09 	call	0x1302	; 0x1302 <_Z12linkbus_initm>
		}
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    41c8:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    41cc:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_on_the_air>
    41d0:	88 23       	and	r24, r24
    41d2:	29 f0       	breq	.+10     	; 0x41de <_Z4loopv+0x60>
    41d4:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ4loopvE7proceed>
    41d8:	88 23       	and	r24, r24
    41da:	09 f4       	brne	.+2      	; 0x41de <_Z4loopv+0x60>
    41dc:	f7 c0       	rjmp	.+494    	; 0x43cc <_Z4loopv+0x24e>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    41de:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    41e2:	81 11       	cpse	r24, r1
    41e4:	36 c1       	rjmp	.+620    	; 0x4452 <_Z4loopv+0x2d4>
			{
				proceed = FALSE;
    41e6:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ4loopvE7proceed>

				if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    41ea:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    41ee:	88 23       	and	r24, r24
    41f0:	c9 f0       	breq	.+50     	; 0x4224 <_Z4loopv+0xa6>
    41f2:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    41f6:	86 30       	cpi	r24, 0x06	; 6
    41f8:	a9 f0       	breq	.+42     	; 0x4224 <_Z4loopv+0xa6>
    41fa:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    41fe:	87 30       	cpi	r24, 0x07	; 7
    4200:	89 f0       	breq	.+34     	; 0x4224 <_Z4loopv+0xa6>
    4202:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <g_fox>
    4206:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <g_fox_counter>
    420a:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <g_fox_counter+0x1>
    420e:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_fox_id_offset>
    4212:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <g_fox_id_offset+0x1>
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	84 0f       	add	r24, r20
    421a:	95 1f       	adc	r25, r21
    421c:	28 17       	cp	r18, r24
    421e:	39 07       	cpc	r19, r25
    4220:	09 f0       	breq	.+2      	; 0x4224 <_Z4loopv+0xa6>
    4222:	17 c1       	rjmp	.+558    	; 0x4452 <_Z4loopv+0x2d4>
				{
					BOOL repeat;
					/* Choose the appropriate Morse pattern to be sent */
					if(g_fox == REPORT_BATTERY)
    4224:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    4228:	83 31       	cpi	r24, 0x13	; 19
    422a:	09 f0       	breq	.+2      	; 0x422e <_Z4loopv+0xb0>
    422c:	50 c0       	rjmp	.+160    	; 0x42ce <_Z4loopv+0x150>
					{
						sprintf(g_tempStr, "|||%dR%d/%d", g_voltage / 100, (5 + (g_voltage % 100)) / 10, g_temperature);
    422e:	40 91 23 05 	lds	r20, 0x0523	; 0x800523 <g_voltage>
    4232:	50 91 24 05 	lds	r21, 0x0524	; 0x800524 <g_voltage+0x1>
    4236:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <g_temperature>
    423a:	28 2f       	mov	r18, r24
    423c:	08 2e       	mov	r0, r24
    423e:	00 0c       	add	r0, r0
    4240:	33 0b       	sbc	r19, r19
    4242:	3f 93       	push	r19
    4244:	8f 93       	push	r24
    4246:	fa 01       	movw	r30, r20
    4248:	f6 95       	lsr	r31
    424a:	e7 95       	ror	r30
    424c:	f6 95       	lsr	r31
    424e:	e7 95       	ror	r30
    4250:	9f 01       	movw	r18, r30
    4252:	ab e7       	ldi	r26, 0x7B	; 123
    4254:	b4 e1       	ldi	r27, 0x14	; 20
    4256:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    425a:	96 95       	lsr	r25
    425c:	87 95       	ror	r24
    425e:	64 e6       	ldi	r22, 0x64	; 100
    4260:	68 9f       	mul	r22, r24
    4262:	90 01       	movw	r18, r0
    4264:	69 9f       	mul	r22, r25
    4266:	30 0d       	add	r19, r0
    4268:	11 24       	eor	r1, r1
    426a:	ca 01       	movw	r24, r20
    426c:	82 1b       	sub	r24, r18
    426e:	93 0b       	sbc	r25, r19
    4270:	9c 01       	movw	r18, r24
    4272:	2b 5f       	subi	r18, 0xFB	; 251
    4274:	3f 4f       	sbci	r19, 0xFF	; 255
    4276:	ad ec       	ldi	r26, 0xCD	; 205
    4278:	bc ec       	ldi	r27, 0xCC	; 204
    427a:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    427e:	96 95       	lsr	r25
    4280:	87 95       	ror	r24
    4282:	96 95       	lsr	r25
    4284:	87 95       	ror	r24
    4286:	96 95       	lsr	r25
    4288:	87 95       	ror	r24
    428a:	9f 93       	push	r25
    428c:	8f 93       	push	r24
    428e:	9f 01       	movw	r18, r30
    4290:	ab e7       	ldi	r26, 0x7B	; 123
    4292:	b4 e1       	ldi	r27, 0x14	; 20
    4294:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    4298:	96 95       	lsr	r25
    429a:	87 95       	ror	r24
    429c:	9f 93       	push	r25
    429e:	8f 93       	push	r24
    42a0:	83 e1       	ldi	r24, 0x13	; 19
    42a2:	92 e0       	ldi	r25, 0x02	; 2
    42a4:	9f 93       	push	r25
    42a6:	8f 93       	push	r24
    42a8:	8d eb       	ldi	r24, 0xBD	; 189
    42aa:	94 e0       	ldi	r25, 0x04	; 4
    42ac:	9f 93       	push	r25
    42ae:	8f 93       	push	r24
    42b0:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <sprintf>
						strcpy((char*)g_messages_text[PATTERN_TEXT], g_tempStr);
    42b4:	6d eb       	ldi	r22, 0xBD	; 189
    42b6:	74 e0       	ldi	r23, 0x04	; 4
    42b8:	85 ef       	ldi	r24, 0xF5	; 245
    42ba:	94 e0       	ldi	r25, 0x04	; 4
    42bc:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
						repeat = FALSE;
    42c0:	19 82       	std	Y+1, r1	; 0x01
    42c2:	0f b6       	in	r0, 0x3f	; 63
    42c4:	f8 94       	cli
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	cd bf       	out	0x3d, r28	; 61
    42cc:	12 c0       	rjmp	.+36     	; 0x42f2 <_Z4loopv+0x174>
					}
					else
					{
						strcpy((char*)g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox]);
    42ce:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	bc 01       	movw	r22, r24
    42d6:	66 0f       	add	r22, r22
    42d8:	77 1f       	adc	r23, r23
    42da:	66 0f       	add	r22, r22
    42dc:	77 1f       	adc	r23, r23
    42de:	68 0f       	add	r22, r24
    42e0:	79 1f       	adc	r23, r25
    42e2:	60 55       	subi	r22, 0x50	; 80
    42e4:	7d 4f       	sbci	r23, 0xFD	; 253
    42e6:	85 ef       	ldi	r24, 0xF5	; 245
    42e8:	94 e0       	ldi	r25, 0x04	; 4
    42ea:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strcpy>
						repeat = TRUE;
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	89 83       	std	Y+1, r24	; 0x01
					}

					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    42f2:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_pattern_codespeed>
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	82 e8       	ldi	r24, 0x82	; 130
    42fa:	9b e1       	ldi	r25, 0x1B	; 27
    42fc:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    4300:	cb 01       	movw	r24, r22
    4302:	6a e0       	ldi	r22, 0x0A	; 10
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    430a:	66 0f       	add	r22, r22
    430c:	77 1f       	adc	r23, r23
    430e:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <g_code_throttle+0x1>
    4312:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <g_code_throttle>
					makeMorse((char*)g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	be 01       	movw	r22, r28
    431c:	6f 5f       	subi	r22, 0xFF	; 255
    431e:	7f 4f       	sbci	r23, 0xFF	; 255
    4320:	85 ef       	ldi	r24, 0xF5	; 245
    4322:	94 e0       	ldi	r25, 0x04	; 4
    4324:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    4328:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <g_time_to_ID>
    432c:	81 11       	cpse	r24, r1
    432e:	0b c0       	rjmp	.+22     	; 0x4346 <_Z4loopv+0x1c8>
    4330:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <g_id_interval>
    4334:	30 91 36 05 	lds	r19, 0x0536	; 0x800536 <g_id_interval+0x1>
    4338:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_on_air_interval>
    433c:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <g_on_air_interval+0x1>
    4340:	82 17       	cp	r24, r18
    4342:	93 07       	cpc	r25, r19
    4344:	3c f1       	brlt	.+78     	; 0x4394 <_Z4loopv+0x216>
					{
						time_for_id = g_on_air_interval - (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    4346:	00 91 40 05 	lds	r16, 0x0540	; 0x800540 <g_on_air_interval>
    434a:	10 91 41 05 	lds	r17, 0x0541	; 0x800541 <g_on_air_interval+0x1>
    434e:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	8a e0       	ldi	r24, 0x0A	; 10
    4356:	95 e0       	ldi	r25, 0x05	; 5
    4358:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <_Z26timeRequiredToSendStrAtWPMPcj>
    435c:	88 5a       	subi	r24, 0xA8	; 168
    435e:	9d 4f       	sbci	r25, 0xFD	; 253
    4360:	9c 01       	movw	r18, r24
    4362:	36 95       	lsr	r19
    4364:	27 95       	ror	r18
    4366:	36 95       	lsr	r19
    4368:	27 95       	ror	r18
    436a:	36 95       	lsr	r19
    436c:	27 95       	ror	r18
    436e:	a5 ec       	ldi	r26, 0xC5	; 197
    4370:	b0 e2       	ldi	r27, 0x20	; 32
    4372:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    4376:	92 95       	swap	r25
    4378:	82 95       	swap	r24
    437a:	8f 70       	andi	r24, 0x0F	; 15
    437c:	89 27       	eor	r24, r25
    437e:	9f 70       	andi	r25, 0x0F	; 15
    4380:	89 27       	eor	r24, r25
    4382:	08 1b       	sub	r16, r24
    4384:	19 0b       	sbc	r17, r25
    4386:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    438a:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    438e:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <g_time_to_ID>
    4392:	0a c0       	rjmp	.+20     	; 0x43a8 <_Z4loopv+0x22a>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    4394:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_on_air_interval>
    4398:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <g_on_air_interval+0x1>
    439c:	8d 59       	subi	r24, 0x9D	; 157
    439e:	9f 4f       	sbci	r25, 0xFF	; 255
    43a0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    43a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    43a8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <g_on_the_air>
					g_callsign_sent = FALSE;
    43b2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <g_callsign_sent>
					g_fox_transition = FALSE;
    43b6:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    43ba:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_fox_counter>
    43be:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <g_fox_counter+0x1>
    43c2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_tone_offset+0x1>
    43c6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_tone_offset>
    43ca:	43 c0       	rjmp	.+134    	; 0x4452 <_Z4loopv+0x2d4>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    43cc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    43d0:	81 11       	cpse	r24, r1
    43d2:	1b c2       	rjmp	.+1078   	; 0x480a <_Z4loopv+0x68c>
    43d4:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <g_fox_seconds_into_interval>
    43d8:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <g_fox_seconds_into_interval+0x1>
    43dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    43e0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    43e4:	28 17       	cp	r18, r24
    43e6:	39 07       	cpc	r19, r25
    43e8:	09 f0       	breq	.+2      	; 0x43ec <_Z4loopv+0x26e>
    43ea:	0f c2       	rjmp	.+1054   	; 0x480a <_Z4loopv+0x68c>
    43ec:	ec c1       	rjmp	.+984    	; 0x47c6 <_Z4loopv+0x648>
				BOOL repeat = FALSE;
				makeMorse((char*)g_messages_text[STATION_ID], &repeat, NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5))
    43ee:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    43f2:	82 31       	cpi	r24, 0x12	; 18
    43f4:	08 f4       	brcc	.+2      	; 0x43f8 <_Z4loopv+0x27a>
    43f6:	0f c2       	rjmp	.+1054   	; 0x4816 <_Z4loopv+0x698>
    43f8:	07 c0       	rjmp	.+14     	; 0x4408 <_Z4loopv+0x28a>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    43fa:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_fox_transition>
					g_on_the_air = FALSE;
    43fe:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <g_on_the_air>
					proceed = TRUE;
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))    /* Proceed as soon as the callsign has been sent */
    4408:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    440c:	88 23       	and	r24, r24
    440e:	41 f0       	breq	.+16     	; 0x4420 <_Z4loopv+0x2a2>
    4410:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    4414:	86 30       	cpi	r24, 0x06	; 6
    4416:	21 f0       	breq	.+8      	; 0x4420 <_Z4loopv+0x2a2>
    4418:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    441c:	87 30       	cpi	r24, 0x07	; 7
    441e:	41 f4       	brne	.+16     	; 0x4430 <_Z4loopv+0x2b2>
			{
				if(g_callsign_sent)
    4420:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_callsign_sent>
    4424:	88 23       	and	r24, r24
    4426:	a9 f0       	breq	.+42     	; 0x4452 <_Z4loopv+0x2d4>
				{
					proceed = TRUE;
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ4loopvE7proceed>
    442e:	11 c0       	rjmp	.+34     	; 0x4452 <_Z4loopv+0x2d4>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    4430:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    4434:	88 30       	cpi	r24, 0x08	; 8
    4436:	08 f4       	brcc	.+2      	; 0x443a <_Z4loopv+0x2bc>
    4438:	f6 c1       	rjmp	.+1004   	; 0x4826 <_Z4loopv+0x6a8>
    443a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    443e:	82 31       	cpi	r24, 0x12	; 18
    4440:	08 f0       	brcs	.+2      	; 0x4444 <_Z4loopv+0x2c6>
    4442:	f1 c1       	rjmp	.+994    	; 0x4826 <_Z4loopv+0x6a8>
    4444:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_callsign_sent>
    4448:	81 11       	cpse	r24, r1
    444a:	ea c1       	rjmp	.+980    	; 0x4820 <_Z4loopv+0x6a2>
    444c:	ec c1       	rjmp	.+984    	; 0x4826 <_Z4loopv+0x6a8>
			{
				g_on_the_air = FALSE;
			}
			else if(g_fox != (g_fox_counter + g_fox_id_offset)) /* Turn off transmissions during times when this fox should be silent */
			{
				g_on_the_air = FALSE;
    444e:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <g_on_the_air>
			}
		}


		if(g_goertzel.SamplesReady())
    4452:	85 ee       	ldi	r24, 0xE5	; 229
    4454:	94 e0       	ldi	r25, 0x04	; 4
    4456:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN8Goertzel12SamplesReadyEv>
    445a:	88 23       	and	r24, r24
    445c:	09 f4       	brne	.+2      	; 0x4460 <_Z4loopv+0x2e2>
    445e:	36 c1       	rjmp	.+620    	; 0x46cc <_Z4loopv+0x54e>
			static char lastKey = '\0';
			static int checkCount = 10;                 /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4460:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <g_temperature_check_countdown>
    4464:	81 11       	cpse	r24, r1
    4466:	30 c0       	rjmp	.+96     	; 0x44c8 <_Z4loopv+0x34a>
			{

				setUpSampling(TEMPERATURE_SAMPLING, FALSE);
    4468:	60 e0       	ldi	r22, 0x00	; 0
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z13setUpSampling12ADCChannel_th>
				int8_t temp = (int8_t)getTemp();
    4470:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_Z7getTempv>
    4474:	0e 94 be 2a 	call	0x557c	; 0x557c <__fixsfsi>
				if(temp != g_temperature)
    4478:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <g_temperature>
    447c:	68 17       	cp	r22, r24
    447e:	e1 f0       	breq	.+56     	; 0x44b8 <_Z4loopv+0x33a>
				{
					g_temperature = temp;
    4480:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    4484:	6a 31       	cpi	r22, 0x1A	; 26
    4486:	14 f0       	brlt	.+4      	; 0x448c <_Z4loopv+0x30e>
    4488:	69 51       	subi	r22, 0x19	; 25
    448a:	03 c0       	rjmp	.+6      	; 0x4492 <_Z4loopv+0x314>
    448c:	89 e1       	ldi	r24, 0x19	; 25
    448e:	86 1b       	sub	r24, r22
    4490:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    4492:	06 2e       	mov	r0, r22
    4494:	00 0c       	add	r0, r0
    4496:	77 0b       	sbc	r23, r23
    4498:	8f e7       	ldi	r24, 0x7F	; 127
    449a:	95 e0       	ldi	r25, 0x05	; 5
    449c:	0e 94 09 05 	call	0xa12	; 0xa12 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    44a0:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <g_rv3028_offset>
    44a4:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <g_rv3028_offset+0x1>
    44a8:	a9 01       	movw	r20, r18
    44aa:	48 0f       	add	r20, r24
    44ac:	51 1d       	adc	r21, r1
    44ae:	87 fd       	sbrc	r24, 7
    44b0:	5a 95       	dec	r21
    44b2:	ca 01       	movw	r24, r20
    44b4:	0e 94 24 29 	call	0x5248	; 0x5248 <_Z21rv3028_set_offset_RAMj>
				}

				setUpSampling(AUDIO_SAMPLING, FALSE);
    44b8:	60 e0       	ldi	r22, 0x00	; 0
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z13setUpSampling12ADCChannel_th>
				g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    44c0:	8b e3       	ldi	r24, 0x3B	; 59
    44c2:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <g_temperature_check_countdown>
    44c6:	c1 c1       	rjmp	.+898    	; 0x484a <_Z4loopv+0x6cc>
			}
			else if(!g_voltage_check_countdown)
    44c8:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <g_voltage_check_countdown>
    44cc:	81 11       	cpse	r24, r1
    44ce:	bd c1       	rjmp	.+890    	; 0x484a <_Z4loopv+0x6cc>
			{
				setUpSampling(VOLTAGE_SAMPLING, FALSE);
    44d0:	60 e0       	ldi	r22, 0x00	; 0
    44d2:	82 e0       	ldi	r24, 0x02	; 2
    44d4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z13setUpSampling12ADCChannel_th>
				g_voltage = getVoltage();
    44d8:	0e 94 c4 12 	call	0x2588	; 0x2588 <_Z10getVoltagev>
    44dc:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <g_voltage+0x1>
    44e0:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <g_voltage>
				setUpSampling(AUDIO_SAMPLING, FALSE);
    44e4:	60 e0       	ldi	r22, 0x00	; 0
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z13setUpSampling12ADCChannel_th>
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    44ec:	8b e0       	ldi	r24, 0x0B	; 11
    44ee:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <g_voltage_check_countdown>
    44f2:	ab c1       	rjmp	.+854    	; 0x484a <_Z4loopv+0x6cc>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    44f4:	f5 01       	movw	r30, r10
    44f6:	41 91       	ld	r20, Z+
    44f8:	51 91       	ld	r21, Z+
    44fa:	61 91       	ld	r22, Z+
    44fc:	71 91       	ld	r23, Z+
    44fe:	5f 01       	movw	r10, r30
    4500:	85 ee       	ldi	r24, 0xE5	; 229
    4502:	94 e0       	ldi	r25, 0x04	; 4
    4504:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    4508:	85 ee       	ldi	r24, 0xE5	; 229
    450a:	94 e0       	ldi	r25, 0x04	; 4
    450c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN8Goertzel10Magnitude2Ev>
    4510:	e6 2e       	mov	r14, r22
    4512:	f7 2e       	mov	r15, r23
    4514:	d8 2e       	mov	r13, r24
    4516:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    4518:	27 2d       	mov	r18, r7
    451a:	36 2d       	mov	r19, r6
    451c:	45 2d       	mov	r20, r5
    451e:	54 2d       	mov	r21, r4
    4520:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__gesf2>
    4524:	18 16       	cp	r1, r24
    4526:	b4 f4       	brge	.+44     	; 0x4554 <_Z4loopv+0x3d6>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	34 e2       	ldi	r19, 0x24	; 36
    452c:	44 e7       	ldi	r20, 0x74	; 116
    452e:	59 e4       	ldi	r21, 0x49	; 73
    4530:	6e 2d       	mov	r22, r14
    4532:	7f 2d       	mov	r23, r15
    4534:	8d 2d       	mov	r24, r13
    4536:	9c 2d       	mov	r25, r12
    4538:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__gesf2>
    453c:	18 16       	cp	r1, r24
    453e:	34 f4       	brge	.+12     	; 0x454c <_Z4loopv+0x3ce>
    4540:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    4542:	7e 2c       	mov	r7, r14
    4544:	6f 2c       	mov	r6, r15
    4546:	5d 2c       	mov	r5, r13
    4548:	4c 2c       	mov	r4, r12
    454a:	04 c0       	rjmp	.+8      	; 0x4554 <_Z4loopv+0x3d6>
    454c:	7e 2c       	mov	r7, r14
    454e:	6f 2c       	mov	r6, r15
    4550:	5d 2c       	mov	r5, r13
    4552:	4c 2c       	mov	r4, r12
				g_voltage = getVoltage();
				setUpSampling(AUDIO_SAMPLING, FALSE);
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
			}

			for(int i = 0; i < 4; i++)
    4554:	0f 5f       	subi	r16, 0xFF	; 255
    4556:	1f 4f       	sbci	r17, 0xFF	; 255
    4558:	04 30       	cpi	r16, 0x04	; 4
    455a:	11 05       	cpc	r17, r1
    455c:	59 f6       	brne	.-106    	; 0x44f4 <_Z4loopv+0x376>
    455e:	85 c1       	rjmp	.+778    	; 0x486a <_Z4loopv+0x6ec>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4560:	f5 01       	movw	r30, r10
    4562:	41 91       	ld	r20, Z+
    4564:	51 91       	ld	r21, Z+
    4566:	61 91       	ld	r22, Z+
    4568:	71 91       	ld	r23, Z+
    456a:	5f 01       	movw	r10, r30
    456c:	85 ee       	ldi	r24, 0xE5	; 229
    456e:	94 e0       	ldi	r25, 0x04	; 4
    4570:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    4574:	85 ee       	ldi	r24, 0xE5	; 229
    4576:	94 e0       	ldi	r25, 0x04	; 4
    4578:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN8Goertzel10Magnitude2Ev>
    457c:	e6 2e       	mov	r14, r22
    457e:	f7 2e       	mov	r15, r23
    4580:	d8 2e       	mov	r13, r24
    4582:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    4584:	25 2d       	mov	r18, r5
    4586:	34 2d       	mov	r19, r4
    4588:	43 2d       	mov	r20, r3
    458a:	52 2d       	mov	r21, r2
    458c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__gesf2>
    4590:	18 16       	cp	r1, r24
    4592:	b4 f4       	brge	.+44     	; 0x45c0 <_Z4loopv+0x442>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	34 e2       	ldi	r19, 0x24	; 36
    4598:	44 e7       	ldi	r20, 0x74	; 116
    459a:	59 e4       	ldi	r21, 0x49	; 73
    459c:	6e 2d       	mov	r22, r14
    459e:	7f 2d       	mov	r23, r15
    45a0:	8d 2d       	mov	r24, r13
    45a2:	9c 2d       	mov	r25, r12
    45a4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__gesf2>
    45a8:	18 16       	cp	r1, r24
    45aa:	34 f4       	brge	.+12     	; 0x45b8 <_Z4loopv+0x43a>
    45ac:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    45ae:	5e 2c       	mov	r5, r14
    45b0:	4f 2c       	mov	r4, r15
    45b2:	3d 2c       	mov	r3, r13
    45b4:	2c 2c       	mov	r2, r12
    45b6:	04 c0       	rjmp	.+8      	; 0x45c0 <_Z4loopv+0x442>
    45b8:	5e 2c       	mov	r5, r14
    45ba:	4f 2c       	mov	r4, r15
    45bc:	3d 2c       	mov	r3, r13
    45be:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    45c0:	0f 5f       	subi	r16, 0xFF	; 255
    45c2:	1f 4f       	sbci	r17, 0xFF	; 255
    45c4:	04 30       	cpi	r16, 0x04	; 4
    45c6:	11 05       	cpc	r17, r1
    45c8:	59 f6       	brne	.-106    	; 0x4560 <_Z4loopv+0x3e2>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    45ca:	77 20       	and	r7, r7
    45cc:	0c f4       	brge	.+2      	; 0x45d0 <_Z4loopv+0x452>
    45ce:	76 c0       	rjmp	.+236    	; 0x46bc <_Z4loopv+0x53e>
				{
					char newKey = key[4 * y + x];
    45d0:	c4 01       	movw	r24, r8
    45d2:	88 0f       	add	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	88 0f       	add	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	80 58       	subi	r24, 0x80	; 128
    45dc:	9d 4f       	sbci	r25, 0xFD	; 253
    45de:	fc 01       	movw	r30, r24
    45e0:	e6 0d       	add	r30, r6
    45e2:	f7 1d       	adc	r31, r7
    45e4:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    45e6:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ4loopvE7lastKey>
    45ea:	18 13       	cpse	r17, r24
    45ec:	17 c0       	rjmp	.+46     	; 0x461c <_Z4loopv+0x49e>
					{
						checkCount++;
    45ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    45f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    45f6:	01 96       	adiw	r24, 0x01	; 1
    45f8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    45fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    4600:	03 97       	sbiw	r24, 0x03	; 3
    4602:	61 f4       	brne	.+24     	; 0x461c <_Z4loopv+0x49e>
						{
							g_dtmf_detected = TRUE;
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <g_dtmf_detected>
							quietCount = 0;
    460a:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ4loopvE10quietCount+0x1>
    460e:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    4612:	10 93 ee 04 	sts	0x04EE, r17	; 0x8004ee <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    4616:	81 2f       	mov	r24, r17
    4618:	0e 94 b6 1c 	call	0x396c	; 0x396c <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    461c:	10 93 7b 04 	sts	0x047B, r17	; 0x80047b <_ZZ4loopvE7lastKey>
    4620:	4d c0       	rjmp	.+154    	; 0x46bc <_Z4loopv+0x53e>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    4622:	c0 90 e6 04 	lds	r12, 0x04E6	; 0x8004e6 <g_tick_count>
    4626:	d0 90 e7 04 	lds	r13, 0x04E7	; 0x8004e7 <g_tick_count+0x1>
    462a:	e0 90 e8 04 	lds	r14, 0x04E8	; 0x8004e8 <g_tick_count+0x2>
    462e:	f0 90 e9 04 	lds	r15, 0x04E9	; 0x8004e9 <g_tick_count+0x3>
    4632:	80 90 ea 04 	lds	r8, 0x04EA	; 0x8004ea <g_last>
    4636:	90 90 eb 04 	lds	r9, 0x04EB	; 0x8004eb <g_last+0x1>
    463a:	a0 90 ec 04 	lds	r10, 0x04EC	; 0x8004ec <g_last+0x2>
    463e:	b0 90 ed 04 	lds	r11, 0x04ED	; 0x8004ed <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    4642:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZZ4loopvE10quietCount>
    4646:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZZ4loopvE10quietCount+0x1>
    464a:	9c 01       	movw	r18, r24
    464c:	2f 5f       	subi	r18, 0xFF	; 255
    464e:	3f 4f       	sbci	r19, 0xFF	; 255
    4650:	30 93 7a 04 	sts	0x047A, r19	; 0x80047a <_ZZ4loopvE10quietCount+0x1>
    4654:	20 93 79 04 	sts	0x0479, r18	; 0x800479 <_ZZ4loopvE10quietCount>
    4658:	03 97       	sbiw	r24, 0x03	; 3
    465a:	84 f1       	brlt	.+96     	; 0x46bc <_Z4loopv+0x53e>
				{
					g_dtmf_detected = FALSE;
    465c:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    4660:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    4664:	88 23       	and	r24, r24
    4666:	29 f0       	breq	.+10     	; 0x4672 <_Z4loopv+0x4f4>
    4668:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <g_LED_enunciating>
    466c:	88 23       	and	r24, r24
    466e:	09 f4       	brne	.+2      	; 0x4672 <_Z4loopv+0x4f4>
    4670:	0f c1       	rjmp	.+542    	; 0x4890 <_Z4loopv+0x712>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    4672:	c8 18       	sub	r12, r8
    4674:	d9 08       	sbc	r13, r9
    4676:	ea 08       	sbc	r14, r10
    4678:	fb 08       	sbc	r15, r11
    467a:	fc ed       	ldi	r31, 0xDC	; 220
    467c:	cf 16       	cp	r12, r31
    467e:	f5 e0       	ldi	r31, 0x05	; 5
    4680:	df 06       	cpc	r13, r31
    4682:	e1 04       	cpc	r14, r1
    4684:	f1 04       	cpc	r15, r1
    4686:	20 f4       	brcc	.+8      	; 0x4690 <_Z4loopv+0x512>
					{
						checkCount = 0;
    4688:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    468c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    4690:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ4loopvE10quietCount+0x1>
    4694:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4698:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_tick_count>
    469c:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <g_tick_count+0x1>
    46a0:	a0 91 e8 04 	lds	r26, 0x04E8	; 0x8004e8 <g_tick_count+0x2>
    46a4:	b0 91 e9 04 	lds	r27, 0x04E9	; 0x8004e9 <g_tick_count+0x3>
    46a8:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <g_last>
    46ac:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <g_last+0x1>
    46b0:	a0 93 ec 04 	sts	0x04EC, r26	; 0x8004ec <g_last+0x2>
    46b4:	b0 93 ed 04 	sts	0x04ED, r27	; 0x8004ed <g_last+0x3>
					lastKey = '\0';
    46b8:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    46bc:	ea e7       	ldi	r30, 0x7A	; 122
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	80 81       	ld	r24, Z
    46c2:	88 60       	ori	r24, 0x08	; 8
    46c4:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    46c6:	80 81       	ld	r24, Z
    46c8:	80 64       	ori	r24, 0x40	; 64
    46ca:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(g_transmissions_disabled)
    46cc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_transmissions_disabled>
    46d0:	88 23       	and	r24, r24
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <_Z4loopv+0x558>
    46d4:	e2 c0       	rjmp	.+452    	; 0x489a <_Z4loopv+0x71c>
	{
		if(g_dtmf_detected)
    46d6:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <g_dtmf_detected>
    46da:	88 23       	and	r24, r24
    46dc:	b1 f0       	breq	.+44     	; 0x470a <_Z4loopv+0x58c>
		{
			BOOL repeat = FALSE;
    46de:	19 82       	std	Y+1, r1	; 0x01
			makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    46e0:	40 e0       	ldi	r20, 0x00	; 0
    46e2:	50 e0       	ldi	r21, 0x00	; 0
    46e4:	be 01       	movw	r22, r28
    46e6:	6f 5f       	subi	r22, 0xFF	; 255
    46e8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ea:	8f e1       	ldi	r24, 0x1F	; 31
    46ec:	92 e0       	ldi	r25, 0x02	; 2
    46ee:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    46f2:	8c e8       	ldi	r24, 0x8C	; 140
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <g_code_throttle+0x1>
    46fa:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <g_code_throttle>
			g_LED_enunciating = TRUE;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <g_LED_enunciating>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    4704:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <g_config_error>
    4708:	c8 c0       	rjmp	.+400    	; 0x489a <_Z4loopv+0x71c>
		}
		else
		{
			ConfigurationState_t hold_config_err = g_config_error;
    470a:	10 91 22 05 	lds	r17, 0x0522	; 0x800522 <g_config_error>
			g_config_error = clockConfigurationCheck();
    470e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z23clockConfigurationCheckv>
    4712:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_config_error>

			if(g_config_error != hold_config_err)
    4716:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_config_error>
    471a:	18 17       	cp	r17, r24
    471c:	09 f4       	brne	.+2      	; 0x4720 <_Z4loopv+0x5a2>
    471e:	bd c0       	rjmp	.+378    	; 0x489a <_Z4loopv+0x71c>
			{
				if(g_config_error == CONFIGURATION_ERROR)
    4720:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_config_error>
    4724:	82 30       	cpi	r24, 0x02	; 2
    4726:	a1 f4       	brne	.+40     	; 0x4750 <_Z4loopv+0x5d2>
				{
					BOOL repeat = TRUE;
    4728:	11 e0       	ldi	r17, 0x01	; 1
    472a:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	50 e0       	ldi	r21, 0x00	; 0
    4730:	be 01       	movw	r22, r28
    4732:	6f 5f       	subi	r22, 0xFF	; 255
    4734:	7f 4f       	sbci	r23, 0xFF	; 255
    4736:	81 e2       	ldi	r24, 0x21	; 33
    4738:	92 e0       	ldi	r25, 0x02	; 2
    473a:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    473e:	8c e8       	ldi	r24, 0x8C	; 140
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <g_code_throttle+0x1>
    4746:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <g_code_throttle>
					g_LED_enunciating = TRUE;
    474a:	10 93 72 05 	sts	0x0572, r17	; 0x800572 <g_LED_enunciating>
    474e:	a5 c0       	rjmp	.+330    	; 0x489a <_Z4loopv+0x71c>
				}
				else if(g_config_error == WAITING_FOR_START)
    4750:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_config_error>
    4754:	81 30       	cpi	r24, 0x01	; 1
    4756:	a1 f4       	brne	.+40     	; 0x4780 <_Z4loopv+0x602>
				{
					BOOL repeat = TRUE;
    4758:	11 e0       	ldi	r17, 0x01	; 1
    475a:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	50 e0       	ldi	r21, 0x00	; 0
    4760:	be 01       	movw	r22, r28
    4762:	6f 5f       	subi	r22, 0xFF	; 255
    4764:	7f 4f       	sbci	r23, 0xFF	; 255
    4766:	83 e2       	ldi	r24, 0x23	; 35
    4768:	92 e0       	ldi	r25, 0x02	; 2
    476a:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    476e:	86 e4       	ldi	r24, 0x46	; 70
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <g_code_throttle+0x1>
    4776:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <g_code_throttle>
					g_LED_enunciating = TRUE;
    477a:	10 93 72 05 	sts	0x0572, r17	; 0x800572 <g_LED_enunciating>
    477e:	8d c0       	rjmp	.+282    	; 0x489a <_Z4loopv+0x71c>
				}
				else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    4780:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_config_error>
    4784:	84 30       	cpi	r24, 0x04	; 4
    4786:	21 f0       	breq	.+8      	; 0x4790 <_Z4loopv+0x612>
    4788:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_config_error>
    478c:	83 30       	cpi	r24, 0x03	; 3
    478e:	a1 f4       	brne	.+40     	; 0x47b8 <_Z4loopv+0x63a>
				{
					BOOL repeat = TRUE;
    4790:	11 e0       	ldi	r17, 0x01	; 1
    4792:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4794:	40 e0       	ldi	r20, 0x00	; 0
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	be 01       	movw	r22, r28
    479a:	6f 5f       	subi	r22, 0xFF	; 255
    479c:	7f 4f       	sbci	r23, 0xFF	; 255
    479e:	81 e2       	ldi	r24, 0x21	; 33
    47a0:	92 e0       	ldi	r25, 0x02	; 2
    47a2:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    47a6:	8c e8       	ldi	r24, 0x8C	; 140
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <g_code_throttle+0x1>
    47ae:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <g_code_throttle>
					g_LED_enunciating = TRUE;
    47b2:	10 93 72 05 	sts	0x0572, r17	; 0x800572 <g_LED_enunciating>
    47b6:	71 c0       	rjmp	.+226    	; 0x489a <_Z4loopv+0x71c>
				}
				else
				{
					g_LED_enunciating = FALSE;
    47b8:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <g_LED_enunciating>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    47bc:	60 e0       	ldi	r22, 0x00	; 0
    47be:	8d e0       	ldi	r24, 0x0D	; 13
    47c0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
				}
			}
		}
	}
}
    47c4:	6a c0       	rjmp	.+212    	; 0x489a <_Z4loopv+0x71c>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    47c6:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_id_codespeed>
    47ca:	70 e0       	ldi	r23, 0x00	; 0
    47cc:	82 e8       	ldi	r24, 0x82	; 130
    47ce:	9b e1       	ldi	r25, 0x1B	; 27
    47d0:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    47d4:	cb 01       	movw	r24, r22
    47d6:	6a e0       	ldi	r22, 0x0A	; 10
    47d8:	70 e0       	ldi	r23, 0x00	; 0
    47da:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    47de:	66 0f       	add	r22, r22
    47e0:	77 1f       	adc	r23, r23
    47e2:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <g_code_throttle+0x1>
    47e6:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <g_code_throttle>
				BOOL repeat = FALSE;
    47ea:	19 82       	std	Y+1, r1	; 0x01
				makeMorse((char*)g_messages_text[STATION_ID], &repeat, NULL);
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	be 01       	movw	r22, r28
    47f2:	6f 5f       	subi	r22, 0xFF	; 255
    47f4:	7f 4f       	sbci	r23, 0xFF	; 255
    47f6:	8a e0       	ldi	r24, 0x0A	; 10
    47f8:	95 e0       	ldi	r25, 0x05	; 5
    47fa:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    4804:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <g_callsign_sent>
    4808:	ff cd       	rjmp	.-1026   	; 0x4408 <_Z4loopv+0x28a>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5))
    480a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <g_fox>
    480e:	88 30       	cpi	r24, 0x08	; 8
    4810:	08 f0       	brcs	.+2      	; 0x4814 <_Z4loopv+0x696>
    4812:	ed cd       	rjmp	.-1062   	; 0x43ee <_Z4loopv+0x270>
    4814:	f9 cd       	rjmp	.-1038   	; 0x4408 <_Z4loopv+0x28a>
			{
				if(g_fox_transition)
    4816:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_fox_transition>
    481a:	81 11       	cpse	r24, r1
    481c:	ee cd       	rjmp	.-1060   	; 0x43fa <_Z4loopv+0x27c>
    481e:	f4 cd       	rjmp	.-1048   	; 0x4408 <_Z4loopv+0x28a>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    4820:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <g_on_the_air>
    4824:	16 ce       	rjmp	.-980    	; 0x4452 <_Z4loopv+0x2d4>
			}
			else if(g_fox != (g_fox_counter + g_fox_id_offset)) /* Turn off transmissions during times when this fox should be silent */
    4826:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <g_fox>
    482a:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <g_fox_counter>
    482e:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <g_fox_counter+0x1>
    4832:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_fox_id_offset>
    4836:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <g_fox_id_offset+0x1>
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	84 0f       	add	r24, r20
    483e:	95 1f       	adc	r25, r21
    4840:	28 17       	cp	r18, r24
    4842:	39 07       	cpc	r19, r25
    4844:	09 f0       	breq	.+2      	; 0x4848 <_Z4loopv+0x6ca>
    4846:	03 ce       	rjmp	.-1018   	; 0x444e <_Z4loopv+0x2d0>
    4848:	04 ce       	rjmp	.-1016   	; 0x4452 <_Z4loopv+0x2d4>
    484a:	0f 2e       	mov	r0, r31
    484c:	f0 e9       	ldi	r31, 0x90	; 144
    484e:	af 2e       	mov	r10, r31
    4850:	f2 e0       	ldi	r31, 0x02	; 2
    4852:	bf 2e       	mov	r11, r31
    4854:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4856:	00 e0       	ldi	r16, 0x00	; 0
    4858:	10 e0       	ldi	r17, 0x00	; 0
    485a:	88 24       	eor	r8, r8
    485c:	8a 94       	dec	r8
    485e:	98 2c       	mov	r9, r8
    4860:	71 2c       	mov	r7, r1
    4862:	61 2c       	mov	r6, r1
    4864:	51 2c       	mov	r5, r1
    4866:	41 2c       	mov	r4, r1
    4868:	45 ce       	rjmp	.-886    	; 0x44f4 <_Z4loopv+0x376>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    486a:	99 20       	and	r9, r9
    486c:	0c f4       	brge	.+2      	; 0x4870 <_Z4loopv+0x6f2>
    486e:	d9 ce       	rjmp	.-590    	; 0x4622 <_Z4loopv+0x4a4>
    4870:	0f 2e       	mov	r0, r31
    4872:	f0 ea       	ldi	r31, 0xA0	; 160
    4874:	af 2e       	mov	r10, r31
    4876:	f2 e0       	ldi	r31, 0x02	; 2
    4878:	bf 2e       	mov	r11, r31
    487a:	f0 2d       	mov	r31, r0
    487c:	00 e0       	ldi	r16, 0x00	; 0
    487e:	10 e0       	ldi	r17, 0x00	; 0
    4880:	66 24       	eor	r6, r6
    4882:	6a 94       	dec	r6
    4884:	76 2c       	mov	r7, r6
    4886:	51 2c       	mov	r5, r1
    4888:	41 2c       	mov	r4, r1
    488a:	31 2c       	mov	r3, r1
    488c:	21 2c       	mov	r2, r1
    488e:	68 ce       	rjmp	.-816    	; 0x4560 <_Z4loopv+0x3e2>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	8d e0       	ldi	r24, 0x0D	; 13
    4894:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>
    4898:	ec ce       	rjmp	.-552    	; 0x4672 <_Z4loopv+0x4f4>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
				}
			}
		}
	}
}
    489a:	0f 90       	pop	r0
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	ff 90       	pop	r15
    48a6:	ef 90       	pop	r14
    48a8:	df 90       	pop	r13
    48aa:	cf 90       	pop	r12
    48ac:	bf 90       	pop	r11
    48ae:	af 90       	pop	r10
    48b0:	9f 90       	pop	r9
    48b2:	8f 90       	pop	r8
    48b4:	7f 90       	pop	r7
    48b6:	6f 90       	pop	r6
    48b8:	5f 90       	pop	r5
    48ba:	4f 90       	pop	r4
    48bc:	3f 90       	pop	r3
    48be:	2f 90       	pop	r2
    48c0:	08 95       	ret

000048c2 <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    48c2:	63 e0       	ldi	r22, 0x03	; 3
    48c4:	84 e0       	ldi	r24, 0x04	; 4
    48c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>

	pinMode(PIN_LED1, OUTPUT);              /* This led blinks when off cycle and blinks with code when on cycle. */
    48ca:	61 e0       	ldi	r22, 0x01	; 1
    48cc:	8d e0       	ldi	r24, 0x0D	; 13
    48ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	8d e0       	ldi	r24, 0x0D	; 13
    48d6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    48da:	61 e0       	ldi	r22, 0x01	; 1
    48dc:	8d e0       	ldi	r24, 0x0D	; 13
    48de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    48e2:	60 e0       	ldi	r22, 0x00	; 0
    48e4:	8d e0       	ldi	r24, 0x0D	; 13
    48e6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    48ea:	61 e0       	ldi	r22, 0x01	; 1
    48ec:	8a e0       	ldi	r24, 0x0A	; 10
    48ee:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    48f2:	60 e0       	ldi	r22, 0x00	; 0
    48f4:	8a e0       	ldi	r24, 0x0A	; 10
    48f6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    48fa:	61 e0       	ldi	r22, 0x01	; 1
    48fc:	89 e0       	ldi	r24, 0x09	; 9
    48fe:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    4902:	60 e0       	ldi	r22, 0x00	; 0
    4904:	89 e0       	ldi	r24, 0x09	; 9
    4906:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    490a:	61 e0       	ldi	r22, 0x01	; 1
    490c:	88 e0       	ldi	r24, 0x08	; 8
    490e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    4912:	60 e0       	ldi	r22, 0x00	; 0
    4914:	88 e0       	ldi	r24, 0x08	; 8
    4916:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	84 e1       	ldi	r24, 0x14	; 20
    491e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    4922:	60 e0       	ldi	r22, 0x00	; 0
    4924:	85 e1       	ldi	r24, 0x15	; 21
    4926:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    492a:	63 e0       	ldi	r22, 0x03	; 3
    492c:	8c e0       	ldi	r24, 0x0C	; 12
    492e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    4932:	61 e0       	ldi	r22, 0x01	; 1
    4934:	8b e0       	ldi	r24, 0x0B	; 11
    4936:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    493a:	60 e0       	ldi	r22, 0x00	; 0
    493c:	8b e0       	ldi	r24, 0x0B	; 11
    493e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	linkbus_disable();
    4942:	0e 94 a7 09 	call	0x134e	; 0x134e <_Z15linkbus_disablev>
 *	digitalWrite(PIN_D1, OFF);
 *	digitalWrite(PIN_D2, OFF);
 *	digitalWrite(PIN_D3, OFF);
 *	digitalWrite(PIN_D4, OFF);
 *	digitalWrite(PIN_D5, OFF); */
	DDRC |= 0x0F;
    4946:	87 b1       	in	r24, 0x07	; 7
    4948:	8f 60       	ori	r24, 0x0F	; 15
    494a:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
    494c:	88 b1       	in	r24, 0x08	; 8
    494e:	80 7f       	andi	r24, 0xF0	; 240
    4950:	88 b9       	out	0x08, r24	; 8
	DDRD |= 0x03;
    4952:	8a b1       	in	r24, 0x0a	; 10
    4954:	83 60       	ori	r24, 0x03	; 3
    4956:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0xFC;
    4958:	8b b1       	in	r24, 0x0b	; 11
    495a:	8c 7f       	andi	r24, 0xFC	; 252
    495c:	8b b9       	out	0x0b, r24	; 11

	pinMode(PIN_PWDN, OUTPUT);
    495e:	61 e0       	ldi	r22, 0x01	; 1
    4960:	86 e0       	ldi	r24, 0x06	; 6
    4962:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    4966:	61 e0       	ldi	r22, 0x01	; 1
    4968:	86 e0       	ldi	r24, 0x06	; 6
    496a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    496e:	63 e0       	ldi	r22, 0x03	; 3
    4970:	82 e1       	ldi	r24, 0x12	; 18
    4972:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    4976:	63 e0       	ldi	r22, 0x03	; 3
    4978:	83 e1       	ldi	r24, 0x13	; 19
    497a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    497e:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    4982:	8f e7       	ldi	r24, 0x7F	; 127
    4984:	95 e0       	ldi	r25, 0x05	; 5
    4986:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN13EepromManager11readNonVolsEv>
    498a:	18 2f       	mov	r17, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    498c:	61 e0       	ldi	r22, 0x01	; 1
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    4994:	f8 94       	cli
	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    4996:	a0 eb       	ldi	r26, 0xB0	; 176
    4998:	b0 e0       	ldi	r27, 0x00	; 0
    499a:	1c 92       	st	X, r1
	TCCR2B = 0;
    499c:	e1 eb       	ldi	r30, 0xB1	; 177
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    49a2:	8c 91       	ld	r24, X
    49a4:	82 60       	ori	r24, 0x02	; 2
    49a6:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    49a8:	80 81       	ld	r24, Z
    49aa:	87 60       	ori	r24, 0x07	; 7
    49ac:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    49ae:	8c e0       	ldi	r24, 0x0C	; 12
    49b0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    49b4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    49b8:	e6 eb       	ldi	r30, 0xB6	; 182
    49ba:	f0 e0       	ldi	r31, 0x00	; 0
    49bc:	80 81       	ld	r24, Z
    49be:	8f 7d       	andi	r24, 0xDF	; 223
    49c0:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    49c2:	e0 e7       	ldi	r30, 0x70	; 112
    49c4:	f0 e0       	ldi	r31, 0x00	; 0
    49c6:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    49c8:	80 81       	ld	r24, Z
    49ca:	84 60       	ori	r24, 0x04	; 4
    49cc:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    49ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    49d2:	c1 e8       	ldi	r28, 0x81	; 129
    49d4:	d0 e0       	ldi	r29, 0x00	; 0
    49d6:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    49d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    49dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    49e0:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_AM_audio_frequency>
    49e4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    49e8:	88 81       	ld	r24, Y
    49ea:	88 60       	ori	r24, 0x08	; 8
    49ec:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    49ee:	88 81       	ld	r24, Y
    49f0:	81 60       	ori	r24, 0x01	; 1
    49f2:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    49f4:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    49f6:	84 b5       	in	r24, 0x24	; 36
    49f8:	82 60       	ori	r24, 0x02	; 2
    49fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    49fc:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    49fe:	85 b5       	in	r24, 0x25	; 37
    4a00:	84 60       	ori	r24, 0x04	; 4
    4a02:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    4a04:	8f e2       	ldi	r24, 0x2F	; 47
    4a06:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4a08:	ee e6       	ldi	r30, 0x6E	; 110
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    4a0e:	80 81       	ld	r24, Z
    4a10:	82 60       	ori	r24, 0x02	; 2
    4a12:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    4a14:	ed e6       	ldi	r30, 0x6D	; 109
    4a16:	f0 e0       	ldi	r31, 0x00	; 0
    4a18:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4a1a:	80 e1       	ldi	r24, 0x10	; 16
    4a1c:	80 83       	st	Z, r24
	PCICR = 0x00;
    4a1e:	e8 e6       	ldi	r30, 0x68	; 104
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    4a24:	84 e0       	ldi	r24, 0x04	; 4
    4a26:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    4a28:	78 94       	sei

	if(!g_AM_enabled)
    4a2a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_AM_enabled>
    4a2e:	81 11       	cpse	r24, r1
    4a30:	06 c0       	rjmp	.+12     	; 0x4a3e <main+0x17c>
	{
		linkbus_init(BAUD);     /* Start the Link Bus serial comms */
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	71 ee       	ldi	r23, 0xE1	; 225
    4a36:	80 e0       	ldi	r24, 0x00	; 0
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	0e 94 81 09 	call	0x1302	; 0x1302 <_Z12linkbus_initm>
	}

	g_reset_button_held = !digitalRead(PIN_SYNC);
    4a3e:	84 e0       	ldi	r24, 0x04	; 4
    4a40:	0e 94 31 02 	call	0x462	; 0x462 <_Z11digitalReadh>
    4a44:	91 e0       	ldi	r25, 0x01	; 1
    4a46:	81 11       	cpse	r24, r1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    4a4e:	11 23       	and	r17, r17
    4a50:	29 f0       	breq	.+10     	; 0x4a5c <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4a52:	61 e0       	ldi	r22, 0x01	; 1
    4a54:	8d e2       	ldi	r24, 0x2D	; 45
    4a56:	92 e0       	ldi	r25, 0x02	; 2
    4a58:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
		}

		uint8_t result = rv3028_1s_sqw(ON);
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	0e 94 40 29 	call	0x5280	; 0x5280 <_Z13rv3028_1s_sqwh>
    4a62:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch();
    4a64:	0e 94 0b 28 	call	0x5016	; 0x5016 <_Z16rv3028_get_epochv>
    4a68:	60 93 6e 05 	sts	0x056E, r22	; 0x80056e <g_current_epoch>
    4a6c:	70 93 6f 05 	sts	0x056F, r23	; 0x80056f <g_current_epoch+0x1>
    4a70:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <g_current_epoch+0x2>
    4a74:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    4a78:	8f e7       	ldi	r24, 0x7F	; 127
    4a7a:	95 e0       	ldi	r25, 0x05	; 5
    4a7c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    4a80:	cc 23       	and	r28, r28
    4a82:	54 f4       	brge	.+20     	; 0x4a98 <main+0x1d6>
		{
			sprintf(g_tempStr, "Err 1\n");
    4a84:	87 e0       	ldi	r24, 0x07	; 7
    4a86:	ec e3       	ldi	r30, 0x3C	; 60
    4a88:	f2 e0       	ldi	r31, 0x02	; 2
    4a8a:	ad eb       	ldi	r26, 0xBD	; 189
    4a8c:	b4 e0       	ldi	r27, 0x04	; 4
    4a8e:	01 90       	ld	r0, Z+
    4a90:	0d 92       	st	X+, r0
    4a92:	8a 95       	dec	r24
    4a94:	e1 f7       	brne	.-8      	; 0x4a8e <main+0x1cc>
    4a96:	23 c0       	rjmp	.+70     	; 0x4ade <main+0x21c>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    4a98:	c0 ff       	sbrs	r28, 0
    4a9a:	0a c0       	rjmp	.+20     	; 0x4ab0 <main+0x1ee>
		{
			sprintf(g_tempStr, "Err 2\n");
    4a9c:	87 e0       	ldi	r24, 0x07	; 7
    4a9e:	e3 e4       	ldi	r30, 0x43	; 67
    4aa0:	f2 e0       	ldi	r31, 0x02	; 2
    4aa2:	ad eb       	ldi	r26, 0xBD	; 189
    4aa4:	b4 e0       	ldi	r27, 0x04	; 4
    4aa6:	01 90       	ld	r0, Z+
    4aa8:	0d 92       	st	X+, r0
    4aaa:	8a 95       	dec	r24
    4aac:	e1 f7       	brne	.-8      	; 0x4aa6 <main+0x1e4>
    4aae:	17 c0       	rjmp	.+46     	; 0x4ade <main+0x21c>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4ab0:	c1 ff       	sbrs	r28, 1
    4ab2:	0a c0       	rjmp	.+20     	; 0x4ac8 <main+0x206>
		{
			sprintf(g_tempStr, "Err 3\n");
    4ab4:	87 e0       	ldi	r24, 0x07	; 7
    4ab6:	ea e4       	ldi	r30, 0x4A	; 74
    4ab8:	f2 e0       	ldi	r31, 0x02	; 2
    4aba:	ad eb       	ldi	r26, 0xBD	; 189
    4abc:	b4 e0       	ldi	r27, 0x04	; 4
    4abe:	01 90       	ld	r0, Z+
    4ac0:	0d 92       	st	X+, r0
    4ac2:	8a 95       	dec	r24
    4ac4:	e1 f7       	brne	.-8      	; 0x4abe <main+0x1fc>
    4ac6:	0b c0       	rjmp	.+22     	; 0x4ade <main+0x21c>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4ac8:	c5 ff       	sbrs	r28, 5
    4aca:	09 c0       	rjmp	.+18     	; 0x4ade <main+0x21c>
		{
			sprintf(g_tempStr, "RTC OK\n");
    4acc:	88 e0       	ldi	r24, 0x08	; 8
    4ace:	e1 e5       	ldi	r30, 0x51	; 81
    4ad0:	f2 e0       	ldi	r31, 0x02	; 2
    4ad2:	ad eb       	ldi	r26, 0xBD	; 189
    4ad4:	b4 e0       	ldi	r27, 0x04	; 4
    4ad6:	01 90       	ld	r0, Z+
    4ad8:	0d 92       	st	X+, r0
    4ada:	8a 95       	dec	r24
    4adc:	e1 f7       	brne	.-8      	; 0x4ad6 <main+0x214>
		}

		if(strlen(g_tempStr))
    4ade:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <g_tempStr>
    4ae2:	88 23       	and	r24, r24
    4ae4:	29 f0       	breq	.+10     	; 0x4af0 <main+0x22e>
		{
			lb_send_string(g_tempStr, TRUE);
    4ae6:	61 e0       	ldi	r22, 0x01	; 1
    4ae8:	8d eb       	ldi	r24, 0xBD	; 189
    4aea:	94 e0       	ldi	r25, 0x04	; 4
    4aec:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4af0:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4af4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    4af8:	ef e6       	ldi	r30, 0x6F	; 111
    4afa:	f0 e0       	ldi	r31, 0x00	; 0
    4afc:	80 81       	ld	r24, Z
    4afe:	82 60       	ori	r24, 0x02	; 2
    4b00:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	0e 94 2e 13 	call	0x265c	; 0x265c <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    4b08:	e9 e6       	ldi	r30, 0x69	; 105
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	82 60       	ori	r24, 0x02	; 2
    4b10:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    4b12:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    4b14:	0e 94 bf 20 	call	0x417e	; 0x417e <_Z4loopv>
    4b18:	fd cf       	rjmp	.-6      	; 0x4b14 <main+0x252>

00004b1a <_GLOBAL__sub_I_ee_mgr>:
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4b1e:	8f e7       	ldi	r24, 0x7F	; 127
    4b20:	95 e0       	ldi	r25, 0x05	; 5
    4b22:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4b26:	00 e0       	ldi	r16, 0x00	; 0
    4b28:	18 e7       	ldi	r17, 0x78	; 120
    4b2a:	26 e9       	ldi	r18, 0x96	; 150
    4b2c:	36 e4       	ldi	r19, 0x46	; 70
    4b2e:	40 e0       	ldi	r20, 0x00	; 0
    4b30:	50 e0       	ldi	r21, 0x00	; 0
    4b32:	69 e4       	ldi	r22, 0x49	; 73
    4b34:	73 e4       	ldi	r23, 0x43	; 67
    4b36:	85 ee       	ldi	r24, 0xE5	; 229
    4b38:	94 e0       	ldi	r25, 0x04	; 4
    4b3a:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN8GoertzelC1Eff>
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4b3e:	1f 91       	pop	r17
    4b40:	0f 91       	pop	r16
    4b42:	08 95       	ret

00004b44 <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4b44:	85 ee       	ldi	r24, 0xE5	; 229
    4b46:	94 e0       	ldi	r25, 0x04	; 4
    4b48:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4b4c:	8f e7       	ldi	r24, 0x7F	; 127
    4b4e:	95 e0       	ldi	r25, 0x05	; 5
    4b50:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN13EepromManagerD1Ev>
    4b54:	08 95       	ret

00004b56 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <toupper>

	switch( c )
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	ff 27       	eor	r31, r31
    4b60:	b0 97       	sbiw	r30, 0x20	; 32
    4b62:	ed 35       	cpi	r30, 0x5D	; 93
    4b64:	f1 05       	cpc	r31, r1
    4b66:	08 f0       	brcs	.+2      	; 0x4b6a <_Z12getMorseCharc+0x14>
    4b68:	e4 c0       	rjmp	.+456    	; 0x4d32 <_Z12getMorseCharc+0x1dc>
    4b6a:	e8 55       	subi	r30, 0x58	; 88
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	0c 94 58 2d 	jmp	0x5ab0	; 0x5ab0 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4b72:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    4b74:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4b76:	61 e0       	ldi	r22, 0x01	; 1
    4b78:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4b7a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    4b7c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4b7e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4b80:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4b82:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    4b84:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4b86:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4b88:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    4b8c:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4b8e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    4b90:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4b92:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    4b94:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4b96:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4b98:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4b9a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    4b9c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4b9e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4ba0:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    4ba2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    4ba4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4ba6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4ba8:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    4baa:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    4bac:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4bae:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    4bb0:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4bb2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4bb4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4bb6:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4bb8:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4bba:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4bbc:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4bbe:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4bc0:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4bc2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4bc4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4bc6:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4bc8:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4bca:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    4bcc:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4bce:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4bd0:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4bd2:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4bd4:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4bd6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4bd8:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4bda:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    4bdc:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4bde:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4be0:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4be2:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4be4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4be6:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4be8:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4bea:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4bec:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4bee:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4bf0:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4bf2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4bf4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4bf6:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4bf8:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    4bfa:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    4bfc:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4c00:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4c02:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4c04:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4c06:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4c08:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4c0a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    4c0c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4c0e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4c10:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4c12:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4c14:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4c16:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4c18:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4c1a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    4c1c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4c1e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4c20:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4c22:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4c24:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4c26:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4c28:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4c2a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    4c2c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4c2e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4c30:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4c32:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4c34:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4c36:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4c38:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4c3a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4c3c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    4c3e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4c40:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4c42:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4c44:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4c46:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4c48:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4c4a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    4c4c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    4c4e:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4c50:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4c52:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4c54:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4c56:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4c58:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4c5a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4c5c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4c5e:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4c60:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4c62:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4c64:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4c66:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4c68:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4c6a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    4c6c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4c6e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4c70:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4c72:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4c74:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4c76:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4c78:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4c7a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    4c7c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4c7e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4c80:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4c82:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4c84:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4c86:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4c88:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4c8a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    4c8c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    4c8e:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4c90:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4c92:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4c94:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4c96:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4c98:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4c9a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    4c9c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    4c9e:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4ca0:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4ca2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4ca4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4ca6:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ca8:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4caa:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    4cac:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    4cae:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4cb0:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4cb2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4cb4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4cb6:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4cb8:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4cba:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    4cbc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4cbe:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4cc0:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4cc2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4cc4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4cc6:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4cc8:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4cca:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    4ccc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4cce:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4cd0:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4cd2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4cd4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4cd6:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4cd8:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4cda:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    4cdc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    4cde:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4ce0:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4ce2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4ce4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4ce6:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4ce8:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4cea:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    4cec:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    4cee:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4cf0:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4cf2:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4cf4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4cf6:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4cf8:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4cfa:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    4cfc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    4cfe:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4d00:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4d02:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4d04:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4d06:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4d08:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    4d0a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    4d0c:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    4d0e:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4d10:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4d12:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4d14:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4d16:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4d18:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    4d1a:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4d1c:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    4d1e:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4d20:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4d22:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4d24:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4d26:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4d28:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4d2a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4d2c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    4d2e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4d30:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    4d32:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4d34:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4d36:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    4d38:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4d3a:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    4d3c:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4d3e:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    4d40:	08 95       	ret

00004d42 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4d42:	cf 93       	push	r28
    4d44:	df 93       	push	r29
    4d46:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	b1 f1       	breq	.+108    	; 0x4db8 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    4d4c:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    4d50:	61 15       	cp	r22, r1
    4d52:	71 05       	cpc	r23, r1
    4d54:	21 f0       	breq	.+8      	; 0x4d5e <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4d56:	db 01       	movw	r26, r22
    4d58:	2c 91       	ld	r18, X
    4d5a:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    4d5e:	fc 01       	movw	r30, r24
    4d60:	20 81       	ld	r18, Z
    4d62:	22 23       	and	r18, r18
    4d64:	d9 f0       	breq	.+54     	; 0x4d9c <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4d66:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4d6a:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    4d6e:	80 e2       	ldi	r24, 0x20	; 32
    4d70:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4d74:	82 2f       	mov	r24, r18
    4d76:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_Z12getMorseCharc>
    4d7a:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4d7e:	70 93 87 05 	sts	0x0587, r23	; 0x800587 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4d82:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4d86:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4d8a:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    4d8e:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4d92:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4d96:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <_ZZ9makeMorsePcPhS0_E15completedString>
    4d9a:	0a c0       	rjmp	.+20     	; 0x4db0 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    4d9c:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4da0:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4daa:	20 97       	sbiw	r28, 0x00	; 0
    4dac:	09 f0       	breq	.+2      	; 0x4db0 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    4dae:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    4db0:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	c0 c0       	rjmp	.+384    	; 0x4f38 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4db8:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <_ZZ9makeMorsePcPhS0_E3str>
    4dbc:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4dc0:	30 97       	sbiw	r30, 0x00	; 0
    4dc2:	09 f4       	brne	.+2      	; 0x4dc6 <_Z9makeMorsePcPhS0_+0x84>
    4dc4:	aa c0       	rjmp	.+340    	; 0x4f1a <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4dc6:	61 15       	cp	r22, r1
    4dc8:	71 05       	cpc	r23, r1
    4dca:	21 f0       	breq	.+8      	; 0x4dd4 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    4dcc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E6repeat>
    4dd0:	db 01       	movw	r26, r22
    4dd2:	8c 93       	st	X, r24
		}

		if(completedString)
    4dd4:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <_ZZ9makeMorsePcPhS0_E15completedString>
    4dd8:	88 23       	and	r24, r24
    4dda:	49 f0       	breq	.+18     	; 0x4dee <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    4ddc:	20 97       	sbiw	r28, 0x00	; 0
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <_Z9makeMorsePcPhS0_+0xa0>
    4de0:	a8 c0       	rjmp	.+336    	; 0x4f32 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4de6:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	a5 c0       	rjmp	.+330    	; 0x4f38 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    4dee:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4df2:	88 23       	and	r24, r24
    4df4:	21 f0       	breq	.+8      	; 0x4dfe <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4df6:	81 50       	subi	r24, 0x01	; 1
    4df8:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4dfc:	7f c0       	rjmp	.+254    	; 0x4efc <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    4dfe:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4e02:	88 23       	and	r24, r24
    4e04:	81 f0       	breq	.+32     	; 0x4e26 <_Z9makeMorsePcPhS0_+0xe4>
    4e06:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4e0a:	81 11       	cpse	r24, r1
    4e0c:	0c c0       	rjmp	.+24     	; 0x4e26 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    4e0e:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    4e12:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4e16:	88 23       	and	r24, r24
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <_Z9makeMorsePcPhS0_+0xda>
    4e1a:	70 c0       	rjmp	.+224    	; 0x4efc <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    4e1c:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    4e20:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4e24:	6b c0       	rjmp	.+214    	; 0x4efc <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4e26:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4e2a:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4e2e:	89 17       	cp	r24, r25
    4e30:	90 f1       	brcs	.+100    	; 0x4e96 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    4e32:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4e36:	8f 5f       	subi	r24, 0xFF	; 255
    4e38:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4e3c:	df 01       	movw	r26, r30
    4e3e:	a8 0f       	add	r26, r24
    4e40:	b1 1d       	adc	r27, r1
    4e42:	8c 91       	ld	r24, X
    4e44:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4e48:	81 11       	cpse	r24, r1
    4e4a:	19 c0       	rjmp	.+50     	; 0x4e7e <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    4e4c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E6repeat>
    4e50:	88 23       	and	r24, r24
    4e52:	31 f0       	breq	.+12     	; 0x4e60 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4e54:	80 81       	ld	r24, Z
    4e56:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4e5a:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4e5e:	0f c0       	rjmp	.+30     	; 0x4e7e <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    4e60:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4e64:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4e68:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    4e6c:	91 e0       	ldi	r25, 0x01	; 1
    4e6e:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    4e72:	20 97       	sbiw	r28, 0x00	; 0
    4e74:	09 f0       	breq	.+2      	; 0x4e78 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4e76:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4e78:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    4e7c:	5d c0       	rjmp	.+186    	; 0x4f38 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    4e7e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
    4e82:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_Z12getMorseCharc>
    4e86:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4e8a:	70 93 87 05 	sts	0x0587, r23	; 0x800587 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4e8e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4e92:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4e96:	20 91 86 05 	lds	r18, 0x0586	; 0x800586 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4e9a:	2d 3f       	cpi	r18, 0xFD	; 253
    4e9c:	00 f5       	brcc	.+64     	; 0x4ede <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    4e9e:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4ea2:	31 e0       	ldi	r19, 0x01	; 1
    4ea4:	34 0f       	add	r19, r20
    4ea6:	30 93 84 05 	sts	0x0584, r19	; 0x800584 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    4eaa:	81 e0       	ldi	r24, 0x01	; 1
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	02 c0       	rjmp	.+4      	; 0x4eb4 <_Z9makeMorsePcPhS0_+0x172>
    4eb0:	88 0f       	add	r24, r24
    4eb2:	99 1f       	adc	r25, r25
    4eb4:	4a 95       	dec	r20
    4eb6:	e2 f7       	brpl	.-8      	; 0x4eb0 <_Z9makeMorsePcPhS0_+0x16e>
    4eb8:	82 23       	and	r24, r18
    4eba:	21 f0       	breq	.+8      	; 0x4ec4 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    4ebc:	82 e0       	ldi	r24, 0x02	; 2
    4ebe:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4ec2:	02 c0       	rjmp	.+4      	; 0x4ec8 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4ec4:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    4ece:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4ed2:	38 17       	cp	r19, r24
    4ed4:	98 f0       	brcs	.+38     	; 0x4efc <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4ed6:	82 e0       	ldi	r24, 0x02	; 2
    4ed8:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4edc:	0f c0       	rjmp	.+30     	; 0x4efc <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    4ede:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    4ee2:	9f ef       	ldi	r25, 0xFF	; 255
    4ee4:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4ee8:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    4eec:	84 30       	cpi	r24, 0x04	; 4
    4eee:	20 f0       	brcs	.+8      	; 0x4ef8 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    4ef0:	84 50       	subi	r24, 0x04	; 4
    4ef2:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4ef6:	02 c0       	rjmp	.+4      	; 0x4efc <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4ef8:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    4efc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZZ9makeMorsePcPhS0_E1c>
    4f00:	8c 33       	cpi	r24, 0x3C	; 60
    4f02:	31 f4       	brne	.+12     	; 0x4f10 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    4f0a:	20 97       	sbiw	r28, 0x00	; 0
    4f0c:	41 f4       	brne	.+16     	; 0x4f1e <_Z9makeMorsePcPhS0_+0x1dc>
    4f0e:	14 c0       	rjmp	.+40     	; 0x4f38 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    4f10:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4f14:	20 97       	sbiw	r28, 0x00	; 0
    4f16:	19 f4       	brne	.+6      	; 0x4f1e <_Z9makeMorsePcPhS0_+0x1dc>
    4f18:	09 c0       	rjmp	.+18     	; 0x4f2c <_Z9makeMorsePcPhS0_+0x1ea>
    4f1a:	20 97       	sbiw	r28, 0x00	; 0
    4f1c:	19 f0       	breq	.+6      	; 0x4f24 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    4f1e:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <_ZZ9makeMorsePcPhS0_E15completedString>
    4f22:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4f24:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4f28:	81 11       	cpse	r24, r1
    4f2a:	05 c0       	rjmp	.+10     	; 0x4f36 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    4f2c:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4f30:	03 c0       	rjmp	.+6      	; 0x4f38 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	01 c0       	rjmp	.+2      	; 0x4f38 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    4f36:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	08 95       	ret

00004f3e <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    4f3e:	cf 92       	push	r12
    4f40:	df 92       	push	r13
    4f42:	ef 92       	push	r14
    4f44:	ff 92       	push	r15
    4f46:	0f 93       	push	r16
    4f48:	1f 93       	push	r17
    4f4a:	cf 93       	push	r28
    4f4c:	fc 01       	movw	r30, r24
    4f4e:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4f50:	80 81       	ld	r24, Z
		if(!c)
    4f52:	88 23       	and	r24, r24
    4f54:	c1 f0       	breq	.+48     	; 0x4f86 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4f56:	8f 01       	movw	r16, r30
    4f58:	0f 5f       	subi	r16, 0xFF	; 255
    4f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f5c:	7f 01       	movw	r14, r30
    4f5e:	94 e1       	ldi	r25, 0x14	; 20
    4f60:	e9 0e       	add	r14, r25
    4f62:	f1 1c       	adc	r15, r1
    4f64:	c0 e0       	ldi	r28, 0x00	; 0
    4f66:	05 c0       	rjmp	.+10     	; 0x4f72 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4f68:	f8 01       	movw	r30, r16
    4f6a:	81 91       	ld	r24, Z+
    4f6c:	8f 01       	movw	r16, r30
		if(!c)
    4f6e:	88 23       	and	r24, r24
    4f70:	59 f0       	breq	.+22     	; 0x4f88 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4f72:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4f76:	6d 3f       	cpi	r22, 0xFD	; 253
    4f78:	08 f4       	brcc	.+2      	; 0x4f7c <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4f7a:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    4f7c:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    4f7e:	0e 15       	cp	r16, r14
    4f80:	1f 05       	cpc	r17, r15
    4f82:	91 f7       	brne	.-28     	; 0x4f68 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4f86:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4f88:	80 eb       	ldi	r24, 0xB0	; 176
    4f8a:	94 e0       	ldi	r25, 0x04	; 4
    4f8c:	b6 01       	movw	r22, r12
    4f8e:	0e 94 ef 2c 	call	0x59de	; 0x59de <__udivmodhi4>
}
    4f92:	c6 9f       	mul	r28, r22
    4f94:	c0 01       	movw	r24, r0
    4f96:	c7 9f       	mul	r28, r23
    4f98:	90 0d       	add	r25, r0
    4f9a:	11 24       	eor	r1, r1
    4f9c:	cf 91       	pop	r28
    4f9e:	1f 91       	pop	r17
    4fa0:	0f 91       	pop	r16
    4fa2:	ff 90       	pop	r15
    4fa4:	ef 90       	pop	r14
    4fa6:	df 90       	pop	r13
    4fa8:	cf 90       	pop	r12
    4faa:	08 95       	ret

00004fac <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    4fac:	98 2f       	mov	r25, r24
    4fae:	96 95       	lsr	r25
    4fb0:	96 95       	lsr	r25
    4fb2:	96 95       	lsr	r25
    4fb4:	9e 71       	andi	r25, 0x1E	; 30
    4fb6:	29 2f       	mov	r18, r25
    4fb8:	22 0f       	add	r18, r18
    4fba:	22 0f       	add	r18, r18
    4fbc:	92 0f       	add	r25, r18
    4fbe:	8f 70       	andi	r24, 0x0F	; 15
    4fc0:	89 0f       	add	r24, r25
    4fc2:	08 95       	ret

00004fc4 <_Z8char2bcdPc>:
    4fc4:	fc 01       	movw	r30, r24
    4fc6:	20 81       	ld	r18, Z
    4fc8:	81 81       	ldd	r24, Z+1	; 0x01
    4fca:	80 53       	subi	r24, 0x30	; 48
    4fcc:	f0 e1       	ldi	r31, 0x10	; 16
    4fce:	2f 9f       	mul	r18, r31
    4fd0:	80 0d       	add	r24, r0
    4fd2:	11 24       	eor	r1, r1
    4fd4:	08 95       	ret

00004fd6 <_Z16rv3028_set_epochm>:
    4fd6:	cf 93       	push	r28
    4fd8:	df 93       	push	r29
    4fda:	00 d0       	rcall	.+0      	; 0x4fdc <_Z16rv3028_set_epochm+0x6>
    4fdc:	00 d0       	rcall	.+0      	; 0x4fde <_Z16rv3028_set_epochm+0x8>
    4fde:	1f 92       	push	r1
    4fe0:	cd b7       	in	r28, 0x3d	; 61
    4fe2:	de b7       	in	r29, 0x3e	; 62
    4fe4:	ae 01       	movw	r20, r28
    4fe6:	4f 5f       	subi	r20, 0xFF	; 255
    4fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fea:	25 e0       	ldi	r18, 0x05	; 5
    4fec:	fa 01       	movw	r30, r20
    4fee:	11 92       	st	Z+, r1
    4ff0:	2a 95       	dec	r18
    4ff2:	e9 f7       	brne	.-6      	; 0x4fee <_Z16rv3028_set_epochm+0x18>
    4ff4:	9c 83       	std	Y+4, r25	; 0x04
    4ff6:	8b 83       	std	Y+3, r24	; 0x03
    4ff8:	7a 83       	std	Y+2, r23	; 0x02
    4ffa:	69 83       	std	Y+1, r22	; 0x01
    4ffc:	24 e0       	ldi	r18, 0x04	; 4
    4ffe:	6b e1       	ldi	r22, 0x1B	; 27
    5000:	84 ea       	ldi	r24, 0xA4	; 164
    5002:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z16i2c_device_writehhPhh>
    5006:	0f 90       	pop	r0
    5008:	0f 90       	pop	r0
    500a:	0f 90       	pop	r0
    500c:	0f 90       	pop	r0
    500e:	0f 90       	pop	r0
    5010:	df 91       	pop	r29
    5012:	cf 91       	pop	r28
    5014:	08 95       	ret

00005016 <_Z16rv3028_get_epochv>:
    5016:	cf 93       	push	r28
    5018:	df 93       	push	r29
    501a:	00 d0       	rcall	.+0      	; 0x501c <_Z16rv3028_get_epochv+0x6>
    501c:	00 d0       	rcall	.+0      	; 0x501e <_Z16rv3028_get_epochv+0x8>
    501e:	cd b7       	in	r28, 0x3d	; 61
    5020:	de b7       	in	r29, 0x3e	; 62
    5022:	19 82       	std	Y+1, r1	; 0x01
    5024:	1a 82       	std	Y+2, r1	; 0x02
    5026:	1b 82       	std	Y+3, r1	; 0x03
    5028:	1c 82       	std	Y+4, r1	; 0x04
    502a:	24 e0       	ldi	r18, 0x04	; 4
    502c:	ae 01       	movw	r20, r28
    502e:	4f 5f       	subi	r20, 0xFF	; 255
    5030:	5f 4f       	sbci	r21, 0xFF	; 255
    5032:	6b e1       	ldi	r22, 0x1B	; 27
    5034:	84 ea       	ldi	r24, 0xA4	; 164
    5036:	0e 94 17 08 	call	0x102e	; 0x102e <_Z15i2c_device_readhhPhh>
    503a:	81 11       	cpse	r24, r1
    503c:	11 c0       	rjmp	.+34     	; 0x5060 <_Z16rv3028_get_epochv+0x4a>
    503e:	2a 81       	ldd	r18, Y+2	; 0x02
    5040:	6b 81       	ldd	r22, Y+3	; 0x03
    5042:	86 2f       	mov	r24, r22
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	a0 e0       	ldi	r26, 0x00	; 0
    5048:	b0 e0       	ldi	r27, 0x00	; 0
    504a:	dc 01       	movw	r26, r24
    504c:	99 27       	eor	r25, r25
    504e:	88 27       	eor	r24, r24
    5050:	92 2b       	or	r25, r18
    5052:	29 81       	ldd	r18, Y+1	; 0x01
    5054:	82 2b       	or	r24, r18
    5056:	2c 81       	ldd	r18, Y+4	; 0x04
    5058:	bc 01       	movw	r22, r24
    505a:	cd 01       	movw	r24, r26
    505c:	92 2b       	or	r25, r18
    505e:	03 c0       	rjmp	.+6      	; 0x5066 <_Z16rv3028_get_epochv+0x50>
    5060:	60 e0       	ldi	r22, 0x00	; 0
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	cb 01       	movw	r24, r22
    5066:	0f 90       	pop	r0
    5068:	0f 90       	pop	r0
    506a:	0f 90       	pop	r0
    506c:	0f 90       	pop	r0
    506e:	df 91       	pop	r29
    5070:	cf 91       	pop	r28
    5072:	08 95       	ret

00005074 <_Z16rv3028_get_epochPbPc>:
    5074:	6f 92       	push	r6
    5076:	7f 92       	push	r7
    5078:	8f 92       	push	r8
    507a:	9f 92       	push	r9
    507c:	af 92       	push	r10
    507e:	bf 92       	push	r11
    5080:	cf 92       	push	r12
    5082:	df 92       	push	r13
    5084:	ef 92       	push	r14
    5086:	ff 92       	push	r15
    5088:	0f 93       	push	r16
    508a:	1f 93       	push	r17
    508c:	cf 93       	push	r28
    508e:	df 93       	push	r29
    5090:	6c 01       	movw	r12, r24
    5092:	eb 01       	movw	r28, r22
    5094:	20 97       	sbiw	r28, 0x00	; 0
    5096:	09 f4       	brne	.+2      	; 0x509a <_Z16rv3028_get_epochPbPc+0x26>
    5098:	b6 c0       	rjmp	.+364    	; 0x5206 <_Z16rv3028_get_epochPbPc+0x192>
    509a:	cb 01       	movw	r24, r22
    509c:	0a 96       	adiw	r24, 0x0a	; 10
    509e:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_Z8char2bcdPc>
    50a2:	88 2e       	mov	r8, r24
    50a4:	ce 01       	movw	r24, r28
    50a6:	08 96       	adiw	r24, 0x08	; 8
    50a8:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_Z8char2bcdPc>
    50ac:	78 2e       	mov	r7, r24
    50ae:	ce 01       	movw	r24, r28
    50b0:	06 96       	adiw	r24, 0x06	; 6
    50b2:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_Z8char2bcdPc>
    50b6:	98 2e       	mov	r9, r24
    50b8:	ce 01       	movw	r24, r28
    50ba:	04 96       	adiw	r24, 0x04	; 4
    50bc:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_Z8char2bcdPc>
    50c0:	18 2f       	mov	r17, r24
    50c2:	ce 01       	movw	r24, r28
    50c4:	02 96       	adiw	r24, 0x02	; 2
    50c6:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_Z8char2bcdPc>
    50ca:	08 2f       	mov	r16, r24
    50cc:	ce 01       	movw	r24, r28
    50ce:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_Z8char2bcdPc>
    50d2:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_Z7bcd2dech>
    50d6:	e8 2e       	mov	r14, r24
    50d8:	f1 2c       	mov	r15, r1
    50da:	57 01       	movw	r10, r14
    50dc:	80 e3       	ldi	r24, 0x30	; 48
    50de:	a8 1a       	sub	r10, r24
    50e0:	88 ef       	ldi	r24, 0xF8	; 248
    50e2:	b8 0a       	sbc	r11, r24
    50e4:	80 2f       	mov	r24, r16
    50e6:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_Z7bcd2dech>
    50ea:	d8 2f       	mov	r29, r24
    50ec:	81 2f       	mov	r24, r17
    50ee:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_Z7bcd2dech>
    50f2:	68 2e       	mov	r6, r24
    50f4:	d2 30       	cpi	r29, 0x02	; 2
    50f6:	68 f0       	brcs	.+26     	; 0x5112 <_Z16rv3028_get_epochPbPc+0x9e>
    50f8:	00 e0       	ldi	r16, 0x00	; 0
    50fa:	10 e0       	ldi	r17, 0x00	; 0
    50fc:	c1 e0       	ldi	r28, 0x01	; 1
    50fe:	6c 2f       	mov	r22, r28
    5100:	c5 01       	movw	r24, r10
    5102:	0e 94 40 01 	call	0x280	; 0x280 <month_length>
    5106:	08 0f       	add	r16, r24
    5108:	11 1d       	adc	r17, r1
    510a:	cf 5f       	subi	r28, 0xFF	; 255
    510c:	dc 13       	cpse	r29, r28
    510e:	f7 cf       	rjmp	.-18     	; 0x50fe <_Z16rv3028_get_epochPbPc+0x8a>
    5110:	02 c0       	rjmp	.+4      	; 0x5116 <_Z16rv3028_get_epochPbPc+0xa2>
    5112:	00 e0       	ldi	r16, 0x00	; 0
    5114:	10 e0       	ldi	r17, 0x00	; 0
    5116:	86 2d       	mov	r24, r6
    5118:	66 0c       	add	r6, r6
    511a:	99 0b       	sbc	r25, r25
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	08 0f       	add	r16, r24
    5120:	19 1f       	adc	r17, r25
    5122:	88 2d       	mov	r24, r8
    5124:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_Z7bcd2dech>
    5128:	88 2e       	mov	r8, r24
    512a:	87 2d       	mov	r24, r7
    512c:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_Z7bcd2dech>
    5130:	c8 2f       	mov	r28, r24
    5132:	89 2d       	mov	r24, r9
    5134:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_Z7bcd2dech>
    5138:	08 2c       	mov	r0, r8
    513a:	00 0c       	add	r0, r0
    513c:	99 08       	sbc	r9, r9
    513e:	9c e3       	ldi	r25, 0x3C	; 60
    5140:	c9 02       	muls	r28, r25
    5142:	80 0c       	add	r8, r0
    5144:	91 1c       	adc	r9, r1
    5146:	11 24       	eor	r1, r1
    5148:	09 2c       	mov	r0, r9
    514a:	00 0c       	add	r0, r0
    514c:	aa 08       	sbc	r10, r10
    514e:	bb 08       	sbc	r11, r11
    5150:	a8 2f       	mov	r26, r24
    5152:	88 0f       	add	r24, r24
    5154:	bb 0b       	sbc	r27, r27
    5156:	20 e1       	ldi	r18, 0x10	; 16
    5158:	3e e0       	ldi	r19, 0x0E	; 14
    515a:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <__usmulhisi3>
    515e:	86 0e       	add	r8, r22
    5160:	97 1e       	adc	r9, r23
    5162:	a8 1e       	adc	r10, r24
    5164:	b9 1e       	adc	r11, r25
    5166:	d8 01       	movw	r26, r16
    5168:	20 e8       	ldi	r18, 0x80	; 128
    516a:	31 e5       	ldi	r19, 0x51	; 81
    516c:	41 e0       	ldi	r20, 0x01	; 1
    516e:	50 e0       	ldi	r21, 0x00	; 0
    5170:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__mulshisi3>
    5174:	86 0e       	add	r8, r22
    5176:	97 1e       	adc	r9, r23
    5178:	a8 1e       	adc	r10, r24
    517a:	b9 1e       	adc	r11, r25
    517c:	d7 01       	movw	r26, r14
    517e:	5e 96       	adiw	r26, 0x1e	; 30
    5180:	20 e8       	ldi	r18, 0x80	; 128
    5182:	33 e3       	ldi	r19, 0x33	; 51
    5184:	41 ee       	ldi	r20, 0xE1	; 225
    5186:	51 e0       	ldi	r21, 0x01	; 1
    5188:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__mulshisi3>
    518c:	86 0e       	add	r8, r22
    518e:	97 1e       	adc	r9, r23
    5190:	a8 1e       	adc	r10, r24
    5192:	b9 1e       	adc	r11, r25
    5194:	c7 01       	movw	r24, r14
    5196:	4f 96       	adiw	r24, 0x1f	; 31
    5198:	dc 01       	movw	r26, r24
    519a:	0a f4       	brpl	.+2      	; 0x519e <_Z16rv3028_get_epochPbPc+0x12a>
    519c:	13 96       	adiw	r26, 0x03	; 3
    519e:	b5 95       	asr	r27
    51a0:	a7 95       	ror	r26
    51a2:	b5 95       	asr	r27
    51a4:	a7 95       	ror	r26
    51a6:	20 e8       	ldi	r18, 0x80	; 128
    51a8:	31 e5       	ldi	r19, 0x51	; 81
    51aa:	41 e0       	ldi	r20, 0x01	; 1
    51ac:	50 e0       	ldi	r21, 0x00	; 0
    51ae:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__mulshisi3>
    51b2:	86 0e       	add	r8, r22
    51b4:	97 1e       	adc	r9, r23
    51b6:	a8 1e       	adc	r10, r24
    51b8:	b9 1e       	adc	r11, r25
    51ba:	c7 01       	movw	r24, r14
    51bc:	8d 59       	subi	r24, 0x9D	; 157
    51be:	9f 4f       	sbci	r25, 0xFF	; 255
    51c0:	64 e6       	ldi	r22, 0x64	; 100
    51c2:	70 e0       	ldi	r23, 0x00	; 0
    51c4:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    51c8:	db 01       	movw	r26, r22
    51ca:	20 e8       	ldi	r18, 0x80	; 128
    51cc:	3e ea       	ldi	r19, 0xAE	; 174
    51ce:	4e ef       	ldi	r20, 0xFE	; 254
    51d0:	5f ef       	ldi	r21, 0xFF	; 255
    51d2:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__mulshisi3>
    51d6:	86 0e       	add	r8, r22
    51d8:	97 1e       	adc	r9, r23
    51da:	a8 1e       	adc	r10, r24
    51dc:	b9 1e       	adc	r11, r25
    51de:	c7 01       	movw	r24, r14
    51e0:	81 57       	subi	r24, 0x71	; 113
    51e2:	9e 4f       	sbci	r25, 0xFE	; 254
    51e4:	60 e9       	ldi	r22, 0x90	; 144
    51e6:	71 e0       	ldi	r23, 0x01	; 1
    51e8:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodhi4>
    51ec:	db 01       	movw	r26, r22
    51ee:	20 e8       	ldi	r18, 0x80	; 128
    51f0:	31 e5       	ldi	r19, 0x51	; 81
    51f2:	41 e0       	ldi	r20, 0x01	; 1
    51f4:	50 e0       	ldi	r21, 0x00	; 0
    51f6:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__mulshisi3>
    51fa:	68 0d       	add	r22, r8
    51fc:	79 1d       	adc	r23, r9
    51fe:	8a 1d       	adc	r24, r10
    5200:	9b 1d       	adc	r25, r11
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	09 c0       	rjmp	.+18     	; 0x5218 <_Z16rv3028_get_epochPbPc+0x1a4>
    5206:	0e 94 0b 28 	call	0x5016	; 0x5016 <_Z16rv3028_get_epochv>
    520a:	31 e0       	ldi	r19, 0x01	; 1
    520c:	61 15       	cp	r22, r1
    520e:	71 05       	cpc	r23, r1
    5210:	81 05       	cpc	r24, r1
    5212:	91 05       	cpc	r25, r1
    5214:	09 f0       	breq	.+2      	; 0x5218 <_Z16rv3028_get_epochPbPc+0x1a4>
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	c1 14       	cp	r12, r1
    521a:	d1 04       	cpc	r13, r1
    521c:	31 f0       	breq	.+12     	; 0x522a <_Z16rv3028_get_epochPbPc+0x1b6>
    521e:	21 e0       	ldi	r18, 0x01	; 1
    5220:	31 11       	cpse	r19, r1
    5222:	01 c0       	rjmp	.+2      	; 0x5226 <_Z16rv3028_get_epochPbPc+0x1b2>
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	f6 01       	movw	r30, r12
    5228:	20 83       	st	Z, r18
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	1f 91       	pop	r17
    5230:	0f 91       	pop	r16
    5232:	ff 90       	pop	r15
    5234:	ef 90       	pop	r14
    5236:	df 90       	pop	r13
    5238:	cf 90       	pop	r12
    523a:	bf 90       	pop	r11
    523c:	af 90       	pop	r10
    523e:	9f 90       	pop	r9
    5240:	8f 90       	pop	r8
    5242:	7f 90       	pop	r7
    5244:	6f 90       	pop	r6
    5246:	08 95       	ret

00005248 <_Z21rv3028_set_offset_RAMj>:
    5248:	cf 93       	push	r28
    524a:	df 93       	push	r29
    524c:	00 d0       	rcall	.+0      	; 0x524e <_Z21rv3028_set_offset_RAMj+0x6>
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
    5252:	20 e1       	ldi	r18, 0x10	; 16
    5254:	2a 83       	std	Y+2, r18	; 0x02
    5256:	9c 01       	movw	r18, r24
    5258:	36 95       	lsr	r19
    525a:	27 95       	ror	r18
    525c:	29 83       	std	Y+1, r18	; 0x01
    525e:	80 ff       	sbrs	r24, 0
    5260:	02 c0       	rjmp	.+4      	; 0x5266 <_Z21rv3028_set_offset_RAMj+0x1e>
    5262:	80 e9       	ldi	r24, 0x90	; 144
    5264:	8a 83       	std	Y+2, r24	; 0x02
    5266:	22 e0       	ldi	r18, 0x02	; 2
    5268:	ae 01       	movw	r20, r28
    526a:	4f 5f       	subi	r20, 0xFF	; 255
    526c:	5f 4f       	sbci	r21, 0xFF	; 255
    526e:	66 e3       	ldi	r22, 0x36	; 54
    5270:	84 ea       	ldi	r24, 0xA4	; 164
    5272:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z16i2c_device_writehhPhh>
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	08 95       	ret

00005280 <_Z13rv3028_1s_sqwh>:
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
    5284:	00 d0       	rcall	.+0      	; 0x5286 <_Z13rv3028_1s_sqwh+0x6>
    5286:	cd b7       	in	r28, 0x3d	; 61
    5288:	de b7       	in	r29, 0x3e	; 62
    528a:	19 82       	std	Y+1, r1	; 0x01
    528c:	88 23       	and	r24, r24
    528e:	31 f0       	breq	.+12     	; 0x529c <_Z13rv3028_1s_sqwh+0x1c>
    5290:	85 ec       	ldi	r24, 0xC5	; 197
    5292:	8a 83       	std	Y+2, r24	; 0x02
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <_ZL14g_1HzSqWave_on>
    529a:	04 c0       	rjmp	.+8      	; 0x52a4 <_Z13rv3028_1s_sqwh+0x24>
    529c:	85 e4       	ldi	r24, 0x45	; 69
    529e:	8a 83       	std	Y+2, r24	; 0x02
    52a0:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZL14g_1HzSqWave_on>
    52a4:	21 e0       	ldi	r18, 0x01	; 1
    52a6:	ae 01       	movw	r20, r28
    52a8:	4e 5f       	subi	r20, 0xFE	; 254
    52aa:	5f 4f       	sbci	r21, 0xFF	; 255
    52ac:	65 e3       	ldi	r22, 0x35	; 53
    52ae:	84 ea       	ldi	r24, 0xA4	; 164
    52b0:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z16i2c_device_writehhPhh>
    52b4:	89 81       	ldd	r24, Y+1	; 0x01
    52b6:	81 11       	cpse	r24, r1
    52b8:	0c c0       	rjmp	.+24     	; 0x52d2 <_Z13rv3028_1s_sqwh+0x52>
    52ba:	21 e0       	ldi	r18, 0x01	; 1
    52bc:	ae 01       	movw	r20, r28
    52be:	4f 5f       	subi	r20, 0xFF	; 255
    52c0:	5f 4f       	sbci	r21, 0xFF	; 255
    52c2:	6e e0       	ldi	r22, 0x0E	; 14
    52c4:	84 ea       	ldi	r24, 0xA4	; 164
    52c6:	0e 94 17 08 	call	0x102e	; 0x102e <_Z15i2c_device_readhhPhh>
    52ca:	89 81       	ldd	r24, Y+1	; 0x01
    52cc:	8f 76       	andi	r24, 0x6F	; 111
    52ce:	89 83       	std	Y+1, r24	; 0x01
    52d0:	02 c0       	rjmp	.+4      	; 0x52d6 <_Z13rv3028_1s_sqwh+0x56>
    52d2:	80 e8       	ldi	r24, 0x80	; 128
    52d4:	89 83       	std	Y+1, r24	; 0x01
    52d6:	1a 82       	std	Y+2, r1	; 0x02
    52d8:	21 e0       	ldi	r18, 0x01	; 1
    52da:	ae 01       	movw	r20, r28
    52dc:	4e 5f       	subi	r20, 0xFE	; 254
    52de:	5f 4f       	sbci	r21, 0xFF	; 255
    52e0:	6e e0       	ldi	r22, 0x0E	; 14
    52e2:	84 ea       	ldi	r24, 0xA4	; 164
    52e4:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z16i2c_device_writehhPhh>
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	0f 90       	pop	r0
    52ec:	0f 90       	pop	r0
    52ee:	df 91       	pop	r29
    52f0:	cf 91       	pop	r28
    52f2:	08 95       	ret

000052f4 <_Z18waitForEEPROMReadyv>:
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	1f 92       	push	r1
    52fa:	cd b7       	in	r28, 0x3d	; 61
    52fc:	de b7       	in	r29, 0x3e	; 62
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	89 83       	std	Y+1, r24	; 0x01
    5302:	21 e0       	ldi	r18, 0x01	; 1
    5304:	ae 01       	movw	r20, r28
    5306:	4f 5f       	subi	r20, 0xFF	; 255
    5308:	5f 4f       	sbci	r21, 0xFF	; 255
    530a:	6e e0       	ldi	r22, 0x0E	; 14
    530c:	84 ea       	ldi	r24, 0xA4	; 164
    530e:	0e 94 17 08 	call	0x102e	; 0x102e <_Z15i2c_device_readhhPhh>
    5312:	81 11       	cpse	r24, r1
    5314:	07 c0       	rjmp	.+14     	; 0x5324 <_Z18waitForEEPROMReadyv+0x30>
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	80 78       	andi	r24, 0x80	; 128
    531a:	89 83       	std	Y+1, r24	; 0x01
    531c:	81 11       	cpse	r24, r1
    531e:	f1 cf       	rjmp	.-30     	; 0x5302 <_Z18waitForEEPROMReadyv+0xe>
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	03 c0       	rjmp	.+6      	; 0x532a <_Z18waitForEEPROMReadyv+0x36>
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	88 23       	and	r24, r24
    5328:	d9 f3       	breq	.-10     	; 0x5320 <_Z18waitForEEPROMReadyv+0x2c>
    532a:	0f 90       	pop	r0
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	08 95       	ret

00005332 <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	1f 92       	push	r1
    5338:	cd b7       	in	r28, 0x3d	; 61
    533a:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    533c:	19 82       	std	Y+1, r1	; 0x01

		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    533e:	21 e0       	ldi	r18, 0x01	; 1
    5340:	ae 01       	movw	r20, r28
    5342:	4f 5f       	subi	r20, 0xFF	; 255
    5344:	5f 4f       	sbci	r21, 0xFF	; 255
    5346:	67 e2       	ldi	r22, 0x27	; 39
    5348:	84 ea       	ldi	r24, 0xA4	; 164
    534a:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    534e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    5352:	82 e1       	ldi	r24, 0x12	; 18
    5354:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    5356:	21 e0       	ldi	r18, 0x01	; 1
    5358:	ae 01       	movw	r20, r28
    535a:	4f 5f       	subi	r20, 0xFF	; 255
    535c:	5f 4f       	sbci	r21, 0xFF	; 255
    535e:	67 e2       	ldi	r22, 0x27	; 39
    5360:	84 ea       	ldi	r24, 0xA4	; 164
    5362:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    5366:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <_Z18waitForEEPROMReadyv>
	}
    536a:	0f 90       	pop	r0
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	08 95       	ret

00005372 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	00 d0       	rcall	.+0      	; 0x5378 <_Z21rv3028_get_offset_RAMv+0x6>
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    537c:	0e 94 99 29 	call	0x5332	; 0x5332 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    5380:	22 e0       	ldi	r18, 0x02	; 2
    5382:	ae 01       	movw	r20, r28
    5384:	4f 5f       	subi	r20, 0xFF	; 255
    5386:	5f 4f       	sbci	r21, 0xFF	; 255
    5388:	66 e3       	ldi	r22, 0x36	; 54
    538a:	84 ea       	ldi	r24, 0xA4	; 164
    538c:	0e 94 17 08 	call	0x102e	; 0x102e <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    5390:	89 81       	ldd	r24, Y+1	; 0x01
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	88 0f       	add	r24, r24
    5396:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    5398:	2a 81       	ldd	r18, Y+2	; 0x02
    539a:	22 23       	and	r18, r18
    539c:	0c f4       	brge	.+2      	; 0x53a0 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    539e:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	df 91       	pop	r29
    53a6:	cf 91       	pop	r28
    53a8:	08 95       	ret

000053aa <__subsf3>:
    53aa:	50 58       	subi	r21, 0x80	; 128

000053ac <__addsf3>:
    53ac:	bb 27       	eor	r27, r27
    53ae:	aa 27       	eor	r26, r26
    53b0:	0e 94 ed 29 	call	0x53da	; 0x53da <__addsf3x>
    53b4:	0c 94 97 2b 	jmp	0x572e	; 0x572e <__fp_round>
    53b8:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <__fp_pscA>
    53bc:	38 f0       	brcs	.+14     	; 0x53cc <__addsf3+0x20>
    53be:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__fp_pscB>
    53c2:	20 f0       	brcs	.+8      	; 0x53cc <__addsf3+0x20>
    53c4:	39 f4       	brne	.+14     	; 0x53d4 <__addsf3+0x28>
    53c6:	9f 3f       	cpi	r25, 0xFF	; 255
    53c8:	19 f4       	brne	.+6      	; 0x53d0 <__addsf3+0x24>
    53ca:	26 f4       	brtc	.+8      	; 0x53d4 <__addsf3+0x28>
    53cc:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <__fp_nan>
    53d0:	0e f4       	brtc	.+2      	; 0x53d4 <__addsf3+0x28>
    53d2:	e0 95       	com	r30
    53d4:	e7 fb       	bst	r30, 7
    53d6:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__fp_inf>

000053da <__addsf3x>:
    53da:	e9 2f       	mov	r30, r25
    53dc:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__fp_split3>
    53e0:	58 f3       	brcs	.-42     	; 0x53b8 <__addsf3+0xc>
    53e2:	ba 17       	cp	r27, r26
    53e4:	62 07       	cpc	r22, r18
    53e6:	73 07       	cpc	r23, r19
    53e8:	84 07       	cpc	r24, r20
    53ea:	95 07       	cpc	r25, r21
    53ec:	20 f0       	brcs	.+8      	; 0x53f6 <__addsf3x+0x1c>
    53ee:	79 f4       	brne	.+30     	; 0x540e <__addsf3x+0x34>
    53f0:	a6 f5       	brtc	.+104    	; 0x545a <__addsf3x+0x80>
    53f2:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <__fp_zero>
    53f6:	0e f4       	brtc	.+2      	; 0x53fa <__addsf3x+0x20>
    53f8:	e0 95       	com	r30
    53fa:	0b 2e       	mov	r0, r27
    53fc:	ba 2f       	mov	r27, r26
    53fe:	a0 2d       	mov	r26, r0
    5400:	0b 01       	movw	r0, r22
    5402:	b9 01       	movw	r22, r18
    5404:	90 01       	movw	r18, r0
    5406:	0c 01       	movw	r0, r24
    5408:	ca 01       	movw	r24, r20
    540a:	a0 01       	movw	r20, r0
    540c:	11 24       	eor	r1, r1
    540e:	ff 27       	eor	r31, r31
    5410:	59 1b       	sub	r21, r25
    5412:	99 f0       	breq	.+38     	; 0x543a <__addsf3x+0x60>
    5414:	59 3f       	cpi	r21, 0xF9	; 249
    5416:	50 f4       	brcc	.+20     	; 0x542c <__addsf3x+0x52>
    5418:	50 3e       	cpi	r21, 0xE0	; 224
    541a:	68 f1       	brcs	.+90     	; 0x5476 <__addsf3x+0x9c>
    541c:	1a 16       	cp	r1, r26
    541e:	f0 40       	sbci	r31, 0x00	; 0
    5420:	a2 2f       	mov	r26, r18
    5422:	23 2f       	mov	r18, r19
    5424:	34 2f       	mov	r19, r20
    5426:	44 27       	eor	r20, r20
    5428:	58 5f       	subi	r21, 0xF8	; 248
    542a:	f3 cf       	rjmp	.-26     	; 0x5412 <__addsf3x+0x38>
    542c:	46 95       	lsr	r20
    542e:	37 95       	ror	r19
    5430:	27 95       	ror	r18
    5432:	a7 95       	ror	r26
    5434:	f0 40       	sbci	r31, 0x00	; 0
    5436:	53 95       	inc	r21
    5438:	c9 f7       	brne	.-14     	; 0x542c <__addsf3x+0x52>
    543a:	7e f4       	brtc	.+30     	; 0x545a <__addsf3x+0x80>
    543c:	1f 16       	cp	r1, r31
    543e:	ba 0b       	sbc	r27, r26
    5440:	62 0b       	sbc	r22, r18
    5442:	73 0b       	sbc	r23, r19
    5444:	84 0b       	sbc	r24, r20
    5446:	ba f0       	brmi	.+46     	; 0x5476 <__addsf3x+0x9c>
    5448:	91 50       	subi	r25, 0x01	; 1
    544a:	a1 f0       	breq	.+40     	; 0x5474 <__addsf3x+0x9a>
    544c:	ff 0f       	add	r31, r31
    544e:	bb 1f       	adc	r27, r27
    5450:	66 1f       	adc	r22, r22
    5452:	77 1f       	adc	r23, r23
    5454:	88 1f       	adc	r24, r24
    5456:	c2 f7       	brpl	.-16     	; 0x5448 <__addsf3x+0x6e>
    5458:	0e c0       	rjmp	.+28     	; 0x5476 <__addsf3x+0x9c>
    545a:	ba 0f       	add	r27, r26
    545c:	62 1f       	adc	r22, r18
    545e:	73 1f       	adc	r23, r19
    5460:	84 1f       	adc	r24, r20
    5462:	48 f4       	brcc	.+18     	; 0x5476 <__addsf3x+0x9c>
    5464:	87 95       	ror	r24
    5466:	77 95       	ror	r23
    5468:	67 95       	ror	r22
    546a:	b7 95       	ror	r27
    546c:	f7 95       	ror	r31
    546e:	9e 3f       	cpi	r25, 0xFE	; 254
    5470:	08 f0       	brcs	.+2      	; 0x5474 <__addsf3x+0x9a>
    5472:	b0 cf       	rjmp	.-160    	; 0x53d4 <__addsf3+0x28>
    5474:	93 95       	inc	r25
    5476:	88 0f       	add	r24, r24
    5478:	08 f0       	brcs	.+2      	; 0x547c <__addsf3x+0xa2>
    547a:	99 27       	eor	r25, r25
    547c:	ee 0f       	add	r30, r30
    547e:	97 95       	ror	r25
    5480:	87 95       	ror	r24
    5482:	08 95       	ret

00005484 <__cmpsf2>:
    5484:	0e 94 31 2b 	call	0x5662	; 0x5662 <__fp_cmp>
    5488:	08 f4       	brcc	.+2      	; 0x548c <__cmpsf2+0x8>
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	08 95       	ret

0000548e <cos>:
    548e:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <__fp_rempio2>
    5492:	e3 95       	inc	r30
    5494:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__fp_sinus>

00005498 <__divsf3>:
    5498:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <__divsf3x>
    549c:	0c 94 97 2b 	jmp	0x572e	; 0x572e <__fp_round>
    54a0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__fp_pscB>
    54a4:	58 f0       	brcs	.+22     	; 0x54bc <__divsf3+0x24>
    54a6:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <__fp_pscA>
    54aa:	40 f0       	brcs	.+16     	; 0x54bc <__divsf3+0x24>
    54ac:	29 f4       	brne	.+10     	; 0x54b8 <__divsf3+0x20>
    54ae:	5f 3f       	cpi	r21, 0xFF	; 255
    54b0:	29 f0       	breq	.+10     	; 0x54bc <__divsf3+0x24>
    54b2:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__fp_inf>
    54b6:	51 11       	cpse	r21, r1
    54b8:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__fp_szero>
    54bc:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <__fp_nan>

000054c0 <__divsf3x>:
    54c0:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__fp_split3>
    54c4:	68 f3       	brcs	.-38     	; 0x54a0 <__divsf3+0x8>

000054c6 <__divsf3_pse>:
    54c6:	99 23       	and	r25, r25
    54c8:	b1 f3       	breq	.-20     	; 0x54b6 <__divsf3+0x1e>
    54ca:	55 23       	and	r21, r21
    54cc:	91 f3       	breq	.-28     	; 0x54b2 <__divsf3+0x1a>
    54ce:	95 1b       	sub	r25, r21
    54d0:	55 0b       	sbc	r21, r21
    54d2:	bb 27       	eor	r27, r27
    54d4:	aa 27       	eor	r26, r26
    54d6:	62 17       	cp	r22, r18
    54d8:	73 07       	cpc	r23, r19
    54da:	84 07       	cpc	r24, r20
    54dc:	38 f0       	brcs	.+14     	; 0x54ec <__divsf3_pse+0x26>
    54de:	9f 5f       	subi	r25, 0xFF	; 255
    54e0:	5f 4f       	sbci	r21, 0xFF	; 255
    54e2:	22 0f       	add	r18, r18
    54e4:	33 1f       	adc	r19, r19
    54e6:	44 1f       	adc	r20, r20
    54e8:	aa 1f       	adc	r26, r26
    54ea:	a9 f3       	breq	.-22     	; 0x54d6 <__divsf3_pse+0x10>
    54ec:	35 d0       	rcall	.+106    	; 0x5558 <__divsf3_pse+0x92>
    54ee:	0e 2e       	mov	r0, r30
    54f0:	3a f0       	brmi	.+14     	; 0x5500 <__divsf3_pse+0x3a>
    54f2:	e0 e8       	ldi	r30, 0x80	; 128
    54f4:	32 d0       	rcall	.+100    	; 0x555a <__divsf3_pse+0x94>
    54f6:	91 50       	subi	r25, 0x01	; 1
    54f8:	50 40       	sbci	r21, 0x00	; 0
    54fa:	e6 95       	lsr	r30
    54fc:	00 1c       	adc	r0, r0
    54fe:	ca f7       	brpl	.-14     	; 0x54f2 <__divsf3_pse+0x2c>
    5500:	2b d0       	rcall	.+86     	; 0x5558 <__divsf3_pse+0x92>
    5502:	fe 2f       	mov	r31, r30
    5504:	29 d0       	rcall	.+82     	; 0x5558 <__divsf3_pse+0x92>
    5506:	66 0f       	add	r22, r22
    5508:	77 1f       	adc	r23, r23
    550a:	88 1f       	adc	r24, r24
    550c:	bb 1f       	adc	r27, r27
    550e:	26 17       	cp	r18, r22
    5510:	37 07       	cpc	r19, r23
    5512:	48 07       	cpc	r20, r24
    5514:	ab 07       	cpc	r26, r27
    5516:	b0 e8       	ldi	r27, 0x80	; 128
    5518:	09 f0       	breq	.+2      	; 0x551c <__divsf3_pse+0x56>
    551a:	bb 0b       	sbc	r27, r27
    551c:	80 2d       	mov	r24, r0
    551e:	bf 01       	movw	r22, r30
    5520:	ff 27       	eor	r31, r31
    5522:	93 58       	subi	r25, 0x83	; 131
    5524:	5f 4f       	sbci	r21, 0xFF	; 255
    5526:	3a f0       	brmi	.+14     	; 0x5536 <__divsf3_pse+0x70>
    5528:	9e 3f       	cpi	r25, 0xFE	; 254
    552a:	51 05       	cpc	r21, r1
    552c:	78 f0       	brcs	.+30     	; 0x554c <__divsf3_pse+0x86>
    552e:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__fp_inf>
    5532:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__fp_szero>
    5536:	5f 3f       	cpi	r21, 0xFF	; 255
    5538:	e4 f3       	brlt	.-8      	; 0x5532 <__divsf3_pse+0x6c>
    553a:	98 3e       	cpi	r25, 0xE8	; 232
    553c:	d4 f3       	brlt	.-12     	; 0x5532 <__divsf3_pse+0x6c>
    553e:	86 95       	lsr	r24
    5540:	77 95       	ror	r23
    5542:	67 95       	ror	r22
    5544:	b7 95       	ror	r27
    5546:	f7 95       	ror	r31
    5548:	9f 5f       	subi	r25, 0xFF	; 255
    554a:	c9 f7       	brne	.-14     	; 0x553e <__divsf3_pse+0x78>
    554c:	88 0f       	add	r24, r24
    554e:	91 1d       	adc	r25, r1
    5550:	96 95       	lsr	r25
    5552:	87 95       	ror	r24
    5554:	97 f9       	bld	r25, 7
    5556:	08 95       	ret
    5558:	e1 e0       	ldi	r30, 0x01	; 1
    555a:	66 0f       	add	r22, r22
    555c:	77 1f       	adc	r23, r23
    555e:	88 1f       	adc	r24, r24
    5560:	bb 1f       	adc	r27, r27
    5562:	62 17       	cp	r22, r18
    5564:	73 07       	cpc	r23, r19
    5566:	84 07       	cpc	r24, r20
    5568:	ba 07       	cpc	r27, r26
    556a:	20 f0       	brcs	.+8      	; 0x5574 <__divsf3_pse+0xae>
    556c:	62 1b       	sub	r22, r18
    556e:	73 0b       	sbc	r23, r19
    5570:	84 0b       	sbc	r24, r20
    5572:	ba 0b       	sbc	r27, r26
    5574:	ee 1f       	adc	r30, r30
    5576:	88 f7       	brcc	.-30     	; 0x555a <__divsf3_pse+0x94>
    5578:	e0 95       	com	r30
    557a:	08 95       	ret

0000557c <__fixsfsi>:
    557c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__fixunssfsi>
    5580:	68 94       	set
    5582:	b1 11       	cpse	r27, r1
    5584:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__fp_szero>
    5588:	08 95       	ret

0000558a <__fixunssfsi>:
    558a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__fp_splitA>
    558e:	88 f0       	brcs	.+34     	; 0x55b2 <__fixunssfsi+0x28>
    5590:	9f 57       	subi	r25, 0x7F	; 127
    5592:	98 f0       	brcs	.+38     	; 0x55ba <__fixunssfsi+0x30>
    5594:	b9 2f       	mov	r27, r25
    5596:	99 27       	eor	r25, r25
    5598:	b7 51       	subi	r27, 0x17	; 23
    559a:	b0 f0       	brcs	.+44     	; 0x55c8 <__fixunssfsi+0x3e>
    559c:	e1 f0       	breq	.+56     	; 0x55d6 <__fixunssfsi+0x4c>
    559e:	66 0f       	add	r22, r22
    55a0:	77 1f       	adc	r23, r23
    55a2:	88 1f       	adc	r24, r24
    55a4:	99 1f       	adc	r25, r25
    55a6:	1a f0       	brmi	.+6      	; 0x55ae <__fixunssfsi+0x24>
    55a8:	ba 95       	dec	r27
    55aa:	c9 f7       	brne	.-14     	; 0x559e <__fixunssfsi+0x14>
    55ac:	14 c0       	rjmp	.+40     	; 0x55d6 <__fixunssfsi+0x4c>
    55ae:	b1 30       	cpi	r27, 0x01	; 1
    55b0:	91 f0       	breq	.+36     	; 0x55d6 <__fixunssfsi+0x4c>
    55b2:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__fp_zero>
    55b6:	b1 e0       	ldi	r27, 0x01	; 1
    55b8:	08 95       	ret
    55ba:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <__fp_zero>
    55be:	67 2f       	mov	r22, r23
    55c0:	78 2f       	mov	r23, r24
    55c2:	88 27       	eor	r24, r24
    55c4:	b8 5f       	subi	r27, 0xF8	; 248
    55c6:	39 f0       	breq	.+14     	; 0x55d6 <__fixunssfsi+0x4c>
    55c8:	b9 3f       	cpi	r27, 0xF9	; 249
    55ca:	cc f3       	brlt	.-14     	; 0x55be <__fixunssfsi+0x34>
    55cc:	86 95       	lsr	r24
    55ce:	77 95       	ror	r23
    55d0:	67 95       	ror	r22
    55d2:	b3 95       	inc	r27
    55d4:	d9 f7       	brne	.-10     	; 0x55cc <__fixunssfsi+0x42>
    55d6:	3e f4       	brtc	.+14     	; 0x55e6 <__fixunssfsi+0x5c>
    55d8:	90 95       	com	r25
    55da:	80 95       	com	r24
    55dc:	70 95       	com	r23
    55de:	61 95       	neg	r22
    55e0:	7f 4f       	sbci	r23, 0xFF	; 255
    55e2:	8f 4f       	sbci	r24, 0xFF	; 255
    55e4:	9f 4f       	sbci	r25, 0xFF	; 255
    55e6:	08 95       	ret

000055e8 <__floatunsisf>:
    55e8:	e8 94       	clt
    55ea:	09 c0       	rjmp	.+18     	; 0x55fe <__floatsisf+0x12>

000055ec <__floatsisf>:
    55ec:	97 fb       	bst	r25, 7
    55ee:	3e f4       	brtc	.+14     	; 0x55fe <__floatsisf+0x12>
    55f0:	90 95       	com	r25
    55f2:	80 95       	com	r24
    55f4:	70 95       	com	r23
    55f6:	61 95       	neg	r22
    55f8:	7f 4f       	sbci	r23, 0xFF	; 255
    55fa:	8f 4f       	sbci	r24, 0xFF	; 255
    55fc:	9f 4f       	sbci	r25, 0xFF	; 255
    55fe:	99 23       	and	r25, r25
    5600:	a9 f0       	breq	.+42     	; 0x562c <__floatsisf+0x40>
    5602:	f9 2f       	mov	r31, r25
    5604:	96 e9       	ldi	r25, 0x96	; 150
    5606:	bb 27       	eor	r27, r27
    5608:	93 95       	inc	r25
    560a:	f6 95       	lsr	r31
    560c:	87 95       	ror	r24
    560e:	77 95       	ror	r23
    5610:	67 95       	ror	r22
    5612:	b7 95       	ror	r27
    5614:	f1 11       	cpse	r31, r1
    5616:	f8 cf       	rjmp	.-16     	; 0x5608 <__floatsisf+0x1c>
    5618:	fa f4       	brpl	.+62     	; 0x5658 <__floatsisf+0x6c>
    561a:	bb 0f       	add	r27, r27
    561c:	11 f4       	brne	.+4      	; 0x5622 <__floatsisf+0x36>
    561e:	60 ff       	sbrs	r22, 0
    5620:	1b c0       	rjmp	.+54     	; 0x5658 <__floatsisf+0x6c>
    5622:	6f 5f       	subi	r22, 0xFF	; 255
    5624:	7f 4f       	sbci	r23, 0xFF	; 255
    5626:	8f 4f       	sbci	r24, 0xFF	; 255
    5628:	9f 4f       	sbci	r25, 0xFF	; 255
    562a:	16 c0       	rjmp	.+44     	; 0x5658 <__floatsisf+0x6c>
    562c:	88 23       	and	r24, r24
    562e:	11 f0       	breq	.+4      	; 0x5634 <__floatsisf+0x48>
    5630:	96 e9       	ldi	r25, 0x96	; 150
    5632:	11 c0       	rjmp	.+34     	; 0x5656 <__floatsisf+0x6a>
    5634:	77 23       	and	r23, r23
    5636:	21 f0       	breq	.+8      	; 0x5640 <__floatsisf+0x54>
    5638:	9e e8       	ldi	r25, 0x8E	; 142
    563a:	87 2f       	mov	r24, r23
    563c:	76 2f       	mov	r23, r22
    563e:	05 c0       	rjmp	.+10     	; 0x564a <__floatsisf+0x5e>
    5640:	66 23       	and	r22, r22
    5642:	71 f0       	breq	.+28     	; 0x5660 <__floatsisf+0x74>
    5644:	96 e8       	ldi	r25, 0x86	; 134
    5646:	86 2f       	mov	r24, r22
    5648:	70 e0       	ldi	r23, 0x00	; 0
    564a:	60 e0       	ldi	r22, 0x00	; 0
    564c:	2a f0       	brmi	.+10     	; 0x5658 <__floatsisf+0x6c>
    564e:	9a 95       	dec	r25
    5650:	66 0f       	add	r22, r22
    5652:	77 1f       	adc	r23, r23
    5654:	88 1f       	adc	r24, r24
    5656:	da f7       	brpl	.-10     	; 0x564e <__floatsisf+0x62>
    5658:	88 0f       	add	r24, r24
    565a:	96 95       	lsr	r25
    565c:	87 95       	ror	r24
    565e:	97 f9       	bld	r25, 7
    5660:	08 95       	ret

00005662 <__fp_cmp>:
    5662:	99 0f       	add	r25, r25
    5664:	00 08       	sbc	r0, r0
    5666:	55 0f       	add	r21, r21
    5668:	aa 0b       	sbc	r26, r26
    566a:	e0 e8       	ldi	r30, 0x80	; 128
    566c:	fe ef       	ldi	r31, 0xFE	; 254
    566e:	16 16       	cp	r1, r22
    5670:	17 06       	cpc	r1, r23
    5672:	e8 07       	cpc	r30, r24
    5674:	f9 07       	cpc	r31, r25
    5676:	c0 f0       	brcs	.+48     	; 0x56a8 <__fp_cmp+0x46>
    5678:	12 16       	cp	r1, r18
    567a:	13 06       	cpc	r1, r19
    567c:	e4 07       	cpc	r30, r20
    567e:	f5 07       	cpc	r31, r21
    5680:	98 f0       	brcs	.+38     	; 0x56a8 <__fp_cmp+0x46>
    5682:	62 1b       	sub	r22, r18
    5684:	73 0b       	sbc	r23, r19
    5686:	84 0b       	sbc	r24, r20
    5688:	95 0b       	sbc	r25, r21
    568a:	39 f4       	brne	.+14     	; 0x569a <__fp_cmp+0x38>
    568c:	0a 26       	eor	r0, r26
    568e:	61 f0       	breq	.+24     	; 0x56a8 <__fp_cmp+0x46>
    5690:	23 2b       	or	r18, r19
    5692:	24 2b       	or	r18, r20
    5694:	25 2b       	or	r18, r21
    5696:	21 f4       	brne	.+8      	; 0x56a0 <__fp_cmp+0x3e>
    5698:	08 95       	ret
    569a:	0a 26       	eor	r0, r26
    569c:	09 f4       	brne	.+2      	; 0x56a0 <__fp_cmp+0x3e>
    569e:	a1 40       	sbci	r26, 0x01	; 1
    56a0:	a6 95       	lsr	r26
    56a2:	8f ef       	ldi	r24, 0xFF	; 255
    56a4:	81 1d       	adc	r24, r1
    56a6:	81 1d       	adc	r24, r1
    56a8:	08 95       	ret

000056aa <__fp_inf>:
    56aa:	97 f9       	bld	r25, 7
    56ac:	9f 67       	ori	r25, 0x7F	; 127
    56ae:	80 e8       	ldi	r24, 0x80	; 128
    56b0:	70 e0       	ldi	r23, 0x00	; 0
    56b2:	60 e0       	ldi	r22, 0x00	; 0
    56b4:	08 95       	ret

000056b6 <__fp_nan>:
    56b6:	9f ef       	ldi	r25, 0xFF	; 255
    56b8:	80 ec       	ldi	r24, 0xC0	; 192
    56ba:	08 95       	ret

000056bc <__fp_pscA>:
    56bc:	00 24       	eor	r0, r0
    56be:	0a 94       	dec	r0
    56c0:	16 16       	cp	r1, r22
    56c2:	17 06       	cpc	r1, r23
    56c4:	18 06       	cpc	r1, r24
    56c6:	09 06       	cpc	r0, r25
    56c8:	08 95       	ret

000056ca <__fp_pscB>:
    56ca:	00 24       	eor	r0, r0
    56cc:	0a 94       	dec	r0
    56ce:	12 16       	cp	r1, r18
    56d0:	13 06       	cpc	r1, r19
    56d2:	14 06       	cpc	r1, r20
    56d4:	05 06       	cpc	r0, r21
    56d6:	08 95       	ret
    56d8:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <__fp_nan>

000056dc <__fp_rempio2>:
    56dc:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__fp_splitA>
    56e0:	d8 f3       	brcs	.-10     	; 0x56d8 <__fp_pscB+0xe>
    56e2:	e8 94       	clt
    56e4:	e0 e0       	ldi	r30, 0x00	; 0
    56e6:	bb 27       	eor	r27, r27
    56e8:	9f 57       	subi	r25, 0x7F	; 127
    56ea:	f0 f0       	brcs	.+60     	; 0x5728 <__fp_rempio2+0x4c>
    56ec:	2a ed       	ldi	r18, 0xDA	; 218
    56ee:	3f e0       	ldi	r19, 0x0F	; 15
    56f0:	49 ec       	ldi	r20, 0xC9	; 201
    56f2:	06 c0       	rjmp	.+12     	; 0x5700 <__fp_rempio2+0x24>
    56f4:	ee 0f       	add	r30, r30
    56f6:	bb 0f       	add	r27, r27
    56f8:	66 1f       	adc	r22, r22
    56fa:	77 1f       	adc	r23, r23
    56fc:	88 1f       	adc	r24, r24
    56fe:	28 f0       	brcs	.+10     	; 0x570a <__fp_rempio2+0x2e>
    5700:	b2 3a       	cpi	r27, 0xA2	; 162
    5702:	62 07       	cpc	r22, r18
    5704:	73 07       	cpc	r23, r19
    5706:	84 07       	cpc	r24, r20
    5708:	28 f0       	brcs	.+10     	; 0x5714 <__fp_rempio2+0x38>
    570a:	b2 5a       	subi	r27, 0xA2	; 162
    570c:	62 0b       	sbc	r22, r18
    570e:	73 0b       	sbc	r23, r19
    5710:	84 0b       	sbc	r24, r20
    5712:	e3 95       	inc	r30
    5714:	9a 95       	dec	r25
    5716:	72 f7       	brpl	.-36     	; 0x56f4 <__fp_rempio2+0x18>
    5718:	80 38       	cpi	r24, 0x80	; 128
    571a:	30 f4       	brcc	.+12     	; 0x5728 <__fp_rempio2+0x4c>
    571c:	9a 95       	dec	r25
    571e:	bb 0f       	add	r27, r27
    5720:	66 1f       	adc	r22, r22
    5722:	77 1f       	adc	r23, r23
    5724:	88 1f       	adc	r24, r24
    5726:	d2 f7       	brpl	.-12     	; 0x571c <__fp_rempio2+0x40>
    5728:	90 48       	sbci	r25, 0x80	; 128
    572a:	0c 94 98 2c 	jmp	0x5930	; 0x5930 <__fp_mpack_finite>

0000572e <__fp_round>:
    572e:	09 2e       	mov	r0, r25
    5730:	03 94       	inc	r0
    5732:	00 0c       	add	r0, r0
    5734:	11 f4       	brne	.+4      	; 0x573a <__fp_round+0xc>
    5736:	88 23       	and	r24, r24
    5738:	52 f0       	brmi	.+20     	; 0x574e <__fp_round+0x20>
    573a:	bb 0f       	add	r27, r27
    573c:	40 f4       	brcc	.+16     	; 0x574e <__fp_round+0x20>
    573e:	bf 2b       	or	r27, r31
    5740:	11 f4       	brne	.+4      	; 0x5746 <__fp_round+0x18>
    5742:	60 ff       	sbrs	r22, 0
    5744:	04 c0       	rjmp	.+8      	; 0x574e <__fp_round+0x20>
    5746:	6f 5f       	subi	r22, 0xFF	; 255
    5748:	7f 4f       	sbci	r23, 0xFF	; 255
    574a:	8f 4f       	sbci	r24, 0xFF	; 255
    574c:	9f 4f       	sbci	r25, 0xFF	; 255
    574e:	08 95       	ret

00005750 <__fp_sinus>:
    5750:	ef 93       	push	r30
    5752:	e0 ff       	sbrs	r30, 0
    5754:	07 c0       	rjmp	.+14     	; 0x5764 <__fp_sinus+0x14>
    5756:	a2 ea       	ldi	r26, 0xA2	; 162
    5758:	2a ed       	ldi	r18, 0xDA	; 218
    575a:	3f e0       	ldi	r19, 0x0F	; 15
    575c:	49 ec       	ldi	r20, 0xC9	; 201
    575e:	5f eb       	ldi	r21, 0xBF	; 191
    5760:	0e 94 ed 29 	call	0x53da	; 0x53da <__addsf3x>
    5764:	0e 94 97 2b 	call	0x572e	; 0x572e <__fp_round>
    5768:	0f 90       	pop	r0
    576a:	03 94       	inc	r0
    576c:	01 fc       	sbrc	r0, 1
    576e:	90 58       	subi	r25, 0x80	; 128
    5770:	ea e0       	ldi	r30, 0x0A	; 10
    5772:	f2 e0       	ldi	r31, 0x02	; 2
    5774:	0c 94 a4 2c 	jmp	0x5948	; 0x5948 <__fp_powsodd>

00005778 <__fp_split3>:
    5778:	57 fd       	sbrc	r21, 7
    577a:	90 58       	subi	r25, 0x80	; 128
    577c:	44 0f       	add	r20, r20
    577e:	55 1f       	adc	r21, r21
    5780:	59 f0       	breq	.+22     	; 0x5798 <__fp_splitA+0x10>
    5782:	5f 3f       	cpi	r21, 0xFF	; 255
    5784:	71 f0       	breq	.+28     	; 0x57a2 <__fp_splitA+0x1a>
    5786:	47 95       	ror	r20

00005788 <__fp_splitA>:
    5788:	88 0f       	add	r24, r24
    578a:	97 fb       	bst	r25, 7
    578c:	99 1f       	adc	r25, r25
    578e:	61 f0       	breq	.+24     	; 0x57a8 <__fp_splitA+0x20>
    5790:	9f 3f       	cpi	r25, 0xFF	; 255
    5792:	79 f0       	breq	.+30     	; 0x57b2 <__fp_splitA+0x2a>
    5794:	87 95       	ror	r24
    5796:	08 95       	ret
    5798:	12 16       	cp	r1, r18
    579a:	13 06       	cpc	r1, r19
    579c:	14 06       	cpc	r1, r20
    579e:	55 1f       	adc	r21, r21
    57a0:	f2 cf       	rjmp	.-28     	; 0x5786 <__fp_split3+0xe>
    57a2:	46 95       	lsr	r20
    57a4:	f1 df       	rcall	.-30     	; 0x5788 <__fp_splitA>
    57a6:	08 c0       	rjmp	.+16     	; 0x57b8 <__fp_splitA+0x30>
    57a8:	16 16       	cp	r1, r22
    57aa:	17 06       	cpc	r1, r23
    57ac:	18 06       	cpc	r1, r24
    57ae:	99 1f       	adc	r25, r25
    57b0:	f1 cf       	rjmp	.-30     	; 0x5794 <__fp_splitA+0xc>
    57b2:	86 95       	lsr	r24
    57b4:	71 05       	cpc	r23, r1
    57b6:	61 05       	cpc	r22, r1
    57b8:	08 94       	sec
    57ba:	08 95       	ret

000057bc <__fp_zero>:
    57bc:	e8 94       	clt

000057be <__fp_szero>:
    57be:	bb 27       	eor	r27, r27
    57c0:	66 27       	eor	r22, r22
    57c2:	77 27       	eor	r23, r23
    57c4:	cb 01       	movw	r24, r22
    57c6:	97 f9       	bld	r25, 7
    57c8:	08 95       	ret

000057ca <__gesf2>:
    57ca:	0e 94 31 2b 	call	0x5662	; 0x5662 <__fp_cmp>
    57ce:	08 f4       	brcc	.+2      	; 0x57d2 <__gesf2+0x8>
    57d0:	8f ef       	ldi	r24, 0xFF	; 255
    57d2:	08 95       	ret

000057d4 <__mulsf3>:
    57d4:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__mulsf3x>
    57d8:	0c 94 97 2b 	jmp	0x572e	; 0x572e <__fp_round>
    57dc:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <__fp_pscA>
    57e0:	38 f0       	brcs	.+14     	; 0x57f0 <__mulsf3+0x1c>
    57e2:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__fp_pscB>
    57e6:	20 f0       	brcs	.+8      	; 0x57f0 <__mulsf3+0x1c>
    57e8:	95 23       	and	r25, r21
    57ea:	11 f0       	breq	.+4      	; 0x57f0 <__mulsf3+0x1c>
    57ec:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__fp_inf>
    57f0:	0c 94 5b 2b 	jmp	0x56b6	; 0x56b6 <__fp_nan>
    57f4:	11 24       	eor	r1, r1
    57f6:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__fp_szero>

000057fa <__mulsf3x>:
    57fa:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__fp_split3>
    57fe:	70 f3       	brcs	.-36     	; 0x57dc <__mulsf3+0x8>

00005800 <__mulsf3_pse>:
    5800:	95 9f       	mul	r25, r21
    5802:	c1 f3       	breq	.-16     	; 0x57f4 <__mulsf3+0x20>
    5804:	95 0f       	add	r25, r21
    5806:	50 e0       	ldi	r21, 0x00	; 0
    5808:	55 1f       	adc	r21, r21
    580a:	62 9f       	mul	r22, r18
    580c:	f0 01       	movw	r30, r0
    580e:	72 9f       	mul	r23, r18
    5810:	bb 27       	eor	r27, r27
    5812:	f0 0d       	add	r31, r0
    5814:	b1 1d       	adc	r27, r1
    5816:	63 9f       	mul	r22, r19
    5818:	aa 27       	eor	r26, r26
    581a:	f0 0d       	add	r31, r0
    581c:	b1 1d       	adc	r27, r1
    581e:	aa 1f       	adc	r26, r26
    5820:	64 9f       	mul	r22, r20
    5822:	66 27       	eor	r22, r22
    5824:	b0 0d       	add	r27, r0
    5826:	a1 1d       	adc	r26, r1
    5828:	66 1f       	adc	r22, r22
    582a:	82 9f       	mul	r24, r18
    582c:	22 27       	eor	r18, r18
    582e:	b0 0d       	add	r27, r0
    5830:	a1 1d       	adc	r26, r1
    5832:	62 1f       	adc	r22, r18
    5834:	73 9f       	mul	r23, r19
    5836:	b0 0d       	add	r27, r0
    5838:	a1 1d       	adc	r26, r1
    583a:	62 1f       	adc	r22, r18
    583c:	83 9f       	mul	r24, r19
    583e:	a0 0d       	add	r26, r0
    5840:	61 1d       	adc	r22, r1
    5842:	22 1f       	adc	r18, r18
    5844:	74 9f       	mul	r23, r20
    5846:	33 27       	eor	r19, r19
    5848:	a0 0d       	add	r26, r0
    584a:	61 1d       	adc	r22, r1
    584c:	23 1f       	adc	r18, r19
    584e:	84 9f       	mul	r24, r20
    5850:	60 0d       	add	r22, r0
    5852:	21 1d       	adc	r18, r1
    5854:	82 2f       	mov	r24, r18
    5856:	76 2f       	mov	r23, r22
    5858:	6a 2f       	mov	r22, r26
    585a:	11 24       	eor	r1, r1
    585c:	9f 57       	subi	r25, 0x7F	; 127
    585e:	50 40       	sbci	r21, 0x00	; 0
    5860:	9a f0       	brmi	.+38     	; 0x5888 <__mulsf3_pse+0x88>
    5862:	f1 f0       	breq	.+60     	; 0x58a0 <__mulsf3_pse+0xa0>
    5864:	88 23       	and	r24, r24
    5866:	4a f0       	brmi	.+18     	; 0x587a <__mulsf3_pse+0x7a>
    5868:	ee 0f       	add	r30, r30
    586a:	ff 1f       	adc	r31, r31
    586c:	bb 1f       	adc	r27, r27
    586e:	66 1f       	adc	r22, r22
    5870:	77 1f       	adc	r23, r23
    5872:	88 1f       	adc	r24, r24
    5874:	91 50       	subi	r25, 0x01	; 1
    5876:	50 40       	sbci	r21, 0x00	; 0
    5878:	a9 f7       	brne	.-22     	; 0x5864 <__mulsf3_pse+0x64>
    587a:	9e 3f       	cpi	r25, 0xFE	; 254
    587c:	51 05       	cpc	r21, r1
    587e:	80 f0       	brcs	.+32     	; 0x58a0 <__mulsf3_pse+0xa0>
    5880:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__fp_inf>
    5884:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__fp_szero>
    5888:	5f 3f       	cpi	r21, 0xFF	; 255
    588a:	e4 f3       	brlt	.-8      	; 0x5884 <__mulsf3_pse+0x84>
    588c:	98 3e       	cpi	r25, 0xE8	; 232
    588e:	d4 f3       	brlt	.-12     	; 0x5884 <__mulsf3_pse+0x84>
    5890:	86 95       	lsr	r24
    5892:	77 95       	ror	r23
    5894:	67 95       	ror	r22
    5896:	b7 95       	ror	r27
    5898:	f7 95       	ror	r31
    589a:	e7 95       	ror	r30
    589c:	9f 5f       	subi	r25, 0xFF	; 255
    589e:	c1 f7       	brne	.-16     	; 0x5890 <__mulsf3_pse+0x90>
    58a0:	fe 2b       	or	r31, r30
    58a2:	88 0f       	add	r24, r24
    58a4:	91 1d       	adc	r25, r1
    58a6:	96 95       	lsr	r25
    58a8:	87 95       	ror	r24
    58aa:	97 f9       	bld	r25, 7
    58ac:	08 95       	ret

000058ae <round>:
    58ae:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__fp_splitA>
    58b2:	e8 f0       	brcs	.+58     	; 0x58ee <round+0x40>
    58b4:	9e 37       	cpi	r25, 0x7E	; 126
    58b6:	e8 f0       	brcs	.+58     	; 0x58f2 <round+0x44>
    58b8:	96 39       	cpi	r25, 0x96	; 150
    58ba:	b8 f4       	brcc	.+46     	; 0x58ea <round+0x3c>
    58bc:	9e 38       	cpi	r25, 0x8E	; 142
    58be:	48 f4       	brcc	.+18     	; 0x58d2 <round+0x24>
    58c0:	67 2f       	mov	r22, r23
    58c2:	78 2f       	mov	r23, r24
    58c4:	88 27       	eor	r24, r24
    58c6:	98 5f       	subi	r25, 0xF8	; 248
    58c8:	f9 cf       	rjmp	.-14     	; 0x58bc <round+0xe>
    58ca:	86 95       	lsr	r24
    58cc:	77 95       	ror	r23
    58ce:	67 95       	ror	r22
    58d0:	93 95       	inc	r25
    58d2:	95 39       	cpi	r25, 0x95	; 149
    58d4:	d0 f3       	brcs	.-12     	; 0x58ca <round+0x1c>
    58d6:	b6 2f       	mov	r27, r22
    58d8:	b1 70       	andi	r27, 0x01	; 1
    58da:	6b 0f       	add	r22, r27
    58dc:	71 1d       	adc	r23, r1
    58de:	81 1d       	adc	r24, r1
    58e0:	20 f4       	brcc	.+8      	; 0x58ea <round+0x3c>
    58e2:	87 95       	ror	r24
    58e4:	77 95       	ror	r23
    58e6:	67 95       	ror	r22
    58e8:	93 95       	inc	r25
    58ea:	0c 94 7b 2c 	jmp	0x58f6	; 0x58f6 <__fp_mintl>
    58ee:	0c 94 96 2c 	jmp	0x592c	; 0x592c <__fp_mpack>
    58f2:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__fp_szero>

000058f6 <__fp_mintl>:
    58f6:	88 23       	and	r24, r24
    58f8:	71 f4       	brne	.+28     	; 0x5916 <__fp_mintl+0x20>
    58fa:	77 23       	and	r23, r23
    58fc:	21 f0       	breq	.+8      	; 0x5906 <__fp_mintl+0x10>
    58fe:	98 50       	subi	r25, 0x08	; 8
    5900:	87 2b       	or	r24, r23
    5902:	76 2f       	mov	r23, r22
    5904:	07 c0       	rjmp	.+14     	; 0x5914 <__fp_mintl+0x1e>
    5906:	66 23       	and	r22, r22
    5908:	11 f4       	brne	.+4      	; 0x590e <__fp_mintl+0x18>
    590a:	99 27       	eor	r25, r25
    590c:	0d c0       	rjmp	.+26     	; 0x5928 <__fp_mintl+0x32>
    590e:	90 51       	subi	r25, 0x10	; 16
    5910:	86 2b       	or	r24, r22
    5912:	70 e0       	ldi	r23, 0x00	; 0
    5914:	60 e0       	ldi	r22, 0x00	; 0
    5916:	2a f0       	brmi	.+10     	; 0x5922 <__fp_mintl+0x2c>
    5918:	9a 95       	dec	r25
    591a:	66 0f       	add	r22, r22
    591c:	77 1f       	adc	r23, r23
    591e:	88 1f       	adc	r24, r24
    5920:	da f7       	brpl	.-10     	; 0x5918 <__fp_mintl+0x22>
    5922:	88 0f       	add	r24, r24
    5924:	96 95       	lsr	r25
    5926:	87 95       	ror	r24
    5928:	97 f9       	bld	r25, 7
    592a:	08 95       	ret

0000592c <__fp_mpack>:
    592c:	9f 3f       	cpi	r25, 0xFF	; 255
    592e:	31 f0       	breq	.+12     	; 0x593c <__fp_mpack_finite+0xc>

00005930 <__fp_mpack_finite>:
    5930:	91 50       	subi	r25, 0x01	; 1
    5932:	20 f4       	brcc	.+8      	; 0x593c <__fp_mpack_finite+0xc>
    5934:	87 95       	ror	r24
    5936:	77 95       	ror	r23
    5938:	67 95       	ror	r22
    593a:	b7 95       	ror	r27
    593c:	88 0f       	add	r24, r24
    593e:	91 1d       	adc	r25, r1
    5940:	96 95       	lsr	r25
    5942:	87 95       	ror	r24
    5944:	97 f9       	bld	r25, 7
    5946:	08 95       	ret

00005948 <__fp_powsodd>:
    5948:	9f 93       	push	r25
    594a:	8f 93       	push	r24
    594c:	7f 93       	push	r23
    594e:	6f 93       	push	r22
    5950:	ff 93       	push	r31
    5952:	ef 93       	push	r30
    5954:	9b 01       	movw	r18, r22
    5956:	ac 01       	movw	r20, r24
    5958:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <__mulsf3>
    595c:	ef 91       	pop	r30
    595e:	ff 91       	pop	r31
    5960:	0e 94 b8 2c 	call	0x5970	; 0x5970 <__fp_powser>
    5964:	2f 91       	pop	r18
    5966:	3f 91       	pop	r19
    5968:	4f 91       	pop	r20
    596a:	5f 91       	pop	r21
    596c:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__mulsf3>

00005970 <__fp_powser>:
    5970:	df 93       	push	r29
    5972:	cf 93       	push	r28
    5974:	1f 93       	push	r17
    5976:	0f 93       	push	r16
    5978:	ff 92       	push	r15
    597a:	ef 92       	push	r14
    597c:	df 92       	push	r13
    597e:	7b 01       	movw	r14, r22
    5980:	8c 01       	movw	r16, r24
    5982:	68 94       	set
    5984:	06 c0       	rjmp	.+12     	; 0x5992 <__fp_powser+0x22>
    5986:	da 2e       	mov	r13, r26
    5988:	ef 01       	movw	r28, r30
    598a:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__mulsf3x>
    598e:	fe 01       	movw	r30, r28
    5990:	e8 94       	clt
    5992:	a5 91       	lpm	r26, Z+
    5994:	25 91       	lpm	r18, Z+
    5996:	35 91       	lpm	r19, Z+
    5998:	45 91       	lpm	r20, Z+
    599a:	55 91       	lpm	r21, Z+
    599c:	a6 f3       	brts	.-24     	; 0x5986 <__fp_powser+0x16>
    599e:	ef 01       	movw	r28, r30
    59a0:	0e 94 ed 29 	call	0x53da	; 0x53da <__addsf3x>
    59a4:	fe 01       	movw	r30, r28
    59a6:	97 01       	movw	r18, r14
    59a8:	a8 01       	movw	r20, r16
    59aa:	da 94       	dec	r13
    59ac:	69 f7       	brne	.-38     	; 0x5988 <__fp_powser+0x18>
    59ae:	df 90       	pop	r13
    59b0:	ef 90       	pop	r14
    59b2:	ff 90       	pop	r15
    59b4:	0f 91       	pop	r16
    59b6:	1f 91       	pop	r17
    59b8:	cf 91       	pop	r28
    59ba:	df 91       	pop	r29
    59bc:	08 95       	ret

000059be <__mulsi3>:
    59be:	db 01       	movw	r26, r22
    59c0:	8f 93       	push	r24
    59c2:	9f 93       	push	r25
    59c4:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <__muluhisi3>
    59c8:	bf 91       	pop	r27
    59ca:	af 91       	pop	r26
    59cc:	a2 9f       	mul	r26, r18
    59ce:	80 0d       	add	r24, r0
    59d0:	91 1d       	adc	r25, r1
    59d2:	a3 9f       	mul	r26, r19
    59d4:	90 0d       	add	r25, r0
    59d6:	b2 9f       	mul	r27, r18
    59d8:	90 0d       	add	r25, r0
    59da:	11 24       	eor	r1, r1
    59dc:	08 95       	ret

000059de <__udivmodhi4>:
    59de:	aa 1b       	sub	r26, r26
    59e0:	bb 1b       	sub	r27, r27
    59e2:	51 e1       	ldi	r21, 0x11	; 17
    59e4:	07 c0       	rjmp	.+14     	; 0x59f4 <__udivmodhi4_ep>

000059e6 <__udivmodhi4_loop>:
    59e6:	aa 1f       	adc	r26, r26
    59e8:	bb 1f       	adc	r27, r27
    59ea:	a6 17       	cp	r26, r22
    59ec:	b7 07       	cpc	r27, r23
    59ee:	10 f0       	brcs	.+4      	; 0x59f4 <__udivmodhi4_ep>
    59f0:	a6 1b       	sub	r26, r22
    59f2:	b7 0b       	sbc	r27, r23

000059f4 <__udivmodhi4_ep>:
    59f4:	88 1f       	adc	r24, r24
    59f6:	99 1f       	adc	r25, r25
    59f8:	5a 95       	dec	r21
    59fa:	a9 f7       	brne	.-22     	; 0x59e6 <__udivmodhi4_loop>
    59fc:	80 95       	com	r24
    59fe:	90 95       	com	r25
    5a00:	bc 01       	movw	r22, r24
    5a02:	cd 01       	movw	r24, r26
    5a04:	08 95       	ret

00005a06 <__divmodhi4>:
    5a06:	97 fb       	bst	r25, 7
    5a08:	07 2e       	mov	r0, r23
    5a0a:	16 f4       	brtc	.+4      	; 0x5a10 <__divmodhi4+0xa>
    5a0c:	00 94       	com	r0
    5a0e:	07 d0       	rcall	.+14     	; 0x5a1e <__divmodhi4_neg1>
    5a10:	77 fd       	sbrc	r23, 7
    5a12:	09 d0       	rcall	.+18     	; 0x5a26 <__divmodhi4_neg2>
    5a14:	0e 94 ef 2c 	call	0x59de	; 0x59de <__udivmodhi4>
    5a18:	07 fc       	sbrc	r0, 7
    5a1a:	05 d0       	rcall	.+10     	; 0x5a26 <__divmodhi4_neg2>
    5a1c:	3e f4       	brtc	.+14     	; 0x5a2c <__divmodhi4_exit>

00005a1e <__divmodhi4_neg1>:
    5a1e:	90 95       	com	r25
    5a20:	81 95       	neg	r24
    5a22:	9f 4f       	sbci	r25, 0xFF	; 255
    5a24:	08 95       	ret

00005a26 <__divmodhi4_neg2>:
    5a26:	70 95       	com	r23
    5a28:	61 95       	neg	r22
    5a2a:	7f 4f       	sbci	r23, 0xFF	; 255

00005a2c <__divmodhi4_exit>:
    5a2c:	08 95       	ret

00005a2e <__udivmodsi4>:
    5a2e:	a1 e2       	ldi	r26, 0x21	; 33
    5a30:	1a 2e       	mov	r1, r26
    5a32:	aa 1b       	sub	r26, r26
    5a34:	bb 1b       	sub	r27, r27
    5a36:	fd 01       	movw	r30, r26
    5a38:	0d c0       	rjmp	.+26     	; 0x5a54 <__udivmodsi4_ep>

00005a3a <__udivmodsi4_loop>:
    5a3a:	aa 1f       	adc	r26, r26
    5a3c:	bb 1f       	adc	r27, r27
    5a3e:	ee 1f       	adc	r30, r30
    5a40:	ff 1f       	adc	r31, r31
    5a42:	a2 17       	cp	r26, r18
    5a44:	b3 07       	cpc	r27, r19
    5a46:	e4 07       	cpc	r30, r20
    5a48:	f5 07       	cpc	r31, r21
    5a4a:	20 f0       	brcs	.+8      	; 0x5a54 <__udivmodsi4_ep>
    5a4c:	a2 1b       	sub	r26, r18
    5a4e:	b3 0b       	sbc	r27, r19
    5a50:	e4 0b       	sbc	r30, r20
    5a52:	f5 0b       	sbc	r31, r21

00005a54 <__udivmodsi4_ep>:
    5a54:	66 1f       	adc	r22, r22
    5a56:	77 1f       	adc	r23, r23
    5a58:	88 1f       	adc	r24, r24
    5a5a:	99 1f       	adc	r25, r25
    5a5c:	1a 94       	dec	r1
    5a5e:	69 f7       	brne	.-38     	; 0x5a3a <__udivmodsi4_loop>
    5a60:	60 95       	com	r22
    5a62:	70 95       	com	r23
    5a64:	80 95       	com	r24
    5a66:	90 95       	com	r25
    5a68:	9b 01       	movw	r18, r22
    5a6a:	ac 01       	movw	r20, r24
    5a6c:	bd 01       	movw	r22, r26
    5a6e:	cf 01       	movw	r24, r30
    5a70:	08 95       	ret

00005a72 <__divmodsi4>:
    5a72:	05 2e       	mov	r0, r21
    5a74:	97 fb       	bst	r25, 7
    5a76:	1e f4       	brtc	.+6      	; 0x5a7e <__divmodsi4+0xc>
    5a78:	00 94       	com	r0
    5a7a:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <__negsi2>
    5a7e:	57 fd       	sbrc	r21, 7
    5a80:	07 d0       	rcall	.+14     	; 0x5a90 <__divmodsi4_neg2>
    5a82:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__udivmodsi4>
    5a86:	07 fc       	sbrc	r0, 7
    5a88:	03 d0       	rcall	.+6      	; 0x5a90 <__divmodsi4_neg2>
    5a8a:	4e f4       	brtc	.+18     	; 0x5a9e <__divmodsi4_exit>
    5a8c:	0c 94 50 2d 	jmp	0x5aa0	; 0x5aa0 <__negsi2>

00005a90 <__divmodsi4_neg2>:
    5a90:	50 95       	com	r21
    5a92:	40 95       	com	r20
    5a94:	30 95       	com	r19
    5a96:	21 95       	neg	r18
    5a98:	3f 4f       	sbci	r19, 0xFF	; 255
    5a9a:	4f 4f       	sbci	r20, 0xFF	; 255
    5a9c:	5f 4f       	sbci	r21, 0xFF	; 255

00005a9e <__divmodsi4_exit>:
    5a9e:	08 95       	ret

00005aa0 <__negsi2>:
    5aa0:	90 95       	com	r25
    5aa2:	80 95       	com	r24
    5aa4:	70 95       	com	r23
    5aa6:	61 95       	neg	r22
    5aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    5aac:	9f 4f       	sbci	r25, 0xFF	; 255
    5aae:	08 95       	ret

00005ab0 <__tablejump2__>:
    5ab0:	ee 0f       	add	r30, r30
    5ab2:	ff 1f       	adc	r31, r31
    5ab4:	05 90       	lpm	r0, Z+
    5ab6:	f4 91       	lpm	r31, Z
    5ab8:	e0 2d       	mov	r30, r0
    5aba:	09 94       	ijmp

00005abc <__umulhisi3>:
    5abc:	a2 9f       	mul	r26, r18
    5abe:	b0 01       	movw	r22, r0
    5ac0:	b3 9f       	mul	r27, r19
    5ac2:	c0 01       	movw	r24, r0
    5ac4:	a3 9f       	mul	r26, r19
    5ac6:	70 0d       	add	r23, r0
    5ac8:	81 1d       	adc	r24, r1
    5aca:	11 24       	eor	r1, r1
    5acc:	91 1d       	adc	r25, r1
    5ace:	b2 9f       	mul	r27, r18
    5ad0:	70 0d       	add	r23, r0
    5ad2:	81 1d       	adc	r24, r1
    5ad4:	11 24       	eor	r1, r1
    5ad6:	91 1d       	adc	r25, r1
    5ad8:	08 95       	ret

00005ada <__usmulhisi3>:
    5ada:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>

00005ade <__usmulhisi3_tail>:
    5ade:	b7 ff       	sbrs	r27, 7
    5ae0:	08 95       	ret
    5ae2:	82 1b       	sub	r24, r18
    5ae4:	93 0b       	sbc	r25, r19
    5ae6:	08 95       	ret

00005ae8 <__muluhisi3>:
    5ae8:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <__umulhisi3>
    5aec:	a5 9f       	mul	r26, r21
    5aee:	90 0d       	add	r25, r0
    5af0:	b4 9f       	mul	r27, r20
    5af2:	90 0d       	add	r25, r0
    5af4:	a4 9f       	mul	r26, r20
    5af6:	80 0d       	add	r24, r0
    5af8:	91 1d       	adc	r25, r1
    5afa:	11 24       	eor	r1, r1
    5afc:	08 95       	ret

00005afe <__mulshisi3>:
    5afe:	b7 ff       	sbrs	r27, 7
    5b00:	0c 94 74 2d 	jmp	0x5ae8	; 0x5ae8 <__muluhisi3>

00005b04 <__mulohisi3>:
    5b04:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <__muluhisi3>
    5b08:	82 1b       	sub	r24, r18
    5b0a:	93 0b       	sbc	r25, r19
    5b0c:	08 95       	ret

00005b0e <malloc>:
    5b0e:	0f 93       	push	r16
    5b10:	1f 93       	push	r17
    5b12:	cf 93       	push	r28
    5b14:	df 93       	push	r29
    5b16:	82 30       	cpi	r24, 0x02	; 2
    5b18:	91 05       	cpc	r25, r1
    5b1a:	10 f4       	brcc	.+4      	; 0x5b20 <malloc+0x12>
    5b1c:	82 e0       	ldi	r24, 0x02	; 2
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <__flp>
    5b24:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <__flp+0x1>
    5b28:	20 e0       	ldi	r18, 0x00	; 0
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	a0 e0       	ldi	r26, 0x00	; 0
    5b2e:	b0 e0       	ldi	r27, 0x00	; 0
    5b30:	30 97       	sbiw	r30, 0x00	; 0
    5b32:	19 f1       	breq	.+70     	; 0x5b7a <malloc+0x6c>
    5b34:	40 81       	ld	r20, Z
    5b36:	51 81       	ldd	r21, Z+1	; 0x01
    5b38:	02 81       	ldd	r16, Z+2	; 0x02
    5b3a:	13 81       	ldd	r17, Z+3	; 0x03
    5b3c:	48 17       	cp	r20, r24
    5b3e:	59 07       	cpc	r21, r25
    5b40:	c8 f0       	brcs	.+50     	; 0x5b74 <malloc+0x66>
    5b42:	84 17       	cp	r24, r20
    5b44:	95 07       	cpc	r25, r21
    5b46:	69 f4       	brne	.+26     	; 0x5b62 <malloc+0x54>
    5b48:	10 97       	sbiw	r26, 0x00	; 0
    5b4a:	31 f0       	breq	.+12     	; 0x5b58 <malloc+0x4a>
    5b4c:	12 96       	adiw	r26, 0x02	; 2
    5b4e:	0c 93       	st	X, r16
    5b50:	12 97       	sbiw	r26, 0x02	; 2
    5b52:	13 96       	adiw	r26, 0x03	; 3
    5b54:	1c 93       	st	X, r17
    5b56:	27 c0       	rjmp	.+78     	; 0x5ba6 <malloc+0x98>
    5b58:	00 93 8f 05 	sts	0x058F, r16	; 0x80058f <__flp>
    5b5c:	10 93 90 05 	sts	0x0590, r17	; 0x800590 <__flp+0x1>
    5b60:	22 c0       	rjmp	.+68     	; 0x5ba6 <malloc+0x98>
    5b62:	21 15       	cp	r18, r1
    5b64:	31 05       	cpc	r19, r1
    5b66:	19 f0       	breq	.+6      	; 0x5b6e <malloc+0x60>
    5b68:	42 17       	cp	r20, r18
    5b6a:	53 07       	cpc	r21, r19
    5b6c:	18 f4       	brcc	.+6      	; 0x5b74 <malloc+0x66>
    5b6e:	9a 01       	movw	r18, r20
    5b70:	bd 01       	movw	r22, r26
    5b72:	ef 01       	movw	r28, r30
    5b74:	df 01       	movw	r26, r30
    5b76:	f8 01       	movw	r30, r16
    5b78:	db cf       	rjmp	.-74     	; 0x5b30 <malloc+0x22>
    5b7a:	21 15       	cp	r18, r1
    5b7c:	31 05       	cpc	r19, r1
    5b7e:	f9 f0       	breq	.+62     	; 0x5bbe <malloc+0xb0>
    5b80:	28 1b       	sub	r18, r24
    5b82:	39 0b       	sbc	r19, r25
    5b84:	24 30       	cpi	r18, 0x04	; 4
    5b86:	31 05       	cpc	r19, r1
    5b88:	80 f4       	brcc	.+32     	; 0x5baa <malloc+0x9c>
    5b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b8e:	61 15       	cp	r22, r1
    5b90:	71 05       	cpc	r23, r1
    5b92:	21 f0       	breq	.+8      	; 0x5b9c <malloc+0x8e>
    5b94:	fb 01       	movw	r30, r22
    5b96:	93 83       	std	Z+3, r25	; 0x03
    5b98:	82 83       	std	Z+2, r24	; 0x02
    5b9a:	04 c0       	rjmp	.+8      	; 0x5ba4 <malloc+0x96>
    5b9c:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <__flp+0x1>
    5ba0:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <__flp>
    5ba4:	fe 01       	movw	r30, r28
    5ba6:	32 96       	adiw	r30, 0x02	; 2
    5ba8:	44 c0       	rjmp	.+136    	; 0x5c32 <malloc+0x124>
    5baa:	fe 01       	movw	r30, r28
    5bac:	e2 0f       	add	r30, r18
    5bae:	f3 1f       	adc	r31, r19
    5bb0:	81 93       	st	Z+, r24
    5bb2:	91 93       	st	Z+, r25
    5bb4:	22 50       	subi	r18, 0x02	; 2
    5bb6:	31 09       	sbc	r19, r1
    5bb8:	39 83       	std	Y+1, r19	; 0x01
    5bba:	28 83       	st	Y, r18
    5bbc:	3a c0       	rjmp	.+116    	; 0x5c32 <malloc+0x124>
    5bbe:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <__brkval>
    5bc2:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <__brkval+0x1>
    5bc6:	23 2b       	or	r18, r19
    5bc8:	41 f4       	brne	.+16     	; 0x5bda <malloc+0xcc>
    5bca:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5bce:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5bd2:	30 93 8e 05 	sts	0x058E, r19	; 0x80058e <__brkval+0x1>
    5bd6:	20 93 8d 05 	sts	0x058D, r18	; 0x80058d <__brkval>
    5bda:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5bde:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5be2:	21 15       	cp	r18, r1
    5be4:	31 05       	cpc	r19, r1
    5be6:	41 f4       	brne	.+16     	; 0x5bf8 <malloc+0xea>
    5be8:	2d b7       	in	r18, 0x3d	; 61
    5bea:	3e b7       	in	r19, 0x3e	; 62
    5bec:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5bf0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5bf4:	24 1b       	sub	r18, r20
    5bf6:	35 0b       	sbc	r19, r21
    5bf8:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <__brkval>
    5bfc:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <__brkval+0x1>
    5c00:	e2 17       	cp	r30, r18
    5c02:	f3 07       	cpc	r31, r19
    5c04:	a0 f4       	brcc	.+40     	; 0x5c2e <malloc+0x120>
    5c06:	2e 1b       	sub	r18, r30
    5c08:	3f 0b       	sbc	r19, r31
    5c0a:	28 17       	cp	r18, r24
    5c0c:	39 07       	cpc	r19, r25
    5c0e:	78 f0       	brcs	.+30     	; 0x5c2e <malloc+0x120>
    5c10:	ac 01       	movw	r20, r24
    5c12:	4e 5f       	subi	r20, 0xFE	; 254
    5c14:	5f 4f       	sbci	r21, 0xFF	; 255
    5c16:	24 17       	cp	r18, r20
    5c18:	35 07       	cpc	r19, r21
    5c1a:	48 f0       	brcs	.+18     	; 0x5c2e <malloc+0x120>
    5c1c:	4e 0f       	add	r20, r30
    5c1e:	5f 1f       	adc	r21, r31
    5c20:	50 93 8e 05 	sts	0x058E, r21	; 0x80058e <__brkval+0x1>
    5c24:	40 93 8d 05 	sts	0x058D, r20	; 0x80058d <__brkval>
    5c28:	81 93       	st	Z+, r24
    5c2a:	91 93       	st	Z+, r25
    5c2c:	02 c0       	rjmp	.+4      	; 0x5c32 <malloc+0x124>
    5c2e:	e0 e0       	ldi	r30, 0x00	; 0
    5c30:	f0 e0       	ldi	r31, 0x00	; 0
    5c32:	cf 01       	movw	r24, r30
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	1f 91       	pop	r17
    5c3a:	0f 91       	pop	r16
    5c3c:	08 95       	ret

00005c3e <free>:
    5c3e:	cf 93       	push	r28
    5c40:	df 93       	push	r29
    5c42:	00 97       	sbiw	r24, 0x00	; 0
    5c44:	09 f4       	brne	.+2      	; 0x5c48 <free+0xa>
    5c46:	81 c0       	rjmp	.+258    	; 0x5d4a <free+0x10c>
    5c48:	fc 01       	movw	r30, r24
    5c4a:	32 97       	sbiw	r30, 0x02	; 2
    5c4c:	13 82       	std	Z+3, r1	; 0x03
    5c4e:	12 82       	std	Z+2, r1	; 0x02
    5c50:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <__flp>
    5c54:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <__flp+0x1>
    5c58:	10 97       	sbiw	r26, 0x00	; 0
    5c5a:	81 f4       	brne	.+32     	; 0x5c7c <free+0x3e>
    5c5c:	20 81       	ld	r18, Z
    5c5e:	31 81       	ldd	r19, Z+1	; 0x01
    5c60:	82 0f       	add	r24, r18
    5c62:	93 1f       	adc	r25, r19
    5c64:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <__brkval>
    5c68:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <__brkval+0x1>
    5c6c:	28 17       	cp	r18, r24
    5c6e:	39 07       	cpc	r19, r25
    5c70:	51 f5       	brne	.+84     	; 0x5cc6 <free+0x88>
    5c72:	f0 93 8e 05 	sts	0x058E, r31	; 0x80058e <__brkval+0x1>
    5c76:	e0 93 8d 05 	sts	0x058D, r30	; 0x80058d <__brkval>
    5c7a:	67 c0       	rjmp	.+206    	; 0x5d4a <free+0x10c>
    5c7c:	ed 01       	movw	r28, r26
    5c7e:	20 e0       	ldi	r18, 0x00	; 0
    5c80:	30 e0       	ldi	r19, 0x00	; 0
    5c82:	ce 17       	cp	r28, r30
    5c84:	df 07       	cpc	r29, r31
    5c86:	40 f4       	brcc	.+16     	; 0x5c98 <free+0x5a>
    5c88:	4a 81       	ldd	r20, Y+2	; 0x02
    5c8a:	5b 81       	ldd	r21, Y+3	; 0x03
    5c8c:	9e 01       	movw	r18, r28
    5c8e:	41 15       	cp	r20, r1
    5c90:	51 05       	cpc	r21, r1
    5c92:	f1 f0       	breq	.+60     	; 0x5cd0 <free+0x92>
    5c94:	ea 01       	movw	r28, r20
    5c96:	f5 cf       	rjmp	.-22     	; 0x5c82 <free+0x44>
    5c98:	d3 83       	std	Z+3, r29	; 0x03
    5c9a:	c2 83       	std	Z+2, r28	; 0x02
    5c9c:	40 81       	ld	r20, Z
    5c9e:	51 81       	ldd	r21, Z+1	; 0x01
    5ca0:	84 0f       	add	r24, r20
    5ca2:	95 1f       	adc	r25, r21
    5ca4:	c8 17       	cp	r28, r24
    5ca6:	d9 07       	cpc	r29, r25
    5ca8:	59 f4       	brne	.+22     	; 0x5cc0 <free+0x82>
    5caa:	88 81       	ld	r24, Y
    5cac:	99 81       	ldd	r25, Y+1	; 0x01
    5cae:	84 0f       	add	r24, r20
    5cb0:	95 1f       	adc	r25, r21
    5cb2:	02 96       	adiw	r24, 0x02	; 2
    5cb4:	91 83       	std	Z+1, r25	; 0x01
    5cb6:	80 83       	st	Z, r24
    5cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cba:	9b 81       	ldd	r25, Y+3	; 0x03
    5cbc:	93 83       	std	Z+3, r25	; 0x03
    5cbe:	82 83       	std	Z+2, r24	; 0x02
    5cc0:	21 15       	cp	r18, r1
    5cc2:	31 05       	cpc	r19, r1
    5cc4:	29 f4       	brne	.+10     	; 0x5cd0 <free+0x92>
    5cc6:	f0 93 90 05 	sts	0x0590, r31	; 0x800590 <__flp+0x1>
    5cca:	e0 93 8f 05 	sts	0x058F, r30	; 0x80058f <__flp>
    5cce:	3d c0       	rjmp	.+122    	; 0x5d4a <free+0x10c>
    5cd0:	e9 01       	movw	r28, r18
    5cd2:	fb 83       	std	Y+3, r31	; 0x03
    5cd4:	ea 83       	std	Y+2, r30	; 0x02
    5cd6:	49 91       	ld	r20, Y+
    5cd8:	59 91       	ld	r21, Y+
    5cda:	c4 0f       	add	r28, r20
    5cdc:	d5 1f       	adc	r29, r21
    5cde:	ec 17       	cp	r30, r28
    5ce0:	fd 07       	cpc	r31, r29
    5ce2:	61 f4       	brne	.+24     	; 0x5cfc <free+0xbe>
    5ce4:	80 81       	ld	r24, Z
    5ce6:	91 81       	ldd	r25, Z+1	; 0x01
    5ce8:	84 0f       	add	r24, r20
    5cea:	95 1f       	adc	r25, r21
    5cec:	02 96       	adiw	r24, 0x02	; 2
    5cee:	e9 01       	movw	r28, r18
    5cf0:	99 83       	std	Y+1, r25	; 0x01
    5cf2:	88 83       	st	Y, r24
    5cf4:	82 81       	ldd	r24, Z+2	; 0x02
    5cf6:	93 81       	ldd	r25, Z+3	; 0x03
    5cf8:	9b 83       	std	Y+3, r25	; 0x03
    5cfa:	8a 83       	std	Y+2, r24	; 0x02
    5cfc:	e0 e0       	ldi	r30, 0x00	; 0
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	12 96       	adiw	r26, 0x02	; 2
    5d02:	8d 91       	ld	r24, X+
    5d04:	9c 91       	ld	r25, X
    5d06:	13 97       	sbiw	r26, 0x03	; 3
    5d08:	00 97       	sbiw	r24, 0x00	; 0
    5d0a:	19 f0       	breq	.+6      	; 0x5d12 <free+0xd4>
    5d0c:	fd 01       	movw	r30, r26
    5d0e:	dc 01       	movw	r26, r24
    5d10:	f7 cf       	rjmp	.-18     	; 0x5d00 <free+0xc2>
    5d12:	8d 91       	ld	r24, X+
    5d14:	9c 91       	ld	r25, X
    5d16:	11 97       	sbiw	r26, 0x01	; 1
    5d18:	9d 01       	movw	r18, r26
    5d1a:	2e 5f       	subi	r18, 0xFE	; 254
    5d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d1e:	82 0f       	add	r24, r18
    5d20:	93 1f       	adc	r25, r19
    5d22:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <__brkval>
    5d26:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <__brkval+0x1>
    5d2a:	28 17       	cp	r18, r24
    5d2c:	39 07       	cpc	r19, r25
    5d2e:	69 f4       	brne	.+26     	; 0x5d4a <free+0x10c>
    5d30:	30 97       	sbiw	r30, 0x00	; 0
    5d32:	29 f4       	brne	.+10     	; 0x5d3e <free+0x100>
    5d34:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <__flp+0x1>
    5d38:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <__flp>
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <free+0x104>
    5d3e:	13 82       	std	Z+3, r1	; 0x03
    5d40:	12 82       	std	Z+2, r1	; 0x02
    5d42:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <__brkval+0x1>
    5d46:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <__brkval>
    5d4a:	df 91       	pop	r29
    5d4c:	cf 91       	pop	r28
    5d4e:	08 95       	ret

00005d50 <atoi>:
    5d50:	fc 01       	movw	r30, r24
    5d52:	88 27       	eor	r24, r24
    5d54:	99 27       	eor	r25, r25
    5d56:	e8 94       	clt
    5d58:	21 91       	ld	r18, Z+
    5d5a:	20 32       	cpi	r18, 0x20	; 32
    5d5c:	e9 f3       	breq	.-6      	; 0x5d58 <atoi+0x8>
    5d5e:	29 30       	cpi	r18, 0x09	; 9
    5d60:	10 f0       	brcs	.+4      	; 0x5d66 <atoi+0x16>
    5d62:	2e 30       	cpi	r18, 0x0E	; 14
    5d64:	c8 f3       	brcs	.-14     	; 0x5d58 <atoi+0x8>
    5d66:	2b 32       	cpi	r18, 0x2B	; 43
    5d68:	41 f0       	breq	.+16     	; 0x5d7a <atoi+0x2a>
    5d6a:	2d 32       	cpi	r18, 0x2D	; 45
    5d6c:	39 f4       	brne	.+14     	; 0x5d7c <atoi+0x2c>
    5d6e:	68 94       	set
    5d70:	04 c0       	rjmp	.+8      	; 0x5d7a <atoi+0x2a>
    5d72:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulhi_const_10>
    5d76:	82 0f       	add	r24, r18
    5d78:	91 1d       	adc	r25, r1
    5d7a:	21 91       	ld	r18, Z+
    5d7c:	20 53       	subi	r18, 0x30	; 48
    5d7e:	2a 30       	cpi	r18, 0x0A	; 10
    5d80:	c0 f3       	brcs	.-16     	; 0x5d72 <atoi+0x22>
    5d82:	1e f4       	brtc	.+6      	; 0x5d8a <atoi+0x3a>
    5d84:	90 95       	com	r25
    5d86:	81 95       	neg	r24
    5d88:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8a:	08 95       	ret

00005d8c <atol>:
    5d8c:	1f 93       	push	r17
    5d8e:	fc 01       	movw	r30, r24
    5d90:	99 27       	eor	r25, r25
    5d92:	88 27       	eor	r24, r24
    5d94:	bc 01       	movw	r22, r24
    5d96:	e8 94       	clt
    5d98:	11 91       	ld	r17, Z+
    5d9a:	10 32       	cpi	r17, 0x20	; 32
    5d9c:	e9 f3       	breq	.-6      	; 0x5d98 <atol+0xc>
    5d9e:	19 30       	cpi	r17, 0x09	; 9
    5da0:	10 f0       	brcs	.+4      	; 0x5da6 <atol+0x1a>
    5da2:	1e 30       	cpi	r17, 0x0E	; 14
    5da4:	c8 f3       	brcs	.-14     	; 0x5d98 <atol+0xc>
    5da6:	1b 32       	cpi	r17, 0x2B	; 43
    5da8:	51 f0       	breq	.+20     	; 0x5dbe <atol+0x32>
    5daa:	1d 32       	cpi	r17, 0x2D	; 45
    5dac:	49 f4       	brne	.+18     	; 0x5dc0 <atol+0x34>
    5dae:	68 94       	set
    5db0:	06 c0       	rjmp	.+12     	; 0x5dbe <atol+0x32>
    5db2:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__mulsi_const_10>
    5db6:	61 0f       	add	r22, r17
    5db8:	71 1d       	adc	r23, r1
    5dba:	81 1d       	adc	r24, r1
    5dbc:	91 1d       	adc	r25, r1
    5dbe:	11 91       	ld	r17, Z+
    5dc0:	10 53       	subi	r17, 0x30	; 48
    5dc2:	1a 30       	cpi	r17, 0x0A	; 10
    5dc4:	b0 f3       	brcs	.-20     	; 0x5db2 <atol+0x26>
    5dc6:	3e f4       	brtc	.+14     	; 0x5dd6 <atol+0x4a>
    5dc8:	90 95       	com	r25
    5dca:	80 95       	com	r24
    5dcc:	70 95       	com	r23
    5dce:	61 95       	neg	r22
    5dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    5dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd6:	1f 91       	pop	r17
    5dd8:	08 95       	ret

00005dda <toupper>:
    5dda:	91 11       	cpse	r25, r1
    5ddc:	08 95       	ret
    5dde:	81 56       	subi	r24, 0x61	; 97
    5de0:	8a 51       	subi	r24, 0x1A	; 26
    5de2:	08 f4       	brcc	.+2      	; 0x5de6 <toupper+0xc>
    5de4:	80 52       	subi	r24, 0x20	; 32
    5de6:	85 58       	subi	r24, 0x85	; 133
    5de8:	08 95       	ret

00005dea <strcat>:
    5dea:	fb 01       	movw	r30, r22
    5dec:	dc 01       	movw	r26, r24
    5dee:	0d 90       	ld	r0, X+
    5df0:	00 20       	and	r0, r0
    5df2:	e9 f7       	brne	.-6      	; 0x5dee <strcat+0x4>
    5df4:	11 97       	sbiw	r26, 0x01	; 1
    5df6:	01 90       	ld	r0, Z+
    5df8:	0d 92       	st	X+, r0
    5dfa:	00 20       	and	r0, r0
    5dfc:	e1 f7       	brne	.-8      	; 0x5df6 <strcat+0xc>
    5dfe:	08 95       	ret

00005e00 <strcpy>:
    5e00:	fb 01       	movw	r30, r22
    5e02:	dc 01       	movw	r26, r24
    5e04:	01 90       	ld	r0, Z+
    5e06:	0d 92       	st	X+, r0
    5e08:	00 20       	and	r0, r0
    5e0a:	e1 f7       	brne	.-8      	; 0x5e04 <strcpy+0x4>
    5e0c:	08 95       	ret

00005e0e <strncpy>:
    5e0e:	fb 01       	movw	r30, r22
    5e10:	dc 01       	movw	r26, r24
    5e12:	41 50       	subi	r20, 0x01	; 1
    5e14:	50 40       	sbci	r21, 0x00	; 0
    5e16:	48 f0       	brcs	.+18     	; 0x5e2a <strncpy+0x1c>
    5e18:	01 90       	ld	r0, Z+
    5e1a:	0d 92       	st	X+, r0
    5e1c:	00 20       	and	r0, r0
    5e1e:	c9 f7       	brne	.-14     	; 0x5e12 <strncpy+0x4>
    5e20:	01 c0       	rjmp	.+2      	; 0x5e24 <strncpy+0x16>
    5e22:	1d 92       	st	X+, r1
    5e24:	41 50       	subi	r20, 0x01	; 1
    5e26:	50 40       	sbci	r21, 0x00	; 0
    5e28:	e0 f7       	brcc	.-8      	; 0x5e22 <strncpy+0x14>
    5e2a:	08 95       	ret

00005e2c <__mulsi_const_10>:
    5e2c:	59 2f       	mov	r21, r25
    5e2e:	48 2f       	mov	r20, r24
    5e30:	37 2f       	mov	r19, r23
    5e32:	26 2f       	mov	r18, r22
    5e34:	66 0f       	add	r22, r22
    5e36:	77 1f       	adc	r23, r23
    5e38:	88 1f       	adc	r24, r24
    5e3a:	99 1f       	adc	r25, r25
    5e3c:	66 0f       	add	r22, r22
    5e3e:	77 1f       	adc	r23, r23
    5e40:	88 1f       	adc	r24, r24
    5e42:	99 1f       	adc	r25, r25
    5e44:	62 0f       	add	r22, r18
    5e46:	73 1f       	adc	r23, r19
    5e48:	84 1f       	adc	r24, r20
    5e4a:	95 1f       	adc	r25, r21
    5e4c:	66 0f       	add	r22, r22
    5e4e:	77 1f       	adc	r23, r23
    5e50:	88 1f       	adc	r24, r24
    5e52:	99 1f       	adc	r25, r25
    5e54:	08 95       	ret

00005e56 <__mulhi_const_10>:
    5e56:	7a e0       	ldi	r23, 0x0A	; 10
    5e58:	97 9f       	mul	r25, r23
    5e5a:	90 2d       	mov	r25, r0
    5e5c:	87 9f       	mul	r24, r23
    5e5e:	80 2d       	mov	r24, r0
    5e60:	91 0d       	add	r25, r1
    5e62:	11 24       	eor	r1, r1
    5e64:	08 95       	ret

00005e66 <sprintf>:
    5e66:	ae e0       	ldi	r26, 0x0E	; 14
    5e68:	b0 e0       	ldi	r27, 0x00	; 0
    5e6a:	e9 e3       	ldi	r30, 0x39	; 57
    5e6c:	ff e2       	ldi	r31, 0x2F	; 47
    5e6e:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__prologue_saves__+0x1c>
    5e72:	0d 89       	ldd	r16, Y+21	; 0x15
    5e74:	1e 89       	ldd	r17, Y+22	; 0x16
    5e76:	86 e0       	ldi	r24, 0x06	; 6
    5e78:	8c 83       	std	Y+4, r24	; 0x04
    5e7a:	1a 83       	std	Y+2, r17	; 0x02
    5e7c:	09 83       	std	Y+1, r16	; 0x01
    5e7e:	8f ef       	ldi	r24, 0xFF	; 255
    5e80:	9f e7       	ldi	r25, 0x7F	; 127
    5e82:	9e 83       	std	Y+6, r25	; 0x06
    5e84:	8d 83       	std	Y+5, r24	; 0x05
    5e86:	ae 01       	movw	r20, r28
    5e88:	47 5e       	subi	r20, 0xE7	; 231
    5e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e8c:	6f 89       	ldd	r22, Y+23	; 0x17
    5e8e:	78 8d       	ldd	r23, Y+24	; 0x18
    5e90:	ce 01       	movw	r24, r28
    5e92:	01 96       	adiw	r24, 0x01	; 1
    5e94:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <vfprintf>
    5e98:	ef 81       	ldd	r30, Y+7	; 0x07
    5e9a:	f8 85       	ldd	r31, Y+8	; 0x08
    5e9c:	e0 0f       	add	r30, r16
    5e9e:	f1 1f       	adc	r31, r17
    5ea0:	10 82       	st	Z, r1
    5ea2:	2e 96       	adiw	r28, 0x0e	; 14
    5ea4:	e4 e0       	ldi	r30, 0x04	; 4
    5ea6:	0c 94 73 32 	jmp	0x64e6	; 0x64e6 <__epilogue_restores__+0x1c>

00005eaa <vfprintf>:
    5eaa:	ab e0       	ldi	r26, 0x0B	; 11
    5eac:	b0 e0       	ldi	r27, 0x00	; 0
    5eae:	eb e5       	ldi	r30, 0x5B	; 91
    5eb0:	ff e2       	ldi	r31, 0x2F	; 47
    5eb2:	0c 94 49 32 	jmp	0x6492	; 0x6492 <__prologue_saves__>
    5eb6:	6c 01       	movw	r12, r24
    5eb8:	7b 01       	movw	r14, r22
    5eba:	8a 01       	movw	r16, r20
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	17 82       	std	Z+7, r1	; 0x07
    5ec0:	16 82       	std	Z+6, r1	; 0x06
    5ec2:	83 81       	ldd	r24, Z+3	; 0x03
    5ec4:	81 ff       	sbrs	r24, 1
    5ec6:	cc c1       	rjmp	.+920    	; 0x6260 <vfprintf+0x3b6>
    5ec8:	ce 01       	movw	r24, r28
    5eca:	01 96       	adiw	r24, 0x01	; 1
    5ecc:	3c 01       	movw	r6, r24
    5ece:	f6 01       	movw	r30, r12
    5ed0:	93 81       	ldd	r25, Z+3	; 0x03
    5ed2:	f7 01       	movw	r30, r14
    5ed4:	93 fd       	sbrc	r25, 3
    5ed6:	85 91       	lpm	r24, Z+
    5ed8:	93 ff       	sbrs	r25, 3
    5eda:	81 91       	ld	r24, Z+
    5edc:	7f 01       	movw	r14, r30
    5ede:	88 23       	and	r24, r24
    5ee0:	09 f4       	brne	.+2      	; 0x5ee4 <vfprintf+0x3a>
    5ee2:	ba c1       	rjmp	.+884    	; 0x6258 <vfprintf+0x3ae>
    5ee4:	85 32       	cpi	r24, 0x25	; 37
    5ee6:	39 f4       	brne	.+14     	; 0x5ef6 <vfprintf+0x4c>
    5ee8:	93 fd       	sbrc	r25, 3
    5eea:	85 91       	lpm	r24, Z+
    5eec:	93 ff       	sbrs	r25, 3
    5eee:	81 91       	ld	r24, Z+
    5ef0:	7f 01       	movw	r14, r30
    5ef2:	85 32       	cpi	r24, 0x25	; 37
    5ef4:	29 f4       	brne	.+10     	; 0x5f00 <vfprintf+0x56>
    5ef6:	b6 01       	movw	r22, r12
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    5efe:	e7 cf       	rjmp	.-50     	; 0x5ece <vfprintf+0x24>
    5f00:	91 2c       	mov	r9, r1
    5f02:	21 2c       	mov	r2, r1
    5f04:	31 2c       	mov	r3, r1
    5f06:	ff e1       	ldi	r31, 0x1F	; 31
    5f08:	f3 15       	cp	r31, r3
    5f0a:	d8 f0       	brcs	.+54     	; 0x5f42 <vfprintf+0x98>
    5f0c:	8b 32       	cpi	r24, 0x2B	; 43
    5f0e:	79 f0       	breq	.+30     	; 0x5f2e <vfprintf+0x84>
    5f10:	38 f4       	brcc	.+14     	; 0x5f20 <vfprintf+0x76>
    5f12:	80 32       	cpi	r24, 0x20	; 32
    5f14:	79 f0       	breq	.+30     	; 0x5f34 <vfprintf+0x8a>
    5f16:	83 32       	cpi	r24, 0x23	; 35
    5f18:	a1 f4       	brne	.+40     	; 0x5f42 <vfprintf+0x98>
    5f1a:	23 2d       	mov	r18, r3
    5f1c:	20 61       	ori	r18, 0x10	; 16
    5f1e:	1d c0       	rjmp	.+58     	; 0x5f5a <vfprintf+0xb0>
    5f20:	8d 32       	cpi	r24, 0x2D	; 45
    5f22:	61 f0       	breq	.+24     	; 0x5f3c <vfprintf+0x92>
    5f24:	80 33       	cpi	r24, 0x30	; 48
    5f26:	69 f4       	brne	.+26     	; 0x5f42 <vfprintf+0x98>
    5f28:	23 2d       	mov	r18, r3
    5f2a:	21 60       	ori	r18, 0x01	; 1
    5f2c:	16 c0       	rjmp	.+44     	; 0x5f5a <vfprintf+0xb0>
    5f2e:	83 2d       	mov	r24, r3
    5f30:	82 60       	ori	r24, 0x02	; 2
    5f32:	38 2e       	mov	r3, r24
    5f34:	e3 2d       	mov	r30, r3
    5f36:	e4 60       	ori	r30, 0x04	; 4
    5f38:	3e 2e       	mov	r3, r30
    5f3a:	2a c0       	rjmp	.+84     	; 0x5f90 <vfprintf+0xe6>
    5f3c:	f3 2d       	mov	r31, r3
    5f3e:	f8 60       	ori	r31, 0x08	; 8
    5f40:	1d c0       	rjmp	.+58     	; 0x5f7c <vfprintf+0xd2>
    5f42:	37 fc       	sbrc	r3, 7
    5f44:	2d c0       	rjmp	.+90     	; 0x5fa0 <vfprintf+0xf6>
    5f46:	20 ed       	ldi	r18, 0xD0	; 208
    5f48:	28 0f       	add	r18, r24
    5f4a:	2a 30       	cpi	r18, 0x0A	; 10
    5f4c:	40 f0       	brcs	.+16     	; 0x5f5e <vfprintf+0xb4>
    5f4e:	8e 32       	cpi	r24, 0x2E	; 46
    5f50:	b9 f4       	brne	.+46     	; 0x5f80 <vfprintf+0xd6>
    5f52:	36 fc       	sbrc	r3, 6
    5f54:	81 c1       	rjmp	.+770    	; 0x6258 <vfprintf+0x3ae>
    5f56:	23 2d       	mov	r18, r3
    5f58:	20 64       	ori	r18, 0x40	; 64
    5f5a:	32 2e       	mov	r3, r18
    5f5c:	19 c0       	rjmp	.+50     	; 0x5f90 <vfprintf+0xe6>
    5f5e:	36 fe       	sbrs	r3, 6
    5f60:	06 c0       	rjmp	.+12     	; 0x5f6e <vfprintf+0xc4>
    5f62:	8a e0       	ldi	r24, 0x0A	; 10
    5f64:	98 9e       	mul	r9, r24
    5f66:	20 0d       	add	r18, r0
    5f68:	11 24       	eor	r1, r1
    5f6a:	92 2e       	mov	r9, r18
    5f6c:	11 c0       	rjmp	.+34     	; 0x5f90 <vfprintf+0xe6>
    5f6e:	ea e0       	ldi	r30, 0x0A	; 10
    5f70:	2e 9e       	mul	r2, r30
    5f72:	20 0d       	add	r18, r0
    5f74:	11 24       	eor	r1, r1
    5f76:	22 2e       	mov	r2, r18
    5f78:	f3 2d       	mov	r31, r3
    5f7a:	f0 62       	ori	r31, 0x20	; 32
    5f7c:	3f 2e       	mov	r3, r31
    5f7e:	08 c0       	rjmp	.+16     	; 0x5f90 <vfprintf+0xe6>
    5f80:	8c 36       	cpi	r24, 0x6C	; 108
    5f82:	21 f4       	brne	.+8      	; 0x5f8c <vfprintf+0xe2>
    5f84:	83 2d       	mov	r24, r3
    5f86:	80 68       	ori	r24, 0x80	; 128
    5f88:	38 2e       	mov	r3, r24
    5f8a:	02 c0       	rjmp	.+4      	; 0x5f90 <vfprintf+0xe6>
    5f8c:	88 36       	cpi	r24, 0x68	; 104
    5f8e:	41 f4       	brne	.+16     	; 0x5fa0 <vfprintf+0xf6>
    5f90:	f7 01       	movw	r30, r14
    5f92:	93 fd       	sbrc	r25, 3
    5f94:	85 91       	lpm	r24, Z+
    5f96:	93 ff       	sbrs	r25, 3
    5f98:	81 91       	ld	r24, Z+
    5f9a:	7f 01       	movw	r14, r30
    5f9c:	81 11       	cpse	r24, r1
    5f9e:	b3 cf       	rjmp	.-154    	; 0x5f06 <vfprintf+0x5c>
    5fa0:	98 2f       	mov	r25, r24
    5fa2:	9f 7d       	andi	r25, 0xDF	; 223
    5fa4:	95 54       	subi	r25, 0x45	; 69
    5fa6:	93 30       	cpi	r25, 0x03	; 3
    5fa8:	28 f4       	brcc	.+10     	; 0x5fb4 <vfprintf+0x10a>
    5faa:	0c 5f       	subi	r16, 0xFC	; 252
    5fac:	1f 4f       	sbci	r17, 0xFF	; 255
    5fae:	9f e3       	ldi	r25, 0x3F	; 63
    5fb0:	99 83       	std	Y+1, r25	; 0x01
    5fb2:	0d c0       	rjmp	.+26     	; 0x5fce <vfprintf+0x124>
    5fb4:	83 36       	cpi	r24, 0x63	; 99
    5fb6:	31 f0       	breq	.+12     	; 0x5fc4 <vfprintf+0x11a>
    5fb8:	83 37       	cpi	r24, 0x73	; 115
    5fba:	71 f0       	breq	.+28     	; 0x5fd8 <vfprintf+0x12e>
    5fbc:	83 35       	cpi	r24, 0x53	; 83
    5fbe:	09 f0       	breq	.+2      	; 0x5fc2 <vfprintf+0x118>
    5fc0:	59 c0       	rjmp	.+178    	; 0x6074 <vfprintf+0x1ca>
    5fc2:	21 c0       	rjmp	.+66     	; 0x6006 <vfprintf+0x15c>
    5fc4:	f8 01       	movw	r30, r16
    5fc6:	80 81       	ld	r24, Z
    5fc8:	89 83       	std	Y+1, r24	; 0x01
    5fca:	0e 5f       	subi	r16, 0xFE	; 254
    5fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5fce:	88 24       	eor	r8, r8
    5fd0:	83 94       	inc	r8
    5fd2:	91 2c       	mov	r9, r1
    5fd4:	53 01       	movw	r10, r6
    5fd6:	13 c0       	rjmp	.+38     	; 0x5ffe <vfprintf+0x154>
    5fd8:	28 01       	movw	r4, r16
    5fda:	f2 e0       	ldi	r31, 0x02	; 2
    5fdc:	4f 0e       	add	r4, r31
    5fde:	51 1c       	adc	r5, r1
    5fe0:	f8 01       	movw	r30, r16
    5fe2:	a0 80       	ld	r10, Z
    5fe4:	b1 80       	ldd	r11, Z+1	; 0x01
    5fe6:	36 fe       	sbrs	r3, 6
    5fe8:	03 c0       	rjmp	.+6      	; 0x5ff0 <vfprintf+0x146>
    5fea:	69 2d       	mov	r22, r9
    5fec:	70 e0       	ldi	r23, 0x00	; 0
    5fee:	02 c0       	rjmp	.+4      	; 0x5ff4 <vfprintf+0x14a>
    5ff0:	6f ef       	ldi	r22, 0xFF	; 255
    5ff2:	7f ef       	ldi	r23, 0xFF	; 255
    5ff4:	c5 01       	movw	r24, r10
    5ff6:	0e 94 41 31 	call	0x6282	; 0x6282 <strnlen>
    5ffa:	4c 01       	movw	r8, r24
    5ffc:	82 01       	movw	r16, r4
    5ffe:	f3 2d       	mov	r31, r3
    6000:	ff 77       	andi	r31, 0x7F	; 127
    6002:	3f 2e       	mov	r3, r31
    6004:	16 c0       	rjmp	.+44     	; 0x6032 <vfprintf+0x188>
    6006:	28 01       	movw	r4, r16
    6008:	22 e0       	ldi	r18, 0x02	; 2
    600a:	42 0e       	add	r4, r18
    600c:	51 1c       	adc	r5, r1
    600e:	f8 01       	movw	r30, r16
    6010:	a0 80       	ld	r10, Z
    6012:	b1 80       	ldd	r11, Z+1	; 0x01
    6014:	36 fe       	sbrs	r3, 6
    6016:	03 c0       	rjmp	.+6      	; 0x601e <vfprintf+0x174>
    6018:	69 2d       	mov	r22, r9
    601a:	70 e0       	ldi	r23, 0x00	; 0
    601c:	02 c0       	rjmp	.+4      	; 0x6022 <vfprintf+0x178>
    601e:	6f ef       	ldi	r22, 0xFF	; 255
    6020:	7f ef       	ldi	r23, 0xFF	; 255
    6022:	c5 01       	movw	r24, r10
    6024:	0e 94 36 31 	call	0x626c	; 0x626c <strnlen_P>
    6028:	4c 01       	movw	r8, r24
    602a:	f3 2d       	mov	r31, r3
    602c:	f0 68       	ori	r31, 0x80	; 128
    602e:	3f 2e       	mov	r3, r31
    6030:	82 01       	movw	r16, r4
    6032:	33 fc       	sbrc	r3, 3
    6034:	1b c0       	rjmp	.+54     	; 0x606c <vfprintf+0x1c2>
    6036:	82 2d       	mov	r24, r2
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	88 16       	cp	r8, r24
    603c:	99 06       	cpc	r9, r25
    603e:	b0 f4       	brcc	.+44     	; 0x606c <vfprintf+0x1c2>
    6040:	b6 01       	movw	r22, r12
    6042:	80 e2       	ldi	r24, 0x20	; 32
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    604a:	2a 94       	dec	r2
    604c:	f4 cf       	rjmp	.-24     	; 0x6036 <vfprintf+0x18c>
    604e:	f5 01       	movw	r30, r10
    6050:	37 fc       	sbrc	r3, 7
    6052:	85 91       	lpm	r24, Z+
    6054:	37 fe       	sbrs	r3, 7
    6056:	81 91       	ld	r24, Z+
    6058:	5f 01       	movw	r10, r30
    605a:	b6 01       	movw	r22, r12
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    6062:	21 10       	cpse	r2, r1
    6064:	2a 94       	dec	r2
    6066:	21 e0       	ldi	r18, 0x01	; 1
    6068:	82 1a       	sub	r8, r18
    606a:	91 08       	sbc	r9, r1
    606c:	81 14       	cp	r8, r1
    606e:	91 04       	cpc	r9, r1
    6070:	71 f7       	brne	.-36     	; 0x604e <vfprintf+0x1a4>
    6072:	e8 c0       	rjmp	.+464    	; 0x6244 <vfprintf+0x39a>
    6074:	84 36       	cpi	r24, 0x64	; 100
    6076:	11 f0       	breq	.+4      	; 0x607c <vfprintf+0x1d2>
    6078:	89 36       	cpi	r24, 0x69	; 105
    607a:	41 f5       	brne	.+80     	; 0x60cc <vfprintf+0x222>
    607c:	f8 01       	movw	r30, r16
    607e:	37 fe       	sbrs	r3, 7
    6080:	07 c0       	rjmp	.+14     	; 0x6090 <vfprintf+0x1e6>
    6082:	60 81       	ld	r22, Z
    6084:	71 81       	ldd	r23, Z+1	; 0x01
    6086:	82 81       	ldd	r24, Z+2	; 0x02
    6088:	93 81       	ldd	r25, Z+3	; 0x03
    608a:	0c 5f       	subi	r16, 0xFC	; 252
    608c:	1f 4f       	sbci	r17, 0xFF	; 255
    608e:	08 c0       	rjmp	.+16     	; 0x60a0 <vfprintf+0x1f6>
    6090:	60 81       	ld	r22, Z
    6092:	71 81       	ldd	r23, Z+1	; 0x01
    6094:	07 2e       	mov	r0, r23
    6096:	00 0c       	add	r0, r0
    6098:	88 0b       	sbc	r24, r24
    609a:	99 0b       	sbc	r25, r25
    609c:	0e 5f       	subi	r16, 0xFE	; 254
    609e:	1f 4f       	sbci	r17, 0xFF	; 255
    60a0:	f3 2d       	mov	r31, r3
    60a2:	ff 76       	andi	r31, 0x6F	; 111
    60a4:	3f 2e       	mov	r3, r31
    60a6:	97 ff       	sbrs	r25, 7
    60a8:	09 c0       	rjmp	.+18     	; 0x60bc <vfprintf+0x212>
    60aa:	90 95       	com	r25
    60ac:	80 95       	com	r24
    60ae:	70 95       	com	r23
    60b0:	61 95       	neg	r22
    60b2:	7f 4f       	sbci	r23, 0xFF	; 255
    60b4:	8f 4f       	sbci	r24, 0xFF	; 255
    60b6:	9f 4f       	sbci	r25, 0xFF	; 255
    60b8:	f0 68       	ori	r31, 0x80	; 128
    60ba:	3f 2e       	mov	r3, r31
    60bc:	2a e0       	ldi	r18, 0x0A	; 10
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	a3 01       	movw	r20, r6
    60c2:	0e 94 88 31 	call	0x6310	; 0x6310 <__ultoa_invert>
    60c6:	88 2e       	mov	r8, r24
    60c8:	86 18       	sub	r8, r6
    60ca:	45 c0       	rjmp	.+138    	; 0x6156 <vfprintf+0x2ac>
    60cc:	85 37       	cpi	r24, 0x75	; 117
    60ce:	31 f4       	brne	.+12     	; 0x60dc <vfprintf+0x232>
    60d0:	23 2d       	mov	r18, r3
    60d2:	2f 7e       	andi	r18, 0xEF	; 239
    60d4:	b2 2e       	mov	r11, r18
    60d6:	2a e0       	ldi	r18, 0x0A	; 10
    60d8:	30 e0       	ldi	r19, 0x00	; 0
    60da:	25 c0       	rjmp	.+74     	; 0x6126 <vfprintf+0x27c>
    60dc:	93 2d       	mov	r25, r3
    60de:	99 7f       	andi	r25, 0xF9	; 249
    60e0:	b9 2e       	mov	r11, r25
    60e2:	8f 36       	cpi	r24, 0x6F	; 111
    60e4:	c1 f0       	breq	.+48     	; 0x6116 <vfprintf+0x26c>
    60e6:	18 f4       	brcc	.+6      	; 0x60ee <vfprintf+0x244>
    60e8:	88 35       	cpi	r24, 0x58	; 88
    60ea:	79 f0       	breq	.+30     	; 0x610a <vfprintf+0x260>
    60ec:	b5 c0       	rjmp	.+362    	; 0x6258 <vfprintf+0x3ae>
    60ee:	80 37       	cpi	r24, 0x70	; 112
    60f0:	19 f0       	breq	.+6      	; 0x60f8 <vfprintf+0x24e>
    60f2:	88 37       	cpi	r24, 0x78	; 120
    60f4:	21 f0       	breq	.+8      	; 0x60fe <vfprintf+0x254>
    60f6:	b0 c0       	rjmp	.+352    	; 0x6258 <vfprintf+0x3ae>
    60f8:	e9 2f       	mov	r30, r25
    60fa:	e0 61       	ori	r30, 0x10	; 16
    60fc:	be 2e       	mov	r11, r30
    60fe:	b4 fe       	sbrs	r11, 4
    6100:	0d c0       	rjmp	.+26     	; 0x611c <vfprintf+0x272>
    6102:	fb 2d       	mov	r31, r11
    6104:	f4 60       	ori	r31, 0x04	; 4
    6106:	bf 2e       	mov	r11, r31
    6108:	09 c0       	rjmp	.+18     	; 0x611c <vfprintf+0x272>
    610a:	34 fe       	sbrs	r3, 4
    610c:	0a c0       	rjmp	.+20     	; 0x6122 <vfprintf+0x278>
    610e:	29 2f       	mov	r18, r25
    6110:	26 60       	ori	r18, 0x06	; 6
    6112:	b2 2e       	mov	r11, r18
    6114:	06 c0       	rjmp	.+12     	; 0x6122 <vfprintf+0x278>
    6116:	28 e0       	ldi	r18, 0x08	; 8
    6118:	30 e0       	ldi	r19, 0x00	; 0
    611a:	05 c0       	rjmp	.+10     	; 0x6126 <vfprintf+0x27c>
    611c:	20 e1       	ldi	r18, 0x10	; 16
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	02 c0       	rjmp	.+4      	; 0x6126 <vfprintf+0x27c>
    6122:	20 e1       	ldi	r18, 0x10	; 16
    6124:	32 e0       	ldi	r19, 0x02	; 2
    6126:	f8 01       	movw	r30, r16
    6128:	b7 fe       	sbrs	r11, 7
    612a:	07 c0       	rjmp	.+14     	; 0x613a <vfprintf+0x290>
    612c:	60 81       	ld	r22, Z
    612e:	71 81       	ldd	r23, Z+1	; 0x01
    6130:	82 81       	ldd	r24, Z+2	; 0x02
    6132:	93 81       	ldd	r25, Z+3	; 0x03
    6134:	0c 5f       	subi	r16, 0xFC	; 252
    6136:	1f 4f       	sbci	r17, 0xFF	; 255
    6138:	06 c0       	rjmp	.+12     	; 0x6146 <vfprintf+0x29c>
    613a:	60 81       	ld	r22, Z
    613c:	71 81       	ldd	r23, Z+1	; 0x01
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	0e 5f       	subi	r16, 0xFE	; 254
    6144:	1f 4f       	sbci	r17, 0xFF	; 255
    6146:	a3 01       	movw	r20, r6
    6148:	0e 94 88 31 	call	0x6310	; 0x6310 <__ultoa_invert>
    614c:	88 2e       	mov	r8, r24
    614e:	86 18       	sub	r8, r6
    6150:	fb 2d       	mov	r31, r11
    6152:	ff 77       	andi	r31, 0x7F	; 127
    6154:	3f 2e       	mov	r3, r31
    6156:	36 fe       	sbrs	r3, 6
    6158:	0d c0       	rjmp	.+26     	; 0x6174 <vfprintf+0x2ca>
    615a:	23 2d       	mov	r18, r3
    615c:	2e 7f       	andi	r18, 0xFE	; 254
    615e:	a2 2e       	mov	r10, r18
    6160:	89 14       	cp	r8, r9
    6162:	58 f4       	brcc	.+22     	; 0x617a <vfprintf+0x2d0>
    6164:	34 fe       	sbrs	r3, 4
    6166:	0b c0       	rjmp	.+22     	; 0x617e <vfprintf+0x2d4>
    6168:	32 fc       	sbrc	r3, 2
    616a:	09 c0       	rjmp	.+18     	; 0x617e <vfprintf+0x2d4>
    616c:	83 2d       	mov	r24, r3
    616e:	8e 7e       	andi	r24, 0xEE	; 238
    6170:	a8 2e       	mov	r10, r24
    6172:	05 c0       	rjmp	.+10     	; 0x617e <vfprintf+0x2d4>
    6174:	b8 2c       	mov	r11, r8
    6176:	a3 2c       	mov	r10, r3
    6178:	03 c0       	rjmp	.+6      	; 0x6180 <vfprintf+0x2d6>
    617a:	b8 2c       	mov	r11, r8
    617c:	01 c0       	rjmp	.+2      	; 0x6180 <vfprintf+0x2d6>
    617e:	b9 2c       	mov	r11, r9
    6180:	a4 fe       	sbrs	r10, 4
    6182:	0f c0       	rjmp	.+30     	; 0x61a2 <vfprintf+0x2f8>
    6184:	fe 01       	movw	r30, r28
    6186:	e8 0d       	add	r30, r8
    6188:	f1 1d       	adc	r31, r1
    618a:	80 81       	ld	r24, Z
    618c:	80 33       	cpi	r24, 0x30	; 48
    618e:	21 f4       	brne	.+8      	; 0x6198 <vfprintf+0x2ee>
    6190:	9a 2d       	mov	r25, r10
    6192:	99 7e       	andi	r25, 0xE9	; 233
    6194:	a9 2e       	mov	r10, r25
    6196:	09 c0       	rjmp	.+18     	; 0x61aa <vfprintf+0x300>
    6198:	a2 fe       	sbrs	r10, 2
    619a:	06 c0       	rjmp	.+12     	; 0x61a8 <vfprintf+0x2fe>
    619c:	b3 94       	inc	r11
    619e:	b3 94       	inc	r11
    61a0:	04 c0       	rjmp	.+8      	; 0x61aa <vfprintf+0x300>
    61a2:	8a 2d       	mov	r24, r10
    61a4:	86 78       	andi	r24, 0x86	; 134
    61a6:	09 f0       	breq	.+2      	; 0x61aa <vfprintf+0x300>
    61a8:	b3 94       	inc	r11
    61aa:	a3 fc       	sbrc	r10, 3
    61ac:	11 c0       	rjmp	.+34     	; 0x61d0 <vfprintf+0x326>
    61ae:	a0 fe       	sbrs	r10, 0
    61b0:	06 c0       	rjmp	.+12     	; 0x61be <vfprintf+0x314>
    61b2:	b2 14       	cp	r11, r2
    61b4:	88 f4       	brcc	.+34     	; 0x61d8 <vfprintf+0x32e>
    61b6:	28 0c       	add	r2, r8
    61b8:	92 2c       	mov	r9, r2
    61ba:	9b 18       	sub	r9, r11
    61bc:	0e c0       	rjmp	.+28     	; 0x61da <vfprintf+0x330>
    61be:	b2 14       	cp	r11, r2
    61c0:	60 f4       	brcc	.+24     	; 0x61da <vfprintf+0x330>
    61c2:	b6 01       	movw	r22, r12
    61c4:	80 e2       	ldi	r24, 0x20	; 32
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    61cc:	b3 94       	inc	r11
    61ce:	f7 cf       	rjmp	.-18     	; 0x61be <vfprintf+0x314>
    61d0:	b2 14       	cp	r11, r2
    61d2:	18 f4       	brcc	.+6      	; 0x61da <vfprintf+0x330>
    61d4:	2b 18       	sub	r2, r11
    61d6:	02 c0       	rjmp	.+4      	; 0x61dc <vfprintf+0x332>
    61d8:	98 2c       	mov	r9, r8
    61da:	21 2c       	mov	r2, r1
    61dc:	a4 fe       	sbrs	r10, 4
    61de:	10 c0       	rjmp	.+32     	; 0x6200 <vfprintf+0x356>
    61e0:	b6 01       	movw	r22, r12
    61e2:	80 e3       	ldi	r24, 0x30	; 48
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    61ea:	a2 fe       	sbrs	r10, 2
    61ec:	17 c0       	rjmp	.+46     	; 0x621c <vfprintf+0x372>
    61ee:	a1 fc       	sbrc	r10, 1
    61f0:	03 c0       	rjmp	.+6      	; 0x61f8 <vfprintf+0x34e>
    61f2:	88 e7       	ldi	r24, 0x78	; 120
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	02 c0       	rjmp	.+4      	; 0x61fc <vfprintf+0x352>
    61f8:	88 e5       	ldi	r24, 0x58	; 88
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	b6 01       	movw	r22, r12
    61fe:	0c c0       	rjmp	.+24     	; 0x6218 <vfprintf+0x36e>
    6200:	8a 2d       	mov	r24, r10
    6202:	86 78       	andi	r24, 0x86	; 134
    6204:	59 f0       	breq	.+22     	; 0x621c <vfprintf+0x372>
    6206:	a1 fe       	sbrs	r10, 1
    6208:	02 c0       	rjmp	.+4      	; 0x620e <vfprintf+0x364>
    620a:	8b e2       	ldi	r24, 0x2B	; 43
    620c:	01 c0       	rjmp	.+2      	; 0x6210 <vfprintf+0x366>
    620e:	80 e2       	ldi	r24, 0x20	; 32
    6210:	a7 fc       	sbrc	r10, 7
    6212:	8d e2       	ldi	r24, 0x2D	; 45
    6214:	b6 01       	movw	r22, r12
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    621c:	89 14       	cp	r8, r9
    621e:	38 f4       	brcc	.+14     	; 0x622e <vfprintf+0x384>
    6220:	b6 01       	movw	r22, r12
    6222:	80 e3       	ldi	r24, 0x30	; 48
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    622a:	9a 94       	dec	r9
    622c:	f7 cf       	rjmp	.-18     	; 0x621c <vfprintf+0x372>
    622e:	8a 94       	dec	r8
    6230:	f3 01       	movw	r30, r6
    6232:	e8 0d       	add	r30, r8
    6234:	f1 1d       	adc	r31, r1
    6236:	80 81       	ld	r24, Z
    6238:	b6 01       	movw	r22, r12
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    6240:	81 10       	cpse	r8, r1
    6242:	f5 cf       	rjmp	.-22     	; 0x622e <vfprintf+0x384>
    6244:	22 20       	and	r2, r2
    6246:	09 f4       	brne	.+2      	; 0x624a <vfprintf+0x3a0>
    6248:	42 ce       	rjmp	.-892    	; 0x5ece <vfprintf+0x24>
    624a:	b6 01       	movw	r22, r12
    624c:	80 e2       	ldi	r24, 0x20	; 32
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 4c 31 	call	0x6298	; 0x6298 <fputc>
    6254:	2a 94       	dec	r2
    6256:	f6 cf       	rjmp	.-20     	; 0x6244 <vfprintf+0x39a>
    6258:	f6 01       	movw	r30, r12
    625a:	86 81       	ldd	r24, Z+6	; 0x06
    625c:	97 81       	ldd	r25, Z+7	; 0x07
    625e:	02 c0       	rjmp	.+4      	; 0x6264 <vfprintf+0x3ba>
    6260:	8f ef       	ldi	r24, 0xFF	; 255
    6262:	9f ef       	ldi	r25, 0xFF	; 255
    6264:	2b 96       	adiw	r28, 0x0b	; 11
    6266:	e2 e1       	ldi	r30, 0x12	; 18
    6268:	0c 94 65 32 	jmp	0x64ca	; 0x64ca <__epilogue_restores__>

0000626c <strnlen_P>:
    626c:	fc 01       	movw	r30, r24
    626e:	05 90       	lpm	r0, Z+
    6270:	61 50       	subi	r22, 0x01	; 1
    6272:	70 40       	sbci	r23, 0x00	; 0
    6274:	01 10       	cpse	r0, r1
    6276:	d8 f7       	brcc	.-10     	; 0x626e <strnlen_P+0x2>
    6278:	80 95       	com	r24
    627a:	90 95       	com	r25
    627c:	8e 0f       	add	r24, r30
    627e:	9f 1f       	adc	r25, r31
    6280:	08 95       	ret

00006282 <strnlen>:
    6282:	fc 01       	movw	r30, r24
    6284:	61 50       	subi	r22, 0x01	; 1
    6286:	70 40       	sbci	r23, 0x00	; 0
    6288:	01 90       	ld	r0, Z+
    628a:	01 10       	cpse	r0, r1
    628c:	d8 f7       	brcc	.-10     	; 0x6284 <strnlen+0x2>
    628e:	80 95       	com	r24
    6290:	90 95       	com	r25
    6292:	8e 0f       	add	r24, r30
    6294:	9f 1f       	adc	r25, r31
    6296:	08 95       	ret

00006298 <fputc>:
    6298:	0f 93       	push	r16
    629a:	1f 93       	push	r17
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	fb 01       	movw	r30, r22
    62a2:	23 81       	ldd	r18, Z+3	; 0x03
    62a4:	21 fd       	sbrc	r18, 1
    62a6:	03 c0       	rjmp	.+6      	; 0x62ae <fputc+0x16>
    62a8:	8f ef       	ldi	r24, 0xFF	; 255
    62aa:	9f ef       	ldi	r25, 0xFF	; 255
    62ac:	2c c0       	rjmp	.+88     	; 0x6306 <fputc+0x6e>
    62ae:	22 ff       	sbrs	r18, 2
    62b0:	16 c0       	rjmp	.+44     	; 0x62de <fputc+0x46>
    62b2:	46 81       	ldd	r20, Z+6	; 0x06
    62b4:	57 81       	ldd	r21, Z+7	; 0x07
    62b6:	24 81       	ldd	r18, Z+4	; 0x04
    62b8:	35 81       	ldd	r19, Z+5	; 0x05
    62ba:	42 17       	cp	r20, r18
    62bc:	53 07       	cpc	r21, r19
    62be:	44 f4       	brge	.+16     	; 0x62d0 <fputc+0x38>
    62c0:	a0 81       	ld	r26, Z
    62c2:	b1 81       	ldd	r27, Z+1	; 0x01
    62c4:	9d 01       	movw	r18, r26
    62c6:	2f 5f       	subi	r18, 0xFF	; 255
    62c8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ca:	31 83       	std	Z+1, r19	; 0x01
    62cc:	20 83       	st	Z, r18
    62ce:	8c 93       	st	X, r24
    62d0:	26 81       	ldd	r18, Z+6	; 0x06
    62d2:	37 81       	ldd	r19, Z+7	; 0x07
    62d4:	2f 5f       	subi	r18, 0xFF	; 255
    62d6:	3f 4f       	sbci	r19, 0xFF	; 255
    62d8:	37 83       	std	Z+7, r19	; 0x07
    62da:	26 83       	std	Z+6, r18	; 0x06
    62dc:	14 c0       	rjmp	.+40     	; 0x6306 <fputc+0x6e>
    62de:	8b 01       	movw	r16, r22
    62e0:	ec 01       	movw	r28, r24
    62e2:	fb 01       	movw	r30, r22
    62e4:	00 84       	ldd	r0, Z+8	; 0x08
    62e6:	f1 85       	ldd	r31, Z+9	; 0x09
    62e8:	e0 2d       	mov	r30, r0
    62ea:	09 95       	icall
    62ec:	89 2b       	or	r24, r25
    62ee:	e1 f6       	brne	.-72     	; 0x62a8 <fputc+0x10>
    62f0:	d8 01       	movw	r26, r16
    62f2:	16 96       	adiw	r26, 0x06	; 6
    62f4:	8d 91       	ld	r24, X+
    62f6:	9c 91       	ld	r25, X
    62f8:	17 97       	sbiw	r26, 0x07	; 7
    62fa:	01 96       	adiw	r24, 0x01	; 1
    62fc:	17 96       	adiw	r26, 0x07	; 7
    62fe:	9c 93       	st	X, r25
    6300:	8e 93       	st	-X, r24
    6302:	16 97       	sbiw	r26, 0x06	; 6
    6304:	ce 01       	movw	r24, r28
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	1f 91       	pop	r17
    630c:	0f 91       	pop	r16
    630e:	08 95       	ret

00006310 <__ultoa_invert>:
    6310:	fa 01       	movw	r30, r20
    6312:	aa 27       	eor	r26, r26
    6314:	28 30       	cpi	r18, 0x08	; 8
    6316:	51 f1       	breq	.+84     	; 0x636c <__ultoa_invert+0x5c>
    6318:	20 31       	cpi	r18, 0x10	; 16
    631a:	81 f1       	breq	.+96     	; 0x637c <__ultoa_invert+0x6c>
    631c:	e8 94       	clt
    631e:	6f 93       	push	r22
    6320:	6e 7f       	andi	r22, 0xFE	; 254
    6322:	6e 5f       	subi	r22, 0xFE	; 254
    6324:	7f 4f       	sbci	r23, 0xFF	; 255
    6326:	8f 4f       	sbci	r24, 0xFF	; 255
    6328:	9f 4f       	sbci	r25, 0xFF	; 255
    632a:	af 4f       	sbci	r26, 0xFF	; 255
    632c:	b1 e0       	ldi	r27, 0x01	; 1
    632e:	3e d0       	rcall	.+124    	; 0x63ac <__ultoa_invert+0x9c>
    6330:	b4 e0       	ldi	r27, 0x04	; 4
    6332:	3c d0       	rcall	.+120    	; 0x63ac <__ultoa_invert+0x9c>
    6334:	67 0f       	add	r22, r23
    6336:	78 1f       	adc	r23, r24
    6338:	89 1f       	adc	r24, r25
    633a:	9a 1f       	adc	r25, r26
    633c:	a1 1d       	adc	r26, r1
    633e:	68 0f       	add	r22, r24
    6340:	79 1f       	adc	r23, r25
    6342:	8a 1f       	adc	r24, r26
    6344:	91 1d       	adc	r25, r1
    6346:	a1 1d       	adc	r26, r1
    6348:	6a 0f       	add	r22, r26
    634a:	71 1d       	adc	r23, r1
    634c:	81 1d       	adc	r24, r1
    634e:	91 1d       	adc	r25, r1
    6350:	a1 1d       	adc	r26, r1
    6352:	20 d0       	rcall	.+64     	; 0x6394 <__ultoa_invert+0x84>
    6354:	09 f4       	brne	.+2      	; 0x6358 <__ultoa_invert+0x48>
    6356:	68 94       	set
    6358:	3f 91       	pop	r19
    635a:	2a e0       	ldi	r18, 0x0A	; 10
    635c:	26 9f       	mul	r18, r22
    635e:	11 24       	eor	r1, r1
    6360:	30 19       	sub	r19, r0
    6362:	30 5d       	subi	r19, 0xD0	; 208
    6364:	31 93       	st	Z+, r19
    6366:	de f6       	brtc	.-74     	; 0x631e <__ultoa_invert+0xe>
    6368:	cf 01       	movw	r24, r30
    636a:	08 95       	ret
    636c:	46 2f       	mov	r20, r22
    636e:	47 70       	andi	r20, 0x07	; 7
    6370:	40 5d       	subi	r20, 0xD0	; 208
    6372:	41 93       	st	Z+, r20
    6374:	b3 e0       	ldi	r27, 0x03	; 3
    6376:	0f d0       	rcall	.+30     	; 0x6396 <__ultoa_invert+0x86>
    6378:	c9 f7       	brne	.-14     	; 0x636c <__ultoa_invert+0x5c>
    637a:	f6 cf       	rjmp	.-20     	; 0x6368 <__ultoa_invert+0x58>
    637c:	46 2f       	mov	r20, r22
    637e:	4f 70       	andi	r20, 0x0F	; 15
    6380:	40 5d       	subi	r20, 0xD0	; 208
    6382:	4a 33       	cpi	r20, 0x3A	; 58
    6384:	18 f0       	brcs	.+6      	; 0x638c <__ultoa_invert+0x7c>
    6386:	49 5d       	subi	r20, 0xD9	; 217
    6388:	31 fd       	sbrc	r19, 1
    638a:	40 52       	subi	r20, 0x20	; 32
    638c:	41 93       	st	Z+, r20
    638e:	02 d0       	rcall	.+4      	; 0x6394 <__ultoa_invert+0x84>
    6390:	a9 f7       	brne	.-22     	; 0x637c <__ultoa_invert+0x6c>
    6392:	ea cf       	rjmp	.-44     	; 0x6368 <__ultoa_invert+0x58>
    6394:	b4 e0       	ldi	r27, 0x04	; 4
    6396:	a6 95       	lsr	r26
    6398:	97 95       	ror	r25
    639a:	87 95       	ror	r24
    639c:	77 95       	ror	r23
    639e:	67 95       	ror	r22
    63a0:	ba 95       	dec	r27
    63a2:	c9 f7       	brne	.-14     	; 0x6396 <__ultoa_invert+0x86>
    63a4:	00 97       	sbiw	r24, 0x00	; 0
    63a6:	61 05       	cpc	r22, r1
    63a8:	71 05       	cpc	r23, r1
    63aa:	08 95       	ret
    63ac:	9b 01       	movw	r18, r22
    63ae:	ac 01       	movw	r20, r24
    63b0:	0a 2e       	mov	r0, r26
    63b2:	06 94       	lsr	r0
    63b4:	57 95       	ror	r21
    63b6:	47 95       	ror	r20
    63b8:	37 95       	ror	r19
    63ba:	27 95       	ror	r18
    63bc:	ba 95       	dec	r27
    63be:	c9 f7       	brne	.-14     	; 0x63b2 <__ultoa_invert+0xa2>
    63c0:	62 0f       	add	r22, r18
    63c2:	73 1f       	adc	r23, r19
    63c4:	84 1f       	adc	r24, r20
    63c6:	95 1f       	adc	r25, r21
    63c8:	a0 1d       	adc	r26, r0
    63ca:	08 95       	ret

000063cc <eeprom_read_byte>:
    63cc:	f9 99       	sbic	0x1f, 1	; 31
    63ce:	fe cf       	rjmp	.-4      	; 0x63cc <eeprom_read_byte>
    63d0:	92 bd       	out	0x22, r25	; 34
    63d2:	81 bd       	out	0x21, r24	; 33
    63d4:	f8 9a       	sbi	0x1f, 0	; 31
    63d6:	99 27       	eor	r25, r25
    63d8:	80 b5       	in	r24, 0x20	; 32
    63da:	08 95       	ret

000063dc <eeprom_read_dword>:
    63dc:	a6 e1       	ldi	r26, 0x16	; 22
    63de:	b0 e0       	ldi	r27, 0x00	; 0
    63e0:	44 e0       	ldi	r20, 0x04	; 4
    63e2:	50 e0       	ldi	r21, 0x00	; 0
    63e4:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <eeprom_read_blraw>

000063e8 <eeprom_read_word>:
    63e8:	a8 e1       	ldi	r26, 0x18	; 24
    63ea:	b0 e0       	ldi	r27, 0x00	; 0
    63ec:	42 e0       	ldi	r20, 0x02	; 2
    63ee:	50 e0       	ldi	r21, 0x00	; 0
    63f0:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <eeprom_read_blraw>

000063f4 <eeprom_update_byte>:
    63f4:	26 2f       	mov	r18, r22

000063f6 <eeprom_update_r18>:
    63f6:	f9 99       	sbic	0x1f, 1	; 31
    63f8:	fe cf       	rjmp	.-4      	; 0x63f6 <eeprom_update_r18>
    63fa:	92 bd       	out	0x22, r25	; 34
    63fc:	81 bd       	out	0x21, r24	; 33
    63fe:	f8 9a       	sbi	0x1f, 0	; 31
    6400:	01 97       	sbiw	r24, 0x01	; 1
    6402:	00 b4       	in	r0, 0x20	; 32
    6404:	02 16       	cp	r0, r18
    6406:	39 f0       	breq	.+14     	; 0x6416 <eeprom_update_r18+0x20>
    6408:	1f ba       	out	0x1f, r1	; 31
    640a:	20 bd       	out	0x20, r18	; 32
    640c:	0f b6       	in	r0, 0x3f	; 63
    640e:	f8 94       	cli
    6410:	fa 9a       	sbi	0x1f, 2	; 31
    6412:	f9 9a       	sbi	0x1f, 1	; 31
    6414:	0f be       	out	0x3f, r0	; 63
    6416:	08 95       	ret

00006418 <eeprom_update_dword>:
    6418:	03 96       	adiw	r24, 0x03	; 3
    641a:	27 2f       	mov	r18, r23
    641c:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <eeprom_update_r18>
    6420:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <eeprom_update_byte>
    6424:	25 2f       	mov	r18, r21
    6426:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <eeprom_update_r18>
    642a:	24 2f       	mov	r18, r20
    642c:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <eeprom_update_r18>

00006430 <eeprom_update_word>:
    6430:	01 96       	adiw	r24, 0x01	; 1
    6432:	27 2f       	mov	r18, r23
    6434:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <eeprom_update_r18>
    6438:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <eeprom_update_byte>

0000643c <eeprom_write_byte>:
    643c:	26 2f       	mov	r18, r22

0000643e <eeprom_write_r18>:
    643e:	f9 99       	sbic	0x1f, 1	; 31
    6440:	fe cf       	rjmp	.-4      	; 0x643e <eeprom_write_r18>
    6442:	1f ba       	out	0x1f, r1	; 31
    6444:	92 bd       	out	0x22, r25	; 34
    6446:	81 bd       	out	0x21, r24	; 33
    6448:	20 bd       	out	0x20, r18	; 32
    644a:	0f b6       	in	r0, 0x3f	; 63
    644c:	f8 94       	cli
    644e:	fa 9a       	sbi	0x1f, 2	; 31
    6450:	f9 9a       	sbi	0x1f, 1	; 31
    6452:	0f be       	out	0x3f, r0	; 63
    6454:	01 96       	adiw	r24, 0x01	; 1
    6456:	08 95       	ret

00006458 <eeprom_write_dword>:
    6458:	24 2f       	mov	r18, r20
    645a:	0e 94 1f 32 	call	0x643e	; 0x643e <eeprom_write_r18>
    645e:	25 2f       	mov	r18, r21
    6460:	0e 94 1f 32 	call	0x643e	; 0x643e <eeprom_write_r18>
    6464:	0c 94 34 32 	jmp	0x6468	; 0x6468 <eeprom_write_word>

00006468 <eeprom_write_word>:
    6468:	0e 94 1e 32 	call	0x643c	; 0x643c <eeprom_write_byte>
    646c:	27 2f       	mov	r18, r23
    646e:	0c 94 1f 32 	jmp	0x643e	; 0x643e <eeprom_write_r18>

00006472 <eeprom_read_block>:
    6472:	dc 01       	movw	r26, r24
    6474:	cb 01       	movw	r24, r22

00006476 <eeprom_read_blraw>:
    6476:	fc 01       	movw	r30, r24
    6478:	f9 99       	sbic	0x1f, 1	; 31
    647a:	fe cf       	rjmp	.-4      	; 0x6478 <eeprom_read_blraw+0x2>
    647c:	06 c0       	rjmp	.+12     	; 0x648a <eeprom_read_blraw+0x14>
    647e:	f2 bd       	out	0x22, r31	; 34
    6480:	e1 bd       	out	0x21, r30	; 33
    6482:	f8 9a       	sbi	0x1f, 0	; 31
    6484:	31 96       	adiw	r30, 0x01	; 1
    6486:	00 b4       	in	r0, 0x20	; 32
    6488:	0d 92       	st	X+, r0
    648a:	41 50       	subi	r20, 0x01	; 1
    648c:	50 40       	sbci	r21, 0x00	; 0
    648e:	b8 f7       	brcc	.-18     	; 0x647e <eeprom_read_blraw+0x8>
    6490:	08 95       	ret

00006492 <__prologue_saves__>:
    6492:	2f 92       	push	r2
    6494:	3f 92       	push	r3
    6496:	4f 92       	push	r4
    6498:	5f 92       	push	r5
    649a:	6f 92       	push	r6
    649c:	7f 92       	push	r7
    649e:	8f 92       	push	r8
    64a0:	9f 92       	push	r9
    64a2:	af 92       	push	r10
    64a4:	bf 92       	push	r11
    64a6:	cf 92       	push	r12
    64a8:	df 92       	push	r13
    64aa:	ef 92       	push	r14
    64ac:	ff 92       	push	r15
    64ae:	0f 93       	push	r16
    64b0:	1f 93       	push	r17
    64b2:	cf 93       	push	r28
    64b4:	df 93       	push	r29
    64b6:	cd b7       	in	r28, 0x3d	; 61
    64b8:	de b7       	in	r29, 0x3e	; 62
    64ba:	ca 1b       	sub	r28, r26
    64bc:	db 0b       	sbc	r29, r27
    64be:	0f b6       	in	r0, 0x3f	; 63
    64c0:	f8 94       	cli
    64c2:	de bf       	out	0x3e, r29	; 62
    64c4:	0f be       	out	0x3f, r0	; 63
    64c6:	cd bf       	out	0x3d, r28	; 61
    64c8:	09 94       	ijmp

000064ca <__epilogue_restores__>:
    64ca:	2a 88       	ldd	r2, Y+18	; 0x12
    64cc:	39 88       	ldd	r3, Y+17	; 0x11
    64ce:	48 88       	ldd	r4, Y+16	; 0x10
    64d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    64d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    64d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    64d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    64d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    64da:	aa 84       	ldd	r10, Y+10	; 0x0a
    64dc:	b9 84       	ldd	r11, Y+9	; 0x09
    64de:	c8 84       	ldd	r12, Y+8	; 0x08
    64e0:	df 80       	ldd	r13, Y+7	; 0x07
    64e2:	ee 80       	ldd	r14, Y+6	; 0x06
    64e4:	fd 80       	ldd	r15, Y+5	; 0x05
    64e6:	0c 81       	ldd	r16, Y+4	; 0x04
    64e8:	1b 81       	ldd	r17, Y+3	; 0x03
    64ea:	aa 81       	ldd	r26, Y+2	; 0x02
    64ec:	b9 81       	ldd	r27, Y+1	; 0x01
    64ee:	ce 0f       	add	r28, r30
    64f0:	d1 1d       	adc	r29, r1
    64f2:	0f b6       	in	r0, 0x3f	; 63
    64f4:	f8 94       	cli
    64f6:	de bf       	out	0x3e, r29	; 62
    64f8:	0f be       	out	0x3f, r0	; 63
    64fa:	cd bf       	out	0x3d, r28	; 61
    64fc:	ed 01       	movw	r28, r26
    64fe:	08 95       	ret

00006500 <__do_global_dtors>:
    6500:	11 e0       	ldi	r17, 0x01	; 1
    6502:	c5 e1       	ldi	r28, 0x15	; 21
    6504:	d1 e0       	ldi	r29, 0x01	; 1
    6506:	04 c0       	rjmp	.+8      	; 0x6510 <__do_global_dtors+0x10>
    6508:	fe 01       	movw	r30, r28
    650a:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <__tablejump2__>
    650e:	21 96       	adiw	r28, 0x01	; 1
    6510:	c6 31       	cpi	r28, 0x16	; 22
    6512:	d1 07       	cpc	r29, r17
    6514:	c9 f7       	brne	.-14     	; 0x6508 <__do_global_dtors+0x8>
    6516:	f8 94       	cli

00006518 <__stop_program>:
    6518:	ff cf       	rjmp	.-2      	; 0x6518 <__stop_program>
