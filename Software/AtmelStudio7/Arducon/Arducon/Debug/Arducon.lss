
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  0000674a  000067fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000674a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000297  00800316  00800316  00006a14  2**0
                  ALLOC
  3 .eeprom       0000032d  00810000  00810000  00006a14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00006d41  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006da0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00006de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007bad  00000000  00000000  000072e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001971  00000000  00000000  0000ee95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000047f9  00000000  00000000  00010806  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dd8  00000000  00000000  00015000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026e0  00000000  00000000  00015dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005cd1  00000000  00000000  000184b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004b8  00000000  00000000  0001e189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__dtors_end>
       4:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_1>
       8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      14:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_5>
      18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      20:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__vector_8>
      24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      2c:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__vector_11>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      38:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__vector_14>
      3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      48:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_18>
      4c:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_19>
      50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      54:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_21>
      58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      68:	6c 01       	movw	r12, r24
      6a:	77 01       	movw	r14, r14
      6c:	82 01       	movw	r16, r4
      6e:	8d 01       	movw	r16, r26
      70:	98 01       	movw	r18, r16
      72:	a3 01       	movw	r20, r6
      74:	ae 01       	movw	r20, r28
      76:	b9 01       	movw	r22, r18
      78:	c4 01       	movw	r24, r8
      7a:	cf 01       	movw	r24, r30
      7c:	da 01       	movw	r26, r20
      7e:	31 02       	muls	r19, r17
      80:	31 02       	muls	r19, r17
      82:	e5 01       	movw	r28, r10
      84:	f0 01       	movw	r30, r0
      86:	fb 01       	movw	r30, r22
      88:	06 02       	muls	r16, r22
      8a:	11 02       	muls	r17, r17
      8c:	1c 02       	muls	r17, r28
      8e:	27 02       	muls	r18, r23
      90:	3c 02       	muls	r19, r28
      92:	40 02       	muls	r20, r16
      94:	44 02       	muls	r20, r20
      96:	48 02       	muls	r20, r24
      98:	4c 02       	muls	r20, r28
      9a:	50 02       	muls	r21, r16
      9c:	54 02       	muls	r21, r20
      9e:	59 02       	muls	r21, r25
      a0:	5d 02       	muls	r21, r29
      a2:	76 02       	muls	r23, r22
      a4:	76 02       	muls	r23, r22
      a6:	61 02       	muls	r22, r17
      a8:	65 02       	muls	r22, r21
      aa:	6a 02       	muls	r22, r26
      ac:	6e 02       	muls	r22, r30
      ae:	72 02       	muls	r23, r18
      b0:	87 02       	muls	r24, r23
      b2:	8d 02       	muls	r24, r29
      b4:	93 02       	muls	r25, r19
      b6:	99 02       	muls	r25, r25
      b8:	9f 02       	muls	r25, r31
      ba:	a5 02       	muls	r26, r21
      bc:	ab 02       	muls	r26, r27
      be:	b1 02       	muls	r27, r17
      c0:	b7 02       	muls	r27, r23
      c2:	bd 02       	muls	r27, r29
      c4:	c3 02       	muls	r28, r19
      c6:	e6 02       	muls	r30, r22
      c8:	e6 02       	muls	r30, r22
      ca:	c9 02       	muls	r28, r25
      cc:	cf 02       	muls	r28, r31
      ce:	d5 02       	muls	r29, r21
      d0:	db 02       	muls	r29, r27
      d2:	e1 02       	muls	r30, r17
      d4:	07 03       	mulsu	r16, r23
      d6:	66 03       	mulsu	r22, r22
      d8:	66 03       	mulsu	r22, r22
      da:	24 03       	mulsu	r18, r20
      dc:	4b 03       	fmul	r20, r19
      de:	04 03       	mulsu	r16, r20
      e0:	4e 03       	fmul	r20, r22
      e2:	54 03       	mulsu	r21, r20
      e4:	01 03       	mulsu	r16, r17
      e6:	5e 03       	fmul	r21, r22
      e8:	fe 02       	muls	r31, r30
      ea:	45 03       	mulsu	r20, r21
      ec:	48 03       	fmul	r20, r16
      ee:	57 03       	mulsu	r21, r23
      f0:	af 03       	fmulsu	r18, r23
      f2:	81 03       	fmuls	r16, r17
      f4:	b2 03       	fmuls	r19, r18
      f6:	84 03       	fmuls	r16, r20
      f8:	87 03       	fmuls	r16, r23
      fa:	8a 03       	fmulsu	r16, r18
      fc:	8d 03       	fmulsu	r16, r21
      fe:	90 03       	fmuls	r17, r16
     100:	93 03       	fmuls	r17, r19
     102:	96 03       	fmuls	r17, r22
     104:	99 03       	fmulsu	r17, r17
     106:	e6 12       	cpse	r14, r22
     108:	e6 12       	cpse	r14, r22
     10a:	e6 12       	cpse	r14, r22
     10c:	e6 12       	cpse	r14, r22
     10e:	e6 12       	cpse	r14, r22
     110:	68 13       	cpse	r22, r24
     112:	68 13       	cpse	r22, r24
     114:	04 13       	cpse	r16, r20
     116:	04 13       	cpse	r16, r20
     118:	04 13       	cpse	r16, r20
     11a:	04 13       	cpse	r16, r20
     11c:	04 13       	cpse	r16, r20
     11e:	26 13       	cpse	r18, r22
     120:	26 13       	cpse	r18, r22
     122:	26 13       	cpse	r18, r22
     124:	26 13       	cpse	r18, r22
     126:	26 13       	cpse	r18, r22
     128:	68 13       	cpse	r22, r24
     12a:	46 13       	cpse	r20, r22
     12c:	9f 1f       	adc	r25, r31
     12e:	e1 1f       	adc	r30, r17
     130:	55 20       	and	r5, r5
     132:	60 20       	and	r6, r0
     134:	6b 20       	and	r6, r11
     136:	75 20       	and	r7, r5
     138:	82 20       	and	r8, r2
     13a:	0c 21       	and	r16, r12
     13c:	7b 21       	and	r23, r11
     13e:	f6 21       	and	r31, r6
     140:	3a 22       	and	r3, r26
     142:	7e 22       	and	r7, r30
     144:	ba 21       	and	r27, r10
     146:	c4 22       	and	r12, r20
     148:	e6 22       	and	r14, r22
     14a:	d5 20       	and	r13, r5
     14c:	f4 22       	and	r15, r20
     14e:	18 20       	and	r1, r8
     150:	20 23       	and	r18, r16
     152:	a9 27       	eor	r26, r25
     154:	6d 27       	eor	r22, r29
     156:	99 27       	eor	r25, r25
     158:	b1 27       	eor	r27, r17
     15a:	9d 27       	eor	r25, r29
     15c:	b1 27       	eor	r27, r17
     15e:	7d 27       	eor	r23, r29
     160:	69 27       	eor	r22, r25
     162:	75 27       	eor	r23, r21
     164:	79 27       	eor	r23, r25
     166:	b1 27       	eor	r27, r17
     168:	8d 27       	eor	r24, r29
     16a:	61 27       	eor	r22, r17
     16c:	91 27       	eor	r25, r17
     16e:	5d 27       	eor	r21, r29
     170:	71 27       	eor	r23, r17
     172:	35 27       	eor	r19, r21
     174:	39 27       	eor	r19, r25
     176:	3d 27       	eor	r19, r29
     178:	41 27       	eor	r20, r17
     17a:	45 27       	eor	r20, r21
     17c:	49 27       	eor	r20, r25
     17e:	4d 27       	eor	r20, r29
     180:	51 27       	eor	r21, r17
     182:	55 27       	eor	r21, r21
     184:	59 27       	eor	r21, r25
     186:	81 27       	eor	r24, r17
     188:	85 27       	eor	r24, r21
     18a:	ad 27       	eor	r26, r29
     18c:	89 27       	eor	r24, r25
     18e:	b1 27       	eor	r27, r17
     190:	65 27       	eor	r22, r21
     192:	a1 27       	eor	r26, r17
     194:	b5 27       	eor	r27, r21
     196:	d1 26       	eor	r13, r17
     198:	d5 26       	eor	r13, r21
     19a:	d9 26       	eor	r13, r25
     19c:	dd 26       	eor	r13, r29
     19e:	e1 26       	eor	r14, r17
     1a0:	e5 26       	eor	r14, r21
     1a2:	e9 26       	eor	r14, r25
     1a4:	ed 26       	eor	r14, r29
     1a6:	f1 26       	eor	r15, r17
     1a8:	f5 26       	eor	r15, r21
     1aa:	f9 26       	eor	r15, r25
     1ac:	fd 26       	eor	r15, r29
     1ae:	01 27       	eor	r16, r17
     1b0:	05 27       	eor	r16, r21
     1b2:	09 27       	eor	r16, r25
     1b4:	0d 27       	eor	r16, r29
     1b6:	11 27       	eor	r17, r17
     1b8:	15 27       	eor	r17, r21
     1ba:	19 27       	eor	r17, r25
     1bc:	1d 27       	eor	r17, r29
     1be:	21 27       	eor	r18, r17
     1c0:	25 27       	eor	r18, r21
     1c2:	29 27       	eor	r18, r25
     1c4:	2d 27       	eor	r18, r29
     1c6:	31 27       	eor	r19, r17
     1c8:	b1 27       	eor	r27, r17
     1ca:	b1 27       	eor	r27, r17
     1cc:	b1 27       	eor	r27, r17
     1ce:	b1 27       	eor	r27, r17
     1d0:	95 27       	eor	r25, r21
     1d2:	b1 27       	eor	r27, r17
     1d4:	b1 27       	eor	r27, r17
     1d6:	b1 27       	eor	r27, r17
     1d8:	b1 27       	eor	r27, r17
     1da:	b1 27       	eor	r27, r17
     1dc:	b1 27       	eor	r27, r17
     1de:	b1 27       	eor	r27, r17
     1e0:	b1 27       	eor	r27, r17
     1e2:	b1 27       	eor	r27, r17
     1e4:	b1 27       	eor	r27, r17
     1e6:	b1 27       	eor	r27, r17
     1e8:	b1 27       	eor	r27, r17
     1ea:	b1 27       	eor	r27, r17
     1ec:	b1 27       	eor	r27, r17
     1ee:	b1 27       	eor	r27, r17
     1f0:	b1 27       	eor	r27, r17
     1f2:	b1 27       	eor	r27, r17
     1f4:	b1 27       	eor	r27, r17
     1f6:	b1 27       	eor	r27, r17
     1f8:	b1 27       	eor	r27, r17
     1fa:	b1 27       	eor	r27, r17
     1fc:	b1 27       	eor	r27, r17
     1fe:	b1 27       	eor	r27, r17
     200:	b1 27       	eor	r27, r17
     202:	b1 27       	eor	r27, r17
     204:	b1 27       	eor	r27, r17
     206:	b1 27       	eor	r27, r17
     208:	b1 27       	eor	r27, r17
     20a:	a5 27       	eor	r26, r21
     20c:	05 a8       	ldd	r0, Z+53	; 0x35
     20e:	4c cd       	rjmp	.-1384   	; 0xfffffca8 <__eeprom_end+0xff7ef97b>
     210:	b2 d4       	rcall	.+2404   	; 0xb76 <_ZN8GoertzelC1Eff+0x90>
     212:	4e b9       	out	0x0e, r20	; 14
     214:	38 36       	cpi	r19, 0x68	; 104
     216:	a9 02       	muls	r26, r25
     218:	0c 50       	subi	r16, 0x0C	; 12
     21a:	b9 91       	ld	r27, Y+
     21c:	86 88       	ldd	r8, Z+22	; 0x16
     21e:	08 3c       	cpi	r16, 0xC8	; 200
     220:	a6 aa       	std	Z+54, r10	; 0x36
     222:	aa 2a       	or	r10, r26
     224:	be 00       	.word	0x00be	; ????
     226:	00 00       	nop
     228:	80 3f       	cpi	r24, 0xF0	; 240

0000022a <__ctors_start>:
     22a:	a5 26       	eor	r10, r21

0000022c <__ctors_end>:
     22c:	ba 26       	eor	r11, r26

0000022e <__dtors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d8 e0       	ldi	r29, 0x08	; 8
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61

0000023a <__do_copy_data>:
     23a:	13 e0       	ldi	r17, 0x03	; 3
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	ea e4       	ldi	r30, 0x4A	; 74
     242:	f7 e6       	ldi	r31, 0x67	; 103
     244:	02 c0       	rjmp	.+4      	; 0x24a <__do_copy_data+0x10>
     246:	05 90       	lpm	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	a6 31       	cpi	r26, 0x16	; 22
     24c:	b1 07       	cpc	r27, r17
     24e:	d9 f7       	brne	.-10     	; 0x246 <__do_copy_data+0xc>

00000250 <__do_clear_bss>:
     250:	25 e0       	ldi	r18, 0x05	; 5
     252:	a6 e1       	ldi	r26, 0x16	; 22
     254:	b3 e0       	ldi	r27, 0x03	; 3
     256:	01 c0       	rjmp	.+2      	; 0x25a <.do_clear_bss_start>

00000258 <.do_clear_bss_loop>:
     258:	1d 92       	st	X+, r1

0000025a <.do_clear_bss_start>:
     25a:	ad 3a       	cpi	r26, 0xAD	; 173
     25c:	b2 07       	cpc	r27, r18
     25e:	e1 f7       	brne	.-8      	; 0x258 <.do_clear_bss_loop>

00000260 <__do_global_ctors>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	c6 e1       	ldi	r28, 0x16	; 22
     264:	d1 e0       	ldi	r29, 0x01	; 1
     266:	04 c0       	rjmp	.+8      	; 0x270 <__do_global_ctors+0x10>
     268:	21 97       	sbiw	r28, 0x01	; 1
     26a:	fe 01       	movw	r30, r28
     26c:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <__tablejump2__>
     270:	c5 31       	cpi	r28, 0x15	; 21
     272:	d1 07       	cpc	r29, r17
     274:	c9 f7       	brne	.-14     	; 0x268 <__do_global_ctors+0x8>
     276:	0e 94 83 25 	call	0x4b06	; 0x4b06 <main>
     27a:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__do_global_dtors>

0000027e <__bad_interrupt>:
     27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <month_length>:
     282:	62 30       	cpi	r22, 0x02	; 2
     284:	21 f4       	brne	.+8      	; 0x28e <month_length+0xc>
     286:	0e 94 4e 01 	call	0x29c	; 0x29c <is_leap_year>
     28a:	84 5e       	subi	r24, 0xE4	; 228
     28c:	08 95       	ret
     28e:	68 30       	cpi	r22, 0x08	; 8
     290:	08 f0       	brcs	.+2      	; 0x294 <month_length+0x12>
     292:	6f 5f       	subi	r22, 0xFF	; 255
     294:	61 70       	andi	r22, 0x01	; 1
     296:	8e e1       	ldi	r24, 0x1E	; 30
     298:	86 0f       	add	r24, r22
     29a:	08 95       	ret

0000029c <is_leap_year>:
     29c:	9c 01       	movw	r18, r24
     29e:	23 70       	andi	r18, 0x03	; 3
     2a0:	33 27       	eor	r19, r19
     2a2:	23 2b       	or	r18, r19
     2a4:	59 f4       	brne	.+22     	; 0x2bc <is_leap_year+0x20>
     2a6:	64 e6       	ldi	r22, 0x64	; 100
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
     2ae:	89 2b       	or	r24, r25
     2b0:	39 f4       	brne	.+14     	; 0x2c0 <is_leap_year+0x24>
     2b2:	63 70       	andi	r22, 0x03	; 3
     2b4:	77 27       	eor	r23, r23
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	67 2b       	or	r22, r23
     2ba:	19 f0       	breq	.+6      	; 0x2c2 <is_leap_year+0x26>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 95       	ret
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	08 95       	ret

000002c4 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	84 31       	cpi	r24, 0x14	; 20
     2c8:	91 05       	cpc	r25, r1
     2ca:	08 f0       	brcs	.+2      	; 0x2ce <_Z7pinModehh+0xa>
     2cc:	ca c0       	rjmp	.+404    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     2ce:	fc 01       	movw	r30, r24
     2d0:	ec 5c       	subi	r30, 0xCC	; 204
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     2d8:	61 30       	cpi	r22, 0x01	; 1
     2da:	11 f4       	brne	.+4      	; 0x2e0 <_Z7pinModehh+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     2dc:	50 9a       	sbi	0x0a, 0	; 10
     2de:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     2e0:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     2e2:	63 30       	cpi	r22, 0x03	; 3
     2e4:	11 f4       	brne	.+4      	; 0x2ea <_Z7pinModehh+0x26>
				{
					PORTD  |= (1 << PORTD0);
     2e6:	58 9a       	sbi	0x0b, 0	; 11
     2e8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     2ea:	58 98       	cbi	0x0b, 0	; 11
     2ec:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     2ee:	61 30       	cpi	r22, 0x01	; 1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <_Z7pinModehh+0x32>
			{
				DDRD  |= (1 << PORTD1);
     2f2:	51 9a       	sbi	0x0a, 1	; 10
     2f4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     2f6:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     2f8:	63 30       	cpi	r22, 0x03	; 3
     2fa:	11 f4       	brne	.+4      	; 0x300 <_Z7pinModehh+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     2fc:	59 9a       	sbi	0x0b, 1	; 11
     2fe:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     300:	59 98       	cbi	0x0b, 1	; 11
     302:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     304:	61 30       	cpi	r22, 0x01	; 1
     306:	11 f4       	brne	.+4      	; 0x30c <_Z7pinModehh+0x48>
			{
				DDRD  |= (1 << PORTD2);
     308:	52 9a       	sbi	0x0a, 2	; 10
     30a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     30c:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     30e:	63 30       	cpi	r22, 0x03	; 3
     310:	11 f4       	brne	.+4      	; 0x316 <_Z7pinModehh+0x52>
				{
					PORTD  |= (1 << PORTD2);
     312:	5a 9a       	sbi	0x0b, 2	; 11
     314:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     316:	5a 98       	cbi	0x0b, 2	; 11
     318:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     31a:	61 30       	cpi	r22, 0x01	; 1
     31c:	11 f4       	brne	.+4      	; 0x322 <_Z7pinModehh+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     31e:	53 9a       	sbi	0x0a, 3	; 10
     320:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     322:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     324:	63 30       	cpi	r22, 0x03	; 3
     326:	11 f4       	brne	.+4      	; 0x32c <_Z7pinModehh+0x68>
				{
					PORTD  |= (1 << PORTD3);
     328:	5b 9a       	sbi	0x0b, 3	; 11
     32a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     32c:	5b 98       	cbi	0x0b, 3	; 11
     32e:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     330:	61 30       	cpi	r22, 0x01	; 1
     332:	11 f4       	brne	.+4      	; 0x338 <_Z7pinModehh+0x74>
			{
				DDRD  |= (1 << PORTD4);
     334:	54 9a       	sbi	0x0a, 4	; 10
     336:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     338:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     33a:	63 30       	cpi	r22, 0x03	; 3
     33c:	11 f4       	brne	.+4      	; 0x342 <_Z7pinModehh+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     33e:	5c 9a       	sbi	0x0b, 4	; 11
     340:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     342:	5c 98       	cbi	0x0b, 4	; 11
     344:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     346:	61 30       	cpi	r22, 0x01	; 1
     348:	11 f4       	brne	.+4      	; 0x34e <_Z7pinModehh+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     34a:	55 9a       	sbi	0x0a, 5	; 10
     34c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     34e:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     350:	63 30       	cpi	r22, 0x03	; 3
     352:	11 f4       	brne	.+4      	; 0x358 <_Z7pinModehh+0x94>
				{
					PORTD  |= (1 << PORTD5);
     354:	5d 9a       	sbi	0x0b, 5	; 11
     356:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     35c:	61 30       	cpi	r22, 0x01	; 1
     35e:	11 f4       	brne	.+4      	; 0x364 <_Z7pinModehh+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     360:	56 9a       	sbi	0x0a, 6	; 10
     362:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     364:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     366:	63 30       	cpi	r22, 0x03	; 3
     368:	11 f4       	brne	.+4      	; 0x36e <_Z7pinModehh+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     36a:	5e 9a       	sbi	0x0b, 6	; 11
     36c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     36e:	5e 98       	cbi	0x0b, 6	; 11
     370:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     372:	61 30       	cpi	r22, 0x01	; 1
     374:	11 f4       	brne	.+4      	; 0x37a <_Z7pinModehh+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     376:	57 9a       	sbi	0x0a, 7	; 10
     378:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     37a:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     37c:	63 30       	cpi	r22, 0x03	; 3
     37e:	11 f4       	brne	.+4      	; 0x384 <_Z7pinModehh+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     380:	5f 9a       	sbi	0x0b, 7	; 11
     382:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     384:	5f 98       	cbi	0x0b, 7	; 11
     386:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     388:	61 30       	cpi	r22, 0x01	; 1
     38a:	11 f4       	brne	.+4      	; 0x390 <_Z7pinModehh+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     38c:	20 9a       	sbi	0x04, 0	; 4
     38e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     390:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     392:	63 30       	cpi	r22, 0x03	; 3
     394:	11 f4       	brne	.+4      	; 0x39a <_Z7pinModehh+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     396:	28 9a       	sbi	0x05, 0	; 5
     398:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     39a:	28 98       	cbi	0x05, 0	; 5
     39c:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     39e:	61 30       	cpi	r22, 0x01	; 1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <_Z7pinModehh+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3a2:	21 9a       	sbi	0x04, 1	; 4
     3a4:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3a6:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3a8:	63 30       	cpi	r22, 0x03	; 3
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <_Z7pinModehh+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3ac:	29 9a       	sbi	0x05, 1	; 5
     3ae:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3b0:	29 98       	cbi	0x05, 1	; 5
     3b2:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3b4:	61 30       	cpi	r22, 0x01	; 1
     3b6:	11 f4       	brne	.+4      	; 0x3bc <_Z7pinModehh+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3b8:	22 9a       	sbi	0x04, 2	; 4
     3ba:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3bc:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3be:	63 30       	cpi	r22, 0x03	; 3
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <_Z7pinModehh+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3c2:	2a 9a       	sbi	0x05, 2	; 5
     3c4:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3c6:	2a 98       	cbi	0x05, 2	; 5
     3c8:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x10e>
			{
				DDRB  |= (1 << PORTB5);
     3ce:	25 9a       	sbi	0x04, 5	; 4
     3d0:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3d2:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModehh+0x118>
				{
					PORTD  |= (1 << PORTB5);
     3d8:	5d 9a       	sbi	0x0b, 5	; 11
     3da:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3dc:	5d 98       	cbi	0x0b, 5	; 11
     3de:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3e0:	61 30       	cpi	r22, 0x01	; 1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <_Z7pinModehh+0x124>
			{
				DDRC  |= (1 << PORTC0);
     3e4:	38 9a       	sbi	0x07, 0	; 7
     3e6:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3e8:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ea:	63 30       	cpi	r22, 0x03	; 3
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <_Z7pinModehh+0x12e>
				{
					PORTC  |= (1 << PORTC0);
     3ee:	40 9a       	sbi	0x08, 0	; 8
     3f0:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3f2:	40 98       	cbi	0x08, 0	; 8
     3f4:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     3f6:	61 30       	cpi	r22, 0x01	; 1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <_Z7pinModehh+0x13a>
			{
				DDRC  |= (1 << PORTC1);
     3fa:	39 9a       	sbi	0x07, 1	; 7
     3fc:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3fe:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     400:	63 30       	cpi	r22, 0x03	; 3
     402:	11 f4       	brne	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				{
					PORTC  |= (1 << PORTC1);
     404:	41 9a       	sbi	0x08, 1	; 8
     406:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     408:	41 98       	cbi	0x08, 1	; 8
     40a:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     40c:	61 30       	cpi	r22, 0x01	; 1
     40e:	11 f4       	brne	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				DDRC  |= (1 << PORTC2);
     410:	3a 9a       	sbi	0x07, 2	; 7
     412:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     414:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     416:	63 30       	cpi	r22, 0x03	; 3
     418:	11 f4       	brne	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				{
					PORTC  |= (1 << PORTC2);
     41a:	42 9a       	sbi	0x08, 2	; 8
     41c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     41e:	42 98       	cbi	0x08, 2	; 8
     420:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     422:	61 30       	cpi	r22, 0x01	; 1
     424:	11 f4       	brne	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				DDRC  |= (1 << PORTC3);
     426:	3b 9a       	sbi	0x07, 3	; 7
     428:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     42a:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     42c:	63 30       	cpi	r22, 0x03	; 3
     42e:	11 f4       	brne	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				{
					PORTC  |= (1 << PORTC3);
     430:	43 9a       	sbi	0x08, 3	; 8
     432:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     434:	43 98       	cbi	0x08, 3	; 8
     436:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     438:	61 30       	cpi	r22, 0x01	; 1
     43a:	11 f4       	brne	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			{
				DDRC  |= (1 << PORTC4);
     43c:	3c 9a       	sbi	0x07, 4	; 7
     43e:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     440:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     442:	63 30       	cpi	r22, 0x03	; 3
     444:	11 f4       	brne	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				{
					PORTC  |= (1 << PORTC4);
     446:	44 9a       	sbi	0x08, 4	; 8
     448:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     44a:	44 98       	cbi	0x08, 4	; 8
     44c:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     44e:	61 30       	cpi	r22, 0x01	; 1
     450:	11 f4       	brne	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				DDRC  |= (1 << PORTC5);
     452:	3d 9a       	sbi	0x07, 5	; 7
     454:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     456:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     458:	63 30       	cpi	r22, 0x03	; 3
     45a:	11 f4       	brne	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				{
					PORTC  |= (1 << PORTC5);
     45c:	45 9a       	sbi	0x08, 5	; 8
     45e:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     460:	45 98       	cbi	0x08, 5	; 8
     462:	08 95       	ret

00000464 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	32 97       	sbiw	r30, 0x02	; 2
     46a:	e0 31       	cpi	r30, 0x10	; 16
     46c:	f1 05       	cpc	r31, r1
     46e:	f0 f5       	brcc	.+124    	; 0x4ec <_Z11digitalReadh+0x88>
     470:	e8 5b       	subi	r30, 0xB8	; 184
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     478:	29 b1       	in	r18, 0x09	; 9
     47a:	24 70       	andi	r18, 0x04	; 4
     47c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47e:	38 c0       	rjmp	.+112    	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     480:	29 b1       	in	r18, 0x09	; 9
     482:	28 70       	andi	r18, 0x08	; 8
     484:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     486:	34 c0       	rjmp	.+104    	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     488:	29 b1       	in	r18, 0x09	; 9
     48a:	20 71       	andi	r18, 0x10	; 16
     48c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48e:	30 c0       	rjmp	.+96     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     490:	29 b1       	in	r18, 0x09	; 9
     492:	20 72       	andi	r18, 0x20	; 32
     494:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     496:	2c c0       	rjmp	.+88     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     498:	29 b1       	in	r18, 0x09	; 9
     49a:	20 74       	andi	r18, 0x40	; 64
     49c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49e:	28 c0       	rjmp	.+80     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     4a0:	29 b1       	in	r18, 0x09	; 9
     4a2:	20 78       	andi	r18, 0x80	; 128
     4a4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a6:	24 c0       	rjmp	.+72     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4a8:	83 b1       	in	r24, 0x03	; 3
     4aa:	28 2f       	mov	r18, r24
     4ac:	21 70       	andi	r18, 0x01	; 1
     4ae:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b0:	1f c0       	rjmp	.+62     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4b2:	23 b1       	in	r18, 0x03	; 3
     4b4:	22 70       	andi	r18, 0x02	; 2
     4b6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4ba:	23 b1       	in	r18, 0x03	; 3
     4bc:	24 70       	andi	r18, 0x04	; 4
     4be:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4c2:	23 b1       	in	r18, 0x03	; 3
     4c4:	20 72       	andi	r18, 0x20	; 32
     4c6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4ca:	86 b1       	in	r24, 0x06	; 6
     4cc:	28 2f       	mov	r18, r24
     4ce:	21 70       	andi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4d4:	26 b1       	in	r18, 0x06	; 6
     4d6:	22 70       	andi	r18, 0x02	; 2
     4d8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4da:	0a c0       	rjmp	.+20     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4dc:	26 b1       	in	r18, 0x06	; 6
     4de:	24 70       	andi	r18, 0x04	; 4
     4e0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4e4:	26 b1       	in	r18, 0x06	; 6
     4e6:	28 70       	andi	r18, 0x08	; 8
     4e8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	23 2b       	or	r18, r19
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <_Z11digitalReadh+0x94>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
}
     4f8:	08 95       	ret

000004fa <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	82 31       	cpi	r24, 0x12	; 18
     4fe:	91 05       	cpc	r25, r1
     500:	08 f0       	brcs	.+2      	; 0x504 <_Z12digitalWritehh+0xa>
     502:	64 c0       	rjmp	.+200    	; 0x5cc <_Z12digitalWritehh+0xd2>
     504:	fc 01       	movw	r30, r24
     506:	e8 5a       	subi	r30, 0xA8	; 168
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     50e:	66 23       	and	r22, r22
     510:	11 f0       	breq	.+4      	; 0x516 <_Z12digitalWritehh+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     512:	58 9a       	sbi	0x0b, 0	; 11
     514:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     516:	58 98       	cbi	0x0b, 0	; 11
     518:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     51a:	66 23       	and	r22, r22
     51c:	11 f0       	breq	.+4      	; 0x522 <_Z12digitalWritehh+0x28>
			{
				PORTD  |= (1 << PORTD1);
     51e:	59 9a       	sbi	0x0b, 1	; 11
     520:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     522:	59 98       	cbi	0x0b, 1	; 11
     524:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     526:	66 23       	and	r22, r22
     528:	11 f0       	breq	.+4      	; 0x52e <_Z12digitalWritehh+0x34>
			{
				PORTD  |= (1 << PORTD2);
     52a:	5a 9a       	sbi	0x0b, 2	; 11
     52c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     52e:	5a 98       	cbi	0x0b, 2	; 11
     530:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     532:	66 23       	and	r22, r22
     534:	11 f0       	breq	.+4      	; 0x53a <_Z12digitalWritehh+0x40>
			{
				PORTD  |= (1 << PORTD3);
     536:	5b 9a       	sbi	0x0b, 3	; 11
     538:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     53a:	5b 98       	cbi	0x0b, 3	; 11
     53c:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     53e:	66 23       	and	r22, r22
     540:	11 f0       	breq	.+4      	; 0x546 <_Z12digitalWritehh+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     542:	5c 9a       	sbi	0x0b, 4	; 11
     544:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     546:	5c 98       	cbi	0x0b, 4	; 11
     548:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     54a:	66 23       	and	r22, r22
     54c:	11 f0       	breq	.+4      	; 0x552 <_Z12digitalWritehh+0x58>
			{
				PORTD  |= (1 << PORTD5);
     54e:	5d 9a       	sbi	0x0b, 5	; 11
     550:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     552:	5d 98       	cbi	0x0b, 5	; 11
     554:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     556:	66 23       	and	r22, r22
     558:	11 f0       	breq	.+4      	; 0x55e <_Z12digitalWritehh+0x64>
			{
				PORTD  |= (1 << PORTD6);
     55a:	5e 9a       	sbi	0x0b, 6	; 11
     55c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     55e:	5e 98       	cbi	0x0b, 6	; 11
     560:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     562:	66 23       	and	r22, r22
     564:	11 f0       	breq	.+4      	; 0x56a <_Z12digitalWritehh+0x70>
			{
				PORTD  |= (1 << PORTD7);
     566:	5f 9a       	sbi	0x0b, 7	; 11
     568:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     56a:	5f 98       	cbi	0x0b, 7	; 11
     56c:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     56e:	66 23       	and	r22, r22
     570:	11 f0       	breq	.+4      	; 0x576 <_Z12digitalWritehh+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     572:	28 9a       	sbi	0x05, 0	; 5
     574:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     576:	28 98       	cbi	0x05, 0	; 5
     578:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     57a:	66 23       	and	r22, r22
     57c:	11 f0       	breq	.+4      	; 0x582 <_Z12digitalWritehh+0x88>
			{
				PORTB  |= (1 << PORTB1);
     57e:	29 9a       	sbi	0x05, 1	; 5
     580:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     582:	29 98       	cbi	0x05, 1	; 5
     584:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     586:	66 23       	and	r22, r22
     588:	11 f0       	breq	.+4      	; 0x58e <_Z12digitalWritehh+0x94>
			{
				PORTB  |= (1 << PORTB2);
     58a:	2a 9a       	sbi	0x05, 2	; 5
     58c:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     58e:	2a 98       	cbi	0x05, 2	; 5
     590:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     592:	66 23       	and	r22, r22
     594:	11 f0       	breq	.+4      	; 0x59a <_Z12digitalWritehh+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     596:	2d 9a       	sbi	0x05, 5	; 5
     598:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     59a:	2d 98       	cbi	0x05, 5	; 5
     59c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     59e:	66 23       	and	r22, r22
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <_Z12digitalWritehh+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5a2:	40 9a       	sbi	0x08, 0	; 8
     5a4:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5a6:	40 98       	cbi	0x08, 0	; 8
     5a8:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5aa:	66 23       	and	r22, r22
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <_Z12digitalWritehh+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5ae:	41 9a       	sbi	0x08, 1	; 8
     5b0:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5b2:	41 98       	cbi	0x08, 1	; 8
     5b4:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5b6:	66 23       	and	r22, r22
     5b8:	11 f0       	breq	.+4      	; 0x5be <_Z12digitalWritehh+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5ba:	42 9a       	sbi	0x08, 2	; 8
     5bc:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5be:	42 98       	cbi	0x08, 2	; 8
     5c0:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5c2:	66 23       	and	r22, r22
     5c4:	11 f0       	breq	.+4      	; 0x5ca <_Z12digitalWritehh+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5c6:	43 9a       	sbi	0x08, 3	; 8
     5c8:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5ca:	43 98       	cbi	0x08, 3	; 8
     5cc:	08 95       	ret

000005ce <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     5ce:	08 95       	ret

000005d0 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     5d0:	08 95       	ret

000005d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5da:	41 15       	cp	r20, r1
     5dc:	51 05       	cpc	r21, r1
     5de:	09 f4       	brne	.+2      	; 0x5e2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5e0:	75 c0       	rjmp	.+234    	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     5e2:	86 2f       	mov	r24, r22
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	3b 97       	sbiw	r30, 0x0b	; 11
     5ea:	ee 30       	cpi	r30, 0x0E	; 14
     5ec:	f1 05       	cpc	r31, r1
     5ee:	08 f0       	brcs	.+2      	; 0x5f2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5f0:	6d c0       	rjmp	.+218    	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     5f2:	da 01       	movw	r26, r20
     5f4:	e6 59       	subi	r30, 0x96	; 150
     5f6:	ff 4f       	sbci	r31, 0xFF	; 255
     5f8:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5fc:	85 e2       	ldi	r24, 0x25	; 37
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	5f c0       	rjmp	.+190    	; 0x6c0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     602:	8f e1       	ldi	r24, 0x1F	; 31
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	55 c0       	rjmp	.+170    	; 0x6b2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     608:	8b e1       	ldi	r24, 0x1B	; 27
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	49 c0       	rjmp	.+146    	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     60e:	8a 01       	movw	r16, r20
     610:	0f 5f       	subi	r16, 0xFF	; 255
     612:	1f 4f       	sbci	r17, 0xFF	; 255
     614:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     616:	66 23       	and	r22, r22
     618:	71 f0       	breq	.+28     	; 0x636 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     61e:	21 96       	adiw	r28, 0x01	; 1
     620:	ce 01       	movw	r24, r28
     622:	8d 59       	subi	r24, 0x9D	; 157
     624:	9d 4f       	sbci	r25, 0xFD	; 253
     626:	0e 94 12 33 	call	0x6624	; 0x6624 <eeprom_update_byte>
				c = *char_addr++;
     62a:	f8 01       	movw	r30, r16
     62c:	61 91       	ld	r22, Z+
     62e:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     630:	61 11       	cpse	r22, r1
     632:	f5 cf       	rjmp	.-22     	; 0x61e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     634:	02 c0       	rjmp	.+4      	; 0x63a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     636:	c0 e0       	ldi	r28, 0x00	; 0
     638:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	ce 01       	movw	r24, r28
     63e:	8c 59       	subi	r24, 0x9C	; 156
     640:	9d 4f       	sbci	r25, 0xFD	; 253
     642:	0e 94 12 33 	call	0x6624	; 0x6624 <eeprom_update_byte>
		}
		break;
     646:	42 c0       	rjmp	.+132    	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     648:	8a 01       	movw	r16, r20
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     650:	66 23       	and	r22, r22
     652:	91 f0       	breq	.+36     	; 0x678 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     654:	c0 e0       	ldi	r28, 0x00	; 0
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	03 c0       	rjmp	.+6      	; 0x660 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     65a:	c8 30       	cpi	r28, 0x08	; 8
     65c:	d1 05       	cpc	r29, r1
     65e:	71 f0       	breq	.+28     	; 0x67c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	ce 01       	movw	r24, r28
     664:	80 5f       	subi	r24, 0xF0	; 240
     666:	9c 4f       	sbci	r25, 0xFC	; 252
     668:	0e 94 12 33 	call	0x6624	; 0x6624 <eeprom_update_byte>
				c = *uint8_addr++;
     66c:	f8 01       	movw	r30, r16
     66e:	61 91       	ld	r22, Z+
     670:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     672:	61 11       	cpse	r22, r1
     674:	f2 cf       	rjmp	.-28     	; 0x65a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     676:	02 c0       	rjmp	.+4      	; 0x67c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     678:	c0 e0       	ldi	r28, 0x00	; 0
     67a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	ce 01       	movw	r24, r28
     680:	8f 5e       	subi	r24, 0xEF	; 239
     682:	9c 4f       	sbci	r25, 0xFC	; 252
     684:	0e 94 12 33 	call	0x6624	; 0x6624 <eeprom_update_byte>
		}
		break;
     688:	21 c0       	rjmp	.+66     	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     68a:	89 e2       	ldi	r24, 0x29	; 41
     68c:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>

		case Ptt_periodic_reset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.ptt_periodic_reset);
     690:	8a e2       	ldi	r24, 0x2A	; 42
     692:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     694:	05 c0       	rjmp	.+10     	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     696:	8a e1       	ldi	r24, 0x1A	; 26
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     69c:	8c e1       	ldi	r24, 0x1C	; 28
     69e:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     6a0:	6c 91       	ld	r22, X
     6a2:	0e 94 12 33 	call	0x6624	; 0x6624 <eeprom_update_byte>
     6a6:	12 c0       	rjmp	.+36     	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     6a8:	8d e1       	ldi	r24, 0x1D	; 29
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     6ae:	8b e2       	ldi	r24, 0x2B	; 43
     6b0:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     6b2:	6d 91       	ld	r22, X+
     6b4:	7c 91       	ld	r23, X
     6b6:	0e 94 30 33 	call	0x6660	; 0x6660 <eeprom_update_word>
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     6bc:	81 e2       	ldi	r24, 0x21	; 33
     6be:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     6c0:	4d 91       	ld	r20, X+
     6c2:	5d 91       	ld	r21, X+
     6c4:	6d 91       	ld	r22, X+
     6c6:	7c 91       	ld	r23, X
     6c8:	0e 94 24 33 	call	0x6648	; 0x6648 <eeprom_update_dword>
	}
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6e2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z10lb_enabledv>
     6e6:	88 23       	and	r24, r24
     6e8:	09 f4       	brne	.+2      	; 0x6ec <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6ea:	46 c0       	rjmp	.+140    	; 0x778 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6ec:	8c 2f       	mov	r24, r28
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	8b 30       	cpi	r24, 0x0B	; 11
     6f2:	91 05       	cpc	r25, r1
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6f6:	40 c0       	rjmp	.+128    	; 0x778 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6f8:	fc 01       	movw	r30, r24
     6fa:	e8 58       	subi	r30, 0x88	; 136
     6fc:	ff 4f       	sbci	r31, 0xFF	; 255
     6fe:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     702:	8a e2       	ldi	r24, 0x2A	; 42
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	30 c0       	rjmp	.+96     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     708:	88 e8       	ldi	r24, 0x88	; 136
     70a:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     70c:	2d c0       	rjmp	.+90     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     70e:	8e ea       	ldi	r24, 0xAE	; 174
     710:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     712:	2a c0       	rjmp	.+84     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     714:	85 ed       	ldi	r24, 0xD5	; 213
     716:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     718:	27 c0       	rjmp	.+78     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     71a:	86 ef       	ldi	r24, 0xF6	; 246
     71c:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     71e:	24 c0       	rjmp	.+72     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     720:	81 e1       	ldi	r24, 0x11	; 17
     722:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     724:	21 c0       	rjmp	.+66     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     726:	87 e2       	ldi	r24, 0x27	; 39
     728:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     72a:	1e c0       	rjmp	.+60     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     72c:	8c e3       	ldi	r24, 0x3C	; 60
     72e:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     730:	1b c0       	rjmp	.+54     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     732:	80 e5       	ldi	r24, 0x50	; 80
     734:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     736:	18 c0       	rjmp	.+48     	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     738:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     73a:	cc 23       	and	r28, r28
     73c:	e9 f0       	breq	.+58     	; 0x778 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     73e:	8c 2f       	mov	r24, r28
     740:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     744:	78 01       	movw	r14, r16
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	e8 1a       	sub	r14, r24
     74a:	f8 0a       	sbc	r15, r24
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     752:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     754:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z19linkbusTxInProgressv>
     758:	81 11       	cpse	r24, r1
     75a:	fc cf       	rjmp	.-8      	; 0x754 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     75c:	ed cf       	rjmp	.-38     	; 0x738 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     764:	80 e6       	ldi	r24, 0x60	; 96
     766:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     768:	8c 01       	movw	r16, r24
     76a:	0f 5f       	subi	r16, 0xFF	; 255
     76c:	1f 4f       	sbci	r17, 0xFF	; 255
     76e:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     772:	c8 2f       	mov	r28, r24

		while(c)
     774:	81 11       	cpse	r24, r1
     776:	e3 cf       	rjmp	.-58     	; 0x73e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	08 95       	ret

00000784 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     790:	8b e2       	ldi	r24, 0x2B	; 43
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 0c 33 	call	0x6618	; 0x6618 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     798:	8b 3b       	cpi	r24, 0xBB	; 187
     79a:	91 05       	cpc	r25, r1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <_ZN13EepromManager11readNonVolsEv+0x1c>
     79e:	b6 c0       	rjmp	.+364    	; 0x90c <__stack+0xd>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     7a0:	8a e1       	ldi	r24, 0x1A	; 26
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	85 30       	cpi	r24, 0x05	; 5
     7ac:	91 05       	cpc	r25, r1
     7ae:	14 f4       	brge	.+4      	; 0x7b4 <_ZN13EepromManager11readNonVolsEv+0x30>
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	85 31       	cpi	r24, 0x15	; 21
     7b6:	91 05       	cpc	r25, r1
     7b8:	14 f0       	brlt	.+4      	; 0x7be <_ZN13EepromManager11readNonVolsEv+0x3a>
     7ba:	84 e1       	ldi	r24, 0x14	; 20
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     7c2:	8b e1       	ldi	r24, 0x1B	; 27
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     7ca:	82 31       	cpi	r24, 0x12	; 18
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <_ZN13EepromManager11readNonVolsEv+0x4c>
     7ce:	81 e1       	ldi	r24, 0x11	; 17
     7d0:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7d4:	8c e1       	ldi	r24, 0x1C	; 28
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     7dc:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7e0:	8d e1       	ldi	r24, 0x1D	; 29
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 0c 33 	call	0x6618	; 0x6618 <eeprom_read_word>
     7e8:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <g_atmega_temp_calibration+0x1>
     7ec:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7f0:	8f e1       	ldi	r24, 0x1F	; 31
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	0e 94 0c 33 	call	0x6618	; 0x6618 <eeprom_read_word>
     7f8:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <g_rv3028_offset+0x1>
     7fc:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     800:	81 e2       	ldi	r24, 0x21	; 33
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 06 33 	call	0x660c	; 0x660c <eeprom_read_dword>
     808:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <g_event_start_epoch>
     80c:	70 93 87 05 	sts	0x0587, r23	; 0x800587 <g_event_start_epoch+0x1>
     810:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_event_start_epoch+0x2>
     814:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     818:	85 e2       	ldi	r24, 0x25	; 37
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 06 33 	call	0x660c	; 0x660c <eeprom_read_dword>
     820:	60 93 82 05 	sts	0x0582, r22	; 0x800582 <g_event_finish_epoch>
     824:	70 93 83 05 	sts	0x0583, r23	; 0x800583 <g_event_finish_epoch+0x1>
     828:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <g_event_finish_epoch+0x2>
     82c:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     830:	89 e2       	ldi	r24, 0x29	; 41
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     838:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_utc_offset>
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));
     83c:	8a e2       	ldi	r24, 0x2A	; 42
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     844:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <g_ptt_periodic_reset_enabled>
     848:	04 e6       	ldi	r16, 0x64	; 100
     84a:	12 e0       	ldi	r17, 0x02	; 2
     84c:	c5 e2       	ldi	r28, 0x25	; 37
     84e:	d5 e0       	ldi	r29, 0x05	; 5
     850:	0f 2e       	mov	r0, r31
     852:	f9 e3       	ldi	r31, 0x39	; 57
     854:	ef 2e       	mov	r14, r31
     856:	f5 e0       	ldi	r31, 0x05	; 5
     858:	ff 2e       	mov	r15, r31
     85a:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     862:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     864:	81 11       	cpse	r24, r1
     866:	0b c0       	rjmp	.+22     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     868:	01 e1       	ldi	r16, 0x11	; 17
     86a:	13 e0       	ldi	r17, 0x03	; 3
     86c:	c1 e4       	ldi	r28, 0x41	; 65
     86e:	d5 e0       	ldi	r29, 0x05	; 5
     870:	0f 2e       	mov	r0, r31
     872:	f9 e4       	ldi	r31, 0x49	; 73
     874:	ef 2e       	mov	r14, r31
     876:	f5 e0       	ldi	r31, 0x05	; 5
     878:	ff 2e       	mov	r15, r31
     87a:	f0 2d       	mov	r31, r0
     87c:	06 c0       	rjmp	.+12     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     882:	ce 15       	cp	r28, r14
     884:	df 05       	cpc	r29, r15
     886:	51 f7       	brne	.-44     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     888:	ef cf       	rjmp	.-34     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     890:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     892:	88 23       	and	r24, r24
     894:	29 f0       	breq	.+10     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     896:	0f 5f       	subi	r16, 0xFF	; 255
     898:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     89a:	ce 15       	cp	r28, r14
     89c:	df 05       	cpc	r29, r15
     89e:	a9 f7       	brne	.-22     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     8a0:	01 ef       	ldi	r16, 0xF1	; 241
     8a2:	12 e0       	ldi	r17, 0x02	; 2
     8a4:	cd e5       	ldi	r28, 0x5D	; 93
     8a6:	d5 e0       	ldi	r29, 0x05	; 5
     8a8:	0f 2e       	mov	r0, r31
     8aa:	fd e7       	ldi	r31, 0x7D	; 125
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f5 e0       	ldi	r31, 0x05	; 5
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_read_byte>
     8ba:	89 93       	st	Y+, r24
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     8c0:	ce 15       	cp	r28, r14
     8c2:	df 05       	cpc	r29, r15
     8c4:	b9 f7       	brne	.-18     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     8c6:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
     8ca:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
     8ce:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
     8d2:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
     8d6:	89 2b       	or	r24, r25
     8d8:	8a 2b       	or	r24, r26
     8da:	8b 2b       	or	r24, r27
     8dc:	c9 f0       	breq	.+50     	; 0x910 <__stack+0x11>
     8de:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_event_finish_epoch>
     8e2:	50 91 83 05 	lds	r21, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
     8e6:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
     8ea:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
     8ee:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
     8f2:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
     8f6:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
     8fa:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
     8fe:	84 17       	cp	r24, r20
     900:	95 07       	cpc	r25, r21
     902:	a6 07       	cpc	r26, r22
     904:	b7 07       	cpc	r27, r23
     906:	30 f4       	brcc	.+12     	; 0x914 <__stack+0x15>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	19 c0       	rjmp	.+50     	; 0x93e <__stack+0x3f>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	17 c0       	rjmp	.+46     	; 0x93e <__stack+0x3f>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	15 c0       	rjmp	.+42     	; 0x93e <__stack+0x3f>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     914:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
     918:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
     91c:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
     920:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
     924:	80 58       	subi	r24, 0x80	; 128
     926:	9e 4a       	sbci	r25, 0xAE	; 174
     928:	ae 4f       	sbci	r26, 0xFE	; 254
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
     92c:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_event_finish_epoch>
     930:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <g_event_finish_epoch+0x1>
     934:	a0 93 84 05 	sts	0x0584, r26	; 0x800584 <g_event_finish_epoch+0x2>
     938:	b0 93 85 05 	sts	0x0585, r27	; 0x800585 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     93c:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	0d e1       	ldi	r16, 0x1D	; 29
     95a:	11 e0       	ldi	r17, 0x01	; 1
     95c:	c1 e4       	ldi	r28, 0x41	; 65
     95e:	d5 e0       	ldi	r29, 0x05	; 5
     960:	0f 2e       	mov	r0, r31
     962:	f5 e4       	ldi	r31, 0x45	; 69
     964:	ef 2e       	mov	r14, r31
     966:	f5 e0       	ldi	r31, 0x05	; 5
     968:	ff 2e       	mov	r15, r31
     96a:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     96c:	f8 01       	movw	r30, r16
     96e:	61 91       	ld	r22, Z+
     970:	8f 01       	movw	r16, r30
     972:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     974:	ce 01       	movw	r24, r28
     976:	0e 94 36 33 	call	0x666c	; 0x666c <eeprom_write_byte>
     97a:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     97c:	ce 15       	cp	r28, r14
     97e:	df 05       	cpc	r29, r15
     980:	a9 f7       	brne	.-22     	; 0x96c <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	85 e1       	ldi	r24, 0x15	; 21
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	0e 94 36 33 	call	0x666c	; 0x666c <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     98c:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <g_unlockCode+0x4>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     990:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), g_AM_audio_frequency);
     994:	60 91 7e 05 	lds	r22, 0x057E	; 0x80057e <g_AM_audio_frequency>
     998:	8c e1       	ldi	r24, 0x1C	; 28
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	0e 94 36 33 	call	0x666c	; 0x666c <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     9a0:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_event_start_epoch>
     9a4:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <g_event_start_epoch+0x1>
     9a8:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <g_event_start_epoch+0x2>
     9ac:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     9b0:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
     9b4:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
     9b8:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
     9bc:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
     9c0:	81 e2       	ldi	r24, 0x21	; 33
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 44 33 	call	0x6688	; 0x6688 <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     9c8:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <g_event_finish_epoch>
     9cc:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <g_event_finish_epoch+0x1>
     9d0:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <g_event_finish_epoch+0x2>
     9d4:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     9d8:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_event_finish_epoch>
     9dc:	50 91 83 05 	lds	r21, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
     9e0:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
     9e4:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
     9e8:	85 e2       	ldi	r24, 0x25	; 37
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	0e 94 44 33 	call	0x6688	; 0x6688 <eeprom_write_dword>
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     a04:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     a18:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     a1c:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     a26:	cb 01       	movw	r24, r22
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	87 58       	subi	r24, 0x87	; 135
     a2e:	9d 4f       	sbci	r25, 0xFD	; 253
     a30:	0e 94 0c 33 	call	0x6618	; 0x6618 <eeprom_read_word>
}
     a34:	08 95       	ret

00000a36 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     a36:	9c 01       	movw	r18, r24
     a38:	2e 5f       	subi	r18, 0xFE	; 254
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	2b 33       	cpi	r18, 0x3B	; 59
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	38 07       	cpc	r19, r24
     a42:	10 f0       	brcs	.+4      	; 0xa48 <_Z8setAttenj+0x12>
     a44:	2b e3       	ldi	r18, 0x3B	; 59
     a46:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     a48:	ad ec       	ldi	r26, 0xCD	; 205
     a4a:	bc ec       	ldi	r27, 0xCC	; 204
     a4c:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	9c 01       	movw	r18, r24
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	28 0f       	add	r18, r24
     a64:	39 1f       	adc	r19, r25
	att /= 5;
     a66:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     a72:	9c 01       	movw	r18, r24
     a74:	20 73       	andi	r18, 0x30	; 48
     a76:	33 27       	eor	r19, r19
     a78:	32 95       	swap	r19
     a7a:	22 95       	swap	r18
     a7c:	2f 70       	andi	r18, 0x0F	; 15
     a7e:	23 27       	eor	r18, r19
     a80:	3f 70       	andi	r19, 0x0F	; 15
     a82:	23 27       	eor	r18, r19
     a84:	20 93 16 03 	sts	0x0316, r18	; 0x800316 <__data_end>

	pattern = PORTC & 0xF0;
     a88:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     a8a:	8f 70       	andi	r24, 0x0F	; 15
     a8c:	90 7f       	andi	r25, 0xF0	; 240
     a8e:	89 2b       	or	r24, r25
     a90:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     a92:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     a94:	8c 7f       	andi	r24, 0xFC	; 252
     a96:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <__data_end>
     a9a:	89 2b       	or	r24, r25
     a9c:	8b b9       	out	0x0b, r24	; 11
     a9e:	08 95       	ret

00000aa0 <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     aa0:	0e 94 af 09 	call	0x135e	; 0x135e <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	8e e0       	ldi	r24, 0x0E	; 14
     aa8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	8f e0       	ldi	r24, 0x0F	; 15
     ab0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	80 e1       	ldi	r24, 0x10	; 16
     ab8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	86 e0       	ldi	r24, 0x06	; 6
     ad8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
     ae4:	08 95       	ret

00000ae6 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	e4 2e       	mov	r14, r20
     af4:	f5 2e       	mov	r15, r21
     af6:	d6 2f       	mov	r29, r22
     af8:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     afa:	00 93 2e 03 	sts	0x032E, r16	; 0x80032e <_SAMPLING_FREQUENCY>
     afe:	10 93 2f 03 	sts	0x032F, r17	; 0x80032f <_SAMPLING_FREQUENCY+0x1>
     b02:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <_SAMPLING_FREQUENCY+0x2>
     b06:	30 93 31 03 	sts	0x0331, r19	; 0x800331 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	41 e5       	ldi	r20, 0x51	; 81
     b10:	53 e4       	ldi	r21, 0x43	; 67
     b12:	6e 2d       	mov	r22, r14
     b14:	7f 2d       	mov	r23, r15
     b16:	8d 2f       	mov	r24, r29
     b18:	9c 2f       	mov	r25, r28
     b1a:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__gesf2>
     b1e:	18 16       	cp	r1, r24
     b20:	6c f0       	brlt	.+26     	; 0xb3c <_ZN8GoertzelC1Eff+0x56>
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 ec       	ldi	r20, 0xC8	; 200
     b28:	52 e4       	ldi	r21, 0x42	; 66
     b2a:	6e 2d       	mov	r22, r14
     b2c:	7f 2d       	mov	r23, r15
     b2e:	8d 2f       	mov	r24, r29
     b30:	9c 2f       	mov	r25, r28
     b32:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <__cmpsf2>
     b36:	88 23       	and	r24, r24
     b38:	34 f0       	brlt	.+12     	; 0xb46 <_ZN8GoertzelC1Eff+0x60>
     b3a:	09 c0       	rjmp	.+18     	; 0xb4e <_ZN8GoertzelC1Eff+0x68>
     b3c:	e1 2c       	mov	r14, r1
     b3e:	f1 2c       	mov	r15, r1
     b40:	d1 e5       	ldi	r29, 0x51	; 81
     b42:	c3 e4       	ldi	r28, 0x43	; 67
     b44:	04 c0       	rjmp	.+8      	; 0xb4e <_ZN8GoertzelC1Eff+0x68>
     b46:	e1 2c       	mov	r14, r1
     b48:	f1 2c       	mov	r15, r1
     b4a:	d8 ec       	ldi	r29, 0xC8	; 200
     b4c:	c2 e4       	ldi	r28, 0x42	; 66
     b4e:	6e 2d       	mov	r22, r14
     b50:	7f 2d       	mov	r23, r15
     b52:	8d 2f       	mov	r24, r29
     b54:	9c 2f       	mov	r25, r28
     b56:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__fixsfsi>
     b5a:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <_N+0x1>
     b5e:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     b62:	cb 01       	movw	r24, r22
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <malloc>
     b6c:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <testData+0x1>
     b70:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <testData>
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	08 95       	ret

00000b82 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     b82:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <testData>
     b86:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <testData+0x1>
     b8a:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <free>
     b8e:	08 95       	ret

00000b90 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     b90:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <Q2>
     b94:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Q2+0x1>
     b98:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Q2+0x2>
     b9c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <Q2+0x3>
	Q1 = 0;
     ba0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <Q1>
     ba4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <Q1+0x1>
     ba8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <Q1+0x2>
     bac:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <Q1+0x3>
	_samplesReady = false;
     bb0:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_samplesReady>
     bb4:	08 95       	ret

00000bb6 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     bb6:	8f 92       	push	r8
     bb8:	9f 92       	push	r9
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
     bcc:	4a 01       	movw	r8, r20
     bce:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     bd0:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <_N>
     bd4:	70 91 29 03 	lds	r23, 0x0329	; 0x800329 <_N+0x1>
     bd8:	07 2e       	mov	r0, r23
     bda:	00 0c       	add	r0, r0
     bdc:	88 0b       	sbc	r24, r24
     bde:	99 0b       	sbc	r25, r25
     be0:	0e 94 0e 2c 	call	0x581c	; 0x581c <__floatsisf>
     be4:	6b 01       	movw	r12, r22
     be6:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     be8:	80 92 2a 03 	sts	0x032A, r8	; 0x80032a <_TARGET_FREQUENCY>
     bec:	90 92 2b 03 	sts	0x032B, r9	; 0x80032b <_TARGET_FREQUENCY+0x1>
     bf0:	a0 92 2c 03 	sts	0x032C, r10	; 0x80032c <_TARGET_FREQUENCY+0x2>
     bf4:	b0 92 2d 03 	sts	0x032D, r11	; 0x80032d <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     bf8:	a5 01       	movw	r20, r10
     bfa:	94 01       	movw	r18, r8
     bfc:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     c00:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <_SAMPLING_FREQUENCY>
     c04:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <_SAMPLING_FREQUENCY+0x1>
     c08:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <_SAMPLING_FREQUENCY+0x2>
     c0c:	50 91 31 03 	lds	r21, 0x0331	; 0x800331 <_SAMPLING_FREQUENCY+0x3>
     c10:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__divsf3>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	5f e3       	ldi	r21, 0x3F	; 63
     c1c:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <__addsf3>
     c20:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__fixsfsi>
     c24:	07 2e       	mov	r0, r23
     c26:	00 0c       	add	r0, r0
     c28:	88 0b       	sbc	r24, r24
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 0e 2c 	call	0x581c	; 0x581c <__floatsisf>
     c30:	2b ed       	ldi	r18, 0xDB	; 219
     c32:	3f e0       	ldi	r19, 0x0F	; 15
     c34:	49 ec       	ldi	r20, 0xC9	; 201
     c36:	50 e4       	ldi	r21, 0x40	; 64
     c38:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__divsf3>
     c44:	0e 94 5f 2b 	call	0x56be	; 0x56be <cos>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <__addsf3>
     c50:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <g_coeff>
     c54:	70 93 25 03 	sts	0x0325, r23	; 0x800325 <g_coeff+0x1>
     c58:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <g_coeff+0x2>
     c5c:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <g_coeff+0x3>
	ResetGoertzel();
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN8Goertzel13ResetGoertzelEv>
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	8f 90       	pop	r8
     c7a:	08 95       	ret

00000c7c <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     c92:	c0 90 20 03 	lds	r12, 0x0320	; 0x800320 <Q1>
     c96:	d0 90 21 03 	lds	r13, 0x0321	; 0x800321 <Q1+0x1>
     c9a:	e0 90 22 03 	lds	r14, 0x0322	; 0x800322 <Q1+0x2>
     c9e:	f0 90 23 03 	lds	r15, 0x0323	; 0x800323 <Q1+0x3>
     ca2:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <g_coeff>
     ca6:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <g_coeff+0x1>
     caa:	40 91 26 03 	lds	r20, 0x0326	; 0x800326 <g_coeff+0x2>
     cae:	50 91 27 03 	lds	r21, 0x0327	; 0x800327 <g_coeff+0x3>
     cb2:	c7 01       	movw	r24, r14
     cb4:	b6 01       	movw	r22, r12
     cb6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     cba:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <Q2>
     cbe:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <Q2+0x1>
     cc2:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <Q2+0x2>
     cc6:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <Q2+0x3>
     cca:	0e 94 ed 2a 	call	0x55da	; 0x55da <__subsf3>
     cce:	4b 01       	movw	r8, r22
     cd0:	5c 01       	movw	r10, r24
     cd2:	be 01       	movw	r22, r28
     cd4:	72 50       	subi	r23, 0x02	; 2
     cd6:	07 2e       	mov	r0, r23
     cd8:	00 0c       	add	r0, r0
     cda:	88 0b       	sbc	r24, r24
     cdc:	99 0b       	sbc	r25, r25
     cde:	0e 94 0e 2c 	call	0x581c	; 0x581c <__floatsisf>
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	c5 01       	movw	r24, r10
     ce8:	b4 01       	movw	r22, r8
     cea:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <__addsf3>

	Q2 = Q1;
     cee:	c0 92 1c 03 	sts	0x031C, r12	; 0x80031c <Q2>
     cf2:	d0 92 1d 03 	sts	0x031D, r13	; 0x80031d <Q2+0x1>
     cf6:	e0 92 1e 03 	sts	0x031E, r14	; 0x80031e <Q2+0x2>
     cfa:	f0 92 1f 03 	sts	0x031F, r15	; 0x80031f <Q2+0x3>
	Q1 = Q0;
     cfe:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <Q1>
     d02:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <Q1+0x1>
     d06:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <Q1+0x2>
     d0a:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <Q1+0x3>
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	bf 90       	pop	r11
     d1c:	af 90       	pop	r10
     d1e:	9f 90       	pop	r9
     d20:	8f 90       	pop	r8
     d22:	08 95       	ret

00000d24 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     d24:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_samplesReady>
     d28:	81 11       	cpse	r24, r1
     d2a:	27 c0       	rjmp	.+78     	; 0xd7a <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     d2c:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <_index>
     d30:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <_index+0x1>
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <testData>
     d3c:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <testData+0x1>
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	71 83       	std	Z+1, r23	; 0x01
     d46:	60 83       	st	Z, r22
	_index++;
     d48:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_index>
     d4c:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <_index+0x1>
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <_index+0x1>
     d56:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_index>
	if(_index >= _N)
     d5a:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <_N>
     d5e:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <_N+0x1>
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	3c f0       	brlt	.+14     	; 0xd76 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     d68:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_index+0x1>
     d6c:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_index>
		_samplesReady = true;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_samplesReady>
	}

	return(_samplesReady);
     d76:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_samplesReady>
}
     d7a:	08 95       	ret

00000d7c <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     d7c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_samplesReady>
     d80:	08 95       	ret

00000d82 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     d82:	4f 92       	push	r4
     d84:	5f 92       	push	r5
     d86:	6f 92       	push	r6
     d88:	7f 92       	push	r7
     d8a:	8f 92       	push	r8
     d8c:	9f 92       	push	r9
     d8e:	af 92       	push	r10
     d90:	bf 92       	push	r11
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     da4:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_N>
     da8:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_N+0x1>
     dac:	18 16       	cp	r1, r24
     dae:	19 06       	cpc	r1, r25
     db0:	c4 f4       	brge	.+48     	; 0xde2 <_ZN8Goertzel10Magnitude2Ev+0x60>
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     db6:	ce 01       	movw	r24, r28
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <testData>
     dc0:	f0 91 18 03 	lds	r31, 0x0318	; 0x800318 <testData+0x1>
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     dd2:	21 96       	adiw	r28, 0x01	; 1
     dd4:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_N>
     dd8:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_N+0x1>
     ddc:	c8 17       	cp	r28, r24
     dde:	d9 07       	cpc	r29, r25
     de0:	54 f3       	brlt	.-44     	; 0xdb6 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     de2:	80 90 20 03 	lds	r8, 0x0320	; 0x800320 <Q1>
     de6:	90 90 21 03 	lds	r9, 0x0321	; 0x800321 <Q1+0x1>
     dea:	a0 90 22 03 	lds	r10, 0x0322	; 0x800322 <Q1+0x2>
     dee:	b0 90 23 03 	lds	r11, 0x0323	; 0x800323 <Q1+0x3>
     df2:	c0 90 1c 03 	lds	r12, 0x031C	; 0x80031c <Q2>
     df6:	d0 90 1d 03 	lds	r13, 0x031D	; 0x80031d <Q2+0x1>
     dfa:	e0 90 1e 03 	lds	r14, 0x031E	; 0x80031e <Q2+0x2>
     dfe:	f0 90 1f 03 	lds	r15, 0x031F	; 0x80031f <Q2+0x3>
     e02:	a5 01       	movw	r20, r10
     e04:	94 01       	movw	r18, r8
     e06:	c5 01       	movw	r24, r10
     e08:	b4 01       	movw	r22, r8
     e0a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     e0e:	2b 01       	movw	r4, r22
     e10:	3c 01       	movw	r6, r24
     e12:	a7 01       	movw	r20, r14
     e14:	96 01       	movw	r18, r12
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	c3 01       	movw	r24, r6
     e24:	b2 01       	movw	r22, r4
     e26:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <__addsf3>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
     e2e:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <g_coeff>
     e32:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <g_coeff+0x1>
     e36:	40 91 26 03 	lds	r20, 0x0326	; 0x800326 <g_coeff+0x2>
     e3a:	50 91 27 03 	lds	r21, 0x0327	; 0x800327 <g_coeff+0x3>
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     e46:	a7 01       	movw	r20, r14
     e48:	96 01       	movw	r18, r12
     e4a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
     e4e:	9b 01       	movw	r18, r22
     e50:	ac 01       	movw	r20, r24
     e52:	c3 01       	movw	r24, r6
     e54:	b2 01       	movw	r22, r4
     e56:	0e 94 ed 2a 	call	0x55da	; 0x55da <__subsf3>
     e5a:	6b 01       	movw	r12, r22
     e5c:	7c 01       	movw	r14, r24

	ResetGoertzel();
     e5e:	c8 01       	movw	r24, r16
     e60:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	5f 90       	pop	r5
     e86:	4f 90       	pop	r4
     e88:	08 95       	ret

00000e8a <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     e8a:	e4 e6       	ldi	r30, 0x64	; 100
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 77       	andi	r24, 0x7F	; 127
     e92:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     e94:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     e98:	85 e2       	ldi	r24, 0x25	; 37
     e9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     eaa:	08 95       	ret

00000eac <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     eac:	84 ea       	ldi	r24, 0xA4	; 164
     eae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     eb2:	ec eb       	ldi	r30, 0xBC	; 188
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	64 f0       	brlt	.+24     	; 0xed4 <_Z9i2c_startv+0x28>
     ebc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ec0:	81 11       	cpse	r24, r1
     ec2:	f9 cf       	rjmp	.-14     	; 0xeb6 <_Z9i2c_startv+0xa>
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     ec6:	80 e9       	ldi	r24, 0x90	; 144
     ec8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     ed2:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     ed4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ed8:	88 23       	and	r24, r24
     eda:	a9 f3       	breq	.-22     	; 0xec6 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     edc:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     ede:	08 95       	ret

00000ee0 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ee0:	84 e9       	ldi	r24, 0x94	; 148
     ee2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ee6:	08 95       	ret

00000ee8 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     ee8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     eec:	84 e8       	ldi	r24, 0x84	; 132
     eee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     ef2:	ec eb       	ldi	r30, 0xBC	; 188
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	64 f0       	brlt	.+24     	; 0xf14 <_Z17i2c_write_successhh+0x2c>
     efc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f00:	81 11       	cpse	r24, r1
     f02:	f9 cf       	rjmp	.-14     	; 0xef6 <_Z17i2c_write_successhh+0xe>
     f04:	07 c0       	rjmp	.+14     	; 0xf14 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f06:	84 e9       	ldi	r24, 0x94	; 148
     f08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     f12:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     f14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     f18:	88 7f       	andi	r24, 0xF8	; 248
     f1a:	86 13       	cpse	r24, r22
     f1c:	f4 cf       	rjmp	.-24     	; 0xf06 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     f20:	08 95       	ret

00000f22 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     f22:	84 ec       	ldi	r24, 0xC4	; 196
     f24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f28:	ec eb       	ldi	r30, 0xBC	; 188
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	88 23       	and	r24, r24
     f30:	24 f0       	brlt	.+8      	; 0xf3a <_Z12i2c_read_ackv+0x18>
     f32:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f36:	81 11       	cpse	r24, r1
     f38:	f9 cf       	rjmp	.-14     	; 0xf2c <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     f3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f3e:	08 95       	ret

00000f40 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     f40:	84 e8       	ldi	r24, 0x84	; 132
     f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f46:	ec eb       	ldi	r30, 0xBC	; 188
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	24 f0       	brlt	.+8      	; 0xf58 <_Z13i2c_read_nackv+0x18>
     f50:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f54:	81 11       	cpse	r24, r1
     f56:	f9 cf       	rjmp	.-14     	; 0xf4a <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     f58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f5c:	08 95       	ret

00000f5e <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     f5e:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f62:	28 7f       	andi	r18, 0xF8	; 248
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	29 f0       	breq	.+10     	; 0xf78 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f6e:	84 e9       	ldi	r24, 0x94	; 148
     f70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	08 95       	ret
	}

	return(FALSE);
     f78:	80 e0       	ldi	r24, 0x00	; 0
}
     f7a:	08 95       	ret

00000f7c <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	00 d0       	rcall	.+0      	; 0xf82 <_Z16i2c_device_writehhPhh+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <_Z16i2c_device_writehhPhh+0x8>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <_Z16i2c_device_writehhPhh+0xa>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	6b 83       	std	Y+3, r22	; 0x03
     f8e:	5d 83       	std	Y+5, r21	; 0x05
     f90:	4c 83       	std	Y+4, r20	; 0x04
     f92:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f94:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f96:	0e 94 56 07 	call	0xeac	; 0xeac <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f9a:	88 e0       	ldi	r24, 0x08	; 8
     f9c:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
     fa0:	98 2f       	mov	r25, r24
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	99 23       	and	r25, r25
     fa6:	09 f4       	brne	.+2      	; 0xfaa <_Z16i2c_device_writehhPhh+0x2e>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	11 f0       	breq	.+4      	; 0xfb2 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     fb2:	68 e1       	ldi	r22, 0x18	; 24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
     fba:	98 2f       	mov	r25, r24
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	99 23       	and	r25, r25
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_Z16i2c_device_writehhPhh+0x48>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	88 23       	and	r24, r24
     fc6:	11 f0       	breq	.+4      	; 0xfcc <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	32 c0       	rjmp	.+100    	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fcc:	68 e2       	ldi	r22, 0x28	; 40
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
     fd4:	98 2f       	mov	r25, r24
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	99 23       	and	r25, r25
     fda:	09 f4       	brne	.+2      	; 0xfde <_Z16i2c_device_writehhPhh+0x62>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	88 23       	and	r24, r24
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	25 c0       	rjmp	.+74     	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f ef       	ldi	r25, 0xFF	; 255
     fea:	98 0f       	add	r25, r24
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <_Z16i2c_device_writehhPhh+0x7a>
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	99 23       	and	r25, r25
     ff8:	c1 f0       	breq	.+48     	; 0x102a <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	98 0f       	add	r25, r24
    1000:	99 83       	std	Y+1, r25	; 0x01
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	fc 01       	movw	r30, r24
    1010:	80 81       	ld	r24, Z
    1012:	68 e2       	ldi	r22, 0x28	; 40
    1014:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    1018:	98 2f       	mov	r25, r24
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	99 23       	and	r25, r25
    101e:	09 f4       	brne	.+2      	; 0x1022 <_Z16i2c_device_writehhPhh+0xa6>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	88 23       	and	r24, r24
    1024:	01 f3       	breq	.-64     	; 0xfe6 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
    102a:	0e 94 70 07 	call	0xee0	; 0xee0 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    102e:	80 e0       	ldi	r24, 0x00	; 0
}
    1030:	26 96       	adiw	r28, 0x06	; 6
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	00 d0       	rcall	.+0      	; 0x104c <_Z15i2c_device_readhhPhh+0xa>
    104c:	00 d0       	rcall	.+0      	; 0x104e <_Z15i2c_device_readhhPhh+0xc>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <_Z15i2c_device_readhhPhh+0xe>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	6b 83       	std	Y+3, r22	; 0x03
    1058:	5d 83       	std	Y+5, r21	; 0x05
    105a:	4c 83       	std	Y+4, r20	; 0x04
    105c:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    105e:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    1060:	0e 94 56 07 	call	0xeac	; 0xeac <_Z9i2c_startv>
		if(i2c_status(TW_START))
    1064:	88 e0       	ldi	r24, 0x08	; 8
    1066:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    106a:	98 2f       	mov	r25, r24
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	99 23       	and	r25, r25
    1070:	09 f4       	brne	.+2      	; 0x1074 <_Z15i2c_device_readhhPhh+0x32>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	88 23       	and	r24, r24
    1076:	11 f0       	breq	.+4      	; 0x107c <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	79 c0       	rjmp	.+242    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    107c:	68 e1       	ldi	r22, 0x18	; 24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    1084:	98 2f       	mov	r25, r24
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	99 23       	and	r25, r25
    108a:	09 f4       	brne	.+2      	; 0x108e <_Z15i2c_device_readhhPhh+0x4c>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	88 23       	and	r24, r24
    1090:	11 f0       	breq	.+4      	; 0x1096 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	6c c0       	rjmp	.+216    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1096:	68 e2       	ldi	r22, 0x28	; 40
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    109e:	98 2f       	mov	r25, r24
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	99 23       	and	r25, r25
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <_Z15i2c_device_readhhPhh+0x66>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	88 23       	and	r24, r24
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
    10b0:	0e 94 56 07 	call	0xeac	; 0xeac <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
    10b4:	80 e1       	ldi	r24, 0x10	; 16
    10b6:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    10ba:	98 2f       	mov	r25, r24
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	99 23       	and	r25, r25
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <_Z15i2c_device_readhhPhh+0x82>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	88 23       	and	r24, r24
    10c6:	11 f0       	breq	.+4      	; 0x10cc <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	51 c0       	rjmp	.+162    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	60 e4       	ldi	r22, 0x40	; 64
    10d2:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z17i2c_write_successhh>
    10d6:	98 2f       	mov	r25, r24
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	99 23       	and	r25, r25
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <_Z15i2c_device_readhhPhh+0x9e>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	88 23       	and	r24, r24
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	43 c0       	rjmp	.+134    	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	98 0f       	add	r25, r24
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <_Z15i2c_device_readhhPhh+0xb6>
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	99 23       	and	r25, r25
    10fa:	b1 f1       	breq	.+108    	; 0x1168 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	88 23       	and	r24, r24
    1100:	d9 f0       	breq	.+54     	; 0x1138 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	98 0f       	add	r25, r24
    1108:	99 83       	std	Y+1, r25	; 0x01
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	89 01       	movw	r16, r18
    1114:	08 0f       	add	r16, r24
    1116:	19 1f       	adc	r17, r25
    1118:	0e 94 91 07 	call	0xf22	; 0xf22 <_Z12i2c_read_ackv>
    111c:	f8 01       	movw	r30, r16
    111e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    1120:	80 e5       	ldi	r24, 0x50	; 80
    1122:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    1126:	98 2f       	mov	r25, r24
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	99 23       	and	r25, r25
    112c:	09 f4       	brne	.+2      	; 0x1130 <_Z15i2c_device_readhhPhh+0xee>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	88 23       	and	r24, r24
    1132:	d1 f2       	breq	.-76     	; 0x10e8 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	1b c0       	rjmp	.+54     	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	89 01       	movw	r16, r18
    1144:	08 0f       	add	r16, r24
    1146:	19 1f       	adc	r17, r25
    1148:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z13i2c_read_nackv>
    114c:	f8 01       	movw	r30, r16
    114e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    1150:	88 e5       	ldi	r24, 0x58	; 88
    1152:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z10i2c_statush>
    1156:	98 2f       	mov	r25, r24
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	99 23       	and	r25, r25
    115c:	09 f4       	brne	.+2      	; 0x1160 <_Z15i2c_device_readhhPhh+0x11e>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	88 23       	and	r24, r24
    1162:	11 f2       	breq	.-124    	; 0x10e8 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    1168:	0e 94 70 07 	call	0xee0	; 0xee0 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    116c:	80 e0       	ldi	r24, 0x00	; 0
}
    116e:	26 96       	adiw	r28, 0x06	; 6
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1184:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1188:	93 e0       	ldi	r25, 0x03	; 3
    118a:	59 e2       	ldi	r21, 0x29	; 41
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	52 9f       	mul	r21, r18
    1192:	f0 01       	movw	r30, r0
    1194:	53 9f       	mul	r21, r19
    1196:	f0 0d       	add	r31, r0
    1198:	11 24       	eor	r1, r1
    119a:	ec 54       	subi	r30, 0x4C	; 76
    119c:	fc 4f       	sbci	r31, 0xFC	; 252
    119e:	40 81       	ld	r20, Z
    11a0:	41 11       	cpse	r20, r1
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <_Z16nextFullTxBufferv+0x38>
    11a4:	91 50       	subi	r25, 0x01	; 1
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <_Z16nextFullTxBufferv+0x2e>
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	78 f3       	brcs	.-34     	; 0x118c <_Z16nextFullTxBufferv+0x8>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	ed cf       	rjmp	.-38     	; 0x118c <_Z16nextFullTxBufferv+0x8>
    11b2:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZZ16nextFullTxBuffervE11bufferIndex>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	08 95       	ret
    11bc:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZZ16nextFullTxBuffervE11bufferIndex>
    11c0:	49 e2       	ldi	r20, 0x29	; 41
    11c2:	42 9f       	mul	r20, r18
    11c4:	c0 01       	movw	r24, r0
    11c6:	43 9f       	mul	r20, r19
    11c8:	90 0d       	add	r25, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	8c 54       	subi	r24, 0x4C	; 76
    11ce:	9c 4f       	sbci	r25, 0xFC	; 252
    11d0:	08 95       	ret

000011d2 <_Z17nextEmptyTxBufferv>:
    11d2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11d6:	93 e0       	ldi	r25, 0x03	; 3
    11d8:	59 e2       	ldi	r21, 0x29	; 41
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	52 9f       	mul	r21, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	53 9f       	mul	r21, r19
    11e4:	f0 0d       	add	r31, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	ec 54       	subi	r30, 0x4C	; 76
    11ea:	fc 4f       	sbci	r31, 0xFC	; 252
    11ec:	40 81       	ld	r20, Z
    11ee:	44 23       	and	r20, r20
    11f0:	61 f0       	breq	.+24     	; 0x120a <_Z17nextEmptyTxBufferv+0x38>
    11f2:	91 50       	subi	r25, 0x01	; 1
    11f4:	29 f0       	breq	.+10     	; 0x1200 <_Z17nextEmptyTxBufferv+0x2e>
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	78 f3       	brcs	.-34     	; 0x11da <_Z17nextEmptyTxBufferv+0x8>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	ed cf       	rjmp	.-38     	; 0x11da <_Z17nextEmptyTxBufferv+0x8>
    1200:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 95       	ret
    120a:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    120e:	49 e2       	ldi	r20, 0x29	; 41
    1210:	42 9f       	mul	r20, r18
    1212:	c0 01       	movw	r24, r0
    1214:	43 9f       	mul	r20, r19
    1216:	90 0d       	add	r25, r0
    1218:	11 24       	eor	r1, r1
    121a:	8c 54       	subi	r24, 0x4C	; 76
    121c:	9c 4f       	sbci	r25, 0xFC	; 252
    121e:	08 95       	ret

00001220 <_Z17nextEmptyRxBufferv>:
    1220:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	9f e3       	ldi	r25, 0x3F	; 63
    122a:	89 9f       	mul	r24, r25
    122c:	f0 01       	movw	r30, r0
    122e:	11 24       	eor	r1, r1
    1230:	ea 5c       	subi	r30, 0xCA	; 202
    1232:	fc 4f       	sbci	r31, 0xFC	; 252
    1234:	41 81       	ldd	r20, Z+1	; 0x01
    1236:	52 81       	ldd	r21, Z+2	; 0x02
    1238:	45 2b       	or	r20, r21
    123a:	a9 f0       	breq	.+42     	; 0x1266 <_Z17nextEmptyRxBufferv+0x46>
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	08 f0       	brcs	.+2      	; 0x1244 <_Z17nextEmptyRxBufferv+0x24>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	9f e3       	ldi	r25, 0x3F	; 63
    124a:	89 9f       	mul	r24, r25
    124c:	f0 01       	movw	r30, r0
    124e:	11 24       	eor	r1, r1
    1250:	ea 5c       	subi	r30, 0xCA	; 202
    1252:	fc 4f       	sbci	r31, 0xFC	; 252
    1254:	41 81       	ldd	r20, Z+1	; 0x01
    1256:	52 81       	ldd	r21, Z+2	; 0x02
    1258:	45 2b       	or	r20, r21
    125a:	29 f0       	breq	.+10     	; 0x1266 <_Z17nextEmptyRxBufferv+0x46>
    125c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret
    1266:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    126a:	4f e3       	ldi	r20, 0x3F	; 63
    126c:	42 9f       	mul	r20, r18
    126e:	c0 01       	movw	r24, r0
    1270:	43 9f       	mul	r20, r19
    1272:	90 0d       	add	r25, r0
    1274:	11 24       	eor	r1, r1
    1276:	8a 5c       	subi	r24, 0xCA	; 202
    1278:	9c 4f       	sbci	r25, 0xFC	; 252
    127a:	08 95       	ret

0000127c <_Z16nextFullRxBufferv>:
    127c:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	9f e3       	ldi	r25, 0x3F	; 63
    1286:	89 9f       	mul	r24, r25
    1288:	f0 01       	movw	r30, r0
    128a:	11 24       	eor	r1, r1
    128c:	ea 5c       	subi	r30, 0xCA	; 202
    128e:	fc 4f       	sbci	r31, 0xFC	; 252
    1290:	41 81       	ldd	r20, Z+1	; 0x01
    1292:	52 81       	ldd	r21, Z+2	; 0x02
    1294:	45 2b       	or	r20, r21
    1296:	a9 f4       	brne	.+42     	; 0x12c2 <_Z16nextFullRxBufferv+0x46>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <_Z16nextFullRxBufferv+0x24>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	9f e3       	ldi	r25, 0x3F	; 63
    12a6:	89 9f       	mul	r24, r25
    12a8:	f0 01       	movw	r30, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	ea 5c       	subi	r30, 0xCA	; 202
    12ae:	fc 4f       	sbci	r31, 0xFC	; 252
    12b0:	41 81       	ldd	r20, Z+1	; 0x01
    12b2:	52 81       	ldd	r21, Z+2	; 0x02
    12b4:	45 2b       	or	r20, r21
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <_Z16nextFullRxBufferv+0x46>
    12b8:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ16nextFullRxBuffervE11bufferIndex>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 95       	ret
    12c2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ16nextFullRxBuffervE11bufferIndex>
    12c6:	4f e3       	ldi	r20, 0x3F	; 63
    12c8:	42 9f       	mul	r20, r18
    12ca:	c0 01       	movw	r24, r0
    12cc:	43 9f       	mul	r20, r19
    12ce:	90 0d       	add	r25, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	8a 5c       	subi	r24, 0xCA	; 202
    12d4:	9c 4f       	sbci	r25, 0xFC	; 252
    12d6:	08 95       	ret

000012d8 <_Z19linkbusTxInProgressv>:
    12d8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZL17linkbus_tx_active>
    12dc:	08 95       	ret

000012de <_Z16linkbus_start_txv>:
    12de:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <_ZL17linkbus_tx_active>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	91 11       	cpse	r25, r1
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	91 11       	cpse	r25, r1
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <_Z16linkbus_start_txv+0x1e>
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <_ZL17linkbus_tx_active>
    12f2:	e1 ec       	ldi	r30, 0xC1	; 193
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	90 81       	ld	r25, Z
    12f8:	90 62       	ori	r25, 0x20	; 32
    12fa:	90 83       	st	Z, r25
    12fc:	08 95       	ret

000012fe <_Z14linkbus_end_txv>:
    12fe:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZL17linkbus_tx_active>
    1302:	88 23       	and	r24, r24
    1304:	39 f0       	breq	.+14     	; 0x1314 <_Z14linkbus_end_txv+0x16>
    1306:	e1 ec       	ldi	r30, 0xC1	; 193
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8f 7d       	andi	r24, 0xDF	; 223
    130e:	80 83       	st	Z, r24
    1310:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZL17linkbus_tx_active>
    1314:	08 95       	ret

00001316 <_Z12linkbus_initm>:
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	8e e7       	ldi	r24, 0x7E	; 126
    131c:	e6 e3       	ldi	r30, 0x36	; 54
    131e:	f3 e0       	ldi	r31, 0x03	; 3
    1320:	df 01       	movw	r26, r30
    1322:	1d 92       	st	X+, r1
    1324:	8a 95       	dec	r24
    1326:	e9 f7       	brne	.-6      	; 0x1322 <_Z12linkbus_initm+0xc>
    1328:	e4 eb       	ldi	r30, 0xB4	; 180
    132a:	f3 e0       	ldi	r31, 0x03	; 3
    132c:	10 82       	st	Z, r1
    132e:	11 a6       	std	Z+41, r1	; 0x29
    1330:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZL9tx_buffer+0x52>
    1334:	60 e4       	ldi	r22, 0x40	; 64
    1336:	72 e4       	ldi	r23, 0x42	; 66
    1338:	8f e0       	ldi	r24, 0x0F	; 15
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__udivmodsi4>
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	31 09       	sbc	r19, r1
    1344:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1348:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    134c:	88 e9       	ldi	r24, 0x98	; 152
    134e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1352:	8e e0       	ldi	r24, 0x0E	; 14
    1354:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1358:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    135c:	08 95       	ret

0000135e <_Z15linkbus_disablev>:
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    1364:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1368:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_Z14linkbus_end_txv>
    136c:	8e e7       	ldi	r24, 0x7E	; 126
    136e:	e6 e3       	ldi	r30, 0x36	; 54
    1370:	f3 e0       	ldi	r31, 0x03	; 3
    1372:	df 01       	movw	r26, r30
    1374:	1d 92       	st	X+, r1
    1376:	8a 95       	dec	r24
    1378:	e9 f7       	brne	.-6      	; 0x1374 <_Z15linkbus_disablev+0x16>
    137a:	e4 eb       	ldi	r30, 0xB4	; 180
    137c:	f3 e0       	ldi	r31, 0x03	; 3
    137e:	10 82       	st	Z, r1
    1380:	11 a6       	std	Z+41, r1	; 0x29
    1382:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZL9tx_buffer+0x52>
    1386:	08 95       	ret

00001388 <_Z17linkbus_send_textPc>:
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1394:	21 11       	cpse	r18, r1
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <_Z17linkbus_send_textPc+0x38>
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <_Z17linkbus_send_textPc+0x3c>
    139c:	8c 01       	movw	r16, r24
    139e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z17nextEmptyTxBufferv>
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	b9 f4       	brne	.+46     	; 0x13d4 <_Z17linkbus_send_textPc+0x4c>
    13a6:	c8 ec       	ldi	r28, 0xC8	; 200
    13a8:	d0 e0       	ldi	r29, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <_Z17linkbus_send_textPc+0x28>
    13ac:	20 97       	sbiw	r28, 0x00	; 0
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <_Z17linkbus_send_textPc+0x40>
    13b0:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <_ZL17linkbus_tx_active>
    13b4:	99 23       	and	r25, r25
    13b6:	51 f0       	breq	.+20     	; 0x13cc <_Z17linkbus_send_textPc+0x44>
    13b8:	20 97       	sbiw	r28, 0x00	; 0
    13ba:	d1 f0       	breq	.+52     	; 0x13f0 <_Z17linkbus_send_textPc+0x68>
    13bc:	21 97       	sbiw	r28, 0x01	; 1
    13be:	f8 cf       	rjmp	.-16     	; 0x13b0 <_Z17linkbus_send_textPc+0x28>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	17 c0       	rjmp	.+46     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13cc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z17nextEmptyTxBufferv>
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f3       	breq	.-40     	; 0x13ac <_Z17linkbus_send_textPc+0x24>
    13d4:	1f 93       	push	r17
    13d6:	0f 93       	push	r16
    13d8:	9f 93       	push	r25
    13da:	8f 93       	push	r24
    13dc:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    13e0:	0e 94 6f 09 	call	0x12de	; 0x12de <_Z16linkbus_start_txv>
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	05 c0       	rjmp	.+10     	; 0x13fa <_Z17linkbus_send_textPc+0x72>
    13f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z17nextEmptyTxBufferv>
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	71 f7       	brne	.-36     	; 0x13d4 <_Z17linkbus_send_textPc+0x4c>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <_Z17lb_send_NewPromptv>:
    1404:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1408:	81 11       	cpse	r24, r1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <_Z17lb_send_NewPromptv+0x14>
    140c:	82 e2       	ldi	r24, 0x22	; 34
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    1414:	81 11       	cpse	r24, r1
    1416:	fa cf       	rjmp	.-12     	; 0x140c <_Z17lb_send_NewPromptv+0x8>
    1418:	08 95       	ret

0000141a <_Z15lb_send_NewLinev>:
    141a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    141e:	81 11       	cpse	r24, r1
    1420:	04 c0       	rjmp	.+8      	; 0x142a <_Z15lb_send_NewLinev+0x10>
    1422:	85 e2       	ldi	r24, 0x25	; 37
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    142a:	08 95       	ret

0000142c <_Z12lb_echo_charh>:
    142c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1430:	91 11       	cpse	r25, r1
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <_Z12lb_echo_charh+0x16>
    1434:	e0 e3       	ldi	r30, 0x30	; 48
    1436:	f4 e0       	ldi	r31, 0x04	; 4
    1438:	80 83       	st	Z, r24
    143a:	11 82       	std	Z+1, r1	; 0x01
    143c:	cf 01       	movw	r24, r30
    143e:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    1442:	08 95       	ret

00001444 <_Z14lb_send_stringPch>:
    1444:	cf 93       	push	r28
    1446:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    144a:	21 11       	cpse	r18, r1
    144c:	28 c0       	rjmp	.+80     	; 0x149e <_Z14lb_send_stringPch+0x5a>
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	41 f1       	breq	.+80     	; 0x14a2 <_Z14lb_send_stringPch+0x5e>
    1452:	fc 01       	movw	r30, r24
    1454:	20 81       	ld	r18, Z
    1456:	22 23       	and	r18, r18
    1458:	31 f1       	breq	.+76     	; 0x14a6 <_Z14lb_send_stringPch+0x62>
    145a:	01 90       	ld	r0, Z+
    145c:	00 20       	and	r0, r0
    145e:	e9 f7       	brne	.-6      	; 0x145a <_Z14lb_send_stringPch+0x16>
    1460:	31 97       	sbiw	r30, 0x01	; 1
    1462:	e8 1b       	sub	r30, r24
    1464:	f9 0b       	sbc	r31, r25
    1466:	ba 97       	sbiw	r30, 0x2a	; 42
    1468:	00 f5       	brcc	.+64     	; 0x14aa <_Z14lb_send_stringPch+0x66>
    146a:	c6 2f       	mov	r28, r22
    146c:	bc 01       	movw	r22, r24
    146e:	49 e2       	ldi	r20, 0x29	; 41
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	80 e3       	ldi	r24, 0x30	; 48
    1474:	94 e0       	ldi	r25, 0x04	; 4
    1476:	0e 94 1f 30 	call	0x603e	; 0x603e <strncpy>
    147a:	cc 23       	and	r28, r28
    147c:	59 f0       	breq	.+22     	; 0x1494 <_Z14lb_send_stringPch+0x50>
    147e:	80 e3       	ldi	r24, 0x30	; 48
    1480:	94 e0       	ldi	r25, 0x04	; 4
    1482:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    1486:	81 11       	cpse	r24, r1
    1488:	fa cf       	rjmp	.-12     	; 0x147e <_Z14lb_send_stringPch+0x3a>
    148a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZL17linkbus_tx_active>
    148e:	81 11       	cpse	r24, r1
    1490:	fc cf       	rjmp	.-8      	; 0x148a <_Z14lb_send_stringPch+0x46>
    1492:	0c c0       	rjmp	.+24     	; 0x14ac <_Z14lb_send_stringPch+0x68>
    1494:	80 e3       	ldi	r24, 0x30	; 48
    1496:	94 e0       	ldi	r25, 0x04	; 4
    1498:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z17linkbus_send_textPc>
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <_Z14lb_send_stringPch+0x68>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <_Z14lb_send_stringPch+0x68>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <_Z14lb_send_stringPch+0x68>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_Z14lb_send_stringPch+0x68>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    14b0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	91 11       	cpse	r25, r1
    14b8:	80 e0       	ldi	r24, 0x00	; 0
}
    14ba:	08 95       	ret

000014bc <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	8b e0       	ldi	r24, 0x0B	; 11
    14e2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    14e6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	0e 94 92 06 	call	0xd24	; 0xd24 <_ZN8Goertzel9DataPointEi>
    14f4:	88 23       	and	r24, r24
    14f6:	29 f0       	breq	.+10     	; 0x1502 <__vector_21+0x46>
    14f8:	ea e7       	ldi	r30, 0x7A	; 122
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	80 83       	st	Z, r24
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	8b e0       	ldi	r24, 0x0B	; 11
    1506:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_18>:
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	1f 93       	push	r17
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	5f 93       	push	r21
    1540:	6f 93       	push	r22
    1542:	7f 93       	push	r23
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
    1548:	af 93       	push	r26
    154a:	bf 93       	push	r27
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
    1554:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1558:	c0 91 d6 04 	lds	r28, 0x04D6	; 0x8004d6 <_ZZ11__vector_18E4buff>
    155c:	d0 91 d7 04 	lds	r29, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E4buff+0x1>
    1560:	20 97       	sbiw	r28, 0x00	; 0
    1562:	51 f4       	brne	.+20     	; 0x1578 <__vector_18+0x4c>
    1564:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z17nextEmptyRxBufferv>
    1568:	ec 01       	movw	r28, r24
    156a:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <_ZZ11__vector_18E4buff+0x1>
    156e:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZZ11__vector_18E4buff>
    1572:	89 2b       	or	r24, r25
    1574:	09 f4       	brne	.+2      	; 0x1578 <__vector_18+0x4c>
    1576:	62 c1       	rjmp	.+708    	; 0x183c <__vector_18+0x310>
    1578:	81 2f       	mov	r24, r17
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 05 30 	call	0x600a	; 0x600a <toupper>
    1580:	9c 01       	movw	r18, r24
    1582:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <_ZZ11__vector_18E11ignoreCount>
    1586:	88 23       	and	r24, r24
    1588:	21 f0       	breq	.+8      	; 0x1592 <__vector_18+0x66>
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZZ11__vector_18E11ignoreCount>
    1590:	55 c1       	rjmp	.+682    	; 0x183c <__vector_18+0x310>
    1592:	2b 31       	cpi	r18, 0x1B	; 27
    1594:	21 f4       	brne	.+8      	; 0x159e <__vector_18+0x72>
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZZ11__vector_18E11ignoreCount>
    159c:	4f c1       	rjmp	.+670    	; 0x183c <__vector_18+0x310>
    159e:	2d 30       	cpi	r18, 0x0D	; 13
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <__vector_18+0x78>
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <__vector_18+0xf6>
    15a4:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E13receiving_msg>
    15a8:	88 23       	and	r24, r24
    15aa:	31 f1       	breq	.+76     	; 0x15f8 <__vector_18+0xcc>
    15ac:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    15b0:	ee 23       	and	r30, r30
    15b2:	f9 f0       	breq	.+62     	; 0x15f2 <__vector_18+0xc6>
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	88 83       	st	Y, r24
    15b8:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    15bc:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_18E11field_index>
    15c8:	88 23       	and	r24, r24
    15ca:	79 f0       	breq	.+30     	; 0x15ea <__vector_18+0xbe>
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	40 91 90 04 	lds	r20, 0x0490	; 0x800490 <_ZZ11__vector_18E9field_len>
    15d4:	54 e1       	ldi	r21, 0x14	; 20
    15d6:	58 9f       	mul	r21, r24
    15d8:	90 01       	movw	r18, r0
    15da:	59 9f       	mul	r21, r25
    15dc:	30 0d       	add	r19, r0
    15de:	11 24       	eor	r1, r1
    15e0:	c2 0f       	add	r28, r18
    15e2:	d3 1f       	adc	r29, r19
    15e4:	c4 0f       	add	r28, r20
    15e6:	d1 1d       	adc	r29, r1
    15e8:	1b 82       	std	Y+3, r1	; 0x03
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	eb 56       	subi	r30, 0x6B	; 107
    15ee:	fb 4f       	sbci	r31, 0xFB	; 251
    15f0:	10 82       	st	Z, r1
    15f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__vector_18+0xd4>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f e7       	ldi	r25, 0x7F	; 127
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    1604:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZZ11__vector_18E9field_len>
    1608:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    160c:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    1610:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <_ZZ11__vector_18E11field_index>
    1614:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZZ11__vector_18E4buff+0x1>
    1618:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZZ11__vector_18E4buff>
    161c:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E13receiving_msg>
    1620:	0d c1       	rjmp	.+538    	; 0x183c <__vector_18+0x310>
    1622:	22 23       	and	r18, r18
    1624:	09 f4       	brne	.+2      	; 0x1628 <__vector_18+0xfc>
    1626:	0a c1       	rjmp	.+532    	; 0x183c <__vector_18+0x310>
    1628:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    162c:	4e 2f       	mov	r20, r30
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	da 01       	movw	r26, r20
    1632:	ab 56       	subi	r26, 0x6B	; 107
    1634:	bb 4f       	sbci	r27, 0xFB	; 251
    1636:	2c 93       	st	X, r18
    1638:	ee 23       	and	r30, r30
    163a:	09 f4       	brne	.+2      	; 0x163e <__vector_18+0x112>
    163c:	d6 c0       	rjmp	.+428    	; 0x17ea <__vector_18+0x2be>
    163e:	2f 37       	cpi	r18, 0x7F	; 127
    1640:	09 f0       	breq	.+2      	; 0x1644 <__vector_18+0x118>
    1642:	5f c0       	rjmp	.+190    	; 0x1702 <__vector_18+0x1d6>
    1644:	e1 50       	subi	r30, 0x01	; 1
    1646:	e0 93 d4 04 	sts	0x04D4, r30	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    164a:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_18E11field_index>
    164e:	81 11       	cpse	r24, r1
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <__vector_18+0x14c>
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	eb 56       	subi	r30, 0x6B	; 107
    1656:	fb 4f       	sbci	r31, 0xFB	; 251
    1658:	40 81       	ld	r20, Z
    165a:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    165e:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    1662:	84 1b       	sub	r24, r20
    1664:	91 09       	sbc	r25, r1
    1666:	6a e0       	ldi	r22, 0x0A	; 10
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    166e:	70 93 93 04 	sts	0x0493, r23	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    1672:	60 93 92 04 	sts	0x0492, r22	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    1676:	39 c0       	rjmp	.+114    	; 0x16ea <__vector_18+0x1be>
    1678:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <_ZZ11__vector_18E9field_len>
    167c:	99 23       	and	r25, r25
    167e:	91 f0       	breq	.+36     	; 0x16a4 <__vector_18+0x178>
    1680:	4f ef       	ldi	r20, 0xFF	; 255
    1682:	49 0f       	add	r20, r25
    1684:	40 93 90 04 	sts	0x0490, r20	; 0x800490 <_ZZ11__vector_18E9field_len>
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	54 e1       	ldi	r21, 0x14	; 20
    168e:	58 9f       	mul	r21, r24
    1690:	b0 01       	movw	r22, r0
    1692:	59 9f       	mul	r21, r25
    1694:	70 0d       	add	r23, r0
    1696:	11 24       	eor	r1, r1
    1698:	c6 0f       	add	r28, r22
    169a:	d7 1f       	adc	r29, r23
    169c:	c4 0f       	add	r28, r20
    169e:	d1 1d       	adc	r29, r1
    16a0:	1b 82       	std	Y+3, r1	; 0x03
    16a2:	23 c0       	rjmp	.+70     	; 0x16ea <__vector_18+0x1be>
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	eb 56       	subi	r30, 0x6B	; 107
    16a8:	fb 4f       	sbci	r31, 0xFB	; 251
    16aa:	90 81       	ld	r25, Z
    16ac:	90 32       	cpi	r25, 0x20	; 32
    16ae:	a1 f4       	brne	.+40     	; 0x16d8 <__vector_18+0x1ac>
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_18E11field_index>
    16b6:	de 01       	movw	r26, r28
    16b8:	94 e1       	ldi	r25, 0x14	; 20
    16ba:	89 9f       	mul	r24, r25
    16bc:	a0 0d       	add	r26, r0
    16be:	b1 1d       	adc	r27, r1
    16c0:	11 24       	eor	r1, r1
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	fd 01       	movw	r30, r26
    16c6:	01 90       	ld	r0, Z+
    16c8:	00 20       	and	r0, r0
    16ca:	e9 f7       	brne	.-6      	; 0x16c6 <__vector_18+0x19a>
    16cc:	31 97       	sbiw	r30, 0x01	; 1
    16ce:	ea 1b       	sub	r30, r26
    16d0:	fb 0b       	sbc	r31, r27
    16d2:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <_ZZ11__vector_18E9field_len>
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <__vector_18+0x1be>
    16d8:	94 e1       	ldi	r25, 0x14	; 20
    16da:	89 9f       	mul	r24, r25
    16dc:	c0 0d       	add	r28, r0
    16de:	d1 1d       	adc	r29, r1
    16e0:	11 24       	eor	r1, r1
    16e2:	1b 82       	std	Y+3, r1	; 0x03
    16e4:	81 50       	subi	r24, 0x01	; 1
    16e6:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_18E11field_index>
    16ea:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    16ee:	e8 2f       	mov	r30, r24
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	eb 56       	subi	r30, 0x6B	; 107
    16f4:	fb 4f       	sbci	r31, 0xFB	; 251
    16f6:	10 82       	st	Z, r1
    16f8:	81 11       	cpse	r24, r1
    16fa:	93 c0       	rjmp	.+294    	; 0x1822 <__vector_18+0x2f6>
    16fc:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E13receiving_msg>
    1700:	90 c0       	rjmp	.+288    	; 0x1822 <__vector_18+0x2f6>
    1702:	20 32       	cpi	r18, 0x20	; 32
    1704:	79 f5       	brne	.+94     	; 0x1764 <__vector_18+0x238>
    1706:	fa 01       	movw	r30, r20
    1708:	ec 56       	subi	r30, 0x6C	; 108
    170a:	fb 4f       	sbci	r31, 0xFB	; 251
    170c:	80 81       	ld	r24, Z
    170e:	80 32       	cpi	r24, 0x20	; 32
    1710:	09 f4       	brne	.+2      	; 0x1714 <__vector_18+0x1e8>
    1712:	94 c0       	rjmp	.+296    	; 0x183c <__vector_18+0x310>
    1714:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_18E11field_index>
    1718:	68 2f       	mov	r22, r24
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	fb 01       	movw	r30, r22
    171e:	31 96       	adiw	r30, 0x01	; 1
    1720:	33 97       	sbiw	r30, 0x03	; 3
    1722:	0c f0       	brlt	.+2      	; 0x1726 <__vector_18+0x1fa>
    1724:	8b c0       	rjmp	.+278    	; 0x183c <__vector_18+0x310>
    1726:	88 23       	and	r24, r24
    1728:	79 f0       	breq	.+30     	; 0x1748 <__vector_18+0x21c>
    172a:	61 50       	subi	r22, 0x01	; 1
    172c:	71 09       	sbc	r23, r1
    172e:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <_ZZ11__vector_18E9field_len>
    1732:	a4 e1       	ldi	r26, 0x14	; 20
    1734:	a6 9f       	mul	r26, r22
    1736:	f0 01       	movw	r30, r0
    1738:	a7 9f       	mul	r26, r23
    173a:	f0 0d       	add	r31, r0
    173c:	11 24       	eor	r1, r1
    173e:	ce 0f       	add	r28, r30
    1740:	df 1f       	adc	r29, r31
    1742:	c9 0f       	add	r28, r25
    1744:	d1 1d       	adc	r29, r1
    1746:	1b 82       	std	Y+3, r1	; 0x03
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_18E11field_index>
    174e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZZ11__vector_18E9field_len>
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	4e 33       	cpi	r20, 0x3E	; 62
    1758:	51 05       	cpc	r21, r1
    175a:	0c f0       	brlt	.+2      	; 0x175e <__vector_18+0x232>
    175c:	4e e3       	ldi	r20, 0x3E	; 62
    175e:	40 93 d4 04 	sts	0x04D4, r20	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    1762:	5f c0       	rjmp	.+190    	; 0x1822 <__vector_18+0x2f6>
    1764:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ11__vector_18E9field_len>
    1768:	84 31       	cpi	r24, 0x14	; 20
    176a:	08 f0       	brcs	.+2      	; 0x176e <__vector_18+0x242>
    176c:	67 c0       	rjmp	.+206    	; 0x183c <__vector_18+0x310>
    176e:	40 91 91 04 	lds	r20, 0x0491	; 0x800491 <_ZZ11__vector_18E11field_index>
    1772:	41 11       	cpse	r20, r1
    1774:	19 c0       	rjmp	.+50     	; 0x17a8 <__vector_18+0x27c>
    1776:	40 91 92 04 	lds	r20, 0x0492	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    177a:	50 91 93 04 	lds	r21, 0x0493	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    177e:	ba 01       	movw	r22, r20
    1780:	66 0f       	add	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	44 0f       	add	r20, r20
    1786:	55 1f       	adc	r21, r21
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	44 0f       	add	r20, r20
    178e:	55 1f       	adc	r21, r21
    1790:	46 0f       	add	r20, r22
    1792:	57 1f       	adc	r21, r23
    1794:	42 0f       	add	r20, r18
    1796:	51 1d       	adc	r21, r1
    1798:	50 93 93 04 	sts	0x0493, r21	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    179c:	40 93 92 04 	sts	0x0492, r20	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ11__vector_18E9field_len>
    17a6:	16 c0       	rjmp	.+44     	; 0x17d4 <__vector_18+0x2a8>
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	41 50       	subi	r20, 0x01	; 1
    17ac:	51 09       	sbc	r21, r1
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	98 0f       	add	r25, r24
    17b2:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <_ZZ11__vector_18E9field_len>
    17b6:	e4 e1       	ldi	r30, 0x14	; 20
    17b8:	e4 9f       	mul	r30, r20
    17ba:	b0 01       	movw	r22, r0
    17bc:	e5 9f       	mul	r30, r21
    17be:	70 0d       	add	r23, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	c6 0f       	add	r28, r22
    17c4:	d7 1f       	adc	r29, r23
    17c6:	fe 01       	movw	r30, r28
    17c8:	e8 0f       	add	r30, r24
    17ca:	f1 1d       	adc	r31, r1
    17cc:	23 83       	std	Z+3, r18	; 0x03
    17ce:	c9 0f       	add	r28, r25
    17d0:	d1 1d       	adc	r29, r1
    17d2:	1b 82       	std	Y+3, r1	; 0x03
    17d4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	8e 33       	cpi	r24, 0x3E	; 62
    17de:	91 05       	cpc	r25, r1
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <__vector_18+0x2b8>
    17e2:	8e e3       	ldi	r24, 0x3E	; 62
    17e4:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    17e8:	1c c0       	rjmp	.+56     	; 0x1822 <__vector_18+0x2f6>
    17ea:	2f 37       	cpi	r18, 0x7F	; 127
    17ec:	41 f4       	brne	.+16     	; 0x17fe <__vector_18+0x2d2>
    17ee:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    17f2:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    17f6:	18 16       	cp	r1, r24
    17f8:	19 06       	cpc	r1, r25
    17fa:	bc f0       	brlt	.+46     	; 0x182a <__vector_18+0x2fe>
    17fc:	1b c0       	rjmp	.+54     	; 0x1834 <__vector_18+0x308>
    17fe:	20 32       	cpi	r18, 0x20	; 32
    1800:	e9 f0       	breq	.+58     	; 0x183c <__vector_18+0x310>
    1802:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <_ZZ11__vector_18E11field_index>
    1806:	c9 01       	movw	r24, r18
    1808:	99 27       	eor	r25, r25
    180a:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    180e:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    1812:	1b 82       	std	Y+3, r1	; 0x03
    1814:	1f 8a       	std	Y+23, r1	; 0x17
    1816:	1b a6       	std	Y+43, r1	; 0x2b
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E13receiving_msg>
    181e:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_ZZ11__vector_18E9charIndex>
    1822:	82 2f       	mov	r24, r18
    1824:	0e 94 16 0a 	call	0x142c	; 0x142c <_Z12lb_echo_charh>
    1828:	09 c0       	rjmp	.+18     	; 0x183c <__vector_18+0x310>
    182a:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    182e:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    1832:	f7 cf       	rjmp	.-18     	; 0x1822 <__vector_18+0x2f6>
    1834:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E6msg_ID+0x1>
    1838:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ11__vector_18E6msg_ID>
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	1f 91       	pop	r17
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_19>:
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	2f 93       	push	r18
    1870:	3f 93       	push	r19
    1872:	4f 93       	push	r20
    1874:	5f 93       	push	r21
    1876:	6f 93       	push	r22
    1878:	7f 93       	push	r23
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	af 93       	push	r26
    1880:	bf 93       	push	r27
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
    1886:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ11__vector_19E4buff>
    188a:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZZ11__vector_19E4buff+0x1>
    188e:	89 2b       	or	r24, r25
    1890:	31 f4       	brne	.+12     	; 0x189e <__vector_19+0x3a>
    1892:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z16nextFullTxBufferv>
    1896:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ11__vector_19E4buff+0x1>
    189a:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ11__vector_19E4buff>
    189e:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <_ZZ11__vector_19E4buff>
    18a2:	f0 91 8f 04 	lds	r31, 0x048F	; 0x80048f <_ZZ11__vector_19E4buff+0x1>
    18a6:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZZ11__vector_19E9charIndex>
    18aa:	df 01       	movw	r26, r30
    18ac:	a8 0f       	add	r26, r24
    18ae:	b1 1d       	adc	r27, r1
    18b0:	9c 91       	ld	r25, X
    18b2:	99 23       	and	r25, r25
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <__vector_19+0x5e>
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZZ11__vector_19E9charIndex>
    18bc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <__vector_19+0x78>
    18c2:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_19E9charIndex>
    18c6:	10 82       	st	Z, r1
    18c8:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z16nextFullTxBufferv>
    18cc:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ11__vector_19E4buff+0x1>
    18d0:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ11__vector_19E4buff>
    18d4:	89 2b       	or	r24, r25
    18d6:	11 f4       	brne	.+4      	; 0x18dc <__vector_19+0x78>
    18d8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_Z14linkbus_end_txv>
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	bf 91       	pop	r27
    18e2:	af 91       	pop	r26
    18e4:	9f 91       	pop	r25
    18e6:	8f 91       	pop	r24
    18e8:	7f 91       	pop	r23
    18ea:	6f 91       	pop	r22
    18ec:	5f 91       	pop	r21
    18ee:	4f 91       	pop	r20
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_1>:
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	2f 93       	push	r18
    1912:	3f 93       	push	r19
    1914:	4f 93       	push	r20
    1916:	5f 93       	push	r21
    1918:	6f 93       	push	r22
    191a:	7f 93       	push	r23
    191c:	8f 93       	push	r24
    191e:	9f 93       	push	r25
    1920:	af 93       	push	r26
    1922:	bf 93       	push	r27
    1924:	ef 93       	push	r30
    1926:	ff 93       	push	r31
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	1f 92       	push	r1
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    1936:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    193a:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    193e:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	a1 1d       	adc	r26, r1
    1946:	b1 1d       	adc	r27, r1
    1948:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <g_current_epoch>
    194c:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <g_current_epoch+0x1>
    1950:	a0 93 8c 05 	sts	0x058C, r26	; 0x80058c <g_current_epoch+0x2>
    1954:	b0 93 8d 05 	sts	0x058D, r27	; 0x80058d <g_current_epoch+0x3>
    1958:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_seconds_since_powerup>
    195c:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_seconds_since_powerup+0x1>
    1960:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_seconds_since_powerup+0x2>
    1964:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_seconds_since_powerup+0x3>
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	a1 1d       	adc	r26, r1
    196c:	b1 1d       	adc	r27, r1
    196e:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_seconds_since_powerup>
    1972:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <g_seconds_since_powerup+0x1>
    1976:	a0 93 95 05 	sts	0x0595, r26	; 0x800595 <g_seconds_since_powerup+0x2>
    197a:	b0 93 96 05 	sts	0x0596, r27	; 0x800596 <g_seconds_since_powerup+0x3>
    197e:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_temperature_check_countdown>
    1982:	88 23       	and	r24, r24
    1984:	29 f0       	breq	.+10     	; 0x1990 <__vector_1+0x92>
    1986:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_temperature_check_countdown>
    198a:	81 50       	subi	r24, 0x01	; 1
    198c:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_temperature_check_countdown>
    1990:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_voltage_check_countdown>
    1994:	88 23       	and	r24, r24
    1996:	29 f0       	breq	.+10     	; 0x19a2 <__vector_1+0xa4>
    1998:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_voltage_check_countdown>
    199c:	81 50       	subi	r24, 0x01	; 1
    199e:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <g_voltage_check_countdown>
    19a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    19a6:	88 23       	and	r24, r24
    19a8:	91 f1       	breq	.+100    	; 0x1a0e <__vector_1+0x110>
    19aa:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_use_rtc_for_startstop>
    19ae:	88 23       	and	r24, r24
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <__vector_1+0xb6>
    19b2:	fe c2       	rjmp	.+1532   	; 0x1fb0 <__vector_1+0x6b2>
    19b4:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_current_epoch>
    19b8:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <g_current_epoch+0x1>
    19bc:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <g_current_epoch+0x2>
    19c0:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <g_current_epoch+0x3>
    19c4:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    19c8:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    19cc:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    19d0:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    19d4:	48 17       	cp	r20, r24
    19d6:	59 07       	cpc	r21, r25
    19d8:	6a 07       	cpc	r22, r26
    19da:	7b 07       	cpc	r23, r27
    19dc:	08 f4       	brcc	.+2      	; 0x19e0 <__vector_1+0xe2>
    19de:	e8 c2       	rjmp	.+1488   	; 0x1fb0 <__vector_1+0x6b2>
    19e0:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_current_epoch>
    19e4:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <g_current_epoch+0x1>
    19e8:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <g_current_epoch+0x2>
    19ec:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <g_current_epoch+0x3>
    19f0:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    19f4:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    19f8:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    19fc:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    1a00:	48 17       	cp	r20, r24
    1a02:	59 07       	cpc	r21, r25
    1a04:	6a 07       	cpc	r22, r26
    1a06:	7b 07       	cpc	r23, r27
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <__vector_1+0x10e>
    1a0a:	82 c2       	rjmp	.+1284   	; 0x1f10 <__vector_1+0x612>
    1a0c:	d1 c2       	rjmp	.+1442   	; 0x1fb0 <__vector_1+0x6b2>
    1a0e:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_use_rtc_for_startstop>
    1a12:	88 23       	and	r24, r24
    1a14:	d1 f0       	breq	.+52     	; 0x1a4a <__vector_1+0x14c>
    1a16:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_current_epoch>
    1a1a:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <g_current_epoch+0x1>
    1a1e:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <g_current_epoch+0x2>
    1a22:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <g_current_epoch+0x3>
    1a26:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    1a2a:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    1a2e:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    1a32:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    1a36:	48 17       	cp	r20, r24
    1a38:	59 07       	cpc	r21, r25
    1a3a:	6a 07       	cpc	r22, r26
    1a3c:	7b 07       	cpc	r23, r27
    1a3e:	28 f0       	brcs	.+10     	; 0x1a4a <__vector_1+0x14c>
    1a40:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_use_rtc_for_startstop>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_transmissions_disabled>
    1a4a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    1a4e:	81 11       	cpse	r24, r1
    1a50:	af c2       	rjmp	.+1374   	; 0x1fb0 <__vector_1+0x6b2>
    1a52:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_seconds_since_sync>
    1a56:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1a5a:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1a5e:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1a62:	89 2b       	or	r24, r25
    1a64:	8a 2b       	or	r24, r26
    1a66:	8b 2b       	or	r24, r27
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <__vector_1+0x16e>
    1a6a:	4a c0       	rjmp	.+148    	; 0x1b00 <__vector_1+0x202>
    1a6c:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ10__vector_1E11send_ID_now>
    1a70:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_id_interval>
    1a74:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_id_interval+0x1>
    1a78:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_cycle_period_seconds>
    1a7c:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_cycle_period_seconds+0x1>
    1a80:	82 17       	cp	r24, r18
    1a82:	93 07       	cpc	r25, r19
    1a84:	0c f4       	brge	.+2      	; 0x1a88 <__vector_1+0x18a>
    1a86:	45 c1       	rjmp	.+650    	; 0x1d12 <__vector_1+0x414>
    1a88:	40 91 92 05 	lds	r20, 0x0592	; 0x800592 <g_fox>
    1a8c:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_fox_id_offset>
    1a90:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_fox_id_offset+0x1>
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	8a 01       	movw	r16, r20
    1a98:	08 1b       	sub	r16, r24
    1a9a:	19 0b       	sbc	r17, r25
    1a9c:	e0 90 5b 05 	lds	r14, 0x055B	; 0x80055b <g_on_air_interval>
    1aa0:	f0 90 5c 05 	lds	r15, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    1aa4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_id_codespeed>
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	85 e2       	ldi	r24, 0x25	; 37
    1aac:	95 e0       	ldi	r25, 0x05	; 5
    1aae:	0e 94 b7 28 	call	0x516e	; 0x516e <_Z26timeRequiredToSendStrAtWPMPcj>
    1ab2:	a8 01       	movw	r20, r16
    1ab4:	10 16       	cp	r1, r16
    1ab6:	11 06       	cpc	r1, r17
    1ab8:	14 f0       	brlt	.+4      	; 0x1abe <__vector_1+0x1c0>
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	4e 9d       	mul	r20, r14
    1ac0:	f0 01       	movw	r30, r0
    1ac2:	4f 9d       	mul	r20, r15
    1ac4:	f0 0d       	add	r31, r0
    1ac6:	5e 9d       	mul	r21, r14
    1ac8:	f0 0d       	add	r31, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	9c 01       	movw	r18, r24
    1ace:	2c 50       	subi	r18, 0x0C	; 12
    1ad0:	3e 4f       	sbci	r19, 0xFE	; 254
    1ad2:	36 95       	lsr	r19
    1ad4:	27 95       	ror	r18
    1ad6:	36 95       	lsr	r19
    1ad8:	27 95       	ror	r18
    1ada:	36 95       	lsr	r19
    1adc:	27 95       	ror	r18
    1ade:	a5 ec       	ldi	r26, 0xC5	; 197
    1ae0:	b0 e2       	ldi	r27, 0x20	; 32
    1ae2:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    1ae6:	92 95       	swap	r25
    1ae8:	82 95       	swap	r24
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	89 27       	eor	r24, r25
    1aee:	9f 70       	andi	r25, 0x0F	; 15
    1af0:	89 27       	eor	r24, r25
    1af2:	e8 1b       	sub	r30, r24
    1af4:	f9 0b       	sbc	r31, r25
    1af6:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1afa:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1afe:	e5 c0       	rjmp	.+458    	; 0x1cca <__vector_1+0x3cc>
    1b00:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_id_interval>
    1b04:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_id_interval+0x1>
    1b08:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_cycle_period_seconds>
    1b0c:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <g_cycle_period_seconds+0x1>
    1b10:	82 17       	cp	r24, r18
    1b12:	93 07       	cpc	r25, r19
    1b14:	0c f4       	brge	.+2      	; 0x1b18 <__vector_1+0x21a>
    1b16:	d9 c0       	rjmp	.+434    	; 0x1cca <__vector_1+0x3cc>
    1b18:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_id_codespeed>
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	85 e2       	ldi	r24, 0x25	; 37
    1b20:	95 e0       	ldi	r25, 0x05	; 5
    1b22:	0e 94 b7 28 	call	0x516e	; 0x516e <_Z26timeRequiredToSendStrAtWPMPcj>
    1b26:	8c 50       	subi	r24, 0x0C	; 12
    1b28:	9e 4f       	sbci	r25, 0xFE	; 254
    1b2a:	9c 01       	movw	r18, r24
    1b2c:	36 95       	lsr	r19
    1b2e:	27 95       	ror	r18
    1b30:	36 95       	lsr	r19
    1b32:	27 95       	ror	r18
    1b34:	36 95       	lsr	r19
    1b36:	27 95       	ror	r18
    1b38:	a5 ec       	ldi	r26, 0xC5	; 197
    1b3a:	b0 e2       	ldi	r27, 0x20	; 32
    1b3c:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    1b40:	9c 01       	movw	r18, r24
    1b42:	32 95       	swap	r19
    1b44:	22 95       	swap	r18
    1b46:	2f 70       	andi	r18, 0x0F	; 15
    1b48:	23 27       	eor	r18, r19
    1b4a:	3f 70       	andi	r19, 0x0F	; 15
    1b4c:	23 27       	eor	r18, r19
    1b4e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_initialize_fox_transmissions>
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	b9 f4       	brne	.+46     	; 0x1b84 <__vector_1+0x286>
    1b56:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ10__vector_1E11send_ID_now>
    1b5a:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_seconds_since_sync>
    1b5e:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1b62:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1b66:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1b6a:	40 91 5b 05 	lds	r20, 0x055B	; 0x80055b <g_on_air_interval>
    1b6e:	50 91 5c 05 	lds	r21, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    1b72:	84 0f       	add	r24, r20
    1b74:	95 1f       	adc	r25, r21
    1b76:	82 1b       	sub	r24, r18
    1b78:	93 0b       	sbc	r25, r19
    1b7a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1b7e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1b82:	c7 c0       	rjmp	.+398    	; 0x1d12 <__vector_1+0x414>
    1b84:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_initialize_fox_transmissions>
    1b88:	83 30       	cpi	r24, 0x03	; 3
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <__vector_1+0x290>
    1b8c:	76 c0       	rjmp	.+236    	; 0x1c7a <__vector_1+0x37c>
    1b8e:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    1b92:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_fox_id_offset>
    1b96:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_fox_id_offset+0x1>
    1b9a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <g_fox_counter>
    1b9e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <g_fox_counter+0x1>
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	86 1b       	sub	r24, r22
    1ba6:	97 0b       	sbc	r25, r23
    1ba8:	84 17       	cp	r24, r20
    1baa:	95 07       	cpc	r25, r21
    1bac:	c9 f5       	brne	.+114    	; 0x1c20 <__vector_1+0x322>
    1bae:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_seconds_into_cycle>
    1bb2:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_seconds_into_cycle+0x1>
    1bb6:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_on_air_interval>
    1bba:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    1bbe:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	8c f4       	brge	.+34     	; 0x1bea <__vector_1+0x2ec>
    1bc8:	40 91 97 05 	lds	r20, 0x0597	; 0x800597 <g_seconds_since_sync>
    1bcc:	50 91 98 05 	lds	r21, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1bd0:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1bd4:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1bd8:	48 0f       	add	r20, r24
    1bda:	59 1f       	adc	r21, r25
    1bdc:	42 1b       	sub	r20, r18
    1bde:	53 0b       	sbc	r21, r19
    1be0:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1be4:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1be8:	70 c0       	rjmp	.+224    	; 0x1cca <__vector_1+0x3cc>
    1bea:	82 17       	cp	r24, r18
    1bec:	93 07       	cpc	r25, r19
    1bee:	0c f0       	brlt	.+2      	; 0x1bf2 <__vector_1+0x2f4>
    1bf0:	70 c0       	rjmp	.+224    	; 0x1cd2 <__vector_1+0x3d4>
    1bf2:	40 91 97 05 	lds	r20, 0x0597	; 0x800597 <g_seconds_since_sync>
    1bf6:	50 91 98 05 	lds	r21, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1bfa:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1bfe:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1c02:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <g_cycle_period_seconds>
    1c06:	f0 91 5a 05 	lds	r31, 0x055A	; 0x80055a <g_cycle_period_seconds+0x1>
    1c0a:	4e 0f       	add	r20, r30
    1c0c:	5f 1f       	adc	r21, r31
    1c0e:	84 0f       	add	r24, r20
    1c10:	95 1f       	adc	r25, r21
    1c12:	82 1b       	sub	r24, r18
    1c14:	93 0b       	sbc	r25, r19
    1c16:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1c1a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1c1e:	55 c0       	rjmp	.+170    	; 0x1cca <__vector_1+0x3cc>
    1c20:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_seconds_since_sync>
    1c24:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1c28:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1c2c:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1c30:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <g_seconds_into_cycle>
    1c34:	f0 91 58 05 	lds	r31, 0x0558	; 0x800558 <g_seconds_into_cycle+0x1>
    1c38:	40 91 92 05 	lds	r20, 0x0592	; 0x800592 <g_fox>
    1c3c:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_fox_id_offset>
    1c40:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_fox_id_offset+0x1>
    1c44:	00 91 5b 05 	lds	r16, 0x055B	; 0x80055b <g_on_air_interval>
    1c48:	10 91 5c 05 	lds	r17, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	46 1b       	sub	r20, r22
    1c50:	57 0b       	sbc	r21, r23
    1c52:	40 9f       	mul	r20, r16
    1c54:	b0 01       	movw	r22, r0
    1c56:	41 9f       	mul	r20, r17
    1c58:	70 0d       	add	r23, r0
    1c5a:	50 9f       	mul	r21, r16
    1c5c:	70 0d       	add	r23, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	8e 1b       	sub	r24, r30
    1c62:	9f 0b       	sbc	r25, r31
    1c64:	86 0f       	add	r24, r22
    1c66:	97 1f       	adc	r25, r23
    1c68:	82 1b       	sub	r24, r18
    1c6a:	93 0b       	sbc	r25, r19
    1c6c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1c70:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1c74:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ10__vector_1E11send_ID_now>
    1c78:	4c c0       	rjmp	.+152    	; 0x1d12 <__vector_1+0x414>
    1c7a:	40 91 97 05 	lds	r20, 0x0597	; 0x800597 <g_seconds_since_sync>
    1c7e:	50 91 98 05 	lds	r21, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1c82:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1c86:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1c8a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1c8e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1c92:	09 2e       	mov	r0, r25
    1c94:	00 0c       	add	r0, r0
    1c96:	aa 0b       	sbc	r26, r26
    1c98:	bb 0b       	sbc	r27, r27
    1c9a:	84 17       	cp	r24, r20
    1c9c:	95 07       	cpc	r25, r21
    1c9e:	a6 07       	cpc	r26, r22
    1ca0:	b7 07       	cpc	r27, r23
    1ca2:	99 f4       	brne	.+38     	; 0x1cca <__vector_1+0x3cc>
    1ca4:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_seconds_since_sync>
    1ca8:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1cac:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1cb0:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1cb4:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <g_id_interval>
    1cb8:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <g_id_interval+0x1>
    1cbc:	82 0f       	add	r24, r18
    1cbe:	93 1f       	adc	r25, r19
    1cc0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZZ10__vector_1E29seconds_since_sync_to_send_ID+0x1>
    1cc4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10__vector_1E29seconds_since_sync_to_send_ID>
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <__vector_1+0x3d4>
    1cca:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10__vector_1E11send_ID_now>
    1cce:	88 23       	and	r24, r24
    1cd0:	01 f1       	breq	.+64     	; 0x1d12 <__vector_1+0x414>
    1cd2:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ10__vector_1E11send_ID_now>
    1cd6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_id_codespeed>
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	82 e8       	ldi	r24, 0x82	; 130
    1cde:	9b e1       	ldi	r25, 0x1B	; 27
    1ce0:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	6a e0       	ldi	r22, 0x0A	; 10
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1cee:	66 0f       	add	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <g_code_throttle+0x1>
    1cf6:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <g_code_throttle>
    1cfa:	19 82       	std	Y+1, r1	; 0x01
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	be 01       	movw	r22, r28
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	85 e2       	ldi	r24, 0x25	; 37
    1d08:	95 e0       	ldi	r25, 0x05	; 5
    1d0a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
    1d0e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_callsign_sent>
    1d12:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_number_of_foxes>
    1d16:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_number_of_foxes+0x1>
    1d1a:	89 2b       	or	r24, r25
    1d1c:	b1 f1       	breq	.+108    	; 0x1d8a <__vector_1+0x48c>
    1d1e:	60 91 97 05 	lds	r22, 0x0597	; 0x800597 <g_seconds_since_sync>
    1d22:	70 91 98 05 	lds	r23, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1d26:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1d2a:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1d2e:	20 91 5b 05 	lds	r18, 0x055B	; 0x80055b <g_on_air_interval>
    1d32:	30 91 5c 05 	lds	r19, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    1d36:	03 2e       	mov	r0, r19
    1d38:	00 0c       	add	r0, r0
    1d3a:	44 0b       	sbc	r20, r20
    1d3c:	55 0b       	sbc	r21, r21
    1d3e:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <__divmodsi4>
    1d42:	67 2b       	or	r22, r23
    1d44:	68 2b       	or	r22, r24
    1d46:	69 2b       	or	r22, r25
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <__vector_1+0x44e>
    1d4a:	04 c1       	rjmp	.+520    	; 0x1f54 <__vector_1+0x656>
    1d4c:	1e c0       	rjmp	.+60     	; 0x1d8a <__vector_1+0x48c>
    1d4e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_initialize_fox_transmissions>
    1d52:	88 23       	and	r24, r24
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <__vector_1+0x45a>
    1d56:	0c c1       	rjmp	.+536    	; 0x1f70 <__vector_1+0x672>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZZ10__vector_1E23fox_transition_occurred>
    1d5e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <g_fox_counter>
    1d62:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <g_fox_counter+0x1>
    1d66:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_number_of_foxes>
    1d6a:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_number_of_foxes+0x1>
    1d6e:	82 17       	cp	r24, r18
    1d70:	93 07       	cpc	r25, r19
    1d72:	34 f4       	brge	.+12     	; 0x1d80 <__vector_1+0x482>
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_counter+0x1>
    1d7c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_counter>
    1d80:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_seconds_into_cycle+0x1>
    1d84:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_seconds_into_cycle>
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <__vector_1+0x496>
    1d8a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZZ10__vector_1E23fox_transition_occurred>
    1d8e:	88 23       	and	r24, r24
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__vector_1+0x496>
    1d92:	9f c0       	rjmp	.+318    	; 0x1ed2 <__vector_1+0x5d4>
    1d94:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_callsign_sent>
    1d98:	81 11       	cpse	r24, r1
    1d9a:	f4 c0       	rjmp	.+488    	; 0x1f84 <__vector_1+0x686>
    1d9c:	9a c0       	rjmp	.+308    	; 0x1ed2 <__vector_1+0x5d4>
    1d9e:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <g_fox>
    1da2:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <g_fox_counter>
    1da6:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <g_fox_counter+0x1>
    1daa:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_fox_id_offset>
    1dae:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_fox_id_offset+0x1>
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	84 0f       	add	r24, r20
    1db6:	95 1f       	adc	r25, r21
    1db8:	28 17       	cp	r18, r24
    1dba:	39 07       	cpc	r19, r25
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <__vector_1+0x4c2>
    1dbe:	f5 c0       	rjmp	.+490    	; 0x1faa <__vector_1+0x6ac>
    1dc0:	ee c0       	rjmp	.+476    	; 0x1f9e <__vector_1+0x6a0>
    1dc2:	40 91 3e 05 	lds	r20, 0x053E	; 0x80053e <g_voltage>
    1dc6:	50 91 3f 05 	lds	r21, 0x053F	; 0x80053f <g_voltage+0x1>
    1dca:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_temperature>
    1dce:	28 2f       	mov	r18, r24
    1dd0:	08 2e       	mov	r0, r24
    1dd2:	00 0c       	add	r0, r0
    1dd4:	33 0b       	sbc	r19, r19
    1dd6:	3f 93       	push	r19
    1dd8:	8f 93       	push	r24
    1dda:	fa 01       	movw	r30, r20
    1ddc:	f6 95       	lsr	r31
    1dde:	e7 95       	ror	r30
    1de0:	f6 95       	lsr	r31
    1de2:	e7 95       	ror	r30
    1de4:	9f 01       	movw	r18, r30
    1de6:	ab e7       	ldi	r26, 0x7B	; 123
    1de8:	b4 e1       	ldi	r27, 0x14	; 20
    1dea:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	64 e6       	ldi	r22, 0x64	; 100
    1df4:	68 9f       	mul	r22, r24
    1df6:	90 01       	movw	r18, r0
    1df8:	69 9f       	mul	r22, r25
    1dfa:	30 0d       	add	r19, r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	ca 01       	movw	r24, r20
    1e00:	82 1b       	sub	r24, r18
    1e02:	93 0b       	sbc	r25, r19
    1e04:	9c 01       	movw	r18, r24
    1e06:	2b 5f       	subi	r18, 0xFB	; 251
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	ad ec       	ldi	r26, 0xCD	; 205
    1e0c:	bc ec       	ldi	r27, 0xCC	; 204
    1e0e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    1e12:	96 95       	lsr	r25
    1e14:	87 95       	ror	r24
    1e16:	96 95       	lsr	r25
    1e18:	87 95       	ror	r24
    1e1a:	96 95       	lsr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	9f 93       	push	r25
    1e20:	8f 93       	push	r24
    1e22:	9f 01       	movw	r18, r30
    1e24:	ab e7       	ldi	r26, 0x7B	; 123
    1e26:	b4 e1       	ldi	r27, 0x14	; 20
    1e28:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    1e2c:	96 95       	lsr	r25
    1e2e:	87 95       	ror	r24
    1e30:	9f 93       	push	r25
    1e32:	8f 93       	push	r24
    1e34:	87 e2       	ldi	r24, 0x27	; 39
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	9f 93       	push	r25
    1e3a:	8f 93       	push	r24
    1e3c:	88 ed       	ldi	r24, 0xD8	; 216
    1e3e:	94 e0       	ldi	r25, 0x04	; 4
    1e40:	9f 93       	push	r25
    1e42:	8f 93       	push	r24
    1e44:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    1e48:	68 ed       	ldi	r22, 0xD8	; 216
    1e4a:	74 e0       	ldi	r23, 0x04	; 4
    1e4c:	80 e1       	ldi	r24, 0x10	; 16
    1e4e:	95 e0       	ldi	r25, 0x05	; 5
    1e50:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	12 c0       	rjmp	.+36     	; 0x1e86 <__vector_1+0x588>
    1e62:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	bc 01       	movw	r22, r24
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	68 0f       	add	r22, r24
    1e74:	79 1f       	adc	r23, r25
    1e76:	64 54       	subi	r22, 0x44	; 68
    1e78:	7d 4f       	sbci	r23, 0xFD	; 253
    1e7a:	80 e1       	ldi	r24, 0x10	; 16
    1e7c:	95 e0       	ldi	r25, 0x05	; 5
    1e7e:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <g_pattern_codespeed>
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	82 e8       	ldi	r24, 0x82	; 130
    1e8e:	9b e1       	ldi	r25, 0x1B	; 27
    1e90:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1e94:	cb 01       	movw	r24, r22
    1e96:	6a e0       	ldi	r22, 0x0A	; 10
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1e9e:	66 0f       	add	r22, r22
    1ea0:	77 1f       	adc	r23, r23
    1ea2:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <g_code_throttle+0x1>
    1ea6:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <g_code_throttle>
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	be 01       	movw	r22, r28
    1eb0:	6f 5f       	subi	r22, 0xFF	; 255
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	80 e1       	ldi	r24, 0x10	; 16
    1eb6:	95 e0       	ldi	r25, 0x05	; 5
    1eb8:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_on_the_air>
    1ec2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_fox_counter>
    1ec6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_fox_counter+0x1>
    1eca:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_tone_offset+0x1>
    1ece:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_tone_offset>
    1ed2:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_initialize_fox_transmissions>
    1ed6:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_seconds_since_sync>
    1eda:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1ede:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1ee2:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	b1 1d       	adc	r27, r1
    1eec:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_seconds_since_sync>
    1ef0:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <g_seconds_since_sync+0x1>
    1ef4:	a0 93 99 05 	sts	0x0599, r26	; 0x800599 <g_seconds_since_sync+0x2>
    1ef8:	b0 93 9a 05 	sts	0x059A, r27	; 0x80059a <g_seconds_since_sync+0x3>
    1efc:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_seconds_into_cycle>
    1f00:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_seconds_into_cycle+0x1>
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <g_seconds_into_cycle+0x1>
    1f0a:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <g_seconds_into_cycle>
    1f0e:	50 c0       	rjmp	.+160    	; 0x1fb0 <__vector_1+0x6b2>
    1f10:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <g_LED_enunciating>
    1f14:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_transmissions_disabled>
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	be 01       	movw	r22, r28
    1f22:	6f 5f       	subi	r22, 0xFF	; 255
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	80 e1       	ldi	r24, 0x10	; 16
    1f28:	95 e0       	ldi	r25, 0x05	; 5
    1f2a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
    1f2e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <g_pattern_codespeed>
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	82 e8       	ldi	r24, 0x82	; 130
    1f36:	9b e1       	ldi	r25, 0x1B	; 27
    1f38:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	6a e0       	ldi	r22, 0x0A	; 10
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <g_code_throttle+0x1>
    1f4e:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <g_code_throttle>
    1f52:	2e c0       	rjmp	.+92     	; 0x1fb0 <__vector_1+0x6b2>
    1f54:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_seconds_since_sync>
    1f58:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    1f5c:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    1f60:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    1f64:	89 2b       	or	r24, r25
    1f66:	8a 2b       	or	r24, r26
    1f68:	8b 2b       	or	r24, r27
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <__vector_1+0x670>
    1f6c:	f0 ce       	rjmp	.-544    	; 0x1d4e <__vector_1+0x450>
    1f6e:	f4 ce       	rjmp	.-536    	; 0x1d58 <__vector_1+0x45a>
    1f70:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_fox_counter>
    1f74:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_fox_counter+0x1>
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_counter+0x1>
    1f7e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_counter>
    1f82:	ea ce       	rjmp	.-556    	; 0x1d58 <__vector_1+0x45a>
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	8d e0       	ldi	r24, 0x0D	; 13
    1f88:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    1f8c:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10__vector_1E23fox_transition_occurred>
    1f90:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_number_of_foxes>
    1f94:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_number_of_foxes+0x1>
    1f98:	02 97       	sbiw	r24, 0x02	; 2
    1f9a:	0c f0       	brlt	.+2      	; 0x1f9e <__vector_1+0x6a0>
    1f9c:	00 cf       	rjmp	.-512    	; 0x1d9e <__vector_1+0x4a0>
    1f9e:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    1fa2:	83 31       	cpi	r24, 0x13	; 19
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <__vector_1+0x6aa>
    1fa6:	5d cf       	rjmp	.-326    	; 0x1e62 <__vector_1+0x564>
    1fa8:	0c cf       	rjmp	.-488    	; 0x1dc2 <__vector_1+0x4c4>
    1faa:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <g_on_the_air>
    1fae:	91 cf       	rjmp	.-222    	; 0x1ed2 <__vector_1+0x5d4>
    1fb0:	0f 90       	pop	r0
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	ff 91       	pop	r31
    1fb8:	ef 91       	pop	r30
    1fba:	bf 91       	pop	r27
    1fbc:	af 91       	pop	r26
    1fbe:	9f 91       	pop	r25
    1fc0:	8f 91       	pop	r24
    1fc2:	7f 91       	pop	r23
    1fc4:	6f 91       	pop	r22
    1fc6:	5f 91       	pop	r21
    1fc8:	4f 91       	pop	r20
    1fca:	3f 91       	pop	r19
    1fcc:	2f 91       	pop	r18
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	0f 90       	pop	r0
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	0f 90       	pop	r0
    1fdc:	1f 90       	pop	r1
    1fde:	18 95       	reti

00001fe0 <__vector_14>:
    1fe0:	1f 92       	push	r1
    1fe2:	0f 92       	push	r0
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	0f 92       	push	r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	2f 93       	push	r18
    1fec:	3f 93       	push	r19
    1fee:	4f 93       	push	r20
    1ff0:	5f 93       	push	r21
    1ff2:	6f 93       	push	r22
    1ff4:	7f 93       	push	r23
    1ff6:	8f 93       	push	r24
    1ff8:	9f 93       	push	r25
    1ffa:	af 93       	push	r26
    1ffc:	bf 93       	push	r27
    1ffe:	ef 93       	push	r30
    2000:	ff 93       	push	r31
    2002:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ11__vector_14E6toggle>
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	81 11       	cpse	r24, r1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <_ZZ11__vector_14E6toggle>
    2010:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_audio_tone_state>
    2014:	99 23       	and	r25, r25
    2016:	61 f0       	breq	.+24     	; 0x2030 <__vector_14+0x50>
    2018:	81 11       	cpse	r24, r1
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <__vector_14+0x46>
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	89 e0       	ldi	r24, 0x09	; 9
    2020:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <__vector_14+0x58>
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	89 e0       	ldi	r24, 0x09	; 9
    202a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <__vector_14+0x58>
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	89 e0       	ldi	r24, 0x09	; 9
    2034:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2038:	ff 91       	pop	r31
    203a:	ef 91       	pop	r30
    203c:	bf 91       	pop	r27
    203e:	af 91       	pop	r26
    2040:	9f 91       	pop	r25
    2042:	8f 91       	pop	r24
    2044:	7f 91       	pop	r23
    2046:	6f 91       	pop	r22
    2048:	5f 91       	pop	r21
    204a:	4f 91       	pop	r20
    204c:	3f 91       	pop	r19
    204e:	2f 91       	pop	r18
    2050:	0f 90       	pop	r0
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	0f 90       	pop	r0
    2056:	1f 90       	pop	r1
    2058:	18 95       	reti

0000205a <__vector_11>:
    205a:	1f 92       	push	r1
    205c:	0f 92       	push	r0
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	0f 92       	push	r0
    2062:	11 24       	eor	r1, r1
    2064:	8f 93       	push	r24
    2066:	9f 93       	push	r25
    2068:	ef 93       	push	r30
    206a:	ff 93       	push	r31
    206c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_AM_enabled>
    2070:	88 23       	and	r24, r24
    2072:	09 f4       	brne	.+2      	; 0x2076 <__vector_11+0x1c>
    2074:	4b c0       	rjmp	.+150    	; 0x210c <__vector_11+0xb2>
    2076:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_sendAMmodulation>
    207a:	81 11       	cpse	r24, r1
    207c:	30 c0       	rjmp	.+96     	; 0x20de <__vector_11+0x84>
    207e:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ11__vector_11E5index>
    2082:	81 11       	cpse	r24, r1
    2084:	2c c0       	rjmp	.+88     	; 0x20de <__vector_11+0x84>
    2086:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <g_sendAMmodulationConstantly>
    208a:	88 23       	and	r24, r24
    208c:	a1 f0       	breq	.+40     	; 0x20b6 <__vector_11+0x5c>
    208e:	36 c0       	rjmp	.+108    	; 0x20fc <__vector_11+0xa2>
    2090:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_ZZ11__vector_11E5index>
    2094:	98 b1       	in	r25, 0x08	; 8
    2096:	8f 70       	andi	r24, 0x0F	; 15
    2098:	90 7f       	andi	r25, 0xF0	; 240
    209a:	89 2b       	or	r24, r25
    209c:	88 b9       	out	0x08, r24	; 8
    209e:	9b b1       	in	r25, 0x0b	; 11
    20a0:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZZ11__vector_11E11controlPins>
    20a4:	80 73       	andi	r24, 0x30	; 48
    20a6:	82 95       	swap	r24
    20a8:	8f 70       	andi	r24, 0x0F	; 15
    20aa:	9c 7f       	andi	r25, 0xFC	; 252
    20ac:	89 2b       	or	r24, r25
    20ae:	8b b9       	out	0x0b, r24	; 11
    20b0:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <_ZZ11__vector_11E11controlPins>
    20b4:	2b c0       	rjmp	.+86     	; 0x210c <__vector_11+0xb2>
    20b6:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZZ11__vector_11E11controlPins>
    20ba:	8f 33       	cpi	r24, 0x3F	; 63
    20bc:	39 f1       	breq	.+78     	; 0x210c <__vector_11+0xb2>
    20be:	8f e3       	ldi	r24, 0x3F	; 63
    20c0:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ11__vector_11E11controlPins>
    20c4:	88 b1       	in	r24, 0x08	; 8
    20c6:	8f 60       	ori	r24, 0x0F	; 15
    20c8:	88 b9       	out	0x08, r24	; 8
    20ca:	8b b1       	in	r24, 0x0b	; 11
    20cc:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZZ11__vector_11E11controlPins>
    20d0:	90 73       	andi	r25, 0x30	; 48
    20d2:	92 95       	swap	r25
    20d4:	9f 70       	andi	r25, 0x0F	; 15
    20d6:	8c 7f       	andi	r24, 0xFC	; 252
    20d8:	89 2b       	or	r24, r25
    20da:	8b b9       	out	0x0b, r24	; 11
    20dc:	17 c0       	rjmp	.+46     	; 0x210c <__vector_11+0xb2>
    20de:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <_ZZ11__vector_11E5index>
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	9e 0f       	add	r25, r30
    20e6:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <_ZZ11__vector_11E5index>
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	e3 5a       	subi	r30, 0xA3	; 163
    20ee:	fa 4f       	sbci	r31, 0xFA	; 250
    20f0:	80 81       	ld	r24, Z
    20f2:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ11__vector_11E11controlPins>
    20f6:	90 32       	cpi	r25, 0x20	; 32
    20f8:	58 f6       	brcc	.-106    	; 0x2090 <__vector_11+0x36>
    20fa:	cc cf       	rjmp	.-104    	; 0x2094 <__vector_11+0x3a>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ11__vector_11E5index>
    2102:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_dataModulation>
    2106:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ11__vector_11E11controlPins>
    210a:	c4 cf       	rjmp	.-120    	; 0x2094 <__vector_11+0x3a>
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	9f 91       	pop	r25
    2112:	8f 91       	pop	r24
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 90       	pop	r0
    211a:	1f 90       	pop	r1
    211c:	18 95       	reti

0000211e <_Z23clockConfigurationCheckv>:
    211e:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    2122:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    2126:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    212a:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    212e:	81 15       	cp	r24, r1
    2130:	96 46       	sbci	r25, 0x66	; 102
    2132:	ae 4e       	sbci	r26, 0xEE	; 238
    2134:	bf 45       	sbci	r27, 0x5F	; 95
    2136:	08 f4       	brcc	.+2      	; 0x213a <_Z23clockConfigurationCheckv+0x1c>
    2138:	67 c0       	rjmp	.+206    	; 0x2208 <_Z23clockConfigurationCheckv+0xea>
    213a:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    213e:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    2142:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    2146:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    214a:	81 15       	cp	r24, r1
    214c:	96 46       	sbci	r25, 0x66	; 102
    214e:	ae 4e       	sbci	r26, 0xEE	; 238
    2150:	bf 45       	sbci	r27, 0x5F	; 95
    2152:	08 f4       	brcc	.+2      	; 0x2156 <_Z23clockConfigurationCheckv+0x38>
    2154:	5b c0       	rjmp	.+182    	; 0x220c <_Z23clockConfigurationCheckv+0xee>
    2156:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    215a:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    215e:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    2162:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    2166:	81 15       	cp	r24, r1
    2168:	96 46       	sbci	r25, 0x66	; 102
    216a:	ae 4e       	sbci	r26, 0xEE	; 238
    216c:	bf 45       	sbci	r27, 0x5F	; 95
    216e:	08 f4       	brcc	.+2      	; 0x2172 <_Z23clockConfigurationCheckv+0x54>
    2170:	4f c0       	rjmp	.+158    	; 0x2210 <_Z23clockConfigurationCheckv+0xf2>
    2172:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_event_finish_epoch>
    2176:	50 91 83 05 	lds	r21, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    217a:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    217e:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    2182:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    2186:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    218a:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    218e:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    2192:	84 17       	cp	r24, r20
    2194:	95 07       	cpc	r25, r21
    2196:	a6 07       	cpc	r26, r22
    2198:	b7 07       	cpc	r27, r23
    219a:	e0 f5       	brcc	.+120    	; 0x2214 <_Z23clockConfigurationCheckv+0xf6>
    219c:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_current_epoch>
    21a0:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <g_current_epoch+0x1>
    21a4:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <g_current_epoch+0x2>
    21a8:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <g_current_epoch+0x3>
    21ac:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    21b0:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    21b4:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    21b8:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    21bc:	84 17       	cp	r24, r20
    21be:	95 07       	cpc	r25, r21
    21c0:	a6 07       	cpc	r26, r22
    21c2:	b7 07       	cpc	r27, r23
    21c4:	48 f1       	brcs	.+82     	; 0x2218 <_Z23clockConfigurationCheckv+0xfa>
    21c6:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_current_epoch>
    21ca:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <g_current_epoch+0x1>
    21ce:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <g_current_epoch+0x2>
    21d2:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <g_current_epoch+0x3>
    21d6:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    21da:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    21de:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    21e2:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    21e6:	84 17       	cp	r24, r20
    21e8:	95 07       	cpc	r25, r21
    21ea:	a6 07       	cpc	r26, r22
    21ec:	b7 07       	cpc	r27, r23
    21ee:	30 f4       	brcc	.+12     	; 0x21fc <_Z23clockConfigurationCheckv+0xde>
    21f0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    21f4:	81 11       	cpse	r24, r1
    21f6:	12 c0       	rjmp	.+36     	; 0x221c <_Z23clockConfigurationCheckv+0xfe>
    21f8:	85 e0       	ldi	r24, 0x05	; 5
    21fa:	08 95       	ret
    21fc:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_use_rtc_for_startstop>
    2200:	88 23       	and	r24, r24
    2202:	71 f0       	breq	.+28     	; 0x2220 <_Z23clockConfigurationCheckv+0x102>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	08 95       	ret
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	08 95       	ret
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	08 95       	ret
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	08 95       	ret
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	08 95       	ret
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	08 95       	ret
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	08 95       	ret
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	08 95       	ret

00002224 <_Z13sendMorseToneh>:
    2224:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <g_fox_tone_offset>
    2228:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <g_fox_tone_offset+0x1>
    222c:	9f e2       	ldi	r25, 0x2F	; 47
    222e:	92 1b       	sub	r25, r18
    2230:	97 bd       	out	0x27, r25	; 39
    2232:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_audio_tone_state>
    2236:	08 95       	ret

00002238 <__vector_8>:
    2238:	1f 92       	push	r1
    223a:	0f 92       	push	r0
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	0f 92       	push	r0
    2240:	11 24       	eor	r1, r1
    2242:	2f 93       	push	r18
    2244:	3f 93       	push	r19
    2246:	4f 93       	push	r20
    2248:	5f 93       	push	r21
    224a:	6f 93       	push	r22
    224c:	7f 93       	push	r23
    224e:	8f 93       	push	r24
    2250:	9f 93       	push	r25
    2252:	af 93       	push	r26
    2254:	bf 93       	push	r27
    2256:	ef 93       	push	r30
    2258:	ff 93       	push	r31
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	00 d0       	rcall	.+0      	; 0x2260 <__vector_8+0x28>
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <g_tick_count>
    2268:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <g_tick_count+0x1>
    226c:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <g_tick_count+0x2>
    2270:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <g_tick_count+0x3>
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	a1 1d       	adc	r26, r1
    2278:	b1 1d       	adc	r27, r1
    227a:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <g_tick_count>
    227e:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <g_tick_count+0x1>
    2282:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <g_tick_count+0x2>
    2286:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <g_tick_count+0x3>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	1a 82       	std	Y+2, r1	; 0x02
    2290:	84 e0       	ldi	r24, 0x04	; 4
    2292:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    2296:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_reset_button_held>
    229a:	99 23       	and	r25, r25
    229c:	09 f4       	brne	.+2      	; 0x22a0 <__vector_8+0x68>
    229e:	35 c1       	rjmp	.+618    	; 0x250a <__vector_8+0x2d2>
    22a0:	88 23       	and	r24, r24
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <__vector_8+0x6e>
    22a4:	35 c1       	rjmp	.+618    	; 0x2510 <__vector_8+0x2d8>
    22a6:	31 c1       	rjmp	.+610    	; 0x250a <__vector_8+0x2d2>
    22a8:	44 e0       	ldi	r20, 0x04	; 4
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	40 93 93 05 	sts	0x0593, r20	; 0x800593 <g_seconds_since_powerup>
    22b4:	50 93 94 05 	sts	0x0594, r21	; 0x800594 <g_seconds_since_powerup+0x1>
    22b8:	60 93 95 05 	sts	0x0595, r22	; 0x800595 <g_seconds_since_powerup+0x2>
    22bc:	70 93 96 05 	sts	0x0596, r23	; 0x800596 <g_seconds_since_powerup+0x3>
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <g_perform_EEPROM_reset>
    22c6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ10__vector_8E15holdButtonState>
    22ca:	89 13       	cpse	r24, r25
    22cc:	25 c0       	rjmp	.+74     	; 0x2318 <__vector_8+0xe0>
    22ce:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_sync_pin_timer>
    22d2:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_sync_pin_timer+0x1>
    22d6:	2b 3b       	cpi	r18, 0xBB	; 187
    22d8:	30 41       	sbci	r19, 0x10	; 16
    22da:	54 f4       	brge	.+20     	; 0x22f0 <__vector_8+0xb8>
    22dc:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_sync_pin_timer>
    22e0:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_sync_pin_timer+0x1>
    22e4:	2f 5f       	subi	r18, 0xFF	; 255
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	30 93 4d 05 	sts	0x054D, r19	; 0x80054d <g_sync_pin_timer+0x1>
    22ec:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <g_sync_pin_timer>
    22f0:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_sync_pin_timer>
    22f4:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_sync_pin_timer+0x1>
    22f8:	20 39       	cpi	r18, 0x90	; 144
    22fa:	31 05       	cpc	r19, r1
    22fc:	9c f0       	brlt	.+38     	; 0x2324 <__vector_8+0xec>
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	09 f4       	brne	.+2      	; 0x2304 <__vector_8+0xcc>
    2302:	15 c1       	rjmp	.+554    	; 0x252e <__vector_8+0x2f6>
    2304:	92 e0       	ldi	r25, 0x02	; 2
    2306:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <g_sync_pin_stable>
    230a:	81 11       	cpse	r24, r1
    230c:	0b c0       	rjmp	.+22     	; 0x2324 <__vector_8+0xec>
    230e:	61 e0       	ldi	r22, 0x01	; 1
    2310:	8d e0       	ldi	r24, 0x0D	; 13
    2312:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2316:	06 c0       	rjmp	.+12     	; 0x2324 <__vector_8+0xec>
    2318:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_ZZ10__vector_8E15holdButtonState>
    231c:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_sync_pin_timer+0x1>
    2320:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_sync_pin_timer>
    2324:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    2328:	81 11       	cpse	r24, r1
    232a:	0b c1       	rjmp	.+534    	; 0x2542 <__vector_8+0x30a>
    232c:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_on_the_air>
    2330:	81 11       	cpse	r24, r1
    2332:	01 c1       	rjmp	.+514    	; 0x2536 <__vector_8+0x2fe>
    2334:	06 c1       	rjmp	.+524    	; 0x2542 <__vector_8+0x30a>
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	88 e0       	ldi	r24, 0x08	; 8
    233a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    233e:	84 e9       	ldi	r24, 0x94	; 148
    2340:	95 e0       	ldi	r25, 0x05	; 5
    2342:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10__vector_8E9ptt_delay+0x1>
    2346:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10__vector_8E9ptt_delay>
    234a:	01 c1       	rjmp	.+514    	; 0x254e <__vector_8+0x316>
    234c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10__vector_8E9ptt_delay>
    2350:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10__vector_8E9ptt_delay+0x1>
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	31 f0       	breq	.+12     	; 0x2364 <__vector_8+0x12c>
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10__vector_8E9ptt_delay+0x1>
    235e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10__vector_8E9ptt_delay>
    2362:	f5 c0       	rjmp	.+490    	; 0x254e <__vector_8+0x316>
    2364:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10__vector_8E7codeInc>
    2368:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	e1 f1       	breq	.+120    	; 0x23e8 <__vector_8+0x1b0>
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    2376:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E7codeInc>
    237a:	89 2b       	or	r24, r25
    237c:	09 f0       	breq	.+2      	; 0x2380 <__vector_8+0x148>
    237e:	e7 c0       	rjmp	.+462    	; 0x254e <__vector_8+0x316>
    2380:	ae 01       	movw	r20, r28
    2382:	4e 5f       	subi	r20, 0xFE	; 254
    2384:	5f 4f       	sbci	r21, 0xFF	; 255
    2386:	be 01       	movw	r22, r28
    2388:	6f 5f       	subi	r22, 0xFF	; 255
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
    2394:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ10__vector_8E3key>
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	81 11       	cpse	r24, r1
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <__vector_8+0x18e>
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	88 23       	and	r24, r24
    23a2:	89 f0       	breq	.+34     	; 0x23c6 <__vector_8+0x18e>
    23a4:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10__vector_8E3key>
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_callsign_sent>
    23ae:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_use_ptt_periodic_reset>
    23b2:	88 23       	and	r24, r24
    23b4:	41 f0       	breq	.+16     	; 0x23c6 <__vector_8+0x18e>
    23b6:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <g_on_the_air>
    23ba:	84 e9       	ldi	r24, 0x94	; 148
    23bc:	95 e0       	ldi	r25, 0x05	; 5
    23be:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <_ZZ10__vector_8E11ptt_dropped+0x1>
    23c2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ10__vector_8E11ptt_dropped>
    23c6:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    23ca:	8d e0       	ldi	r24, 0x0D	; 13
    23cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    23d0:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    23d4:	8a e0       	ldi	r24, 0x0A	; 10
    23d6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    23da:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    23de:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_sendAMmodulation>
    23e2:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z13sendMorseToneh>
    23e6:	b3 c0       	rjmp	.+358    	; 0x254e <__vector_8+0x316>
    23e8:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <g_sync_pin_stable>
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	29 f0       	breq	.+10     	; 0x23fa <__vector_8+0x1c2>
    23f0:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    23f4:	8d e0       	ldi	r24, 0x0D	; 13
    23f6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    23fa:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    23fe:	8a e0       	ldi	r24, 0x0A	; 10
    2400:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2404:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    2408:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_sendAMmodulation>
    240c:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z13sendMorseToneh>
    2410:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_code_throttle>
    2414:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_code_throttle+0x1>
    2418:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    241c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E7codeInc>
    2420:	96 c0       	rjmp	.+300    	; 0x254e <__vector_8+0x316>
    2422:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10__vector_8E9ptt_delay>
    2426:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10__vector_8E9ptt_delay+0x1>
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	39 f4       	brne	.+14     	; 0x243c <__vector_8+0x204>
    242e:	84 e6       	ldi	r24, 0x64	; 100
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10__vector_8E9ptt_delay+0x1>
    2436:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10__vector_8E9ptt_delay>
    243a:	1c c0       	rjmp	.+56     	; 0x2474 <__vector_8+0x23c>
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10__vector_8E9ptt_delay+0x1>
    2442:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10__vector_8E9ptt_delay>
    2446:	89 2b       	or	r24, r25
    2448:	a9 f4       	brne	.+42     	; 0x2474 <__vector_8+0x23c>
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	88 e0       	ldi	r24, 0x08	; 8
    244e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    2452:	10 c0       	rjmp	.+32     	; 0x2474 <__vector_8+0x23c>
    2454:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ10__vector_8E11ptt_dropped>
    2458:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZZ10__vector_8E11ptt_dropped+0x1>
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	51 f0       	breq	.+20     	; 0x2474 <__vector_8+0x23c>
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <_ZZ10__vector_8E11ptt_dropped+0x1>
    2466:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ10__vector_8E11ptt_dropped>
    246a:	89 2b       	or	r24, r25
    246c:	19 f4       	brne	.+6      	; 0x2474 <__vector_8+0x23c>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_on_the_air>
    2474:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <g_LED_enunciating>
    2478:	88 23       	and	r24, r24
    247a:	79 f1       	breq	.+94     	; 0x24da <__vector_8+0x2a2>
    247c:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10__vector_8E7codeInc>
    2480:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	01 f1       	breq	.+64     	; 0x24c8 <__vector_8+0x290>
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    248e:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E7codeInc>
    2492:	89 2b       	or	r24, r25
    2494:	81 f5       	brne	.+96     	; 0x24f6 <__vector_8+0x2be>
    2496:	ae 01       	movw	r20, r28
    2498:	4e 5f       	subi	r20, 0xFE	; 254
    249a:	5f 4f       	sbci	r21, 0xFF	; 255
    249c:	be 01       	movw	r22, r28
    249e:	6f 5f       	subi	r22, 0xFF	; 255
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
    24aa:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ10__vector_8E3key>
    24ae:	68 2f       	mov	r22, r24
    24b0:	8d e0       	ldi	r24, 0x0D	; 13
    24b2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    24b6:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_code_throttle>
    24ba:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_code_throttle+0x1>
    24be:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    24c2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E7codeInc>
    24c6:	17 c0       	rjmp	.+46     	; 0x24f6 <__vector_8+0x2be>
    24c8:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_code_throttle>
    24cc:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_code_throttle+0x1>
    24d0:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10__vector_8E7codeInc+0x1>
    24d4:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E7codeInc>
    24d8:	0e c0       	rjmp	.+28     	; 0x24f6 <__vector_8+0x2be>
    24da:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ10__vector_8E3key>
    24de:	88 23       	and	r24, r24
    24e0:	51 f0       	breq	.+20     	; 0x24f6 <__vector_8+0x2be>
    24e2:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10__vector_8E3key>
    24e6:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <g_sync_pin_stable>
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	21 f0       	breq	.+8      	; 0x24f6 <__vector_8+0x2be>
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	8d e0       	ldi	r24, 0x0D	; 13
    24f2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	8a e0       	ldi	r24, 0x0A	; 10
    24fa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    24fe:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <g_sendAMmodulation>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z13sendMorseToneh>
    2508:	22 c0       	rjmp	.+68     	; 0x254e <__vector_8+0x316>
    250a:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <g_reset_button_held>
    250e:	db ce       	rjmp	.-586    	; 0x22c6 <__vector_8+0x8e>
    2510:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <g_seconds_since_powerup>
    2514:	50 91 94 05 	lds	r21, 0x0594	; 0x800594 <g_seconds_since_powerup+0x1>
    2518:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <g_seconds_since_powerup+0x2>
    251c:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <g_seconds_since_powerup+0x3>
    2520:	43 30       	cpi	r20, 0x03	; 3
    2522:	51 05       	cpc	r21, r1
    2524:	61 05       	cpc	r22, r1
    2526:	71 05       	cpc	r23, r1
    2528:	09 f0       	breq	.+2      	; 0x252c <__vector_8+0x2f4>
    252a:	cd ce       	rjmp	.-614    	; 0x22c6 <__vector_8+0x8e>
    252c:	bd ce       	rjmp	.-646    	; 0x22a8 <__vector_8+0x70>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <g_sync_pin_stable>
    2534:	f7 ce       	rjmp	.-530    	; 0x2324 <__vector_8+0xec>
    2536:	88 e0       	ldi	r24, 0x08	; 8
    2538:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    253c:	81 11       	cpse	r24, r1
    253e:	06 cf       	rjmp	.-500    	; 0x234c <__vector_8+0x114>
    2540:	fa ce       	rjmp	.-524    	; 0x2336 <__vector_8+0xfe>
    2542:	88 e0       	ldi	r24, 0x08	; 8
    2544:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    2548:	81 11       	cpse	r24, r1
    254a:	6b cf       	rjmp	.-298    	; 0x2422 <__vector_8+0x1ea>
    254c:	83 cf       	rjmp	.-250    	; 0x2454 <__vector_8+0x21c>
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	ff 91       	pop	r31
    2558:	ef 91       	pop	r30
    255a:	bf 91       	pop	r27
    255c:	af 91       	pop	r26
    255e:	9f 91       	pop	r25
    2560:	8f 91       	pop	r24
    2562:	7f 91       	pop	r23
    2564:	6f 91       	pop	r22
    2566:	5f 91       	pop	r21
    2568:	4f 91       	pop	r20
    256a:	3f 91       	pop	r19
    256c:	2f 91       	pop	r18
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


BOOL setupForFox(Fox_t* fox, EventAction_t action)
{
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 d0       	rcall	.+0      	; 0x2580 <_Z11setupForFoxP5Fox_t13EventAction_t+0x8>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	16 2f       	mov	r17, r22
	BOOL timedEventInProgress = FALSE;

	if(fox)
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	31 f0       	breq	.+12     	; 0x2596 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    258a:	fc 01       	movw	r30, r24
    258c:	80 81       	ld	r24, Z
    258e:	82 31       	cpi	r24, 0x12	; 18
    2590:	11 f0       	breq	.+4      	; 0x2596 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    2592:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_fox>
		}
	}

	g_current_epoch = rv3028_get_epoch();
    2596:	0e 94 23 29 	call	0x5246	; 0x5246 <_Z16rv3028_get_epochv>
    259a:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <g_current_epoch>
    259e:	70 93 8b 05 	sts	0x058B, r23	; 0x80058b <g_current_epoch+0x1>
    25a2:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <g_current_epoch+0x2>
    25a6:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <g_current_epoch+0x3>
	g_use_ptt_periodic_reset = FALSE;
    25aa:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_use_ptt_periodic_reset>

	cli();
    25ae:	f8 94       	cli

	switch(g_fox)
    25b0:	e0 91 92 05 	lds	r30, 0x0592	; 0x800592 <g_fox>
    25b4:	8e 2f       	mov	r24, r30
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	fc 01       	movw	r30, r24
    25ba:	31 97       	sbiw	r30, 0x01	; 1
    25bc:	e3 31       	cpi	r30, 0x13	; 19
    25be:	f1 05       	cpc	r31, r1
    25c0:	08 f0       	brcs	.+2      	; 0x25c4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4c>
    25c2:	86 c0       	rjmp	.+268    	; 0x26d0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x158>
    25c4:	ed 57       	subi	r30, 0x7D	; 125
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval = 60;
    25cc:	8c e3       	ldi	r24, 0x3C	; 60
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_on_air_interval+0x1>
    25d4:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_on_air_interval>
			g_cycle_period_seconds = 300;
    25d8:	8c e2       	ldi	r24, 0x2C	; 44
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_cycle_period_seconds+0x1>
    25e0:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    25e4:	25 e0       	ldi	r18, 0x05	; 5
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	30 93 56 05 	sts	0x0556, r19	; 0x800556 <g_number_of_foxes+0x1>
    25ec:	20 93 55 05 	sts	0x0555, r18	; 0x800555 <g_number_of_foxes>
			g_fox_id_offset = 0;
    25f0:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_fox_id_offset+0x1>
    25f4:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    25f8:	28 e0       	ldi	r18, 0x08	; 8
    25fa:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <g_pattern_codespeed>
			g_id_interval = 300;
    25fe:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_id_interval+0x1>
    2602:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_id_interval>
		}
		break;
    2606:	92 c0       	rjmp	.+292    	; 0x272c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b4>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval = 12;
    2608:	8c e0       	ldi	r24, 0x0C	; 12
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_on_air_interval+0x1>
    2610:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_on_air_interval>
			g_cycle_period_seconds = 60;
    2614:	8c e3       	ldi	r24, 0x3C	; 60
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_cycle_period_seconds+0x1>
    261c:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2620:	85 e0       	ldi	r24, 0x05	; 5
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <g_number_of_foxes+0x1>
    2628:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    262c:	88 e0       	ldi	r24, 0x08	; 8
    262e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1 - 1;
    2632:	87 e0       	ldi	r24, 0x07	; 7
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_fox_id_offset+0x1>
    263a:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_fox_id_offset>
			g_id_interval = 600;
    263e:	88 e5       	ldi	r24, 0x58	; 88
    2640:	92 e0       	ldi	r25, 0x02	; 2
    2642:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_id_interval+0x1>
    2646:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_id_interval>
		}
		break;
    264a:	70 c0       	rjmp	.+224    	; 0x272c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b4>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval = 12;
    264c:	8c e0       	ldi	r24, 0x0C	; 12
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_on_air_interval+0x1>
    2654:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_on_air_interval>
			g_cycle_period_seconds = 60;
    2658:	2c e3       	ldi	r18, 0x3C	; 60
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	30 93 5a 05 	sts	0x055A, r19	; 0x80055a <g_cycle_period_seconds+0x1>
    2660:	20 93 59 05 	sts	0x0559, r18	; 0x800559 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2664:	25 e0       	ldi	r18, 0x05	; 5
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	30 93 56 05 	sts	0x0556, r19	; 0x800556 <g_number_of_foxes+0x1>
    266c:	20 93 55 05 	sts	0x0555, r18	; 0x800555 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    2670:	2f e0       	ldi	r18, 0x0F	; 15
    2672:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    2676:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_fox_id_offset+0x1>
    267a:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_fox_id_offset>
			g_id_interval = 600;
    267e:	88 e5       	ldi	r24, 0x58	; 88
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_id_interval+0x1>
    2686:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_id_interval>
		}
		break;
    268a:	50 c0       	rjmp	.+160    	; 0x272c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b4>

		case REPORT_BATTERY:
		{
			g_on_air_interval = 30;
    268c:	8e e1       	ldi	r24, 0x1E	; 30
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_on_air_interval+0x1>
    2694:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_on_air_interval>
			g_cycle_period_seconds = 60;
    2698:	8c e3       	ldi	r24, 0x3C	; 60
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_cycle_period_seconds+0x1>
    26a0:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_cycle_period_seconds>
			g_number_of_foxes = 2;
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <g_number_of_foxes+0x1>
    26ac:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    26b0:	88 e0       	ldi	r24, 0x08	; 8
    26b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_pattern_codespeed>
			g_fox_id_offset = REPORT_BATTERY - 1;
    26b6:	82 e1       	ldi	r24, 0x12	; 18
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_fox_id_offset+0x1>
    26be:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_fox_id_offset>
			g_id_interval = 15;
    26c2:	8f e0       	ldi	r24, 0x0F	; 15
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_id_interval+0x1>
    26ca:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_id_interval>
		}
		break;
    26ce:	2e c0       	rjmp	.+92     	; 0x272c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b4>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    26d0:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <g_ptt_periodic_reset_enabled>
    26d4:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_use_ptt_periodic_reset>
			g_number_of_foxes = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <g_number_of_foxes+0x1>
    26e0:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    26e4:	88 e0       	ldi	r24, 0x08	; 8
    26e6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_pattern_codespeed>
			g_id_interval = g_ptt_periodic_reset_enabled ? 60:600;
    26ea:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <g_ptt_periodic_reset_enabled>
    26ee:	81 11       	cpse	r24, r1
    26f0:	03 c0       	rjmp	.+6      	; 0x26f8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x180>
    26f2:	88 e5       	ldi	r24, 0x58	; 88
    26f4:	92 e0       	ldi	r25, 0x02	; 2
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <_Z11setupForFoxP5Fox_t13EventAction_t+0x184>
    26f8:	8c e3       	ldi	r24, 0x3C	; 60
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_id_interval+0x1>
    2700:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_id_interval>
			g_on_air_interval = g_id_interval;
    2704:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_id_interval>
    2708:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_id_interval+0x1>
    270c:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_on_air_interval+0x1>
    2710:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_on_air_interval>
			g_fox_id_offset = 0;
    2714:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_fox_id_offset+0x1>
    2718:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_fox_id_offset>
			g_cycle_period_seconds = g_id_interval;
    271c:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_id_interval>
    2720:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_id_interval+0x1>
    2724:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <g_cycle_period_seconds+0x1>
    2728:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_cycle_period_seconds>
		}
		break;
	}

	if(action == START_NOTHING)
    272c:	11 11       	cpse	r17, r1
    272e:	06 c0       	rjmp	.+12     	; 0x273c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1c4>
	{
		g_use_rtc_for_startstop = FALSE;
    2730:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_transmissions_disabled>
    273a:	d9 c0       	rjmp	.+434    	; 0x28ee <_Z11setupForFoxP5Fox_t13EventAction_t+0x376>
	}
	else if(action == START_EVENT_NOW)
    273c:	11 30       	cpi	r17, 0x01	; 1
    273e:	c1 f4       	brne	.+48     	; 0x2770 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f8>
	{
		g_fox_counter = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_counter+0x1>
    2748:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_counter>
		g_seconds_since_sync = 0;   /* Total elapsed time since synchronization */
    274c:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_seconds_since_sync>
    2750:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_seconds_since_sync+0x1>
    2754:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_seconds_since_sync+0x2>
    2758:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_seconds_since_sync+0x3>
		g_seconds_into_cycle = 0;
    275c:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_seconds_into_cycle+0x1>
    2760:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_seconds_into_cycle>
		g_use_rtc_for_startstop = FALSE;
    2764:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    2768:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_transmissions_disabled>
#endif  /* #if !INIT_EEPROM_ONLY */


BOOL setupForFox(Fox_t* fox, EventAction_t action)
{
	BOOL timedEventInProgress = FALSE;
    276c:	10 e0       	ldi	r17, 0x00	; 0
    276e:	bf c0       	rjmp	.+382    	; 0x28ee <_Z11setupForFoxP5Fox_t13EventAction_t+0x376>
		g_seconds_since_sync = 0;   /* Total elapsed time since synchronization */
		g_seconds_into_cycle = 0;
		g_use_rtc_for_startstop = FALSE;
		g_transmissions_disabled = FALSE;
	}
	else if(action == START_TRANSMISSIONS_NOW)        /* Immediately start transmitting, regardless RTC or time slot */
    2770:	12 30       	cpi	r17, 0x02	; 2
    2772:	a9 f5       	brne	.+106    	; 0x27de <_Z11setupForFoxP5Fox_t13EventAction_t+0x266>
	{
		g_fox_counter = g_fox - g_fox_id_offset;
    2774:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    2778:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_fox_id_offset>
    277c:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <g_fox_id_offset+0x1>
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	82 1b       	sub	r24, r18
    2784:	93 0b       	sbc	r25, r19
    2786:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_counter+0x1>
    278a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_counter>
		g_seconds_since_sync = g_fox_counter * g_on_air_interval;   /* Total elapsed time since start of event */
    278e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <g_fox_counter>
    2792:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <g_fox_counter+0x1>
    2796:	20 91 5b 05 	lds	r18, 0x055B	; 0x80055b <g_on_air_interval>
    279a:	30 91 5c 05 	lds	r19, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    279e:	42 9f       	mul	r20, r18
    27a0:	c0 01       	movw	r24, r0
    27a2:	43 9f       	mul	r20, r19
    27a4:	90 0d       	add	r25, r0
    27a6:	52 9f       	mul	r21, r18
    27a8:	90 0d       	add	r25, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	09 2e       	mov	r0, r25
    27ae:	00 0c       	add	r0, r0
    27b0:	aa 0b       	sbc	r26, r26
    27b2:	bb 0b       	sbc	r27, r27
    27b4:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_seconds_since_sync>
    27b8:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <g_seconds_since_sync+0x1>
    27bc:	a0 93 99 05 	sts	0x0599, r26	; 0x800599 <g_seconds_since_sync+0x2>
    27c0:	b0 93 9a 05 	sts	0x059A, r27	; 0x80059a <g_seconds_since_sync+0x3>
		g_seconds_into_cycle = 0;
    27c4:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_seconds_into_cycle+0x1>
    27c8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_seconds_into_cycle>
		g_use_rtc_for_startstop = FALSE;
    27cc:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    27d0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_transmissions_disabled>
		g_initialize_fox_transmissions = START_TRANSMISSIONS_NOW;
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_initialize_fox_transmissions>
#endif  /* #if !INIT_EEPROM_ONLY */


BOOL setupForFox(Fox_t* fox, EventAction_t action)
{
	BOOL timedEventInProgress = FALSE;
    27da:	10 e0       	ldi	r17, 0x00	; 0
    27dc:	88 c0       	rjmp	.+272    	; 0x28ee <_Z11setupForFoxP5Fox_t13EventAction_t+0x376>
		g_transmissions_disabled = FALSE;
		g_initialize_fox_transmissions = START_TRANSMISSIONS_NOW;
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    27de:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
    27e2:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    27e6:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    27ea:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    27ee:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    27f2:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    27f6:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    27fa:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    27fe:	48 17       	cp	r20, r24
    2800:	59 07       	cpc	r21, r25
    2802:	6a 07       	cpc	r22, r26
    2804:	7b 07       	cpc	r23, r27
    2806:	08 f0       	brcs	.+2      	; 0x280a <_Z11setupForFoxP5Fox_t13EventAction_t+0x292>
    2808:	5a c0       	rjmp	.+180    	; 0x28be <_Z11setupForFoxP5Fox_t13EventAction_t+0x346>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    280a:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    280e:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    2812:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    2816:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    281a:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
    281e:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    2822:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    2826:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    282a:	84 1b       	sub	r24, r20
    282c:	95 0b       	sbc	r25, r21
    282e:	a6 0b       	sbc	r26, r22
    2830:	b7 0b       	sbc	r27, r23
    2832:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_seconds_since_sync>
    2836:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <g_seconds_since_sync+0x1>
    283a:	a0 93 99 05 	sts	0x0599, r26	; 0x800599 <g_seconds_since_sync+0x2>
    283e:	b0 93 9a 05 	sts	0x059A, r27	; 0x80059a <g_seconds_since_sync+0x3>
			g_seconds_into_cycle = g_seconds_since_sync % g_cycle_period_seconds;
    2842:	60 91 97 05 	lds	r22, 0x0597	; 0x800597 <g_seconds_since_sync>
    2846:	70 91 98 05 	lds	r23, 0x0598	; 0x800598 <g_seconds_since_sync+0x1>
    284a:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <g_seconds_since_sync+0x2>
    284e:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <g_seconds_since_sync+0x3>
    2852:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <g_cycle_period_seconds>
    2856:	30 91 5a 05 	lds	r19, 0x055A	; 0x80055a <g_cycle_period_seconds+0x1>
    285a:	03 2e       	mov	r0, r19
    285c:	00 0c       	add	r0, r0
    285e:	44 0b       	sbc	r20, r20
    2860:	55 0b       	sbc	r21, r21
    2862:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <__divmodsi4>
    2866:	70 93 58 05 	sts	0x0558, r23	; 0x800558 <g_seconds_into_cycle+0x1>
    286a:	60 93 57 05 	sts	0x0557, r22	; 0x800557 <g_seconds_into_cycle>
			g_fox_counter = CLAMP(1, 1 + (g_seconds_into_cycle / g_on_air_interval), g_number_of_foxes);
    286e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_seconds_into_cycle>
    2872:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_seconds_into_cycle+0x1>
    2876:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_on_air_interval>
    287a:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_on_air_interval+0x1>
    287e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    2882:	6f 5f       	subi	r22, 0xFF	; 255
    2884:	7f 4f       	sbci	r23, 0xFF	; 255
    2886:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_number_of_foxes>
    288a:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <g_number_of_foxes+0x1>
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	86 17       	cp	r24, r22
    2898:	97 07       	cpc	r25, r23
    289a:	34 f0       	brlt	.+12     	; 0x28a8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x330>
    289c:	16 16       	cp	r1, r22
    289e:	17 06       	cpc	r1, r23
    28a0:	2c f0       	brlt	.+10     	; 0x28ac <_Z11setupForFoxP5Fox_t13EventAction_t+0x334>
    28a2:	61 e0       	ldi	r22, 0x01	; 1
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <_Z11setupForFoxP5Fox_t13EventAction_t+0x334>
    28a8:	69 81       	ldd	r22, Y+1	; 0x01
    28aa:	7a 81       	ldd	r23, Y+2	; 0x02
    28ac:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_fox_counter+0x1>
    28b0:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_fox_counter>
			timedEventInProgress = TRUE;
			g_initialize_fox_transmissions = START_EVENT_WITH_STARTFINISH_TIMES;
    28b4:	83 e0       	ldi	r24, 0x03	; 3
    28b6:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_initialize_fox_transmissions>
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
			g_seconds_into_cycle = g_seconds_since_sync % g_cycle_period_seconds;
			g_fox_counter = CLAMP(1, 1 + (g_seconds_into_cycle / g_on_air_interval), g_number_of_foxes);
			timedEventInProgress = TRUE;
    28ba:	11 e0       	ldi	r17, 0x01	; 1
    28bc:	13 c0       	rjmp	.+38     	; 0x28e4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x36c>
			g_initialize_fox_transmissions = START_EVENT_WITH_STARTFINISH_TIMES;
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    28be:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_seconds_since_sync>
    28c2:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_seconds_since_sync+0x1>
    28c6:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_seconds_since_sync+0x2>
    28ca:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_counter+0x1>
    28d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_counter>
			g_seconds_into_cycle = 0;
    28da:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_seconds_into_cycle+0x1>
    28de:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_seconds_into_cycle>
#endif  /* #if !INIT_EEPROM_ONLY */


BOOL setupForFox(Fox_t* fox, EventAction_t action)
{
	BOOL timedEventInProgress = FALSE;
    28e2:	10 e0       	ldi	r17, 0x00	; 0
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
			g_fox_counter = 1;
			g_seconds_into_cycle = 0;
		}

		g_use_rtc_for_startstop = TRUE;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    28ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_transmissions_disabled>
	}

	g_fox_tone_offset = g_fox_counter;
    28ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_fox_counter>
    28f2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_fox_counter+0x1>
    28f6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_tone_offset+0x1>
    28fa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_tone_offset>

	sendMorseTone(OFF);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z13sendMorseToneh>
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    2904:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <g_code_throttle+0x1>
    2908:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_code_throttle>
	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    290c:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2910:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_config_error>
	digitalWrite(PIN_LED2, OFF);            /*  LED Off - in case it was left on */
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	8d e0       	ldi	r24, 0x0D	; 13
    2918:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	8a e0       	ldi	r24, 0x0A	; 10
    2920:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    2924:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    2928:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    292c:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_config_error>

	sei();
    2930:	78 94       	sei

	return(timedEventInProgress);
}
    2932:	81 2f       	mov	r24, r17
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	08 95       	ret

00002940 <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;
    2940:	8f ef       	ldi	r24, 0xFF	; 255
    2942:	9f ef       	ldi	r25, 0xFF	; 255

	while((ADCSRA & (1 << ADSC)) && c)
    2944:	ea e7       	ldi	r30, 0x7A	; 122
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	20 81       	ld	r18, Z
    294a:	26 ff       	sbrs	r18, 6
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <_Z7readADCv+0x16>
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	11 f0       	breq	.+4      	; 0x2956 <_Z7readADCv+0x16>
	{
		c--;    /* Just wait for ADC to finish. */
    2952:	01 97       	sbiw	r24, 0x01	; 1
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;

	while((ADCSRA & (1 << ADSC)) && c)
    2954:	f9 cf       	rjmp	.-14     	; 0x2948 <_Z7readADCv+0x8>
	{
		c--;    /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    2956:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    295a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    295e:	ea e7       	ldi	r30, 0x7A	; 122
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	90 81       	ld	r25, Z
    2964:	90 64       	ori	r25, 0x40	; 64
    2966:	90 83       	st	Z, r25
	return( result);
}
    2968:	c9 01       	movw	r24, r18
    296a:	08 95       	ret

0000296c <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    2974:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_atmega_temp_calibration>
    2978:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <g_atmega_temp_calibration+0x1>
    297c:	07 2e       	mov	r0, r23
    297e:	00 0c       	add	r0, r0
    2980:	88 0b       	sbc	r24, r24
    2982:	99 0b       	sbc	r25, r25
    2984:	0e 94 0e 2c 	call	0x581c	; 0x581c <__floatsisf>
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__divsf3>
    2994:	06 2f       	mov	r16, r22
    2996:	17 2f       	mov	r17, r23
    2998:	d8 2f       	mov	r29, r24
    299a:	c9 2f       	mov	r28, r25
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	48 e4       	ldi	r20, 0x48	; 72
    29a2:	53 e4       	ldi	r21, 0x43	; 67
    29a4:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__gesf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	6c f0       	brlt	.+26     	; 0x29c6 <_Z7getTempv+0x5a>
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	48 e4       	ldi	r20, 0x48	; 72
    29b2:	53 ec       	ldi	r21, 0xC3	; 195
    29b4:	60 2f       	mov	r22, r16
    29b6:	71 2f       	mov	r23, r17
    29b8:	8d 2f       	mov	r24, r29
    29ba:	9c 2f       	mov	r25, r28
    29bc:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <__cmpsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	34 f0       	brlt	.+12     	; 0x29d0 <_Z7getTempv+0x64>
    29c4:	09 c0       	rjmp	.+18     	; 0x29d8 <_Z7getTempv+0x6c>
    29c6:	00 e0       	ldi	r16, 0x00	; 0
    29c8:	10 e0       	ldi	r17, 0x00	; 0
    29ca:	d8 e4       	ldi	r29, 0x48	; 72
    29cc:	c3 e4       	ldi	r28, 0x43	; 67
    29ce:	04 c0       	rjmp	.+8      	; 0x29d8 <_Z7getTempv+0x6c>
    29d0:	00 e0       	ldi	r16, 0x00	; 0
    29d2:	10 e0       	ldi	r17, 0x00	; 0
    29d4:	d8 e4       	ldi	r29, 0x48	; 72
    29d6:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    29d8:	0e 94 a0 14 	call	0x2940	; 0x2940 <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    29dc:	0e 94 a0 14 	call	0x2940	; 0x2940 <_Z7readADCv>
    29e0:	bc 01       	movw	r22, r24
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__floatunsisf>
    29ea:	2e ea       	ldi	r18, 0xAE	; 174
    29ec:	37 e2       	ldi	r19, 0x27	; 39
    29ee:	42 ea       	ldi	r20, 0xA2	; 162
    29f0:	53 e4       	ldi	r21, 0x43	; 67
    29f2:	0e 94 ed 2a 	call	0x55da	; 0x55da <__subsf3>
    29f6:	26 ef       	ldi	r18, 0xF6	; 246
    29f8:	38 e2       	ldi	r19, 0x28	; 40
    29fa:	4c e9       	ldi	r20, 0x9C	; 156
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__divsf3>
    2a02:	20 2f       	mov	r18, r16
    2a04:	31 2f       	mov	r19, r17
    2a06:	4d 2f       	mov	r20, r29
    2a08:	5c 2f       	mov	r21, r28
    2a0a:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <__addsf3>
    2a0e:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <round>
}
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	08 95       	ret

00002a1c <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    2a1c:	0e 94 a0 14 	call	0x2940	; 0x2940 <_Z7readADCv>
	uint16_t hold = readADC();
    2a20:	0e 94 a0 14 	call	0x2940	; 0x2940 <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    2a24:	9c 01       	movw	r18, r24
    2a26:	ad ee       	ldi	r26, 0xED	; 237
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	68 94       	set
    2a34:	16 f8       	bld	r1, 6
    2a36:	b6 95       	lsr	r27
    2a38:	a7 95       	ror	r26
    2a3a:	97 95       	ror	r25
    2a3c:	87 95       	ror	r24
    2a3e:	16 94       	lsr	r1
    2a40:	d1 f7       	brne	.-12     	; 0x2a36 <_Z10getVoltagev+0x1a>
	return(hold);
}
    2a42:	08 95       	ret

00002a44 <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    2a44:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    2a48:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    2a4c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    2a50:	81 11       	cpse	r24, r1
    2a52:	22 c0       	rjmp	.+68     	; 0x2a98 <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    2a54:	ec e7       	ldi	r30, 0x7C	; 124
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	86 60       	ori	r24, 0x06	; 6
    2a5c:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 6c       	ori	r24, 0xC0	; 192
    2a62:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    2a64:	80 81       	ld	r24, Z
    2a66:	80 62       	ori	r24, 0x20	; 32
    2a68:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
			ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
			ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    2a6a:	ea e7       	ldi	r30, 0x7A	; 122
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	86 60       	ori	r24, 0x06	; 6
    2a72:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    2a74:	80 81       	ld	r24, Z
    2a76:	80 62       	ori	r24, 0x20	; 32
    2a78:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 60       	ori	r24, 0x08	; 8
    2a7e:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    2a80:	80 81       	ld	r24, Z
    2a82:	80 68       	ori	r24, 0x80	; 128
    2a84:	80 83       	st	Z, r24

		if(enableSampling)
    2a86:	66 23       	and	r22, r22
    2a88:	21 f1       	breq	.+72     	; 0x2ad2 <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 60       	ori	r24, 0x08	; 8
    2a8e:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    2a90:	80 81       	ld	r24, Z
    2a92:	80 64       	ori	r24, 0x40	; 64
    2a94:	80 83       	st	Z, r24
    2a96:	08 95       	ret
		/* The internal temperature has to be used
		 * with the internal reference of 1.1V.
		 * Channel 8 can not be selected with
		 * the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    2a98:	ec e7       	ldi	r30, 0x7C	; 124
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	90 81       	ld	r25, Z
    2a9e:	90 6c       	ori	r25, 0xC0	; 192
    2aa0:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    2aa2:	81 30       	cpi	r24, 0x01	; 1
    2aa4:	21 f4       	brne	.+8      	; 0x2aae <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    2aa6:	80 81       	ld	r24, Z
    2aa8:	88 60       	ori	r24, 0x08	; 8
    2aaa:	80 83       	st	Z, r24
    2aac:	05 c0       	rjmp	.+10     	; 0x2ab8 <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    2aae:	ec e7       	ldi	r30, 0x7C	; 124
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	87 60       	ori	r24, 0x07	; 7
    2ab6:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 * by dividing by 128. Assumes that the
		 * standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    2ab8:	ea e7       	ldi	r30, 0x7A	; 122
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	87 60       	ori	r24, 0x07	; 7
    2ac0:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    2ac2:	80 81       	ld	r24, Z
    2ac4:	80 68       	ori	r24, 0x80	; 128
    2ac6:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 64       	ori	r24, 0x40	; 64
    2acc:	80 83       	st	Z, r24
		readADC();
    2ace:	0e 94 a0 14 	call	0x2940	; 0x2940 <_Z7readADCv>
    2ad2:	08 95       	ret

00002ad4 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2ad4:	fc 01       	movw	r30, r24
	while(*s)
    2ad6:	21 91       	ld	r18, Z+
    2ad8:	22 23       	and	r18, r18
    2ada:	41 f0       	breq	.+16     	; 0x2aec <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	20 53       	subi	r18, 0x30	; 48
    2ae0:	31 09       	sbc	r19, r1
    2ae2:	2a 30       	cpi	r18, 0x0A	; 10
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	b8 f3       	brcs	.-18     	; 0x2ad6 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	08 95       	ret
		}
	}

	return( TRUE);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
}
    2aee:	08 95       	ret

00002af0 <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    2af0:	cf 93       	push	r28
    2af2:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2af4:	0e 94 8f 10 	call	0x211e	; 0x211e <_Z23clockConfigurationCheckv>

	cli();
    2af8:	f8 94       	cli
	if(activationSource == POWER_UP)
    2afa:	c1 11       	cpse	r28, r1
    2afc:	0e c0       	rjmp	.+28     	; 0x2b1a <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    2afe:	82 30       	cpi	r24, 0x02	; 2
    2b00:	31 f4       	brne	.+12     	; 0x2b0e <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b0c:	3e c0       	rjmp	.+124    	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    2b0e:	63 e0       	ldi	r22, 0x03	; 3
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b18:	38 c0       	rjmp	.+112    	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    2b1a:	c2 30       	cpi	r28, 0x02	; 2
    2b1c:	c9 f4       	brne	.+50     	; 0x2b50 <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    2b1e:	82 30       	cpi	r24, 0x02	; 2
    2b20:	31 f4       	brne	.+12     	; 0x2b2e <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b2c:	2e c0       	rjmp	.+92     	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	19 f0       	breq	.+6      	; 0x2b38 <_Z13startEventNow19EventActionSource_t+0x48>
    2b32:	83 50       	subi	r24, 0x03	; 3
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	30 f4       	brcc	.+12     	; 0x2b44 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2b38:	61 e0       	ldi	r22, 0x01	; 1
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b42:	23 c0       	rjmp	.+70     	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b4e:	1d c0       	rjmp	.+58     	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    2b50:	82 30       	cpi	r24, 0x02	; 2
    2b52:	31 f4       	brne	.+12     	; 0x2b60 <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b5e:	15 c0       	rjmp	.+42     	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	31 f4       	brne	.+12     	; 0x2b70 <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    2b64:	62 e0       	ldi	r22, 0x02	; 2
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b6e:	0d c0       	rjmp	.+26     	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    2b70:	84 30       	cpi	r24, 0x04	; 4
    2b72:	31 f4       	brne	.+12     	; 0x2b80 <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    2b74:	63 e0       	ldi	r22, 0x03	; 3
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    2b80:	63 e0       	ldi	r22, 0x03	; 3
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    2b8a:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <g_LED_enunciating>
	sei();
    2b8e:	78 94       	sei

/*	g_current_epoch = rv3028_get_epoch();
 *	lb_send_string((char*)"Sync OK\n", FALSE); */
}
    2b90:	cf 91       	pop	r28
    2b92:	08 95       	ret

00002b94 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    2b94:	cf 93       	push	r28
    2b96:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2b98:	0e 94 8f 10 	call	0x211e	; 0x211e <_Z23clockConfigurationCheckv>

	cli();
    2b9c:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    2b9e:	c2 30       	cpi	r28, 0x02	; 2
    2ba0:	31 f4       	brne	.+12     	; 0x2bae <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2bac:	15 c0       	rjmp	.+42     	; 0x2bd8 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	31 f4       	brne	.+12     	; 0x2bbe <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2bbc:	08 c0       	rjmp	.+16     	; 0x2bce <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    2bbe:	84 30       	cpi	r24, 0x04	; 4
    2bc0:	31 f4       	brne	.+12     	; 0x2bce <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2bcc:	05 c0       	rjmp	.+10     	; 0x2bd8 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    2bd8:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <g_sync_pin_stable>
    2bdc:	82 30       	cpi	r24, 0x02	; 2
    2bde:	21 f4       	brne	.+8      	; 0x2be8 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	8d e0       	ldi	r24, 0x0D	; 13
    2be4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
	}
}
    2be8:	cf 91       	pop	r28
    2bea:	08 95       	ret

00002bec <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	2f 93       	push	r18
    2bf8:	3f 93       	push	r19
    2bfa:	4f 93       	push	r20
    2bfc:	5f 93       	push	r21
    2bfe:	6f 93       	push	r22
    2c00:	7f 93       	push	r23
    2c02:	8f 93       	push	r24
    2c04:	9f 93       	push	r25
    2c06:	af 93       	push	r26
    2c08:	bf 93       	push	r27
    2c0a:	ef 93       	push	r30
    2c0c:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    2c0e:	84 e0       	ldi	r24, 0x04	; 4
    2c10:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>

	g_sync_pin_timer = 0;
    2c14:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_sync_pin_timer+0x1>
    2c18:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_sync_pin_timer>

	if(pinVal)  /* Sync is high = button released */
    2c1c:	88 23       	and	r24, r24
    2c1e:	d9 f0       	breq	.+54     	; 0x2c56 <__vector_5+0x6a>
	{
		if(g_transmissions_disabled)
    2c20:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    2c24:	88 23       	and	r24, r24
    2c26:	71 f0       	breq	.+28     	; 0x2c44 <__vector_5+0x58>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2c28:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <g_sync_pin_stable>
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	99 f4       	brne	.+38     	; 0x2c56 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    2c30:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	8d e0       	ldi	r24, 0x0D	; 13
    2c38:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
				startEventNow(PUSHBUTTON);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_Z13startEventNow19EventActionSource_t>
    2c42:	09 c0       	rjmp	.+18     	; 0x2c56 <__vector_5+0x6a>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2c44:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <g_sync_pin_stable>
    2c48:	82 30       	cpi	r24, 0x02	; 2
    2c4a:	29 f4       	brne	.+10     	; 0x2c56 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    2c4c:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_sync_pin_stable>
				stopEventNow(PUSHBUTTON);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_Z12stopEventNow19EventActionSource_t>
			}
		}
	}
}
    2c56:	ff 91       	pop	r31
    2c58:	ef 91       	pop	r30
    2c5a:	bf 91       	pop	r27
    2c5c:	af 91       	pop	r26
    2c5e:	9f 91       	pop	r25
    2c60:	8f 91       	pop	r24
    2c62:	7f 91       	pop	r23
    2c64:	6f 91       	pop	r22
    2c66:	5f 91       	pop	r21
    2c68:	4f 91       	pop	r20
    2c6a:	3f 91       	pop	r19
    2c6c:	2f 91       	pop	r18
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	0f 90       	pop	r0
    2c74:	1f 90       	pop	r1
    2c76:	18 95       	reti

00002c78 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	g_current_epoch = rv3028_get_epoch();
    2c78:	0e 94 23 29 	call	0x5246	; 0x5246 <_Z16rv3028_get_epochv>
    2c7c:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <g_current_epoch>
    2c80:	70 93 8b 05 	sts	0x058B, r23	; 0x80058b <g_current_epoch+0x1>
    2c84:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <g_current_epoch+0x2>
    2c88:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    2c8c:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <g_messages_text+0x15>
    2c90:	81 11       	cpse	r24, r1
    2c92:	05 c0       	rjmp	.+10     	; 0x2c9e <_Z18reportConfigErrorsv+0x26>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    2c94:	65 e0       	ldi	r22, 0x05	; 5
    2c96:	8b e9       	ldi	r24, 0x9B	; 155
    2c98:	95 e0       	ldi	r25, 0x05	; 5
    2c9a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    2c9e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    2ca2:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    2ca6:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    2caa:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    2cae:	81 15       	cp	r24, r1
    2cb0:	96 46       	sbci	r25, 0x66	; 102
    2cb2:	ae 4e       	sbci	r26, 0xEE	; 238
    2cb4:	bf 45       	sbci	r27, 0x5F	; 95
    2cb6:	28 f4       	brcc	.+10     	; 0x2cc2 <_Z18reportConfigErrorsv+0x4a>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	8b e9       	ldi	r24, 0x9B	; 155
    2cbc:	95 e0       	ldi	r25, 0x05	; 5
    2cbe:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    2cc2:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_event_finish_epoch>
    2cc6:	50 91 83 05 	lds	r21, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    2cca:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    2cce:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    2cd2:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    2cd6:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    2cda:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    2cde:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    2ce2:	48 17       	cp	r20, r24
    2ce4:	59 07       	cpc	r21, r25
    2ce6:	6a 07       	cpc	r22, r26
    2ce8:	7b 07       	cpc	r23, r27
    2cea:	00 f5       	brcc	.+64     	; 0x2d2c <_Z18reportConfigErrorsv+0xb4>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2cec:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
    2cf0:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    2cf4:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    2cf8:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    2cfc:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    2d00:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    2d04:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    2d08:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    2d0c:	48 17       	cp	r20, r24
    2d0e:	59 07       	cpc	r21, r25
    2d10:	6a 07       	cpc	r22, r26
    2d12:	7b 07       	cpc	r23, r27
    2d14:	28 f4       	brcc	.+10     	; 0x2d20 <_Z18reportConfigErrorsv+0xa8>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    2d16:	63 e0       	ldi	r22, 0x03	; 3
    2d18:	8b e9       	ldi	r24, 0x9B	; 155
    2d1a:	95 e0       	ldi	r25, 0x05	; 5
    2d1c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2d20:	64 e0       	ldi	r22, 0x04	; 4
    2d22:	8b e9       	ldi	r24, 0x9B	; 155
    2d24:	95 e0       	ldi	r25, 0x05	; 5
    2d26:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2d2a:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    2d2c:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
    2d30:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    2d34:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    2d38:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    2d3c:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    2d40:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    2d44:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    2d48:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    2d4c:	48 17       	cp	r20, r24
    2d4e:	59 07       	cpc	r21, r25
    2d50:	6a 07       	cpc	r22, r26
    2d52:	7b 07       	cpc	r23, r27
    2d54:	28 f4       	brcc	.+10     	; 0x2d60 <_Z18reportConfigErrorsv+0xe8>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	83 e3       	ldi	r24, 0x33	; 51
    2d5a:	91 e0       	ldi	r25, 0x01	; 1
    2d5c:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    2d60:	08 95       	ret

00002d62 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    2d62:	2f 92       	push	r2
    2d64:	3f 92       	push	r3
    2d66:	4f 92       	push	r4
    2d68:	5f 92       	push	r5
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	2c 97       	sbiw	r28, 0x0c	; 12
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	2b 01       	movw	r4, r22
    2d98:	3c 01       	movw	r6, r24
    2d9a:	49 01       	movw	r8, r18
    2d9c:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2d9e:	62 17       	cp	r22, r18
    2da0:	73 07       	cpc	r23, r19
    2da2:	84 07       	cpc	r24, r20
    2da4:	95 07       	cpc	r25, r21
    2da6:	50 f0       	brcs	.+20     	; 0x2dbc <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2da8:	e1 14       	cp	r14, r1
    2daa:	f1 04       	cpc	r15, r1
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <_Z14reportTimeTillmmPKcS0_+0x4e>
    2dae:	04 c1       	rjmp	.+520    	; 0x2fb8 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    2db0:	61 e0       	ldi	r22, 0x01	; 1
    2db2:	c7 01       	movw	r24, r14
    2db4:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	ff c0       	rjmp	.+510    	; 0x2fba <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    2dbc:	01 15       	cp	r16, r1
    2dbe:	11 05       	cpc	r17, r1
    2dc0:	21 f0       	breq	.+8      	; 0x2dca <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	c8 01       	movw	r24, r16
    2dc6:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2dca:	75 01       	movw	r14, r10
    2dcc:	64 01       	movw	r12, r8
    2dce:	c4 18       	sub	r12, r4
    2dd0:	d5 08       	sbc	r13, r5
    2dd2:	e6 08       	sbc	r14, r6
    2dd4:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2dd6:	c7 01       	movw	r24, r14
    2dd8:	b6 01       	movw	r22, r12
    2dda:	20 e8       	ldi	r18, 0x80	; 128
    2ddc:	33 e3       	ldi	r19, 0x33	; 51
    2dde:	41 ee       	ldi	r20, 0xE1	; 225
    2de0:	51 e0       	ldi	r21, 0x01	; 1
    2de2:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__udivmodsi4>
    2de6:	29 01       	movw	r4, r18
    2de8:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2dea:	44 27       	eor	r20, r20
    2dec:	55 27       	eor	r21, r21
    2dee:	60 e8       	ldi	r22, 0x80	; 128
    2df0:	73 e3       	ldi	r23, 0x33	; 51
    2df2:	81 ee       	ldi	r24, 0xE1	; 225
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <__mulsi3>
    2dfa:	c6 1a       	sub	r12, r22
    2dfc:	d7 0a       	sbc	r13, r23
    2dfe:	e8 0a       	sbc	r14, r24
    2e00:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2e02:	c7 01       	movw	r24, r14
    2e04:	b6 01       	movw	r22, r12
    2e06:	20 e8       	ldi	r18, 0x80	; 128
    2e08:	31 e5       	ldi	r19, 0x51	; 81
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__udivmodsi4>
    2e12:	49 01       	movw	r8, r18
    2e14:	5a 01       	movw	r10, r20
    2e16:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2e18:	44 27       	eor	r20, r20
    2e1a:	55 27       	eor	r21, r21
    2e1c:	60 e8       	ldi	r22, 0x80	; 128
    2e1e:	71 e5       	ldi	r23, 0x51	; 81
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <__mulsi3>
    2e28:	c6 1a       	sub	r12, r22
    2e2a:	d7 0a       	sbc	r13, r23
    2e2c:	e8 0a       	sbc	r14, r24
    2e2e:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2e30:	c7 01       	movw	r24, r14
    2e32:	b6 01       	movw	r22, r12
    2e34:	20 e1       	ldi	r18, 0x10	; 16
    2e36:	3e e0       	ldi	r19, 0x0E	; 14
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__udivmodsi4>
    2e40:	29 83       	std	Y+1, r18	; 0x01
    2e42:	3a 83       	std	Y+2, r19	; 0x02
    2e44:	4b 83       	std	Y+3, r20	; 0x03
    2e46:	5c 83       	std	Y+4, r21	; 0x04
    2e48:	29 81       	ldd	r18, Y+1	; 0x01
    2e4a:	3a 81       	ldd	r19, Y+2	; 0x02
    2e4c:	3a 87       	std	Y+10, r19	; 0x0a
    2e4e:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2e50:	29 81       	ldd	r18, Y+1	; 0x01
    2e52:	3a 81       	ldd	r19, Y+2	; 0x02
    2e54:	4b 81       	ldd	r20, Y+3	; 0x03
    2e56:	5c 81       	ldd	r21, Y+4	; 0x04
    2e58:	44 27       	eor	r20, r20
    2e5a:	55 27       	eor	r21, r21
    2e5c:	a0 e1       	ldi	r26, 0x10	; 16
    2e5e:	be e0       	ldi	r27, 0x0E	; 14
    2e60:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <__muluhisi3>
    2e64:	c6 1a       	sub	r12, r22
    2e66:	d7 0a       	sbc	r13, r23
    2e68:	e8 0a       	sbc	r14, r24
    2e6a:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    2e6c:	c7 01       	movw	r24, r14
    2e6e:	b6 01       	movw	r22, r12
    2e70:	2c e3       	ldi	r18, 0x3C	; 60
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__udivmodsi4>
    2e7c:	2d 83       	std	Y+5, r18	; 0x05
    2e7e:	3e 83       	std	Y+6, r19	; 0x06
    2e80:	4f 83       	std	Y+7, r20	; 0x07
    2e82:	58 87       	std	Y+8, r21	; 0x08
    2e84:	0d 81       	ldd	r16, Y+5	; 0x05
    2e86:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2e88:	2c e3       	ldi	r18, 0x3C	; 60
    2e8a:	20 9f       	mul	r18, r16
    2e8c:	c0 01       	movw	r24, r0
    2e8e:	21 9f       	mul	r18, r17
    2e90:	90 0d       	add	r25, r0
    2e92:	11 24       	eor	r1, r1
    2e94:	a6 01       	movw	r20, r12
    2e96:	48 1b       	sub	r20, r24
    2e98:	59 0b       	sbc	r21, r25
    2e9a:	5c 87       	std	Y+12, r21	; 0x0c
    2e9c:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    2e9e:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_tempStr>

		if(years)
    2ea2:	41 14       	cp	r4, r1
    2ea4:	51 04       	cpc	r5, r1
    2ea6:	b9 f0       	breq	.+46     	; 0x2ed6 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    2ea8:	5f 92       	push	r5
    2eaa:	4f 92       	push	r4
    2eac:	85 e4       	ldi	r24, 0x45	; 69
    2eae:	91 e0       	ldi	r25, 0x01	; 1
    2eb0:	9f 93       	push	r25
    2eb2:	8f 93       	push	r24
    2eb4:	88 ed       	ldi	r24, 0xD8	; 216
    2eb6:	94 e0       	ldi	r25, 0x04	; 4
    2eb8:	9f 93       	push	r25
    2eba:	8f 93       	push	r24
    2ebc:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	88 ed       	ldi	r24, 0xD8	; 216
    2ec4:	94 e0       	ldi	r25, 0x04	; 4
    2ec6:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
		}

		if(days)
    2ed6:	23 28       	or	r2, r3
    2ed8:	b9 f0       	breq	.+46     	; 0x2f08 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    2eda:	9f 92       	push	r9
    2edc:	8f 92       	push	r8
    2ede:	8d e4       	ldi	r24, 0x4D	; 77
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	9f 93       	push	r25
    2ee4:	8f 93       	push	r24
    2ee6:	88 ed       	ldi	r24, 0xD8	; 216
    2ee8:	94 e0       	ldi	r25, 0x04	; 4
    2eea:	9f 93       	push	r25
    2eec:	8f 93       	push	r24
    2eee:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	88 ed       	ldi	r24, 0xD8	; 216
    2ef6:	94 e0       	ldi	r25, 0x04	; 4
    2ef8:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
		}

		if(hours)
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	89 2b       	or	r24, r25
    2f0e:	c9 f0       	breq	.+50     	; 0x2f42 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	9f 93       	push	r25
    2f14:	e9 81       	ldd	r30, Y+1	; 0x01
    2f16:	ef 93       	push	r30
    2f18:	86 e5       	ldi	r24, 0x56	; 86
    2f1a:	91 e0       	ldi	r25, 0x01	; 1
    2f1c:	9f 93       	push	r25
    2f1e:	8f 93       	push	r24
    2f20:	88 ed       	ldi	r24, 0xD8	; 216
    2f22:	94 e0       	ldi	r25, 0x04	; 4
    2f24:	9f 93       	push	r25
    2f26:	8f 93       	push	r24
    2f28:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	88 ed       	ldi	r24, 0xD8	; 216
    2f30:	94 e0       	ldi	r25, 0x04	; 4
    2f32:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
		}

		if(minutes)
    2f42:	01 2b       	or	r16, r17
    2f44:	c9 f0       	breq	.+50     	; 0x2f78 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    2f46:	fe 81       	ldd	r31, Y+6	; 0x06
    2f48:	ff 93       	push	r31
    2f4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f4c:	2f 93       	push	r18
    2f4e:	8e e5       	ldi	r24, 0x5E	; 94
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	9f 93       	push	r25
    2f54:	8f 93       	push	r24
    2f56:	88 ed       	ldi	r24, 0xD8	; 216
    2f58:	94 e0       	ldi	r25, 0x04	; 4
    2f5a:	9f 93       	push	r25
    2f5c:	8f 93       	push	r24
    2f5e:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	88 ed       	ldi	r24, 0xD8	; 216
    2f66:	94 e0       	ldi	r25, 0x04	; 4
    2f68:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    2f78:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f7a:	3f 93       	push	r19
    2f7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f7e:	4f 93       	push	r20
    2f80:	86 e6       	ldi	r24, 0x66	; 102
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	9f 93       	push	r25
    2f86:	8f 93       	push	r24
    2f88:	88 ed       	ldi	r24, 0xD8	; 216
    2f8a:	94 e0       	ldi	r25, 0x04	; 4
    2f8c:	9f 93       	push	r25
    2f8e:	8f 93       	push	r24
    2f90:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
		lb_send_string(g_tempStr, TRUE);
    2f94:	61 e0       	ldi	r22, 0x01	; 1
    2f96:	88 ed       	ldi	r24, 0xD8	; 216
    2f98:	94 e0       	ldi	r25, 0x04	; 4
    2f9a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2f9e:	0e 94 0d 0a 	call	0x141a	; 0x141a <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2fa2:	e8 ed       	ldi	r30, 0xD8	; 216
    2fa4:	f4 e0       	ldi	r31, 0x04	; 4
    2fa6:	10 82       	st	Z, r1
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2fba:	2c 96       	adiw	r28, 0x0c	; 12
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	bf 90       	pop	r11
    2fd8:	af 90       	pop	r10
    2fda:	9f 90       	pop	r9
    2fdc:	8f 90       	pop	r8
    2fde:	7f 90       	pop	r7
    2fe0:	6f 90       	pop	r6
    2fe2:	5f 90       	pop	r5
    2fe4:	4f 90       	pop	r4
    2fe6:	3f 90       	pop	r3
    2fe8:	2f 90       	pop	r2
    2fea:	08 95       	ret

00002fec <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
	setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    2ff4:	63 e0       	ldi	r22, 0x03	; 3
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
	g_current_epoch = rv3028_get_epoch();
    2ffe:	0e 94 23 29 	call	0x5246	; 0x5246 <_Z16rv3028_get_epochv>
    3002:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <g_current_epoch>
    3006:	70 93 8b 05 	sts	0x058B, r23	; 0x80058b <g_current_epoch+0x1>
    300a:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <g_current_epoch+0x2>
    300e:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    3012:	0e 94 8f 10 	call	0x211e	; 0x211e <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    3016:	82 30       	cpi	r24, 0x02	; 2
    3018:	09 f4       	brne	.+2      	; 0x301c <_Z18startEventUsingRTCv+0x30>
    301a:	5a c0       	rjmp	.+180    	; 0x30d0 <_Z18startEventUsingRTCv+0xe4>
	{
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    301c:	20 91 86 05 	lds	r18, 0x0586	; 0x800586 <g_event_start_epoch>
    3020:	30 91 87 05 	lds	r19, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3024:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3028:	50 91 89 05 	lds	r21, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    302c:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <g_current_epoch>
    3030:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3034:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3038:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <g_current_epoch+0x3>
    303c:	0f 2e       	mov	r0, r31
    303e:	fd e6       	ldi	r31, 0x6D	; 109
    3040:	ef 2e       	mov	r14, r31
    3042:	f1 e0       	ldi	r31, 0x01	; 1
    3044:	ff 2e       	mov	r15, r31
    3046:	f0 2d       	mov	r31, r0
    3048:	0a e7       	ldi	r16, 0x7A	; 122
    304a:	11 e0       	ldi	r17, 0x01	; 1
    304c:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3050:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <g_event_finish_epoch>
    3054:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3058:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    305c:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3060:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <g_event_start_epoch>
    3064:	70 91 87 05 	lds	r23, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3068:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    306c:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3070:	e1 2c       	mov	r14, r1
    3072:	f1 2c       	mov	r15, r1
    3074:	06 e8       	ldi	r16, 0x86	; 134
    3076:	11 e0       	ldi	r17, 0x01	; 1
    3078:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    307c:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
    3080:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3084:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3088:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    308c:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    3090:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3094:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3098:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    309c:	48 17       	cp	r20, r24
    309e:	59 07       	cpc	r21, r25
    30a0:	6a 07       	cpc	r22, r26
    30a2:	7b 07       	cpc	r23, r27
    30a4:	b8 f4       	brcc	.+46     	; 0x30d4 <_Z18startEventUsingRTCv+0xe8>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    30a6:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <g_event_finish_epoch>
    30aa:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    30ae:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    30b2:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    30b6:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <g_current_epoch>
    30ba:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <g_current_epoch+0x1>
    30be:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <g_current_epoch+0x2>
    30c2:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <g_current_epoch+0x3>
    30c6:	0e e8       	ldi	r16, 0x8E	; 142
    30c8:	11 e0       	ldi	r17, 0x01	; 1
    30ca:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <_Z18startEventUsingRTCv+0xe8>
		}
	}
	else
	{
		reportConfigErrors();
    30d0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_Z18reportConfigErrorsv>
	}
}
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	08 95       	ret

000030de <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
    30de:	4f 92       	push	r4
    30e0:	5f 92       	push	r5
    30e2:	6f 92       	push	r6
    30e4:	7f 92       	push	r7
    30e6:	8f 92       	push	r8
    30e8:	9f 92       	push	r9
    30ea:	af 92       	push	r10
    30ec:	bf 92       	push	r11
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	2c 97       	sbiw	r28, 0x0c	; 12
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	8c 01       	movw	r16, r24
    310c:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    310e:	fc 01       	movw	r30, r24
    3110:	01 90       	ld	r0, Z+
    3112:	00 20       	and	r0, r0
    3114:	e9 f7       	brne	.-6      	; 0x3110 <_Z18validateTimeStringPcPma+0x32>
    3116:	31 97       	sbiw	r30, 0x01	; 1
    3118:	e8 1b       	sub	r30, r24
    311a:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    311c:	25 e0       	ldi	r18, 0x05	; 5
    311e:	66 38       	cpi	r22, 0x86	; 134
    3120:	72 07       	cpc	r23, r18
    3122:	49 f5       	brne	.+82     	; 0x3176 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3124:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    3128:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    312c:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3130:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    3134:	89 87       	std	Y+9, r24	; 0x09
    3136:	9a 87       	std	Y+10, r25	; 0x0a
    3138:	ab 87       	std	Y+11, r26	; 0x0b
    313a:	bc 87       	std	Y+12, r27	; 0x0c
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	96 e6       	ldi	r25, 0x66	; 102
    3140:	ae ee       	ldi	r26, 0xEE	; 238
    3142:	bf e5       	ldi	r27, 0x5F	; 95
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	ab 83       	std	Y+3, r26	; 0x03
    314a:	bc 83       	std	Y+4, r27	; 0x04
    314c:	89 85       	ldd	r24, Y+9	; 0x09
    314e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3150:	ab 85       	ldd	r26, Y+11	; 0x0b
    3152:	bc 85       	ldd	r27, Y+12	; 0x0c
    3154:	81 15       	cp	r24, r1
    3156:	96 46       	sbci	r25, 0x66	; 102
    3158:	ae 4e       	sbci	r26, 0xEE	; 238
    315a:	bf 45       	sbci	r27, 0x5F	; 95
    315c:	28 f4       	brcc	.+10     	; 0x3168 <_Z18validateTimeStringPcPma+0x8a>
    315e:	89 80       	ldd	r8, Y+1	; 0x01
    3160:	9a 80       	ldd	r9, Y+2	; 0x02
    3162:	ab 80       	ldd	r10, Y+3	; 0x03
    3164:	bc 80       	ldd	r11, Y+4	; 0x04
    3166:	04 c0       	rjmp	.+8      	; 0x3170 <_Z18validateTimeStringPcPma+0x92>
    3168:	89 84       	ldd	r8, Y+9	; 0x09
    316a:	9a 84       	ldd	r9, Y+10	; 0x0a
    316c:	ab 84       	ldd	r10, Y+11	; 0x0b
    316e:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    3170:	ff 24       	eor	r15, r15
    3172:	f3 94       	inc	r15
    3174:	42 c0       	rjmp	.+132    	; 0x31fa <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    3176:	62 58       	subi	r22, 0x82	; 130
    3178:	75 40       	sbci	r23, 0x05	; 5
    317a:	a9 f5       	brne	.+106    	; 0x31e6 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    317c:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    3180:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3184:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3188:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    318c:	8d 83       	std	Y+5, r24	; 0x05
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	af 83       	std	Y+7, r26	; 0x07
    3192:	b8 87       	std	Y+8, r27	; 0x08
    3194:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    3198:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    319c:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    31a0:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	ab 83       	std	Y+3, r26	; 0x03
    31aa:	bc 83       	std	Y+4, r27	; 0x04
    31ac:	4d 81       	ldd	r20, Y+5	; 0x05
    31ae:	5e 81       	ldd	r21, Y+6	; 0x06
    31b0:	6f 81       	ldd	r22, Y+7	; 0x07
    31b2:	78 85       	ldd	r23, Y+8	; 0x08
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	ab 81       	ldd	r26, Y+3	; 0x03
    31ba:	bc 81       	ldd	r27, Y+4	; 0x04
    31bc:	48 17       	cp	r20, r24
    31be:	59 07       	cpc	r21, r25
    31c0:	6a 07       	cpc	r22, r26
    31c2:	7b 07       	cpc	r23, r27
    31c4:	40 f4       	brcc	.+16     	; 0x31d6 <_Z18validateTimeStringPcPma+0xf8>
    31c6:	89 80       	ldd	r8, Y+1	; 0x01
    31c8:	9a 80       	ldd	r9, Y+2	; 0x02
    31ca:	ab 80       	ldd	r10, Y+3	; 0x03
    31cc:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    31ce:	68 94       	set
    31d0:	ff 24       	eor	r15, r15
    31d2:	f1 f8       	bld	r15, 1
    31d4:	12 c0       	rjmp	.+36     	; 0x31fa <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    31d6:	8d 80       	ldd	r8, Y+5	; 0x05
    31d8:	9e 80       	ldd	r9, Y+6	; 0x06
    31da:	af 80       	ldd	r10, Y+7	; 0x07
    31dc:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    31de:	68 94       	set
    31e0:	ff 24       	eor	r15, r15
    31e2:	f1 f8       	bld	r15, 1
    31e4:	0a c0       	rjmp	.+20     	; 0x31fa <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    31e6:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    31e8:	0f 2e       	mov	r0, r31
    31ea:	81 2c       	mov	r8, r1
    31ec:	f6 e6       	ldi	r31, 0x66	; 102
    31ee:	9f 2e       	mov	r9, r31
    31f0:	fe ee       	ldi	r31, 0xEE	; 238
    31f2:	af 2e       	mov	r10, r31
    31f4:	ff e5       	ldi	r31, 0x5F	; 95
    31f6:	bf 2e       	mov	r11, r31
    31f8:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    31fa:	ec 30       	cpi	r30, 0x0C	; 12
    31fc:	f1 05       	cpc	r31, r1
    31fe:	09 f0       	breq	.+2      	; 0x3202 <_Z18validateTimeStringPcPma+0x124>
    3200:	5e c0       	rjmp	.+188    	; 0x32be <_Z18validateTimeStringPcPma+0x1e0>
    3202:	c8 01       	movw	r24, r16
    3204:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z11only_digitsPc>
    3208:	88 23       	and	r24, r24
    320a:	09 f4       	brne	.+2      	; 0x320e <_Z18validateTimeStringPcPma+0x130>
    320c:	4f c0       	rjmp	.+158    	; 0x32ac <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    320e:	b8 01       	movw	r22, r16
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	0e 94 52 29 	call	0x52a4	; 0x52a4 <_Z16rv3028_get_epochPbPc>
    3218:	2b 01       	movw	r4, r22
    321a:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    321c:	ae 2d       	mov	r26, r14
    321e:	ee 0c       	add	r14, r14
    3220:	bb 0b       	sbc	r27, r27
    3222:	20 e1       	ldi	r18, 0x10	; 16
    3224:	3e e0       	ldi	r19, 0x0E	; 14
    3226:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__usmulhisi3>
    322a:	64 0d       	add	r22, r4
    322c:	75 1d       	adc	r23, r5
    322e:	86 1d       	adc	r24, r6
    3230:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    3232:	86 16       	cp	r8, r22
    3234:	97 06       	cpc	r9, r23
    3236:	a8 06       	cpc	r10, r24
    3238:	b9 06       	cpc	r11, r25
    323a:	08 f4       	brcc	.+2      	; 0x323e <_Z18validateTimeStringPcPma+0x160>
    323c:	45 c0       	rjmp	.+138    	; 0x32c8 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    323e:	21 e0       	ldi	r18, 0x01	; 1
    3240:	f2 12       	cpse	r15, r18
    3242:	09 c0       	rjmp	.+18     	; 0x3256 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    3244:	68 e0       	ldi	r22, 0x08	; 8
    3246:	8b e9       	ldi	r24, 0x9B	; 155
    3248:	95 e0       	ldi	r25, 0x05	; 5
    324a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	cb 01       	movw	r24, r22
    3254:	39 c0       	rjmp	.+114    	; 0x32c8 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    3256:	22 e0       	ldi	r18, 0x02	; 2
    3258:	f2 12       	cpse	r15, r18
    325a:	1f c0       	rjmp	.+62     	; 0x329a <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    325c:	00 91 8a 05 	lds	r16, 0x058A	; 0x80058a <g_current_epoch>
    3260:	10 91 8b 05 	lds	r17, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3264:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3268:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <g_current_epoch+0x3>
    326c:	60 17       	cp	r22, r16
    326e:	71 07       	cpc	r23, r17
    3270:	82 07       	cpc	r24, r18
    3272:	93 07       	cpc	r25, r19
    3274:	48 f4       	brcc	.+18     	; 0x3288 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    3276:	67 e0       	ldi	r22, 0x07	; 7
    3278:	8b e9       	ldi	r24, 0x9B	; 155
    327a:	95 e0       	ldi	r25, 0x05	; 5
    327c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	cb 01       	movw	r24, r22
    3286:	20 c0       	rjmp	.+64     	; 0x32c8 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    3288:	66 e0       	ldi	r22, 0x06	; 6
    328a:	8b e9       	ldi	r24, 0x9B	; 155
    328c:	95 e0       	ldi	r25, 0x05	; 5
    328e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	cb 01       	movw	r24, r22
    3298:	17 c0       	rjmp	.+46     	; 0x32c8 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    329a:	6a e0       	ldi	r22, 0x0A	; 10
    329c:	8b e9       	ldi	r24, 0x9B	; 155
    329e:	95 e0       	ldi	r25, 0x05	; 5
    32a0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	cb 01       	movw	r24, r22
    32aa:	0e c0       	rjmp	.+28     	; 0x32c8 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    32ac:	69 e0       	ldi	r22, 0x09	; 9
    32ae:	8b e9       	ldi	r24, 0x9B	; 155
    32b0:	95 e0       	ldi	r25, 0x05	; 5
    32b2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	cb 01       	movw	r24, r22
    32bc:	05 c0       	rjmp	.+10     	; 0x32c8 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    32be:	ef 2b       	or	r30, r31
    32c0:	a9 f7       	brne	.-22     	; 0x32ac <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    32c8:	2c 96       	adiw	r28, 0x0c	; 12
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	1f 91       	pop	r17
    32da:	0f 91       	pop	r16
    32dc:	ff 90       	pop	r15
    32de:	ef 90       	pop	r14
    32e0:	bf 90       	pop	r11
    32e2:	af 90       	pop	r10
    32e4:	9f 90       	pop	r9
    32e6:	8f 90       	pop	r8
    32e8:	7f 90       	pop	r7
    32ea:	6f 90       	pop	r6
    32ec:	5f 90       	pop	r5
    32ee:	4f 90       	pop	r4
    32f0:	08 95       	ret

000032f2 <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	BOOL enableAM = TRUE;

	switch(value)
    32f2:	83 30       	cpi	r24, 0x03	; 3
    32f4:	09 f1       	breq	.+66     	; 0x3338 <_Z18setAMToneFrequencyh+0x46>
    32f6:	28 f4       	brcc	.+10     	; 0x3302 <_Z18setAMToneFrequencyh+0x10>
    32f8:	88 23       	and	r24, r24
    32fa:	49 f0       	breq	.+18     	; 0x330e <_Z18setAMToneFrequencyh+0x1c>
    32fc:	82 30       	cpi	r24, 0x02	; 2
    32fe:	a9 f0       	breq	.+42     	; 0x332a <_Z18setAMToneFrequencyh+0x38>
    3300:	37 c0       	rjmp	.+110    	; 0x3370 <_Z18setAMToneFrequencyh+0x7e>
    3302:	85 30       	cpi	r24, 0x05	; 5
    3304:	39 f1       	breq	.+78     	; 0x3354 <_Z18setAMToneFrequencyh+0x62>
    3306:	f8 f0       	brcs	.+62     	; 0x3346 <_Z18setAMToneFrequencyh+0x54>
    3308:	86 30       	cpi	r24, 0x06	; 6
    330a:	59 f1       	breq	.+86     	; 0x3362 <_Z18setAMToneFrequencyh+0x70>
    330c:	31 c0       	rjmp	.+98     	; 0x3370 <_Z18setAMToneFrequencyh+0x7e>
	{
		case 0:
		{
			enableAM = FALSE;
			OCR1A = 1000;
    330e:	88 ee       	ldi	r24, 0xE8	; 232
    3310:	93 e0       	ldi	r25, 0x03	; 3
    3312:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3316:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			linkbus_init(BAUD);
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	71 ee       	ldi	r23, 0xE1	; 225
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z12linkbus_initm>

	switch(value)
	{
		case 0:
		{
			enableAM = FALSE;
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	2a c0       	rjmp	.+84     	; 0x337e <_Z18setAMToneFrequencyh+0x8c>
		}
		break;

		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    332a:	8c e2       	ldi	r24, 0x2C	; 44
    332c:	92 e0       	ldi	r25, 0x02	; 2
    332e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3332:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    3336:	26 c0       	rjmp	.+76     	; 0x3384 <_Z18setAMToneFrequencyh+0x92>

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    3338:	81 e7       	ldi	r24, 0x71	; 113
    333a:	92 e0       	ldi	r25, 0x02	; 2
    333c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3340:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    3344:	1f c0       	rjmp	.+62     	; 0x3384 <_Z18setAMToneFrequencyh+0x92>

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    3346:	8a ec       	ldi	r24, 0xCA	; 202
    3348:	92 e0       	ldi	r25, 0x02	; 2
    334a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    334e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    3352:	18 c0       	rjmp	.+48     	; 0x3384 <_Z18setAMToneFrequencyh+0x92>

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    3354:	81 e4       	ldi	r24, 0x41	; 65
    3356:	93 e0       	ldi	r25, 0x03	; 3
    3358:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    335c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    3360:	11 c0       	rjmp	.+34     	; 0x3384 <_Z18setAMToneFrequencyh+0x92>

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    3362:	88 ee       	ldi	r24, 0xE8	; 232
    3364:	93 e0       	ldi	r25, 0x03	; 3
    3366:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    336a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    336e:	0a c0       	rjmp	.+20     	; 0x3384 <_Z18setAMToneFrequencyh+0x92>

		default:
		{
			OCR1A = 500;    /* For ~1000 Hz tone output */
    3370:	84 ef       	ldi	r24, 0xF4	; 244
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3378:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    337c:	03 c0       	rjmp	.+6      	; 0x3384 <_Z18setAMToneFrequencyh+0x92>
		{
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
    337e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_AM_enabled>
}
    3382:	08 95       	ret
	}

#if !INIT_EEPROM_ONLY
		if(enableAM)
		{
			setupPortsForF1975();
    3384:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_Z18setupPortsForF1975v>
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	f9 cf       	rjmp	.-14     	; 0x337e <_Z18setAMToneFrequencyh+0x8c>

0000338c <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    338c:	2f 92       	push	r2
    338e:	3f 92       	push	r3
    3390:	4f 92       	push	r4
    3392:	5f 92       	push	r5
    3394:	6f 92       	push	r6
    3396:	7f 92       	push	r7
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	2c 97       	sbiw	r28, 0x0c	; 12
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    33c0:	0f 2e       	mov	r0, r31
    33c2:	ff e9       	ldi	r31, 0x9F	; 159
    33c4:	6f 2e       	mov	r6, r31
    33c6:	f1 e0       	ldi	r31, 0x01	; 1
    33c8:	7f 2e       	mov	r7, r31
    33ca:	f0 2d       	mov	r31, r0
    33cc:	0f 2e       	mov	r0, r31
    33ce:	f8 ed       	ldi	r31, 0xD8	; 216
    33d0:	af 2e       	mov	r10, r31
    33d2:	f4 e0       	ldi	r31, 0x04	; 4
    33d4:	bf 2e       	mov	r11, r31
    33d6:	f0 2d       	mov	r31, r0
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    33d8:	0f 2e       	mov	r0, r31
    33da:	f6 ec       	ldi	r31, 0xC6	; 198
    33dc:	2f 2e       	mov	r2, r31
    33de:	f1 e0       	ldi	r31, 0x01	; 1
    33e0:	3f 2e       	mov	r3, r31
    33e2:	f0 2d       	mov	r31, r0
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);

						if(g_messages_text[STATION_ID][0])
    33e4:	0f 2e       	mov	r0, r31
    33e6:	f0 e1       	ldi	r31, 0x10	; 16
    33e8:	4f 2e       	mov	r4, r31
    33ea:	f5 e0       	ldi	r31, 0x05	; 5
    33ec:	5f 2e       	mov	r5, r31
    33ee:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, TRUE);
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    33f0:	0f 2e       	mov	r0, r31
    33f2:	f8 e1       	ldi	r31, 0x18	; 24
    33f4:	8f 2e       	mov	r8, r31
    33f6:	f2 e0       	ldi	r31, 0x02	; 2
    33f8:	9f 2e       	mov	r9, r31
    33fa:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    33fc:	0e 94 3e 09 	call	0x127c	; 0x127c <_Z16nextFullRxBufferv>
    3400:	6c 01       	movw	r12, r24
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	09 f4       	brne	.+2      	; 0x3408 <_Z17handleLinkBusMsgsv+0x7c>
    3406:	40 c5       	rjmp	.+2688   	; 0x3e88 <_Z17handleLinkBusMsgsv+0xafc>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    3408:	dc 01       	movw	r26, r24
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	8d 91       	ld	r24, X+
    340e:	9c 91       	ld	r25, X
    3410:	12 97       	sbiw	r26, 0x02	; 2
    3412:	86 3c       	cpi	r24, 0xC6	; 198
    3414:	be e1       	ldi	r27, 0x1E	; 30
    3416:	9b 07       	cpc	r25, r27
    3418:	29 f1       	breq	.+74     	; 0x3464 <_Z17handleLinkBusMsgsv+0xd8>
    341a:	78 f4       	brcc	.+30     	; 0x343a <_Z17handleLinkBusMsgsv+0xae>
    341c:	8e 31       	cpi	r24, 0x1E	; 30
    341e:	f3 e0       	ldi	r31, 0x03	; 3
    3420:	9f 07       	cpc	r25, r31
    3422:	09 f4       	brne	.+2      	; 0x3426 <_Z17handleLinkBusMsgsv+0x9a>
    3424:	1a c1       	rjmp	.+564    	; 0x365a <_Z17handleLinkBusMsgsv+0x2ce>
    3426:	8f 36       	cpi	r24, 0x6F	; 111
    3428:	2d e1       	ldi	r18, 0x1D	; 29
    342a:	92 07       	cpc	r25, r18
    342c:	09 f4       	brne	.+2      	; 0x3430 <_Z17handleLinkBusMsgsv+0xa4>
    342e:	4c c2       	rjmp	.+1176   	; 0x38c8 <_Z17handleLinkBusMsgsv+0x53c>
    3430:	87 3d       	cpi	r24, 0xD7	; 215
    3432:	92 40       	sbci	r25, 0x02	; 2
    3434:	09 f0       	breq	.+2      	; 0x3438 <_Z17handleLinkBusMsgsv+0xac>
    3436:	06 c5       	rjmp	.+2572   	; 0x3e44 <_Z17handleLinkBusMsgsv+0xab8>
    3438:	b2 c0       	rjmp	.+356    	; 0x359e <_Z17handleLinkBusMsgsv+0x212>
    343a:	82 37       	cpi	r24, 0x72	; 114
    343c:	a3 e2       	ldi	r26, 0x23	; 35
    343e:	9a 07       	cpc	r25, r26
    3440:	09 f4       	brne	.+2      	; 0x3444 <_Z17handleLinkBusMsgsv+0xb8>
    3442:	7c c1       	rjmp	.+760    	; 0x373c <_Z17handleLinkBusMsgsv+0x3b0>
    3444:	28 f4       	brcc	.+10     	; 0x3450 <_Z17handleLinkBusMsgsv+0xc4>
    3446:	8a 3e       	cpi	r24, 0xEA	; 234
    3448:	92 42       	sbci	r25, 0x22	; 34
    344a:	09 f4       	brne	.+2      	; 0x344e <_Z17handleLinkBusMsgsv+0xc2>
    344c:	08 c2       	rjmp	.+1040   	; 0x385e <_Z17handleLinkBusMsgsv+0x4d2>
    344e:	fa c4       	rjmp	.+2548   	; 0x3e44 <_Z17handleLinkBusMsgsv+0xab8>
    3450:	84 33       	cpi	r24, 0x34	; 52
    3452:	f4 e2       	ldi	r31, 0x24	; 36
    3454:	9f 07       	cpc	r25, r31
    3456:	09 f4       	brne	.+2      	; 0x345a <_Z17handleLinkBusMsgsv+0xce>
    3458:	d4 c0       	rjmp	.+424    	; 0x3602 <_Z17handleLinkBusMsgsv+0x276>
    345a:	85 3c       	cpi	r24, 0xC5	; 197
    345c:	94 42       	sbci	r25, 0x24	; 36
    345e:	09 f4       	brne	.+2      	; 0x3462 <_Z17handleLinkBusMsgsv+0xd6>
    3460:	75 c4       	rjmp	.+2282   	; 0x3d4c <_Z17handleLinkBusMsgsv+0x9c0>
    3462:	f0 c4       	rjmp	.+2528   	; 0x3e44 <_Z17handleLinkBusMsgsv+0xab8>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    3464:	d6 01       	movw	r26, r12
    3466:	13 96       	adiw	r26, 0x03	; 3
    3468:	8c 91       	ld	r24, X
    346a:	13 97       	sbiw	r26, 0x03	; 3
    346c:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	09 f4       	brne	.+2      	; 0x3474 <_Z17handleLinkBusMsgsv+0xe8>
    3472:	80 c0       	rjmp	.+256    	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
				{
					if(c == 'B')
    3474:	82 34       	cpi	r24, 0x42	; 66
    3476:	91 05       	cpc	r25, r1
    3478:	09 f4       	brne	.+2      	; 0x347c <_Z17handleLinkBusMsgsv+0xf0>
    347a:	f0 c4       	rjmp	.+2528   	; 0x3e5c <_Z17handleLinkBusMsgsv+0xad0>
					{
						c = BEACON;
					}
					else if(c == 'F')
    347c:	86 34       	cpi	r24, 0x46	; 70
    347e:	91 05       	cpc	r25, r1
    3480:	09 f4       	brne	.+2      	; 0x3484 <_Z17handleLinkBusMsgsv+0xf8>
    3482:	ee c4       	rjmp	.+2524   	; 0x3e60 <_Z17handleLinkBusMsgsv+0xad4>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    3484:	83 34       	cpi	r24, 0x43	; 67
    3486:	91 05       	cpc	r25, r1
    3488:	d9 f4       	brne	.+54     	; 0x34c0 <_Z17handleLinkBusMsgsv+0x134>
					{
						char t = lb_buff->fields[FIELD2][0];
    348a:	57 96       	adiw	r26, 0x17	; 23
    348c:	8c 91       	ld	r24, X
    348e:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    3490:	58 96       	adiw	r26, 0x18	; 24
    3492:	1c 92       	st	X, r1

						if(t == 'B')
    3494:	82 34       	cpi	r24, 0x42	; 66
    3496:	29 f0       	breq	.+10     	; 0x34a2 <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	c0 97       	sbiw	r24, 0x30	; 48
    349c:	0a 97       	sbiw	r24, 0x0a	; 10
    349e:	08 f0       	brcs	.+2      	; 0x34a2 <_Z17handleLinkBusMsgsv+0x116>
    34a0:	69 c0       	rjmp	.+210    	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    34a2:	c6 01       	movw	r24, r12
    34a4:	47 96       	adiw	r24, 0x17	; 23
    34a6:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <atoi>
    34aa:	99 23       	and	r25, r25
    34ac:	14 f4       	brge	.+4      	; 0x34b2 <_Z17handleLinkBusMsgsv+0x126>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	86 30       	cpi	r24, 0x06	; 6
    34b4:	91 05       	cpc	r25, r1
    34b6:	0c f4       	brge	.+2      	; 0x34ba <_Z17handleLinkBusMsgsv+0x12e>
    34b8:	47 c0       	rjmp	.+142    	; 0x3548 <_Z17handleLinkBusMsgsv+0x1bc>
    34ba:	85 e0       	ldi	r24, 0x05	; 5
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	44 c0       	rjmp	.+136    	; 0x3548 <_Z17handleLinkBusMsgsv+0x1bc>
						}
					}
					else if(c == 'S')
    34c0:	83 35       	cpi	r24, 0x53	; 83
    34c2:	91 05       	cpc	r25, r1
    34c4:	e9 f5       	brne	.+122    	; 0x3540 <_Z17handleLinkBusMsgsv+0x1b4>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    34c6:	f6 01       	movw	r30, r12
    34c8:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    34ca:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    34cc:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    34ce:	82 34       	cpi	r24, 0x42	; 66
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <_Z17handleLinkBusMsgsv+0x148>
    34d2:	50 c0       	rjmp	.+160    	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
						{
							x = BEACON;
						}
						else if(t == 'F')
    34d4:	86 34       	cpi	r24, 0x46	; 70
    34d6:	49 f4       	brne	.+18     	; 0x34ea <_Z17handleLinkBusMsgsv+0x15e>
						{
							if((u > '0') && (u < '6'))
    34d8:	8f ec       	ldi	r24, 0xCF	; 207
    34da:	89 0f       	add	r24, r25
    34dc:	85 30       	cpi	r24, 0x05	; 5
    34de:	08 f0       	brcs	.+2      	; 0x34e2 <_Z17handleLinkBusMsgsv+0x156>
    34e0:	49 c0       	rjmp	.+146    	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_F1 + (u - '1');
    34e2:	89 2f       	mov	r24, r25
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	84 97       	sbiw	r24, 0x24	; 36
    34e8:	1b c0       	rjmp	.+54     	; 0x3520 <_Z17handleLinkBusMsgsv+0x194>
							}
						}
						else if(t == 'S')
    34ea:	83 35       	cpi	r24, 0x53	; 83
    34ec:	41 f4       	brne	.+16     	; 0x34fe <_Z17handleLinkBusMsgsv+0x172>
						{
							if((u > '0') && (u < '6'))
    34ee:	8f ec       	ldi	r24, 0xCF	; 207
    34f0:	89 0f       	add	r24, r25
    34f2:	85 30       	cpi	r24, 0x05	; 5
    34f4:	c0 f4       	brcc	.+48     	; 0x3526 <_Z17handleLinkBusMsgsv+0x19a>
							{
								x = SPRINT_S1 + (u - '1');
    34f6:	89 2f       	mov	r24, r25
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	89 97       	sbiw	r24, 0x29	; 41
    34fc:	11 c0       	rjmp	.+34     	; 0x3520 <_Z17handleLinkBusMsgsv+0x194>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    34fe:	96 34       	cpi	r25, 0x46	; 70
    3500:	39 f4       	brne	.+14     	; 0x3510 <_Z17handleLinkBusMsgsv+0x184>
						{
							if((t > '0') && (t < '6'))
    3502:	9f ec       	ldi	r25, 0xCF	; 207
    3504:	98 0f       	add	r25, r24
    3506:	95 30       	cpi	r25, 0x05	; 5
    3508:	a8 f5       	brcc	.+106    	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_F1 + (t - '1');
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	84 97       	sbiw	r24, 0x24	; 36
    350e:	08 c0       	rjmp	.+16     	; 0x3520 <_Z17handleLinkBusMsgsv+0x194>
							}
						}
						else if(u == 'S')
    3510:	93 35       	cpi	r25, 0x53	; 83
    3512:	81 f5       	brne	.+96     	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
						{
							if((t > '0') && (t < '6'))
    3514:	9f ec       	ldi	r25, 0xCF	; 207
    3516:	98 0f       	add	r25, r24
    3518:	95 30       	cpi	r25, 0x05	; 5
    351a:	60 f5       	brcc	.+88     	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_S1 + (t - '1');
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	89 97       	sbiw	r24, 0x29	; 41
							}
						}

						if(x != BEACON)
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	19 f4       	brne	.+6      	; 0x352a <_Z17handleLinkBusMsgsv+0x19e>
    3524:	27 c0       	rjmp	.+78     	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    3526:	87 e0       	ldi	r24, 0x07	; 7
    3528:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    352a:	87 30       	cpi	r24, 0x07	; 7
    352c:	91 05       	cpc	r25, r1
    352e:	14 f4       	brge	.+4      	; 0x3534 <_Z17handleLinkBusMsgsv+0x1a8>
    3530:	87 e0       	ldi	r24, 0x07	; 7
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	82 31       	cpi	r24, 0x12	; 18
    3536:	91 05       	cpc	r25, r1
    3538:	3c f0       	brlt	.+14     	; 0x3548 <_Z17handleLinkBusMsgsv+0x1bc>
    353a:	81 e1       	ldi	r24, 0x11	; 17
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <_Z17handleLinkBusMsgsv+0x1bc>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    3540:	c6 01       	movw	r24, r12
    3542:	03 96       	adiw	r24, 0x03	; 3
    3544:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    3548:	82 31       	cpi	r24, 0x12	; 18
    354a:	91 05       	cpc	r25, r1
    354c:	98 f4       	brcc	.+38     	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
					{
						Fox_t holdFox = (Fox_t)c;
    354e:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3550:	ae 01       	movw	r20, r28
    3552:	4f 5f       	subi	r20, 0xFF	; 255
    3554:	5f 4f       	sbci	r21, 0xFF	; 255
    3556:	60 e1       	ldi	r22, 0x10	; 16
    3558:	8b e9       	ldi	r24, 0x9B	; 155
    355a:	95 e0       	ldi	r25, 0x05	; 5
    355c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3560:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    3564:	99 81       	ldd	r25, Y+1	; 0x01
    3566:	98 17       	cp	r25, r24
    3568:	29 f0       	breq	.+10     	; 0x3574 <_Z17handleLinkBusMsgsv+0x1e8>
						{
							setupForFox(&holdFox, START_NOTHING);
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	ce 01       	movw	r24, r28
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3574:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    3578:	1f 92       	push	r1
    357a:	8f 93       	push	r24
    357c:	7f 92       	push	r7
    357e:	6f 92       	push	r6
    3580:	bf 92       	push	r11
    3582:	af 92       	push	r10
    3584:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	c5 01       	movw	r24, r10
    358c:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	57 c4       	rjmp	.+2222   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    359e:	d6 01       	movw	r26, r12
    35a0:	13 96       	adiw	r26, 0x03	; 3
    35a2:	8c 91       	ld	r24, X
    35a4:	88 23       	and	r24, r24
    35a6:	b1 f0       	breq	.+44     	; 0x35d4 <_Z17handleLinkBusMsgsv+0x248>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    35a8:	c6 01       	movw	r24, r12
    35aa:	03 96       	adiw	r24, 0x03	; 3
    35ac:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    35b0:	70 e0       	ldi	r23, 0x00	; 0
    35b2:	67 30       	cpi	r22, 0x07	; 7
    35b4:	71 05       	cpc	r23, r1
    35b6:	0c f0       	brlt	.+2      	; 0x35ba <_Z17handleLinkBusMsgsv+0x22e>
    35b8:	66 e0       	ldi	r22, 0x06	; 6
    35ba:	60 93 7e 05 	sts	0x057E, r22	; 0x80057e <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    35be:	4e e7       	ldi	r20, 0x7E	; 126
    35c0:	55 e0       	ldi	r21, 0x05	; 5
    35c2:	61 e1       	ldi	r22, 0x11	; 17
    35c4:	8b e9       	ldi	r24, 0x9B	; 155
    35c6:	95 e0       	ldi	r25, 0x05	; 5
    35c8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    35cc:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_AM_audio_frequency>
    35d0:	0e 94 79 19 	call	0x32f2	; 0x32f2 <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    35d4:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_AM_audio_frequency>
    35d8:	1f 92       	push	r1
    35da:	8f 93       	push	r24
    35dc:	87 ea       	ldi	r24, 0xA7	; 167
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	9f 93       	push	r25
    35e2:	8f 93       	push	r24
    35e4:	bf 92       	push	r11
    35e6:	af 92       	push	r10
    35e8:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	c5 01       	movw	r24, r10
    35f0:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	25 c4       	rjmp	.+2122   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3602:	f6 01       	movw	r30, r12
    3604:	83 81       	ldd	r24, Z+3	; 0x03
    3606:	88 23       	and	r24, r24
    3608:	11 f1       	breq	.+68     	; 0x364e <_Z17handleLinkBusMsgsv+0x2c2>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    360a:	80 33       	cpi	r24, 0x30	; 48
    360c:	21 f4       	brne	.+8      	; 0x3616 <_Z17handleLinkBusMsgsv+0x28a>
					{
						stopEventNow(PROGRAMMATIC);
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_Z12stopEventNow19EventActionSource_t>
    3614:	1b c4       	rjmp	.+2102   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3616:	81 33       	cpi	r24, 0x31	; 49
    3618:	21 f4       	brne	.+8      	; 0x3622 <_Z17handleLinkBusMsgsv+0x296>
					{
						startEventNow(PROGRAMMATIC);
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_Z13startEventNow19EventActionSource_t>
    3620:	15 c4       	rjmp	.+2090   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    3622:	82 33       	cpi	r24, 0x32	; 50
    3624:	31 f4       	brne	.+12     	; 0x3632 <_Z17handleLinkBusMsgsv+0x2a6>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_transmissions_disabled>
						startEventUsingRTC();
    362c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_Z18startEventUsingRTCv>
    3630:	0d c4       	rjmp	.+2074   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
					}
					else if(lb_buff->fields[FIELD1][0] == '3')  /* Start the event at the programmed start time */
    3632:	83 33       	cpi	r24, 0x33	; 51
    3634:	31 f4       	brne	.+12     	; 0x3642 <_Z17handleLinkBusMsgsv+0x2b6>
					{
						setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3636:	62 e0       	ldi	r22, 0x02	; 2
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
    3640:	05 c4       	rjmp	.+2058   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
					}
					else
					{
						lb_send_string((char*)"err\n", TRUE);
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	8e ea       	ldi	r24, 0xAE	; 174
    3646:	91 e0       	ldi	r25, 0x01	; 1
    3648:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    364c:	ff c3       	rjmp	.+2046   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
					}
				}
				else
				{
					lb_send_string((char*)"err\n", TRUE);
    364e:	61 e0       	ldi	r22, 0x01	; 1
    3650:	8e ea       	ldi	r24, 0xAE	; 174
    3652:	91 e0       	ldi	r25, 0x01	; 1
    3654:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3658:	f9 c3       	rjmp	.+2034   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    365a:	d6 01       	movw	r26, r12
    365c:	13 96       	adiw	r26, 0x03	; 3
    365e:	8c 91       	ld	r24, X
    3660:	88 23       	and	r24, r24
    3662:	99 f1       	breq	.+102    	; 0x36ca <_Z17handleLinkBusMsgsv+0x33e>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    3664:	80 e2       	ldi	r24, 0x20	; 32
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	f5 01       	movw	r30, r10
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    366e:	b6 01       	movw	r22, r12
    3670:	6d 5f       	subi	r22, 0xFD	; 253
    3672:	7f 4f       	sbci	r23, 0xFF	; 255
    3674:	c5 01       	movw	r24, r10
    3676:	0e 94 0d 30 	call	0x601a	; 0x601a <strcat>

					if(lb_buff->fields[FIELD2][0])
    367a:	d6 01       	movw	r26, r12
    367c:	57 96       	adiw	r26, 0x17	; 23
    367e:	8c 91       	ld	r24, X
    3680:	88 23       	and	r24, r24
    3682:	79 f0       	breq	.+30     	; 0x36a2 <_Z17handleLinkBusMsgsv+0x316>
					{
						strcat(g_tempStr, " ");
    3684:	f5 01       	movw	r30, r10
    3686:	01 90       	ld	r0, Z+
    3688:	00 20       	and	r0, r0
    368a:	e9 f7       	brne	.-6      	; 0x3686 <_Z17handleLinkBusMsgsv+0x2fa>
    368c:	31 97       	sbiw	r30, 0x01	; 1
    368e:	80 e2       	ldi	r24, 0x20	; 32
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    3696:	b6 01       	movw	r22, r12
    3698:	69 5e       	subi	r22, 0xE9	; 233
    369a:	7f 4f       	sbci	r23, 0xFF	; 255
    369c:	c5 01       	movw	r24, r10
    369e:	0e 94 0d 30 	call	0x601a	; 0x601a <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    36a2:	f5 01       	movw	r30, r10
    36a4:	01 90       	ld	r0, Z+
    36a6:	00 20       	and	r0, r0
    36a8:	e9 f7       	brne	.-6      	; 0x36a4 <_Z17handleLinkBusMsgsv+0x318>
    36aa:	31 97       	sbiw	r30, 0x01	; 1
    36ac:	e8 5d       	subi	r30, 0xD8	; 216
    36ae:	f4 40       	sbci	r31, 0x04	; 4
    36b0:	75 97       	sbiw	r30, 0x15	; 21
    36b2:	58 f4       	brcc	.+22     	; 0x36ca <_Z17handleLinkBusMsgsv+0x33e>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    36b4:	b5 01       	movw	r22, r10
    36b6:	85 e2       	ldi	r24, 0x25	; 37
    36b8:	95 e0       	ldi	r25, 0x05	; 5
    36ba:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    36be:	a5 01       	movw	r20, r10
    36c0:	6b e0       	ldi	r22, 0x0B	; 11
    36c2:	8b e9       	ldi	r24, 0x9B	; 155
    36c4:	95 e0       	ldi	r25, 0x05	; 5
    36c6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    36ca:	f2 01       	movw	r30, r4
    36cc:	85 89       	ldd	r24, Z+21	; 0x15
    36ce:	88 23       	and	r24, r24
    36d0:	f1 f0       	breq	.+60     	; 0x370e <_Z17handleLinkBusMsgsv+0x382>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    36d2:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_id_codespeed>
    36d6:	70 e0       	ldi	r23, 0x00	; 0
    36d8:	85 e2       	ldi	r24, 0x25	; 37
    36da:	95 e0       	ldi	r25, 0x05	; 5
    36dc:	0e 94 b7 28 	call	0x516e	; 0x516e <_Z26timeRequiredToSendStrAtWPMPcj>
    36e0:	88 5a       	subi	r24, 0xA8	; 168
    36e2:	9d 4f       	sbci	r25, 0xFD	; 253
    36e4:	9c 01       	movw	r18, r24
    36e6:	36 95       	lsr	r19
    36e8:	27 95       	ror	r18
    36ea:	36 95       	lsr	r19
    36ec:	27 95       	ror	r18
    36ee:	36 95       	lsr	r19
    36f0:	27 95       	ror	r18
    36f2:	a5 ec       	ldi	r26, 0xC5	; 197
    36f4:	b0 e2       	ldi	r27, 0x20	; 32
    36f6:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    36fa:	92 95       	swap	r25
    36fc:	82 95       	swap	r24
    36fe:	8f 70       	andi	r24, 0x0F	; 15
    3700:	89 27       	eor	r24, r25
    3702:	9f 70       	andi	r25, 0x0F	; 15
    3704:	89 27       	eor	r24, r25
    3706:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <g_time_needed_for_ID+0x1>
    370a:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    370e:	85 e2       	ldi	r24, 0x25	; 37
    3710:	95 e0       	ldi	r25, 0x05	; 5
    3712:	9f 93       	push	r25
    3714:	8f 93       	push	r24
    3716:	83 eb       	ldi	r24, 0xB3	; 179
    3718:	91 e0       	ldi	r25, 0x01	; 1
    371a:	9f 93       	push	r25
    371c:	8f 93       	push	r24
    371e:	bf 92       	push	r11
    3720:	af 92       	push	r10
    3722:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3726:	61 e0       	ldi	r22, 0x01	; 1
    3728:	c5 01       	movw	r24, r10
    372a:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	88 c3       	rjmp	.+1808   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>


			case MESSAGE_CODE_SETTINGS:
			{
				if(lb_buff->fields[FIELD1][0] == 'S')
    373c:	d6 01       	movw	r26, r12
    373e:	13 96       	adiw	r26, 0x03	; 3
    3740:	8c 91       	ld	r24, X
    3742:	13 97       	sbiw	r26, 0x03	; 3
    3744:	83 35       	cpi	r24, 0x53	; 83
    3746:	09 f0       	breq	.+2      	; 0x374a <_Z17handleLinkBusMsgsv+0x3be>
    3748:	51 c0       	rjmp	.+162    	; 0x37ec <_Z17handleLinkBusMsgsv+0x460>
				{
					char x = lb_buff->fields[FIELD2][0];

					if(x)
    374a:	57 96       	adiw	r26, 0x17	; 23
    374c:	8c 91       	ld	r24, X
    374e:	88 23       	and	r24, r24
    3750:	d1 f1       	breq	.+116    	; 0x37c6 <_Z17handleLinkBusMsgsv+0x43a>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    3752:	c6 01       	movw	r24, r12
    3754:	47 96       	adiw	r24, 0x17	; 23
    3756:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    375a:	86 2f       	mov	r24, r22
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	85 30       	cpi	r24, 0x05	; 5
    3760:	91 05       	cpc	r25, r1
    3762:	14 f4       	brge	.+4      	; 0x3768 <_Z17handleLinkBusMsgsv+0x3dc>
    3764:	85 e0       	ldi	r24, 0x05	; 5
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	85 31       	cpi	r24, 0x15	; 21
    376a:	91 05       	cpc	r25, r1
    376c:	0c f0       	brlt	.+2      	; 0x3770 <_Z17handleLinkBusMsgsv+0x3e4>
    376e:	84 e1       	ldi	r24, 0x14	; 20
    3770:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    3774:	42 e1       	ldi	r20, 0x12	; 18
    3776:	51 e0       	ldi	r21, 0x01	; 1
    3778:	6f e0       	ldi	r22, 0x0F	; 15
    377a:	8b e9       	ldi	r24, 0x9B	; 155
    377c:	95 e0       	ldi	r25, 0x05	; 5
    377e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    3782:	f2 01       	movw	r30, r4
    3784:	85 89       	ldd	r24, Z+21	; 0x15
    3786:	88 23       	and	r24, r24
    3788:	f1 f0       	breq	.+60     	; 0x37c6 <_Z17handleLinkBusMsgsv+0x43a>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    378a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_id_codespeed>
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	85 e2       	ldi	r24, 0x25	; 37
    3792:	95 e0       	ldi	r25, 0x05	; 5
    3794:	0e 94 b7 28 	call	0x516e	; 0x516e <_Z26timeRequiredToSendStrAtWPMPcj>
    3798:	88 5a       	subi	r24, 0xA8	; 168
    379a:	9d 4f       	sbci	r25, 0xFD	; 253
    379c:	9c 01       	movw	r18, r24
    379e:	36 95       	lsr	r19
    37a0:	27 95       	ror	r18
    37a2:	36 95       	lsr	r19
    37a4:	27 95       	ror	r18
    37a6:	36 95       	lsr	r19
    37a8:	27 95       	ror	r18
    37aa:	a5 ec       	ldi	r26, 0xC5	; 197
    37ac:	b0 e2       	ldi	r27, 0x20	; 32
    37ae:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    37b2:	92 95       	swap	r25
    37b4:	82 95       	swap	r24
    37b6:	8f 70       	andi	r24, 0x0F	; 15
    37b8:	89 27       	eor	r24, r25
    37ba:	9f 70       	andi	r25, 0x0F	; 15
    37bc:	89 27       	eor	r24, r25
    37be:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <g_time_needed_for_ID+0x1>
    37c2:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <g_time_needed_for_ID>
						}
					}

					sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    37c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_id_codespeed>
    37ca:	1f 92       	push	r1
    37cc:	8f 93       	push	r24
    37ce:	8a eb       	ldi	r24, 0xBA	; 186
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	9f 93       	push	r25
    37d4:	8f 93       	push	r24
    37d6:	bf 92       	push	r11
    37d8:	af 92       	push	r10
    37da:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	34 c0       	rjmp	.+104    	; 0x3854 <_Z17handleLinkBusMsgsv+0x4c8>
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    37ec:	80 35       	cpi	r24, 0x50	; 80
    37ee:	51 f5       	brne	.+84     	; 0x3844 <_Z17handleLinkBusMsgsv+0x4b8>
				{
					char x = lb_buff->fields[FIELD2][0];
    37f0:	f6 01       	movw	r30, r12
    37f2:	87 89       	ldd	r24, Z+23	; 0x17

					if(x)
    37f4:	88 23       	and	r24, r24
    37f6:	a9 f0       	breq	.+42     	; 0x3822 <_Z17handleLinkBusMsgsv+0x496>
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
    37f8:	81 33       	cpi	r24, 0x31	; 49
    37fa:	39 f0       	breq	.+14     	; 0x380a <_Z17handleLinkBusMsgsv+0x47e>
    37fc:	84 35       	cpi	r24, 0x54	; 84
    37fe:	39 f0       	breq	.+14     	; 0x380e <_Z17handleLinkBusMsgsv+0x482>
    3800:	91 e0       	ldi	r25, 0x01	; 1
    3802:	89 35       	cpi	r24, 0x59	; 89
    3804:	29 f0       	breq	.+10     	; 0x3810 <_Z17handleLinkBusMsgsv+0x484>
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	03 c0       	rjmp	.+6      	; 0x3810 <_Z17handleLinkBusMsgsv+0x484>
    380a:	91 e0       	ldi	r25, 0x01	; 1
    380c:	01 c0       	rjmp	.+2      	; 0x3810 <_Z17handleLinkBusMsgsv+0x484>
    380e:	91 e0       	ldi	r25, 0x01	; 1
    3810:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <g_ptt_periodic_reset_enabled>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	55 e0       	ldi	r21, 0x05	; 5
    3818:	67 e1       	ldi	r22, 0x17	; 23
    381a:	8b e9       	ldi	r24, 0x9B	; 155
    381c:	95 e0       	ldi	r25, 0x05	; 5
    381e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    3822:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <g_ptt_periodic_reset_enabled>
    3826:	1f 92       	push	r1
    3828:	8f 93       	push	r24
    382a:	3f 92       	push	r3
    382c:	2f 92       	push	r2
    382e:	bf 92       	push	r11
    3830:	af 92       	push	r10
    3832:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	08 c0       	rjmp	.+16     	; 0x3854 <_Z17handleLinkBusMsgsv+0x4c8>
				}
				else
				{
					sprintf(g_tempStr, "err\n");
    3844:	85 e0       	ldi	r24, 0x05	; 5
    3846:	ee ea       	ldi	r30, 0xAE	; 174
    3848:	f1 e0       	ldi	r31, 0x01	; 1
    384a:	d5 01       	movw	r26, r10
    384c:	01 90       	ld	r0, Z+
    384e:	0d 92       	st	X+, r0
    3850:	8a 95       	dec	r24
    3852:	e1 f7       	brne	.-8      	; 0x384c <_Z17handleLinkBusMsgsv+0x4c0>
				}

				lb_send_string(g_tempStr, FALSE);
    3854:	60 e0       	ldi	r22, 0x00	; 0
    3856:	c5 01       	movw	r24, r10
    3858:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    385c:	f7 c2       	rjmp	.+1518   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    385e:	d6 01       	movw	r26, r12
    3860:	13 96       	adiw	r26, 0x03	; 3
    3862:	8c 91       	ld	r24, X
    3864:	88 23       	and	r24, r24
    3866:	c9 f0       	breq	.+50     	; 0x389a <_Z17handleLinkBusMsgsv+0x50e>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    3868:	48 e0       	ldi	r20, 0x08	; 8
    386a:	50 e0       	ldi	r21, 0x00	; 0
    386c:	b6 01       	movw	r22, r12
    386e:	6d 5f       	subi	r22, 0xFD	; 253
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	c5 01       	movw	r24, r10
    3874:	0e 94 1f 30 	call	0x603e	; 0x603e <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    3878:	f5 01       	movw	r30, r10
    387a:	10 86       	std	Z+8, r1	; 0x08

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    387c:	c5 01       	movw	r24, r10
    387e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z11only_digitsPc>
    3882:	88 23       	and	r24, r24
    3884:	51 f0       	breq	.+20     	; 0x389a <_Z17handleLinkBusMsgsv+0x50e>
    3886:	f5 01       	movw	r30, r10
    3888:	01 90       	ld	r0, Z+
    388a:	00 20       	and	r0, r0
    388c:	e9 f7       	brne	.-6      	; 0x3888 <_Z17handleLinkBusMsgsv+0x4fc>
    388e:	31 97       	sbiw	r30, 0x01	; 1
    3890:	e8 5d       	subi	r30, 0xD8	; 216
    3892:	f4 40       	sbci	r31, 0x04	; 4
    3894:	34 97       	sbiw	r30, 0x04	; 4
    3896:	08 f0       	brcs	.+2      	; 0x389a <_Z17handleLinkBusMsgsv+0x50e>
    3898:	e5 c2       	rjmp	.+1482   	; 0x3e64 <_Z17handleLinkBusMsgsv+0xad8>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    389a:	81 e4       	ldi	r24, 0x41	; 65
    389c:	95 e0       	ldi	r25, 0x05	; 5
    389e:	9f 93       	push	r25
    38a0:	8f 93       	push	r24
    38a2:	8e ec       	ldi	r24, 0xCE	; 206
    38a4:	91 e0       	ldi	r25, 0x01	; 1
    38a6:	9f 93       	push	r25
    38a8:	8f 93       	push	r24
    38aa:	bf 92       	push	r11
    38ac:	af 92       	push	r10
    38ae:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    38b2:	61 e0       	ldi	r22, 0x01	; 1
    38b4:	c5 01       	movw	r24, r10
    38b6:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	c2 c2       	rjmp	.+1412   	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    38c8:	d6 01       	movw	r26, r12
    38ca:	13 96       	adiw	r26, 0x03	; 3
    38cc:	8c 91       	ld	r24, X
    38ce:	84 35       	cpi	r24, 0x54	; 84
    38d0:	09 f0       	breq	.+2      	; 0x38d4 <_Z17handleLinkBusMsgsv+0x548>
    38d2:	73 c0       	rjmp	.+230    	; 0x39ba <_Z17handleLinkBusMsgsv+0x62e>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    38d4:	4c e0       	ldi	r20, 0x0C	; 12
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	b6 01       	movw	r22, r12
    38da:	69 5e       	subi	r22, 0xE9	; 233
    38dc:	7f 4f       	sbci	r23, 0xFF	; 255
    38de:	c5 01       	movw	r24, r10
    38e0:	0e 94 1f 30 	call	0x603e	; 0x603e <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    38e4:	f5 01       	movw	r30, r10
    38e6:	14 86       	std	Z+12, r1	; 0x0c

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    38e8:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <g_utc_offset>
    38ec:	41 95       	neg	r20
    38ee:	6a e8       	ldi	r22, 0x8A	; 138
    38f0:	75 e0       	ldi	r23, 0x05	; 5
    38f2:	c5 01       	movw	r24, r10
    38f4:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z18validateTimeStringPcPma>
    38f8:	69 87       	std	Y+9, r22	; 0x09
    38fa:	7a 87       	std	Y+10, r23	; 0x0a
    38fc:	8b 87       	std	Y+11, r24	; 0x0b
    38fe:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    3900:	61 15       	cp	r22, r1
    3902:	71 05       	cpc	r23, r1
    3904:	81 05       	cpc	r24, r1
    3906:	91 05       	cpc	r25, r1
    3908:	41 f1       	breq	.+80     	; 0x395a <_Z17handleLinkBusMsgsv+0x5ce>
					{
						rv3028_set_epoch(t);
    390a:	0e 94 03 29 	call	0x5206	; 0x5206 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    390e:	89 85       	ldd	r24, Y+9	; 0x09
    3910:	9a 85       	ldd	r25, Y+10	; 0x0a
    3912:	ab 85       	ldd	r26, Y+11	; 0x0b
    3914:	bc 85       	ldd	r27, Y+12	; 0x0c
    3916:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <g_current_epoch>
    391a:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <g_current_epoch+0x1>
    391e:	a0 93 8c 05 	sts	0x058C, r26	; 0x80058c <g_current_epoch+0x2>
    3922:	b0 93 8d 05 	sts	0x058D, r27	; 0x80058d <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    3926:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    392a:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    392e:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3932:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    3936:	bf 93       	push	r27
    3938:	af 93       	push	r26
    393a:	9f 93       	push	r25
    393c:	8f 93       	push	r24
    393e:	8b ed       	ldi	r24, 0xDB	; 219
    3940:	91 e0       	ldi	r25, 0x01	; 1
    3942:	9f 93       	push	r25
    3944:	8f 93       	push	r24
    3946:	bf 92       	push	r11
    3948:	af 92       	push	r10
    394a:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	92 c2       	rjmp	.+1316   	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    395a:	20 91 86 05 	lds	r18, 0x0586	; 0x800586 <g_event_start_epoch>
    395e:	30 91 87 05 	lds	r19, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3962:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3966:	50 91 89 05 	lds	r21, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    396a:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <g_current_epoch>
    396e:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3972:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3976:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <g_current_epoch+0x3>
    397a:	e1 2c       	mov	r14, r1
    397c:	f1 2c       	mov	r15, r1
    397e:	0a e7       	ldi	r16, 0x7A	; 122
    3980:	11 e0       	ldi	r17, 0x01	; 1
    3982:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    3986:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    398a:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    398e:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3992:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    3996:	bf 93       	push	r27
    3998:	af 93       	push	r26
    399a:	9f 93       	push	r25
    399c:	8f 93       	push	r24
    399e:	86 ed       	ldi	r24, 0xD6	; 214
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	9f 93       	push	r25
    39a4:	8f 93       	push	r24
    39a6:	bf 92       	push	r11
    39a8:	af 92       	push	r10
    39aa:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	f8 94       	cli
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	62 c2       	rjmp	.+1220   	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    39ba:	83 35       	cpi	r24, 0x53	; 83
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <_Z17handleLinkBusMsgsv+0x634>
    39be:	96 c0       	rjmp	.+300    	; 0x3aec <_Z17handleLinkBusMsgsv+0x760>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    39c0:	b6 01       	movw	r22, r12
    39c2:	69 5e       	subi	r22, 0xE9	; 233
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	c5 01       	movw	r24, r10
    39c8:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    39cc:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <g_utc_offset>
    39d0:	41 95       	neg	r20
    39d2:	66 e8       	ldi	r22, 0x86	; 134
    39d4:	75 e0       	ldi	r23, 0x05	; 5
    39d6:	c5 01       	movw	r24, r10
    39d8:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z18validateTimeStringPcPma>

					if(s)
    39dc:	61 15       	cp	r22, r1
    39de:	71 05       	cpc	r23, r1
    39e0:	81 05       	cpc	r24, r1
    39e2:	91 05       	cpc	r25, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <_Z17handleLinkBusMsgsv+0x65c>
    39e6:	68 c0       	rjmp	.+208    	; 0x3ab8 <_Z17handleLinkBusMsgsv+0x72c>
					{
						g_event_start_epoch = s;
    39e8:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <g_event_start_epoch>
    39ec:	70 93 87 05 	sts	0x0587, r23	; 0x800587 <g_event_start_epoch+0x1>
    39f0:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_event_start_epoch+0x2>
    39f4:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    39f8:	46 e8       	ldi	r20, 0x86	; 134
    39fa:	55 e0       	ldi	r21, 0x05	; 5
    39fc:	64 e1       	ldi	r22, 0x14	; 20
    39fe:	8b e9       	ldi	r24, 0x9B	; 155
    3a00:	95 e0       	ldi	r25, 0x05	; 5
    3a02:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    3a06:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    3a0a:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3a0e:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    3a12:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	af 83       	std	Y+7, r26	; 0x07
    3a1c:	b8 87       	std	Y+8, r27	; 0x08
    3a1e:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    3a22:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3a26:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3a2a:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3a2e:	80 58       	subi	r24, 0x80	; 128
    3a30:	9e 4a       	sbci	r25, 0xAE	; 174
    3a32:	ae 4f       	sbci	r26, 0xFE	; 254
    3a34:	bf 4f       	sbci	r27, 0xFF	; 255
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	9a 83       	std	Y+2, r25	; 0x02
    3a3a:	ab 83       	std	Y+3, r26	; 0x03
    3a3c:	bc 83       	std	Y+4, r27	; 0x04
    3a3e:	4d 81       	ldd	r20, Y+5	; 0x05
    3a40:	5e 81       	ldd	r21, Y+6	; 0x06
    3a42:	6f 81       	ldd	r22, Y+7	; 0x07
    3a44:	78 85       	ldd	r23, Y+8	; 0x08
    3a46:	48 17       	cp	r20, r24
    3a48:	59 07       	cpc	r21, r25
    3a4a:	6a 07       	cpc	r22, r26
    3a4c:	7b 07       	cpc	r23, r27
    3a4e:	28 f4       	brcc	.+10     	; 0x3a5a <_Z17handleLinkBusMsgsv+0x6ce>
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	ab 81       	ldd	r26, Y+3	; 0x03
    3a56:	bc 81       	ldd	r27, Y+4	; 0x04
    3a58:	04 c0       	rjmp	.+8      	; 0x3a62 <_Z17handleLinkBusMsgsv+0x6d6>
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	af 81       	ldd	r26, Y+7	; 0x07
    3a60:	b8 85       	ldd	r27, Y+8	; 0x08
    3a62:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_event_finish_epoch>
    3a66:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <g_event_finish_epoch+0x1>
    3a6a:	a0 93 84 05 	sts	0x0584, r26	; 0x800584 <g_event_finish_epoch+0x2>
    3a6e:	b0 93 85 05 	sts	0x0585, r27	; 0x800585 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3a72:	42 e8       	ldi	r20, 0x82	; 130
    3a74:	55 e0       	ldi	r21, 0x05	; 5
    3a76:	65 e1       	ldi	r22, 0x15	; 21
    3a78:	8b e9       	ldi	r24, 0x9B	; 155
    3a7a:	95 e0       	ldi	r25, 0x05	; 5
    3a7c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3a80:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    3a84:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3a88:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3a8c:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3a90:	bf 93       	push	r27
    3a92:	af 93       	push	r26
    3a94:	9f 93       	push	r25
    3a96:	8f 93       	push	r24
    3a98:	85 ee       	ldi	r24, 0xE5	; 229
    3a9a:	91 e0       	ldi	r25, 0x01	; 1
    3a9c:	9f 93       	push	r25
    3a9e:	8f 93       	push	r24
    3aa0:	bf 92       	push	r11
    3aa2:	af 92       	push	r10
    3aa4:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
						startEventUsingRTC();
    3aa8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_Z18startEventUsingRTCv>
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	e3 c1       	rjmp	.+966    	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3ab8:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_event_start_epoch>
    3abc:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3ac0:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3ac4:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3ac8:	bf 93       	push	r27
    3aca:	af 93       	push	r26
    3acc:	9f 93       	push	r25
    3ace:	8f 93       	push	r24
    3ad0:	85 ee       	ldi	r24, 0xE5	; 229
    3ad2:	91 e0       	ldi	r25, 0x01	; 1
    3ad4:	9f 93       	push	r25
    3ad6:	8f 93       	push	r24
    3ad8:	bf 92       	push	r11
    3ada:	af 92       	push	r10
    3adc:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61
    3aea:	c9 c1       	rjmp	.+914    	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    3aec:	86 34       	cpi	r24, 0x46	; 70
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <_Z17handleLinkBusMsgsv+0x766>
    3af0:	6f c0       	rjmp	.+222    	; 0x3bd0 <_Z17handleLinkBusMsgsv+0x844>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3af2:	b6 01       	movw	r22, r12
    3af4:	69 5e       	subi	r22, 0xE9	; 233
    3af6:	7f 4f       	sbci	r23, 0xFF	; 255
    3af8:	c5 01       	movw	r24, r10
    3afa:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3afe:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <g_utc_offset>
    3b02:	41 95       	neg	r20
    3b04:	62 e8       	ldi	r22, 0x82	; 130
    3b06:	75 e0       	ldi	r23, 0x05	; 5
    3b08:	c5 01       	movw	r24, r10
    3b0a:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z18validateTimeStringPcPma>

					if(f)
    3b0e:	61 15       	cp	r22, r1
    3b10:	71 05       	cpc	r23, r1
    3b12:	81 05       	cpc	r24, r1
    3b14:	91 05       	cpc	r25, r1
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <_Z17handleLinkBusMsgsv+0x78e>
    3b18:	41 c0       	rjmp	.+130    	; 0x3b9c <_Z17handleLinkBusMsgsv+0x810>
					{
						g_event_finish_epoch = f;
    3b1a:	60 93 82 05 	sts	0x0582, r22	; 0x800582 <g_event_finish_epoch>
    3b1e:	70 93 83 05 	sts	0x0583, r23	; 0x800583 <g_event_finish_epoch+0x1>
    3b22:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <g_event_finish_epoch+0x2>
    3b26:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3b2a:	42 e8       	ldi	r20, 0x82	; 130
    3b2c:	55 e0       	ldi	r21, 0x05	; 5
    3b2e:	65 e1       	ldi	r22, 0x15	; 21
    3b30:	8b e9       	ldi	r24, 0x9B	; 155
    3b32:	95 e0       	ldi	r25, 0x05	; 5
    3b34:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3b38:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <g_event_finish_epoch>
    3b3c:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3b40:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    3b44:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3b48:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <g_event_start_epoch>
    3b4c:	70 91 87 05 	lds	r23, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3b50:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3b54:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3b58:	e1 2c       	mov	r14, r1
    3b5a:	f1 2c       	mov	r15, r1
    3b5c:	06 e8       	ldi	r16, 0x86	; 134
    3b5e:	11 e0       	ldi	r17, 0x01	; 1
    3b60:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3b64:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    3b68:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3b6c:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    3b70:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3b74:	bf 93       	push	r27
    3b76:	af 93       	push	r26
    3b78:	9f 93       	push	r25
    3b7a:	8f 93       	push	r24
    3b7c:	80 ef       	ldi	r24, 0xF0	; 240
    3b7e:	91 e0       	ldi	r25, 0x01	; 1
    3b80:	9f 93       	push	r25
    3b82:	8f 93       	push	r24
    3b84:	bf 92       	push	r11
    3b86:	af 92       	push	r10
    3b88:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
						startEventUsingRTC();
    3b8c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_Z18startEventUsingRTCv>
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	de bf       	out	0x3e, r29	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	71 c1       	rjmp	.+738    	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3b9c:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_event_finish_epoch>
    3ba0:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3ba4:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    3ba8:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3bac:	bf 93       	push	r27
    3bae:	af 93       	push	r26
    3bb0:	9f 93       	push	r25
    3bb2:	8f 93       	push	r24
    3bb4:	80 ef       	ldi	r24, 0xF0	; 240
    3bb6:	91 e0       	ldi	r25, 0x01	; 1
    3bb8:	9f 93       	push	r25
    3bba:	8f 93       	push	r24
    3bbc:	bf 92       	push	r11
    3bbe:	af 92       	push	r10
    3bc0:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	57 c1       	rjmp	.+686    	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    3bd0:	8f 34       	cpi	r24, 0x4F	; 79
    3bd2:	b9 f5       	brne	.+110    	; 0x3c42 <_Z17handleLinkBusMsgsv+0x8b6>
				{
					if(lb_buff->fields[FIELD2][0])
    3bd4:	d6 01       	movw	r26, r12
    3bd6:	57 96       	adiw	r26, 0x17	; 23
    3bd8:	8c 91       	ld	r24, X
    3bda:	88 23       	and	r24, r24
    3bdc:	d9 f0       	breq	.+54     	; 0x3c14 <_Z17handleLinkBusMsgsv+0x888>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3bde:	c6 01       	movw	r24, r12
    3be0:	47 96       	adiw	r24, 0x17	; 23
    3be2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <atoi>

						offset = CLAMP(-24, offset, 24);
    3be6:	89 31       	cpi	r24, 0x19	; 25
    3be8:	54 f4       	brge	.+20     	; 0x3bfe <_Z17handleLinkBusMsgsv+0x872>
    3bea:	08 2e       	mov	r0, r24
    3bec:	00 0c       	add	r0, r0
    3bee:	99 0b       	sbc	r25, r25
    3bf0:	88 3e       	cpi	r24, 0xE8	; 232
    3bf2:	bf ef       	ldi	r27, 0xFF	; 255
    3bf4:	9b 07       	cpc	r25, r27
    3bf6:	2c f4       	brge	.+10     	; 0x3c02 <_Z17handleLinkBusMsgsv+0x876>
    3bf8:	88 ee       	ldi	r24, 0xE8	; 232
    3bfa:	9f ef       	ldi	r25, 0xFF	; 255
    3bfc:	02 c0       	rjmp	.+4      	; 0x3c02 <_Z17handleLinkBusMsgsv+0x876>
    3bfe:	88 e1       	ldi	r24, 0x18	; 24
    3c00:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    3c02:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    3c06:	41 e8       	ldi	r20, 0x81	; 129
    3c08:	55 e0       	ldi	r21, 0x05	; 5
    3c0a:	66 e1       	ldi	r22, 0x16	; 22
    3c0c:	8b e9       	ldi	r24, 0x9B	; 155
    3c0e:	95 e0       	ldi	r25, 0x05	; 5
    3c10:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    3c14:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_utc_offset>
    3c18:	28 2f       	mov	r18, r24
    3c1a:	08 2e       	mov	r0, r24
    3c1c:	00 0c       	add	r0, r0
    3c1e:	33 0b       	sbc	r19, r19
    3c20:	3f 93       	push	r19
    3c22:	8f 93       	push	r24
    3c24:	8c ef       	ldi	r24, 0xFC	; 252
    3c26:	91 e0       	ldi	r25, 0x01	; 1
    3c28:	9f 93       	push	r25
    3c2a:	8f 93       	push	r24
    3c2c:	bf 92       	push	r11
    3c2e:	af 92       	push	r10
    3c30:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	1e c1       	rjmp	.+572    	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3c42:	83 34       	cpi	r24, 0x43	; 67
    3c44:	09 f5       	brne	.+66     	; 0x3c88 <_Z17handleLinkBusMsgsv+0x8fc>
				{
					if(lb_buff->fields[FIELD2][0])
    3c46:	f6 01       	movw	r30, r12
    3c48:	87 89       	ldd	r24, Z+23	; 0x17
    3c4a:	88 23       	and	r24, r24
    3c4c:	51 f0       	breq	.+20     	; 0x3c62 <_Z17handleLinkBusMsgsv+0x8d6>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3c4e:	c6 01       	movw	r24, r12
    3c50:	47 96       	adiw	r24, 0x17	; 23
    3c52:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <atoi>

						if(c < 512)
    3c56:	81 15       	cp	r24, r1
    3c58:	f2 e0       	ldi	r31, 0x02	; 2
    3c5a:	9f 07       	cpc	r25, r31
    3c5c:	10 f4       	brcc	.+4      	; 0x3c62 <_Z17handleLinkBusMsgsv+0x8d6>
						{
							rv3028_set_offset_RAM(c);
    3c5e:	0e 94 3c 2a 	call	0x5478	; 0x5478 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3c62:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    3c66:	9f 93       	push	r25
    3c68:	8f 93       	push	r24
    3c6a:	87 e0       	ldi	r24, 0x07	; 7
    3c6c:	92 e0       	ldi	r25, 0x02	; 2
    3c6e:	9f 93       	push	r25
    3c70:	8f 93       	push	r24
    3c72:	bf 92       	push	r11
    3c74:	af 92       	push	r10
    3c76:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	fb c0       	rjmp	.+502    	; 0x3e7e <_Z17handleLinkBusMsgsv+0xaf2>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck() == CONFIGURATION_ERROR)
    3c88:	0e 94 8f 10 	call	0x211e	; 0x211e <_Z23clockConfigurationCheckv>
    3c8c:	82 30       	cpi	r24, 0x02	; 2
    3c8e:	19 f4       	brne	.+6      	; 0x3c96 <_Z17handleLinkBusMsgsv+0x90a>
					{
						reportConfigErrors();
    3c90:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_Z18reportConfigErrorsv>
    3c94:	db c0       	rjmp	.+438    	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    3c96:	20 91 86 05 	lds	r18, 0x0586	; 0x800586 <g_event_start_epoch>
    3c9a:	30 91 87 05 	lds	r19, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3c9e:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3ca2:	50 91 89 05 	lds	r21, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3ca6:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <g_current_epoch>
    3caa:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3cae:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3cb2:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <g_current_epoch+0x3>
    3cb6:	0f 2e       	mov	r0, r31
    3cb8:	fd e6       	ldi	r31, 0x6D	; 109
    3cba:	ef 2e       	mov	r14, r31
    3cbc:	f1 e0       	ldi	r31, 0x01	; 1
    3cbe:	ff 2e       	mov	r15, r31
    3cc0:	f0 2d       	mov	r31, r0
    3cc2:	0a e7       	ldi	r16, 0x7A	; 122
    3cc4:	11 e0       	ldi	r17, 0x01	; 1
    3cc6:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3cca:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <g_event_finish_epoch>
    3cce:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3cd2:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    3cd6:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3cda:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <g_event_start_epoch>
    3cde:	70 91 87 05 	lds	r23, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3ce2:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3ce6:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3cea:	e1 2c       	mov	r14, r1
    3cec:	f1 2c       	mov	r15, r1
    3cee:	06 e8       	ldi	r16, 0x86	; 134
    3cf0:	11 e0       	ldi	r17, 0x01	; 1
    3cf2:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    3cf6:	40 91 86 05 	lds	r20, 0x0586	; 0x800586 <g_event_start_epoch>
    3cfa:	50 91 87 05 	lds	r21, 0x0587	; 0x800587 <g_event_start_epoch+0x1>
    3cfe:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_event_start_epoch+0x2>
    3d02:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <g_event_start_epoch+0x3>
    3d06:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_current_epoch>
    3d0a:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3d0e:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3d12:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <g_current_epoch+0x3>
    3d16:	48 17       	cp	r20, r24
    3d18:	59 07       	cpc	r21, r25
    3d1a:	6a 07       	cpc	r22, r26
    3d1c:	7b 07       	cpc	r23, r27
    3d1e:	08 f0       	brcs	.+2      	; 0x3d22 <_Z17handleLinkBusMsgsv+0x996>
    3d20:	95 c0       	rjmp	.+298    	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3d22:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <g_event_finish_epoch>
    3d26:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <g_event_finish_epoch+0x1>
    3d2a:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <g_event_finish_epoch+0x2>
    3d2e:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <g_event_finish_epoch+0x3>
    3d32:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <g_current_epoch>
    3d36:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <g_current_epoch+0x1>
    3d3a:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <g_current_epoch+0x2>
    3d3e:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <g_current_epoch+0x3>
    3d42:	0e e8       	ldi	r16, 0x8E	; 142
    3d44:	11 e0       	ldi	r17, 0x01	; 1
    3d46:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_Z14reportTimeTillmmPKcS0_>
    3d4a:	80 c0       	rjmp	.+256    	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3d4c:	d6 01       	movw	r26, r12
    3d4e:	13 96       	adiw	r26, 0x03	; 3
    3d50:	8c 91       	ld	r24, X
    3d52:	13 97       	sbiw	r26, 0x03	; 3
    3d54:	83 34       	cpi	r24, 0x43	; 67
    3d56:	89 f5       	brne	.+98     	; 0x3dba <_Z17handleLinkBusMsgsv+0xa2e>
				{
					if(lb_buff->fields[FIELD2][0])
    3d58:	57 96       	adiw	r26, 0x17	; 23
    3d5a:	8c 91       	ld	r24, X
    3d5c:	88 23       	and	r24, r24
    3d5e:	a9 f0       	breq	.+42     	; 0x3d8a <_Z17handleLinkBusMsgsv+0x9fe>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3d60:	c6 01       	movw	r24, r12
    3d62:	47 96       	adiw	r24, 0x17	; 23
    3d64:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <atoi>

						if((v > -2000) && (v < 2000))
    3d68:	9c 01       	movw	r18, r24
    3d6a:	21 53       	subi	r18, 0x31	; 49
    3d6c:	38 4f       	sbci	r19, 0xF8	; 248
    3d6e:	2f 39       	cpi	r18, 0x9F	; 159
    3d70:	3f 40       	sbci	r19, 0x0F	; 15
    3d72:	58 f4       	brcc	.+22     	; 0x3d8a <_Z17handleLinkBusMsgsv+0x9fe>
						{
							g_atmega_temp_calibration = v;
    3d74:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <g_atmega_temp_calibration+0x1>
    3d78:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3d7c:	4f e0       	ldi	r20, 0x0F	; 15
    3d7e:	51 e0       	ldi	r21, 0x01	; 1
    3d80:	62 e1       	ldi	r22, 0x12	; 18
    3d82:	8b e9       	ldi	r24, 0x9B	; 155
    3d84:	95 e0       	ldi	r25, 0x05	; 5
    3d86:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    3d8a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_atmega_temp_calibration>
    3d8e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <g_atmega_temp_calibration+0x1>
    3d92:	9f 93       	push	r25
    3d94:	8f 93       	push	r24
    3d96:	8d e0       	ldi	r24, 0x0D	; 13
    3d98:	92 e0       	ldi	r25, 0x02	; 2
    3d9a:	9f 93       	push	r25
    3d9c:	8f 93       	push	r24
    3d9e:	bf 92       	push	r11
    3da0:	af 92       	push	r10
    3da2:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
					lb_send_string(g_tempStr, TRUE);
    3da6:	61 e0       	ldi	r22, 0x01	; 1
    3da8:	c5 01       	movw	r24, r10
    3daa:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3dba:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_temperature>
    3dbe:	28 2f       	mov	r18, r24
    3dc0:	08 2e       	mov	r0, r24
    3dc2:	00 0c       	add	r0, r0
    3dc4:	33 0b       	sbc	r19, r19
    3dc6:	3f 93       	push	r19
    3dc8:	8f 93       	push	r24
    3dca:	9f 92       	push	r9
    3dcc:	8f 92       	push	r8
    3dce:	bf 92       	push	r11
    3dd0:	af 92       	push	r10
    3dd2:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3dd6:	61 e0       	ldi	r22, 0x01	; 1
    3dd8:	c5 01       	movw	r24, r10
    3dda:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3dde:	40 91 3e 05 	lds	r20, 0x053E	; 0x80053e <g_voltage>
    3de2:	50 91 3f 05 	lds	r21, 0x053F	; 0x80053f <g_voltage+0x1>
    3de6:	fa 01       	movw	r30, r20
    3de8:	f6 95       	lsr	r31
    3dea:	e7 95       	ror	r30
    3dec:	f6 95       	lsr	r31
    3dee:	e7 95       	ror	r30
    3df0:	9f 01       	movw	r18, r30
    3df2:	ab e7       	ldi	r26, 0x7B	; 123
    3df4:	b4 e1       	ldi	r27, 0x14	; 20
    3df6:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    3dfa:	96 95       	lsr	r25
    3dfc:	87 95       	ror	r24
    3dfe:	64 e6       	ldi	r22, 0x64	; 100
    3e00:	68 9f       	mul	r22, r24
    3e02:	90 01       	movw	r18, r0
    3e04:	69 9f       	mul	r22, r25
    3e06:	30 0d       	add	r19, r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	42 1b       	sub	r20, r18
    3e0c:	53 0b       	sbc	r21, r19
    3e0e:	5f 93       	push	r21
    3e10:	4f 93       	push	r20
    3e12:	9f 01       	movw	r18, r30
    3e14:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    3e18:	96 95       	lsr	r25
    3e1a:	87 95       	ror	r24
    3e1c:	9f 93       	push	r25
    3e1e:	8f 93       	push	r24
    3e20:	8f e1       	ldi	r24, 0x1F	; 31
    3e22:	92 e0       	ldi	r25, 0x02	; 2
    3e24:	9f 93       	push	r25
    3e26:	8f 93       	push	r24
    3e28:	bf 92       	push	r11
    3e2a:	af 92       	push	r10
    3e2c:	0e 94 4b 30 	call	0x6096	; 0x6096 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3e30:	61 e0       	ldi	r22, 0x01	; 1
    3e32:	c5 01       	movw	r24, r10
    3e34:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
			}
			break;
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	04 c0       	rjmp	.+8      	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>

			default:
			{
				ee_mgr.send_Help();
    3e44:	8b e9       	ldi	r24, 0x9B	; 155
    3e46:	95 e0       	ldi	r25, 0x05	; 5
    3e48:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    3e4c:	d6 01       	movw	r26, r12
    3e4e:	12 96       	adiw	r26, 0x02	; 2
    3e50:	1c 92       	st	X, r1
    3e52:	1e 92       	st	-X, r1
    3e54:	11 97       	sbiw	r26, 0x01	; 1
		if(send_ack)
		{
			lb_send_NewPrompt();
    3e56:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z17lb_send_NewPromptv>
    3e5a:	d0 ca       	rjmp	.-2656   	; 0x33fc <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	77 cb       	rjmp	.-2322   	; 0x354e <_Z17handleLinkBusMsgsv+0x1c2>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3e60:	86 e0       	ldi	r24, 0x06	; 6
    3e62:	75 cb       	rjmp	.-2326   	; 0x354e <_Z17handleLinkBusMsgsv+0x1c2>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    3e64:	b5 01       	movw	r22, r10
    3e66:	81 e4       	ldi	r24, 0x41	; 65
    3e68:	95 e0       	ldi	r25, 0x05	; 5
    3e6a:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3e6e:	41 e4       	ldi	r20, 0x41	; 65
    3e70:	55 e0       	ldi	r21, 0x05	; 5
    3e72:	6e e0       	ldi	r22, 0x0E	; 14
    3e74:	8b e9       	ldi	r24, 0x9B	; 155
    3e76:	95 e0       	ldi	r25, 0x05	; 5
    3e78:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    3e7c:	0e cd       	rjmp	.-1508   	; 0x389a <_Z17handleLinkBusMsgsv+0x50e>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    3e7e:	61 e0       	ldi	r22, 0x01	; 1
    3e80:	c5 01       	movw	r24, r10
    3e82:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
    3e86:	e2 cf       	rjmp	.-60     	; 0x3e4c <_Z17handleLinkBusMsgsv+0xac0>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3e88:	2c 96       	adiw	r28, 0x0c	; 12
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	0f 91       	pop	r16
    3e9c:	ff 90       	pop	r15
    3e9e:	ef 90       	pop	r14
    3ea0:	df 90       	pop	r13
    3ea2:	cf 90       	pop	r12
    3ea4:	bf 90       	pop	r11
    3ea6:	af 90       	pop	r10
    3ea8:	9f 90       	pop	r9
    3eaa:	8f 90       	pop	r8
    3eac:	7f 90       	pop	r7
    3eae:	6f 90       	pop	r6
    3eb0:	5f 90       	pop	r5
    3eb2:	4f 90       	pop	r4
    3eb4:	3f 90       	pop	r3
    3eb6:	2f 90       	pop	r2
    3eb8:	08 95       	ret

00003eba <_Z10processKeyc>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    3eba:	cf 92       	push	r12
    3ebc:	df 92       	push	r13
    3ebe:	ef 92       	push	r14
    3ec0:	ff 92       	push	r15
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	1f 92       	push	r1
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    3ecc:	84 34       	cpi	r24, 0x44	; 68
    3ece:	39 f4       	brne	.+14     	; 0x3ede <_Z10processKeyc+0x24>
		{
			g_DTMF_unlocked = FALSE;
    3ed0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    3ed4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ed8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    3edc:	ef c3       	rjmp	.+2014   	; 0x46bc <_Z10processKeyc+0x802>
		}

		if(!g_DTMF_unlocked)
    3ede:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_DTMF_unlocked>
    3ee2:	91 11       	cpse	r25, r1
    3ee4:	07 c0       	rjmp	.+14     	; 0x3ef4 <_Z10processKeyc+0x3a>
		{
			state = STATE_CHECK_PASSWORD;
    3ee6:	21 e1       	ldi	r18, 0x11	; 17
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3eee:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    3ef2:	7a c3       	rjmp	.+1780   	; 0x45e8 <_Z10processKeyc+0x72e>
		}
		else
		{
			if(key == '*')
    3ef4:	8a 32       	cpi	r24, 0x2A	; 42
    3ef6:	a9 f4       	brne	.+42     	; 0x3f22 <_Z10processKeyc+0x68>
			{
				state = STATE_SENTENCE_START;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f00:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    3f04:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    3f08:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ10processKeycE12stringLength>
				value = 0;
    3f0c:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE5value+0x1>
    3f10:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE5value>
				digits = 0;
    3f14:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    3f18:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    3f1c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_DTMF_unlocked>
    3f20:	cd c3       	rjmp	.+1946   	; 0x46bc <_Z10processKeyc+0x802>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    3f22:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    3f26:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f2a:	31 97       	sbiw	r30, 0x01	; 1
    3f2c:	e3 31       	cpi	r30, 0x13	; 19
    3f2e:	f1 05       	cpc	r31, r1
    3f30:	08 f0       	brcs	.+2      	; 0x3f34 <_Z10processKeyc+0x7a>
    3f32:	c4 c3       	rjmp	.+1928   	; 0x46bc <_Z10processKeyc+0x802>
    3f34:	28 2f       	mov	r18, r24
    3f36:	ea 56       	subi	r30, 0x6A	; 106
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    3f3e:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    3f42:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ10processKeycE12stringLength>
				value = 0;
    3f46:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE5value+0x1>
    3f4a:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE5value>
				digits = 0;
    3f4e:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    3f52:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    3f56:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_DTMF_unlocked>
    3f5a:	88 23       	and	r24, r24
    3f5c:	09 f4       	brne	.+2      	; 0x3f60 <_Z10processKeyc+0xa6>
    3f5e:	ae c3       	rjmp	.+1884   	; 0x46bc <_Z10processKeyc+0x802>
				{
					if(key == 'A')
    3f60:	21 34       	cpi	r18, 0x41	; 65
    3f62:	39 f4       	brne	.+14     	; 0x3f72 <_Z10processKeyc+0xb8>
					{
						state = STATE_A;
    3f64:	82 e0       	ldi	r24, 0x02	; 2
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f6c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3f70:	a5 c3       	rjmp	.+1866   	; 0x46bc <_Z10processKeyc+0x802>
					}
					else if(key == 'B')
    3f72:	22 34       	cpi	r18, 0x42	; 66
    3f74:	39 f4       	brne	.+14     	; 0x3f84 <_Z10processKeyc+0xca>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    3f76:	82 e1       	ldi	r24, 0x12	; 18
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f7e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3f82:	9c c3       	rjmp	.+1848   	; 0x46bc <_Z10processKeyc+0x802>
					}
					else if(key == 'C')
    3f84:	23 34       	cpi	r18, 0x43	; 67
    3f86:	39 f4       	brne	.+14     	; 0x3f96 <_Z10processKeyc+0xdc>
					{
						state = STATE_C;
    3f88:	87 e0       	ldi	r24, 0x07	; 7
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f90:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3f94:	93 c3       	rjmp	.+1830   	; 0x46bc <_Z10processKeyc+0x802>
					}
					else if(key != '*')
    3f96:	2a 32       	cpi	r18, 0x2A	; 42
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <_Z10processKeyc+0xe2>
    3f9a:	90 c3       	rjmp	.+1824   	; 0x46bc <_Z10processKeyc+0x802>
					{
						value = key - '0';
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	20 53       	subi	r18, 0x30	; 48
    3fa0:	31 09       	sbc	r19, r1
    3fa2:	30 93 7b 04 	sts	0x047B, r19	; 0x80047b <_ZZ10processKeycE5value+0x1>
    3fa6:	20 93 7a 04 	sts	0x047A, r18	; 0x80047a <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							if(g_AM_enabled)
    3faa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_AM_enabled>
    3fae:	81 11       	cpse	r24, r1
							{
								setupPortsForF1975();
    3fb0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_Z18setupPortsForF1975v>
							}
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    3fb4:	83 e1       	ldi	r24, 0x13	; 19
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fbc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3fc0:	7d c3       	rjmp	.+1786   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_A:
			{
				state = STATE_SHUTDOWN;
    3fc2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fc6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>

				if(key == '0')
    3fca:	80 33       	cpi	r24, 0x30	; 48
    3fcc:	39 f4       	brne	.+14     	; 0x3fdc <_Z10processKeyc+0x122>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fd6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3fda:	70 c3       	rjmp	.+1760   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '1')
    3fdc:	81 33       	cpi	r24, 0x31	; 49
    3fde:	39 f4       	brne	.+14     	; 0x3fee <_Z10processKeyc+0x134>
				{
					state = STATE_START_TRANSMISSIONS;
    3fe0:	84 e0       	ldi	r24, 0x04	; 4
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fe8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3fec:	67 c3       	rjmp	.+1742   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '2')
    3fee:	82 33       	cpi	r24, 0x32	; 50
    3ff0:	39 f4       	brne	.+14     	; 0x4000 <_Z10processKeyc+0x146>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    3ff2:	85 e0       	ldi	r24, 0x05	; 5
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ffa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ffe:	5e c3       	rjmp	.+1724   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '3')
    4000:	83 33       	cpi	r24, 0x33	; 51
    4002:	39 f4       	brne	.+14     	; 0x4012 <_Z10processKeyc+0x158>
				{
					state = STATE_START_TRANSMITTING_NOW;
    4004:	86 e0       	ldi	r24, 0x06	; 6
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    400c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4010:	55 c3       	rjmp	.+1706   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key == '8') && setPasswordEnabled)
    4012:	88 33       	cpi	r24, 0x38	; 56
    4014:	09 f0       	breq	.+2      	; 0x4018 <_Z10processKeyc+0x15e>
    4016:	52 c3       	rjmp	.+1700   	; 0x46bc <_Z10processKeyc+0x802>
    4018:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ10processKeycE18setPasswordEnabled>
    401c:	88 23       	and	r24, r24
    401e:	09 f4       	brne	.+2      	; 0x4022 <_Z10processKeyc+0x168>
    4020:	4d c3       	rjmp	.+1690   	; 0x46bc <_Z10processKeyc+0x802>
				{
					state = STATE_SET_PASSWORD;
    4022:	80 e1       	ldi	r24, 0x10	; 16
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    402a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    402e:	46 c3       	rjmp	.+1676   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    4030:	80 ed       	ldi	r24, 0xD0	; 208
    4032:	82 0f       	add	r24, r18
    4034:	8a 30       	cpi	r24, 0x0A	; 10
    4036:	08 f5       	brcc	.+66     	; 0x407a <_Z10processKeyc+0x1c0>
				{
					value *= 10;
					value += key - '0';
    4038:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    403c:	50 91 7b 04 	lds	r21, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4040:	ca 01       	movw	r24, r20
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	44 0f       	add	r20, r20
    4048:	55 1f       	adc	r21, r21
    404a:	44 0f       	add	r20, r20
    404c:	55 1f       	adc	r21, r21
    404e:	44 0f       	add	r20, r20
    4050:	55 1f       	adc	r21, r21
    4052:	48 0f       	add	r20, r24
    4054:	59 1f       	adc	r21, r25
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	20 53       	subi	r18, 0x30	; 48
    405a:	31 09       	sbc	r19, r1
    405c:	42 0f       	add	r20, r18
    405e:	53 1f       	adc	r21, r19
    4060:	50 93 7b 04 	sts	0x047B, r21	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4064:	40 93 7a 04 	sts	0x047A, r20	; 0x80047a <_ZZ10processKeycE5value>
					digits++;
    4068:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE6digits>
    406c:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4070:	01 96       	adiw	r24, 0x01	; 1
    4072:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4076:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE6digits>
				}

				if(digits >= 2)
    407a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE6digits>
    407e:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4082:	02 97       	sbiw	r24, 0x02	; 2
    4084:	0c f4       	brge	.+2      	; 0x4088 <_Z10processKeyc+0x1ce>
    4086:	1a c3       	rjmp	.+1588   	; 0x46bc <_Z10processKeyc+0x802>
				{
					state = STATE_SHUTDOWN;
    4088:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    408c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    4090:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    4094:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4098:	98 13       	cpse	r25, r24
    409a:	10 c3       	rjmp	.+1568   	; 0x46bc <_Z10processKeyc+0x802>
					{
						state = STATE_SENTENCE_START;
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    40a8:	09 c3       	rjmp	.+1554   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    40aa:	83 32       	cpi	r24, 0x23	; 35
    40ac:	09 f0       	breq	.+2      	; 0x40b0 <_Z10processKeyc+0x1f6>
    40ae:	06 c3       	rjmp	.+1548   	; 0x46bc <_Z10processKeyc+0x802>
				{
					stopEventNow(PROGRAMMATIC);
    40b0:	82 e0       	ldi	r24, 0x02	; 2
    40b2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    40b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    40be:	fe c2       	rjmp	.+1532   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    40c0:	83 32       	cpi	r24, 0x23	; 35
    40c2:	09 f0       	breq	.+2      	; 0x40c6 <_Z10processKeyc+0x20c>
    40c4:	fb c2       	rjmp	.+1526   	; 0x46bc <_Z10processKeyc+0x802>
				{
					startEventNow(PROGRAMMATIC);
    40c6:	82 e0       	ldi	r24, 0x02	; 2
    40c8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    40cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    40d4:	f3 c2       	rjmp	.+1510   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    40d6:	83 32       	cpi	r24, 0x23	; 35
    40d8:	09 f0       	breq	.+2      	; 0x40dc <_Z10processKeyc+0x222>
    40da:	f0 c2       	rjmp	.+1504   	; 0x46bc <_Z10processKeyc+0x802>
				{
					startEventUsingRTC();
    40dc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    40e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40e4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    40e8:	e9 c2       	rjmp	.+1490   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    40ea:	83 32       	cpi	r24, 0x23	; 35
    40ec:	09 f0       	breq	.+2      	; 0x40f0 <_Z10processKeyc+0x236>
    40ee:	e6 c2       	rjmp	.+1484   	; 0x46bc <_Z10processKeyc+0x802>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    40f0:	62 e0       	ldi	r22, 0x02	; 2
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    40fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4102:	dc c2       	rjmp	.+1464   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    4104:	81 33       	cpi	r24, 0x31	; 49
    4106:	39 f4       	brne	.+14     	; 0x4116 <_Z10processKeyc+0x25c>
				{
					state = STATE_RECEIVING_CALLSIGN;
    4108:	88 e0       	ldi	r24, 0x08	; 8
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4110:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4114:	d3 c2       	rjmp	.+1446   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '2')
    4116:	82 33       	cpi	r24, 0x32	; 50
    4118:	39 f4       	brne	.+14     	; 0x4128 <_Z10processKeyc+0x26e>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    411a:	89 e0       	ldi	r24, 0x09	; 9
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4122:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4126:	ca c2       	rjmp	.+1428   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    4128:	83 33       	cpi	r24, 0x33	; 51
    412a:	39 f4       	brne	.+14     	; 0x413a <_Z10processKeyc+0x280>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    412c:	8d e0       	ldi	r24, 0x0D	; 13
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4134:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4138:	c1 c2       	rjmp	.+1410   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '4')
    413a:	84 33       	cpi	r24, 0x34	; 52
    413c:	39 f4       	brne	.+14     	; 0x414c <_Z10processKeyc+0x292>
				{
					state = STATE_RECEIVING_START_TIME;
    413e:	8a e0       	ldi	r24, 0x0A	; 10
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4146:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    414a:	b8 c2       	rjmp	.+1392   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '5')
    414c:	85 33       	cpi	r24, 0x35	; 53
    414e:	39 f4       	brne	.+14     	; 0x415e <_Z10processKeyc+0x2a4>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    4150:	8b e0       	ldi	r24, 0x0B	; 11
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4158:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    415c:	af c2       	rjmp	.+1374   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '6')
    415e:	86 33       	cpi	r24, 0x36	; 54
    4160:	69 f4       	brne	.+26     	; 0x417c <_Z10processKeyc+0x2c2>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    4162:	8c e0       	ldi	r24, 0x0C	; 12
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    416a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4176:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE6digits>
    417a:	a0 c2       	rjmp	.+1344   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == '9')
    417c:	89 33       	cpi	r24, 0x39	; 57
    417e:	39 f4       	brne	.+14     	; 0x418e <_Z10processKeyc+0x2d4>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    4180:	8e e0       	ldi	r24, 0x0E	; 14
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4188:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    418c:	97 c2       	rjmp	.+1326   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == 'B')
    418e:	82 34       	cpi	r24, 0x42	; 66
    4190:	39 f4       	brne	.+14     	; 0x41a0 <_Z10processKeyc+0x2e6>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
    4192:	8f e0       	ldi	r24, 0x0F	; 15
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    419a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    419e:	8e c2       	rjmp	.+1308   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else
				{
					state = STATE_SHUTDOWN;
    41a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    41a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    41a8:	89 c2       	rjmp	.+1298   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    41aa:	83 32       	cpi	r24, 0x23	; 35
    41ac:	c1 f4       	brne	.+48     	; 0x41de <_Z10processKeyc+0x324>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    41ae:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    41b2:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    41b6:	04 97       	sbiw	r24, 0x04	; 4
    41b8:	6c f0       	brlt	.+26     	; 0x41d4 <_Z10processKeyc+0x31a>
					{
						strcpy((char*)g_unlockCode, receivedString);
    41ba:	62 e6       	ldi	r22, 0x62	; 98
    41bc:	74 e0       	ldi	r23, 0x04	; 4
    41be:	81 e4       	ldi	r24, 0x41	; 65
    41c0:	95 e0       	ldi	r25, 0x05	; 5
    41c2:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    41c6:	41 e4       	ldi	r20, 0x41	; 65
    41c8:	55 e0       	ldi	r21, 0x05	; 5
    41ca:	6e e0       	ldi	r22, 0x0E	; 14
    41cc:	8b e9       	ldi	r24, 0x9B	; 155
    41ce:	95 e0       	ldi	r25, 0x05	; 5
    41d0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    41d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    41d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    41dc:	6f c2       	rjmp	.+1246   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    41de:	80 ed       	ldi	r24, 0xD0	; 208
    41e0:	82 0f       	add	r24, r18
    41e2:	8a 30       	cpi	r24, 0x0A	; 10
    41e4:	08 f0       	brcs	.+2      	; 0x41e8 <_Z10processKeyc+0x32e>
    41e6:	6a c2       	rjmp	.+1236   	; 0x46bc <_Z10processKeyc+0x802>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    41e8:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    41ec:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    41f0:	89 30       	cpi	r24, 0x09	; 9
    41f2:	91 05       	cpc	r25, r1
    41f4:	0c f0       	brlt	.+2      	; 0x41f8 <_Z10processKeyc+0x33e>
    41f6:	62 c2       	rjmp	.+1220   	; 0x46bc <_Z10processKeyc+0x802>
					{
						receivedString[stringLength++] = key;
    41f8:	ac 01       	movw	r20, r24
    41fa:	4f 5f       	subi	r20, 0xFF	; 255
    41fc:	5f 4f       	sbci	r21, 0xFF	; 255
    41fe:	50 93 7d 04 	sts	0x047D, r21	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    4202:	40 93 7c 04 	sts	0x047C, r20	; 0x80047c <_ZZ10processKeycE12stringLength>
    4206:	fc 01       	movw	r30, r24
    4208:	ee 59       	subi	r30, 0x9E	; 158
    420a:	fb 4f       	sbci	r31, 0xFB	; 251
    420c:	20 83       	st	Z, r18
						receivedString[stringLength] = '\0';
    420e:	fa 01       	movw	r30, r20
    4210:	ee 59       	subi	r30, 0x9E	; 158
    4212:	fb 4f       	sbci	r31, 0xFB	; 251
    4214:	10 82       	st	Z, r1
    4216:	52 c2       	rjmp	.+1188   	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    4218:	83 32       	cpi	r24, 0x23	; 35
    421a:	e1 f4       	brne	.+56     	; 0x4254 <_Z10processKeyc+0x39a>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    421c:	e2 e6       	ldi	r30, 0x62	; 98
    421e:	f4 e0       	ldi	r31, 0x04	; 4
    4220:	01 90       	ld	r0, Z+
    4222:	00 20       	and	r0, r0
    4224:	e9 f7       	brne	.-6      	; 0x4220 <_Z10processKeyc+0x366>
    4226:	31 97       	sbiw	r30, 0x01	; 1
    4228:	e2 56       	subi	r30, 0x62	; 98
    422a:	f4 40       	sbci	r31, 0x04	; 4
    422c:	75 97       	sbiw	r30, 0x15	; 21
    422e:	68 f4       	brcc	.+26     	; 0x424a <_Z10processKeyc+0x390>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    4230:	62 e6       	ldi	r22, 0x62	; 98
    4232:	74 e0       	ldi	r23, 0x04	; 4
    4234:	85 e2       	ldi	r24, 0x25	; 37
    4236:	95 e0       	ldi	r25, 0x05	; 5
    4238:	0e 94 18 30 	call	0x6030	; 0x6030 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    423c:	45 e2       	ldi	r20, 0x25	; 37
    423e:	55 e0       	ldi	r21, 0x05	; 5
    4240:	6b e0       	ldi	r22, 0x0B	; 11
    4242:	8b e9       	ldi	r24, 0x9B	; 155
    4244:	95 e0       	ldi	r25, 0x05	; 5
    4246:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    424a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    424e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4252:	34 c2       	rjmp	.+1128   	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4254:	80 ed       	ldi	r24, 0xD0	; 208
    4256:	82 0f       	add	r24, r18
    4258:	8a 30       	cpi	r24, 0x0A	; 10
    425a:	08 f0       	brcs	.+2      	; 0x425e <_Z10processKeyc+0x3a4>
    425c:	2f c2       	rjmp	.+1118   	; 0x46bc <_Z10processKeyc+0x802>
				{
					if(digits)
    425e:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE6digits>
    4262:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4266:	89 2b       	or	r24, r25
    4268:	c1 f1       	breq	.+112    	; 0x42da <_Z10processKeyc+0x420>
					{
						value = value * 10 + (key - '0');
    426a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    426e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4272:	ac 01       	movw	r20, r24
    4274:	44 0f       	add	r20, r20
    4276:	55 1f       	adc	r21, r21
    4278:	88 0f       	add	r24, r24
    427a:	99 1f       	adc	r25, r25
    427c:	88 0f       	add	r24, r24
    427e:	99 1f       	adc	r25, r25
    4280:	88 0f       	add	r24, r24
    4282:	99 1f       	adc	r25, r25
    4284:	84 0f       	add	r24, r20
    4286:	95 1f       	adc	r25, r21
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	20 53       	subi	r18, 0x30	; 48
    428c:	31 09       	sbc	r19, r1
    428e:	28 0f       	add	r18, r24
    4290:	39 1f       	adc	r19, r25
    4292:	30 93 7b 04 	sts	0x047B, r19	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4296:	20 93 7a 04 	sts	0x047A, r18	; 0x80047a <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    429a:	27 32       	cpi	r18, 0x27	; 39
    429c:	31 05       	cpc	r19, r1
    429e:	c4 f4       	brge	.+48     	; 0x42d0 <_Z10processKeyc+0x416>
    42a0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    42a4:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    42a8:	84 31       	cpi	r24, 0x14	; 20
    42aa:	91 05       	cpc	r25, r1
    42ac:	8c f4       	brge	.+34     	; 0x42d0 <_Z10processKeyc+0x416>
						{
							receivedString[stringLength] = keyMorse[value];
    42ae:	fc 01       	movw	r30, r24
    42b0:	ee 59       	subi	r30, 0x9E	; 158
    42b2:	fb 4f       	sbci	r31, 0xFB	; 251
    42b4:	d9 01       	movw	r26, r18
    42b6:	ab 59       	subi	r26, 0x9B	; 155
    42b8:	bd 4f       	sbci	r27, 0xFD	; 253
    42ba:	2c 91       	ld	r18, X
    42bc:	20 83       	st	Z, r18
							stringLength++;
    42be:	01 96       	adiw	r24, 0x01	; 1
    42c0:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    42c4:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    42c8:	fc 01       	movw	r30, r24
    42ca:	ee 59       	subi	r30, 0x9E	; 158
    42cc:	fb 4f       	sbci	r31, 0xFB	; 251
    42ce:	10 82       	st	Z, r1
						}

						digits = 0;
    42d0:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    42d4:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>
    42d8:	f1 c1       	rjmp	.+994    	; 0x46bc <_Z10processKeyc+0x802>
					}
					else
					{
						value = key - '0';
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	20 53       	subi	r18, 0x30	; 48
    42de:	31 09       	sbc	r19, r1
    42e0:	30 93 7b 04 	sts	0x047B, r19	; 0x80047b <_ZZ10processKeycE5value+0x1>
    42e4:	20 93 7a 04 	sts	0x047A, r18	; 0x80047a <_ZZ10processKeycE5value>
						digits = 1;
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    42f0:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE6digits>
    42f4:	e3 c1       	rjmp	.+966    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    42f6:	83 32       	cpi	r24, 0x23	; 35
    42f8:	f9 f4       	brne	.+62     	; 0x4338 <_Z10processKeyc+0x47e>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    42fa:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    42fe:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4302:	82 31       	cpi	r24, 0x12	; 18
    4304:	91 05       	cpc	r25, r1
    4306:	98 f4       	brcc	.+38     	; 0x432e <_Z10processKeyc+0x474>
					{
						Fox_t holdFox = (Fox_t)value;
    4308:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    430a:	ae 01       	movw	r20, r28
    430c:	4f 5f       	subi	r20, 0xFF	; 255
    430e:	5f 4f       	sbci	r21, 0xFF	; 255
    4310:	60 e1       	ldi	r22, 0x10	; 16
    4312:	8b e9       	ldi	r24, 0x9B	; 155
    4314:	95 e0       	ldi	r25, 0x05	; 5
    4316:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    431a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_fox>
    431e:	99 81       	ldd	r25, Y+1	; 0x01
    4320:	98 17       	cp	r25, r24
    4322:	29 f0       	breq	.+10     	; 0x432e <_Z10processKeyc+0x474>
						{
							setupForFox(&holdFox, START_NOTHING);
    4324:	60 e0       	ldi	r22, 0x00	; 0
    4326:	ce 01       	movw	r24, r28
    4328:	01 96       	adiw	r24, 0x01	; 1
    432a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
					state = STATE_SHUTDOWN;
    432e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4332:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4336:	c2 c1       	rjmp	.+900    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4338:	80 ed       	ldi	r24, 0xD0	; 208
    433a:	82 0f       	add	r24, r18
    433c:	8a 30       	cpi	r24, 0x0A	; 10
    433e:	08 f0       	brcs	.+2      	; 0x4342 <_Z10processKeyc+0x488>
    4340:	bd c1       	rjmp	.+890    	; 0x46bc <_Z10processKeyc+0x802>
				{
					value *= 10;
					value += key - '0';
    4342:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4346:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    434a:	ac 01       	movw	r20, r24
    434c:	44 0f       	add	r20, r20
    434e:	55 1f       	adc	r21, r21
    4350:	88 0f       	add	r24, r24
    4352:	99 1f       	adc	r25, r25
    4354:	88 0f       	add	r24, r24
    4356:	99 1f       	adc	r25, r25
    4358:	88 0f       	add	r24, r24
    435a:	99 1f       	adc	r25, r25
    435c:	84 0f       	add	r24, r20
    435e:	95 1f       	adc	r25, r21
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	20 53       	subi	r18, 0x30	; 48
    4364:	31 09       	sbc	r19, r1
    4366:	82 0f       	add	r24, r18
    4368:	93 1f       	adc	r25, r19
    436a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    436e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
    4372:	a4 c1       	rjmp	.+840    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    4374:	83 32       	cpi	r24, 0x23	; 35
    4376:	f9 f4       	brne	.+62     	; 0x43b6 <_Z10processKeyc+0x4fc>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    4378:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <g_utc_offset>
    437c:	41 95       	neg	r20
    437e:	6a e8       	ldi	r22, 0x8A	; 138
    4380:	75 e0       	ldi	r23, 0x05	; 5
    4382:	82 e6       	ldi	r24, 0x62	; 98
    4384:	94 e0       	ldi	r25, 0x04	; 4
    4386:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z18validateTimeStringPcPma>
    438a:	6b 01       	movw	r12, r22
    438c:	7c 01       	movw	r14, r24

					if(t)
    438e:	61 15       	cp	r22, r1
    4390:	71 05       	cpc	r23, r1
    4392:	81 05       	cpc	r24, r1
    4394:	91 05       	cpc	r25, r1
    4396:	51 f0       	breq	.+20     	; 0x43ac <_Z10processKeyc+0x4f2>
					{
						rv3028_set_epoch(t);
    4398:	0e 94 03 29 	call	0x5206	; 0x5206 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    439c:	c0 92 8a 05 	sts	0x058A, r12	; 0x80058a <g_current_epoch>
    43a0:	d0 92 8b 05 	sts	0x058B, r13	; 0x80058b <g_current_epoch+0x1>
    43a4:	e0 92 8c 05 	sts	0x058C, r14	; 0x80058c <g_current_epoch+0x2>
    43a8:	f0 92 8d 05 	sts	0x058D, r15	; 0x80058d <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    43ac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    43b0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    43b4:	83 c1       	rjmp	.+774    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    43b6:	80 ed       	ldi	r24, 0xD0	; 208
    43b8:	82 0f       	add	r24, r18
    43ba:	8a 30       	cpi	r24, 0x0A	; 10
    43bc:	08 f0       	brcs	.+2      	; 0x43c0 <_Z10processKeyc+0x506>
    43be:	7e c1       	rjmp	.+764    	; 0x46bc <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    43c0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    43c4:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    43c8:	88 32       	cpi	r24, 0x28	; 40
    43ca:	91 05       	cpc	r25, r1
    43cc:	0c f0       	brlt	.+2      	; 0x43d0 <_Z10processKeyc+0x516>
    43ce:	76 c1       	rjmp	.+748    	; 0x46bc <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    43d0:	fc 01       	movw	r30, r24
    43d2:	ee 59       	subi	r30, 0x9E	; 158
    43d4:	fb 4f       	sbci	r31, 0xFB	; 251
    43d6:	20 83       	st	Z, r18
						stringLength++;
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    43de:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    43e2:	fc 01       	movw	r30, r24
    43e4:	ee 59       	subi	r30, 0x9E	; 158
    43e6:	fb 4f       	sbci	r31, 0xFB	; 251
    43e8:	10 82       	st	Z, r1
    43ea:	68 c1       	rjmp	.+720    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    43ec:	83 32       	cpi	r24, 0x23	; 35
    43ee:	39 f5       	brne	.+78     	; 0x443e <_Z10processKeyc+0x584>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    43f0:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <g_utc_offset>
    43f4:	41 95       	neg	r20
    43f6:	66 e8       	ldi	r22, 0x86	; 134
    43f8:	75 e0       	ldi	r23, 0x05	; 5
    43fa:	82 e6       	ldi	r24, 0x62	; 98
    43fc:	94 e0       	ldi	r25, 0x04	; 4
    43fe:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z18validateTimeStringPcPma>

					if(s)
    4402:	61 15       	cp	r22, r1
    4404:	71 05       	cpc	r23, r1
    4406:	81 05       	cpc	r24, r1
    4408:	91 05       	cpc	r25, r1
    440a:	a1 f0       	breq	.+40     	; 0x4434 <_Z10processKeyc+0x57a>
					{
						g_event_start_epoch = s;
    440c:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <g_event_start_epoch>
    4410:	70 93 87 05 	sts	0x0587, r23	; 0x800587 <g_event_start_epoch+0x1>
    4414:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_event_start_epoch+0x2>
    4418:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    441c:	46 e8       	ldi	r20, 0x86	; 134
    441e:	55 e0       	ldi	r21, 0x05	; 5
    4420:	64 e1       	ldi	r22, 0x14	; 20
    4422:	8b e9       	ldi	r24, 0x9B	; 155
    4424:	95 e0       	ldi	r25, 0x05	; 5
    4426:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    442a:	63 e0       	ldi	r22, 0x03	; 3
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    4434:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4438:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    443c:	3f c1       	rjmp	.+638    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    443e:	80 ed       	ldi	r24, 0xD0	; 208
    4440:	82 0f       	add	r24, r18
    4442:	8a 30       	cpi	r24, 0x0A	; 10
    4444:	08 f0       	brcs	.+2      	; 0x4448 <_Z10processKeyc+0x58e>
    4446:	3a c1       	rjmp	.+628    	; 0x46bc <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4448:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    444c:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    4450:	88 32       	cpi	r24, 0x28	; 40
    4452:	91 05       	cpc	r25, r1
    4454:	0c f0       	brlt	.+2      	; 0x4458 <_Z10processKeyc+0x59e>
    4456:	32 c1       	rjmp	.+612    	; 0x46bc <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    4458:	fc 01       	movw	r30, r24
    445a:	ee 59       	subi	r30, 0x9E	; 158
    445c:	fb 4f       	sbci	r31, 0xFB	; 251
    445e:	20 83       	st	Z, r18
						stringLength++;
    4460:	01 96       	adiw	r24, 0x01	; 1
    4462:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    4466:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    446a:	fc 01       	movw	r30, r24
    446c:	ee 59       	subi	r30, 0x9E	; 158
    446e:	fb 4f       	sbci	r31, 0xFB	; 251
    4470:	10 82       	st	Z, r1
    4472:	24 c1       	rjmp	.+584    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    4474:	83 32       	cpi	r24, 0x23	; 35
    4476:	39 f5       	brne	.+78     	; 0x44c6 <_Z10processKeyc+0x60c>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4478:	40 91 81 05 	lds	r20, 0x0581	; 0x800581 <g_utc_offset>
    447c:	41 95       	neg	r20
    447e:	62 e8       	ldi	r22, 0x82	; 130
    4480:	75 e0       	ldi	r23, 0x05	; 5
    4482:	82 e6       	ldi	r24, 0x62	; 98
    4484:	94 e0       	ldi	r25, 0x04	; 4
    4486:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z18validateTimeStringPcPma>

					if(f)
    448a:	61 15       	cp	r22, r1
    448c:	71 05       	cpc	r23, r1
    448e:	81 05       	cpc	r24, r1
    4490:	91 05       	cpc	r25, r1
    4492:	a1 f0       	breq	.+40     	; 0x44bc <_Z10processKeyc+0x602>
					{
						g_event_finish_epoch = f;
    4494:	60 93 82 05 	sts	0x0582, r22	; 0x800582 <g_event_finish_epoch>
    4498:	70 93 83 05 	sts	0x0583, r23	; 0x800583 <g_event_finish_epoch+0x1>
    449c:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <g_event_finish_epoch+0x2>
    44a0:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    44a4:	42 e8       	ldi	r20, 0x82	; 130
    44a6:	55 e0       	ldi	r21, 0x05	; 5
    44a8:	65 e1       	ldi	r22, 0x15	; 21
    44aa:	8b e9       	ldi	r24, 0x9B	; 155
    44ac:	95 e0       	ldi	r25, 0x05	; 5
    44ae:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    44b2:	63 e0       	ldi	r22, 0x03	; 3
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    44bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    44c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    44c4:	fb c0       	rjmp	.+502    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    44c6:	80 ed       	ldi	r24, 0xD0	; 208
    44c8:	82 0f       	add	r24, r18
    44ca:	8a 30       	cpi	r24, 0x0A	; 10
    44cc:	08 f0       	brcs	.+2      	; 0x44d0 <_Z10processKeyc+0x616>
    44ce:	f6 c0       	rjmp	.+492    	; 0x46bc <_Z10processKeyc+0x802>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    44d0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10processKeycE12stringLength>
    44d4:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    44d8:	88 32       	cpi	r24, 0x28	; 40
    44da:	91 05       	cpc	r25, r1
    44dc:	0c f0       	brlt	.+2      	; 0x44e0 <_Z10processKeyc+0x626>
    44de:	ee c0       	rjmp	.+476    	; 0x46bc <_Z10processKeyc+0x802>
					{
						receivedString[stringLength] = key;
    44e0:	fc 01       	movw	r30, r24
    44e2:	ee 59       	subi	r30, 0x9E	; 158
    44e4:	fb 4f       	sbci	r31, 0xFB	; 251
    44e6:	20 83       	st	Z, r18
						stringLength++;
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10processKeycE12stringLength+0x1>
    44ee:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    44f2:	fc 01       	movw	r30, r24
    44f4:	ee 59       	subi	r30, 0x9E	; 158
    44f6:	fb 4f       	sbci	r31, 0xFB	; 251
    44f8:	10 82       	st	Z, r1
    44fa:	e0 c0       	rjmp	.+448    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    44fc:	83 32       	cpi	r24, 0x23	; 35
    44fe:	e9 f4       	brne	.+58     	; 0x453a <_Z10processKeyc+0x680>
				{
					if((value >= 0) && (value < 24))
    4500:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4504:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4508:	88 31       	cpi	r24, 0x18	; 24
    450a:	91 05       	cpc	r25, r1
    450c:	88 f4       	brcc	.+34     	; 0x4530 <_Z10processKeyc+0x676>
					{
						int8_t hold = value * digits;
    450e:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE6digits>
    4512:	98 9f       	mul	r25, r24
    4514:	80 2d       	mov	r24, r0
    4516:	11 24       	eor	r1, r1
    4518:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    451a:	ae 01       	movw	r20, r28
    451c:	4f 5f       	subi	r20, 0xFF	; 255
    451e:	5f 4f       	sbci	r21, 0xFF	; 255
    4520:	66 e1       	ldi	r22, 0x16	; 22
    4522:	8b e9       	ldi	r24, 0x9B	; 155
    4524:	95 e0       	ldi	r25, 0x05	; 5
    4526:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    452a:	89 81       	ldd	r24, Y+1	; 0x01
    452c:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    4530:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4534:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4538:	c1 c0       	rjmp	.+386    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    453a:	80 ed       	ldi	r24, 0xD0	; 208
    453c:	82 0f       	add	r24, r18
    453e:	8a 30       	cpi	r24, 0x0A	; 10
    4540:	c8 f4       	brcc	.+50     	; 0x4574 <_Z10processKeyc+0x6ba>
				{
					value *= 10;
					value += key - '0';
    4542:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4546:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    454a:	ac 01       	movw	r20, r24
    454c:	44 0f       	add	r20, r20
    454e:	55 1f       	adc	r21, r21
    4550:	88 0f       	add	r24, r24
    4552:	99 1f       	adc	r25, r25
    4554:	88 0f       	add	r24, r24
    4556:	99 1f       	adc	r25, r25
    4558:	88 0f       	add	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	84 0f       	add	r24, r20
    455e:	95 1f       	adc	r25, r21
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	20 53       	subi	r18, 0x30	; 48
    4564:	31 09       	sbc	r19, r1
    4566:	82 0f       	add	r24, r18
    4568:	93 1f       	adc	r25, r19
    456a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    456e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
    4572:	a4 c0       	rjmp	.+328    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if(key == 'B')
    4574:	22 34       	cpi	r18, 0x42	; 66
    4576:	09 f0       	breq	.+2      	; 0x457a <_Z10processKeyc+0x6c0>
    4578:	a1 c0       	rjmp	.+322    	; 0x46bc <_Z10processKeyc+0x802>
				{
					digits = -1;
    457a:	8f ef       	ldi	r24, 0xFF	; 255
    457c:	9f ef       	ldi	r25, 0xFF	; 255
    457e:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4582:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE6digits>
    4586:	9a c0       	rjmp	.+308    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    4588:	83 32       	cpi	r24, 0x23	; 35
    458a:	a1 f4       	brne	.+40     	; 0x45b4 <_Z10processKeyc+0x6fa>
				{
					g_AM_audio_frequency = value;
    458c:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4590:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    4594:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_AM_audio_frequency>
    4598:	0e 94 79 19 	call	0x32f2	; 0x32f2 <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    459c:	4e e7       	ldi	r20, 0x7E	; 126
    459e:	55 e0       	ldi	r21, 0x05	; 5
    45a0:	61 e1       	ldi	r22, 0x11	; 17
    45a2:	8b e9       	ldi	r24, 0x9B	; 155
    45a4:	95 e0       	ldi	r25, 0x05	; 5
    45a6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    45aa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    45ae:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    45b2:	84 c0       	rjmp	.+264    	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    45b4:	87 30       	cpi	r24, 0x07	; 7
    45b6:	08 f0       	brcs	.+2      	; 0x45ba <_Z10processKeyc+0x700>
    45b8:	81 c0       	rjmp	.+258    	; 0x46bc <_Z10processKeyc+0x802>
				{
					value = key - '0';
    45ba:	28 2f       	mov	r18, r24
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	20 53       	subi	r18, 0x30	; 48
    45c0:	31 09       	sbc	r19, r1
    45c2:	30 93 7b 04 	sts	0x047B, r19	; 0x80047b <_ZZ10processKeycE5value+0x1>
    45c6:	20 93 7a 04 	sts	0x047A, r18	; 0x80047a <_ZZ10processKeycE5value>
    45ca:	78 c0       	rjmp	.+240    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_GET_BATTERY_VOLTAGE:
			{
				if(key == '#')
    45cc:	83 32       	cpi	r24, 0x23	; 35
    45ce:	39 f4       	brne	.+14     	; 0x45de <_Z10processKeyc+0x724>
				{
					Fox_t f = REPORT_BATTERY;
    45d0:	83 e1       	ldi	r24, 0x13	; 19
    45d2:	89 83       	std	Y+1, r24	; 0x01
					setupForFox(&f, START_TRANSMISSIONS_NOW);
    45d4:	62 e0       	ldi	r22, 0x02	; 2
    45d6:	ce 01       	movw	r24, r28
    45d8:	01 96       	adiw	r24, 0x01	; 1
    45da:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z11setupForFoxP5Fox_t13EventAction_t>
				}

				state = STATE_SHUTDOWN;
    45de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    45e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;
    45e6:	6a c0       	rjmp	.+212    	; 0x46bc <_Z10processKeyc+0x802>

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    45e8:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <_ZZ10processKeycE6digits>
    45ec:	30 91 79 04 	lds	r19, 0x0479	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    45f0:	a9 01       	movw	r20, r18
    45f2:	4f 5f       	subi	r20, 0xFF	; 255
    45f4:	5f 4f       	sbci	r21, 0xFF	; 255
    45f6:	50 93 79 04 	sts	0x0479, r21	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    45fa:	40 93 78 04 	sts	0x0478, r20	; 0x800478 <_ZZ10processKeycE6digits>
    45fe:	f9 01       	movw	r30, r18
    4600:	ef 5b       	subi	r30, 0xBF	; 191
    4602:	fa 4f       	sbci	r31, 0xFA	; 250
    4604:	90 81       	ld	r25, Z
    4606:	89 13       	cpse	r24, r25
    4608:	12 c0       	rjmp	.+36     	; 0x462e <_Z10processKeyc+0x774>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    460a:	e1 e4       	ldi	r30, 0x41	; 65
    460c:	f5 e0       	ldi	r31, 0x05	; 5
    460e:	01 90       	ld	r0, Z+
    4610:	00 20       	and	r0, r0
    4612:	e9 f7       	brne	.-6      	; 0x460e <_Z10processKeyc+0x754>
    4614:	31 97       	sbiw	r30, 0x01	; 1
    4616:	e1 54       	subi	r30, 0x41	; 65
    4618:	f5 40       	sbci	r31, 0x05	; 5
    461a:	e4 17       	cp	r30, r20
    461c:	f5 07       	cpc	r31, r21
    461e:	09 f0       	breq	.+2      	; 0x4622 <_Z10processKeyc+0x768>
    4620:	4d c0       	rjmp	.+154    	; 0x46bc <_Z10processKeyc+0x802>
					{
						g_DTMF_unlocked = TRUE;
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    4628:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <_ZZ10processKeycE18setPasswordEnabled>
    462c:	47 c0       	rjmp	.+142    	; 0x46bc <_Z10processKeyc+0x802>
					}
				}
				else
				{
					digits = 0;
    462e:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE6digits+0x1>
    4632:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    4636:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    463a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    463e:	3e c0       	rjmp	.+124    	; 0x46bc <_Z10processKeyc+0x802>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    4640:	83 32       	cpi	r24, 0x23	; 35
    4642:	01 f5       	brne	.+64     	; 0x4684 <_Z10processKeyc+0x7ca>
				{
					if(value == 0)
    4644:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4648:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	41 f4       	brne	.+16     	; 0x4660 <_Z10processKeyc+0x7a6>
					{
						setAtten(0);
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <g_sendAMmodulationConstantly>
    465e:	0d c0       	rjmp	.+26     	; 0x467a <_Z10processKeyc+0x7c0>
					}
					else if(value > 315)
    4660:	8c 33       	cpi	r24, 0x3C	; 60
    4662:	21 e0       	ldi	r18, 0x01	; 1
    4664:	92 07       	cpc	r25, r18
    4666:	3c f0       	brlt	.+14     	; 0x4676 <_Z10processKeyc+0x7bc>
					{
						g_sendAMmodulationConstantly = FALSE;
    4668:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    466c:	8b e3       	ldi	r24, 0x3B	; 59
    466e:	91 e0       	ldi	r25, 0x01	; 1
    4670:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z8setAttenj>
    4674:	02 c0       	rjmp	.+4      	; 0x467a <_Z10processKeyc+0x7c0>
					}
					else
					{
						setAtten(value);
    4676:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    467a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    467e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4682:	1c c0       	rjmp	.+56     	; 0x46bc <_Z10processKeyc+0x802>
				}
				else if((key >= '0') && (key <= '9'))
    4684:	80 ed       	ldi	r24, 0xD0	; 208
    4686:	82 0f       	add	r24, r18
    4688:	8a 30       	cpi	r24, 0x0A	; 10
    468a:	c0 f4       	brcc	.+48     	; 0x46bc <_Z10processKeyc+0x802>
				{
					value *= 10;
					value += key - '0';
    468c:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <_ZZ10processKeycE5value>
    4690:	50 91 7b 04 	lds	r21, 0x047B	; 0x80047b <_ZZ10processKeycE5value+0x1>
    4694:	ca 01       	movw	r24, r20
    4696:	88 0f       	add	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	44 0f       	add	r20, r20
    469c:	55 1f       	adc	r21, r21
    469e:	44 0f       	add	r20, r20
    46a0:	55 1f       	adc	r21, r21
    46a2:	44 0f       	add	r20, r20
    46a4:	55 1f       	adc	r21, r21
    46a6:	84 0f       	add	r24, r20
    46a8:	95 1f       	adc	r25, r21
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	20 53       	subi	r18, 0x30	; 48
    46ae:	31 09       	sbc	r19, r1
    46b0:	82 0f       	add	r24, r18
    46b2:	93 1f       	adc	r25, r19
    46b4:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE5value+0x1>
    46b8:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    46bc:	0f 90       	pop	r0
    46be:	df 91       	pop	r29
    46c0:	cf 91       	pop	r28
    46c2:	ff 90       	pop	r15
    46c4:	ef 90       	pop	r14
    46c6:	df 90       	pop	r13
    46c8:	cf 90       	pop	r12
    46ca:	08 95       	ret

000046cc <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    46cc:	2f 92       	push	r2
    46ce:	3f 92       	push	r3
    46d0:	4f 92       	push	r4
    46d2:	5f 92       	push	r5
    46d4:	6f 92       	push	r6
    46d6:	7f 92       	push	r7
    46d8:	8f 92       	push	r8
    46da:	9f 92       	push	r9
    46dc:	af 92       	push	r10
    46de:	bf 92       	push	r11
    46e0:	cf 92       	push	r12
    46e2:	df 92       	push	r13
    46e4:	ef 92       	push	r14
    46e6:	ff 92       	push	r15
    46e8:	0f 93       	push	r16
    46ea:	1f 93       	push	r17
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
    46f0:	1f 92       	push	r1
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
    46f6:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_perform_EEPROM_reset>
    46fa:	88 23       	and	r24, r24
    46fc:	61 f0       	breq	.+24     	; 0x4716 <_Z4loopv+0x4a>
		{
			g_perform_EEPROM_reset = FALSE;
    46fe:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_perform_EEPROM_reset>
			ee_mgr.resetEEPROMValues();
    4702:	8b e9       	ldi	r24, 0x9B	; 155
    4704:	95 e0       	ldi	r25, 0x05	; 5
    4706:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    470a:	60 e0       	ldi	r22, 0x00	; 0
    470c:	71 ee       	ldi	r23, 0xE1	; 225
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z12linkbus_initm>
		}
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    4716:	0e 94 c6 19 	call	0x338c	; 0x338c <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(g_goertzel.SamplesReady())
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	95 e0       	ldi	r25, 0x05	; 5
    471e:	0e 94 be 06 	call	0xd7c	; 0xd7c <_ZN8Goertzel12SamplesReadyEv>
    4722:	88 23       	and	r24, r24
    4724:	09 f4       	brne	.+2      	; 0x4728 <_Z4loopv+0x5c>
    4726:	36 c1       	rjmp	.+620    	; 0x4994 <_Z4loopv+0x2c8>
			static char lastKey = '\0';
			static int checkCount = 10;                             /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4728:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <g_temperature_check_countdown>
    472c:	81 11       	cpse	r24, r1
    472e:	30 c0       	rjmp	.+96     	; 0x4790 <_Z4loopv+0xc4>
			{

				setUpSampling(TEMPERATURE_SAMPLING, FALSE);
    4730:	60 e0       	ldi	r22, 0x00	; 0
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_Z13setUpSampling12ADCChannel_th>
				int8_t temp = (int8_t)getTemp();
    4738:	0e 94 b6 14 	call	0x296c	; 0x296c <_Z7getTempv>
    473c:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__fixsfsi>
				if(temp != g_temperature)
    4740:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_temperature>
    4744:	68 17       	cp	r22, r24
    4746:	e1 f0       	breq	.+56     	; 0x4780 <_Z4loopv+0xb4>
				{
					g_temperature = temp;
    4748:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    474c:	6a 31       	cpi	r22, 0x1A	; 26
    474e:	14 f0       	brlt	.+4      	; 0x4754 <_Z4loopv+0x88>
    4750:	69 51       	subi	r22, 0x19	; 25
    4752:	03 c0       	rjmp	.+6      	; 0x475a <_Z4loopv+0x8e>
    4754:	89 e1       	ldi	r24, 0x19	; 25
    4756:	86 1b       	sub	r24, r22
    4758:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    475a:	06 2e       	mov	r0, r22
    475c:	00 0c       	add	r0, r0
    475e:	77 0b       	sbc	r23, r23
    4760:	8b e9       	ldi	r24, 0x9B	; 155
    4762:	95 e0       	ldi	r25, 0x05	; 5
    4764:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    4768:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <g_rv3028_offset>
    476c:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <g_rv3028_offset+0x1>
    4770:	a9 01       	movw	r20, r18
    4772:	48 0f       	add	r20, r24
    4774:	51 1d       	adc	r21, r1
    4776:	87 fd       	sbrc	r24, 7
    4778:	5a 95       	dec	r21
    477a:	ca 01       	movw	r24, r20
    477c:	0e 94 3c 2a 	call	0x5478	; 0x5478 <_Z21rv3028_set_offset_RAMj>
				}

				setUpSampling(AUDIO_SAMPLING, FALSE);
    4780:	60 e0       	ldi	r22, 0x00	; 0
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_Z13setUpSampling12ADCChannel_th>
				g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    4788:	8b e3       	ldi	r24, 0x3B	; 59
    478a:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_temperature_check_countdown>
    478e:	7f c1       	rjmp	.+766    	; 0x4a8e <_Z4loopv+0x3c2>
			}
			else if(!g_voltage_check_countdown)
    4790:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_voltage_check_countdown>
    4794:	81 11       	cpse	r24, r1
    4796:	7b c1       	rjmp	.+758    	; 0x4a8e <_Z4loopv+0x3c2>
			{
				setUpSampling(VOLTAGE_SAMPLING, FALSE);
    4798:	60 e0       	ldi	r22, 0x00	; 0
    479a:	82 e0       	ldi	r24, 0x02	; 2
    479c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_Z13setUpSampling12ADCChannel_th>
				g_voltage = getVoltage();
    47a0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_Z10getVoltagev>
    47a4:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <g_voltage+0x1>
    47a8:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_voltage>
				setUpSampling(AUDIO_SAMPLING, FALSE);
    47ac:	60 e0       	ldi	r22, 0x00	; 0
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_Z13setUpSampling12ADCChannel_th>
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    47b4:	8b e0       	ldi	r24, 0x0B	; 11
    47b6:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <g_voltage_check_countdown>
    47ba:	69 c1       	rjmp	.+722    	; 0x4a8e <_Z4loopv+0x3c2>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    47bc:	f5 01       	movw	r30, r10
    47be:	41 91       	ld	r20, Z+
    47c0:	51 91       	ld	r21, Z+
    47c2:	61 91       	ld	r22, Z+
    47c4:	71 91       	ld	r23, Z+
    47c6:	5f 01       	movw	r10, r30
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	95 e0       	ldi	r25, 0x05	; 5
    47cc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	95 e0       	ldi	r25, 0x05	; 5
    47d4:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN8Goertzel10Magnitude2Ev>
    47d8:	e6 2e       	mov	r14, r22
    47da:	f7 2e       	mov	r15, r23
    47dc:	d8 2e       	mov	r13, r24
    47de:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    47e0:	27 2d       	mov	r18, r7
    47e2:	36 2d       	mov	r19, r6
    47e4:	45 2d       	mov	r20, r5
    47e6:	54 2d       	mov	r21, r4
    47e8:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__gesf2>
    47ec:	18 16       	cp	r1, r24
    47ee:	b4 f4       	brge	.+44     	; 0x481c <_Z4loopv+0x150>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	34 e2       	ldi	r19, 0x24	; 36
    47f4:	44 e7       	ldi	r20, 0x74	; 116
    47f6:	59 e4       	ldi	r21, 0x49	; 73
    47f8:	6e 2d       	mov	r22, r14
    47fa:	7f 2d       	mov	r23, r15
    47fc:	8d 2d       	mov	r24, r13
    47fe:	9c 2d       	mov	r25, r12
    4800:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__gesf2>
    4804:	18 16       	cp	r1, r24
    4806:	34 f4       	brge	.+12     	; 0x4814 <_Z4loopv+0x148>
    4808:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    480a:	7e 2c       	mov	r7, r14
    480c:	6f 2c       	mov	r6, r15
    480e:	5d 2c       	mov	r5, r13
    4810:	4c 2c       	mov	r4, r12
    4812:	04 c0       	rjmp	.+8      	; 0x481c <_Z4loopv+0x150>
    4814:	7e 2c       	mov	r7, r14
    4816:	6f 2c       	mov	r6, r15
    4818:	5d 2c       	mov	r5, r13
    481a:	4c 2c       	mov	r4, r12
				g_voltage = getVoltage();
				setUpSampling(AUDIO_SAMPLING, FALSE);
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
			}

			for(int i = 0; i < 4; i++)
    481c:	0f 5f       	subi	r16, 0xFF	; 255
    481e:	1f 4f       	sbci	r17, 0xFF	; 255
    4820:	04 30       	cpi	r16, 0x04	; 4
    4822:	11 05       	cpc	r17, r1
    4824:	59 f6       	brne	.-106    	; 0x47bc <_Z4loopv+0xf0>
    4826:	43 c1       	rjmp	.+646    	; 0x4aae <_Z4loopv+0x3e2>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4828:	f5 01       	movw	r30, r10
    482a:	41 91       	ld	r20, Z+
    482c:	51 91       	ld	r21, Z+
    482e:	61 91       	ld	r22, Z+
    4830:	71 91       	ld	r23, Z+
    4832:	5f 01       	movw	r10, r30
    4834:	80 e0       	ldi	r24, 0x00	; 0
    4836:	95 e0       	ldi	r25, 0x05	; 5
    4838:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	95 e0       	ldi	r25, 0x05	; 5
    4840:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN8Goertzel10Magnitude2Ev>
    4844:	e6 2e       	mov	r14, r22
    4846:	f7 2e       	mov	r15, r23
    4848:	d8 2e       	mov	r13, r24
    484a:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    484c:	25 2d       	mov	r18, r5
    484e:	34 2d       	mov	r19, r4
    4850:	43 2d       	mov	r20, r3
    4852:	52 2d       	mov	r21, r2
    4854:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__gesf2>
    4858:	18 16       	cp	r1, r24
    485a:	b4 f4       	brge	.+44     	; 0x4888 <_Z4loopv+0x1bc>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	34 e2       	ldi	r19, 0x24	; 36
    4860:	44 e7       	ldi	r20, 0x74	; 116
    4862:	59 e4       	ldi	r21, 0x49	; 73
    4864:	6e 2d       	mov	r22, r14
    4866:	7f 2d       	mov	r23, r15
    4868:	8d 2d       	mov	r24, r13
    486a:	9c 2d       	mov	r25, r12
    486c:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <__gesf2>
    4870:	18 16       	cp	r1, r24
    4872:	34 f4       	brge	.+12     	; 0x4880 <_Z4loopv+0x1b4>
    4874:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    4876:	5e 2c       	mov	r5, r14
    4878:	4f 2c       	mov	r4, r15
    487a:	3d 2c       	mov	r3, r13
    487c:	2c 2c       	mov	r2, r12
    487e:	04 c0       	rjmp	.+8      	; 0x4888 <_Z4loopv+0x1bc>
    4880:	5e 2c       	mov	r5, r14
    4882:	4f 2c       	mov	r4, r15
    4884:	3d 2c       	mov	r3, r13
    4886:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    4888:	0f 5f       	subi	r16, 0xFF	; 255
    488a:	1f 4f       	sbci	r17, 0xFF	; 255
    488c:	04 30       	cpi	r16, 0x04	; 4
    488e:	11 05       	cpc	r17, r1
    4890:	59 f6       	brne	.-106    	; 0x4828 <_Z4loopv+0x15c>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    4892:	77 20       	and	r7, r7
    4894:	0c f4       	brge	.+2      	; 0x4898 <_Z4loopv+0x1cc>
    4896:	76 c0       	rjmp	.+236    	; 0x4984 <_Z4loopv+0x2b8>
				{
					char newKey = key[4 * y + x];
    4898:	c4 01       	movw	r24, r8
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	84 57       	subi	r24, 0x74	; 116
    48a4:	9d 4f       	sbci	r25, 0xFD	; 253
    48a6:	fc 01       	movw	r30, r24
    48a8:	e6 0d       	add	r30, r6
    48aa:	f7 1d       	adc	r31, r7
    48ac:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    48ae:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ4loopvE7lastKey>
    48b2:	18 13       	cpse	r17, r24
    48b4:	17 c0       	rjmp	.+46     	; 0x48e4 <_Z4loopv+0x218>
					{
						checkCount++;
    48b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    48ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    48be:	01 96       	adiw	r24, 0x01	; 1
    48c0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    48c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    48c8:	03 97       	sbiw	r24, 0x03	; 3
    48ca:	61 f4       	brne	.+24     	; 0x48e4 <_Z4loopv+0x218>
						{
							g_dtmf_detected = TRUE;
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_dtmf_detected>
							quietCount = 0;
    48d2:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    48d6:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    48da:	10 93 09 05 	sts	0x0509, r17	; 0x800509 <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    48de:	81 2f       	mov	r24, r17
    48e0:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    48e4:	10 93 80 04 	sts	0x0480, r17	; 0x800480 <_ZZ4loopvE7lastKey>
    48e8:	4d c0       	rjmp	.+154    	; 0x4984 <_Z4loopv+0x2b8>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    48ea:	c0 90 01 05 	lds	r12, 0x0501	; 0x800501 <g_tick_count>
    48ee:	d0 90 02 05 	lds	r13, 0x0502	; 0x800502 <g_tick_count+0x1>
    48f2:	e0 90 03 05 	lds	r14, 0x0503	; 0x800503 <g_tick_count+0x2>
    48f6:	f0 90 04 05 	lds	r15, 0x0504	; 0x800504 <g_tick_count+0x3>
    48fa:	80 90 05 05 	lds	r8, 0x0505	; 0x800505 <g_last>
    48fe:	90 90 06 05 	lds	r9, 0x0506	; 0x800506 <g_last+0x1>
    4902:	a0 90 07 05 	lds	r10, 0x0507	; 0x800507 <g_last+0x2>
    4906:	b0 90 08 05 	lds	r11, 0x0508	; 0x800508 <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    490a:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ4loopvE10quietCount>
    490e:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    4912:	9c 01       	movw	r18, r24
    4914:	2f 5f       	subi	r18, 0xFF	; 255
    4916:	3f 4f       	sbci	r19, 0xFF	; 255
    4918:	30 93 7f 04 	sts	0x047F, r19	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    491c:	20 93 7e 04 	sts	0x047E, r18	; 0x80047e <_ZZ4loopvE10quietCount>
    4920:	03 97       	sbiw	r24, 0x03	; 3
    4922:	84 f1       	brlt	.+96     	; 0x4984 <_Z4loopv+0x2b8>
				{
					g_dtmf_detected = FALSE;
    4924:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    4928:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    492c:	88 23       	and	r24, r24
    492e:	29 f0       	breq	.+10     	; 0x493a <_Z4loopv+0x26e>
    4930:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <g_LED_enunciating>
    4934:	88 23       	and	r24, r24
    4936:	09 f4       	brne	.+2      	; 0x493a <_Z4loopv+0x26e>
    4938:	cd c0       	rjmp	.+410    	; 0x4ad4 <_Z4loopv+0x408>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    493a:	c8 18       	sub	r12, r8
    493c:	d9 08       	sbc	r13, r9
    493e:	ea 08       	sbc	r14, r10
    4940:	fb 08       	sbc	r15, r11
    4942:	fc ed       	ldi	r31, 0xDC	; 220
    4944:	cf 16       	cp	r12, r31
    4946:	f5 e0       	ldi	r31, 0x05	; 5
    4948:	df 06       	cpc	r13, r31
    494a:	e1 04       	cpc	r14, r1
    494c:	f1 04       	cpc	r15, r1
    494e:	20 f4       	brcc	.+8      	; 0x4958 <_Z4loopv+0x28c>
					{
						checkCount = 0;
    4950:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4954:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    4958:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ4loopvE10quietCount+0x1>
    495c:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4960:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <g_tick_count>
    4964:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <g_tick_count+0x1>
    4968:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <g_tick_count+0x2>
    496c:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <g_tick_count+0x3>
    4970:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <g_last>
    4974:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <g_last+0x1>
    4978:	a0 93 07 05 	sts	0x0507, r26	; 0x800507 <g_last+0x2>
    497c:	b0 93 08 05 	sts	0x0508, r27	; 0x800508 <g_last+0x3>
					lastKey = '\0';
    4980:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    4984:	ea e7       	ldi	r30, 0x7A	; 122
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	88 60       	ori	r24, 0x08	; 8
    498c:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    498e:	80 81       	ld	r24, Z
    4990:	80 64       	ori	r24, 0x40	; 64
    4992:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(g_transmissions_disabled)
    4994:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_transmissions_disabled>
    4998:	88 23       	and	r24, r24
    499a:	09 f4       	brne	.+2      	; 0x499e <_Z4loopv+0x2d2>
    499c:	a0 c0       	rjmp	.+320    	; 0x4ade <_Z4loopv+0x412>
	{
		if(g_dtmf_detected)
    499e:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_dtmf_detected>
    49a2:	88 23       	and	r24, r24
    49a4:	b1 f0       	breq	.+44     	; 0x49d2 <_Z4loopv+0x306>
		{
			BOOL repeat = FALSE;
    49a6:	19 82       	std	Y+1, r1	; 0x01
			makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    49a8:	40 e0       	ldi	r20, 0x00	; 0
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	be 01       	movw	r22, r28
    49ae:	6f 5f       	subi	r22, 0xFF	; 255
    49b0:	7f 4f       	sbci	r23, 0xFF	; 255
    49b2:	8b e2       	ldi	r24, 0x2B	; 43
    49b4:	92 e0       	ldi	r25, 0x02	; 2
    49b6:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    49ba:	8c e8       	ldi	r24, 0x8C	; 140
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_code_throttle+0x1>
    49c2:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_code_throttle>
			g_LED_enunciating = TRUE;
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <g_LED_enunciating>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    49cc:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_config_error>
    49d0:	86 c0       	rjmp	.+268    	; 0x4ade <_Z4loopv+0x412>
		}
		else
		{
			ConfigurationState_t hold_config_err = g_config_error;
    49d2:	10 91 3d 05 	lds	r17, 0x053D	; 0x80053d <g_config_error>
			g_config_error = clockConfigurationCheck();
    49d6:	0e 94 8f 10 	call	0x211e	; 0x211e <_Z23clockConfigurationCheckv>
    49da:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <g_config_error>

			if(g_config_error != hold_config_err)
    49de:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_config_error>
    49e2:	18 17       	cp	r17, r24
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <_Z4loopv+0x31c>
    49e6:	7b c0       	rjmp	.+246    	; 0x4ade <_Z4loopv+0x412>
			{
				if(g_config_error == CONFIGURATION_ERROR)
    49e8:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_config_error>
    49ec:	82 30       	cpi	r24, 0x02	; 2
    49ee:	a1 f4       	brne	.+40     	; 0x4a18 <_Z4loopv+0x34c>
				{
					BOOL repeat = TRUE;
    49f0:	11 e0       	ldi	r17, 0x01	; 1
    49f2:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    49f4:	40 e0       	ldi	r20, 0x00	; 0
    49f6:	50 e0       	ldi	r21, 0x00	; 0
    49f8:	be 01       	movw	r22, r28
    49fa:	6f 5f       	subi	r22, 0xFF	; 255
    49fc:	7f 4f       	sbci	r23, 0xFF	; 255
    49fe:	8d e2       	ldi	r24, 0x2D	; 45
    4a00:	92 e0       	ldi	r25, 0x02	; 2
    4a02:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4a06:	8c e8       	ldi	r24, 0x8C	; 140
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_code_throttle+0x1>
    4a0e:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_code_throttle>
					g_LED_enunciating = TRUE;
    4a12:	10 93 8e 05 	sts	0x058E, r17	; 0x80058e <g_LED_enunciating>
    4a16:	63 c0       	rjmp	.+198    	; 0x4ade <_Z4loopv+0x412>
				}
				else if(g_config_error == WAITING_FOR_START)
    4a18:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_config_error>
    4a1c:	81 30       	cpi	r24, 0x01	; 1
    4a1e:	a1 f4       	brne	.+40     	; 0x4a48 <_Z4loopv+0x37c>
				{
					BOOL repeat = TRUE;
    4a20:	11 e0       	ldi	r17, 0x01	; 1
    4a22:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	50 e0       	ldi	r21, 0x00	; 0
    4a28:	be 01       	movw	r22, r28
    4a2a:	6f 5f       	subi	r22, 0xFF	; 255
    4a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2e:	8f e2       	ldi	r24, 0x2F	; 47
    4a30:	92 e0       	ldi	r25, 0x02	; 2
    4a32:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    4a36:	86 e4       	ldi	r24, 0x46	; 70
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_code_throttle+0x1>
    4a3e:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_code_throttle>
					g_LED_enunciating = TRUE;
    4a42:	10 93 8e 05 	sts	0x058E, r17	; 0x80058e <g_LED_enunciating>
    4a46:	4b c0       	rjmp	.+150    	; 0x4ade <_Z4loopv+0x412>
				}
				else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    4a48:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_config_error>
    4a4c:	84 30       	cpi	r24, 0x04	; 4
    4a4e:	21 f0       	breq	.+8      	; 0x4a58 <_Z4loopv+0x38c>
    4a50:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_config_error>
    4a54:	83 30       	cpi	r24, 0x03	; 3
    4a56:	a1 f4       	brne	.+40     	; 0x4a80 <_Z4loopv+0x3b4>
				{
					BOOL repeat = TRUE;
    4a58:	11 e0       	ldi	r17, 0x01	; 1
    4a5a:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	be 01       	movw	r22, r28
    4a62:	6f 5f       	subi	r22, 0xFF	; 255
    4a64:	7f 4f       	sbci	r23, 0xFF	; 255
    4a66:	8d e2       	ldi	r24, 0x2D	; 45
    4a68:	92 e0       	ldi	r25, 0x02	; 2
    4a6a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4a6e:	8c e8       	ldi	r24, 0x8C	; 140
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_code_throttle+0x1>
    4a76:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_code_throttle>
					g_LED_enunciating = TRUE;
    4a7a:	10 93 8e 05 	sts	0x058E, r17	; 0x80058e <g_LED_enunciating>
    4a7e:	2f c0       	rjmp	.+94     	; 0x4ade <_Z4loopv+0x412>
				}
				else
				{
					g_LED_enunciating = FALSE;
    4a80:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <g_LED_enunciating>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	8d e0       	ldi	r24, 0x0D	; 13
    4a88:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
				}
			}
		}
	}
}
    4a8c:	28 c0       	rjmp	.+80     	; 0x4ade <_Z4loopv+0x412>
    4a8e:	0f 2e       	mov	r0, r31
    4a90:	fc e9       	ldi	r31, 0x9C	; 156
    4a92:	af 2e       	mov	r10, r31
    4a94:	f2 e0       	ldi	r31, 0x02	; 2
    4a96:	bf 2e       	mov	r11, r31
    4a98:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4a9a:	00 e0       	ldi	r16, 0x00	; 0
    4a9c:	10 e0       	ldi	r17, 0x00	; 0
    4a9e:	88 24       	eor	r8, r8
    4aa0:	8a 94       	dec	r8
    4aa2:	98 2c       	mov	r9, r8
    4aa4:	71 2c       	mov	r7, r1
    4aa6:	61 2c       	mov	r6, r1
    4aa8:	51 2c       	mov	r5, r1
    4aaa:	41 2c       	mov	r4, r1
    4aac:	87 ce       	rjmp	.-754    	; 0x47bc <_Z4loopv+0xf0>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    4aae:	99 20       	and	r9, r9
    4ab0:	0c f4       	brge	.+2      	; 0x4ab4 <_Z4loopv+0x3e8>
    4ab2:	1b cf       	rjmp	.-458    	; 0x48ea <_Z4loopv+0x21e>
    4ab4:	0f 2e       	mov	r0, r31
    4ab6:	fc ea       	ldi	r31, 0xAC	; 172
    4ab8:	af 2e       	mov	r10, r31
    4aba:	f2 e0       	ldi	r31, 0x02	; 2
    4abc:	bf 2e       	mov	r11, r31
    4abe:	f0 2d       	mov	r31, r0
    4ac0:	00 e0       	ldi	r16, 0x00	; 0
    4ac2:	10 e0       	ldi	r17, 0x00	; 0
    4ac4:	66 24       	eor	r6, r6
    4ac6:	6a 94       	dec	r6
    4ac8:	76 2c       	mov	r7, r6
    4aca:	51 2c       	mov	r5, r1
    4acc:	41 2c       	mov	r4, r1
    4ace:	31 2c       	mov	r3, r1
    4ad0:	21 2c       	mov	r2, r1
    4ad2:	aa ce       	rjmp	.-684    	; 0x4828 <_Z4loopv+0x15c>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    4ad4:	60 e0       	ldi	r22, 0x00	; 0
    4ad6:	8d e0       	ldi	r24, 0x0D	; 13
    4ad8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>
    4adc:	2e cf       	rjmp	.-420    	; 0x493a <_Z4loopv+0x26e>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
				}
			}
		}
	}
}
    4ade:	0f 90       	pop	r0
    4ae0:	df 91       	pop	r29
    4ae2:	cf 91       	pop	r28
    4ae4:	1f 91       	pop	r17
    4ae6:	0f 91       	pop	r16
    4ae8:	ff 90       	pop	r15
    4aea:	ef 90       	pop	r14
    4aec:	df 90       	pop	r13
    4aee:	cf 90       	pop	r12
    4af0:	bf 90       	pop	r11
    4af2:	af 90       	pop	r10
    4af4:	9f 90       	pop	r9
    4af6:	8f 90       	pop	r8
    4af8:	7f 90       	pop	r7
    4afa:	6f 90       	pop	r6
    4afc:	5f 90       	pop	r5
    4afe:	4f 90       	pop	r4
    4b00:	3f 90       	pop	r3
    4b02:	2f 90       	pop	r2
    4b04:	08 95       	ret

00004b06 <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    4b06:	63 e0       	ldi	r22, 0x03	; 3
    4b08:	84 e0       	ldi	r24, 0x04	; 4
    4b0a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>

	pinMode(PIN_LED1, OUTPUT);                  /* This led blinks when off cycle and blinks with code when on cycle. */
    4b0e:	61 e0       	ldi	r22, 0x01	; 1
    4b10:	8d e0       	ldi	r24, 0x0D	; 13
    4b12:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    4b16:	60 e0       	ldi	r22, 0x00	; 0
    4b18:	8d e0       	ldi	r24, 0x0D	; 13
    4b1a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    4b1e:	61 e0       	ldi	r22, 0x01	; 1
    4b20:	8d e0       	ldi	r24, 0x0D	; 13
    4b22:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    4b26:	60 e0       	ldi	r22, 0x00	; 0
    4b28:	8d e0       	ldi	r24, 0x0D	; 13
    4b2a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    4b2e:	61 e0       	ldi	r22, 0x01	; 1
    4b30:	8a e0       	ldi	r24, 0x0A	; 10
    4b32:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	8a e0       	ldi	r24, 0x0A	; 10
    4b3a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    4b3e:	61 e0       	ldi	r22, 0x01	; 1
    4b40:	89 e0       	ldi	r24, 0x09	; 9
    4b42:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    4b46:	60 e0       	ldi	r22, 0x00	; 0
    4b48:	89 e0       	ldi	r24, 0x09	; 9
    4b4a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    4b4e:	61 e0       	ldi	r22, 0x01	; 1
    4b50:	88 e0       	ldi	r24, 0x08	; 8
    4b52:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    4b56:	60 e0       	ldi	r22, 0x00	; 0
    4b58:	88 e0       	ldi	r24, 0x08	; 8
    4b5a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    4b5e:	60 e0       	ldi	r22, 0x00	; 0
    4b60:	84 e1       	ldi	r24, 0x14	; 20
    4b62:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    4b66:	60 e0       	ldi	r22, 0x00	; 0
    4b68:	85 e1       	ldi	r24, 0x15	; 21
    4b6a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    4b6e:	63 e0       	ldi	r22, 0x03	; 3
    4b70:	8c e0       	ldi	r24, 0x0C	; 12
    4b72:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    4b76:	61 e0       	ldi	r22, 0x01	; 1
    4b78:	8b e0       	ldi	r24, 0x0B	; 11
    4b7a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    4b7e:	60 e0       	ldi	r22, 0x00	; 0
    4b80:	8b e0       	ldi	r24, 0x0B	; 11
    4b82:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	linkbus_disable();
    4b86:	0e 94 af 09 	call	0x135e	; 0x135e <_Z15linkbus_disablev>
 *	digitalWrite(PIN_D1, OFF);
 *	digitalWrite(PIN_D2, OFF);
 *	digitalWrite(PIN_D3, OFF);
 *	digitalWrite(PIN_D4, OFF);
 *	digitalWrite(PIN_D5, OFF); */
	DDRC |= 0x0F;
    4b8a:	87 b1       	in	r24, 0x07	; 7
    4b8c:	8f 60       	ori	r24, 0x0F	; 15
    4b8e:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
    4b90:	88 b1       	in	r24, 0x08	; 8
    4b92:	80 7f       	andi	r24, 0xF0	; 240
    4b94:	88 b9       	out	0x08, r24	; 8
	DDRD |= 0x03;
    4b96:	8a b1       	in	r24, 0x0a	; 10
    4b98:	83 60       	ori	r24, 0x03	; 3
    4b9a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0xFC;
    4b9c:	8b b1       	in	r24, 0x0b	; 11
    4b9e:	8c 7f       	andi	r24, 0xFC	; 252
    4ba0:	8b b9       	out	0x0b, r24	; 11

	pinMode(PIN_PWDN, OUTPUT);
    4ba2:	61 e0       	ldi	r22, 0x01	; 1
    4ba4:	86 e0       	ldi	r24, 0x06	; 6
    4ba6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    4baa:	61 e0       	ldi	r22, 0x01	; 1
    4bac:	86 e0       	ldi	r24, 0x06	; 6
    4bae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    4bb2:	63 e0       	ldi	r22, 0x03	; 3
    4bb4:	82 e1       	ldi	r24, 0x12	; 18
    4bb6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    4bba:	63 e0       	ldi	r22, 0x03	; 3
    4bbc:	83 e1       	ldi	r24, 0x13	; 19
    4bbe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    4bc2:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    4bc6:	8b e9       	ldi	r24, 0x9B	; 155
    4bc8:	95 e0       	ldi	r25, 0x05	; 5
    4bca:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN13EepromManager11readNonVolsEv>
    4bce:	18 2f       	mov	r17, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    4bd0:	61 e0       	ldi	r22, 0x01	; 1
    4bd2:	80 e0       	ldi	r24, 0x00	; 0
    4bd4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    4bd8:	f8 94       	cli
	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    4bda:	a0 eb       	ldi	r26, 0xB0	; 176
    4bdc:	b0 e0       	ldi	r27, 0x00	; 0
    4bde:	1c 92       	st	X, r1
	TCCR2B = 0;
    4be0:	e1 eb       	ldi	r30, 0xB1	; 177
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    4be6:	8c 91       	ld	r24, X
    4be8:	82 60       	ori	r24, 0x02	; 2
    4bea:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    4bec:	80 81       	ld	r24, Z
    4bee:	87 60       	ori	r24, 0x07	; 7
    4bf0:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4bf2:	8c e0       	ldi	r24, 0x0C	; 12
    4bf4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    4bf8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    4bfc:	e6 eb       	ldi	r30, 0xB6	; 182
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	8f 7d       	andi	r24, 0xDF	; 223
    4c04:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    4c06:	e0 e7       	ldi	r30, 0x70	; 112
    4c08:	f0 e0       	ldi	r31, 0x00	; 0
    4c0a:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    4c0c:	80 81       	ld	r24, Z
    4c0e:	84 60       	ori	r24, 0x04	; 4
    4c10:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    4c12:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    4c16:	c1 e8       	ldi	r28, 0x81	; 129
    4c18:	d0 e0       	ldi	r29, 0x00	; 0
    4c1a:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    4c1c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4c20:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    4c24:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_AM_audio_frequency>
    4c28:	0e 94 79 19 	call	0x32f2	; 0x32f2 <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    4c2c:	88 81       	ld	r24, Y
    4c2e:	88 60       	ori	r24, 0x08	; 8
    4c30:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    4c32:	88 81       	ld	r24, Y
    4c34:	81 60       	ori	r24, 0x01	; 1
    4c36:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    4c38:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    4c3a:	84 b5       	in	r24, 0x24	; 36
    4c3c:	82 60       	ori	r24, 0x02	; 2
    4c3e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    4c40:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    4c42:	85 b5       	in	r24, 0x25	; 37
    4c44:	84 60       	ori	r24, 0x04	; 4
    4c46:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    4c48:	8f e2       	ldi	r24, 0x2F	; 47
    4c4a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4c4c:	ee e6       	ldi	r30, 0x6E	; 110
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    4c52:	80 81       	ld	r24, Z
    4c54:	82 60       	ori	r24, 0x02	; 2
    4c56:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    4c58:	ed e6       	ldi	r30, 0x6D	; 109
    4c5a:	f0 e0       	ldi	r31, 0x00	; 0
    4c5c:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4c5e:	80 e1       	ldi	r24, 0x10	; 16
    4c60:	80 83       	st	Z, r24
	PCICR = 0x00;
    4c62:	e8 e6       	ldi	r30, 0x68	; 104
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    4c68:	84 e0       	ldi	r24, 0x04	; 4
    4c6a:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    4c6c:	78 94       	sei

	if(!g_AM_enabled)
    4c6e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_AM_enabled>
    4c72:	81 11       	cpse	r24, r1
    4c74:	06 c0       	rjmp	.+12     	; 0x4c82 <main+0x17c>
	{
		linkbus_init(BAUD);     /* Start the Link Bus serial comms */
    4c76:	60 e0       	ldi	r22, 0x00	; 0
    4c78:	71 ee       	ldi	r23, 0xE1	; 225
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z12linkbus_initm>
	}

	g_reset_button_held = !digitalRead(PIN_SYNC);
    4c82:	84 e0       	ldi	r24, 0x04	; 4
    4c84:	0e 94 32 02 	call	0x464	; 0x464 <_Z11digitalReadh>
    4c88:	91 e0       	ldi	r25, 0x01	; 1
    4c8a:	81 11       	cpse	r24, r1
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    4c92:	11 23       	and	r17, r17
    4c94:	29 f0       	breq	.+10     	; 0x4ca0 <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4c96:	61 e0       	ldi	r22, 0x01	; 1
    4c98:	89 e3       	ldi	r24, 0x39	; 57
    4c9a:	92 e0       	ldi	r25, 0x02	; 2
    4c9c:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
		}

		uint8_t result = rv3028_1s_sqw(ON);
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <_Z13rv3028_1s_sqwh>
    4ca6:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    4ca8:	8b e9       	ldi	r24, 0x9B	; 155
    4caa:	95 e0       	ldi	r25, 0x05	; 5
    4cac:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    4cb0:	cc 23       	and	r28, r28
    4cb2:	54 f4       	brge	.+20     	; 0x4cc8 <main+0x1c2>
		{
			sprintf(g_tempStr, "Err 1\n");
    4cb4:	87 e0       	ldi	r24, 0x07	; 7
    4cb6:	e8 e4       	ldi	r30, 0x48	; 72
    4cb8:	f2 e0       	ldi	r31, 0x02	; 2
    4cba:	a8 ed       	ldi	r26, 0xD8	; 216
    4cbc:	b4 e0       	ldi	r27, 0x04	; 4
    4cbe:	01 90       	ld	r0, Z+
    4cc0:	0d 92       	st	X+, r0
    4cc2:	8a 95       	dec	r24
    4cc4:	e1 f7       	brne	.-8      	; 0x4cbe <main+0x1b8>
    4cc6:	23 c0       	rjmp	.+70     	; 0x4d0e <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    4cc8:	c0 ff       	sbrs	r28, 0
    4cca:	0a c0       	rjmp	.+20     	; 0x4ce0 <main+0x1da>
		{
			sprintf(g_tempStr, "Err 2\n");
    4ccc:	87 e0       	ldi	r24, 0x07	; 7
    4cce:	ef e4       	ldi	r30, 0x4F	; 79
    4cd0:	f2 e0       	ldi	r31, 0x02	; 2
    4cd2:	a8 ed       	ldi	r26, 0xD8	; 216
    4cd4:	b4 e0       	ldi	r27, 0x04	; 4
    4cd6:	01 90       	ld	r0, Z+
    4cd8:	0d 92       	st	X+, r0
    4cda:	8a 95       	dec	r24
    4cdc:	e1 f7       	brne	.-8      	; 0x4cd6 <main+0x1d0>
    4cde:	17 c0       	rjmp	.+46     	; 0x4d0e <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4ce0:	c1 ff       	sbrs	r28, 1
    4ce2:	0a c0       	rjmp	.+20     	; 0x4cf8 <main+0x1f2>
		{
			sprintf(g_tempStr, "Err 3\n");
    4ce4:	87 e0       	ldi	r24, 0x07	; 7
    4ce6:	e6 e5       	ldi	r30, 0x56	; 86
    4ce8:	f2 e0       	ldi	r31, 0x02	; 2
    4cea:	a8 ed       	ldi	r26, 0xD8	; 216
    4cec:	b4 e0       	ldi	r27, 0x04	; 4
    4cee:	01 90       	ld	r0, Z+
    4cf0:	0d 92       	st	X+, r0
    4cf2:	8a 95       	dec	r24
    4cf4:	e1 f7       	brne	.-8      	; 0x4cee <main+0x1e8>
    4cf6:	0b c0       	rjmp	.+22     	; 0x4d0e <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4cf8:	c5 ff       	sbrs	r28, 5
    4cfa:	09 c0       	rjmp	.+18     	; 0x4d0e <main+0x208>
		{
			sprintf(g_tempStr, "RTC OK\n");
    4cfc:	88 e0       	ldi	r24, 0x08	; 8
    4cfe:	ed e5       	ldi	r30, 0x5D	; 93
    4d00:	f2 e0       	ldi	r31, 0x02	; 2
    4d02:	a8 ed       	ldi	r26, 0xD8	; 216
    4d04:	b4 e0       	ldi	r27, 0x04	; 4
    4d06:	01 90       	ld	r0, Z+
    4d08:	0d 92       	st	X+, r0
    4d0a:	8a 95       	dec	r24
    4d0c:	e1 f7       	brne	.-8      	; 0x4d06 <main+0x200>
		}

		if(strlen(g_tempStr))
    4d0e:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <g_tempStr>
    4d12:	88 23       	and	r24, r24
    4d14:	29 f0       	breq	.+10     	; 0x4d20 <main+0x21a>
		{
			lb_send_string(g_tempStr, TRUE);
    4d16:	61 e0       	ldi	r22, 0x01	; 1
    4d18:	88 ed       	ldi	r24, 0xD8	; 216
    4d1a:	94 e0       	ldi	r25, 0x04	; 4
    4d1c:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4d20:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4d24:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    4d28:	ef e6       	ldi	r30, 0x6F	; 111
    4d2a:	f0 e0       	ldi	r31, 0x00	; 0
    4d2c:	80 81       	ld	r24, Z
    4d2e:	82 60       	ori	r24, 0x02	; 2
    4d30:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    4d38:	e9 e6       	ldi	r30, 0x69	; 105
    4d3a:	f0 e0       	ldi	r31, 0x00	; 0
    4d3c:	80 81       	ld	r24, Z
    4d3e:	82 60       	ori	r24, 0x02	; 2
    4d40:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    4d42:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    4d44:	0e 94 66 23 	call	0x46cc	; 0x46cc <_Z4loopv>
    4d48:	fd cf       	rjmp	.-6      	; 0x4d44 <main+0x23e>

00004d4a <_GLOBAL__sub_I_ee_mgr>:
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4d4a:	0f 93       	push	r16
    4d4c:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4d4e:	8b e9       	ldi	r24, 0x9B	; 155
    4d50:	95 e0       	ldi	r25, 0x05	; 5
    4d52:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4d56:	00 e0       	ldi	r16, 0x00	; 0
    4d58:	18 e7       	ldi	r17, 0x78	; 120
    4d5a:	26 e9       	ldi	r18, 0x96	; 150
    4d5c:	36 e4       	ldi	r19, 0x46	; 70
    4d5e:	40 e0       	ldi	r20, 0x00	; 0
    4d60:	50 e0       	ldi	r21, 0x00	; 0
    4d62:	69 e4       	ldi	r22, 0x49	; 73
    4d64:	73 e4       	ldi	r23, 0x43	; 67
    4d66:	80 e0       	ldi	r24, 0x00	; 0
    4d68:	95 e0       	ldi	r25, 0x05	; 5
    4d6a:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN8GoertzelC1Eff>
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4d6e:	1f 91       	pop	r17
    4d70:	0f 91       	pop	r16
    4d72:	08 95       	ret

00004d74 <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4d74:	80 e0       	ldi	r24, 0x00	; 0
    4d76:	95 e0       	ldi	r25, 0x05	; 5
    4d78:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4d7c:	8b e9       	ldi	r24, 0x9B	; 155
    4d7e:	95 e0       	ldi	r25, 0x05	; 5
    4d80:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManagerD1Ev>
    4d84:	08 95       	ret

00004d86 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	0e 94 05 30 	call	0x600a	; 0x600a <toupper>

	switch( c )
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	ff 27       	eor	r31, r31
    4d90:	b0 97       	sbiw	r30, 0x20	; 32
    4d92:	ed 35       	cpi	r30, 0x5D	; 93
    4d94:	f1 05       	cpc	r31, r1
    4d96:	08 f0       	brcs	.+2      	; 0x4d9a <_Z12getMorseCharc+0x14>
    4d98:	e4 c0       	rjmp	.+456    	; 0x4f62 <_Z12getMorseCharc+0x1dc>
    4d9a:	e7 55       	subi	r30, 0x57	; 87
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4da2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    4da4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4da6:	61 e0       	ldi	r22, 0x01	; 1
    4da8:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4daa:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    4dac:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4dae:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4db0:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4db2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    4db4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4db6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4db8:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    4dba:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    4dbc:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4dbe:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    4dc0:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4dc2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    4dc4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4dc6:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4dc8:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4dca:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    4dcc:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4dce:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4dd0:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    4dd2:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    4dd4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4dd6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4dd8:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    4dda:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    4ddc:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4dde:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    4de0:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4de2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4de4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4de6:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4de8:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4dea:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4dec:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4dee:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4df0:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4df2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4df4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4df6:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4df8:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4dfa:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    4dfc:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4dfe:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4e00:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4e02:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4e04:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4e06:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4e08:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4e0a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    4e0c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4e0e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4e10:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4e12:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4e14:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4e16:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4e18:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4e1a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4e1c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4e1e:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4e20:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4e22:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4e24:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4e26:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4e28:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    4e2a:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    4e2c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4e2e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4e30:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4e32:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4e34:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4e36:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4e38:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4e3a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    4e3c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4e3e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4e40:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4e42:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4e44:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4e46:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4e48:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4e4a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    4e4c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4e4e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4e50:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4e52:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4e54:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4e56:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4e58:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4e5a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    4e5c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4e5e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4e60:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4e62:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4e64:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4e66:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4e68:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4e6a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4e6c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    4e6e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4e70:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4e72:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4e74:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4e76:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4e78:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4e7a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    4e7c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    4e7e:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4e80:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4e82:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4e84:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4e86:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4e88:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4e8a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4e8c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4e8e:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4e90:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4e92:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4e94:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4e96:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4e98:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4e9a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    4e9c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4e9e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4ea0:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4ea2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4ea4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4ea6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4ea8:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4eaa:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    4eac:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4eae:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4eb0:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4eb2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4eb4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4eb6:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4eb8:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4eba:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    4ebc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    4ebe:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4ec0:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4ec2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4ec4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4ec6:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ec8:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4eca:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    4ecc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    4ece:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4ed0:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4ed2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4ed4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4ed6:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ed8:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4eda:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    4edc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    4ede:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ee0:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4ee2:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4ee4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4ee6:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4ee8:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4eea:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    4eec:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4eee:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4ef0:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4ef2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4ef4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4ef6:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ef8:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4efa:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    4efc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4efe:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4f00:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4f02:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4f04:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4f06:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4f08:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4f0a:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    4f0c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    4f0e:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4f10:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4f12:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4f14:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4f16:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4f18:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4f1a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    4f1c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    4f1e:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4f20:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4f22:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4f24:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4f26:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4f28:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4f2a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    4f2c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    4f2e:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4f30:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4f32:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4f34:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4f36:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4f38:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    4f3a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    4f3c:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    4f3e:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4f40:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4f42:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4f44:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4f46:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4f48:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    4f4a:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4f4c:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    4f4e:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4f50:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4f52:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4f54:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4f56:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4f58:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4f5a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4f5c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    4f5e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4f60:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    4f62:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4f64:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4f66:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    4f68:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4f6a:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    4f6c:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4f6e:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    4f70:	08 95       	ret

00004f72 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4f72:	cf 93       	push	r28
    4f74:	df 93       	push	r29
    4f76:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4f78:	00 97       	sbiw	r24, 0x00	; 0
    4f7a:	b1 f1       	breq	.+108    	; 0x4fe8 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    4f7c:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    4f80:	61 15       	cp	r22, r1
    4f82:	71 05       	cpc	r23, r1
    4f84:	21 f0       	breq	.+8      	; 0x4f8e <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4f86:	db 01       	movw	r26, r22
    4f88:	2c 91       	ld	r18, X
    4f8a:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    4f8e:	fc 01       	movw	r30, r24
    4f90:	20 81       	ld	r18, Z
    4f92:	22 23       	and	r18, r18
    4f94:	d9 f0       	breq	.+54     	; 0x4fcc <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4f96:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4f9a:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    4f9e:	80 e2       	ldi	r24, 0x20	; 32
    4fa0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4fa4:	82 2f       	mov	r24, r18
    4fa6:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <_Z12getMorseCharc>
    4faa:	60 93 a2 05 	sts	0x05A2, r22	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4fae:	70 93 a3 05 	sts	0x05A3, r23	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4fb2:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4fb6:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4fba:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    4fbe:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4fc2:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4fc6:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E15completedString>
    4fca:	0a c0       	rjmp	.+20     	; 0x4fe0 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    4fcc:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4fd0:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4fd4:	81 e0       	ldi	r24, 0x01	; 1
    4fd6:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4fda:	20 97       	sbiw	r28, 0x00	; 0
    4fdc:	09 f0       	breq	.+2      	; 0x4fe0 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    4fde:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    4fe0:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
    4fe6:	c0 c0       	rjmp	.+384    	; 0x5168 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4fe8:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E3str>
    4fec:	f0 91 a6 05 	lds	r31, 0x05A6	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4ff0:	30 97       	sbiw	r30, 0x00	; 0
    4ff2:	09 f4       	brne	.+2      	; 0x4ff6 <_Z9makeMorsePcPhS0_+0x84>
    4ff4:	aa c0       	rjmp	.+340    	; 0x514a <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4ff6:	61 15       	cp	r22, r1
    4ff8:	71 05       	cpc	r23, r1
    4ffa:	21 f0       	breq	.+8      	; 0x5004 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    4ffc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZZ9makeMorsePcPhS0_E6repeat>
    5000:	db 01       	movw	r26, r22
    5002:	8c 93       	st	X, r24
		}

		if(completedString)
    5004:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZZ9makeMorsePcPhS0_E15completedString>
    5008:	88 23       	and	r24, r24
    500a:	49 f0       	breq	.+18     	; 0x501e <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    500c:	20 97       	sbiw	r28, 0x00	; 0
    500e:	09 f4       	brne	.+2      	; 0x5012 <_Z9makeMorsePcPhS0_+0xa0>
    5010:	a8 c0       	rjmp	.+336    	; 0x5162 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    5016:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	a5 c0       	rjmp	.+330    	; 0x5168 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    501e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5022:	88 23       	and	r24, r24
    5024:	21 f0       	breq	.+8      	; 0x502e <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    5026:	81 50       	subi	r24, 0x01	; 1
    5028:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
    502c:	7f c0       	rjmp	.+254    	; 0x512c <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    502e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>
    5032:	88 23       	and	r24, r24
    5034:	81 f0       	breq	.+32     	; 0x5056 <_Z9makeMorsePcPhS0_+0xe4>
    5036:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    503a:	81 11       	cpse	r24, r1
    503c:	0c c0       	rjmp	.+24     	; 0x5056 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    503e:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5042:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5046:	88 23       	and	r24, r24
    5048:	09 f4       	brne	.+2      	; 0x504c <_Z9makeMorsePcPhS0_+0xda>
    504a:	70 c0       	rjmp	.+224    	; 0x512c <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    504c:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    5050:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5054:	6b c0       	rjmp	.+214    	; 0x512c <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    5056:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    505a:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    505e:	89 17       	cp	r24, r25
    5060:	90 f1       	brcs	.+100    	; 0x50c6 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    5062:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E9charIndex>
    5066:	8f 5f       	subi	r24, 0xFF	; 255
    5068:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E9charIndex>
    506c:	df 01       	movw	r26, r30
    506e:	a8 0f       	add	r26, r24
    5070:	b1 1d       	adc	r27, r1
    5072:	8c 91       	ld	r24, X
    5074:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    5078:	81 11       	cpse	r24, r1
    507a:	19 c0       	rjmp	.+50     	; 0x50ae <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    507c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZZ9makeMorsePcPhS0_E6repeat>
    5080:	88 23       	and	r24, r24
    5082:	31 f0       	breq	.+12     	; 0x5090 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    5084:	80 81       	ld	r24, Z
    5086:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    508a:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E9charIndex>
    508e:	0f c0       	rjmp	.+30     	; 0x50ae <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    5090:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    5094:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    5098:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    509c:	91 e0       	ldi	r25, 0x01	; 1
    509e:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    50a2:	20 97       	sbiw	r28, 0x00	; 0
    50a4:	09 f0       	breq	.+2      	; 0x50a8 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    50a6:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    50a8:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    50ac:	5d c0       	rjmp	.+186    	; 0x5168 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    50ae:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZZ9makeMorsePcPhS0_E1c>
    50b2:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <_Z12getMorseCharc>
    50b6:	60 93 a2 05 	sts	0x05A2, r22	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    50ba:	70 93 a3 05 	sts	0x05A3, r23	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    50be:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    50c2:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    50c6:	20 91 a2 05 	lds	r18, 0x05A2	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    50ca:	2d 3f       	cpi	r18, 0xFD	; 253
    50cc:	00 f5       	brcc	.+64     	; 0x510e <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    50ce:	40 91 a0 05 	lds	r20, 0x05A0	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    50d2:	31 e0       	ldi	r19, 0x01	; 1
    50d4:	34 0f       	add	r19, r20
    50d6:	30 93 a0 05 	sts	0x05A0, r19	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    50da:	81 e0       	ldi	r24, 0x01	; 1
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <_Z9makeMorsePcPhS0_+0x172>
    50e0:	88 0f       	add	r24, r24
    50e2:	99 1f       	adc	r25, r25
    50e4:	4a 95       	dec	r20
    50e6:	e2 f7       	brpl	.-8      	; 0x50e0 <_Z9makeMorsePcPhS0_+0x16e>
    50e8:	82 23       	and	r24, r18
    50ea:	21 f0       	breq	.+8      	; 0x50f4 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    50ec:	82 e0       	ldi	r24, 0x02	; 2
    50ee:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    50f4:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    50fe:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5102:	38 17       	cp	r19, r24
    5104:	98 f0       	brcs	.+38     	; 0x512c <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    5106:	82 e0       	ldi	r24, 0x02	; 2
    5108:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <_ZZ9makeMorsePcPhS0_E10addedSpace>
    510c:	0f c0       	rjmp	.+30     	; 0x512c <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    510e:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    5112:	9f ef       	ldi	r25, 0xFF	; 255
    5114:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    5118:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    511c:	84 30       	cpi	r24, 0x04	; 4
    511e:	20 f0       	brcs	.+8      	; 0x5128 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5120:	84 50       	subi	r24, 0x04	; 4
    5122:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5126:	02 c0       	rjmp	.+4      	; 0x512c <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    5128:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    512c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZZ9makeMorsePcPhS0_E1c>
    5130:	8c 33       	cpi	r24, 0x3C	; 60
    5132:	31 f4       	brne	.+12     	; 0x5140 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    513a:	20 97       	sbiw	r28, 0x00	; 0
    513c:	41 f4       	brne	.+16     	; 0x514e <_Z9makeMorsePcPhS0_+0x1dc>
    513e:	14 c0       	rjmp	.+40     	; 0x5168 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    5140:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    5144:	20 97       	sbiw	r28, 0x00	; 0
    5146:	19 f4       	brne	.+6      	; 0x514e <_Z9makeMorsePcPhS0_+0x1dc>
    5148:	09 c0       	rjmp	.+18     	; 0x515c <_Z9makeMorsePcPhS0_+0x1ea>
    514a:	20 97       	sbiw	r28, 0x00	; 0
    514c:	19 f0       	breq	.+6      	; 0x5154 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    514e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZZ9makeMorsePcPhS0_E15completedString>
    5152:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    5154:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    5158:	81 11       	cpse	r24, r1
    515a:	05 c0       	rjmp	.+10     	; 0x5166 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    515c:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZZ9makeMorsePcPhS0_E9carrierOn>
    5160:	03 c0       	rjmp	.+6      	; 0x5168 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    5162:	80 e0       	ldi	r24, 0x00	; 0
    5164:	01 c0       	rjmp	.+2      	; 0x5168 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    5166:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	08 95       	ret

0000516e <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    516e:	cf 92       	push	r12
    5170:	df 92       	push	r13
    5172:	ef 92       	push	r14
    5174:	ff 92       	push	r15
    5176:	0f 93       	push	r16
    5178:	1f 93       	push	r17
    517a:	cf 93       	push	r28
    517c:	fc 01       	movw	r30, r24
    517e:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5180:	80 81       	ld	r24, Z
		if(!c)
    5182:	88 23       	and	r24, r24
    5184:	c1 f0       	breq	.+48     	; 0x51b6 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    5186:	8f 01       	movw	r16, r30
    5188:	0f 5f       	subi	r16, 0xFF	; 255
    518a:	1f 4f       	sbci	r17, 0xFF	; 255
    518c:	7f 01       	movw	r14, r30
    518e:	94 e1       	ldi	r25, 0x14	; 20
    5190:	e9 0e       	add	r14, r25
    5192:	f1 1c       	adc	r15, r1
    5194:	c0 e0       	ldi	r28, 0x00	; 0
    5196:	05 c0       	rjmp	.+10     	; 0x51a2 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5198:	f8 01       	movw	r30, r16
    519a:	81 91       	ld	r24, Z+
    519c:	8f 01       	movw	r16, r30
		if(!c)
    519e:	88 23       	and	r24, r24
    51a0:	59 f0       	breq	.+22     	; 0x51b8 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    51a2:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    51a6:	6d 3f       	cpi	r22, 0xFD	; 253
    51a8:	08 f4       	brcc	.+2      	; 0x51ac <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    51aa:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    51ac:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    51ae:	0e 15       	cp	r16, r14
    51b0:	1f 05       	cpc	r17, r15
    51b2:	91 f7       	brne	.-28     	; 0x5198 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    51b4:	01 c0       	rjmp	.+2      	; 0x51b8 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    51b6:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    51b8:	80 eb       	ldi	r24, 0xB0	; 176
    51ba:	94 e0       	ldi	r25, 0x04	; 4
    51bc:	b6 01       	movw	r22, r12
    51be:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__udivmodhi4>
}
    51c2:	c6 9f       	mul	r28, r22
    51c4:	c0 01       	movw	r24, r0
    51c6:	c7 9f       	mul	r28, r23
    51c8:	90 0d       	add	r25, r0
    51ca:	11 24       	eor	r1, r1
    51cc:	cf 91       	pop	r28
    51ce:	1f 91       	pop	r17
    51d0:	0f 91       	pop	r16
    51d2:	ff 90       	pop	r15
    51d4:	ef 90       	pop	r14
    51d6:	df 90       	pop	r13
    51d8:	cf 90       	pop	r12
    51da:	08 95       	ret

000051dc <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    51dc:	98 2f       	mov	r25, r24
    51de:	96 95       	lsr	r25
    51e0:	96 95       	lsr	r25
    51e2:	96 95       	lsr	r25
    51e4:	9e 71       	andi	r25, 0x1E	; 30
    51e6:	29 2f       	mov	r18, r25
    51e8:	22 0f       	add	r18, r18
    51ea:	22 0f       	add	r18, r18
    51ec:	92 0f       	add	r25, r18
    51ee:	8f 70       	andi	r24, 0x0F	; 15
    51f0:	89 0f       	add	r24, r25
    51f2:	08 95       	ret

000051f4 <_Z8char2bcdPc>:
    51f4:	fc 01       	movw	r30, r24
    51f6:	20 81       	ld	r18, Z
    51f8:	81 81       	ldd	r24, Z+1	; 0x01
    51fa:	80 53       	subi	r24, 0x30	; 48
    51fc:	f0 e1       	ldi	r31, 0x10	; 16
    51fe:	2f 9f       	mul	r18, r31
    5200:	80 0d       	add	r24, r0
    5202:	11 24       	eor	r1, r1
    5204:	08 95       	ret

00005206 <_Z16rv3028_set_epochm>:
    5206:	cf 93       	push	r28
    5208:	df 93       	push	r29
    520a:	00 d0       	rcall	.+0      	; 0x520c <_Z16rv3028_set_epochm+0x6>
    520c:	00 d0       	rcall	.+0      	; 0x520e <_Z16rv3028_set_epochm+0x8>
    520e:	1f 92       	push	r1
    5210:	cd b7       	in	r28, 0x3d	; 61
    5212:	de b7       	in	r29, 0x3e	; 62
    5214:	ae 01       	movw	r20, r28
    5216:	4f 5f       	subi	r20, 0xFF	; 255
    5218:	5f 4f       	sbci	r21, 0xFF	; 255
    521a:	25 e0       	ldi	r18, 0x05	; 5
    521c:	fa 01       	movw	r30, r20
    521e:	11 92       	st	Z+, r1
    5220:	2a 95       	dec	r18
    5222:	e9 f7       	brne	.-6      	; 0x521e <_Z16rv3028_set_epochm+0x18>
    5224:	9c 83       	std	Y+4, r25	; 0x04
    5226:	8b 83       	std	Y+3, r24	; 0x03
    5228:	7a 83       	std	Y+2, r23	; 0x02
    522a:	69 83       	std	Y+1, r22	; 0x01
    522c:	24 e0       	ldi	r18, 0x04	; 4
    522e:	6b e1       	ldi	r22, 0x1B	; 27
    5230:	84 ea       	ldi	r24, 0xA4	; 164
    5232:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    5236:	0f 90       	pop	r0
    5238:	0f 90       	pop	r0
    523a:	0f 90       	pop	r0
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	df 91       	pop	r29
    5242:	cf 91       	pop	r28
    5244:	08 95       	ret

00005246 <_Z16rv3028_get_epochv>:
    5246:	cf 93       	push	r28
    5248:	df 93       	push	r29
    524a:	00 d0       	rcall	.+0      	; 0x524c <_Z16rv3028_get_epochv+0x6>
    524c:	00 d0       	rcall	.+0      	; 0x524e <_Z16rv3028_get_epochv+0x8>
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
    5252:	19 82       	std	Y+1, r1	; 0x01
    5254:	1a 82       	std	Y+2, r1	; 0x02
    5256:	1b 82       	std	Y+3, r1	; 0x03
    5258:	1c 82       	std	Y+4, r1	; 0x04
    525a:	24 e0       	ldi	r18, 0x04	; 4
    525c:	ae 01       	movw	r20, r28
    525e:	4f 5f       	subi	r20, 0xFF	; 255
    5260:	5f 4f       	sbci	r21, 0xFF	; 255
    5262:	6b e1       	ldi	r22, 0x1B	; 27
    5264:	84 ea       	ldi	r24, 0xA4	; 164
    5266:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
    526a:	81 11       	cpse	r24, r1
    526c:	11 c0       	rjmp	.+34     	; 0x5290 <_Z16rv3028_get_epochv+0x4a>
    526e:	2a 81       	ldd	r18, Y+2	; 0x02
    5270:	6b 81       	ldd	r22, Y+3	; 0x03
    5272:	86 2f       	mov	r24, r22
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	a0 e0       	ldi	r26, 0x00	; 0
    5278:	b0 e0       	ldi	r27, 0x00	; 0
    527a:	dc 01       	movw	r26, r24
    527c:	99 27       	eor	r25, r25
    527e:	88 27       	eor	r24, r24
    5280:	92 2b       	or	r25, r18
    5282:	29 81       	ldd	r18, Y+1	; 0x01
    5284:	82 2b       	or	r24, r18
    5286:	2c 81       	ldd	r18, Y+4	; 0x04
    5288:	bc 01       	movw	r22, r24
    528a:	cd 01       	movw	r24, r26
    528c:	92 2b       	or	r25, r18
    528e:	03 c0       	rjmp	.+6      	; 0x5296 <_Z16rv3028_get_epochv+0x50>
    5290:	60 e0       	ldi	r22, 0x00	; 0
    5292:	70 e0       	ldi	r23, 0x00	; 0
    5294:	cb 01       	movw	r24, r22
    5296:	0f 90       	pop	r0
    5298:	0f 90       	pop	r0
    529a:	0f 90       	pop	r0
    529c:	0f 90       	pop	r0
    529e:	df 91       	pop	r29
    52a0:	cf 91       	pop	r28
    52a2:	08 95       	ret

000052a4 <_Z16rv3028_get_epochPbPc>:
    52a4:	6f 92       	push	r6
    52a6:	7f 92       	push	r7
    52a8:	8f 92       	push	r8
    52aa:	9f 92       	push	r9
    52ac:	af 92       	push	r10
    52ae:	bf 92       	push	r11
    52b0:	cf 92       	push	r12
    52b2:	df 92       	push	r13
    52b4:	ef 92       	push	r14
    52b6:	ff 92       	push	r15
    52b8:	0f 93       	push	r16
    52ba:	1f 93       	push	r17
    52bc:	cf 93       	push	r28
    52be:	df 93       	push	r29
    52c0:	6c 01       	movw	r12, r24
    52c2:	eb 01       	movw	r28, r22
    52c4:	20 97       	sbiw	r28, 0x00	; 0
    52c6:	09 f4       	brne	.+2      	; 0x52ca <_Z16rv3028_get_epochPbPc+0x26>
    52c8:	b6 c0       	rjmp	.+364    	; 0x5436 <_Z16rv3028_get_epochPbPc+0x192>
    52ca:	cb 01       	movw	r24, r22
    52cc:	0a 96       	adiw	r24, 0x0a	; 10
    52ce:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_Z8char2bcdPc>
    52d2:	88 2e       	mov	r8, r24
    52d4:	ce 01       	movw	r24, r28
    52d6:	08 96       	adiw	r24, 0x08	; 8
    52d8:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_Z8char2bcdPc>
    52dc:	78 2e       	mov	r7, r24
    52de:	ce 01       	movw	r24, r28
    52e0:	06 96       	adiw	r24, 0x06	; 6
    52e2:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_Z8char2bcdPc>
    52e6:	98 2e       	mov	r9, r24
    52e8:	ce 01       	movw	r24, r28
    52ea:	04 96       	adiw	r24, 0x04	; 4
    52ec:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_Z8char2bcdPc>
    52f0:	18 2f       	mov	r17, r24
    52f2:	ce 01       	movw	r24, r28
    52f4:	02 96       	adiw	r24, 0x02	; 2
    52f6:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_Z8char2bcdPc>
    52fa:	08 2f       	mov	r16, r24
    52fc:	ce 01       	movw	r24, r28
    52fe:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_Z8char2bcdPc>
    5302:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_Z7bcd2dech>
    5306:	e8 2e       	mov	r14, r24
    5308:	f1 2c       	mov	r15, r1
    530a:	57 01       	movw	r10, r14
    530c:	80 e3       	ldi	r24, 0x30	; 48
    530e:	a8 1a       	sub	r10, r24
    5310:	88 ef       	ldi	r24, 0xF8	; 248
    5312:	b8 0a       	sbc	r11, r24
    5314:	80 2f       	mov	r24, r16
    5316:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_Z7bcd2dech>
    531a:	d8 2f       	mov	r29, r24
    531c:	81 2f       	mov	r24, r17
    531e:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_Z7bcd2dech>
    5322:	68 2e       	mov	r6, r24
    5324:	d2 30       	cpi	r29, 0x02	; 2
    5326:	68 f0       	brcs	.+26     	; 0x5342 <_Z16rv3028_get_epochPbPc+0x9e>
    5328:	00 e0       	ldi	r16, 0x00	; 0
    532a:	10 e0       	ldi	r17, 0x00	; 0
    532c:	c1 e0       	ldi	r28, 0x01	; 1
    532e:	6c 2f       	mov	r22, r28
    5330:	c5 01       	movw	r24, r10
    5332:	0e 94 41 01 	call	0x282	; 0x282 <month_length>
    5336:	08 0f       	add	r16, r24
    5338:	11 1d       	adc	r17, r1
    533a:	cf 5f       	subi	r28, 0xFF	; 255
    533c:	dc 13       	cpse	r29, r28
    533e:	f7 cf       	rjmp	.-18     	; 0x532e <_Z16rv3028_get_epochPbPc+0x8a>
    5340:	02 c0       	rjmp	.+4      	; 0x5346 <_Z16rv3028_get_epochPbPc+0xa2>
    5342:	00 e0       	ldi	r16, 0x00	; 0
    5344:	10 e0       	ldi	r17, 0x00	; 0
    5346:	86 2d       	mov	r24, r6
    5348:	66 0c       	add	r6, r6
    534a:	99 0b       	sbc	r25, r25
    534c:	01 97       	sbiw	r24, 0x01	; 1
    534e:	08 0f       	add	r16, r24
    5350:	19 1f       	adc	r17, r25
    5352:	88 2d       	mov	r24, r8
    5354:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_Z7bcd2dech>
    5358:	88 2e       	mov	r8, r24
    535a:	87 2d       	mov	r24, r7
    535c:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_Z7bcd2dech>
    5360:	c8 2f       	mov	r28, r24
    5362:	89 2d       	mov	r24, r9
    5364:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_Z7bcd2dech>
    5368:	08 2c       	mov	r0, r8
    536a:	00 0c       	add	r0, r0
    536c:	99 08       	sbc	r9, r9
    536e:	9c e3       	ldi	r25, 0x3C	; 60
    5370:	c9 02       	muls	r28, r25
    5372:	80 0c       	add	r8, r0
    5374:	91 1c       	adc	r9, r1
    5376:	11 24       	eor	r1, r1
    5378:	09 2c       	mov	r0, r9
    537a:	00 0c       	add	r0, r0
    537c:	aa 08       	sbc	r10, r10
    537e:	bb 08       	sbc	r11, r11
    5380:	a8 2f       	mov	r26, r24
    5382:	88 0f       	add	r24, r24
    5384:	bb 0b       	sbc	r27, r27
    5386:	20 e1       	ldi	r18, 0x10	; 16
    5388:	3e e0       	ldi	r19, 0x0E	; 14
    538a:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__usmulhisi3>
    538e:	86 0e       	add	r8, r22
    5390:	97 1e       	adc	r9, r23
    5392:	a8 1e       	adc	r10, r24
    5394:	b9 1e       	adc	r11, r25
    5396:	d8 01       	movw	r26, r16
    5398:	20 e8       	ldi	r18, 0x80	; 128
    539a:	31 e5       	ldi	r19, 0x51	; 81
    539c:	41 e0       	ldi	r20, 0x01	; 1
    539e:	50 e0       	ldi	r21, 0x00	; 0
    53a0:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__mulshisi3>
    53a4:	86 0e       	add	r8, r22
    53a6:	97 1e       	adc	r9, r23
    53a8:	a8 1e       	adc	r10, r24
    53aa:	b9 1e       	adc	r11, r25
    53ac:	d7 01       	movw	r26, r14
    53ae:	5e 96       	adiw	r26, 0x1e	; 30
    53b0:	20 e8       	ldi	r18, 0x80	; 128
    53b2:	33 e3       	ldi	r19, 0x33	; 51
    53b4:	41 ee       	ldi	r20, 0xE1	; 225
    53b6:	51 e0       	ldi	r21, 0x01	; 1
    53b8:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__mulshisi3>
    53bc:	86 0e       	add	r8, r22
    53be:	97 1e       	adc	r9, r23
    53c0:	a8 1e       	adc	r10, r24
    53c2:	b9 1e       	adc	r11, r25
    53c4:	c7 01       	movw	r24, r14
    53c6:	4f 96       	adiw	r24, 0x1f	; 31
    53c8:	dc 01       	movw	r26, r24
    53ca:	0a f4       	brpl	.+2      	; 0x53ce <_Z16rv3028_get_epochPbPc+0x12a>
    53cc:	13 96       	adiw	r26, 0x03	; 3
    53ce:	b5 95       	asr	r27
    53d0:	a7 95       	ror	r26
    53d2:	b5 95       	asr	r27
    53d4:	a7 95       	ror	r26
    53d6:	20 e8       	ldi	r18, 0x80	; 128
    53d8:	31 e5       	ldi	r19, 0x51	; 81
    53da:	41 e0       	ldi	r20, 0x01	; 1
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__mulshisi3>
    53e2:	86 0e       	add	r8, r22
    53e4:	97 1e       	adc	r9, r23
    53e6:	a8 1e       	adc	r10, r24
    53e8:	b9 1e       	adc	r11, r25
    53ea:	c7 01       	movw	r24, r14
    53ec:	8d 59       	subi	r24, 0x9D	; 157
    53ee:	9f 4f       	sbci	r25, 0xFF	; 255
    53f0:	64 e6       	ldi	r22, 0x64	; 100
    53f2:	70 e0       	ldi	r23, 0x00	; 0
    53f4:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    53f8:	db 01       	movw	r26, r22
    53fa:	20 e8       	ldi	r18, 0x80	; 128
    53fc:	3e ea       	ldi	r19, 0xAE	; 174
    53fe:	4e ef       	ldi	r20, 0xFE	; 254
    5400:	5f ef       	ldi	r21, 0xFF	; 255
    5402:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__mulshisi3>
    5406:	86 0e       	add	r8, r22
    5408:	97 1e       	adc	r9, r23
    540a:	a8 1e       	adc	r10, r24
    540c:	b9 1e       	adc	r11, r25
    540e:	c7 01       	movw	r24, r14
    5410:	81 57       	subi	r24, 0x71	; 113
    5412:	9e 4f       	sbci	r25, 0xFE	; 254
    5414:	60 e9       	ldi	r22, 0x90	; 144
    5416:	71 e0       	ldi	r23, 0x01	; 1
    5418:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__divmodhi4>
    541c:	db 01       	movw	r26, r22
    541e:	20 e8       	ldi	r18, 0x80	; 128
    5420:	31 e5       	ldi	r19, 0x51	; 81
    5422:	41 e0       	ldi	r20, 0x01	; 1
    5424:	50 e0       	ldi	r21, 0x00	; 0
    5426:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__mulshisi3>
    542a:	68 0d       	add	r22, r8
    542c:	79 1d       	adc	r23, r9
    542e:	8a 1d       	adc	r24, r10
    5430:	9b 1d       	adc	r25, r11
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	09 c0       	rjmp	.+18     	; 0x5448 <_Z16rv3028_get_epochPbPc+0x1a4>
    5436:	0e 94 23 29 	call	0x5246	; 0x5246 <_Z16rv3028_get_epochv>
    543a:	31 e0       	ldi	r19, 0x01	; 1
    543c:	61 15       	cp	r22, r1
    543e:	71 05       	cpc	r23, r1
    5440:	81 05       	cpc	r24, r1
    5442:	91 05       	cpc	r25, r1
    5444:	09 f0       	breq	.+2      	; 0x5448 <_Z16rv3028_get_epochPbPc+0x1a4>
    5446:	30 e0       	ldi	r19, 0x00	; 0
    5448:	c1 14       	cp	r12, r1
    544a:	d1 04       	cpc	r13, r1
    544c:	31 f0       	breq	.+12     	; 0x545a <_Z16rv3028_get_epochPbPc+0x1b6>
    544e:	21 e0       	ldi	r18, 0x01	; 1
    5450:	31 11       	cpse	r19, r1
    5452:	01 c0       	rjmp	.+2      	; 0x5456 <_Z16rv3028_get_epochPbPc+0x1b2>
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	f6 01       	movw	r30, r12
    5458:	20 83       	st	Z, r18
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	1f 91       	pop	r17
    5460:	0f 91       	pop	r16
    5462:	ff 90       	pop	r15
    5464:	ef 90       	pop	r14
    5466:	df 90       	pop	r13
    5468:	cf 90       	pop	r12
    546a:	bf 90       	pop	r11
    546c:	af 90       	pop	r10
    546e:	9f 90       	pop	r9
    5470:	8f 90       	pop	r8
    5472:	7f 90       	pop	r7
    5474:	6f 90       	pop	r6
    5476:	08 95       	ret

00005478 <_Z21rv3028_set_offset_RAMj>:
    5478:	cf 93       	push	r28
    547a:	df 93       	push	r29
    547c:	00 d0       	rcall	.+0      	; 0x547e <_Z21rv3028_set_offset_RAMj+0x6>
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
    5482:	20 e1       	ldi	r18, 0x10	; 16
    5484:	2a 83       	std	Y+2, r18	; 0x02
    5486:	9c 01       	movw	r18, r24
    5488:	36 95       	lsr	r19
    548a:	27 95       	ror	r18
    548c:	29 83       	std	Y+1, r18	; 0x01
    548e:	80 ff       	sbrs	r24, 0
    5490:	02 c0       	rjmp	.+4      	; 0x5496 <_Z21rv3028_set_offset_RAMj+0x1e>
    5492:	80 e9       	ldi	r24, 0x90	; 144
    5494:	8a 83       	std	Y+2, r24	; 0x02
    5496:	22 e0       	ldi	r18, 0x02	; 2
    5498:	ae 01       	movw	r20, r28
    549a:	4f 5f       	subi	r20, 0xFF	; 255
    549c:	5f 4f       	sbci	r21, 0xFF	; 255
    549e:	66 e3       	ldi	r22, 0x36	; 54
    54a0:	84 ea       	ldi	r24, 0xA4	; 164
    54a2:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    54a6:	0f 90       	pop	r0
    54a8:	0f 90       	pop	r0
    54aa:	df 91       	pop	r29
    54ac:	cf 91       	pop	r28
    54ae:	08 95       	ret

000054b0 <_Z13rv3028_1s_sqwh>:
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
    54b4:	00 d0       	rcall	.+0      	; 0x54b6 <_Z13rv3028_1s_sqwh+0x6>
    54b6:	cd b7       	in	r28, 0x3d	; 61
    54b8:	de b7       	in	r29, 0x3e	; 62
    54ba:	19 82       	std	Y+1, r1	; 0x01
    54bc:	88 23       	and	r24, r24
    54be:	31 f0       	breq	.+12     	; 0x54cc <_Z13rv3028_1s_sqwh+0x1c>
    54c0:	85 ec       	ldi	r24, 0xC5	; 197
    54c2:	8a 83       	std	Y+2, r24	; 0x02
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZL14g_1HzSqWave_on>
    54ca:	04 c0       	rjmp	.+8      	; 0x54d4 <_Z13rv3028_1s_sqwh+0x24>
    54cc:	85 e4       	ldi	r24, 0x45	; 69
    54ce:	8a 83       	std	Y+2, r24	; 0x02
    54d0:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZL14g_1HzSqWave_on>
    54d4:	21 e0       	ldi	r18, 0x01	; 1
    54d6:	ae 01       	movw	r20, r28
    54d8:	4e 5f       	subi	r20, 0xFE	; 254
    54da:	5f 4f       	sbci	r21, 0xFF	; 255
    54dc:	65 e3       	ldi	r22, 0x35	; 53
    54de:	84 ea       	ldi	r24, 0xA4	; 164
    54e0:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    54e4:	89 81       	ldd	r24, Y+1	; 0x01
    54e6:	81 11       	cpse	r24, r1
    54e8:	0c c0       	rjmp	.+24     	; 0x5502 <_Z13rv3028_1s_sqwh+0x52>
    54ea:	21 e0       	ldi	r18, 0x01	; 1
    54ec:	ae 01       	movw	r20, r28
    54ee:	4f 5f       	subi	r20, 0xFF	; 255
    54f0:	5f 4f       	sbci	r21, 0xFF	; 255
    54f2:	6e e0       	ldi	r22, 0x0E	; 14
    54f4:	84 ea       	ldi	r24, 0xA4	; 164
    54f6:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
    54fa:	89 81       	ldd	r24, Y+1	; 0x01
    54fc:	8f 76       	andi	r24, 0x6F	; 111
    54fe:	89 83       	std	Y+1, r24	; 0x01
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <_Z13rv3028_1s_sqwh+0x56>
    5502:	80 e8       	ldi	r24, 0x80	; 128
    5504:	89 83       	std	Y+1, r24	; 0x01
    5506:	1a 82       	std	Y+2, r1	; 0x02
    5508:	21 e0       	ldi	r18, 0x01	; 1
    550a:	ae 01       	movw	r20, r28
    550c:	4e 5f       	subi	r20, 0xFE	; 254
    550e:	5f 4f       	sbci	r21, 0xFF	; 255
    5510:	6e e0       	ldi	r22, 0x0E	; 14
    5512:	84 ea       	ldi	r24, 0xA4	; 164
    5514:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
    5518:	89 81       	ldd	r24, Y+1	; 0x01
    551a:	0f 90       	pop	r0
    551c:	0f 90       	pop	r0
    551e:	df 91       	pop	r29
    5520:	cf 91       	pop	r28
    5522:	08 95       	ret

00005524 <_Z18waitForEEPROMReadyv>:
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	1f 92       	push	r1
    552a:	cd b7       	in	r28, 0x3d	; 61
    552c:	de b7       	in	r29, 0x3e	; 62
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	89 83       	std	Y+1, r24	; 0x01
    5532:	21 e0       	ldi	r18, 0x01	; 1
    5534:	ae 01       	movw	r20, r28
    5536:	4f 5f       	subi	r20, 0xFF	; 255
    5538:	5f 4f       	sbci	r21, 0xFF	; 255
    553a:	6e e0       	ldi	r22, 0x0E	; 14
    553c:	84 ea       	ldi	r24, 0xA4	; 164
    553e:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
    5542:	81 11       	cpse	r24, r1
    5544:	07 c0       	rjmp	.+14     	; 0x5554 <_Z18waitForEEPROMReadyv+0x30>
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	80 78       	andi	r24, 0x80	; 128
    554a:	89 83       	std	Y+1, r24	; 0x01
    554c:	81 11       	cpse	r24, r1
    554e:	f1 cf       	rjmp	.-30     	; 0x5532 <_Z18waitForEEPROMReadyv+0xe>
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	03 c0       	rjmp	.+6      	; 0x555a <_Z18waitForEEPROMReadyv+0x36>
    5554:	89 81       	ldd	r24, Y+1	; 0x01
    5556:	88 23       	and	r24, r24
    5558:	d9 f3       	breq	.-10     	; 0x5550 <_Z18waitForEEPROMReadyv+0x2c>
    555a:	0f 90       	pop	r0
    555c:	df 91       	pop	r29
    555e:	cf 91       	pop	r28
    5560:	08 95       	ret

00005562 <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	1f 92       	push	r1
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    556c:	19 82       	std	Y+1, r1	; 0x01

		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    556e:	21 e0       	ldi	r18, 0x01	; 1
    5570:	ae 01       	movw	r20, r28
    5572:	4f 5f       	subi	r20, 0xFF	; 255
    5574:	5f 4f       	sbci	r21, 0xFF	; 255
    5576:	67 e2       	ldi	r22, 0x27	; 39
    5578:	84 ea       	ldi	r24, 0xA4	; 164
    557a:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    557e:	0e 94 92 2a 	call	0x5524	; 0x5524 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    5582:	82 e1       	ldi	r24, 0x12	; 18
    5584:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    5586:	21 e0       	ldi	r18, 0x01	; 1
    5588:	ae 01       	movw	r20, r28
    558a:	4f 5f       	subi	r20, 0xFF	; 255
    558c:	5f 4f       	sbci	r21, 0xFF	; 255
    558e:	67 e2       	ldi	r22, 0x27	; 39
    5590:	84 ea       	ldi	r24, 0xA4	; 164
    5592:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    5596:	0e 94 92 2a 	call	0x5524	; 0x5524 <_Z18waitForEEPROMReadyv>
	}
    559a:	0f 90       	pop	r0
    559c:	df 91       	pop	r29
    559e:	cf 91       	pop	r28
    55a0:	08 95       	ret

000055a2 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    55a2:	cf 93       	push	r28
    55a4:	df 93       	push	r29
    55a6:	00 d0       	rcall	.+0      	; 0x55a8 <_Z21rv3028_get_offset_RAMv+0x6>
    55a8:	cd b7       	in	r28, 0x3d	; 61
    55aa:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    55ac:	0e 94 b1 2a 	call	0x5562	; 0x5562 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    55b0:	22 e0       	ldi	r18, 0x02	; 2
    55b2:	ae 01       	movw	r20, r28
    55b4:	4f 5f       	subi	r20, 0xFF	; 255
    55b6:	5f 4f       	sbci	r21, 0xFF	; 255
    55b8:	66 e3       	ldi	r22, 0x36	; 54
    55ba:	84 ea       	ldi	r24, 0xA4	; 164
    55bc:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	88 0f       	add	r24, r24
    55c6:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    55c8:	2a 81       	ldd	r18, Y+2	; 0x02
    55ca:	22 23       	and	r18, r18
    55cc:	0c f4       	brge	.+2      	; 0x55d0 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    55ce:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	df 91       	pop	r29
    55d6:	cf 91       	pop	r28
    55d8:	08 95       	ret

000055da <__subsf3>:
    55da:	50 58       	subi	r21, 0x80	; 128

000055dc <__addsf3>:
    55dc:	bb 27       	eor	r27, r27
    55de:	aa 27       	eor	r26, r26
    55e0:	0e 94 05 2b 	call	0x560a	; 0x560a <__addsf3x>
    55e4:	0c 94 af 2c 	jmp	0x595e	; 0x595e <__fp_round>
    55e8:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__fp_pscA>
    55ec:	38 f0       	brcs	.+14     	; 0x55fc <__addsf3+0x20>
    55ee:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__fp_pscB>
    55f2:	20 f0       	brcs	.+8      	; 0x55fc <__addsf3+0x20>
    55f4:	39 f4       	brne	.+14     	; 0x5604 <__addsf3+0x28>
    55f6:	9f 3f       	cpi	r25, 0xFF	; 255
    55f8:	19 f4       	brne	.+6      	; 0x5600 <__addsf3+0x24>
    55fa:	26 f4       	brtc	.+8      	; 0x5604 <__addsf3+0x28>
    55fc:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__fp_nan>
    5600:	0e f4       	brtc	.+2      	; 0x5604 <__addsf3+0x28>
    5602:	e0 95       	com	r30
    5604:	e7 fb       	bst	r30, 7
    5606:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__fp_inf>

0000560a <__addsf3x>:
    560a:	e9 2f       	mov	r30, r25
    560c:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__fp_split3>
    5610:	58 f3       	brcs	.-42     	; 0x55e8 <__addsf3+0xc>
    5612:	ba 17       	cp	r27, r26
    5614:	62 07       	cpc	r22, r18
    5616:	73 07       	cpc	r23, r19
    5618:	84 07       	cpc	r24, r20
    561a:	95 07       	cpc	r25, r21
    561c:	20 f0       	brcs	.+8      	; 0x5626 <__addsf3x+0x1c>
    561e:	79 f4       	brne	.+30     	; 0x563e <__addsf3x+0x34>
    5620:	a6 f5       	brtc	.+104    	; 0x568a <__addsf3x+0x80>
    5622:	0c 94 f6 2c 	jmp	0x59ec	; 0x59ec <__fp_zero>
    5626:	0e f4       	brtc	.+2      	; 0x562a <__addsf3x+0x20>
    5628:	e0 95       	com	r30
    562a:	0b 2e       	mov	r0, r27
    562c:	ba 2f       	mov	r27, r26
    562e:	a0 2d       	mov	r26, r0
    5630:	0b 01       	movw	r0, r22
    5632:	b9 01       	movw	r22, r18
    5634:	90 01       	movw	r18, r0
    5636:	0c 01       	movw	r0, r24
    5638:	ca 01       	movw	r24, r20
    563a:	a0 01       	movw	r20, r0
    563c:	11 24       	eor	r1, r1
    563e:	ff 27       	eor	r31, r31
    5640:	59 1b       	sub	r21, r25
    5642:	99 f0       	breq	.+38     	; 0x566a <__addsf3x+0x60>
    5644:	59 3f       	cpi	r21, 0xF9	; 249
    5646:	50 f4       	brcc	.+20     	; 0x565c <__addsf3x+0x52>
    5648:	50 3e       	cpi	r21, 0xE0	; 224
    564a:	68 f1       	brcs	.+90     	; 0x56a6 <__addsf3x+0x9c>
    564c:	1a 16       	cp	r1, r26
    564e:	f0 40       	sbci	r31, 0x00	; 0
    5650:	a2 2f       	mov	r26, r18
    5652:	23 2f       	mov	r18, r19
    5654:	34 2f       	mov	r19, r20
    5656:	44 27       	eor	r20, r20
    5658:	58 5f       	subi	r21, 0xF8	; 248
    565a:	f3 cf       	rjmp	.-26     	; 0x5642 <__addsf3x+0x38>
    565c:	46 95       	lsr	r20
    565e:	37 95       	ror	r19
    5660:	27 95       	ror	r18
    5662:	a7 95       	ror	r26
    5664:	f0 40       	sbci	r31, 0x00	; 0
    5666:	53 95       	inc	r21
    5668:	c9 f7       	brne	.-14     	; 0x565c <__addsf3x+0x52>
    566a:	7e f4       	brtc	.+30     	; 0x568a <__addsf3x+0x80>
    566c:	1f 16       	cp	r1, r31
    566e:	ba 0b       	sbc	r27, r26
    5670:	62 0b       	sbc	r22, r18
    5672:	73 0b       	sbc	r23, r19
    5674:	84 0b       	sbc	r24, r20
    5676:	ba f0       	brmi	.+46     	; 0x56a6 <__addsf3x+0x9c>
    5678:	91 50       	subi	r25, 0x01	; 1
    567a:	a1 f0       	breq	.+40     	; 0x56a4 <__addsf3x+0x9a>
    567c:	ff 0f       	add	r31, r31
    567e:	bb 1f       	adc	r27, r27
    5680:	66 1f       	adc	r22, r22
    5682:	77 1f       	adc	r23, r23
    5684:	88 1f       	adc	r24, r24
    5686:	c2 f7       	brpl	.-16     	; 0x5678 <__addsf3x+0x6e>
    5688:	0e c0       	rjmp	.+28     	; 0x56a6 <__addsf3x+0x9c>
    568a:	ba 0f       	add	r27, r26
    568c:	62 1f       	adc	r22, r18
    568e:	73 1f       	adc	r23, r19
    5690:	84 1f       	adc	r24, r20
    5692:	48 f4       	brcc	.+18     	; 0x56a6 <__addsf3x+0x9c>
    5694:	87 95       	ror	r24
    5696:	77 95       	ror	r23
    5698:	67 95       	ror	r22
    569a:	b7 95       	ror	r27
    569c:	f7 95       	ror	r31
    569e:	9e 3f       	cpi	r25, 0xFE	; 254
    56a0:	08 f0       	brcs	.+2      	; 0x56a4 <__addsf3x+0x9a>
    56a2:	b0 cf       	rjmp	.-160    	; 0x5604 <__addsf3+0x28>
    56a4:	93 95       	inc	r25
    56a6:	88 0f       	add	r24, r24
    56a8:	08 f0       	brcs	.+2      	; 0x56ac <__addsf3x+0xa2>
    56aa:	99 27       	eor	r25, r25
    56ac:	ee 0f       	add	r30, r30
    56ae:	97 95       	ror	r25
    56b0:	87 95       	ror	r24
    56b2:	08 95       	ret

000056b4 <__cmpsf2>:
    56b4:	0e 94 49 2c 	call	0x5892	; 0x5892 <__fp_cmp>
    56b8:	08 f4       	brcc	.+2      	; 0x56bc <__cmpsf2+0x8>
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	08 95       	ret

000056be <cos>:
    56be:	0e 94 86 2c 	call	0x590c	; 0x590c <__fp_rempio2>
    56c2:	e3 95       	inc	r30
    56c4:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <__fp_sinus>

000056c8 <__divsf3>:
    56c8:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__divsf3x>
    56cc:	0c 94 af 2c 	jmp	0x595e	; 0x595e <__fp_round>
    56d0:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__fp_pscB>
    56d4:	58 f0       	brcs	.+22     	; 0x56ec <__divsf3+0x24>
    56d6:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__fp_pscA>
    56da:	40 f0       	brcs	.+16     	; 0x56ec <__divsf3+0x24>
    56dc:	29 f4       	brne	.+10     	; 0x56e8 <__divsf3+0x20>
    56de:	5f 3f       	cpi	r21, 0xFF	; 255
    56e0:	29 f0       	breq	.+10     	; 0x56ec <__divsf3+0x24>
    56e2:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__fp_inf>
    56e6:	51 11       	cpse	r21, r1
    56e8:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <__fp_szero>
    56ec:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__fp_nan>

000056f0 <__divsf3x>:
    56f0:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__fp_split3>
    56f4:	68 f3       	brcs	.-38     	; 0x56d0 <__divsf3+0x8>

000056f6 <__divsf3_pse>:
    56f6:	99 23       	and	r25, r25
    56f8:	b1 f3       	breq	.-20     	; 0x56e6 <__divsf3+0x1e>
    56fa:	55 23       	and	r21, r21
    56fc:	91 f3       	breq	.-28     	; 0x56e2 <__divsf3+0x1a>
    56fe:	95 1b       	sub	r25, r21
    5700:	55 0b       	sbc	r21, r21
    5702:	bb 27       	eor	r27, r27
    5704:	aa 27       	eor	r26, r26
    5706:	62 17       	cp	r22, r18
    5708:	73 07       	cpc	r23, r19
    570a:	84 07       	cpc	r24, r20
    570c:	38 f0       	brcs	.+14     	; 0x571c <__divsf3_pse+0x26>
    570e:	9f 5f       	subi	r25, 0xFF	; 255
    5710:	5f 4f       	sbci	r21, 0xFF	; 255
    5712:	22 0f       	add	r18, r18
    5714:	33 1f       	adc	r19, r19
    5716:	44 1f       	adc	r20, r20
    5718:	aa 1f       	adc	r26, r26
    571a:	a9 f3       	breq	.-22     	; 0x5706 <__divsf3_pse+0x10>
    571c:	35 d0       	rcall	.+106    	; 0x5788 <__divsf3_pse+0x92>
    571e:	0e 2e       	mov	r0, r30
    5720:	3a f0       	brmi	.+14     	; 0x5730 <__divsf3_pse+0x3a>
    5722:	e0 e8       	ldi	r30, 0x80	; 128
    5724:	32 d0       	rcall	.+100    	; 0x578a <__divsf3_pse+0x94>
    5726:	91 50       	subi	r25, 0x01	; 1
    5728:	50 40       	sbci	r21, 0x00	; 0
    572a:	e6 95       	lsr	r30
    572c:	00 1c       	adc	r0, r0
    572e:	ca f7       	brpl	.-14     	; 0x5722 <__divsf3_pse+0x2c>
    5730:	2b d0       	rcall	.+86     	; 0x5788 <__divsf3_pse+0x92>
    5732:	fe 2f       	mov	r31, r30
    5734:	29 d0       	rcall	.+82     	; 0x5788 <__divsf3_pse+0x92>
    5736:	66 0f       	add	r22, r22
    5738:	77 1f       	adc	r23, r23
    573a:	88 1f       	adc	r24, r24
    573c:	bb 1f       	adc	r27, r27
    573e:	26 17       	cp	r18, r22
    5740:	37 07       	cpc	r19, r23
    5742:	48 07       	cpc	r20, r24
    5744:	ab 07       	cpc	r26, r27
    5746:	b0 e8       	ldi	r27, 0x80	; 128
    5748:	09 f0       	breq	.+2      	; 0x574c <__divsf3_pse+0x56>
    574a:	bb 0b       	sbc	r27, r27
    574c:	80 2d       	mov	r24, r0
    574e:	bf 01       	movw	r22, r30
    5750:	ff 27       	eor	r31, r31
    5752:	93 58       	subi	r25, 0x83	; 131
    5754:	5f 4f       	sbci	r21, 0xFF	; 255
    5756:	3a f0       	brmi	.+14     	; 0x5766 <__divsf3_pse+0x70>
    5758:	9e 3f       	cpi	r25, 0xFE	; 254
    575a:	51 05       	cpc	r21, r1
    575c:	78 f0       	brcs	.+30     	; 0x577c <__divsf3_pse+0x86>
    575e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__fp_inf>
    5762:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <__fp_szero>
    5766:	5f 3f       	cpi	r21, 0xFF	; 255
    5768:	e4 f3       	brlt	.-8      	; 0x5762 <__divsf3_pse+0x6c>
    576a:	98 3e       	cpi	r25, 0xE8	; 232
    576c:	d4 f3       	brlt	.-12     	; 0x5762 <__divsf3_pse+0x6c>
    576e:	86 95       	lsr	r24
    5770:	77 95       	ror	r23
    5772:	67 95       	ror	r22
    5774:	b7 95       	ror	r27
    5776:	f7 95       	ror	r31
    5778:	9f 5f       	subi	r25, 0xFF	; 255
    577a:	c9 f7       	brne	.-14     	; 0x576e <__divsf3_pse+0x78>
    577c:	88 0f       	add	r24, r24
    577e:	91 1d       	adc	r25, r1
    5780:	96 95       	lsr	r25
    5782:	87 95       	ror	r24
    5784:	97 f9       	bld	r25, 7
    5786:	08 95       	ret
    5788:	e1 e0       	ldi	r30, 0x01	; 1
    578a:	66 0f       	add	r22, r22
    578c:	77 1f       	adc	r23, r23
    578e:	88 1f       	adc	r24, r24
    5790:	bb 1f       	adc	r27, r27
    5792:	62 17       	cp	r22, r18
    5794:	73 07       	cpc	r23, r19
    5796:	84 07       	cpc	r24, r20
    5798:	ba 07       	cpc	r27, r26
    579a:	20 f0       	brcs	.+8      	; 0x57a4 <__divsf3_pse+0xae>
    579c:	62 1b       	sub	r22, r18
    579e:	73 0b       	sbc	r23, r19
    57a0:	84 0b       	sbc	r24, r20
    57a2:	ba 0b       	sbc	r27, r26
    57a4:	ee 1f       	adc	r30, r30
    57a6:	88 f7       	brcc	.-30     	; 0x578a <__divsf3_pse+0x94>
    57a8:	e0 95       	com	r30
    57aa:	08 95       	ret

000057ac <__fixsfsi>:
    57ac:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <__fixunssfsi>
    57b0:	68 94       	set
    57b2:	b1 11       	cpse	r27, r1
    57b4:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <__fp_szero>
    57b8:	08 95       	ret

000057ba <__fixunssfsi>:
    57ba:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <__fp_splitA>
    57be:	88 f0       	brcs	.+34     	; 0x57e2 <__fixunssfsi+0x28>
    57c0:	9f 57       	subi	r25, 0x7F	; 127
    57c2:	98 f0       	brcs	.+38     	; 0x57ea <__fixunssfsi+0x30>
    57c4:	b9 2f       	mov	r27, r25
    57c6:	99 27       	eor	r25, r25
    57c8:	b7 51       	subi	r27, 0x17	; 23
    57ca:	b0 f0       	brcs	.+44     	; 0x57f8 <__fixunssfsi+0x3e>
    57cc:	e1 f0       	breq	.+56     	; 0x5806 <__fixunssfsi+0x4c>
    57ce:	66 0f       	add	r22, r22
    57d0:	77 1f       	adc	r23, r23
    57d2:	88 1f       	adc	r24, r24
    57d4:	99 1f       	adc	r25, r25
    57d6:	1a f0       	brmi	.+6      	; 0x57de <__fixunssfsi+0x24>
    57d8:	ba 95       	dec	r27
    57da:	c9 f7       	brne	.-14     	; 0x57ce <__fixunssfsi+0x14>
    57dc:	14 c0       	rjmp	.+40     	; 0x5806 <__fixunssfsi+0x4c>
    57de:	b1 30       	cpi	r27, 0x01	; 1
    57e0:	91 f0       	breq	.+36     	; 0x5806 <__fixunssfsi+0x4c>
    57e2:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__fp_zero>
    57e6:	b1 e0       	ldi	r27, 0x01	; 1
    57e8:	08 95       	ret
    57ea:	0c 94 f6 2c 	jmp	0x59ec	; 0x59ec <__fp_zero>
    57ee:	67 2f       	mov	r22, r23
    57f0:	78 2f       	mov	r23, r24
    57f2:	88 27       	eor	r24, r24
    57f4:	b8 5f       	subi	r27, 0xF8	; 248
    57f6:	39 f0       	breq	.+14     	; 0x5806 <__fixunssfsi+0x4c>
    57f8:	b9 3f       	cpi	r27, 0xF9	; 249
    57fa:	cc f3       	brlt	.-14     	; 0x57ee <__fixunssfsi+0x34>
    57fc:	86 95       	lsr	r24
    57fe:	77 95       	ror	r23
    5800:	67 95       	ror	r22
    5802:	b3 95       	inc	r27
    5804:	d9 f7       	brne	.-10     	; 0x57fc <__fixunssfsi+0x42>
    5806:	3e f4       	brtc	.+14     	; 0x5816 <__fixunssfsi+0x5c>
    5808:	90 95       	com	r25
    580a:	80 95       	com	r24
    580c:	70 95       	com	r23
    580e:	61 95       	neg	r22
    5810:	7f 4f       	sbci	r23, 0xFF	; 255
    5812:	8f 4f       	sbci	r24, 0xFF	; 255
    5814:	9f 4f       	sbci	r25, 0xFF	; 255
    5816:	08 95       	ret

00005818 <__floatunsisf>:
    5818:	e8 94       	clt
    581a:	09 c0       	rjmp	.+18     	; 0x582e <__floatsisf+0x12>

0000581c <__floatsisf>:
    581c:	97 fb       	bst	r25, 7
    581e:	3e f4       	brtc	.+14     	; 0x582e <__floatsisf+0x12>
    5820:	90 95       	com	r25
    5822:	80 95       	com	r24
    5824:	70 95       	com	r23
    5826:	61 95       	neg	r22
    5828:	7f 4f       	sbci	r23, 0xFF	; 255
    582a:	8f 4f       	sbci	r24, 0xFF	; 255
    582c:	9f 4f       	sbci	r25, 0xFF	; 255
    582e:	99 23       	and	r25, r25
    5830:	a9 f0       	breq	.+42     	; 0x585c <__floatsisf+0x40>
    5832:	f9 2f       	mov	r31, r25
    5834:	96 e9       	ldi	r25, 0x96	; 150
    5836:	bb 27       	eor	r27, r27
    5838:	93 95       	inc	r25
    583a:	f6 95       	lsr	r31
    583c:	87 95       	ror	r24
    583e:	77 95       	ror	r23
    5840:	67 95       	ror	r22
    5842:	b7 95       	ror	r27
    5844:	f1 11       	cpse	r31, r1
    5846:	f8 cf       	rjmp	.-16     	; 0x5838 <__floatsisf+0x1c>
    5848:	fa f4       	brpl	.+62     	; 0x5888 <__floatsisf+0x6c>
    584a:	bb 0f       	add	r27, r27
    584c:	11 f4       	brne	.+4      	; 0x5852 <__floatsisf+0x36>
    584e:	60 ff       	sbrs	r22, 0
    5850:	1b c0       	rjmp	.+54     	; 0x5888 <__floatsisf+0x6c>
    5852:	6f 5f       	subi	r22, 0xFF	; 255
    5854:	7f 4f       	sbci	r23, 0xFF	; 255
    5856:	8f 4f       	sbci	r24, 0xFF	; 255
    5858:	9f 4f       	sbci	r25, 0xFF	; 255
    585a:	16 c0       	rjmp	.+44     	; 0x5888 <__floatsisf+0x6c>
    585c:	88 23       	and	r24, r24
    585e:	11 f0       	breq	.+4      	; 0x5864 <__floatsisf+0x48>
    5860:	96 e9       	ldi	r25, 0x96	; 150
    5862:	11 c0       	rjmp	.+34     	; 0x5886 <__floatsisf+0x6a>
    5864:	77 23       	and	r23, r23
    5866:	21 f0       	breq	.+8      	; 0x5870 <__floatsisf+0x54>
    5868:	9e e8       	ldi	r25, 0x8E	; 142
    586a:	87 2f       	mov	r24, r23
    586c:	76 2f       	mov	r23, r22
    586e:	05 c0       	rjmp	.+10     	; 0x587a <__floatsisf+0x5e>
    5870:	66 23       	and	r22, r22
    5872:	71 f0       	breq	.+28     	; 0x5890 <__floatsisf+0x74>
    5874:	96 e8       	ldi	r25, 0x86	; 134
    5876:	86 2f       	mov	r24, r22
    5878:	70 e0       	ldi	r23, 0x00	; 0
    587a:	60 e0       	ldi	r22, 0x00	; 0
    587c:	2a f0       	brmi	.+10     	; 0x5888 <__floatsisf+0x6c>
    587e:	9a 95       	dec	r25
    5880:	66 0f       	add	r22, r22
    5882:	77 1f       	adc	r23, r23
    5884:	88 1f       	adc	r24, r24
    5886:	da f7       	brpl	.-10     	; 0x587e <__floatsisf+0x62>
    5888:	88 0f       	add	r24, r24
    588a:	96 95       	lsr	r25
    588c:	87 95       	ror	r24
    588e:	97 f9       	bld	r25, 7
    5890:	08 95       	ret

00005892 <__fp_cmp>:
    5892:	99 0f       	add	r25, r25
    5894:	00 08       	sbc	r0, r0
    5896:	55 0f       	add	r21, r21
    5898:	aa 0b       	sbc	r26, r26
    589a:	e0 e8       	ldi	r30, 0x80	; 128
    589c:	fe ef       	ldi	r31, 0xFE	; 254
    589e:	16 16       	cp	r1, r22
    58a0:	17 06       	cpc	r1, r23
    58a2:	e8 07       	cpc	r30, r24
    58a4:	f9 07       	cpc	r31, r25
    58a6:	c0 f0       	brcs	.+48     	; 0x58d8 <__fp_cmp+0x46>
    58a8:	12 16       	cp	r1, r18
    58aa:	13 06       	cpc	r1, r19
    58ac:	e4 07       	cpc	r30, r20
    58ae:	f5 07       	cpc	r31, r21
    58b0:	98 f0       	brcs	.+38     	; 0x58d8 <__fp_cmp+0x46>
    58b2:	62 1b       	sub	r22, r18
    58b4:	73 0b       	sbc	r23, r19
    58b6:	84 0b       	sbc	r24, r20
    58b8:	95 0b       	sbc	r25, r21
    58ba:	39 f4       	brne	.+14     	; 0x58ca <__fp_cmp+0x38>
    58bc:	0a 26       	eor	r0, r26
    58be:	61 f0       	breq	.+24     	; 0x58d8 <__fp_cmp+0x46>
    58c0:	23 2b       	or	r18, r19
    58c2:	24 2b       	or	r18, r20
    58c4:	25 2b       	or	r18, r21
    58c6:	21 f4       	brne	.+8      	; 0x58d0 <__fp_cmp+0x3e>
    58c8:	08 95       	ret
    58ca:	0a 26       	eor	r0, r26
    58cc:	09 f4       	brne	.+2      	; 0x58d0 <__fp_cmp+0x3e>
    58ce:	a1 40       	sbci	r26, 0x01	; 1
    58d0:	a6 95       	lsr	r26
    58d2:	8f ef       	ldi	r24, 0xFF	; 255
    58d4:	81 1d       	adc	r24, r1
    58d6:	81 1d       	adc	r24, r1
    58d8:	08 95       	ret

000058da <__fp_inf>:
    58da:	97 f9       	bld	r25, 7
    58dc:	9f 67       	ori	r25, 0x7F	; 127
    58de:	80 e8       	ldi	r24, 0x80	; 128
    58e0:	70 e0       	ldi	r23, 0x00	; 0
    58e2:	60 e0       	ldi	r22, 0x00	; 0
    58e4:	08 95       	ret

000058e6 <__fp_nan>:
    58e6:	9f ef       	ldi	r25, 0xFF	; 255
    58e8:	80 ec       	ldi	r24, 0xC0	; 192
    58ea:	08 95       	ret

000058ec <__fp_pscA>:
    58ec:	00 24       	eor	r0, r0
    58ee:	0a 94       	dec	r0
    58f0:	16 16       	cp	r1, r22
    58f2:	17 06       	cpc	r1, r23
    58f4:	18 06       	cpc	r1, r24
    58f6:	09 06       	cpc	r0, r25
    58f8:	08 95       	ret

000058fa <__fp_pscB>:
    58fa:	00 24       	eor	r0, r0
    58fc:	0a 94       	dec	r0
    58fe:	12 16       	cp	r1, r18
    5900:	13 06       	cpc	r1, r19
    5902:	14 06       	cpc	r1, r20
    5904:	05 06       	cpc	r0, r21
    5906:	08 95       	ret
    5908:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__fp_nan>

0000590c <__fp_rempio2>:
    590c:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <__fp_splitA>
    5910:	d8 f3       	brcs	.-10     	; 0x5908 <__fp_pscB+0xe>
    5912:	e8 94       	clt
    5914:	e0 e0       	ldi	r30, 0x00	; 0
    5916:	bb 27       	eor	r27, r27
    5918:	9f 57       	subi	r25, 0x7F	; 127
    591a:	f0 f0       	brcs	.+60     	; 0x5958 <__fp_rempio2+0x4c>
    591c:	2a ed       	ldi	r18, 0xDA	; 218
    591e:	3f e0       	ldi	r19, 0x0F	; 15
    5920:	49 ec       	ldi	r20, 0xC9	; 201
    5922:	06 c0       	rjmp	.+12     	; 0x5930 <__fp_rempio2+0x24>
    5924:	ee 0f       	add	r30, r30
    5926:	bb 0f       	add	r27, r27
    5928:	66 1f       	adc	r22, r22
    592a:	77 1f       	adc	r23, r23
    592c:	88 1f       	adc	r24, r24
    592e:	28 f0       	brcs	.+10     	; 0x593a <__fp_rempio2+0x2e>
    5930:	b2 3a       	cpi	r27, 0xA2	; 162
    5932:	62 07       	cpc	r22, r18
    5934:	73 07       	cpc	r23, r19
    5936:	84 07       	cpc	r24, r20
    5938:	28 f0       	brcs	.+10     	; 0x5944 <__fp_rempio2+0x38>
    593a:	b2 5a       	subi	r27, 0xA2	; 162
    593c:	62 0b       	sbc	r22, r18
    593e:	73 0b       	sbc	r23, r19
    5940:	84 0b       	sbc	r24, r20
    5942:	e3 95       	inc	r30
    5944:	9a 95       	dec	r25
    5946:	72 f7       	brpl	.-36     	; 0x5924 <__fp_rempio2+0x18>
    5948:	80 38       	cpi	r24, 0x80	; 128
    594a:	30 f4       	brcc	.+12     	; 0x5958 <__fp_rempio2+0x4c>
    594c:	9a 95       	dec	r25
    594e:	bb 0f       	add	r27, r27
    5950:	66 1f       	adc	r22, r22
    5952:	77 1f       	adc	r23, r23
    5954:	88 1f       	adc	r24, r24
    5956:	d2 f7       	brpl	.-12     	; 0x594c <__fp_rempio2+0x40>
    5958:	90 48       	sbci	r25, 0x80	; 128
    595a:	0c 94 b0 2d 	jmp	0x5b60	; 0x5b60 <__fp_mpack_finite>

0000595e <__fp_round>:
    595e:	09 2e       	mov	r0, r25
    5960:	03 94       	inc	r0
    5962:	00 0c       	add	r0, r0
    5964:	11 f4       	brne	.+4      	; 0x596a <__fp_round+0xc>
    5966:	88 23       	and	r24, r24
    5968:	52 f0       	brmi	.+20     	; 0x597e <__fp_round+0x20>
    596a:	bb 0f       	add	r27, r27
    596c:	40 f4       	brcc	.+16     	; 0x597e <__fp_round+0x20>
    596e:	bf 2b       	or	r27, r31
    5970:	11 f4       	brne	.+4      	; 0x5976 <__fp_round+0x18>
    5972:	60 ff       	sbrs	r22, 0
    5974:	04 c0       	rjmp	.+8      	; 0x597e <__fp_round+0x20>
    5976:	6f 5f       	subi	r22, 0xFF	; 255
    5978:	7f 4f       	sbci	r23, 0xFF	; 255
    597a:	8f 4f       	sbci	r24, 0xFF	; 255
    597c:	9f 4f       	sbci	r25, 0xFF	; 255
    597e:	08 95       	ret

00005980 <__fp_sinus>:
    5980:	ef 93       	push	r30
    5982:	e0 ff       	sbrs	r30, 0
    5984:	07 c0       	rjmp	.+14     	; 0x5994 <__fp_sinus+0x14>
    5986:	a2 ea       	ldi	r26, 0xA2	; 162
    5988:	2a ed       	ldi	r18, 0xDA	; 218
    598a:	3f e0       	ldi	r19, 0x0F	; 15
    598c:	49 ec       	ldi	r20, 0xC9	; 201
    598e:	5f eb       	ldi	r21, 0xBF	; 191
    5990:	0e 94 05 2b 	call	0x560a	; 0x560a <__addsf3x>
    5994:	0e 94 af 2c 	call	0x595e	; 0x595e <__fp_round>
    5998:	0f 90       	pop	r0
    599a:	03 94       	inc	r0
    599c:	01 fc       	sbrc	r0, 1
    599e:	90 58       	subi	r25, 0x80	; 128
    59a0:	ec e0       	ldi	r30, 0x0C	; 12
    59a2:	f2 e0       	ldi	r31, 0x02	; 2
    59a4:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__fp_powsodd>

000059a8 <__fp_split3>:
    59a8:	57 fd       	sbrc	r21, 7
    59aa:	90 58       	subi	r25, 0x80	; 128
    59ac:	44 0f       	add	r20, r20
    59ae:	55 1f       	adc	r21, r21
    59b0:	59 f0       	breq	.+22     	; 0x59c8 <__fp_splitA+0x10>
    59b2:	5f 3f       	cpi	r21, 0xFF	; 255
    59b4:	71 f0       	breq	.+28     	; 0x59d2 <__fp_splitA+0x1a>
    59b6:	47 95       	ror	r20

000059b8 <__fp_splitA>:
    59b8:	88 0f       	add	r24, r24
    59ba:	97 fb       	bst	r25, 7
    59bc:	99 1f       	adc	r25, r25
    59be:	61 f0       	breq	.+24     	; 0x59d8 <__fp_splitA+0x20>
    59c0:	9f 3f       	cpi	r25, 0xFF	; 255
    59c2:	79 f0       	breq	.+30     	; 0x59e2 <__fp_splitA+0x2a>
    59c4:	87 95       	ror	r24
    59c6:	08 95       	ret
    59c8:	12 16       	cp	r1, r18
    59ca:	13 06       	cpc	r1, r19
    59cc:	14 06       	cpc	r1, r20
    59ce:	55 1f       	adc	r21, r21
    59d0:	f2 cf       	rjmp	.-28     	; 0x59b6 <__fp_split3+0xe>
    59d2:	46 95       	lsr	r20
    59d4:	f1 df       	rcall	.-30     	; 0x59b8 <__fp_splitA>
    59d6:	08 c0       	rjmp	.+16     	; 0x59e8 <__fp_splitA+0x30>
    59d8:	16 16       	cp	r1, r22
    59da:	17 06       	cpc	r1, r23
    59dc:	18 06       	cpc	r1, r24
    59de:	99 1f       	adc	r25, r25
    59e0:	f1 cf       	rjmp	.-30     	; 0x59c4 <__fp_splitA+0xc>
    59e2:	86 95       	lsr	r24
    59e4:	71 05       	cpc	r23, r1
    59e6:	61 05       	cpc	r22, r1
    59e8:	08 94       	sec
    59ea:	08 95       	ret

000059ec <__fp_zero>:
    59ec:	e8 94       	clt

000059ee <__fp_szero>:
    59ee:	bb 27       	eor	r27, r27
    59f0:	66 27       	eor	r22, r22
    59f2:	77 27       	eor	r23, r23
    59f4:	cb 01       	movw	r24, r22
    59f6:	97 f9       	bld	r25, 7
    59f8:	08 95       	ret

000059fa <__gesf2>:
    59fa:	0e 94 49 2c 	call	0x5892	; 0x5892 <__fp_cmp>
    59fe:	08 f4       	brcc	.+2      	; 0x5a02 <__gesf2+0x8>
    5a00:	8f ef       	ldi	r24, 0xFF	; 255
    5a02:	08 95       	ret

00005a04 <__mulsf3>:
    5a04:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsf3x>
    5a08:	0c 94 af 2c 	jmp	0x595e	; 0x595e <__fp_round>
    5a0c:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__fp_pscA>
    5a10:	38 f0       	brcs	.+14     	; 0x5a20 <__mulsf3+0x1c>
    5a12:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <__fp_pscB>
    5a16:	20 f0       	brcs	.+8      	; 0x5a20 <__mulsf3+0x1c>
    5a18:	95 23       	and	r25, r21
    5a1a:	11 f0       	breq	.+4      	; 0x5a20 <__mulsf3+0x1c>
    5a1c:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__fp_inf>
    5a20:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__fp_nan>
    5a24:	11 24       	eor	r1, r1
    5a26:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <__fp_szero>

00005a2a <__mulsf3x>:
    5a2a:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__fp_split3>
    5a2e:	70 f3       	brcs	.-36     	; 0x5a0c <__mulsf3+0x8>

00005a30 <__mulsf3_pse>:
    5a30:	95 9f       	mul	r25, r21
    5a32:	c1 f3       	breq	.-16     	; 0x5a24 <__mulsf3+0x20>
    5a34:	95 0f       	add	r25, r21
    5a36:	50 e0       	ldi	r21, 0x00	; 0
    5a38:	55 1f       	adc	r21, r21
    5a3a:	62 9f       	mul	r22, r18
    5a3c:	f0 01       	movw	r30, r0
    5a3e:	72 9f       	mul	r23, r18
    5a40:	bb 27       	eor	r27, r27
    5a42:	f0 0d       	add	r31, r0
    5a44:	b1 1d       	adc	r27, r1
    5a46:	63 9f       	mul	r22, r19
    5a48:	aa 27       	eor	r26, r26
    5a4a:	f0 0d       	add	r31, r0
    5a4c:	b1 1d       	adc	r27, r1
    5a4e:	aa 1f       	adc	r26, r26
    5a50:	64 9f       	mul	r22, r20
    5a52:	66 27       	eor	r22, r22
    5a54:	b0 0d       	add	r27, r0
    5a56:	a1 1d       	adc	r26, r1
    5a58:	66 1f       	adc	r22, r22
    5a5a:	82 9f       	mul	r24, r18
    5a5c:	22 27       	eor	r18, r18
    5a5e:	b0 0d       	add	r27, r0
    5a60:	a1 1d       	adc	r26, r1
    5a62:	62 1f       	adc	r22, r18
    5a64:	73 9f       	mul	r23, r19
    5a66:	b0 0d       	add	r27, r0
    5a68:	a1 1d       	adc	r26, r1
    5a6a:	62 1f       	adc	r22, r18
    5a6c:	83 9f       	mul	r24, r19
    5a6e:	a0 0d       	add	r26, r0
    5a70:	61 1d       	adc	r22, r1
    5a72:	22 1f       	adc	r18, r18
    5a74:	74 9f       	mul	r23, r20
    5a76:	33 27       	eor	r19, r19
    5a78:	a0 0d       	add	r26, r0
    5a7a:	61 1d       	adc	r22, r1
    5a7c:	23 1f       	adc	r18, r19
    5a7e:	84 9f       	mul	r24, r20
    5a80:	60 0d       	add	r22, r0
    5a82:	21 1d       	adc	r18, r1
    5a84:	82 2f       	mov	r24, r18
    5a86:	76 2f       	mov	r23, r22
    5a88:	6a 2f       	mov	r22, r26
    5a8a:	11 24       	eor	r1, r1
    5a8c:	9f 57       	subi	r25, 0x7F	; 127
    5a8e:	50 40       	sbci	r21, 0x00	; 0
    5a90:	9a f0       	brmi	.+38     	; 0x5ab8 <__mulsf3_pse+0x88>
    5a92:	f1 f0       	breq	.+60     	; 0x5ad0 <__mulsf3_pse+0xa0>
    5a94:	88 23       	and	r24, r24
    5a96:	4a f0       	brmi	.+18     	; 0x5aaa <__mulsf3_pse+0x7a>
    5a98:	ee 0f       	add	r30, r30
    5a9a:	ff 1f       	adc	r31, r31
    5a9c:	bb 1f       	adc	r27, r27
    5a9e:	66 1f       	adc	r22, r22
    5aa0:	77 1f       	adc	r23, r23
    5aa2:	88 1f       	adc	r24, r24
    5aa4:	91 50       	subi	r25, 0x01	; 1
    5aa6:	50 40       	sbci	r21, 0x00	; 0
    5aa8:	a9 f7       	brne	.-22     	; 0x5a94 <__mulsf3_pse+0x64>
    5aaa:	9e 3f       	cpi	r25, 0xFE	; 254
    5aac:	51 05       	cpc	r21, r1
    5aae:	80 f0       	brcs	.+32     	; 0x5ad0 <__mulsf3_pse+0xa0>
    5ab0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__fp_inf>
    5ab4:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <__fp_szero>
    5ab8:	5f 3f       	cpi	r21, 0xFF	; 255
    5aba:	e4 f3       	brlt	.-8      	; 0x5ab4 <__mulsf3_pse+0x84>
    5abc:	98 3e       	cpi	r25, 0xE8	; 232
    5abe:	d4 f3       	brlt	.-12     	; 0x5ab4 <__mulsf3_pse+0x84>
    5ac0:	86 95       	lsr	r24
    5ac2:	77 95       	ror	r23
    5ac4:	67 95       	ror	r22
    5ac6:	b7 95       	ror	r27
    5ac8:	f7 95       	ror	r31
    5aca:	e7 95       	ror	r30
    5acc:	9f 5f       	subi	r25, 0xFF	; 255
    5ace:	c1 f7       	brne	.-16     	; 0x5ac0 <__mulsf3_pse+0x90>
    5ad0:	fe 2b       	or	r31, r30
    5ad2:	88 0f       	add	r24, r24
    5ad4:	91 1d       	adc	r25, r1
    5ad6:	96 95       	lsr	r25
    5ad8:	87 95       	ror	r24
    5ada:	97 f9       	bld	r25, 7
    5adc:	08 95       	ret

00005ade <round>:
    5ade:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <__fp_splitA>
    5ae2:	e8 f0       	brcs	.+58     	; 0x5b1e <round+0x40>
    5ae4:	9e 37       	cpi	r25, 0x7E	; 126
    5ae6:	e8 f0       	brcs	.+58     	; 0x5b22 <round+0x44>
    5ae8:	96 39       	cpi	r25, 0x96	; 150
    5aea:	b8 f4       	brcc	.+46     	; 0x5b1a <round+0x3c>
    5aec:	9e 38       	cpi	r25, 0x8E	; 142
    5aee:	48 f4       	brcc	.+18     	; 0x5b02 <round+0x24>
    5af0:	67 2f       	mov	r22, r23
    5af2:	78 2f       	mov	r23, r24
    5af4:	88 27       	eor	r24, r24
    5af6:	98 5f       	subi	r25, 0xF8	; 248
    5af8:	f9 cf       	rjmp	.-14     	; 0x5aec <round+0xe>
    5afa:	86 95       	lsr	r24
    5afc:	77 95       	ror	r23
    5afe:	67 95       	ror	r22
    5b00:	93 95       	inc	r25
    5b02:	95 39       	cpi	r25, 0x95	; 149
    5b04:	d0 f3       	brcs	.-12     	; 0x5afa <round+0x1c>
    5b06:	b6 2f       	mov	r27, r22
    5b08:	b1 70       	andi	r27, 0x01	; 1
    5b0a:	6b 0f       	add	r22, r27
    5b0c:	71 1d       	adc	r23, r1
    5b0e:	81 1d       	adc	r24, r1
    5b10:	20 f4       	brcc	.+8      	; 0x5b1a <round+0x3c>
    5b12:	87 95       	ror	r24
    5b14:	77 95       	ror	r23
    5b16:	67 95       	ror	r22
    5b18:	93 95       	inc	r25
    5b1a:	0c 94 93 2d 	jmp	0x5b26	; 0x5b26 <__fp_mintl>
    5b1e:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__fp_mpack>
    5b22:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <__fp_szero>

00005b26 <__fp_mintl>:
    5b26:	88 23       	and	r24, r24
    5b28:	71 f4       	brne	.+28     	; 0x5b46 <__fp_mintl+0x20>
    5b2a:	77 23       	and	r23, r23
    5b2c:	21 f0       	breq	.+8      	; 0x5b36 <__fp_mintl+0x10>
    5b2e:	98 50       	subi	r25, 0x08	; 8
    5b30:	87 2b       	or	r24, r23
    5b32:	76 2f       	mov	r23, r22
    5b34:	07 c0       	rjmp	.+14     	; 0x5b44 <__fp_mintl+0x1e>
    5b36:	66 23       	and	r22, r22
    5b38:	11 f4       	brne	.+4      	; 0x5b3e <__fp_mintl+0x18>
    5b3a:	99 27       	eor	r25, r25
    5b3c:	0d c0       	rjmp	.+26     	; 0x5b58 <__fp_mintl+0x32>
    5b3e:	90 51       	subi	r25, 0x10	; 16
    5b40:	86 2b       	or	r24, r22
    5b42:	70 e0       	ldi	r23, 0x00	; 0
    5b44:	60 e0       	ldi	r22, 0x00	; 0
    5b46:	2a f0       	brmi	.+10     	; 0x5b52 <__fp_mintl+0x2c>
    5b48:	9a 95       	dec	r25
    5b4a:	66 0f       	add	r22, r22
    5b4c:	77 1f       	adc	r23, r23
    5b4e:	88 1f       	adc	r24, r24
    5b50:	da f7       	brpl	.-10     	; 0x5b48 <__fp_mintl+0x22>
    5b52:	88 0f       	add	r24, r24
    5b54:	96 95       	lsr	r25
    5b56:	87 95       	ror	r24
    5b58:	97 f9       	bld	r25, 7
    5b5a:	08 95       	ret

00005b5c <__fp_mpack>:
    5b5c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b5e:	31 f0       	breq	.+12     	; 0x5b6c <__fp_mpack_finite+0xc>

00005b60 <__fp_mpack_finite>:
    5b60:	91 50       	subi	r25, 0x01	; 1
    5b62:	20 f4       	brcc	.+8      	; 0x5b6c <__fp_mpack_finite+0xc>
    5b64:	87 95       	ror	r24
    5b66:	77 95       	ror	r23
    5b68:	67 95       	ror	r22
    5b6a:	b7 95       	ror	r27
    5b6c:	88 0f       	add	r24, r24
    5b6e:	91 1d       	adc	r25, r1
    5b70:	96 95       	lsr	r25
    5b72:	87 95       	ror	r24
    5b74:	97 f9       	bld	r25, 7
    5b76:	08 95       	ret

00005b78 <__fp_powsodd>:
    5b78:	9f 93       	push	r25
    5b7a:	8f 93       	push	r24
    5b7c:	7f 93       	push	r23
    5b7e:	6f 93       	push	r22
    5b80:	ff 93       	push	r31
    5b82:	ef 93       	push	r30
    5b84:	9b 01       	movw	r18, r22
    5b86:	ac 01       	movw	r20, r24
    5b88:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__mulsf3>
    5b8c:	ef 91       	pop	r30
    5b8e:	ff 91       	pop	r31
    5b90:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__fp_powser>
    5b94:	2f 91       	pop	r18
    5b96:	3f 91       	pop	r19
    5b98:	4f 91       	pop	r20
    5b9a:	5f 91       	pop	r21
    5b9c:	0c 94 02 2d 	jmp	0x5a04	; 0x5a04 <__mulsf3>

00005ba0 <__fp_powser>:
    5ba0:	df 93       	push	r29
    5ba2:	cf 93       	push	r28
    5ba4:	1f 93       	push	r17
    5ba6:	0f 93       	push	r16
    5ba8:	ff 92       	push	r15
    5baa:	ef 92       	push	r14
    5bac:	df 92       	push	r13
    5bae:	7b 01       	movw	r14, r22
    5bb0:	8c 01       	movw	r16, r24
    5bb2:	68 94       	set
    5bb4:	06 c0       	rjmp	.+12     	; 0x5bc2 <__fp_powser+0x22>
    5bb6:	da 2e       	mov	r13, r26
    5bb8:	ef 01       	movw	r28, r30
    5bba:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsf3x>
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	e8 94       	clt
    5bc2:	a5 91       	lpm	r26, Z+
    5bc4:	25 91       	lpm	r18, Z+
    5bc6:	35 91       	lpm	r19, Z+
    5bc8:	45 91       	lpm	r20, Z+
    5bca:	55 91       	lpm	r21, Z+
    5bcc:	a6 f3       	brts	.-24     	; 0x5bb6 <__fp_powser+0x16>
    5bce:	ef 01       	movw	r28, r30
    5bd0:	0e 94 05 2b 	call	0x560a	; 0x560a <__addsf3x>
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	97 01       	movw	r18, r14
    5bd8:	a8 01       	movw	r20, r16
    5bda:	da 94       	dec	r13
    5bdc:	69 f7       	brne	.-38     	; 0x5bb8 <__fp_powser+0x18>
    5bde:	df 90       	pop	r13
    5be0:	ef 90       	pop	r14
    5be2:	ff 90       	pop	r15
    5be4:	0f 91       	pop	r16
    5be6:	1f 91       	pop	r17
    5be8:	cf 91       	pop	r28
    5bea:	df 91       	pop	r29
    5bec:	08 95       	ret

00005bee <__mulsi3>:
    5bee:	db 01       	movw	r26, r22
    5bf0:	8f 93       	push	r24
    5bf2:	9f 93       	push	r25
    5bf4:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <__muluhisi3>
    5bf8:	bf 91       	pop	r27
    5bfa:	af 91       	pop	r26
    5bfc:	a2 9f       	mul	r26, r18
    5bfe:	80 0d       	add	r24, r0
    5c00:	91 1d       	adc	r25, r1
    5c02:	a3 9f       	mul	r26, r19
    5c04:	90 0d       	add	r25, r0
    5c06:	b2 9f       	mul	r27, r18
    5c08:	90 0d       	add	r25, r0
    5c0a:	11 24       	eor	r1, r1
    5c0c:	08 95       	ret

00005c0e <__udivmodhi4>:
    5c0e:	aa 1b       	sub	r26, r26
    5c10:	bb 1b       	sub	r27, r27
    5c12:	51 e1       	ldi	r21, 0x11	; 17
    5c14:	07 c0       	rjmp	.+14     	; 0x5c24 <__udivmodhi4_ep>

00005c16 <__udivmodhi4_loop>:
    5c16:	aa 1f       	adc	r26, r26
    5c18:	bb 1f       	adc	r27, r27
    5c1a:	a6 17       	cp	r26, r22
    5c1c:	b7 07       	cpc	r27, r23
    5c1e:	10 f0       	brcs	.+4      	; 0x5c24 <__udivmodhi4_ep>
    5c20:	a6 1b       	sub	r26, r22
    5c22:	b7 0b       	sbc	r27, r23

00005c24 <__udivmodhi4_ep>:
    5c24:	88 1f       	adc	r24, r24
    5c26:	99 1f       	adc	r25, r25
    5c28:	5a 95       	dec	r21
    5c2a:	a9 f7       	brne	.-22     	; 0x5c16 <__udivmodhi4_loop>
    5c2c:	80 95       	com	r24
    5c2e:	90 95       	com	r25
    5c30:	bc 01       	movw	r22, r24
    5c32:	cd 01       	movw	r24, r26
    5c34:	08 95       	ret

00005c36 <__divmodhi4>:
    5c36:	97 fb       	bst	r25, 7
    5c38:	07 2e       	mov	r0, r23
    5c3a:	16 f4       	brtc	.+4      	; 0x5c40 <__divmodhi4+0xa>
    5c3c:	00 94       	com	r0
    5c3e:	07 d0       	rcall	.+14     	; 0x5c4e <__divmodhi4_neg1>
    5c40:	77 fd       	sbrc	r23, 7
    5c42:	09 d0       	rcall	.+18     	; 0x5c56 <__divmodhi4_neg2>
    5c44:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__udivmodhi4>
    5c48:	07 fc       	sbrc	r0, 7
    5c4a:	05 d0       	rcall	.+10     	; 0x5c56 <__divmodhi4_neg2>
    5c4c:	3e f4       	brtc	.+14     	; 0x5c5c <__divmodhi4_exit>

00005c4e <__divmodhi4_neg1>:
    5c4e:	90 95       	com	r25
    5c50:	81 95       	neg	r24
    5c52:	9f 4f       	sbci	r25, 0xFF	; 255
    5c54:	08 95       	ret

00005c56 <__divmodhi4_neg2>:
    5c56:	70 95       	com	r23
    5c58:	61 95       	neg	r22
    5c5a:	7f 4f       	sbci	r23, 0xFF	; 255

00005c5c <__divmodhi4_exit>:
    5c5c:	08 95       	ret

00005c5e <__udivmodsi4>:
    5c5e:	a1 e2       	ldi	r26, 0x21	; 33
    5c60:	1a 2e       	mov	r1, r26
    5c62:	aa 1b       	sub	r26, r26
    5c64:	bb 1b       	sub	r27, r27
    5c66:	fd 01       	movw	r30, r26
    5c68:	0d c0       	rjmp	.+26     	; 0x5c84 <__udivmodsi4_ep>

00005c6a <__udivmodsi4_loop>:
    5c6a:	aa 1f       	adc	r26, r26
    5c6c:	bb 1f       	adc	r27, r27
    5c6e:	ee 1f       	adc	r30, r30
    5c70:	ff 1f       	adc	r31, r31
    5c72:	a2 17       	cp	r26, r18
    5c74:	b3 07       	cpc	r27, r19
    5c76:	e4 07       	cpc	r30, r20
    5c78:	f5 07       	cpc	r31, r21
    5c7a:	20 f0       	brcs	.+8      	; 0x5c84 <__udivmodsi4_ep>
    5c7c:	a2 1b       	sub	r26, r18
    5c7e:	b3 0b       	sbc	r27, r19
    5c80:	e4 0b       	sbc	r30, r20
    5c82:	f5 0b       	sbc	r31, r21

00005c84 <__udivmodsi4_ep>:
    5c84:	66 1f       	adc	r22, r22
    5c86:	77 1f       	adc	r23, r23
    5c88:	88 1f       	adc	r24, r24
    5c8a:	99 1f       	adc	r25, r25
    5c8c:	1a 94       	dec	r1
    5c8e:	69 f7       	brne	.-38     	; 0x5c6a <__udivmodsi4_loop>
    5c90:	60 95       	com	r22
    5c92:	70 95       	com	r23
    5c94:	80 95       	com	r24
    5c96:	90 95       	com	r25
    5c98:	9b 01       	movw	r18, r22
    5c9a:	ac 01       	movw	r20, r24
    5c9c:	bd 01       	movw	r22, r26
    5c9e:	cf 01       	movw	r24, r30
    5ca0:	08 95       	ret

00005ca2 <__divmodsi4>:
    5ca2:	05 2e       	mov	r0, r21
    5ca4:	97 fb       	bst	r25, 7
    5ca6:	1e f4       	brtc	.+6      	; 0x5cae <__divmodsi4+0xc>
    5ca8:	00 94       	com	r0
    5caa:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__negsi2>
    5cae:	57 fd       	sbrc	r21, 7
    5cb0:	07 d0       	rcall	.+14     	; 0x5cc0 <__divmodsi4_neg2>
    5cb2:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <__udivmodsi4>
    5cb6:	07 fc       	sbrc	r0, 7
    5cb8:	03 d0       	rcall	.+6      	; 0x5cc0 <__divmodsi4_neg2>
    5cba:	4e f4       	brtc	.+18     	; 0x5cce <__divmodsi4_exit>
    5cbc:	0c 94 68 2e 	jmp	0x5cd0	; 0x5cd0 <__negsi2>

00005cc0 <__divmodsi4_neg2>:
    5cc0:	50 95       	com	r21
    5cc2:	40 95       	com	r20
    5cc4:	30 95       	com	r19
    5cc6:	21 95       	neg	r18
    5cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5cca:	4f 4f       	sbci	r20, 0xFF	; 255
    5ccc:	5f 4f       	sbci	r21, 0xFF	; 255

00005cce <__divmodsi4_exit>:
    5cce:	08 95       	ret

00005cd0 <__negsi2>:
    5cd0:	90 95       	com	r25
    5cd2:	80 95       	com	r24
    5cd4:	70 95       	com	r23
    5cd6:	61 95       	neg	r22
    5cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cda:	8f 4f       	sbci	r24, 0xFF	; 255
    5cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cde:	08 95       	ret

00005ce0 <__tablejump2__>:
    5ce0:	ee 0f       	add	r30, r30
    5ce2:	ff 1f       	adc	r31, r31
    5ce4:	05 90       	lpm	r0, Z+
    5ce6:	f4 91       	lpm	r31, Z
    5ce8:	e0 2d       	mov	r30, r0
    5cea:	09 94       	ijmp

00005cec <__umulhisi3>:
    5cec:	a2 9f       	mul	r26, r18
    5cee:	b0 01       	movw	r22, r0
    5cf0:	b3 9f       	mul	r27, r19
    5cf2:	c0 01       	movw	r24, r0
    5cf4:	a3 9f       	mul	r26, r19
    5cf6:	70 0d       	add	r23, r0
    5cf8:	81 1d       	adc	r24, r1
    5cfa:	11 24       	eor	r1, r1
    5cfc:	91 1d       	adc	r25, r1
    5cfe:	b2 9f       	mul	r27, r18
    5d00:	70 0d       	add	r23, r0
    5d02:	81 1d       	adc	r24, r1
    5d04:	11 24       	eor	r1, r1
    5d06:	91 1d       	adc	r25, r1
    5d08:	08 95       	ret

00005d0a <__usmulhisi3>:
    5d0a:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>

00005d0e <__usmulhisi3_tail>:
    5d0e:	b7 ff       	sbrs	r27, 7
    5d10:	08 95       	ret
    5d12:	82 1b       	sub	r24, r18
    5d14:	93 0b       	sbc	r25, r19
    5d16:	08 95       	ret

00005d18 <__muluhisi3>:
    5d18:	0e 94 76 2e 	call	0x5cec	; 0x5cec <__umulhisi3>
    5d1c:	a5 9f       	mul	r26, r21
    5d1e:	90 0d       	add	r25, r0
    5d20:	b4 9f       	mul	r27, r20
    5d22:	90 0d       	add	r25, r0
    5d24:	a4 9f       	mul	r26, r20
    5d26:	80 0d       	add	r24, r0
    5d28:	91 1d       	adc	r25, r1
    5d2a:	11 24       	eor	r1, r1
    5d2c:	08 95       	ret

00005d2e <__mulshisi3>:
    5d2e:	b7 ff       	sbrs	r27, 7
    5d30:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__muluhisi3>

00005d34 <__mulohisi3>:
    5d34:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <__muluhisi3>
    5d38:	82 1b       	sub	r24, r18
    5d3a:	93 0b       	sbc	r25, r19
    5d3c:	08 95       	ret

00005d3e <malloc>:
    5d3e:	0f 93       	push	r16
    5d40:	1f 93       	push	r17
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	82 30       	cpi	r24, 0x02	; 2
    5d48:	91 05       	cpc	r25, r1
    5d4a:	10 f4       	brcc	.+4      	; 0x5d50 <malloc+0x12>
    5d4c:	82 e0       	ldi	r24, 0x02	; 2
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	e0 91 ab 05 	lds	r30, 0x05AB	; 0x8005ab <__flp>
    5d54:	f0 91 ac 05 	lds	r31, 0x05AC	; 0x8005ac <__flp+0x1>
    5d58:	20 e0       	ldi	r18, 0x00	; 0
    5d5a:	30 e0       	ldi	r19, 0x00	; 0
    5d5c:	a0 e0       	ldi	r26, 0x00	; 0
    5d5e:	b0 e0       	ldi	r27, 0x00	; 0
    5d60:	30 97       	sbiw	r30, 0x00	; 0
    5d62:	19 f1       	breq	.+70     	; 0x5daa <malloc+0x6c>
    5d64:	40 81       	ld	r20, Z
    5d66:	51 81       	ldd	r21, Z+1	; 0x01
    5d68:	02 81       	ldd	r16, Z+2	; 0x02
    5d6a:	13 81       	ldd	r17, Z+3	; 0x03
    5d6c:	48 17       	cp	r20, r24
    5d6e:	59 07       	cpc	r21, r25
    5d70:	c8 f0       	brcs	.+50     	; 0x5da4 <malloc+0x66>
    5d72:	84 17       	cp	r24, r20
    5d74:	95 07       	cpc	r25, r21
    5d76:	69 f4       	brne	.+26     	; 0x5d92 <malloc+0x54>
    5d78:	10 97       	sbiw	r26, 0x00	; 0
    5d7a:	31 f0       	breq	.+12     	; 0x5d88 <malloc+0x4a>
    5d7c:	12 96       	adiw	r26, 0x02	; 2
    5d7e:	0c 93       	st	X, r16
    5d80:	12 97       	sbiw	r26, 0x02	; 2
    5d82:	13 96       	adiw	r26, 0x03	; 3
    5d84:	1c 93       	st	X, r17
    5d86:	27 c0       	rjmp	.+78     	; 0x5dd6 <malloc+0x98>
    5d88:	00 93 ab 05 	sts	0x05AB, r16	; 0x8005ab <__flp>
    5d8c:	10 93 ac 05 	sts	0x05AC, r17	; 0x8005ac <__flp+0x1>
    5d90:	22 c0       	rjmp	.+68     	; 0x5dd6 <malloc+0x98>
    5d92:	21 15       	cp	r18, r1
    5d94:	31 05       	cpc	r19, r1
    5d96:	19 f0       	breq	.+6      	; 0x5d9e <malloc+0x60>
    5d98:	42 17       	cp	r20, r18
    5d9a:	53 07       	cpc	r21, r19
    5d9c:	18 f4       	brcc	.+6      	; 0x5da4 <malloc+0x66>
    5d9e:	9a 01       	movw	r18, r20
    5da0:	bd 01       	movw	r22, r26
    5da2:	ef 01       	movw	r28, r30
    5da4:	df 01       	movw	r26, r30
    5da6:	f8 01       	movw	r30, r16
    5da8:	db cf       	rjmp	.-74     	; 0x5d60 <malloc+0x22>
    5daa:	21 15       	cp	r18, r1
    5dac:	31 05       	cpc	r19, r1
    5dae:	f9 f0       	breq	.+62     	; 0x5dee <malloc+0xb0>
    5db0:	28 1b       	sub	r18, r24
    5db2:	39 0b       	sbc	r19, r25
    5db4:	24 30       	cpi	r18, 0x04	; 4
    5db6:	31 05       	cpc	r19, r1
    5db8:	80 f4       	brcc	.+32     	; 0x5dda <malloc+0x9c>
    5dba:	8a 81       	ldd	r24, Y+2	; 0x02
    5dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    5dbe:	61 15       	cp	r22, r1
    5dc0:	71 05       	cpc	r23, r1
    5dc2:	21 f0       	breq	.+8      	; 0x5dcc <malloc+0x8e>
    5dc4:	fb 01       	movw	r30, r22
    5dc6:	93 83       	std	Z+3, r25	; 0x03
    5dc8:	82 83       	std	Z+2, r24	; 0x02
    5dca:	04 c0       	rjmp	.+8      	; 0x5dd4 <malloc+0x96>
    5dcc:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <__flp+0x1>
    5dd0:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <__flp>
    5dd4:	fe 01       	movw	r30, r28
    5dd6:	32 96       	adiw	r30, 0x02	; 2
    5dd8:	44 c0       	rjmp	.+136    	; 0x5e62 <malloc+0x124>
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e2 0f       	add	r30, r18
    5dde:	f3 1f       	adc	r31, r19
    5de0:	81 93       	st	Z+, r24
    5de2:	91 93       	st	Z+, r25
    5de4:	22 50       	subi	r18, 0x02	; 2
    5de6:	31 09       	sbc	r19, r1
    5de8:	39 83       	std	Y+1, r19	; 0x01
    5dea:	28 83       	st	Y, r18
    5dec:	3a c0       	rjmp	.+116    	; 0x5e62 <malloc+0x124>
    5dee:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <__brkval>
    5df2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <__brkval+0x1>
    5df6:	23 2b       	or	r18, r19
    5df8:	41 f4       	brne	.+16     	; 0x5e0a <malloc+0xcc>
    5dfa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5dfe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5e02:	30 93 aa 05 	sts	0x05AA, r19	; 0x8005aa <__brkval+0x1>
    5e06:	20 93 a9 05 	sts	0x05A9, r18	; 0x8005a9 <__brkval>
    5e0a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5e0e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5e12:	21 15       	cp	r18, r1
    5e14:	31 05       	cpc	r19, r1
    5e16:	41 f4       	brne	.+16     	; 0x5e28 <malloc+0xea>
    5e18:	2d b7       	in	r18, 0x3d	; 61
    5e1a:	3e b7       	in	r19, 0x3e	; 62
    5e1c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5e20:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5e24:	24 1b       	sub	r18, r20
    5e26:	35 0b       	sbc	r19, r21
    5e28:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <__brkval>
    5e2c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <__brkval+0x1>
    5e30:	e2 17       	cp	r30, r18
    5e32:	f3 07       	cpc	r31, r19
    5e34:	a0 f4       	brcc	.+40     	; 0x5e5e <malloc+0x120>
    5e36:	2e 1b       	sub	r18, r30
    5e38:	3f 0b       	sbc	r19, r31
    5e3a:	28 17       	cp	r18, r24
    5e3c:	39 07       	cpc	r19, r25
    5e3e:	78 f0       	brcs	.+30     	; 0x5e5e <malloc+0x120>
    5e40:	ac 01       	movw	r20, r24
    5e42:	4e 5f       	subi	r20, 0xFE	; 254
    5e44:	5f 4f       	sbci	r21, 0xFF	; 255
    5e46:	24 17       	cp	r18, r20
    5e48:	35 07       	cpc	r19, r21
    5e4a:	48 f0       	brcs	.+18     	; 0x5e5e <malloc+0x120>
    5e4c:	4e 0f       	add	r20, r30
    5e4e:	5f 1f       	adc	r21, r31
    5e50:	50 93 aa 05 	sts	0x05AA, r21	; 0x8005aa <__brkval+0x1>
    5e54:	40 93 a9 05 	sts	0x05A9, r20	; 0x8005a9 <__brkval>
    5e58:	81 93       	st	Z+, r24
    5e5a:	91 93       	st	Z+, r25
    5e5c:	02 c0       	rjmp	.+4      	; 0x5e62 <malloc+0x124>
    5e5e:	e0 e0       	ldi	r30, 0x00	; 0
    5e60:	f0 e0       	ldi	r31, 0x00	; 0
    5e62:	cf 01       	movw	r24, r30
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	1f 91       	pop	r17
    5e6a:	0f 91       	pop	r16
    5e6c:	08 95       	ret

00005e6e <free>:
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	00 97       	sbiw	r24, 0x00	; 0
    5e74:	09 f4       	brne	.+2      	; 0x5e78 <free+0xa>
    5e76:	81 c0       	rjmp	.+258    	; 0x5f7a <free+0x10c>
    5e78:	fc 01       	movw	r30, r24
    5e7a:	32 97       	sbiw	r30, 0x02	; 2
    5e7c:	13 82       	std	Z+3, r1	; 0x03
    5e7e:	12 82       	std	Z+2, r1	; 0x02
    5e80:	a0 91 ab 05 	lds	r26, 0x05AB	; 0x8005ab <__flp>
    5e84:	b0 91 ac 05 	lds	r27, 0x05AC	; 0x8005ac <__flp+0x1>
    5e88:	10 97       	sbiw	r26, 0x00	; 0
    5e8a:	81 f4       	brne	.+32     	; 0x5eac <free+0x3e>
    5e8c:	20 81       	ld	r18, Z
    5e8e:	31 81       	ldd	r19, Z+1	; 0x01
    5e90:	82 0f       	add	r24, r18
    5e92:	93 1f       	adc	r25, r19
    5e94:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <__brkval>
    5e98:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <__brkval+0x1>
    5e9c:	28 17       	cp	r18, r24
    5e9e:	39 07       	cpc	r19, r25
    5ea0:	51 f5       	brne	.+84     	; 0x5ef6 <free+0x88>
    5ea2:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <__brkval+0x1>
    5ea6:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <__brkval>
    5eaa:	67 c0       	rjmp	.+206    	; 0x5f7a <free+0x10c>
    5eac:	ed 01       	movw	r28, r26
    5eae:	20 e0       	ldi	r18, 0x00	; 0
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	ce 17       	cp	r28, r30
    5eb4:	df 07       	cpc	r29, r31
    5eb6:	40 f4       	brcc	.+16     	; 0x5ec8 <free+0x5a>
    5eb8:	4a 81       	ldd	r20, Y+2	; 0x02
    5eba:	5b 81       	ldd	r21, Y+3	; 0x03
    5ebc:	9e 01       	movw	r18, r28
    5ebe:	41 15       	cp	r20, r1
    5ec0:	51 05       	cpc	r21, r1
    5ec2:	f1 f0       	breq	.+60     	; 0x5f00 <free+0x92>
    5ec4:	ea 01       	movw	r28, r20
    5ec6:	f5 cf       	rjmp	.-22     	; 0x5eb2 <free+0x44>
    5ec8:	d3 83       	std	Z+3, r29	; 0x03
    5eca:	c2 83       	std	Z+2, r28	; 0x02
    5ecc:	40 81       	ld	r20, Z
    5ece:	51 81       	ldd	r21, Z+1	; 0x01
    5ed0:	84 0f       	add	r24, r20
    5ed2:	95 1f       	adc	r25, r21
    5ed4:	c8 17       	cp	r28, r24
    5ed6:	d9 07       	cpc	r29, r25
    5ed8:	59 f4       	brne	.+22     	; 0x5ef0 <free+0x82>
    5eda:	88 81       	ld	r24, Y
    5edc:	99 81       	ldd	r25, Y+1	; 0x01
    5ede:	84 0f       	add	r24, r20
    5ee0:	95 1f       	adc	r25, r21
    5ee2:	02 96       	adiw	r24, 0x02	; 2
    5ee4:	91 83       	std	Z+1, r25	; 0x01
    5ee6:	80 83       	st	Z, r24
    5ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    5eea:	9b 81       	ldd	r25, Y+3	; 0x03
    5eec:	93 83       	std	Z+3, r25	; 0x03
    5eee:	82 83       	std	Z+2, r24	; 0x02
    5ef0:	21 15       	cp	r18, r1
    5ef2:	31 05       	cpc	r19, r1
    5ef4:	29 f4       	brne	.+10     	; 0x5f00 <free+0x92>
    5ef6:	f0 93 ac 05 	sts	0x05AC, r31	; 0x8005ac <__flp+0x1>
    5efa:	e0 93 ab 05 	sts	0x05AB, r30	; 0x8005ab <__flp>
    5efe:	3d c0       	rjmp	.+122    	; 0x5f7a <free+0x10c>
    5f00:	e9 01       	movw	r28, r18
    5f02:	fb 83       	std	Y+3, r31	; 0x03
    5f04:	ea 83       	std	Y+2, r30	; 0x02
    5f06:	49 91       	ld	r20, Y+
    5f08:	59 91       	ld	r21, Y+
    5f0a:	c4 0f       	add	r28, r20
    5f0c:	d5 1f       	adc	r29, r21
    5f0e:	ec 17       	cp	r30, r28
    5f10:	fd 07       	cpc	r31, r29
    5f12:	61 f4       	brne	.+24     	; 0x5f2c <free+0xbe>
    5f14:	80 81       	ld	r24, Z
    5f16:	91 81       	ldd	r25, Z+1	; 0x01
    5f18:	84 0f       	add	r24, r20
    5f1a:	95 1f       	adc	r25, r21
    5f1c:	02 96       	adiw	r24, 0x02	; 2
    5f1e:	e9 01       	movw	r28, r18
    5f20:	99 83       	std	Y+1, r25	; 0x01
    5f22:	88 83       	st	Y, r24
    5f24:	82 81       	ldd	r24, Z+2	; 0x02
    5f26:	93 81       	ldd	r25, Z+3	; 0x03
    5f28:	9b 83       	std	Y+3, r25	; 0x03
    5f2a:	8a 83       	std	Y+2, r24	; 0x02
    5f2c:	e0 e0       	ldi	r30, 0x00	; 0
    5f2e:	f0 e0       	ldi	r31, 0x00	; 0
    5f30:	12 96       	adiw	r26, 0x02	; 2
    5f32:	8d 91       	ld	r24, X+
    5f34:	9c 91       	ld	r25, X
    5f36:	13 97       	sbiw	r26, 0x03	; 3
    5f38:	00 97       	sbiw	r24, 0x00	; 0
    5f3a:	19 f0       	breq	.+6      	; 0x5f42 <free+0xd4>
    5f3c:	fd 01       	movw	r30, r26
    5f3e:	dc 01       	movw	r26, r24
    5f40:	f7 cf       	rjmp	.-18     	; 0x5f30 <free+0xc2>
    5f42:	8d 91       	ld	r24, X+
    5f44:	9c 91       	ld	r25, X
    5f46:	11 97       	sbiw	r26, 0x01	; 1
    5f48:	9d 01       	movw	r18, r26
    5f4a:	2e 5f       	subi	r18, 0xFE	; 254
    5f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f4e:	82 0f       	add	r24, r18
    5f50:	93 1f       	adc	r25, r19
    5f52:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <__brkval>
    5f56:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <__brkval+0x1>
    5f5a:	28 17       	cp	r18, r24
    5f5c:	39 07       	cpc	r19, r25
    5f5e:	69 f4       	brne	.+26     	; 0x5f7a <free+0x10c>
    5f60:	30 97       	sbiw	r30, 0x00	; 0
    5f62:	29 f4       	brne	.+10     	; 0x5f6e <free+0x100>
    5f64:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <__flp+0x1>
    5f68:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <__flp>
    5f6c:	02 c0       	rjmp	.+4      	; 0x5f72 <free+0x104>
    5f6e:	13 82       	std	Z+3, r1	; 0x03
    5f70:	12 82       	std	Z+2, r1	; 0x02
    5f72:	b0 93 aa 05 	sts	0x05AA, r27	; 0x8005aa <__brkval+0x1>
    5f76:	a0 93 a9 05 	sts	0x05A9, r26	; 0x8005a9 <__brkval>
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	08 95       	ret

00005f80 <atoi>:
    5f80:	fc 01       	movw	r30, r24
    5f82:	88 27       	eor	r24, r24
    5f84:	99 27       	eor	r25, r25
    5f86:	e8 94       	clt
    5f88:	21 91       	ld	r18, Z+
    5f8a:	20 32       	cpi	r18, 0x20	; 32
    5f8c:	e9 f3       	breq	.-6      	; 0x5f88 <atoi+0x8>
    5f8e:	29 30       	cpi	r18, 0x09	; 9
    5f90:	10 f0       	brcs	.+4      	; 0x5f96 <atoi+0x16>
    5f92:	2e 30       	cpi	r18, 0x0E	; 14
    5f94:	c8 f3       	brcs	.-14     	; 0x5f88 <atoi+0x8>
    5f96:	2b 32       	cpi	r18, 0x2B	; 43
    5f98:	41 f0       	breq	.+16     	; 0x5faa <atoi+0x2a>
    5f9a:	2d 32       	cpi	r18, 0x2D	; 45
    5f9c:	39 f4       	brne	.+14     	; 0x5fac <atoi+0x2c>
    5f9e:	68 94       	set
    5fa0:	04 c0       	rjmp	.+8      	; 0x5faa <atoi+0x2a>
    5fa2:	0e 94 43 30 	call	0x6086	; 0x6086 <__mulhi_const_10>
    5fa6:	82 0f       	add	r24, r18
    5fa8:	91 1d       	adc	r25, r1
    5faa:	21 91       	ld	r18, Z+
    5fac:	20 53       	subi	r18, 0x30	; 48
    5fae:	2a 30       	cpi	r18, 0x0A	; 10
    5fb0:	c0 f3       	brcs	.-16     	; 0x5fa2 <atoi+0x22>
    5fb2:	1e f4       	brtc	.+6      	; 0x5fba <atoi+0x3a>
    5fb4:	90 95       	com	r25
    5fb6:	81 95       	neg	r24
    5fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5fba:	08 95       	ret

00005fbc <atol>:
    5fbc:	1f 93       	push	r17
    5fbe:	fc 01       	movw	r30, r24
    5fc0:	99 27       	eor	r25, r25
    5fc2:	88 27       	eor	r24, r24
    5fc4:	bc 01       	movw	r22, r24
    5fc6:	e8 94       	clt
    5fc8:	11 91       	ld	r17, Z+
    5fca:	10 32       	cpi	r17, 0x20	; 32
    5fcc:	e9 f3       	breq	.-6      	; 0x5fc8 <atol+0xc>
    5fce:	19 30       	cpi	r17, 0x09	; 9
    5fd0:	10 f0       	brcs	.+4      	; 0x5fd6 <atol+0x1a>
    5fd2:	1e 30       	cpi	r17, 0x0E	; 14
    5fd4:	c8 f3       	brcs	.-14     	; 0x5fc8 <atol+0xc>
    5fd6:	1b 32       	cpi	r17, 0x2B	; 43
    5fd8:	51 f0       	breq	.+20     	; 0x5fee <atol+0x32>
    5fda:	1d 32       	cpi	r17, 0x2D	; 45
    5fdc:	49 f4       	brne	.+18     	; 0x5ff0 <atol+0x34>
    5fde:	68 94       	set
    5fe0:	06 c0       	rjmp	.+12     	; 0x5fee <atol+0x32>
    5fe2:	0e 94 2e 30 	call	0x605c	; 0x605c <__mulsi_const_10>
    5fe6:	61 0f       	add	r22, r17
    5fe8:	71 1d       	adc	r23, r1
    5fea:	81 1d       	adc	r24, r1
    5fec:	91 1d       	adc	r25, r1
    5fee:	11 91       	ld	r17, Z+
    5ff0:	10 53       	subi	r17, 0x30	; 48
    5ff2:	1a 30       	cpi	r17, 0x0A	; 10
    5ff4:	b0 f3       	brcs	.-20     	; 0x5fe2 <atol+0x26>
    5ff6:	3e f4       	brtc	.+14     	; 0x6006 <atol+0x4a>
    5ff8:	90 95       	com	r25
    5ffa:	80 95       	com	r24
    5ffc:	70 95       	com	r23
    5ffe:	61 95       	neg	r22
    6000:	7f 4f       	sbci	r23, 0xFF	; 255
    6002:	8f 4f       	sbci	r24, 0xFF	; 255
    6004:	9f 4f       	sbci	r25, 0xFF	; 255
    6006:	1f 91       	pop	r17
    6008:	08 95       	ret

0000600a <toupper>:
    600a:	91 11       	cpse	r25, r1
    600c:	08 95       	ret
    600e:	81 56       	subi	r24, 0x61	; 97
    6010:	8a 51       	subi	r24, 0x1A	; 26
    6012:	08 f4       	brcc	.+2      	; 0x6016 <toupper+0xc>
    6014:	80 52       	subi	r24, 0x20	; 32
    6016:	85 58       	subi	r24, 0x85	; 133
    6018:	08 95       	ret

0000601a <strcat>:
    601a:	fb 01       	movw	r30, r22
    601c:	dc 01       	movw	r26, r24
    601e:	0d 90       	ld	r0, X+
    6020:	00 20       	and	r0, r0
    6022:	e9 f7       	brne	.-6      	; 0x601e <strcat+0x4>
    6024:	11 97       	sbiw	r26, 0x01	; 1
    6026:	01 90       	ld	r0, Z+
    6028:	0d 92       	st	X+, r0
    602a:	00 20       	and	r0, r0
    602c:	e1 f7       	brne	.-8      	; 0x6026 <strcat+0xc>
    602e:	08 95       	ret

00006030 <strcpy>:
    6030:	fb 01       	movw	r30, r22
    6032:	dc 01       	movw	r26, r24
    6034:	01 90       	ld	r0, Z+
    6036:	0d 92       	st	X+, r0
    6038:	00 20       	and	r0, r0
    603a:	e1 f7       	brne	.-8      	; 0x6034 <strcpy+0x4>
    603c:	08 95       	ret

0000603e <strncpy>:
    603e:	fb 01       	movw	r30, r22
    6040:	dc 01       	movw	r26, r24
    6042:	41 50       	subi	r20, 0x01	; 1
    6044:	50 40       	sbci	r21, 0x00	; 0
    6046:	48 f0       	brcs	.+18     	; 0x605a <strncpy+0x1c>
    6048:	01 90       	ld	r0, Z+
    604a:	0d 92       	st	X+, r0
    604c:	00 20       	and	r0, r0
    604e:	c9 f7       	brne	.-14     	; 0x6042 <strncpy+0x4>
    6050:	01 c0       	rjmp	.+2      	; 0x6054 <strncpy+0x16>
    6052:	1d 92       	st	X+, r1
    6054:	41 50       	subi	r20, 0x01	; 1
    6056:	50 40       	sbci	r21, 0x00	; 0
    6058:	e0 f7       	brcc	.-8      	; 0x6052 <strncpy+0x14>
    605a:	08 95       	ret

0000605c <__mulsi_const_10>:
    605c:	59 2f       	mov	r21, r25
    605e:	48 2f       	mov	r20, r24
    6060:	37 2f       	mov	r19, r23
    6062:	26 2f       	mov	r18, r22
    6064:	66 0f       	add	r22, r22
    6066:	77 1f       	adc	r23, r23
    6068:	88 1f       	adc	r24, r24
    606a:	99 1f       	adc	r25, r25
    606c:	66 0f       	add	r22, r22
    606e:	77 1f       	adc	r23, r23
    6070:	88 1f       	adc	r24, r24
    6072:	99 1f       	adc	r25, r25
    6074:	62 0f       	add	r22, r18
    6076:	73 1f       	adc	r23, r19
    6078:	84 1f       	adc	r24, r20
    607a:	95 1f       	adc	r25, r21
    607c:	66 0f       	add	r22, r22
    607e:	77 1f       	adc	r23, r23
    6080:	88 1f       	adc	r24, r24
    6082:	99 1f       	adc	r25, r25
    6084:	08 95       	ret

00006086 <__mulhi_const_10>:
    6086:	7a e0       	ldi	r23, 0x0A	; 10
    6088:	97 9f       	mul	r25, r23
    608a:	90 2d       	mov	r25, r0
    608c:	87 9f       	mul	r24, r23
    608e:	80 2d       	mov	r24, r0
    6090:	91 0d       	add	r25, r1
    6092:	11 24       	eor	r1, r1
    6094:	08 95       	ret

00006096 <sprintf>:
    6096:	ae e0       	ldi	r26, 0x0E	; 14
    6098:	b0 e0       	ldi	r27, 0x00	; 0
    609a:	e1 e5       	ldi	r30, 0x51	; 81
    609c:	f0 e3       	ldi	r31, 0x30	; 48
    609e:	0c 94 6f 33 	jmp	0x66de	; 0x66de <__prologue_saves__+0x1c>
    60a2:	0d 89       	ldd	r16, Y+21	; 0x15
    60a4:	1e 89       	ldd	r17, Y+22	; 0x16
    60a6:	86 e0       	ldi	r24, 0x06	; 6
    60a8:	8c 83       	std	Y+4, r24	; 0x04
    60aa:	1a 83       	std	Y+2, r17	; 0x02
    60ac:	09 83       	std	Y+1, r16	; 0x01
    60ae:	8f ef       	ldi	r24, 0xFF	; 255
    60b0:	9f e7       	ldi	r25, 0x7F	; 127
    60b2:	9e 83       	std	Y+6, r25	; 0x06
    60b4:	8d 83       	std	Y+5, r24	; 0x05
    60b6:	ae 01       	movw	r20, r28
    60b8:	47 5e       	subi	r20, 0xE7	; 231
    60ba:	5f 4f       	sbci	r21, 0xFF	; 255
    60bc:	6f 89       	ldd	r22, Y+23	; 0x17
    60be:	78 8d       	ldd	r23, Y+24	; 0x18
    60c0:	ce 01       	movw	r24, r28
    60c2:	01 96       	adiw	r24, 0x01	; 1
    60c4:	0e 94 6d 30 	call	0x60da	; 0x60da <vfprintf>
    60c8:	ef 81       	ldd	r30, Y+7	; 0x07
    60ca:	f8 85       	ldd	r31, Y+8	; 0x08
    60cc:	e0 0f       	add	r30, r16
    60ce:	f1 1f       	adc	r31, r17
    60d0:	10 82       	st	Z, r1
    60d2:	2e 96       	adiw	r28, 0x0e	; 14
    60d4:	e4 e0       	ldi	r30, 0x04	; 4
    60d6:	0c 94 8b 33 	jmp	0x6716	; 0x6716 <__epilogue_restores__+0x1c>

000060da <vfprintf>:
    60da:	ab e0       	ldi	r26, 0x0B	; 11
    60dc:	b0 e0       	ldi	r27, 0x00	; 0
    60de:	e3 e7       	ldi	r30, 0x73	; 115
    60e0:	f0 e3       	ldi	r31, 0x30	; 48
    60e2:	0c 94 61 33 	jmp	0x66c2	; 0x66c2 <__prologue_saves__>
    60e6:	6c 01       	movw	r12, r24
    60e8:	7b 01       	movw	r14, r22
    60ea:	8a 01       	movw	r16, r20
    60ec:	fc 01       	movw	r30, r24
    60ee:	17 82       	std	Z+7, r1	; 0x07
    60f0:	16 82       	std	Z+6, r1	; 0x06
    60f2:	83 81       	ldd	r24, Z+3	; 0x03
    60f4:	81 ff       	sbrs	r24, 1
    60f6:	cc c1       	rjmp	.+920    	; 0x6490 <vfprintf+0x3b6>
    60f8:	ce 01       	movw	r24, r28
    60fa:	01 96       	adiw	r24, 0x01	; 1
    60fc:	3c 01       	movw	r6, r24
    60fe:	f6 01       	movw	r30, r12
    6100:	93 81       	ldd	r25, Z+3	; 0x03
    6102:	f7 01       	movw	r30, r14
    6104:	93 fd       	sbrc	r25, 3
    6106:	85 91       	lpm	r24, Z+
    6108:	93 ff       	sbrs	r25, 3
    610a:	81 91       	ld	r24, Z+
    610c:	7f 01       	movw	r14, r30
    610e:	88 23       	and	r24, r24
    6110:	09 f4       	brne	.+2      	; 0x6114 <vfprintf+0x3a>
    6112:	ba c1       	rjmp	.+884    	; 0x6488 <vfprintf+0x3ae>
    6114:	85 32       	cpi	r24, 0x25	; 37
    6116:	39 f4       	brne	.+14     	; 0x6126 <vfprintf+0x4c>
    6118:	93 fd       	sbrc	r25, 3
    611a:	85 91       	lpm	r24, Z+
    611c:	93 ff       	sbrs	r25, 3
    611e:	81 91       	ld	r24, Z+
    6120:	7f 01       	movw	r14, r30
    6122:	85 32       	cpi	r24, 0x25	; 37
    6124:	29 f4       	brne	.+10     	; 0x6130 <vfprintf+0x56>
    6126:	b6 01       	movw	r22, r12
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    612e:	e7 cf       	rjmp	.-50     	; 0x60fe <vfprintf+0x24>
    6130:	91 2c       	mov	r9, r1
    6132:	21 2c       	mov	r2, r1
    6134:	31 2c       	mov	r3, r1
    6136:	ff e1       	ldi	r31, 0x1F	; 31
    6138:	f3 15       	cp	r31, r3
    613a:	d8 f0       	brcs	.+54     	; 0x6172 <vfprintf+0x98>
    613c:	8b 32       	cpi	r24, 0x2B	; 43
    613e:	79 f0       	breq	.+30     	; 0x615e <vfprintf+0x84>
    6140:	38 f4       	brcc	.+14     	; 0x6150 <vfprintf+0x76>
    6142:	80 32       	cpi	r24, 0x20	; 32
    6144:	79 f0       	breq	.+30     	; 0x6164 <vfprintf+0x8a>
    6146:	83 32       	cpi	r24, 0x23	; 35
    6148:	a1 f4       	brne	.+40     	; 0x6172 <vfprintf+0x98>
    614a:	23 2d       	mov	r18, r3
    614c:	20 61       	ori	r18, 0x10	; 16
    614e:	1d c0       	rjmp	.+58     	; 0x618a <vfprintf+0xb0>
    6150:	8d 32       	cpi	r24, 0x2D	; 45
    6152:	61 f0       	breq	.+24     	; 0x616c <vfprintf+0x92>
    6154:	80 33       	cpi	r24, 0x30	; 48
    6156:	69 f4       	brne	.+26     	; 0x6172 <vfprintf+0x98>
    6158:	23 2d       	mov	r18, r3
    615a:	21 60       	ori	r18, 0x01	; 1
    615c:	16 c0       	rjmp	.+44     	; 0x618a <vfprintf+0xb0>
    615e:	83 2d       	mov	r24, r3
    6160:	82 60       	ori	r24, 0x02	; 2
    6162:	38 2e       	mov	r3, r24
    6164:	e3 2d       	mov	r30, r3
    6166:	e4 60       	ori	r30, 0x04	; 4
    6168:	3e 2e       	mov	r3, r30
    616a:	2a c0       	rjmp	.+84     	; 0x61c0 <vfprintf+0xe6>
    616c:	f3 2d       	mov	r31, r3
    616e:	f8 60       	ori	r31, 0x08	; 8
    6170:	1d c0       	rjmp	.+58     	; 0x61ac <vfprintf+0xd2>
    6172:	37 fc       	sbrc	r3, 7
    6174:	2d c0       	rjmp	.+90     	; 0x61d0 <vfprintf+0xf6>
    6176:	20 ed       	ldi	r18, 0xD0	; 208
    6178:	28 0f       	add	r18, r24
    617a:	2a 30       	cpi	r18, 0x0A	; 10
    617c:	40 f0       	brcs	.+16     	; 0x618e <vfprintf+0xb4>
    617e:	8e 32       	cpi	r24, 0x2E	; 46
    6180:	b9 f4       	brne	.+46     	; 0x61b0 <vfprintf+0xd6>
    6182:	36 fc       	sbrc	r3, 6
    6184:	81 c1       	rjmp	.+770    	; 0x6488 <vfprintf+0x3ae>
    6186:	23 2d       	mov	r18, r3
    6188:	20 64       	ori	r18, 0x40	; 64
    618a:	32 2e       	mov	r3, r18
    618c:	19 c0       	rjmp	.+50     	; 0x61c0 <vfprintf+0xe6>
    618e:	36 fe       	sbrs	r3, 6
    6190:	06 c0       	rjmp	.+12     	; 0x619e <vfprintf+0xc4>
    6192:	8a e0       	ldi	r24, 0x0A	; 10
    6194:	98 9e       	mul	r9, r24
    6196:	20 0d       	add	r18, r0
    6198:	11 24       	eor	r1, r1
    619a:	92 2e       	mov	r9, r18
    619c:	11 c0       	rjmp	.+34     	; 0x61c0 <vfprintf+0xe6>
    619e:	ea e0       	ldi	r30, 0x0A	; 10
    61a0:	2e 9e       	mul	r2, r30
    61a2:	20 0d       	add	r18, r0
    61a4:	11 24       	eor	r1, r1
    61a6:	22 2e       	mov	r2, r18
    61a8:	f3 2d       	mov	r31, r3
    61aa:	f0 62       	ori	r31, 0x20	; 32
    61ac:	3f 2e       	mov	r3, r31
    61ae:	08 c0       	rjmp	.+16     	; 0x61c0 <vfprintf+0xe6>
    61b0:	8c 36       	cpi	r24, 0x6C	; 108
    61b2:	21 f4       	brne	.+8      	; 0x61bc <vfprintf+0xe2>
    61b4:	83 2d       	mov	r24, r3
    61b6:	80 68       	ori	r24, 0x80	; 128
    61b8:	38 2e       	mov	r3, r24
    61ba:	02 c0       	rjmp	.+4      	; 0x61c0 <vfprintf+0xe6>
    61bc:	88 36       	cpi	r24, 0x68	; 104
    61be:	41 f4       	brne	.+16     	; 0x61d0 <vfprintf+0xf6>
    61c0:	f7 01       	movw	r30, r14
    61c2:	93 fd       	sbrc	r25, 3
    61c4:	85 91       	lpm	r24, Z+
    61c6:	93 ff       	sbrs	r25, 3
    61c8:	81 91       	ld	r24, Z+
    61ca:	7f 01       	movw	r14, r30
    61cc:	81 11       	cpse	r24, r1
    61ce:	b3 cf       	rjmp	.-154    	; 0x6136 <vfprintf+0x5c>
    61d0:	98 2f       	mov	r25, r24
    61d2:	9f 7d       	andi	r25, 0xDF	; 223
    61d4:	95 54       	subi	r25, 0x45	; 69
    61d6:	93 30       	cpi	r25, 0x03	; 3
    61d8:	28 f4       	brcc	.+10     	; 0x61e4 <vfprintf+0x10a>
    61da:	0c 5f       	subi	r16, 0xFC	; 252
    61dc:	1f 4f       	sbci	r17, 0xFF	; 255
    61de:	9f e3       	ldi	r25, 0x3F	; 63
    61e0:	99 83       	std	Y+1, r25	; 0x01
    61e2:	0d c0       	rjmp	.+26     	; 0x61fe <vfprintf+0x124>
    61e4:	83 36       	cpi	r24, 0x63	; 99
    61e6:	31 f0       	breq	.+12     	; 0x61f4 <vfprintf+0x11a>
    61e8:	83 37       	cpi	r24, 0x73	; 115
    61ea:	71 f0       	breq	.+28     	; 0x6208 <vfprintf+0x12e>
    61ec:	83 35       	cpi	r24, 0x53	; 83
    61ee:	09 f0       	breq	.+2      	; 0x61f2 <vfprintf+0x118>
    61f0:	59 c0       	rjmp	.+178    	; 0x62a4 <vfprintf+0x1ca>
    61f2:	21 c0       	rjmp	.+66     	; 0x6236 <vfprintf+0x15c>
    61f4:	f8 01       	movw	r30, r16
    61f6:	80 81       	ld	r24, Z
    61f8:	89 83       	std	Y+1, r24	; 0x01
    61fa:	0e 5f       	subi	r16, 0xFE	; 254
    61fc:	1f 4f       	sbci	r17, 0xFF	; 255
    61fe:	88 24       	eor	r8, r8
    6200:	83 94       	inc	r8
    6202:	91 2c       	mov	r9, r1
    6204:	53 01       	movw	r10, r6
    6206:	13 c0       	rjmp	.+38     	; 0x622e <vfprintf+0x154>
    6208:	28 01       	movw	r4, r16
    620a:	f2 e0       	ldi	r31, 0x02	; 2
    620c:	4f 0e       	add	r4, r31
    620e:	51 1c       	adc	r5, r1
    6210:	f8 01       	movw	r30, r16
    6212:	a0 80       	ld	r10, Z
    6214:	b1 80       	ldd	r11, Z+1	; 0x01
    6216:	36 fe       	sbrs	r3, 6
    6218:	03 c0       	rjmp	.+6      	; 0x6220 <vfprintf+0x146>
    621a:	69 2d       	mov	r22, r9
    621c:	70 e0       	ldi	r23, 0x00	; 0
    621e:	02 c0       	rjmp	.+4      	; 0x6224 <vfprintf+0x14a>
    6220:	6f ef       	ldi	r22, 0xFF	; 255
    6222:	7f ef       	ldi	r23, 0xFF	; 255
    6224:	c5 01       	movw	r24, r10
    6226:	0e 94 59 32 	call	0x64b2	; 0x64b2 <strnlen>
    622a:	4c 01       	movw	r8, r24
    622c:	82 01       	movw	r16, r4
    622e:	f3 2d       	mov	r31, r3
    6230:	ff 77       	andi	r31, 0x7F	; 127
    6232:	3f 2e       	mov	r3, r31
    6234:	16 c0       	rjmp	.+44     	; 0x6262 <vfprintf+0x188>
    6236:	28 01       	movw	r4, r16
    6238:	22 e0       	ldi	r18, 0x02	; 2
    623a:	42 0e       	add	r4, r18
    623c:	51 1c       	adc	r5, r1
    623e:	f8 01       	movw	r30, r16
    6240:	a0 80       	ld	r10, Z
    6242:	b1 80       	ldd	r11, Z+1	; 0x01
    6244:	36 fe       	sbrs	r3, 6
    6246:	03 c0       	rjmp	.+6      	; 0x624e <vfprintf+0x174>
    6248:	69 2d       	mov	r22, r9
    624a:	70 e0       	ldi	r23, 0x00	; 0
    624c:	02 c0       	rjmp	.+4      	; 0x6252 <vfprintf+0x178>
    624e:	6f ef       	ldi	r22, 0xFF	; 255
    6250:	7f ef       	ldi	r23, 0xFF	; 255
    6252:	c5 01       	movw	r24, r10
    6254:	0e 94 4e 32 	call	0x649c	; 0x649c <strnlen_P>
    6258:	4c 01       	movw	r8, r24
    625a:	f3 2d       	mov	r31, r3
    625c:	f0 68       	ori	r31, 0x80	; 128
    625e:	3f 2e       	mov	r3, r31
    6260:	82 01       	movw	r16, r4
    6262:	33 fc       	sbrc	r3, 3
    6264:	1b c0       	rjmp	.+54     	; 0x629c <vfprintf+0x1c2>
    6266:	82 2d       	mov	r24, r2
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	88 16       	cp	r8, r24
    626c:	99 06       	cpc	r9, r25
    626e:	b0 f4       	brcc	.+44     	; 0x629c <vfprintf+0x1c2>
    6270:	b6 01       	movw	r22, r12
    6272:	80 e2       	ldi	r24, 0x20	; 32
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    627a:	2a 94       	dec	r2
    627c:	f4 cf       	rjmp	.-24     	; 0x6266 <vfprintf+0x18c>
    627e:	f5 01       	movw	r30, r10
    6280:	37 fc       	sbrc	r3, 7
    6282:	85 91       	lpm	r24, Z+
    6284:	37 fe       	sbrs	r3, 7
    6286:	81 91       	ld	r24, Z+
    6288:	5f 01       	movw	r10, r30
    628a:	b6 01       	movw	r22, r12
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    6292:	21 10       	cpse	r2, r1
    6294:	2a 94       	dec	r2
    6296:	21 e0       	ldi	r18, 0x01	; 1
    6298:	82 1a       	sub	r8, r18
    629a:	91 08       	sbc	r9, r1
    629c:	81 14       	cp	r8, r1
    629e:	91 04       	cpc	r9, r1
    62a0:	71 f7       	brne	.-36     	; 0x627e <vfprintf+0x1a4>
    62a2:	e8 c0       	rjmp	.+464    	; 0x6474 <vfprintf+0x39a>
    62a4:	84 36       	cpi	r24, 0x64	; 100
    62a6:	11 f0       	breq	.+4      	; 0x62ac <vfprintf+0x1d2>
    62a8:	89 36       	cpi	r24, 0x69	; 105
    62aa:	41 f5       	brne	.+80     	; 0x62fc <vfprintf+0x222>
    62ac:	f8 01       	movw	r30, r16
    62ae:	37 fe       	sbrs	r3, 7
    62b0:	07 c0       	rjmp	.+14     	; 0x62c0 <vfprintf+0x1e6>
    62b2:	60 81       	ld	r22, Z
    62b4:	71 81       	ldd	r23, Z+1	; 0x01
    62b6:	82 81       	ldd	r24, Z+2	; 0x02
    62b8:	93 81       	ldd	r25, Z+3	; 0x03
    62ba:	0c 5f       	subi	r16, 0xFC	; 252
    62bc:	1f 4f       	sbci	r17, 0xFF	; 255
    62be:	08 c0       	rjmp	.+16     	; 0x62d0 <vfprintf+0x1f6>
    62c0:	60 81       	ld	r22, Z
    62c2:	71 81       	ldd	r23, Z+1	; 0x01
    62c4:	07 2e       	mov	r0, r23
    62c6:	00 0c       	add	r0, r0
    62c8:	88 0b       	sbc	r24, r24
    62ca:	99 0b       	sbc	r25, r25
    62cc:	0e 5f       	subi	r16, 0xFE	; 254
    62ce:	1f 4f       	sbci	r17, 0xFF	; 255
    62d0:	f3 2d       	mov	r31, r3
    62d2:	ff 76       	andi	r31, 0x6F	; 111
    62d4:	3f 2e       	mov	r3, r31
    62d6:	97 ff       	sbrs	r25, 7
    62d8:	09 c0       	rjmp	.+18     	; 0x62ec <vfprintf+0x212>
    62da:	90 95       	com	r25
    62dc:	80 95       	com	r24
    62de:	70 95       	com	r23
    62e0:	61 95       	neg	r22
    62e2:	7f 4f       	sbci	r23, 0xFF	; 255
    62e4:	8f 4f       	sbci	r24, 0xFF	; 255
    62e6:	9f 4f       	sbci	r25, 0xFF	; 255
    62e8:	f0 68       	ori	r31, 0x80	; 128
    62ea:	3f 2e       	mov	r3, r31
    62ec:	2a e0       	ldi	r18, 0x0A	; 10
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	a3 01       	movw	r20, r6
    62f2:	0e 94 a0 32 	call	0x6540	; 0x6540 <__ultoa_invert>
    62f6:	88 2e       	mov	r8, r24
    62f8:	86 18       	sub	r8, r6
    62fa:	45 c0       	rjmp	.+138    	; 0x6386 <vfprintf+0x2ac>
    62fc:	85 37       	cpi	r24, 0x75	; 117
    62fe:	31 f4       	brne	.+12     	; 0x630c <vfprintf+0x232>
    6300:	23 2d       	mov	r18, r3
    6302:	2f 7e       	andi	r18, 0xEF	; 239
    6304:	b2 2e       	mov	r11, r18
    6306:	2a e0       	ldi	r18, 0x0A	; 10
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	25 c0       	rjmp	.+74     	; 0x6356 <vfprintf+0x27c>
    630c:	93 2d       	mov	r25, r3
    630e:	99 7f       	andi	r25, 0xF9	; 249
    6310:	b9 2e       	mov	r11, r25
    6312:	8f 36       	cpi	r24, 0x6F	; 111
    6314:	c1 f0       	breq	.+48     	; 0x6346 <vfprintf+0x26c>
    6316:	18 f4       	brcc	.+6      	; 0x631e <vfprintf+0x244>
    6318:	88 35       	cpi	r24, 0x58	; 88
    631a:	79 f0       	breq	.+30     	; 0x633a <vfprintf+0x260>
    631c:	b5 c0       	rjmp	.+362    	; 0x6488 <vfprintf+0x3ae>
    631e:	80 37       	cpi	r24, 0x70	; 112
    6320:	19 f0       	breq	.+6      	; 0x6328 <vfprintf+0x24e>
    6322:	88 37       	cpi	r24, 0x78	; 120
    6324:	21 f0       	breq	.+8      	; 0x632e <vfprintf+0x254>
    6326:	b0 c0       	rjmp	.+352    	; 0x6488 <vfprintf+0x3ae>
    6328:	e9 2f       	mov	r30, r25
    632a:	e0 61       	ori	r30, 0x10	; 16
    632c:	be 2e       	mov	r11, r30
    632e:	b4 fe       	sbrs	r11, 4
    6330:	0d c0       	rjmp	.+26     	; 0x634c <vfprintf+0x272>
    6332:	fb 2d       	mov	r31, r11
    6334:	f4 60       	ori	r31, 0x04	; 4
    6336:	bf 2e       	mov	r11, r31
    6338:	09 c0       	rjmp	.+18     	; 0x634c <vfprintf+0x272>
    633a:	34 fe       	sbrs	r3, 4
    633c:	0a c0       	rjmp	.+20     	; 0x6352 <vfprintf+0x278>
    633e:	29 2f       	mov	r18, r25
    6340:	26 60       	ori	r18, 0x06	; 6
    6342:	b2 2e       	mov	r11, r18
    6344:	06 c0       	rjmp	.+12     	; 0x6352 <vfprintf+0x278>
    6346:	28 e0       	ldi	r18, 0x08	; 8
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	05 c0       	rjmp	.+10     	; 0x6356 <vfprintf+0x27c>
    634c:	20 e1       	ldi	r18, 0x10	; 16
    634e:	30 e0       	ldi	r19, 0x00	; 0
    6350:	02 c0       	rjmp	.+4      	; 0x6356 <vfprintf+0x27c>
    6352:	20 e1       	ldi	r18, 0x10	; 16
    6354:	32 e0       	ldi	r19, 0x02	; 2
    6356:	f8 01       	movw	r30, r16
    6358:	b7 fe       	sbrs	r11, 7
    635a:	07 c0       	rjmp	.+14     	; 0x636a <vfprintf+0x290>
    635c:	60 81       	ld	r22, Z
    635e:	71 81       	ldd	r23, Z+1	; 0x01
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	93 81       	ldd	r25, Z+3	; 0x03
    6364:	0c 5f       	subi	r16, 0xFC	; 252
    6366:	1f 4f       	sbci	r17, 0xFF	; 255
    6368:	06 c0       	rjmp	.+12     	; 0x6376 <vfprintf+0x29c>
    636a:	60 81       	ld	r22, Z
    636c:	71 81       	ldd	r23, Z+1	; 0x01
    636e:	80 e0       	ldi	r24, 0x00	; 0
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	0e 5f       	subi	r16, 0xFE	; 254
    6374:	1f 4f       	sbci	r17, 0xFF	; 255
    6376:	a3 01       	movw	r20, r6
    6378:	0e 94 a0 32 	call	0x6540	; 0x6540 <__ultoa_invert>
    637c:	88 2e       	mov	r8, r24
    637e:	86 18       	sub	r8, r6
    6380:	fb 2d       	mov	r31, r11
    6382:	ff 77       	andi	r31, 0x7F	; 127
    6384:	3f 2e       	mov	r3, r31
    6386:	36 fe       	sbrs	r3, 6
    6388:	0d c0       	rjmp	.+26     	; 0x63a4 <vfprintf+0x2ca>
    638a:	23 2d       	mov	r18, r3
    638c:	2e 7f       	andi	r18, 0xFE	; 254
    638e:	a2 2e       	mov	r10, r18
    6390:	89 14       	cp	r8, r9
    6392:	58 f4       	brcc	.+22     	; 0x63aa <vfprintf+0x2d0>
    6394:	34 fe       	sbrs	r3, 4
    6396:	0b c0       	rjmp	.+22     	; 0x63ae <vfprintf+0x2d4>
    6398:	32 fc       	sbrc	r3, 2
    639a:	09 c0       	rjmp	.+18     	; 0x63ae <vfprintf+0x2d4>
    639c:	83 2d       	mov	r24, r3
    639e:	8e 7e       	andi	r24, 0xEE	; 238
    63a0:	a8 2e       	mov	r10, r24
    63a2:	05 c0       	rjmp	.+10     	; 0x63ae <vfprintf+0x2d4>
    63a4:	b8 2c       	mov	r11, r8
    63a6:	a3 2c       	mov	r10, r3
    63a8:	03 c0       	rjmp	.+6      	; 0x63b0 <vfprintf+0x2d6>
    63aa:	b8 2c       	mov	r11, r8
    63ac:	01 c0       	rjmp	.+2      	; 0x63b0 <vfprintf+0x2d6>
    63ae:	b9 2c       	mov	r11, r9
    63b0:	a4 fe       	sbrs	r10, 4
    63b2:	0f c0       	rjmp	.+30     	; 0x63d2 <vfprintf+0x2f8>
    63b4:	fe 01       	movw	r30, r28
    63b6:	e8 0d       	add	r30, r8
    63b8:	f1 1d       	adc	r31, r1
    63ba:	80 81       	ld	r24, Z
    63bc:	80 33       	cpi	r24, 0x30	; 48
    63be:	21 f4       	brne	.+8      	; 0x63c8 <vfprintf+0x2ee>
    63c0:	9a 2d       	mov	r25, r10
    63c2:	99 7e       	andi	r25, 0xE9	; 233
    63c4:	a9 2e       	mov	r10, r25
    63c6:	09 c0       	rjmp	.+18     	; 0x63da <vfprintf+0x300>
    63c8:	a2 fe       	sbrs	r10, 2
    63ca:	06 c0       	rjmp	.+12     	; 0x63d8 <vfprintf+0x2fe>
    63cc:	b3 94       	inc	r11
    63ce:	b3 94       	inc	r11
    63d0:	04 c0       	rjmp	.+8      	; 0x63da <vfprintf+0x300>
    63d2:	8a 2d       	mov	r24, r10
    63d4:	86 78       	andi	r24, 0x86	; 134
    63d6:	09 f0       	breq	.+2      	; 0x63da <vfprintf+0x300>
    63d8:	b3 94       	inc	r11
    63da:	a3 fc       	sbrc	r10, 3
    63dc:	11 c0       	rjmp	.+34     	; 0x6400 <vfprintf+0x326>
    63de:	a0 fe       	sbrs	r10, 0
    63e0:	06 c0       	rjmp	.+12     	; 0x63ee <vfprintf+0x314>
    63e2:	b2 14       	cp	r11, r2
    63e4:	88 f4       	brcc	.+34     	; 0x6408 <vfprintf+0x32e>
    63e6:	28 0c       	add	r2, r8
    63e8:	92 2c       	mov	r9, r2
    63ea:	9b 18       	sub	r9, r11
    63ec:	0e c0       	rjmp	.+28     	; 0x640a <vfprintf+0x330>
    63ee:	b2 14       	cp	r11, r2
    63f0:	60 f4       	brcc	.+24     	; 0x640a <vfprintf+0x330>
    63f2:	b6 01       	movw	r22, r12
    63f4:	80 e2       	ldi	r24, 0x20	; 32
    63f6:	90 e0       	ldi	r25, 0x00	; 0
    63f8:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    63fc:	b3 94       	inc	r11
    63fe:	f7 cf       	rjmp	.-18     	; 0x63ee <vfprintf+0x314>
    6400:	b2 14       	cp	r11, r2
    6402:	18 f4       	brcc	.+6      	; 0x640a <vfprintf+0x330>
    6404:	2b 18       	sub	r2, r11
    6406:	02 c0       	rjmp	.+4      	; 0x640c <vfprintf+0x332>
    6408:	98 2c       	mov	r9, r8
    640a:	21 2c       	mov	r2, r1
    640c:	a4 fe       	sbrs	r10, 4
    640e:	10 c0       	rjmp	.+32     	; 0x6430 <vfprintf+0x356>
    6410:	b6 01       	movw	r22, r12
    6412:	80 e3       	ldi	r24, 0x30	; 48
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    641a:	a2 fe       	sbrs	r10, 2
    641c:	17 c0       	rjmp	.+46     	; 0x644c <vfprintf+0x372>
    641e:	a1 fc       	sbrc	r10, 1
    6420:	03 c0       	rjmp	.+6      	; 0x6428 <vfprintf+0x34e>
    6422:	88 e7       	ldi	r24, 0x78	; 120
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	02 c0       	rjmp	.+4      	; 0x642c <vfprintf+0x352>
    6428:	88 e5       	ldi	r24, 0x58	; 88
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	b6 01       	movw	r22, r12
    642e:	0c c0       	rjmp	.+24     	; 0x6448 <vfprintf+0x36e>
    6430:	8a 2d       	mov	r24, r10
    6432:	86 78       	andi	r24, 0x86	; 134
    6434:	59 f0       	breq	.+22     	; 0x644c <vfprintf+0x372>
    6436:	a1 fe       	sbrs	r10, 1
    6438:	02 c0       	rjmp	.+4      	; 0x643e <vfprintf+0x364>
    643a:	8b e2       	ldi	r24, 0x2B	; 43
    643c:	01 c0       	rjmp	.+2      	; 0x6440 <vfprintf+0x366>
    643e:	80 e2       	ldi	r24, 0x20	; 32
    6440:	a7 fc       	sbrc	r10, 7
    6442:	8d e2       	ldi	r24, 0x2D	; 45
    6444:	b6 01       	movw	r22, r12
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    644c:	89 14       	cp	r8, r9
    644e:	38 f4       	brcc	.+14     	; 0x645e <vfprintf+0x384>
    6450:	b6 01       	movw	r22, r12
    6452:	80 e3       	ldi	r24, 0x30	; 48
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    645a:	9a 94       	dec	r9
    645c:	f7 cf       	rjmp	.-18     	; 0x644c <vfprintf+0x372>
    645e:	8a 94       	dec	r8
    6460:	f3 01       	movw	r30, r6
    6462:	e8 0d       	add	r30, r8
    6464:	f1 1d       	adc	r31, r1
    6466:	80 81       	ld	r24, Z
    6468:	b6 01       	movw	r22, r12
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    6470:	81 10       	cpse	r8, r1
    6472:	f5 cf       	rjmp	.-22     	; 0x645e <vfprintf+0x384>
    6474:	22 20       	and	r2, r2
    6476:	09 f4       	brne	.+2      	; 0x647a <vfprintf+0x3a0>
    6478:	42 ce       	rjmp	.-892    	; 0x60fe <vfprintf+0x24>
    647a:	b6 01       	movw	r22, r12
    647c:	80 e2       	ldi	r24, 0x20	; 32
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	0e 94 64 32 	call	0x64c8	; 0x64c8 <fputc>
    6484:	2a 94       	dec	r2
    6486:	f6 cf       	rjmp	.-20     	; 0x6474 <vfprintf+0x39a>
    6488:	f6 01       	movw	r30, r12
    648a:	86 81       	ldd	r24, Z+6	; 0x06
    648c:	97 81       	ldd	r25, Z+7	; 0x07
    648e:	02 c0       	rjmp	.+4      	; 0x6494 <vfprintf+0x3ba>
    6490:	8f ef       	ldi	r24, 0xFF	; 255
    6492:	9f ef       	ldi	r25, 0xFF	; 255
    6494:	2b 96       	adiw	r28, 0x0b	; 11
    6496:	e2 e1       	ldi	r30, 0x12	; 18
    6498:	0c 94 7d 33 	jmp	0x66fa	; 0x66fa <__epilogue_restores__>

0000649c <strnlen_P>:
    649c:	fc 01       	movw	r30, r24
    649e:	05 90       	lpm	r0, Z+
    64a0:	61 50       	subi	r22, 0x01	; 1
    64a2:	70 40       	sbci	r23, 0x00	; 0
    64a4:	01 10       	cpse	r0, r1
    64a6:	d8 f7       	brcc	.-10     	; 0x649e <strnlen_P+0x2>
    64a8:	80 95       	com	r24
    64aa:	90 95       	com	r25
    64ac:	8e 0f       	add	r24, r30
    64ae:	9f 1f       	adc	r25, r31
    64b0:	08 95       	ret

000064b2 <strnlen>:
    64b2:	fc 01       	movw	r30, r24
    64b4:	61 50       	subi	r22, 0x01	; 1
    64b6:	70 40       	sbci	r23, 0x00	; 0
    64b8:	01 90       	ld	r0, Z+
    64ba:	01 10       	cpse	r0, r1
    64bc:	d8 f7       	brcc	.-10     	; 0x64b4 <strnlen+0x2>
    64be:	80 95       	com	r24
    64c0:	90 95       	com	r25
    64c2:	8e 0f       	add	r24, r30
    64c4:	9f 1f       	adc	r25, r31
    64c6:	08 95       	ret

000064c8 <fputc>:
    64c8:	0f 93       	push	r16
    64ca:	1f 93       	push	r17
    64cc:	cf 93       	push	r28
    64ce:	df 93       	push	r29
    64d0:	fb 01       	movw	r30, r22
    64d2:	23 81       	ldd	r18, Z+3	; 0x03
    64d4:	21 fd       	sbrc	r18, 1
    64d6:	03 c0       	rjmp	.+6      	; 0x64de <fputc+0x16>
    64d8:	8f ef       	ldi	r24, 0xFF	; 255
    64da:	9f ef       	ldi	r25, 0xFF	; 255
    64dc:	2c c0       	rjmp	.+88     	; 0x6536 <fputc+0x6e>
    64de:	22 ff       	sbrs	r18, 2
    64e0:	16 c0       	rjmp	.+44     	; 0x650e <fputc+0x46>
    64e2:	46 81       	ldd	r20, Z+6	; 0x06
    64e4:	57 81       	ldd	r21, Z+7	; 0x07
    64e6:	24 81       	ldd	r18, Z+4	; 0x04
    64e8:	35 81       	ldd	r19, Z+5	; 0x05
    64ea:	42 17       	cp	r20, r18
    64ec:	53 07       	cpc	r21, r19
    64ee:	44 f4       	brge	.+16     	; 0x6500 <fputc+0x38>
    64f0:	a0 81       	ld	r26, Z
    64f2:	b1 81       	ldd	r27, Z+1	; 0x01
    64f4:	9d 01       	movw	r18, r26
    64f6:	2f 5f       	subi	r18, 0xFF	; 255
    64f8:	3f 4f       	sbci	r19, 0xFF	; 255
    64fa:	31 83       	std	Z+1, r19	; 0x01
    64fc:	20 83       	st	Z, r18
    64fe:	8c 93       	st	X, r24
    6500:	26 81       	ldd	r18, Z+6	; 0x06
    6502:	37 81       	ldd	r19, Z+7	; 0x07
    6504:	2f 5f       	subi	r18, 0xFF	; 255
    6506:	3f 4f       	sbci	r19, 0xFF	; 255
    6508:	37 83       	std	Z+7, r19	; 0x07
    650a:	26 83       	std	Z+6, r18	; 0x06
    650c:	14 c0       	rjmp	.+40     	; 0x6536 <fputc+0x6e>
    650e:	8b 01       	movw	r16, r22
    6510:	ec 01       	movw	r28, r24
    6512:	fb 01       	movw	r30, r22
    6514:	00 84       	ldd	r0, Z+8	; 0x08
    6516:	f1 85       	ldd	r31, Z+9	; 0x09
    6518:	e0 2d       	mov	r30, r0
    651a:	09 95       	icall
    651c:	89 2b       	or	r24, r25
    651e:	e1 f6       	brne	.-72     	; 0x64d8 <fputc+0x10>
    6520:	d8 01       	movw	r26, r16
    6522:	16 96       	adiw	r26, 0x06	; 6
    6524:	8d 91       	ld	r24, X+
    6526:	9c 91       	ld	r25, X
    6528:	17 97       	sbiw	r26, 0x07	; 7
    652a:	01 96       	adiw	r24, 0x01	; 1
    652c:	17 96       	adiw	r26, 0x07	; 7
    652e:	9c 93       	st	X, r25
    6530:	8e 93       	st	-X, r24
    6532:	16 97       	sbiw	r26, 0x06	; 6
    6534:	ce 01       	movw	r24, r28
    6536:	df 91       	pop	r29
    6538:	cf 91       	pop	r28
    653a:	1f 91       	pop	r17
    653c:	0f 91       	pop	r16
    653e:	08 95       	ret

00006540 <__ultoa_invert>:
    6540:	fa 01       	movw	r30, r20
    6542:	aa 27       	eor	r26, r26
    6544:	28 30       	cpi	r18, 0x08	; 8
    6546:	51 f1       	breq	.+84     	; 0x659c <__ultoa_invert+0x5c>
    6548:	20 31       	cpi	r18, 0x10	; 16
    654a:	81 f1       	breq	.+96     	; 0x65ac <__ultoa_invert+0x6c>
    654c:	e8 94       	clt
    654e:	6f 93       	push	r22
    6550:	6e 7f       	andi	r22, 0xFE	; 254
    6552:	6e 5f       	subi	r22, 0xFE	; 254
    6554:	7f 4f       	sbci	r23, 0xFF	; 255
    6556:	8f 4f       	sbci	r24, 0xFF	; 255
    6558:	9f 4f       	sbci	r25, 0xFF	; 255
    655a:	af 4f       	sbci	r26, 0xFF	; 255
    655c:	b1 e0       	ldi	r27, 0x01	; 1
    655e:	3e d0       	rcall	.+124    	; 0x65dc <__ultoa_invert+0x9c>
    6560:	b4 e0       	ldi	r27, 0x04	; 4
    6562:	3c d0       	rcall	.+120    	; 0x65dc <__ultoa_invert+0x9c>
    6564:	67 0f       	add	r22, r23
    6566:	78 1f       	adc	r23, r24
    6568:	89 1f       	adc	r24, r25
    656a:	9a 1f       	adc	r25, r26
    656c:	a1 1d       	adc	r26, r1
    656e:	68 0f       	add	r22, r24
    6570:	79 1f       	adc	r23, r25
    6572:	8a 1f       	adc	r24, r26
    6574:	91 1d       	adc	r25, r1
    6576:	a1 1d       	adc	r26, r1
    6578:	6a 0f       	add	r22, r26
    657a:	71 1d       	adc	r23, r1
    657c:	81 1d       	adc	r24, r1
    657e:	91 1d       	adc	r25, r1
    6580:	a1 1d       	adc	r26, r1
    6582:	20 d0       	rcall	.+64     	; 0x65c4 <__ultoa_invert+0x84>
    6584:	09 f4       	brne	.+2      	; 0x6588 <__ultoa_invert+0x48>
    6586:	68 94       	set
    6588:	3f 91       	pop	r19
    658a:	2a e0       	ldi	r18, 0x0A	; 10
    658c:	26 9f       	mul	r18, r22
    658e:	11 24       	eor	r1, r1
    6590:	30 19       	sub	r19, r0
    6592:	30 5d       	subi	r19, 0xD0	; 208
    6594:	31 93       	st	Z+, r19
    6596:	de f6       	brtc	.-74     	; 0x654e <__ultoa_invert+0xe>
    6598:	cf 01       	movw	r24, r30
    659a:	08 95       	ret
    659c:	46 2f       	mov	r20, r22
    659e:	47 70       	andi	r20, 0x07	; 7
    65a0:	40 5d       	subi	r20, 0xD0	; 208
    65a2:	41 93       	st	Z+, r20
    65a4:	b3 e0       	ldi	r27, 0x03	; 3
    65a6:	0f d0       	rcall	.+30     	; 0x65c6 <__ultoa_invert+0x86>
    65a8:	c9 f7       	brne	.-14     	; 0x659c <__ultoa_invert+0x5c>
    65aa:	f6 cf       	rjmp	.-20     	; 0x6598 <__ultoa_invert+0x58>
    65ac:	46 2f       	mov	r20, r22
    65ae:	4f 70       	andi	r20, 0x0F	; 15
    65b0:	40 5d       	subi	r20, 0xD0	; 208
    65b2:	4a 33       	cpi	r20, 0x3A	; 58
    65b4:	18 f0       	brcs	.+6      	; 0x65bc <__ultoa_invert+0x7c>
    65b6:	49 5d       	subi	r20, 0xD9	; 217
    65b8:	31 fd       	sbrc	r19, 1
    65ba:	40 52       	subi	r20, 0x20	; 32
    65bc:	41 93       	st	Z+, r20
    65be:	02 d0       	rcall	.+4      	; 0x65c4 <__ultoa_invert+0x84>
    65c0:	a9 f7       	brne	.-22     	; 0x65ac <__ultoa_invert+0x6c>
    65c2:	ea cf       	rjmp	.-44     	; 0x6598 <__ultoa_invert+0x58>
    65c4:	b4 e0       	ldi	r27, 0x04	; 4
    65c6:	a6 95       	lsr	r26
    65c8:	97 95       	ror	r25
    65ca:	87 95       	ror	r24
    65cc:	77 95       	ror	r23
    65ce:	67 95       	ror	r22
    65d0:	ba 95       	dec	r27
    65d2:	c9 f7       	brne	.-14     	; 0x65c6 <__ultoa_invert+0x86>
    65d4:	00 97       	sbiw	r24, 0x00	; 0
    65d6:	61 05       	cpc	r22, r1
    65d8:	71 05       	cpc	r23, r1
    65da:	08 95       	ret
    65dc:	9b 01       	movw	r18, r22
    65de:	ac 01       	movw	r20, r24
    65e0:	0a 2e       	mov	r0, r26
    65e2:	06 94       	lsr	r0
    65e4:	57 95       	ror	r21
    65e6:	47 95       	ror	r20
    65e8:	37 95       	ror	r19
    65ea:	27 95       	ror	r18
    65ec:	ba 95       	dec	r27
    65ee:	c9 f7       	brne	.-14     	; 0x65e2 <__ultoa_invert+0xa2>
    65f0:	62 0f       	add	r22, r18
    65f2:	73 1f       	adc	r23, r19
    65f4:	84 1f       	adc	r24, r20
    65f6:	95 1f       	adc	r25, r21
    65f8:	a0 1d       	adc	r26, r0
    65fa:	08 95       	ret

000065fc <eeprom_read_byte>:
    65fc:	f9 99       	sbic	0x1f, 1	; 31
    65fe:	fe cf       	rjmp	.-4      	; 0x65fc <eeprom_read_byte>
    6600:	92 bd       	out	0x22, r25	; 34
    6602:	81 bd       	out	0x21, r24	; 33
    6604:	f8 9a       	sbi	0x1f, 0	; 31
    6606:	99 27       	eor	r25, r25
    6608:	80 b5       	in	r24, 0x20	; 32
    660a:	08 95       	ret

0000660c <eeprom_read_dword>:
    660c:	a6 e1       	ldi	r26, 0x16	; 22
    660e:	b0 e0       	ldi	r27, 0x00	; 0
    6610:	44 e0       	ldi	r20, 0x04	; 4
    6612:	50 e0       	ldi	r21, 0x00	; 0
    6614:	0c 94 53 33 	jmp	0x66a6	; 0x66a6 <eeprom_read_blraw>

00006618 <eeprom_read_word>:
    6618:	a8 e1       	ldi	r26, 0x18	; 24
    661a:	b0 e0       	ldi	r27, 0x00	; 0
    661c:	42 e0       	ldi	r20, 0x02	; 2
    661e:	50 e0       	ldi	r21, 0x00	; 0
    6620:	0c 94 53 33 	jmp	0x66a6	; 0x66a6 <eeprom_read_blraw>

00006624 <eeprom_update_byte>:
    6624:	26 2f       	mov	r18, r22

00006626 <eeprom_update_r18>:
    6626:	f9 99       	sbic	0x1f, 1	; 31
    6628:	fe cf       	rjmp	.-4      	; 0x6626 <eeprom_update_r18>
    662a:	92 bd       	out	0x22, r25	; 34
    662c:	81 bd       	out	0x21, r24	; 33
    662e:	f8 9a       	sbi	0x1f, 0	; 31
    6630:	01 97       	sbiw	r24, 0x01	; 1
    6632:	00 b4       	in	r0, 0x20	; 32
    6634:	02 16       	cp	r0, r18
    6636:	39 f0       	breq	.+14     	; 0x6646 <eeprom_update_r18+0x20>
    6638:	1f ba       	out	0x1f, r1	; 31
    663a:	20 bd       	out	0x20, r18	; 32
    663c:	0f b6       	in	r0, 0x3f	; 63
    663e:	f8 94       	cli
    6640:	fa 9a       	sbi	0x1f, 2	; 31
    6642:	f9 9a       	sbi	0x1f, 1	; 31
    6644:	0f be       	out	0x3f, r0	; 63
    6646:	08 95       	ret

00006648 <eeprom_update_dword>:
    6648:	03 96       	adiw	r24, 0x03	; 3
    664a:	27 2f       	mov	r18, r23
    664c:	0e 94 13 33 	call	0x6626	; 0x6626 <eeprom_update_r18>
    6650:	0e 94 12 33 	call	0x6624	; 0x6624 <eeprom_update_byte>
    6654:	25 2f       	mov	r18, r21
    6656:	0e 94 13 33 	call	0x6626	; 0x6626 <eeprom_update_r18>
    665a:	24 2f       	mov	r18, r20
    665c:	0c 94 13 33 	jmp	0x6626	; 0x6626 <eeprom_update_r18>

00006660 <eeprom_update_word>:
    6660:	01 96       	adiw	r24, 0x01	; 1
    6662:	27 2f       	mov	r18, r23
    6664:	0e 94 13 33 	call	0x6626	; 0x6626 <eeprom_update_r18>
    6668:	0c 94 12 33 	jmp	0x6624	; 0x6624 <eeprom_update_byte>

0000666c <eeprom_write_byte>:
    666c:	26 2f       	mov	r18, r22

0000666e <eeprom_write_r18>:
    666e:	f9 99       	sbic	0x1f, 1	; 31
    6670:	fe cf       	rjmp	.-4      	; 0x666e <eeprom_write_r18>
    6672:	1f ba       	out	0x1f, r1	; 31
    6674:	92 bd       	out	0x22, r25	; 34
    6676:	81 bd       	out	0x21, r24	; 33
    6678:	20 bd       	out	0x20, r18	; 32
    667a:	0f b6       	in	r0, 0x3f	; 63
    667c:	f8 94       	cli
    667e:	fa 9a       	sbi	0x1f, 2	; 31
    6680:	f9 9a       	sbi	0x1f, 1	; 31
    6682:	0f be       	out	0x3f, r0	; 63
    6684:	01 96       	adiw	r24, 0x01	; 1
    6686:	08 95       	ret

00006688 <eeprom_write_dword>:
    6688:	24 2f       	mov	r18, r20
    668a:	0e 94 37 33 	call	0x666e	; 0x666e <eeprom_write_r18>
    668e:	25 2f       	mov	r18, r21
    6690:	0e 94 37 33 	call	0x666e	; 0x666e <eeprom_write_r18>
    6694:	0c 94 4c 33 	jmp	0x6698	; 0x6698 <eeprom_write_word>

00006698 <eeprom_write_word>:
    6698:	0e 94 36 33 	call	0x666c	; 0x666c <eeprom_write_byte>
    669c:	27 2f       	mov	r18, r23
    669e:	0c 94 37 33 	jmp	0x666e	; 0x666e <eeprom_write_r18>

000066a2 <eeprom_read_block>:
    66a2:	dc 01       	movw	r26, r24
    66a4:	cb 01       	movw	r24, r22

000066a6 <eeprom_read_blraw>:
    66a6:	fc 01       	movw	r30, r24
    66a8:	f9 99       	sbic	0x1f, 1	; 31
    66aa:	fe cf       	rjmp	.-4      	; 0x66a8 <eeprom_read_blraw+0x2>
    66ac:	06 c0       	rjmp	.+12     	; 0x66ba <eeprom_read_blraw+0x14>
    66ae:	f2 bd       	out	0x22, r31	; 34
    66b0:	e1 bd       	out	0x21, r30	; 33
    66b2:	f8 9a       	sbi	0x1f, 0	; 31
    66b4:	31 96       	adiw	r30, 0x01	; 1
    66b6:	00 b4       	in	r0, 0x20	; 32
    66b8:	0d 92       	st	X+, r0
    66ba:	41 50       	subi	r20, 0x01	; 1
    66bc:	50 40       	sbci	r21, 0x00	; 0
    66be:	b8 f7       	brcc	.-18     	; 0x66ae <eeprom_read_blraw+0x8>
    66c0:	08 95       	ret

000066c2 <__prologue_saves__>:
    66c2:	2f 92       	push	r2
    66c4:	3f 92       	push	r3
    66c6:	4f 92       	push	r4
    66c8:	5f 92       	push	r5
    66ca:	6f 92       	push	r6
    66cc:	7f 92       	push	r7
    66ce:	8f 92       	push	r8
    66d0:	9f 92       	push	r9
    66d2:	af 92       	push	r10
    66d4:	bf 92       	push	r11
    66d6:	cf 92       	push	r12
    66d8:	df 92       	push	r13
    66da:	ef 92       	push	r14
    66dc:	ff 92       	push	r15
    66de:	0f 93       	push	r16
    66e0:	1f 93       	push	r17
    66e2:	cf 93       	push	r28
    66e4:	df 93       	push	r29
    66e6:	cd b7       	in	r28, 0x3d	; 61
    66e8:	de b7       	in	r29, 0x3e	; 62
    66ea:	ca 1b       	sub	r28, r26
    66ec:	db 0b       	sbc	r29, r27
    66ee:	0f b6       	in	r0, 0x3f	; 63
    66f0:	f8 94       	cli
    66f2:	de bf       	out	0x3e, r29	; 62
    66f4:	0f be       	out	0x3f, r0	; 63
    66f6:	cd bf       	out	0x3d, r28	; 61
    66f8:	09 94       	ijmp

000066fa <__epilogue_restores__>:
    66fa:	2a 88       	ldd	r2, Y+18	; 0x12
    66fc:	39 88       	ldd	r3, Y+17	; 0x11
    66fe:	48 88       	ldd	r4, Y+16	; 0x10
    6700:	5f 84       	ldd	r5, Y+15	; 0x0f
    6702:	6e 84       	ldd	r6, Y+14	; 0x0e
    6704:	7d 84       	ldd	r7, Y+13	; 0x0d
    6706:	8c 84       	ldd	r8, Y+12	; 0x0c
    6708:	9b 84       	ldd	r9, Y+11	; 0x0b
    670a:	aa 84       	ldd	r10, Y+10	; 0x0a
    670c:	b9 84       	ldd	r11, Y+9	; 0x09
    670e:	c8 84       	ldd	r12, Y+8	; 0x08
    6710:	df 80       	ldd	r13, Y+7	; 0x07
    6712:	ee 80       	ldd	r14, Y+6	; 0x06
    6714:	fd 80       	ldd	r15, Y+5	; 0x05
    6716:	0c 81       	ldd	r16, Y+4	; 0x04
    6718:	1b 81       	ldd	r17, Y+3	; 0x03
    671a:	aa 81       	ldd	r26, Y+2	; 0x02
    671c:	b9 81       	ldd	r27, Y+1	; 0x01
    671e:	ce 0f       	add	r28, r30
    6720:	d1 1d       	adc	r29, r1
    6722:	0f b6       	in	r0, 0x3f	; 63
    6724:	f8 94       	cli
    6726:	de bf       	out	0x3e, r29	; 62
    6728:	0f be       	out	0x3f, r0	; 63
    672a:	cd bf       	out	0x3d, r28	; 61
    672c:	ed 01       	movw	r28, r26
    672e:	08 95       	ret

00006730 <__do_global_dtors>:
    6730:	11 e0       	ldi	r17, 0x01	; 1
    6732:	c6 e1       	ldi	r28, 0x16	; 22
    6734:	d1 e0       	ldi	r29, 0x01	; 1
    6736:	04 c0       	rjmp	.+8      	; 0x6740 <__do_global_dtors+0x10>
    6738:	fe 01       	movw	r30, r28
    673a:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <__tablejump2__>
    673e:	21 96       	adiw	r28, 0x01	; 1
    6740:	c7 31       	cpi	r28, 0x17	; 23
    6742:	d1 07       	cpc	r29, r17
    6744:	c9 f7       	brne	.-14     	; 0x6738 <__do_global_dtors+0x8>
    6746:	f8 94       	cli

00006748 <__stop_program>:
    6748:	ff cf       	rjmp	.-2      	; 0x6748 <__stop_program>
