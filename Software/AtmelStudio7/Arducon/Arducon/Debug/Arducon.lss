
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f8  00800100  000062a2  00006356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062a2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bd  008002f8  008002f8  0000654e  2**0
                  ALLOC
  3 .eeprom       00000321  00810000  00810000  0000654e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000686f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000068cc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00006910  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000078ab  00000000  00000000  00006e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000198c  00000000  00000000  0000e6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004654  00000000  00000000  0001004f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dcc  00000000  00000000  000146a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000259e  00000000  00000000  00015470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005d02  00000000  00000000  00017a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000450  00000000  00000000  0001d710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 01 	jmp	0x202	; 0x202 <__dtors_end>
       4:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_1>
       8:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
       c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      10:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      14:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__vector_5>
      18:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      1c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      20:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__vector_8>
      24:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      28:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      2c:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__vector_11>
      30:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      34:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      38:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_14>
      3c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      40:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      44:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      48:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_18>
      4c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_19>
      50:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      54:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_21>
      58:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      5c:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      60:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      64:	0c 94 29 01 	jmp	0x252	; 0x252 <__bad_interrupt>
      68:	56 01       	movw	r10, r12
      6a:	61 01       	movw	r12, r2
      6c:	6c 01       	movw	r12, r24
      6e:	77 01       	movw	r14, r14
      70:	82 01       	movw	r16, r4
      72:	8d 01       	movw	r16, r26
      74:	98 01       	movw	r18, r16
      76:	a3 01       	movw	r20, r6
      78:	ae 01       	movw	r20, r28
      7a:	b9 01       	movw	r22, r18
      7c:	c4 01       	movw	r24, r8
      7e:	1b 02       	muls	r17, r27
      80:	1b 02       	muls	r17, r27
      82:	cf 01       	movw	r24, r30
      84:	da 01       	movw	r26, r20
      86:	e5 01       	movw	r28, r10
      88:	f0 01       	movw	r30, r0
      8a:	fb 01       	movw	r30, r22
      8c:	06 02       	muls	r16, r22
      8e:	11 02       	muls	r17, r17
      90:	26 02       	muls	r18, r22
      92:	2a 02       	muls	r18, r26
      94:	2e 02       	muls	r18, r30
      96:	32 02       	muls	r19, r18
      98:	36 02       	muls	r19, r22
      9a:	3a 02       	muls	r19, r26
      9c:	3e 02       	muls	r19, r30
      9e:	43 02       	muls	r20, r19
      a0:	47 02       	muls	r20, r23
      a2:	60 02       	muls	r22, r16
      a4:	60 02       	muls	r22, r16
      a6:	4b 02       	muls	r20, r27
      a8:	4f 02       	muls	r20, r31
      aa:	54 02       	muls	r21, r20
      ac:	58 02       	muls	r21, r24
      ae:	5c 02       	muls	r21, r28
      b0:	71 02       	muls	r23, r17
      b2:	77 02       	muls	r23, r23
      b4:	7d 02       	muls	r23, r29
      b6:	83 02       	muls	r24, r19
      b8:	89 02       	muls	r24, r25
      ba:	8f 02       	muls	r24, r31
      bc:	95 02       	muls	r25, r21
      be:	9b 02       	muls	r25, r27
      c0:	a1 02       	muls	r26, r17
      c2:	a7 02       	muls	r26, r23
      c4:	ad 02       	muls	r26, r29
      c6:	d0 02       	muls	r29, r16
      c8:	d0 02       	muls	r29, r16
      ca:	b3 02       	muls	r27, r19
      cc:	b9 02       	muls	r27, r25
      ce:	bf 02       	muls	r27, r31
      d0:	c5 02       	muls	r28, r21
      d2:	cb 02       	muls	r28, r27
      d4:	f1 02       	muls	r31, r17
      d6:	4d 03       	fmul	r20, r21
      d8:	4d 03       	fmul	r20, r21
      da:	0e 03       	fmul	r16, r22
      dc:	32 03       	mulsu	r19, r18
      de:	ee 02       	muls	r30, r30
      e0:	35 03       	mulsu	r19, r21
      e2:	3b 03       	fmul	r19, r19
      e4:	eb 02       	muls	r30, r27
      e6:	45 03       	mulsu	r20, r21
      e8:	e8 02       	muls	r30, r24
      ea:	2f 03       	fmul	r18, r23
      ec:	3e 03       	fmul	r19, r22
      ee:	96 03       	fmuls	r17, r22
      f0:	68 03       	fmul	r22, r16
      f2:	99 03       	fmulsu	r17, r17
      f4:	6b 03       	fmul	r22, r19
      f6:	6e 03       	fmul	r22, r22
      f8:	71 03       	mulsu	r23, r17
      fa:	74 03       	mulsu	r23, r20
      fc:	77 03       	mulsu	r23, r23
      fe:	7a 03       	fmul	r23, r18
     100:	7d 03       	fmul	r23, r21
     102:	80 03       	fmuls	r16, r16
     104:	73 1c       	adc	r7, r3
     106:	b5 1c       	adc	r11, r5
     108:	20 1d       	adc	r18, r0
     10a:	2b 1d       	adc	r18, r11
     10c:	36 1d       	adc	r19, r6
     10e:	40 1d       	adc	r20, r0
     110:	c1 1d       	adc	r28, r1
     112:	30 1e       	adc	r3, r16
     114:	ab 1e       	adc	r10, r27
     116:	ef 1e       	adc	r14, r31
     118:	33 1f       	adc	r19, r19
     11a:	6f 1e       	adc	r6, r31
     11c:	79 1f       	adc	r23, r25
     11e:	8a 1d       	adc	r24, r10
     120:	9b 1f       	adc	r25, r27
     122:	e3 1c       	adc	r14, r3
     124:	c7 1f       	adc	r28, r23
     126:	66 25       	eor	r22, r6
     128:	2a 25       	eor	r18, r10
     12a:	56 25       	eor	r21, r6
     12c:	6e 25       	eor	r22, r14
     12e:	5a 25       	eor	r21, r10
     130:	6e 25       	eor	r22, r14
     132:	3a 25       	eor	r19, r10
     134:	26 25       	eor	r18, r6
     136:	32 25       	eor	r19, r2
     138:	36 25       	eor	r19, r6
     13a:	6e 25       	eor	r22, r14
     13c:	4a 25       	eor	r20, r10
     13e:	1e 25       	eor	r17, r14
     140:	4e 25       	eor	r20, r14
     142:	1a 25       	eor	r17, r10
     144:	2e 25       	eor	r18, r14
     146:	f2 24       	eor	r15, r2
     148:	f6 24       	eor	r15, r6
     14a:	fa 24       	eor	r15, r10
     14c:	fe 24       	eor	r15, r14
     14e:	02 25       	eor	r16, r2
     150:	06 25       	eor	r16, r6
     152:	0a 25       	eor	r16, r10
     154:	0e 25       	eor	r16, r14
     156:	12 25       	eor	r17, r2
     158:	16 25       	eor	r17, r6
     15a:	3e 25       	eor	r19, r14
     15c:	42 25       	eor	r20, r2
     15e:	6a 25       	eor	r22, r10
     160:	46 25       	eor	r20, r6
     162:	6e 25       	eor	r22, r14
     164:	22 25       	eor	r18, r2
     166:	5e 25       	eor	r21, r14
     168:	72 25       	eor	r23, r2
     16a:	8e 24       	eor	r8, r14
     16c:	92 24       	eor	r9, r2
     16e:	96 24       	eor	r9, r6
     170:	9a 24       	eor	r9, r10
     172:	9e 24       	eor	r9, r14
     174:	a2 24       	eor	r10, r2
     176:	a6 24       	eor	r10, r6
     178:	aa 24       	eor	r10, r10
     17a:	ae 24       	eor	r10, r14
     17c:	b2 24       	eor	r11, r2
     17e:	b6 24       	eor	r11, r6
     180:	ba 24       	eor	r11, r10
     182:	be 24       	eor	r11, r14
     184:	c2 24       	eor	r12, r2
     186:	c6 24       	eor	r12, r6
     188:	ca 24       	eor	r12, r10
     18a:	ce 24       	eor	r12, r14
     18c:	d2 24       	eor	r13, r2
     18e:	d6 24       	eor	r13, r6
     190:	da 24       	eor	r13, r10
     192:	de 24       	eor	r13, r14
     194:	e2 24       	eor	r14, r2
     196:	e6 24       	eor	r14, r6
     198:	ea 24       	eor	r14, r10
     19a:	ee 24       	eor	r14, r14
     19c:	6e 25       	eor	r22, r14
     19e:	6e 25       	eor	r22, r14
     1a0:	6e 25       	eor	r22, r14
     1a2:	6e 25       	eor	r22, r14
     1a4:	52 25       	eor	r21, r2
     1a6:	6e 25       	eor	r22, r14
     1a8:	6e 25       	eor	r22, r14
     1aa:	6e 25       	eor	r22, r14
     1ac:	6e 25       	eor	r22, r14
     1ae:	6e 25       	eor	r22, r14
     1b0:	6e 25       	eor	r22, r14
     1b2:	6e 25       	eor	r22, r14
     1b4:	6e 25       	eor	r22, r14
     1b6:	6e 25       	eor	r22, r14
     1b8:	6e 25       	eor	r22, r14
     1ba:	6e 25       	eor	r22, r14
     1bc:	6e 25       	eor	r22, r14
     1be:	6e 25       	eor	r22, r14
     1c0:	6e 25       	eor	r22, r14
     1c2:	6e 25       	eor	r22, r14
     1c4:	6e 25       	eor	r22, r14
     1c6:	6e 25       	eor	r22, r14
     1c8:	6e 25       	eor	r22, r14
     1ca:	6e 25       	eor	r22, r14
     1cc:	6e 25       	eor	r22, r14
     1ce:	6e 25       	eor	r22, r14
     1d0:	6e 25       	eor	r22, r14
     1d2:	6e 25       	eor	r22, r14
     1d4:	6e 25       	eor	r22, r14
     1d6:	6e 25       	eor	r22, r14
     1d8:	6e 25       	eor	r22, r14
     1da:	6e 25       	eor	r22, r14
     1dc:	6e 25       	eor	r22, r14
     1de:	62 25       	eor	r22, r2
     1e0:	05 a8       	ldd	r0, Z+53	; 0x35
     1e2:	4c cd       	rjmp	.-1384   	; 0xfffffc7c <__eeprom_end+0xff7ef95b>
     1e4:	b2 d4       	rcall	.+2404   	; 0xb4a <_ZN8GoertzelD1Ev+0x6>
     1e6:	4e b9       	out	0x0e, r20	; 14
     1e8:	38 36       	cpi	r19, 0x68	; 104
     1ea:	a9 02       	muls	r26, r25
     1ec:	0c 50       	subi	r16, 0x0C	; 12
     1ee:	b9 91       	ld	r27, Y+
     1f0:	86 88       	ldd	r8, Z+22	; 0x16
     1f2:	08 3c       	cpi	r16, 0xC8	; 200
     1f4:	a6 aa       	std	Z+54, r10	; 0x36
     1f6:	aa 2a       	or	r10, r26
     1f8:	be 00       	.word	0x00be	; ????
     1fa:	00 00       	nop
     1fc:	80 3f       	cpi	r24, 0xF0	; 240

000001fe <__ctors_start>:
     1fe:	65 24       	eor	r6, r5

00000200 <__ctors_end>:
     200:	7a 24       	eor	r7, r10

00000202 <__dtors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf ef       	ldi	r28, 0xFF	; 255
     208:	d8 e0       	ldi	r29, 0x08	; 8
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	12 e0       	ldi	r17, 0x02	; 2
     210:	a0 e0       	ldi	r26, 0x00	; 0
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	e2 ea       	ldi	r30, 0xA2	; 162
     216:	f2 e6       	ldi	r31, 0x62	; 98
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x10>
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a8 3f       	cpi	r26, 0xF8	; 248
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0xc>

00000224 <__do_clear_bss>:
     224:	25 e0       	ldi	r18, 0x05	; 5
     226:	a8 ef       	ldi	r26, 0xF8	; 248
     228:	b2 e0       	ldi	r27, 0x02	; 2
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	a5 3b       	cpi	r26, 0xB5	; 181
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>

00000234 <__do_global_ctors>:
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d1 e0       	ldi	r29, 0x01	; 1
     23a:	04 c0       	rjmp	.+8      	; 0x244 <__do_global_ctors+0x10>
     23c:	21 97       	sbiw	r28, 0x01	; 1
     23e:	fe 01       	movw	r30, r28
     240:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__tablejump2__>
     244:	cf 3f       	cpi	r28, 0xFF	; 255
     246:	d1 07       	cpc	r29, r17
     248:	c9 f7       	brne	.-14     	; 0x23c <__do_global_ctors+0x8>
     24a:	0e 94 3b 23 	call	0x4676	; 0x4676 <main>
     24e:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__do_global_dtors>

00000252 <__bad_interrupt>:
     252:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000256 <month_length>:
     256:	62 30       	cpi	r22, 0x02	; 2
     258:	21 f4       	brne	.+8      	; 0x262 <month_length+0xc>
     25a:	0e 94 38 01 	call	0x270	; 0x270 <is_leap_year>
     25e:	84 5e       	subi	r24, 0xE4	; 228
     260:	08 95       	ret
     262:	68 30       	cpi	r22, 0x08	; 8
     264:	08 f0       	brcs	.+2      	; 0x268 <month_length+0x12>
     266:	6f 5f       	subi	r22, 0xFF	; 255
     268:	61 70       	andi	r22, 0x01	; 1
     26a:	8e e1       	ldi	r24, 0x1E	; 30
     26c:	86 0f       	add	r24, r22
     26e:	08 95       	ret

00000270 <is_leap_year>:
     270:	9c 01       	movw	r18, r24
     272:	23 70       	andi	r18, 0x03	; 3
     274:	33 27       	eor	r19, r19
     276:	23 2b       	or	r18, r19
     278:	59 f4       	brne	.+22     	; 0x290 <is_leap_year+0x20>
     27a:	64 e6       	ldi	r22, 0x64	; 100
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
     282:	89 2b       	or	r24, r25
     284:	39 f4       	brne	.+14     	; 0x294 <is_leap_year+0x24>
     286:	63 70       	andi	r22, 0x03	; 3
     288:	77 27       	eor	r23, r23
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	67 2b       	or	r22, r23
     28e:	19 f0       	breq	.+6      	; 0x296 <is_leap_year+0x26>
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	08 95       	ret
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	08 95       	ret

00000298 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	84 31       	cpi	r24, 0x14	; 20
     29c:	91 05       	cpc	r25, r1
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <_Z7pinModehh+0xa>
     2a0:	ca c0       	rjmp	.+404    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     2a2:	fc 01       	movw	r30, r24
     2a4:	ec 5c       	subi	r30, 0xCC	; 204
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     2ac:	61 30       	cpi	r22, 0x01	; 1
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <_Z7pinModehh+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     2b0:	50 9a       	sbi	0x0a, 0	; 10
     2b2:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     2b4:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     2b6:	63 30       	cpi	r22, 0x03	; 3
     2b8:	11 f4       	brne	.+4      	; 0x2be <_Z7pinModehh+0x26>
				{
					PORTD  |= (1 << PORTD0);
     2ba:	58 9a       	sbi	0x0b, 0	; 11
     2bc:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     2be:	58 98       	cbi	0x0b, 0	; 11
     2c0:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     2c2:	61 30       	cpi	r22, 0x01	; 1
     2c4:	11 f4       	brne	.+4      	; 0x2ca <_Z7pinModehh+0x32>
			{
				DDRD  |= (1 << PORTD1);
     2c6:	51 9a       	sbi	0x0a, 1	; 10
     2c8:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     2ca:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     2cc:	63 30       	cpi	r22, 0x03	; 3
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <_Z7pinModehh+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     2d0:	59 9a       	sbi	0x0b, 1	; 11
     2d2:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     2d4:	59 98       	cbi	0x0b, 1	; 11
     2d6:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     2d8:	61 30       	cpi	r22, 0x01	; 1
     2da:	11 f4       	brne	.+4      	; 0x2e0 <_Z7pinModehh+0x48>
			{
				DDRD  |= (1 << PORTD2);
     2dc:	52 9a       	sbi	0x0a, 2	; 10
     2de:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2e0:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2e2:	63 30       	cpi	r22, 0x03	; 3
     2e4:	11 f4       	brne	.+4      	; 0x2ea <_Z7pinModehh+0x52>
				{
					PORTD  |= (1 << PORTD2);
     2e6:	5a 9a       	sbi	0x0b, 2	; 11
     2e8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2ea:	5a 98       	cbi	0x0b, 2	; 11
     2ec:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2ee:	61 30       	cpi	r22, 0x01	; 1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <_Z7pinModehh+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     2f2:	53 9a       	sbi	0x0a, 3	; 10
     2f4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2f6:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2f8:	63 30       	cpi	r22, 0x03	; 3
     2fa:	11 f4       	brne	.+4      	; 0x300 <_Z7pinModehh+0x68>
				{
					PORTD  |= (1 << PORTD3);
     2fc:	5b 9a       	sbi	0x0b, 3	; 11
     2fe:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     300:	5b 98       	cbi	0x0b, 3	; 11
     302:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     304:	61 30       	cpi	r22, 0x01	; 1
     306:	11 f4       	brne	.+4      	; 0x30c <_Z7pinModehh+0x74>
			{
				DDRD  |= (1 << PORTD4);
     308:	54 9a       	sbi	0x0a, 4	; 10
     30a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     30c:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     30e:	63 30       	cpi	r22, 0x03	; 3
     310:	11 f4       	brne	.+4      	; 0x316 <_Z7pinModehh+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     312:	5c 9a       	sbi	0x0b, 4	; 11
     314:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     316:	5c 98       	cbi	0x0b, 4	; 11
     318:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     31a:	61 30       	cpi	r22, 0x01	; 1
     31c:	11 f4       	brne	.+4      	; 0x322 <_Z7pinModehh+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     31e:	55 9a       	sbi	0x0a, 5	; 10
     320:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     322:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     324:	63 30       	cpi	r22, 0x03	; 3
     326:	11 f4       	brne	.+4      	; 0x32c <_Z7pinModehh+0x94>
				{
					PORTD  |= (1 << PORTD5);
     328:	5d 9a       	sbi	0x0b, 5	; 11
     32a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     32c:	5d 98       	cbi	0x0b, 5	; 11
     32e:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     330:	61 30       	cpi	r22, 0x01	; 1
     332:	11 f4       	brne	.+4      	; 0x338 <_Z7pinModehh+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     334:	56 9a       	sbi	0x0a, 6	; 10
     336:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     338:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     33a:	63 30       	cpi	r22, 0x03	; 3
     33c:	11 f4       	brne	.+4      	; 0x342 <_Z7pinModehh+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     33e:	5e 9a       	sbi	0x0b, 6	; 11
     340:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     342:	5e 98       	cbi	0x0b, 6	; 11
     344:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     346:	61 30       	cpi	r22, 0x01	; 1
     348:	11 f4       	brne	.+4      	; 0x34e <_Z7pinModehh+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     34a:	57 9a       	sbi	0x0a, 7	; 10
     34c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     34e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     350:	63 30       	cpi	r22, 0x03	; 3
     352:	11 f4       	brne	.+4      	; 0x358 <_Z7pinModehh+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     354:	5f 9a       	sbi	0x0b, 7	; 11
     356:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     358:	5f 98       	cbi	0x0b, 7	; 11
     35a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     35c:	61 30       	cpi	r22, 0x01	; 1
     35e:	11 f4       	brne	.+4      	; 0x364 <_Z7pinModehh+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     360:	20 9a       	sbi	0x04, 0	; 4
     362:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     364:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     366:	63 30       	cpi	r22, 0x03	; 3
     368:	11 f4       	brne	.+4      	; 0x36e <_Z7pinModehh+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     36a:	28 9a       	sbi	0x05, 0	; 5
     36c:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     36e:	28 98       	cbi	0x05, 0	; 5
     370:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     372:	61 30       	cpi	r22, 0x01	; 1
     374:	11 f4       	brne	.+4      	; 0x37a <_Z7pinModehh+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     376:	21 9a       	sbi	0x04, 1	; 4
     378:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     37a:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     37c:	63 30       	cpi	r22, 0x03	; 3
     37e:	11 f4       	brne	.+4      	; 0x384 <_Z7pinModehh+0xec>
				{
					PORTB  |= (1 << PORTB1);
     380:	29 9a       	sbi	0x05, 1	; 5
     382:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     384:	29 98       	cbi	0x05, 1	; 5
     386:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     388:	61 30       	cpi	r22, 0x01	; 1
     38a:	11 f4       	brne	.+4      	; 0x390 <_Z7pinModehh+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     38c:	22 9a       	sbi	0x04, 2	; 4
     38e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     390:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     392:	63 30       	cpi	r22, 0x03	; 3
     394:	11 f4       	brne	.+4      	; 0x39a <_Z7pinModehh+0x102>
				{
					PORTB  |= (1 << PORTB2);
     396:	2a 9a       	sbi	0x05, 2	; 5
     398:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     39a:	2a 98       	cbi	0x05, 2	; 5
     39c:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     39e:	61 30       	cpi	r22, 0x01	; 1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <_Z7pinModehh+0x10e>
			{
				DDRB  |= (1 << PORTB5);
     3a2:	25 9a       	sbi	0x04, 5	; 4
     3a4:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3a6:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3a8:	63 30       	cpi	r22, 0x03	; 3
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <_Z7pinModehh+0x118>
				{
					PORTD  |= (1 << PORTB5);
     3ac:	5d 9a       	sbi	0x0b, 5	; 11
     3ae:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3b0:	5d 98       	cbi	0x0b, 5	; 11
     3b2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3b4:	61 30       	cpi	r22, 0x01	; 1
     3b6:	11 f4       	brne	.+4      	; 0x3bc <_Z7pinModehh+0x124>
			{
				DDRC  |= (1 << PORTC0);
     3b8:	38 9a       	sbi	0x07, 0	; 7
     3ba:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3bc:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3be:	63 30       	cpi	r22, 0x03	; 3
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <_Z7pinModehh+0x12e>
				{
					PORTC  |= (1 << PORTC0);
     3c2:	40 9a       	sbi	0x08, 0	; 8
     3c4:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3c6:	40 98       	cbi	0x08, 0	; 8
     3c8:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x13a>
			{
				DDRC  |= (1 << PORTC1);
     3ce:	39 9a       	sbi	0x07, 1	; 7
     3d0:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3d2:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModehh+0x144>
				{
					PORTC  |= (1 << PORTC1);
     3d8:	41 9a       	sbi	0x08, 1	; 8
     3da:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     3dc:	41 98       	cbi	0x08, 1	; 8
     3de:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     3e0:	61 30       	cpi	r22, 0x01	; 1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <_Z7pinModehh+0x150>
			{
				DDRC  |= (1 << PORTC2);
     3e4:	3a 9a       	sbi	0x07, 2	; 7
     3e6:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3e8:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     3ea:	63 30       	cpi	r22, 0x03	; 3
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <_Z7pinModehh+0x15a>
				{
					PORTC  |= (1 << PORTC2);
     3ee:	42 9a       	sbi	0x08, 2	; 8
     3f0:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     3f2:	42 98       	cbi	0x08, 2	; 8
     3f4:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     3f6:	61 30       	cpi	r22, 0x01	; 1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <_Z7pinModehh+0x166>
			{
				DDRC  |= (1 << PORTC3);
     3fa:	3b 9a       	sbi	0x07, 3	; 7
     3fc:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3fe:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     400:	63 30       	cpi	r22, 0x03	; 3
     402:	11 f4       	brne	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				{
					PORTC  |= (1 << PORTC3);
     404:	43 9a       	sbi	0x08, 3	; 8
     406:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     408:	43 98       	cbi	0x08, 3	; 8
     40a:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     40c:	61 30       	cpi	r22, 0x01	; 1
     40e:	11 f4       	brne	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				DDRC  |= (1 << PORTC4);
     410:	3c 9a       	sbi	0x07, 4	; 7
     412:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     414:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     416:	63 30       	cpi	r22, 0x03	; 3
     418:	11 f4       	brne	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				{
					PORTC  |= (1 << PORTC4);
     41a:	44 9a       	sbi	0x08, 4	; 8
     41c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     41e:	44 98       	cbi	0x08, 4	; 8
     420:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     422:	61 30       	cpi	r22, 0x01	; 1
     424:	11 f4       	brne	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				DDRC  |= (1 << PORTC5);
     426:	3d 9a       	sbi	0x07, 5	; 7
     428:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     42a:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     42c:	63 30       	cpi	r22, 0x03	; 3
     42e:	11 f4       	brne	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				{
					PORTC  |= (1 << PORTC5);
     430:	45 9a       	sbi	0x08, 5	; 8
     432:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     434:	45 98       	cbi	0x08, 5	; 8
     436:	08 95       	ret

00000438 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	32 97       	sbiw	r30, 0x02	; 2
     43e:	e0 31       	cpi	r30, 0x10	; 16
     440:	f1 05       	cpc	r31, r1
     442:	f0 f5       	brcc	.+124    	; 0x4c0 <_Z11digitalReadh+0x88>
     444:	e8 5b       	subi	r30, 0xB8	; 184
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     44c:	29 b1       	in	r18, 0x09	; 9
     44e:	24 70       	andi	r18, 0x04	; 4
     450:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     452:	38 c0       	rjmp	.+112    	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     454:	29 b1       	in	r18, 0x09	; 9
     456:	28 70       	andi	r18, 0x08	; 8
     458:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     45a:	34 c0       	rjmp	.+104    	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     45c:	29 b1       	in	r18, 0x09	; 9
     45e:	20 71       	andi	r18, 0x10	; 16
     460:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     462:	30 c0       	rjmp	.+96     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     464:	29 b1       	in	r18, 0x09	; 9
     466:	20 72       	andi	r18, 0x20	; 32
     468:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     46a:	2c c0       	rjmp	.+88     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     46c:	29 b1       	in	r18, 0x09	; 9
     46e:	20 74       	andi	r18, 0x40	; 64
     470:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     472:	28 c0       	rjmp	.+80     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     474:	29 b1       	in	r18, 0x09	; 9
     476:	20 78       	andi	r18, 0x80	; 128
     478:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47a:	24 c0       	rjmp	.+72     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     47c:	83 b1       	in	r24, 0x03	; 3
     47e:	28 2f       	mov	r18, r24
     480:	21 70       	andi	r18, 0x01	; 1
     482:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     484:	1f c0       	rjmp	.+62     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     486:	23 b1       	in	r18, 0x03	; 3
     488:	22 70       	andi	r18, 0x02	; 2
     48a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48c:	1b c0       	rjmp	.+54     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     48e:	23 b1       	in	r18, 0x03	; 3
     490:	24 70       	andi	r18, 0x04	; 4
     492:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     494:	17 c0       	rjmp	.+46     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     496:	23 b1       	in	r18, 0x03	; 3
     498:	20 72       	andi	r18, 0x20	; 32
     49a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49c:	13 c0       	rjmp	.+38     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     49e:	86 b1       	in	r24, 0x06	; 6
     4a0:	28 2f       	mov	r18, r24
     4a2:	21 70       	andi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4a8:	26 b1       	in	r18, 0x06	; 6
     4aa:	22 70       	andi	r18, 0x02	; 2
     4ac:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ae:	0a c0       	rjmp	.+20     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4b0:	26 b1       	in	r18, 0x06	; 6
     4b2:	24 70       	andi	r18, 0x04	; 4
     4b4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4b8:	26 b1       	in	r18, 0x06	; 6
     4ba:	28 70       	andi	r18, 0x08	; 8
     4bc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	23 2b       	or	r18, r19
     4c8:	09 f4       	brne	.+2      	; 0x4cc <_Z11digitalReadh+0x94>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
}
     4cc:	08 95       	ret

000004ce <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	82 31       	cpi	r24, 0x12	; 18
     4d2:	91 05       	cpc	r25, r1
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <_Z12digitalWritehh+0xa>
     4d6:	64 c0       	rjmp	.+200    	; 0x5a0 <_Z12digitalWritehh+0xd2>
     4d8:	fc 01       	movw	r30, r24
     4da:	e8 5a       	subi	r30, 0xA8	; 168
     4dc:	ff 4f       	sbci	r31, 0xFF	; 255
     4de:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     4e2:	66 23       	and	r22, r22
     4e4:	11 f0       	breq	.+4      	; 0x4ea <_Z12digitalWritehh+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     4e6:	58 9a       	sbi	0x0b, 0	; 11
     4e8:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     4ea:	58 98       	cbi	0x0b, 0	; 11
     4ec:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     4ee:	66 23       	and	r22, r22
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <_Z12digitalWritehh+0x28>
			{
				PORTD  |= (1 << PORTD1);
     4f2:	59 9a       	sbi	0x0b, 1	; 11
     4f4:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     4f6:	59 98       	cbi	0x0b, 1	; 11
     4f8:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     4fa:	66 23       	and	r22, r22
     4fc:	11 f0       	breq	.+4      	; 0x502 <_Z12digitalWritehh+0x34>
			{
				PORTD  |= (1 << PORTD2);
     4fe:	5a 9a       	sbi	0x0b, 2	; 11
     500:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     502:	5a 98       	cbi	0x0b, 2	; 11
     504:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     506:	66 23       	and	r22, r22
     508:	11 f0       	breq	.+4      	; 0x50e <_Z12digitalWritehh+0x40>
			{
				PORTD  |= (1 << PORTD3);
     50a:	5b 9a       	sbi	0x0b, 3	; 11
     50c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     50e:	5b 98       	cbi	0x0b, 3	; 11
     510:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     512:	66 23       	and	r22, r22
     514:	11 f0       	breq	.+4      	; 0x51a <_Z12digitalWritehh+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     516:	5c 9a       	sbi	0x0b, 4	; 11
     518:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     51a:	5c 98       	cbi	0x0b, 4	; 11
     51c:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     51e:	66 23       	and	r22, r22
     520:	11 f0       	breq	.+4      	; 0x526 <_Z12digitalWritehh+0x58>
			{
				PORTD  |= (1 << PORTD5);
     522:	5d 9a       	sbi	0x0b, 5	; 11
     524:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     526:	5d 98       	cbi	0x0b, 5	; 11
     528:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     52a:	66 23       	and	r22, r22
     52c:	11 f0       	breq	.+4      	; 0x532 <_Z12digitalWritehh+0x64>
			{
				PORTD  |= (1 << PORTD6);
     52e:	5e 9a       	sbi	0x0b, 6	; 11
     530:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     532:	5e 98       	cbi	0x0b, 6	; 11
     534:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     536:	66 23       	and	r22, r22
     538:	11 f0       	breq	.+4      	; 0x53e <_Z12digitalWritehh+0x70>
			{
				PORTD  |= (1 << PORTD7);
     53a:	5f 9a       	sbi	0x0b, 7	; 11
     53c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     53e:	5f 98       	cbi	0x0b, 7	; 11
     540:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     542:	66 23       	and	r22, r22
     544:	11 f0       	breq	.+4      	; 0x54a <_Z12digitalWritehh+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     546:	28 9a       	sbi	0x05, 0	; 5
     548:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     54a:	28 98       	cbi	0x05, 0	; 5
     54c:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     54e:	66 23       	and	r22, r22
     550:	11 f0       	breq	.+4      	; 0x556 <_Z12digitalWritehh+0x88>
			{
				PORTB  |= (1 << PORTB1);
     552:	29 9a       	sbi	0x05, 1	; 5
     554:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     556:	29 98       	cbi	0x05, 1	; 5
     558:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     55a:	66 23       	and	r22, r22
     55c:	11 f0       	breq	.+4      	; 0x562 <_Z12digitalWritehh+0x94>
			{
				PORTB  |= (1 << PORTB2);
     55e:	2a 9a       	sbi	0x05, 2	; 5
     560:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     562:	2a 98       	cbi	0x05, 2	; 5
     564:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     566:	66 23       	and	r22, r22
     568:	11 f0       	breq	.+4      	; 0x56e <_Z12digitalWritehh+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     56a:	2d 9a       	sbi	0x05, 5	; 5
     56c:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     56e:	2d 98       	cbi	0x05, 5	; 5
     570:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     572:	66 23       	and	r22, r22
     574:	11 f0       	breq	.+4      	; 0x57a <_Z12digitalWritehh+0xac>
			{
				PORTC  |= (1 << PORTC0);
     576:	40 9a       	sbi	0x08, 0	; 8
     578:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     57a:	40 98       	cbi	0x08, 0	; 8
     57c:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     57e:	66 23       	and	r22, r22
     580:	11 f0       	breq	.+4      	; 0x586 <_Z12digitalWritehh+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     582:	41 9a       	sbi	0x08, 1	; 8
     584:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     586:	41 98       	cbi	0x08, 1	; 8
     588:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     58a:	66 23       	and	r22, r22
     58c:	11 f0       	breq	.+4      	; 0x592 <_Z12digitalWritehh+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     58e:	42 9a       	sbi	0x08, 2	; 8
     590:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     592:	42 98       	cbi	0x08, 2	; 8
     594:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     596:	66 23       	and	r22, r22
     598:	11 f0       	breq	.+4      	; 0x59e <_Z12digitalWritehh+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     59a:	43 9a       	sbi	0x08, 3	; 8
     59c:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     59e:	43 98       	cbi	0x08, 3	; 8
     5a0:	08 95       	ret

000005a2 <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     5a2:	08 95       	ret

000005a4 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     5a4:	08 95       	ret

000005a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5ae:	41 15       	cp	r20, r1
     5b0:	51 05       	cpc	r21, r1
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5b4:	72 c0       	rjmp	.+228    	; 0x69a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
	{
		return;
	}

	switch(v)
     5b6:	86 2f       	mov	r24, r22
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	fc 01       	movw	r30, r24
     5bc:	3b 97       	sbiw	r30, 0x0b	; 11
     5be:	ed 30       	cpi	r30, 0x0D	; 13
     5c0:	f1 05       	cpc	r31, r1
     5c2:	08 f0       	brcs	.+2      	; 0x5c6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5c4:	6a c0       	rjmp	.+212    	; 0x69a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
     5c6:	da 01       	movw	r26, r20
     5c8:	e6 59       	subi	r30, 0x96	; 150
     5ca:	ff 4f       	sbci	r31, 0xFF	; 255
     5cc:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5d0:	8a e1       	ldi	r24, 0x1A	; 26
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	5c c0       	rjmp	.+184    	; 0x68e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe8>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     5d6:	84 e1       	ldi	r24, 0x14	; 20
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	52 c0       	rjmp	.+164    	; 0x680 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xda>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     5dc:	80 e1       	ldi	r24, 0x10	; 16
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	46 c0       	rjmp	.+140    	; 0x66e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xc8>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     5e2:	8a 01       	movw	r16, r20
     5e4:	0f 5f       	subi	r16, 0xFF	; 255
     5e6:	1f 4f       	sbci	r17, 0xFF	; 255
     5e8:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     5ea:	66 23       	and	r22, r22
     5ec:	71 f0       	breq	.+28     	; 0x60a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     5ee:	c0 e0       	ldi	r28, 0x00	; 0
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     5f2:	21 96       	adiw	r28, 0x01	; 1
     5f4:	ce 01       	movw	r24, r28
     5f6:	88 5a       	subi	r24, 0xA8	; 168
     5f8:	9d 4f       	sbci	r25, 0xFD	; 253
     5fa:	0e 94 be 30 	call	0x617c	; 0x617c <eeprom_update_byte>
				c = *char_addr++;
     5fe:	f8 01       	movw	r30, r16
     600:	61 91       	ld	r22, Z+
     602:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     604:	61 11       	cpse	r22, r1
     606:	f5 cf       	rjmp	.-22     	; 0x5f2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     608:	02 c0       	rjmp	.+4      	; 0x60e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     60a:	c0 e0       	ldi	r28, 0x00	; 0
     60c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	ce 01       	movw	r24, r28
     612:	87 5a       	subi	r24, 0xA7	; 167
     614:	9d 4f       	sbci	r25, 0xFD	; 253
     616:	0e 94 be 30 	call	0x617c	; 0x617c <eeprom_update_byte>
		}
		break;
     61a:	3f c0       	rjmp	.+126    	; 0x69a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     61c:	8a 01       	movw	r16, r20
     61e:	0f 5f       	subi	r16, 0xFF	; 255
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     624:	66 23       	and	r22, r22
     626:	91 f0       	breq	.+36     	; 0x64c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     628:	c0 e0       	ldi	r28, 0x00	; 0
     62a:	d0 e0       	ldi	r29, 0x00	; 0
     62c:	03 c0       	rjmp	.+6      	; 0x634 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     62e:	c8 30       	cpi	r28, 0x08	; 8
     630:	d1 05       	cpc	r29, r1
     632:	71 f0       	breq	.+28     	; 0x650 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     634:	21 96       	adiw	r28, 0x01	; 1
     636:	ce 01       	movw	r24, r28
     638:	8b 5f       	subi	r24, 0xFB	; 251
     63a:	9c 4f       	sbci	r25, 0xFC	; 252
     63c:	0e 94 be 30 	call	0x617c	; 0x617c <eeprom_update_byte>
				c = *uint8_addr++;
     640:	f8 01       	movw	r30, r16
     642:	61 91       	ld	r22, Z+
     644:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     646:	61 11       	cpse	r22, r1
     648:	f2 cf       	rjmp	.-28     	; 0x62e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     64a:	02 c0       	rjmp	.+4      	; 0x650 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     64c:	c0 e0       	ldi	r28, 0x00	; 0
     64e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	ce 01       	movw	r24, r28
     654:	8a 5f       	subi	r24, 0xFA	; 250
     656:	9c 4f       	sbci	r25, 0xFC	; 252
     658:	0e 94 be 30 	call	0x617c	; 0x617c <eeprom_update_byte>
		}
		break;
     65c:	1e c0       	rjmp	.+60     	; 0x69a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     65e:	8e e1       	ldi	r24, 0x1E	; 30
     660:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     662:	05 c0       	rjmp	.+10     	; 0x66e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xc8>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     664:	8f e0       	ldi	r24, 0x0F	; 15
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	02 c0       	rjmp	.+4      	; 0x66e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xc8>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     66a:	81 e1       	ldi	r24, 0x11	; 17
     66c:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     66e:	6c 91       	ld	r22, X
     670:	0e 94 be 30 	call	0x617c	; 0x617c <eeprom_update_byte>
     674:	12 c0       	rjmp	.+36     	; 0x69a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     676:	82 e1       	ldi	r24, 0x12	; 18
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	02 c0       	rjmp	.+4      	; 0x680 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xda>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     67c:	8f e1       	ldi	r24, 0x1F	; 31
     67e:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     680:	6d 91       	ld	r22, X+
     682:	7c 91       	ld	r23, X
     684:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <eeprom_update_word>
     688:	08 c0       	rjmp	.+16     	; 0x69a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xf4>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     68a:	86 e1       	ldi	r24, 0x16	; 22
     68c:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     68e:	4d 91       	ld	r20, X+
     690:	5d 91       	ld	r21, X+
     692:	6d 91       	ld	r22, X+
     694:	7c 91       	ld	r23, X
     696:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <eeprom_update_dword>
	}
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6b0:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z10lb_enabledv>
     6b4:	88 23       	and	r24, r24
     6b6:	09 f4       	brne	.+2      	; 0x6ba <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6b8:	46 c0       	rjmp	.+140    	; 0x746 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6ba:	8c 2f       	mov	r24, r28
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	8b 30       	cpi	r24, 0x0B	; 11
     6c0:	91 05       	cpc	r25, r1
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6c4:	40 c0       	rjmp	.+128    	; 0x746 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6c6:	fc 01       	movw	r30, r24
     6c8:	e9 58       	subi	r30, 0x89	; 137
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     6d0:	8a e2       	ldi	r24, 0x2A	; 42
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	30 c0       	rjmp	.+96     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     6d6:	8d e7       	ldi	r24, 0x7D	; 125
     6d8:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6da:	2d c0       	rjmp	.+90     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     6dc:	83 ea       	ldi	r24, 0xA3	; 163
     6de:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6e0:	2a c0       	rjmp	.+84     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     6e2:	8a ec       	ldi	r24, 0xCA	; 202
     6e4:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6e6:	27 c0       	rjmp	.+78     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     6e8:	8b ee       	ldi	r24, 0xEB	; 235
     6ea:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     6ec:	24 c0       	rjmp	.+72     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6f2:	21 c0       	rjmp	.+66     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     6f4:	8c e1       	ldi	r24, 0x1C	; 28
     6f6:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6f8:	1e c0       	rjmp	.+60     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     6fa:	81 e3       	ldi	r24, 0x31	; 49
     6fc:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6fe:	1b c0       	rjmp	.+54     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     700:	85 e4       	ldi	r24, 0x45	; 69
     702:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     704:	18 c0       	rjmp	.+48     	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     706:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     708:	cc 23       	and	r28, r28
     70a:	e9 f0       	breq	.+58     	; 0x746 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     70c:	8c 2f       	mov	r24, r28
     70e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     712:	78 01       	movw	r14, r16
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	e8 1a       	sub	r14, r24
     718:	f8 0a       	sbc	r15, r24
     71a:	c8 01       	movw	r24, r16
     71c:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     720:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     722:	0e 94 4d 09 	call	0x129a	; 0x129a <_Z19linkbusTxInProgressv>
     726:	81 11       	cpse	r24, r1
     728:	fc cf       	rjmp	.-8      	; 0x722 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     72a:	ed cf       	rjmp	.-38     	; 0x706 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	02 c0       	rjmp	.+4      	; 0x736 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     732:	85 e5       	ldi	r24, 0x55	; 85
     734:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     736:	8c 01       	movw	r16, r24
     738:	0f 5f       	subi	r16, 0xFF	; 255
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     740:	c8 2f       	mov	r28, r24

		while(c)
     742:	81 11       	cpse	r24, r1
     744:	e3 cf       	rjmp	.-58     	; 0x70c <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     75e:	8f e1       	ldi	r24, 0x1F	; 31
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	0e 94 b8 30 	call	0x6170	; 0x6170 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     766:	8b 3b       	cpi	r24, 0xBB	; 187
     768:	91 05       	cpc	r25, r1
     76a:	09 f0       	breq	.+2      	; 0x76e <_ZN13EepromManager11readNonVolsEv+0x1c>
     76c:	b0 c0       	rjmp	.+352    	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     76e:	8f e0       	ldi	r24, 0x0F	; 15
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	85 30       	cpi	r24, 0x05	; 5
     77a:	91 05       	cpc	r25, r1
     77c:	14 f4       	brge	.+4      	; 0x782 <_ZN13EepromManager11readNonVolsEv+0x30>
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	85 31       	cpi	r24, 0x15	; 21
     784:	91 05       	cpc	r25, r1
     786:	14 f0       	brlt	.+4      	; 0x78c <_ZN13EepromManager11readNonVolsEv+0x3a>
     788:	84 e1       	ldi	r24, 0x14	; 20
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     790:	80 e1       	ldi	r24, 0x10	; 16
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     798:	82 31       	cpi	r24, 0x12	; 18
     79a:	08 f0       	brcs	.+2      	; 0x79e <_ZN13EepromManager11readNonVolsEv+0x4c>
     79c:	81 e1       	ldi	r24, 0x11	; 17
     79e:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7a2:	81 e1       	ldi	r24, 0x11	; 17
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     7aa:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7ae:	82 e1       	ldi	r24, 0x12	; 18
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	0e 94 b8 30 	call	0x6170	; 0x6170 <eeprom_read_word>
     7b6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_atmega_temp_calibration+0x1>
     7ba:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7be:	84 e1       	ldi	r24, 0x14	; 20
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0e 94 b8 30 	call	0x6170	; 0x6170 <eeprom_read_word>
     7c6:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <g_rv3028_offset+0x1>
     7ca:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     7ce:	86 e1       	ldi	r24, 0x16	; 22
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	0e 94 b2 30 	call	0x6164	; 0x6164 <eeprom_read_dword>
     7d6:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <g_event_start_epoch>
     7da:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <g_event_start_epoch+0x1>
     7de:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_event_start_epoch+0x2>
     7e2:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     7e6:	8a e1       	ldi	r24, 0x1A	; 26
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	0e 94 b2 30 	call	0x6164	; 0x6164 <eeprom_read_dword>
     7ee:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_event_finish_epoch>
     7f2:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_event_finish_epoch+0x1>
     7f6:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_event_finish_epoch+0x2>
     7fa:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     7fe:	8e e1       	ldi	r24, 0x1E	; 30
     800:	93 e0       	ldi	r25, 0x03	; 3
     802:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     806:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <g_utc_offset>
     80a:	09 e5       	ldi	r16, 0x59	; 89
     80c:	12 e0       	ldi	r17, 0x02	; 2
     80e:	c1 e3       	ldi	r28, 0x31	; 49
     810:	d5 e0       	ldi	r29, 0x05	; 5
     812:	0f 2e       	mov	r0, r31
     814:	f5 e4       	ldi	r31, 0x45	; 69
     816:	ef 2e       	mov	r14, r31
     818:	f5 e0       	ldi	r31, 0x05	; 5
     81a:	ff 2e       	mov	r15, r31
     81c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     81e:	c8 01       	movw	r24, r16
     820:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     824:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     826:	81 11       	cpse	r24, r1
     828:	0b c0       	rjmp	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     82a:	06 e0       	ldi	r16, 0x06	; 6
     82c:	13 e0       	ldi	r17, 0x03	; 3
     82e:	cb e4       	ldi	r28, 0x4B	; 75
     830:	d5 e0       	ldi	r29, 0x05	; 5
     832:	0f 2e       	mov	r0, r31
     834:	f3 e5       	ldi	r31, 0x53	; 83
     836:	ef 2e       	mov	r14, r31
     838:	f5 e0       	ldi	r31, 0x05	; 5
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	06 c0       	rjmp	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     840:	0f 5f       	subi	r16, 0xFF	; 255
     842:	1f 4f       	sbci	r17, 0xFF	; 255
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     844:	ce 15       	cp	r28, r14
     846:	df 05       	cpc	r29, r15
     848:	51 f7       	brne	.-44     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     84a:	ef cf       	rjmp	.-34     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     852:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     854:	88 23       	and	r24, r24
     856:	29 f0       	breq	.+10     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     858:	0f 5f       	subi	r16, 0xFF	; 255
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     85c:	ce 15       	cp	r28, r14
     85e:	df 05       	cpc	r29, r15
     860:	a9 f7       	brne	.-22     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     862:	06 ee       	ldi	r16, 0xE6	; 230
     864:	12 e0       	ldi	r17, 0x02	; 2
     866:	c7 e6       	ldi	r28, 0x67	; 103
     868:	d5 e0       	ldi	r29, 0x05	; 5
     86a:	0f 2e       	mov	r0, r31
     86c:	f7 e8       	ldi	r31, 0x87	; 135
     86e:	ef 2e       	mov	r14, r31
     870:	f5 e0       	ldi	r31, 0x05	; 5
     872:	ff 2e       	mov	r15, r31
     874:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     876:	c8 01       	movw	r24, r16
     878:	0e 94 aa 30 	call	0x6154	; 0x6154 <eeprom_read_byte>
     87c:	89 93       	st	Y+, r24
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     882:	ce 15       	cp	r28, r14
     884:	df 05       	cpc	r29, r15
     886:	b9 f7       	brne	.-18     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     888:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
     88c:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
     890:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
     894:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
     898:	89 2b       	or	r24, r25
     89a:	8a 2b       	or	r24, r26
     89c:	8b 2b       	or	r24, r27
     89e:	c9 f0       	breq	.+50     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     8a0:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch>
     8a4:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
     8a8:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
     8ac:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
     8b0:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
     8b4:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
     8b8:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
     8bc:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
     8c0:	84 17       	cp	r24, r20
     8c2:	95 07       	cpc	r25, r21
     8c4:	a6 07       	cpc	r26, r22
     8c6:	b7 07       	cpc	r27, r23
     8c8:	30 f4       	brcc	.+12     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	19 c0       	rjmp	.+50     	; 0x900 <__stack+0x1>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	17 c0       	rjmp	.+46     	; 0x900 <__stack+0x1>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	15 c0       	rjmp	.+42     	; 0x900 <__stack+0x1>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     8d6:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
     8da:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
     8de:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
     8e2:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
     8e6:	80 58       	subi	r24, 0x80	; 128
     8e8:	9e 4a       	sbci	r25, 0xAE	; 174
     8ea:	ae 4f       	sbci	r26, 0xFE	; 254
     8ec:	bf 4f       	sbci	r27, 0xFF	; 255
     8ee:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_event_finish_epoch>
     8f2:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_event_finish_epoch+0x1>
     8f6:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <g_event_finish_epoch+0x2>
     8fa:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	0f e1       	ldi	r16, 0x1F	; 31
     91c:	11 e0       	ldi	r17, 0x01	; 1
     91e:	cb e4       	ldi	r28, 0x4B	; 75
     920:	d5 e0       	ldi	r29, 0x05	; 5
     922:	0f 2e       	mov	r0, r31
     924:	ff e4       	ldi	r31, 0x4F	; 79
     926:	ef 2e       	mov	r14, r31
     928:	f5 e0       	ldi	r31, 0x05	; 5
     92a:	ff 2e       	mov	r15, r31
     92c:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     92e:	f8 01       	movw	r30, r16
     930:	61 91       	ld	r22, Z+
     932:	8f 01       	movw	r16, r30
     934:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     936:	ce 01       	movw	r24, r28
     938:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <eeprom_write_byte>
     93c:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     93e:	ce 15       	cp	r28, r14
     940:	df 05       	cpc	r29, r15
     942:	a9 f7       	brne	.-22     	; 0x92e <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	8a e0       	ldi	r24, 0x0A	; 10
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     94e:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_unlockCode+0x4>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     952:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), g_AM_audio_frequency);
     956:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <g_AM_audio_frequency>
     95a:	81 e1       	ldi	r24, 0x11	; 17
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     962:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_event_start_epoch>
     966:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <g_event_start_epoch+0x1>
     96a:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <g_event_start_epoch+0x2>
     96e:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     972:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
     976:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
     97a:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
     97e:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
     982:	86 e1       	ldi	r24, 0x16	; 22
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     98a:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <g_event_finish_epoch>
     98e:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <g_event_finish_epoch+0x1>
     992:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <g_event_finish_epoch+0x2>
     996:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     99a:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch>
     99e:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
     9a2:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
     9a6:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
     9aa:	8a e1       	ldi	r24, 0x1A	; 26
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <eeprom_write_dword>
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	08 95       	ret

000009c0 <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     9c6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	ce 01       	movw	r24, r28
     9d6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     9da:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     9de:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_Z15lb_send_NewLinev>
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     9e8:	cb 01       	movw	r24, r22
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	82 59       	subi	r24, 0x92	; 146
     9f0:	9d 4f       	sbci	r25, 0xFD	; 253
     9f2:	0e 94 b8 30 	call	0x6170	; 0x6170 <eeprom_read_word>
}
     9f6:	08 95       	ret

000009f8 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     9f8:	9c 01       	movw	r18, r24
     9fa:	2e 5f       	subi	r18, 0xFE	; 254
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	2b 33       	cpi	r18, 0x3B	; 59
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	38 07       	cpc	r19, r24
     a04:	10 f0       	brcs	.+4      	; 0xa0a <_Z8setAttenj+0x12>
     a06:	2b e3       	ldi	r18, 0x3B	; 59
     a08:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     a0a:	ad ec       	ldi	r26, 0xCD	; 205
     a0c:	bc ec       	ldi	r27, 0xCC	; 204
     a0e:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>
     a12:	96 95       	lsr	r25
     a14:	87 95       	ror	r24
     a16:	96 95       	lsr	r25
     a18:	87 95       	ror	r24
     a1a:	9c 01       	movw	r18, r24
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	28 0f       	add	r18, r24
     a26:	39 1f       	adc	r19, r25
	att /= 5;
     a28:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>
     a2c:	96 95       	lsr	r25
     a2e:	87 95       	ror	r24
     a30:	96 95       	lsr	r25
     a32:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     a34:	9c 01       	movw	r18, r24
     a36:	20 73       	andi	r18, 0x30	; 48
     a38:	33 27       	eor	r19, r19
     a3a:	32 95       	swap	r19
     a3c:	22 95       	swap	r18
     a3e:	2f 70       	andi	r18, 0x0F	; 15
     a40:	23 27       	eor	r18, r19
     a42:	3f 70       	andi	r19, 0x0F	; 15
     a44:	23 27       	eor	r18, r19
     a46:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <__data_end>

	pattern = PORTC & 0xF0;
     a4a:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     a4c:	8f 70       	andi	r24, 0x0F	; 15
     a4e:	90 7f       	andi	r25, 0xF0	; 240
     a50:	89 2b       	or	r24, r25
     a52:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     a54:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     a56:	8c 7f       	andi	r24, 0xFC	; 252
     a58:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <__data_end>
     a5c:	89 2b       	or	r24, r25
     a5e:	8b b9       	out	0x0b, r24	; 11
     a60:	08 95       	ret

00000a62 <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     a62:	0e 94 92 09 	call	0x1324	; 0x1324 <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	8e e0       	ldi	r24, 0x0E	; 14
     a6a:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	8f e0       	ldi	r24, 0x0F	; 15
     a72:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	81 e1       	ldi	r24, 0x11	; 17
     a82:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	86 e0       	ldi	r24, 0x06	; 6
     a9a:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
     aa6:	08 95       	ret

00000aa8 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	e4 2e       	mov	r14, r20
     ab6:	f5 2e       	mov	r15, r21
     ab8:	d6 2f       	mov	r29, r22
     aba:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     abc:	00 93 10 03 	sts	0x0310, r16	; 0x800310 <_SAMPLING_FREQUENCY>
     ac0:	10 93 11 03 	sts	0x0311, r17	; 0x800311 <_SAMPLING_FREQUENCY+0x1>
     ac4:	20 93 12 03 	sts	0x0312, r18	; 0x800312 <_SAMPLING_FREQUENCY+0x2>
     ac8:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	41 e5       	ldi	r20, 0x51	; 81
     ad2:	53 e4       	ldi	r21, 0x43	; 67
     ad4:	6e 2d       	mov	r22, r14
     ad6:	7f 2d       	mov	r23, r15
     ad8:	8d 2f       	mov	r24, r29
     ada:	9c 2f       	mov	r25, r28
     adc:	0e 94 a9 2a 	call	0x5552	; 0x5552 <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	6c f0       	brlt	.+26     	; 0xafe <_ZN8GoertzelC1Eff+0x56>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	48 ec       	ldi	r20, 0xC8	; 200
     aea:	52 e4       	ldi	r21, 0x42	; 66
     aec:	6e 2d       	mov	r22, r14
     aee:	7f 2d       	mov	r23, r15
     af0:	8d 2f       	mov	r24, r29
     af2:	9c 2f       	mov	r25, r28
     af4:	0e 94 06 29 	call	0x520c	; 0x520c <__cmpsf2>
     af8:	88 23       	and	r24, r24
     afa:	34 f0       	brlt	.+12     	; 0xb08 <_ZN8GoertzelC1Eff+0x60>
     afc:	09 c0       	rjmp	.+18     	; 0xb10 <_ZN8GoertzelC1Eff+0x68>
     afe:	e1 2c       	mov	r14, r1
     b00:	f1 2c       	mov	r15, r1
     b02:	d1 e5       	ldi	r29, 0x51	; 81
     b04:	c3 e4       	ldi	r28, 0x43	; 67
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <_ZN8GoertzelC1Eff+0x68>
     b08:	e1 2c       	mov	r14, r1
     b0a:	f1 2c       	mov	r15, r1
     b0c:	d8 ec       	ldi	r29, 0xC8	; 200
     b0e:	c2 e4       	ldi	r28, 0x42	; 66
     b10:	6e 2d       	mov	r22, r14
     b12:	7f 2d       	mov	r23, r15
     b14:	8d 2f       	mov	r24, r29
     b16:	9c 2f       	mov	r25, r28
     b18:	0e 94 82 29 	call	0x5304	; 0x5304 <__fixsfsi>
     b1c:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <_N+0x1>
     b20:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <_N>
	testData = (int*)malloc(_N * sizeof(int));
     b24:	cb 01       	movw	r24, r22
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	0e 94 4b 2c 	call	0x5896	; 0x5896 <malloc>
     b2e:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <testData+0x1>
     b32:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <testData>
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     b44:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <testData>
     b48:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <testData+0x1>
     b4c:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <free>
     b50:	08 95       	ret

00000b52 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     b52:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <Q2>
     b56:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <Q2+0x1>
     b5a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <Q2+0x2>
     b5e:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <Q2+0x3>
	Q1 = 0;
     b62:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <Q1>
     b66:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <Q1+0x1>
     b6a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <Q1+0x2>
     b6e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <Q1+0x3>
	_samplesReady = false;
     b72:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_samplesReady>
     b76:	08 95       	ret

00000b78 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	ec 01       	movw	r28, r24
     b8e:	4a 01       	movw	r8, r20
     b90:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     b92:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <_N>
     b96:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <_N+0x1>
     b9a:	07 2e       	mov	r0, r23
     b9c:	00 0c       	add	r0, r0
     b9e:	88 0b       	sbc	r24, r24
     ba0:	99 0b       	sbc	r25, r25
     ba2:	0e 94 ba 29 	call	0x5374	; 0x5374 <__floatsisf>
     ba6:	6b 01       	movw	r12, r22
     ba8:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     baa:	80 92 0c 03 	sts	0x030C, r8	; 0x80030c <_TARGET_FREQUENCY>
     bae:	90 92 0d 03 	sts	0x030D, r9	; 0x80030d <_TARGET_FREQUENCY+0x1>
     bb2:	a0 92 0e 03 	sts	0x030E, r10	; 0x80030e <_TARGET_FREQUENCY+0x2>
     bb6:	b0 92 0f 03 	sts	0x030F, r11	; 0x80030f <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     bba:	a5 01       	movw	r20, r10
     bbc:	94 01       	movw	r18, r8
     bbe:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     bc2:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <_SAMPLING_FREQUENCY>
     bc6:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <_SAMPLING_FREQUENCY+0x1>
     bca:	40 91 12 03 	lds	r20, 0x0312	; 0x800312 <_SAMPLING_FREQUENCY+0x2>
     bce:	50 91 13 03 	lds	r21, 0x0313	; 0x800313 <_SAMPLING_FREQUENCY+0x3>
     bd2:	0e 94 10 29 	call	0x5220	; 0x5220 <__divsf3>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	0e 94 9a 28 	call	0x5134	; 0x5134 <__addsf3>
     be2:	0e 94 82 29 	call	0x5304	; 0x5304 <__fixsfsi>
     be6:	07 2e       	mov	r0, r23
     be8:	00 0c       	add	r0, r0
     bea:	88 0b       	sbc	r24, r24
     bec:	99 0b       	sbc	r25, r25
     bee:	0e 94 ba 29 	call	0x5374	; 0x5374 <__floatsisf>
     bf2:	2b ed       	ldi	r18, 0xDB	; 219
     bf4:	3f e0       	ldi	r19, 0x0F	; 15
     bf6:	49 ec       	ldi	r20, 0xC9	; 201
     bf8:	50 e4       	ldi	r21, 0x40	; 64
     bfa:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     bfe:	a7 01       	movw	r20, r14
     c00:	96 01       	movw	r18, r12
     c02:	0e 94 10 29 	call	0x5220	; 0x5220 <__divsf3>
     c06:	0e 94 0b 29 	call	0x5216	; 0x5216 <cos>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	0e 94 9a 28 	call	0x5134	; 0x5134 <__addsf3>
     c12:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <g_coeff>
     c16:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <g_coeff+0x1>
     c1a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <g_coeff+0x2>
     c1e:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <g_coeff+0x3>
	ResetGoertzel();
     c22:	ce 01       	movw	r24, r28
     c24:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN8Goertzel13ResetGoertzelEv>
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	08 95       	ret

00000c3e <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     c3e:	8f 92       	push	r8
     c40:	9f 92       	push	r9
     c42:	af 92       	push	r10
     c44:	bf 92       	push	r11
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     c54:	c0 90 02 03 	lds	r12, 0x0302	; 0x800302 <Q1>
     c58:	d0 90 03 03 	lds	r13, 0x0303	; 0x800303 <Q1+0x1>
     c5c:	e0 90 04 03 	lds	r14, 0x0304	; 0x800304 <Q1+0x2>
     c60:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <Q1+0x3>
     c64:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <g_coeff>
     c68:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <g_coeff+0x1>
     c6c:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <g_coeff+0x2>
     c70:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <g_coeff+0x3>
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     c7c:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <Q2>
     c80:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <Q2+0x1>
     c84:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <Q2+0x2>
     c88:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <Q2+0x3>
     c8c:	0e 94 99 28 	call	0x5132	; 0x5132 <__subsf3>
     c90:	4b 01       	movw	r8, r22
     c92:	5c 01       	movw	r10, r24
     c94:	be 01       	movw	r22, r28
     c96:	72 50       	subi	r23, 0x02	; 2
     c98:	07 2e       	mov	r0, r23
     c9a:	00 0c       	add	r0, r0
     c9c:	88 0b       	sbc	r24, r24
     c9e:	99 0b       	sbc	r25, r25
     ca0:	0e 94 ba 29 	call	0x5374	; 0x5374 <__floatsisf>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	c5 01       	movw	r24, r10
     caa:	b4 01       	movw	r22, r8
     cac:	0e 94 9a 28 	call	0x5134	; 0x5134 <__addsf3>

	Q2 = Q1;
     cb0:	c0 92 fe 02 	sts	0x02FE, r12	; 0x8002fe <Q2>
     cb4:	d0 92 ff 02 	sts	0x02FF, r13	; 0x8002ff <Q2+0x1>
     cb8:	e0 92 00 03 	sts	0x0300, r14	; 0x800300 <Q2+0x2>
     cbc:	f0 92 01 03 	sts	0x0301, r15	; 0x800301 <Q2+0x3>
	Q1 = Q0;
     cc0:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <Q1>
     cc4:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <Q1+0x1>
     cc8:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <Q1+0x2>
     ccc:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <Q1+0x3>
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	bf 90       	pop	r11
     cde:	af 90       	pop	r10
     ce0:	9f 90       	pop	r9
     ce2:	8f 90       	pop	r8
     ce4:	08 95       	ret

00000ce6 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     ce6:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_samplesReady>
     cea:	81 11       	cpse	r24, r1
     cec:	27 c0       	rjmp	.+78     	; 0xd3c <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     cee:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_index>
     cf2:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_index+0x1>
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <testData>
     cfe:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <testData+0x1>
     d02:	e8 0f       	add	r30, r24
     d04:	f9 1f       	adc	r31, r25
     d06:	71 83       	std	Z+1, r23	; 0x01
     d08:	60 83       	st	Z, r22
	_index++;
     d0a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_index>
     d0e:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <_index+0x1>
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <_index+0x1>
     d18:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <_index>
	if(_index >= _N)
     d1c:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <_N>
     d20:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <_N+0x1>
     d24:	82 17       	cp	r24, r18
     d26:	93 07       	cpc	r25, r19
     d28:	3c f0       	brlt	.+14     	; 0xd38 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     d2a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <_index+0x1>
     d2e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <_index>
		_samplesReady = true;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <_samplesReady>
	}

	return(_samplesReady);
     d38:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_samplesReady>
}
     d3c:	08 95       	ret

00000d3e <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     d3e:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <_samplesReady>
     d42:	08 95       	ret

00000d44 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     d66:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_N>
     d6a:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_N+0x1>
     d6e:	18 16       	cp	r1, r24
     d70:	19 06       	cpc	r1, r25
     d72:	c4 f4       	brge	.+48     	; 0xda4 <_ZN8Goertzel10Magnitude2Ev+0x60>
     d74:	c0 e0       	ldi	r28, 0x00	; 0
     d76:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     d78:	ce 01       	movw	r24, r28
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <testData>
     d82:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <testData+0x1>
     d86:	e8 0f       	add	r30, r24
     d88:	f9 1f       	adc	r31, r25
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	c8 01       	movw	r24, r16
     d90:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     d94:	21 96       	adiw	r28, 0x01	; 1
     d96:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_N>
     d9a:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_N+0x1>
     d9e:	c8 17       	cp	r28, r24
     da0:	d9 07       	cpc	r29, r25
     da2:	54 f3       	brlt	.-44     	; 0xd78 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     da4:	80 90 02 03 	lds	r8, 0x0302	; 0x800302 <Q1>
     da8:	90 90 03 03 	lds	r9, 0x0303	; 0x800303 <Q1+0x1>
     dac:	a0 90 04 03 	lds	r10, 0x0304	; 0x800304 <Q1+0x2>
     db0:	b0 90 05 03 	lds	r11, 0x0305	; 0x800305 <Q1+0x3>
     db4:	c0 90 fe 02 	lds	r12, 0x02FE	; 0x8002fe <Q2>
     db8:	d0 90 ff 02 	lds	r13, 0x02FF	; 0x8002ff <Q2+0x1>
     dbc:	e0 90 00 03 	lds	r14, 0x0300	; 0x800300 <Q2+0x2>
     dc0:	f0 90 01 03 	lds	r15, 0x0301	; 0x800301 <Q2+0x3>
     dc4:	a5 01       	movw	r20, r10
     dc6:	94 01       	movw	r18, r8
     dc8:	c5 01       	movw	r24, r10
     dca:	b4 01       	movw	r22, r8
     dcc:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     dd0:	2b 01       	movw	r4, r22
     dd2:	3c 01       	movw	r6, r24
     dd4:	a7 01       	movw	r20, r14
     dd6:	96 01       	movw	r18, r12
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     de0:	9b 01       	movw	r18, r22
     de2:	ac 01       	movw	r20, r24
     de4:	c3 01       	movw	r24, r6
     de6:	b2 01       	movw	r22, r4
     de8:	0e 94 9a 28 	call	0x5134	; 0x5134 <__addsf3>
     dec:	2b 01       	movw	r4, r22
     dee:	3c 01       	movw	r6, r24
     df0:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <g_coeff>
     df4:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <g_coeff+0x1>
     df8:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <g_coeff+0x2>
     dfc:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <g_coeff+0x3>
     e00:	c5 01       	movw	r24, r10
     e02:	b4 01       	movw	r22, r8
     e04:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     e08:	a7 01       	movw	r20, r14
     e0a:	96 01       	movw	r18, r12
     e0c:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c3 01       	movw	r24, r6
     e16:	b2 01       	movw	r22, r4
     e18:	0e 94 99 28 	call	0x5132	; 0x5132 <__subsf3>
     e1c:	6b 01       	movw	r12, r22
     e1e:	7c 01       	movw	r14, r24

	ResetGoertzel();
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     e26:	c7 01       	movw	r24, r14
     e28:	b6 01       	movw	r22, r12
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
     e3a:	bf 90       	pop	r11
     e3c:	af 90       	pop	r10
     e3e:	9f 90       	pop	r9
     e40:	8f 90       	pop	r8
     e42:	7f 90       	pop	r7
     e44:	6f 90       	pop	r6
     e46:	5f 90       	pop	r5
     e48:	4f 90       	pop	r4
     e4a:	08 95       	ret

00000e4c <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     e4c:	e4 e6       	ldi	r30, 0x64	; 100
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     e56:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     e5a:	85 e2       	ldi	r24, 0x25	; 37
     e5c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     e6c:	08 95       	ret

00000e6e <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     e6e:	84 ea       	ldi	r24, 0xA4	; 164
     e70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e74:	ec eb       	ldi	r30, 0xBC	; 188
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	64 f0       	brlt	.+24     	; 0xe96 <_Z9i2c_startv+0x28>
     e7e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e82:	81 11       	cpse	r24, r1
     e84:	f9 cf       	rjmp	.-14     	; 0xe78 <_Z9i2c_startv+0xa>
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     e88:	80 e9       	ldi	r24, 0x90	; 144
     e8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     e94:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     e96:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e9a:	88 23       	and	r24, r24
     e9c:	a9 f3       	breq	.-22     	; 0xe88 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     ea0:	08 95       	ret

00000ea2 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ea2:	84 e9       	ldi	r24, 0x94	; 148
     ea4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ea8:	08 95       	ret

00000eaa <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     eaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     eae:	84 e8       	ldi	r24, 0x84	; 132
     eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     eb4:	ec eb       	ldi	r30, 0xBC	; 188
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 23       	and	r24, r24
     ebc:	64 f0       	brlt	.+24     	; 0xed6 <_Z17i2c_write_successhh+0x2c>
     ebe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ec2:	81 11       	cpse	r24, r1
     ec4:	f9 cf       	rjmp	.-14     	; 0xeb8 <_Z17i2c_write_successhh+0xe>
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ec8:	84 e9       	ldi	r24, 0x94	; 148
     eca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     ed4:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     ed6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     eda:	88 7f       	andi	r24, 0xF8	; 248
     edc:	86 13       	cpse	r24, r22
     ede:	f4 cf       	rjmp	.-24     	; 0xec8 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     ee0:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     ee2:	08 95       	ret

00000ee4 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     ee4:	84 ec       	ldi	r24, 0xC4	; 196
     ee6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     eea:	ec eb       	ldi	r30, 0xBC	; 188
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 23       	and	r24, r24
     ef2:	24 f0       	brlt	.+8      	; 0xefc <_Z12i2c_read_ackv+0x18>
     ef4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ef8:	81 11       	cpse	r24, r1
     efa:	f9 cf       	rjmp	.-14     	; 0xeee <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     efc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f00:	08 95       	ret

00000f02 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     f02:	84 e8       	ldi	r24, 0x84	; 132
     f04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f08:	ec eb       	ldi	r30, 0xBC	; 188
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 23       	and	r24, r24
     f10:	24 f0       	brlt	.+8      	; 0xf1a <_Z13i2c_read_nackv+0x18>
     f12:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f16:	81 11       	cpse	r24, r1
     f18:	f9 cf       	rjmp	.-14     	; 0xf0c <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     f1a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f1e:	08 95       	ret

00000f20 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     f20:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f24:	28 7f       	andi	r18, 0xF8	; 248
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	28 17       	cp	r18, r24
     f2c:	39 07       	cpc	r19, r25
     f2e:	29 f0       	breq	.+10     	; 0xf3a <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f30:	84 e9       	ldi	r24, 0x94	; 148
     f32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret
	}

	return(FALSE);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
}
     f3c:	08 95       	ret

00000f3e <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	00 d0       	rcall	.+0      	; 0xf44 <_Z16i2c_device_writehhPhh+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <_Z16i2c_device_writehhPhh+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <_Z16i2c_device_writehhPhh+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	6b 83       	std	Y+3, r22	; 0x03
     f50:	5d 83       	std	Y+5, r21	; 0x05
     f52:	4c 83       	std	Y+4, r20	; 0x04
     f54:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f56:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f58:	0e 94 37 07 	call	0xe6e	; 0xe6e <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f5c:	88 e0       	ldi	r24, 0x08	; 8
     f5e:	0e 94 90 07 	call	0xf20	; 0xf20 <_Z10i2c_statush>
     f62:	98 2f       	mov	r25, r24
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	99 23       	and	r25, r25
     f68:	09 f4       	brne	.+2      	; 0xf6c <_Z16i2c_device_writehhPhh+0x2e>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	88 23       	and	r24, r24
     f6e:	11 f0       	breq	.+4      	; 0xf74 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	3f c0       	rjmp	.+126    	; 0xff2 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     f74:	68 e1       	ldi	r22, 0x18	; 24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z17i2c_write_successhh>
     f7c:	98 2f       	mov	r25, r24
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	99 23       	and	r25, r25
     f82:	09 f4       	brne	.+2      	; 0xf86 <_Z16i2c_device_writehhPhh+0x48>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	88 23       	and	r24, r24
     f88:	11 f0       	breq	.+4      	; 0xf8e <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	32 c0       	rjmp	.+100    	; 0xff2 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     f8e:	68 e2       	ldi	r22, 0x28	; 40
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z17i2c_write_successhh>
     f96:	98 2f       	mov	r25, r24
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	99 23       	and	r25, r25
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <_Z16i2c_device_writehhPhh+0x62>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	88 23       	and	r24, r24
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	25 c0       	rjmp	.+74     	; 0xff2 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     fa8:	8e 81       	ldd	r24, Y+6	; 0x06
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	98 0f       	add	r25, r24
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <_Z16i2c_device_writehhPhh+0x7a>
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	99 23       	and	r25, r25
     fba:	c1 f0       	breq	.+48     	; 0xfec <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	98 0f       	add	r25, r24
     fc2:	99 83       	std	Y+1, r25	; 0x01
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
     fca:	3d 81       	ldd	r19, Y+5	; 0x05
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	fc 01       	movw	r30, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	68 e2       	ldi	r22, 0x28	; 40
     fd6:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z17i2c_write_successhh>
     fda:	98 2f       	mov	r25, r24
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	99 23       	and	r25, r25
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <_Z16i2c_device_writehhPhh+0xa6>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	88 23       	and	r24, r24
     fe6:	01 f3       	breq	.-64     	; 0xfa8 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     fec:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
}
     ff2:	26 96       	adiw	r28, 0x06	; 6
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	00 d0       	rcall	.+0      	; 0x100e <_Z15i2c_device_readhhPhh+0xa>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <_Z15i2c_device_readhhPhh+0xc>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <_Z15i2c_device_readhhPhh+0xe>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	6b 83       	std	Y+3, r22	; 0x03
    101a:	5d 83       	std	Y+5, r21	; 0x05
    101c:	4c 83       	std	Y+4, r20	; 0x04
    101e:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    1020:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    1022:	0e 94 37 07 	call	0xe6e	; 0xe6e <_Z9i2c_startv>
		if(i2c_status(TW_START))
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	0e 94 90 07 	call	0xf20	; 0xf20 <_Z10i2c_statush>
    102c:	98 2f       	mov	r25, r24
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	99 23       	and	r25, r25
    1032:	09 f4       	brne	.+2      	; 0x1036 <_Z15i2c_device_readhhPhh+0x32>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	88 23       	and	r24, r24
    1038:	11 f0       	breq	.+4      	; 0x103e <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	79 c0       	rjmp	.+242    	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    103e:	68 e1       	ldi	r22, 0x18	; 24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z17i2c_write_successhh>
    1046:	98 2f       	mov	r25, r24
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	99 23       	and	r25, r25
    104c:	09 f4       	brne	.+2      	; 0x1050 <_Z15i2c_device_readhhPhh+0x4c>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	88 23       	and	r24, r24
    1052:	11 f0       	breq	.+4      	; 0x1058 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	6c c0       	rjmp	.+216    	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1058:	68 e2       	ldi	r22, 0x28	; 40
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z17i2c_write_successhh>
    1060:	98 2f       	mov	r25, r24
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	99 23       	and	r25, r25
    1066:	09 f4       	brne	.+2      	; 0x106a <_Z15i2c_device_readhhPhh+0x66>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	88 23       	and	r24, r24
    106c:	11 f0       	breq	.+4      	; 0x1072 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	5f c0       	rjmp	.+190    	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
    1072:	0e 94 37 07 	call	0xe6e	; 0xe6e <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
    1076:	80 e1       	ldi	r24, 0x10	; 16
    1078:	0e 94 90 07 	call	0xf20	; 0xf20 <_Z10i2c_statush>
    107c:	98 2f       	mov	r25, r24
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	99 23       	and	r25, r25
    1082:	09 f4       	brne	.+2      	; 0x1086 <_Z15i2c_device_readhhPhh+0x82>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	88 23       	and	r24, r24
    1088:	11 f0       	breq	.+4      	; 0x108e <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	51 c0       	rjmp	.+162    	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	60 e4       	ldi	r22, 0x40	; 64
    1094:	0e 94 55 07 	call	0xeaa	; 0xeaa <_Z17i2c_write_successhh>
    1098:	98 2f       	mov	r25, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	99 23       	and	r25, r25
    109e:	09 f4       	brne	.+2      	; 0x10a2 <_Z15i2c_device_readhhPhh+0x9e>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	88 23       	and	r24, r24
    10a4:	11 f0       	breq	.+4      	; 0x10aa <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	43 c0       	rjmp	.+134    	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f ef       	ldi	r25, 0xFF	; 255
    10ae:	98 0f       	add	r25, r24
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <_Z15i2c_device_readhhPhh+0xb6>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	99 23       	and	r25, r25
    10bc:	b1 f1       	breq	.+108    	; 0x112a <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    10be:	8e 81       	ldd	r24, Y+6	; 0x06
    10c0:	88 23       	and	r24, r24
    10c2:	d9 f0       	breq	.+54     	; 0x10fa <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	98 0f       	add	r25, r24
    10ca:	99 83       	std	Y+1, r25	; 0x01
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	89 01       	movw	r16, r18
    10d6:	08 0f       	add	r16, r24
    10d8:	19 1f       	adc	r17, r25
    10da:	0e 94 72 07 	call	0xee4	; 0xee4 <_Z12i2c_read_ackv>
    10de:	f8 01       	movw	r30, r16
    10e0:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    10e2:	80 e5       	ldi	r24, 0x50	; 80
    10e4:	0e 94 90 07 	call	0xf20	; 0xf20 <_Z10i2c_statush>
    10e8:	98 2f       	mov	r25, r24
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	99 23       	and	r25, r25
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <_Z15i2c_device_readhhPhh+0xee>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	88 23       	and	r24, r24
    10f4:	d1 f2       	breq	.-76     	; 0x10aa <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	1b c0       	rjmp	.+54     	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	3d 81       	ldd	r19, Y+5	; 0x05
    1104:	89 01       	movw	r16, r18
    1106:	08 0f       	add	r16, r24
    1108:	19 1f       	adc	r17, r25
    110a:	0e 94 81 07 	call	0xf02	; 0xf02 <_Z13i2c_read_nackv>
    110e:	f8 01       	movw	r30, r16
    1110:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    1112:	88 e5       	ldi	r24, 0x58	; 88
    1114:	0e 94 90 07 	call	0xf20	; 0xf20 <_Z10i2c_statush>
    1118:	98 2f       	mov	r25, r24
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	99 23       	and	r25, r25
    111e:	09 f4       	brne	.+2      	; 0x1122 <_Z15i2c_device_readhhPhh+0x11e>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	88 23       	and	r24, r24
    1124:	11 f2       	breq	.-124    	; 0x10aa <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    112a:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    112e:	80 e0       	ldi	r24, 0x00	; 0
}
    1130:	26 96       	adiw	r28, 0x06	; 6
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1146:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZZ16nextFullTxBuffervE11bufferIndex>
    114a:	94 e0       	ldi	r25, 0x04	; 4
    114c:	59 e2       	ldi	r21, 0x29	; 41
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	52 9f       	mul	r21, r18
    1154:	f0 01       	movw	r30, r0
    1156:	53 9f       	mul	r21, r19
    1158:	f0 0d       	add	r31, r0
    115a:	11 24       	eor	r1, r1
    115c:	ea 56       	subi	r30, 0x6A	; 106
    115e:	fc 4f       	sbci	r31, 0xFC	; 252
    1160:	40 81       	ld	r20, Z
    1162:	41 11       	cpse	r20, r1
    1164:	0c c0       	rjmp	.+24     	; 0x117e <_Z16nextFullTxBufferv+0x38>
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	29 f0       	breq	.+10     	; 0x1174 <_Z16nextFullTxBufferv+0x2e>
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	84 30       	cpi	r24, 0x04	; 4
    116e:	78 f3       	brcs	.-34     	; 0x114e <_Z16nextFullTxBufferv+0x8>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	ed cf       	rjmp	.-38     	; 0x114e <_Z16nextFullTxBufferv+0x8>
    1174:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	08 95       	ret
    117e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1182:	49 e2       	ldi	r20, 0x29	; 41
    1184:	42 9f       	mul	r20, r18
    1186:	c0 01       	movw	r24, r0
    1188:	43 9f       	mul	r20, r19
    118a:	90 0d       	add	r25, r0
    118c:	11 24       	eor	r1, r1
    118e:	8a 56       	subi	r24, 0x6A	; 106
    1190:	9c 4f       	sbci	r25, 0xFC	; 252
    1192:	08 95       	ret

00001194 <_Z17nextEmptyTxBufferv>:
    1194:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1198:	94 e0       	ldi	r25, 0x04	; 4
    119a:	59 e2       	ldi	r21, 0x29	; 41
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	52 9f       	mul	r21, r18
    11a2:	f0 01       	movw	r30, r0
    11a4:	53 9f       	mul	r21, r19
    11a6:	f0 0d       	add	r31, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	ea 56       	subi	r30, 0x6A	; 106
    11ac:	fc 4f       	sbci	r31, 0xFC	; 252
    11ae:	40 81       	ld	r20, Z
    11b0:	44 23       	and	r20, r20
    11b2:	61 f0       	breq	.+24     	; 0x11cc <_Z17nextEmptyTxBufferv+0x38>
    11b4:	91 50       	subi	r25, 0x01	; 1
    11b6:	29 f0       	breq	.+10     	; 0x11c2 <_Z17nextEmptyTxBufferv+0x2e>
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	78 f3       	brcs	.-34     	; 0x119c <_Z17nextEmptyTxBufferv+0x8>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	ed cf       	rjmp	.-38     	; 0x119c <_Z17nextEmptyTxBufferv+0x8>
    11c2:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	08 95       	ret
    11cc:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11d0:	49 e2       	ldi	r20, 0x29	; 41
    11d2:	42 9f       	mul	r20, r18
    11d4:	c0 01       	movw	r24, r0
    11d6:	43 9f       	mul	r20, r19
    11d8:	90 0d       	add	r25, r0
    11da:	11 24       	eor	r1, r1
    11dc:	8a 56       	subi	r24, 0x6A	; 106
    11de:	9c 4f       	sbci	r25, 0xFC	; 252
    11e0:	08 95       	ret

000011e2 <_Z17nextEmptyRxBufferv>:
    11e2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	9f e3       	ldi	r25, 0x3F	; 63
    11ec:	89 9f       	mul	r24, r25
    11ee:	f0 01       	movw	r30, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	e8 5e       	subi	r30, 0xE8	; 232
    11f4:	fc 4f       	sbci	r31, 0xFC	; 252
    11f6:	41 81       	ldd	r20, Z+1	; 0x01
    11f8:	52 81       	ldd	r21, Z+2	; 0x02
    11fa:	45 2b       	or	r20, r21
    11fc:	a9 f0       	breq	.+42     	; 0x1228 <_Z17nextEmptyRxBufferv+0x46>
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	08 f0       	brcs	.+2      	; 0x1206 <_Z17nextEmptyRxBufferv+0x24>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	9f e3       	ldi	r25, 0x3F	; 63
    120c:	89 9f       	mul	r24, r25
    120e:	f0 01       	movw	r30, r0
    1210:	11 24       	eor	r1, r1
    1212:	e8 5e       	subi	r30, 0xE8	; 232
    1214:	fc 4f       	sbci	r31, 0xFC	; 252
    1216:	41 81       	ldd	r20, Z+1	; 0x01
    1218:	52 81       	ldd	r21, Z+2	; 0x02
    121a:	45 2b       	or	r20, r21
    121c:	29 f0       	breq	.+10     	; 0x1228 <_Z17nextEmptyRxBufferv+0x46>
    121e:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	08 95       	ret
    1228:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    122c:	4f e3       	ldi	r20, 0x3F	; 63
    122e:	42 9f       	mul	r20, r18
    1230:	c0 01       	movw	r24, r0
    1232:	43 9f       	mul	r20, r19
    1234:	90 0d       	add	r25, r0
    1236:	11 24       	eor	r1, r1
    1238:	88 5e       	subi	r24, 0xE8	; 232
    123a:	9c 4f       	sbci	r25, 0xFC	; 252
    123c:	08 95       	ret

0000123e <_Z16nextFullRxBufferv>:
    123e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	9f e3       	ldi	r25, 0x3F	; 63
    1248:	89 9f       	mul	r24, r25
    124a:	f0 01       	movw	r30, r0
    124c:	11 24       	eor	r1, r1
    124e:	e8 5e       	subi	r30, 0xE8	; 232
    1250:	fc 4f       	sbci	r31, 0xFC	; 252
    1252:	41 81       	ldd	r20, Z+1	; 0x01
    1254:	52 81       	ldd	r21, Z+2	; 0x02
    1256:	45 2b       	or	r20, r21
    1258:	a9 f4       	brne	.+42     	; 0x1284 <_Z16nextFullRxBufferv+0x46>
    125a:	8f 5f       	subi	r24, 0xFF	; 255
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	08 f0       	brcs	.+2      	; 0x1262 <_Z16nextFullRxBufferv+0x24>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	9f e3       	ldi	r25, 0x3F	; 63
    1268:	89 9f       	mul	r24, r25
    126a:	f0 01       	movw	r30, r0
    126c:	11 24       	eor	r1, r1
    126e:	e8 5e       	subi	r30, 0xE8	; 232
    1270:	fc 4f       	sbci	r31, 0xFC	; 252
    1272:	41 81       	ldd	r20, Z+1	; 0x01
    1274:	52 81       	ldd	r21, Z+2	; 0x02
    1276:	45 2b       	or	r20, r21
    1278:	29 f4       	brne	.+10     	; 0x1284 <_Z16nextFullRxBufferv+0x46>
    127a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZZ16nextFullRxBuffervE11bufferIndex>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret
    1284:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1288:	4f e3       	ldi	r20, 0x3F	; 63
    128a:	42 9f       	mul	r20, r18
    128c:	c0 01       	movw	r24, r0
    128e:	43 9f       	mul	r20, r19
    1290:	90 0d       	add	r25, r0
    1292:	11 24       	eor	r1, r1
    1294:	88 5e       	subi	r24, 0xE8	; 232
    1296:	9c 4f       	sbci	r25, 0xFC	; 252
    1298:	08 95       	ret

0000129a <_Z19linkbusTxInProgressv>:
    129a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZL17linkbus_tx_active>
    129e:	08 95       	ret

000012a0 <_Z16linkbus_start_txv>:
    12a0:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_ZL17linkbus_tx_active>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	91 11       	cpse	r25, r1
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	91 11       	cpse	r25, r1
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <_Z16linkbus_start_txv+0x1e>
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <_ZL17linkbus_tx_active>
    12b4:	e1 ec       	ldi	r30, 0xC1	; 193
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	90 81       	ld	r25, Z
    12ba:	90 62       	ori	r25, 0x20	; 32
    12bc:	90 83       	st	Z, r25
    12be:	08 95       	ret

000012c0 <_Z14linkbus_end_txv>:
    12c0:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZL17linkbus_tx_active>
    12c4:	88 23       	and	r24, r24
    12c6:	39 f0       	breq	.+14     	; 0x12d6 <_Z14linkbus_end_txv+0x16>
    12c8:	e1 ec       	ldi	r30, 0xC1	; 193
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7d       	andi	r24, 0xDF	; 223
    12d0:	80 83       	st	Z, r24
    12d2:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZL17linkbus_tx_active>
    12d6:	08 95       	ret

000012d8 <_Z12linkbus_initm>:
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	8e e7       	ldi	r24, 0x7E	; 126
    12de:	e8 e1       	ldi	r30, 0x18	; 24
    12e0:	f3 e0       	ldi	r31, 0x03	; 3
    12e2:	df 01       	movw	r26, r30
    12e4:	1d 92       	st	X+, r1
    12e6:	8a 95       	dec	r24
    12e8:	e9 f7       	brne	.-6      	; 0x12e4 <_Z12linkbus_initm+0xc>
    12ea:	e6 e9       	ldi	r30, 0x96	; 150
    12ec:	f3 e0       	ldi	r31, 0x03	; 3
    12ee:	10 82       	st	Z, r1
    12f0:	11 a6       	std	Z+41, r1	; 0x29
    12f2:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <_ZL9tx_buffer+0x52>
    12f6:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_ZL9tx_buffer+0x7b>
    12fa:	60 e4       	ldi	r22, 0x40	; 64
    12fc:	72 e4       	ldi	r23, 0x42	; 66
    12fe:	8f e0       	ldi	r24, 0x0F	; 15
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodsi4>
    1306:	21 50       	subi	r18, 0x01	; 1
    1308:	31 09       	sbc	r19, r1
    130a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    130e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1312:	88 e9       	ldi	r24, 0x98	; 152
    1314:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1318:	8e e0       	ldi	r24, 0x0E	; 14
    131a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    131e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    1322:	08 95       	ret

00001324 <_Z15linkbus_disablev>:
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    132a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    132e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z14linkbus_end_txv>
    1332:	8e e7       	ldi	r24, 0x7E	; 126
    1334:	e8 e1       	ldi	r30, 0x18	; 24
    1336:	f3 e0       	ldi	r31, 0x03	; 3
    1338:	df 01       	movw	r26, r30
    133a:	1d 92       	st	X+, r1
    133c:	8a 95       	dec	r24
    133e:	e9 f7       	brne	.-6      	; 0x133a <_Z15linkbus_disablev+0x16>
    1340:	e6 e9       	ldi	r30, 0x96	; 150
    1342:	f3 e0       	ldi	r31, 0x03	; 3
    1344:	10 82       	st	Z, r1
    1346:	11 a6       	std	Z+41, r1	; 0x29
    1348:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <_ZL9tx_buffer+0x52>
    134c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_ZL9tx_buffer+0x7b>
    1350:	08 95       	ret

00001352 <_Z17linkbus_send_textPc>:
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    135e:	21 11       	cpse	r18, r1
    1360:	14 c0       	rjmp	.+40     	; 0x138a <_Z17linkbus_send_textPc+0x38>
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	a1 f0       	breq	.+40     	; 0x138e <_Z17linkbus_send_textPc+0x3c>
    1366:	8c 01       	movw	r16, r24
    1368:	0e 94 ca 08 	call	0x1194	; 0x1194 <_Z17nextEmptyTxBufferv>
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	b9 f4       	brne	.+46     	; 0x139e <_Z17linkbus_send_textPc+0x4c>
    1370:	c8 ec       	ldi	r28, 0xC8	; 200
    1372:	d0 e0       	ldi	r29, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <_Z17linkbus_send_textPc+0x28>
    1376:	20 97       	sbiw	r28, 0x00	; 0
    1378:	61 f0       	breq	.+24     	; 0x1392 <_Z17linkbus_send_textPc+0x40>
    137a:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_ZL17linkbus_tx_active>
    137e:	99 23       	and	r25, r25
    1380:	51 f0       	breq	.+20     	; 0x1396 <_Z17linkbus_send_textPc+0x44>
    1382:	20 97       	sbiw	r28, 0x00	; 0
    1384:	d1 f0       	breq	.+52     	; 0x13ba <_Z17linkbus_send_textPc+0x68>
    1386:	21 97       	sbiw	r28, 0x01	; 1
    1388:	f8 cf       	rjmp	.-16     	; 0x137a <_Z17linkbus_send_textPc+0x28>
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	1b c0       	rjmp	.+54     	; 0x13c4 <_Z17linkbus_send_textPc+0x72>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	19 c0       	rjmp	.+50     	; 0x13c4 <_Z17linkbus_send_textPc+0x72>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	17 c0       	rjmp	.+46     	; 0x13c4 <_Z17linkbus_send_textPc+0x72>
    1396:	0e 94 ca 08 	call	0x1194	; 0x1194 <_Z17nextEmptyTxBufferv>
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	61 f3       	breq	.-40     	; 0x1376 <_Z17linkbus_send_textPc+0x24>
    139e:	1f 93       	push	r17
    13a0:	0f 93       	push	r16
    13a2:	9f 93       	push	r25
    13a4:	8f 93       	push	r24
    13a6:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    13aa:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_Z16linkbus_start_txv>
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <_Z17linkbus_send_textPc+0x72>
    13ba:	0e 94 ca 08 	call	0x1194	; 0x1194 <_Z17nextEmptyTxBufferv>
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	71 f7       	brne	.-36     	; 0x139e <_Z17linkbus_send_textPc+0x4c>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	08 95       	ret

000013ce <_Z17lb_send_NewPromptv>:
    13ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13d2:	81 11       	cpse	r24, r1
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <_Z17lb_send_NewPromptv+0x14>
    13d6:	84 e2       	ldi	r24, 0x24	; 36
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z17linkbus_send_textPc>
    13de:	81 11       	cpse	r24, r1
    13e0:	fa cf       	rjmp	.-12     	; 0x13d6 <_Z17lb_send_NewPromptv+0x8>
    13e2:	08 95       	ret

000013e4 <_Z15lb_send_NewLinev>:
    13e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13e8:	81 11       	cpse	r24, r1
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <_Z15lb_send_NewLinev+0x10>
    13ec:	87 e2       	ldi	r24, 0x27	; 39
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z17linkbus_send_textPc>
    13f4:	08 95       	ret

000013f6 <_Z12lb_echo_charh>:
    13f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13fa:	91 11       	cpse	r25, r1
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <_Z12lb_echo_charh+0x16>
    13fe:	eb e3       	ldi	r30, 0x3B	; 59
    1400:	f4 e0       	ldi	r31, 0x04	; 4
    1402:	80 83       	st	Z, r24
    1404:	11 82       	std	Z+1, r1	; 0x01
    1406:	cf 01       	movw	r24, r30
    1408:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z17linkbus_send_textPc>
    140c:	08 95       	ret

0000140e <_Z14lb_send_stringPch>:
    140e:	cf 93       	push	r28
    1410:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1414:	21 11       	cpse	r18, r1
    1416:	25 c0       	rjmp	.+74     	; 0x1462 <_Z14lb_send_stringPch+0x54>
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	29 f1       	breq	.+74     	; 0x1466 <_Z14lb_send_stringPch+0x58>
    141c:	fc 01       	movw	r30, r24
    141e:	01 90       	ld	r0, Z+
    1420:	00 20       	and	r0, r0
    1422:	e9 f7       	brne	.-6      	; 0x141e <_Z14lb_send_stringPch+0x10>
    1424:	31 97       	sbiw	r30, 0x01	; 1
    1426:	e8 1b       	sub	r30, r24
    1428:	f9 0b       	sbc	r31, r25
    142a:	ba 97       	sbiw	r30, 0x2a	; 42
    142c:	f0 f4       	brcc	.+60     	; 0x146a <_Z14lb_send_stringPch+0x5c>
    142e:	c6 2f       	mov	r28, r22
    1430:	bc 01       	movw	r22, r24
    1432:	49 e2       	ldi	r20, 0x29	; 41
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	8b e3       	ldi	r24, 0x3B	; 59
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <strncpy>
    143e:	cc 23       	and	r28, r28
    1440:	59 f0       	breq	.+22     	; 0x1458 <_Z14lb_send_stringPch+0x4a>
    1442:	8b e3       	ldi	r24, 0x3B	; 59
    1444:	94 e0       	ldi	r25, 0x04	; 4
    1446:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z17linkbus_send_textPc>
    144a:	81 11       	cpse	r24, r1
    144c:	fa cf       	rjmp	.-12     	; 0x1442 <_Z14lb_send_stringPch+0x34>
    144e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZL17linkbus_tx_active>
    1452:	81 11       	cpse	r24, r1
    1454:	fc cf       	rjmp	.-8      	; 0x144e <_Z14lb_send_stringPch+0x40>
    1456:	0a c0       	rjmp	.+20     	; 0x146c <_Z14lb_send_stringPch+0x5e>
    1458:	8b e3       	ldi	r24, 0x3B	; 59
    145a:	94 e0       	ldi	r25, 0x04	; 4
    145c:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z17linkbus_send_textPc>
    1460:	05 c0       	rjmp	.+10     	; 0x146c <_Z14lb_send_stringPch+0x5e>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <_Z14lb_send_stringPch+0x5e>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	01 c0       	rjmp	.+2      	; 0x146c <_Z14lb_send_stringPch+0x5e>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return !g_bus_disabled;
    1470:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	91 11       	cpse	r25, r1
    1478:	80 e0       	ldi	r24, 0x00	; 0
}
    147a:	08 95       	ret

0000147c <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	8b e0       	ldi	r24, 0x0B	; 11
    14a2:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    14a6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	8e e0       	ldi	r24, 0x0E	; 14
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN8Goertzel9DataPointEi>
    14b4:	88 23       	and	r24, r24
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <__vector_21+0x46>
    14b8:	ea e7       	ldi	r30, 0x7A	; 122
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	87 7f       	andi	r24, 0xF7	; 247
    14c0:	80 83       	st	Z, r24
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	8b e0       	ldi	r24, 0x0B	; 11
    14c6:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	bf 91       	pop	r27
    14d0:	af 91       	pop	r26
    14d2:	9f 91       	pop	r25
    14d4:	8f 91       	pop	r24
    14d6:	7f 91       	pop	r23
    14d8:	6f 91       	pop	r22
    14da:	5f 91       	pop	r21
    14dc:	4f 91       	pop	r20
    14de:	3f 91       	pop	r19
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_18>:
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	1f 93       	push	r17
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
    1514:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1518:	c0 91 e0 04 	lds	r28, 0x04E0	; 0x8004e0 <_ZZ11__vector_18E4buff>
    151c:	d0 91 e1 04 	lds	r29, 0x04E1	; 0x8004e1 <_ZZ11__vector_18E4buff+0x1>
    1520:	20 97       	sbiw	r28, 0x00	; 0
    1522:	51 f4       	brne	.+20     	; 0x1538 <__vector_18+0x4c>
    1524:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z17nextEmptyRxBufferv>
    1528:	ec 01       	movw	r28, r24
    152a:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <_ZZ11__vector_18E4buff+0x1>
    152e:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <_ZZ11__vector_18E4buff>
    1532:	89 2b       	or	r24, r25
    1534:	09 f4       	brne	.+2      	; 0x1538 <__vector_18+0x4c>
    1536:	62 c1       	rjmp	.+708    	; 0x17fc <__vector_18+0x310>
    1538:	81 2f       	mov	r24, r17
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <toupper>
    1540:	9c 01       	movw	r18, r24
    1542:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <_ZZ11__vector_18E11ignoreCount>
    1546:	88 23       	and	r24, r24
    1548:	21 f0       	breq	.+8      	; 0x1552 <__vector_18+0x66>
    154a:	81 50       	subi	r24, 0x01	; 1
    154c:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <_ZZ11__vector_18E11ignoreCount>
    1550:	55 c1       	rjmp	.+682    	; 0x17fc <__vector_18+0x310>
    1552:	2b 31       	cpi	r18, 0x1B	; 27
    1554:	21 f4       	brne	.+8      	; 0x155e <__vector_18+0x72>
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <_ZZ11__vector_18E11ignoreCount>
    155c:	4f c1       	rjmp	.+670    	; 0x17fc <__vector_18+0x310>
    155e:	2d 30       	cpi	r18, 0x0D	; 13
    1560:	09 f0       	breq	.+2      	; 0x1564 <__vector_18+0x78>
    1562:	3f c0       	rjmp	.+126    	; 0x15e2 <__vector_18+0xf6>
    1564:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZ11__vector_18E13receiving_msg>
    1568:	88 23       	and	r24, r24
    156a:	31 f1       	breq	.+76     	; 0x15b8 <__vector_18+0xcc>
    156c:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <_ZZ11__vector_18E9charIndex>
    1570:	ee 23       	and	r30, r30
    1572:	f9 f0       	breq	.+62     	; 0x15b2 <__vector_18+0xc6>
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	88 83       	st	Y, r24
    1578:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    157c:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <_ZZ11__vector_18E11field_index>
    1588:	88 23       	and	r24, r24
    158a:	79 f0       	breq	.+30     	; 0x15aa <__vector_18+0xbe>
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	40 91 9a 04 	lds	r20, 0x049A	; 0x80049a <_ZZ11__vector_18E9field_len>
    1594:	54 e1       	ldi	r21, 0x14	; 20
    1596:	58 9f       	mul	r21, r24
    1598:	90 01       	movw	r18, r0
    159a:	59 9f       	mul	r21, r25
    159c:	30 0d       	add	r19, r0
    159e:	11 24       	eor	r1, r1
    15a0:	c2 0f       	add	r28, r18
    15a2:	d3 1f       	adc	r29, r19
    15a4:	c4 0f       	add	r28, r20
    15a6:	d1 1d       	adc	r29, r1
    15a8:	1b 82       	std	Y+3, r1	; 0x03
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	e1 56       	subi	r30, 0x61	; 97
    15ae:	fb 4f       	sbci	r31, 0xFB	; 251
    15b0:	10 82       	st	Z, r1
    15b2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_Z15lb_send_NewLinev>
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <__vector_18+0xd4>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	9f e7       	ldi	r25, 0x7F	; 127
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <_ZZ11__vector_18E9charIndex>
    15c4:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_ZZ11__vector_18E9field_len>
    15c8:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    15cc:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    15d0:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <_ZZ11__vector_18E11field_index>
    15d4:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <_ZZ11__vector_18E4buff+0x1>
    15d8:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <_ZZ11__vector_18E4buff>
    15dc:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZZ11__vector_18E13receiving_msg>
    15e0:	0d c1       	rjmp	.+538    	; 0x17fc <__vector_18+0x310>
    15e2:	22 23       	and	r18, r18
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <__vector_18+0xfc>
    15e6:	0a c1       	rjmp	.+532    	; 0x17fc <__vector_18+0x310>
    15e8:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <_ZZ11__vector_18E9charIndex>
    15ec:	4e 2f       	mov	r20, r30
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	da 01       	movw	r26, r20
    15f2:	a1 56       	subi	r26, 0x61	; 97
    15f4:	bb 4f       	sbci	r27, 0xFB	; 251
    15f6:	2c 93       	st	X, r18
    15f8:	ee 23       	and	r30, r30
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__vector_18+0x112>
    15fc:	d6 c0       	rjmp	.+428    	; 0x17aa <__vector_18+0x2be>
    15fe:	2f 37       	cpi	r18, 0x7F	; 127
    1600:	09 f0       	breq	.+2      	; 0x1604 <__vector_18+0x118>
    1602:	5f c0       	rjmp	.+190    	; 0x16c2 <__vector_18+0x1d6>
    1604:	e1 50       	subi	r30, 0x01	; 1
    1606:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <_ZZ11__vector_18E9charIndex>
    160a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <_ZZ11__vector_18E11field_index>
    160e:	81 11       	cpse	r24, r1
    1610:	13 c0       	rjmp	.+38     	; 0x1638 <__vector_18+0x14c>
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	e1 56       	subi	r30, 0x61	; 97
    1616:	fb 4f       	sbci	r31, 0xFB	; 251
    1618:	40 81       	ld	r20, Z
    161a:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    161e:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    1622:	84 1b       	sub	r24, r20
    1624:	91 09       	sbc	r25, r1
    1626:	6a e0       	ldi	r22, 0x0A	; 10
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    162e:	70 93 9d 04 	sts	0x049D, r23	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    1632:	60 93 9c 04 	sts	0x049C, r22	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    1636:	39 c0       	rjmp	.+114    	; 0x16aa <__vector_18+0x1be>
    1638:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ11__vector_18E9field_len>
    163c:	99 23       	and	r25, r25
    163e:	91 f0       	breq	.+36     	; 0x1664 <__vector_18+0x178>
    1640:	4f ef       	ldi	r20, 0xFF	; 255
    1642:	49 0f       	add	r20, r25
    1644:	40 93 9a 04 	sts	0x049A, r20	; 0x80049a <_ZZ11__vector_18E9field_len>
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	54 e1       	ldi	r21, 0x14	; 20
    164e:	58 9f       	mul	r21, r24
    1650:	b0 01       	movw	r22, r0
    1652:	59 9f       	mul	r21, r25
    1654:	70 0d       	add	r23, r0
    1656:	11 24       	eor	r1, r1
    1658:	c6 0f       	add	r28, r22
    165a:	d7 1f       	adc	r29, r23
    165c:	c4 0f       	add	r28, r20
    165e:	d1 1d       	adc	r29, r1
    1660:	1b 82       	std	Y+3, r1	; 0x03
    1662:	23 c0       	rjmp	.+70     	; 0x16aa <__vector_18+0x1be>
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	e1 56       	subi	r30, 0x61	; 97
    1668:	fb 4f       	sbci	r31, 0xFB	; 251
    166a:	90 81       	ld	r25, Z
    166c:	90 32       	cpi	r25, 0x20	; 32
    166e:	a1 f4       	brne	.+40     	; 0x1698 <__vector_18+0x1ac>
    1670:	81 50       	subi	r24, 0x01	; 1
    1672:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <_ZZ11__vector_18E11field_index>
    1676:	de 01       	movw	r26, r28
    1678:	94 e1       	ldi	r25, 0x14	; 20
    167a:	89 9f       	mul	r24, r25
    167c:	a0 0d       	add	r26, r0
    167e:	b1 1d       	adc	r27, r1
    1680:	11 24       	eor	r1, r1
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	fd 01       	movw	r30, r26
    1686:	01 90       	ld	r0, Z+
    1688:	00 20       	and	r0, r0
    168a:	e9 f7       	brne	.-6      	; 0x1686 <__vector_18+0x19a>
    168c:	31 97       	sbiw	r30, 0x01	; 1
    168e:	ea 1b       	sub	r30, r26
    1690:	fb 0b       	sbc	r31, r27
    1692:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <_ZZ11__vector_18E9field_len>
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <__vector_18+0x1be>
    1698:	94 e1       	ldi	r25, 0x14	; 20
    169a:	89 9f       	mul	r24, r25
    169c:	c0 0d       	add	r28, r0
    169e:	d1 1d       	adc	r29, r1
    16a0:	11 24       	eor	r1, r1
    16a2:	1b 82       	std	Y+3, r1	; 0x03
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <_ZZ11__vector_18E11field_index>
    16aa:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZZ11__vector_18E9charIndex>
    16ae:	e8 2f       	mov	r30, r24
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	e1 56       	subi	r30, 0x61	; 97
    16b4:	fb 4f       	sbci	r31, 0xFB	; 251
    16b6:	10 82       	st	Z, r1
    16b8:	81 11       	cpse	r24, r1
    16ba:	93 c0       	rjmp	.+294    	; 0x17e2 <__vector_18+0x2f6>
    16bc:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZZ11__vector_18E13receiving_msg>
    16c0:	90 c0       	rjmp	.+288    	; 0x17e2 <__vector_18+0x2f6>
    16c2:	20 32       	cpi	r18, 0x20	; 32
    16c4:	79 f5       	brne	.+94     	; 0x1724 <__vector_18+0x238>
    16c6:	fa 01       	movw	r30, r20
    16c8:	e2 56       	subi	r30, 0x62	; 98
    16ca:	fb 4f       	sbci	r31, 0xFB	; 251
    16cc:	80 81       	ld	r24, Z
    16ce:	80 32       	cpi	r24, 0x20	; 32
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__vector_18+0x1e8>
    16d2:	94 c0       	rjmp	.+296    	; 0x17fc <__vector_18+0x310>
    16d4:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <_ZZ11__vector_18E11field_index>
    16d8:	68 2f       	mov	r22, r24
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	fb 01       	movw	r30, r22
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	33 97       	sbiw	r30, 0x03	; 3
    16e2:	0c f0       	brlt	.+2      	; 0x16e6 <__vector_18+0x1fa>
    16e4:	8b c0       	rjmp	.+278    	; 0x17fc <__vector_18+0x310>
    16e6:	88 23       	and	r24, r24
    16e8:	79 f0       	breq	.+30     	; 0x1708 <__vector_18+0x21c>
    16ea:	61 50       	subi	r22, 0x01	; 1
    16ec:	71 09       	sbc	r23, r1
    16ee:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ11__vector_18E9field_len>
    16f2:	a4 e1       	ldi	r26, 0x14	; 20
    16f4:	a6 9f       	mul	r26, r22
    16f6:	f0 01       	movw	r30, r0
    16f8:	a7 9f       	mul	r26, r23
    16fa:	f0 0d       	add	r31, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	ce 0f       	add	r28, r30
    1700:	df 1f       	adc	r29, r31
    1702:	c9 0f       	add	r28, r25
    1704:	d1 1d       	adc	r29, r1
    1706:	1b 82       	std	Y+3, r1	; 0x03
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <_ZZ11__vector_18E11field_index>
    170e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_ZZ11__vector_18E9field_len>
    1712:	4f 5f       	subi	r20, 0xFF	; 255
    1714:	5f 4f       	sbci	r21, 0xFF	; 255
    1716:	4e 33       	cpi	r20, 0x3E	; 62
    1718:	51 05       	cpc	r21, r1
    171a:	0c f0       	brlt	.+2      	; 0x171e <__vector_18+0x232>
    171c:	4e e3       	ldi	r20, 0x3E	; 62
    171e:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <_ZZ11__vector_18E9charIndex>
    1722:	5f c0       	rjmp	.+190    	; 0x17e2 <__vector_18+0x2f6>
    1724:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <_ZZ11__vector_18E9field_len>
    1728:	84 31       	cpi	r24, 0x14	; 20
    172a:	08 f0       	brcs	.+2      	; 0x172e <__vector_18+0x242>
    172c:	67 c0       	rjmp	.+206    	; 0x17fc <__vector_18+0x310>
    172e:	40 91 9b 04 	lds	r20, 0x049B	; 0x80049b <_ZZ11__vector_18E11field_index>
    1732:	41 11       	cpse	r20, r1
    1734:	19 c0       	rjmp	.+50     	; 0x1768 <__vector_18+0x27c>
    1736:	40 91 9c 04 	lds	r20, 0x049C	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    173a:	50 91 9d 04 	lds	r21, 0x049D	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    173e:	ba 01       	movw	r22, r20
    1740:	66 0f       	add	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	44 0f       	add	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	44 0f       	add	r20, r20
    174a:	55 1f       	adc	r21, r21
    174c:	44 0f       	add	r20, r20
    174e:	55 1f       	adc	r21, r21
    1750:	46 0f       	add	r20, r22
    1752:	57 1f       	adc	r21, r23
    1754:	42 0f       	add	r20, r18
    1756:	51 1d       	adc	r21, r1
    1758:	50 93 9d 04 	sts	0x049D, r21	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    175c:	40 93 9c 04 	sts	0x049C, r20	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_ZZ11__vector_18E9field_len>
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <__vector_18+0x2a8>
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	41 50       	subi	r20, 0x01	; 1
    176c:	51 09       	sbc	r21, r1
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	98 0f       	add	r25, r24
    1772:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ11__vector_18E9field_len>
    1776:	e4 e1       	ldi	r30, 0x14	; 20
    1778:	e4 9f       	mul	r30, r20
    177a:	b0 01       	movw	r22, r0
    177c:	e5 9f       	mul	r30, r21
    177e:	70 0d       	add	r23, r0
    1780:	11 24       	eor	r1, r1
    1782:	c6 0f       	add	r28, r22
    1784:	d7 1f       	adc	r29, r23
    1786:	fe 01       	movw	r30, r28
    1788:	e8 0f       	add	r30, r24
    178a:	f1 1d       	adc	r31, r1
    178c:	23 83       	std	Z+3, r18	; 0x03
    178e:	c9 0f       	add	r28, r25
    1790:	d1 1d       	adc	r29, r1
    1792:	1b 82       	std	Y+3, r1	; 0x03
    1794:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZZ11__vector_18E9charIndex>
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	8e 33       	cpi	r24, 0x3E	; 62
    179e:	91 05       	cpc	r25, r1
    17a0:	0c f0       	brlt	.+2      	; 0x17a4 <__vector_18+0x2b8>
    17a2:	8e e3       	ldi	r24, 0x3E	; 62
    17a4:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <_ZZ11__vector_18E9charIndex>
    17a8:	1c c0       	rjmp	.+56     	; 0x17e2 <__vector_18+0x2f6>
    17aa:	2f 37       	cpi	r18, 0x7F	; 127
    17ac:	41 f4       	brne	.+16     	; 0x17be <__vector_18+0x2d2>
    17ae:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    17b2:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    17b6:	18 16       	cp	r1, r24
    17b8:	19 06       	cpc	r1, r25
    17ba:	bc f0       	brlt	.+46     	; 0x17ea <__vector_18+0x2fe>
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <__vector_18+0x308>
    17be:	20 32       	cpi	r18, 0x20	; 32
    17c0:	e9 f0       	breq	.+58     	; 0x17fc <__vector_18+0x310>
    17c2:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <_ZZ11__vector_18E11field_index>
    17c6:	c9 01       	movw	r24, r18
    17c8:	99 27       	eor	r25, r25
    17ca:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    17ce:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    17d2:	1b 82       	std	Y+3, r1	; 0x03
    17d4:	1f 8a       	std	Y+23, r1	; 0x17
    17d6:	1b a6       	std	Y+43, r1	; 0x2b
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZZ11__vector_18E13receiving_msg>
    17de:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <_ZZ11__vector_18E9charIndex>
    17e2:	82 2f       	mov	r24, r18
    17e4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z12lb_echo_charh>
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <__vector_18+0x310>
    17ea:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    17ee:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    17f2:	f7 cf       	rjmp	.-18     	; 0x17e2 <__vector_18+0x2f6>
    17f4:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZZ11__vector_18E6msg_ID+0x1>
    17f8:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZ11__vector_18E6msg_ID>
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	1f 91       	pop	r17
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <__vector_19>:
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
    1846:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_ZZ11__vector_19E4buff>
    184a:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <_ZZ11__vector_19E4buff+0x1>
    184e:	89 2b       	or	r24, r25
    1850:	31 f4       	brne	.+12     	; 0x185e <__vector_19+0x3a>
    1852:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z16nextFullTxBufferv>
    1856:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <_ZZ11__vector_19E4buff+0x1>
    185a:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_ZZ11__vector_19E4buff>
    185e:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <_ZZ11__vector_19E4buff>
    1862:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <_ZZ11__vector_19E4buff+0x1>
    1866:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ11__vector_19E9charIndex>
    186a:	df 01       	movw	r26, r30
    186c:	a8 0f       	add	r26, r24
    186e:	b1 1d       	adc	r27, r1
    1870:	9c 91       	ld	r25, X
    1872:	99 23       	and	r25, r25
    1874:	31 f0       	breq	.+12     	; 0x1882 <__vector_19+0x5e>
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ11__vector_19E9charIndex>
    187c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1880:	0d c0       	rjmp	.+26     	; 0x189c <__vector_19+0x78>
    1882:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ11__vector_19E9charIndex>
    1886:	10 82       	st	Z, r1
    1888:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z16nextFullTxBufferv>
    188c:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <_ZZ11__vector_19E4buff+0x1>
    1890:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_ZZ11__vector_19E4buff>
    1894:	89 2b       	or	r24, r25
    1896:	11 f4       	brne	.+4      	; 0x189c <__vector_19+0x78>
    1898:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z14linkbus_end_txv>
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_1>:
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	1f 92       	push	r1
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    18ee:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    18f2:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    18f6:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	a1 1d       	adc	r26, r1
    18fe:	b1 1d       	adc	r27, r1
    1900:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_current_epoch>
    1904:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <g_current_epoch+0x1>
    1908:	a0 93 95 05 	sts	0x0595, r26	; 0x800595 <g_current_epoch+0x2>
    190c:	b0 93 96 05 	sts	0x0596, r27	; 0x800596 <g_current_epoch+0x3>
    1910:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_seconds_since_powerup>
    1914:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <g_seconds_since_powerup+0x1>
    1918:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <g_seconds_since_powerup+0x2>
    191c:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <g_seconds_since_powerup+0x3>
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	a1 1d       	adc	r26, r1
    1924:	b1 1d       	adc	r27, r1
    1926:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <g_seconds_since_powerup>
    192a:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <g_seconds_since_powerup+0x1>
    192e:	a0 93 9e 05 	sts	0x059E, r26	; 0x80059e <g_seconds_since_powerup+0x2>
    1932:	b0 93 9f 05 	sts	0x059F, r27	; 0x80059f <g_seconds_since_powerup+0x3>
    1936:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    193a:	88 23       	and	r24, r24
    193c:	29 f0       	breq	.+10     	; 0x1948 <__vector_1+0x8a>
    193e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    1942:	81 50       	subi	r24, 0x01	; 1
    1944:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_temperature_check_countdown>
    1948:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    194c:	88 23       	and	r24, r24
    194e:	91 f1       	breq	.+100    	; 0x19b4 <__vector_1+0xf6>
    1950:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_use_rtc_for_startstop>
    1954:	88 23       	and	r24, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <__vector_1+0x9c>
    1958:	0b c1       	rjmp	.+534    	; 0x1b70 <__vector_1+0x2b2>
    195a:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <g_current_epoch>
    195e:	50 91 94 05 	lds	r21, 0x0594	; 0x800594 <g_current_epoch+0x1>
    1962:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <g_current_epoch+0x2>
    1966:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <g_current_epoch+0x3>
    196a:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    196e:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    1972:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    1976:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    197a:	48 17       	cp	r20, r24
    197c:	59 07       	cpc	r21, r25
    197e:	6a 07       	cpc	r22, r26
    1980:	7b 07       	cpc	r23, r27
    1982:	08 f4       	brcc	.+2      	; 0x1986 <__vector_1+0xc8>
    1984:	f5 c0       	rjmp	.+490    	; 0x1b70 <__vector_1+0x2b2>
    1986:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <g_current_epoch>
    198a:	50 91 94 05 	lds	r21, 0x0594	; 0x800594 <g_current_epoch+0x1>
    198e:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <g_current_epoch+0x2>
    1992:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <g_current_epoch+0x3>
    1996:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    199a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    199e:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    19a2:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    19a6:	48 17       	cp	r20, r24
    19a8:	59 07       	cpc	r21, r25
    19aa:	6a 07       	cpc	r22, r26
    19ac:	7b 07       	cpc	r23, r27
    19ae:	08 f4       	brcc	.+2      	; 0x19b2 <__vector_1+0xf4>
    19b0:	a7 c0       	rjmp	.+334    	; 0x1b00 <__vector_1+0x242>
    19b2:	de c0       	rjmp	.+444    	; 0x1b70 <__vector_1+0x2b2>
    19b4:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_use_rtc_for_startstop>
    19b8:	88 23       	and	r24, r24
    19ba:	d1 f0       	breq	.+52     	; 0x19f0 <__vector_1+0x132>
    19bc:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <g_current_epoch>
    19c0:	50 91 94 05 	lds	r21, 0x0594	; 0x800594 <g_current_epoch+0x1>
    19c4:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <g_current_epoch+0x2>
    19c8:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <g_current_epoch+0x3>
    19cc:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    19d0:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    19d4:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    19d8:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    19dc:	48 17       	cp	r20, r24
    19de:	59 07       	cpc	r21, r25
    19e0:	6a 07       	cpc	r22, r26
    19e2:	7b 07       	cpc	r23, r27
    19e4:	28 f0       	brcs	.+10     	; 0x19f0 <__vector_1+0x132>
    19e6:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_use_rtc_for_startstop>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_transmissions_disabled>
    19f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    19f4:	81 11       	cpse	r24, r1
    19f6:	bc c0       	rjmp	.+376    	; 0x1b70 <__vector_1+0x2b2>
    19f8:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <g_seconds_since_sync>
    19fc:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <g_seconds_since_sync+0x1>
    1a00:	a0 91 a2 05 	lds	r26, 0x05A2	; 0x8005a2 <g_seconds_since_sync+0x2>
    1a04:	b0 91 a3 05 	lds	r27, 0x05A3	; 0x8005a3 <g_seconds_since_sync+0x3>
    1a08:	89 2b       	or	r24, r25
    1a0a:	8a 2b       	or	r24, r26
    1a0c:	8b 2b       	or	r24, r27
    1a0e:	71 f4       	brne	.+28     	; 0x1a2c <__vector_1+0x16e>
    1a10:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_id_interval>
    1a14:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_id_interval+0x1>
    1a18:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <_ZZ10__vector_1E12id_countdown+0x1>
    1a1c:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ10__vector_1E12id_countdown>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_counter+0x1>
    1a28:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_counter>
    1a2c:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <g_seconds_since_sync>
    1a30:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <g_seconds_since_sync+0x1>
    1a34:	a0 91 a2 05 	lds	r26, 0x05A2	; 0x8005a2 <g_seconds_since_sync+0x2>
    1a38:	b0 91 a3 05 	lds	r27, 0x05A3	; 0x8005a3 <g_seconds_since_sync+0x3>
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	a1 1d       	adc	r26, r1
    1a40:	b1 1d       	adc	r27, r1
    1a42:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <g_seconds_since_sync>
    1a46:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <g_seconds_since_sync+0x1>
    1a4a:	a0 93 a2 05 	sts	0x05A2, r26	; 0x8005a2 <g_seconds_since_sync+0x2>
    1a4e:	b0 93 a3 05 	sts	0x05A3, r27	; 0x8005a3 <g_seconds_since_sync+0x3>
    1a52:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <g_fox_seconds_into_interval>
    1a56:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <g_fox_seconds_into_interval+0x1>
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <g_fox_seconds_into_interval+0x1>
    1a60:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <g_fox_seconds_into_interval>
    1a64:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ10__vector_1E12id_countdown>
    1a68:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZZ10__vector_1E12id_countdown+0x1>
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <__vector_1+0x1bc>
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <_ZZ10__vector_1E12id_countdown+0x1>
    1a76:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ10__vector_1E12id_countdown>
    1a7a:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_number_of_foxes>
    1a7e:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_number_of_foxes+0x1>
    1a82:	89 2b       	or	r24, r25
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <__vector_1+0x1ca>
    1a86:	74 c0       	rjmp	.+232    	; 0x1b70 <__vector_1+0x2b2>
    1a88:	60 91 a0 05 	lds	r22, 0x05A0	; 0x8005a0 <g_seconds_since_sync>
    1a8c:	70 91 a1 05 	lds	r23, 0x05A1	; 0x8005a1 <g_seconds_since_sync+0x1>
    1a90:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <g_seconds_since_sync+0x2>
    1a94:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <g_seconds_since_sync+0x3>
    1a98:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <g_on_air_interval>
    1a9c:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <g_on_air_interval+0x1>
    1aa0:	03 2e       	mov	r0, r19
    1aa2:	00 0c       	add	r0, r0
    1aa4:	44 0b       	sbc	r20, r20
    1aa6:	55 0b       	sbc	r21, r21
    1aa8:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__divmodsi4>
    1aac:	67 2b       	or	r22, r23
    1aae:	68 2b       	or	r22, r24
    1ab0:	69 2b       	or	r22, r25
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <__vector_1+0x1f8>
    1ab4:	47 c0       	rjmp	.+142    	; 0x1b44 <__vector_1+0x286>
    1ab6:	5c c0       	rjmp	.+184    	; 0x1b70 <__vector_1+0x2b2>
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_counter+0x1>
    1ac0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_counter>
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	8d e0       	ldi	r24, 0x0D	; 13
    1ac8:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <g_fox_transition>
    1ad2:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_fox_seconds_into_interval+0x1>
    1ad6:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_fox_seconds_into_interval>
    1ada:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ10__vector_1E12id_countdown>
    1ade:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZZ10__vector_1E12id_countdown+0x1>
    1ae2:	89 2b       	or	r24, r25
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <__vector_1+0x22a>
    1ae6:	44 c0       	rjmp	.+136    	; 0x1b70 <__vector_1+0x2b2>
    1ae8:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_id_interval>
    1aec:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_id_interval+0x1>
    1af0:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <_ZZ10__vector_1E12id_countdown+0x1>
    1af4:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ10__vector_1E12id_countdown>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_time_to_ID>
    1afe:	38 c0       	rjmp	.+112    	; 0x1b70 <__vector_1+0x2b2>
    1b00:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_LED_enunciating>
    1b04:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_transmissions_disabled>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	be 01       	movw	r22, r28
    1b12:	6f 5f       	subi	r22, 0xFF	; 255
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8c e1       	ldi	r24, 0x1C	; 28
    1b18:	95 e0       	ldi	r25, 0x05	; 5
    1b1a:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
    1b1e:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_pattern_codespeed>
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	82 e8       	ldi	r24, 0x82	; 130
    1b26:	9b e1       	ldi	r25, 0x1B	; 27
    1b28:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	6a e0       	ldi	r22, 0x0A	; 10
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    1b36:	66 0f       	add	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	70 93 99 05 	sts	0x0599, r23	; 0x800599 <g_code_throttle+0x1>
    1b3e:	60 93 98 05 	sts	0x0598, r22	; 0x800598 <g_code_throttle>
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <__vector_1+0x2b2>
    1b44:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_fox_counter>
    1b48:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <g_fox_counter+0x1>
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_counter+0x1>
    1b52:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_counter>
    1b56:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <g_fox_counter>
    1b5a:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <g_fox_counter+0x1>
    1b5e:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_number_of_foxes>
    1b62:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_number_of_foxes+0x1>
    1b66:	82 17       	cp	r24, r18
    1b68:	93 07       	cpc	r25, r19
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <__vector_1+0x2b0>
    1b6c:	af cf       	rjmp	.-162    	; 0x1acc <__vector_1+0x20e>
    1b6e:	a4 cf       	rjmp	.-184    	; 0x1ab8 <__vector_1+0x1fa>
    1b70:	0f 90       	pop	r0
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_14>:
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <_ZZ11__vector_14E6toggle>
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ11__vector_14E6toggle>
    1bc8:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_audio_tone_state>
    1bcc:	99 23       	and	r25, r25
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <__vector_14+0x50>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <__vector_14+0x46>
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	89 e0       	ldi	r24, 0x09	; 9
    1bd8:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <__vector_14+0x58>
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	89 e0       	ldi	r24, 0x09	; 9
    1be2:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <__vector_14+0x58>
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	89 e0       	ldi	r24, 0x09	; 9
    1bec:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1bf0:	ff 91       	pop	r31
    1bf2:	ef 91       	pop	r30
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	9f 91       	pop	r25
    1bfa:	8f 91       	pop	r24
    1bfc:	7f 91       	pop	r23
    1bfe:	6f 91       	pop	r22
    1c00:	5f 91       	pop	r21
    1c02:	4f 91       	pop	r20
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti

00001c12 <__vector_11>:
    1c12:	1f 92       	push	r1
    1c14:	0f 92       	push	r0
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	0f 92       	push	r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	8f 93       	push	r24
    1c1e:	9f 93       	push	r25
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
    1c24:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_AM_enabled>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <__vector_11+0x1c>
    1c2c:	5a c0       	rjmp	.+180    	; 0x1ce2 <__vector_11+0xd0>
    1c2e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_sendAMmodulation>
    1c32:	81 11       	cpse	r24, r1
    1c34:	3e c0       	rjmp	.+124    	; 0x1cb2 <__vector_11+0xa0>
    1c36:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ11__vector_11E5index>
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	3a c0       	rjmp	.+116    	; 0x1cb2 <__vector_11+0xa0>
    1c3e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_sendAMmodulationConstantly>
    1c42:	88 23       	and	r24, r24
    1c44:	e9 f0       	breq	.+58     	; 0x1c80 <__vector_11+0x6e>
    1c46:	45 c0       	rjmp	.+138    	; 0x1cd2 <__vector_11+0xc0>
    1c48:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <_ZZ11__vector_11E5index>
    1c4c:	98 b1       	in	r25, 0x08	; 8
    1c4e:	90 7f       	andi	r25, 0xF0	; 240
    1c50:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <g_byte0>
    1c54:	8f 70       	andi	r24, 0x0F	; 15
    1c56:	89 2b       	or	r24, r25
    1c58:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <g_hold>
    1c5c:	88 b9       	out	0x08, r24	; 8
    1c5e:	8b b1       	in	r24, 0x0b	; 11
    1c60:	98 2f       	mov	r25, r24
    1c62:	9c 7f       	andi	r25, 0xFC	; 252
    1c64:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <g_byte1>
    1c68:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <g_cp>
    1c6c:	80 73       	andi	r24, 0x30	; 48
    1c6e:	82 95       	swap	r24
    1c70:	8f 70       	andi	r24, 0x0F	; 15
    1c72:	89 2b       	or	r24, r25
    1c74:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <g_hold>
    1c78:	8b b9       	out	0x0b, r24	; 11
    1c7a:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_11E11controlPins>
    1c7e:	31 c0       	rjmp	.+98     	; 0x1ce2 <__vector_11+0xd0>
    1c80:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZZ11__vector_11E11controlPins>
    1c84:	8f 33       	cpi	r24, 0x3F	; 63
    1c86:	69 f1       	breq	.+90     	; 0x1ce2 <__vector_11+0xd0>
    1c88:	8f e3       	ldi	r24, 0x3F	; 63
    1c8a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZZ11__vector_11E11controlPins>
    1c8e:	88 b1       	in	r24, 0x08	; 8
    1c90:	80 7f       	andi	r24, 0xF0	; 240
    1c92:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <g_byte0>
    1c96:	8f 60       	ori	r24, 0x0F	; 15
    1c98:	88 b9       	out	0x08, r24	; 8
    1c9a:	8b b1       	in	r24, 0x0b	; 11
    1c9c:	8c 7f       	andi	r24, 0xFC	; 252
    1c9e:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <g_byte1>
    1ca2:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ11__vector_11E11controlPins>
    1ca6:	90 73       	andi	r25, 0x30	; 48
    1ca8:	92 95       	swap	r25
    1caa:	9f 70       	andi	r25, 0x0F	; 15
    1cac:	89 2b       	or	r24, r25
    1cae:	8b b9       	out	0x0b, r24	; 11
    1cb0:	18 c0       	rjmp	.+48     	; 0x1ce2 <__vector_11+0xd0>
    1cb2:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <_ZZ11__vector_11E5index>
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	9e 0f       	add	r25, r30
    1cba:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <_ZZ11__vector_11E5index>
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	e9 59       	subi	r30, 0x99	; 153
    1cc2:	fa 4f       	sbci	r31, 0xFA	; 250
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <g_cp>
    1cca:	90 32       	cpi	r25, 0x20	; 32
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <__vector_11+0xbe>
    1cce:	bc cf       	rjmp	.-136    	; 0x1c48 <__vector_11+0x36>
    1cd0:	bd cf       	rjmp	.-134    	; 0x1c4c <__vector_11+0x3a>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ11__vector_11E5index>
    1cd8:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <g_dataModulation>
    1cdc:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <g_cp>
    1ce0:	b5 cf       	rjmp	.-150    	; 0x1c4c <__vector_11+0x3a>
    1ce2:	ff 91       	pop	r31
    1ce4:	ef 91       	pop	r30
    1ce6:	9f 91       	pop	r25
    1ce8:	8f 91       	pop	r24
    1cea:	0f 90       	pop	r0
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	0f 90       	pop	r0
    1cf0:	1f 90       	pop	r1
    1cf2:	18 95       	reti

00001cf4 <_Z23clockConfigurationCheckv>:
    1cf4:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    1cf8:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    1cfc:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    1d00:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    1d04:	81 15       	cp	r24, r1
    1d06:	96 46       	sbci	r25, 0x66	; 102
    1d08:	ae 4e       	sbci	r26, 0xEE	; 238
    1d0a:	bf 45       	sbci	r27, 0x5F	; 95
    1d0c:	08 f4       	brcc	.+2      	; 0x1d10 <_Z23clockConfigurationCheckv+0x1c>
    1d0e:	67 c0       	rjmp	.+206    	; 0x1dde <_Z23clockConfigurationCheckv+0xea>
    1d10:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    1d14:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    1d18:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    1d1c:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    1d20:	81 15       	cp	r24, r1
    1d22:	96 46       	sbci	r25, 0x66	; 102
    1d24:	ae 4e       	sbci	r26, 0xEE	; 238
    1d26:	bf 45       	sbci	r27, 0x5F	; 95
    1d28:	08 f4       	brcc	.+2      	; 0x1d2c <_Z23clockConfigurationCheckv+0x38>
    1d2a:	5b c0       	rjmp	.+182    	; 0x1de2 <_Z23clockConfigurationCheckv+0xee>
    1d2c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    1d30:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    1d34:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    1d38:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    1d3c:	81 15       	cp	r24, r1
    1d3e:	96 46       	sbci	r25, 0x66	; 102
    1d40:	ae 4e       	sbci	r26, 0xEE	; 238
    1d42:	bf 45       	sbci	r27, 0x5F	; 95
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <_Z23clockConfigurationCheckv+0x54>
    1d46:	4f c0       	rjmp	.+158    	; 0x1de6 <_Z23clockConfigurationCheckv+0xf2>
    1d48:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch>
    1d4c:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    1d50:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    1d54:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    1d58:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    1d5c:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    1d60:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    1d64:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    1d68:	84 17       	cp	r24, r20
    1d6a:	95 07       	cpc	r25, r21
    1d6c:	a6 07       	cpc	r26, r22
    1d6e:	b7 07       	cpc	r27, r23
    1d70:	e0 f5       	brcc	.+120    	; 0x1dea <_Z23clockConfigurationCheckv+0xf6>
    1d72:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <g_current_epoch>
    1d76:	50 91 94 05 	lds	r21, 0x0594	; 0x800594 <g_current_epoch+0x1>
    1d7a:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <g_current_epoch+0x2>
    1d7e:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <g_current_epoch+0x3>
    1d82:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    1d86:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    1d8a:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    1d8e:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    1d92:	84 17       	cp	r24, r20
    1d94:	95 07       	cpc	r25, r21
    1d96:	a6 07       	cpc	r26, r22
    1d98:	b7 07       	cpc	r27, r23
    1d9a:	48 f1       	brcs	.+82     	; 0x1dee <_Z23clockConfigurationCheckv+0xfa>
    1d9c:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <g_current_epoch>
    1da0:	50 91 94 05 	lds	r21, 0x0594	; 0x800594 <g_current_epoch+0x1>
    1da4:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <g_current_epoch+0x2>
    1da8:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <g_current_epoch+0x3>
    1dac:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    1db0:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    1db4:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    1db8:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    1dbc:	84 17       	cp	r24, r20
    1dbe:	95 07       	cpc	r25, r21
    1dc0:	a6 07       	cpc	r26, r22
    1dc2:	b7 07       	cpc	r27, r23
    1dc4:	30 f4       	brcc	.+12     	; 0x1dd2 <_Z23clockConfigurationCheckv+0xde>
    1dc6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    1dca:	81 11       	cpse	r24, r1
    1dcc:	12 c0       	rjmp	.+36     	; 0x1df2 <_Z23clockConfigurationCheckv+0xfe>
    1dce:	85 e0       	ldi	r24, 0x05	; 5
    1dd0:	08 95       	ret
    1dd2:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_use_rtc_for_startstop>
    1dd6:	88 23       	and	r24, r24
    1dd8:	71 f0       	breq	.+28     	; 0x1df6 <_Z23clockConfigurationCheckv+0x102>
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	08 95       	ret
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	08 95       	ret
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	08 95       	ret
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	08 95       	ret
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	08 95       	ret
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	08 95       	ret
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	08 95       	ret
    1df6:	84 e0       	ldi	r24, 0x04	; 4
    1df8:	08 95       	ret

00001dfa <_Z13sendMorseToneh>:
    1dfa:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <g_fox_tone_offset>
    1dfe:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <g_fox_tone_offset+0x1>
    1e02:	9f e2       	ldi	r25, 0x2F	; 47
    1e04:	92 1b       	sub	r25, r18
    1e06:	97 bd       	out	0x27, r25	; 39
    1e08:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_audio_tone_state>
    1e0c:	08 95       	ret

00001e0e <__vector_8>:
    1e0e:	1f 92       	push	r1
    1e10:	0f 92       	push	r0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	2f 93       	push	r18
    1e1a:	3f 93       	push	r19
    1e1c:	4f 93       	push	r20
    1e1e:	5f 93       	push	r21
    1e20:	6f 93       	push	r22
    1e22:	7f 93       	push	r23
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <__vector_8+0x28>
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_tick_count>
    1e3e:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <g_tick_count+0x1>
    1e42:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <g_tick_count+0x2>
    1e46:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <g_tick_count+0x3>
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	b1 1d       	adc	r27, r1
    1e50:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_tick_count>
    1e54:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <g_tick_count+0x1>
    1e58:	a0 93 11 05 	sts	0x0511, r26	; 0x800511 <g_tick_count+0x2>
    1e5c:	b0 93 12 05 	sts	0x0512, r27	; 0x800512 <g_tick_count+0x3>
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	1a 82       	std	Y+2, r1	; 0x02
    1e66:	84 e0       	ldi	r24, 0x04	; 4
    1e68:	0e 94 1c 02 	call	0x438	; 0x438 <_Z11digitalReadh>
    1e6c:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_reset_button_held>
    1e70:	99 23       	and	r25, r25
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <__vector_8+0x68>
    1e74:	1b c1       	rjmp	.+566    	; 0x20ac <__vector_8+0x29e>
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__vector_8+0x6e>
    1e7a:	1b c1       	rjmp	.+566    	; 0x20b2 <__vector_8+0x2a4>
    1e7c:	17 c1       	rjmp	.+558    	; 0x20ac <__vector_8+0x29e>
    1e7e:	44 e0       	ldi	r20, 0x04	; 4
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	40 93 9c 05 	sts	0x059C, r20	; 0x80059c <g_seconds_since_powerup>
    1e8a:	50 93 9d 05 	sts	0x059D, r21	; 0x80059d <g_seconds_since_powerup+0x1>
    1e8e:	60 93 9e 05 	sts	0x059E, r22	; 0x80059e <g_seconds_since_powerup+0x2>
    1e92:	70 93 9f 05 	sts	0x059F, r23	; 0x80059f <g_seconds_since_powerup+0x3>
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <g_perform_EEPROM_reset>
    1e9c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1ea0:	89 13       	cpse	r24, r25
    1ea2:	25 c0       	rjmp	.+74     	; 0x1eee <__vector_8+0xe0>
    1ea4:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_sync_pin_timer>
    1ea8:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_sync_pin_timer+0x1>
    1eac:	2b 3b       	cpi	r18, 0xBB	; 187
    1eae:	30 41       	sbci	r19, 0x10	; 16
    1eb0:	54 f4       	brge	.+20     	; 0x1ec6 <__vector_8+0xb8>
    1eb2:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_sync_pin_timer>
    1eb6:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_sync_pin_timer+0x1>
    1eba:	2f 5f       	subi	r18, 0xFF	; 255
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	30 93 57 05 	sts	0x0557, r19	; 0x800557 <g_sync_pin_timer+0x1>
    1ec2:	20 93 56 05 	sts	0x0556, r18	; 0x800556 <g_sync_pin_timer>
    1ec6:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_sync_pin_timer>
    1eca:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_sync_pin_timer+0x1>
    1ece:	20 39       	cpi	r18, 0x90	; 144
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	9c f0       	brlt	.+38     	; 0x1efa <__vector_8+0xec>
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <__vector_8+0xcc>
    1ed8:	fb c0       	rjmp	.+502    	; 0x20d0 <__vector_8+0x2c2>
    1eda:	92 e0       	ldi	r25, 0x02	; 2
    1edc:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_sync_pin_stable>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	0b c0       	rjmp	.+22     	; 0x1efa <__vector_8+0xec>
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	8d e0       	ldi	r24, 0x0D	; 13
    1ee8:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <__vector_8+0xec>
    1eee:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1ef2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_sync_pin_timer+0x1>
    1ef6:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_sync_pin_timer>
    1efa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    1efe:	81 11       	cpse	r24, r1
    1f00:	eb c0       	rjmp	.+470    	; 0x20d8 <__vector_8+0x2ca>
    1f02:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_on_the_air>
    1f06:	81 11       	cpse	r24, r1
    1f08:	ed c0       	rjmp	.+474    	; 0x20e4 <__vector_8+0x2d6>
    1f0a:	e6 c0       	rjmp	.+460    	; 0x20d8 <__vector_8+0x2ca>
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
    1f0e:	88 e0       	ldi	r24, 0x08	; 8
    1f10:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1f14:	84 e9       	ldi	r24, 0x94	; 148
    1f16:	95 e0       	ldi	r25, 0x05	; 5
    1f18:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10__vector_8E9ptt_delay+0x1>
    1f1c:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10__vector_8E9ptt_delay>
    1f20:	e7 c0       	rjmp	.+462    	; 0x20f0 <__vector_8+0x2e2>
    1f22:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ10__vector_8E9ptt_delay>
    1f26:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ10__vector_8E9ptt_delay+0x1>
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <__vector_8+0x12c>
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10__vector_8E9ptt_delay+0x1>
    1f34:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10__vector_8E9ptt_delay>
    1f38:	db c0       	rjmp	.+438    	; 0x20f0 <__vector_8+0x2e2>
    1f3a:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ10__vector_8E7codeInc>
    1f3e:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	99 f1       	breq	.+102    	; 0x1fac <__vector_8+0x19e>
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    1f4c:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ10__vector_8E7codeInc>
    1f50:	89 2b       	or	r24, r25
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <__vector_8+0x148>
    1f54:	cd c0       	rjmp	.+410    	; 0x20f0 <__vector_8+0x2e2>
    1f56:	ae 01       	movw	r20, r28
    1f58:	4e 5f       	subi	r20, 0xFE	; 254
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	be 01       	movw	r22, r28
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
    1f6a:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_ZZ10__vector_8E3key>
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	81 11       	cpse	r24, r1
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <__vector_8+0x17c>
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	88 23       	and	r24, r24
    1f78:	41 f0       	breq	.+16     	; 0x1f8a <__vector_8+0x17c>
    1f7a:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ10__vector_8E3key>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_callsign_sent>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_Z13sendMorseToneh>
    1f8a:	60 91 92 04 	lds	r22, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    1f8e:	8d e0       	ldi	r24, 0x0D	; 13
    1f90:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1f94:	60 91 92 04 	lds	r22, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    1f98:	8a e0       	ldi	r24, 0x0A	; 10
    1f9a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1f9e:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    1fa2:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_sendAMmodulation>
    1fa6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_Z13sendMorseToneh>
    1faa:	a2 c0       	rjmp	.+324    	; 0x20f0 <__vector_8+0x2e2>
    1fac:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_sync_pin_stable>
    1fb0:	82 30       	cpi	r24, 0x02	; 2
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <__vector_8+0x1b0>
    1fb4:	60 91 92 04 	lds	r22, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    1fb8:	8d e0       	ldi	r24, 0x0D	; 13
    1fba:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1fbe:	60 91 92 04 	lds	r22, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    1fc2:	8a e0       	ldi	r24, 0x0A	; 10
    1fc4:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    1fc8:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    1fcc:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_sendAMmodulation>
    1fd0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_Z13sendMorseToneh>
    1fd4:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_code_throttle>
    1fd8:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_code_throttle+0x1>
    1fdc:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    1fe0:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ10__vector_8E7codeInc>
    1fe4:	85 c0       	rjmp	.+266    	; 0x20f0 <__vector_8+0x2e2>
    1fe6:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ10__vector_8E9ptt_delay>
    1fea:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ10__vector_8E9ptt_delay+0x1>
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	39 f4       	brne	.+14     	; 0x2000 <__vector_8+0x1f2>
    1ff2:	84 e6       	ldi	r24, 0x64	; 100
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10__vector_8E9ptt_delay+0x1>
    1ffa:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10__vector_8E9ptt_delay>
    1ffe:	0b c0       	rjmp	.+22     	; 0x2016 <__vector_8+0x208>
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10__vector_8E9ptt_delay+0x1>
    2006:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10__vector_8E9ptt_delay>
    200a:	89 2b       	or	r24, r25
    200c:	21 f4       	brne	.+8      	; 0x2016 <__vector_8+0x208>
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	88 e0       	ldi	r24, 0x08	; 8
    2012:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    2016:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_LED_enunciating>
    201a:	88 23       	and	r24, r24
    201c:	79 f1       	breq	.+94     	; 0x207c <__vector_8+0x26e>
    201e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ10__vector_8E7codeInc>
    2022:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	01 f1       	breq	.+64     	; 0x206a <__vector_8+0x25c>
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    2030:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ10__vector_8E7codeInc>
    2034:	89 2b       	or	r24, r25
    2036:	81 f5       	brne	.+96     	; 0x2098 <__vector_8+0x28a>
    2038:	ae 01       	movw	r20, r28
    203a:	4e 5f       	subi	r20, 0xFE	; 254
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
    203e:	be 01       	movw	r22, r28
    2040:	6f 5f       	subi	r22, 0xFF	; 255
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
    204c:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_ZZ10__vector_8E3key>
    2050:	68 2f       	mov	r22, r24
    2052:	8d e0       	ldi	r24, 0x0D	; 13
    2054:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    2058:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_code_throttle>
    205c:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_code_throttle+0x1>
    2060:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    2064:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ10__vector_8E7codeInc>
    2068:	17 c0       	rjmp	.+46     	; 0x2098 <__vector_8+0x28a>
    206a:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_code_throttle>
    206e:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_code_throttle+0x1>
    2072:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <_ZZ10__vector_8E7codeInc+0x1>
    2076:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ10__vector_8E7codeInc>
    207a:	0e c0       	rjmp	.+28     	; 0x2098 <__vector_8+0x28a>
    207c:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ10__vector_8E3key>
    2080:	88 23       	and	r24, r24
    2082:	51 f0       	breq	.+20     	; 0x2098 <__vector_8+0x28a>
    2084:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ10__vector_8E3key>
    2088:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_sync_pin_stable>
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	21 f0       	breq	.+8      	; 0x2098 <__vector_8+0x28a>
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	8d e0       	ldi	r24, 0x0D	; 13
    2094:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	8a e0       	ldi	r24, 0x0A	; 10
    209c:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    20a0:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_sendAMmodulation>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_Z13sendMorseToneh>
    20aa:	22 c0       	rjmp	.+68     	; 0x20f0 <__vector_8+0x2e2>
    20ac:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_reset_button_held>
    20b0:	f5 ce       	rjmp	.-534    	; 0x1e9c <__vector_8+0x8e>
    20b2:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <g_seconds_since_powerup>
    20b6:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <g_seconds_since_powerup+0x1>
    20ba:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <g_seconds_since_powerup+0x2>
    20be:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <g_seconds_since_powerup+0x3>
    20c2:	43 30       	cpi	r20, 0x03	; 3
    20c4:	51 05       	cpc	r21, r1
    20c6:	61 05       	cpc	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	09 f0       	breq	.+2      	; 0x20ce <__vector_8+0x2c0>
    20cc:	e7 ce       	rjmp	.-562    	; 0x1e9c <__vector_8+0x8e>
    20ce:	d7 ce       	rjmp	.-594    	; 0x1e7e <__vector_8+0x70>
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_sync_pin_stable>
    20d6:	11 cf       	rjmp	.-478    	; 0x1efa <__vector_8+0xec>
    20d8:	88 e0       	ldi	r24, 0x08	; 8
    20da:	0e 94 1c 02 	call	0x438	; 0x438 <_Z11digitalReadh>
    20de:	81 11       	cpse	r24, r1
    20e0:	82 cf       	rjmp	.-252    	; 0x1fe6 <__vector_8+0x1d8>
    20e2:	99 cf       	rjmp	.-206    	; 0x2016 <__vector_8+0x208>
    20e4:	88 e0       	ldi	r24, 0x08	; 8
    20e6:	0e 94 1c 02 	call	0x438	; 0x438 <_Z11digitalReadh>
    20ea:	81 11       	cpse	r24, r1
    20ec:	1a cf       	rjmp	.-460    	; 0x1f22 <__vector_8+0x114>
    20ee:	0e cf       	rjmp	.-484    	; 0x1f0c <__vector_8+0xfe>
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	ff 91       	pop	r31
    20fa:	ef 91       	pop	r30
    20fc:	bf 91       	pop	r27
    20fe:	af 91       	pop	r26
    2100:	9f 91       	pop	r25
    2102:	8f 91       	pop	r24
    2104:	7f 91       	pop	r23
    2106:	6f 91       	pop	r22
    2108:	5f 91       	pop	r21
    210a:	4f 91       	pop	r20
    210c:	3f 91       	pop	r19
    210e:	2f 91       	pop	r18
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	0f 90       	pop	r0
    2116:	1f 90       	pop	r1
    2118:	18 95       	reti

0000211a <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox, EventAction_t action)
{
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	00 d0       	rcall	.+0      	; 0x2120 <_Z11setupForFoxP5Fox_t13EventAction_t+0x6>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	if(fox)
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	31 f0       	breq	.+12     	; 0x2134 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a>
	{
		if(*fox != INVALID_FOX)
    2128:	fc 01       	movw	r30, r24
    212a:	80 81       	ld	r24, Z
    212c:	82 31       	cpi	r24, 0x12	; 18
    212e:	11 f0       	breq	.+4      	; 0x2134 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1a>
		{
			g_fox = *fox;
    2130:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <g_fox>
		}
	}

	cli();
    2134:	f8 94       	cli

	switch(g_fox)
    2136:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    213a:	8d 30       	cpi	r24, 0x0D	; 13
    213c:	30 f4       	brcc	.+12     	; 0x214a <_Z11setupForFoxP5Fox_t13EventAction_t+0x30>
    213e:	88 30       	cpi	r24, 0x08	; 8
    2140:	30 f5       	brcc	.+76     	; 0x218e <_Z11setupForFoxP5Fox_t13EventAction_t+0x74>
    2142:	81 50       	subi	r24, 0x01	; 1
    2144:	85 30       	cpi	r24, 0x05	; 5
    2146:	28 f0       	brcs	.+10     	; 0x2152 <_Z11setupForFoxP5Fox_t13EventAction_t+0x38>
    2148:	64 c0       	rjmp	.+200    	; 0x2212 <_Z11setupForFoxP5Fox_t13EventAction_t+0xf8>
    214a:	82 31       	cpi	r24, 0x12	; 18
    214c:	08 f4       	brcc	.+2      	; 0x2150 <_Z11setupForFoxP5Fox_t13EventAction_t+0x36>
    214e:	41 c0       	rjmp	.+130    	; 0x21d2 <_Z11setupForFoxP5Fox_t13EventAction_t+0xb8>
    2150:	60 c0       	rjmp	.+192    	; 0x2212 <_Z11setupForFoxP5Fox_t13EventAction_t+0xf8>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval = 60;
    2152:	8c e3       	ldi	r24, 0x3C	; 60
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <g_on_air_interval+0x1>
    215a:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_on_air_interval>
			g_cycle_period_seconds = 300;
    215e:	2c e2       	ldi	r18, 0x2C	; 44
    2160:	31 e0       	ldi	r19, 0x01	; 1
    2162:	30 93 64 05 	sts	0x0564, r19	; 0x800564 <g_cycle_period_seconds+0x1>
    2166:	20 93 63 05 	sts	0x0563, r18	; 0x800563 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    216a:	25 e0       	ldi	r18, 0x05	; 5
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <g_number_of_foxes+0x1>
    2172:	20 93 5f 05 	sts	0x055F, r18	; 0x80055f <g_number_of_foxes>
			g_fox_id_offset = 0;
    2176:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_fox_id_offset+0x1>
    217a:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_fox_id_offset>
			g_pattern_codespeed = 8;
    217e:	28 e0       	ldi	r18, 0x08	; 8
    2180:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
			g_id_interval = 60;
    2184:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    2188:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
		}
		break;
    218c:	55 c0       	rjmp	.+170    	; 0x2238 <_Z11setupForFoxP5Fox_t13EventAction_t+0x11e>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval = 12;
    218e:	8c e0       	ldi	r24, 0x0C	; 12
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <g_on_air_interval+0x1>
    2196:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_on_air_interval>
			g_cycle_period_seconds = 60;
    219a:	8c e3       	ldi	r24, 0x3C	; 60
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <g_cycle_period_seconds+0x1>
    21a2:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    21a6:	85 e0       	ldi	r24, 0x05	; 5
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <g_number_of_foxes+0x1>
    21ae:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    21b2:	88 e0       	ldi	r24, 0x08	; 8
    21b4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1;
    21b8:	88 e0       	ldi	r24, 0x08	; 8
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_fox_id_offset+0x1>
    21c0:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_fox_id_offset>
			g_id_interval = 600;
    21c4:	88 e5       	ldi	r24, 0x58	; 88
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    21cc:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
		}
		break;
    21d0:	33 c0       	rjmp	.+102    	; 0x2238 <_Z11setupForFoxP5Fox_t13EventAction_t+0x11e>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval = 12;
    21d2:	8c e0       	ldi	r24, 0x0C	; 12
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <g_on_air_interval+0x1>
    21da:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_on_air_interval>
			g_cycle_period_seconds = 60;
    21de:	2c e3       	ldi	r18, 0x3C	; 60
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	30 93 64 05 	sts	0x0564, r19	; 0x800564 <g_cycle_period_seconds+0x1>
    21e6:	20 93 63 05 	sts	0x0563, r18	; 0x800563 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    21ea:	25 e0       	ldi	r18, 0x05	; 5
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <g_number_of_foxes+0x1>
    21f2:	20 93 5f 05 	sts	0x055F, r18	; 0x80055f <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    21f6:	2f e0       	ldi	r18, 0x0F	; 15
    21f8:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    21fc:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_fox_id_offset+0x1>
    2200:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_fox_id_offset>
			g_id_interval = 600;
    2204:	88 e5       	ldi	r24, 0x58	; 88
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    220c:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
		}
		break;
    2210:	13 c0       	rjmp	.+38     	; 0x2238 <_Z11setupForFoxP5Fox_t13EventAction_t+0x11e>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    2212:	88 e5       	ldi	r24, 0x58	; 88
    2214:	92 e0       	ldi	r25, 0x02	; 2
    2216:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <g_on_air_interval+0x1>
    221a:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <g_on_air_interval>
			g_number_of_foxes = 1;
    221e:	21 e0       	ldi	r18, 0x01	; 1
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <g_number_of_foxes+0x1>
    2226:	20 93 5f 05 	sts	0x055F, r18	; 0x80055f <g_number_of_foxes>
			g_pattern_codespeed = 8;
    222a:	28 e0       	ldi	r18, 0x08	; 8
    222c:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
			g_id_interval = 600;
    2230:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    2234:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
		}
		break;
	}

	if(action == START_NOTHING)
    2238:	63 30       	cpi	r22, 0x03	; 3
    223a:	31 f4       	brne	.+12     	; 0x2248 <_Z11setupForFoxP5Fox_t13EventAction_t+0x12e>
	{
		g_use_rtc_for_startstop = FALSE;
    223c:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_transmissions_disabled>
    2246:	d1 c0       	rjmp	.+418    	; 0x23ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>
	}
	else if(action == START_EVENT_NOW)
    2248:	61 11       	cpse	r22, r1
    224a:	17 c0       	rjmp	.+46     	; 0x227a <_Z11setupForFoxP5Fox_t13EventAction_t+0x160>
	{
		g_fox_counter = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_counter+0x1>
    2254:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_counter>
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    2258:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <g_seconds_since_sync>
    225c:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <g_seconds_since_sync+0x1>
    2260:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <g_seconds_since_sync+0x2>
    2264:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <g_seconds_since_sync+0x3>
		g_fox_seconds_into_interval = 0;
    2268:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_fox_seconds_into_interval+0x1>
    226c:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_fox_seconds_into_interval>
		g_use_rtc_for_startstop = FALSE;
    2270:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    2274:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_transmissions_disabled>
    2278:	b8 c0       	rjmp	.+368    	; 0x23ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>
	}
	else if(action == START_TRANSMISSIONS_NOW)                      /* Immediately start transmitting, regardless RTC or time slot */
    227a:	61 30       	cpi	r22, 0x01	; 1
    227c:	99 f5       	brne	.+102    	; 0x22e4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ca>
	{
		g_fox_counter = g_fox;
    227e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_counter+0x1>
    2288:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_counter>
		g_seconds_since_sync = g_fox_counter * g_on_air_interval;   /* Total elapsed time counter */
    228c:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <g_fox_counter>
    2290:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <g_fox_counter+0x1>
    2294:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <g_on_air_interval>
    2298:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <g_on_air_interval+0x1>
    229c:	42 9f       	mul	r20, r18
    229e:	c0 01       	movw	r24, r0
    22a0:	43 9f       	mul	r20, r19
    22a2:	90 0d       	add	r25, r0
    22a4:	52 9f       	mul	r21, r18
    22a6:	90 0d       	add	r25, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	09 2e       	mov	r0, r25
    22ac:	00 0c       	add	r0, r0
    22ae:	aa 0b       	sbc	r26, r26
    22b0:	bb 0b       	sbc	r27, r27
    22b2:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <g_seconds_since_sync>
    22b6:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <g_seconds_since_sync+0x1>
    22ba:	a0 93 a2 05 	sts	0x05A2, r26	; 0x8005a2 <g_seconds_since_sync+0x2>
    22be:	b0 93 a3 05 	sts	0x05A3, r27	; 0x8005a3 <g_seconds_since_sync+0x3>
		g_fox_seconds_into_interval = g_seconds_since_sync;
    22c2:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <g_seconds_since_sync>
    22c6:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <g_seconds_since_sync+0x1>
    22ca:	a0 91 a2 05 	lds	r26, 0x05A2	; 0x8005a2 <g_seconds_since_sync+0x2>
    22ce:	b0 91 a3 05 	lds	r27, 0x05A3	; 0x8005a3 <g_seconds_since_sync+0x3>
    22d2:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <g_fox_seconds_into_interval+0x1>
    22d6:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <g_fox_seconds_into_interval>
		g_use_rtc_for_startstop = FALSE;
    22da:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    22de:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_transmissions_disabled>
    22e2:	83 c0       	rjmp	.+262    	; 0x23ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    22e4:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
    22e8:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    22ec:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    22f0:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    22f4:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    22f8:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    22fc:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2300:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2304:	48 17       	cp	r20, r24
    2306:	59 07       	cpc	r21, r25
    2308:	6a 07       	cpc	r22, r26
    230a:	7b 07       	cpc	r23, r27
    230c:	08 f0       	brcs	.+2      	; 0x2310 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f6>
    230e:	56 c0       	rjmp	.+172    	; 0x23bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x2a2>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    2310:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    2314:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2318:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    231c:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2320:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
    2324:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    2328:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    232c:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    2330:	84 1b       	sub	r24, r20
    2332:	95 0b       	sbc	r25, r21
    2334:	a6 0b       	sbc	r26, r22
    2336:	b7 0b       	sbc	r27, r23
    2338:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <g_seconds_since_sync>
    233c:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <g_seconds_since_sync+0x1>
    2340:	a0 93 a2 05 	sts	0x05A2, r26	; 0x8005a2 <g_seconds_since_sync+0x2>
    2344:	b0 93 a3 05 	sts	0x05A3, r27	; 0x8005a3 <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval = g_seconds_since_sync % g_cycle_period_seconds;
    2348:	60 91 a0 05 	lds	r22, 0x05A0	; 0x8005a0 <g_seconds_since_sync>
    234c:	70 91 a1 05 	lds	r23, 0x05A1	; 0x8005a1 <g_seconds_since_sync+0x1>
    2350:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <g_seconds_since_sync+0x2>
    2354:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <g_seconds_since_sync+0x3>
    2358:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <g_cycle_period_seconds>
    235c:	30 91 64 05 	lds	r19, 0x0564	; 0x800564 <g_cycle_period_seconds+0x1>
    2360:	03 2e       	mov	r0, r19
    2362:	00 0c       	add	r0, r0
    2364:	44 0b       	sbc	r20, r20
    2366:	55 0b       	sbc	r21, r21
    2368:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__divmodsi4>
    236c:	70 93 62 05 	sts	0x0562, r23	; 0x800562 <g_fox_seconds_into_interval+0x1>
    2370:	60 93 61 05 	sts	0x0561, r22	; 0x800561 <g_fox_seconds_into_interval>
			g_fox_counter = CLAMP(1, 1 + (g_fox_seconds_into_interval / g_on_air_interval), g_number_of_foxes);
    2374:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <g_fox_seconds_into_interval>
    2378:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <g_fox_seconds_into_interval+0x1>
    237c:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <g_on_air_interval>
    2380:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <g_on_air_interval+0x1>
    2384:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    2388:	6f 5f       	subi	r22, 0xFF	; 255
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_number_of_foxes>
    2390:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_number_of_foxes+0x1>
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	86 17       	cp	r24, r22
    239e:	97 07       	cpc	r25, r23
    23a0:	34 f0       	brlt	.+12     	; 0x23ae <_Z11setupForFoxP5Fox_t13EventAction_t+0x294>
    23a2:	16 16       	cp	r1, r22
    23a4:	17 06       	cpc	r1, r23
    23a6:	2c f0       	brlt	.+10     	; 0x23b2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x298>
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x298>
    23ae:	69 81       	ldd	r22, Y+1	; 0x01
    23b0:	7a 81       	ldd	r23, Y+2	; 0x02
    23b2:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <g_fox_counter+0x1>
    23b6:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <g_fox_counter>
    23ba:	12 c0       	rjmp	.+36     	; 0x23e0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2c6>
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    23bc:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <g_seconds_since_sync>
    23c0:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <g_seconds_since_sync+0x1>
    23c4:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <g_seconds_since_sync+0x2>
    23c8:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_fox_counter+0x1>
    23d4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_fox_counter>
			g_fox_seconds_into_interval = 0;
    23d8:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_fox_seconds_into_interval+0x1>
    23dc:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_fox_seconds_into_interval>
		}


		g_use_rtc_for_startstop = TRUE;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    23e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_transmissions_disabled>
	}

	g_fox_tone_offset = g_fox_counter;
    23ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_fox_counter>
    23ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <g_fox_counter+0x1>
    23f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_tone_offset+0x1>
    23f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_tone_offset>

	sendMorseTone(OFF);
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_Z13sendMorseToneh>
	g_time_to_ID = FALSE;
    2400:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_time_to_ID>
	g_callsign_sent = TRUE;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_callsign_sent>
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    240a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_code_throttle+0x1>
    240e:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_code_throttle>
	g_fox_transition = FALSE;
    2412:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>

	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    2416:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    241a:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <g_config_error>
	digitalWrite(PIN_LED2, OFF);            /*  LED Off - in case it was left on */
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	8d e0       	ldi	r24, 0x0D	; 13
    2422:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>


	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	8a e0       	ldi	r24, 0x0A	; 10
    242a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    242e:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    2432:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2436:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <g_config_error>

	sei();
    243a:	78 94       	sei
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    2446:	ea e7       	ldi	r30, 0x7A	; 122
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	86 fd       	sbrc	r24, 6
    244e:	fd cf       	rjmp	.-6      	; 0x244a <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    2450:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2454:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    2458:	ea e7       	ldi	r30, 0x7A	; 122
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	90 81       	ld	r25, Z
    245e:	90 64       	ori	r25, 0x40	; 64
    2460:	90 83       	st	Z, r25
	return( result);
}
    2462:	c9 01       	movw	r24, r18
    2464:	08 95       	ret

00002466 <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    2466:	88 ec       	ldi	r24, 0xC8	; 200
    2468:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    246c:	ea e7       	ldi	r30, 0x7A	; 122
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	87 e0       	ldi	r24, 0x07	; 7
    2472:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    2474:	80 81       	ld	r24, Z
    2476:	80 68       	ori	r24, 0x80	; 128
    2478:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    247a:	80 81       	ld	r24, Z
    247c:	80 64       	ori	r24, 0x40	; 64
    247e:	80 83       	st	Z, r24
	readADC();
    2480:	0e 94 23 12 	call	0x2446	; 0x2446 <_Z7readADCv>
    2484:	08 95       	ret

00002486 <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    248e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <g_atmega_temp_calibration>
    2492:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <g_atmega_temp_calibration+0x1>
    2496:	07 2e       	mov	r0, r23
    2498:	00 0c       	add	r0, r0
    249a:	88 0b       	sbc	r24, r24
    249c:	99 0b       	sbc	r25, r25
    249e:	0e 94 ba 29 	call	0x5374	; 0x5374 <__floatsisf>
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 10 29 	call	0x5220	; 0x5220 <__divsf3>
    24ae:	06 2f       	mov	r16, r22
    24b0:	17 2f       	mov	r17, r23
    24b2:	d8 2f       	mov	r29, r24
    24b4:	c9 2f       	mov	r28, r25
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	48 e4       	ldi	r20, 0x48	; 72
    24bc:	53 e4       	ldi	r21, 0x43	; 67
    24be:	0e 94 a9 2a 	call	0x5552	; 0x5552 <__gesf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	6c f0       	brlt	.+26     	; 0x24e0 <_Z7getTempv+0x5a>
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	48 e4       	ldi	r20, 0x48	; 72
    24cc:	53 ec       	ldi	r21, 0xC3	; 195
    24ce:	60 2f       	mov	r22, r16
    24d0:	71 2f       	mov	r23, r17
    24d2:	8d 2f       	mov	r24, r29
    24d4:	9c 2f       	mov	r25, r28
    24d6:	0e 94 06 29 	call	0x520c	; 0x520c <__cmpsf2>
    24da:	88 23       	and	r24, r24
    24dc:	34 f0       	brlt	.+12     	; 0x24ea <_Z7getTempv+0x64>
    24de:	09 c0       	rjmp	.+18     	; 0x24f2 <_Z7getTempv+0x6c>
    24e0:	00 e0       	ldi	r16, 0x00	; 0
    24e2:	10 e0       	ldi	r17, 0x00	; 0
    24e4:	d8 e4       	ldi	r29, 0x48	; 72
    24e6:	c3 e4       	ldi	r28, 0x43	; 67
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <_Z7getTempv+0x6c>
    24ea:	00 e0       	ldi	r16, 0x00	; 0
    24ec:	10 e0       	ldi	r17, 0x00	; 0
    24ee:	d8 e4       	ldi	r29, 0x48	; 72
    24f0:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    24f2:	0e 94 23 12 	call	0x2446	; 0x2446 <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    24f6:	0e 94 23 12 	call	0x2446	; 0x2446 <_Z7readADCv>
    24fa:	bc 01       	movw	r22, r24
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 b8 29 	call	0x5370	; 0x5370 <__floatunsisf>
    2504:	2e ea       	ldi	r18, 0xAE	; 174
    2506:	37 e2       	ldi	r19, 0x27	; 39
    2508:	42 ea       	ldi	r20, 0xA2	; 162
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	0e 94 99 28 	call	0x5132	; 0x5132 <__subsf3>
    2510:	26 ef       	ldi	r18, 0xF6	; 246
    2512:	38 e2       	ldi	r19, 0x28	; 40
    2514:	4c e9       	ldi	r20, 0x9C	; 156
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 10 29 	call	0x5220	; 0x5220 <__divsf3>
    251c:	20 2f       	mov	r18, r16
    251e:	31 2f       	mov	r19, r17
    2520:	4d 2f       	mov	r20, r29
    2522:	5c 2f       	mov	r21, r28
    2524:	0e 94 9a 28 	call	0x5134	; 0x5134 <__addsf3>
    2528:	0e 94 1b 2b 	call	0x5636	; 0x5636 <round>
}
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    2536:	ea e7       	ldi	r30, 0x7A	; 122
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    253c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    2540:	ac e7       	ldi	r26, 0x7C	; 124
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    2546:	9c 91       	ld	r25, X
    2548:	96 60       	ori	r25, 0x06	; 6
    254a:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    254c:	9c 91       	ld	r25, X
    254e:	90 6c       	ori	r25, 0xC0	; 192
    2550:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    2552:	9c 91       	ld	r25, X
    2554:	90 62       	ori	r25, 0x20	; 32
    2556:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    2558:	90 81       	ld	r25, Z
    255a:	96 60       	ori	r25, 0x06	; 6
    255c:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    255e:	90 81       	ld	r25, Z
    2560:	90 62       	ori	r25, 0x20	; 32
    2562:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    2564:	90 81       	ld	r25, Z
    2566:	98 60       	ori	r25, 0x08	; 8
    2568:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    256a:	90 81       	ld	r25, Z
    256c:	90 68       	ori	r25, 0x80	; 128
    256e:	90 83       	st	Z, r25

	if(enableSampling)
    2570:	88 23       	and	r24, r24
    2572:	31 f0       	breq	.+12     	; 0x2580 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    2574:	80 81       	ld	r24, Z
    2576:	88 60       	ori	r24, 0x08	; 8
    2578:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    257a:	80 81       	ld	r24, Z
    257c:	80 64       	ori	r24, 0x40	; 64
    257e:	80 83       	st	Z, r24
    2580:	08 95       	ret

00002582 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2582:	fc 01       	movw	r30, r24
	while(*s)
    2584:	21 91       	ld	r18, Z+
    2586:	22 23       	and	r18, r18
    2588:	41 f0       	breq	.+16     	; 0x259a <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	20 53       	subi	r18, 0x30	; 48
    258e:	31 09       	sbc	r19, r1
    2590:	2a 30       	cpi	r18, 0x0A	; 10
    2592:	31 05       	cpc	r19, r1
    2594:	b8 f3       	brcs	.-18     	; 0x2584 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	08 95       	ret
		}
	}

	return( TRUE);
    259a:	81 e0       	ldi	r24, 0x01	; 1
}
    259c:	08 95       	ret

0000259e <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    259e:	cf 93       	push	r28
    25a0:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    25a2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_Z23clockConfigurationCheckv>

	cli();
    25a6:	f8 94       	cli
	if(activationSource == POWER_UP)
    25a8:	c1 11       	cpse	r28, r1
    25aa:	0e c0       	rjmp	.+28     	; 0x25c8 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	31 f4       	brne	.+12     	; 0x25bc <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    25b0:	63 e0       	ldi	r22, 0x03	; 3
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    25ba:	3e c0       	rjmp	.+124    	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    25c6:	38 c0       	rjmp	.+112    	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    25c8:	c2 30       	cpi	r28, 0x02	; 2
    25ca:	c9 f4       	brne	.+50     	; 0x25fe <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    25cc:	82 30       	cpi	r24, 0x02	; 2
    25ce:	31 f4       	brne	.+12     	; 0x25dc <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    25da:	2e c0       	rjmp	.+92     	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	19 f0       	breq	.+6      	; 0x25e6 <_Z13startEventNow19EventActionSource_t+0x48>
    25e0:	83 50       	subi	r24, 0x03	; 3
    25e2:	82 30       	cpi	r24, 0x02	; 2
    25e4:	30 f4       	brcc	.+12     	; 0x25f2 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    25f0:	23 c0       	rjmp	.+70     	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    25fc:	1d c0       	rjmp	.+58     	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    25fe:	82 30       	cpi	r24, 0x02	; 2
    2600:	31 f4       	brne	.+12     	; 0x260e <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    260c:	15 c0       	rjmp	.+42     	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	31 f4       	brne	.+12     	; 0x261e <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    261c:	0d c0       	rjmp	.+26     	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    261e:	84 30       	cpi	r24, 0x04	; 4
    2620:	31 f4       	brne	.+12     	; 0x262e <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    2622:	62 e0       	ldi	r22, 0x02	; 2
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <_Z13startEventNow19EventActionSource_t+0x9a>
/*				setupForFox(NULL, START_EVENT_NOW);                             / * start the event now * / */
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    262e:	62 e0       	ldi	r22, 0x02	; 2
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    2638:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_LED_enunciating>
	sei();
    263c:	78 94       	sei

/*	g_current_epoch = rv3028_get_epoch(); */
/*	lb_send_string((char*)"Sync OK\n", FALSE); */
}
    263e:	cf 91       	pop	r28
    2640:	08 95       	ret

00002642 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    2642:	cf 93       	push	r28
    2644:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2646:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_Z23clockConfigurationCheckv>

	cli();
    264a:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    264c:	c2 30       	cpi	r28, 0x02	; 2
    264e:	31 f4       	brne	.+12     	; 0x265c <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    2650:	63 e0       	ldi	r22, 0x03	; 3
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    265a:	15 c0       	rjmp	.+42     	; 0x2686 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	31 f4       	brne	.+12     	; 0x266c <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    266a:	08 c0       	rjmp	.+16     	; 0x267c <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    266c:	84 30       	cpi	r24, 0x04	; 4
    266e:	31 f4       	brne	.+12     	; 0x267c <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    2670:	63 e0       	ldi	r22, 0x03	; 3
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    267c:	63 e0       	ldi	r22, 0x03	; 3
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    2686:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_sync_pin_stable>
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	21 f4       	brne	.+8      	; 0x2696 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	8d e0       	ldi	r24, 0x0D	; 13
    2692:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
	}
}
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    269a:	1f 92       	push	r1
    269c:	0f 92       	push	r0
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	2f 93       	push	r18
    26a6:	3f 93       	push	r19
    26a8:	4f 93       	push	r20
    26aa:	5f 93       	push	r21
    26ac:	6f 93       	push	r22
    26ae:	7f 93       	push	r23
    26b0:	8f 93       	push	r24
    26b2:	9f 93       	push	r25
    26b4:	af 93       	push	r26
    26b6:	bf 93       	push	r27
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	0e 94 1c 02 	call	0x438	; 0x438 <_Z11digitalReadh>

	g_sync_pin_timer = 0;
    26c2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_sync_pin_timer+0x1>
    26c6:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_sync_pin_timer>

	if(pinVal)  /* Sync is high = button released */
    26ca:	88 23       	and	r24, r24
    26cc:	d9 f0       	breq	.+54     	; 0x2704 <__vector_5+0x6a>
	{
		if(g_transmissions_disabled)
    26ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    26d2:	88 23       	and	r24, r24
    26d4:	71 f0       	breq	.+28     	; 0x26f2 <__vector_5+0x58>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    26d6:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_sync_pin_stable>
    26da:	82 30       	cpi	r24, 0x02	; 2
    26dc:	99 f4       	brne	.+38     	; 0x2704 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    26de:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	8d e0       	ldi	r24, 0x0D	; 13
    26e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
				startEventNow(PUSHBUTTON);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 cf 12 	call	0x259e	; 0x259e <_Z13startEventNow19EventActionSource_t>
    26f0:	09 c0       	rjmp	.+18     	; 0x2704 <__vector_5+0x6a>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    26f2:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_sync_pin_stable>
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	29 f4       	brne	.+10     	; 0x2704 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    26fa:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_sync_pin_stable>
				stopEventNow(PUSHBUTTON);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	0e 94 21 13 	call	0x2642	; 0x2642 <_Z12stopEventNow19EventActionSource_t>
			}
		}
	}
}
    2704:	ff 91       	pop	r31
    2706:	ef 91       	pop	r30
    2708:	bf 91       	pop	r27
    270a:	af 91       	pop	r26
    270c:	9f 91       	pop	r25
    270e:	8f 91       	pop	r24
    2710:	7f 91       	pop	r23
    2712:	6f 91       	pop	r22
    2714:	5f 91       	pop	r21
    2716:	4f 91       	pop	r20
    2718:	3f 91       	pop	r19
    271a:	2f 91       	pop	r18
    271c:	0f 90       	pop	r0
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	0f 90       	pop	r0
    2722:	1f 90       	pop	r1
    2724:	18 95       	reti

00002726 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    2726:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <g_messages_text+0x15>
    272a:	81 11       	cpse	r24, r1
    272c:	05 c0       	rjmp	.+10     	; 0x2738 <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	84 ea       	ldi	r24, 0xA4	; 164
    2732:	95 e0       	ldi	r25, 0x05	; 5
    2734:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    2738:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    273c:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2740:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2744:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2748:	81 15       	cp	r24, r1
    274a:	96 46       	sbci	r25, 0x66	; 102
    274c:	ae 4e       	sbci	r26, 0xEE	; 238
    274e:	bf 45       	sbci	r27, 0x5F	; 95
    2750:	28 f4       	brcc	.+10     	; 0x275c <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	84 ea       	ldi	r24, 0xA4	; 164
    2756:	95 e0       	ldi	r25, 0x05	; 5
    2758:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    275c:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch>
    2760:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    2764:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    2768:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    276c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    2770:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2774:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2778:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    277c:	48 17       	cp	r20, r24
    277e:	59 07       	cpc	r21, r25
    2780:	6a 07       	cpc	r22, r26
    2782:	7b 07       	cpc	r23, r27
    2784:	00 f5       	brcc	.+64     	; 0x27c6 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2786:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
    278a:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    278e:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    2792:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    2796:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    279a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    279e:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    27a2:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    27a6:	48 17       	cp	r20, r24
    27a8:	59 07       	cpc	r21, r25
    27aa:	6a 07       	cpc	r22, r26
    27ac:	7b 07       	cpc	r23, r27
    27ae:	28 f4       	brcc	.+10     	; 0x27ba <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    27b0:	63 e0       	ldi	r22, 0x03	; 3
    27b2:	84 ea       	ldi	r24, 0xA4	; 164
    27b4:	95 e0       	ldi	r25, 0x05	; 5
    27b6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    27ba:	64 e0       	ldi	r22, 0x04	; 4
    27bc:	84 ea       	ldi	r24, 0xA4	; 164
    27be:	95 e0       	ldi	r25, 0x05	; 5
    27c0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    27c4:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    27c6:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
    27ca:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    27ce:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    27d2:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    27d6:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    27da:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    27de:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    27e2:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    27e6:	48 17       	cp	r20, r24
    27e8:	59 07       	cpc	r21, r25
    27ea:	6a 07       	cpc	r22, r26
    27ec:	7b 07       	cpc	r23, r27
    27ee:	28 f4       	brcc	.+10     	; 0x27fa <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    27f0:	61 e0       	ldi	r22, 0x01	; 1
    27f2:	89 e2       	ldi	r24, 0x29	; 41
    27f4:	91 e0       	ldi	r25, 0x01	; 1
    27f6:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    27fa:	08 95       	ret

000027fc <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    27fc:	2f 92       	push	r2
    27fe:	3f 92       	push	r3
    2800:	4f 92       	push	r4
    2802:	5f 92       	push	r5
    2804:	6f 92       	push	r6
    2806:	7f 92       	push	r7
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	2c 97       	sbiw	r28, 0x0c	; 12
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	2b 01       	movw	r4, r22
    2832:	3c 01       	movw	r6, r24
    2834:	49 01       	movw	r8, r18
    2836:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2838:	62 17       	cp	r22, r18
    283a:	73 07       	cpc	r23, r19
    283c:	84 07       	cpc	r24, r20
    283e:	95 07       	cpc	r25, r21
    2840:	50 f0       	brcs	.+20     	; 0x2856 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2842:	e1 14       	cp	r14, r1
    2844:	f1 04       	cpc	r15, r1
    2846:	09 f4       	brne	.+2      	; 0x284a <_Z14reportTimeTillmmPKcS0_+0x4e>
    2848:	04 c1       	rjmp	.+520    	; 0x2a52 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    284a:	61 e0       	ldi	r22, 0x01	; 1
    284c:	c7 01       	movw	r24, r14
    284e:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	ff c0       	rjmp	.+510    	; 0x2a54 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    2856:	01 15       	cp	r16, r1
    2858:	11 05       	cpc	r17, r1
    285a:	21 f0       	breq	.+8      	; 0x2864 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    285c:	61 e0       	ldi	r22, 0x01	; 1
    285e:	c8 01       	movw	r24, r16
    2860:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2864:	75 01       	movw	r14, r10
    2866:	64 01       	movw	r12, r8
    2868:	c4 18       	sub	r12, r4
    286a:	d5 08       	sbc	r13, r5
    286c:	e6 08       	sbc	r14, r6
    286e:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2870:	c7 01       	movw	r24, r14
    2872:	b6 01       	movw	r22, r12
    2874:	20 e8       	ldi	r18, 0x80	; 128
    2876:	33 e3       	ldi	r19, 0x33	; 51
    2878:	41 ee       	ldi	r20, 0xE1	; 225
    287a:	51 e0       	ldi	r21, 0x01	; 1
    287c:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodsi4>
    2880:	29 01       	movw	r4, r18
    2882:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2884:	44 27       	eor	r20, r20
    2886:	55 27       	eor	r21, r21
    2888:	60 e8       	ldi	r22, 0x80	; 128
    288a:	73 e3       	ldi	r23, 0x33	; 51
    288c:	81 ee       	ldi	r24, 0xE1	; 225
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__mulsi3>
    2894:	c6 1a       	sub	r12, r22
    2896:	d7 0a       	sbc	r13, r23
    2898:	e8 0a       	sbc	r14, r24
    289a:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    289c:	c7 01       	movw	r24, r14
    289e:	b6 01       	movw	r22, r12
    28a0:	20 e8       	ldi	r18, 0x80	; 128
    28a2:	31 e5       	ldi	r19, 0x51	; 81
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodsi4>
    28ac:	49 01       	movw	r8, r18
    28ae:	5a 01       	movw	r10, r20
    28b0:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    28b2:	44 27       	eor	r20, r20
    28b4:	55 27       	eor	r21, r21
    28b6:	60 e8       	ldi	r22, 0x80	; 128
    28b8:	71 e5       	ldi	r23, 0x51	; 81
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__mulsi3>
    28c2:	c6 1a       	sub	r12, r22
    28c4:	d7 0a       	sbc	r13, r23
    28c6:	e8 0a       	sbc	r14, r24
    28c8:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    28ca:	c7 01       	movw	r24, r14
    28cc:	b6 01       	movw	r22, r12
    28ce:	20 e1       	ldi	r18, 0x10	; 16
    28d0:	3e e0       	ldi	r19, 0x0E	; 14
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodsi4>
    28da:	29 83       	std	Y+1, r18	; 0x01
    28dc:	3a 83       	std	Y+2, r19	; 0x02
    28de:	4b 83       	std	Y+3, r20	; 0x03
    28e0:	5c 83       	std	Y+4, r21	; 0x04
    28e2:	29 81       	ldd	r18, Y+1	; 0x01
    28e4:	3a 81       	ldd	r19, Y+2	; 0x02
    28e6:	3a 87       	std	Y+10, r19	; 0x0a
    28e8:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    28ea:	29 81       	ldd	r18, Y+1	; 0x01
    28ec:	3a 81       	ldd	r19, Y+2	; 0x02
    28ee:	4b 81       	ldd	r20, Y+3	; 0x03
    28f0:	5c 81       	ldd	r21, Y+4	; 0x04
    28f2:	44 27       	eor	r20, r20
    28f4:	55 27       	eor	r21, r21
    28f6:	a0 e1       	ldi	r26, 0x10	; 16
    28f8:	be e0       	ldi	r27, 0x0E	; 14
    28fa:	0e 94 38 2c 	call	0x5870	; 0x5870 <__muluhisi3>
    28fe:	c6 1a       	sub	r12, r22
    2900:	d7 0a       	sbc	r13, r23
    2902:	e8 0a       	sbc	r14, r24
    2904:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    2906:	c7 01       	movw	r24, r14
    2908:	b6 01       	movw	r22, r12
    290a:	2c e3       	ldi	r18, 0x3C	; 60
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodsi4>
    2916:	2d 83       	std	Y+5, r18	; 0x05
    2918:	3e 83       	std	Y+6, r19	; 0x06
    291a:	4f 83       	std	Y+7, r20	; 0x07
    291c:	58 87       	std	Y+8, r21	; 0x08
    291e:	0d 81       	ldd	r16, Y+5	; 0x05
    2920:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2922:	2c e3       	ldi	r18, 0x3C	; 60
    2924:	20 9f       	mul	r18, r16
    2926:	c0 01       	movw	r24, r0
    2928:	21 9f       	mul	r18, r17
    292a:	90 0d       	add	r25, r0
    292c:	11 24       	eor	r1, r1
    292e:	a6 01       	movw	r20, r12
    2930:	48 1b       	sub	r20, r24
    2932:	59 0b       	sbc	r21, r25
    2934:	5c 87       	std	Y+12, r21	; 0x0c
    2936:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    2938:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <g_tempStr>

		if(years)
    293c:	41 14       	cp	r4, r1
    293e:	51 04       	cpc	r5, r1
    2940:	b9 f0       	breq	.+46     	; 0x2970 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    2942:	5f 92       	push	r5
    2944:	4f 92       	push	r4
    2946:	8b e3       	ldi	r24, 0x3B	; 59
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	9f 93       	push	r25
    294c:	8f 93       	push	r24
    294e:	86 ee       	ldi	r24, 0xE6	; 230
    2950:	94 e0       	ldi	r25, 0x04	; 4
    2952:	9f 93       	push	r25
    2954:	8f 93       	push	r24
    2956:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
			lb_send_string(g_tempStr, TRUE);
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	86 ee       	ldi	r24, 0xE6	; 230
    295e:	94 e0       	ldi	r25, 0x04	; 4
    2960:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
		}

		if(days)
    2970:	23 28       	or	r2, r3
    2972:	b9 f0       	breq	.+46     	; 0x29a2 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    2974:	9f 92       	push	r9
    2976:	8f 92       	push	r8
    2978:	83 e4       	ldi	r24, 0x43	; 67
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	9f 93       	push	r25
    297e:	8f 93       	push	r24
    2980:	86 ee       	ldi	r24, 0xE6	; 230
    2982:	94 e0       	ldi	r25, 0x04	; 4
    2984:	9f 93       	push	r25
    2986:	8f 93       	push	r24
    2988:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
			lb_send_string(g_tempStr, TRUE);
    298c:	61 e0       	ldi	r22, 0x01	; 1
    298e:	86 ee       	ldi	r24, 0xE6	; 230
    2990:	94 e0       	ldi	r25, 0x04	; 4
    2992:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
		}

		if(hours)
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	89 2b       	or	r24, r25
    29a8:	c9 f0       	breq	.+50     	; 0x29dc <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	9f 93       	push	r25
    29ae:	e9 81       	ldd	r30, Y+1	; 0x01
    29b0:	ef 93       	push	r30
    29b2:	8c e4       	ldi	r24, 0x4C	; 76
    29b4:	91 e0       	ldi	r25, 0x01	; 1
    29b6:	9f 93       	push	r25
    29b8:	8f 93       	push	r24
    29ba:	86 ee       	ldi	r24, 0xE6	; 230
    29bc:	94 e0       	ldi	r25, 0x04	; 4
    29be:	9f 93       	push	r25
    29c0:	8f 93       	push	r24
    29c2:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
			lb_send_string(g_tempStr, TRUE);
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	86 ee       	ldi	r24, 0xE6	; 230
    29ca:	94 e0       	ldi	r25, 0x04	; 4
    29cc:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
		}

		if(minutes)
    29dc:	01 2b       	or	r16, r17
    29de:	c9 f0       	breq	.+50     	; 0x2a12 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    29e0:	fe 81       	ldd	r31, Y+6	; 0x06
    29e2:	ff 93       	push	r31
    29e4:	2d 81       	ldd	r18, Y+5	; 0x05
    29e6:	2f 93       	push	r18
    29e8:	84 e5       	ldi	r24, 0x54	; 84
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	9f 93       	push	r25
    29ee:	8f 93       	push	r24
    29f0:	86 ee       	ldi	r24, 0xE6	; 230
    29f2:	94 e0       	ldi	r25, 0x04	; 4
    29f4:	9f 93       	push	r25
    29f6:	8f 93       	push	r24
    29f8:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
			lb_send_string(g_tempStr, TRUE);
    29fc:	61 e0       	ldi	r22, 0x01	; 1
    29fe:	86 ee       	ldi	r24, 0xE6	; 230
    2a00:	94 e0       	ldi	r25, 0x04	; 4
    2a02:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    2a12:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a14:	3f 93       	push	r19
    2a16:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a18:	4f 93       	push	r20
    2a1a:	8c e5       	ldi	r24, 0x5C	; 92
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	9f 93       	push	r25
    2a20:	8f 93       	push	r24
    2a22:	86 ee       	ldi	r24, 0xE6	; 230
    2a24:	94 e0       	ldi	r25, 0x04	; 4
    2a26:	9f 93       	push	r25
    2a28:	8f 93       	push	r24
    2a2a:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
		lb_send_string(g_tempStr, TRUE);
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	86 ee       	ldi	r24, 0xE6	; 230
    2a32:	94 e0       	ldi	r25, 0x04	; 4
    2a34:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2a38:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2a3c:	e6 ee       	ldi	r30, 0xE6	; 230
    2a3e:	f4 e0       	ldi	r31, 0x04	; 4
    2a40:	10 82       	st	Z, r1
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2a54:	2c 96       	adiw	r28, 0x0c	; 12
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	1f 91       	pop	r17
    2a66:	0f 91       	pop	r16
    2a68:	ff 90       	pop	r15
    2a6a:	ef 90       	pop	r14
    2a6c:	df 90       	pop	r13
    2a6e:	cf 90       	pop	r12
    2a70:	bf 90       	pop	r11
    2a72:	af 90       	pop	r10
    2a74:	9f 90       	pop	r9
    2a76:	8f 90       	pop	r8
    2a78:	7f 90       	pop	r7
    2a7a:	6f 90       	pop	r6
    2a7c:	5f 90       	pop	r5
    2a7e:	4f 90       	pop	r4
    2a80:	3f 90       	pop	r3
    2a82:	2f 90       	pop	r2
    2a84:	08 95       	ret

00002a86 <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    2a86:	ef 92       	push	r14
    2a88:	ff 92       	push	r15
    2a8a:	0f 93       	push	r16
    2a8c:	1f 93       	push	r17
	setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    2a8e:	62 e0       	ldi	r22, 0x02	; 2
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
	g_current_epoch = rv3028_get_epoch();
    2a98:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <_Z16rv3028_get_epochv>
    2a9c:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <g_current_epoch>
    2aa0:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <g_current_epoch+0x1>
    2aa4:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <g_current_epoch+0x2>
    2aa8:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    2aac:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <_Z18startEventUsingRTCv+0x30>
    2ab4:	5a c0       	rjmp	.+180    	; 0x2b6a <_Z18startEventUsingRTCv+0xe4>
	{
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    2ab6:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <g_event_start_epoch>
    2aba:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    2abe:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    2ac2:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    2ac6:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch>
    2aca:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2ace:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2ad2:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2ad6:	0f 2e       	mov	r0, r31
    2ad8:	f3 e6       	ldi	r31, 0x63	; 99
    2ada:	ef 2e       	mov	r14, r31
    2adc:	f1 e0       	ldi	r31, 0x01	; 1
    2ade:	ff 2e       	mov	r15, r31
    2ae0:	f0 2d       	mov	r31, r0
    2ae2:	00 e7       	ldi	r16, 0x70	; 112
    2ae4:	11 e0       	ldi	r17, 0x01	; 1
    2ae6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    2aea:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <g_event_finish_epoch>
    2aee:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    2af2:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    2af6:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    2afa:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch>
    2afe:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    2b02:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    2b06:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    2b0a:	e1 2c       	mov	r14, r1
    2b0c:	f1 2c       	mov	r15, r1
    2b0e:	0c e7       	ldi	r16, 0x7C	; 124
    2b10:	11 e0       	ldi	r17, 0x01	; 1
    2b12:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    2b16:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
    2b1a:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    2b1e:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    2b22:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    2b26:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    2b2a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2b2e:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2b32:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2b36:	48 17       	cp	r20, r24
    2b38:	59 07       	cpc	r21, r25
    2b3a:	6a 07       	cpc	r22, r26
    2b3c:	7b 07       	cpc	r23, r27
    2b3e:	b8 f4       	brcc	.+46     	; 0x2b6e <_Z18startEventUsingRTCv+0xe8>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    2b40:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <g_event_finish_epoch>
    2b44:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    2b48:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    2b4c:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    2b50:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch>
    2b54:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2b58:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2b5c:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2b60:	04 e8       	ldi	r16, 0x84	; 132
    2b62:	11 e0       	ldi	r17, 0x01	; 1
    2b64:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <_Z18startEventUsingRTCv+0xe8>
		}
	}
	else
	{
		reportConfigErrors();
    2b6a:	0e 94 93 13 	call	0x2726	; 0x2726 <_Z18reportConfigErrorsv>
	}
}
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	ff 90       	pop	r15
    2b74:	ef 90       	pop	r14
    2b76:	08 95       	ret

00002b78 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
    2b78:	4f 92       	push	r4
    2b7a:	5f 92       	push	r5
    2b7c:	6f 92       	push	r6
    2b7e:	7f 92       	push	r7
    2b80:	8f 92       	push	r8
    2b82:	9f 92       	push	r9
    2b84:	af 92       	push	r10
    2b86:	bf 92       	push	r11
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	2c 97       	sbiw	r28, 0x0c	; 12
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	8c 01       	movw	r16, r24
    2ba6:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    2ba8:	fc 01       	movw	r30, r24
    2baa:	01 90       	ld	r0, Z+
    2bac:	00 20       	and	r0, r0
    2bae:	e9 f7       	brne	.-6      	; 0x2baa <_Z18validateTimeStringPcPma+0x32>
    2bb0:	31 97       	sbiw	r30, 0x01	; 1
    2bb2:	e8 1b       	sub	r30, r24
    2bb4:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    2bb6:	25 e0       	ldi	r18, 0x05	; 5
    2bb8:	6f 38       	cpi	r22, 0x8F	; 143
    2bba:	72 07       	cpc	r23, r18
    2bbc:	49 f5       	brne	.+82     	; 0x2c10 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    2bbe:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    2bc2:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2bc6:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2bca:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2bce:	89 87       	std	Y+9, r24	; 0x09
    2bd0:	9a 87       	std	Y+10, r25	; 0x0a
    2bd2:	ab 87       	std	Y+11, r26	; 0x0b
    2bd4:	bc 87       	std	Y+12, r27	; 0x0c
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	96 e6       	ldi	r25, 0x66	; 102
    2bda:	ae ee       	ldi	r26, 0xEE	; 238
    2bdc:	bf e5       	ldi	r27, 0x5F	; 95
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	ab 83       	std	Y+3, r26	; 0x03
    2be4:	bc 83       	std	Y+4, r27	; 0x04
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bec:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bee:	81 15       	cp	r24, r1
    2bf0:	96 46       	sbci	r25, 0x66	; 102
    2bf2:	ae 4e       	sbci	r26, 0xEE	; 238
    2bf4:	bf 45       	sbci	r27, 0x5F	; 95
    2bf6:	28 f4       	brcc	.+10     	; 0x2c02 <_Z18validateTimeStringPcPma+0x8a>
    2bf8:	89 80       	ldd	r8, Y+1	; 0x01
    2bfa:	9a 80       	ldd	r9, Y+2	; 0x02
    2bfc:	ab 80       	ldd	r10, Y+3	; 0x03
    2bfe:	bc 80       	ldd	r11, Y+4	; 0x04
    2c00:	04 c0       	rjmp	.+8      	; 0x2c0a <_Z18validateTimeStringPcPma+0x92>
    2c02:	89 84       	ldd	r8, Y+9	; 0x09
    2c04:	9a 84       	ldd	r9, Y+10	; 0x0a
    2c06:	ab 84       	ldd	r10, Y+11	; 0x0b
    2c08:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    2c0a:	ff 24       	eor	r15, r15
    2c0c:	f3 94       	inc	r15
    2c0e:	42 c0       	rjmp	.+132    	; 0x2c94 <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    2c10:	6b 58       	subi	r22, 0x8B	; 139
    2c12:	75 40       	sbci	r23, 0x05	; 5
    2c14:	a9 f5       	brne	.+106    	; 0x2c80 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2c16:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    2c1a:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    2c1e:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    2c22:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	af 83       	std	Y+7, r26	; 0x07
    2c2c:	b8 87       	std	Y+8, r27	; 0x08
    2c2e:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    2c32:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2c36:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2c3a:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	ab 83       	std	Y+3, r26	; 0x03
    2c44:	bc 83       	std	Y+4, r27	; 0x04
    2c46:	4d 81       	ldd	r20, Y+5	; 0x05
    2c48:	5e 81       	ldd	r21, Y+6	; 0x06
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	ab 81       	ldd	r26, Y+3	; 0x03
    2c54:	bc 81       	ldd	r27, Y+4	; 0x04
    2c56:	48 17       	cp	r20, r24
    2c58:	59 07       	cpc	r21, r25
    2c5a:	6a 07       	cpc	r22, r26
    2c5c:	7b 07       	cpc	r23, r27
    2c5e:	40 f4       	brcc	.+16     	; 0x2c70 <_Z18validateTimeStringPcPma+0xf8>
    2c60:	89 80       	ldd	r8, Y+1	; 0x01
    2c62:	9a 80       	ldd	r9, Y+2	; 0x02
    2c64:	ab 80       	ldd	r10, Y+3	; 0x03
    2c66:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    2c68:	68 94       	set
    2c6a:	ff 24       	eor	r15, r15
    2c6c:	f1 f8       	bld	r15, 1
    2c6e:	12 c0       	rjmp	.+36     	; 0x2c94 <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2c70:	8d 80       	ldd	r8, Y+5	; 0x05
    2c72:	9e 80       	ldd	r9, Y+6	; 0x06
    2c74:	af 80       	ldd	r10, Y+7	; 0x07
    2c76:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    2c78:	68 94       	set
    2c7a:	ff 24       	eor	r15, r15
    2c7c:	f1 f8       	bld	r15, 1
    2c7e:	0a c0       	rjmp	.+20     	; 0x2c94 <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    2c80:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    2c82:	0f 2e       	mov	r0, r31
    2c84:	81 2c       	mov	r8, r1
    2c86:	f6 e6       	ldi	r31, 0x66	; 102
    2c88:	9f 2e       	mov	r9, r31
    2c8a:	fe ee       	ldi	r31, 0xEE	; 238
    2c8c:	af 2e       	mov	r10, r31
    2c8e:	ff e5       	ldi	r31, 0x5F	; 95
    2c90:	bf 2e       	mov	r11, r31
    2c92:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    2c94:	ec 30       	cpi	r30, 0x0C	; 12
    2c96:	f1 05       	cpc	r31, r1
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <_Z18validateTimeStringPcPma+0x124>
    2c9a:	5e c0       	rjmp	.+188    	; 0x2d58 <_Z18validateTimeStringPcPma+0x1e0>
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	0e 94 c1 12 	call	0x2582	; 0x2582 <_Z11only_digitsPc>
    2ca2:	88 23       	and	r24, r24
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <_Z18validateTimeStringPcPma+0x130>
    2ca6:	4f c0       	rjmp	.+158    	; 0x2d46 <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    2ca8:	b8 01       	movw	r22, r16
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_Z16rv3028_get_epochPbPc>
    2cb2:	2b 01       	movw	r4, r22
    2cb4:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    2cb6:	ae 2d       	mov	r26, r14
    2cb8:	ee 0c       	add	r14, r14
    2cba:	bb 0b       	sbc	r27, r27
    2cbc:	20 e1       	ldi	r18, 0x10	; 16
    2cbe:	3e e0       	ldi	r19, 0x0E	; 14
    2cc0:	0e 94 31 2c 	call	0x5862	; 0x5862 <__usmulhisi3>
    2cc4:	64 0d       	add	r22, r4
    2cc6:	75 1d       	adc	r23, r5
    2cc8:	86 1d       	adc	r24, r6
    2cca:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    2ccc:	86 16       	cp	r8, r22
    2cce:	97 06       	cpc	r9, r23
    2cd0:	a8 06       	cpc	r10, r24
    2cd2:	b9 06       	cpc	r11, r25
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <_Z18validateTimeStringPcPma+0x160>
    2cd6:	45 c0       	rjmp	.+138    	; 0x2d62 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    2cd8:	21 e0       	ldi	r18, 0x01	; 1
    2cda:	f2 12       	cpse	r15, r18
    2cdc:	09 c0       	rjmp	.+18     	; 0x2cf0 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    2cde:	68 e0       	ldi	r22, 0x08	; 8
    2ce0:	84 ea       	ldi	r24, 0xA4	; 164
    2ce2:	95 e0       	ldi	r25, 0x05	; 5
    2ce4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	cb 01       	movw	r24, r22
    2cee:	39 c0       	rjmp	.+114    	; 0x2d62 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    2cf0:	22 e0       	ldi	r18, 0x02	; 2
    2cf2:	f2 12       	cpse	r15, r18
    2cf4:	1f c0       	rjmp	.+62     	; 0x2d34 <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    2cf6:	00 91 93 05 	lds	r16, 0x0593	; 0x800593 <g_current_epoch>
    2cfa:	10 91 94 05 	lds	r17, 0x0594	; 0x800594 <g_current_epoch+0x1>
    2cfe:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <g_current_epoch+0x2>
    2d02:	30 91 96 05 	lds	r19, 0x0596	; 0x800596 <g_current_epoch+0x3>
    2d06:	60 17       	cp	r22, r16
    2d08:	71 07       	cpc	r23, r17
    2d0a:	82 07       	cpc	r24, r18
    2d0c:	93 07       	cpc	r25, r19
    2d0e:	48 f4       	brcc	.+18     	; 0x2d22 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    2d10:	67 e0       	ldi	r22, 0x07	; 7
    2d12:	84 ea       	ldi	r24, 0xA4	; 164
    2d14:	95 e0       	ldi	r25, 0x05	; 5
    2d16:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	cb 01       	movw	r24, r22
    2d20:	20 c0       	rjmp	.+64     	; 0x2d62 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    2d22:	66 e0       	ldi	r22, 0x06	; 6
    2d24:	84 ea       	ldi	r24, 0xA4	; 164
    2d26:	95 e0       	ldi	r25, 0x05	; 5
    2d28:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	cb 01       	movw	r24, r22
    2d32:	17 c0       	rjmp	.+46     	; 0x2d62 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    2d34:	6a e0       	ldi	r22, 0x0A	; 10
    2d36:	84 ea       	ldi	r24, 0xA4	; 164
    2d38:	95 e0       	ldi	r25, 0x05	; 5
    2d3a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	cb 01       	movw	r24, r22
    2d44:	0e c0       	rjmp	.+28     	; 0x2d62 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    2d46:	69 e0       	ldi	r22, 0x09	; 9
    2d48:	84 ea       	ldi	r24, 0xA4	; 164
    2d4a:	95 e0       	ldi	r25, 0x05	; 5
    2d4c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	cb 01       	movw	r24, r22
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    2d58:	ef 2b       	or	r30, r31
    2d5a:	a9 f7       	brne	.-22     	; 0x2d46 <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    2d62:	2c 96       	adiw	r28, 0x0c	; 12
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	ff 90       	pop	r15
    2d78:	ef 90       	pop	r14
    2d7a:	bf 90       	pop	r11
    2d7c:	af 90       	pop	r10
    2d7e:	9f 90       	pop	r9
    2d80:	8f 90       	pop	r8
    2d82:	7f 90       	pop	r7
    2d84:	6f 90       	pop	r6
    2d86:	5f 90       	pop	r5
    2d88:	4f 90       	pop	r4
    2d8a:	08 95       	ret

00002d8c <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	BOOL enableAM = TRUE;

	switch(value)
    2d8c:	83 30       	cpi	r24, 0x03	; 3
    2d8e:	09 f1       	breq	.+66     	; 0x2dd2 <_Z18setAMToneFrequencyh+0x46>
    2d90:	28 f4       	brcc	.+10     	; 0x2d9c <_Z18setAMToneFrequencyh+0x10>
    2d92:	88 23       	and	r24, r24
    2d94:	49 f0       	breq	.+18     	; 0x2da8 <_Z18setAMToneFrequencyh+0x1c>
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	a9 f0       	breq	.+42     	; 0x2dc4 <_Z18setAMToneFrequencyh+0x38>
    2d9a:	37 c0       	rjmp	.+110    	; 0x2e0a <_Z18setAMToneFrequencyh+0x7e>
    2d9c:	85 30       	cpi	r24, 0x05	; 5
    2d9e:	39 f1       	breq	.+78     	; 0x2dee <_Z18setAMToneFrequencyh+0x62>
    2da0:	f8 f0       	brcs	.+62     	; 0x2de0 <_Z18setAMToneFrequencyh+0x54>
    2da2:	86 30       	cpi	r24, 0x06	; 6
    2da4:	59 f1       	breq	.+86     	; 0x2dfc <_Z18setAMToneFrequencyh+0x70>
    2da6:	31 c0       	rjmp	.+98     	; 0x2e0a <_Z18setAMToneFrequencyh+0x7e>
	{
		case 0:
		{
			enableAM = FALSE;
			OCR1A = 1000;
    2da8:	88 ee       	ldi	r24, 0xE8	; 232
    2daa:	93 e0       	ldi	r25, 0x03	; 3
    2dac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2db0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			linkbus_init(BAUD);
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	71 ee       	ldi	r23, 0xE1	; 225
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12linkbus_initm>

	switch(value)
	{
		case 0:
		{
			enableAM = FALSE;
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	2a c0       	rjmp	.+84     	; 0x2e18 <_Z18setAMToneFrequencyh+0x8c>
		}
		break;

		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    2dc4:	8c e2       	ldi	r24, 0x2C	; 44
    2dc6:	92 e0       	ldi	r25, 0x02	; 2
    2dc8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2dcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2dd0:	26 c0       	rjmp	.+76     	; 0x2e1e <_Z18setAMToneFrequencyh+0x92>

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    2dd2:	81 e7       	ldi	r24, 0x71	; 113
    2dd4:	92 e0       	ldi	r25, 0x02	; 2
    2dd6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2dda:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2dde:	1f c0       	rjmp	.+62     	; 0x2e1e <_Z18setAMToneFrequencyh+0x92>

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    2de0:	8a ec       	ldi	r24, 0xCA	; 202
    2de2:	92 e0       	ldi	r25, 0x02	; 2
    2de4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2de8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2dec:	18 c0       	rjmp	.+48     	; 0x2e1e <_Z18setAMToneFrequencyh+0x92>

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    2dee:	81 e4       	ldi	r24, 0x41	; 65
    2df0:	93 e0       	ldi	r25, 0x03	; 3
    2df2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2df6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2dfa:	11 c0       	rjmp	.+34     	; 0x2e1e <_Z18setAMToneFrequencyh+0x92>

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    2dfc:	88 ee       	ldi	r24, 0xE8	; 232
    2dfe:	93 e0       	ldi	r25, 0x03	; 3
    2e00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2e04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2e08:	0a c0       	rjmp	.+20     	; 0x2e1e <_Z18setAMToneFrequencyh+0x92>

		default:
		{
			OCR1A = 500;    /* For ~1000 Hz tone output */
    2e0a:	84 ef       	ldi	r24, 0xF4	; 244
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2e12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <_Z18setAMToneFrequencyh+0x92>
	if(enableAM)
	{
		setupPortsForF1975();
	}

	g_AM_enabled = enableAM;
    2e18:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_AM_enabled>
}
    2e1c:	08 95       	ret
		break;
	}

	if(enableAM)
	{
		setupPortsForF1975();
    2e1e:	0e 94 31 05 	call	0xa62	; 0xa62 <_Z18setupPortsForF1975v>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	f9 cf       	rjmp	.-14     	; 0x2e18 <_Z18setAMToneFrequencyh+0x8c>

00002e26 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	2c 97       	sbiw	r28, 0x0c	; 12
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    2e5a:	0f 2e       	mov	r0, r31
    2e5c:	fb e4       	ldi	r31, 0x4B	; 75
    2e5e:	8f 2e       	mov	r8, r31
    2e60:	f5 e0       	ldi	r31, 0x05	; 5
    2e62:	9f 2e       	mov	r9, r31
    2e64:	f0 2d       	mov	r31, r0
    2e66:	0f 2e       	mov	r0, r31
    2e68:	f7 eb       	ldi	r31, 0xB7	; 183
    2e6a:	6f 2e       	mov	r6, r31
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	7f 2e       	mov	r7, r31
    2e70:	f0 2d       	mov	r31, r0
    2e72:	0f 2e       	mov	r0, r31
    2e74:	f6 ee       	ldi	r31, 0xE6	; 230
    2e76:	af 2e       	mov	r10, r31
    2e78:	f4 e0       	ldi	r31, 0x04	; 4
    2e7a:	bf 2e       	mov	r11, r31
    2e7c:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2e7e:	0f 2e       	mov	r0, r31
    2e80:	fb ea       	ldi	r31, 0xAB	; 171
    2e82:	4f 2e       	mov	r4, r31
    2e84:	f1 e0       	ldi	r31, 0x01	; 1
    2e86:	5f 2e       	mov	r5, r31
    2e88:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, FALSE);
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    2e8a:	0f 2e       	mov	r0, r31
    2e8c:	f1 e0       	ldi	r31, 0x01	; 1
    2e8e:	2f 2e       	mov	r2, r31
    2e90:	f2 e0       	ldi	r31, 0x02	; 2
    2e92:	3f 2e       	mov	r3, r31
    2e94:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2e96:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z16nextFullRxBufferv>
    2e9a:	6c 01       	movw	r12, r24
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <_Z17handleLinkBusMsgsv+0x7c>
    2ea0:	c7 c4       	rjmp	.+2446   	; 0x3830 <_Z17handleLinkBusMsgsv+0xa0a>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	11 96       	adiw	r26, 0x01	; 1
    2ea6:	8d 91       	ld	r24, X+
    2ea8:	9c 91       	ld	r25, X
    2eaa:	12 97       	sbiw	r26, 0x02	; 2
    2eac:	8a 3e       	cpi	r24, 0xEA	; 234
    2eae:	b2 e2       	ldi	r27, 0x22	; 34
    2eb0:	9b 07       	cpc	r25, r27
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <_Z17handleLinkBusMsgsv+0x90>
    2eb4:	df c1       	rjmp	.+958    	; 0x3274 <_Z17handleLinkBusMsgsv+0x44e>
    2eb6:	a0 f4       	brcc	.+40     	; 0x2ee0 <_Z17handleLinkBusMsgsv+0xba>
    2eb8:	8e 31       	cpi	r24, 0x1E	; 30
    2eba:	f3 e0       	ldi	r31, 0x03	; 3
    2ebc:	9f 07       	cpc	r25, r31
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <_Z17handleLinkBusMsgsv+0x9c>
    2ec0:	0a c1       	rjmp	.+532    	; 0x30d6 <_Z17handleLinkBusMsgsv+0x2b0>
    2ec2:	28 f4       	brcc	.+10     	; 0x2ece <_Z17handleLinkBusMsgsv+0xa8>
    2ec4:	87 3d       	cpi	r24, 0xD7	; 215
    2ec6:	92 40       	sbci	r25, 0x02	; 2
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <_Z17handleLinkBusMsgsv+0xa6>
    2eca:	b8 c0       	rjmp	.+368    	; 0x303c <_Z17handleLinkBusMsgsv+0x216>
    2ecc:	91 c4       	rjmp	.+2338   	; 0x37f0 <_Z17handleLinkBusMsgsv+0x9ca>
    2ece:	8f 36       	cpi	r24, 0x6F	; 111
    2ed0:	ad e1       	ldi	r26, 0x1D	; 29
    2ed2:	9a 07       	cpc	r25, r26
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <_Z17handleLinkBusMsgsv+0xb2>
    2ed6:	ff c1       	rjmp	.+1022   	; 0x32d6 <_Z17handleLinkBusMsgsv+0x4b0>
    2ed8:	86 3c       	cpi	r24, 0xC6	; 198
    2eda:	9e 41       	sbci	r25, 0x1E	; 30
    2edc:	b1 f0       	breq	.+44     	; 0x2f0a <_Z17handleLinkBusMsgsv+0xe4>
    2ede:	88 c4       	rjmp	.+2320   	; 0x37f0 <_Z17handleLinkBusMsgsv+0x9ca>
    2ee0:	80 3d       	cpi	r24, 0xD0	; 208
    2ee2:	e3 e2       	ldi	r30, 0x23	; 35
    2ee4:	9e 07       	cpc	r25, r30
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <_Z17handleLinkBusMsgsv+0xc4>
    2ee8:	66 c1       	rjmp	.+716    	; 0x31b6 <_Z17handleLinkBusMsgsv+0x390>
    2eea:	28 f4       	brcc	.+10     	; 0x2ef6 <_Z17handleLinkBusMsgsv+0xd0>
    2eec:	8f 3c       	cpi	r24, 0xCF	; 207
    2eee:	93 42       	sbci	r25, 0x23	; 35
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <_Z17handleLinkBusMsgsv+0xce>
    2ef2:	31 c4       	rjmp	.+2146   	; 0x3756 <_Z17handleLinkBusMsgsv+0x930>
    2ef4:	7d c4       	rjmp	.+2298   	; 0x37f0 <_Z17handleLinkBusMsgsv+0x9ca>
    2ef6:	84 33       	cpi	r24, 0x34	; 52
    2ef8:	44 e2       	ldi	r20, 0x24	; 36
    2efa:	94 07       	cpc	r25, r20
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <_Z17handleLinkBusMsgsv+0xda>
    2efe:	d0 c0       	rjmp	.+416    	; 0x30a0 <_Z17handleLinkBusMsgsv+0x27a>
    2f00:	8c 39       	cpi	r24, 0x9C	; 156
    2f02:	94 42       	sbci	r25, 0x24	; 36
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <_Z17handleLinkBusMsgsv+0xe2>
    2f06:	b0 c1       	rjmp	.+864    	; 0x3268 <_Z17handleLinkBusMsgsv+0x442>
    2f08:	73 c4       	rjmp	.+2278   	; 0x37f0 <_Z17handleLinkBusMsgsv+0x9ca>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2f0a:	f6 01       	movw	r30, r12
    2f0c:	83 81       	ldd	r24, Z+3	; 0x03
    2f0e:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <_Z17handleLinkBusMsgsv+0xf0>
    2f14:	7c c0       	rjmp	.+248    	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
				{
					if(c == 'B')
    2f16:	82 34       	cpi	r24, 0x42	; 66
    2f18:	91 05       	cpc	r25, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <_Z17handleLinkBusMsgsv+0xf8>
    2f1c:	73 c4       	rjmp	.+2278   	; 0x3804 <_Z17handleLinkBusMsgsv+0x9de>
					{
						c = BEACON;
					}
					else if(c == 'F')
    2f1e:	86 34       	cpi	r24, 0x46	; 70
    2f20:	91 05       	cpc	r25, r1
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <_Z17handleLinkBusMsgsv+0x100>
    2f24:	72 c4       	rjmp	.+2276   	; 0x380a <_Z17handleLinkBusMsgsv+0x9e4>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2f26:	83 34       	cpi	r24, 0x43	; 67
    2f28:	91 05       	cpc	r25, r1
    2f2a:	c1 f4       	brne	.+48     	; 0x2f5c <_Z17handleLinkBusMsgsv+0x136>
					{
						char t = lb_buff->fields[FIELD2][0];
    2f2c:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2f2e:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2f30:	82 34       	cpi	r24, 0x42	; 66
    2f32:	29 f0       	breq	.+10     	; 0x2f3e <_Z17handleLinkBusMsgsv+0x118>
						{
							t = '0';
						}

						if(isdigit(t))
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	c0 97       	sbiw	r24, 0x30	; 48
    2f38:	0a 97       	sbiw	r24, 0x0a	; 10
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <_Z17handleLinkBusMsgsv+0x118>
    2f3c:	68 c0       	rjmp	.+208    	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    2f3e:	c6 01       	movw	r24, r12
    2f40:	47 96       	adiw	r24, 0x17	; 23
    2f42:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <atoi>
    2f46:	99 23       	and	r25, r25
    2f48:	14 f4       	brge	.+4      	; 0x2f4e <_Z17handleLinkBusMsgsv+0x128>
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	86 30       	cpi	r24, 0x06	; 6
    2f50:	91 05       	cpc	r25, r1
    2f52:	0c f4       	brge	.+2      	; 0x2f56 <_Z17handleLinkBusMsgsv+0x130>
    2f54:	46 c0       	rjmp	.+140    	; 0x2fe2 <_Z17handleLinkBusMsgsv+0x1bc>
    2f56:	85 e0       	ldi	r24, 0x05	; 5
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	43 c0       	rjmp	.+134    	; 0x2fe2 <_Z17handleLinkBusMsgsv+0x1bc>
						}
					}
					else if(c == 'S')
    2f5c:	83 35       	cpi	r24, 0x53	; 83
    2f5e:	91 05       	cpc	r25, r1
    2f60:	e1 f5       	brne	.+120    	; 0x2fda <_Z17handleLinkBusMsgsv+0x1b4>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2f62:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2f64:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2f66:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2f68:	82 34       	cpi	r24, 0x42	; 66
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <_Z17handleLinkBusMsgsv+0x148>
    2f6c:	50 c0       	rjmp	.+160    	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2f6e:	86 34       	cpi	r24, 0x46	; 70
    2f70:	49 f4       	brne	.+18     	; 0x2f84 <_Z17handleLinkBusMsgsv+0x15e>
						{
							if((u > '0') && (u < '6'))
    2f72:	8f ec       	ldi	r24, 0xCF	; 207
    2f74:	89 0f       	add	r24, r25
    2f76:	85 30       	cpi	r24, 0x05	; 5
    2f78:	08 f0       	brcs	.+2      	; 0x2f7c <_Z17handleLinkBusMsgsv+0x156>
    2f7a:	49 c0       	rjmp	.+146    	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_F1 + (u - '1');
    2f7c:	89 2f       	mov	r24, r25
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	84 97       	sbiw	r24, 0x24	; 36
    2f82:	1b c0       	rjmp	.+54     	; 0x2fba <_Z17handleLinkBusMsgsv+0x194>
							}
						}
						else if(t == 'S')
    2f84:	83 35       	cpi	r24, 0x53	; 83
    2f86:	41 f4       	brne	.+16     	; 0x2f98 <_Z17handleLinkBusMsgsv+0x172>
						{
							if((u > '0') && (u < '6'))
    2f88:	8f ec       	ldi	r24, 0xCF	; 207
    2f8a:	89 0f       	add	r24, r25
    2f8c:	85 30       	cpi	r24, 0x05	; 5
    2f8e:	c0 f4       	brcc	.+48     	; 0x2fc0 <_Z17handleLinkBusMsgsv+0x19a>
							{
								x = SPRINT_S1 + (u - '1');
    2f90:	89 2f       	mov	r24, r25
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	89 97       	sbiw	r24, 0x29	; 41
    2f96:	11 c0       	rjmp	.+34     	; 0x2fba <_Z17handleLinkBusMsgsv+0x194>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2f98:	96 34       	cpi	r25, 0x46	; 70
    2f9a:	39 f4       	brne	.+14     	; 0x2faa <_Z17handleLinkBusMsgsv+0x184>
						{
							if((t > '0') && (t < '6'))
    2f9c:	9f ec       	ldi	r25, 0xCF	; 207
    2f9e:	98 0f       	add	r25, r24
    2fa0:	95 30       	cpi	r25, 0x05	; 5
    2fa2:	a8 f5       	brcc	.+106    	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_F1 + (t - '1');
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	84 97       	sbiw	r24, 0x24	; 36
    2fa8:	08 c0       	rjmp	.+16     	; 0x2fba <_Z17handleLinkBusMsgsv+0x194>
							}
						}
						else if(u == 'S')
    2faa:	93 35       	cpi	r25, 0x53	; 83
    2fac:	81 f5       	brne	.+96     	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
						{
							if((t > '0') && (t < '6'))
    2fae:	9f ec       	ldi	r25, 0xCF	; 207
    2fb0:	98 0f       	add	r25, r24
    2fb2:	95 30       	cpi	r25, 0x05	; 5
    2fb4:	60 f5       	brcc	.+88     	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_S1 + (t - '1');
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	89 97       	sbiw	r24, 0x29	; 41
							}
						}

						if(x != BEACON)
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	19 f4       	brne	.+6      	; 0x2fc4 <_Z17handleLinkBusMsgsv+0x19e>
    2fbe:	27 c0       	rjmp	.+78     	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2fc0:	87 e0       	ldi	r24, 0x07	; 7
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    2fc4:	87 30       	cpi	r24, 0x07	; 7
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	14 f4       	brge	.+4      	; 0x2fce <_Z17handleLinkBusMsgsv+0x1a8>
    2fca:	87 e0       	ldi	r24, 0x07	; 7
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	82 31       	cpi	r24, 0x12	; 18
    2fd0:	91 05       	cpc	r25, r1
    2fd2:	3c f0       	brlt	.+14     	; 0x2fe2 <_Z17handleLinkBusMsgsv+0x1bc>
    2fd4:	81 e1       	ldi	r24, 0x11	; 17
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	04 c0       	rjmp	.+8      	; 0x2fe2 <_Z17handleLinkBusMsgsv+0x1bc>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2fda:	c6 01       	movw	r24, r12
    2fdc:	03 96       	adiw	r24, 0x03	; 3
    2fde:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2fe2:	82 31       	cpi	r24, 0x12	; 18
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	98 f4       	brcc	.+38     	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
					{
						Fox_t holdFox = (Fox_t)c;
    2fe8:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    2fea:	ae 01       	movw	r20, r28
    2fec:	4f 5f       	subi	r20, 0xFF	; 255
    2fee:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff0:	60 e1       	ldi	r22, 0x10	; 16
    2ff2:	84 ea       	ldi	r24, 0xA4	; 164
    2ff4:	95 e0       	ldi	r25, 0x05	; 5
    2ff6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    2ffa:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    2ffe:	99 81       	ldd	r25, Y+1	; 0x01
    3000:	98 17       	cp	r25, r24
    3002:	29 f0       	breq	.+10     	; 0x300e <_Z17handleLinkBusMsgsv+0x1e8>
						{
							setupForFox(&holdFox, START_NOTHING);
    3004:	63 e0       	ldi	r22, 0x03	; 3
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    300e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    3012:	1f 92       	push	r1
    3014:	8f 93       	push	r24
    3016:	85 e9       	ldi	r24, 0x95	; 149
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	9f 93       	push	r25
    301c:	8f 93       	push	r24
    301e:	bf 92       	push	r11
    3020:	af 92       	push	r10
    3022:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	c5 01       	movw	r24, r10
    302a:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
			}
			break;
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	de c3       	rjmp	.+1980   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    303c:	f6 01       	movw	r30, r12
    303e:	83 81       	ldd	r24, Z+3	; 0x03
    3040:	88 23       	and	r24, r24
    3042:	b9 f0       	breq	.+46     	; 0x3072 <_Z17handleLinkBusMsgsv+0x24c>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3044:	c6 01       	movw	r24, r12
    3046:	03 96       	adiw	r24, 0x03	; 3
    3048:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	67 30       	cpi	r22, 0x07	; 7
    3050:	71 05       	cpc	r23, r1
    3052:	14 f0       	brlt	.+4      	; 0x3058 <_Z17handleLinkBusMsgsv+0x232>
    3054:	66 e0       	ldi	r22, 0x06	; 6
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	60 93 88 05 	sts	0x0588, r22	; 0x800588 <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    305c:	48 e8       	ldi	r20, 0x88	; 136
    305e:	55 e0       	ldi	r21, 0x05	; 5
    3060:	61 e1       	ldi	r22, 0x11	; 17
    3062:	84 ea       	ldi	r24, 0xA4	; 164
    3064:	95 e0       	ldi	r25, 0x05	; 5
    3066:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    306a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_AM_audio_frequency>
    306e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    3072:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_AM_audio_frequency>
    3076:	1f 92       	push	r1
    3078:	8f 93       	push	r24
    307a:	8d e9       	ldi	r24, 0x9D	; 157
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	9f 93       	push	r25
    3080:	8f 93       	push	r24
    3082:	bf 92       	push	r11
    3084:	af 92       	push	r10
    3086:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
				lb_send_string(g_tempStr, FALSE);
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	c5 01       	movw	r24, r10
    308e:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
			}
			break;
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	ac c3       	rjmp	.+1880   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    30a0:	d6 01       	movw	r26, r12
    30a2:	13 96       	adiw	r26, 0x03	; 3
    30a4:	8c 91       	ld	r24, X
    30a6:	88 23       	and	r24, r24
    30a8:	09 f4       	brne	.+2      	; 0x30ac <_Z17handleLinkBusMsgsv+0x286>
    30aa:	a6 c3       	rjmp	.+1868   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    30ac:	80 33       	cpi	r24, 0x30	; 48
    30ae:	21 f4       	brne	.+8      	; 0x30b8 <_Z17handleLinkBusMsgsv+0x292>
					{
						stopEventNow(PROGRAMMATIC);
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	0e 94 21 13 	call	0x2642	; 0x2642 <_Z12stopEventNow19EventActionSource_t>
    30b6:	a0 c3       	rjmp	.+1856   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    30b8:	81 33       	cpi	r24, 0x31	; 49
    30ba:	21 f4       	brne	.+8      	; 0x30c4 <_Z17handleLinkBusMsgsv+0x29e>
					{
						startEventNow(PROGRAMMATIC);
    30bc:	82 e0       	ldi	r24, 0x02	; 2
    30be:	0e 94 cf 12 	call	0x259e	; 0x259e <_Z13startEventNow19EventActionSource_t>
    30c2:	9a c3       	rjmp	.+1844   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    30c4:	82 33       	cpi	r24, 0x32	; 50
    30c6:	09 f0       	breq	.+2      	; 0x30ca <_Z17handleLinkBusMsgsv+0x2a4>
    30c8:	97 c3       	rjmp	.+1838   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_transmissions_disabled>
						startEventUsingRTC();
    30d0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z18startEventUsingRTCv>
    30d4:	91 c3       	rjmp	.+1826   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    30d6:	f6 01       	movw	r30, r12
    30d8:	83 81       	ldd	r24, Z+3	; 0x03
    30da:	88 23       	and	r24, r24
    30dc:	99 f1       	breq	.+102    	; 0x3144 <_Z17handleLinkBusMsgsv+0x31e>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    30de:	e0 e2       	ldi	r30, 0x20	; 32
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	d5 01       	movw	r26, r10
    30e4:	ed 93       	st	X+, r30
    30e6:	fc 93       	st	X, r31
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    30e8:	b6 01       	movw	r22, r12
    30ea:	6d 5f       	subi	r22, 0xFD	; 253
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	c5 01       	movw	r24, r10
    30f0:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <strcat>

					if(lb_buff->fields[FIELD2][0])
    30f4:	d6 01       	movw	r26, r12
    30f6:	57 96       	adiw	r26, 0x17	; 23
    30f8:	8c 91       	ld	r24, X
    30fa:	88 23       	and	r24, r24
    30fc:	79 f0       	breq	.+30     	; 0x311c <_Z17handleLinkBusMsgsv+0x2f6>
					{
						strcat(g_tempStr, " ");
    30fe:	f5 01       	movw	r30, r10
    3100:	01 90       	ld	r0, Z+
    3102:	00 20       	and	r0, r0
    3104:	e9 f7       	brne	.-6      	; 0x3100 <_Z17handleLinkBusMsgsv+0x2da>
    3106:	31 97       	sbiw	r30, 0x01	; 1
    3108:	80 e2       	ldi	r24, 0x20	; 32
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    3110:	b6 01       	movw	r22, r12
    3112:	69 5e       	subi	r22, 0xE9	; 233
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	c5 01       	movw	r24, r10
    3118:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    311c:	f5 01       	movw	r30, r10
    311e:	01 90       	ld	r0, Z+
    3120:	00 20       	and	r0, r0
    3122:	e9 f7       	brne	.-6      	; 0x311e <_Z17handleLinkBusMsgsv+0x2f8>
    3124:	31 97       	sbiw	r30, 0x01	; 1
    3126:	e6 5e       	subi	r30, 0xE6	; 230
    3128:	f4 40       	sbci	r31, 0x04	; 4
    312a:	75 97       	sbiw	r30, 0x15	; 21
    312c:	58 f4       	brcc	.+22     	; 0x3144 <_Z17handleLinkBusMsgsv+0x31e>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    312e:	b5 01       	movw	r22, r10
    3130:	81 e3       	ldi	r24, 0x31	; 49
    3132:	95 e0       	ldi	r25, 0x05	; 5
    3134:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    3138:	a5 01       	movw	r20, r10
    313a:	6b e0       	ldi	r22, 0x0B	; 11
    313c:	84 ea       	ldi	r24, 0xA4	; 164
    313e:	95 e0       	ldi	r25, 0x05	; 5
    3140:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    3144:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <g_messages_text+0x15>
    3148:	88 23       	and	r24, r24
    314a:	f1 f0       	breq	.+60     	; 0x3188 <_Z17handleLinkBusMsgsv+0x362>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    314c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	81 e3       	ldi	r24, 0x31	; 49
    3154:	95 e0       	ldi	r25, 0x05	; 5
    3156:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <_Z26timeRequiredToSendStrAtWPMPcj>
    315a:	88 5a       	subi	r24, 0xA8	; 168
    315c:	9d 4f       	sbci	r25, 0xFD	; 253
    315e:	9c 01       	movw	r18, r24
    3160:	36 95       	lsr	r19
    3162:	27 95       	ror	r18
    3164:	36 95       	lsr	r19
    3166:	27 95       	ror	r18
    3168:	36 95       	lsr	r19
    316a:	27 95       	ror	r18
    316c:	a5 ec       	ldi	r26, 0xC5	; 197
    316e:	b0 e2       	ldi	r27, 0x20	; 32
    3170:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>
    3174:	92 95       	swap	r25
    3176:	82 95       	swap	r24
    3178:	8f 70       	andi	r24, 0x0F	; 15
    317a:	89 27       	eor	r24, r25
    317c:	9f 70       	andi	r25, 0x0F	; 15
    317e:	89 27       	eor	r24, r25
    3180:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <g_time_needed_for_ID+0x1>
    3184:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    3188:	81 e3       	ldi	r24, 0x31	; 49
    318a:	95 e0       	ldi	r25, 0x05	; 5
    318c:	9f 93       	push	r25
    318e:	8f 93       	push	r24
    3190:	a4 ea       	ldi	r26, 0xA4	; 164
    3192:	b1 e0       	ldi	r27, 0x01	; 1
    3194:	bf 93       	push	r27
    3196:	af 93       	push	r26
    3198:	bf 92       	push	r11
    319a:	af 92       	push	r10
    319c:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
				lb_send_string(g_tempStr, TRUE);
    31a0:	61 e0       	ldi	r22, 0x01	; 1
    31a2:	c5 01       	movw	r24, r10
    31a4:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
			}
			break;
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	21 c3       	rjmp	.+1602   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    31b6:	d6 01       	movw	r26, r12
    31b8:	13 96       	adiw	r26, 0x03	; 3
    31ba:	8c 91       	ld	r24, X
    31bc:	13 97       	sbiw	r26, 0x03	; 3
    31be:	89 34       	cpi	r24, 0x49	; 73
    31c0:	f1 f5       	brne	.+124    	; 0x323e <_Z17handleLinkBusMsgsv+0x418>
				{
					if(lb_buff->fields[FIELD2][0])
    31c2:	57 96       	adiw	r26, 0x17	; 23
    31c4:	8c 91       	ld	r24, X
    31c6:	88 23       	and	r24, r24
    31c8:	d1 f1       	breq	.+116    	; 0x323e <_Z17handleLinkBusMsgsv+0x418>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    31ca:	c6 01       	movw	r24, r12
    31cc:	47 96       	adiw	r24, 0x17	; 23
    31ce:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    31d2:	86 2f       	mov	r24, r22
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	85 30       	cpi	r24, 0x05	; 5
    31d8:	91 05       	cpc	r25, r1
    31da:	14 f4       	brge	.+4      	; 0x31e0 <_Z17handleLinkBusMsgsv+0x3ba>
    31dc:	85 e0       	ldi	r24, 0x05	; 5
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	85 31       	cpi	r24, 0x15	; 21
    31e2:	91 05       	cpc	r25, r1
    31e4:	0c f0       	brlt	.+2      	; 0x31e8 <_Z17handleLinkBusMsgsv+0x3c2>
    31e6:	84 e1       	ldi	r24, 0x14	; 20
    31e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    31ec:	44 e1       	ldi	r20, 0x14	; 20
    31ee:	51 e0       	ldi	r21, 0x01	; 1
    31f0:	6f e0       	ldi	r22, 0x0F	; 15
    31f2:	84 ea       	ldi	r24, 0xA4	; 164
    31f4:	95 e0       	ldi	r25, 0x05	; 5
    31f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    31fa:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <g_messages_text+0x15>
    31fe:	88 23       	and	r24, r24
    3200:	f1 f0       	breq	.+60     	; 0x323e <_Z17handleLinkBusMsgsv+0x418>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3202:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	81 e3       	ldi	r24, 0x31	; 49
    320a:	95 e0       	ldi	r25, 0x05	; 5
    320c:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <_Z26timeRequiredToSendStrAtWPMPcj>
    3210:	88 5a       	subi	r24, 0xA8	; 168
    3212:	9d 4f       	sbci	r25, 0xFD	; 253
    3214:	9c 01       	movw	r18, r24
    3216:	36 95       	lsr	r19
    3218:	27 95       	ror	r18
    321a:	36 95       	lsr	r19
    321c:	27 95       	ror	r18
    321e:	36 95       	lsr	r19
    3220:	27 95       	ror	r18
    3222:	a5 ec       	ldi	r26, 0xC5	; 197
    3224:	b0 e2       	ldi	r27, 0x20	; 32
    3226:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>
    322a:	92 95       	swap	r25
    322c:	82 95       	swap	r24
    322e:	8f 70       	andi	r24, 0x0F	; 15
    3230:	89 27       	eor	r24, r25
    3232:	9f 70       	andi	r25, 0x0F	; 15
    3234:	89 27       	eor	r24, r25
    3236:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <g_time_needed_for_ID+0x1>
    323a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    323e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_id_codespeed>
    3242:	1f 92       	push	r1
    3244:	8f 93       	push	r24
    3246:	5f 92       	push	r5
    3248:	4f 92       	push	r4
    324a:	bf 92       	push	r11
    324c:	af 92       	push	r10
    324e:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	c5 01       	movw	r24, r10
    3256:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
			}
			break;
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	c8 c2       	rjmp	.+1424   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>

			case MESSAGE_VERSION:
			{
				ee_mgr.sendEEPROMString(TextVersion);
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	84 ea       	ldi	r24, 0xA4	; 164
    326c:	95 e0       	ldi	r25, 0x05	; 5
    326e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
			}
			break;
    3272:	c2 c2       	rjmp	.+1412   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    3274:	f6 01       	movw	r30, r12
    3276:	83 81       	ldd	r24, Z+3	; 0x03
    3278:	88 23       	and	r24, r24
    327a:	d1 f0       	breq	.+52     	; 0x32b0 <_Z17handleLinkBusMsgsv+0x48a>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    327c:	48 e0       	ldi	r20, 0x08	; 8
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	b6 01       	movw	r22, r12
    3282:	6d 5f       	subi	r22, 0xFD	; 253
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	c5 01       	movw	r24, r10
    3288:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    328c:	d5 01       	movw	r26, r10
    328e:	18 96       	adiw	r26, 0x08	; 8
    3290:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    3292:	c5 01       	movw	r24, r10
    3294:	0e 94 c1 12 	call	0x2582	; 0x2582 <_Z11only_digitsPc>
    3298:	88 23       	and	r24, r24
    329a:	51 f0       	breq	.+20     	; 0x32b0 <_Z17handleLinkBusMsgsv+0x48a>
    329c:	f5 01       	movw	r30, r10
    329e:	01 90       	ld	r0, Z+
    32a0:	00 20       	and	r0, r0
    32a2:	e9 f7       	brne	.-6      	; 0x329e <_Z17handleLinkBusMsgsv+0x478>
    32a4:	31 97       	sbiw	r30, 0x01	; 1
    32a6:	e6 5e       	subi	r30, 0xE6	; 230
    32a8:	f4 40       	sbci	r31, 0x04	; 4
    32aa:	34 97       	sbiw	r30, 0x04	; 4
    32ac:	08 f0       	brcs	.+2      	; 0x32b0 <_Z17handleLinkBusMsgsv+0x48a>
    32ae:	b0 c2       	rjmp	.+1376   	; 0x3810 <_Z17handleLinkBusMsgsv+0x9ea>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    32b0:	9f 92       	push	r9
    32b2:	8f 92       	push	r8
    32b4:	7f 92       	push	r7
    32b6:	6f 92       	push	r6
    32b8:	bf 92       	push	r11
    32ba:	af 92       	push	r10
    32bc:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
				lb_send_string(g_tempStr, TRUE);
    32c0:	61 e0       	ldi	r22, 0x01	; 1
    32c2:	c5 01       	movw	r24, r10
    32c4:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
			}
			break;
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	91 c2       	rjmp	.+1314   	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    32d6:	f6 01       	movw	r30, r12
    32d8:	83 81       	ldd	r24, Z+3	; 0x03
    32da:	84 35       	cpi	r24, 0x54	; 84
    32dc:	09 f0       	breq	.+2      	; 0x32e0 <_Z17handleLinkBusMsgsv+0x4ba>
    32de:	74 c0       	rjmp	.+232    	; 0x33c8 <_Z17handleLinkBusMsgsv+0x5a2>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    32e0:	4c e0       	ldi	r20, 0x0C	; 12
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	b6 01       	movw	r22, r12
    32e6:	69 5e       	subi	r22, 0xE9	; 233
    32e8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ea:	c5 01       	movw	r24, r10
    32ec:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    32f0:	d5 01       	movw	r26, r10
    32f2:	1c 96       	adiw	r26, 0x0c	; 12
    32f4:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    32f6:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_utc_offset>
    32fa:	41 95       	neg	r20
    32fc:	63 e9       	ldi	r22, 0x93	; 147
    32fe:	75 e0       	ldi	r23, 0x05	; 5
    3300:	c5 01       	movw	r24, r10
    3302:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_Z18validateTimeStringPcPma>
    3306:	69 87       	std	Y+9, r22	; 0x09
    3308:	7a 87       	std	Y+10, r23	; 0x0a
    330a:	8b 87       	std	Y+11, r24	; 0x0b
    330c:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    330e:	61 15       	cp	r22, r1
    3310:	71 05       	cpc	r23, r1
    3312:	81 05       	cpc	r24, r1
    3314:	91 05       	cpc	r25, r1
    3316:	41 f1       	breq	.+80     	; 0x3368 <_Z17handleLinkBusMsgsv+0x542>
					{
						rv3028_set_epoch(t);
    3318:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	ab 85       	ldd	r26, Y+11	; 0x0b
    3322:	bc 85       	ldd	r27, Y+12	; 0x0c
    3324:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_current_epoch>
    3328:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <g_current_epoch+0x1>
    332c:	a0 93 95 05 	sts	0x0595, r26	; 0x800595 <g_current_epoch+0x2>
    3330:	b0 93 96 05 	sts	0x0596, r27	; 0x800596 <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    3334:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    3338:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    333c:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    3340:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    3344:	bf 93       	push	r27
    3346:	af 93       	push	r26
    3348:	9f 93       	push	r25
    334a:	8f 93       	push	r24
    334c:	84 ec       	ldi	r24, 0xC4	; 196
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	9f 93       	push	r25
    3352:	8f 93       	push	r24
    3354:	bf 92       	push	r11
    3356:	af 92       	push	r10
    3358:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	5f c2       	rjmp	.+1214   	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3368:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <g_event_start_epoch>
    336c:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    3370:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    3374:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    3378:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch>
    337c:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x1>
    3380:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_current_epoch+0x2>
    3384:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <g_current_epoch+0x3>
    3388:	e1 2c       	mov	r14, r1
    338a:	f1 2c       	mov	r15, r1
    338c:	00 e7       	ldi	r16, 0x70	; 112
    338e:	11 e0       	ldi	r17, 0x01	; 1
    3390:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    3394:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    3398:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    339c:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    33a0:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    33a4:	bf 93       	push	r27
    33a6:	af 93       	push	r26
    33a8:	9f 93       	push	r25
    33aa:	8f 93       	push	r24
    33ac:	8f eb       	ldi	r24, 0xBF	; 191
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	9f 93       	push	r25
    33b2:	8f 93       	push	r24
    33b4:	bf 92       	push	r11
    33b6:	af 92       	push	r10
    33b8:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	2f c2       	rjmp	.+1118   	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    33c8:	83 35       	cpi	r24, 0x53	; 83
    33ca:	09 f0       	breq	.+2      	; 0x33ce <_Z17handleLinkBusMsgsv+0x5a8>
    33cc:	96 c0       	rjmp	.+300    	; 0x34fa <_Z17handleLinkBusMsgsv+0x6d4>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    33ce:	b6 01       	movw	r22, r12
    33d0:	69 5e       	subi	r22, 0xE9	; 233
    33d2:	7f 4f       	sbci	r23, 0xFF	; 255
    33d4:	c5 01       	movw	r24, r10
    33d6:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    33da:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_utc_offset>
    33de:	41 95       	neg	r20
    33e0:	6f e8       	ldi	r22, 0x8F	; 143
    33e2:	75 e0       	ldi	r23, 0x05	; 5
    33e4:	c5 01       	movw	r24, r10
    33e6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_Z18validateTimeStringPcPma>

					if(s)
    33ea:	61 15       	cp	r22, r1
    33ec:	71 05       	cpc	r23, r1
    33ee:	81 05       	cpc	r24, r1
    33f0:	91 05       	cpc	r25, r1
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <_Z17handleLinkBusMsgsv+0x5d0>
    33f4:	68 c0       	rjmp	.+208    	; 0x34c6 <_Z17handleLinkBusMsgsv+0x6a0>
					{
						g_event_start_epoch = s;
    33f6:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <g_event_start_epoch>
    33fa:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <g_event_start_epoch+0x1>
    33fe:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_event_start_epoch+0x2>
    3402:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3406:	4f e8       	ldi	r20, 0x8F	; 143
    3408:	55 e0       	ldi	r21, 0x05	; 5
    340a:	64 e1       	ldi	r22, 0x14	; 20
    340c:	84 ea       	ldi	r24, 0xA4	; 164
    340e:	95 e0       	ldi	r25, 0x05	; 5
    3410:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    3414:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    3418:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    341c:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    3420:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	9e 83       	std	Y+6, r25	; 0x06
    3428:	af 83       	std	Y+7, r26	; 0x07
    342a:	b8 87       	std	Y+8, r27	; 0x08
    342c:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    3430:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    3434:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    3438:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    343c:	80 58       	subi	r24, 0x80	; 128
    343e:	9e 4a       	sbci	r25, 0xAE	; 174
    3440:	ae 4f       	sbci	r26, 0xFE	; 254
    3442:	bf 4f       	sbci	r27, 0xFF	; 255
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	ab 83       	std	Y+3, r26	; 0x03
    344a:	bc 83       	std	Y+4, r27	; 0x04
    344c:	4d 81       	ldd	r20, Y+5	; 0x05
    344e:	5e 81       	ldd	r21, Y+6	; 0x06
    3450:	6f 81       	ldd	r22, Y+7	; 0x07
    3452:	78 85       	ldd	r23, Y+8	; 0x08
    3454:	48 17       	cp	r20, r24
    3456:	59 07       	cpc	r21, r25
    3458:	6a 07       	cpc	r22, r26
    345a:	7b 07       	cpc	r23, r27
    345c:	28 f4       	brcc	.+10     	; 0x3468 <_Z17handleLinkBusMsgsv+0x642>
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	ab 81       	ldd	r26, Y+3	; 0x03
    3464:	bc 81       	ldd	r27, Y+4	; 0x04
    3466:	04 c0       	rjmp	.+8      	; 0x3470 <_Z17handleLinkBusMsgsv+0x64a>
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	af 81       	ldd	r26, Y+7	; 0x07
    346e:	b8 85       	ldd	r27, Y+8	; 0x08
    3470:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_event_finish_epoch>
    3474:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_event_finish_epoch+0x1>
    3478:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <g_event_finish_epoch+0x2>
    347c:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3480:	4b e8       	ldi	r20, 0x8B	; 139
    3482:	55 e0       	ldi	r21, 0x05	; 5
    3484:	65 e1       	ldi	r22, 0x15	; 21
    3486:	84 ea       	ldi	r24, 0xA4	; 164
    3488:	95 e0       	ldi	r25, 0x05	; 5
    348a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    348e:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    3492:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    3496:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    349a:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    349e:	bf 93       	push	r27
    34a0:	af 93       	push	r26
    34a2:	9f 93       	push	r25
    34a4:	8f 93       	push	r24
    34a6:	8e ec       	ldi	r24, 0xCE	; 206
    34a8:	91 e0       	ldi	r25, 0x01	; 1
    34aa:	9f 93       	push	r25
    34ac:	8f 93       	push	r24
    34ae:	bf 92       	push	r11
    34b0:	af 92       	push	r10
    34b2:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
/*						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES); */
						startEventUsingRTC();
    34b6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z18startEventUsingRTCv>
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	b0 c1       	rjmp	.+864    	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    34c6:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch>
    34ca:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    34ce:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    34d2:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    34d6:	bf 93       	push	r27
    34d8:	af 93       	push	r26
    34da:	9f 93       	push	r25
    34dc:	8f 93       	push	r24
    34de:	8e ec       	ldi	r24, 0xCE	; 206
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	9f 93       	push	r25
    34e4:	8f 93       	push	r24
    34e6:	bf 92       	push	r11
    34e8:	af 92       	push	r10
    34ea:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	f8 94       	cli
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	cd bf       	out	0x3d, r28	; 61
    34f8:	96 c1       	rjmp	.+812    	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    34fa:	86 34       	cpi	r24, 0x46	; 70
    34fc:	09 f0       	breq	.+2      	; 0x3500 <_Z17handleLinkBusMsgsv+0x6da>
    34fe:	6f c0       	rjmp	.+222    	; 0x35de <_Z17handleLinkBusMsgsv+0x7b8>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3500:	b6 01       	movw	r22, r12
    3502:	69 5e       	subi	r22, 0xE9	; 233
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	c5 01       	movw	r24, r10
    3508:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    350c:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_utc_offset>
    3510:	41 95       	neg	r20
    3512:	6b e8       	ldi	r22, 0x8B	; 139
    3514:	75 e0       	ldi	r23, 0x05	; 5
    3516:	c5 01       	movw	r24, r10
    3518:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_Z18validateTimeStringPcPma>

					if(f)
    351c:	61 15       	cp	r22, r1
    351e:	71 05       	cpc	r23, r1
    3520:	81 05       	cpc	r24, r1
    3522:	91 05       	cpc	r25, r1
    3524:	09 f4       	brne	.+2      	; 0x3528 <_Z17handleLinkBusMsgsv+0x702>
    3526:	41 c0       	rjmp	.+130    	; 0x35aa <_Z17handleLinkBusMsgsv+0x784>
					{
						g_event_finish_epoch = f;
    3528:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_event_finish_epoch>
    352c:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_event_finish_epoch+0x1>
    3530:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_event_finish_epoch+0x2>
    3534:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3538:	4b e8       	ldi	r20, 0x8B	; 139
    353a:	55 e0       	ldi	r21, 0x05	; 5
    353c:	65 e1       	ldi	r22, 0x15	; 21
    353e:	84 ea       	ldi	r24, 0xA4	; 164
    3540:	95 e0       	ldi	r25, 0x05	; 5
    3542:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3546:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <g_event_finish_epoch>
    354a:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    354e:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    3552:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    3556:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch>
    355a:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    355e:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    3562:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    3566:	e1 2c       	mov	r14, r1
    3568:	f1 2c       	mov	r15, r1
    356a:	0c e7       	ldi	r16, 0x7C	; 124
    356c:	11 e0       	ldi	r17, 0x01	; 1
    356e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3572:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    3576:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    357a:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    357e:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    3582:	bf 93       	push	r27
    3584:	af 93       	push	r26
    3586:	9f 93       	push	r25
    3588:	8f 93       	push	r24
    358a:	89 ed       	ldi	r24, 0xD9	; 217
    358c:	91 e0       	ldi	r25, 0x01	; 1
    358e:	9f 93       	push	r25
    3590:	8f 93       	push	r24
    3592:	bf 92       	push	r11
    3594:	af 92       	push	r10
    3596:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
/*						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES); */
						startEventUsingRTC();
    359a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z18startEventUsingRTCv>
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	3e c1       	rjmp	.+636    	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    35aa:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_event_finish_epoch>
    35ae:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    35b2:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    35b6:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    35ba:	bf 93       	push	r27
    35bc:	af 93       	push	r26
    35be:	9f 93       	push	r25
    35c0:	8f 93       	push	r24
    35c2:	89 ed       	ldi	r24, 0xD9	; 217
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	9f 93       	push	r25
    35c8:	8f 93       	push	r24
    35ca:	bf 92       	push	r11
    35cc:	af 92       	push	r10
    35ce:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	24 c1       	rjmp	.+584    	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    35de:	8f 34       	cpi	r24, 0x4F	; 79
    35e0:	a9 f5       	brne	.+106    	; 0x364c <_Z17handleLinkBusMsgsv+0x826>
				{
					if(lb_buff->fields[FIELD2][0])
    35e2:	87 89       	ldd	r24, Z+23	; 0x17
    35e4:	88 23       	and	r24, r24
    35e6:	d9 f0       	breq	.+54     	; 0x361e <_Z17handleLinkBusMsgsv+0x7f8>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    35e8:	c6 01       	movw	r24, r12
    35ea:	47 96       	adiw	r24, 0x17	; 23
    35ec:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <atoi>

						offset = CLAMP(-24, offset, 24);
    35f0:	89 31       	cpi	r24, 0x19	; 25
    35f2:	54 f4       	brge	.+20     	; 0x3608 <_Z17handleLinkBusMsgsv+0x7e2>
    35f4:	08 2e       	mov	r0, r24
    35f6:	00 0c       	add	r0, r0
    35f8:	99 0b       	sbc	r25, r25
    35fa:	88 3e       	cpi	r24, 0xE8	; 232
    35fc:	bf ef       	ldi	r27, 0xFF	; 255
    35fe:	9b 07       	cpc	r25, r27
    3600:	2c f4       	brge	.+10     	; 0x360c <_Z17handleLinkBusMsgsv+0x7e6>
    3602:	88 ee       	ldi	r24, 0xE8	; 232
    3604:	9f ef       	ldi	r25, 0xFF	; 255
    3606:	02 c0       	rjmp	.+4      	; 0x360c <_Z17handleLinkBusMsgsv+0x7e6>
    3608:	88 e1       	ldi	r24, 0x18	; 24
    360a:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    360c:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    3610:	4a e8       	ldi	r20, 0x8A	; 138
    3612:	55 e0       	ldi	r21, 0x05	; 5
    3614:	66 e1       	ldi	r22, 0x16	; 22
    3616:	84 ea       	ldi	r24, 0xA4	; 164
    3618:	95 e0       	ldi	r25, 0x05	; 5
    361a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    361e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <g_utc_offset>
    3622:	28 2f       	mov	r18, r24
    3624:	08 2e       	mov	r0, r24
    3626:	00 0c       	add	r0, r0
    3628:	33 0b       	sbc	r19, r19
    362a:	3f 93       	push	r19
    362c:	8f 93       	push	r24
    362e:	85 ee       	ldi	r24, 0xE5	; 229
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	9f 93       	push	r25
    3634:	8f 93       	push	r24
    3636:	bf 92       	push	r11
    3638:	af 92       	push	r10
    363a:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	ed c0       	rjmp	.+474    	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    364c:	83 34       	cpi	r24, 0x43	; 67
    364e:	09 f5       	brne	.+66     	; 0x3692 <_Z17handleLinkBusMsgsv+0x86c>
				{
					if(lb_buff->fields[FIELD2][0])
    3650:	f6 01       	movw	r30, r12
    3652:	87 89       	ldd	r24, Z+23	; 0x17
    3654:	88 23       	and	r24, r24
    3656:	51 f0       	breq	.+20     	; 0x366c <_Z17handleLinkBusMsgsv+0x846>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3658:	c6 01       	movw	r24, r12
    365a:	47 96       	adiw	r24, 0x17	; 23
    365c:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <atoi>

						if(c < 512)
    3660:	81 15       	cp	r24, r1
    3662:	f2 e0       	ldi	r31, 0x02	; 2
    3664:	9f 07       	cpc	r25, r31
    3666:	10 f4       	brcc	.+4      	; 0x366c <_Z17handleLinkBusMsgsv+0x846>
						{
							rv3028_set_offset_RAM(c);
    3668:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    366c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    3670:	9f 93       	push	r25
    3672:	8f 93       	push	r24
    3674:	80 ef       	ldi	r24, 0xF0	; 240
    3676:	91 e0       	ldi	r25, 0x01	; 1
    3678:	9f 93       	push	r25
    367a:	8f 93       	push	r24
    367c:	bf 92       	push	r11
    367e:	af 92       	push	r10
    3680:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	ca c0       	rjmp	.+404    	; 0x3826 <_Z17handleLinkBusMsgsv+0xa00>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck() == CONFIGURATION_ERROR)
    3692:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_Z23clockConfigurationCheckv>
    3696:	82 30       	cpi	r24, 0x02	; 2
    3698:	19 f4       	brne	.+6      	; 0x36a0 <_Z17handleLinkBusMsgsv+0x87a>
					{
						reportConfigErrors();
    369a:	0e 94 93 13 	call	0x2726	; 0x2726 <_Z18reportConfigErrorsv>
    369e:	ac c0       	rjmp	.+344    	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    36a0:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <g_event_start_epoch>
    36a4:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    36a8:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    36ac:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    36b0:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch>
    36b4:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x1>
    36b8:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_current_epoch+0x2>
    36bc:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <g_current_epoch+0x3>
    36c0:	0f 2e       	mov	r0, r31
    36c2:	f3 e6       	ldi	r31, 0x63	; 99
    36c4:	ef 2e       	mov	r14, r31
    36c6:	f1 e0       	ldi	r31, 0x01	; 1
    36c8:	ff 2e       	mov	r15, r31
    36ca:	f0 2d       	mov	r31, r0
    36cc:	00 e7       	ldi	r16, 0x70	; 112
    36ce:	11 e0       	ldi	r17, 0x01	; 1
    36d0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    36d4:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <g_event_finish_epoch>
    36d8:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    36dc:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    36e0:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    36e4:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch>
    36e8:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    36ec:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    36f0:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    36f4:	e1 2c       	mov	r14, r1
    36f6:	f1 2c       	mov	r15, r1
    36f8:	0c e7       	ldi	r16, 0x7C	; 124
    36fa:	11 e0       	ldi	r17, 0x01	; 1
    36fc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    3700:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch>
    3704:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x1>
    3708:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_event_start_epoch+0x2>
    370c:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_event_start_epoch+0x3>
    3710:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch>
    3714:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x1>
    3718:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <g_current_epoch+0x2>
    371c:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <g_current_epoch+0x3>
    3720:	48 17       	cp	r20, r24
    3722:	59 07       	cpc	r21, r25
    3724:	6a 07       	cpc	r22, r26
    3726:	7b 07       	cpc	r23, r27
    3728:	08 f0       	brcs	.+2      	; 0x372c <_Z17handleLinkBusMsgsv+0x906>
    372a:	66 c0       	rjmp	.+204    	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    372c:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <g_event_finish_epoch>
    3730:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <g_event_finish_epoch+0x1>
    3734:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_finish_epoch+0x2>
    3738:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_finish_epoch+0x3>
    373c:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch>
    3740:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x1>
    3744:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_current_epoch+0x2>
    3748:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <g_current_epoch+0x3>
    374c:	04 e8       	ldi	r16, 0x84	; 132
    374e:	11 e0       	ldi	r17, 0x01	; 1
    3750:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_Z14reportTimeTillmmPKcS0_>
    3754:	51 c0       	rjmp	.+162    	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3756:	f6 01       	movw	r30, r12
    3758:	83 81       	ldd	r24, Z+3	; 0x03
    375a:	83 34       	cpi	r24, 0x43	; 67
    375c:	81 f5       	brne	.+96     	; 0x37be <_Z17handleLinkBusMsgsv+0x998>
				{
					if(lb_buff->fields[FIELD2][0])
    375e:	87 89       	ldd	r24, Z+23	; 0x17
    3760:	88 23       	and	r24, r24
    3762:	a9 f0       	breq	.+42     	; 0x378e <_Z17handleLinkBusMsgsv+0x968>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3764:	c6 01       	movw	r24, r12
    3766:	47 96       	adiw	r24, 0x17	; 23
    3768:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <atoi>

						if((v > -2000) && (v < 2000))
    376c:	9c 01       	movw	r18, r24
    376e:	21 53       	subi	r18, 0x31	; 49
    3770:	38 4f       	sbci	r19, 0xF8	; 248
    3772:	2f 39       	cpi	r18, 0x9F	; 159
    3774:	3f 40       	sbci	r19, 0x0F	; 15
    3776:	58 f4       	brcc	.+22     	; 0x378e <_Z17handleLinkBusMsgsv+0x968>
						{
							g_atmega_temp_calibration = v;
    3778:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_atmega_temp_calibration+0x1>
    377c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3780:	41 e1       	ldi	r20, 0x11	; 17
    3782:	51 e0       	ldi	r21, 0x01	; 1
    3784:	62 e1       	ldi	r22, 0x12	; 18
    3786:	84 ea       	ldi	r24, 0xA4	; 164
    3788:	95 e0       	ldi	r25, 0x05	; 5
    378a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    378e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_atmega_temp_calibration>
    3792:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_atmega_temp_calibration+0x1>
    3796:	9f 93       	push	r25
    3798:	8f 93       	push	r24
    379a:	86 ef       	ldi	r24, 0xF6	; 246
    379c:	91 e0       	ldi	r25, 0x01	; 1
    379e:	9f 93       	push	r25
    37a0:	8f 93       	push	r24
    37a2:	bf 92       	push	r11
    37a4:	af 92       	push	r10
    37a6:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
					lb_send_string(g_tempStr, FALSE);
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	c5 01       	movw	r24, r10
    37ae:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    37be:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_temperature>
    37c2:	28 2f       	mov	r18, r24
    37c4:	08 2e       	mov	r0, r24
    37c6:	00 0c       	add	r0, r0
    37c8:	33 0b       	sbc	r19, r19
    37ca:	3f 93       	push	r19
    37cc:	8f 93       	push	r24
    37ce:	3f 92       	push	r3
    37d0:	2f 92       	push	r2
    37d2:	bf 92       	push	r11
    37d4:	af 92       	push	r10
    37d6:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <sprintf>
				lb_send_string(g_tempStr, TRUE);
    37da:	61 e0       	ldi	r22, 0x01	; 1
    37dc:	c5 01       	movw	r24, r10
    37de:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
			}
			break;
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>

			default:
			{
				ee_mgr.send_Help();
    37f0:	84 ea       	ldi	r24, 0xA4	; 164
    37f2:	95 e0       	ldi	r25, 0x05	; 5
    37f4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    37f8:	f6 01       	movw	r30, r12
    37fa:	12 82       	std	Z+2, r1	; 0x02
    37fc:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    37fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_Z17lb_send_NewPromptv>
    3802:	49 cb       	rjmp	.-2414   	; 0x2e96 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	ef cb       	rjmp	.-2082   	; 0x2fe8 <_Z17handleLinkBusMsgsv+0x1c2>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    380a:	86 e0       	ldi	r24, 0x06	; 6
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	ec cb       	rjmp	.-2088   	; 0x2fe8 <_Z17handleLinkBusMsgsv+0x1c2>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    3810:	b5 01       	movw	r22, r10
    3812:	c4 01       	movw	r24, r8
    3814:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3818:	a4 01       	movw	r20, r8
    381a:	6e e0       	ldi	r22, 0x0E	; 14
    381c:	84 ea       	ldi	r24, 0xA4	; 164
    381e:	95 e0       	ldi	r25, 0x05	; 5
    3820:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    3824:	45 cd       	rjmp	.-1398   	; 0x32b0 <_Z17handleLinkBusMsgsv+0x48a>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    3826:	61 e0       	ldi	r22, 0x01	; 1
    3828:	c5 01       	movw	r24, r10
    382a:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
    382e:	e4 cf       	rjmp	.-56     	; 0x37f8 <_Z17handleLinkBusMsgsv+0x9d2>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3830:	2c 96       	adiw	r28, 0x0c	; 12
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	df 90       	pop	r13
    384a:	cf 90       	pop	r12
    384c:	bf 90       	pop	r11
    384e:	af 90       	pop	r10
    3850:	9f 90       	pop	r9
    3852:	8f 90       	pop	r8
    3854:	7f 90       	pop	r7
    3856:	6f 90       	pop	r6
    3858:	5f 90       	pop	r5
    385a:	4f 90       	pop	r4
    385c:	3f 90       	pop	r3
    385e:	2f 90       	pop	r2
    3860:	08 95       	ret

00003862 <_Z10processKeyc>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    3862:	cf 92       	push	r12
    3864:	df 92       	push	r13
    3866:	ef 92       	push	r14
    3868:	ff 92       	push	r15
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	1f 92       	push	r1
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    3874:	84 34       	cpi	r24, 0x44	; 68
    3876:	39 f4       	brne	.+14     	; 0x3886 <_Z10processKeyc+0x24>
		{
			g_DTMF_unlocked = FALSE;
    3878:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    387c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3880:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    3884:	c2 c3       	rjmp	.+1924   	; 0x400a <_Z10processKeyc+0x7a8>
		}

		if(!g_DTMF_unlocked)
    3886:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_DTMF_unlocked>
    388a:	91 11       	cpse	r25, r1
    388c:	07 c0       	rjmp	.+14     	; 0x389c <_Z10processKeyc+0x3a>
		{
			state = STATE_CHECK_PASSWORD;
    388e:	2f e0       	ldi	r18, 0x0F	; 15
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3896:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    389a:	4d c3       	rjmp	.+1690   	; 0x3f36 <_Z10processKeyc+0x6d4>
		}
		else
		{
			if(key == '*')
    389c:	8a 32       	cpi	r24, 0x2A	; 42
    389e:	a9 f4       	brne	.+42     	; 0x38ca <_Z10processKeyc+0x68>
			{
				state = STATE_SENTENCE_START;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    38a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    38ac:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    38b0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10processKeycE12stringLength>
				value = 0;
    38b4:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ10processKeycE5value+0x1>
    38b8:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ10processKeycE5value>
				digits = 0;
    38bc:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    38c0:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    38c4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_DTMF_unlocked>
    38c8:	a0 c3       	rjmp	.+1856   	; 0x400a <_Z10processKeyc+0x7a8>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    38ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    38ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    38d2:	31 97       	sbiw	r30, 0x01	; 1
    38d4:	e1 31       	cpi	r30, 0x11	; 17
    38d6:	f1 05       	cpc	r31, r1
    38d8:	08 f0       	brcs	.+2      	; 0x38dc <_Z10processKeyc+0x7a>
    38da:	97 c3       	rjmp	.+1838   	; 0x400a <_Z10processKeyc+0x7a8>
    38dc:	28 2f       	mov	r18, r24
    38de:	ee 57       	subi	r30, 0x7E	; 126
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    38e6:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    38ea:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10processKeycE12stringLength>
				value = 0;
    38ee:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ10processKeycE5value+0x1>
    38f2:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ10processKeycE5value>
				digits = 0;
    38f6:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    38fa:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    38fe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_DTMF_unlocked>
    3902:	88 23       	and	r24, r24
    3904:	09 f4       	brne	.+2      	; 0x3908 <_Z10processKeyc+0xa6>
    3906:	81 c3       	rjmp	.+1794   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					if(key == 'A')
    3908:	21 34       	cpi	r18, 0x41	; 65
    390a:	39 f4       	brne	.+14     	; 0x391a <_Z10processKeyc+0xb8>
					{
						state = STATE_A;
    390c:	82 e0       	ldi	r24, 0x02	; 2
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3914:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3918:	78 c3       	rjmp	.+1776   	; 0x400a <_Z10processKeyc+0x7a8>
					}
					else if(key == 'B')
    391a:	22 34       	cpi	r18, 0x42	; 66
    391c:	39 f4       	brne	.+14     	; 0x392c <_Z10processKeyc+0xca>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    391e:	80 e1       	ldi	r24, 0x10	; 16
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3926:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    392a:	6f c3       	rjmp	.+1758   	; 0x400a <_Z10processKeyc+0x7a8>
					}
					else if(key == 'C')
    392c:	23 34       	cpi	r18, 0x43	; 67
    392e:	39 f4       	brne	.+14     	; 0x393e <_Z10processKeyc+0xdc>
					{
						state = STATE_C;
    3930:	86 e0       	ldi	r24, 0x06	; 6
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3938:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    393c:	66 c3       	rjmp	.+1740   	; 0x400a <_Z10processKeyc+0x7a8>
					}
					else if(key != '*')
    393e:	2a 32       	cpi	r18, 0x2A	; 42
    3940:	09 f4       	brne	.+2      	; 0x3944 <_Z10processKeyc+0xe2>
    3942:	63 c3       	rjmp	.+1734   	; 0x400a <_Z10processKeyc+0x7a8>
					{
						value = key - '0';
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	20 53       	subi	r18, 0x30	; 48
    3948:	31 09       	sbc	r19, r1
    394a:	30 93 86 04 	sts	0x0486, r19	; 0x800486 <_ZZ10processKeycE5value+0x1>
    394e:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							if(g_AM_enabled)
    3952:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_AM_enabled>
    3956:	81 11       	cpse	r24, r1
							{
								setupPortsForF1975();
    3958:	0e 94 31 05 	call	0xa62	; 0xa62 <_Z18setupPortsForF1975v>
							}
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    395c:	81 e1       	ldi	r24, 0x11	; 17
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3964:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3968:	50 c3       	rjmp	.+1696   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_A:
			{
				state = STATE_SHUTDOWN;
    396a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    396e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>

				if(key == '0')
    3972:	80 33       	cpi	r24, 0x30	; 48
    3974:	39 f4       	brne	.+14     	; 0x3984 <_Z10processKeyc+0x122>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    3976:	83 e0       	ldi	r24, 0x03	; 3
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    397e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3982:	43 c3       	rjmp	.+1670   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '1')
    3984:	81 33       	cpi	r24, 0x31	; 49
    3986:	39 f4       	brne	.+14     	; 0x3996 <_Z10processKeyc+0x134>
				{
					state = STATE_START_TRANSMISSIONS;
    3988:	84 e0       	ldi	r24, 0x04	; 4
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3990:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3994:	3a c3       	rjmp	.+1652   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '2')
    3996:	82 33       	cpi	r24, 0x32	; 50
    3998:	39 f4       	brne	.+14     	; 0x39a8 <_Z10processKeyc+0x146>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    399a:	85 e0       	ldi	r24, 0x05	; 5
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    39a6:	31 c3       	rjmp	.+1634   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key == '8') && setPasswordEnabled)
    39a8:	88 33       	cpi	r24, 0x38	; 56
    39aa:	09 f0       	breq	.+2      	; 0x39ae <_Z10processKeyc+0x14c>
    39ac:	2e c3       	rjmp	.+1628   	; 0x400a <_Z10processKeyc+0x7a8>
    39ae:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ10processKeycE18setPasswordEnabled>
    39b2:	88 23       	and	r24, r24
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <_Z10processKeyc+0x156>
    39b6:	29 c3       	rjmp	.+1618   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					state = STATE_SET_PASSWORD;
    39b8:	8e e0       	ldi	r24, 0x0E	; 14
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    39c4:	22 c3       	rjmp	.+1604   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    39c6:	80 ed       	ldi	r24, 0xD0	; 208
    39c8:	82 0f       	add	r24, r18
    39ca:	8a 30       	cpi	r24, 0x0A	; 10
    39cc:	08 f5       	brcc	.+66     	; 0x3a10 <_Z10processKeyc+0x1ae>
				{
					value *= 10;
					value += key - '0';
    39ce:	40 91 85 04 	lds	r20, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    39d2:	50 91 86 04 	lds	r21, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    39d6:	ca 01       	movw	r24, r20
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	44 0f       	add	r20, r20
    39de:	55 1f       	adc	r21, r21
    39e0:	44 0f       	add	r20, r20
    39e2:	55 1f       	adc	r21, r21
    39e4:	44 0f       	add	r20, r20
    39e6:	55 1f       	adc	r21, r21
    39e8:	48 0f       	add	r20, r24
    39ea:	59 1f       	adc	r21, r25
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	20 53       	subi	r18, 0x30	; 48
    39f0:	31 09       	sbc	r19, r1
    39f2:	42 0f       	add	r20, r18
    39f4:	53 1f       	adc	r21, r19
    39f6:	50 93 86 04 	sts	0x0486, r21	; 0x800486 <_ZZ10processKeycE5value+0x1>
    39fa:	40 93 85 04 	sts	0x0485, r20	; 0x800485 <_ZZ10processKeycE5value>
					digits++;
    39fe:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10processKeycE6digits>
    3a02:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3a06:	01 96       	adiw	r24, 0x01	; 1
    3a08:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3a0c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10processKeycE6digits>
				}

				if(digits >= 2)
    3a10:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10processKeycE6digits>
    3a14:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3a18:	02 97       	sbiw	r24, 0x02	; 2
    3a1a:	0c f4       	brge	.+2      	; 0x3a1e <_Z10processKeyc+0x1bc>
    3a1c:	f6 c2       	rjmp	.+1516   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					state = STATE_SHUTDOWN;
    3a1e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a22:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    3a26:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    3a2a:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3a2e:	98 13       	cpse	r25, r24
    3a30:	ec c2       	rjmp	.+1496   	; 0x400a <_Z10processKeyc+0x7a8>
					{
						state = STATE_SENTENCE_START;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a3a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a3e:	e5 c2       	rjmp	.+1482   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    3a40:	83 32       	cpi	r24, 0x23	; 35
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <_Z10processKeyc+0x1e4>
    3a44:	e2 c2       	rjmp	.+1476   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					stopEventNow(PROGRAMMATIC);
    3a46:	82 e0       	ldi	r24, 0x02	; 2
    3a48:	0e 94 21 13 	call	0x2642	; 0x2642 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    3a4c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a50:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3a54:	da c2       	rjmp	.+1460   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    3a56:	83 32       	cpi	r24, 0x23	; 35
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <_Z10processKeyc+0x1fa>
    3a5a:	d7 c2       	rjmp	.+1454   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					startEventNow(PROGRAMMATIC);
    3a5c:	82 e0       	ldi	r24, 0x02	; 2
    3a5e:	0e 94 cf 12 	call	0x259e	; 0x259e <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    3a62:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a66:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3a6a:	cf c2       	rjmp	.+1438   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    3a6c:	83 32       	cpi	r24, 0x23	; 35
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <_Z10processKeyc+0x210>
    3a70:	cc c2       	rjmp	.+1432   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					startEventUsingRTC();
    3a72:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    3a76:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a7a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3a7e:	c5 c2       	rjmp	.+1418   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    3a80:	81 33       	cpi	r24, 0x31	; 49
    3a82:	39 f4       	brne	.+14     	; 0x3a92 <_Z10processKeyc+0x230>
				{
					state = STATE_RECEIVING_CALLSIGN;
    3a84:	87 e0       	ldi	r24, 0x07	; 7
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a8c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a90:	bc c2       	rjmp	.+1400   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '2')
    3a92:	82 33       	cpi	r24, 0x32	; 50
    3a94:	39 f4       	brne	.+14     	; 0x3aa4 <_Z10processKeyc+0x242>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    3a96:	88 e0       	ldi	r24, 0x08	; 8
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a9e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3aa2:	b3 c2       	rjmp	.+1382   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    3aa4:	83 33       	cpi	r24, 0x33	; 51
    3aa6:	39 f4       	brne	.+14     	; 0x3ab6 <_Z10processKeyc+0x254>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    3aa8:	8c e0       	ldi	r24, 0x0C	; 12
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ab0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ab4:	aa c2       	rjmp	.+1364   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '4')
    3ab6:	84 33       	cpi	r24, 0x34	; 52
    3ab8:	39 f4       	brne	.+14     	; 0x3ac8 <_Z10processKeyc+0x266>
				{
					state = STATE_RECEIVING_START_TIME;
    3aba:	89 e0       	ldi	r24, 0x09	; 9
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ac2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ac6:	a1 c2       	rjmp	.+1346   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '5')
    3ac8:	85 33       	cpi	r24, 0x35	; 53
    3aca:	39 f4       	brne	.+14     	; 0x3ada <_Z10processKeyc+0x278>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    3acc:	8a e0       	ldi	r24, 0x0A	; 10
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ad4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ad8:	98 c2       	rjmp	.+1328   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '6')
    3ada:	86 33       	cpi	r24, 0x36	; 54
    3adc:	69 f4       	brne	.+26     	; 0x3af8 <_Z10processKeyc+0x296>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    3ade:	8b e0       	ldi	r24, 0x0B	; 11
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ae6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3af2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10processKeycE6digits>
    3af6:	89 c2       	rjmp	.+1298   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == '9')
    3af8:	89 33       	cpi	r24, 0x39	; 57
    3afa:	39 f4       	brne	.+14     	; 0x3b0a <_Z10processKeyc+0x2a8>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    3afc:	8d e0       	ldi	r24, 0x0D	; 13
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b04:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b08:	80 c2       	rjmp	.+1280   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else
				{
					state = STATE_SHUTDOWN;
    3b0a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b0e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b12:	7b c2       	rjmp	.+1270   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    3b14:	83 32       	cpi	r24, 0x23	; 35
    3b16:	c1 f4       	brne	.+48     	; 0x3b48 <_Z10processKeyc+0x2e6>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    3b18:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE12stringLength>
    3b1c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3b20:	04 97       	sbiw	r24, 0x04	; 4
    3b22:	6c f0       	brlt	.+26     	; 0x3b3e <_Z10processKeyc+0x2dc>
					{
						strcpy((char*)g_unlockCode, receivedString);
    3b24:	6d e6       	ldi	r22, 0x6D	; 109
    3b26:	74 e0       	ldi	r23, 0x04	; 4
    3b28:	8b e4       	ldi	r24, 0x4B	; 75
    3b2a:	95 e0       	ldi	r25, 0x05	; 5
    3b2c:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3b30:	4b e4       	ldi	r20, 0x4B	; 75
    3b32:	55 e0       	ldi	r21, 0x05	; 5
    3b34:	6e e0       	ldi	r22, 0x0E	; 14
    3b36:	84 ea       	ldi	r24, 0xA4	; 164
    3b38:	95 e0       	ldi	r25, 0x05	; 5
    3b3a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3b3e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b42:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b46:	61 c2       	rjmp	.+1218   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3b48:	80 ed       	ldi	r24, 0xD0	; 208
    3b4a:	82 0f       	add	r24, r18
    3b4c:	8a 30       	cpi	r24, 0x0A	; 10
    3b4e:	08 f0       	brcs	.+2      	; 0x3b52 <_Z10processKeyc+0x2f0>
    3b50:	5c c2       	rjmp	.+1208   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    3b52:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE12stringLength>
    3b56:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3b5a:	89 30       	cpi	r24, 0x09	; 9
    3b5c:	91 05       	cpc	r25, r1
    3b5e:	0c f0       	brlt	.+2      	; 0x3b62 <_Z10processKeyc+0x300>
    3b60:	54 c2       	rjmp	.+1192   	; 0x400a <_Z10processKeyc+0x7a8>
					{
						receivedString[stringLength++] = key;
    3b62:	ac 01       	movw	r20, r24
    3b64:	4f 5f       	subi	r20, 0xFF	; 255
    3b66:	5f 4f       	sbci	r21, 0xFF	; 255
    3b68:	50 93 88 04 	sts	0x0488, r21	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3b6c:	40 93 87 04 	sts	0x0487, r20	; 0x800487 <_ZZ10processKeycE12stringLength>
    3b70:	fc 01       	movw	r30, r24
    3b72:	e3 59       	subi	r30, 0x93	; 147
    3b74:	fb 4f       	sbci	r31, 0xFB	; 251
    3b76:	20 83       	st	Z, r18
						receivedString[stringLength] = '\0';
    3b78:	fa 01       	movw	r30, r20
    3b7a:	e3 59       	subi	r30, 0x93	; 147
    3b7c:	fb 4f       	sbci	r31, 0xFB	; 251
    3b7e:	10 82       	st	Z, r1
    3b80:	44 c2       	rjmp	.+1160   	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    3b82:	83 32       	cpi	r24, 0x23	; 35
    3b84:	e1 f4       	brne	.+56     	; 0x3bbe <_Z10processKeyc+0x35c>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    3b86:	ed e6       	ldi	r30, 0x6D	; 109
    3b88:	f4 e0       	ldi	r31, 0x04	; 4
    3b8a:	01 90       	ld	r0, Z+
    3b8c:	00 20       	and	r0, r0
    3b8e:	e9 f7       	brne	.-6      	; 0x3b8a <_Z10processKeyc+0x328>
    3b90:	31 97       	sbiw	r30, 0x01	; 1
    3b92:	ed 56       	subi	r30, 0x6D	; 109
    3b94:	f4 40       	sbci	r31, 0x04	; 4
    3b96:	75 97       	sbiw	r30, 0x15	; 21
    3b98:	68 f4       	brcc	.+26     	; 0x3bb4 <_Z10processKeyc+0x352>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    3b9a:	6d e6       	ldi	r22, 0x6D	; 109
    3b9c:	74 e0       	ldi	r23, 0x04	; 4
    3b9e:	81 e3       	ldi	r24, 0x31	; 49
    3ba0:	95 e0       	ldi	r25, 0x05	; 5
    3ba2:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    3ba6:	41 e3       	ldi	r20, 0x31	; 49
    3ba8:	55 e0       	ldi	r21, 0x05	; 5
    3baa:	6b e0       	ldi	r22, 0x0B	; 11
    3bac:	84 ea       	ldi	r24, 0xA4	; 164
    3bae:	95 e0       	ldi	r25, 0x05	; 5
    3bb0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3bb4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bb8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3bbc:	26 c2       	rjmp	.+1100   	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3bbe:	80 ed       	ldi	r24, 0xD0	; 208
    3bc0:	82 0f       	add	r24, r18
    3bc2:	8a 30       	cpi	r24, 0x0A	; 10
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <_Z10processKeyc+0x366>
    3bc6:	21 c2       	rjmp	.+1090   	; 0x400a <_Z10processKeyc+0x7a8>
				{
					if(digits)
    3bc8:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10processKeycE6digits>
    3bcc:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3bd0:	89 2b       	or	r24, r25
    3bd2:	c1 f1       	breq	.+112    	; 0x3c44 <_Z10processKeyc+0x3e2>
					{
						value = value * 10 + (key - '0');
    3bd4:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3bd8:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3bdc:	ac 01       	movw	r20, r24
    3bde:	44 0f       	add	r20, r20
    3be0:	55 1f       	adc	r21, r21
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	84 0f       	add	r24, r20
    3bf0:	95 1f       	adc	r25, r21
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	20 53       	subi	r18, 0x30	; 48
    3bf6:	31 09       	sbc	r19, r1
    3bf8:	28 0f       	add	r18, r24
    3bfa:	39 1f       	adc	r19, r25
    3bfc:	30 93 86 04 	sts	0x0486, r19	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3c00:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    3c04:	27 32       	cpi	r18, 0x27	; 39
    3c06:	31 05       	cpc	r19, r1
    3c08:	c4 f4       	brge	.+48     	; 0x3c3a <_Z10processKeyc+0x3d8>
    3c0a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE12stringLength>
    3c0e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3c12:	84 31       	cpi	r24, 0x14	; 20
    3c14:	91 05       	cpc	r25, r1
    3c16:	8c f4       	brge	.+34     	; 0x3c3a <_Z10processKeyc+0x3d8>
						{
							receivedString[stringLength] = keyMorse[value];
    3c18:	fc 01       	movw	r30, r24
    3c1a:	e3 59       	subi	r30, 0x93	; 147
    3c1c:	fb 4f       	sbci	r31, 0xFB	; 251
    3c1e:	d9 01       	movw	r26, r18
    3c20:	af 5b       	subi	r26, 0xBF	; 191
    3c22:	bd 4f       	sbci	r27, 0xFD	; 253
    3c24:	2c 91       	ld	r18, X
    3c26:	20 83       	st	Z, r18
							stringLength++;
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3c2e:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    3c32:	fc 01       	movw	r30, r24
    3c34:	e3 59       	subi	r30, 0x93	; 147
    3c36:	fb 4f       	sbci	r31, 0xFB	; 251
    3c38:	10 82       	st	Z, r1
						}

						digits = 0;
    3c3a:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3c3e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10processKeycE6digits>
    3c42:	e3 c1       	rjmp	.+966    	; 0x400a <_Z10processKeyc+0x7a8>
					}
					else
					{
						value = key - '0';
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	20 53       	subi	r18, 0x30	; 48
    3c48:	31 09       	sbc	r19, r1
    3c4a:	30 93 86 04 	sts	0x0486, r19	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3c4e:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <_ZZ10processKeycE5value>
						digits = 1;
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3c5a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10processKeycE6digits>
    3c5e:	d5 c1       	rjmp	.+938    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    3c60:	83 32       	cpi	r24, 0x23	; 35
    3c62:	f9 f4       	brne	.+62     	; 0x3ca2 <_Z10processKeyc+0x440>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    3c64:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3c68:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3c6c:	82 31       	cpi	r24, 0x12	; 18
    3c6e:	91 05       	cpc	r25, r1
    3c70:	98 f4       	brcc	.+38     	; 0x3c98 <_Z10processKeyc+0x436>
					{
						Fox_t holdFox = (Fox_t)value;
    3c72:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3c74:	ae 01       	movw	r20, r28
    3c76:	4f 5f       	subi	r20, 0xFF	; 255
    3c78:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7a:	60 e1       	ldi	r22, 0x10	; 16
    3c7c:	84 ea       	ldi	r24, 0xA4	; 164
    3c7e:	95 e0       	ldi	r25, 0x05	; 5
    3c80:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3c84:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    3c88:	99 81       	ldd	r25, Y+1	; 0x01
    3c8a:	98 17       	cp	r25, r24
    3c8c:	29 f0       	breq	.+10     	; 0x3c98 <_Z10processKeyc+0x436>
						{
							setupForFox(&holdFox, START_NOTHING);
    3c8e:	63 e0       	ldi	r22, 0x03	; 3
    3c90:	ce 01       	movw	r24, r28
    3c92:	01 96       	adiw	r24, 0x01	; 1
    3c94:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
					state = STATE_SHUTDOWN;
    3c98:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c9c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3ca0:	b4 c1       	rjmp	.+872    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3ca2:	80 ed       	ldi	r24, 0xD0	; 208
    3ca4:	82 0f       	add	r24, r18
    3ca6:	8a 30       	cpi	r24, 0x0A	; 10
    3ca8:	08 f0       	brcs	.+2      	; 0x3cac <_Z10processKeyc+0x44a>
    3caa:	af c1       	rjmp	.+862    	; 0x400a <_Z10processKeyc+0x7a8>
				{
					value *= 10;
					value += key - '0';
    3cac:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3cb0:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3cb4:	ac 01       	movw	r20, r24
    3cb6:	44 0f       	add	r20, r20
    3cb8:	55 1f       	adc	r21, r21
    3cba:	88 0f       	add	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	84 0f       	add	r24, r20
    3cc8:	95 1f       	adc	r25, r21
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	20 53       	subi	r18, 0x30	; 48
    3cce:	31 09       	sbc	r19, r1
    3cd0:	82 0f       	add	r24, r18
    3cd2:	93 1f       	adc	r25, r19
    3cd4:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3cd8:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10processKeycE5value>
    3cdc:	96 c1       	rjmp	.+812    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    3cde:	83 32       	cpi	r24, 0x23	; 35
    3ce0:	f9 f4       	brne	.+62     	; 0x3d20 <_Z10processKeyc+0x4be>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    3ce2:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_utc_offset>
    3ce6:	41 95       	neg	r20
    3ce8:	63 e9       	ldi	r22, 0x93	; 147
    3cea:	75 e0       	ldi	r23, 0x05	; 5
    3cec:	8d e6       	ldi	r24, 0x6D	; 109
    3cee:	94 e0       	ldi	r25, 0x04	; 4
    3cf0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_Z18validateTimeStringPcPma>
    3cf4:	6b 01       	movw	r12, r22
    3cf6:	7c 01       	movw	r14, r24

					if(t)
    3cf8:	61 15       	cp	r22, r1
    3cfa:	71 05       	cpc	r23, r1
    3cfc:	81 05       	cpc	r24, r1
    3cfe:	91 05       	cpc	r25, r1
    3d00:	51 f0       	breq	.+20     	; 0x3d16 <_Z10processKeyc+0x4b4>
					{
						rv3028_set_epoch(t);
    3d02:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3d06:	c0 92 93 05 	sts	0x0593, r12	; 0x800593 <g_current_epoch>
    3d0a:	d0 92 94 05 	sts	0x0594, r13	; 0x800594 <g_current_epoch+0x1>
    3d0e:	e0 92 95 05 	sts	0x0595, r14	; 0x800595 <g_current_epoch+0x2>
    3d12:	f0 92 96 05 	sts	0x0596, r15	; 0x800596 <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    3d16:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3d1a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3d1e:	75 c1       	rjmp	.+746    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3d20:	80 ed       	ldi	r24, 0xD0	; 208
    3d22:	82 0f       	add	r24, r18
    3d24:	8a 30       	cpi	r24, 0x0A	; 10
    3d26:	08 f0       	brcs	.+2      	; 0x3d2a <_Z10processKeyc+0x4c8>
    3d28:	70 c1       	rjmp	.+736    	; 0x400a <_Z10processKeyc+0x7a8>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3d2a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE12stringLength>
    3d2e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3d32:	88 32       	cpi	r24, 0x28	; 40
    3d34:	91 05       	cpc	r25, r1
    3d36:	0c f0       	brlt	.+2      	; 0x3d3a <_Z10processKeyc+0x4d8>
    3d38:	68 c1       	rjmp	.+720    	; 0x400a <_Z10processKeyc+0x7a8>
					{
						receivedString[stringLength] = key;
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	e3 59       	subi	r30, 0x93	; 147
    3d3e:	fb 4f       	sbci	r31, 0xFB	; 251
    3d40:	20 83       	st	Z, r18
						stringLength++;
    3d42:	01 96       	adiw	r24, 0x01	; 1
    3d44:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3d48:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	e3 59       	subi	r30, 0x93	; 147
    3d50:	fb 4f       	sbci	r31, 0xFB	; 251
    3d52:	10 82       	st	Z, r1
    3d54:	5a c1       	rjmp	.+692    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    3d56:	83 32       	cpi	r24, 0x23	; 35
    3d58:	39 f5       	brne	.+78     	; 0x3da8 <_Z10processKeyc+0x546>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3d5a:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_utc_offset>
    3d5e:	41 95       	neg	r20
    3d60:	6f e8       	ldi	r22, 0x8F	; 143
    3d62:	75 e0       	ldi	r23, 0x05	; 5
    3d64:	8d e6       	ldi	r24, 0x6D	; 109
    3d66:	94 e0       	ldi	r25, 0x04	; 4
    3d68:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_Z18validateTimeStringPcPma>

					if(s)
    3d6c:	61 15       	cp	r22, r1
    3d6e:	71 05       	cpc	r23, r1
    3d70:	81 05       	cpc	r24, r1
    3d72:	91 05       	cpc	r25, r1
    3d74:	a1 f0       	breq	.+40     	; 0x3d9e <_Z10processKeyc+0x53c>
					{
						g_event_start_epoch = s;
    3d76:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <g_event_start_epoch>
    3d7a:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <g_event_start_epoch+0x1>
    3d7e:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_event_start_epoch+0x2>
    3d82:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3d86:	4f e8       	ldi	r20, 0x8F	; 143
    3d88:	55 e0       	ldi	r21, 0x05	; 5
    3d8a:	64 e1       	ldi	r22, 0x14	; 20
    3d8c:	84 ea       	ldi	r24, 0xA4	; 164
    3d8e:	95 e0       	ldi	r25, 0x05	; 5
    3d90:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3d94:	62 e0       	ldi	r22, 0x02	; 2
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    3d9e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3da2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3da6:	31 c1       	rjmp	.+610    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3da8:	80 ed       	ldi	r24, 0xD0	; 208
    3daa:	82 0f       	add	r24, r18
    3dac:	8a 30       	cpi	r24, 0x0A	; 10
    3dae:	08 f0       	brcs	.+2      	; 0x3db2 <_Z10processKeyc+0x550>
    3db0:	2c c1       	rjmp	.+600    	; 0x400a <_Z10processKeyc+0x7a8>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3db2:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE12stringLength>
    3db6:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3dba:	88 32       	cpi	r24, 0x28	; 40
    3dbc:	91 05       	cpc	r25, r1
    3dbe:	0c f0       	brlt	.+2      	; 0x3dc2 <_Z10processKeyc+0x560>
    3dc0:	24 c1       	rjmp	.+584    	; 0x400a <_Z10processKeyc+0x7a8>
					{
						receivedString[stringLength] = key;
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	e3 59       	subi	r30, 0x93	; 147
    3dc6:	fb 4f       	sbci	r31, 0xFB	; 251
    3dc8:	20 83       	st	Z, r18
						stringLength++;
    3dca:	01 96       	adiw	r24, 0x01	; 1
    3dcc:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3dd0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3dd4:	fc 01       	movw	r30, r24
    3dd6:	e3 59       	subi	r30, 0x93	; 147
    3dd8:	fb 4f       	sbci	r31, 0xFB	; 251
    3dda:	10 82       	st	Z, r1
    3ddc:	16 c1       	rjmp	.+556    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    3dde:	83 32       	cpi	r24, 0x23	; 35
    3de0:	39 f5       	brne	.+78     	; 0x3e30 <_Z10processKeyc+0x5ce>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3de2:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <g_utc_offset>
    3de6:	41 95       	neg	r20
    3de8:	6b e8       	ldi	r22, 0x8B	; 139
    3dea:	75 e0       	ldi	r23, 0x05	; 5
    3dec:	8d e6       	ldi	r24, 0x6D	; 109
    3dee:	94 e0       	ldi	r25, 0x04	; 4
    3df0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_Z18validateTimeStringPcPma>

					if(f)
    3df4:	61 15       	cp	r22, r1
    3df6:	71 05       	cpc	r23, r1
    3df8:	81 05       	cpc	r24, r1
    3dfa:	91 05       	cpc	r25, r1
    3dfc:	a1 f0       	breq	.+40     	; 0x3e26 <_Z10processKeyc+0x5c4>
					{
						g_event_finish_epoch = f;
    3dfe:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_event_finish_epoch>
    3e02:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_event_finish_epoch+0x1>
    3e06:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_event_finish_epoch+0x2>
    3e0a:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3e0e:	4b e8       	ldi	r20, 0x8B	; 139
    3e10:	55 e0       	ldi	r21, 0x05	; 5
    3e12:	65 e1       	ldi	r22, 0x15	; 21
    3e14:	84 ea       	ldi	r24, 0xA4	; 164
    3e16:	95 e0       	ldi	r25, 0x05	; 5
    3e18:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3e1c:	62 e0       	ldi	r22, 0x02	; 2
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    3e26:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3e2a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3e2e:	ed c0       	rjmp	.+474    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3e30:	80 ed       	ldi	r24, 0xD0	; 208
    3e32:	82 0f       	add	r24, r18
    3e34:	8a 30       	cpi	r24, 0x0A	; 10
    3e36:	08 f0       	brcs	.+2      	; 0x3e3a <_Z10processKeyc+0x5d8>
    3e38:	e8 c0       	rjmp	.+464    	; 0x400a <_Z10processKeyc+0x7a8>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3e3a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE12stringLength>
    3e3e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3e42:	88 32       	cpi	r24, 0x28	; 40
    3e44:	91 05       	cpc	r25, r1
    3e46:	0c f0       	brlt	.+2      	; 0x3e4a <_Z10processKeyc+0x5e8>
    3e48:	e0 c0       	rjmp	.+448    	; 0x400a <_Z10processKeyc+0x7a8>
					{
						receivedString[stringLength] = key;
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	e3 59       	subi	r30, 0x93	; 147
    3e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    3e50:	20 83       	st	Z, r18
						stringLength++;
    3e52:	01 96       	adiw	r24, 0x01	; 1
    3e54:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE12stringLength+0x1>
    3e58:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	e3 59       	subi	r30, 0x93	; 147
    3e60:	fb 4f       	sbci	r31, 0xFB	; 251
    3e62:	10 82       	st	Z, r1
    3e64:	d2 c0       	rjmp	.+420    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    3e66:	83 32       	cpi	r24, 0x23	; 35
    3e68:	e9 f4       	brne	.+58     	; 0x3ea4 <_Z10processKeyc+0x642>
				{
					if((value >= 0) && (value < 24))
    3e6a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3e6e:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3e72:	88 31       	cpi	r24, 0x18	; 24
    3e74:	91 05       	cpc	r25, r1
    3e76:	88 f4       	brcc	.+34     	; 0x3e9a <_Z10processKeyc+0x638>
					{
						int8_t hold = value * digits;
    3e78:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <_ZZ10processKeycE6digits>
    3e7c:	98 9f       	mul	r25, r24
    3e7e:	80 2d       	mov	r24, r0
    3e80:	11 24       	eor	r1, r1
    3e82:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    3e84:	ae 01       	movw	r20, r28
    3e86:	4f 5f       	subi	r20, 0xFF	; 255
    3e88:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8a:	66 e1       	ldi	r22, 0x16	; 22
    3e8c:	84 ea       	ldi	r24, 0xA4	; 164
    3e8e:	95 e0       	ldi	r25, 0x05	; 5
    3e90:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    3e9a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3e9e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3ea2:	b3 c0       	rjmp	.+358    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3ea4:	80 ed       	ldi	r24, 0xD0	; 208
    3ea6:	82 0f       	add	r24, r18
    3ea8:	8a 30       	cpi	r24, 0x0A	; 10
    3eaa:	c8 f4       	brcc	.+50     	; 0x3ede <_Z10processKeyc+0x67c>
				{
					value *= 10;
					value += key - '0';
    3eac:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3eb0:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3eb4:	ac 01       	movw	r20, r24
    3eb6:	44 0f       	add	r20, r20
    3eb8:	55 1f       	adc	r21, r21
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	88 0f       	add	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	84 0f       	add	r24, r20
    3ec8:	95 1f       	adc	r25, r21
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	20 53       	subi	r18, 0x30	; 48
    3ece:	31 09       	sbc	r19, r1
    3ed0:	82 0f       	add	r24, r18
    3ed2:	93 1f       	adc	r25, r19
    3ed4:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3ed8:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10processKeycE5value>
    3edc:	96 c0       	rjmp	.+300    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if(key == 'B')
    3ede:	22 34       	cpi	r18, 0x42	; 66
    3ee0:	09 f0       	breq	.+2      	; 0x3ee4 <_Z10processKeyc+0x682>
    3ee2:	93 c0       	rjmp	.+294    	; 0x400a <_Z10processKeyc+0x7a8>
				{
					digits = -1;
    3ee4:	8f ef       	ldi	r24, 0xFF	; 255
    3ee6:	9f ef       	ldi	r25, 0xFF	; 255
    3ee8:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3eec:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10processKeycE6digits>
    3ef0:	8c c0       	rjmp	.+280    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    3ef2:	83 32       	cpi	r24, 0x23	; 35
    3ef4:	a1 f4       	brne	.+40     	; 0x3f1e <_Z10processKeyc+0x6bc>
				{
					g_AM_audio_frequency = value;
    3ef6:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3efa:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    3efe:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_AM_audio_frequency>
    3f02:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3f06:	48 e8       	ldi	r20, 0x88	; 136
    3f08:	55 e0       	ldi	r21, 0x05	; 5
    3f0a:	61 e1       	ldi	r22, 0x11	; 17
    3f0c:	84 ea       	ldi	r24, 0xA4	; 164
    3f0e:	95 e0       	ldi	r25, 0x05	; 5
    3f10:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    3f14:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f18:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3f1c:	76 c0       	rjmp	.+236    	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    3f1e:	87 30       	cpi	r24, 0x07	; 7
    3f20:	08 f0       	brcs	.+2      	; 0x3f24 <_Z10processKeyc+0x6c2>
    3f22:	73 c0       	rjmp	.+230    	; 0x400a <_Z10processKeyc+0x7a8>
				{
					value = key - '0';
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	20 53       	subi	r18, 0x30	; 48
    3f2a:	31 09       	sbc	r19, r1
    3f2c:	30 93 86 04 	sts	0x0486, r19	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3f30:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <_ZZ10processKeycE5value>
    3f34:	6a c0       	rjmp	.+212    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    3f36:	20 91 83 04 	lds	r18, 0x0483	; 0x800483 <_ZZ10processKeycE6digits>
    3f3a:	30 91 84 04 	lds	r19, 0x0484	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3f3e:	a9 01       	movw	r20, r18
    3f40:	4f 5f       	subi	r20, 0xFF	; 255
    3f42:	5f 4f       	sbci	r21, 0xFF	; 255
    3f44:	50 93 84 04 	sts	0x0484, r21	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3f48:	40 93 83 04 	sts	0x0483, r20	; 0x800483 <_ZZ10processKeycE6digits>
    3f4c:	f9 01       	movw	r30, r18
    3f4e:	e5 5b       	subi	r30, 0xB5	; 181
    3f50:	fa 4f       	sbci	r31, 0xFA	; 250
    3f52:	90 81       	ld	r25, Z
    3f54:	89 13       	cpse	r24, r25
    3f56:	12 c0       	rjmp	.+36     	; 0x3f7c <_Z10processKeyc+0x71a>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    3f58:	eb e4       	ldi	r30, 0x4B	; 75
    3f5a:	f5 e0       	ldi	r31, 0x05	; 5
    3f5c:	01 90       	ld	r0, Z+
    3f5e:	00 20       	and	r0, r0
    3f60:	e9 f7       	brne	.-6      	; 0x3f5c <_Z10processKeyc+0x6fa>
    3f62:	31 97       	sbiw	r30, 0x01	; 1
    3f64:	eb 54       	subi	r30, 0x4B	; 75
    3f66:	f5 40       	sbci	r31, 0x05	; 5
    3f68:	e4 17       	cp	r30, r20
    3f6a:	f5 07       	cpc	r31, r21
    3f6c:	09 f0       	breq	.+2      	; 0x3f70 <_Z10processKeyc+0x70e>
    3f6e:	4d c0       	rjmp	.+154    	; 0x400a <_Z10processKeyc+0x7a8>
					{
						g_DTMF_unlocked = TRUE;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    3f76:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ10processKeycE18setPasswordEnabled>
    3f7a:	47 c0       	rjmp	.+142    	; 0x400a <_Z10processKeyc+0x7a8>
					}
				}
				else
				{
					digits = 0;
    3f7c:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10processKeycE6digits+0x1>
    3f80:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    3f84:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f88:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3f8c:	3e c0       	rjmp	.+124    	; 0x400a <_Z10processKeyc+0x7a8>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    3f8e:	83 32       	cpi	r24, 0x23	; 35
    3f90:	01 f5       	brne	.+64     	; 0x3fd2 <_Z10processKeyc+0x770>
				{
					if(value == 0)
    3f92:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3f96:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	41 f4       	brne	.+16     	; 0x3fae <_Z10processKeyc+0x74c>
					{
						setAtten(0);
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <g_sendAMmodulationConstantly>
    3fac:	0d c0       	rjmp	.+26     	; 0x3fc8 <_Z10processKeyc+0x766>
					}
					else if(value > 315)
    3fae:	8c 33       	cpi	r24, 0x3C	; 60
    3fb0:	21 e0       	ldi	r18, 0x01	; 1
    3fb2:	92 07       	cpc	r25, r18
    3fb4:	3c f0       	brlt	.+14     	; 0x3fc4 <_Z10processKeyc+0x762>
					{
						g_sendAMmodulationConstantly = FALSE;
    3fb6:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    3fba:	8b e3       	ldi	r24, 0x3B	; 59
    3fbc:	91 e0       	ldi	r25, 0x01	; 1
    3fbe:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z8setAttenj>
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <_Z10processKeyc+0x766>
					}
					else
					{
						setAtten(value);
    3fc4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    3fc8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3fcc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3fd0:	1c c0       	rjmp	.+56     	; 0x400a <_Z10processKeyc+0x7a8>
				}
				else if((key >= '0') && (key <= '9'))
    3fd2:	80 ed       	ldi	r24, 0xD0	; 208
    3fd4:	82 0f       	add	r24, r18
    3fd6:	8a 30       	cpi	r24, 0x0A	; 10
    3fd8:	c0 f4       	brcc	.+48     	; 0x400a <_Z10processKeyc+0x7a8>
				{
					value *= 10;
					value += key - '0';
    3fda:	40 91 85 04 	lds	r20, 0x0485	; 0x800485 <_ZZ10processKeycE5value>
    3fde:	50 91 86 04 	lds	r21, 0x0486	; 0x800486 <_ZZ10processKeycE5value+0x1>
    3fe2:	ca 01       	movw	r24, r20
    3fe4:	88 0f       	add	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	44 0f       	add	r20, r20
    3fea:	55 1f       	adc	r21, r21
    3fec:	44 0f       	add	r20, r20
    3fee:	55 1f       	adc	r21, r21
    3ff0:	44 0f       	add	r20, r20
    3ff2:	55 1f       	adc	r21, r21
    3ff4:	84 0f       	add	r24, r20
    3ff6:	95 1f       	adc	r25, r21
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	20 53       	subi	r18, 0x30	; 48
    3ffc:	31 09       	sbc	r19, r1
    3ffe:	82 0f       	add	r24, r18
    4000:	93 1f       	adc	r25, r19
    4002:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10processKeycE5value+0x1>
    4006:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    400a:	0f 90       	pop	r0
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	df 90       	pop	r13
    4016:	cf 90       	pop	r12
    4018:	08 95       	ret

0000401a <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    401a:	2f 92       	push	r2
    401c:	3f 92       	push	r3
    401e:	4f 92       	push	r4
    4020:	5f 92       	push	r5
    4022:	6f 92       	push	r6
    4024:	7f 92       	push	r7
    4026:	8f 92       	push	r8
    4028:	9f 92       	push	r9
    402a:	af 92       	push	r10
    402c:	bf 92       	push	r11
    402e:	cf 92       	push	r12
    4030:	df 92       	push	r13
    4032:	ef 92       	push	r14
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	1f 92       	push	r1
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
#if !INIT_EEPROM_ONLY
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;

		if(g_perform_EEPROM_reset)
    4044:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_perform_EEPROM_reset>
    4048:	88 23       	and	r24, r24
    404a:	61 f0       	breq	.+24     	; 0x4064 <_Z4loopv+0x4a>
		{
			g_perform_EEPROM_reset = FALSE;
    404c:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_perform_EEPROM_reset>
			ee_mgr.resetEEPROMValues();
    4050:	84 ea       	ldi	r24, 0xA4	; 164
    4052:	95 e0       	ldi	r25, 0x05	; 5
    4054:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	71 ee       	ldi	r23, 0xE1	; 225
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12linkbus_initm>
		}
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    4064:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    4068:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_on_the_air>
    406c:	88 23       	and	r24, r24
    406e:	29 f0       	breq	.+10     	; 0x407a <_Z4loopv+0x60>
    4070:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ4loopvE7proceed>
    4074:	88 23       	and	r24, r24
    4076:	09 f4       	brne	.+2      	; 0x407a <_Z4loopv+0x60>
    4078:	a2 c0       	rjmp	.+324    	; 0x41be <_Z4loopv+0x1a4>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    407a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    407e:	81 11       	cpse	r24, r1
    4080:	e1 c0       	rjmp	.+450    	; 0x4244 <_Z4loopv+0x22a>
			{
				proceed = FALSE;
    4082:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ4loopvE7proceed>

				if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    4086:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    408a:	88 23       	and	r24, r24
    408c:	c9 f0       	breq	.+50     	; 0x40c0 <_Z4loopv+0xa6>
    408e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    4092:	86 30       	cpi	r24, 0x06	; 6
    4094:	a9 f0       	breq	.+42     	; 0x40c0 <_Z4loopv+0xa6>
    4096:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    409a:	87 30       	cpi	r24, 0x07	; 7
    409c:	89 f0       	breq	.+34     	; 0x40c0 <_Z4loopv+0xa6>
    409e:	20 91 9b 05 	lds	r18, 0x059B	; 0x80059b <g_fox>
    40a2:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <g_fox_counter>
    40a6:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <g_fox_counter+0x1>
    40aa:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox_id_offset>
    40ae:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_fox_id_offset+0x1>
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	84 0f       	add	r24, r20
    40b6:	95 1f       	adc	r25, r21
    40b8:	28 17       	cp	r18, r24
    40ba:	39 07       	cpc	r19, r25
    40bc:	09 f0       	breq	.+2      	; 0x40c0 <_Z4loopv+0xa6>
    40be:	c2 c0       	rjmp	.+388    	; 0x4244 <_Z4loopv+0x22a>
				{
					BOOL repeat = TRUE;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	89 83       	std	Y+1, r24	; 0x01
					/* Choose the appropriate Morse pattern to be sent */
					strcpy((char*)g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox]);
    40c4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	bc 01       	movw	r22, r24
    40cc:	66 0f       	add	r22, r22
    40ce:	77 1f       	adc	r23, r23
    40d0:	66 0f       	add	r22, r22
    40d2:	77 1f       	adc	r23, r23
    40d4:	68 0f       	add	r22, r24
    40d6:	79 1f       	adc	r23, r25
    40d8:	68 56       	subi	r22, 0x68	; 104
    40da:	7d 4f       	sbci	r23, 0xFD	; 253
    40dc:	8c e1       	ldi	r24, 0x1C	; 28
    40de:	95 e0       	ldi	r25, 0x05	; 5
    40e0:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <strcpy>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    40e4:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_pattern_codespeed>
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	82 e8       	ldi	r24, 0x82	; 130
    40ec:	9b e1       	ldi	r25, 0x1B	; 27
    40ee:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    40f2:	cb 01       	movw	r24, r22
    40f4:	6a e0       	ldi	r22, 0x0A	; 10
    40f6:	70 e0       	ldi	r23, 0x00	; 0
    40f8:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    40fc:	66 0f       	add	r22, r22
    40fe:	77 1f       	adc	r23, r23
    4100:	70 93 99 05 	sts	0x0599, r23	; 0x800599 <g_code_throttle+0x1>
    4104:	60 93 98 05 	sts	0x0598, r22	; 0x800598 <g_code_throttle>
					makeMorse((char*)g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	50 e0       	ldi	r21, 0x00	; 0
    410c:	be 01       	movw	r22, r28
    410e:	6f 5f       	subi	r22, 0xFF	; 255
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	8c e1       	ldi	r24, 0x1C	; 28
    4114:	95 e0       	ldi	r25, 0x05	; 5
    4116:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    411a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_time_to_ID>
    411e:	81 11       	cpse	r24, r1
    4120:	0b c0       	rjmp	.+22     	; 0x4138 <_Z4loopv+0x11e>
    4122:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_id_interval>
    4126:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <g_id_interval+0x1>
    412a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_on_air_interval>
    412e:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <g_on_air_interval+0x1>
    4132:	82 17       	cp	r24, r18
    4134:	93 07       	cpc	r25, r19
    4136:	3c f1       	brlt	.+78     	; 0x4186 <_Z4loopv+0x16c>
					{
						time_for_id = g_on_air_interval - (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    4138:	00 91 65 05 	lds	r16, 0x0565	; 0x800565 <g_on_air_interval>
    413c:	10 91 66 05 	lds	r17, 0x0566	; 0x800566 <g_on_air_interval+0x1>
    4140:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	81 e3       	ldi	r24, 0x31	; 49
    4148:	95 e0       	ldi	r25, 0x05	; 5
    414a:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <_Z26timeRequiredToSendStrAtWPMPcj>
    414e:	88 5a       	subi	r24, 0xA8	; 168
    4150:	9d 4f       	sbci	r25, 0xFD	; 253
    4152:	9c 01       	movw	r18, r24
    4154:	36 95       	lsr	r19
    4156:	27 95       	ror	r18
    4158:	36 95       	lsr	r19
    415a:	27 95       	ror	r18
    415c:	36 95       	lsr	r19
    415e:	27 95       	ror	r18
    4160:	a5 ec       	ldi	r26, 0xC5	; 197
    4162:	b0 e2       	ldi	r27, 0x20	; 32
    4164:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>
    4168:	92 95       	swap	r25
    416a:	82 95       	swap	r24
    416c:	8f 70       	andi	r24, 0x0F	; 15
    416e:	89 27       	eor	r24, r25
    4170:	9f 70       	andi	r25, 0x0F	; 15
    4172:	89 27       	eor	r24, r25
    4174:	08 1b       	sub	r16, r24
    4176:	19 0b       	sbc	r17, r25
    4178:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    417c:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    4180:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_time_to_ID>
    4184:	0a c0       	rjmp	.+20     	; 0x419a <_Z4loopv+0x180>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    4186:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_on_air_interval>
    418a:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <g_on_air_interval+0x1>
    418e:	8d 59       	subi	r24, 0x9D	; 157
    4190:	9f 4f       	sbci	r25, 0xFF	; 255
    4192:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    4196:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    419a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <g_on_the_air>
					g_callsign_sent = FALSE;
    41a4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <g_callsign_sent>
					g_fox_transition = FALSE;
    41a8:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    41ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_fox_counter>
    41b0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <g_fox_counter+0x1>
    41b4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_fox_tone_offset+0x1>
    41b8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_fox_tone_offset>
    41bc:	43 c0       	rjmp	.+134    	; 0x4244 <_Z4loopv+0x22a>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    41be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    41c2:	81 11       	cpse	r24, r1
    41c4:	02 c2       	rjmp	.+1028   	; 0x45ca <_Z4loopv+0x5b0>
    41c6:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <g_fox_seconds_into_interval>
    41ca:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <g_fox_seconds_into_interval+0x1>
    41ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    41d2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    41d6:	28 17       	cp	r18, r24
    41d8:	39 07       	cpc	r19, r25
    41da:	09 f0       	breq	.+2      	; 0x41de <_Z4loopv+0x1c4>
    41dc:	f6 c1       	rjmp	.+1004   	; 0x45ca <_Z4loopv+0x5b0>
    41de:	d3 c1       	rjmp	.+934    	; 0x4586 <_Z4loopv+0x56c>
				BOOL repeat = FALSE;
				makeMorse((char*)g_messages_text[STATION_ID], &repeat, NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5))
    41e0:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    41e4:	82 31       	cpi	r24, 0x12	; 18
    41e6:	08 f4       	brcc	.+2      	; 0x41ea <_Z4loopv+0x1d0>
    41e8:	f6 c1       	rjmp	.+1004   	; 0x45d6 <_Z4loopv+0x5bc>
    41ea:	07 c0       	rjmp	.+14     	; 0x41fa <_Z4loopv+0x1e0>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    41ec:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
					g_on_the_air = FALSE;
    41f0:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_on_the_air>
					proceed = TRUE;
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))    /* Proceed as soon as the callsign has been sent */
    41fa:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    41fe:	88 23       	and	r24, r24
    4200:	41 f0       	breq	.+16     	; 0x4212 <_Z4loopv+0x1f8>
    4202:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    4206:	86 30       	cpi	r24, 0x06	; 6
    4208:	21 f0       	breq	.+8      	; 0x4212 <_Z4loopv+0x1f8>
    420a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    420e:	87 30       	cpi	r24, 0x07	; 7
    4210:	41 f4       	brne	.+16     	; 0x4222 <_Z4loopv+0x208>
			{
				if(g_callsign_sent)
    4212:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_callsign_sent>
    4216:	88 23       	and	r24, r24
    4218:	a9 f0       	breq	.+42     	; 0x4244 <_Z4loopv+0x22a>
				{
					proceed = TRUE;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ4loopvE7proceed>
    4220:	11 c0       	rjmp	.+34     	; 0x4244 <_Z4loopv+0x22a>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    4222:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    4226:	88 30       	cpi	r24, 0x08	; 8
    4228:	08 f4       	brcc	.+2      	; 0x422c <_Z4loopv+0x212>
    422a:	da c1       	rjmp	.+948    	; 0x45e0 <_Z4loopv+0x5c6>
    422c:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    4230:	82 31       	cpi	r24, 0x12	; 18
    4232:	08 f0       	brcs	.+2      	; 0x4236 <_Z4loopv+0x21c>
    4234:	d5 c1       	rjmp	.+938    	; 0x45e0 <_Z4loopv+0x5c6>
    4236:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_callsign_sent>
    423a:	81 11       	cpse	r24, r1
    423c:	dd c1       	rjmp	.+954    	; 0x45f8 <_Z4loopv+0x5de>
    423e:	d0 c1       	rjmp	.+928    	; 0x45e0 <_Z4loopv+0x5c6>
			{
				g_on_the_air = FALSE;
			}
			else if(g_fox != g_fox_counter) /* Turn off transmissions during minutes when this fox should be silent */
			{
				g_on_the_air = FALSE;
    4240:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_on_the_air>
			}
		}


		if(g_goertzel.SamplesReady())
    4244:	8e e0       	ldi	r24, 0x0E	; 14
    4246:	95 e0       	ldi	r25, 0x05	; 5
    4248:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN8Goertzel12SamplesReadyEv>
    424c:	88 23       	and	r24, r24
    424e:	09 f4       	brne	.+2      	; 0x4252 <_Z4loopv+0x238>
    4250:	1d c1       	rjmp	.+570    	; 0x448c <_Z4loopv+0x472>
			static char lastKey = '\0';
			static int checkCount = 10;                 /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    4256:	81 11       	cpse	r24, r1
    4258:	d2 c1       	rjmp	.+932    	; 0x45fe <_Z4loopv+0x5e4>
			{

				setUpTemp();
    425a:	0e 94 33 12 	call	0x2466	; 0x2466 <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    425e:	0e 94 43 12 	call	0x2486	; 0x2486 <_Z7getTempv>
    4262:	0e 94 82 29 	call	0x5304	; 0x5304 <__fixsfsi>
				if(temp != g_temperature)
    4266:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_temperature>
    426a:	68 17       	cp	r22, r24
    426c:	e1 f0       	breq	.+56     	; 0x42a6 <_Z4loopv+0x28c>
				{
					g_temperature = temp;
    426e:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    4272:	6a 31       	cpi	r22, 0x1A	; 26
    4274:	14 f0       	brlt	.+4      	; 0x427a <_Z4loopv+0x260>
    4276:	69 51       	subi	r22, 0x19	; 25
    4278:	03 c0       	rjmp	.+6      	; 0x4280 <_Z4loopv+0x266>
    427a:	89 e1       	ldi	r24, 0x19	; 25
    427c:	86 1b       	sub	r24, r22
    427e:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    4280:	06 2e       	mov	r0, r22
    4282:	00 0c       	add	r0, r0
    4284:	77 0b       	sbc	r23, r23
    4286:	84 ea       	ldi	r24, 0xA4	; 164
    4288:	95 e0       	ldi	r25, 0x05	; 5
    428a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    428e:	20 91 18 05 	lds	r18, 0x0518	; 0x800518 <g_rv3028_offset>
    4292:	30 91 19 05 	lds	r19, 0x0519	; 0x800519 <g_rv3028_offset+0x1>
    4296:	a9 01       	movw	r20, r18
    4298:	48 0f       	add	r20, r24
    429a:	51 1d       	adc	r21, r1
    429c:	87 fd       	sbrc	r24, 7
    429e:	5a 95       	dec	r21
    42a0:	ca 01       	movw	r24, r20
    42a2:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    42ac:	8c e3       	ldi	r24, 0x3C	; 60
    42ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_temperature_check_countdown>
    42b2:	a5 c1       	rjmp	.+842    	; 0x45fe <_Z4loopv+0x5e4>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    42b4:	f5 01       	movw	r30, r10
    42b6:	41 91       	ld	r20, Z+
    42b8:	51 91       	ld	r21, Z+
    42ba:	61 91       	ld	r22, Z+
    42bc:	71 91       	ld	r23, Z+
    42be:	5f 01       	movw	r10, r30
    42c0:	8e e0       	ldi	r24, 0x0E	; 14
    42c2:	95 e0       	ldi	r25, 0x05	; 5
    42c4:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    42c8:	8e e0       	ldi	r24, 0x0E	; 14
    42ca:	95 e0       	ldi	r25, 0x05	; 5
    42cc:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN8Goertzel10Magnitude2Ev>
    42d0:	e6 2e       	mov	r14, r22
    42d2:	f7 2e       	mov	r15, r23
    42d4:	d8 2e       	mov	r13, r24
    42d6:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    42d8:	27 2d       	mov	r18, r7
    42da:	36 2d       	mov	r19, r6
    42dc:	45 2d       	mov	r20, r5
    42de:	54 2d       	mov	r21, r4
    42e0:	0e 94 a9 2a 	call	0x5552	; 0x5552 <__gesf2>
    42e4:	18 16       	cp	r1, r24
    42e6:	b4 f4       	brge	.+44     	; 0x4314 <_Z4loopv+0x2fa>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	34 e2       	ldi	r19, 0x24	; 36
    42ec:	44 e7       	ldi	r20, 0x74	; 116
    42ee:	59 e4       	ldi	r21, 0x49	; 73
    42f0:	6e 2d       	mov	r22, r14
    42f2:	7f 2d       	mov	r23, r15
    42f4:	8d 2d       	mov	r24, r13
    42f6:	9c 2d       	mov	r25, r12
    42f8:	0e 94 a9 2a 	call	0x5552	; 0x5552 <__gesf2>
    42fc:	18 16       	cp	r1, r24
    42fe:	34 f4       	brge	.+12     	; 0x430c <_Z4loopv+0x2f2>
    4300:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    4302:	7e 2c       	mov	r7, r14
    4304:	6f 2c       	mov	r6, r15
    4306:	5d 2c       	mov	r5, r13
    4308:	4c 2c       	mov	r4, r12
    430a:	04 c0       	rjmp	.+8      	; 0x4314 <_Z4loopv+0x2fa>
    430c:	7e 2c       	mov	r7, r14
    430e:	6f 2c       	mov	r6, r15
    4310:	5d 2c       	mov	r5, r13
    4312:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    4314:	0f 5f       	subi	r16, 0xFF	; 255
    4316:	1f 4f       	sbci	r17, 0xFF	; 255
    4318:	04 30       	cpi	r16, 0x04	; 4
    431a:	11 05       	cpc	r17, r1
    431c:	59 f6       	brne	.-106    	; 0x42b4 <_Z4loopv+0x29a>
    431e:	7f c1       	rjmp	.+766    	; 0x461e <_Z4loopv+0x604>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4320:	f5 01       	movw	r30, r10
    4322:	41 91       	ld	r20, Z+
    4324:	51 91       	ld	r21, Z+
    4326:	61 91       	ld	r22, Z+
    4328:	71 91       	ld	r23, Z+
    432a:	5f 01       	movw	r10, r30
    432c:	8e e0       	ldi	r24, 0x0E	; 14
    432e:	95 e0       	ldi	r25, 0x05	; 5
    4330:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    4334:	8e e0       	ldi	r24, 0x0E	; 14
    4336:	95 e0       	ldi	r25, 0x05	; 5
    4338:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN8Goertzel10Magnitude2Ev>
    433c:	e6 2e       	mov	r14, r22
    433e:	f7 2e       	mov	r15, r23
    4340:	d8 2e       	mov	r13, r24
    4342:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    4344:	25 2d       	mov	r18, r5
    4346:	34 2d       	mov	r19, r4
    4348:	43 2d       	mov	r20, r3
    434a:	52 2d       	mov	r21, r2
    434c:	0e 94 a9 2a 	call	0x5552	; 0x5552 <__gesf2>
    4350:	18 16       	cp	r1, r24
    4352:	b4 f4       	brge	.+44     	; 0x4380 <_Z4loopv+0x366>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	34 e2       	ldi	r19, 0x24	; 36
    4358:	44 e7       	ldi	r20, 0x74	; 116
    435a:	59 e4       	ldi	r21, 0x49	; 73
    435c:	6e 2d       	mov	r22, r14
    435e:	7f 2d       	mov	r23, r15
    4360:	8d 2d       	mov	r24, r13
    4362:	9c 2d       	mov	r25, r12
    4364:	0e 94 a9 2a 	call	0x5552	; 0x5552 <__gesf2>
    4368:	18 16       	cp	r1, r24
    436a:	34 f4       	brge	.+12     	; 0x4378 <_Z4loopv+0x35e>
    436c:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    436e:	5e 2c       	mov	r5, r14
    4370:	4f 2c       	mov	r4, r15
    4372:	3d 2c       	mov	r3, r13
    4374:	2c 2c       	mov	r2, r12
    4376:	04 c0       	rjmp	.+8      	; 0x4380 <_Z4loopv+0x366>
    4378:	5e 2c       	mov	r5, r14
    437a:	4f 2c       	mov	r4, r15
    437c:	3d 2c       	mov	r3, r13
    437e:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    4380:	0f 5f       	subi	r16, 0xFF	; 255
    4382:	1f 4f       	sbci	r17, 0xFF	; 255
    4384:	04 30       	cpi	r16, 0x04	; 4
    4386:	11 05       	cpc	r17, r1
    4388:	59 f6       	brne	.-106    	; 0x4320 <_Z4loopv+0x306>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    438a:	77 20       	and	r7, r7
    438c:	0c f4       	brge	.+2      	; 0x4390 <_Z4loopv+0x376>
    438e:	76 c0       	rjmp	.+236    	; 0x447c <_Z4loopv+0x462>
				{
					char newKey = key[4 * y + x];
    4390:	c4 01       	movw	r24, r8
    4392:	88 0f       	add	r24, r24
    4394:	99 1f       	adc	r25, r25
    4396:	88 0f       	add	r24, r24
    4398:	99 1f       	adc	r25, r25
    439a:	88 59       	subi	r24, 0x98	; 152
    439c:	9d 4f       	sbci	r25, 0xFD	; 253
    439e:	fc 01       	movw	r30, r24
    43a0:	e6 0d       	add	r30, r6
    43a2:	f7 1d       	adc	r31, r7
    43a4:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    43a6:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ4loopvE7lastKey>
    43aa:	18 13       	cpse	r17, r24
    43ac:	17 c0       	rjmp	.+46     	; 0x43dc <_Z4loopv+0x3c2>
					{
						checkCount++;
    43ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    43b2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    43b6:	01 96       	adiw	r24, 0x01	; 1
    43b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    43bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    43c0:	03 97       	sbiw	r24, 0x03	; 3
    43c2:	61 f4       	brne	.+24     	; 0x43dc <_Z4loopv+0x3c2>
						{
							g_dtmf_detected = TRUE;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_dtmf_detected>
							quietCount = 0;
    43ca:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ4loopvE10quietCount+0x1>
    43ce:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    43d2:	10 93 17 05 	sts	0x0517, r17	; 0x800517 <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    43d6:	81 2f       	mov	r24, r17
    43d8:	0e 94 31 1c 	call	0x3862	; 0x3862 <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    43dc:	10 93 8b 04 	sts	0x048B, r17	; 0x80048b <_ZZ4loopvE7lastKey>
    43e0:	4d c0       	rjmp	.+154    	; 0x447c <_Z4loopv+0x462>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    43e2:	c0 90 0f 05 	lds	r12, 0x050F	; 0x80050f <g_tick_count>
    43e6:	d0 90 10 05 	lds	r13, 0x0510	; 0x800510 <g_tick_count+0x1>
    43ea:	e0 90 11 05 	lds	r14, 0x0511	; 0x800511 <g_tick_count+0x2>
    43ee:	f0 90 12 05 	lds	r15, 0x0512	; 0x800512 <g_tick_count+0x3>
    43f2:	80 90 13 05 	lds	r8, 0x0513	; 0x800513 <g_last>
    43f6:	90 90 14 05 	lds	r9, 0x0514	; 0x800514 <g_last+0x1>
    43fa:	a0 90 15 05 	lds	r10, 0x0515	; 0x800515 <g_last+0x2>
    43fe:	b0 90 16 05 	lds	r11, 0x0516	; 0x800516 <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    4402:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ4loopvE10quietCount>
    4406:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ4loopvE10quietCount+0x1>
    440a:	9c 01       	movw	r18, r24
    440c:	2f 5f       	subi	r18, 0xFF	; 255
    440e:	3f 4f       	sbci	r19, 0xFF	; 255
    4410:	30 93 8a 04 	sts	0x048A, r19	; 0x80048a <_ZZ4loopvE10quietCount+0x1>
    4414:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <_ZZ4loopvE10quietCount>
    4418:	03 97       	sbiw	r24, 0x03	; 3
    441a:	84 f1       	brlt	.+96     	; 0x447c <_Z4loopv+0x462>
				{
					g_dtmf_detected = FALSE;
    441c:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    4420:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    4424:	88 23       	and	r24, r24
    4426:	29 f0       	breq	.+10     	; 0x4432 <_Z4loopv+0x418>
    4428:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_LED_enunciating>
    442c:	88 23       	and	r24, r24
    442e:	09 f4       	brne	.+2      	; 0x4432 <_Z4loopv+0x418>
    4430:	09 c1       	rjmp	.+530    	; 0x4644 <_Z4loopv+0x62a>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    4432:	c8 18       	sub	r12, r8
    4434:	d9 08       	sbc	r13, r9
    4436:	ea 08       	sbc	r14, r10
    4438:	fb 08       	sbc	r15, r11
    443a:	fc ed       	ldi	r31, 0xDC	; 220
    443c:	cf 16       	cp	r12, r31
    443e:	f5 e0       	ldi	r31, 0x05	; 5
    4440:	df 06       	cpc	r13, r31
    4442:	e1 04       	cpc	r14, r1
    4444:	f1 04       	cpc	r15, r1
    4446:	20 f4       	brcc	.+8      	; 0x4450 <_Z4loopv+0x436>
					{
						checkCount = 0;
    4448:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    444c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    4450:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ4loopvE10quietCount+0x1>
    4454:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4458:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_tick_count>
    445c:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <g_tick_count+0x1>
    4460:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <g_tick_count+0x2>
    4464:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <g_tick_count+0x3>
    4468:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <g_last>
    446c:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <g_last+0x1>
    4470:	a0 93 15 05 	sts	0x0515, r26	; 0x800515 <g_last+0x2>
    4474:	b0 93 16 05 	sts	0x0516, r27	; 0x800516 <g_last+0x3>
					lastKey = '\0';
    4478:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    447c:	ea e7       	ldi	r30, 0x7A	; 122
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	80 81       	ld	r24, Z
    4482:	88 60       	ori	r24, 0x08	; 8
    4484:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    4486:	80 81       	ld	r24, Z
    4488:	80 64       	ori	r24, 0x40	; 64
    448a:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(g_transmissions_disabled)
    448c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_transmissions_disabled>
    4490:	88 23       	and	r24, r24
    4492:	09 f4       	brne	.+2      	; 0x4496 <_Z4loopv+0x47c>
    4494:	dc c0       	rjmp	.+440    	; 0x464e <_Z4loopv+0x634>
	{
		if(g_dtmf_detected)
    4496:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_dtmf_detected>
    449a:	88 23       	and	r24, r24
    449c:	b1 f0       	breq	.+44     	; 0x44ca <_Z4loopv+0x4b0>
		{
			BOOL repeat = FALSE;
    449e:	19 82       	std	Y+1, r1	; 0x01
			makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	be 01       	movw	r22, r28
    44a6:	6f 5f       	subi	r22, 0xFF	; 255
    44a8:	7f 4f       	sbci	r23, 0xFF	; 255
    44aa:	87 e0       	ldi	r24, 0x07	; 7
    44ac:	92 e0       	ldi	r25, 0x02	; 2
    44ae:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    44b2:	8c e8       	ldi	r24, 0x8C	; 140
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_code_throttle+0x1>
    44ba:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_code_throttle>
			g_LED_enunciating = TRUE;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_LED_enunciating>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    44c4:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <g_config_error>
    44c8:	c2 c0       	rjmp	.+388    	; 0x464e <_Z4loopv+0x634>
		}
		else
		{
			ConfigurationState_t hold_config_err = g_config_error;
    44ca:	10 91 49 05 	lds	r17, 0x0549	; 0x800549 <g_config_error>
			g_config_error = clockConfigurationCheck();
    44ce:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_Z23clockConfigurationCheckv>
    44d2:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <g_config_error>

			if(g_config_error != hold_config_err)
    44d6:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_config_error>
    44da:	18 17       	cp	r17, r24
    44dc:	09 f4       	brne	.+2      	; 0x44e0 <_Z4loopv+0x4c6>
    44de:	b7 c0       	rjmp	.+366    	; 0x464e <_Z4loopv+0x634>
			{
				if(g_config_error == CONFIGURATION_ERROR)
    44e0:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_config_error>
    44e4:	82 30       	cpi	r24, 0x02	; 2
    44e6:	a1 f4       	brne	.+40     	; 0x4510 <_Z4loopv+0x4f6>
				{
					BOOL repeat = TRUE;
    44e8:	11 e0       	ldi	r17, 0x01	; 1
    44ea:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    44ec:	40 e0       	ldi	r20, 0x00	; 0
    44ee:	50 e0       	ldi	r21, 0x00	; 0
    44f0:	be 01       	movw	r22, r28
    44f2:	6f 5f       	subi	r22, 0xFF	; 255
    44f4:	7f 4f       	sbci	r23, 0xFF	; 255
    44f6:	89 e0       	ldi	r24, 0x09	; 9
    44f8:	92 e0       	ldi	r25, 0x02	; 2
    44fa:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    44fe:	8c e8       	ldi	r24, 0x8C	; 140
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_code_throttle+0x1>
    4506:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_code_throttle>
					g_LED_enunciating = TRUE;
    450a:	10 93 97 05 	sts	0x0597, r17	; 0x800597 <g_LED_enunciating>
    450e:	9f c0       	rjmp	.+318    	; 0x464e <_Z4loopv+0x634>
				}
				else if(g_config_error == WAITING_FOR_START)
    4510:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_config_error>
    4514:	81 30       	cpi	r24, 0x01	; 1
    4516:	a1 f4       	brne	.+40     	; 0x4540 <_Z4loopv+0x526>
				{
					BOOL repeat = TRUE;
    4518:	11 e0       	ldi	r17, 0x01	; 1
    451a:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	be 01       	movw	r22, r28
    4522:	6f 5f       	subi	r22, 0xFF	; 255
    4524:	7f 4f       	sbci	r23, 0xFF	; 255
    4526:	8b e0       	ldi	r24, 0x0B	; 11
    4528:	92 e0       	ldi	r25, 0x02	; 2
    452a:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    452e:	86 e4       	ldi	r24, 0x46	; 70
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_code_throttle+0x1>
    4536:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_code_throttle>
					g_LED_enunciating = TRUE;
    453a:	10 93 97 05 	sts	0x0597, r17	; 0x800597 <g_LED_enunciating>
    453e:	87 c0       	rjmp	.+270    	; 0x464e <_Z4loopv+0x634>
				}
				else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    4540:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_config_error>
    4544:	84 30       	cpi	r24, 0x04	; 4
    4546:	21 f0       	breq	.+8      	; 0x4550 <_Z4loopv+0x536>
    4548:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_config_error>
    454c:	83 30       	cpi	r24, 0x03	; 3
    454e:	a1 f4       	brne	.+40     	; 0x4578 <_Z4loopv+0x55e>
				{
					BOOL repeat = TRUE;
    4550:	11 e0       	ldi	r17, 0x01	; 1
    4552:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4554:	40 e0       	ldi	r20, 0x00	; 0
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	be 01       	movw	r22, r28
    455a:	6f 5f       	subi	r22, 0xFF	; 255
    455c:	7f 4f       	sbci	r23, 0xFF	; 255
    455e:	89 e0       	ldi	r24, 0x09	; 9
    4560:	92 e0       	ldi	r25, 0x02	; 2
    4562:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4566:	8c e8       	ldi	r24, 0x8C	; 140
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_code_throttle+0x1>
    456e:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4572:	10 93 97 05 	sts	0x0597, r17	; 0x800597 <g_LED_enunciating>
    4576:	6b c0       	rjmp	.+214    	; 0x464e <_Z4loopv+0x634>
				}
				else
				{
					g_LED_enunciating = FALSE;
    4578:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_LED_enunciating>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	8d e0       	ldi	r24, 0x0D	; 13
    4580:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
				}
			}
		}
	}
}
    4584:	64 c0       	rjmp	.+200    	; 0x464e <_Z4loopv+0x634>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    4586:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	82 e8       	ldi	r24, 0x82	; 130
    458e:	9b e1       	ldi	r25, 0x1B	; 27
    4590:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    4594:	cb 01       	movw	r24, r22
    4596:	6a e0       	ldi	r22, 0x0A	; 10
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    459e:	66 0f       	add	r22, r22
    45a0:	77 1f       	adc	r23, r23
    45a2:	70 93 99 05 	sts	0x0599, r23	; 0x800599 <g_code_throttle+0x1>
    45a6:	60 93 98 05 	sts	0x0598, r22	; 0x800598 <g_code_throttle>
				BOOL repeat = FALSE;
    45aa:	19 82       	std	Y+1, r1	; 0x01
				makeMorse((char*)g_messages_text[STATION_ID], &repeat, NULL);
    45ac:	40 e0       	ldi	r20, 0x00	; 0
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	be 01       	movw	r22, r28
    45b2:	6f 5f       	subi	r22, 0xFF	; 255
    45b4:	7f 4f       	sbci	r23, 0xFF	; 255
    45b6:	81 e3       	ldi	r24, 0x31	; 49
    45b8:	95 e0       	ldi	r25, 0x05	; 5
    45ba:	0e 94 76 25 	call	0x4aec	; 0x4aec <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    45c4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <g_callsign_sent>
    45c8:	18 ce       	rjmp	.-976    	; 0x41fa <_Z4loopv+0x1e0>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5))
    45ca:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    45ce:	88 30       	cpi	r24, 0x08	; 8
    45d0:	08 f0       	brcs	.+2      	; 0x45d4 <_Z4loopv+0x5ba>
    45d2:	06 ce       	rjmp	.-1012   	; 0x41e0 <_Z4loopv+0x1c6>
    45d4:	12 ce       	rjmp	.-988    	; 0x41fa <_Z4loopv+0x1e0>
			{
				if(g_fox_transition)
    45d6:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_fox_transition>
    45da:	81 11       	cpse	r24, r1
    45dc:	07 ce       	rjmp	.-1010   	; 0x41ec <_Z4loopv+0x1d2>
    45de:	0d ce       	rjmp	.-998    	; 0x41fa <_Z4loopv+0x1e0>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
			}
			else if(g_fox != g_fox_counter) /* Turn off transmissions during minutes when this fox should be silent */
    45e0:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_fox>
    45e4:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <g_fox_counter>
    45e8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <g_fox_counter+0x1>
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	82 17       	cp	r24, r18
    45f0:	93 07       	cpc	r25, r19
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <_Z4loopv+0x5dc>
    45f4:	25 ce       	rjmp	.-950    	; 0x4240 <_Z4loopv+0x226>
    45f6:	26 ce       	rjmp	.-948    	; 0x4244 <_Z4loopv+0x22a>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    45f8:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_on_the_air>
    45fc:	23 ce       	rjmp	.-954    	; 0x4244 <_Z4loopv+0x22a>
    45fe:	0f 2e       	mov	r0, r31
    4600:	f8 e7       	ldi	r31, 0x78	; 120
    4602:	af 2e       	mov	r10, r31
    4604:	f2 e0       	ldi	r31, 0x02	; 2
    4606:	bf 2e       	mov	r11, r31
    4608:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    460a:	00 e0       	ldi	r16, 0x00	; 0
    460c:	10 e0       	ldi	r17, 0x00	; 0
    460e:	88 24       	eor	r8, r8
    4610:	8a 94       	dec	r8
    4612:	98 2c       	mov	r9, r8
    4614:	71 2c       	mov	r7, r1
    4616:	61 2c       	mov	r6, r1
    4618:	51 2c       	mov	r5, r1
    461a:	41 2c       	mov	r4, r1
    461c:	4b ce       	rjmp	.-874    	; 0x42b4 <_Z4loopv+0x29a>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    461e:	99 20       	and	r9, r9
    4620:	0c f4       	brge	.+2      	; 0x4624 <_Z4loopv+0x60a>
    4622:	df ce       	rjmp	.-578    	; 0x43e2 <_Z4loopv+0x3c8>
    4624:	0f 2e       	mov	r0, r31
    4626:	f8 e8       	ldi	r31, 0x88	; 136
    4628:	af 2e       	mov	r10, r31
    462a:	f2 e0       	ldi	r31, 0x02	; 2
    462c:	bf 2e       	mov	r11, r31
    462e:	f0 2d       	mov	r31, r0
    4630:	00 e0       	ldi	r16, 0x00	; 0
    4632:	10 e0       	ldi	r17, 0x00	; 0
    4634:	66 24       	eor	r6, r6
    4636:	6a 94       	dec	r6
    4638:	76 2c       	mov	r7, r6
    463a:	51 2c       	mov	r5, r1
    463c:	41 2c       	mov	r4, r1
    463e:	31 2c       	mov	r3, r1
    4640:	21 2c       	mov	r2, r1
    4642:	6e ce       	rjmp	.-804    	; 0x4320 <_Z4loopv+0x306>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    4644:	60 e0       	ldi	r22, 0x00	; 0
    4646:	8d e0       	ldi	r24, 0x0D	; 13
    4648:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>
    464c:	f2 ce       	rjmp	.-540    	; 0x4432 <_Z4loopv+0x418>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
				}
			}
		}
	}
}
    464e:	0f 90       	pop	r0
    4650:	df 91       	pop	r29
    4652:	cf 91       	pop	r28
    4654:	1f 91       	pop	r17
    4656:	0f 91       	pop	r16
    4658:	ff 90       	pop	r15
    465a:	ef 90       	pop	r14
    465c:	df 90       	pop	r13
    465e:	cf 90       	pop	r12
    4660:	bf 90       	pop	r11
    4662:	af 90       	pop	r10
    4664:	9f 90       	pop	r9
    4666:	8f 90       	pop	r8
    4668:	7f 90       	pop	r7
    466a:	6f 90       	pop	r6
    466c:	5f 90       	pop	r5
    466e:	4f 90       	pop	r4
    4670:	3f 90       	pop	r3
    4672:	2f 90       	pop	r2
    4674:	08 95       	ret

00004676 <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    4676:	63 e0       	ldi	r22, 0x03	; 3
    4678:	84 e0       	ldi	r24, 0x04	; 4
    467a:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>

	pinMode(PIN_LED1, OUTPUT);              /* This led blinks when off cycle and blinks with code when on cycle. */
    467e:	61 e0       	ldi	r22, 0x01	; 1
    4680:	8d e0       	ldi	r24, 0x0D	; 13
    4682:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    4686:	60 e0       	ldi	r22, 0x00	; 0
    4688:	8d e0       	ldi	r24, 0x0D	; 13
    468a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    468e:	61 e0       	ldi	r22, 0x01	; 1
    4690:	8d e0       	ldi	r24, 0x0D	; 13
    4692:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    4696:	60 e0       	ldi	r22, 0x00	; 0
    4698:	8d e0       	ldi	r24, 0x0D	; 13
    469a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    469e:	61 e0       	ldi	r22, 0x01	; 1
    46a0:	8a e0       	ldi	r24, 0x0A	; 10
    46a2:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	8a e0       	ldi	r24, 0x0A	; 10
    46aa:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    46ae:	61 e0       	ldi	r22, 0x01	; 1
    46b0:	89 e0       	ldi	r24, 0x09	; 9
    46b2:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    46b6:	60 e0       	ldi	r22, 0x00	; 0
    46b8:	89 e0       	ldi	r24, 0x09	; 9
    46ba:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    46be:	61 e0       	ldi	r22, 0x01	; 1
    46c0:	88 e0       	ldi	r24, 0x08	; 8
    46c2:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    46c6:	60 e0       	ldi	r22, 0x00	; 0
    46c8:	88 e0       	ldi	r24, 0x08	; 8
    46ca:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    46ce:	60 e0       	ldi	r22, 0x00	; 0
    46d0:	84 e1       	ldi	r24, 0x14	; 20
    46d2:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	85 e1       	ldi	r24, 0x15	; 21
    46da:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    46de:	63 e0       	ldi	r22, 0x03	; 3
    46e0:	8c e0       	ldi	r24, 0x0C	; 12
    46e2:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	8b e0       	ldi	r24, 0x0B	; 11
    46ea:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    46ee:	60 e0       	ldi	r22, 0x00	; 0
    46f0:	8b e0       	ldi	r24, 0x0B	; 11
    46f2:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	linkbus_disable();
    46f6:	0e 94 92 09 	call	0x1324	; 0x1324 <_Z15linkbus_disablev>
//	digitalWrite(PIN_D1, OFF);
//	digitalWrite(PIN_D2, OFF);
//	digitalWrite(PIN_D3, OFF);
//	digitalWrite(PIN_D4, OFF);
//	digitalWrite(PIN_D5, OFF);
	DDRC |= 0x0F;
    46fa:	87 b1       	in	r24, 0x07	; 7
    46fc:	8f 60       	ori	r24, 0x0F	; 15
    46fe:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
    4700:	88 b1       	in	r24, 0x08	; 8
    4702:	80 7f       	andi	r24, 0xF0	; 240
    4704:	88 b9       	out	0x08, r24	; 8
	DDRD |= 0x03;
    4706:	8a b1       	in	r24, 0x0a	; 10
    4708:	83 60       	ori	r24, 0x03	; 3
    470a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0xFC;
    470c:	8b b1       	in	r24, 0x0b	; 11
    470e:	8c 7f       	andi	r24, 0xFC	; 252
    4710:	8b b9       	out	0x0b, r24	; 11

	pinMode(PIN_PWDN, OUTPUT);
    4712:	61 e0       	ldi	r22, 0x01	; 1
    4714:	86 e0       	ldi	r24, 0x06	; 6
    4716:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    471a:	61 e0       	ldi	r22, 0x01	; 1
    471c:	86 e0       	ldi	r24, 0x06	; 6
    471e:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    4722:	63 e0       	ldi	r22, 0x03	; 3
    4724:	82 e1       	ldi	r24, 0x12	; 18
    4726:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    472a:	63 e0       	ldi	r22, 0x03	; 3
    472c:	83 e1       	ldi	r24, 0x13	; 19
    472e:	0e 94 4c 01 	call	0x298	; 0x298 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    4732:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    4736:	84 ea       	ldi	r24, 0xA4	; 164
    4738:	95 e0       	ldi	r25, 0x05	; 5
    473a:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13EepromManager11readNonVolsEv>
    473e:	18 2f       	mov	r17, r24
		setUpAudioSampling(true);
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z18setUpAudioSamplingh>
#endif

	cli();
    4746:	f8 94       	cli
	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    4748:	a0 eb       	ldi	r26, 0xB0	; 176
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	1c 92       	st	X, r1
	TCCR2B = 0;
    474e:	e1 eb       	ldi	r30, 0xB1	; 177
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    4754:	8c 91       	ld	r24, X
    4756:	82 60       	ori	r24, 0x02	; 2
    4758:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    475a:	80 81       	ld	r24, Z
    475c:	87 60       	ori	r24, 0x07	; 7
    475e:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4760:	8c e0       	ldi	r24, 0x0C	; 12
    4762:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    4766:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    476a:	e6 eb       	ldi	r30, 0xB6	; 182
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	80 81       	ld	r24, Z
    4770:	8f 7d       	andi	r24, 0xDF	; 223
    4772:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    4774:	e0 e7       	ldi	r30, 0x70	; 112
    4776:	f0 e0       	ldi	r31, 0x00	; 0
    4778:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    477a:	80 81       	ld	r24, Z
    477c:	84 60       	ori	r24, 0x04	; 4
    477e:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    4780:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    4784:	c1 e8       	ldi	r28, 0x81	; 129
    4786:	d0 e0       	ldi	r29, 0x00	; 0
    4788:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    478a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    478e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    4792:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_AM_audio_frequency>
    4796:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    479a:	88 81       	ld	r24, Y
    479c:	88 60       	ori	r24, 0x08	; 8
    479e:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    47a0:	88 81       	ld	r24, Y
    47a2:	81 60       	ori	r24, 0x01	; 1
    47a4:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    47a6:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    47a8:	84 b5       	in	r24, 0x24	; 36
    47aa:	82 60       	ori	r24, 0x02	; 2
    47ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    47ae:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    47b0:	85 b5       	in	r24, 0x25	; 37
    47b2:	84 60       	ori	r24, 0x04	; 4
    47b4:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    47b6:	8f e2       	ldi	r24, 0x2F	; 47
    47b8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    47ba:	ee e6       	ldi	r30, 0x6E	; 110
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    47c0:	80 81       	ld	r24, Z
    47c2:	82 60       	ori	r24, 0x02	; 2
    47c4:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    47c6:	ed e6       	ldi	r30, 0x6D	; 109
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    47cc:	80 e1       	ldi	r24, 0x10	; 16
    47ce:	80 83       	st	Z, r24
	PCICR = 0x00;
    47d0:	e8 e6       	ldi	r30, 0x68	; 104
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    47d6:	84 e0       	ldi	r24, 0x04	; 4
    47d8:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    47da:	78 94       	sei

	if(!g_AM_enabled)
    47dc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_AM_enabled>
    47e0:	81 11       	cpse	r24, r1
    47e2:	06 c0       	rjmp	.+12     	; 0x47f0 <main+0x17a>
	{
		linkbus_init(BAUD);     /* Start the Link Bus serial comms */
    47e4:	60 e0       	ldi	r22, 0x00	; 0
    47e6:	71 ee       	ldi	r23, 0xE1	; 225
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12linkbus_initm>
	}

	g_reset_button_held = !digitalRead(PIN_SYNC);
    47f0:	84 e0       	ldi	r24, 0x04	; 4
    47f2:	0e 94 1c 02 	call	0x438	; 0x438 <_Z11digitalReadh>
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	81 11       	cpse	r24, r1
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    4800:	11 23       	and	r17, r17
    4802:	29 f0       	breq	.+10     	; 0x480e <main+0x198>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4804:	61 e0       	ldi	r22, 0x01	; 1
    4806:	85 e1       	ldi	r24, 0x15	; 21
    4808:	92 e0       	ldi	r25, 0x02	; 2
    480a:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
		}
		uint8_t result = rv3028_1s_sqw();
    480e:	0e 94 70 28 	call	0x50e0	; 0x50e0 <_Z13rv3028_1s_sqwv>
    4812:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

	/*g_current_epoch = rv3028_get_epoch(NULL, NULL); */
	g_current_epoch = rv3028_get_epoch();
    4814:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <_Z16rv3028_get_epochv>
    4818:	60 93 93 05 	sts	0x0593, r22	; 0x800593 <g_current_epoch>
    481c:	70 93 94 05 	sts	0x0594, r23	; 0x800594 <g_current_epoch+0x1>
    4820:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <g_current_epoch+0x2>
    4824:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    4828:	84 ea       	ldi	r24, 0xA4	; 164
    482a:	95 e0       	ldi	r25, 0x05	; 5
    482c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    4830:	cc 23       	and	r28, r28
    4832:	54 f4       	brge	.+20     	; 0x4848 <main+0x1d2>
		{
			sprintf(g_tempStr, "Err 1\n");
    4834:	87 e0       	ldi	r24, 0x07	; 7
    4836:	e4 e2       	ldi	r30, 0x24	; 36
    4838:	f2 e0       	ldi	r31, 0x02	; 2
    483a:	a6 ee       	ldi	r26, 0xE6	; 230
    483c:	b4 e0       	ldi	r27, 0x04	; 4
    483e:	01 90       	ld	r0, Z+
    4840:	0d 92       	st	X+, r0
    4842:	8a 95       	dec	r24
    4844:	e1 f7       	brne	.-8      	; 0x483e <main+0x1c8>
    4846:	23 c0       	rjmp	.+70     	; 0x488e <main+0x218>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    4848:	c0 ff       	sbrs	r28, 0
    484a:	0a c0       	rjmp	.+20     	; 0x4860 <main+0x1ea>
		{
			sprintf(g_tempStr, "Err 2\n");
    484c:	87 e0       	ldi	r24, 0x07	; 7
    484e:	eb e2       	ldi	r30, 0x2B	; 43
    4850:	f2 e0       	ldi	r31, 0x02	; 2
    4852:	a6 ee       	ldi	r26, 0xE6	; 230
    4854:	b4 e0       	ldi	r27, 0x04	; 4
    4856:	01 90       	ld	r0, Z+
    4858:	0d 92       	st	X+, r0
    485a:	8a 95       	dec	r24
    485c:	e1 f7       	brne	.-8      	; 0x4856 <main+0x1e0>
    485e:	17 c0       	rjmp	.+46     	; 0x488e <main+0x218>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4860:	c1 ff       	sbrs	r28, 1
    4862:	0a c0       	rjmp	.+20     	; 0x4878 <main+0x202>
		{
			sprintf(g_tempStr, "Err 3\n");
    4864:	87 e0       	ldi	r24, 0x07	; 7
    4866:	e2 e3       	ldi	r30, 0x32	; 50
    4868:	f2 e0       	ldi	r31, 0x02	; 2
    486a:	a6 ee       	ldi	r26, 0xE6	; 230
    486c:	b4 e0       	ldi	r27, 0x04	; 4
    486e:	01 90       	ld	r0, Z+
    4870:	0d 92       	st	X+, r0
    4872:	8a 95       	dec	r24
    4874:	e1 f7       	brne	.-8      	; 0x486e <main+0x1f8>
    4876:	0b c0       	rjmp	.+22     	; 0x488e <main+0x218>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4878:	c5 ff       	sbrs	r28, 5
    487a:	09 c0       	rjmp	.+18     	; 0x488e <main+0x218>
		{
			sprintf(g_tempStr, "RTC OK\n");
    487c:	88 e0       	ldi	r24, 0x08	; 8
    487e:	e9 e3       	ldi	r30, 0x39	; 57
    4880:	f2 e0       	ldi	r31, 0x02	; 2
    4882:	a6 ee       	ldi	r26, 0xE6	; 230
    4884:	b4 e0       	ldi	r27, 0x04	; 4
    4886:	01 90       	ld	r0, Z+
    4888:	0d 92       	st	X+, r0
    488a:	8a 95       	dec	r24
    488c:	e1 f7       	brne	.-8      	; 0x4886 <main+0x210>
		}

		if(strlen(g_tempStr))
    488e:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_tempStr>
    4892:	88 23       	and	r24, r24
    4894:	29 f0       	breq	.+10     	; 0x48a0 <main+0x22a>
		{
			lb_send_string(g_tempStr, TRUE);
    4896:	61 e0       	ldi	r22, 0x01	; 1
    4898:	86 ee       	ldi	r24, 0xE6	; 230
    489a:	94 e0       	ldi	r25, 0x04	; 4
    489c:	0e 94 07 0a 	call	0x140e	; 0x140e <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    48a0:	0e 94 93 13 	call	0x2726	; 0x2726 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    48a4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    48a8:	ef e6       	ldi	r30, 0x6F	; 111
    48aa:	f0 e0       	ldi	r31, 0x00	; 0
    48ac:	80 81       	ld	r24, Z
    48ae:	82 60       	ori	r24, 0x02	; 2
    48b0:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	0e 94 cf 12 	call	0x259e	; 0x259e <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    48b8:	e9 e6       	ldi	r30, 0x69	; 105
    48ba:	f0 e0       	ldi	r31, 0x00	; 0
    48bc:	80 81       	ld	r24, Z
    48be:	82 60       	ori	r24, 0x02	; 2
    48c0:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    48c2:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    48c4:	0e 94 0d 20 	call	0x401a	; 0x401a <_Z4loopv>
    48c8:	fd cf       	rjmp	.-6      	; 0x48c4 <main+0x24e>

000048ca <_GLOBAL__sub_I_ee_mgr>:
	{
		setupPortsForF1975();
	}

	g_AM_enabled = enableAM;
}
    48ca:	0f 93       	push	r16
    48cc:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    48ce:	84 ea       	ldi	r24, 0xA4	; 164
    48d0:	95 e0       	ldi	r25, 0x05	; 5
    48d2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    48d6:	00 e0       	ldi	r16, 0x00	; 0
    48d8:	18 e7       	ldi	r17, 0x78	; 120
    48da:	26 e9       	ldi	r18, 0x96	; 150
    48dc:	36 e4       	ldi	r19, 0x46	; 70
    48de:	40 e0       	ldi	r20, 0x00	; 0
    48e0:	50 e0       	ldi	r21, 0x00	; 0
    48e2:	69 e4       	ldi	r22, 0x49	; 73
    48e4:	73 e4       	ldi	r23, 0x43	; 67
    48e6:	8e e0       	ldi	r24, 0x0E	; 14
    48e8:	95 e0       	ldi	r25, 0x05	; 5
    48ea:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN8GoertzelC1Eff>
	{
		setupPortsForF1975();
	}

	g_AM_enabled = enableAM;
}
    48ee:	1f 91       	pop	r17
    48f0:	0f 91       	pop	r16
    48f2:	08 95       	ret

000048f4 <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    48f4:	8e e0       	ldi	r24, 0x0E	; 14
    48f6:	95 e0       	ldi	r25, 0x05	; 5
    48f8:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    48fc:	84 ea       	ldi	r24, 0xA4	; 164
    48fe:	95 e0       	ldi	r25, 0x05	; 5
    4900:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN13EepromManagerD1Ev>
    4904:	08 95       	ret

00004906 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	fc 01       	movw	r30, r24
    490a:	b0 97       	sbiw	r30, 0x20	; 32
    490c:	ed 35       	cpi	r30, 0x5D	; 93
    490e:	f1 05       	cpc	r31, r1
    4910:	08 f0       	brcs	.+2      	; 0x4914 <_Z12getMorseCharc+0xe>
    4912:	e4 c0       	rjmp	.+456    	; 0x4adc <_Z12getMorseCharc+0x1d6>
    4914:	ed 56       	subi	r30, 0x6D	; 109
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    491c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    491e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4920:	61 e0       	ldi	r22, 0x01	; 1
    4922:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4924:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    4926:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4928:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    492a:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    492c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    492e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4930:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4932:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    4934:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    4936:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4938:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    493a:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    493c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    493e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4940:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4942:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4944:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    4946:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4948:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    494a:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    494c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    494e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4950:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4952:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    4954:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    4956:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4958:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    495a:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    495c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    495e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4960:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4962:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4964:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4966:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4968:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    496a:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    496c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    496e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4970:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4972:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4974:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    4976:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4978:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    497a:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    497c:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    497e:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4980:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4982:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4984:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    4986:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4988:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    498a:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    498c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    498e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4990:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4992:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4994:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4996:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4998:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    499a:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    499c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    499e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    49a0:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    49a2:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    49a4:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    49a6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49a8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    49aa:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    49ac:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    49ae:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    49b0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    49b2:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    49b4:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    49b6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    49b8:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    49ba:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    49bc:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    49be:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    49c0:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    49c2:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    49c4:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    49c6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    49c8:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    49ca:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    49cc:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    49ce:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    49d0:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    49d2:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    49d4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    49d6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    49d8:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    49da:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    49dc:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    49de:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    49e0:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    49e2:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    49e4:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    49e6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    49e8:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    49ea:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    49ec:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    49ee:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    49f0:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    49f2:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    49f4:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    49f6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    49f8:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    49fa:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    49fc:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    49fe:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4a00:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4a02:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4a04:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4a06:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4a08:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4a0a:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4a0c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4a0e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4a10:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4a12:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4a14:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    4a16:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4a18:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4a1a:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4a1c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4a1e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4a20:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4a22:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4a24:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    4a26:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4a28:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4a2a:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4a2c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4a2e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4a30:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4a32:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4a34:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    4a36:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    4a38:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4a3a:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4a3c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4a3e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4a40:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4a42:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4a44:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    4a46:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    4a48:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4a4a:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4a4c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4a4e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4a50:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4a52:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4a54:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    4a56:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    4a58:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4a5a:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4a5c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4a5e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4a60:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4a62:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4a64:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    4a66:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4a68:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4a6a:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4a6c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4a6e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4a70:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4a72:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4a74:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    4a76:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4a78:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4a7a:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4a7c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4a7e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4a80:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4a82:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4a84:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    4a86:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    4a88:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4a8a:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4a8c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4a8e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4a90:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4a92:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4a94:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    4a96:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    4a98:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4a9a:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4a9c:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4a9e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4aa0:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4aa2:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4aa4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    4aa6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    4aa8:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4aaa:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4aac:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4aae:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4ab0:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4ab2:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    4ab4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    4ab6:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    4ab8:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4aba:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4abc:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4abe:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4ac0:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4ac2:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    4ac4:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4ac6:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    4ac8:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4aca:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4acc:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4ace:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4ad0:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4ad2:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4ad4:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4ad6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    4ad8:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4ada:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    4adc:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4ade:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4ae0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    4ae2:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4ae4:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    4ae6:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4ae8:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    4aea:	08 95       	ret

00004aec <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4aec:	cf 93       	push	r28
    4aee:	df 93       	push	r29
    4af0:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4af2:	00 97       	sbiw	r24, 0x00	; 0
    4af4:	b1 f1       	breq	.+108    	; 0x4b62 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    4af6:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    4afa:	61 15       	cp	r22, r1
    4afc:	71 05       	cpc	r23, r1
    4afe:	21 f0       	breq	.+8      	; 0x4b08 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4b00:	db 01       	movw	r26, r22
    4b02:	2c 91       	ld	r18, X
    4b04:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    4b08:	fc 01       	movw	r30, r24
    4b0a:	20 81       	ld	r18, Z
    4b0c:	22 23       	and	r18, r18
    4b0e:	d9 f0       	breq	.+54     	; 0x4b46 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4b10:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4b14:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    4b18:	80 e2       	ldi	r24, 0x20	; 32
    4b1a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4b1e:	82 2f       	mov	r24, r18
    4b20:	0e 94 83 24 	call	0x4906	; 0x4906 <_Z12getMorseCharc>
    4b24:	60 93 ab 05 	sts	0x05AB, r22	; 0x8005ab <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4b28:	70 93 ac 05 	sts	0x05AC, r23	; 0x8005ac <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4b2c:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4b30:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4b34:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    4b38:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4b3c:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4b40:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15completedString>
    4b44:	0a c0       	rjmp	.+20     	; 0x4b5a <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    4b46:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4b4a:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4b54:	20 97       	sbiw	r28, 0x00	; 0
    4b56:	09 f0       	breq	.+2      	; 0x4b5a <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    4b58:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    4b5a:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	c0 c0       	rjmp	.+384    	; 0x4ce2 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4b62:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <_ZZ9makeMorsePcPhS0_E3str>
    4b66:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4b6a:	30 97       	sbiw	r30, 0x00	; 0
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <_Z9makeMorsePcPhS0_+0x84>
    4b6e:	aa c0       	rjmp	.+340    	; 0x4cc4 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4b70:	61 15       	cp	r22, r1
    4b72:	71 05       	cpc	r23, r1
    4b74:	21 f0       	breq	.+8      	; 0x4b7e <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    4b76:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ9makeMorsePcPhS0_E6repeat>
    4b7a:	db 01       	movw	r26, r22
    4b7c:	8c 93       	st	X, r24
		}

		if(completedString)
    4b7e:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15completedString>
    4b82:	88 23       	and	r24, r24
    4b84:	49 f0       	breq	.+18     	; 0x4b98 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    4b86:	20 97       	sbiw	r28, 0x00	; 0
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <_Z9makeMorsePcPhS0_+0xa0>
    4b8a:	a8 c0       	rjmp	.+336    	; 0x4cdc <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4b90:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    4b94:	80 e0       	ldi	r24, 0x00	; 0
    4b96:	a5 c0       	rjmp	.+330    	; 0x4ce2 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    4b98:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4b9c:	88 23       	and	r24, r24
    4b9e:	21 f0       	breq	.+8      	; 0x4ba8 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4ba0:	81 50       	subi	r24, 0x01	; 1
    4ba2:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4ba6:	7f c0       	rjmp	.+254    	; 0x4ca6 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    4ba8:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4bac:	88 23       	and	r24, r24
    4bae:	81 f0       	breq	.+32     	; 0x4bd0 <_Z9makeMorsePcPhS0_+0xe4>
    4bb0:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4bb4:	81 11       	cpse	r24, r1
    4bb6:	0c c0       	rjmp	.+24     	; 0x4bd0 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    4bb8:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    4bbc:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4bc0:	88 23       	and	r24, r24
    4bc2:	09 f4       	brne	.+2      	; 0x4bc6 <_Z9makeMorsePcPhS0_+0xda>
    4bc4:	70 c0       	rjmp	.+224    	; 0x4ca6 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    4bc6:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    4bca:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4bce:	6b c0       	rjmp	.+214    	; 0x4ca6 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4bd0:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4bd4:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4bd8:	89 17       	cp	r24, r25
    4bda:	90 f1       	brcs	.+100    	; 0x4c40 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    4bdc:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <_ZZ9makeMorsePcPhS0_E9charIndex>
    4be0:	8f 5f       	subi	r24, 0xFF	; 255
    4be2:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <_ZZ9makeMorsePcPhS0_E9charIndex>
    4be6:	df 01       	movw	r26, r30
    4be8:	a8 0f       	add	r26, r24
    4bea:	b1 1d       	adc	r27, r1
    4bec:	8c 91       	ld	r24, X
    4bee:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4bf2:	81 11       	cpse	r24, r1
    4bf4:	19 c0       	rjmp	.+50     	; 0x4c28 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    4bf6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ9makeMorsePcPhS0_E6repeat>
    4bfa:	88 23       	and	r24, r24
    4bfc:	31 f0       	breq	.+12     	; 0x4c0a <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4bfe:	80 81       	ld	r24, Z
    4c00:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4c04:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <_ZZ9makeMorsePcPhS0_E9charIndex>
    4c08:	0f c0       	rjmp	.+30     	; 0x4c28 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    4c0a:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4c0e:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4c12:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    4c16:	91 e0       	ldi	r25, 0x01	; 1
    4c18:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    4c1c:	20 97       	sbiw	r28, 0x00	; 0
    4c1e:	09 f0       	breq	.+2      	; 0x4c22 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4c20:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4c22:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    4c26:	5d c0       	rjmp	.+186    	; 0x4ce2 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    4c28:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
    4c2c:	0e 94 83 24 	call	0x4906	; 0x4906 <_Z12getMorseCharc>
    4c30:	60 93 ab 05 	sts	0x05AB, r22	; 0x8005ab <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4c34:	70 93 ac 05 	sts	0x05AC, r23	; 0x8005ac <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4c38:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4c3c:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4c40:	20 91 ab 05 	lds	r18, 0x05AB	; 0x8005ab <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4c44:	2d 3f       	cpi	r18, 0xFD	; 253
    4c46:	00 f5       	brcc	.+64     	; 0x4c88 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    4c48:	40 91 a9 05 	lds	r20, 0x05A9	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4c4c:	31 e0       	ldi	r19, 0x01	; 1
    4c4e:	34 0f       	add	r19, r20
    4c50:	30 93 a9 05 	sts	0x05A9, r19	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	02 c0       	rjmp	.+4      	; 0x4c5e <_Z9makeMorsePcPhS0_+0x172>
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	4a 95       	dec	r20
    4c60:	e2 f7       	brpl	.-8      	; 0x4c5a <_Z9makeMorsePcPhS0_+0x16e>
    4c62:	82 23       	and	r24, r18
    4c64:	21 f0       	breq	.+8      	; 0x4c6e <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4c6c:	02 c0       	rjmp	.+4      	; 0x4c72 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4c6e:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    4c78:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4c7c:	38 17       	cp	r19, r24
    4c7e:	98 f0       	brcs	.+38     	; 0x4ca6 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4c86:	0f c0       	rjmp	.+30     	; 0x4ca6 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    4c88:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    4c8c:	9f ef       	ldi	r25, 0xFF	; 255
    4c8e:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4c92:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    4c96:	84 30       	cpi	r24, 0x04	; 4
    4c98:	20 f0       	brcs	.+8      	; 0x4ca2 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    4c9a:	84 50       	subi	r24, 0x04	; 4
    4c9c:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4ca0:	02 c0       	rjmp	.+4      	; 0x4ca6 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4ca2:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    4ca6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
    4caa:	8c 33       	cpi	r24, 0x3C	; 60
    4cac:	31 f4       	brne	.+12     	; 0x4cba <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    4cb4:	20 97       	sbiw	r28, 0x00	; 0
    4cb6:	41 f4       	brne	.+16     	; 0x4cc8 <_Z9makeMorsePcPhS0_+0x1dc>
    4cb8:	14 c0       	rjmp	.+40     	; 0x4ce2 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    4cba:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4cbe:	20 97       	sbiw	r28, 0x00	; 0
    4cc0:	19 f4       	brne	.+6      	; 0x4cc8 <_Z9makeMorsePcPhS0_+0x1dc>
    4cc2:	09 c0       	rjmp	.+18     	; 0x4cd6 <_Z9makeMorsePcPhS0_+0x1ea>
    4cc4:	20 97       	sbiw	r28, 0x00	; 0
    4cc6:	19 f0       	breq	.+6      	; 0x4cce <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    4cc8:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15completedString>
    4ccc:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4cce:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4cd2:	81 11       	cpse	r24, r1
    4cd4:	05 c0       	rjmp	.+10     	; 0x4ce0 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    4cd6:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4cda:	03 c0       	rjmp	.+6      	; 0x4ce2 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	01 c0       	rjmp	.+2      	; 0x4ce2 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    4ce2:	df 91       	pop	r29
    4ce4:	cf 91       	pop	r28
    4ce6:	08 95       	ret

00004ce8 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    4ce8:	cf 92       	push	r12
    4cea:	df 92       	push	r13
    4cec:	ef 92       	push	r14
    4cee:	ff 92       	push	r15
    4cf0:	0f 93       	push	r16
    4cf2:	1f 93       	push	r17
    4cf4:	cf 93       	push	r28
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4cfa:	80 81       	ld	r24, Z
		if(!c)
    4cfc:	88 23       	and	r24, r24
    4cfe:	c1 f0       	breq	.+48     	; 0x4d30 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4d00:	8f 01       	movw	r16, r30
    4d02:	0f 5f       	subi	r16, 0xFF	; 255
    4d04:	1f 4f       	sbci	r17, 0xFF	; 255
    4d06:	7f 01       	movw	r14, r30
    4d08:	94 e1       	ldi	r25, 0x14	; 20
    4d0a:	e9 0e       	add	r14, r25
    4d0c:	f1 1c       	adc	r15, r1
    4d0e:	c0 e0       	ldi	r28, 0x00	; 0
    4d10:	05 c0       	rjmp	.+10     	; 0x4d1c <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4d12:	f8 01       	movw	r30, r16
    4d14:	81 91       	ld	r24, Z+
    4d16:	8f 01       	movw	r16, r30
		if(!c)
    4d18:	88 23       	and	r24, r24
    4d1a:	59 f0       	breq	.+22     	; 0x4d32 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4d1c:	0e 94 83 24 	call	0x4906	; 0x4906 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4d20:	6d 3f       	cpi	r22, 0xFD	; 253
    4d22:	08 f4       	brcc	.+2      	; 0x4d26 <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4d24:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    4d26:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    4d28:	0e 15       	cp	r16, r14
    4d2a:	1f 05       	cpc	r17, r15
    4d2c:	91 f7       	brne	.-28     	; 0x4d12 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4d2e:	01 c0       	rjmp	.+2      	; 0x4d32 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4d30:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4d32:	80 eb       	ldi	r24, 0xB0	; 176
    4d34:	94 e0       	ldi	r25, 0x04	; 4
    4d36:	b6 01       	movw	r22, r12
    4d38:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__udivmodhi4>
}
    4d3c:	c6 9f       	mul	r28, r22
    4d3e:	c0 01       	movw	r24, r0
    4d40:	c7 9f       	mul	r28, r23
    4d42:	90 0d       	add	r25, r0
    4d44:	11 24       	eor	r1, r1
    4d46:	cf 91       	pop	r28
    4d48:	1f 91       	pop	r17
    4d4a:	0f 91       	pop	r16
    4d4c:	ff 90       	pop	r15
    4d4e:	ef 90       	pop	r14
    4d50:	df 90       	pop	r13
    4d52:	cf 90       	pop	r12
    4d54:	08 95       	ret

00004d56 <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    4d56:	98 2f       	mov	r25, r24
    4d58:	96 95       	lsr	r25
    4d5a:	96 95       	lsr	r25
    4d5c:	96 95       	lsr	r25
    4d5e:	9e 71       	andi	r25, 0x1E	; 30
    4d60:	29 2f       	mov	r18, r25
    4d62:	22 0f       	add	r18, r18
    4d64:	22 0f       	add	r18, r18
    4d66:	92 0f       	add	r25, r18
    4d68:	8f 70       	andi	r24, 0x0F	; 15
    4d6a:	89 0f       	add	r24, r25
    4d6c:	08 95       	ret

00004d6e <_Z8char2bcdPc>:
    4d6e:	fc 01       	movw	r30, r24
    4d70:	20 81       	ld	r18, Z
    4d72:	81 81       	ldd	r24, Z+1	; 0x01
    4d74:	80 53       	subi	r24, 0x30	; 48
    4d76:	f0 e1       	ldi	r31, 0x10	; 16
    4d78:	2f 9f       	mul	r18, r31
    4d7a:	80 0d       	add	r24, r0
    4d7c:	11 24       	eor	r1, r1
    4d7e:	08 95       	ret

00004d80 <_Z16rv3028_set_epochm>:
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	00 d0       	rcall	.+0      	; 0x4d86 <_Z16rv3028_set_epochm+0x6>
    4d86:	00 d0       	rcall	.+0      	; 0x4d88 <_Z16rv3028_set_epochm+0x8>
    4d88:	1f 92       	push	r1
    4d8a:	cd b7       	in	r28, 0x3d	; 61
    4d8c:	de b7       	in	r29, 0x3e	; 62
    4d8e:	ae 01       	movw	r20, r28
    4d90:	4f 5f       	subi	r20, 0xFF	; 255
    4d92:	5f 4f       	sbci	r21, 0xFF	; 255
    4d94:	25 e0       	ldi	r18, 0x05	; 5
    4d96:	fa 01       	movw	r30, r20
    4d98:	11 92       	st	Z+, r1
    4d9a:	2a 95       	dec	r18
    4d9c:	e9 f7       	brne	.-6      	; 0x4d98 <_Z16rv3028_set_epochm+0x18>
    4d9e:	9c 83       	std	Y+4, r25	; 0x04
    4da0:	8b 83       	std	Y+3, r24	; 0x03
    4da2:	7a 83       	std	Y+2, r23	; 0x02
    4da4:	69 83       	std	Y+1, r22	; 0x01
    4da6:	24 e0       	ldi	r18, 0x04	; 4
    4da8:	6b e1       	ldi	r22, 0x1B	; 27
    4daa:	84 ea       	ldi	r24, 0xA4	; 164
    4dac:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z16i2c_device_writehhPhh>
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	0f 90       	pop	r0
    4db8:	0f 90       	pop	r0
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	08 95       	ret

00004dc0 <_Z16rv3028_get_epochv>:
    4dc0:	cf 93       	push	r28
    4dc2:	df 93       	push	r29
    4dc4:	00 d0       	rcall	.+0      	; 0x4dc6 <_Z16rv3028_get_epochv+0x6>
    4dc6:	00 d0       	rcall	.+0      	; 0x4dc8 <_Z16rv3028_get_epochv+0x8>
    4dc8:	cd b7       	in	r28, 0x3d	; 61
    4dca:	de b7       	in	r29, 0x3e	; 62
    4dcc:	19 82       	std	Y+1, r1	; 0x01
    4dce:	1a 82       	std	Y+2, r1	; 0x02
    4dd0:	1b 82       	std	Y+3, r1	; 0x03
    4dd2:	1c 82       	std	Y+4, r1	; 0x04
    4dd4:	24 e0       	ldi	r18, 0x04	; 4
    4dd6:	ae 01       	movw	r20, r28
    4dd8:	4f 5f       	subi	r20, 0xFF	; 255
    4dda:	5f 4f       	sbci	r21, 0xFF	; 255
    4ddc:	6b e1       	ldi	r22, 0x1B	; 27
    4dde:	84 ea       	ldi	r24, 0xA4	; 164
    4de0:	0e 94 02 08 	call	0x1004	; 0x1004 <_Z15i2c_device_readhhPhh>
    4de4:	81 11       	cpse	r24, r1
    4de6:	11 c0       	rjmp	.+34     	; 0x4e0a <_Z16rv3028_get_epochv+0x4a>
    4de8:	2a 81       	ldd	r18, Y+2	; 0x02
    4dea:	6b 81       	ldd	r22, Y+3	; 0x03
    4dec:	86 2f       	mov	r24, r22
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	a0 e0       	ldi	r26, 0x00	; 0
    4df2:	b0 e0       	ldi	r27, 0x00	; 0
    4df4:	dc 01       	movw	r26, r24
    4df6:	99 27       	eor	r25, r25
    4df8:	88 27       	eor	r24, r24
    4dfa:	92 2b       	or	r25, r18
    4dfc:	29 81       	ldd	r18, Y+1	; 0x01
    4dfe:	82 2b       	or	r24, r18
    4e00:	2c 81       	ldd	r18, Y+4	; 0x04
    4e02:	bc 01       	movw	r22, r24
    4e04:	cd 01       	movw	r24, r26
    4e06:	92 2b       	or	r25, r18
    4e08:	03 c0       	rjmp	.+6      	; 0x4e10 <_Z16rv3028_get_epochv+0x50>
    4e0a:	60 e0       	ldi	r22, 0x00	; 0
    4e0c:	70 e0       	ldi	r23, 0x00	; 0
    4e0e:	cb 01       	movw	r24, r22
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
    4e14:	0f 90       	pop	r0
    4e16:	0f 90       	pop	r0
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	08 95       	ret

00004e1e <_Z16rv3028_get_epochPbPc>:
    4e1e:	6f 92       	push	r6
    4e20:	7f 92       	push	r7
    4e22:	8f 92       	push	r8
    4e24:	9f 92       	push	r9
    4e26:	af 92       	push	r10
    4e28:	bf 92       	push	r11
    4e2a:	cf 92       	push	r12
    4e2c:	df 92       	push	r13
    4e2e:	ef 92       	push	r14
    4e30:	ff 92       	push	r15
    4e32:	0f 93       	push	r16
    4e34:	1f 93       	push	r17
    4e36:	cf 93       	push	r28
    4e38:	df 93       	push	r29
    4e3a:	6c 01       	movw	r12, r24
    4e3c:	eb 01       	movw	r28, r22
    4e3e:	20 97       	sbiw	r28, 0x00	; 0
    4e40:	09 f4       	brne	.+2      	; 0x4e44 <_Z16rv3028_get_epochPbPc+0x26>
    4e42:	b6 c0       	rjmp	.+364    	; 0x4fb0 <_Z16rv3028_get_epochPbPc+0x192>
    4e44:	cb 01       	movw	r24, r22
    4e46:	0a 96       	adiw	r24, 0x0a	; 10
    4e48:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_Z8char2bcdPc>
    4e4c:	88 2e       	mov	r8, r24
    4e4e:	ce 01       	movw	r24, r28
    4e50:	08 96       	adiw	r24, 0x08	; 8
    4e52:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_Z8char2bcdPc>
    4e56:	78 2e       	mov	r7, r24
    4e58:	ce 01       	movw	r24, r28
    4e5a:	06 96       	adiw	r24, 0x06	; 6
    4e5c:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_Z8char2bcdPc>
    4e60:	98 2e       	mov	r9, r24
    4e62:	ce 01       	movw	r24, r28
    4e64:	04 96       	adiw	r24, 0x04	; 4
    4e66:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_Z8char2bcdPc>
    4e6a:	18 2f       	mov	r17, r24
    4e6c:	ce 01       	movw	r24, r28
    4e6e:	02 96       	adiw	r24, 0x02	; 2
    4e70:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_Z8char2bcdPc>
    4e74:	08 2f       	mov	r16, r24
    4e76:	ce 01       	movw	r24, r28
    4e78:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_Z8char2bcdPc>
    4e7c:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_Z7bcd2dech>
    4e80:	e8 2e       	mov	r14, r24
    4e82:	f1 2c       	mov	r15, r1
    4e84:	57 01       	movw	r10, r14
    4e86:	80 e3       	ldi	r24, 0x30	; 48
    4e88:	a8 1a       	sub	r10, r24
    4e8a:	88 ef       	ldi	r24, 0xF8	; 248
    4e8c:	b8 0a       	sbc	r11, r24
    4e8e:	80 2f       	mov	r24, r16
    4e90:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_Z7bcd2dech>
    4e94:	d8 2f       	mov	r29, r24
    4e96:	81 2f       	mov	r24, r17
    4e98:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_Z7bcd2dech>
    4e9c:	68 2e       	mov	r6, r24
    4e9e:	d2 30       	cpi	r29, 0x02	; 2
    4ea0:	68 f0       	brcs	.+26     	; 0x4ebc <_Z16rv3028_get_epochPbPc+0x9e>
    4ea2:	00 e0       	ldi	r16, 0x00	; 0
    4ea4:	10 e0       	ldi	r17, 0x00	; 0
    4ea6:	c1 e0       	ldi	r28, 0x01	; 1
    4ea8:	6c 2f       	mov	r22, r28
    4eaa:	c5 01       	movw	r24, r10
    4eac:	0e 94 2b 01 	call	0x256	; 0x256 <month_length>
    4eb0:	08 0f       	add	r16, r24
    4eb2:	11 1d       	adc	r17, r1
    4eb4:	cf 5f       	subi	r28, 0xFF	; 255
    4eb6:	dc 13       	cpse	r29, r28
    4eb8:	f7 cf       	rjmp	.-18     	; 0x4ea8 <_Z16rv3028_get_epochPbPc+0x8a>
    4eba:	02 c0       	rjmp	.+4      	; 0x4ec0 <_Z16rv3028_get_epochPbPc+0xa2>
    4ebc:	00 e0       	ldi	r16, 0x00	; 0
    4ebe:	10 e0       	ldi	r17, 0x00	; 0
    4ec0:	86 2d       	mov	r24, r6
    4ec2:	66 0c       	add	r6, r6
    4ec4:	99 0b       	sbc	r25, r25
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	08 0f       	add	r16, r24
    4eca:	19 1f       	adc	r17, r25
    4ecc:	88 2d       	mov	r24, r8
    4ece:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_Z7bcd2dech>
    4ed2:	88 2e       	mov	r8, r24
    4ed4:	87 2d       	mov	r24, r7
    4ed6:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_Z7bcd2dech>
    4eda:	c8 2f       	mov	r28, r24
    4edc:	89 2d       	mov	r24, r9
    4ede:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_Z7bcd2dech>
    4ee2:	08 2c       	mov	r0, r8
    4ee4:	00 0c       	add	r0, r0
    4ee6:	99 08       	sbc	r9, r9
    4ee8:	9c e3       	ldi	r25, 0x3C	; 60
    4eea:	c9 02       	muls	r28, r25
    4eec:	80 0c       	add	r8, r0
    4eee:	91 1c       	adc	r9, r1
    4ef0:	11 24       	eor	r1, r1
    4ef2:	09 2c       	mov	r0, r9
    4ef4:	00 0c       	add	r0, r0
    4ef6:	aa 08       	sbc	r10, r10
    4ef8:	bb 08       	sbc	r11, r11
    4efa:	a8 2f       	mov	r26, r24
    4efc:	88 0f       	add	r24, r24
    4efe:	bb 0b       	sbc	r27, r27
    4f00:	20 e1       	ldi	r18, 0x10	; 16
    4f02:	3e e0       	ldi	r19, 0x0E	; 14
    4f04:	0e 94 31 2c 	call	0x5862	; 0x5862 <__usmulhisi3>
    4f08:	86 0e       	add	r8, r22
    4f0a:	97 1e       	adc	r9, r23
    4f0c:	a8 1e       	adc	r10, r24
    4f0e:	b9 1e       	adc	r11, r25
    4f10:	d8 01       	movw	r26, r16
    4f12:	20 e8       	ldi	r18, 0x80	; 128
    4f14:	31 e5       	ldi	r19, 0x51	; 81
    4f16:	41 e0       	ldi	r20, 0x01	; 1
    4f18:	50 e0       	ldi	r21, 0x00	; 0
    4f1a:	0e 94 43 2c 	call	0x5886	; 0x5886 <__mulshisi3>
    4f1e:	86 0e       	add	r8, r22
    4f20:	97 1e       	adc	r9, r23
    4f22:	a8 1e       	adc	r10, r24
    4f24:	b9 1e       	adc	r11, r25
    4f26:	d7 01       	movw	r26, r14
    4f28:	5e 96       	adiw	r26, 0x1e	; 30
    4f2a:	20 e8       	ldi	r18, 0x80	; 128
    4f2c:	33 e3       	ldi	r19, 0x33	; 51
    4f2e:	41 ee       	ldi	r20, 0xE1	; 225
    4f30:	51 e0       	ldi	r21, 0x01	; 1
    4f32:	0e 94 43 2c 	call	0x5886	; 0x5886 <__mulshisi3>
    4f36:	86 0e       	add	r8, r22
    4f38:	97 1e       	adc	r9, r23
    4f3a:	a8 1e       	adc	r10, r24
    4f3c:	b9 1e       	adc	r11, r25
    4f3e:	c7 01       	movw	r24, r14
    4f40:	4f 96       	adiw	r24, 0x1f	; 31
    4f42:	dc 01       	movw	r26, r24
    4f44:	0a f4       	brpl	.+2      	; 0x4f48 <_Z16rv3028_get_epochPbPc+0x12a>
    4f46:	13 96       	adiw	r26, 0x03	; 3
    4f48:	b5 95       	asr	r27
    4f4a:	a7 95       	ror	r26
    4f4c:	b5 95       	asr	r27
    4f4e:	a7 95       	ror	r26
    4f50:	20 e8       	ldi	r18, 0x80	; 128
    4f52:	31 e5       	ldi	r19, 0x51	; 81
    4f54:	41 e0       	ldi	r20, 0x01	; 1
    4f56:	50 e0       	ldi	r21, 0x00	; 0
    4f58:	0e 94 43 2c 	call	0x5886	; 0x5886 <__mulshisi3>
    4f5c:	86 0e       	add	r8, r22
    4f5e:	97 1e       	adc	r9, r23
    4f60:	a8 1e       	adc	r10, r24
    4f62:	b9 1e       	adc	r11, r25
    4f64:	c7 01       	movw	r24, r14
    4f66:	8d 59       	subi	r24, 0x9D	; 157
    4f68:	9f 4f       	sbci	r25, 0xFF	; 255
    4f6a:	64 e6       	ldi	r22, 0x64	; 100
    4f6c:	70 e0       	ldi	r23, 0x00	; 0
    4f6e:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    4f72:	db 01       	movw	r26, r22
    4f74:	20 e8       	ldi	r18, 0x80	; 128
    4f76:	3e ea       	ldi	r19, 0xAE	; 174
    4f78:	4e ef       	ldi	r20, 0xFE	; 254
    4f7a:	5f ef       	ldi	r21, 0xFF	; 255
    4f7c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__mulshisi3>
    4f80:	86 0e       	add	r8, r22
    4f82:	97 1e       	adc	r9, r23
    4f84:	a8 1e       	adc	r10, r24
    4f86:	b9 1e       	adc	r11, r25
    4f88:	c7 01       	movw	r24, r14
    4f8a:	81 57       	subi	r24, 0x71	; 113
    4f8c:	9e 4f       	sbci	r25, 0xFE	; 254
    4f8e:	60 e9       	ldi	r22, 0x90	; 144
    4f90:	71 e0       	ldi	r23, 0x01	; 1
    4f92:	0e 94 c7 2b 	call	0x578e	; 0x578e <__divmodhi4>
    4f96:	db 01       	movw	r26, r22
    4f98:	20 e8       	ldi	r18, 0x80	; 128
    4f9a:	31 e5       	ldi	r19, 0x51	; 81
    4f9c:	41 e0       	ldi	r20, 0x01	; 1
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	0e 94 43 2c 	call	0x5886	; 0x5886 <__mulshisi3>
    4fa4:	68 0d       	add	r22, r8
    4fa6:	79 1d       	adc	r23, r9
    4fa8:	8a 1d       	adc	r24, r10
    4faa:	9b 1d       	adc	r25, r11
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	09 c0       	rjmp	.+18     	; 0x4fc2 <_Z16rv3028_get_epochPbPc+0x1a4>
    4fb0:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <_Z16rv3028_get_epochv>
    4fb4:	31 e0       	ldi	r19, 0x01	; 1
    4fb6:	61 15       	cp	r22, r1
    4fb8:	71 05       	cpc	r23, r1
    4fba:	81 05       	cpc	r24, r1
    4fbc:	91 05       	cpc	r25, r1
    4fbe:	09 f0       	breq	.+2      	; 0x4fc2 <_Z16rv3028_get_epochPbPc+0x1a4>
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	c1 14       	cp	r12, r1
    4fc4:	d1 04       	cpc	r13, r1
    4fc6:	31 f0       	breq	.+12     	; 0x4fd4 <_Z16rv3028_get_epochPbPc+0x1b6>
    4fc8:	21 e0       	ldi	r18, 0x01	; 1
    4fca:	31 11       	cpse	r19, r1
    4fcc:	01 c0       	rjmp	.+2      	; 0x4fd0 <_Z16rv3028_get_epochPbPc+0x1b2>
    4fce:	20 e0       	ldi	r18, 0x00	; 0
    4fd0:	f6 01       	movw	r30, r12
    4fd2:	20 83       	st	Z, r18
    4fd4:	df 91       	pop	r29
    4fd6:	cf 91       	pop	r28
    4fd8:	1f 91       	pop	r17
    4fda:	0f 91       	pop	r16
    4fdc:	ff 90       	pop	r15
    4fde:	ef 90       	pop	r14
    4fe0:	df 90       	pop	r13
    4fe2:	cf 90       	pop	r12
    4fe4:	bf 90       	pop	r11
    4fe6:	af 90       	pop	r10
    4fe8:	9f 90       	pop	r9
    4fea:	8f 90       	pop	r8
    4fec:	7f 90       	pop	r7
    4fee:	6f 90       	pop	r6
    4ff0:	08 95       	ret

00004ff2 <_Z21rv3028_set_offset_RAMj>:
    4ff2:	cf 93       	push	r28
    4ff4:	df 93       	push	r29
    4ff6:	00 d0       	rcall	.+0      	; 0x4ff8 <_Z21rv3028_set_offset_RAMj+0x6>
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	20 e1       	ldi	r18, 0x10	; 16
    4ffe:	2a 83       	std	Y+2, r18	; 0x02
    5000:	9c 01       	movw	r18, r24
    5002:	36 95       	lsr	r19
    5004:	27 95       	ror	r18
    5006:	29 83       	std	Y+1, r18	; 0x01
    5008:	80 ff       	sbrs	r24, 0
    500a:	02 c0       	rjmp	.+4      	; 0x5010 <_Z21rv3028_set_offset_RAMj+0x1e>
    500c:	80 e9       	ldi	r24, 0x90	; 144
    500e:	8a 83       	std	Y+2, r24	; 0x02
    5010:	22 e0       	ldi	r18, 0x02	; 2
    5012:	ae 01       	movw	r20, r28
    5014:	4f 5f       	subi	r20, 0xFF	; 255
    5016:	5f 4f       	sbci	r21, 0xFF	; 255
    5018:	66 e3       	ldi	r22, 0x36	; 54
    501a:	84 ea       	ldi	r24, 0xA4	; 164
    501c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z16i2c_device_writehhPhh>
    5020:	0f 90       	pop	r0
    5022:	0f 90       	pop	r0
    5024:	df 91       	pop	r29
    5026:	cf 91       	pop	r28
    5028:	08 95       	ret

0000502a <_Z18waitForEEPROMReadyv>:
    502a:	cf 93       	push	r28
    502c:	df 93       	push	r29
    502e:	1f 92       	push	r1
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	89 83       	std	Y+1, r24	; 0x01
    5038:	21 e0       	ldi	r18, 0x01	; 1
    503a:	ae 01       	movw	r20, r28
    503c:	4f 5f       	subi	r20, 0xFF	; 255
    503e:	5f 4f       	sbci	r21, 0xFF	; 255
    5040:	6e e0       	ldi	r22, 0x0E	; 14
    5042:	84 ea       	ldi	r24, 0xA4	; 164
    5044:	0e 94 02 08 	call	0x1004	; 0x1004 <_Z15i2c_device_readhhPhh>
    5048:	81 11       	cpse	r24, r1
    504a:	07 c0       	rjmp	.+14     	; 0x505a <_Z18waitForEEPROMReadyv+0x30>
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	80 78       	andi	r24, 0x80	; 128
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	81 11       	cpse	r24, r1
    5054:	f1 cf       	rjmp	.-30     	; 0x5038 <_Z18waitForEEPROMReadyv+0xe>
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	03 c0       	rjmp	.+6      	; 0x5060 <_Z18waitForEEPROMReadyv+0x36>
    505a:	89 81       	ldd	r24, Y+1	; 0x01
    505c:	88 23       	and	r24, r24
    505e:	d9 f3       	breq	.-10     	; 0x5056 <_Z18waitForEEPROMReadyv+0x2c>
    5060:	0f 90       	pop	r0
    5062:	df 91       	pop	r29
    5064:	cf 91       	pop	r28
    5066:	08 95       	ret

00005068 <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    5068:	cf 93       	push	r28
    506a:	df 93       	push	r29
    506c:	1f 92       	push	r1
    506e:	cd b7       	in	r28, 0x3d	; 61
    5070:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    5072:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    5074:	21 e0       	ldi	r18, 0x01	; 1
    5076:	ae 01       	movw	r20, r28
    5078:	4f 5f       	subi	r20, 0xFF	; 255
    507a:	5f 4f       	sbci	r21, 0xFF	; 255
    507c:	67 e2       	ldi	r22, 0x27	; 39
    507e:	84 ea       	ldi	r24, 0xA4	; 164
    5080:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    5084:	0e 94 15 28 	call	0x502a	; 0x502a <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    5088:	82 e1       	ldi	r24, 0x12	; 18
    508a:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    508c:	21 e0       	ldi	r18, 0x01	; 1
    508e:	ae 01       	movw	r20, r28
    5090:	4f 5f       	subi	r20, 0xFF	; 255
    5092:	5f 4f       	sbci	r21, 0xFF	; 255
    5094:	67 e2       	ldi	r22, 0x27	; 39
    5096:	84 ea       	ldi	r24, 0xA4	; 164
    5098:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    509c:	0e 94 15 28 	call	0x502a	; 0x502a <_Z18waitForEEPROMReadyv>
	}
    50a0:	0f 90       	pop	r0
    50a2:	df 91       	pop	r29
    50a4:	cf 91       	pop	r28
    50a6:	08 95       	ret

000050a8 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	00 d0       	rcall	.+0      	; 0x50ae <_Z21rv3028_get_offset_RAMv+0x6>
    50ae:	cd b7       	in	r28, 0x3d	; 61
    50b0:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    50b2:	0e 94 34 28 	call	0x5068	; 0x5068 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    50b6:	22 e0       	ldi	r18, 0x02	; 2
    50b8:	ae 01       	movw	r20, r28
    50ba:	4f 5f       	subi	r20, 0xFF	; 255
    50bc:	5f 4f       	sbci	r21, 0xFF	; 255
    50be:	66 e3       	ldi	r22, 0x36	; 54
    50c0:	84 ea       	ldi	r24, 0xA4	; 164
    50c2:	0e 94 02 08 	call	0x1004	; 0x1004 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    50c6:	89 81       	ldd	r24, Y+1	; 0x01
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    50ce:	2a 81       	ldd	r18, Y+2	; 0x02
    50d0:	22 23       	and	r18, r18
    50d2:	0c f4       	brge	.+2      	; 0x50d6 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    50d4:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    50d6:	0f 90       	pop	r0
    50d8:	0f 90       	pop	r0
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	08 95       	ret

000050e0 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    50e0:	cf 93       	push	r28
    50e2:	df 93       	push	r29
    50e4:	00 d0       	rcall	.+0      	; 0x50e6 <_Z13rv3028_1s_sqwv+0x6>
    50e6:	cd b7       	in	r28, 0x3d	; 61
    50e8:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    50ea:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    50ec:	1a 82       	std	Y+2, r1	; 0x02
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY

			refreshRAMfromEEPROM();
    50ee:	0e 94 34 28 	call	0x5068	; 0x5068 <_Z20refreshRAMfromEEPROMv>

			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY_DEBUG
/* End debugging */

			if(!status)
    50f2:	89 81       	ldd	r24, Y+1	; 0x01
    50f4:	81 11       	cpse	r24, r1
    50f6:	0c c0       	rjmp	.+24     	; 0x5110 <_Z13rv3028_1s_sqwv+0x30>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    50f8:	21 e0       	ldi	r18, 0x01	; 1
    50fa:	ae 01       	movw	r20, r28
    50fc:	4f 5f       	subi	r20, 0xFF	; 255
    50fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5100:	6e e0       	ldi	r22, 0x0E	; 14
    5102:	84 ea       	ldi	r24, 0xA4	; 164
    5104:	0e 94 02 08 	call	0x1004	; 0x1004 <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	8f 76       	andi	r24, 0x6F	; 111
    510c:	89 83       	std	Y+1, r24	; 0x01
    510e:	02 c0       	rjmp	.+4      	; 0x5114 <_Z13rv3028_1s_sqwv+0x34>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    5110:	80 e8       	ldi	r24, 0x80	; 128
    5112:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    5114:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    5116:	21 e0       	ldi	r18, 0x01	; 1
    5118:	ae 01       	movw	r20, r28
    511a:	4e 5f       	subi	r20, 0xFE	; 254
    511c:	5f 4f       	sbci	r21, 0xFF	; 255
    511e:	6e e0       	ldi	r22, 0x0E	; 14
    5120:	84 ea       	ldi	r24, 0xA4	; 164
    5122:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z16i2c_device_writehhPhh>

			return(status);
		}
    5126:	89 81       	ldd	r24, Y+1	; 0x01
    5128:	0f 90       	pop	r0
    512a:	0f 90       	pop	r0
    512c:	df 91       	pop	r29
    512e:	cf 91       	pop	r28
    5130:	08 95       	ret

00005132 <__subsf3>:
    5132:	50 58       	subi	r21, 0x80	; 128

00005134 <__addsf3>:
    5134:	bb 27       	eor	r27, r27
    5136:	aa 27       	eor	r26, r26
    5138:	0e 94 b1 28 	call	0x5162	; 0x5162 <__addsf3x>
    513c:	0c 94 5b 2a 	jmp	0x54b6	; 0x54b6 <__fp_round>
    5140:	0e 94 22 2a 	call	0x5444	; 0x5444 <__fp_pscA>
    5144:	38 f0       	brcs	.+14     	; 0x5154 <__addsf3+0x20>
    5146:	0e 94 29 2a 	call	0x5452	; 0x5452 <__fp_pscB>
    514a:	20 f0       	brcs	.+8      	; 0x5154 <__addsf3+0x20>
    514c:	39 f4       	brne	.+14     	; 0x515c <__addsf3+0x28>
    514e:	9f 3f       	cpi	r25, 0xFF	; 255
    5150:	19 f4       	brne	.+6      	; 0x5158 <__addsf3+0x24>
    5152:	26 f4       	brtc	.+8      	; 0x515c <__addsf3+0x28>
    5154:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>
    5158:	0e f4       	brtc	.+2      	; 0x515c <__addsf3+0x28>
    515a:	e0 95       	com	r30
    515c:	e7 fb       	bst	r30, 7
    515e:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>

00005162 <__addsf3x>:
    5162:	e9 2f       	mov	r30, r25
    5164:	0e 94 80 2a 	call	0x5500	; 0x5500 <__fp_split3>
    5168:	58 f3       	brcs	.-42     	; 0x5140 <__addsf3+0xc>
    516a:	ba 17       	cp	r27, r26
    516c:	62 07       	cpc	r22, r18
    516e:	73 07       	cpc	r23, r19
    5170:	84 07       	cpc	r24, r20
    5172:	95 07       	cpc	r25, r21
    5174:	20 f0       	brcs	.+8      	; 0x517e <__addsf3x+0x1c>
    5176:	79 f4       	brne	.+30     	; 0x5196 <__addsf3x+0x34>
    5178:	a6 f5       	brtc	.+104    	; 0x51e2 <__addsf3x+0x80>
    517a:	0c 94 a2 2a 	jmp	0x5544	; 0x5544 <__fp_zero>
    517e:	0e f4       	brtc	.+2      	; 0x5182 <__addsf3x+0x20>
    5180:	e0 95       	com	r30
    5182:	0b 2e       	mov	r0, r27
    5184:	ba 2f       	mov	r27, r26
    5186:	a0 2d       	mov	r26, r0
    5188:	0b 01       	movw	r0, r22
    518a:	b9 01       	movw	r22, r18
    518c:	90 01       	movw	r18, r0
    518e:	0c 01       	movw	r0, r24
    5190:	ca 01       	movw	r24, r20
    5192:	a0 01       	movw	r20, r0
    5194:	11 24       	eor	r1, r1
    5196:	ff 27       	eor	r31, r31
    5198:	59 1b       	sub	r21, r25
    519a:	99 f0       	breq	.+38     	; 0x51c2 <__addsf3x+0x60>
    519c:	59 3f       	cpi	r21, 0xF9	; 249
    519e:	50 f4       	brcc	.+20     	; 0x51b4 <__addsf3x+0x52>
    51a0:	50 3e       	cpi	r21, 0xE0	; 224
    51a2:	68 f1       	brcs	.+90     	; 0x51fe <__addsf3x+0x9c>
    51a4:	1a 16       	cp	r1, r26
    51a6:	f0 40       	sbci	r31, 0x00	; 0
    51a8:	a2 2f       	mov	r26, r18
    51aa:	23 2f       	mov	r18, r19
    51ac:	34 2f       	mov	r19, r20
    51ae:	44 27       	eor	r20, r20
    51b0:	58 5f       	subi	r21, 0xF8	; 248
    51b2:	f3 cf       	rjmp	.-26     	; 0x519a <__addsf3x+0x38>
    51b4:	46 95       	lsr	r20
    51b6:	37 95       	ror	r19
    51b8:	27 95       	ror	r18
    51ba:	a7 95       	ror	r26
    51bc:	f0 40       	sbci	r31, 0x00	; 0
    51be:	53 95       	inc	r21
    51c0:	c9 f7       	brne	.-14     	; 0x51b4 <__addsf3x+0x52>
    51c2:	7e f4       	brtc	.+30     	; 0x51e2 <__addsf3x+0x80>
    51c4:	1f 16       	cp	r1, r31
    51c6:	ba 0b       	sbc	r27, r26
    51c8:	62 0b       	sbc	r22, r18
    51ca:	73 0b       	sbc	r23, r19
    51cc:	84 0b       	sbc	r24, r20
    51ce:	ba f0       	brmi	.+46     	; 0x51fe <__addsf3x+0x9c>
    51d0:	91 50       	subi	r25, 0x01	; 1
    51d2:	a1 f0       	breq	.+40     	; 0x51fc <__addsf3x+0x9a>
    51d4:	ff 0f       	add	r31, r31
    51d6:	bb 1f       	adc	r27, r27
    51d8:	66 1f       	adc	r22, r22
    51da:	77 1f       	adc	r23, r23
    51dc:	88 1f       	adc	r24, r24
    51de:	c2 f7       	brpl	.-16     	; 0x51d0 <__addsf3x+0x6e>
    51e0:	0e c0       	rjmp	.+28     	; 0x51fe <__addsf3x+0x9c>
    51e2:	ba 0f       	add	r27, r26
    51e4:	62 1f       	adc	r22, r18
    51e6:	73 1f       	adc	r23, r19
    51e8:	84 1f       	adc	r24, r20
    51ea:	48 f4       	brcc	.+18     	; 0x51fe <__addsf3x+0x9c>
    51ec:	87 95       	ror	r24
    51ee:	77 95       	ror	r23
    51f0:	67 95       	ror	r22
    51f2:	b7 95       	ror	r27
    51f4:	f7 95       	ror	r31
    51f6:	9e 3f       	cpi	r25, 0xFE	; 254
    51f8:	08 f0       	brcs	.+2      	; 0x51fc <__addsf3x+0x9a>
    51fa:	b0 cf       	rjmp	.-160    	; 0x515c <__addsf3+0x28>
    51fc:	93 95       	inc	r25
    51fe:	88 0f       	add	r24, r24
    5200:	08 f0       	brcs	.+2      	; 0x5204 <__addsf3x+0xa2>
    5202:	99 27       	eor	r25, r25
    5204:	ee 0f       	add	r30, r30
    5206:	97 95       	ror	r25
    5208:	87 95       	ror	r24
    520a:	08 95       	ret

0000520c <__cmpsf2>:
    520c:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__fp_cmp>
    5210:	08 f4       	brcc	.+2      	; 0x5214 <__cmpsf2+0x8>
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	08 95       	ret

00005216 <cos>:
    5216:	0e 94 32 2a 	call	0x5464	; 0x5464 <__fp_rempio2>
    521a:	e3 95       	inc	r30
    521c:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <__fp_sinus>

00005220 <__divsf3>:
    5220:	0e 94 24 29 	call	0x5248	; 0x5248 <__divsf3x>
    5224:	0c 94 5b 2a 	jmp	0x54b6	; 0x54b6 <__fp_round>
    5228:	0e 94 29 2a 	call	0x5452	; 0x5452 <__fp_pscB>
    522c:	58 f0       	brcs	.+22     	; 0x5244 <__divsf3+0x24>
    522e:	0e 94 22 2a 	call	0x5444	; 0x5444 <__fp_pscA>
    5232:	40 f0       	brcs	.+16     	; 0x5244 <__divsf3+0x24>
    5234:	29 f4       	brne	.+10     	; 0x5240 <__divsf3+0x20>
    5236:	5f 3f       	cpi	r21, 0xFF	; 255
    5238:	29 f0       	breq	.+10     	; 0x5244 <__divsf3+0x24>
    523a:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    523e:	51 11       	cpse	r21, r1
    5240:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__fp_szero>
    5244:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>

00005248 <__divsf3x>:
    5248:	0e 94 80 2a 	call	0x5500	; 0x5500 <__fp_split3>
    524c:	68 f3       	brcs	.-38     	; 0x5228 <__divsf3+0x8>

0000524e <__divsf3_pse>:
    524e:	99 23       	and	r25, r25
    5250:	b1 f3       	breq	.-20     	; 0x523e <__divsf3+0x1e>
    5252:	55 23       	and	r21, r21
    5254:	91 f3       	breq	.-28     	; 0x523a <__divsf3+0x1a>
    5256:	95 1b       	sub	r25, r21
    5258:	55 0b       	sbc	r21, r21
    525a:	bb 27       	eor	r27, r27
    525c:	aa 27       	eor	r26, r26
    525e:	62 17       	cp	r22, r18
    5260:	73 07       	cpc	r23, r19
    5262:	84 07       	cpc	r24, r20
    5264:	38 f0       	brcs	.+14     	; 0x5274 <__divsf3_pse+0x26>
    5266:	9f 5f       	subi	r25, 0xFF	; 255
    5268:	5f 4f       	sbci	r21, 0xFF	; 255
    526a:	22 0f       	add	r18, r18
    526c:	33 1f       	adc	r19, r19
    526e:	44 1f       	adc	r20, r20
    5270:	aa 1f       	adc	r26, r26
    5272:	a9 f3       	breq	.-22     	; 0x525e <__divsf3_pse+0x10>
    5274:	35 d0       	rcall	.+106    	; 0x52e0 <__divsf3_pse+0x92>
    5276:	0e 2e       	mov	r0, r30
    5278:	3a f0       	brmi	.+14     	; 0x5288 <__divsf3_pse+0x3a>
    527a:	e0 e8       	ldi	r30, 0x80	; 128
    527c:	32 d0       	rcall	.+100    	; 0x52e2 <__divsf3_pse+0x94>
    527e:	91 50       	subi	r25, 0x01	; 1
    5280:	50 40       	sbci	r21, 0x00	; 0
    5282:	e6 95       	lsr	r30
    5284:	00 1c       	adc	r0, r0
    5286:	ca f7       	brpl	.-14     	; 0x527a <__divsf3_pse+0x2c>
    5288:	2b d0       	rcall	.+86     	; 0x52e0 <__divsf3_pse+0x92>
    528a:	fe 2f       	mov	r31, r30
    528c:	29 d0       	rcall	.+82     	; 0x52e0 <__divsf3_pse+0x92>
    528e:	66 0f       	add	r22, r22
    5290:	77 1f       	adc	r23, r23
    5292:	88 1f       	adc	r24, r24
    5294:	bb 1f       	adc	r27, r27
    5296:	26 17       	cp	r18, r22
    5298:	37 07       	cpc	r19, r23
    529a:	48 07       	cpc	r20, r24
    529c:	ab 07       	cpc	r26, r27
    529e:	b0 e8       	ldi	r27, 0x80	; 128
    52a0:	09 f0       	breq	.+2      	; 0x52a4 <__divsf3_pse+0x56>
    52a2:	bb 0b       	sbc	r27, r27
    52a4:	80 2d       	mov	r24, r0
    52a6:	bf 01       	movw	r22, r30
    52a8:	ff 27       	eor	r31, r31
    52aa:	93 58       	subi	r25, 0x83	; 131
    52ac:	5f 4f       	sbci	r21, 0xFF	; 255
    52ae:	3a f0       	brmi	.+14     	; 0x52be <__divsf3_pse+0x70>
    52b0:	9e 3f       	cpi	r25, 0xFE	; 254
    52b2:	51 05       	cpc	r21, r1
    52b4:	78 f0       	brcs	.+30     	; 0x52d4 <__divsf3_pse+0x86>
    52b6:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    52ba:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__fp_szero>
    52be:	5f 3f       	cpi	r21, 0xFF	; 255
    52c0:	e4 f3       	brlt	.-8      	; 0x52ba <__divsf3_pse+0x6c>
    52c2:	98 3e       	cpi	r25, 0xE8	; 232
    52c4:	d4 f3       	brlt	.-12     	; 0x52ba <__divsf3_pse+0x6c>
    52c6:	86 95       	lsr	r24
    52c8:	77 95       	ror	r23
    52ca:	67 95       	ror	r22
    52cc:	b7 95       	ror	r27
    52ce:	f7 95       	ror	r31
    52d0:	9f 5f       	subi	r25, 0xFF	; 255
    52d2:	c9 f7       	brne	.-14     	; 0x52c6 <__divsf3_pse+0x78>
    52d4:	88 0f       	add	r24, r24
    52d6:	91 1d       	adc	r25, r1
    52d8:	96 95       	lsr	r25
    52da:	87 95       	ror	r24
    52dc:	97 f9       	bld	r25, 7
    52de:	08 95       	ret
    52e0:	e1 e0       	ldi	r30, 0x01	; 1
    52e2:	66 0f       	add	r22, r22
    52e4:	77 1f       	adc	r23, r23
    52e6:	88 1f       	adc	r24, r24
    52e8:	bb 1f       	adc	r27, r27
    52ea:	62 17       	cp	r22, r18
    52ec:	73 07       	cpc	r23, r19
    52ee:	84 07       	cpc	r24, r20
    52f0:	ba 07       	cpc	r27, r26
    52f2:	20 f0       	brcs	.+8      	; 0x52fc <__divsf3_pse+0xae>
    52f4:	62 1b       	sub	r22, r18
    52f6:	73 0b       	sbc	r23, r19
    52f8:	84 0b       	sbc	r24, r20
    52fa:	ba 0b       	sbc	r27, r26
    52fc:	ee 1f       	adc	r30, r30
    52fe:	88 f7       	brcc	.-30     	; 0x52e2 <__divsf3_pse+0x94>
    5300:	e0 95       	com	r30
    5302:	08 95       	ret

00005304 <__fixsfsi>:
    5304:	0e 94 89 29 	call	0x5312	; 0x5312 <__fixunssfsi>
    5308:	68 94       	set
    530a:	b1 11       	cpse	r27, r1
    530c:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__fp_szero>
    5310:	08 95       	ret

00005312 <__fixunssfsi>:
    5312:	0e 94 88 2a 	call	0x5510	; 0x5510 <__fp_splitA>
    5316:	88 f0       	brcs	.+34     	; 0x533a <__fixunssfsi+0x28>
    5318:	9f 57       	subi	r25, 0x7F	; 127
    531a:	98 f0       	brcs	.+38     	; 0x5342 <__fixunssfsi+0x30>
    531c:	b9 2f       	mov	r27, r25
    531e:	99 27       	eor	r25, r25
    5320:	b7 51       	subi	r27, 0x17	; 23
    5322:	b0 f0       	brcs	.+44     	; 0x5350 <__fixunssfsi+0x3e>
    5324:	e1 f0       	breq	.+56     	; 0x535e <__fixunssfsi+0x4c>
    5326:	66 0f       	add	r22, r22
    5328:	77 1f       	adc	r23, r23
    532a:	88 1f       	adc	r24, r24
    532c:	99 1f       	adc	r25, r25
    532e:	1a f0       	brmi	.+6      	; 0x5336 <__fixunssfsi+0x24>
    5330:	ba 95       	dec	r27
    5332:	c9 f7       	brne	.-14     	; 0x5326 <__fixunssfsi+0x14>
    5334:	14 c0       	rjmp	.+40     	; 0x535e <__fixunssfsi+0x4c>
    5336:	b1 30       	cpi	r27, 0x01	; 1
    5338:	91 f0       	breq	.+36     	; 0x535e <__fixunssfsi+0x4c>
    533a:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__fp_zero>
    533e:	b1 e0       	ldi	r27, 0x01	; 1
    5340:	08 95       	ret
    5342:	0c 94 a2 2a 	jmp	0x5544	; 0x5544 <__fp_zero>
    5346:	67 2f       	mov	r22, r23
    5348:	78 2f       	mov	r23, r24
    534a:	88 27       	eor	r24, r24
    534c:	b8 5f       	subi	r27, 0xF8	; 248
    534e:	39 f0       	breq	.+14     	; 0x535e <__fixunssfsi+0x4c>
    5350:	b9 3f       	cpi	r27, 0xF9	; 249
    5352:	cc f3       	brlt	.-14     	; 0x5346 <__fixunssfsi+0x34>
    5354:	86 95       	lsr	r24
    5356:	77 95       	ror	r23
    5358:	67 95       	ror	r22
    535a:	b3 95       	inc	r27
    535c:	d9 f7       	brne	.-10     	; 0x5354 <__fixunssfsi+0x42>
    535e:	3e f4       	brtc	.+14     	; 0x536e <__fixunssfsi+0x5c>
    5360:	90 95       	com	r25
    5362:	80 95       	com	r24
    5364:	70 95       	com	r23
    5366:	61 95       	neg	r22
    5368:	7f 4f       	sbci	r23, 0xFF	; 255
    536a:	8f 4f       	sbci	r24, 0xFF	; 255
    536c:	9f 4f       	sbci	r25, 0xFF	; 255
    536e:	08 95       	ret

00005370 <__floatunsisf>:
    5370:	e8 94       	clt
    5372:	09 c0       	rjmp	.+18     	; 0x5386 <__floatsisf+0x12>

00005374 <__floatsisf>:
    5374:	97 fb       	bst	r25, 7
    5376:	3e f4       	brtc	.+14     	; 0x5386 <__floatsisf+0x12>
    5378:	90 95       	com	r25
    537a:	80 95       	com	r24
    537c:	70 95       	com	r23
    537e:	61 95       	neg	r22
    5380:	7f 4f       	sbci	r23, 0xFF	; 255
    5382:	8f 4f       	sbci	r24, 0xFF	; 255
    5384:	9f 4f       	sbci	r25, 0xFF	; 255
    5386:	99 23       	and	r25, r25
    5388:	a9 f0       	breq	.+42     	; 0x53b4 <__floatsisf+0x40>
    538a:	f9 2f       	mov	r31, r25
    538c:	96 e9       	ldi	r25, 0x96	; 150
    538e:	bb 27       	eor	r27, r27
    5390:	93 95       	inc	r25
    5392:	f6 95       	lsr	r31
    5394:	87 95       	ror	r24
    5396:	77 95       	ror	r23
    5398:	67 95       	ror	r22
    539a:	b7 95       	ror	r27
    539c:	f1 11       	cpse	r31, r1
    539e:	f8 cf       	rjmp	.-16     	; 0x5390 <__floatsisf+0x1c>
    53a0:	fa f4       	brpl	.+62     	; 0x53e0 <__floatsisf+0x6c>
    53a2:	bb 0f       	add	r27, r27
    53a4:	11 f4       	brne	.+4      	; 0x53aa <__floatsisf+0x36>
    53a6:	60 ff       	sbrs	r22, 0
    53a8:	1b c0       	rjmp	.+54     	; 0x53e0 <__floatsisf+0x6c>
    53aa:	6f 5f       	subi	r22, 0xFF	; 255
    53ac:	7f 4f       	sbci	r23, 0xFF	; 255
    53ae:	8f 4f       	sbci	r24, 0xFF	; 255
    53b0:	9f 4f       	sbci	r25, 0xFF	; 255
    53b2:	16 c0       	rjmp	.+44     	; 0x53e0 <__floatsisf+0x6c>
    53b4:	88 23       	and	r24, r24
    53b6:	11 f0       	breq	.+4      	; 0x53bc <__floatsisf+0x48>
    53b8:	96 e9       	ldi	r25, 0x96	; 150
    53ba:	11 c0       	rjmp	.+34     	; 0x53de <__floatsisf+0x6a>
    53bc:	77 23       	and	r23, r23
    53be:	21 f0       	breq	.+8      	; 0x53c8 <__floatsisf+0x54>
    53c0:	9e e8       	ldi	r25, 0x8E	; 142
    53c2:	87 2f       	mov	r24, r23
    53c4:	76 2f       	mov	r23, r22
    53c6:	05 c0       	rjmp	.+10     	; 0x53d2 <__floatsisf+0x5e>
    53c8:	66 23       	and	r22, r22
    53ca:	71 f0       	breq	.+28     	; 0x53e8 <__floatsisf+0x74>
    53cc:	96 e8       	ldi	r25, 0x86	; 134
    53ce:	86 2f       	mov	r24, r22
    53d0:	70 e0       	ldi	r23, 0x00	; 0
    53d2:	60 e0       	ldi	r22, 0x00	; 0
    53d4:	2a f0       	brmi	.+10     	; 0x53e0 <__floatsisf+0x6c>
    53d6:	9a 95       	dec	r25
    53d8:	66 0f       	add	r22, r22
    53da:	77 1f       	adc	r23, r23
    53dc:	88 1f       	adc	r24, r24
    53de:	da f7       	brpl	.-10     	; 0x53d6 <__floatsisf+0x62>
    53e0:	88 0f       	add	r24, r24
    53e2:	96 95       	lsr	r25
    53e4:	87 95       	ror	r24
    53e6:	97 f9       	bld	r25, 7
    53e8:	08 95       	ret

000053ea <__fp_cmp>:
    53ea:	99 0f       	add	r25, r25
    53ec:	00 08       	sbc	r0, r0
    53ee:	55 0f       	add	r21, r21
    53f0:	aa 0b       	sbc	r26, r26
    53f2:	e0 e8       	ldi	r30, 0x80	; 128
    53f4:	fe ef       	ldi	r31, 0xFE	; 254
    53f6:	16 16       	cp	r1, r22
    53f8:	17 06       	cpc	r1, r23
    53fa:	e8 07       	cpc	r30, r24
    53fc:	f9 07       	cpc	r31, r25
    53fe:	c0 f0       	brcs	.+48     	; 0x5430 <__fp_cmp+0x46>
    5400:	12 16       	cp	r1, r18
    5402:	13 06       	cpc	r1, r19
    5404:	e4 07       	cpc	r30, r20
    5406:	f5 07       	cpc	r31, r21
    5408:	98 f0       	brcs	.+38     	; 0x5430 <__fp_cmp+0x46>
    540a:	62 1b       	sub	r22, r18
    540c:	73 0b       	sbc	r23, r19
    540e:	84 0b       	sbc	r24, r20
    5410:	95 0b       	sbc	r25, r21
    5412:	39 f4       	brne	.+14     	; 0x5422 <__fp_cmp+0x38>
    5414:	0a 26       	eor	r0, r26
    5416:	61 f0       	breq	.+24     	; 0x5430 <__fp_cmp+0x46>
    5418:	23 2b       	or	r18, r19
    541a:	24 2b       	or	r18, r20
    541c:	25 2b       	or	r18, r21
    541e:	21 f4       	brne	.+8      	; 0x5428 <__fp_cmp+0x3e>
    5420:	08 95       	ret
    5422:	0a 26       	eor	r0, r26
    5424:	09 f4       	brne	.+2      	; 0x5428 <__fp_cmp+0x3e>
    5426:	a1 40       	sbci	r26, 0x01	; 1
    5428:	a6 95       	lsr	r26
    542a:	8f ef       	ldi	r24, 0xFF	; 255
    542c:	81 1d       	adc	r24, r1
    542e:	81 1d       	adc	r24, r1
    5430:	08 95       	ret

00005432 <__fp_inf>:
    5432:	97 f9       	bld	r25, 7
    5434:	9f 67       	ori	r25, 0x7F	; 127
    5436:	80 e8       	ldi	r24, 0x80	; 128
    5438:	70 e0       	ldi	r23, 0x00	; 0
    543a:	60 e0       	ldi	r22, 0x00	; 0
    543c:	08 95       	ret

0000543e <__fp_nan>:
    543e:	9f ef       	ldi	r25, 0xFF	; 255
    5440:	80 ec       	ldi	r24, 0xC0	; 192
    5442:	08 95       	ret

00005444 <__fp_pscA>:
    5444:	00 24       	eor	r0, r0
    5446:	0a 94       	dec	r0
    5448:	16 16       	cp	r1, r22
    544a:	17 06       	cpc	r1, r23
    544c:	18 06       	cpc	r1, r24
    544e:	09 06       	cpc	r0, r25
    5450:	08 95       	ret

00005452 <__fp_pscB>:
    5452:	00 24       	eor	r0, r0
    5454:	0a 94       	dec	r0
    5456:	12 16       	cp	r1, r18
    5458:	13 06       	cpc	r1, r19
    545a:	14 06       	cpc	r1, r20
    545c:	05 06       	cpc	r0, r21
    545e:	08 95       	ret
    5460:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>

00005464 <__fp_rempio2>:
    5464:	0e 94 88 2a 	call	0x5510	; 0x5510 <__fp_splitA>
    5468:	d8 f3       	brcs	.-10     	; 0x5460 <__fp_pscB+0xe>
    546a:	e8 94       	clt
    546c:	e0 e0       	ldi	r30, 0x00	; 0
    546e:	bb 27       	eor	r27, r27
    5470:	9f 57       	subi	r25, 0x7F	; 127
    5472:	f0 f0       	brcs	.+60     	; 0x54b0 <__fp_rempio2+0x4c>
    5474:	2a ed       	ldi	r18, 0xDA	; 218
    5476:	3f e0       	ldi	r19, 0x0F	; 15
    5478:	49 ec       	ldi	r20, 0xC9	; 201
    547a:	06 c0       	rjmp	.+12     	; 0x5488 <__fp_rempio2+0x24>
    547c:	ee 0f       	add	r30, r30
    547e:	bb 0f       	add	r27, r27
    5480:	66 1f       	adc	r22, r22
    5482:	77 1f       	adc	r23, r23
    5484:	88 1f       	adc	r24, r24
    5486:	28 f0       	brcs	.+10     	; 0x5492 <__fp_rempio2+0x2e>
    5488:	b2 3a       	cpi	r27, 0xA2	; 162
    548a:	62 07       	cpc	r22, r18
    548c:	73 07       	cpc	r23, r19
    548e:	84 07       	cpc	r24, r20
    5490:	28 f0       	brcs	.+10     	; 0x549c <__fp_rempio2+0x38>
    5492:	b2 5a       	subi	r27, 0xA2	; 162
    5494:	62 0b       	sbc	r22, r18
    5496:	73 0b       	sbc	r23, r19
    5498:	84 0b       	sbc	r24, r20
    549a:	e3 95       	inc	r30
    549c:	9a 95       	dec	r25
    549e:	72 f7       	brpl	.-36     	; 0x547c <__fp_rempio2+0x18>
    54a0:	80 38       	cpi	r24, 0x80	; 128
    54a2:	30 f4       	brcc	.+12     	; 0x54b0 <__fp_rempio2+0x4c>
    54a4:	9a 95       	dec	r25
    54a6:	bb 0f       	add	r27, r27
    54a8:	66 1f       	adc	r22, r22
    54aa:	77 1f       	adc	r23, r23
    54ac:	88 1f       	adc	r24, r24
    54ae:	d2 f7       	brpl	.-12     	; 0x54a4 <__fp_rempio2+0x40>
    54b0:	90 48       	sbci	r25, 0x80	; 128
    54b2:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__fp_mpack_finite>

000054b6 <__fp_round>:
    54b6:	09 2e       	mov	r0, r25
    54b8:	03 94       	inc	r0
    54ba:	00 0c       	add	r0, r0
    54bc:	11 f4       	brne	.+4      	; 0x54c2 <__fp_round+0xc>
    54be:	88 23       	and	r24, r24
    54c0:	52 f0       	brmi	.+20     	; 0x54d6 <__fp_round+0x20>
    54c2:	bb 0f       	add	r27, r27
    54c4:	40 f4       	brcc	.+16     	; 0x54d6 <__fp_round+0x20>
    54c6:	bf 2b       	or	r27, r31
    54c8:	11 f4       	brne	.+4      	; 0x54ce <__fp_round+0x18>
    54ca:	60 ff       	sbrs	r22, 0
    54cc:	04 c0       	rjmp	.+8      	; 0x54d6 <__fp_round+0x20>
    54ce:	6f 5f       	subi	r22, 0xFF	; 255
    54d0:	7f 4f       	sbci	r23, 0xFF	; 255
    54d2:	8f 4f       	sbci	r24, 0xFF	; 255
    54d4:	9f 4f       	sbci	r25, 0xFF	; 255
    54d6:	08 95       	ret

000054d8 <__fp_sinus>:
    54d8:	ef 93       	push	r30
    54da:	e0 ff       	sbrs	r30, 0
    54dc:	07 c0       	rjmp	.+14     	; 0x54ec <__fp_sinus+0x14>
    54de:	a2 ea       	ldi	r26, 0xA2	; 162
    54e0:	2a ed       	ldi	r18, 0xDA	; 218
    54e2:	3f e0       	ldi	r19, 0x0F	; 15
    54e4:	49 ec       	ldi	r20, 0xC9	; 201
    54e6:	5f eb       	ldi	r21, 0xBF	; 191
    54e8:	0e 94 b1 28 	call	0x5162	; 0x5162 <__addsf3x>
    54ec:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <__fp_round>
    54f0:	0f 90       	pop	r0
    54f2:	03 94       	inc	r0
    54f4:	01 fc       	sbrc	r0, 1
    54f6:	90 58       	subi	r25, 0x80	; 128
    54f8:	e0 ee       	ldi	r30, 0xE0	; 224
    54fa:	f1 e0       	ldi	r31, 0x01	; 1
    54fc:	0c 94 68 2b 	jmp	0x56d0	; 0x56d0 <__fp_powsodd>

00005500 <__fp_split3>:
    5500:	57 fd       	sbrc	r21, 7
    5502:	90 58       	subi	r25, 0x80	; 128
    5504:	44 0f       	add	r20, r20
    5506:	55 1f       	adc	r21, r21
    5508:	59 f0       	breq	.+22     	; 0x5520 <__fp_splitA+0x10>
    550a:	5f 3f       	cpi	r21, 0xFF	; 255
    550c:	71 f0       	breq	.+28     	; 0x552a <__fp_splitA+0x1a>
    550e:	47 95       	ror	r20

00005510 <__fp_splitA>:
    5510:	88 0f       	add	r24, r24
    5512:	97 fb       	bst	r25, 7
    5514:	99 1f       	adc	r25, r25
    5516:	61 f0       	breq	.+24     	; 0x5530 <__fp_splitA+0x20>
    5518:	9f 3f       	cpi	r25, 0xFF	; 255
    551a:	79 f0       	breq	.+30     	; 0x553a <__fp_splitA+0x2a>
    551c:	87 95       	ror	r24
    551e:	08 95       	ret
    5520:	12 16       	cp	r1, r18
    5522:	13 06       	cpc	r1, r19
    5524:	14 06       	cpc	r1, r20
    5526:	55 1f       	adc	r21, r21
    5528:	f2 cf       	rjmp	.-28     	; 0x550e <__fp_split3+0xe>
    552a:	46 95       	lsr	r20
    552c:	f1 df       	rcall	.-30     	; 0x5510 <__fp_splitA>
    552e:	08 c0       	rjmp	.+16     	; 0x5540 <__fp_splitA+0x30>
    5530:	16 16       	cp	r1, r22
    5532:	17 06       	cpc	r1, r23
    5534:	18 06       	cpc	r1, r24
    5536:	99 1f       	adc	r25, r25
    5538:	f1 cf       	rjmp	.-30     	; 0x551c <__fp_splitA+0xc>
    553a:	86 95       	lsr	r24
    553c:	71 05       	cpc	r23, r1
    553e:	61 05       	cpc	r22, r1
    5540:	08 94       	sec
    5542:	08 95       	ret

00005544 <__fp_zero>:
    5544:	e8 94       	clt

00005546 <__fp_szero>:
    5546:	bb 27       	eor	r27, r27
    5548:	66 27       	eor	r22, r22
    554a:	77 27       	eor	r23, r23
    554c:	cb 01       	movw	r24, r22
    554e:	97 f9       	bld	r25, 7
    5550:	08 95       	ret

00005552 <__gesf2>:
    5552:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__fp_cmp>
    5556:	08 f4       	brcc	.+2      	; 0x555a <__gesf2+0x8>
    5558:	8f ef       	ldi	r24, 0xFF	; 255
    555a:	08 95       	ret

0000555c <__mulsf3>:
    555c:	0e 94 c1 2a 	call	0x5582	; 0x5582 <__mulsf3x>
    5560:	0c 94 5b 2a 	jmp	0x54b6	; 0x54b6 <__fp_round>
    5564:	0e 94 22 2a 	call	0x5444	; 0x5444 <__fp_pscA>
    5568:	38 f0       	brcs	.+14     	; 0x5578 <__mulsf3+0x1c>
    556a:	0e 94 29 2a 	call	0x5452	; 0x5452 <__fp_pscB>
    556e:	20 f0       	brcs	.+8      	; 0x5578 <__mulsf3+0x1c>
    5570:	95 23       	and	r25, r21
    5572:	11 f0       	breq	.+4      	; 0x5578 <__mulsf3+0x1c>
    5574:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    5578:	0c 94 1f 2a 	jmp	0x543e	; 0x543e <__fp_nan>
    557c:	11 24       	eor	r1, r1
    557e:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__fp_szero>

00005582 <__mulsf3x>:
    5582:	0e 94 80 2a 	call	0x5500	; 0x5500 <__fp_split3>
    5586:	70 f3       	brcs	.-36     	; 0x5564 <__mulsf3+0x8>

00005588 <__mulsf3_pse>:
    5588:	95 9f       	mul	r25, r21
    558a:	c1 f3       	breq	.-16     	; 0x557c <__mulsf3+0x20>
    558c:	95 0f       	add	r25, r21
    558e:	50 e0       	ldi	r21, 0x00	; 0
    5590:	55 1f       	adc	r21, r21
    5592:	62 9f       	mul	r22, r18
    5594:	f0 01       	movw	r30, r0
    5596:	72 9f       	mul	r23, r18
    5598:	bb 27       	eor	r27, r27
    559a:	f0 0d       	add	r31, r0
    559c:	b1 1d       	adc	r27, r1
    559e:	63 9f       	mul	r22, r19
    55a0:	aa 27       	eor	r26, r26
    55a2:	f0 0d       	add	r31, r0
    55a4:	b1 1d       	adc	r27, r1
    55a6:	aa 1f       	adc	r26, r26
    55a8:	64 9f       	mul	r22, r20
    55aa:	66 27       	eor	r22, r22
    55ac:	b0 0d       	add	r27, r0
    55ae:	a1 1d       	adc	r26, r1
    55b0:	66 1f       	adc	r22, r22
    55b2:	82 9f       	mul	r24, r18
    55b4:	22 27       	eor	r18, r18
    55b6:	b0 0d       	add	r27, r0
    55b8:	a1 1d       	adc	r26, r1
    55ba:	62 1f       	adc	r22, r18
    55bc:	73 9f       	mul	r23, r19
    55be:	b0 0d       	add	r27, r0
    55c0:	a1 1d       	adc	r26, r1
    55c2:	62 1f       	adc	r22, r18
    55c4:	83 9f       	mul	r24, r19
    55c6:	a0 0d       	add	r26, r0
    55c8:	61 1d       	adc	r22, r1
    55ca:	22 1f       	adc	r18, r18
    55cc:	74 9f       	mul	r23, r20
    55ce:	33 27       	eor	r19, r19
    55d0:	a0 0d       	add	r26, r0
    55d2:	61 1d       	adc	r22, r1
    55d4:	23 1f       	adc	r18, r19
    55d6:	84 9f       	mul	r24, r20
    55d8:	60 0d       	add	r22, r0
    55da:	21 1d       	adc	r18, r1
    55dc:	82 2f       	mov	r24, r18
    55de:	76 2f       	mov	r23, r22
    55e0:	6a 2f       	mov	r22, r26
    55e2:	11 24       	eor	r1, r1
    55e4:	9f 57       	subi	r25, 0x7F	; 127
    55e6:	50 40       	sbci	r21, 0x00	; 0
    55e8:	9a f0       	brmi	.+38     	; 0x5610 <__mulsf3_pse+0x88>
    55ea:	f1 f0       	breq	.+60     	; 0x5628 <__mulsf3_pse+0xa0>
    55ec:	88 23       	and	r24, r24
    55ee:	4a f0       	brmi	.+18     	; 0x5602 <__mulsf3_pse+0x7a>
    55f0:	ee 0f       	add	r30, r30
    55f2:	ff 1f       	adc	r31, r31
    55f4:	bb 1f       	adc	r27, r27
    55f6:	66 1f       	adc	r22, r22
    55f8:	77 1f       	adc	r23, r23
    55fa:	88 1f       	adc	r24, r24
    55fc:	91 50       	subi	r25, 0x01	; 1
    55fe:	50 40       	sbci	r21, 0x00	; 0
    5600:	a9 f7       	brne	.-22     	; 0x55ec <__mulsf3_pse+0x64>
    5602:	9e 3f       	cpi	r25, 0xFE	; 254
    5604:	51 05       	cpc	r21, r1
    5606:	80 f0       	brcs	.+32     	; 0x5628 <__mulsf3_pse+0xa0>
    5608:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__fp_inf>
    560c:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__fp_szero>
    5610:	5f 3f       	cpi	r21, 0xFF	; 255
    5612:	e4 f3       	brlt	.-8      	; 0x560c <__mulsf3_pse+0x84>
    5614:	98 3e       	cpi	r25, 0xE8	; 232
    5616:	d4 f3       	brlt	.-12     	; 0x560c <__mulsf3_pse+0x84>
    5618:	86 95       	lsr	r24
    561a:	77 95       	ror	r23
    561c:	67 95       	ror	r22
    561e:	b7 95       	ror	r27
    5620:	f7 95       	ror	r31
    5622:	e7 95       	ror	r30
    5624:	9f 5f       	subi	r25, 0xFF	; 255
    5626:	c1 f7       	brne	.-16     	; 0x5618 <__mulsf3_pse+0x90>
    5628:	fe 2b       	or	r31, r30
    562a:	88 0f       	add	r24, r24
    562c:	91 1d       	adc	r25, r1
    562e:	96 95       	lsr	r25
    5630:	87 95       	ror	r24
    5632:	97 f9       	bld	r25, 7
    5634:	08 95       	ret

00005636 <round>:
    5636:	0e 94 88 2a 	call	0x5510	; 0x5510 <__fp_splitA>
    563a:	e8 f0       	brcs	.+58     	; 0x5676 <round+0x40>
    563c:	9e 37       	cpi	r25, 0x7E	; 126
    563e:	e8 f0       	brcs	.+58     	; 0x567a <round+0x44>
    5640:	96 39       	cpi	r25, 0x96	; 150
    5642:	b8 f4       	brcc	.+46     	; 0x5672 <round+0x3c>
    5644:	9e 38       	cpi	r25, 0x8E	; 142
    5646:	48 f4       	brcc	.+18     	; 0x565a <round+0x24>
    5648:	67 2f       	mov	r22, r23
    564a:	78 2f       	mov	r23, r24
    564c:	88 27       	eor	r24, r24
    564e:	98 5f       	subi	r25, 0xF8	; 248
    5650:	f9 cf       	rjmp	.-14     	; 0x5644 <round+0xe>
    5652:	86 95       	lsr	r24
    5654:	77 95       	ror	r23
    5656:	67 95       	ror	r22
    5658:	93 95       	inc	r25
    565a:	95 39       	cpi	r25, 0x95	; 149
    565c:	d0 f3       	brcs	.-12     	; 0x5652 <round+0x1c>
    565e:	b6 2f       	mov	r27, r22
    5660:	b1 70       	andi	r27, 0x01	; 1
    5662:	6b 0f       	add	r22, r27
    5664:	71 1d       	adc	r23, r1
    5666:	81 1d       	adc	r24, r1
    5668:	20 f4       	brcc	.+8      	; 0x5672 <round+0x3c>
    566a:	87 95       	ror	r24
    566c:	77 95       	ror	r23
    566e:	67 95       	ror	r22
    5670:	93 95       	inc	r25
    5672:	0c 94 3f 2b 	jmp	0x567e	; 0x567e <__fp_mintl>
    5676:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__fp_mpack>
    567a:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__fp_szero>

0000567e <__fp_mintl>:
    567e:	88 23       	and	r24, r24
    5680:	71 f4       	brne	.+28     	; 0x569e <__fp_mintl+0x20>
    5682:	77 23       	and	r23, r23
    5684:	21 f0       	breq	.+8      	; 0x568e <__fp_mintl+0x10>
    5686:	98 50       	subi	r25, 0x08	; 8
    5688:	87 2b       	or	r24, r23
    568a:	76 2f       	mov	r23, r22
    568c:	07 c0       	rjmp	.+14     	; 0x569c <__fp_mintl+0x1e>
    568e:	66 23       	and	r22, r22
    5690:	11 f4       	brne	.+4      	; 0x5696 <__fp_mintl+0x18>
    5692:	99 27       	eor	r25, r25
    5694:	0d c0       	rjmp	.+26     	; 0x56b0 <__fp_mintl+0x32>
    5696:	90 51       	subi	r25, 0x10	; 16
    5698:	86 2b       	or	r24, r22
    569a:	70 e0       	ldi	r23, 0x00	; 0
    569c:	60 e0       	ldi	r22, 0x00	; 0
    569e:	2a f0       	brmi	.+10     	; 0x56aa <__fp_mintl+0x2c>
    56a0:	9a 95       	dec	r25
    56a2:	66 0f       	add	r22, r22
    56a4:	77 1f       	adc	r23, r23
    56a6:	88 1f       	adc	r24, r24
    56a8:	da f7       	brpl	.-10     	; 0x56a0 <__fp_mintl+0x22>
    56aa:	88 0f       	add	r24, r24
    56ac:	96 95       	lsr	r25
    56ae:	87 95       	ror	r24
    56b0:	97 f9       	bld	r25, 7
    56b2:	08 95       	ret

000056b4 <__fp_mpack>:
    56b4:	9f 3f       	cpi	r25, 0xFF	; 255
    56b6:	31 f0       	breq	.+12     	; 0x56c4 <__fp_mpack_finite+0xc>

000056b8 <__fp_mpack_finite>:
    56b8:	91 50       	subi	r25, 0x01	; 1
    56ba:	20 f4       	brcc	.+8      	; 0x56c4 <__fp_mpack_finite+0xc>
    56bc:	87 95       	ror	r24
    56be:	77 95       	ror	r23
    56c0:	67 95       	ror	r22
    56c2:	b7 95       	ror	r27
    56c4:	88 0f       	add	r24, r24
    56c6:	91 1d       	adc	r25, r1
    56c8:	96 95       	lsr	r25
    56ca:	87 95       	ror	r24
    56cc:	97 f9       	bld	r25, 7
    56ce:	08 95       	ret

000056d0 <__fp_powsodd>:
    56d0:	9f 93       	push	r25
    56d2:	8f 93       	push	r24
    56d4:	7f 93       	push	r23
    56d6:	6f 93       	push	r22
    56d8:	ff 93       	push	r31
    56da:	ef 93       	push	r30
    56dc:	9b 01       	movw	r18, r22
    56de:	ac 01       	movw	r20, r24
    56e0:	0e 94 ae 2a 	call	0x555c	; 0x555c <__mulsf3>
    56e4:	ef 91       	pop	r30
    56e6:	ff 91       	pop	r31
    56e8:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <__fp_powser>
    56ec:	2f 91       	pop	r18
    56ee:	3f 91       	pop	r19
    56f0:	4f 91       	pop	r20
    56f2:	5f 91       	pop	r21
    56f4:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <__mulsf3>

000056f8 <__fp_powser>:
    56f8:	df 93       	push	r29
    56fa:	cf 93       	push	r28
    56fc:	1f 93       	push	r17
    56fe:	0f 93       	push	r16
    5700:	ff 92       	push	r15
    5702:	ef 92       	push	r14
    5704:	df 92       	push	r13
    5706:	7b 01       	movw	r14, r22
    5708:	8c 01       	movw	r16, r24
    570a:	68 94       	set
    570c:	06 c0       	rjmp	.+12     	; 0x571a <__fp_powser+0x22>
    570e:	da 2e       	mov	r13, r26
    5710:	ef 01       	movw	r28, r30
    5712:	0e 94 c1 2a 	call	0x5582	; 0x5582 <__mulsf3x>
    5716:	fe 01       	movw	r30, r28
    5718:	e8 94       	clt
    571a:	a5 91       	lpm	r26, Z+
    571c:	25 91       	lpm	r18, Z+
    571e:	35 91       	lpm	r19, Z+
    5720:	45 91       	lpm	r20, Z+
    5722:	55 91       	lpm	r21, Z+
    5724:	a6 f3       	brts	.-24     	; 0x570e <__fp_powser+0x16>
    5726:	ef 01       	movw	r28, r30
    5728:	0e 94 b1 28 	call	0x5162	; 0x5162 <__addsf3x>
    572c:	fe 01       	movw	r30, r28
    572e:	97 01       	movw	r18, r14
    5730:	a8 01       	movw	r20, r16
    5732:	da 94       	dec	r13
    5734:	69 f7       	brne	.-38     	; 0x5710 <__fp_powser+0x18>
    5736:	df 90       	pop	r13
    5738:	ef 90       	pop	r14
    573a:	ff 90       	pop	r15
    573c:	0f 91       	pop	r16
    573e:	1f 91       	pop	r17
    5740:	cf 91       	pop	r28
    5742:	df 91       	pop	r29
    5744:	08 95       	ret

00005746 <__mulsi3>:
    5746:	db 01       	movw	r26, r22
    5748:	8f 93       	push	r24
    574a:	9f 93       	push	r25
    574c:	0e 94 38 2c 	call	0x5870	; 0x5870 <__muluhisi3>
    5750:	bf 91       	pop	r27
    5752:	af 91       	pop	r26
    5754:	a2 9f       	mul	r26, r18
    5756:	80 0d       	add	r24, r0
    5758:	91 1d       	adc	r25, r1
    575a:	a3 9f       	mul	r26, r19
    575c:	90 0d       	add	r25, r0
    575e:	b2 9f       	mul	r27, r18
    5760:	90 0d       	add	r25, r0
    5762:	11 24       	eor	r1, r1
    5764:	08 95       	ret

00005766 <__udivmodhi4>:
    5766:	aa 1b       	sub	r26, r26
    5768:	bb 1b       	sub	r27, r27
    576a:	51 e1       	ldi	r21, 0x11	; 17
    576c:	07 c0       	rjmp	.+14     	; 0x577c <__udivmodhi4_ep>

0000576e <__udivmodhi4_loop>:
    576e:	aa 1f       	adc	r26, r26
    5770:	bb 1f       	adc	r27, r27
    5772:	a6 17       	cp	r26, r22
    5774:	b7 07       	cpc	r27, r23
    5776:	10 f0       	brcs	.+4      	; 0x577c <__udivmodhi4_ep>
    5778:	a6 1b       	sub	r26, r22
    577a:	b7 0b       	sbc	r27, r23

0000577c <__udivmodhi4_ep>:
    577c:	88 1f       	adc	r24, r24
    577e:	99 1f       	adc	r25, r25
    5780:	5a 95       	dec	r21
    5782:	a9 f7       	brne	.-22     	; 0x576e <__udivmodhi4_loop>
    5784:	80 95       	com	r24
    5786:	90 95       	com	r25
    5788:	bc 01       	movw	r22, r24
    578a:	cd 01       	movw	r24, r26
    578c:	08 95       	ret

0000578e <__divmodhi4>:
    578e:	97 fb       	bst	r25, 7
    5790:	07 2e       	mov	r0, r23
    5792:	16 f4       	brtc	.+4      	; 0x5798 <__divmodhi4+0xa>
    5794:	00 94       	com	r0
    5796:	07 d0       	rcall	.+14     	; 0x57a6 <__divmodhi4_neg1>
    5798:	77 fd       	sbrc	r23, 7
    579a:	09 d0       	rcall	.+18     	; 0x57ae <__divmodhi4_neg2>
    579c:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__udivmodhi4>
    57a0:	07 fc       	sbrc	r0, 7
    57a2:	05 d0       	rcall	.+10     	; 0x57ae <__divmodhi4_neg2>
    57a4:	3e f4       	brtc	.+14     	; 0x57b4 <__divmodhi4_exit>

000057a6 <__divmodhi4_neg1>:
    57a6:	90 95       	com	r25
    57a8:	81 95       	neg	r24
    57aa:	9f 4f       	sbci	r25, 0xFF	; 255
    57ac:	08 95       	ret

000057ae <__divmodhi4_neg2>:
    57ae:	70 95       	com	r23
    57b0:	61 95       	neg	r22
    57b2:	7f 4f       	sbci	r23, 0xFF	; 255

000057b4 <__divmodhi4_exit>:
    57b4:	08 95       	ret

000057b6 <__udivmodsi4>:
    57b6:	a1 e2       	ldi	r26, 0x21	; 33
    57b8:	1a 2e       	mov	r1, r26
    57ba:	aa 1b       	sub	r26, r26
    57bc:	bb 1b       	sub	r27, r27
    57be:	fd 01       	movw	r30, r26
    57c0:	0d c0       	rjmp	.+26     	; 0x57dc <__udivmodsi4_ep>

000057c2 <__udivmodsi4_loop>:
    57c2:	aa 1f       	adc	r26, r26
    57c4:	bb 1f       	adc	r27, r27
    57c6:	ee 1f       	adc	r30, r30
    57c8:	ff 1f       	adc	r31, r31
    57ca:	a2 17       	cp	r26, r18
    57cc:	b3 07       	cpc	r27, r19
    57ce:	e4 07       	cpc	r30, r20
    57d0:	f5 07       	cpc	r31, r21
    57d2:	20 f0       	brcs	.+8      	; 0x57dc <__udivmodsi4_ep>
    57d4:	a2 1b       	sub	r26, r18
    57d6:	b3 0b       	sbc	r27, r19
    57d8:	e4 0b       	sbc	r30, r20
    57da:	f5 0b       	sbc	r31, r21

000057dc <__udivmodsi4_ep>:
    57dc:	66 1f       	adc	r22, r22
    57de:	77 1f       	adc	r23, r23
    57e0:	88 1f       	adc	r24, r24
    57e2:	99 1f       	adc	r25, r25
    57e4:	1a 94       	dec	r1
    57e6:	69 f7       	brne	.-38     	; 0x57c2 <__udivmodsi4_loop>
    57e8:	60 95       	com	r22
    57ea:	70 95       	com	r23
    57ec:	80 95       	com	r24
    57ee:	90 95       	com	r25
    57f0:	9b 01       	movw	r18, r22
    57f2:	ac 01       	movw	r20, r24
    57f4:	bd 01       	movw	r22, r26
    57f6:	cf 01       	movw	r24, r30
    57f8:	08 95       	ret

000057fa <__divmodsi4>:
    57fa:	05 2e       	mov	r0, r21
    57fc:	97 fb       	bst	r25, 7
    57fe:	1e f4       	brtc	.+6      	; 0x5806 <__divmodsi4+0xc>
    5800:	00 94       	com	r0
    5802:	0e 94 14 2c 	call	0x5828	; 0x5828 <__negsi2>
    5806:	57 fd       	sbrc	r21, 7
    5808:	07 d0       	rcall	.+14     	; 0x5818 <__divmodsi4_neg2>
    580a:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodsi4>
    580e:	07 fc       	sbrc	r0, 7
    5810:	03 d0       	rcall	.+6      	; 0x5818 <__divmodsi4_neg2>
    5812:	4e f4       	brtc	.+18     	; 0x5826 <__divmodsi4_exit>
    5814:	0c 94 14 2c 	jmp	0x5828	; 0x5828 <__negsi2>

00005818 <__divmodsi4_neg2>:
    5818:	50 95       	com	r21
    581a:	40 95       	com	r20
    581c:	30 95       	com	r19
    581e:	21 95       	neg	r18
    5820:	3f 4f       	sbci	r19, 0xFF	; 255
    5822:	4f 4f       	sbci	r20, 0xFF	; 255
    5824:	5f 4f       	sbci	r21, 0xFF	; 255

00005826 <__divmodsi4_exit>:
    5826:	08 95       	ret

00005828 <__negsi2>:
    5828:	90 95       	com	r25
    582a:	80 95       	com	r24
    582c:	70 95       	com	r23
    582e:	61 95       	neg	r22
    5830:	7f 4f       	sbci	r23, 0xFF	; 255
    5832:	8f 4f       	sbci	r24, 0xFF	; 255
    5834:	9f 4f       	sbci	r25, 0xFF	; 255
    5836:	08 95       	ret

00005838 <__tablejump2__>:
    5838:	ee 0f       	add	r30, r30
    583a:	ff 1f       	adc	r31, r31
    583c:	05 90       	lpm	r0, Z+
    583e:	f4 91       	lpm	r31, Z
    5840:	e0 2d       	mov	r30, r0
    5842:	09 94       	ijmp

00005844 <__umulhisi3>:
    5844:	a2 9f       	mul	r26, r18
    5846:	b0 01       	movw	r22, r0
    5848:	b3 9f       	mul	r27, r19
    584a:	c0 01       	movw	r24, r0
    584c:	a3 9f       	mul	r26, r19
    584e:	70 0d       	add	r23, r0
    5850:	81 1d       	adc	r24, r1
    5852:	11 24       	eor	r1, r1
    5854:	91 1d       	adc	r25, r1
    5856:	b2 9f       	mul	r27, r18
    5858:	70 0d       	add	r23, r0
    585a:	81 1d       	adc	r24, r1
    585c:	11 24       	eor	r1, r1
    585e:	91 1d       	adc	r25, r1
    5860:	08 95       	ret

00005862 <__usmulhisi3>:
    5862:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>

00005866 <__usmulhisi3_tail>:
    5866:	b7 ff       	sbrs	r27, 7
    5868:	08 95       	ret
    586a:	82 1b       	sub	r24, r18
    586c:	93 0b       	sbc	r25, r19
    586e:	08 95       	ret

00005870 <__muluhisi3>:
    5870:	0e 94 22 2c 	call	0x5844	; 0x5844 <__umulhisi3>
    5874:	a5 9f       	mul	r26, r21
    5876:	90 0d       	add	r25, r0
    5878:	b4 9f       	mul	r27, r20
    587a:	90 0d       	add	r25, r0
    587c:	a4 9f       	mul	r26, r20
    587e:	80 0d       	add	r24, r0
    5880:	91 1d       	adc	r25, r1
    5882:	11 24       	eor	r1, r1
    5884:	08 95       	ret

00005886 <__mulshisi3>:
    5886:	b7 ff       	sbrs	r27, 7
    5888:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__muluhisi3>

0000588c <__mulohisi3>:
    588c:	0e 94 38 2c 	call	0x5870	; 0x5870 <__muluhisi3>
    5890:	82 1b       	sub	r24, r18
    5892:	93 0b       	sbc	r25, r19
    5894:	08 95       	ret

00005896 <malloc>:
    5896:	0f 93       	push	r16
    5898:	1f 93       	push	r17
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	82 30       	cpi	r24, 0x02	; 2
    58a0:	91 05       	cpc	r25, r1
    58a2:	10 f4       	brcc	.+4      	; 0x58a8 <malloc+0x12>
    58a4:	82 e0       	ldi	r24, 0x02	; 2
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <__flp>
    58ac:	f0 91 b4 05 	lds	r31, 0x05B4	; 0x8005b4 <__flp+0x1>
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	a0 e0       	ldi	r26, 0x00	; 0
    58b6:	b0 e0       	ldi	r27, 0x00	; 0
    58b8:	30 97       	sbiw	r30, 0x00	; 0
    58ba:	19 f1       	breq	.+70     	; 0x5902 <malloc+0x6c>
    58bc:	40 81       	ld	r20, Z
    58be:	51 81       	ldd	r21, Z+1	; 0x01
    58c0:	02 81       	ldd	r16, Z+2	; 0x02
    58c2:	13 81       	ldd	r17, Z+3	; 0x03
    58c4:	48 17       	cp	r20, r24
    58c6:	59 07       	cpc	r21, r25
    58c8:	c8 f0       	brcs	.+50     	; 0x58fc <malloc+0x66>
    58ca:	84 17       	cp	r24, r20
    58cc:	95 07       	cpc	r25, r21
    58ce:	69 f4       	brne	.+26     	; 0x58ea <malloc+0x54>
    58d0:	10 97       	sbiw	r26, 0x00	; 0
    58d2:	31 f0       	breq	.+12     	; 0x58e0 <malloc+0x4a>
    58d4:	12 96       	adiw	r26, 0x02	; 2
    58d6:	0c 93       	st	X, r16
    58d8:	12 97       	sbiw	r26, 0x02	; 2
    58da:	13 96       	adiw	r26, 0x03	; 3
    58dc:	1c 93       	st	X, r17
    58de:	27 c0       	rjmp	.+78     	; 0x592e <malloc+0x98>
    58e0:	00 93 b3 05 	sts	0x05B3, r16	; 0x8005b3 <__flp>
    58e4:	10 93 b4 05 	sts	0x05B4, r17	; 0x8005b4 <__flp+0x1>
    58e8:	22 c0       	rjmp	.+68     	; 0x592e <malloc+0x98>
    58ea:	21 15       	cp	r18, r1
    58ec:	31 05       	cpc	r19, r1
    58ee:	19 f0       	breq	.+6      	; 0x58f6 <malloc+0x60>
    58f0:	42 17       	cp	r20, r18
    58f2:	53 07       	cpc	r21, r19
    58f4:	18 f4       	brcc	.+6      	; 0x58fc <malloc+0x66>
    58f6:	9a 01       	movw	r18, r20
    58f8:	bd 01       	movw	r22, r26
    58fa:	ef 01       	movw	r28, r30
    58fc:	df 01       	movw	r26, r30
    58fe:	f8 01       	movw	r30, r16
    5900:	db cf       	rjmp	.-74     	; 0x58b8 <malloc+0x22>
    5902:	21 15       	cp	r18, r1
    5904:	31 05       	cpc	r19, r1
    5906:	f9 f0       	breq	.+62     	; 0x5946 <malloc+0xb0>
    5908:	28 1b       	sub	r18, r24
    590a:	39 0b       	sbc	r19, r25
    590c:	24 30       	cpi	r18, 0x04	; 4
    590e:	31 05       	cpc	r19, r1
    5910:	80 f4       	brcc	.+32     	; 0x5932 <malloc+0x9c>
    5912:	8a 81       	ldd	r24, Y+2	; 0x02
    5914:	9b 81       	ldd	r25, Y+3	; 0x03
    5916:	61 15       	cp	r22, r1
    5918:	71 05       	cpc	r23, r1
    591a:	21 f0       	breq	.+8      	; 0x5924 <malloc+0x8e>
    591c:	fb 01       	movw	r30, r22
    591e:	93 83       	std	Z+3, r25	; 0x03
    5920:	82 83       	std	Z+2, r24	; 0x02
    5922:	04 c0       	rjmp	.+8      	; 0x592c <malloc+0x96>
    5924:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <__flp+0x1>
    5928:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <__flp>
    592c:	fe 01       	movw	r30, r28
    592e:	32 96       	adiw	r30, 0x02	; 2
    5930:	44 c0       	rjmp	.+136    	; 0x59ba <malloc+0x124>
    5932:	fe 01       	movw	r30, r28
    5934:	e2 0f       	add	r30, r18
    5936:	f3 1f       	adc	r31, r19
    5938:	81 93       	st	Z+, r24
    593a:	91 93       	st	Z+, r25
    593c:	22 50       	subi	r18, 0x02	; 2
    593e:	31 09       	sbc	r19, r1
    5940:	39 83       	std	Y+1, r19	; 0x01
    5942:	28 83       	st	Y, r18
    5944:	3a c0       	rjmp	.+116    	; 0x59ba <malloc+0x124>
    5946:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <__brkval>
    594a:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <__brkval+0x1>
    594e:	23 2b       	or	r18, r19
    5950:	41 f4       	brne	.+16     	; 0x5962 <malloc+0xcc>
    5952:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5956:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    595a:	30 93 b2 05 	sts	0x05B2, r19	; 0x8005b2 <__brkval+0x1>
    595e:	20 93 b1 05 	sts	0x05B1, r18	; 0x8005b1 <__brkval>
    5962:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5966:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    596a:	21 15       	cp	r18, r1
    596c:	31 05       	cpc	r19, r1
    596e:	41 f4       	brne	.+16     	; 0x5980 <malloc+0xea>
    5970:	2d b7       	in	r18, 0x3d	; 61
    5972:	3e b7       	in	r19, 0x3e	; 62
    5974:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5978:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    597c:	24 1b       	sub	r18, r20
    597e:	35 0b       	sbc	r19, r21
    5980:	e0 91 b1 05 	lds	r30, 0x05B1	; 0x8005b1 <__brkval>
    5984:	f0 91 b2 05 	lds	r31, 0x05B2	; 0x8005b2 <__brkval+0x1>
    5988:	e2 17       	cp	r30, r18
    598a:	f3 07       	cpc	r31, r19
    598c:	a0 f4       	brcc	.+40     	; 0x59b6 <malloc+0x120>
    598e:	2e 1b       	sub	r18, r30
    5990:	3f 0b       	sbc	r19, r31
    5992:	28 17       	cp	r18, r24
    5994:	39 07       	cpc	r19, r25
    5996:	78 f0       	brcs	.+30     	; 0x59b6 <malloc+0x120>
    5998:	ac 01       	movw	r20, r24
    599a:	4e 5f       	subi	r20, 0xFE	; 254
    599c:	5f 4f       	sbci	r21, 0xFF	; 255
    599e:	24 17       	cp	r18, r20
    59a0:	35 07       	cpc	r19, r21
    59a2:	48 f0       	brcs	.+18     	; 0x59b6 <malloc+0x120>
    59a4:	4e 0f       	add	r20, r30
    59a6:	5f 1f       	adc	r21, r31
    59a8:	50 93 b2 05 	sts	0x05B2, r21	; 0x8005b2 <__brkval+0x1>
    59ac:	40 93 b1 05 	sts	0x05B1, r20	; 0x8005b1 <__brkval>
    59b0:	81 93       	st	Z+, r24
    59b2:	91 93       	st	Z+, r25
    59b4:	02 c0       	rjmp	.+4      	; 0x59ba <malloc+0x124>
    59b6:	e0 e0       	ldi	r30, 0x00	; 0
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	cf 01       	movw	r24, r30
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	1f 91       	pop	r17
    59c2:	0f 91       	pop	r16
    59c4:	08 95       	ret

000059c6 <free>:
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	00 97       	sbiw	r24, 0x00	; 0
    59cc:	09 f4       	brne	.+2      	; 0x59d0 <free+0xa>
    59ce:	81 c0       	rjmp	.+258    	; 0x5ad2 <free+0x10c>
    59d0:	fc 01       	movw	r30, r24
    59d2:	32 97       	sbiw	r30, 0x02	; 2
    59d4:	13 82       	std	Z+3, r1	; 0x03
    59d6:	12 82       	std	Z+2, r1	; 0x02
    59d8:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <__flp>
    59dc:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <__flp+0x1>
    59e0:	10 97       	sbiw	r26, 0x00	; 0
    59e2:	81 f4       	brne	.+32     	; 0x5a04 <free+0x3e>
    59e4:	20 81       	ld	r18, Z
    59e6:	31 81       	ldd	r19, Z+1	; 0x01
    59e8:	82 0f       	add	r24, r18
    59ea:	93 1f       	adc	r25, r19
    59ec:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <__brkval>
    59f0:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <__brkval+0x1>
    59f4:	28 17       	cp	r18, r24
    59f6:	39 07       	cpc	r19, r25
    59f8:	51 f5       	brne	.+84     	; 0x5a4e <free+0x88>
    59fa:	f0 93 b2 05 	sts	0x05B2, r31	; 0x8005b2 <__brkval+0x1>
    59fe:	e0 93 b1 05 	sts	0x05B1, r30	; 0x8005b1 <__brkval>
    5a02:	67 c0       	rjmp	.+206    	; 0x5ad2 <free+0x10c>
    5a04:	ed 01       	movw	r28, r26
    5a06:	20 e0       	ldi	r18, 0x00	; 0
    5a08:	30 e0       	ldi	r19, 0x00	; 0
    5a0a:	ce 17       	cp	r28, r30
    5a0c:	df 07       	cpc	r29, r31
    5a0e:	40 f4       	brcc	.+16     	; 0x5a20 <free+0x5a>
    5a10:	4a 81       	ldd	r20, Y+2	; 0x02
    5a12:	5b 81       	ldd	r21, Y+3	; 0x03
    5a14:	9e 01       	movw	r18, r28
    5a16:	41 15       	cp	r20, r1
    5a18:	51 05       	cpc	r21, r1
    5a1a:	f1 f0       	breq	.+60     	; 0x5a58 <free+0x92>
    5a1c:	ea 01       	movw	r28, r20
    5a1e:	f5 cf       	rjmp	.-22     	; 0x5a0a <free+0x44>
    5a20:	d3 83       	std	Z+3, r29	; 0x03
    5a22:	c2 83       	std	Z+2, r28	; 0x02
    5a24:	40 81       	ld	r20, Z
    5a26:	51 81       	ldd	r21, Z+1	; 0x01
    5a28:	84 0f       	add	r24, r20
    5a2a:	95 1f       	adc	r25, r21
    5a2c:	c8 17       	cp	r28, r24
    5a2e:	d9 07       	cpc	r29, r25
    5a30:	59 f4       	brne	.+22     	; 0x5a48 <free+0x82>
    5a32:	88 81       	ld	r24, Y
    5a34:	99 81       	ldd	r25, Y+1	; 0x01
    5a36:	84 0f       	add	r24, r20
    5a38:	95 1f       	adc	r25, r21
    5a3a:	02 96       	adiw	r24, 0x02	; 2
    5a3c:	91 83       	std	Z+1, r25	; 0x01
    5a3e:	80 83       	st	Z, r24
    5a40:	8a 81       	ldd	r24, Y+2	; 0x02
    5a42:	9b 81       	ldd	r25, Y+3	; 0x03
    5a44:	93 83       	std	Z+3, r25	; 0x03
    5a46:	82 83       	std	Z+2, r24	; 0x02
    5a48:	21 15       	cp	r18, r1
    5a4a:	31 05       	cpc	r19, r1
    5a4c:	29 f4       	brne	.+10     	; 0x5a58 <free+0x92>
    5a4e:	f0 93 b4 05 	sts	0x05B4, r31	; 0x8005b4 <__flp+0x1>
    5a52:	e0 93 b3 05 	sts	0x05B3, r30	; 0x8005b3 <__flp>
    5a56:	3d c0       	rjmp	.+122    	; 0x5ad2 <free+0x10c>
    5a58:	e9 01       	movw	r28, r18
    5a5a:	fb 83       	std	Y+3, r31	; 0x03
    5a5c:	ea 83       	std	Y+2, r30	; 0x02
    5a5e:	49 91       	ld	r20, Y+
    5a60:	59 91       	ld	r21, Y+
    5a62:	c4 0f       	add	r28, r20
    5a64:	d5 1f       	adc	r29, r21
    5a66:	ec 17       	cp	r30, r28
    5a68:	fd 07       	cpc	r31, r29
    5a6a:	61 f4       	brne	.+24     	; 0x5a84 <free+0xbe>
    5a6c:	80 81       	ld	r24, Z
    5a6e:	91 81       	ldd	r25, Z+1	; 0x01
    5a70:	84 0f       	add	r24, r20
    5a72:	95 1f       	adc	r25, r21
    5a74:	02 96       	adiw	r24, 0x02	; 2
    5a76:	e9 01       	movw	r28, r18
    5a78:	99 83       	std	Y+1, r25	; 0x01
    5a7a:	88 83       	st	Y, r24
    5a7c:	82 81       	ldd	r24, Z+2	; 0x02
    5a7e:	93 81       	ldd	r25, Z+3	; 0x03
    5a80:	9b 83       	std	Y+3, r25	; 0x03
    5a82:	8a 83       	std	Y+2, r24	; 0x02
    5a84:	e0 e0       	ldi	r30, 0x00	; 0
    5a86:	f0 e0       	ldi	r31, 0x00	; 0
    5a88:	12 96       	adiw	r26, 0x02	; 2
    5a8a:	8d 91       	ld	r24, X+
    5a8c:	9c 91       	ld	r25, X
    5a8e:	13 97       	sbiw	r26, 0x03	; 3
    5a90:	00 97       	sbiw	r24, 0x00	; 0
    5a92:	19 f0       	breq	.+6      	; 0x5a9a <free+0xd4>
    5a94:	fd 01       	movw	r30, r26
    5a96:	dc 01       	movw	r26, r24
    5a98:	f7 cf       	rjmp	.-18     	; 0x5a88 <free+0xc2>
    5a9a:	8d 91       	ld	r24, X+
    5a9c:	9c 91       	ld	r25, X
    5a9e:	11 97       	sbiw	r26, 0x01	; 1
    5aa0:	9d 01       	movw	r18, r26
    5aa2:	2e 5f       	subi	r18, 0xFE	; 254
    5aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    5aa6:	82 0f       	add	r24, r18
    5aa8:	93 1f       	adc	r25, r19
    5aaa:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <__brkval>
    5aae:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <__brkval+0x1>
    5ab2:	28 17       	cp	r18, r24
    5ab4:	39 07       	cpc	r19, r25
    5ab6:	69 f4       	brne	.+26     	; 0x5ad2 <free+0x10c>
    5ab8:	30 97       	sbiw	r30, 0x00	; 0
    5aba:	29 f4       	brne	.+10     	; 0x5ac6 <free+0x100>
    5abc:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <__flp+0x1>
    5ac0:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <__flp>
    5ac4:	02 c0       	rjmp	.+4      	; 0x5aca <free+0x104>
    5ac6:	13 82       	std	Z+3, r1	; 0x03
    5ac8:	12 82       	std	Z+2, r1	; 0x02
    5aca:	b0 93 b2 05 	sts	0x05B2, r27	; 0x8005b2 <__brkval+0x1>
    5ace:	a0 93 b1 05 	sts	0x05B1, r26	; 0x8005b1 <__brkval>
    5ad2:	df 91       	pop	r29
    5ad4:	cf 91       	pop	r28
    5ad6:	08 95       	ret

00005ad8 <atoi>:
    5ad8:	fc 01       	movw	r30, r24
    5ada:	88 27       	eor	r24, r24
    5adc:	99 27       	eor	r25, r25
    5ade:	e8 94       	clt
    5ae0:	21 91       	ld	r18, Z+
    5ae2:	20 32       	cpi	r18, 0x20	; 32
    5ae4:	e9 f3       	breq	.-6      	; 0x5ae0 <atoi+0x8>
    5ae6:	29 30       	cpi	r18, 0x09	; 9
    5ae8:	10 f0       	brcs	.+4      	; 0x5aee <atoi+0x16>
    5aea:	2e 30       	cpi	r18, 0x0E	; 14
    5aec:	c8 f3       	brcs	.-14     	; 0x5ae0 <atoi+0x8>
    5aee:	2b 32       	cpi	r18, 0x2B	; 43
    5af0:	41 f0       	breq	.+16     	; 0x5b02 <atoi+0x2a>
    5af2:	2d 32       	cpi	r18, 0x2D	; 45
    5af4:	39 f4       	brne	.+14     	; 0x5b04 <atoi+0x2c>
    5af6:	68 94       	set
    5af8:	04 c0       	rjmp	.+8      	; 0x5b02 <atoi+0x2a>
    5afa:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <__mulhi_const_10>
    5afe:	82 0f       	add	r24, r18
    5b00:	91 1d       	adc	r25, r1
    5b02:	21 91       	ld	r18, Z+
    5b04:	20 53       	subi	r18, 0x30	; 48
    5b06:	2a 30       	cpi	r18, 0x0A	; 10
    5b08:	c0 f3       	brcs	.-16     	; 0x5afa <atoi+0x22>
    5b0a:	1e f4       	brtc	.+6      	; 0x5b12 <atoi+0x3a>
    5b0c:	90 95       	com	r25
    5b0e:	81 95       	neg	r24
    5b10:	9f 4f       	sbci	r25, 0xFF	; 255
    5b12:	08 95       	ret

00005b14 <atol>:
    5b14:	1f 93       	push	r17
    5b16:	fc 01       	movw	r30, r24
    5b18:	99 27       	eor	r25, r25
    5b1a:	88 27       	eor	r24, r24
    5b1c:	bc 01       	movw	r22, r24
    5b1e:	e8 94       	clt
    5b20:	11 91       	ld	r17, Z+
    5b22:	10 32       	cpi	r17, 0x20	; 32
    5b24:	e9 f3       	breq	.-6      	; 0x5b20 <atol+0xc>
    5b26:	19 30       	cpi	r17, 0x09	; 9
    5b28:	10 f0       	brcs	.+4      	; 0x5b2e <atol+0x1a>
    5b2a:	1e 30       	cpi	r17, 0x0E	; 14
    5b2c:	c8 f3       	brcs	.-14     	; 0x5b20 <atol+0xc>
    5b2e:	1b 32       	cpi	r17, 0x2B	; 43
    5b30:	51 f0       	breq	.+20     	; 0x5b46 <atol+0x32>
    5b32:	1d 32       	cpi	r17, 0x2D	; 45
    5b34:	49 f4       	brne	.+18     	; 0x5b48 <atol+0x34>
    5b36:	68 94       	set
    5b38:	06 c0       	rjmp	.+12     	; 0x5b46 <atol+0x32>
    5b3a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <__mulsi_const_10>
    5b3e:	61 0f       	add	r22, r17
    5b40:	71 1d       	adc	r23, r1
    5b42:	81 1d       	adc	r24, r1
    5b44:	91 1d       	adc	r25, r1
    5b46:	11 91       	ld	r17, Z+
    5b48:	10 53       	subi	r17, 0x30	; 48
    5b4a:	1a 30       	cpi	r17, 0x0A	; 10
    5b4c:	b0 f3       	brcs	.-20     	; 0x5b3a <atol+0x26>
    5b4e:	3e f4       	brtc	.+14     	; 0x5b5e <atol+0x4a>
    5b50:	90 95       	com	r25
    5b52:	80 95       	com	r24
    5b54:	70 95       	com	r23
    5b56:	61 95       	neg	r22
    5b58:	7f 4f       	sbci	r23, 0xFF	; 255
    5b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5e:	1f 91       	pop	r17
    5b60:	08 95       	ret

00005b62 <toupper>:
    5b62:	91 11       	cpse	r25, r1
    5b64:	08 95       	ret
    5b66:	81 56       	subi	r24, 0x61	; 97
    5b68:	8a 51       	subi	r24, 0x1A	; 26
    5b6a:	08 f4       	brcc	.+2      	; 0x5b6e <toupper+0xc>
    5b6c:	80 52       	subi	r24, 0x20	; 32
    5b6e:	85 58       	subi	r24, 0x85	; 133
    5b70:	08 95       	ret

00005b72 <strcat>:
    5b72:	fb 01       	movw	r30, r22
    5b74:	dc 01       	movw	r26, r24
    5b76:	0d 90       	ld	r0, X+
    5b78:	00 20       	and	r0, r0
    5b7a:	e9 f7       	brne	.-6      	; 0x5b76 <strcat+0x4>
    5b7c:	11 97       	sbiw	r26, 0x01	; 1
    5b7e:	01 90       	ld	r0, Z+
    5b80:	0d 92       	st	X+, r0
    5b82:	00 20       	and	r0, r0
    5b84:	e1 f7       	brne	.-8      	; 0x5b7e <strcat+0xc>
    5b86:	08 95       	ret

00005b88 <strcpy>:
    5b88:	fb 01       	movw	r30, r22
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	01 90       	ld	r0, Z+
    5b8e:	0d 92       	st	X+, r0
    5b90:	00 20       	and	r0, r0
    5b92:	e1 f7       	brne	.-8      	; 0x5b8c <strcpy+0x4>
    5b94:	08 95       	ret

00005b96 <strncpy>:
    5b96:	fb 01       	movw	r30, r22
    5b98:	dc 01       	movw	r26, r24
    5b9a:	41 50       	subi	r20, 0x01	; 1
    5b9c:	50 40       	sbci	r21, 0x00	; 0
    5b9e:	48 f0       	brcs	.+18     	; 0x5bb2 <strncpy+0x1c>
    5ba0:	01 90       	ld	r0, Z+
    5ba2:	0d 92       	st	X+, r0
    5ba4:	00 20       	and	r0, r0
    5ba6:	c9 f7       	brne	.-14     	; 0x5b9a <strncpy+0x4>
    5ba8:	01 c0       	rjmp	.+2      	; 0x5bac <strncpy+0x16>
    5baa:	1d 92       	st	X+, r1
    5bac:	41 50       	subi	r20, 0x01	; 1
    5bae:	50 40       	sbci	r21, 0x00	; 0
    5bb0:	e0 f7       	brcc	.-8      	; 0x5baa <strncpy+0x14>
    5bb2:	08 95       	ret

00005bb4 <__mulsi_const_10>:
    5bb4:	59 2f       	mov	r21, r25
    5bb6:	48 2f       	mov	r20, r24
    5bb8:	37 2f       	mov	r19, r23
    5bba:	26 2f       	mov	r18, r22
    5bbc:	66 0f       	add	r22, r22
    5bbe:	77 1f       	adc	r23, r23
    5bc0:	88 1f       	adc	r24, r24
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	66 0f       	add	r22, r22
    5bc6:	77 1f       	adc	r23, r23
    5bc8:	88 1f       	adc	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	62 0f       	add	r22, r18
    5bce:	73 1f       	adc	r23, r19
    5bd0:	84 1f       	adc	r24, r20
    5bd2:	95 1f       	adc	r25, r21
    5bd4:	66 0f       	add	r22, r22
    5bd6:	77 1f       	adc	r23, r23
    5bd8:	88 1f       	adc	r24, r24
    5bda:	99 1f       	adc	r25, r25
    5bdc:	08 95       	ret

00005bde <__mulhi_const_10>:
    5bde:	7a e0       	ldi	r23, 0x0A	; 10
    5be0:	97 9f       	mul	r25, r23
    5be2:	90 2d       	mov	r25, r0
    5be4:	87 9f       	mul	r24, r23
    5be6:	80 2d       	mov	r24, r0
    5be8:	91 0d       	add	r25, r1
    5bea:	11 24       	eor	r1, r1
    5bec:	08 95       	ret

00005bee <sprintf>:
    5bee:	ae e0       	ldi	r26, 0x0E	; 14
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	ed ef       	ldi	r30, 0xFD	; 253
    5bf4:	fd e2       	ldi	r31, 0x2D	; 45
    5bf6:	0c 94 1b 31 	jmp	0x6236	; 0x6236 <__prologue_saves__+0x1c>
    5bfa:	0d 89       	ldd	r16, Y+21	; 0x15
    5bfc:	1e 89       	ldd	r17, Y+22	; 0x16
    5bfe:	86 e0       	ldi	r24, 0x06	; 6
    5c00:	8c 83       	std	Y+4, r24	; 0x04
    5c02:	1a 83       	std	Y+2, r17	; 0x02
    5c04:	09 83       	std	Y+1, r16	; 0x01
    5c06:	8f ef       	ldi	r24, 0xFF	; 255
    5c08:	9f e7       	ldi	r25, 0x7F	; 127
    5c0a:	9e 83       	std	Y+6, r25	; 0x06
    5c0c:	8d 83       	std	Y+5, r24	; 0x05
    5c0e:	ae 01       	movw	r20, r28
    5c10:	47 5e       	subi	r20, 0xE7	; 231
    5c12:	5f 4f       	sbci	r21, 0xFF	; 255
    5c14:	6f 89       	ldd	r22, Y+23	; 0x17
    5c16:	78 8d       	ldd	r23, Y+24	; 0x18
    5c18:	ce 01       	movw	r24, r28
    5c1a:	01 96       	adiw	r24, 0x01	; 1
    5c1c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <vfprintf>
    5c20:	ef 81       	ldd	r30, Y+7	; 0x07
    5c22:	f8 85       	ldd	r31, Y+8	; 0x08
    5c24:	e0 0f       	add	r30, r16
    5c26:	f1 1f       	adc	r31, r17
    5c28:	10 82       	st	Z, r1
    5c2a:	2e 96       	adiw	r28, 0x0e	; 14
    5c2c:	e4 e0       	ldi	r30, 0x04	; 4
    5c2e:	0c 94 37 31 	jmp	0x626e	; 0x626e <__epilogue_restores__+0x1c>

00005c32 <vfprintf>:
    5c32:	ab e0       	ldi	r26, 0x0B	; 11
    5c34:	b0 e0       	ldi	r27, 0x00	; 0
    5c36:	ef e1       	ldi	r30, 0x1F	; 31
    5c38:	fe e2       	ldi	r31, 0x2E	; 46
    5c3a:	0c 94 0d 31 	jmp	0x621a	; 0x621a <__prologue_saves__>
    5c3e:	6c 01       	movw	r12, r24
    5c40:	7b 01       	movw	r14, r22
    5c42:	8a 01       	movw	r16, r20
    5c44:	fc 01       	movw	r30, r24
    5c46:	17 82       	std	Z+7, r1	; 0x07
    5c48:	16 82       	std	Z+6, r1	; 0x06
    5c4a:	83 81       	ldd	r24, Z+3	; 0x03
    5c4c:	81 ff       	sbrs	r24, 1
    5c4e:	cc c1       	rjmp	.+920    	; 0x5fe8 <vfprintf+0x3b6>
    5c50:	ce 01       	movw	r24, r28
    5c52:	01 96       	adiw	r24, 0x01	; 1
    5c54:	3c 01       	movw	r6, r24
    5c56:	f6 01       	movw	r30, r12
    5c58:	93 81       	ldd	r25, Z+3	; 0x03
    5c5a:	f7 01       	movw	r30, r14
    5c5c:	93 fd       	sbrc	r25, 3
    5c5e:	85 91       	lpm	r24, Z+
    5c60:	93 ff       	sbrs	r25, 3
    5c62:	81 91       	ld	r24, Z+
    5c64:	7f 01       	movw	r14, r30
    5c66:	88 23       	and	r24, r24
    5c68:	09 f4       	brne	.+2      	; 0x5c6c <vfprintf+0x3a>
    5c6a:	ba c1       	rjmp	.+884    	; 0x5fe0 <vfprintf+0x3ae>
    5c6c:	85 32       	cpi	r24, 0x25	; 37
    5c6e:	39 f4       	brne	.+14     	; 0x5c7e <vfprintf+0x4c>
    5c70:	93 fd       	sbrc	r25, 3
    5c72:	85 91       	lpm	r24, Z+
    5c74:	93 ff       	sbrs	r25, 3
    5c76:	81 91       	ld	r24, Z+
    5c78:	7f 01       	movw	r14, r30
    5c7a:	85 32       	cpi	r24, 0x25	; 37
    5c7c:	29 f4       	brne	.+10     	; 0x5c88 <vfprintf+0x56>
    5c7e:	b6 01       	movw	r22, r12
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5c86:	e7 cf       	rjmp	.-50     	; 0x5c56 <vfprintf+0x24>
    5c88:	91 2c       	mov	r9, r1
    5c8a:	21 2c       	mov	r2, r1
    5c8c:	31 2c       	mov	r3, r1
    5c8e:	ff e1       	ldi	r31, 0x1F	; 31
    5c90:	f3 15       	cp	r31, r3
    5c92:	d8 f0       	brcs	.+54     	; 0x5cca <vfprintf+0x98>
    5c94:	8b 32       	cpi	r24, 0x2B	; 43
    5c96:	79 f0       	breq	.+30     	; 0x5cb6 <vfprintf+0x84>
    5c98:	38 f4       	brcc	.+14     	; 0x5ca8 <vfprintf+0x76>
    5c9a:	80 32       	cpi	r24, 0x20	; 32
    5c9c:	79 f0       	breq	.+30     	; 0x5cbc <vfprintf+0x8a>
    5c9e:	83 32       	cpi	r24, 0x23	; 35
    5ca0:	a1 f4       	brne	.+40     	; 0x5cca <vfprintf+0x98>
    5ca2:	23 2d       	mov	r18, r3
    5ca4:	20 61       	ori	r18, 0x10	; 16
    5ca6:	1d c0       	rjmp	.+58     	; 0x5ce2 <vfprintf+0xb0>
    5ca8:	8d 32       	cpi	r24, 0x2D	; 45
    5caa:	61 f0       	breq	.+24     	; 0x5cc4 <vfprintf+0x92>
    5cac:	80 33       	cpi	r24, 0x30	; 48
    5cae:	69 f4       	brne	.+26     	; 0x5cca <vfprintf+0x98>
    5cb0:	23 2d       	mov	r18, r3
    5cb2:	21 60       	ori	r18, 0x01	; 1
    5cb4:	16 c0       	rjmp	.+44     	; 0x5ce2 <vfprintf+0xb0>
    5cb6:	83 2d       	mov	r24, r3
    5cb8:	82 60       	ori	r24, 0x02	; 2
    5cba:	38 2e       	mov	r3, r24
    5cbc:	e3 2d       	mov	r30, r3
    5cbe:	e4 60       	ori	r30, 0x04	; 4
    5cc0:	3e 2e       	mov	r3, r30
    5cc2:	2a c0       	rjmp	.+84     	; 0x5d18 <vfprintf+0xe6>
    5cc4:	f3 2d       	mov	r31, r3
    5cc6:	f8 60       	ori	r31, 0x08	; 8
    5cc8:	1d c0       	rjmp	.+58     	; 0x5d04 <vfprintf+0xd2>
    5cca:	37 fc       	sbrc	r3, 7
    5ccc:	2d c0       	rjmp	.+90     	; 0x5d28 <vfprintf+0xf6>
    5cce:	20 ed       	ldi	r18, 0xD0	; 208
    5cd0:	28 0f       	add	r18, r24
    5cd2:	2a 30       	cpi	r18, 0x0A	; 10
    5cd4:	40 f0       	brcs	.+16     	; 0x5ce6 <vfprintf+0xb4>
    5cd6:	8e 32       	cpi	r24, 0x2E	; 46
    5cd8:	b9 f4       	brne	.+46     	; 0x5d08 <vfprintf+0xd6>
    5cda:	36 fc       	sbrc	r3, 6
    5cdc:	81 c1       	rjmp	.+770    	; 0x5fe0 <vfprintf+0x3ae>
    5cde:	23 2d       	mov	r18, r3
    5ce0:	20 64       	ori	r18, 0x40	; 64
    5ce2:	32 2e       	mov	r3, r18
    5ce4:	19 c0       	rjmp	.+50     	; 0x5d18 <vfprintf+0xe6>
    5ce6:	36 fe       	sbrs	r3, 6
    5ce8:	06 c0       	rjmp	.+12     	; 0x5cf6 <vfprintf+0xc4>
    5cea:	8a e0       	ldi	r24, 0x0A	; 10
    5cec:	98 9e       	mul	r9, r24
    5cee:	20 0d       	add	r18, r0
    5cf0:	11 24       	eor	r1, r1
    5cf2:	92 2e       	mov	r9, r18
    5cf4:	11 c0       	rjmp	.+34     	; 0x5d18 <vfprintf+0xe6>
    5cf6:	ea e0       	ldi	r30, 0x0A	; 10
    5cf8:	2e 9e       	mul	r2, r30
    5cfa:	20 0d       	add	r18, r0
    5cfc:	11 24       	eor	r1, r1
    5cfe:	22 2e       	mov	r2, r18
    5d00:	f3 2d       	mov	r31, r3
    5d02:	f0 62       	ori	r31, 0x20	; 32
    5d04:	3f 2e       	mov	r3, r31
    5d06:	08 c0       	rjmp	.+16     	; 0x5d18 <vfprintf+0xe6>
    5d08:	8c 36       	cpi	r24, 0x6C	; 108
    5d0a:	21 f4       	brne	.+8      	; 0x5d14 <vfprintf+0xe2>
    5d0c:	83 2d       	mov	r24, r3
    5d0e:	80 68       	ori	r24, 0x80	; 128
    5d10:	38 2e       	mov	r3, r24
    5d12:	02 c0       	rjmp	.+4      	; 0x5d18 <vfprintf+0xe6>
    5d14:	88 36       	cpi	r24, 0x68	; 104
    5d16:	41 f4       	brne	.+16     	; 0x5d28 <vfprintf+0xf6>
    5d18:	f7 01       	movw	r30, r14
    5d1a:	93 fd       	sbrc	r25, 3
    5d1c:	85 91       	lpm	r24, Z+
    5d1e:	93 ff       	sbrs	r25, 3
    5d20:	81 91       	ld	r24, Z+
    5d22:	7f 01       	movw	r14, r30
    5d24:	81 11       	cpse	r24, r1
    5d26:	b3 cf       	rjmp	.-154    	; 0x5c8e <vfprintf+0x5c>
    5d28:	98 2f       	mov	r25, r24
    5d2a:	9f 7d       	andi	r25, 0xDF	; 223
    5d2c:	95 54       	subi	r25, 0x45	; 69
    5d2e:	93 30       	cpi	r25, 0x03	; 3
    5d30:	28 f4       	brcc	.+10     	; 0x5d3c <vfprintf+0x10a>
    5d32:	0c 5f       	subi	r16, 0xFC	; 252
    5d34:	1f 4f       	sbci	r17, 0xFF	; 255
    5d36:	9f e3       	ldi	r25, 0x3F	; 63
    5d38:	99 83       	std	Y+1, r25	; 0x01
    5d3a:	0d c0       	rjmp	.+26     	; 0x5d56 <vfprintf+0x124>
    5d3c:	83 36       	cpi	r24, 0x63	; 99
    5d3e:	31 f0       	breq	.+12     	; 0x5d4c <vfprintf+0x11a>
    5d40:	83 37       	cpi	r24, 0x73	; 115
    5d42:	71 f0       	breq	.+28     	; 0x5d60 <vfprintf+0x12e>
    5d44:	83 35       	cpi	r24, 0x53	; 83
    5d46:	09 f0       	breq	.+2      	; 0x5d4a <vfprintf+0x118>
    5d48:	59 c0       	rjmp	.+178    	; 0x5dfc <vfprintf+0x1ca>
    5d4a:	21 c0       	rjmp	.+66     	; 0x5d8e <vfprintf+0x15c>
    5d4c:	f8 01       	movw	r30, r16
    5d4e:	80 81       	ld	r24, Z
    5d50:	89 83       	std	Y+1, r24	; 0x01
    5d52:	0e 5f       	subi	r16, 0xFE	; 254
    5d54:	1f 4f       	sbci	r17, 0xFF	; 255
    5d56:	88 24       	eor	r8, r8
    5d58:	83 94       	inc	r8
    5d5a:	91 2c       	mov	r9, r1
    5d5c:	53 01       	movw	r10, r6
    5d5e:	13 c0       	rjmp	.+38     	; 0x5d86 <vfprintf+0x154>
    5d60:	28 01       	movw	r4, r16
    5d62:	f2 e0       	ldi	r31, 0x02	; 2
    5d64:	4f 0e       	add	r4, r31
    5d66:	51 1c       	adc	r5, r1
    5d68:	f8 01       	movw	r30, r16
    5d6a:	a0 80       	ld	r10, Z
    5d6c:	b1 80       	ldd	r11, Z+1	; 0x01
    5d6e:	36 fe       	sbrs	r3, 6
    5d70:	03 c0       	rjmp	.+6      	; 0x5d78 <vfprintf+0x146>
    5d72:	69 2d       	mov	r22, r9
    5d74:	70 e0       	ldi	r23, 0x00	; 0
    5d76:	02 c0       	rjmp	.+4      	; 0x5d7c <vfprintf+0x14a>
    5d78:	6f ef       	ldi	r22, 0xFF	; 255
    5d7a:	7f ef       	ldi	r23, 0xFF	; 255
    5d7c:	c5 01       	movw	r24, r10
    5d7e:	0e 94 05 30 	call	0x600a	; 0x600a <strnlen>
    5d82:	4c 01       	movw	r8, r24
    5d84:	82 01       	movw	r16, r4
    5d86:	f3 2d       	mov	r31, r3
    5d88:	ff 77       	andi	r31, 0x7F	; 127
    5d8a:	3f 2e       	mov	r3, r31
    5d8c:	16 c0       	rjmp	.+44     	; 0x5dba <vfprintf+0x188>
    5d8e:	28 01       	movw	r4, r16
    5d90:	22 e0       	ldi	r18, 0x02	; 2
    5d92:	42 0e       	add	r4, r18
    5d94:	51 1c       	adc	r5, r1
    5d96:	f8 01       	movw	r30, r16
    5d98:	a0 80       	ld	r10, Z
    5d9a:	b1 80       	ldd	r11, Z+1	; 0x01
    5d9c:	36 fe       	sbrs	r3, 6
    5d9e:	03 c0       	rjmp	.+6      	; 0x5da6 <vfprintf+0x174>
    5da0:	69 2d       	mov	r22, r9
    5da2:	70 e0       	ldi	r23, 0x00	; 0
    5da4:	02 c0       	rjmp	.+4      	; 0x5daa <vfprintf+0x178>
    5da6:	6f ef       	ldi	r22, 0xFF	; 255
    5da8:	7f ef       	ldi	r23, 0xFF	; 255
    5daa:	c5 01       	movw	r24, r10
    5dac:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <strnlen_P>
    5db0:	4c 01       	movw	r8, r24
    5db2:	f3 2d       	mov	r31, r3
    5db4:	f0 68       	ori	r31, 0x80	; 128
    5db6:	3f 2e       	mov	r3, r31
    5db8:	82 01       	movw	r16, r4
    5dba:	33 fc       	sbrc	r3, 3
    5dbc:	1b c0       	rjmp	.+54     	; 0x5df4 <vfprintf+0x1c2>
    5dbe:	82 2d       	mov	r24, r2
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	88 16       	cp	r8, r24
    5dc4:	99 06       	cpc	r9, r25
    5dc6:	b0 f4       	brcc	.+44     	; 0x5df4 <vfprintf+0x1c2>
    5dc8:	b6 01       	movw	r22, r12
    5dca:	80 e2       	ldi	r24, 0x20	; 32
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5dd2:	2a 94       	dec	r2
    5dd4:	f4 cf       	rjmp	.-24     	; 0x5dbe <vfprintf+0x18c>
    5dd6:	f5 01       	movw	r30, r10
    5dd8:	37 fc       	sbrc	r3, 7
    5dda:	85 91       	lpm	r24, Z+
    5ddc:	37 fe       	sbrs	r3, 7
    5dde:	81 91       	ld	r24, Z+
    5de0:	5f 01       	movw	r10, r30
    5de2:	b6 01       	movw	r22, r12
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5dea:	21 10       	cpse	r2, r1
    5dec:	2a 94       	dec	r2
    5dee:	21 e0       	ldi	r18, 0x01	; 1
    5df0:	82 1a       	sub	r8, r18
    5df2:	91 08       	sbc	r9, r1
    5df4:	81 14       	cp	r8, r1
    5df6:	91 04       	cpc	r9, r1
    5df8:	71 f7       	brne	.-36     	; 0x5dd6 <vfprintf+0x1a4>
    5dfa:	e8 c0       	rjmp	.+464    	; 0x5fcc <vfprintf+0x39a>
    5dfc:	84 36       	cpi	r24, 0x64	; 100
    5dfe:	11 f0       	breq	.+4      	; 0x5e04 <vfprintf+0x1d2>
    5e00:	89 36       	cpi	r24, 0x69	; 105
    5e02:	41 f5       	brne	.+80     	; 0x5e54 <vfprintf+0x222>
    5e04:	f8 01       	movw	r30, r16
    5e06:	37 fe       	sbrs	r3, 7
    5e08:	07 c0       	rjmp	.+14     	; 0x5e18 <vfprintf+0x1e6>
    5e0a:	60 81       	ld	r22, Z
    5e0c:	71 81       	ldd	r23, Z+1	; 0x01
    5e0e:	82 81       	ldd	r24, Z+2	; 0x02
    5e10:	93 81       	ldd	r25, Z+3	; 0x03
    5e12:	0c 5f       	subi	r16, 0xFC	; 252
    5e14:	1f 4f       	sbci	r17, 0xFF	; 255
    5e16:	08 c0       	rjmp	.+16     	; 0x5e28 <vfprintf+0x1f6>
    5e18:	60 81       	ld	r22, Z
    5e1a:	71 81       	ldd	r23, Z+1	; 0x01
    5e1c:	07 2e       	mov	r0, r23
    5e1e:	00 0c       	add	r0, r0
    5e20:	88 0b       	sbc	r24, r24
    5e22:	99 0b       	sbc	r25, r25
    5e24:	0e 5f       	subi	r16, 0xFE	; 254
    5e26:	1f 4f       	sbci	r17, 0xFF	; 255
    5e28:	f3 2d       	mov	r31, r3
    5e2a:	ff 76       	andi	r31, 0x6F	; 111
    5e2c:	3f 2e       	mov	r3, r31
    5e2e:	97 ff       	sbrs	r25, 7
    5e30:	09 c0       	rjmp	.+18     	; 0x5e44 <vfprintf+0x212>
    5e32:	90 95       	com	r25
    5e34:	80 95       	com	r24
    5e36:	70 95       	com	r23
    5e38:	61 95       	neg	r22
    5e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    5e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e40:	f0 68       	ori	r31, 0x80	; 128
    5e42:	3f 2e       	mov	r3, r31
    5e44:	2a e0       	ldi	r18, 0x0A	; 10
    5e46:	30 e0       	ldi	r19, 0x00	; 0
    5e48:	a3 01       	movw	r20, r6
    5e4a:	0e 94 4c 30 	call	0x6098	; 0x6098 <__ultoa_invert>
    5e4e:	88 2e       	mov	r8, r24
    5e50:	86 18       	sub	r8, r6
    5e52:	45 c0       	rjmp	.+138    	; 0x5ede <vfprintf+0x2ac>
    5e54:	85 37       	cpi	r24, 0x75	; 117
    5e56:	31 f4       	brne	.+12     	; 0x5e64 <vfprintf+0x232>
    5e58:	23 2d       	mov	r18, r3
    5e5a:	2f 7e       	andi	r18, 0xEF	; 239
    5e5c:	b2 2e       	mov	r11, r18
    5e5e:	2a e0       	ldi	r18, 0x0A	; 10
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	25 c0       	rjmp	.+74     	; 0x5eae <vfprintf+0x27c>
    5e64:	93 2d       	mov	r25, r3
    5e66:	99 7f       	andi	r25, 0xF9	; 249
    5e68:	b9 2e       	mov	r11, r25
    5e6a:	8f 36       	cpi	r24, 0x6F	; 111
    5e6c:	c1 f0       	breq	.+48     	; 0x5e9e <vfprintf+0x26c>
    5e6e:	18 f4       	brcc	.+6      	; 0x5e76 <vfprintf+0x244>
    5e70:	88 35       	cpi	r24, 0x58	; 88
    5e72:	79 f0       	breq	.+30     	; 0x5e92 <vfprintf+0x260>
    5e74:	b5 c0       	rjmp	.+362    	; 0x5fe0 <vfprintf+0x3ae>
    5e76:	80 37       	cpi	r24, 0x70	; 112
    5e78:	19 f0       	breq	.+6      	; 0x5e80 <vfprintf+0x24e>
    5e7a:	88 37       	cpi	r24, 0x78	; 120
    5e7c:	21 f0       	breq	.+8      	; 0x5e86 <vfprintf+0x254>
    5e7e:	b0 c0       	rjmp	.+352    	; 0x5fe0 <vfprintf+0x3ae>
    5e80:	e9 2f       	mov	r30, r25
    5e82:	e0 61       	ori	r30, 0x10	; 16
    5e84:	be 2e       	mov	r11, r30
    5e86:	b4 fe       	sbrs	r11, 4
    5e88:	0d c0       	rjmp	.+26     	; 0x5ea4 <vfprintf+0x272>
    5e8a:	fb 2d       	mov	r31, r11
    5e8c:	f4 60       	ori	r31, 0x04	; 4
    5e8e:	bf 2e       	mov	r11, r31
    5e90:	09 c0       	rjmp	.+18     	; 0x5ea4 <vfprintf+0x272>
    5e92:	34 fe       	sbrs	r3, 4
    5e94:	0a c0       	rjmp	.+20     	; 0x5eaa <vfprintf+0x278>
    5e96:	29 2f       	mov	r18, r25
    5e98:	26 60       	ori	r18, 0x06	; 6
    5e9a:	b2 2e       	mov	r11, r18
    5e9c:	06 c0       	rjmp	.+12     	; 0x5eaa <vfprintf+0x278>
    5e9e:	28 e0       	ldi	r18, 0x08	; 8
    5ea0:	30 e0       	ldi	r19, 0x00	; 0
    5ea2:	05 c0       	rjmp	.+10     	; 0x5eae <vfprintf+0x27c>
    5ea4:	20 e1       	ldi	r18, 0x10	; 16
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	02 c0       	rjmp	.+4      	; 0x5eae <vfprintf+0x27c>
    5eaa:	20 e1       	ldi	r18, 0x10	; 16
    5eac:	32 e0       	ldi	r19, 0x02	; 2
    5eae:	f8 01       	movw	r30, r16
    5eb0:	b7 fe       	sbrs	r11, 7
    5eb2:	07 c0       	rjmp	.+14     	; 0x5ec2 <vfprintf+0x290>
    5eb4:	60 81       	ld	r22, Z
    5eb6:	71 81       	ldd	r23, Z+1	; 0x01
    5eb8:	82 81       	ldd	r24, Z+2	; 0x02
    5eba:	93 81       	ldd	r25, Z+3	; 0x03
    5ebc:	0c 5f       	subi	r16, 0xFC	; 252
    5ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec0:	06 c0       	rjmp	.+12     	; 0x5ece <vfprintf+0x29c>
    5ec2:	60 81       	ld	r22, Z
    5ec4:	71 81       	ldd	r23, Z+1	; 0x01
    5ec6:	80 e0       	ldi	r24, 0x00	; 0
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	0e 5f       	subi	r16, 0xFE	; 254
    5ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ece:	a3 01       	movw	r20, r6
    5ed0:	0e 94 4c 30 	call	0x6098	; 0x6098 <__ultoa_invert>
    5ed4:	88 2e       	mov	r8, r24
    5ed6:	86 18       	sub	r8, r6
    5ed8:	fb 2d       	mov	r31, r11
    5eda:	ff 77       	andi	r31, 0x7F	; 127
    5edc:	3f 2e       	mov	r3, r31
    5ede:	36 fe       	sbrs	r3, 6
    5ee0:	0d c0       	rjmp	.+26     	; 0x5efc <vfprintf+0x2ca>
    5ee2:	23 2d       	mov	r18, r3
    5ee4:	2e 7f       	andi	r18, 0xFE	; 254
    5ee6:	a2 2e       	mov	r10, r18
    5ee8:	89 14       	cp	r8, r9
    5eea:	58 f4       	brcc	.+22     	; 0x5f02 <vfprintf+0x2d0>
    5eec:	34 fe       	sbrs	r3, 4
    5eee:	0b c0       	rjmp	.+22     	; 0x5f06 <vfprintf+0x2d4>
    5ef0:	32 fc       	sbrc	r3, 2
    5ef2:	09 c0       	rjmp	.+18     	; 0x5f06 <vfprintf+0x2d4>
    5ef4:	83 2d       	mov	r24, r3
    5ef6:	8e 7e       	andi	r24, 0xEE	; 238
    5ef8:	a8 2e       	mov	r10, r24
    5efa:	05 c0       	rjmp	.+10     	; 0x5f06 <vfprintf+0x2d4>
    5efc:	b8 2c       	mov	r11, r8
    5efe:	a3 2c       	mov	r10, r3
    5f00:	03 c0       	rjmp	.+6      	; 0x5f08 <vfprintf+0x2d6>
    5f02:	b8 2c       	mov	r11, r8
    5f04:	01 c0       	rjmp	.+2      	; 0x5f08 <vfprintf+0x2d6>
    5f06:	b9 2c       	mov	r11, r9
    5f08:	a4 fe       	sbrs	r10, 4
    5f0a:	0f c0       	rjmp	.+30     	; 0x5f2a <vfprintf+0x2f8>
    5f0c:	fe 01       	movw	r30, r28
    5f0e:	e8 0d       	add	r30, r8
    5f10:	f1 1d       	adc	r31, r1
    5f12:	80 81       	ld	r24, Z
    5f14:	80 33       	cpi	r24, 0x30	; 48
    5f16:	21 f4       	brne	.+8      	; 0x5f20 <vfprintf+0x2ee>
    5f18:	9a 2d       	mov	r25, r10
    5f1a:	99 7e       	andi	r25, 0xE9	; 233
    5f1c:	a9 2e       	mov	r10, r25
    5f1e:	09 c0       	rjmp	.+18     	; 0x5f32 <vfprintf+0x300>
    5f20:	a2 fe       	sbrs	r10, 2
    5f22:	06 c0       	rjmp	.+12     	; 0x5f30 <vfprintf+0x2fe>
    5f24:	b3 94       	inc	r11
    5f26:	b3 94       	inc	r11
    5f28:	04 c0       	rjmp	.+8      	; 0x5f32 <vfprintf+0x300>
    5f2a:	8a 2d       	mov	r24, r10
    5f2c:	86 78       	andi	r24, 0x86	; 134
    5f2e:	09 f0       	breq	.+2      	; 0x5f32 <vfprintf+0x300>
    5f30:	b3 94       	inc	r11
    5f32:	a3 fc       	sbrc	r10, 3
    5f34:	11 c0       	rjmp	.+34     	; 0x5f58 <vfprintf+0x326>
    5f36:	a0 fe       	sbrs	r10, 0
    5f38:	06 c0       	rjmp	.+12     	; 0x5f46 <vfprintf+0x314>
    5f3a:	b2 14       	cp	r11, r2
    5f3c:	88 f4       	brcc	.+34     	; 0x5f60 <vfprintf+0x32e>
    5f3e:	28 0c       	add	r2, r8
    5f40:	92 2c       	mov	r9, r2
    5f42:	9b 18       	sub	r9, r11
    5f44:	0e c0       	rjmp	.+28     	; 0x5f62 <vfprintf+0x330>
    5f46:	b2 14       	cp	r11, r2
    5f48:	60 f4       	brcc	.+24     	; 0x5f62 <vfprintf+0x330>
    5f4a:	b6 01       	movw	r22, r12
    5f4c:	80 e2       	ldi	r24, 0x20	; 32
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5f54:	b3 94       	inc	r11
    5f56:	f7 cf       	rjmp	.-18     	; 0x5f46 <vfprintf+0x314>
    5f58:	b2 14       	cp	r11, r2
    5f5a:	18 f4       	brcc	.+6      	; 0x5f62 <vfprintf+0x330>
    5f5c:	2b 18       	sub	r2, r11
    5f5e:	02 c0       	rjmp	.+4      	; 0x5f64 <vfprintf+0x332>
    5f60:	98 2c       	mov	r9, r8
    5f62:	21 2c       	mov	r2, r1
    5f64:	a4 fe       	sbrs	r10, 4
    5f66:	10 c0       	rjmp	.+32     	; 0x5f88 <vfprintf+0x356>
    5f68:	b6 01       	movw	r22, r12
    5f6a:	80 e3       	ldi	r24, 0x30	; 48
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5f72:	a2 fe       	sbrs	r10, 2
    5f74:	17 c0       	rjmp	.+46     	; 0x5fa4 <vfprintf+0x372>
    5f76:	a1 fc       	sbrc	r10, 1
    5f78:	03 c0       	rjmp	.+6      	; 0x5f80 <vfprintf+0x34e>
    5f7a:	88 e7       	ldi	r24, 0x78	; 120
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	02 c0       	rjmp	.+4      	; 0x5f84 <vfprintf+0x352>
    5f80:	88 e5       	ldi	r24, 0x58	; 88
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	b6 01       	movw	r22, r12
    5f86:	0c c0       	rjmp	.+24     	; 0x5fa0 <vfprintf+0x36e>
    5f88:	8a 2d       	mov	r24, r10
    5f8a:	86 78       	andi	r24, 0x86	; 134
    5f8c:	59 f0       	breq	.+22     	; 0x5fa4 <vfprintf+0x372>
    5f8e:	a1 fe       	sbrs	r10, 1
    5f90:	02 c0       	rjmp	.+4      	; 0x5f96 <vfprintf+0x364>
    5f92:	8b e2       	ldi	r24, 0x2B	; 43
    5f94:	01 c0       	rjmp	.+2      	; 0x5f98 <vfprintf+0x366>
    5f96:	80 e2       	ldi	r24, 0x20	; 32
    5f98:	a7 fc       	sbrc	r10, 7
    5f9a:	8d e2       	ldi	r24, 0x2D	; 45
    5f9c:	b6 01       	movw	r22, r12
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5fa4:	89 14       	cp	r8, r9
    5fa6:	38 f4       	brcc	.+14     	; 0x5fb6 <vfprintf+0x384>
    5fa8:	b6 01       	movw	r22, r12
    5faa:	80 e3       	ldi	r24, 0x30	; 48
    5fac:	90 e0       	ldi	r25, 0x00	; 0
    5fae:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5fb2:	9a 94       	dec	r9
    5fb4:	f7 cf       	rjmp	.-18     	; 0x5fa4 <vfprintf+0x372>
    5fb6:	8a 94       	dec	r8
    5fb8:	f3 01       	movw	r30, r6
    5fba:	e8 0d       	add	r30, r8
    5fbc:	f1 1d       	adc	r31, r1
    5fbe:	80 81       	ld	r24, Z
    5fc0:	b6 01       	movw	r22, r12
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5fc8:	81 10       	cpse	r8, r1
    5fca:	f5 cf       	rjmp	.-22     	; 0x5fb6 <vfprintf+0x384>
    5fcc:	22 20       	and	r2, r2
    5fce:	09 f4       	brne	.+2      	; 0x5fd2 <vfprintf+0x3a0>
    5fd0:	42 ce       	rjmp	.-892    	; 0x5c56 <vfprintf+0x24>
    5fd2:	b6 01       	movw	r22, r12
    5fd4:	80 e2       	ldi	r24, 0x20	; 32
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	0e 94 10 30 	call	0x6020	; 0x6020 <fputc>
    5fdc:	2a 94       	dec	r2
    5fde:	f6 cf       	rjmp	.-20     	; 0x5fcc <vfprintf+0x39a>
    5fe0:	f6 01       	movw	r30, r12
    5fe2:	86 81       	ldd	r24, Z+6	; 0x06
    5fe4:	97 81       	ldd	r25, Z+7	; 0x07
    5fe6:	02 c0       	rjmp	.+4      	; 0x5fec <vfprintf+0x3ba>
    5fe8:	8f ef       	ldi	r24, 0xFF	; 255
    5fea:	9f ef       	ldi	r25, 0xFF	; 255
    5fec:	2b 96       	adiw	r28, 0x0b	; 11
    5fee:	e2 e1       	ldi	r30, 0x12	; 18
    5ff0:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__epilogue_restores__>

00005ff4 <strnlen_P>:
    5ff4:	fc 01       	movw	r30, r24
    5ff6:	05 90       	lpm	r0, Z+
    5ff8:	61 50       	subi	r22, 0x01	; 1
    5ffa:	70 40       	sbci	r23, 0x00	; 0
    5ffc:	01 10       	cpse	r0, r1
    5ffe:	d8 f7       	brcc	.-10     	; 0x5ff6 <strnlen_P+0x2>
    6000:	80 95       	com	r24
    6002:	90 95       	com	r25
    6004:	8e 0f       	add	r24, r30
    6006:	9f 1f       	adc	r25, r31
    6008:	08 95       	ret

0000600a <strnlen>:
    600a:	fc 01       	movw	r30, r24
    600c:	61 50       	subi	r22, 0x01	; 1
    600e:	70 40       	sbci	r23, 0x00	; 0
    6010:	01 90       	ld	r0, Z+
    6012:	01 10       	cpse	r0, r1
    6014:	d8 f7       	brcc	.-10     	; 0x600c <strnlen+0x2>
    6016:	80 95       	com	r24
    6018:	90 95       	com	r25
    601a:	8e 0f       	add	r24, r30
    601c:	9f 1f       	adc	r25, r31
    601e:	08 95       	ret

00006020 <fputc>:
    6020:	0f 93       	push	r16
    6022:	1f 93       	push	r17
    6024:	cf 93       	push	r28
    6026:	df 93       	push	r29
    6028:	fb 01       	movw	r30, r22
    602a:	23 81       	ldd	r18, Z+3	; 0x03
    602c:	21 fd       	sbrc	r18, 1
    602e:	03 c0       	rjmp	.+6      	; 0x6036 <fputc+0x16>
    6030:	8f ef       	ldi	r24, 0xFF	; 255
    6032:	9f ef       	ldi	r25, 0xFF	; 255
    6034:	2c c0       	rjmp	.+88     	; 0x608e <fputc+0x6e>
    6036:	22 ff       	sbrs	r18, 2
    6038:	16 c0       	rjmp	.+44     	; 0x6066 <fputc+0x46>
    603a:	46 81       	ldd	r20, Z+6	; 0x06
    603c:	57 81       	ldd	r21, Z+7	; 0x07
    603e:	24 81       	ldd	r18, Z+4	; 0x04
    6040:	35 81       	ldd	r19, Z+5	; 0x05
    6042:	42 17       	cp	r20, r18
    6044:	53 07       	cpc	r21, r19
    6046:	44 f4       	brge	.+16     	; 0x6058 <fputc+0x38>
    6048:	a0 81       	ld	r26, Z
    604a:	b1 81       	ldd	r27, Z+1	; 0x01
    604c:	9d 01       	movw	r18, r26
    604e:	2f 5f       	subi	r18, 0xFF	; 255
    6050:	3f 4f       	sbci	r19, 0xFF	; 255
    6052:	31 83       	std	Z+1, r19	; 0x01
    6054:	20 83       	st	Z, r18
    6056:	8c 93       	st	X, r24
    6058:	26 81       	ldd	r18, Z+6	; 0x06
    605a:	37 81       	ldd	r19, Z+7	; 0x07
    605c:	2f 5f       	subi	r18, 0xFF	; 255
    605e:	3f 4f       	sbci	r19, 0xFF	; 255
    6060:	37 83       	std	Z+7, r19	; 0x07
    6062:	26 83       	std	Z+6, r18	; 0x06
    6064:	14 c0       	rjmp	.+40     	; 0x608e <fputc+0x6e>
    6066:	8b 01       	movw	r16, r22
    6068:	ec 01       	movw	r28, r24
    606a:	fb 01       	movw	r30, r22
    606c:	00 84       	ldd	r0, Z+8	; 0x08
    606e:	f1 85       	ldd	r31, Z+9	; 0x09
    6070:	e0 2d       	mov	r30, r0
    6072:	09 95       	icall
    6074:	89 2b       	or	r24, r25
    6076:	e1 f6       	brne	.-72     	; 0x6030 <fputc+0x10>
    6078:	d8 01       	movw	r26, r16
    607a:	16 96       	adiw	r26, 0x06	; 6
    607c:	8d 91       	ld	r24, X+
    607e:	9c 91       	ld	r25, X
    6080:	17 97       	sbiw	r26, 0x07	; 7
    6082:	01 96       	adiw	r24, 0x01	; 1
    6084:	17 96       	adiw	r26, 0x07	; 7
    6086:	9c 93       	st	X, r25
    6088:	8e 93       	st	-X, r24
    608a:	16 97       	sbiw	r26, 0x06	; 6
    608c:	ce 01       	movw	r24, r28
    608e:	df 91       	pop	r29
    6090:	cf 91       	pop	r28
    6092:	1f 91       	pop	r17
    6094:	0f 91       	pop	r16
    6096:	08 95       	ret

00006098 <__ultoa_invert>:
    6098:	fa 01       	movw	r30, r20
    609a:	aa 27       	eor	r26, r26
    609c:	28 30       	cpi	r18, 0x08	; 8
    609e:	51 f1       	breq	.+84     	; 0x60f4 <__ultoa_invert+0x5c>
    60a0:	20 31       	cpi	r18, 0x10	; 16
    60a2:	81 f1       	breq	.+96     	; 0x6104 <__ultoa_invert+0x6c>
    60a4:	e8 94       	clt
    60a6:	6f 93       	push	r22
    60a8:	6e 7f       	andi	r22, 0xFE	; 254
    60aa:	6e 5f       	subi	r22, 0xFE	; 254
    60ac:	7f 4f       	sbci	r23, 0xFF	; 255
    60ae:	8f 4f       	sbci	r24, 0xFF	; 255
    60b0:	9f 4f       	sbci	r25, 0xFF	; 255
    60b2:	af 4f       	sbci	r26, 0xFF	; 255
    60b4:	b1 e0       	ldi	r27, 0x01	; 1
    60b6:	3e d0       	rcall	.+124    	; 0x6134 <__ultoa_invert+0x9c>
    60b8:	b4 e0       	ldi	r27, 0x04	; 4
    60ba:	3c d0       	rcall	.+120    	; 0x6134 <__ultoa_invert+0x9c>
    60bc:	67 0f       	add	r22, r23
    60be:	78 1f       	adc	r23, r24
    60c0:	89 1f       	adc	r24, r25
    60c2:	9a 1f       	adc	r25, r26
    60c4:	a1 1d       	adc	r26, r1
    60c6:	68 0f       	add	r22, r24
    60c8:	79 1f       	adc	r23, r25
    60ca:	8a 1f       	adc	r24, r26
    60cc:	91 1d       	adc	r25, r1
    60ce:	a1 1d       	adc	r26, r1
    60d0:	6a 0f       	add	r22, r26
    60d2:	71 1d       	adc	r23, r1
    60d4:	81 1d       	adc	r24, r1
    60d6:	91 1d       	adc	r25, r1
    60d8:	a1 1d       	adc	r26, r1
    60da:	20 d0       	rcall	.+64     	; 0x611c <__ultoa_invert+0x84>
    60dc:	09 f4       	brne	.+2      	; 0x60e0 <__ultoa_invert+0x48>
    60de:	68 94       	set
    60e0:	3f 91       	pop	r19
    60e2:	2a e0       	ldi	r18, 0x0A	; 10
    60e4:	26 9f       	mul	r18, r22
    60e6:	11 24       	eor	r1, r1
    60e8:	30 19       	sub	r19, r0
    60ea:	30 5d       	subi	r19, 0xD0	; 208
    60ec:	31 93       	st	Z+, r19
    60ee:	de f6       	brtc	.-74     	; 0x60a6 <__ultoa_invert+0xe>
    60f0:	cf 01       	movw	r24, r30
    60f2:	08 95       	ret
    60f4:	46 2f       	mov	r20, r22
    60f6:	47 70       	andi	r20, 0x07	; 7
    60f8:	40 5d       	subi	r20, 0xD0	; 208
    60fa:	41 93       	st	Z+, r20
    60fc:	b3 e0       	ldi	r27, 0x03	; 3
    60fe:	0f d0       	rcall	.+30     	; 0x611e <__ultoa_invert+0x86>
    6100:	c9 f7       	brne	.-14     	; 0x60f4 <__ultoa_invert+0x5c>
    6102:	f6 cf       	rjmp	.-20     	; 0x60f0 <__ultoa_invert+0x58>
    6104:	46 2f       	mov	r20, r22
    6106:	4f 70       	andi	r20, 0x0F	; 15
    6108:	40 5d       	subi	r20, 0xD0	; 208
    610a:	4a 33       	cpi	r20, 0x3A	; 58
    610c:	18 f0       	brcs	.+6      	; 0x6114 <__ultoa_invert+0x7c>
    610e:	49 5d       	subi	r20, 0xD9	; 217
    6110:	31 fd       	sbrc	r19, 1
    6112:	40 52       	subi	r20, 0x20	; 32
    6114:	41 93       	st	Z+, r20
    6116:	02 d0       	rcall	.+4      	; 0x611c <__ultoa_invert+0x84>
    6118:	a9 f7       	brne	.-22     	; 0x6104 <__ultoa_invert+0x6c>
    611a:	ea cf       	rjmp	.-44     	; 0x60f0 <__ultoa_invert+0x58>
    611c:	b4 e0       	ldi	r27, 0x04	; 4
    611e:	a6 95       	lsr	r26
    6120:	97 95       	ror	r25
    6122:	87 95       	ror	r24
    6124:	77 95       	ror	r23
    6126:	67 95       	ror	r22
    6128:	ba 95       	dec	r27
    612a:	c9 f7       	brne	.-14     	; 0x611e <__ultoa_invert+0x86>
    612c:	00 97       	sbiw	r24, 0x00	; 0
    612e:	61 05       	cpc	r22, r1
    6130:	71 05       	cpc	r23, r1
    6132:	08 95       	ret
    6134:	9b 01       	movw	r18, r22
    6136:	ac 01       	movw	r20, r24
    6138:	0a 2e       	mov	r0, r26
    613a:	06 94       	lsr	r0
    613c:	57 95       	ror	r21
    613e:	47 95       	ror	r20
    6140:	37 95       	ror	r19
    6142:	27 95       	ror	r18
    6144:	ba 95       	dec	r27
    6146:	c9 f7       	brne	.-14     	; 0x613a <__ultoa_invert+0xa2>
    6148:	62 0f       	add	r22, r18
    614a:	73 1f       	adc	r23, r19
    614c:	84 1f       	adc	r24, r20
    614e:	95 1f       	adc	r25, r21
    6150:	a0 1d       	adc	r26, r0
    6152:	08 95       	ret

00006154 <eeprom_read_byte>:
    6154:	f9 99       	sbic	0x1f, 1	; 31
    6156:	fe cf       	rjmp	.-4      	; 0x6154 <eeprom_read_byte>
    6158:	92 bd       	out	0x22, r25	; 34
    615a:	81 bd       	out	0x21, r24	; 33
    615c:	f8 9a       	sbi	0x1f, 0	; 31
    615e:	99 27       	eor	r25, r25
    6160:	80 b5       	in	r24, 0x20	; 32
    6162:	08 95       	ret

00006164 <eeprom_read_dword>:
    6164:	a6 e1       	ldi	r26, 0x16	; 22
    6166:	b0 e0       	ldi	r27, 0x00	; 0
    6168:	44 e0       	ldi	r20, 0x04	; 4
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	0c 94 ff 30 	jmp	0x61fe	; 0x61fe <eeprom_read_blraw>

00006170 <eeprom_read_word>:
    6170:	a8 e1       	ldi	r26, 0x18	; 24
    6172:	b0 e0       	ldi	r27, 0x00	; 0
    6174:	42 e0       	ldi	r20, 0x02	; 2
    6176:	50 e0       	ldi	r21, 0x00	; 0
    6178:	0c 94 ff 30 	jmp	0x61fe	; 0x61fe <eeprom_read_blraw>

0000617c <eeprom_update_byte>:
    617c:	26 2f       	mov	r18, r22

0000617e <eeprom_update_r18>:
    617e:	f9 99       	sbic	0x1f, 1	; 31
    6180:	fe cf       	rjmp	.-4      	; 0x617e <eeprom_update_r18>
    6182:	92 bd       	out	0x22, r25	; 34
    6184:	81 bd       	out	0x21, r24	; 33
    6186:	f8 9a       	sbi	0x1f, 0	; 31
    6188:	01 97       	sbiw	r24, 0x01	; 1
    618a:	00 b4       	in	r0, 0x20	; 32
    618c:	02 16       	cp	r0, r18
    618e:	39 f0       	breq	.+14     	; 0x619e <eeprom_update_r18+0x20>
    6190:	1f ba       	out	0x1f, r1	; 31
    6192:	20 bd       	out	0x20, r18	; 32
    6194:	0f b6       	in	r0, 0x3f	; 63
    6196:	f8 94       	cli
    6198:	fa 9a       	sbi	0x1f, 2	; 31
    619a:	f9 9a       	sbi	0x1f, 1	; 31
    619c:	0f be       	out	0x3f, r0	; 63
    619e:	08 95       	ret

000061a0 <eeprom_update_dword>:
    61a0:	03 96       	adiw	r24, 0x03	; 3
    61a2:	27 2f       	mov	r18, r23
    61a4:	0e 94 bf 30 	call	0x617e	; 0x617e <eeprom_update_r18>
    61a8:	0e 94 be 30 	call	0x617c	; 0x617c <eeprom_update_byte>
    61ac:	25 2f       	mov	r18, r21
    61ae:	0e 94 bf 30 	call	0x617e	; 0x617e <eeprom_update_r18>
    61b2:	24 2f       	mov	r18, r20
    61b4:	0c 94 bf 30 	jmp	0x617e	; 0x617e <eeprom_update_r18>

000061b8 <eeprom_update_word>:
    61b8:	01 96       	adiw	r24, 0x01	; 1
    61ba:	27 2f       	mov	r18, r23
    61bc:	0e 94 bf 30 	call	0x617e	; 0x617e <eeprom_update_r18>
    61c0:	0c 94 be 30 	jmp	0x617c	; 0x617c <eeprom_update_byte>

000061c4 <eeprom_write_byte>:
    61c4:	26 2f       	mov	r18, r22

000061c6 <eeprom_write_r18>:
    61c6:	f9 99       	sbic	0x1f, 1	; 31
    61c8:	fe cf       	rjmp	.-4      	; 0x61c6 <eeprom_write_r18>
    61ca:	1f ba       	out	0x1f, r1	; 31
    61cc:	92 bd       	out	0x22, r25	; 34
    61ce:	81 bd       	out	0x21, r24	; 33
    61d0:	20 bd       	out	0x20, r18	; 32
    61d2:	0f b6       	in	r0, 0x3f	; 63
    61d4:	f8 94       	cli
    61d6:	fa 9a       	sbi	0x1f, 2	; 31
    61d8:	f9 9a       	sbi	0x1f, 1	; 31
    61da:	0f be       	out	0x3f, r0	; 63
    61dc:	01 96       	adiw	r24, 0x01	; 1
    61de:	08 95       	ret

000061e0 <eeprom_write_dword>:
    61e0:	24 2f       	mov	r18, r20
    61e2:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <eeprom_write_r18>
    61e6:	25 2f       	mov	r18, r21
    61e8:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <eeprom_write_r18>
    61ec:	0c 94 f8 30 	jmp	0x61f0	; 0x61f0 <eeprom_write_word>

000061f0 <eeprom_write_word>:
    61f0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <eeprom_write_byte>
    61f4:	27 2f       	mov	r18, r23
    61f6:	0c 94 e3 30 	jmp	0x61c6	; 0x61c6 <eeprom_write_r18>

000061fa <eeprom_read_block>:
    61fa:	dc 01       	movw	r26, r24
    61fc:	cb 01       	movw	r24, r22

000061fe <eeprom_read_blraw>:
    61fe:	fc 01       	movw	r30, r24
    6200:	f9 99       	sbic	0x1f, 1	; 31
    6202:	fe cf       	rjmp	.-4      	; 0x6200 <eeprom_read_blraw+0x2>
    6204:	06 c0       	rjmp	.+12     	; 0x6212 <eeprom_read_blraw+0x14>
    6206:	f2 bd       	out	0x22, r31	; 34
    6208:	e1 bd       	out	0x21, r30	; 33
    620a:	f8 9a       	sbi	0x1f, 0	; 31
    620c:	31 96       	adiw	r30, 0x01	; 1
    620e:	00 b4       	in	r0, 0x20	; 32
    6210:	0d 92       	st	X+, r0
    6212:	41 50       	subi	r20, 0x01	; 1
    6214:	50 40       	sbci	r21, 0x00	; 0
    6216:	b8 f7       	brcc	.-18     	; 0x6206 <eeprom_read_blraw+0x8>
    6218:	08 95       	ret

0000621a <__prologue_saves__>:
    621a:	2f 92       	push	r2
    621c:	3f 92       	push	r3
    621e:	4f 92       	push	r4
    6220:	5f 92       	push	r5
    6222:	6f 92       	push	r6
    6224:	7f 92       	push	r7
    6226:	8f 92       	push	r8
    6228:	9f 92       	push	r9
    622a:	af 92       	push	r10
    622c:	bf 92       	push	r11
    622e:	cf 92       	push	r12
    6230:	df 92       	push	r13
    6232:	ef 92       	push	r14
    6234:	ff 92       	push	r15
    6236:	0f 93       	push	r16
    6238:	1f 93       	push	r17
    623a:	cf 93       	push	r28
    623c:	df 93       	push	r29
    623e:	cd b7       	in	r28, 0x3d	; 61
    6240:	de b7       	in	r29, 0x3e	; 62
    6242:	ca 1b       	sub	r28, r26
    6244:	db 0b       	sbc	r29, r27
    6246:	0f b6       	in	r0, 0x3f	; 63
    6248:	f8 94       	cli
    624a:	de bf       	out	0x3e, r29	; 62
    624c:	0f be       	out	0x3f, r0	; 63
    624e:	cd bf       	out	0x3d, r28	; 61
    6250:	09 94       	ijmp

00006252 <__epilogue_restores__>:
    6252:	2a 88       	ldd	r2, Y+18	; 0x12
    6254:	39 88       	ldd	r3, Y+17	; 0x11
    6256:	48 88       	ldd	r4, Y+16	; 0x10
    6258:	5f 84       	ldd	r5, Y+15	; 0x0f
    625a:	6e 84       	ldd	r6, Y+14	; 0x0e
    625c:	7d 84       	ldd	r7, Y+13	; 0x0d
    625e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6260:	9b 84       	ldd	r9, Y+11	; 0x0b
    6262:	aa 84       	ldd	r10, Y+10	; 0x0a
    6264:	b9 84       	ldd	r11, Y+9	; 0x09
    6266:	c8 84       	ldd	r12, Y+8	; 0x08
    6268:	df 80       	ldd	r13, Y+7	; 0x07
    626a:	ee 80       	ldd	r14, Y+6	; 0x06
    626c:	fd 80       	ldd	r15, Y+5	; 0x05
    626e:	0c 81       	ldd	r16, Y+4	; 0x04
    6270:	1b 81       	ldd	r17, Y+3	; 0x03
    6272:	aa 81       	ldd	r26, Y+2	; 0x02
    6274:	b9 81       	ldd	r27, Y+1	; 0x01
    6276:	ce 0f       	add	r28, r30
    6278:	d1 1d       	adc	r29, r1
    627a:	0f b6       	in	r0, 0x3f	; 63
    627c:	f8 94       	cli
    627e:	de bf       	out	0x3e, r29	; 62
    6280:	0f be       	out	0x3f, r0	; 63
    6282:	cd bf       	out	0x3d, r28	; 61
    6284:	ed 01       	movw	r28, r26
    6286:	08 95       	ret

00006288 <__do_global_dtors>:
    6288:	11 e0       	ldi	r17, 0x01	; 1
    628a:	c0 e0       	ldi	r28, 0x00	; 0
    628c:	d1 e0       	ldi	r29, 0x01	; 1
    628e:	04 c0       	rjmp	.+8      	; 0x6298 <__do_global_dtors+0x10>
    6290:	fe 01       	movw	r30, r28
    6292:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__tablejump2__>
    6296:	21 96       	adiw	r28, 0x01	; 1
    6298:	c1 30       	cpi	r28, 0x01	; 1
    629a:	d1 07       	cpc	r29, r17
    629c:	c9 f7       	brne	.-14     	; 0x6290 <__do_global_dtors+0x8>
    629e:	f8 94       	cli

000062a0 <__stop_program>:
    62a0:	ff cf       	rjmp	.-2      	; 0x62a0 <__stop_program>
