
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800100  00004f36  00004fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f36  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000247  0080029e  0080029e  00005188  2**0
                  ALLOC
  3 .eeprom       000002e9  00810000  00810000  00005188  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00005471  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000054d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000480  00000000  00000000  00005510  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006cdc  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001668  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d7b  00000000  00000000  0000dcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bf4  00000000  00000000  00011a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001eb4  00000000  00000000  00012644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000502d  00000000  00000000  000144f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  00019525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 02 	jmp	0x42c	; 0x42c <__dtors_end>
       4:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__vector_1>
       8:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
       c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      10:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      14:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_5>
      18:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      1c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      20:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_8>
      24:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      28:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      2c:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_11>
      30:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      34:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      38:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_14>
      3c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      40:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      44:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      48:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_18>
      4c:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_19>
      50:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      54:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_21>
      58:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      5c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      60:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      64:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__bad_interrupt>
      68:	6c 02       	muls	r22, r28
      6a:	77 02       	muls	r23, r23
      6c:	82 02       	muls	r24, r18
      6e:	8d 02       	muls	r24, r29
      70:	98 02       	muls	r25, r24
      72:	a3 02       	muls	r26, r19
      74:	ae 02       	muls	r26, r30
      76:	b9 02       	muls	r27, r25
      78:	c4 02       	muls	r28, r20
      7a:	25 03       	mulsu	r18, r21
      7c:	25 03       	mulsu	r18, r21
      7e:	cf 02       	muls	r28, r31
      80:	da 02       	muls	r29, r26
      82:	e7 02       	muls	r30, r23
      84:	f4 02       	muls	r31, r20
      86:	01 03       	mulsu	r16, r17
      88:	0e 03       	fmul	r16, r22
      8a:	1b 03       	fmul	r17, r19
      8c:	30 03       	mulsu	r19, r16
      8e:	34 03       	mulsu	r19, r20
      90:	38 03       	fmul	r19, r16
      92:	3c 03       	fmul	r19, r20
      94:	40 03       	mulsu	r20, r16
      96:	44 03       	mulsu	r20, r20
      98:	48 03       	fmul	r20, r16
      9a:	49 03       	fmul	r20, r17
      9c:	4a 03       	fmul	r20, r18
      9e:	60 03       	mulsu	r22, r16
      a0:	60 03       	mulsu	r22, r16
      a2:	4b 03       	fmul	r20, r19
      a4:	4f 03       	fmul	r20, r23
      a6:	54 03       	mulsu	r21, r20
      a8:	58 03       	fmul	r21, r16
      aa:	5c 03       	fmul	r21, r20
      ac:	72 03       	mulsu	r23, r18
      ae:	78 03       	fmul	r23, r16
      b0:	7e 03       	fmul	r23, r22
      b2:	84 03       	fmuls	r16, r20
      b4:	8a 03       	fmulsu	r16, r18
      b6:	90 03       	fmuls	r17, r16
      b8:	96 03       	fmuls	r17, r22
      ba:	9c 03       	fmulsu	r17, r20
      bc:	a2 03       	fmuls	r18, r18
      be:	c5 03       	fmuls	r20, r21
      c0:	c5 03       	fmuls	r20, r21
      c2:	a8 03       	fmulsu	r18, r16
      c4:	ae 03       	fmulsu	r18, r22
      c6:	b4 03       	fmuls	r19, r20
      c8:	ba 03       	fmulsu	r19, r18
      ca:	c0 03       	fmuls	r20, r16
      cc:	e6 03       	fmuls	r22, r22
      ce:	24 04       	cpc	r2, r4
      d0:	24 04       	cpc	r2, r4
      d2:	12 04       	cpc	r1, r2
      d4:	e3 03       	fmuls	r22, r19
      d6:	15 04       	cpc	r1, r5
      d8:	1b 04       	cpc	r1, r11
      da:	e0 03       	fmuls	r22, r16
      dc:	03 04       	cpc	r0, r3
      de:	06 04       	cpc	r0, r6
      e0:	09 04       	cpc	r0, r9
      e2:	dd 03       	fmulsu	r21, r21
      e4:	1e 04       	cpc	r1, r14
      e6:	67 04       	cpc	r6, r7
      e8:	39 04       	cpc	r3, r9
      ea:	6a 04       	cpc	r6, r10
      ec:	3c 04       	cpc	r3, r12
      ee:	3f 04       	cpc	r3, r15
      f0:	42 04       	cpc	r4, r2
      f2:	45 04       	cpc	r4, r5
      f4:	48 04       	cpc	r4, r8
      f6:	4b 04       	cpc	r4, r11
      f8:	4e 04       	cpc	r4, r14
      fa:	51 04       	cpc	r5, r1
      fc:	c8 0f       	add	r28, r24
      fe:	c8 0f       	add	r28, r24
     100:	c8 0f       	add	r28, r24
     102:	c8 0f       	add	r28, r24
     104:	c8 0f       	add	r28, r24
     106:	c8 0f       	add	r28, r24
     108:	1b 10       	cpse	r1, r11
     10a:	1b 10       	cpse	r1, r11
     10c:	e6 0f       	add	r30, r22
     10e:	1b 10       	cpse	r1, r11
     110:	1b 10       	cpse	r1, r11
     112:	1b 10       	cpse	r1, r11
     114:	1b 10       	cpse	r1, r11
     116:	1b 10       	cpse	r1, r11
     118:	1b 10       	cpse	r1, r11
     11a:	1b 10       	cpse	r1, r11
     11c:	1b 10       	cpse	r1, r11
     11e:	e6 0f       	add	r30, r22
     120:	e6 0f       	add	r30, r22
     122:	b4 0f       	add	r27, r20
     124:	be 0f       	add	r27, r30
     126:	8f 1c       	adc	r8, r15
     128:	53 1c       	adc	r5, r3
     12a:	7f 1c       	adc	r7, r15
     12c:	97 1c       	adc	r9, r7
     12e:	83 1c       	adc	r8, r3
     130:	97 1c       	adc	r9, r7
     132:	63 1c       	adc	r6, r3
     134:	4f 1c       	adc	r4, r15
     136:	5b 1c       	adc	r5, r11
     138:	5f 1c       	adc	r5, r15
     13a:	97 1c       	adc	r9, r7
     13c:	73 1c       	adc	r7, r3
     13e:	47 1c       	adc	r4, r7
     140:	77 1c       	adc	r7, r7
     142:	43 1c       	adc	r4, r3
     144:	57 1c       	adc	r5, r7
     146:	1b 1c       	adc	r1, r11
     148:	1f 1c       	adc	r1, r15
     14a:	23 1c       	adc	r2, r3
     14c:	27 1c       	adc	r2, r7
     14e:	2b 1c       	adc	r2, r11
     150:	2f 1c       	adc	r2, r15
     152:	33 1c       	adc	r3, r3
     154:	37 1c       	adc	r3, r7
     156:	3b 1c       	adc	r3, r11
     158:	3f 1c       	adc	r3, r15
     15a:	67 1c       	adc	r6, r7
     15c:	6b 1c       	adc	r6, r11
     15e:	93 1c       	adc	r9, r3
     160:	6f 1c       	adc	r6, r15
     162:	97 1c       	adc	r9, r7
     164:	4b 1c       	adc	r4, r11
     166:	87 1c       	adc	r8, r7
     168:	9b 1c       	adc	r9, r11
     16a:	b7 1b       	sub	r27, r23
     16c:	bb 1b       	sub	r27, r27
     16e:	bf 1b       	sub	r27, r31
     170:	c3 1b       	sub	r28, r19
     172:	c7 1b       	sub	r28, r23
     174:	cb 1b       	sub	r28, r27
     176:	cf 1b       	sub	r28, r31
     178:	d3 1b       	sub	r29, r19
     17a:	d7 1b       	sub	r29, r23
     17c:	db 1b       	sub	r29, r27
     17e:	df 1b       	sub	r29, r31
     180:	e3 1b       	sub	r30, r19
     182:	e7 1b       	sub	r30, r23
     184:	eb 1b       	sub	r30, r27
     186:	ef 1b       	sub	r30, r31
     188:	f3 1b       	sub	r31, r19
     18a:	f7 1b       	sub	r31, r23
     18c:	fb 1b       	sub	r31, r27
     18e:	ff 1b       	sub	r31, r31
     190:	03 1c       	adc	r0, r3
     192:	07 1c       	adc	r0, r7
     194:	0b 1c       	adc	r0, r11
     196:	0f 1c       	adc	r0, r15
     198:	13 1c       	adc	r1, r3
     19a:	17 1c       	adc	r1, r7
     19c:	97 1c       	adc	r9, r7
     19e:	97 1c       	adc	r9, r7
     1a0:	97 1c       	adc	r9, r7
     1a2:	97 1c       	adc	r9, r7
     1a4:	7b 1c       	adc	r7, r11
     1a6:	97 1c       	adc	r9, r7
     1a8:	97 1c       	adc	r9, r7
     1aa:	97 1c       	adc	r9, r7
     1ac:	97 1c       	adc	r9, r7
     1ae:	97 1c       	adc	r9, r7
     1b0:	97 1c       	adc	r9, r7
     1b2:	97 1c       	adc	r9, r7
     1b4:	97 1c       	adc	r9, r7
     1b6:	97 1c       	adc	r9, r7
     1b8:	97 1c       	adc	r9, r7
     1ba:	97 1c       	adc	r9, r7
     1bc:	97 1c       	adc	r9, r7
     1be:	97 1c       	adc	r9, r7
     1c0:	97 1c       	adc	r9, r7
     1c2:	97 1c       	adc	r9, r7
     1c4:	97 1c       	adc	r9, r7
     1c6:	97 1c       	adc	r9, r7
     1c8:	97 1c       	adc	r9, r7
     1ca:	97 1c       	adc	r9, r7
     1cc:	97 1c       	adc	r9, r7
     1ce:	97 1c       	adc	r9, r7
     1d0:	97 1c       	adc	r9, r7
     1d2:	97 1c       	adc	r9, r7
     1d4:	97 1c       	adc	r9, r7
     1d6:	97 1c       	adc	r9, r7
     1d8:	97 1c       	adc	r9, r7
     1da:	97 1c       	adc	r9, r7
     1dc:	97 1c       	adc	r9, r7
     1de:	8b 1c       	adc	r8, r11
     1e0:	05 a8       	ldd	r0, Z+53	; 0x35
     1e2:	4c cd       	rjmp	.-1384   	; 0xfffffc7c <__eeprom_end+0xff7ef993>
     1e4:	b2 d4       	rcall	.+2404   	; 0xb4a <__stack+0x24b>
     1e6:	4e b9       	out	0x0e, r20	; 14
     1e8:	38 36       	cpi	r19, 0x68	; 104
     1ea:	a9 02       	muls	r26, r25
     1ec:	0c 50       	subi	r16, 0x0C	; 12
     1ee:	b9 91       	ld	r27, Y+
     1f0:	86 88       	ldd	r8, Z+22	; 0x16
     1f2:	08 3c       	cpi	r16, 0xC8	; 200
     1f4:	a6 aa       	std	Z+54, r10	; 0x36
     1f6:	aa 2a       	or	r10, r26
     1f8:	be 00       	.word	0x00be	; ????
     1fa:	00 00       	nop
     1fc:	80 3f       	cpi	r24, 0xF0	; 240

000001fe <__trampolines_end>:
     1fe:	45 72       	andi	r20, 0x25	; 37
     200:	72 3a       	cpi	r23, 0xA2	; 162
     202:	20 54       	subi	r18, 0x40	; 64
     204:	69 6d       	ori	r22, 0xD9	; 217
     206:	65 20       	and	r6, r5
     208:	69 6e       	ori	r22, 0xE9	; 233
     20a:	20 70       	andi	r18, 0x00	; 0
     20c:	61 73       	andi	r22, 0x31	; 49
     20e:	74 21       	and	r23, r4
     210:	0a 00       	.word	0x000a	; ????

00000212 <_ZL21TEXT_ERR_INVALID_TIME>:
     212:	45 72 72 3a 20 49 6e 76 61 6c 69 64 20 74 69 6d     Err: Invalid tim
     222:	65 21 0a 00                                         e!..

00000226 <_ZL22TEXT_ERR_START_IN_PAST>:
     226:	45 72 72 3a 20 53 74 61 72 74 20 69 6e 20 70 61     Err: Start in pa
     236:	73 74 21 0a 00                                      st!..

0000023b <_ZL23TEXT_ERR_FINISH_IN_PAST>:
     23b:	45 72 72 3a 20 46 69 6e 69 73 68 20 69 6e 20 70     Err: Finish in p
     24b:	61 73 74 21 0a 00                                   ast!..

00000251 <_ZL28TEXT_ERR_FINISH_BEFORE_START>:
     251:	45 72 72 3a 20 46 69 6e 69 73 68 20 62 65 66 6f     Err: Finish befo
     261:	72 65 20 73 74 61 72 74 21 0a 00                    re start!..

0000026c <_ZL11TEXT_SET_ID>:
     26c:	49 44 20 5b 22 63 61 6c 6c 73 69 67 6e 22 5d 20     ID ["callsign"] 
     27c:	3c 2d 20 53 65 74 20 63 61 6c 6c 73 69 67 6e 0a     <- Set callsign.
	...

0000028d <_ZL15TEXT_SET_FINISH>:
     28d:	43 4c 4b 20 46 20 59 59 4d 4d 44 44 68 68 6d 6d     CLK F YYMMDDhhmm
     29d:	73 73 20 3c 2d 20 53 65 74 20 66 69 6e 69 73 68     ss <- Set finish
     2ad:	20 74 69 6d 65 0a 00                                 time..

000002b4 <_ZL14TEXT_SET_START>:
     2b4:	43 4c 4b 20 53 20 59 59 4d 4d 44 44 68 68 6d 6d     CLK S YYMMDDhhmm
     2c4:	73 73 20 3c 2d 20 53 65 74 20 73 74 61 72 74 20     ss <- Set start 
     2d4:	74 69 6d 65 0a 00                                   time..

000002da <_ZL13TEXT_SET_TIME>:
     2da:	43 4c 4b 20 54 20 59 59 4d 4d 44 44 68 68 6d 6d     CLK T YYMMDDhhmm
     2ea:	73 73 20 3c 2d 20 53 65 74 20 63 75 72 72 65 6e     ss <- Set curren
     2fa:	74 20 74 69 6d 65 0a 00                             t time..

00000302 <_ZL9HELP_TEXT>:
     302:	0a 43 6f 6d 6d 61 6e 64 73 3a 0a 20 20 43 4c 4b     .Commands:.  CLK
     312:	20 5b 54 7c 53 7c 46 20 5b 22 59 59 4d 4d 44 44      [T|S|F ["YYMMDD
     322:	68 68 6d 6d 73 73 22 5d 5d 20 2d 20 52 65 61 64     hhmmss"]] - Read
     332:	2f 73 65 74 20 74 69 6d 65 2f 73 74 61 72 74 2f     /set time/start/
     342:	66 69 6e 69 73 68 0a 20 20 46 4f 58 20 5b 6e 5d     finish.  FOX [n]
     352:	2d 20 53 65 74 20 66 6f 78 20 72 6f 6c 65 0a 20     - Set fox role. 
     362:	20 49 44 20 5b 63 2e 2e 2e 63 5d 20 2d 20 20 53      ID [c...c] -  S
     372:	65 74 20 63 61 6c 6c 73 69 67 6e 0a 20 20 53 54     et callsign.  ST
     382:	41 20 5b 30 7c 31 5d 20 2d 20 53 74 61 72 74 20     A [0|1] - Start 
     392:	74 6f 6e 65 73 20 6f 6e 2f 6f 66 66 0a 20 20 53     tones on/off.  S
     3a2:	59 4e 20 30 7c 31 7c 32 20 2d 20 53 79 6e 63 68     YN 0|1|2 - Synch
     3b2:	72 6f 6e 69 7a 65 0a 20 20 54 45 4d 20 2d 20 52     ronize.  TEM - R
     3c2:	65 61 64 20 74 65 6d 70 0a 20 20 53 50 44 20 5b     ead temp.  SPD [
     3d2:	73 5d 20 2d 20 53 65 74 20 49 44 20 63 6f 64 65     s] - Set ID code
     3e2:	20 73 70 65 65 64 0a 20 20 56 45 52 20 2d 20 53      speed.  VER - S
     3f2:	2f 57 20 76 65 72 73 69 6f 6e 00                    /W version.

000003fd <_ZL17PRODUCT_NAME_LONG>:
     3fd:	2a 2a 2a 20 41 72 64 75 63 6f 6e 20 46 6f 78 20     *** Arducon Fox 
     40d:	43 6f 6e 74 72 6f 6c 6c 65 72 20 56 65 72 2e 20     Controller Ver. 
     41d:	30 2e 31 39 20 2a 2a 2a 0a 00 00                    0.19 ***...

00000428 <__ctors_start>:
     428:	a2 1b       	sub	r26, r18

0000042a <__ctors_end>:
     42a:	a7 1b       	sub	r26, r23

0000042c <__dtors_end>:
     42c:	11 24       	eor	r1, r1
     42e:	1f be       	out	0x3f, r1	; 63
     430:	cf ef       	ldi	r28, 0xFF	; 255
     432:	d8 e0       	ldi	r29, 0x08	; 8
     434:	de bf       	out	0x3e, r29	; 62
     436:	cd bf       	out	0x3d, r28	; 61

00000438 <__do_copy_data>:
     438:	12 e0       	ldi	r17, 0x02	; 2
     43a:	a0 e0       	ldi	r26, 0x00	; 0
     43c:	b1 e0       	ldi	r27, 0x01	; 1
     43e:	e6 e3       	ldi	r30, 0x36	; 54
     440:	ff e4       	ldi	r31, 0x4F	; 79
     442:	02 c0       	rjmp	.+4      	; 0x448 <__do_copy_data+0x10>
     444:	05 90       	lpm	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	ae 39       	cpi	r26, 0x9E	; 158
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <__do_copy_data+0xc>

0000044e <__do_clear_bss>:
     44e:	24 e0       	ldi	r18, 0x04	; 4
     450:	ae e9       	ldi	r26, 0x9E	; 158
     452:	b2 e0       	ldi	r27, 0x02	; 2
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	a5 3e       	cpi	r26, 0xE5	; 229
     45a:	b2 07       	cpc	r27, r18
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>

0000045e <__do_global_ctors>:
     45e:	12 e0       	ldi	r17, 0x02	; 2
     460:	c5 e1       	ldi	r28, 0x15	; 21
     462:	d2 e0       	ldi	r29, 0x02	; 2
     464:	04 c0       	rjmp	.+8      	; 0x46e <__do_global_ctors+0x10>
     466:	21 97       	sbiw	r28, 0x01	; 1
     468:	fe 01       	movw	r30, r28
     46a:	0e 94 87 23 	call	0x470e	; 0x470e <__tablejump2__>
     46e:	c4 31       	cpi	r28, 0x14	; 20
     470:	d1 07       	cpc	r29, r17
     472:	c9 f7       	brne	.-14     	; 0x466 <__do_global_ctors+0x8>
     474:	0e 94 ad 1a 	call	0x355a	; 0x355a <main>
     478:	0c 94 8e 27 	jmp	0x4f1c	; 0x4f1c <__do_global_dtors>

0000047c <__bad_interrupt>:
     47c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000480 <month_length>:
     480:	62 30       	cpi	r22, 0x02	; 2
     482:	21 f4       	brne	.+8      	; 0x48c <month_length+0xc>
     484:	0e 94 4d 02 	call	0x49a	; 0x49a <is_leap_year>
     488:	84 5e       	subi	r24, 0xE4	; 228
     48a:	08 95       	ret
     48c:	68 30       	cpi	r22, 0x08	; 8
     48e:	08 f0       	brcs	.+2      	; 0x492 <month_length+0x12>
     490:	6f 5f       	subi	r22, 0xFF	; 255
     492:	61 70       	andi	r22, 0x01	; 1
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	86 0f       	add	r24, r22
     498:	08 95       	ret

0000049a <is_leap_year>:
     49a:	9c 01       	movw	r18, r24
     49c:	23 70       	andi	r18, 0x03	; 3
     49e:	33 27       	eor	r19, r19
     4a0:	23 2b       	or	r18, r19
     4a2:	59 f4       	brne	.+22     	; 0x4ba <is_leap_year+0x20>
     4a4:	64 e6       	ldi	r22, 0x64	; 100
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	0e 94 32 23 	call	0x4664	; 0x4664 <__divmodhi4>
     4ac:	89 2b       	or	r24, r25
     4ae:	39 f4       	brne	.+14     	; 0x4be <is_leap_year+0x24>
     4b0:	63 70       	andi	r22, 0x03	; 3
     4b2:	77 27       	eor	r23, r23
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	67 2b       	or	r22, r23
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <is_leap_year+0x26>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	08 95       	ret
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	08 95       	ret

000004c2 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	fc 01       	movw	r30, r24
     4c6:	32 97       	sbiw	r30, 0x02	; 2
     4c8:	e2 31       	cpi	r30, 0x12	; 18
     4ca:	f1 05       	cpc	r31, r1
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <_Z7pinModehh+0xe>
     4ce:	bd c0       	rjmp	.+378    	; 0x64a <_Z7pinModehh+0x188>
     4d0:	ec 5c       	subi	r30, 0xCC	; 204
     4d2:	ff 4f       	sbci	r31, 0xFF	; 255
     4d4:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     4d8:	61 30       	cpi	r22, 0x01	; 1
     4da:	11 f4       	brne	.+4      	; 0x4e0 <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     4dc:	52 9a       	sbi	0x0a, 2	; 10
     4de:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     4e0:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     4e2:	63 30       	cpi	r22, 0x03	; 3
     4e4:	11 f4       	brne	.+4      	; 0x4ea <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     4e6:	5a 9a       	sbi	0x0b, 2	; 11
     4e8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     4ea:	5a 98       	cbi	0x0b, 2	; 11
     4ec:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     4ee:	61 30       	cpi	r22, 0x01	; 1
     4f0:	11 f4       	brne	.+4      	; 0x4f6 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     4f2:	53 9a       	sbi	0x0a, 3	; 10
     4f4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     4f6:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     4f8:	63 30       	cpi	r22, 0x03	; 3
     4fa:	11 f4       	brne	.+4      	; 0x500 <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     4fc:	5b 9a       	sbi	0x0b, 3	; 11
     4fe:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     500:	5b 98       	cbi	0x0b, 3	; 11
     502:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     504:	61 30       	cpi	r22, 0x01	; 1
     506:	11 f4       	brne	.+4      	; 0x50c <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     508:	54 9a       	sbi	0x0a, 4	; 10
     50a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     50c:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     50e:	63 30       	cpi	r22, 0x03	; 3
     510:	11 f4       	brne	.+4      	; 0x516 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     512:	5c 9a       	sbi	0x0b, 4	; 11
     514:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     516:	5c 98       	cbi	0x0b, 4	; 11
     518:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     51a:	61 30       	cpi	r22, 0x01	; 1
     51c:	11 f4       	brne	.+4      	; 0x522 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     51e:	55 9a       	sbi	0x0a, 5	; 10
     520:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     522:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     524:	63 30       	cpi	r22, 0x03	; 3
     526:	11 f4       	brne	.+4      	; 0x52c <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     528:	5d 9a       	sbi	0x0b, 5	; 11
     52a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     52c:	5d 98       	cbi	0x0b, 5	; 11
     52e:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     530:	61 30       	cpi	r22, 0x01	; 1
     532:	11 f4       	brne	.+4      	; 0x538 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     534:	56 9a       	sbi	0x0a, 6	; 10
     536:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     538:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     53a:	63 30       	cpi	r22, 0x03	; 3
     53c:	11 f4       	brne	.+4      	; 0x542 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     53e:	5e 9a       	sbi	0x0b, 6	; 11
     540:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     542:	5e 98       	cbi	0x0b, 6	; 11
     544:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     546:	61 30       	cpi	r22, 0x01	; 1
     548:	11 f4       	brne	.+4      	; 0x54e <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     54a:	57 9a       	sbi	0x0a, 7	; 10
     54c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     54e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     550:	63 30       	cpi	r22, 0x03	; 3
     552:	11 f4       	brne	.+4      	; 0x558 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     554:	5f 9a       	sbi	0x0b, 7	; 11
     556:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     558:	5f 98       	cbi	0x0b, 7	; 11
     55a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     55c:	61 30       	cpi	r22, 0x01	; 1
     55e:	11 f4       	brne	.+4      	; 0x564 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB0);
     560:	20 9a       	sbi	0x04, 0	; 4
     562:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     564:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     566:	63 30       	cpi	r22, 0x03	; 3
     568:	11 f4       	brne	.+4      	; 0x56e <_Z7pinModehh+0xac>
				{
					PORTB  |= (1 << PORTB0);
     56a:	28 9a       	sbi	0x05, 0	; 5
     56c:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     56e:	28 98       	cbi	0x05, 0	; 5
     570:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     572:	61 30       	cpi	r22, 0x01	; 1
     574:	11 f4       	brne	.+4      	; 0x57a <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB1);
     576:	21 9a       	sbi	0x04, 1	; 4
     578:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     57a:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     57c:	63 30       	cpi	r22, 0x03	; 3
     57e:	11 f4       	brne	.+4      	; 0x584 <_Z7pinModehh+0xc2>
				{
					PORTB  |= (1 << PORTB1);
     580:	29 9a       	sbi	0x05, 1	; 5
     582:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     584:	29 98       	cbi	0x05, 1	; 5
     586:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     588:	61 30       	cpi	r22, 0x01	; 1
     58a:	11 f4       	brne	.+4      	; 0x590 <_Z7pinModehh+0xce>
			{
				DDRB  |= (1 << PORTB2);
     58c:	22 9a       	sbi	0x04, 2	; 4
     58e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     590:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     592:	63 30       	cpi	r22, 0x03	; 3
     594:	11 f4       	brne	.+4      	; 0x59a <_Z7pinModehh+0xd8>
				{
					PORTB  |= (1 << PORTB2);
     596:	2a 9a       	sbi	0x05, 2	; 5
     598:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     59a:	2a 98       	cbi	0x05, 2	; 5
     59c:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     59e:	61 30       	cpi	r22, 0x01	; 1
     5a0:	11 f4       	brne	.+4      	; 0x5a6 <_Z7pinModehh+0xe4>
			{
				DDRB  |= (1 << PORTB5);
     5a2:	25 9a       	sbi	0x04, 5	; 4
     5a4:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     5a6:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     5a8:	63 30       	cpi	r22, 0x03	; 3
     5aa:	11 f4       	brne	.+4      	; 0x5b0 <_Z7pinModehh+0xee>
				{
					PORTD  |= (1 << PORTB5);
     5ac:	5d 9a       	sbi	0x0b, 5	; 11
     5ae:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     5b0:	5d 98       	cbi	0x0b, 5	; 11
     5b2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     5b4:	61 30       	cpi	r22, 0x01	; 1
     5b6:	11 f4       	brne	.+4      	; 0x5bc <_Z7pinModehh+0xfa>
			{
				DDRC  |= (1 << PORTC0);
     5b8:	38 9a       	sbi	0x07, 0	; 7
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <_Z7pinModehh+0x110>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     5bc:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     5be:	63 30       	cpi	r22, 0x03	; 3
     5c0:	19 f4       	brne	.+6      	; 0x5c8 <_Z7pinModehh+0x106>
				{
					PORTC  |= (1 << PORTC0);
     5c2:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     5c4:	39 98       	cbi	0x07, 1	; 7
     5c6:	0a c0       	rjmp	.+20     	; 0x5dc <_Z7pinModehh+0x11a>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     5c8:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     5ca:	39 98       	cbi	0x07, 1	; 7
     5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <_Z7pinModehh+0x120>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     5ce:	61 30       	cpi	r22, 0x01	; 1
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <_Z7pinModehh+0x114>
			{
				DDRC  |= (1 << PORTC1);
     5d2:	39 9a       	sbi	0x07, 1	; 7
     5d4:	0b c0       	rjmp	.+22     	; 0x5ec <_Z7pinModehh+0x12a>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     5d6:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     5d8:	63 30       	cpi	r22, 0x03	; 3
     5da:	19 f4       	brne	.+6      	; 0x5e2 <_Z7pinModehh+0x120>
				{
					PORTC  |= (1 << PORTC1);
     5dc:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     5de:	3a 98       	cbi	0x07, 2	; 7
     5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <_Z7pinModehh+0x134>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     5e2:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     5e4:	3a 98       	cbi	0x07, 2	; 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <_Z7pinModehh+0x13a>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     5e8:	61 30       	cpi	r22, 0x01	; 1
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <_Z7pinModehh+0x12e>
			{
				DDRC  |= (1 << PORTC2);
     5ec:	3a 9a       	sbi	0x07, 2	; 7
     5ee:	0b c0       	rjmp	.+22     	; 0x606 <_Z7pinModehh+0x144>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     5f0:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     5f2:	63 30       	cpi	r22, 0x03	; 3
     5f4:	19 f4       	brne	.+6      	; 0x5fc <_Z7pinModehh+0x13a>
				{
					PORTC  |= (1 << PORTC2);
     5f6:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     5f8:	3b 98       	cbi	0x07, 3	; 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <_Z7pinModehh+0x14e>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     5fc:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     5fe:	3b 98       	cbi	0x07, 3	; 7
     600:	0a c0       	rjmp	.+20     	; 0x616 <_Z7pinModehh+0x154>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     602:	61 30       	cpi	r22, 0x01	; 1
     604:	11 f4       	brne	.+4      	; 0x60a <_Z7pinModehh+0x148>
			{
				DDRC  |= (1 << PORTC3);
     606:	3b 9a       	sbi	0x07, 3	; 7
     608:	0b c0       	rjmp	.+22     	; 0x620 <_Z7pinModehh+0x15e>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     60a:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     60c:	63 30       	cpi	r22, 0x03	; 3
     60e:	19 f4       	brne	.+6      	; 0x616 <_Z7pinModehh+0x154>
				{
					PORTC  |= (1 << PORTC3);
     610:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     612:	3c 98       	cbi	0x07, 4	; 7
     614:	0a c0       	rjmp	.+20     	; 0x62a <_Z7pinModehh+0x168>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     616:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     618:	3c 98       	cbi	0x07, 4	; 7
     61a:	0a c0       	rjmp	.+20     	; 0x630 <_Z7pinModehh+0x16e>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     61c:	61 30       	cpi	r22, 0x01	; 1
     61e:	11 f4       	brne	.+4      	; 0x624 <_Z7pinModehh+0x162>
			{
				DDRC  |= (1 << PORTC4);
     620:	3c 9a       	sbi	0x07, 4	; 7
     622:	0b c0       	rjmp	.+22     	; 0x63a <_Z7pinModehh+0x178>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     624:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     626:	63 30       	cpi	r22, 0x03	; 3
     628:	19 f4       	brne	.+6      	; 0x630 <_Z7pinModehh+0x16e>
				{
					PORTC  |= (1 << PORTC4);
     62a:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     62c:	3d 98       	cbi	0x07, 5	; 7
     62e:	0a c0       	rjmp	.+20     	; 0x644 <_Z7pinModehh+0x182>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     630:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     632:	3d 98       	cbi	0x07, 5	; 7
     634:	09 c0       	rjmp	.+18     	; 0x648 <_Z7pinModehh+0x186>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     636:	61 30       	cpi	r22, 0x01	; 1
     638:	11 f4       	brne	.+4      	; 0x63e <_Z7pinModehh+0x17c>
			{
				DDRC  |= (1 << PORTC5);
     63a:	3d 9a       	sbi	0x07, 5	; 7
     63c:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     63e:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     640:	63 30       	cpi	r22, 0x03	; 3
     642:	11 f4       	brne	.+4      	; 0x648 <_Z7pinModehh+0x186>
				{
					PORTC  |= (1 << PORTC5);
     644:	45 9a       	sbi	0x08, 5	; 8
     646:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     648:	45 98       	cbi	0x08, 5	; 8
     64a:	08 95       	ret

0000064c <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	32 97       	sbiw	r30, 0x02	; 2
     652:	e0 31       	cpi	r30, 0x10	; 16
     654:	f1 05       	cpc	r31, r1
     656:	a0 f5       	brcc	.+104    	; 0x6c0 <_Z11digitalReadh+0x74>
     658:	ea 5b       	subi	r30, 0xBA	; 186
     65a:	ff 4f       	sbci	r31, 0xFF	; 255
     65c:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     660:	29 b1       	in	r18, 0x09	; 9
     662:	24 70       	andi	r18, 0x04	; 4
     664:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     666:	2e c0       	rjmp	.+92     	; 0x6c4 <_Z11digitalReadh+0x78>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     668:	29 b1       	in	r18, 0x09	; 9
     66a:	28 70       	andi	r18, 0x08	; 8
     66c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     66e:	2a c0       	rjmp	.+84     	; 0x6c4 <_Z11digitalReadh+0x78>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     670:	29 b1       	in	r18, 0x09	; 9
     672:	20 71       	andi	r18, 0x10	; 16
     674:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     676:	26 c0       	rjmp	.+76     	; 0x6c4 <_Z11digitalReadh+0x78>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     678:	29 b1       	in	r18, 0x09	; 9
     67a:	20 72       	andi	r18, 0x20	; 32
     67c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     67e:	22 c0       	rjmp	.+68     	; 0x6c4 <_Z11digitalReadh+0x78>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     680:	29 b1       	in	r18, 0x09	; 9
     682:	20 74       	andi	r18, 0x40	; 64
     684:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <_Z11digitalReadh+0x78>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     688:	29 b1       	in	r18, 0x09	; 9
     68a:	20 78       	andi	r18, 0x80	; 128
     68c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     68e:	1a c0       	rjmp	.+52     	; 0x6c4 <_Z11digitalReadh+0x78>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     690:	83 b1       	in	r24, 0x03	; 3
		}

		case D9:
		{
			result = PINB & (1 << PORTB1);
     692:	83 b1       	in	r24, 0x03	; 3
		}

		case D10:
		{
			result = PINB & (1 << PORTB2);
     694:	83 b1       	in	r24, 0x03	; 3
		}

		case D13:
		{
			result = PINB & (1 << PORTB5);
     696:	23 b1       	in	r18, 0x03	; 3
     698:	20 72       	andi	r18, 0x20	; 32
     69a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     69c:	13 c0       	rjmp	.+38     	; 0x6c4 <_Z11digitalReadh+0x78>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     69e:	86 b1       	in	r24, 0x06	; 6
     6a0:	28 2f       	mov	r18, r24
     6a2:	21 70       	andi	r18, 0x01	; 1
     6a4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     6a6:	0e c0       	rjmp	.+28     	; 0x6c4 <_Z11digitalReadh+0x78>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     6a8:	26 b1       	in	r18, 0x06	; 6
     6aa:	22 70       	andi	r18, 0x02	; 2
     6ac:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <_Z11digitalReadh+0x78>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     6b0:	26 b1       	in	r18, 0x06	; 6
     6b2:	24 70       	andi	r18, 0x04	; 4
     6b4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <_Z11digitalReadh+0x78>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     6b8:	26 b1       	in	r18, 0x06	; 6
     6ba:	28 70       	andi	r18, 0x08	; 8
     6bc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_Z11digitalReadh+0x78>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	23 2b       	or	r18, r19
     6c8:	09 f4       	brne	.+2      	; 0x6cc <_Z11digitalReadh+0x80>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
}
     6cc:	08 95       	ret

000006ce <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	fc 01       	movw	r30, r24
     6d2:	32 97       	sbiw	r30, 0x02	; 2
     6d4:	e0 31       	cpi	r30, 0x10	; 16
     6d6:	f1 05       	cpc	r31, r1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <_Z12digitalWritehh+0xe>
     6da:	57 c0       	rjmp	.+174    	; 0x78a <_Z12digitalWritehh+0xbc>
     6dc:	ea 5a       	subi	r30, 0xAA	; 170
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>
	{
		case D2:
		{
			if(value)
     6e4:	66 23       	and	r22, r22
     6e6:	11 f0       	breq	.+4      	; 0x6ec <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     6e8:	5a 9a       	sbi	0x0b, 2	; 11
     6ea:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     6ec:	5a 98       	cbi	0x0b, 2	; 11
     6ee:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     6f0:	66 23       	and	r22, r22
     6f2:	11 f0       	breq	.+4      	; 0x6f8 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     6f4:	5b 9a       	sbi	0x0b, 3	; 11
     6f6:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     6f8:	5b 98       	cbi	0x0b, 3	; 11
     6fa:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     6fc:	66 23       	and	r22, r22
     6fe:	11 f0       	breq	.+4      	; 0x704 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     700:	5c 9a       	sbi	0x0b, 4	; 11
     702:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     704:	5c 98       	cbi	0x0b, 4	; 11
     706:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     708:	66 23       	and	r22, r22
     70a:	11 f0       	breq	.+4      	; 0x710 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     70c:	5d 9a       	sbi	0x0b, 5	; 11
     70e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     710:	5d 98       	cbi	0x0b, 5	; 11
     712:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     714:	66 23       	and	r22, r22
     716:	11 f0       	breq	.+4      	; 0x71c <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     718:	5e 9a       	sbi	0x0b, 6	; 11
     71a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     71c:	5e 98       	cbi	0x0b, 6	; 11
     71e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     720:	66 23       	and	r22, r22
     722:	11 f0       	breq	.+4      	; 0x728 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     724:	5f 9a       	sbi	0x0b, 7	; 11
     726:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     728:	5f 98       	cbi	0x0b, 7	; 11
     72a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     72c:	66 23       	and	r22, r22
     72e:	11 f0       	breq	.+4      	; 0x734 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB0);
     730:	28 9a       	sbi	0x05, 0	; 5
     732:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     734:	28 98       	cbi	0x05, 0	; 5
     736:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     738:	66 23       	and	r22, r22
     73a:	11 f0       	breq	.+4      	; 0x740 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB1);
     73c:	29 9a       	sbi	0x05, 1	; 5
     73e:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     740:	29 98       	cbi	0x05, 1	; 5
     742:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     744:	66 23       	and	r22, r22
     746:	11 f0       	breq	.+4      	; 0x74c <_Z12digitalWritehh+0x7e>
			{
				PORTB  |= (1 << PORTB2);
     748:	2a 9a       	sbi	0x05, 2	; 5
     74a:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     74c:	2a 98       	cbi	0x05, 2	; 5
     74e:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     750:	66 23       	and	r22, r22
     752:	11 f0       	breq	.+4      	; 0x758 <_Z12digitalWritehh+0x8a>
			{
				PORTB  |= (1 << PORTB5);
     754:	2d 9a       	sbi	0x05, 5	; 5
     756:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     758:	2d 98       	cbi	0x05, 5	; 5
     75a:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     75c:	66 23       	and	r22, r22
     75e:	11 f0       	breq	.+4      	; 0x764 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC0);
     760:	40 9a       	sbi	0x08, 0	; 8
     762:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     764:	40 98       	cbi	0x08, 0	; 8
     766:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     768:	66 23       	and	r22, r22
     76a:	11 f0       	breq	.+4      	; 0x770 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC1);
     76c:	41 9a       	sbi	0x08, 1	; 8
     76e:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     770:	41 98       	cbi	0x08, 1	; 8
     772:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     774:	66 23       	and	r22, r22
     776:	11 f0       	breq	.+4      	; 0x77c <_Z12digitalWritehh+0xae>
			{
				PORTC  |= (1 << PORTC2);
     778:	42 9a       	sbi	0x08, 2	; 8
     77a:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     77c:	42 98       	cbi	0x08, 2	; 8
     77e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     780:	66 23       	and	r22, r22
     782:	11 f0       	breq	.+4      	; 0x788 <_Z12digitalWritehh+0xba>
			{
				PORTC  |= (1 << PORTC3);
     784:	43 9a       	sbi	0x08, 3	; 8
     786:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     788:	43 98       	cbi	0x08, 3	; 8
     78a:	08 95       	ret

0000078c <_ZN13EepromManagerC1Ev>:

		failure = FALSE;
	}

	return( failure);
}
     78c:	08 95       	ret

0000078e <_ZN13EepromManagerD1Ev>:
     78e:	08 95       	ret

00000790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	41 15       	cp	r20, r1
     79a:	51 05       	cpc	r21, r1
     79c:	09 f4       	brne	.+2      	; 0x7a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     79e:	54 c0       	rjmp	.+168    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     7a0:	86 2f       	mov	r24, r22
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	fc 01       	movw	r30, r24
     7a6:	3b 97       	sbiw	r30, 0x0b	; 11
     7a8:	ed 30       	cpi	r30, 0x0D	; 13
     7aa:	f1 05       	cpc	r31, r1
     7ac:	08 f0       	brcs	.+2      	; 0x7b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     7ae:	4c c0       	rjmp	.+152    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     7b0:	da 01       	movw	r26, r20
     7b2:	ea 59       	subi	r30, 0x9A	; 154
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>
     7ba:	83 ee       	ldi	r24, 0xE3	; 227
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	2b c0       	rjmp	.+86     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7c0:	8b ed       	ldi	r24, 0xDB	; 219
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	3d c0       	rjmp	.+122    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     7c6:	87 ed       	ldi	r24, 0xD7	; 215
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	31 c0       	rjmp	.+98     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     7cc:	8a 01       	movw	r16, r20
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	6c 91       	ld	r22, X
     7d4:	66 23       	and	r22, r22
     7d6:	71 f0       	breq	.+28     	; 0x7f4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     7d8:	c0 e0       	ldi	r28, 0x00	; 0
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	21 96       	adiw	r28, 0x01	; 1
     7de:	ce 01       	movw	r24, r28
     7e0:	88 5d       	subi	r24, 0xD8	; 216
     7e2:	9d 4f       	sbci	r25, 0xFD	; 253
     7e4:	0e 94 08 27 	call	0x4e10	; 0x4e10 <eeprom_update_byte>
     7e8:	f8 01       	movw	r30, r16
     7ea:	61 91       	ld	r22, Z+
     7ec:	8f 01       	movw	r16, r30
     7ee:	61 11       	cpse	r22, r1
     7f0:	f5 cf       	rjmp	.-22     	; 0x7dc <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
     7f4:	c0 e0       	ldi	r28, 0x00	; 0
     7f6:	d0 e0       	ldi	r29, 0x00	; 0
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	ce 01       	movw	r24, r28
     7fc:	87 5d       	subi	r24, 0xD7	; 215
     7fe:	9d 4f       	sbci	r25, 0xFD	; 253
     800:	0e 94 08 27 	call	0x4e10	; 0x4e10 <eeprom_update_byte>
     804:	21 c0       	rjmp	.+66     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     806:	8d ed       	ldi	r24, 0xDD	; 221
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	11 c0       	rjmp	.+34     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     80c:	8e ed       	ldi	r24, 0xDE	; 222
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e c0       	rjmp	.+28     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     812:	8f ed       	ldi	r24, 0xDF	; 223
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	4d 91       	ld	r20, X+
     818:	5d 91       	ld	r21, X+
     81a:	6d 91       	ld	r22, X+
     81c:	7c 91       	ld	r23, X
     81e:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <eeprom_update_dword>
     822:	12 c0       	rjmp	.+36     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     824:	86 ed       	ldi	r24, 0xD6	; 214
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	02 c0       	rjmp	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82a:	88 ed       	ldi	r24, 0xD8	; 216
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	6c 91       	ld	r22, X
     830:	0e 94 08 27 	call	0x4e10	; 0x4e10 <eeprom_update_byte>
     834:	09 c0       	rjmp	.+18     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     836:	89 ed       	ldi	r24, 0xD9	; 217
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	87 ee       	ldi	r24, 0xE7	; 231
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	6d 91       	ld	r22, X+
     842:	7c 91       	ld	r23, X
     844:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <eeprom_update_word>
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	86 2f       	mov	r24, r22
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	8b 30       	cpi	r24, 0x0B	; 11
     862:	91 05       	cpc	r25, r1
     864:	08 f0       	brcs	.+2      	; 0x868 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     866:	40 c0       	rjmp	.+128    	; 0x8e8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x96>
     868:	fc 01       	movw	r30, r24
     86a:	ed 58       	subi	r30, 0x8D	; 141
     86c:	ff 4f       	sbci	r31, 0xFF	; 255
     86e:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>
     872:	8a e2       	ldi	r24, 0x2A	; 42
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	30 c0       	rjmp	.+96     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     878:	8d e4       	ldi	r24, 0x4D	; 77
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	2d c0       	rjmp	.+90     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     87e:	83 e7       	ldi	r24, 0x73	; 115
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	2a c0       	rjmp	.+84     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     884:	8a e9       	ldi	r24, 0x9A	; 154
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	27 c0       	rjmp	.+78     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     88a:	8b eb       	ldi	r24, 0xBB	; 187
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	24 c0       	rjmp	.+72     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     890:	86 ed       	ldi	r24, 0xD6	; 214
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	21 c0       	rjmp	.+66     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     896:	8c ee       	ldi	r24, 0xEC	; 236
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	1e c0       	rjmp	.+60     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     8a2:	85 e1       	ldi	r24, 0x15	; 21
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	18 c0       	rjmp	.+48     	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     8a8:	87 01       	movw	r16, r14
     8aa:	cc 23       	and	r28, r28
     8ac:	e9 f0       	breq	.+58     	; 0x8e8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x96>
     8ae:	8c 2f       	mov	r24, r28
     8b0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_Z12lb_echo_charh>
     8b4:	78 01       	movw	r14, r16
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	e8 1a       	sub	r14, r24
     8ba:	f8 0a       	sbc	r15, r24
     8bc:	c8 01       	movw	r24, r16
     8be:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
     8c2:	c8 2f       	mov	r28, r24
     8c4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_Z19linkbusTxInProgressv>
     8c8:	81 11       	cpse	r24, r1
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x72>
     8cc:	ed cf       	rjmp	.-38     	; 0x8a8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x56>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x86>
     8d4:	85 e2       	ldi	r24, 0x25	; 37
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	8c 01       	movw	r16, r24
     8da:	0f 5f       	subi	r16, 0xFF	; 255
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
     8e2:	c8 2f       	mov	r28, r24
     8e4:	81 11       	cpse	r24, r1
     8e6:	e3 cf       	rjmp	.-58     	; 0x8ae <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x5c>
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	08 95       	ret

000008f4 <_ZN13EepromManager20initializeEEPROMVarsEv>:
#if INIT_EEPROM_ONLY
/*
 * Set volatile variables to their values stored in EEPROM
 */
	BOOL EepromManager::initializeEEPROMVars(void)
	{
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
					err = TRUE;
				}
			}
#endif  /* !COMPILE_FOR_ATMELSTUDIO7 */

		g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
     904:	84 e1       	ldi	r24, 0x14	; 20
     906:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_id_codespeed>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.id_codespeed), g_id_codespeed);
     90a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
     90e:	86 ed       	ldi	r24, 0xD6	; 214
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>

		g_fox = EEPROM_FOX_SETTING_DEFAULT;
     916:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <g_fox>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.fox_setting), g_fox);
     91a:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <g_fox>
     91e:	87 ed       	ldi	r24, 0xD7	; 215
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>

		g_atmega_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
     926:	82 e9       	ldi	r24, 0x92	; 146
     928:	9f ef       	ldi	r25, 0xFF	; 255
     92a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_atmega_temp_calibration+0x1>
     92e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_atmega_temp_calibration>
		eeprom_write_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration), (uint16_t)g_atmega_temp_calibration);
     932:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <g_atmega_temp_calibration>
     936:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <g_atmega_temp_calibration+0x1>
     93a:	89 ed       	ldi	r24, 0xD9	; 217
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 42 27 	call	0x4e84	; 0x4e84 <eeprom_write_word>

		i2c_init(); /* Needs to happen before reading RTC */
     942:	0e 94 cc 07 	call	0xf98	; 0xf98 <_Z8i2c_initv>

		g_rv3028_offset = rv3028_get_offset_RAM();
     946:	0e 94 2e 20 	call	0x405c	; 0x405c <_Z21rv3028_get_offset_RAMv>
     94a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <g_rv3028_offset+0x1>
     94e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <g_rv3028_offset>
		eeprom_write_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset), (uint16_t)g_rv3028_offset);
     952:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <g_rv3028_offset>
     956:	70 91 7b 04 	lds	r23, 0x047B	; 0x80047b <g_rv3028_offset+0x1>
     95a:	8b ed       	ldi	r24, 0xDB	; 219
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 42 27 	call	0x4e84	; 0x4e84 <eeprom_write_word>

		g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
     962:	c1 e0       	ldi	r28, 0x01	; 1
     964:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <g_enable_LEDs>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.enable_LEDs), g_enable_LEDs);                  /* Only gets set by a serial command */
     968:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <g_enable_LEDs>
     96c:	88 ed       	ldi	r24, 0xD8	; 216
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>

		g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
     974:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <g_enable_start_timer>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.enable_start_timer), g_enable_start_timer);    /* Only gets set by a serial command */
     978:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <g_enable_start_timer>
     97c:	8d ed       	ldi	r24, 0xDD	; 221
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>

		g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
     984:	c0 93 7c 04 	sts	0x047C, r28	; 0x80047c <g_enable_transmitter>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.enable_transmitter), g_enable_transmitter);    /* Only gets set by a serial command */
     988:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <g_enable_transmitter>
     98c:	8e ed       	ldi	r24, 0xDE	; 222
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>

		g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     994:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_event_start_epoch>
     998:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_event_start_epoch+0x1>
     99c:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_event_start_epoch+0x2>
     9a0:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_event_start_epoch+0x3>
		eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     9a4:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
     9a8:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
     9ac:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
     9b0:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
     9b4:	8f ed       	ldi	r24, 0xDF	; 223
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <eeprom_write_dword>

		g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     9bc:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_event_start_epoch>
     9c0:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_event_start_epoch+0x1>
     9c4:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_event_start_epoch+0x2>
     9c8:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_event_start_epoch+0x3>
		eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_start_epoch);
     9cc:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
     9d0:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
     9d4:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
     9d8:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
     9dc:	83 ee       	ldi	r24, 0xE3	; 227
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <eeprom_write_dword>

		g_messages_text[STATION_ID][0] = '\0';
     9e4:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <g_messages_text+0x15>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[0]), 0);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	89 e2       	ldi	r24, 0x29	; 41
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     9f2:	0e e3       	ldi	r16, 0x3E	; 62
     9f4:	12 e0       	ldi	r17, 0x02	; 2

		/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.temperature_table[i]), val);
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f8 ee       	ldi	r31, 0xE8	; 232
     9fe:	cf 2e       	mov	r12, r31
     a00:	f3 e0       	ldi	r31, 0x03	; 3
     a02:	df 2e       	mov	r13, r31
     a04:	e1 2c       	mov	r14, r1
     a06:	f1 2c       	mov	r15, r1
     a08:	f0 2d       	mov	r31, r0
     a0a:	cc 9f       	mul	r28, r28
     a0c:	90 01       	movw	r18, r0
     a0e:	cd 9f       	mul	r28, r29
     a10:	30 0d       	add	r19, r0
     a12:	30 0d       	add	r19, r0
     a14:	11 24       	eor	r1, r1
     a16:	a5 e2       	ldi	r26, 0x25	; 37
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	0e 94 8d 23 	call	0x471a	; 0x471a <__umulhisi3>
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__divmodsi4>
     a26:	62 2f       	mov	r22, r18
     a28:	c8 01       	movw	r24, r16
     a2a:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[0]), 0);

		/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     a2e:	21 96       	adiw	r28, 0x01	; 1
     a30:	0e 5f       	subi	r16, 0xFE	; 254
     a32:	1f 4f       	sbci	r17, 0xFF	; 255
     a34:	cc 33       	cpi	r28, 0x3C	; 60
     a36:	d1 05       	cpc	r29, r1
     a38:	41 f7       	brne	.-48     	; 0xa0a <__stack+0x10b>
     a3a:	c8 e0       	ldi	r28, 0x08	; 8
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.temperature_table[i]), val);
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)
		{
			float val = 16. * (1. + sinf((i + (SIZE_OF_DATA_MODULATION / 4)) * 0.196)); /* Set maximum attenuation at index 0 */
     a3e:	be 01       	movw	r22, r28
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 83 21 	call	0x4306	; 0x4306 <__floatunsisf>
     a48:	29 e3       	ldi	r18, 0x39	; 57
     a4a:	34 eb       	ldi	r19, 0xB4	; 180
     a4c:	48 e4       	ldi	r20, 0x48	; 72
     a4e:	5e e3       	ldi	r21, 0x3E	; 62
     a50:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
     a54:	0e 94 7e 22 	call	0x44fc	; 0x44fc <sin>
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]), (uint8_t)val);
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e8       	ldi	r20, 0x80	; 128
     a5e:	5f e3       	ldi	r21, 0x3F	; 63
     a60:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <__addsf3>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e8       	ldi	r20, 0x80	; 128
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
     a70:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__fixunssfsi>
     a74:	ce 01       	movw	r24, r28
     a76:	82 55       	subi	r24, 0x52	; 82
     a78:	9d 4f       	sbci	r25, 0xFD	; 253
     a7a:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     a7e:	21 96       	adiw	r28, 0x01	; 1
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.temperature_table[i]), val);
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)
     a80:	c8 32       	cpi	r28, 0x28	; 40
     a82:	d1 05       	cpc	r29, r1
     a84:	e1 f6       	brne	.-72     	; 0xa3e <__stack+0x13f>
     a86:	cd ef       	ldi	r28, 0xFD	; 253
     a88:	d3 e0       	ldi	r29, 0x03	; 3
     a8a:	00 e0       	ldi	r16, 0x00	; 0
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	0f 2e       	mov	r0, r31
     a90:	f6 e2       	ldi	r31, 0x26	; 38
     a92:	ef 2e       	mov	r14, r31
     a94:	f4 e0       	ldi	r31, 0x04	; 4
     a96:	ff 2e       	mov	r15, r31
     a98:	f0 2d       	mov	r31, r0
		}

		/* Software Version String */
		for(i = 0; i < strlen_P(PRODUCT_NAME_LONG); i++)
		{
			uint8_t byteval = pgm_read_byte(PRODUCT_NAME_LONG + i);
     a9a:	fe 01       	movw	r30, r28
     a9c:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textVersion[i]), byteval);
     a9e:	c8 01       	movw	r24, r16
     aa0:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     aa4:	21 96       	adiw	r28, 0x01	; 1
     aa6:	0f 5f       	subi	r16, 0xFF	; 255
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
			float val = 16. * (1. + sinf((i + (SIZE_OF_DATA_MODULATION / 4)) * 0.196)); /* Set maximum attenuation at index 0 */
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]), (uint8_t)val);
		}

		/* Software Version String */
		for(i = 0; i < strlen_P(PRODUCT_NAME_LONG); i++)
     aaa:	ec 16       	cp	r14, r28
     aac:	fd 06       	cpc	r15, r29
     aae:	a9 f7       	brne	.-22     	; 0xa9a <__stack+0x19b>
		{
			uint8_t byteval = pgm_read_byte(PRODUCT_NAME_LONG + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textVersion[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textVersion[i]), 0);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	89 e2       	ldi	r24, 0x29	; 41
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     aba:	c2 e0       	ldi	r28, 0x02	; 2
     abc:	d3 e0       	ldi	r29, 0x03	; 3
     abe:	0a e2       	ldi	r16, 0x2A	; 42
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	0f 2e       	mov	r0, r31
     ac4:	fc ef       	ldi	r31, 0xFC	; 252
     ac6:	ef 2e       	mov	r14, r31
     ac8:	f3 e0       	ldi	r31, 0x03	; 3
     aca:	ff 2e       	mov	r15, r31
     acc:	f0 2d       	mov	r31, r0

		/* Help String */
		for(i = 0; i < strlen_P(HELP_TEXT); i++)
		{
			uint8_t byteval = pgm_read_byte(HELP_TEXT + i);
     ace:	fe 01       	movw	r30, r28
     ad0:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textHelp[i]), byteval);
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     ad8:	21 96       	adiw	r28, 0x01	; 1
     ada:	0f 5f       	subi	r16, 0xFF	; 255
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textVersion[i]), 0);

		/* Help String */
		for(i = 0; i < strlen_P(HELP_TEXT); i++)
     ade:	ec 16       	cp	r14, r28
     ae0:	fd 06       	cpc	r15, r29
     ae2:	a9 f7       	brne	.-22     	; 0xace <__stack+0x1cf>
		{
			uint8_t byteval = pgm_read_byte(HELP_TEXT + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textHelp[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textHelp[i]), 0);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	84 e2       	ldi	r24, 0x24	; 36
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     aee:	cc e6       	ldi	r28, 0x6C	; 108
     af0:	d2 e0       	ldi	r29, 0x02	; 2
     af2:	0a e9       	ldi	r16, 0x9A	; 154
     af4:	11 e0       	ldi	r17, 0x01	; 1
     af6:	0f 2e       	mov	r0, r31
     af8:	fc e8       	ldi	r31, 0x8C	; 140
     afa:	ef 2e       	mov	r14, r31
     afc:	f2 e0       	ldi	r31, 0x02	; 2
     afe:	ff 2e       	mov	r15, r31
     b00:	f0 2d       	mov	r31, r0

		/* Set ID String */
		for(i = 0; i < strlen_P(TEXT_SET_ID); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_ID + i);
     b02:	fe 01       	movw	r30, r28
     b04:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetID[i]), byteval);
     b06:	c8 01       	movw	r24, r16
     b08:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     b0c:	21 96       	adiw	r28, 0x01	; 1
     b0e:	0f 5f       	subi	r16, 0xFF	; 255
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textHelp[i]), 0);

		/* Set ID String */
		for(i = 0; i < strlen_P(TEXT_SET_ID); i++)
     b12:	ec 16       	cp	r14, r28
     b14:	fd 06       	cpc	r15, r29
     b16:	a9 f7       	brne	.-22     	; 0xb02 <__stack+0x203>
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_ID + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetID[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetID[i]), 0);
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	8a eb       	ldi	r24, 0xBA	; 186
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     b22:	ca ed       	ldi	r28, 0xDA	; 218
     b24:	d2 e0       	ldi	r29, 0x02	; 2
     b26:	05 e2       	ldi	r16, 0x25	; 37
     b28:	11 e0       	ldi	r17, 0x01	; 1
     b2a:	0f 2e       	mov	r0, r31
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	ef 2e       	mov	r14, r31
     b30:	f3 e0       	ldi	r31, 0x03	; 3
     b32:	ff 2e       	mov	r15, r31
     b34:	f0 2d       	mov	r31, r0

		/* Set Time String */
		for(i = 0; i < strlen_P(TEXT_SET_TIME); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_TIME + i);
     b36:	fe 01       	movw	r30, r28
     b38:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetTime[i]), byteval);
     b3a:	c8 01       	movw	r24, r16
     b3c:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     b40:	21 96       	adiw	r28, 0x01	; 1
     b42:	0f 5f       	subi	r16, 0xFF	; 255
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetID[i]), 0);

		/* Set Time String */
		for(i = 0; i < strlen_P(TEXT_SET_TIME); i++)
     b46:	ec 16       	cp	r14, r28
     b48:	fd 06       	cpc	r15, r29
     b4a:	a9 f7       	brne	.-22     	; 0xb36 <__stack+0x237>
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_TIME + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetTime[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetTime[i]), 0);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	8c e4       	ldi	r24, 0x4C	; 76
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     b56:	c4 eb       	ldi	r28, 0xB4	; 180
     b58:	d2 e0       	ldi	r29, 0x02	; 2
     b5a:	0d e4       	ldi	r16, 0x4D	; 77
     b5c:	11 e0       	ldi	r17, 0x01	; 1
     b5e:	0f 2e       	mov	r0, r31
     b60:	f9 ed       	ldi	r31, 0xD9	; 217
     b62:	ef 2e       	mov	r14, r31
     b64:	f2 e0       	ldi	r31, 0x02	; 2
     b66:	ff 2e       	mov	r15, r31
     b68:	f0 2d       	mov	r31, r0

		/* Set Start String */
		for(i = 0; i < strlen_P(TEXT_SET_START); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_START + i);
     b6a:	fe 01       	movw	r30, r28
     b6c:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetStart[i]), byteval);
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     b74:	21 96       	adiw	r28, 0x01	; 1
     b76:	0f 5f       	subi	r16, 0xFF	; 255
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetTime[i]), 0);

		/* Set Start String */
		for(i = 0; i < strlen_P(TEXT_SET_START); i++)
     b7a:	ec 16       	cp	r14, r28
     b7c:	fd 06       	cpc	r15, r29
     b7e:	a9 f7       	brne	.-22     	; 0xb6a <__stack+0x26b>
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_START + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetStart[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetStart[i]), 0);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	82 e7       	ldi	r24, 0x72	; 114
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     b8a:	cd e8       	ldi	r28, 0x8D	; 141
     b8c:	d2 e0       	ldi	r29, 0x02	; 2
     b8e:	03 e7       	ldi	r16, 0x73	; 115
     b90:	11 e0       	ldi	r17, 0x01	; 1
     b92:	0f 2e       	mov	r0, r31
     b94:	f3 eb       	ldi	r31, 0xB3	; 179
     b96:	ef 2e       	mov	r14, r31
     b98:	f2 e0       	ldi	r31, 0x02	; 2
     b9a:	ff 2e       	mov	r15, r31
     b9c:	f0 2d       	mov	r31, r0

		/* Set Finish String */
		for(i = 0; i < strlen_P(TEXT_SET_FINISH); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_FINISH + i);
     b9e:	fe 01       	movw	r30, r28
     ba0:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetFinish[i]), byteval);
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     ba8:	21 96       	adiw	r28, 0x01	; 1
     baa:	0f 5f       	subi	r16, 0xFF	; 255
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetStart[i]), 0);

		/* Set Finish String */
		for(i = 0; i < strlen_P(TEXT_SET_FINISH); i++)
     bae:	ec 16       	cp	r14, r28
     bb0:	fd 06       	cpc	r15, r29
     bb2:	a9 f7       	brne	.-22     	; 0xb9e <__stack+0x29f>
		{
			uint8_t byteval = pgm_read_byte(TEXT_SET_FINISH + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetFinish[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetFinish[i]), 0);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	89 e9       	ldi	r24, 0x99	; 153
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     bbe:	cb e3       	ldi	r28, 0x3B	; 59
     bc0:	d2 e0       	ldi	r29, 0x02	; 2
     bc2:	06 ed       	ldi	r16, 0xD6	; 214
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f0 e5       	ldi	r31, 0x50	; 80
     bca:	ef 2e       	mov	r14, r31
     bcc:	f2 e0       	ldi	r31, 0x02	; 2
     bce:	ff 2e       	mov	r15, r31
     bd0:	f0 2d       	mov	r31, r0

		/* Set Err Finish in Past String */
		for(i = 0; i < strlen_P(TEXT_ERR_FINISH_IN_PAST); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_IN_PAST + i);
     bd2:	fe 01       	movw	r30, r28
     bd4:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishInPast[i]), byteval);
     bd6:	c8 01       	movw	r24, r16
     bd8:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     bdc:	21 96       	adiw	r28, 0x01	; 1
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textSetFinish[i]), 0);

		/* Set Err Finish in Past String */
		for(i = 0; i < strlen_P(TEXT_ERR_FINISH_IN_PAST); i++)
     be2:	ec 16       	cp	r14, r28
     be4:	fd 06       	cpc	r15, r29
     be6:	a9 f7       	brne	.-22     	; 0xbd2 <__stack+0x2d3>
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_IN_PAST + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishInPast[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishInPast[i]), 0);
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	8b ee       	ldi	r24, 0xEB	; 235
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     bf2:	c6 e2       	ldi	r28, 0x26	; 38
     bf4:	d2 e0       	ldi	r29, 0x02	; 2
     bf6:	0c ee       	ldi	r16, 0xEC	; 236
     bf8:	11 e0       	ldi	r17, 0x01	; 1
     bfa:	0f 2e       	mov	r0, r31
     bfc:	fa e3       	ldi	r31, 0x3A	; 58
     bfe:	ef 2e       	mov	r14, r31
     c00:	f2 e0       	ldi	r31, 0x02	; 2
     c02:	ff 2e       	mov	r15, r31
     c04:	f0 2d       	mov	r31, r0

		/* Set Err Start in Past String */
		for(i = 0; i < strlen_P(TEXT_ERR_START_IN_PAST); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_START_IN_PAST + i);
     c06:	fe 01       	movw	r30, r28
     c08:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrStartInPast[i]), byteval);
     c0a:	c8 01       	movw	r24, r16
     c0c:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishInPast[i]), 0);

		/* Set Err Start in Past String */
		for(i = 0; i < strlen_P(TEXT_ERR_START_IN_PAST); i++)
     c16:	ec 16       	cp	r14, r28
     c18:	fd 06       	cpc	r15, r29
     c1a:	a9 f7       	brne	.-22     	; 0xc06 <__stack+0x307>
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_START_IN_PAST + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrStartInPast[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrStartInPast[i]), 0);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     c26:	c1 e5       	ldi	r28, 0x51	; 81
     c28:	d2 e0       	ldi	r29, 0x02	; 2
     c2a:	0b eb       	ldi	r16, 0xBB	; 187
     c2c:	11 e0       	ldi	r17, 0x01	; 1
     c2e:	0f 2e       	mov	r0, r31
     c30:	fb e6       	ldi	r31, 0x6B	; 107
     c32:	ef 2e       	mov	r14, r31
     c34:	f2 e0       	ldi	r31, 0x02	; 2
     c36:	ff 2e       	mov	r15, r31
     c38:	f0 2d       	mov	r31, r0

		/* Set Err Finish Before Start String */
		for(i = 0; i < strlen_P(TEXT_ERR_FINISH_BEFORE_START); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_BEFORE_START + i);
     c3a:	fe 01       	movw	r30, r28
     c3c:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishB4Start[i]), byteval);
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     c44:	21 96       	adiw	r28, 0x01	; 1
     c46:	0f 5f       	subi	r16, 0xFF	; 255
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrStartInPast[i]), 0);

		/* Set Err Finish Before Start String */
		for(i = 0; i < strlen_P(TEXT_ERR_FINISH_BEFORE_START); i++)
     c4a:	ec 16       	cp	r14, r28
     c4c:	fd 06       	cpc	r15, r29
     c4e:	a9 f7       	brne	.-22     	; 0xc3a <__stack+0x33b>
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_FINISH_BEFORE_START + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishB4Start[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishB4Start[i]), 0);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	85 ed       	ldi	r24, 0xD5	; 213
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     c5a:	c2 e1       	ldi	r28, 0x12	; 18
     c5c:	d2 e0       	ldi	r29, 0x02	; 2
     c5e:	01 e0       	ldi	r16, 0x01	; 1
     c60:	12 e0       	ldi	r17, 0x02	; 2
     c62:	0f 2e       	mov	r0, r31
     c64:	f5 e2       	ldi	r31, 0x25	; 37
     c66:	ef 2e       	mov	r14, r31
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	ff 2e       	mov	r15, r31
     c6c:	f0 2d       	mov	r31, r0

		/* Set Err Invalid Time String */
		for(i = 0; i < strlen_P(TEXT_ERR_INVALID_TIME); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_INVALID_TIME + i);
     c6e:	fe 01       	movw	r30, r28
     c70:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrInvalidTime[i]), byteval);
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     c78:	21 96       	adiw	r28, 0x01	; 1
     c7a:	0f 5f       	subi	r16, 0xFF	; 255
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrFinishB4Start[i]), 0);

		/* Set Err Invalid Time String */
		for(i = 0; i < strlen_P(TEXT_ERR_INVALID_TIME); i++)
     c7e:	ec 16       	cp	r14, r28
     c80:	fd 06       	cpc	r15, r29
     c82:	a9 f7       	brne	.-22     	; 0xc6e <__stack+0x36f>
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_INVALID_TIME + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrInvalidTime[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrInvalidTime[i]), 0);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	84 e1       	ldi	r24, 0x14	; 20
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     c8e:	ce ef       	ldi	r28, 0xFE	; 254
     c90:	d1 e0       	ldi	r29, 0x01	; 1
     c92:	05 e1       	ldi	r16, 0x15	; 21
     c94:	12 e0       	ldi	r17, 0x02	; 2
     c96:	0f 2e       	mov	r0, r31
     c98:	f1 e1       	ldi	r31, 0x11	; 17
     c9a:	ef 2e       	mov	r14, r31
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	ff 2e       	mov	r15, r31
     ca0:	f0 2d       	mov	r31, r0

		/* Set Err Time In Past String */
		for(i = 0; i < strlen_P(TEXT_ERR_TIME_IN_PAST); i++)
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_TIME_IN_PAST + i);
     ca2:	fe 01       	movw	r30, r28
     ca4:	64 91       	lpm	r22, Z
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrTimeInPast[i]), byteval);
     ca6:	c8 01       	movw	r24, r16
     ca8:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
     cac:	21 96       	adiw	r28, 0x01	; 1
     cae:	0f 5f       	subi	r16, 0xFF	; 255
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrInvalidTime[i]), 0);

		/* Set Err Time In Past String */
		for(i = 0; i < strlen_P(TEXT_ERR_TIME_IN_PAST); i++)
     cb2:	ec 16       	cp	r14, r28
     cb4:	fd 06       	cpc	r15, r29
     cb6:	a9 f7       	brne	.-22     	; 0xca2 <__stack+0x3a3>
		{
			uint8_t byteval = pgm_read_byte(TEXT_ERR_TIME_IN_PAST + i);
			eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrTimeInPast[i]), byteval);
		}

		eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.textErrTimeInPast[i]), 0);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	88 e2       	ldi	r24, 0x28	; 40
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>

		/* Done */

		eeprom_write_word((uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag), EEPROM_INITIALIZED_FLAG);
     cc2:	6b eb       	ldi	r22, 0xBB	; 187
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	87 ee       	ldi	r24, 0xE7	; 231
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	0e 94 42 27 	call	0x4e84	; 0x4e84 <eeprom_write_word>

		lb_send_string((char*)"EEPROM PROGRAMMING FINISHED\n", TRUE);
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	8f e1       	ldi	r24, 0x1F	; 31
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		return(err);
	}
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	08 95       	ret

00000cec <_ZN13EepromManager14dumpEEPROMVarsEv>:


	void EepromManager::dumpEEPROMVars(void)
	{
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
		uint8_t byt;
		uint16_t wrd;
		uint32_t dwrd;

		sendEEPROMString(TextVersion);
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextHelp);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextSetID);
     d08:	65 e0       	ldi	r22, 0x05	; 5
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextSetTime);
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	ce 01       	movw	r24, r28
     d14:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextSetStart);
     d18:	63 e0       	ldi	r22, 0x03	; 3
     d1a:	ce 01       	movw	r24, r28
     d1c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextSetFinish);
     d20:	64 e0       	ldi	r22, 0x04	; 4
     d22:	ce 01       	movw	r24, r28
     d24:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextErrFinishInPast);
     d28:	67 e0       	ldi	r22, 0x07	; 7
     d2a:	ce 01       	movw	r24, r28
     d2c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextErrStartInPast);
     d30:	68 e0       	ldi	r22, 0x08	; 8
     d32:	ce 01       	movw	r24, r28
     d34:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextErrFinishB4Start);
     d38:	66 e0       	ldi	r22, 0x06	; 6
     d3a:	ce 01       	movw	r24, r28
     d3c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextErrInvalidTime);
     d40:	69 e0       	ldi	r22, 0x09	; 9
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		sendEEPROMString(TextErrTimeInPast);
     d48:	6a e0       	ldi	r22, 0x0A	; 10
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>

		byt = eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed));
     d50:	86 ed       	ldi	r24, 0xD6	; 214
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
		sprintf(g_tempStr, "CS=%d\n", byt);
     d58:	1f 92       	push	r1
     d5a:	8f 93       	push	r24
     d5c:	8c e3       	ldi	r24, 0x3C	; 60
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	ce e4       	ldi	r28, 0x4E	; 78
     d66:	d4 e0       	ldi	r29, 0x04	; 4
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		byt = eeprom_read_byte(&(EepromManager::ee_vars.fox_setting));
     d78:	87 ed       	ldi	r24, 0xD7	; 215
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
		sprintf(g_tempStr, "FX=%d\n", byt);
     d80:	1f 92       	push	r1
     d82:	8f 93       	push	r24
     d84:	83 e4       	ldi	r24, 0x43	; 67
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		wrd = (uint16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     d9c:	89 ed       	ldi	r24, 0xD9	; 217
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 02 27 	call	0x4e04	; 0x4e04 <eeprom_read_word>
		sprintf(g_tempStr, "TC=%u\n", wrd);
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	8a e4       	ldi	r24, 0x4A	; 74
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		wrd = (uint16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     dc0:	8b ed       	ldi	r24, 0xDB	; 219
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 02 27 	call	0x4e04	; 0x4e04 <eeprom_read_word>
		sprintf(g_tempStr, "RVO=%u\n", wrd);
     dc8:	9f 93       	push	r25
     dca:	8f 93       	push	r24
     dcc:	81 e5       	ldi	r24, 0x51	; 81
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		byt = eeprom_read_byte(&(EepromManager::ee_vars.enable_LEDs));
     de4:	88 ed       	ldi	r24, 0xD8	; 216
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
		sprintf(g_tempStr, "LED=%d\n", byt);
     dec:	1f 92       	push	r1
     dee:	8f 93       	push	r24
     df0:	89 e5       	ldi	r24, 0x59	; 89
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		byt = eeprom_read_byte(&(EepromManager::ee_vars.enable_start_timer));
     e08:	8d ed       	ldi	r24, 0xDD	; 221
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
		sprintf(g_tempStr, "STA=%d\n", byt);
     e10:	1f 92       	push	r1
     e12:	8f 93       	push	r24
     e14:	81 e6       	ldi	r24, 0x61	; 97
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	9f 93       	push	r25
     e1a:	8f 93       	push	r24
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     e24:	8d b7       	in	r24, 0x3d	; 61
     e26:	9e b7       	in	r25, 0x3e	; 62
     e28:	84 96       	adiw	r24, 0x24	; 36
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	9e bf       	out	0x3e, r25	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	8d bf       	out	0x3d, r24	; 61
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		byt = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
     e3c:	8e ed       	ldi	r24, 0xDE	; 222
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
		sprintf(g_tempStr, "ETX=%d\n", byt);
     e44:	1f 92       	push	r1
     e46:	8f 93       	push	r24
     e48:	89 e6       	ldi	r24, 0x69	; 105
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		dwrd = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     e60:	8f ed       	ldi	r24, 0xDF	; 223
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <eeprom_read_dword>
		sprintf(g_tempStr, "SE=%lu\n", dwrd);
     e68:	9f 93       	push	r25
     e6a:	8f 93       	push	r24
     e6c:	7f 93       	push	r23
     e6e:	6f 93       	push	r22
     e70:	81 e7       	ldi	r24, 0x71	; 113
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	ce 01       	movw	r24, r28
     e84:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		dwrd = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     e88:	83 ee       	ldi	r24, 0xE3	; 227
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <eeprom_read_dword>
		sprintf(g_tempStr, "FE=%lu\n", dwrd);
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	7f 93       	push	r23
     e96:	6f 93       	push	r22
     e98:	89 e7       	ldi	r24, 0x79	; 121
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	9f 93       	push	r25
     e9e:	8f 93       	push	r24
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	ce 01       	movw	r24, r28
     eac:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
     eb0:	09 e2       	ldi	r16, 0x29	; 41
     eb2:	12 e0       	ldi	r17, 0x02	; 2
     eb4:	c6 e9       	ldi	r28, 0x96	; 150
     eb6:	d4 e0       	ldi	r29, 0x04	; 4
     eb8:	0f 2e       	mov	r0, r31
     eba:	fa ea       	ldi	r31, 0xAA	; 170
     ebc:	ef 2e       	mov	r14, r31
     ebe:	f4 e0       	ldi	r31, 0x04	; 4
     ec0:	ff 2e       	mov	r15, r31
     ec2:	f0 2d       	mov	r31, r0
     ec4:	8d b7       	in	r24, 0x3d	; 61
     ec6:	9e b7       	in	r25, 0x3e	; 62
     ec8:	46 96       	adiw	r24, 0x16	; 22
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	9e bf       	out	0x3e, r25	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	8d bf       	out	0x3d, r24	; 61

		for(int i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
     eda:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     edc:	88 23       	and	r24, r24
     ede:	29 f0       	breq	.+10     	; 0xeea <_ZN13EepromManager14dumpEEPROMVarsEv+0x1fe>
     ee0:	0f 5f       	subi	r16, 0xFF	; 255
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255

		dwrd = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		sprintf(g_tempStr, "FE=%lu\n", dwrd);
		lb_send_string(g_tempStr, TRUE);

		for(int i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     ee4:	ce 15       	cp	r28, r14
     ee6:	df 05       	cpc	r29, r15
     ee8:	a9 f7       	brne	.-22     	; 0xed4 <_ZN13EepromManager14dumpEEPROMVarsEv+0x1e8>
			{
				break;
			}
		}

		sprintf(g_tempStr, "ID=\"%s\"\n", g_messages_text[STATION_ID]);
     eea:	86 e9       	ldi	r24, 0x96	; 150
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	9f 93       	push	r25
     ef0:	8f 93       	push	r24
     ef2:	81 e8       	ldi	r24, 0x81	; 129
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	8e e4       	ldi	r24, 0x4E	; 78
     efc:	94 e0       	ldi	r25, 0x04	; 4
     efe:	9f 93       	push	r25
     f00:	8f 93       	push	r24
     f02:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	8e e4       	ldi	r24, 0x4E	; 78
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
     f10:	ce e3       	ldi	r28, 0x3E	; 62
     f12:	d2 e0       	ldi	r29, 0x02	; 2
     f14:	06 eb       	ldi	r16, 0xB6	; 182
     f16:	12 e0       	ldi	r17, 0x02	; 2
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
		/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(int i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			lb_send_value((char)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])), (char*)"T");
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 02 27 	call	0x4e04	; 0x4e04 <eeprom_read_word>
     f2a:	6a e8       	ldi	r22, 0x8A	; 138
     f2c:	71 e0       	ldi	r23, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z13lb_send_valuejPc>
     f34:	22 96       	adiw	r28, 0x02	; 2
		lb_send_string(g_tempStr, TRUE);

		/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(int i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     f36:	0c 17       	cp	r16, r28
     f38:	1d 07       	cpc	r17, r29
     f3a:	a1 f7       	brne	.-24     	; 0xf24 <_ZN13EepromManager14dumpEEPROMVarsEv+0x238>
		{
			lb_send_value((char)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])), (char*)"T");
		}

		lb_send_NewLine();
     f3c:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
     f40:	c6 ed       	ldi	r28, 0xD6	; 214
     f42:	d2 e0       	ldi	r29, 0x02	; 2

		for(int i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			lb_send_value((char)eeprom_read_byte(&(EepromManager::ee_vars.dataModulation[i])), (char*)"M");
     f44:	c8 01       	movw	r24, r16
     f46:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <eeprom_read_byte>
     f4a:	6c e8       	ldi	r22, 0x8C	; 140
     f4c:	71 e0       	ldi	r23, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z13lb_send_valuejPc>
     f54:	0f 5f       	subi	r16, 0xFF	; 255
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
			lb_send_value((char)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])), (char*)"T");
		}

		lb_send_NewLine();

		for(int i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     f58:	c0 17       	cp	r28, r16
     f5a:	d1 07       	cpc	r29, r17
     f5c:	99 f7       	brne	.-26     	; 0xf44 <_ZN13EepromManager14dumpEEPROMVarsEv+0x258>
		{
			lb_send_value((char)eeprom_read_byte(&(EepromManager::ee_vars.dataModulation[i])), (char*)"M");
		}

		lb_send_NewLine();
     f5e:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
	}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	08 95       	ret

00000f70 <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     f76:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	ce 01       	movw	r24, r28
     f7e:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     f8a:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     f8e:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     f98:	e4 e6       	ldi	r30, 0x64	; 100
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8f 77       	andi	r24, 0x7F	; 127
     fa0:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     fa2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     fa6:	85 e2       	ldi	r24, 0x25	; 37
     fa8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     fb8:	08 95       	ret

00000fba <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     fba:	84 ea       	ldi	r24, 0xA4	; 164
     fbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     fc0:	ec eb       	ldi	r30, 0xBC	; 188
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	88 23       	and	r24, r24
     fc8:	64 f0       	brlt	.+24     	; 0xfe2 <_Z9i2c_startv+0x28>
     fca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     fce:	81 11       	cpse	r24, r1
     fd0:	f9 cf       	rjmp	.-14     	; 0xfc4 <_Z9i2c_startv+0xa>
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     fd4:	80 e9       	ldi	r24, 0x90	; 144
     fd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return( TRUE);
     fe0:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     fe2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     fe6:	88 23       	and	r24, r24
     fe8:	a9 f3       	breq	.-22     	; 0xfd4 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     fea:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     fec:	08 95       	ret

00000fee <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     fee:	84 e9       	ldi	r24, 0x94	; 148
     ff0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ff4:	08 95       	ret

00000ff6 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     ff6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     ffa:	84 e8       	ldi	r24, 0x84	; 132
     ffc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1000:	ec eb       	ldi	r30, 0xBC	; 188
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	64 f0       	brlt	.+24     	; 0x1022 <_Z17i2c_write_successhh+0x2c>
    100a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    100e:	81 11       	cpse	r24, r1
    1010:	f9 cf       	rjmp	.-14     	; 0x1004 <_Z17i2c_write_successhh+0xe>
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    1014:	84 e9       	ldi	r24, 0x94	; 148
    1016:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			return(TRUE);
    1020:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
    1022:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    1026:	88 7f       	andi	r24, 0xF8	; 248
    1028:	86 13       	cpse	r24, r22
    102a:	f4 cf       	rjmp	.-24     	; 0x1014 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
    102c:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    102e:	08 95       	ret

00001030 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    1030:	84 ec       	ldi	r24, 0xC4	; 196
    1032:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1036:	ec eb       	ldi	r30, 0xBC	; 188
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	24 f0       	brlt	.+8      	; 0x1048 <_Z12i2c_read_ackv+0x18>
    1040:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1044:	81 11       	cpse	r24, r1
    1046:	f9 cf       	rjmp	.-14     	; 0x103a <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
    1048:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    104c:	08 95       	ret

0000104e <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    104e:	84 e8       	ldi	r24, 0x84	; 132
    1050:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1054:	ec eb       	ldi	r30, 0xBC	; 188
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 23       	and	r24, r24
    105c:	24 f0       	brlt	.+8      	; 0x1066 <_Z13i2c_read_nackv+0x18>
    105e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1062:	81 11       	cpse	r24, r1
    1064:	f9 cf       	rjmp	.-14     	; 0x1058 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
    1066:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    106a:	08 95       	ret

0000106c <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    106c:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1070:	28 7f       	andi	r18, 0xF8	; 248
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	28 17       	cp	r18, r24
    1078:	39 07       	cpc	r19, r25
    107a:	29 f0       	breq	.+10     	; 0x1086 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    107c:	84 e9       	ldi	r24, 0x94	; 148
    107e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	08 95       	ret
	}

	return(FALSE);
    1086:	80 e0       	ldi	r24, 0x00	; 0
}
    1088:	08 95       	ret

0000108a <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 d0       	rcall	.+0      	; 0x1090 <_Z16i2c_device_writehhPhh+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <_Z16i2c_device_writehhPhh+0x8>
    1092:	00 d0       	rcall	.+0      	; 0x1094 <_Z16i2c_device_writehhPhh+0xa>
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6b 83       	std	Y+3, r22	; 0x03
    109c:	5d 83       	std	Y+5, r21	; 0x05
    109e:	4c 83       	std	Y+4, r20	; 0x04
    10a0:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    10a2:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    10a4:	0e 94 dd 07 	call	0xfba	; 0xfba <_Z9i2c_startv>
		if(i2c_status(TW_START))
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	0e 94 36 08 	call	0x106c	; 0x106c <_Z10i2c_statush>
    10ae:	98 2f       	mov	r25, r24
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	99 23       	and	r25, r25
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_Z16i2c_device_writehhPhh+0x2e>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	88 23       	and	r24, r24
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	3f c0       	rjmp	.+126    	; 0x113e <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    10c0:	68 e1       	ldi	r22, 0x18	; 24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17i2c_write_successhh>
    10c8:	98 2f       	mov	r25, r24
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	99 23       	and	r25, r25
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <_Z16i2c_device_writehhPhh+0x48>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	88 23       	and	r24, r24
    10d4:	11 f0       	breq	.+4      	; 0x10da <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	32 c0       	rjmp	.+100    	; 0x113e <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    10da:	68 e2       	ldi	r22, 0x28	; 40
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17i2c_write_successhh>
    10e2:	98 2f       	mov	r25, r24
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	99 23       	and	r25, r25
    10e8:	09 f4       	brne	.+2      	; 0x10ec <_Z16i2c_device_writehhPhh+0x62>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	88 23       	and	r24, r24
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	25 c0       	rjmp	.+74     	; 0x113e <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	98 0f       	add	r25, r24
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	88 23       	and	r24, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <_Z16i2c_device_writehhPhh+0x7a>
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	99 23       	and	r25, r25
    1106:	c1 f0       	breq	.+48     	; 0x1138 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	98 0f       	add	r25, r24
    110e:	99 83       	std	Y+1, r25	; 0x01
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	68 e2       	ldi	r22, 0x28	; 40
    1122:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17i2c_write_successhh>
    1126:	98 2f       	mov	r25, r24
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	99 23       	and	r25, r25
    112c:	09 f4       	brne	.+2      	; 0x1130 <_Z16i2c_device_writehhPhh+0xa6>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	88 23       	and	r24, r24
    1132:	01 f3       	breq	.-64     	; 0x10f4 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	03 c0       	rjmp	.+6      	; 0x113e <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
    1138:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    113c:	80 e0       	ldi	r24, 0x00	; 0
}
    113e:	26 96       	adiw	r28, 0x06	; 6
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	00 d0       	rcall	.+0      	; 0x115a <_Z15i2c_device_readhhPhh+0xa>
    115a:	00 d0       	rcall	.+0      	; 0x115c <_Z15i2c_device_readhhPhh+0xc>
    115c:	00 d0       	rcall	.+0      	; 0x115e <_Z15i2c_device_readhhPhh+0xe>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	6b 83       	std	Y+3, r22	; 0x03
    1166:	5d 83       	std	Y+5, r21	; 0x05
    1168:	4c 83       	std	Y+4, r20	; 0x04
    116a:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    116c:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    116e:	0e 94 dd 07 	call	0xfba	; 0xfba <_Z9i2c_startv>
		if(i2c_status(TW_START))
    1172:	88 e0       	ldi	r24, 0x08	; 8
    1174:	0e 94 36 08 	call	0x106c	; 0x106c <_Z10i2c_statush>
    1178:	98 2f       	mov	r25, r24
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	99 23       	and	r25, r25
    117e:	09 f4       	brne	.+2      	; 0x1182 <_Z15i2c_device_readhhPhh+0x32>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	88 23       	and	r24, r24
    1184:	11 f0       	breq	.+4      	; 0x118a <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	79 c0       	rjmp	.+242    	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    118a:	68 e1       	ldi	r22, 0x18	; 24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17i2c_write_successhh>
    1192:	98 2f       	mov	r25, r24
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	99 23       	and	r25, r25
    1198:	09 f4       	brne	.+2      	; 0x119c <_Z15i2c_device_readhhPhh+0x4c>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	88 23       	and	r24, r24
    119e:	11 f0       	breq	.+4      	; 0x11a4 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	6c c0       	rjmp	.+216    	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    11a4:	68 e2       	ldi	r22, 0x28	; 40
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17i2c_write_successhh>
    11ac:	98 2f       	mov	r25, r24
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	99 23       	and	r25, r25
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <_Z15i2c_device_readhhPhh+0x66>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	88 23       	and	r24, r24
    11b8:	11 f0       	breq	.+4      	; 0x11be <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	5f c0       	rjmp	.+190    	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
    11be:	0e 94 dd 07 	call	0xfba	; 0xfba <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
    11c2:	80 e1       	ldi	r24, 0x10	; 16
    11c4:	0e 94 36 08 	call	0x106c	; 0x106c <_Z10i2c_statush>
    11c8:	98 2f       	mov	r25, r24
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	99 23       	and	r25, r25
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <_Z15i2c_device_readhhPhh+0x82>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	88 23       	and	r24, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	51 c0       	rjmp	.+162    	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	81 60       	ori	r24, 0x01	; 1
    11de:	60 e4       	ldi	r22, 0x40	; 64
    11e0:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17i2c_write_successhh>
    11e4:	98 2f       	mov	r25, r24
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	99 23       	and	r25, r25
    11ea:	09 f4       	brne	.+2      	; 0x11ee <_Z15i2c_device_readhhPhh+0x9e>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	88 23       	and	r24, r24
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	43 c0       	rjmp	.+134    	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	98 0f       	add	r25, r24
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <_Z15i2c_device_readhhPhh+0xb6>
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	99 23       	and	r25, r25
    1208:	b1 f1       	breq	.+108    	; 0x1276 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	88 23       	and	r24, r24
    120e:	d9 f0       	breq	.+54     	; 0x1246 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	98 0f       	add	r25, r24
    1216:	99 83       	std	Y+1, r25	; 0x01
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	89 01       	movw	r16, r18
    1222:	08 0f       	add	r16, r24
    1224:	19 1f       	adc	r17, r25
    1226:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z12i2c_read_ackv>
    122a:	f8 01       	movw	r30, r16
    122c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    122e:	80 e5       	ldi	r24, 0x50	; 80
    1230:	0e 94 36 08 	call	0x106c	; 0x106c <_Z10i2c_statush>
    1234:	98 2f       	mov	r25, r24
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	99 23       	and	r25, r25
    123a:	09 f4       	brne	.+2      	; 0x123e <_Z15i2c_device_readhhPhh+0xee>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	88 23       	and	r24, r24
    1240:	d1 f2       	breq	.-76     	; 0x11f6 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	1b c0       	rjmp	.+54     	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	89 01       	movw	r16, r18
    1252:	08 0f       	add	r16, r24
    1254:	19 1f       	adc	r17, r25
    1256:	0e 94 27 08 	call	0x104e	; 0x104e <_Z13i2c_read_nackv>
    125a:	f8 01       	movw	r30, r16
    125c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    125e:	88 e5       	ldi	r24, 0x58	; 88
    1260:	0e 94 36 08 	call	0x106c	; 0x106c <_Z10i2c_statush>
    1264:	98 2f       	mov	r25, r24
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	99 23       	and	r25, r25
    126a:	09 f4       	brne	.+2      	; 0x126e <_Z15i2c_device_readhhPhh+0x11e>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	88 23       	and	r24, r24
    1270:	11 f2       	breq	.-124    	; 0x11f6 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	03 c0       	rjmp	.+6      	; 0x127c <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    1276:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    127a:	80 e0       	ldi	r24, 0x00	; 0
}
    127c:	26 96       	adiw	r28, 0x06	; 6
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <_Z16nextFullTxBufferv>:

	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex = 0; bufferIndex < LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
    1292:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1296:	94 e0       	ldi	r25, 0x04	; 4
    1298:	59 e2       	ldi	r21, 0x29	; 41
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	52 9f       	mul	r21, r18
    12a0:	f0 01       	movw	r30, r0
    12a2:	53 9f       	mul	r21, r19
    12a4:	f0 0d       	add	r31, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	e0 5e       	subi	r30, 0xE0	; 224
    12aa:	fc 4f       	sbci	r31, 0xFC	; 252
    12ac:	40 81       	ld	r20, Z
    12ae:	41 11       	cpse	r20, r1
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <_Z16nextFullTxBufferv+0x38>
    12b2:	91 50       	subi	r25, 0x01	; 1
    12b4:	29 f0       	breq	.+10     	; 0x12c0 <_Z16nextFullTxBufferv+0x2e>
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	78 f3       	brcs	.-34     	; 0x129a <_Z16nextFullTxBufferv+0x8>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	ed cf       	rjmp	.-38     	; 0x129a <_Z16nextFullTxBufferv+0x8>
    12c0:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZZ16nextFullTxBuffervE11bufferIndex>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	08 95       	ret
    12ca:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZZ16nextFullTxBuffervE11bufferIndex>
    12ce:	49 e2       	ldi	r20, 0x29	; 41
    12d0:	42 9f       	mul	r20, r18
    12d2:	c0 01       	movw	r24, r0
    12d4:	43 9f       	mul	r20, r19
    12d6:	90 0d       	add	r25, r0
    12d8:	11 24       	eor	r1, r1
    12da:	80 5e       	subi	r24, 0xE0	; 224
    12dc:	9c 4f       	sbci	r25, 0xFC	; 252
    12de:	08 95       	ret

000012e0 <_Z17nextEmptyTxBufferv>:
    12e0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    12e4:	94 e0       	ldi	r25, 0x04	; 4
    12e6:	59 e2       	ldi	r21, 0x29	; 41
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	52 9f       	mul	r21, r18
    12ee:	f0 01       	movw	r30, r0
    12f0:	53 9f       	mul	r21, r19
    12f2:	f0 0d       	add	r31, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	e0 5e       	subi	r30, 0xE0	; 224
    12f8:	fc 4f       	sbci	r31, 0xFC	; 252
    12fa:	40 81       	ld	r20, Z
    12fc:	44 23       	and	r20, r20
    12fe:	61 f0       	breq	.+24     	; 0x1318 <_Z17nextEmptyTxBufferv+0x38>
    1300:	91 50       	subi	r25, 0x01	; 1
    1302:	29 f0       	breq	.+10     	; 0x130e <_Z17nextEmptyTxBufferv+0x2e>
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	78 f3       	brcs	.-34     	; 0x12e8 <_Z17nextEmptyTxBufferv+0x8>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	ed cf       	rjmp	.-38     	; 0x12e8 <_Z17nextEmptyTxBufferv+0x8>
    130e:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	08 95       	ret
    1318:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    131c:	49 e2       	ldi	r20, 0x29	; 41
    131e:	42 9f       	mul	r20, r18
    1320:	c0 01       	movw	r24, r0
    1322:	43 9f       	mul	r20, r19
    1324:	90 0d       	add	r25, r0
    1326:	11 24       	eor	r1, r1
    1328:	80 5e       	subi	r24, 0xE0	; 224
    132a:	9c 4f       	sbci	r25, 0xFC	; 252
    132c:	08 95       	ret

0000132e <_Z17nextEmptyRxBufferv>:
    132e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	9f e3       	ldi	r25, 0x3F	; 63
    1338:	89 9f       	mul	r24, r25
    133a:	f0 01       	movw	r30, r0
    133c:	11 24       	eor	r1, r1
    133e:	ee 55       	subi	r30, 0x5E	; 94
    1340:	fd 4f       	sbci	r31, 0xFD	; 253
    1342:	41 81       	ldd	r20, Z+1	; 0x01
    1344:	52 81       	ldd	r21, Z+2	; 0x02
    1346:	45 2b       	or	r20, r21
    1348:	a9 f0       	breq	.+42     	; 0x1374 <_Z17nextEmptyRxBufferv+0x46>
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	08 f0       	brcs	.+2      	; 0x1352 <_Z17nextEmptyRxBufferv+0x24>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	9f e3       	ldi	r25, 0x3F	; 63
    1358:	89 9f       	mul	r24, r25
    135a:	f0 01       	movw	r30, r0
    135c:	11 24       	eor	r1, r1
    135e:	ee 55       	subi	r30, 0x5E	; 94
    1360:	fd 4f       	sbci	r31, 0xFD	; 253
    1362:	41 81       	ldd	r20, Z+1	; 0x01
    1364:	52 81       	ldd	r21, Z+2	; 0x02
    1366:	45 2b       	or	r20, r21
    1368:	29 f0       	breq	.+10     	; 0x1374 <_Z17nextEmptyRxBufferv+0x46>
    136a:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	08 95       	ret
    1374:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1378:	4f e3       	ldi	r20, 0x3F	; 63
    137a:	42 9f       	mul	r20, r18
    137c:	c0 01       	movw	r24, r0
    137e:	43 9f       	mul	r20, r19
    1380:	90 0d       	add	r25, r0
    1382:	11 24       	eor	r1, r1
    1384:	8e 55       	subi	r24, 0x5E	; 94
    1386:	9d 4f       	sbci	r25, 0xFD	; 253
    1388:	08 95       	ret

0000138a <_Z16nextFullRxBufferv>:
    138a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end>
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	9f e3       	ldi	r25, 0x3F	; 63
    1394:	89 9f       	mul	r24, r25
    1396:	f0 01       	movw	r30, r0
    1398:	11 24       	eor	r1, r1
    139a:	ee 55       	subi	r30, 0x5E	; 94
    139c:	fd 4f       	sbci	r31, 0xFD	; 253
    139e:	41 81       	ldd	r20, Z+1	; 0x01
    13a0:	52 81       	ldd	r21, Z+2	; 0x02
    13a2:	45 2b       	or	r20, r21
    13a4:	a9 f4       	brne	.+42     	; 0x13d0 <_Z16nextFullRxBufferv+0x46>
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <_Z16nextFullRxBufferv+0x24>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	9f e3       	ldi	r25, 0x3F	; 63
    13b4:	89 9f       	mul	r24, r25
    13b6:	f0 01       	movw	r30, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	ee 55       	subi	r30, 0x5E	; 94
    13bc:	fd 4f       	sbci	r31, 0xFD	; 253
    13be:	41 81       	ldd	r20, Z+1	; 0x01
    13c0:	52 81       	ldd	r21, Z+2	; 0x02
    13c2:	45 2b       	or	r20, r21
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <_Z16nextFullRxBufferv+0x46>
    13c6:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	08 95       	ret
    13d0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end>
    13d4:	4f e3       	ldi	r20, 0x3F	; 63
    13d6:	42 9f       	mul	r20, r18
    13d8:	c0 01       	movw	r24, r0
    13da:	43 9f       	mul	r20, r19
    13dc:	90 0d       	add	r25, r0
    13de:	11 24       	eor	r1, r1
    13e0:	8e 55       	subi	r24, 0x5E	; 94
    13e2:	9d 4f       	sbci	r25, 0xFD	; 253
    13e4:	08 95       	ret

000013e6 <_Z19linkbusTxInProgressv>:
    13e6:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_ZL17linkbus_tx_active>
    13ea:	08 95       	ret

000013ec <_Z16linkbus_start_txv>:
    13ec:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <_ZL17linkbus_tx_active>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	91 11       	cpse	r25, r1
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	91 11       	cpse	r25, r1
    13f8:	08 c0       	rjmp	.+16     	; 0x140a <_Z16linkbus_start_txv+0x1e>
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <_ZL17linkbus_tx_active>
    1400:	e1 ec       	ldi	r30, 0xC1	; 193
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	90 81       	ld	r25, Z
    1406:	90 62       	ori	r25, 0x20	; 32
    1408:	90 83       	st	Z, r25
    140a:	08 95       	ret

0000140c <_Z14linkbus_end_txv>:
    140c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_ZL17linkbus_tx_active>
    1410:	88 23       	and	r24, r24
    1412:	39 f0       	breq	.+14     	; 0x1422 <_Z14linkbus_end_txv+0x16>
    1414:	e1 ec       	ldi	r30, 0xC1	; 193
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 7d       	andi	r24, 0xDF	; 223
    141c:	80 83       	st	Z, r24
    141e:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZL17linkbus_tx_active>
    1422:	08 95       	ret

00001424 <_Z12linkbus_initm>:
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	8e e7       	ldi	r24, 0x7E	; 126
    142a:	e2 ea       	ldi	r30, 0xA2	; 162
    142c:	f2 e0       	ldi	r31, 0x02	; 2
    142e:	df 01       	movw	r26, r30
    1430:	1d 92       	st	X+, r1
    1432:	8a 95       	dec	r24
    1434:	e9 f7       	brne	.-6      	; 0x1430 <_Z12linkbus_initm+0xc>
    1436:	e0 e2       	ldi	r30, 0x20	; 32
    1438:	f3 e0       	ldi	r31, 0x03	; 3
    143a:	10 82       	st	Z, r1
    143c:	11 a6       	std	Z+41, r1	; 0x29
    143e:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <_ZL9tx_buffer+0x52>
    1442:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZL9tx_buffer+0x7b>
    1446:	60 e4       	ldi	r22, 0x40	; 64
    1448:	72 e4       	ldi	r23, 0x42	; 66
    144a:	8f e0       	ldi	r24, 0x0F	; 15
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 46 23 	call	0x468c	; 0x468c <__udivmodsi4>
    1452:	21 50       	subi	r18, 0x01	; 1
    1454:	31 09       	sbc	r19, r1
    1456:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    145a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    145e:	88 e9       	ldi	r24, 0x98	; 152
    1460:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1464:	8e e0       	ldi	r24, 0x0E	; 14
    1466:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    146a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZL14g_bus_disabled>
    146e:	08 95       	ret

00001470 <_Z17linkbus_send_textPc>:
	}
}


BOOL linkbus_send_text(char* text)
{
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
    1478:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    147c:	21 11       	cpse	r18, r1
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <_Z17linkbus_send_textPc+0x38>
	{
		return( err);
	}

	if(text)
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	a1 f0       	breq	.+40     	; 0x14ac <_Z17linkbus_send_textPc+0x3c>
    1484:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
    1486:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z17nextEmptyTxBufferv>

		while(!buff && tries)
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	b9 f4       	brne	.+46     	; 0x14bc <_Z17linkbus_send_textPc+0x4c>
    148e:	c8 ec       	ldi	r28, 0xC8	; 200
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <_Z17linkbus_send_textPc+0x28>
    1494:	20 97       	sbiw	r28, 0x00	; 0
    1496:	61 f0       	breq	.+24     	; 0x14b0 <_Z17linkbus_send_textPc+0x40>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    1498:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <_ZL17linkbus_tx_active>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
		{
			while(linkbusTxInProgress() && tries)
    149c:	99 23       	and	r25, r25
    149e:	51 f0       	breq	.+20     	; 0x14b4 <_Z17linkbus_send_textPc+0x44>
    14a0:	20 97       	sbiw	r28, 0x00	; 0
    14a2:	d1 f0       	breq	.+52     	; 0x14d8 <_Z17linkbus_send_textPc+0x68>
			{
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
    14a4:	21 97       	sbiw	r28, 0x01	; 1
    14a6:	f8 cf       	rjmp	.-16     	; 0x1498 <_Z17linkbus_send_textPc+0x28>
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	1b c0       	rjmp	.+54     	; 0x14e2 <_Z17linkbus_send_textPc+0x72>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	19 c0       	rjmp	.+50     	; 0x14e2 <_Z17linkbus_send_textPc+0x72>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	17 c0       	rjmp	.+46     	; 0x14e2 <_Z17linkbus_send_textPc+0x72>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptyTxBuffer();
    14b4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	61 f3       	breq	.-40     	; 0x1494 <_Z17linkbus_send_textPc+0x24>
			buff = nextEmptyTxBuffer();
		}

		if(buff)
		{
			sprintf(*buff, text);
    14bc:	1f 93       	push	r17
    14be:	0f 93       	push	r16
    14c0:	9f 93       	push	r25
    14c2:	8f 93       	push	r24
    14c4:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>

			linkbus_start_tx();
    14c8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_Z16linkbus_start_txv>
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
			err = FALSE;
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <_Z17linkbus_send_textPc+0x72>
				if(tries)
				{
					tries--;    /* wait until transmit finishes */
				}
			}
			buff = nextEmptyTxBuffer();
    14d8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	71 f7       	brne	.-36     	; 0x14bc <_Z17linkbus_send_textPc+0x4c>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <_Z17lb_send_NewPromptv>:
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
	if(g_bus_disabled) return;
    14ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    14f0:	81 11       	cpse	r24, r1
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <_Z17lb_send_NewPromptv+0x14>

	while(linkbus_send_text((char*)textPrompt))
    14f4:	88 e9       	ldi	r24, 0x98	; 152
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z17linkbus_send_textPc>
    14fc:	81 11       	cpse	r24, r1
    14fe:	fa cf       	rjmp	.-12     	; 0x14f4 <_Z17lb_send_NewPromptv+0x8>
    1500:	08 95       	ret

00001502 <_Z15lb_send_NewLinev>:
	}
}

void lb_send_NewLine(void)
{
	if(g_bus_disabled) return;
    1502:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    1506:	81 11       	cpse	r24, r1
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <_Z15lb_send_NewLinev+0x10>
	linkbus_send_text((char*)crlf);
    150a:	8b e9       	ldi	r24, 0x9B	; 155
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z17linkbus_send_textPc>
    1512:	08 95       	ret

00001514 <_Z12lb_echo_charh>:
}

void lb_echo_char(uint8_t c)
{
	if(g_bus_disabled) return;
    1514:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    1518:	91 11       	cpse	r25, r1
    151a:	07 c0       	rjmp	.+14     	; 0x152a <_Z12lb_echo_charh+0x16>
	g_tempMsgBuff[0] = c;
    151c:	e5 ec       	ldi	r30, 0xC5	; 197
    151e:	f3 e0       	ldi	r31, 0x03	; 3
    1520:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    1522:	11 82       	std	Z+1, r1	; 0x01
	linkbus_send_text(g_tempMsgBuff);
    1524:	cf 01       	movw	r24, r30
    1526:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z17linkbus_send_textPc>
    152a:	08 95       	ret

0000152c <_Z14lb_send_stringPch>:
}

BOOL lb_send_string(char* str, BOOL wait)
{
    152c:	cf 93       	push	r28
	BOOL err = FALSE;

	if(g_bus_disabled)
    152e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    1532:	21 11       	cpse	r18, r1
    1534:	25 c0       	rjmp	.+74     	; 0x1580 <_Z14lb_send_stringPch+0x54>
	{
		return TRUE;
	}

	if(str == NULL)
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	29 f1       	breq	.+74     	; 0x1584 <_Z14lb_send_stringPch+0x58>
	{
		return( TRUE);
	}

	if(strlen(str) > LINKBUS_MAX_TX_MSG_LENGTH)
    153a:	fc 01       	movw	r30, r24
    153c:	01 90       	ld	r0, Z+
    153e:	00 20       	and	r0, r0
    1540:	e9 f7       	brne	.-6      	; 0x153c <_Z14lb_send_stringPch+0x10>
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	e8 1b       	sub	r30, r24
    1546:	f9 0b       	sbc	r31, r25
    1548:	ba 97       	sbiw	r30, 0x2a	; 42
    154a:	f0 f4       	brcc	.+60     	; 0x1588 <_Z14lb_send_stringPch+0x5c>
    154c:	c6 2f       	mov	r28, r22
    154e:	bc 01       	movw	r22, r24
	{
		return( TRUE);
	}

	strncpy(g_tempMsgBuff, str, LINKBUS_MAX_TX_MSG_LENGTH);
    1550:	49 e2       	ldi	r20, 0x29	; 41
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	85 ec       	ldi	r24, 0xC5	; 197
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	0e 94 15 24 	call	0x482a	; 0x482a <strncpy>

	if(wait)
    155c:	cc 23       	and	r28, r28
    155e:	59 f0       	breq	.+22     	; 0x1576 <_Z14lb_send_stringPch+0x4a>
	{
		while((err = linkbus_send_text(g_tempMsgBuff)))
    1560:	85 ec       	ldi	r24, 0xC5	; 197
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z17linkbus_send_textPc>
    1568:	81 11       	cpse	r24, r1
    156a:	fa cf       	rjmp	.-12     	; 0x1560 <_Z14lb_send_stringPch+0x34>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    156c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_ZL17linkbus_tx_active>
	{
		while((err = linkbus_send_text(g_tempMsgBuff)))
		{
			;
		}
		while(!err && linkbusTxInProgress())
    1570:	81 11       	cpse	r24, r1
    1572:	fc cf       	rjmp	.-8      	; 0x156c <_Z14lb_send_stringPch+0x40>
    1574:	0a c0       	rjmp	.+20     	; 0x158a <_Z14lb_send_stringPch+0x5e>
			;
		}
	}
	else
	{
		err = linkbus_send_text(g_tempMsgBuff);
    1576:	85 ec       	ldi	r24, 0xC5	; 197
    1578:	93 e0       	ldi	r25, 0x03	; 3
    157a:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z17linkbus_send_textPc>
    157e:	05 c0       	rjmp	.+10     	; 0x158a <_Z14lb_send_stringPch+0x5e>
{
	BOOL err = FALSE;

	if(g_bus_disabled)
	{
		return TRUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	03 c0       	rjmp	.+6      	; 0x158a <_Z14lb_send_stringPch+0x5e>
	}

	if(str == NULL)
	{
		return( TRUE);
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	01 c0       	rjmp	.+2      	; 0x158a <_Z14lb_send_stringPch+0x5e>
	}

	if(strlen(str) > LINKBUS_MAX_TX_MSG_LENGTH)
	{
		return( TRUE);
    1588:	81 e0       	ldi	r24, 0x01	; 1
	{
		err = linkbus_send_text(g_tempMsgBuff);
	}

	return( err);
}
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <_Z13lb_send_valuejPc>:

void lb_send_value(uint16_t value, char* label)
{
	BOOL err;
	if(g_bus_disabled) return;
    158e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZL14g_bus_disabled>
    1592:	21 11       	cpse	r18, r1
    1594:	24 c0       	rjmp	.+72     	; 0x15de <_Z13lb_send_valuejPc+0x50>

	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	31 e0       	ldi	r19, 0x01	; 1
    159a:	3f 93       	push	r19
    159c:	2f 93       	push	r18
    159e:	9f 93       	push	r25
    15a0:	8f 93       	push	r24
    15a2:	7f 93       	push	r23
    15a4:	6f 93       	push	r22
    15a6:	8e e8       	ldi	r24, 0x8E	; 142
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	9f 93       	push	r25
    15ac:	8f 93       	push	r24
    15ae:	85 ec       	ldi	r24, 0xC5	; 197
    15b0:	93 e0       	ldi	r25, 0x03	; 3
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
    15ba:	8d b7       	in	r24, 0x3d	; 61
    15bc:	9e b7       	in	r25, 0x3e	; 62
    15be:	0a 96       	adiw	r24, 0x0a	; 10
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	9e bf       	out	0x3e, r25	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	8d bf       	out	0x3d, r24	; 61
	while((err = linkbus_send_text(g_tempMsgBuff)))
    15ca:	85 ec       	ldi	r24, 0xC5	; 197
    15cc:	93 e0       	ldi	r25, 0x03	; 3
    15ce:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z17linkbus_send_textPc>
    15d2:	81 11       	cpse	r24, r1
    15d4:	fa cf       	rjmp	.-12     	; 0x15ca <_Z13lb_send_valuejPc+0x3c>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
    15d6:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_ZL17linkbus_tx_active>
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    15da:	81 11       	cpse	r24, r1
    15dc:	fc cf       	rjmp	.-8      	; 0x15d6 <_Z13lb_send_valuejPc+0x48>
    15de:	08 95       	ret

000015e0 <__vector_21>:

	return( TRUE);
}

void startEventNow(void)
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_18>:
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	1f 93       	push	r17
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1620:	c0 91 4b 04 	lds	r28, 0x044B	; 0x80044b <_ZZ11__vector_18E4buff>
    1624:	d0 91 4c 04 	lds	r29, 0x044C	; 0x80044c <_ZZ11__vector_18E4buff+0x1>
    1628:	20 97       	sbiw	r28, 0x00	; 0
    162a:	51 f4       	brne	.+20     	; 0x1640 <__vector_18+0x4c>
    162c:	0e 94 97 09 	call	0x132e	; 0x132e <_Z17nextEmptyRxBufferv>
    1630:	ec 01       	movw	r28, r24
    1632:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <_ZZ11__vector_18E4buff+0x1>
    1636:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_ZZ11__vector_18E4buff>
    163a:	89 2b       	or	r24, r25
    163c:	09 f4       	brne	.+2      	; 0x1640 <__vector_18+0x4c>
    163e:	62 c1       	rjmp	.+708    	; 0x1904 <__vector_18+0x310>
    1640:	81 2f       	mov	r24, r17
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <toupper>
    1648:	9c 01       	movw	r18, r24
    164a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZZ11__vector_18E11ignoreCount>
    164e:	88 23       	and	r24, r24
    1650:	21 f0       	breq	.+8      	; 0x165a <__vector_18+0x66>
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ11__vector_18E11ignoreCount>
    1658:	55 c1       	rjmp	.+682    	; 0x1904 <__vector_18+0x310>
    165a:	2b 31       	cpi	r18, 0x1B	; 27
    165c:	21 f4       	brne	.+8      	; 0x1666 <__vector_18+0x72>
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ11__vector_18E11ignoreCount>
    1664:	4f c1       	rjmp	.+670    	; 0x1904 <__vector_18+0x310>
    1666:	2d 30       	cpi	r18, 0x0D	; 13
    1668:	09 f0       	breq	.+2      	; 0x166c <__vector_18+0x78>
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <__vector_18+0xf6>
    166c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZZ11__vector_18E13receiving_msg>
    1670:	88 23       	and	r24, r24
    1672:	31 f1       	breq	.+76     	; 0x16c0 <__vector_18+0xcc>
    1674:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_ZZ11__vector_18E9charIndex>
    1678:	ee 23       	and	r30, r30
    167a:	f9 f0       	breq	.+62     	; 0x16ba <__vector_18+0xc6>
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	88 83       	st	Y, r24
    1680:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    1684:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <_ZZ11__vector_18E11field_index>
    1690:	88 23       	and	r24, r24
    1692:	79 f0       	breq	.+30     	; 0x16b2 <__vector_18+0xbe>
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <_ZZ11__vector_18E9field_len>
    169c:	54 e1       	ldi	r21, 0x14	; 20
    169e:	58 9f       	mul	r21, r24
    16a0:	90 01       	movw	r18, r0
    16a2:	59 9f       	mul	r21, r25
    16a4:	30 0d       	add	r19, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	c2 0f       	add	r28, r18
    16aa:	d3 1f       	adc	r29, r19
    16ac:	c4 0f       	add	r28, r20
    16ae:	d1 1d       	adc	r29, r1
    16b0:	1b 82       	std	Y+3, r1	; 0x03
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	e6 5f       	subi	r30, 0xF6	; 246
    16b6:	fb 4f       	sbci	r31, 0xFB	; 251
    16b8:	10 82       	st	Z, r1
    16ba:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <__vector_18+0xd4>
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	9f e7       	ldi	r25, 0x7F	; 127
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ11__vector_18E9charIndex>
    16cc:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZZ11__vector_18E9field_len>
    16d0:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    16d4:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    16d8:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZZ11__vector_18E11field_index>
    16dc:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZZ11__vector_18E4buff+0x1>
    16e0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZZ11__vector_18E4buff>
    16e4:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_ZZ11__vector_18E13receiving_msg>
    16e8:	0d c1       	rjmp	.+538    	; 0x1904 <__vector_18+0x310>
    16ea:	22 23       	and	r18, r18
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <__vector_18+0xfc>
    16ee:	0a c1       	rjmp	.+532    	; 0x1904 <__vector_18+0x310>
    16f0:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_ZZ11__vector_18E9charIndex>
    16f4:	4e 2f       	mov	r20, r30
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	da 01       	movw	r26, r20
    16fa:	a6 5f       	subi	r26, 0xF6	; 246
    16fc:	bb 4f       	sbci	r27, 0xFB	; 251
    16fe:	2c 93       	st	X, r18
    1700:	ee 23       	and	r30, r30
    1702:	09 f4       	brne	.+2      	; 0x1706 <__vector_18+0x112>
    1704:	d6 c0       	rjmp	.+428    	; 0x18b2 <__vector_18+0x2be>
    1706:	2f 37       	cpi	r18, 0x7F	; 127
    1708:	09 f0       	breq	.+2      	; 0x170c <__vector_18+0x118>
    170a:	5f c0       	rjmp	.+190    	; 0x17ca <__vector_18+0x1d6>
    170c:	e1 50       	subi	r30, 0x01	; 1
    170e:	e0 93 49 04 	sts	0x0449, r30	; 0x800449 <_ZZ11__vector_18E9charIndex>
    1712:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <_ZZ11__vector_18E11field_index>
    1716:	81 11       	cpse	r24, r1
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <__vector_18+0x14c>
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	e6 5f       	subi	r30, 0xF6	; 246
    171e:	fb 4f       	sbci	r31, 0xFB	; 251
    1720:	40 81       	ld	r20, Z
    1722:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    1726:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    172a:	84 1b       	sub	r24, r20
    172c:	91 09       	sbc	r25, r1
    172e:	6a e0       	ldi	r22, 0x0A	; 10
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	0e 94 32 23 	call	0x4664	; 0x4664 <__divmodhi4>
    1736:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    173a:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    173e:	39 c0       	rjmp	.+114    	; 0x17b2 <__vector_18+0x1be>
    1740:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZZ11__vector_18E9field_len>
    1744:	99 23       	and	r25, r25
    1746:	91 f0       	breq	.+36     	; 0x176c <__vector_18+0x178>
    1748:	4f ef       	ldi	r20, 0xFF	; 255
    174a:	49 0f       	add	r20, r25
    174c:	40 93 05 04 	sts	0x0405, r20	; 0x800405 <_ZZ11__vector_18E9field_len>
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	54 e1       	ldi	r21, 0x14	; 20
    1756:	58 9f       	mul	r21, r24
    1758:	b0 01       	movw	r22, r0
    175a:	59 9f       	mul	r21, r25
    175c:	70 0d       	add	r23, r0
    175e:	11 24       	eor	r1, r1
    1760:	c6 0f       	add	r28, r22
    1762:	d7 1f       	adc	r29, r23
    1764:	c4 0f       	add	r28, r20
    1766:	d1 1d       	adc	r29, r1
    1768:	1b 82       	std	Y+3, r1	; 0x03
    176a:	23 c0       	rjmp	.+70     	; 0x17b2 <__vector_18+0x1be>
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	e6 5f       	subi	r30, 0xF6	; 246
    1770:	fb 4f       	sbci	r31, 0xFB	; 251
    1772:	90 81       	ld	r25, Z
    1774:	90 32       	cpi	r25, 0x20	; 32
    1776:	a1 f4       	brne	.+40     	; 0x17a0 <__vector_18+0x1ac>
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZZ11__vector_18E11field_index>
    177e:	de 01       	movw	r26, r28
    1780:	94 e1       	ldi	r25, 0x14	; 20
    1782:	89 9f       	mul	r24, r25
    1784:	a0 0d       	add	r26, r0
    1786:	b1 1d       	adc	r27, r1
    1788:	11 24       	eor	r1, r1
    178a:	13 96       	adiw	r26, 0x03	; 3
    178c:	fd 01       	movw	r30, r26
    178e:	01 90       	ld	r0, Z+
    1790:	00 20       	and	r0, r0
    1792:	e9 f7       	brne	.-6      	; 0x178e <__vector_18+0x19a>
    1794:	31 97       	sbiw	r30, 0x01	; 1
    1796:	ea 1b       	sub	r30, r26
    1798:	fb 0b       	sbc	r31, r27
    179a:	e0 93 05 04 	sts	0x0405, r30	; 0x800405 <_ZZ11__vector_18E9field_len>
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <__vector_18+0x1be>
    17a0:	94 e1       	ldi	r25, 0x14	; 20
    17a2:	89 9f       	mul	r24, r25
    17a4:	c0 0d       	add	r28, r0
    17a6:	d1 1d       	adc	r29, r1
    17a8:	11 24       	eor	r1, r1
    17aa:	1b 82       	std	Y+3, r1	; 0x03
    17ac:	81 50       	subi	r24, 0x01	; 1
    17ae:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZZ11__vector_18E11field_index>
    17b2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZZ11__vector_18E9charIndex>
    17b6:	e8 2f       	mov	r30, r24
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	e6 5f       	subi	r30, 0xF6	; 246
    17bc:	fb 4f       	sbci	r31, 0xFB	; 251
    17be:	10 82       	st	Z, r1
    17c0:	81 11       	cpse	r24, r1
    17c2:	93 c0       	rjmp	.+294    	; 0x18ea <__vector_18+0x2f6>
    17c4:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_ZZ11__vector_18E13receiving_msg>
    17c8:	90 c0       	rjmp	.+288    	; 0x18ea <__vector_18+0x2f6>
    17ca:	20 32       	cpi	r18, 0x20	; 32
    17cc:	79 f5       	brne	.+94     	; 0x182c <__vector_18+0x238>
    17ce:	fa 01       	movw	r30, r20
    17d0:	e7 5f       	subi	r30, 0xF7	; 247
    17d2:	fb 4f       	sbci	r31, 0xFB	; 251
    17d4:	80 81       	ld	r24, Z
    17d6:	80 32       	cpi	r24, 0x20	; 32
    17d8:	09 f4       	brne	.+2      	; 0x17dc <__vector_18+0x1e8>
    17da:	94 c0       	rjmp	.+296    	; 0x1904 <__vector_18+0x310>
    17dc:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <_ZZ11__vector_18E11field_index>
    17e0:	68 2f       	mov	r22, r24
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	fb 01       	movw	r30, r22
    17e6:	31 96       	adiw	r30, 0x01	; 1
    17e8:	33 97       	sbiw	r30, 0x03	; 3
    17ea:	0c f0       	brlt	.+2      	; 0x17ee <__vector_18+0x1fa>
    17ec:	8b c0       	rjmp	.+278    	; 0x1904 <__vector_18+0x310>
    17ee:	88 23       	and	r24, r24
    17f0:	79 f0       	breq	.+30     	; 0x1810 <__vector_18+0x21c>
    17f2:	61 50       	subi	r22, 0x01	; 1
    17f4:	71 09       	sbc	r23, r1
    17f6:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZZ11__vector_18E9field_len>
    17fa:	a4 e1       	ldi	r26, 0x14	; 20
    17fc:	a6 9f       	mul	r26, r22
    17fe:	f0 01       	movw	r30, r0
    1800:	a7 9f       	mul	r26, r23
    1802:	f0 0d       	add	r31, r0
    1804:	11 24       	eor	r1, r1
    1806:	ce 0f       	add	r28, r30
    1808:	df 1f       	adc	r29, r31
    180a:	c9 0f       	add	r28, r25
    180c:	d1 1d       	adc	r29, r1
    180e:	1b 82       	std	Y+3, r1	; 0x03
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZZ11__vector_18E11field_index>
    1816:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZZ11__vector_18E9field_len>
    181a:	4f 5f       	subi	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	4e 33       	cpi	r20, 0x3E	; 62
    1820:	51 05       	cpc	r21, r1
    1822:	0c f0       	brlt	.+2      	; 0x1826 <__vector_18+0x232>
    1824:	4e e3       	ldi	r20, 0x3E	; 62
    1826:	40 93 49 04 	sts	0x0449, r20	; 0x800449 <_ZZ11__vector_18E9charIndex>
    182a:	5f c0       	rjmp	.+190    	; 0x18ea <__vector_18+0x2f6>
    182c:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <_ZZ11__vector_18E9field_len>
    1830:	84 31       	cpi	r24, 0x14	; 20
    1832:	08 f0       	brcs	.+2      	; 0x1836 <__vector_18+0x242>
    1834:	67 c0       	rjmp	.+206    	; 0x1904 <__vector_18+0x310>
    1836:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <_ZZ11__vector_18E11field_index>
    183a:	41 11       	cpse	r20, r1
    183c:	19 c0       	rjmp	.+50     	; 0x1870 <__vector_18+0x27c>
    183e:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    1842:	50 91 08 04 	lds	r21, 0x0408	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    1846:	ba 01       	movw	r22, r20
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	44 0f       	add	r20, r20
    184e:	55 1f       	adc	r21, r21
    1850:	44 0f       	add	r20, r20
    1852:	55 1f       	adc	r21, r21
    1854:	44 0f       	add	r20, r20
    1856:	55 1f       	adc	r21, r21
    1858:	46 0f       	add	r20, r22
    185a:	57 1f       	adc	r21, r23
    185c:	42 0f       	add	r20, r18
    185e:	51 1d       	adc	r21, r1
    1860:	50 93 08 04 	sts	0x0408, r21	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    1864:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZZ11__vector_18E9field_len>
    186e:	16 c0       	rjmp	.+44     	; 0x189c <__vector_18+0x2a8>
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	41 50       	subi	r20, 0x01	; 1
    1874:	51 09       	sbc	r21, r1
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	98 0f       	add	r25, r24
    187a:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <_ZZ11__vector_18E9field_len>
    187e:	e4 e1       	ldi	r30, 0x14	; 20
    1880:	e4 9f       	mul	r30, r20
    1882:	b0 01       	movw	r22, r0
    1884:	e5 9f       	mul	r30, r21
    1886:	70 0d       	add	r23, r0
    1888:	11 24       	eor	r1, r1
    188a:	c6 0f       	add	r28, r22
    188c:	d7 1f       	adc	r29, r23
    188e:	fe 01       	movw	r30, r28
    1890:	e8 0f       	add	r30, r24
    1892:	f1 1d       	adc	r31, r1
    1894:	23 83       	std	Z+3, r18	; 0x03
    1896:	c9 0f       	add	r28, r25
    1898:	d1 1d       	adc	r29, r1
    189a:	1b 82       	std	Y+3, r1	; 0x03
    189c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZZ11__vector_18E9charIndex>
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	8e 33       	cpi	r24, 0x3E	; 62
    18a6:	91 05       	cpc	r25, r1
    18a8:	0c f0       	brlt	.+2      	; 0x18ac <__vector_18+0x2b8>
    18aa:	8e e3       	ldi	r24, 0x3E	; 62
    18ac:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZZ11__vector_18E9charIndex>
    18b0:	1c c0       	rjmp	.+56     	; 0x18ea <__vector_18+0x2f6>
    18b2:	2f 37       	cpi	r18, 0x7F	; 127
    18b4:	41 f4       	brne	.+16     	; 0x18c6 <__vector_18+0x2d2>
    18b6:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    18ba:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    18be:	18 16       	cp	r1, r24
    18c0:	19 06       	cpc	r1, r25
    18c2:	bc f0       	brlt	.+46     	; 0x18f2 <__vector_18+0x2fe>
    18c4:	1b c0       	rjmp	.+54     	; 0x18fc <__vector_18+0x308>
    18c6:	20 32       	cpi	r18, 0x20	; 32
    18c8:	e9 f0       	breq	.+58     	; 0x1904 <__vector_18+0x310>
    18ca:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_ZZ11__vector_18E11field_index>
    18ce:	c9 01       	movw	r24, r18
    18d0:	99 27       	eor	r25, r25
    18d2:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    18d6:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    18da:	1b 82       	std	Y+3, r1	; 0x03
    18dc:	1f 8a       	std	Y+23, r1	; 0x17
    18de:	1b a6       	std	Y+43, r1	; 0x2b
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <_ZZ11__vector_18E13receiving_msg>
    18e6:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZZ11__vector_18E9charIndex>
    18ea:	82 2f       	mov	r24, r18
    18ec:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_Z12lb_echo_charh>
    18f0:	09 c0       	rjmp	.+18     	; 0x1904 <__vector_18+0x310>
    18f2:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    18f6:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    18fa:	f7 cf       	rjmp	.-18     	; 0x18ea <__vector_18+0x2f6>
    18fc:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_ZZ11__vector_18E6msg_ID+0x1>
    1900:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_ZZ11__vector_18E6msg_ID>
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	1f 91       	pop	r17
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <__vector_19>:
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	2f 93       	push	r18
    1938:	3f 93       	push	r19
    193a:	4f 93       	push	r20
    193c:	5f 93       	push	r21
    193e:	6f 93       	push	r22
    1940:	7f 93       	push	r23
    1942:	8f 93       	push	r24
    1944:	9f 93       	push	r25
    1946:	af 93       	push	r26
    1948:	bf 93       	push	r27
    194a:	ef 93       	push	r30
    194c:	ff 93       	push	r31
    194e:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_ZZ11__vector_19E4buff>
    1952:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <_ZZ11__vector_19E4buff+0x1>
    1956:	89 2b       	or	r24, r25
    1958:	31 f4       	brne	.+12     	; 0x1966 <__vector_19+0x3a>
    195a:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z16nextFullTxBufferv>
    195e:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <_ZZ11__vector_19E4buff+0x1>
    1962:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_ZZ11__vector_19E4buff>
    1966:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <_ZZ11__vector_19E4buff>
    196a:	f0 91 04 04 	lds	r31, 0x0404	; 0x800404 <_ZZ11__vector_19E4buff+0x1>
    196e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZZ11__vector_19E9charIndex>
    1972:	df 01       	movw	r26, r30
    1974:	a8 0f       	add	r26, r24
    1976:	b1 1d       	adc	r27, r1
    1978:	9c 91       	ld	r25, X
    197a:	99 23       	and	r25, r25
    197c:	31 f0       	breq	.+12     	; 0x198a <__vector_19+0x5e>
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_ZZ11__vector_19E9charIndex>
    1984:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <__vector_19+0x78>
    198a:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_ZZ11__vector_19E9charIndex>
    198e:	10 82       	st	Z, r1
    1990:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z16nextFullTxBufferv>
    1994:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <_ZZ11__vector_19E4buff+0x1>
    1998:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_ZZ11__vector_19E4buff>
    199c:	89 2b       	or	r24, r25
    199e:	11 f4       	brne	.+4      	; 0x19a4 <__vector_19+0x78>
    19a0:	0e 94 06 0a 	call	0x140c	; 0x140c <_Z14linkbus_end_txv>
    19a4:	ff 91       	pop	r31
    19a6:	ef 91       	pop	r30
    19a8:	bf 91       	pop	r27
    19aa:	af 91       	pop	r26
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	7f 91       	pop	r23
    19b2:	6f 91       	pop	r22
    19b4:	5f 91       	pop	r21
    19b6:	4f 91       	pop	r20
    19b8:	3f 91       	pop	r19
    19ba:	2f 91       	pop	r18
    19bc:	0f 90       	pop	r0
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	0f 90       	pop	r0
    19c2:	1f 90       	pop	r1
    19c4:	18 95       	reti

000019c6 <__vector_14>:
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	2f 93       	push	r18
    19d2:	3f 93       	push	r19
    19d4:	4f 93       	push	r20
    19d6:	5f 93       	push	r21
    19d8:	6f 93       	push	r22
    19da:	7f 93       	push	r23
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	af 93       	push	r26
    19e2:	bf 93       	push	r27
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
    19e8:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <_ZZ11__vector_14E6toggle>
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	81 11       	cpse	r24, r1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <_ZZ11__vector_14E6toggle>
    19f6:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <g_audio_tone_state>
    19fa:	99 23       	and	r25, r25
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <__vector_14+0x50>
    19fe:	81 11       	cpse	r24, r1
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <__vector_14+0x46>
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	89 e0       	ldi	r24, 0x09	; 9
    1a06:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <__vector_14+0x58>
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	89 e0       	ldi	r24, 0x09	; 9
    1a10:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <__vector_14+0x58>
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	89 e0       	ldi	r24, 0x09	; 9
    1a1a:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <__vector_11>:
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti

00001a54 <_Z23clockConfigurationErrorv>:
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_transmissions_disabled>
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <_Z23clockConfigurationErrorv+0xe>
    1a60:	61 c0       	rjmp	.+194    	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1a62:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    1a66:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    1a6a:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    1a6e:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    1a72:	89 2b       	or	r24, r25
    1a74:	8a 2b       	or	r24, r26
    1a76:	8b 2b       	or	r24, r27
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <_Z23clockConfigurationErrorv+0x28>
    1a7a:	4d c0       	rjmp	.+154    	; 0x1b16 <_Z23clockConfigurationErrorv+0xc2>
    1a7c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    1a80:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    1a84:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    1a88:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    1a8c:	89 2b       	or	r24, r25
    1a8e:	8a 2b       	or	r24, r26
    1a90:	8b 2b       	or	r24, r27
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <_Z23clockConfigurationErrorv+0x42>
    1a94:	42 c0       	rjmp	.+132    	; 0x1b1a <_Z23clockConfigurationErrorv+0xc6>
    1a96:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    1a9a:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    1a9e:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    1aa2:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    1aa6:	81 15       	cp	r24, r1
    1aa8:	96 46       	sbci	r25, 0x66	; 102
    1aaa:	ae 4e       	sbci	r26, 0xEE	; 238
    1aac:	bf 45       	sbci	r27, 0x5F	; 95
    1aae:	b8 f1       	brcs	.+110    	; 0x1b1e <_Z23clockConfigurationErrorv+0xca>
    1ab0:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    1ab4:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    1ab8:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    1abc:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    1ac0:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    1ac4:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    1ac8:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    1acc:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    1ad0:	84 17       	cp	r24, r20
    1ad2:	95 07       	cpc	r25, r21
    1ad4:	a6 07       	cpc	r26, r22
    1ad6:	b7 07       	cpc	r27, r23
    1ad8:	20 f5       	brcc	.+72     	; 0x1b22 <_Z23clockConfigurationErrorv+0xce>
    1ada:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_transmissions_disabled>
    1ade:	88 23       	and	r24, r24
    1ae0:	c1 f0       	breq	.+48     	; 0x1b12 <_Z23clockConfigurationErrorv+0xbe>
    1ae2:	00 91 c9 04 	lds	r16, 0x04C9	; 0x8004c9 <g_current_epoch>
    1ae6:	10 91 ca 04 	lds	r17, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    1aea:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    1aee:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    1af2:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    1af6:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    1afa:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    1afe:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	40 17       	cp	r20, r16
    1b06:	51 07       	cpc	r21, r17
    1b08:	62 07       	cpc	r22, r18
    1b0a:	73 07       	cpc	r23, r19
    1b0c:	58 f0       	brcs	.+22     	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <_Z23clockConfigurationErrorv+0xd0>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <_Z13sendMorseToneh>:
    1b2a:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <g_lastSeconds>
    1b2e:	91 11       	cpse	r25, r1
    1b30:	0a c0       	rjmp	.+20     	; 0x1b46 <_Z13sendMorseToneh+0x1c>
    1b32:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <g_fox_tone_offset>
    1b36:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <g_fox_tone_offset+0x1>
    1b3a:	9f e2       	ldi	r25, 0x2F	; 47
    1b3c:	92 1b       	sub	r25, r18
    1b3e:	97 bd       	out	0x27, r25	; 39
    1b40:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <g_audio_tone_state>
    1b44:	08 95       	ret
    1b46:	8f e2       	ldi	r24, 0x2F	; 47
    1b48:	87 bd       	out	0x27, r24	; 39
    1b4a:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_audio_tone_state>
    1b4e:	08 95       	ret

00001b50 <__vector_8>:
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	4f 93       	push	r20
    1b60:	5f 93       	push	r21
    1b62:	6f 93       	push	r22
    1b64:	7f 93       	push	r23
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
    1b6e:	ef 93       	push	r30
    1b70:	ff 93       	push	r31
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <__vector_8+0x28>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <g_tick_count>
    1b80:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <g_tick_count+0x1>
    1b84:	a0 91 78 04 	lds	r26, 0x0478	; 0x800478 <g_tick_count+0x2>
    1b88:	b0 91 79 04 	lds	r27, 0x0479	; 0x800479 <g_tick_count+0x3>
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	a1 1d       	adc	r26, r1
    1b90:	b1 1d       	adc	r27, r1
    1b92:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <g_tick_count>
    1b96:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <g_tick_count+0x1>
    1b9a:	a0 93 78 04 	sts	0x0478, r26	; 0x800478 <g_tick_count+0x2>
    1b9e:	b0 93 79 04 	sts	0x0479, r27	; 0x800479 <g_tick_count+0x3>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_sync_enabled>
    1bac:	88 23       	and	r24, r24
    1bae:	91 f1       	breq	.+100    	; 0x1c14 <__vector_8+0xc4>
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	0e 94 26 03 	call	0x64c	; 0x64c <_Z11digitalReadh>
    1bb6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1bba:	89 13       	cpse	r24, r25
    1bbc:	25 c0       	rjmp	.+74     	; 0x1c08 <__vector_8+0xb8>
    1bbe:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <g_sync_pin_timer>
    1bc2:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <g_sync_pin_timer+0x1>
    1bc6:	2b 3b       	cpi	r18, 0xBB	; 187
    1bc8:	30 41       	sbci	r19, 0x10	; 16
    1bca:	54 f4       	brge	.+20     	; 0x1be0 <__vector_8+0x90>
    1bcc:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <g_sync_pin_timer>
    1bd0:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <g_sync_pin_timer+0x1>
    1bd4:	2f 5f       	subi	r18, 0xFF	; 255
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	30 93 b1 04 	sts	0x04B1, r19	; 0x8004b1 <g_sync_pin_timer+0x1>
    1bdc:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <g_sync_pin_timer>
    1be0:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <g_sync_pin_timer>
    1be4:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <g_sync_pin_timer+0x1>
    1be8:	25 36       	cpi	r18, 0x65	; 101
    1bea:	31 05       	cpc	r19, r1
    1bec:	9c f0       	brlt	.+38     	; 0x1c14 <__vector_8+0xc4>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <__vector_8+0xa4>
    1bf2:	73 c1       	rjmp	.+742    	; 0x1eda <__vector_8+0x38a>
    1bf4:	92 e0       	ldi	r25, 0x02	; 2
    1bf6:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <g_sync_pin_stable>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	0b c0       	rjmp	.+22     	; 0x1c14 <__vector_8+0xc4>
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	87 e0       	ldi	r24, 0x07	; 7
    1c02:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <__vector_8+0xc4>
    1c08:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1c0c:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <g_sync_pin_timer+0x1>
    1c10:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <g_sync_pin_timer>
    1c14:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <g_dtmf_detected>
    1c18:	81 11       	cpse	r24, r1
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__vector_8+0xd4>
    1c1c:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <g_config_error>
    1c20:	88 23       	and	r24, r24
    1c22:	c1 f0       	breq	.+48     	; 0x1c54 <__vector_8+0x104>
    1c24:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <_ZZ10__vector_8E13blink_counter>
    1c28:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <_ZZ10__vector_8E13blink_counter+0x1>
    1c2c:	22 3e       	cpi	r18, 0xE2	; 226
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	38 07       	cpc	r19, r24
    1c32:	34 f4       	brge	.+12     	; 0x1c40 <__vector_8+0xf0>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1c3c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1c40:	2f 31       	cpi	r18, 0x1F	; 31
    1c42:	31 05       	cpc	r19, r1
    1c44:	a4 f0       	brlt	.+40     	; 0x1c6e <__vector_8+0x11e>
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	9f ef       	ldi	r25, 0xFF	; 255
    1c4a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1c4e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <__vector_8+0x11e>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1c5c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1c60:	8f e1       	ldi	r24, 0x1F	; 31
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ10__vector_8E13blink_counter+0x1>
    1c68:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ10__vector_8E13blink_counter>
    1c6c:	10 c0       	rjmp	.+32     	; 0x1c8e <__vector_8+0x13e>
    1c6e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_8E21blink_count_direction>
    1c72:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZZ10__vector_8E21blink_count_direction+0x1>
    1c76:	82 0f       	add	r24, r18
    1c78:	93 1f       	adc	r25, r19
    1c7a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ10__vector_8E13blink_counter+0x1>
    1c7e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ10__vector_8E13blink_counter>
    1c82:	99 23       	and	r25, r25
    1c84:	24 f4       	brge	.+8      	; 0x1c8e <__vector_8+0x13e>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <g_blinky_time>
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <__vector_8+0x142>
    1c8e:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <g_blinky_time>
    1c92:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZL16g_LEDs_Timed_Out>
    1c96:	81 11       	cpse	r24, r1
    1c98:	24 c0       	rjmp	.+72     	; 0x1ce2 <__vector_8+0x192>
    1c9a:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_sync_pin_stable>
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <__vector_8+0x154>
    1ca2:	1f c1       	rjmp	.+574    	; 0x1ee2 <__vector_8+0x392>
    1ca4:	1e c0       	rjmp	.+60     	; 0x1ce2 <__vector_8+0x192>
    1ca6:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_blinky_time>
    1caa:	88 23       	and	r24, r24
    1cac:	29 f0       	breq	.+10     	; 0x1cb8 <__vector_8+0x168>
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	8d e0       	ldi	r24, 0x0D	; 13
    1cb2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <__vector_8+0x170>
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	8d e0       	ldi	r24, 0x0D	; 13
    1cbc:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1cc0:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <g_config_error>
    1cc4:	88 23       	and	r24, r24
    1cc6:	69 f0       	breq	.+26     	; 0x1ce2 <__vector_8+0x192>
    1cc8:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_blinky_time>
    1ccc:	88 23       	and	r24, r24
    1cce:	29 f0       	breq	.+10     	; 0x1cda <__vector_8+0x18a>
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	87 e0       	ldi	r24, 0x07	; 7
    1cd4:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <__vector_8+0x192>
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	87 e0       	ldi	r24, 0x07	; 7
    1cde:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1ce2:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <g_enable_start_timer>
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <__vector_8+0x19c>
    1cea:	58 c0       	rjmp	.+176    	; 0x1d9c <__vector_8+0x24c>
    1cec:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_lastSeconds>
    1cf0:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZZ10__vector_8E14hold_last10sec>
    1cf4:	98 17       	cp	r25, r24
    1cf6:	b1 f0       	breq	.+44     	; 0x1d24 <__vector_8+0x1d4>
    1cf8:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_lastSeconds>
    1cfc:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_ZZ10__vector_8E14hold_last10sec>
    1d00:	88 23       	and	r24, r24
    1d02:	49 f0       	breq	.+18     	; 0x1d16 <__vector_8+0x1c6>
    1d04:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1d08:	83 e6       	ldi	r24, 0x63	; 99
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <_ZZ10__vector_8E13starting_blip+0x1>
    1d10:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_ZZ10__vector_8E13starting_blip>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <__vector_8+0x1ee>
    1d16:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZZ10__vector_8E13starting_blip+0x1>
    1d1a:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZZ10__vector_8E13starting_blip>
    1d1e:	87 e2       	ldi	r24, 0x27	; 39
    1d20:	9b e0       	ldi	r25, 0x0B	; 11
    1d22:	28 c0       	rjmp	.+80     	; 0x1d74 <__vector_8+0x224>
    1d24:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <_ZZ10__vector_8E13starting_blip>
    1d28:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <_ZZ10__vector_8E13starting_blip+0x1>
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	e1 f0       	breq	.+56     	; 0x1d68 <__vector_8+0x218>
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <_ZZ10__vector_8E13starting_blip+0x1>
    1d36:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_ZZ10__vector_8E13starting_blip>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	81 f0       	breq	.+32     	; 0x1d5e <__vector_8+0x20e>
    1d3e:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <g_lastSeconds>
    1d42:	86 30       	cpi	r24, 0x06	; 6
    1d44:	30 f0       	brcs	.+12     	; 0x1d52 <__vector_8+0x202>
    1d46:	8f e3       	ldi	r24, 0x3F	; 63
    1d48:	87 bd       	out	0x27, r24	; 39
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <g_audio_tone_state>
    1d50:	25 c0       	rjmp	.+74     	; 0x1d9c <__vector_8+0x24c>
    1d52:	8f e1       	ldi	r24, 0x1F	; 31
    1d54:	87 bd       	out	0x27, r24	; 39
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <g_audio_tone_state>
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <__vector_8+0x24c>
    1d5e:	8f e2       	ldi	r24, 0x2F	; 47
    1d60:	87 bd       	out	0x27, r24	; 39
    1d62:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_audio_tone_state>
    1d66:	1a c0       	rjmp	.+52     	; 0x1d9c <__vector_8+0x24c>
    1d68:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <_ZZ10__vector_8E13starting_boop>
    1d6c:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <_ZZ10__vector_8E13starting_boop+0x1>
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	a1 f0       	breq	.+40     	; 0x1d9c <__vector_8+0x24c>
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <_ZZ10__vector_8E13starting_boop+0x1>
    1d7a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <_ZZ10__vector_8E13starting_boop>
    1d7e:	89 2b       	or	r24, r25
    1d80:	41 f4       	brne	.+16     	; 0x1d92 <__vector_8+0x242>
    1d82:	8f e2       	ldi	r24, 0x2F	; 47
    1d84:	87 bd       	out	0x27, r24	; 39
    1d86:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_audio_tone_state>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <__vector_8+0x24c>
    1d92:	8f e4       	ldi	r24, 0x4F	; 79
    1d94:	87 bd       	out	0x27, r24	; 39
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <g_audio_tone_state>
    1d9c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_transmissions_disabled>
    1da0:	81 11       	cpse	r24, r1
    1da2:	a4 c0       	rjmp	.+328    	; 0x1eec <__vector_8+0x39c>
    1da4:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_on_the_air>
    1da8:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_on_the_air+0x1>
    1dac:	89 2b       	or	r24, r25
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <__vector_8+0x262>
    1db0:	a2 c0       	rjmp	.+324    	; 0x1ef6 <__vector_8+0x3a6>
    1db2:	9c c0       	rjmp	.+312    	; 0x1eec <__vector_8+0x39c>
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <_ZZ10__vector_8E7codeInc+0x1>
    1dba:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_ZZ10__vector_8E7codeInc>
    1dbe:	89 2b       	or	r24, r25
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <__vector_8+0x274>
    1dc2:	a7 c0       	rjmp	.+334    	; 0x1f12 <__vector_8+0x3c2>
    1dc4:	ae 01       	movw	r20, r28
    1dc6:	4e 5f       	subi	r20, 0xFE	; 254
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dca:	be 01       	movw	r22, r28
    1dcc:	6f 5f       	subi	r22, 0xFF	; 255
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 9f 1c 	call	0x393e	; 0x393e <_Z9makeMorsePcPhS0_>
    1dd8:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <_ZZ10__vector_8E3key>
    1ddc:	99 81       	ldd	r25, Y+1	; 0x01
    1dde:	91 11       	cpse	r25, r1
    1de0:	11 c0       	rjmp	.+34     	; 0x1e04 <__vector_8+0x2b4>
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	99 23       	and	r25, r25
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <__vector_8+0x2b4>
    1de8:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <_ZZ10__vector_8E3key>
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <g_callsign_sent>
    1df2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1df6:	88 23       	and	r24, r24
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <__vector_8+0x2ac>
    1dfa:	8b c0       	rjmp	.+278    	; 0x1f12 <__vector_8+0x3c2>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_Z13sendMorseToneh>
    1e02:	1e c0       	rjmp	.+60     	; 0x1e40 <__vector_8+0x2f0>
    1e04:	88 23       	and	r24, r24
    1e06:	b9 f0       	breq	.+46     	; 0x1e36 <__vector_8+0x2e6>
    1e08:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZL16g_LEDs_Timed_Out>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <__vector_8+0x2c8>
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	87 e0       	ldi	r24, 0x07	; 7
    1e14:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1e18:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <g_enable_transmitter>
    1e1c:	88 23       	and	r24, r24
    1e1e:	59 f0       	breq	.+22     	; 0x1e36 <__vector_8+0x2e6>
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	8a e0       	ldi	r24, 0x0A	; 10
    1e24:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	88 e0       	ldi	r24, 0x08	; 8
    1e2c:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <g_sendAMmodulation>
    1e36:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <__vector_8+0x2f0>
    1e3e:	69 c0       	rjmp	.+210    	; 0x1f12 <__vector_8+0x3c2>
    1e40:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1e44:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_Z13sendMorseToneh>
    1e48:	64 c0       	rjmp	.+200    	; 0x1f12 <__vector_8+0x3c2>
    1e4a:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZL16g_LEDs_Timed_Out>
    1e4e:	81 11       	cpse	r24, r1
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <__vector_8+0x30c>
    1e52:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_sync_pin_stable>
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <__vector_8+0x30c>
    1e5a:	55 c0       	rjmp	.+170    	; 0x1f06 <__vector_8+0x3b6>
    1e5c:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <g_enable_transmitter>
    1e60:	88 23       	and	r24, r24
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <__vector_8+0x330>
    1e64:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1e68:	8a e0       	ldi	r24, 0x0A	; 10
    1e6a:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1e6e:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1e72:	88 e0       	ldi	r24, 0x08	; 8
    1e74:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1e78:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1e7c:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <g_sendAMmodulation>
    1e80:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_code_throttle>
    1e84:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <g_code_throttle+0x1>
    1e88:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <_ZZ10__vector_8E7codeInc+0x1>
    1e8c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_ZZ10__vector_8E7codeInc>
    1e90:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1e94:	88 23       	and	r24, r24
    1e96:	e9 f1       	breq	.+122    	; 0x1f12 <__vector_8+0x3c2>
    1e98:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1e9c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_Z13sendMorseToneh>
    1ea0:	38 c0       	rjmp	.+112    	; 0x1f12 <__vector_8+0x3c2>
    1ea2:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <_ZZ10__vector_8E3key>
    1ea6:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_sync_pin_stable>
    1eaa:	81 11       	cpse	r24, r1
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <__vector_8+0x366>
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	87 e0       	ldi	r24, 0x07	; 7
    1eb2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	88 e0       	ldi	r24, 0x08	; 8
    1ec2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1ec6:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <g_sendAMmodulation>
    1eca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E9playMorse>
    1ece:	88 23       	and	r24, r24
    1ed0:	01 f1       	breq	.+64     	; 0x1f12 <__vector_8+0x3c2>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_Z13sendMorseToneh>
    1ed8:	1c c0       	rjmp	.+56     	; 0x1f12 <__vector_8+0x3c2>
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <g_sync_pin_stable>
    1ee0:	99 ce       	rjmp	.-718    	; 0x1c14 <__vector_8+0xc4>
    1ee2:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <g_dtmf_detected>
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	de ce       	rjmp	.-580    	; 0x1ca6 <__vector_8+0x156>
    1eea:	ea ce       	rjmp	.-556    	; 0x1cc0 <__vector_8+0x170>
    1eec:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	d7 cf       	rjmp	.-82     	; 0x1ea2 <__vector_8+0x352>
    1ef4:	ea cf       	rjmp	.-44     	; 0x1eca <__vector_8+0x37a>
    1ef6:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <_ZZ10__vector_8E7codeInc>
    1efa:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <_ZZ10__vector_8E7codeInc+0x1>
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <__vector_8+0x3b4>
    1f02:	58 cf       	rjmp	.-336    	; 0x1db4 <__vector_8+0x264>
    1f04:	a2 cf       	rjmp	.-188    	; 0x1e4a <__vector_8+0x2fa>
    1f06:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <_ZZ10__vector_8E3key>
    1f0a:	87 e0       	ldi	r24, 0x07	; 7
    1f0c:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    1f10:	a5 cf       	rjmp	.-182    	; 0x1e5c <__vector_8+0x30c>
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	ff 91       	pop	r31
    1f1c:	ef 91       	pop	r30
    1f1e:	bf 91       	pop	r27
    1f20:	af 91       	pop	r26
    1f22:	9f 91       	pop	r25
    1f24:	8f 91       	pop	r24
    1f26:	7f 91       	pop	r23
    1f28:	6f 91       	pop	r22
    1f2a:	5f 91       	pop	r21
    1f2c:	4f 91       	pop	r20
    1f2e:	3f 91       	pop	r19
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <_Z11setupForFoxP5Fox_t>:
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	31 f0       	breq	.+12     	; 0x1f4c <_Z11setupForFoxP5Fox_t+0x10>
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	86 31       	cpi	r24, 0x16	; 22
    1f46:	11 f0       	breq	.+4      	; 0x1f4c <_Z11setupForFoxP5Fox_t+0x10>
    1f48:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <g_fox>
    1f4c:	e0 91 d3 04 	lds	r30, 0x04D3	; 0x8004d3 <g_fox>
    1f50:	8e 2f       	mov	r24, r30
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	fc 01       	movw	r30, r24
    1f56:	31 97       	sbiw	r30, 0x01	; 1
    1f58:	e5 31       	cpi	r30, 0x15	; 21
    1f5a:	f1 05       	cpc	r31, r1
    1f5c:	08 f0       	brcs	.+2      	; 0x1f60 <_Z11setupForFoxP5Fox_t+0x24>
    1f5e:	6b c0       	rjmp	.+214    	; 0x2036 <_Z11setupForFoxP5Fox_t+0xfa>
    1f60:	e2 58       	subi	r30, 0x82	; 130
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>
    1f68:	88 e7       	ldi	r24, 0x78	; 120
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_startclock_interval+0x1>
    1f70:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_startclock_interval>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <g_enable_start_timer>
    1f7a:	7d c0       	rjmp	.+250    	; 0x2076 <_Z11setupForFoxP5Fox_t+0x13a>
    1f7c:	8c e2       	ldi	r24, 0x2C	; 44
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_startclock_interval+0x1>
    1f84:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_startclock_interval>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <g_enable_start_timer>
    1f8e:	73 c0       	rjmp	.+230    	; 0x2076 <_Z11setupForFoxP5Fox_t+0x13a>
    1f90:	8c e3       	ldi	r24, 0x3C	; 60
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <g_on_air_interval+0x1>
    1f98:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_on_air_interval>
    1f9c:	25 e0       	ldi	r18, 0x05	; 5
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	30 93 bb 04 	sts	0x04BB, r19	; 0x8004bb <g_number_of_foxes+0x1>
    1fa4:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <g_number_of_foxes>
    1fa8:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <g_fox_id_offset+0x1>
    1fac:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <g_fox_id_offset>
    1fb0:	28 e0       	ldi	r18, 0x08	; 8
    1fb2:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
    1fb6:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <g_id_interval+0x1>
    1fba:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_id_interval>
    1fbe:	8c e2       	ldi	r24, 0x2C	; 44
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_startclock_interval+0x1>
    1fc6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_startclock_interval>
    1fca:	55 c0       	rjmp	.+170    	; 0x2076 <_Z11setupForFoxP5Fox_t+0x13a>
    1fcc:	8c e0       	ldi	r24, 0x0C	; 12
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <g_on_air_interval+0x1>
    1fd4:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_on_air_interval>
    1fd8:	85 e0       	ldi	r24, 0x05	; 5
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <g_number_of_foxes+0x1>
    1fe0:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <g_number_of_foxes>
    1fe4:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_fox>
    1fe8:	83 31       	cpi	r24, 0x13	; 19
    1fea:	31 f0       	breq	.+12     	; 0x1ff8 <_Z11setupForFoxP5Fox_t+0xbc>
    1fec:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_fox>
    1ff0:	8e 30       	cpi	r24, 0x0E	; 14
    1ff2:	20 f0       	brcs	.+8      	; 0x1ffc <_Z11setupForFoxP5Fox_t+0xc0>
    1ff4:	8f e0       	ldi	r24, 0x0F	; 15
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <_Z11setupForFoxP5Fox_t+0xc2>
    1ff8:	8a e0       	ldi	r24, 0x0A	; 10
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <_Z11setupForFoxP5Fox_t+0xc2>
    1ffc:	8a e0       	ldi	r24, 0x0A	; 10
    1ffe:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_pattern_codespeed>
    2002:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_fox>
    2006:	8e 30       	cpi	r24, 0x0E	; 14
    2008:	18 f0       	brcs	.+6      	; 0x2010 <_Z11setupForFoxP5Fox_t+0xd4>
    200a:	8d e0       	ldi	r24, 0x0D	; 13
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <_Z11setupForFoxP5Fox_t+0xd8>
    2010:	88 e0       	ldi	r24, 0x08	; 8
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <g_fox_id_offset+0x1>
    2018:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <g_fox_id_offset>
    201c:	88 e5       	ldi	r24, 0x58	; 88
    201e:	92 e0       	ldi	r25, 0x02	; 2
    2020:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <g_id_interval+0x1>
    2024:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_id_interval>
    2028:	88 e7       	ldi	r24, 0x78	; 120
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_startclock_interval+0x1>
    2030:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_startclock_interval>
    2034:	20 c0       	rjmp	.+64     	; 0x2076 <_Z11setupForFoxP5Fox_t+0x13a>
    2036:	88 e5       	ldi	r24, 0x58	; 88
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <g_on_air_interval+0x1>
    203e:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_on_air_interval>
    2042:	21 e0       	ldi	r18, 0x01	; 1
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	30 93 bb 04 	sts	0x04BB, r19	; 0x8004bb <g_number_of_foxes+0x1>
    204a:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <g_number_of_foxes>
    204e:	28 e0       	ldi	r18, 0x08	; 8
    2050:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
    2054:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <g_id_interval+0x1>
    2058:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_id_interval>
    205c:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_fox>
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	19 f0       	breq	.+6      	; 0x206a <_Z11setupForFoxP5Fox_t+0x12e>
    2064:	8c e2       	ldi	r24, 0x2C	; 44
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	02 c0       	rjmp	.+4      	; 0x206e <_Z11setupForFoxP5Fox_t+0x132>
    206a:	88 e7       	ldi	r24, 0x78	; 120
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_startclock_interval+0x1>
    2072:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_startclock_interval>
    2076:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <g_use_rtc_to_start>
    207a:	88 23       	and	r24, r24
    207c:	09 f4       	brne	.+2      	; 0x2080 <_Z11setupForFoxP5Fox_t+0x144>
    207e:	8a c0       	rjmp	.+276    	; 0x2194 <_Z11setupForFoxP5Fox_t+0x258>
    2080:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    2084:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2088:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    208c:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    2090:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    2094:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2098:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    209c:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    20a0:	48 17       	cp	r20, r24
    20a2:	59 07       	cpc	r21, r25
    20a4:	6a 07       	cpc	r22, r26
    20a6:	7b 07       	cpc	r23, r27
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <_Z11setupForFoxP5Fox_t+0x170>
    20aa:	4d c0       	rjmp	.+154    	; 0x2146 <_Z11setupForFoxP5Fox_t+0x20a>
    20ac:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    20b0:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    20b4:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    20b8:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    20bc:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    20c0:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    20c4:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    20c8:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    20cc:	84 1b       	sub	r24, r20
    20ce:	95 0b       	sbc	r25, r21
    20d0:	a6 0b       	sbc	r26, r22
    20d2:	b7 0b       	sbc	r27, r23
    20d4:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <g_seconds_since_sync>
    20d8:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <g_seconds_since_sync+0x1>
    20dc:	a0 93 d6 04 	sts	0x04D6, r26	; 0x8004d6 <g_seconds_since_sync+0x2>
    20e0:	b0 93 d7 04 	sts	0x04D7, r27	; 0x8004d7 <g_seconds_since_sync+0x3>
    20e4:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_on_the_air+0x1>
    20e8:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_on_the_air>
    20ec:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_code_throttle+0x1>
    20f0:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_code_throttle>
    20f4:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <g_callsign_sent>
    20f8:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <g_seconds_since_sync>
    20fc:	70 91 d5 04 	lds	r23, 0x04D5	; 0x8004d5 <g_seconds_since_sync+0x1>
    2100:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <g_seconds_since_sync+0x2>
    2104:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <g_seconds_since_sync+0x3>
    2108:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <g_on_air_interval>
    210c:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <g_on_air_interval+0x1>
    2110:	03 2e       	mov	r0, r19
    2112:	00 0c       	add	r0, r0
    2114:	44 0b       	sbc	r20, r20
    2116:	55 0b       	sbc	r21, r21
    2118:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__divmodsi4>
    211c:	6f 5f       	subi	r22, 0xFF	; 255
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <g_fox_counter+0x1>
    2124:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <g_fox_counter>
    2128:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_fox_seconds_into_interval+0x1>
    212c:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <g_fox_seconds_into_interval>
    2130:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <g_fox_transition>
    2134:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <g_fox_id_offset+0x1>
    2138:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <g_fox_id_offset>
    213c:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <g_time_to_ID>
    2140:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_audio_tone_state>
    2144:	47 c0       	rjmp	.+142    	; 0x21d4 <_Z11setupForFoxP5Fox_t+0x298>
    2146:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <g_seconds_since_sync>
    214a:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_seconds_since_sync+0x1>
    214e:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_seconds_since_sync+0x2>
    2152:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <g_seconds_since_sync+0x3>
    2156:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_on_the_air+0x1>
    215a:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_on_the_air>
    215e:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_code_throttle+0x1>
    2162:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_code_throttle>
    2166:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <g_callsign_sent>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_counter+0x1>
    2172:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_counter>
    2176:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_fox_seconds_into_interval+0x1>
    217a:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <g_fox_seconds_into_interval>
    217e:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <g_fox_transition>
    2182:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <g_fox_id_offset+0x1>
    2186:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <g_fox_id_offset>
    218a:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <g_time_to_ID>
    218e:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_audio_tone_state>
    2192:	20 c0       	rjmp	.+64     	; 0x21d4 <_Z11setupForFoxP5Fox_t+0x298>
    2194:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <g_seconds_since_sync>
    2198:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_seconds_since_sync+0x1>
    219c:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_seconds_since_sync+0x2>
    21a0:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <g_seconds_since_sync+0x3>
    21a4:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_on_the_air+0x1>
    21a8:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_on_the_air>
    21ac:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <g_code_throttle+0x1>
    21b0:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_code_throttle>
    21b4:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <g_callsign_sent>
    21b8:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_fox_seconds_into_interval+0x1>
    21bc:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <g_fox_seconds_into_interval>
    21c0:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <g_fox_transition>
    21c4:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <g_fox_id_offset+0x1>
    21c8:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <g_fox_id_offset>
    21cc:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <g_time_to_ID>
    21d0:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_audio_tone_state>
    21d4:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <g_enable_LEDs>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	91 11       	cpse	r25, r1
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZL16g_LEDs_Timed_Out>
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	87 e0       	ldi	r24, 0x07	; 7
    21e6:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    21ea:	08 95       	ret

000021ec <__vector_1>:
    21ec:	1f 92       	push	r1
    21ee:	0f 92       	push	r0
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	0f 92       	push	r0
    21f4:	11 24       	eor	r1, r1
    21f6:	2f 93       	push	r18
    21f8:	3f 93       	push	r19
    21fa:	4f 93       	push	r20
    21fc:	5f 93       	push	r21
    21fe:	6f 93       	push	r22
    2200:	7f 93       	push	r23
    2202:	8f 93       	push	r24
    2204:	9f 93       	push	r25
    2206:	af 93       	push	r26
    2208:	bf 93       	push	r27
    220a:	ef 93       	push	r30
    220c:	ff 93       	push	r31
    220e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    2212:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2216:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    221a:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	a1 1d       	adc	r26, r1
    2222:	b1 1d       	adc	r27, r1
    2224:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <g_current_epoch>
    2228:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <g_current_epoch+0x1>
    222c:	a0 93 cb 04 	sts	0x04CB, r26	; 0x8004cb <g_current_epoch+0x2>
    2230:	b0 93 cc 04 	sts	0x04CC, r27	; 0x8004cc <g_current_epoch+0x3>
    2234:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    2238:	88 23       	and	r24, r24
    223a:	29 f0       	breq	.+10     	; 0x2246 <__vector_1+0x5a>
    223c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    2240:	81 50       	subi	r24, 0x01	; 1
    2242:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_temperature_check_countdown>
    2246:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_transmissions_disabled>
    224a:	88 23       	and	r24, r24
    224c:	91 f1       	breq	.+100    	; 0x22b2 <__vector_1+0xc6>
    224e:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <g_use_rtc_to_start>
    2252:	88 23       	and	r24, r24
    2254:	09 f4       	brne	.+2      	; 0x2258 <__vector_1+0x6c>
    2256:	35 c1       	rjmp	.+618    	; 0x24c2 <__vector_1+0x2d6>
    2258:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <g_current_epoch>
    225c:	50 91 ca 04 	lds	r21, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2260:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2264:	70 91 cc 04 	lds	r23, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2268:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    226c:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2270:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    2274:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    2278:	48 17       	cp	r20, r24
    227a:	59 07       	cpc	r21, r25
    227c:	6a 07       	cpc	r22, r26
    227e:	7b 07       	cpc	r23, r27
    2280:	08 f4       	brcc	.+2      	; 0x2284 <__vector_1+0x98>
    2282:	1f c1       	rjmp	.+574    	; 0x24c2 <__vector_1+0x2d6>
    2284:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <g_current_epoch>
    2288:	50 91 ca 04 	lds	r21, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    228c:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2290:	70 91 cc 04 	lds	r23, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2294:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    2298:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    229c:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    22a0:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    22a4:	48 17       	cp	r20, r24
    22a6:	59 07       	cpc	r21, r25
    22a8:	6a 07       	cpc	r22, r26
    22aa:	7b 07       	cpc	r23, r27
    22ac:	08 f4       	brcc	.+2      	; 0x22b0 <__vector_1+0xc4>
    22ae:	cf c0       	rjmp	.+414    	; 0x244e <__vector_1+0x262>
    22b0:	08 c1       	rjmp	.+528    	; 0x24c2 <__vector_1+0x2d6>
    22b2:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <g_use_rtc_to_start>
    22b6:	88 23       	and	r24, r24
    22b8:	f1 f0       	breq	.+60     	; 0x22f6 <__vector_1+0x10a>
    22ba:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <g_current_epoch>
    22be:	50 91 ca 04 	lds	r21, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    22c2:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    22c6:	70 91 cc 04 	lds	r23, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    22ca:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    22ce:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    22d2:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    22d6:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    22da:	48 17       	cp	r20, r24
    22dc:	59 07       	cpc	r21, r25
    22de:	6a 07       	cpc	r22, r26
    22e0:	7b 07       	cpc	r23, r27
    22e2:	48 f0       	brcs	.+18     	; 0x22f6 <__vector_1+0x10a>
    22e4:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <g_use_rtc_to_start>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_transmissions_disabled>
    22ee:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_on_the_air+0x1>
    22f2:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <g_on_the_air>
    22f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_transmissions_disabled>
    22fa:	81 11       	cpse	r24, r1
    22fc:	e2 c0       	rjmp	.+452    	; 0x24c2 <__vector_1+0x2d6>
    22fe:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_seconds_since_sync>
    2302:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <g_seconds_since_sync+0x1>
    2306:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <g_seconds_since_sync+0x2>
    230a:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <g_seconds_since_sync+0x3>
    230e:	89 2b       	or	r24, r25
    2310:	8a 2b       	or	r24, r26
    2312:	8b 2b       	or	r24, r27
    2314:	81 f4       	brne	.+32     	; 0x2336 <__vector_1+0x14a>
    2316:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_id_interval>
    231a:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <g_id_interval+0x1>
    231e:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <_ZZ10__vector_1E12id_countdown+0x1>
    2322:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <_ZZ10__vector_1E12id_countdown>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_counter+0x1>
    232e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_counter>
    2332:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <g_lastSeconds>
    2336:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_seconds_since_sync>
    233a:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <g_seconds_since_sync+0x1>
    233e:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <g_seconds_since_sync+0x2>
    2342:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <g_seconds_since_sync+0x3>
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	a1 1d       	adc	r26, r1
    234a:	b1 1d       	adc	r27, r1
    234c:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <g_seconds_since_sync>
    2350:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <g_seconds_since_sync+0x1>
    2354:	a0 93 d6 04 	sts	0x04D6, r26	; 0x8004d6 <g_seconds_since_sync+0x2>
    2358:	b0 93 d7 04 	sts	0x04D7, r27	; 0x8004d7 <g_seconds_since_sync+0x3>
    235c:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_fox_seconds_into_interval>
    2360:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <g_fox_seconds_into_interval+0x1>
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <g_fox_seconds_into_interval+0x1>
    236a:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <g_fox_seconds_into_interval>
    236e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <_ZZ10__vector_1E12id_countdown>
    2372:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <_ZZ10__vector_1E12id_countdown+0x1>
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	29 f0       	breq	.+10     	; 0x2384 <__vector_1+0x198>
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <_ZZ10__vector_1E12id_countdown+0x1>
    2380:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <_ZZ10__vector_1E12id_countdown>
    2384:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_number_of_foxes>
    2388:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <g_number_of_foxes+0x1>
    238c:	89 2b       	or	r24, r25
    238e:	e1 f1       	breq	.+120    	; 0x2408 <__vector_1+0x21c>
    2390:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <g_seconds_since_sync>
    2394:	70 91 d5 04 	lds	r23, 0x04D5	; 0x8004d5 <g_seconds_since_sync+0x1>
    2398:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <g_seconds_since_sync+0x2>
    239c:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <g_seconds_since_sync+0x3>
    23a0:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <g_on_air_interval>
    23a4:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <g_on_air_interval+0x1>
    23a8:	03 2e       	mov	r0, r19
    23aa:	00 0c       	add	r0, r0
    23ac:	44 0b       	sbc	r20, r20
    23ae:	55 0b       	sbc	r21, r21
    23b0:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__divmodsi4>
    23b4:	67 2b       	or	r22, r23
    23b6:	68 2b       	or	r22, r24
    23b8:	69 2b       	or	r22, r25
    23ba:	09 f4       	brne	.+2      	; 0x23be <__vector_1+0x1d2>
    23bc:	4f c0       	rjmp	.+158    	; 0x245c <__vector_1+0x270>
    23be:	24 c0       	rjmp	.+72     	; 0x2408 <__vector_1+0x21c>
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_counter+0x1>
    23c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_counter>
    23cc:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZL16g_LEDs_Timed_Out>
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	87 e0       	ldi	r24, 0x07	; 7
    23d4:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_fox_transition>
    23de:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <g_fox_seconds_into_interval+0x1>
    23e2:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <g_fox_seconds_into_interval>
    23e6:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <_ZZ10__vector_1E12id_countdown>
    23ea:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <_ZZ10__vector_1E12id_countdown+0x1>
    23ee:	89 2b       	or	r24, r25
    23f0:	59 f4       	brne	.+22     	; 0x2408 <__vector_1+0x21c>
    23f2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_id_interval>
    23f6:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <g_id_interval+0x1>
    23fa:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <_ZZ10__vector_1E12id_countdown+0x1>
    23fe:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <_ZZ10__vector_1E12id_countdown>
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_time_to_ID>
    2408:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <g_enable_start_timer>
    240c:	88 23       	and	r24, r24
    240e:	09 f4       	brne	.+2      	; 0x2412 <__vector_1+0x226>
    2410:	56 c0       	rjmp	.+172    	; 0x24be <__vector_1+0x2d2>
    2412:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_seconds_since_sync>
    2416:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <g_seconds_since_sync+0x1>
    241a:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <g_seconds_since_sync+0x2>
    241e:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <g_seconds_since_sync+0x3>
    2422:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <g_startclock_interval>
    2426:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <g_startclock_interval+0x1>
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	65 5f       	subi	r22, 0xF5	; 245
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	8f 4f       	sbci	r24, 0xFF	; 255
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	03 2e       	mov	r0, r19
    2438:	00 0c       	add	r0, r0
    243a:	44 0b       	sbc	r20, r20
    243c:	55 0b       	sbc	r21, r21
    243e:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__divmodsi4>
    2442:	6b 30       	cpi	r22, 0x0B	; 11
    2444:	71 05       	cpc	r23, r1
    2446:	81 05       	cpc	r24, r1
    2448:	91 05       	cpc	r25, r1
    244a:	f4 f0       	brlt	.+60     	; 0x2488 <__vector_1+0x29c>
    244c:	38 c0       	rjmp	.+112    	; 0x24be <__vector_1+0x2d2>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_Z11setupForFoxP5Fox_t>
    2456:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <g_transmissions_disabled>
    245a:	33 c0       	rjmp	.+102    	; 0x24c2 <__vector_1+0x2d6>
    245c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_fox_counter>
    2460:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <g_fox_counter+0x1>
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_counter+0x1>
    246a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_counter>
    246e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_fox_counter>
    2472:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_fox_counter+0x1>
    2476:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_number_of_foxes>
    247a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <g_number_of_foxes+0x1>
    247e:	82 17       	cp	r24, r18
    2480:	93 07       	cpc	r25, r19
    2482:	0c f0       	brlt	.+2      	; 0x2486 <__vector_1+0x29a>
    2484:	a9 cf       	rjmp	.-174    	; 0x23d8 <__vector_1+0x1ec>
    2486:	9c cf       	rjmp	.-200    	; 0x23c0 <__vector_1+0x1d4>
    2488:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_seconds_since_sync>
    248c:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <g_seconds_since_sync+0x1>
    2490:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <g_seconds_since_sync+0x2>
    2494:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <g_seconds_since_sync+0x3>
    2498:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <g_startclock_interval>
    249c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <g_startclock_interval+0x1>
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	65 5f       	subi	r22, 0xF5	; 245
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	8f 4f       	sbci	r24, 0xFF	; 255
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	03 2e       	mov	r0, r19
    24ae:	00 0c       	add	r0, r0
    24b0:	44 0b       	sbc	r20, r20
    24b2:	55 0b       	sbc	r21, r21
    24b4:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__divmodsi4>
    24b8:	60 93 b2 04 	sts	0x04B2, r22	; 0x8004b2 <g_lastSeconds>
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <__vector_1+0x2d6>
    24be:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <g_lastSeconds>
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	18 95       	reti

000024e4 <_Z7permFox5Fox_t>:
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	1f 92       	push	r1
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	ae 01       	movw	r20, r28
    24f2:	4f 5f       	subi	r20, 0xFF	; 255
    24f4:	5f 4f       	sbci	r21, 0xFF	; 255
    24f6:	6f e0       	ldi	r22, 0x0F	; 15
    24f8:	88 ed       	ldi	r24, 0xD8	; 216
    24fa:	94 e0       	ldi	r25, 0x04	; 4
    24fc:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2500:	0f 90       	pop	r0
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <_Z11only_digitsPc>:
    2508:	fc 01       	movw	r30, r24
    250a:	21 91       	ld	r18, Z+
    250c:	22 23       	and	r18, r18
    250e:	41 f0       	breq	.+16     	; 0x2520 <_Z11only_digitsPc+0x18>
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	20 53       	subi	r18, 0x30	; 48
    2514:	31 09       	sbc	r19, r1
    2516:	2a 30       	cpi	r18, 0x0A	; 10
    2518:	31 05       	cpc	r19, r1
    251a:	b8 f3       	brcs	.-18     	; 0x250a <_Z11only_digitsPc+0x2>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	08 95       	ret
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	08 95       	ret

00002524 <_Z12stopEventNowv>:
#endif // !INIT_EEPROM_ONLY
}

void stopEventNow(void)
{
	g_transmissions_disabled = TRUE;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_transmissions_disabled>
	linkbus_init(BAUD);
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	71 ee       	ldi	r23, 0xE1	; 225
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 12 0a 	call	0x1424	; 0x1424 <_Z12linkbus_initm>
    2536:	08 95       	ret

00002538 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	11 24       	eor	r1, r1
    2542:	2f 93       	push	r18
    2544:	3f 93       	push	r19
    2546:	4f 93       	push	r20
    2548:	5f 93       	push	r21
    254a:	6f 93       	push	r22
    254c:	7f 93       	push	r23
    254e:	8f 93       	push	r24
    2550:	9f 93       	push	r25
    2552:	af 93       	push	r26
    2554:	bf 93       	push	r27
    2556:	ef 93       	push	r30
    2558:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    255a:	84 e0       	ldi	r24, 0x04	; 4
    255c:	0e 94 26 03 	call	0x64c	; 0x64c <_Z11digitalReadh>

	if(pinVal)                      /* Sync is high = button released */
    2560:	88 23       	and	r24, r24
    2562:	c9 f0       	breq	.+50     	; 0x2596 <__vector_5+0x5e>
	{
		g_LEDs_Timed_Out = FALSE;   /* Restart LEDs */
    2564:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZL16g_LEDs_Timed_Out>

		if(g_transmissions_disabled)
    2568:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_transmissions_disabled>
    256c:	88 23       	and	r24, r24
    256e:	59 f0       	breq	.+22     	; 0x2586 <__vector_5+0x4e>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2570:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_sync_pin_stable>
    2574:	82 30       	cpi	r24, 0x02	; 2
    2576:	79 f4       	brne	.+30     	; 0x2596 <__vector_5+0x5e>
			{
				startEventNow();
				g_sync_pin_stable = UNSTABLE;
    2578:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	87 e0       	ldi	r24, 0x07	; 7
    2580:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    2584:	08 c0       	rjmp	.+16     	; 0x2596 <__vector_5+0x5e>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2586:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_sync_pin_stable>
    258a:	82 30       	cpi	r24, 0x02	; 2
    258c:	21 f4       	brne	.+8      	; 0x2596 <__vector_5+0x5e>
			{
				stopEventNow();
    258e:	0e 94 92 12 	call	0x2524	; 0x2524 <_Z12stopEventNowv>
				g_sync_pin_stable = UNSTABLE;
    2592:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <g_sync_pin_stable>
			}
		}
	}

	g_sync_pin_timer = 0;
    2596:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <g_sync_pin_timer+0x1>
    259a:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <g_sync_pin_timer>
}
    259e:	ff 91       	pop	r31
    25a0:	ef 91       	pop	r30
    25a2:	bf 91       	pop	r27
    25a4:	af 91       	pop	r26
    25a6:	9f 91       	pop	r25
    25a8:	8f 91       	pop	r24
    25aa:	7f 91       	pop	r23
    25ac:	6f 91       	pop	r22
    25ae:	5f 91       	pop	r21
    25b0:	4f 91       	pop	r20
    25b2:	3f 91       	pop	r19
    25b4:	2f 91       	pop	r18
    25b6:	0f 90       	pop	r0
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	0f 90       	pop	r0
    25bc:	1f 90       	pop	r1
    25be:	18 95       	reti

000025c0 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    25c0:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <g_messages_text+0x15>
    25c4:	81 11       	cpse	r24, r1
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    25c8:	65 e0       	ldi	r22, 0x05	; 5
    25ca:	88 ed       	ldi	r24, 0xD8	; 216
    25cc:	94 e0       	ldi	r25, 0x04	; 4
    25ce:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    25d2:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    25d6:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    25da:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    25de:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    25e2:	81 15       	cp	r24, r1
    25e4:	96 46       	sbci	r25, 0x66	; 102
    25e6:	ae 4e       	sbci	r26, 0xEE	; 238
    25e8:	bf 45       	sbci	r27, 0x5F	; 95
    25ea:	28 f4       	brcc	.+10     	; 0x25f6 <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    25ec:	62 e0       	ldi	r22, 0x02	; 2
    25ee:	88 ed       	ldi	r24, 0xD8	; 216
    25f0:	94 e0       	ldi	r25, 0x04	; 4
    25f2:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    25f6:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    25fa:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    25fe:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    2602:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    2606:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    260a:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    260e:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2612:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2616:	48 17       	cp	r20, r24
    2618:	59 07       	cpc	r21, r25
    261a:	6a 07       	cpc	r22, r26
    261c:	7b 07       	cpc	r23, r27
    261e:	00 f5       	brcc	.+64     	; 0x2660 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2620:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    2624:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2628:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    262c:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    2630:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    2634:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2638:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    263c:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2640:	48 17       	cp	r20, r24
    2642:	59 07       	cpc	r21, r25
    2644:	6a 07       	cpc	r22, r26
    2646:	7b 07       	cpc	r23, r27
    2648:	28 f4       	brcc	.+10     	; 0x2654 <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    264a:	63 e0       	ldi	r22, 0x03	; 3
    264c:	88 ed       	ldi	r24, 0xD8	; 216
    264e:	94 e0       	ldi	r25, 0x04	; 4
    2650:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	88 ed       	ldi	r24, 0xD8	; 216
    2658:	94 e0       	ldi	r25, 0x04	; 4
    265a:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    265e:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    2660:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    2664:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2668:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    266c:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    2670:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    2674:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2678:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    267c:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2680:	48 17       	cp	r20, r24
    2682:	59 07       	cpc	r21, r25
    2684:	6a 07       	cpc	r22, r26
    2686:	7b 07       	cpc	r23, r27
    2688:	28 f4       	brcc	.+10     	; 0x2694 <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    268a:	61 e0       	ldi	r22, 0x01	; 1
    268c:	8d e9       	ldi	r24, 0x9D	; 157
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    2694:	08 95       	ret

00002696 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	2c 97       	sbiw	r28, 0x0c	; 12
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	2b 01       	movw	r4, r22
    26cc:	3c 01       	movw	r6, r24
    26ce:	49 01       	movw	r8, r18
    26d0:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    26d2:	62 17       	cp	r22, r18
    26d4:	73 07       	cpc	r23, r19
    26d6:	84 07       	cpc	r24, r20
    26d8:	95 07       	cpc	r25, r21
    26da:	50 f0       	brcs	.+20     	; 0x26f0 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    26dc:	e1 14       	cp	r14, r1
    26de:	f1 04       	cpc	r15, r1
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <_Z14reportTimeTillmmPKcS0_+0x4e>
    26e2:	04 c1       	rjmp	.+520    	; 0x28ec <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    26e4:	61 e0       	ldi	r22, 0x01	; 1
    26e6:	c7 01       	movw	r24, r14
    26e8:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	ff c0       	rjmp	.+510    	; 0x28ee <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    26f0:	01 15       	cp	r16, r1
    26f2:	11 05       	cpc	r17, r1
    26f4:	21 f0       	breq	.+8      	; 0x26fe <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	c8 01       	movw	r24, r16
    26fa:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    26fe:	75 01       	movw	r14, r10
    2700:	64 01       	movw	r12, r8
    2702:	c4 18       	sub	r12, r4
    2704:	d5 08       	sbc	r13, r5
    2706:	e6 08       	sbc	r14, r6
    2708:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    270a:	c7 01       	movw	r24, r14
    270c:	b6 01       	movw	r22, r12
    270e:	20 e8       	ldi	r18, 0x80	; 128
    2710:	33 e3       	ldi	r19, 0x33	; 51
    2712:	41 ee       	ldi	r20, 0xE1	; 225
    2714:	51 e0       	ldi	r21, 0x01	; 1
    2716:	0e 94 46 23 	call	0x468c	; 0x468c <__udivmodsi4>
    271a:	29 01       	movw	r4, r18
    271c:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    271e:	44 27       	eor	r20, r20
    2720:	55 27       	eor	r21, r21
    2722:	60 e8       	ldi	r22, 0x80	; 128
    2724:	73 e3       	ldi	r23, 0x33	; 51
    2726:	81 ee       	ldi	r24, 0xE1	; 225
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	0e 94 0e 23 	call	0x461c	; 0x461c <__mulsi3>
    272e:	c6 1a       	sub	r12, r22
    2730:	d7 0a       	sbc	r13, r23
    2732:	e8 0a       	sbc	r14, r24
    2734:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2736:	c7 01       	movw	r24, r14
    2738:	b6 01       	movw	r22, r12
    273a:	20 e8       	ldi	r18, 0x80	; 128
    273c:	31 e5       	ldi	r19, 0x51	; 81
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	0e 94 46 23 	call	0x468c	; 0x468c <__udivmodsi4>
    2746:	49 01       	movw	r8, r18
    2748:	5a 01       	movw	r10, r20
    274a:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    274c:	44 27       	eor	r20, r20
    274e:	55 27       	eor	r21, r21
    2750:	60 e8       	ldi	r22, 0x80	; 128
    2752:	71 e5       	ldi	r23, 0x51	; 81
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 0e 23 	call	0x461c	; 0x461c <__mulsi3>
    275c:	c6 1a       	sub	r12, r22
    275e:	d7 0a       	sbc	r13, r23
    2760:	e8 0a       	sbc	r14, r24
    2762:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2764:	c7 01       	movw	r24, r14
    2766:	b6 01       	movw	r22, r12
    2768:	20 e1       	ldi	r18, 0x10	; 16
    276a:	3e e0       	ldi	r19, 0x0E	; 14
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	0e 94 46 23 	call	0x468c	; 0x468c <__udivmodsi4>
    2774:	29 83       	std	Y+1, r18	; 0x01
    2776:	3a 83       	std	Y+2, r19	; 0x02
    2778:	4b 83       	std	Y+3, r20	; 0x03
    277a:	5c 83       	std	Y+4, r21	; 0x04
    277c:	29 81       	ldd	r18, Y+1	; 0x01
    277e:	3a 81       	ldd	r19, Y+2	; 0x02
    2780:	3a 87       	std	Y+10, r19	; 0x0a
    2782:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2784:	29 81       	ldd	r18, Y+1	; 0x01
    2786:	3a 81       	ldd	r19, Y+2	; 0x02
    2788:	4b 81       	ldd	r20, Y+3	; 0x03
    278a:	5c 81       	ldd	r21, Y+4	; 0x04
    278c:	44 27       	eor	r20, r20
    278e:	55 27       	eor	r21, r21
    2790:	a0 e1       	ldi	r26, 0x10	; 16
    2792:	be e0       	ldi	r27, 0x0E	; 14
    2794:	0e 94 a3 23 	call	0x4746	; 0x4746 <__muluhisi3>
    2798:	c6 1a       	sub	r12, r22
    279a:	d7 0a       	sbc	r13, r23
    279c:	e8 0a       	sbc	r14, r24
    279e:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    27a0:	c7 01       	movw	r24, r14
    27a2:	b6 01       	movw	r22, r12
    27a4:	2c e3       	ldi	r18, 0x3C	; 60
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	0e 94 46 23 	call	0x468c	; 0x468c <__udivmodsi4>
    27b0:	2d 83       	std	Y+5, r18	; 0x05
    27b2:	3e 83       	std	Y+6, r19	; 0x06
    27b4:	4f 83       	std	Y+7, r20	; 0x07
    27b6:	58 87       	std	Y+8, r21	; 0x08
    27b8:	0d 81       	ldd	r16, Y+5	; 0x05
    27ba:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    27bc:	2c e3       	ldi	r18, 0x3C	; 60
    27be:	20 9f       	mul	r18, r16
    27c0:	c0 01       	movw	r24, r0
    27c2:	21 9f       	mul	r18, r17
    27c4:	90 0d       	add	r25, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	a6 01       	movw	r20, r12
    27ca:	48 1b       	sub	r20, r24
    27cc:	59 0b       	sbc	r21, r25
    27ce:	5c 87       	std	Y+12, r21	; 0x0c
    27d0:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    27d2:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <g_tempStr>

		if(years)
    27d6:	41 14       	cp	r4, r1
    27d8:	51 04       	cpc	r5, r1
    27da:	b9 f0       	breq	.+46     	; 0x280a <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    27dc:	5f 92       	push	r5
    27de:	4f 92       	push	r4
    27e0:	8f ea       	ldi	r24, 0xAF	; 175
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	9f 93       	push	r25
    27e6:	8f 93       	push	r24
    27e8:	8e e4       	ldi	r24, 0x4E	; 78
    27ea:	94 e0       	ldi	r25, 0x04	; 4
    27ec:	9f 93       	push	r25
    27ee:	8f 93       	push	r24
    27f0:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	8e e4       	ldi	r24, 0x4E	; 78
    27f8:	94 e0       	ldi	r25, 0x04	; 4
    27fa:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
		}

		if(days)
    280a:	23 28       	or	r2, r3
    280c:	b9 f0       	breq	.+46     	; 0x283c <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    280e:	9f 92       	push	r9
    2810:	8f 92       	push	r8
    2812:	87 eb       	ldi	r24, 0xB7	; 183
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	9f 93       	push	r25
    2818:	8f 93       	push	r24
    281a:	8e e4       	ldi	r24, 0x4E	; 78
    281c:	94 e0       	ldi	r25, 0x04	; 4
    281e:	9f 93       	push	r25
    2820:	8f 93       	push	r24
    2822:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	8e e4       	ldi	r24, 0x4E	; 78
    282a:	94 e0       	ldi	r25, 0x04	; 4
    282c:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
		}

		if(hours)
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	89 2b       	or	r24, r25
    2842:	c9 f0       	breq	.+50     	; 0x2876 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	9f 93       	push	r25
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	ef 93       	push	r30
    284c:	80 ec       	ldi	r24, 0xC0	; 192
    284e:	91 e0       	ldi	r25, 0x01	; 1
    2850:	9f 93       	push	r25
    2852:	8f 93       	push	r24
    2854:	8e e4       	ldi	r24, 0x4E	; 78
    2856:	94 e0       	ldi	r25, 0x04	; 4
    2858:	9f 93       	push	r25
    285a:	8f 93       	push	r24
    285c:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	8e e4       	ldi	r24, 0x4E	; 78
    2864:	94 e0       	ldi	r25, 0x04	; 4
    2866:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
		}

		if(minutes)
    2876:	01 2b       	or	r16, r17
    2878:	c9 f0       	breq	.+50     	; 0x28ac <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    287a:	fe 81       	ldd	r31, Y+6	; 0x06
    287c:	ff 93       	push	r31
    287e:	2d 81       	ldd	r18, Y+5	; 0x05
    2880:	2f 93       	push	r18
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	9f 93       	push	r25
    2888:	8f 93       	push	r24
    288a:	8e e4       	ldi	r24, 0x4E	; 78
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	9f 93       	push	r25
    2890:	8f 93       	push	r24
    2892:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	8e e4       	ldi	r24, 0x4E	; 78
    289a:	94 e0       	ldi	r25, 0x04	; 4
    289c:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    28ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    28ae:	3f 93       	push	r19
    28b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    28b2:	4f 93       	push	r20
    28b4:	80 ed       	ldi	r24, 0xD0	; 208
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	9f 93       	push	r25
    28ba:	8f 93       	push	r24
    28bc:	8e e4       	ldi	r24, 0x4E	; 78
    28be:	94 e0       	ldi	r25, 0x04	; 4
    28c0:	9f 93       	push	r25
    28c2:	8f 93       	push	r24
    28c4:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
		lb_send_string(g_tempStr, TRUE);
    28c8:	61 e0       	ldi	r22, 0x01	; 1
    28ca:	8e e4       	ldi	r24, 0x4E	; 78
    28cc:	94 e0       	ldi	r25, 0x04	; 4
    28ce:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>

		lb_send_NewLine();
    28d2:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    28d6:	ee e4       	ldi	r30, 0x4E	; 78
    28d8:	f4 e0       	ldi	r31, 0x04	; 4
    28da:	10 82       	st	Z, r1
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    28ee:	2c 96       	adiw	r28, 0x0c	; 12
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	ff 90       	pop	r15
    2904:	ef 90       	pop	r14
    2906:	df 90       	pop	r13
    2908:	cf 90       	pop	r12
    290a:	bf 90       	pop	r11
    290c:	af 90       	pop	r10
    290e:	9f 90       	pop	r9
    2910:	8f 90       	pop	r8
    2912:	7f 90       	pop	r7
    2914:	6f 90       	pop	r6
    2916:	5f 90       	pop	r5
    2918:	4f 90       	pop	r4
    291a:	3f 90       	pop	r3
    291c:	2f 90       	pop	r2
    291e:	08 95       	ret

00002920 <_Z18startEventUsingRTCv>:
	g_transmissions_disabled = TRUE;
	linkbus_init(BAUD);
}

void startEventUsingRTC(void)
{
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
	g_transmissions_disabled = TRUE;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_transmissions_disabled>

	if(!clockConfigurationError())
    292e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_Z23clockConfigurationErrorv>
    2932:	81 11       	cpse	r24, r1
    2934:	5d c0       	rjmp	.+186    	; 0x29f0 <_Z18startEventUsingRTCv+0xd0>
	{
		g_use_rtc_to_start = TRUE;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <g_use_rtc_to_start>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    293c:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    2940:	30 91 c6 04 	lds	r19, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2944:	40 91 c7 04 	lds	r20, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    2948:	50 91 c8 04 	lds	r21, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    294c:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_current_epoch>
    2950:	70 91 ca 04 	lds	r23, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2954:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2958:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    295c:	0f 2e       	mov	r0, r31
    295e:	f7 ed       	ldi	r31, 0xD7	; 215
    2960:	ef 2e       	mov	r14, r31
    2962:	f1 e0       	ldi	r31, 0x01	; 1
    2964:	ff 2e       	mov	r15, r31
    2966:	f0 2d       	mov	r31, r0
    2968:	04 ee       	ldi	r16, 0xE4	; 228
    296a:	11 e0       	ldi	r17, 0x01	; 1
    296c:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    2970:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    2974:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    2978:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    297c:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    2980:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    2984:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2988:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    298c:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    2990:	e1 2c       	mov	r14, r1
    2992:	f1 2c       	mov	r15, r1
    2994:	00 ef       	ldi	r16, 0xF0	; 240
    2996:	11 e0       	ldi	r17, 0x01	; 1
    2998:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    299c:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    29a0:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    29a4:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    29a8:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    29ac:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    29b0:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    29b4:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    29b8:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    29bc:	48 17       	cp	r20, r24
    29be:	59 07       	cpc	r21, r25
    29c0:	6a 07       	cpc	r22, r26
    29c2:	7b 07       	cpc	r23, r27
    29c4:	b8 f4       	brcc	.+46     	; 0x29f4 <_Z18startEventUsingRTCv+0xd4>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    29c6:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    29ca:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    29ce:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    29d2:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    29d6:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_current_epoch>
    29da:	70 91 ca 04 	lds	r23, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    29de:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    29e2:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    29e6:	08 ef       	ldi	r16, 0xF8	; 248
    29e8:	11 e0       	ldi	r17, 0x01	; 1
    29ea:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <_Z18startEventUsingRTCv+0xd4>
		}
	}
	else
	{
		reportConfigErrors();
    29f0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_Z18reportConfigErrorsv>
	}
}
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	ef 90       	pop	r14
    29fc:	08 95       	ret

000029fe <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    29fe:	2f 92       	push	r2
    2a00:	3f 92       	push	r3
    2a02:	4f 92       	push	r4
    2a04:	5f 92       	push	r5
    2a06:	6f 92       	push	r6
    2a08:	7f 92       	push	r7
    2a0a:	8f 92       	push	r8
    2a0c:	9f 92       	push	r9
    2a0e:	af 92       	push	r10
    2a10:	bf 92       	push	r11
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	28 97       	sbiw	r28, 0x08	; 8
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
				}

				sprintf(g_tempStr, "STA:%s\n", g_enable_start_timer ? "ON" : "OFF");
    2a32:	0f 2e       	mov	r0, r31
    2a34:	f0 e2       	ldi	r31, 0x20	; 32
    2a36:	6f 2e       	mov	r6, r31
    2a38:	f2 e0       	ldi	r31, 0x02	; 2
    2a3a:	7f 2e       	mov	r7, r31
    2a3c:	f0 2d       	mov	r31, r0
    2a3e:	0f 2e       	mov	r0, r31
    2a40:	fe e4       	ldi	r31, 0x4E	; 78
    2a42:	af 2e       	mov	r10, r31
    2a44:	f4 e0       	ldi	r31, 0x04	; 4
    2a46:	bf 2e       	mov	r11, r31
    2a48:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, FALSE);
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    2a4a:	0f 2e       	mov	r0, r31
    2a4c:	f2 e7       	ldi	r31, 0x72	; 114
    2a4e:	8f 2e       	mov	r8, r31
    2a50:	f2 e0       	ldi	r31, 0x02	; 2
    2a52:	9f 2e       	mov	r9, r31
    2a54:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2a56:	0f 2e       	mov	r0, r31
    2a58:	ff e2       	ldi	r31, 0x2F	; 47
    2a5a:	4f 2e       	mov	r4, r31
    2a5c:	f2 e0       	ldi	r31, 0x02	; 2
    2a5e:	5f 2e       	mov	r5, r31
    2a60:	f0 2d       	mov	r31, r0
							setupForFox(&holdFox);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    2a62:	0f 2e       	mov	r0, r31
    2a64:	f0 e1       	ldi	r31, 0x10	; 16
    2a66:	2f 2e       	mov	r2, r31
    2a68:	f2 e0       	ldi	r31, 0x02	; 2
    2a6a:	3f 2e       	mov	r3, r31
    2a6c:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2a6e:	0e 94 c5 09 	call	0x138a	; 0x138a <_Z16nextFullRxBufferv>
    2a72:	6c 01       	movw	r12, r24
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <_Z17handleLinkBusMsgsv+0x7c>
    2a78:	44 c5       	rjmp	.+2696   	; 0x3502 <_Z17handleLinkBusMsgsv+0xb04>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	81 81       	ldd	r24, Z+1	; 0x01
    2a7e:	92 81       	ldd	r25, Z+2	; 0x02
    2a80:	8a 39       	cpi	r24, 0x9A	; 154
    2a82:	f3 e2       	ldi	r31, 0x23	; 35
    2a84:	9f 07       	cpc	r25, r31
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <_Z17handleLinkBusMsgsv+0x8c>
    2a88:	24 c5       	rjmp	.+2632   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
    2a8a:	c8 f4       	brcc	.+50     	; 0x2abe <_Z17handleLinkBusMsgsv+0xc0>
    2a8c:	85 32       	cpi	r24, 0x25	; 37
    2a8e:	3e e1       	ldi	r19, 0x1E	; 30
    2a90:	93 07       	cpc	r25, r19
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <_Z17handleLinkBusMsgsv+0x98>
    2a94:	1e c5       	rjmp	.+2620   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
    2a96:	50 f4       	brcc	.+20     	; 0x2aac <_Z17handleLinkBusMsgsv+0xae>
    2a98:	8e 31       	cpi	r24, 0x1E	; 30
    2a9a:	e3 e0       	ldi	r30, 0x03	; 3
    2a9c:	9e 07       	cpc	r25, r30
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <_Z17handleLinkBusMsgsv+0xa4>
    2aa0:	5e c1       	rjmp	.+700    	; 0x2d5e <_Z17handleLinkBusMsgsv+0x360>
    2aa2:	8f 36       	cpi	r24, 0x6F	; 111
    2aa4:	9d 41       	sbci	r25, 0x1D	; 29
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <_Z17handleLinkBusMsgsv+0xac>
    2aa8:	25 c2       	rjmp	.+1098   	; 0x2ef4 <_Z17handleLinkBusMsgsv+0x4f6>
    2aaa:	0f c5       	rjmp	.+2590   	; 0x34ca <_Z17handleLinkBusMsgsv+0xacc>
    2aac:	86 3c       	cpi	r24, 0xC6	; 198
    2aae:	2e e1       	ldi	r18, 0x1E	; 30
    2ab0:	92 07       	cpc	r25, r18
    2ab2:	f9 f0       	breq	.+62     	; 0x2af2 <_Z17handleLinkBusMsgsv+0xf4>
    2ab4:	86 3a       	cpi	r24, 0xA6	; 166
    2ab6:	90 42       	sbci	r25, 0x20	; 32
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <_Z17handleLinkBusMsgsv+0xbe>
    2aba:	c4 c0       	rjmp	.+392    	; 0x2c44 <_Z17handleLinkBusMsgsv+0x246>
    2abc:	06 c5       	rjmp	.+2572   	; 0x34ca <_Z17handleLinkBusMsgsv+0xacc>
    2abe:	85 3f       	cpi	r24, 0xF5	; 245
    2ac0:	43 e2       	ldi	r20, 0x23	; 35
    2ac2:	94 07       	cpc	r25, r20
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <_Z17handleLinkBusMsgsv+0xca>
    2ac6:	05 c1       	rjmp	.+522    	; 0x2cd2 <_Z17handleLinkBusMsgsv+0x2d4>
    2ac8:	50 f4       	brcc	.+20     	; 0x2ade <_Z17handleLinkBusMsgsv+0xe0>
    2aca:	8f 3c       	cpi	r24, 0xCF	; 207
    2acc:	f3 e2       	ldi	r31, 0x23	; 35
    2ace:	9f 07       	cpc	r25, r31
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <_Z17handleLinkBusMsgsv+0xd6>
    2ad2:	ae c4       	rjmp	.+2396   	; 0x3430 <_Z17handleLinkBusMsgsv+0xa32>
    2ad4:	80 3d       	cpi	r24, 0xD0	; 208
    2ad6:	93 42       	sbci	r25, 0x23	; 35
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <_Z17handleLinkBusMsgsv+0xde>
    2ada:	b0 c1       	rjmp	.+864    	; 0x2e3c <_Z17handleLinkBusMsgsv+0x43e>
    2adc:	f6 c4       	rjmp	.+2540   	; 0x34ca <_Z17handleLinkBusMsgsv+0xacc>
    2ade:	84 33       	cpi	r24, 0x34	; 52
    2ae0:	34 e2       	ldi	r19, 0x24	; 36
    2ae2:	93 07       	cpc	r25, r19
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <_Z17handleLinkBusMsgsv+0xea>
    2ae6:	2b c1       	rjmp	.+598    	; 0x2d3e <_Z17handleLinkBusMsgsv+0x340>
    2ae8:	8c 39       	cpi	r24, 0x9C	; 156
    2aea:	94 42       	sbci	r25, 0x24	; 36
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <_Z17handleLinkBusMsgsv+0xf2>
    2aee:	fc c1       	rjmp	.+1016   	; 0x2ee8 <_Z17handleLinkBusMsgsv+0x4ea>
    2af0:	ec c4       	rjmp	.+2520   	; 0x34ca <_Z17handleLinkBusMsgsv+0xacc>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2af2:	f6 01       	movw	r30, r12
    2af4:	83 81       	ldd	r24, Z+3	; 0x03
    2af6:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	09 f4       	brne	.+2      	; 0x2afe <_Z17handleLinkBusMsgsv+0x100>
    2afc:	8e c0       	rjmp	.+284    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
				{
					if(c == 'B')
    2afe:	82 34       	cpi	r24, 0x42	; 66
    2b00:	91 05       	cpc	r25, r1
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <_Z17handleLinkBusMsgsv+0x108>
    2b04:	ec c4       	rjmp	.+2520   	; 0x34de <_Z17handleLinkBusMsgsv+0xae0>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2b06:	84 34       	cpi	r24, 0x44	; 68
    2b08:	91 05       	cpc	r25, r1
    2b0a:	39 f4       	brne	.+14     	; 0x2b1a <_Z17handleLinkBusMsgsv+0x11c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2b0c:	87 89       	ldd	r24, Z+23	; 0x17
    2b0e:	83 35       	cpi	r24, 0x53	; 83
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <_Z17handleLinkBusMsgsv+0x116>
    2b12:	e7 c4       	rjmp	.+2510   	; 0x34e2 <_Z17handleLinkBusMsgsv+0xae4>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2b14:	86 e0       	ldi	r24, 0x06	; 6
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	74 c0       	rjmp	.+232    	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
						}
					}
					else if(c == 'F')
    2b1a:	86 34       	cpi	r24, 0x46	; 70
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <_Z17handleLinkBusMsgsv+0x124>
    2b20:	e3 c4       	rjmp	.+2502   	; 0x34e8 <_Z17handleLinkBusMsgsv+0xaea>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2b22:	83 34       	cpi	r24, 0x43	; 67
    2b24:	91 05       	cpc	r25, r1
    2b26:	c9 f4       	brne	.+50     	; 0x2b5a <_Z17handleLinkBusMsgsv+0x15c>
					{
						char t = lb_buff->fields[FIELD2][0];
    2b28:	f6 01       	movw	r30, r12
    2b2a:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2b2c:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2b2e:	82 34       	cpi	r24, 0x42	; 66
    2b30:	29 f0       	breq	.+10     	; 0x2b3c <_Z17handleLinkBusMsgsv+0x13e>
						{
							t = '0';
						}

						if(isdigit(t))
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	c0 97       	sbiw	r24, 0x30	; 48
    2b36:	0a 97       	sbiw	r24, 0x0a	; 10
    2b38:	08 f0       	brcs	.+2      	; 0x2b3c <_Z17handleLinkBusMsgsv+0x13e>
    2b3a:	6f c0       	rjmp	.+222    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    2b3c:	c6 01       	movw	r24, r12
    2b3e:	47 96       	adiw	r24, 0x17	; 23
    2b40:	0e 94 b6 23 	call	0x476c	; 0x476c <atoi>
    2b44:	99 23       	and	r25, r25
    2b46:	14 f4       	brge	.+4      	; 0x2b4c <_Z17handleLinkBusMsgsv+0x14e>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	86 30       	cpi	r24, 0x06	; 6
    2b4e:	91 05       	cpc	r25, r1
    2b50:	0c f4       	brge	.+2      	; 0x2b54 <_Z17handleLinkBusMsgsv+0x156>
    2b52:	54 c0       	rjmp	.+168    	; 0x2bfc <_Z17handleLinkBusMsgsv+0x1fe>
    2b54:	85 e0       	ldi	r24, 0x05	; 5
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	51 c0       	rjmp	.+162    	; 0x2bfc <_Z17handleLinkBusMsgsv+0x1fe>
						}
					}
					else if(c == 'S')
    2b5a:	83 35       	cpi	r24, 0x53	; 83
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	e9 f5       	brne	.+122    	; 0x2bda <_Z17handleLinkBusMsgsv+0x1dc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2b60:	f6 01       	movw	r30, r12
    2b62:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2b64:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2b66:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2b68:	82 34       	cpi	r24, 0x42	; 66
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <_Z17handleLinkBusMsgsv+0x170>
    2b6c:	56 c0       	rjmp	.+172    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2b6e:	86 34       	cpi	r24, 0x46	; 70
    2b70:	49 f4       	brne	.+18     	; 0x2b84 <_Z17handleLinkBusMsgsv+0x186>
						{
							if((u > '0') && (u < '6'))
    2b72:	8f ec       	ldi	r24, 0xCF	; 207
    2b74:	89 0f       	add	r24, r25
    2b76:	85 30       	cpi	r24, 0x05	; 5
    2b78:	08 f0       	brcs	.+2      	; 0x2b7c <_Z17handleLinkBusMsgsv+0x17e>
    2b7a:	4f c0       	rjmp	.+158    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
							{
								x = SPRINT_F1 + (u - '1');
    2b7c:	89 2f       	mov	r24, r25
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	83 97       	sbiw	r24, 0x23	; 35
    2b82:	1b c0       	rjmp	.+54     	; 0x2bba <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(t == 'S')
    2b84:	83 35       	cpi	r24, 0x53	; 83
    2b86:	41 f4       	brne	.+16     	; 0x2b98 <_Z17handleLinkBusMsgsv+0x19a>
						{
							if((u > '0') && (u < '6'))
    2b88:	8f ec       	ldi	r24, 0xCF	; 207
    2b8a:	89 0f       	add	r24, r25
    2b8c:	85 30       	cpi	r24, 0x05	; 5
    2b8e:	c0 f4       	brcc	.+48     	; 0x2bc0 <_Z17handleLinkBusMsgsv+0x1c2>
							{
								x = SPRINT_S1 + (u - '1');
    2b90:	89 2f       	mov	r24, r25
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	88 97       	sbiw	r24, 0x28	; 40
    2b96:	11 c0       	rjmp	.+34     	; 0x2bba <_Z17handleLinkBusMsgsv+0x1bc>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2b98:	96 34       	cpi	r25, 0x46	; 70
    2b9a:	39 f4       	brne	.+14     	; 0x2baa <_Z17handleLinkBusMsgsv+0x1ac>
						{
							if((t > '0') && (t < '6'))
    2b9c:	9f ec       	ldi	r25, 0xCF	; 207
    2b9e:	98 0f       	add	r25, r24
    2ba0:	95 30       	cpi	r25, 0x05	; 5
    2ba2:	d8 f5       	brcc	.+118    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
							{
								x = SPRINT_F1 + (t - '1');
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	83 97       	sbiw	r24, 0x23	; 35
    2ba8:	08 c0       	rjmp	.+16     	; 0x2bba <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(u == 'S')
    2baa:	93 35       	cpi	r25, 0x53	; 83
    2bac:	b1 f5       	brne	.+108    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
						{
							if((t > '0') && (t < '6'))
    2bae:	9f ec       	ldi	r25, 0xCF	; 207
    2bb0:	98 0f       	add	r25, r24
    2bb2:	95 30       	cpi	r25, 0x05	; 5
    2bb4:	90 f5       	brcc	.+100    	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
							{
								x = SPRINT_S1 + (t - '1');
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	19 f4       	brne	.+6      	; 0x2bc4 <_Z17handleLinkBusMsgsv+0x1c6>
    2bbe:	2d c0       	rjmp	.+90     	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2bc0:	88 e0       	ldi	r24, 0x08	; 8
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    2bc4:	88 30       	cpi	r24, 0x08	; 8
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	14 f4       	brge	.+4      	; 0x2bce <_Z17handleLinkBusMsgsv+0x1d0>
    2bca:	88 e0       	ldi	r24, 0x08	; 8
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	83 31       	cpi	r24, 0x13	; 19
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	a4 f0       	brlt	.+40     	; 0x2bfc <_Z17handleLinkBusMsgsv+0x1fe>
    2bd4:	82 e1       	ldi	r24, 0x12	; 18
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	11 c0       	rjmp	.+34     	; 0x2bfc <_Z17handleLinkBusMsgsv+0x1fe>
						}
					}
					else if(c == 'N')
    2bda:	8e 34       	cpi	r24, 0x4E	; 78
    2bdc:	91 05       	cpc	r25, r1
    2bde:	51 f4       	brne	.+20     	; 0x2bf4 <_Z17handleLinkBusMsgsv+0x1f6>
					{
						char t = lb_buff->fields[FIELD2][0];
    2be0:	f6 01       	movw	r30, r12
    2be2:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2be4:	82 33       	cpi	r24, 0x32	; 50
    2be6:	09 f4       	brne	.+2      	; 0x2bea <_Z17handleLinkBusMsgsv+0x1ec>
    2be8:	82 c4       	rjmp	.+2308   	; 0x34ee <_Z17handleLinkBusMsgsv+0xaf0>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2bea:	85 33       	cpi	r24, 0x35	; 53
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <_Z17handleLinkBusMsgsv+0x1f2>
    2bee:	81 c4       	rjmp	.+2306   	; 0x34f2 <_Z17handleLinkBusMsgsv+0xaf4>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	07 c0       	rjmp	.+14     	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2bf4:	c6 01       	movw	r24, r12
    2bf6:	03 96       	adiw	r24, 0x03	; 3
    2bf8:	0e 94 b6 23 	call	0x476c	; 0x476c <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2bfc:	86 31       	cpi	r24, 0x16	; 22
    2bfe:	91 05       	cpc	r25, r1
    2c00:	60 f4       	brcc	.+24     	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
					{
						Fox_t holdFox = (Fox_t)c;
    2c02:	89 83       	std	Y+1, r24	; 0x01
						permFox(holdFox);
    2c04:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_Z7permFox5Fox_t>
						if(holdFox != g_fox)
    2c08:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_fox>
    2c0c:	99 81       	ldd	r25, Y+1	; 0x01
    2c0e:	98 17       	cp	r25, r24
    2c10:	21 f0       	breq	.+8      	; 0x2c1a <_Z17handleLinkBusMsgsv+0x21c>
						{
							setupForFox(&holdFox);
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    2c1a:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_fox>
    2c1e:	1f 92       	push	r1
    2c20:	8f 93       	push	r24
    2c22:	3f 92       	push	r3
    2c24:	2f 92       	push	r2
    2c26:	bf 92       	push	r11
    2c28:	af 92       	push	r10
    2c2a:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	c5 01       	movw	r24, r10
    2c32:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
			}
			break;
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	47 c4       	rjmp	.+2190   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    2c44:	f6 01       	movw	r30, r12
    2c46:	83 81       	ldd	r24, Z+3	; 0x03
    2c48:	88 23       	and	r24, r24
    2c4a:	09 f1       	breq	.+66     	; 0x2c8e <_Z17handleLinkBusMsgsv+0x290>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2c4c:	94 81       	ldd	r25, Z+4	; 0x04
    2c4e:	96 34       	cpi	r25, 0x46	; 70
    2c50:	11 f0       	breq	.+4      	; 0x2c56 <_Z17handleLinkBusMsgsv+0x258>
    2c52:	80 33       	cpi	r24, 0x30	; 48
    2c54:	59 f4       	brne	.+22     	; 0x2c6c <_Z17handleLinkBusMsgsv+0x26e>
					{
						g_enable_LEDs = FALSE;
    2c56:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <g_enable_LEDs>
						digitalWrite(PIN_LED1, OFF);    /*  LED Off */
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	8d e0       	ldi	r24, 0x0D	; 13
    2c5e:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
						digitalWrite(PIN_LED2, OFF);
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	87 e0       	ldi	r24, 0x07	; 7
    2c66:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <_Z17handleLinkBusMsgsv+0x274>
					}
					else
					{
						g_enable_LEDs = TRUE;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <g_enable_LEDs>
					}

					ee_mgr.updateEEPROMVar(Enable_LEDs, (void*)&g_enable_LEDs);
    2c72:	4e e7       	ldi	r20, 0x7E	; 126
    2c74:	54 e0       	ldi	r21, 0x04	; 4
    2c76:	60 e1       	ldi	r22, 0x10	; 16
    2c78:	88 ed       	ldi	r24, 0xD8	; 216
    2c7a:	94 e0       	ldi	r25, 0x04	; 4
    2c7c:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    2c80:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <g_enable_LEDs>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	91 11       	cpse	r25, r1
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr, "LED:%s\n", g_enable_LEDs ? "ON" : "OFF");
    2c8e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <g_enable_LEDs>
    2c92:	81 11       	cpse	r24, r1
    2c94:	05 c0       	rjmp	.+10     	; 0x2ca0 <_Z17handleLinkBusMsgsv+0x2a2>
    2c96:	2c e0       	ldi	r18, 0x0C	; 12
    2c98:	32 e0       	ldi	r19, 0x02	; 2
    2c9a:	82 2f       	mov	r24, r18
    2c9c:	93 2f       	mov	r25, r19
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <_Z17handleLinkBusMsgsv+0x2aa>
    2ca0:	e9 e0       	ldi	r30, 0x09	; 9
    2ca2:	f2 e0       	ldi	r31, 0x02	; 2
    2ca4:	8e 2f       	mov	r24, r30
    2ca6:	9f 2f       	mov	r25, r31
    2ca8:	9f 93       	push	r25
    2caa:	8f 93       	push	r24
    2cac:	88 e1       	ldi	r24, 0x18	; 24
    2cae:	92 e0       	ldi	r25, 0x02	; 2
    2cb0:	9f 93       	push	r25
    2cb2:	8f 93       	push	r24
    2cb4:	bf 92       	push	r11
    2cb6:	af 92       	push	r10
    2cb8:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	c5 01       	movw	r24, r10
    2cc0:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
			}
			break;
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	00 c4       	rjmp	.+2048   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    2cd2:	f6 01       	movw	r30, r12
    2cd4:	83 81       	ldd	r24, Z+3	; 0x03
    2cd6:	88 23       	and	r24, r24
    2cd8:	91 f0       	breq	.+36     	; 0x2cfe <_Z17handleLinkBusMsgsv+0x300>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2cda:	94 81       	ldd	r25, Z+4	; 0x04
    2cdc:	96 34       	cpi	r25, 0x46	; 70
    2cde:	11 f0       	breq	.+4      	; 0x2ce4 <_Z17handleLinkBusMsgsv+0x2e6>
    2ce0:	80 33       	cpi	r24, 0x30	; 48
    2ce2:	19 f4       	brne	.+6      	; 0x2cea <_Z17handleLinkBusMsgsv+0x2ec>
					{
						g_enable_start_timer = FALSE;
    2ce4:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <g_enable_start_timer>
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <_Z17handleLinkBusMsgsv+0x2f2>
					}
					else
					{
						g_enable_start_timer = TRUE;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <g_enable_start_timer>
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
    2cf0:	4d e7       	ldi	r20, 0x7D	; 125
    2cf2:	54 e0       	ldi	r21, 0x04	; 4
    2cf4:	63 e1       	ldi	r22, 0x13	; 19
    2cf6:	88 ed       	ldi	r24, 0xD8	; 216
    2cf8:	94 e0       	ldi	r25, 0x04	; 4
    2cfa:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
				}

				sprintf(g_tempStr, "STA:%s\n", g_enable_start_timer ? "ON" : "OFF");
    2cfe:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <g_enable_start_timer>
    2d02:	81 11       	cpse	r24, r1
    2d04:	05 c0       	rjmp	.+10     	; 0x2d10 <_Z17handleLinkBusMsgsv+0x312>
    2d06:	2c e0       	ldi	r18, 0x0C	; 12
    2d08:	32 e0       	ldi	r19, 0x02	; 2
    2d0a:	82 2f       	mov	r24, r18
    2d0c:	93 2f       	mov	r25, r19
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <_Z17handleLinkBusMsgsv+0x31a>
    2d10:	e9 e0       	ldi	r30, 0x09	; 9
    2d12:	f2 e0       	ldi	r31, 0x02	; 2
    2d14:	8e 2f       	mov	r24, r30
    2d16:	9f 2f       	mov	r25, r31
    2d18:	9f 93       	push	r25
    2d1a:	8f 93       	push	r24
    2d1c:	7f 92       	push	r7
    2d1e:	6f 92       	push	r6
    2d20:	bf 92       	push	r11
    2d22:	af 92       	push	r10
    2d24:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	c5 01       	movw	r24, r10
    2d2c:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
			}
			break;
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	ca c3       	rjmp	.+1940   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    2d3e:	f6 01       	movw	r30, r12
    2d40:	83 81       	ldd	r24, Z+3	; 0x03
    2d42:	88 23       	and	r24, r24
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <_Z17handleLinkBusMsgsv+0x34a>
    2d46:	c5 c3       	rjmp	.+1930   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    2d48:	80 33       	cpi	r24, 0x30	; 48
    2d4a:	19 f4       	brne	.+6      	; 0x2d52 <_Z17handleLinkBusMsgsv+0x354>
					{
						stopEventNow();
    2d4c:	0e 94 92 12 	call	0x2524	; 0x2524 <_Z12stopEventNowv>
    2d50:	c0 c3       	rjmp	.+1920   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
					{
						startEventNow();
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    2d52:	82 33       	cpi	r24, 0x32	; 50
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <_Z17handleLinkBusMsgsv+0x35a>
    2d56:	bd c3       	rjmp	.+1914   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
					{
						startEventUsingRTC();
    2d58:	0e 94 90 14 	call	0x2920	; 0x2920 <_Z18startEventUsingRTCv>
    2d5c:	ba c3       	rjmp	.+1908   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    2d5e:	f6 01       	movw	r30, r12
    2d60:	83 81       	ldd	r24, Z+3	; 0x03
    2d62:	88 23       	and	r24, r24
    2d64:	91 f1       	breq	.+100    	; 0x2dca <_Z17handleLinkBusMsgsv+0x3cc>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    2d66:	80 e2       	ldi	r24, 0x20	; 32
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	f5 01       	movw	r30, r10
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    2d70:	b6 01       	movw	r22, r12
    2d72:	6d 5f       	subi	r22, 0xFD	; 253
    2d74:	7f 4f       	sbci	r23, 0xFF	; 255
    2d76:	c5 01       	movw	r24, r10
    2d78:	0e 94 03 24 	call	0x4806	; 0x4806 <strcat>

					if(lb_buff->fields[FIELD2][0])
    2d7c:	f6 01       	movw	r30, r12
    2d7e:	87 89       	ldd	r24, Z+23	; 0x17
    2d80:	88 23       	and	r24, r24
    2d82:	79 f0       	breq	.+30     	; 0x2da2 <_Z17handleLinkBusMsgsv+0x3a4>
					{
						strcat(g_tempStr, " ");
    2d84:	f5 01       	movw	r30, r10
    2d86:	01 90       	ld	r0, Z+
    2d88:	00 20       	and	r0, r0
    2d8a:	e9 f7       	brne	.-6      	; 0x2d86 <_Z17handleLinkBusMsgsv+0x388>
    2d8c:	31 97       	sbiw	r30, 0x01	; 1
    2d8e:	80 e2       	ldi	r24, 0x20	; 32
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    2d96:	b6 01       	movw	r22, r12
    2d98:	69 5e       	subi	r22, 0xE9	; 233
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	c5 01       	movw	r24, r10
    2d9e:	0e 94 03 24 	call	0x4806	; 0x4806 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    2da2:	f5 01       	movw	r30, r10
    2da4:	01 90       	ld	r0, Z+
    2da6:	00 20       	and	r0, r0
    2da8:	e9 f7       	brne	.-6      	; 0x2da4 <_Z17handleLinkBusMsgsv+0x3a6>
    2daa:	31 97       	sbiw	r30, 0x01	; 1
    2dac:	ee 54       	subi	r30, 0x4E	; 78
    2dae:	f4 40       	sbci	r31, 0x04	; 4
    2db0:	75 97       	sbiw	r30, 0x15	; 21
    2db2:	58 f4       	brcc	.+22     	; 0x2dca <_Z17handleLinkBusMsgsv+0x3cc>
					{
						strcpy(g_messages_text[STATION_ID], g_tempStr);
    2db4:	b5 01       	movw	r22, r10
    2db6:	86 e9       	ldi	r24, 0x96	; 150
    2db8:	94 e0       	ldi	r25, 0x04	; 4
    2dba:	0e 94 0e 24 	call	0x481c	; 0x481c <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    2dbe:	a5 01       	movw	r20, r10
    2dc0:	6b e0       	ldi	r22, 0x0B	; 11
    2dc2:	88 ed       	ldi	r24, 0xD8	; 216
    2dc4:	94 e0       	ldi	r25, 0x04	; 4
    2dc6:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    2dca:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <g_messages_text+0x15>
    2dce:	88 23       	and	r24, r24
    2dd0:	f1 f0       	breq	.+60     	; 0x2e0e <_Z17handleLinkBusMsgsv+0x410>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    2dd2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	86 e9       	ldi	r24, 0x96	; 150
    2dda:	94 e0       	ldi	r25, 0x04	; 4
    2ddc:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_Z26timeRequiredToSendStrAtWPMPcj>
    2de0:	8c 50       	subi	r24, 0x0C	; 12
    2de2:	9e 4f       	sbci	r25, 0xFE	; 254
    2de4:	9c 01       	movw	r18, r24
    2de6:	36 95       	lsr	r19
    2de8:	27 95       	ror	r18
    2dea:	36 95       	lsr	r19
    2dec:	27 95       	ror	r18
    2dee:	36 95       	lsr	r19
    2df0:	27 95       	ror	r18
    2df2:	a5 ec       	ldi	r26, 0xC5	; 197
    2df4:	b0 e2       	ldi	r27, 0x20	; 32
    2df6:	0e 94 8d 23 	call	0x471a	; 0x471a <__umulhisi3>
    2dfa:	92 95       	swap	r25
    2dfc:	82 95       	swap	r24
    2dfe:	8f 70       	andi	r24, 0x0F	; 15
    2e00:	89 27       	eor	r24, r25
    2e02:	9f 70       	andi	r25, 0x0F	; 15
    2e04:	89 27       	eor	r24, r25
    2e06:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <g_time_needed_for_ID+0x1>
    2e0a:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    2e0e:	86 e9       	ldi	r24, 0x96	; 150
    2e10:	94 e0       	ldi	r25, 0x04	; 4
    2e12:	9f 93       	push	r25
    2e14:	8f 93       	push	r24
    2e16:	88 e2       	ldi	r24, 0x28	; 40
    2e18:	92 e0       	ldi	r25, 0x02	; 2
    2e1a:	9f 93       	push	r25
    2e1c:	8f 93       	push	r24
    2e1e:	bf 92       	push	r11
    2e20:	af 92       	push	r10
    2e22:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    2e26:	61 e0       	ldi	r22, 0x01	; 1
    2e28:	c5 01       	movw	r24, r10
    2e2a:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
			}
			break;
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	4b c3       	rjmp	.+1686   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    2e3c:	f6 01       	movw	r30, r12
    2e3e:	83 81       	ldd	r24, Z+3	; 0x03
    2e40:	89 34       	cpi	r24, 0x49	; 73
    2e42:	e9 f5       	brne	.+122    	; 0x2ebe <_Z17handleLinkBusMsgsv+0x4c0>
				{
					if(lb_buff->fields[FIELD2][0])
    2e44:	87 89       	ldd	r24, Z+23	; 0x17
    2e46:	88 23       	and	r24, r24
    2e48:	d1 f1       	breq	.+116    	; 0x2ebe <_Z17handleLinkBusMsgsv+0x4c0>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    2e4a:	c6 01       	movw	r24, r12
    2e4c:	47 96       	adiw	r24, 0x17	; 23
    2e4e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    2e52:	86 2f       	mov	r24, r22
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	85 30       	cpi	r24, 0x05	; 5
    2e58:	91 05       	cpc	r25, r1
    2e5a:	14 f4       	brge	.+4      	; 0x2e60 <_Z17handleLinkBusMsgsv+0x462>
    2e5c:	85 e0       	ldi	r24, 0x05	; 5
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	85 31       	cpi	r24, 0x15	; 21
    2e62:	91 05       	cpc	r25, r1
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <_Z17handleLinkBusMsgsv+0x46a>
    2e66:	84 e1       	ldi	r24, 0x14	; 20
    2e68:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    2e6c:	44 e1       	ldi	r20, 0x14	; 20
    2e6e:	51 e0       	ldi	r21, 0x01	; 1
    2e70:	6e e0       	ldi	r22, 0x0E	; 14
    2e72:	88 ed       	ldi	r24, 0xD8	; 216
    2e74:	94 e0       	ldi	r25, 0x04	; 4
    2e76:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    2e7a:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <g_messages_text+0x15>
    2e7e:	88 23       	and	r24, r24
    2e80:	f1 f0       	breq	.+60     	; 0x2ebe <_Z17handleLinkBusMsgsv+0x4c0>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    2e82:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	86 e9       	ldi	r24, 0x96	; 150
    2e8a:	94 e0       	ldi	r25, 0x04	; 4
    2e8c:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_Z26timeRequiredToSendStrAtWPMPcj>
    2e90:	8c 50       	subi	r24, 0x0C	; 12
    2e92:	9e 4f       	sbci	r25, 0xFE	; 254
    2e94:	9c 01       	movw	r18, r24
    2e96:	36 95       	lsr	r19
    2e98:	27 95       	ror	r18
    2e9a:	36 95       	lsr	r19
    2e9c:	27 95       	ror	r18
    2e9e:	36 95       	lsr	r19
    2ea0:	27 95       	ror	r18
    2ea2:	a5 ec       	ldi	r26, 0xC5	; 197
    2ea4:	b0 e2       	ldi	r27, 0x20	; 32
    2ea6:	0e 94 8d 23 	call	0x471a	; 0x471a <__umulhisi3>
    2eaa:	92 95       	swap	r25
    2eac:	82 95       	swap	r24
    2eae:	8f 70       	andi	r24, 0x0F	; 15
    2eb0:	89 27       	eor	r24, r25
    2eb2:	9f 70       	andi	r25, 0x0F	; 15
    2eb4:	89 27       	eor	r24, r25
    2eb6:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <g_time_needed_for_ID+0x1>
    2eba:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2ebe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_id_codespeed>
    2ec2:	1f 92       	push	r1
    2ec4:	8f 93       	push	r24
    2ec6:	5f 92       	push	r5
    2ec8:	4f 92       	push	r4
    2eca:	bf 92       	push	r11
    2ecc:	af 92       	push	r10
    2ece:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	c5 01       	movw	r24, r10
    2ed6:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
			}
			break;
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	f5 c2       	rjmp	.+1514   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>

			case MESSAGE_VERSION:
			{
				ee_mgr.sendEEPROMString(TextVersion);
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	88 ed       	ldi	r24, 0xD8	; 216
    2eec:	94 e0       	ldi	r25, 0x04	; 4
    2eee:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
			}
			break;
    2ef2:	ef c2       	rjmp	.+1502   	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    2ef4:	f6 01       	movw	r30, r12
    2ef6:	83 81       	ldd	r24, Z+3	; 0x03
    2ef8:	84 35       	cpi	r24, 0x54	; 84
    2efa:	09 f0       	breq	.+2      	; 0x2efe <_Z17handleLinkBusMsgsv+0x500>
    2efc:	8d c0       	rjmp	.+282    	; 0x3018 <_Z17handleLinkBusMsgsv+0x61a>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    2efe:	4c e0       	ldi	r20, 0x0C	; 12
    2f00:	50 e0       	ldi	r21, 0x00	; 0
    2f02:	b6 01       	movw	r22, r12
    2f04:	69 5e       	subi	r22, 0xE9	; 233
    2f06:	7f 4f       	sbci	r23, 0xFF	; 255
    2f08:	c5 01       	movw	r24, r10
    2f0a:	0e 94 15 24 	call	0x482a	; 0x482a <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    2f0e:	f5 01       	movw	r30, r10
    2f10:	14 86       	std	Z+12, r1	; 0x0c
					int len = strlen(g_tempStr);
    2f12:	01 90       	ld	r0, Z+
    2f14:	00 20       	and	r0, r0
    2f16:	e9 f7       	brne	.-6      	; 0x2f12 <_Z17handleLinkBusMsgsv+0x514>
    2f18:	31 97       	sbiw	r30, 0x01	; 1
    2f1a:	ee 54       	subi	r30, 0x4E	; 78
    2f1c:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    2f1e:	1e 16       	cp	r1, r30
    2f20:	1f 06       	cpc	r1, r31
    2f22:	0c f0       	brlt	.+2      	; 0x2f26 <_Z17handleLinkBusMsgsv+0x528>
    2f24:	49 c0       	rjmp	.+146    	; 0x2fb8 <_Z17handleLinkBusMsgsv+0x5ba>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    2f26:	3c 97       	sbiw	r30, 0x0c	; 12
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <_Z17handleLinkBusMsgsv+0x52e>
    2f2a:	40 c0       	rjmp	.+128    	; 0x2fac <_Z17handleLinkBusMsgsv+0x5ae>
    2f2c:	c5 01       	movw	r24, r10
    2f2e:	0e 94 84 12 	call	0x2508	; 0x2508 <_Z11only_digitsPc>
    2f32:	88 23       	and	r24, r24
    2f34:	d9 f1       	breq	.+118    	; 0x2fac <_Z17handleLinkBusMsgsv+0x5ae>
						{
							time_t t = rv3028_get_epoch(NULL, g_tempStr);   /* String format "YYMMDDhhmmss" */
    2f36:	b5 01       	movw	r22, r10
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_Z16rv3028_get_epochPbPc>

							if(t > MINIMUM_EPOCH)
    2f40:	61 30       	cpi	r22, 0x01	; 1
    2f42:	76 46       	sbci	r23, 0x66	; 102
    2f44:	8e 4e       	sbci	r24, 0xEE	; 238
    2f46:	9f 45       	sbci	r25, 0x5F	; 95
    2f48:	58 f1       	brcs	.+86     	; 0x2fa0 <_Z17handleLinkBusMsgsv+0x5a2>
							{
								rv3028_set_date_time(g_tempStr);            /* String format "YYMMDDhhmmss" */
    2f4a:	c5 01       	movw	r24, r10
    2f4c:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <_Z20rv3028_set_date_timePc>
								g_current_epoch = rv3028_get_epoch(NULL, NULL);
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_Z16rv3028_get_epochPbPc>
    2f5c:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <g_current_epoch>
    2f60:	70 93 ca 04 	sts	0x04CA, r23	; 0x8004ca <g_current_epoch+0x1>
    2f64:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <g_current_epoch+0x2>
    2f68:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <g_current_epoch+0x3>
								sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    2f6c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    2f70:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2f74:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2f78:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2f7c:	bf 93       	push	r27
    2f7e:	af 93       	push	r26
    2f80:	9f 93       	push	r25
    2f82:	8f 93       	push	r24
    2f84:	80 e4       	ldi	r24, 0x40	; 64
    2f86:	92 e0       	ldi	r25, 0x02	; 2
    2f88:	9f 93       	push	r25
    2f8a:	8f 93       	push	r24
    2f8c:	bf 92       	push	r11
    2f8e:	af 92       	push	r10
    2f90:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	ac c2       	rjmp	.+1368   	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
							}
							else
							{
								ee_mgr.sendEEPROMString(TextErrTimeInPast);
    2fa0:	6a e0       	ldi	r22, 0x0A	; 10
    2fa2:	88 ed       	ldi	r24, 0xD8	; 216
    2fa4:	94 e0       	ldi	r25, 0x04	; 4
    2fa6:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2faa:	a6 c2       	rjmp	.+1356   	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
							}
						}
						else
						{
							ee_mgr.sendEEPROMString(TextErrInvalidTime);
    2fac:	69 e0       	ldi	r22, 0x09	; 9
    2fae:	88 ed       	ldi	r24, 0xD8	; 216
    2fb0:	94 e0       	ldi	r25, 0x04	; 4
    2fb2:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2fb6:	a0 c2       	rjmp	.+1344   	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
						}
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    2fb8:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    2fbc:	30 91 c6 04 	lds	r19, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    2fc0:	40 91 c7 04 	lds	r20, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    2fc4:	50 91 c8 04 	lds	r21, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    2fc8:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_current_epoch>
    2fcc:	70 91 ca 04 	lds	r23, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2fd0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2fd4:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2fd8:	e1 2c       	mov	r14, r1
    2fda:	f1 2c       	mov	r15, r1
    2fdc:	04 ee       	ldi	r16, 0xE4	; 228
    2fde:	11 e0       	ldi	r17, 0x01	; 1
    2fe0:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    2fe4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    2fe8:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    2fec:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    2ff0:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    2ff4:	bf 93       	push	r27
    2ff6:	af 93       	push	r26
    2ff8:	9f 93       	push	r25
    2ffa:	8f 93       	push	r24
    2ffc:	8b e3       	ldi	r24, 0x3B	; 59
    2ffe:	92 e0       	ldi	r25, 0x02	; 2
    3000:	9f 93       	push	r25
    3002:	8f 93       	push	r24
    3004:	bf 92       	push	r11
    3006:	af 92       	push	r10
    3008:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	70 c2       	rjmp	.+1248   	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3018:	83 35       	cpi	r24, 0x53	; 83
    301a:	09 f0       	breq	.+2      	; 0x301e <_Z17handleLinkBusMsgsv+0x620>
    301c:	c7 c0       	rjmp	.+398    	; 0x31ac <_Z17handleLinkBusMsgsv+0x7ae>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    301e:	b6 01       	movw	r22, r12
    3020:	69 5e       	subi	r22, 0xE9	; 233
    3022:	7f 4f       	sbci	r23, 0xFF	; 255
    3024:	c5 01       	movw	r24, r10
    3026:	0e 94 0e 24 	call	0x481c	; 0x481c <strcpy>
					int len = strlen(g_tempStr);
    302a:	f5 01       	movw	r30, r10
    302c:	01 90       	ld	r0, Z+
    302e:	00 20       	and	r0, r0
    3030:	e9 f7       	brne	.-6      	; 0x302c <_Z17handleLinkBusMsgsv+0x62e>
    3032:	31 97       	sbiw	r30, 0x01	; 1
    3034:	ee 54       	subi	r30, 0x4E	; 78
    3036:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3038:	1e 16       	cp	r1, r30
    303a:	1f 06       	cpc	r1, r31
    303c:	0c f0       	brlt	.+2      	; 0x3040 <_Z17handleLinkBusMsgsv+0x642>
    303e:	9c c0       	rjmp	.+312    	; 0x3178 <_Z17handleLinkBusMsgsv+0x77a>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    3040:	3c 97       	sbiw	r30, 0x0c	; 12
    3042:	09 f0       	breq	.+2      	; 0x3046 <_Z17handleLinkBusMsgsv+0x648>
    3044:	93 c0       	rjmp	.+294    	; 0x316c <_Z17handleLinkBusMsgsv+0x76e>
    3046:	c5 01       	movw	r24, r10
    3048:	0e 94 84 12 	call	0x2508	; 0x2508 <_Z11only_digitsPc>
    304c:	88 23       	and	r24, r24
    304e:	09 f4       	brne	.+2      	; 0x3052 <_Z17handleLinkBusMsgsv+0x654>
    3050:	8d c0       	rjmp	.+282    	; 0x316c <_Z17handleLinkBusMsgsv+0x76e>
						{
							time_t s;
							s = rv3028_get_epoch(NULL, g_tempStr);  /* String format "YYMMDDhhmmss" */
    3052:	b5 01       	movw	r22, r10
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_Z16rv3028_get_epochPbPc>

							if(s > g_current_epoch)
    305c:	00 91 c9 04 	lds	r16, 0x04C9	; 0x8004c9 <g_current_epoch>
    3060:	10 91 ca 04 	lds	r17, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    3064:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    3068:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    306c:	06 17       	cp	r16, r22
    306e:	17 07       	cpc	r17, r23
    3070:	28 07       	cpc	r18, r24
    3072:	39 07       	cpc	r19, r25
    3074:	08 f0       	brcs	.+2      	; 0x3078 <_Z17handleLinkBusMsgsv+0x67a>
    3076:	74 c0       	rjmp	.+232    	; 0x3160 <_Z17handleLinkBusMsgsv+0x762>
							{
								g_event_start_epoch = s;
    3078:	60 93 c5 04 	sts	0x04C5, r22	; 0x8004c5 <g_event_start_epoch>
    307c:	70 93 c6 04 	sts	0x04C6, r23	; 0x8004c6 <g_event_start_epoch+0x1>
    3080:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <g_event_start_epoch+0x2>
    3084:	90 93 c8 04 	sts	0x04C8, r25	; 0x8004c8 <g_event_start_epoch+0x3>
								ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3088:	45 ec       	ldi	r20, 0xC5	; 197
    308a:	54 e0       	ldi	r21, 0x04	; 4
    308c:	65 e1       	ldi	r22, 0x15	; 21
    308e:	88 ed       	ldi	r24, 0xD8	; 216
    3090:	94 e0       	ldi	r25, 0x04	; 4
    3092:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
								g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    3096:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    309a:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    309e:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    30a2:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	af 83       	std	Y+7, r26	; 0x07
    30ac:	b8 87       	std	Y+8, r27	; 0x08
    30ae:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    30b2:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    30b6:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    30ba:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    30be:	80 58       	subi	r24, 0x80	; 128
    30c0:	9e 4a       	sbci	r25, 0xAE	; 174
    30c2:	ae 4f       	sbci	r26, 0xFE	; 254
    30c4:	bf 4f       	sbci	r27, 0xFF	; 255
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	ab 83       	std	Y+3, r26	; 0x03
    30cc:	bc 83       	std	Y+4, r27	; 0x04
    30ce:	4d 81       	ldd	r20, Y+5	; 0x05
    30d0:	5e 81       	ldd	r21, Y+6	; 0x06
    30d2:	6f 81       	ldd	r22, Y+7	; 0x07
    30d4:	78 85       	ldd	r23, Y+8	; 0x08
    30d6:	48 17       	cp	r20, r24
    30d8:	59 07       	cpc	r21, r25
    30da:	6a 07       	cpc	r22, r26
    30dc:	7b 07       	cpc	r23, r27
    30de:	28 f4       	brcc	.+10     	; 0x30ea <_Z17handleLinkBusMsgsv+0x6ec>
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	9a 81       	ldd	r25, Y+2	; 0x02
    30e4:	ab 81       	ldd	r26, Y+3	; 0x03
    30e6:	bc 81       	ldd	r27, Y+4	; 0x04
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <_Z17handleLinkBusMsgsv+0x6f4>
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	af 81       	ldd	r26, Y+7	; 0x07
    30f0:	b8 85       	ldd	r27, Y+8	; 0x08
    30f2:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <g_event_finish_epoch>
    30f6:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <g_event_finish_epoch+0x1>
    30fa:	a0 93 c3 04 	sts	0x04C3, r26	; 0x8004c3 <g_event_finish_epoch+0x2>
    30fe:	b0 93 c4 04 	sts	0x04C4, r27	; 0x8004c4 <g_event_finish_epoch+0x3>
								ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3102:	41 ec       	ldi	r20, 0xC1	; 193
    3104:	54 e0       	ldi	r21, 0x04	; 4
    3106:	66 e1       	ldi	r22, 0x16	; 22
    3108:	88 ed       	ldi	r24, 0xD8	; 216
    310a:	94 e0       	ldi	r25, 0x04	; 4
    310c:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
								sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3110:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    3114:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    3118:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    311c:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    3120:	bf 93       	push	r27
    3122:	af 93       	push	r26
    3124:	9f 93       	push	r25
    3126:	8f 93       	push	r24
    3128:	8a e4       	ldi	r24, 0x4A	; 74
    312a:	92 e0       	ldi	r25, 0x02	; 2
    312c:	9f 93       	push	r25
    312e:	8f 93       	push	r24
    3130:	bf 92       	push	r11
    3132:	af 92       	push	r10
    3134:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
								g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3138:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_Z23clockConfigurationErrorv>
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	81 11       	cpse	r24, r1
    3148:	07 c0       	rjmp	.+14     	; 0x3158 <_Z17handleLinkBusMsgsv+0x75a>
    314a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_transmissions_disabled>
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	91 11       	cpse	r25, r1
    3152:	03 c0       	rjmp	.+6      	; 0x315a <_Z17handleLinkBusMsgsv+0x75c>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	01 c0       	rjmp	.+2      	; 0x315a <_Z17handleLinkBusMsgsv+0x75c>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <g_use_rtc_to_start>
    315e:	cc c1       	rjmp	.+920    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
							}
							else
							{
								ee_mgr.sendEEPROMString(TextErrStartInPast);
    3160:	68 e0       	ldi	r22, 0x08	; 8
    3162:	88 ed       	ldi	r24, 0xD8	; 216
    3164:	94 e0       	ldi	r25, 0x04	; 4
    3166:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    316a:	c6 c1       	rjmp	.+908    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
							}
						}
						else
						{
							ee_mgr.sendEEPROMString(TextErrInvalidTime);
    316c:	69 e0       	ldi	r22, 0x09	; 9
    316e:	88 ed       	ldi	r24, 0xD8	; 216
    3170:	94 e0       	ldi	r25, 0x04	; 4
    3172:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    3176:	c0 c1       	rjmp	.+896    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
						}
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3178:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    317c:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    3180:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    3184:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    3188:	bf 93       	push	r27
    318a:	af 93       	push	r26
    318c:	9f 93       	push	r25
    318e:	8f 93       	push	r24
    3190:	8a e4       	ldi	r24, 0x4A	; 74
    3192:	92 e0       	ldi	r25, 0x02	; 2
    3194:	9f 93       	push	r25
    3196:	8f 93       	push	r24
    3198:	bf 92       	push	r11
    319a:	af 92       	push	r10
    319c:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	a6 c1       	rjmp	.+844    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    31ac:	86 34       	cpi	r24, 0x46	; 70
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <_Z17handleLinkBusMsgsv+0x7b4>
    31b0:	b4 c0       	rjmp	.+360    	; 0x331a <_Z17handleLinkBusMsgsv+0x91c>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    31b2:	b6 01       	movw	r22, r12
    31b4:	69 5e       	subi	r22, 0xE9	; 233
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	c5 01       	movw	r24, r10
    31ba:	0e 94 0e 24 	call	0x481c	; 0x481c <strcpy>
					int len = strlen(g_tempStr);
    31be:	f5 01       	movw	r30, r10
    31c0:	01 90       	ld	r0, Z+
    31c2:	00 20       	and	r0, r0
    31c4:	e9 f7       	brne	.-6      	; 0x31c0 <_Z17handleLinkBusMsgsv+0x7c2>
    31c6:	31 97       	sbiw	r30, 0x01	; 1
    31c8:	ee 54       	subi	r30, 0x4E	; 78
    31ca:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    31cc:	1e 16       	cp	r1, r30
    31ce:	1f 06       	cpc	r1, r31
    31d0:	0c f0       	brlt	.+2      	; 0x31d4 <_Z17handleLinkBusMsgsv+0x7d6>
    31d2:	89 c0       	rjmp	.+274    	; 0x32e6 <_Z17handleLinkBusMsgsv+0x8e8>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    31d4:	3c 97       	sbiw	r30, 0x0c	; 12
    31d6:	09 f0       	breq	.+2      	; 0x31da <_Z17handleLinkBusMsgsv+0x7dc>
    31d8:	80 c0       	rjmp	.+256    	; 0x32da <_Z17handleLinkBusMsgsv+0x8dc>
    31da:	c5 01       	movw	r24, r10
    31dc:	0e 94 84 12 	call	0x2508	; 0x2508 <_Z11only_digitsPc>
    31e0:	88 23       	and	r24, r24
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <_Z17handleLinkBusMsgsv+0x7e8>
    31e4:	7a c0       	rjmp	.+244    	; 0x32da <_Z17handleLinkBusMsgsv+0x8dc>
						{
							time_t f;
							f = rv3028_get_epoch(NULL, g_tempStr);  /* String format "YYMMDDhhmmss" */
    31e6:	b5 01       	movw	r22, r10
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_Z16rv3028_get_epochPbPc>

							if(f > g_current_epoch)
    31f0:	00 91 c9 04 	lds	r16, 0x04C9	; 0x8004c9 <g_current_epoch>
    31f4:	10 91 ca 04 	lds	r17, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    31f8:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    31fc:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    3200:	06 17       	cp	r16, r22
    3202:	17 07       	cpc	r17, r23
    3204:	28 07       	cpc	r18, r24
    3206:	39 07       	cpc	r19, r25
    3208:	08 f0       	brcs	.+2      	; 0x320c <_Z17handleLinkBusMsgsv+0x80e>
    320a:	61 c0       	rjmp	.+194    	; 0x32ce <_Z17handleLinkBusMsgsv+0x8d0>
							{
								if(f > g_event_start_epoch)
    320c:	00 91 c5 04 	lds	r16, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    3210:	10 91 c6 04 	lds	r17, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    3214:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    3218:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    321c:	06 17       	cp	r16, r22
    321e:	17 07       	cpc	r17, r23
    3220:	28 07       	cpc	r18, r24
    3222:	39 07       	cpc	r19, r25
    3224:	08 f0       	brcs	.+2      	; 0x3228 <_Z17handleLinkBusMsgsv+0x82a>
    3226:	4d c0       	rjmp	.+154    	; 0x32c2 <_Z17handleLinkBusMsgsv+0x8c4>
								{
									g_event_finish_epoch = f;
    3228:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <g_event_finish_epoch>
    322c:	70 93 c2 04 	sts	0x04C2, r23	; 0x8004c2 <g_event_finish_epoch+0x1>
    3230:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <g_event_finish_epoch+0x2>
    3234:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <g_event_finish_epoch+0x3>
									ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3238:	41 ec       	ldi	r20, 0xC1	; 193
    323a:	54 e0       	ldi	r21, 0x04	; 4
    323c:	66 e1       	ldi	r22, 0x16	; 22
    323e:	88 ed       	ldi	r24, 0xD8	; 216
    3240:	94 e0       	ldi	r25, 0x04	; 4
    3242:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
									reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3246:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    324a:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    324e:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    3252:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    3256:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    325a:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    325e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    3262:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    3266:	e1 2c       	mov	r14, r1
    3268:	f1 2c       	mov	r15, r1
    326a:	00 ef       	ldi	r16, 0xF0	; 240
    326c:	11 e0       	ldi	r17, 0x01	; 1
    326e:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
									sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3272:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    3276:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    327a:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    327e:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    3282:	bf 93       	push	r27
    3284:	af 93       	push	r26
    3286:	9f 93       	push	r25
    3288:	8f 93       	push	r24
    328a:	85 e5       	ldi	r24, 0x55	; 85
    328c:	92 e0       	ldi	r25, 0x02	; 2
    328e:	9f 93       	push	r25
    3290:	8f 93       	push	r24
    3292:	bf 92       	push	r11
    3294:	af 92       	push	r10
    3296:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
									g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    329a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_Z23clockConfigurationErrorv>
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	81 11       	cpse	r24, r1
    32aa:	07 c0       	rjmp	.+14     	; 0x32ba <_Z17handleLinkBusMsgsv+0x8bc>
    32ac:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_transmissions_disabled>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	91 11       	cpse	r25, r1
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <_Z17handleLinkBusMsgsv+0x8be>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <_Z17handleLinkBusMsgsv+0x8be>
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <g_use_rtc_to_start>
    32c0:	1b c1       	rjmp	.+566    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
								}
								else
								{
									ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    32c2:	66 e0       	ldi	r22, 0x06	; 6
    32c4:	88 ed       	ldi	r24, 0xD8	; 216
    32c6:	94 e0       	ldi	r25, 0x04	; 4
    32c8:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    32cc:	15 c1       	rjmp	.+554    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
								}
							}
							else
							{
								ee_mgr.sendEEPROMString(TextErrFinishInPast);
    32ce:	67 e0       	ldi	r22, 0x07	; 7
    32d0:	88 ed       	ldi	r24, 0xD8	; 216
    32d2:	94 e0       	ldi	r25, 0x04	; 4
    32d4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    32d8:	0f c1       	rjmp	.+542    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
							}
						}
						else
						{
							ee_mgr.sendEEPROMString(TextErrInvalidTime);
    32da:	69 e0       	ldi	r22, 0x09	; 9
    32dc:	88 ed       	ldi	r24, 0xD8	; 216
    32de:	94 e0       	ldi	r25, 0x04	; 4
    32e0:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    32e4:	09 c1       	rjmp	.+530    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
						}
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    32e6:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    32ea:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    32ee:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    32f2:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    32f6:	bf 93       	push	r27
    32f8:	af 93       	push	r26
    32fa:	9f 93       	push	r25
    32fc:	8f 93       	push	r24
    32fe:	85 e5       	ldi	r24, 0x55	; 85
    3300:	92 e0       	ldi	r25, 0x02	; 2
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	bf 92       	push	r11
    3308:	af 92       	push	r10
    330a:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	ef c0       	rjmp	.+478    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    331a:	83 34       	cpi	r24, 0x43	; 67
    331c:	09 f5       	brne	.+66     	; 0x3360 <_Z17handleLinkBusMsgsv+0x962>
				{
					if(lb_buff->fields[FIELD2][0])
    331e:	f6 01       	movw	r30, r12
    3320:	87 89       	ldd	r24, Z+23	; 0x17
    3322:	88 23       	and	r24, r24
    3324:	51 f0       	breq	.+20     	; 0x333a <_Z17handleLinkBusMsgsv+0x93c>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3326:	c6 01       	movw	r24, r12
    3328:	47 96       	adiw	r24, 0x17	; 23
    332a:	0e 94 b6 23 	call	0x476c	; 0x476c <atoi>

						if(c < 512)
    332e:	81 15       	cp	r24, r1
    3330:	f2 e0       	ldi	r31, 0x02	; 2
    3332:	9f 07       	cpc	r25, r31
    3334:	10 f4       	brcc	.+4      	; 0x333a <_Z17handleLinkBusMsgsv+0x93c>
						{
							rv3028_set_offset_RAM(c);
    3336:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    333a:	0e 94 2e 20 	call	0x405c	; 0x405c <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    333e:	9f 93       	push	r25
    3340:	8f 93       	push	r24
    3342:	81 e6       	ldi	r24, 0x61	; 97
    3344:	92 e0       	ldi	r25, 0x02	; 2
    3346:	9f 93       	push	r25
    3348:	8f 93       	push	r24
    334a:	bf 92       	push	r11
    334c:	af 92       	push	r10
    334e:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cc c0       	rjmp	.+408    	; 0x34f8 <_Z17handleLinkBusMsgsv+0xafa>
					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'X')  /* Test only - Send 32 kHz square wave out of RTC */
    3360:	88 35       	cpi	r24, 0x58	; 88
    3362:	21 f4       	brne	.+8      	; 0x336c <_Z17handleLinkBusMsgsv+0x96e>
				{
					EIMSK &= ~(1 << INT0);                  /* Disable INT0 interrupts */
    3364:	e8 98       	cbi	0x1d, 0	; 29
					rv3028_32kHz_sqw();
    3366:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <_Z16rv3028_32kHz_sqwv>
    336a:	b3 c0       	rjmp	.+358    	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
				}
				else
				{
					if(clockConfigurationError())
    336c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_Z23clockConfigurationErrorv>
    3370:	88 23       	and	r24, r24
    3372:	19 f0       	breq	.+6      	; 0x337a <_Z17handleLinkBusMsgsv+0x97c>
					{
						reportConfigErrors();
    3374:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <_Z18reportConfigErrorsv>
    3378:	ac c0       	rjmp	.+344    	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    337a:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    337e:	30 91 c6 04 	lds	r19, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    3382:	40 91 c7 04 	lds	r20, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    3386:	50 91 c8 04 	lds	r21, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    338a:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_current_epoch>
    338e:	70 91 ca 04 	lds	r23, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    3392:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    3396:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    339a:	0f 2e       	mov	r0, r31
    339c:	f7 ed       	ldi	r31, 0xD7	; 215
    339e:	ef 2e       	mov	r14, r31
    33a0:	f1 e0       	ldi	r31, 0x01	; 1
    33a2:	ff 2e       	mov	r15, r31
    33a4:	f0 2d       	mov	r31, r0
    33a6:	04 ee       	ldi	r16, 0xE4	; 228
    33a8:	11 e0       	ldi	r17, 0x01	; 1
    33aa:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    33ae:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    33b2:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    33b6:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    33ba:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    33be:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    33c2:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    33c6:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    33ca:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    33ce:	e1 2c       	mov	r14, r1
    33d0:	f1 2c       	mov	r15, r1
    33d2:	00 ef       	ldi	r16, 0xF0	; 240
    33d4:	11 e0       	ldi	r17, 0x01	; 1
    33d6:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    33da:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_event_start_epoch>
    33de:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_event_start_epoch+0x1>
    33e2:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_event_start_epoch+0x2>
    33e6:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_event_start_epoch+0x3>
    33ea:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_current_epoch>
    33ee:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    33f2:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    33f6:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    33fa:	48 17       	cp	r20, r24
    33fc:	59 07       	cpc	r21, r25
    33fe:	6a 07       	cpc	r22, r26
    3400:	7b 07       	cpc	r23, r27
    3402:	08 f0       	brcs	.+2      	; 0x3406 <_Z17handleLinkBusMsgsv+0xa08>
    3404:	66 c0       	rjmp	.+204    	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3406:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <g_event_finish_epoch>
    340a:	30 91 c2 04 	lds	r19, 0x04C2	; 0x8004c2 <g_event_finish_epoch+0x1>
    340e:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <g_event_finish_epoch+0x2>
    3412:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <g_event_finish_epoch+0x3>
    3416:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_current_epoch>
    341a:	70 91 ca 04 	lds	r23, 0x04CA	; 0x8004ca <g_current_epoch+0x1>
    341e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_current_epoch+0x2>
    3422:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_current_epoch+0x3>
    3426:	08 ef       	ldi	r16, 0xF8	; 248
    3428:	11 e0       	ldi	r17, 0x01	; 1
    342a:	0e 94 4b 13 	call	0x2696	; 0x2696 <_Z14reportTimeTillmmPKcS0_>
    342e:	51 c0       	rjmp	.+162    	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3430:	f6 01       	movw	r30, r12
    3432:	83 81       	ldd	r24, Z+3	; 0x03
    3434:	83 34       	cpi	r24, 0x43	; 67
    3436:	81 f5       	brne	.+96     	; 0x3498 <_Z17handleLinkBusMsgsv+0xa9a>
				{
					if(lb_buff->fields[FIELD2][0])
    3438:	87 89       	ldd	r24, Z+23	; 0x17
    343a:	88 23       	and	r24, r24
    343c:	a9 f0       	breq	.+42     	; 0x3468 <_Z17handleLinkBusMsgsv+0xa6a>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    343e:	c6 01       	movw	r24, r12
    3440:	47 96       	adiw	r24, 0x17	; 23
    3442:	0e 94 b6 23 	call	0x476c	; 0x476c <atoi>

						if((v > -2000) && (v < 2000))
    3446:	9c 01       	movw	r18, r24
    3448:	21 53       	subi	r18, 0x31	; 49
    344a:	38 4f       	sbci	r19, 0xF8	; 248
    344c:	2f 39       	cpi	r18, 0x9F	; 159
    344e:	3f 40       	sbci	r19, 0x0F	; 15
    3450:	58 f4       	brcc	.+22     	; 0x3468 <_Z17handleLinkBusMsgsv+0xa6a>
						{
							g_atmega_temp_calibration = v;
    3452:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_atmega_temp_calibration+0x1>
    3456:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    345a:	41 e1       	ldi	r20, 0x11	; 17
    345c:	51 e0       	ldi	r21, 0x01	; 1
    345e:	61 e1       	ldi	r22, 0x11	; 17
    3460:	88 ed       	ldi	r24, 0xD8	; 216
    3462:	94 e0       	ldi	r25, 0x04	; 4
    3464:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    3468:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_atmega_temp_calibration>
    346c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_atmega_temp_calibration+0x1>
    3470:	9f 93       	push	r25
    3472:	8f 93       	push	r24
    3474:	27 e6       	ldi	r18, 0x67	; 103
    3476:	32 e0       	ldi	r19, 0x02	; 2
    3478:	3f 93       	push	r19
    347a:	2f 93       	push	r18
    347c:	bf 92       	push	r11
    347e:	af 92       	push	r10
    3480:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
					lb_send_string(g_tempStr, FALSE);
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	c5 01       	movw	r24, r10
    3488:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    3498:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <g_temperature>
    349c:	28 2f       	mov	r18, r24
    349e:	08 2e       	mov	r0, r24
    34a0:	00 0c       	add	r0, r0
    34a2:	33 0b       	sbc	r19, r19
    34a4:	3f 93       	push	r19
    34a6:	8f 93       	push	r24
    34a8:	9f 92       	push	r9
    34aa:	8f 92       	push	r8
    34ac:	bf 92       	push	r11
    34ae:	af 92       	push	r10
    34b0:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    34b4:	61 e0       	ldi	r22, 0x01	; 1
    34b6:	c5 01       	movw	r24, r10
    34b8:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
			}
			break;
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	04 c0       	rjmp	.+8      	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>

			default:
			{
				ee_mgr.send_Help();
    34ca:	88 ed       	ldi	r24, 0xD8	; 216
    34cc:	94 e0       	ldi	r25, 0x04	; 4
    34ce:	0e 94 b8 07 	call	0xf70	; 0xf70 <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    34d2:	f6 01       	movw	r30, r12
    34d4:	12 82       	std	Z+2, r1	; 0x02
    34d6:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    34d8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_Z17lb_send_NewPromptv>
    34dc:	c8 ca       	rjmp	.-2672   	; 0x2a6e <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 cb       	rjmp	.-2272   	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    34e2:	83 e1       	ldi	r24, 0x13	; 19
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	8d cb       	rjmp	.-2278   	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    34e8:	87 e0       	ldi	r24, 0x07	; 7
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	8a cb       	rjmp	.-2284   	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    34ee:	84 e1       	ldi	r24, 0x14	; 20
    34f0:	88 cb       	rjmp	.-2288   	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    34f2:	85 e1       	ldi	r24, 0x15	; 21
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	85 cb       	rjmp	.-2294   	; 0x2c02 <_Z17handleLinkBusMsgsv+0x204>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	c5 01       	movw	r24, r10
    34fc:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    3500:	e8 cf       	rjmp	.-48     	; 0x34d2 <_Z17handleLinkBusMsgsv+0xad4>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3502:	28 96       	adiw	r28, 0x08	; 8
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	ef 90       	pop	r14
    351a:	df 90       	pop	r13
    351c:	cf 90       	pop	r12
    351e:	bf 90       	pop	r11
    3520:	af 90       	pop	r10
    3522:	9f 90       	pop	r9
    3524:	8f 90       	pop	r8
    3526:	7f 90       	pop	r7
    3528:	6f 90       	pop	r6
    352a:	5f 90       	pop	r5
    352c:	4f 90       	pop	r4
    352e:	3f 90       	pop	r3
    3530:	2f 90       	pop	r2
    3532:	08 95       	ret

00003534 <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    3534:	cf 93       	push	r28
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    3536:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_Z17handleLinkBusMsgsv>
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
		}
#endif  /* !INIT_EEPROM_ONLY */

	BOOL hold_config_err = g_config_error;
    353a:	c0 91 ac 04 	lds	r28, 0x04AC	; 0x8004ac <g_config_error>
	if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    353e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_Z23clockConfigurationErrorv>
    3542:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <g_config_error>
    3546:	81 11       	cpse	r24, r1
    3548:	06 c0       	rjmp	.+12     	; 0x3556 <_Z4loopv+0x22>
    354a:	cc 23       	and	r28, r28
    354c:	21 f0       	breq	.+8      	; 0x3556 <_Z4loopv+0x22>
	{
		digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	87 e0       	ldi	r24, 0x07	; 7
    3552:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>
	}
}
    3556:	cf 91       	pop	r28
    3558:	08 95       	ret

0000355a <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);                              /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	8d e0       	ldi	r24, 0x0D	; 13
    355e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	8d e0       	ldi	r24, 0x0D	; 13
    3566:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    356a:	61 e0       	ldi	r22, 0x01	; 1
    356c:	87 e0       	ldi	r24, 0x07	; 7
    356e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    3572:	60 e0       	ldi	r22, 0x00	; 0
    3574:	87 e0       	ldi	r24, 0x07	; 7
    3576:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    357a:	61 e0       	ldi	r22, 0x01	; 1
    357c:	8a e0       	ldi	r24, 0x0A	; 10
    357e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	8a e0       	ldi	r24, 0x0A	; 10
    3586:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    358a:	61 e0       	ldi	r22, 0x01	; 1
    358c:	89 e0       	ldi	r24, 0x09	; 9
    358e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    3592:	60 e0       	ldi	r22, 0x00	; 0
    3594:	89 e0       	ldi	r24, 0x09	; 9
    3596:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    359a:	61 e0       	ldi	r22, 0x01	; 1
    359c:	88 e0       	ldi	r24, 0x08	; 8
    359e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	88 e0       	ldi	r24, 0x08	; 8
    35a6:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    35aa:	60 e0       	ldi	r22, 0x00	; 0
    35ac:	84 e1       	ldi	r24, 0x14	; 20
    35ae:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	85 e1       	ldi	r24, 0x15	; 21
    35b6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    35ba:	63 e0       	ldi	r22, 0x03	; 3
    35bc:	8c e0       	ldi	r24, 0x0C	; 12
    35be:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    35c2:	61 e0       	ldi	r22, 0x01	; 1
    35c4:	8b e0       	ldi	r24, 0x0B	; 11
    35c6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	8b e0       	ldi	r24, 0x0B	; 11
    35ce:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    35d2:	63 e0       	ldi	r22, 0x03	; 3
    35d4:	84 e0       	ldi	r24, 0x04	; 4
    35d6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    35da:	61 e0       	ldi	r22, 0x01	; 1
    35dc:	8e e0       	ldi	r24, 0x0E	; 14
    35de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	8f e0       	ldi	r24, 0x0F	; 15
    35e6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	80 e1       	ldi	r24, 0x10	; 16
    35ee:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	81 e1       	ldi	r24, 0x11	; 17
    35f6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    35fa:	61 e0       	ldi	r22, 0x01	; 1
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>

	pinMode(PIN_PWDN, OUTPUT);
    360a:	61 e0       	ldi	r22, 0x01	; 1
    360c:	86 e0       	ldi	r24, 0x06	; 6
    360e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	86 e0       	ldi	r24, 0x06	; 6
    3616:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    361a:	63 e0       	ldi	r22, 0x03	; 3
    361c:	82 e1       	ldi	r24, 0x12	; 18
    361e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    3622:	63 e0       	ldi	r22, 0x03	; 3
    3624:	83 e1       	ldi	r24, 0x13	; 19
    3626:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
    362a:	88 ed       	ldi	r24, 0xD8	; 216
    362c:	94 e0       	ldi	r25, 0x04	; 4
    362e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN13EepromManager20initializeEEPROMVarsEv>
    3632:	c8 2f       	mov	r28, r24
		setUpAudioSampling(true);
#endif

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    3634:	e9 e6       	ldi	r30, 0x69	; 105
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	82 60       	ori	r24, 0x02	; 2
    363c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    363e:	e8 9a       	sbi	0x1d, 0	; 29


	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    3640:	a0 eb       	ldi	r26, 0xB0	; 176
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	1c 92       	st	X, r1
	TCCR2B = 0;
    3646:	e1 eb       	ldi	r30, 0xB1	; 177
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    364c:	8c 91       	ld	r24, X
    364e:	82 60       	ori	r24, 0x02	; 2
    3650:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    3652:	80 81       	ld	r24, Z
    3654:	87 60       	ori	r24, 0x07	; 7
    3656:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    3658:	8c e0       	ldi	r24, 0x0C	; 12
    365a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    365e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    3662:	e6 eb       	ldi	r30, 0xB6	; 182
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8f 7d       	andi	r24, 0xDF	; 223
    366a:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    366c:	e0 e7       	ldi	r30, 0x70	; 112
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    3672:	80 81       	ld	r24, Z
    3674:	84 60       	ori	r24, 0x04	; 4
    3676:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                 /* set entire TCCR1A register to 0 */
    3678:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                 /* same for TCCR1B */
    367c:	e1 e8       	ldi	r30, 0x81	; 129
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	10 82       	st	Z, r1
	TCNT1 = 0;                  /* initialize counter value to 0 */
    3682:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    3686:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 500;                /* For ~1000 Hz tone output */
    368a:	84 ef       	ldi	r24, 0xF4	; 244
    368c:	91 e0       	ldi	r25, 0x01	; 1
    368e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3692:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    3696:	80 81       	ld	r24, Z
    3698:	88 60       	ori	r24, 0x08	; 8
    369a:	80 83       	st	Z, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    369c:	80 81       	ld	r24, Z
    369e:	81 60       	ori	r24, 0x01	; 1
    36a0:	80 83       	st	Z, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    36a2:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    36a4:	84 b5       	in	r24, 0x24	; 36
    36a6:	82 60       	ori	r24, 0x02	; 2
    36a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    36aa:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    36ac:	85 b5       	in	r24, 0x25	; 37
    36ae:	84 60       	ori	r24, 0x04	; 4
    36b0:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    36b2:	8f e2       	ldi	r24, 0x2F	; 47
    36b4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    36b6:	ee e6       	ldi	r30, 0x6E	; 110
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    36bc:	80 81       	ld	r24, Z
    36be:	82 60       	ori	r24, 0x02	; 2
    36c0:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    36c2:	ed e6       	ldi	r30, 0x6D	; 109
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    36c8:	80 e1       	ldi	r24, 0x10	; 16
    36ca:	80 83       	st	Z, r24
	PCICR = 0x00;
    36cc:	e8 e6       	ldi	r30, 0x68	; 104
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    36d2:	84 e0       	ldi	r24, 0x04	; 4
    36d4:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    36d6:	78 94       	sei

	linkbus_init(BAUD);         /* Start the Link Bus serial comms */
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	71 ee       	ldi	r23, 0xE1	; 225
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	0e 94 12 0a 	call	0x1424	; 0x1424 <_Z12linkbus_initm>

#if INIT_EEPROM_ONLY
		if(eepromErr)
    36e4:	cc 23       	and	r28, r28
    36e6:	29 f0       	breq	.+10     	; 0x36f2 <main+0x198>
		{
			lb_send_string((char*)"EEPROM Erase Error!\n", TRUE);
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	88 e7       	ldi	r24, 0x78	; 120
    36ec:	92 e0       	ldi	r25, 0x02	; 2
    36ee:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
		}
		ee_mgr.dumpEEPROMVars();
    36f2:	88 ed       	ldi	r24, 0xD8	; 216
    36f4:	94 e0       	ldi	r25, 0x04	; 4
    36f6:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13EepromManager14dumpEEPROMVarsEv>
		rv3028_1s_sqw();
    36fa:	0e 94 4a 20 	call	0x4094	; 0x4094 <_Z13rv3028_1s_sqwv>
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
		}
		uint8_t result = rv3028_1s_sqw();
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch(NULL, NULL);
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_Z16rv3028_get_epochPbPc>
    370a:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <g_current_epoch>
    370e:	70 93 ca 04 	sts	0x04CA, r23	; 0x8004ca <g_current_epoch+0x1>
    3712:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <g_current_epoch+0x2>
    3716:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <g_current_epoch+0x3>
		lb_send_NewPrompt();
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3722:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_Z23clockConfigurationErrorv>
    3726:	81 11       	cpse	r24, r1
    3728:	07 c0       	rjmp	.+14     	; 0x3738 <main+0x1de>
    372a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_transmissions_disabled>
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	91 11       	cpse	r25, r1
    3732:	03 c0       	rjmp	.+6      	; 0x373a <main+0x1e0>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	01 c0       	rjmp	.+2      	; 0x373a <main+0x1e0>
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    373e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_Z4loopv>
    3742:	fd cf       	rjmp	.-6      	; 0x373e <main+0x1e4>

00003744 <_GLOBAL__sub_I_ee_mgr>:
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    3744:	88 ed       	ldi	r24, 0xD8	; 216
    3746:	94 e0       	ldi	r25, 0x04	; 4
    3748:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN13EepromManagerC1Ev>
    374c:	08 95       	ret

0000374e <_GLOBAL__sub_D_ee_mgr>:
    374e:	88 ed       	ldi	r24, 0xD8	; 216
    3750:	94 e0       	ldi	r25, 0x04	; 4
    3752:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN13EepromManagerD1Ev>
    3756:	08 95       	ret

00003758 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	fc 01       	movw	r30, r24
    375c:	b0 97       	sbiw	r30, 0x20	; 32
    375e:	ed 35       	cpi	r30, 0x5D	; 93
    3760:	f1 05       	cpc	r31, r1
    3762:	08 f0       	brcs	.+2      	; 0x3766 <_Z12getMorseCharc+0xe>
    3764:	e4 c0       	rjmp	.+456    	; 0x392e <_Z12getMorseCharc+0x1d6>
    3766:	ed 56       	subi	r30, 0x6D	; 109
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	0c 94 87 23 	jmp	0x470e	; 0x470e <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    376e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    3770:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3772:	61 e0       	ldi	r22, 0x01	; 1
    3774:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    3776:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    3778:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    377a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    377c:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    377e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    3780:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3782:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    3784:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    3786:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    3788:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    378a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    378c:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    378e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    3790:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    3792:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3794:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3796:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    3798:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    379a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    379c:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    379e:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    37a0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    37a2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    37a4:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    37a6:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    37a8:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    37aa:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    37ac:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    37ae:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    37b0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    37b2:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    37b4:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    37b6:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    37b8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    37ba:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    37bc:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    37be:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    37c0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    37c2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    37c4:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    37c6:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    37c8:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    37ca:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    37cc:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    37ce:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    37d0:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    37d2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    37d4:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    37d6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    37d8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    37da:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    37dc:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    37de:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    37e0:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    37e2:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    37e4:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    37e6:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    37e8:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    37ea:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    37ec:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    37ee:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    37f0:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    37f2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    37f4:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    37f6:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    37f8:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    37fa:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    37fc:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    37fe:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    3800:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3802:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    3804:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    3806:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    3808:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    380a:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    380c:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    380e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    3810:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    3812:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3814:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3816:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    3818:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    381a:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    381c:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    381e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    3820:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    3822:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3824:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3826:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    3828:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    382a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    382c:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    382e:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    3830:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3832:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3834:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    3836:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    3838:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    383a:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    383c:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    383e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    3840:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    3842:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    3844:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    3846:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    3848:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    384a:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    384c:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    384e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    3850:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    3852:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    3854:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    3856:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    3858:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    385a:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    385c:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    385e:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    3860:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3862:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    3864:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    3866:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    3868:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    386a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    386c:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    386e:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    3870:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3872:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    3874:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    3876:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    3878:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    387a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    387c:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    387e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    3880:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    3882:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    3884:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    3886:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    3888:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    388a:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    388c:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    388e:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    3890:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    3892:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    3894:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    3896:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    3898:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    389a:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    389c:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    389e:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    38a0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    38a2:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    38a4:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    38a6:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    38a8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    38aa:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    38ac:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    38ae:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    38b0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    38b2:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    38b4:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    38b6:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    38b8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    38ba:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    38bc:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    38be:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    38c0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    38c2:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    38c4:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    38c6:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    38c8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    38ca:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    38cc:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    38ce:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    38d0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    38d2:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    38d4:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    38d6:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    38d8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    38da:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    38dc:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    38de:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    38e0:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    38e2:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    38e4:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    38e6:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    38e8:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    38ea:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    38ec:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    38ee:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    38f0:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    38f2:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    38f4:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    38f6:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    38f8:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    38fa:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    38fc:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    38fe:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    3900:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    3902:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    3904:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    3906:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    3908:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    390a:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    390c:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    390e:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    3910:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    3912:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    3914:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    3916:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    3918:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    391a:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    391c:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    391e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    3920:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    3922:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    3924:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    3926:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    3928:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    392a:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    392c:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    392e:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    3930:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    3932:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    3934:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    3936:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    3938:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    393a:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    393c:	08 95       	ret

0000393e <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	b1 f1       	breq	.+108    	; 0x39b4 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    3948:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    394c:	61 15       	cp	r22, r1
    394e:	71 05       	cpc	r23, r1
    3950:	21 f0       	breq	.+8      	; 0x395a <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    3952:	db 01       	movw	r26, r22
    3954:	2c 91       	ld	r18, X
    3956:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    395a:	fc 01       	movw	r30, r24
    395c:	20 81       	ld	r18, Z
    395e:	22 23       	and	r18, r18
    3960:	d9 f0       	breq	.+54     	; 0x3998 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    3962:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    3966:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    396a:	80 e2       	ldi	r24, 0x20	; 32
    396c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    3970:	82 2f       	mov	r24, r18
    3972:	0e 94 ac 1b 	call	0x3758	; 0x3758 <_Z12getMorseCharc>
    3976:	60 93 df 04 	sts	0x04DF, r22	; 0x8004df <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    397a:	70 93 e0 04 	sts	0x04E0, r23	; 0x8004e0 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    397e:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    3982:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    3986:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    398a:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    398e:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    3992:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <_ZZ9makeMorsePcPhS0_E15completedString>
    3996:	0a c0       	rjmp	.+20     	; 0x39ac <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    3998:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    399c:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    39a6:	20 97       	sbiw	r28, 0x00	; 0
    39a8:	09 f0       	breq	.+2      	; 0x39ac <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    39aa:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    39ac:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	c0 c0       	rjmp	.+384    	; 0x3b34 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    39b4:	e0 91 e2 04 	lds	r30, 0x04E2	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E3str>
    39b8:	f0 91 e3 04 	lds	r31, 0x04E3	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    39bc:	30 97       	sbiw	r30, 0x00	; 0
    39be:	09 f4       	brne	.+2      	; 0x39c2 <_Z9makeMorsePcPhS0_+0x84>
    39c0:	aa c0       	rjmp	.+340    	; 0x3b16 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    39c2:	61 15       	cp	r22, r1
    39c4:	71 05       	cpc	r23, r1
    39c6:	21 f0       	breq	.+8      	; 0x39d0 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    39c8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ9makeMorsePcPhS0_E6repeat>
    39cc:	db 01       	movw	r26, r22
    39ce:	8c 93       	st	X, r24
		}

		if(completedString)
    39d0:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <_ZZ9makeMorsePcPhS0_E15completedString>
    39d4:	88 23       	and	r24, r24
    39d6:	49 f0       	breq	.+18     	; 0x39ea <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    39d8:	20 97       	sbiw	r28, 0x00	; 0
    39da:	09 f4       	brne	.+2      	; 0x39de <_Z9makeMorsePcPhS0_+0xa0>
    39dc:	a8 c0       	rjmp	.+336    	; 0x3b2e <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    39e2:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	a5 c0       	rjmp	.+330    	; 0x3b34 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    39ea:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
    39ee:	88 23       	and	r24, r24
    39f0:	21 f0       	breq	.+8      	; 0x39fa <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    39f2:	81 50       	subi	r24, 0x01	; 1
    39f4:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
    39f8:	7f c0       	rjmp	.+254    	; 0x3af8 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    39fa:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    39fe:	88 23       	and	r24, r24
    3a00:	81 f0       	breq	.+32     	; 0x3a22 <_Z9makeMorsePcPhS0_+0xe4>
    3a02:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    3a06:	81 11       	cpse	r24, r1
    3a08:	0c c0       	rjmp	.+24     	; 0x3a22 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    3a0a:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    3a0e:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <_ZZ9makeMorsePcPhS0_E10addedSpace>
    3a12:	88 23       	and	r24, r24
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <_Z9makeMorsePcPhS0_+0xda>
    3a16:	70 c0       	rjmp	.+224    	; 0x3af8 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    3a18:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    3a1c:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <_ZZ9makeMorsePcPhS0_E10addedSpace>
    3a20:	6b c0       	rjmp	.+214    	; 0x3af8 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    3a22:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    3a26:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    3a2a:	89 17       	cp	r24, r25
    3a2c:	90 f1       	brcs	.+100    	; 0x3a92 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    3a2e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZZ9makeMorsePcPhS0_E9charIndex>
    3a32:	8f 5f       	subi	r24, 0xFF	; 255
    3a34:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <_ZZ9makeMorsePcPhS0_E9charIndex>
    3a38:	df 01       	movw	r26, r30
    3a3a:	a8 0f       	add	r26, r24
    3a3c:	b1 1d       	adc	r27, r1
    3a3e:	8c 91       	ld	r24, X
    3a40:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    3a44:	81 11       	cpse	r24, r1
    3a46:	19 c0       	rjmp	.+50     	; 0x3a7a <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    3a48:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ9makeMorsePcPhS0_E6repeat>
    3a4c:	88 23       	and	r24, r24
    3a4e:	31 f0       	breq	.+12     	; 0x3a5c <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    3a50:	80 81       	ld	r24, Z
    3a52:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    3a56:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <_ZZ9makeMorsePcPhS0_E9charIndex>
    3a5a:	0f c0       	rjmp	.+30     	; 0x3a7a <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    3a5c:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    3a60:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    3a64:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    3a6e:	20 97       	sbiw	r28, 0x00	; 0
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    3a72:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    3a74:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    3a78:	5d c0       	rjmp	.+186    	; 0x3b34 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    3a7a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
    3a7e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <_Z12getMorseCharc>
    3a82:	60 93 df 04 	sts	0x04DF, r22	; 0x8004df <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    3a86:	70 93 e0 04 	sts	0x04E0, r23	; 0x8004e0 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    3a8a:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    3a8e:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    3a92:	20 91 df 04 	lds	r18, 0x04DF	; 0x8004df <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    3a96:	2d 3f       	cpi	r18, 0xFD	; 253
    3a98:	00 f5       	brcc	.+64     	; 0x3ada <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    3a9a:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    3a9e:	31 e0       	ldi	r19, 0x01	; 1
    3aa0:	34 0f       	add	r19, r20
    3aa2:	30 93 dd 04 	sts	0x04DD, r19	; 0x8004dd <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <_Z9makeMorsePcPhS0_+0x172>
    3aac:	88 0f       	add	r24, r24
    3aae:	99 1f       	adc	r25, r25
    3ab0:	4a 95       	dec	r20
    3ab2:	e2 f7       	brpl	.-8      	; 0x3aac <_Z9makeMorsePcPhS0_+0x16e>
    3ab4:	82 23       	and	r24, r18
    3ab6:	21 f0       	breq	.+8      	; 0x3ac0 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    3ac0:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    3aca:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    3ace:	38 17       	cp	r19, r24
    3ad0:	98 f0       	brcs	.+38     	; 0x3af8 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <_ZZ9makeMorsePcPhS0_E10addedSpace>
    3ad8:	0f c0       	rjmp	.+30     	; 0x3af8 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    3ada:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    3ade:	9f ef       	ldi	r25, 0xFF	; 255
    3ae0:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    3ae4:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    3ae8:	84 30       	cpi	r24, 0x04	; 4
    3aea:	20 f0       	brcs	.+8      	; 0x3af4 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    3aec:	84 50       	subi	r24, 0x04	; 4
    3aee:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
    3af2:	02 c0       	rjmp	.+4      	; 0x3af8 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    3af4:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    3af8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZZ9makeMorsePcPhS0_E1c>
    3afc:	8c 33       	cpi	r24, 0x3C	; 60
    3afe:	31 f4       	brne	.+12     	; 0x3b0c <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    3b06:	20 97       	sbiw	r28, 0x00	; 0
    3b08:	41 f4       	brne	.+16     	; 0x3b1a <_Z9makeMorsePcPhS0_+0x1dc>
    3b0a:	14 c0       	rjmp	.+40     	; 0x3b34 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    3b0c:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    3b10:	20 97       	sbiw	r28, 0x00	; 0
    3b12:	19 f4       	brne	.+6      	; 0x3b1a <_Z9makeMorsePcPhS0_+0x1dc>
    3b14:	09 c0       	rjmp	.+18     	; 0x3b28 <_Z9makeMorsePcPhS0_+0x1ea>
    3b16:	20 97       	sbiw	r28, 0x00	; 0
    3b18:	19 f0       	breq	.+6      	; 0x3b20 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    3b1a:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <_ZZ9makeMorsePcPhS0_E15completedString>
    3b1e:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    3b20:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    3b24:	81 11       	cpse	r24, r1
    3b26:	05 c0       	rjmp	.+10     	; 0x3b32 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    3b28:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    3b2c:	03 c0       	rjmp	.+6      	; 0x3b34 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	01 c0       	rjmp	.+2      	; 0x3b34 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    3b32:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	08 95       	ret

00003b3a <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    3b3a:	cf 92       	push	r12
    3b3c:	df 92       	push	r13
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	cf 93       	push	r28
    3b48:	fc 01       	movw	r30, r24
    3b4a:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    3b4c:	80 81       	ld	r24, Z
		if(!c)
    3b4e:	88 23       	and	r24, r24
    3b50:	c1 f0       	breq	.+48     	; 0x3b82 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    3b52:	8f 01       	movw	r16, r30
    3b54:	0f 5f       	subi	r16, 0xFF	; 255
    3b56:	1f 4f       	sbci	r17, 0xFF	; 255
    3b58:	7f 01       	movw	r14, r30
    3b5a:	94 e1       	ldi	r25, 0x14	; 20
    3b5c:	e9 0e       	add	r14, r25
    3b5e:	f1 1c       	adc	r15, r1
    3b60:	c0 e0       	ldi	r28, 0x00	; 0
    3b62:	05 c0       	rjmp	.+10     	; 0x3b6e <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    3b64:	f8 01       	movw	r30, r16
    3b66:	81 91       	ld	r24, Z+
    3b68:	8f 01       	movw	r16, r30
		if(!c)
    3b6a:	88 23       	and	r24, r24
    3b6c:	59 f0       	breq	.+22     	; 0x3b84 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    3b6e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    3b72:	6d 3f       	cpi	r22, 0xFD	; 253
    3b74:	08 f4       	brcc	.+2      	; 0x3b78 <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    3b76:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    3b78:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    3b7a:	0e 15       	cp	r16, r14
    3b7c:	1f 05       	cpc	r17, r15
    3b7e:	91 f7       	brne	.-28     	; 0x3b64 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    3b80:	01 c0       	rjmp	.+2      	; 0x3b84 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    3b82:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    3b84:	80 eb       	ldi	r24, 0xB0	; 176
    3b86:	94 e0       	ldi	r25, 0x04	; 4
    3b88:	b6 01       	movw	r22, r12
    3b8a:	0e 94 1e 23 	call	0x463c	; 0x463c <__udivmodhi4>
}
    3b8e:	c6 9f       	mul	r28, r22
    3b90:	c0 01       	movw	r24, r0
    3b92:	c7 9f       	mul	r28, r23
    3b94:	90 0d       	add	r25, r0
    3b96:	11 24       	eor	r1, r1
    3b98:	cf 91       	pop	r28
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	ff 90       	pop	r15
    3ba0:	ef 90       	pop	r14
    3ba2:	df 90       	pop	r13
    3ba4:	cf 90       	pop	r12
    3ba6:	08 95       	ret

00003ba8 <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    3ba8:	98 2f       	mov	r25, r24
    3baa:	96 95       	lsr	r25
    3bac:	96 95       	lsr	r25
    3bae:	96 95       	lsr	r25
    3bb0:	9e 71       	andi	r25, 0x1E	; 30
    3bb2:	29 2f       	mov	r18, r25
    3bb4:	22 0f       	add	r18, r18
    3bb6:	22 0f       	add	r18, r18
    3bb8:	92 0f       	add	r25, r18
    3bba:	8f 70       	andi	r24, 0x0F	; 15
    3bbc:	89 0f       	add	r24, r25
    3bbe:	08 95       	ret

00003bc0 <_Z8char2bcdPc>:
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	20 81       	ld	r18, Z
    3bc4:	81 81       	ldd	r24, Z+1	; 0x01
    3bc6:	80 53       	subi	r24, 0x30	; 48
    3bc8:	f0 e1       	ldi	r31, 0x10	; 16
    3bca:	2f 9f       	mul	r18, r31
    3bcc:	80 0d       	add	r24, r0
    3bce:	11 24       	eor	r1, r1
    3bd0:	08 95       	ret

00003bd2 <_Z16rv3028_get_epochPbPc>:
    3bd2:	4f 92       	push	r4
    3bd4:	5f 92       	push	r5
    3bd6:	6f 92       	push	r6
    3bd8:	7f 92       	push	r7
    3bda:	8f 92       	push	r8
    3bdc:	9f 92       	push	r9
    3bde:	af 92       	push	r10
    3be0:	bf 92       	push	r11
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	27 97       	sbiw	r28, 0x07	; 7
    3bf8:	0f b6       	in	r0, 0x3f	; 63
    3bfa:	f8 94       	cli
    3bfc:	de bf       	out	0x3e, r29	; 62
    3bfe:	0f be       	out	0x3f, r0	; 63
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	6c 01       	movw	r12, r24
    3c04:	7b 01       	movw	r14, r22
    3c06:	fe 01       	movw	r30, r28
    3c08:	31 96       	adiw	r30, 0x01	; 1
    3c0a:	87 e0       	ldi	r24, 0x07	; 7
    3c0c:	df 01       	movw	r26, r30
    3c0e:	1d 92       	st	X+, r1
    3c10:	8a 95       	dec	r24
    3c12:	e9 f7       	brne	.-6      	; 0x3c0e <_Z16rv3028_get_epochPbPc+0x3c>
    3c14:	61 15       	cp	r22, r1
    3c16:	71 05       	cpc	r23, r1
    3c18:	f1 f0       	breq	.+60     	; 0x3c56 <_Z16rv3028_get_epochPbPc+0x84>
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	0a 96       	adiw	r24, 0x0a	; 10
    3c1e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_Z8char2bcdPc>
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	c7 01       	movw	r24, r14
    3c26:	08 96       	adiw	r24, 0x08	; 8
    3c28:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_Z8char2bcdPc>
    3c2c:	8a 83       	std	Y+2, r24	; 0x02
    3c2e:	c7 01       	movw	r24, r14
    3c30:	06 96       	adiw	r24, 0x06	; 6
    3c32:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_Z8char2bcdPc>
    3c36:	8b 83       	std	Y+3, r24	; 0x03
    3c38:	c7 01       	movw	r24, r14
    3c3a:	04 96       	adiw	r24, 0x04	; 4
    3c3c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_Z8char2bcdPc>
    3c40:	8d 83       	std	Y+5, r24	; 0x05
    3c42:	c7 01       	movw	r24, r14
    3c44:	02 96       	adiw	r24, 0x02	; 2
    3c46:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_Z8char2bcdPc>
    3c4a:	8e 83       	std	Y+6, r24	; 0x06
    3c4c:	c7 01       	movw	r24, r14
    3c4e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <_Z8char2bcdPc>
    3c52:	8f 83       	std	Y+7, r24	; 0x07
    3c54:	0b c0       	rjmp	.+22     	; 0x3c6c <_Z16rv3028_get_epochPbPc+0x9a>
    3c56:	27 e0       	ldi	r18, 0x07	; 7
    3c58:	ae 01       	movw	r20, r28
    3c5a:	4f 5f       	subi	r20, 0xFF	; 255
    3c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	84 ea       	ldi	r24, 0xA4	; 164
    3c62:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z15i2c_device_readhhPhh>
    3c66:	38 2f       	mov	r19, r24
    3c68:	81 11       	cpse	r24, r1
    3c6a:	9b c0       	rjmp	.+310    	; 0x3da2 <_Z16rv3028_get_epochPbPc+0x1d0>
    3c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6e:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_Z7bcd2dech>
    3c72:	a8 2e       	mov	r10, r24
    3c74:	b1 2c       	mov	r11, r1
    3c76:	45 01       	movw	r8, r10
    3c78:	b0 e3       	ldi	r27, 0x30	; 48
    3c7a:	8b 1a       	sub	r8, r27
    3c7c:	b8 ef       	ldi	r27, 0xF8	; 248
    3c7e:	9b 0a       	sbc	r9, r27
    3c80:	8e 81       	ldd	r24, Y+6	; 0x06
    3c82:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_Z7bcd2dech>
    3c86:	08 2f       	mov	r16, r24
    3c88:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8a:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_Z7bcd2dech>
    3c8e:	78 2e       	mov	r7, r24
    3c90:	02 30       	cpi	r16, 0x02	; 2
    3c92:	68 f0       	brcs	.+26     	; 0x3cae <_Z16rv3028_get_epochPbPc+0xdc>
    3c94:	e1 2c       	mov	r14, r1
    3c96:	f1 2c       	mov	r15, r1
    3c98:	11 e0       	ldi	r17, 0x01	; 1
    3c9a:	61 2f       	mov	r22, r17
    3c9c:	c4 01       	movw	r24, r8
    3c9e:	0e 94 40 02 	call	0x480	; 0x480 <month_length>
    3ca2:	e8 0e       	add	r14, r24
    3ca4:	f1 1c       	adc	r15, r1
    3ca6:	1f 5f       	subi	r17, 0xFF	; 255
    3ca8:	01 13       	cpse	r16, r17
    3caa:	f7 cf       	rjmp	.-18     	; 0x3c9a <_Z16rv3028_get_epochPbPc+0xc8>
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <_Z16rv3028_get_epochPbPc+0xe0>
    3cae:	e1 2c       	mov	r14, r1
    3cb0:	f1 2c       	mov	r15, r1
    3cb2:	87 2d       	mov	r24, r7
    3cb4:	77 0c       	add	r7, r7
    3cb6:	99 0b       	sbc	r25, r25
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	e8 0e       	add	r14, r24
    3cbc:	f9 1e       	adc	r15, r25
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_Z7bcd2dech>
    3cc4:	48 2e       	mov	r4, r24
    3cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc8:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_Z7bcd2dech>
    3ccc:	18 2f       	mov	r17, r24
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_Z7bcd2dech>
    3cd4:	04 2c       	mov	r0, r4
    3cd6:	00 0c       	add	r0, r0
    3cd8:	55 08       	sbc	r5, r5
    3cda:	ec e3       	ldi	r30, 0x3C	; 60
    3cdc:	1e 02       	muls	r17, r30
    3cde:	40 0c       	add	r4, r0
    3ce0:	51 1c       	adc	r5, r1
    3ce2:	11 24       	eor	r1, r1
    3ce4:	05 2c       	mov	r0, r5
    3ce6:	00 0c       	add	r0, r0
    3ce8:	66 08       	sbc	r6, r6
    3cea:	77 08       	sbc	r7, r7
    3cec:	a8 2f       	mov	r26, r24
    3cee:	88 0f       	add	r24, r24
    3cf0:	bb 0b       	sbc	r27, r27
    3cf2:	20 e1       	ldi	r18, 0x10	; 16
    3cf4:	3e e0       	ldi	r19, 0x0E	; 14
    3cf6:	0e 94 9c 23 	call	0x4738	; 0x4738 <__usmulhisi3>
    3cfa:	46 0e       	add	r4, r22
    3cfc:	57 1e       	adc	r5, r23
    3cfe:	68 1e       	adc	r6, r24
    3d00:	79 1e       	adc	r7, r25
    3d02:	d7 01       	movw	r26, r14
    3d04:	20 e8       	ldi	r18, 0x80	; 128
    3d06:	31 e5       	ldi	r19, 0x51	; 81
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	0e 94 ae 23 	call	0x475c	; 0x475c <__mulshisi3>
    3d10:	46 0e       	add	r4, r22
    3d12:	57 1e       	adc	r5, r23
    3d14:	68 1e       	adc	r6, r24
    3d16:	79 1e       	adc	r7, r25
    3d18:	d5 01       	movw	r26, r10
    3d1a:	5e 96       	adiw	r26, 0x1e	; 30
    3d1c:	20 e8       	ldi	r18, 0x80	; 128
    3d1e:	33 e3       	ldi	r19, 0x33	; 51
    3d20:	41 ee       	ldi	r20, 0xE1	; 225
    3d22:	51 e0       	ldi	r21, 0x01	; 1
    3d24:	0e 94 ae 23 	call	0x475c	; 0x475c <__mulshisi3>
    3d28:	46 0e       	add	r4, r22
    3d2a:	57 1e       	adc	r5, r23
    3d2c:	68 1e       	adc	r6, r24
    3d2e:	79 1e       	adc	r7, r25
    3d30:	c5 01       	movw	r24, r10
    3d32:	4f 96       	adiw	r24, 0x1f	; 31
    3d34:	dc 01       	movw	r26, r24
    3d36:	0a f4       	brpl	.+2      	; 0x3d3a <_Z16rv3028_get_epochPbPc+0x168>
    3d38:	13 96       	adiw	r26, 0x03	; 3
    3d3a:	b5 95       	asr	r27
    3d3c:	a7 95       	ror	r26
    3d3e:	b5 95       	asr	r27
    3d40:	a7 95       	ror	r26
    3d42:	20 e8       	ldi	r18, 0x80	; 128
    3d44:	31 e5       	ldi	r19, 0x51	; 81
    3d46:	41 e0       	ldi	r20, 0x01	; 1
    3d48:	50 e0       	ldi	r21, 0x00	; 0
    3d4a:	0e 94 ae 23 	call	0x475c	; 0x475c <__mulshisi3>
    3d4e:	46 0e       	add	r4, r22
    3d50:	57 1e       	adc	r5, r23
    3d52:	68 1e       	adc	r6, r24
    3d54:	79 1e       	adc	r7, r25
    3d56:	c5 01       	movw	r24, r10
    3d58:	8d 59       	subi	r24, 0x9D	; 157
    3d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5c:	64 e6       	ldi	r22, 0x64	; 100
    3d5e:	70 e0       	ldi	r23, 0x00	; 0
    3d60:	0e 94 32 23 	call	0x4664	; 0x4664 <__divmodhi4>
    3d64:	db 01       	movw	r26, r22
    3d66:	20 e8       	ldi	r18, 0x80	; 128
    3d68:	3e ea       	ldi	r19, 0xAE	; 174
    3d6a:	4e ef       	ldi	r20, 0xFE	; 254
    3d6c:	5f ef       	ldi	r21, 0xFF	; 255
    3d6e:	0e 94 ae 23 	call	0x475c	; 0x475c <__mulshisi3>
    3d72:	46 0e       	add	r4, r22
    3d74:	57 1e       	adc	r5, r23
    3d76:	68 1e       	adc	r6, r24
    3d78:	79 1e       	adc	r7, r25
    3d7a:	c5 01       	movw	r24, r10
    3d7c:	81 57       	subi	r24, 0x71	; 113
    3d7e:	9e 4f       	sbci	r25, 0xFE	; 254
    3d80:	60 e9       	ldi	r22, 0x90	; 144
    3d82:	71 e0       	ldi	r23, 0x01	; 1
    3d84:	0e 94 32 23 	call	0x4664	; 0x4664 <__divmodhi4>
    3d88:	db 01       	movw	r26, r22
    3d8a:	20 e8       	ldi	r18, 0x80	; 128
    3d8c:	31 e5       	ldi	r19, 0x51	; 81
    3d8e:	41 e0       	ldi	r20, 0x01	; 1
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	0e 94 ae 23 	call	0x475c	; 0x475c <__mulshisi3>
    3d96:	64 0d       	add	r22, r4
    3d98:	75 1d       	adc	r23, r5
    3d9a:	86 1d       	adc	r24, r6
    3d9c:	97 1d       	adc	r25, r7
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	03 c0       	rjmp	.+6      	; 0x3da8 <_Z16rv3028_get_epochPbPc+0x1d6>
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	cb 01       	movw	r24, r22
    3da8:	c1 14       	cp	r12, r1
    3daa:	d1 04       	cpc	r13, r1
    3dac:	31 f0       	breq	.+12     	; 0x3dba <_Z16rv3028_get_epochPbPc+0x1e8>
    3dae:	21 e0       	ldi	r18, 0x01	; 1
    3db0:	31 11       	cpse	r19, r1
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <_Z16rv3028_get_epochPbPc+0x1e4>
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	d6 01       	movw	r26, r12
    3db8:	2c 93       	st	X, r18
    3dba:	27 96       	adiw	r28, 0x07	; 7
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
    3dc6:	df 91       	pop	r29
    3dc8:	cf 91       	pop	r28
    3dca:	1f 91       	pop	r17
    3dcc:	0f 91       	pop	r16
    3dce:	ff 90       	pop	r15
    3dd0:	ef 90       	pop	r14
    3dd2:	df 90       	pop	r13
    3dd4:	cf 90       	pop	r12
    3dd6:	bf 90       	pop	r11
    3dd8:	af 90       	pop	r10
    3dda:	9f 90       	pop	r9
    3ddc:	8f 90       	pop	r8
    3dde:	7f 90       	pop	r7
    3de0:	6f 90       	pop	r6
    3de2:	5f 90       	pop	r5
    3de4:	4f 90       	pop	r4
    3de6:	08 95       	ret

00003de8 <_Z20rv3028_set_date_timePc>:
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
    3dec:	cd b7       	in	r28, 0x3d	; 61
    3dee:	de b7       	in	r29, 0x3e	; 62
    3df0:	27 97       	sbiw	r28, 0x07	; 7
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	21 e0       	ldi	r18, 0x01	; 1
    3dfe:	2c 83       	std	Y+4, r18	; 0x04
    3e00:	dc 01       	movw	r26, r24
    3e02:	0d 90       	ld	r0, X+
    3e04:	00 20       	and	r0, r0
    3e06:	e9 f7       	brne	.-6      	; 0x3e02 <_Z20rv3028_set_date_timePc+0x1a>
    3e08:	11 97       	sbiw	r26, 0x01	; 1
    3e0a:	a8 1b       	sub	r26, r24
    3e0c:	b9 0b       	sbc	r27, r25
    3e0e:	1c 97       	sbiw	r26, 0x0c	; 12
    3e10:	0c f4       	brge	.+2      	; 0x3e14 <_Z20rv3028_set_date_timePc+0x2c>
    3e12:	3a c0       	rjmp	.+116    	; 0x3e88 <_Z20rv3028_set_date_timePc+0xa0>
    3e14:	fc 01       	movw	r30, r24
    3e16:	92 85       	ldd	r25, Z+10	; 0x0a
    3e18:	83 85       	ldd	r24, Z+11	; 0x0b
    3e1a:	80 53       	subi	r24, 0x30	; 48
    3e1c:	20 e1       	ldi	r18, 0x10	; 16
    3e1e:	92 9f       	mul	r25, r18
    3e20:	80 0d       	add	r24, r0
    3e22:	11 24       	eor	r1, r1
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	90 85       	ldd	r25, Z+8	; 0x08
    3e28:	81 85       	ldd	r24, Z+9	; 0x09
    3e2a:	80 53       	subi	r24, 0x30	; 48
    3e2c:	20 e1       	ldi	r18, 0x10	; 16
    3e2e:	92 9f       	mul	r25, r18
    3e30:	80 0d       	add	r24, r0
    3e32:	11 24       	eor	r1, r1
    3e34:	8a 83       	std	Y+2, r24	; 0x02
    3e36:	96 81       	ldd	r25, Z+6	; 0x06
    3e38:	87 81       	ldd	r24, Z+7	; 0x07
    3e3a:	80 53       	subi	r24, 0x30	; 48
    3e3c:	20 e1       	ldi	r18, 0x10	; 16
    3e3e:	92 9f       	mul	r25, r18
    3e40:	80 0d       	add	r24, r0
    3e42:	11 24       	eor	r1, r1
    3e44:	8b 83       	std	Y+3, r24	; 0x03
    3e46:	94 81       	ldd	r25, Z+4	; 0x04
    3e48:	85 81       	ldd	r24, Z+5	; 0x05
    3e4a:	80 53       	subi	r24, 0x30	; 48
    3e4c:	20 e1       	ldi	r18, 0x10	; 16
    3e4e:	92 9f       	mul	r25, r18
    3e50:	80 0d       	add	r24, r0
    3e52:	11 24       	eor	r1, r1
    3e54:	8d 83       	std	Y+5, r24	; 0x05
    3e56:	92 81       	ldd	r25, Z+2	; 0x02
    3e58:	83 81       	ldd	r24, Z+3	; 0x03
    3e5a:	80 53       	subi	r24, 0x30	; 48
    3e5c:	20 e1       	ldi	r18, 0x10	; 16
    3e5e:	92 9f       	mul	r25, r18
    3e60:	80 0d       	add	r24, r0
    3e62:	11 24       	eor	r1, r1
    3e64:	8e 83       	std	Y+6, r24	; 0x06
    3e66:	90 81       	ld	r25, Z
    3e68:	81 81       	ldd	r24, Z+1	; 0x01
    3e6a:	80 53       	subi	r24, 0x30	; 48
    3e6c:	20 e1       	ldi	r18, 0x10	; 16
    3e6e:	92 9f       	mul	r25, r18
    3e70:	80 0d       	add	r24, r0
    3e72:	11 24       	eor	r1, r1
    3e74:	8f 83       	std	Y+7, r24	; 0x07
    3e76:	27 e0       	ldi	r18, 0x07	; 7
    3e78:	ae 01       	movw	r20, r28
    3e7a:	4f 5f       	subi	r20, 0xFF	; 255
    3e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	84 ea       	ldi	r24, 0xA4	; 164
    3e82:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3e86:	01 c0       	rjmp	.+2      	; 0x3e8a <_Z20rv3028_set_date_timePc+0xa2>
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	27 96       	adiw	r28, 0x07	; 7
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	08 95       	ret

00003e9c <_Z21rv3028_set_offset_RAMj>:
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <_Z21rv3028_set_offset_RAMj+0x6>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	20 e1       	ldi	r18, 0x10	; 16
    3ea8:	2a 83       	std	Y+2, r18	; 0x02
    3eaa:	9c 01       	movw	r18, r24
    3eac:	36 95       	lsr	r19
    3eae:	27 95       	ror	r18
    3eb0:	29 83       	std	Y+1, r18	; 0x01
    3eb2:	80 ff       	sbrs	r24, 0
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <_Z21rv3028_set_offset_RAMj+0x1e>
    3eb6:	80 e9       	ldi	r24, 0x90	; 144
    3eb8:	8a 83       	std	Y+2, r24	; 0x02
    3eba:	22 e0       	ldi	r18, 0x02	; 2
    3ebc:	ae 01       	movw	r20, r28
    3ebe:	4f 5f       	subi	r20, 0xFF	; 255
    3ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec2:	66 e3       	ldi	r22, 0x36	; 54
    3ec4:	84 ea       	ldi	r24, 0xA4	; 164
    3ec6:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	08 95       	ret

00003ed4 <_Z18waitForEEPROMReadyv>:
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	1f 92       	push	r1
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	89 83       	std	Y+1, r24	; 0x01
    3ee2:	21 e0       	ldi	r18, 0x01	; 1
    3ee4:	ae 01       	movw	r20, r28
    3ee6:	4f 5f       	subi	r20, 0xFF	; 255
    3ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eea:	6e e0       	ldi	r22, 0x0E	; 14
    3eec:	84 ea       	ldi	r24, 0xA4	; 164
    3eee:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z15i2c_device_readhhPhh>
    3ef2:	81 11       	cpse	r24, r1
    3ef4:	07 c0       	rjmp	.+14     	; 0x3f04 <_Z18waitForEEPROMReadyv+0x30>
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	80 78       	andi	r24, 0x80	; 128
    3efa:	89 83       	std	Y+1, r24	; 0x01
    3efc:	81 11       	cpse	r24, r1
    3efe:	f1 cf       	rjmp	.-30     	; 0x3ee2 <_Z18waitForEEPROMReadyv+0xe>
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	03 c0       	rjmp	.+6      	; 0x3f0a <_Z18waitForEEPROMReadyv+0x36>
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	88 23       	and	r24, r24
    3f08:	d9 f3       	breq	.-10     	; 0x3f00 <_Z18waitForEEPROMReadyv+0x2c>
    3f0a:	0f 90       	pop	r0
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	08 95       	ret

00003f12 <_Z18writeOneEEPROMBytehhh>:
    3f12:	1f 93       	push	r17
    3f14:	cf 93       	push	r28
    3f16:	df 93       	push	r29
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <_Z18writeOneEEPROMBytehhh+0x8>
    3f1a:	00 d0       	rcall	.+0      	; 0x3f1c <_Z18writeOneEEPROMBytehhh+0xa>
    3f1c:	cd b7       	in	r28, 0x3d	; 61
    3f1e:	de b7       	in	r29, 0x3e	; 62
    3f20:	8b 83       	std	Y+3, r24	; 0x03
    3f22:	16 2f       	mov	r17, r22
    3f24:	4c 83       	std	Y+4, r20	; 0x04
    3f26:	19 82       	std	Y+1, r1	; 0x01
    3f28:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Z18waitForEEPROMReadyv>
    3f2c:	81 11       	cpse	r24, r1
    3f2e:	5e c0       	rjmp	.+188    	; 0x3fec <_Z18writeOneEEPROMBytehhh+0xda>
    3f30:	88 e0       	ldi	r24, 0x08	; 8
    3f32:	89 83       	std	Y+1, r24	; 0x01
    3f34:	21 e0       	ldi	r18, 0x01	; 1
    3f36:	ae 01       	movw	r20, r28
    3f38:	4f 5f       	subi	r20, 0xFF	; 255
    3f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3c:	6f e0       	ldi	r22, 0x0F	; 15
    3f3e:	84 ea       	ldi	r24, 0xA4	; 164
    3f40:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3f44:	81 11       	cpse	r24, r1
    3f46:	54 c0       	rjmp	.+168    	; 0x3ff0 <_Z18writeOneEEPROMBytehhh+0xde>
    3f48:	21 e0       	ldi	r18, 0x01	; 1
    3f4a:	ae 01       	movw	r20, r28
    3f4c:	4e 5f       	subi	r20, 0xFE	; 254
    3f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f50:	6b 81       	ldd	r22, Y+3	; 0x03
    3f52:	84 ea       	ldi	r24, 0xA4	; 164
    3f54:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z15i2c_device_readhhPhh>
    3f58:	91 2f       	mov	r25, r17
    3f5a:	90 95       	com	r25
    3f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5e:	89 23       	and	r24, r25
    3f60:	8a 83       	std	Y+2, r24	; 0x02
    3f62:	9c 81       	ldd	r25, Y+4	; 0x04
    3f64:	19 23       	and	r17, r25
    3f66:	81 2b       	or	r24, r17
    3f68:	8c 83       	std	Y+4, r24	; 0x04
    3f6a:	21 e0       	ldi	r18, 0x01	; 1
    3f6c:	ae 01       	movw	r20, r28
    3f6e:	4d 5f       	subi	r20, 0xFD	; 253
    3f70:	5f 4f       	sbci	r21, 0xFF	; 255
    3f72:	65 e2       	ldi	r22, 0x25	; 37
    3f74:	84 ea       	ldi	r24, 0xA4	; 164
    3f76:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3f7a:	81 11       	cpse	r24, r1
    3f7c:	3b c0       	rjmp	.+118    	; 0x3ff4 <_Z18writeOneEEPROMBytehhh+0xe2>
    3f7e:	21 e0       	ldi	r18, 0x01	; 1
    3f80:	ae 01       	movw	r20, r28
    3f82:	4c 5f       	subi	r20, 0xFC	; 252
    3f84:	5f 4f       	sbci	r21, 0xFF	; 255
    3f86:	66 e2       	ldi	r22, 0x26	; 38
    3f88:	84 ea       	ldi	r24, 0xA4	; 164
    3f8a:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3f8e:	81 11       	cpse	r24, r1
    3f90:	33 c0       	rjmp	.+102    	; 0x3ff8 <_Z18writeOneEEPROMBytehhh+0xe6>
    3f92:	19 82       	std	Y+1, r1	; 0x01
    3f94:	21 e0       	ldi	r18, 0x01	; 1
    3f96:	ae 01       	movw	r20, r28
    3f98:	4f 5f       	subi	r20, 0xFF	; 255
    3f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9c:	67 e2       	ldi	r22, 0x27	; 39
    3f9e:	84 ea       	ldi	r24, 0xA4	; 164
    3fa0:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	2a c0       	rjmp	.+84     	; 0x3ffc <_Z18writeOneEEPROMBytehhh+0xea>
    3fa8:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Z18waitForEEPROMReadyv>
    3fac:	81 11       	cpse	r24, r1
    3fae:	28 c0       	rjmp	.+80     	; 0x4000 <_Z18writeOneEEPROMBytehhh+0xee>
    3fb0:	81 e2       	ldi	r24, 0x21	; 33
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    3fb4:	21 e0       	ldi	r18, 0x01	; 1
    3fb6:	ae 01       	movw	r20, r28
    3fb8:	4f 5f       	subi	r20, 0xFF	; 255
    3fba:	5f 4f       	sbci	r21, 0xFF	; 255
    3fbc:	67 e2       	ldi	r22, 0x27	; 39
    3fbe:	84 ea       	ldi	r24, 0xA4	; 164
    3fc0:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3fc4:	81 11       	cpse	r24, r1
    3fc6:	1e c0       	rjmp	.+60     	; 0x4004 <_Z18writeOneEEPROMBytehhh+0xf2>
    3fc8:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Z18waitForEEPROMReadyv>
    3fcc:	81 11       	cpse	r24, r1
    3fce:	1c c0       	rjmp	.+56     	; 0x4008 <_Z18writeOneEEPROMBytehhh+0xf6>
    3fd0:	19 82       	std	Y+1, r1	; 0x01
    3fd2:	21 e0       	ldi	r18, 0x01	; 1
    3fd4:	ae 01       	movw	r20, r28
    3fd6:	4f 5f       	subi	r20, 0xFF	; 255
    3fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    3fda:	6f e0       	ldi	r22, 0x0F	; 15
    3fdc:	84 ea       	ldi	r24, 0xA4	; 164
    3fde:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
    3fe2:	91 e0       	ldi	r25, 0x01	; 1
    3fe4:	81 11       	cpse	r24, r1
    3fe6:	11 c0       	rjmp	.+34     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0f c0       	rjmp	.+30     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    3fec:	91 e0       	ldi	r25, 0x01	; 1
    3fee:	0d c0       	rjmp	.+26     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    3ff0:	91 e0       	ldi	r25, 0x01	; 1
    3ff2:	0b c0       	rjmp	.+22     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    3ff4:	91 e0       	ldi	r25, 0x01	; 1
    3ff6:	09 c0       	rjmp	.+18     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    3ff8:	91 e0       	ldi	r25, 0x01	; 1
    3ffa:	07 c0       	rjmp	.+14     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    3ffc:	91 e0       	ldi	r25, 0x01	; 1
    3ffe:	05 c0       	rjmp	.+10     	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    4000:	91 e0       	ldi	r25, 0x01	; 1
    4002:	03 c0       	rjmp	.+6      	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    4004:	91 e0       	ldi	r25, 0x01	; 1
    4006:	01 c0       	rjmp	.+2      	; 0x400a <_Z18writeOneEEPROMBytehhh+0xf8>
    4008:	91 e0       	ldi	r25, 0x01	; 1
    400a:	89 2f       	mov	r24, r25
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	08 95       	ret

0000401c <_Z20refreshRAMfromEEPROMv>:

		return( fail);
	}
	
	void refreshRAMfromEEPROM(void)
	{
    401c:	cf 93       	push	r28
    401e:	df 93       	push	r29
    4020:	1f 92       	push	r1
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    4026:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4028:	21 e0       	ldi	r18, 0x01	; 1
    402a:	ae 01       	movw	r20, r28
    402c:	4f 5f       	subi	r20, 0xFF	; 255
    402e:	5f 4f       	sbci	r21, 0xFF	; 255
    4030:	67 e2       	ldi	r22, 0x27	; 39
    4032:	84 ea       	ldi	r24, 0xA4	; 164
    4034:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    4038:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    403c:	82 e1       	ldi	r24, 0x12	; 18
    403e:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4040:	21 e0       	ldi	r18, 0x01	; 1
    4042:	ae 01       	movw	r20, r28
    4044:	4f 5f       	subi	r20, 0xFF	; 255
    4046:	5f 4f       	sbci	r21, 0xFF	; 255
    4048:	67 e2       	ldi	r22, 0x27	; 39
    404a:	84 ea       	ldi	r24, 0xA4	; 164
    404c:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    4050:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Z18waitForEEPROMReadyv>
	}
    4054:	0f 90       	pop	r0
    4056:	df 91       	pop	r29
    4058:	cf 91       	pop	r28
    405a:	08 95       	ret

0000405c <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	00 d0       	rcall	.+0      	; 0x4062 <_Z21rv3028_get_offset_RAMv+0x6>
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;
		
		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    4066:	0e 94 0e 20 	call	0x401c	; 0x401c <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    406a:	22 e0       	ldi	r18, 0x02	; 2
    406c:	ae 01       	movw	r20, r28
    406e:	4f 5f       	subi	r20, 0xFF	; 255
    4070:	5f 4f       	sbci	r21, 0xFF	; 255
    4072:	66 e3       	ldi	r22, 0x36	; 54
    4074:	84 ea       	ldi	r24, 0xA4	; 164
    4076:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    4082:	2a 81       	ldd	r18, Y+2	; 0x02
    4084:	22 23       	and	r18, r18
    4086:	0c f4       	brge	.+2      	; 0x408a <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    4088:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	08 95       	ret

00004094 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    4094:	cf 92       	push	r12
    4096:	df 92       	push	r13
    4098:	ef 92       	push	r14
    409a:	ff 92       	push	r15
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	00 d0       	rcall	.+0      	; 0x40a6 <_Z13rv3028_1s_sqwv+0x12>
    40a6:	1f 92       	push	r1
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    40ac:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    40ae:	1a 82       	std	Y+2, r1	; 0x02
			
#if INIT_EEPROM_ONLY
/* Ensure that no existing RTC RAM mirror settings differ from what is stored in EEPROM
by reading all EEPROM into the RAM mirror now */
			refreshRAMfromEEPROM();
    40b0:	0e 94 0e 20 	call	0x401c	; 0x401c <_Z20refreshRAMfromEEPROMv>
			
			if(waitForEEPROMReady())
    40b4:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_Z18waitForEEPROMReadyv>
    40b8:	81 11       	cpse	r24, r1
    40ba:	65 c0       	rjmp	.+202    	; 0x4186 <_Z13rv3028_1s_sqwv+0xf2>
			{
				return( 1);
			}

			temp = 0xC5;    /* Enable 1Hz Output */
    40bc:	85 ec       	ldi	r24, 0xC5	; 197
    40be:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t mask = 0xFF;    /* 11111111 */
			if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
    40c0:	45 ec       	ldi	r20, 0xC5	; 197
    40c2:	6f ef       	ldi	r22, 0xFF	; 255
    40c4:	85 e3       	ldi	r24, 0x35	; 53
    40c6:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_Z18writeOneEEPROMBytehhh>
    40ca:	81 11       	cpse	r24, r1
    40cc:	5e c0       	rjmp	.+188    	; 0x418a <_Z13rv3028_1s_sqwv+0xf6>
			{
				return( 1);
			}

			temp = 0x04;    /* Enable direct switching mode */
    40ce:	84 e0       	ldi	r24, 0x04	; 4
    40d0:	8a 83       	std	Y+2, r24	; 0x02
			mask = 0x06;    /* 00001100 */
			if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
    40d2:	44 e0       	ldi	r20, 0x04	; 4
    40d4:	66 e0       	ldi	r22, 0x06	; 6
    40d6:	87 e3       	ldi	r24, 0x37	; 55
    40d8:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_Z18writeOneEEPROMBytehhh>
    40dc:	81 11       	cpse	r24, r1
    40de:	57 c0       	rjmp	.+174    	; 0x418e <_Z13rv3028_1s_sqwv+0xfa>
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY			
			
			refreshRAMfromEEPROM();
    40e0:	0e 94 0e 20 	call	0x401c	; 0x401c <_Z20refreshRAMfromEEPROMv>
    40e4:	00 e3       	ldi	r16, 0x30	; 48
    40e6:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t temp_byte;
			uint8_t hold_byte;
			for(temp_byte = 0x30; temp_byte <= 0x37; temp_byte++) 
			{
				i2c_device_read(RV3028_I2C_SLAVE_ADDR, temp_byte, &hold_byte, 1);
				sprintf(g_tempStr, "\n0x%02X = 0x%02X", temp_byte, hold_byte);
    40e8:	0f 2e       	mov	r0, r31
    40ea:	fd e8       	ldi	r31, 0x8D	; 141
    40ec:	cf 2e       	mov	r12, r31
    40ee:	f2 e0       	ldi	r31, 0x02	; 2
    40f0:	df 2e       	mov	r13, r31
    40f2:	f0 2d       	mov	r31, r0
    40f4:	0f 2e       	mov	r0, r31
    40f6:	fe e4       	ldi	r31, 0x4E	; 78
    40f8:	ef 2e       	mov	r14, r31
    40fa:	f4 e0       	ldi	r31, 0x04	; 4
    40fc:	ff 2e       	mov	r15, r31
    40fe:	f0 2d       	mov	r31, r0
#if INIT_EEPROM_ONLY
			uint8_t temp_byte;
			uint8_t hold_byte;
			for(temp_byte = 0x30; temp_byte <= 0x37; temp_byte++) 
			{
				i2c_device_read(RV3028_I2C_SLAVE_ADDR, temp_byte, &hold_byte, 1);
    4100:	21 e0       	ldi	r18, 0x01	; 1
    4102:	ae 01       	movw	r20, r28
    4104:	4d 5f       	subi	r20, 0xFD	; 253
    4106:	5f 4f       	sbci	r21, 0xFF	; 255
    4108:	60 2f       	mov	r22, r16
    410a:	84 ea       	ldi	r24, 0xA4	; 164
    410c:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z15i2c_device_readhhPhh>
				sprintf(g_tempStr, "\n0x%02X = 0x%02X", temp_byte, hold_byte);
    4110:	8b 81       	ldd	r24, Y+3	; 0x03
    4112:	1f 92       	push	r1
    4114:	8f 93       	push	r24
    4116:	1f 93       	push	r17
    4118:	0f 93       	push	r16
    411a:	df 92       	push	r13
    411c:	cf 92       	push	r12
    411e:	ff 92       	push	r15
    4120:	ef 92       	push	r14
    4122:	0e 94 41 24 	call	0x4882	; 0x4882 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4126:	61 e0       	ldi	r22, 0x01	; 1
    4128:	c7 01       	movw	r24, r14
    412a:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14lb_send_stringPch>
    412e:	0f 5f       	subi	r16, 0xFF	; 255
    4130:	1f 4f       	sbci	r17, 0xFF	; 255

/* Debug only */
#if INIT_EEPROM_ONLY
			uint8_t temp_byte;
			uint8_t hold_byte;
			for(temp_byte = 0x30; temp_byte <= 0x37; temp_byte++) 
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	08 33       	cpi	r16, 0x38	; 56
    413e:	11 05       	cpc	r17, r1
    4140:	f9 f6       	brne	.-66     	; 0x4100 <_Z13rv3028_1s_sqwv+0x6c>
				i2c_device_read(RV3028_I2C_SLAVE_ADDR, temp_byte, &hold_byte, 1);
				sprintf(g_tempStr, "\n0x%02X = 0x%02X", temp_byte, hold_byte);
				lb_send_string(g_tempStr, TRUE);
			}
			
			lb_send_NewLine();
    4142:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z15lb_send_NewLinev>
			lb_send_NewPrompt();
    4146:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_Z17lb_send_NewPromptv>
			
			g_tempStr[0] = '\0';
    414a:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <g_tempStr>
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	81 11       	cpse	r24, r1
    4152:	0c c0       	rjmp	.+24     	; 0x416c <_Z13rv3028_1s_sqwv+0xd8>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    4154:	21 e0       	ldi	r18, 0x01	; 1
    4156:	ae 01       	movw	r20, r28
    4158:	4f 5f       	subi	r20, 0xFF	; 255
    415a:	5f 4f       	sbci	r21, 0xFF	; 255
    415c:	6e e0       	ldi	r22, 0x0E	; 14
    415e:	84 ea       	ldi	r24, 0xA4	; 164
    4160:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	8f 76       	andi	r24, 0x6F	; 111
    4168:	89 83       	std	Y+1, r24	; 0x01
    416a:	02 c0       	rjmp	.+4      	; 0x4170 <_Z13rv3028_1s_sqwv+0xdc>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    416c:	80 e8       	ldi	r24, 0x80	; 128
    416e:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    4170:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    4172:	21 e0       	ldi	r18, 0x01	; 1
    4174:	ae 01       	movw	r20, r28
    4176:	4e 5f       	subi	r20, 0xFE	; 254
    4178:	5f 4f       	sbci	r21, 0xFF	; 255
    417a:	6e e0       	ldi	r22, 0x0E	; 14
    417c:	84 ea       	ldi	r24, 0xA4	; 164
    417e:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>

			return(status);
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	05 c0       	rjmp	.+10     	; 0x4190 <_Z13rv3028_1s_sqwv+0xfc>
by reading all EEPROM into the RAM mirror now */
			refreshRAMfromEEPROM();
			
			if(waitForEEPROMReady())
			{
				return( 1);
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <_Z13rv3028_1s_sqwv+0xfc>

			temp = 0xC5;    /* Enable 1Hz Output */
			uint8_t mask = 0xFF;    /* 11111111 */
			if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
			{
				return( 1);
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	01 c0       	rjmp	.+2      	; 0x4190 <_Z13rv3028_1s_sqwv+0xfc>

			temp = 0x04;    /* Enable direct switching mode */
			mask = 0x06;    /* 00001100 */
			if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
			{
				return( 1);
    418e:	81 e0       	ldi	r24, 0x01	; 1

			temp = 0x00;    /* Clear status flags */
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);

			return(status);
		}
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	1f 91       	pop	r17
    419c:	0f 91       	pop	r16
    419e:	ff 90       	pop	r15
    41a0:	ef 90       	pop	r14
    41a2:	df 90       	pop	r13
    41a4:	cf 90       	pop	r12
    41a6:	08 95       	ret

000041a8 <_Z16rv3028_32kHz_sqwv>:


#endif  /* INIT_EEPROM_ONLY */

	void rv3028_32kHz_sqw(void)
	{
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	1f 92       	push	r1
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
		/* Just set RAM value */
		uint8_t byte = 0xC0;    /* FD = 32.768 kHz */
    41b2:	80 ec       	ldi	r24, 0xC0	; 192
    41b4:	89 83       	std	Y+1, r24	; 0x01

		i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_CLKOUT, &byte, 1);
    41b6:	21 e0       	ldi	r18, 0x01	; 1
    41b8:	ae 01       	movw	r20, r28
    41ba:	4f 5f       	subi	r20, 0xFF	; 255
    41bc:	5f 4f       	sbci	r21, 0xFF	; 255
    41be:	65 e3       	ldi	r22, 0x35	; 53
    41c0:	84 ea       	ldi	r24, 0xA4	; 164
    41c2:	0e 94 45 08 	call	0x108a	; 0x108a <_Z16i2c_device_writehhPhh>
	}
    41c6:	0f 90       	pop	r0
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	08 95       	ret

000041ce <__subsf3>:
    41ce:	50 58       	subi	r21, 0x80	; 128

000041d0 <__addsf3>:
    41d0:	bb 27       	eor	r27, r27
    41d2:	aa 27       	eor	r26, r26
    41d4:	0e 94 ff 20 	call	0x41fe	; 0x41fe <__addsf3x>
    41d8:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <__fp_round>
    41dc:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fp_pscA>
    41e0:	38 f0       	brcs	.+14     	; 0x41f0 <__addsf3+0x20>
    41e2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__fp_pscB>
    41e6:	20 f0       	brcs	.+8      	; 0x41f0 <__addsf3+0x20>
    41e8:	39 f4       	brne	.+14     	; 0x41f8 <__addsf3+0x28>
    41ea:	9f 3f       	cpi	r25, 0xFF	; 255
    41ec:	19 f4       	brne	.+6      	; 0x41f4 <__addsf3+0x24>
    41ee:	26 f4       	brtc	.+8      	; 0x41f8 <__addsf3+0x28>
    41f0:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__fp_nan>
    41f4:	0e f4       	brtc	.+2      	; 0x41f8 <__addsf3+0x28>
    41f6:	e0 95       	com	r30
    41f8:	e7 fb       	bst	r30, 7
    41fa:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__fp_inf>

000041fe <__addsf3x>:
    41fe:	e9 2f       	mov	r30, r25
    4200:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__fp_split3>
    4204:	58 f3       	brcs	.-42     	; 0x41dc <__addsf3+0xc>
    4206:	ba 17       	cp	r27, r26
    4208:	62 07       	cpc	r22, r18
    420a:	73 07       	cpc	r23, r19
    420c:	84 07       	cpc	r24, r20
    420e:	95 07       	cpc	r25, r21
    4210:	20 f0       	brcs	.+8      	; 0x421a <__addsf3x+0x1c>
    4212:	79 f4       	brne	.+30     	; 0x4232 <__addsf3x+0x34>
    4214:	a6 f5       	brtc	.+104    	; 0x427e <__addsf3x+0x80>
    4216:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_zero>
    421a:	0e f4       	brtc	.+2      	; 0x421e <__addsf3x+0x20>
    421c:	e0 95       	com	r30
    421e:	0b 2e       	mov	r0, r27
    4220:	ba 2f       	mov	r27, r26
    4222:	a0 2d       	mov	r26, r0
    4224:	0b 01       	movw	r0, r22
    4226:	b9 01       	movw	r22, r18
    4228:	90 01       	movw	r18, r0
    422a:	0c 01       	movw	r0, r24
    422c:	ca 01       	movw	r24, r20
    422e:	a0 01       	movw	r20, r0
    4230:	11 24       	eor	r1, r1
    4232:	ff 27       	eor	r31, r31
    4234:	59 1b       	sub	r21, r25
    4236:	99 f0       	breq	.+38     	; 0x425e <__addsf3x+0x60>
    4238:	59 3f       	cpi	r21, 0xF9	; 249
    423a:	50 f4       	brcc	.+20     	; 0x4250 <__addsf3x+0x52>
    423c:	50 3e       	cpi	r21, 0xE0	; 224
    423e:	68 f1       	brcs	.+90     	; 0x429a <__addsf3x+0x9c>
    4240:	1a 16       	cp	r1, r26
    4242:	f0 40       	sbci	r31, 0x00	; 0
    4244:	a2 2f       	mov	r26, r18
    4246:	23 2f       	mov	r18, r19
    4248:	34 2f       	mov	r19, r20
    424a:	44 27       	eor	r20, r20
    424c:	58 5f       	subi	r21, 0xF8	; 248
    424e:	f3 cf       	rjmp	.-26     	; 0x4236 <__addsf3x+0x38>
    4250:	46 95       	lsr	r20
    4252:	37 95       	ror	r19
    4254:	27 95       	ror	r18
    4256:	a7 95       	ror	r26
    4258:	f0 40       	sbci	r31, 0x00	; 0
    425a:	53 95       	inc	r21
    425c:	c9 f7       	brne	.-14     	; 0x4250 <__addsf3x+0x52>
    425e:	7e f4       	brtc	.+30     	; 0x427e <__addsf3x+0x80>
    4260:	1f 16       	cp	r1, r31
    4262:	ba 0b       	sbc	r27, r26
    4264:	62 0b       	sbc	r22, r18
    4266:	73 0b       	sbc	r23, r19
    4268:	84 0b       	sbc	r24, r20
    426a:	ba f0       	brmi	.+46     	; 0x429a <__addsf3x+0x9c>
    426c:	91 50       	subi	r25, 0x01	; 1
    426e:	a1 f0       	breq	.+40     	; 0x4298 <__addsf3x+0x9a>
    4270:	ff 0f       	add	r31, r31
    4272:	bb 1f       	adc	r27, r27
    4274:	66 1f       	adc	r22, r22
    4276:	77 1f       	adc	r23, r23
    4278:	88 1f       	adc	r24, r24
    427a:	c2 f7       	brpl	.-16     	; 0x426c <__addsf3x+0x6e>
    427c:	0e c0       	rjmp	.+28     	; 0x429a <__addsf3x+0x9c>
    427e:	ba 0f       	add	r27, r26
    4280:	62 1f       	adc	r22, r18
    4282:	73 1f       	adc	r23, r19
    4284:	84 1f       	adc	r24, r20
    4286:	48 f4       	brcc	.+18     	; 0x429a <__addsf3x+0x9c>
    4288:	87 95       	ror	r24
    428a:	77 95       	ror	r23
    428c:	67 95       	ror	r22
    428e:	b7 95       	ror	r27
    4290:	f7 95       	ror	r31
    4292:	9e 3f       	cpi	r25, 0xFE	; 254
    4294:	08 f0       	brcs	.+2      	; 0x4298 <__addsf3x+0x9a>
    4296:	b0 cf       	rjmp	.-160    	; 0x41f8 <__addsf3+0x28>
    4298:	93 95       	inc	r25
    429a:	88 0f       	add	r24, r24
    429c:	08 f0       	brcs	.+2      	; 0x42a0 <__addsf3x+0xa2>
    429e:	99 27       	eor	r25, r25
    42a0:	ee 0f       	add	r30, r30
    42a2:	97 95       	ror	r25
    42a4:	87 95       	ror	r24
    42a6:	08 95       	ret

000042a8 <__fixunssfsi>:
    42a8:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__fp_splitA>
    42ac:	88 f0       	brcs	.+34     	; 0x42d0 <__fixunssfsi+0x28>
    42ae:	9f 57       	subi	r25, 0x7F	; 127
    42b0:	98 f0       	brcs	.+38     	; 0x42d8 <__fixunssfsi+0x30>
    42b2:	b9 2f       	mov	r27, r25
    42b4:	99 27       	eor	r25, r25
    42b6:	b7 51       	subi	r27, 0x17	; 23
    42b8:	b0 f0       	brcs	.+44     	; 0x42e6 <__fixunssfsi+0x3e>
    42ba:	e1 f0       	breq	.+56     	; 0x42f4 <__fixunssfsi+0x4c>
    42bc:	66 0f       	add	r22, r22
    42be:	77 1f       	adc	r23, r23
    42c0:	88 1f       	adc	r24, r24
    42c2:	99 1f       	adc	r25, r25
    42c4:	1a f0       	brmi	.+6      	; 0x42cc <__fixunssfsi+0x24>
    42c6:	ba 95       	dec	r27
    42c8:	c9 f7       	brne	.-14     	; 0x42bc <__fixunssfsi+0x14>
    42ca:	14 c0       	rjmp	.+40     	; 0x42f4 <__fixunssfsi+0x4c>
    42cc:	b1 30       	cpi	r27, 0x01	; 1
    42ce:	91 f0       	breq	.+36     	; 0x42f4 <__fixunssfsi+0x4c>
    42d0:	0e 94 0a 22 	call	0x4414	; 0x4414 <__fp_zero>
    42d4:	b1 e0       	ldi	r27, 0x01	; 1
    42d6:	08 95       	ret
    42d8:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_zero>
    42dc:	67 2f       	mov	r22, r23
    42de:	78 2f       	mov	r23, r24
    42e0:	88 27       	eor	r24, r24
    42e2:	b8 5f       	subi	r27, 0xF8	; 248
    42e4:	39 f0       	breq	.+14     	; 0x42f4 <__fixunssfsi+0x4c>
    42e6:	b9 3f       	cpi	r27, 0xF9	; 249
    42e8:	cc f3       	brlt	.-14     	; 0x42dc <__fixunssfsi+0x34>
    42ea:	86 95       	lsr	r24
    42ec:	77 95       	ror	r23
    42ee:	67 95       	ror	r22
    42f0:	b3 95       	inc	r27
    42f2:	d9 f7       	brne	.-10     	; 0x42ea <__fixunssfsi+0x42>
    42f4:	3e f4       	brtc	.+14     	; 0x4304 <__fixunssfsi+0x5c>
    42f6:	90 95       	com	r25
    42f8:	80 95       	com	r24
    42fa:	70 95       	com	r23
    42fc:	61 95       	neg	r22
    42fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4300:	8f 4f       	sbci	r24, 0xFF	; 255
    4302:	9f 4f       	sbci	r25, 0xFF	; 255
    4304:	08 95       	ret

00004306 <__floatunsisf>:
    4306:	e8 94       	clt
    4308:	09 c0       	rjmp	.+18     	; 0x431c <__floatsisf+0x12>

0000430a <__floatsisf>:
    430a:	97 fb       	bst	r25, 7
    430c:	3e f4       	brtc	.+14     	; 0x431c <__floatsisf+0x12>
    430e:	90 95       	com	r25
    4310:	80 95       	com	r24
    4312:	70 95       	com	r23
    4314:	61 95       	neg	r22
    4316:	7f 4f       	sbci	r23, 0xFF	; 255
    4318:	8f 4f       	sbci	r24, 0xFF	; 255
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	99 23       	and	r25, r25
    431e:	a9 f0       	breq	.+42     	; 0x434a <__floatsisf+0x40>
    4320:	f9 2f       	mov	r31, r25
    4322:	96 e9       	ldi	r25, 0x96	; 150
    4324:	bb 27       	eor	r27, r27
    4326:	93 95       	inc	r25
    4328:	f6 95       	lsr	r31
    432a:	87 95       	ror	r24
    432c:	77 95       	ror	r23
    432e:	67 95       	ror	r22
    4330:	b7 95       	ror	r27
    4332:	f1 11       	cpse	r31, r1
    4334:	f8 cf       	rjmp	.-16     	; 0x4326 <__floatsisf+0x1c>
    4336:	fa f4       	brpl	.+62     	; 0x4376 <__floatsisf+0x6c>
    4338:	bb 0f       	add	r27, r27
    433a:	11 f4       	brne	.+4      	; 0x4340 <__floatsisf+0x36>
    433c:	60 ff       	sbrs	r22, 0
    433e:	1b c0       	rjmp	.+54     	; 0x4376 <__floatsisf+0x6c>
    4340:	6f 5f       	subi	r22, 0xFF	; 255
    4342:	7f 4f       	sbci	r23, 0xFF	; 255
    4344:	8f 4f       	sbci	r24, 0xFF	; 255
    4346:	9f 4f       	sbci	r25, 0xFF	; 255
    4348:	16 c0       	rjmp	.+44     	; 0x4376 <__floatsisf+0x6c>
    434a:	88 23       	and	r24, r24
    434c:	11 f0       	breq	.+4      	; 0x4352 <__floatsisf+0x48>
    434e:	96 e9       	ldi	r25, 0x96	; 150
    4350:	11 c0       	rjmp	.+34     	; 0x4374 <__floatsisf+0x6a>
    4352:	77 23       	and	r23, r23
    4354:	21 f0       	breq	.+8      	; 0x435e <__floatsisf+0x54>
    4356:	9e e8       	ldi	r25, 0x8E	; 142
    4358:	87 2f       	mov	r24, r23
    435a:	76 2f       	mov	r23, r22
    435c:	05 c0       	rjmp	.+10     	; 0x4368 <__floatsisf+0x5e>
    435e:	66 23       	and	r22, r22
    4360:	71 f0       	breq	.+28     	; 0x437e <__floatsisf+0x74>
    4362:	96 e8       	ldi	r25, 0x86	; 134
    4364:	86 2f       	mov	r24, r22
    4366:	70 e0       	ldi	r23, 0x00	; 0
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	2a f0       	brmi	.+10     	; 0x4376 <__floatsisf+0x6c>
    436c:	9a 95       	dec	r25
    436e:	66 0f       	add	r22, r22
    4370:	77 1f       	adc	r23, r23
    4372:	88 1f       	adc	r24, r24
    4374:	da f7       	brpl	.-10     	; 0x436c <__floatsisf+0x62>
    4376:	88 0f       	add	r24, r24
    4378:	96 95       	lsr	r25
    437a:	87 95       	ror	r24
    437c:	97 f9       	bld	r25, 7
    437e:	08 95       	ret

00004380 <__fp_inf>:
    4380:	97 f9       	bld	r25, 7
    4382:	9f 67       	ori	r25, 0x7F	; 127
    4384:	80 e8       	ldi	r24, 0x80	; 128
    4386:	70 e0       	ldi	r23, 0x00	; 0
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	08 95       	ret

0000438c <__fp_nan>:
    438c:	9f ef       	ldi	r25, 0xFF	; 255
    438e:	80 ec       	ldi	r24, 0xC0	; 192
    4390:	08 95       	ret

00004392 <__fp_pscA>:
    4392:	00 24       	eor	r0, r0
    4394:	0a 94       	dec	r0
    4396:	16 16       	cp	r1, r22
    4398:	17 06       	cpc	r1, r23
    439a:	18 06       	cpc	r1, r24
    439c:	09 06       	cpc	r0, r25
    439e:	08 95       	ret

000043a0 <__fp_pscB>:
    43a0:	00 24       	eor	r0, r0
    43a2:	0a 94       	dec	r0
    43a4:	12 16       	cp	r1, r18
    43a6:	13 06       	cpc	r1, r19
    43a8:	14 06       	cpc	r1, r20
    43aa:	05 06       	cpc	r0, r21
    43ac:	08 95       	ret

000043ae <__fp_round>:
    43ae:	09 2e       	mov	r0, r25
    43b0:	03 94       	inc	r0
    43b2:	00 0c       	add	r0, r0
    43b4:	11 f4       	brne	.+4      	; 0x43ba <__fp_round+0xc>
    43b6:	88 23       	and	r24, r24
    43b8:	52 f0       	brmi	.+20     	; 0x43ce <__fp_round+0x20>
    43ba:	bb 0f       	add	r27, r27
    43bc:	40 f4       	brcc	.+16     	; 0x43ce <__fp_round+0x20>
    43be:	bf 2b       	or	r27, r31
    43c0:	11 f4       	brne	.+4      	; 0x43c6 <__fp_round+0x18>
    43c2:	60 ff       	sbrs	r22, 0
    43c4:	04 c0       	rjmp	.+8      	; 0x43ce <__fp_round+0x20>
    43c6:	6f 5f       	subi	r22, 0xFF	; 255
    43c8:	7f 4f       	sbci	r23, 0xFF	; 255
    43ca:	8f 4f       	sbci	r24, 0xFF	; 255
    43cc:	9f 4f       	sbci	r25, 0xFF	; 255
    43ce:	08 95       	ret

000043d0 <__fp_split3>:
    43d0:	57 fd       	sbrc	r21, 7
    43d2:	90 58       	subi	r25, 0x80	; 128
    43d4:	44 0f       	add	r20, r20
    43d6:	55 1f       	adc	r21, r21
    43d8:	59 f0       	breq	.+22     	; 0x43f0 <__fp_splitA+0x10>
    43da:	5f 3f       	cpi	r21, 0xFF	; 255
    43dc:	71 f0       	breq	.+28     	; 0x43fa <__fp_splitA+0x1a>
    43de:	47 95       	ror	r20

000043e0 <__fp_splitA>:
    43e0:	88 0f       	add	r24, r24
    43e2:	97 fb       	bst	r25, 7
    43e4:	99 1f       	adc	r25, r25
    43e6:	61 f0       	breq	.+24     	; 0x4400 <__fp_splitA+0x20>
    43e8:	9f 3f       	cpi	r25, 0xFF	; 255
    43ea:	79 f0       	breq	.+30     	; 0x440a <__fp_splitA+0x2a>
    43ec:	87 95       	ror	r24
    43ee:	08 95       	ret
    43f0:	12 16       	cp	r1, r18
    43f2:	13 06       	cpc	r1, r19
    43f4:	14 06       	cpc	r1, r20
    43f6:	55 1f       	adc	r21, r21
    43f8:	f2 cf       	rjmp	.-28     	; 0x43de <__fp_split3+0xe>
    43fa:	46 95       	lsr	r20
    43fc:	f1 df       	rcall	.-30     	; 0x43e0 <__fp_splitA>
    43fe:	08 c0       	rjmp	.+16     	; 0x4410 <__fp_splitA+0x30>
    4400:	16 16       	cp	r1, r22
    4402:	17 06       	cpc	r1, r23
    4404:	18 06       	cpc	r1, r24
    4406:	99 1f       	adc	r25, r25
    4408:	f1 cf       	rjmp	.-30     	; 0x43ec <__fp_splitA+0xc>
    440a:	86 95       	lsr	r24
    440c:	71 05       	cpc	r23, r1
    440e:	61 05       	cpc	r22, r1
    4410:	08 94       	sec
    4412:	08 95       	ret

00004414 <__fp_zero>:
    4414:	e8 94       	clt

00004416 <__fp_szero>:
    4416:	bb 27       	eor	r27, r27
    4418:	66 27       	eor	r22, r22
    441a:	77 27       	eor	r23, r23
    441c:	cb 01       	movw	r24, r22
    441e:	97 f9       	bld	r25, 7
    4420:	08 95       	ret

00004422 <__mulsf3>:
    4422:	0e 94 24 22 	call	0x4448	; 0x4448 <__mulsf3x>
    4426:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <__fp_round>
    442a:	0e 94 c9 21 	call	0x4392	; 0x4392 <__fp_pscA>
    442e:	38 f0       	brcs	.+14     	; 0x443e <__mulsf3+0x1c>
    4430:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__fp_pscB>
    4434:	20 f0       	brcs	.+8      	; 0x443e <__mulsf3+0x1c>
    4436:	95 23       	and	r25, r21
    4438:	11 f0       	breq	.+4      	; 0x443e <__mulsf3+0x1c>
    443a:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__fp_inf>
    443e:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__fp_nan>
    4442:	11 24       	eor	r1, r1
    4444:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__fp_szero>

00004448 <__mulsf3x>:
    4448:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__fp_split3>
    444c:	70 f3       	brcs	.-36     	; 0x442a <__mulsf3+0x8>

0000444e <__mulsf3_pse>:
    444e:	95 9f       	mul	r25, r21
    4450:	c1 f3       	breq	.-16     	; 0x4442 <__mulsf3+0x20>
    4452:	95 0f       	add	r25, r21
    4454:	50 e0       	ldi	r21, 0x00	; 0
    4456:	55 1f       	adc	r21, r21
    4458:	62 9f       	mul	r22, r18
    445a:	f0 01       	movw	r30, r0
    445c:	72 9f       	mul	r23, r18
    445e:	bb 27       	eor	r27, r27
    4460:	f0 0d       	add	r31, r0
    4462:	b1 1d       	adc	r27, r1
    4464:	63 9f       	mul	r22, r19
    4466:	aa 27       	eor	r26, r26
    4468:	f0 0d       	add	r31, r0
    446a:	b1 1d       	adc	r27, r1
    446c:	aa 1f       	adc	r26, r26
    446e:	64 9f       	mul	r22, r20
    4470:	66 27       	eor	r22, r22
    4472:	b0 0d       	add	r27, r0
    4474:	a1 1d       	adc	r26, r1
    4476:	66 1f       	adc	r22, r22
    4478:	82 9f       	mul	r24, r18
    447a:	22 27       	eor	r18, r18
    447c:	b0 0d       	add	r27, r0
    447e:	a1 1d       	adc	r26, r1
    4480:	62 1f       	adc	r22, r18
    4482:	73 9f       	mul	r23, r19
    4484:	b0 0d       	add	r27, r0
    4486:	a1 1d       	adc	r26, r1
    4488:	62 1f       	adc	r22, r18
    448a:	83 9f       	mul	r24, r19
    448c:	a0 0d       	add	r26, r0
    448e:	61 1d       	adc	r22, r1
    4490:	22 1f       	adc	r18, r18
    4492:	74 9f       	mul	r23, r20
    4494:	33 27       	eor	r19, r19
    4496:	a0 0d       	add	r26, r0
    4498:	61 1d       	adc	r22, r1
    449a:	23 1f       	adc	r18, r19
    449c:	84 9f       	mul	r24, r20
    449e:	60 0d       	add	r22, r0
    44a0:	21 1d       	adc	r18, r1
    44a2:	82 2f       	mov	r24, r18
    44a4:	76 2f       	mov	r23, r22
    44a6:	6a 2f       	mov	r22, r26
    44a8:	11 24       	eor	r1, r1
    44aa:	9f 57       	subi	r25, 0x7F	; 127
    44ac:	50 40       	sbci	r21, 0x00	; 0
    44ae:	9a f0       	brmi	.+38     	; 0x44d6 <__mulsf3_pse+0x88>
    44b0:	f1 f0       	breq	.+60     	; 0x44ee <__mulsf3_pse+0xa0>
    44b2:	88 23       	and	r24, r24
    44b4:	4a f0       	brmi	.+18     	; 0x44c8 <__mulsf3_pse+0x7a>
    44b6:	ee 0f       	add	r30, r30
    44b8:	ff 1f       	adc	r31, r31
    44ba:	bb 1f       	adc	r27, r27
    44bc:	66 1f       	adc	r22, r22
    44be:	77 1f       	adc	r23, r23
    44c0:	88 1f       	adc	r24, r24
    44c2:	91 50       	subi	r25, 0x01	; 1
    44c4:	50 40       	sbci	r21, 0x00	; 0
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <__mulsf3_pse+0x64>
    44c8:	9e 3f       	cpi	r25, 0xFE	; 254
    44ca:	51 05       	cpc	r21, r1
    44cc:	80 f0       	brcs	.+32     	; 0x44ee <__mulsf3_pse+0xa0>
    44ce:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__fp_inf>
    44d2:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__fp_szero>
    44d6:	5f 3f       	cpi	r21, 0xFF	; 255
    44d8:	e4 f3       	brlt	.-8      	; 0x44d2 <__mulsf3_pse+0x84>
    44da:	98 3e       	cpi	r25, 0xE8	; 232
    44dc:	d4 f3       	brlt	.-12     	; 0x44d2 <__mulsf3_pse+0x84>
    44de:	86 95       	lsr	r24
    44e0:	77 95       	ror	r23
    44e2:	67 95       	ror	r22
    44e4:	b7 95       	ror	r27
    44e6:	f7 95       	ror	r31
    44e8:	e7 95       	ror	r30
    44ea:	9f 5f       	subi	r25, 0xFF	; 255
    44ec:	c1 f7       	brne	.-16     	; 0x44de <__mulsf3_pse+0x90>
    44ee:	fe 2b       	or	r31, r30
    44f0:	88 0f       	add	r24, r24
    44f2:	91 1d       	adc	r25, r1
    44f4:	96 95       	lsr	r25
    44f6:	87 95       	ror	r24
    44f8:	97 f9       	bld	r25, 7
    44fa:	08 95       	ret

000044fc <sin>:
    44fc:	9f 93       	push	r25
    44fe:	0e 94 96 22 	call	0x452c	; 0x452c <__fp_rempio2>
    4502:	0f 90       	pop	r0
    4504:	07 fc       	sbrc	r0, 7
    4506:	ee 5f       	subi	r30, 0xFE	; 254
    4508:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_sinus>

0000450c <__fp_mpack>:
    450c:	9f 3f       	cpi	r25, 0xFF	; 255
    450e:	31 f0       	breq	.+12     	; 0x451c <__fp_mpack_finite+0xc>

00004510 <__fp_mpack_finite>:
    4510:	91 50       	subi	r25, 0x01	; 1
    4512:	20 f4       	brcc	.+8      	; 0x451c <__fp_mpack_finite+0xc>
    4514:	87 95       	ror	r24
    4516:	77 95       	ror	r23
    4518:	67 95       	ror	r22
    451a:	b7 95       	ror	r27
    451c:	88 0f       	add	r24, r24
    451e:	91 1d       	adc	r25, r1
    4520:	96 95       	lsr	r25
    4522:	87 95       	ror	r24
    4524:	97 f9       	bld	r25, 7
    4526:	08 95       	ret
    4528:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__fp_nan>

0000452c <__fp_rempio2>:
    452c:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__fp_splitA>
    4530:	d8 f3       	brcs	.-10     	; 0x4528 <__fp_mpack_finite+0x18>
    4532:	e8 94       	clt
    4534:	e0 e0       	ldi	r30, 0x00	; 0
    4536:	bb 27       	eor	r27, r27
    4538:	9f 57       	subi	r25, 0x7F	; 127
    453a:	f0 f0       	brcs	.+60     	; 0x4578 <__fp_rempio2+0x4c>
    453c:	2a ed       	ldi	r18, 0xDA	; 218
    453e:	3f e0       	ldi	r19, 0x0F	; 15
    4540:	49 ec       	ldi	r20, 0xC9	; 201
    4542:	06 c0       	rjmp	.+12     	; 0x4550 <__fp_rempio2+0x24>
    4544:	ee 0f       	add	r30, r30
    4546:	bb 0f       	add	r27, r27
    4548:	66 1f       	adc	r22, r22
    454a:	77 1f       	adc	r23, r23
    454c:	88 1f       	adc	r24, r24
    454e:	28 f0       	brcs	.+10     	; 0x455a <__fp_rempio2+0x2e>
    4550:	b2 3a       	cpi	r27, 0xA2	; 162
    4552:	62 07       	cpc	r22, r18
    4554:	73 07       	cpc	r23, r19
    4556:	84 07       	cpc	r24, r20
    4558:	28 f0       	brcs	.+10     	; 0x4564 <__fp_rempio2+0x38>
    455a:	b2 5a       	subi	r27, 0xA2	; 162
    455c:	62 0b       	sbc	r22, r18
    455e:	73 0b       	sbc	r23, r19
    4560:	84 0b       	sbc	r24, r20
    4562:	e3 95       	inc	r30
    4564:	9a 95       	dec	r25
    4566:	72 f7       	brpl	.-36     	; 0x4544 <__fp_rempio2+0x18>
    4568:	80 38       	cpi	r24, 0x80	; 128
    456a:	30 f4       	brcc	.+12     	; 0x4578 <__fp_rempio2+0x4c>
    456c:	9a 95       	dec	r25
    456e:	bb 0f       	add	r27, r27
    4570:	66 1f       	adc	r22, r22
    4572:	77 1f       	adc	r23, r23
    4574:	88 1f       	adc	r24, r24
    4576:	d2 f7       	brpl	.-12     	; 0x456c <__fp_rempio2+0x40>
    4578:	90 48       	sbci	r25, 0x80	; 128
    457a:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__fp_mpack_finite>

0000457e <__fp_sinus>:
    457e:	ef 93       	push	r30
    4580:	e0 ff       	sbrs	r30, 0
    4582:	07 c0       	rjmp	.+14     	; 0x4592 <__fp_sinus+0x14>
    4584:	a2 ea       	ldi	r26, 0xA2	; 162
    4586:	2a ed       	ldi	r18, 0xDA	; 218
    4588:	3f e0       	ldi	r19, 0x0F	; 15
    458a:	49 ec       	ldi	r20, 0xC9	; 201
    458c:	5f eb       	ldi	r21, 0xBF	; 191
    458e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <__addsf3x>
    4592:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__fp_round>
    4596:	0f 90       	pop	r0
    4598:	03 94       	inc	r0
    459a:	01 fc       	sbrc	r0, 1
    459c:	90 58       	subi	r25, 0x80	; 128
    459e:	e0 ee       	ldi	r30, 0xE0	; 224
    45a0:	f1 e0       	ldi	r31, 0x01	; 1
    45a2:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__fp_powsodd>

000045a6 <__fp_powsodd>:
    45a6:	9f 93       	push	r25
    45a8:	8f 93       	push	r24
    45aa:	7f 93       	push	r23
    45ac:	6f 93       	push	r22
    45ae:	ff 93       	push	r31
    45b0:	ef 93       	push	r30
    45b2:	9b 01       	movw	r18, r22
    45b4:	ac 01       	movw	r20, r24
    45b6:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    45ba:	ef 91       	pop	r30
    45bc:	ff 91       	pop	r31
    45be:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__fp_powser>
    45c2:	2f 91       	pop	r18
    45c4:	3f 91       	pop	r19
    45c6:	4f 91       	pop	r20
    45c8:	5f 91       	pop	r21
    45ca:	0c 94 11 22 	jmp	0x4422	; 0x4422 <__mulsf3>

000045ce <__fp_powser>:
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	1f 93       	push	r17
    45d4:	0f 93       	push	r16
    45d6:	ff 92       	push	r15
    45d8:	ef 92       	push	r14
    45da:	df 92       	push	r13
    45dc:	7b 01       	movw	r14, r22
    45de:	8c 01       	movw	r16, r24
    45e0:	68 94       	set
    45e2:	06 c0       	rjmp	.+12     	; 0x45f0 <__fp_powser+0x22>
    45e4:	da 2e       	mov	r13, r26
    45e6:	ef 01       	movw	r28, r30
    45e8:	0e 94 24 22 	call	0x4448	; 0x4448 <__mulsf3x>
    45ec:	fe 01       	movw	r30, r28
    45ee:	e8 94       	clt
    45f0:	a5 91       	lpm	r26, Z+
    45f2:	25 91       	lpm	r18, Z+
    45f4:	35 91       	lpm	r19, Z+
    45f6:	45 91       	lpm	r20, Z+
    45f8:	55 91       	lpm	r21, Z+
    45fa:	a6 f3       	brts	.-24     	; 0x45e4 <__fp_powser+0x16>
    45fc:	ef 01       	movw	r28, r30
    45fe:	0e 94 ff 20 	call	0x41fe	; 0x41fe <__addsf3x>
    4602:	fe 01       	movw	r30, r28
    4604:	97 01       	movw	r18, r14
    4606:	a8 01       	movw	r20, r16
    4608:	da 94       	dec	r13
    460a:	69 f7       	brne	.-38     	; 0x45e6 <__fp_powser+0x18>
    460c:	df 90       	pop	r13
    460e:	ef 90       	pop	r14
    4610:	ff 90       	pop	r15
    4612:	0f 91       	pop	r16
    4614:	1f 91       	pop	r17
    4616:	cf 91       	pop	r28
    4618:	df 91       	pop	r29
    461a:	08 95       	ret

0000461c <__mulsi3>:
    461c:	db 01       	movw	r26, r22
    461e:	8f 93       	push	r24
    4620:	9f 93       	push	r25
    4622:	0e 94 a3 23 	call	0x4746	; 0x4746 <__muluhisi3>
    4626:	bf 91       	pop	r27
    4628:	af 91       	pop	r26
    462a:	a2 9f       	mul	r26, r18
    462c:	80 0d       	add	r24, r0
    462e:	91 1d       	adc	r25, r1
    4630:	a3 9f       	mul	r26, r19
    4632:	90 0d       	add	r25, r0
    4634:	b2 9f       	mul	r27, r18
    4636:	90 0d       	add	r25, r0
    4638:	11 24       	eor	r1, r1
    463a:	08 95       	ret

0000463c <__udivmodhi4>:
    463c:	aa 1b       	sub	r26, r26
    463e:	bb 1b       	sub	r27, r27
    4640:	51 e1       	ldi	r21, 0x11	; 17
    4642:	07 c0       	rjmp	.+14     	; 0x4652 <__udivmodhi4_ep>

00004644 <__udivmodhi4_loop>:
    4644:	aa 1f       	adc	r26, r26
    4646:	bb 1f       	adc	r27, r27
    4648:	a6 17       	cp	r26, r22
    464a:	b7 07       	cpc	r27, r23
    464c:	10 f0       	brcs	.+4      	; 0x4652 <__udivmodhi4_ep>
    464e:	a6 1b       	sub	r26, r22
    4650:	b7 0b       	sbc	r27, r23

00004652 <__udivmodhi4_ep>:
    4652:	88 1f       	adc	r24, r24
    4654:	99 1f       	adc	r25, r25
    4656:	5a 95       	dec	r21
    4658:	a9 f7       	brne	.-22     	; 0x4644 <__udivmodhi4_loop>
    465a:	80 95       	com	r24
    465c:	90 95       	com	r25
    465e:	bc 01       	movw	r22, r24
    4660:	cd 01       	movw	r24, r26
    4662:	08 95       	ret

00004664 <__divmodhi4>:
    4664:	97 fb       	bst	r25, 7
    4666:	07 2e       	mov	r0, r23
    4668:	16 f4       	brtc	.+4      	; 0x466e <__divmodhi4+0xa>
    466a:	00 94       	com	r0
    466c:	07 d0       	rcall	.+14     	; 0x467c <__divmodhi4_neg1>
    466e:	77 fd       	sbrc	r23, 7
    4670:	09 d0       	rcall	.+18     	; 0x4684 <__divmodhi4_neg2>
    4672:	0e 94 1e 23 	call	0x463c	; 0x463c <__udivmodhi4>
    4676:	07 fc       	sbrc	r0, 7
    4678:	05 d0       	rcall	.+10     	; 0x4684 <__divmodhi4_neg2>
    467a:	3e f4       	brtc	.+14     	; 0x468a <__divmodhi4_exit>

0000467c <__divmodhi4_neg1>:
    467c:	90 95       	com	r25
    467e:	81 95       	neg	r24
    4680:	9f 4f       	sbci	r25, 0xFF	; 255
    4682:	08 95       	ret

00004684 <__divmodhi4_neg2>:
    4684:	70 95       	com	r23
    4686:	61 95       	neg	r22
    4688:	7f 4f       	sbci	r23, 0xFF	; 255

0000468a <__divmodhi4_exit>:
    468a:	08 95       	ret

0000468c <__udivmodsi4>:
    468c:	a1 e2       	ldi	r26, 0x21	; 33
    468e:	1a 2e       	mov	r1, r26
    4690:	aa 1b       	sub	r26, r26
    4692:	bb 1b       	sub	r27, r27
    4694:	fd 01       	movw	r30, r26
    4696:	0d c0       	rjmp	.+26     	; 0x46b2 <__udivmodsi4_ep>

00004698 <__udivmodsi4_loop>:
    4698:	aa 1f       	adc	r26, r26
    469a:	bb 1f       	adc	r27, r27
    469c:	ee 1f       	adc	r30, r30
    469e:	ff 1f       	adc	r31, r31
    46a0:	a2 17       	cp	r26, r18
    46a2:	b3 07       	cpc	r27, r19
    46a4:	e4 07       	cpc	r30, r20
    46a6:	f5 07       	cpc	r31, r21
    46a8:	20 f0       	brcs	.+8      	; 0x46b2 <__udivmodsi4_ep>
    46aa:	a2 1b       	sub	r26, r18
    46ac:	b3 0b       	sbc	r27, r19
    46ae:	e4 0b       	sbc	r30, r20
    46b0:	f5 0b       	sbc	r31, r21

000046b2 <__udivmodsi4_ep>:
    46b2:	66 1f       	adc	r22, r22
    46b4:	77 1f       	adc	r23, r23
    46b6:	88 1f       	adc	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	1a 94       	dec	r1
    46bc:	69 f7       	brne	.-38     	; 0x4698 <__udivmodsi4_loop>
    46be:	60 95       	com	r22
    46c0:	70 95       	com	r23
    46c2:	80 95       	com	r24
    46c4:	90 95       	com	r25
    46c6:	9b 01       	movw	r18, r22
    46c8:	ac 01       	movw	r20, r24
    46ca:	bd 01       	movw	r22, r26
    46cc:	cf 01       	movw	r24, r30
    46ce:	08 95       	ret

000046d0 <__divmodsi4>:
    46d0:	05 2e       	mov	r0, r21
    46d2:	97 fb       	bst	r25, 7
    46d4:	1e f4       	brtc	.+6      	; 0x46dc <__divmodsi4+0xc>
    46d6:	00 94       	com	r0
    46d8:	0e 94 7f 23 	call	0x46fe	; 0x46fe <__negsi2>
    46dc:	57 fd       	sbrc	r21, 7
    46de:	07 d0       	rcall	.+14     	; 0x46ee <__divmodsi4_neg2>
    46e0:	0e 94 46 23 	call	0x468c	; 0x468c <__udivmodsi4>
    46e4:	07 fc       	sbrc	r0, 7
    46e6:	03 d0       	rcall	.+6      	; 0x46ee <__divmodsi4_neg2>
    46e8:	4e f4       	brtc	.+18     	; 0x46fc <__divmodsi4_exit>
    46ea:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__negsi2>

000046ee <__divmodsi4_neg2>:
    46ee:	50 95       	com	r21
    46f0:	40 95       	com	r20
    46f2:	30 95       	com	r19
    46f4:	21 95       	neg	r18
    46f6:	3f 4f       	sbci	r19, 0xFF	; 255
    46f8:	4f 4f       	sbci	r20, 0xFF	; 255
    46fa:	5f 4f       	sbci	r21, 0xFF	; 255

000046fc <__divmodsi4_exit>:
    46fc:	08 95       	ret

000046fe <__negsi2>:
    46fe:	90 95       	com	r25
    4700:	80 95       	com	r24
    4702:	70 95       	com	r23
    4704:	61 95       	neg	r22
    4706:	7f 4f       	sbci	r23, 0xFF	; 255
    4708:	8f 4f       	sbci	r24, 0xFF	; 255
    470a:	9f 4f       	sbci	r25, 0xFF	; 255
    470c:	08 95       	ret

0000470e <__tablejump2__>:
    470e:	ee 0f       	add	r30, r30
    4710:	ff 1f       	adc	r31, r31
    4712:	05 90       	lpm	r0, Z+
    4714:	f4 91       	lpm	r31, Z
    4716:	e0 2d       	mov	r30, r0
    4718:	09 94       	ijmp

0000471a <__umulhisi3>:
    471a:	a2 9f       	mul	r26, r18
    471c:	b0 01       	movw	r22, r0
    471e:	b3 9f       	mul	r27, r19
    4720:	c0 01       	movw	r24, r0
    4722:	a3 9f       	mul	r26, r19
    4724:	70 0d       	add	r23, r0
    4726:	81 1d       	adc	r24, r1
    4728:	11 24       	eor	r1, r1
    472a:	91 1d       	adc	r25, r1
    472c:	b2 9f       	mul	r27, r18
    472e:	70 0d       	add	r23, r0
    4730:	81 1d       	adc	r24, r1
    4732:	11 24       	eor	r1, r1
    4734:	91 1d       	adc	r25, r1
    4736:	08 95       	ret

00004738 <__usmulhisi3>:
    4738:	0e 94 8d 23 	call	0x471a	; 0x471a <__umulhisi3>

0000473c <__usmulhisi3_tail>:
    473c:	b7 ff       	sbrs	r27, 7
    473e:	08 95       	ret
    4740:	82 1b       	sub	r24, r18
    4742:	93 0b       	sbc	r25, r19
    4744:	08 95       	ret

00004746 <__muluhisi3>:
    4746:	0e 94 8d 23 	call	0x471a	; 0x471a <__umulhisi3>
    474a:	a5 9f       	mul	r26, r21
    474c:	90 0d       	add	r25, r0
    474e:	b4 9f       	mul	r27, r20
    4750:	90 0d       	add	r25, r0
    4752:	a4 9f       	mul	r26, r20
    4754:	80 0d       	add	r24, r0
    4756:	91 1d       	adc	r25, r1
    4758:	11 24       	eor	r1, r1
    475a:	08 95       	ret

0000475c <__mulshisi3>:
    475c:	b7 ff       	sbrs	r27, 7
    475e:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <__muluhisi3>

00004762 <__mulohisi3>:
    4762:	0e 94 a3 23 	call	0x4746	; 0x4746 <__muluhisi3>
    4766:	82 1b       	sub	r24, r18
    4768:	93 0b       	sbc	r25, r19
    476a:	08 95       	ret

0000476c <atoi>:
    476c:	fc 01       	movw	r30, r24
    476e:	88 27       	eor	r24, r24
    4770:	99 27       	eor	r25, r25
    4772:	e8 94       	clt
    4774:	21 91       	ld	r18, Z+
    4776:	20 32       	cpi	r18, 0x20	; 32
    4778:	e9 f3       	breq	.-6      	; 0x4774 <atoi+0x8>
    477a:	29 30       	cpi	r18, 0x09	; 9
    477c:	10 f0       	brcs	.+4      	; 0x4782 <atoi+0x16>
    477e:	2e 30       	cpi	r18, 0x0E	; 14
    4780:	c8 f3       	brcs	.-14     	; 0x4774 <atoi+0x8>
    4782:	2b 32       	cpi	r18, 0x2B	; 43
    4784:	41 f0       	breq	.+16     	; 0x4796 <atoi+0x2a>
    4786:	2d 32       	cpi	r18, 0x2D	; 45
    4788:	39 f4       	brne	.+14     	; 0x4798 <atoi+0x2c>
    478a:	68 94       	set
    478c:	04 c0       	rjmp	.+8      	; 0x4796 <atoi+0x2a>
    478e:	0e 94 39 24 	call	0x4872	; 0x4872 <__mulhi_const_10>
    4792:	82 0f       	add	r24, r18
    4794:	91 1d       	adc	r25, r1
    4796:	21 91       	ld	r18, Z+
    4798:	20 53       	subi	r18, 0x30	; 48
    479a:	2a 30       	cpi	r18, 0x0A	; 10
    479c:	c0 f3       	brcs	.-16     	; 0x478e <atoi+0x22>
    479e:	1e f4       	brtc	.+6      	; 0x47a6 <atoi+0x3a>
    47a0:	90 95       	com	r25
    47a2:	81 95       	neg	r24
    47a4:	9f 4f       	sbci	r25, 0xFF	; 255
    47a6:	08 95       	ret

000047a8 <atol>:
    47a8:	1f 93       	push	r17
    47aa:	fc 01       	movw	r30, r24
    47ac:	99 27       	eor	r25, r25
    47ae:	88 27       	eor	r24, r24
    47b0:	bc 01       	movw	r22, r24
    47b2:	e8 94       	clt
    47b4:	11 91       	ld	r17, Z+
    47b6:	10 32       	cpi	r17, 0x20	; 32
    47b8:	e9 f3       	breq	.-6      	; 0x47b4 <atol+0xc>
    47ba:	19 30       	cpi	r17, 0x09	; 9
    47bc:	10 f0       	brcs	.+4      	; 0x47c2 <atol+0x1a>
    47be:	1e 30       	cpi	r17, 0x0E	; 14
    47c0:	c8 f3       	brcs	.-14     	; 0x47b4 <atol+0xc>
    47c2:	1b 32       	cpi	r17, 0x2B	; 43
    47c4:	51 f0       	breq	.+20     	; 0x47da <atol+0x32>
    47c6:	1d 32       	cpi	r17, 0x2D	; 45
    47c8:	49 f4       	brne	.+18     	; 0x47dc <atol+0x34>
    47ca:	68 94       	set
    47cc:	06 c0       	rjmp	.+12     	; 0x47da <atol+0x32>
    47ce:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsi_const_10>
    47d2:	61 0f       	add	r22, r17
    47d4:	71 1d       	adc	r23, r1
    47d6:	81 1d       	adc	r24, r1
    47d8:	91 1d       	adc	r25, r1
    47da:	11 91       	ld	r17, Z+
    47dc:	10 53       	subi	r17, 0x30	; 48
    47de:	1a 30       	cpi	r17, 0x0A	; 10
    47e0:	b0 f3       	brcs	.-20     	; 0x47ce <atol+0x26>
    47e2:	3e f4       	brtc	.+14     	; 0x47f2 <atol+0x4a>
    47e4:	90 95       	com	r25
    47e6:	80 95       	com	r24
    47e8:	70 95       	com	r23
    47ea:	61 95       	neg	r22
    47ec:	7f 4f       	sbci	r23, 0xFF	; 255
    47ee:	8f 4f       	sbci	r24, 0xFF	; 255
    47f0:	9f 4f       	sbci	r25, 0xFF	; 255
    47f2:	1f 91       	pop	r17
    47f4:	08 95       	ret

000047f6 <toupper>:
    47f6:	91 11       	cpse	r25, r1
    47f8:	08 95       	ret
    47fa:	81 56       	subi	r24, 0x61	; 97
    47fc:	8a 51       	subi	r24, 0x1A	; 26
    47fe:	08 f4       	brcc	.+2      	; 0x4802 <toupper+0xc>
    4800:	80 52       	subi	r24, 0x20	; 32
    4802:	85 58       	subi	r24, 0x85	; 133
    4804:	08 95       	ret

00004806 <strcat>:
    4806:	fb 01       	movw	r30, r22
    4808:	dc 01       	movw	r26, r24
    480a:	0d 90       	ld	r0, X+
    480c:	00 20       	and	r0, r0
    480e:	e9 f7       	brne	.-6      	; 0x480a <strcat+0x4>
    4810:	11 97       	sbiw	r26, 0x01	; 1
    4812:	01 90       	ld	r0, Z+
    4814:	0d 92       	st	X+, r0
    4816:	00 20       	and	r0, r0
    4818:	e1 f7       	brne	.-8      	; 0x4812 <strcat+0xc>
    481a:	08 95       	ret

0000481c <strcpy>:
    481c:	fb 01       	movw	r30, r22
    481e:	dc 01       	movw	r26, r24
    4820:	01 90       	ld	r0, Z+
    4822:	0d 92       	st	X+, r0
    4824:	00 20       	and	r0, r0
    4826:	e1 f7       	brne	.-8      	; 0x4820 <strcpy+0x4>
    4828:	08 95       	ret

0000482a <strncpy>:
    482a:	fb 01       	movw	r30, r22
    482c:	dc 01       	movw	r26, r24
    482e:	41 50       	subi	r20, 0x01	; 1
    4830:	50 40       	sbci	r21, 0x00	; 0
    4832:	48 f0       	brcs	.+18     	; 0x4846 <strncpy+0x1c>
    4834:	01 90       	ld	r0, Z+
    4836:	0d 92       	st	X+, r0
    4838:	00 20       	and	r0, r0
    483a:	c9 f7       	brne	.-14     	; 0x482e <strncpy+0x4>
    483c:	01 c0       	rjmp	.+2      	; 0x4840 <strncpy+0x16>
    483e:	1d 92       	st	X+, r1
    4840:	41 50       	subi	r20, 0x01	; 1
    4842:	50 40       	sbci	r21, 0x00	; 0
    4844:	e0 f7       	brcc	.-8      	; 0x483e <strncpy+0x14>
    4846:	08 95       	ret

00004848 <__mulsi_const_10>:
    4848:	59 2f       	mov	r21, r25
    484a:	48 2f       	mov	r20, r24
    484c:	37 2f       	mov	r19, r23
    484e:	26 2f       	mov	r18, r22
    4850:	66 0f       	add	r22, r22
    4852:	77 1f       	adc	r23, r23
    4854:	88 1f       	adc	r24, r24
    4856:	99 1f       	adc	r25, r25
    4858:	66 0f       	add	r22, r22
    485a:	77 1f       	adc	r23, r23
    485c:	88 1f       	adc	r24, r24
    485e:	99 1f       	adc	r25, r25
    4860:	62 0f       	add	r22, r18
    4862:	73 1f       	adc	r23, r19
    4864:	84 1f       	adc	r24, r20
    4866:	95 1f       	adc	r25, r21
    4868:	66 0f       	add	r22, r22
    486a:	77 1f       	adc	r23, r23
    486c:	88 1f       	adc	r24, r24
    486e:	99 1f       	adc	r25, r25
    4870:	08 95       	ret

00004872 <__mulhi_const_10>:
    4872:	7a e0       	ldi	r23, 0x0A	; 10
    4874:	97 9f       	mul	r25, r23
    4876:	90 2d       	mov	r25, r0
    4878:	87 9f       	mul	r24, r23
    487a:	80 2d       	mov	r24, r0
    487c:	91 0d       	add	r25, r1
    487e:	11 24       	eor	r1, r1
    4880:	08 95       	ret

00004882 <sprintf>:
    4882:	ae e0       	ldi	r26, 0x0E	; 14
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	e7 e4       	ldi	r30, 0x47	; 71
    4888:	f4 e2       	ldi	r31, 0x24	; 36
    488a:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__prologue_saves__+0x1c>
    488e:	0d 89       	ldd	r16, Y+21	; 0x15
    4890:	1e 89       	ldd	r17, Y+22	; 0x16
    4892:	86 e0       	ldi	r24, 0x06	; 6
    4894:	8c 83       	std	Y+4, r24	; 0x04
    4896:	1a 83       	std	Y+2, r17	; 0x02
    4898:	09 83       	std	Y+1, r16	; 0x01
    489a:	8f ef       	ldi	r24, 0xFF	; 255
    489c:	9f e7       	ldi	r25, 0x7F	; 127
    489e:	9e 83       	std	Y+6, r25	; 0x06
    48a0:	8d 83       	std	Y+5, r24	; 0x05
    48a2:	ae 01       	movw	r20, r28
    48a4:	47 5e       	subi	r20, 0xE7	; 231
    48a6:	5f 4f       	sbci	r21, 0xFF	; 255
    48a8:	6f 89       	ldd	r22, Y+23	; 0x17
    48aa:	78 8d       	ldd	r23, Y+24	; 0x18
    48ac:	ce 01       	movw	r24, r28
    48ae:	01 96       	adiw	r24, 0x01	; 1
    48b0:	0e 94 63 24 	call	0x48c6	; 0x48c6 <vfprintf>
    48b4:	ef 81       	ldd	r30, Y+7	; 0x07
    48b6:	f8 85       	ldd	r31, Y+8	; 0x08
    48b8:	e0 0f       	add	r30, r16
    48ba:	f1 1f       	adc	r31, r17
    48bc:	10 82       	st	Z, r1
    48be:	2e 96       	adiw	r28, 0x0e	; 14
    48c0:	e4 e0       	ldi	r30, 0x04	; 4
    48c2:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <__epilogue_restores__+0x1c>

000048c6 <vfprintf>:
    48c6:	ab e0       	ldi	r26, 0x0B	; 11
    48c8:	b0 e0       	ldi	r27, 0x00	; 0
    48ca:	e9 e6       	ldi	r30, 0x69	; 105
    48cc:	f4 e2       	ldi	r31, 0x24	; 36
    48ce:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <__prologue_saves__>
    48d2:	6c 01       	movw	r12, r24
    48d4:	7b 01       	movw	r14, r22
    48d6:	8a 01       	movw	r16, r20
    48d8:	fc 01       	movw	r30, r24
    48da:	17 82       	std	Z+7, r1	; 0x07
    48dc:	16 82       	std	Z+6, r1	; 0x06
    48de:	83 81       	ldd	r24, Z+3	; 0x03
    48e0:	81 ff       	sbrs	r24, 1
    48e2:	cc c1       	rjmp	.+920    	; 0x4c7c <vfprintf+0x3b6>
    48e4:	ce 01       	movw	r24, r28
    48e6:	01 96       	adiw	r24, 0x01	; 1
    48e8:	3c 01       	movw	r6, r24
    48ea:	f6 01       	movw	r30, r12
    48ec:	93 81       	ldd	r25, Z+3	; 0x03
    48ee:	f7 01       	movw	r30, r14
    48f0:	93 fd       	sbrc	r25, 3
    48f2:	85 91       	lpm	r24, Z+
    48f4:	93 ff       	sbrs	r25, 3
    48f6:	81 91       	ld	r24, Z+
    48f8:	7f 01       	movw	r14, r30
    48fa:	88 23       	and	r24, r24
    48fc:	09 f4       	brne	.+2      	; 0x4900 <vfprintf+0x3a>
    48fe:	ba c1       	rjmp	.+884    	; 0x4c74 <vfprintf+0x3ae>
    4900:	85 32       	cpi	r24, 0x25	; 37
    4902:	39 f4       	brne	.+14     	; 0x4912 <vfprintf+0x4c>
    4904:	93 fd       	sbrc	r25, 3
    4906:	85 91       	lpm	r24, Z+
    4908:	93 ff       	sbrs	r25, 3
    490a:	81 91       	ld	r24, Z+
    490c:	7f 01       	movw	r14, r30
    490e:	85 32       	cpi	r24, 0x25	; 37
    4910:	29 f4       	brne	.+10     	; 0x491c <vfprintf+0x56>
    4912:	b6 01       	movw	r22, r12
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    491a:	e7 cf       	rjmp	.-50     	; 0x48ea <vfprintf+0x24>
    491c:	91 2c       	mov	r9, r1
    491e:	21 2c       	mov	r2, r1
    4920:	31 2c       	mov	r3, r1
    4922:	ff e1       	ldi	r31, 0x1F	; 31
    4924:	f3 15       	cp	r31, r3
    4926:	d8 f0       	brcs	.+54     	; 0x495e <vfprintf+0x98>
    4928:	8b 32       	cpi	r24, 0x2B	; 43
    492a:	79 f0       	breq	.+30     	; 0x494a <vfprintf+0x84>
    492c:	38 f4       	brcc	.+14     	; 0x493c <vfprintf+0x76>
    492e:	80 32       	cpi	r24, 0x20	; 32
    4930:	79 f0       	breq	.+30     	; 0x4950 <vfprintf+0x8a>
    4932:	83 32       	cpi	r24, 0x23	; 35
    4934:	a1 f4       	brne	.+40     	; 0x495e <vfprintf+0x98>
    4936:	23 2d       	mov	r18, r3
    4938:	20 61       	ori	r18, 0x10	; 16
    493a:	1d c0       	rjmp	.+58     	; 0x4976 <vfprintf+0xb0>
    493c:	8d 32       	cpi	r24, 0x2D	; 45
    493e:	61 f0       	breq	.+24     	; 0x4958 <vfprintf+0x92>
    4940:	80 33       	cpi	r24, 0x30	; 48
    4942:	69 f4       	brne	.+26     	; 0x495e <vfprintf+0x98>
    4944:	23 2d       	mov	r18, r3
    4946:	21 60       	ori	r18, 0x01	; 1
    4948:	16 c0       	rjmp	.+44     	; 0x4976 <vfprintf+0xb0>
    494a:	83 2d       	mov	r24, r3
    494c:	82 60       	ori	r24, 0x02	; 2
    494e:	38 2e       	mov	r3, r24
    4950:	e3 2d       	mov	r30, r3
    4952:	e4 60       	ori	r30, 0x04	; 4
    4954:	3e 2e       	mov	r3, r30
    4956:	2a c0       	rjmp	.+84     	; 0x49ac <vfprintf+0xe6>
    4958:	f3 2d       	mov	r31, r3
    495a:	f8 60       	ori	r31, 0x08	; 8
    495c:	1d c0       	rjmp	.+58     	; 0x4998 <vfprintf+0xd2>
    495e:	37 fc       	sbrc	r3, 7
    4960:	2d c0       	rjmp	.+90     	; 0x49bc <vfprintf+0xf6>
    4962:	20 ed       	ldi	r18, 0xD0	; 208
    4964:	28 0f       	add	r18, r24
    4966:	2a 30       	cpi	r18, 0x0A	; 10
    4968:	40 f0       	brcs	.+16     	; 0x497a <vfprintf+0xb4>
    496a:	8e 32       	cpi	r24, 0x2E	; 46
    496c:	b9 f4       	brne	.+46     	; 0x499c <vfprintf+0xd6>
    496e:	36 fc       	sbrc	r3, 6
    4970:	81 c1       	rjmp	.+770    	; 0x4c74 <vfprintf+0x3ae>
    4972:	23 2d       	mov	r18, r3
    4974:	20 64       	ori	r18, 0x40	; 64
    4976:	32 2e       	mov	r3, r18
    4978:	19 c0       	rjmp	.+50     	; 0x49ac <vfprintf+0xe6>
    497a:	36 fe       	sbrs	r3, 6
    497c:	06 c0       	rjmp	.+12     	; 0x498a <vfprintf+0xc4>
    497e:	8a e0       	ldi	r24, 0x0A	; 10
    4980:	98 9e       	mul	r9, r24
    4982:	20 0d       	add	r18, r0
    4984:	11 24       	eor	r1, r1
    4986:	92 2e       	mov	r9, r18
    4988:	11 c0       	rjmp	.+34     	; 0x49ac <vfprintf+0xe6>
    498a:	ea e0       	ldi	r30, 0x0A	; 10
    498c:	2e 9e       	mul	r2, r30
    498e:	20 0d       	add	r18, r0
    4990:	11 24       	eor	r1, r1
    4992:	22 2e       	mov	r2, r18
    4994:	f3 2d       	mov	r31, r3
    4996:	f0 62       	ori	r31, 0x20	; 32
    4998:	3f 2e       	mov	r3, r31
    499a:	08 c0       	rjmp	.+16     	; 0x49ac <vfprintf+0xe6>
    499c:	8c 36       	cpi	r24, 0x6C	; 108
    499e:	21 f4       	brne	.+8      	; 0x49a8 <vfprintf+0xe2>
    49a0:	83 2d       	mov	r24, r3
    49a2:	80 68       	ori	r24, 0x80	; 128
    49a4:	38 2e       	mov	r3, r24
    49a6:	02 c0       	rjmp	.+4      	; 0x49ac <vfprintf+0xe6>
    49a8:	88 36       	cpi	r24, 0x68	; 104
    49aa:	41 f4       	brne	.+16     	; 0x49bc <vfprintf+0xf6>
    49ac:	f7 01       	movw	r30, r14
    49ae:	93 fd       	sbrc	r25, 3
    49b0:	85 91       	lpm	r24, Z+
    49b2:	93 ff       	sbrs	r25, 3
    49b4:	81 91       	ld	r24, Z+
    49b6:	7f 01       	movw	r14, r30
    49b8:	81 11       	cpse	r24, r1
    49ba:	b3 cf       	rjmp	.-154    	; 0x4922 <vfprintf+0x5c>
    49bc:	98 2f       	mov	r25, r24
    49be:	9f 7d       	andi	r25, 0xDF	; 223
    49c0:	95 54       	subi	r25, 0x45	; 69
    49c2:	93 30       	cpi	r25, 0x03	; 3
    49c4:	28 f4       	brcc	.+10     	; 0x49d0 <vfprintf+0x10a>
    49c6:	0c 5f       	subi	r16, 0xFC	; 252
    49c8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ca:	9f e3       	ldi	r25, 0x3F	; 63
    49cc:	99 83       	std	Y+1, r25	; 0x01
    49ce:	0d c0       	rjmp	.+26     	; 0x49ea <vfprintf+0x124>
    49d0:	83 36       	cpi	r24, 0x63	; 99
    49d2:	31 f0       	breq	.+12     	; 0x49e0 <vfprintf+0x11a>
    49d4:	83 37       	cpi	r24, 0x73	; 115
    49d6:	71 f0       	breq	.+28     	; 0x49f4 <vfprintf+0x12e>
    49d8:	83 35       	cpi	r24, 0x53	; 83
    49da:	09 f0       	breq	.+2      	; 0x49de <vfprintf+0x118>
    49dc:	59 c0       	rjmp	.+178    	; 0x4a90 <vfprintf+0x1ca>
    49de:	21 c0       	rjmp	.+66     	; 0x4a22 <vfprintf+0x15c>
    49e0:	f8 01       	movw	r30, r16
    49e2:	80 81       	ld	r24, Z
    49e4:	89 83       	std	Y+1, r24	; 0x01
    49e6:	0e 5f       	subi	r16, 0xFE	; 254
    49e8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ea:	88 24       	eor	r8, r8
    49ec:	83 94       	inc	r8
    49ee:	91 2c       	mov	r9, r1
    49f0:	53 01       	movw	r10, r6
    49f2:	13 c0       	rjmp	.+38     	; 0x4a1a <vfprintf+0x154>
    49f4:	28 01       	movw	r4, r16
    49f6:	f2 e0       	ldi	r31, 0x02	; 2
    49f8:	4f 0e       	add	r4, r31
    49fa:	51 1c       	adc	r5, r1
    49fc:	f8 01       	movw	r30, r16
    49fe:	a0 80       	ld	r10, Z
    4a00:	b1 80       	ldd	r11, Z+1	; 0x01
    4a02:	36 fe       	sbrs	r3, 6
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <vfprintf+0x146>
    4a06:	69 2d       	mov	r22, r9
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	02 c0       	rjmp	.+4      	; 0x4a10 <vfprintf+0x14a>
    4a0c:	6f ef       	ldi	r22, 0xFF	; 255
    4a0e:	7f ef       	ldi	r23, 0xFF	; 255
    4a10:	c5 01       	movw	r24, r10
    4a12:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <strnlen>
    4a16:	4c 01       	movw	r8, r24
    4a18:	82 01       	movw	r16, r4
    4a1a:	f3 2d       	mov	r31, r3
    4a1c:	ff 77       	andi	r31, 0x7F	; 127
    4a1e:	3f 2e       	mov	r3, r31
    4a20:	16 c0       	rjmp	.+44     	; 0x4a4e <vfprintf+0x188>
    4a22:	28 01       	movw	r4, r16
    4a24:	22 e0       	ldi	r18, 0x02	; 2
    4a26:	42 0e       	add	r4, r18
    4a28:	51 1c       	adc	r5, r1
    4a2a:	f8 01       	movw	r30, r16
    4a2c:	a0 80       	ld	r10, Z
    4a2e:	b1 80       	ldd	r11, Z+1	; 0x01
    4a30:	36 fe       	sbrs	r3, 6
    4a32:	03 c0       	rjmp	.+6      	; 0x4a3a <vfprintf+0x174>
    4a34:	69 2d       	mov	r22, r9
    4a36:	70 e0       	ldi	r23, 0x00	; 0
    4a38:	02 c0       	rjmp	.+4      	; 0x4a3e <vfprintf+0x178>
    4a3a:	6f ef       	ldi	r22, 0xFF	; 255
    4a3c:	7f ef       	ldi	r23, 0xFF	; 255
    4a3e:	c5 01       	movw	r24, r10
    4a40:	0e 94 44 26 	call	0x4c88	; 0x4c88 <strnlen_P>
    4a44:	4c 01       	movw	r8, r24
    4a46:	f3 2d       	mov	r31, r3
    4a48:	f0 68       	ori	r31, 0x80	; 128
    4a4a:	3f 2e       	mov	r3, r31
    4a4c:	82 01       	movw	r16, r4
    4a4e:	33 fc       	sbrc	r3, 3
    4a50:	1b c0       	rjmp	.+54     	; 0x4a88 <vfprintf+0x1c2>
    4a52:	82 2d       	mov	r24, r2
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	88 16       	cp	r8, r24
    4a58:	99 06       	cpc	r9, r25
    4a5a:	b0 f4       	brcc	.+44     	; 0x4a88 <vfprintf+0x1c2>
    4a5c:	b6 01       	movw	r22, r12
    4a5e:	80 e2       	ldi	r24, 0x20	; 32
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4a66:	2a 94       	dec	r2
    4a68:	f4 cf       	rjmp	.-24     	; 0x4a52 <vfprintf+0x18c>
    4a6a:	f5 01       	movw	r30, r10
    4a6c:	37 fc       	sbrc	r3, 7
    4a6e:	85 91       	lpm	r24, Z+
    4a70:	37 fe       	sbrs	r3, 7
    4a72:	81 91       	ld	r24, Z+
    4a74:	5f 01       	movw	r10, r30
    4a76:	b6 01       	movw	r22, r12
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4a7e:	21 10       	cpse	r2, r1
    4a80:	2a 94       	dec	r2
    4a82:	21 e0       	ldi	r18, 0x01	; 1
    4a84:	82 1a       	sub	r8, r18
    4a86:	91 08       	sbc	r9, r1
    4a88:	81 14       	cp	r8, r1
    4a8a:	91 04       	cpc	r9, r1
    4a8c:	71 f7       	brne	.-36     	; 0x4a6a <vfprintf+0x1a4>
    4a8e:	e8 c0       	rjmp	.+464    	; 0x4c60 <vfprintf+0x39a>
    4a90:	84 36       	cpi	r24, 0x64	; 100
    4a92:	11 f0       	breq	.+4      	; 0x4a98 <vfprintf+0x1d2>
    4a94:	89 36       	cpi	r24, 0x69	; 105
    4a96:	41 f5       	brne	.+80     	; 0x4ae8 <vfprintf+0x222>
    4a98:	f8 01       	movw	r30, r16
    4a9a:	37 fe       	sbrs	r3, 7
    4a9c:	07 c0       	rjmp	.+14     	; 0x4aac <vfprintf+0x1e6>
    4a9e:	60 81       	ld	r22, Z
    4aa0:	71 81       	ldd	r23, Z+1	; 0x01
    4aa2:	82 81       	ldd	r24, Z+2	; 0x02
    4aa4:	93 81       	ldd	r25, Z+3	; 0x03
    4aa6:	0c 5f       	subi	r16, 0xFC	; 252
    4aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aaa:	08 c0       	rjmp	.+16     	; 0x4abc <vfprintf+0x1f6>
    4aac:	60 81       	ld	r22, Z
    4aae:	71 81       	ldd	r23, Z+1	; 0x01
    4ab0:	07 2e       	mov	r0, r23
    4ab2:	00 0c       	add	r0, r0
    4ab4:	88 0b       	sbc	r24, r24
    4ab6:	99 0b       	sbc	r25, r25
    4ab8:	0e 5f       	subi	r16, 0xFE	; 254
    4aba:	1f 4f       	sbci	r17, 0xFF	; 255
    4abc:	f3 2d       	mov	r31, r3
    4abe:	ff 76       	andi	r31, 0x6F	; 111
    4ac0:	3f 2e       	mov	r3, r31
    4ac2:	97 ff       	sbrs	r25, 7
    4ac4:	09 c0       	rjmp	.+18     	; 0x4ad8 <vfprintf+0x212>
    4ac6:	90 95       	com	r25
    4ac8:	80 95       	com	r24
    4aca:	70 95       	com	r23
    4acc:	61 95       	neg	r22
    4ace:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad4:	f0 68       	ori	r31, 0x80	; 128
    4ad6:	3f 2e       	mov	r3, r31
    4ad8:	2a e0       	ldi	r18, 0x0A	; 10
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	a3 01       	movw	r20, r6
    4ade:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__ultoa_invert>
    4ae2:	88 2e       	mov	r8, r24
    4ae4:	86 18       	sub	r8, r6
    4ae6:	45 c0       	rjmp	.+138    	; 0x4b72 <vfprintf+0x2ac>
    4ae8:	85 37       	cpi	r24, 0x75	; 117
    4aea:	31 f4       	brne	.+12     	; 0x4af8 <vfprintf+0x232>
    4aec:	23 2d       	mov	r18, r3
    4aee:	2f 7e       	andi	r18, 0xEF	; 239
    4af0:	b2 2e       	mov	r11, r18
    4af2:	2a e0       	ldi	r18, 0x0A	; 10
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	25 c0       	rjmp	.+74     	; 0x4b42 <vfprintf+0x27c>
    4af8:	93 2d       	mov	r25, r3
    4afa:	99 7f       	andi	r25, 0xF9	; 249
    4afc:	b9 2e       	mov	r11, r25
    4afe:	8f 36       	cpi	r24, 0x6F	; 111
    4b00:	c1 f0       	breq	.+48     	; 0x4b32 <vfprintf+0x26c>
    4b02:	18 f4       	brcc	.+6      	; 0x4b0a <vfprintf+0x244>
    4b04:	88 35       	cpi	r24, 0x58	; 88
    4b06:	79 f0       	breq	.+30     	; 0x4b26 <vfprintf+0x260>
    4b08:	b5 c0       	rjmp	.+362    	; 0x4c74 <vfprintf+0x3ae>
    4b0a:	80 37       	cpi	r24, 0x70	; 112
    4b0c:	19 f0       	breq	.+6      	; 0x4b14 <vfprintf+0x24e>
    4b0e:	88 37       	cpi	r24, 0x78	; 120
    4b10:	21 f0       	breq	.+8      	; 0x4b1a <vfprintf+0x254>
    4b12:	b0 c0       	rjmp	.+352    	; 0x4c74 <vfprintf+0x3ae>
    4b14:	e9 2f       	mov	r30, r25
    4b16:	e0 61       	ori	r30, 0x10	; 16
    4b18:	be 2e       	mov	r11, r30
    4b1a:	b4 fe       	sbrs	r11, 4
    4b1c:	0d c0       	rjmp	.+26     	; 0x4b38 <vfprintf+0x272>
    4b1e:	fb 2d       	mov	r31, r11
    4b20:	f4 60       	ori	r31, 0x04	; 4
    4b22:	bf 2e       	mov	r11, r31
    4b24:	09 c0       	rjmp	.+18     	; 0x4b38 <vfprintf+0x272>
    4b26:	34 fe       	sbrs	r3, 4
    4b28:	0a c0       	rjmp	.+20     	; 0x4b3e <vfprintf+0x278>
    4b2a:	29 2f       	mov	r18, r25
    4b2c:	26 60       	ori	r18, 0x06	; 6
    4b2e:	b2 2e       	mov	r11, r18
    4b30:	06 c0       	rjmp	.+12     	; 0x4b3e <vfprintf+0x278>
    4b32:	28 e0       	ldi	r18, 0x08	; 8
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	05 c0       	rjmp	.+10     	; 0x4b42 <vfprintf+0x27c>
    4b38:	20 e1       	ldi	r18, 0x10	; 16
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	02 c0       	rjmp	.+4      	; 0x4b42 <vfprintf+0x27c>
    4b3e:	20 e1       	ldi	r18, 0x10	; 16
    4b40:	32 e0       	ldi	r19, 0x02	; 2
    4b42:	f8 01       	movw	r30, r16
    4b44:	b7 fe       	sbrs	r11, 7
    4b46:	07 c0       	rjmp	.+14     	; 0x4b56 <vfprintf+0x290>
    4b48:	60 81       	ld	r22, Z
    4b4a:	71 81       	ldd	r23, Z+1	; 0x01
    4b4c:	82 81       	ldd	r24, Z+2	; 0x02
    4b4e:	93 81       	ldd	r25, Z+3	; 0x03
    4b50:	0c 5f       	subi	r16, 0xFC	; 252
    4b52:	1f 4f       	sbci	r17, 0xFF	; 255
    4b54:	06 c0       	rjmp	.+12     	; 0x4b62 <vfprintf+0x29c>
    4b56:	60 81       	ld	r22, Z
    4b58:	71 81       	ldd	r23, Z+1	; 0x01
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	0e 5f       	subi	r16, 0xFE	; 254
    4b60:	1f 4f       	sbci	r17, 0xFF	; 255
    4b62:	a3 01       	movw	r20, r6
    4b64:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__ultoa_invert>
    4b68:	88 2e       	mov	r8, r24
    4b6a:	86 18       	sub	r8, r6
    4b6c:	fb 2d       	mov	r31, r11
    4b6e:	ff 77       	andi	r31, 0x7F	; 127
    4b70:	3f 2e       	mov	r3, r31
    4b72:	36 fe       	sbrs	r3, 6
    4b74:	0d c0       	rjmp	.+26     	; 0x4b90 <vfprintf+0x2ca>
    4b76:	23 2d       	mov	r18, r3
    4b78:	2e 7f       	andi	r18, 0xFE	; 254
    4b7a:	a2 2e       	mov	r10, r18
    4b7c:	89 14       	cp	r8, r9
    4b7e:	58 f4       	brcc	.+22     	; 0x4b96 <vfprintf+0x2d0>
    4b80:	34 fe       	sbrs	r3, 4
    4b82:	0b c0       	rjmp	.+22     	; 0x4b9a <vfprintf+0x2d4>
    4b84:	32 fc       	sbrc	r3, 2
    4b86:	09 c0       	rjmp	.+18     	; 0x4b9a <vfprintf+0x2d4>
    4b88:	83 2d       	mov	r24, r3
    4b8a:	8e 7e       	andi	r24, 0xEE	; 238
    4b8c:	a8 2e       	mov	r10, r24
    4b8e:	05 c0       	rjmp	.+10     	; 0x4b9a <vfprintf+0x2d4>
    4b90:	b8 2c       	mov	r11, r8
    4b92:	a3 2c       	mov	r10, r3
    4b94:	03 c0       	rjmp	.+6      	; 0x4b9c <vfprintf+0x2d6>
    4b96:	b8 2c       	mov	r11, r8
    4b98:	01 c0       	rjmp	.+2      	; 0x4b9c <vfprintf+0x2d6>
    4b9a:	b9 2c       	mov	r11, r9
    4b9c:	a4 fe       	sbrs	r10, 4
    4b9e:	0f c0       	rjmp	.+30     	; 0x4bbe <vfprintf+0x2f8>
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e8 0d       	add	r30, r8
    4ba4:	f1 1d       	adc	r31, r1
    4ba6:	80 81       	ld	r24, Z
    4ba8:	80 33       	cpi	r24, 0x30	; 48
    4baa:	21 f4       	brne	.+8      	; 0x4bb4 <vfprintf+0x2ee>
    4bac:	9a 2d       	mov	r25, r10
    4bae:	99 7e       	andi	r25, 0xE9	; 233
    4bb0:	a9 2e       	mov	r10, r25
    4bb2:	09 c0       	rjmp	.+18     	; 0x4bc6 <vfprintf+0x300>
    4bb4:	a2 fe       	sbrs	r10, 2
    4bb6:	06 c0       	rjmp	.+12     	; 0x4bc4 <vfprintf+0x2fe>
    4bb8:	b3 94       	inc	r11
    4bba:	b3 94       	inc	r11
    4bbc:	04 c0       	rjmp	.+8      	; 0x4bc6 <vfprintf+0x300>
    4bbe:	8a 2d       	mov	r24, r10
    4bc0:	86 78       	andi	r24, 0x86	; 134
    4bc2:	09 f0       	breq	.+2      	; 0x4bc6 <vfprintf+0x300>
    4bc4:	b3 94       	inc	r11
    4bc6:	a3 fc       	sbrc	r10, 3
    4bc8:	11 c0       	rjmp	.+34     	; 0x4bec <vfprintf+0x326>
    4bca:	a0 fe       	sbrs	r10, 0
    4bcc:	06 c0       	rjmp	.+12     	; 0x4bda <vfprintf+0x314>
    4bce:	b2 14       	cp	r11, r2
    4bd0:	88 f4       	brcc	.+34     	; 0x4bf4 <vfprintf+0x32e>
    4bd2:	28 0c       	add	r2, r8
    4bd4:	92 2c       	mov	r9, r2
    4bd6:	9b 18       	sub	r9, r11
    4bd8:	0e c0       	rjmp	.+28     	; 0x4bf6 <vfprintf+0x330>
    4bda:	b2 14       	cp	r11, r2
    4bdc:	60 f4       	brcc	.+24     	; 0x4bf6 <vfprintf+0x330>
    4bde:	b6 01       	movw	r22, r12
    4be0:	80 e2       	ldi	r24, 0x20	; 32
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4be8:	b3 94       	inc	r11
    4bea:	f7 cf       	rjmp	.-18     	; 0x4bda <vfprintf+0x314>
    4bec:	b2 14       	cp	r11, r2
    4bee:	18 f4       	brcc	.+6      	; 0x4bf6 <vfprintf+0x330>
    4bf0:	2b 18       	sub	r2, r11
    4bf2:	02 c0       	rjmp	.+4      	; 0x4bf8 <vfprintf+0x332>
    4bf4:	98 2c       	mov	r9, r8
    4bf6:	21 2c       	mov	r2, r1
    4bf8:	a4 fe       	sbrs	r10, 4
    4bfa:	10 c0       	rjmp	.+32     	; 0x4c1c <vfprintf+0x356>
    4bfc:	b6 01       	movw	r22, r12
    4bfe:	80 e3       	ldi	r24, 0x30	; 48
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4c06:	a2 fe       	sbrs	r10, 2
    4c08:	17 c0       	rjmp	.+46     	; 0x4c38 <vfprintf+0x372>
    4c0a:	a1 fc       	sbrc	r10, 1
    4c0c:	03 c0       	rjmp	.+6      	; 0x4c14 <vfprintf+0x34e>
    4c0e:	88 e7       	ldi	r24, 0x78	; 120
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	02 c0       	rjmp	.+4      	; 0x4c18 <vfprintf+0x352>
    4c14:	88 e5       	ldi	r24, 0x58	; 88
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	b6 01       	movw	r22, r12
    4c1a:	0c c0       	rjmp	.+24     	; 0x4c34 <vfprintf+0x36e>
    4c1c:	8a 2d       	mov	r24, r10
    4c1e:	86 78       	andi	r24, 0x86	; 134
    4c20:	59 f0       	breq	.+22     	; 0x4c38 <vfprintf+0x372>
    4c22:	a1 fe       	sbrs	r10, 1
    4c24:	02 c0       	rjmp	.+4      	; 0x4c2a <vfprintf+0x364>
    4c26:	8b e2       	ldi	r24, 0x2B	; 43
    4c28:	01 c0       	rjmp	.+2      	; 0x4c2c <vfprintf+0x366>
    4c2a:	80 e2       	ldi	r24, 0x20	; 32
    4c2c:	a7 fc       	sbrc	r10, 7
    4c2e:	8d e2       	ldi	r24, 0x2D	; 45
    4c30:	b6 01       	movw	r22, r12
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4c38:	89 14       	cp	r8, r9
    4c3a:	38 f4       	brcc	.+14     	; 0x4c4a <vfprintf+0x384>
    4c3c:	b6 01       	movw	r22, r12
    4c3e:	80 e3       	ldi	r24, 0x30	; 48
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4c46:	9a 94       	dec	r9
    4c48:	f7 cf       	rjmp	.-18     	; 0x4c38 <vfprintf+0x372>
    4c4a:	8a 94       	dec	r8
    4c4c:	f3 01       	movw	r30, r6
    4c4e:	e8 0d       	add	r30, r8
    4c50:	f1 1d       	adc	r31, r1
    4c52:	80 81       	ld	r24, Z
    4c54:	b6 01       	movw	r22, r12
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4c5c:	81 10       	cpse	r8, r1
    4c5e:	f5 cf       	rjmp	.-22     	; 0x4c4a <vfprintf+0x384>
    4c60:	22 20       	and	r2, r2
    4c62:	09 f4       	brne	.+2      	; 0x4c66 <vfprintf+0x3a0>
    4c64:	42 ce       	rjmp	.-892    	; 0x48ea <vfprintf+0x24>
    4c66:	b6 01       	movw	r22, r12
    4c68:	80 e2       	ldi	r24, 0x20	; 32
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <fputc>
    4c70:	2a 94       	dec	r2
    4c72:	f6 cf       	rjmp	.-20     	; 0x4c60 <vfprintf+0x39a>
    4c74:	f6 01       	movw	r30, r12
    4c76:	86 81       	ldd	r24, Z+6	; 0x06
    4c78:	97 81       	ldd	r25, Z+7	; 0x07
    4c7a:	02 c0       	rjmp	.+4      	; 0x4c80 <vfprintf+0x3ba>
    4c7c:	8f ef       	ldi	r24, 0xFF	; 255
    4c7e:	9f ef       	ldi	r25, 0xFF	; 255
    4c80:	2b 96       	adiw	r28, 0x0b	; 11
    4c82:	e2 e1       	ldi	r30, 0x12	; 18
    4c84:	0c 94 73 27 	jmp	0x4ee6	; 0x4ee6 <__epilogue_restores__>

00004c88 <strnlen_P>:
    4c88:	fc 01       	movw	r30, r24
    4c8a:	05 90       	lpm	r0, Z+
    4c8c:	61 50       	subi	r22, 0x01	; 1
    4c8e:	70 40       	sbci	r23, 0x00	; 0
    4c90:	01 10       	cpse	r0, r1
    4c92:	d8 f7       	brcc	.-10     	; 0x4c8a <strnlen_P+0x2>
    4c94:	80 95       	com	r24
    4c96:	90 95       	com	r25
    4c98:	8e 0f       	add	r24, r30
    4c9a:	9f 1f       	adc	r25, r31
    4c9c:	08 95       	ret

00004c9e <strnlen>:
    4c9e:	fc 01       	movw	r30, r24
    4ca0:	61 50       	subi	r22, 0x01	; 1
    4ca2:	70 40       	sbci	r23, 0x00	; 0
    4ca4:	01 90       	ld	r0, Z+
    4ca6:	01 10       	cpse	r0, r1
    4ca8:	d8 f7       	brcc	.-10     	; 0x4ca0 <strnlen+0x2>
    4caa:	80 95       	com	r24
    4cac:	90 95       	com	r25
    4cae:	8e 0f       	add	r24, r30
    4cb0:	9f 1f       	adc	r25, r31
    4cb2:	08 95       	ret

00004cb4 <fputc>:
    4cb4:	0f 93       	push	r16
    4cb6:	1f 93       	push	r17
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	fb 01       	movw	r30, r22
    4cbe:	23 81       	ldd	r18, Z+3	; 0x03
    4cc0:	21 fd       	sbrc	r18, 1
    4cc2:	03 c0       	rjmp	.+6      	; 0x4cca <fputc+0x16>
    4cc4:	8f ef       	ldi	r24, 0xFF	; 255
    4cc6:	9f ef       	ldi	r25, 0xFF	; 255
    4cc8:	2c c0       	rjmp	.+88     	; 0x4d22 <fputc+0x6e>
    4cca:	22 ff       	sbrs	r18, 2
    4ccc:	16 c0       	rjmp	.+44     	; 0x4cfa <fputc+0x46>
    4cce:	46 81       	ldd	r20, Z+6	; 0x06
    4cd0:	57 81       	ldd	r21, Z+7	; 0x07
    4cd2:	24 81       	ldd	r18, Z+4	; 0x04
    4cd4:	35 81       	ldd	r19, Z+5	; 0x05
    4cd6:	42 17       	cp	r20, r18
    4cd8:	53 07       	cpc	r21, r19
    4cda:	44 f4       	brge	.+16     	; 0x4cec <fputc+0x38>
    4cdc:	a0 81       	ld	r26, Z
    4cde:	b1 81       	ldd	r27, Z+1	; 0x01
    4ce0:	9d 01       	movw	r18, r26
    4ce2:	2f 5f       	subi	r18, 0xFF	; 255
    4ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce6:	31 83       	std	Z+1, r19	; 0x01
    4ce8:	20 83       	st	Z, r18
    4cea:	8c 93       	st	X, r24
    4cec:	26 81       	ldd	r18, Z+6	; 0x06
    4cee:	37 81       	ldd	r19, Z+7	; 0x07
    4cf0:	2f 5f       	subi	r18, 0xFF	; 255
    4cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf4:	37 83       	std	Z+7, r19	; 0x07
    4cf6:	26 83       	std	Z+6, r18	; 0x06
    4cf8:	14 c0       	rjmp	.+40     	; 0x4d22 <fputc+0x6e>
    4cfa:	8b 01       	movw	r16, r22
    4cfc:	ec 01       	movw	r28, r24
    4cfe:	fb 01       	movw	r30, r22
    4d00:	00 84       	ldd	r0, Z+8	; 0x08
    4d02:	f1 85       	ldd	r31, Z+9	; 0x09
    4d04:	e0 2d       	mov	r30, r0
    4d06:	09 95       	icall
    4d08:	89 2b       	or	r24, r25
    4d0a:	e1 f6       	brne	.-72     	; 0x4cc4 <fputc+0x10>
    4d0c:	d8 01       	movw	r26, r16
    4d0e:	16 96       	adiw	r26, 0x06	; 6
    4d10:	8d 91       	ld	r24, X+
    4d12:	9c 91       	ld	r25, X
    4d14:	17 97       	sbiw	r26, 0x07	; 7
    4d16:	01 96       	adiw	r24, 0x01	; 1
    4d18:	17 96       	adiw	r26, 0x07	; 7
    4d1a:	9c 93       	st	X, r25
    4d1c:	8e 93       	st	-X, r24
    4d1e:	16 97       	sbiw	r26, 0x06	; 6
    4d20:	ce 01       	movw	r24, r28
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	1f 91       	pop	r17
    4d28:	0f 91       	pop	r16
    4d2a:	08 95       	ret

00004d2c <__ultoa_invert>:
    4d2c:	fa 01       	movw	r30, r20
    4d2e:	aa 27       	eor	r26, r26
    4d30:	28 30       	cpi	r18, 0x08	; 8
    4d32:	51 f1       	breq	.+84     	; 0x4d88 <__ultoa_invert+0x5c>
    4d34:	20 31       	cpi	r18, 0x10	; 16
    4d36:	81 f1       	breq	.+96     	; 0x4d98 <__ultoa_invert+0x6c>
    4d38:	e8 94       	clt
    4d3a:	6f 93       	push	r22
    4d3c:	6e 7f       	andi	r22, 0xFE	; 254
    4d3e:	6e 5f       	subi	r22, 0xFE	; 254
    4d40:	7f 4f       	sbci	r23, 0xFF	; 255
    4d42:	8f 4f       	sbci	r24, 0xFF	; 255
    4d44:	9f 4f       	sbci	r25, 0xFF	; 255
    4d46:	af 4f       	sbci	r26, 0xFF	; 255
    4d48:	b1 e0       	ldi	r27, 0x01	; 1
    4d4a:	3e d0       	rcall	.+124    	; 0x4dc8 <__ultoa_invert+0x9c>
    4d4c:	b4 e0       	ldi	r27, 0x04	; 4
    4d4e:	3c d0       	rcall	.+120    	; 0x4dc8 <__ultoa_invert+0x9c>
    4d50:	67 0f       	add	r22, r23
    4d52:	78 1f       	adc	r23, r24
    4d54:	89 1f       	adc	r24, r25
    4d56:	9a 1f       	adc	r25, r26
    4d58:	a1 1d       	adc	r26, r1
    4d5a:	68 0f       	add	r22, r24
    4d5c:	79 1f       	adc	r23, r25
    4d5e:	8a 1f       	adc	r24, r26
    4d60:	91 1d       	adc	r25, r1
    4d62:	a1 1d       	adc	r26, r1
    4d64:	6a 0f       	add	r22, r26
    4d66:	71 1d       	adc	r23, r1
    4d68:	81 1d       	adc	r24, r1
    4d6a:	91 1d       	adc	r25, r1
    4d6c:	a1 1d       	adc	r26, r1
    4d6e:	20 d0       	rcall	.+64     	; 0x4db0 <__ultoa_invert+0x84>
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <__ultoa_invert+0x48>
    4d72:	68 94       	set
    4d74:	3f 91       	pop	r19
    4d76:	2a e0       	ldi	r18, 0x0A	; 10
    4d78:	26 9f       	mul	r18, r22
    4d7a:	11 24       	eor	r1, r1
    4d7c:	30 19       	sub	r19, r0
    4d7e:	30 5d       	subi	r19, 0xD0	; 208
    4d80:	31 93       	st	Z+, r19
    4d82:	de f6       	brtc	.-74     	; 0x4d3a <__ultoa_invert+0xe>
    4d84:	cf 01       	movw	r24, r30
    4d86:	08 95       	ret
    4d88:	46 2f       	mov	r20, r22
    4d8a:	47 70       	andi	r20, 0x07	; 7
    4d8c:	40 5d       	subi	r20, 0xD0	; 208
    4d8e:	41 93       	st	Z+, r20
    4d90:	b3 e0       	ldi	r27, 0x03	; 3
    4d92:	0f d0       	rcall	.+30     	; 0x4db2 <__ultoa_invert+0x86>
    4d94:	c9 f7       	brne	.-14     	; 0x4d88 <__ultoa_invert+0x5c>
    4d96:	f6 cf       	rjmp	.-20     	; 0x4d84 <__ultoa_invert+0x58>
    4d98:	46 2f       	mov	r20, r22
    4d9a:	4f 70       	andi	r20, 0x0F	; 15
    4d9c:	40 5d       	subi	r20, 0xD0	; 208
    4d9e:	4a 33       	cpi	r20, 0x3A	; 58
    4da0:	18 f0       	brcs	.+6      	; 0x4da8 <__ultoa_invert+0x7c>
    4da2:	49 5d       	subi	r20, 0xD9	; 217
    4da4:	31 fd       	sbrc	r19, 1
    4da6:	40 52       	subi	r20, 0x20	; 32
    4da8:	41 93       	st	Z+, r20
    4daa:	02 d0       	rcall	.+4      	; 0x4db0 <__ultoa_invert+0x84>
    4dac:	a9 f7       	brne	.-22     	; 0x4d98 <__ultoa_invert+0x6c>
    4dae:	ea cf       	rjmp	.-44     	; 0x4d84 <__ultoa_invert+0x58>
    4db0:	b4 e0       	ldi	r27, 0x04	; 4
    4db2:	a6 95       	lsr	r26
    4db4:	97 95       	ror	r25
    4db6:	87 95       	ror	r24
    4db8:	77 95       	ror	r23
    4dba:	67 95       	ror	r22
    4dbc:	ba 95       	dec	r27
    4dbe:	c9 f7       	brne	.-14     	; 0x4db2 <__ultoa_invert+0x86>
    4dc0:	00 97       	sbiw	r24, 0x00	; 0
    4dc2:	61 05       	cpc	r22, r1
    4dc4:	71 05       	cpc	r23, r1
    4dc6:	08 95       	ret
    4dc8:	9b 01       	movw	r18, r22
    4dca:	ac 01       	movw	r20, r24
    4dcc:	0a 2e       	mov	r0, r26
    4dce:	06 94       	lsr	r0
    4dd0:	57 95       	ror	r21
    4dd2:	47 95       	ror	r20
    4dd4:	37 95       	ror	r19
    4dd6:	27 95       	ror	r18
    4dd8:	ba 95       	dec	r27
    4dda:	c9 f7       	brne	.-14     	; 0x4dce <__ultoa_invert+0xa2>
    4ddc:	62 0f       	add	r22, r18
    4dde:	73 1f       	adc	r23, r19
    4de0:	84 1f       	adc	r24, r20
    4de2:	95 1f       	adc	r25, r21
    4de4:	a0 1d       	adc	r26, r0
    4de6:	08 95       	ret

00004de8 <eeprom_read_byte>:
    4de8:	f9 99       	sbic	0x1f, 1	; 31
    4dea:	fe cf       	rjmp	.-4      	; 0x4de8 <eeprom_read_byte>
    4dec:	92 bd       	out	0x22, r25	; 34
    4dee:	81 bd       	out	0x21, r24	; 33
    4df0:	f8 9a       	sbi	0x1f, 0	; 31
    4df2:	99 27       	eor	r25, r25
    4df4:	80 b5       	in	r24, 0x20	; 32
    4df6:	08 95       	ret

00004df8 <eeprom_read_dword>:
    4df8:	a6 e1       	ldi	r26, 0x16	; 22
    4dfa:	b0 e0       	ldi	r27, 0x00	; 0
    4dfc:	44 e0       	ldi	r20, 0x04	; 4
    4dfe:	50 e0       	ldi	r21, 0x00	; 0
    4e00:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <eeprom_read_blraw>

00004e04 <eeprom_read_word>:
    4e04:	a8 e1       	ldi	r26, 0x18	; 24
    4e06:	b0 e0       	ldi	r27, 0x00	; 0
    4e08:	42 e0       	ldi	r20, 0x02	; 2
    4e0a:	50 e0       	ldi	r21, 0x00	; 0
    4e0c:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <eeprom_read_blraw>

00004e10 <eeprom_update_byte>:
    4e10:	26 2f       	mov	r18, r22

00004e12 <eeprom_update_r18>:
    4e12:	f9 99       	sbic	0x1f, 1	; 31
    4e14:	fe cf       	rjmp	.-4      	; 0x4e12 <eeprom_update_r18>
    4e16:	92 bd       	out	0x22, r25	; 34
    4e18:	81 bd       	out	0x21, r24	; 33
    4e1a:	f8 9a       	sbi	0x1f, 0	; 31
    4e1c:	01 97       	sbiw	r24, 0x01	; 1
    4e1e:	00 b4       	in	r0, 0x20	; 32
    4e20:	02 16       	cp	r0, r18
    4e22:	39 f0       	breq	.+14     	; 0x4e32 <eeprom_update_r18+0x20>
    4e24:	1f ba       	out	0x1f, r1	; 31
    4e26:	20 bd       	out	0x20, r18	; 32
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	fa 9a       	sbi	0x1f, 2	; 31
    4e2e:	f9 9a       	sbi	0x1f, 1	; 31
    4e30:	0f be       	out	0x3f, r0	; 63
    4e32:	08 95       	ret

00004e34 <eeprom_update_dword>:
    4e34:	03 96       	adiw	r24, 0x03	; 3
    4e36:	27 2f       	mov	r18, r23
    4e38:	0e 94 09 27 	call	0x4e12	; 0x4e12 <eeprom_update_r18>
    4e3c:	0e 94 08 27 	call	0x4e10	; 0x4e10 <eeprom_update_byte>
    4e40:	25 2f       	mov	r18, r21
    4e42:	0e 94 09 27 	call	0x4e12	; 0x4e12 <eeprom_update_r18>
    4e46:	24 2f       	mov	r18, r20
    4e48:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <eeprom_update_r18>

00004e4c <eeprom_update_word>:
    4e4c:	01 96       	adiw	r24, 0x01	; 1
    4e4e:	27 2f       	mov	r18, r23
    4e50:	0e 94 09 27 	call	0x4e12	; 0x4e12 <eeprom_update_r18>
    4e54:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <eeprom_update_byte>

00004e58 <eeprom_write_byte>:
    4e58:	26 2f       	mov	r18, r22

00004e5a <eeprom_write_r18>:
    4e5a:	f9 99       	sbic	0x1f, 1	; 31
    4e5c:	fe cf       	rjmp	.-4      	; 0x4e5a <eeprom_write_r18>
    4e5e:	1f ba       	out	0x1f, r1	; 31
    4e60:	92 bd       	out	0x22, r25	; 34
    4e62:	81 bd       	out	0x21, r24	; 33
    4e64:	20 bd       	out	0x20, r18	; 32
    4e66:	0f b6       	in	r0, 0x3f	; 63
    4e68:	f8 94       	cli
    4e6a:	fa 9a       	sbi	0x1f, 2	; 31
    4e6c:	f9 9a       	sbi	0x1f, 1	; 31
    4e6e:	0f be       	out	0x3f, r0	; 63
    4e70:	01 96       	adiw	r24, 0x01	; 1
    4e72:	08 95       	ret

00004e74 <eeprom_write_dword>:
    4e74:	24 2f       	mov	r18, r20
    4e76:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <eeprom_write_r18>
    4e7a:	25 2f       	mov	r18, r21
    4e7c:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <eeprom_write_r18>
    4e80:	0c 94 42 27 	jmp	0x4e84	; 0x4e84 <eeprom_write_word>

00004e84 <eeprom_write_word>:
    4e84:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <eeprom_write_byte>
    4e88:	27 2f       	mov	r18, r23
    4e8a:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <eeprom_write_r18>

00004e8e <eeprom_read_block>:
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22

00004e92 <eeprom_read_blraw>:
    4e92:	fc 01       	movw	r30, r24
    4e94:	f9 99       	sbic	0x1f, 1	; 31
    4e96:	fe cf       	rjmp	.-4      	; 0x4e94 <eeprom_read_blraw+0x2>
    4e98:	06 c0       	rjmp	.+12     	; 0x4ea6 <eeprom_read_blraw+0x14>
    4e9a:	f2 bd       	out	0x22, r31	; 34
    4e9c:	e1 bd       	out	0x21, r30	; 33
    4e9e:	f8 9a       	sbi	0x1f, 0	; 31
    4ea0:	31 96       	adiw	r30, 0x01	; 1
    4ea2:	00 b4       	in	r0, 0x20	; 32
    4ea4:	0d 92       	st	X+, r0
    4ea6:	41 50       	subi	r20, 0x01	; 1
    4ea8:	50 40       	sbci	r21, 0x00	; 0
    4eaa:	b8 f7       	brcc	.-18     	; 0x4e9a <eeprom_read_blraw+0x8>
    4eac:	08 95       	ret

00004eae <__prologue_saves__>:
    4eae:	2f 92       	push	r2
    4eb0:	3f 92       	push	r3
    4eb2:	4f 92       	push	r4
    4eb4:	5f 92       	push	r5
    4eb6:	6f 92       	push	r6
    4eb8:	7f 92       	push	r7
    4eba:	8f 92       	push	r8
    4ebc:	9f 92       	push	r9
    4ebe:	af 92       	push	r10
    4ec0:	bf 92       	push	r11
    4ec2:	cf 92       	push	r12
    4ec4:	df 92       	push	r13
    4ec6:	ef 92       	push	r14
    4ec8:	ff 92       	push	r15
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    4ed6:	ca 1b       	sub	r28, r26
    4ed8:	db 0b       	sbc	r29, r27
    4eda:	0f b6       	in	r0, 0x3f	; 63
    4edc:	f8 94       	cli
    4ede:	de bf       	out	0x3e, r29	; 62
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	cd bf       	out	0x3d, r28	; 61
    4ee4:	09 94       	ijmp

00004ee6 <__epilogue_restores__>:
    4ee6:	2a 88       	ldd	r2, Y+18	; 0x12
    4ee8:	39 88       	ldd	r3, Y+17	; 0x11
    4eea:	48 88       	ldd	r4, Y+16	; 0x10
    4eec:	5f 84       	ldd	r5, Y+15	; 0x0f
    4eee:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ef0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ef2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ef4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ef6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ef8:	b9 84       	ldd	r11, Y+9	; 0x09
    4efa:	c8 84       	ldd	r12, Y+8	; 0x08
    4efc:	df 80       	ldd	r13, Y+7	; 0x07
    4efe:	ee 80       	ldd	r14, Y+6	; 0x06
    4f00:	fd 80       	ldd	r15, Y+5	; 0x05
    4f02:	0c 81       	ldd	r16, Y+4	; 0x04
    4f04:	1b 81       	ldd	r17, Y+3	; 0x03
    4f06:	aa 81       	ldd	r26, Y+2	; 0x02
    4f08:	b9 81       	ldd	r27, Y+1	; 0x01
    4f0a:	ce 0f       	add	r28, r30
    4f0c:	d1 1d       	adc	r29, r1
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	ed 01       	movw	r28, r26
    4f1a:	08 95       	ret

00004f1c <__do_global_dtors>:
    4f1c:	12 e0       	ldi	r17, 0x02	; 2
    4f1e:	c5 e1       	ldi	r28, 0x15	; 21
    4f20:	d2 e0       	ldi	r29, 0x02	; 2
    4f22:	04 c0       	rjmp	.+8      	; 0x4f2c <__do_global_dtors+0x10>
    4f24:	fe 01       	movw	r30, r28
    4f26:	0e 94 87 23 	call	0x470e	; 0x470e <__tablejump2__>
    4f2a:	21 96       	adiw	r28, 0x01	; 1
    4f2c:	c6 31       	cpi	r28, 0x16	; 22
    4f2e:	d1 07       	cpc	r29, r17
    4f30:	c9 f7       	brne	.-14     	; 0x4f24 <__do_global_dtors+0x8>
    4f32:	f8 94       	cli

00004f34 <__stop_program>:
    4f34:	ff cf       	rjmp	.-2      	; 0x4f34 <__stop_program>
