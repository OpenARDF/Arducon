
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fc  00800100  00005ff4  000060a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ff4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b4  008002fc  008002fc  000062a4  2**0
                  ALLOC
  3 .eeprom       00000323  00810000  00810000  000062a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  000065c7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006624  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004a0  00000000  00000000  00006668  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000073ce  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001930  00000000  00000000  0000ded6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000043df  00000000  00000000  0000f806  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d84  00000000  00000000  00013be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000242e  00000000  00000000  0001496c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005916  00000000  00000000  00016d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000478  00000000  00000000  0001c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__dtors_end>
       4:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_1>
       8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
       c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      14:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__vector_5>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      20:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_8>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      2c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_14>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_18>
      4c:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__vector_19>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_21>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      68:	53 01       	movw	r10, r6
      6a:	5e 01       	movw	r10, r28
      6c:	69 01       	movw	r12, r18
      6e:	74 01       	movw	r14, r8
      70:	7f 01       	movw	r14, r30
      72:	8a 01       	movw	r16, r20
      74:	95 01       	movw	r18, r10
      76:	a0 01       	movw	r20, r0
      78:	ab 01       	movw	r20, r22
      7a:	0c 02       	muls	r16, r28
      7c:	0c 02       	muls	r16, r28
      7e:	b6 01       	movw	r22, r12
      80:	c1 01       	movw	r24, r2
      82:	ce 01       	movw	r24, r28
      84:	db 01       	movw	r26, r22
      86:	e8 01       	movw	r28, r16
      88:	f5 01       	movw	r30, r10
      8a:	02 02       	muls	r16, r18
      8c:	17 02       	muls	r17, r23
      8e:	1b 02       	muls	r17, r27
      90:	1f 02       	muls	r17, r31
      92:	23 02       	muls	r18, r19
      94:	27 02       	muls	r18, r23
      96:	2b 02       	muls	r18, r27
      98:	2f 02       	muls	r18, r31
      9a:	34 02       	muls	r19, r20
      9c:	38 02       	muls	r19, r24
      9e:	51 02       	muls	r21, r17
      a0:	51 02       	muls	r21, r17
      a2:	3c 02       	muls	r19, r28
      a4:	40 02       	muls	r20, r16
      a6:	45 02       	muls	r20, r21
      a8:	49 02       	muls	r20, r25
      aa:	4d 02       	muls	r20, r29
      ac:	63 02       	muls	r22, r19
      ae:	69 02       	muls	r22, r25
      b0:	6f 02       	muls	r22, r31
      b2:	75 02       	muls	r23, r21
      b4:	7b 02       	muls	r23, r27
      b6:	81 02       	muls	r24, r17
      b8:	87 02       	muls	r24, r23
      ba:	8d 02       	muls	r24, r29
      bc:	93 02       	muls	r25, r19
      be:	b6 02       	muls	r27, r22
      c0:	b6 02       	muls	r27, r22
      c2:	99 02       	muls	r25, r25
      c4:	9f 02       	muls	r25, r31
      c6:	a5 02       	muls	r26, r21
      c8:	ab 02       	muls	r26, r27
      ca:	b1 02       	muls	r27, r17
      cc:	d7 02       	muls	r29, r23
      ce:	36 03       	mulsu	r19, r22
      d0:	36 03       	mulsu	r19, r22
      d2:	f4 02       	muls	r31, r20
      d4:	1b 03       	fmul	r17, r19
      d6:	d4 02       	muls	r29, r20
      d8:	1e 03       	fmul	r17, r22
      da:	24 03       	mulsu	r18, r20
      dc:	d1 02       	muls	r29, r17
      de:	15 03       	mulsu	r17, r21
      e0:	2e 03       	fmul	r18, r22
      e2:	ce 02       	muls	r28, r30
      e4:	18 03       	fmul	r17, r16
      e6:	27 03       	mulsu	r18, r23
      e8:	7f 03       	fmul	r23, r23
      ea:	51 03       	mulsu	r21, r17
      ec:	82 03       	fmuls	r16, r18
      ee:	54 03       	mulsu	r21, r20
      f0:	57 03       	mulsu	r21, r23
      f2:	5a 03       	fmul	r21, r18
      f4:	5d 03       	fmul	r21, r21
      f6:	60 03       	mulsu	r22, r16
      f8:	63 03       	mulsu	r22, r19
      fa:	66 03       	mulsu	r22, r22
      fc:	69 03       	fmul	r22, r17
      fe:	61 1b       	sub	r22, r17
     100:	96 1b       	sub	r25, r22
     102:	c5 1b       	sub	r28, r21
     104:	cf 1b       	sub	r28, r31
     106:	d9 1b       	sub	r29, r25
     108:	e3 1b       	sub	r30, r19
     10a:	64 1c       	adc	r6, r4
     10c:	d5 1c       	adc	r13, r5
     10e:	50 1d       	adc	r21, r0
     110:	93 1d       	adc	r25, r3
     112:	d6 1d       	adc	r29, r6
     114:	14 1d       	adc	r17, r4
     116:	1d 1e       	adc	r1, r29
     118:	2d 1c       	adc	r2, r13
     11a:	41 1e       	adc	r4, r17
     11c:	6d 1e       	adc	r6, r29
     11e:	2a 24       	eor	r2, r10
     120:	ee 23       	and	r30, r30
     122:	1a 24       	eor	r1, r10
     124:	32 24       	eor	r3, r2
     126:	1e 24       	eor	r1, r14
     128:	32 24       	eor	r3, r2
     12a:	fe 23       	and	r31, r30
     12c:	ea 23       	and	r30, r26
     12e:	f6 23       	and	r31, r22
     130:	fa 23       	and	r31, r26
     132:	32 24       	eor	r3, r2
     134:	0e 24       	eor	r0, r14
     136:	e2 23       	and	r30, r18
     138:	12 24       	eor	r1, r2
     13a:	de 23       	and	r29, r30
     13c:	f2 23       	and	r31, r18
     13e:	b6 23       	and	r27, r22
     140:	ba 23       	and	r27, r26
     142:	be 23       	and	r27, r30
     144:	c2 23       	and	r28, r18
     146:	c6 23       	and	r28, r22
     148:	ca 23       	and	r28, r26
     14a:	ce 23       	and	r28, r30
     14c:	d2 23       	and	r29, r18
     14e:	d6 23       	and	r29, r22
     150:	da 23       	and	r29, r26
     152:	02 24       	eor	r0, r2
     154:	06 24       	eor	r0, r6
     156:	2e 24       	eor	r2, r14
     158:	0a 24       	eor	r0, r10
     15a:	32 24       	eor	r3, r2
     15c:	e6 23       	and	r30, r22
     15e:	22 24       	eor	r2, r2
     160:	36 24       	eor	r3, r6
     162:	52 23       	and	r21, r18
     164:	56 23       	and	r21, r22
     166:	5a 23       	and	r21, r26
     168:	5e 23       	and	r21, r30
     16a:	62 23       	and	r22, r18
     16c:	66 23       	and	r22, r22
     16e:	6a 23       	and	r22, r26
     170:	6e 23       	and	r22, r30
     172:	72 23       	and	r23, r18
     174:	76 23       	and	r23, r22
     176:	7a 23       	and	r23, r26
     178:	7e 23       	and	r23, r30
     17a:	82 23       	and	r24, r18
     17c:	86 23       	and	r24, r22
     17e:	8a 23       	and	r24, r26
     180:	8e 23       	and	r24, r30
     182:	92 23       	and	r25, r18
     184:	96 23       	and	r25, r22
     186:	9a 23       	and	r25, r26
     188:	9e 23       	and	r25, r30
     18a:	a2 23       	and	r26, r18
     18c:	a6 23       	and	r26, r22
     18e:	aa 23       	and	r26, r26
     190:	ae 23       	and	r26, r30
     192:	b2 23       	and	r27, r18
     194:	32 24       	eor	r3, r2
     196:	32 24       	eor	r3, r2
     198:	32 24       	eor	r3, r2
     19a:	32 24       	eor	r3, r2
     19c:	16 24       	eor	r1, r6
     19e:	32 24       	eor	r3, r2
     1a0:	32 24       	eor	r3, r2
     1a2:	32 24       	eor	r3, r2
     1a4:	32 24       	eor	r3, r2
     1a6:	32 24       	eor	r3, r2
     1a8:	32 24       	eor	r3, r2
     1aa:	32 24       	eor	r3, r2
     1ac:	32 24       	eor	r3, r2
     1ae:	32 24       	eor	r3, r2
     1b0:	32 24       	eor	r3, r2
     1b2:	32 24       	eor	r3, r2
     1b4:	32 24       	eor	r3, r2
     1b6:	32 24       	eor	r3, r2
     1b8:	32 24       	eor	r3, r2
     1ba:	32 24       	eor	r3, r2
     1bc:	32 24       	eor	r3, r2
     1be:	32 24       	eor	r3, r2
     1c0:	32 24       	eor	r3, r2
     1c2:	32 24       	eor	r3, r2
     1c4:	32 24       	eor	r3, r2
     1c6:	32 24       	eor	r3, r2
     1c8:	32 24       	eor	r3, r2
     1ca:	32 24       	eor	r3, r2
     1cc:	32 24       	eor	r3, r2
     1ce:	32 24       	eor	r3, r2
     1d0:	32 24       	eor	r3, r2
     1d2:	32 24       	eor	r3, r2
     1d4:	32 24       	eor	r3, r2
     1d6:	26 24       	eor	r2, r6
     1d8:	05 a8       	ldd	r0, Z+53	; 0x35
     1da:	4c cd       	rjmp	.-1384   	; 0xfffffc74 <__eeprom_end+0xff7ef951>
     1dc:	b2 d4       	rcall	.+2404   	; 0xb42 <_ZN8Goertzel18SetTargetFrequencyEf+0x9e>
     1de:	4e b9       	out	0x0e, r20	; 14
     1e0:	38 36       	cpi	r19, 0x68	; 104
     1e2:	a9 02       	muls	r26, r25
     1e4:	0c 50       	subi	r16, 0x0C	; 12
     1e6:	b9 91       	ld	r27, Y+
     1e8:	86 88       	ldd	r8, Z+22	; 0x16
     1ea:	08 3c       	cpi	r16, 0xC8	; 200
     1ec:	a6 aa       	std	Z+54, r10	; 0x36
     1ee:	aa 2a       	or	r10, r26
     1f0:	be 00       	.word	0x00be	; ????
     1f2:	00 00       	nop
     1f4:	80 3f       	cpi	r24, 0xF0	; 240

000001f6 <__ctors_start>:
     1f6:	29 23       	and	r18, r25

000001f8 <__ctors_end>:
     1f8:	3e 23       	and	r19, r30

000001fa <__dtors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	d8 e0       	ldi	r29, 0x08	; 8
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	12 e0       	ldi	r17, 0x02	; 2
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	e4 ef       	ldi	r30, 0xF4	; 244
     20e:	ff e5       	ldi	r31, 0x5F	; 95
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	ac 3f       	cpi	r26, 0xFC	; 252
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	25 e0       	ldi	r18, 0x05	; 5
     21e:	ac ef       	ldi	r26, 0xFC	; 252
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a0 3b       	cpi	r26, 0xB0	; 176
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cc ef       	ldi	r28, 0xFC	; 252
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <__tablejump2__>
     23c:	cb 3f       	cpi	r28, 0xFB	; 251
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 01 22 	call	0x4402	; 0x4402 <main>
     246:	0c 94 ed 2f 	jmp	0x5fda	; 0x5fda <__do_global_dtors>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <month_length>:
     24e:	62 30       	cpi	r22, 0x02	; 2
     250:	21 f4       	brne	.+8      	; 0x25a <month_length+0xc>
     252:	0e 94 34 01 	call	0x268	; 0x268 <is_leap_year>
     256:	84 5e       	subi	r24, 0xE4	; 228
     258:	08 95       	ret
     25a:	68 30       	cpi	r22, 0x08	; 8
     25c:	08 f0       	brcs	.+2      	; 0x260 <month_length+0x12>
     25e:	6f 5f       	subi	r22, 0xFF	; 255
     260:	61 70       	andi	r22, 0x01	; 1
     262:	8e e1       	ldi	r24, 0x1E	; 30
     264:	86 0f       	add	r24, r22
     266:	08 95       	ret

00000268 <is_leap_year>:
     268:	9c 01       	movw	r18, r24
     26a:	23 70       	andi	r18, 0x03	; 3
     26c:	33 27       	eor	r19, r19
     26e:	23 2b       	or	r18, r19
     270:	59 f4       	brne	.+22     	; 0x288 <is_leap_year+0x20>
     272:	64 e6       	ldi	r22, 0x64	; 100
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
     27a:	89 2b       	or	r24, r25
     27c:	39 f4       	brne	.+14     	; 0x28c <is_leap_year+0x24>
     27e:	63 70       	andi	r22, 0x03	; 3
     280:	77 27       	eor	r23, r23
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	67 2b       	or	r22, r23
     286:	19 f0       	breq	.+6      	; 0x28e <is_leap_year+0x26>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	08 95       	ret
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	08 95       	ret

00000290 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
     294:	32 97       	sbiw	r30, 0x02	; 2
     296:	e2 31       	cpi	r30, 0x12	; 18
     298:	f1 05       	cpc	r31, r1
     29a:	08 f0       	brcs	.+2      	; 0x29e <_Z7pinModehh+0xe>
     29c:	bd c0       	rjmp	.+378    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     29e:	ec 5c       	subi	r30, 0xCC	; 204
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     2a6:	61 30       	cpi	r22, 0x01	; 1
     2a8:	11 f4       	brne	.+4      	; 0x2ae <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     2aa:	52 9a       	sbi	0x0a, 2	; 10
     2ac:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2ae:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2b0:	63 30       	cpi	r22, 0x03	; 3
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2b4:	5a 9a       	sbi	0x0b, 2	; 11
     2b6:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2b8:	5a 98       	cbi	0x0b, 2	; 11
     2ba:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2bc:	61 30       	cpi	r22, 0x01	; 1
     2be:	11 f4       	brne	.+4      	; 0x2c4 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2c0:	53 9a       	sbi	0x0a, 3	; 10
     2c2:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2c4:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2c6:	63 30       	cpi	r22, 0x03	; 3
     2c8:	11 f4       	brne	.+4      	; 0x2ce <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2ca:	5b 9a       	sbi	0x0b, 3	; 11
     2cc:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2ce:	5b 98       	cbi	0x0b, 3	; 11
     2d0:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     2d2:	61 30       	cpi	r22, 0x01	; 1
     2d4:	11 f4       	brne	.+4      	; 0x2da <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     2d6:	54 9a       	sbi	0x0a, 4	; 10
     2d8:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     2da:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     2dc:	63 30       	cpi	r22, 0x03	; 3
     2de:	11 f4       	brne	.+4      	; 0x2e4 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     2e0:	5c 9a       	sbi	0x0b, 4	; 11
     2e2:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     2e4:	5c 98       	cbi	0x0b, 4	; 11
     2e6:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     2e8:	61 30       	cpi	r22, 0x01	; 1
     2ea:	11 f4       	brne	.+4      	; 0x2f0 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     2ec:	55 9a       	sbi	0x0a, 5	; 10
     2ee:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     2f0:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     2f2:	63 30       	cpi	r22, 0x03	; 3
     2f4:	11 f4       	brne	.+4      	; 0x2fa <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     2f6:	5d 9a       	sbi	0x0b, 5	; 11
     2f8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     2fa:	5d 98       	cbi	0x0b, 5	; 11
     2fc:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     2fe:	61 30       	cpi	r22, 0x01	; 1
     300:	11 f4       	brne	.+4      	; 0x306 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     302:	56 9a       	sbi	0x0a, 6	; 10
     304:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     306:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     308:	63 30       	cpi	r22, 0x03	; 3
     30a:	11 f4       	brne	.+4      	; 0x310 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     30c:	5e 9a       	sbi	0x0b, 6	; 11
     30e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     310:	5e 98       	cbi	0x0b, 6	; 11
     312:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     314:	61 30       	cpi	r22, 0x01	; 1
     316:	11 f4       	brne	.+4      	; 0x31c <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     318:	57 9a       	sbi	0x0a, 7	; 10
     31a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     31c:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     31e:	63 30       	cpi	r22, 0x03	; 3
     320:	11 f4       	brne	.+4      	; 0x326 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     322:	5f 9a       	sbi	0x0b, 7	; 11
     324:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     326:	5f 98       	cbi	0x0b, 7	; 11
     328:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     32a:	61 30       	cpi	r22, 0x01	; 1
     32c:	11 f4       	brne	.+4      	; 0x332 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB0);
     32e:	20 9a       	sbi	0x04, 0	; 4
     330:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     332:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     334:	63 30       	cpi	r22, 0x03	; 3
     336:	11 f4       	brne	.+4      	; 0x33c <_Z7pinModehh+0xac>
				{
					PORTB  |= (1 << PORTB0);
     338:	28 9a       	sbi	0x05, 0	; 5
     33a:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     33c:	28 98       	cbi	0x05, 0	; 5
     33e:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     340:	61 30       	cpi	r22, 0x01	; 1
     342:	11 f4       	brne	.+4      	; 0x348 <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB1);
     344:	21 9a       	sbi	0x04, 1	; 4
     346:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     348:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	11 f4       	brne	.+4      	; 0x352 <_Z7pinModehh+0xc2>
				{
					PORTB  |= (1 << PORTB1);
     34e:	29 9a       	sbi	0x05, 1	; 5
     350:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     352:	29 98       	cbi	0x05, 1	; 5
     354:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     356:	61 30       	cpi	r22, 0x01	; 1
     358:	11 f4       	brne	.+4      	; 0x35e <_Z7pinModehh+0xce>
			{
				DDRB  |= (1 << PORTB2);
     35a:	22 9a       	sbi	0x04, 2	; 4
     35c:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     35e:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     360:	63 30       	cpi	r22, 0x03	; 3
     362:	11 f4       	brne	.+4      	; 0x368 <_Z7pinModehh+0xd8>
				{
					PORTB  |= (1 << PORTB2);
     364:	2a 9a       	sbi	0x05, 2	; 5
     366:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     368:	2a 98       	cbi	0x05, 2	; 5
     36a:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     36c:	61 30       	cpi	r22, 0x01	; 1
     36e:	11 f4       	brne	.+4      	; 0x374 <_Z7pinModehh+0xe4>
			{
				DDRB  |= (1 << PORTB5);
     370:	25 9a       	sbi	0x04, 5	; 4
     372:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     374:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     376:	63 30       	cpi	r22, 0x03	; 3
     378:	11 f4       	brne	.+4      	; 0x37e <_Z7pinModehh+0xee>
				{
					PORTD  |= (1 << PORTB5);
     37a:	5d 9a       	sbi	0x0b, 5	; 11
     37c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     37e:	5d 98       	cbi	0x0b, 5	; 11
     380:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	11 f4       	brne	.+4      	; 0x38a <_Z7pinModehh+0xfa>
			{
				DDRC  |= (1 << PORTC0);
     386:	38 9a       	sbi	0x07, 0	; 7
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <_Z7pinModehh+0x110>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     38a:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     38c:	63 30       	cpi	r22, 0x03	; 3
     38e:	19 f4       	brne	.+6      	; 0x396 <_Z7pinModehh+0x106>
				{
					PORTC  |= (1 << PORTC0);
     390:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     392:	39 98       	cbi	0x07, 1	; 7
     394:	0a c0       	rjmp	.+20     	; 0x3aa <_Z7pinModehh+0x11a>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     396:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     398:	39 98       	cbi	0x07, 1	; 7
     39a:	0a c0       	rjmp	.+20     	; 0x3b0 <_Z7pinModehh+0x120>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     39c:	61 30       	cpi	r22, 0x01	; 1
     39e:	11 f4       	brne	.+4      	; 0x3a4 <_Z7pinModehh+0x114>
			{
				DDRC  |= (1 << PORTC1);
     3a0:	39 9a       	sbi	0x07, 1	; 7
     3a2:	0b c0       	rjmp	.+22     	; 0x3ba <_Z7pinModehh+0x12a>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3a4:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     3a6:	63 30       	cpi	r22, 0x03	; 3
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <_Z7pinModehh+0x120>
				{
					PORTC  |= (1 << PORTC1);
     3aa:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3ac:	3a 98       	cbi	0x07, 2	; 7
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <_Z7pinModehh+0x134>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     3b0:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3b2:	3a 98       	cbi	0x07, 2	; 7
     3b4:	0a c0       	rjmp	.+20     	; 0x3ca <_Z7pinModehh+0x13a>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     3b6:	61 30       	cpi	r22, 0x01	; 1
     3b8:	11 f4       	brne	.+4      	; 0x3be <_Z7pinModehh+0x12e>
			{
				DDRC  |= (1 << PORTC2);
     3ba:	3a 9a       	sbi	0x07, 2	; 7
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <_Z7pinModehh+0x144>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3be:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     3c0:	63 30       	cpi	r22, 0x03	; 3
     3c2:	19 f4       	brne	.+6      	; 0x3ca <_Z7pinModehh+0x13a>
				{
					PORTC  |= (1 << PORTC2);
     3c4:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3c6:	3b 98       	cbi	0x07, 3	; 7
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <_Z7pinModehh+0x14e>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     3ca:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3cc:	3b 98       	cbi	0x07, 3	; 7
     3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <_Z7pinModehh+0x154>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     3d0:	61 30       	cpi	r22, 0x01	; 1
     3d2:	11 f4       	brne	.+4      	; 0x3d8 <_Z7pinModehh+0x148>
			{
				DDRC  |= (1 << PORTC3);
     3d4:	3b 9a       	sbi	0x07, 3	; 7
     3d6:	0b c0       	rjmp	.+22     	; 0x3ee <_Z7pinModehh+0x15e>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3d8:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     3da:	63 30       	cpi	r22, 0x03	; 3
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <_Z7pinModehh+0x154>
				{
					PORTC  |= (1 << PORTC3);
     3de:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3e0:	3c 98       	cbi	0x07, 4	; 7
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <_Z7pinModehh+0x168>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     3e4:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3e6:	3c 98       	cbi	0x07, 4	; 7
     3e8:	0a c0       	rjmp	.+20     	; 0x3fe <_Z7pinModehh+0x16e>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     3ea:	61 30       	cpi	r22, 0x01	; 1
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <_Z7pinModehh+0x162>
			{
				DDRC  |= (1 << PORTC4);
     3ee:	3c 9a       	sbi	0x07, 4	; 7
     3f0:	0b c0       	rjmp	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3f2:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     3f4:	63 30       	cpi	r22, 0x03	; 3
     3f6:	19 f4       	brne	.+6      	; 0x3fe <_Z7pinModehh+0x16e>
				{
					PORTC  |= (1 << PORTC4);
     3f8:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3fa:	3d 98       	cbi	0x07, 5	; 7
     3fc:	0a c0       	rjmp	.+20     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     3fe:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     400:	3d 98       	cbi	0x07, 5	; 7
     402:	09 c0       	rjmp	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     404:	61 30       	cpi	r22, 0x01	; 1
     406:	11 f4       	brne	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				DDRC  |= (1 << PORTC5);
     408:	3d 9a       	sbi	0x07, 5	; 7
     40a:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     40c:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     40e:	63 30       	cpi	r22, 0x03	; 3
     410:	11 f4       	brne	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
				{
					PORTC  |= (1 << PORTC5);
     412:	45 9a       	sbi	0x08, 5	; 8
     414:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     416:	45 98       	cbi	0x08, 5	; 8
     418:	08 95       	ret

0000041a <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	32 97       	sbiw	r30, 0x02	; 2
     420:	e0 31       	cpi	r30, 0x10	; 16
     422:	f1 05       	cpc	r31, r1
     424:	f0 f5       	brcc	.+124    	; 0x4a2 <_Z11digitalReadh+0x88>
     426:	ea 5b       	subi	r30, 0xBA	; 186
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     42e:	29 b1       	in	r18, 0x09	; 9
     430:	24 70       	andi	r18, 0x04	; 4
     432:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     434:	38 c0       	rjmp	.+112    	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     436:	29 b1       	in	r18, 0x09	; 9
     438:	28 70       	andi	r18, 0x08	; 8
     43a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     43c:	34 c0       	rjmp	.+104    	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     43e:	29 b1       	in	r18, 0x09	; 9
     440:	20 71       	andi	r18, 0x10	; 16
     442:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     444:	30 c0       	rjmp	.+96     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     446:	29 b1       	in	r18, 0x09	; 9
     448:	20 72       	andi	r18, 0x20	; 32
     44a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     44c:	2c c0       	rjmp	.+88     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     44e:	29 b1       	in	r18, 0x09	; 9
     450:	20 74       	andi	r18, 0x40	; 64
     452:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     454:	28 c0       	rjmp	.+80     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     456:	29 b1       	in	r18, 0x09	; 9
     458:	20 78       	andi	r18, 0x80	; 128
     45a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     45c:	24 c0       	rjmp	.+72     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     45e:	83 b1       	in	r24, 0x03	; 3
     460:	28 2f       	mov	r18, r24
     462:	21 70       	andi	r18, 0x01	; 1
     464:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     466:	1f c0       	rjmp	.+62     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     468:	23 b1       	in	r18, 0x03	; 3
     46a:	22 70       	andi	r18, 0x02	; 2
     46c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     46e:	1b c0       	rjmp	.+54     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     470:	23 b1       	in	r18, 0x03	; 3
     472:	24 70       	andi	r18, 0x04	; 4
     474:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     476:	17 c0       	rjmp	.+46     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     478:	23 b1       	in	r18, 0x03	; 3
     47a:	20 72       	andi	r18, 0x20	; 32
     47c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47e:	13 c0       	rjmp	.+38     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     480:	86 b1       	in	r24, 0x06	; 6
     482:	28 2f       	mov	r18, r24
     484:	21 70       	andi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     48a:	26 b1       	in	r18, 0x06	; 6
     48c:	22 70       	andi	r18, 0x02	; 2
     48e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     490:	0a c0       	rjmp	.+20     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     492:	26 b1       	in	r18, 0x06	; 6
     494:	24 70       	andi	r18, 0x04	; 4
     496:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     49a:	26 b1       	in	r18, 0x06	; 6
     49c:	28 70       	andi	r18, 0x08	; 8
     49e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	23 2b       	or	r18, r19
     4aa:	09 f4       	brne	.+2      	; 0x4ae <_Z11digitalReadh+0x94>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
}
     4ae:	08 95       	ret

000004b0 <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	32 97       	sbiw	r30, 0x02	; 2
     4b6:	e0 31       	cpi	r30, 0x10	; 16
     4b8:	f1 05       	cpc	r31, r1
     4ba:	08 f0       	brcs	.+2      	; 0x4be <_Z12digitalWritehh+0xe>
     4bc:	57 c0       	rjmp	.+174    	; 0x56c <_Z12digitalWritehh+0xbc>
     4be:	ea 5a       	subi	r30, 0xAA	; 170
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
	{
		case D2:
		{
			if(value)
     4c6:	66 23       	and	r22, r22
     4c8:	11 f0       	breq	.+4      	; 0x4ce <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     4ca:	5a 9a       	sbi	0x0b, 2	; 11
     4cc:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     4ce:	5a 98       	cbi	0x0b, 2	; 11
     4d0:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     4d2:	66 23       	and	r22, r22
     4d4:	11 f0       	breq	.+4      	; 0x4da <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     4d6:	5b 9a       	sbi	0x0b, 3	; 11
     4d8:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     4da:	5b 98       	cbi	0x0b, 3	; 11
     4dc:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     4de:	66 23       	and	r22, r22
     4e0:	11 f0       	breq	.+4      	; 0x4e6 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     4e2:	5c 9a       	sbi	0x0b, 4	; 11
     4e4:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     4e6:	5c 98       	cbi	0x0b, 4	; 11
     4e8:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     4ea:	66 23       	and	r22, r22
     4ec:	11 f0       	breq	.+4      	; 0x4f2 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     4ee:	5d 9a       	sbi	0x0b, 5	; 11
     4f0:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     4f2:	5d 98       	cbi	0x0b, 5	; 11
     4f4:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     4f6:	66 23       	and	r22, r22
     4f8:	11 f0       	breq	.+4      	; 0x4fe <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     4fa:	5e 9a       	sbi	0x0b, 6	; 11
     4fc:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     4fe:	5e 98       	cbi	0x0b, 6	; 11
     500:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     502:	66 23       	and	r22, r22
     504:	11 f0       	breq	.+4      	; 0x50a <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     506:	5f 9a       	sbi	0x0b, 7	; 11
     508:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     50a:	5f 98       	cbi	0x0b, 7	; 11
     50c:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     50e:	66 23       	and	r22, r22
     510:	11 f0       	breq	.+4      	; 0x516 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB0);
     512:	28 9a       	sbi	0x05, 0	; 5
     514:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     516:	28 98       	cbi	0x05, 0	; 5
     518:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     51a:	66 23       	and	r22, r22
     51c:	11 f0       	breq	.+4      	; 0x522 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB1);
     51e:	29 9a       	sbi	0x05, 1	; 5
     520:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     522:	29 98       	cbi	0x05, 1	; 5
     524:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     526:	66 23       	and	r22, r22
     528:	11 f0       	breq	.+4      	; 0x52e <_Z12digitalWritehh+0x7e>
			{
				PORTB  |= (1 << PORTB2);
     52a:	2a 9a       	sbi	0x05, 2	; 5
     52c:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     52e:	2a 98       	cbi	0x05, 2	; 5
     530:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     532:	66 23       	and	r22, r22
     534:	11 f0       	breq	.+4      	; 0x53a <_Z12digitalWritehh+0x8a>
			{
				PORTB  |= (1 << PORTB5);
     536:	2d 9a       	sbi	0x05, 5	; 5
     538:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     53a:	2d 98       	cbi	0x05, 5	; 5
     53c:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     53e:	66 23       	and	r22, r22
     540:	11 f0       	breq	.+4      	; 0x546 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC0);
     542:	40 9a       	sbi	0x08, 0	; 8
     544:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     546:	40 98       	cbi	0x08, 0	; 8
     548:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     54a:	66 23       	and	r22, r22
     54c:	11 f0       	breq	.+4      	; 0x552 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC1);
     54e:	41 9a       	sbi	0x08, 1	; 8
     550:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     552:	41 98       	cbi	0x08, 1	; 8
     554:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     556:	66 23       	and	r22, r22
     558:	11 f0       	breq	.+4      	; 0x55e <_Z12digitalWritehh+0xae>
			{
				PORTC  |= (1 << PORTC2);
     55a:	42 9a       	sbi	0x08, 2	; 8
     55c:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     55e:	42 98       	cbi	0x08, 2	; 8
     560:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     562:	66 23       	and	r22, r22
     564:	11 f0       	breq	.+4      	; 0x56a <_Z12digitalWritehh+0xba>
			{
				PORTC  |= (1 << PORTC3);
     566:	43 9a       	sbi	0x08, 3	; 8
     568:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     56a:	43 98       	cbi	0x08, 3	; 8
     56c:	08 95       	ret

0000056e <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     56e:	08 95       	ret

00000570 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     570:	08 95       	ret

00000572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     57a:	41 15       	cp	r20, r1
     57c:	51 05       	cpc	r21, r1
     57e:	09 f4       	brne	.+2      	; 0x582 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     580:	75 c0       	rjmp	.+234    	; 0x66c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     582:	86 2f       	mov	r24, r22
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	3b 97       	sbiw	r30, 0x0b	; 11
     58a:	ee 30       	cpi	r30, 0x0E	; 14
     58c:	f1 05       	cpc	r31, r1
     58e:	08 f0       	brcs	.+2      	; 0x592 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     590:	6d c0       	rjmp	.+218    	; 0x66c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     592:	da 01       	movw	r26, r20
     594:	ea 59       	subi	r30, 0x9A	; 154
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     59c:	8c e1       	ldi	r24, 0x1C	; 28
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	5f c0       	rjmp	.+190    	; 0x660 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     5a2:	85 e1       	ldi	r24, 0x15	; 21
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	55 c0       	rjmp	.+170    	; 0x652 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     5a8:	81 e1       	ldi	r24, 0x11	; 17
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	49 c0       	rjmp	.+146    	; 0x640 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     5ae:	8a 01       	movw	r16, r20
     5b0:	0f 5f       	subi	r16, 0xFF	; 255
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     5b6:	66 23       	and	r22, r22
     5b8:	71 f0       	breq	.+28     	; 0x5d6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     5ba:	c0 e0       	ldi	r28, 0x00	; 0
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     5be:	21 96       	adiw	r28, 0x01	; 1
     5c0:	ce 01       	movw	r24, r28
     5c2:	87 5a       	subi	r24, 0xA7	; 167
     5c4:	9d 4f       	sbci	r25, 0xFD	; 253
     5c6:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <eeprom_update_byte>
				c = *char_addr++;
     5ca:	f8 01       	movw	r30, r16
     5cc:	61 91       	ld	r22, Z+
     5ce:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     5d0:	61 11       	cpse	r22, r1
     5d2:	f5 cf       	rjmp	.-22     	; 0x5be <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	ce 01       	movw	r24, r28
     5de:	86 5a       	subi	r24, 0xA6	; 166
     5e0:	9d 4f       	sbci	r25, 0xFD	; 253
     5e2:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <eeprom_update_byte>
		}
		break;
     5e6:	42 c0       	rjmp	.+132    	; 0x66c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     5e8:	8a 01       	movw	r16, r20
     5ea:	0f 5f       	subi	r16, 0xFF	; 255
     5ec:	1f 4f       	sbci	r17, 0xFF	; 255
     5ee:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     5f0:	66 23       	and	r22, r22
     5f2:	91 f0       	breq	.+36     	; 0x618 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     5f4:	c0 e0       	ldi	r28, 0x00	; 0
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     5fa:	c8 30       	cpi	r28, 0x08	; 8
     5fc:	d1 05       	cpc	r29, r1
     5fe:	71 f0       	breq	.+28     	; 0x61c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     600:	21 96       	adiw	r28, 0x01	; 1
     602:	ce 01       	movw	r24, r28
     604:	8a 5f       	subi	r24, 0xFA	; 250
     606:	9c 4f       	sbci	r25, 0xFC	; 252
     608:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <eeprom_update_byte>
				c = *uint8_addr++;
     60c:	f8 01       	movw	r30, r16
     60e:	61 91       	ld	r22, Z+
     610:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     612:	61 11       	cpse	r22, r1
     614:	f2 cf       	rjmp	.-28     	; 0x5fa <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     616:	02 c0       	rjmp	.+4      	; 0x61c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     618:	c0 e0       	ldi	r28, 0x00	; 0
     61a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	ce 01       	movw	r24, r28
     620:	89 5f       	subi	r24, 0xF9	; 249
     622:	9c 4f       	sbci	r25, 0xFC	; 252
     624:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <eeprom_update_byte>
		}
		break;
     628:	21 c0       	rjmp	.+66     	; 0x66c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Enable_transmitter:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_transmitter);
     62a:	87 e1       	ldi	r24, 0x17	; 23
     62c:	93 e0       	ldi	r25, 0x03	; 3

		}
		break;
     62e:	08 c0       	rjmp	.+16     	; 0x640 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     630:	80 e2       	ldi	r24, 0x20	; 32
     632:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     634:	05 c0       	rjmp	.+10     	; 0x640 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     636:	80 e1       	ldi	r24, 0x10	; 16
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	02 c0       	rjmp	.+4      	; 0x640 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     63c:	82 e1       	ldi	r24, 0x12	; 18
     63e:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     640:	6c 91       	ld	r22, X
     642:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <eeprom_update_byte>
     646:	12 c0       	rjmp	.+36     	; 0x66c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     648:	83 e1       	ldi	r24, 0x13	; 19
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	02 c0       	rjmp	.+4      	; 0x652 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     64e:	81 e2       	ldi	r24, 0x21	; 33
     650:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     652:	6d 91       	ld	r22, X+
     654:	7c 91       	ld	r23, X
     656:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <eeprom_update_word>
     65a:	08 c0       	rjmp	.+16     	; 0x66c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     65c:	88 e1       	ldi	r24, 0x18	; 24
     65e:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     660:	4d 91       	ld	r20, X+
     662:	5d 91       	ld	r21, X+
     664:	6d 91       	ld	r22, X+
     666:	7c 91       	ld	r23, X
     668:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <eeprom_update_dword>
	}
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	08 95       	ret

00000676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     682:	0e 94 ce 09 	call	0x139c	; 0x139c <_Z10lb_enabledv>
     686:	88 23       	and	r24, r24
     688:	09 f4       	brne	.+2      	; 0x68c <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     68a:	46 c0       	rjmp	.+140    	; 0x718 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     68c:	8c 2f       	mov	r24, r28
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	8b 30       	cpi	r24, 0x0B	; 11
     692:	91 05       	cpc	r25, r1
     694:	08 f0       	brcs	.+2      	; 0x698 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     696:	40 c0       	rjmp	.+128    	; 0x718 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     698:	fc 01       	movw	r30, r24
     69a:	ec 58       	subi	r30, 0x8C	; 140
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	30 c0       	rjmp	.+96     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     6a8:	8e e7       	ldi	r24, 0x7E	; 126
     6aa:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6ac:	2d c0       	rjmp	.+90     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     6ae:	84 ea       	ldi	r24, 0xA4	; 164
     6b0:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6b2:	2a c0       	rjmp	.+84     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     6b4:	8b ec       	ldi	r24, 0xCB	; 203
     6b6:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6b8:	27 c0       	rjmp	.+78     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     6ba:	8c ee       	ldi	r24, 0xEC	; 236
     6bc:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     6be:	24 c0       	rjmp	.+72     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     6c0:	87 e0       	ldi	r24, 0x07	; 7
     6c2:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6c4:	21 c0       	rjmp	.+66     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     6c6:	8d e1       	ldi	r24, 0x1D	; 29
     6c8:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6ca:	1e c0       	rjmp	.+60     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     6cc:	82 e3       	ldi	r24, 0x32	; 50
     6ce:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6d0:	1b c0       	rjmp	.+54     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     6d2:	86 e4       	ldi	r24, 0x46	; 70
     6d4:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     6d6:	18 c0       	rjmp	.+48     	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     6d8:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     6da:	cc 23       	and	r28, r28
     6dc:	e9 f0       	breq	.+58     	; 0x718 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     6de:	8c 2f       	mov	r24, r28
     6e0:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     6e4:	78 01       	movw	r14, r16
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	e8 1a       	sub	r14, r24
     6ea:	f8 0a       	sbc	r15, r24
     6ec:	c8 01       	movw	r24, r16
     6ee:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     6f2:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     6f4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z19linkbusTxInProgressv>
     6f8:	81 11       	cpse	r24, r1
     6fa:	fc cf       	rjmp	.-8      	; 0x6f4 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     6fc:	ed cf       	rjmp	.-38     	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	02 c0       	rjmp	.+4      	; 0x708 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     704:	86 e5       	ldi	r24, 0x56	; 86
     706:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     708:	8c 01       	movw	r16, r24
     70a:	0f 5f       	subi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     712:	c8 2f       	mov	r28, r24

		while(c)
     714:	81 11       	cpse	r24, r1
     716:	e3 cf       	rjmp	.-58     	; 0x6de <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	08 95       	ret

00000724 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     730:	81 e2       	ldi	r24, 0x21	; 33
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     738:	8b 3b       	cpi	r24, 0xBB	; 187
     73a:	91 05       	cpc	r25, r1
     73c:	09 f0       	breq	.+2      	; 0x740 <_ZN13EepromManager11readNonVolsEv+0x1c>
     73e:	b6 c0       	rjmp	.+364    	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     740:	80 e1       	ldi	r24, 0x10	; 16
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	85 30       	cpi	r24, 0x05	; 5
     74c:	91 05       	cpc	r25, r1
     74e:	14 f4       	brge	.+4      	; 0x754 <_ZN13EepromManager11readNonVolsEv+0x30>
     750:	85 e0       	ldi	r24, 0x05	; 5
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	85 31       	cpi	r24, 0x15	; 21
     756:	91 05       	cpc	r25, r1
     758:	14 f0       	brlt	.+4      	; 0x75e <_ZN13EepromManager11readNonVolsEv+0x3a>
     75a:	84 e1       	ldi	r24, 0x14	; 20
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), NO_CODE_START_TONES_5M);
     762:	81 e1       	ldi	r24, 0x11	; 17
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     76a:	86 31       	cpi	r24, 0x16	; 22
     76c:	08 f0       	brcs	.+2      	; 0x770 <_ZN13EepromManager11readNonVolsEv+0x4c>
     76e:	85 e1       	ldi	r24, 0x15	; 21
     770:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     774:	82 e1       	ldi	r24, 0x12	; 18
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     77c:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     780:	83 e1       	ldi	r24, 0x13	; 19
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <eeprom_read_word>
     788:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_atmega_temp_calibration+0x1>
     78c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     790:	85 e1       	ldi	r24, 0x15	; 21
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <eeprom_read_word>
     798:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <g_rv3028_offset+0x1>
     79c:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <g_rv3028_offset>
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
     7a0:	87 e1       	ldi	r24, 0x17	; 23
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     7a8:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     7ac:	88 e1       	ldi	r24, 0x18	; 24
     7ae:	93 e0       	ldi	r25, 0x03	; 3
     7b0:	0e 94 76 2f 	call	0x5eec	; 0x5eec <eeprom_read_dword>
     7b4:	60 93 8d 05 	sts	0x058D, r22	; 0x80058d <g_event_start_epoch>
     7b8:	70 93 8e 05 	sts	0x058E, r23	; 0x80058e <g_event_start_epoch+0x1>
     7bc:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_event_start_epoch+0x2>
     7c0:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     7c4:	8c e1       	ldi	r24, 0x1C	; 28
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 76 2f 	call	0x5eec	; 0x5eec <eeprom_read_dword>
     7cc:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <g_event_finish_epoch>
     7d0:	70 93 8a 05 	sts	0x058A, r23	; 0x80058a <g_event_finish_epoch+0x1>
     7d4:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_event_finish_epoch+0x2>
     7d8:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     7e4:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_utc_offset>
     7e8:	0a e5       	ldi	r16, 0x5A	; 90
     7ea:	12 e0       	ldi	r17, 0x02	; 2
     7ec:	c2 e3       	ldi	r28, 0x32	; 50
     7ee:	d5 e0       	ldi	r29, 0x05	; 5
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f6 e4       	ldi	r31, 0x46	; 70
     7f4:	ef 2e       	mov	r14, r31
     7f6:	f5 e0       	ldi	r31, 0x05	; 5
     7f8:	ff 2e       	mov	r15, r31
     7fa:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     7fc:	c8 01       	movw	r24, r16
     7fe:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     802:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     804:	81 11       	cpse	r24, r1
     806:	0b c0       	rjmp	.+22     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     808:	07 e0       	ldi	r16, 0x07	; 7
     80a:	13 e0       	ldi	r17, 0x03	; 3
     80c:	ca e4       	ldi	r28, 0x4A	; 74
     80e:	d5 e0       	ldi	r29, 0x05	; 5
     810:	0f 2e       	mov	r0, r31
     812:	f2 e5       	ldi	r31, 0x52	; 82
     814:	ef 2e       	mov	r14, r31
     816:	f5 e0       	ldi	r31, 0x05	; 5
     818:	ff 2e       	mov	r15, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     822:	ce 15       	cp	r28, r14
     824:	df 05       	cpc	r29, r15
     826:	51 f7       	brne	.-44     	; 0x7fc <_ZN13EepromManager11readNonVolsEv+0xd8>
     828:	ef cf       	rjmp	.-34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     82a:	c8 01       	movw	r24, r16
     82c:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     830:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     832:	88 23       	and	r24, r24
     834:	29 f0       	breq	.+10     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     836:	0f 5f       	subi	r16, 0xFF	; 255
     838:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     83a:	ce 15       	cp	r28, r14
     83c:	df 05       	cpc	r29, r15
     83e:	a9 f7       	brne	.-22     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     840:	07 ee       	ldi	r16, 0xE7	; 231
     842:	12 e0       	ldi	r17, 0x02	; 2
     844:	c5 e6       	ldi	r28, 0x65	; 101
     846:	d5 e0       	ldi	r29, 0x05	; 5
     848:	0f 2e       	mov	r0, r31
     84a:	f5 e8       	ldi	r31, 0x85	; 133
     84c:	ef 2e       	mov	r14, r31
     84e:	f5 e0       	ldi	r31, 0x05	; 5
     850:	ff 2e       	mov	r15, r31
     852:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     854:	c8 01       	movw	r24, r16
     856:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <eeprom_read_byte>
     85a:	89 93       	st	Y+, r24
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     860:	ce 15       	cp	r28, r14
     862:	df 05       	cpc	r29, r15
     864:	b9 f7       	brne	.-18     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     866:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
     86a:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
     86e:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
     872:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
     876:	89 2b       	or	r24, r25
     878:	8a 2b       	or	r24, r26
     87a:	8b 2b       	or	r24, r27
     87c:	c9 f0       	breq	.+50     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     87e:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_finish_epoch>
     882:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
     886:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
     88a:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
     88e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
     892:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
     896:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
     89a:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
     89e:	84 17       	cp	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	a6 07       	cpc	r26, r22
     8a4:	b7 07       	cpc	r27, r23
     8a6:	30 f4       	brcc	.+12     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	19 c0       	rjmp	.+50     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	17 c0       	rjmp	.+46     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	15 c0       	rjmp	.+42     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     8b4:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
     8b8:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
     8bc:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
     8c0:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
     8c4:	80 58       	subi	r24, 0x80	; 128
     8c6:	9e 4a       	sbci	r25, 0xAE	; 174
     8c8:	ae 4f       	sbci	r26, 0xFE	; 254
     8ca:	bf 4f       	sbci	r27, 0xFF	; 255
     8cc:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_finish_epoch>
     8d0:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_finish_epoch+0x1>
     8d4:	a0 93 8b 05 	sts	0x058B, r26	; 0x80058b <g_event_finish_epoch+0x2>
     8d8:	b0 93 8c 05 	sts	0x058C, r27	; 0x80058c <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	08 95       	ret

000008ec <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     8f2:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	ce 01       	movw	r24, r28
     902:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     906:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     90a:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z15lb_send_NewLinev>
}
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     914:	cb 01       	movw	r24, r22
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	81 59       	subi	r24, 0x91	; 145
     91c:	9d 4f       	sbci	r25, 0xFD	; 253
     91e:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <eeprom_read_word>
}
     922:	08 95       	ret

00000924 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     924:	9c 01       	movw	r18, r24
     926:	2e 5f       	subi	r18, 0xFE	; 254
     928:	3f 4f       	sbci	r19, 0xFF	; 255
     92a:	2b 33       	cpi	r18, 0x3B	; 59
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	38 07       	cpc	r19, r24
     930:	10 f0       	brcs	.+4      	; 0x936 <_Z8setAttenj+0x12>
     932:	2b e3       	ldi	r18, 0x3B	; 59
     934:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     936:	ad ec       	ldi	r26, 0xCD	; 205
     938:	bc ec       	ldi	r27, 0xCC	; 204
     93a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>
     93e:	96 95       	lsr	r25
     940:	87 95       	ror	r24
     942:	96 95       	lsr	r25
     944:	87 95       	ror	r24
     946:	9c 01       	movw	r18, r24
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	28 0f       	add	r18, r24
     952:	39 1f       	adc	r19, r25
	att /= 5;
     954:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>
     958:	96 95       	lsr	r25
     95a:	87 95       	ror	r24
     95c:	96 95       	lsr	r25
     95e:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     960:	9c 01       	movw	r18, r24
     962:	20 73       	andi	r18, 0x30	; 48
     964:	33 27       	eor	r19, r19
     966:	32 95       	swap	r19
     968:	22 95       	swap	r18
     96a:	2f 70       	andi	r18, 0x0F	; 15
     96c:	23 27       	eor	r18, r19
     96e:	3f 70       	andi	r19, 0x0F	; 15
     970:	23 27       	eor	r18, r19
     972:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <__data_end>

	pattern = PORTC & 0xF0;
     976:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	90 7f       	andi	r25, 0xF0	; 240
     97c:	89 2b       	or	r24, r25
     97e:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     980:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     982:	8c 7f       	andi	r24, 0xFC	; 252
     984:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <__data_end>
     988:	89 2b       	or	r24, r25
     98a:	8b b9       	out	0x0b, r24	; 11
     98c:	08 95       	ret

0000098e <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     98e:	0e 94 28 09 	call	0x1250	; 0x1250 <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	8e e0       	ldi	r24, 0x0E	; 14
     996:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	8f e0       	ldi	r24, 0x0F	; 15
     99e:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	80 e1       	ldi	r24, 0x10	; 16
     9a6:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	81 e1       	ldi	r24, 0x11	; 17
     9ae:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	86 e0       	ldi	r24, 0x06	; 6
     9c6:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
     9d2:	08 95       	ret

000009d4 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	e4 2e       	mov	r14, r20
     9e2:	f5 2e       	mov	r15, r21
     9e4:	d6 2f       	mov	r29, r22
     9e6:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     9e8:	00 93 14 03 	sts	0x0314, r16	; 0x800314 <_SAMPLING_FREQUENCY>
     9ec:	10 93 15 03 	sts	0x0315, r17	; 0x800315 <_SAMPLING_FREQUENCY+0x1>
     9f0:	20 93 16 03 	sts	0x0316, r18	; 0x800316 <_SAMPLING_FREQUENCY+0x2>
     9f4:	30 93 17 03 	sts	0x0317, r19	; 0x800317 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	41 e5       	ldi	r20, 0x51	; 81
     9fe:	53 e4       	ldi	r21, 0x43	; 67
     a00:	6e 2d       	mov	r22, r14
     a02:	7f 2d       	mov	r23, r15
     a04:	8d 2f       	mov	r24, r29
     a06:	9c 2f       	mov	r25, r28
     a08:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
     a0c:	18 16       	cp	r1, r24
     a0e:	6c f0       	brlt	.+26     	; 0xa2a <_ZN8GoertzelC1Eff+0x56>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	48 ec       	ldi	r20, 0xC8	; 200
     a16:	52 e4       	ldi	r21, 0x42	; 66
     a18:	6e 2d       	mov	r22, r14
     a1a:	7f 2d       	mov	r23, r15
     a1c:	8d 2f       	mov	r24, r29
     a1e:	9c 2f       	mov	r25, r28
     a20:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__cmpsf2>
     a24:	88 23       	and	r24, r24
     a26:	34 f0       	brlt	.+12     	; 0xa34 <_ZN8GoertzelC1Eff+0x60>
     a28:	09 c0       	rjmp	.+18     	; 0xa3c <_ZN8GoertzelC1Eff+0x68>
     a2a:	e1 2c       	mov	r14, r1
     a2c:	f1 2c       	mov	r15, r1
     a2e:	d1 e5       	ldi	r29, 0x51	; 81
     a30:	c3 e4       	ldi	r28, 0x43	; 67
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <_ZN8GoertzelC1Eff+0x68>
     a34:	e1 2c       	mov	r14, r1
     a36:	f1 2c       	mov	r15, r1
     a38:	d8 ec       	ldi	r29, 0xC8	; 200
     a3a:	c2 e4       	ldi	r28, 0x42	; 66
     a3c:	6e 2d       	mov	r22, r14
     a3e:	7f 2d       	mov	r23, r15
     a40:	8d 2f       	mov	r24, r29
     a42:	9c 2f       	mov	r25, r28
     a44:	0e 94 46 28 	call	0x508c	; 0x508c <__fixsfsi>
     a48:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <_N+0x1>
     a4c:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <_N>
	testData = (int*)malloc(_N * sizeof(int));
     a50:	cb 01       	movw	r24, r22
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	0e 94 0f 2b 	call	0x561e	; 0x561e <malloc>
     a5a:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <testData+0x1>
     a5e:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <testData>
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     a70:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <testData>
     a74:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <testData+0x1>
     a78:	0e 94 a7 2b 	call	0x574e	; 0x574e <free>
     a7c:	08 95       	ret

00000a7e <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     a7e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <Q2>
     a82:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <Q2+0x1>
     a86:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <Q2+0x2>
     a8a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <Q2+0x3>
	Q1 = 0;
     a8e:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <Q1>
     a92:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <Q1+0x1>
     a96:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <Q1+0x2>
     a9a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <Q1+0x3>
	_samplesReady = false;
     a9e:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <_samplesReady>
     aa2:	08 95       	ret

00000aa4 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
     aba:	4a 01       	movw	r8, r20
     abc:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     abe:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <_N>
     ac2:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <_N+0x1>
     ac6:	07 2e       	mov	r0, r23
     ac8:	00 0c       	add	r0, r0
     aca:	88 0b       	sbc	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__floatsisf>
     ad2:	6b 01       	movw	r12, r22
     ad4:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     ad6:	80 92 10 03 	sts	0x0310, r8	; 0x800310 <_TARGET_FREQUENCY>
     ada:	90 92 11 03 	sts	0x0311, r9	; 0x800311 <_TARGET_FREQUENCY+0x1>
     ade:	a0 92 12 03 	sts	0x0312, r10	; 0x800312 <_TARGET_FREQUENCY+0x2>
     ae2:	b0 92 13 03 	sts	0x0313, r11	; 0x800313 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     ae6:	a5 01       	movw	r20, r10
     ae8:	94 01       	movw	r18, r8
     aea:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     aee:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_SAMPLING_FREQUENCY>
     af2:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <_SAMPLING_FREQUENCY+0x1>
     af6:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <_SAMPLING_FREQUENCY+0x2>
     afa:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <_SAMPLING_FREQUENCY+0x3>
     afe:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__divsf3>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	5f e3       	ldi	r21, 0x3F	; 63
     b0a:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__addsf3>
     b0e:	0e 94 46 28 	call	0x508c	; 0x508c <__fixsfsi>
     b12:	07 2e       	mov	r0, r23
     b14:	00 0c       	add	r0, r0
     b16:	88 0b       	sbc	r24, r24
     b18:	99 0b       	sbc	r25, r25
     b1a:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__floatsisf>
     b1e:	2b ed       	ldi	r18, 0xDB	; 219
     b20:	3f e0       	ldi	r19, 0x0F	; 15
     b22:	49 ec       	ldi	r20, 0xC9	; 201
     b24:	50 e4       	ldi	r21, 0x40	; 64
     b26:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     b2a:	a7 01       	movw	r20, r14
     b2c:	96 01       	movw	r18, r12
     b2e:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__divsf3>
     b32:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <cos>
     b36:	9b 01       	movw	r18, r22
     b38:	ac 01       	movw	r20, r24
     b3a:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__addsf3>
     b3e:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <g_coeff>
     b42:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <g_coeff+0x1>
     b46:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <g_coeff+0x2>
     b4a:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <g_coeff+0x3>
	ResetGoertzel();
     b4e:	ce 01       	movw	r24, r28
     b50:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN8Goertzel13ResetGoertzelEv>
}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	9f 90       	pop	r9
     b66:	8f 90       	pop	r8
     b68:	08 95       	ret

00000b6a <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     b6a:	8f 92       	push	r8
     b6c:	9f 92       	push	r9
     b6e:	af 92       	push	r10
     b70:	bf 92       	push	r11
     b72:	cf 92       	push	r12
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     b80:	c0 90 06 03 	lds	r12, 0x0306	; 0x800306 <Q1>
     b84:	d0 90 07 03 	lds	r13, 0x0307	; 0x800307 <Q1+0x1>
     b88:	e0 90 08 03 	lds	r14, 0x0308	; 0x800308 <Q1+0x2>
     b8c:	f0 90 09 03 	lds	r15, 0x0309	; 0x800309 <Q1+0x3>
     b90:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <g_coeff>
     b94:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <g_coeff+0x1>
     b98:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <g_coeff+0x2>
     b9c:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <g_coeff+0x3>
     ba0:	c7 01       	movw	r24, r14
     ba2:	b6 01       	movw	r22, r12
     ba4:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     ba8:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <Q2>
     bac:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <Q2+0x1>
     bb0:	40 91 04 03 	lds	r20, 0x0304	; 0x800304 <Q2+0x2>
     bb4:	50 91 05 03 	lds	r21, 0x0305	; 0x800305 <Q2+0x3>
     bb8:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__subsf3>
     bbc:	4b 01       	movw	r8, r22
     bbe:	5c 01       	movw	r10, r24
     bc0:	be 01       	movw	r22, r28
     bc2:	72 50       	subi	r23, 0x02	; 2
     bc4:	07 2e       	mov	r0, r23
     bc6:	00 0c       	add	r0, r0
     bc8:	88 0b       	sbc	r24, r24
     bca:	99 0b       	sbc	r25, r25
     bcc:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__floatsisf>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	c5 01       	movw	r24, r10
     bd6:	b4 01       	movw	r22, r8
     bd8:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__addsf3>

	Q2 = Q1;
     bdc:	c0 92 02 03 	sts	0x0302, r12	; 0x800302 <Q2>
     be0:	d0 92 03 03 	sts	0x0303, r13	; 0x800303 <Q2+0x1>
     be4:	e0 92 04 03 	sts	0x0304, r14	; 0x800304 <Q2+0x2>
     be8:	f0 92 05 03 	sts	0x0305, r15	; 0x800305 <Q2+0x3>
	Q1 = Q0;
     bec:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <Q1>
     bf0:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <Q1+0x1>
     bf4:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <Q1+0x2>
     bf8:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <Q1+0x3>
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	af 90       	pop	r10
     c0c:	9f 90       	pop	r9
     c0e:	8f 90       	pop	r8
     c10:	08 95       	ret

00000c12 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     c12:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_samplesReady>
     c16:	81 11       	cpse	r24, r1
     c18:	27 c0       	rjmp	.+78     	; 0xc68 <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     c1a:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <_index>
     c1e:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <_index+0x1>
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <testData>
     c2a:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <testData+0x1>
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
     c32:	71 83       	std	Z+1, r23	; 0x01
     c34:	60 83       	st	Z, r22
	_index++;
     c36:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_index>
     c3a:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <_index+0x1>
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <_index+0x1>
     c44:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_index>
	if(_index >= _N)
     c48:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <_N>
     c4c:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <_N+0x1>
     c50:	82 17       	cp	r24, r18
     c52:	93 07       	cpc	r25, r19
     c54:	3c f0       	brlt	.+14     	; 0xc64 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     c56:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <_index+0x1>
     c5a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <_index>
		_samplesReady = true;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_samplesReady>
	}

	return(_samplesReady);
     c64:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_samplesReady>
}
     c68:	08 95       	ret

00000c6a <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     c6a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_samplesReady>
     c6e:	08 95       	ret

00000c70 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     c92:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_N>
     c96:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <_N+0x1>
     c9a:	18 16       	cp	r1, r24
     c9c:	19 06       	cpc	r1, r25
     c9e:	c4 f4       	brge	.+48     	; 0xcd0 <_ZN8Goertzel10Magnitude2Ev+0x60>
     ca0:	c0 e0       	ldi	r28, 0x00	; 0
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     ca4:	ce 01       	movw	r24, r28
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <testData>
     cae:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <testData+0x1>
     cb2:	e8 0f       	add	r30, r24
     cb4:	f9 1f       	adc	r31, r25
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	c8 01       	movw	r24, r16
     cbc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     cc0:	21 96       	adiw	r28, 0x01	; 1
     cc2:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_N>
     cc6:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <_N+0x1>
     cca:	c8 17       	cp	r28, r24
     ccc:	d9 07       	cpc	r29, r25
     cce:	54 f3       	brlt	.-44     	; 0xca4 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     cd0:	80 90 06 03 	lds	r8, 0x0306	; 0x800306 <Q1>
     cd4:	90 90 07 03 	lds	r9, 0x0307	; 0x800307 <Q1+0x1>
     cd8:	a0 90 08 03 	lds	r10, 0x0308	; 0x800308 <Q1+0x2>
     cdc:	b0 90 09 03 	lds	r11, 0x0309	; 0x800309 <Q1+0x3>
     ce0:	c0 90 02 03 	lds	r12, 0x0302	; 0x800302 <Q2>
     ce4:	d0 90 03 03 	lds	r13, 0x0303	; 0x800303 <Q2+0x1>
     ce8:	e0 90 04 03 	lds	r14, 0x0304	; 0x800304 <Q2+0x2>
     cec:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <Q2+0x3>
     cf0:	a5 01       	movw	r20, r10
     cf2:	94 01       	movw	r18, r8
     cf4:	c5 01       	movw	r24, r10
     cf6:	b4 01       	movw	r22, r8
     cf8:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     cfc:	2b 01       	movw	r4, r22
     cfe:	3c 01       	movw	r6, r24
     d00:	a7 01       	movw	r20, r14
     d02:	96 01       	movw	r18, r12
     d04:	c7 01       	movw	r24, r14
     d06:	b6 01       	movw	r22, r12
     d08:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
     d10:	c3 01       	movw	r24, r6
     d12:	b2 01       	movw	r22, r4
     d14:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__addsf3>
     d18:	2b 01       	movw	r4, r22
     d1a:	3c 01       	movw	r6, r24
     d1c:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <g_coeff>
     d20:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <g_coeff+0x1>
     d24:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <g_coeff+0x2>
     d28:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <g_coeff+0x3>
     d2c:	c5 01       	movw	r24, r10
     d2e:	b4 01       	movw	r22, r8
     d30:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     d34:	a7 01       	movw	r20, r14
     d36:	96 01       	movw	r18, r12
     d38:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c3 01       	movw	r24, r6
     d42:	b2 01       	movw	r22, r4
     d44:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__subsf3>
     d48:	6b 01       	movw	r12, r22
     d4a:	7c 01       	movw	r14, r24

	ResetGoertzel();
     d4c:	c8 01       	movw	r24, r16
     d4e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     d52:	c7 01       	movw	r24, r14
     d54:	b6 01       	movw	r22, r12
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	7f 90       	pop	r7
     d70:	6f 90       	pop	r6
     d72:	5f 90       	pop	r5
     d74:	4f 90       	pop	r4
     d76:	08 95       	ret

00000d78 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     d78:	e4 e6       	ldi	r30, 0x64	; 100
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 77       	andi	r24, 0x7F	; 127
     d80:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     d82:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     d86:	85 e2       	ldi	r24, 0x25	; 37
     d88:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     d98:	08 95       	ret

00000d9a <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     d9a:	84 ea       	ldi	r24, 0xA4	; 164
     d9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     da0:	ec eb       	ldi	r30, 0xBC	; 188
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	64 f0       	brlt	.+24     	; 0xdc2 <_Z9i2c_startv+0x28>
     daa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     dae:	81 11       	cpse	r24, r1
     db0:	f9 cf       	rjmp	.-14     	; 0xda4 <_Z9i2c_startv+0xa>
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     db4:	80 e9       	ldi	r24, 0x90	; 144
     db6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     dc0:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     dc2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     dc6:	88 23       	and	r24, r24
     dc8:	a9 f3       	breq	.-22     	; 0xdb4 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     dca:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     dcc:	08 95       	ret

00000dce <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     dce:	84 e9       	ldi	r24, 0x94	; 148
     dd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     dd4:	08 95       	ret

00000dd6 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     dd6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     dda:	84 e8       	ldi	r24, 0x84	; 132
     ddc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     de0:	ec eb       	ldi	r30, 0xBC	; 188
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 23       	and	r24, r24
     de8:	64 f0       	brlt	.+24     	; 0xe02 <_Z17i2c_write_successhh+0x2c>
     dea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     dee:	81 11       	cpse	r24, r1
     df0:	f9 cf       	rjmp	.-14     	; 0xde4 <_Z17i2c_write_successhh+0xe>
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     df4:	84 e9       	ldi	r24, 0x94	; 148
     df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     e00:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     e02:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     e06:	88 7f       	andi	r24, 0xF8	; 248
     e08:	86 13       	cpse	r24, r22
     e0a:	f4 cf       	rjmp	.-24     	; 0xdf4 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     e0e:	08 95       	ret

00000e10 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     e10:	84 ec       	ldi	r24, 0xC4	; 196
     e12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e16:	ec eb       	ldi	r30, 0xBC	; 188
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	88 23       	and	r24, r24
     e1e:	24 f0       	brlt	.+8      	; 0xe28 <_Z12i2c_read_ackv+0x18>
     e20:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e24:	81 11       	cpse	r24, r1
     e26:	f9 cf       	rjmp	.-14     	; 0xe1a <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     e28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e2c:	08 95       	ret

00000e2e <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     e2e:	84 e8       	ldi	r24, 0x84	; 132
     e30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e34:	ec eb       	ldi	r30, 0xBC	; 188
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	24 f0       	brlt	.+8      	; 0xe46 <_Z13i2c_read_nackv+0x18>
     e3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e42:	81 11       	cpse	r24, r1
     e44:	f9 cf       	rjmp	.-14     	; 0xe38 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     e46:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e4a:	08 95       	ret

00000e4c <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     e4c:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e50:	28 7f       	andi	r18, 0xF8	; 248
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	29 f0       	breq	.+10     	; 0xe66 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e5c:	84 e9       	ldi	r24, 0x94	; 148
     e5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	08 95       	ret
	}

	return(FALSE);
     e66:	80 e0       	ldi	r24, 0x00	; 0
}
     e68:	08 95       	ret

00000e6a <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <_Z16i2c_device_writehhPhh+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <_Z16i2c_device_writehhPhh+0x8>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <_Z16i2c_device_writehhPhh+0xa>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	6b 83       	std	Y+3, r22	; 0x03
     e7c:	5d 83       	std	Y+5, r21	; 0x05
     e7e:	4c 83       	std	Y+4, r20	; 0x04
     e80:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     e82:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     e84:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_Z9i2c_startv>
		if(i2c_status(TW_START))
     e88:	88 e0       	ldi	r24, 0x08	; 8
     e8a:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z10i2c_statush>
     e8e:	98 2f       	mov	r25, r24
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	99 23       	and	r25, r25
     e94:	09 f4       	brne	.+2      	; 0xe98 <_Z16i2c_device_writehhPhh+0x2e>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	88 23       	and	r24, r24
     e9a:	11 f0       	breq	.+4      	; 0xea0 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	3f c0       	rjmp	.+126    	; 0xf1e <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     ea0:	68 e1       	ldi	r22, 0x18	; 24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z17i2c_write_successhh>
     ea8:	98 2f       	mov	r25, r24
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	99 23       	and	r25, r25
     eae:	09 f4       	brne	.+2      	; 0xeb2 <_Z16i2c_device_writehhPhh+0x48>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	88 23       	and	r24, r24
     eb4:	11 f0       	breq	.+4      	; 0xeba <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	32 c0       	rjmp	.+100    	; 0xf1e <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     eba:	68 e2       	ldi	r22, 0x28	; 40
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z17i2c_write_successhh>
     ec2:	98 2f       	mov	r25, r24
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	99 23       	and	r25, r25
     ec8:	09 f4       	brne	.+2      	; 0xecc <_Z16i2c_device_writehhPhh+0x62>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	88 23       	and	r24, r24
     ece:	11 f0       	breq	.+4      	; 0xed4 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	25 c0       	rjmp	.+74     	; 0xf1e <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     ed4:	8e 81       	ldd	r24, Y+6	; 0x06
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	98 0f       	add	r25, r24
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	88 23       	and	r24, r24
     ee0:	09 f4       	brne	.+2      	; 0xee4 <_Z16i2c_device_writehhPhh+0x7a>
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	99 23       	and	r25, r25
     ee6:	c1 f0       	breq	.+48     	; 0xf18 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	98 0f       	add	r25, r24
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	82 0f       	add	r24, r18
     efa:	93 1f       	adc	r25, r19
     efc:	fc 01       	movw	r30, r24
     efe:	80 81       	ld	r24, Z
     f00:	68 e2       	ldi	r22, 0x28	; 40
     f02:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z17i2c_write_successhh>
     f06:	98 2f       	mov	r25, r24
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	99 23       	and	r25, r25
     f0c:	09 f4       	brne	.+2      	; 0xf10 <_Z16i2c_device_writehhPhh+0xa6>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	88 23       	and	r24, r24
     f12:	01 f3       	breq	.-64     	; 0xed4 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     f18:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     f1c:	80 e0       	ldi	r24, 0x00	; 0
}
     f1e:	26 96       	adiw	r28, 0x06	; 6
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	00 d0       	rcall	.+0      	; 0xf3a <_Z15i2c_device_readhhPhh+0xa>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <_Z15i2c_device_readhhPhh+0xc>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <_Z15i2c_device_readhhPhh+0xe>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
     f46:	5d 83       	std	Y+5, r21	; 0x05
     f48:	4c 83       	std	Y+4, r20	; 0x04
     f4a:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f4c:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f4e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z10i2c_statush>
     f58:	98 2f       	mov	r25, r24
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	99 23       	and	r25, r25
     f5e:	09 f4       	brne	.+2      	; 0xf62 <_Z15i2c_device_readhhPhh+0x32>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	88 23       	and	r24, r24
     f64:	11 f0       	breq	.+4      	; 0xf6a <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	79 c0       	rjmp	.+242    	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     f6a:	68 e1       	ldi	r22, 0x18	; 24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z17i2c_write_successhh>
     f72:	98 2f       	mov	r25, r24
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	99 23       	and	r25, r25
     f78:	09 f4       	brne	.+2      	; 0xf7c <_Z15i2c_device_readhhPhh+0x4c>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	88 23       	and	r24, r24
     f7e:	11 f0       	breq	.+4      	; 0xf84 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	6c c0       	rjmp	.+216    	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     f84:	68 e2       	ldi	r22, 0x28	; 40
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z17i2c_write_successhh>
     f8c:	98 2f       	mov	r25, r24
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	99 23       	and	r25, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <_Z15i2c_device_readhhPhh+0x66>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	88 23       	and	r24, r24
     f98:	11 f0       	breq	.+4      	; 0xf9e <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	5f c0       	rjmp	.+190    	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     f9e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     fa2:	80 e1       	ldi	r24, 0x10	; 16
     fa4:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z10i2c_statush>
     fa8:	98 2f       	mov	r25, r24
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	99 23       	and	r25, r25
     fae:	09 f4       	brne	.+2      	; 0xfb2 <_Z15i2c_device_readhhPhh+0x82>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	88 23       	and	r24, r24
     fb4:	11 f0       	breq	.+4      	; 0xfba <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	51 c0       	rjmp	.+162    	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	60 e4       	ldi	r22, 0x40	; 64
     fc0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z17i2c_write_successhh>
     fc4:	98 2f       	mov	r25, r24
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	99 23       	and	r25, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <_Z15i2c_device_readhhPhh+0x9e>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	88 23       	and	r24, r24
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	43 c0       	rjmp	.+134    	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	98 0f       	add	r25, r24
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	88 23       	and	r24, r24
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <_Z15i2c_device_readhhPhh+0xb6>
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	99 23       	and	r25, r25
     fe8:	b1 f1       	breq	.+108    	; 0x1056 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	88 23       	and	r24, r24
     fee:	d9 f0       	breq	.+54     	; 0x1026 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	98 0f       	add	r25, r24
     ff6:	99 83       	std	Y+1, r25	; 0x01
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	89 01       	movw	r16, r18
    1002:	08 0f       	add	r16, r24
    1004:	19 1f       	adc	r17, r25
    1006:	0e 94 08 07 	call	0xe10	; 0xe10 <_Z12i2c_read_ackv>
    100a:	f8 01       	movw	r30, r16
    100c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    100e:	80 e5       	ldi	r24, 0x50	; 80
    1010:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z10i2c_statush>
    1014:	98 2f       	mov	r25, r24
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	99 23       	and	r25, r25
    101a:	09 f4       	brne	.+2      	; 0x101e <_Z15i2c_device_readhhPhh+0xee>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	88 23       	and	r24, r24
    1020:	d1 f2       	breq	.-76     	; 0xfd6 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	1b c0       	rjmp	.+54     	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	89 01       	movw	r16, r18
    1032:	08 0f       	add	r16, r24
    1034:	19 1f       	adc	r17, r25
    1036:	0e 94 17 07 	call	0xe2e	; 0xe2e <_Z13i2c_read_nackv>
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    103e:	88 e5       	ldi	r24, 0x58	; 88
    1040:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z10i2c_statush>
    1044:	98 2f       	mov	r25, r24
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	99 23       	and	r25, r25
    104a:	09 f4       	brne	.+2      	; 0x104e <_Z15i2c_device_readhhPhh+0x11e>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	88 23       	and	r24, r24
    1050:	11 f2       	breq	.-124    	; 0xfd6 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	03 c0       	rjmp	.+6      	; 0x105c <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    1056:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    105a:	80 e0       	ldi	r24, 0x00	; 0
}
    105c:	26 96       	adiw	r28, 0x06	; 6
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1072:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZ16nextFullTxBuffervE11bufferIndex>
    1076:	94 e0       	ldi	r25, 0x04	; 4
    1078:	59 e2       	ldi	r21, 0x29	; 41
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	52 9f       	mul	r21, r18
    1080:	f0 01       	movw	r30, r0
    1082:	53 9f       	mul	r21, r19
    1084:	f0 0d       	add	r31, r0
    1086:	11 24       	eor	r1, r1
    1088:	e6 56       	subi	r30, 0x66	; 102
    108a:	fc 4f       	sbci	r31, 0xFC	; 252
    108c:	40 81       	ld	r20, Z
    108e:	41 11       	cpse	r20, r1
    1090:	0c c0       	rjmp	.+24     	; 0x10aa <_Z16nextFullTxBufferv+0x38>
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	29 f0       	breq	.+10     	; 0x10a0 <_Z16nextFullTxBufferv+0x2e>
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	78 f3       	brcs	.-34     	; 0x107a <_Z16nextFullTxBufferv+0x8>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	ed cf       	rjmp	.-38     	; 0x107a <_Z16nextFullTxBufferv+0x8>
    10a0:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZ16nextFullTxBuffervE11bufferIndex>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 95       	ret
    10aa:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZ16nextFullTxBuffervE11bufferIndex>
    10ae:	49 e2       	ldi	r20, 0x29	; 41
    10b0:	42 9f       	mul	r20, r18
    10b2:	c0 01       	movw	r24, r0
    10b4:	43 9f       	mul	r20, r19
    10b6:	90 0d       	add	r25, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	86 56       	subi	r24, 0x66	; 102
    10bc:	9c 4f       	sbci	r25, 0xFC	; 252
    10be:	08 95       	ret

000010c0 <_Z17nextEmptyTxBufferv>:
    10c0:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    10c4:	94 e0       	ldi	r25, 0x04	; 4
    10c6:	59 e2       	ldi	r21, 0x29	; 41
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	52 9f       	mul	r21, r18
    10ce:	f0 01       	movw	r30, r0
    10d0:	53 9f       	mul	r21, r19
    10d2:	f0 0d       	add	r31, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	e6 56       	subi	r30, 0x66	; 102
    10d8:	fc 4f       	sbci	r31, 0xFC	; 252
    10da:	40 81       	ld	r20, Z
    10dc:	44 23       	and	r20, r20
    10de:	61 f0       	breq	.+24     	; 0x10f8 <_Z17nextEmptyTxBufferv+0x38>
    10e0:	91 50       	subi	r25, 0x01	; 1
    10e2:	29 f0       	breq	.+10     	; 0x10ee <_Z17nextEmptyTxBufferv+0x2e>
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	78 f3       	brcs	.-34     	; 0x10c8 <_Z17nextEmptyTxBufferv+0x8>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	ed cf       	rjmp	.-38     	; 0x10c8 <_Z17nextEmptyTxBufferv+0x8>
    10ee:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	08 95       	ret
    10f8:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    10fc:	49 e2       	ldi	r20, 0x29	; 41
    10fe:	42 9f       	mul	r20, r18
    1100:	c0 01       	movw	r24, r0
    1102:	43 9f       	mul	r20, r19
    1104:	90 0d       	add	r25, r0
    1106:	11 24       	eor	r1, r1
    1108:	86 56       	subi	r24, 0x66	; 102
    110a:	9c 4f       	sbci	r25, 0xFC	; 252
    110c:	08 95       	ret

0000110e <_Z17nextEmptyRxBufferv>:
    110e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	9f e3       	ldi	r25, 0x3F	; 63
    1118:	89 9f       	mul	r24, r25
    111a:	f0 01       	movw	r30, r0
    111c:	11 24       	eor	r1, r1
    111e:	e4 5e       	subi	r30, 0xE4	; 228
    1120:	fc 4f       	sbci	r31, 0xFC	; 252
    1122:	41 81       	ldd	r20, Z+1	; 0x01
    1124:	52 81       	ldd	r21, Z+2	; 0x02
    1126:	45 2b       	or	r20, r21
    1128:	a9 f0       	breq	.+42     	; 0x1154 <_Z17nextEmptyRxBufferv+0x46>
    112a:	8f 5f       	subi	r24, 0xFF	; 255
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	08 f0       	brcs	.+2      	; 0x1132 <_Z17nextEmptyRxBufferv+0x24>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	9f e3       	ldi	r25, 0x3F	; 63
    1138:	89 9f       	mul	r24, r25
    113a:	f0 01       	movw	r30, r0
    113c:	11 24       	eor	r1, r1
    113e:	e4 5e       	subi	r30, 0xE4	; 228
    1140:	fc 4f       	sbci	r31, 0xFC	; 252
    1142:	41 81       	ldd	r20, Z+1	; 0x01
    1144:	52 81       	ldd	r21, Z+2	; 0x02
    1146:	45 2b       	or	r20, r21
    1148:	29 f0       	breq	.+10     	; 0x1154 <_Z17nextEmptyRxBufferv+0x46>
    114a:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	08 95       	ret
    1154:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1158:	4f e3       	ldi	r20, 0x3F	; 63
    115a:	42 9f       	mul	r20, r18
    115c:	c0 01       	movw	r24, r0
    115e:	43 9f       	mul	r20, r19
    1160:	90 0d       	add	r25, r0
    1162:	11 24       	eor	r1, r1
    1164:	84 5e       	subi	r24, 0xE4	; 228
    1166:	9c 4f       	sbci	r25, 0xFC	; 252
    1168:	08 95       	ret

0000116a <_Z16nextFullRxBufferv>:
    116a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ16nextFullRxBuffervE11bufferIndex>
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	9f e3       	ldi	r25, 0x3F	; 63
    1174:	89 9f       	mul	r24, r25
    1176:	f0 01       	movw	r30, r0
    1178:	11 24       	eor	r1, r1
    117a:	e4 5e       	subi	r30, 0xE4	; 228
    117c:	fc 4f       	sbci	r31, 0xFC	; 252
    117e:	41 81       	ldd	r20, Z+1	; 0x01
    1180:	52 81       	ldd	r21, Z+2	; 0x02
    1182:	45 2b       	or	r20, r21
    1184:	a9 f4       	brne	.+42     	; 0x11b0 <_Z16nextFullRxBufferv+0x46>
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	08 f0       	brcs	.+2      	; 0x118e <_Z16nextFullRxBufferv+0x24>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	9f e3       	ldi	r25, 0x3F	; 63
    1194:	89 9f       	mul	r24, r25
    1196:	f0 01       	movw	r30, r0
    1198:	11 24       	eor	r1, r1
    119a:	e4 5e       	subi	r30, 0xE4	; 228
    119c:	fc 4f       	sbci	r31, 0xFC	; 252
    119e:	41 81       	ldd	r20, Z+1	; 0x01
    11a0:	52 81       	ldd	r21, Z+2	; 0x02
    11a2:	45 2b       	or	r20, r21
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <_Z16nextFullRxBufferv+0x46>
    11a6:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZZ16nextFullRxBuffervE11bufferIndex>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	08 95       	ret
    11b0:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZZ16nextFullRxBuffervE11bufferIndex>
    11b4:	4f e3       	ldi	r20, 0x3F	; 63
    11b6:	42 9f       	mul	r20, r18
    11b8:	c0 01       	movw	r24, r0
    11ba:	43 9f       	mul	r20, r19
    11bc:	90 0d       	add	r25, r0
    11be:	11 24       	eor	r1, r1
    11c0:	84 5e       	subi	r24, 0xE4	; 228
    11c2:	9c 4f       	sbci	r25, 0xFC	; 252
    11c4:	08 95       	ret

000011c6 <_Z19linkbusTxInProgressv>:
    11c6:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_ZL17linkbus_tx_active>
    11ca:	08 95       	ret

000011cc <_Z16linkbus_start_txv>:
    11cc:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZL17linkbus_tx_active>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	91 11       	cpse	r25, r1
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	91 11       	cpse	r25, r1
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <_Z16linkbus_start_txv+0x1e>
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZL17linkbus_tx_active>
    11e0:	e1 ec       	ldi	r30, 0xC1	; 193
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	90 81       	ld	r25, Z
    11e6:	90 62       	ori	r25, 0x20	; 32
    11e8:	90 83       	st	Z, r25
    11ea:	08 95       	ret

000011ec <_Z14linkbus_end_txv>:
    11ec:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_ZL17linkbus_tx_active>
    11f0:	88 23       	and	r24, r24
    11f2:	39 f0       	breq	.+14     	; 0x1202 <_Z14linkbus_end_txv+0x16>
    11f4:	e1 ec       	ldi	r30, 0xC1	; 193
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 7d       	andi	r24, 0xDF	; 223
    11fc:	80 83       	st	Z, r24
    11fe:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZL17linkbus_tx_active>
    1202:	08 95       	ret

00001204 <_Z12linkbus_initm>:
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	8e e7       	ldi	r24, 0x7E	; 126
    120a:	ec e1       	ldi	r30, 0x1C	; 28
    120c:	f3 e0       	ldi	r31, 0x03	; 3
    120e:	df 01       	movw	r26, r30
    1210:	1d 92       	st	X+, r1
    1212:	8a 95       	dec	r24
    1214:	e9 f7       	brne	.-6      	; 0x1210 <_Z12linkbus_initm+0xc>
    1216:	ea e9       	ldi	r30, 0x9A	; 154
    1218:	f3 e0       	ldi	r31, 0x03	; 3
    121a:	10 82       	st	Z, r1
    121c:	11 a6       	std	Z+41, r1	; 0x29
    121e:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZL9tx_buffer+0x52>
    1222:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <_ZL9tx_buffer+0x7b>
    1226:	60 e4       	ldi	r22, 0x40	; 64
    1228:	72 e4       	ldi	r23, 0x42	; 66
    122a:	8f e0       	ldi	r24, 0x0F	; 15
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodsi4>
    1232:	21 50       	subi	r18, 0x01	; 1
    1234:	31 09       	sbc	r19, r1
    1236:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    123a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    123e:	88 e9       	ldi	r24, 0x98	; 152
    1240:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1244:	8e e0       	ldi	r24, 0x0E	; 14
    1246:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    124a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    124e:	08 95       	ret

00001250 <_Z15linkbus_disablev>:
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    1256:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    125a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_Z14linkbus_end_txv>
    125e:	8e e7       	ldi	r24, 0x7E	; 126
    1260:	ec e1       	ldi	r30, 0x1C	; 28
    1262:	f3 e0       	ldi	r31, 0x03	; 3
    1264:	df 01       	movw	r26, r30
    1266:	1d 92       	st	X+, r1
    1268:	8a 95       	dec	r24
    126a:	e9 f7       	brne	.-6      	; 0x1266 <_Z15linkbus_disablev+0x16>
    126c:	ea e9       	ldi	r30, 0x9A	; 154
    126e:	f3 e0       	ldi	r31, 0x03	; 3
    1270:	10 82       	st	Z, r1
    1272:	11 a6       	std	Z+41, r1	; 0x29
    1274:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZL9tx_buffer+0x52>
    1278:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <_ZL9tx_buffer+0x7b>
    127c:	08 95       	ret

0000127e <_Z17linkbus_send_textPc>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    128a:	21 11       	cpse	r18, r1
    128c:	14 c0       	rjmp	.+40     	; 0x12b6 <_Z17linkbus_send_textPc+0x38>
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	a1 f0       	breq	.+40     	; 0x12ba <_Z17linkbus_send_textPc+0x3c>
    1292:	8c 01       	movw	r16, r24
    1294:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_Z17nextEmptyTxBufferv>
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	b9 f4       	brne	.+46     	; 0x12ca <_Z17linkbus_send_textPc+0x4c>
    129c:	c8 ec       	ldi	r28, 0xC8	; 200
    129e:	d0 e0       	ldi	r29, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <_Z17linkbus_send_textPc+0x28>
    12a2:	20 97       	sbiw	r28, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <_Z17linkbus_send_textPc+0x40>
    12a6:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZL17linkbus_tx_active>
    12aa:	99 23       	and	r25, r25
    12ac:	51 f0       	breq	.+20     	; 0x12c2 <_Z17linkbus_send_textPc+0x44>
    12ae:	20 97       	sbiw	r28, 0x00	; 0
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <_Z17linkbus_send_textPc+0x68>
    12b2:	21 97       	sbiw	r28, 0x01	; 1
    12b4:	f8 cf       	rjmp	.-16     	; 0x12a6 <_Z17linkbus_send_textPc+0x28>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	1b c0       	rjmp	.+54     	; 0x12f0 <_Z17linkbus_send_textPc+0x72>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	19 c0       	rjmp	.+50     	; 0x12f0 <_Z17linkbus_send_textPc+0x72>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	17 c0       	rjmp	.+46     	; 0x12f0 <_Z17linkbus_send_textPc+0x72>
    12c2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_Z17nextEmptyTxBufferv>
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 f3       	breq	.-40     	; 0x12a2 <_Z17linkbus_send_textPc+0x24>
    12ca:	1f 93       	push	r17
    12cc:	0f 93       	push	r16
    12ce:	9f 93       	push	r25
    12d0:	8f 93       	push	r24
    12d2:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    12d6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_Z16linkbus_start_txv>
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <_Z17linkbus_send_textPc+0x72>
    12e6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_Z17nextEmptyTxBufferv>
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	71 f7       	brne	.-36     	; 0x12ca <_Z17linkbus_send_textPc+0x4c>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <_Z17lb_send_NewPromptv>:
    12fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    12fe:	81 11       	cpse	r24, r1
    1300:	06 c0       	rjmp	.+12     	; 0x130e <_Z17lb_send_NewPromptv+0x14>
    1302:	80 e2       	ldi	r24, 0x20	; 32
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z17linkbus_send_textPc>
    130a:	81 11       	cpse	r24, r1
    130c:	fa cf       	rjmp	.-12     	; 0x1302 <_Z17lb_send_NewPromptv+0x8>
    130e:	08 95       	ret

00001310 <_Z15lb_send_NewLinev>:
    1310:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1314:	81 11       	cpse	r24, r1
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <_Z15lb_send_NewLinev+0x10>
    1318:	83 e2       	ldi	r24, 0x23	; 35
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z17linkbus_send_textPc>
    1320:	08 95       	ret

00001322 <_Z12lb_echo_charh>:
    1322:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1326:	91 11       	cpse	r25, r1
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <_Z12lb_echo_charh+0x16>
    132a:	ef e3       	ldi	r30, 0x3F	; 63
    132c:	f4 e0       	ldi	r31, 0x04	; 4
    132e:	80 83       	st	Z, r24
    1330:	11 82       	std	Z+1, r1	; 0x01
    1332:	cf 01       	movw	r24, r30
    1334:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z17linkbus_send_textPc>
    1338:	08 95       	ret

0000133a <_Z14lb_send_stringPch>:
    133a:	cf 93       	push	r28
    133c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1340:	21 11       	cpse	r18, r1
    1342:	25 c0       	rjmp	.+74     	; 0x138e <_Z14lb_send_stringPch+0x54>
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	29 f1       	breq	.+74     	; 0x1392 <_Z14lb_send_stringPch+0x58>
    1348:	fc 01       	movw	r30, r24
    134a:	01 90       	ld	r0, Z+
    134c:	00 20       	and	r0, r0
    134e:	e9 f7       	brne	.-6      	; 0x134a <_Z14lb_send_stringPch+0x10>
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	e8 1b       	sub	r30, r24
    1354:	f9 0b       	sbc	r31, r25
    1356:	ba 97       	sbiw	r30, 0x2a	; 42
    1358:	f0 f4       	brcc	.+60     	; 0x1396 <_Z14lb_send_stringPch+0x5c>
    135a:	c6 2f       	mov	r28, r22
    135c:	bc 01       	movw	r22, r24
    135e:	49 e2       	ldi	r20, 0x29	; 41
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	8f e3       	ldi	r24, 0x3F	; 63
    1364:	94 e0       	ldi	r25, 0x04	; 4
    1366:	0e 94 8f 2c 	call	0x591e	; 0x591e <strncpy>
    136a:	cc 23       	and	r28, r28
    136c:	59 f0       	breq	.+22     	; 0x1384 <_Z14lb_send_stringPch+0x4a>
    136e:	8f e3       	ldi	r24, 0x3F	; 63
    1370:	94 e0       	ldi	r25, 0x04	; 4
    1372:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z17linkbus_send_textPc>
    1376:	81 11       	cpse	r24, r1
    1378:	fa cf       	rjmp	.-12     	; 0x136e <_Z14lb_send_stringPch+0x34>
    137a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_ZL17linkbus_tx_active>
    137e:	81 11       	cpse	r24, r1
    1380:	fc cf       	rjmp	.-8      	; 0x137a <_Z14lb_send_stringPch+0x40>
    1382:	0a c0       	rjmp	.+20     	; 0x1398 <_Z14lb_send_stringPch+0x5e>
    1384:	8f e3       	ldi	r24, 0x3F	; 63
    1386:	94 e0       	ldi	r25, 0x04	; 4
    1388:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z17linkbus_send_textPc>
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <_Z14lb_send_stringPch+0x5e>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <_Z14lb_send_stringPch+0x5e>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <_Z14lb_send_stringPch+0x5e>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return !g_bus_disabled;
    139c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	91 11       	cpse	r25, r1
    13a4:	80 e0       	ldi	r24, 0x00	; 0
}
    13a6:	08 95       	ret

000013a8 <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	8f 93       	push	r24
    13c0:	9f 93       	push	r25
    13c2:	af 93       	push	r26
    13c4:	bf 93       	push	r27
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	8b e0       	ldi	r24, 0x0B	; 11
    13ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    13d2:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	8e e0       	ldi	r24, 0x0E	; 14
    13da:	95 e0       	ldi	r25, 0x05	; 5
    13dc:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN8Goertzel9DataPointEi>
    13e0:	88 23       	and	r24, r24
    13e2:	29 f0       	breq	.+10     	; 0x13ee <__vector_21+0x46>
    13e4:	ea e7       	ldi	r30, 0x7A	; 122
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	87 7f       	andi	r24, 0xF7	; 247
    13ec:	80 83       	st	Z, r24
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	8b e0       	ldi	r24, 0x0B	; 11
    13f2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_18>:
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	1f 93       	push	r17
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
    1440:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1444:	c0 91 e4 04 	lds	r28, 0x04E4	; 0x8004e4 <_ZZ11__vector_18E4buff>
    1448:	d0 91 e5 04 	lds	r29, 0x04E5	; 0x8004e5 <_ZZ11__vector_18E4buff+0x1>
    144c:	20 97       	sbiw	r28, 0x00	; 0
    144e:	51 f4       	brne	.+20     	; 0x1464 <__vector_18+0x4c>
    1450:	0e 94 87 08 	call	0x110e	; 0x110e <_Z17nextEmptyRxBufferv>
    1454:	ec 01       	movw	r28, r24
    1456:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <_ZZ11__vector_18E4buff+0x1>
    145a:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <_ZZ11__vector_18E4buff>
    145e:	89 2b       	or	r24, r25
    1460:	09 f4       	brne	.+2      	; 0x1464 <__vector_18+0x4c>
    1462:	62 c1       	rjmp	.+708    	; 0x1728 <__vector_18+0x310>
    1464:	81 2f       	mov	r24, r17
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 75 2c 	call	0x58ea	; 0x58ea <toupper>
    146c:	9c 01       	movw	r18, r24
    146e:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <_ZZ11__vector_18E11ignoreCount>
    1472:	88 23       	and	r24, r24
    1474:	21 f0       	breq	.+8      	; 0x147e <__vector_18+0x66>
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <_ZZ11__vector_18E11ignoreCount>
    147c:	55 c1       	rjmp	.+682    	; 0x1728 <__vector_18+0x310>
    147e:	2b 31       	cpi	r18, 0x1B	; 27
    1480:	21 f4       	brne	.+8      	; 0x148a <__vector_18+0x72>
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <_ZZ11__vector_18E11ignoreCount>
    1488:	4f c1       	rjmp	.+670    	; 0x1728 <__vector_18+0x310>
    148a:	2d 30       	cpi	r18, 0x0D	; 13
    148c:	09 f0       	breq	.+2      	; 0x1490 <__vector_18+0x78>
    148e:	3f c0       	rjmp	.+126    	; 0x150e <__vector_18+0xf6>
    1490:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <_ZZ11__vector_18E13receiving_msg>
    1494:	88 23       	and	r24, r24
    1496:	31 f1       	breq	.+76     	; 0x14e4 <__vector_18+0xcc>
    1498:	e0 91 e2 04 	lds	r30, 0x04E2	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    149c:	ee 23       	and	r30, r30
    149e:	f9 f0       	breq	.+62     	; 0x14de <__vector_18+0xc6>
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	88 83       	st	Y, r24
    14a4:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    14a8:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ11__vector_18E11field_index>
    14b4:	88 23       	and	r24, r24
    14b6:	79 f0       	breq	.+30     	; 0x14d6 <__vector_18+0xbe>
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	40 91 9e 04 	lds	r20, 0x049E	; 0x80049e <_ZZ11__vector_18E9field_len>
    14c0:	54 e1       	ldi	r21, 0x14	; 20
    14c2:	58 9f       	mul	r21, r24
    14c4:	90 01       	movw	r18, r0
    14c6:	59 9f       	mul	r21, r25
    14c8:	30 0d       	add	r19, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	c2 0f       	add	r28, r18
    14ce:	d3 1f       	adc	r29, r19
    14d0:	c4 0f       	add	r28, r20
    14d2:	d1 1d       	adc	r29, r1
    14d4:	1b 82       	std	Y+3, r1	; 0x03
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ed 55       	subi	r30, 0x5D	; 93
    14da:	fb 4f       	sbci	r31, 0xFB	; 251
    14dc:	10 82       	st	Z, r1
    14de:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z15lb_send_NewLinev>
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <__vector_18+0xd4>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	9f e7       	ldi	r25, 0x7F	; 127
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    14f0:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZZ11__vector_18E9field_len>
    14f4:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    14f8:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    14fc:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZ11__vector_18E11field_index>
    1500:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <_ZZ11__vector_18E4buff+0x1>
    1504:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ11__vector_18E4buff>
    1508:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <_ZZ11__vector_18E13receiving_msg>
    150c:	0d c1       	rjmp	.+538    	; 0x1728 <__vector_18+0x310>
    150e:	22 23       	and	r18, r18
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_18+0xfc>
    1512:	0a c1       	rjmp	.+532    	; 0x1728 <__vector_18+0x310>
    1514:	e0 91 e2 04 	lds	r30, 0x04E2	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    1518:	4e 2f       	mov	r20, r30
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	da 01       	movw	r26, r20
    151e:	ad 55       	subi	r26, 0x5D	; 93
    1520:	bb 4f       	sbci	r27, 0xFB	; 251
    1522:	2c 93       	st	X, r18
    1524:	ee 23       	and	r30, r30
    1526:	09 f4       	brne	.+2      	; 0x152a <__vector_18+0x112>
    1528:	d6 c0       	rjmp	.+428    	; 0x16d6 <__vector_18+0x2be>
    152a:	2f 37       	cpi	r18, 0x7F	; 127
    152c:	09 f0       	breq	.+2      	; 0x1530 <__vector_18+0x118>
    152e:	5f c0       	rjmp	.+190    	; 0x15ee <__vector_18+0x1d6>
    1530:	e1 50       	subi	r30, 0x01	; 1
    1532:	e0 93 e2 04 	sts	0x04E2, r30	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    1536:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ11__vector_18E11field_index>
    153a:	81 11       	cpse	r24, r1
    153c:	13 c0       	rjmp	.+38     	; 0x1564 <__vector_18+0x14c>
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	ed 55       	subi	r30, 0x5D	; 93
    1542:	fb 4f       	sbci	r31, 0xFB	; 251
    1544:	40 81       	ld	r20, Z
    1546:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    154a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    154e:	84 1b       	sub	r24, r20
    1550:	91 09       	sbc	r25, r1
    1552:	6a e0       	ldi	r22, 0x0A	; 10
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    155a:	70 93 a1 04 	sts	0x04A1, r23	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    155e:	60 93 a0 04 	sts	0x04A0, r22	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    1562:	39 c0       	rjmp	.+114    	; 0x15d6 <__vector_18+0x1be>
    1564:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <_ZZ11__vector_18E9field_len>
    1568:	99 23       	and	r25, r25
    156a:	91 f0       	breq	.+36     	; 0x1590 <__vector_18+0x178>
    156c:	4f ef       	ldi	r20, 0xFF	; 255
    156e:	49 0f       	add	r20, r25
    1570:	40 93 9e 04 	sts	0x049E, r20	; 0x80049e <_ZZ11__vector_18E9field_len>
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	54 e1       	ldi	r21, 0x14	; 20
    157a:	58 9f       	mul	r21, r24
    157c:	b0 01       	movw	r22, r0
    157e:	59 9f       	mul	r21, r25
    1580:	70 0d       	add	r23, r0
    1582:	11 24       	eor	r1, r1
    1584:	c6 0f       	add	r28, r22
    1586:	d7 1f       	adc	r29, r23
    1588:	c4 0f       	add	r28, r20
    158a:	d1 1d       	adc	r29, r1
    158c:	1b 82       	std	Y+3, r1	; 0x03
    158e:	23 c0       	rjmp	.+70     	; 0x15d6 <__vector_18+0x1be>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ed 55       	subi	r30, 0x5D	; 93
    1594:	fb 4f       	sbci	r31, 0xFB	; 251
    1596:	90 81       	ld	r25, Z
    1598:	90 32       	cpi	r25, 0x20	; 32
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <__vector_18+0x1ac>
    159c:	81 50       	subi	r24, 0x01	; 1
    159e:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ11__vector_18E11field_index>
    15a2:	de 01       	movw	r26, r28
    15a4:	94 e1       	ldi	r25, 0x14	; 20
    15a6:	89 9f       	mul	r24, r25
    15a8:	a0 0d       	add	r26, r0
    15aa:	b1 1d       	adc	r27, r1
    15ac:	11 24       	eor	r1, r1
    15ae:	13 96       	adiw	r26, 0x03	; 3
    15b0:	fd 01       	movw	r30, r26
    15b2:	01 90       	ld	r0, Z+
    15b4:	00 20       	and	r0, r0
    15b6:	e9 f7       	brne	.-6      	; 0x15b2 <__vector_18+0x19a>
    15b8:	31 97       	sbiw	r30, 0x01	; 1
    15ba:	ea 1b       	sub	r30, r26
    15bc:	fb 0b       	sbc	r31, r27
    15be:	e0 93 9e 04 	sts	0x049E, r30	; 0x80049e <_ZZ11__vector_18E9field_len>
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__vector_18+0x1be>
    15c4:	94 e1       	ldi	r25, 0x14	; 20
    15c6:	89 9f       	mul	r24, r25
    15c8:	c0 0d       	add	r28, r0
    15ca:	d1 1d       	adc	r29, r1
    15cc:	11 24       	eor	r1, r1
    15ce:	1b 82       	std	Y+3, r1	; 0x03
    15d0:	81 50       	subi	r24, 0x01	; 1
    15d2:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ11__vector_18E11field_index>
    15d6:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    15da:	e8 2f       	mov	r30, r24
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	ed 55       	subi	r30, 0x5D	; 93
    15e0:	fb 4f       	sbci	r31, 0xFB	; 251
    15e2:	10 82       	st	Z, r1
    15e4:	81 11       	cpse	r24, r1
    15e6:	93 c0       	rjmp	.+294    	; 0x170e <__vector_18+0x2f6>
    15e8:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <_ZZ11__vector_18E13receiving_msg>
    15ec:	90 c0       	rjmp	.+288    	; 0x170e <__vector_18+0x2f6>
    15ee:	20 32       	cpi	r18, 0x20	; 32
    15f0:	79 f5       	brne	.+94     	; 0x1650 <__vector_18+0x238>
    15f2:	fa 01       	movw	r30, r20
    15f4:	ee 55       	subi	r30, 0x5E	; 94
    15f6:	fb 4f       	sbci	r31, 0xFB	; 251
    15f8:	80 81       	ld	r24, Z
    15fa:	80 32       	cpi	r24, 0x20	; 32
    15fc:	09 f4       	brne	.+2      	; 0x1600 <__vector_18+0x1e8>
    15fe:	94 c0       	rjmp	.+296    	; 0x1728 <__vector_18+0x310>
    1600:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ11__vector_18E11field_index>
    1604:	68 2f       	mov	r22, r24
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	fb 01       	movw	r30, r22
    160a:	31 96       	adiw	r30, 0x01	; 1
    160c:	33 97       	sbiw	r30, 0x03	; 3
    160e:	0c f0       	brlt	.+2      	; 0x1612 <__vector_18+0x1fa>
    1610:	8b c0       	rjmp	.+278    	; 0x1728 <__vector_18+0x310>
    1612:	88 23       	and	r24, r24
    1614:	79 f0       	breq	.+30     	; 0x1634 <__vector_18+0x21c>
    1616:	61 50       	subi	r22, 0x01	; 1
    1618:	71 09       	sbc	r23, r1
    161a:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <_ZZ11__vector_18E9field_len>
    161e:	a4 e1       	ldi	r26, 0x14	; 20
    1620:	a6 9f       	mul	r26, r22
    1622:	f0 01       	movw	r30, r0
    1624:	a7 9f       	mul	r26, r23
    1626:	f0 0d       	add	r31, r0
    1628:	11 24       	eor	r1, r1
    162a:	ce 0f       	add	r28, r30
    162c:	df 1f       	adc	r29, r31
    162e:	c9 0f       	add	r28, r25
    1630:	d1 1d       	adc	r29, r1
    1632:	1b 82       	std	Y+3, r1	; 0x03
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ11__vector_18E11field_index>
    163a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZZ11__vector_18E9field_len>
    163e:	4f 5f       	subi	r20, 0xFF	; 255
    1640:	5f 4f       	sbci	r21, 0xFF	; 255
    1642:	4e 33       	cpi	r20, 0x3E	; 62
    1644:	51 05       	cpc	r21, r1
    1646:	0c f0       	brlt	.+2      	; 0x164a <__vector_18+0x232>
    1648:	4e e3       	ldi	r20, 0x3E	; 62
    164a:	40 93 e2 04 	sts	0x04E2, r20	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    164e:	5f c0       	rjmp	.+190    	; 0x170e <__vector_18+0x2f6>
    1650:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZ11__vector_18E9field_len>
    1654:	84 31       	cpi	r24, 0x14	; 20
    1656:	08 f0       	brcs	.+2      	; 0x165a <__vector_18+0x242>
    1658:	67 c0       	rjmp	.+206    	; 0x1728 <__vector_18+0x310>
    165a:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <_ZZ11__vector_18E11field_index>
    165e:	41 11       	cpse	r20, r1
    1660:	19 c0       	rjmp	.+50     	; 0x1694 <__vector_18+0x27c>
    1662:	40 91 a0 04 	lds	r20, 0x04A0	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    1666:	50 91 a1 04 	lds	r21, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    166a:	ba 01       	movw	r22, r20
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	44 0f       	add	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	46 0f       	add	r20, r22
    167e:	57 1f       	adc	r21, r23
    1680:	42 0f       	add	r20, r18
    1682:	51 1d       	adc	r21, r1
    1684:	50 93 a1 04 	sts	0x04A1, r21	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    1688:	40 93 a0 04 	sts	0x04A0, r20	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZZ11__vector_18E9field_len>
    1692:	16 c0       	rjmp	.+44     	; 0x16c0 <__vector_18+0x2a8>
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	41 50       	subi	r20, 0x01	; 1
    1698:	51 09       	sbc	r21, r1
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	98 0f       	add	r25, r24
    169e:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <_ZZ11__vector_18E9field_len>
    16a2:	e4 e1       	ldi	r30, 0x14	; 20
    16a4:	e4 9f       	mul	r30, r20
    16a6:	b0 01       	movw	r22, r0
    16a8:	e5 9f       	mul	r30, r21
    16aa:	70 0d       	add	r23, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	c6 0f       	add	r28, r22
    16b0:	d7 1f       	adc	r29, r23
    16b2:	fe 01       	movw	r30, r28
    16b4:	e8 0f       	add	r30, r24
    16b6:	f1 1d       	adc	r31, r1
    16b8:	23 83       	std	Z+3, r18	; 0x03
    16ba:	c9 0f       	add	r28, r25
    16bc:	d1 1d       	adc	r29, r1
    16be:	1b 82       	std	Y+3, r1	; 0x03
    16c0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	8e 33       	cpi	r24, 0x3E	; 62
    16ca:	91 05       	cpc	r25, r1
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <__vector_18+0x2b8>
    16ce:	8e e3       	ldi	r24, 0x3E	; 62
    16d0:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    16d4:	1c c0       	rjmp	.+56     	; 0x170e <__vector_18+0x2f6>
    16d6:	2f 37       	cpi	r18, 0x7F	; 127
    16d8:	41 f4       	brne	.+16     	; 0x16ea <__vector_18+0x2d2>
    16da:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    16de:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    16e2:	18 16       	cp	r1, r24
    16e4:	19 06       	cpc	r1, r25
    16e6:	bc f0       	brlt	.+46     	; 0x1716 <__vector_18+0x2fe>
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <__vector_18+0x308>
    16ea:	20 32       	cpi	r18, 0x20	; 32
    16ec:	e9 f0       	breq	.+58     	; 0x1728 <__vector_18+0x310>
    16ee:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZ11__vector_18E11field_index>
    16f2:	c9 01       	movw	r24, r18
    16f4:	99 27       	eor	r25, r25
    16f6:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    16fa:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    16fe:	1b 82       	std	Y+3, r1	; 0x03
    1700:	1f 8a       	std	Y+23, r1	; 0x17
    1702:	1b a6       	std	Y+43, r1	; 0x2b
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ11__vector_18E13receiving_msg>
    170a:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <_ZZ11__vector_18E9charIndex>
    170e:	82 2f       	mov	r24, r18
    1710:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z12lb_echo_charh>
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <__vector_18+0x310>
    1716:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    171a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    171e:	f7 cf       	rjmp	.-18     	; 0x170e <__vector_18+0x2f6>
    1720:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZZ11__vector_18E6msg_ID+0x1>
    1724:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ11__vector_18E6msg_ID>
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	1f 91       	pop	r17
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	0f 90       	pop	r0
    174c:	1f 90       	pop	r1
    174e:	18 95       	reti

00001750 <__vector_19>:
    1750:	1f 92       	push	r1
    1752:	0f 92       	push	r0
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	0f 92       	push	r0
    1758:	11 24       	eor	r1, r1
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
    1772:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZ11__vector_19E4buff>
    1776:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <_ZZ11__vector_19E4buff+0x1>
    177a:	89 2b       	or	r24, r25
    177c:	31 f4       	brne	.+12     	; 0x178a <__vector_19+0x3a>
    177e:	0e 94 39 08 	call	0x1072	; 0x1072 <_Z16nextFullTxBufferv>
    1782:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <_ZZ11__vector_19E4buff+0x1>
    1786:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZZ11__vector_19E4buff>
    178a:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZ11__vector_19E4buff>
    178e:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <_ZZ11__vector_19E4buff+0x1>
    1792:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <_ZZ11__vector_19E9charIndex>
    1796:	df 01       	movw	r26, r30
    1798:	a8 0f       	add	r26, r24
    179a:	b1 1d       	adc	r27, r1
    179c:	9c 91       	ld	r25, X
    179e:	99 23       	and	r25, r25
    17a0:	31 f0       	breq	.+12     	; 0x17ae <__vector_19+0x5e>
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <_ZZ11__vector_19E9charIndex>
    17a8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17ac:	0d c0       	rjmp	.+26     	; 0x17c8 <__vector_19+0x78>
    17ae:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <_ZZ11__vector_19E9charIndex>
    17b2:	10 82       	st	Z, r1
    17b4:	0e 94 39 08 	call	0x1072	; 0x1072 <_Z16nextFullTxBufferv>
    17b8:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <_ZZ11__vector_19E4buff+0x1>
    17bc:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZZ11__vector_19E4buff>
    17c0:	89 2b       	or	r24, r25
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__vector_19+0x78>
    17c4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_Z14linkbus_end_txv>
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_1>:
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	2f 93       	push	r18
    17f6:	3f 93       	push	r19
    17f8:	4f 93       	push	r20
    17fa:	5f 93       	push	r21
    17fc:	6f 93       	push	r22
    17fe:	7f 93       	push	r23
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	af 93       	push	r26
    1806:	bf 93       	push	r27
    1808:	ef 93       	push	r30
    180a:	ff 93       	push	r31
    180c:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    1810:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    1814:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    1818:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	a1 1d       	adc	r26, r1
    1820:	b1 1d       	adc	r27, r1
    1822:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_current_epoch>
    1826:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <g_current_epoch+0x1>
    182a:	a0 93 93 05 	sts	0x0593, r26	; 0x800593 <g_current_epoch+0x2>
    182e:	b0 93 94 05 	sts	0x0594, r27	; 0x800594 <g_current_epoch+0x3>
    1832:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    1836:	88 23       	and	r24, r24
    1838:	29 f0       	breq	.+10     	; 0x1844 <__vector_1+0x5a>
    183a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_temperature_check_countdown>
    1844:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    1848:	88 23       	and	r24, r24
    184a:	91 f1       	breq	.+100    	; 0x18b0 <__vector_1+0xc6>
    184c:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_use_rtc_to_start>
    1850:	88 23       	and	r24, r24
    1852:	09 f4       	brne	.+2      	; 0x1856 <__vector_1+0x6c>
    1854:	ef c0       	rjmp	.+478    	; 0x1a34 <__vector_1+0x24a>
    1856:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_current_epoch>
    185a:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_current_epoch+0x1>
    185e:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch+0x2>
    1862:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x3>
    1866:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    186a:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    186e:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    1872:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    1876:	48 17       	cp	r20, r24
    1878:	59 07       	cpc	r21, r25
    187a:	6a 07       	cpc	r22, r26
    187c:	7b 07       	cpc	r23, r27
    187e:	08 f4       	brcc	.+2      	; 0x1882 <__vector_1+0x98>
    1880:	d9 c0       	rjmp	.+434    	; 0x1a34 <__vector_1+0x24a>
    1882:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_current_epoch>
    1886:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_current_epoch+0x1>
    188a:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch+0x2>
    188e:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x3>
    1892:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    1896:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    189a:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    189e:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    18a2:	48 17       	cp	r20, r24
    18a4:	59 07       	cpc	r21, r25
    18a6:	6a 07       	cpc	r22, r26
    18a8:	7b 07       	cpc	r23, r27
    18aa:	08 f4       	brcc	.+2      	; 0x18ae <__vector_1+0xc4>
    18ac:	a9 c0       	rjmp	.+338    	; 0x1a00 <__vector_1+0x216>
    18ae:	c2 c0       	rjmp	.+388    	; 0x1a34 <__vector_1+0x24a>
    18b0:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_use_rtc_to_start>
    18b4:	88 23       	and	r24, r24
    18b6:	e1 f0       	breq	.+56     	; 0x18f0 <__vector_1+0x106>
    18b8:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_current_epoch>
    18bc:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_current_epoch+0x1>
    18c0:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch+0x2>
    18c4:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x3>
    18c8:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    18cc:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    18d0:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    18d4:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    18d8:	48 17       	cp	r20, r24
    18da:	59 07       	cpc	r21, r25
    18dc:	6a 07       	cpc	r22, r26
    18de:	7b 07       	cpc	r23, r27
    18e0:	38 f0       	brcs	.+14     	; 0x18f0 <__vector_1+0x106>
    18e2:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_use_rtc_to_start>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_transmissions_disabled>
    18ec:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
    18f0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    18f4:	81 11       	cpse	r24, r1
    18f6:	9e c0       	rjmp	.+316    	; 0x1a34 <__vector_1+0x24a>
    18f8:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_seconds_since_sync>
    18fc:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <g_seconds_since_sync+0x1>
    1900:	a0 91 9d 05 	lds	r26, 0x059D	; 0x80059d <g_seconds_since_sync+0x2>
    1904:	b0 91 9e 05 	lds	r27, 0x059E	; 0x80059e <g_seconds_since_sync+0x3>
    1908:	89 2b       	or	r24, r25
    190a:	8a 2b       	or	r24, r26
    190c:	8b 2b       	or	r24, r27
    190e:	81 f4       	brne	.+32     	; 0x1930 <__vector_1+0x146>
    1910:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_id_interval>
    1914:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_id_interval+0x1>
    1918:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZZ10__vector_1E12id_countdown+0x1>
    191c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ10__vector_1E12id_countdown>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_fox_counter+0x1>
    1928:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_fox_counter>
    192c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_lastSeconds>
    1930:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_seconds_since_sync>
    1934:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <g_seconds_since_sync+0x1>
    1938:	a0 91 9d 05 	lds	r26, 0x059D	; 0x80059d <g_seconds_since_sync+0x2>
    193c:	b0 91 9e 05 	lds	r27, 0x059E	; 0x80059e <g_seconds_since_sync+0x3>
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	a1 1d       	adc	r26, r1
    1944:	b1 1d       	adc	r27, r1
    1946:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <g_seconds_since_sync>
    194a:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <g_seconds_since_sync+0x1>
    194e:	a0 93 9d 05 	sts	0x059D, r26	; 0x80059d <g_seconds_since_sync+0x2>
    1952:	b0 93 9e 05 	sts	0x059E, r27	; 0x80059e <g_seconds_since_sync+0x3>
    1956:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <g_fox_seconds_into_interval>
    195a:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <g_fox_seconds_into_interval+0x1>
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <g_fox_seconds_into_interval+0x1>
    1964:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <g_fox_seconds_into_interval>
    1968:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ10__vector_1E12id_countdown>
    196c:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZZ10__vector_1E12id_countdown+0x1>
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	29 f0       	breq	.+10     	; 0x197e <__vector_1+0x194>
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZZ10__vector_1E12id_countdown+0x1>
    197a:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ10__vector_1E12id_countdown>
    197e:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_number_of_foxes>
    1982:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_number_of_foxes+0x1>
    1986:	89 2b       	or	r24, r25
    1988:	09 f4       	brne	.+2      	; 0x198c <__vector_1+0x1a2>
    198a:	54 c0       	rjmp	.+168    	; 0x1a34 <__vector_1+0x24a>
    198c:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <g_seconds_since_sync>
    1990:	70 91 9c 05 	lds	r23, 0x059C	; 0x80059c <g_seconds_since_sync+0x1>
    1994:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <g_seconds_since_sync+0x2>
    1998:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <g_seconds_since_sync+0x3>
    199c:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <g_on_air_interval>
    19a0:	30 91 64 05 	lds	r19, 0x0564	; 0x800564 <g_on_air_interval+0x1>
    19a4:	03 2e       	mov	r0, r19
    19a6:	00 0c       	add	r0, r0
    19a8:	44 0b       	sbc	r20, r20
    19aa:	55 0b       	sbc	r21, r21
    19ac:	0e 94 c1 2a 	call	0x5582	; 0x5582 <__divmodsi4>
    19b0:	67 2b       	or	r22, r23
    19b2:	68 2b       	or	r22, r24
    19b4:	69 2b       	or	r22, r25
    19b6:	49 f1       	breq	.+82     	; 0x1a0a <__vector_1+0x220>
    19b8:	3d c0       	rjmp	.+122    	; 0x1a34 <__vector_1+0x24a>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_fox_counter+0x1>
    19c2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_fox_counter>
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	8d e0       	ldi	r24, 0x0D	; 13
    19ca:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <g_fox_transition>
    19d4:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_fox_seconds_into_interval+0x1>
    19d8:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_fox_seconds_into_interval>
    19dc:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ10__vector_1E12id_countdown>
    19e0:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZZ10__vector_1E12id_countdown+0x1>
    19e4:	89 2b       	or	r24, r25
    19e6:	31 f5       	brne	.+76     	; 0x1a34 <__vector_1+0x24a>
    19e8:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_id_interval>
    19ec:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_id_interval+0x1>
    19f0:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZZ10__vector_1E12id_countdown+0x1>
    19f4:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ10__vector_1E12id_countdown>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <g_time_to_ID>
    19fe:	1a c0       	rjmp	.+52     	; 0x1a34 <__vector_1+0x24a>
    1a00:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <g_LED_enunciating>
    1a04:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <g_transmissions_disabled>
    1a08:	15 c0       	rjmp	.+42     	; 0x1a34 <__vector_1+0x24a>
    1a0a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_fox_counter>
    1a0e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_fox_counter+0x1>
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_fox_counter+0x1>
    1a18:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_fox_counter>
    1a1c:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <g_fox_counter>
    1a20:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <g_fox_counter+0x1>
    1a24:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_number_of_foxes>
    1a28:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_number_of_foxes+0x1>
    1a2c:	82 17       	cp	r24, r18
    1a2e:	93 07       	cpc	r25, r19
    1a30:	74 f6       	brge	.-100    	; 0x19ce <__vector_1+0x1e4>
    1a32:	c3 cf       	rjmp	.-122    	; 0x19ba <__vector_1+0x1d0>
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	bf 91       	pop	r27
    1a3a:	af 91       	pop	r26
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	7f 91       	pop	r23
    1a42:	6f 91       	pop	r22
    1a44:	5f 91       	pop	r21
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__vector_14>:
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
    1a78:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ11__vector_14E6toggle>
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	81 11       	cpse	r24, r1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <_ZZ11__vector_14E6toggle>
    1a86:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <g_audio_tone_state>
    1a8a:	99 23       	and	r25, r25
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <__vector_14+0x50>
    1a8e:	81 11       	cpse	r24, r1
    1a90:	05 c0       	rjmp	.+10     	; 0x1a9c <__vector_14+0x46>
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	89 e0       	ldi	r24, 0x09	; 9
    1a96:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1a9a:	09 c0       	rjmp	.+18     	; 0x1aae <__vector_14+0x58>
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	89 e0       	ldi	r24, 0x09	; 9
    1aa0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <__vector_14+0x58>
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	89 e0       	ldi	r24, 0x09	; 9
    1aaa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1aae:	ff 91       	pop	r31
    1ab0:	ef 91       	pop	r30
    1ab2:	bf 91       	pop	r27
    1ab4:	af 91       	pop	r26
    1ab6:	9f 91       	pop	r25
    1ab8:	8f 91       	pop	r24
    1aba:	7f 91       	pop	r23
    1abc:	6f 91       	pop	r22
    1abe:	5f 91       	pop	r21
    1ac0:	4f 91       	pop	r20
    1ac2:	3f 91       	pop	r19
    1ac4:	2f 91       	pop	r18
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	0f 90       	pop	r0
    1acc:	1f 90       	pop	r1
    1ace:	18 95       	reti

00001ad0 <__vector_11>:
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
    1ae2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_sendAMmodulation>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	2e c0       	rjmp	.+92     	; 0x1b46 <__vector_11+0x76>
    1aea:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZZ11__vector_11E5index>
    1aee:	81 11       	cpse	r24, r1
    1af0:	2a c0       	rjmp	.+84     	; 0x1b46 <__vector_11+0x76>
    1af2:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <g_sendAMmodulationConstantly>
    1af6:	88 23       	and	r24, r24
    1af8:	91 f0       	breq	.+36     	; 0x1b1e <__vector_11+0x4e>
    1afa:	34 c0       	rjmp	.+104    	; 0x1b64 <__vector_11+0x94>
    1afc:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZZ11__vector_11E5index>
    1b00:	98 b1       	in	r25, 0x08	; 8
    1b02:	8f 70       	andi	r24, 0x0F	; 15
    1b04:	90 7f       	andi	r25, 0xF0	; 240
    1b06:	89 2b       	or	r24, r25
    1b08:	88 b9       	out	0x08, r24	; 8
    1b0a:	9b b1       	in	r25, 0x0b	; 11
    1b0c:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_11E11controlPins>
    1b10:	80 73       	andi	r24, 0x30	; 48
    1b12:	82 95       	swap	r24
    1b14:	8f 70       	andi	r24, 0x0F	; 15
    1b16:	9c 7f       	andi	r25, 0xFC	; 252
    1b18:	89 2b       	or	r24, r25
    1b1a:	8b b9       	out	0x0b, r24	; 11
    1b1c:	2b c0       	rjmp	.+86     	; 0x1b74 <__vector_11+0xa4>
    1b1e:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_11E11controlPins>
    1b22:	8f 33       	cpi	r24, 0x3F	; 63
    1b24:	39 f1       	breq	.+78     	; 0x1b74 <__vector_11+0xa4>
    1b26:	8f e3       	ldi	r24, 0x3F	; 63
    1b28:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_11E11controlPins>
    1b2c:	88 b1       	in	r24, 0x08	; 8
    1b2e:	8f 60       	ori	r24, 0x0F	; 15
    1b30:	88 b9       	out	0x08, r24	; 8
    1b32:	9b b1       	in	r25, 0x0b	; 11
    1b34:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_11E11controlPins>
    1b38:	80 73       	andi	r24, 0x30	; 48
    1b3a:	82 95       	swap	r24
    1b3c:	8f 70       	andi	r24, 0x0F	; 15
    1b3e:	9c 7f       	andi	r25, 0xFC	; 252
    1b40:	89 2b       	or	r24, r25
    1b42:	8b b9       	out	0x0b, r24	; 11
    1b44:	17 c0       	rjmp	.+46     	; 0x1b74 <__vector_11+0xa4>
    1b46:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <_ZZ11__vector_11E5index>
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	9e 0f       	add	r25, r30
    1b4e:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <_ZZ11__vector_11E5index>
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	eb 59       	subi	r30, 0x9B	; 155
    1b56:	fa 4f       	sbci	r31, 0xFA	; 250
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_11E11controlPins>
    1b5e:	90 32       	cpi	r25, 0x20	; 32
    1b60:	68 f6       	brcc	.-102    	; 0x1afc <__vector_11+0x2c>
    1b62:	ce cf       	rjmp	.-100    	; 0x1b00 <__vector_11+0x30>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_ZZ11__vector_11E5index>
    1b6a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <g_dataModulation>
    1b6e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_11E11controlPins>
    1b72:	c6 cf       	rjmp	.-116    	; 0x1b00 <__vector_11+0x30>
    1b74:	ff 91       	pop	r31
    1b76:	ef 91       	pop	r30
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	0f 90       	pop	r0
    1b82:	1f 90       	pop	r1
    1b84:	18 95       	reti

00001b86 <_Z23clockConfigurationCheckv>:
    1b86:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <_Z23clockConfigurationCheckv+0xa>
    1b8e:	69 c0       	rjmp	.+210    	; 0x1c62 <_Z23clockConfigurationCheckv+0xdc>
    1b90:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    1b94:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    1b98:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    1b9c:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    1ba0:	89 2b       	or	r24, r25
    1ba2:	8a 2b       	or	r24, r26
    1ba4:	8b 2b       	or	r24, r27
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <_Z23clockConfigurationCheckv+0x24>
    1ba8:	5e c0       	rjmp	.+188    	; 0x1c66 <_Z23clockConfigurationCheckv+0xe0>
    1baa:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    1bae:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    1bb2:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    1bb6:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    1bba:	89 2b       	or	r24, r25
    1bbc:	8a 2b       	or	r24, r26
    1bbe:	8b 2b       	or	r24, r27
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <_Z23clockConfigurationCheckv+0x3e>
    1bc2:	53 c0       	rjmp	.+166    	; 0x1c6a <_Z23clockConfigurationCheckv+0xe4>
    1bc4:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    1bc8:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    1bcc:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    1bd0:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    1bd4:	81 15       	cp	r24, r1
    1bd6:	96 46       	sbci	r25, 0x66	; 102
    1bd8:	ae 4e       	sbci	r26, 0xEE	; 238
    1bda:	bf 45       	sbci	r27, 0x5F	; 95
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <_Z23clockConfigurationCheckv+0x5a>
    1bde:	47 c0       	rjmp	.+142    	; 0x1c6e <_Z23clockConfigurationCheckv+0xe8>
    1be0:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_finish_epoch>
    1be4:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    1be8:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    1bec:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    1bf0:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    1bf4:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    1bf8:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    1bfc:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    1c00:	84 17       	cp	r24, r20
    1c02:	95 07       	cpc	r25, r21
    1c04:	a6 07       	cpc	r26, r22
    1c06:	b7 07       	cpc	r27, r23
    1c08:	a0 f5       	brcc	.+104    	; 0x1c72 <_Z23clockConfigurationCheckv+0xec>
    1c0a:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_current_epoch>
    1c0e:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_current_epoch+0x1>
    1c12:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch+0x2>
    1c16:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x3>
    1c1a:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    1c1e:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    1c22:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    1c26:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    1c2a:	84 17       	cp	r24, r20
    1c2c:	95 07       	cpc	r25, r21
    1c2e:	a6 07       	cpc	r26, r22
    1c30:	b7 07       	cpc	r27, r23
    1c32:	08 f1       	brcs	.+66     	; 0x1c76 <_Z23clockConfigurationCheckv+0xf0>
    1c34:	40 91 91 05 	lds	r20, 0x0591	; 0x800591 <g_current_epoch>
    1c38:	50 91 92 05 	lds	r21, 0x0592	; 0x800592 <g_current_epoch+0x1>
    1c3c:	60 91 93 05 	lds	r22, 0x0593	; 0x800593 <g_current_epoch+0x2>
    1c40:	70 91 94 05 	lds	r23, 0x0594	; 0x800594 <g_current_epoch+0x3>
    1c44:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    1c48:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    1c4c:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    1c50:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    1c54:	84 17       	cp	r24, r20
    1c56:	95 07       	cpc	r25, r21
    1c58:	a6 07       	cpc	r26, r22
    1c5a:	b7 07       	cpc	r27, r23
    1c5c:	70 f0       	brcs	.+28     	; 0x1c7a <_Z23clockConfigurationCheckv+0xf4>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	08 95       	ret
    1c62:	84 e0       	ldi	r24, 0x04	; 4
    1c64:	08 95       	ret
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	08 95       	ret
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	08 95       	ret
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	08 95       	ret
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	08 95       	ret
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	08 95       	ret
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	08 95       	ret

00001c7e <_Z13sendMorseToneh>:
    1c7e:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_lastSeconds>
    1c82:	91 11       	cpse	r25, r1
    1c84:	0a c0       	rjmp	.+20     	; 0x1c9a <_Z13sendMorseToneh+0x1c>
    1c86:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <g_fox_tone_offset>
    1c8a:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <g_fox_tone_offset+0x1>
    1c8e:	9f e2       	ldi	r25, 0x2F	; 47
    1c90:	92 1b       	sub	r25, r18
    1c92:	97 bd       	out	0x27, r25	; 39
    1c94:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_audio_tone_state>
    1c98:	08 95       	ret
    1c9a:	8f e2       	ldi	r24, 0x2F	; 47
    1c9c:	87 bd       	out	0x27, r24	; 39
    1c9e:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_audio_tone_state>
    1ca2:	08 95       	ret

00001ca4 <__vector_8>:
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	2f 93       	push	r18
    1cb0:	3f 93       	push	r19
    1cb2:	4f 93       	push	r20
    1cb4:	5f 93       	push	r21
    1cb6:	6f 93       	push	r22
    1cb8:	7f 93       	push	r23
    1cba:	8f 93       	push	r24
    1cbc:	9f 93       	push	r25
    1cbe:	af 93       	push	r26
    1cc0:	bf 93       	push	r27
    1cc2:	ef 93       	push	r30
    1cc4:	ff 93       	push	r31
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <__vector_8+0x28>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_tick_count>
    1cd4:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <g_tick_count+0x1>
    1cd8:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <g_tick_count+0x2>
    1cdc:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <g_tick_count+0x3>
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	a1 1d       	adc	r26, r1
    1ce4:	b1 1d       	adc	r27, r1
    1ce6:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_tick_count>
    1cea:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <g_tick_count+0x1>
    1cee:	a0 93 11 05 	sts	0x0511, r26	; 0x800511 <g_tick_count+0x2>
    1cf2:	b0 93 12 05 	sts	0x0512, r27	; 0x800512 <g_tick_count+0x3>
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
    1cfc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_sync_enabled>
    1d00:	88 23       	and	r24, r24
    1d02:	91 f1       	breq	.+100    	; 0x1d68 <__vector_8+0xc4>
    1d04:	84 e0       	ldi	r24, 0x04	; 4
    1d06:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z11digitalReadh>
    1d0a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1d0e:	89 13       	cpse	r24, r25
    1d10:	25 c0       	rjmp	.+74     	; 0x1d5c <__vector_8+0xb8>
    1d12:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <g_sync_pin_timer>
    1d16:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <g_sync_pin_timer+0x1>
    1d1a:	2b 3b       	cpi	r18, 0xBB	; 187
    1d1c:	30 41       	sbci	r19, 0x10	; 16
    1d1e:	54 f4       	brge	.+20     	; 0x1d34 <__vector_8+0x90>
    1d20:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <g_sync_pin_timer>
    1d24:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <g_sync_pin_timer+0x1>
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	30 93 56 05 	sts	0x0556, r19	; 0x800556 <g_sync_pin_timer+0x1>
    1d30:	20 93 55 05 	sts	0x0555, r18	; 0x800555 <g_sync_pin_timer>
    1d34:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <g_sync_pin_timer>
    1d38:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <g_sync_pin_timer+0x1>
    1d3c:	25 36       	cpi	r18, 0x65	; 101
    1d3e:	31 05       	cpc	r19, r1
    1d40:	9c f0       	brlt	.+38     	; 0x1d68 <__vector_8+0xc4>
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <__vector_8+0xa4>
    1d46:	fe c0       	rjmp	.+508    	; 0x1f44 <__vector_8+0x2a0>
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_sync_pin_stable>
    1d4e:	81 11       	cpse	r24, r1
    1d50:	0b c0       	rjmp	.+22     	; 0x1d68 <__vector_8+0xc4>
    1d52:	61 e0       	ldi	r22, 0x01	; 1
    1d54:	8d e0       	ldi	r24, 0x0D	; 13
    1d56:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <__vector_8+0xc4>
    1d5c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E15holdButtonState>
    1d60:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_sync_pin_timer+0x1>
    1d64:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_sync_pin_timer>
    1d68:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	f4 c0       	rjmp	.+488    	; 0x1f58 <__vector_8+0x2b4>
    1d70:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <g_on_the_air>
    1d74:	81 11       	cpse	r24, r1
    1d76:	ea c0       	rjmp	.+468    	; 0x1f4c <__vector_8+0x2a8>
    1d78:	ef c0       	rjmp	.+478    	; 0x1f58 <__vector_8+0x2b4>
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	88 e0       	ldi	r24, 0x08	; 8
    1d7e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1d82:	84 e9       	ldi	r24, 0x94	; 148
    1d84:	95 e0       	ldi	r25, 0x05	; 5
    1d86:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10__vector_8E9ptt_delay+0x1>
    1d8a:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10__vector_8E9ptt_delay>
    1d8e:	e9 c0       	rjmp	.+466    	; 0x1f62 <__vector_8+0x2be>
    1d90:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10__vector_8E9ptt_delay>
    1d94:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10__vector_8E9ptt_delay+0x1>
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <__vector_8+0x104>
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10__vector_8E9ptt_delay+0x1>
    1da2:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10__vector_8E9ptt_delay>
    1da6:	dd c0       	rjmp	.+442    	; 0x1f62 <__vector_8+0x2be>
    1da8:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1dac:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	e9 f1       	breq	.+122    	; 0x1e2e <__vector_8+0x18a>
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1dba:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1dbe:	89 2b       	or	r24, r25
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <__vector_8+0x120>
    1dc2:	cf c0       	rjmp	.+414    	; 0x1f62 <__vector_8+0x2be>
    1dc4:	ae 01       	movw	r20, r28
    1dc6:	4e 5f       	subi	r20, 0xFE	; 254
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dca:	be 01       	movw	r22, r28
    1dcc:	6f 5f       	subi	r22, 0xFF	; 255
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>
    1dd8:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZZ10__vector_8E3key>
    1ddc:	99 81       	ldd	r25, Y+1	; 0x01
    1dde:	91 11       	cpse	r25, r1
    1de0:	0c c0       	rjmp	.+24     	; 0x1dfa <__vector_8+0x156>
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	99 23       	and	r25, r25
    1de6:	49 f0       	breq	.+18     	; 0x1dfa <__vector_8+0x156>
    1de8:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ10__vector_8E3key>
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <g_callsign_sent>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z13sendMorseToneh>
    1df8:	15 c0       	rjmp	.+42     	; 0x1e24 <__vector_8+0x180>
    1dfa:	88 23       	and	r24, r24
    1dfc:	99 f0       	breq	.+38     	; 0x1e24 <__vector_8+0x180>
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	8d e0       	ldi	r24, 0x0D	; 13
    1e02:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1e06:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <g_enable_transmitter>
    1e0a:	88 23       	and	r24, r24
    1e0c:	59 f0       	breq	.+22     	; 0x1e24 <__vector_8+0x180>
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	8a e0       	ldi	r24, 0x0A	; 10
    1e12:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	88 e0       	ldi	r24, 0x08	; 8
    1e1a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <g_sendAMmodulation>
    1e24:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZZ10__vector_8E3key>
    1e28:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z13sendMorseToneh>
    1e2c:	9a c0       	rjmp	.+308    	; 0x1f62 <__vector_8+0x2be>
    1e2e:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_sync_pin_stable>
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	29 f0       	breq	.+10     	; 0x1e40 <__vector_8+0x19c>
    1e36:	60 91 96 04 	lds	r22, 0x0496	; 0x800496 <_ZZ10__vector_8E3key>
    1e3a:	8d e0       	ldi	r24, 0x0D	; 13
    1e3c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1e40:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <g_enable_transmitter>
    1e44:	88 23       	and	r24, r24
    1e46:	49 f0       	breq	.+18     	; 0x1e5a <__vector_8+0x1b6>
    1e48:	60 91 96 04 	lds	r22, 0x0496	; 0x800496 <_ZZ10__vector_8E3key>
    1e4c:	8a e0       	ldi	r24, 0x0A	; 10
    1e4e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1e52:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZZ10__vector_8E3key>
    1e56:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <g_sendAMmodulation>
    1e5a:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_code_throttle>
    1e5e:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_code_throttle+0x1>
    1e62:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1e66:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1e6a:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZZ10__vector_8E3key>
    1e6e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z13sendMorseToneh>
    1e72:	77 c0       	rjmp	.+238    	; 0x1f62 <__vector_8+0x2be>
    1e74:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1e78:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	09 f1       	breq	.+66     	; 0x1ec2 <__vector_8+0x21e>
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1e86:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1e8a:	89 2b       	or	r24, r25
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <__vector_8+0x1ec>
    1e8e:	69 c0       	rjmp	.+210    	; 0x1f62 <__vector_8+0x2be>
    1e90:	ae 01       	movw	r20, r28
    1e92:	4e 5f       	subi	r20, 0xFE	; 254
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	be 01       	movw	r22, r28
    1e98:	6f 5f       	subi	r22, 0xFF	; 255
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>
    1ea4:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZZ10__vector_8E3key>
    1ea8:	68 2f       	mov	r22, r24
    1eaa:	8d e0       	ldi	r24, 0x0D	; 13
    1eac:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1eb0:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_code_throttle>
    1eb4:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_code_throttle+0x1>
    1eb8:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1ebc:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1ec0:	50 c0       	rjmp	.+160    	; 0x1f62 <__vector_8+0x2be>
    1ec2:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <g_code_throttle>
    1ec6:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <g_code_throttle+0x1>
    1eca:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10__vector_8E7codeInc+0x1>
    1ece:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10__vector_8E7codeInc>
    1ed2:	47 c0       	rjmp	.+142    	; 0x1f62 <__vector_8+0x2be>
    1ed4:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZZ10__vector_8E3key>
    1ed8:	88 23       	and	r24, r24
    1eda:	51 f0       	breq	.+20     	; 0x1ef0 <__vector_8+0x24c>
    1edc:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ10__vector_8E3key>
    1ee0:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_sync_pin_stable>
    1ee4:	82 30       	cpi	r24, 0x02	; 2
    1ee6:	21 f0       	breq	.+8      	; 0x1ef0 <__vector_8+0x24c>
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	8d e0       	ldi	r24, 0x0D	; 13
    1eec:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	8a e0       	ldi	r24, 0x0A	; 10
    1ef4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	88 e0       	ldi	r24, 0x08	; 8
    1efc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1f00:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <g_sendAMmodulation>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z13sendMorseToneh>
    1f0a:	88 e0       	ldi	r24, 0x08	; 8
    1f0c:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z11digitalReadh>
    1f10:	88 23       	and	r24, r24
    1f12:	39 f0       	breq	.+14     	; 0x1f22 <__vector_8+0x27e>
    1f14:	84 e6       	ldi	r24, 0x64	; 100
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10__vector_8E9ptt_delay+0x1>
    1f1c:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10__vector_8E9ptt_delay>
    1f20:	20 c0       	rjmp	.+64     	; 0x1f62 <__vector_8+0x2be>
    1f22:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10__vector_8E9ptt_delay>
    1f26:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10__vector_8E9ptt_delay+0x1>
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <__vector_8+0x296>
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10__vector_8E9ptt_delay+0x1>
    1f34:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10__vector_8E9ptt_delay>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <__vector_8+0x2be>
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	88 e0       	ldi	r24, 0x08	; 8
    1f3e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <__vector_8+0x2be>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_sync_pin_stable>
    1f4a:	0e cf       	rjmp	.-484    	; 0x1d68 <__vector_8+0xc4>
    1f4c:	88 e0       	ldi	r24, 0x08	; 8
    1f4e:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z11digitalReadh>
    1f52:	81 11       	cpse	r24, r1
    1f54:	1d cf       	rjmp	.-454    	; 0x1d90 <__vector_8+0xec>
    1f56:	11 cf       	rjmp	.-478    	; 0x1d7a <__vector_8+0xd6>
    1f58:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_LED_enunciating>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	8a cf       	rjmp	.-236    	; 0x1e74 <__vector_8+0x1d0>
    1f60:	b9 cf       	rjmp	.-142    	; 0x1ed4 <__vector_8+0x230>
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	0f 90       	pop	r0
    1f88:	1f 90       	pop	r1
    1f8a:	18 95       	reti

00001f8c <_Z11setupForFoxP5Fox_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox)
{
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <_Z11setupForFoxP5Fox_t+0x6>
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
	if(fox)
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <_Z11setupForFoxP5Fox_t+0x1a>
	{
		if(*fox != INVALID_FOX)
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 81       	ld	r24, Z
    1f9e:	86 31       	cpi	r24, 0x16	; 22
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <_Z11setupForFoxP5Fox_t+0x1a>
		{
			g_fox = *fox;
    1fa2:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <g_fox>
		}
	}

	switch(g_fox)
    1fa6:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    1faa:	84 31       	cpi	r24, 0x14	; 20
    1fac:	30 f4       	brcc	.+12     	; 0x1fba <_Z11setupForFoxP5Fox_t+0x2e>
    1fae:	89 30       	cpi	r24, 0x09	; 9
    1fb0:	a8 f5       	brcc	.+106    	; 0x201c <_Z11setupForFoxP5Fox_t+0x90>
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	86 30       	cpi	r24, 0x06	; 6
    1fb6:	a0 f0       	brcs	.+40     	; 0x1fe0 <_Z11setupForFoxP5Fox_t+0x54>
    1fb8:	66 c0       	rjmp	.+204    	; 0x2086 <_Z11setupForFoxP5Fox_t+0xfa>
    1fba:	84 31       	cpi	r24, 0x14	; 20
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <_Z11setupForFoxP5Fox_t+0x38>
    1fbe:	85 31       	cpi	r24, 0x15	; 21
    1fc0:	41 f0       	breq	.+16     	; 0x1fd2 <_Z11setupForFoxP5Fox_t+0x46>
    1fc2:	61 c0       	rjmp	.+194    	; 0x2086 <_Z11setupForFoxP5Fox_t+0xfa>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1fc4:	88 e7       	ldi	r24, 0x78	; 120
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_startclock_interval+0x1>
    1fcc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_startclock_interval>
		}
		break;
    1fd0:	7a c0       	rjmp	.+244    	; 0x20c6 <_Z11setupForFoxP5Fox_t+0x13a>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1fd2:	8c e2       	ldi	r24, 0x2C	; 44
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_startclock_interval+0x1>
    1fda:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_startclock_interval>
		}
		break;
    1fde:	73 c0       	rjmp	.+230    	; 0x20c6 <_Z11setupForFoxP5Fox_t+0x13a>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1fe0:	8c e3       	ldi	r24, 0x3C	; 60
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <g_on_air_interval+0x1>
    1fe8:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_on_air_interval>
			g_number_of_foxes = 5;
    1fec:	25 e0       	ldi	r18, 0x05	; 5
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <g_number_of_foxes+0x1>
    1ff4:	20 93 5f 05 	sts	0x055F, r18	; 0x80055f <g_number_of_foxes>
			g_fox_id_offset = 0;
    1ff8:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_fox_id_offset+0x1>
    1ffc:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_fox_id_offset>
			g_pattern_codespeed = 8;
    2000:	28 e0       	ldi	r18, 0x08	; 8
    2002:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
			g_id_interval = 60;
    2006:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    200a:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
			g_startclock_interval = 300;
    200e:	8c e2       	ldi	r24, 0x2C	; 44
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_startclock_interval+0x1>
    2016:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_startclock_interval>
		}
		break;
    201a:	55 c0       	rjmp	.+170    	; 0x20c6 <_Z11setupForFoxP5Fox_t+0x13a>
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    201c:	8c e0       	ldi	r24, 0x0C	; 12
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <g_on_air_interval+0x1>
    2024:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_on_air_interval>
			g_number_of_foxes = 5;
    2028:	85 e0       	ldi	r24, 0x05	; 5
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <g_number_of_foxes+0x1>
    2030:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? SPRINT_SLOW_CODE_SPEED : SPRINT_FAST_CODE_SPEED;
    2034:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    2038:	83 31       	cpi	r24, 0x13	; 19
    203a:	31 f0       	breq	.+12     	; 0x2048 <_Z11setupForFoxP5Fox_t+0xbc>
    203c:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    2040:	8e 30       	cpi	r24, 0x0E	; 14
    2042:	20 f0       	brcs	.+8      	; 0x204c <_Z11setupForFoxP5Fox_t+0xc0>
    2044:	88 e0       	ldi	r24, 0x08	; 8
    2046:	03 c0       	rjmp	.+6      	; 0x204e <_Z11setupForFoxP5Fox_t+0xc2>
    2048:	8f e0       	ldi	r24, 0x0F	; 15
    204a:	01 c0       	rjmp	.+2      	; 0x204e <_Z11setupForFoxP5Fox_t+0xc2>
    204c:	8f e0       	ldi	r24, 0x0F	; 15
    204e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    2052:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    2056:	8e 30       	cpi	r24, 0x0E	; 14
    2058:	18 f0       	brcs	.+6      	; 0x2060 <_Z11setupForFoxP5Fox_t+0xd4>
    205a:	8d e0       	ldi	r24, 0x0D	; 13
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <_Z11setupForFoxP5Fox_t+0xd8>
    2060:	88 e0       	ldi	r24, 0x08	; 8
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_fox_id_offset+0x1>
    2068:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_fox_id_offset>
			g_id_interval = 600;
    206c:	88 e5       	ldi	r24, 0x58	; 88
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    2074:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
			g_startclock_interval = 120;
    2078:	88 e7       	ldi	r24, 0x78	; 120
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_startclock_interval+0x1>
    2080:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_startclock_interval>
		}
		break;
    2084:	20 c0       	rjmp	.+64     	; 0x20c6 <_Z11setupForFoxP5Fox_t+0x13a>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    2086:	88 e5       	ldi	r24, 0x58	; 88
    2088:	92 e0       	ldi	r25, 0x02	; 2
    208a:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <g_on_air_interval+0x1>
    208e:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <g_on_air_interval>
			g_number_of_foxes = 1;
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <g_number_of_foxes+0x1>
    209a:	20 93 5f 05 	sts	0x055F, r18	; 0x80055f <g_number_of_foxes>
			g_pattern_codespeed = 8;
    209e:	28 e0       	ldi	r18, 0x08	; 8
    20a0:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <g_pattern_codespeed>
			g_id_interval = 600;
    20a4:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_id_interval+0x1>
    20a8:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    20ac:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    20b0:	88 30       	cpi	r24, 0x08	; 8
    20b2:	19 f0       	breq	.+6      	; 0x20ba <_Z11setupForFoxP5Fox_t+0x12e>
    20b4:	8c e2       	ldi	r24, 0x2C	; 44
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <_Z11setupForFoxP5Fox_t+0x132>
    20ba:	88 e7       	ldi	r24, 0x78	; 120
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <g_startclock_interval+0x1>
    20c2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_startclock_interval>
		}
		break;
	}

	ConfigurationState_t state = clockConfigurationCheck();
    20c6:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_Z23clockConfigurationCheckv>

	if((g_use_rtc_to_start = ((state == SCHEDULED_EVENT_DID_NOT_START) || (state == WAITING_FOR_START))))
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <_Z11setupForFoxP5Fox_t+0x144>
    20ce:	e5 c0       	rjmp	.+458    	; 0x229a <_Z11setupForFoxP5Fox_t+0x30e>
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <_Z11setupForFoxP5Fox_t+0x14c>
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_use_rtc_to_start>
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	09 f0       	breq	.+2      	; 0x20e2 <_Z11setupForFoxP5Fox_t+0x156>
    20e0:	bd c0       	rjmp	.+378    	; 0x225c <_Z11setupForFoxP5Fox_t+0x2d0>
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    20e2:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_start_epoch>
    20e6:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    20ea:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    20ee:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    20f2:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    20f6:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    20fa:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    20fe:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    2102:	48 17       	cp	r20, r24
    2104:	59 07       	cpc	r21, r25
    2106:	6a 07       	cpc	r22, r26
    2108:	7b 07       	cpc	r23, r27
    210a:	08 f0       	brcs	.+2      	; 0x210e <_Z11setupForFoxP5Fox_t+0x182>
    210c:	86 c0       	rjmp	.+268    	; 0x221a <_Z11setupForFoxP5Fox_t+0x28e>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    210e:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    2112:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    2116:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    211a:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    211e:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_start_epoch>
    2122:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    2126:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    212a:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    212e:	84 1b       	sub	r24, r20
    2130:	95 0b       	sbc	r25, r21
    2132:	a6 0b       	sbc	r26, r22
    2134:	b7 0b       	sbc	r27, r23
    2136:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <g_seconds_since_sync>
    213a:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <g_seconds_since_sync+0x1>
    213e:	a0 93 9d 05 	sts	0x059D, r26	; 0x80059d <g_seconds_since_sync+0x2>
    2142:	b0 93 9e 05 	sts	0x059E, r27	; 0x80059e <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;                                     /* Controls transmitter Morse activity */
    2146:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
			g_code_throttle    = 0;                                         /* Adjusts Morse code speed */
    214a:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_code_throttle+0x1>
    214e:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_code_throttle>
			g_callsign_sent = FALSE;
    2152:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <g_callsign_sent>

			g_fox_seconds_into_interval = g_seconds_since_sync % g_startclock_interval;
    2156:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <g_seconds_since_sync>
    215a:	70 91 9c 05 	lds	r23, 0x059C	; 0x80059c <g_seconds_since_sync+0x1>
    215e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <g_seconds_since_sync+0x2>
    2162:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <g_seconds_since_sync+0x3>
    2166:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_startclock_interval>
    216a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_startclock_interval+0x1>
    216e:	03 2e       	mov	r0, r19
    2170:	00 0c       	add	r0, r0
    2172:	44 0b       	sbc	r20, r20
    2174:	55 0b       	sbc	r21, r21
    2176:	0e 94 c1 2a 	call	0x5582	; 0x5582 <__divmodsi4>
    217a:	70 93 62 05 	sts	0x0562, r23	; 0x800562 <g_fox_seconds_into_interval+0x1>
    217e:	60 93 61 05 	sts	0x0561, r22	; 0x800561 <g_fox_seconds_into_interval>
			g_fox_counter = CLAMP(1, 1 + (g_fox_seconds_into_interval / g_on_air_interval), g_number_of_foxes);
    2182:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <g_fox_seconds_into_interval>
    2186:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <g_fox_seconds_into_interval+0x1>
    218a:	60 91 63 05 	lds	r22, 0x0563	; 0x800563 <g_on_air_interval>
    218e:	70 91 64 05 	lds	r23, 0x0564	; 0x800564 <g_on_air_interval+0x1>
    2192:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_number_of_foxes>
    219e:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_number_of_foxes+0x1>
    21a2:	9a 83       	std	Y+2, r25	; 0x02
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	86 17       	cp	r24, r22
    21ac:	97 07       	cpc	r25, r23
    21ae:	34 f0       	brlt	.+12     	; 0x21bc <_Z11setupForFoxP5Fox_t+0x230>
    21b0:	16 16       	cp	r1, r22
    21b2:	17 06       	cpc	r1, r23
    21b4:	2c f0       	brlt	.+10     	; 0x21c0 <_Z11setupForFoxP5Fox_t+0x234>
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <_Z11setupForFoxP5Fox_t+0x234>
    21bc:	69 81       	ldd	r22, Y+1	; 0x01
    21be:	7a 81       	ldd	r23, Y+2	; 0x02
    21c0:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <g_fox_counter+0x1>
    21c4:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <g_fox_counter>
			g_fox_transition = FALSE;
    21c8:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
			g_time_to_ID = FALSE;
    21cc:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_time_to_ID>
			g_audio_tone_state = OFF;
    21d0:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_audio_tone_state>
			g_fox_tone_offset = g_fox_counter;
    21d4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_fox_counter>
    21d8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_fox_counter+0x1>
    21dc:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_tone_offset+0x1>
    21e0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_tone_offset>
			g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    21e4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_seconds_since_sync>
    21e8:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <g_seconds_since_sync+0x1>
    21ec:	a0 91 9d 05 	lds	r26, 0x059D	; 0x80059d <g_seconds_since_sync+0x2>
    21f0:	b0 91 9e 05 	lds	r27, 0x059E	; 0x80059e <g_seconds_since_sync+0x3>
    21f4:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_startclock_interval>
    21f8:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_startclock_interval+0x1>
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	65 5f       	subi	r22, 0xF5	; 245
    2202:	7f 4f       	sbci	r23, 0xFF	; 255
    2204:	8f 4f       	sbci	r24, 0xFF	; 255
    2206:	9f 4f       	sbci	r25, 0xFF	; 255
    2208:	03 2e       	mov	r0, r19
    220a:	00 0c       	add	r0, r0
    220c:	44 0b       	sbc	r20, r20
    220e:	55 0b       	sbc	r21, r21
    2210:	0e 94 c1 2a 	call	0x5582	; 0x5582 <__divmodsi4>
    2214:	60 93 57 05 	sts	0x0557, r22	; 0x800557 <g_lastSeconds>
    2218:	3b c0       	rjmp	.+118    	; 0x2290 <_Z11setupForFoxP5Fox_t+0x304>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    221a:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_seconds_since_sync>
    221e:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <g_seconds_since_sync+0x1>
    2222:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <g_seconds_since_sync+0x2>
    2226:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    222a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    222e:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_code_throttle+0x1>
    2232:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_code_throttle>
			g_callsign_sent = FALSE;
    2236:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <g_callsign_sent>

			g_fox_counter = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_fox_counter+0x1>
    2242:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_fox_counter>
			g_fox_seconds_into_interval = 0;
    2246:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_fox_seconds_into_interval+0x1>
    224a:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_fox_seconds_into_interval>
			g_fox_transition = FALSE;
    224e:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
			g_time_to_ID = FALSE;
    2252:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_time_to_ID>
			g_audio_tone_state = OFF;
    2256:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_audio_tone_state>
    225a:	1a c0       	rjmp	.+52     	; 0x2290 <_Z11setupForFoxP5Fox_t+0x304>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    225c:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_seconds_since_sync>
    2260:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <g_seconds_since_sync+0x1>
    2264:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <g_seconds_since_sync+0x2>
    2268:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    226c:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    2270:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_code_throttle+0x1>
    2274:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <g_code_throttle>
		g_callsign_sent = FALSE;
    2278:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <g_callsign_sent>
		g_fox_seconds_into_interval = 0;
    227c:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_fox_seconds_into_interval+0x1>
    2280:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_fox_seconds_into_interval>
		g_fox_transition = FALSE;
    2284:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
		g_time_to_ID = FALSE;
    2288:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_time_to_ID>
		g_audio_tone_state = OFF;
    228c:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_audio_tone_state>
	}

	digitalWrite(PIN_LED2, OFF);    /*  LED Off - in case it was on in the middle of a transmission */
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	8d e0       	ldi	r24, 0x0D	; 13
    2294:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
}
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <_Z11setupForFoxP5Fox_t+0x316>
		break;
	}

	ConfigurationState_t state = clockConfigurationCheck();

	if((g_use_rtc_to_start = ((state == SCHEDULED_EVENT_DID_NOT_START) || (state == WAITING_FOR_START))))
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_use_rtc_to_start>
    22a0:	20 cf       	rjmp	.-448    	; 0x20e2 <_Z11setupForFoxP5Fox_t+0x156>
		g_time_to_ID = FALSE;
		g_audio_tone_state = OFF;
	}

	digitalWrite(PIN_LED2, OFF);    /*  LED Off - in case it was on in the middle of a transmission */
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    22ac:	ea e7       	ldi	r30, 0x7A	; 122
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	86 fd       	sbrc	r24, 6
    22b4:	fd cf       	rjmp	.-6      	; 0x22b0 <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    22b6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    22ba:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    22be:	ea e7       	ldi	r30, 0x7A	; 122
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	90 81       	ld	r25, Z
    22c4:	90 64       	ori	r25, 0x40	; 64
    22c6:	90 83       	st	Z, r25
	return( result);
}
    22c8:	c9 01       	movw	r24, r18
    22ca:	08 95       	ret

000022cc <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    22cc:	88 ec       	ldi	r24, 0xC8	; 200
    22ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    22d2:	ea e7       	ldi	r30, 0x7A	; 122
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	87 e0       	ldi	r24, 0x07	; 7
    22d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    22da:	80 81       	ld	r24, Z
    22dc:	80 68       	ori	r24, 0x80	; 128
    22de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    22e0:	80 81       	ld	r24, Z
    22e2:	80 64       	ori	r24, 0x40	; 64
    22e4:	80 83       	st	Z, r24
	readADC();
    22e6:	0e 94 56 11 	call	0x22ac	; 0x22ac <_Z7readADCv>
    22ea:	08 95       	ret

000022ec <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    22f4:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <g_atmega_temp_calibration>
    22f8:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <g_atmega_temp_calibration+0x1>
    22fc:	07 2e       	mov	r0, r23
    22fe:	00 0c       	add	r0, r0
    2300:	88 0b       	sbc	r24, r24
    2302:	99 0b       	sbc	r25, r25
    2304:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__floatsisf>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__divsf3>
    2314:	06 2f       	mov	r16, r22
    2316:	17 2f       	mov	r17, r23
    2318:	d8 2f       	mov	r29, r24
    231a:	c9 2f       	mov	r28, r25
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	48 e4       	ldi	r20, 0x48	; 72
    2322:	53 e4       	ldi	r21, 0x43	; 67
    2324:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    2328:	18 16       	cp	r1, r24
    232a:	6c f0       	brlt	.+26     	; 0x2346 <_Z7getTempv+0x5a>
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	48 e4       	ldi	r20, 0x48	; 72
    2332:	53 ec       	ldi	r21, 0xC3	; 195
    2334:	60 2f       	mov	r22, r16
    2336:	71 2f       	mov	r23, r17
    2338:	8d 2f       	mov	r24, r29
    233a:	9c 2f       	mov	r25, r28
    233c:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__cmpsf2>
    2340:	88 23       	and	r24, r24
    2342:	34 f0       	brlt	.+12     	; 0x2350 <_Z7getTempv+0x64>
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <_Z7getTempv+0x6c>
    2346:	00 e0       	ldi	r16, 0x00	; 0
    2348:	10 e0       	ldi	r17, 0x00	; 0
    234a:	d8 e4       	ldi	r29, 0x48	; 72
    234c:	c3 e4       	ldi	r28, 0x43	; 67
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <_Z7getTempv+0x6c>
    2350:	00 e0       	ldi	r16, 0x00	; 0
    2352:	10 e0       	ldi	r17, 0x00	; 0
    2354:	d8 e4       	ldi	r29, 0x48	; 72
    2356:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    2358:	0e 94 56 11 	call	0x22ac	; 0x22ac <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    235c:	0e 94 56 11 	call	0x22ac	; 0x22ac <_Z7readADCv>
    2360:	bc 01       	movw	r22, r24
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__floatunsisf>
    236a:	2e ea       	ldi	r18, 0xAE	; 174
    236c:	37 e2       	ldi	r19, 0x27	; 39
    236e:	42 ea       	ldi	r20, 0xA2	; 162
    2370:	53 e4       	ldi	r21, 0x43	; 67
    2372:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__subsf3>
    2376:	26 ef       	ldi	r18, 0xF6	; 246
    2378:	38 e2       	ldi	r19, 0x28	; 40
    237a:	4c e9       	ldi	r20, 0x9C	; 156
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__divsf3>
    2382:	20 2f       	mov	r18, r16
    2384:	31 2f       	mov	r19, r17
    2386:	4d 2f       	mov	r20, r29
    2388:	5c 2f       	mov	r21, r28
    238a:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__addsf3>
    238e:	0e 94 df 29 	call	0x53be	; 0x53be <round>
}
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    239c:	ea e7       	ldi	r30, 0x7A	; 122
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    23a2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    23a6:	ac e7       	ldi	r26, 0x7C	; 124
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    23ac:	9c 91       	ld	r25, X
    23ae:	96 60       	ori	r25, 0x06	; 6
    23b0:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    23b2:	9c 91       	ld	r25, X
    23b4:	90 6c       	ori	r25, 0xC0	; 192
    23b6:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    23b8:	9c 91       	ld	r25, X
    23ba:	90 62       	ori	r25, 0x20	; 32
    23bc:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    23be:	90 81       	ld	r25, Z
    23c0:	96 60       	ori	r25, 0x06	; 6
    23c2:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    23c4:	90 81       	ld	r25, Z
    23c6:	90 62       	ori	r25, 0x20	; 32
    23c8:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    23ca:	90 81       	ld	r25, Z
    23cc:	98 60       	ori	r25, 0x08	; 8
    23ce:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    23d0:	90 81       	ld	r25, Z
    23d2:	90 68       	ori	r25, 0x80	; 128
    23d4:	90 83       	st	Z, r25

	if(enableSampling)
    23d6:	88 23       	and	r24, r24
    23d8:	31 f0       	breq	.+12     	; 0x23e6 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    23da:	80 81       	ld	r24, Z
    23dc:	88 60       	ori	r24, 0x08	; 8
    23de:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    23e0:	80 81       	ld	r24, Z
    23e2:	80 64       	ori	r24, 0x40	; 64
    23e4:	80 83       	st	Z, r24
    23e6:	08 95       	ret

000023e8 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    23e8:	fc 01       	movw	r30, r24
	while(*s)
    23ea:	21 91       	ld	r18, Z+
    23ec:	22 23       	and	r18, r18
    23ee:	41 f0       	breq	.+16     	; 0x2400 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	20 53       	subi	r18, 0x30	; 48
    23f4:	31 09       	sbc	r19, r1
    23f6:	2a 30       	cpi	r18, 0x0A	; 10
    23f8:	31 05       	cpc	r19, r1
    23fa:	b8 f3       	brcs	.-18     	; 0x23ea <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	08 95       	ret
		}
	}

	return( TRUE);
    2400:	81 e0       	ldi	r24, 0x01	; 1
}
    2402:	08 95       	ret

00002404 <_Z13startEventNowv>:

void startEventNow(void)
{
#if !INIT_EEPROM_ONLY
		linkbus_disable();
    2404:	0e 94 28 09 	call	0x1250	; 0x1250 <_Z15linkbus_disablev>
		setupForFox(NULL);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
		setupPortsForF1975();
    2410:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z18setupPortsForF1975v>
		g_transmissions_disabled = FALSE;
    2414:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <g_transmissions_disabled>
		g_LED_enunciating = FALSE;
    2418:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <g_LED_enunciating>
		lb_send_string((char*)"Sync OK\n", FALSE);
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	85 e2       	ldi	r24, 0x25	; 37
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    2426:	08 95       	ret

00002428 <_Z12stopEventNowv>:
#endif  /* !INIT_EEPROM_ONLY */
}

void stopEventNow(void)
{
	g_transmissions_disabled = TRUE;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_transmissions_disabled>
	g_use_rtc_to_start = FALSE;             /* Prevent the event from running immediately if within its Start/Stop window */
    242e:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_use_rtc_to_start>
	if(g_sync_pin_stable == STABLE_LOW)
    2432:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_sync_pin_stable>
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	21 f4       	brne	.+8      	; 0x2442 <_Z12stopEventNowv+0x1a>
	{
		digitalWrite(PIN_LED2, OFF);        /*  LED Off */
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	8d e0       	ldi	r24, 0x0D	; 13
    243e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
	}

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	8a e0       	ldi	r24, 0x0A	; 10
    2446:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);       /* Unkey the microphone / de-energize transmitter */
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	88 e0       	ldi	r24, 0x08	; 8
    244e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    2452:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <g_sendAMmodulation>

	linkbus_init(BAUD);
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	71 ee       	ldi	r23, 0xE1	; 225
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 02 09 	call	0x1204	; 0x1204 <_Z12linkbus_initm>
    2462:	08 95       	ret

00002464 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2464:	1f 92       	push	r1
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	0f 92       	push	r0
    246c:	11 24       	eor	r1, r1
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	4f 93       	push	r20
    2474:	5f 93       	push	r21
    2476:	6f 93       	push	r22
    2478:	7f 93       	push	r23
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	af 93       	push	r26
    2480:	bf 93       	push	r27
    2482:	ef 93       	push	r30
    2484:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    2486:	84 e0       	ldi	r24, 0x04	; 4
    2488:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z11digitalReadh>

	if(pinVal)  /* Sync is high = button released */
    248c:	88 23       	and	r24, r24
    248e:	c9 f0       	breq	.+50     	; 0x24c2 <__vector_5+0x5e>
	{
		if(g_transmissions_disabled)
    2490:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    2494:	88 23       	and	r24, r24
    2496:	69 f0       	breq	.+26     	; 0x24b2 <__vector_5+0x4e>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2498:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_sync_pin_stable>
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	89 f4       	brne	.+34     	; 0x24c2 <__vector_5+0x5e>
			{
				startEventNow();
    24a0:	0e 94 02 12 	call	0x2404	; 0x2404 <_Z13startEventNowv>
				g_sync_pin_stable = UNSTABLE;
    24a4:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	8d e0       	ldi	r24, 0x0D	; 13
    24ac:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    24b0:	08 c0       	rjmp	.+16     	; 0x24c2 <__vector_5+0x5e>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    24b2:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_sync_pin_stable>
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	21 f4       	brne	.+8      	; 0x24c2 <__vector_5+0x5e>
			{
				stopEventNow();
    24ba:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z12stopEventNowv>
				g_sync_pin_stable = UNSTABLE;
    24be:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_sync_pin_stable>
			}
		}
	}

	g_sync_pin_timer = 0;
    24c2:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_sync_pin_timer+0x1>
    24c6:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_sync_pin_timer>
}
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f 90       	pop	r0
    24e8:	1f 90       	pop	r1
    24ea:	18 95       	reti

000024ec <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    24ec:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_messages_text+0x15>
    24f0:	81 11       	cpse	r24, r1
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    24f4:	65 e0       	ldi	r22, 0x05	; 5
    24f6:	8f e9       	ldi	r24, 0x9F	; 159
    24f8:	95 e0       	ldi	r25, 0x05	; 5
    24fa:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    24fe:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    2502:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    2506:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    250a:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    250e:	81 15       	cp	r24, r1
    2510:	96 46       	sbci	r25, 0x66	; 102
    2512:	ae 4e       	sbci	r26, 0xEE	; 238
    2514:	bf 45       	sbci	r27, 0x5F	; 95
    2516:	28 f4       	brcc	.+10     	; 0x2522 <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	8f e9       	ldi	r24, 0x9F	; 159
    251c:	95 e0       	ldi	r25, 0x05	; 5
    251e:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    2522:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_finish_epoch>
    2526:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    252a:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    252e:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    2532:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    2536:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    253a:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    253e:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    2542:	48 17       	cp	r20, r24
    2544:	59 07       	cpc	r21, r25
    2546:	6a 07       	cpc	r22, r26
    2548:	7b 07       	cpc	r23, r27
    254a:	00 f5       	brcc	.+64     	; 0x258c <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    254c:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_start_epoch>
    2550:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    2554:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    2558:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    255c:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    2560:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    2564:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    2568:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    256c:	48 17       	cp	r20, r24
    256e:	59 07       	cpc	r21, r25
    2570:	6a 07       	cpc	r22, r26
    2572:	7b 07       	cpc	r23, r27
    2574:	28 f4       	brcc	.+10     	; 0x2580 <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    2576:	63 e0       	ldi	r22, 0x03	; 3
    2578:	8f e9       	ldi	r24, 0x9F	; 159
    257a:	95 e0       	ldi	r25, 0x05	; 5
    257c:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2580:	64 e0       	ldi	r22, 0x04	; 4
    2582:	8f e9       	ldi	r24, 0x9F	; 159
    2584:	95 e0       	ldi	r25, 0x05	; 5
    2586:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    258a:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    258c:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_start_epoch>
    2590:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    2594:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    2598:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    259c:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    25a0:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    25a4:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    25a8:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    25ac:	48 17       	cp	r20, r24
    25ae:	59 07       	cpc	r21, r25
    25b0:	6a 07       	cpc	r22, r26
    25b2:	7b 07       	cpc	r23, r27
    25b4:	28 f4       	brcc	.+10     	; 0x25c0 <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	8e e2       	ldi	r24, 0x2E	; 46
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    25c0:	08 95       	ret

000025c2 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    25c2:	2f 92       	push	r2
    25c4:	3f 92       	push	r3
    25c6:	4f 92       	push	r4
    25c8:	5f 92       	push	r5
    25ca:	6f 92       	push	r6
    25cc:	7f 92       	push	r7
    25ce:	8f 92       	push	r8
    25d0:	9f 92       	push	r9
    25d2:	af 92       	push	r10
    25d4:	bf 92       	push	r11
    25d6:	cf 92       	push	r12
    25d8:	df 92       	push	r13
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	2c 97       	sbiw	r28, 0x0c	; 12
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	2b 01       	movw	r4, r22
    25f8:	3c 01       	movw	r6, r24
    25fa:	49 01       	movw	r8, r18
    25fc:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    25fe:	62 17       	cp	r22, r18
    2600:	73 07       	cpc	r23, r19
    2602:	84 07       	cpc	r24, r20
    2604:	95 07       	cpc	r25, r21
    2606:	50 f0       	brcs	.+20     	; 0x261c <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2608:	e1 14       	cp	r14, r1
    260a:	f1 04       	cpc	r15, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <_Z14reportTimeTillmmPKcS0_+0x4e>
    260e:	04 c1       	rjmp	.+520    	; 0x2818 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	c7 01       	movw	r24, r14
    2614:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	ff c0       	rjmp	.+510    	; 0x281a <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    261c:	01 15       	cp	r16, r1
    261e:	11 05       	cpc	r17, r1
    2620:	21 f0       	breq	.+8      	; 0x262a <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	c8 01       	movw	r24, r16
    2626:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    262a:	75 01       	movw	r14, r10
    262c:	64 01       	movw	r12, r8
    262e:	c4 18       	sub	r12, r4
    2630:	d5 08       	sbc	r13, r5
    2632:	e6 08       	sbc	r14, r6
    2634:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2636:	c7 01       	movw	r24, r14
    2638:	b6 01       	movw	r22, r12
    263a:	20 e8       	ldi	r18, 0x80	; 128
    263c:	33 e3       	ldi	r19, 0x33	; 51
    263e:	41 ee       	ldi	r20, 0xE1	; 225
    2640:	51 e0       	ldi	r21, 0x01	; 1
    2642:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodsi4>
    2646:	29 01       	movw	r4, r18
    2648:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    264a:	44 27       	eor	r20, r20
    264c:	55 27       	eor	r21, r21
    264e:	60 e8       	ldi	r22, 0x80	; 128
    2650:	73 e3       	ldi	r23, 0x33	; 51
    2652:	81 ee       	ldi	r24, 0xE1	; 225
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__mulsi3>
    265a:	c6 1a       	sub	r12, r22
    265c:	d7 0a       	sbc	r13, r23
    265e:	e8 0a       	sbc	r14, r24
    2660:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2662:	c7 01       	movw	r24, r14
    2664:	b6 01       	movw	r22, r12
    2666:	20 e8       	ldi	r18, 0x80	; 128
    2668:	31 e5       	ldi	r19, 0x51	; 81
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodsi4>
    2672:	49 01       	movw	r8, r18
    2674:	5a 01       	movw	r10, r20
    2676:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2678:	44 27       	eor	r20, r20
    267a:	55 27       	eor	r21, r21
    267c:	60 e8       	ldi	r22, 0x80	; 128
    267e:	71 e5       	ldi	r23, 0x51	; 81
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__mulsi3>
    2688:	c6 1a       	sub	r12, r22
    268a:	d7 0a       	sbc	r13, r23
    268c:	e8 0a       	sbc	r14, r24
    268e:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2690:	c7 01       	movw	r24, r14
    2692:	b6 01       	movw	r22, r12
    2694:	20 e1       	ldi	r18, 0x10	; 16
    2696:	3e e0       	ldi	r19, 0x0E	; 14
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodsi4>
    26a0:	29 83       	std	Y+1, r18	; 0x01
    26a2:	3a 83       	std	Y+2, r19	; 0x02
    26a4:	4b 83       	std	Y+3, r20	; 0x03
    26a6:	5c 83       	std	Y+4, r21	; 0x04
    26a8:	29 81       	ldd	r18, Y+1	; 0x01
    26aa:	3a 81       	ldd	r19, Y+2	; 0x02
    26ac:	3a 87       	std	Y+10, r19	; 0x0a
    26ae:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    26b0:	29 81       	ldd	r18, Y+1	; 0x01
    26b2:	3a 81       	ldd	r19, Y+2	; 0x02
    26b4:	4b 81       	ldd	r20, Y+3	; 0x03
    26b6:	5c 81       	ldd	r21, Y+4	; 0x04
    26b8:	44 27       	eor	r20, r20
    26ba:	55 27       	eor	r21, r21
    26bc:	a0 e1       	ldi	r26, 0x10	; 16
    26be:	be e0       	ldi	r27, 0x0E	; 14
    26c0:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__muluhisi3>
    26c4:	c6 1a       	sub	r12, r22
    26c6:	d7 0a       	sbc	r13, r23
    26c8:	e8 0a       	sbc	r14, r24
    26ca:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    26cc:	c7 01       	movw	r24, r14
    26ce:	b6 01       	movw	r22, r12
    26d0:	2c e3       	ldi	r18, 0x3C	; 60
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodsi4>
    26dc:	2d 83       	std	Y+5, r18	; 0x05
    26de:	3e 83       	std	Y+6, r19	; 0x06
    26e0:	4f 83       	std	Y+7, r20	; 0x07
    26e2:	58 87       	std	Y+8, r21	; 0x08
    26e4:	0d 81       	ldd	r16, Y+5	; 0x05
    26e6:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    26e8:	2c e3       	ldi	r18, 0x3C	; 60
    26ea:	20 9f       	mul	r18, r16
    26ec:	c0 01       	movw	r24, r0
    26ee:	21 9f       	mul	r18, r17
    26f0:	90 0d       	add	r25, r0
    26f2:	11 24       	eor	r1, r1
    26f4:	a6 01       	movw	r20, r12
    26f6:	48 1b       	sub	r20, r24
    26f8:	59 0b       	sbc	r21, r25
    26fa:	5c 87       	std	Y+12, r21	; 0x0c
    26fc:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    26fe:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <g_tempStr>

		if(years)
    2702:	41 14       	cp	r4, r1
    2704:	51 04       	cpc	r5, r1
    2706:	b9 f0       	breq	.+46     	; 0x2736 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    2708:	5f 92       	push	r5
    270a:	4f 92       	push	r4
    270c:	80 e4       	ldi	r24, 0x40	; 64
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	9f 93       	push	r25
    2712:	8f 93       	push	r24
    2714:	86 ee       	ldi	r24, 0xE6	; 230
    2716:	94 e0       	ldi	r25, 0x04	; 4
    2718:	9f 93       	push	r25
    271a:	8f 93       	push	r24
    271c:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	86 ee       	ldi	r24, 0xE6	; 230
    2724:	94 e0       	ldi	r25, 0x04	; 4
    2726:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
		}

		if(days)
    2736:	23 28       	or	r2, r3
    2738:	b9 f0       	breq	.+46     	; 0x2768 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    273a:	9f 92       	push	r9
    273c:	8f 92       	push	r8
    273e:	88 e4       	ldi	r24, 0x48	; 72
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	9f 93       	push	r25
    2744:	8f 93       	push	r24
    2746:	86 ee       	ldi	r24, 0xE6	; 230
    2748:	94 e0       	ldi	r25, 0x04	; 4
    274a:	9f 93       	push	r25
    274c:	8f 93       	push	r24
    274e:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2752:	61 e0       	ldi	r22, 0x01	; 1
    2754:	86 ee       	ldi	r24, 0xE6	; 230
    2756:	94 e0       	ldi	r25, 0x04	; 4
    2758:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
		}

		if(hours)
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	89 2b       	or	r24, r25
    276e:	c9 f0       	breq	.+50     	; 0x27a2 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	9f 93       	push	r25
    2774:	e9 81       	ldd	r30, Y+1	; 0x01
    2776:	ef 93       	push	r30
    2778:	81 e5       	ldi	r24, 0x51	; 81
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	9f 93       	push	r25
    277e:	8f 93       	push	r24
    2780:	86 ee       	ldi	r24, 0xE6	; 230
    2782:	94 e0       	ldi	r25, 0x04	; 4
    2784:	9f 93       	push	r25
    2786:	8f 93       	push	r24
    2788:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	86 ee       	ldi	r24, 0xE6	; 230
    2790:	94 e0       	ldi	r25, 0x04	; 4
    2792:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
		}

		if(minutes)
    27a2:	01 2b       	or	r16, r17
    27a4:	c9 f0       	breq	.+50     	; 0x27d8 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    27a6:	fe 81       	ldd	r31, Y+6	; 0x06
    27a8:	ff 93       	push	r31
    27aa:	2d 81       	ldd	r18, Y+5	; 0x05
    27ac:	2f 93       	push	r18
    27ae:	89 e5       	ldi	r24, 0x59	; 89
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	9f 93       	push	r25
    27b4:	8f 93       	push	r24
    27b6:	86 ee       	ldi	r24, 0xE6	; 230
    27b8:	94 e0       	ldi	r25, 0x04	; 4
    27ba:	9f 93       	push	r25
    27bc:	8f 93       	push	r24
    27be:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
			lb_send_string(g_tempStr, TRUE);
    27c2:	61 e0       	ldi	r22, 0x01	; 1
    27c4:	86 ee       	ldi	r24, 0xE6	; 230
    27c6:	94 e0       	ldi	r25, 0x04	; 4
    27c8:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    27d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    27da:	3f 93       	push	r19
    27dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    27de:	4f 93       	push	r20
    27e0:	81 e6       	ldi	r24, 0x61	; 97
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	9f 93       	push	r25
    27e6:	8f 93       	push	r24
    27e8:	86 ee       	ldi	r24, 0xE6	; 230
    27ea:	94 e0       	ldi	r25, 0x04	; 4
    27ec:	9f 93       	push	r25
    27ee:	8f 93       	push	r24
    27f0:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
		lb_send_string(g_tempStr, TRUE);
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	86 ee       	ldi	r24, 0xE6	; 230
    27f8:	94 e0       	ldi	r25, 0x04	; 4
    27fa:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>

		lb_send_NewLine();
    27fe:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2802:	e6 ee       	ldi	r30, 0xE6	; 230
    2804:	f4 e0       	ldi	r31, 0x04	; 4
    2806:	10 82       	st	Z, r1
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	01 c0       	rjmp	.+2      	; 0x281a <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2818:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    281a:	2c 96       	adiw	r28, 0x0c	; 12
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	df 90       	pop	r13
    2834:	cf 90       	pop	r12
    2836:	bf 90       	pop	r11
    2838:	af 90       	pop	r10
    283a:	9f 90       	pop	r9
    283c:	8f 90       	pop	r8
    283e:	7f 90       	pop	r7
    2840:	6f 90       	pop	r6
    2842:	5f 90       	pop	r5
    2844:	4f 90       	pop	r4
    2846:	3f 90       	pop	r3
    2848:	2f 90       	pop	r2
    284a:	08 95       	ret

0000284c <_Z18startEventUsingRTCv>:

	linkbus_init(BAUD);
}

void startEventUsingRTC(void)
{
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
	setupForFox(NULL);
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
	ConfigurationState_t state = clockConfigurationCheck();
    285c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_Z23clockConfigurationCheckv>

	if((state == WAITING_FOR_START) || (state == EVENT_IN_PROGRESS))
    2860:	81 30       	cpi	r24, 0x01	; 1
    2862:	19 f0       	breq	.+6      	; 0x286a <_Z18startEventUsingRTCv+0x1e>
    2864:	84 30       	cpi	r24, 0x04	; 4
    2866:	09 f0       	breq	.+2      	; 0x286a <_Z18startEventUsingRTCv+0x1e>
    2868:	5a c0       	rjmp	.+180    	; 0x291e <_Z18startEventUsingRTCv+0xd2>
	{
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    286a:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <g_event_start_epoch>
    286e:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    2872:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    2876:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    287a:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_current_epoch>
    287e:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_current_epoch+0x1>
    2882:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch+0x2>
    2886:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x3>
    288a:	0f 2e       	mov	r0, r31
    288c:	f8 e6       	ldi	r31, 0x68	; 104
    288e:	ef 2e       	mov	r14, r31
    2890:	f1 e0       	ldi	r31, 0x01	; 1
    2892:	ff 2e       	mov	r15, r31
    2894:	f0 2d       	mov	r31, r0
    2896:	05 e7       	ldi	r16, 0x75	; 117
    2898:	11 e0       	ldi	r17, 0x01	; 1
    289a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    289e:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <g_event_finish_epoch>
    28a2:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    28a6:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    28aa:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    28ae:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_start_epoch>
    28b2:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    28b6:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    28ba:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    28be:	e1 2c       	mov	r14, r1
    28c0:	f1 2c       	mov	r15, r1
    28c2:	01 e8       	ldi	r16, 0x81	; 129
    28c4:	11 e0       	ldi	r17, 0x01	; 1
    28c6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    28ca:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_start_epoch>
    28ce:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    28d2:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    28d6:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    28da:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    28de:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    28e2:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    28e6:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    28ea:	48 17       	cp	r20, r24
    28ec:	59 07       	cpc	r21, r25
    28ee:	6a 07       	cpc	r22, r26
    28f0:	7b 07       	cpc	r23, r27
    28f2:	d0 f4       	brcc	.+52     	; 0x2928 <_Z18startEventUsingRTCv+0xdc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    28f4:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <g_event_finish_epoch>
    28f8:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    28fc:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    2900:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    2904:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_current_epoch>
    2908:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_current_epoch+0x1>
    290c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch+0x2>
    2910:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x3>
    2914:	09 e8       	ldi	r16, 0x89	; 137
    2916:	11 e0       	ldi	r17, 0x01	; 1
    2918:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
    291c:	05 c0       	rjmp	.+10     	; 0x2928 <_Z18startEventUsingRTCv+0xdc>
		}
	}
	else
	{
		g_transmissions_disabled = TRUE;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_transmissions_disabled>
		reportConfigErrors();
    2924:	0e 94 76 12 	call	0x24ec	; 0x24ec <_Z18reportConfigErrorsv>
	}
}
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	08 95       	ret

00002932 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
    2932:	4f 92       	push	r4
    2934:	5f 92       	push	r5
    2936:	6f 92       	push	r6
    2938:	7f 92       	push	r7
    293a:	8f 92       	push	r8
    293c:	9f 92       	push	r9
    293e:	af 92       	push	r10
    2940:	bf 92       	push	r11
    2942:	ef 92       	push	r14
    2944:	ff 92       	push	r15
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	2c 97       	sbiw	r28, 0x0c	; 12
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	8c 01       	movw	r16, r24
    2960:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    2962:	fc 01       	movw	r30, r24
    2964:	01 90       	ld	r0, Z+
    2966:	00 20       	and	r0, r0
    2968:	e9 f7       	brne	.-6      	; 0x2964 <_Z18validateTimeStringPcPma+0x32>
    296a:	31 97       	sbiw	r30, 0x01	; 1
    296c:	e8 1b       	sub	r30, r24
    296e:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    2970:	25 e0       	ldi	r18, 0x05	; 5
    2972:	6d 38       	cpi	r22, 0x8D	; 141
    2974:	72 07       	cpc	r23, r18
    2976:	49 f5       	brne	.+82     	; 0x29ca <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    2978:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    297c:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    2980:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    2984:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    2988:	89 87       	std	Y+9, r24	; 0x09
    298a:	9a 87       	std	Y+10, r25	; 0x0a
    298c:	ab 87       	std	Y+11, r26	; 0x0b
    298e:	bc 87       	std	Y+12, r27	; 0x0c
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	96 e6       	ldi	r25, 0x66	; 102
    2994:	ae ee       	ldi	r26, 0xEE	; 238
    2996:	bf e5       	ldi	r27, 0x5F	; 95
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	ab 83       	std	Y+3, r26	; 0x03
    299e:	bc 83       	std	Y+4, r27	; 0x04
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    29a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    29a8:	81 15       	cp	r24, r1
    29aa:	96 46       	sbci	r25, 0x66	; 102
    29ac:	ae 4e       	sbci	r26, 0xEE	; 238
    29ae:	bf 45       	sbci	r27, 0x5F	; 95
    29b0:	28 f4       	brcc	.+10     	; 0x29bc <_Z18validateTimeStringPcPma+0x8a>
    29b2:	89 80       	ldd	r8, Y+1	; 0x01
    29b4:	9a 80       	ldd	r9, Y+2	; 0x02
    29b6:	ab 80       	ldd	r10, Y+3	; 0x03
    29b8:	bc 80       	ldd	r11, Y+4	; 0x04
    29ba:	04 c0       	rjmp	.+8      	; 0x29c4 <_Z18validateTimeStringPcPma+0x92>
    29bc:	89 84       	ldd	r8, Y+9	; 0x09
    29be:	9a 84       	ldd	r9, Y+10	; 0x0a
    29c0:	ab 84       	ldd	r10, Y+11	; 0x0b
    29c2:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    29c4:	ff 24       	eor	r15, r15
    29c6:	f3 94       	inc	r15
    29c8:	42 c0       	rjmp	.+132    	; 0x2a4e <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    29ca:	69 58       	subi	r22, 0x89	; 137
    29cc:	75 40       	sbci	r23, 0x05	; 5
    29ce:	a9 f5       	brne	.+106    	; 0x2a3a <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    29d0:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    29d4:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    29d8:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    29dc:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	af 83       	std	Y+7, r26	; 0x07
    29e6:	b8 87       	std	Y+8, r27	; 0x08
    29e8:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    29ec:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    29f0:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    29f4:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	ab 83       	std	Y+3, r26	; 0x03
    29fe:	bc 83       	std	Y+4, r27	; 0x04
    2a00:	4d 81       	ldd	r20, Y+5	; 0x05
    2a02:	5e 81       	ldd	r21, Y+6	; 0x06
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a10:	48 17       	cp	r20, r24
    2a12:	59 07       	cpc	r21, r25
    2a14:	6a 07       	cpc	r22, r26
    2a16:	7b 07       	cpc	r23, r27
    2a18:	40 f4       	brcc	.+16     	; 0x2a2a <_Z18validateTimeStringPcPma+0xf8>
    2a1a:	89 80       	ldd	r8, Y+1	; 0x01
    2a1c:	9a 80       	ldd	r9, Y+2	; 0x02
    2a1e:	ab 80       	ldd	r10, Y+3	; 0x03
    2a20:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    2a22:	68 94       	set
    2a24:	ff 24       	eor	r15, r15
    2a26:	f1 f8       	bld	r15, 1
    2a28:	12 c0       	rjmp	.+36     	; 0x2a4e <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2a2a:	8d 80       	ldd	r8, Y+5	; 0x05
    2a2c:	9e 80       	ldd	r9, Y+6	; 0x06
    2a2e:	af 80       	ldd	r10, Y+7	; 0x07
    2a30:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    2a32:	68 94       	set
    2a34:	ff 24       	eor	r15, r15
    2a36:	f1 f8       	bld	r15, 1
    2a38:	0a c0       	rjmp	.+20     	; 0x2a4e <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    2a3a:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    2a3c:	0f 2e       	mov	r0, r31
    2a3e:	81 2c       	mov	r8, r1
    2a40:	f6 e6       	ldi	r31, 0x66	; 102
    2a42:	9f 2e       	mov	r9, r31
    2a44:	fe ee       	ldi	r31, 0xEE	; 238
    2a46:	af 2e       	mov	r10, r31
    2a48:	ff e5       	ldi	r31, 0x5F	; 95
    2a4a:	bf 2e       	mov	r11, r31
    2a4c:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    2a4e:	ec 30       	cpi	r30, 0x0C	; 12
    2a50:	f1 05       	cpc	r31, r1
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <_Z18validateTimeStringPcPma+0x124>
    2a54:	5e c0       	rjmp	.+188    	; 0x2b12 <_Z18validateTimeStringPcPma+0x1e0>
    2a56:	c8 01       	movw	r24, r16
    2a58:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11only_digitsPc>
    2a5c:	88 23       	and	r24, r24
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <_Z18validateTimeStringPcPma+0x130>
    2a60:	4f c0       	rjmp	.+158    	; 0x2b00 <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    2a62:	b8 01       	movw	r22, r16
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_Z16rv3028_get_epochPbPc>
    2a6c:	2b 01       	movw	r4, r22
    2a6e:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    2a70:	ae 2d       	mov	r26, r14
    2a72:	ee 0c       	add	r14, r14
    2a74:	bb 0b       	sbc	r27, r27
    2a76:	20 e1       	ldi	r18, 0x10	; 16
    2a78:	3e e0       	ldi	r19, 0x0E	; 14
    2a7a:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <__usmulhisi3>
    2a7e:	64 0d       	add	r22, r4
    2a80:	75 1d       	adc	r23, r5
    2a82:	86 1d       	adc	r24, r6
    2a84:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    2a86:	86 16       	cp	r8, r22
    2a88:	97 06       	cpc	r9, r23
    2a8a:	a8 06       	cpc	r10, r24
    2a8c:	b9 06       	cpc	r11, r25
    2a8e:	08 f4       	brcc	.+2      	; 0x2a92 <_Z18validateTimeStringPcPma+0x160>
    2a90:	45 c0       	rjmp	.+138    	; 0x2b1c <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    2a92:	21 e0       	ldi	r18, 0x01	; 1
    2a94:	f2 12       	cpse	r15, r18
    2a96:	09 c0       	rjmp	.+18     	; 0x2aaa <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    2a98:	68 e0       	ldi	r22, 0x08	; 8
    2a9a:	8f e9       	ldi	r24, 0x9F	; 159
    2a9c:	95 e0       	ldi	r25, 0x05	; 5
    2a9e:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	39 c0       	rjmp	.+114    	; 0x2b1c <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    2aaa:	22 e0       	ldi	r18, 0x02	; 2
    2aac:	f2 12       	cpse	r15, r18
    2aae:	1f c0       	rjmp	.+62     	; 0x2aee <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    2ab0:	00 91 91 05 	lds	r16, 0x0591	; 0x800591 <g_current_epoch>
    2ab4:	10 91 92 05 	lds	r17, 0x0592	; 0x800592 <g_current_epoch+0x1>
    2ab8:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <g_current_epoch+0x2>
    2abc:	30 91 94 05 	lds	r19, 0x0594	; 0x800594 <g_current_epoch+0x3>
    2ac0:	60 17       	cp	r22, r16
    2ac2:	71 07       	cpc	r23, r17
    2ac4:	82 07       	cpc	r24, r18
    2ac6:	93 07       	cpc	r25, r19
    2ac8:	48 f4       	brcc	.+18     	; 0x2adc <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    2aca:	67 e0       	ldi	r22, 0x07	; 7
    2acc:	8f e9       	ldi	r24, 0x9F	; 159
    2ace:	95 e0       	ldi	r25, 0x05	; 5
    2ad0:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	cb 01       	movw	r24, r22
    2ada:	20 c0       	rjmp	.+64     	; 0x2b1c <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    2adc:	66 e0       	ldi	r22, 0x06	; 6
    2ade:	8f e9       	ldi	r24, 0x9F	; 159
    2ae0:	95 e0       	ldi	r25, 0x05	; 5
    2ae2:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	cb 01       	movw	r24, r22
    2aec:	17 c0       	rjmp	.+46     	; 0x2b1c <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    2aee:	6a e0       	ldi	r22, 0x0A	; 10
    2af0:	8f e9       	ldi	r24, 0x9F	; 159
    2af2:	95 e0       	ldi	r25, 0x05	; 5
    2af4:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	cb 01       	movw	r24, r22
    2afe:	0e c0       	rjmp	.+28     	; 0x2b1c <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    2b00:	69 e0       	ldi	r22, 0x09	; 9
    2b02:	8f e9       	ldi	r24, 0x9F	; 159
    2b04:	95 e0       	ldi	r25, 0x05	; 5
    2b06:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	cb 01       	movw	r24, r22
    2b10:	05 c0       	rjmp	.+10     	; 0x2b1c <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    2b12:	ef 2b       	or	r30, r31
    2b14:	a9 f7       	brne	.-22     	; 0x2b00 <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    2b1c:	2c 96       	adiw	r28, 0x0c	; 12
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	bf 90       	pop	r11
    2b36:	af 90       	pop	r10
    2b38:	9f 90       	pop	r9
    2b3a:	8f 90       	pop	r8
    2b3c:	7f 90       	pop	r7
    2b3e:	6f 90       	pop	r6
    2b40:	5f 90       	pop	r5
    2b42:	4f 90       	pop	r4
    2b44:	08 95       	ret

00002b46 <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	switch(value)
    2b46:	84 30       	cpi	r24, 0x04	; 4
    2b48:	c9 f0       	breq	.+50     	; 0x2b7c <_Z18setAMToneFrequencyh+0x36>
    2b4a:	28 f4       	brcc	.+10     	; 0x2b56 <_Z18setAMToneFrequencyh+0x10>
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	41 f0       	breq	.+16     	; 0x2b60 <_Z18setAMToneFrequencyh+0x1a>
    2b50:	83 30       	cpi	r24, 0x03	; 3
    2b52:	69 f0       	breq	.+26     	; 0x2b6e <_Z18setAMToneFrequencyh+0x28>
    2b54:	28 c0       	rjmp	.+80     	; 0x2ba6 <_Z18setAMToneFrequencyh+0x60>
    2b56:	85 30       	cpi	r24, 0x05	; 5
    2b58:	c1 f0       	breq	.+48     	; 0x2b8a <_Z18setAMToneFrequencyh+0x44>
    2b5a:	86 30       	cpi	r24, 0x06	; 6
    2b5c:	e9 f0       	breq	.+58     	; 0x2b98 <_Z18setAMToneFrequencyh+0x52>
    2b5e:	23 c0       	rjmp	.+70     	; 0x2ba6 <_Z18setAMToneFrequencyh+0x60>
	{
		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    2b60:	8c e2       	ldi	r24, 0x2C	; 44
    2b62:	92 e0       	ldi	r25, 0x02	; 2
    2b64:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2b68:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2b6c:	08 95       	ret

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    2b6e:	81 e7       	ldi	r24, 0x71	; 113
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2b76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2b7a:	08 95       	ret

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    2b7c:	8a ec       	ldi	r24, 0xCA	; 202
    2b7e:	92 e0       	ldi	r25, 0x02	; 2
    2b80:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2b84:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2b88:	08 95       	ret

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    2b8a:	81 e4       	ldi	r24, 0x41	; 65
    2b8c:	93 e0       	ldi	r25, 0x03	; 3
    2b8e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2b92:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2b96:	08 95       	ret

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    2b98:	88 ee       	ldi	r24, 0xE8	; 232
    2b9a:	93 e0       	ldi	r25, 0x03	; 3
    2b9c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2ba0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2ba4:	08 95       	ret

		default:
		{
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
    2ba6:	84 ef       	ldi	r24, 0xF4	; 244
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2bae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2bb2:	08 95       	ret

00002bb4 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2bb4:	2f 92       	push	r2
    2bb6:	3f 92       	push	r3
    2bb8:	4f 92       	push	r4
    2bba:	5f 92       	push	r5
    2bbc:	6f 92       	push	r6
    2bbe:	7f 92       	push	r7
    2bc0:	8f 92       	push	r8
    2bc2:	9f 92       	push	r9
    2bc4:	af 92       	push	r10
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	2c 97       	sbiw	r28, 0x0c	; 12
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    2be8:	0f 2e       	mov	r0, r31
    2bea:	fa e4       	ldi	r31, 0x4A	; 74
    2bec:	8f 2e       	mov	r8, r31
    2bee:	f5 e0       	ldi	r31, 0x05	; 5
    2bf0:	9f 2e       	mov	r9, r31
    2bf2:	f0 2d       	mov	r31, r0
    2bf4:	0f 2e       	mov	r0, r31
    2bf6:	fc eb       	ldi	r31, 0xBC	; 188
    2bf8:	6f 2e       	mov	r6, r31
    2bfa:	f1 e0       	ldi	r31, 0x01	; 1
    2bfc:	7f 2e       	mov	r7, r31
    2bfe:	f0 2d       	mov	r31, r0
    2c00:	0f 2e       	mov	r0, r31
    2c02:	f6 ee       	ldi	r31, 0xE6	; 230
    2c04:	af 2e       	mov	r10, r31
    2c06:	f4 e0       	ldi	r31, 0x04	; 4
    2c08:	bf 2e       	mov	r11, r31
    2c0a:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2c0c:	0f 2e       	mov	r0, r31
    2c0e:	f0 eb       	ldi	r31, 0xB0	; 176
    2c10:	4f 2e       	mov	r4, r31
    2c12:	f1 e0       	ldi	r31, 0x01	; 1
    2c14:	5f 2e       	mov	r5, r31
    2c16:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, FALSE);
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    2c18:	0f 2e       	mov	r0, r31
    2c1a:	f6 e0       	ldi	r31, 0x06	; 6
    2c1c:	2f 2e       	mov	r2, r31
    2c1e:	f2 e0       	ldi	r31, 0x02	; 2
    2c20:	3f 2e       	mov	r3, r31
    2c22:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2c24:	0e 94 b5 08 	call	0x116a	; 0x116a <_Z16nextFullRxBufferv>
    2c28:	6c 01       	movw	r12, r24
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <_Z17handleLinkBusMsgsv+0x7c>
    2c2e:	eb c4       	rjmp	.+2518   	; 0x3606 <_Z17handleLinkBusMsgsv+0xa52>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2c30:	dc 01       	movw	r26, r24
    2c32:	11 96       	adiw	r26, 0x01	; 1
    2c34:	8d 91       	ld	r24, X+
    2c36:	9c 91       	ld	r25, X
    2c38:	12 97       	sbiw	r26, 0x02	; 2
    2c3a:	8a 3e       	cpi	r24, 0xEA	; 234
    2c3c:	b2 e2       	ldi	r27, 0x22	; 34
    2c3e:	9b 07       	cpc	r25, r27
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <_Z17handleLinkBusMsgsv+0x90>
    2c42:	f7 c1       	rjmp	.+1006   	; 0x3032 <_Z17handleLinkBusMsgsv+0x47e>
    2c44:	a0 f4       	brcc	.+40     	; 0x2c6e <_Z17handleLinkBusMsgsv+0xba>
    2c46:	8e 31       	cpi	r24, 0x1E	; 30
    2c48:	f3 e0       	ldi	r31, 0x03	; 3
    2c4a:	9f 07       	cpc	r25, r31
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <_Z17handleLinkBusMsgsv+0x9c>
    2c4e:	22 c1       	rjmp	.+580    	; 0x2e94 <_Z17handleLinkBusMsgsv+0x2e0>
    2c50:	28 f4       	brcc	.+10     	; 0x2c5c <_Z17handleLinkBusMsgsv+0xa8>
    2c52:	87 3d       	cpi	r24, 0xD7	; 215
    2c54:	92 40       	sbci	r25, 0x02	; 2
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <_Z17handleLinkBusMsgsv+0xa6>
    2c58:	d0 c0       	rjmp	.+416    	; 0x2dfa <_Z17handleLinkBusMsgsv+0x246>
    2c5a:	ad c4       	rjmp	.+2394   	; 0x35b6 <_Z17handleLinkBusMsgsv+0xa02>
    2c5c:	8f 36       	cpi	r24, 0x6F	; 111
    2c5e:	ad e1       	ldi	r26, 0x1D	; 29
    2c60:	9a 07       	cpc	r25, r26
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <_Z17handleLinkBusMsgsv+0xb2>
    2c64:	17 c2       	rjmp	.+1070   	; 0x3094 <_Z17handleLinkBusMsgsv+0x4e0>
    2c66:	86 3c       	cpi	r24, 0xC6	; 198
    2c68:	9e 41       	sbci	r25, 0x1E	; 30
    2c6a:	b1 f0       	breq	.+44     	; 0x2c98 <_Z17handleLinkBusMsgsv+0xe4>
    2c6c:	a4 c4       	rjmp	.+2376   	; 0x35b6 <_Z17handleLinkBusMsgsv+0xa02>
    2c6e:	80 3d       	cpi	r24, 0xD0	; 208
    2c70:	e3 e2       	ldi	r30, 0x23	; 35
    2c72:	9e 07       	cpc	r25, r30
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <_Z17handleLinkBusMsgsv+0xc4>
    2c76:	7e c1       	rjmp	.+764    	; 0x2f74 <_Z17handleLinkBusMsgsv+0x3c0>
    2c78:	28 f4       	brcc	.+10     	; 0x2c84 <_Z17handleLinkBusMsgsv+0xd0>
    2c7a:	8f 3c       	cpi	r24, 0xCF	; 207
    2c7c:	93 42       	sbci	r25, 0x23	; 35
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <_Z17handleLinkBusMsgsv+0xce>
    2c80:	4d c4       	rjmp	.+2202   	; 0x351c <_Z17handleLinkBusMsgsv+0x968>
    2c82:	99 c4       	rjmp	.+2354   	; 0x35b6 <_Z17handleLinkBusMsgsv+0xa02>
    2c84:	84 33       	cpi	r24, 0x34	; 52
    2c86:	44 e2       	ldi	r20, 0x24	; 36
    2c88:	94 07       	cpc	r25, r20
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <_Z17handleLinkBusMsgsv+0xda>
    2c8c:	ed c0       	rjmp	.+474    	; 0x2e68 <_Z17handleLinkBusMsgsv+0x2b4>
    2c8e:	8c 39       	cpi	r24, 0x9C	; 156
    2c90:	94 42       	sbci	r25, 0x24	; 36
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <_Z17handleLinkBusMsgsv+0xe2>
    2c94:	c8 c1       	rjmp	.+912    	; 0x3026 <_Z17handleLinkBusMsgsv+0x472>
    2c96:	8f c4       	rjmp	.+2334   	; 0x35b6 <_Z17handleLinkBusMsgsv+0xa02>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2c98:	f6 01       	movw	r30, r12
    2c9a:	83 81       	ldd	r24, Z+3	; 0x03
    2c9c:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <_Z17handleLinkBusMsgsv+0xf0>
    2ca2:	94 c0       	rjmp	.+296    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
				{
					if(c == 'B')
    2ca4:	82 34       	cpi	r24, 0x42	; 66
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <_Z17handleLinkBusMsgsv+0xf8>
    2caa:	8f c4       	rjmp	.+2334   	; 0x35ca <_Z17handleLinkBusMsgsv+0xa16>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2cac:	84 34       	cpi	r24, 0x44	; 68
    2cae:	91 05       	cpc	r25, r1
    2cb0:	39 f4       	brne	.+14     	; 0x2cc0 <_Z17handleLinkBusMsgsv+0x10c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2cb2:	87 89       	ldd	r24, Z+23	; 0x17
    2cb4:	83 35       	cpi	r24, 0x53	; 83
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <_Z17handleLinkBusMsgsv+0x106>
    2cb8:	8b c4       	rjmp	.+2326   	; 0x35d0 <_Z17handleLinkBusMsgsv+0xa1c>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2cba:	86 e0       	ldi	r24, 0x06	; 6
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	74 c0       	rjmp	.+232    	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
						}
					}
					else if(c == 'F')
    2cc0:	86 34       	cpi	r24, 0x46	; 70
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <_Z17handleLinkBusMsgsv+0x114>
    2cc6:	87 c4       	rjmp	.+2318   	; 0x35d6 <_Z17handleLinkBusMsgsv+0xa22>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2cc8:	83 34       	cpi	r24, 0x43	; 67
    2cca:	91 05       	cpc	r25, r1
    2ccc:	c1 f4       	brne	.+48     	; 0x2cfe <_Z17handleLinkBusMsgsv+0x14a>
					{
						char t = lb_buff->fields[FIELD2][0];
    2cce:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2cd0:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2cd2:	82 34       	cpi	r24, 0x42	; 66
    2cd4:	29 f0       	breq	.+10     	; 0x2ce0 <_Z17handleLinkBusMsgsv+0x12c>
						{
							t = '0';
						}

						if(isdigit(t))
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	c0 97       	sbiw	r24, 0x30	; 48
    2cda:	0a 97       	sbiw	r24, 0x0a	; 10
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <_Z17handleLinkBusMsgsv+0x12c>
    2cde:	76 c0       	rjmp	.+236    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    2ce0:	c6 01       	movw	r24, r12
    2ce2:	47 96       	adiw	r24, 0x17	; 23
    2ce4:	0e 94 30 2c 	call	0x5860	; 0x5860 <atoi>
    2ce8:	99 23       	and	r25, r25
    2cea:	14 f4       	brge	.+4      	; 0x2cf0 <_Z17handleLinkBusMsgsv+0x13c>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	86 30       	cpi	r24, 0x06	; 6
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	0c f4       	brge	.+2      	; 0x2cf8 <_Z17handleLinkBusMsgsv+0x144>
    2cf6:	55 c0       	rjmp	.+170    	; 0x2da2 <_Z17handleLinkBusMsgsv+0x1ee>
    2cf8:	85 e0       	ldi	r24, 0x05	; 5
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	52 c0       	rjmp	.+164    	; 0x2da2 <_Z17handleLinkBusMsgsv+0x1ee>
						}
					}
					else if(c == 'S')
    2cfe:	83 35       	cpi	r24, 0x53	; 83
    2d00:	91 05       	cpc	r25, r1
    2d02:	f1 f5       	brne	.+124    	; 0x2d80 <_Z17handleLinkBusMsgsv+0x1cc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2d04:	f6 01       	movw	r30, r12
    2d06:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2d08:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2d0a:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2d0c:	82 34       	cpi	r24, 0x42	; 66
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <_Z17handleLinkBusMsgsv+0x15e>
    2d10:	5d c0       	rjmp	.+186    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2d12:	86 34       	cpi	r24, 0x46	; 70
    2d14:	49 f4       	brne	.+18     	; 0x2d28 <_Z17handleLinkBusMsgsv+0x174>
						{
							if((u > '0') && (u < '6'))
    2d16:	8f ec       	ldi	r24, 0xCF	; 207
    2d18:	89 0f       	add	r24, r25
    2d1a:	85 30       	cpi	r24, 0x05	; 5
    2d1c:	08 f0       	brcs	.+2      	; 0x2d20 <_Z17handleLinkBusMsgsv+0x16c>
    2d1e:	56 c0       	rjmp	.+172    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
							{
								x = SPRINT_F1 + (u - '1');
    2d20:	89 2f       	mov	r24, r25
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	83 97       	sbiw	r24, 0x23	; 35
    2d26:	1c c0       	rjmp	.+56     	; 0x2d60 <_Z17handleLinkBusMsgsv+0x1ac>
							}
						}
						else if(t == 'S')
    2d28:	83 35       	cpi	r24, 0x53	; 83
    2d2a:	41 f4       	brne	.+16     	; 0x2d3c <_Z17handleLinkBusMsgsv+0x188>
						{
							if((u > '0') && (u < '6'))
    2d2c:	8f ec       	ldi	r24, 0xCF	; 207
    2d2e:	89 0f       	add	r24, r25
    2d30:	85 30       	cpi	r24, 0x05	; 5
    2d32:	c8 f4       	brcc	.+50     	; 0x2d66 <_Z17handleLinkBusMsgsv+0x1b2>
							{
								x = SPRINT_S1 + (u - '1');
    2d34:	89 2f       	mov	r24, r25
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	88 97       	sbiw	r24, 0x28	; 40
    2d3a:	12 c0       	rjmp	.+36     	; 0x2d60 <_Z17handleLinkBusMsgsv+0x1ac>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2d3c:	96 34       	cpi	r25, 0x46	; 70
    2d3e:	41 f4       	brne	.+16     	; 0x2d50 <_Z17handleLinkBusMsgsv+0x19c>
						{
							if((t > '0') && (t < '6'))
    2d40:	9f ec       	ldi	r25, 0xCF	; 207
    2d42:	98 0f       	add	r25, r24
    2d44:	95 30       	cpi	r25, 0x05	; 5
    2d46:	08 f0       	brcs	.+2      	; 0x2d4a <_Z17handleLinkBusMsgsv+0x196>
    2d48:	41 c0       	rjmp	.+130    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
							{
								x = SPRINT_F1 + (t - '1');
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	83 97       	sbiw	r24, 0x23	; 35
    2d4e:	08 c0       	rjmp	.+16     	; 0x2d60 <_Z17handleLinkBusMsgsv+0x1ac>
							}
						}
						else if(u == 'S')
    2d50:	93 35       	cpi	r25, 0x53	; 83
    2d52:	e1 f5       	brne	.+120    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
						{
							if((t > '0') && (t < '6'))
    2d54:	9f ec       	ldi	r25, 0xCF	; 207
    2d56:	98 0f       	add	r25, r24
    2d58:	95 30       	cpi	r25, 0x05	; 5
    2d5a:	c0 f5       	brcc	.+112    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
							{
								x = SPRINT_S1 + (t - '1');
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	19 f4       	brne	.+6      	; 0x2d6a <_Z17handleLinkBusMsgsv+0x1b6>
    2d64:	33 c0       	rjmp	.+102    	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2d66:	88 e0       	ldi	r24, 0x08	; 8
    2d68:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    2d6a:	88 30       	cpi	r24, 0x08	; 8
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	14 f4       	brge	.+4      	; 0x2d74 <_Z17handleLinkBusMsgsv+0x1c0>
    2d70:	88 e0       	ldi	r24, 0x08	; 8
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	83 31       	cpi	r24, 0x13	; 19
    2d76:	91 05       	cpc	r25, r1
    2d78:	a4 f0       	brlt	.+40     	; 0x2da2 <_Z17handleLinkBusMsgsv+0x1ee>
    2d7a:	82 e1       	ldi	r24, 0x12	; 18
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	11 c0       	rjmp	.+34     	; 0x2da2 <_Z17handleLinkBusMsgsv+0x1ee>
						}
					}
					else if(c == 'N')
    2d80:	8e 34       	cpi	r24, 0x4E	; 78
    2d82:	91 05       	cpc	r25, r1
    2d84:	51 f4       	brne	.+20     	; 0x2d9a <_Z17handleLinkBusMsgsv+0x1e6>
					{
						char t = lb_buff->fields[FIELD2][0];
    2d86:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2d88:	82 33       	cpi	r24, 0x32	; 50
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <_Z17handleLinkBusMsgsv+0x1da>
    2d8c:	27 c4       	rjmp	.+2126   	; 0x35dc <_Z17handleLinkBusMsgsv+0xa28>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2d8e:	85 33       	cpi	r24, 0x35	; 53
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <_Z17handleLinkBusMsgsv+0x1e0>
    2d92:	26 c4       	rjmp	.+2124   	; 0x35e0 <_Z17handleLinkBusMsgsv+0xa2c>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2d9a:	c6 01       	movw	r24, r12
    2d9c:	03 96       	adiw	r24, 0x03	; 3
    2d9e:	0e 94 30 2c 	call	0x5860	; 0x5860 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2da2:	86 31       	cpi	r24, 0x16	; 22
    2da4:	91 05       	cpc	r25, r1
    2da6:	90 f4       	brcc	.+36     	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
					{
						Fox_t holdFox = (Fox_t)c;
    2da8:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    2daa:	ae 01       	movw	r20, r28
    2dac:	4f 5f       	subi	r20, 0xFF	; 255
    2dae:	5f 4f       	sbci	r21, 0xFF	; 255
    2db0:	60 e1       	ldi	r22, 0x10	; 16
    2db2:	8f e9       	ldi	r24, 0x9F	; 159
    2db4:	95 e0       	ldi	r25, 0x05	; 5
    2db6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    2dba:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    2dbe:	99 81       	ldd	r25, Y+1	; 0x01
    2dc0:	98 17       	cp	r25, r24
    2dc2:	21 f0       	breq	.+8      	; 0x2dcc <_Z17handleLinkBusMsgsv+0x218>
						{
							setupForFox(&holdFox);
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    2dcc:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    2dd0:	1f 92       	push	r1
    2dd2:	8f 93       	push	r24
    2dd4:	8a e9       	ldi	r24, 0x9A	; 154
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	9f 93       	push	r25
    2dda:	8f 93       	push	r24
    2ddc:	bf 92       	push	r11
    2dde:	af 92       	push	r10
    2de0:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2de4:	60 e0       	ldi	r22, 0x00	; 0
    2de6:	c5 01       	movw	r24, r10
    2de8:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
			}
			break;
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	e2 c3       	rjmp	.+1988   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    2dfa:	f6 01       	movw	r30, r12
    2dfc:	83 81       	ldd	r24, Z+3	; 0x03
    2dfe:	88 23       	and	r24, r24
    2e00:	e1 f0       	breq	.+56     	; 0x2e3a <_Z17handleLinkBusMsgsv+0x286>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    2e02:	c6 01       	movw	r24, r12
    2e04:	03 96       	adiw	r24, 0x03	; 3
    2e06:	0e 94 4e 2c 	call	0x589c	; 0x589c <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	16 16       	cp	r1, r22
    2e0e:	17 06       	cpc	r1, r23
    2e10:	14 f0       	brlt	.+4      	; 0x2e16 <_Z17handleLinkBusMsgsv+0x262>
    2e12:	61 e0       	ldi	r22, 0x01	; 1
    2e14:	70 e0       	ldi	r23, 0x00	; 0
    2e16:	67 30       	cpi	r22, 0x07	; 7
    2e18:	71 05       	cpc	r23, r1
    2e1a:	14 f0       	brlt	.+4      	; 0x2e20 <_Z17handleLinkBusMsgsv+0x26c>
    2e1c:	66 e0       	ldi	r22, 0x06	; 6
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    2e24:	46 e8       	ldi	r20, 0x86	; 134
    2e26:	55 e0       	ldi	r21, 0x05	; 5
    2e28:	61 e1       	ldi	r22, 0x11	; 17
    2e2a:	8f e9       	ldi	r24, 0x9F	; 159
    2e2c:	95 e0       	ldi	r25, 0x05	; 5
    2e2e:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    2e32:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_AM_audio_frequency>
    2e36:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    2e3a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_AM_audio_frequency>
    2e3e:	1f 92       	push	r1
    2e40:	8f 93       	push	r24
    2e42:	82 ea       	ldi	r24, 0xA2	; 162
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	9f 93       	push	r25
    2e48:	8f 93       	push	r24
    2e4a:	bf 92       	push	r11
    2e4c:	af 92       	push	r10
    2e4e:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	c5 01       	movw	r24, r10
    2e56:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
			}
			break;
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	ab c3       	rjmp	.+1878   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    2e68:	d6 01       	movw	r26, r12
    2e6a:	13 96       	adiw	r26, 0x03	; 3
    2e6c:	8c 91       	ld	r24, X
    2e6e:	88 23       	and	r24, r24
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <_Z17handleLinkBusMsgsv+0x2c0>
    2e72:	a5 c3       	rjmp	.+1866   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    2e74:	80 33       	cpi	r24, 0x30	; 48
    2e76:	19 f4       	brne	.+6      	; 0x2e7e <_Z17handleLinkBusMsgsv+0x2ca>
					{
						stopEventNow();
    2e78:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z12stopEventNowv>
    2e7c:	a0 c3       	rjmp	.+1856   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    2e7e:	81 33       	cpi	r24, 0x31	; 49
    2e80:	19 f4       	brne	.+6      	; 0x2e88 <_Z17handleLinkBusMsgsv+0x2d4>
					{
						startEventNow();
    2e82:	0e 94 02 12 	call	0x2404	; 0x2404 <_Z13startEventNowv>
    2e86:	9b c3       	rjmp	.+1846   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    2e88:	82 33       	cpi	r24, 0x32	; 50
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <_Z17handleLinkBusMsgsv+0x2da>
    2e8c:	98 c3       	rjmp	.+1840   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
					{
						startEventUsingRTC();
    2e8e:	0e 94 26 14 	call	0x284c	; 0x284c <_Z18startEventUsingRTCv>
    2e92:	95 c3       	rjmp	.+1834   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    2e94:	f6 01       	movw	r30, r12
    2e96:	83 81       	ldd	r24, Z+3	; 0x03
    2e98:	88 23       	and	r24, r24
    2e9a:	99 f1       	breq	.+102    	; 0x2f02 <_Z17handleLinkBusMsgsv+0x34e>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    2e9c:	e0 e2       	ldi	r30, 0x20	; 32
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	d5 01       	movw	r26, r10
    2ea2:	ed 93       	st	X+, r30
    2ea4:	fc 93       	st	X, r31
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    2ea6:	b6 01       	movw	r22, r12
    2ea8:	6d 5f       	subi	r22, 0xFD	; 253
    2eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2eac:	c5 01       	movw	r24, r10
    2eae:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <strcat>

					if(lb_buff->fields[FIELD2][0])
    2eb2:	d6 01       	movw	r26, r12
    2eb4:	57 96       	adiw	r26, 0x17	; 23
    2eb6:	8c 91       	ld	r24, X
    2eb8:	88 23       	and	r24, r24
    2eba:	79 f0       	breq	.+30     	; 0x2eda <_Z17handleLinkBusMsgsv+0x326>
					{
						strcat(g_tempStr, " ");
    2ebc:	f5 01       	movw	r30, r10
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	00 20       	and	r0, r0
    2ec2:	e9 f7       	brne	.-6      	; 0x2ebe <_Z17handleLinkBusMsgsv+0x30a>
    2ec4:	31 97       	sbiw	r30, 0x01	; 1
    2ec6:	80 e2       	ldi	r24, 0x20	; 32
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    2ece:	b6 01       	movw	r22, r12
    2ed0:	69 5e       	subi	r22, 0xE9	; 233
    2ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed4:	c5 01       	movw	r24, r10
    2ed6:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    2eda:	f5 01       	movw	r30, r10
    2edc:	01 90       	ld	r0, Z+
    2ede:	00 20       	and	r0, r0
    2ee0:	e9 f7       	brne	.-6      	; 0x2edc <_Z17handleLinkBusMsgsv+0x328>
    2ee2:	31 97       	sbiw	r30, 0x01	; 1
    2ee4:	e6 5e       	subi	r30, 0xE6	; 230
    2ee6:	f4 40       	sbci	r31, 0x04	; 4
    2ee8:	75 97       	sbiw	r30, 0x15	; 21
    2eea:	58 f4       	brcc	.+22     	; 0x2f02 <_Z17handleLinkBusMsgsv+0x34e>
					{
						strcpy(g_messages_text[STATION_ID], g_tempStr);
    2eec:	b5 01       	movw	r22, r10
    2eee:	82 e3       	ldi	r24, 0x32	; 50
    2ef0:	95 e0       	ldi	r25, 0x05	; 5
    2ef2:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    2ef6:	a5 01       	movw	r20, r10
    2ef8:	6b e0       	ldi	r22, 0x0B	; 11
    2efa:	8f e9       	ldi	r24, 0x9F	; 159
    2efc:	95 e0       	ldi	r25, 0x05	; 5
    2efe:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    2f02:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_messages_text+0x15>
    2f06:	88 23       	and	r24, r24
    2f08:	f1 f0       	breq	.+60     	; 0x2f46 <_Z17handleLinkBusMsgsv+0x392>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    2f0a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	82 e3       	ldi	r24, 0x32	; 50
    2f12:	95 e0       	ldi	r25, 0x05	; 5
    2f14:	0e 94 38 25 	call	0x4a70	; 0x4a70 <_Z26timeRequiredToSendStrAtWPMPcj>
    2f18:	8c 50       	subi	r24, 0x0C	; 12
    2f1a:	9e 4f       	sbci	r25, 0xFE	; 254
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	36 95       	lsr	r19
    2f20:	27 95       	ror	r18
    2f22:	36 95       	lsr	r19
    2f24:	27 95       	ror	r18
    2f26:	36 95       	lsr	r19
    2f28:	27 95       	ror	r18
    2f2a:	a5 ec       	ldi	r26, 0xC5	; 197
    2f2c:	b0 e2       	ldi	r27, 0x20	; 32
    2f2e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>
    2f32:	92 95       	swap	r25
    2f34:	82 95       	swap	r24
    2f36:	8f 70       	andi	r24, 0x0F	; 15
    2f38:	89 27       	eor	r24, r25
    2f3a:	9f 70       	andi	r25, 0x0F	; 15
    2f3c:	89 27       	eor	r24, r25
    2f3e:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <g_time_needed_for_ID+0x1>
    2f42:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    2f46:	82 e3       	ldi	r24, 0x32	; 50
    2f48:	95 e0       	ldi	r25, 0x05	; 5
    2f4a:	9f 93       	push	r25
    2f4c:	8f 93       	push	r24
    2f4e:	a9 ea       	ldi	r26, 0xA9	; 169
    2f50:	b1 e0       	ldi	r27, 0x01	; 1
    2f52:	bf 93       	push	r27
    2f54:	af 93       	push	r26
    2f56:	bf 92       	push	r11
    2f58:	af 92       	push	r10
    2f5a:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    2f5e:	61 e0       	ldi	r22, 0x01	; 1
    2f60:	c5 01       	movw	r24, r10
    2f62:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
			}
			break;
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	25 c3       	rjmp	.+1610   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    2f74:	d6 01       	movw	r26, r12
    2f76:	13 96       	adiw	r26, 0x03	; 3
    2f78:	8c 91       	ld	r24, X
    2f7a:	13 97       	sbiw	r26, 0x03	; 3
    2f7c:	89 34       	cpi	r24, 0x49	; 73
    2f7e:	f1 f5       	brne	.+124    	; 0x2ffc <_Z17handleLinkBusMsgsv+0x448>
				{
					if(lb_buff->fields[FIELD2][0])
    2f80:	57 96       	adiw	r26, 0x17	; 23
    2f82:	8c 91       	ld	r24, X
    2f84:	88 23       	and	r24, r24
    2f86:	d1 f1       	breq	.+116    	; 0x2ffc <_Z17handleLinkBusMsgsv+0x448>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    2f88:	c6 01       	movw	r24, r12
    2f8a:	47 96       	adiw	r24, 0x17	; 23
    2f8c:	0e 94 4e 2c 	call	0x589c	; 0x589c <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    2f90:	86 2f       	mov	r24, r22
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	85 30       	cpi	r24, 0x05	; 5
    2f96:	91 05       	cpc	r25, r1
    2f98:	14 f4       	brge	.+4      	; 0x2f9e <_Z17handleLinkBusMsgsv+0x3ea>
    2f9a:	85 e0       	ldi	r24, 0x05	; 5
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	85 31       	cpi	r24, 0x15	; 21
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <_Z17handleLinkBusMsgsv+0x3f2>
    2fa4:	84 e1       	ldi	r24, 0x14	; 20
    2fa6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    2faa:	44 e1       	ldi	r20, 0x14	; 20
    2fac:	51 e0       	ldi	r21, 0x01	; 1
    2fae:	6f e0       	ldi	r22, 0x0F	; 15
    2fb0:	8f e9       	ldi	r24, 0x9F	; 159
    2fb2:	95 e0       	ldi	r25, 0x05	; 5
    2fb4:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    2fb8:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_messages_text+0x15>
    2fbc:	88 23       	and	r24, r24
    2fbe:	f1 f0       	breq	.+60     	; 0x2ffc <_Z17handleLinkBusMsgsv+0x448>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    2fc0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	82 e3       	ldi	r24, 0x32	; 50
    2fc8:	95 e0       	ldi	r25, 0x05	; 5
    2fca:	0e 94 38 25 	call	0x4a70	; 0x4a70 <_Z26timeRequiredToSendStrAtWPMPcj>
    2fce:	8c 50       	subi	r24, 0x0C	; 12
    2fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	36 95       	lsr	r19
    2fd6:	27 95       	ror	r18
    2fd8:	36 95       	lsr	r19
    2fda:	27 95       	ror	r18
    2fdc:	36 95       	lsr	r19
    2fde:	27 95       	ror	r18
    2fe0:	a5 ec       	ldi	r26, 0xC5	; 197
    2fe2:	b0 e2       	ldi	r27, 0x20	; 32
    2fe4:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>
    2fe8:	92 95       	swap	r25
    2fea:	82 95       	swap	r24
    2fec:	8f 70       	andi	r24, 0x0F	; 15
    2fee:	89 27       	eor	r24, r25
    2ff0:	9f 70       	andi	r25, 0x0F	; 15
    2ff2:	89 27       	eor	r24, r25
    2ff4:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <g_time_needed_for_ID+0x1>
    2ff8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2ffc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_id_codespeed>
    3000:	1f 92       	push	r1
    3002:	8f 93       	push	r24
    3004:	5f 92       	push	r5
    3006:	4f 92       	push	r4
    3008:	bf 92       	push	r11
    300a:	af 92       	push	r10
    300c:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	c5 01       	movw	r24, r10
    3014:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
			}
			break;
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cc c2       	rjmp	.+1432   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>

			case MESSAGE_VERSION:
			{
				ee_mgr.sendEEPROMString(TextVersion);
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	8f e9       	ldi	r24, 0x9F	; 159
    302a:	95 e0       	ldi	r25, 0x05	; 5
    302c:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
			}
			break;
    3030:	c6 c2       	rjmp	.+1420   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    3032:	f6 01       	movw	r30, r12
    3034:	83 81       	ldd	r24, Z+3	; 0x03
    3036:	88 23       	and	r24, r24
    3038:	d1 f0       	breq	.+52     	; 0x306e <_Z17handleLinkBusMsgsv+0x4ba>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    303a:	48 e0       	ldi	r20, 0x08	; 8
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	b6 01       	movw	r22, r12
    3040:	6d 5f       	subi	r22, 0xFD	; 253
    3042:	7f 4f       	sbci	r23, 0xFF	; 255
    3044:	c5 01       	movw	r24, r10
    3046:	0e 94 8f 2c 	call	0x591e	; 0x591e <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    304a:	d5 01       	movw	r26, r10
    304c:	18 96       	adiw	r26, 0x08	; 8
    304e:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    3050:	c5 01       	movw	r24, r10
    3052:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11only_digitsPc>
    3056:	88 23       	and	r24, r24
    3058:	51 f0       	breq	.+20     	; 0x306e <_Z17handleLinkBusMsgsv+0x4ba>
    305a:	f5 01       	movw	r30, r10
    305c:	01 90       	ld	r0, Z+
    305e:	00 20       	and	r0, r0
    3060:	e9 f7       	brne	.-6      	; 0x305c <_Z17handleLinkBusMsgsv+0x4a8>
    3062:	31 97       	sbiw	r30, 0x01	; 1
    3064:	e6 5e       	subi	r30, 0xE6	; 230
    3066:	f4 40       	sbci	r31, 0x04	; 4
    3068:	34 97       	sbiw	r30, 0x04	; 4
    306a:	08 f0       	brcs	.+2      	; 0x306e <_Z17handleLinkBusMsgsv+0x4ba>
    306c:	bc c2       	rjmp	.+1400   	; 0x35e6 <_Z17handleLinkBusMsgsv+0xa32>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    306e:	9f 92       	push	r9
    3070:	8f 92       	push	r8
    3072:	7f 92       	push	r7
    3074:	6f 92       	push	r6
    3076:	bf 92       	push	r11
    3078:	af 92       	push	r10
    307a:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    307e:	61 e0       	ldi	r22, 0x01	; 1
    3080:	c5 01       	movw	r24, r10
    3082:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
			}
			break;
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	95 c2       	rjmp	.+1322   	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    3094:	f6 01       	movw	r30, r12
    3096:	83 81       	ldd	r24, Z+3	; 0x03
    3098:	84 35       	cpi	r24, 0x54	; 84
    309a:	09 f0       	breq	.+2      	; 0x309e <_Z17handleLinkBusMsgsv+0x4ea>
    309c:	74 c0       	rjmp	.+232    	; 0x3186 <_Z17handleLinkBusMsgsv+0x5d2>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    309e:	4c e0       	ldi	r20, 0x0C	; 12
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	b6 01       	movw	r22, r12
    30a4:	69 5e       	subi	r22, 0xE9	; 233
    30a6:	7f 4f       	sbci	r23, 0xFF	; 255
    30a8:	c5 01       	movw	r24, r10
    30aa:	0e 94 8f 2c 	call	0x591e	; 0x591e <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    30ae:	d5 01       	movw	r26, r10
    30b0:	1c 96       	adiw	r26, 0x0c	; 12
    30b2:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    30b4:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_utc_offset>
    30b8:	41 95       	neg	r20
    30ba:	61 e9       	ldi	r22, 0x91	; 145
    30bc:	75 e0       	ldi	r23, 0x05	; 5
    30be:	c5 01       	movw	r24, r10
    30c0:	0e 94 99 14 	call	0x2932	; 0x2932 <_Z18validateTimeStringPcPma>
    30c4:	69 87       	std	Y+9, r22	; 0x09
    30c6:	7a 87       	std	Y+10, r23	; 0x0a
    30c8:	8b 87       	std	Y+11, r24	; 0x0b
    30ca:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    30cc:	61 15       	cp	r22, r1
    30ce:	71 05       	cpc	r23, r1
    30d0:	81 05       	cpc	r24, r1
    30d2:	91 05       	cpc	r25, r1
    30d4:	41 f1       	breq	.+80     	; 0x3126 <_Z17handleLinkBusMsgsv+0x572>
					{
						rv3028_set_epoch(t);
    30d6:	0e 94 84 25 	call	0x4b08	; 0x4b08 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	ab 85       	ldd	r26, Y+11	; 0x0b
    30e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    30e2:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <g_current_epoch>
    30e6:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <g_current_epoch+0x1>
    30ea:	a0 93 93 05 	sts	0x0593, r26	; 0x800593 <g_current_epoch+0x2>
    30ee:	b0 93 94 05 	sts	0x0594, r27	; 0x800594 <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    30f2:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    30f6:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    30fa:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    30fe:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    3102:	bf 93       	push	r27
    3104:	af 93       	push	r26
    3106:	9f 93       	push	r25
    3108:	8f 93       	push	r24
    310a:	89 ec       	ldi	r24, 0xC9	; 201
    310c:	91 e0       	ldi	r25, 0x01	; 1
    310e:	9f 93       	push	r25
    3110:	8f 93       	push	r24
    3112:	bf 92       	push	r11
    3114:	af 92       	push	r10
    3116:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	6b c2       	rjmp	.+1238   	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3126:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <g_event_start_epoch>
    312a:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    312e:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    3132:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    3136:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_current_epoch>
    313a:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_current_epoch+0x1>
    313e:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch+0x2>
    3142:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x3>
    3146:	e1 2c       	mov	r14, r1
    3148:	f1 2c       	mov	r15, r1
    314a:	05 e7       	ldi	r16, 0x75	; 117
    314c:	11 e0       	ldi	r17, 0x01	; 1
    314e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    3152:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    3156:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    315a:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    315e:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    3162:	bf 93       	push	r27
    3164:	af 93       	push	r26
    3166:	9f 93       	push	r25
    3168:	8f 93       	push	r24
    316a:	84 ec       	ldi	r24, 0xC4	; 196
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	9f 93       	push	r25
    3170:	8f 93       	push	r24
    3172:	bf 92       	push	r11
    3174:	af 92       	push	r10
    3176:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	3b c2       	rjmp	.+1142   	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3186:	83 35       	cpi	r24, 0x53	; 83
    3188:	09 f0       	breq	.+2      	; 0x318c <_Z17handleLinkBusMsgsv+0x5d8>
    318a:	98 c0       	rjmp	.+304    	; 0x32bc <_Z17handleLinkBusMsgsv+0x708>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    318c:	b6 01       	movw	r22, r12
    318e:	69 5e       	subi	r22, 0xE9	; 233
    3190:	7f 4f       	sbci	r23, 0xFF	; 255
    3192:	c5 01       	movw	r24, r10
    3194:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3198:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_utc_offset>
    319c:	41 95       	neg	r20
    319e:	6d e8       	ldi	r22, 0x8D	; 141
    31a0:	75 e0       	ldi	r23, 0x05	; 5
    31a2:	c5 01       	movw	r24, r10
    31a4:	0e 94 99 14 	call	0x2932	; 0x2932 <_Z18validateTimeStringPcPma>

					if(s)
    31a8:	61 15       	cp	r22, r1
    31aa:	71 05       	cpc	r23, r1
    31ac:	81 05       	cpc	r24, r1
    31ae:	91 05       	cpc	r25, r1
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <_Z17handleLinkBusMsgsv+0x600>
    31b2:	6a c0       	rjmp	.+212    	; 0x3288 <_Z17handleLinkBusMsgsv+0x6d4>
					{
						g_event_start_epoch = s;
    31b4:	60 93 8d 05 	sts	0x058D, r22	; 0x80058d <g_event_start_epoch>
    31b8:	70 93 8e 05 	sts	0x058E, r23	; 0x80058e <g_event_start_epoch+0x1>
    31bc:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_event_start_epoch+0x2>
    31c0:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    31c4:	4d e8       	ldi	r20, 0x8D	; 141
    31c6:	55 e0       	ldi	r21, 0x05	; 5
    31c8:	65 e1       	ldi	r22, 0x15	; 21
    31ca:	8f e9       	ldi	r24, 0x9F	; 159
    31cc:	95 e0       	ldi	r25, 0x05	; 5
    31ce:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    31d2:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    31d6:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    31da:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    31de:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    31e2:	8d 83       	std	Y+5, r24	; 0x05
    31e4:	9e 83       	std	Y+6, r25	; 0x06
    31e6:	af 83       	std	Y+7, r26	; 0x07
    31e8:	b8 87       	std	Y+8, r27	; 0x08
    31ea:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    31ee:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    31f2:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    31f6:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    31fa:	80 58       	subi	r24, 0x80	; 128
    31fc:	9e 4a       	sbci	r25, 0xAE	; 174
    31fe:	ae 4f       	sbci	r26, 0xFE	; 254
    3200:	bf 4f       	sbci	r27, 0xFF	; 255
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	ab 83       	std	Y+3, r26	; 0x03
    3208:	bc 83       	std	Y+4, r27	; 0x04
    320a:	4d 81       	ldd	r20, Y+5	; 0x05
    320c:	5e 81       	ldd	r21, Y+6	; 0x06
    320e:	6f 81       	ldd	r22, Y+7	; 0x07
    3210:	78 85       	ldd	r23, Y+8	; 0x08
    3212:	48 17       	cp	r20, r24
    3214:	59 07       	cpc	r21, r25
    3216:	6a 07       	cpc	r22, r26
    3218:	7b 07       	cpc	r23, r27
    321a:	28 f4       	brcc	.+10     	; 0x3226 <_Z17handleLinkBusMsgsv+0x672>
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	ab 81       	ldd	r26, Y+3	; 0x03
    3222:	bc 81       	ldd	r27, Y+4	; 0x04
    3224:	04 c0       	rjmp	.+8      	; 0x322e <_Z17handleLinkBusMsgsv+0x67a>
    3226:	8d 81       	ldd	r24, Y+5	; 0x05
    3228:	9e 81       	ldd	r25, Y+6	; 0x06
    322a:	af 81       	ldd	r26, Y+7	; 0x07
    322c:	b8 85       	ldd	r27, Y+8	; 0x08
    322e:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_finish_epoch>
    3232:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_finish_epoch+0x1>
    3236:	a0 93 8b 05 	sts	0x058B, r26	; 0x80058b <g_event_finish_epoch+0x2>
    323a:	b0 93 8c 05 	sts	0x058C, r27	; 0x80058c <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    323e:	49 e8       	ldi	r20, 0x89	; 137
    3240:	55 e0       	ldi	r21, 0x05	; 5
    3242:	66 e1       	ldi	r22, 0x16	; 22
    3244:	8f e9       	ldi	r24, 0x9F	; 159
    3246:	95 e0       	ldi	r25, 0x05	; 5
    3248:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    324c:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    3250:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    3254:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    3258:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    325c:	bf 93       	push	r27
    325e:	af 93       	push	r26
    3260:	9f 93       	push	r25
    3262:	8f 93       	push	r24
    3264:	83 ed       	ldi	r24, 0xD3	; 211
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	9f 93       	push	r25
    326a:	8f 93       	push	r24
    326c:	bf 92       	push	r11
    326e:	af 92       	push	r10
    3270:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
						setupForFox(NULL);
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	ba c1       	rjmp	.+884    	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3288:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_event_start_epoch>
    328c:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    3290:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    3294:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    3298:	bf 93       	push	r27
    329a:	af 93       	push	r26
    329c:	9f 93       	push	r25
    329e:	8f 93       	push	r24
    32a0:	83 ed       	ldi	r24, 0xD3	; 211
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	9f 93       	push	r25
    32a6:	8f 93       	push	r24
    32a8:	bf 92       	push	r11
    32aa:	af 92       	push	r10
    32ac:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	a0 c1       	rjmp	.+832    	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    32bc:	86 34       	cpi	r24, 0x46	; 70
    32be:	09 f0       	breq	.+2      	; 0x32c2 <_Z17handleLinkBusMsgsv+0x70e>
    32c0:	71 c0       	rjmp	.+226    	; 0x33a4 <_Z17handleLinkBusMsgsv+0x7f0>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    32c2:	b6 01       	movw	r22, r12
    32c4:	69 5e       	subi	r22, 0xE9	; 233
    32c6:	7f 4f       	sbci	r23, 0xFF	; 255
    32c8:	c5 01       	movw	r24, r10
    32ca:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    32ce:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_utc_offset>
    32d2:	41 95       	neg	r20
    32d4:	69 e8       	ldi	r22, 0x89	; 137
    32d6:	75 e0       	ldi	r23, 0x05	; 5
    32d8:	c5 01       	movw	r24, r10
    32da:	0e 94 99 14 	call	0x2932	; 0x2932 <_Z18validateTimeStringPcPma>

					if(f)
    32de:	61 15       	cp	r22, r1
    32e0:	71 05       	cpc	r23, r1
    32e2:	81 05       	cpc	r24, r1
    32e4:	91 05       	cpc	r25, r1
    32e6:	09 f4       	brne	.+2      	; 0x32ea <_Z17handleLinkBusMsgsv+0x736>
    32e8:	43 c0       	rjmp	.+134    	; 0x3370 <_Z17handleLinkBusMsgsv+0x7bc>
					{
						g_event_finish_epoch = f;
    32ea:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <g_event_finish_epoch>
    32ee:	70 93 8a 05 	sts	0x058A, r23	; 0x80058a <g_event_finish_epoch+0x1>
    32f2:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_event_finish_epoch+0x2>
    32f6:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    32fa:	49 e8       	ldi	r20, 0x89	; 137
    32fc:	55 e0       	ldi	r21, 0x05	; 5
    32fe:	66 e1       	ldi	r22, 0x16	; 22
    3300:	8f e9       	ldi	r24, 0x9F	; 159
    3302:	95 e0       	ldi	r25, 0x05	; 5
    3304:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3308:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <g_event_finish_epoch>
    330c:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    3310:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    3314:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    3318:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_start_epoch>
    331c:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    3320:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    3324:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    3328:	e1 2c       	mov	r14, r1
    332a:	f1 2c       	mov	r15, r1
    332c:	01 e8       	ldi	r16, 0x81	; 129
    332e:	11 e0       	ldi	r17, 0x01	; 1
    3330:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3334:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    3338:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    333c:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    3340:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    3344:	bf 93       	push	r27
    3346:	af 93       	push	r26
    3348:	9f 93       	push	r25
    334a:	8f 93       	push	r24
    334c:	8e ed       	ldi	r24, 0xDE	; 222
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	9f 93       	push	r25
    3352:	8f 93       	push	r24
    3354:	bf 92       	push	r11
    3356:	af 92       	push	r10
    3358:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
						setupForFox(NULL);
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	46 c1       	rjmp	.+652    	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3370:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_finish_epoch>
    3374:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    3378:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    337c:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    3380:	bf 93       	push	r27
    3382:	af 93       	push	r26
    3384:	9f 93       	push	r25
    3386:	8f 93       	push	r24
    3388:	8e ed       	ldi	r24, 0xDE	; 222
    338a:	91 e0       	ldi	r25, 0x01	; 1
    338c:	9f 93       	push	r25
    338e:	8f 93       	push	r24
    3390:	bf 92       	push	r11
    3392:	af 92       	push	r10
    3394:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	2c c1       	rjmp	.+600    	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    33a4:	8f 34       	cpi	r24, 0x4F	; 79
    33a6:	a9 f5       	brne	.+106    	; 0x3412 <_Z17handleLinkBusMsgsv+0x85e>
				{
					if(lb_buff->fields[FIELD2][0])
    33a8:	87 89       	ldd	r24, Z+23	; 0x17
    33aa:	88 23       	and	r24, r24
    33ac:	d9 f0       	breq	.+54     	; 0x33e4 <_Z17handleLinkBusMsgsv+0x830>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    33ae:	c6 01       	movw	r24, r12
    33b0:	47 96       	adiw	r24, 0x17	; 23
    33b2:	0e 94 30 2c 	call	0x5860	; 0x5860 <atoi>

						offset = CLAMP(-24, offset, 24);
    33b6:	89 31       	cpi	r24, 0x19	; 25
    33b8:	54 f4       	brge	.+20     	; 0x33ce <_Z17handleLinkBusMsgsv+0x81a>
    33ba:	08 2e       	mov	r0, r24
    33bc:	00 0c       	add	r0, r0
    33be:	99 0b       	sbc	r25, r25
    33c0:	88 3e       	cpi	r24, 0xE8	; 232
    33c2:	bf ef       	ldi	r27, 0xFF	; 255
    33c4:	9b 07       	cpc	r25, r27
    33c6:	2c f4       	brge	.+10     	; 0x33d2 <_Z17handleLinkBusMsgsv+0x81e>
    33c8:	88 ee       	ldi	r24, 0xE8	; 232
    33ca:	9f ef       	ldi	r25, 0xFF	; 255
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <_Z17handleLinkBusMsgsv+0x81e>
    33ce:	88 e1       	ldi	r24, 0x18	; 24
    33d0:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    33d2:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    33d6:	48 e8       	ldi	r20, 0x88	; 136
    33d8:	55 e0       	ldi	r21, 0x05	; 5
    33da:	67 e1       	ldi	r22, 0x17	; 23
    33dc:	8f e9       	ldi	r24, 0x9F	; 159
    33de:	95 e0       	ldi	r25, 0x05	; 5
    33e0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    33e4:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <g_utc_offset>
    33e8:	28 2f       	mov	r18, r24
    33ea:	08 2e       	mov	r0, r24
    33ec:	00 0c       	add	r0, r0
    33ee:	33 0b       	sbc	r19, r19
    33f0:	3f 93       	push	r19
    33f2:	8f 93       	push	r24
    33f4:	8a ee       	ldi	r24, 0xEA	; 234
    33f6:	91 e0       	ldi	r25, 0x01	; 1
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	bf 92       	push	r11
    33fe:	af 92       	push	r10
    3400:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	f5 c0       	rjmp	.+490    	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3412:	83 34       	cpi	r24, 0x43	; 67
    3414:	09 f5       	brne	.+66     	; 0x3458 <_Z17handleLinkBusMsgsv+0x8a4>
				{
					if(lb_buff->fields[FIELD2][0])
    3416:	f6 01       	movw	r30, r12
    3418:	87 89       	ldd	r24, Z+23	; 0x17
    341a:	88 23       	and	r24, r24
    341c:	51 f0       	breq	.+20     	; 0x3432 <_Z17handleLinkBusMsgsv+0x87e>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    341e:	c6 01       	movw	r24, r12
    3420:	47 96       	adiw	r24, 0x17	; 23
    3422:	0e 94 30 2c 	call	0x5860	; 0x5860 <atoi>

						if(c < 512)
    3426:	81 15       	cp	r24, r1
    3428:	f2 e0       	ldi	r31, 0x02	; 2
    342a:	9f 07       	cpc	r25, r31
    342c:	10 f4       	brcc	.+4      	; 0x3432 <_Z17handleLinkBusMsgsv+0x87e>
						{
							rv3028_set_offset_RAM(c);
    342e:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3432:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    3436:	9f 93       	push	r25
    3438:	8f 93       	push	r24
    343a:	85 ef       	ldi	r24, 0xF5	; 245
    343c:	91 e0       	ldi	r25, 0x01	; 1
    343e:	9f 93       	push	r25
    3440:	8f 93       	push	r24
    3442:	bf 92       	push	r11
    3444:	af 92       	push	r10
    3446:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	d2 c0       	rjmp	.+420    	; 0x35fc <_Z17handleLinkBusMsgsv+0xa48>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck() == CONFIGURATION_ERROR)
    3458:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_Z23clockConfigurationCheckv>
    345c:	82 30       	cpi	r24, 0x02	; 2
    345e:	19 f4       	brne	.+6      	; 0x3466 <_Z17handleLinkBusMsgsv+0x8b2>
					{
						reportConfigErrors();
    3460:	0e 94 76 12 	call	0x24ec	; 0x24ec <_Z18reportConfigErrorsv>
    3464:	ac c0       	rjmp	.+344    	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    3466:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <g_event_start_epoch>
    346a:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    346e:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    3472:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    3476:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_current_epoch>
    347a:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_current_epoch+0x1>
    347e:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch+0x2>
    3482:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x3>
    3486:	0f 2e       	mov	r0, r31
    3488:	f8 e6       	ldi	r31, 0x68	; 104
    348a:	ef 2e       	mov	r14, r31
    348c:	f1 e0       	ldi	r31, 0x01	; 1
    348e:	ff 2e       	mov	r15, r31
    3490:	f0 2d       	mov	r31, r0
    3492:	05 e7       	ldi	r16, 0x75	; 117
    3494:	11 e0       	ldi	r17, 0x01	; 1
    3496:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    349a:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <g_event_finish_epoch>
    349e:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    34a2:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    34a6:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    34aa:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_event_start_epoch>
    34ae:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    34b2:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    34b6:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    34ba:	e1 2c       	mov	r14, r1
    34bc:	f1 2c       	mov	r15, r1
    34be:	01 e8       	ldi	r16, 0x81	; 129
    34c0:	11 e0       	ldi	r17, 0x01	; 1
    34c2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    34c6:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <g_event_start_epoch>
    34ca:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <g_event_start_epoch+0x1>
    34ce:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <g_event_start_epoch+0x2>
    34d2:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <g_event_start_epoch+0x3>
    34d6:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <g_current_epoch>
    34da:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <g_current_epoch+0x1>
    34de:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <g_current_epoch+0x2>
    34e2:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <g_current_epoch+0x3>
    34e6:	48 17       	cp	r20, r24
    34e8:	59 07       	cpc	r21, r25
    34ea:	6a 07       	cpc	r22, r26
    34ec:	7b 07       	cpc	r23, r27
    34ee:	08 f0       	brcs	.+2      	; 0x34f2 <_Z17handleLinkBusMsgsv+0x93e>
    34f0:	66 c0       	rjmp	.+204    	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    34f2:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <g_event_finish_epoch>
    34f6:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <g_event_finish_epoch+0x1>
    34fa:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_event_finish_epoch+0x2>
    34fe:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_event_finish_epoch+0x3>
    3502:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <g_current_epoch>
    3506:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <g_current_epoch+0x1>
    350a:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_current_epoch+0x2>
    350e:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <g_current_epoch+0x3>
    3512:	09 e8       	ldi	r16, 0x89	; 137
    3514:	11 e0       	ldi	r17, 0x01	; 1
    3516:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z14reportTimeTillmmPKcS0_>
    351a:	51 c0       	rjmp	.+162    	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    351c:	f6 01       	movw	r30, r12
    351e:	83 81       	ldd	r24, Z+3	; 0x03
    3520:	83 34       	cpi	r24, 0x43	; 67
    3522:	81 f5       	brne	.+96     	; 0x3584 <_Z17handleLinkBusMsgsv+0x9d0>
				{
					if(lb_buff->fields[FIELD2][0])
    3524:	87 89       	ldd	r24, Z+23	; 0x17
    3526:	88 23       	and	r24, r24
    3528:	a9 f0       	breq	.+42     	; 0x3554 <_Z17handleLinkBusMsgsv+0x9a0>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    352a:	c6 01       	movw	r24, r12
    352c:	47 96       	adiw	r24, 0x17	; 23
    352e:	0e 94 30 2c 	call	0x5860	; 0x5860 <atoi>

						if((v > -2000) && (v < 2000))
    3532:	9c 01       	movw	r18, r24
    3534:	21 53       	subi	r18, 0x31	; 49
    3536:	38 4f       	sbci	r19, 0xF8	; 248
    3538:	2f 39       	cpi	r18, 0x9F	; 159
    353a:	3f 40       	sbci	r19, 0x0F	; 15
    353c:	58 f4       	brcc	.+22     	; 0x3554 <_Z17handleLinkBusMsgsv+0x9a0>
						{
							g_atmega_temp_calibration = v;
    353e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <g_atmega_temp_calibration+0x1>
    3542:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3546:	41 e1       	ldi	r20, 0x11	; 17
    3548:	51 e0       	ldi	r21, 0x01	; 1
    354a:	62 e1       	ldi	r22, 0x12	; 18
    354c:	8f e9       	ldi	r24, 0x9F	; 159
    354e:	95 e0       	ldi	r25, 0x05	; 5
    3550:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    3554:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_atmega_temp_calibration>
    3558:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_atmega_temp_calibration+0x1>
    355c:	9f 93       	push	r25
    355e:	8f 93       	push	r24
    3560:	8b ef       	ldi	r24, 0xFB	; 251
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	9f 93       	push	r25
    3566:	8f 93       	push	r24
    3568:	bf 92       	push	r11
    356a:	af 92       	push	r10
    356c:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
					lb_send_string(g_tempStr, FALSE);
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	c5 01       	movw	r24, r10
    3574:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    3584:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_temperature>
    3588:	28 2f       	mov	r18, r24
    358a:	08 2e       	mov	r0, r24
    358c:	00 0c       	add	r0, r0
    358e:	33 0b       	sbc	r19, r19
    3590:	3f 93       	push	r19
    3592:	8f 93       	push	r24
    3594:	3f 92       	push	r3
    3596:	2f 92       	push	r2
    3598:	bf 92       	push	r11
    359a:	af 92       	push	r10
    359c:	0e 94 bb 2c 	call	0x5976	; 0x5976 <sprintf>
				lb_send_string(g_tempStr, TRUE);
    35a0:	61 e0       	ldi	r22, 0x01	; 1
    35a2:	c5 01       	movw	r24, r10
    35a4:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
			}
			break;
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	04 c0       	rjmp	.+8      	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>

			default:
			{
				ee_mgr.send_Help();
    35b6:	8f e9       	ldi	r24, 0x9F	; 159
    35b8:	95 e0       	ldi	r25, 0x05	; 5
    35ba:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    35be:	f6 01       	movw	r30, r12
    35c0:	12 82       	std	Z+2, r1	; 0x02
    35c2:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    35c4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z17lb_send_NewPromptv>
    35c8:	2d cb       	rjmp	.-2470   	; 0x2c24 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	ec cb       	rjmp	.-2088   	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    35d0:	83 e1       	ldi	r24, 0x13	; 19
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	e9 cb       	rjmp	.-2094   	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    35d6:	87 e0       	ldi	r24, 0x07	; 7
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	e6 cb       	rjmp	.-2100   	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    35dc:	84 e1       	ldi	r24, 0x14	; 20
    35de:	e4 cb       	rjmp	.-2104   	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    35e0:	85 e1       	ldi	r24, 0x15	; 21
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	e1 cb       	rjmp	.-2110   	; 0x2da8 <_Z17handleLinkBusMsgsv+0x1f4>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    35e6:	b5 01       	movw	r22, r10
    35e8:	c4 01       	movw	r24, r8
    35ea:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    35ee:	a4 01       	movw	r20, r8
    35f0:	6e e0       	ldi	r22, 0x0E	; 14
    35f2:	8f e9       	ldi	r24, 0x9F	; 159
    35f4:	95 e0       	ldi	r25, 0x05	; 5
    35f6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    35fa:	39 cd       	rjmp	.-1422   	; 0x306e <_Z17handleLinkBusMsgsv+0x4ba>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    35fc:	61 e0       	ldi	r22, 0x01	; 1
    35fe:	c5 01       	movw	r24, r10
    3600:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
    3604:	dc cf       	rjmp	.-72     	; 0x35be <_Z17handleLinkBusMsgsv+0xa0a>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3606:	2c 96       	adiw	r28, 0x0c	; 12
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	ff 90       	pop	r15
    361c:	ef 90       	pop	r14
    361e:	df 90       	pop	r13
    3620:	cf 90       	pop	r12
    3622:	bf 90       	pop	r11
    3624:	af 90       	pop	r10
    3626:	9f 90       	pop	r9
    3628:	8f 90       	pop	r8
    362a:	7f 90       	pop	r7
    362c:	6f 90       	pop	r6
    362e:	5f 90       	pop	r5
    3630:	4f 90       	pop	r4
    3632:	3f 90       	pop	r3
    3634:	2f 90       	pop	r2
    3636:	08 95       	ret

00003638 <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    3638:	cf 92       	push	r12
    363a:	df 92       	push	r13
    363c:	ef 92       	push	r14
    363e:	ff 92       	push	r15
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	1f 92       	push	r1
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    364c:	84 34       	cpi	r24, 0x44	; 68
    364e:	39 f4       	brne	.+14     	; 0x365e <_Z10processKeyc+0x26>
		{
			g_DTMF_unlocked = FALSE;
    3650:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    3654:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3658:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    365c:	7d c3       	rjmp	.+1786   	; 0x3d58 <_Z10processKeyc+0x720>
		}

		if(!g_DTMF_unlocked)
    365e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_DTMF_unlocked>
    3662:	91 11       	cpse	r25, r1
    3664:	07 c0       	rjmp	.+14     	; 0x3674 <_Z10processKeyc+0x3c>
		{
			state = STATE_CHECK_PASSWORD;
    3666:	2f e0       	ldi	r18, 0x0F	; 15
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    366e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    3672:	07 c3       	rjmp	.+1550   	; 0x3c82 <_Z10processKeyc+0x64a>
    3674:	18 2f       	mov	r17, r24
		}
		else
		{
			if(key == '*')
    3676:	8a 32       	cpi	r24, 0x2A	; 42
    3678:	b9 f4       	brne	.+46     	; 0x36a8 <_Z10processKeyc+0x70>
			{
				state = STATE_SENTENCE_START;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3682:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    3686:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    368a:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ10processKeycE12stringLength>
				value = 0;
    368e:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3692:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ10processKeycE5value>
				digits = 0;
    3696:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    369a:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    369e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_DTMF_unlocked>
    36a2:	88 23       	and	r24, r24
    36a4:	c9 f1       	breq	.+114    	; 0x3718 <_Z10processKeyc+0xe0>
    36a6:	58 c3       	rjmp	.+1712   	; 0x3d58 <_Z10processKeyc+0x720>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    36a8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    36ac:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    36b0:	31 97       	sbiw	r30, 0x01	; 1
    36b2:	e0 31       	cpi	r30, 0x10	; 16
    36b4:	f1 05       	cpc	r31, r1
    36b6:	08 f0       	brcs	.+2      	; 0x36ba <_Z10processKeyc+0x82>
    36b8:	4f c3       	rjmp	.+1694   	; 0x3d58 <_Z10processKeyc+0x720>
    36ba:	e1 58       	subi	r30, 0x81	; 129
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    36c2:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    36c6:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ10processKeycE12stringLength>
				value = 0;
    36ca:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ10processKeycE5value+0x1>
    36ce:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ10processKeycE5value>
				digits = 0;
    36d2:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    36d6:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    36da:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_DTMF_unlocked>
    36de:	88 23       	and	r24, r24
    36e0:	d9 f0       	breq	.+54     	; 0x3718 <_Z10processKeyc+0xe0>
				{
					if(key == 'C')
    36e2:	13 34       	cpi	r17, 0x43	; 67
    36e4:	39 f4       	brne	.+14     	; 0x36f4 <_Z10processKeyc+0xbc>
					{
						state = STATE_C;
    36e6:	86 e0       	ldi	r24, 0x06	; 6
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    36ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    36f2:	32 c3       	rjmp	.+1636   	; 0x3d58 <_Z10processKeyc+0x720>
					}
					else if(key != '*')
    36f4:	1a 32       	cpi	r17, 0x2A	; 42
    36f6:	09 f4       	brne	.+2      	; 0x36fa <_Z10processKeyc+0xc2>
    36f8:	2f c3       	rjmp	.+1630   	; 0x3d58 <_Z10processKeyc+0x720>
					{
						value = key - '0';
    36fa:	81 2f       	mov	r24, r17
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	c0 97       	sbiw	r24, 0x30	; 48
    3700:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3704:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							setupPortsForF1975();
    3708:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z18setupPortsForF1975v>
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    370c:	80 e1       	ldi	r24, 0x10	; 16
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3714:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					}
				}

				if(key == 'A')
    3718:	11 34       	cpi	r17, 0x41	; 65
    371a:	09 f0       	breq	.+2      	; 0x371e <_Z10processKeyc+0xe6>
    371c:	1d c3       	rjmp	.+1594   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					state = STATE_A;
    371e:	82 e0       	ldi	r24, 0x02	; 2
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3726:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    372a:	16 c3       	rjmp	.+1580   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_A:
			{
				if(g_DTMF_unlocked)
    372c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_DTMF_unlocked>
    3730:	88 23       	and	r24, r24
    3732:	09 f4       	brne	.+2      	; 0x3736 <_Z10processKeyc+0xfe>
    3734:	11 c3       	rjmp	.+1570   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					if(key == '0')
    3736:	10 33       	cpi	r17, 0x30	; 48
    3738:	39 f4       	brne	.+14     	; 0x3748 <_Z10processKeyc+0x110>
					{
						state = STATE_PAUSE_TRANSMISSIONS;
    373a:	83 e0       	ldi	r24, 0x03	; 3
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3742:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3746:	08 c3       	rjmp	.+1552   	; 0x3d58 <_Z10processKeyc+0x720>
					}
					else if(key == '1')
    3748:	11 33       	cpi	r17, 0x31	; 49
    374a:	39 f4       	brne	.+14     	; 0x375a <_Z10processKeyc+0x122>
					{
						state = STATE_START_TRANSMISSIONS;
    374c:	84 e0       	ldi	r24, 0x04	; 4
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3754:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3758:	ff c2       	rjmp	.+1534   	; 0x3d58 <_Z10processKeyc+0x720>
					}
					else if(key == '2')
    375a:	12 33       	cpi	r17, 0x32	; 50
    375c:	39 f4       	brne	.+14     	; 0x376c <_Z10processKeyc+0x134>
					{
						state = STATE_START_TRANSMISSIONS_WITH_RTC;
    375e:	85 e0       	ldi	r24, 0x05	; 5
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3766:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    376a:	f6 c2       	rjmp	.+1516   	; 0x3d58 <_Z10processKeyc+0x720>
					}
					else if((key == '8') && setPasswordEnabled)
    376c:	18 33       	cpi	r17, 0x38	; 56
    376e:	09 f0       	breq	.+2      	; 0x3772 <_Z10processKeyc+0x13a>
    3770:	f3 c2       	rjmp	.+1510   	; 0x3d58 <_Z10processKeyc+0x720>
    3772:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ10processKeycE18setPasswordEnabled>
    3776:	88 23       	and	r24, r24
    3778:	09 f4       	brne	.+2      	; 0x377c <_Z10processKeyc+0x144>
    377a:	ee c2       	rjmp	.+1500   	; 0x3d58 <_Z10processKeyc+0x720>
					{
						state = STATE_SET_PASSWORD;
    377c:	8e e0       	ldi	r24, 0x0E	; 14
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3784:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3788:	e7 c2       	rjmp	.+1486   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    378a:	83 32       	cpi	r24, 0x23	; 35
    378c:	09 f0       	breq	.+2      	; 0x3790 <_Z10processKeyc+0x158>
    378e:	e4 c2       	rjmp	.+1480   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					stopEventNow();
    3790:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z12stopEventNowv>
					state = STATE_SHUTDOWN;
    3794:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3798:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    379c:	dd c2       	rjmp	.+1466   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    379e:	83 32       	cpi	r24, 0x23	; 35
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <_Z10processKeyc+0x16c>
    37a2:	da c2       	rjmp	.+1460   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					startEventNow();
    37a4:	0e 94 02 12 	call	0x2404	; 0x2404 <_Z13startEventNowv>
					state = STATE_SHUTDOWN;
    37a8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    37ac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    37b0:	d3 c2       	rjmp	.+1446   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    37b2:	83 32       	cpi	r24, 0x23	; 35
    37b4:	09 f0       	breq	.+2      	; 0x37b8 <_Z10processKeyc+0x180>
    37b6:	d0 c2       	rjmp	.+1440   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					startEventUsingRTC();
    37b8:	0e 94 26 14 	call	0x284c	; 0x284c <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    37bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    37c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    37c4:	c9 c2       	rjmp	.+1426   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    37c6:	81 33       	cpi	r24, 0x31	; 49
    37c8:	39 f4       	brne	.+14     	; 0x37d8 <_Z10processKeyc+0x1a0>
				{
					state = STATE_RECEIVING_CALLSIGN;
    37ca:	87 e0       	ldi	r24, 0x07	; 7
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    37d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    37d6:	c0 c2       	rjmp	.+1408   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == '2')
    37d8:	82 33       	cpi	r24, 0x32	; 50
    37da:	39 f4       	brne	.+14     	; 0x37ea <_Z10processKeyc+0x1b2>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    37dc:	88 e0       	ldi	r24, 0x08	; 8
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    37e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    37e8:	b7 c2       	rjmp	.+1390   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    37ea:	83 33       	cpi	r24, 0x33	; 51
    37ec:	39 f4       	brne	.+14     	; 0x37fc <_Z10processKeyc+0x1c4>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    37ee:	8c e0       	ldi	r24, 0x0C	; 12
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    37f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    37fa:	ae c2       	rjmp	.+1372   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == '4')
    37fc:	84 33       	cpi	r24, 0x34	; 52
    37fe:	39 f4       	brne	.+14     	; 0x380e <_Z10processKeyc+0x1d6>
				{
					state = STATE_RECEIVING_START_TIME;
    3800:	89 e0       	ldi	r24, 0x09	; 9
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3808:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    380c:	a5 c2       	rjmp	.+1354   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == '5')
    380e:	85 33       	cpi	r24, 0x35	; 53
    3810:	39 f4       	brne	.+14     	; 0x3820 <_Z10processKeyc+0x1e8>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    3812:	8a e0       	ldi	r24, 0x0A	; 10
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    381a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    381e:	9c c2       	rjmp	.+1336   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == '6')
    3820:	86 33       	cpi	r24, 0x36	; 54
    3822:	69 f4       	brne	.+26     	; 0x383e <_Z10processKeyc+0x206>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    3824:	8b e0       	ldi	r24, 0x0B	; 11
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    382c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3838:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE6digits>
    383c:	8d c2       	rjmp	.+1306   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == '9')
    383e:	89 33       	cpi	r24, 0x39	; 57
    3840:	39 f4       	brne	.+14     	; 0x3850 <_Z10processKeyc+0x218>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    3842:	8d e0       	ldi	r24, 0x0D	; 13
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    384a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    384e:	84 c2       	rjmp	.+1288   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else
				{
					state = STATE_SHUTDOWN;
    3850:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3854:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3858:	7f c2       	rjmp	.+1278   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    385a:	83 32       	cpi	r24, 0x23	; 35
    385c:	c1 f4       	brne	.+48     	; 0x388e <_Z10processKeyc+0x256>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    385e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10processKeycE12stringLength>
    3862:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3866:	04 97       	sbiw	r24, 0x04	; 4
    3868:	6c f0       	brlt	.+26     	; 0x3884 <_Z10processKeyc+0x24c>
					{
						strcpy((char*)g_unlockCode, receivedString);
    386a:	61 e7       	ldi	r22, 0x71	; 113
    386c:	74 e0       	ldi	r23, 0x04	; 4
    386e:	8a e4       	ldi	r24, 0x4A	; 74
    3870:	95 e0       	ldi	r25, 0x05	; 5
    3872:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3876:	4a e4       	ldi	r20, 0x4A	; 74
    3878:	55 e0       	ldi	r21, 0x05	; 5
    387a:	6e e0       	ldi	r22, 0x0E	; 14
    387c:	8f e9       	ldi	r24, 0x9F	; 159
    387e:	95 e0       	ldi	r25, 0x05	; 5
    3880:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3884:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3888:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    388c:	65 c2       	rjmp	.+1226   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    388e:	80 ed       	ldi	r24, 0xD0	; 208
    3890:	81 0f       	add	r24, r17
    3892:	8a 30       	cpi	r24, 0x0A	; 10
    3894:	08 f0       	brcs	.+2      	; 0x3898 <_Z10processKeyc+0x260>
    3896:	60 c2       	rjmp	.+1216   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    3898:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10processKeycE12stringLength>
    389c:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    38a0:	89 30       	cpi	r24, 0x09	; 9
    38a2:	91 05       	cpc	r25, r1
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <_Z10processKeyc+0x270>
    38a6:	58 c2       	rjmp	.+1200   	; 0x3d58 <_Z10processKeyc+0x720>
					{
						receivedString[stringLength++] = key;
    38a8:	9c 01       	movw	r18, r24
    38aa:	2f 5f       	subi	r18, 0xFF	; 255
    38ac:	3f 4f       	sbci	r19, 0xFF	; 255
    38ae:	30 93 8c 04 	sts	0x048C, r19	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    38b2:	20 93 8b 04 	sts	0x048B, r18	; 0x80048b <_ZZ10processKeycE12stringLength>
    38b6:	fc 01       	movw	r30, r24
    38b8:	ef 58       	subi	r30, 0x8F	; 143
    38ba:	fb 4f       	sbci	r31, 0xFB	; 251
    38bc:	10 83       	st	Z, r17
						receivedString[stringLength] = '\0';
    38be:	f9 01       	movw	r30, r18
    38c0:	ef 58       	subi	r30, 0x8F	; 143
    38c2:	fb 4f       	sbci	r31, 0xFB	; 251
    38c4:	10 82       	st	Z, r1
    38c6:	48 c2       	rjmp	.+1168   	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    38c8:	83 32       	cpi	r24, 0x23	; 35
    38ca:	e1 f4       	brne	.+56     	; 0x3904 <_Z10processKeyc+0x2cc>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    38cc:	e1 e7       	ldi	r30, 0x71	; 113
    38ce:	f4 e0       	ldi	r31, 0x04	; 4
    38d0:	01 90       	ld	r0, Z+
    38d2:	00 20       	and	r0, r0
    38d4:	e9 f7       	brne	.-6      	; 0x38d0 <_Z10processKeyc+0x298>
    38d6:	31 97       	sbiw	r30, 0x01	; 1
    38d8:	e1 57       	subi	r30, 0x71	; 113
    38da:	f4 40       	sbci	r31, 0x04	; 4
    38dc:	75 97       	sbiw	r30, 0x15	; 21
    38de:	68 f4       	brcc	.+26     	; 0x38fa <_Z10processKeyc+0x2c2>
					{
						strcpy(g_messages_text[STATION_ID], receivedString);
    38e0:	61 e7       	ldi	r22, 0x71	; 113
    38e2:	74 e0       	ldi	r23, 0x04	; 4
    38e4:	82 e3       	ldi	r24, 0x32	; 50
    38e6:	95 e0       	ldi	r25, 0x05	; 5
    38e8:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    38ec:	42 e3       	ldi	r20, 0x32	; 50
    38ee:	55 e0       	ldi	r21, 0x05	; 5
    38f0:	6b e0       	ldi	r22, 0x0B	; 11
    38f2:	8f e9       	ldi	r24, 0x9F	; 159
    38f4:	95 e0       	ldi	r25, 0x05	; 5
    38f6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    38fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    38fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3902:	2a c2       	rjmp	.+1108   	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    3904:	80 ed       	ldi	r24, 0xD0	; 208
    3906:	81 0f       	add	r24, r17
    3908:	8a 30       	cpi	r24, 0x0A	; 10
    390a:	08 f0       	brcs	.+2      	; 0x390e <_Z10processKeyc+0x2d6>
    390c:	25 c2       	rjmp	.+1098   	; 0x3d58 <_Z10processKeyc+0x720>
				{
					if(digits)
    390e:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ10processKeycE6digits>
    3912:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3916:	89 2b       	or	r24, r25
    3918:	c9 f1       	breq	.+114    	; 0x398c <_Z10processKeyc+0x354>
					{
						value = value * 10 + (key - '0');
    391a:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    391e:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3922:	9c 01       	movw	r18, r24
    3924:	22 0f       	add	r18, r18
    3926:	33 1f       	adc	r19, r19
    3928:	88 0f       	add	r24, r24
    392a:	99 1f       	adc	r25, r25
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	88 0f       	add	r24, r24
    3932:	99 1f       	adc	r25, r25
    3934:	82 0f       	add	r24, r18
    3936:	93 1f       	adc	r25, r19
    3938:	21 2f       	mov	r18, r17
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	20 53       	subi	r18, 0x30	; 48
    393e:	31 09       	sbc	r19, r1
    3940:	28 0f       	add	r18, r24
    3942:	39 1f       	adc	r19, r25
    3944:	30 93 8a 04 	sts	0x048A, r19	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3948:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    394c:	27 32       	cpi	r18, 0x27	; 39
    394e:	31 05       	cpc	r19, r1
    3950:	c4 f4       	brge	.+48     	; 0x3982 <_Z10processKeyc+0x34a>
    3952:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10processKeycE12stringLength>
    3956:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    395a:	84 31       	cpi	r24, 0x14	; 20
    395c:	91 05       	cpc	r25, r1
    395e:	8c f4       	brge	.+34     	; 0x3982 <_Z10processKeyc+0x34a>
						{
							receivedString[stringLength] = keyMorse[value];
    3960:	fc 01       	movw	r30, r24
    3962:	ef 58       	subi	r30, 0x8F	; 143
    3964:	fb 4f       	sbci	r31, 0xFB	; 251
    3966:	d9 01       	movw	r26, r18
    3968:	aa 5b       	subi	r26, 0xBA	; 186
    396a:	bd 4f       	sbci	r27, 0xFD	; 253
    396c:	2c 91       	ld	r18, X
    396e:	20 83       	st	Z, r18
							stringLength++;
    3970:	01 96       	adiw	r24, 0x01	; 1
    3972:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3976:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    397a:	fc 01       	movw	r30, r24
    397c:	ef 58       	subi	r30, 0x8F	; 143
    397e:	fb 4f       	sbci	r31, 0xFB	; 251
    3980:	10 82       	st	Z, r1
						}

						digits = 0;
    3982:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3986:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10processKeycE6digits>
    398a:	e6 c1       	rjmp	.+972    	; 0x3d58 <_Z10processKeyc+0x720>
					}
					else
					{
						value = key - '0';
    398c:	21 2f       	mov	r18, r17
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	20 53       	subi	r18, 0x30	; 48
    3992:	31 09       	sbc	r19, r1
    3994:	30 93 8a 04 	sts	0x048A, r19	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3998:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <_ZZ10processKeycE5value>
						digits = 1;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    39a4:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE6digits>
    39a8:	d7 c1       	rjmp	.+942    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    39aa:	83 32       	cpi	r24, 0x23	; 35
    39ac:	f1 f4       	brne	.+60     	; 0x39ea <_Z10processKeyc+0x3b2>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    39ae:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    39b2:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    39b6:	86 31       	cpi	r24, 0x16	; 22
    39b8:	91 05       	cpc	r25, r1
    39ba:	90 f4       	brcc	.+36     	; 0x39e0 <_Z10processKeyc+0x3a8>
					{
						Fox_t holdFox = (Fox_t)value;
    39bc:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    39be:	ae 01       	movw	r20, r28
    39c0:	4f 5f       	subi	r20, 0xFF	; 255
    39c2:	5f 4f       	sbci	r21, 0xFF	; 255
    39c4:	60 e1       	ldi	r22, 0x10	; 16
    39c6:	8f e9       	ldi	r24, 0x9F	; 159
    39c8:	95 e0       	ldi	r25, 0x05	; 5
    39ca:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    39ce:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    39d2:	99 81       	ldd	r25, Y+1	; 0x01
    39d4:	98 17       	cp	r25, r24
    39d6:	21 f0       	breq	.+8      	; 0x39e0 <_Z10processKeyc+0x3a8>
						{
							setupForFox(&holdFox);
    39d8:	ce 01       	movw	r24, r28
    39da:	01 96       	adiw	r24, 0x01	; 1
    39dc:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
						}
					}
					state = STATE_SHUTDOWN;
    39e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39e4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    39e8:	b7 c1       	rjmp	.+878    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    39ea:	80 ed       	ldi	r24, 0xD0	; 208
    39ec:	81 0f       	add	r24, r17
    39ee:	8a 30       	cpi	r24, 0x0A	; 10
    39f0:	08 f0       	brcs	.+2      	; 0x39f4 <_Z10processKeyc+0x3bc>
    39f2:	b2 c1       	rjmp	.+868    	; 0x3d58 <_Z10processKeyc+0x720>
				{
					value *= 10;
					value += key - '0';
    39f4:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    39f8:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    39fc:	9c 01       	movw	r18, r24
    39fe:	22 0f       	add	r18, r18
    3a00:	33 1f       	adc	r19, r19
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	82 0f       	add	r24, r18
    3a10:	93 1f       	adc	r25, r19
    3a12:	21 2f       	mov	r18, r17
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	20 53       	subi	r18, 0x30	; 48
    3a18:	31 09       	sbc	r19, r1
    3a1a:	82 0f       	add	r24, r18
    3a1c:	93 1f       	adc	r25, r19
    3a1e:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3a22:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10processKeycE5value>
    3a26:	98 c1       	rjmp	.+816    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    3a28:	83 32       	cpi	r24, 0x23	; 35
    3a2a:	f9 f4       	brne	.+62     	; 0x3a6a <_Z10processKeyc+0x432>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    3a2c:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_utc_offset>
    3a30:	41 95       	neg	r20
    3a32:	61 e9       	ldi	r22, 0x91	; 145
    3a34:	75 e0       	ldi	r23, 0x05	; 5
    3a36:	81 e7       	ldi	r24, 0x71	; 113
    3a38:	94 e0       	ldi	r25, 0x04	; 4
    3a3a:	0e 94 99 14 	call	0x2932	; 0x2932 <_Z18validateTimeStringPcPma>
    3a3e:	6b 01       	movw	r12, r22
    3a40:	7c 01       	movw	r14, r24

					if(t)
    3a42:	61 15       	cp	r22, r1
    3a44:	71 05       	cpc	r23, r1
    3a46:	81 05       	cpc	r24, r1
    3a48:	91 05       	cpc	r25, r1
    3a4a:	51 f0       	breq	.+20     	; 0x3a60 <_Z10processKeyc+0x428>
					{
						rv3028_set_epoch(t);
    3a4c:	0e 94 84 25 	call	0x4b08	; 0x4b08 <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3a50:	c0 92 91 05 	sts	0x0591, r12	; 0x800591 <g_current_epoch>
    3a54:	d0 92 92 05 	sts	0x0592, r13	; 0x800592 <g_current_epoch+0x1>
    3a58:	e0 92 93 05 	sts	0x0593, r14	; 0x800593 <g_current_epoch+0x2>
    3a5c:	f0 92 94 05 	sts	0x0594, r15	; 0x800594 <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    3a60:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a64:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3a68:	77 c1       	rjmp	.+750    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    3a6a:	80 ed       	ldi	r24, 0xD0	; 208
    3a6c:	81 0f       	add	r24, r17
    3a6e:	8a 30       	cpi	r24, 0x0A	; 10
    3a70:	08 f0       	brcs	.+2      	; 0x3a74 <_Z10processKeyc+0x43c>
    3a72:	72 c1       	rjmp	.+740    	; 0x3d58 <_Z10processKeyc+0x720>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3a74:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10processKeycE12stringLength>
    3a78:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3a7c:	88 32       	cpi	r24, 0x28	; 40
    3a7e:	91 05       	cpc	r25, r1
    3a80:	0c f0       	brlt	.+2      	; 0x3a84 <_Z10processKeyc+0x44c>
    3a82:	6a c1       	rjmp	.+724    	; 0x3d58 <_Z10processKeyc+0x720>
					{
						receivedString[stringLength] = key;
    3a84:	fc 01       	movw	r30, r24
    3a86:	ef 58       	subi	r30, 0x8F	; 143
    3a88:	fb 4f       	sbci	r31, 0xFB	; 251
    3a8a:	10 83       	st	Z, r17
						stringLength++;
    3a8c:	01 96       	adiw	r24, 0x01	; 1
    3a8e:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3a92:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3a96:	fc 01       	movw	r30, r24
    3a98:	ef 58       	subi	r30, 0x8F	; 143
    3a9a:	fb 4f       	sbci	r31, 0xFB	; 251
    3a9c:	10 82       	st	Z, r1
    3a9e:	5c c1       	rjmp	.+696    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    3aa0:	83 32       	cpi	r24, 0x23	; 35
    3aa2:	31 f5       	brne	.+76     	; 0x3af0 <_Z10processKeyc+0x4b8>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3aa4:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_utc_offset>
    3aa8:	41 95       	neg	r20
    3aaa:	6d e8       	ldi	r22, 0x8D	; 141
    3aac:	75 e0       	ldi	r23, 0x05	; 5
    3aae:	81 e7       	ldi	r24, 0x71	; 113
    3ab0:	94 e0       	ldi	r25, 0x04	; 4
    3ab2:	0e 94 99 14 	call	0x2932	; 0x2932 <_Z18validateTimeStringPcPma>

					if(s)
    3ab6:	61 15       	cp	r22, r1
    3ab8:	71 05       	cpc	r23, r1
    3aba:	81 05       	cpc	r24, r1
    3abc:	91 05       	cpc	r25, r1
    3abe:	99 f0       	breq	.+38     	; 0x3ae6 <_Z10processKeyc+0x4ae>
					{
						g_event_start_epoch = s;
    3ac0:	60 93 8d 05 	sts	0x058D, r22	; 0x80058d <g_event_start_epoch>
    3ac4:	70 93 8e 05 	sts	0x058E, r23	; 0x80058e <g_event_start_epoch+0x1>
    3ac8:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_event_start_epoch+0x2>
    3acc:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3ad0:	4d e8       	ldi	r20, 0x8D	; 141
    3ad2:	55 e0       	ldi	r21, 0x05	; 5
    3ad4:	65 e1       	ldi	r22, 0x15	; 21
    3ad6:	8f e9       	ldi	r24, 0x9F	; 159
    3ad8:	95 e0       	ldi	r25, 0x05	; 5
    3ada:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL);
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
					}

					state = STATE_SHUTDOWN;
    3ae6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3aea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3aee:	34 c1       	rjmp	.+616    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    3af0:	80 ed       	ldi	r24, 0xD0	; 208
    3af2:	81 0f       	add	r24, r17
    3af4:	8a 30       	cpi	r24, 0x0A	; 10
    3af6:	08 f0       	brcs	.+2      	; 0x3afa <_Z10processKeyc+0x4c2>
    3af8:	2f c1       	rjmp	.+606    	; 0x3d58 <_Z10processKeyc+0x720>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3afa:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10processKeycE12stringLength>
    3afe:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3b02:	88 32       	cpi	r24, 0x28	; 40
    3b04:	91 05       	cpc	r25, r1
    3b06:	0c f0       	brlt	.+2      	; 0x3b0a <_Z10processKeyc+0x4d2>
    3b08:	27 c1       	rjmp	.+590    	; 0x3d58 <_Z10processKeyc+0x720>
					{
						receivedString[stringLength] = key;
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	ef 58       	subi	r30, 0x8F	; 143
    3b0e:	fb 4f       	sbci	r31, 0xFB	; 251
    3b10:	10 83       	st	Z, r17
						stringLength++;
    3b12:	01 96       	adiw	r24, 0x01	; 1
    3b14:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3b18:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	ef 58       	subi	r30, 0x8F	; 143
    3b20:	fb 4f       	sbci	r31, 0xFB	; 251
    3b22:	10 82       	st	Z, r1
    3b24:	19 c1       	rjmp	.+562    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    3b26:	83 32       	cpi	r24, 0x23	; 35
    3b28:	31 f5       	brne	.+76     	; 0x3b76 <_Z10processKeyc+0x53e>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3b2a:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <g_utc_offset>
    3b2e:	41 95       	neg	r20
    3b30:	69 e8       	ldi	r22, 0x89	; 137
    3b32:	75 e0       	ldi	r23, 0x05	; 5
    3b34:	81 e7       	ldi	r24, 0x71	; 113
    3b36:	94 e0       	ldi	r25, 0x04	; 4
    3b38:	0e 94 99 14 	call	0x2932	; 0x2932 <_Z18validateTimeStringPcPma>

					if(f)
    3b3c:	61 15       	cp	r22, r1
    3b3e:	71 05       	cpc	r23, r1
    3b40:	81 05       	cpc	r24, r1
    3b42:	91 05       	cpc	r25, r1
    3b44:	99 f0       	breq	.+38     	; 0x3b6c <_Z10processKeyc+0x534>
					{
						g_event_finish_epoch = f;
    3b46:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <g_event_finish_epoch>
    3b4a:	70 93 8a 05 	sts	0x058A, r23	; 0x80058a <g_event_finish_epoch+0x1>
    3b4e:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_event_finish_epoch+0x2>
    3b52:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3b56:	49 e8       	ldi	r20, 0x89	; 137
    3b58:	55 e0       	ldi	r21, 0x05	; 5
    3b5a:	66 e1       	ldi	r22, 0x16	; 22
    3b5c:	8f e9       	ldi	r24, 0x9F	; 159
    3b5e:	95 e0       	ldi	r25, 0x05	; 5
    3b60:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL);
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>
					}

					state = STATE_SHUTDOWN;
    3b6c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b70:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b74:	f1 c0       	rjmp	.+482    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    3b76:	80 ed       	ldi	r24, 0xD0	; 208
    3b78:	81 0f       	add	r24, r17
    3b7a:	8a 30       	cpi	r24, 0x0A	; 10
    3b7c:	08 f0       	brcs	.+2      	; 0x3b80 <_Z10processKeyc+0x548>
    3b7e:	ec c0       	rjmp	.+472    	; 0x3d58 <_Z10processKeyc+0x720>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3b80:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ10processKeycE12stringLength>
    3b84:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3b88:	88 32       	cpi	r24, 0x28	; 40
    3b8a:	91 05       	cpc	r25, r1
    3b8c:	0c f0       	brlt	.+2      	; 0x3b90 <_Z10processKeyc+0x558>
    3b8e:	e4 c0       	rjmp	.+456    	; 0x3d58 <_Z10processKeyc+0x720>
					{
						receivedString[stringLength] = key;
    3b90:	fc 01       	movw	r30, r24
    3b92:	ef 58       	subi	r30, 0x8F	; 143
    3b94:	fb 4f       	sbci	r31, 0xFB	; 251
    3b96:	10 83       	st	Z, r17
						stringLength++;
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ10processKeycE12stringLength+0x1>
    3b9e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	ef 58       	subi	r30, 0x8F	; 143
    3ba6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ba8:	10 82       	st	Z, r1
    3baa:	d6 c0       	rjmp	.+428    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    3bac:	83 32       	cpi	r24, 0x23	; 35
    3bae:	e9 f4       	brne	.+58     	; 0x3bea <_Z10processKeyc+0x5b2>
				{
					if((value >= 0) && (value < 24))
    3bb0:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    3bb4:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3bb8:	88 31       	cpi	r24, 0x18	; 24
    3bba:	91 05       	cpc	r25, r1
    3bbc:	88 f4       	brcc	.+34     	; 0x3be0 <_Z10processKeyc+0x5a8>
					{
						int8_t hold = value * digits;
    3bbe:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZZ10processKeycE6digits>
    3bc2:	98 9f       	mul	r25, r24
    3bc4:	80 2d       	mov	r24, r0
    3bc6:	11 24       	eor	r1, r1
    3bc8:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    3bca:	ae 01       	movw	r20, r28
    3bcc:	4f 5f       	subi	r20, 0xFF	; 255
    3bce:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd0:	67 e1       	ldi	r22, 0x17	; 23
    3bd2:	8f e9       	ldi	r24, 0x9F	; 159
    3bd4:	95 e0       	ldi	r25, 0x05	; 5
    3bd6:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    3be0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3be4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3be8:	b7 c0       	rjmp	.+366    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    3bea:	80 ed       	ldi	r24, 0xD0	; 208
    3bec:	81 0f       	add	r24, r17
    3bee:	8a 30       	cpi	r24, 0x0A	; 10
    3bf0:	d0 f4       	brcc	.+52     	; 0x3c26 <_Z10processKeyc+0x5ee>
				{
					value *= 10;
					value += key - '0';
    3bf2:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    3bf6:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3bfa:	9c 01       	movw	r18, r24
    3bfc:	22 0f       	add	r18, r18
    3bfe:	33 1f       	adc	r19, r19
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	82 0f       	add	r24, r18
    3c0e:	93 1f       	adc	r25, r19
    3c10:	21 2f       	mov	r18, r17
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	20 53       	subi	r18, 0x30	; 48
    3c16:	31 09       	sbc	r19, r1
    3c18:	82 0f       	add	r24, r18
    3c1a:	93 1f       	adc	r25, r19
    3c1c:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3c20:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10processKeycE5value>
    3c24:	99 c0       	rjmp	.+306    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if(key == 'B')
    3c26:	12 34       	cpi	r17, 0x42	; 66
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <_Z10processKeyc+0x5f4>
    3c2a:	96 c0       	rjmp	.+300    	; 0x3d58 <_Z10processKeyc+0x720>
				{
					digits = -1;
    3c2c:	8f ef       	ldi	r24, 0xFF	; 255
    3c2e:	9f ef       	ldi	r25, 0xFF	; 255
    3c30:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3c34:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ10processKeycE6digits>
    3c38:	8f c0       	rjmp	.+286    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    3c3a:	83 32       	cpi	r24, 0x23	; 35
    3c3c:	a1 f4       	brne	.+40     	; 0x3c66 <_Z10processKeyc+0x62e>
				{
					g_AM_audio_frequency = value;
    3c3e:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    3c42:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    3c46:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_AM_audio_frequency>
    3c4a:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3c4e:	46 e8       	ldi	r20, 0x86	; 134
    3c50:	55 e0       	ldi	r21, 0x05	; 5
    3c52:	61 e1       	ldi	r22, 0x11	; 17
    3c54:	8f e9       	ldi	r24, 0x9F	; 159
    3c56:	95 e0       	ldi	r25, 0x05	; 5
    3c58:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    3c5c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c60:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3c64:	79 c0       	rjmp	.+242    	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '1') && (key <= '6'))
    3c66:	8f ec       	ldi	r24, 0xCF	; 207
    3c68:	81 0f       	add	r24, r17
    3c6a:	86 30       	cpi	r24, 0x06	; 6
    3c6c:	08 f0       	brcs	.+2      	; 0x3c70 <_Z10processKeyc+0x638>
    3c6e:	74 c0       	rjmp	.+232    	; 0x3d58 <_Z10processKeyc+0x720>
				{
					value = key - '0';
    3c70:	21 2f       	mov	r18, r17
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	20 53       	subi	r18, 0x30	; 48
    3c76:	31 09       	sbc	r19, r1
    3c78:	30 93 8a 04 	sts	0x048A, r19	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3c7c:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <_ZZ10processKeycE5value>
    3c80:	6b c0       	rjmp	.+214    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    3c82:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <_ZZ10processKeycE6digits>
    3c86:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3c8a:	a9 01       	movw	r20, r18
    3c8c:	4f 5f       	subi	r20, 0xFF	; 255
    3c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c90:	50 93 88 04 	sts	0x0488, r21	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3c94:	40 93 87 04 	sts	0x0487, r20	; 0x800487 <_ZZ10processKeycE6digits>
    3c98:	f9 01       	movw	r30, r18
    3c9a:	e6 5b       	subi	r30, 0xB6	; 182
    3c9c:	fa 4f       	sbci	r31, 0xFA	; 250
    3c9e:	90 81       	ld	r25, Z
    3ca0:	89 13       	cpse	r24, r25
    3ca2:	12 c0       	rjmp	.+36     	; 0x3cc8 <_Z10processKeyc+0x690>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    3ca4:	ea e4       	ldi	r30, 0x4A	; 74
    3ca6:	f5 e0       	ldi	r31, 0x05	; 5
    3ca8:	01 90       	ld	r0, Z+
    3caa:	00 20       	and	r0, r0
    3cac:	e9 f7       	brne	.-6      	; 0x3ca8 <_Z10processKeyc+0x670>
    3cae:	31 97       	sbiw	r30, 0x01	; 1
    3cb0:	ea 54       	subi	r30, 0x4A	; 74
    3cb2:	f5 40       	sbci	r31, 0x05	; 5
    3cb4:	e4 17       	cp	r30, r20
    3cb6:	f5 07       	cpc	r31, r21
    3cb8:	09 f0       	breq	.+2      	; 0x3cbc <_Z10processKeyc+0x684>
    3cba:	4e c0       	rjmp	.+156    	; 0x3d58 <_Z10processKeyc+0x720>
					{
						g_DTMF_unlocked = TRUE;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    3cc2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ10processKeycE18setPasswordEnabled>
    3cc6:	48 c0       	rjmp	.+144    	; 0x3d58 <_Z10processKeyc+0x720>
					}
				}
				else
				{
					digits = 0;
    3cc8:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ10processKeycE6digits+0x1>
    3ccc:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    3cd0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3cd4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <_Z10processKeyc+0x720>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    3cda:	83 32       	cpi	r24, 0x23	; 35
    3cdc:	01 f5       	brne	.+64     	; 0x3d1e <_Z10processKeyc+0x6e6>
				{
					if(value == 0)
    3cde:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    3ce2:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	41 f4       	brne	.+16     	; 0x3cfa <_Z10processKeyc+0x6c2>
					{
						setAtten(0);
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	0e 94 92 04 	call	0x924	; 0x924 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_sendAMmodulationConstantly>
    3cf8:	0d c0       	rjmp	.+26     	; 0x3d14 <_Z10processKeyc+0x6dc>
					}
					else if(value > 315)
    3cfa:	8c 33       	cpi	r24, 0x3C	; 60
    3cfc:	21 e0       	ldi	r18, 0x01	; 1
    3cfe:	92 07       	cpc	r25, r18
    3d00:	3c f0       	brlt	.+14     	; 0x3d10 <_Z10processKeyc+0x6d8>
					{
						g_sendAMmodulationConstantly = FALSE;
    3d02:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    3d06:	8b e3       	ldi	r24, 0x3B	; 59
    3d08:	91 e0       	ldi	r25, 0x01	; 1
    3d0a:	0e 94 92 04 	call	0x924	; 0x924 <_Z8setAttenj>
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <_Z10processKeyc+0x6dc>
					}
					else
					{
						setAtten(value);
    3d10:	0e 94 92 04 	call	0x924	; 0x924 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    3d14:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3d18:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3d1c:	1d c0       	rjmp	.+58     	; 0x3d58 <_Z10processKeyc+0x720>
				}
				else if((key >= '0') && (key <= '9'))
    3d1e:	80 ed       	ldi	r24, 0xD0	; 208
    3d20:	81 0f       	add	r24, r17
    3d22:	8a 30       	cpi	r24, 0x0A	; 10
    3d24:	c8 f4       	brcc	.+50     	; 0x3d58 <_Z10processKeyc+0x720>
				{
					value *= 10;
					value += key - '0';
    3d26:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <_ZZ10processKeycE5value>
    3d2a:	30 91 8a 04 	lds	r19, 0x048A	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3d2e:	c9 01       	movw	r24, r18
    3d30:	88 0f       	add	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	22 0f       	add	r18, r18
    3d36:	33 1f       	adc	r19, r19
    3d38:	22 0f       	add	r18, r18
    3d3a:	33 1f       	adc	r19, r19
    3d3c:	22 0f       	add	r18, r18
    3d3e:	33 1f       	adc	r19, r19
    3d40:	82 0f       	add	r24, r18
    3d42:	93 1f       	adc	r25, r19
    3d44:	21 2f       	mov	r18, r17
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	20 53       	subi	r18, 0x30	; 48
    3d4a:	31 09       	sbc	r19, r1
    3d4c:	82 0f       	add	r24, r18
    3d4e:	93 1f       	adc	r25, r19
    3d50:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <_ZZ10processKeycE5value+0x1>
    3d54:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    3d58:	0f 90       	pop	r0
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	1f 91       	pop	r17
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	df 90       	pop	r13
    3d66:	cf 90       	pop	r12
    3d68:	08 95       	ret

00003d6a <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    3d6a:	2f 92       	push	r2
    3d6c:	3f 92       	push	r3
    3d6e:	4f 92       	push	r4
    3d70:	5f 92       	push	r5
    3d72:	6f 92       	push	r6
    3d74:	7f 92       	push	r7
    3d76:	8f 92       	push	r8
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	bf 92       	push	r11
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	1f 92       	push	r1
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    3d94:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    3d98:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <g_on_the_air>
    3d9c:	88 23       	and	r24, r24
    3d9e:	29 f0       	breq	.+10     	; 0x3daa <_Z4loopv+0x40>
    3da0:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ4loopvE7proceed>
    3da4:	88 23       	and	r24, r24
    3da6:	09 f4       	brne	.+2      	; 0x3daa <_Z4loopv+0x40>
    3da8:	d7 c0       	rjmp	.+430    	; 0x3f58 <_Z4loopv+0x1ee>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    3daa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    3dae:	81 11       	cpse	r24, r1
    3db0:	29 c1       	rjmp	.+594    	; 0x4004 <_Z4loopv+0x29a>
			{
				proceed = FALSE;
    3db2:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    3db6:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3dba:	86 30       	cpi	r24, 0x06	; 6
    3dbc:	91 f4       	brne	.+36     	; 0x3de2 <_Z4loopv+0x78>
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox_counter]);
    3dbe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_fox_counter>
    3dc2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_fox_counter+0x1>
    3dc6:	bc 01       	movw	r22, r24
    3dc8:	66 0f       	add	r22, r22
    3dca:	77 1f       	adc	r23, r23
    3dcc:	66 0f       	add	r22, r22
    3dce:	77 1f       	adc	r23, r23
    3dd0:	68 0f       	add	r22, r24
    3dd2:	79 1f       	adc	r23, r25
    3dd4:	63 56       	subi	r22, 0x63	; 99
    3dd6:	7d 4f       	sbci	r23, 0xFD	; 253
    3dd8:	8d e1       	ldi	r24, 0x1D	; 29
    3dda:	95 e0       	ldi	r25, 0x05	; 5
    3ddc:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
    3de0:	27 c0       	rjmp	.+78     	; 0x3e30 <_Z4loopv+0xc6>
				}
				else if(g_fox == SPRINT_DEMO)
    3de2:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3de6:	83 31       	cpi	r24, 0x13	; 19
    3de8:	99 f4       	brne	.+38     	; 0x3e10 <_Z4loopv+0xa6>
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox_counter + 8]);
    3dea:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_fox_counter>
    3dee:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_fox_counter+0x1>
    3df2:	08 96       	adiw	r24, 0x08	; 8
    3df4:	bc 01       	movw	r22, r24
    3df6:	66 0f       	add	r22, r22
    3df8:	77 1f       	adc	r23, r23
    3dfa:	66 0f       	add	r22, r22
    3dfc:	77 1f       	adc	r23, r23
    3dfe:	68 0f       	add	r22, r24
    3e00:	79 1f       	adc	r23, r25
    3e02:	63 56       	subi	r22, 0x63	; 99
    3e04:	7d 4f       	sbci	r23, 0xFD	; 253
    3e06:	8d e1       	ldi	r24, 0x1D	; 29
    3e08:	95 e0       	ldi	r25, 0x05	; 5
    3e0a:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
    3e0e:	10 c0       	rjmp	.+32     	; 0x3e30 <_Z4loopv+0xc6>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox]);
    3e10:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	bc 01       	movw	r22, r24
    3e18:	66 0f       	add	r22, r22
    3e1a:	77 1f       	adc	r23, r23
    3e1c:	66 0f       	add	r22, r22
    3e1e:	77 1f       	adc	r23, r23
    3e20:	68 0f       	add	r22, r24
    3e22:	79 1f       	adc	r23, r25
    3e24:	63 56       	subi	r22, 0x63	; 99
    3e26:	7d 4f       	sbci	r23, 0xFD	; 253
    3e28:	8d e1       	ldi	r24, 0x1D	; 29
    3e2a:	95 e0       	ldi	r25, 0x05	; 5
    3e2c:	0e 94 88 2c 	call	0x5910	; 0x5910 <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    3e30:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3e34:	86 30       	cpi	r24, 0x06	; 6
    3e36:	09 f1       	breq	.+66     	; 0x3e7a <_Z4loopv+0x110>
    3e38:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3e3c:	83 31       	cpi	r24, 0x13	; 19
    3e3e:	e9 f0       	breq	.+58     	; 0x3e7a <_Z4loopv+0x110>
    3e40:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3e44:	88 23       	and	r24, r24
    3e46:	c9 f0       	breq	.+50     	; 0x3e7a <_Z4loopv+0x110>
    3e48:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3e4c:	87 30       	cpi	r24, 0x07	; 7
    3e4e:	a9 f0       	breq	.+42     	; 0x3e7a <_Z4loopv+0x110>
    3e50:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3e54:	88 30       	cpi	r24, 0x08	; 8
    3e56:	89 f0       	breq	.+34     	; 0x3e7a <_Z4loopv+0x110>
    3e58:	20 91 9a 05 	lds	r18, 0x059A	; 0x80059a <g_fox>
    3e5c:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_fox_counter>
    3e60:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_fox_counter+0x1>
    3e64:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox_id_offset>
    3e68:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_fox_id_offset+0x1>
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	84 0f       	add	r24, r20
    3e70:	95 1f       	adc	r25, r21
    3e72:	28 17       	cp	r18, r24
    3e74:	39 07       	cpc	r19, r25
    3e76:	09 f0       	breq	.+2      	; 0x3e7a <_Z4loopv+0x110>
    3e78:	c5 c0       	rjmp	.+394    	; 0x4004 <_Z4loopv+0x29a>
				{
					BOOL repeat = TRUE;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    3e7e:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <g_pattern_codespeed>
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	82 e8       	ldi	r24, 0x82	; 130
    3e86:	9b e1       	ldi	r25, 0x1B	; 27
    3e88:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	6a e0       	ldi	r22, 0x0A	; 10
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    3e96:	66 0f       	add	r22, r22
    3e98:	77 1f       	adc	r23, r23
    3e9a:	70 93 98 05 	sts	0x0598, r23	; 0x800598 <g_code_throttle+0x1>
    3e9e:	60 93 97 05 	sts	0x0597, r22	; 0x800597 <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	be 01       	movw	r22, r28
    3ea8:	6f 5f       	subi	r22, 0xFF	; 255
    3eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    3eac:	8d e1       	ldi	r24, 0x1D	; 29
    3eae:	95 e0       	ldi	r25, 0x05	; 5
    3eb0:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    3eb4:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <g_time_to_ID>
    3eb8:	81 11       	cpse	r24, r1
    3eba:	0b c0       	rjmp	.+22     	; 0x3ed2 <_Z4loopv+0x168>
    3ebc:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_id_interval>
    3ec0:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <g_id_interval+0x1>
    3ec4:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_on_air_interval>
    3ec8:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <g_on_air_interval+0x1>
    3ecc:	82 17       	cp	r24, r18
    3ece:	93 07       	cpc	r25, r19
    3ed0:	3c f1       	brlt	.+78     	; 0x3f20 <_Z4loopv+0x1b6>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3ed2:	00 91 63 05 	lds	r16, 0x0563	; 0x800563 <g_on_air_interval>
    3ed6:	10 91 64 05 	lds	r17, 0x0564	; 0x800564 <g_on_air_interval+0x1>
    3eda:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    3ede:	70 e0       	ldi	r23, 0x00	; 0
    3ee0:	82 e3       	ldi	r24, 0x32	; 50
    3ee2:	95 e0       	ldi	r25, 0x05	; 5
    3ee4:	0e 94 38 25 	call	0x4a70	; 0x4a70 <_Z26timeRequiredToSendStrAtWPMPcj>
    3ee8:	8c 50       	subi	r24, 0x0C	; 12
    3eea:	9e 4f       	sbci	r25, 0xFE	; 254
    3eec:	9c 01       	movw	r18, r24
    3eee:	36 95       	lsr	r19
    3ef0:	27 95       	ror	r18
    3ef2:	36 95       	lsr	r19
    3ef4:	27 95       	ror	r18
    3ef6:	36 95       	lsr	r19
    3ef8:	27 95       	ror	r18
    3efa:	a5 ec       	ldi	r26, 0xC5	; 197
    3efc:	b0 e2       	ldi	r27, 0x20	; 32
    3efe:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>
    3f02:	92 95       	swap	r25
    3f04:	82 95       	swap	r24
    3f06:	8f 70       	andi	r24, 0x0F	; 15
    3f08:	89 27       	eor	r24, r25
    3f0a:	9f 70       	andi	r25, 0x0F	; 15
    3f0c:	89 27       	eor	r24, r25
    3f0e:	08 1b       	sub	r16, r24
    3f10:	19 0b       	sbc	r17, r25
    3f12:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3f16:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    3f1a:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_time_to_ID>
    3f1e:	0a c0       	rjmp	.+20     	; 0x3f34 <_Z4loopv+0x1ca>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    3f20:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <g_on_air_interval>
    3f24:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <g_on_air_interval+0x1>
    3f28:	8d 59       	subi	r24, 0x9D	; 157
    3f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3f30:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    3f34:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <g_on_the_air>
					g_callsign_sent = FALSE;
    3f3e:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <g_callsign_sent>
					g_fox_transition = FALSE;
    3f42:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    3f46:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_fox_counter>
    3f4a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_fox_counter+0x1>
    3f4e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_fox_tone_offset+0x1>
    3f52:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_fox_tone_offset>
    3f56:	56 c0       	rjmp	.+172    	; 0x4004 <_Z4loopv+0x29a>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    3f58:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    3f5c:	81 11       	cpse	r24, r1
    3f5e:	f4 c1       	rjmp	.+1000   	; 0x4348 <_Z4loopv+0x5de>
    3f60:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <g_fox_seconds_into_interval>
    3f64:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <g_fox_seconds_into_interval+0x1>
    3f68:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    3f6c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3f70:	28 17       	cp	r18, r24
    3f72:	39 07       	cpc	r19, r25
    3f74:	09 f0       	breq	.+2      	; 0x3f78 <_Z4loopv+0x20e>
    3f76:	e8 c1       	rjmp	.+976    	; 0x4348 <_Z4loopv+0x5de>
    3f78:	c5 c1       	rjmp	.+906    	; 0x4304 <_Z4loopv+0x59a>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID], &repeat, NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3f7a:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3f7e:	84 31       	cpi	r24, 0x14	; 20
    3f80:	08 f4       	brcc	.+2      	; 0x3f84 <_Z4loopv+0x21a>
    3f82:	e8 c1       	rjmp	.+976    	; 0x4354 <_Z4loopv+0x5ea>
    3f84:	07 c0       	rjmp	.+14     	; 0x3f94 <_Z4loopv+0x22a>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    3f86:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_fox_transition>
					g_on_the_air = FALSE;
    3f8a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
					proceed = TRUE;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    3f94:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3f98:	86 30       	cpi	r24, 0x06	; 6
    3f9a:	21 f0       	breq	.+8      	; 0x3fa4 <_Z4loopv+0x23a>
    3f9c:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3fa0:	83 31       	cpi	r24, 0x13	; 19
    3fa2:	49 f4       	brne	.+18     	; 0x3fb6 <_Z4loopv+0x24c>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    3fa4:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <g_callsign_sent>
    3fa8:	88 23       	and	r24, r24
    3faa:	61 f1       	breq	.+88     	; 0x4004 <_Z4loopv+0x29a>
    3fac:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_fox_transition>
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	d5 c1       	rjmp	.+938    	; 0x435e <_Z4loopv+0x5f4>
    3fb4:	27 c0       	rjmp	.+78     	; 0x4004 <_Z4loopv+0x29a>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    3fb6:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3fba:	88 23       	and	r24, r24
    3fbc:	41 f0       	breq	.+16     	; 0x3fce <_Z4loopv+0x264>
    3fbe:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3fc2:	87 30       	cpi	r24, 0x07	; 7
    3fc4:	21 f0       	breq	.+8      	; 0x3fce <_Z4loopv+0x264>
    3fc6:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3fca:	88 30       	cpi	r24, 0x08	; 8
    3fcc:	41 f4       	brne	.+16     	; 0x3fde <_Z4loopv+0x274>
			{
				if(g_callsign_sent)
    3fce:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <g_callsign_sent>
    3fd2:	88 23       	and	r24, r24
    3fd4:	b9 f0       	breq	.+46     	; 0x4004 <_Z4loopv+0x29a>
				{
					proceed = TRUE;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ4loopvE7proceed>
    3fdc:	13 c0       	rjmp	.+38     	; 0x4004 <_Z4loopv+0x29a>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    3fde:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3fe2:	89 30       	cpi	r24, 0x09	; 9
    3fe4:	08 f4       	brcc	.+2      	; 0x3fe8 <_Z4loopv+0x27e>
    3fe6:	c2 c1       	rjmp	.+900    	; 0x436c <_Z4loopv+0x602>
    3fe8:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    3fec:	83 31       	cpi	r24, 0x13	; 19
    3fee:	08 f0       	brcs	.+2      	; 0x3ff2 <_Z4loopv+0x288>
    3ff0:	bd c1       	rjmp	.+890    	; 0x436c <_Z4loopv+0x602>
    3ff2:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <g_callsign_sent>
    3ff6:	81 11       	cpse	r24, r1
    3ff8:	b6 c1       	rjmp	.+876    	; 0x4366 <_Z4loopv+0x5fc>
    3ffa:	b8 c1       	rjmp	.+880    	; 0x436c <_Z4loopv+0x602>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3ffc:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <g_callsign_sent>
    4000:	81 11       	cpse	r24, r1
    4002:	c0 c1       	rjmp	.+896    	; 0x4384 <_Z4loopv+0x61a>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    4004:	8e e0       	ldi	r24, 0x0E	; 14
    4006:	95 e0       	ldi	r25, 0x05	; 5
    4008:	0e 94 35 06 	call	0xc6a	; 0xc6a <_ZN8Goertzel12SamplesReadyEv>
    400c:	88 23       	and	r24, r24
    400e:	09 f4       	brne	.+2      	; 0x4012 <_Z4loopv+0x2a8>
    4010:	1d c1       	rjmp	.+570    	; 0x424c <_Z4loopv+0x4e2>
			static char lastKey = '\0';
			static int checkCount = 10;   /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4012:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_temperature_check_countdown>
    4016:	81 11       	cpse	r24, r1
    4018:	b8 c1       	rjmp	.+880    	; 0x438a <_Z4loopv+0x620>
			{

				setUpTemp();
    401a:	0e 94 66 11 	call	0x22cc	; 0x22cc <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    401e:	0e 94 76 11 	call	0x22ec	; 0x22ec <_Z7getTempv>
    4022:	0e 94 46 28 	call	0x508c	; 0x508c <__fixsfsi>
				if(temp != g_temperature)
    4026:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_temperature>
    402a:	68 17       	cp	r22, r24
    402c:	e1 f0       	breq	.+56     	; 0x4066 <_Z4loopv+0x2fc>
				{
					g_temperature = temp;
    402e:	60 93 49 05 	sts	0x0549, r22	; 0x800549 <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    4032:	6a 31       	cpi	r22, 0x1A	; 26
    4034:	14 f0       	brlt	.+4      	; 0x403a <_Z4loopv+0x2d0>
    4036:	69 51       	subi	r22, 0x19	; 25
    4038:	03 c0       	rjmp	.+6      	; 0x4040 <_Z4loopv+0x2d6>
    403a:	89 e1       	ldi	r24, 0x19	; 25
    403c:	86 1b       	sub	r24, r22
    403e:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    4040:	06 2e       	mov	r0, r22
    4042:	00 0c       	add	r0, r0
    4044:	77 0b       	sbc	r23, r23
    4046:	8f e9       	ldi	r24, 0x9F	; 159
    4048:	95 e0       	ldi	r25, 0x05	; 5
    404a:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    404e:	20 91 18 05 	lds	r18, 0x0518	; 0x800518 <g_rv3028_offset>
    4052:	30 91 19 05 	lds	r19, 0x0519	; 0x800519 <g_rv3028_offset+0x1>
    4056:	a9 01       	movw	r20, r18
    4058:	48 0f       	add	r20, r24
    405a:	51 1d       	adc	r21, r1
    405c:	87 fd       	sbrc	r24, 7
    405e:	5a 95       	dec	r21
    4060:	ca 01       	movw	r24, r20
    4062:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	0e 94 ce 11 	call	0x239c	; 0x239c <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    406c:	8c e3       	ldi	r24, 0x3C	; 60
    406e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_temperature_check_countdown>
    4072:	8b c1       	rjmp	.+790    	; 0x438a <_Z4loopv+0x620>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4074:	f5 01       	movw	r30, r10
    4076:	41 91       	ld	r20, Z+
    4078:	51 91       	ld	r21, Z+
    407a:	61 91       	ld	r22, Z+
    407c:	71 91       	ld	r23, Z+
    407e:	5f 01       	movw	r10, r30
    4080:	8e e0       	ldi	r24, 0x0E	; 14
    4082:	95 e0       	ldi	r25, 0x05	; 5
    4084:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    4088:	8e e0       	ldi	r24, 0x0E	; 14
    408a:	95 e0       	ldi	r25, 0x05	; 5
    408c:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN8Goertzel10Magnitude2Ev>
    4090:	e6 2e       	mov	r14, r22
    4092:	f7 2e       	mov	r15, r23
    4094:	d8 2e       	mov	r13, r24
    4096:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    4098:	27 2d       	mov	r18, r7
    409a:	36 2d       	mov	r19, r6
    409c:	45 2d       	mov	r20, r5
    409e:	54 2d       	mov	r21, r4
    40a0:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    40a4:	18 16       	cp	r1, r24
    40a6:	b4 f4       	brge	.+44     	; 0x40d4 <_Z4loopv+0x36a>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	34 e2       	ldi	r19, 0x24	; 36
    40ac:	44 e7       	ldi	r20, 0x74	; 116
    40ae:	59 e4       	ldi	r21, 0x49	; 73
    40b0:	6e 2d       	mov	r22, r14
    40b2:	7f 2d       	mov	r23, r15
    40b4:	8d 2d       	mov	r24, r13
    40b6:	9c 2d       	mov	r25, r12
    40b8:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    40bc:	18 16       	cp	r1, r24
    40be:	34 f4       	brge	.+12     	; 0x40cc <_Z4loopv+0x362>
    40c0:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    40c2:	7e 2c       	mov	r7, r14
    40c4:	6f 2c       	mov	r6, r15
    40c6:	5d 2c       	mov	r5, r13
    40c8:	4c 2c       	mov	r4, r12
    40ca:	04 c0       	rjmp	.+8      	; 0x40d4 <_Z4loopv+0x36a>
    40cc:	7e 2c       	mov	r7, r14
    40ce:	6f 2c       	mov	r6, r15
    40d0:	5d 2c       	mov	r5, r13
    40d2:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    40d4:	0f 5f       	subi	r16, 0xFF	; 255
    40d6:	1f 4f       	sbci	r17, 0xFF	; 255
    40d8:	04 30       	cpi	r16, 0x04	; 4
    40da:	11 05       	cpc	r17, r1
    40dc:	59 f6       	brne	.-106    	; 0x4074 <_Z4loopv+0x30a>
    40de:	65 c1       	rjmp	.+714    	; 0x43aa <_Z4loopv+0x640>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    40e0:	f5 01       	movw	r30, r10
    40e2:	41 91       	ld	r20, Z+
    40e4:	51 91       	ld	r21, Z+
    40e6:	61 91       	ld	r22, Z+
    40e8:	71 91       	ld	r23, Z+
    40ea:	5f 01       	movw	r10, r30
    40ec:	8e e0       	ldi	r24, 0x0E	; 14
    40ee:	95 e0       	ldi	r25, 0x05	; 5
    40f0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    40f4:	8e e0       	ldi	r24, 0x0E	; 14
    40f6:	95 e0       	ldi	r25, 0x05	; 5
    40f8:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN8Goertzel10Magnitude2Ev>
    40fc:	e6 2e       	mov	r14, r22
    40fe:	f7 2e       	mov	r15, r23
    4100:	d8 2e       	mov	r13, r24
    4102:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    4104:	25 2d       	mov	r18, r5
    4106:	34 2d       	mov	r19, r4
    4108:	43 2d       	mov	r20, r3
    410a:	52 2d       	mov	r21, r2
    410c:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    4110:	18 16       	cp	r1, r24
    4112:	b4 f4       	brge	.+44     	; 0x4140 <_Z4loopv+0x3d6>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	34 e2       	ldi	r19, 0x24	; 36
    4118:	44 e7       	ldi	r20, 0x74	; 116
    411a:	59 e4       	ldi	r21, 0x49	; 73
    411c:	6e 2d       	mov	r22, r14
    411e:	7f 2d       	mov	r23, r15
    4120:	8d 2d       	mov	r24, r13
    4122:	9c 2d       	mov	r25, r12
    4124:	0e 94 6d 29 	call	0x52da	; 0x52da <__gesf2>
    4128:	18 16       	cp	r1, r24
    412a:	34 f4       	brge	.+12     	; 0x4138 <_Z4loopv+0x3ce>
    412c:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    412e:	5e 2c       	mov	r5, r14
    4130:	4f 2c       	mov	r4, r15
    4132:	3d 2c       	mov	r3, r13
    4134:	2c 2c       	mov	r2, r12
    4136:	04 c0       	rjmp	.+8      	; 0x4140 <_Z4loopv+0x3d6>
    4138:	5e 2c       	mov	r5, r14
    413a:	4f 2c       	mov	r4, r15
    413c:	3d 2c       	mov	r3, r13
    413e:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    4140:	0f 5f       	subi	r16, 0xFF	; 255
    4142:	1f 4f       	sbci	r17, 0xFF	; 255
    4144:	04 30       	cpi	r16, 0x04	; 4
    4146:	11 05       	cpc	r17, r1
    4148:	59 f6       	brne	.-106    	; 0x40e0 <_Z4loopv+0x376>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    414a:	77 20       	and	r7, r7
    414c:	0c f4       	brge	.+2      	; 0x4150 <_Z4loopv+0x3e6>
    414e:	76 c0       	rjmp	.+236    	; 0x423c <_Z4loopv+0x4d2>
				{
					char newKey = key[4 * y + x];
    4150:	c4 01       	movw	r24, r8
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	88 0f       	add	r24, r24
    4158:	99 1f       	adc	r25, r25
    415a:	83 59       	subi	r24, 0x93	; 147
    415c:	9d 4f       	sbci	r25, 0xFD	; 253
    415e:	fc 01       	movw	r30, r24
    4160:	e6 0d       	add	r30, r6
    4162:	f7 1d       	adc	r31, r7
    4164:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    4166:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <_ZZ4loopvE7lastKey>
    416a:	18 13       	cpse	r17, r24
    416c:	17 c0       	rjmp	.+46     	; 0x419c <_Z4loopv+0x432>
					{
						checkCount++;
    416e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    4172:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4176:	01 96       	adiw	r24, 0x01	; 1
    4178:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    417c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    4180:	03 97       	sbiw	r24, 0x03	; 3
    4182:	61 f4       	brne	.+24     	; 0x419c <_Z4loopv+0x432>
						{
							g_dtmf_detected = TRUE;
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_dtmf_detected>
							quietCount = 0;
    418a:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <_ZZ4loopvE10quietCount+0x1>
    418e:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    4192:	10 93 17 05 	sts	0x0517, r17	; 0x800517 <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    4196:	81 2f       	mov	r24, r17
    4198:	0e 94 1c 1b 	call	0x3638	; 0x3638 <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    419c:	10 93 8f 04 	sts	0x048F, r17	; 0x80048f <_ZZ4loopvE7lastKey>
    41a0:	4d c0       	rjmp	.+154    	; 0x423c <_Z4loopv+0x4d2>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    41a2:	c0 90 0f 05 	lds	r12, 0x050F	; 0x80050f <g_tick_count>
    41a6:	d0 90 10 05 	lds	r13, 0x0510	; 0x800510 <g_tick_count+0x1>
    41aa:	e0 90 11 05 	lds	r14, 0x0511	; 0x800511 <g_tick_count+0x2>
    41ae:	f0 90 12 05 	lds	r15, 0x0512	; 0x800512 <g_tick_count+0x3>
    41b2:	80 90 13 05 	lds	r8, 0x0513	; 0x800513 <g_last>
    41b6:	90 90 14 05 	lds	r9, 0x0514	; 0x800514 <g_last+0x1>
    41ba:	a0 90 15 05 	lds	r10, 0x0515	; 0x800515 <g_last+0x2>
    41be:	b0 90 16 05 	lds	r11, 0x0516	; 0x800516 <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    41c2:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZZ4loopvE10quietCount>
    41c6:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <_ZZ4loopvE10quietCount+0x1>
    41ca:	9c 01       	movw	r18, r24
    41cc:	2f 5f       	subi	r18, 0xFF	; 255
    41ce:	3f 4f       	sbci	r19, 0xFF	; 255
    41d0:	30 93 8e 04 	sts	0x048E, r19	; 0x80048e <_ZZ4loopvE10quietCount+0x1>
    41d4:	20 93 8d 04 	sts	0x048D, r18	; 0x80048d <_ZZ4loopvE10quietCount>
    41d8:	03 97       	sbiw	r24, 0x03	; 3
    41da:	84 f1       	brlt	.+96     	; 0x423c <_Z4loopv+0x4d2>
				{
					g_dtmf_detected = FALSE;
    41dc:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    41e0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_transmissions_disabled>
    41e4:	88 23       	and	r24, r24
    41e6:	29 f0       	breq	.+10     	; 0x41f2 <_Z4loopv+0x488>
    41e8:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <g_LED_enunciating>
    41ec:	88 23       	and	r24, r24
    41ee:	09 f4       	brne	.+2      	; 0x41f2 <_Z4loopv+0x488>
    41f0:	ef c0       	rjmp	.+478    	; 0x43d0 <_Z4loopv+0x666>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    41f2:	c8 18       	sub	r12, r8
    41f4:	d9 08       	sbc	r13, r9
    41f6:	ea 08       	sbc	r14, r10
    41f8:	fb 08       	sbc	r15, r11
    41fa:	fc ed       	ldi	r31, 0xDC	; 220
    41fc:	cf 16       	cp	r12, r31
    41fe:	f5 e0       	ldi	r31, 0x05	; 5
    4200:	df 06       	cpc	r13, r31
    4202:	e1 04       	cpc	r14, r1
    4204:	f1 04       	cpc	r15, r1
    4206:	20 f4       	brcc	.+8      	; 0x4210 <_Z4loopv+0x4a6>
					{
						checkCount = 0;
    4208:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    420c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    4210:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <_ZZ4loopvE10quietCount+0x1>
    4214:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4218:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_tick_count>
    421c:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <g_tick_count+0x1>
    4220:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <g_tick_count+0x2>
    4224:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <g_tick_count+0x3>
    4228:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <g_last>
    422c:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <g_last+0x1>
    4230:	a0 93 15 05 	sts	0x0515, r26	; 0x800515 <g_last+0x2>
    4234:	b0 93 16 05 	sts	0x0516, r27	; 0x800516 <g_last+0x3>
					lastKey = '\0';
    4238:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    423c:	ea e7       	ldi	r30, 0x7A	; 122
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 81       	ld	r24, Z
    4242:	88 60       	ori	r24, 0x08	; 8
    4244:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    4246:	80 81       	ld	r24, Z
    4248:	80 64       	ori	r24, 0x40	; 64
    424a:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(g_dtmf_detected)
    424c:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_dtmf_detected>
    4250:	88 23       	and	r24, r24
    4252:	b1 f0       	breq	.+44     	; 0x4280 <_Z4loopv+0x516>
	{
		BOOL repeat = FALSE;
    4254:	19 82       	std	Y+1, r1	; 0x01
		makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	be 01       	movw	r22, r28
    425c:	6f 5f       	subi	r22, 0xFF	; 255
    425e:	7f 4f       	sbci	r23, 0xFF	; 255
    4260:	8c e0       	ldi	r24, 0x0C	; 12
    4262:	92 e0       	ldi	r25, 0x02	; 2
    4264:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>
		g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4268:	8c e8       	ldi	r24, 0x8C	; 140
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <g_code_throttle+0x1>
    4270:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_code_throttle>
		g_LED_enunciating = TRUE;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <g_LED_enunciating>
		g_config_error = JUST_STARTED_UP;
    427a:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_config_error>
    427e:	ad c0       	rjmp	.+346    	; 0x43da <_Z4loopv+0x670>
	}
	else
	{
		ConfigurationState_t hold_config_err = g_config_error;
    4280:	10 91 48 05 	lds	r17, 0x0548	; 0x800548 <g_config_error>
		g_config_error = clockConfigurationCheck();
    4284:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_Z23clockConfigurationCheckv>
    4288:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_config_error>

		if(g_config_error != hold_config_err)
    428c:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_config_error>
    4290:	18 17       	cp	r17, r24
    4292:	09 f4       	brne	.+2      	; 0x4296 <_Z4loopv+0x52c>
    4294:	a2 c0       	rjmp	.+324    	; 0x43da <_Z4loopv+0x670>
		{
			if(g_config_error == CONFIGURATION_ERROR)
    4296:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_config_error>
    429a:	82 30       	cpi	r24, 0x02	; 2
    429c:	a1 f4       	brne	.+40     	; 0x42c6 <_Z4loopv+0x55c>
			{
				BOOL repeat = TRUE;
    429e:	11 e0       	ldi	r17, 0x01	; 1
    42a0:	19 83       	std	Y+1, r17	; 0x01
				makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	be 01       	movw	r22, r28
    42a8:	6f 5f       	subi	r22, 0xFF	; 255
    42aa:	7f 4f       	sbci	r23, 0xFF	; 255
    42ac:	8e e0       	ldi	r24, 0x0E	; 14
    42ae:	92 e0       	ldi	r25, 0x02	; 2
    42b0:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>
				g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    42b4:	8c e8       	ldi	r24, 0x8C	; 140
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <g_code_throttle+0x1>
    42bc:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_code_throttle>
				g_LED_enunciating = TRUE;
    42c0:	10 93 95 05 	sts	0x0595, r17	; 0x800595 <g_LED_enunciating>
    42c4:	8a c0       	rjmp	.+276    	; 0x43da <_Z4loopv+0x670>
			}
			else if(g_config_error == WAITING_FOR_START)
    42c6:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_config_error>
    42ca:	81 30       	cpi	r24, 0x01	; 1
    42cc:	a1 f4       	brne	.+40     	; 0x42f6 <_Z4loopv+0x58c>
			{
				BOOL repeat = TRUE;
    42ce:	11 e0       	ldi	r17, 0x01	; 1
    42d0:	19 83       	std	Y+1, r17	; 0x01
				makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	be 01       	movw	r22, r28
    42d8:	6f 5f       	subi	r22, 0xFF	; 255
    42da:	7f 4f       	sbci	r23, 0xFF	; 255
    42dc:	80 e1       	ldi	r24, 0x10	; 16
    42de:	92 e0       	ldi	r25, 0x02	; 2
    42e0:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>
				g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    42e4:	86 e4       	ldi	r24, 0x46	; 70
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <g_code_throttle+0x1>
    42ec:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <g_code_throttle>
				g_LED_enunciating = TRUE;
    42f0:	10 93 95 05 	sts	0x0595, r17	; 0x800595 <g_LED_enunciating>
    42f4:	72 c0       	rjmp	.+228    	; 0x43da <_Z4loopv+0x670>
			}
			else
			{
				g_LED_enunciating = FALSE;
    42f6:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <g_LED_enunciating>
				digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	8d e0       	ldi	r24, 0x0D	; 13
    42fe:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
			}
		}
	}
}
    4302:	6b c0       	rjmp	.+214    	; 0x43da <_Z4loopv+0x670>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    4304:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_id_codespeed>
    4308:	70 e0       	ldi	r23, 0x00	; 0
    430a:	82 e8       	ldi	r24, 0x82	; 130
    430c:	9b e1       	ldi	r25, 0x1B	; 27
    430e:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    4312:	cb 01       	movw	r24, r22
    4314:	6a e0       	ldi	r22, 0x0A	; 10
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    431c:	66 0f       	add	r22, r22
    431e:	77 1f       	adc	r23, r23
    4320:	70 93 98 05 	sts	0x0598, r23	; 0x800598 <g_code_throttle+0x1>
    4324:	60 93 97 05 	sts	0x0597, r22	; 0x800597 <g_code_throttle>
				BOOL repeat = FALSE;
    4328:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID], &repeat, NULL);
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	be 01       	movw	r22, r28
    4330:	6f 5f       	subi	r22, 0xFF	; 255
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	82 e3       	ldi	r24, 0x32	; 50
    4336:	95 e0       	ldi	r25, 0x05	; 5
    4338:	0e 94 3a 24 	call	0x4874	; 0x4874 <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    4342:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <g_callsign_sent>
    4346:	26 ce       	rjmp	.-948    	; 0x3f94 <_Z4loopv+0x22a>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    4348:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    434c:	89 30       	cpi	r24, 0x09	; 9
    434e:	08 f0       	brcs	.+2      	; 0x4352 <_Z4loopv+0x5e8>
    4350:	14 ce       	rjmp	.-984    	; 0x3f7a <_Z4loopv+0x210>
    4352:	20 ce       	rjmp	.-960    	; 0x3f94 <_Z4loopv+0x22a>
			{
				if(g_fox_transition)
    4354:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_fox_transition>
    4358:	81 11       	cpse	r24, r1
    435a:	15 ce       	rjmp	.-982    	; 0x3f86 <_Z4loopv+0x21c>
    435c:	1b ce       	rjmp	.-970    	; 0x3f94 <_Z4loopv+0x22a>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ4loopvE7proceed>
    4364:	4f ce       	rjmp	.-866    	; 0x4004 <_Z4loopv+0x29a>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    4366:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
    436a:	4c ce       	rjmp	.-872    	; 0x4004 <_Z4loopv+0x29a>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    436c:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_fox>
    4370:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <g_fox_counter>
    4374:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <g_fox_counter+0x1>
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	82 17       	cp	r24, r18
    437c:	93 07       	cpc	r25, r19
    437e:	09 f0       	breq	.+2      	; 0x4382 <_Z4loopv+0x618>
    4380:	3d ce       	rjmp	.-902    	; 0x3ffc <_Z4loopv+0x292>
    4382:	40 ce       	rjmp	.-896    	; 0x4004 <_Z4loopv+0x29a>
			{
				g_on_the_air = FALSE;
    4384:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_on_the_air>
    4388:	3d ce       	rjmp	.-902    	; 0x4004 <_Z4loopv+0x29a>
    438a:	0f 2e       	mov	r0, r31
    438c:	fd e7       	ldi	r31, 0x7D	; 125
    438e:	af 2e       	mov	r10, r31
    4390:	f2 e0       	ldi	r31, 0x02	; 2
    4392:	bf 2e       	mov	r11, r31
    4394:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4396:	00 e0       	ldi	r16, 0x00	; 0
    4398:	10 e0       	ldi	r17, 0x00	; 0
    439a:	88 24       	eor	r8, r8
    439c:	8a 94       	dec	r8
    439e:	98 2c       	mov	r9, r8
    43a0:	71 2c       	mov	r7, r1
    43a2:	61 2c       	mov	r6, r1
    43a4:	51 2c       	mov	r5, r1
    43a6:	41 2c       	mov	r4, r1
    43a8:	65 ce       	rjmp	.-822    	; 0x4074 <_Z4loopv+0x30a>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    43aa:	99 20       	and	r9, r9
    43ac:	0c f4       	brge	.+2      	; 0x43b0 <_Z4loopv+0x646>
    43ae:	f9 ce       	rjmp	.-526    	; 0x41a2 <_Z4loopv+0x438>
    43b0:	0f 2e       	mov	r0, r31
    43b2:	fd e8       	ldi	r31, 0x8D	; 141
    43b4:	af 2e       	mov	r10, r31
    43b6:	f2 e0       	ldi	r31, 0x02	; 2
    43b8:	bf 2e       	mov	r11, r31
    43ba:	f0 2d       	mov	r31, r0
    43bc:	00 e0       	ldi	r16, 0x00	; 0
    43be:	10 e0       	ldi	r17, 0x00	; 0
    43c0:	66 24       	eor	r6, r6
    43c2:	6a 94       	dec	r6
    43c4:	76 2c       	mov	r7, r6
    43c6:	51 2c       	mov	r5, r1
    43c8:	41 2c       	mov	r4, r1
    43ca:	31 2c       	mov	r3, r1
    43cc:	21 2c       	mov	r2, r1
    43ce:	88 ce       	rjmp	.-752    	; 0x40e0 <_Z4loopv+0x376>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    43d0:	60 e0       	ldi	r22, 0x00	; 0
    43d2:	8d e0       	ldi	r24, 0x0D	; 13
    43d4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>
    43d8:	0c cf       	rjmp	.-488    	; 0x41f2 <_Z4loopv+0x488>
				g_LED_enunciating = FALSE;
				digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
			}
		}
	}
}
    43da:	0f 90       	pop	r0
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	ff 90       	pop	r15
    43e6:	ef 90       	pop	r14
    43e8:	df 90       	pop	r13
    43ea:	cf 90       	pop	r12
    43ec:	bf 90       	pop	r11
    43ee:	af 90       	pop	r10
    43f0:	9f 90       	pop	r9
    43f2:	8f 90       	pop	r8
    43f4:	7f 90       	pop	r7
    43f6:	6f 90       	pop	r6
    43f8:	5f 90       	pop	r5
    43fa:	4f 90       	pop	r4
    43fc:	3f 90       	pop	r3
    43fe:	2f 90       	pop	r2
    4400:	08 95       	ret

00004402 <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);          /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    4402:	61 e0       	ldi	r22, 0x01	; 1
    4404:	8d e0       	ldi	r24, 0x0D	; 13
    4406:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	8d e0       	ldi	r24, 0x0D	; 13
    440e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    4412:	61 e0       	ldi	r22, 0x01	; 1
    4414:	8d e0       	ldi	r24, 0x0D	; 13
    4416:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	8d e0       	ldi	r24, 0x0D	; 13
    441e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    4422:	61 e0       	ldi	r22, 0x01	; 1
    4424:	8a e0       	ldi	r24, 0x0A	; 10
    4426:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	8a e0       	ldi	r24, 0x0A	; 10
    442e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    4432:	61 e0       	ldi	r22, 0x01	; 1
    4434:	89 e0       	ldi	r24, 0x09	; 9
    4436:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    443a:	60 e0       	ldi	r22, 0x00	; 0
    443c:	89 e0       	ldi	r24, 0x09	; 9
    443e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    4442:	61 e0       	ldi	r22, 0x01	; 1
    4444:	88 e0       	ldi	r24, 0x08	; 8
    4446:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    444a:	60 e0       	ldi	r22, 0x00	; 0
    444c:	88 e0       	ldi	r24, 0x08	; 8
    444e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    4452:	60 e0       	ldi	r22, 0x00	; 0
    4454:	84 e1       	ldi	r24, 0x14	; 20
    4456:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    445a:	60 e0       	ldi	r22, 0x00	; 0
    445c:	85 e1       	ldi	r24, 0x15	; 21
    445e:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    4462:	63 e0       	ldi	r22, 0x03	; 3
    4464:	8c e0       	ldi	r24, 0x0C	; 12
    4466:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    446a:	61 e0       	ldi	r22, 0x01	; 1
    446c:	8b e0       	ldi	r24, 0x0B	; 11
    446e:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    4472:	60 e0       	ldi	r22, 0x00	; 0
    4474:	8b e0       	ldi	r24, 0x0B	; 11
    4476:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    447a:	63 e0       	ldi	r22, 0x03	; 3
    447c:	84 e0       	ldi	r24, 0x04	; 4
    447e:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    4482:	61 e0       	ldi	r22, 0x01	; 1
    4484:	8e e0       	ldi	r24, 0x0E	; 14
    4486:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    448a:	61 e0       	ldi	r22, 0x01	; 1
    448c:	8f e0       	ldi	r24, 0x0F	; 15
    448e:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    4492:	61 e0       	ldi	r22, 0x01	; 1
    4494:	80 e1       	ldi	r24, 0x10	; 16
    4496:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    449a:	61 e0       	ldi	r22, 0x01	; 1
    449c:	81 e1       	ldi	r24, 0x11	; 17
    449e:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    44a2:	61 e0       	ldi	r22, 0x01	; 1
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    44aa:	61 e0       	ldi	r22, 0x01	; 1
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>

	pinMode(PIN_PWDN, OUTPUT);
    44b2:	61 e0       	ldi	r22, 0x01	; 1
    44b4:	86 e0       	ldi	r24, 0x06	; 6
    44b6:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    44ba:	61 e0       	ldi	r22, 0x01	; 1
    44bc:	86 e0       	ldi	r24, 0x06	; 6
    44be:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    44c2:	63 e0       	ldi	r22, 0x03	; 3
    44c4:	82 e1       	ldi	r24, 0x12	; 18
    44c6:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    44ca:	63 e0       	ldi	r22, 0x03	; 3
    44cc:	83 e1       	ldi	r24, 0x13	; 19
    44ce:	0e 94 48 01 	call	0x290	; 0x290 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    44d2:	0e 94 bc 06 	call	0xd78	; 0xd78 <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    44d6:	8f e9       	ldi	r24, 0x9F	; 159
    44d8:	95 e0       	ldi	r25, 0x05	; 5
    44da:	0e 94 92 03 	call	0x724	; 0x724 <_ZN13EepromManager11readNonVolsEv>
    44de:	18 2f       	mov	r17, r24
		setUpAudioSampling(true);
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	0e 94 ce 11 	call	0x239c	; 0x239c <_Z18setUpAudioSamplingh>
#endif

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    44e6:	e9 e6       	ldi	r30, 0x69	; 105
    44e8:	f0 e0       	ldi	r31, 0x00	; 0
    44ea:	80 81       	ld	r24, Z
    44ec:	82 60       	ori	r24, 0x02	; 2
    44ee:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    44f0:	e8 9a       	sbi	0x1d, 0	; 29


	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    44f2:	a0 eb       	ldi	r26, 0xB0	; 176
    44f4:	b0 e0       	ldi	r27, 0x00	; 0
    44f6:	1c 92       	st	X, r1
	TCCR2B = 0;
    44f8:	e1 eb       	ldi	r30, 0xB1	; 177
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    44fe:	8c 91       	ld	r24, X
    4500:	82 60       	ori	r24, 0x02	; 2
    4502:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    4504:	80 81       	ld	r24, Z
    4506:	87 60       	ori	r24, 0x07	; 7
    4508:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    450a:	8c e0       	ldi	r24, 0x0C	; 12
    450c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    4510:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    4514:	e6 eb       	ldi	r30, 0xB6	; 182
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	80 81       	ld	r24, Z
    451a:	8f 7d       	andi	r24, 0xDF	; 223
    451c:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    451e:	e0 e7       	ldi	r30, 0x70	; 112
    4520:	f0 e0       	ldi	r31, 0x00	; 0
    4522:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    4524:	80 81       	ld	r24, Z
    4526:	84 60       	ori	r24, 0x04	; 4
    4528:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    452a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    452e:	c1 e8       	ldi	r28, 0x81	; 129
    4530:	d0 e0       	ldi	r29, 0x00	; 0
    4532:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    4534:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4538:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    453c:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <g_AM_audio_frequency>
    4540:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    4544:	88 81       	ld	r24, Y
    4546:	88 60       	ori	r24, 0x08	; 8
    4548:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    454a:	88 81       	ld	r24, Y
    454c:	81 60       	ori	r24, 0x01	; 1
    454e:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    4550:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    4552:	84 b5       	in	r24, 0x24	; 36
    4554:	82 60       	ori	r24, 0x02	; 2
    4556:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    4558:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    455a:	85 b5       	in	r24, 0x25	; 37
    455c:	84 60       	ori	r24, 0x04	; 4
    455e:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    4560:	8f e2       	ldi	r24, 0x2F	; 47
    4562:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4564:	ee e6       	ldi	r30, 0x6E	; 110
    4566:	f0 e0       	ldi	r31, 0x00	; 0
    4568:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    456a:	80 81       	ld	r24, Z
    456c:	82 60       	ori	r24, 0x02	; 2
    456e:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    4570:	ed e6       	ldi	r30, 0x6D	; 109
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4576:	80 e1       	ldi	r24, 0x10	; 16
    4578:	80 83       	st	Z, r24
	PCICR = 0x00;
    457a:	e8 e6       	ldi	r30, 0x68	; 104
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    4580:	84 e0       	ldi	r24, 0x04	; 4
    4582:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    4584:	78 94       	sei

	linkbus_init(BAUD);         /* Start the Link Bus serial comms */
    4586:	60 e0       	ldi	r22, 0x00	; 0
    4588:	71 ee       	ldi	r23, 0xE1	; 225
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 02 09 	call	0x1204	; 0x1204 <_Z12linkbus_initm>
		}

		digitalWrite(PIN_LED2, ON);
		while(1);
#else
		if(eepromErr)
    4592:	11 23       	and	r17, r17
    4594:	29 f0       	breq	.+10     	; 0x45a0 <main+0x19e>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	8a e1       	ldi	r24, 0x1A	; 26
    459a:	92 e0       	ldi	r25, 0x02	; 2
    459c:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
		}
		uint8_t result = rv3028_1s_sqw();
    45a0:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_Z13rv3028_1s_sqwv>
    45a4:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

	/*g_current_epoch = rv3028_get_epoch(NULL, NULL); */
	g_current_epoch = rv3028_get_epoch();
    45a6:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_Z16rv3028_get_epochv>
    45aa:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <g_current_epoch>
    45ae:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <g_current_epoch+0x1>
    45b2:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_current_epoch+0x2>
    45b6:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    45ba:	8f e9       	ldi	r24, 0x9F	; 159
    45bc:	95 e0       	ldi	r25, 0x05	; 5
    45be:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    45c2:	cc 23       	and	r28, r28
    45c4:	54 f4       	brge	.+20     	; 0x45da <main+0x1d8>
		{
			sprintf(g_tempStr, "Err 1\n");
    45c6:	87 e0       	ldi	r24, 0x07	; 7
    45c8:	e9 e2       	ldi	r30, 0x29	; 41
    45ca:	f2 e0       	ldi	r31, 0x02	; 2
    45cc:	a6 ee       	ldi	r26, 0xE6	; 230
    45ce:	b4 e0       	ldi	r27, 0x04	; 4
    45d0:	01 90       	ld	r0, Z+
    45d2:	0d 92       	st	X+, r0
    45d4:	8a 95       	dec	r24
    45d6:	e1 f7       	brne	.-8      	; 0x45d0 <main+0x1ce>
    45d8:	23 c0       	rjmp	.+70     	; 0x4620 <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    45da:	c0 ff       	sbrs	r28, 0
    45dc:	0a c0       	rjmp	.+20     	; 0x45f2 <main+0x1f0>
		{
			sprintf(g_tempStr, "Err 2\n");
    45de:	87 e0       	ldi	r24, 0x07	; 7
    45e0:	e0 e3       	ldi	r30, 0x30	; 48
    45e2:	f2 e0       	ldi	r31, 0x02	; 2
    45e4:	a6 ee       	ldi	r26, 0xE6	; 230
    45e6:	b4 e0       	ldi	r27, 0x04	; 4
    45e8:	01 90       	ld	r0, Z+
    45ea:	0d 92       	st	X+, r0
    45ec:	8a 95       	dec	r24
    45ee:	e1 f7       	brne	.-8      	; 0x45e8 <main+0x1e6>
    45f0:	17 c0       	rjmp	.+46     	; 0x4620 <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    45f2:	c1 ff       	sbrs	r28, 1
    45f4:	0a c0       	rjmp	.+20     	; 0x460a <main+0x208>
		{
			sprintf(g_tempStr, "Err 3\n");
    45f6:	87 e0       	ldi	r24, 0x07	; 7
    45f8:	e7 e3       	ldi	r30, 0x37	; 55
    45fa:	f2 e0       	ldi	r31, 0x02	; 2
    45fc:	a6 ee       	ldi	r26, 0xE6	; 230
    45fe:	b4 e0       	ldi	r27, 0x04	; 4
    4600:	01 90       	ld	r0, Z+
    4602:	0d 92       	st	X+, r0
    4604:	8a 95       	dec	r24
    4606:	e1 f7       	brne	.-8      	; 0x4600 <main+0x1fe>
    4608:	0b c0       	rjmp	.+22     	; 0x4620 <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    460a:	c5 ff       	sbrs	r28, 5
    460c:	09 c0       	rjmp	.+18     	; 0x4620 <main+0x21e>
		{
			sprintf(g_tempStr, "RTC OK\n");
    460e:	88 e0       	ldi	r24, 0x08	; 8
    4610:	ee e3       	ldi	r30, 0x3E	; 62
    4612:	f2 e0       	ldi	r31, 0x02	; 2
    4614:	a6 ee       	ldi	r26, 0xE6	; 230
    4616:	b4 e0       	ldi	r27, 0x04	; 4
    4618:	01 90       	ld	r0, Z+
    461a:	0d 92       	st	X+, r0
    461c:	8a 95       	dec	r24
    461e:	e1 f7       	brne	.-8      	; 0x4618 <main+0x216>
		}

		if(strlen(g_tempStr))
    4620:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_tempStr>
    4624:	88 23       	and	r24, r24
    4626:	29 f0       	breq	.+10     	; 0x4632 <main+0x230>
		{
			lb_send_string(g_tempStr, TRUE);
    4628:	61 e0       	ldi	r22, 0x01	; 1
    462a:	86 ee       	ldi	r24, 0xE6	; 230
    462c:	94 e0       	ldi	r25, 0x04	; 4
    462e:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4632:	0e 94 76 12 	call	0x24ec	; 0x24ec <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4636:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    463a:	ef e6       	ldi	r30, 0x6F	; 111
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	82 60       	ori	r24, 0x02	; 2
    4642:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z11setupForFoxP5Fox_t>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    464c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_Z4loopv>
    4650:	fd cf       	rjmp	.-6      	; 0x464c <main+0x24a>

00004652 <_GLOBAL__sub_I_ee_mgr>:
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
		}
		break;
	}
}
    4652:	0f 93       	push	r16
    4654:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    4656:	8f e9       	ldi	r24, 0x9F	; 159
    4658:	95 e0       	ldi	r25, 0x05	; 5
    465a:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    465e:	00 e0       	ldi	r16, 0x00	; 0
    4660:	18 e7       	ldi	r17, 0x78	; 120
    4662:	26 e9       	ldi	r18, 0x96	; 150
    4664:	36 e4       	ldi	r19, 0x46	; 70
    4666:	40 e0       	ldi	r20, 0x00	; 0
    4668:	50 e0       	ldi	r21, 0x00	; 0
    466a:	69 e4       	ldi	r22, 0x49	; 73
    466c:	73 e4       	ldi	r23, 0x43	; 67
    466e:	8e e0       	ldi	r24, 0x0E	; 14
    4670:	95 e0       	ldi	r25, 0x05	; 5
    4672:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN8GoertzelC1Eff>
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
		}
		break;
	}
}
    4676:	1f 91       	pop	r17
    4678:	0f 91       	pop	r16
    467a:	08 95       	ret

0000467c <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    467c:	8e e0       	ldi	r24, 0x0E	; 14
    467e:	95 e0       	ldi	r25, 0x05	; 5
    4680:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    4684:	8f e9       	ldi	r24, 0x9F	; 159
    4686:	95 e0       	ldi	r25, 0x05	; 5
    4688:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN13EepromManagerD1Ev>
    468c:	08 95       	ret

0000468e <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	fc 01       	movw	r30, r24
    4692:	b0 97       	sbiw	r30, 0x20	; 32
    4694:	ed 35       	cpi	r30, 0x5D	; 93
    4696:	f1 05       	cpc	r31, r1
    4698:	08 f0       	brcs	.+2      	; 0x469c <_Z12getMorseCharc+0xe>
    469a:	e4 c0       	rjmp	.+456    	; 0x4864 <_Z12getMorseCharc+0x1d6>
    469c:	e1 57       	subi	r30, 0x71	; 113
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    46a4:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    46a6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    46a8:	61 e0       	ldi	r22, 0x01	; 1
    46aa:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    46ac:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    46ae:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    46b0:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    46b2:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    46b4:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    46b6:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    46b8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    46ba:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    46bc:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    46be:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    46c0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    46c2:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    46c4:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    46c6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    46c8:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    46ca:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    46cc:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    46ce:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    46d0:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    46d2:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    46d4:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    46d6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    46d8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    46da:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    46dc:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    46de:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    46e0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    46e2:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    46e4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    46e6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    46e8:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    46ea:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    46ec:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    46ee:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    46f0:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    46f2:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    46f4:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    46f6:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    46f8:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    46fa:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    46fc:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    46fe:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4700:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4702:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4704:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4706:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4708:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    470a:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    470c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    470e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4710:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4712:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4714:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4716:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4718:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    471a:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    471c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    471e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4720:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4722:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4724:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4726:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4728:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    472a:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    472c:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    472e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4730:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4732:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4734:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4736:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4738:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    473a:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    473c:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    473e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4740:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4742:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4744:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4746:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4748:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    474a:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    474c:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    474e:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4750:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4752:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4754:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4756:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4758:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    475a:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    475c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    475e:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4760:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4762:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4764:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4766:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4768:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    476a:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    476c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    476e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    4770:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4772:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4774:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4776:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4778:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    477a:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    477c:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    477e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    4780:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4782:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4784:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4786:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4788:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    478a:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    478c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    478e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4790:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4792:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4794:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4796:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4798:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    479a:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    479c:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    479e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    47a0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    47a2:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    47a4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    47a6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    47a8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    47aa:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    47ac:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    47ae:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    47b0:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    47b2:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    47b4:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    47b6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    47b8:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    47ba:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    47bc:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    47be:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    47c0:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    47c2:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    47c4:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    47c6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    47c8:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    47ca:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    47cc:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    47ce:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    47d0:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    47d2:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    47d4:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    47d6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    47d8:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    47da:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    47dc:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    47de:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    47e0:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    47e2:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    47e4:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    47e6:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    47e8:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    47ea:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    47ec:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    47ee:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    47f0:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    47f2:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    47f4:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    47f6:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    47f8:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    47fa:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    47fc:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    47fe:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4800:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4802:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4804:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4806:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4808:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    480a:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    480c:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    480e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    4810:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4812:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4814:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4816:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4818:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    481a:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    481c:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    481e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    4820:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4822:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4824:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4826:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4828:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    482a:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    482c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    482e:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    4830:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4832:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4834:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4836:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4838:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    483a:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    483c:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    483e:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    4840:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4842:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4844:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4846:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4848:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    484a:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    484c:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    484e:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    4850:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4852:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4854:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4856:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4858:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    485a:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    485c:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    485e:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    4860:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4862:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    4864:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4866:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4868:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    486a:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    486c:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    486e:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4870:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    4872:	08 95       	ret

00004874 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4874:	cf 93       	push	r28
    4876:	df 93       	push	r29
    4878:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    487a:	00 97       	sbiw	r24, 0x00	; 0
    487c:	b1 f1       	breq	.+108    	; 0x48ea <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    487e:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    4882:	61 15       	cp	r22, r1
    4884:	71 05       	cpc	r23, r1
    4886:	21 f0       	breq	.+8      	; 0x4890 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4888:	db 01       	movw	r26, r22
    488a:	2c 91       	ld	r18, X
    488c:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    4890:	fc 01       	movw	r30, r24
    4892:	20 81       	ld	r18, Z
    4894:	22 23       	and	r18, r18
    4896:	d9 f0       	breq	.+54     	; 0x48ce <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4898:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <_ZZ9makeMorsePcPhS0_E3str+0x1>
    489c:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    48a0:	80 e2       	ldi	r24, 0x20	; 32
    48a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    48a6:	82 2f       	mov	r24, r18
    48a8:	0e 94 47 23 	call	0x468e	; 0x468e <_Z12getMorseCharc>
    48ac:	60 93 a6 05 	sts	0x05A6, r22	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    48b0:	70 93 a7 05 	sts	0x05A7, r23	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    48b4:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    48b8:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    48bc:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    48c0:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    48c4:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    48c8:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E15completedString>
    48cc:	0a c0       	rjmp	.+20     	; 0x48e2 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    48ce:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <_ZZ9makeMorsePcPhS0_E3str+0x1>
    48d2:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    48d6:	81 e0       	ldi	r24, 0x01	; 1
    48d8:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    48dc:	20 97       	sbiw	r28, 0x00	; 0
    48de:	09 f0       	breq	.+2      	; 0x48e2 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    48e0:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    48e2:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	c0 c0       	rjmp	.+384    	; 0x4a6a <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    48ea:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E3str>
    48ee:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <_ZZ9makeMorsePcPhS0_E3str+0x1>
    48f2:	30 97       	sbiw	r30, 0x00	; 0
    48f4:	09 f4       	brne	.+2      	; 0x48f8 <_Z9makeMorsePcPhS0_+0x84>
    48f6:	aa c0       	rjmp	.+340    	; 0x4a4c <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    48f8:	61 15       	cp	r22, r1
    48fa:	71 05       	cpc	r23, r1
    48fc:	21 f0       	breq	.+8      	; 0x4906 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    48fe:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZZ9makeMorsePcPhS0_E6repeat>
    4902:	db 01       	movw	r26, r22
    4904:	8c 93       	st	X, r24
		}

		if(completedString)
    4906:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E15completedString>
    490a:	88 23       	and	r24, r24
    490c:	49 f0       	breq	.+18     	; 0x4920 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    490e:	20 97       	sbiw	r28, 0x00	; 0
    4910:	09 f4       	brne	.+2      	; 0x4914 <_Z9makeMorsePcPhS0_+0xa0>
    4912:	a8 c0       	rjmp	.+336    	; 0x4a64 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4918:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	a5 c0       	rjmp	.+330    	; 0x4a6a <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    4920:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4924:	88 23       	and	r24, r24
    4926:	21 f0       	breq	.+8      	; 0x4930 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4928:	81 50       	subi	r24, 0x01	; 1
    492a:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    492e:	7f c0       	rjmp	.+254    	; 0x4a2e <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    4930:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4934:	88 23       	and	r24, r24
    4936:	81 f0       	breq	.+32     	; 0x4958 <_Z9makeMorsePcPhS0_+0xe4>
    4938:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    493c:	81 11       	cpse	r24, r1
    493e:	0c c0       	rjmp	.+24     	; 0x4958 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    4940:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    4944:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4948:	88 23       	and	r24, r24
    494a:	09 f4       	brne	.+2      	; 0x494e <_Z9makeMorsePcPhS0_+0xda>
    494c:	70 c0       	rjmp	.+224    	; 0x4a2e <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    494e:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    4952:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4956:	6b c0       	rjmp	.+214    	; 0x4a2e <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4958:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    495c:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4960:	89 17       	cp	r24, r25
    4962:	90 f1       	brcs	.+100    	; 0x49c8 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    4964:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4968:	8f 5f       	subi	r24, 0xFF	; 255
    496a:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9charIndex>
    496e:	df 01       	movw	r26, r30
    4970:	a8 0f       	add	r26, r24
    4972:	b1 1d       	adc	r27, r1
    4974:	8c 91       	ld	r24, X
    4976:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    497a:	81 11       	cpse	r24, r1
    497c:	19 c0       	rjmp	.+50     	; 0x49b0 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    497e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZZ9makeMorsePcPhS0_E6repeat>
    4982:	88 23       	and	r24, r24
    4984:	31 f0       	breq	.+12     	; 0x4992 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4986:	80 81       	ld	r24, Z
    4988:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    498c:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E9charIndex>
    4990:	0f c0       	rjmp	.+30     	; 0x49b0 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    4992:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4996:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    499a:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    499e:	91 e0       	ldi	r25, 0x01	; 1
    49a0:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    49a4:	20 97       	sbiw	r28, 0x00	; 0
    49a6:	09 f0       	breq	.+2      	; 0x49aa <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    49a8:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    49aa:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    49ae:	5d c0       	rjmp	.+186    	; 0x4a6a <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    49b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ9makeMorsePcPhS0_E1c>
    49b4:	0e 94 47 23 	call	0x468e	; 0x468e <_Z12getMorseCharc>
    49b8:	60 93 a6 05 	sts	0x05A6, r22	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    49bc:	70 93 a7 05 	sts	0x05A7, r23	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    49c0:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    49c4:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    49c8:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    49cc:	2d 3f       	cpi	r18, 0xFD	; 253
    49ce:	00 f5       	brcc	.+64     	; 0x4a10 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    49d0:	40 91 a4 05 	lds	r20, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    49d4:	31 e0       	ldi	r19, 0x01	; 1
    49d6:	34 0f       	add	r19, r20
    49d8:	30 93 a4 05 	sts	0x05A4, r19	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	02 c0       	rjmp	.+4      	; 0x49e6 <_Z9makeMorsePcPhS0_+0x172>
    49e2:	88 0f       	add	r24, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	4a 95       	dec	r20
    49e8:	e2 f7       	brpl	.-8      	; 0x49e2 <_Z9makeMorsePcPhS0_+0x16e>
    49ea:	82 23       	and	r24, r18
    49ec:	21 f0       	breq	.+8      	; 0x49f6 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    49ee:	82 e0       	ldi	r24, 0x02	; 2
    49f0:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    49f6:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    4a00:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4a04:	38 17       	cp	r19, r24
    4a06:	98 f0       	brcs	.+38     	; 0x4a2e <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4a0e:	0f c0       	rjmp	.+30     	; 0x4a2e <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    4a10:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    4a14:	9f ef       	ldi	r25, 0xFF	; 255
    4a16:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4a1a:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    4a1e:	84 30       	cpi	r24, 0x04	; 4
    4a20:	20 f0       	brcs	.+8      	; 0x4a2a <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    4a22:	84 50       	subi	r24, 0x04	; 4
    4a24:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4a2a:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    4a2e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ9makeMorsePcPhS0_E1c>
    4a32:	8c 33       	cpi	r24, 0x3C	; 60
    4a34:	31 f4       	brne	.+12     	; 0x4a42 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    4a3c:	20 97       	sbiw	r28, 0x00	; 0
    4a3e:	41 f4       	brne	.+16     	; 0x4a50 <_Z9makeMorsePcPhS0_+0x1dc>
    4a40:	14 c0       	rjmp	.+40     	; 0x4a6a <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    4a42:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4a46:	20 97       	sbiw	r28, 0x00	; 0
    4a48:	19 f4       	brne	.+6      	; 0x4a50 <_Z9makeMorsePcPhS0_+0x1dc>
    4a4a:	09 c0       	rjmp	.+18     	; 0x4a5e <_Z9makeMorsePcPhS0_+0x1ea>
    4a4c:	20 97       	sbiw	r28, 0x00	; 0
    4a4e:	19 f0       	breq	.+6      	; 0x4a56 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    4a50:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E15completedString>
    4a54:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4a56:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4a5a:	81 11       	cpse	r24, r1
    4a5c:	05 c0       	rjmp	.+10     	; 0x4a68 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    4a5e:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4a62:	03 c0       	rjmp	.+6      	; 0x4a6a <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	01 c0       	rjmp	.+2      	; 0x4a6a <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    4a68:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    4a6a:	df 91       	pop	r29
    4a6c:	cf 91       	pop	r28
    4a6e:	08 95       	ret

00004a70 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    4a70:	cf 92       	push	r12
    4a72:	df 92       	push	r13
    4a74:	ef 92       	push	r14
    4a76:	ff 92       	push	r15
    4a78:	0f 93       	push	r16
    4a7a:	1f 93       	push	r17
    4a7c:	cf 93       	push	r28
    4a7e:	fc 01       	movw	r30, r24
    4a80:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4a82:	80 81       	ld	r24, Z
		if(!c)
    4a84:	88 23       	and	r24, r24
    4a86:	c1 f0       	breq	.+48     	; 0x4ab8 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4a88:	8f 01       	movw	r16, r30
    4a8a:	0f 5f       	subi	r16, 0xFF	; 255
    4a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8e:	7f 01       	movw	r14, r30
    4a90:	94 e1       	ldi	r25, 0x14	; 20
    4a92:	e9 0e       	add	r14, r25
    4a94:	f1 1c       	adc	r15, r1
    4a96:	c0 e0       	ldi	r28, 0x00	; 0
    4a98:	05 c0       	rjmp	.+10     	; 0x4aa4 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4a9a:	f8 01       	movw	r30, r16
    4a9c:	81 91       	ld	r24, Z+
    4a9e:	8f 01       	movw	r16, r30
		if(!c)
    4aa0:	88 23       	and	r24, r24
    4aa2:	59 f0       	breq	.+22     	; 0x4aba <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4aa4:	0e 94 47 23 	call	0x468e	; 0x468e <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4aa8:	6d 3f       	cpi	r22, 0xFD	; 253
    4aaa:	08 f4       	brcc	.+2      	; 0x4aae <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4aac:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    4aae:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    4ab0:	0e 15       	cp	r16, r14
    4ab2:	1f 05       	cpc	r17, r15
    4ab4:	91 f7       	brne	.-28     	; 0x4a9a <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4ab6:	01 c0       	rjmp	.+2      	; 0x4aba <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4ab8:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4aba:	80 eb       	ldi	r24, 0xB0	; 176
    4abc:	94 e0       	ldi	r25, 0x04	; 4
    4abe:	b6 01       	movw	r22, r12
    4ac0:	0e 94 77 2a 	call	0x54ee	; 0x54ee <__udivmodhi4>
}
    4ac4:	c6 9f       	mul	r28, r22
    4ac6:	c0 01       	movw	r24, r0
    4ac8:	c7 9f       	mul	r28, r23
    4aca:	90 0d       	add	r25, r0
    4acc:	11 24       	eor	r1, r1
    4ace:	cf 91       	pop	r28
    4ad0:	1f 91       	pop	r17
    4ad2:	0f 91       	pop	r16
    4ad4:	ff 90       	pop	r15
    4ad6:	ef 90       	pop	r14
    4ad8:	df 90       	pop	r13
    4ada:	cf 90       	pop	r12
    4adc:	08 95       	ret

00004ade <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    4ade:	98 2f       	mov	r25, r24
    4ae0:	96 95       	lsr	r25
    4ae2:	96 95       	lsr	r25
    4ae4:	96 95       	lsr	r25
    4ae6:	9e 71       	andi	r25, 0x1E	; 30
    4ae8:	29 2f       	mov	r18, r25
    4aea:	22 0f       	add	r18, r18
    4aec:	22 0f       	add	r18, r18
    4aee:	92 0f       	add	r25, r18
    4af0:	8f 70       	andi	r24, 0x0F	; 15
    4af2:	89 0f       	add	r24, r25
    4af4:	08 95       	ret

00004af6 <_Z8char2bcdPc>:
    4af6:	fc 01       	movw	r30, r24
    4af8:	20 81       	ld	r18, Z
    4afa:	81 81       	ldd	r24, Z+1	; 0x01
    4afc:	80 53       	subi	r24, 0x30	; 48
    4afe:	f0 e1       	ldi	r31, 0x10	; 16
    4b00:	2f 9f       	mul	r18, r31
    4b02:	80 0d       	add	r24, r0
    4b04:	11 24       	eor	r1, r1
    4b06:	08 95       	ret

00004b08 <_Z16rv3028_set_epochm>:
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
    4b0c:	00 d0       	rcall	.+0      	; 0x4b0e <_Z16rv3028_set_epochm+0x6>
    4b0e:	00 d0       	rcall	.+0      	; 0x4b10 <_Z16rv3028_set_epochm+0x8>
    4b10:	1f 92       	push	r1
    4b12:	cd b7       	in	r28, 0x3d	; 61
    4b14:	de b7       	in	r29, 0x3e	; 62
    4b16:	ae 01       	movw	r20, r28
    4b18:	4f 5f       	subi	r20, 0xFF	; 255
    4b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1c:	25 e0       	ldi	r18, 0x05	; 5
    4b1e:	fa 01       	movw	r30, r20
    4b20:	11 92       	st	Z+, r1
    4b22:	2a 95       	dec	r18
    4b24:	e9 f7       	brne	.-6      	; 0x4b20 <_Z16rv3028_set_epochm+0x18>
    4b26:	9c 83       	std	Y+4, r25	; 0x04
    4b28:	8b 83       	std	Y+3, r24	; 0x03
    4b2a:	7a 83       	std	Y+2, r23	; 0x02
    4b2c:	69 83       	std	Y+1, r22	; 0x01
    4b2e:	24 e0       	ldi	r18, 0x04	; 4
    4b30:	6b e1       	ldi	r22, 0x1B	; 27
    4b32:	84 ea       	ldi	r24, 0xA4	; 164
    4b34:	0e 94 35 07 	call	0xe6a	; 0xe6a <_Z16i2c_device_writehhPhh>
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	08 95       	ret

00004b48 <_Z16rv3028_get_epochv>:
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	00 d0       	rcall	.+0      	; 0x4b4e <_Z16rv3028_get_epochv+0x6>
    4b4e:	00 d0       	rcall	.+0      	; 0x4b50 <_Z16rv3028_get_epochv+0x8>
    4b50:	cd b7       	in	r28, 0x3d	; 61
    4b52:	de b7       	in	r29, 0x3e	; 62
    4b54:	19 82       	std	Y+1, r1	; 0x01
    4b56:	1a 82       	std	Y+2, r1	; 0x02
    4b58:	1b 82       	std	Y+3, r1	; 0x03
    4b5a:	1c 82       	std	Y+4, r1	; 0x04
    4b5c:	24 e0       	ldi	r18, 0x04	; 4
    4b5e:	ae 01       	movw	r20, r28
    4b60:	4f 5f       	subi	r20, 0xFF	; 255
    4b62:	5f 4f       	sbci	r21, 0xFF	; 255
    4b64:	6b e1       	ldi	r22, 0x1B	; 27
    4b66:	84 ea       	ldi	r24, 0xA4	; 164
    4b68:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z15i2c_device_readhhPhh>
    4b6c:	81 11       	cpse	r24, r1
    4b6e:	11 c0       	rjmp	.+34     	; 0x4b92 <_Z16rv3028_get_epochv+0x4a>
    4b70:	2a 81       	ldd	r18, Y+2	; 0x02
    4b72:	6b 81       	ldd	r22, Y+3	; 0x03
    4b74:	86 2f       	mov	r24, r22
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	a0 e0       	ldi	r26, 0x00	; 0
    4b7a:	b0 e0       	ldi	r27, 0x00	; 0
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	99 27       	eor	r25, r25
    4b80:	88 27       	eor	r24, r24
    4b82:	92 2b       	or	r25, r18
    4b84:	29 81       	ldd	r18, Y+1	; 0x01
    4b86:	82 2b       	or	r24, r18
    4b88:	2c 81       	ldd	r18, Y+4	; 0x04
    4b8a:	bc 01       	movw	r22, r24
    4b8c:	cd 01       	movw	r24, r26
    4b8e:	92 2b       	or	r25, r18
    4b90:	03 c0       	rjmp	.+6      	; 0x4b98 <_Z16rv3028_get_epochv+0x50>
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	70 e0       	ldi	r23, 0x00	; 0
    4b96:	cb 01       	movw	r24, r22
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	df 91       	pop	r29
    4ba2:	cf 91       	pop	r28
    4ba4:	08 95       	ret

00004ba6 <_Z16rv3028_get_epochPbPc>:
    4ba6:	6f 92       	push	r6
    4ba8:	7f 92       	push	r7
    4baa:	8f 92       	push	r8
    4bac:	9f 92       	push	r9
    4bae:	af 92       	push	r10
    4bb0:	bf 92       	push	r11
    4bb2:	cf 92       	push	r12
    4bb4:	df 92       	push	r13
    4bb6:	ef 92       	push	r14
    4bb8:	ff 92       	push	r15
    4bba:	0f 93       	push	r16
    4bbc:	1f 93       	push	r17
    4bbe:	cf 93       	push	r28
    4bc0:	df 93       	push	r29
    4bc2:	6c 01       	movw	r12, r24
    4bc4:	eb 01       	movw	r28, r22
    4bc6:	20 97       	sbiw	r28, 0x00	; 0
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <_Z16rv3028_get_epochPbPc+0x26>
    4bca:	b6 c0       	rjmp	.+364    	; 0x4d38 <_Z16rv3028_get_epochPbPc+0x192>
    4bcc:	cb 01       	movw	r24, r22
    4bce:	0a 96       	adiw	r24, 0x0a	; 10
    4bd0:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <_Z8char2bcdPc>
    4bd4:	88 2e       	mov	r8, r24
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	08 96       	adiw	r24, 0x08	; 8
    4bda:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <_Z8char2bcdPc>
    4bde:	78 2e       	mov	r7, r24
    4be0:	ce 01       	movw	r24, r28
    4be2:	06 96       	adiw	r24, 0x06	; 6
    4be4:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <_Z8char2bcdPc>
    4be8:	98 2e       	mov	r9, r24
    4bea:	ce 01       	movw	r24, r28
    4bec:	04 96       	adiw	r24, 0x04	; 4
    4bee:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <_Z8char2bcdPc>
    4bf2:	18 2f       	mov	r17, r24
    4bf4:	ce 01       	movw	r24, r28
    4bf6:	02 96       	adiw	r24, 0x02	; 2
    4bf8:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <_Z8char2bcdPc>
    4bfc:	08 2f       	mov	r16, r24
    4bfe:	ce 01       	movw	r24, r28
    4c00:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <_Z8char2bcdPc>
    4c04:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z7bcd2dech>
    4c08:	e8 2e       	mov	r14, r24
    4c0a:	f1 2c       	mov	r15, r1
    4c0c:	57 01       	movw	r10, r14
    4c0e:	80 e3       	ldi	r24, 0x30	; 48
    4c10:	a8 1a       	sub	r10, r24
    4c12:	88 ef       	ldi	r24, 0xF8	; 248
    4c14:	b8 0a       	sbc	r11, r24
    4c16:	80 2f       	mov	r24, r16
    4c18:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z7bcd2dech>
    4c1c:	d8 2f       	mov	r29, r24
    4c1e:	81 2f       	mov	r24, r17
    4c20:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z7bcd2dech>
    4c24:	68 2e       	mov	r6, r24
    4c26:	d2 30       	cpi	r29, 0x02	; 2
    4c28:	68 f0       	brcs	.+26     	; 0x4c44 <_Z16rv3028_get_epochPbPc+0x9e>
    4c2a:	00 e0       	ldi	r16, 0x00	; 0
    4c2c:	10 e0       	ldi	r17, 0x00	; 0
    4c2e:	c1 e0       	ldi	r28, 0x01	; 1
    4c30:	6c 2f       	mov	r22, r28
    4c32:	c5 01       	movw	r24, r10
    4c34:	0e 94 27 01 	call	0x24e	; 0x24e <month_length>
    4c38:	08 0f       	add	r16, r24
    4c3a:	11 1d       	adc	r17, r1
    4c3c:	cf 5f       	subi	r28, 0xFF	; 255
    4c3e:	dc 13       	cpse	r29, r28
    4c40:	f7 cf       	rjmp	.-18     	; 0x4c30 <_Z16rv3028_get_epochPbPc+0x8a>
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <_Z16rv3028_get_epochPbPc+0xa2>
    4c44:	00 e0       	ldi	r16, 0x00	; 0
    4c46:	10 e0       	ldi	r17, 0x00	; 0
    4c48:	86 2d       	mov	r24, r6
    4c4a:	66 0c       	add	r6, r6
    4c4c:	99 0b       	sbc	r25, r25
    4c4e:	01 97       	sbiw	r24, 0x01	; 1
    4c50:	08 0f       	add	r16, r24
    4c52:	19 1f       	adc	r17, r25
    4c54:	88 2d       	mov	r24, r8
    4c56:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z7bcd2dech>
    4c5a:	88 2e       	mov	r8, r24
    4c5c:	87 2d       	mov	r24, r7
    4c5e:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z7bcd2dech>
    4c62:	c8 2f       	mov	r28, r24
    4c64:	89 2d       	mov	r24, r9
    4c66:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z7bcd2dech>
    4c6a:	08 2c       	mov	r0, r8
    4c6c:	00 0c       	add	r0, r0
    4c6e:	99 08       	sbc	r9, r9
    4c70:	9c e3       	ldi	r25, 0x3C	; 60
    4c72:	c9 02       	muls	r28, r25
    4c74:	80 0c       	add	r8, r0
    4c76:	91 1c       	adc	r9, r1
    4c78:	11 24       	eor	r1, r1
    4c7a:	09 2c       	mov	r0, r9
    4c7c:	00 0c       	add	r0, r0
    4c7e:	aa 08       	sbc	r10, r10
    4c80:	bb 08       	sbc	r11, r11
    4c82:	a8 2f       	mov	r26, r24
    4c84:	88 0f       	add	r24, r24
    4c86:	bb 0b       	sbc	r27, r27
    4c88:	20 e1       	ldi	r18, 0x10	; 16
    4c8a:	3e e0       	ldi	r19, 0x0E	; 14
    4c8c:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <__usmulhisi3>
    4c90:	86 0e       	add	r8, r22
    4c92:	97 1e       	adc	r9, r23
    4c94:	a8 1e       	adc	r10, r24
    4c96:	b9 1e       	adc	r11, r25
    4c98:	d8 01       	movw	r26, r16
    4c9a:	20 e8       	ldi	r18, 0x80	; 128
    4c9c:	31 e5       	ldi	r19, 0x51	; 81
    4c9e:	41 e0       	ldi	r20, 0x01	; 1
    4ca0:	50 e0       	ldi	r21, 0x00	; 0
    4ca2:	0e 94 07 2b 	call	0x560e	; 0x560e <__mulshisi3>
    4ca6:	86 0e       	add	r8, r22
    4ca8:	97 1e       	adc	r9, r23
    4caa:	a8 1e       	adc	r10, r24
    4cac:	b9 1e       	adc	r11, r25
    4cae:	d7 01       	movw	r26, r14
    4cb0:	5e 96       	adiw	r26, 0x1e	; 30
    4cb2:	20 e8       	ldi	r18, 0x80	; 128
    4cb4:	33 e3       	ldi	r19, 0x33	; 51
    4cb6:	41 ee       	ldi	r20, 0xE1	; 225
    4cb8:	51 e0       	ldi	r21, 0x01	; 1
    4cba:	0e 94 07 2b 	call	0x560e	; 0x560e <__mulshisi3>
    4cbe:	86 0e       	add	r8, r22
    4cc0:	97 1e       	adc	r9, r23
    4cc2:	a8 1e       	adc	r10, r24
    4cc4:	b9 1e       	adc	r11, r25
    4cc6:	c7 01       	movw	r24, r14
    4cc8:	4f 96       	adiw	r24, 0x1f	; 31
    4cca:	dc 01       	movw	r26, r24
    4ccc:	0a f4       	brpl	.+2      	; 0x4cd0 <_Z16rv3028_get_epochPbPc+0x12a>
    4cce:	13 96       	adiw	r26, 0x03	; 3
    4cd0:	b5 95       	asr	r27
    4cd2:	a7 95       	ror	r26
    4cd4:	b5 95       	asr	r27
    4cd6:	a7 95       	ror	r26
    4cd8:	20 e8       	ldi	r18, 0x80	; 128
    4cda:	31 e5       	ldi	r19, 0x51	; 81
    4cdc:	41 e0       	ldi	r20, 0x01	; 1
    4cde:	50 e0       	ldi	r21, 0x00	; 0
    4ce0:	0e 94 07 2b 	call	0x560e	; 0x560e <__mulshisi3>
    4ce4:	86 0e       	add	r8, r22
    4ce6:	97 1e       	adc	r9, r23
    4ce8:	a8 1e       	adc	r10, r24
    4cea:	b9 1e       	adc	r11, r25
    4cec:	c7 01       	movw	r24, r14
    4cee:	8d 59       	subi	r24, 0x9D	; 157
    4cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf2:	64 e6       	ldi	r22, 0x64	; 100
    4cf4:	70 e0       	ldi	r23, 0x00	; 0
    4cf6:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    4cfa:	db 01       	movw	r26, r22
    4cfc:	20 e8       	ldi	r18, 0x80	; 128
    4cfe:	3e ea       	ldi	r19, 0xAE	; 174
    4d00:	4e ef       	ldi	r20, 0xFE	; 254
    4d02:	5f ef       	ldi	r21, 0xFF	; 255
    4d04:	0e 94 07 2b 	call	0x560e	; 0x560e <__mulshisi3>
    4d08:	86 0e       	add	r8, r22
    4d0a:	97 1e       	adc	r9, r23
    4d0c:	a8 1e       	adc	r10, r24
    4d0e:	b9 1e       	adc	r11, r25
    4d10:	c7 01       	movw	r24, r14
    4d12:	81 57       	subi	r24, 0x71	; 113
    4d14:	9e 4f       	sbci	r25, 0xFE	; 254
    4d16:	60 e9       	ldi	r22, 0x90	; 144
    4d18:	71 e0       	ldi	r23, 0x01	; 1
    4d1a:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__divmodhi4>
    4d1e:	db 01       	movw	r26, r22
    4d20:	20 e8       	ldi	r18, 0x80	; 128
    4d22:	31 e5       	ldi	r19, 0x51	; 81
    4d24:	41 e0       	ldi	r20, 0x01	; 1
    4d26:	50 e0       	ldi	r21, 0x00	; 0
    4d28:	0e 94 07 2b 	call	0x560e	; 0x560e <__mulshisi3>
    4d2c:	68 0d       	add	r22, r8
    4d2e:	79 1d       	adc	r23, r9
    4d30:	8a 1d       	adc	r24, r10
    4d32:	9b 1d       	adc	r25, r11
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	09 c0       	rjmp	.+18     	; 0x4d4a <_Z16rv3028_get_epochPbPc+0x1a4>
    4d38:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_Z16rv3028_get_epochv>
    4d3c:	31 e0       	ldi	r19, 0x01	; 1
    4d3e:	61 15       	cp	r22, r1
    4d40:	71 05       	cpc	r23, r1
    4d42:	81 05       	cpc	r24, r1
    4d44:	91 05       	cpc	r25, r1
    4d46:	09 f0       	breq	.+2      	; 0x4d4a <_Z16rv3028_get_epochPbPc+0x1a4>
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	c1 14       	cp	r12, r1
    4d4c:	d1 04       	cpc	r13, r1
    4d4e:	31 f0       	breq	.+12     	; 0x4d5c <_Z16rv3028_get_epochPbPc+0x1b6>
    4d50:	21 e0       	ldi	r18, 0x01	; 1
    4d52:	31 11       	cpse	r19, r1
    4d54:	01 c0       	rjmp	.+2      	; 0x4d58 <_Z16rv3028_get_epochPbPc+0x1b2>
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	f6 01       	movw	r30, r12
    4d5a:	20 83       	st	Z, r18
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	1f 91       	pop	r17
    4d62:	0f 91       	pop	r16
    4d64:	ff 90       	pop	r15
    4d66:	ef 90       	pop	r14
    4d68:	df 90       	pop	r13
    4d6a:	cf 90       	pop	r12
    4d6c:	bf 90       	pop	r11
    4d6e:	af 90       	pop	r10
    4d70:	9f 90       	pop	r9
    4d72:	8f 90       	pop	r8
    4d74:	7f 90       	pop	r7
    4d76:	6f 90       	pop	r6
    4d78:	08 95       	ret

00004d7a <_Z21rv3028_set_offset_RAMj>:
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	00 d0       	rcall	.+0      	; 0x4d80 <_Z21rv3028_set_offset_RAMj+0x6>
    4d80:	cd b7       	in	r28, 0x3d	; 61
    4d82:	de b7       	in	r29, 0x3e	; 62
    4d84:	20 e1       	ldi	r18, 0x10	; 16
    4d86:	2a 83       	std	Y+2, r18	; 0x02
    4d88:	9c 01       	movw	r18, r24
    4d8a:	36 95       	lsr	r19
    4d8c:	27 95       	ror	r18
    4d8e:	29 83       	std	Y+1, r18	; 0x01
    4d90:	80 ff       	sbrs	r24, 0
    4d92:	02 c0       	rjmp	.+4      	; 0x4d98 <_Z21rv3028_set_offset_RAMj+0x1e>
    4d94:	80 e9       	ldi	r24, 0x90	; 144
    4d96:	8a 83       	std	Y+2, r24	; 0x02
    4d98:	22 e0       	ldi	r18, 0x02	; 2
    4d9a:	ae 01       	movw	r20, r28
    4d9c:	4f 5f       	subi	r20, 0xFF	; 255
    4d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4da0:	66 e3       	ldi	r22, 0x36	; 54
    4da2:	84 ea       	ldi	r24, 0xA4	; 164
    4da4:	0e 94 35 07 	call	0xe6a	; 0xe6a <_Z16i2c_device_writehhPhh>
    4da8:	0f 90       	pop	r0
    4daa:	0f 90       	pop	r0
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	08 95       	ret

00004db2 <_Z18waitForEEPROMReadyv>:
    4db2:	cf 93       	push	r28
    4db4:	df 93       	push	r29
    4db6:	1f 92       	push	r1
    4db8:	cd b7       	in	r28, 0x3d	; 61
    4dba:	de b7       	in	r29, 0x3e	; 62
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	89 83       	std	Y+1, r24	; 0x01
    4dc0:	21 e0       	ldi	r18, 0x01	; 1
    4dc2:	ae 01       	movw	r20, r28
    4dc4:	4f 5f       	subi	r20, 0xFF	; 255
    4dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc8:	6e e0       	ldi	r22, 0x0E	; 14
    4dca:	84 ea       	ldi	r24, 0xA4	; 164
    4dcc:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z15i2c_device_readhhPhh>
    4dd0:	81 11       	cpse	r24, r1
    4dd2:	07 c0       	rjmp	.+14     	; 0x4de2 <_Z18waitForEEPROMReadyv+0x30>
    4dd4:	89 81       	ldd	r24, Y+1	; 0x01
    4dd6:	80 78       	andi	r24, 0x80	; 128
    4dd8:	89 83       	std	Y+1, r24	; 0x01
    4dda:	81 11       	cpse	r24, r1
    4ddc:	f1 cf       	rjmp	.-30     	; 0x4dc0 <_Z18waitForEEPROMReadyv+0xe>
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	03 c0       	rjmp	.+6      	; 0x4de8 <_Z18waitForEEPROMReadyv+0x36>
    4de2:	89 81       	ldd	r24, Y+1	; 0x01
    4de4:	88 23       	and	r24, r24
    4de6:	d9 f3       	breq	.-10     	; 0x4dde <_Z18waitForEEPROMReadyv+0x2c>
    4de8:	0f 90       	pop	r0
    4dea:	df 91       	pop	r29
    4dec:	cf 91       	pop	r28
    4dee:	08 95       	ret

00004df0 <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    4df0:	cf 93       	push	r28
    4df2:	df 93       	push	r29
    4df4:	1f 92       	push	r1
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    4dfa:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4dfc:	21 e0       	ldi	r18, 0x01	; 1
    4dfe:	ae 01       	movw	r20, r28
    4e00:	4f 5f       	subi	r20, 0xFF	; 255
    4e02:	5f 4f       	sbci	r21, 0xFF	; 255
    4e04:	67 e2       	ldi	r22, 0x27	; 39
    4e06:	84 ea       	ldi	r24, 0xA4	; 164
    4e08:	0e 94 35 07 	call	0xe6a	; 0xe6a <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    4e0c:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    4e10:	82 e1       	ldi	r24, 0x12	; 18
    4e12:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4e14:	21 e0       	ldi	r18, 0x01	; 1
    4e16:	ae 01       	movw	r20, r28
    4e18:	4f 5f       	subi	r20, 0xFF	; 255
    4e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e1c:	67 e2       	ldi	r22, 0x27	; 39
    4e1e:	84 ea       	ldi	r24, 0xA4	; 164
    4e20:	0e 94 35 07 	call	0xe6a	; 0xe6a <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    4e24:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <_Z18waitForEEPROMReadyv>
	}
    4e28:	0f 90       	pop	r0
    4e2a:	df 91       	pop	r29
    4e2c:	cf 91       	pop	r28
    4e2e:	08 95       	ret

00004e30 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	00 d0       	rcall	.+0      	; 0x4e36 <_Z21rv3028_get_offset_RAMv+0x6>
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    4e3a:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    4e3e:	22 e0       	ldi	r18, 0x02	; 2
    4e40:	ae 01       	movw	r20, r28
    4e42:	4f 5f       	subi	r20, 0xFF	; 255
    4e44:	5f 4f       	sbci	r21, 0xFF	; 255
    4e46:	66 e3       	ldi	r22, 0x36	; 54
    4e48:	84 ea       	ldi	r24, 0xA4	; 164
    4e4a:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	88 0f       	add	r24, r24
    4e54:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    4e56:	2a 81       	ldd	r18, Y+2	; 0x02
    4e58:	22 23       	and	r18, r18
    4e5a:	0c f4       	brge	.+2      	; 0x4e5e <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    4e5c:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	df 91       	pop	r29
    4e64:	cf 91       	pop	r28
    4e66:	08 95       	ret

00004e68 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    4e68:	cf 93       	push	r28
    4e6a:	df 93       	push	r29
    4e6c:	00 d0       	rcall	.+0      	; 0x4e6e <_Z13rv3028_1s_sqwv+0x6>
    4e6e:	cd b7       	in	r28, 0x3d	; 61
    4e70:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    4e72:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    4e74:	1a 82       	std	Y+2, r1	; 0x02
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY

			refreshRAMfromEEPROM();
    4e76:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <_Z20refreshRAMfromEEPROMv>

			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY_DEBUG
/* End debugging */

			if(!status)
    4e7a:	89 81       	ldd	r24, Y+1	; 0x01
    4e7c:	81 11       	cpse	r24, r1
    4e7e:	0c c0       	rjmp	.+24     	; 0x4e98 <_Z13rv3028_1s_sqwv+0x30>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    4e80:	21 e0       	ldi	r18, 0x01	; 1
    4e82:	ae 01       	movw	r20, r28
    4e84:	4f 5f       	subi	r20, 0xFF	; 255
    4e86:	5f 4f       	sbci	r21, 0xFF	; 255
    4e88:	6e e0       	ldi	r22, 0x0E	; 14
    4e8a:	84 ea       	ldi	r24, 0xA4	; 164
    4e8c:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	8f 76       	andi	r24, 0x6F	; 111
    4e94:	89 83       	std	Y+1, r24	; 0x01
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <_Z13rv3028_1s_sqwv+0x34>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    4e98:	80 e8       	ldi	r24, 0x80	; 128
    4e9a:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    4e9c:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    4e9e:	21 e0       	ldi	r18, 0x01	; 1
    4ea0:	ae 01       	movw	r20, r28
    4ea2:	4e 5f       	subi	r20, 0xFE	; 254
    4ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea6:	6e e0       	ldi	r22, 0x0E	; 14
    4ea8:	84 ea       	ldi	r24, 0xA4	; 164
    4eaa:	0e 94 35 07 	call	0xe6a	; 0xe6a <_Z16i2c_device_writehhPhh>

			return(status);
		}
    4eae:	89 81       	ldd	r24, Y+1	; 0x01
    4eb0:	0f 90       	pop	r0
    4eb2:	0f 90       	pop	r0
    4eb4:	df 91       	pop	r29
    4eb6:	cf 91       	pop	r28
    4eb8:	08 95       	ret

00004eba <__subsf3>:
    4eba:	50 58       	subi	r21, 0x80	; 128

00004ebc <__addsf3>:
    4ebc:	bb 27       	eor	r27, r27
    4ebe:	aa 27       	eor	r26, r26
    4ec0:	0e 94 75 27 	call	0x4eea	; 0x4eea <__addsf3x>
    4ec4:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__fp_round>
    4ec8:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__fp_pscA>
    4ecc:	38 f0       	brcs	.+14     	; 0x4edc <__addsf3+0x20>
    4ece:	0e 94 ed 28 	call	0x51da	; 0x51da <__fp_pscB>
    4ed2:	20 f0       	brcs	.+8      	; 0x4edc <__addsf3+0x20>
    4ed4:	39 f4       	brne	.+14     	; 0x4ee4 <__addsf3+0x28>
    4ed6:	9f 3f       	cpi	r25, 0xFF	; 255
    4ed8:	19 f4       	brne	.+6      	; 0x4ee0 <__addsf3+0x24>
    4eda:	26 f4       	brtc	.+8      	; 0x4ee4 <__addsf3+0x28>
    4edc:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__fp_nan>
    4ee0:	0e f4       	brtc	.+2      	; 0x4ee4 <__addsf3+0x28>
    4ee2:	e0 95       	com	r30
    4ee4:	e7 fb       	bst	r30, 7
    4ee6:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__fp_inf>

00004eea <__addsf3x>:
    4eea:	e9 2f       	mov	r30, r25
    4eec:	0e 94 44 29 	call	0x5288	; 0x5288 <__fp_split3>
    4ef0:	58 f3       	brcs	.-42     	; 0x4ec8 <__addsf3+0xc>
    4ef2:	ba 17       	cp	r27, r26
    4ef4:	62 07       	cpc	r22, r18
    4ef6:	73 07       	cpc	r23, r19
    4ef8:	84 07       	cpc	r24, r20
    4efa:	95 07       	cpc	r25, r21
    4efc:	20 f0       	brcs	.+8      	; 0x4f06 <__addsf3x+0x1c>
    4efe:	79 f4       	brne	.+30     	; 0x4f1e <__addsf3x+0x34>
    4f00:	a6 f5       	brtc	.+104    	; 0x4f6a <__addsf3x+0x80>
    4f02:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__fp_zero>
    4f06:	0e f4       	brtc	.+2      	; 0x4f0a <__addsf3x+0x20>
    4f08:	e0 95       	com	r30
    4f0a:	0b 2e       	mov	r0, r27
    4f0c:	ba 2f       	mov	r27, r26
    4f0e:	a0 2d       	mov	r26, r0
    4f10:	0b 01       	movw	r0, r22
    4f12:	b9 01       	movw	r22, r18
    4f14:	90 01       	movw	r18, r0
    4f16:	0c 01       	movw	r0, r24
    4f18:	ca 01       	movw	r24, r20
    4f1a:	a0 01       	movw	r20, r0
    4f1c:	11 24       	eor	r1, r1
    4f1e:	ff 27       	eor	r31, r31
    4f20:	59 1b       	sub	r21, r25
    4f22:	99 f0       	breq	.+38     	; 0x4f4a <__addsf3x+0x60>
    4f24:	59 3f       	cpi	r21, 0xF9	; 249
    4f26:	50 f4       	brcc	.+20     	; 0x4f3c <__addsf3x+0x52>
    4f28:	50 3e       	cpi	r21, 0xE0	; 224
    4f2a:	68 f1       	brcs	.+90     	; 0x4f86 <__addsf3x+0x9c>
    4f2c:	1a 16       	cp	r1, r26
    4f2e:	f0 40       	sbci	r31, 0x00	; 0
    4f30:	a2 2f       	mov	r26, r18
    4f32:	23 2f       	mov	r18, r19
    4f34:	34 2f       	mov	r19, r20
    4f36:	44 27       	eor	r20, r20
    4f38:	58 5f       	subi	r21, 0xF8	; 248
    4f3a:	f3 cf       	rjmp	.-26     	; 0x4f22 <__addsf3x+0x38>
    4f3c:	46 95       	lsr	r20
    4f3e:	37 95       	ror	r19
    4f40:	27 95       	ror	r18
    4f42:	a7 95       	ror	r26
    4f44:	f0 40       	sbci	r31, 0x00	; 0
    4f46:	53 95       	inc	r21
    4f48:	c9 f7       	brne	.-14     	; 0x4f3c <__addsf3x+0x52>
    4f4a:	7e f4       	brtc	.+30     	; 0x4f6a <__addsf3x+0x80>
    4f4c:	1f 16       	cp	r1, r31
    4f4e:	ba 0b       	sbc	r27, r26
    4f50:	62 0b       	sbc	r22, r18
    4f52:	73 0b       	sbc	r23, r19
    4f54:	84 0b       	sbc	r24, r20
    4f56:	ba f0       	brmi	.+46     	; 0x4f86 <__addsf3x+0x9c>
    4f58:	91 50       	subi	r25, 0x01	; 1
    4f5a:	a1 f0       	breq	.+40     	; 0x4f84 <__addsf3x+0x9a>
    4f5c:	ff 0f       	add	r31, r31
    4f5e:	bb 1f       	adc	r27, r27
    4f60:	66 1f       	adc	r22, r22
    4f62:	77 1f       	adc	r23, r23
    4f64:	88 1f       	adc	r24, r24
    4f66:	c2 f7       	brpl	.-16     	; 0x4f58 <__addsf3x+0x6e>
    4f68:	0e c0       	rjmp	.+28     	; 0x4f86 <__addsf3x+0x9c>
    4f6a:	ba 0f       	add	r27, r26
    4f6c:	62 1f       	adc	r22, r18
    4f6e:	73 1f       	adc	r23, r19
    4f70:	84 1f       	adc	r24, r20
    4f72:	48 f4       	brcc	.+18     	; 0x4f86 <__addsf3x+0x9c>
    4f74:	87 95       	ror	r24
    4f76:	77 95       	ror	r23
    4f78:	67 95       	ror	r22
    4f7a:	b7 95       	ror	r27
    4f7c:	f7 95       	ror	r31
    4f7e:	9e 3f       	cpi	r25, 0xFE	; 254
    4f80:	08 f0       	brcs	.+2      	; 0x4f84 <__addsf3x+0x9a>
    4f82:	b0 cf       	rjmp	.-160    	; 0x4ee4 <__addsf3+0x28>
    4f84:	93 95       	inc	r25
    4f86:	88 0f       	add	r24, r24
    4f88:	08 f0       	brcs	.+2      	; 0x4f8c <__addsf3x+0xa2>
    4f8a:	99 27       	eor	r25, r25
    4f8c:	ee 0f       	add	r30, r30
    4f8e:	97 95       	ror	r25
    4f90:	87 95       	ror	r24
    4f92:	08 95       	ret

00004f94 <__cmpsf2>:
    4f94:	0e 94 b9 28 	call	0x5172	; 0x5172 <__fp_cmp>
    4f98:	08 f4       	brcc	.+2      	; 0x4f9c <__cmpsf2+0x8>
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	08 95       	ret

00004f9e <cos>:
    4f9e:	0e 94 f6 28 	call	0x51ec	; 0x51ec <__fp_rempio2>
    4fa2:	e3 95       	inc	r30
    4fa4:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__fp_sinus>

00004fa8 <__divsf3>:
    4fa8:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__divsf3x>
    4fac:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__fp_round>
    4fb0:	0e 94 ed 28 	call	0x51da	; 0x51da <__fp_pscB>
    4fb4:	58 f0       	brcs	.+22     	; 0x4fcc <__divsf3+0x24>
    4fb6:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__fp_pscA>
    4fba:	40 f0       	brcs	.+16     	; 0x4fcc <__divsf3+0x24>
    4fbc:	29 f4       	brne	.+10     	; 0x4fc8 <__divsf3+0x20>
    4fbe:	5f 3f       	cpi	r21, 0xFF	; 255
    4fc0:	29 f0       	breq	.+10     	; 0x4fcc <__divsf3+0x24>
    4fc2:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__fp_inf>
    4fc6:	51 11       	cpse	r21, r1
    4fc8:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__fp_szero>
    4fcc:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__fp_nan>

00004fd0 <__divsf3x>:
    4fd0:	0e 94 44 29 	call	0x5288	; 0x5288 <__fp_split3>
    4fd4:	68 f3       	brcs	.-38     	; 0x4fb0 <__divsf3+0x8>

00004fd6 <__divsf3_pse>:
    4fd6:	99 23       	and	r25, r25
    4fd8:	b1 f3       	breq	.-20     	; 0x4fc6 <__divsf3+0x1e>
    4fda:	55 23       	and	r21, r21
    4fdc:	91 f3       	breq	.-28     	; 0x4fc2 <__divsf3+0x1a>
    4fde:	95 1b       	sub	r25, r21
    4fe0:	55 0b       	sbc	r21, r21
    4fe2:	bb 27       	eor	r27, r27
    4fe4:	aa 27       	eor	r26, r26
    4fe6:	62 17       	cp	r22, r18
    4fe8:	73 07       	cpc	r23, r19
    4fea:	84 07       	cpc	r24, r20
    4fec:	38 f0       	brcs	.+14     	; 0x4ffc <__divsf3_pse+0x26>
    4fee:	9f 5f       	subi	r25, 0xFF	; 255
    4ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ff2:	22 0f       	add	r18, r18
    4ff4:	33 1f       	adc	r19, r19
    4ff6:	44 1f       	adc	r20, r20
    4ff8:	aa 1f       	adc	r26, r26
    4ffa:	a9 f3       	breq	.-22     	; 0x4fe6 <__divsf3_pse+0x10>
    4ffc:	35 d0       	rcall	.+106    	; 0x5068 <__divsf3_pse+0x92>
    4ffe:	0e 2e       	mov	r0, r30
    5000:	3a f0       	brmi	.+14     	; 0x5010 <__divsf3_pse+0x3a>
    5002:	e0 e8       	ldi	r30, 0x80	; 128
    5004:	32 d0       	rcall	.+100    	; 0x506a <__divsf3_pse+0x94>
    5006:	91 50       	subi	r25, 0x01	; 1
    5008:	50 40       	sbci	r21, 0x00	; 0
    500a:	e6 95       	lsr	r30
    500c:	00 1c       	adc	r0, r0
    500e:	ca f7       	brpl	.-14     	; 0x5002 <__divsf3_pse+0x2c>
    5010:	2b d0       	rcall	.+86     	; 0x5068 <__divsf3_pse+0x92>
    5012:	fe 2f       	mov	r31, r30
    5014:	29 d0       	rcall	.+82     	; 0x5068 <__divsf3_pse+0x92>
    5016:	66 0f       	add	r22, r22
    5018:	77 1f       	adc	r23, r23
    501a:	88 1f       	adc	r24, r24
    501c:	bb 1f       	adc	r27, r27
    501e:	26 17       	cp	r18, r22
    5020:	37 07       	cpc	r19, r23
    5022:	48 07       	cpc	r20, r24
    5024:	ab 07       	cpc	r26, r27
    5026:	b0 e8       	ldi	r27, 0x80	; 128
    5028:	09 f0       	breq	.+2      	; 0x502c <__divsf3_pse+0x56>
    502a:	bb 0b       	sbc	r27, r27
    502c:	80 2d       	mov	r24, r0
    502e:	bf 01       	movw	r22, r30
    5030:	ff 27       	eor	r31, r31
    5032:	93 58       	subi	r25, 0x83	; 131
    5034:	5f 4f       	sbci	r21, 0xFF	; 255
    5036:	3a f0       	brmi	.+14     	; 0x5046 <__divsf3_pse+0x70>
    5038:	9e 3f       	cpi	r25, 0xFE	; 254
    503a:	51 05       	cpc	r21, r1
    503c:	78 f0       	brcs	.+30     	; 0x505c <__divsf3_pse+0x86>
    503e:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__fp_inf>
    5042:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__fp_szero>
    5046:	5f 3f       	cpi	r21, 0xFF	; 255
    5048:	e4 f3       	brlt	.-8      	; 0x5042 <__divsf3_pse+0x6c>
    504a:	98 3e       	cpi	r25, 0xE8	; 232
    504c:	d4 f3       	brlt	.-12     	; 0x5042 <__divsf3_pse+0x6c>
    504e:	86 95       	lsr	r24
    5050:	77 95       	ror	r23
    5052:	67 95       	ror	r22
    5054:	b7 95       	ror	r27
    5056:	f7 95       	ror	r31
    5058:	9f 5f       	subi	r25, 0xFF	; 255
    505a:	c9 f7       	brne	.-14     	; 0x504e <__divsf3_pse+0x78>
    505c:	88 0f       	add	r24, r24
    505e:	91 1d       	adc	r25, r1
    5060:	96 95       	lsr	r25
    5062:	87 95       	ror	r24
    5064:	97 f9       	bld	r25, 7
    5066:	08 95       	ret
    5068:	e1 e0       	ldi	r30, 0x01	; 1
    506a:	66 0f       	add	r22, r22
    506c:	77 1f       	adc	r23, r23
    506e:	88 1f       	adc	r24, r24
    5070:	bb 1f       	adc	r27, r27
    5072:	62 17       	cp	r22, r18
    5074:	73 07       	cpc	r23, r19
    5076:	84 07       	cpc	r24, r20
    5078:	ba 07       	cpc	r27, r26
    507a:	20 f0       	brcs	.+8      	; 0x5084 <__divsf3_pse+0xae>
    507c:	62 1b       	sub	r22, r18
    507e:	73 0b       	sbc	r23, r19
    5080:	84 0b       	sbc	r24, r20
    5082:	ba 0b       	sbc	r27, r26
    5084:	ee 1f       	adc	r30, r30
    5086:	88 f7       	brcc	.-30     	; 0x506a <__divsf3_pse+0x94>
    5088:	e0 95       	com	r30
    508a:	08 95       	ret

0000508c <__fixsfsi>:
    508c:	0e 94 4d 28 	call	0x509a	; 0x509a <__fixunssfsi>
    5090:	68 94       	set
    5092:	b1 11       	cpse	r27, r1
    5094:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__fp_szero>
    5098:	08 95       	ret

0000509a <__fixunssfsi>:
    509a:	0e 94 4c 29 	call	0x5298	; 0x5298 <__fp_splitA>
    509e:	88 f0       	brcs	.+34     	; 0x50c2 <__fixunssfsi+0x28>
    50a0:	9f 57       	subi	r25, 0x7F	; 127
    50a2:	98 f0       	brcs	.+38     	; 0x50ca <__fixunssfsi+0x30>
    50a4:	b9 2f       	mov	r27, r25
    50a6:	99 27       	eor	r25, r25
    50a8:	b7 51       	subi	r27, 0x17	; 23
    50aa:	b0 f0       	brcs	.+44     	; 0x50d8 <__fixunssfsi+0x3e>
    50ac:	e1 f0       	breq	.+56     	; 0x50e6 <__fixunssfsi+0x4c>
    50ae:	66 0f       	add	r22, r22
    50b0:	77 1f       	adc	r23, r23
    50b2:	88 1f       	adc	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	1a f0       	brmi	.+6      	; 0x50be <__fixunssfsi+0x24>
    50b8:	ba 95       	dec	r27
    50ba:	c9 f7       	brne	.-14     	; 0x50ae <__fixunssfsi+0x14>
    50bc:	14 c0       	rjmp	.+40     	; 0x50e6 <__fixunssfsi+0x4c>
    50be:	b1 30       	cpi	r27, 0x01	; 1
    50c0:	91 f0       	breq	.+36     	; 0x50e6 <__fixunssfsi+0x4c>
    50c2:	0e 94 66 29 	call	0x52cc	; 0x52cc <__fp_zero>
    50c6:	b1 e0       	ldi	r27, 0x01	; 1
    50c8:	08 95       	ret
    50ca:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__fp_zero>
    50ce:	67 2f       	mov	r22, r23
    50d0:	78 2f       	mov	r23, r24
    50d2:	88 27       	eor	r24, r24
    50d4:	b8 5f       	subi	r27, 0xF8	; 248
    50d6:	39 f0       	breq	.+14     	; 0x50e6 <__fixunssfsi+0x4c>
    50d8:	b9 3f       	cpi	r27, 0xF9	; 249
    50da:	cc f3       	brlt	.-14     	; 0x50ce <__fixunssfsi+0x34>
    50dc:	86 95       	lsr	r24
    50de:	77 95       	ror	r23
    50e0:	67 95       	ror	r22
    50e2:	b3 95       	inc	r27
    50e4:	d9 f7       	brne	.-10     	; 0x50dc <__fixunssfsi+0x42>
    50e6:	3e f4       	brtc	.+14     	; 0x50f6 <__fixunssfsi+0x5c>
    50e8:	90 95       	com	r25
    50ea:	80 95       	com	r24
    50ec:	70 95       	com	r23
    50ee:	61 95       	neg	r22
    50f0:	7f 4f       	sbci	r23, 0xFF	; 255
    50f2:	8f 4f       	sbci	r24, 0xFF	; 255
    50f4:	9f 4f       	sbci	r25, 0xFF	; 255
    50f6:	08 95       	ret

000050f8 <__floatunsisf>:
    50f8:	e8 94       	clt
    50fa:	09 c0       	rjmp	.+18     	; 0x510e <__floatsisf+0x12>

000050fc <__floatsisf>:
    50fc:	97 fb       	bst	r25, 7
    50fe:	3e f4       	brtc	.+14     	; 0x510e <__floatsisf+0x12>
    5100:	90 95       	com	r25
    5102:	80 95       	com	r24
    5104:	70 95       	com	r23
    5106:	61 95       	neg	r22
    5108:	7f 4f       	sbci	r23, 0xFF	; 255
    510a:	8f 4f       	sbci	r24, 0xFF	; 255
    510c:	9f 4f       	sbci	r25, 0xFF	; 255
    510e:	99 23       	and	r25, r25
    5110:	a9 f0       	breq	.+42     	; 0x513c <__floatsisf+0x40>
    5112:	f9 2f       	mov	r31, r25
    5114:	96 e9       	ldi	r25, 0x96	; 150
    5116:	bb 27       	eor	r27, r27
    5118:	93 95       	inc	r25
    511a:	f6 95       	lsr	r31
    511c:	87 95       	ror	r24
    511e:	77 95       	ror	r23
    5120:	67 95       	ror	r22
    5122:	b7 95       	ror	r27
    5124:	f1 11       	cpse	r31, r1
    5126:	f8 cf       	rjmp	.-16     	; 0x5118 <__floatsisf+0x1c>
    5128:	fa f4       	brpl	.+62     	; 0x5168 <__floatsisf+0x6c>
    512a:	bb 0f       	add	r27, r27
    512c:	11 f4       	brne	.+4      	; 0x5132 <__floatsisf+0x36>
    512e:	60 ff       	sbrs	r22, 0
    5130:	1b c0       	rjmp	.+54     	; 0x5168 <__floatsisf+0x6c>
    5132:	6f 5f       	subi	r22, 0xFF	; 255
    5134:	7f 4f       	sbci	r23, 0xFF	; 255
    5136:	8f 4f       	sbci	r24, 0xFF	; 255
    5138:	9f 4f       	sbci	r25, 0xFF	; 255
    513a:	16 c0       	rjmp	.+44     	; 0x5168 <__floatsisf+0x6c>
    513c:	88 23       	and	r24, r24
    513e:	11 f0       	breq	.+4      	; 0x5144 <__floatsisf+0x48>
    5140:	96 e9       	ldi	r25, 0x96	; 150
    5142:	11 c0       	rjmp	.+34     	; 0x5166 <__floatsisf+0x6a>
    5144:	77 23       	and	r23, r23
    5146:	21 f0       	breq	.+8      	; 0x5150 <__floatsisf+0x54>
    5148:	9e e8       	ldi	r25, 0x8E	; 142
    514a:	87 2f       	mov	r24, r23
    514c:	76 2f       	mov	r23, r22
    514e:	05 c0       	rjmp	.+10     	; 0x515a <__floatsisf+0x5e>
    5150:	66 23       	and	r22, r22
    5152:	71 f0       	breq	.+28     	; 0x5170 <__floatsisf+0x74>
    5154:	96 e8       	ldi	r25, 0x86	; 134
    5156:	86 2f       	mov	r24, r22
    5158:	70 e0       	ldi	r23, 0x00	; 0
    515a:	60 e0       	ldi	r22, 0x00	; 0
    515c:	2a f0       	brmi	.+10     	; 0x5168 <__floatsisf+0x6c>
    515e:	9a 95       	dec	r25
    5160:	66 0f       	add	r22, r22
    5162:	77 1f       	adc	r23, r23
    5164:	88 1f       	adc	r24, r24
    5166:	da f7       	brpl	.-10     	; 0x515e <__floatsisf+0x62>
    5168:	88 0f       	add	r24, r24
    516a:	96 95       	lsr	r25
    516c:	87 95       	ror	r24
    516e:	97 f9       	bld	r25, 7
    5170:	08 95       	ret

00005172 <__fp_cmp>:
    5172:	99 0f       	add	r25, r25
    5174:	00 08       	sbc	r0, r0
    5176:	55 0f       	add	r21, r21
    5178:	aa 0b       	sbc	r26, r26
    517a:	e0 e8       	ldi	r30, 0x80	; 128
    517c:	fe ef       	ldi	r31, 0xFE	; 254
    517e:	16 16       	cp	r1, r22
    5180:	17 06       	cpc	r1, r23
    5182:	e8 07       	cpc	r30, r24
    5184:	f9 07       	cpc	r31, r25
    5186:	c0 f0       	brcs	.+48     	; 0x51b8 <__fp_cmp+0x46>
    5188:	12 16       	cp	r1, r18
    518a:	13 06       	cpc	r1, r19
    518c:	e4 07       	cpc	r30, r20
    518e:	f5 07       	cpc	r31, r21
    5190:	98 f0       	brcs	.+38     	; 0x51b8 <__fp_cmp+0x46>
    5192:	62 1b       	sub	r22, r18
    5194:	73 0b       	sbc	r23, r19
    5196:	84 0b       	sbc	r24, r20
    5198:	95 0b       	sbc	r25, r21
    519a:	39 f4       	brne	.+14     	; 0x51aa <__fp_cmp+0x38>
    519c:	0a 26       	eor	r0, r26
    519e:	61 f0       	breq	.+24     	; 0x51b8 <__fp_cmp+0x46>
    51a0:	23 2b       	or	r18, r19
    51a2:	24 2b       	or	r18, r20
    51a4:	25 2b       	or	r18, r21
    51a6:	21 f4       	brne	.+8      	; 0x51b0 <__fp_cmp+0x3e>
    51a8:	08 95       	ret
    51aa:	0a 26       	eor	r0, r26
    51ac:	09 f4       	brne	.+2      	; 0x51b0 <__fp_cmp+0x3e>
    51ae:	a1 40       	sbci	r26, 0x01	; 1
    51b0:	a6 95       	lsr	r26
    51b2:	8f ef       	ldi	r24, 0xFF	; 255
    51b4:	81 1d       	adc	r24, r1
    51b6:	81 1d       	adc	r24, r1
    51b8:	08 95       	ret

000051ba <__fp_inf>:
    51ba:	97 f9       	bld	r25, 7
    51bc:	9f 67       	ori	r25, 0x7F	; 127
    51be:	80 e8       	ldi	r24, 0x80	; 128
    51c0:	70 e0       	ldi	r23, 0x00	; 0
    51c2:	60 e0       	ldi	r22, 0x00	; 0
    51c4:	08 95       	ret

000051c6 <__fp_nan>:
    51c6:	9f ef       	ldi	r25, 0xFF	; 255
    51c8:	80 ec       	ldi	r24, 0xC0	; 192
    51ca:	08 95       	ret

000051cc <__fp_pscA>:
    51cc:	00 24       	eor	r0, r0
    51ce:	0a 94       	dec	r0
    51d0:	16 16       	cp	r1, r22
    51d2:	17 06       	cpc	r1, r23
    51d4:	18 06       	cpc	r1, r24
    51d6:	09 06       	cpc	r0, r25
    51d8:	08 95       	ret

000051da <__fp_pscB>:
    51da:	00 24       	eor	r0, r0
    51dc:	0a 94       	dec	r0
    51de:	12 16       	cp	r1, r18
    51e0:	13 06       	cpc	r1, r19
    51e2:	14 06       	cpc	r1, r20
    51e4:	05 06       	cpc	r0, r21
    51e6:	08 95       	ret
    51e8:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__fp_nan>

000051ec <__fp_rempio2>:
    51ec:	0e 94 4c 29 	call	0x5298	; 0x5298 <__fp_splitA>
    51f0:	d8 f3       	brcs	.-10     	; 0x51e8 <__fp_pscB+0xe>
    51f2:	e8 94       	clt
    51f4:	e0 e0       	ldi	r30, 0x00	; 0
    51f6:	bb 27       	eor	r27, r27
    51f8:	9f 57       	subi	r25, 0x7F	; 127
    51fa:	f0 f0       	brcs	.+60     	; 0x5238 <__fp_rempio2+0x4c>
    51fc:	2a ed       	ldi	r18, 0xDA	; 218
    51fe:	3f e0       	ldi	r19, 0x0F	; 15
    5200:	49 ec       	ldi	r20, 0xC9	; 201
    5202:	06 c0       	rjmp	.+12     	; 0x5210 <__fp_rempio2+0x24>
    5204:	ee 0f       	add	r30, r30
    5206:	bb 0f       	add	r27, r27
    5208:	66 1f       	adc	r22, r22
    520a:	77 1f       	adc	r23, r23
    520c:	88 1f       	adc	r24, r24
    520e:	28 f0       	brcs	.+10     	; 0x521a <__fp_rempio2+0x2e>
    5210:	b2 3a       	cpi	r27, 0xA2	; 162
    5212:	62 07       	cpc	r22, r18
    5214:	73 07       	cpc	r23, r19
    5216:	84 07       	cpc	r24, r20
    5218:	28 f0       	brcs	.+10     	; 0x5224 <__fp_rempio2+0x38>
    521a:	b2 5a       	subi	r27, 0xA2	; 162
    521c:	62 0b       	sbc	r22, r18
    521e:	73 0b       	sbc	r23, r19
    5220:	84 0b       	sbc	r24, r20
    5222:	e3 95       	inc	r30
    5224:	9a 95       	dec	r25
    5226:	72 f7       	brpl	.-36     	; 0x5204 <__fp_rempio2+0x18>
    5228:	80 38       	cpi	r24, 0x80	; 128
    522a:	30 f4       	brcc	.+12     	; 0x5238 <__fp_rempio2+0x4c>
    522c:	9a 95       	dec	r25
    522e:	bb 0f       	add	r27, r27
    5230:	66 1f       	adc	r22, r22
    5232:	77 1f       	adc	r23, r23
    5234:	88 1f       	adc	r24, r24
    5236:	d2 f7       	brpl	.-12     	; 0x522c <__fp_rempio2+0x40>
    5238:	90 48       	sbci	r25, 0x80	; 128
    523a:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <__fp_mpack_finite>

0000523e <__fp_round>:
    523e:	09 2e       	mov	r0, r25
    5240:	03 94       	inc	r0
    5242:	00 0c       	add	r0, r0
    5244:	11 f4       	brne	.+4      	; 0x524a <__fp_round+0xc>
    5246:	88 23       	and	r24, r24
    5248:	52 f0       	brmi	.+20     	; 0x525e <__fp_round+0x20>
    524a:	bb 0f       	add	r27, r27
    524c:	40 f4       	brcc	.+16     	; 0x525e <__fp_round+0x20>
    524e:	bf 2b       	or	r27, r31
    5250:	11 f4       	brne	.+4      	; 0x5256 <__fp_round+0x18>
    5252:	60 ff       	sbrs	r22, 0
    5254:	04 c0       	rjmp	.+8      	; 0x525e <__fp_round+0x20>
    5256:	6f 5f       	subi	r22, 0xFF	; 255
    5258:	7f 4f       	sbci	r23, 0xFF	; 255
    525a:	8f 4f       	sbci	r24, 0xFF	; 255
    525c:	9f 4f       	sbci	r25, 0xFF	; 255
    525e:	08 95       	ret

00005260 <__fp_sinus>:
    5260:	ef 93       	push	r30
    5262:	e0 ff       	sbrs	r30, 0
    5264:	07 c0       	rjmp	.+14     	; 0x5274 <__fp_sinus+0x14>
    5266:	a2 ea       	ldi	r26, 0xA2	; 162
    5268:	2a ed       	ldi	r18, 0xDA	; 218
    526a:	3f e0       	ldi	r19, 0x0F	; 15
    526c:	49 ec       	ldi	r20, 0xC9	; 201
    526e:	5f eb       	ldi	r21, 0xBF	; 191
    5270:	0e 94 75 27 	call	0x4eea	; 0x4eea <__addsf3x>
    5274:	0e 94 1f 29 	call	0x523e	; 0x523e <__fp_round>
    5278:	0f 90       	pop	r0
    527a:	03 94       	inc	r0
    527c:	01 fc       	sbrc	r0, 1
    527e:	90 58       	subi	r25, 0x80	; 128
    5280:	e8 ed       	ldi	r30, 0xD8	; 216
    5282:	f1 e0       	ldi	r31, 0x01	; 1
    5284:	0c 94 2c 2a 	jmp	0x5458	; 0x5458 <__fp_powsodd>

00005288 <__fp_split3>:
    5288:	57 fd       	sbrc	r21, 7
    528a:	90 58       	subi	r25, 0x80	; 128
    528c:	44 0f       	add	r20, r20
    528e:	55 1f       	adc	r21, r21
    5290:	59 f0       	breq	.+22     	; 0x52a8 <__fp_splitA+0x10>
    5292:	5f 3f       	cpi	r21, 0xFF	; 255
    5294:	71 f0       	breq	.+28     	; 0x52b2 <__fp_splitA+0x1a>
    5296:	47 95       	ror	r20

00005298 <__fp_splitA>:
    5298:	88 0f       	add	r24, r24
    529a:	97 fb       	bst	r25, 7
    529c:	99 1f       	adc	r25, r25
    529e:	61 f0       	breq	.+24     	; 0x52b8 <__fp_splitA+0x20>
    52a0:	9f 3f       	cpi	r25, 0xFF	; 255
    52a2:	79 f0       	breq	.+30     	; 0x52c2 <__fp_splitA+0x2a>
    52a4:	87 95       	ror	r24
    52a6:	08 95       	ret
    52a8:	12 16       	cp	r1, r18
    52aa:	13 06       	cpc	r1, r19
    52ac:	14 06       	cpc	r1, r20
    52ae:	55 1f       	adc	r21, r21
    52b0:	f2 cf       	rjmp	.-28     	; 0x5296 <__fp_split3+0xe>
    52b2:	46 95       	lsr	r20
    52b4:	f1 df       	rcall	.-30     	; 0x5298 <__fp_splitA>
    52b6:	08 c0       	rjmp	.+16     	; 0x52c8 <__fp_splitA+0x30>
    52b8:	16 16       	cp	r1, r22
    52ba:	17 06       	cpc	r1, r23
    52bc:	18 06       	cpc	r1, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	f1 cf       	rjmp	.-30     	; 0x52a4 <__fp_splitA+0xc>
    52c2:	86 95       	lsr	r24
    52c4:	71 05       	cpc	r23, r1
    52c6:	61 05       	cpc	r22, r1
    52c8:	08 94       	sec
    52ca:	08 95       	ret

000052cc <__fp_zero>:
    52cc:	e8 94       	clt

000052ce <__fp_szero>:
    52ce:	bb 27       	eor	r27, r27
    52d0:	66 27       	eor	r22, r22
    52d2:	77 27       	eor	r23, r23
    52d4:	cb 01       	movw	r24, r22
    52d6:	97 f9       	bld	r25, 7
    52d8:	08 95       	ret

000052da <__gesf2>:
    52da:	0e 94 b9 28 	call	0x5172	; 0x5172 <__fp_cmp>
    52de:	08 f4       	brcc	.+2      	; 0x52e2 <__gesf2+0x8>
    52e0:	8f ef       	ldi	r24, 0xFF	; 255
    52e2:	08 95       	ret

000052e4 <__mulsf3>:
    52e4:	0e 94 85 29 	call	0x530a	; 0x530a <__mulsf3x>
    52e8:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__fp_round>
    52ec:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__fp_pscA>
    52f0:	38 f0       	brcs	.+14     	; 0x5300 <__mulsf3+0x1c>
    52f2:	0e 94 ed 28 	call	0x51da	; 0x51da <__fp_pscB>
    52f6:	20 f0       	brcs	.+8      	; 0x5300 <__mulsf3+0x1c>
    52f8:	95 23       	and	r25, r21
    52fa:	11 f0       	breq	.+4      	; 0x5300 <__mulsf3+0x1c>
    52fc:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__fp_inf>
    5300:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__fp_nan>
    5304:	11 24       	eor	r1, r1
    5306:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__fp_szero>

0000530a <__mulsf3x>:
    530a:	0e 94 44 29 	call	0x5288	; 0x5288 <__fp_split3>
    530e:	70 f3       	brcs	.-36     	; 0x52ec <__mulsf3+0x8>

00005310 <__mulsf3_pse>:
    5310:	95 9f       	mul	r25, r21
    5312:	c1 f3       	breq	.-16     	; 0x5304 <__mulsf3+0x20>
    5314:	95 0f       	add	r25, r21
    5316:	50 e0       	ldi	r21, 0x00	; 0
    5318:	55 1f       	adc	r21, r21
    531a:	62 9f       	mul	r22, r18
    531c:	f0 01       	movw	r30, r0
    531e:	72 9f       	mul	r23, r18
    5320:	bb 27       	eor	r27, r27
    5322:	f0 0d       	add	r31, r0
    5324:	b1 1d       	adc	r27, r1
    5326:	63 9f       	mul	r22, r19
    5328:	aa 27       	eor	r26, r26
    532a:	f0 0d       	add	r31, r0
    532c:	b1 1d       	adc	r27, r1
    532e:	aa 1f       	adc	r26, r26
    5330:	64 9f       	mul	r22, r20
    5332:	66 27       	eor	r22, r22
    5334:	b0 0d       	add	r27, r0
    5336:	a1 1d       	adc	r26, r1
    5338:	66 1f       	adc	r22, r22
    533a:	82 9f       	mul	r24, r18
    533c:	22 27       	eor	r18, r18
    533e:	b0 0d       	add	r27, r0
    5340:	a1 1d       	adc	r26, r1
    5342:	62 1f       	adc	r22, r18
    5344:	73 9f       	mul	r23, r19
    5346:	b0 0d       	add	r27, r0
    5348:	a1 1d       	adc	r26, r1
    534a:	62 1f       	adc	r22, r18
    534c:	83 9f       	mul	r24, r19
    534e:	a0 0d       	add	r26, r0
    5350:	61 1d       	adc	r22, r1
    5352:	22 1f       	adc	r18, r18
    5354:	74 9f       	mul	r23, r20
    5356:	33 27       	eor	r19, r19
    5358:	a0 0d       	add	r26, r0
    535a:	61 1d       	adc	r22, r1
    535c:	23 1f       	adc	r18, r19
    535e:	84 9f       	mul	r24, r20
    5360:	60 0d       	add	r22, r0
    5362:	21 1d       	adc	r18, r1
    5364:	82 2f       	mov	r24, r18
    5366:	76 2f       	mov	r23, r22
    5368:	6a 2f       	mov	r22, r26
    536a:	11 24       	eor	r1, r1
    536c:	9f 57       	subi	r25, 0x7F	; 127
    536e:	50 40       	sbci	r21, 0x00	; 0
    5370:	9a f0       	brmi	.+38     	; 0x5398 <__mulsf3_pse+0x88>
    5372:	f1 f0       	breq	.+60     	; 0x53b0 <__mulsf3_pse+0xa0>
    5374:	88 23       	and	r24, r24
    5376:	4a f0       	brmi	.+18     	; 0x538a <__mulsf3_pse+0x7a>
    5378:	ee 0f       	add	r30, r30
    537a:	ff 1f       	adc	r31, r31
    537c:	bb 1f       	adc	r27, r27
    537e:	66 1f       	adc	r22, r22
    5380:	77 1f       	adc	r23, r23
    5382:	88 1f       	adc	r24, r24
    5384:	91 50       	subi	r25, 0x01	; 1
    5386:	50 40       	sbci	r21, 0x00	; 0
    5388:	a9 f7       	brne	.-22     	; 0x5374 <__mulsf3_pse+0x64>
    538a:	9e 3f       	cpi	r25, 0xFE	; 254
    538c:	51 05       	cpc	r21, r1
    538e:	80 f0       	brcs	.+32     	; 0x53b0 <__mulsf3_pse+0xa0>
    5390:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__fp_inf>
    5394:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__fp_szero>
    5398:	5f 3f       	cpi	r21, 0xFF	; 255
    539a:	e4 f3       	brlt	.-8      	; 0x5394 <__mulsf3_pse+0x84>
    539c:	98 3e       	cpi	r25, 0xE8	; 232
    539e:	d4 f3       	brlt	.-12     	; 0x5394 <__mulsf3_pse+0x84>
    53a0:	86 95       	lsr	r24
    53a2:	77 95       	ror	r23
    53a4:	67 95       	ror	r22
    53a6:	b7 95       	ror	r27
    53a8:	f7 95       	ror	r31
    53aa:	e7 95       	ror	r30
    53ac:	9f 5f       	subi	r25, 0xFF	; 255
    53ae:	c1 f7       	brne	.-16     	; 0x53a0 <__mulsf3_pse+0x90>
    53b0:	fe 2b       	or	r31, r30
    53b2:	88 0f       	add	r24, r24
    53b4:	91 1d       	adc	r25, r1
    53b6:	96 95       	lsr	r25
    53b8:	87 95       	ror	r24
    53ba:	97 f9       	bld	r25, 7
    53bc:	08 95       	ret

000053be <round>:
    53be:	0e 94 4c 29 	call	0x5298	; 0x5298 <__fp_splitA>
    53c2:	e8 f0       	brcs	.+58     	; 0x53fe <round+0x40>
    53c4:	9e 37       	cpi	r25, 0x7E	; 126
    53c6:	e8 f0       	brcs	.+58     	; 0x5402 <round+0x44>
    53c8:	96 39       	cpi	r25, 0x96	; 150
    53ca:	b8 f4       	brcc	.+46     	; 0x53fa <round+0x3c>
    53cc:	9e 38       	cpi	r25, 0x8E	; 142
    53ce:	48 f4       	brcc	.+18     	; 0x53e2 <round+0x24>
    53d0:	67 2f       	mov	r22, r23
    53d2:	78 2f       	mov	r23, r24
    53d4:	88 27       	eor	r24, r24
    53d6:	98 5f       	subi	r25, 0xF8	; 248
    53d8:	f9 cf       	rjmp	.-14     	; 0x53cc <round+0xe>
    53da:	86 95       	lsr	r24
    53dc:	77 95       	ror	r23
    53de:	67 95       	ror	r22
    53e0:	93 95       	inc	r25
    53e2:	95 39       	cpi	r25, 0x95	; 149
    53e4:	d0 f3       	brcs	.-12     	; 0x53da <round+0x1c>
    53e6:	b6 2f       	mov	r27, r22
    53e8:	b1 70       	andi	r27, 0x01	; 1
    53ea:	6b 0f       	add	r22, r27
    53ec:	71 1d       	adc	r23, r1
    53ee:	81 1d       	adc	r24, r1
    53f0:	20 f4       	brcc	.+8      	; 0x53fa <round+0x3c>
    53f2:	87 95       	ror	r24
    53f4:	77 95       	ror	r23
    53f6:	67 95       	ror	r22
    53f8:	93 95       	inc	r25
    53fa:	0c 94 03 2a 	jmp	0x5406	; 0x5406 <__fp_mintl>
    53fe:	0c 94 1e 2a 	jmp	0x543c	; 0x543c <__fp_mpack>
    5402:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__fp_szero>

00005406 <__fp_mintl>:
    5406:	88 23       	and	r24, r24
    5408:	71 f4       	brne	.+28     	; 0x5426 <__fp_mintl+0x20>
    540a:	77 23       	and	r23, r23
    540c:	21 f0       	breq	.+8      	; 0x5416 <__fp_mintl+0x10>
    540e:	98 50       	subi	r25, 0x08	; 8
    5410:	87 2b       	or	r24, r23
    5412:	76 2f       	mov	r23, r22
    5414:	07 c0       	rjmp	.+14     	; 0x5424 <__fp_mintl+0x1e>
    5416:	66 23       	and	r22, r22
    5418:	11 f4       	brne	.+4      	; 0x541e <__fp_mintl+0x18>
    541a:	99 27       	eor	r25, r25
    541c:	0d c0       	rjmp	.+26     	; 0x5438 <__fp_mintl+0x32>
    541e:	90 51       	subi	r25, 0x10	; 16
    5420:	86 2b       	or	r24, r22
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	60 e0       	ldi	r22, 0x00	; 0
    5426:	2a f0       	brmi	.+10     	; 0x5432 <__fp_mintl+0x2c>
    5428:	9a 95       	dec	r25
    542a:	66 0f       	add	r22, r22
    542c:	77 1f       	adc	r23, r23
    542e:	88 1f       	adc	r24, r24
    5430:	da f7       	brpl	.-10     	; 0x5428 <__fp_mintl+0x22>
    5432:	88 0f       	add	r24, r24
    5434:	96 95       	lsr	r25
    5436:	87 95       	ror	r24
    5438:	97 f9       	bld	r25, 7
    543a:	08 95       	ret

0000543c <__fp_mpack>:
    543c:	9f 3f       	cpi	r25, 0xFF	; 255
    543e:	31 f0       	breq	.+12     	; 0x544c <__fp_mpack_finite+0xc>

00005440 <__fp_mpack_finite>:
    5440:	91 50       	subi	r25, 0x01	; 1
    5442:	20 f4       	brcc	.+8      	; 0x544c <__fp_mpack_finite+0xc>
    5444:	87 95       	ror	r24
    5446:	77 95       	ror	r23
    5448:	67 95       	ror	r22
    544a:	b7 95       	ror	r27
    544c:	88 0f       	add	r24, r24
    544e:	91 1d       	adc	r25, r1
    5450:	96 95       	lsr	r25
    5452:	87 95       	ror	r24
    5454:	97 f9       	bld	r25, 7
    5456:	08 95       	ret

00005458 <__fp_powsodd>:
    5458:	9f 93       	push	r25
    545a:	8f 93       	push	r24
    545c:	7f 93       	push	r23
    545e:	6f 93       	push	r22
    5460:	ff 93       	push	r31
    5462:	ef 93       	push	r30
    5464:	9b 01       	movw	r18, r22
    5466:	ac 01       	movw	r20, r24
    5468:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__mulsf3>
    546c:	ef 91       	pop	r30
    546e:	ff 91       	pop	r31
    5470:	0e 94 40 2a 	call	0x5480	; 0x5480 <__fp_powser>
    5474:	2f 91       	pop	r18
    5476:	3f 91       	pop	r19
    5478:	4f 91       	pop	r20
    547a:	5f 91       	pop	r21
    547c:	0c 94 72 29 	jmp	0x52e4	; 0x52e4 <__mulsf3>

00005480 <__fp_powser>:
    5480:	df 93       	push	r29
    5482:	cf 93       	push	r28
    5484:	1f 93       	push	r17
    5486:	0f 93       	push	r16
    5488:	ff 92       	push	r15
    548a:	ef 92       	push	r14
    548c:	df 92       	push	r13
    548e:	7b 01       	movw	r14, r22
    5490:	8c 01       	movw	r16, r24
    5492:	68 94       	set
    5494:	06 c0       	rjmp	.+12     	; 0x54a2 <__fp_powser+0x22>
    5496:	da 2e       	mov	r13, r26
    5498:	ef 01       	movw	r28, r30
    549a:	0e 94 85 29 	call	0x530a	; 0x530a <__mulsf3x>
    549e:	fe 01       	movw	r30, r28
    54a0:	e8 94       	clt
    54a2:	a5 91       	lpm	r26, Z+
    54a4:	25 91       	lpm	r18, Z+
    54a6:	35 91       	lpm	r19, Z+
    54a8:	45 91       	lpm	r20, Z+
    54aa:	55 91       	lpm	r21, Z+
    54ac:	a6 f3       	brts	.-24     	; 0x5496 <__fp_powser+0x16>
    54ae:	ef 01       	movw	r28, r30
    54b0:	0e 94 75 27 	call	0x4eea	; 0x4eea <__addsf3x>
    54b4:	fe 01       	movw	r30, r28
    54b6:	97 01       	movw	r18, r14
    54b8:	a8 01       	movw	r20, r16
    54ba:	da 94       	dec	r13
    54bc:	69 f7       	brne	.-38     	; 0x5498 <__fp_powser+0x18>
    54be:	df 90       	pop	r13
    54c0:	ef 90       	pop	r14
    54c2:	ff 90       	pop	r15
    54c4:	0f 91       	pop	r16
    54c6:	1f 91       	pop	r17
    54c8:	cf 91       	pop	r28
    54ca:	df 91       	pop	r29
    54cc:	08 95       	ret

000054ce <__mulsi3>:
    54ce:	db 01       	movw	r26, r22
    54d0:	8f 93       	push	r24
    54d2:	9f 93       	push	r25
    54d4:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__muluhisi3>
    54d8:	bf 91       	pop	r27
    54da:	af 91       	pop	r26
    54dc:	a2 9f       	mul	r26, r18
    54de:	80 0d       	add	r24, r0
    54e0:	91 1d       	adc	r25, r1
    54e2:	a3 9f       	mul	r26, r19
    54e4:	90 0d       	add	r25, r0
    54e6:	b2 9f       	mul	r27, r18
    54e8:	90 0d       	add	r25, r0
    54ea:	11 24       	eor	r1, r1
    54ec:	08 95       	ret

000054ee <__udivmodhi4>:
    54ee:	aa 1b       	sub	r26, r26
    54f0:	bb 1b       	sub	r27, r27
    54f2:	51 e1       	ldi	r21, 0x11	; 17
    54f4:	07 c0       	rjmp	.+14     	; 0x5504 <__udivmodhi4_ep>

000054f6 <__udivmodhi4_loop>:
    54f6:	aa 1f       	adc	r26, r26
    54f8:	bb 1f       	adc	r27, r27
    54fa:	a6 17       	cp	r26, r22
    54fc:	b7 07       	cpc	r27, r23
    54fe:	10 f0       	brcs	.+4      	; 0x5504 <__udivmodhi4_ep>
    5500:	a6 1b       	sub	r26, r22
    5502:	b7 0b       	sbc	r27, r23

00005504 <__udivmodhi4_ep>:
    5504:	88 1f       	adc	r24, r24
    5506:	99 1f       	adc	r25, r25
    5508:	5a 95       	dec	r21
    550a:	a9 f7       	brne	.-22     	; 0x54f6 <__udivmodhi4_loop>
    550c:	80 95       	com	r24
    550e:	90 95       	com	r25
    5510:	bc 01       	movw	r22, r24
    5512:	cd 01       	movw	r24, r26
    5514:	08 95       	ret

00005516 <__divmodhi4>:
    5516:	97 fb       	bst	r25, 7
    5518:	07 2e       	mov	r0, r23
    551a:	16 f4       	brtc	.+4      	; 0x5520 <__divmodhi4+0xa>
    551c:	00 94       	com	r0
    551e:	07 d0       	rcall	.+14     	; 0x552e <__divmodhi4_neg1>
    5520:	77 fd       	sbrc	r23, 7
    5522:	09 d0       	rcall	.+18     	; 0x5536 <__divmodhi4_neg2>
    5524:	0e 94 77 2a 	call	0x54ee	; 0x54ee <__udivmodhi4>
    5528:	07 fc       	sbrc	r0, 7
    552a:	05 d0       	rcall	.+10     	; 0x5536 <__divmodhi4_neg2>
    552c:	3e f4       	brtc	.+14     	; 0x553c <__divmodhi4_exit>

0000552e <__divmodhi4_neg1>:
    552e:	90 95       	com	r25
    5530:	81 95       	neg	r24
    5532:	9f 4f       	sbci	r25, 0xFF	; 255
    5534:	08 95       	ret

00005536 <__divmodhi4_neg2>:
    5536:	70 95       	com	r23
    5538:	61 95       	neg	r22
    553a:	7f 4f       	sbci	r23, 0xFF	; 255

0000553c <__divmodhi4_exit>:
    553c:	08 95       	ret

0000553e <__udivmodsi4>:
    553e:	a1 e2       	ldi	r26, 0x21	; 33
    5540:	1a 2e       	mov	r1, r26
    5542:	aa 1b       	sub	r26, r26
    5544:	bb 1b       	sub	r27, r27
    5546:	fd 01       	movw	r30, r26
    5548:	0d c0       	rjmp	.+26     	; 0x5564 <__udivmodsi4_ep>

0000554a <__udivmodsi4_loop>:
    554a:	aa 1f       	adc	r26, r26
    554c:	bb 1f       	adc	r27, r27
    554e:	ee 1f       	adc	r30, r30
    5550:	ff 1f       	adc	r31, r31
    5552:	a2 17       	cp	r26, r18
    5554:	b3 07       	cpc	r27, r19
    5556:	e4 07       	cpc	r30, r20
    5558:	f5 07       	cpc	r31, r21
    555a:	20 f0       	brcs	.+8      	; 0x5564 <__udivmodsi4_ep>
    555c:	a2 1b       	sub	r26, r18
    555e:	b3 0b       	sbc	r27, r19
    5560:	e4 0b       	sbc	r30, r20
    5562:	f5 0b       	sbc	r31, r21

00005564 <__udivmodsi4_ep>:
    5564:	66 1f       	adc	r22, r22
    5566:	77 1f       	adc	r23, r23
    5568:	88 1f       	adc	r24, r24
    556a:	99 1f       	adc	r25, r25
    556c:	1a 94       	dec	r1
    556e:	69 f7       	brne	.-38     	; 0x554a <__udivmodsi4_loop>
    5570:	60 95       	com	r22
    5572:	70 95       	com	r23
    5574:	80 95       	com	r24
    5576:	90 95       	com	r25
    5578:	9b 01       	movw	r18, r22
    557a:	ac 01       	movw	r20, r24
    557c:	bd 01       	movw	r22, r26
    557e:	cf 01       	movw	r24, r30
    5580:	08 95       	ret

00005582 <__divmodsi4>:
    5582:	05 2e       	mov	r0, r21
    5584:	97 fb       	bst	r25, 7
    5586:	1e f4       	brtc	.+6      	; 0x558e <__divmodsi4+0xc>
    5588:	00 94       	com	r0
    558a:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__negsi2>
    558e:	57 fd       	sbrc	r21, 7
    5590:	07 d0       	rcall	.+14     	; 0x55a0 <__divmodsi4_neg2>
    5592:	0e 94 9f 2a 	call	0x553e	; 0x553e <__udivmodsi4>
    5596:	07 fc       	sbrc	r0, 7
    5598:	03 d0       	rcall	.+6      	; 0x55a0 <__divmodsi4_neg2>
    559a:	4e f4       	brtc	.+18     	; 0x55ae <__divmodsi4_exit>
    559c:	0c 94 d8 2a 	jmp	0x55b0	; 0x55b0 <__negsi2>

000055a0 <__divmodsi4_neg2>:
    55a0:	50 95       	com	r21
    55a2:	40 95       	com	r20
    55a4:	30 95       	com	r19
    55a6:	21 95       	neg	r18
    55a8:	3f 4f       	sbci	r19, 0xFF	; 255
    55aa:	4f 4f       	sbci	r20, 0xFF	; 255
    55ac:	5f 4f       	sbci	r21, 0xFF	; 255

000055ae <__divmodsi4_exit>:
    55ae:	08 95       	ret

000055b0 <__negsi2>:
    55b0:	90 95       	com	r25
    55b2:	80 95       	com	r24
    55b4:	70 95       	com	r23
    55b6:	61 95       	neg	r22
    55b8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ba:	8f 4f       	sbci	r24, 0xFF	; 255
    55bc:	9f 4f       	sbci	r25, 0xFF	; 255
    55be:	08 95       	ret

000055c0 <__tablejump2__>:
    55c0:	ee 0f       	add	r30, r30
    55c2:	ff 1f       	adc	r31, r31
    55c4:	05 90       	lpm	r0, Z+
    55c6:	f4 91       	lpm	r31, Z
    55c8:	e0 2d       	mov	r30, r0
    55ca:	09 94       	ijmp

000055cc <__umulhisi3>:
    55cc:	a2 9f       	mul	r26, r18
    55ce:	b0 01       	movw	r22, r0
    55d0:	b3 9f       	mul	r27, r19
    55d2:	c0 01       	movw	r24, r0
    55d4:	a3 9f       	mul	r26, r19
    55d6:	70 0d       	add	r23, r0
    55d8:	81 1d       	adc	r24, r1
    55da:	11 24       	eor	r1, r1
    55dc:	91 1d       	adc	r25, r1
    55de:	b2 9f       	mul	r27, r18
    55e0:	70 0d       	add	r23, r0
    55e2:	81 1d       	adc	r24, r1
    55e4:	11 24       	eor	r1, r1
    55e6:	91 1d       	adc	r25, r1
    55e8:	08 95       	ret

000055ea <__usmulhisi3>:
    55ea:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>

000055ee <__usmulhisi3_tail>:
    55ee:	b7 ff       	sbrs	r27, 7
    55f0:	08 95       	ret
    55f2:	82 1b       	sub	r24, r18
    55f4:	93 0b       	sbc	r25, r19
    55f6:	08 95       	ret

000055f8 <__muluhisi3>:
    55f8:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__umulhisi3>
    55fc:	a5 9f       	mul	r26, r21
    55fe:	90 0d       	add	r25, r0
    5600:	b4 9f       	mul	r27, r20
    5602:	90 0d       	add	r25, r0
    5604:	a4 9f       	mul	r26, r20
    5606:	80 0d       	add	r24, r0
    5608:	91 1d       	adc	r25, r1
    560a:	11 24       	eor	r1, r1
    560c:	08 95       	ret

0000560e <__mulshisi3>:
    560e:	b7 ff       	sbrs	r27, 7
    5610:	0c 94 fc 2a 	jmp	0x55f8	; 0x55f8 <__muluhisi3>

00005614 <__mulohisi3>:
    5614:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <__muluhisi3>
    5618:	82 1b       	sub	r24, r18
    561a:	93 0b       	sbc	r25, r19
    561c:	08 95       	ret

0000561e <malloc>:
    561e:	0f 93       	push	r16
    5620:	1f 93       	push	r17
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	82 30       	cpi	r24, 0x02	; 2
    5628:	91 05       	cpc	r25, r1
    562a:	10 f4       	brcc	.+4      	; 0x5630 <malloc+0x12>
    562c:	82 e0       	ldi	r24, 0x02	; 2
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <__flp>
    5634:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <__flp+0x1>
    5638:	20 e0       	ldi	r18, 0x00	; 0
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	a0 e0       	ldi	r26, 0x00	; 0
    563e:	b0 e0       	ldi	r27, 0x00	; 0
    5640:	30 97       	sbiw	r30, 0x00	; 0
    5642:	19 f1       	breq	.+70     	; 0x568a <malloc+0x6c>
    5644:	40 81       	ld	r20, Z
    5646:	51 81       	ldd	r21, Z+1	; 0x01
    5648:	02 81       	ldd	r16, Z+2	; 0x02
    564a:	13 81       	ldd	r17, Z+3	; 0x03
    564c:	48 17       	cp	r20, r24
    564e:	59 07       	cpc	r21, r25
    5650:	c8 f0       	brcs	.+50     	; 0x5684 <malloc+0x66>
    5652:	84 17       	cp	r24, r20
    5654:	95 07       	cpc	r25, r21
    5656:	69 f4       	brne	.+26     	; 0x5672 <malloc+0x54>
    5658:	10 97       	sbiw	r26, 0x00	; 0
    565a:	31 f0       	breq	.+12     	; 0x5668 <malloc+0x4a>
    565c:	12 96       	adiw	r26, 0x02	; 2
    565e:	0c 93       	st	X, r16
    5660:	12 97       	sbiw	r26, 0x02	; 2
    5662:	13 96       	adiw	r26, 0x03	; 3
    5664:	1c 93       	st	X, r17
    5666:	27 c0       	rjmp	.+78     	; 0x56b6 <malloc+0x98>
    5668:	00 93 ae 05 	sts	0x05AE, r16	; 0x8005ae <__flp>
    566c:	10 93 af 05 	sts	0x05AF, r17	; 0x8005af <__flp+0x1>
    5670:	22 c0       	rjmp	.+68     	; 0x56b6 <malloc+0x98>
    5672:	21 15       	cp	r18, r1
    5674:	31 05       	cpc	r19, r1
    5676:	19 f0       	breq	.+6      	; 0x567e <malloc+0x60>
    5678:	42 17       	cp	r20, r18
    567a:	53 07       	cpc	r21, r19
    567c:	18 f4       	brcc	.+6      	; 0x5684 <malloc+0x66>
    567e:	9a 01       	movw	r18, r20
    5680:	bd 01       	movw	r22, r26
    5682:	ef 01       	movw	r28, r30
    5684:	df 01       	movw	r26, r30
    5686:	f8 01       	movw	r30, r16
    5688:	db cf       	rjmp	.-74     	; 0x5640 <malloc+0x22>
    568a:	21 15       	cp	r18, r1
    568c:	31 05       	cpc	r19, r1
    568e:	f9 f0       	breq	.+62     	; 0x56ce <malloc+0xb0>
    5690:	28 1b       	sub	r18, r24
    5692:	39 0b       	sbc	r19, r25
    5694:	24 30       	cpi	r18, 0x04	; 4
    5696:	31 05       	cpc	r19, r1
    5698:	80 f4       	brcc	.+32     	; 0x56ba <malloc+0x9c>
    569a:	8a 81       	ldd	r24, Y+2	; 0x02
    569c:	9b 81       	ldd	r25, Y+3	; 0x03
    569e:	61 15       	cp	r22, r1
    56a0:	71 05       	cpc	r23, r1
    56a2:	21 f0       	breq	.+8      	; 0x56ac <malloc+0x8e>
    56a4:	fb 01       	movw	r30, r22
    56a6:	93 83       	std	Z+3, r25	; 0x03
    56a8:	82 83       	std	Z+2, r24	; 0x02
    56aa:	04 c0       	rjmp	.+8      	; 0x56b4 <malloc+0x96>
    56ac:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <__flp+0x1>
    56b0:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <__flp>
    56b4:	fe 01       	movw	r30, r28
    56b6:	32 96       	adiw	r30, 0x02	; 2
    56b8:	44 c0       	rjmp	.+136    	; 0x5742 <malloc+0x124>
    56ba:	fe 01       	movw	r30, r28
    56bc:	e2 0f       	add	r30, r18
    56be:	f3 1f       	adc	r31, r19
    56c0:	81 93       	st	Z+, r24
    56c2:	91 93       	st	Z+, r25
    56c4:	22 50       	subi	r18, 0x02	; 2
    56c6:	31 09       	sbc	r19, r1
    56c8:	39 83       	std	Y+1, r19	; 0x01
    56ca:	28 83       	st	Y, r18
    56cc:	3a c0       	rjmp	.+116    	; 0x5742 <malloc+0x124>
    56ce:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    56d2:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    56d6:	23 2b       	or	r18, r19
    56d8:	41 f4       	brne	.+16     	; 0x56ea <malloc+0xcc>
    56da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    56de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    56e2:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <__brkval+0x1>
    56e6:	20 93 ac 05 	sts	0x05AC, r18	; 0x8005ac <__brkval>
    56ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    56ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    56f2:	21 15       	cp	r18, r1
    56f4:	31 05       	cpc	r19, r1
    56f6:	41 f4       	brne	.+16     	; 0x5708 <malloc+0xea>
    56f8:	2d b7       	in	r18, 0x3d	; 61
    56fa:	3e b7       	in	r19, 0x3e	; 62
    56fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5700:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5704:	24 1b       	sub	r18, r20
    5706:	35 0b       	sbc	r19, r21
    5708:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <__brkval>
    570c:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <__brkval+0x1>
    5710:	e2 17       	cp	r30, r18
    5712:	f3 07       	cpc	r31, r19
    5714:	a0 f4       	brcc	.+40     	; 0x573e <malloc+0x120>
    5716:	2e 1b       	sub	r18, r30
    5718:	3f 0b       	sbc	r19, r31
    571a:	28 17       	cp	r18, r24
    571c:	39 07       	cpc	r19, r25
    571e:	78 f0       	brcs	.+30     	; 0x573e <malloc+0x120>
    5720:	ac 01       	movw	r20, r24
    5722:	4e 5f       	subi	r20, 0xFE	; 254
    5724:	5f 4f       	sbci	r21, 0xFF	; 255
    5726:	24 17       	cp	r18, r20
    5728:	35 07       	cpc	r19, r21
    572a:	48 f0       	brcs	.+18     	; 0x573e <malloc+0x120>
    572c:	4e 0f       	add	r20, r30
    572e:	5f 1f       	adc	r21, r31
    5730:	50 93 ad 05 	sts	0x05AD, r21	; 0x8005ad <__brkval+0x1>
    5734:	40 93 ac 05 	sts	0x05AC, r20	; 0x8005ac <__brkval>
    5738:	81 93       	st	Z+, r24
    573a:	91 93       	st	Z+, r25
    573c:	02 c0       	rjmp	.+4      	; 0x5742 <malloc+0x124>
    573e:	e0 e0       	ldi	r30, 0x00	; 0
    5740:	f0 e0       	ldi	r31, 0x00	; 0
    5742:	cf 01       	movw	r24, r30
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	08 95       	ret

0000574e <free>:
    574e:	cf 93       	push	r28
    5750:	df 93       	push	r29
    5752:	00 97       	sbiw	r24, 0x00	; 0
    5754:	09 f4       	brne	.+2      	; 0x5758 <free+0xa>
    5756:	81 c0       	rjmp	.+258    	; 0x585a <free+0x10c>
    5758:	fc 01       	movw	r30, r24
    575a:	32 97       	sbiw	r30, 0x02	; 2
    575c:	13 82       	std	Z+3, r1	; 0x03
    575e:	12 82       	std	Z+2, r1	; 0x02
    5760:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <__flp>
    5764:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <__flp+0x1>
    5768:	10 97       	sbiw	r26, 0x00	; 0
    576a:	81 f4       	brne	.+32     	; 0x578c <free+0x3e>
    576c:	20 81       	ld	r18, Z
    576e:	31 81       	ldd	r19, Z+1	; 0x01
    5770:	82 0f       	add	r24, r18
    5772:	93 1f       	adc	r25, r19
    5774:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    5778:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    577c:	28 17       	cp	r18, r24
    577e:	39 07       	cpc	r19, r25
    5780:	51 f5       	brne	.+84     	; 0x57d6 <free+0x88>
    5782:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__brkval+0x1>
    5786:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__brkval>
    578a:	67 c0       	rjmp	.+206    	; 0x585a <free+0x10c>
    578c:	ed 01       	movw	r28, r26
    578e:	20 e0       	ldi	r18, 0x00	; 0
    5790:	30 e0       	ldi	r19, 0x00	; 0
    5792:	ce 17       	cp	r28, r30
    5794:	df 07       	cpc	r29, r31
    5796:	40 f4       	brcc	.+16     	; 0x57a8 <free+0x5a>
    5798:	4a 81       	ldd	r20, Y+2	; 0x02
    579a:	5b 81       	ldd	r21, Y+3	; 0x03
    579c:	9e 01       	movw	r18, r28
    579e:	41 15       	cp	r20, r1
    57a0:	51 05       	cpc	r21, r1
    57a2:	f1 f0       	breq	.+60     	; 0x57e0 <free+0x92>
    57a4:	ea 01       	movw	r28, r20
    57a6:	f5 cf       	rjmp	.-22     	; 0x5792 <free+0x44>
    57a8:	d3 83       	std	Z+3, r29	; 0x03
    57aa:	c2 83       	std	Z+2, r28	; 0x02
    57ac:	40 81       	ld	r20, Z
    57ae:	51 81       	ldd	r21, Z+1	; 0x01
    57b0:	84 0f       	add	r24, r20
    57b2:	95 1f       	adc	r25, r21
    57b4:	c8 17       	cp	r28, r24
    57b6:	d9 07       	cpc	r29, r25
    57b8:	59 f4       	brne	.+22     	; 0x57d0 <free+0x82>
    57ba:	88 81       	ld	r24, Y
    57bc:	99 81       	ldd	r25, Y+1	; 0x01
    57be:	84 0f       	add	r24, r20
    57c0:	95 1f       	adc	r25, r21
    57c2:	02 96       	adiw	r24, 0x02	; 2
    57c4:	91 83       	std	Z+1, r25	; 0x01
    57c6:	80 83       	st	Z, r24
    57c8:	8a 81       	ldd	r24, Y+2	; 0x02
    57ca:	9b 81       	ldd	r25, Y+3	; 0x03
    57cc:	93 83       	std	Z+3, r25	; 0x03
    57ce:	82 83       	std	Z+2, r24	; 0x02
    57d0:	21 15       	cp	r18, r1
    57d2:	31 05       	cpc	r19, r1
    57d4:	29 f4       	brne	.+10     	; 0x57e0 <free+0x92>
    57d6:	f0 93 af 05 	sts	0x05AF, r31	; 0x8005af <__flp+0x1>
    57da:	e0 93 ae 05 	sts	0x05AE, r30	; 0x8005ae <__flp>
    57de:	3d c0       	rjmp	.+122    	; 0x585a <free+0x10c>
    57e0:	e9 01       	movw	r28, r18
    57e2:	fb 83       	std	Y+3, r31	; 0x03
    57e4:	ea 83       	std	Y+2, r30	; 0x02
    57e6:	49 91       	ld	r20, Y+
    57e8:	59 91       	ld	r21, Y+
    57ea:	c4 0f       	add	r28, r20
    57ec:	d5 1f       	adc	r29, r21
    57ee:	ec 17       	cp	r30, r28
    57f0:	fd 07       	cpc	r31, r29
    57f2:	61 f4       	brne	.+24     	; 0x580c <free+0xbe>
    57f4:	80 81       	ld	r24, Z
    57f6:	91 81       	ldd	r25, Z+1	; 0x01
    57f8:	84 0f       	add	r24, r20
    57fa:	95 1f       	adc	r25, r21
    57fc:	02 96       	adiw	r24, 0x02	; 2
    57fe:	e9 01       	movw	r28, r18
    5800:	99 83       	std	Y+1, r25	; 0x01
    5802:	88 83       	st	Y, r24
    5804:	82 81       	ldd	r24, Z+2	; 0x02
    5806:	93 81       	ldd	r25, Z+3	; 0x03
    5808:	9b 83       	std	Y+3, r25	; 0x03
    580a:	8a 83       	std	Y+2, r24	; 0x02
    580c:	e0 e0       	ldi	r30, 0x00	; 0
    580e:	f0 e0       	ldi	r31, 0x00	; 0
    5810:	12 96       	adiw	r26, 0x02	; 2
    5812:	8d 91       	ld	r24, X+
    5814:	9c 91       	ld	r25, X
    5816:	13 97       	sbiw	r26, 0x03	; 3
    5818:	00 97       	sbiw	r24, 0x00	; 0
    581a:	19 f0       	breq	.+6      	; 0x5822 <free+0xd4>
    581c:	fd 01       	movw	r30, r26
    581e:	dc 01       	movw	r26, r24
    5820:	f7 cf       	rjmp	.-18     	; 0x5810 <free+0xc2>
    5822:	8d 91       	ld	r24, X+
    5824:	9c 91       	ld	r25, X
    5826:	11 97       	sbiw	r26, 0x01	; 1
    5828:	9d 01       	movw	r18, r26
    582a:	2e 5f       	subi	r18, 0xFE	; 254
    582c:	3f 4f       	sbci	r19, 0xFF	; 255
    582e:	82 0f       	add	r24, r18
    5830:	93 1f       	adc	r25, r19
    5832:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    5836:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    583a:	28 17       	cp	r18, r24
    583c:	39 07       	cpc	r19, r25
    583e:	69 f4       	brne	.+26     	; 0x585a <free+0x10c>
    5840:	30 97       	sbiw	r30, 0x00	; 0
    5842:	29 f4       	brne	.+10     	; 0x584e <free+0x100>
    5844:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <__flp+0x1>
    5848:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <__flp>
    584c:	02 c0       	rjmp	.+4      	; 0x5852 <free+0x104>
    584e:	13 82       	std	Z+3, r1	; 0x03
    5850:	12 82       	std	Z+2, r1	; 0x02
    5852:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <__brkval+0x1>
    5856:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <__brkval>
    585a:	df 91       	pop	r29
    585c:	cf 91       	pop	r28
    585e:	08 95       	ret

00005860 <atoi>:
    5860:	fc 01       	movw	r30, r24
    5862:	88 27       	eor	r24, r24
    5864:	99 27       	eor	r25, r25
    5866:	e8 94       	clt
    5868:	21 91       	ld	r18, Z+
    586a:	20 32       	cpi	r18, 0x20	; 32
    586c:	e9 f3       	breq	.-6      	; 0x5868 <atoi+0x8>
    586e:	29 30       	cpi	r18, 0x09	; 9
    5870:	10 f0       	brcs	.+4      	; 0x5876 <atoi+0x16>
    5872:	2e 30       	cpi	r18, 0x0E	; 14
    5874:	c8 f3       	brcs	.-14     	; 0x5868 <atoi+0x8>
    5876:	2b 32       	cpi	r18, 0x2B	; 43
    5878:	41 f0       	breq	.+16     	; 0x588a <atoi+0x2a>
    587a:	2d 32       	cpi	r18, 0x2D	; 45
    587c:	39 f4       	brne	.+14     	; 0x588c <atoi+0x2c>
    587e:	68 94       	set
    5880:	04 c0       	rjmp	.+8      	; 0x588a <atoi+0x2a>
    5882:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__mulhi_const_10>
    5886:	82 0f       	add	r24, r18
    5888:	91 1d       	adc	r25, r1
    588a:	21 91       	ld	r18, Z+
    588c:	20 53       	subi	r18, 0x30	; 48
    588e:	2a 30       	cpi	r18, 0x0A	; 10
    5890:	c0 f3       	brcs	.-16     	; 0x5882 <atoi+0x22>
    5892:	1e f4       	brtc	.+6      	; 0x589a <atoi+0x3a>
    5894:	90 95       	com	r25
    5896:	81 95       	neg	r24
    5898:	9f 4f       	sbci	r25, 0xFF	; 255
    589a:	08 95       	ret

0000589c <atol>:
    589c:	1f 93       	push	r17
    589e:	fc 01       	movw	r30, r24
    58a0:	99 27       	eor	r25, r25
    58a2:	88 27       	eor	r24, r24
    58a4:	bc 01       	movw	r22, r24
    58a6:	e8 94       	clt
    58a8:	11 91       	ld	r17, Z+
    58aa:	10 32       	cpi	r17, 0x20	; 32
    58ac:	e9 f3       	breq	.-6      	; 0x58a8 <atol+0xc>
    58ae:	19 30       	cpi	r17, 0x09	; 9
    58b0:	10 f0       	brcs	.+4      	; 0x58b6 <atol+0x1a>
    58b2:	1e 30       	cpi	r17, 0x0E	; 14
    58b4:	c8 f3       	brcs	.-14     	; 0x58a8 <atol+0xc>
    58b6:	1b 32       	cpi	r17, 0x2B	; 43
    58b8:	51 f0       	breq	.+20     	; 0x58ce <atol+0x32>
    58ba:	1d 32       	cpi	r17, 0x2D	; 45
    58bc:	49 f4       	brne	.+18     	; 0x58d0 <atol+0x34>
    58be:	68 94       	set
    58c0:	06 c0       	rjmp	.+12     	; 0x58ce <atol+0x32>
    58c2:	0e 94 9e 2c 	call	0x593c	; 0x593c <__mulsi_const_10>
    58c6:	61 0f       	add	r22, r17
    58c8:	71 1d       	adc	r23, r1
    58ca:	81 1d       	adc	r24, r1
    58cc:	91 1d       	adc	r25, r1
    58ce:	11 91       	ld	r17, Z+
    58d0:	10 53       	subi	r17, 0x30	; 48
    58d2:	1a 30       	cpi	r17, 0x0A	; 10
    58d4:	b0 f3       	brcs	.-20     	; 0x58c2 <atol+0x26>
    58d6:	3e f4       	brtc	.+14     	; 0x58e6 <atol+0x4a>
    58d8:	90 95       	com	r25
    58da:	80 95       	com	r24
    58dc:	70 95       	com	r23
    58de:	61 95       	neg	r22
    58e0:	7f 4f       	sbci	r23, 0xFF	; 255
    58e2:	8f 4f       	sbci	r24, 0xFF	; 255
    58e4:	9f 4f       	sbci	r25, 0xFF	; 255
    58e6:	1f 91       	pop	r17
    58e8:	08 95       	ret

000058ea <toupper>:
    58ea:	91 11       	cpse	r25, r1
    58ec:	08 95       	ret
    58ee:	81 56       	subi	r24, 0x61	; 97
    58f0:	8a 51       	subi	r24, 0x1A	; 26
    58f2:	08 f4       	brcc	.+2      	; 0x58f6 <toupper+0xc>
    58f4:	80 52       	subi	r24, 0x20	; 32
    58f6:	85 58       	subi	r24, 0x85	; 133
    58f8:	08 95       	ret

000058fa <strcat>:
    58fa:	fb 01       	movw	r30, r22
    58fc:	dc 01       	movw	r26, r24
    58fe:	0d 90       	ld	r0, X+
    5900:	00 20       	and	r0, r0
    5902:	e9 f7       	brne	.-6      	; 0x58fe <strcat+0x4>
    5904:	11 97       	sbiw	r26, 0x01	; 1
    5906:	01 90       	ld	r0, Z+
    5908:	0d 92       	st	X+, r0
    590a:	00 20       	and	r0, r0
    590c:	e1 f7       	brne	.-8      	; 0x5906 <strcat+0xc>
    590e:	08 95       	ret

00005910 <strcpy>:
    5910:	fb 01       	movw	r30, r22
    5912:	dc 01       	movw	r26, r24
    5914:	01 90       	ld	r0, Z+
    5916:	0d 92       	st	X+, r0
    5918:	00 20       	and	r0, r0
    591a:	e1 f7       	brne	.-8      	; 0x5914 <strcpy+0x4>
    591c:	08 95       	ret

0000591e <strncpy>:
    591e:	fb 01       	movw	r30, r22
    5920:	dc 01       	movw	r26, r24
    5922:	41 50       	subi	r20, 0x01	; 1
    5924:	50 40       	sbci	r21, 0x00	; 0
    5926:	48 f0       	brcs	.+18     	; 0x593a <strncpy+0x1c>
    5928:	01 90       	ld	r0, Z+
    592a:	0d 92       	st	X+, r0
    592c:	00 20       	and	r0, r0
    592e:	c9 f7       	brne	.-14     	; 0x5922 <strncpy+0x4>
    5930:	01 c0       	rjmp	.+2      	; 0x5934 <strncpy+0x16>
    5932:	1d 92       	st	X+, r1
    5934:	41 50       	subi	r20, 0x01	; 1
    5936:	50 40       	sbci	r21, 0x00	; 0
    5938:	e0 f7       	brcc	.-8      	; 0x5932 <strncpy+0x14>
    593a:	08 95       	ret

0000593c <__mulsi_const_10>:
    593c:	59 2f       	mov	r21, r25
    593e:	48 2f       	mov	r20, r24
    5940:	37 2f       	mov	r19, r23
    5942:	26 2f       	mov	r18, r22
    5944:	66 0f       	add	r22, r22
    5946:	77 1f       	adc	r23, r23
    5948:	88 1f       	adc	r24, r24
    594a:	99 1f       	adc	r25, r25
    594c:	66 0f       	add	r22, r22
    594e:	77 1f       	adc	r23, r23
    5950:	88 1f       	adc	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	62 0f       	add	r22, r18
    5956:	73 1f       	adc	r23, r19
    5958:	84 1f       	adc	r24, r20
    595a:	95 1f       	adc	r25, r21
    595c:	66 0f       	add	r22, r22
    595e:	77 1f       	adc	r23, r23
    5960:	88 1f       	adc	r24, r24
    5962:	99 1f       	adc	r25, r25
    5964:	08 95       	ret

00005966 <__mulhi_const_10>:
    5966:	7a e0       	ldi	r23, 0x0A	; 10
    5968:	97 9f       	mul	r25, r23
    596a:	90 2d       	mov	r25, r0
    596c:	87 9f       	mul	r24, r23
    596e:	80 2d       	mov	r24, r0
    5970:	91 0d       	add	r25, r1
    5972:	11 24       	eor	r1, r1
    5974:	08 95       	ret

00005976 <sprintf>:
    5976:	ae e0       	ldi	r26, 0x0E	; 14
    5978:	b0 e0       	ldi	r27, 0x00	; 0
    597a:	e1 ec       	ldi	r30, 0xC1	; 193
    597c:	fc e2       	ldi	r31, 0x2C	; 44
    597e:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__prologue_saves__+0x1c>
    5982:	0d 89       	ldd	r16, Y+21	; 0x15
    5984:	1e 89       	ldd	r17, Y+22	; 0x16
    5986:	86 e0       	ldi	r24, 0x06	; 6
    5988:	8c 83       	std	Y+4, r24	; 0x04
    598a:	1a 83       	std	Y+2, r17	; 0x02
    598c:	09 83       	std	Y+1, r16	; 0x01
    598e:	8f ef       	ldi	r24, 0xFF	; 255
    5990:	9f e7       	ldi	r25, 0x7F	; 127
    5992:	9e 83       	std	Y+6, r25	; 0x06
    5994:	8d 83       	std	Y+5, r24	; 0x05
    5996:	ae 01       	movw	r20, r28
    5998:	47 5e       	subi	r20, 0xE7	; 231
    599a:	5f 4f       	sbci	r21, 0xFF	; 255
    599c:	6f 89       	ldd	r22, Y+23	; 0x17
    599e:	78 8d       	ldd	r23, Y+24	; 0x18
    59a0:	ce 01       	movw	r24, r28
    59a2:	01 96       	adiw	r24, 0x01	; 1
    59a4:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <vfprintf>
    59a8:	ef 81       	ldd	r30, Y+7	; 0x07
    59aa:	f8 85       	ldd	r31, Y+8	; 0x08
    59ac:	e0 0f       	add	r30, r16
    59ae:	f1 1f       	adc	r31, r17
    59b0:	10 82       	st	Z, r1
    59b2:	2e 96       	adiw	r28, 0x0e	; 14
    59b4:	e4 e0       	ldi	r30, 0x04	; 4
    59b6:	0c 94 e0 2f 	jmp	0x5fc0	; 0x5fc0 <__epilogue_restores__+0x1c>

000059ba <vfprintf>:
    59ba:	ab e0       	ldi	r26, 0x0B	; 11
    59bc:	b0 e0       	ldi	r27, 0x00	; 0
    59be:	e3 ee       	ldi	r30, 0xE3	; 227
    59c0:	fc e2       	ldi	r31, 0x2C	; 44
    59c2:	0c 94 b6 2f 	jmp	0x5f6c	; 0x5f6c <__prologue_saves__>
    59c6:	6c 01       	movw	r12, r24
    59c8:	7b 01       	movw	r14, r22
    59ca:	8a 01       	movw	r16, r20
    59cc:	fc 01       	movw	r30, r24
    59ce:	17 82       	std	Z+7, r1	; 0x07
    59d0:	16 82       	std	Z+6, r1	; 0x06
    59d2:	83 81       	ldd	r24, Z+3	; 0x03
    59d4:	81 ff       	sbrs	r24, 1
    59d6:	cc c1       	rjmp	.+920    	; 0x5d70 <vfprintf+0x3b6>
    59d8:	ce 01       	movw	r24, r28
    59da:	01 96       	adiw	r24, 0x01	; 1
    59dc:	3c 01       	movw	r6, r24
    59de:	f6 01       	movw	r30, r12
    59e0:	93 81       	ldd	r25, Z+3	; 0x03
    59e2:	f7 01       	movw	r30, r14
    59e4:	93 fd       	sbrc	r25, 3
    59e6:	85 91       	lpm	r24, Z+
    59e8:	93 ff       	sbrs	r25, 3
    59ea:	81 91       	ld	r24, Z+
    59ec:	7f 01       	movw	r14, r30
    59ee:	88 23       	and	r24, r24
    59f0:	09 f4       	brne	.+2      	; 0x59f4 <vfprintf+0x3a>
    59f2:	ba c1       	rjmp	.+884    	; 0x5d68 <vfprintf+0x3ae>
    59f4:	85 32       	cpi	r24, 0x25	; 37
    59f6:	39 f4       	brne	.+14     	; 0x5a06 <vfprintf+0x4c>
    59f8:	93 fd       	sbrc	r25, 3
    59fa:	85 91       	lpm	r24, Z+
    59fc:	93 ff       	sbrs	r25, 3
    59fe:	81 91       	ld	r24, Z+
    5a00:	7f 01       	movw	r14, r30
    5a02:	85 32       	cpi	r24, 0x25	; 37
    5a04:	29 f4       	brne	.+10     	; 0x5a10 <vfprintf+0x56>
    5a06:	b6 01       	movw	r22, r12
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5a0e:	e7 cf       	rjmp	.-50     	; 0x59de <vfprintf+0x24>
    5a10:	91 2c       	mov	r9, r1
    5a12:	21 2c       	mov	r2, r1
    5a14:	31 2c       	mov	r3, r1
    5a16:	ff e1       	ldi	r31, 0x1F	; 31
    5a18:	f3 15       	cp	r31, r3
    5a1a:	d8 f0       	brcs	.+54     	; 0x5a52 <vfprintf+0x98>
    5a1c:	8b 32       	cpi	r24, 0x2B	; 43
    5a1e:	79 f0       	breq	.+30     	; 0x5a3e <vfprintf+0x84>
    5a20:	38 f4       	brcc	.+14     	; 0x5a30 <vfprintf+0x76>
    5a22:	80 32       	cpi	r24, 0x20	; 32
    5a24:	79 f0       	breq	.+30     	; 0x5a44 <vfprintf+0x8a>
    5a26:	83 32       	cpi	r24, 0x23	; 35
    5a28:	a1 f4       	brne	.+40     	; 0x5a52 <vfprintf+0x98>
    5a2a:	23 2d       	mov	r18, r3
    5a2c:	20 61       	ori	r18, 0x10	; 16
    5a2e:	1d c0       	rjmp	.+58     	; 0x5a6a <vfprintf+0xb0>
    5a30:	8d 32       	cpi	r24, 0x2D	; 45
    5a32:	61 f0       	breq	.+24     	; 0x5a4c <vfprintf+0x92>
    5a34:	80 33       	cpi	r24, 0x30	; 48
    5a36:	69 f4       	brne	.+26     	; 0x5a52 <vfprintf+0x98>
    5a38:	23 2d       	mov	r18, r3
    5a3a:	21 60       	ori	r18, 0x01	; 1
    5a3c:	16 c0       	rjmp	.+44     	; 0x5a6a <vfprintf+0xb0>
    5a3e:	83 2d       	mov	r24, r3
    5a40:	82 60       	ori	r24, 0x02	; 2
    5a42:	38 2e       	mov	r3, r24
    5a44:	e3 2d       	mov	r30, r3
    5a46:	e4 60       	ori	r30, 0x04	; 4
    5a48:	3e 2e       	mov	r3, r30
    5a4a:	2a c0       	rjmp	.+84     	; 0x5aa0 <vfprintf+0xe6>
    5a4c:	f3 2d       	mov	r31, r3
    5a4e:	f8 60       	ori	r31, 0x08	; 8
    5a50:	1d c0       	rjmp	.+58     	; 0x5a8c <vfprintf+0xd2>
    5a52:	37 fc       	sbrc	r3, 7
    5a54:	2d c0       	rjmp	.+90     	; 0x5ab0 <vfprintf+0xf6>
    5a56:	20 ed       	ldi	r18, 0xD0	; 208
    5a58:	28 0f       	add	r18, r24
    5a5a:	2a 30       	cpi	r18, 0x0A	; 10
    5a5c:	40 f0       	brcs	.+16     	; 0x5a6e <vfprintf+0xb4>
    5a5e:	8e 32       	cpi	r24, 0x2E	; 46
    5a60:	b9 f4       	brne	.+46     	; 0x5a90 <vfprintf+0xd6>
    5a62:	36 fc       	sbrc	r3, 6
    5a64:	81 c1       	rjmp	.+770    	; 0x5d68 <vfprintf+0x3ae>
    5a66:	23 2d       	mov	r18, r3
    5a68:	20 64       	ori	r18, 0x40	; 64
    5a6a:	32 2e       	mov	r3, r18
    5a6c:	19 c0       	rjmp	.+50     	; 0x5aa0 <vfprintf+0xe6>
    5a6e:	36 fe       	sbrs	r3, 6
    5a70:	06 c0       	rjmp	.+12     	; 0x5a7e <vfprintf+0xc4>
    5a72:	8a e0       	ldi	r24, 0x0A	; 10
    5a74:	98 9e       	mul	r9, r24
    5a76:	20 0d       	add	r18, r0
    5a78:	11 24       	eor	r1, r1
    5a7a:	92 2e       	mov	r9, r18
    5a7c:	11 c0       	rjmp	.+34     	; 0x5aa0 <vfprintf+0xe6>
    5a7e:	ea e0       	ldi	r30, 0x0A	; 10
    5a80:	2e 9e       	mul	r2, r30
    5a82:	20 0d       	add	r18, r0
    5a84:	11 24       	eor	r1, r1
    5a86:	22 2e       	mov	r2, r18
    5a88:	f3 2d       	mov	r31, r3
    5a8a:	f0 62       	ori	r31, 0x20	; 32
    5a8c:	3f 2e       	mov	r3, r31
    5a8e:	08 c0       	rjmp	.+16     	; 0x5aa0 <vfprintf+0xe6>
    5a90:	8c 36       	cpi	r24, 0x6C	; 108
    5a92:	21 f4       	brne	.+8      	; 0x5a9c <vfprintf+0xe2>
    5a94:	83 2d       	mov	r24, r3
    5a96:	80 68       	ori	r24, 0x80	; 128
    5a98:	38 2e       	mov	r3, r24
    5a9a:	02 c0       	rjmp	.+4      	; 0x5aa0 <vfprintf+0xe6>
    5a9c:	88 36       	cpi	r24, 0x68	; 104
    5a9e:	41 f4       	brne	.+16     	; 0x5ab0 <vfprintf+0xf6>
    5aa0:	f7 01       	movw	r30, r14
    5aa2:	93 fd       	sbrc	r25, 3
    5aa4:	85 91       	lpm	r24, Z+
    5aa6:	93 ff       	sbrs	r25, 3
    5aa8:	81 91       	ld	r24, Z+
    5aaa:	7f 01       	movw	r14, r30
    5aac:	81 11       	cpse	r24, r1
    5aae:	b3 cf       	rjmp	.-154    	; 0x5a16 <vfprintf+0x5c>
    5ab0:	98 2f       	mov	r25, r24
    5ab2:	9f 7d       	andi	r25, 0xDF	; 223
    5ab4:	95 54       	subi	r25, 0x45	; 69
    5ab6:	93 30       	cpi	r25, 0x03	; 3
    5ab8:	28 f4       	brcc	.+10     	; 0x5ac4 <vfprintf+0x10a>
    5aba:	0c 5f       	subi	r16, 0xFC	; 252
    5abc:	1f 4f       	sbci	r17, 0xFF	; 255
    5abe:	9f e3       	ldi	r25, 0x3F	; 63
    5ac0:	99 83       	std	Y+1, r25	; 0x01
    5ac2:	0d c0       	rjmp	.+26     	; 0x5ade <vfprintf+0x124>
    5ac4:	83 36       	cpi	r24, 0x63	; 99
    5ac6:	31 f0       	breq	.+12     	; 0x5ad4 <vfprintf+0x11a>
    5ac8:	83 37       	cpi	r24, 0x73	; 115
    5aca:	71 f0       	breq	.+28     	; 0x5ae8 <vfprintf+0x12e>
    5acc:	83 35       	cpi	r24, 0x53	; 83
    5ace:	09 f0       	breq	.+2      	; 0x5ad2 <vfprintf+0x118>
    5ad0:	59 c0       	rjmp	.+178    	; 0x5b84 <vfprintf+0x1ca>
    5ad2:	21 c0       	rjmp	.+66     	; 0x5b16 <vfprintf+0x15c>
    5ad4:	f8 01       	movw	r30, r16
    5ad6:	80 81       	ld	r24, Z
    5ad8:	89 83       	std	Y+1, r24	; 0x01
    5ada:	0e 5f       	subi	r16, 0xFE	; 254
    5adc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ade:	88 24       	eor	r8, r8
    5ae0:	83 94       	inc	r8
    5ae2:	91 2c       	mov	r9, r1
    5ae4:	53 01       	movw	r10, r6
    5ae6:	13 c0       	rjmp	.+38     	; 0x5b0e <vfprintf+0x154>
    5ae8:	28 01       	movw	r4, r16
    5aea:	f2 e0       	ldi	r31, 0x02	; 2
    5aec:	4f 0e       	add	r4, r31
    5aee:	51 1c       	adc	r5, r1
    5af0:	f8 01       	movw	r30, r16
    5af2:	a0 80       	ld	r10, Z
    5af4:	b1 80       	ldd	r11, Z+1	; 0x01
    5af6:	36 fe       	sbrs	r3, 6
    5af8:	03 c0       	rjmp	.+6      	; 0x5b00 <vfprintf+0x146>
    5afa:	69 2d       	mov	r22, r9
    5afc:	70 e0       	ldi	r23, 0x00	; 0
    5afe:	02 c0       	rjmp	.+4      	; 0x5b04 <vfprintf+0x14a>
    5b00:	6f ef       	ldi	r22, 0xFF	; 255
    5b02:	7f ef       	ldi	r23, 0xFF	; 255
    5b04:	c5 01       	movw	r24, r10
    5b06:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <strnlen>
    5b0a:	4c 01       	movw	r8, r24
    5b0c:	82 01       	movw	r16, r4
    5b0e:	f3 2d       	mov	r31, r3
    5b10:	ff 77       	andi	r31, 0x7F	; 127
    5b12:	3f 2e       	mov	r3, r31
    5b14:	16 c0       	rjmp	.+44     	; 0x5b42 <vfprintf+0x188>
    5b16:	28 01       	movw	r4, r16
    5b18:	22 e0       	ldi	r18, 0x02	; 2
    5b1a:	42 0e       	add	r4, r18
    5b1c:	51 1c       	adc	r5, r1
    5b1e:	f8 01       	movw	r30, r16
    5b20:	a0 80       	ld	r10, Z
    5b22:	b1 80       	ldd	r11, Z+1	; 0x01
    5b24:	36 fe       	sbrs	r3, 6
    5b26:	03 c0       	rjmp	.+6      	; 0x5b2e <vfprintf+0x174>
    5b28:	69 2d       	mov	r22, r9
    5b2a:	70 e0       	ldi	r23, 0x00	; 0
    5b2c:	02 c0       	rjmp	.+4      	; 0x5b32 <vfprintf+0x178>
    5b2e:	6f ef       	ldi	r22, 0xFF	; 255
    5b30:	7f ef       	ldi	r23, 0xFF	; 255
    5b32:	c5 01       	movw	r24, r10
    5b34:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <strnlen_P>
    5b38:	4c 01       	movw	r8, r24
    5b3a:	f3 2d       	mov	r31, r3
    5b3c:	f0 68       	ori	r31, 0x80	; 128
    5b3e:	3f 2e       	mov	r3, r31
    5b40:	82 01       	movw	r16, r4
    5b42:	33 fc       	sbrc	r3, 3
    5b44:	1b c0       	rjmp	.+54     	; 0x5b7c <vfprintf+0x1c2>
    5b46:	82 2d       	mov	r24, r2
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	88 16       	cp	r8, r24
    5b4c:	99 06       	cpc	r9, r25
    5b4e:	b0 f4       	brcc	.+44     	; 0x5b7c <vfprintf+0x1c2>
    5b50:	b6 01       	movw	r22, r12
    5b52:	80 e2       	ldi	r24, 0x20	; 32
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5b5a:	2a 94       	dec	r2
    5b5c:	f4 cf       	rjmp	.-24     	; 0x5b46 <vfprintf+0x18c>
    5b5e:	f5 01       	movw	r30, r10
    5b60:	37 fc       	sbrc	r3, 7
    5b62:	85 91       	lpm	r24, Z+
    5b64:	37 fe       	sbrs	r3, 7
    5b66:	81 91       	ld	r24, Z+
    5b68:	5f 01       	movw	r10, r30
    5b6a:	b6 01       	movw	r22, r12
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5b72:	21 10       	cpse	r2, r1
    5b74:	2a 94       	dec	r2
    5b76:	21 e0       	ldi	r18, 0x01	; 1
    5b78:	82 1a       	sub	r8, r18
    5b7a:	91 08       	sbc	r9, r1
    5b7c:	81 14       	cp	r8, r1
    5b7e:	91 04       	cpc	r9, r1
    5b80:	71 f7       	brne	.-36     	; 0x5b5e <vfprintf+0x1a4>
    5b82:	e8 c0       	rjmp	.+464    	; 0x5d54 <vfprintf+0x39a>
    5b84:	84 36       	cpi	r24, 0x64	; 100
    5b86:	11 f0       	breq	.+4      	; 0x5b8c <vfprintf+0x1d2>
    5b88:	89 36       	cpi	r24, 0x69	; 105
    5b8a:	41 f5       	brne	.+80     	; 0x5bdc <vfprintf+0x222>
    5b8c:	f8 01       	movw	r30, r16
    5b8e:	37 fe       	sbrs	r3, 7
    5b90:	07 c0       	rjmp	.+14     	; 0x5ba0 <vfprintf+0x1e6>
    5b92:	60 81       	ld	r22, Z
    5b94:	71 81       	ldd	r23, Z+1	; 0x01
    5b96:	82 81       	ldd	r24, Z+2	; 0x02
    5b98:	93 81       	ldd	r25, Z+3	; 0x03
    5b9a:	0c 5f       	subi	r16, 0xFC	; 252
    5b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b9e:	08 c0       	rjmp	.+16     	; 0x5bb0 <vfprintf+0x1f6>
    5ba0:	60 81       	ld	r22, Z
    5ba2:	71 81       	ldd	r23, Z+1	; 0x01
    5ba4:	07 2e       	mov	r0, r23
    5ba6:	00 0c       	add	r0, r0
    5ba8:	88 0b       	sbc	r24, r24
    5baa:	99 0b       	sbc	r25, r25
    5bac:	0e 5f       	subi	r16, 0xFE	; 254
    5bae:	1f 4f       	sbci	r17, 0xFF	; 255
    5bb0:	f3 2d       	mov	r31, r3
    5bb2:	ff 76       	andi	r31, 0x6F	; 111
    5bb4:	3f 2e       	mov	r3, r31
    5bb6:	97 ff       	sbrs	r25, 7
    5bb8:	09 c0       	rjmp	.+18     	; 0x5bcc <vfprintf+0x212>
    5bba:	90 95       	com	r25
    5bbc:	80 95       	com	r24
    5bbe:	70 95       	com	r23
    5bc0:	61 95       	neg	r22
    5bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    5bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc8:	f0 68       	ori	r31, 0x80	; 128
    5bca:	3f 2e       	mov	r3, r31
    5bcc:	2a e0       	ldi	r18, 0x0A	; 10
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	a3 01       	movw	r20, r6
    5bd2:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__ultoa_invert>
    5bd6:	88 2e       	mov	r8, r24
    5bd8:	86 18       	sub	r8, r6
    5bda:	45 c0       	rjmp	.+138    	; 0x5c66 <vfprintf+0x2ac>
    5bdc:	85 37       	cpi	r24, 0x75	; 117
    5bde:	31 f4       	brne	.+12     	; 0x5bec <vfprintf+0x232>
    5be0:	23 2d       	mov	r18, r3
    5be2:	2f 7e       	andi	r18, 0xEF	; 239
    5be4:	b2 2e       	mov	r11, r18
    5be6:	2a e0       	ldi	r18, 0x0A	; 10
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	25 c0       	rjmp	.+74     	; 0x5c36 <vfprintf+0x27c>
    5bec:	93 2d       	mov	r25, r3
    5bee:	99 7f       	andi	r25, 0xF9	; 249
    5bf0:	b9 2e       	mov	r11, r25
    5bf2:	8f 36       	cpi	r24, 0x6F	; 111
    5bf4:	c1 f0       	breq	.+48     	; 0x5c26 <vfprintf+0x26c>
    5bf6:	18 f4       	brcc	.+6      	; 0x5bfe <vfprintf+0x244>
    5bf8:	88 35       	cpi	r24, 0x58	; 88
    5bfa:	79 f0       	breq	.+30     	; 0x5c1a <vfprintf+0x260>
    5bfc:	b5 c0       	rjmp	.+362    	; 0x5d68 <vfprintf+0x3ae>
    5bfe:	80 37       	cpi	r24, 0x70	; 112
    5c00:	19 f0       	breq	.+6      	; 0x5c08 <vfprintf+0x24e>
    5c02:	88 37       	cpi	r24, 0x78	; 120
    5c04:	21 f0       	breq	.+8      	; 0x5c0e <vfprintf+0x254>
    5c06:	b0 c0       	rjmp	.+352    	; 0x5d68 <vfprintf+0x3ae>
    5c08:	e9 2f       	mov	r30, r25
    5c0a:	e0 61       	ori	r30, 0x10	; 16
    5c0c:	be 2e       	mov	r11, r30
    5c0e:	b4 fe       	sbrs	r11, 4
    5c10:	0d c0       	rjmp	.+26     	; 0x5c2c <vfprintf+0x272>
    5c12:	fb 2d       	mov	r31, r11
    5c14:	f4 60       	ori	r31, 0x04	; 4
    5c16:	bf 2e       	mov	r11, r31
    5c18:	09 c0       	rjmp	.+18     	; 0x5c2c <vfprintf+0x272>
    5c1a:	34 fe       	sbrs	r3, 4
    5c1c:	0a c0       	rjmp	.+20     	; 0x5c32 <vfprintf+0x278>
    5c1e:	29 2f       	mov	r18, r25
    5c20:	26 60       	ori	r18, 0x06	; 6
    5c22:	b2 2e       	mov	r11, r18
    5c24:	06 c0       	rjmp	.+12     	; 0x5c32 <vfprintf+0x278>
    5c26:	28 e0       	ldi	r18, 0x08	; 8
    5c28:	30 e0       	ldi	r19, 0x00	; 0
    5c2a:	05 c0       	rjmp	.+10     	; 0x5c36 <vfprintf+0x27c>
    5c2c:	20 e1       	ldi	r18, 0x10	; 16
    5c2e:	30 e0       	ldi	r19, 0x00	; 0
    5c30:	02 c0       	rjmp	.+4      	; 0x5c36 <vfprintf+0x27c>
    5c32:	20 e1       	ldi	r18, 0x10	; 16
    5c34:	32 e0       	ldi	r19, 0x02	; 2
    5c36:	f8 01       	movw	r30, r16
    5c38:	b7 fe       	sbrs	r11, 7
    5c3a:	07 c0       	rjmp	.+14     	; 0x5c4a <vfprintf+0x290>
    5c3c:	60 81       	ld	r22, Z
    5c3e:	71 81       	ldd	r23, Z+1	; 0x01
    5c40:	82 81       	ldd	r24, Z+2	; 0x02
    5c42:	93 81       	ldd	r25, Z+3	; 0x03
    5c44:	0c 5f       	subi	r16, 0xFC	; 252
    5c46:	1f 4f       	sbci	r17, 0xFF	; 255
    5c48:	06 c0       	rjmp	.+12     	; 0x5c56 <vfprintf+0x29c>
    5c4a:	60 81       	ld	r22, Z
    5c4c:	71 81       	ldd	r23, Z+1	; 0x01
    5c4e:	80 e0       	ldi	r24, 0x00	; 0
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	0e 5f       	subi	r16, 0xFE	; 254
    5c54:	1f 4f       	sbci	r17, 0xFF	; 255
    5c56:	a3 01       	movw	r20, r6
    5c58:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__ultoa_invert>
    5c5c:	88 2e       	mov	r8, r24
    5c5e:	86 18       	sub	r8, r6
    5c60:	fb 2d       	mov	r31, r11
    5c62:	ff 77       	andi	r31, 0x7F	; 127
    5c64:	3f 2e       	mov	r3, r31
    5c66:	36 fe       	sbrs	r3, 6
    5c68:	0d c0       	rjmp	.+26     	; 0x5c84 <vfprintf+0x2ca>
    5c6a:	23 2d       	mov	r18, r3
    5c6c:	2e 7f       	andi	r18, 0xFE	; 254
    5c6e:	a2 2e       	mov	r10, r18
    5c70:	89 14       	cp	r8, r9
    5c72:	58 f4       	brcc	.+22     	; 0x5c8a <vfprintf+0x2d0>
    5c74:	34 fe       	sbrs	r3, 4
    5c76:	0b c0       	rjmp	.+22     	; 0x5c8e <vfprintf+0x2d4>
    5c78:	32 fc       	sbrc	r3, 2
    5c7a:	09 c0       	rjmp	.+18     	; 0x5c8e <vfprintf+0x2d4>
    5c7c:	83 2d       	mov	r24, r3
    5c7e:	8e 7e       	andi	r24, 0xEE	; 238
    5c80:	a8 2e       	mov	r10, r24
    5c82:	05 c0       	rjmp	.+10     	; 0x5c8e <vfprintf+0x2d4>
    5c84:	b8 2c       	mov	r11, r8
    5c86:	a3 2c       	mov	r10, r3
    5c88:	03 c0       	rjmp	.+6      	; 0x5c90 <vfprintf+0x2d6>
    5c8a:	b8 2c       	mov	r11, r8
    5c8c:	01 c0       	rjmp	.+2      	; 0x5c90 <vfprintf+0x2d6>
    5c8e:	b9 2c       	mov	r11, r9
    5c90:	a4 fe       	sbrs	r10, 4
    5c92:	0f c0       	rjmp	.+30     	; 0x5cb2 <vfprintf+0x2f8>
    5c94:	fe 01       	movw	r30, r28
    5c96:	e8 0d       	add	r30, r8
    5c98:	f1 1d       	adc	r31, r1
    5c9a:	80 81       	ld	r24, Z
    5c9c:	80 33       	cpi	r24, 0x30	; 48
    5c9e:	21 f4       	brne	.+8      	; 0x5ca8 <vfprintf+0x2ee>
    5ca0:	9a 2d       	mov	r25, r10
    5ca2:	99 7e       	andi	r25, 0xE9	; 233
    5ca4:	a9 2e       	mov	r10, r25
    5ca6:	09 c0       	rjmp	.+18     	; 0x5cba <vfprintf+0x300>
    5ca8:	a2 fe       	sbrs	r10, 2
    5caa:	06 c0       	rjmp	.+12     	; 0x5cb8 <vfprintf+0x2fe>
    5cac:	b3 94       	inc	r11
    5cae:	b3 94       	inc	r11
    5cb0:	04 c0       	rjmp	.+8      	; 0x5cba <vfprintf+0x300>
    5cb2:	8a 2d       	mov	r24, r10
    5cb4:	86 78       	andi	r24, 0x86	; 134
    5cb6:	09 f0       	breq	.+2      	; 0x5cba <vfprintf+0x300>
    5cb8:	b3 94       	inc	r11
    5cba:	a3 fc       	sbrc	r10, 3
    5cbc:	11 c0       	rjmp	.+34     	; 0x5ce0 <vfprintf+0x326>
    5cbe:	a0 fe       	sbrs	r10, 0
    5cc0:	06 c0       	rjmp	.+12     	; 0x5cce <vfprintf+0x314>
    5cc2:	b2 14       	cp	r11, r2
    5cc4:	88 f4       	brcc	.+34     	; 0x5ce8 <vfprintf+0x32e>
    5cc6:	28 0c       	add	r2, r8
    5cc8:	92 2c       	mov	r9, r2
    5cca:	9b 18       	sub	r9, r11
    5ccc:	0e c0       	rjmp	.+28     	; 0x5cea <vfprintf+0x330>
    5cce:	b2 14       	cp	r11, r2
    5cd0:	60 f4       	brcc	.+24     	; 0x5cea <vfprintf+0x330>
    5cd2:	b6 01       	movw	r22, r12
    5cd4:	80 e2       	ldi	r24, 0x20	; 32
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5cdc:	b3 94       	inc	r11
    5cde:	f7 cf       	rjmp	.-18     	; 0x5cce <vfprintf+0x314>
    5ce0:	b2 14       	cp	r11, r2
    5ce2:	18 f4       	brcc	.+6      	; 0x5cea <vfprintf+0x330>
    5ce4:	2b 18       	sub	r2, r11
    5ce6:	02 c0       	rjmp	.+4      	; 0x5cec <vfprintf+0x332>
    5ce8:	98 2c       	mov	r9, r8
    5cea:	21 2c       	mov	r2, r1
    5cec:	a4 fe       	sbrs	r10, 4
    5cee:	10 c0       	rjmp	.+32     	; 0x5d10 <vfprintf+0x356>
    5cf0:	b6 01       	movw	r22, r12
    5cf2:	80 e3       	ldi	r24, 0x30	; 48
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5cfa:	a2 fe       	sbrs	r10, 2
    5cfc:	17 c0       	rjmp	.+46     	; 0x5d2c <vfprintf+0x372>
    5cfe:	a1 fc       	sbrc	r10, 1
    5d00:	03 c0       	rjmp	.+6      	; 0x5d08 <vfprintf+0x34e>
    5d02:	88 e7       	ldi	r24, 0x78	; 120
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	02 c0       	rjmp	.+4      	; 0x5d0c <vfprintf+0x352>
    5d08:	88 e5       	ldi	r24, 0x58	; 88
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	b6 01       	movw	r22, r12
    5d0e:	0c c0       	rjmp	.+24     	; 0x5d28 <vfprintf+0x36e>
    5d10:	8a 2d       	mov	r24, r10
    5d12:	86 78       	andi	r24, 0x86	; 134
    5d14:	59 f0       	breq	.+22     	; 0x5d2c <vfprintf+0x372>
    5d16:	a1 fe       	sbrs	r10, 1
    5d18:	02 c0       	rjmp	.+4      	; 0x5d1e <vfprintf+0x364>
    5d1a:	8b e2       	ldi	r24, 0x2B	; 43
    5d1c:	01 c0       	rjmp	.+2      	; 0x5d20 <vfprintf+0x366>
    5d1e:	80 e2       	ldi	r24, 0x20	; 32
    5d20:	a7 fc       	sbrc	r10, 7
    5d22:	8d e2       	ldi	r24, 0x2D	; 45
    5d24:	b6 01       	movw	r22, r12
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5d2c:	89 14       	cp	r8, r9
    5d2e:	38 f4       	brcc	.+14     	; 0x5d3e <vfprintf+0x384>
    5d30:	b6 01       	movw	r22, r12
    5d32:	80 e3       	ldi	r24, 0x30	; 48
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5d3a:	9a 94       	dec	r9
    5d3c:	f7 cf       	rjmp	.-18     	; 0x5d2c <vfprintf+0x372>
    5d3e:	8a 94       	dec	r8
    5d40:	f3 01       	movw	r30, r6
    5d42:	e8 0d       	add	r30, r8
    5d44:	f1 1d       	adc	r31, r1
    5d46:	80 81       	ld	r24, Z
    5d48:	b6 01       	movw	r22, r12
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5d50:	81 10       	cpse	r8, r1
    5d52:	f5 cf       	rjmp	.-22     	; 0x5d3e <vfprintf+0x384>
    5d54:	22 20       	and	r2, r2
    5d56:	09 f4       	brne	.+2      	; 0x5d5a <vfprintf+0x3a0>
    5d58:	42 ce       	rjmp	.-892    	; 0x59de <vfprintf+0x24>
    5d5a:	b6 01       	movw	r22, r12
    5d5c:	80 e2       	ldi	r24, 0x20	; 32
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <fputc>
    5d64:	2a 94       	dec	r2
    5d66:	f6 cf       	rjmp	.-20     	; 0x5d54 <vfprintf+0x39a>
    5d68:	f6 01       	movw	r30, r12
    5d6a:	86 81       	ldd	r24, Z+6	; 0x06
    5d6c:	97 81       	ldd	r25, Z+7	; 0x07
    5d6e:	02 c0       	rjmp	.+4      	; 0x5d74 <vfprintf+0x3ba>
    5d70:	8f ef       	ldi	r24, 0xFF	; 255
    5d72:	9f ef       	ldi	r25, 0xFF	; 255
    5d74:	2b 96       	adiw	r28, 0x0b	; 11
    5d76:	e2 e1       	ldi	r30, 0x12	; 18
    5d78:	0c 94 d2 2f 	jmp	0x5fa4	; 0x5fa4 <__epilogue_restores__>

00005d7c <strnlen_P>:
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	05 90       	lpm	r0, Z+
    5d80:	61 50       	subi	r22, 0x01	; 1
    5d82:	70 40       	sbci	r23, 0x00	; 0
    5d84:	01 10       	cpse	r0, r1
    5d86:	d8 f7       	brcc	.-10     	; 0x5d7e <strnlen_P+0x2>
    5d88:	80 95       	com	r24
    5d8a:	90 95       	com	r25
    5d8c:	8e 0f       	add	r24, r30
    5d8e:	9f 1f       	adc	r25, r31
    5d90:	08 95       	ret

00005d92 <strnlen>:
    5d92:	fc 01       	movw	r30, r24
    5d94:	61 50       	subi	r22, 0x01	; 1
    5d96:	70 40       	sbci	r23, 0x00	; 0
    5d98:	01 90       	ld	r0, Z+
    5d9a:	01 10       	cpse	r0, r1
    5d9c:	d8 f7       	brcc	.-10     	; 0x5d94 <strnlen+0x2>
    5d9e:	80 95       	com	r24
    5da0:	90 95       	com	r25
    5da2:	8e 0f       	add	r24, r30
    5da4:	9f 1f       	adc	r25, r31
    5da6:	08 95       	ret

00005da8 <fputc>:
    5da8:	0f 93       	push	r16
    5daa:	1f 93       	push	r17
    5dac:	cf 93       	push	r28
    5dae:	df 93       	push	r29
    5db0:	fb 01       	movw	r30, r22
    5db2:	23 81       	ldd	r18, Z+3	; 0x03
    5db4:	21 fd       	sbrc	r18, 1
    5db6:	03 c0       	rjmp	.+6      	; 0x5dbe <fputc+0x16>
    5db8:	8f ef       	ldi	r24, 0xFF	; 255
    5dba:	9f ef       	ldi	r25, 0xFF	; 255
    5dbc:	2c c0       	rjmp	.+88     	; 0x5e16 <fputc+0x6e>
    5dbe:	22 ff       	sbrs	r18, 2
    5dc0:	16 c0       	rjmp	.+44     	; 0x5dee <fputc+0x46>
    5dc2:	46 81       	ldd	r20, Z+6	; 0x06
    5dc4:	57 81       	ldd	r21, Z+7	; 0x07
    5dc6:	24 81       	ldd	r18, Z+4	; 0x04
    5dc8:	35 81       	ldd	r19, Z+5	; 0x05
    5dca:	42 17       	cp	r20, r18
    5dcc:	53 07       	cpc	r21, r19
    5dce:	44 f4       	brge	.+16     	; 0x5de0 <fputc+0x38>
    5dd0:	a0 81       	ld	r26, Z
    5dd2:	b1 81       	ldd	r27, Z+1	; 0x01
    5dd4:	9d 01       	movw	r18, r26
    5dd6:	2f 5f       	subi	r18, 0xFF	; 255
    5dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    5dda:	31 83       	std	Z+1, r19	; 0x01
    5ddc:	20 83       	st	Z, r18
    5dde:	8c 93       	st	X, r24
    5de0:	26 81       	ldd	r18, Z+6	; 0x06
    5de2:	37 81       	ldd	r19, Z+7	; 0x07
    5de4:	2f 5f       	subi	r18, 0xFF	; 255
    5de6:	3f 4f       	sbci	r19, 0xFF	; 255
    5de8:	37 83       	std	Z+7, r19	; 0x07
    5dea:	26 83       	std	Z+6, r18	; 0x06
    5dec:	14 c0       	rjmp	.+40     	; 0x5e16 <fputc+0x6e>
    5dee:	8b 01       	movw	r16, r22
    5df0:	ec 01       	movw	r28, r24
    5df2:	fb 01       	movw	r30, r22
    5df4:	00 84       	ldd	r0, Z+8	; 0x08
    5df6:	f1 85       	ldd	r31, Z+9	; 0x09
    5df8:	e0 2d       	mov	r30, r0
    5dfa:	09 95       	icall
    5dfc:	89 2b       	or	r24, r25
    5dfe:	e1 f6       	brne	.-72     	; 0x5db8 <fputc+0x10>
    5e00:	d8 01       	movw	r26, r16
    5e02:	16 96       	adiw	r26, 0x06	; 6
    5e04:	8d 91       	ld	r24, X+
    5e06:	9c 91       	ld	r25, X
    5e08:	17 97       	sbiw	r26, 0x07	; 7
    5e0a:	01 96       	adiw	r24, 0x01	; 1
    5e0c:	17 96       	adiw	r26, 0x07	; 7
    5e0e:	9c 93       	st	X, r25
    5e10:	8e 93       	st	-X, r24
    5e12:	16 97       	sbiw	r26, 0x06	; 6
    5e14:	ce 01       	movw	r24, r28
    5e16:	df 91       	pop	r29
    5e18:	cf 91       	pop	r28
    5e1a:	1f 91       	pop	r17
    5e1c:	0f 91       	pop	r16
    5e1e:	08 95       	ret

00005e20 <__ultoa_invert>:
    5e20:	fa 01       	movw	r30, r20
    5e22:	aa 27       	eor	r26, r26
    5e24:	28 30       	cpi	r18, 0x08	; 8
    5e26:	51 f1       	breq	.+84     	; 0x5e7c <__ultoa_invert+0x5c>
    5e28:	20 31       	cpi	r18, 0x10	; 16
    5e2a:	81 f1       	breq	.+96     	; 0x5e8c <__ultoa_invert+0x6c>
    5e2c:	e8 94       	clt
    5e2e:	6f 93       	push	r22
    5e30:	6e 7f       	andi	r22, 0xFE	; 254
    5e32:	6e 5f       	subi	r22, 0xFE	; 254
    5e34:	7f 4f       	sbci	r23, 0xFF	; 255
    5e36:	8f 4f       	sbci	r24, 0xFF	; 255
    5e38:	9f 4f       	sbci	r25, 0xFF	; 255
    5e3a:	af 4f       	sbci	r26, 0xFF	; 255
    5e3c:	b1 e0       	ldi	r27, 0x01	; 1
    5e3e:	3e d0       	rcall	.+124    	; 0x5ebc <__ultoa_invert+0x9c>
    5e40:	b4 e0       	ldi	r27, 0x04	; 4
    5e42:	3c d0       	rcall	.+120    	; 0x5ebc <__ultoa_invert+0x9c>
    5e44:	67 0f       	add	r22, r23
    5e46:	78 1f       	adc	r23, r24
    5e48:	89 1f       	adc	r24, r25
    5e4a:	9a 1f       	adc	r25, r26
    5e4c:	a1 1d       	adc	r26, r1
    5e4e:	68 0f       	add	r22, r24
    5e50:	79 1f       	adc	r23, r25
    5e52:	8a 1f       	adc	r24, r26
    5e54:	91 1d       	adc	r25, r1
    5e56:	a1 1d       	adc	r26, r1
    5e58:	6a 0f       	add	r22, r26
    5e5a:	71 1d       	adc	r23, r1
    5e5c:	81 1d       	adc	r24, r1
    5e5e:	91 1d       	adc	r25, r1
    5e60:	a1 1d       	adc	r26, r1
    5e62:	20 d0       	rcall	.+64     	; 0x5ea4 <__ultoa_invert+0x84>
    5e64:	09 f4       	brne	.+2      	; 0x5e68 <__ultoa_invert+0x48>
    5e66:	68 94       	set
    5e68:	3f 91       	pop	r19
    5e6a:	2a e0       	ldi	r18, 0x0A	; 10
    5e6c:	26 9f       	mul	r18, r22
    5e6e:	11 24       	eor	r1, r1
    5e70:	30 19       	sub	r19, r0
    5e72:	30 5d       	subi	r19, 0xD0	; 208
    5e74:	31 93       	st	Z+, r19
    5e76:	de f6       	brtc	.-74     	; 0x5e2e <__ultoa_invert+0xe>
    5e78:	cf 01       	movw	r24, r30
    5e7a:	08 95       	ret
    5e7c:	46 2f       	mov	r20, r22
    5e7e:	47 70       	andi	r20, 0x07	; 7
    5e80:	40 5d       	subi	r20, 0xD0	; 208
    5e82:	41 93       	st	Z+, r20
    5e84:	b3 e0       	ldi	r27, 0x03	; 3
    5e86:	0f d0       	rcall	.+30     	; 0x5ea6 <__ultoa_invert+0x86>
    5e88:	c9 f7       	brne	.-14     	; 0x5e7c <__ultoa_invert+0x5c>
    5e8a:	f6 cf       	rjmp	.-20     	; 0x5e78 <__ultoa_invert+0x58>
    5e8c:	46 2f       	mov	r20, r22
    5e8e:	4f 70       	andi	r20, 0x0F	; 15
    5e90:	40 5d       	subi	r20, 0xD0	; 208
    5e92:	4a 33       	cpi	r20, 0x3A	; 58
    5e94:	18 f0       	brcs	.+6      	; 0x5e9c <__ultoa_invert+0x7c>
    5e96:	49 5d       	subi	r20, 0xD9	; 217
    5e98:	31 fd       	sbrc	r19, 1
    5e9a:	40 52       	subi	r20, 0x20	; 32
    5e9c:	41 93       	st	Z+, r20
    5e9e:	02 d0       	rcall	.+4      	; 0x5ea4 <__ultoa_invert+0x84>
    5ea0:	a9 f7       	brne	.-22     	; 0x5e8c <__ultoa_invert+0x6c>
    5ea2:	ea cf       	rjmp	.-44     	; 0x5e78 <__ultoa_invert+0x58>
    5ea4:	b4 e0       	ldi	r27, 0x04	; 4
    5ea6:	a6 95       	lsr	r26
    5ea8:	97 95       	ror	r25
    5eaa:	87 95       	ror	r24
    5eac:	77 95       	ror	r23
    5eae:	67 95       	ror	r22
    5eb0:	ba 95       	dec	r27
    5eb2:	c9 f7       	brne	.-14     	; 0x5ea6 <__ultoa_invert+0x86>
    5eb4:	00 97       	sbiw	r24, 0x00	; 0
    5eb6:	61 05       	cpc	r22, r1
    5eb8:	71 05       	cpc	r23, r1
    5eba:	08 95       	ret
    5ebc:	9b 01       	movw	r18, r22
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	0a 2e       	mov	r0, r26
    5ec2:	06 94       	lsr	r0
    5ec4:	57 95       	ror	r21
    5ec6:	47 95       	ror	r20
    5ec8:	37 95       	ror	r19
    5eca:	27 95       	ror	r18
    5ecc:	ba 95       	dec	r27
    5ece:	c9 f7       	brne	.-14     	; 0x5ec2 <__ultoa_invert+0xa2>
    5ed0:	62 0f       	add	r22, r18
    5ed2:	73 1f       	adc	r23, r19
    5ed4:	84 1f       	adc	r24, r20
    5ed6:	95 1f       	adc	r25, r21
    5ed8:	a0 1d       	adc	r26, r0
    5eda:	08 95       	ret

00005edc <eeprom_read_byte>:
    5edc:	f9 99       	sbic	0x1f, 1	; 31
    5ede:	fe cf       	rjmp	.-4      	; 0x5edc <eeprom_read_byte>
    5ee0:	92 bd       	out	0x22, r25	; 34
    5ee2:	81 bd       	out	0x21, r24	; 33
    5ee4:	f8 9a       	sbi	0x1f, 0	; 31
    5ee6:	99 27       	eor	r25, r25
    5ee8:	80 b5       	in	r24, 0x20	; 32
    5eea:	08 95       	ret

00005eec <eeprom_read_dword>:
    5eec:	a6 e1       	ldi	r26, 0x16	; 22
    5eee:	b0 e0       	ldi	r27, 0x00	; 0
    5ef0:	44 e0       	ldi	r20, 0x04	; 4
    5ef2:	50 e0       	ldi	r21, 0x00	; 0
    5ef4:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <eeprom_read_blraw>

00005ef8 <eeprom_read_word>:
    5ef8:	a8 e1       	ldi	r26, 0x18	; 24
    5efa:	b0 e0       	ldi	r27, 0x00	; 0
    5efc:	42 e0       	ldi	r20, 0x02	; 2
    5efe:	50 e0       	ldi	r21, 0x00	; 0
    5f00:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <eeprom_read_blraw>

00005f04 <eeprom_update_byte>:
    5f04:	26 2f       	mov	r18, r22

00005f06 <eeprom_update_r18>:
    5f06:	f9 99       	sbic	0x1f, 1	; 31
    5f08:	fe cf       	rjmp	.-4      	; 0x5f06 <eeprom_update_r18>
    5f0a:	92 bd       	out	0x22, r25	; 34
    5f0c:	81 bd       	out	0x21, r24	; 33
    5f0e:	f8 9a       	sbi	0x1f, 0	; 31
    5f10:	01 97       	sbiw	r24, 0x01	; 1
    5f12:	00 b4       	in	r0, 0x20	; 32
    5f14:	02 16       	cp	r0, r18
    5f16:	39 f0       	breq	.+14     	; 0x5f26 <eeprom_update_r18+0x20>
    5f18:	1f ba       	out	0x1f, r1	; 31
    5f1a:	20 bd       	out	0x20, r18	; 32
    5f1c:	0f b6       	in	r0, 0x3f	; 63
    5f1e:	f8 94       	cli
    5f20:	fa 9a       	sbi	0x1f, 2	; 31
    5f22:	f9 9a       	sbi	0x1f, 1	; 31
    5f24:	0f be       	out	0x3f, r0	; 63
    5f26:	08 95       	ret

00005f28 <eeprom_update_dword>:
    5f28:	03 96       	adiw	r24, 0x03	; 3
    5f2a:	27 2f       	mov	r18, r23
    5f2c:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <eeprom_update_r18>
    5f30:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <eeprom_update_byte>
    5f34:	25 2f       	mov	r18, r21
    5f36:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <eeprom_update_r18>
    5f3a:	24 2f       	mov	r18, r20
    5f3c:	0c 94 83 2f 	jmp	0x5f06	; 0x5f06 <eeprom_update_r18>

00005f40 <eeprom_update_word>:
    5f40:	01 96       	adiw	r24, 0x01	; 1
    5f42:	27 2f       	mov	r18, r23
    5f44:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <eeprom_update_r18>
    5f48:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <eeprom_update_byte>

00005f4c <eeprom_read_block>:
    5f4c:	dc 01       	movw	r26, r24
    5f4e:	cb 01       	movw	r24, r22

00005f50 <eeprom_read_blraw>:
    5f50:	fc 01       	movw	r30, r24
    5f52:	f9 99       	sbic	0x1f, 1	; 31
    5f54:	fe cf       	rjmp	.-4      	; 0x5f52 <eeprom_read_blraw+0x2>
    5f56:	06 c0       	rjmp	.+12     	; 0x5f64 <eeprom_read_blraw+0x14>
    5f58:	f2 bd       	out	0x22, r31	; 34
    5f5a:	e1 bd       	out	0x21, r30	; 33
    5f5c:	f8 9a       	sbi	0x1f, 0	; 31
    5f5e:	31 96       	adiw	r30, 0x01	; 1
    5f60:	00 b4       	in	r0, 0x20	; 32
    5f62:	0d 92       	st	X+, r0
    5f64:	41 50       	subi	r20, 0x01	; 1
    5f66:	50 40       	sbci	r21, 0x00	; 0
    5f68:	b8 f7       	brcc	.-18     	; 0x5f58 <eeprom_read_blraw+0x8>
    5f6a:	08 95       	ret

00005f6c <__prologue_saves__>:
    5f6c:	2f 92       	push	r2
    5f6e:	3f 92       	push	r3
    5f70:	4f 92       	push	r4
    5f72:	5f 92       	push	r5
    5f74:	6f 92       	push	r6
    5f76:	7f 92       	push	r7
    5f78:	8f 92       	push	r8
    5f7a:	9f 92       	push	r9
    5f7c:	af 92       	push	r10
    5f7e:	bf 92       	push	r11
    5f80:	cf 92       	push	r12
    5f82:	df 92       	push	r13
    5f84:	ef 92       	push	r14
    5f86:	ff 92       	push	r15
    5f88:	0f 93       	push	r16
    5f8a:	1f 93       	push	r17
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	cd b7       	in	r28, 0x3d	; 61
    5f92:	de b7       	in	r29, 0x3e	; 62
    5f94:	ca 1b       	sub	r28, r26
    5f96:	db 0b       	sbc	r29, r27
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	f8 94       	cli
    5f9c:	de bf       	out	0x3e, r29	; 62
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	cd bf       	out	0x3d, r28	; 61
    5fa2:	09 94       	ijmp

00005fa4 <__epilogue_restores__>:
    5fa4:	2a 88       	ldd	r2, Y+18	; 0x12
    5fa6:	39 88       	ldd	r3, Y+17	; 0x11
    5fa8:	48 88       	ldd	r4, Y+16	; 0x10
    5faa:	5f 84       	ldd	r5, Y+15	; 0x0f
    5fac:	6e 84       	ldd	r6, Y+14	; 0x0e
    5fae:	7d 84       	ldd	r7, Y+13	; 0x0d
    5fb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    5fb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    5fb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    5fb6:	b9 84       	ldd	r11, Y+9	; 0x09
    5fb8:	c8 84       	ldd	r12, Y+8	; 0x08
    5fba:	df 80       	ldd	r13, Y+7	; 0x07
    5fbc:	ee 80       	ldd	r14, Y+6	; 0x06
    5fbe:	fd 80       	ldd	r15, Y+5	; 0x05
    5fc0:	0c 81       	ldd	r16, Y+4	; 0x04
    5fc2:	1b 81       	ldd	r17, Y+3	; 0x03
    5fc4:	aa 81       	ldd	r26, Y+2	; 0x02
    5fc6:	b9 81       	ldd	r27, Y+1	; 0x01
    5fc8:	ce 0f       	add	r28, r30
    5fca:	d1 1d       	adc	r29, r1
    5fcc:	0f b6       	in	r0, 0x3f	; 63
    5fce:	f8 94       	cli
    5fd0:	de bf       	out	0x3e, r29	; 62
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	ed 01       	movw	r28, r26
    5fd8:	08 95       	ret

00005fda <__do_global_dtors>:
    5fda:	10 e0       	ldi	r17, 0x00	; 0
    5fdc:	cc ef       	ldi	r28, 0xFC	; 252
    5fde:	d0 e0       	ldi	r29, 0x00	; 0
    5fe0:	04 c0       	rjmp	.+8      	; 0x5fea <__do_global_dtors+0x10>
    5fe2:	fe 01       	movw	r30, r28
    5fe4:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <__tablejump2__>
    5fe8:	21 96       	adiw	r28, 0x01	; 1
    5fea:	cd 3f       	cpi	r28, 0xFD	; 253
    5fec:	d1 07       	cpc	r29, r17
    5fee:	c9 f7       	brne	.-14     	; 0x5fe2 <__do_global_dtors+0x8>
    5ff0:	f8 94       	cli

00005ff2 <__stop_program>:
    5ff2:	ff cf       	rjmp	.-2      	; 0x5ff2 <__stop_program>
