
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  00006950  00006a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006950  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029a  00800314  00800314  00006c18  2**0
                  ALLOC
  3 .eeprom       0000032d  00810000  00810000  00006c18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00006f45  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fa4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00006fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007c19  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001971  00000000  00000000  0000f109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000048ab  00000000  00000000  00010a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000df8  00000000  00000000  00015328  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002779  00000000  00000000  00016120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005ea0  00000000  00000000  00018899  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000518  00000000  00000000  0001e739  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__dtors_end>
       4:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_1>
       8:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      10:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      14:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__vector_5>
      18:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      1c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      20:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_8>
      24:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      28:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      2c:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__vector_11>
      30:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      34:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      38:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__vector_14>
      3c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      40:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      44:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      48:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_18>
      4c:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__vector_19>
      50:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      54:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_21>
      58:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      5c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      60:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      64:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      68:	6d 01       	movw	r12, r26
      6a:	78 01       	movw	r14, r16
      6c:	83 01       	movw	r16, r6
      6e:	8e 01       	movw	r16, r28
      70:	99 01       	movw	r18, r18
      72:	a4 01       	movw	r20, r8
      74:	af 01       	movw	r20, r30
      76:	ba 01       	movw	r22, r20
      78:	c5 01       	movw	r24, r10
      7a:	d0 01       	movw	r26, r0
      7c:	db 01       	movw	r26, r22
      7e:	32 02       	muls	r19, r18
      80:	32 02       	muls	r19, r18
      82:	e6 01       	movw	r28, r12
      84:	f1 01       	movw	r30, r2
      86:	fc 01       	movw	r30, r24
      88:	07 02       	muls	r16, r23
      8a:	12 02       	muls	r17, r18
      8c:	1d 02       	muls	r17, r29
      8e:	28 02       	muls	r18, r24
      90:	3d 02       	muls	r19, r29
      92:	41 02       	muls	r20, r17
      94:	45 02       	muls	r20, r21
      96:	49 02       	muls	r20, r25
      98:	4d 02       	muls	r20, r29
      9a:	51 02       	muls	r21, r17
      9c:	55 02       	muls	r21, r21
      9e:	5a 02       	muls	r21, r26
      a0:	5e 02       	muls	r21, r30
      a2:	77 02       	muls	r23, r23
      a4:	77 02       	muls	r23, r23
      a6:	62 02       	muls	r22, r18
      a8:	66 02       	muls	r22, r22
      aa:	6b 02       	muls	r22, r27
      ac:	6f 02       	muls	r22, r31
      ae:	73 02       	muls	r23, r19
      b0:	88 02       	muls	r24, r24
      b2:	8e 02       	muls	r24, r30
      b4:	94 02       	muls	r25, r20
      b6:	9a 02       	muls	r25, r26
      b8:	a0 02       	muls	r26, r16
      ba:	a6 02       	muls	r26, r22
      bc:	ac 02       	muls	r26, r28
      be:	b2 02       	muls	r27, r18
      c0:	b8 02       	muls	r27, r24
      c2:	be 02       	muls	r27, r30
      c4:	c4 02       	muls	r28, r20
      c6:	e7 02       	muls	r30, r23
      c8:	e7 02       	muls	r30, r23
      ca:	ca 02       	muls	r28, r26
      cc:	d0 02       	muls	r29, r16
      ce:	d6 02       	muls	r29, r22
      d0:	dc 02       	muls	r29, r28
      d2:	e2 02       	muls	r30, r18
      d4:	08 03       	fmul	r16, r16
      d6:	67 03       	mulsu	r22, r23
      d8:	67 03       	mulsu	r22, r23
      da:	25 03       	mulsu	r18, r21
      dc:	4c 03       	fmul	r20, r20
      de:	05 03       	mulsu	r16, r21
      e0:	4f 03       	fmul	r20, r23
      e2:	55 03       	mulsu	r21, r21
      e4:	02 03       	mulsu	r16, r18
      e6:	5f 03       	fmul	r21, r23
      e8:	ff 02       	muls	r31, r31
      ea:	46 03       	mulsu	r20, r22
      ec:	49 03       	fmul	r20, r17
      ee:	58 03       	fmul	r21, r16
      f0:	b0 03       	fmuls	r19, r16
      f2:	82 03       	fmuls	r16, r18
      f4:	b3 03       	fmuls	r19, r19
      f6:	85 03       	fmuls	r16, r21
      f8:	88 03       	fmulsu	r16, r16
      fa:	8b 03       	fmulsu	r16, r19
      fc:	8e 03       	fmulsu	r16, r22
      fe:	91 03       	fmuls	r17, r17
     100:	94 03       	fmuls	r17, r20
     102:	97 03       	fmuls	r17, r23
     104:	9a 03       	fmulsu	r17, r18
     106:	b0 13       	cpse	r27, r16
     108:	b0 13       	cpse	r27, r16
     10a:	b0 13       	cpse	r27, r16
     10c:	b0 13       	cpse	r27, r16
     10e:	b0 13       	cpse	r27, r16
     110:	30 14       	cp	r3, r0
     112:	30 14       	cp	r3, r0
     114:	ce 13       	cpse	r28, r30
     116:	ce 13       	cpse	r28, r30
     118:	ce 13       	cpse	r28, r30
     11a:	ce 13       	cpse	r28, r30
     11c:	ce 13       	cpse	r28, r30
     11e:	f0 13       	cpse	r31, r16
     120:	f0 13       	cpse	r31, r16
     122:	f0 13       	cpse	r31, r16
     124:	f0 13       	cpse	r31, r16
     126:	f0 13       	cpse	r31, r16
     128:	30 14       	cp	r3, r0
     12a:	10 14       	cp	r1, r0
     12c:	6d 20       	and	r6, r13
     12e:	af 20       	and	r10, r15
     130:	23 21       	and	r18, r3
     132:	2e 21       	and	r18, r14
     134:	39 21       	and	r19, r9
     136:	43 21       	and	r20, r3
     138:	50 21       	and	r21, r0
     13a:	e3 21       	and	r30, r3
     13c:	52 22       	and	r5, r18
     13e:	cd 22       	and	r12, r29
     140:	11 23       	and	r17, r17
     142:	55 23       	and	r21, r21
     144:	91 22       	and	r9, r17
     146:	9b 23       	and	r25, r27
     148:	bd 23       	and	r27, r29
     14a:	e5 23       	and	r30, r21
     14c:	ac 21       	and	r26, r12
     14e:	f3 23       	and	r31, r19
     150:	e6 20       	and	r14, r6
     152:	1f 24       	eor	r1, r15
     154:	ac 28       	or	r10, r12
     156:	70 28       	or	r7, r0
     158:	9c 28       	or	r9, r12
     15a:	b4 28       	or	r11, r4
     15c:	a0 28       	or	r10, r0
     15e:	b4 28       	or	r11, r4
     160:	80 28       	or	r8, r0
     162:	6c 28       	or	r6, r12
     164:	78 28       	or	r7, r8
     166:	7c 28       	or	r7, r12
     168:	b4 28       	or	r11, r4
     16a:	90 28       	or	r9, r0
     16c:	64 28       	or	r6, r4
     16e:	94 28       	or	r9, r4
     170:	60 28       	or	r6, r0
     172:	74 28       	or	r7, r4
     174:	38 28       	or	r3, r8
     176:	3c 28       	or	r3, r12
     178:	40 28       	or	r4, r0
     17a:	44 28       	or	r4, r4
     17c:	48 28       	or	r4, r8
     17e:	4c 28       	or	r4, r12
     180:	50 28       	or	r5, r0
     182:	54 28       	or	r5, r4
     184:	58 28       	or	r5, r8
     186:	5c 28       	or	r5, r12
     188:	84 28       	or	r8, r4
     18a:	88 28       	or	r8, r8
     18c:	b0 28       	or	r11, r0
     18e:	8c 28       	or	r8, r12
     190:	b4 28       	or	r11, r4
     192:	68 28       	or	r6, r8
     194:	a4 28       	or	r10, r4
     196:	b8 28       	or	r11, r8
     198:	d4 27       	eor	r29, r20
     19a:	d8 27       	eor	r29, r24
     19c:	dc 27       	eor	r29, r28
     19e:	e0 27       	eor	r30, r16
     1a0:	e4 27       	eor	r30, r20
     1a2:	e8 27       	eor	r30, r24
     1a4:	ec 27       	eor	r30, r28
     1a6:	f0 27       	eor	r31, r16
     1a8:	f4 27       	eor	r31, r20
     1aa:	f8 27       	eor	r31, r24
     1ac:	fc 27       	eor	r31, r28
     1ae:	00 28       	or	r0, r0
     1b0:	04 28       	or	r0, r4
     1b2:	08 28       	or	r0, r8
     1b4:	0c 28       	or	r0, r12
     1b6:	10 28       	or	r1, r0
     1b8:	14 28       	or	r1, r4
     1ba:	18 28       	or	r1, r8
     1bc:	1c 28       	or	r1, r12
     1be:	20 28       	or	r2, r0
     1c0:	24 28       	or	r2, r4
     1c2:	28 28       	or	r2, r8
     1c4:	2c 28       	or	r2, r12
     1c6:	30 28       	or	r3, r0
     1c8:	34 28       	or	r3, r4
     1ca:	b4 28       	or	r11, r4
     1cc:	b4 28       	or	r11, r4
     1ce:	b4 28       	or	r11, r4
     1d0:	b4 28       	or	r11, r4
     1d2:	98 28       	or	r9, r8
     1d4:	b4 28       	or	r11, r4
     1d6:	b4 28       	or	r11, r4
     1d8:	b4 28       	or	r11, r4
     1da:	b4 28       	or	r11, r4
     1dc:	b4 28       	or	r11, r4
     1de:	b4 28       	or	r11, r4
     1e0:	b4 28       	or	r11, r4
     1e2:	b4 28       	or	r11, r4
     1e4:	b4 28       	or	r11, r4
     1e6:	b4 28       	or	r11, r4
     1e8:	b4 28       	or	r11, r4
     1ea:	b4 28       	or	r11, r4
     1ec:	b4 28       	or	r11, r4
     1ee:	b4 28       	or	r11, r4
     1f0:	b4 28       	or	r11, r4
     1f2:	b4 28       	or	r11, r4
     1f4:	b4 28       	or	r11, r4
     1f6:	b4 28       	or	r11, r4
     1f8:	b4 28       	or	r11, r4
     1fa:	b4 28       	or	r11, r4
     1fc:	b4 28       	or	r11, r4
     1fe:	b4 28       	or	r11, r4
     200:	b4 28       	or	r11, r4
     202:	b4 28       	or	r11, r4
     204:	b4 28       	or	r11, r4
     206:	b4 28       	or	r11, r4
     208:	b4 28       	or	r11, r4
     20a:	b4 28       	or	r11, r4
     20c:	a8 28       	or	r10, r8
     20e:	05 a8       	ldd	r0, Z+53	; 0x35
     210:	4c cd       	rjmp	.-1384   	; 0xfffffcaa <__eeprom_end+0xff7ef97d>
     212:	b2 d4       	rcall	.+2404   	; 0xb78 <_ZN8GoertzelC1Eff+0x90>
     214:	4e b9       	out	0x0e, r20	; 14
     216:	38 36       	cpi	r19, 0x68	; 104
     218:	a9 02       	muls	r26, r25
     21a:	0c 50       	subi	r16, 0x0C	; 12
     21c:	b9 91       	ld	r27, Y+
     21e:	86 88       	ldd	r8, Z+22	; 0x16
     220:	08 3c       	cpi	r16, 0xC8	; 200
     222:	a6 aa       	std	Z+54, r10	; 0x36
     224:	aa 2a       	or	r10, r26
     226:	be 00       	.word	0x00be	; ????
     228:	00 00       	nop
     22a:	80 3f       	cpi	r24, 0xF0	; 240

0000022c <__ctors_start>:
     22c:	a8 27       	eor	r26, r24

0000022e <__ctors_end>:
     22e:	bd 27       	eor	r27, r29

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d8 e0       	ldi	r29, 0x08	; 8
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61

0000023c <__do_copy_data>:
     23c:	13 e0       	ldi	r17, 0x03	; 3
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b1 e0       	ldi	r27, 0x01	; 1
     242:	e0 e5       	ldi	r30, 0x50	; 80
     244:	f9 e6       	ldi	r31, 0x69	; 105
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x10>
     248:	05 90       	lpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a4 31       	cpi	r26, 0x14	; 20
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0xc>

00000252 <__do_clear_bss>:
     252:	25 e0       	ldi	r18, 0x05	; 5
     254:	a4 e1       	ldi	r26, 0x14	; 20
     256:	b3 e0       	ldi	r27, 0x03	; 3
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	ae 3a       	cpi	r26, 0xAE	; 174
     25e:	b2 07       	cpc	r27, r18
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>

00000262 <__do_global_ctors>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	c7 e1       	ldi	r28, 0x17	; 23
     266:	d1 e0       	ldi	r29, 0x01	; 1
     268:	04 c0       	rjmp	.+8      	; 0x272 <__do_global_ctors+0x10>
     26a:	21 97       	sbiw	r28, 0x01	; 1
     26c:	fe 01       	movw	r30, r28
     26e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__tablejump2__>
     272:	c6 31       	cpi	r28, 0x16	; 22
     274:	d1 07       	cpc	r29, r17
     276:	c9 f7       	brne	.-14     	; 0x26a <__do_global_ctors+0x8>
     278:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <main>
     27c:	0c 94 9b 34 	jmp	0x6936	; 0x6936 <__do_global_dtors>

00000280 <__bad_interrupt>:
     280:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000284 <month_length>:
     284:	62 30       	cpi	r22, 0x02	; 2
     286:	21 f4       	brne	.+8      	; 0x290 <month_length+0xc>
     288:	0e 94 4f 01 	call	0x29e	; 0x29e <is_leap_year>
     28c:	84 5e       	subi	r24, 0xE4	; 228
     28e:	08 95       	ret
     290:	68 30       	cpi	r22, 0x08	; 8
     292:	08 f0       	brcs	.+2      	; 0x296 <month_length+0x12>
     294:	6f 5f       	subi	r22, 0xFF	; 255
     296:	61 70       	andi	r22, 0x01	; 1
     298:	8e e1       	ldi	r24, 0x1E	; 30
     29a:	86 0f       	add	r24, r22
     29c:	08 95       	ret

0000029e <is_leap_year>:
     29e:	9c 01       	movw	r18, r24
     2a0:	23 70       	andi	r18, 0x03	; 3
     2a2:	33 27       	eor	r19, r19
     2a4:	23 2b       	or	r18, r19
     2a6:	59 f4       	brne	.+22     	; 0x2be <is_leap_year+0x20>
     2a8:	64 e6       	ldi	r22, 0x64	; 100
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
     2b0:	89 2b       	or	r24, r25
     2b2:	39 f4       	brne	.+14     	; 0x2c2 <is_leap_year+0x24>
     2b4:	63 70       	andi	r22, 0x03	; 3
     2b6:	77 27       	eor	r23, r23
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	67 2b       	or	r22, r23
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <is_leap_year+0x26>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	08 95       	ret

000002c6 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	84 31       	cpi	r24, 0x14	; 20
     2ca:	91 05       	cpc	r25, r1
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <_Z7pinModehh+0xa>
     2ce:	ca c0       	rjmp	.+404    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     2d0:	fc 01       	movw	r30, r24
     2d2:	ec 5c       	subi	r30, 0xCC	; 204
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     2da:	61 30       	cpi	r22, 0x01	; 1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <_Z7pinModehh+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     2de:	50 9a       	sbi	0x0a, 0	; 10
     2e0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     2e2:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     2e4:	63 30       	cpi	r22, 0x03	; 3
     2e6:	11 f4       	brne	.+4      	; 0x2ec <_Z7pinModehh+0x26>
				{
					PORTD  |= (1 << PORTD0);
     2e8:	58 9a       	sbi	0x0b, 0	; 11
     2ea:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     2ec:	58 98       	cbi	0x0b, 0	; 11
     2ee:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z7pinModehh+0x32>
			{
				DDRD  |= (1 << PORTD1);
     2f4:	51 9a       	sbi	0x0a, 1	; 10
     2f6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     2f8:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     2fa:	63 30       	cpi	r22, 0x03	; 3
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z7pinModehh+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     2fe:	59 9a       	sbi	0x0b, 1	; 11
     300:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     302:	59 98       	cbi	0x0b, 1	; 11
     304:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	11 f4       	brne	.+4      	; 0x30e <_Z7pinModehh+0x48>
			{
				DDRD  |= (1 << PORTD2);
     30a:	52 9a       	sbi	0x0a, 2	; 10
     30c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     30e:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	11 f4       	brne	.+4      	; 0x318 <_Z7pinModehh+0x52>
				{
					PORTD  |= (1 << PORTD2);
     314:	5a 9a       	sbi	0x0b, 2	; 11
     316:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     318:	5a 98       	cbi	0x0b, 2	; 11
     31a:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     31c:	61 30       	cpi	r22, 0x01	; 1
     31e:	11 f4       	brne	.+4      	; 0x324 <_Z7pinModehh+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     320:	53 9a       	sbi	0x0a, 3	; 10
     322:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     324:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     326:	63 30       	cpi	r22, 0x03	; 3
     328:	11 f4       	brne	.+4      	; 0x32e <_Z7pinModehh+0x68>
				{
					PORTD  |= (1 << PORTD3);
     32a:	5b 9a       	sbi	0x0b, 3	; 11
     32c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     32e:	5b 98       	cbi	0x0b, 3	; 11
     330:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	11 f4       	brne	.+4      	; 0x33a <_Z7pinModehh+0x74>
			{
				DDRD  |= (1 << PORTD4);
     336:	54 9a       	sbi	0x0a, 4	; 10
     338:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     33a:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	11 f4       	brne	.+4      	; 0x344 <_Z7pinModehh+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     340:	5c 9a       	sbi	0x0b, 4	; 11
     342:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     344:	5c 98       	cbi	0x0b, 4	; 11
     346:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <_Z7pinModehh+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     34c:	55 9a       	sbi	0x0a, 5	; 10
     34e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     350:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	11 f4       	brne	.+4      	; 0x35a <_Z7pinModehh+0x94>
				{
					PORTD  |= (1 << PORTD5);
     356:	5d 9a       	sbi	0x0b, 5	; 11
     358:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     35a:	5d 98       	cbi	0x0b, 5	; 11
     35c:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     35e:	61 30       	cpi	r22, 0x01	; 1
     360:	11 f4       	brne	.+4      	; 0x366 <_Z7pinModehh+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     362:	56 9a       	sbi	0x0a, 6	; 10
     364:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     366:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     368:	63 30       	cpi	r22, 0x03	; 3
     36a:	11 f4       	brne	.+4      	; 0x370 <_Z7pinModehh+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     36c:	5e 9a       	sbi	0x0b, 6	; 11
     36e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     370:	5e 98       	cbi	0x0b, 6	; 11
     372:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     374:	61 30       	cpi	r22, 0x01	; 1
     376:	11 f4       	brne	.+4      	; 0x37c <_Z7pinModehh+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     378:	57 9a       	sbi	0x0a, 7	; 10
     37a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     37c:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	11 f4       	brne	.+4      	; 0x386 <_Z7pinModehh+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     382:	5f 9a       	sbi	0x0b, 7	; 11
     384:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     386:	5f 98       	cbi	0x0b, 7	; 11
     388:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     38a:	61 30       	cpi	r22, 0x01	; 1
     38c:	11 f4       	brne	.+4      	; 0x392 <_Z7pinModehh+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     38e:	20 9a       	sbi	0x04, 0	; 4
     390:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     392:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     394:	63 30       	cpi	r22, 0x03	; 3
     396:	11 f4       	brne	.+4      	; 0x39c <_Z7pinModehh+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     398:	28 9a       	sbi	0x05, 0	; 5
     39a:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     39c:	28 98       	cbi	0x05, 0	; 5
     39e:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	11 f4       	brne	.+4      	; 0x3a8 <_Z7pinModehh+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3a4:	21 9a       	sbi	0x04, 1	; 4
     3a6:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3a8:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3aa:	63 30       	cpi	r22, 0x03	; 3
     3ac:	11 f4       	brne	.+4      	; 0x3b2 <_Z7pinModehh+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3ae:	29 9a       	sbi	0x05, 1	; 5
     3b0:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3b2:	29 98       	cbi	0x05, 1	; 5
     3b4:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3b6:	61 30       	cpi	r22, 0x01	; 1
     3b8:	11 f4       	brne	.+4      	; 0x3be <_Z7pinModehh+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3ba:	22 9a       	sbi	0x04, 2	; 4
     3bc:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3be:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3c0:	63 30       	cpi	r22, 0x03	; 3
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <_Z7pinModehh+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3c4:	2a 9a       	sbi	0x05, 2	; 5
     3c6:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3c8:	2a 98       	cbi	0x05, 2	; 5
     3ca:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3cc:	61 30       	cpi	r22, 0x01	; 1
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <_Z7pinModehh+0x10e>
			{
				DDRB  |= (1 << PORTB5);
     3d0:	25 9a       	sbi	0x04, 5	; 4
     3d2:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3d4:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3d6:	63 30       	cpi	r22, 0x03	; 3
     3d8:	11 f4       	brne	.+4      	; 0x3de <_Z7pinModehh+0x118>
				{
					PORTD  |= (1 << PORTB5);
     3da:	5d 9a       	sbi	0x0b, 5	; 11
     3dc:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3de:	5d 98       	cbi	0x0b, 5	; 11
     3e0:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3e2:	61 30       	cpi	r22, 0x01	; 1
     3e4:	11 f4       	brne	.+4      	; 0x3ea <_Z7pinModehh+0x124>
			{
				DDRC  |= (1 << PORTC0);
     3e6:	38 9a       	sbi	0x07, 0	; 7
     3e8:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3ea:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ec:	63 30       	cpi	r22, 0x03	; 3
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <_Z7pinModehh+0x12e>
				{
					PORTC  |= (1 << PORTC0);
     3f0:	40 9a       	sbi	0x08, 0	; 8
     3f2:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3f4:	40 98       	cbi	0x08, 0	; 8
     3f6:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     3f8:	61 30       	cpi	r22, 0x01	; 1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
			{
				DDRC  |= (1 << PORTC1);
     3fc:	39 9a       	sbi	0x07, 1	; 7
     3fe:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     400:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     402:	63 30       	cpi	r22, 0x03	; 3
     404:	11 f4       	brne	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				{
					PORTC  |= (1 << PORTC1);
     406:	41 9a       	sbi	0x08, 1	; 8
     408:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     40a:	41 98       	cbi	0x08, 1	; 8
     40c:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     40e:	61 30       	cpi	r22, 0x01	; 1
     410:	11 f4       	brne	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				DDRC  |= (1 << PORTC2);
     412:	3a 9a       	sbi	0x07, 2	; 7
     414:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     416:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     418:	63 30       	cpi	r22, 0x03	; 3
     41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					PORTC  |= (1 << PORTC2);
     41c:	42 9a       	sbi	0x08, 2	; 8
     41e:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     420:	42 98       	cbi	0x08, 2	; 8
     422:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     424:	61 30       	cpi	r22, 0x01	; 1
     426:	11 f4       	brne	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				DDRC  |= (1 << PORTC3);
     428:	3b 9a       	sbi	0x07, 3	; 7
     42a:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     42c:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     42e:	63 30       	cpi	r22, 0x03	; 3
     430:	11 f4       	brne	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
				{
					PORTC  |= (1 << PORTC3);
     432:	43 9a       	sbi	0x08, 3	; 8
     434:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     436:	43 98       	cbi	0x08, 3	; 8
     438:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     43a:	61 30       	cpi	r22, 0x01	; 1
     43c:	11 f4       	brne	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				DDRC  |= (1 << PORTC4);
     43e:	3c 9a       	sbi	0x07, 4	; 7
     440:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     442:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     444:	63 30       	cpi	r22, 0x03	; 3
     446:	11 f4       	brne	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				{
					PORTC  |= (1 << PORTC4);
     448:	44 9a       	sbi	0x08, 4	; 8
     44a:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     44c:	44 98       	cbi	0x08, 4	; 8
     44e:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     450:	61 30       	cpi	r22, 0x01	; 1
     452:	11 f4       	brne	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
			{
				DDRC  |= (1 << PORTC5);
     454:	3d 9a       	sbi	0x07, 5	; 7
     456:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     458:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     45a:	63 30       	cpi	r22, 0x03	; 3
     45c:	11 f4       	brne	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				{
					PORTC  |= (1 << PORTC5);
     45e:	45 9a       	sbi	0x08, 5	; 8
     460:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     462:	45 98       	cbi	0x08, 5	; 8
     464:	08 95       	ret

00000466 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fc 01       	movw	r30, r24
     46a:	32 97       	sbiw	r30, 0x02	; 2
     46c:	e0 31       	cpi	r30, 0x10	; 16
     46e:	f1 05       	cpc	r31, r1
     470:	f0 f5       	brcc	.+124    	; 0x4ee <_Z11digitalReadh+0x88>
     472:	e8 5b       	subi	r30, 0xB8	; 184
     474:	ff 4f       	sbci	r31, 0xFF	; 255
     476:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     47a:	29 b1       	in	r18, 0x09	; 9
     47c:	24 70       	andi	r18, 0x04	; 4
     47e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     480:	38 c0       	rjmp	.+112    	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     482:	29 b1       	in	r18, 0x09	; 9
     484:	28 70       	andi	r18, 0x08	; 8
     486:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     488:	34 c0       	rjmp	.+104    	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     48a:	29 b1       	in	r18, 0x09	; 9
     48c:	20 71       	andi	r18, 0x10	; 16
     48e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     490:	30 c0       	rjmp	.+96     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     492:	29 b1       	in	r18, 0x09	; 9
     494:	20 72       	andi	r18, 0x20	; 32
     496:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     498:	2c c0       	rjmp	.+88     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     49a:	29 b1       	in	r18, 0x09	; 9
     49c:	20 74       	andi	r18, 0x40	; 64
     49e:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a0:	28 c0       	rjmp	.+80     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     4a2:	29 b1       	in	r18, 0x09	; 9
     4a4:	20 78       	andi	r18, 0x80	; 128
     4a6:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a8:	24 c0       	rjmp	.+72     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4aa:	83 b1       	in	r24, 0x03	; 3
     4ac:	28 2f       	mov	r18, r24
     4ae:	21 70       	andi	r18, 0x01	; 1
     4b0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b2:	1f c0       	rjmp	.+62     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4b4:	23 b1       	in	r18, 0x03	; 3
     4b6:	22 70       	andi	r18, 0x02	; 2
     4b8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4bc:	23 b1       	in	r18, 0x03	; 3
     4be:	24 70       	andi	r18, 0x04	; 4
     4c0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4c4:	23 b1       	in	r18, 0x03	; 3
     4c6:	20 72       	andi	r18, 0x20	; 32
     4c8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4cc:	86 b1       	in	r24, 0x06	; 6
     4ce:	28 2f       	mov	r18, r24
     4d0:	21 70       	andi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4d6:	26 b1       	in	r18, 0x06	; 6
     4d8:	22 70       	andi	r18, 0x02	; 2
     4da:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4de:	26 b1       	in	r18, 0x06	; 6
     4e0:	24 70       	andi	r18, 0x04	; 4
     4e2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4e6:	26 b1       	in	r18, 0x06	; 6
     4e8:	28 70       	andi	r18, 0x08	; 8
     4ea:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	23 2b       	or	r18, r19
     4f6:	09 f4       	brne	.+2      	; 0x4fa <_Z11digitalReadh+0x94>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
}
     4fa:	08 95       	ret

000004fc <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	82 31       	cpi	r24, 0x12	; 18
     500:	91 05       	cpc	r25, r1
     502:	08 f0       	brcs	.+2      	; 0x506 <_Z12digitalWritehh+0xa>
     504:	64 c0       	rjmp	.+200    	; 0x5ce <_Z12digitalWritehh+0xd2>
     506:	fc 01       	movw	r30, r24
     508:	e8 5a       	subi	r30, 0xA8	; 168
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     510:	66 23       	and	r22, r22
     512:	11 f0       	breq	.+4      	; 0x518 <_Z12digitalWritehh+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     514:	58 9a       	sbi	0x0b, 0	; 11
     516:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     518:	58 98       	cbi	0x0b, 0	; 11
     51a:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     51c:	66 23       	and	r22, r22
     51e:	11 f0       	breq	.+4      	; 0x524 <_Z12digitalWritehh+0x28>
			{
				PORTD  |= (1 << PORTD1);
     520:	59 9a       	sbi	0x0b, 1	; 11
     522:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     524:	59 98       	cbi	0x0b, 1	; 11
     526:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     528:	66 23       	and	r22, r22
     52a:	11 f0       	breq	.+4      	; 0x530 <_Z12digitalWritehh+0x34>
			{
				PORTD  |= (1 << PORTD2);
     52c:	5a 9a       	sbi	0x0b, 2	; 11
     52e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     530:	5a 98       	cbi	0x0b, 2	; 11
     532:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     534:	66 23       	and	r22, r22
     536:	11 f0       	breq	.+4      	; 0x53c <_Z12digitalWritehh+0x40>
			{
				PORTD  |= (1 << PORTD3);
     538:	5b 9a       	sbi	0x0b, 3	; 11
     53a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     53c:	5b 98       	cbi	0x0b, 3	; 11
     53e:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     540:	66 23       	and	r22, r22
     542:	11 f0       	breq	.+4      	; 0x548 <_Z12digitalWritehh+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     544:	5c 9a       	sbi	0x0b, 4	; 11
     546:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     548:	5c 98       	cbi	0x0b, 4	; 11
     54a:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     54c:	66 23       	and	r22, r22
     54e:	11 f0       	breq	.+4      	; 0x554 <_Z12digitalWritehh+0x58>
			{
				PORTD  |= (1 << PORTD5);
     550:	5d 9a       	sbi	0x0b, 5	; 11
     552:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     554:	5d 98       	cbi	0x0b, 5	; 11
     556:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     558:	66 23       	and	r22, r22
     55a:	11 f0       	breq	.+4      	; 0x560 <_Z12digitalWritehh+0x64>
			{
				PORTD  |= (1 << PORTD6);
     55c:	5e 9a       	sbi	0x0b, 6	; 11
     55e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     560:	5e 98       	cbi	0x0b, 6	; 11
     562:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     564:	66 23       	and	r22, r22
     566:	11 f0       	breq	.+4      	; 0x56c <_Z12digitalWritehh+0x70>
			{
				PORTD  |= (1 << PORTD7);
     568:	5f 9a       	sbi	0x0b, 7	; 11
     56a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     56c:	5f 98       	cbi	0x0b, 7	; 11
     56e:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     570:	66 23       	and	r22, r22
     572:	11 f0       	breq	.+4      	; 0x578 <_Z12digitalWritehh+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     574:	28 9a       	sbi	0x05, 0	; 5
     576:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     578:	28 98       	cbi	0x05, 0	; 5
     57a:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     57c:	66 23       	and	r22, r22
     57e:	11 f0       	breq	.+4      	; 0x584 <_Z12digitalWritehh+0x88>
			{
				PORTB  |= (1 << PORTB1);
     580:	29 9a       	sbi	0x05, 1	; 5
     582:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     584:	29 98       	cbi	0x05, 1	; 5
     586:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     588:	66 23       	and	r22, r22
     58a:	11 f0       	breq	.+4      	; 0x590 <_Z12digitalWritehh+0x94>
			{
				PORTB  |= (1 << PORTB2);
     58c:	2a 9a       	sbi	0x05, 2	; 5
     58e:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     590:	2a 98       	cbi	0x05, 2	; 5
     592:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     594:	66 23       	and	r22, r22
     596:	11 f0       	breq	.+4      	; 0x59c <_Z12digitalWritehh+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     598:	2d 9a       	sbi	0x05, 5	; 5
     59a:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     59c:	2d 98       	cbi	0x05, 5	; 5
     59e:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     5a0:	66 23       	and	r22, r22
     5a2:	11 f0       	breq	.+4      	; 0x5a8 <_Z12digitalWritehh+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5a4:	40 9a       	sbi	0x08, 0	; 8
     5a6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5a8:	40 98       	cbi	0x08, 0	; 8
     5aa:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5ac:	66 23       	and	r22, r22
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <_Z12digitalWritehh+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5b0:	41 9a       	sbi	0x08, 1	; 8
     5b2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5b4:	41 98       	cbi	0x08, 1	; 8
     5b6:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5b8:	66 23       	and	r22, r22
     5ba:	11 f0       	breq	.+4      	; 0x5c0 <_Z12digitalWritehh+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5bc:	42 9a       	sbi	0x08, 2	; 8
     5be:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5c0:	42 98       	cbi	0x08, 2	; 8
     5c2:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5c4:	66 23       	and	r22, r22
     5c6:	11 f0       	breq	.+4      	; 0x5cc <_Z12digitalWritehh+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5c8:	43 9a       	sbi	0x08, 3	; 8
     5ca:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5cc:	43 98       	cbi	0x08, 3	; 8
     5ce:	08 95       	ret

000005d0 <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     5d0:	08 95       	ret

000005d2 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     5d2:	08 95       	ret

000005d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5dc:	41 15       	cp	r20, r1
     5de:	51 05       	cpc	r21, r1
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5e2:	75 c0       	rjmp	.+234    	; 0x6ce <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     5e4:	86 2f       	mov	r24, r22
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	3b 97       	sbiw	r30, 0x0b	; 11
     5ec:	ee 30       	cpi	r30, 0x0E	; 14
     5ee:	f1 05       	cpc	r31, r1
     5f0:	08 f0       	brcs	.+2      	; 0x5f4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5f2:	6d c0       	rjmp	.+218    	; 0x6ce <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     5f4:	da 01       	movw	r26, r20
     5f6:	e6 59       	subi	r30, 0x96	; 150
     5f8:	ff 4f       	sbci	r31, 0xFF	; 255
     5fa:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5fe:	85 e2       	ldi	r24, 0x25	; 37
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	5f c0       	rjmp	.+190    	; 0x6c2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     604:	8f e1       	ldi	r24, 0x1F	; 31
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	55 c0       	rjmp	.+170    	; 0x6b4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     60a:	8b e1       	ldi	r24, 0x1B	; 27
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	49 c0       	rjmp	.+146    	; 0x6a2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     610:	8a 01       	movw	r16, r20
     612:	0f 5f       	subi	r16, 0xFF	; 255
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     618:	66 23       	and	r22, r22
     61a:	71 f0       	breq	.+28     	; 0x638 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     61c:	c0 e0       	ldi	r28, 0x00	; 0
     61e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     620:	21 96       	adiw	r28, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	8d 59       	subi	r24, 0x9D	; 157
     626:	9d 4f       	sbci	r25, 0xFD	; 253
     628:	0e 94 15 34 	call	0x682a	; 0x682a <eeprom_update_byte>
				c = *char_addr++;
     62c:	f8 01       	movw	r30, r16
     62e:	61 91       	ld	r22, Z+
     630:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     632:	61 11       	cpse	r22, r1
     634:	f5 cf       	rjmp	.-22     	; 0x620 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     636:	02 c0       	rjmp	.+4      	; 0x63c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     638:	c0 e0       	ldi	r28, 0x00	; 0
     63a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	ce 01       	movw	r24, r28
     640:	8c 59       	subi	r24, 0x9C	; 156
     642:	9d 4f       	sbci	r25, 0xFD	; 253
     644:	0e 94 15 34 	call	0x682a	; 0x682a <eeprom_update_byte>
		}
		break;
     648:	42 c0       	rjmp	.+132    	; 0x6ce <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     64a:	8a 01       	movw	r16, r20
     64c:	0f 5f       	subi	r16, 0xFF	; 255
     64e:	1f 4f       	sbci	r17, 0xFF	; 255
     650:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     652:	66 23       	and	r22, r22
     654:	91 f0       	breq	.+36     	; 0x67a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     656:	c0 e0       	ldi	r28, 0x00	; 0
     658:	d0 e0       	ldi	r29, 0x00	; 0
     65a:	03 c0       	rjmp	.+6      	; 0x662 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     65c:	c8 30       	cpi	r28, 0x08	; 8
     65e:	d1 05       	cpc	r29, r1
     660:	71 f0       	breq	.+28     	; 0x67e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     662:	21 96       	adiw	r28, 0x01	; 1
     664:	ce 01       	movw	r24, r28
     666:	80 5f       	subi	r24, 0xF0	; 240
     668:	9c 4f       	sbci	r25, 0xFC	; 252
     66a:	0e 94 15 34 	call	0x682a	; 0x682a <eeprom_update_byte>
				c = *uint8_addr++;
     66e:	f8 01       	movw	r30, r16
     670:	61 91       	ld	r22, Z+
     672:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     674:	61 11       	cpse	r22, r1
     676:	f2 cf       	rjmp	.-28     	; 0x65c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	ce 01       	movw	r24, r28
     682:	8f 5e       	subi	r24, 0xEF	; 239
     684:	9c 4f       	sbci	r25, 0xFC	; 252
     686:	0e 94 15 34 	call	0x682a	; 0x682a <eeprom_update_byte>
		}
		break;
     68a:	21 c0       	rjmp	.+66     	; 0x6ce <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     68c:	89 e2       	ldi	r24, 0x29	; 41
     68e:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     690:	08 c0       	rjmp	.+16     	; 0x6a2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>

		case Ptt_periodic_reset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.ptt_periodic_reset);
     692:	8a e2       	ldi	r24, 0x2A	; 42
     694:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     698:	8a e1       	ldi	r24, 0x1A	; 26
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     69e:	8c e1       	ldi	r24, 0x1C	; 28
     6a0:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     6a2:	6c 91       	ld	r22, X
     6a4:	0e 94 15 34 	call	0x682a	; 0x682a <eeprom_update_byte>
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     6aa:	8d e1       	ldi	r24, 0x1D	; 29
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     6b4:	6d 91       	ld	r22, X+
     6b6:	7c 91       	ld	r23, X
     6b8:	0e 94 33 34 	call	0x6866	; 0x6866 <eeprom_update_word>
     6bc:	08 c0       	rjmp	.+16     	; 0x6ce <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     6be:	81 e2       	ldi	r24, 0x21	; 33
     6c0:	93 e0       	ldi	r25, 0x03	; 3
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     6c2:	4d 91       	ld	r20, X+
     6c4:	5d 91       	ld	r21, X+
     6c6:	6d 91       	ld	r22, X+
     6c8:	7c 91       	ld	r23, X
     6ca:	0e 94 27 34 	call	0x684e	; 0x684e <eeprom_update_dword>
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6e4:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_Z10lb_enabledv>
     6e8:	88 23       	and	r24, r24
     6ea:	09 f4       	brne	.+2      	; 0x6ee <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6ec:	46 c0       	rjmp	.+140    	; 0x77a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6ee:	8c 2f       	mov	r24, r28
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	8b 30       	cpi	r24, 0x0B	; 11
     6f4:	91 05       	cpc	r25, r1
     6f6:	08 f0       	brcs	.+2      	; 0x6fa <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6f8:	40 c0       	rjmp	.+128    	; 0x77a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6fa:	fc 01       	movw	r30, r24
     6fc:	e8 58       	subi	r30, 0x88	; 136
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     704:	8a e2       	ldi	r24, 0x2A	; 42
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	30 c0       	rjmp	.+96     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     70a:	88 e8       	ldi	r24, 0x88	; 136
     70c:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     70e:	2d c0       	rjmp	.+90     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     710:	8e ea       	ldi	r24, 0xAE	; 174
     712:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     714:	2a c0       	rjmp	.+84     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     716:	85 ed       	ldi	r24, 0xD5	; 213
     718:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     71a:	27 c0       	rjmp	.+78     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     71c:	86 ef       	ldi	r24, 0xF6	; 246
     71e:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     720:	24 c0       	rjmp	.+72     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     722:	81 e1       	ldi	r24, 0x11	; 17
     724:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     726:	21 c0       	rjmp	.+66     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     728:	87 e2       	ldi	r24, 0x27	; 39
     72a:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     72c:	1e c0       	rjmp	.+60     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     72e:	8c e3       	ldi	r24, 0x3C	; 60
     730:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     732:	1b c0       	rjmp	.+54     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     734:	80 e5       	ldi	r24, 0x50	; 80
     736:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     738:	18 c0       	rjmp	.+48     	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     73a:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     73c:	cc 23       	and	r28, r28
     73e:	e9 f0       	breq	.+58     	; 0x77a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     740:	8c 2f       	mov	r24, r28
     742:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     746:	78 01       	movw	r14, r16
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	e8 1a       	sub	r14, r24
     74c:	f8 0a       	sbc	r15, r24
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     754:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     756:	0e 94 6d 09 	call	0x12da	; 0x12da <_Z19linkbusTxInProgressv>
     75a:	81 11       	cpse	r24, r1
     75c:	fc cf       	rjmp	.-8      	; 0x756 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     75e:	ed cf       	rjmp	.-38     	; 0x73a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	02 c0       	rjmp	.+4      	; 0x76a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     766:	80 e6       	ldi	r24, 0x60	; 96
     768:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     76a:	8c 01       	movw	r16, r24
     76c:	0f 5f       	subi	r16, 0xFF	; 255
     76e:	1f 4f       	sbci	r17, 0xFF	; 255
     770:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     774:	c8 2f       	mov	r28, r24

		while(c)
     776:	81 11       	cpse	r24, r1
     778:	e3 cf       	rjmp	.-58     	; 0x740 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     792:	8b e2       	ldi	r24, 0x2B	; 43
     794:	93 e0       	ldi	r25, 0x03	; 3
     796:	0e 94 0f 34 	call	0x681e	; 0x681e <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     79a:	8b 3b       	cpi	r24, 0xBB	; 187
     79c:	91 05       	cpc	r25, r1
     79e:	09 f0       	breq	.+2      	; 0x7a2 <_ZN13EepromManager11readNonVolsEv+0x1c>
     7a0:	b6 c0       	rjmp	.+364    	; 0x90e <__stack+0xf>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     7a2:	8a e1       	ldi	r24, 0x1A	; 26
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	85 30       	cpi	r24, 0x05	; 5
     7ae:	91 05       	cpc	r25, r1
     7b0:	14 f4       	brge	.+4      	; 0x7b6 <_ZN13EepromManager11readNonVolsEv+0x30>
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	85 31       	cpi	r24, 0x15	; 21
     7b8:	91 05       	cpc	r25, r1
     7ba:	14 f0       	brlt	.+4      	; 0x7c0 <_ZN13EepromManager11readNonVolsEv+0x3a>
     7bc:	84 e1       	ldi	r24, 0x14	; 20
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     7c4:	8b e1       	ldi	r24, 0x1B	; 27
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     7cc:	82 31       	cpi	r24, 0x12	; 18
     7ce:	08 f0       	brcs	.+2      	; 0x7d2 <_ZN13EepromManager11readNonVolsEv+0x4c>
     7d0:	81 e1       	ldi	r24, 0x11	; 17
     7d2:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7d6:	8c e1       	ldi	r24, 0x1C	; 28
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     7de:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7e2:	8d e1       	ldi	r24, 0x1D	; 29
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	0e 94 0f 34 	call	0x681e	; 0x681e <eeprom_read_word>
     7ea:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_atmega_temp_calibration+0x1>
     7ee:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7f2:	8f e1       	ldi	r24, 0x1F	; 31
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	0e 94 0f 34 	call	0x681e	; 0x681e <eeprom_read_word>
     7fa:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <g_rv3028_offset+0x1>
     7fe:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	0e 94 09 34 	call	0x6812	; 0x6812 <eeprom_read_dword>
     80a:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <g_event_start_epoch>
     80e:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <g_event_start_epoch+0x1>
     812:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_start_epoch+0x2>
     816:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     81a:	85 e2       	ldi	r24, 0x25	; 37
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	0e 94 09 34 	call	0x6812	; 0x6812 <eeprom_read_dword>
     822:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_event_finish_epoch>
     826:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_event_finish_epoch+0x1>
     82a:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_event_finish_epoch+0x2>
     82e:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     832:	89 e2       	ldi	r24, 0x29	; 41
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     83a:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_utc_offset>
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));
     83e:	8a e2       	ldi	r24, 0x2A	; 42
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     846:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_ptt_periodic_reset_enabled>
     84a:	04 e6       	ldi	r16, 0x64	; 100
     84c:	12 e0       	ldi	r17, 0x02	; 2
     84e:	c8 e2       	ldi	r28, 0x28	; 40
     850:	d5 e0       	ldi	r29, 0x05	; 5
     852:	0f 2e       	mov	r0, r31
     854:	fc e3       	ldi	r31, 0x3C	; 60
     856:	ef 2e       	mov	r14, r31
     858:	f5 e0       	ldi	r31, 0x05	; 5
     85a:	ff 2e       	mov	r15, r31
     85c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     85e:	c8 01       	movw	r24, r16
     860:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     864:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     866:	81 11       	cpse	r24, r1
     868:	0b c0       	rjmp	.+22     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     86a:	01 e1       	ldi	r16, 0x11	; 17
     86c:	13 e0       	ldi	r17, 0x03	; 3
     86e:	c4 e4       	ldi	r28, 0x44	; 68
     870:	d5 e0       	ldi	r29, 0x05	; 5
     872:	0f 2e       	mov	r0, r31
     874:	fc e4       	ldi	r31, 0x4C	; 76
     876:	ef 2e       	mov	r14, r31
     878:	f5 e0       	ldi	r31, 0x05	; 5
     87a:	ff 2e       	mov	r15, r31
     87c:	f0 2d       	mov	r31, r0
     87e:	06 c0       	rjmp	.+12     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     880:	0f 5f       	subi	r16, 0xFF	; 255
     882:	1f 4f       	sbci	r17, 0xFF	; 255
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     884:	ce 15       	cp	r28, r14
     886:	df 05       	cpc	r29, r15
     888:	51 f7       	brne	.-44     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     88a:	ef cf       	rjmp	.-34     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     88c:	c8 01       	movw	r24, r16
     88e:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     892:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     894:	88 23       	and	r24, r24
     896:	29 f0       	breq	.+10     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     898:	0f 5f       	subi	r16, 0xFF	; 255
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     89c:	ce 15       	cp	r28, r14
     89e:	df 05       	cpc	r29, r15
     8a0:	a9 f7       	brne	.-22     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     8a2:	01 ef       	ldi	r16, 0xF1	; 241
     8a4:	12 e0       	ldi	r17, 0x02	; 2
     8a6:	ce e5       	ldi	r28, 0x5E	; 94
     8a8:	d5 e0       	ldi	r29, 0x05	; 5
     8aa:	0f 2e       	mov	r0, r31
     8ac:	fe e7       	ldi	r31, 0x7E	; 126
     8ae:	ef 2e       	mov	r14, r31
     8b0:	f5 e0       	ldi	r31, 0x05	; 5
     8b2:	ff 2e       	mov	r15, r31
     8b4:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     8b6:	c8 01       	movw	r24, r16
     8b8:	0e 94 01 34 	call	0x6802	; 0x6802 <eeprom_read_byte>
     8bc:	89 93       	st	Y+, r24
     8be:	0f 5f       	subi	r16, 0xFF	; 255
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     8c2:	ce 15       	cp	r28, r14
     8c4:	df 05       	cpc	r29, r15
     8c6:	b9 f7       	brne	.-18     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     8c8:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
     8cc:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     8d0:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     8d4:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     8d8:	89 2b       	or	r24, r25
     8da:	8a 2b       	or	r24, r26
     8dc:	8b 2b       	or	r24, r27
     8de:	c9 f0       	breq	.+50     	; 0x912 <__stack+0x13>
     8e0:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
     8e4:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
     8e8:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
     8ec:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
     8f0:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
     8f4:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     8f8:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     8fc:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     900:	84 17       	cp	r24, r20
     902:	95 07       	cpc	r25, r21
     904:	a6 07       	cpc	r26, r22
     906:	b7 07       	cpc	r27, r23
     908:	30 f4       	brcc	.+12     	; 0x916 <__stack+0x17>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	19 c0       	rjmp	.+50     	; 0x940 <__stack+0x41>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	17 c0       	rjmp	.+46     	; 0x940 <__stack+0x41>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	15 c0       	rjmp	.+42     	; 0x940 <__stack+0x41>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     916:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
     91a:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     91e:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     922:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     926:	80 58       	subi	r24, 0x80	; 128
     928:	9e 4a       	sbci	r25, 0xAE	; 174
     92a:	ae 4f       	sbci	r26, 0xFE	; 254
     92c:	bf 4f       	sbci	r27, 0xFF	; 255
     92e:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_event_finish_epoch>
     932:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_event_finish_epoch+0x1>
     936:	a0 93 85 05 	sts	0x0585, r26	; 0x800585 <g_event_finish_epoch+0x2>
     93a:	b0 93 86 05 	sts	0x0586, r27	; 0x800586 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     93e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	0b e1       	ldi	r16, 0x1B	; 27
     95c:	11 e0       	ldi	r17, 0x01	; 1
     95e:	c4 e4       	ldi	r28, 0x44	; 68
     960:	d5 e0       	ldi	r29, 0x05	; 5
     962:	0f 2e       	mov	r0, r31
     964:	f8 e4       	ldi	r31, 0x48	; 72
     966:	ef 2e       	mov	r14, r31
     968:	f5 e0       	ldi	r31, 0x05	; 5
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     96e:	f8 01       	movw	r30, r16
     970:	61 91       	ld	r22, Z+
     972:	8f 01       	movw	r16, r30
     974:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     976:	ce 01       	movw	r24, r28
     978:	0e 94 39 34 	call	0x6872	; 0x6872 <eeprom_write_byte>
     97c:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     97e:	ce 15       	cp	r28, r14
     980:	df 05       	cpc	r29, r15
     982:	a9 f7       	brne	.-22     	; 0x96e <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	85 e1       	ldi	r24, 0x15	; 21
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	0e 94 39 34 	call	0x6872	; 0x6872 <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     98e:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <g_unlockCode+0x4>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     992:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), g_AM_audio_frequency);
     996:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <g_AM_audio_frequency>
     99a:	8c e1       	ldi	r24, 0x1C	; 28
     99c:	93 e0       	ldi	r25, 0x03	; 3
     99e:	0e 94 39 34 	call	0x6872	; 0x6872 <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     9a2:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <g_event_start_epoch>
     9a6:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <g_event_start_epoch+0x1>
     9aa:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <g_event_start_epoch+0x2>
     9ae:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     9b2:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
     9b6:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
     9ba:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
     9be:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
     9c2:	81 e2       	ldi	r24, 0x21	; 33
     9c4:	93 e0       	ldi	r25, 0x03	; 3
     9c6:	0e 94 47 34 	call	0x688e	; 0x688e <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     9ca:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <g_event_finish_epoch>
     9ce:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <g_event_finish_epoch+0x1>
     9d2:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <g_event_finish_epoch+0x2>
     9d6:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     9da:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
     9de:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
     9e2:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
     9e6:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
     9ea:	85 e2       	ldi	r24, 0x25	; 37
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	0e 94 47 34 	call	0x688e	; 0x688e <eeprom_write_dword>
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	08 95       	ret

00000a00 <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     a06:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     a1a:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     a1e:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z15lb_send_NewLinev>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     a28:	cb 01       	movw	r24, r22
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	87 58       	subi	r24, 0x87	; 135
     a30:	9d 4f       	sbci	r25, 0xFD	; 253
     a32:	0e 94 0f 34 	call	0x681e	; 0x681e <eeprom_read_word>
}
     a36:	08 95       	ret

00000a38 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     a38:	9c 01       	movw	r18, r24
     a3a:	2e 5f       	subi	r18, 0xFE	; 254
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	2b 33       	cpi	r18, 0x3B	; 59
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	38 07       	cpc	r19, r24
     a44:	10 f0       	brcs	.+4      	; 0xa4a <_Z8setAttenj+0x12>
     a46:	2b e3       	ldi	r18, 0x3B	; 59
     a48:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     a4a:	ad ec       	ldi	r26, 0xCD	; 205
     a4c:	bc ec       	ldi	r27, 0xCC	; 204
     a4e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
     a52:	96 95       	lsr	r25
     a54:	87 95       	ror	r24
     a56:	96 95       	lsr	r25
     a58:	87 95       	ror	r24
     a5a:	9c 01       	movw	r18, r24
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	28 0f       	add	r18, r24
     a66:	39 1f       	adc	r19, r25
	att /= 5;
     a68:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
     a6c:	96 95       	lsr	r25
     a6e:	87 95       	ror	r24
     a70:	96 95       	lsr	r25
     a72:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     a74:	9c 01       	movw	r18, r24
     a76:	20 73       	andi	r18, 0x30	; 48
     a78:	33 27       	eor	r19, r19
     a7a:	32 95       	swap	r19
     a7c:	22 95       	swap	r18
     a7e:	2f 70       	andi	r18, 0x0F	; 15
     a80:	23 27       	eor	r18, r19
     a82:	3f 70       	andi	r19, 0x0F	; 15
     a84:	23 27       	eor	r18, r19
     a86:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__data_end>

	pattern = PORTC & 0xF0;
     a8a:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     a8c:	8f 70       	andi	r24, 0x0F	; 15
     a8e:	90 7f       	andi	r25, 0xF0	; 240
     a90:	89 2b       	or	r24, r25
     a92:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     a94:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     a96:	8c 7f       	andi	r24, 0xFC	; 252
     a98:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <__data_end>
     a9c:	89 2b       	or	r24, r25
     a9e:	8b b9       	out	0x0b, r24	; 11
     aa0:	08 95       	ret

00000aa2 <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     aa2:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	8e e0       	ldi	r24, 0x0E	; 14
     aaa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	8f e0       	ldi	r24, 0x0F	; 15
     ab2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	80 e1       	ldi	r24, 0x10	; 16
     aba:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	81 e1       	ldi	r24, 0x11	; 17
     ac2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
     ae6:	08 95       	ret

00000ae8 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	e4 2e       	mov	r14, r20
     af6:	f5 2e       	mov	r15, r21
     af8:	d6 2f       	mov	r29, r22
     afa:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     afc:	00 93 2c 03 	sts	0x032C, r16	; 0x80032c <_SAMPLING_FREQUENCY>
     b00:	10 93 2d 03 	sts	0x032D, r17	; 0x80032d <_SAMPLING_FREQUENCY+0x1>
     b04:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <_SAMPLING_FREQUENCY+0x2>
     b08:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	41 e5       	ldi	r20, 0x51	; 81
     b12:	53 e4       	ldi	r21, 0x43	; 67
     b14:	6e 2d       	mov	r22, r14
     b16:	7f 2d       	mov	r23, r15
     b18:	8d 2f       	mov	r24, r29
     b1a:	9c 2f       	mov	r25, r28
     b1c:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__gesf2>
     b20:	18 16       	cp	r1, r24
     b22:	6c f0       	brlt	.+26     	; 0xb3e <_ZN8GoertzelC1Eff+0x56>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	48 ec       	ldi	r20, 0xC8	; 200
     b2a:	52 e4       	ldi	r21, 0x42	; 66
     b2c:	6e 2d       	mov	r22, r14
     b2e:	7f 2d       	mov	r23, r15
     b30:	8d 2f       	mov	r24, r29
     b32:	9c 2f       	mov	r25, r28
     b34:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <__cmpsf2>
     b38:	88 23       	and	r24, r24
     b3a:	34 f0       	brlt	.+12     	; 0xb48 <_ZN8GoertzelC1Eff+0x60>
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <_ZN8GoertzelC1Eff+0x68>
     b3e:	e1 2c       	mov	r14, r1
     b40:	f1 2c       	mov	r15, r1
     b42:	d1 e5       	ldi	r29, 0x51	; 81
     b44:	c3 e4       	ldi	r28, 0x43	; 67
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <_ZN8GoertzelC1Eff+0x68>
     b48:	e1 2c       	mov	r14, r1
     b4a:	f1 2c       	mov	r15, r1
     b4c:	d8 ec       	ldi	r29, 0xC8	; 200
     b4e:	c2 e4       	ldi	r28, 0x42	; 66
     b50:	6e 2d       	mov	r22, r14
     b52:	7f 2d       	mov	r23, r15
     b54:	8d 2f       	mov	r24, r29
     b56:	9c 2f       	mov	r25, r28
     b58:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <__fixsfsi>
     b5c:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <_N+0x1>
     b60:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     b64:	cb 01       	movw	r24, r22
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <malloc>
     b6e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <testData+0x1>
     b72:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <testData>
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	08 95       	ret

00000b84 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     b84:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <testData>
     b88:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <testData+0x1>
     b8c:	0e 94 3a 30 	call	0x6074	; 0x6074 <free>
     b90:	08 95       	ret

00000b92 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     b92:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <Q2>
     b96:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <Q2+0x1>
     b9a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <Q2+0x2>
     b9e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Q2+0x3>
	Q1 = 0;
     ba2:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Q1>
     ba6:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <Q1+0x1>
     baa:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <Q1+0x2>
     bae:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <Q1+0x3>
	_samplesReady = false;
     bb2:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_samplesReady>
     bb6:	08 95       	ret

00000bb8 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	4a 01       	movw	r8, r20
     bd0:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     bd2:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <_N>
     bd6:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <_N+0x1>
     bda:	07 2e       	mov	r0, r23
     bdc:	00 0c       	add	r0, r0
     bde:	88 0b       	sbc	r24, r24
     be0:	99 0b       	sbc	r25, r25
     be2:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <__floatsisf>
     be6:	6b 01       	movw	r12, r22
     be8:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     bea:	80 92 28 03 	sts	0x0328, r8	; 0x800328 <_TARGET_FREQUENCY>
     bee:	90 92 29 03 	sts	0x0329, r9	; 0x800329 <_TARGET_FREQUENCY+0x1>
     bf2:	a0 92 2a 03 	sts	0x032A, r10	; 0x80032a <_TARGET_FREQUENCY+0x2>
     bf6:	b0 92 2b 03 	sts	0x032B, r11	; 0x80032b <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     bfa:	a5 01       	movw	r20, r10
     bfc:	94 01       	movw	r18, r8
     bfe:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     c02:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <_SAMPLING_FREQUENCY>
     c06:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <_SAMPLING_FREQUENCY+0x1>
     c0a:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <_SAMPLING_FREQUENCY+0x2>
     c0e:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <_SAMPLING_FREQUENCY+0x3>
     c12:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__divsf3>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	5f e3       	ldi	r21, 0x3F	; 63
     c1e:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
     c22:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <__fixsfsi>
     c26:	07 2e       	mov	r0, r23
     c28:	00 0c       	add	r0, r0
     c2a:	88 0b       	sbc	r24, r24
     c2c:	99 0b       	sbc	r25, r25
     c2e:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <__floatsisf>
     c32:	2b ed       	ldi	r18, 0xDB	; 219
     c34:	3f e0       	ldi	r19, 0x0F	; 15
     c36:	49 ec       	ldi	r20, 0xC9	; 201
     c38:	50 e4       	ldi	r21, 0x40	; 64
     c3a:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     c3e:	a7 01       	movw	r20, r14
     c40:	96 01       	movw	r18, r12
     c42:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__divsf3>
     c46:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <cos>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
     c52:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <g_coeff>
     c56:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <g_coeff+0x1>
     c5a:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <g_coeff+0x2>
     c5e:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <g_coeff+0x3>
	ResetGoertzel();
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN8Goertzel13ResetGoertzelEv>
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	af 90       	pop	r10
     c78:	9f 90       	pop	r9
     c7a:	8f 90       	pop	r8
     c7c:	08 95       	ret

00000c7e <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     c94:	c0 90 1e 03 	lds	r12, 0x031E	; 0x80031e <Q1>
     c98:	d0 90 1f 03 	lds	r13, 0x031F	; 0x80031f <Q1+0x1>
     c9c:	e0 90 20 03 	lds	r14, 0x0320	; 0x800320 <Q1+0x2>
     ca0:	f0 90 21 03 	lds	r15, 0x0321	; 0x800321 <Q1+0x3>
     ca4:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <g_coeff>
     ca8:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <g_coeff+0x1>
     cac:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <g_coeff+0x2>
     cb0:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <g_coeff+0x3>
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     cbc:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <Q2>
     cc0:	30 91 1b 03 	lds	r19, 0x031B	; 0x80031b <Q2+0x1>
     cc4:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <Q2+0x2>
     cc8:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <Q2+0x3>
     ccc:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
     cd0:	4b 01       	movw	r8, r22
     cd2:	5c 01       	movw	r10, r24
     cd4:	be 01       	movw	r22, r28
     cd6:	72 50       	subi	r23, 0x02	; 2
     cd8:	07 2e       	mov	r0, r23
     cda:	00 0c       	add	r0, r0
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <__floatsisf>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>

	Q2 = Q1;
     cf0:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <Q2>
     cf4:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <Q2+0x1>
     cf8:	e0 92 1c 03 	sts	0x031C, r14	; 0x80031c <Q2+0x2>
     cfc:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <Q2+0x3>
	Q1 = Q0;
     d00:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <Q1>
     d04:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <Q1+0x1>
     d08:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <Q1+0x2>
     d0c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <Q1+0x3>
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	08 95       	ret

00000d26 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     d26:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
     d2a:	81 11       	cpse	r24, r1
     d2c:	27 c0       	rjmp	.+78     	; 0xd7c <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     d2e:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <_index>
     d32:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <_index+0x1>
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <testData>
     d3e:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <testData+0x1>
     d42:	e8 0f       	add	r30, r24
     d44:	f9 1f       	adc	r31, r25
     d46:	71 83       	std	Z+1, r23	; 0x01
     d48:	60 83       	st	Z, r22
	_index++;
     d4a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_index>
     d4e:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <_index+0x1>
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <_index+0x1>
     d58:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_index>
	if(_index >= _N)
     d5c:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <_N>
     d60:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <_N+0x1>
     d64:	82 17       	cp	r24, r18
     d66:	93 07       	cpc	r25, r19
     d68:	3c f0       	brlt	.+14     	; 0xd78 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     d6a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_index+0x1>
     d6e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_index>
		_samplesReady = true;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_samplesReady>
	}

	return(_samplesReady);
     d78:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
}
     d7c:	08 95       	ret

00000d7e <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     d7e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_samplesReady>
     d82:	08 95       	ret

00000d84 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     d84:	4f 92       	push	r4
     d86:	5f 92       	push	r5
     d88:	6f 92       	push	r6
     d8a:	7f 92       	push	r7
     d8c:	8f 92       	push	r8
     d8e:	9f 92       	push	r9
     d90:	af 92       	push	r10
     d92:	bf 92       	push	r11
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     da6:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_N>
     daa:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_N+0x1>
     dae:	18 16       	cp	r1, r24
     db0:	19 06       	cpc	r1, r25
     db2:	c4 f4       	brge	.+48     	; 0xde4 <_ZN8Goertzel10Magnitude2Ev+0x60>
     db4:	c0 e0       	ldi	r28, 0x00	; 0
     db6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     db8:	ce 01       	movw	r24, r28
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <testData>
     dc2:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <testData+0x1>
     dc6:	e8 0f       	add	r30, r24
     dc8:	f9 1f       	adc	r31, r25
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	c8 01       	movw	r24, r16
     dd0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     dd4:	21 96       	adiw	r28, 0x01	; 1
     dd6:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_N>
     dda:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <_N+0x1>
     dde:	c8 17       	cp	r28, r24
     de0:	d9 07       	cpc	r29, r25
     de2:	54 f3       	brlt	.-44     	; 0xdb8 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     de4:	80 90 1e 03 	lds	r8, 0x031E	; 0x80031e <Q1>
     de8:	90 90 1f 03 	lds	r9, 0x031F	; 0x80031f <Q1+0x1>
     dec:	a0 90 20 03 	lds	r10, 0x0320	; 0x800320 <Q1+0x2>
     df0:	b0 90 21 03 	lds	r11, 0x0321	; 0x800321 <Q1+0x3>
     df4:	c0 90 1a 03 	lds	r12, 0x031A	; 0x80031a <Q2>
     df8:	d0 90 1b 03 	lds	r13, 0x031B	; 0x80031b <Q2+0x1>
     dfc:	e0 90 1c 03 	lds	r14, 0x031C	; 0x80031c <Q2+0x2>
     e00:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <Q2+0x3>
     e04:	a5 01       	movw	r20, r10
     e06:	94 01       	movw	r18, r8
     e08:	c5 01       	movw	r24, r10
     e0a:	b4 01       	movw	r22, r8
     e0c:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
     e14:	a7 01       	movw	r20, r14
     e16:	96 01       	movw	r18, r12
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     e20:	9b 01       	movw	r18, r22
     e22:	ac 01       	movw	r20, r24
     e24:	c3 01       	movw	r24, r6
     e26:	b2 01       	movw	r22, r4
     e28:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
     e2c:	2b 01       	movw	r4, r22
     e2e:	3c 01       	movw	r6, r24
     e30:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <g_coeff>
     e34:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <g_coeff+0x1>
     e38:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <g_coeff+0x2>
     e3c:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <g_coeff+0x3>
     e40:	c5 01       	movw	r24, r10
     e42:	b4 01       	movw	r22, r8
     e44:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     e48:	a7 01       	movw	r20, r14
     e4a:	96 01       	movw	r18, r12
     e4c:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
     e50:	9b 01       	movw	r18, r22
     e52:	ac 01       	movw	r20, r24
     e54:	c3 01       	movw	r24, r6
     e56:	b2 01       	movw	r22, r4
     e58:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
     e5c:	6b 01       	movw	r12, r22
     e5e:	7c 01       	movw	r14, r24

	ResetGoertzel();
     e60:	c8 01       	movw	r24, r16
     e62:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	08 95       	ret

00000e8c <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     e8c:	e4 e6       	ldi	r30, 0x64	; 100
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     e96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     e9a:	85 e2       	ldi	r24, 0x25	; 37
     e9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     eac:	08 95       	ret

00000eae <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     eae:	84 ea       	ldi	r24, 0xA4	; 164
     eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     eb4:	ec eb       	ldi	r30, 0xBC	; 188
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 23       	and	r24, r24
     ebc:	64 f0       	brlt	.+24     	; 0xed6 <_Z9i2c_startv+0x28>
     ebe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     ec2:	81 11       	cpse	r24, r1
     ec4:	f9 cf       	rjmp	.-14     	; 0xeb8 <_Z9i2c_startv+0xa>
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     ec8:	80 e9       	ldi	r24, 0x90	; 144
     eca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     ed4:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     ed6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     eda:	88 23       	and	r24, r24
     edc:	a9 f3       	breq	.-22     	; 0xec8 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     ede:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     ee0:	08 95       	ret

00000ee2 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     ee2:	84 e9       	ldi	r24, 0x94	; 148
     ee4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ee8:	08 95       	ret

00000eea <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     eea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     eee:	84 e8       	ldi	r24, 0x84	; 132
     ef0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     ef4:	ec eb       	ldi	r30, 0xBC	; 188
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	64 f0       	brlt	.+24     	; 0xf16 <_Z17i2c_write_successhh+0x2c>
     efe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f02:	81 11       	cpse	r24, r1
     f04:	f9 cf       	rjmp	.-14     	; 0xef8 <_Z17i2c_write_successhh+0xe>
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f08:	84 e9       	ldi	r24, 0x94	; 148
     f0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     f14:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     f16:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     f1a:	88 7f       	andi	r24, 0xF8	; 248
     f1c:	86 13       	cpse	r24, r22
     f1e:	f4 cf       	rjmp	.-24     	; 0xf08 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     f20:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     f22:	08 95       	ret

00000f24 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     f24:	84 ec       	ldi	r24, 0xC4	; 196
     f26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f2a:	ec eb       	ldi	r30, 0xBC	; 188
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 23       	and	r24, r24
     f32:	24 f0       	brlt	.+8      	; 0xf3c <_Z12i2c_read_ackv+0x18>
     f34:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f38:	81 11       	cpse	r24, r1
     f3a:	f9 cf       	rjmp	.-14     	; 0xf2e <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     f3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f40:	08 95       	ret

00000f42 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     f42:	84 e8       	ldi	r24, 0x84	; 132
     f44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     f48:	ec eb       	ldi	r30, 0xBC	; 188
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	24 f0       	brlt	.+8      	; 0xf5a <_Z13i2c_read_nackv+0x18>
     f52:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     f56:	81 11       	cpse	r24, r1
     f58:	f9 cf       	rjmp	.-14     	; 0xf4c <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     f5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     f5e:	08 95       	ret

00000f60 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     f60:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f64:	28 7f       	andi	r18, 0xF8	; 248
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	28 17       	cp	r18, r24
     f6c:	39 07       	cpc	r19, r25
     f6e:	29 f0       	breq	.+10     	; 0xf7a <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f70:	84 e9       	ldi	r24, 0x94	; 148
     f72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret
	}

	return(FALSE);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
}
     f7c:	08 95       	ret

00000f7e <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <_Z16i2c_device_writehhPhh+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <_Z16i2c_device_writehhPhh+0x8>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <_Z16i2c_device_writehhPhh+0xa>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	8a 83       	std	Y+2, r24	; 0x02
     f8e:	6b 83       	std	Y+3, r22	; 0x03
     f90:	5d 83       	std	Y+5, r21	; 0x05
     f92:	4c 83       	std	Y+4, r20	; 0x04
     f94:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f96:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     f98:	0e 94 57 07 	call	0xeae	; 0xeae <_Z9i2c_startv>
		if(i2c_status(TW_START))
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z10i2c_statush>
     fa2:	98 2f       	mov	r25, r24
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	99 23       	and	r25, r25
     fa8:	09 f4       	brne	.+2      	; 0xfac <_Z16i2c_device_writehhPhh+0x2e>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	88 23       	and	r24, r24
     fae:	11 f0       	breq	.+4      	; 0xfb4 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	3f c0       	rjmp	.+126    	; 0x1032 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     fb4:	68 e1       	ldi	r22, 0x18	; 24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	0e 94 75 07 	call	0xeea	; 0xeea <_Z17i2c_write_successhh>
     fbc:	98 2f       	mov	r25, r24
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	99 23       	and	r25, r25
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <_Z16i2c_device_writehhPhh+0x48>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	88 23       	and	r24, r24
     fc8:	11 f0       	breq	.+4      	; 0xfce <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	32 c0       	rjmp	.+100    	; 0x1032 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fce:	68 e2       	ldi	r22, 0x28	; 40
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	0e 94 75 07 	call	0xeea	; 0xeea <_Z17i2c_write_successhh>
     fd6:	98 2f       	mov	r25, r24
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	99 23       	and	r25, r25
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <_Z16i2c_device_writehhPhh+0x62>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	25 c0       	rjmp	.+74     	; 0x1032 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f ef       	ldi	r25, 0xFF	; 255
     fec:	98 0f       	add	r25, r24
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	88 23       	and	r24, r24
     ff4:	09 f4       	brne	.+2      	; 0xff8 <_Z16i2c_device_writehhPhh+0x7a>
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	99 23       	and	r25, r25
     ffa:	c1 f0       	breq	.+48     	; 0x102c <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	98 0f       	add	r25, r24
    1002:	99 83       	std	Y+1, r25	; 0x01
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	fc 01       	movw	r30, r24
    1012:	80 81       	ld	r24, Z
    1014:	68 e2       	ldi	r22, 0x28	; 40
    1016:	0e 94 75 07 	call	0xeea	; 0xeea <_Z17i2c_write_successhh>
    101a:	98 2f       	mov	r25, r24
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	99 23       	and	r25, r25
    1020:	09 f4       	brne	.+2      	; 0x1024 <_Z16i2c_device_writehhPhh+0xa6>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	88 23       	and	r24, r24
    1026:	01 f3       	breq	.-64     	; 0xfe8 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
    102c:	0e 94 71 07 	call	0xee2	; 0xee2 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    1030:	80 e0       	ldi	r24, 0x00	; 0
}
    1032:	26 96       	adiw	r28, 0x06	; 6
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	00 d0       	rcall	.+0      	; 0x104e <_Z15i2c_device_readhhPhh+0xa>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <_Z15i2c_device_readhhPhh+0xc>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <_Z15i2c_device_readhhPhh+0xe>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	8a 83       	std	Y+2, r24	; 0x02
    1058:	6b 83       	std	Y+3, r22	; 0x03
    105a:	5d 83       	std	Y+5, r21	; 0x05
    105c:	4c 83       	std	Y+4, r20	; 0x04
    105e:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    1060:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    1062:	0e 94 57 07 	call	0xeae	; 0xeae <_Z9i2c_startv>
		if(i2c_status(TW_START))
    1066:	88 e0       	ldi	r24, 0x08	; 8
    1068:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z10i2c_statush>
    106c:	98 2f       	mov	r25, r24
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	99 23       	and	r25, r25
    1072:	09 f4       	brne	.+2      	; 0x1076 <_Z15i2c_device_readhhPhh+0x32>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	88 23       	and	r24, r24
    1078:	11 f0       	breq	.+4      	; 0x107e <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	79 c0       	rjmp	.+242    	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    107e:	68 e1       	ldi	r22, 0x18	; 24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	0e 94 75 07 	call	0xeea	; 0xeea <_Z17i2c_write_successhh>
    1086:	98 2f       	mov	r25, r24
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	99 23       	and	r25, r25
    108c:	09 f4       	brne	.+2      	; 0x1090 <_Z15i2c_device_readhhPhh+0x4c>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	88 23       	and	r24, r24
    1092:	11 f0       	breq	.+4      	; 0x1098 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	6c c0       	rjmp	.+216    	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    1098:	68 e2       	ldi	r22, 0x28	; 40
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	0e 94 75 07 	call	0xeea	; 0xeea <_Z17i2c_write_successhh>
    10a0:	98 2f       	mov	r25, r24
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	99 23       	and	r25, r25
    10a6:	09 f4       	brne	.+2      	; 0x10aa <_Z15i2c_device_readhhPhh+0x66>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	88 23       	and	r24, r24
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	5f c0       	rjmp	.+190    	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
    10b2:	0e 94 57 07 	call	0xeae	; 0xeae <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
    10b6:	80 e1       	ldi	r24, 0x10	; 16
    10b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z10i2c_statush>
    10bc:	98 2f       	mov	r25, r24
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	99 23       	and	r25, r25
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <_Z15i2c_device_readhhPhh+0x82>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	88 23       	and	r24, r24
    10c8:	11 f0       	breq	.+4      	; 0x10ce <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	51 c0       	rjmp	.+162    	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	60 e4       	ldi	r22, 0x40	; 64
    10d4:	0e 94 75 07 	call	0xeea	; 0xeea <_Z17i2c_write_successhh>
    10d8:	98 2f       	mov	r25, r24
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	99 23       	and	r25, r25
    10de:	09 f4       	brne	.+2      	; 0x10e2 <_Z15i2c_device_readhhPhh+0x9e>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	11 f0       	breq	.+4      	; 0x10ea <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	43 c0       	rjmp	.+134    	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	98 0f       	add	r25, r24
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <_Z15i2c_device_readhhPhh+0xb6>
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	99 23       	and	r25, r25
    10fc:	b1 f1       	breq	.+108    	; 0x116a <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	88 23       	and	r24, r24
    1102:	d9 f0       	breq	.+54     	; 0x113a <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	98 0f       	add	r25, r24
    110a:	99 83       	std	Y+1, r25	; 0x01
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	2c 81       	ldd	r18, Y+4	; 0x04
    1112:	3d 81       	ldd	r19, Y+5	; 0x05
    1114:	89 01       	movw	r16, r18
    1116:	08 0f       	add	r16, r24
    1118:	19 1f       	adc	r17, r25
    111a:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z12i2c_read_ackv>
    111e:	f8 01       	movw	r30, r16
    1120:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    1122:	80 e5       	ldi	r24, 0x50	; 80
    1124:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z10i2c_statush>
    1128:	98 2f       	mov	r25, r24
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	99 23       	and	r25, r25
    112e:	09 f4       	brne	.+2      	; 0x1132 <_Z15i2c_device_readhhPhh+0xee>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	88 23       	and	r24, r24
    1134:	d1 f2       	breq	.-76     	; 0x10ea <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	2c 81       	ldd	r18, Y+4	; 0x04
    1142:	3d 81       	ldd	r19, Y+5	; 0x05
    1144:	89 01       	movw	r16, r18
    1146:	08 0f       	add	r16, r24
    1148:	19 1f       	adc	r17, r25
    114a:	0e 94 a1 07 	call	0xf42	; 0xf42 <_Z13i2c_read_nackv>
    114e:	f8 01       	movw	r30, r16
    1150:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    1152:	88 e5       	ldi	r24, 0x58	; 88
    1154:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z10i2c_statush>
    1158:	98 2f       	mov	r25, r24
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	99 23       	and	r25, r25
    115e:	09 f4       	brne	.+2      	; 0x1162 <_Z15i2c_device_readhhPhh+0x11e>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	88 23       	and	r24, r24
    1164:	11 f2       	breq	.-124    	; 0x10ea <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    116a:	0e 94 71 07 	call	0xee2	; 0xee2 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    116e:	80 e0       	ldi	r24, 0x00	; 0
}
    1170:	26 96       	adiw	r28, 0x06	; 6
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    1186:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	59 e2       	ldi	r21, 0x29	; 41
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	52 9f       	mul	r21, r18
    1194:	f0 01       	movw	r30, r0
    1196:	53 9f       	mul	r21, r19
    1198:	f0 0d       	add	r31, r0
    119a:	11 24       	eor	r1, r1
    119c:	ee 54       	subi	r30, 0x4E	; 78
    119e:	fc 4f       	sbci	r31, 0xFC	; 252
    11a0:	40 81       	ld	r20, Z
    11a2:	41 11       	cpse	r20, r1
    11a4:	0c c0       	rjmp	.+24     	; 0x11be <_Z16nextFullTxBufferv+0x38>
    11a6:	91 50       	subi	r25, 0x01	; 1
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <_Z16nextFullTxBufferv+0x2e>
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	78 f3       	brcs	.-34     	; 0x118e <_Z16nextFullTxBufferv+0x8>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	ed cf       	rjmp	.-38     	; 0x118e <_Z16nextFullTxBufferv+0x8>
    11b4:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	08 95       	ret
    11be:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZ16nextFullTxBuffervE11bufferIndex>
    11c2:	49 e2       	ldi	r20, 0x29	; 41
    11c4:	42 9f       	mul	r20, r18
    11c6:	c0 01       	movw	r24, r0
    11c8:	43 9f       	mul	r20, r19
    11ca:	90 0d       	add	r25, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	8e 54       	subi	r24, 0x4E	; 78
    11d0:	9c 4f       	sbci	r25, 0xFC	; 252
    11d2:	08 95       	ret

000011d4 <_Z17nextEmptyTxBufferv>:
    11d4:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	59 e2       	ldi	r21, 0x29	; 41
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	52 9f       	mul	r21, r18
    11e2:	f0 01       	movw	r30, r0
    11e4:	53 9f       	mul	r21, r19
    11e6:	f0 0d       	add	r31, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	ee 54       	subi	r30, 0x4E	; 78
    11ec:	fc 4f       	sbci	r31, 0xFC	; 252
    11ee:	40 81       	ld	r20, Z
    11f0:	44 23       	and	r20, r20
    11f2:	61 f0       	breq	.+24     	; 0x120c <_Z17nextEmptyTxBufferv+0x38>
    11f4:	91 50       	subi	r25, 0x01	; 1
    11f6:	29 f0       	breq	.+10     	; 0x1202 <_Z17nextEmptyTxBufferv+0x2e>
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	78 f3       	brcs	.-34     	; 0x11dc <_Z17nextEmptyTxBufferv+0x8>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	ed cf       	rjmp	.-38     	; 0x11dc <_Z17nextEmptyTxBufferv+0x8>
    1202:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	08 95       	ret
    120c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1210:	49 e2       	ldi	r20, 0x29	; 41
    1212:	42 9f       	mul	r20, r18
    1214:	c0 01       	movw	r24, r0
    1216:	43 9f       	mul	r20, r19
    1218:	90 0d       	add	r25, r0
    121a:	11 24       	eor	r1, r1
    121c:	8e 54       	subi	r24, 0x4E	; 78
    121e:	9c 4f       	sbci	r25, 0xFC	; 252
    1220:	08 95       	ret

00001222 <_Z17nextEmptyRxBufferv>:
    1222:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	9f e3       	ldi	r25, 0x3F	; 63
    122c:	89 9f       	mul	r24, r25
    122e:	f0 01       	movw	r30, r0
    1230:	11 24       	eor	r1, r1
    1232:	ec 5c       	subi	r30, 0xCC	; 204
    1234:	fc 4f       	sbci	r31, 0xFC	; 252
    1236:	41 81       	ldd	r20, Z+1	; 0x01
    1238:	52 81       	ldd	r21, Z+2	; 0x02
    123a:	45 2b       	or	r20, r21
    123c:	a9 f0       	breq	.+42     	; 0x1268 <_Z17nextEmptyRxBufferv+0x46>
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	08 f0       	brcs	.+2      	; 0x1246 <_Z17nextEmptyRxBufferv+0x24>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	9f e3       	ldi	r25, 0x3F	; 63
    124c:	89 9f       	mul	r24, r25
    124e:	f0 01       	movw	r30, r0
    1250:	11 24       	eor	r1, r1
    1252:	ec 5c       	subi	r30, 0xCC	; 204
    1254:	fc 4f       	sbci	r31, 0xFC	; 252
    1256:	41 81       	ldd	r20, Z+1	; 0x01
    1258:	52 81       	ldd	r21, Z+2	; 0x02
    125a:	45 2b       	or	r20, r21
    125c:	29 f0       	breq	.+10     	; 0x1268 <_Z17nextEmptyRxBufferv+0x46>
    125e:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	08 95       	ret
    1268:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    126c:	4f e3       	ldi	r20, 0x3F	; 63
    126e:	42 9f       	mul	r20, r18
    1270:	c0 01       	movw	r24, r0
    1272:	43 9f       	mul	r20, r19
    1274:	90 0d       	add	r25, r0
    1276:	11 24       	eor	r1, r1
    1278:	8c 5c       	subi	r24, 0xCC	; 204
    127a:	9c 4f       	sbci	r25, 0xFC	; 252
    127c:	08 95       	ret

0000127e <_Z16nextFullRxBufferv>:
    127e:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	9f e3       	ldi	r25, 0x3F	; 63
    1288:	89 9f       	mul	r24, r25
    128a:	f0 01       	movw	r30, r0
    128c:	11 24       	eor	r1, r1
    128e:	ec 5c       	subi	r30, 0xCC	; 204
    1290:	fc 4f       	sbci	r31, 0xFC	; 252
    1292:	41 81       	ldd	r20, Z+1	; 0x01
    1294:	52 81       	ldd	r21, Z+2	; 0x02
    1296:	45 2b       	or	r20, r21
    1298:	a9 f4       	brne	.+42     	; 0x12c4 <_Z16nextFullRxBufferv+0x46>
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <_Z16nextFullRxBufferv+0x24>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	9f e3       	ldi	r25, 0x3F	; 63
    12a8:	89 9f       	mul	r24, r25
    12aa:	f0 01       	movw	r30, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	ec 5c       	subi	r30, 0xCC	; 204
    12b0:	fc 4f       	sbci	r31, 0xFC	; 252
    12b2:	41 81       	ldd	r20, Z+1	; 0x01
    12b4:	52 81       	ldd	r21, Z+2	; 0x02
    12b6:	45 2b       	or	r20, r21
    12b8:	29 f4       	brne	.+10     	; 0x12c4 <_Z16nextFullRxBufferv+0x46>
    12ba:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	08 95       	ret
    12c4:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZ16nextFullRxBuffervE11bufferIndex>
    12c8:	4f e3       	ldi	r20, 0x3F	; 63
    12ca:	42 9f       	mul	r20, r18
    12cc:	c0 01       	movw	r24, r0
    12ce:	43 9f       	mul	r20, r19
    12d0:	90 0d       	add	r25, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	8c 5c       	subi	r24, 0xCC	; 204
    12d6:	9c 4f       	sbci	r25, 0xFC	; 252
    12d8:	08 95       	ret

000012da <_Z19linkbusTxInProgressv>:
    12da:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    12de:	08 95       	ret

000012e0 <_Z16linkbus_start_txv>:
    12e0:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	91 11       	cpse	r25, r1
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	91 11       	cpse	r25, r1
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <_Z16linkbus_start_txv+0x1e>
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <_ZL17linkbus_tx_active>
    12f4:	e1 ec       	ldi	r30, 0xC1	; 193
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	90 81       	ld	r25, Z
    12fa:	90 62       	ori	r25, 0x20	; 32
    12fc:	90 83       	st	Z, r25
    12fe:	08 95       	ret

00001300 <_Z14linkbus_end_txv>:
    1300:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    1304:	88 23       	and	r24, r24
    1306:	39 f0       	breq	.+14     	; 0x1316 <_Z14linkbus_end_txv+0x16>
    1308:	e1 ec       	ldi	r30, 0xC1	; 193
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7d       	andi	r24, 0xDF	; 223
    1310:	80 83       	st	Z, r24
    1312:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZL17linkbus_tx_active>
    1316:	08 95       	ret

00001318 <_Z12linkbus_initm>:
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
    131c:	8e e7       	ldi	r24, 0x7E	; 126
    131e:	e4 e3       	ldi	r30, 0x34	; 52
    1320:	f3 e0       	ldi	r31, 0x03	; 3
    1322:	df 01       	movw	r26, r30
    1324:	1d 92       	st	X+, r1
    1326:	8a 95       	dec	r24
    1328:	e9 f7       	brne	.-6      	; 0x1324 <_Z12linkbus_initm+0xc>
    132a:	e2 eb       	ldi	r30, 0xB2	; 178
    132c:	f3 e0       	ldi	r31, 0x03	; 3
    132e:	10 82       	st	Z, r1
    1330:	11 a6       	std	Z+41, r1	; 0x29
    1332:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9tx_buffer+0x52>
    1336:	60 e4       	ldi	r22, 0x40	; 64
    1338:	72 e4       	ldi	r23, 0x42	; 66
    133a:	8f e0       	ldi	r24, 0x0F	; 15
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__udivmodsi4>
    1342:	21 50       	subi	r18, 0x01	; 1
    1344:	31 09       	sbc	r19, r1
    1346:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    134a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    134e:	88 e9       	ldi	r24, 0x98	; 152
    1350:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1354:	8e e0       	ldi	r24, 0x0E	; 14
    1356:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    135a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    135e:	08 95       	ret

00001360 <_Z15linkbus_disablev>:
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    1366:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    136a:	0e 94 80 09 	call	0x1300	; 0x1300 <_Z14linkbus_end_txv>
    136e:	8e e7       	ldi	r24, 0x7E	; 126
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f3 e0       	ldi	r31, 0x03	; 3
    1374:	df 01       	movw	r26, r30
    1376:	1d 92       	st	X+, r1
    1378:	8a 95       	dec	r24
    137a:	e9 f7       	brne	.-6      	; 0x1376 <_Z15linkbus_disablev+0x16>
    137c:	e2 eb       	ldi	r30, 0xB2	; 178
    137e:	f3 e0       	ldi	r31, 0x03	; 3
    1380:	10 82       	st	Z, r1
    1382:	11 a6       	std	Z+41, r1	; 0x29
    1384:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9tx_buffer+0x52>
    1388:	08 95       	ret

0000138a <_Z17linkbus_send_textPc>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1396:	21 11       	cpse	r18, r1
    1398:	14 c0       	rjmp	.+40     	; 0x13c2 <_Z17linkbus_send_textPc+0x38>
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	a1 f0       	breq	.+40     	; 0x13c6 <_Z17linkbus_send_textPc+0x3c>
    139e:	8c 01       	movw	r16, r24
    13a0:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_Z17nextEmptyTxBufferv>
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	b9 f4       	brne	.+46     	; 0x13d6 <_Z17linkbus_send_textPc+0x4c>
    13a8:	c8 ec       	ldi	r28, 0xC8	; 200
    13aa:	d0 e0       	ldi	r29, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <_Z17linkbus_send_textPc+0x28>
    13ae:	20 97       	sbiw	r28, 0x00	; 0
    13b0:	61 f0       	breq	.+24     	; 0x13ca <_Z17linkbus_send_textPc+0x40>
    13b2:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    13b6:	99 23       	and	r25, r25
    13b8:	51 f0       	breq	.+20     	; 0x13ce <_Z17linkbus_send_textPc+0x44>
    13ba:	20 97       	sbiw	r28, 0x00	; 0
    13bc:	d1 f0       	breq	.+52     	; 0x13f2 <_Z17linkbus_send_textPc+0x68>
    13be:	21 97       	sbiw	r28, 0x01	; 1
    13c0:	f8 cf       	rjmp	.-16     	; 0x13b2 <_Z17linkbus_send_textPc+0x28>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	1b c0       	rjmp	.+54     	; 0x13fc <_Z17linkbus_send_textPc+0x72>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	19 c0       	rjmp	.+50     	; 0x13fc <_Z17linkbus_send_textPc+0x72>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	17 c0       	rjmp	.+46     	; 0x13fc <_Z17linkbus_send_textPc+0x72>
    13ce:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_Z17nextEmptyTxBufferv>
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	61 f3       	breq	.-40     	; 0x13ae <_Z17linkbus_send_textPc+0x24>
    13d6:	1f 93       	push	r17
    13d8:	0f 93       	push	r16
    13da:	9f 93       	push	r25
    13dc:	8f 93       	push	r24
    13de:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    13e2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z16linkbus_start_txv>
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <_Z17linkbus_send_textPc+0x72>
    13f2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_Z17nextEmptyTxBufferv>
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	71 f7       	brne	.-36     	; 0x13d6 <_Z17linkbus_send_textPc+0x4c>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	08 95       	ret

00001406 <_Z17lb_send_NewPromptv>:
    1406:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    140a:	81 11       	cpse	r24, r1
    140c:	06 c0       	rjmp	.+12     	; 0x141a <_Z17lb_send_NewPromptv+0x14>
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 c5 09 	call	0x138a	; 0x138a <_Z17linkbus_send_textPc>
    1416:	81 11       	cpse	r24, r1
    1418:	fa cf       	rjmp	.-12     	; 0x140e <_Z17lb_send_NewPromptv+0x8>
    141a:	08 95       	ret

0000141c <_Z15lb_send_NewLinev>:
    141c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1420:	81 11       	cpse	r24, r1
    1422:	04 c0       	rjmp	.+8      	; 0x142c <_Z15lb_send_NewLinev+0x10>
    1424:	83 e2       	ldi	r24, 0x23	; 35
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 c5 09 	call	0x138a	; 0x138a <_Z17linkbus_send_textPc>
    142c:	08 95       	ret

0000142e <_Z12lb_echo_charh>:
    142e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1432:	91 11       	cpse	r25, r1
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <_Z12lb_echo_charh+0x16>
    1436:	ee e2       	ldi	r30, 0x2E	; 46
    1438:	f4 e0       	ldi	r31, 0x04	; 4
    143a:	80 83       	st	Z, r24
    143c:	11 82       	std	Z+1, r1	; 0x01
    143e:	cf 01       	movw	r24, r30
    1440:	0e 94 c5 09 	call	0x138a	; 0x138a <_Z17linkbus_send_textPc>
    1444:	08 95       	ret

00001446 <_Z14lb_send_stringPch>:
    1446:	cf 93       	push	r28
    1448:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    144c:	21 11       	cpse	r18, r1
    144e:	28 c0       	rjmp	.+80     	; 0x14a0 <_Z14lb_send_stringPch+0x5a>
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	41 f1       	breq	.+80     	; 0x14a4 <_Z14lb_send_stringPch+0x5e>
    1454:	fc 01       	movw	r30, r24
    1456:	20 81       	ld	r18, Z
    1458:	22 23       	and	r18, r18
    145a:	31 f1       	breq	.+76     	; 0x14a8 <_Z14lb_send_stringPch+0x62>
    145c:	01 90       	ld	r0, Z+
    145e:	00 20       	and	r0, r0
    1460:	e9 f7       	brne	.-6      	; 0x145c <_Z14lb_send_stringPch+0x16>
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	e8 1b       	sub	r30, r24
    1466:	f9 0b       	sbc	r31, r25
    1468:	ba 97       	sbiw	r30, 0x2a	; 42
    146a:	00 f5       	brcc	.+64     	; 0x14ac <_Z14lb_send_stringPch+0x66>
    146c:	c6 2f       	mov	r28, r22
    146e:	bc 01       	movw	r22, r24
    1470:	49 e2       	ldi	r20, 0x29	; 41
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	8e e2       	ldi	r24, 0x2E	; 46
    1476:	94 e0       	ldi	r25, 0x04	; 4
    1478:	0e 94 22 31 	call	0x6244	; 0x6244 <strncpy>
    147c:	cc 23       	and	r28, r28
    147e:	59 f0       	breq	.+22     	; 0x1496 <_Z14lb_send_stringPch+0x50>
    1480:	8e e2       	ldi	r24, 0x2E	; 46
    1482:	94 e0       	ldi	r25, 0x04	; 4
    1484:	0e 94 c5 09 	call	0x138a	; 0x138a <_Z17linkbus_send_textPc>
    1488:	81 11       	cpse	r24, r1
    148a:	fa cf       	rjmp	.-12     	; 0x1480 <_Z14lb_send_stringPch+0x3a>
    148c:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL17linkbus_tx_active>
    1490:	81 11       	cpse	r24, r1
    1492:	fc cf       	rjmp	.-8      	; 0x148c <_Z14lb_send_stringPch+0x46>
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <_Z14lb_send_stringPch+0x68>
    1496:	8e e2       	ldi	r24, 0x2E	; 46
    1498:	94 e0       	ldi	r25, 0x04	; 4
    149a:	0e 94 c5 09 	call	0x138a	; 0x138a <_Z17linkbus_send_textPc>
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <_Z14lb_send_stringPch+0x68>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <_Z14lb_send_stringPch+0x68>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <_Z14lb_send_stringPch+0x68>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <_Z14lb_send_stringPch+0x68>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    14b2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	91 11       	cpse	r25, r1
    14ba:	80 e0       	ldi	r24, 0x00	; 0
}
    14bc:	08 95       	ret

000014be <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	8b e0       	ldi	r24, 0x0B	; 11
    14e4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    14e8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	95 e0       	ldi	r25, 0x05	; 5
    14f2:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN8Goertzel9DataPointEi>
    14f6:	88 23       	and	r24, r24
    14f8:	29 f0       	breq	.+10     	; 0x1504 <__vector_21+0x46>
    14fa:	ea e7       	ldi	r30, 0x7A	; 122
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	87 7f       	andi	r24, 0xF7	; 247
    1502:	80 83       	st	Z, r24
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	8b e0       	ldi	r24, 0x0B	; 11
    1508:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_18>:
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	1f 93       	push	r17
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    155a:	c0 91 d9 04 	lds	r28, 0x04D9	; 0x8004d9 <_ZZ11__vector_18E4buff>
    155e:	d0 91 da 04 	lds	r29, 0x04DA	; 0x8004da <_ZZ11__vector_18E4buff+0x1>
    1562:	20 97       	sbiw	r28, 0x00	; 0
    1564:	51 f4       	brne	.+20     	; 0x157a <__vector_18+0x4c>
    1566:	0e 94 11 09 	call	0x1222	; 0x1222 <_Z17nextEmptyRxBufferv>
    156a:	ec 01       	movw	r28, r24
    156c:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <_ZZ11__vector_18E4buff+0x1>
    1570:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_ZZ11__vector_18E4buff>
    1574:	89 2b       	or	r24, r25
    1576:	09 f4       	brne	.+2      	; 0x157a <__vector_18+0x4c>
    1578:	62 c1       	rjmp	.+708    	; 0x183e <__vector_18+0x310>
    157a:	81 2f       	mov	r24, r17
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 08 31 	call	0x6210	; 0x6210 <toupper>
    1582:	9c 01       	movw	r18, r24
    1584:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_ZZ11__vector_18E11ignoreCount>
    1588:	88 23       	and	r24, r24
    158a:	21 f0       	breq	.+8      	; 0x1594 <__vector_18+0x66>
    158c:	81 50       	subi	r24, 0x01	; 1
    158e:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZZ11__vector_18E11ignoreCount>
    1592:	55 c1       	rjmp	.+682    	; 0x183e <__vector_18+0x310>
    1594:	2b 31       	cpi	r18, 0x1B	; 27
    1596:	21 f4       	brne	.+8      	; 0x15a0 <__vector_18+0x72>
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZZ11__vector_18E11ignoreCount>
    159e:	4f c1       	rjmp	.+670    	; 0x183e <__vector_18+0x310>
    15a0:	2d 30       	cpi	r18, 0x0D	; 13
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <__vector_18+0x78>
    15a4:	3f c0       	rjmp	.+126    	; 0x1624 <__vector_18+0xf6>
    15a6:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    15aa:	88 23       	and	r24, r24
    15ac:	31 f1       	breq	.+76     	; 0x15fa <__vector_18+0xcc>
    15ae:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    15b2:	ee 23       	and	r30, r30
    15b4:	f9 f0       	breq	.+62     	; 0x15f4 <__vector_18+0xc6>
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	88 83       	st	Y, r24
    15ba:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    15be:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    15ca:	88 23       	and	r24, r24
    15cc:	79 f0       	breq	.+30     	; 0x15ec <__vector_18+0xbe>
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    15d6:	54 e1       	ldi	r21, 0x14	; 20
    15d8:	58 9f       	mul	r21, r24
    15da:	90 01       	movw	r18, r0
    15dc:	59 9f       	mul	r21, r25
    15de:	30 0d       	add	r19, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	c2 0f       	add	r28, r18
    15e4:	d3 1f       	adc	r29, r19
    15e6:	c4 0f       	add	r28, r20
    15e8:	d1 1d       	adc	r29, r1
    15ea:	1b 82       	std	Y+3, r1	; 0x03
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	e8 56       	subi	r30, 0x68	; 104
    15f0:	fb 4f       	sbci	r31, 0xFB	; 251
    15f2:	10 82       	st	Z, r1
    15f4:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z15lb_send_NewLinev>
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__vector_18+0xd4>
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	9f e7       	ldi	r25, 0x7F	; 127
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    1606:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E9field_len>
    160a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    160e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1612:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E11field_index>
    1616:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <_ZZ11__vector_18E4buff+0x1>
    161a:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <_ZZ11__vector_18E4buff>
    161e:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    1622:	0d c1       	rjmp	.+538    	; 0x183e <__vector_18+0x310>
    1624:	22 23       	and	r18, r18
    1626:	09 f4       	brne	.+2      	; 0x162a <__vector_18+0xfc>
    1628:	0a c1       	rjmp	.+532    	; 0x183e <__vector_18+0x310>
    162a:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    162e:	4e 2f       	mov	r20, r30
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	da 01       	movw	r26, r20
    1634:	a8 56       	subi	r26, 0x68	; 104
    1636:	bb 4f       	sbci	r27, 0xFB	; 251
    1638:	2c 93       	st	X, r18
    163a:	ee 23       	and	r30, r30
    163c:	09 f4       	brne	.+2      	; 0x1640 <__vector_18+0x112>
    163e:	d6 c0       	rjmp	.+428    	; 0x17ec <__vector_18+0x2be>
    1640:	2f 37       	cpi	r18, 0x7F	; 127
    1642:	09 f0       	breq	.+2      	; 0x1646 <__vector_18+0x118>
    1644:	5f c0       	rjmp	.+190    	; 0x1704 <__vector_18+0x1d6>
    1646:	e1 50       	subi	r30, 0x01	; 1
    1648:	e0 93 d7 04 	sts	0x04D7, r30	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    164c:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    1650:	81 11       	cpse	r24, r1
    1652:	13 c0       	rjmp	.+38     	; 0x167a <__vector_18+0x14c>
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	e8 56       	subi	r30, 0x68	; 104
    1658:	fb 4f       	sbci	r31, 0xFB	; 251
    165a:	40 81       	ld	r20, Z
    165c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1660:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1664:	84 1b       	sub	r24, r20
    1666:	91 09       	sbc	r25, r1
    1668:	6a e0       	ldi	r22, 0x0A	; 10
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    1670:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1674:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1678:	39 c0       	rjmp	.+114    	; 0x16ec <__vector_18+0x1be>
    167a:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    167e:	99 23       	and	r25, r25
    1680:	91 f0       	breq	.+36     	; 0x16a6 <__vector_18+0x178>
    1682:	4f ef       	ldi	r20, 0xFF	; 255
    1684:	49 0f       	add	r20, r25
    1686:	40 93 93 04 	sts	0x0493, r20	; 0x800493 <_ZZ11__vector_18E9field_len>
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	54 e1       	ldi	r21, 0x14	; 20
    1690:	58 9f       	mul	r21, r24
    1692:	b0 01       	movw	r22, r0
    1694:	59 9f       	mul	r21, r25
    1696:	70 0d       	add	r23, r0
    1698:	11 24       	eor	r1, r1
    169a:	c6 0f       	add	r28, r22
    169c:	d7 1f       	adc	r29, r23
    169e:	c4 0f       	add	r28, r20
    16a0:	d1 1d       	adc	r29, r1
    16a2:	1b 82       	std	Y+3, r1	; 0x03
    16a4:	23 c0       	rjmp	.+70     	; 0x16ec <__vector_18+0x1be>
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	e8 56       	subi	r30, 0x68	; 104
    16aa:	fb 4f       	sbci	r31, 0xFB	; 251
    16ac:	90 81       	ld	r25, Z
    16ae:	90 32       	cpi	r25, 0x20	; 32
    16b0:	a1 f4       	brne	.+40     	; 0x16da <__vector_18+0x1ac>
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E11field_index>
    16b8:	de 01       	movw	r26, r28
    16ba:	94 e1       	ldi	r25, 0x14	; 20
    16bc:	89 9f       	mul	r24, r25
    16be:	a0 0d       	add	r26, r0
    16c0:	b1 1d       	adc	r27, r1
    16c2:	11 24       	eor	r1, r1
    16c4:	13 96       	adiw	r26, 0x03	; 3
    16c6:	fd 01       	movw	r30, r26
    16c8:	01 90       	ld	r0, Z+
    16ca:	00 20       	and	r0, r0
    16cc:	e9 f7       	brne	.-6      	; 0x16c8 <__vector_18+0x19a>
    16ce:	31 97       	sbiw	r30, 0x01	; 1
    16d0:	ea 1b       	sub	r30, r26
    16d2:	fb 0b       	sbc	r31, r27
    16d4:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <_ZZ11__vector_18E9field_len>
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <__vector_18+0x1be>
    16da:	94 e1       	ldi	r25, 0x14	; 20
    16dc:	89 9f       	mul	r24, r25
    16de:	c0 0d       	add	r28, r0
    16e0:	d1 1d       	adc	r29, r1
    16e2:	11 24       	eor	r1, r1
    16e4:	1b 82       	std	Y+3, r1	; 0x03
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E11field_index>
    16ec:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    16f0:	e8 2f       	mov	r30, r24
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	e8 56       	subi	r30, 0x68	; 104
    16f6:	fb 4f       	sbci	r31, 0xFB	; 251
    16f8:	10 82       	st	Z, r1
    16fa:	81 11       	cpse	r24, r1
    16fc:	93 c0       	rjmp	.+294    	; 0x1824 <__vector_18+0x2f6>
    16fe:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    1702:	90 c0       	rjmp	.+288    	; 0x1824 <__vector_18+0x2f6>
    1704:	20 32       	cpi	r18, 0x20	; 32
    1706:	79 f5       	brne	.+94     	; 0x1766 <__vector_18+0x238>
    1708:	fa 01       	movw	r30, r20
    170a:	e9 56       	subi	r30, 0x69	; 105
    170c:	fb 4f       	sbci	r31, 0xFB	; 251
    170e:	80 81       	ld	r24, Z
    1710:	80 32       	cpi	r24, 0x20	; 32
    1712:	09 f4       	brne	.+2      	; 0x1716 <__vector_18+0x1e8>
    1714:	94 c0       	rjmp	.+296    	; 0x183e <__vector_18+0x310>
    1716:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    171a:	68 2f       	mov	r22, r24
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	fb 01       	movw	r30, r22
    1720:	31 96       	adiw	r30, 0x01	; 1
    1722:	33 97       	sbiw	r30, 0x03	; 3
    1724:	0c f0       	brlt	.+2      	; 0x1728 <__vector_18+0x1fa>
    1726:	8b c0       	rjmp	.+278    	; 0x183e <__vector_18+0x310>
    1728:	88 23       	and	r24, r24
    172a:	79 f0       	breq	.+30     	; 0x174a <__vector_18+0x21c>
    172c:	61 50       	subi	r22, 0x01	; 1
    172e:	71 09       	sbc	r23, r1
    1730:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    1734:	a4 e1       	ldi	r26, 0x14	; 20
    1736:	a6 9f       	mul	r26, r22
    1738:	f0 01       	movw	r30, r0
    173a:	a7 9f       	mul	r26, r23
    173c:	f0 0d       	add	r31, r0
    173e:	11 24       	eor	r1, r1
    1740:	ce 0f       	add	r28, r30
    1742:	df 1f       	adc	r29, r31
    1744:	c9 0f       	add	r28, r25
    1746:	d1 1d       	adc	r29, r1
    1748:	1b 82       	std	Y+3, r1	; 0x03
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ11__vector_18E11field_index>
    1750:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZZ11__vector_18E9field_len>
    1754:	4f 5f       	subi	r20, 0xFF	; 255
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	4e 33       	cpi	r20, 0x3E	; 62
    175a:	51 05       	cpc	r21, r1
    175c:	0c f0       	brlt	.+2      	; 0x1760 <__vector_18+0x232>
    175e:	4e e3       	ldi	r20, 0x3E	; 62
    1760:	40 93 d7 04 	sts	0x04D7, r20	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    1764:	5f c0       	rjmp	.+190    	; 0x1824 <__vector_18+0x2f6>
    1766:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZZ11__vector_18E9field_len>
    176a:	84 31       	cpi	r24, 0x14	; 20
    176c:	08 f0       	brcs	.+2      	; 0x1770 <__vector_18+0x242>
    176e:	67 c0       	rjmp	.+206    	; 0x183e <__vector_18+0x310>
    1770:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <_ZZ11__vector_18E11field_index>
    1774:	41 11       	cpse	r20, r1
    1776:	19 c0       	rjmp	.+50     	; 0x17aa <__vector_18+0x27c>
    1778:	40 91 95 04 	lds	r20, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    177c:	50 91 96 04 	lds	r21, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1780:	ba 01       	movw	r22, r20
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	44 0f       	add	r20, r20
    1788:	55 1f       	adc	r21, r21
    178a:	44 0f       	add	r20, r20
    178c:	55 1f       	adc	r21, r21
    178e:	44 0f       	add	r20, r20
    1790:	55 1f       	adc	r21, r21
    1792:	46 0f       	add	r20, r22
    1794:	57 1f       	adc	r21, r23
    1796:	42 0f       	add	r20, r18
    1798:	51 1d       	adc	r21, r1
    179a:	50 93 96 04 	sts	0x0496, r21	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    179e:	40 93 95 04 	sts	0x0495, r20	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZZ11__vector_18E9field_len>
    17a8:	16 c0       	rjmp	.+44     	; 0x17d6 <__vector_18+0x2a8>
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	41 50       	subi	r20, 0x01	; 1
    17ae:	51 09       	sbc	r21, r1
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	98 0f       	add	r25, r24
    17b4:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <_ZZ11__vector_18E9field_len>
    17b8:	e4 e1       	ldi	r30, 0x14	; 20
    17ba:	e4 9f       	mul	r30, r20
    17bc:	b0 01       	movw	r22, r0
    17be:	e5 9f       	mul	r30, r21
    17c0:	70 0d       	add	r23, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	c6 0f       	add	r28, r22
    17c6:	d7 1f       	adc	r29, r23
    17c8:	fe 01       	movw	r30, r28
    17ca:	e8 0f       	add	r30, r24
    17cc:	f1 1d       	adc	r31, r1
    17ce:	23 83       	std	Z+3, r18	; 0x03
    17d0:	c9 0f       	add	r28, r25
    17d2:	d1 1d       	adc	r29, r1
    17d4:	1b 82       	std	Y+3, r1	; 0x03
    17d6:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	8e 33       	cpi	r24, 0x3E	; 62
    17e0:	91 05       	cpc	r25, r1
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <__vector_18+0x2b8>
    17e4:	8e e3       	ldi	r24, 0x3E	; 62
    17e6:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    17ea:	1c c0       	rjmp	.+56     	; 0x1824 <__vector_18+0x2f6>
    17ec:	2f 37       	cpi	r18, 0x7F	; 127
    17ee:	41 f4       	brne	.+16     	; 0x1800 <__vector_18+0x2d2>
    17f0:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    17f4:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    17f8:	18 16       	cp	r1, r24
    17fa:	19 06       	cpc	r1, r25
    17fc:	bc f0       	brlt	.+46     	; 0x182c <__vector_18+0x2fe>
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <__vector_18+0x308>
    1800:	20 32       	cpi	r18, 0x20	; 32
    1802:	e9 f0       	breq	.+58     	; 0x183e <__vector_18+0x310>
    1804:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZZ11__vector_18E11field_index>
    1808:	c9 01       	movw	r24, r18
    180a:	99 27       	eor	r25, r25
    180c:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1810:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1814:	1b 82       	std	Y+3, r1	; 0x03
    1816:	1f 8a       	std	Y+23, r1	; 0x17
    1818:	1b a6       	std	Y+43, r1	; 0x2b
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ11__vector_18E13receiving_msg>
    1820:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <_ZZ11__vector_18E9charIndex>
    1824:	82 2f       	mov	r24, r18
    1826:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z12lb_echo_charh>
    182a:	09 c0       	rjmp	.+18     	; 0x183e <__vector_18+0x310>
    182c:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    1830:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    1834:	f7 cf       	rjmp	.-18     	; 0x1824 <__vector_18+0x2f6>
    1836:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ11__vector_18E6msg_ID+0x1>
    183a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ11__vector_18E6msg_ID>
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	bf 91       	pop	r27
    1848:	af 91       	pop	r26
    184a:	9f 91       	pop	r25
    184c:	8f 91       	pop	r24
    184e:	7f 91       	pop	r23
    1850:	6f 91       	pop	r22
    1852:	5f 91       	pop	r21
    1854:	4f 91       	pop	r20
    1856:	3f 91       	pop	r19
    1858:	2f 91       	pop	r18
    185a:	1f 91       	pop	r17
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <__vector_19>:
    1866:	1f 92       	push	r1
    1868:	0f 92       	push	r0
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	0f 92       	push	r0
    186e:	11 24       	eor	r1, r1
    1870:	2f 93       	push	r18
    1872:	3f 93       	push	r19
    1874:	4f 93       	push	r20
    1876:	5f 93       	push	r21
    1878:	6f 93       	push	r22
    187a:	7f 93       	push	r23
    187c:	8f 93       	push	r24
    187e:	9f 93       	push	r25
    1880:	af 93       	push	r26
    1882:	bf 93       	push	r27
    1884:	ef 93       	push	r30
    1886:	ff 93       	push	r31
    1888:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <_ZZ11__vector_19E4buff>
    188c:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    1890:	89 2b       	or	r24, r25
    1892:	31 f4       	brne	.+12     	; 0x18a0 <__vector_19+0x3a>
    1894:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z16nextFullTxBufferv>
    1898:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    189c:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_19E4buff>
    18a0:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <_ZZ11__vector_19E4buff>
    18a4:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    18a8:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZZ11__vector_19E9charIndex>
    18ac:	df 01       	movw	r26, r30
    18ae:	a8 0f       	add	r26, r24
    18b0:	b1 1d       	adc	r27, r1
    18b2:	9c 91       	ld	r25, X
    18b4:	99 23       	and	r25, r25
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <__vector_19+0x5e>
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <_ZZ11__vector_19E9charIndex>
    18be:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    18c2:	0d c0       	rjmp	.+26     	; 0x18de <__vector_19+0x78>
    18c4:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZZ11__vector_19E9charIndex>
    18c8:	10 82       	st	Z, r1
    18ca:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z16nextFullTxBufferv>
    18ce:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <_ZZ11__vector_19E4buff+0x1>
    18d2:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZZ11__vector_19E4buff>
    18d6:	89 2b       	or	r24, r25
    18d8:	11 f4       	brne	.+4      	; 0x18de <__vector_19+0x78>
    18da:	0e 94 80 09 	call	0x1300	; 0x1300 <_Z14linkbus_end_txv>
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <__vector_1>:
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	8f 92       	push	r8
    190c:	9f 92       	push	r9
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	1f 92       	push	r1
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    1944:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    1948:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    194c:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	a1 1d       	adc	r26, r1
    1954:	b1 1d       	adc	r27, r1
    1956:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_current_epoch>
    195a:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_current_epoch+0x1>
    195e:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <g_current_epoch+0x2>
    1962:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <g_current_epoch+0x3>
    1966:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <g_seconds_since_powerup>
    196a:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <g_seconds_since_powerup+0x1>
    196e:	a0 91 96 05 	lds	r26, 0x0596	; 0x800596 <g_seconds_since_powerup+0x2>
    1972:	b0 91 97 05 	lds	r27, 0x0597	; 0x800597 <g_seconds_since_powerup+0x3>
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	a1 1d       	adc	r26, r1
    197a:	b1 1d       	adc	r27, r1
    197c:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <g_seconds_since_powerup>
    1980:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <g_seconds_since_powerup+0x1>
    1984:	a0 93 96 05 	sts	0x0596, r26	; 0x800596 <g_seconds_since_powerup+0x2>
    1988:	b0 93 97 05 	sts	0x0597, r27	; 0x800597 <g_seconds_since_powerup+0x3>
    198c:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_temperature_check_countdown>
    1990:	88 23       	and	r24, r24
    1992:	29 f0       	breq	.+10     	; 0x199e <__vector_1+0x9e>
    1994:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_temperature_check_countdown>
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_temperature_check_countdown>
    199e:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_voltage_check_countdown>
    19a2:	88 23       	and	r24, r24
    19a4:	29 f0       	breq	.+10     	; 0x19b0 <__vector_1+0xb0>
    19a6:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_voltage_check_countdown>
    19aa:	81 50       	subi	r24, 0x01	; 1
    19ac:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_voltage_check_countdown>
    19b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    19b4:	88 23       	and	r24, r24
    19b6:	91 f1       	breq	.+100    	; 0x1a1c <__vector_1+0x11c>
    19b8:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_use_rtc_for_startstop>
    19bc:	88 23       	and	r24, r24
    19be:	09 f4       	brne	.+2      	; 0x19c2 <__vector_1+0xc2>
    19c0:	b2 c3       	rjmp	.+1892   	; 0x2126 <__vector_1+0x826>
    19c2:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    19c6:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    19ca:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    19ce:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    19d2:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    19d6:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    19da:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    19de:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    19e2:	48 17       	cp	r20, r24
    19e4:	59 07       	cpc	r21, r25
    19e6:	6a 07       	cpc	r22, r26
    19e8:	7b 07       	cpc	r23, r27
    19ea:	08 f4       	brcc	.+2      	; 0x19ee <__vector_1+0xee>
    19ec:	9c c3       	rjmp	.+1848   	; 0x2126 <__vector_1+0x826>
    19ee:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    19f2:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    19f6:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    19fa:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    19fe:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    1a02:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    1a06:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    1a0a:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    1a0e:	48 17       	cp	r20, r24
    1a10:	59 07       	cpc	r21, r25
    1a12:	6a 07       	cpc	r22, r26
    1a14:	7b 07       	cpc	r23, r27
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <__vector_1+0x11a>
    1a18:	02 c3       	rjmp	.+1540   	; 0x201e <__vector_1+0x71e>
    1a1a:	85 c3       	rjmp	.+1802   	; 0x2126 <__vector_1+0x826>
    1a1c:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_use_rtc_for_startstop>
    1a20:	88 23       	and	r24, r24
    1a22:	d1 f0       	breq	.+52     	; 0x1a58 <__vector_1+0x158>
    1a24:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    1a28:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    1a2c:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    1a30:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    1a34:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    1a38:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    1a3c:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    1a40:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    1a44:	48 17       	cp	r20, r24
    1a46:	59 07       	cpc	r21, r25
    1a48:	6a 07       	cpc	r22, r26
    1a4a:	7b 07       	cpc	r23, r27
    1a4c:	28 f0       	brcs	.+10     	; 0x1a58 <__vector_1+0x158>
    1a4e:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
    1a58:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	63 c3       	rjmp	.+1734   	; 0x2126 <__vector_1+0x826>
    1a60:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	88 e2       	ldi	r24, 0x28	; 40
    1a68:	95 e0       	ldi	r25, 0x05	; 5
    1a6a:	0e 94 ba 29 	call	0x5374	; 0x5374 <_Z26timeRequiredToSendStrAtWPMPcj>
    1a6e:	8c 50       	subi	r24, 0x0C	; 12
    1a70:	9e 4f       	sbci	r25, 0xFE	; 254
    1a72:	9c 01       	movw	r18, r24
    1a74:	36 95       	lsr	r19
    1a76:	27 95       	ror	r18
    1a78:	36 95       	lsr	r19
    1a7a:	27 95       	ror	r18
    1a7c:	36 95       	lsr	r19
    1a7e:	27 95       	ror	r18
    1a80:	a5 ec       	ldi	r26, 0xC5	; 197
    1a82:	b0 e2       	ldi	r27, 0x20	; 32
    1a84:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    1a88:	8c 01       	movw	r16, r24
    1a8a:	12 95       	swap	r17
    1a8c:	02 95       	swap	r16
    1a8e:	0f 70       	andi	r16, 0x0F	; 15
    1a90:	01 27       	eor	r16, r17
    1a92:	1f 70       	andi	r17, 0x0F	; 15
    1a94:	01 27       	eor	r16, r17
    1a96:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    1a9a:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1a9e:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1aa2:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	8a 2b       	or	r24, r26
    1aaa:	8b 2b       	or	r24, r27
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <__vector_1+0x1b0>
    1aae:	e6 c2       	rjmp	.+1484   	; 0x207c <__vector_1+0x77c>
    1ab0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <__vector_1+0x1ba>
    1ab8:	d4 c2       	rjmp	.+1448   	; 0x2062 <__vector_1+0x762>
    1aba:	e0 c2       	rjmp	.+1472   	; 0x207c <__vector_1+0x77c>
    1abc:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    1ac0:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_fox_id_offset>
    1ac4:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	40 91 5c 05 	lds	r20, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1ace:	50 91 5d 05 	lds	r21, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1ad2:	82 1b       	sub	r24, r18
    1ad4:	93 0b       	sbc	r25, r19
    1ad6:	18 16       	cp	r1, r24
    1ad8:	19 06       	cpc	r1, r25
    1ada:	14 f0       	brlt	.+4      	; 0x1ae0 <__vector_1+0x1e0>
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	84 9f       	mul	r24, r20
    1ae2:	90 01       	movw	r18, r0
    1ae4:	85 9f       	mul	r24, r21
    1ae6:	30 0d       	add	r19, r0
    1ae8:	94 9f       	mul	r25, r20
    1aea:	30 0d       	add	r19, r0
    1aec:	11 24       	eor	r1, r1
    1aee:	c9 01       	movw	r24, r18
    1af0:	80 1b       	sub	r24, r16
    1af2:	91 0b       	sbc	r25, r17
    1af4:	09 2e       	mov	r0, r25
    1af6:	00 0c       	add	r0, r0
    1af8:	aa 0b       	sbc	r26, r26
    1afa:	bb 0b       	sbc	r27, r27
    1afc:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1b00:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1b04:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1b08:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1b0c:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    1b10:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    1b14:	10 e0       	ldi	r17, 0x00	; 0
    1b16:	f6 c2       	rjmp	.+1516   	; 0x2104 <__vector_1+0x804>
    1b18:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1b1c:	21 30       	cpi	r18, 0x01	; 1
    1b1e:	31 f5       	brne	.+76     	; 0x1b6c <__vector_1+0x26c>
    1b20:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1b24:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1b28:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1b2c:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1b30:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1b34:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1b38:	09 2e       	mov	r0, r25
    1b3a:	00 0c       	add	r0, r0
    1b3c:	aa 0b       	sbc	r26, r26
    1b3e:	bb 0b       	sbc	r27, r27
    1b40:	84 0f       	add	r24, r20
    1b42:	95 1f       	adc	r25, r21
    1b44:	a6 1f       	adc	r26, r22
    1b46:	b7 1f       	adc	r27, r23
    1b48:	01 2e       	mov	r0, r17
    1b4a:	00 0c       	add	r0, r0
    1b4c:	22 0b       	sbc	r18, r18
    1b4e:	33 0b       	sbc	r19, r19
    1b50:	80 1b       	sub	r24, r16
    1b52:	91 0b       	sbc	r25, r17
    1b54:	a2 0b       	sbc	r26, r18
    1b56:	b3 0b       	sbc	r27, r19
    1b58:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1b5c:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1b60:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1b64:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1b68:	11 e0       	ldi	r17, 0x01	; 1
    1b6a:	cc c2       	rjmp	.+1432   	; 0x2104 <__vector_1+0x804>
    1b6c:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1b70:	23 30       	cpi	r18, 0x03	; 3
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <__vector_1+0x276>
    1b74:	e2 c0       	rjmp	.+452    	; 0x1d3a <__vector_1+0x43a>
    1b76:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <g_fox>
    1b7a:	a0 91 56 05 	lds	r26, 0x0556	; 0x800556 <g_fox_id_offset>
    1b7e:	b0 91 57 05 	lds	r27, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1b82:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <g_fox_counter>
    1b86:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	2a 1b       	sub	r18, r26
    1b8e:	3b 0b       	sbc	r19, r27
    1b90:	2e 17       	cp	r18, r30
    1b92:	3f 07       	cpc	r19, r31
    1b94:	41 f0       	breq	.+16     	; 0x1ba6 <__vector_1+0x2a6>
    1b96:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <g_number_of_foxes>
    1b9a:	30 91 59 05 	lds	r19, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    1b9e:	21 30       	cpi	r18, 0x01	; 1
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <__vector_1+0x2a6>
    1ba4:	66 c0       	rjmp	.+204    	; 0x1c72 <__vector_1+0x372>
    1ba6:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1baa:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1bae:	60 91 5c 05 	lds	r22, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1bb2:	70 91 5d 05 	lds	r23, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1bb6:	ca 01       	movw	r24, r20
    1bb8:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	48 1b       	sub	r20, r24
    1bc0:	59 0b       	sbc	r21, r25
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	04 17       	cp	r16, r20
    1bc6:	15 07       	cpc	r17, r21
    1bc8:	14 f5       	brge	.+68     	; 0x1c0e <__vector_1+0x30e>
    1bca:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1bce:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1bd2:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1bd6:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1bda:	09 2e       	mov	r0, r25
    1bdc:	00 0c       	add	r0, r0
    1bde:	aa 0b       	sbc	r26, r26
    1be0:	bb 0b       	sbc	r27, r27
    1be2:	84 0f       	add	r24, r20
    1be4:	95 1f       	adc	r25, r21
    1be6:	a6 1f       	adc	r26, r22
    1be8:	b7 1f       	adc	r27, r23
    1bea:	01 2e       	mov	r0, r17
    1bec:	00 0c       	add	r0, r0
    1bee:	22 0b       	sbc	r18, r18
    1bf0:	33 0b       	sbc	r19, r19
    1bf2:	80 1b       	sub	r24, r16
    1bf4:	91 0b       	sbc	r25, r17
    1bf6:	a2 0b       	sbc	r26, r18
    1bf8:	b3 0b       	sbc	r27, r19
    1bfa:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1bfe:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1c02:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1c06:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1c0a:	11 e0       	ldi	r17, 0x01	; 1
    1c0c:	7b c2       	rjmp	.+1270   	; 0x2104 <__vector_1+0x804>
    1c0e:	40 17       	cp	r20, r16
    1c10:	51 07       	cpc	r21, r17
    1c12:	0c f0       	brlt	.+2      	; 0x1c16 <__vector_1+0x316>
    1c14:	7f c2       	rjmp	.+1278   	; 0x2114 <__vector_1+0x814>
    1c16:	c0 90 98 05 	lds	r12, 0x0598	; 0x800598 <g_seconds_since_sync>
    1c1a:	d0 90 99 05 	lds	r13, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1c1e:	e0 90 9a 05 	lds	r14, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1c22:	f0 90 9b 05 	lds	r15, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1c26:	40 91 5a 05 	lds	r20, 0x055A	; 0x80055a <g_cycle_period_seconds>
    1c2a:	50 91 5b 05 	lds	r21, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    1c2e:	09 2e       	mov	r0, r25
    1c30:	00 0c       	add	r0, r0
    1c32:	aa 0b       	sbc	r26, r26
    1c34:	bb 0b       	sbc	r27, r27
    1c36:	8c 0d       	add	r24, r12
    1c38:	9d 1d       	adc	r25, r13
    1c3a:	ae 1d       	adc	r26, r14
    1c3c:	bf 1d       	adc	r27, r15
    1c3e:	05 2e       	mov	r0, r21
    1c40:	00 0c       	add	r0, r0
    1c42:	66 0b       	sbc	r22, r22
    1c44:	77 0b       	sbc	r23, r23
    1c46:	84 0f       	add	r24, r20
    1c48:	95 1f       	adc	r25, r21
    1c4a:	a6 1f       	adc	r26, r22
    1c4c:	b7 1f       	adc	r27, r23
    1c4e:	01 2e       	mov	r0, r17
    1c50:	00 0c       	add	r0, r0
    1c52:	22 0b       	sbc	r18, r18
    1c54:	33 0b       	sbc	r19, r19
    1c56:	80 1b       	sub	r24, r16
    1c58:	91 0b       	sbc	r25, r17
    1c5a:	a2 0b       	sbc	r26, r18
    1c5c:	b3 0b       	sbc	r27, r19
    1c5e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1c62:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1c66:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1c6a:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1c6e:	11 e0       	ldi	r17, 0x01	; 1
    1c70:	49 c2       	rjmp	.+1170   	; 0x2104 <__vector_1+0x804>
    1c72:	80 90 98 05 	lds	r8, 0x0598	; 0x800598 <g_seconds_since_sync>
    1c76:	90 90 99 05 	lds	r9, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1c7a:	a0 90 9a 05 	lds	r10, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1c7e:	b0 90 9b 05 	lds	r11, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1c82:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <g_fox>
    1c86:	e0 90 56 05 	lds	r14, 0x0556	; 0x800556 <g_fox_id_offset>
    1c8a:	f0 90 57 05 	lds	r15, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1c8e:	a0 91 5c 05 	lds	r26, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1c92:	b0 91 5d 05 	lds	r27, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	ee 19       	sub	r30, r14
    1c9a:	ff 09       	sbc	r31, r15
    1c9c:	ea 9f       	mul	r30, r26
    1c9e:	60 01       	movw	r12, r0
    1ca0:	eb 9f       	mul	r30, r27
    1ca2:	d0 0c       	add	r13, r0
    1ca4:	fa 9f       	mul	r31, r26
    1ca6:	d0 0c       	add	r13, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	0d 2c       	mov	r0, r13
    1cac:	00 0c       	add	r0, r0
    1cae:	ee 08       	sbc	r14, r14
    1cb0:	ff 08       	sbc	r15, r15
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	77 0f       	add	r23, r23
    1cb6:	aa 0b       	sbc	r26, r26
    1cb8:	bb 0b       	sbc	r27, r27
    1cba:	a5 01       	movw	r20, r10
    1cbc:	94 01       	movw	r18, r8
    1cbe:	28 1b       	sub	r18, r24
    1cc0:	39 0b       	sbc	r19, r25
    1cc2:	4a 0b       	sbc	r20, r26
    1cc4:	5b 0b       	sbc	r21, r27
    1cc6:	da 01       	movw	r26, r20
    1cc8:	c9 01       	movw	r24, r18
    1cca:	8c 0d       	add	r24, r12
    1ccc:	9d 1d       	adc	r25, r13
    1cce:	ae 1d       	adc	r26, r14
    1cd0:	bf 1d       	adc	r27, r15
    1cd2:	01 2e       	mov	r0, r17
    1cd4:	00 0c       	add	r0, r0
    1cd6:	22 0b       	sbc	r18, r18
    1cd8:	33 0b       	sbc	r19, r19
    1cda:	80 1b       	sub	r24, r16
    1cdc:	91 0b       	sbc	r25, r17
    1cde:	a2 0b       	sbc	r26, r18
    1ce0:	b3 0b       	sbc	r27, r19
    1ce2:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1ce6:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1cea:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1cee:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1cf2:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1cf6:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1cfa:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1cfe:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1d02:	84 17       	cp	r24, r20
    1d04:	95 07       	cpc	r25, r21
    1d06:	a6 07       	cpc	r26, r22
    1d08:	b7 07       	cpc	r27, r23
    1d0a:	0c f0       	brlt	.+2      	; 0x1d0e <__vector_1+0x40e>
    1d0c:	f8 c1       	rjmp	.+1008   	; 0x20fe <__vector_1+0x7fe>
    1d0e:	40 91 54 05 	lds	r20, 0x0554	; 0x800554 <g_id_interval_seconds>
    1d12:	50 91 55 05 	lds	r21, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    1d16:	05 2e       	mov	r0, r21
    1d18:	00 0c       	add	r0, r0
    1d1a:	66 0b       	sbc	r22, r22
    1d1c:	77 0b       	sbc	r23, r23
    1d1e:	84 0f       	add	r24, r20
    1d20:	95 1f       	adc	r25, r21
    1d22:	a6 1f       	adc	r26, r22
    1d24:	b7 1f       	adc	r27, r23
    1d26:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1d2a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1d2e:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1d32:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1d36:	10 e0       	ldi	r17, 0x00	; 0
    1d38:	e5 c1       	rjmp	.+970    	; 0x2104 <__vector_1+0x804>
    1d3a:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    1d3e:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1d42:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1d46:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1d4a:	40 91 85 04 	lds	r20, 0x0485	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1d4e:	50 91 86 04 	lds	r21, 0x0486	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1d52:	60 91 87 04 	lds	r22, 0x0487	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1d56:	70 91 88 04 	lds	r23, 0x0488	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1d5a:	48 17       	cp	r20, r24
    1d5c:	59 07       	cpc	r21, r25
    1d5e:	6a 07       	cpc	r22, r26
    1d60:	7b 07       	cpc	r23, r27
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <__vector_1+0x466>
    1d64:	ce c1       	rjmp	.+924    	; 0x2102 <__vector_1+0x802>
    1d66:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_id_interval_seconds>
    1d6a:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    1d6e:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <g_seconds_since_sync>
    1d72:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1d76:	60 91 9a 05 	lds	r22, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1d7a:	70 91 9b 05 	lds	r23, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1d7e:	09 2e       	mov	r0, r25
    1d80:	00 0c       	add	r0, r0
    1d82:	aa 0b       	sbc	r26, r26
    1d84:	bb 0b       	sbc	r27, r27
    1d86:	84 0f       	add	r24, r20
    1d88:	95 1f       	adc	r25, r21
    1d8a:	a6 1f       	adc	r26, r22
    1d8c:	b7 1f       	adc	r27, r23
    1d8e:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    1d92:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    1d96:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    1d9a:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	ba c1       	rjmp	.+884    	; 0x2116 <__vector_1+0x816>
    1da2:	00 e0       	ldi	r16, 0x00	; 0
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <__vector_1+0x4a8>
    1da6:	01 e0       	ldi	r16, 0x01	; 1
    1da8:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <g_seconds_since_sync>
    1dac:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1db0:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1db4:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1db8:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    1dbc:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    1dc0:	03 2e       	mov	r0, r19
    1dc2:	00 0c       	add	r0, r0
    1dc4:	44 0b       	sbc	r20, r20
    1dc6:	55 0b       	sbc	r21, r21
    1dc8:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__divmodsi4>
    1dcc:	67 2b       	or	r22, r23
    1dce:	68 2b       	or	r22, r24
    1dd0:	69 2b       	or	r22, r25
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <__vector_1+0x4d6>
    1dd4:	73 c1       	rjmp	.+742    	; 0x20bc <__vector_1+0x7bc>
    1dd6:	20 c0       	rjmp	.+64     	; 0x1e18 <__vector_1+0x518>
    1dd8:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_initialize_fox_transmissions>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <__vector_1+0x4e2>
    1de0:	7b c1       	rjmp	.+758    	; 0x20d8 <__vector_1+0x7d8>
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ10__vector_1E23fox_transition_occurred>
    1de8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <g_fox_counter>
    1dec:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1df0:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    1df4:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    1df8:	82 17       	cp	r24, r18
    1dfa:	93 07       	cpc	r25, r19
    1dfc:	34 f4       	brge	.+12     	; 0x1e0a <__vector_1+0x50a>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    1e06:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
    1e0a:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    1e0e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    1e12:	01 11       	cpse	r16, r1
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <__vector_1+0x51c>
    1e16:	36 c0       	rjmp	.+108    	; 0x1e84 <__vector_1+0x584>
    1e18:	00 23       	and	r16, r16
    1e1a:	81 f1       	breq	.+96     	; 0x1e7c <__vector_1+0x57c>
    1e1c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	82 e8       	ldi	r24, 0x82	; 130
    1e24:	9b e1       	ldi	r25, 0x1B	; 27
    1e26:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	6a e0       	ldi	r22, 0x0A	; 10
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    1e34:	66 0f       	add	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	70 93 91 05 	sts	0x0591, r23	; 0x800591 <g_code_throttle+0x1>
    1e3c:	60 93 90 05 	sts	0x0590, r22	; 0x800590 <g_code_throttle>
    1e40:	19 82       	std	Y+1, r1	; 0x01
    1e42:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_messages_text+0x15>
    1e46:	88 23       	and	r24, r24
    1e48:	51 f0       	breq	.+20     	; 0x1e5e <__vector_1+0x55e>
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	be 01       	movw	r22, r28
    1e50:	6f 5f       	subi	r22, 0xFF	; 255
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	88 e2       	ldi	r24, 0x28	; 40
    1e56:	95 e0       	ldi	r25, 0x05	; 5
    1e58:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <__vector_1+0x570>
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	be 01       	movw	r22, r28
    1e64:	6f 5f       	subi	r22, 0xFF	; 255
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	85 e3       	ldi	r24, 0x35	; 53
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
    1e70:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_callsign_sent>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_on_the_air>
    1e7a:	b2 c0       	rjmp	.+356    	; 0x1fe0 <__vector_1+0x6e0>
    1e7c:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_ZZ10__vector_1E23fox_transition_occurred>
    1e80:	88 23       	and	r24, r24
    1e82:	21 f0       	breq	.+8      	; 0x1e8c <__vector_1+0x58c>
    1e84:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_callsign_sent>
    1e88:	81 11       	cpse	r24, r1
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <__vector_1+0x592>
    1e8c:	11 23       	and	r17, r17
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <__vector_1+0x592>
    1e90:	a7 c0       	rjmp	.+334    	; 0x1fe0 <__vector_1+0x6e0>
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	8d e0       	ldi	r24, 0x0D	; 13
    1e96:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    1e9a:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_ZZ10__vector_1E23fox_transition_occurred>
    1e9e:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    1ea2:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    1ea6:	02 97       	sbiw	r24, 0x02	; 2
    1ea8:	0c f4       	brge	.+2      	; 0x1eac <__vector_1+0x5ac>
    1eaa:	23 c1       	rjmp	.+582    	; 0x20f2 <__vector_1+0x7f2>
    1eac:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <g_fox>
    1eb0:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <g_fox_counter>
    1eb4:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1eb8:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_fox_id_offset>
    1ebc:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	84 0f       	add	r24, r20
    1ec4:	95 1f       	adc	r25, r21
    1ec6:	28 17       	cp	r18, r24
    1ec8:	39 07       	cpc	r19, r25
    1eca:	09 f0       	breq	.+2      	; 0x1ece <__vector_1+0x5ce>
    1ecc:	0f c1       	rjmp	.+542    	; 0x20ec <__vector_1+0x7ec>
    1ece:	11 c1       	rjmp	.+546    	; 0x20f2 <__vector_1+0x7f2>
    1ed0:	40 91 41 05 	lds	r20, 0x0541	; 0x800541 <g_voltage>
    1ed4:	50 91 42 05 	lds	r21, 0x0542	; 0x800542 <g_voltage+0x1>
    1ed8:	4b 5f       	subi	r20, 0xFB	; 251
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255
    1edc:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_temperature>
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	08 2e       	mov	r0, r24
    1ee4:	00 0c       	add	r0, r0
    1ee6:	33 0b       	sbc	r19, r19
    1ee8:	3f 93       	push	r19
    1eea:	8f 93       	push	r24
    1eec:	fa 01       	movw	r30, r20
    1eee:	f6 95       	lsr	r31
    1ef0:	e7 95       	ror	r30
    1ef2:	f6 95       	lsr	r31
    1ef4:	e7 95       	ror	r30
    1ef6:	9f 01       	movw	r18, r30
    1ef8:	ab e7       	ldi	r26, 0x7B	; 123
    1efa:	b4 e1       	ldi	r27, 0x14	; 20
    1efc:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	64 e6       	ldi	r22, 0x64	; 100
    1f06:	68 9f       	mul	r22, r24
    1f08:	90 01       	movw	r18, r0
    1f0a:	69 9f       	mul	r22, r25
    1f0c:	30 0d       	add	r19, r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	ca 01       	movw	r24, r20
    1f12:	82 1b       	sub	r24, r18
    1f14:	93 0b       	sbc	r25, r19
    1f16:	9c 01       	movw	r18, r24
    1f18:	ad ec       	ldi	r26, 0xCD	; 205
    1f1a:	bc ec       	ldi	r27, 0xCC	; 204
    1f1c:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    1f20:	96 95       	lsr	r25
    1f22:	87 95       	ror	r24
    1f24:	96 95       	lsr	r25
    1f26:	87 95       	ror	r24
    1f28:	96 95       	lsr	r25
    1f2a:	87 95       	ror	r24
    1f2c:	9f 93       	push	r25
    1f2e:	8f 93       	push	r24
    1f30:	9f 01       	movw	r18, r30
    1f32:	ab e7       	ldi	r26, 0x7B	; 123
    1f34:	b4 e1       	ldi	r27, 0x14	; 20
    1f36:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	85 e2       	ldi	r24, 0x25	; 37
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	9f 93       	push	r25
    1f48:	8f 93       	push	r24
    1f4a:	8b ed       	ldi	r24, 0xDB	; 219
    1f4c:	94 e0       	ldi	r25, 0x04	; 4
    1f4e:	9f 93       	push	r25
    1f50:	8f 93       	push	r24
    1f52:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    1f56:	6b ed       	ldi	r22, 0xDB	; 219
    1f58:	74 e0       	ldi	r23, 0x04	; 4
    1f5a:	83 e1       	ldi	r24, 0x13	; 19
    1f5c:	95 e0       	ldi	r25, 0x05	; 5
    1f5e:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	12 c0       	rjmp	.+36     	; 0x1f94 <__vector_1+0x694>
    1f70:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	bc 01       	movw	r22, r24
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	66 0f       	add	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	68 0f       	add	r22, r24
    1f82:	79 1f       	adc	r23, r25
    1f84:	66 54       	subi	r22, 0x46	; 70
    1f86:	7d 4f       	sbci	r23, 0xFD	; 253
    1f88:	83 e1       	ldi	r24, 0x13	; 19
    1f8a:	95 e0       	ldi	r25, 0x05	; 5
    1f8c:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_pattern_codespeed>
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	82 e8       	ldi	r24, 0x82	; 130
    1f9c:	9b e1       	ldi	r25, 0x1B	; 27
    1f9e:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	6a e0       	ldi	r22, 0x0A	; 10
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    1fac:	66 0f       	add	r22, r22
    1fae:	77 1f       	adc	r23, r23
    1fb0:	70 93 91 05 	sts	0x0591, r23	; 0x800591 <g_code_throttle+0x1>
    1fb4:	60 93 90 05 	sts	0x0590, r22	; 0x800590 <g_code_throttle>
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	be 01       	movw	r22, r28
    1fbe:	6f 5f       	subi	r22, 0xFF	; 255
    1fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc2:	83 e1       	ldi	r24, 0x13	; 19
    1fc4:	95 e0       	ldi	r25, 0x05	; 5
    1fc6:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_on_the_air>
    1fd0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_fox_counter>
    1fd4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_fox_counter+0x1>
    1fd8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_fox_tone_offset+0x1>
    1fdc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_fox_tone_offset>
    1fe0:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <g_initialize_fox_transmissions>
    1fe4:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    1fe8:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    1fec:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    1ff0:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_seconds_since_sync>
    1ffe:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_seconds_since_sync+0x1>
    2002:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <g_seconds_since_sync+0x2>
    2006:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <g_seconds_since_sync+0x3>
    200a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    200e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2018:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    201c:	84 c0       	rjmp	.+264    	; 0x2126 <__vector_1+0x826>
    201e:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
    2022:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_transmissions_disabled>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	be 01       	movw	r22, r28
    2030:	6f 5f       	subi	r22, 0xFF	; 255
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	83 e1       	ldi	r24, 0x13	; 19
    2036:	95 e0       	ldi	r25, 0x05	; 5
    2038:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
    203c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_pattern_codespeed>
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	82 e8       	ldi	r24, 0x82	; 130
    2044:	9b e1       	ldi	r25, 0x1B	; 27
    2046:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    204a:	cb 01       	movw	r24, r22
    204c:	6a e0       	ldi	r22, 0x0A	; 10
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    2054:	66 0f       	add	r22, r22
    2056:	77 1f       	adc	r23, r23
    2058:	70 93 91 05 	sts	0x0591, r23	; 0x800591 <g_code_throttle+0x1>
    205c:	60 93 90 05 	sts	0x0590, r22	; 0x800590 <g_code_throttle>
    2060:	62 c0       	rjmp	.+196    	; 0x2126 <__vector_1+0x826>
    2062:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_id_interval_seconds>
    2066:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    206a:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_cycle_period_seconds>
    206e:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    2072:	82 17       	cp	r24, r18
    2074:	93 07       	cpc	r25, r19
    2076:	0c f0       	brlt	.+2      	; 0x207a <__vector_1+0x77a>
    2078:	21 cd       	rjmp	.-1470   	; 0x1abc <__vector_1+0x1bc>
    207a:	48 cd       	rjmp	.-1392   	; 0x1b0c <__vector_1+0x20c>
    207c:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <g_seconds_since_sync>
    2080:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    2084:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    2088:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    208c:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_cycle_period_seconds>
    2090:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    2094:	03 2e       	mov	r0, r19
    2096:	00 0c       	add	r0, r0
    2098:	44 0b       	sbc	r20, r20
    209a:	55 0b       	sbc	r21, r21
    209c:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__divmodsi4>
    20a0:	ab 01       	movw	r20, r22
    20a2:	70 93 84 04 	sts	0x0484, r23	; 0x800484 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    20a6:	60 93 83 04 	sts	0x0483, r22	; 0x800483 <_ZZ10__vector_1E18seconds_into_cycle>
    20aa:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_id_interval_seconds>
    20ae:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    20b2:	23 2b       	or	r18, r19
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <__vector_1+0x7b8>
    20b6:	30 cd       	rjmp	.-1440   	; 0x1b18 <__vector_1+0x218>
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	24 c0       	rjmp	.+72     	; 0x2104 <__vector_1+0x804>
    20bc:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <g_seconds_since_sync>
    20c0:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    20c4:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    20c8:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    20cc:	89 2b       	or	r24, r25
    20ce:	8a 2b       	or	r24, r26
    20d0:	8b 2b       	or	r24, r27
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <__vector_1+0x7d6>
    20d4:	81 ce       	rjmp	.-766    	; 0x1dd8 <__vector_1+0x4d8>
    20d6:	85 ce       	rjmp	.-758    	; 0x1de2 <__vector_1+0x4e2>
    20d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_fox_counter>
    20dc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_fox_counter+0x1>
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    20e6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
    20ea:	7b ce       	rjmp	.-778    	; 0x1de2 <__vector_1+0x4e2>
    20ec:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_on_the_air>
    20f0:	77 cf       	rjmp	.-274    	; 0x1fe0 <__vector_1+0x6e0>
    20f2:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    20f6:	83 31       	cpi	r24, 0x13	; 19
    20f8:	09 f0       	breq	.+2      	; 0x20fc <__vector_1+0x7fc>
    20fa:	3a cf       	rjmp	.-396    	; 0x1f70 <__vector_1+0x670>
    20fc:	e9 ce       	rjmp	.-558    	; 0x1ed0 <__vector_1+0x5d0>
    20fe:	10 e0       	ldi	r17, 0x00	; 0
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <__vector_1+0x804>
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    2108:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    210c:	89 2b       	or	r24, r25
    210e:	09 f0       	breq	.+2      	; 0x2112 <__vector_1+0x812>
    2110:	48 ce       	rjmp	.-880    	; 0x1da2 <__vector_1+0x4a2>
    2112:	b4 ce       	rjmp	.-664    	; 0x1e7c <__vector_1+0x57c>
    2114:	11 e0       	ldi	r17, 0x01	; 1
    2116:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    211a:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    211e:	89 2b       	or	r24, r25
    2120:	09 f4       	brne	.+2      	; 0x2124 <__vector_1+0x824>
    2122:	7c ce       	rjmp	.-776    	; 0x1e1c <__vector_1+0x51c>
    2124:	40 ce       	rjmp	.-896    	; 0x1da6 <__vector_1+0x4a6>
    2126:	0f 90       	pop	r0
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	ff 91       	pop	r31
    212e:	ef 91       	pop	r30
    2130:	bf 91       	pop	r27
    2132:	af 91       	pop	r26
    2134:	9f 91       	pop	r25
    2136:	8f 91       	pop	r24
    2138:	7f 91       	pop	r23
    213a:	6f 91       	pop	r22
    213c:	5f 91       	pop	r21
    213e:	4f 91       	pop	r20
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	cf 90       	pop	r12
    2150:	bf 90       	pop	r11
    2152:	af 90       	pop	r10
    2154:	9f 90       	pop	r9
    2156:	8f 90       	pop	r8
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	0f 90       	pop	r0
    215e:	1f 90       	pop	r1
    2160:	18 95       	reti

00002162 <__vector_14>:
    2162:	1f 92       	push	r1
    2164:	0f 92       	push	r0
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	0f 92       	push	r0
    216a:	11 24       	eor	r1, r1
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
    2184:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZZ11__vector_14E6toggle>
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	81 11       	cpse	r24, r1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ11__vector_14E6toggle>
    2192:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_audio_tone_state>
    2196:	99 23       	and	r25, r25
    2198:	61 f0       	breq	.+24     	; 0x21b2 <__vector_14+0x50>
    219a:	81 11       	cpse	r24, r1
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <__vector_14+0x46>
    219e:	61 e0       	ldi	r22, 0x01	; 1
    21a0:	89 e0       	ldi	r24, 0x09	; 9
    21a2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    21a6:	09 c0       	rjmp	.+18     	; 0x21ba <__vector_14+0x58>
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	89 e0       	ldi	r24, 0x09	; 9
    21ac:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    21b0:	04 c0       	rjmp	.+8      	; 0x21ba <__vector_14+0x58>
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	89 e0       	ldi	r24, 0x09	; 9
    21b6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    21ba:	ff 91       	pop	r31
    21bc:	ef 91       	pop	r30
    21be:	bf 91       	pop	r27
    21c0:	af 91       	pop	r26
    21c2:	9f 91       	pop	r25
    21c4:	8f 91       	pop	r24
    21c6:	7f 91       	pop	r23
    21c8:	6f 91       	pop	r22
    21ca:	5f 91       	pop	r21
    21cc:	4f 91       	pop	r20
    21ce:	3f 91       	pop	r19
    21d0:	2f 91       	pop	r18
    21d2:	0f 90       	pop	r0
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	0f 90       	pop	r0
    21d8:	1f 90       	pop	r1
    21da:	18 95       	reti

000021dc <__vector_11>:
    21dc:	1f 92       	push	r1
    21de:	0f 92       	push	r0
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	0f 92       	push	r0
    21e4:	11 24       	eor	r1, r1
    21e6:	8f 93       	push	r24
    21e8:	9f 93       	push	r25
    21ea:	ef 93       	push	r30
    21ec:	ff 93       	push	r31
    21ee:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_AM_enabled>
    21f2:	88 23       	and	r24, r24
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_11+0x1c>
    21f6:	4b c0       	rjmp	.+150    	; 0x228e <__vector_11+0xb2>
    21f8:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <g_sendAMmodulation>
    21fc:	81 11       	cpse	r24, r1
    21fe:	30 c0       	rjmp	.+96     	; 0x2260 <__vector_11+0x84>
    2200:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ11__vector_11E5index>
    2204:	81 11       	cpse	r24, r1
    2206:	2c c0       	rjmp	.+88     	; 0x2260 <__vector_11+0x84>
    2208:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <g_sendAMmodulationConstantly>
    220c:	88 23       	and	r24, r24
    220e:	a1 f0       	breq	.+40     	; 0x2238 <__vector_11+0x5c>
    2210:	36 c0       	rjmp	.+108    	; 0x227e <__vector_11+0xa2>
    2212:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZZ11__vector_11E5index>
    2216:	98 b1       	in	r25, 0x08	; 8
    2218:	8f 70       	andi	r24, 0x0F	; 15
    221a:	90 7f       	andi	r25, 0xF0	; 240
    221c:	89 2b       	or	r24, r25
    221e:	88 b9       	out	0x08, r24	; 8
    2220:	9b b1       	in	r25, 0x0b	; 11
    2222:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2226:	80 73       	andi	r24, 0x30	; 48
    2228:	82 95       	swap	r24
    222a:	8f 70       	andi	r24, 0x0F	; 15
    222c:	9c 7f       	andi	r25, 0xFC	; 252
    222e:	89 2b       	or	r24, r25
    2230:	8b b9       	out	0x0b, r24	; 11
    2232:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2236:	2b c0       	rjmp	.+86     	; 0x228e <__vector_11+0xb2>
    2238:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ11__vector_11E11controlPins>
    223c:	8f 33       	cpi	r24, 0x3F	; 63
    223e:	39 f1       	breq	.+78     	; 0x228e <__vector_11+0xb2>
    2240:	8f e3       	ldi	r24, 0x3F	; 63
    2242:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2246:	88 b1       	in	r24, 0x08	; 8
    2248:	8f 60       	ori	r24, 0x0F	; 15
    224a:	88 b9       	out	0x08, r24	; 8
    224c:	8b b1       	in	r24, 0x0b	; 11
    224e:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2252:	90 73       	andi	r25, 0x30	; 48
    2254:	92 95       	swap	r25
    2256:	9f 70       	andi	r25, 0x0F	; 15
    2258:	8c 7f       	andi	r24, 0xFC	; 252
    225a:	89 2b       	or	r24, r25
    225c:	8b b9       	out	0x0b, r24	; 11
    225e:	17 c0       	rjmp	.+46     	; 0x228e <__vector_11+0xb2>
    2260:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <_ZZ11__vector_11E5index>
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	9e 0f       	add	r25, r30
    2268:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <_ZZ11__vector_11E5index>
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	e2 5a       	subi	r30, 0xA2	; 162
    2270:	fa 4f       	sbci	r31, 0xFA	; 250
    2272:	80 81       	ld	r24, Z
    2274:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ11__vector_11E11controlPins>
    2278:	90 32       	cpi	r25, 0x20	; 32
    227a:	58 f6       	brcc	.-106    	; 0x2212 <__vector_11+0x36>
    227c:	cc cf       	rjmp	.-104    	; 0x2216 <__vector_11+0x3a>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ11__vector_11E5index>
    2284:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_dataModulation>
    2288:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ11__vector_11E11controlPins>
    228c:	c4 cf       	rjmp	.-120    	; 0x2216 <__vector_11+0x3a>
    228e:	ff 91       	pop	r31
    2290:	ef 91       	pop	r30
    2292:	9f 91       	pop	r25
    2294:	8f 91       	pop	r24
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	0f 90       	pop	r0
    229c:	1f 90       	pop	r1
    229e:	18 95       	reti

000022a0 <_Z23clockConfigurationCheckv>:
    22a0:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    22a4:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    22a8:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    22ac:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    22b0:	81 15       	cp	r24, r1
    22b2:	96 46       	sbci	r25, 0x66	; 102
    22b4:	ae 4e       	sbci	r26, 0xEE	; 238
    22b6:	bf 45       	sbci	r27, 0x5F	; 95
    22b8:	08 f4       	brcc	.+2      	; 0x22bc <_Z23clockConfigurationCheckv+0x1c>
    22ba:	67 c0       	rjmp	.+206    	; 0x238a <_Z23clockConfigurationCheckv+0xea>
    22bc:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    22c0:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    22c4:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    22c8:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    22cc:	81 15       	cp	r24, r1
    22ce:	96 46       	sbci	r25, 0x66	; 102
    22d0:	ae 4e       	sbci	r26, 0xEE	; 238
    22d2:	bf 45       	sbci	r27, 0x5F	; 95
    22d4:	08 f4       	brcc	.+2      	; 0x22d8 <_Z23clockConfigurationCheckv+0x38>
    22d6:	5b c0       	rjmp	.+182    	; 0x238e <_Z23clockConfigurationCheckv+0xee>
    22d8:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    22dc:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    22e0:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    22e4:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    22e8:	81 15       	cp	r24, r1
    22ea:	96 46       	sbci	r25, 0x66	; 102
    22ec:	ae 4e       	sbci	r26, 0xEE	; 238
    22ee:	bf 45       	sbci	r27, 0x5F	; 95
    22f0:	08 f4       	brcc	.+2      	; 0x22f4 <_Z23clockConfigurationCheckv+0x54>
    22f2:	4f c0       	rjmp	.+158    	; 0x2392 <_Z23clockConfigurationCheckv+0xf2>
    22f4:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
    22f8:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    22fc:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    2300:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    2304:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    2308:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    230c:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2310:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2314:	84 17       	cp	r24, r20
    2316:	95 07       	cpc	r25, r21
    2318:	a6 07       	cpc	r26, r22
    231a:	b7 07       	cpc	r27, r23
    231c:	e0 f5       	brcc	.+120    	; 0x2396 <_Z23clockConfigurationCheckv+0xf6>
    231e:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    2322:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2326:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    232a:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    232e:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    2332:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    2336:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    233a:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    233e:	84 17       	cp	r24, r20
    2340:	95 07       	cpc	r25, r21
    2342:	a6 07       	cpc	r26, r22
    2344:	b7 07       	cpc	r27, r23
    2346:	48 f1       	brcs	.+82     	; 0x239a <_Z23clockConfigurationCheckv+0xfa>
    2348:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <g_current_epoch>
    234c:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2350:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2354:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2358:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    235c:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2360:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2364:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2368:	84 17       	cp	r24, r20
    236a:	95 07       	cpc	r25, r21
    236c:	a6 07       	cpc	r26, r22
    236e:	b7 07       	cpc	r27, r23
    2370:	30 f4       	brcc	.+12     	; 0x237e <_Z23clockConfigurationCheckv+0xde>
    2372:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    2376:	81 11       	cpse	r24, r1
    2378:	12 c0       	rjmp	.+36     	; 0x239e <_Z23clockConfigurationCheckv+0xfe>
    237a:	85 e0       	ldi	r24, 0x05	; 5
    237c:	08 95       	ret
    237e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_use_rtc_for_startstop>
    2382:	88 23       	and	r24, r24
    2384:	71 f0       	breq	.+28     	; 0x23a2 <_Z23clockConfigurationCheckv+0x102>
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	08 95       	ret
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	08 95       	ret
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	08 95       	ret
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	08 95       	ret
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	08 95       	ret
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	08 95       	ret
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	08 95       	ret
    23a2:	84 e0       	ldi	r24, 0x04	; 4
    23a4:	08 95       	ret

000023a6 <_Z13sendMorseToneh>:
    23a6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <g_fox_tone_offset>
    23aa:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <g_fox_tone_offset+0x1>
    23ae:	9f e2       	ldi	r25, 0x2F	; 47
    23b0:	92 1b       	sub	r25, r18
    23b2:	97 bd       	out	0x27, r25	; 39
    23b4:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_audio_tone_state>
    23b8:	08 95       	ret

000023ba <__vector_8>:
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	2f 93       	push	r18
    23c6:	3f 93       	push	r19
    23c8:	4f 93       	push	r20
    23ca:	5f 93       	push	r21
    23cc:	6f 93       	push	r22
    23ce:	7f 93       	push	r23
    23d0:	8f 93       	push	r24
    23d2:	9f 93       	push	r25
    23d4:	af 93       	push	r26
    23d6:	bf 93       	push	r27
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <__vector_8+0x28>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tick_count>
    23ea:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <g_tick_count+0x1>
    23ee:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <g_tick_count+0x2>
    23f2:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <g_tick_count+0x3>
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	a1 1d       	adc	r26, r1
    23fa:	b1 1d       	adc	r27, r1
    23fc:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <g_tick_count>
    2400:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <g_tick_count+0x1>
    2404:	a0 93 06 05 	sts	0x0506, r26	; 0x800506 <g_tick_count+0x2>
    2408:	b0 93 07 05 	sts	0x0507, r27	; 0x800507 <g_tick_count+0x3>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	1a 82       	std	Y+2, r1	; 0x02
    2412:	84 e0       	ldi	r24, 0x04	; 4
    2414:	0e 94 33 02 	call	0x466	; 0x466 <_Z11digitalReadh>
    2418:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <g_reset_button_held>
    241c:	99 23       	and	r25, r25
    241e:	09 f4       	brne	.+2      	; 0x2422 <__vector_8+0x68>
    2420:	3d c1       	rjmp	.+634    	; 0x269c <__vector_8+0x2e2>
    2422:	88 23       	and	r24, r24
    2424:	09 f4       	brne	.+2      	; 0x2428 <__vector_8+0x6e>
    2426:	3d c1       	rjmp	.+634    	; 0x26a2 <__vector_8+0x2e8>
    2428:	39 c1       	rjmp	.+626    	; 0x269c <__vector_8+0x2e2>
    242a:	44 e0       	ldi	r20, 0x04	; 4
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	40 93 94 05 	sts	0x0594, r20	; 0x800594 <g_seconds_since_powerup>
    2436:	50 93 95 05 	sts	0x0595, r21	; 0x800595 <g_seconds_since_powerup+0x1>
    243a:	60 93 96 05 	sts	0x0596, r22	; 0x800596 <g_seconds_since_powerup+0x2>
    243e:	70 93 97 05 	sts	0x0597, r23	; 0x800597 <g_seconds_since_powerup+0x3>
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <g_perform_EEPROM_reset>
    2448:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZZ10__vector_8E15holdButtonState>
    244c:	89 13       	cpse	r24, r25
    244e:	25 c0       	rjmp	.+74     	; 0x249a <__vector_8+0xe0>
    2450:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_sync_pin_timer>
    2454:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_sync_pin_timer+0x1>
    2458:	2b 3b       	cpi	r18, 0xBB	; 187
    245a:	30 41       	sbci	r19, 0x10	; 16
    245c:	54 f4       	brge	.+20     	; 0x2472 <__vector_8+0xb8>
    245e:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_sync_pin_timer>
    2462:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_sync_pin_timer+0x1>
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	30 93 50 05 	sts	0x0550, r19	; 0x800550 <g_sync_pin_timer+0x1>
    246e:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <g_sync_pin_timer>
    2472:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <g_sync_pin_timer>
    2476:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <g_sync_pin_timer+0x1>
    247a:	20 39       	cpi	r18, 0x90	; 144
    247c:	31 05       	cpc	r19, r1
    247e:	9c f0       	brlt	.+38     	; 0x24a6 <__vector_8+0xec>
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	09 f4       	brne	.+2      	; 0x2486 <__vector_8+0xcc>
    2484:	1d c1       	rjmp	.+570    	; 0x26c0 <__vector_8+0x306>
    2486:	92 e0       	ldi	r25, 0x02	; 2
    2488:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <g_sync_pin_stable>
    248c:	81 11       	cpse	r24, r1
    248e:	0b c0       	rjmp	.+22     	; 0x24a6 <__vector_8+0xec>
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	8d e0       	ldi	r24, 0x0D	; 13
    2494:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <__vector_8+0xec>
    249a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10__vector_8E15holdButtonState>
    249e:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_sync_pin_timer+0x1>
    24a2:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_sync_pin_timer>
    24a6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    24aa:	81 11       	cpse	r24, r1
    24ac:	13 c1       	rjmp	.+550    	; 0x26d4 <__vector_8+0x31a>
    24ae:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_on_the_air>
    24b2:	88 23       	and	r24, r24
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <__vector_8+0xfe>
    24b6:	0e c1       	rjmp	.+540    	; 0x26d4 <__vector_8+0x31a>
    24b8:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ10__vector_8E11ptt_dropped>
    24bc:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZZ10__vector_8E11ptt_dropped+0x1>
    24c0:	89 2b       	or	r24, r25
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <__vector_8+0x10c>
    24c4:	01 c1       	rjmp	.+514    	; 0x26c8 <__vector_8+0x30e>
    24c6:	06 c1       	rjmp	.+524    	; 0x26d4 <__vector_8+0x31a>
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	88 e0       	ldi	r24, 0x08	; 8
    24cc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    24d0:	84 e9       	ldi	r24, 0x94	; 148
    24d2:	95 e0       	ldi	r25, 0x05	; 5
    24d4:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E9ptt_delay+0x1>
    24d8:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E9ptt_delay>
    24dc:	01 c1       	rjmp	.+514    	; 0x26e0 <__vector_8+0x326>
    24de:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ10__vector_8E9ptt_delay>
    24e2:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ10__vector_8E9ptt_delay+0x1>
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <__vector_8+0x13c>
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E9ptt_delay+0x1>
    24f0:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E9ptt_delay>
    24f4:	f5 c0       	rjmp	.+490    	; 0x26e0 <__vector_8+0x326>
    24f6:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ10__vector_8E7codeInc>
    24fa:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	e1 f1       	breq	.+120    	; 0x257a <__vector_8+0x1c0>
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    2508:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ10__vector_8E7codeInc>
    250c:	89 2b       	or	r24, r25
    250e:	09 f0       	breq	.+2      	; 0x2512 <__vector_8+0x158>
    2510:	e7 c0       	rjmp	.+462    	; 0x26e0 <__vector_8+0x326>
    2512:	ae 01       	movw	r20, r28
    2514:	4e 5f       	subi	r20, 0xFE	; 254
    2516:	5f 4f       	sbci	r21, 0xFF	; 255
    2518:	be 01       	movw	r22, r28
    251a:	6f 5f       	subi	r22, 0xFF	; 255
    251c:	7f 4f       	sbci	r23, 0xFF	; 255
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
    2526:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E3key>
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	81 11       	cpse	r24, r1
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <__vector_8+0x19e>
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	88 23       	and	r24, r24
    2534:	89 f0       	breq	.+34     	; 0x2558 <__vector_8+0x19e>
    2536:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ10__vector_8E3key>
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_callsign_sent>
    2540:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_use_ptt_periodic_reset>
    2544:	88 23       	and	r24, r24
    2546:	41 f0       	breq	.+16     	; 0x2558 <__vector_8+0x19e>
    2548:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_on_the_air>
    254c:	84 e9       	ldi	r24, 0x94	; 148
    254e:	95 e0       	ldi	r25, 0x05	; 5
    2550:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ10__vector_8E11ptt_dropped+0x1>
    2554:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E11ptt_dropped>
    2558:	60 91 89 04 	lds	r22, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    255c:	8d e0       	ldi	r24, 0x0D	; 13
    255e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    2562:	60 91 89 04 	lds	r22, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    2566:	8a e0       	ldi	r24, 0x0A	; 10
    2568:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    256c:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    2570:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <g_sendAMmodulation>
    2574:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_Z13sendMorseToneh>
    2578:	b3 c0       	rjmp	.+358    	; 0x26e0 <__vector_8+0x326>
    257a:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	29 f0       	breq	.+10     	; 0x258c <__vector_8+0x1d2>
    2582:	60 91 89 04 	lds	r22, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    2586:	8d e0       	ldi	r24, 0x0D	; 13
    2588:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    258c:	60 91 89 04 	lds	r22, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    2590:	8a e0       	ldi	r24, 0x0A	; 10
    2592:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    2596:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    259a:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <g_sendAMmodulation>
    259e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_Z13sendMorseToneh>
    25a2:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <g_code_throttle>
    25a6:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <g_code_throttle+0x1>
    25aa:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    25ae:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ10__vector_8E7codeInc>
    25b2:	96 c0       	rjmp	.+300    	; 0x26e0 <__vector_8+0x326>
    25b4:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZZ10__vector_8E9ptt_delay>
    25b8:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZZ10__vector_8E9ptt_delay+0x1>
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	39 f4       	brne	.+14     	; 0x25ce <__vector_8+0x214>
    25c0:	84 e6       	ldi	r24, 0x64	; 100
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E9ptt_delay+0x1>
    25c8:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E9ptt_delay>
    25cc:	1c c0       	rjmp	.+56     	; 0x2606 <__vector_8+0x24c>
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <_ZZ10__vector_8E9ptt_delay+0x1>
    25d4:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZZ10__vector_8E9ptt_delay>
    25d8:	89 2b       	or	r24, r25
    25da:	a9 f4       	brne	.+42     	; 0x2606 <__vector_8+0x24c>
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	88 e0       	ldi	r24, 0x08	; 8
    25e0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    25e4:	10 c0       	rjmp	.+32     	; 0x2606 <__vector_8+0x24c>
    25e6:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZZ10__vector_8E11ptt_dropped>
    25ea:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZZ10__vector_8E11ptt_dropped+0x1>
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	51 f0       	breq	.+20     	; 0x2606 <__vector_8+0x24c>
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <_ZZ10__vector_8E11ptt_dropped+0x1>
    25f8:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ10__vector_8E11ptt_dropped>
    25fc:	89 2b       	or	r24, r25
    25fe:	19 f4       	brne	.+6      	; 0x2606 <__vector_8+0x24c>
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <g_on_the_air>
    2606:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_LED_enunciating>
    260a:	88 23       	and	r24, r24
    260c:	79 f1       	breq	.+94     	; 0x266c <__vector_8+0x2b2>
    260e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ10__vector_8E7codeInc>
    2612:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	01 f1       	breq	.+64     	; 0x265a <__vector_8+0x2a0>
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    2620:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ10__vector_8E7codeInc>
    2624:	89 2b       	or	r24, r25
    2626:	81 f5       	brne	.+96     	; 0x2688 <__vector_8+0x2ce>
    2628:	ae 01       	movw	r20, r28
    262a:	4e 5f       	subi	r20, 0xFE	; 254
    262c:	5f 4f       	sbci	r21, 0xFF	; 255
    262e:	be 01       	movw	r22, r28
    2630:	6f 5f       	subi	r22, 0xFF	; 255
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
    263c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ10__vector_8E3key>
    2640:	68 2f       	mov	r22, r24
    2642:	8d e0       	ldi	r24, 0x0D	; 13
    2644:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    2648:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <g_code_throttle>
    264c:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <g_code_throttle+0x1>
    2650:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    2654:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ10__vector_8E7codeInc>
    2658:	17 c0       	rjmp	.+46     	; 0x2688 <__vector_8+0x2ce>
    265a:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <g_code_throttle>
    265e:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <g_code_throttle+0x1>
    2662:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <_ZZ10__vector_8E7codeInc+0x1>
    2666:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ10__vector_8E7codeInc>
    266a:	0e c0       	rjmp	.+28     	; 0x2688 <__vector_8+0x2ce>
    266c:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ10__vector_8E3key>
    2670:	88 23       	and	r24, r24
    2672:	51 f0       	breq	.+20     	; 0x2688 <__vector_8+0x2ce>
    2674:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ10__vector_8E3key>
    2678:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	21 f0       	breq	.+8      	; 0x2688 <__vector_8+0x2ce>
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	8d e0       	ldi	r24, 0x0D	; 13
    2684:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	8a e0       	ldi	r24, 0x0A	; 10
    268c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    2690:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <g_sendAMmodulation>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_Z13sendMorseToneh>
    269a:	22 c0       	rjmp	.+68     	; 0x26e0 <__vector_8+0x326>
    269c:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_reset_button_held>
    26a0:	d3 ce       	rjmp	.-602    	; 0x2448 <__vector_8+0x8e>
    26a2:	40 91 94 05 	lds	r20, 0x0594	; 0x800594 <g_seconds_since_powerup>
    26a6:	50 91 95 05 	lds	r21, 0x0595	; 0x800595 <g_seconds_since_powerup+0x1>
    26aa:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <g_seconds_since_powerup+0x2>
    26ae:	70 91 97 05 	lds	r23, 0x0597	; 0x800597 <g_seconds_since_powerup+0x3>
    26b2:	43 30       	cpi	r20, 0x03	; 3
    26b4:	51 05       	cpc	r21, r1
    26b6:	61 05       	cpc	r22, r1
    26b8:	71 05       	cpc	r23, r1
    26ba:	09 f0       	breq	.+2      	; 0x26be <__vector_8+0x304>
    26bc:	c5 ce       	rjmp	.-630    	; 0x2448 <__vector_8+0x8e>
    26be:	b5 ce       	rjmp	.-662    	; 0x242a <__vector_8+0x70>
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_sync_pin_stable>
    26c6:	ef ce       	rjmp	.-546    	; 0x24a6 <__vector_8+0xec>
    26c8:	88 e0       	ldi	r24, 0x08	; 8
    26ca:	0e 94 33 02 	call	0x466	; 0x466 <_Z11digitalReadh>
    26ce:	81 11       	cpse	r24, r1
    26d0:	06 cf       	rjmp	.-500    	; 0x24de <__vector_8+0x124>
    26d2:	fa ce       	rjmp	.-524    	; 0x24c8 <__vector_8+0x10e>
    26d4:	88 e0       	ldi	r24, 0x08	; 8
    26d6:	0e 94 33 02 	call	0x466	; 0x466 <_Z11digitalReadh>
    26da:	81 11       	cpse	r24, r1
    26dc:	6b cf       	rjmp	.-298    	; 0x25b4 <__vector_8+0x1fa>
    26de:	83 cf       	rjmp	.-250    	; 0x25e6 <__vector_8+0x22c>
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	ff 91       	pop	r31
    26ea:	ef 91       	pop	r30
    26ec:	bf 91       	pop	r27
    26ee:	af 91       	pop	r26
    26f0:	9f 91       	pop	r25
    26f2:	8f 91       	pop	r24
    26f4:	7f 91       	pop	r23
    26f6:	6f 91       	pop	r22
    26f8:	5f 91       	pop	r21
    26fa:	4f 91       	pop	r20
    26fc:	3f 91       	pop	r19
    26fe:	2f 91       	pop	r18
    2700:	0f 90       	pop	r0
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	0f 90       	pop	r0
    2706:	1f 90       	pop	r1
    2708:	18 95       	reti

0000270a <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox, EventAction_t action)
{
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	00 d0       	rcall	.+0      	; 0x2714 <_Z11setupForFoxP5Fox_t13EventAction_t+0xa>
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	16 2f       	mov	r17, r22
	if(fox)
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	31 f0       	breq	.+12     	; 0x272a <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
	{
		if(*fox != INVALID_FOX)
    271e:	fc 01       	movw	r30, r24
    2720:	80 81       	ld	r24, Z
    2722:	82 31       	cpi	r24, 0x12	; 18
    2724:	11 f0       	breq	.+4      	; 0x272a <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
		{
			g_fox = *fox;
    2726:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <g_fox>
		}
	}

	g_current_epoch = rv3028_get_epoch();
    272a:	0e 94 26 2a 	call	0x544c	; 0x544c <_Z16rv3028_get_epochv>
    272e:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_current_epoch>
    2732:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_current_epoch+0x1>
    2736:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_current_epoch+0x2>
    273a:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_current_epoch+0x3>
	g_use_ptt_periodic_reset = FALSE;
    273e:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <g_use_ptt_periodic_reset>

	cli();
    2742:	f8 94       	cli

	switch(g_fox)
    2744:	e0 91 93 05 	lds	r30, 0x0593	; 0x800593 <g_fox>
    2748:	8e 2f       	mov	r24, r30
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	fc 01       	movw	r30, r24
    274e:	31 97       	sbiw	r30, 0x01	; 1
    2750:	e3 31       	cpi	r30, 0x13	; 19
    2752:	f1 05       	cpc	r31, r1
    2754:	08 f0       	brcs	.+2      	; 0x2758 <_Z11setupForFoxP5Fox_t13EventAction_t+0x4e>
    2756:	84 c0       	rjmp	.+264    	; 0x2860 <_Z11setupForFoxP5Fox_t13EventAction_t+0x156>
    2758:	ed 57       	subi	r30, 0x7D	; 125
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval_seconds = 60;
    2760:	8c e3       	ldi	r24, 0x3C	; 60
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    2768:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 300;
    276c:	8c e2       	ldi	r24, 0x2C	; 44
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    2774:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2778:	25 e0       	ldi	r18, 0x05	; 5
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <g_number_of_foxes+0x1>
    2780:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <g_number_of_foxes>
			g_fox_id_offset = 0;
    2784:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_fox_id_offset+0x1>
    2788:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    278c:	28 e0       	ldi	r18, 0x08	; 8
    278e:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <g_pattern_codespeed>
			g_id_interval_seconds = 300;
    2792:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    2796:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    279a:	90 c0       	rjmp	.+288    	; 0x28bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval_seconds = 12;
    279c:	8c e0       	ldi	r24, 0x0C	; 12
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    27a4:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    27a8:	8c e3       	ldi	r24, 0x3C	; 60
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    27b0:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    27b4:	85 e0       	ldi	r24, 0x05	; 5
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_number_of_foxes+0x1>
    27bc:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    27c0:	88 e0       	ldi	r24, 0x08	; 8
    27c2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1 - 1;
    27c6:	87 e0       	ldi	r24, 0x07	; 7
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_fox_id_offset+0x1>
    27ce:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_fox_id_offset>
			g_id_interval_seconds = 600;
    27d2:	88 e5       	ldi	r24, 0x58	; 88
    27d4:	92 e0       	ldi	r25, 0x02	; 2
    27d6:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    27da:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    27de:	6e c0       	rjmp	.+220    	; 0x28bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval_seconds = 12;
    27e0:	8c e0       	ldi	r24, 0x0C	; 12
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    27e8:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    27ec:	2c e3       	ldi	r18, 0x3C	; 60
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	30 93 5b 05 	sts	0x055B, r19	; 0x80055b <g_cycle_period_seconds+0x1>
    27f4:	20 93 5a 05 	sts	0x055A, r18	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    27f8:	25 e0       	ldi	r18, 0x05	; 5
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <g_number_of_foxes+0x1>
    2800:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    2804:	2f e0       	ldi	r18, 0x0F	; 15
    2806:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    280a:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_fox_id_offset+0x1>
    280e:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_fox_id_offset>
			g_id_interval_seconds = 600;
    2812:	88 e5       	ldi	r24, 0x58	; 88
    2814:	92 e0       	ldi	r25, 0x02	; 2
    2816:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    281a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    281e:	4e c0       	rjmp	.+156    	; 0x28bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>

		case REPORT_BATTERY:
		{
			g_on_air_interval_seconds = 30;
    2820:	8e e1       	ldi	r24, 0x1E	; 30
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    2828:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    282c:	8c e3       	ldi	r24, 0x3C	; 60
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    2834:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
			g_number_of_foxes = 2;
    2838:	22 e0       	ldi	r18, 0x02	; 2
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <g_number_of_foxes+0x1>
    2840:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    2844:	28 e0       	ldi	r18, 0x08	; 8
    2846:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <g_pattern_codespeed>
			g_fox_id_offset = REPORT_BATTERY - 1;
    284a:	22 e1       	ldi	r18, 0x12	; 18
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	30 93 57 05 	sts	0x0557, r19	; 0x800557 <g_fox_id_offset+0x1>
    2852:	20 93 56 05 	sts	0x0556, r18	; 0x800556 <g_fox_id_offset>
			g_id_interval_seconds = 60;
    2856:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    285a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
		}
		break;
    285e:	2e c0       	rjmp	.+92     	; 0x28bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x1b2>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    2860:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    2864:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_use_ptt_periodic_reset>
			g_number_of_foxes = 1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_number_of_foxes+0x1>
    2870:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    2874:	88 e0       	ldi	r24, 0x08	; 8
    2876:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_pattern_codespeed>
			g_id_interval_seconds = g_ptt_periodic_reset_enabled ? 60 : 600;
    287a:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    287e:	81 11       	cpse	r24, r1
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <_Z11setupForFoxP5Fox_t13EventAction_t+0x17e>
    2882:	88 e5       	ldi	r24, 0x58	; 88
    2884:	92 e0       	ldi	r25, 0x02	; 2
    2886:	02 c0       	rjmp	.+4      	; 0x288c <_Z11setupForFoxP5Fox_t13EventAction_t+0x182>
    2888:	8c e3       	ldi	r24, 0x3C	; 60
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_id_interval_seconds+0x1>
    2890:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_id_interval_seconds>
			g_on_air_interval_seconds = g_id_interval_seconds;
    2894:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_id_interval_seconds>
    2898:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    289c:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_on_air_interval_seconds+0x1>
    28a0:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_on_air_interval_seconds>
			g_fox_id_offset = 0;
    28a4:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_fox_id_offset+0x1>
    28a8:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_fox_id_offset>
			g_cycle_period_seconds = g_id_interval_seconds;
    28ac:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_id_interval_seconds>
    28b0:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_id_interval_seconds+0x1>
    28b4:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_cycle_period_seconds+0x1>
    28b8:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_cycle_period_seconds>
		}
		break;
	}

	if(action == START_NOTHING)
    28bc:	11 11       	cpse	r17, r1
    28be:	06 c0       	rjmp	.+12     	; 0x28cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x1c2>
	{
		g_use_rtc_for_startstop = FALSE;
    28c0:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
    28ca:	e0 c0       	rjmp	.+448    	; 0x2a8c <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else if(action == START_EVENT_NOW)
    28cc:	11 30       	cpi	r17, 0x01	; 1
    28ce:	99 f4       	brne	.+38     	; 0x28f6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ec>
	{
		g_fox_counter = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    28d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
		g_seconds_since_sync = 0;                                           /* Total elapsed time since synchronization */
    28dc:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_seconds_since_sync>
    28e0:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_seconds_since_sync+0x1>
    28e4:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_seconds_since_sync+0x2>
    28e8:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    28ec:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    28f0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_transmissions_disabled>
    28f4:	cb c0       	rjmp	.+406    	; 0x2a8c <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else if(action == START_TRANSMISSIONS_NOW)                              /* Immediately start transmitting, regardless RTC or time slot */
    28f6:	12 30       	cpi	r17, 0x02	; 2
    28f8:	b9 f5       	brne	.+110    	; 0x2968 <_Z11setupForFoxP5Fox_t13EventAction_t+0x25e>
	{
		g_fox_counter = MAX(1, g_fox - g_fox_id_offset);
    28fa:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    28fe:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <g_fox_id_offset>
    2902:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <g_fox_id_offset+0x1>
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	82 1b       	sub	r24, r18
    290a:	93 0b       	sbc	r25, r19
    290c:	18 16       	cp	r1, r24
    290e:	19 06       	cpc	r1, r25
    2910:	14 f0       	brlt	.+4      	; 0x2916 <_Z11setupForFoxP5Fox_t13EventAction_t+0x20c>
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    291a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds;           /* Total elapsed time since start of event */
    291e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <g_fox_counter>
    2922:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <g_fox_counter+0x1>
    2926:	40 91 5c 05 	lds	r20, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    292a:	50 91 5d 05 	lds	r21, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    292e:	21 50       	subi	r18, 0x01	; 1
    2930:	31 09       	sbc	r19, r1
    2932:	24 9f       	mul	r18, r20
    2934:	c0 01       	movw	r24, r0
    2936:	25 9f       	mul	r18, r21
    2938:	90 0d       	add	r25, r0
    293a:	34 9f       	mul	r19, r20
    293c:	90 0d       	add	r25, r0
    293e:	11 24       	eor	r1, r1
    2940:	09 2e       	mov	r0, r25
    2942:	00 0c       	add	r0, r0
    2944:	aa 0b       	sbc	r26, r26
    2946:	bb 0b       	sbc	r27, r27
    2948:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_seconds_since_sync>
    294c:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_seconds_since_sync+0x1>
    2950:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <g_seconds_since_sync+0x2>
    2954:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    2958:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    295c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_transmissions_disabled>
		g_initialize_fox_transmissions = INIT_EVENT_STARTING_NOW;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_initialize_fox_transmissions>
    2966:	92 c0       	rjmp	.+292    	; 0x2a8c <_Z11setupForFoxP5Fox_t13EventAction_t+0x382>
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    2968:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    296c:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2970:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2974:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2978:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    297c:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2980:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2984:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2988:	48 17       	cp	r20, r24
    298a:	59 07       	cpc	r21, r25
    298c:	6a 07       	cpc	r22, r26
    298e:	7b 07       	cpc	r23, r27
    2990:	08 f0       	brcs	.+2      	; 0x2994 <_Z11setupForFoxP5Fox_t13EventAction_t+0x28a>
    2992:	69 c0       	rjmp	.+210    	; 0x2a66 <_Z11setupForFoxP5Fox_t13EventAction_t+0x35c>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    2994:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2998:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    299c:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    29a0:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    29a4:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    29a8:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    29ac:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    29b0:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    29b4:	84 1b       	sub	r24, r20
    29b6:	95 0b       	sbc	r25, r21
    29b8:	a6 0b       	sbc	r26, r22
    29ba:	b7 0b       	sbc	r27, r23
    29bc:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <g_seconds_since_sync>
    29c0:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <g_seconds_since_sync+0x1>
    29c4:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <g_seconds_since_sync+0x2>
    29c8:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <g_seconds_since_sync+0x3>
			g_fox_counter = CLAMP(1, 1 + ((g_seconds_since_sync % g_cycle_period_seconds) / g_on_air_interval_seconds), g_number_of_foxes);
    29cc:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <g_seconds_since_sync>
    29d0:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <g_seconds_since_sync+0x1>
    29d4:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <g_seconds_since_sync+0x2>
    29d8:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <g_seconds_since_sync+0x3>
    29dc:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_cycle_period_seconds>
    29e0:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <g_cycle_period_seconds+0x1>
    29e4:	00 91 5c 05 	lds	r16, 0x055C	; 0x80055c <g_on_air_interval_seconds>
    29e8:	10 91 5d 05 	lds	r17, 0x055D	; 0x80055d <g_on_air_interval_seconds+0x1>
    29ec:	03 2e       	mov	r0, r19
    29ee:	00 0c       	add	r0, r0
    29f0:	44 0b       	sbc	r20, r20
    29f2:	55 0b       	sbc	r21, r21
    29f4:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__divmodsi4>
    29f8:	98 01       	movw	r18, r16
    29fa:	11 0f       	add	r17, r17
    29fc:	44 0b       	sbc	r20, r20
    29fe:	55 0b       	sbc	r21, r21
    2a00:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__divmodsi4>
    2a04:	ba 01       	movw	r22, r20
    2a06:	a9 01       	movw	r20, r18
    2a08:	4f 5f       	subi	r20, 0xFF	; 255
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a10:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_number_of_foxes>
    2a14:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_number_of_foxes+0x1>
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	09 2e       	mov	r0, r25
    2a22:	00 0c       	add	r0, r0
    2a24:	aa 0b       	sbc	r26, r26
    2a26:	bb 0b       	sbc	r27, r27
    2a28:	84 17       	cp	r24, r20
    2a2a:	95 07       	cpc	r25, r21
    2a2c:	a6 07       	cpc	r26, r22
    2a2e:	b7 07       	cpc	r27, r23
    2a30:	3c f4       	brge	.+14     	; 0x2a40 <_Z11setupForFoxP5Fox_t13EventAction_t+0x336>
    2a32:	29 81       	ldd	r18, Y+1	; 0x01
    2a34:	3a 81       	ldd	r19, Y+2	; 0x02
    2a36:	c9 01       	movw	r24, r18
    2a38:	33 0f       	add	r19, r19
    2a3a:	aa 0b       	sbc	r26, r26
    2a3c:	bb 0b       	sbc	r27, r27
    2a3e:	0b c0       	rjmp	.+22     	; 0x2a56 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    2a40:	db 01       	movw	r26, r22
    2a42:	ca 01       	movw	r24, r20
    2a44:	14 16       	cp	r1, r20
    2a46:	15 06       	cpc	r1, r21
    2a48:	16 06       	cpc	r1, r22
    2a4a:	17 06       	cpc	r1, r23
    2a4c:	24 f0       	brlt	.+8      	; 0x2a56 <_Z11setupForFoxP5Fox_t13EventAction_t+0x34c>
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a0 e0       	ldi	r26, 0x00	; 0
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    2a5a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
			g_initialize_fox_transmissions = INIT_EVENT_IN_PROGRESS_WITH_STARTFINISH_TIMES;
    2a5e:	83 e0       	ldi	r24, 0x03	; 3
    2a60:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_initialize_fox_transmissions>
    2a64:	0e c0       	rjmp	.+28     	; 0x2a82 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    2a66:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <g_seconds_since_sync>
    2a6a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <g_seconds_since_sync+0x1>
    2a6e:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <g_seconds_since_sync+0x2>
    2a72:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_fox_counter+0x1>
    2a7e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_fox_counter>
		}

		g_use_rtc_for_startstop = TRUE;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    2a88:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
	}

	g_fox_tone_offset = g_fox_counter;
    2a8c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_fox_counter>
    2a90:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_fox_counter+0x1>
    2a94:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_fox_tone_offset+0x1>
    2a98:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_fox_tone_offset>

	sendMorseTone(OFF);
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_Z13sendMorseToneh>
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    2aa2:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <g_code_throttle+0x1>
    2aa6:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <g_code_throttle>
	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    2aaa:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2aae:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_config_error>
	digitalWrite(PIN_LED2, OFF);            /*  LED Off - in case it was left on */
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	8d e0       	ldi	r24, 0x0D	; 13
    2ab6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	8a e0       	ldi	r24, 0x0A	; 10
    2abe:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    2ac2:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    2ac6:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    2aca:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_config_error>

	sei();
    2ace:	78 94       	sei
}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	08 95       	ret

00002ade <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;
    2ade:	8f ef       	ldi	r24, 0xFF	; 255
    2ae0:	9f ef       	ldi	r25, 0xFF	; 255

	while((ADCSRA & (1 << ADSC)) && c)
    2ae2:	ea e7       	ldi	r30, 0x7A	; 122
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	20 81       	ld	r18, Z
    2ae8:	26 ff       	sbrs	r18, 6
    2aea:	04 c0       	rjmp	.+8      	; 0x2af4 <_Z7readADCv+0x16>
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	11 f0       	breq	.+4      	; 0x2af4 <_Z7readADCv+0x16>
	{
		c--;    /* Just wait for ADC to finish. */
    2af0:	01 97       	sbiw	r24, 0x01	; 1
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;

	while((ADCSRA & (1 << ADSC)) && c)
    2af2:	f9 cf       	rjmp	.-14     	; 0x2ae6 <_Z7readADCv+0x8>
	{
		c--;    /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    2af4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2af8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    2afc:	ea e7       	ldi	r30, 0x7A	; 122
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	90 81       	ld	r25, Z
    2b02:	90 64       	ori	r25, 0x40	; 64
    2b04:	90 83       	st	Z, r25
	return( result);
}
    2b06:	c9 01       	movw	r24, r18
    2b08:	08 95       	ret

00002b0a <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    2b12:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <g_atmega_temp_calibration>
    2b16:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <g_atmega_temp_calibration+0x1>
    2b1a:	07 2e       	mov	r0, r23
    2b1c:	00 0c       	add	r0, r0
    2b1e:	88 0b       	sbc	r24, r24
    2b20:	99 0b       	sbc	r25, r25
    2b22:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <__floatsisf>
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__divsf3>
    2b32:	06 2f       	mov	r16, r22
    2b34:	17 2f       	mov	r17, r23
    2b36:	d8 2f       	mov	r29, r24
    2b38:	c9 2f       	mov	r28, r25
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	48 e4       	ldi	r20, 0x48	; 72
    2b40:	53 e4       	ldi	r21, 0x43	; 67
    2b42:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__gesf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	6c f0       	brlt	.+26     	; 0x2b64 <_Z7getTempv+0x5a>
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	48 e4       	ldi	r20, 0x48	; 72
    2b50:	53 ec       	ldi	r21, 0xC3	; 195
    2b52:	60 2f       	mov	r22, r16
    2b54:	71 2f       	mov	r23, r17
    2b56:	8d 2f       	mov	r24, r29
    2b58:	9c 2f       	mov	r25, r28
    2b5a:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <__cmpsf2>
    2b5e:	88 23       	and	r24, r24
    2b60:	34 f0       	brlt	.+12     	; 0x2b6e <_Z7getTempv+0x64>
    2b62:	09 c0       	rjmp	.+18     	; 0x2b76 <_Z7getTempv+0x6c>
    2b64:	00 e0       	ldi	r16, 0x00	; 0
    2b66:	10 e0       	ldi	r17, 0x00	; 0
    2b68:	d8 e4       	ldi	r29, 0x48	; 72
    2b6a:	c3 e4       	ldi	r28, 0x43	; 67
    2b6c:	04 c0       	rjmp	.+8      	; 0x2b76 <_Z7getTempv+0x6c>
    2b6e:	00 e0       	ldi	r16, 0x00	; 0
    2b70:	10 e0       	ldi	r17, 0x00	; 0
    2b72:	d8 e4       	ldi	r29, 0x48	; 72
    2b74:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    2b76:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    2b7a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z7readADCv>
    2b7e:	bc 01       	movw	r22, r24
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__floatunsisf>
    2b88:	2e ea       	ldi	r18, 0xAE	; 174
    2b8a:	37 e2       	ldi	r19, 0x27	; 39
    2b8c:	42 ea       	ldi	r20, 0xA2	; 162
    2b8e:	53 e4       	ldi	r21, 0x43	; 67
    2b90:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    2b94:	26 ef       	ldi	r18, 0xF6	; 246
    2b96:	38 e2       	ldi	r19, 0x28	; 40
    2b98:	4c e9       	ldi	r20, 0x9C	; 156
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__divsf3>
    2ba0:	20 2f       	mov	r18, r16
    2ba2:	31 2f       	mov	r19, r17
    2ba4:	4d 2f       	mov	r20, r29
    2ba6:	5c 2f       	mov	r21, r28
    2ba8:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    2bac:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <round>
}
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	08 95       	ret

00002bba <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    2bba:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z7readADCv>
	uint16_t hold = readADC();
    2bbe:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    2bc2:	9c 01       	movw	r18, r24
    2bc4:	ad ee       	ldi	r26, 0xED	; 237
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	68 94       	set
    2bd2:	16 f8       	bld	r1, 6
    2bd4:	b6 95       	lsr	r27
    2bd6:	a7 95       	ror	r26
    2bd8:	97 95       	ror	r25
    2bda:	87 95       	ror	r24
    2bdc:	16 94       	lsr	r1
    2bde:	d1 f7       	brne	.-12     	; 0x2bd4 <_Z10getVoltagev+0x1a>
	return(hold);
}
    2be0:	08 95       	ret

00002be2 <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    2be2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    2be6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    2bea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    2bee:	81 11       	cpse	r24, r1
    2bf0:	22 c0       	rjmp	.+68     	; 0x2c36 <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    2bf2:	ec e7       	ldi	r30, 0x7C	; 124
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	86 60       	ori	r24, 0x06	; 6
    2bfa:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 6c       	ori	r24, 0xC0	; 192
    2c00:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    2c02:	80 81       	ld	r24, Z
    2c04:	80 62       	ori	r24, 0x20	; 32
    2c06:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
			ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
			ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    2c08:	ea e7       	ldi	r30, 0x7A	; 122
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	86 60       	ori	r24, 0x06	; 6
    2c10:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    2c12:	80 81       	ld	r24, Z
    2c14:	80 62       	ori	r24, 0x20	; 32
    2c16:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 60       	ori	r24, 0x08	; 8
    2c1c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 68       	ori	r24, 0x80	; 128
    2c22:	80 83       	st	Z, r24

		if(enableSampling)
    2c24:	66 23       	and	r22, r22
    2c26:	21 f1       	breq	.+72     	; 0x2c70 <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 60       	ori	r24, 0x08	; 8
    2c2c:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    2c2e:	80 81       	ld	r24, Z
    2c30:	80 64       	ori	r24, 0x40	; 64
    2c32:	80 83       	st	Z, r24
    2c34:	08 95       	ret
		/* The internal temperature has to be used
		 * with the internal reference of 1.1V.
		 * Channel 8 can not be selected with
		 * the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    2c36:	ec e7       	ldi	r30, 0x7C	; 124
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	90 81       	ld	r25, Z
    2c3c:	90 6c       	ori	r25, 0xC0	; 192
    2c3e:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	21 f4       	brne	.+8      	; 0x2c4c <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    2c44:	80 81       	ld	r24, Z
    2c46:	88 60       	ori	r24, 0x08	; 8
    2c48:	80 83       	st	Z, r24
    2c4a:	05 c0       	rjmp	.+10     	; 0x2c56 <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    2c4c:	ec e7       	ldi	r30, 0x7C	; 124
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	87 60       	ori	r24, 0x07	; 7
    2c54:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 * by dividing by 128. Assumes that the
		 * standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    2c56:	ea e7       	ldi	r30, 0x7A	; 122
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	87 60       	ori	r24, 0x07	; 7
    2c5e:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    2c60:	80 81       	ld	r24, Z
    2c62:	80 68       	ori	r24, 0x80	; 128
    2c64:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    2c66:	80 81       	ld	r24, Z
    2c68:	80 64       	ori	r24, 0x40	; 64
    2c6a:	80 83       	st	Z, r24
		readADC();
    2c6c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_Z7readADCv>
    2c70:	08 95       	ret

00002c72 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2c72:	fc 01       	movw	r30, r24
	while(*s)
    2c74:	21 91       	ld	r18, Z+
    2c76:	22 23       	and	r18, r18
    2c78:	41 f0       	breq	.+16     	; 0x2c8a <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	20 53       	subi	r18, 0x30	; 48
    2c7e:	31 09       	sbc	r19, r1
    2c80:	2a 30       	cpi	r18, 0x0A	; 10
    2c82:	31 05       	cpc	r19, r1
    2c84:	b8 f3       	brcs	.-18     	; 0x2c74 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	08 95       	ret
		}
	}

	return( TRUE);
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
}
    2c8c:	08 95       	ret

00002c8e <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    2c8e:	cf 93       	push	r28
    2c90:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2c92:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z23clockConfigurationCheckv>

	cli();
    2c96:	f8 94       	cli
	if(activationSource == POWER_UP)
    2c98:	c1 11       	cpse	r28, r1
    2c9a:	0e c0       	rjmp	.+28     	; 0x2cb8 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    2c9c:	82 30       	cpi	r24, 0x02	; 2
    2c9e:	31 f4       	brne	.+12     	; 0x2cac <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2caa:	3e c0       	rjmp	.+124    	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    2cac:	63 e0       	ldi	r22, 0x03	; 3
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cb6:	38 c0       	rjmp	.+112    	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    2cb8:	c2 30       	cpi	r28, 0x02	; 2
    2cba:	c9 f4       	brne	.+50     	; 0x2cee <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	31 f4       	brne	.+12     	; 0x2ccc <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2cc0:	61 e0       	ldi	r22, 0x01	; 1
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cca:	2e c0       	rjmp	.+92     	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	19 f0       	breq	.+6      	; 0x2cd6 <_Z13startEventNow19EventActionSource_t+0x48>
    2cd0:	83 50       	subi	r24, 0x03	; 3
    2cd2:	82 30       	cpi	r24, 0x02	; 2
    2cd4:	30 f4       	brcc	.+12     	; 0x2ce2 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2ce0:	23 c0       	rjmp	.+70     	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    2ce2:	63 e0       	ldi	r22, 0x03	; 3
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cec:	1d c0       	rjmp	.+58     	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	31 f4       	brne	.+12     	; 0x2cfe <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    2cf2:	61 e0       	ldi	r22, 0x01	; 1
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2cfc:	15 c0       	rjmp	.+42     	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    2cfe:	81 30       	cpi	r24, 0x01	; 1
    2d00:	31 f4       	brne	.+12     	; 0x2d0e <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    2d02:	62 e0       	ldi	r22, 0x02	; 2
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d0c:	0d c0       	rjmp	.+26     	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    2d0e:	84 30       	cpi	r24, 0x04	; 4
    2d10:	31 f4       	brne	.+12     	; 0x2d1e <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    2d12:	63 e0       	ldi	r22, 0x03	; 3
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d1c:	05 c0       	rjmp	.+10     	; 0x2d28 <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    2d1e:	63 e0       	ldi	r22, 0x03	; 3
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    2d28:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
	sei();
    2d2c:	78 94       	sei

/*	g_current_epoch = rv3028_get_epoch();
 *	lb_send_string((char*)"Sync OK\n", FALSE); */
}
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    2d32:	cf 93       	push	r28
    2d34:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    2d36:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z23clockConfigurationCheckv>

	cli();
    2d3a:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    2d3c:	c2 30       	cpi	r28, 0x02	; 2
    2d3e:	31 f4       	brne	.+12     	; 0x2d4c <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d4a:	15 c0       	rjmp	.+42     	; 0x2d76 <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	31 f4       	brne	.+12     	; 0x2d5c <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d5a:	08 c0       	rjmp	.+16     	; 0x2d6c <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    2d5c:	84 30       	cpi	r24, 0x04	; 4
    2d5e:	31 f4       	brne	.+12     	; 0x2d6c <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    2d76:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2d7a:	82 30       	cpi	r24, 0x02	; 2
    2d7c:	21 f4       	brne	.+8      	; 0x2d86 <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	8d e0       	ldi	r24, 0x0D	; 13
    2d82:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
	}
}
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret

00002d8a <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2d8a:	1f 92       	push	r1
    2d8c:	0f 92       	push	r0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	0f 92       	push	r0
    2d92:	11 24       	eor	r1, r1
    2d94:	2f 93       	push	r18
    2d96:	3f 93       	push	r19
    2d98:	4f 93       	push	r20
    2d9a:	5f 93       	push	r21
    2d9c:	6f 93       	push	r22
    2d9e:	7f 93       	push	r23
    2da0:	8f 93       	push	r24
    2da2:	9f 93       	push	r25
    2da4:	af 93       	push	r26
    2da6:	bf 93       	push	r27
    2da8:	ef 93       	push	r30
    2daa:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    2dac:	84 e0       	ldi	r24, 0x04	; 4
    2dae:	0e 94 33 02 	call	0x466	; 0x466 <_Z11digitalReadh>

	g_sync_pin_timer = 0;
    2db2:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_sync_pin_timer+0x1>
    2db6:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_sync_pin_timer>

	if(pinVal)  /* Sync is high = button released */
    2dba:	88 23       	and	r24, r24
    2dbc:	d9 f0       	breq	.+54     	; 0x2df4 <__vector_5+0x6a>
	{
		if(g_transmissions_disabled)
    2dbe:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    2dc2:	88 23       	and	r24, r24
    2dc4:	71 f0       	breq	.+28     	; 0x2de2 <__vector_5+0x58>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2dc6:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2dca:	82 30       	cpi	r24, 0x02	; 2
    2dcc:	99 f4       	brne	.+38     	; 0x2df4 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    2dce:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	8d e0       	ldi	r24, 0x0D	; 13
    2dd6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
				startEventNow(PUSHBUTTON);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z13startEventNow19EventActionSource_t>
    2de0:	09 c0       	rjmp	.+18     	; 0x2df4 <__vector_5+0x6a>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    2de2:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_sync_pin_stable>
    2de6:	82 30       	cpi	r24, 0x02	; 2
    2de8:	29 f4       	brne	.+10     	; 0x2df4 <__vector_5+0x6a>
			{
				g_sync_pin_stable = UNSTABLE;
    2dea:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_sync_pin_stable>
				stopEventNow(PUSHBUTTON);
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_Z12stopEventNow19EventActionSource_t>
			}
		}
	}
}
    2df4:	ff 91       	pop	r31
    2df6:	ef 91       	pop	r30
    2df8:	bf 91       	pop	r27
    2dfa:	af 91       	pop	r26
    2dfc:	9f 91       	pop	r25
    2dfe:	8f 91       	pop	r24
    2e00:	7f 91       	pop	r23
    2e02:	6f 91       	pop	r22
    2e04:	5f 91       	pop	r21
    2e06:	4f 91       	pop	r20
    2e08:	3f 91       	pop	r19
    2e0a:	2f 91       	pop	r18
    2e0c:	0f 90       	pop	r0
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	0f 90       	pop	r0
    2e12:	1f 90       	pop	r1
    2e14:	18 95       	reti

00002e16 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	g_current_epoch = rv3028_get_epoch();
    2e16:	0e 94 26 2a 	call	0x544c	; 0x544c <_Z16rv3028_get_epochv>
    2e1a:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_current_epoch>
    2e1e:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_current_epoch+0x1>
    2e22:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_current_epoch+0x2>
    2e26:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    2e2a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_messages_text+0x15>
    2e2e:	81 11       	cpse	r24, r1
    2e30:	05 c0       	rjmp	.+10     	; 0x2e3c <_Z18reportConfigErrorsv+0x26>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    2e32:	65 e0       	ldi	r22, 0x05	; 5
    2e34:	8c e9       	ldi	r24, 0x9C	; 156
    2e36:	95 e0       	ldi	r25, 0x05	; 5
    2e38:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    2e3c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2e40:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2e44:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2e48:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2e4c:	81 15       	cp	r24, r1
    2e4e:	96 46       	sbci	r25, 0x66	; 102
    2e50:	ae 4e       	sbci	r26, 0xEE	; 238
    2e52:	bf 45       	sbci	r27, 0x5F	; 95
    2e54:	28 f4       	brcc	.+10     	; 0x2e60 <_Z18reportConfigErrorsv+0x4a>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2e56:	62 e0       	ldi	r22, 0x02	; 2
    2e58:	8c e9       	ldi	r24, 0x9C	; 156
    2e5a:	95 e0       	ldi	r25, 0x05	; 5
    2e5c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    2e60:	40 91 83 05 	lds	r20, 0x0583	; 0x800583 <g_event_finish_epoch>
    2e64:	50 91 84 05 	lds	r21, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    2e68:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    2e6c:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    2e70:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2e74:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2e78:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2e7c:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2e80:	48 17       	cp	r20, r24
    2e82:	59 07       	cpc	r21, r25
    2e84:	6a 07       	cpc	r22, r26
    2e86:	7b 07       	cpc	r23, r27
    2e88:	00 f5       	brcc	.+64     	; 0x2eca <_Z18reportConfigErrorsv+0xb4>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2e8a:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    2e8e:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2e92:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2e96:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2e9a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2e9e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2ea2:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2ea6:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2eaa:	48 17       	cp	r20, r24
    2eac:	59 07       	cpc	r21, r25
    2eae:	6a 07       	cpc	r22, r26
    2eb0:	7b 07       	cpc	r23, r27
    2eb2:	28 f4       	brcc	.+10     	; 0x2ebe <_Z18reportConfigErrorsv+0xa8>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    2eb4:	63 e0       	ldi	r22, 0x03	; 3
    2eb6:	8c e9       	ldi	r24, 0x9C	; 156
    2eb8:	95 e0       	ldi	r25, 0x05	; 5
    2eba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    2ebe:	64 e0       	ldi	r22, 0x04	; 4
    2ec0:	8c e9       	ldi	r24, 0x9C	; 156
    2ec2:	95 e0       	ldi	r25, 0x05	; 5
    2ec4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    2ec8:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    2eca:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    2ece:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    2ed2:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    2ed6:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    2eda:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    2ede:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    2ee2:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    2ee6:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    2eea:	48 17       	cp	r20, r24
    2eec:	59 07       	cpc	r21, r25
    2eee:	6a 07       	cpc	r22, r26
    2ef0:	7b 07       	cpc	r23, r27
    2ef2:	28 f4       	brcc	.+10     	; 0x2efe <_Z18reportConfigErrorsv+0xe8>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    2ef4:	61 e0       	ldi	r22, 0x01	; 1
    2ef6:	81 e3       	ldi	r24, 0x31	; 49
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    2efe:	08 95       	ret

00002f00 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    2f00:	2f 92       	push	r2
    2f02:	3f 92       	push	r3
    2f04:	4f 92       	push	r4
    2f06:	5f 92       	push	r5
    2f08:	6f 92       	push	r6
    2f0a:	7f 92       	push	r7
    2f0c:	8f 92       	push	r8
    2f0e:	9f 92       	push	r9
    2f10:	af 92       	push	r10
    2f12:	bf 92       	push	r11
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	2c 97       	sbiw	r28, 0x0c	; 12
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	2b 01       	movw	r4, r22
    2f36:	3c 01       	movw	r6, r24
    2f38:	49 01       	movw	r8, r18
    2f3a:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2f3c:	62 17       	cp	r22, r18
    2f3e:	73 07       	cpc	r23, r19
    2f40:	84 07       	cpc	r24, r20
    2f42:	95 07       	cpc	r25, r21
    2f44:	50 f0       	brcs	.+20     	; 0x2f5a <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2f46:	e1 14       	cp	r14, r1
    2f48:	f1 04       	cpc	r15, r1
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <_Z14reportTimeTillmmPKcS0_+0x4e>
    2f4c:	04 c1       	rjmp	.+520    	; 0x3156 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    2f4e:	61 e0       	ldi	r22, 0x01	; 1
    2f50:	c7 01       	movw	r24, r14
    2f52:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	ff c0       	rjmp	.+510    	; 0x3158 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    2f5a:	01 15       	cp	r16, r1
    2f5c:	11 05       	cpc	r17, r1
    2f5e:	21 f0       	breq	.+8      	; 0x2f68 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    2f60:	61 e0       	ldi	r22, 0x01	; 1
    2f62:	c8 01       	movw	r24, r16
    2f64:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2f68:	75 01       	movw	r14, r10
    2f6a:	64 01       	movw	r12, r8
    2f6c:	c4 18       	sub	r12, r4
    2f6e:	d5 08       	sbc	r13, r5
    2f70:	e6 08       	sbc	r14, r6
    2f72:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2f74:	c7 01       	movw	r24, r14
    2f76:	b6 01       	movw	r22, r12
    2f78:	20 e8       	ldi	r18, 0x80	; 128
    2f7a:	33 e3       	ldi	r19, 0x33	; 51
    2f7c:	41 ee       	ldi	r20, 0xE1	; 225
    2f7e:	51 e0       	ldi	r21, 0x01	; 1
    2f80:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__udivmodsi4>
    2f84:	29 01       	movw	r4, r18
    2f86:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2f88:	44 27       	eor	r20, r20
    2f8a:	55 27       	eor	r21, r21
    2f8c:	60 e8       	ldi	r22, 0x80	; 128
    2f8e:	73 e3       	ldi	r23, 0x33	; 51
    2f90:	81 ee       	ldi	r24, 0xE1	; 225
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__mulsi3>
    2f98:	c6 1a       	sub	r12, r22
    2f9a:	d7 0a       	sbc	r13, r23
    2f9c:	e8 0a       	sbc	r14, r24
    2f9e:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2fa0:	c7 01       	movw	r24, r14
    2fa2:	b6 01       	movw	r22, r12
    2fa4:	20 e8       	ldi	r18, 0x80	; 128
    2fa6:	31 e5       	ldi	r19, 0x51	; 81
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__udivmodsi4>
    2fb0:	49 01       	movw	r8, r18
    2fb2:	5a 01       	movw	r10, r20
    2fb4:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2fb6:	44 27       	eor	r20, r20
    2fb8:	55 27       	eor	r21, r21
    2fba:	60 e8       	ldi	r22, 0x80	; 128
    2fbc:	71 e5       	ldi	r23, 0x51	; 81
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__mulsi3>
    2fc6:	c6 1a       	sub	r12, r22
    2fc8:	d7 0a       	sbc	r13, r23
    2fca:	e8 0a       	sbc	r14, r24
    2fcc:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    2fce:	c7 01       	movw	r24, r14
    2fd0:	b6 01       	movw	r22, r12
    2fd2:	20 e1       	ldi	r18, 0x10	; 16
    2fd4:	3e e0       	ldi	r19, 0x0E	; 14
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__udivmodsi4>
    2fde:	29 83       	std	Y+1, r18	; 0x01
    2fe0:	3a 83       	std	Y+2, r19	; 0x02
    2fe2:	4b 83       	std	Y+3, r20	; 0x03
    2fe4:	5c 83       	std	Y+4, r21	; 0x04
    2fe6:	29 81       	ldd	r18, Y+1	; 0x01
    2fe8:	3a 81       	ldd	r19, Y+2	; 0x02
    2fea:	3a 87       	std	Y+10, r19	; 0x0a
    2fec:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    2fee:	29 81       	ldd	r18, Y+1	; 0x01
    2ff0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ff2:	4b 81       	ldd	r20, Y+3	; 0x03
    2ff4:	5c 81       	ldd	r21, Y+4	; 0x04
    2ff6:	44 27       	eor	r20, r20
    2ff8:	55 27       	eor	r21, r21
    2ffa:	a0 e1       	ldi	r26, 0x10	; 16
    2ffc:	be e0       	ldi	r27, 0x0E	; 14
    2ffe:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <__muluhisi3>
    3002:	c6 1a       	sub	r12, r22
    3004:	d7 0a       	sbc	r13, r23
    3006:	e8 0a       	sbc	r14, r24
    3008:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    300a:	c7 01       	movw	r24, r14
    300c:	b6 01       	movw	r22, r12
    300e:	2c e3       	ldi	r18, 0x3C	; 60
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__udivmodsi4>
    301a:	2d 83       	std	Y+5, r18	; 0x05
    301c:	3e 83       	std	Y+6, r19	; 0x06
    301e:	4f 83       	std	Y+7, r20	; 0x07
    3020:	58 87       	std	Y+8, r21	; 0x08
    3022:	0d 81       	ldd	r16, Y+5	; 0x05
    3024:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    3026:	2c e3       	ldi	r18, 0x3C	; 60
    3028:	20 9f       	mul	r18, r16
    302a:	c0 01       	movw	r24, r0
    302c:	21 9f       	mul	r18, r17
    302e:	90 0d       	add	r25, r0
    3030:	11 24       	eor	r1, r1
    3032:	a6 01       	movw	r20, r12
    3034:	48 1b       	sub	r20, r24
    3036:	59 0b       	sbc	r21, r25
    3038:	5c 87       	std	Y+12, r21	; 0x0c
    303a:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    303c:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_tempStr>

		if(years)
    3040:	41 14       	cp	r4, r1
    3042:	51 04       	cpc	r5, r1
    3044:	b9 f0       	breq	.+46     	; 0x3074 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    3046:	5f 92       	push	r5
    3048:	4f 92       	push	r4
    304a:	83 e4       	ldi	r24, 0x43	; 67
    304c:	91 e0       	ldi	r25, 0x01	; 1
    304e:	9f 93       	push	r25
    3050:	8f 93       	push	r24
    3052:	8b ed       	ldi	r24, 0xDB	; 219
    3054:	94 e0       	ldi	r25, 0x04	; 4
    3056:	9f 93       	push	r25
    3058:	8f 93       	push	r24
    305a:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	8b ed       	ldi	r24, 0xDB	; 219
    3062:	94 e0       	ldi	r25, 0x04	; 4
    3064:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
		}

		if(days)
    3074:	23 28       	or	r2, r3
    3076:	b9 f0       	breq	.+46     	; 0x30a6 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    3078:	9f 92       	push	r9
    307a:	8f 92       	push	r8
    307c:	8b e4       	ldi	r24, 0x4B	; 75
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	9f 93       	push	r25
    3082:	8f 93       	push	r24
    3084:	8b ed       	ldi	r24, 0xDB	; 219
    3086:	94 e0       	ldi	r25, 0x04	; 4
    3088:	9f 93       	push	r25
    308a:	8f 93       	push	r24
    308c:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	8b ed       	ldi	r24, 0xDB	; 219
    3094:	94 e0       	ldi	r25, 0x04	; 4
    3096:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
		}

		if(hours)
    30a6:	89 85       	ldd	r24, Y+9	; 0x09
    30a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30aa:	89 2b       	or	r24, r25
    30ac:	c9 f0       	breq	.+50     	; 0x30e0 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	9f 93       	push	r25
    30b2:	e9 81       	ldd	r30, Y+1	; 0x01
    30b4:	ef 93       	push	r30
    30b6:	84 e5       	ldi	r24, 0x54	; 84
    30b8:	91 e0       	ldi	r25, 0x01	; 1
    30ba:	9f 93       	push	r25
    30bc:	8f 93       	push	r24
    30be:	8b ed       	ldi	r24, 0xDB	; 219
    30c0:	94 e0       	ldi	r25, 0x04	; 4
    30c2:	9f 93       	push	r25
    30c4:	8f 93       	push	r24
    30c6:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    30ca:	61 e0       	ldi	r22, 0x01	; 1
    30cc:	8b ed       	ldi	r24, 0xDB	; 219
    30ce:	94 e0       	ldi	r25, 0x04	; 4
    30d0:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
		}

		if(minutes)
    30e0:	01 2b       	or	r16, r17
    30e2:	c9 f0       	breq	.+50     	; 0x3116 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    30e4:	fe 81       	ldd	r31, Y+6	; 0x06
    30e6:	ff 93       	push	r31
    30e8:	2d 81       	ldd	r18, Y+5	; 0x05
    30ea:	2f 93       	push	r18
    30ec:	8c e5       	ldi	r24, 0x5C	; 92
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	9f 93       	push	r25
    30f2:	8f 93       	push	r24
    30f4:	8b ed       	ldi	r24, 0xDB	; 219
    30f6:	94 e0       	ldi	r25, 0x04	; 4
    30f8:	9f 93       	push	r25
    30fa:	8f 93       	push	r24
    30fc:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	8b ed       	ldi	r24, 0xDB	; 219
    3104:	94 e0       	ldi	r25, 0x04	; 4
    3106:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    3116:	3c 85       	ldd	r19, Y+12	; 0x0c
    3118:	3f 93       	push	r19
    311a:	4b 85       	ldd	r20, Y+11	; 0x0b
    311c:	4f 93       	push	r20
    311e:	84 e6       	ldi	r24, 0x64	; 100
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	9f 93       	push	r25
    3124:	8f 93       	push	r24
    3126:	8b ed       	ldi	r24, 0xDB	; 219
    3128:	94 e0       	ldi	r25, 0x04	; 4
    312a:	9f 93       	push	r25
    312c:	8f 93       	push	r24
    312e:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
		lb_send_string(g_tempStr, TRUE);
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	8b ed       	ldi	r24, 0xDB	; 219
    3136:	94 e0       	ldi	r25, 0x04	; 4
    3138:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    313c:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    3140:	eb ed       	ldi	r30, 0xDB	; 219
    3142:	f4 e0       	ldi	r31, 0x04	; 4
    3144:	10 82       	st	Z, r1
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3156:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3158:	2c 96       	adiw	r28, 0x0c	; 12
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	bf 90       	pop	r11
    3176:	af 90       	pop	r10
    3178:	9f 90       	pop	r9
    317a:	8f 90       	pop	r8
    317c:	7f 90       	pop	r7
    317e:	6f 90       	pop	r6
    3180:	5f 90       	pop	r5
    3182:	4f 90       	pop	r4
    3184:	3f 90       	pop	r3
    3186:	2f 90       	pop	r2
    3188:	08 95       	ret

0000318a <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED2, OFF);    /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    318a:	ef 92       	push	r14
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
	setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3192:	63 e0       	ldi	r22, 0x03	; 3
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
	g_current_epoch = rv3028_get_epoch();
    319c:	0e 94 26 2a 	call	0x544c	; 0x544c <_Z16rv3028_get_epochv>
    31a0:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <g_current_epoch>
    31a4:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <g_current_epoch+0x1>
    31a8:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <g_current_epoch+0x2>
    31ac:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    31b0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    31b4:	82 30       	cpi	r24, 0x02	; 2
    31b6:	09 f4       	brne	.+2      	; 0x31ba <_Z18startEventUsingRTCv+0x30>
    31b8:	5a c0       	rjmp	.+180    	; 0x326e <_Z18startEventUsingRTCv+0xe4>
	{
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    31ba:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_event_start_epoch>
    31be:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    31c2:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    31c6:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    31ca:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    31ce:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    31d2:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    31d6:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    31da:	0f 2e       	mov	r0, r31
    31dc:	fb e6       	ldi	r31, 0x6B	; 107
    31de:	ef 2e       	mov	r14, r31
    31e0:	f1 e0       	ldi	r31, 0x01	; 1
    31e2:	ff 2e       	mov	r15, r31
    31e4:	f0 2d       	mov	r31, r0
    31e6:	08 e7       	ldi	r16, 0x78	; 120
    31e8:	11 e0       	ldi	r17, 0x01	; 1
    31ea:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    31ee:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    31f2:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    31f6:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    31fa:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    31fe:	60 91 87 05 	lds	r22, 0x0587	; 0x800587 <g_event_start_epoch>
    3202:	70 91 88 05 	lds	r23, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3206:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    320a:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    320e:	e1 2c       	mov	r14, r1
    3210:	f1 2c       	mov	r15, r1
    3212:	04 e8       	ldi	r16, 0x84	; 132
    3214:	11 e0       	ldi	r17, 0x01	; 1
    3216:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    321a:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    321e:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3222:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3226:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    322a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    322e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3232:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3236:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    323a:	48 17       	cp	r20, r24
    323c:	59 07       	cpc	r21, r25
    323e:	6a 07       	cpc	r22, r26
    3240:	7b 07       	cpc	r23, r27
    3242:	b8 f4       	brcc	.+46     	; 0x3272 <_Z18startEventUsingRTCv+0xe8>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3244:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3248:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    324c:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3250:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3254:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3258:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    325c:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3260:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3264:	0c e8       	ldi	r16, 0x8C	; 140
    3266:	11 e0       	ldi	r17, 0x01	; 1
    3268:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <_Z18startEventUsingRTCv+0xe8>
		}
	}
	else
	{
		reportConfigErrors();
    326e:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <_Z18reportConfigErrorsv>
	}
}
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	08 95       	ret

0000327c <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
    327c:	4f 92       	push	r4
    327e:	5f 92       	push	r5
    3280:	6f 92       	push	r6
    3282:	7f 92       	push	r7
    3284:	8f 92       	push	r8
    3286:	9f 92       	push	r9
    3288:	af 92       	push	r10
    328a:	bf 92       	push	r11
    328c:	ef 92       	push	r14
    328e:	ff 92       	push	r15
    3290:	0f 93       	push	r16
    3292:	1f 93       	push	r17
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	2c 97       	sbiw	r28, 0x0c	; 12
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	8c 01       	movw	r16, r24
    32aa:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    32ac:	fc 01       	movw	r30, r24
    32ae:	01 90       	ld	r0, Z+
    32b0:	00 20       	and	r0, r0
    32b2:	e9 f7       	brne	.-6      	; 0x32ae <_Z18validateTimeStringPcPma+0x32>
    32b4:	31 97       	sbiw	r30, 0x01	; 1
    32b6:	e8 1b       	sub	r30, r24
    32b8:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    32ba:	25 e0       	ldi	r18, 0x05	; 5
    32bc:	67 38       	cpi	r22, 0x87	; 135
    32be:	72 07       	cpc	r23, r18
    32c0:	49 f5       	brne	.+82     	; 0x3314 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    32c2:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    32c6:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    32ca:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    32ce:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    32d2:	89 87       	std	Y+9, r24	; 0x09
    32d4:	9a 87       	std	Y+10, r25	; 0x0a
    32d6:	ab 87       	std	Y+11, r26	; 0x0b
    32d8:	bc 87       	std	Y+12, r27	; 0x0c
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	96 e6       	ldi	r25, 0x66	; 102
    32de:	ae ee       	ldi	r26, 0xEE	; 238
    32e0:	bf e5       	ldi	r27, 0x5F	; 95
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	ab 83       	std	Y+3, r26	; 0x03
    32e8:	bc 83       	std	Y+4, r27	; 0x04
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    32f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    32f2:	81 15       	cp	r24, r1
    32f4:	96 46       	sbci	r25, 0x66	; 102
    32f6:	ae 4e       	sbci	r26, 0xEE	; 238
    32f8:	bf 45       	sbci	r27, 0x5F	; 95
    32fa:	28 f4       	brcc	.+10     	; 0x3306 <_Z18validateTimeStringPcPma+0x8a>
    32fc:	89 80       	ldd	r8, Y+1	; 0x01
    32fe:	9a 80       	ldd	r9, Y+2	; 0x02
    3300:	ab 80       	ldd	r10, Y+3	; 0x03
    3302:	bc 80       	ldd	r11, Y+4	; 0x04
    3304:	04 c0       	rjmp	.+8      	; 0x330e <_Z18validateTimeStringPcPma+0x92>
    3306:	89 84       	ldd	r8, Y+9	; 0x09
    3308:	9a 84       	ldd	r9, Y+10	; 0x0a
    330a:	ab 84       	ldd	r10, Y+11	; 0x0b
    330c:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    330e:	ff 24       	eor	r15, r15
    3310:	f3 94       	inc	r15
    3312:	42 c0       	rjmp	.+132    	; 0x3398 <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    3314:	63 58       	subi	r22, 0x83	; 131
    3316:	75 40       	sbci	r23, 0x05	; 5
    3318:	a9 f5       	brne	.+106    	; 0x3384 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    331a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    331e:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3322:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3326:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	af 83       	std	Y+7, r26	; 0x07
    3330:	b8 87       	std	Y+8, r27	; 0x08
    3332:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3336:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    333a:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    333e:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3342:	89 83       	std	Y+1, r24	; 0x01
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	ab 83       	std	Y+3, r26	; 0x03
    3348:	bc 83       	std	Y+4, r27	; 0x04
    334a:	4d 81       	ldd	r20, Y+5	; 0x05
    334c:	5e 81       	ldd	r21, Y+6	; 0x06
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	9a 81       	ldd	r25, Y+2	; 0x02
    3356:	ab 81       	ldd	r26, Y+3	; 0x03
    3358:	bc 81       	ldd	r27, Y+4	; 0x04
    335a:	48 17       	cp	r20, r24
    335c:	59 07       	cpc	r21, r25
    335e:	6a 07       	cpc	r22, r26
    3360:	7b 07       	cpc	r23, r27
    3362:	40 f4       	brcc	.+16     	; 0x3374 <_Z18validateTimeStringPcPma+0xf8>
    3364:	89 80       	ldd	r8, Y+1	; 0x01
    3366:	9a 80       	ldd	r9, Y+2	; 0x02
    3368:	ab 80       	ldd	r10, Y+3	; 0x03
    336a:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    336c:	68 94       	set
    336e:	ff 24       	eor	r15, r15
    3370:	f1 f8       	bld	r15, 1
    3372:	12 c0       	rjmp	.+36     	; 0x3398 <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    3374:	8d 80       	ldd	r8, Y+5	; 0x05
    3376:	9e 80       	ldd	r9, Y+6	; 0x06
    3378:	af 80       	ldd	r10, Y+7	; 0x07
    337a:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    337c:	68 94       	set
    337e:	ff 24       	eor	r15, r15
    3380:	f1 f8       	bld	r15, 1
    3382:	0a c0       	rjmp	.+20     	; 0x3398 <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    3384:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    3386:	0f 2e       	mov	r0, r31
    3388:	81 2c       	mov	r8, r1
    338a:	f6 e6       	ldi	r31, 0x66	; 102
    338c:	9f 2e       	mov	r9, r31
    338e:	fe ee       	ldi	r31, 0xEE	; 238
    3390:	af 2e       	mov	r10, r31
    3392:	ff e5       	ldi	r31, 0x5F	; 95
    3394:	bf 2e       	mov	r11, r31
    3396:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    3398:	ec 30       	cpi	r30, 0x0C	; 12
    339a:	f1 05       	cpc	r31, r1
    339c:	09 f0       	breq	.+2      	; 0x33a0 <_Z18validateTimeStringPcPma+0x124>
    339e:	5e c0       	rjmp	.+188    	; 0x345c <_Z18validateTimeStringPcPma+0x1e0>
    33a0:	c8 01       	movw	r24, r16
    33a2:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11only_digitsPc>
    33a6:	88 23       	and	r24, r24
    33a8:	09 f4       	brne	.+2      	; 0x33ac <_Z18validateTimeStringPcPma+0x130>
    33aa:	4f c0       	rjmp	.+158    	; 0x344a <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    33ac:	b8 01       	movw	r22, r16
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 55 2a 	call	0x54aa	; 0x54aa <_Z16rv3028_get_epochPbPc>
    33b6:	2b 01       	movw	r4, r22
    33b8:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    33ba:	ae 2d       	mov	r26, r14
    33bc:	ee 0c       	add	r14, r14
    33be:	bb 0b       	sbc	r27, r27
    33c0:	20 e1       	ldi	r18, 0x10	; 16
    33c2:	3e e0       	ldi	r19, 0x0E	; 14
    33c4:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__usmulhisi3>
    33c8:	64 0d       	add	r22, r4
    33ca:	75 1d       	adc	r23, r5
    33cc:	86 1d       	adc	r24, r6
    33ce:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    33d0:	86 16       	cp	r8, r22
    33d2:	97 06       	cpc	r9, r23
    33d4:	a8 06       	cpc	r10, r24
    33d6:	b9 06       	cpc	r11, r25
    33d8:	08 f4       	brcc	.+2      	; 0x33dc <_Z18validateTimeStringPcPma+0x160>
    33da:	45 c0       	rjmp	.+138    	; 0x3466 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    33dc:	21 e0       	ldi	r18, 0x01	; 1
    33de:	f2 12       	cpse	r15, r18
    33e0:	09 c0       	rjmp	.+18     	; 0x33f4 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    33e2:	68 e0       	ldi	r22, 0x08	; 8
    33e4:	8c e9       	ldi	r24, 0x9C	; 156
    33e6:	95 e0       	ldi	r25, 0x05	; 5
    33e8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    33ec:	60 e0       	ldi	r22, 0x00	; 0
    33ee:	70 e0       	ldi	r23, 0x00	; 0
    33f0:	cb 01       	movw	r24, r22
    33f2:	39 c0       	rjmp	.+114    	; 0x3466 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    33f4:	22 e0       	ldi	r18, 0x02	; 2
    33f6:	f2 12       	cpse	r15, r18
    33f8:	1f c0       	rjmp	.+62     	; 0x3438 <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    33fa:	00 91 8b 05 	lds	r16, 0x058B	; 0x80058b <g_current_epoch>
    33fe:	10 91 8c 05 	lds	r17, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3402:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3406:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <g_current_epoch+0x3>
    340a:	60 17       	cp	r22, r16
    340c:	71 07       	cpc	r23, r17
    340e:	82 07       	cpc	r24, r18
    3410:	93 07       	cpc	r25, r19
    3412:	48 f4       	brcc	.+18     	; 0x3426 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    3414:	67 e0       	ldi	r22, 0x07	; 7
    3416:	8c e9       	ldi	r24, 0x9C	; 156
    3418:	95 e0       	ldi	r25, 0x05	; 5
    341a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	cb 01       	movw	r24, r22
    3424:	20 c0       	rjmp	.+64     	; 0x3466 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    3426:	66 e0       	ldi	r22, 0x06	; 6
    3428:	8c e9       	ldi	r24, 0x9C	; 156
    342a:	95 e0       	ldi	r25, 0x05	; 5
    342c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	cb 01       	movw	r24, r22
    3436:	17 c0       	rjmp	.+46     	; 0x3466 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    3438:	6a e0       	ldi	r22, 0x0A	; 10
    343a:	8c e9       	ldi	r24, 0x9C	; 156
    343c:	95 e0       	ldi	r25, 0x05	; 5
    343e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	cb 01       	movw	r24, r22
    3448:	0e c0       	rjmp	.+28     	; 0x3466 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    344a:	69 e0       	ldi	r22, 0x09	; 9
    344c:	8c e9       	ldi	r24, 0x9C	; 156
    344e:	95 e0       	ldi	r25, 0x05	; 5
    3450:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	cb 01       	movw	r24, r22
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    345c:	ef 2b       	or	r30, r31
    345e:	a9 f7       	brne	.-22     	; 0x344a <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t * epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    3466:	2c 96       	adiw	r28, 0x0c	; 12
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	bf 90       	pop	r11
    3480:	af 90       	pop	r10
    3482:	9f 90       	pop	r9
    3484:	8f 90       	pop	r8
    3486:	7f 90       	pop	r7
    3488:	6f 90       	pop	r6
    348a:	5f 90       	pop	r5
    348c:	4f 90       	pop	r4
    348e:	08 95       	ret

00003490 <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	BOOL enableAM = TRUE;

	switch(value)
    3490:	83 30       	cpi	r24, 0x03	; 3
    3492:	09 f1       	breq	.+66     	; 0x34d6 <_Z18setAMToneFrequencyh+0x46>
    3494:	28 f4       	brcc	.+10     	; 0x34a0 <_Z18setAMToneFrequencyh+0x10>
    3496:	88 23       	and	r24, r24
    3498:	49 f0       	breq	.+18     	; 0x34ac <_Z18setAMToneFrequencyh+0x1c>
    349a:	82 30       	cpi	r24, 0x02	; 2
    349c:	a9 f0       	breq	.+42     	; 0x34c8 <_Z18setAMToneFrequencyh+0x38>
    349e:	37 c0       	rjmp	.+110    	; 0x350e <_Z18setAMToneFrequencyh+0x7e>
    34a0:	85 30       	cpi	r24, 0x05	; 5
    34a2:	39 f1       	breq	.+78     	; 0x34f2 <_Z18setAMToneFrequencyh+0x62>
    34a4:	f8 f0       	brcs	.+62     	; 0x34e4 <_Z18setAMToneFrequencyh+0x54>
    34a6:	86 30       	cpi	r24, 0x06	; 6
    34a8:	59 f1       	breq	.+86     	; 0x3500 <_Z18setAMToneFrequencyh+0x70>
    34aa:	31 c0       	rjmp	.+98     	; 0x350e <_Z18setAMToneFrequencyh+0x7e>
	{
		case 0:
		{
			enableAM = FALSE;
			OCR1A = 1000;
    34ac:	88 ee       	ldi	r24, 0xE8	; 232
    34ae:	93 e0       	ldi	r25, 0x03	; 3
    34b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			linkbus_init(BAUD);
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	71 ee       	ldi	r23, 0xE1	; 225
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z12linkbus_initm>

	switch(value)
	{
		case 0:
		{
			enableAM = FALSE;
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	2a c0       	rjmp	.+84     	; 0x351c <_Z18setAMToneFrequencyh+0x8c>
		}
		break;

		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    34c8:	8c e2       	ldi	r24, 0x2C	; 44
    34ca:	92 e0       	ldi	r25, 0x02	; 2
    34cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34d4:	26 c0       	rjmp	.+76     	; 0x3522 <_Z18setAMToneFrequencyh+0x92>

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    34d6:	81 e7       	ldi	r24, 0x71	; 113
    34d8:	92 e0       	ldi	r25, 0x02	; 2
    34da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34e2:	1f c0       	rjmp	.+62     	; 0x3522 <_Z18setAMToneFrequencyh+0x92>

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    34e4:	8a ec       	ldi	r24, 0xCA	; 202
    34e6:	92 e0       	ldi	r25, 0x02	; 2
    34e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34f0:	18 c0       	rjmp	.+48     	; 0x3522 <_Z18setAMToneFrequencyh+0x92>

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    34f2:	81 e4       	ldi	r24, 0x41	; 65
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    34fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    34fe:	11 c0       	rjmp	.+34     	; 0x3522 <_Z18setAMToneFrequencyh+0x92>

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    3500:	88 ee       	ldi	r24, 0xE8	; 232
    3502:	93 e0       	ldi	r25, 0x03	; 3
    3504:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3508:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    350c:	0a c0       	rjmp	.+20     	; 0x3522 <_Z18setAMToneFrequencyh+0x92>

		default:
		{
			OCR1A = 500;    /* For ~1000 Hz tone output */
    350e:	84 ef       	ldi	r24, 0xF4	; 244
    3510:	91 e0       	ldi	r25, 0x01	; 1
    3512:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3516:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    351a:	03 c0       	rjmp	.+6      	; 0x3522 <_Z18setAMToneFrequencyh+0x92>
		{
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
    351c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_AM_enabled>
}
    3520:	08 95       	ret
	}

#if !INIT_EEPROM_ONLY
		if(enableAM)
		{
			setupPortsForF1975();
    3522:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z18setupPortsForF1975v>
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	f9 cf       	rjmp	.-14     	; 0x351c <_Z18setAMToneFrequencyh+0x8c>

0000352a <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to always optimize large switch statements correctly */
//void __attribute__((optimize("O3"))) handleLinkBusMsgs()
void handleLinkBusMsgs()
{
    352a:	2f 92       	push	r2
    352c:	3f 92       	push	r3
    352e:	4f 92       	push	r4
    3530:	5f 92       	push	r5
    3532:	6f 92       	push	r6
    3534:	7f 92       	push	r7
    3536:	8f 92       	push	r8
    3538:	9f 92       	push	r9
    353a:	af 92       	push	r10
    353c:	bf 92       	push	r11
    353e:	cf 92       	push	r12
    3540:	df 92       	push	r13
    3542:	ef 92       	push	r14
    3544:	ff 92       	push	r15
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	2c 97       	sbiw	r28, 0x0c	; 12
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    355e:	0f 2e       	mov	r0, r31
    3560:	fd e9       	ldi	r31, 0x9D	; 157
    3562:	6f 2e       	mov	r6, r31
    3564:	f1 e0       	ldi	r31, 0x01	; 1
    3566:	7f 2e       	mov	r7, r31
    3568:	f0 2d       	mov	r31, r0
    356a:	0f 2e       	mov	r0, r31
    356c:	fb ed       	ldi	r31, 0xDB	; 219
    356e:	af 2e       	mov	r10, r31
    3570:	f4 e0       	ldi	r31, 0x04	; 4
    3572:	bf 2e       	mov	r11, r31
    3574:	f0 2d       	mov	r31, r0
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);

						if(g_messages_text[STATION_ID][0])
    3576:	0f 2e       	mov	r0, r31
    3578:	f3 e1       	ldi	r31, 0x13	; 19
    357a:	2f 2e       	mov	r2, r31
    357c:	f5 e0       	ldi	r31, 0x05	; 5
    357e:	3f 2e       	mov	r3, r31
    3580:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
					lb_send_string(g_tempStr, TRUE);
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3582:	0f 2e       	mov	r0, r31
    3584:	f6 e1       	ldi	r31, 0x16	; 22
    3586:	8f 2e       	mov	r8, r31
    3588:	f2 e0       	ldi	r31, 0x02	; 2
    358a:	9f 2e       	mov	r9, r31
    358c:	f0 2d       	mov	r31, r0
				lb_send_string(g_tempStr, TRUE);

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    358e:	0f 2e       	mov	r0, r31
    3590:	fd e1       	ldi	r31, 0x1D	; 29
    3592:	4f 2e       	mov	r4, r31
    3594:	f2 e0       	ldi	r31, 0x02	; 2
    3596:	5f 2e       	mov	r5, r31
    3598:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    359a:	0e 94 3f 09 	call	0x127e	; 0x127e <_Z16nextFullRxBufferv>
    359e:	6c 01       	movw	r12, r24
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <_Z17handleLinkBusMsgsv+0x7c>
    35a4:	3f c5       	rjmp	.+2686   	; 0x4024 <_Z17handleLinkBusMsgsv+0xafa>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    35a6:	dc 01       	movw	r26, r24
    35a8:	11 96       	adiw	r26, 0x01	; 1
    35aa:	8d 91       	ld	r24, X+
    35ac:	9c 91       	ld	r25, X
    35ae:	12 97       	sbiw	r26, 0x02	; 2
    35b0:	86 3c       	cpi	r24, 0xC6	; 198
    35b2:	be e1       	ldi	r27, 0x1E	; 30
    35b4:	9b 07       	cpc	r25, r27
    35b6:	29 f1       	breq	.+74     	; 0x3602 <_Z17handleLinkBusMsgsv+0xd8>
    35b8:	78 f4       	brcc	.+30     	; 0x35d8 <_Z17handleLinkBusMsgsv+0xae>
    35ba:	8e 31       	cpi	r24, 0x1E	; 30
    35bc:	f3 e0       	ldi	r31, 0x03	; 3
    35be:	9f 07       	cpc	r25, r31
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <_Z17handleLinkBusMsgsv+0x9a>
    35c2:	15 c1       	rjmp	.+554    	; 0x37ee <_Z17handleLinkBusMsgsv+0x2c4>
    35c4:	8f 36       	cpi	r24, 0x6F	; 111
    35c6:	2d e1       	ldi	r18, 0x1D	; 29
    35c8:	92 07       	cpc	r25, r18
    35ca:	09 f4       	brne	.+2      	; 0x35ce <_Z17handleLinkBusMsgsv+0xa4>
    35cc:	4d c2       	rjmp	.+1178   	; 0x3a68 <_Z17handleLinkBusMsgsv+0x53e>
    35ce:	87 3d       	cpi	r24, 0xD7	; 215
    35d0:	92 40       	sbci	r25, 0x02	; 2
    35d2:	09 f0       	breq	.+2      	; 0x35d6 <_Z17handleLinkBusMsgsv+0xac>
    35d4:	03 c5       	rjmp	.+2566   	; 0x3fdc <_Z17handleLinkBusMsgsv+0xab2>
    35d6:	ad c0       	rjmp	.+346    	; 0x3732 <_Z17handleLinkBusMsgsv+0x208>
    35d8:	82 37       	cpi	r24, 0x72	; 114
    35da:	a3 e2       	ldi	r26, 0x23	; 35
    35dc:	9a 07       	cpc	r25, r26
    35de:	09 f4       	brne	.+2      	; 0x35e2 <_Z17handleLinkBusMsgsv+0xb8>
    35e0:	77 c1       	rjmp	.+750    	; 0x38d0 <_Z17handleLinkBusMsgsv+0x3a6>
    35e2:	28 f4       	brcc	.+10     	; 0x35ee <_Z17handleLinkBusMsgsv+0xc4>
    35e4:	8a 3e       	cpi	r24, 0xEA	; 234
    35e6:	92 42       	sbci	r25, 0x22	; 34
    35e8:	09 f4       	brne	.+2      	; 0x35ec <_Z17handleLinkBusMsgsv+0xc2>
    35ea:	09 c2       	rjmp	.+1042   	; 0x39fe <_Z17handleLinkBusMsgsv+0x4d4>
    35ec:	f7 c4       	rjmp	.+2542   	; 0x3fdc <_Z17handleLinkBusMsgsv+0xab2>
    35ee:	84 33       	cpi	r24, 0x34	; 52
    35f0:	f4 e2       	ldi	r31, 0x24	; 36
    35f2:	9f 07       	cpc	r25, r31
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <_Z17handleLinkBusMsgsv+0xce>
    35f6:	cf c0       	rjmp	.+414    	; 0x3796 <_Z17handleLinkBusMsgsv+0x26c>
    35f8:	85 3c       	cpi	r24, 0xC5	; 197
    35fa:	94 42       	sbci	r25, 0x24	; 36
    35fc:	09 f4       	brne	.+2      	; 0x3600 <_Z17handleLinkBusMsgsv+0xd6>
    35fe:	74 c4       	rjmp	.+2280   	; 0x3ee8 <_Z17handleLinkBusMsgsv+0x9be>
    3600:	ed c4       	rjmp	.+2522   	; 0x3fdc <_Z17handleLinkBusMsgsv+0xab2>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    3602:	d6 01       	movw	r26, r12
    3604:	13 96       	adiw	r26, 0x03	; 3
    3606:	8c 91       	ld	r24, X
    3608:	13 97       	sbiw	r26, 0x03	; 3
    360a:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	09 f4       	brne	.+2      	; 0x3612 <_Z17handleLinkBusMsgsv+0xe8>
    3610:	7b c0       	rjmp	.+246    	; 0x3708 <_Z17handleLinkBusMsgsv+0x1de>
				{
					if(c == 'B')
    3612:	82 34       	cpi	r24, 0x42	; 66
    3614:	91 05       	cpc	r25, r1
    3616:	09 f4       	brne	.+2      	; 0x361a <_Z17handleLinkBusMsgsv+0xf0>
    3618:	ed c4       	rjmp	.+2522   	; 0x3ff4 <_Z17handleLinkBusMsgsv+0xaca>
					{
						c = BEACON;
					}
					else if(c == 'F')
    361a:	86 34       	cpi	r24, 0x46	; 70
    361c:	91 05       	cpc	r25, r1
    361e:	09 f4       	brne	.+2      	; 0x3622 <_Z17handleLinkBusMsgsv+0xf8>
    3620:	eb c4       	rjmp	.+2518   	; 0x3ff8 <_Z17handleLinkBusMsgsv+0xace>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    3622:	83 34       	cpi	r24, 0x43	; 67
    3624:	91 05       	cpc	r25, r1
    3626:	d1 f4       	brne	.+52     	; 0x365c <_Z17handleLinkBusMsgsv+0x132>
					{
						char t = lb_buff->fields[FIELD2][0];
    3628:	57 96       	adiw	r26, 0x17	; 23
    362a:	8c 91       	ld	r24, X
    362c:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    362e:	58 96       	adiw	r26, 0x18	; 24
    3630:	1c 92       	st	X, r1

						if(t == 'B')
    3632:	82 34       	cpi	r24, 0x42	; 66
    3634:	29 f0       	breq	.+10     	; 0x3640 <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	c0 97       	sbiw	r24, 0x30	; 48
    363a:	0a 97       	sbiw	r24, 0x0a	; 10
    363c:	08 f0       	brcs	.+2      	; 0x3640 <_Z17handleLinkBusMsgsv+0x116>
    363e:	64 c0       	rjmp	.+200    	; 0x3708 <_Z17handleLinkBusMsgsv+0x1de>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    3640:	c6 01       	movw	r24, r12
    3642:	47 96       	adiw	r24, 0x17	; 23
    3644:	0e 94 c3 30 	call	0x6186	; 0x6186 <atoi>
    3648:	99 23       	and	r25, r25
    364a:	14 f4       	brge	.+4      	; 0x3650 <_Z17handleLinkBusMsgsv+0x126>
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	86 30       	cpi	r24, 0x06	; 6
    3652:	91 05       	cpc	r25, r1
    3654:	cc f1       	brlt	.+114    	; 0x36c8 <_Z17handleLinkBusMsgsv+0x19e>
    3656:	85 e0       	ldi	r24, 0x05	; 5
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	36 c0       	rjmp	.+108    	; 0x36c8 <_Z17handleLinkBusMsgsv+0x19e>
						}
					}
					else if(c == 'S')
    365c:	83 35       	cpi	r24, 0x53	; 83
    365e:	91 05       	cpc	r25, r1
    3660:	79 f5       	brne	.+94     	; 0x36c0 <_Z17handleLinkBusMsgsv+0x196>
					{
						char x = 0;
						char t = lb_buff->fields[FIELD2][0];
    3662:	f6 01       	movw	r30, r12
    3664:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    3666:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    3668:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    366a:	82 34       	cpi	r24, 0x42	; 66
    366c:	89 f1       	breq	.+98     	; 0x36d0 <_Z17handleLinkBusMsgsv+0x1a6>
						{
							x = BEACON;
						}
						else if(t == 'F')
    366e:	86 34       	cpi	r24, 0x46	; 70
    3670:	39 f4       	brne	.+14     	; 0x3680 <_Z17handleLinkBusMsgsv+0x156>
						{
							if((u > '0') && (u < '6'))
    3672:	8f ec       	ldi	r24, 0xCF	; 207
    3674:	89 0f       	add	r24, r25
    3676:	85 30       	cpi	r24, 0x05	; 5
    3678:	68 f5       	brcc	.+90     	; 0x36d4 <_Z17handleLinkBusMsgsv+0x1aa>
							{
								x = SPRINT_F1 + (u - '1');
    367a:	8c ed       	ldi	r24, 0xDC	; 220
    367c:	89 0f       	add	r24, r25
    367e:	18 c0       	rjmp	.+48     	; 0x36b0 <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(t == 'S')
    3680:	83 35       	cpi	r24, 0x53	; 83
    3682:	39 f4       	brne	.+14     	; 0x3692 <_Z17handleLinkBusMsgsv+0x168>
						{
							if((u > '0') && (u < '6'))
    3684:	8f ec       	ldi	r24, 0xCF	; 207
    3686:	89 0f       	add	r24, r25
    3688:	85 30       	cpi	r24, 0x05	; 5
    368a:	b8 f4       	brcc	.+46     	; 0x36ba <_Z17handleLinkBusMsgsv+0x190>
							{
								x = SPRINT_S1 + (u - '1');
    368c:	87 ed       	ldi	r24, 0xD7	; 215
    368e:	89 0f       	add	r24, r25
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <_Z17handleLinkBusMsgsv+0x186>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    3692:	96 34       	cpi	r25, 0x46	; 70
    3694:	31 f4       	brne	.+12     	; 0x36a2 <_Z17handleLinkBusMsgsv+0x178>
						{
							if((t > '0') && (t < '6'))
    3696:	9f ec       	ldi	r25, 0xCF	; 207
    3698:	98 0f       	add	r25, r24
    369a:	95 30       	cpi	r25, 0x05	; 5
    369c:	e8 f4       	brcc	.+58     	; 0x36d8 <_Z17handleLinkBusMsgsv+0x1ae>
							{
								x = SPRINT_F1 + (t - '1');
    369e:	84 52       	subi	r24, 0x24	; 36
    36a0:	07 c0       	rjmp	.+14     	; 0x36b0 <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(u == 'S')
    36a2:	93 35       	cpi	r25, 0x53	; 83
    36a4:	d9 f4       	brne	.+54     	; 0x36dc <_Z17handleLinkBusMsgsv+0x1b2>
						{
							if((t > '0') && (t < '6'))
    36a6:	9f ec       	ldi	r25, 0xCF	; 207
    36a8:	98 0f       	add	r25, r24
    36aa:	95 30       	cpi	r25, 0x05	; 5
    36ac:	c8 f4       	brcc	.+50     	; 0x36e0 <_Z17handleLinkBusMsgsv+0x1b6>
							{
								x = SPRINT_S1 + (t - '1');
    36ae:	89 52       	subi	r24, 0x29	; 41
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
    36b0:	99 ef       	ldi	r25, 0xF9	; 249
    36b2:	98 0f       	add	r25, r24
    36b4:	9b 30       	cpi	r25, 0x0B	; 11
    36b6:	10 f0       	brcs	.+4      	; 0x36bc <_Z17handleLinkBusMsgsv+0x192>
    36b8:	a1 c4       	rjmp	.+2370   	; 0x3ffc <_Z17handleLinkBusMsgsv+0xad2>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    36ba:	87 e0       	ldi	r24, 0x07	; 7
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
						{
							c = x;
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	04 c0       	rjmp	.+8      	; 0x36c8 <_Z17handleLinkBusMsgsv+0x19e>
							c = BEACON;
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    36c0:	c6 01       	movw	r24, r12
    36c2:	03 96       	adiw	r24, 0x03	; 3
    36c4:	0e 94 c3 30 	call	0x6186	; 0x6186 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    36c8:	82 31       	cpi	r24, 0x12	; 18
    36ca:	91 05       	cpc	r25, r1
    36cc:	e8 f4       	brcc	.+58     	; 0x3708 <_Z17handleLinkBusMsgsv+0x1de>
    36ce:	09 c0       	rjmp	.+18     	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	07 c0       	rjmp	.+14     	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	05 c0       	rjmp	.+10     	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	03 c0       	rjmp	.+6      	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	01 c0       	rjmp	.+2      	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
					{
						Fox_t holdFox = (Fox_t)c;
    36e2:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    36e4:	ae 01       	movw	r20, r28
    36e6:	4f 5f       	subi	r20, 0xFF	; 255
    36e8:	5f 4f       	sbci	r21, 0xFF	; 255
    36ea:	60 e1       	ldi	r22, 0x10	; 16
    36ec:	8c e9       	ldi	r24, 0x9C	; 156
    36ee:	95 e0       	ldi	r25, 0x05	; 5
    36f0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    36f4:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    36f8:	99 81       	ldd	r25, Y+1	; 0x01
    36fa:	98 17       	cp	r25, r24
    36fc:	29 f0       	breq	.+10     	; 0x3708 <_Z17handleLinkBusMsgsv+0x1de>
						{
							setupForFox(&holdFox, START_NOTHING);
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	ce 01       	movw	r24, r28
    3702:	01 96       	adiw	r24, 0x01	; 1
    3704:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3708:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    370c:	1f 92       	push	r1
    370e:	8f 93       	push	r24
    3710:	7f 92       	push	r7
    3712:	6f 92       	push	r6
    3714:	bf 92       	push	r11
    3716:	af 92       	push	r10
    3718:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	c5 01       	movw	r24, r10
    3720:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
			}
			break;
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	59 c4       	rjmp	.+2226   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    3732:	d6 01       	movw	r26, r12
    3734:	13 96       	adiw	r26, 0x03	; 3
    3736:	8c 91       	ld	r24, X
    3738:	88 23       	and	r24, r24
    373a:	b1 f0       	breq	.+44     	; 0x3768 <_Z17handleLinkBusMsgsv+0x23e>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    373c:	c6 01       	movw	r24, r12
    373e:	03 96       	adiw	r24, 0x03	; 3
    3740:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	67 30       	cpi	r22, 0x07	; 7
    3748:	71 05       	cpc	r23, r1
    374a:	0c f0       	brlt	.+2      	; 0x374e <_Z17handleLinkBusMsgsv+0x224>
    374c:	66 e0       	ldi	r22, 0x06	; 6
    374e:	60 93 7f 05 	sts	0x057F, r22	; 0x80057f <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3752:	4f e7       	ldi	r20, 0x7F	; 127
    3754:	55 e0       	ldi	r21, 0x05	; 5
    3756:	61 e1       	ldi	r22, 0x11	; 17
    3758:	8c e9       	ldi	r24, 0x9C	; 156
    375a:	95 e0       	ldi	r25, 0x05	; 5
    375c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    3760:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    3764:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    3768:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    376c:	1f 92       	push	r1
    376e:	8f 93       	push	r24
    3770:	85 ea       	ldi	r24, 0xA5	; 165
    3772:	91 e0       	ldi	r25, 0x01	; 1
    3774:	9f 93       	push	r25
    3776:	8f 93       	push	r24
    3778:	bf 92       	push	r11
    377a:	af 92       	push	r10
    377c:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	c5 01       	movw	r24, r10
    3784:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
			}
			break;
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	27 c4       	rjmp	.+2126   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3796:	f6 01       	movw	r30, r12
    3798:	83 81       	ldd	r24, Z+3	; 0x03
    379a:	88 23       	and	r24, r24
    379c:	11 f1       	breq	.+68     	; 0x37e2 <_Z17handleLinkBusMsgsv+0x2b8>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    379e:	80 33       	cpi	r24, 0x30	; 48
    37a0:	21 f4       	brne	.+8      	; 0x37aa <_Z17handleLinkBusMsgsv+0x280>
					{
						stopEventNow(PROGRAMMATIC);
    37a2:	82 e0       	ldi	r24, 0x02	; 2
    37a4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_Z12stopEventNow19EventActionSource_t>
    37a8:	1d c4       	rjmp	.+2106   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    37aa:	81 33       	cpi	r24, 0x31	; 49
    37ac:	21 f4       	brne	.+8      	; 0x37b6 <_Z17handleLinkBusMsgsv+0x28c>
					{
						startEventNow(PROGRAMMATIC);
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z13startEventNow19EventActionSource_t>
    37b4:	17 c4       	rjmp	.+2094   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    37b6:	82 33       	cpi	r24, 0x32	; 50
    37b8:	31 f4       	brne	.+12     	; 0x37c6 <_Z17handleLinkBusMsgsv+0x29c>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_transmissions_disabled>
						startEventUsingRTC();
    37c0:	0e 94 c5 18 	call	0x318a	; 0x318a <_Z18startEventUsingRTCv>
    37c4:	0f c4       	rjmp	.+2078   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
					}
					else if(lb_buff->fields[FIELD1][0] == '3')  /* Start the event at the programmed start time */
    37c6:	83 33       	cpi	r24, 0x33	; 51
    37c8:	31 f4       	brne	.+12     	; 0x37d6 <_Z17handleLinkBusMsgsv+0x2ac>
					{
						setupForFox(NULL, START_TRANSMISSIONS_NOW);
    37ca:	62 e0       	ldi	r22, 0x02	; 2
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
    37d4:	07 c4       	rjmp	.+2062   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
					}
					else
					{
						lb_send_string((char*)"err\n", TRUE);
    37d6:	61 e0       	ldi	r22, 0x01	; 1
    37d8:	8c ea       	ldi	r24, 0xAC	; 172
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    37e0:	01 c4       	rjmp	.+2050   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
					}
				}
				else
				{
					lb_send_string((char*)"err\n", TRUE);
    37e2:	61 e0       	ldi	r22, 0x01	; 1
    37e4:	8c ea       	ldi	r24, 0xAC	; 172
    37e6:	91 e0       	ldi	r25, 0x01	; 1
    37e8:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    37ec:	fb c3       	rjmp	.+2038   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    37ee:	d6 01       	movw	r26, r12
    37f0:	13 96       	adiw	r26, 0x03	; 3
    37f2:	8c 91       	ld	r24, X
    37f4:	88 23       	and	r24, r24
    37f6:	99 f1       	breq	.+102    	; 0x385e <_Z17handleLinkBusMsgsv+0x334>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    37f8:	80 e2       	ldi	r24, 0x20	; 32
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	f5 01       	movw	r30, r10
    37fe:	91 83       	std	Z+1, r25	; 0x01
    3800:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    3802:	b6 01       	movw	r22, r12
    3804:	6d 5f       	subi	r22, 0xFD	; 253
    3806:	7f 4f       	sbci	r23, 0xFF	; 255
    3808:	c5 01       	movw	r24, r10
    380a:	0e 94 10 31 	call	0x6220	; 0x6220 <strcat>

					if(lb_buff->fields[FIELD2][0])
    380e:	d6 01       	movw	r26, r12
    3810:	57 96       	adiw	r26, 0x17	; 23
    3812:	8c 91       	ld	r24, X
    3814:	88 23       	and	r24, r24
    3816:	79 f0       	breq	.+30     	; 0x3836 <_Z17handleLinkBusMsgsv+0x30c>
					{
						strcat(g_tempStr, " ");
    3818:	f5 01       	movw	r30, r10
    381a:	01 90       	ld	r0, Z+
    381c:	00 20       	and	r0, r0
    381e:	e9 f7       	brne	.-6      	; 0x381a <_Z17handleLinkBusMsgsv+0x2f0>
    3820:	31 97       	sbiw	r30, 0x01	; 1
    3822:	80 e2       	ldi	r24, 0x20	; 32
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	91 83       	std	Z+1, r25	; 0x01
    3828:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    382a:	b6 01       	movw	r22, r12
    382c:	69 5e       	subi	r22, 0xE9	; 233
    382e:	7f 4f       	sbci	r23, 0xFF	; 255
    3830:	c5 01       	movw	r24, r10
    3832:	0e 94 10 31 	call	0x6220	; 0x6220 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    3836:	f5 01       	movw	r30, r10
    3838:	01 90       	ld	r0, Z+
    383a:	00 20       	and	r0, r0
    383c:	e9 f7       	brne	.-6      	; 0x3838 <_Z17handleLinkBusMsgsv+0x30e>
    383e:	31 97       	sbiw	r30, 0x01	; 1
    3840:	eb 5d       	subi	r30, 0xDB	; 219
    3842:	f4 40       	sbci	r31, 0x04	; 4
    3844:	75 97       	sbiw	r30, 0x15	; 21
    3846:	58 f4       	brcc	.+22     	; 0x385e <_Z17handleLinkBusMsgsv+0x334>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    3848:	b5 01       	movw	r22, r10
    384a:	88 e2       	ldi	r24, 0x28	; 40
    384c:	95 e0       	ldi	r25, 0x05	; 5
    384e:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    3852:	a5 01       	movw	r20, r10
    3854:	6b e0       	ldi	r22, 0x0B	; 11
    3856:	8c e9       	ldi	r24, 0x9C	; 156
    3858:	95 e0       	ldi	r25, 0x05	; 5
    385a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    385e:	f1 01       	movw	r30, r2
    3860:	85 89       	ldd	r24, Z+21	; 0x15
    3862:	88 23       	and	r24, r24
    3864:	f1 f0       	breq	.+60     	; 0x38a2 <_Z17handleLinkBusMsgsv+0x378>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    3866:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	88 e2       	ldi	r24, 0x28	; 40
    386e:	95 e0       	ldi	r25, 0x05	; 5
    3870:	0e 94 ba 29 	call	0x5374	; 0x5374 <_Z26timeRequiredToSendStrAtWPMPcj>
    3874:	88 5a       	subi	r24, 0xA8	; 168
    3876:	9d 4f       	sbci	r25, 0xFD	; 253
    3878:	9c 01       	movw	r18, r24
    387a:	36 95       	lsr	r19
    387c:	27 95       	ror	r18
    387e:	36 95       	lsr	r19
    3880:	27 95       	ror	r18
    3882:	36 95       	lsr	r19
    3884:	27 95       	ror	r18
    3886:	a5 ec       	ldi	r26, 0xC5	; 197
    3888:	b0 e2       	ldi	r27, 0x20	; 32
    388a:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    388e:	92 95       	swap	r25
    3890:	82 95       	swap	r24
    3892:	8f 70       	andi	r24, 0x0F	; 15
    3894:	89 27       	eor	r24, r25
    3896:	9f 70       	andi	r25, 0x0F	; 15
    3898:	89 27       	eor	r24, r25
    389a:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <g_time_needed_for_ID+0x1>
    389e:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    38a2:	88 e2       	ldi	r24, 0x28	; 40
    38a4:	95 e0       	ldi	r25, 0x05	; 5
    38a6:	9f 93       	push	r25
    38a8:	8f 93       	push	r24
    38aa:	81 eb       	ldi	r24, 0xB1	; 177
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	9f 93       	push	r25
    38b0:	8f 93       	push	r24
    38b2:	bf 92       	push	r11
    38b4:	af 92       	push	r10
    38b6:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    38ba:	61 e0       	ldi	r22, 0x01	; 1
    38bc:	c5 01       	movw	r24, r10
    38be:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
			}
			break;
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	8a c3       	rjmp	.+1812   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>


			case MESSAGE_CODE_SETTINGS:
			{
				if(lb_buff->fields[FIELD1][0] == 'S')
    38d0:	d6 01       	movw	r26, r12
    38d2:	13 96       	adiw	r26, 0x03	; 3
    38d4:	8c 91       	ld	r24, X
    38d6:	13 97       	sbiw	r26, 0x03	; 3
    38d8:	83 35       	cpi	r24, 0x53	; 83
    38da:	09 f0       	breq	.+2      	; 0x38de <_Z17handleLinkBusMsgsv+0x3b4>
    38dc:	51 c0       	rjmp	.+162    	; 0x3980 <_Z17handleLinkBusMsgsv+0x456>
				{
					char x = lb_buff->fields[FIELD2][0];

					if(x)
    38de:	57 96       	adiw	r26, 0x17	; 23
    38e0:	8c 91       	ld	r24, X
    38e2:	88 23       	and	r24, r24
    38e4:	d1 f1       	breq	.+116    	; 0x395a <_Z17handleLinkBusMsgsv+0x430>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    38e6:	c6 01       	movw	r24, r12
    38e8:	47 96       	adiw	r24, 0x17	; 23
    38ea:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    38ee:	86 2f       	mov	r24, r22
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	85 30       	cpi	r24, 0x05	; 5
    38f4:	91 05       	cpc	r25, r1
    38f6:	14 f4       	brge	.+4      	; 0x38fc <_Z17handleLinkBusMsgsv+0x3d2>
    38f8:	85 e0       	ldi	r24, 0x05	; 5
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	85 31       	cpi	r24, 0x15	; 21
    38fe:	91 05       	cpc	r25, r1
    3900:	0c f0       	brlt	.+2      	; 0x3904 <_Z17handleLinkBusMsgsv+0x3da>
    3902:	84 e1       	ldi	r24, 0x14	; 20
    3904:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    3908:	40 e1       	ldi	r20, 0x10	; 16
    390a:	51 e0       	ldi	r21, 0x01	; 1
    390c:	6f e0       	ldi	r22, 0x0F	; 15
    390e:	8c e9       	ldi	r24, 0x9C	; 156
    3910:	95 e0       	ldi	r25, 0x05	; 5
    3912:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    3916:	f1 01       	movw	r30, r2
    3918:	85 89       	ldd	r24, Z+21	; 0x15
    391a:	88 23       	and	r24, r24
    391c:	f1 f0       	breq	.+60     	; 0x395a <_Z17handleLinkBusMsgsv+0x430>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    391e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_id_codespeed>
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	88 e2       	ldi	r24, 0x28	; 40
    3926:	95 e0       	ldi	r25, 0x05	; 5
    3928:	0e 94 ba 29 	call	0x5374	; 0x5374 <_Z26timeRequiredToSendStrAtWPMPcj>
    392c:	88 5a       	subi	r24, 0xA8	; 168
    392e:	9d 4f       	sbci	r25, 0xFD	; 253
    3930:	9c 01       	movw	r18, r24
    3932:	36 95       	lsr	r19
    3934:	27 95       	ror	r18
    3936:	36 95       	lsr	r19
    3938:	27 95       	ror	r18
    393a:	36 95       	lsr	r19
    393c:	27 95       	ror	r18
    393e:	a5 ec       	ldi	r26, 0xC5	; 197
    3940:	b0 e2       	ldi	r27, 0x20	; 32
    3942:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    3946:	92 95       	swap	r25
    3948:	82 95       	swap	r24
    394a:	8f 70       	andi	r24, 0x0F	; 15
    394c:	89 27       	eor	r24, r25
    394e:	9f 70       	andi	r25, 0x0F	; 15
    3950:	89 27       	eor	r24, r25
    3952:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <g_time_needed_for_ID+0x1>
    3956:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_time_needed_for_ID>
						}
					}

					sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    395a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_id_codespeed>
    395e:	1f 92       	push	r1
    3960:	8f 93       	push	r24
    3962:	88 eb       	ldi	r24, 0xB8	; 184
    3964:	91 e0       	ldi	r25, 0x01	; 1
    3966:	9f 93       	push	r25
    3968:	8f 93       	push	r24
    396a:	bf 92       	push	r11
    396c:	af 92       	push	r10
    396e:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	3a c0       	rjmp	.+116    	; 0x39f4 <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    3980:	80 35       	cpi	r24, 0x50	; 80
    3982:	81 f5       	brne	.+96     	; 0x39e4 <_Z17handleLinkBusMsgsv+0x4ba>
				{
					char x = lb_buff->fields[FIELD2][0];
    3984:	f6 01       	movw	r30, r12
    3986:	87 89       	ldd	r24, Z+23	; 0x17

					if(x)
    3988:	88 23       	and	r24, r24
    398a:	c9 f0       	breq	.+50     	; 0x39be <_Z17handleLinkBusMsgsv+0x494>
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
    398c:	81 33       	cpi	r24, 0x31	; 49
    398e:	39 f0       	breq	.+14     	; 0x399e <_Z17handleLinkBusMsgsv+0x474>
    3990:	84 35       	cpi	r24, 0x54	; 84
    3992:	39 f0       	breq	.+14     	; 0x39a2 <_Z17handleLinkBusMsgsv+0x478>
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	89 35       	cpi	r24, 0x59	; 89
    3998:	29 f0       	breq	.+10     	; 0x39a4 <_Z17handleLinkBusMsgsv+0x47a>
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	03 c0       	rjmp	.+6      	; 0x39a4 <_Z17handleLinkBusMsgsv+0x47a>
    399e:	91 e0       	ldi	r25, 0x01	; 1
    39a0:	01 c0       	rjmp	.+2      	; 0x39a4 <_Z17handleLinkBusMsgsv+0x47a>
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <g_ptt_periodic_reset_enabled>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    39a8:	41 e8       	ldi	r20, 0x81	; 129
    39aa:	55 e0       	ldi	r21, 0x05	; 5
    39ac:	67 e1       	ldi	r22, 0x17	; 23
    39ae:	8c e9       	ldi	r24, 0x9C	; 156
    39b0:	95 e0       	ldi	r25, 0x05	; 5
    39b2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    39b6:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    39ba:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_use_ptt_periodic_reset>
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    39be:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    39c2:	1f 92       	push	r1
    39c4:	8f 93       	push	r24
    39c6:	84 ec       	ldi	r24, 0xC4	; 196
    39c8:	91 e0       	ldi	r25, 0x01	; 1
    39ca:	9f 93       	push	r25
    39cc:	8f 93       	push	r24
    39ce:	bf 92       	push	r11
    39d0:	af 92       	push	r10
    39d2:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	08 c0       	rjmp	.+16     	; 0x39f4 <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else
				{
					sprintf(g_tempStr, "err\n");
    39e4:	85 e0       	ldi	r24, 0x05	; 5
    39e6:	ec ea       	ldi	r30, 0xAC	; 172
    39e8:	f1 e0       	ldi	r31, 0x01	; 1
    39ea:	d5 01       	movw	r26, r10
    39ec:	01 90       	ld	r0, Z+
    39ee:	0d 92       	st	X+, r0
    39f0:	8a 95       	dec	r24
    39f2:	e1 f7       	brne	.-8      	; 0x39ec <_Z17handleLinkBusMsgsv+0x4c2>
				}

				lb_send_string(g_tempStr, FALSE);
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	c5 01       	movw	r24, r10
    39f8:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
			}
			break;
    39fc:	f3 c2       	rjmp	.+1510   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    39fe:	f6 01       	movw	r30, r12
    3a00:	83 81       	ldd	r24, Z+3	; 0x03
    3a02:	88 23       	and	r24, r24
    3a04:	d1 f0       	breq	.+52     	; 0x3a3a <_Z17handleLinkBusMsgsv+0x510>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    3a06:	48 e0       	ldi	r20, 0x08	; 8
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	b6 01       	movw	r22, r12
    3a0c:	6d 5f       	subi	r22, 0xFD	; 253
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	c5 01       	movw	r24, r10
    3a12:	0e 94 22 31 	call	0x6244	; 0x6244 <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    3a16:	d5 01       	movw	r26, r10
    3a18:	18 96       	adiw	r26, 0x08	; 8
    3a1a:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    3a1c:	c5 01       	movw	r24, r10
    3a1e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_Z11only_digitsPc>
    3a22:	88 23       	and	r24, r24
    3a24:	51 f0       	breq	.+20     	; 0x3a3a <_Z17handleLinkBusMsgsv+0x510>
    3a26:	f5 01       	movw	r30, r10
    3a28:	01 90       	ld	r0, Z+
    3a2a:	00 20       	and	r0, r0
    3a2c:	e9 f7       	brne	.-6      	; 0x3a28 <_Z17handleLinkBusMsgsv+0x4fe>
    3a2e:	31 97       	sbiw	r30, 0x01	; 1
    3a30:	eb 5d       	subi	r30, 0xDB	; 219
    3a32:	f4 40       	sbci	r31, 0x04	; 4
    3a34:	34 97       	sbiw	r30, 0x04	; 4
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <_Z17handleLinkBusMsgsv+0x510>
    3a38:	e3 c2       	rjmp	.+1478   	; 0x4000 <_Z17handleLinkBusMsgsv+0xad6>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    3a3a:	84 e4       	ldi	r24, 0x44	; 68
    3a3c:	95 e0       	ldi	r25, 0x05	; 5
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	8c ec       	ldi	r24, 0xCC	; 204
    3a44:	91 e0       	ldi	r25, 0x01	; 1
    3a46:	9f 93       	push	r25
    3a48:	8f 93       	push	r24
    3a4a:	bf 92       	push	r11
    3a4c:	af 92       	push	r10
    3a4e:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3a52:	61 e0       	ldi	r22, 0x01	; 1
    3a54:	c5 01       	movw	r24, r10
    3a56:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
			}
			break;
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	be c2       	rjmp	.+1404   	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    3a68:	f6 01       	movw	r30, r12
    3a6a:	83 81       	ldd	r24, Z+3	; 0x03
    3a6c:	84 35       	cpi	r24, 0x54	; 84
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <_Z17handleLinkBusMsgsv+0x548>
    3a70:	74 c0       	rjmp	.+232    	; 0x3b5a <_Z17handleLinkBusMsgsv+0x630>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    3a72:	4c e0       	ldi	r20, 0x0C	; 12
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	b6 01       	movw	r22, r12
    3a78:	69 5e       	subi	r22, 0xE9	; 233
    3a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7c:	c5 01       	movw	r24, r10
    3a7e:	0e 94 22 31 	call	0x6244	; 0x6244 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    3a82:	d5 01       	movw	r26, r10
    3a84:	1c 96       	adiw	r26, 0x0c	; 12
    3a86:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    3a88:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    3a8c:	41 95       	neg	r20
    3a8e:	6b e8       	ldi	r22, 0x8B	; 139
    3a90:	75 e0       	ldi	r23, 0x05	; 5
    3a92:	c5 01       	movw	r24, r10
    3a94:	0e 94 3e 19 	call	0x327c	; 0x327c <_Z18validateTimeStringPcPma>
    3a98:	69 87       	std	Y+9, r22	; 0x09
    3a9a:	7a 87       	std	Y+10, r23	; 0x0a
    3a9c:	8b 87       	std	Y+11, r24	; 0x0b
    3a9e:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    3aa0:	61 15       	cp	r22, r1
    3aa2:	71 05       	cpc	r23, r1
    3aa4:	81 05       	cpc	r24, r1
    3aa6:	91 05       	cpc	r25, r1
    3aa8:	41 f1       	breq	.+80     	; 0x3afa <_Z17handleLinkBusMsgsv+0x5d0>
					{
						rv3028_set_epoch(t);
    3aaa:	0e 94 06 2a 	call	0x540c	; 0x540c <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3aae:	89 85       	ldd	r24, Y+9	; 0x09
    3ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab2:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ab4:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ab6:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <g_current_epoch>
    3aba:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <g_current_epoch+0x1>
    3abe:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <g_current_epoch+0x2>
    3ac2:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    3ac6:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3aca:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3ace:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3ad2:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3ad6:	bf 93       	push	r27
    3ad8:	af 93       	push	r26
    3ada:	9f 93       	push	r25
    3adc:	8f 93       	push	r24
    3ade:	89 ed       	ldi	r24, 0xD9	; 217
    3ae0:	91 e0       	ldi	r25, 0x01	; 1
    3ae2:	9f 93       	push	r25
    3ae4:	8f 93       	push	r24
    3ae6:	bf 92       	push	r11
    3ae8:	af 92       	push	r10
    3aea:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	90 c2       	rjmp	.+1312   	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3afa:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_event_start_epoch>
    3afe:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3b02:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3b06:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3b0a:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3b0e:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3b12:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3b16:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3b1a:	e1 2c       	mov	r14, r1
    3b1c:	f1 2c       	mov	r15, r1
    3b1e:	08 e7       	ldi	r16, 0x78	; 120
    3b20:	11 e0       	ldi	r17, 0x01	; 1
    3b22:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    3b26:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3b2a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3b2e:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3b32:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3b36:	bf 93       	push	r27
    3b38:	af 93       	push	r26
    3b3a:	9f 93       	push	r25
    3b3c:	8f 93       	push	r24
    3b3e:	84 ed       	ldi	r24, 0xD4	; 212
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	9f 93       	push	r25
    3b44:	8f 93       	push	r24
    3b46:	bf 92       	push	r11
    3b48:	af 92       	push	r10
    3b4a:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	60 c2       	rjmp	.+1216   	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    3b5a:	83 35       	cpi	r24, 0x53	; 83
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <_Z17handleLinkBusMsgsv+0x636>
    3b5e:	96 c0       	rjmp	.+300    	; 0x3c8c <_Z17handleLinkBusMsgsv+0x762>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3b60:	b6 01       	movw	r22, r12
    3b62:	69 5e       	subi	r22, 0xE9	; 233
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	c5 01       	movw	r24, r10
    3b68:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3b6c:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    3b70:	41 95       	neg	r20
    3b72:	67 e8       	ldi	r22, 0x87	; 135
    3b74:	75 e0       	ldi	r23, 0x05	; 5
    3b76:	c5 01       	movw	r24, r10
    3b78:	0e 94 3e 19 	call	0x327c	; 0x327c <_Z18validateTimeStringPcPma>

					if(s)
    3b7c:	61 15       	cp	r22, r1
    3b7e:	71 05       	cpc	r23, r1
    3b80:	81 05       	cpc	r24, r1
    3b82:	91 05       	cpc	r25, r1
    3b84:	09 f4       	brne	.+2      	; 0x3b88 <_Z17handleLinkBusMsgsv+0x65e>
    3b86:	68 c0       	rjmp	.+208    	; 0x3c58 <_Z17handleLinkBusMsgsv+0x72e>
					{
						g_event_start_epoch = s;
    3b88:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <g_event_start_epoch>
    3b8c:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <g_event_start_epoch+0x1>
    3b90:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_start_epoch+0x2>
    3b94:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3b98:	47 e8       	ldi	r20, 0x87	; 135
    3b9a:	55 e0       	ldi	r21, 0x05	; 5
    3b9c:	64 e1       	ldi	r22, 0x14	; 20
    3b9e:	8c e9       	ldi	r24, 0x9C	; 156
    3ba0:	95 e0       	ldi	r25, 0x05	; 5
    3ba2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    3ba6:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    3baa:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3bae:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3bb2:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3bb6:	8d 83       	std	Y+5, r24	; 0x05
    3bb8:	9e 83       	std	Y+6, r25	; 0x06
    3bba:	af 83       	std	Y+7, r26	; 0x07
    3bbc:	b8 87       	std	Y+8, r27	; 0x08
    3bbe:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    3bc2:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3bc6:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3bca:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3bce:	80 58       	subi	r24, 0x80	; 128
    3bd0:	9e 4a       	sbci	r25, 0xAE	; 174
    3bd2:	ae 4f       	sbci	r26, 0xFE	; 254
    3bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd6:	89 83       	std	Y+1, r24	; 0x01
    3bd8:	9a 83       	std	Y+2, r25	; 0x02
    3bda:	ab 83       	std	Y+3, r26	; 0x03
    3bdc:	bc 83       	std	Y+4, r27	; 0x04
    3bde:	4d 81       	ldd	r20, Y+5	; 0x05
    3be0:	5e 81       	ldd	r21, Y+6	; 0x06
    3be2:	6f 81       	ldd	r22, Y+7	; 0x07
    3be4:	78 85       	ldd	r23, Y+8	; 0x08
    3be6:	48 17       	cp	r20, r24
    3be8:	59 07       	cpc	r21, r25
    3bea:	6a 07       	cpc	r22, r26
    3bec:	7b 07       	cpc	r23, r27
    3bee:	28 f4       	brcc	.+10     	; 0x3bfa <_Z17handleLinkBusMsgsv+0x6d0>
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	ab 81       	ldd	r26, Y+3	; 0x03
    3bf6:	bc 81       	ldd	r27, Y+4	; 0x04
    3bf8:	04 c0       	rjmp	.+8      	; 0x3c02 <_Z17handleLinkBusMsgsv+0x6d8>
    3bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfe:	af 81       	ldd	r26, Y+7	; 0x07
    3c00:	b8 85       	ldd	r27, Y+8	; 0x08
    3c02:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <g_event_finish_epoch>
    3c06:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <g_event_finish_epoch+0x1>
    3c0a:	a0 93 85 05 	sts	0x0585, r26	; 0x800585 <g_event_finish_epoch+0x2>
    3c0e:	b0 93 86 05 	sts	0x0586, r27	; 0x800586 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3c12:	43 e8       	ldi	r20, 0x83	; 131
    3c14:	55 e0       	ldi	r21, 0x05	; 5
    3c16:	65 e1       	ldi	r22, 0x15	; 21
    3c18:	8c e9       	ldi	r24, 0x9C	; 156
    3c1a:	95 e0       	ldi	r25, 0x05	; 5
    3c1c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3c20:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    3c24:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3c28:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3c2c:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3c30:	bf 93       	push	r27
    3c32:	af 93       	push	r26
    3c34:	9f 93       	push	r25
    3c36:	8f 93       	push	r24
    3c38:	83 ee       	ldi	r24, 0xE3	; 227
    3c3a:	91 e0       	ldi	r25, 0x01	; 1
    3c3c:	9f 93       	push	r25
    3c3e:	8f 93       	push	r24
    3c40:	bf 92       	push	r11
    3c42:	af 92       	push	r10
    3c44:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
						startEventUsingRTC();
    3c48:	0e 94 c5 18 	call	0x318a	; 0x318a <_Z18startEventUsingRTCv>
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	f8 94       	cli
    3c50:	de bf       	out	0x3e, r29	; 62
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	cd bf       	out	0x3d, r28	; 61
    3c56:	e1 c1       	rjmp	.+962    	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3c58:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <g_event_start_epoch>
    3c5c:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3c60:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3c64:	b0 91 8a 05 	lds	r27, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3c68:	bf 93       	push	r27
    3c6a:	af 93       	push	r26
    3c6c:	9f 93       	push	r25
    3c6e:	8f 93       	push	r24
    3c70:	83 ee       	ldi	r24, 0xE3	; 227
    3c72:	91 e0       	ldi	r25, 0x01	; 1
    3c74:	9f 93       	push	r25
    3c76:	8f 93       	push	r24
    3c78:	bf 92       	push	r11
    3c7a:	af 92       	push	r10
    3c7c:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	c7 c1       	rjmp	.+910    	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    3c8c:	86 34       	cpi	r24, 0x46	; 70
    3c8e:	09 f0       	breq	.+2      	; 0x3c92 <_Z17handleLinkBusMsgsv+0x768>
    3c90:	6f c0       	rjmp	.+222    	; 0x3d70 <_Z17handleLinkBusMsgsv+0x846>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3c92:	b6 01       	movw	r22, r12
    3c94:	69 5e       	subi	r22, 0xE9	; 233
    3c96:	7f 4f       	sbci	r23, 0xFF	; 255
    3c98:	c5 01       	movw	r24, r10
    3c9a:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3c9e:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    3ca2:	41 95       	neg	r20
    3ca4:	63 e8       	ldi	r22, 0x83	; 131
    3ca6:	75 e0       	ldi	r23, 0x05	; 5
    3ca8:	c5 01       	movw	r24, r10
    3caa:	0e 94 3e 19 	call	0x327c	; 0x327c <_Z18validateTimeStringPcPma>

					if(f)
    3cae:	61 15       	cp	r22, r1
    3cb0:	71 05       	cpc	r23, r1
    3cb2:	81 05       	cpc	r24, r1
    3cb4:	91 05       	cpc	r25, r1
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <_Z17handleLinkBusMsgsv+0x790>
    3cb8:	41 c0       	rjmp	.+130    	; 0x3d3c <_Z17handleLinkBusMsgsv+0x812>
					{
						g_event_finish_epoch = f;
    3cba:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_event_finish_epoch>
    3cbe:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_event_finish_epoch+0x1>
    3cc2:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_event_finish_epoch+0x2>
    3cc6:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3cca:	43 e8       	ldi	r20, 0x83	; 131
    3ccc:	55 e0       	ldi	r21, 0x05	; 5
    3cce:	65 e1       	ldi	r22, 0x15	; 21
    3cd0:	8c e9       	ldi	r24, 0x9C	; 156
    3cd2:	95 e0       	ldi	r25, 0x05	; 5
    3cd4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3cd8:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3cdc:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3ce0:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3ce4:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3ce8:	60 91 87 05 	lds	r22, 0x0587	; 0x800587 <g_event_start_epoch>
    3cec:	70 91 88 05 	lds	r23, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3cf0:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3cf4:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3cf8:	e1 2c       	mov	r14, r1
    3cfa:	f1 2c       	mov	r15, r1
    3cfc:	04 e8       	ldi	r16, 0x84	; 132
    3cfe:	11 e0       	ldi	r17, 0x01	; 1
    3d00:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3d04:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    3d08:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3d0c:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3d10:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3d14:	bf 93       	push	r27
    3d16:	af 93       	push	r26
    3d18:	9f 93       	push	r25
    3d1a:	8f 93       	push	r24
    3d1c:	8e ee       	ldi	r24, 0xEE	; 238
    3d1e:	91 e0       	ldi	r25, 0x01	; 1
    3d20:	9f 93       	push	r25
    3d22:	8f 93       	push	r24
    3d24:	bf 92       	push	r11
    3d26:	af 92       	push	r10
    3d28:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
						startEventUsingRTC();
    3d2c:	0e 94 c5 18 	call	0x318a	; 0x318a <_Z18startEventUsingRTCv>
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	6f c1       	rjmp	.+734    	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3d3c:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <g_event_finish_epoch>
    3d40:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3d44:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3d48:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3d4c:	bf 93       	push	r27
    3d4e:	af 93       	push	r26
    3d50:	9f 93       	push	r25
    3d52:	8f 93       	push	r24
    3d54:	8e ee       	ldi	r24, 0xEE	; 238
    3d56:	91 e0       	ldi	r25, 0x01	; 1
    3d58:	9f 93       	push	r25
    3d5a:	8f 93       	push	r24
    3d5c:	bf 92       	push	r11
    3d5e:	af 92       	push	r10
    3d60:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	55 c1       	rjmp	.+682    	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    3d70:	8f 34       	cpi	r24, 0x4F	; 79
    3d72:	a9 f5       	brne	.+106    	; 0x3dde <_Z17handleLinkBusMsgsv+0x8b4>
				{
					if(lb_buff->fields[FIELD2][0])
    3d74:	87 89       	ldd	r24, Z+23	; 0x17
    3d76:	88 23       	and	r24, r24
    3d78:	d9 f0       	breq	.+54     	; 0x3db0 <_Z17handleLinkBusMsgsv+0x886>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3d7a:	c6 01       	movw	r24, r12
    3d7c:	47 96       	adiw	r24, 0x17	; 23
    3d7e:	0e 94 c3 30 	call	0x6186	; 0x6186 <atoi>

						offset = CLAMP(-24, offset, 24);
    3d82:	89 31       	cpi	r24, 0x19	; 25
    3d84:	54 f4       	brge	.+20     	; 0x3d9a <_Z17handleLinkBusMsgsv+0x870>
    3d86:	08 2e       	mov	r0, r24
    3d88:	00 0c       	add	r0, r0
    3d8a:	99 0b       	sbc	r25, r25
    3d8c:	88 3e       	cpi	r24, 0xE8	; 232
    3d8e:	bf ef       	ldi	r27, 0xFF	; 255
    3d90:	9b 07       	cpc	r25, r27
    3d92:	2c f4       	brge	.+10     	; 0x3d9e <_Z17handleLinkBusMsgsv+0x874>
    3d94:	88 ee       	ldi	r24, 0xE8	; 232
    3d96:	9f ef       	ldi	r25, 0xFF	; 255
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <_Z17handleLinkBusMsgsv+0x874>
    3d9a:	88 e1       	ldi	r24, 0x18	; 24
    3d9c:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    3d9e:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    3da2:	42 e8       	ldi	r20, 0x82	; 130
    3da4:	55 e0       	ldi	r21, 0x05	; 5
    3da6:	66 e1       	ldi	r22, 0x16	; 22
    3da8:	8c e9       	ldi	r24, 0x9C	; 156
    3daa:	95 e0       	ldi	r25, 0x05	; 5
    3dac:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    3db0:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <g_utc_offset>
    3db4:	28 2f       	mov	r18, r24
    3db6:	08 2e       	mov	r0, r24
    3db8:	00 0c       	add	r0, r0
    3dba:	33 0b       	sbc	r19, r19
    3dbc:	3f 93       	push	r19
    3dbe:	8f 93       	push	r24
    3dc0:	8a ef       	ldi	r24, 0xFA	; 250
    3dc2:	91 e0       	ldi	r25, 0x01	; 1
    3dc4:	9f 93       	push	r25
    3dc6:	8f 93       	push	r24
    3dc8:	bf 92       	push	r11
    3dca:	af 92       	push	r10
    3dcc:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	1e c1       	rjmp	.+572    	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3dde:	83 34       	cpi	r24, 0x43	; 67
    3de0:	09 f5       	brne	.+66     	; 0x3e24 <_Z17handleLinkBusMsgsv+0x8fa>
				{
					if(lb_buff->fields[FIELD2][0])
    3de2:	f6 01       	movw	r30, r12
    3de4:	87 89       	ldd	r24, Z+23	; 0x17
    3de6:	88 23       	and	r24, r24
    3de8:	51 f0       	breq	.+20     	; 0x3dfe <_Z17handleLinkBusMsgsv+0x8d4>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3dea:	c6 01       	movw	r24, r12
    3dec:	47 96       	adiw	r24, 0x17	; 23
    3dee:	0e 94 c3 30 	call	0x6186	; 0x6186 <atoi>

						if(c < 512)
    3df2:	81 15       	cp	r24, r1
    3df4:	f2 e0       	ldi	r31, 0x02	; 2
    3df6:	9f 07       	cpc	r25, r31
    3df8:	10 f4       	brcc	.+4      	; 0x3dfe <_Z17handleLinkBusMsgsv+0x8d4>
						{
							rv3028_set_offset_RAM(c);
    3dfa:	0e 94 3f 2b 	call	0x567e	; 0x567e <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    3dfe:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    3e02:	9f 93       	push	r25
    3e04:	8f 93       	push	r24
    3e06:	85 e0       	ldi	r24, 0x05	; 5
    3e08:	92 e0       	ldi	r25, 0x02	; 2
    3e0a:	9f 93       	push	r25
    3e0c:	8f 93       	push	r24
    3e0e:	bf 92       	push	r11
    3e10:	af 92       	push	r10
    3e12:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	fb c0       	rjmp	.+502    	; 0x401a <_Z17handleLinkBusMsgsv+0xaf0>
					doprint = true;
				}
				else
				{
					if(clockConfigurationCheck() == CONFIGURATION_ERROR)
    3e24:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z23clockConfigurationCheckv>
    3e28:	82 30       	cpi	r24, 0x02	; 2
    3e2a:	19 f4       	brne	.+6      	; 0x3e32 <_Z17handleLinkBusMsgsv+0x908>
					{
						reportConfigErrors();
    3e2c:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <_Z18reportConfigErrorsv>
    3e30:	d9 c0       	rjmp	.+434    	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    3e32:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <g_event_start_epoch>
    3e36:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3e3a:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3e3e:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3e42:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3e46:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3e4a:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3e4e:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3e52:	0f 2e       	mov	r0, r31
    3e54:	fb e6       	ldi	r31, 0x6B	; 107
    3e56:	ef 2e       	mov	r14, r31
    3e58:	f1 e0       	ldi	r31, 0x01	; 1
    3e5a:	ff 2e       	mov	r15, r31
    3e5c:	f0 2d       	mov	r31, r0
    3e5e:	08 e7       	ldi	r16, 0x78	; 120
    3e60:	11 e0       	ldi	r17, 0x01	; 1
    3e62:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3e66:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3e6a:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3e6e:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3e72:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3e76:	60 91 87 05 	lds	r22, 0x0587	; 0x800587 <g_event_start_epoch>
    3e7a:	70 91 88 05 	lds	r23, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3e7e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3e82:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3e86:	e1 2c       	mov	r14, r1
    3e88:	f1 2c       	mov	r15, r1
    3e8a:	04 e8       	ldi	r16, 0x84	; 132
    3e8c:	11 e0       	ldi	r17, 0x01	; 1
    3e8e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    3e92:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <g_event_start_epoch>
    3e96:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <g_event_start_epoch+0x1>
    3e9a:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <g_event_start_epoch+0x2>
    3e9e:	70 91 8a 05 	lds	r23, 0x058A	; 0x80058a <g_event_start_epoch+0x3>
    3ea2:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <g_current_epoch>
    3ea6:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3eaa:	a0 91 8d 05 	lds	r26, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3eae:	b0 91 8e 05 	lds	r27, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3eb2:	48 17       	cp	r20, r24
    3eb4:	59 07       	cpc	r21, r25
    3eb6:	6a 07       	cpc	r22, r26
    3eb8:	7b 07       	cpc	r23, r27
    3eba:	08 f0       	brcs	.+2      	; 0x3ebe <_Z17handleLinkBusMsgsv+0x994>
    3ebc:	93 c0       	rjmp	.+294    	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3ebe:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <g_event_finish_epoch>
    3ec2:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <g_event_finish_epoch+0x1>
    3ec6:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <g_event_finish_epoch+0x2>
    3eca:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <g_event_finish_epoch+0x3>
    3ece:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <g_current_epoch>
    3ed2:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <g_current_epoch+0x1>
    3ed6:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <g_current_epoch+0x2>
    3eda:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <g_current_epoch+0x3>
    3ede:	0c e8       	ldi	r16, 0x8C	; 140
    3ee0:	11 e0       	ldi	r17, 0x01	; 1
    3ee2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_Z14reportTimeTillmmPKcS0_>
    3ee6:	7e c0       	rjmp	.+252    	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3ee8:	d6 01       	movw	r26, r12
    3eea:	13 96       	adiw	r26, 0x03	; 3
    3eec:	8c 91       	ld	r24, X
    3eee:	13 97       	sbiw	r26, 0x03	; 3
    3ef0:	83 34       	cpi	r24, 0x43	; 67
    3ef2:	89 f5       	brne	.+98     	; 0x3f56 <_Z17handleLinkBusMsgsv+0xa2c>
				{
					if(lb_buff->fields[FIELD2][0])
    3ef4:	57 96       	adiw	r26, 0x17	; 23
    3ef6:	8c 91       	ld	r24, X
    3ef8:	88 23       	and	r24, r24
    3efa:	a9 f0       	breq	.+42     	; 0x3f26 <_Z17handleLinkBusMsgsv+0x9fc>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    3efc:	c6 01       	movw	r24, r12
    3efe:	47 96       	adiw	r24, 0x17	; 23
    3f00:	0e 94 c3 30 	call	0x6186	; 0x6186 <atoi>

						if((v > -2000) && (v < 2000))
    3f04:	9c 01       	movw	r18, r24
    3f06:	21 53       	subi	r18, 0x31	; 49
    3f08:	38 4f       	sbci	r19, 0xF8	; 248
    3f0a:	2f 39       	cpi	r18, 0x9F	; 159
    3f0c:	3f 40       	sbci	r19, 0x0F	; 15
    3f0e:	58 f4       	brcc	.+22     	; 0x3f26 <_Z17handleLinkBusMsgsv+0x9fc>
						{
							g_atmega_temp_calibration = v;
    3f10:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <g_atmega_temp_calibration+0x1>
    3f14:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    3f18:	4d e0       	ldi	r20, 0x0D	; 13
    3f1a:	51 e0       	ldi	r21, 0x01	; 1
    3f1c:	62 e1       	ldi	r22, 0x12	; 18
    3f1e:	8c e9       	ldi	r24, 0x9C	; 156
    3f20:	95 e0       	ldi	r25, 0x05	; 5
    3f22:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    3f26:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_atmega_temp_calibration>
    3f2a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <g_atmega_temp_calibration+0x1>
    3f2e:	9f 93       	push	r25
    3f30:	8f 93       	push	r24
    3f32:	eb e0       	ldi	r30, 0x0B	; 11
    3f34:	f2 e0       	ldi	r31, 0x02	; 2
    3f36:	ff 93       	push	r31
    3f38:	ef 93       	push	r30
    3f3a:	bf 92       	push	r11
    3f3c:	af 92       	push	r10
    3f3e:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
					lb_send_string(g_tempStr, TRUE);
    3f42:	61 e0       	ldi	r22, 0x01	; 1
    3f44:	c5 01       	movw	r24, r10
    3f46:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    3f4a:	0f 90       	pop	r0
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3f56:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_temperature>
    3f5a:	28 2f       	mov	r18, r24
    3f5c:	08 2e       	mov	r0, r24
    3f5e:	00 0c       	add	r0, r0
    3f60:	33 0b       	sbc	r19, r19
    3f62:	3f 93       	push	r19
    3f64:	8f 93       	push	r24
    3f66:	9f 92       	push	r9
    3f68:	8f 92       	push	r8
    3f6a:	bf 92       	push	r11
    3f6c:	af 92       	push	r10
    3f6e:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3f72:	61 e0       	ldi	r22, 0x01	; 1
    3f74:	c5 01       	movw	r24, r10
    3f76:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3f7a:	40 91 41 05 	lds	r20, 0x0541	; 0x800541 <g_voltage>
    3f7e:	50 91 42 05 	lds	r21, 0x0542	; 0x800542 <g_voltage+0x1>
    3f82:	fa 01       	movw	r30, r20
    3f84:	f6 95       	lsr	r31
    3f86:	e7 95       	ror	r30
    3f88:	f6 95       	lsr	r31
    3f8a:	e7 95       	ror	r30
    3f8c:	9f 01       	movw	r18, r30
    3f8e:	ab e7       	ldi	r26, 0x7B	; 123
    3f90:	b4 e1       	ldi	r27, 0x14	; 20
    3f92:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    3f96:	96 95       	lsr	r25
    3f98:	87 95       	ror	r24
    3f9a:	64 e6       	ldi	r22, 0x64	; 100
    3f9c:	68 9f       	mul	r22, r24
    3f9e:	90 01       	movw	r18, r0
    3fa0:	69 9f       	mul	r22, r25
    3fa2:	30 0d       	add	r19, r0
    3fa4:	11 24       	eor	r1, r1
    3fa6:	42 1b       	sub	r20, r18
    3fa8:	53 0b       	sbc	r21, r19
    3faa:	5f 93       	push	r21
    3fac:	4f 93       	push	r20
    3fae:	9f 01       	movw	r18, r30
    3fb0:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    3fb4:	96 95       	lsr	r25
    3fb6:	87 95       	ror	r24
    3fb8:	9f 93       	push	r25
    3fba:	8f 93       	push	r24
    3fbc:	5f 92       	push	r5
    3fbe:	4f 92       	push	r4
    3fc0:	bf 92       	push	r11
    3fc2:	af 92       	push	r10
    3fc4:	0e 94 4e 31 	call	0x629c	; 0x629c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3fc8:	61 e0       	ldi	r22, 0x01	; 1
    3fca:	c5 01       	movw	r24, r10
    3fcc:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
			}
			break;
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	04 c0       	rjmp	.+8      	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>

			default:
			{
				ee_mgr.send_Help();
    3fdc:	8c e9       	ldi	r24, 0x9C	; 156
    3fde:	95 e0       	ldi	r25, 0x05	; 5
    3fe0:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    3fe4:	d6 01       	movw	r26, r12
    3fe6:	12 96       	adiw	r26, 0x02	; 2
    3fe8:	1c 92       	st	X, r1
    3fea:	1e 92       	st	-X, r1
    3fec:	11 97       	sbiw	r26, 0x01	; 1
		if(send_ack)
		{
			lb_send_NewPrompt();
    3fee:	0e 94 03 0a 	call	0x1406	; 0x1406 <_Z17lb_send_NewPromptv>
    3ff2:	d3 ca       	rjmp	.-2650   	; 0x359a <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	75 cb       	rjmp	.-2326   	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3ff8:	86 e0       	ldi	r24, 0x06	; 6
    3ffa:	73 cb       	rjmp	.-2330   	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
						{
							c = x;
						}
						else
						{
							c = BEACON;
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	71 cb       	rjmp	.-2334   	; 0x36e2 <_Z17handleLinkBusMsgsv+0x1b8>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    4000:	b5 01       	movw	r22, r10
    4002:	84 e4       	ldi	r24, 0x44	; 68
    4004:	95 e0       	ldi	r25, 0x05	; 5
    4006:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    400a:	44 e4       	ldi	r20, 0x44	; 68
    400c:	55 e0       	ldi	r21, 0x05	; 5
    400e:	6e e0       	ldi	r22, 0x0E	; 14
    4010:	8c e9       	ldi	r24, 0x9C	; 156
    4012:	95 e0       	ldi	r25, 0x05	; 5
    4014:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    4018:	10 cd       	rjmp	.-1504   	; 0x3a3a <_Z17handleLinkBusMsgsv+0x510>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	c5 01       	movw	r24, r10
    401e:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
    4022:	e0 cf       	rjmp	.-64     	; 0x3fe4 <_Z17handleLinkBusMsgsv+0xaba>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    4024:	2c 96       	adiw	r28, 0x0c	; 12
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	f8 94       	cli
    402a:	de bf       	out	0x3e, r29	; 62
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	1f 91       	pop	r17
    4036:	0f 91       	pop	r16
    4038:	ff 90       	pop	r15
    403a:	ef 90       	pop	r14
    403c:	df 90       	pop	r13
    403e:	cf 90       	pop	r12
    4040:	bf 90       	pop	r11
    4042:	af 90       	pop	r10
    4044:	9f 90       	pop	r9
    4046:	8f 90       	pop	r8
    4048:	7f 90       	pop	r7
    404a:	6f 90       	pop	r6
    404c:	5f 90       	pop	r5
    404e:	4f 90       	pop	r4
    4050:	3f 90       	pop	r3
    4052:	2f 90       	pop	r2
    4054:	08 95       	ret

00004056 <_Z10processKeyc>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    4056:	cf 92       	push	r12
    4058:	df 92       	push	r13
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	1f 92       	push	r1
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    4068:	84 34       	cpi	r24, 0x44	; 68
    406a:	39 f4       	brne	.+14     	; 0x407a <_Z10processKeyc+0x24>
		{
			g_DTMF_unlocked = FALSE;
    406c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    4070:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4074:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    4078:	20 c4       	rjmp	.+2112   	; 0x48ba <_Z10processKeyc+0x864>
		}

		if(!g_DTMF_unlocked)
    407a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_DTMF_unlocked>
    407e:	91 11       	cpse	r25, r1
    4080:	07 c0       	rjmp	.+14     	; 0x4090 <_Z10processKeyc+0x3a>
		{
			state = STATE_CHECK_PASSWORD;
    4082:	22 e1       	ldi	r18, 0x12	; 18
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    408a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    408e:	ab c3       	rjmp	.+1878   	; 0x47e6 <_Z10processKeyc+0x790>
		}
		else
		{
			if(key == '*')
    4090:	8a 32       	cpi	r24, 0x2A	; 42
    4092:	a9 f4       	brne	.+42     	; 0x40be <_Z10processKeyc+0x68>
			{
				state = STATE_SENTENCE_START;
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    409c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    40a0:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    40a4:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE12stringLength>
				value = 0;
    40a8:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE5value+0x1>
    40ac:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE5value>
				digits = 0;
    40b0:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    40b4:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    40b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_DTMF_unlocked>
    40bc:	fe c3       	rjmp	.+2044   	; 0x48ba <_Z10processKeyc+0x864>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    40be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    40c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40c6:	31 97       	sbiw	r30, 0x01	; 1
    40c8:	e4 31       	cpi	r30, 0x14	; 20
    40ca:	f1 05       	cpc	r31, r1
    40cc:	08 f0       	brcs	.+2      	; 0x40d0 <_Z10processKeyc+0x7a>
    40ce:	f5 c3       	rjmp	.+2026   	; 0x48ba <_Z10processKeyc+0x864>
    40d0:	28 2f       	mov	r18, r24
    40d2:	ea 56       	subi	r30, 0x6A	; 106
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    40da:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    40de:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ10processKeycE12stringLength>
				value = 0;
    40e2:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ10processKeycE5value+0x1>
    40e6:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ10processKeycE5value>
				digits = 0;
    40ea:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    40ee:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    40f2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <g_DTMF_unlocked>
    40f6:	88 23       	and	r24, r24
    40f8:	09 f4       	brne	.+2      	; 0x40fc <_Z10processKeyc+0xa6>
    40fa:	df c3       	rjmp	.+1982   	; 0x48ba <_Z10processKeyc+0x864>
				{
					if(key == 'A')
    40fc:	21 34       	cpi	r18, 0x41	; 65
    40fe:	39 f4       	brne	.+14     	; 0x410e <_Z10processKeyc+0xb8>
					{
						state = STATE_A;
    4100:	82 e0       	ldi	r24, 0x02	; 2
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4108:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    410c:	d6 c3       	rjmp	.+1964   	; 0x48ba <_Z10processKeyc+0x864>
					}
					else if(key == 'B')
    410e:	22 34       	cpi	r18, 0x42	; 66
    4110:	39 f4       	brne	.+14     	; 0x4120 <_Z10processKeyc+0xca>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    4112:	83 e1       	ldi	r24, 0x13	; 19
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    411a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    411e:	cd c3       	rjmp	.+1946   	; 0x48ba <_Z10processKeyc+0x864>
					}
					else if(key == 'C')
    4120:	23 34       	cpi	r18, 0x43	; 67
    4122:	39 f4       	brne	.+14     	; 0x4132 <_Z10processKeyc+0xdc>
					{
						state = STATE_C;
    4124:	87 e0       	ldi	r24, 0x07	; 7
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    412c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4130:	c4 c3       	rjmp	.+1928   	; 0x48ba <_Z10processKeyc+0x864>
					}
					else if(key != '*')
    4132:	2a 32       	cpi	r18, 0x2A	; 42
    4134:	09 f4       	brne	.+2      	; 0x4138 <_Z10processKeyc+0xe2>
    4136:	c1 c3       	rjmp	.+1922   	; 0x48ba <_Z10processKeyc+0x864>
					{
						value = key - '0';
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	20 53       	subi	r18, 0x30	; 48
    413c:	31 09       	sbc	r19, r1
    413e:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4142:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							if(g_AM_enabled)
    4146:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_AM_enabled>
    414a:	81 11       	cpse	r24, r1
							{
								setupPortsForF1975();
    414c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z18setupPortsForF1975v>
							}
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    4150:	84 e1       	ldi	r24, 0x14	; 20
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4158:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    415c:	ae c3       	rjmp	.+1884   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_A:
			{
				state = STATE_SHUTDOWN;
    415e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4162:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>

				if(key == '0')
    4166:	80 33       	cpi	r24, 0x30	; 48
    4168:	39 f4       	brne	.+14     	; 0x4178 <_Z10processKeyc+0x122>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    416a:	83 e0       	ldi	r24, 0x03	; 3
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4172:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4176:	a1 c3       	rjmp	.+1858   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '1')
    4178:	81 33       	cpi	r24, 0x31	; 49
    417a:	39 f4       	brne	.+14     	; 0x418a <_Z10processKeyc+0x134>
				{
					state = STATE_START_TRANSMISSIONS;
    417c:	84 e0       	ldi	r24, 0x04	; 4
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4184:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4188:	98 c3       	rjmp	.+1840   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '2')
    418a:	82 33       	cpi	r24, 0x32	; 50
    418c:	39 f4       	brne	.+14     	; 0x419c <_Z10processKeyc+0x146>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    418e:	85 e0       	ldi	r24, 0x05	; 5
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    419a:	8f c3       	rjmp	.+1822   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '3')
    419c:	83 33       	cpi	r24, 0x33	; 51
    419e:	39 f4       	brne	.+14     	; 0x41ae <_Z10processKeyc+0x158>
				{
					state = STATE_START_TRANSMITTING_NOW;
    41a0:	86 e0       	ldi	r24, 0x06	; 6
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    41a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    41ac:	86 c3       	rjmp	.+1804   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key == '8') && setPasswordEnabled)
    41ae:	88 33       	cpi	r24, 0x38	; 56
    41b0:	09 f0       	breq	.+2      	; 0x41b4 <_Z10processKeyc+0x15e>
    41b2:	83 c3       	rjmp	.+1798   	; 0x48ba <_Z10processKeyc+0x864>
    41b4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE18setPasswordEnabled>
    41b8:	88 23       	and	r24, r24
    41ba:	09 f4       	brne	.+2      	; 0x41be <_Z10processKeyc+0x168>
    41bc:	7e c3       	rjmp	.+1788   	; 0x48ba <_Z10processKeyc+0x864>
				{
					state = STATE_SET_PASSWORD;
    41be:	81 e1       	ldi	r24, 0x11	; 17
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    41c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    41ca:	77 c3       	rjmp	.+1774   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    41cc:	80 ed       	ldi	r24, 0xD0	; 208
    41ce:	82 0f       	add	r24, r18
    41d0:	8a 30       	cpi	r24, 0x0A	; 10
    41d2:	08 f5       	brcc	.+66     	; 0x4216 <_Z10processKeyc+0x1c0>
				{
					value *= 10;
					value += key - '0';
    41d4:	40 91 78 04 	lds	r20, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    41d8:	50 91 79 04 	lds	r21, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    41dc:	ca 01       	movw	r24, r20
    41de:	88 0f       	add	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	44 0f       	add	r20, r20
    41e4:	55 1f       	adc	r21, r21
    41e6:	44 0f       	add	r20, r20
    41e8:	55 1f       	adc	r21, r21
    41ea:	44 0f       	add	r20, r20
    41ec:	55 1f       	adc	r21, r21
    41ee:	48 0f       	add	r20, r24
    41f0:	59 1f       	adc	r21, r25
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	20 53       	subi	r18, 0x30	; 48
    41f6:	31 09       	sbc	r19, r1
    41f8:	42 0f       	add	r20, r18
    41fa:	53 1f       	adc	r21, r19
    41fc:	50 93 79 04 	sts	0x0479, r21	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4200:	40 93 78 04 	sts	0x0478, r20	; 0x800478 <_ZZ10processKeycE5value>
					digits++;
    4204:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    4208:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    420c:	01 96       	adiw	r24, 0x01	; 1
    420e:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4212:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
				}

				if(digits >= 2)
    4216:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    421a:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    421e:	02 97       	sbiw	r24, 0x02	; 2
    4220:	0c f4       	brge	.+2      	; 0x4224 <_Z10processKeyc+0x1ce>
    4222:	4b c3       	rjmp	.+1686   	; 0x48ba <_Z10processKeyc+0x864>
				{
					state = STATE_SHUTDOWN;
    4224:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4228:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    422c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    4230:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    4234:	98 13       	cpse	r25, r24
    4236:	41 c3       	rjmp	.+1666   	; 0x48ba <_Z10processKeyc+0x864>
					{
						state = STATE_SENTENCE_START;
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4240:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4244:	3a c3       	rjmp	.+1652   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    4246:	83 32       	cpi	r24, 0x23	; 35
    4248:	09 f0       	breq	.+2      	; 0x424c <_Z10processKeyc+0x1f6>
    424a:	37 c3       	rjmp	.+1646   	; 0x48ba <_Z10processKeyc+0x864>
				{
					stopEventNow(PROGRAMMATIC);
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    4252:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4256:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    425a:	2f c3       	rjmp	.+1630   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    425c:	83 32       	cpi	r24, 0x23	; 35
    425e:	09 f0       	breq	.+2      	; 0x4262 <_Z10processKeyc+0x20c>
    4260:	2c c3       	rjmp	.+1624   	; 0x48ba <_Z10processKeyc+0x864>
				{
					startEventNow(PROGRAMMATIC);
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    4268:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    426c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4270:	24 c3       	rjmp	.+1608   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    4272:	83 32       	cpi	r24, 0x23	; 35
    4274:	09 f0       	breq	.+2      	; 0x4278 <_Z10processKeyc+0x222>
    4276:	21 c3       	rjmp	.+1602   	; 0x48ba <_Z10processKeyc+0x864>
				{
					startEventUsingRTC();
    4278:	0e 94 c5 18 	call	0x318a	; 0x318a <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    427c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4280:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4284:	1a c3       	rjmp	.+1588   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    4286:	83 32       	cpi	r24, 0x23	; 35
    4288:	09 f0       	breq	.+2      	; 0x428c <_Z10processKeyc+0x236>
    428a:	17 c3       	rjmp	.+1582   	; 0x48ba <_Z10processKeyc+0x864>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    428c:	62 e0       	ldi	r22, 0x02	; 2
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    4296:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    429a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    429e:	0d c3       	rjmp	.+1562   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    42a0:	81 33       	cpi	r24, 0x31	; 49
    42a2:	39 f4       	brne	.+14     	; 0x42b2 <_Z10processKeyc+0x25c>
				{
					state = STATE_RECEIVING_CALLSIGN;
    42a4:	88 e0       	ldi	r24, 0x08	; 8
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42b0:	04 c3       	rjmp	.+1544   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '2')
    42b2:	82 33       	cpi	r24, 0x32	; 50
    42b4:	39 f4       	brne	.+14     	; 0x42c4 <_Z10processKeyc+0x26e>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    42b6:	89 e0       	ldi	r24, 0x09	; 9
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42be:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42c2:	fb c2       	rjmp	.+1526   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    42c4:	83 33       	cpi	r24, 0x33	; 51
    42c6:	39 f4       	brne	.+14     	; 0x42d6 <_Z10processKeyc+0x280>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    42c8:	8d e0       	ldi	r24, 0x0D	; 13
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42d4:	f2 c2       	rjmp	.+1508   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '4')
    42d6:	84 33       	cpi	r24, 0x34	; 52
    42d8:	39 f4       	brne	.+14     	; 0x42e8 <_Z10processKeyc+0x292>
				{
					state = STATE_RECEIVING_START_TIME;
    42da:	8a e0       	ldi	r24, 0x0A	; 10
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42e6:	e9 c2       	rjmp	.+1490   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '5')
    42e8:	85 33       	cpi	r24, 0x35	; 53
    42ea:	39 f4       	brne	.+14     	; 0x42fa <_Z10processKeyc+0x2a4>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    42ec:	8b e0       	ldi	r24, 0x0B	; 11
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    42f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    42f8:	e0 c2       	rjmp	.+1472   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '6')
    42fa:	86 33       	cpi	r24, 0x36	; 54
    42fc:	69 f4       	brne	.+26     	; 0x4318 <_Z10processKeyc+0x2c2>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    42fe:	8c e0       	ldi	r24, 0x0C	; 12
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4306:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4312:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
    4316:	d1 c2       	rjmp	.+1442   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == '9')
    4318:	89 33       	cpi	r24, 0x39	; 57
    431a:	39 f4       	brne	.+14     	; 0x432a <_Z10processKeyc+0x2d4>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    431c:	8e e0       	ldi	r24, 0x0E	; 14
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    4328:	c8 c2       	rjmp	.+1424   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == 'A')
    432a:	81 34       	cpi	r24, 0x41	; 65
    432c:	39 f4       	brne	.+14     	; 0x433c <_Z10processKeyc+0x2e6>
				{
					state = STATE_SET_PTT_PERIODIC_RESET;
    432e:	8f e0       	ldi	r24, 0x0F	; 15
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4336:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    433a:	bf c2       	rjmp	.+1406   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == 'B')
    433c:	82 34       	cpi	r24, 0x42	; 66
    433e:	39 f4       	brne	.+14     	; 0x434e <_Z10processKeyc+0x2f8>
				{
					state = STATE_GET_BATTERY_VOLTAGE;
    4340:	80 e1       	ldi	r24, 0x10	; 16
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4348:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    434c:	b6 c2       	rjmp	.+1388   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else
				{
					state = STATE_SHUTDOWN;
    434e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4352:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4356:	b1 c2       	rjmp	.+1378   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    4358:	83 32       	cpi	r24, 0x23	; 35
    435a:	c1 f4       	brne	.+48     	; 0x438c <_Z10processKeyc+0x336>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    435c:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4360:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4364:	04 97       	sbiw	r24, 0x04	; 4
    4366:	6c f0       	brlt	.+26     	; 0x4382 <_Z10processKeyc+0x32c>
					{
						strcpy((char*)g_unlockCode, receivedString);
    4368:	60 e6       	ldi	r22, 0x60	; 96
    436a:	74 e0       	ldi	r23, 0x04	; 4
    436c:	84 e4       	ldi	r24, 0x44	; 68
    436e:	95 e0       	ldi	r25, 0x05	; 5
    4370:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    4374:	44 e4       	ldi	r20, 0x44	; 68
    4376:	55 e0       	ldi	r21, 0x05	; 5
    4378:	6e e0       	ldi	r22, 0x0E	; 14
    437a:	8c e9       	ldi	r24, 0x9C	; 156
    437c:	95 e0       	ldi	r25, 0x05	; 5
    437e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    4382:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4386:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    438a:	97 c2       	rjmp	.+1326   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    438c:	80 ed       	ldi	r24, 0xD0	; 208
    438e:	82 0f       	add	r24, r18
    4390:	8a 30       	cpi	r24, 0x0A	; 10
    4392:	08 f0       	brcs	.+2      	; 0x4396 <_Z10processKeyc+0x340>
    4394:	92 c2       	rjmp	.+1316   	; 0x48ba <_Z10processKeyc+0x864>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    4396:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    439a:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    439e:	89 30       	cpi	r24, 0x09	; 9
    43a0:	91 05       	cpc	r25, r1
    43a2:	0c f0       	brlt	.+2      	; 0x43a6 <_Z10processKeyc+0x350>
    43a4:	8a c2       	rjmp	.+1300   	; 0x48ba <_Z10processKeyc+0x864>
					{
						receivedString[stringLength++] = key;
    43a6:	ac 01       	movw	r20, r24
    43a8:	4f 5f       	subi	r20, 0xFF	; 255
    43aa:	5f 4f       	sbci	r21, 0xFF	; 255
    43ac:	50 93 7b 04 	sts	0x047B, r21	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    43b0:	40 93 7a 04 	sts	0x047A, r20	; 0x80047a <_ZZ10processKeycE12stringLength>
    43b4:	fc 01       	movw	r30, r24
    43b6:	e0 5a       	subi	r30, 0xA0	; 160
    43b8:	fb 4f       	sbci	r31, 0xFB	; 251
    43ba:	20 83       	st	Z, r18
						receivedString[stringLength] = '\0';
    43bc:	fa 01       	movw	r30, r20
    43be:	e0 5a       	subi	r30, 0xA0	; 160
    43c0:	fb 4f       	sbci	r31, 0xFB	; 251
    43c2:	10 82       	st	Z, r1
    43c4:	7a c2       	rjmp	.+1268   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    43c6:	83 32       	cpi	r24, 0x23	; 35
    43c8:	e1 f4       	brne	.+56     	; 0x4402 <_Z10processKeyc+0x3ac>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    43ca:	e0 e6       	ldi	r30, 0x60	; 96
    43cc:	f4 e0       	ldi	r31, 0x04	; 4
    43ce:	01 90       	ld	r0, Z+
    43d0:	00 20       	and	r0, r0
    43d2:	e9 f7       	brne	.-6      	; 0x43ce <_Z10processKeyc+0x378>
    43d4:	31 97       	sbiw	r30, 0x01	; 1
    43d6:	e0 56       	subi	r30, 0x60	; 96
    43d8:	f4 40       	sbci	r31, 0x04	; 4
    43da:	75 97       	sbiw	r30, 0x15	; 21
    43dc:	68 f4       	brcc	.+26     	; 0x43f8 <_Z10processKeyc+0x3a2>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    43de:	60 e6       	ldi	r22, 0x60	; 96
    43e0:	74 e0       	ldi	r23, 0x04	; 4
    43e2:	88 e2       	ldi	r24, 0x28	; 40
    43e4:	95 e0       	ldi	r25, 0x05	; 5
    43e6:	0e 94 1b 31 	call	0x6236	; 0x6236 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    43ea:	48 e2       	ldi	r20, 0x28	; 40
    43ec:	55 e0       	ldi	r21, 0x05	; 5
    43ee:	6b e0       	ldi	r22, 0x0B	; 11
    43f0:	8c e9       	ldi	r24, 0x9C	; 156
    43f2:	95 e0       	ldi	r25, 0x05	; 5
    43f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    43f8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    43fc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4400:	5c c2       	rjmp	.+1208   	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    4402:	80 ed       	ldi	r24, 0xD0	; 208
    4404:	82 0f       	add	r24, r18
    4406:	8a 30       	cpi	r24, 0x0A	; 10
    4408:	08 f0       	brcs	.+2      	; 0x440c <_Z10processKeyc+0x3b6>
    440a:	57 c2       	rjmp	.+1198   	; 0x48ba <_Z10processKeyc+0x864>
				{
					if(digits)
    440c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    4410:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4414:	89 2b       	or	r24, r25
    4416:	c1 f1       	breq	.+112    	; 0x4488 <_Z10processKeyc+0x432>
					{
						value = value * 10 + (key - '0');
    4418:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    441c:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4420:	ac 01       	movw	r20, r24
    4422:	44 0f       	add	r20, r20
    4424:	55 1f       	adc	r21, r21
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	88 0f       	add	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	84 0f       	add	r24, r20
    4434:	95 1f       	adc	r25, r21
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	20 53       	subi	r18, 0x30	; 48
    443a:	31 09       	sbc	r19, r1
    443c:	28 0f       	add	r18, r24
    443e:	39 1f       	adc	r19, r25
    4440:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4444:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    4448:	27 32       	cpi	r18, 0x27	; 39
    444a:	31 05       	cpc	r19, r1
    444c:	c4 f4       	brge	.+48     	; 0x447e <_Z10processKeyc+0x428>
    444e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4452:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4456:	84 31       	cpi	r24, 0x14	; 20
    4458:	91 05       	cpc	r25, r1
    445a:	8c f4       	brge	.+34     	; 0x447e <_Z10processKeyc+0x428>
						{
							receivedString[stringLength] = keyMorse[value];
    445c:	fc 01       	movw	r30, r24
    445e:	e0 5a       	subi	r30, 0xA0	; 160
    4460:	fb 4f       	sbci	r31, 0xFB	; 251
    4462:	d9 01       	movw	r26, r18
    4464:	ad 59       	subi	r26, 0x9D	; 157
    4466:	bd 4f       	sbci	r27, 0xFD	; 253
    4468:	2c 91       	ld	r18, X
    446a:	20 83       	st	Z, r18
							stringLength++;
    446c:	01 96       	adiw	r24, 0x01	; 1
    446e:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4472:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    4476:	fc 01       	movw	r30, r24
    4478:	e0 5a       	subi	r30, 0xA0	; 160
    447a:	fb 4f       	sbci	r31, 0xFB	; 251
    447c:	10 82       	st	Z, r1
						}

						digits = 0;
    447e:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4482:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>
    4486:	19 c2       	rjmp	.+1074   	; 0x48ba <_Z10processKeyc+0x864>
					}
					else
					{
						value = key - '0';
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	20 53       	subi	r18, 0x30	; 48
    448c:	31 09       	sbc	r19, r1
    448e:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4492:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
						digits = 1;
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    449e:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
    44a2:	0b c2       	rjmp	.+1046   	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    44a4:	83 32       	cpi	r24, 0x23	; 35
    44a6:	f9 f4       	brne	.+62     	; 0x44e6 <_Z10processKeyc+0x490>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    44a8:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    44ac:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    44b0:	82 31       	cpi	r24, 0x12	; 18
    44b2:	91 05       	cpc	r25, r1
    44b4:	98 f4       	brcc	.+38     	; 0x44dc <_Z10processKeyc+0x486>
					{
						Fox_t holdFox = (Fox_t)value;
    44b6:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    44b8:	ae 01       	movw	r20, r28
    44ba:	4f 5f       	subi	r20, 0xFF	; 255
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	60 e1       	ldi	r22, 0x10	; 16
    44c0:	8c e9       	ldi	r24, 0x9C	; 156
    44c2:	95 e0       	ldi	r25, 0x05	; 5
    44c4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    44c8:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <g_fox>
    44cc:	99 81       	ldd	r25, Y+1	; 0x01
    44ce:	98 17       	cp	r25, r24
    44d0:	29 f0       	breq	.+10     	; 0x44dc <_Z10processKeyc+0x486>
						{
							setupForFox(&holdFox, START_NOTHING);
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	ce 01       	movw	r24, r28
    44d6:	01 96       	adiw	r24, 0x01	; 1
    44d8:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
					state = STATE_SHUTDOWN;
    44dc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    44e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    44e4:	ea c1       	rjmp	.+980    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    44e6:	80 ed       	ldi	r24, 0xD0	; 208
    44e8:	82 0f       	add	r24, r18
    44ea:	8a 30       	cpi	r24, 0x0A	; 10
    44ec:	08 f0       	brcs	.+2      	; 0x44f0 <_Z10processKeyc+0x49a>
    44ee:	e5 c1       	rjmp	.+970    	; 0x48ba <_Z10processKeyc+0x864>
				{
					value *= 10;
					value += key - '0';
    44f0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    44f4:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    44f8:	ac 01       	movw	r20, r24
    44fa:	44 0f       	add	r20, r20
    44fc:	55 1f       	adc	r21, r21
    44fe:	88 0f       	add	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	88 0f       	add	r24, r24
    4504:	99 1f       	adc	r25, r25
    4506:	88 0f       	add	r24, r24
    4508:	99 1f       	adc	r25, r25
    450a:	84 0f       	add	r24, r20
    450c:	95 1f       	adc	r25, r21
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	20 53       	subi	r18, 0x30	; 48
    4512:	31 09       	sbc	r19, r1
    4514:	82 0f       	add	r24, r18
    4516:	93 1f       	adc	r25, r19
    4518:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE5value+0x1>
    451c:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE5value>
    4520:	cc c1       	rjmp	.+920    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    4522:	83 32       	cpi	r24, 0x23	; 35
    4524:	f9 f4       	brne	.+62     	; 0x4564 <_Z10processKeyc+0x50e>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    4526:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    452a:	41 95       	neg	r20
    452c:	6b e8       	ldi	r22, 0x8B	; 139
    452e:	75 e0       	ldi	r23, 0x05	; 5
    4530:	80 e6       	ldi	r24, 0x60	; 96
    4532:	94 e0       	ldi	r25, 0x04	; 4
    4534:	0e 94 3e 19 	call	0x327c	; 0x327c <_Z18validateTimeStringPcPma>
    4538:	6b 01       	movw	r12, r22
    453a:	7c 01       	movw	r14, r24

					if(t)
    453c:	61 15       	cp	r22, r1
    453e:	71 05       	cpc	r23, r1
    4540:	81 05       	cpc	r24, r1
    4542:	91 05       	cpc	r25, r1
    4544:	51 f0       	breq	.+20     	; 0x455a <_Z10processKeyc+0x504>
					{
						rv3028_set_epoch(t);
    4546:	0e 94 06 2a 	call	0x540c	; 0x540c <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    454a:	c0 92 8b 05 	sts	0x058B, r12	; 0x80058b <g_current_epoch>
    454e:	d0 92 8c 05 	sts	0x058C, r13	; 0x80058c <g_current_epoch+0x1>
    4552:	e0 92 8d 05 	sts	0x058D, r14	; 0x80058d <g_current_epoch+0x2>
    4556:	f0 92 8e 05 	sts	0x058E, r15	; 0x80058e <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    455a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    455e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4562:	ab c1       	rjmp	.+854    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    4564:	80 ed       	ldi	r24, 0xD0	; 208
    4566:	82 0f       	add	r24, r18
    4568:	8a 30       	cpi	r24, 0x0A	; 10
    456a:	08 f0       	brcs	.+2      	; 0x456e <_Z10processKeyc+0x518>
    456c:	a6 c1       	rjmp	.+844    	; 0x48ba <_Z10processKeyc+0x864>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    456e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4572:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4576:	88 32       	cpi	r24, 0x28	; 40
    4578:	91 05       	cpc	r25, r1
    457a:	0c f0       	brlt	.+2      	; 0x457e <_Z10processKeyc+0x528>
    457c:	9e c1       	rjmp	.+828    	; 0x48ba <_Z10processKeyc+0x864>
					{
						receivedString[stringLength] = key;
    457e:	fc 01       	movw	r30, r24
    4580:	e0 5a       	subi	r30, 0xA0	; 160
    4582:	fb 4f       	sbci	r31, 0xFB	; 251
    4584:	20 83       	st	Z, r18
						stringLength++;
    4586:	01 96       	adiw	r24, 0x01	; 1
    4588:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    458c:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    4590:	fc 01       	movw	r30, r24
    4592:	e0 5a       	subi	r30, 0xA0	; 160
    4594:	fb 4f       	sbci	r31, 0xFB	; 251
    4596:	10 82       	st	Z, r1
    4598:	90 c1       	rjmp	.+800    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    459a:	83 32       	cpi	r24, 0x23	; 35
    459c:	39 f5       	brne	.+78     	; 0x45ec <_Z10processKeyc+0x596>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    459e:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    45a2:	41 95       	neg	r20
    45a4:	67 e8       	ldi	r22, 0x87	; 135
    45a6:	75 e0       	ldi	r23, 0x05	; 5
    45a8:	80 e6       	ldi	r24, 0x60	; 96
    45aa:	94 e0       	ldi	r25, 0x04	; 4
    45ac:	0e 94 3e 19 	call	0x327c	; 0x327c <_Z18validateTimeStringPcPma>

					if(s)
    45b0:	61 15       	cp	r22, r1
    45b2:	71 05       	cpc	r23, r1
    45b4:	81 05       	cpc	r24, r1
    45b6:	91 05       	cpc	r25, r1
    45b8:	a1 f0       	breq	.+40     	; 0x45e2 <_Z10processKeyc+0x58c>
					{
						g_event_start_epoch = s;
    45ba:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <g_event_start_epoch>
    45be:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <g_event_start_epoch+0x1>
    45c2:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <g_event_start_epoch+0x2>
    45c6:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    45ca:	47 e8       	ldi	r20, 0x87	; 135
    45cc:	55 e0       	ldi	r21, 0x05	; 5
    45ce:	64 e1       	ldi	r22, 0x14	; 20
    45d0:	8c e9       	ldi	r24, 0x9C	; 156
    45d2:	95 e0       	ldi	r25, 0x05	; 5
    45d4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    45d8:	63 e0       	ldi	r22, 0x03	; 3
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    45e2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    45e6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    45ea:	67 c1       	rjmp	.+718    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    45ec:	80 ed       	ldi	r24, 0xD0	; 208
    45ee:	82 0f       	add	r24, r18
    45f0:	8a 30       	cpi	r24, 0x0A	; 10
    45f2:	08 f0       	brcs	.+2      	; 0x45f6 <_Z10processKeyc+0x5a0>
    45f4:	62 c1       	rjmp	.+708    	; 0x48ba <_Z10processKeyc+0x864>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    45f6:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    45fa:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    45fe:	88 32       	cpi	r24, 0x28	; 40
    4600:	91 05       	cpc	r25, r1
    4602:	0c f0       	brlt	.+2      	; 0x4606 <_Z10processKeyc+0x5b0>
    4604:	5a c1       	rjmp	.+692    	; 0x48ba <_Z10processKeyc+0x864>
					{
						receivedString[stringLength] = key;
    4606:	fc 01       	movw	r30, r24
    4608:	e0 5a       	subi	r30, 0xA0	; 160
    460a:	fb 4f       	sbci	r31, 0xFB	; 251
    460c:	20 83       	st	Z, r18
						stringLength++;
    460e:	01 96       	adiw	r24, 0x01	; 1
    4610:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4614:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    4618:	fc 01       	movw	r30, r24
    461a:	e0 5a       	subi	r30, 0xA0	; 160
    461c:	fb 4f       	sbci	r31, 0xFB	; 251
    461e:	10 82       	st	Z, r1
    4620:	4c c1       	rjmp	.+664    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    4622:	83 32       	cpi	r24, 0x23	; 35
    4624:	39 f5       	brne	.+78     	; 0x4674 <_Z10processKeyc+0x61e>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4626:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <g_utc_offset>
    462a:	41 95       	neg	r20
    462c:	63 e8       	ldi	r22, 0x83	; 131
    462e:	75 e0       	ldi	r23, 0x05	; 5
    4630:	80 e6       	ldi	r24, 0x60	; 96
    4632:	94 e0       	ldi	r25, 0x04	; 4
    4634:	0e 94 3e 19 	call	0x327c	; 0x327c <_Z18validateTimeStringPcPma>

					if(f)
    4638:	61 15       	cp	r22, r1
    463a:	71 05       	cpc	r23, r1
    463c:	81 05       	cpc	r24, r1
    463e:	91 05       	cpc	r25, r1
    4640:	a1 f0       	breq	.+40     	; 0x466a <_Z10processKeyc+0x614>
					{
						g_event_finish_epoch = f;
    4642:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <g_event_finish_epoch>
    4646:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <g_event_finish_epoch+0x1>
    464a:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <g_event_finish_epoch+0x2>
    464e:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4652:	43 e8       	ldi	r20, 0x83	; 131
    4654:	55 e0       	ldi	r21, 0x05	; 5
    4656:	65 e1       	ldi	r22, 0x15	; 21
    4658:	8c e9       	ldi	r24, 0x9C	; 156
    465a:	95 e0       	ldi	r25, 0x05	; 5
    465c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4660:	63 e0       	ldi	r22, 0x03	; 3
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
					}

					state = STATE_SHUTDOWN;
    466a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    466e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4672:	23 c1       	rjmp	.+582    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    4674:	80 ed       	ldi	r24, 0xD0	; 208
    4676:	82 0f       	add	r24, r18
    4678:	8a 30       	cpi	r24, 0x0A	; 10
    467a:	08 f0       	brcs	.+2      	; 0x467e <_Z10processKeyc+0x628>
    467c:	1e c1       	rjmp	.+572    	; 0x48ba <_Z10processKeyc+0x864>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    467e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ10processKeycE12stringLength>
    4682:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    4686:	88 32       	cpi	r24, 0x28	; 40
    4688:	91 05       	cpc	r25, r1
    468a:	0c f0       	brlt	.+2      	; 0x468e <_Z10processKeyc+0x638>
    468c:	16 c1       	rjmp	.+556    	; 0x48ba <_Z10processKeyc+0x864>
					{
						receivedString[stringLength] = key;
    468e:	fc 01       	movw	r30, r24
    4690:	e0 5a       	subi	r30, 0xA0	; 160
    4692:	fb 4f       	sbci	r31, 0xFB	; 251
    4694:	20 83       	st	Z, r18
						stringLength++;
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ10processKeycE12stringLength+0x1>
    469c:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    46a0:	fc 01       	movw	r30, r24
    46a2:	e0 5a       	subi	r30, 0xA0	; 160
    46a4:	fb 4f       	sbci	r31, 0xFB	; 251
    46a6:	10 82       	st	Z, r1
    46a8:	08 c1       	rjmp	.+528    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    46aa:	83 32       	cpi	r24, 0x23	; 35
    46ac:	e9 f4       	brne	.+58     	; 0x46e8 <_Z10processKeyc+0x692>
				{
					if((value >= 0) && (value < 24))
    46ae:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    46b2:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    46b6:	88 31       	cpi	r24, 0x18	; 24
    46b8:	91 05       	cpc	r25, r1
    46ba:	88 f4       	brcc	.+34     	; 0x46de <_Z10processKeyc+0x688>
					{
						int8_t hold = value * digits;
    46bc:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    46c0:	98 9f       	mul	r25, r24
    46c2:	80 2d       	mov	r24, r0
    46c4:	11 24       	eor	r1, r1
    46c6:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    46c8:	ae 01       	movw	r20, r28
    46ca:	4f 5f       	subi	r20, 0xFF	; 255
    46cc:	5f 4f       	sbci	r21, 0xFF	; 255
    46ce:	66 e1       	ldi	r22, 0x16	; 22
    46d0:	8c e9       	ldi	r24, 0x9C	; 156
    46d2:	95 e0       	ldi	r25, 0x05	; 5
    46d4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    46de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    46e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    46e6:	e9 c0       	rjmp	.+466    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    46e8:	80 ed       	ldi	r24, 0xD0	; 208
    46ea:	82 0f       	add	r24, r18
    46ec:	8a 30       	cpi	r24, 0x0A	; 10
    46ee:	c8 f4       	brcc	.+50     	; 0x4722 <_Z10processKeyc+0x6cc>
				{
					value *= 10;
					value += key - '0';
    46f0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    46f4:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    46f8:	ac 01       	movw	r20, r24
    46fa:	44 0f       	add	r20, r20
    46fc:	55 1f       	adc	r21, r21
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	84 0f       	add	r24, r20
    470c:	95 1f       	adc	r25, r21
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	20 53       	subi	r18, 0x30	; 48
    4712:	31 09       	sbc	r19, r1
    4714:	82 0f       	add	r24, r18
    4716:	93 1f       	adc	r25, r19
    4718:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE5value+0x1>
    471c:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE5value>
    4720:	cc c0       	rjmp	.+408    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if(key == 'B')
    4722:	22 34       	cpi	r18, 0x42	; 66
    4724:	09 f0       	breq	.+2      	; 0x4728 <_Z10processKeyc+0x6d2>
    4726:	c9 c0       	rjmp	.+402    	; 0x48ba <_Z10processKeyc+0x864>
				{
					digits = -1;
    4728:	8f ef       	ldi	r24, 0xFF	; 255
    472a:	9f ef       	ldi	r25, 0xFF	; 255
    472c:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4730:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ10processKeycE6digits>
    4734:	c2 c0       	rjmp	.+388    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    4736:	83 32       	cpi	r24, 0x23	; 35
    4738:	a1 f4       	brne	.+40     	; 0x4762 <_Z10processKeyc+0x70c>
				{
					g_AM_audio_frequency = value;
    473a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    473e:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    4742:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    4746:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    474a:	4f e7       	ldi	r20, 0x7F	; 127
    474c:	55 e0       	ldi	r21, 0x05	; 5
    474e:	61 e1       	ldi	r22, 0x11	; 17
    4750:	8c e9       	ldi	r24, 0x9C	; 156
    4752:	95 e0       	ldi	r25, 0x05	; 5
    4754:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    4758:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    475c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4760:	ac c0       	rjmp	.+344    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= MIN_AM_TONE_FREQUENCY) && (key <= MAX_AM_TONE_FREQUENCY))
    4762:	87 30       	cpi	r24, 0x07	; 7
    4764:	08 f0       	brcs	.+2      	; 0x4768 <_Z10processKeyc+0x712>
    4766:	a9 c0       	rjmp	.+338    	; 0x48ba <_Z10processKeyc+0x864>
				{
					value = key - '0';
    4768:	28 2f       	mov	r18, r24
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	20 53       	subi	r18, 0x30	; 48
    476e:	31 09       	sbc	r19, r1
    4770:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4774:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
    4778:	a0 c0       	rjmp	.+320    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_SET_PTT_PERIODIC_RESET:
			{
				if(key == '#')
    477a:	83 32       	cpi	r24, 0x23	; 35
    477c:	c9 f4       	brne	.+50     	; 0x47b0 <_Z10processKeyc+0x75a>
				{
					if((value >= 0) && (value <= 1))
    477e:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    4782:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4786:	82 30       	cpi	r24, 0x02	; 2
    4788:	91 05       	cpc	r25, r1
    478a:	68 f4       	brcc	.+26     	; 0x47a6 <_Z10processKeyc+0x750>
					{
						g_ptt_periodic_reset_enabled = (uint8_t)value;
    478c:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <g_ptt_periodic_reset_enabled>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    4790:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <g_ptt_periodic_reset_enabled>
    4794:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_use_ptt_periodic_reset>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    4798:	41 e8       	ldi	r20, 0x81	; 129
    479a:	55 e0       	ldi	r21, 0x05	; 5
    479c:	67 e1       	ldi	r22, 0x17	; 23
    479e:	8c e9       	ldi	r24, 0x9C	; 156
    47a0:	95 e0       	ldi	r25, 0x05	; 5
    47a2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    47a6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    47aa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    47ae:	85 c0       	rjmp	.+266    	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '1'))
    47b0:	80 ed       	ldi	r24, 0xD0	; 208
    47b2:	82 0f       	add	r24, r18
    47b4:	82 30       	cpi	r24, 0x02	; 2
    47b6:	08 f0       	brcs	.+2      	; 0x47ba <_Z10processKeyc+0x764>
    47b8:	80 c0       	rjmp	.+256    	; 0x48ba <_Z10processKeyc+0x864>
				{
					value = key - '0';
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	20 53       	subi	r18, 0x30	; 48
    47be:	31 09       	sbc	r19, r1
    47c0:	30 93 79 04 	sts	0x0479, r19	; 0x800479 <_ZZ10processKeycE5value+0x1>
    47c4:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZZ10processKeycE5value>
    47c8:	78 c0       	rjmp	.+240    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_GET_BATTERY_VOLTAGE:
			{
				if(key == '#')
    47ca:	83 32       	cpi	r24, 0x23	; 35
    47cc:	39 f4       	brne	.+14     	; 0x47dc <_Z10processKeyc+0x786>
				{
					Fox_t f = REPORT_BATTERY;
    47ce:	83 e1       	ldi	r24, 0x13	; 19
    47d0:	89 83       	std	Y+1, r24	; 0x01
					setupForFox(&f, START_TRANSMISSIONS_NOW);
    47d2:	62 e0       	ldi	r22, 0x02	; 2
    47d4:	ce 01       	movw	r24, r28
    47d6:	01 96       	adiw	r24, 0x01	; 1
    47d8:	0e 94 85 13 	call	0x270a	; 0x270a <_Z11setupForFoxP5Fox_t13EventAction_t>
				}

				state = STATE_SHUTDOWN;
    47dc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    47e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;
    47e4:	6a c0       	rjmp	.+212    	; 0x48ba <_Z10processKeyc+0x864>

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    47e6:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <_ZZ10processKeycE6digits>
    47ea:	30 91 77 04 	lds	r19, 0x0477	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    47ee:	a9 01       	movw	r20, r18
    47f0:	4f 5f       	subi	r20, 0xFF	; 255
    47f2:	5f 4f       	sbci	r21, 0xFF	; 255
    47f4:	50 93 77 04 	sts	0x0477, r21	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    47f8:	40 93 76 04 	sts	0x0476, r20	; 0x800476 <_ZZ10processKeycE6digits>
    47fc:	f9 01       	movw	r30, r18
    47fe:	ec 5b       	subi	r30, 0xBC	; 188
    4800:	fa 4f       	sbci	r31, 0xFA	; 250
    4802:	90 81       	ld	r25, Z
    4804:	89 13       	cpse	r24, r25
    4806:	12 c0       	rjmp	.+36     	; 0x482c <_Z10processKeyc+0x7d6>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    4808:	e4 e4       	ldi	r30, 0x44	; 68
    480a:	f5 e0       	ldi	r31, 0x05	; 5
    480c:	01 90       	ld	r0, Z+
    480e:	00 20       	and	r0, r0
    4810:	e9 f7       	brne	.-6      	; 0x480c <_Z10processKeyc+0x7b6>
    4812:	31 97       	sbiw	r30, 0x01	; 1
    4814:	e4 54       	subi	r30, 0x44	; 68
    4816:	f5 40       	sbci	r31, 0x05	; 5
    4818:	e4 17       	cp	r30, r20
    481a:	f5 07       	cpc	r31, r21
    481c:	09 f0       	breq	.+2      	; 0x4820 <_Z10processKeyc+0x7ca>
    481e:	4d c0       	rjmp	.+154    	; 0x48ba <_Z10processKeyc+0x864>
					{
						g_DTMF_unlocked = TRUE;
    4820:	81 e0       	ldi	r24, 0x01	; 1
    4822:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    4826:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ10processKeycE18setPasswordEnabled>
    482a:	47 c0       	rjmp	.+142    	; 0x48ba <_Z10processKeyc+0x864>
					}
				}
				else
				{
					digits = 0;
    482c:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ10processKeycE6digits+0x1>
    4830:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    4834:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4838:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    483c:	3e c0       	rjmp	.+124    	; 0x48ba <_Z10processKeyc+0x864>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    483e:	83 32       	cpi	r24, 0x23	; 35
    4840:	01 f5       	brne	.+64     	; 0x4882 <_Z10processKeyc+0x82c>
				{
					if(value == 0)
    4842:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    4846:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    484a:	00 97       	sbiw	r24, 0x00	; 0
    484c:	41 f4       	brne	.+16     	; 0x485e <_Z10processKeyc+0x808>
					{
						setAtten(0);
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    4856:	81 e0       	ldi	r24, 0x01	; 1
    4858:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <g_sendAMmodulationConstantly>
    485c:	0d c0       	rjmp	.+26     	; 0x4878 <_Z10processKeyc+0x822>
					}
					else if(value > 315)
    485e:	8c 33       	cpi	r24, 0x3C	; 60
    4860:	21 e0       	ldi	r18, 0x01	; 1
    4862:	92 07       	cpc	r25, r18
    4864:	3c f0       	brlt	.+14     	; 0x4874 <_Z10processKeyc+0x81e>
					{
						g_sendAMmodulationConstantly = FALSE;
    4866:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    486a:	8b e3       	ldi	r24, 0x3B	; 59
    486c:	91 e0       	ldi	r25, 0x01	; 1
    486e:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z8setAttenj>
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <_Z10processKeyc+0x822>
					}
					else
					{
						setAtten(value);
    4874:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    4878:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    487c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4880:	1c c0       	rjmp	.+56     	; 0x48ba <_Z10processKeyc+0x864>
				}
				else if((key >= '0') && (key <= '9'))
    4882:	80 ed       	ldi	r24, 0xD0	; 208
    4884:	82 0f       	add	r24, r18
    4886:	8a 30       	cpi	r24, 0x0A	; 10
    4888:	c0 f4       	brcc	.+48     	; 0x48ba <_Z10processKeyc+0x864>
				{
					value *= 10;
					value += key - '0';
    488a:	40 91 78 04 	lds	r20, 0x0478	; 0x800478 <_ZZ10processKeycE5value>
    488e:	50 91 79 04 	lds	r21, 0x0479	; 0x800479 <_ZZ10processKeycE5value+0x1>
    4892:	ca 01       	movw	r24, r20
    4894:	88 0f       	add	r24, r24
    4896:	99 1f       	adc	r25, r25
    4898:	44 0f       	add	r20, r20
    489a:	55 1f       	adc	r21, r21
    489c:	44 0f       	add	r20, r20
    489e:	55 1f       	adc	r21, r21
    48a0:	44 0f       	add	r20, r20
    48a2:	55 1f       	adc	r21, r21
    48a4:	84 0f       	add	r24, r20
    48a6:	95 1f       	adc	r25, r21
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	20 53       	subi	r18, 0x30	; 48
    48ac:	31 09       	sbc	r19, r1
    48ae:	82 0f       	add	r24, r18
    48b0:	93 1f       	adc	r25, r19
    48b2:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZZ10processKeycE5value+0x1>
    48b6:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    48ba:	0f 90       	pop	r0
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	ff 90       	pop	r15
    48c2:	ef 90       	pop	r14
    48c4:	df 90       	pop	r13
    48c6:	cf 90       	pop	r12
    48c8:	08 95       	ret

000048ca <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    48ca:	2f 92       	push	r2
    48cc:	3f 92       	push	r3
    48ce:	4f 92       	push	r4
    48d0:	5f 92       	push	r5
    48d2:	6f 92       	push	r6
    48d4:	7f 92       	push	r7
    48d6:	8f 92       	push	r8
    48d8:	9f 92       	push	r9
    48da:	af 92       	push	r10
    48dc:	bf 92       	push	r11
    48de:	cf 92       	push	r12
    48e0:	df 92       	push	r13
    48e2:	ef 92       	push	r14
    48e4:	ff 92       	push	r15
    48e6:	0f 93       	push	r16
    48e8:	1f 93       	push	r17
    48ea:	cf 93       	push	r28
    48ec:	df 93       	push	r29
    48ee:	1f 92       	push	r1
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
    48f4:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <g_perform_EEPROM_reset>
    48f8:	88 23       	and	r24, r24
    48fa:	61 f0       	breq	.+24     	; 0x4914 <_Z4loopv+0x4a>
		{
			g_perform_EEPROM_reset = FALSE;
    48fc:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_perform_EEPROM_reset>
			ee_mgr.resetEEPROMValues();
    4900:	8c e9       	ldi	r24, 0x9C	; 156
    4902:	95 e0       	ldi	r25, 0x05	; 5
    4904:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	71 ee       	ldi	r23, 0xE1	; 225
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z12linkbus_initm>
		}
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    4914:	0e 94 95 1a 	call	0x352a	; 0x352a <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(g_goertzel.SamplesReady())
    4918:	83 e0       	ldi	r24, 0x03	; 3
    491a:	95 e0       	ldi	r25, 0x05	; 5
    491c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN8Goertzel12SamplesReadyEv>
    4920:	88 23       	and	r24, r24
    4922:	09 f4       	brne	.+2      	; 0x4926 <_Z4loopv+0x5c>
    4924:	36 c1       	rjmp	.+620    	; 0x4b92 <_Z4loopv+0x2c8>
			static char lastKey = '\0';
			static int checkCount = 10;                                         /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    4926:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <g_temperature_check_countdown>
    492a:	81 11       	cpse	r24, r1
    492c:	30 c0       	rjmp	.+96     	; 0x498e <_Z4loopv+0xc4>
			{

				setUpSampling(TEMPERATURE_SAMPLING, FALSE);
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z13setUpSampling12ADCChannel_th>
				int8_t temp = (int8_t)getTemp();
    4936:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <_Z7getTempv>
    493a:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <__fixsfsi>
				if(temp != g_temperature)
    493e:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_temperature>
    4942:	68 17       	cp	r22, r24
    4944:	e1 f0       	breq	.+56     	; 0x497e <_Z4loopv+0xb4>
				{
					g_temperature = temp;
    4946:	60 93 43 05 	sts	0x0543, r22	; 0x800543 <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    494a:	6a 31       	cpi	r22, 0x1A	; 26
    494c:	14 f0       	brlt	.+4      	; 0x4952 <_Z4loopv+0x88>
    494e:	69 51       	subi	r22, 0x19	; 25
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <_Z4loopv+0x8e>
    4952:	89 e1       	ldi	r24, 0x19	; 25
    4954:	86 1b       	sub	r24, r22
    4956:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    4958:	06 2e       	mov	r0, r22
    495a:	00 0c       	add	r0, r0
    495c:	77 0b       	sbc	r23, r23
    495e:	8c e9       	ldi	r24, 0x9C	; 156
    4960:	95 e0       	ldi	r25, 0x05	; 5
    4962:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    4966:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <g_rv3028_offset>
    496a:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <g_rv3028_offset+0x1>
    496e:	a9 01       	movw	r20, r18
    4970:	48 0f       	add	r20, r24
    4972:	51 1d       	adc	r21, r1
    4974:	87 fd       	sbrc	r24, 7
    4976:	5a 95       	dec	r21
    4978:	ca 01       	movw	r24, r20
    497a:	0e 94 3f 2b 	call	0x567e	; 0x567e <_Z21rv3028_set_offset_RAMj>
				}

				setUpSampling(AUDIO_SAMPLING, FALSE);
    497e:	60 e0       	ldi	r22, 0x00	; 0
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z13setUpSampling12ADCChannel_th>
				g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    4986:	8b e3       	ldi	r24, 0x3B	; 59
    4988:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <g_temperature_check_countdown>
    498c:	83 c1       	rjmp	.+774    	; 0x4c94 <_Z4loopv+0x3ca>
			}
			else if(!g_voltage_check_countdown)
    498e:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_voltage_check_countdown>
    4992:	81 11       	cpse	r24, r1
    4994:	7f c1       	rjmp	.+766    	; 0x4c94 <_Z4loopv+0x3ca>
			{
				setUpSampling(VOLTAGE_SAMPLING, FALSE);
    4996:	60 e0       	ldi	r22, 0x00	; 0
    4998:	82 e0       	ldi	r24, 0x02	; 2
    499a:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z13setUpSampling12ADCChannel_th>
				g_voltage = getVoltage();
    499e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_Z10getVoltagev>
    49a2:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <g_voltage+0x1>
    49a6:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <g_voltage>
				setUpSampling(AUDIO_SAMPLING, FALSE);
    49aa:	60 e0       	ldi	r22, 0x00	; 0
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z13setUpSampling12ADCChannel_th>
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    49b2:	8b e0       	ldi	r24, 0x0B	; 11
    49b4:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_voltage_check_countdown>
    49b8:	6d c1       	rjmp	.+730    	; 0x4c94 <_Z4loopv+0x3ca>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    49ba:	f5 01       	movw	r30, r10
    49bc:	41 91       	ld	r20, Z+
    49be:	51 91       	ld	r21, Z+
    49c0:	61 91       	ld	r22, Z+
    49c2:	71 91       	ld	r23, Z+
    49c4:	5f 01       	movw	r10, r30
    49c6:	83 e0       	ldi	r24, 0x03	; 3
    49c8:	95 e0       	ldi	r25, 0x05	; 5
    49ca:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    49ce:	83 e0       	ldi	r24, 0x03	; 3
    49d0:	95 e0       	ldi	r25, 0x05	; 5
    49d2:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN8Goertzel10Magnitude2Ev>
    49d6:	e6 2e       	mov	r14, r22
    49d8:	f7 2e       	mov	r15, r23
    49da:	d8 2e       	mov	r13, r24
    49dc:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    49de:	27 2d       	mov	r18, r7
    49e0:	36 2d       	mov	r19, r6
    49e2:	45 2d       	mov	r20, r5
    49e4:	54 2d       	mov	r21, r4
    49e6:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__gesf2>
    49ea:	18 16       	cp	r1, r24
    49ec:	b4 f4       	brge	.+44     	; 0x4a1a <_Z4loopv+0x150>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	34 e2       	ldi	r19, 0x24	; 36
    49f2:	44 e7       	ldi	r20, 0x74	; 116
    49f4:	59 e4       	ldi	r21, 0x49	; 73
    49f6:	6e 2d       	mov	r22, r14
    49f8:	7f 2d       	mov	r23, r15
    49fa:	8d 2d       	mov	r24, r13
    49fc:	9c 2d       	mov	r25, r12
    49fe:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__gesf2>
    4a02:	18 16       	cp	r1, r24
    4a04:	34 f4       	brge	.+12     	; 0x4a12 <_Z4loopv+0x148>
    4a06:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    4a08:	7e 2c       	mov	r7, r14
    4a0a:	6f 2c       	mov	r6, r15
    4a0c:	5d 2c       	mov	r5, r13
    4a0e:	4c 2c       	mov	r4, r12
    4a10:	04 c0       	rjmp	.+8      	; 0x4a1a <_Z4loopv+0x150>
    4a12:	7e 2c       	mov	r7, r14
    4a14:	6f 2c       	mov	r6, r15
    4a16:	5d 2c       	mov	r5, r13
    4a18:	4c 2c       	mov	r4, r12
				g_voltage = getVoltage();
				setUpSampling(AUDIO_SAMPLING, FALSE);
				g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
			}

			for(int i = 0; i < 4; i++)
    4a1a:	0f 5f       	subi	r16, 0xFF	; 255
    4a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1e:	04 30       	cpi	r16, 0x04	; 4
    4a20:	11 05       	cpc	r17, r1
    4a22:	59 f6       	brne	.-106    	; 0x49ba <_Z4loopv+0xf0>
    4a24:	47 c1       	rjmp	.+654    	; 0x4cb4 <_Z4loopv+0x3ea>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4a26:	f5 01       	movw	r30, r10
    4a28:	41 91       	ld	r20, Z+
    4a2a:	51 91       	ld	r21, Z+
    4a2c:	61 91       	ld	r22, Z+
    4a2e:	71 91       	ld	r23, Z+
    4a30:	5f 01       	movw	r10, r30
    4a32:	83 e0       	ldi	r24, 0x03	; 3
    4a34:	95 e0       	ldi	r25, 0x05	; 5
    4a36:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    4a3a:	83 e0       	ldi	r24, 0x03	; 3
    4a3c:	95 e0       	ldi	r25, 0x05	; 5
    4a3e:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN8Goertzel10Magnitude2Ev>
    4a42:	e6 2e       	mov	r14, r22
    4a44:	f7 2e       	mov	r15, r23
    4a46:	d8 2e       	mov	r13, r24
    4a48:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    4a4a:	25 2d       	mov	r18, r5
    4a4c:	34 2d       	mov	r19, r4
    4a4e:	43 2d       	mov	r20, r3
    4a50:	52 2d       	mov	r21, r2
    4a52:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__gesf2>
    4a56:	18 16       	cp	r1, r24
    4a58:	b4 f4       	brge	.+44     	; 0x4a86 <_Z4loopv+0x1bc>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	34 e2       	ldi	r19, 0x24	; 36
    4a5e:	44 e7       	ldi	r20, 0x74	; 116
    4a60:	59 e4       	ldi	r21, 0x49	; 73
    4a62:	6e 2d       	mov	r22, r14
    4a64:	7f 2d       	mov	r23, r15
    4a66:	8d 2d       	mov	r24, r13
    4a68:	9c 2d       	mov	r25, r12
    4a6a:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__gesf2>
    4a6e:	18 16       	cp	r1, r24
    4a70:	34 f4       	brge	.+12     	; 0x4a7e <_Z4loopv+0x1b4>
    4a72:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    4a74:	5e 2c       	mov	r5, r14
    4a76:	4f 2c       	mov	r4, r15
    4a78:	3d 2c       	mov	r3, r13
    4a7a:	2c 2c       	mov	r2, r12
    4a7c:	04 c0       	rjmp	.+8      	; 0x4a86 <_Z4loopv+0x1bc>
    4a7e:	5e 2c       	mov	r5, r14
    4a80:	4f 2c       	mov	r4, r15
    4a82:	3d 2c       	mov	r3, r13
    4a84:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    4a86:	0f 5f       	subi	r16, 0xFF	; 255
    4a88:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8a:	04 30       	cpi	r16, 0x04	; 4
    4a8c:	11 05       	cpc	r17, r1
    4a8e:	59 f6       	brne	.-106    	; 0x4a26 <_Z4loopv+0x15c>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    4a90:	77 20       	and	r7, r7
    4a92:	0c f4       	brge	.+2      	; 0x4a96 <_Z4loopv+0x1cc>
    4a94:	76 c0       	rjmp	.+236    	; 0x4b82 <_Z4loopv+0x2b8>
				{
					char newKey = key[4 * y + x];
    4a96:	c4 01       	movw	r24, r8
    4a98:	88 0f       	add	r24, r24
    4a9a:	99 1f       	adc	r25, r25
    4a9c:	88 0f       	add	r24, r24
    4a9e:	99 1f       	adc	r25, r25
    4aa0:	86 57       	subi	r24, 0x76	; 118
    4aa2:	9d 4f       	sbci	r25, 0xFD	; 253
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	e6 0d       	add	r30, r6
    4aa8:	f7 1d       	adc	r31, r7
    4aaa:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    4aac:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ4loopvE7lastKey>
    4ab0:	18 13       	cpse	r17, r24
    4ab2:	17 c0       	rjmp	.+46     	; 0x4ae2 <_Z4loopv+0x218>
					{
						checkCount++;
    4ab4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    4ab8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4abc:	01 96       	adiw	r24, 0x01	; 1
    4abe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4ac2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    4ac6:	03 97       	sbiw	r24, 0x03	; 3
    4ac8:	61 f4       	brne	.+24     	; 0x4ae2 <_Z4loopv+0x218>
						{
							g_dtmf_detected = TRUE;
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <g_dtmf_detected>
							quietCount = 0;
    4ad0:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4ad4:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    4ad8:	10 93 0c 05 	sts	0x050C, r17	; 0x80050c <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    4adc:	81 2f       	mov	r24, r17
    4ade:	0e 94 2b 20 	call	0x4056	; 0x4056 <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    4ae2:	10 93 7e 04 	sts	0x047E, r17	; 0x80047e <_ZZ4loopvE7lastKey>
    4ae6:	4d c0       	rjmp	.+154    	; 0x4b82 <_Z4loopv+0x2b8>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    4ae8:	c0 90 04 05 	lds	r12, 0x0504	; 0x800504 <g_tick_count>
    4aec:	d0 90 05 05 	lds	r13, 0x0505	; 0x800505 <g_tick_count+0x1>
    4af0:	e0 90 06 05 	lds	r14, 0x0506	; 0x800506 <g_tick_count+0x2>
    4af4:	f0 90 07 05 	lds	r15, 0x0507	; 0x800507 <g_tick_count+0x3>
    4af8:	80 90 08 05 	lds	r8, 0x0508	; 0x800508 <g_last>
    4afc:	90 90 09 05 	lds	r9, 0x0509	; 0x800509 <g_last+0x1>
    4b00:	a0 90 0a 05 	lds	r10, 0x050A	; 0x80050a <g_last+0x2>
    4b04:	b0 90 0b 05 	lds	r11, 0x050B	; 0x80050b <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    4b08:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ4loopvE10quietCount>
    4b0c:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4b10:	9c 01       	movw	r18, r24
    4b12:	2f 5f       	subi	r18, 0xFF	; 255
    4b14:	3f 4f       	sbci	r19, 0xFF	; 255
    4b16:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4b1a:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <_ZZ4loopvE10quietCount>
    4b1e:	03 97       	sbiw	r24, 0x03	; 3
    4b20:	84 f1       	brlt	.+96     	; 0x4b82 <_Z4loopv+0x2b8>
				{
					g_dtmf_detected = FALSE;
    4b22:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_dtmf_detected>
					if(g_transmissions_disabled && !g_LED_enunciating)
    4b26:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    4b2a:	88 23       	and	r24, r24
    4b2c:	29 f0       	breq	.+10     	; 0x4b38 <_Z4loopv+0x26e>
    4b2e:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <g_LED_enunciating>
    4b32:	88 23       	and	r24, r24
    4b34:	09 f4       	brne	.+2      	; 0x4b38 <_Z4loopv+0x26e>
    4b36:	d1 c0       	rjmp	.+418    	; 0x4cda <_Z4loopv+0x410>
					{
						digitalWrite(PIN_LED1, OFF);
					}

					if(delta < 1500)
    4b38:	c8 18       	sub	r12, r8
    4b3a:	d9 08       	sbc	r13, r9
    4b3c:	ea 08       	sbc	r14, r10
    4b3e:	fb 08       	sbc	r15, r11
    4b40:	fc ed       	ldi	r31, 0xDC	; 220
    4b42:	cf 16       	cp	r12, r31
    4b44:	f5 e0       	ldi	r31, 0x05	; 5
    4b46:	df 06       	cpc	r13, r31
    4b48:	e1 04       	cpc	r14, r1
    4b4a:	f1 04       	cpc	r15, r1
    4b4c:	20 f4       	brcc	.+8      	; 0x4b56 <_Z4loopv+0x28c>
					{
						checkCount = 0;
    4b4e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4b52:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    4b56:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <_ZZ4loopvE10quietCount+0x1>
    4b5a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    4b5e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_tick_count>
    4b62:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <g_tick_count+0x1>
    4b66:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <g_tick_count+0x2>
    4b6a:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <g_tick_count+0x3>
    4b6e:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <g_last>
    4b72:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <g_last+0x1>
    4b76:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <g_last+0x2>
    4b7a:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <g_last+0x3>
					lastKey = '\0';
    4b7e:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    4b82:	ea e7       	ldi	r30, 0x7A	; 122
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	80 81       	ld	r24, Z
    4b88:	88 60       	ori	r24, 0x08	; 8
    4b8a:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    4b8c:	80 81       	ld	r24, Z
    4b8e:	80 64       	ori	r24, 0x40	; 64
    4b90:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	if(!g_on_the_air)
    4b92:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <g_on_the_air>
    4b96:	81 11       	cpse	r24, r1
    4b98:	a5 c0       	rjmp	.+330    	; 0x4ce4 <_Z4loopv+0x41a>
	{
		if(g_dtmf_detected)
    4b9a:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_dtmf_detected>
    4b9e:	88 23       	and	r24, r24
    4ba0:	b1 f0       	breq	.+44     	; 0x4bce <_Z4loopv+0x304>
		{
			BOOL repeat = FALSE;
    4ba2:	19 82       	std	Y+1, r1	; 0x01
			makeMorse(DTMF_DETECTED_BLINK_PATTERN, &repeat, NULL);
    4ba4:	40 e0       	ldi	r20, 0x00	; 0
    4ba6:	50 e0       	ldi	r21, 0x00	; 0
    4ba8:	be 01       	movw	r22, r28
    4baa:	6f 5f       	subi	r22, 0xFF	; 255
    4bac:	7f 4f       	sbci	r23, 0xFF	; 255
    4bae:	89 e2       	ldi	r24, 0x29	; 41
    4bb0:	92 e0       	ldi	r25, 0x02	; 2
    4bb2:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4bb6:	8c e8       	ldi	r24, 0x8C	; 140
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4bbe:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
			g_LED_enunciating = TRUE;
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <g_LED_enunciating>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    4bc8:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_config_error>
    4bcc:	8b c0       	rjmp	.+278    	; 0x4ce4 <_Z4loopv+0x41a>
		}
		else if(g_transmissions_disabled)
    4bce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_transmissions_disabled>
    4bd2:	88 23       	and	r24, r24
    4bd4:	09 f4       	brne	.+2      	; 0x4bd8 <_Z4loopv+0x30e>
    4bd6:	86 c0       	rjmp	.+268    	; 0x4ce4 <_Z4loopv+0x41a>
		{
			ConfigurationState_t hold_config_err = g_config_error;
    4bd8:	10 91 40 05 	lds	r17, 0x0540	; 0x800540 <g_config_error>
			g_config_error = clockConfigurationCheck();
    4bdc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z23clockConfigurationCheckv>
    4be0:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_config_error>

			if(g_config_error != hold_config_err)
    4be4:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4be8:	18 17       	cp	r17, r24
    4bea:	09 f4       	brne	.+2      	; 0x4bee <_Z4loopv+0x324>
    4bec:	7b c0       	rjmp	.+246    	; 0x4ce4 <_Z4loopv+0x41a>
			{
				if(g_config_error == CONFIGURATION_ERROR)
    4bee:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4bf2:	82 30       	cpi	r24, 0x02	; 2
    4bf4:	a1 f4       	brne	.+40     	; 0x4c1e <_Z4loopv+0x354>
				{
					BOOL repeat = TRUE;
    4bf6:	11 e0       	ldi	r17, 0x01	; 1
    4bf8:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4bfa:	40 e0       	ldi	r20, 0x00	; 0
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	be 01       	movw	r22, r28
    4c00:	6f 5f       	subi	r22, 0xFF	; 255
    4c02:	7f 4f       	sbci	r23, 0xFF	; 255
    4c04:	8b e2       	ldi	r24, 0x2B	; 43
    4c06:	92 e0       	ldi	r25, 0x02	; 2
    4c08:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4c0c:	8c e8       	ldi	r24, 0x8C	; 140
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4c14:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4c18:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <g_LED_enunciating>
    4c1c:	63 c0       	rjmp	.+198    	; 0x4ce4 <_Z4loopv+0x41a>
				}
				else if(g_config_error == WAITING_FOR_START)
    4c1e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4c22:	81 30       	cpi	r24, 0x01	; 1
    4c24:	a1 f4       	brne	.+40     	; 0x4c4e <_Z4loopv+0x384>
				{
					BOOL repeat = TRUE;
    4c26:	11 e0       	ldi	r17, 0x01	; 1
    4c28:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    4c2a:	40 e0       	ldi	r20, 0x00	; 0
    4c2c:	50 e0       	ldi	r21, 0x00	; 0
    4c2e:	be 01       	movw	r22, r28
    4c30:	6f 5f       	subi	r22, 0xFF	; 255
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	8d e2       	ldi	r24, 0x2D	; 45
    4c36:	92 e0       	ldi	r25, 0x02	; 2
    4c38:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    4c3c:	86 e4       	ldi	r24, 0x46	; 70
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4c44:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4c48:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <g_LED_enunciating>
    4c4c:	4b c0       	rjmp	.+150    	; 0x4ce4 <_Z4loopv+0x41a>
				}
				else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    4c4e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4c52:	84 30       	cpi	r24, 0x04	; 4
    4c54:	21 f0       	breq	.+8      	; 0x4c5e <_Z4loopv+0x394>
    4c56:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_config_error>
    4c5a:	83 30       	cpi	r24, 0x03	; 3
    4c5c:	a1 f4       	brne	.+40     	; 0x4c86 <_Z4loopv+0x3bc>
				{
					BOOL repeat = TRUE;
    4c5e:	11 e0       	ldi	r17, 0x01	; 1
    4c60:	19 83       	std	Y+1, r17	; 0x01
					makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    4c62:	40 e0       	ldi	r20, 0x00	; 0
    4c64:	50 e0       	ldi	r21, 0x00	; 0
    4c66:	be 01       	movw	r22, r28
    4c68:	6f 5f       	subi	r22, 0xFF	; 255
    4c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6c:	8b e2       	ldi	r24, 0x2B	; 43
    4c6e:	92 e0       	ldi	r25, 0x02	; 2
    4c70:	0e 94 bc 28 	call	0x5178	; 0x5178 <_Z9makeMorsePcPhS0_>
					g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    4c74:	8c e8       	ldi	r24, 0x8C	; 140
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <g_code_throttle+0x1>
    4c7c:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <g_code_throttle>
					g_LED_enunciating = TRUE;
    4c80:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <g_LED_enunciating>
    4c84:	2f c0       	rjmp	.+94     	; 0x4ce4 <_Z4loopv+0x41a>
				}
				else
				{
					g_LED_enunciating = FALSE;
    4c86:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <g_LED_enunciating>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    4c8a:	60 e0       	ldi	r22, 0x00	; 0
    4c8c:	8d e0       	ldi	r24, 0x0D	; 13
    4c8e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
				}
			}
		}
	}
}
    4c92:	28 c0       	rjmp	.+80     	; 0x4ce4 <_Z4loopv+0x41a>
    4c94:	0f 2e       	mov	r0, r31
    4c96:	fa e9       	ldi	r31, 0x9A	; 154
    4c98:	af 2e       	mov	r10, r31
    4c9a:	f2 e0       	ldi	r31, 0x02	; 2
    4c9c:	bf 2e       	mov	r11, r31
    4c9e:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4ca0:	00 e0       	ldi	r16, 0x00	; 0
    4ca2:	10 e0       	ldi	r17, 0x00	; 0
    4ca4:	88 24       	eor	r8, r8
    4ca6:	8a 94       	dec	r8
    4ca8:	98 2c       	mov	r9, r8
    4caa:	71 2c       	mov	r7, r1
    4cac:	61 2c       	mov	r6, r1
    4cae:	51 2c       	mov	r5, r1
    4cb0:	41 2c       	mov	r4, r1
    4cb2:	83 ce       	rjmp	.-762    	; 0x49ba <_Z4loopv+0xf0>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    4cb4:	99 20       	and	r9, r9
    4cb6:	0c f4       	brge	.+2      	; 0x4cba <_Z4loopv+0x3f0>
    4cb8:	17 cf       	rjmp	.-466    	; 0x4ae8 <_Z4loopv+0x21e>
    4cba:	0f 2e       	mov	r0, r31
    4cbc:	fa ea       	ldi	r31, 0xAA	; 170
    4cbe:	af 2e       	mov	r10, r31
    4cc0:	f2 e0       	ldi	r31, 0x02	; 2
    4cc2:	bf 2e       	mov	r11, r31
    4cc4:	f0 2d       	mov	r31, r0
    4cc6:	00 e0       	ldi	r16, 0x00	; 0
    4cc8:	10 e0       	ldi	r17, 0x00	; 0
    4cca:	66 24       	eor	r6, r6
    4ccc:	6a 94       	dec	r6
    4cce:	76 2c       	mov	r7, r6
    4cd0:	51 2c       	mov	r5, r1
    4cd2:	41 2c       	mov	r4, r1
    4cd4:	31 2c       	mov	r3, r1
    4cd6:	21 2c       	mov	r2, r1
    4cd8:	a6 ce       	rjmp	.-692    	; 0x4a26 <_Z4loopv+0x15c>
				if(quietCount++ > 2)
				{
					g_dtmf_detected = FALSE;
					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED1, OFF);
    4cda:	60 e0       	ldi	r22, 0x00	; 0
    4cdc:	8d e0       	ldi	r24, 0x0D	; 13
    4cde:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>
    4ce2:	2a cf       	rjmp	.-428    	; 0x4b38 <_Z4loopv+0x26e>
					digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
				}
			}
		}
	}
}
    4ce4:	0f 90       	pop	r0
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	1f 91       	pop	r17
    4cec:	0f 91       	pop	r16
    4cee:	ff 90       	pop	r15
    4cf0:	ef 90       	pop	r14
    4cf2:	df 90       	pop	r13
    4cf4:	cf 90       	pop	r12
    4cf6:	bf 90       	pop	r11
    4cf8:	af 90       	pop	r10
    4cfa:	9f 90       	pop	r9
    4cfc:	8f 90       	pop	r8
    4cfe:	7f 90       	pop	r7
    4d00:	6f 90       	pop	r6
    4d02:	5f 90       	pop	r5
    4d04:	4f 90       	pop	r4
    4d06:	3f 90       	pop	r3
    4d08:	2f 90       	pop	r2
    4d0a:	08 95       	ret

00004d0c <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    4d0c:	63 e0       	ldi	r22, 0x03	; 3
    4d0e:	84 e0       	ldi	r24, 0x04	; 4
    4d10:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>

	pinMode(PIN_LED1, OUTPUT);                      /* This led blinks when off cycle and blinks with code when on cycle. */
    4d14:	61 e0       	ldi	r22, 0x01	; 1
    4d16:	8d e0       	ldi	r24, 0x0D	; 13
    4d18:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    4d1c:	60 e0       	ldi	r22, 0x00	; 0
    4d1e:	8d e0       	ldi	r24, 0x0D	; 13
    4d20:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    4d24:	61 e0       	ldi	r22, 0x01	; 1
    4d26:	8d e0       	ldi	r24, 0x0D	; 13
    4d28:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    4d2c:	60 e0       	ldi	r22, 0x00	; 0
    4d2e:	8d e0       	ldi	r24, 0x0D	; 13
    4d30:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    4d34:	61 e0       	ldi	r22, 0x01	; 1
    4d36:	8a e0       	ldi	r24, 0x0A	; 10
    4d38:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    4d3c:	60 e0       	ldi	r22, 0x00	; 0
    4d3e:	8a e0       	ldi	r24, 0x0A	; 10
    4d40:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    4d44:	61 e0       	ldi	r22, 0x01	; 1
    4d46:	89 e0       	ldi	r24, 0x09	; 9
    4d48:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    4d4c:	60 e0       	ldi	r22, 0x00	; 0
    4d4e:	89 e0       	ldi	r24, 0x09	; 9
    4d50:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	88 e0       	ldi	r24, 0x08	; 8
    4d58:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    4d5c:	60 e0       	ldi	r22, 0x00	; 0
    4d5e:	88 e0       	ldi	r24, 0x08	; 8
    4d60:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    4d64:	60 e0       	ldi	r22, 0x00	; 0
    4d66:	84 e1       	ldi	r24, 0x14	; 20
    4d68:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    4d6c:	60 e0       	ldi	r22, 0x00	; 0
    4d6e:	85 e1       	ldi	r24, 0x15	; 21
    4d70:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    4d74:	63 e0       	ldi	r22, 0x03	; 3
    4d76:	8c e0       	ldi	r24, 0x0C	; 12
    4d78:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    4d7c:	61 e0       	ldi	r22, 0x01	; 1
    4d7e:	8b e0       	ldi	r24, 0x0B	; 11
    4d80:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    4d84:	60 e0       	ldi	r22, 0x00	; 0
    4d86:	8b e0       	ldi	r24, 0x0B	; 11
    4d88:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	linkbus_disable();
    4d8c:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z15linkbus_disablev>
 *	digitalWrite(PIN_D1, OFF);
 *	digitalWrite(PIN_D2, OFF);
 *	digitalWrite(PIN_D3, OFF);
 *	digitalWrite(PIN_D4, OFF);
 *	digitalWrite(PIN_D5, OFF); */
	DDRC |= 0x0F;
    4d90:	87 b1       	in	r24, 0x07	; 7
    4d92:	8f 60       	ori	r24, 0x0F	; 15
    4d94:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0xF0;
    4d96:	88 b1       	in	r24, 0x08	; 8
    4d98:	80 7f       	andi	r24, 0xF0	; 240
    4d9a:	88 b9       	out	0x08, r24	; 8
	DDRD |= 0x03;
    4d9c:	8a b1       	in	r24, 0x0a	; 10
    4d9e:	83 60       	ori	r24, 0x03	; 3
    4da0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0xFC;
    4da2:	8b b1       	in	r24, 0x0b	; 11
    4da4:	8c 7f       	andi	r24, 0xFC	; 252
    4da6:	8b b9       	out	0x0b, r24	; 11

	pinMode(PIN_PWDN, OUTPUT);
    4da8:	61 e0       	ldi	r22, 0x01	; 1
    4daa:	86 e0       	ldi	r24, 0x06	; 6
    4dac:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    4db0:	61 e0       	ldi	r22, 0x01	; 1
    4db2:	86 e0       	ldi	r24, 0x06	; 6
    4db4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    4db8:	63 e0       	ldi	r22, 0x03	; 3
    4dba:	82 e1       	ldi	r24, 0x12	; 18
    4dbc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    4dc0:	63 e0       	ldi	r22, 0x03	; 3
    4dc2:	83 e1       	ldi	r24, 0x13	; 19
    4dc4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    4dc8:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    4dcc:	8c e9       	ldi	r24, 0x9C	; 156
    4dce:	95 e0       	ldi	r25, 0x05	; 5
    4dd0:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN13EepromManager11readNonVolsEv>
    4dd4:	18 2f       	mov	r17, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    4dd6:	61 e0       	ldi	r22, 0x01	; 1
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    4dde:	f8 94       	cli
	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    4de0:	a0 eb       	ldi	r26, 0xB0	; 176
    4de2:	b0 e0       	ldi	r27, 0x00	; 0
    4de4:	1c 92       	st	X, r1
	TCCR2B = 0;
    4de6:	e1 eb       	ldi	r30, 0xB1	; 177
    4de8:	f0 e0       	ldi	r31, 0x00	; 0
    4dea:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    4dec:	8c 91       	ld	r24, X
    4dee:	82 60       	ori	r24, 0x02	; 2
    4df0:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    4df2:	80 81       	ld	r24, Z
    4df4:	87 60       	ori	r24, 0x07	; 7
    4df6:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4df8:	8c e0       	ldi	r24, 0x0C	; 12
    4dfa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    4dfe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    4e02:	e6 eb       	ldi	r30, 0xB6	; 182
    4e04:	f0 e0       	ldi	r31, 0x00	; 0
    4e06:	80 81       	ld	r24, Z
    4e08:	8f 7d       	andi	r24, 0xDF	; 223
    4e0a:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    4e0c:	e0 e7       	ldi	r30, 0x70	; 112
    4e0e:	f0 e0       	ldi	r31, 0x00	; 0
    4e10:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    4e12:	80 81       	ld	r24, Z
    4e14:	84 60       	ori	r24, 0x04	; 4
    4e16:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    4e18:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    4e1c:	c1 e8       	ldi	r28, 0x81	; 129
    4e1e:	d0 e0       	ldi	r29, 0x00	; 0
    4e20:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    4e22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4e26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    4e2a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <g_AM_audio_frequency>
    4e2e:	0e 94 48 1a 	call	0x3490	; 0x3490 <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    4e32:	88 81       	ld	r24, Y
    4e34:	88 60       	ori	r24, 0x08	; 8
    4e36:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    4e38:	88 81       	ld	r24, Y
    4e3a:	81 60       	ori	r24, 0x01	; 1
    4e3c:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    4e3e:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    4e40:	84 b5       	in	r24, 0x24	; 36
    4e42:	82 60       	ori	r24, 0x02	; 2
    4e44:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    4e46:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    4e48:	85 b5       	in	r24, 0x25	; 37
    4e4a:	84 60       	ori	r24, 0x04	; 4
    4e4c:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    4e4e:	8f e2       	ldi	r24, 0x2F	; 47
    4e50:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    4e52:	ee e6       	ldi	r30, 0x6E	; 110
    4e54:	f0 e0       	ldi	r31, 0x00	; 0
    4e56:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    4e58:	80 81       	ld	r24, Z
    4e5a:	82 60       	ori	r24, 0x02	; 2
    4e5c:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    4e5e:	ed e6       	ldi	r30, 0x6D	; 109
    4e60:	f0 e0       	ldi	r31, 0x00	; 0
    4e62:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4e64:	80 e1       	ldi	r24, 0x10	; 16
    4e66:	80 83       	st	Z, r24
	PCICR = 0x00;
    4e68:	e8 e6       	ldi	r30, 0x68	; 104
    4e6a:	f0 e0       	ldi	r31, 0x00	; 0
    4e6c:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    4e6e:	84 e0       	ldi	r24, 0x04	; 4
    4e70:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    4e72:	78 94       	sei

	if(!g_AM_enabled)
    4e74:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_AM_enabled>
    4e78:	81 11       	cpse	r24, r1
    4e7a:	06 c0       	rjmp	.+12     	; 0x4e88 <main+0x17c>
	{
		linkbus_init(BAUD);     /* Start the Link Bus serial comms */
    4e7c:	60 e0       	ldi	r22, 0x00	; 0
    4e7e:	71 ee       	ldi	r23, 0xE1	; 225
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z12linkbus_initm>
	}

	g_reset_button_held = !digitalRead(PIN_SYNC);
    4e88:	84 e0       	ldi	r24, 0x04	; 4
    4e8a:	0e 94 33 02 	call	0x466	; 0x466 <_Z11digitalReadh>
    4e8e:	91 e0       	ldi	r25, 0x01	; 1
    4e90:	81 11       	cpse	r24, r1
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <g_reset_button_held>
		while(1)
		{
			;
		}
#else
		if(eepromErr)
    4e98:	11 23       	and	r17, r17
    4e9a:	29 f0       	breq	.+10     	; 0x4ea6 <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4e9c:	61 e0       	ldi	r22, 0x01	; 1
    4e9e:	87 e3       	ldi	r24, 0x37	; 55
    4ea0:	92 e0       	ldi	r25, 0x02	; 2
    4ea2:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
		}

		uint8_t result = rv3028_1s_sqw(ON);
    4ea6:	81 e0       	ldi	r24, 0x01	; 1
    4ea8:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <_Z13rv3028_1s_sqwh>
    4eac:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    4eae:	8c e9       	ldi	r24, 0x9C	; 156
    4eb0:	95 e0       	ldi	r25, 0x05	; 5
    4eb2:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    4eb6:	cc 23       	and	r28, r28
    4eb8:	54 f4       	brge	.+20     	; 0x4ece <main+0x1c2>
		{
			sprintf(g_tempStr, "Err 1\n");
    4eba:	87 e0       	ldi	r24, 0x07	; 7
    4ebc:	e6 e4       	ldi	r30, 0x46	; 70
    4ebe:	f2 e0       	ldi	r31, 0x02	; 2
    4ec0:	ab ed       	ldi	r26, 0xDB	; 219
    4ec2:	b4 e0       	ldi	r27, 0x04	; 4
    4ec4:	01 90       	ld	r0, Z+
    4ec6:	0d 92       	st	X+, r0
    4ec8:	8a 95       	dec	r24
    4eca:	e1 f7       	brne	.-8      	; 0x4ec4 <main+0x1b8>
    4ecc:	23 c0       	rjmp	.+70     	; 0x4f14 <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    4ece:	c0 ff       	sbrs	r28, 0
    4ed0:	0a c0       	rjmp	.+20     	; 0x4ee6 <main+0x1da>
		{
			sprintf(g_tempStr, "Err 2\n");
    4ed2:	87 e0       	ldi	r24, 0x07	; 7
    4ed4:	ed e4       	ldi	r30, 0x4D	; 77
    4ed6:	f2 e0       	ldi	r31, 0x02	; 2
    4ed8:	ab ed       	ldi	r26, 0xDB	; 219
    4eda:	b4 e0       	ldi	r27, 0x04	; 4
    4edc:	01 90       	ld	r0, Z+
    4ede:	0d 92       	st	X+, r0
    4ee0:	8a 95       	dec	r24
    4ee2:	e1 f7       	brne	.-8      	; 0x4edc <main+0x1d0>
    4ee4:	17 c0       	rjmp	.+46     	; 0x4f14 <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    4ee6:	c1 ff       	sbrs	r28, 1
    4ee8:	0a c0       	rjmp	.+20     	; 0x4efe <main+0x1f2>
		{
			sprintf(g_tempStr, "Err 3\n");
    4eea:	87 e0       	ldi	r24, 0x07	; 7
    4eec:	e4 e5       	ldi	r30, 0x54	; 84
    4eee:	f2 e0       	ldi	r31, 0x02	; 2
    4ef0:	ab ed       	ldi	r26, 0xDB	; 219
    4ef2:	b4 e0       	ldi	r27, 0x04	; 4
    4ef4:	01 90       	ld	r0, Z+
    4ef6:	0d 92       	st	X+, r0
    4ef8:	8a 95       	dec	r24
    4efa:	e1 f7       	brne	.-8      	; 0x4ef4 <main+0x1e8>
    4efc:	0b c0       	rjmp	.+22     	; 0x4f14 <main+0x208>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4efe:	c5 ff       	sbrs	r28, 5
    4f00:	09 c0       	rjmp	.+18     	; 0x4f14 <main+0x208>
		{
			sprintf(g_tempStr, "RTC OK\n");
    4f02:	88 e0       	ldi	r24, 0x08	; 8
    4f04:	eb e5       	ldi	r30, 0x5B	; 91
    4f06:	f2 e0       	ldi	r31, 0x02	; 2
    4f08:	ab ed       	ldi	r26, 0xDB	; 219
    4f0a:	b4 e0       	ldi	r27, 0x04	; 4
    4f0c:	01 90       	ld	r0, Z+
    4f0e:	0d 92       	st	X+, r0
    4f10:	8a 95       	dec	r24
    4f12:	e1 f7       	brne	.-8      	; 0x4f0c <main+0x200>
		}

		if(strlen(g_tempStr))
    4f14:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_tempStr>
    4f18:	88 23       	and	r24, r24
    4f1a:	29 f0       	breq	.+10     	; 0x4f26 <main+0x21a>
		{
			lb_send_string(g_tempStr, TRUE);
    4f1c:	61 e0       	ldi	r22, 0x01	; 1
    4f1e:	8b ed       	ldi	r24, 0xDB	; 219
    4f20:	94 e0       	ldi	r25, 0x04	; 4
    4f22:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    4f26:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4f2a:	0e 94 03 0a 	call	0x1406	; 0x1406 <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    4f2e:	ef e6       	ldi	r30, 0x6F	; 111
    4f30:	f0 e0       	ldi	r31, 0x00	; 0
    4f32:	80 81       	ld	r24, Z
    4f34:	82 60       	ori	r24, 0x02	; 2
    4f36:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    4f3e:	e9 e6       	ldi	r30, 0x69	; 105
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	82 60       	ori	r24, 0x02	; 2
    4f46:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    4f48:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    4f4a:	0e 94 65 24 	call	0x48ca	; 0x48ca <_Z4loopv>
    4f4e:	fd cf       	rjmp	.-6      	; 0x4f4a <main+0x23e>

00004f50 <_GLOBAL__sub_I_ee_mgr>:
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4f50:	0f 93       	push	r16
    4f52:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4f54:	8c e9       	ldi	r24, 0x9C	; 156
    4f56:	95 e0       	ldi	r25, 0x05	; 5
    4f58:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4f5c:	00 e0       	ldi	r16, 0x00	; 0
    4f5e:	18 e7       	ldi	r17, 0x78	; 120
    4f60:	26 e9       	ldi	r18, 0x96	; 150
    4f62:	36 e4       	ldi	r19, 0x46	; 70
    4f64:	40 e0       	ldi	r20, 0x00	; 0
    4f66:	50 e0       	ldi	r21, 0x00	; 0
    4f68:	69 e4       	ldi	r22, 0x49	; 73
    4f6a:	73 e4       	ldi	r23, 0x43	; 67
    4f6c:	83 e0       	ldi	r24, 0x03	; 3
    4f6e:	95 e0       	ldi	r25, 0x05	; 5
    4f70:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN8GoertzelC1Eff>
			setupPortsForF1975();
		}
#endif  /* INIT_EEPROM_ONLY */

	g_AM_enabled = enableAM;
}
    4f74:	1f 91       	pop	r17
    4f76:	0f 91       	pop	r16
    4f78:	08 95       	ret

00004f7a <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4f7a:	83 e0       	ldi	r24, 0x03	; 3
    4f7c:	95 e0       	ldi	r25, 0x05	; 5
    4f7e:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

EepromManager ee_mgr;
    4f82:	8c e9       	ldi	r24, 0x9C	; 156
    4f84:	95 e0       	ldi	r25, 0x05	; 5
    4f86:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13EepromManagerD1Ev>
    4f8a:	08 95       	ret

00004f8c <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	0e 94 08 31 	call	0x6210	; 0x6210 <toupper>

	switch( c )
    4f92:	fc 01       	movw	r30, r24
    4f94:	ff 27       	eor	r31, r31
    4f96:	b0 97       	sbiw	r30, 0x20	; 32
    4f98:	ed 35       	cpi	r30, 0x5D	; 93
    4f9a:	f1 05       	cpc	r31, r1
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <_Z12getMorseCharc+0x14>
    4f9e:	e4 c0       	rjmp	.+456    	; 0x5168 <_Z12getMorseCharc+0x1dc>
    4fa0:	e6 55       	subi	r30, 0x56	; 86
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4fa8:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    4faa:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4fac:	61 e0       	ldi	r22, 0x01	; 1
    4fae:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4fb0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    4fb2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4fb4:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4fb6:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4fb8:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    4fba:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4fbc:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4fbe:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    4fc2:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    4fc6:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4fc8:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    4fca:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4fcc:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4fce:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4fd0:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    4fd2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4fd4:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4fd6:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    4fd8:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    4fda:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4fdc:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4fde:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    4fe0:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    4fe2:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4fe4:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    4fe6:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4fe8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4fea:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4fec:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4fee:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4ff0:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4ff2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4ff4:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4ff6:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4ff8:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4ffa:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4ffc:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4ffe:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    5000:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    5002:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5004:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    5006:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    5008:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    500a:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    500c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    500e:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    5010:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    5012:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5014:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    5016:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5018:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    501a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    501c:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    501e:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    5020:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    5022:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    5024:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    5026:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    5028:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    502a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    502c:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    502e:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    5030:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    5032:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5034:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    5036:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    5038:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    503a:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    503c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    503e:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    5040:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    5042:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5044:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    5046:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    5048:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    504a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    504c:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    504e:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5050:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    5052:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5054:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    5056:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5058:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    505a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    505c:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    505e:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    5060:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    5062:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5064:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    5066:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5068:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    506a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    506c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    506e:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    5070:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    5072:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    5074:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    5076:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    5078:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    507a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    507c:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    507e:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5080:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    5082:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    5084:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    5086:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5088:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    508a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    508c:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    508e:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5090:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    5092:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    5094:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5096:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    5098:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    509a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    509c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    509e:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    50a0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    50a2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    50a4:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    50a6:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    50a8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    50aa:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    50ac:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    50ae:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    50b0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    50b2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    50b4:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    50b6:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    50b8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    50ba:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    50bc:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    50be:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    50c0:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    50c2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    50c4:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    50c6:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    50c8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    50ca:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    50cc:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    50ce:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    50d0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    50d2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    50d4:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    50d6:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    50d8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    50da:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    50dc:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    50de:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    50e0:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    50e2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    50e4:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    50e6:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    50e8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    50ea:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    50ec:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    50ee:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    50f0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    50f2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    50f4:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    50f6:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    50f8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    50fa:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    50fc:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    50fe:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5100:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    5102:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5104:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5106:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5108:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    510a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    510c:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    510e:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    5110:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    5112:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    5114:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    5116:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5118:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    511a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    511c:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    511e:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5120:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    5122:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    5124:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5126:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5128:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    512a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    512c:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    512e:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5130:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    5132:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    5134:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5136:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5138:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    513a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    513c:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    513e:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    5140:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    5142:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    5144:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    5146:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5148:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    514a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    514c:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    514e:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    5150:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    5152:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    5154:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    5156:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    5158:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    515a:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    515c:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    515e:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    5160:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    5162:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    5164:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    5166:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    5168:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    516a:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    516c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    516e:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    5170:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    5172:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5174:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    5176:	08 95       	ret

00005178 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    5178:	cf 93       	push	r28
    517a:	df 93       	push	r29
    517c:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    517e:	00 97       	sbiw	r24, 0x00	; 0
    5180:	b1 f1       	breq	.+108    	; 0x51ee <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    5182:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    5186:	61 15       	cp	r22, r1
    5188:	71 05       	cpc	r23, r1
    518a:	21 f0       	breq	.+8      	; 0x5194 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    518c:	db 01       	movw	r26, r22
    518e:	2c 91       	ld	r18, X
    5190:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    5194:	fc 01       	movw	r30, r24
    5196:	20 81       	ld	r18, Z
    5198:	22 23       	and	r18, r18
    519a:	d9 f0       	breq	.+54     	; 0x51d2 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    519c:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    51a0:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    51a4:	80 e2       	ldi	r24, 0x20	; 32
    51a6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    51aa:	82 2f       	mov	r24, r18
    51ac:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <_Z12getMorseCharc>
    51b0:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    51b4:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    51b8:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    51bc:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    51c0:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    51c4:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    51c8:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    51cc:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
    51d0:	0a c0       	rjmp	.+20     	; 0x51e6 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    51d2:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    51d6:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    51e0:	20 97       	sbiw	r28, 0x00	; 0
    51e2:	09 f0       	breq	.+2      	; 0x51e6 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    51e4:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    51e6:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	c0 c0       	rjmp	.+384    	; 0x536e <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    51ee:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
    51f2:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    51f6:	30 97       	sbiw	r30, 0x00	; 0
    51f8:	09 f4       	brne	.+2      	; 0x51fc <_Z9makeMorsePcPhS0_+0x84>
    51fa:	aa c0       	rjmp	.+340    	; 0x5350 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    51fc:	61 15       	cp	r22, r1
    51fe:	71 05       	cpc	r23, r1
    5200:	21 f0       	breq	.+8      	; 0x520a <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    5202:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorsePcPhS0_E6repeat>
    5206:	db 01       	movw	r26, r22
    5208:	8c 93       	st	X, r24
		}

		if(completedString)
    520a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
    520e:	88 23       	and	r24, r24
    5210:	49 f0       	breq	.+18     	; 0x5224 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    5212:	20 97       	sbiw	r28, 0x00	; 0
    5214:	09 f4       	brne	.+2      	; 0x5218 <_Z9makeMorsePcPhS0_+0xa0>
    5216:	a8 c0       	rjmp	.+336    	; 0x5368 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    521c:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	a5 c0       	rjmp	.+330    	; 0x536e <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    5224:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5228:	88 23       	and	r24, r24
    522a:	21 f0       	breq	.+8      	; 0x5234 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    522c:	81 50       	subi	r24, 0x01	; 1
    522e:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    5232:	7f c0       	rjmp	.+254    	; 0x5332 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    5234:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    5238:	88 23       	and	r24, r24
    523a:	81 f0       	breq	.+32     	; 0x525c <_Z9makeMorsePcPhS0_+0xe4>
    523c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    5240:	81 11       	cpse	r24, r1
    5242:	0c c0       	rjmp	.+24     	; 0x525c <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    5244:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5248:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    524c:	88 23       	and	r24, r24
    524e:	09 f4       	brne	.+2      	; 0x5252 <_Z9makeMorsePcPhS0_+0xda>
    5250:	70 c0       	rjmp	.+224    	; 0x5332 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    5252:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    5256:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    525a:	6b c0       	rjmp	.+214    	; 0x5332 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    525c:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5260:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    5264:	89 17       	cp	r24, r25
    5266:	90 f1       	brcs	.+100    	; 0x52cc <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    5268:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
    526c:	8f 5f       	subi	r24, 0xFF	; 255
    526e:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
    5272:	df 01       	movw	r26, r30
    5274:	a8 0f       	add	r26, r24
    5276:	b1 1d       	adc	r27, r1
    5278:	8c 91       	ld	r24, X
    527a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    527e:	81 11       	cpse	r24, r1
    5280:	19 c0       	rjmp	.+50     	; 0x52b4 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    5282:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorsePcPhS0_E6repeat>
    5286:	88 23       	and	r24, r24
    5288:	31 f0       	breq	.+12     	; 0x5296 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    528a:	80 81       	ld	r24, Z
    528c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    5290:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <_ZZ9makeMorsePcPhS0_E9charIndex>
    5294:	0f c0       	rjmp	.+30     	; 0x52b4 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    5296:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    529a:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    529e:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    52a2:	91 e0       	ldi	r25, 0x01	; 1
    52a4:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    52a8:	20 97       	sbiw	r28, 0x00	; 0
    52aa:	09 f0       	breq	.+2      	; 0x52ae <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    52ac:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    52ae:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    52b2:	5d c0       	rjmp	.+186    	; 0x536e <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    52b4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
    52b8:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <_Z12getMorseCharc>
    52bc:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    52c0:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    52c4:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    52c8:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    52cc:	20 91 a3 05 	lds	r18, 0x05A3	; 0x8005a3 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    52d0:	2d 3f       	cpi	r18, 0xFD	; 253
    52d2:	00 f5       	brcc	.+64     	; 0x5314 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    52d4:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    52d8:	31 e0       	ldi	r19, 0x01	; 1
    52da:	34 0f       	add	r19, r20
    52dc:	30 93 a1 05 	sts	0x05A1, r19	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	02 c0       	rjmp	.+4      	; 0x52ea <_Z9makeMorsePcPhS0_+0x172>
    52e6:	88 0f       	add	r24, r24
    52e8:	99 1f       	adc	r25, r25
    52ea:	4a 95       	dec	r20
    52ec:	e2 f7       	brpl	.-8      	; 0x52e6 <_Z9makeMorsePcPhS0_+0x16e>
    52ee:	82 23       	and	r24, r18
    52f0:	21 f0       	breq	.+8      	; 0x52fa <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    52f2:	82 e0       	ldi	r24, 0x02	; 2
    52f4:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    52f8:	02 c0       	rjmp	.+4      	; 0x52fe <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    52fa:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5304:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    5308:	38 17       	cp	r19, r24
    530a:	98 f0       	brcs	.+38     	; 0x5332 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    530c:	82 e0       	ldi	r24, 0x02	; 2
    530e:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <_ZZ9makeMorsePcPhS0_E10addedSpace>
    5312:	0f c0       	rjmp	.+30     	; 0x5332 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5314:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    5318:	9f ef       	ldi	r25, 0xFF	; 255
    531a:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    531e:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    5322:	84 30       	cpi	r24, 0x04	; 4
    5324:	20 f0       	brcs	.+8      	; 0x532e <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5326:	84 50       	subi	r24, 0x04	; 4
    5328:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    532c:	02 c0       	rjmp	.+4      	; 0x5332 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    532e:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5332:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZZ9makeMorsePcPhS0_E1c>
    5336:	8c 33       	cpi	r24, 0x3C	; 60
    5338:	31 f4       	brne	.+12     	; 0x5346 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    533a:	81 e0       	ldi	r24, 0x01	; 1
    533c:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    5340:	20 97       	sbiw	r28, 0x00	; 0
    5342:	41 f4       	brne	.+16     	; 0x5354 <_Z9makeMorsePcPhS0_+0x1dc>
    5344:	14 c0       	rjmp	.+40     	; 0x536e <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    5346:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    534a:	20 97       	sbiw	r28, 0x00	; 0
    534c:	19 f4       	brne	.+6      	; 0x5354 <_Z9makeMorsePcPhS0_+0x1dc>
    534e:	09 c0       	rjmp	.+18     	; 0x5362 <_Z9makeMorsePcPhS0_+0x1ea>
    5350:	20 97       	sbiw	r28, 0x00	; 0
    5352:	19 f0       	breq	.+6      	; 0x535a <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    5354:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <_ZZ9makeMorsePcPhS0_E15completedString>
    5358:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    535a:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    535e:	81 11       	cpse	r24, r1
    5360:	05 c0       	rjmp	.+10     	; 0x536c <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    5362:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZZ9makeMorsePcPhS0_E9carrierOn>
    5366:	03 c0       	rjmp	.+6      	; 0x536e <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    5368:	80 e0       	ldi	r24, 0x00	; 0
    536a:	01 c0       	rjmp	.+2      	; 0x536e <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    536c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	08 95       	ret

00005374 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    5374:	cf 92       	push	r12
    5376:	df 92       	push	r13
    5378:	ef 92       	push	r14
    537a:	ff 92       	push	r15
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	cf 93       	push	r28
    5382:	fc 01       	movw	r30, r24
    5384:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5386:	80 81       	ld	r24, Z
		if(!c)
    5388:	88 23       	and	r24, r24
    538a:	c1 f0       	breq	.+48     	; 0x53bc <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    538c:	8f 01       	movw	r16, r30
    538e:	0f 5f       	subi	r16, 0xFF	; 255
    5390:	1f 4f       	sbci	r17, 0xFF	; 255
    5392:	7f 01       	movw	r14, r30
    5394:	94 e1       	ldi	r25, 0x14	; 20
    5396:	e9 0e       	add	r14, r25
    5398:	f1 1c       	adc	r15, r1
    539a:	c0 e0       	ldi	r28, 0x00	; 0
    539c:	05 c0       	rjmp	.+10     	; 0x53a8 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    539e:	f8 01       	movw	r30, r16
    53a0:	81 91       	ld	r24, Z+
    53a2:	8f 01       	movw	r16, r30
		if(!c)
    53a4:	88 23       	and	r24, r24
    53a6:	59 f0       	breq	.+22     	; 0x53be <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    53a8:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    53ac:	6d 3f       	cpi	r22, 0xFD	; 253
    53ae:	08 f4       	brcc	.+2      	; 0x53b2 <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    53b0:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    53b2:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    53b4:	0e 15       	cp	r16, r14
    53b6:	1f 05       	cpc	r17, r15
    53b8:	91 f7       	brne	.-28     	; 0x539e <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    53ba:	01 c0       	rjmp	.+2      	; 0x53be <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    53bc:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    53be:	80 eb       	ldi	r24, 0xB0	; 176
    53c0:	94 e0       	ldi	r25, 0x04	; 4
    53c2:	b6 01       	movw	r22, r12
    53c4:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <__udivmodhi4>
}
    53c8:	c6 9f       	mul	r28, r22
    53ca:	c0 01       	movw	r24, r0
    53cc:	c7 9f       	mul	r28, r23
    53ce:	90 0d       	add	r25, r0
    53d0:	11 24       	eor	r1, r1
    53d2:	cf 91       	pop	r28
    53d4:	1f 91       	pop	r17
    53d6:	0f 91       	pop	r16
    53d8:	ff 90       	pop	r15
    53da:	ef 90       	pop	r14
    53dc:	df 90       	pop	r13
    53de:	cf 90       	pop	r12
    53e0:	08 95       	ret

000053e2 <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    53e2:	98 2f       	mov	r25, r24
    53e4:	96 95       	lsr	r25
    53e6:	96 95       	lsr	r25
    53e8:	96 95       	lsr	r25
    53ea:	9e 71       	andi	r25, 0x1E	; 30
    53ec:	29 2f       	mov	r18, r25
    53ee:	22 0f       	add	r18, r18
    53f0:	22 0f       	add	r18, r18
    53f2:	92 0f       	add	r25, r18
    53f4:	8f 70       	andi	r24, 0x0F	; 15
    53f6:	89 0f       	add	r24, r25
    53f8:	08 95       	ret

000053fa <_Z8char2bcdPc>:
    53fa:	fc 01       	movw	r30, r24
    53fc:	20 81       	ld	r18, Z
    53fe:	81 81       	ldd	r24, Z+1	; 0x01
    5400:	80 53       	subi	r24, 0x30	; 48
    5402:	f0 e1       	ldi	r31, 0x10	; 16
    5404:	2f 9f       	mul	r18, r31
    5406:	80 0d       	add	r24, r0
    5408:	11 24       	eor	r1, r1
    540a:	08 95       	ret

0000540c <_Z16rv3028_set_epochm>:
    540c:	cf 93       	push	r28
    540e:	df 93       	push	r29
    5410:	00 d0       	rcall	.+0      	; 0x5412 <_Z16rv3028_set_epochm+0x6>
    5412:	00 d0       	rcall	.+0      	; 0x5414 <_Z16rv3028_set_epochm+0x8>
    5414:	1f 92       	push	r1
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	ae 01       	movw	r20, r28
    541c:	4f 5f       	subi	r20, 0xFF	; 255
    541e:	5f 4f       	sbci	r21, 0xFF	; 255
    5420:	25 e0       	ldi	r18, 0x05	; 5
    5422:	fa 01       	movw	r30, r20
    5424:	11 92       	st	Z+, r1
    5426:	2a 95       	dec	r18
    5428:	e9 f7       	brne	.-6      	; 0x5424 <_Z16rv3028_set_epochm+0x18>
    542a:	9c 83       	std	Y+4, r25	; 0x04
    542c:	8b 83       	std	Y+3, r24	; 0x03
    542e:	7a 83       	std	Y+2, r23	; 0x02
    5430:	69 83       	std	Y+1, r22	; 0x01
    5432:	24 e0       	ldi	r18, 0x04	; 4
    5434:	6b e1       	ldi	r22, 0x1B	; 27
    5436:	84 ea       	ldi	r24, 0xA4	; 164
    5438:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z16i2c_device_writehhPhh>
    543c:	0f 90       	pop	r0
    543e:	0f 90       	pop	r0
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	df 91       	pop	r29
    5448:	cf 91       	pop	r28
    544a:	08 95       	ret

0000544c <_Z16rv3028_get_epochv>:
    544c:	cf 93       	push	r28
    544e:	df 93       	push	r29
    5450:	00 d0       	rcall	.+0      	; 0x5452 <_Z16rv3028_get_epochv+0x6>
    5452:	00 d0       	rcall	.+0      	; 0x5454 <_Z16rv3028_get_epochv+0x8>
    5454:	cd b7       	in	r28, 0x3d	; 61
    5456:	de b7       	in	r29, 0x3e	; 62
    5458:	19 82       	std	Y+1, r1	; 0x01
    545a:	1a 82       	std	Y+2, r1	; 0x02
    545c:	1b 82       	std	Y+3, r1	; 0x03
    545e:	1c 82       	std	Y+4, r1	; 0x04
    5460:	24 e0       	ldi	r18, 0x04	; 4
    5462:	ae 01       	movw	r20, r28
    5464:	4f 5f       	subi	r20, 0xFF	; 255
    5466:	5f 4f       	sbci	r21, 0xFF	; 255
    5468:	6b e1       	ldi	r22, 0x1B	; 27
    546a:	84 ea       	ldi	r24, 0xA4	; 164
    546c:	0e 94 22 08 	call	0x1044	; 0x1044 <_Z15i2c_device_readhhPhh>
    5470:	81 11       	cpse	r24, r1
    5472:	11 c0       	rjmp	.+34     	; 0x5496 <_Z16rv3028_get_epochv+0x4a>
    5474:	2a 81       	ldd	r18, Y+2	; 0x02
    5476:	6b 81       	ldd	r22, Y+3	; 0x03
    5478:	86 2f       	mov	r24, r22
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	a0 e0       	ldi	r26, 0x00	; 0
    547e:	b0 e0       	ldi	r27, 0x00	; 0
    5480:	dc 01       	movw	r26, r24
    5482:	99 27       	eor	r25, r25
    5484:	88 27       	eor	r24, r24
    5486:	92 2b       	or	r25, r18
    5488:	29 81       	ldd	r18, Y+1	; 0x01
    548a:	82 2b       	or	r24, r18
    548c:	2c 81       	ldd	r18, Y+4	; 0x04
    548e:	bc 01       	movw	r22, r24
    5490:	cd 01       	movw	r24, r26
    5492:	92 2b       	or	r25, r18
    5494:	03 c0       	rjmp	.+6      	; 0x549c <_Z16rv3028_get_epochv+0x50>
    5496:	60 e0       	ldi	r22, 0x00	; 0
    5498:	70 e0       	ldi	r23, 0x00	; 0
    549a:	cb 01       	movw	r24, r22
    549c:	0f 90       	pop	r0
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	08 95       	ret

000054aa <_Z16rv3028_get_epochPbPc>:
    54aa:	6f 92       	push	r6
    54ac:	7f 92       	push	r7
    54ae:	8f 92       	push	r8
    54b0:	9f 92       	push	r9
    54b2:	af 92       	push	r10
    54b4:	bf 92       	push	r11
    54b6:	cf 92       	push	r12
    54b8:	df 92       	push	r13
    54ba:	ef 92       	push	r14
    54bc:	ff 92       	push	r15
    54be:	0f 93       	push	r16
    54c0:	1f 93       	push	r17
    54c2:	cf 93       	push	r28
    54c4:	df 93       	push	r29
    54c6:	6c 01       	movw	r12, r24
    54c8:	eb 01       	movw	r28, r22
    54ca:	20 97       	sbiw	r28, 0x00	; 0
    54cc:	09 f4       	brne	.+2      	; 0x54d0 <_Z16rv3028_get_epochPbPc+0x26>
    54ce:	b6 c0       	rjmp	.+364    	; 0x563c <_Z16rv3028_get_epochPbPc+0x192>
    54d0:	cb 01       	movw	r24, r22
    54d2:	0a 96       	adiw	r24, 0x0a	; 10
    54d4:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_Z8char2bcdPc>
    54d8:	88 2e       	mov	r8, r24
    54da:	ce 01       	movw	r24, r28
    54dc:	08 96       	adiw	r24, 0x08	; 8
    54de:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_Z8char2bcdPc>
    54e2:	78 2e       	mov	r7, r24
    54e4:	ce 01       	movw	r24, r28
    54e6:	06 96       	adiw	r24, 0x06	; 6
    54e8:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_Z8char2bcdPc>
    54ec:	98 2e       	mov	r9, r24
    54ee:	ce 01       	movw	r24, r28
    54f0:	04 96       	adiw	r24, 0x04	; 4
    54f2:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_Z8char2bcdPc>
    54f6:	18 2f       	mov	r17, r24
    54f8:	ce 01       	movw	r24, r28
    54fa:	02 96       	adiw	r24, 0x02	; 2
    54fc:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_Z8char2bcdPc>
    5500:	08 2f       	mov	r16, r24
    5502:	ce 01       	movw	r24, r28
    5504:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_Z8char2bcdPc>
    5508:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <_Z7bcd2dech>
    550c:	e8 2e       	mov	r14, r24
    550e:	f1 2c       	mov	r15, r1
    5510:	57 01       	movw	r10, r14
    5512:	80 e3       	ldi	r24, 0x30	; 48
    5514:	a8 1a       	sub	r10, r24
    5516:	88 ef       	ldi	r24, 0xF8	; 248
    5518:	b8 0a       	sbc	r11, r24
    551a:	80 2f       	mov	r24, r16
    551c:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <_Z7bcd2dech>
    5520:	d8 2f       	mov	r29, r24
    5522:	81 2f       	mov	r24, r17
    5524:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <_Z7bcd2dech>
    5528:	68 2e       	mov	r6, r24
    552a:	d2 30       	cpi	r29, 0x02	; 2
    552c:	68 f0       	brcs	.+26     	; 0x5548 <_Z16rv3028_get_epochPbPc+0x9e>
    552e:	00 e0       	ldi	r16, 0x00	; 0
    5530:	10 e0       	ldi	r17, 0x00	; 0
    5532:	c1 e0       	ldi	r28, 0x01	; 1
    5534:	6c 2f       	mov	r22, r28
    5536:	c5 01       	movw	r24, r10
    5538:	0e 94 42 01 	call	0x284	; 0x284 <month_length>
    553c:	08 0f       	add	r16, r24
    553e:	11 1d       	adc	r17, r1
    5540:	cf 5f       	subi	r28, 0xFF	; 255
    5542:	dc 13       	cpse	r29, r28
    5544:	f7 cf       	rjmp	.-18     	; 0x5534 <_Z16rv3028_get_epochPbPc+0x8a>
    5546:	02 c0       	rjmp	.+4      	; 0x554c <_Z16rv3028_get_epochPbPc+0xa2>
    5548:	00 e0       	ldi	r16, 0x00	; 0
    554a:	10 e0       	ldi	r17, 0x00	; 0
    554c:	86 2d       	mov	r24, r6
    554e:	66 0c       	add	r6, r6
    5550:	99 0b       	sbc	r25, r25
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	08 0f       	add	r16, r24
    5556:	19 1f       	adc	r17, r25
    5558:	88 2d       	mov	r24, r8
    555a:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <_Z7bcd2dech>
    555e:	88 2e       	mov	r8, r24
    5560:	87 2d       	mov	r24, r7
    5562:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <_Z7bcd2dech>
    5566:	c8 2f       	mov	r28, r24
    5568:	89 2d       	mov	r24, r9
    556a:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <_Z7bcd2dech>
    556e:	08 2c       	mov	r0, r8
    5570:	00 0c       	add	r0, r0
    5572:	99 08       	sbc	r9, r9
    5574:	9c e3       	ldi	r25, 0x3C	; 60
    5576:	c9 02       	muls	r28, r25
    5578:	80 0c       	add	r8, r0
    557a:	91 1c       	adc	r9, r1
    557c:	11 24       	eor	r1, r1
    557e:	09 2c       	mov	r0, r9
    5580:	00 0c       	add	r0, r0
    5582:	aa 08       	sbc	r10, r10
    5584:	bb 08       	sbc	r11, r11
    5586:	a8 2f       	mov	r26, r24
    5588:	88 0f       	add	r24, r24
    558a:	bb 0b       	sbc	r27, r27
    558c:	20 e1       	ldi	r18, 0x10	; 16
    558e:	3e e0       	ldi	r19, 0x0E	; 14
    5590:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <__usmulhisi3>
    5594:	86 0e       	add	r8, r22
    5596:	97 1e       	adc	r9, r23
    5598:	a8 1e       	adc	r10, r24
    559a:	b9 1e       	adc	r11, r25
    559c:	d8 01       	movw	r26, r16
    559e:	20 e8       	ldi	r18, 0x80	; 128
    55a0:	31 e5       	ldi	r19, 0x51	; 81
    55a2:	41 e0       	ldi	r20, 0x01	; 1
    55a4:	50 e0       	ldi	r21, 0x00	; 0
    55a6:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__mulshisi3>
    55aa:	86 0e       	add	r8, r22
    55ac:	97 1e       	adc	r9, r23
    55ae:	a8 1e       	adc	r10, r24
    55b0:	b9 1e       	adc	r11, r25
    55b2:	d7 01       	movw	r26, r14
    55b4:	5e 96       	adiw	r26, 0x1e	; 30
    55b6:	20 e8       	ldi	r18, 0x80	; 128
    55b8:	33 e3       	ldi	r19, 0x33	; 51
    55ba:	41 ee       	ldi	r20, 0xE1	; 225
    55bc:	51 e0       	ldi	r21, 0x01	; 1
    55be:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__mulshisi3>
    55c2:	86 0e       	add	r8, r22
    55c4:	97 1e       	adc	r9, r23
    55c6:	a8 1e       	adc	r10, r24
    55c8:	b9 1e       	adc	r11, r25
    55ca:	c7 01       	movw	r24, r14
    55cc:	4f 96       	adiw	r24, 0x1f	; 31
    55ce:	dc 01       	movw	r26, r24
    55d0:	0a f4       	brpl	.+2      	; 0x55d4 <_Z16rv3028_get_epochPbPc+0x12a>
    55d2:	13 96       	adiw	r26, 0x03	; 3
    55d4:	b5 95       	asr	r27
    55d6:	a7 95       	ror	r26
    55d8:	b5 95       	asr	r27
    55da:	a7 95       	ror	r26
    55dc:	20 e8       	ldi	r18, 0x80	; 128
    55de:	31 e5       	ldi	r19, 0x51	; 81
    55e0:	41 e0       	ldi	r20, 0x01	; 1
    55e2:	50 e0       	ldi	r21, 0x00	; 0
    55e4:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__mulshisi3>
    55e8:	86 0e       	add	r8, r22
    55ea:	97 1e       	adc	r9, r23
    55ec:	a8 1e       	adc	r10, r24
    55ee:	b9 1e       	adc	r11, r25
    55f0:	c7 01       	movw	r24, r14
    55f2:	8d 59       	subi	r24, 0x9D	; 157
    55f4:	9f 4f       	sbci	r25, 0xFF	; 255
    55f6:	64 e6       	ldi	r22, 0x64	; 100
    55f8:	70 e0       	ldi	r23, 0x00	; 0
    55fa:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    55fe:	db 01       	movw	r26, r22
    5600:	20 e8       	ldi	r18, 0x80	; 128
    5602:	3e ea       	ldi	r19, 0xAE	; 174
    5604:	4e ef       	ldi	r20, 0xFE	; 254
    5606:	5f ef       	ldi	r21, 0xFF	; 255
    5608:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__mulshisi3>
    560c:	86 0e       	add	r8, r22
    560e:	97 1e       	adc	r9, r23
    5610:	a8 1e       	adc	r10, r24
    5612:	b9 1e       	adc	r11, r25
    5614:	c7 01       	movw	r24, r14
    5616:	81 57       	subi	r24, 0x71	; 113
    5618:	9e 4f       	sbci	r25, 0xFE	; 254
    561a:	60 e9       	ldi	r22, 0x90	; 144
    561c:	71 e0       	ldi	r23, 0x01	; 1
    561e:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__divmodhi4>
    5622:	db 01       	movw	r26, r22
    5624:	20 e8       	ldi	r18, 0x80	; 128
    5626:	31 e5       	ldi	r19, 0x51	; 81
    5628:	41 e0       	ldi	r20, 0x01	; 1
    562a:	50 e0       	ldi	r21, 0x00	; 0
    562c:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__mulshisi3>
    5630:	68 0d       	add	r22, r8
    5632:	79 1d       	adc	r23, r9
    5634:	8a 1d       	adc	r24, r10
    5636:	9b 1d       	adc	r25, r11
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	09 c0       	rjmp	.+18     	; 0x564e <_Z16rv3028_get_epochPbPc+0x1a4>
    563c:	0e 94 26 2a 	call	0x544c	; 0x544c <_Z16rv3028_get_epochv>
    5640:	31 e0       	ldi	r19, 0x01	; 1
    5642:	61 15       	cp	r22, r1
    5644:	71 05       	cpc	r23, r1
    5646:	81 05       	cpc	r24, r1
    5648:	91 05       	cpc	r25, r1
    564a:	09 f0       	breq	.+2      	; 0x564e <_Z16rv3028_get_epochPbPc+0x1a4>
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	c1 14       	cp	r12, r1
    5650:	d1 04       	cpc	r13, r1
    5652:	31 f0       	breq	.+12     	; 0x5660 <_Z16rv3028_get_epochPbPc+0x1b6>
    5654:	21 e0       	ldi	r18, 0x01	; 1
    5656:	31 11       	cpse	r19, r1
    5658:	01 c0       	rjmp	.+2      	; 0x565c <_Z16rv3028_get_epochPbPc+0x1b2>
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	f6 01       	movw	r30, r12
    565e:	20 83       	st	Z, r18
    5660:	df 91       	pop	r29
    5662:	cf 91       	pop	r28
    5664:	1f 91       	pop	r17
    5666:	0f 91       	pop	r16
    5668:	ff 90       	pop	r15
    566a:	ef 90       	pop	r14
    566c:	df 90       	pop	r13
    566e:	cf 90       	pop	r12
    5670:	bf 90       	pop	r11
    5672:	af 90       	pop	r10
    5674:	9f 90       	pop	r9
    5676:	8f 90       	pop	r8
    5678:	7f 90       	pop	r7
    567a:	6f 90       	pop	r6
    567c:	08 95       	ret

0000567e <_Z21rv3028_set_offset_RAMj>:
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
    5682:	00 d0       	rcall	.+0      	; 0x5684 <_Z21rv3028_set_offset_RAMj+0x6>
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
    5688:	20 e1       	ldi	r18, 0x10	; 16
    568a:	2a 83       	std	Y+2, r18	; 0x02
    568c:	9c 01       	movw	r18, r24
    568e:	36 95       	lsr	r19
    5690:	27 95       	ror	r18
    5692:	29 83       	std	Y+1, r18	; 0x01
    5694:	80 ff       	sbrs	r24, 0
    5696:	02 c0       	rjmp	.+4      	; 0x569c <_Z21rv3028_set_offset_RAMj+0x1e>
    5698:	80 e9       	ldi	r24, 0x90	; 144
    569a:	8a 83       	std	Y+2, r24	; 0x02
    569c:	22 e0       	ldi	r18, 0x02	; 2
    569e:	ae 01       	movw	r20, r28
    56a0:	4f 5f       	subi	r20, 0xFF	; 255
    56a2:	5f 4f       	sbci	r21, 0xFF	; 255
    56a4:	66 e3       	ldi	r22, 0x36	; 54
    56a6:	84 ea       	ldi	r24, 0xA4	; 164
    56a8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z16i2c_device_writehhPhh>
    56ac:	0f 90       	pop	r0
    56ae:	0f 90       	pop	r0
    56b0:	df 91       	pop	r29
    56b2:	cf 91       	pop	r28
    56b4:	08 95       	ret

000056b6 <_Z13rv3028_1s_sqwh>:
    56b6:	cf 93       	push	r28
    56b8:	df 93       	push	r29
    56ba:	00 d0       	rcall	.+0      	; 0x56bc <_Z13rv3028_1s_sqwh+0x6>
    56bc:	cd b7       	in	r28, 0x3d	; 61
    56be:	de b7       	in	r29, 0x3e	; 62
    56c0:	19 82       	std	Y+1, r1	; 0x01
    56c2:	88 23       	and	r24, r24
    56c4:	31 f0       	breq	.+12     	; 0x56d2 <_Z13rv3028_1s_sqwh+0x1c>
    56c6:	85 ec       	ldi	r24, 0xC5	; 197
    56c8:	8a 83       	std	Y+2, r24	; 0x02
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <_ZL14g_1HzSqWave_on>
    56d0:	04 c0       	rjmp	.+8      	; 0x56da <_Z13rv3028_1s_sqwh+0x24>
    56d2:	85 e4       	ldi	r24, 0x45	; 69
    56d4:	8a 83       	std	Y+2, r24	; 0x02
    56d6:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZL14g_1HzSqWave_on>
    56da:	21 e0       	ldi	r18, 0x01	; 1
    56dc:	ae 01       	movw	r20, r28
    56de:	4e 5f       	subi	r20, 0xFE	; 254
    56e0:	5f 4f       	sbci	r21, 0xFF	; 255
    56e2:	65 e3       	ldi	r22, 0x35	; 53
    56e4:	84 ea       	ldi	r24, 0xA4	; 164
    56e6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z16i2c_device_writehhPhh>
    56ea:	89 81       	ldd	r24, Y+1	; 0x01
    56ec:	81 11       	cpse	r24, r1
    56ee:	0c c0       	rjmp	.+24     	; 0x5708 <_Z13rv3028_1s_sqwh+0x52>
    56f0:	21 e0       	ldi	r18, 0x01	; 1
    56f2:	ae 01       	movw	r20, r28
    56f4:	4f 5f       	subi	r20, 0xFF	; 255
    56f6:	5f 4f       	sbci	r21, 0xFF	; 255
    56f8:	6e e0       	ldi	r22, 0x0E	; 14
    56fa:	84 ea       	ldi	r24, 0xA4	; 164
    56fc:	0e 94 22 08 	call	0x1044	; 0x1044 <_Z15i2c_device_readhhPhh>
    5700:	89 81       	ldd	r24, Y+1	; 0x01
    5702:	8f 76       	andi	r24, 0x6F	; 111
    5704:	89 83       	std	Y+1, r24	; 0x01
    5706:	02 c0       	rjmp	.+4      	; 0x570c <_Z13rv3028_1s_sqwh+0x56>
    5708:	80 e8       	ldi	r24, 0x80	; 128
    570a:	89 83       	std	Y+1, r24	; 0x01
    570c:	1a 82       	std	Y+2, r1	; 0x02
    570e:	21 e0       	ldi	r18, 0x01	; 1
    5710:	ae 01       	movw	r20, r28
    5712:	4e 5f       	subi	r20, 0xFE	; 254
    5714:	5f 4f       	sbci	r21, 0xFF	; 255
    5716:	6e e0       	ldi	r22, 0x0E	; 14
    5718:	84 ea       	ldi	r24, 0xA4	; 164
    571a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z16i2c_device_writehhPhh>
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	0f 90       	pop	r0
    5722:	0f 90       	pop	r0
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	08 95       	ret

0000572a <_Z18waitForEEPROMReadyv>:
    572a:	cf 93       	push	r28
    572c:	df 93       	push	r29
    572e:	1f 92       	push	r1
    5730:	cd b7       	in	r28, 0x3d	; 61
    5732:	de b7       	in	r29, 0x3e	; 62
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	89 83       	std	Y+1, r24	; 0x01
    5738:	21 e0       	ldi	r18, 0x01	; 1
    573a:	ae 01       	movw	r20, r28
    573c:	4f 5f       	subi	r20, 0xFF	; 255
    573e:	5f 4f       	sbci	r21, 0xFF	; 255
    5740:	6e e0       	ldi	r22, 0x0E	; 14
    5742:	84 ea       	ldi	r24, 0xA4	; 164
    5744:	0e 94 22 08 	call	0x1044	; 0x1044 <_Z15i2c_device_readhhPhh>
    5748:	81 11       	cpse	r24, r1
    574a:	07 c0       	rjmp	.+14     	; 0x575a <_Z18waitForEEPROMReadyv+0x30>
    574c:	89 81       	ldd	r24, Y+1	; 0x01
    574e:	80 78       	andi	r24, 0x80	; 128
    5750:	89 83       	std	Y+1, r24	; 0x01
    5752:	81 11       	cpse	r24, r1
    5754:	f1 cf       	rjmp	.-30     	; 0x5738 <_Z18waitForEEPROMReadyv+0xe>
    5756:	80 e0       	ldi	r24, 0x00	; 0
    5758:	03 c0       	rjmp	.+6      	; 0x5760 <_Z18waitForEEPROMReadyv+0x36>
    575a:	89 81       	ldd	r24, Y+1	; 0x01
    575c:	88 23       	and	r24, r24
    575e:	d9 f3       	breq	.-10     	; 0x5756 <_Z18waitForEEPROMReadyv+0x2c>
    5760:	0f 90       	pop	r0
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	08 95       	ret

00005768 <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
    576c:	1f 92       	push	r1
    576e:	cd b7       	in	r28, 0x3d	; 61
    5770:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    5772:	19 82       	std	Y+1, r1	; 0x01

		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    5774:	21 e0       	ldi	r18, 0x01	; 1
    5776:	ae 01       	movw	r20, r28
    5778:	4f 5f       	subi	r20, 0xFF	; 255
    577a:	5f 4f       	sbci	r21, 0xFF	; 255
    577c:	67 e2       	ldi	r22, 0x27	; 39
    577e:	84 ea       	ldi	r24, 0xA4	; 164
    5780:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    5784:	0e 94 95 2b 	call	0x572a	; 0x572a <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    5788:	82 e1       	ldi	r24, 0x12	; 18
    578a:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    578c:	21 e0       	ldi	r18, 0x01	; 1
    578e:	ae 01       	movw	r20, r28
    5790:	4f 5f       	subi	r20, 0xFF	; 255
    5792:	5f 4f       	sbci	r21, 0xFF	; 255
    5794:	67 e2       	ldi	r22, 0x27	; 39
    5796:	84 ea       	ldi	r24, 0xA4	; 164
    5798:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    579c:	0e 94 95 2b 	call	0x572a	; 0x572a <_Z18waitForEEPROMReadyv>
	}
    57a0:	0f 90       	pop	r0
    57a2:	df 91       	pop	r29
    57a4:	cf 91       	pop	r28
    57a6:	08 95       	ret

000057a8 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    57a8:	cf 93       	push	r28
    57aa:	df 93       	push	r29
    57ac:	00 d0       	rcall	.+0      	; 0x57ae <_Z21rv3028_get_offset_RAMv+0x6>
    57ae:	cd b7       	in	r28, 0x3d	; 61
    57b0:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    57b2:	0e 94 b4 2b 	call	0x5768	; 0x5768 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    57b6:	22 e0       	ldi	r18, 0x02	; 2
    57b8:	ae 01       	movw	r20, r28
    57ba:	4f 5f       	subi	r20, 0xFF	; 255
    57bc:	5f 4f       	sbci	r21, 0xFF	; 255
    57be:	66 e3       	ldi	r22, 0x36	; 54
    57c0:	84 ea       	ldi	r24, 0xA4	; 164
    57c2:	0e 94 22 08 	call	0x1044	; 0x1044 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    57c6:	89 81       	ldd	r24, Y+1	; 0x01
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	88 0f       	add	r24, r24
    57cc:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    57ce:	2a 81       	ldd	r18, Y+2	; 0x02
    57d0:	22 23       	and	r18, r18
    57d2:	0c f4       	brge	.+2      	; 0x57d6 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    57d4:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
    57da:	df 91       	pop	r29
    57dc:	cf 91       	pop	r28
    57de:	08 95       	ret

000057e0 <__subsf3>:
    57e0:	50 58       	subi	r21, 0x80	; 128

000057e2 <__addsf3>:
    57e2:	bb 27       	eor	r27, r27
    57e4:	aa 27       	eor	r26, r26
    57e6:	0e 94 08 2c 	call	0x5810	; 0x5810 <__addsf3x>
    57ea:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__fp_round>
    57ee:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <__fp_pscA>
    57f2:	38 f0       	brcs	.+14     	; 0x5802 <__addsf3+0x20>
    57f4:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fp_pscB>
    57f8:	20 f0       	brcs	.+8      	; 0x5802 <__addsf3+0x20>
    57fa:	39 f4       	brne	.+14     	; 0x580a <__addsf3+0x28>
    57fc:	9f 3f       	cpi	r25, 0xFF	; 255
    57fe:	19 f4       	brne	.+6      	; 0x5806 <__addsf3+0x24>
    5800:	26 f4       	brtc	.+8      	; 0x580a <__addsf3+0x28>
    5802:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_nan>
    5806:	0e f4       	brtc	.+2      	; 0x580a <__addsf3+0x28>
    5808:	e0 95       	com	r30
    580a:	e7 fb       	bst	r30, 7
    580c:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__fp_inf>

00005810 <__addsf3x>:
    5810:	e9 2f       	mov	r30, r25
    5812:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__fp_split3>
    5816:	58 f3       	brcs	.-42     	; 0x57ee <__addsf3+0xc>
    5818:	ba 17       	cp	r27, r26
    581a:	62 07       	cpc	r22, r18
    581c:	73 07       	cpc	r23, r19
    581e:	84 07       	cpc	r24, r20
    5820:	95 07       	cpc	r25, r21
    5822:	20 f0       	brcs	.+8      	; 0x582c <__addsf3x+0x1c>
    5824:	79 f4       	brne	.+30     	; 0x5844 <__addsf3x+0x34>
    5826:	a6 f5       	brtc	.+104    	; 0x5890 <__addsf3x+0x80>
    5828:	0c 94 f9 2d 	jmp	0x5bf2	; 0x5bf2 <__fp_zero>
    582c:	0e f4       	brtc	.+2      	; 0x5830 <__addsf3x+0x20>
    582e:	e0 95       	com	r30
    5830:	0b 2e       	mov	r0, r27
    5832:	ba 2f       	mov	r27, r26
    5834:	a0 2d       	mov	r26, r0
    5836:	0b 01       	movw	r0, r22
    5838:	b9 01       	movw	r22, r18
    583a:	90 01       	movw	r18, r0
    583c:	0c 01       	movw	r0, r24
    583e:	ca 01       	movw	r24, r20
    5840:	a0 01       	movw	r20, r0
    5842:	11 24       	eor	r1, r1
    5844:	ff 27       	eor	r31, r31
    5846:	59 1b       	sub	r21, r25
    5848:	99 f0       	breq	.+38     	; 0x5870 <__addsf3x+0x60>
    584a:	59 3f       	cpi	r21, 0xF9	; 249
    584c:	50 f4       	brcc	.+20     	; 0x5862 <__addsf3x+0x52>
    584e:	50 3e       	cpi	r21, 0xE0	; 224
    5850:	68 f1       	brcs	.+90     	; 0x58ac <__addsf3x+0x9c>
    5852:	1a 16       	cp	r1, r26
    5854:	f0 40       	sbci	r31, 0x00	; 0
    5856:	a2 2f       	mov	r26, r18
    5858:	23 2f       	mov	r18, r19
    585a:	34 2f       	mov	r19, r20
    585c:	44 27       	eor	r20, r20
    585e:	58 5f       	subi	r21, 0xF8	; 248
    5860:	f3 cf       	rjmp	.-26     	; 0x5848 <__addsf3x+0x38>
    5862:	46 95       	lsr	r20
    5864:	37 95       	ror	r19
    5866:	27 95       	ror	r18
    5868:	a7 95       	ror	r26
    586a:	f0 40       	sbci	r31, 0x00	; 0
    586c:	53 95       	inc	r21
    586e:	c9 f7       	brne	.-14     	; 0x5862 <__addsf3x+0x52>
    5870:	7e f4       	brtc	.+30     	; 0x5890 <__addsf3x+0x80>
    5872:	1f 16       	cp	r1, r31
    5874:	ba 0b       	sbc	r27, r26
    5876:	62 0b       	sbc	r22, r18
    5878:	73 0b       	sbc	r23, r19
    587a:	84 0b       	sbc	r24, r20
    587c:	ba f0       	brmi	.+46     	; 0x58ac <__addsf3x+0x9c>
    587e:	91 50       	subi	r25, 0x01	; 1
    5880:	a1 f0       	breq	.+40     	; 0x58aa <__addsf3x+0x9a>
    5882:	ff 0f       	add	r31, r31
    5884:	bb 1f       	adc	r27, r27
    5886:	66 1f       	adc	r22, r22
    5888:	77 1f       	adc	r23, r23
    588a:	88 1f       	adc	r24, r24
    588c:	c2 f7       	brpl	.-16     	; 0x587e <__addsf3x+0x6e>
    588e:	0e c0       	rjmp	.+28     	; 0x58ac <__addsf3x+0x9c>
    5890:	ba 0f       	add	r27, r26
    5892:	62 1f       	adc	r22, r18
    5894:	73 1f       	adc	r23, r19
    5896:	84 1f       	adc	r24, r20
    5898:	48 f4       	brcc	.+18     	; 0x58ac <__addsf3x+0x9c>
    589a:	87 95       	ror	r24
    589c:	77 95       	ror	r23
    589e:	67 95       	ror	r22
    58a0:	b7 95       	ror	r27
    58a2:	f7 95       	ror	r31
    58a4:	9e 3f       	cpi	r25, 0xFE	; 254
    58a6:	08 f0       	brcs	.+2      	; 0x58aa <__addsf3x+0x9a>
    58a8:	b0 cf       	rjmp	.-160    	; 0x580a <__addsf3+0x28>
    58aa:	93 95       	inc	r25
    58ac:	88 0f       	add	r24, r24
    58ae:	08 f0       	brcs	.+2      	; 0x58b2 <__addsf3x+0xa2>
    58b0:	99 27       	eor	r25, r25
    58b2:	ee 0f       	add	r30, r30
    58b4:	97 95       	ror	r25
    58b6:	87 95       	ror	r24
    58b8:	08 95       	ret

000058ba <__cmpsf2>:
    58ba:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fp_cmp>
    58be:	08 f4       	brcc	.+2      	; 0x58c2 <__cmpsf2+0x8>
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	08 95       	ret

000058c4 <cos>:
    58c4:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__fp_rempio2>
    58c8:	e3 95       	inc	r30
    58ca:	0c 94 c3 2d 	jmp	0x5b86	; 0x5b86 <__fp_sinus>

000058ce <__divsf3>:
    58ce:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <__divsf3x>
    58d2:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__fp_round>
    58d6:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fp_pscB>
    58da:	58 f0       	brcs	.+22     	; 0x58f2 <__divsf3+0x24>
    58dc:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <__fp_pscA>
    58e0:	40 f0       	brcs	.+16     	; 0x58f2 <__divsf3+0x24>
    58e2:	29 f4       	brne	.+10     	; 0x58ee <__divsf3+0x20>
    58e4:	5f 3f       	cpi	r21, 0xFF	; 255
    58e6:	29 f0       	breq	.+10     	; 0x58f2 <__divsf3+0x24>
    58e8:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__fp_inf>
    58ec:	51 11       	cpse	r21, r1
    58ee:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    58f2:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_nan>

000058f6 <__divsf3x>:
    58f6:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__fp_split3>
    58fa:	68 f3       	brcs	.-38     	; 0x58d6 <__divsf3+0x8>

000058fc <__divsf3_pse>:
    58fc:	99 23       	and	r25, r25
    58fe:	b1 f3       	breq	.-20     	; 0x58ec <__divsf3+0x1e>
    5900:	55 23       	and	r21, r21
    5902:	91 f3       	breq	.-28     	; 0x58e8 <__divsf3+0x1a>
    5904:	95 1b       	sub	r25, r21
    5906:	55 0b       	sbc	r21, r21
    5908:	bb 27       	eor	r27, r27
    590a:	aa 27       	eor	r26, r26
    590c:	62 17       	cp	r22, r18
    590e:	73 07       	cpc	r23, r19
    5910:	84 07       	cpc	r24, r20
    5912:	38 f0       	brcs	.+14     	; 0x5922 <__divsf3_pse+0x26>
    5914:	9f 5f       	subi	r25, 0xFF	; 255
    5916:	5f 4f       	sbci	r21, 0xFF	; 255
    5918:	22 0f       	add	r18, r18
    591a:	33 1f       	adc	r19, r19
    591c:	44 1f       	adc	r20, r20
    591e:	aa 1f       	adc	r26, r26
    5920:	a9 f3       	breq	.-22     	; 0x590c <__divsf3_pse+0x10>
    5922:	35 d0       	rcall	.+106    	; 0x598e <__divsf3_pse+0x92>
    5924:	0e 2e       	mov	r0, r30
    5926:	3a f0       	brmi	.+14     	; 0x5936 <__divsf3_pse+0x3a>
    5928:	e0 e8       	ldi	r30, 0x80	; 128
    592a:	32 d0       	rcall	.+100    	; 0x5990 <__divsf3_pse+0x94>
    592c:	91 50       	subi	r25, 0x01	; 1
    592e:	50 40       	sbci	r21, 0x00	; 0
    5930:	e6 95       	lsr	r30
    5932:	00 1c       	adc	r0, r0
    5934:	ca f7       	brpl	.-14     	; 0x5928 <__divsf3_pse+0x2c>
    5936:	2b d0       	rcall	.+86     	; 0x598e <__divsf3_pse+0x92>
    5938:	fe 2f       	mov	r31, r30
    593a:	29 d0       	rcall	.+82     	; 0x598e <__divsf3_pse+0x92>
    593c:	66 0f       	add	r22, r22
    593e:	77 1f       	adc	r23, r23
    5940:	88 1f       	adc	r24, r24
    5942:	bb 1f       	adc	r27, r27
    5944:	26 17       	cp	r18, r22
    5946:	37 07       	cpc	r19, r23
    5948:	48 07       	cpc	r20, r24
    594a:	ab 07       	cpc	r26, r27
    594c:	b0 e8       	ldi	r27, 0x80	; 128
    594e:	09 f0       	breq	.+2      	; 0x5952 <__divsf3_pse+0x56>
    5950:	bb 0b       	sbc	r27, r27
    5952:	80 2d       	mov	r24, r0
    5954:	bf 01       	movw	r22, r30
    5956:	ff 27       	eor	r31, r31
    5958:	93 58       	subi	r25, 0x83	; 131
    595a:	5f 4f       	sbci	r21, 0xFF	; 255
    595c:	3a f0       	brmi	.+14     	; 0x596c <__divsf3_pse+0x70>
    595e:	9e 3f       	cpi	r25, 0xFE	; 254
    5960:	51 05       	cpc	r21, r1
    5962:	78 f0       	brcs	.+30     	; 0x5982 <__divsf3_pse+0x86>
    5964:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__fp_inf>
    5968:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    596c:	5f 3f       	cpi	r21, 0xFF	; 255
    596e:	e4 f3       	brlt	.-8      	; 0x5968 <__divsf3_pse+0x6c>
    5970:	98 3e       	cpi	r25, 0xE8	; 232
    5972:	d4 f3       	brlt	.-12     	; 0x5968 <__divsf3_pse+0x6c>
    5974:	86 95       	lsr	r24
    5976:	77 95       	ror	r23
    5978:	67 95       	ror	r22
    597a:	b7 95       	ror	r27
    597c:	f7 95       	ror	r31
    597e:	9f 5f       	subi	r25, 0xFF	; 255
    5980:	c9 f7       	brne	.-14     	; 0x5974 <__divsf3_pse+0x78>
    5982:	88 0f       	add	r24, r24
    5984:	91 1d       	adc	r25, r1
    5986:	96 95       	lsr	r25
    5988:	87 95       	ror	r24
    598a:	97 f9       	bld	r25, 7
    598c:	08 95       	ret
    598e:	e1 e0       	ldi	r30, 0x01	; 1
    5990:	66 0f       	add	r22, r22
    5992:	77 1f       	adc	r23, r23
    5994:	88 1f       	adc	r24, r24
    5996:	bb 1f       	adc	r27, r27
    5998:	62 17       	cp	r22, r18
    599a:	73 07       	cpc	r23, r19
    599c:	84 07       	cpc	r24, r20
    599e:	ba 07       	cpc	r27, r26
    59a0:	20 f0       	brcs	.+8      	; 0x59aa <__divsf3_pse+0xae>
    59a2:	62 1b       	sub	r22, r18
    59a4:	73 0b       	sbc	r23, r19
    59a6:	84 0b       	sbc	r24, r20
    59a8:	ba 0b       	sbc	r27, r26
    59aa:	ee 1f       	adc	r30, r30
    59ac:	88 f7       	brcc	.-30     	; 0x5990 <__divsf3_pse+0x94>
    59ae:	e0 95       	com	r30
    59b0:	08 95       	ret

000059b2 <__fixsfsi>:
    59b2:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__fixunssfsi>
    59b6:	68 94       	set
    59b8:	b1 11       	cpse	r27, r1
    59ba:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    59be:	08 95       	ret

000059c0 <__fixunssfsi>:
    59c0:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <__fp_splitA>
    59c4:	88 f0       	brcs	.+34     	; 0x59e8 <__fixunssfsi+0x28>
    59c6:	9f 57       	subi	r25, 0x7F	; 127
    59c8:	98 f0       	brcs	.+38     	; 0x59f0 <__fixunssfsi+0x30>
    59ca:	b9 2f       	mov	r27, r25
    59cc:	99 27       	eor	r25, r25
    59ce:	b7 51       	subi	r27, 0x17	; 23
    59d0:	b0 f0       	brcs	.+44     	; 0x59fe <__fixunssfsi+0x3e>
    59d2:	e1 f0       	breq	.+56     	; 0x5a0c <__fixunssfsi+0x4c>
    59d4:	66 0f       	add	r22, r22
    59d6:	77 1f       	adc	r23, r23
    59d8:	88 1f       	adc	r24, r24
    59da:	99 1f       	adc	r25, r25
    59dc:	1a f0       	brmi	.+6      	; 0x59e4 <__fixunssfsi+0x24>
    59de:	ba 95       	dec	r27
    59e0:	c9 f7       	brne	.-14     	; 0x59d4 <__fixunssfsi+0x14>
    59e2:	14 c0       	rjmp	.+40     	; 0x5a0c <__fixunssfsi+0x4c>
    59e4:	b1 30       	cpi	r27, 0x01	; 1
    59e6:	91 f0       	breq	.+36     	; 0x5a0c <__fixunssfsi+0x4c>
    59e8:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <__fp_zero>
    59ec:	b1 e0       	ldi	r27, 0x01	; 1
    59ee:	08 95       	ret
    59f0:	0c 94 f9 2d 	jmp	0x5bf2	; 0x5bf2 <__fp_zero>
    59f4:	67 2f       	mov	r22, r23
    59f6:	78 2f       	mov	r23, r24
    59f8:	88 27       	eor	r24, r24
    59fa:	b8 5f       	subi	r27, 0xF8	; 248
    59fc:	39 f0       	breq	.+14     	; 0x5a0c <__fixunssfsi+0x4c>
    59fe:	b9 3f       	cpi	r27, 0xF9	; 249
    5a00:	cc f3       	brlt	.-14     	; 0x59f4 <__fixunssfsi+0x34>
    5a02:	86 95       	lsr	r24
    5a04:	77 95       	ror	r23
    5a06:	67 95       	ror	r22
    5a08:	b3 95       	inc	r27
    5a0a:	d9 f7       	brne	.-10     	; 0x5a02 <__fixunssfsi+0x42>
    5a0c:	3e f4       	brtc	.+14     	; 0x5a1c <__fixunssfsi+0x5c>
    5a0e:	90 95       	com	r25
    5a10:	80 95       	com	r24
    5a12:	70 95       	com	r23
    5a14:	61 95       	neg	r22
    5a16:	7f 4f       	sbci	r23, 0xFF	; 255
    5a18:	8f 4f       	sbci	r24, 0xFF	; 255
    5a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1c:	08 95       	ret

00005a1e <__floatunsisf>:
    5a1e:	e8 94       	clt
    5a20:	09 c0       	rjmp	.+18     	; 0x5a34 <__floatsisf+0x12>

00005a22 <__floatsisf>:
    5a22:	97 fb       	bst	r25, 7
    5a24:	3e f4       	brtc	.+14     	; 0x5a34 <__floatsisf+0x12>
    5a26:	90 95       	com	r25
    5a28:	80 95       	com	r24
    5a2a:	70 95       	com	r23
    5a2c:	61 95       	neg	r22
    5a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a30:	8f 4f       	sbci	r24, 0xFF	; 255
    5a32:	9f 4f       	sbci	r25, 0xFF	; 255
    5a34:	99 23       	and	r25, r25
    5a36:	a9 f0       	breq	.+42     	; 0x5a62 <__floatsisf+0x40>
    5a38:	f9 2f       	mov	r31, r25
    5a3a:	96 e9       	ldi	r25, 0x96	; 150
    5a3c:	bb 27       	eor	r27, r27
    5a3e:	93 95       	inc	r25
    5a40:	f6 95       	lsr	r31
    5a42:	87 95       	ror	r24
    5a44:	77 95       	ror	r23
    5a46:	67 95       	ror	r22
    5a48:	b7 95       	ror	r27
    5a4a:	f1 11       	cpse	r31, r1
    5a4c:	f8 cf       	rjmp	.-16     	; 0x5a3e <__floatsisf+0x1c>
    5a4e:	fa f4       	brpl	.+62     	; 0x5a8e <__floatsisf+0x6c>
    5a50:	bb 0f       	add	r27, r27
    5a52:	11 f4       	brne	.+4      	; 0x5a58 <__floatsisf+0x36>
    5a54:	60 ff       	sbrs	r22, 0
    5a56:	1b c0       	rjmp	.+54     	; 0x5a8e <__floatsisf+0x6c>
    5a58:	6f 5f       	subi	r22, 0xFF	; 255
    5a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a60:	16 c0       	rjmp	.+44     	; 0x5a8e <__floatsisf+0x6c>
    5a62:	88 23       	and	r24, r24
    5a64:	11 f0       	breq	.+4      	; 0x5a6a <__floatsisf+0x48>
    5a66:	96 e9       	ldi	r25, 0x96	; 150
    5a68:	11 c0       	rjmp	.+34     	; 0x5a8c <__floatsisf+0x6a>
    5a6a:	77 23       	and	r23, r23
    5a6c:	21 f0       	breq	.+8      	; 0x5a76 <__floatsisf+0x54>
    5a6e:	9e e8       	ldi	r25, 0x8E	; 142
    5a70:	87 2f       	mov	r24, r23
    5a72:	76 2f       	mov	r23, r22
    5a74:	05 c0       	rjmp	.+10     	; 0x5a80 <__floatsisf+0x5e>
    5a76:	66 23       	and	r22, r22
    5a78:	71 f0       	breq	.+28     	; 0x5a96 <__floatsisf+0x74>
    5a7a:	96 e8       	ldi	r25, 0x86	; 134
    5a7c:	86 2f       	mov	r24, r22
    5a7e:	70 e0       	ldi	r23, 0x00	; 0
    5a80:	60 e0       	ldi	r22, 0x00	; 0
    5a82:	2a f0       	brmi	.+10     	; 0x5a8e <__floatsisf+0x6c>
    5a84:	9a 95       	dec	r25
    5a86:	66 0f       	add	r22, r22
    5a88:	77 1f       	adc	r23, r23
    5a8a:	88 1f       	adc	r24, r24
    5a8c:	da f7       	brpl	.-10     	; 0x5a84 <__floatsisf+0x62>
    5a8e:	88 0f       	add	r24, r24
    5a90:	96 95       	lsr	r25
    5a92:	87 95       	ror	r24
    5a94:	97 f9       	bld	r25, 7
    5a96:	08 95       	ret

00005a98 <__fp_cmp>:
    5a98:	99 0f       	add	r25, r25
    5a9a:	00 08       	sbc	r0, r0
    5a9c:	55 0f       	add	r21, r21
    5a9e:	aa 0b       	sbc	r26, r26
    5aa0:	e0 e8       	ldi	r30, 0x80	; 128
    5aa2:	fe ef       	ldi	r31, 0xFE	; 254
    5aa4:	16 16       	cp	r1, r22
    5aa6:	17 06       	cpc	r1, r23
    5aa8:	e8 07       	cpc	r30, r24
    5aaa:	f9 07       	cpc	r31, r25
    5aac:	c0 f0       	brcs	.+48     	; 0x5ade <__fp_cmp+0x46>
    5aae:	12 16       	cp	r1, r18
    5ab0:	13 06       	cpc	r1, r19
    5ab2:	e4 07       	cpc	r30, r20
    5ab4:	f5 07       	cpc	r31, r21
    5ab6:	98 f0       	brcs	.+38     	; 0x5ade <__fp_cmp+0x46>
    5ab8:	62 1b       	sub	r22, r18
    5aba:	73 0b       	sbc	r23, r19
    5abc:	84 0b       	sbc	r24, r20
    5abe:	95 0b       	sbc	r25, r21
    5ac0:	39 f4       	brne	.+14     	; 0x5ad0 <__fp_cmp+0x38>
    5ac2:	0a 26       	eor	r0, r26
    5ac4:	61 f0       	breq	.+24     	; 0x5ade <__fp_cmp+0x46>
    5ac6:	23 2b       	or	r18, r19
    5ac8:	24 2b       	or	r18, r20
    5aca:	25 2b       	or	r18, r21
    5acc:	21 f4       	brne	.+8      	; 0x5ad6 <__fp_cmp+0x3e>
    5ace:	08 95       	ret
    5ad0:	0a 26       	eor	r0, r26
    5ad2:	09 f4       	brne	.+2      	; 0x5ad6 <__fp_cmp+0x3e>
    5ad4:	a1 40       	sbci	r26, 0x01	; 1
    5ad6:	a6 95       	lsr	r26
    5ad8:	8f ef       	ldi	r24, 0xFF	; 255
    5ada:	81 1d       	adc	r24, r1
    5adc:	81 1d       	adc	r24, r1
    5ade:	08 95       	ret

00005ae0 <__fp_inf>:
    5ae0:	97 f9       	bld	r25, 7
    5ae2:	9f 67       	ori	r25, 0x7F	; 127
    5ae4:	80 e8       	ldi	r24, 0x80	; 128
    5ae6:	70 e0       	ldi	r23, 0x00	; 0
    5ae8:	60 e0       	ldi	r22, 0x00	; 0
    5aea:	08 95       	ret

00005aec <__fp_nan>:
    5aec:	9f ef       	ldi	r25, 0xFF	; 255
    5aee:	80 ec       	ldi	r24, 0xC0	; 192
    5af0:	08 95       	ret

00005af2 <__fp_pscA>:
    5af2:	00 24       	eor	r0, r0
    5af4:	0a 94       	dec	r0
    5af6:	16 16       	cp	r1, r22
    5af8:	17 06       	cpc	r1, r23
    5afa:	18 06       	cpc	r1, r24
    5afc:	09 06       	cpc	r0, r25
    5afe:	08 95       	ret

00005b00 <__fp_pscB>:
    5b00:	00 24       	eor	r0, r0
    5b02:	0a 94       	dec	r0
    5b04:	12 16       	cp	r1, r18
    5b06:	13 06       	cpc	r1, r19
    5b08:	14 06       	cpc	r1, r20
    5b0a:	05 06       	cpc	r0, r21
    5b0c:	08 95       	ret
    5b0e:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_nan>

00005b12 <__fp_rempio2>:
    5b12:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <__fp_splitA>
    5b16:	d8 f3       	brcs	.-10     	; 0x5b0e <__fp_pscB+0xe>
    5b18:	e8 94       	clt
    5b1a:	e0 e0       	ldi	r30, 0x00	; 0
    5b1c:	bb 27       	eor	r27, r27
    5b1e:	9f 57       	subi	r25, 0x7F	; 127
    5b20:	f0 f0       	brcs	.+60     	; 0x5b5e <__fp_rempio2+0x4c>
    5b22:	2a ed       	ldi	r18, 0xDA	; 218
    5b24:	3f e0       	ldi	r19, 0x0F	; 15
    5b26:	49 ec       	ldi	r20, 0xC9	; 201
    5b28:	06 c0       	rjmp	.+12     	; 0x5b36 <__fp_rempio2+0x24>
    5b2a:	ee 0f       	add	r30, r30
    5b2c:	bb 0f       	add	r27, r27
    5b2e:	66 1f       	adc	r22, r22
    5b30:	77 1f       	adc	r23, r23
    5b32:	88 1f       	adc	r24, r24
    5b34:	28 f0       	brcs	.+10     	; 0x5b40 <__fp_rempio2+0x2e>
    5b36:	b2 3a       	cpi	r27, 0xA2	; 162
    5b38:	62 07       	cpc	r22, r18
    5b3a:	73 07       	cpc	r23, r19
    5b3c:	84 07       	cpc	r24, r20
    5b3e:	28 f0       	brcs	.+10     	; 0x5b4a <__fp_rempio2+0x38>
    5b40:	b2 5a       	subi	r27, 0xA2	; 162
    5b42:	62 0b       	sbc	r22, r18
    5b44:	73 0b       	sbc	r23, r19
    5b46:	84 0b       	sbc	r24, r20
    5b48:	e3 95       	inc	r30
    5b4a:	9a 95       	dec	r25
    5b4c:	72 f7       	brpl	.-36     	; 0x5b2a <__fp_rempio2+0x18>
    5b4e:	80 38       	cpi	r24, 0x80	; 128
    5b50:	30 f4       	brcc	.+12     	; 0x5b5e <__fp_rempio2+0x4c>
    5b52:	9a 95       	dec	r25
    5b54:	bb 0f       	add	r27, r27
    5b56:	66 1f       	adc	r22, r22
    5b58:	77 1f       	adc	r23, r23
    5b5a:	88 1f       	adc	r24, r24
    5b5c:	d2 f7       	brpl	.-12     	; 0x5b52 <__fp_rempio2+0x40>
    5b5e:	90 48       	sbci	r25, 0x80	; 128
    5b60:	0c 94 b3 2e 	jmp	0x5d66	; 0x5d66 <__fp_mpack_finite>

00005b64 <__fp_round>:
    5b64:	09 2e       	mov	r0, r25
    5b66:	03 94       	inc	r0
    5b68:	00 0c       	add	r0, r0
    5b6a:	11 f4       	brne	.+4      	; 0x5b70 <__fp_round+0xc>
    5b6c:	88 23       	and	r24, r24
    5b6e:	52 f0       	brmi	.+20     	; 0x5b84 <__fp_round+0x20>
    5b70:	bb 0f       	add	r27, r27
    5b72:	40 f4       	brcc	.+16     	; 0x5b84 <__fp_round+0x20>
    5b74:	bf 2b       	or	r27, r31
    5b76:	11 f4       	brne	.+4      	; 0x5b7c <__fp_round+0x18>
    5b78:	60 ff       	sbrs	r22, 0
    5b7a:	04 c0       	rjmp	.+8      	; 0x5b84 <__fp_round+0x20>
    5b7c:	6f 5f       	subi	r22, 0xFF	; 255
    5b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b80:	8f 4f       	sbci	r24, 0xFF	; 255
    5b82:	9f 4f       	sbci	r25, 0xFF	; 255
    5b84:	08 95       	ret

00005b86 <__fp_sinus>:
    5b86:	ef 93       	push	r30
    5b88:	e0 ff       	sbrs	r30, 0
    5b8a:	07 c0       	rjmp	.+14     	; 0x5b9a <__fp_sinus+0x14>
    5b8c:	a2 ea       	ldi	r26, 0xA2	; 162
    5b8e:	2a ed       	ldi	r18, 0xDA	; 218
    5b90:	3f e0       	ldi	r19, 0x0F	; 15
    5b92:	49 ec       	ldi	r20, 0xC9	; 201
    5b94:	5f eb       	ldi	r21, 0xBF	; 191
    5b96:	0e 94 08 2c 	call	0x5810	; 0x5810 <__addsf3x>
    5b9a:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__fp_round>
    5b9e:	0f 90       	pop	r0
    5ba0:	03 94       	inc	r0
    5ba2:	01 fc       	sbrc	r0, 1
    5ba4:	90 58       	subi	r25, 0x80	; 128
    5ba6:	ee e0       	ldi	r30, 0x0E	; 14
    5ba8:	f2 e0       	ldi	r31, 0x02	; 2
    5baa:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__fp_powsodd>

00005bae <__fp_split3>:
    5bae:	57 fd       	sbrc	r21, 7
    5bb0:	90 58       	subi	r25, 0x80	; 128
    5bb2:	44 0f       	add	r20, r20
    5bb4:	55 1f       	adc	r21, r21
    5bb6:	59 f0       	breq	.+22     	; 0x5bce <__fp_splitA+0x10>
    5bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    5bba:	71 f0       	breq	.+28     	; 0x5bd8 <__fp_splitA+0x1a>
    5bbc:	47 95       	ror	r20

00005bbe <__fp_splitA>:
    5bbe:	88 0f       	add	r24, r24
    5bc0:	97 fb       	bst	r25, 7
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	61 f0       	breq	.+24     	; 0x5bde <__fp_splitA+0x20>
    5bc6:	9f 3f       	cpi	r25, 0xFF	; 255
    5bc8:	79 f0       	breq	.+30     	; 0x5be8 <__fp_splitA+0x2a>
    5bca:	87 95       	ror	r24
    5bcc:	08 95       	ret
    5bce:	12 16       	cp	r1, r18
    5bd0:	13 06       	cpc	r1, r19
    5bd2:	14 06       	cpc	r1, r20
    5bd4:	55 1f       	adc	r21, r21
    5bd6:	f2 cf       	rjmp	.-28     	; 0x5bbc <__fp_split3+0xe>
    5bd8:	46 95       	lsr	r20
    5bda:	f1 df       	rcall	.-30     	; 0x5bbe <__fp_splitA>
    5bdc:	08 c0       	rjmp	.+16     	; 0x5bee <__fp_splitA+0x30>
    5bde:	16 16       	cp	r1, r22
    5be0:	17 06       	cpc	r1, r23
    5be2:	18 06       	cpc	r1, r24
    5be4:	99 1f       	adc	r25, r25
    5be6:	f1 cf       	rjmp	.-30     	; 0x5bca <__fp_splitA+0xc>
    5be8:	86 95       	lsr	r24
    5bea:	71 05       	cpc	r23, r1
    5bec:	61 05       	cpc	r22, r1
    5bee:	08 94       	sec
    5bf0:	08 95       	ret

00005bf2 <__fp_zero>:
    5bf2:	e8 94       	clt

00005bf4 <__fp_szero>:
    5bf4:	bb 27       	eor	r27, r27
    5bf6:	66 27       	eor	r22, r22
    5bf8:	77 27       	eor	r23, r23
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	97 f9       	bld	r25, 7
    5bfe:	08 95       	ret

00005c00 <__gesf2>:
    5c00:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fp_cmp>
    5c04:	08 f4       	brcc	.+2      	; 0x5c08 <__gesf2+0x8>
    5c06:	8f ef       	ldi	r24, 0xFF	; 255
    5c08:	08 95       	ret

00005c0a <__mulsf3>:
    5c0a:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__mulsf3x>
    5c0e:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__fp_round>
    5c12:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <__fp_pscA>
    5c16:	38 f0       	brcs	.+14     	; 0x5c26 <__mulsf3+0x1c>
    5c18:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fp_pscB>
    5c1c:	20 f0       	brcs	.+8      	; 0x5c26 <__mulsf3+0x1c>
    5c1e:	95 23       	and	r25, r21
    5c20:	11 f0       	breq	.+4      	; 0x5c26 <__mulsf3+0x1c>
    5c22:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__fp_inf>
    5c26:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_nan>
    5c2a:	11 24       	eor	r1, r1
    5c2c:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>

00005c30 <__mulsf3x>:
    5c30:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__fp_split3>
    5c34:	70 f3       	brcs	.-36     	; 0x5c12 <__mulsf3+0x8>

00005c36 <__mulsf3_pse>:
    5c36:	95 9f       	mul	r25, r21
    5c38:	c1 f3       	breq	.-16     	; 0x5c2a <__mulsf3+0x20>
    5c3a:	95 0f       	add	r25, r21
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	55 1f       	adc	r21, r21
    5c40:	62 9f       	mul	r22, r18
    5c42:	f0 01       	movw	r30, r0
    5c44:	72 9f       	mul	r23, r18
    5c46:	bb 27       	eor	r27, r27
    5c48:	f0 0d       	add	r31, r0
    5c4a:	b1 1d       	adc	r27, r1
    5c4c:	63 9f       	mul	r22, r19
    5c4e:	aa 27       	eor	r26, r26
    5c50:	f0 0d       	add	r31, r0
    5c52:	b1 1d       	adc	r27, r1
    5c54:	aa 1f       	adc	r26, r26
    5c56:	64 9f       	mul	r22, r20
    5c58:	66 27       	eor	r22, r22
    5c5a:	b0 0d       	add	r27, r0
    5c5c:	a1 1d       	adc	r26, r1
    5c5e:	66 1f       	adc	r22, r22
    5c60:	82 9f       	mul	r24, r18
    5c62:	22 27       	eor	r18, r18
    5c64:	b0 0d       	add	r27, r0
    5c66:	a1 1d       	adc	r26, r1
    5c68:	62 1f       	adc	r22, r18
    5c6a:	73 9f       	mul	r23, r19
    5c6c:	b0 0d       	add	r27, r0
    5c6e:	a1 1d       	adc	r26, r1
    5c70:	62 1f       	adc	r22, r18
    5c72:	83 9f       	mul	r24, r19
    5c74:	a0 0d       	add	r26, r0
    5c76:	61 1d       	adc	r22, r1
    5c78:	22 1f       	adc	r18, r18
    5c7a:	74 9f       	mul	r23, r20
    5c7c:	33 27       	eor	r19, r19
    5c7e:	a0 0d       	add	r26, r0
    5c80:	61 1d       	adc	r22, r1
    5c82:	23 1f       	adc	r18, r19
    5c84:	84 9f       	mul	r24, r20
    5c86:	60 0d       	add	r22, r0
    5c88:	21 1d       	adc	r18, r1
    5c8a:	82 2f       	mov	r24, r18
    5c8c:	76 2f       	mov	r23, r22
    5c8e:	6a 2f       	mov	r22, r26
    5c90:	11 24       	eor	r1, r1
    5c92:	9f 57       	subi	r25, 0x7F	; 127
    5c94:	50 40       	sbci	r21, 0x00	; 0
    5c96:	9a f0       	brmi	.+38     	; 0x5cbe <__mulsf3_pse+0x88>
    5c98:	f1 f0       	breq	.+60     	; 0x5cd6 <__mulsf3_pse+0xa0>
    5c9a:	88 23       	and	r24, r24
    5c9c:	4a f0       	brmi	.+18     	; 0x5cb0 <__mulsf3_pse+0x7a>
    5c9e:	ee 0f       	add	r30, r30
    5ca0:	ff 1f       	adc	r31, r31
    5ca2:	bb 1f       	adc	r27, r27
    5ca4:	66 1f       	adc	r22, r22
    5ca6:	77 1f       	adc	r23, r23
    5ca8:	88 1f       	adc	r24, r24
    5caa:	91 50       	subi	r25, 0x01	; 1
    5cac:	50 40       	sbci	r21, 0x00	; 0
    5cae:	a9 f7       	brne	.-22     	; 0x5c9a <__mulsf3_pse+0x64>
    5cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    5cb2:	51 05       	cpc	r21, r1
    5cb4:	80 f0       	brcs	.+32     	; 0x5cd6 <__mulsf3_pse+0xa0>
    5cb6:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__fp_inf>
    5cba:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    5cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc0:	e4 f3       	brlt	.-8      	; 0x5cba <__mulsf3_pse+0x84>
    5cc2:	98 3e       	cpi	r25, 0xE8	; 232
    5cc4:	d4 f3       	brlt	.-12     	; 0x5cba <__mulsf3_pse+0x84>
    5cc6:	86 95       	lsr	r24
    5cc8:	77 95       	ror	r23
    5cca:	67 95       	ror	r22
    5ccc:	b7 95       	ror	r27
    5cce:	f7 95       	ror	r31
    5cd0:	e7 95       	ror	r30
    5cd2:	9f 5f       	subi	r25, 0xFF	; 255
    5cd4:	c1 f7       	brne	.-16     	; 0x5cc6 <__mulsf3_pse+0x90>
    5cd6:	fe 2b       	or	r31, r30
    5cd8:	88 0f       	add	r24, r24
    5cda:	91 1d       	adc	r25, r1
    5cdc:	96 95       	lsr	r25
    5cde:	87 95       	ror	r24
    5ce0:	97 f9       	bld	r25, 7
    5ce2:	08 95       	ret

00005ce4 <round>:
    5ce4:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <__fp_splitA>
    5ce8:	e8 f0       	brcs	.+58     	; 0x5d24 <round+0x40>
    5cea:	9e 37       	cpi	r25, 0x7E	; 126
    5cec:	e8 f0       	brcs	.+58     	; 0x5d28 <round+0x44>
    5cee:	96 39       	cpi	r25, 0x96	; 150
    5cf0:	b8 f4       	brcc	.+46     	; 0x5d20 <round+0x3c>
    5cf2:	9e 38       	cpi	r25, 0x8E	; 142
    5cf4:	48 f4       	brcc	.+18     	; 0x5d08 <round+0x24>
    5cf6:	67 2f       	mov	r22, r23
    5cf8:	78 2f       	mov	r23, r24
    5cfa:	88 27       	eor	r24, r24
    5cfc:	98 5f       	subi	r25, 0xF8	; 248
    5cfe:	f9 cf       	rjmp	.-14     	; 0x5cf2 <round+0xe>
    5d00:	86 95       	lsr	r24
    5d02:	77 95       	ror	r23
    5d04:	67 95       	ror	r22
    5d06:	93 95       	inc	r25
    5d08:	95 39       	cpi	r25, 0x95	; 149
    5d0a:	d0 f3       	brcs	.-12     	; 0x5d00 <round+0x1c>
    5d0c:	b6 2f       	mov	r27, r22
    5d0e:	b1 70       	andi	r27, 0x01	; 1
    5d10:	6b 0f       	add	r22, r27
    5d12:	71 1d       	adc	r23, r1
    5d14:	81 1d       	adc	r24, r1
    5d16:	20 f4       	brcc	.+8      	; 0x5d20 <round+0x3c>
    5d18:	87 95       	ror	r24
    5d1a:	77 95       	ror	r23
    5d1c:	67 95       	ror	r22
    5d1e:	93 95       	inc	r25
    5d20:	0c 94 96 2e 	jmp	0x5d2c	; 0x5d2c <__fp_mintl>
    5d24:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__fp_mpack>
    5d28:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>

00005d2c <__fp_mintl>:
    5d2c:	88 23       	and	r24, r24
    5d2e:	71 f4       	brne	.+28     	; 0x5d4c <__fp_mintl+0x20>
    5d30:	77 23       	and	r23, r23
    5d32:	21 f0       	breq	.+8      	; 0x5d3c <__fp_mintl+0x10>
    5d34:	98 50       	subi	r25, 0x08	; 8
    5d36:	87 2b       	or	r24, r23
    5d38:	76 2f       	mov	r23, r22
    5d3a:	07 c0       	rjmp	.+14     	; 0x5d4a <__fp_mintl+0x1e>
    5d3c:	66 23       	and	r22, r22
    5d3e:	11 f4       	brne	.+4      	; 0x5d44 <__fp_mintl+0x18>
    5d40:	99 27       	eor	r25, r25
    5d42:	0d c0       	rjmp	.+26     	; 0x5d5e <__fp_mintl+0x32>
    5d44:	90 51       	subi	r25, 0x10	; 16
    5d46:	86 2b       	or	r24, r22
    5d48:	70 e0       	ldi	r23, 0x00	; 0
    5d4a:	60 e0       	ldi	r22, 0x00	; 0
    5d4c:	2a f0       	brmi	.+10     	; 0x5d58 <__fp_mintl+0x2c>
    5d4e:	9a 95       	dec	r25
    5d50:	66 0f       	add	r22, r22
    5d52:	77 1f       	adc	r23, r23
    5d54:	88 1f       	adc	r24, r24
    5d56:	da f7       	brpl	.-10     	; 0x5d4e <__fp_mintl+0x22>
    5d58:	88 0f       	add	r24, r24
    5d5a:	96 95       	lsr	r25
    5d5c:	87 95       	ror	r24
    5d5e:	97 f9       	bld	r25, 7
    5d60:	08 95       	ret

00005d62 <__fp_mpack>:
    5d62:	9f 3f       	cpi	r25, 0xFF	; 255
    5d64:	31 f0       	breq	.+12     	; 0x5d72 <__fp_mpack_finite+0xc>

00005d66 <__fp_mpack_finite>:
    5d66:	91 50       	subi	r25, 0x01	; 1
    5d68:	20 f4       	brcc	.+8      	; 0x5d72 <__fp_mpack_finite+0xc>
    5d6a:	87 95       	ror	r24
    5d6c:	77 95       	ror	r23
    5d6e:	67 95       	ror	r22
    5d70:	b7 95       	ror	r27
    5d72:	88 0f       	add	r24, r24
    5d74:	91 1d       	adc	r25, r1
    5d76:	96 95       	lsr	r25
    5d78:	87 95       	ror	r24
    5d7a:	97 f9       	bld	r25, 7
    5d7c:	08 95       	ret

00005d7e <__fp_powsodd>:
    5d7e:	9f 93       	push	r25
    5d80:	8f 93       	push	r24
    5d82:	7f 93       	push	r23
    5d84:	6f 93       	push	r22
    5d86:	ff 93       	push	r31
    5d88:	ef 93       	push	r30
    5d8a:	9b 01       	movw	r18, r22
    5d8c:	ac 01       	movw	r20, r24
    5d8e:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsf3>
    5d92:	ef 91       	pop	r30
    5d94:	ff 91       	pop	r31
    5d96:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__fp_powser>
    5d9a:	2f 91       	pop	r18
    5d9c:	3f 91       	pop	r19
    5d9e:	4f 91       	pop	r20
    5da0:	5f 91       	pop	r21
    5da2:	0c 94 05 2e 	jmp	0x5c0a	; 0x5c0a <__mulsf3>

00005da6 <__fp_powser>:
    5da6:	df 93       	push	r29
    5da8:	cf 93       	push	r28
    5daa:	1f 93       	push	r17
    5dac:	0f 93       	push	r16
    5dae:	ff 92       	push	r15
    5db0:	ef 92       	push	r14
    5db2:	df 92       	push	r13
    5db4:	7b 01       	movw	r14, r22
    5db6:	8c 01       	movw	r16, r24
    5db8:	68 94       	set
    5dba:	06 c0       	rjmp	.+12     	; 0x5dc8 <__fp_powser+0x22>
    5dbc:	da 2e       	mov	r13, r26
    5dbe:	ef 01       	movw	r28, r30
    5dc0:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__mulsf3x>
    5dc4:	fe 01       	movw	r30, r28
    5dc6:	e8 94       	clt
    5dc8:	a5 91       	lpm	r26, Z+
    5dca:	25 91       	lpm	r18, Z+
    5dcc:	35 91       	lpm	r19, Z+
    5dce:	45 91       	lpm	r20, Z+
    5dd0:	55 91       	lpm	r21, Z+
    5dd2:	a6 f3       	brts	.-24     	; 0x5dbc <__fp_powser+0x16>
    5dd4:	ef 01       	movw	r28, r30
    5dd6:	0e 94 08 2c 	call	0x5810	; 0x5810 <__addsf3x>
    5dda:	fe 01       	movw	r30, r28
    5ddc:	97 01       	movw	r18, r14
    5dde:	a8 01       	movw	r20, r16
    5de0:	da 94       	dec	r13
    5de2:	69 f7       	brne	.-38     	; 0x5dbe <__fp_powser+0x18>
    5de4:	df 90       	pop	r13
    5de6:	ef 90       	pop	r14
    5de8:	ff 90       	pop	r15
    5dea:	0f 91       	pop	r16
    5dec:	1f 91       	pop	r17
    5dee:	cf 91       	pop	r28
    5df0:	df 91       	pop	r29
    5df2:	08 95       	ret

00005df4 <__mulsi3>:
    5df4:	db 01       	movw	r26, r22
    5df6:	8f 93       	push	r24
    5df8:	9f 93       	push	r25
    5dfa:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <__muluhisi3>
    5dfe:	bf 91       	pop	r27
    5e00:	af 91       	pop	r26
    5e02:	a2 9f       	mul	r26, r18
    5e04:	80 0d       	add	r24, r0
    5e06:	91 1d       	adc	r25, r1
    5e08:	a3 9f       	mul	r26, r19
    5e0a:	90 0d       	add	r25, r0
    5e0c:	b2 9f       	mul	r27, r18
    5e0e:	90 0d       	add	r25, r0
    5e10:	11 24       	eor	r1, r1
    5e12:	08 95       	ret

00005e14 <__udivmodhi4>:
    5e14:	aa 1b       	sub	r26, r26
    5e16:	bb 1b       	sub	r27, r27
    5e18:	51 e1       	ldi	r21, 0x11	; 17
    5e1a:	07 c0       	rjmp	.+14     	; 0x5e2a <__udivmodhi4_ep>

00005e1c <__udivmodhi4_loop>:
    5e1c:	aa 1f       	adc	r26, r26
    5e1e:	bb 1f       	adc	r27, r27
    5e20:	a6 17       	cp	r26, r22
    5e22:	b7 07       	cpc	r27, r23
    5e24:	10 f0       	brcs	.+4      	; 0x5e2a <__udivmodhi4_ep>
    5e26:	a6 1b       	sub	r26, r22
    5e28:	b7 0b       	sbc	r27, r23

00005e2a <__udivmodhi4_ep>:
    5e2a:	88 1f       	adc	r24, r24
    5e2c:	99 1f       	adc	r25, r25
    5e2e:	5a 95       	dec	r21
    5e30:	a9 f7       	brne	.-22     	; 0x5e1c <__udivmodhi4_loop>
    5e32:	80 95       	com	r24
    5e34:	90 95       	com	r25
    5e36:	bc 01       	movw	r22, r24
    5e38:	cd 01       	movw	r24, r26
    5e3a:	08 95       	ret

00005e3c <__divmodhi4>:
    5e3c:	97 fb       	bst	r25, 7
    5e3e:	07 2e       	mov	r0, r23
    5e40:	16 f4       	brtc	.+4      	; 0x5e46 <__divmodhi4+0xa>
    5e42:	00 94       	com	r0
    5e44:	07 d0       	rcall	.+14     	; 0x5e54 <__divmodhi4_neg1>
    5e46:	77 fd       	sbrc	r23, 7
    5e48:	09 d0       	rcall	.+18     	; 0x5e5c <__divmodhi4_neg2>
    5e4a:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <__udivmodhi4>
    5e4e:	07 fc       	sbrc	r0, 7
    5e50:	05 d0       	rcall	.+10     	; 0x5e5c <__divmodhi4_neg2>
    5e52:	3e f4       	brtc	.+14     	; 0x5e62 <__divmodhi4_exit>

00005e54 <__divmodhi4_neg1>:
    5e54:	90 95       	com	r25
    5e56:	81 95       	neg	r24
    5e58:	9f 4f       	sbci	r25, 0xFF	; 255
    5e5a:	08 95       	ret

00005e5c <__divmodhi4_neg2>:
    5e5c:	70 95       	com	r23
    5e5e:	61 95       	neg	r22
    5e60:	7f 4f       	sbci	r23, 0xFF	; 255

00005e62 <__divmodhi4_exit>:
    5e62:	08 95       	ret

00005e64 <__udivmodsi4>:
    5e64:	a1 e2       	ldi	r26, 0x21	; 33
    5e66:	1a 2e       	mov	r1, r26
    5e68:	aa 1b       	sub	r26, r26
    5e6a:	bb 1b       	sub	r27, r27
    5e6c:	fd 01       	movw	r30, r26
    5e6e:	0d c0       	rjmp	.+26     	; 0x5e8a <__udivmodsi4_ep>

00005e70 <__udivmodsi4_loop>:
    5e70:	aa 1f       	adc	r26, r26
    5e72:	bb 1f       	adc	r27, r27
    5e74:	ee 1f       	adc	r30, r30
    5e76:	ff 1f       	adc	r31, r31
    5e78:	a2 17       	cp	r26, r18
    5e7a:	b3 07       	cpc	r27, r19
    5e7c:	e4 07       	cpc	r30, r20
    5e7e:	f5 07       	cpc	r31, r21
    5e80:	20 f0       	brcs	.+8      	; 0x5e8a <__udivmodsi4_ep>
    5e82:	a2 1b       	sub	r26, r18
    5e84:	b3 0b       	sbc	r27, r19
    5e86:	e4 0b       	sbc	r30, r20
    5e88:	f5 0b       	sbc	r31, r21

00005e8a <__udivmodsi4_ep>:
    5e8a:	66 1f       	adc	r22, r22
    5e8c:	77 1f       	adc	r23, r23
    5e8e:	88 1f       	adc	r24, r24
    5e90:	99 1f       	adc	r25, r25
    5e92:	1a 94       	dec	r1
    5e94:	69 f7       	brne	.-38     	; 0x5e70 <__udivmodsi4_loop>
    5e96:	60 95       	com	r22
    5e98:	70 95       	com	r23
    5e9a:	80 95       	com	r24
    5e9c:	90 95       	com	r25
    5e9e:	9b 01       	movw	r18, r22
    5ea0:	ac 01       	movw	r20, r24
    5ea2:	bd 01       	movw	r22, r26
    5ea4:	cf 01       	movw	r24, r30
    5ea6:	08 95       	ret

00005ea8 <__divmodsi4>:
    5ea8:	05 2e       	mov	r0, r21
    5eaa:	97 fb       	bst	r25, 7
    5eac:	1e f4       	brtc	.+6      	; 0x5eb4 <__divmodsi4+0xc>
    5eae:	00 94       	com	r0
    5eb0:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__negsi2>
    5eb4:	57 fd       	sbrc	r21, 7
    5eb6:	07 d0       	rcall	.+14     	; 0x5ec6 <__divmodsi4_neg2>
    5eb8:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__udivmodsi4>
    5ebc:	07 fc       	sbrc	r0, 7
    5ebe:	03 d0       	rcall	.+6      	; 0x5ec6 <__divmodsi4_neg2>
    5ec0:	4e f4       	brtc	.+18     	; 0x5ed4 <__divmodsi4_exit>
    5ec2:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__negsi2>

00005ec6 <__divmodsi4_neg2>:
    5ec6:	50 95       	com	r21
    5ec8:	40 95       	com	r20
    5eca:	30 95       	com	r19
    5ecc:	21 95       	neg	r18
    5ece:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed0:	4f 4f       	sbci	r20, 0xFF	; 255
    5ed2:	5f 4f       	sbci	r21, 0xFF	; 255

00005ed4 <__divmodsi4_exit>:
    5ed4:	08 95       	ret

00005ed6 <__negsi2>:
    5ed6:	90 95       	com	r25
    5ed8:	80 95       	com	r24
    5eda:	70 95       	com	r23
    5edc:	61 95       	neg	r22
    5ede:	7f 4f       	sbci	r23, 0xFF	; 255
    5ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee4:	08 95       	ret

00005ee6 <__tablejump2__>:
    5ee6:	ee 0f       	add	r30, r30
    5ee8:	ff 1f       	adc	r31, r31
    5eea:	05 90       	lpm	r0, Z+
    5eec:	f4 91       	lpm	r31, Z
    5eee:	e0 2d       	mov	r30, r0
    5ef0:	09 94       	ijmp

00005ef2 <__umulhisi3>:
    5ef2:	a2 9f       	mul	r26, r18
    5ef4:	b0 01       	movw	r22, r0
    5ef6:	b3 9f       	mul	r27, r19
    5ef8:	c0 01       	movw	r24, r0
    5efa:	a3 9f       	mul	r26, r19
    5efc:	70 0d       	add	r23, r0
    5efe:	81 1d       	adc	r24, r1
    5f00:	11 24       	eor	r1, r1
    5f02:	91 1d       	adc	r25, r1
    5f04:	b2 9f       	mul	r27, r18
    5f06:	70 0d       	add	r23, r0
    5f08:	81 1d       	adc	r24, r1
    5f0a:	11 24       	eor	r1, r1
    5f0c:	91 1d       	adc	r25, r1
    5f0e:	08 95       	ret

00005f10 <__usmulhisi3>:
    5f10:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>

00005f14 <__usmulhisi3_tail>:
    5f14:	b7 ff       	sbrs	r27, 7
    5f16:	08 95       	ret
    5f18:	82 1b       	sub	r24, r18
    5f1a:	93 0b       	sbc	r25, r19
    5f1c:	08 95       	ret

00005f1e <__muluhisi3>:
    5f1e:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__umulhisi3>
    5f22:	a5 9f       	mul	r26, r21
    5f24:	90 0d       	add	r25, r0
    5f26:	b4 9f       	mul	r27, r20
    5f28:	90 0d       	add	r25, r0
    5f2a:	a4 9f       	mul	r26, r20
    5f2c:	80 0d       	add	r24, r0
    5f2e:	91 1d       	adc	r25, r1
    5f30:	11 24       	eor	r1, r1
    5f32:	08 95       	ret

00005f34 <__mulshisi3>:
    5f34:	b7 ff       	sbrs	r27, 7
    5f36:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <__muluhisi3>

00005f3a <__mulohisi3>:
    5f3a:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <__muluhisi3>
    5f3e:	82 1b       	sub	r24, r18
    5f40:	93 0b       	sbc	r25, r19
    5f42:	08 95       	ret

00005f44 <malloc>:
    5f44:	0f 93       	push	r16
    5f46:	1f 93       	push	r17
    5f48:	cf 93       	push	r28
    5f4a:	df 93       	push	r29
    5f4c:	82 30       	cpi	r24, 0x02	; 2
    5f4e:	91 05       	cpc	r25, r1
    5f50:	10 f4       	brcc	.+4      	; 0x5f56 <malloc+0x12>
    5f52:	82 e0       	ldi	r24, 0x02	; 2
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <__flp>
    5f5a:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <__flp+0x1>
    5f5e:	20 e0       	ldi	r18, 0x00	; 0
    5f60:	30 e0       	ldi	r19, 0x00	; 0
    5f62:	a0 e0       	ldi	r26, 0x00	; 0
    5f64:	b0 e0       	ldi	r27, 0x00	; 0
    5f66:	30 97       	sbiw	r30, 0x00	; 0
    5f68:	19 f1       	breq	.+70     	; 0x5fb0 <malloc+0x6c>
    5f6a:	40 81       	ld	r20, Z
    5f6c:	51 81       	ldd	r21, Z+1	; 0x01
    5f6e:	02 81       	ldd	r16, Z+2	; 0x02
    5f70:	13 81       	ldd	r17, Z+3	; 0x03
    5f72:	48 17       	cp	r20, r24
    5f74:	59 07       	cpc	r21, r25
    5f76:	c8 f0       	brcs	.+50     	; 0x5faa <malloc+0x66>
    5f78:	84 17       	cp	r24, r20
    5f7a:	95 07       	cpc	r25, r21
    5f7c:	69 f4       	brne	.+26     	; 0x5f98 <malloc+0x54>
    5f7e:	10 97       	sbiw	r26, 0x00	; 0
    5f80:	31 f0       	breq	.+12     	; 0x5f8e <malloc+0x4a>
    5f82:	12 96       	adiw	r26, 0x02	; 2
    5f84:	0c 93       	st	X, r16
    5f86:	12 97       	sbiw	r26, 0x02	; 2
    5f88:	13 96       	adiw	r26, 0x03	; 3
    5f8a:	1c 93       	st	X, r17
    5f8c:	27 c0       	rjmp	.+78     	; 0x5fdc <malloc+0x98>
    5f8e:	00 93 ac 05 	sts	0x05AC, r16	; 0x8005ac <__flp>
    5f92:	10 93 ad 05 	sts	0x05AD, r17	; 0x8005ad <__flp+0x1>
    5f96:	22 c0       	rjmp	.+68     	; 0x5fdc <malloc+0x98>
    5f98:	21 15       	cp	r18, r1
    5f9a:	31 05       	cpc	r19, r1
    5f9c:	19 f0       	breq	.+6      	; 0x5fa4 <malloc+0x60>
    5f9e:	42 17       	cp	r20, r18
    5fa0:	53 07       	cpc	r21, r19
    5fa2:	18 f4       	brcc	.+6      	; 0x5faa <malloc+0x66>
    5fa4:	9a 01       	movw	r18, r20
    5fa6:	bd 01       	movw	r22, r26
    5fa8:	ef 01       	movw	r28, r30
    5faa:	df 01       	movw	r26, r30
    5fac:	f8 01       	movw	r30, r16
    5fae:	db cf       	rjmp	.-74     	; 0x5f66 <malloc+0x22>
    5fb0:	21 15       	cp	r18, r1
    5fb2:	31 05       	cpc	r19, r1
    5fb4:	f9 f0       	breq	.+62     	; 0x5ff4 <malloc+0xb0>
    5fb6:	28 1b       	sub	r18, r24
    5fb8:	39 0b       	sbc	r19, r25
    5fba:	24 30       	cpi	r18, 0x04	; 4
    5fbc:	31 05       	cpc	r19, r1
    5fbe:	80 f4       	brcc	.+32     	; 0x5fe0 <malloc+0x9c>
    5fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    5fc4:	61 15       	cp	r22, r1
    5fc6:	71 05       	cpc	r23, r1
    5fc8:	21 f0       	breq	.+8      	; 0x5fd2 <malloc+0x8e>
    5fca:	fb 01       	movw	r30, r22
    5fcc:	93 83       	std	Z+3, r25	; 0x03
    5fce:	82 83       	std	Z+2, r24	; 0x02
    5fd0:	04 c0       	rjmp	.+8      	; 0x5fda <malloc+0x96>
    5fd2:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <__flp+0x1>
    5fd6:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <__flp>
    5fda:	fe 01       	movw	r30, r28
    5fdc:	32 96       	adiw	r30, 0x02	; 2
    5fde:	44 c0       	rjmp	.+136    	; 0x6068 <malloc+0x124>
    5fe0:	fe 01       	movw	r30, r28
    5fe2:	e2 0f       	add	r30, r18
    5fe4:	f3 1f       	adc	r31, r19
    5fe6:	81 93       	st	Z+, r24
    5fe8:	91 93       	st	Z+, r25
    5fea:	22 50       	subi	r18, 0x02	; 2
    5fec:	31 09       	sbc	r19, r1
    5fee:	39 83       	std	Y+1, r19	; 0x01
    5ff0:	28 83       	st	Y, r18
    5ff2:	3a c0       	rjmp	.+116    	; 0x6068 <malloc+0x124>
    5ff4:	20 91 aa 05 	lds	r18, 0x05AA	; 0x8005aa <__brkval>
    5ff8:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <__brkval+0x1>
    5ffc:	23 2b       	or	r18, r19
    5ffe:	41 f4       	brne	.+16     	; 0x6010 <malloc+0xcc>
    6000:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6004:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6008:	30 93 ab 05 	sts	0x05AB, r19	; 0x8005ab <__brkval+0x1>
    600c:	20 93 aa 05 	sts	0x05AA, r18	; 0x8005aa <__brkval>
    6010:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6014:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6018:	21 15       	cp	r18, r1
    601a:	31 05       	cpc	r19, r1
    601c:	41 f4       	brne	.+16     	; 0x602e <malloc+0xea>
    601e:	2d b7       	in	r18, 0x3d	; 61
    6020:	3e b7       	in	r19, 0x3e	; 62
    6022:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6026:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    602a:	24 1b       	sub	r18, r20
    602c:	35 0b       	sbc	r19, r21
    602e:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <__brkval>
    6032:	f0 91 ab 05 	lds	r31, 0x05AB	; 0x8005ab <__brkval+0x1>
    6036:	e2 17       	cp	r30, r18
    6038:	f3 07       	cpc	r31, r19
    603a:	a0 f4       	brcc	.+40     	; 0x6064 <malloc+0x120>
    603c:	2e 1b       	sub	r18, r30
    603e:	3f 0b       	sbc	r19, r31
    6040:	28 17       	cp	r18, r24
    6042:	39 07       	cpc	r19, r25
    6044:	78 f0       	brcs	.+30     	; 0x6064 <malloc+0x120>
    6046:	ac 01       	movw	r20, r24
    6048:	4e 5f       	subi	r20, 0xFE	; 254
    604a:	5f 4f       	sbci	r21, 0xFF	; 255
    604c:	24 17       	cp	r18, r20
    604e:	35 07       	cpc	r19, r21
    6050:	48 f0       	brcs	.+18     	; 0x6064 <malloc+0x120>
    6052:	4e 0f       	add	r20, r30
    6054:	5f 1f       	adc	r21, r31
    6056:	50 93 ab 05 	sts	0x05AB, r21	; 0x8005ab <__brkval+0x1>
    605a:	40 93 aa 05 	sts	0x05AA, r20	; 0x8005aa <__brkval>
    605e:	81 93       	st	Z+, r24
    6060:	91 93       	st	Z+, r25
    6062:	02 c0       	rjmp	.+4      	; 0x6068 <malloc+0x124>
    6064:	e0 e0       	ldi	r30, 0x00	; 0
    6066:	f0 e0       	ldi	r31, 0x00	; 0
    6068:	cf 01       	movw	r24, r30
    606a:	df 91       	pop	r29
    606c:	cf 91       	pop	r28
    606e:	1f 91       	pop	r17
    6070:	0f 91       	pop	r16
    6072:	08 95       	ret

00006074 <free>:
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	09 f4       	brne	.+2      	; 0x607e <free+0xa>
    607c:	81 c0       	rjmp	.+258    	; 0x6180 <free+0x10c>
    607e:	fc 01       	movw	r30, r24
    6080:	32 97       	sbiw	r30, 0x02	; 2
    6082:	13 82       	std	Z+3, r1	; 0x03
    6084:	12 82       	std	Z+2, r1	; 0x02
    6086:	a0 91 ac 05 	lds	r26, 0x05AC	; 0x8005ac <__flp>
    608a:	b0 91 ad 05 	lds	r27, 0x05AD	; 0x8005ad <__flp+0x1>
    608e:	10 97       	sbiw	r26, 0x00	; 0
    6090:	81 f4       	brne	.+32     	; 0x60b2 <free+0x3e>
    6092:	20 81       	ld	r18, Z
    6094:	31 81       	ldd	r19, Z+1	; 0x01
    6096:	82 0f       	add	r24, r18
    6098:	93 1f       	adc	r25, r19
    609a:	20 91 aa 05 	lds	r18, 0x05AA	; 0x8005aa <__brkval>
    609e:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <__brkval+0x1>
    60a2:	28 17       	cp	r18, r24
    60a4:	39 07       	cpc	r19, r25
    60a6:	51 f5       	brne	.+84     	; 0x60fc <free+0x88>
    60a8:	f0 93 ab 05 	sts	0x05AB, r31	; 0x8005ab <__brkval+0x1>
    60ac:	e0 93 aa 05 	sts	0x05AA, r30	; 0x8005aa <__brkval>
    60b0:	67 c0       	rjmp	.+206    	; 0x6180 <free+0x10c>
    60b2:	ed 01       	movw	r28, r26
    60b4:	20 e0       	ldi	r18, 0x00	; 0
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	ce 17       	cp	r28, r30
    60ba:	df 07       	cpc	r29, r31
    60bc:	40 f4       	brcc	.+16     	; 0x60ce <free+0x5a>
    60be:	4a 81       	ldd	r20, Y+2	; 0x02
    60c0:	5b 81       	ldd	r21, Y+3	; 0x03
    60c2:	9e 01       	movw	r18, r28
    60c4:	41 15       	cp	r20, r1
    60c6:	51 05       	cpc	r21, r1
    60c8:	f1 f0       	breq	.+60     	; 0x6106 <free+0x92>
    60ca:	ea 01       	movw	r28, r20
    60cc:	f5 cf       	rjmp	.-22     	; 0x60b8 <free+0x44>
    60ce:	d3 83       	std	Z+3, r29	; 0x03
    60d0:	c2 83       	std	Z+2, r28	; 0x02
    60d2:	40 81       	ld	r20, Z
    60d4:	51 81       	ldd	r21, Z+1	; 0x01
    60d6:	84 0f       	add	r24, r20
    60d8:	95 1f       	adc	r25, r21
    60da:	c8 17       	cp	r28, r24
    60dc:	d9 07       	cpc	r29, r25
    60de:	59 f4       	brne	.+22     	; 0x60f6 <free+0x82>
    60e0:	88 81       	ld	r24, Y
    60e2:	99 81       	ldd	r25, Y+1	; 0x01
    60e4:	84 0f       	add	r24, r20
    60e6:	95 1f       	adc	r25, r21
    60e8:	02 96       	adiw	r24, 0x02	; 2
    60ea:	91 83       	std	Z+1, r25	; 0x01
    60ec:	80 83       	st	Z, r24
    60ee:	8a 81       	ldd	r24, Y+2	; 0x02
    60f0:	9b 81       	ldd	r25, Y+3	; 0x03
    60f2:	93 83       	std	Z+3, r25	; 0x03
    60f4:	82 83       	std	Z+2, r24	; 0x02
    60f6:	21 15       	cp	r18, r1
    60f8:	31 05       	cpc	r19, r1
    60fa:	29 f4       	brne	.+10     	; 0x6106 <free+0x92>
    60fc:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__flp+0x1>
    6100:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__flp>
    6104:	3d c0       	rjmp	.+122    	; 0x6180 <free+0x10c>
    6106:	e9 01       	movw	r28, r18
    6108:	fb 83       	std	Y+3, r31	; 0x03
    610a:	ea 83       	std	Y+2, r30	; 0x02
    610c:	49 91       	ld	r20, Y+
    610e:	59 91       	ld	r21, Y+
    6110:	c4 0f       	add	r28, r20
    6112:	d5 1f       	adc	r29, r21
    6114:	ec 17       	cp	r30, r28
    6116:	fd 07       	cpc	r31, r29
    6118:	61 f4       	brne	.+24     	; 0x6132 <free+0xbe>
    611a:	80 81       	ld	r24, Z
    611c:	91 81       	ldd	r25, Z+1	; 0x01
    611e:	84 0f       	add	r24, r20
    6120:	95 1f       	adc	r25, r21
    6122:	02 96       	adiw	r24, 0x02	; 2
    6124:	e9 01       	movw	r28, r18
    6126:	99 83       	std	Y+1, r25	; 0x01
    6128:	88 83       	st	Y, r24
    612a:	82 81       	ldd	r24, Z+2	; 0x02
    612c:	93 81       	ldd	r25, Z+3	; 0x03
    612e:	9b 83       	std	Y+3, r25	; 0x03
    6130:	8a 83       	std	Y+2, r24	; 0x02
    6132:	e0 e0       	ldi	r30, 0x00	; 0
    6134:	f0 e0       	ldi	r31, 0x00	; 0
    6136:	12 96       	adiw	r26, 0x02	; 2
    6138:	8d 91       	ld	r24, X+
    613a:	9c 91       	ld	r25, X
    613c:	13 97       	sbiw	r26, 0x03	; 3
    613e:	00 97       	sbiw	r24, 0x00	; 0
    6140:	19 f0       	breq	.+6      	; 0x6148 <free+0xd4>
    6142:	fd 01       	movw	r30, r26
    6144:	dc 01       	movw	r26, r24
    6146:	f7 cf       	rjmp	.-18     	; 0x6136 <free+0xc2>
    6148:	8d 91       	ld	r24, X+
    614a:	9c 91       	ld	r25, X
    614c:	11 97       	sbiw	r26, 0x01	; 1
    614e:	9d 01       	movw	r18, r26
    6150:	2e 5f       	subi	r18, 0xFE	; 254
    6152:	3f 4f       	sbci	r19, 0xFF	; 255
    6154:	82 0f       	add	r24, r18
    6156:	93 1f       	adc	r25, r19
    6158:	20 91 aa 05 	lds	r18, 0x05AA	; 0x8005aa <__brkval>
    615c:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <__brkval+0x1>
    6160:	28 17       	cp	r18, r24
    6162:	39 07       	cpc	r19, r25
    6164:	69 f4       	brne	.+26     	; 0x6180 <free+0x10c>
    6166:	30 97       	sbiw	r30, 0x00	; 0
    6168:	29 f4       	brne	.+10     	; 0x6174 <free+0x100>
    616a:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <__flp+0x1>
    616e:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <__flp>
    6172:	02 c0       	rjmp	.+4      	; 0x6178 <free+0x104>
    6174:	13 82       	std	Z+3, r1	; 0x03
    6176:	12 82       	std	Z+2, r1	; 0x02
    6178:	b0 93 ab 05 	sts	0x05AB, r27	; 0x8005ab <__brkval+0x1>
    617c:	a0 93 aa 05 	sts	0x05AA, r26	; 0x8005aa <__brkval>
    6180:	df 91       	pop	r29
    6182:	cf 91       	pop	r28
    6184:	08 95       	ret

00006186 <atoi>:
    6186:	fc 01       	movw	r30, r24
    6188:	88 27       	eor	r24, r24
    618a:	99 27       	eor	r25, r25
    618c:	e8 94       	clt
    618e:	21 91       	ld	r18, Z+
    6190:	20 32       	cpi	r18, 0x20	; 32
    6192:	e9 f3       	breq	.-6      	; 0x618e <atoi+0x8>
    6194:	29 30       	cpi	r18, 0x09	; 9
    6196:	10 f0       	brcs	.+4      	; 0x619c <atoi+0x16>
    6198:	2e 30       	cpi	r18, 0x0E	; 14
    619a:	c8 f3       	brcs	.-14     	; 0x618e <atoi+0x8>
    619c:	2b 32       	cpi	r18, 0x2B	; 43
    619e:	41 f0       	breq	.+16     	; 0x61b0 <atoi+0x2a>
    61a0:	2d 32       	cpi	r18, 0x2D	; 45
    61a2:	39 f4       	brne	.+14     	; 0x61b2 <atoi+0x2c>
    61a4:	68 94       	set
    61a6:	04 c0       	rjmp	.+8      	; 0x61b0 <atoi+0x2a>
    61a8:	0e 94 46 31 	call	0x628c	; 0x628c <__mulhi_const_10>
    61ac:	82 0f       	add	r24, r18
    61ae:	91 1d       	adc	r25, r1
    61b0:	21 91       	ld	r18, Z+
    61b2:	20 53       	subi	r18, 0x30	; 48
    61b4:	2a 30       	cpi	r18, 0x0A	; 10
    61b6:	c0 f3       	brcs	.-16     	; 0x61a8 <atoi+0x22>
    61b8:	1e f4       	brtc	.+6      	; 0x61c0 <atoi+0x3a>
    61ba:	90 95       	com	r25
    61bc:	81 95       	neg	r24
    61be:	9f 4f       	sbci	r25, 0xFF	; 255
    61c0:	08 95       	ret

000061c2 <atol>:
    61c2:	1f 93       	push	r17
    61c4:	fc 01       	movw	r30, r24
    61c6:	99 27       	eor	r25, r25
    61c8:	88 27       	eor	r24, r24
    61ca:	bc 01       	movw	r22, r24
    61cc:	e8 94       	clt
    61ce:	11 91       	ld	r17, Z+
    61d0:	10 32       	cpi	r17, 0x20	; 32
    61d2:	e9 f3       	breq	.-6      	; 0x61ce <atol+0xc>
    61d4:	19 30       	cpi	r17, 0x09	; 9
    61d6:	10 f0       	brcs	.+4      	; 0x61dc <atol+0x1a>
    61d8:	1e 30       	cpi	r17, 0x0E	; 14
    61da:	c8 f3       	brcs	.-14     	; 0x61ce <atol+0xc>
    61dc:	1b 32       	cpi	r17, 0x2B	; 43
    61de:	51 f0       	breq	.+20     	; 0x61f4 <atol+0x32>
    61e0:	1d 32       	cpi	r17, 0x2D	; 45
    61e2:	49 f4       	brne	.+18     	; 0x61f6 <atol+0x34>
    61e4:	68 94       	set
    61e6:	06 c0       	rjmp	.+12     	; 0x61f4 <atol+0x32>
    61e8:	0e 94 31 31 	call	0x6262	; 0x6262 <__mulsi_const_10>
    61ec:	61 0f       	add	r22, r17
    61ee:	71 1d       	adc	r23, r1
    61f0:	81 1d       	adc	r24, r1
    61f2:	91 1d       	adc	r25, r1
    61f4:	11 91       	ld	r17, Z+
    61f6:	10 53       	subi	r17, 0x30	; 48
    61f8:	1a 30       	cpi	r17, 0x0A	; 10
    61fa:	b0 f3       	brcs	.-20     	; 0x61e8 <atol+0x26>
    61fc:	3e f4       	brtc	.+14     	; 0x620c <atol+0x4a>
    61fe:	90 95       	com	r25
    6200:	80 95       	com	r24
    6202:	70 95       	com	r23
    6204:	61 95       	neg	r22
    6206:	7f 4f       	sbci	r23, 0xFF	; 255
    6208:	8f 4f       	sbci	r24, 0xFF	; 255
    620a:	9f 4f       	sbci	r25, 0xFF	; 255
    620c:	1f 91       	pop	r17
    620e:	08 95       	ret

00006210 <toupper>:
    6210:	91 11       	cpse	r25, r1
    6212:	08 95       	ret
    6214:	81 56       	subi	r24, 0x61	; 97
    6216:	8a 51       	subi	r24, 0x1A	; 26
    6218:	08 f4       	brcc	.+2      	; 0x621c <toupper+0xc>
    621a:	80 52       	subi	r24, 0x20	; 32
    621c:	85 58       	subi	r24, 0x85	; 133
    621e:	08 95       	ret

00006220 <strcat>:
    6220:	fb 01       	movw	r30, r22
    6222:	dc 01       	movw	r26, r24
    6224:	0d 90       	ld	r0, X+
    6226:	00 20       	and	r0, r0
    6228:	e9 f7       	brne	.-6      	; 0x6224 <strcat+0x4>
    622a:	11 97       	sbiw	r26, 0x01	; 1
    622c:	01 90       	ld	r0, Z+
    622e:	0d 92       	st	X+, r0
    6230:	00 20       	and	r0, r0
    6232:	e1 f7       	brne	.-8      	; 0x622c <strcat+0xc>
    6234:	08 95       	ret

00006236 <strcpy>:
    6236:	fb 01       	movw	r30, r22
    6238:	dc 01       	movw	r26, r24
    623a:	01 90       	ld	r0, Z+
    623c:	0d 92       	st	X+, r0
    623e:	00 20       	and	r0, r0
    6240:	e1 f7       	brne	.-8      	; 0x623a <strcpy+0x4>
    6242:	08 95       	ret

00006244 <strncpy>:
    6244:	fb 01       	movw	r30, r22
    6246:	dc 01       	movw	r26, r24
    6248:	41 50       	subi	r20, 0x01	; 1
    624a:	50 40       	sbci	r21, 0x00	; 0
    624c:	48 f0       	brcs	.+18     	; 0x6260 <strncpy+0x1c>
    624e:	01 90       	ld	r0, Z+
    6250:	0d 92       	st	X+, r0
    6252:	00 20       	and	r0, r0
    6254:	c9 f7       	brne	.-14     	; 0x6248 <strncpy+0x4>
    6256:	01 c0       	rjmp	.+2      	; 0x625a <strncpy+0x16>
    6258:	1d 92       	st	X+, r1
    625a:	41 50       	subi	r20, 0x01	; 1
    625c:	50 40       	sbci	r21, 0x00	; 0
    625e:	e0 f7       	brcc	.-8      	; 0x6258 <strncpy+0x14>
    6260:	08 95       	ret

00006262 <__mulsi_const_10>:
    6262:	59 2f       	mov	r21, r25
    6264:	48 2f       	mov	r20, r24
    6266:	37 2f       	mov	r19, r23
    6268:	26 2f       	mov	r18, r22
    626a:	66 0f       	add	r22, r22
    626c:	77 1f       	adc	r23, r23
    626e:	88 1f       	adc	r24, r24
    6270:	99 1f       	adc	r25, r25
    6272:	66 0f       	add	r22, r22
    6274:	77 1f       	adc	r23, r23
    6276:	88 1f       	adc	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	62 0f       	add	r22, r18
    627c:	73 1f       	adc	r23, r19
    627e:	84 1f       	adc	r24, r20
    6280:	95 1f       	adc	r25, r21
    6282:	66 0f       	add	r22, r22
    6284:	77 1f       	adc	r23, r23
    6286:	88 1f       	adc	r24, r24
    6288:	99 1f       	adc	r25, r25
    628a:	08 95       	ret

0000628c <__mulhi_const_10>:
    628c:	7a e0       	ldi	r23, 0x0A	; 10
    628e:	97 9f       	mul	r25, r23
    6290:	90 2d       	mov	r25, r0
    6292:	87 9f       	mul	r24, r23
    6294:	80 2d       	mov	r24, r0
    6296:	91 0d       	add	r25, r1
    6298:	11 24       	eor	r1, r1
    629a:	08 95       	ret

0000629c <sprintf>:
    629c:	ae e0       	ldi	r26, 0x0E	; 14
    629e:	b0 e0       	ldi	r27, 0x00	; 0
    62a0:	e4 e5       	ldi	r30, 0x54	; 84
    62a2:	f1 e3       	ldi	r31, 0x31	; 49
    62a4:	0c 94 72 34 	jmp	0x68e4	; 0x68e4 <__prologue_saves__+0x1c>
    62a8:	0d 89       	ldd	r16, Y+21	; 0x15
    62aa:	1e 89       	ldd	r17, Y+22	; 0x16
    62ac:	86 e0       	ldi	r24, 0x06	; 6
    62ae:	8c 83       	std	Y+4, r24	; 0x04
    62b0:	1a 83       	std	Y+2, r17	; 0x02
    62b2:	09 83       	std	Y+1, r16	; 0x01
    62b4:	8f ef       	ldi	r24, 0xFF	; 255
    62b6:	9f e7       	ldi	r25, 0x7F	; 127
    62b8:	9e 83       	std	Y+6, r25	; 0x06
    62ba:	8d 83       	std	Y+5, r24	; 0x05
    62bc:	ae 01       	movw	r20, r28
    62be:	47 5e       	subi	r20, 0xE7	; 231
    62c0:	5f 4f       	sbci	r21, 0xFF	; 255
    62c2:	6f 89       	ldd	r22, Y+23	; 0x17
    62c4:	78 8d       	ldd	r23, Y+24	; 0x18
    62c6:	ce 01       	movw	r24, r28
    62c8:	01 96       	adiw	r24, 0x01	; 1
    62ca:	0e 94 70 31 	call	0x62e0	; 0x62e0 <vfprintf>
    62ce:	ef 81       	ldd	r30, Y+7	; 0x07
    62d0:	f8 85       	ldd	r31, Y+8	; 0x08
    62d2:	e0 0f       	add	r30, r16
    62d4:	f1 1f       	adc	r31, r17
    62d6:	10 82       	st	Z, r1
    62d8:	2e 96       	adiw	r28, 0x0e	; 14
    62da:	e4 e0       	ldi	r30, 0x04	; 4
    62dc:	0c 94 8e 34 	jmp	0x691c	; 0x691c <__epilogue_restores__+0x1c>

000062e0 <vfprintf>:
    62e0:	ab e0       	ldi	r26, 0x0B	; 11
    62e2:	b0 e0       	ldi	r27, 0x00	; 0
    62e4:	e6 e7       	ldi	r30, 0x76	; 118
    62e6:	f1 e3       	ldi	r31, 0x31	; 49
    62e8:	0c 94 64 34 	jmp	0x68c8	; 0x68c8 <__prologue_saves__>
    62ec:	6c 01       	movw	r12, r24
    62ee:	7b 01       	movw	r14, r22
    62f0:	8a 01       	movw	r16, r20
    62f2:	fc 01       	movw	r30, r24
    62f4:	17 82       	std	Z+7, r1	; 0x07
    62f6:	16 82       	std	Z+6, r1	; 0x06
    62f8:	83 81       	ldd	r24, Z+3	; 0x03
    62fa:	81 ff       	sbrs	r24, 1
    62fc:	cc c1       	rjmp	.+920    	; 0x6696 <vfprintf+0x3b6>
    62fe:	ce 01       	movw	r24, r28
    6300:	01 96       	adiw	r24, 0x01	; 1
    6302:	3c 01       	movw	r6, r24
    6304:	f6 01       	movw	r30, r12
    6306:	93 81       	ldd	r25, Z+3	; 0x03
    6308:	f7 01       	movw	r30, r14
    630a:	93 fd       	sbrc	r25, 3
    630c:	85 91       	lpm	r24, Z+
    630e:	93 ff       	sbrs	r25, 3
    6310:	81 91       	ld	r24, Z+
    6312:	7f 01       	movw	r14, r30
    6314:	88 23       	and	r24, r24
    6316:	09 f4       	brne	.+2      	; 0x631a <vfprintf+0x3a>
    6318:	ba c1       	rjmp	.+884    	; 0x668e <vfprintf+0x3ae>
    631a:	85 32       	cpi	r24, 0x25	; 37
    631c:	39 f4       	brne	.+14     	; 0x632c <vfprintf+0x4c>
    631e:	93 fd       	sbrc	r25, 3
    6320:	85 91       	lpm	r24, Z+
    6322:	93 ff       	sbrs	r25, 3
    6324:	81 91       	ld	r24, Z+
    6326:	7f 01       	movw	r14, r30
    6328:	85 32       	cpi	r24, 0x25	; 37
    632a:	29 f4       	brne	.+10     	; 0x6336 <vfprintf+0x56>
    632c:	b6 01       	movw	r22, r12
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6334:	e7 cf       	rjmp	.-50     	; 0x6304 <vfprintf+0x24>
    6336:	91 2c       	mov	r9, r1
    6338:	21 2c       	mov	r2, r1
    633a:	31 2c       	mov	r3, r1
    633c:	ff e1       	ldi	r31, 0x1F	; 31
    633e:	f3 15       	cp	r31, r3
    6340:	d8 f0       	brcs	.+54     	; 0x6378 <vfprintf+0x98>
    6342:	8b 32       	cpi	r24, 0x2B	; 43
    6344:	79 f0       	breq	.+30     	; 0x6364 <vfprintf+0x84>
    6346:	38 f4       	brcc	.+14     	; 0x6356 <vfprintf+0x76>
    6348:	80 32       	cpi	r24, 0x20	; 32
    634a:	79 f0       	breq	.+30     	; 0x636a <vfprintf+0x8a>
    634c:	83 32       	cpi	r24, 0x23	; 35
    634e:	a1 f4       	brne	.+40     	; 0x6378 <vfprintf+0x98>
    6350:	23 2d       	mov	r18, r3
    6352:	20 61       	ori	r18, 0x10	; 16
    6354:	1d c0       	rjmp	.+58     	; 0x6390 <vfprintf+0xb0>
    6356:	8d 32       	cpi	r24, 0x2D	; 45
    6358:	61 f0       	breq	.+24     	; 0x6372 <vfprintf+0x92>
    635a:	80 33       	cpi	r24, 0x30	; 48
    635c:	69 f4       	brne	.+26     	; 0x6378 <vfprintf+0x98>
    635e:	23 2d       	mov	r18, r3
    6360:	21 60       	ori	r18, 0x01	; 1
    6362:	16 c0       	rjmp	.+44     	; 0x6390 <vfprintf+0xb0>
    6364:	83 2d       	mov	r24, r3
    6366:	82 60       	ori	r24, 0x02	; 2
    6368:	38 2e       	mov	r3, r24
    636a:	e3 2d       	mov	r30, r3
    636c:	e4 60       	ori	r30, 0x04	; 4
    636e:	3e 2e       	mov	r3, r30
    6370:	2a c0       	rjmp	.+84     	; 0x63c6 <vfprintf+0xe6>
    6372:	f3 2d       	mov	r31, r3
    6374:	f8 60       	ori	r31, 0x08	; 8
    6376:	1d c0       	rjmp	.+58     	; 0x63b2 <vfprintf+0xd2>
    6378:	37 fc       	sbrc	r3, 7
    637a:	2d c0       	rjmp	.+90     	; 0x63d6 <vfprintf+0xf6>
    637c:	20 ed       	ldi	r18, 0xD0	; 208
    637e:	28 0f       	add	r18, r24
    6380:	2a 30       	cpi	r18, 0x0A	; 10
    6382:	40 f0       	brcs	.+16     	; 0x6394 <vfprintf+0xb4>
    6384:	8e 32       	cpi	r24, 0x2E	; 46
    6386:	b9 f4       	brne	.+46     	; 0x63b6 <vfprintf+0xd6>
    6388:	36 fc       	sbrc	r3, 6
    638a:	81 c1       	rjmp	.+770    	; 0x668e <vfprintf+0x3ae>
    638c:	23 2d       	mov	r18, r3
    638e:	20 64       	ori	r18, 0x40	; 64
    6390:	32 2e       	mov	r3, r18
    6392:	19 c0       	rjmp	.+50     	; 0x63c6 <vfprintf+0xe6>
    6394:	36 fe       	sbrs	r3, 6
    6396:	06 c0       	rjmp	.+12     	; 0x63a4 <vfprintf+0xc4>
    6398:	8a e0       	ldi	r24, 0x0A	; 10
    639a:	98 9e       	mul	r9, r24
    639c:	20 0d       	add	r18, r0
    639e:	11 24       	eor	r1, r1
    63a0:	92 2e       	mov	r9, r18
    63a2:	11 c0       	rjmp	.+34     	; 0x63c6 <vfprintf+0xe6>
    63a4:	ea e0       	ldi	r30, 0x0A	; 10
    63a6:	2e 9e       	mul	r2, r30
    63a8:	20 0d       	add	r18, r0
    63aa:	11 24       	eor	r1, r1
    63ac:	22 2e       	mov	r2, r18
    63ae:	f3 2d       	mov	r31, r3
    63b0:	f0 62       	ori	r31, 0x20	; 32
    63b2:	3f 2e       	mov	r3, r31
    63b4:	08 c0       	rjmp	.+16     	; 0x63c6 <vfprintf+0xe6>
    63b6:	8c 36       	cpi	r24, 0x6C	; 108
    63b8:	21 f4       	brne	.+8      	; 0x63c2 <vfprintf+0xe2>
    63ba:	83 2d       	mov	r24, r3
    63bc:	80 68       	ori	r24, 0x80	; 128
    63be:	38 2e       	mov	r3, r24
    63c0:	02 c0       	rjmp	.+4      	; 0x63c6 <vfprintf+0xe6>
    63c2:	88 36       	cpi	r24, 0x68	; 104
    63c4:	41 f4       	brne	.+16     	; 0x63d6 <vfprintf+0xf6>
    63c6:	f7 01       	movw	r30, r14
    63c8:	93 fd       	sbrc	r25, 3
    63ca:	85 91       	lpm	r24, Z+
    63cc:	93 ff       	sbrs	r25, 3
    63ce:	81 91       	ld	r24, Z+
    63d0:	7f 01       	movw	r14, r30
    63d2:	81 11       	cpse	r24, r1
    63d4:	b3 cf       	rjmp	.-154    	; 0x633c <vfprintf+0x5c>
    63d6:	98 2f       	mov	r25, r24
    63d8:	9f 7d       	andi	r25, 0xDF	; 223
    63da:	95 54       	subi	r25, 0x45	; 69
    63dc:	93 30       	cpi	r25, 0x03	; 3
    63de:	28 f4       	brcc	.+10     	; 0x63ea <vfprintf+0x10a>
    63e0:	0c 5f       	subi	r16, 0xFC	; 252
    63e2:	1f 4f       	sbci	r17, 0xFF	; 255
    63e4:	9f e3       	ldi	r25, 0x3F	; 63
    63e6:	99 83       	std	Y+1, r25	; 0x01
    63e8:	0d c0       	rjmp	.+26     	; 0x6404 <vfprintf+0x124>
    63ea:	83 36       	cpi	r24, 0x63	; 99
    63ec:	31 f0       	breq	.+12     	; 0x63fa <vfprintf+0x11a>
    63ee:	83 37       	cpi	r24, 0x73	; 115
    63f0:	71 f0       	breq	.+28     	; 0x640e <vfprintf+0x12e>
    63f2:	83 35       	cpi	r24, 0x53	; 83
    63f4:	09 f0       	breq	.+2      	; 0x63f8 <vfprintf+0x118>
    63f6:	59 c0       	rjmp	.+178    	; 0x64aa <vfprintf+0x1ca>
    63f8:	21 c0       	rjmp	.+66     	; 0x643c <vfprintf+0x15c>
    63fa:	f8 01       	movw	r30, r16
    63fc:	80 81       	ld	r24, Z
    63fe:	89 83       	std	Y+1, r24	; 0x01
    6400:	0e 5f       	subi	r16, 0xFE	; 254
    6402:	1f 4f       	sbci	r17, 0xFF	; 255
    6404:	88 24       	eor	r8, r8
    6406:	83 94       	inc	r8
    6408:	91 2c       	mov	r9, r1
    640a:	53 01       	movw	r10, r6
    640c:	13 c0       	rjmp	.+38     	; 0x6434 <vfprintf+0x154>
    640e:	28 01       	movw	r4, r16
    6410:	f2 e0       	ldi	r31, 0x02	; 2
    6412:	4f 0e       	add	r4, r31
    6414:	51 1c       	adc	r5, r1
    6416:	f8 01       	movw	r30, r16
    6418:	a0 80       	ld	r10, Z
    641a:	b1 80       	ldd	r11, Z+1	; 0x01
    641c:	36 fe       	sbrs	r3, 6
    641e:	03 c0       	rjmp	.+6      	; 0x6426 <vfprintf+0x146>
    6420:	69 2d       	mov	r22, r9
    6422:	70 e0       	ldi	r23, 0x00	; 0
    6424:	02 c0       	rjmp	.+4      	; 0x642a <vfprintf+0x14a>
    6426:	6f ef       	ldi	r22, 0xFF	; 255
    6428:	7f ef       	ldi	r23, 0xFF	; 255
    642a:	c5 01       	movw	r24, r10
    642c:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <strnlen>
    6430:	4c 01       	movw	r8, r24
    6432:	82 01       	movw	r16, r4
    6434:	f3 2d       	mov	r31, r3
    6436:	ff 77       	andi	r31, 0x7F	; 127
    6438:	3f 2e       	mov	r3, r31
    643a:	16 c0       	rjmp	.+44     	; 0x6468 <vfprintf+0x188>
    643c:	28 01       	movw	r4, r16
    643e:	22 e0       	ldi	r18, 0x02	; 2
    6440:	42 0e       	add	r4, r18
    6442:	51 1c       	adc	r5, r1
    6444:	f8 01       	movw	r30, r16
    6446:	a0 80       	ld	r10, Z
    6448:	b1 80       	ldd	r11, Z+1	; 0x01
    644a:	36 fe       	sbrs	r3, 6
    644c:	03 c0       	rjmp	.+6      	; 0x6454 <vfprintf+0x174>
    644e:	69 2d       	mov	r22, r9
    6450:	70 e0       	ldi	r23, 0x00	; 0
    6452:	02 c0       	rjmp	.+4      	; 0x6458 <vfprintf+0x178>
    6454:	6f ef       	ldi	r22, 0xFF	; 255
    6456:	7f ef       	ldi	r23, 0xFF	; 255
    6458:	c5 01       	movw	r24, r10
    645a:	0e 94 51 33 	call	0x66a2	; 0x66a2 <strnlen_P>
    645e:	4c 01       	movw	r8, r24
    6460:	f3 2d       	mov	r31, r3
    6462:	f0 68       	ori	r31, 0x80	; 128
    6464:	3f 2e       	mov	r3, r31
    6466:	82 01       	movw	r16, r4
    6468:	33 fc       	sbrc	r3, 3
    646a:	1b c0       	rjmp	.+54     	; 0x64a2 <vfprintf+0x1c2>
    646c:	82 2d       	mov	r24, r2
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	88 16       	cp	r8, r24
    6472:	99 06       	cpc	r9, r25
    6474:	b0 f4       	brcc	.+44     	; 0x64a2 <vfprintf+0x1c2>
    6476:	b6 01       	movw	r22, r12
    6478:	80 e2       	ldi	r24, 0x20	; 32
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6480:	2a 94       	dec	r2
    6482:	f4 cf       	rjmp	.-24     	; 0x646c <vfprintf+0x18c>
    6484:	f5 01       	movw	r30, r10
    6486:	37 fc       	sbrc	r3, 7
    6488:	85 91       	lpm	r24, Z+
    648a:	37 fe       	sbrs	r3, 7
    648c:	81 91       	ld	r24, Z+
    648e:	5f 01       	movw	r10, r30
    6490:	b6 01       	movw	r22, r12
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6498:	21 10       	cpse	r2, r1
    649a:	2a 94       	dec	r2
    649c:	21 e0       	ldi	r18, 0x01	; 1
    649e:	82 1a       	sub	r8, r18
    64a0:	91 08       	sbc	r9, r1
    64a2:	81 14       	cp	r8, r1
    64a4:	91 04       	cpc	r9, r1
    64a6:	71 f7       	brne	.-36     	; 0x6484 <vfprintf+0x1a4>
    64a8:	e8 c0       	rjmp	.+464    	; 0x667a <vfprintf+0x39a>
    64aa:	84 36       	cpi	r24, 0x64	; 100
    64ac:	11 f0       	breq	.+4      	; 0x64b2 <vfprintf+0x1d2>
    64ae:	89 36       	cpi	r24, 0x69	; 105
    64b0:	41 f5       	brne	.+80     	; 0x6502 <vfprintf+0x222>
    64b2:	f8 01       	movw	r30, r16
    64b4:	37 fe       	sbrs	r3, 7
    64b6:	07 c0       	rjmp	.+14     	; 0x64c6 <vfprintf+0x1e6>
    64b8:	60 81       	ld	r22, Z
    64ba:	71 81       	ldd	r23, Z+1	; 0x01
    64bc:	82 81       	ldd	r24, Z+2	; 0x02
    64be:	93 81       	ldd	r25, Z+3	; 0x03
    64c0:	0c 5f       	subi	r16, 0xFC	; 252
    64c2:	1f 4f       	sbci	r17, 0xFF	; 255
    64c4:	08 c0       	rjmp	.+16     	; 0x64d6 <vfprintf+0x1f6>
    64c6:	60 81       	ld	r22, Z
    64c8:	71 81       	ldd	r23, Z+1	; 0x01
    64ca:	07 2e       	mov	r0, r23
    64cc:	00 0c       	add	r0, r0
    64ce:	88 0b       	sbc	r24, r24
    64d0:	99 0b       	sbc	r25, r25
    64d2:	0e 5f       	subi	r16, 0xFE	; 254
    64d4:	1f 4f       	sbci	r17, 0xFF	; 255
    64d6:	f3 2d       	mov	r31, r3
    64d8:	ff 76       	andi	r31, 0x6F	; 111
    64da:	3f 2e       	mov	r3, r31
    64dc:	97 ff       	sbrs	r25, 7
    64de:	09 c0       	rjmp	.+18     	; 0x64f2 <vfprintf+0x212>
    64e0:	90 95       	com	r25
    64e2:	80 95       	com	r24
    64e4:	70 95       	com	r23
    64e6:	61 95       	neg	r22
    64e8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ea:	8f 4f       	sbci	r24, 0xFF	; 255
    64ec:	9f 4f       	sbci	r25, 0xFF	; 255
    64ee:	f0 68       	ori	r31, 0x80	; 128
    64f0:	3f 2e       	mov	r3, r31
    64f2:	2a e0       	ldi	r18, 0x0A	; 10
    64f4:	30 e0       	ldi	r19, 0x00	; 0
    64f6:	a3 01       	movw	r20, r6
    64f8:	0e 94 a3 33 	call	0x6746	; 0x6746 <__ultoa_invert>
    64fc:	88 2e       	mov	r8, r24
    64fe:	86 18       	sub	r8, r6
    6500:	45 c0       	rjmp	.+138    	; 0x658c <vfprintf+0x2ac>
    6502:	85 37       	cpi	r24, 0x75	; 117
    6504:	31 f4       	brne	.+12     	; 0x6512 <vfprintf+0x232>
    6506:	23 2d       	mov	r18, r3
    6508:	2f 7e       	andi	r18, 0xEF	; 239
    650a:	b2 2e       	mov	r11, r18
    650c:	2a e0       	ldi	r18, 0x0A	; 10
    650e:	30 e0       	ldi	r19, 0x00	; 0
    6510:	25 c0       	rjmp	.+74     	; 0x655c <vfprintf+0x27c>
    6512:	93 2d       	mov	r25, r3
    6514:	99 7f       	andi	r25, 0xF9	; 249
    6516:	b9 2e       	mov	r11, r25
    6518:	8f 36       	cpi	r24, 0x6F	; 111
    651a:	c1 f0       	breq	.+48     	; 0x654c <vfprintf+0x26c>
    651c:	18 f4       	brcc	.+6      	; 0x6524 <vfprintf+0x244>
    651e:	88 35       	cpi	r24, 0x58	; 88
    6520:	79 f0       	breq	.+30     	; 0x6540 <vfprintf+0x260>
    6522:	b5 c0       	rjmp	.+362    	; 0x668e <vfprintf+0x3ae>
    6524:	80 37       	cpi	r24, 0x70	; 112
    6526:	19 f0       	breq	.+6      	; 0x652e <vfprintf+0x24e>
    6528:	88 37       	cpi	r24, 0x78	; 120
    652a:	21 f0       	breq	.+8      	; 0x6534 <vfprintf+0x254>
    652c:	b0 c0       	rjmp	.+352    	; 0x668e <vfprintf+0x3ae>
    652e:	e9 2f       	mov	r30, r25
    6530:	e0 61       	ori	r30, 0x10	; 16
    6532:	be 2e       	mov	r11, r30
    6534:	b4 fe       	sbrs	r11, 4
    6536:	0d c0       	rjmp	.+26     	; 0x6552 <vfprintf+0x272>
    6538:	fb 2d       	mov	r31, r11
    653a:	f4 60       	ori	r31, 0x04	; 4
    653c:	bf 2e       	mov	r11, r31
    653e:	09 c0       	rjmp	.+18     	; 0x6552 <vfprintf+0x272>
    6540:	34 fe       	sbrs	r3, 4
    6542:	0a c0       	rjmp	.+20     	; 0x6558 <vfprintf+0x278>
    6544:	29 2f       	mov	r18, r25
    6546:	26 60       	ori	r18, 0x06	; 6
    6548:	b2 2e       	mov	r11, r18
    654a:	06 c0       	rjmp	.+12     	; 0x6558 <vfprintf+0x278>
    654c:	28 e0       	ldi	r18, 0x08	; 8
    654e:	30 e0       	ldi	r19, 0x00	; 0
    6550:	05 c0       	rjmp	.+10     	; 0x655c <vfprintf+0x27c>
    6552:	20 e1       	ldi	r18, 0x10	; 16
    6554:	30 e0       	ldi	r19, 0x00	; 0
    6556:	02 c0       	rjmp	.+4      	; 0x655c <vfprintf+0x27c>
    6558:	20 e1       	ldi	r18, 0x10	; 16
    655a:	32 e0       	ldi	r19, 0x02	; 2
    655c:	f8 01       	movw	r30, r16
    655e:	b7 fe       	sbrs	r11, 7
    6560:	07 c0       	rjmp	.+14     	; 0x6570 <vfprintf+0x290>
    6562:	60 81       	ld	r22, Z
    6564:	71 81       	ldd	r23, Z+1	; 0x01
    6566:	82 81       	ldd	r24, Z+2	; 0x02
    6568:	93 81       	ldd	r25, Z+3	; 0x03
    656a:	0c 5f       	subi	r16, 0xFC	; 252
    656c:	1f 4f       	sbci	r17, 0xFF	; 255
    656e:	06 c0       	rjmp	.+12     	; 0x657c <vfprintf+0x29c>
    6570:	60 81       	ld	r22, Z
    6572:	71 81       	ldd	r23, Z+1	; 0x01
    6574:	80 e0       	ldi	r24, 0x00	; 0
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	0e 5f       	subi	r16, 0xFE	; 254
    657a:	1f 4f       	sbci	r17, 0xFF	; 255
    657c:	a3 01       	movw	r20, r6
    657e:	0e 94 a3 33 	call	0x6746	; 0x6746 <__ultoa_invert>
    6582:	88 2e       	mov	r8, r24
    6584:	86 18       	sub	r8, r6
    6586:	fb 2d       	mov	r31, r11
    6588:	ff 77       	andi	r31, 0x7F	; 127
    658a:	3f 2e       	mov	r3, r31
    658c:	36 fe       	sbrs	r3, 6
    658e:	0d c0       	rjmp	.+26     	; 0x65aa <vfprintf+0x2ca>
    6590:	23 2d       	mov	r18, r3
    6592:	2e 7f       	andi	r18, 0xFE	; 254
    6594:	a2 2e       	mov	r10, r18
    6596:	89 14       	cp	r8, r9
    6598:	58 f4       	brcc	.+22     	; 0x65b0 <vfprintf+0x2d0>
    659a:	34 fe       	sbrs	r3, 4
    659c:	0b c0       	rjmp	.+22     	; 0x65b4 <vfprintf+0x2d4>
    659e:	32 fc       	sbrc	r3, 2
    65a0:	09 c0       	rjmp	.+18     	; 0x65b4 <vfprintf+0x2d4>
    65a2:	83 2d       	mov	r24, r3
    65a4:	8e 7e       	andi	r24, 0xEE	; 238
    65a6:	a8 2e       	mov	r10, r24
    65a8:	05 c0       	rjmp	.+10     	; 0x65b4 <vfprintf+0x2d4>
    65aa:	b8 2c       	mov	r11, r8
    65ac:	a3 2c       	mov	r10, r3
    65ae:	03 c0       	rjmp	.+6      	; 0x65b6 <vfprintf+0x2d6>
    65b0:	b8 2c       	mov	r11, r8
    65b2:	01 c0       	rjmp	.+2      	; 0x65b6 <vfprintf+0x2d6>
    65b4:	b9 2c       	mov	r11, r9
    65b6:	a4 fe       	sbrs	r10, 4
    65b8:	0f c0       	rjmp	.+30     	; 0x65d8 <vfprintf+0x2f8>
    65ba:	fe 01       	movw	r30, r28
    65bc:	e8 0d       	add	r30, r8
    65be:	f1 1d       	adc	r31, r1
    65c0:	80 81       	ld	r24, Z
    65c2:	80 33       	cpi	r24, 0x30	; 48
    65c4:	21 f4       	brne	.+8      	; 0x65ce <vfprintf+0x2ee>
    65c6:	9a 2d       	mov	r25, r10
    65c8:	99 7e       	andi	r25, 0xE9	; 233
    65ca:	a9 2e       	mov	r10, r25
    65cc:	09 c0       	rjmp	.+18     	; 0x65e0 <vfprintf+0x300>
    65ce:	a2 fe       	sbrs	r10, 2
    65d0:	06 c0       	rjmp	.+12     	; 0x65de <vfprintf+0x2fe>
    65d2:	b3 94       	inc	r11
    65d4:	b3 94       	inc	r11
    65d6:	04 c0       	rjmp	.+8      	; 0x65e0 <vfprintf+0x300>
    65d8:	8a 2d       	mov	r24, r10
    65da:	86 78       	andi	r24, 0x86	; 134
    65dc:	09 f0       	breq	.+2      	; 0x65e0 <vfprintf+0x300>
    65de:	b3 94       	inc	r11
    65e0:	a3 fc       	sbrc	r10, 3
    65e2:	11 c0       	rjmp	.+34     	; 0x6606 <vfprintf+0x326>
    65e4:	a0 fe       	sbrs	r10, 0
    65e6:	06 c0       	rjmp	.+12     	; 0x65f4 <vfprintf+0x314>
    65e8:	b2 14       	cp	r11, r2
    65ea:	88 f4       	brcc	.+34     	; 0x660e <vfprintf+0x32e>
    65ec:	28 0c       	add	r2, r8
    65ee:	92 2c       	mov	r9, r2
    65f0:	9b 18       	sub	r9, r11
    65f2:	0e c0       	rjmp	.+28     	; 0x6610 <vfprintf+0x330>
    65f4:	b2 14       	cp	r11, r2
    65f6:	60 f4       	brcc	.+24     	; 0x6610 <vfprintf+0x330>
    65f8:	b6 01       	movw	r22, r12
    65fa:	80 e2       	ldi	r24, 0x20	; 32
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6602:	b3 94       	inc	r11
    6604:	f7 cf       	rjmp	.-18     	; 0x65f4 <vfprintf+0x314>
    6606:	b2 14       	cp	r11, r2
    6608:	18 f4       	brcc	.+6      	; 0x6610 <vfprintf+0x330>
    660a:	2b 18       	sub	r2, r11
    660c:	02 c0       	rjmp	.+4      	; 0x6612 <vfprintf+0x332>
    660e:	98 2c       	mov	r9, r8
    6610:	21 2c       	mov	r2, r1
    6612:	a4 fe       	sbrs	r10, 4
    6614:	10 c0       	rjmp	.+32     	; 0x6636 <vfprintf+0x356>
    6616:	b6 01       	movw	r22, r12
    6618:	80 e3       	ldi	r24, 0x30	; 48
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6620:	a2 fe       	sbrs	r10, 2
    6622:	17 c0       	rjmp	.+46     	; 0x6652 <vfprintf+0x372>
    6624:	a1 fc       	sbrc	r10, 1
    6626:	03 c0       	rjmp	.+6      	; 0x662e <vfprintf+0x34e>
    6628:	88 e7       	ldi	r24, 0x78	; 120
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	02 c0       	rjmp	.+4      	; 0x6632 <vfprintf+0x352>
    662e:	88 e5       	ldi	r24, 0x58	; 88
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	b6 01       	movw	r22, r12
    6634:	0c c0       	rjmp	.+24     	; 0x664e <vfprintf+0x36e>
    6636:	8a 2d       	mov	r24, r10
    6638:	86 78       	andi	r24, 0x86	; 134
    663a:	59 f0       	breq	.+22     	; 0x6652 <vfprintf+0x372>
    663c:	a1 fe       	sbrs	r10, 1
    663e:	02 c0       	rjmp	.+4      	; 0x6644 <vfprintf+0x364>
    6640:	8b e2       	ldi	r24, 0x2B	; 43
    6642:	01 c0       	rjmp	.+2      	; 0x6646 <vfprintf+0x366>
    6644:	80 e2       	ldi	r24, 0x20	; 32
    6646:	a7 fc       	sbrc	r10, 7
    6648:	8d e2       	ldi	r24, 0x2D	; 45
    664a:	b6 01       	movw	r22, r12
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6652:	89 14       	cp	r8, r9
    6654:	38 f4       	brcc	.+14     	; 0x6664 <vfprintf+0x384>
    6656:	b6 01       	movw	r22, r12
    6658:	80 e3       	ldi	r24, 0x30	; 48
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6660:	9a 94       	dec	r9
    6662:	f7 cf       	rjmp	.-18     	; 0x6652 <vfprintf+0x372>
    6664:	8a 94       	dec	r8
    6666:	f3 01       	movw	r30, r6
    6668:	e8 0d       	add	r30, r8
    666a:	f1 1d       	adc	r31, r1
    666c:	80 81       	ld	r24, Z
    666e:	b6 01       	movw	r22, r12
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    6676:	81 10       	cpse	r8, r1
    6678:	f5 cf       	rjmp	.-22     	; 0x6664 <vfprintf+0x384>
    667a:	22 20       	and	r2, r2
    667c:	09 f4       	brne	.+2      	; 0x6680 <vfprintf+0x3a0>
    667e:	42 ce       	rjmp	.-892    	; 0x6304 <vfprintf+0x24>
    6680:	b6 01       	movw	r22, r12
    6682:	80 e2       	ldi	r24, 0x20	; 32
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    668a:	2a 94       	dec	r2
    668c:	f6 cf       	rjmp	.-20     	; 0x667a <vfprintf+0x39a>
    668e:	f6 01       	movw	r30, r12
    6690:	86 81       	ldd	r24, Z+6	; 0x06
    6692:	97 81       	ldd	r25, Z+7	; 0x07
    6694:	02 c0       	rjmp	.+4      	; 0x669a <vfprintf+0x3ba>
    6696:	8f ef       	ldi	r24, 0xFF	; 255
    6698:	9f ef       	ldi	r25, 0xFF	; 255
    669a:	2b 96       	adiw	r28, 0x0b	; 11
    669c:	e2 e1       	ldi	r30, 0x12	; 18
    669e:	0c 94 80 34 	jmp	0x6900	; 0x6900 <__epilogue_restores__>

000066a2 <strnlen_P>:
    66a2:	fc 01       	movw	r30, r24
    66a4:	05 90       	lpm	r0, Z+
    66a6:	61 50       	subi	r22, 0x01	; 1
    66a8:	70 40       	sbci	r23, 0x00	; 0
    66aa:	01 10       	cpse	r0, r1
    66ac:	d8 f7       	brcc	.-10     	; 0x66a4 <strnlen_P+0x2>
    66ae:	80 95       	com	r24
    66b0:	90 95       	com	r25
    66b2:	8e 0f       	add	r24, r30
    66b4:	9f 1f       	adc	r25, r31
    66b6:	08 95       	ret

000066b8 <strnlen>:
    66b8:	fc 01       	movw	r30, r24
    66ba:	61 50       	subi	r22, 0x01	; 1
    66bc:	70 40       	sbci	r23, 0x00	; 0
    66be:	01 90       	ld	r0, Z+
    66c0:	01 10       	cpse	r0, r1
    66c2:	d8 f7       	brcc	.-10     	; 0x66ba <strnlen+0x2>
    66c4:	80 95       	com	r24
    66c6:	90 95       	com	r25
    66c8:	8e 0f       	add	r24, r30
    66ca:	9f 1f       	adc	r25, r31
    66cc:	08 95       	ret

000066ce <fputc>:
    66ce:	0f 93       	push	r16
    66d0:	1f 93       	push	r17
    66d2:	cf 93       	push	r28
    66d4:	df 93       	push	r29
    66d6:	fb 01       	movw	r30, r22
    66d8:	23 81       	ldd	r18, Z+3	; 0x03
    66da:	21 fd       	sbrc	r18, 1
    66dc:	03 c0       	rjmp	.+6      	; 0x66e4 <fputc+0x16>
    66de:	8f ef       	ldi	r24, 0xFF	; 255
    66e0:	9f ef       	ldi	r25, 0xFF	; 255
    66e2:	2c c0       	rjmp	.+88     	; 0x673c <fputc+0x6e>
    66e4:	22 ff       	sbrs	r18, 2
    66e6:	16 c0       	rjmp	.+44     	; 0x6714 <fputc+0x46>
    66e8:	46 81       	ldd	r20, Z+6	; 0x06
    66ea:	57 81       	ldd	r21, Z+7	; 0x07
    66ec:	24 81       	ldd	r18, Z+4	; 0x04
    66ee:	35 81       	ldd	r19, Z+5	; 0x05
    66f0:	42 17       	cp	r20, r18
    66f2:	53 07       	cpc	r21, r19
    66f4:	44 f4       	brge	.+16     	; 0x6706 <fputc+0x38>
    66f6:	a0 81       	ld	r26, Z
    66f8:	b1 81       	ldd	r27, Z+1	; 0x01
    66fa:	9d 01       	movw	r18, r26
    66fc:	2f 5f       	subi	r18, 0xFF	; 255
    66fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6700:	31 83       	std	Z+1, r19	; 0x01
    6702:	20 83       	st	Z, r18
    6704:	8c 93       	st	X, r24
    6706:	26 81       	ldd	r18, Z+6	; 0x06
    6708:	37 81       	ldd	r19, Z+7	; 0x07
    670a:	2f 5f       	subi	r18, 0xFF	; 255
    670c:	3f 4f       	sbci	r19, 0xFF	; 255
    670e:	37 83       	std	Z+7, r19	; 0x07
    6710:	26 83       	std	Z+6, r18	; 0x06
    6712:	14 c0       	rjmp	.+40     	; 0x673c <fputc+0x6e>
    6714:	8b 01       	movw	r16, r22
    6716:	ec 01       	movw	r28, r24
    6718:	fb 01       	movw	r30, r22
    671a:	00 84       	ldd	r0, Z+8	; 0x08
    671c:	f1 85       	ldd	r31, Z+9	; 0x09
    671e:	e0 2d       	mov	r30, r0
    6720:	09 95       	icall
    6722:	89 2b       	or	r24, r25
    6724:	e1 f6       	brne	.-72     	; 0x66de <fputc+0x10>
    6726:	d8 01       	movw	r26, r16
    6728:	16 96       	adiw	r26, 0x06	; 6
    672a:	8d 91       	ld	r24, X+
    672c:	9c 91       	ld	r25, X
    672e:	17 97       	sbiw	r26, 0x07	; 7
    6730:	01 96       	adiw	r24, 0x01	; 1
    6732:	17 96       	adiw	r26, 0x07	; 7
    6734:	9c 93       	st	X, r25
    6736:	8e 93       	st	-X, r24
    6738:	16 97       	sbiw	r26, 0x06	; 6
    673a:	ce 01       	movw	r24, r28
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	1f 91       	pop	r17
    6742:	0f 91       	pop	r16
    6744:	08 95       	ret

00006746 <__ultoa_invert>:
    6746:	fa 01       	movw	r30, r20
    6748:	aa 27       	eor	r26, r26
    674a:	28 30       	cpi	r18, 0x08	; 8
    674c:	51 f1       	breq	.+84     	; 0x67a2 <__ultoa_invert+0x5c>
    674e:	20 31       	cpi	r18, 0x10	; 16
    6750:	81 f1       	breq	.+96     	; 0x67b2 <__ultoa_invert+0x6c>
    6752:	e8 94       	clt
    6754:	6f 93       	push	r22
    6756:	6e 7f       	andi	r22, 0xFE	; 254
    6758:	6e 5f       	subi	r22, 0xFE	; 254
    675a:	7f 4f       	sbci	r23, 0xFF	; 255
    675c:	8f 4f       	sbci	r24, 0xFF	; 255
    675e:	9f 4f       	sbci	r25, 0xFF	; 255
    6760:	af 4f       	sbci	r26, 0xFF	; 255
    6762:	b1 e0       	ldi	r27, 0x01	; 1
    6764:	3e d0       	rcall	.+124    	; 0x67e2 <__ultoa_invert+0x9c>
    6766:	b4 e0       	ldi	r27, 0x04	; 4
    6768:	3c d0       	rcall	.+120    	; 0x67e2 <__ultoa_invert+0x9c>
    676a:	67 0f       	add	r22, r23
    676c:	78 1f       	adc	r23, r24
    676e:	89 1f       	adc	r24, r25
    6770:	9a 1f       	adc	r25, r26
    6772:	a1 1d       	adc	r26, r1
    6774:	68 0f       	add	r22, r24
    6776:	79 1f       	adc	r23, r25
    6778:	8a 1f       	adc	r24, r26
    677a:	91 1d       	adc	r25, r1
    677c:	a1 1d       	adc	r26, r1
    677e:	6a 0f       	add	r22, r26
    6780:	71 1d       	adc	r23, r1
    6782:	81 1d       	adc	r24, r1
    6784:	91 1d       	adc	r25, r1
    6786:	a1 1d       	adc	r26, r1
    6788:	20 d0       	rcall	.+64     	; 0x67ca <__ultoa_invert+0x84>
    678a:	09 f4       	brne	.+2      	; 0x678e <__ultoa_invert+0x48>
    678c:	68 94       	set
    678e:	3f 91       	pop	r19
    6790:	2a e0       	ldi	r18, 0x0A	; 10
    6792:	26 9f       	mul	r18, r22
    6794:	11 24       	eor	r1, r1
    6796:	30 19       	sub	r19, r0
    6798:	30 5d       	subi	r19, 0xD0	; 208
    679a:	31 93       	st	Z+, r19
    679c:	de f6       	brtc	.-74     	; 0x6754 <__ultoa_invert+0xe>
    679e:	cf 01       	movw	r24, r30
    67a0:	08 95       	ret
    67a2:	46 2f       	mov	r20, r22
    67a4:	47 70       	andi	r20, 0x07	; 7
    67a6:	40 5d       	subi	r20, 0xD0	; 208
    67a8:	41 93       	st	Z+, r20
    67aa:	b3 e0       	ldi	r27, 0x03	; 3
    67ac:	0f d0       	rcall	.+30     	; 0x67cc <__ultoa_invert+0x86>
    67ae:	c9 f7       	brne	.-14     	; 0x67a2 <__ultoa_invert+0x5c>
    67b0:	f6 cf       	rjmp	.-20     	; 0x679e <__ultoa_invert+0x58>
    67b2:	46 2f       	mov	r20, r22
    67b4:	4f 70       	andi	r20, 0x0F	; 15
    67b6:	40 5d       	subi	r20, 0xD0	; 208
    67b8:	4a 33       	cpi	r20, 0x3A	; 58
    67ba:	18 f0       	brcs	.+6      	; 0x67c2 <__ultoa_invert+0x7c>
    67bc:	49 5d       	subi	r20, 0xD9	; 217
    67be:	31 fd       	sbrc	r19, 1
    67c0:	40 52       	subi	r20, 0x20	; 32
    67c2:	41 93       	st	Z+, r20
    67c4:	02 d0       	rcall	.+4      	; 0x67ca <__ultoa_invert+0x84>
    67c6:	a9 f7       	brne	.-22     	; 0x67b2 <__ultoa_invert+0x6c>
    67c8:	ea cf       	rjmp	.-44     	; 0x679e <__ultoa_invert+0x58>
    67ca:	b4 e0       	ldi	r27, 0x04	; 4
    67cc:	a6 95       	lsr	r26
    67ce:	97 95       	ror	r25
    67d0:	87 95       	ror	r24
    67d2:	77 95       	ror	r23
    67d4:	67 95       	ror	r22
    67d6:	ba 95       	dec	r27
    67d8:	c9 f7       	brne	.-14     	; 0x67cc <__ultoa_invert+0x86>
    67da:	00 97       	sbiw	r24, 0x00	; 0
    67dc:	61 05       	cpc	r22, r1
    67de:	71 05       	cpc	r23, r1
    67e0:	08 95       	ret
    67e2:	9b 01       	movw	r18, r22
    67e4:	ac 01       	movw	r20, r24
    67e6:	0a 2e       	mov	r0, r26
    67e8:	06 94       	lsr	r0
    67ea:	57 95       	ror	r21
    67ec:	47 95       	ror	r20
    67ee:	37 95       	ror	r19
    67f0:	27 95       	ror	r18
    67f2:	ba 95       	dec	r27
    67f4:	c9 f7       	brne	.-14     	; 0x67e8 <__ultoa_invert+0xa2>
    67f6:	62 0f       	add	r22, r18
    67f8:	73 1f       	adc	r23, r19
    67fa:	84 1f       	adc	r24, r20
    67fc:	95 1f       	adc	r25, r21
    67fe:	a0 1d       	adc	r26, r0
    6800:	08 95       	ret

00006802 <eeprom_read_byte>:
    6802:	f9 99       	sbic	0x1f, 1	; 31
    6804:	fe cf       	rjmp	.-4      	; 0x6802 <eeprom_read_byte>
    6806:	92 bd       	out	0x22, r25	; 34
    6808:	81 bd       	out	0x21, r24	; 33
    680a:	f8 9a       	sbi	0x1f, 0	; 31
    680c:	99 27       	eor	r25, r25
    680e:	80 b5       	in	r24, 0x20	; 32
    6810:	08 95       	ret

00006812 <eeprom_read_dword>:
    6812:	a6 e1       	ldi	r26, 0x16	; 22
    6814:	b0 e0       	ldi	r27, 0x00	; 0
    6816:	44 e0       	ldi	r20, 0x04	; 4
    6818:	50 e0       	ldi	r21, 0x00	; 0
    681a:	0c 94 56 34 	jmp	0x68ac	; 0x68ac <eeprom_read_blraw>

0000681e <eeprom_read_word>:
    681e:	a8 e1       	ldi	r26, 0x18	; 24
    6820:	b0 e0       	ldi	r27, 0x00	; 0
    6822:	42 e0       	ldi	r20, 0x02	; 2
    6824:	50 e0       	ldi	r21, 0x00	; 0
    6826:	0c 94 56 34 	jmp	0x68ac	; 0x68ac <eeprom_read_blraw>

0000682a <eeprom_update_byte>:
    682a:	26 2f       	mov	r18, r22

0000682c <eeprom_update_r18>:
    682c:	f9 99       	sbic	0x1f, 1	; 31
    682e:	fe cf       	rjmp	.-4      	; 0x682c <eeprom_update_r18>
    6830:	92 bd       	out	0x22, r25	; 34
    6832:	81 bd       	out	0x21, r24	; 33
    6834:	f8 9a       	sbi	0x1f, 0	; 31
    6836:	01 97       	sbiw	r24, 0x01	; 1
    6838:	00 b4       	in	r0, 0x20	; 32
    683a:	02 16       	cp	r0, r18
    683c:	39 f0       	breq	.+14     	; 0x684c <eeprom_update_r18+0x20>
    683e:	1f ba       	out	0x1f, r1	; 31
    6840:	20 bd       	out	0x20, r18	; 32
    6842:	0f b6       	in	r0, 0x3f	; 63
    6844:	f8 94       	cli
    6846:	fa 9a       	sbi	0x1f, 2	; 31
    6848:	f9 9a       	sbi	0x1f, 1	; 31
    684a:	0f be       	out	0x3f, r0	; 63
    684c:	08 95       	ret

0000684e <eeprom_update_dword>:
    684e:	03 96       	adiw	r24, 0x03	; 3
    6850:	27 2f       	mov	r18, r23
    6852:	0e 94 16 34 	call	0x682c	; 0x682c <eeprom_update_r18>
    6856:	0e 94 15 34 	call	0x682a	; 0x682a <eeprom_update_byte>
    685a:	25 2f       	mov	r18, r21
    685c:	0e 94 16 34 	call	0x682c	; 0x682c <eeprom_update_r18>
    6860:	24 2f       	mov	r18, r20
    6862:	0c 94 16 34 	jmp	0x682c	; 0x682c <eeprom_update_r18>

00006866 <eeprom_update_word>:
    6866:	01 96       	adiw	r24, 0x01	; 1
    6868:	27 2f       	mov	r18, r23
    686a:	0e 94 16 34 	call	0x682c	; 0x682c <eeprom_update_r18>
    686e:	0c 94 15 34 	jmp	0x682a	; 0x682a <eeprom_update_byte>

00006872 <eeprom_write_byte>:
    6872:	26 2f       	mov	r18, r22

00006874 <eeprom_write_r18>:
    6874:	f9 99       	sbic	0x1f, 1	; 31
    6876:	fe cf       	rjmp	.-4      	; 0x6874 <eeprom_write_r18>
    6878:	1f ba       	out	0x1f, r1	; 31
    687a:	92 bd       	out	0x22, r25	; 34
    687c:	81 bd       	out	0x21, r24	; 33
    687e:	20 bd       	out	0x20, r18	; 32
    6880:	0f b6       	in	r0, 0x3f	; 63
    6882:	f8 94       	cli
    6884:	fa 9a       	sbi	0x1f, 2	; 31
    6886:	f9 9a       	sbi	0x1f, 1	; 31
    6888:	0f be       	out	0x3f, r0	; 63
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	08 95       	ret

0000688e <eeprom_write_dword>:
    688e:	24 2f       	mov	r18, r20
    6890:	0e 94 3a 34 	call	0x6874	; 0x6874 <eeprom_write_r18>
    6894:	25 2f       	mov	r18, r21
    6896:	0e 94 3a 34 	call	0x6874	; 0x6874 <eeprom_write_r18>
    689a:	0c 94 4f 34 	jmp	0x689e	; 0x689e <eeprom_write_word>

0000689e <eeprom_write_word>:
    689e:	0e 94 39 34 	call	0x6872	; 0x6872 <eeprom_write_byte>
    68a2:	27 2f       	mov	r18, r23
    68a4:	0c 94 3a 34 	jmp	0x6874	; 0x6874 <eeprom_write_r18>

000068a8 <eeprom_read_block>:
    68a8:	dc 01       	movw	r26, r24
    68aa:	cb 01       	movw	r24, r22

000068ac <eeprom_read_blraw>:
    68ac:	fc 01       	movw	r30, r24
    68ae:	f9 99       	sbic	0x1f, 1	; 31
    68b0:	fe cf       	rjmp	.-4      	; 0x68ae <eeprom_read_blraw+0x2>
    68b2:	06 c0       	rjmp	.+12     	; 0x68c0 <eeprom_read_blraw+0x14>
    68b4:	f2 bd       	out	0x22, r31	; 34
    68b6:	e1 bd       	out	0x21, r30	; 33
    68b8:	f8 9a       	sbi	0x1f, 0	; 31
    68ba:	31 96       	adiw	r30, 0x01	; 1
    68bc:	00 b4       	in	r0, 0x20	; 32
    68be:	0d 92       	st	X+, r0
    68c0:	41 50       	subi	r20, 0x01	; 1
    68c2:	50 40       	sbci	r21, 0x00	; 0
    68c4:	b8 f7       	brcc	.-18     	; 0x68b4 <eeprom_read_blraw+0x8>
    68c6:	08 95       	ret

000068c8 <__prologue_saves__>:
    68c8:	2f 92       	push	r2
    68ca:	3f 92       	push	r3
    68cc:	4f 92       	push	r4
    68ce:	5f 92       	push	r5
    68d0:	6f 92       	push	r6
    68d2:	7f 92       	push	r7
    68d4:	8f 92       	push	r8
    68d6:	9f 92       	push	r9
    68d8:	af 92       	push	r10
    68da:	bf 92       	push	r11
    68dc:	cf 92       	push	r12
    68de:	df 92       	push	r13
    68e0:	ef 92       	push	r14
    68e2:	ff 92       	push	r15
    68e4:	0f 93       	push	r16
    68e6:	1f 93       	push	r17
    68e8:	cf 93       	push	r28
    68ea:	df 93       	push	r29
    68ec:	cd b7       	in	r28, 0x3d	; 61
    68ee:	de b7       	in	r29, 0x3e	; 62
    68f0:	ca 1b       	sub	r28, r26
    68f2:	db 0b       	sbc	r29, r27
    68f4:	0f b6       	in	r0, 0x3f	; 63
    68f6:	f8 94       	cli
    68f8:	de bf       	out	0x3e, r29	; 62
    68fa:	0f be       	out	0x3f, r0	; 63
    68fc:	cd bf       	out	0x3d, r28	; 61
    68fe:	09 94       	ijmp

00006900 <__epilogue_restores__>:
    6900:	2a 88       	ldd	r2, Y+18	; 0x12
    6902:	39 88       	ldd	r3, Y+17	; 0x11
    6904:	48 88       	ldd	r4, Y+16	; 0x10
    6906:	5f 84       	ldd	r5, Y+15	; 0x0f
    6908:	6e 84       	ldd	r6, Y+14	; 0x0e
    690a:	7d 84       	ldd	r7, Y+13	; 0x0d
    690c:	8c 84       	ldd	r8, Y+12	; 0x0c
    690e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6910:	aa 84       	ldd	r10, Y+10	; 0x0a
    6912:	b9 84       	ldd	r11, Y+9	; 0x09
    6914:	c8 84       	ldd	r12, Y+8	; 0x08
    6916:	df 80       	ldd	r13, Y+7	; 0x07
    6918:	ee 80       	ldd	r14, Y+6	; 0x06
    691a:	fd 80       	ldd	r15, Y+5	; 0x05
    691c:	0c 81       	ldd	r16, Y+4	; 0x04
    691e:	1b 81       	ldd	r17, Y+3	; 0x03
    6920:	aa 81       	ldd	r26, Y+2	; 0x02
    6922:	b9 81       	ldd	r27, Y+1	; 0x01
    6924:	ce 0f       	add	r28, r30
    6926:	d1 1d       	adc	r29, r1
    6928:	0f b6       	in	r0, 0x3f	; 63
    692a:	f8 94       	cli
    692c:	de bf       	out	0x3e, r29	; 62
    692e:	0f be       	out	0x3f, r0	; 63
    6930:	cd bf       	out	0x3d, r28	; 61
    6932:	ed 01       	movw	r28, r26
    6934:	08 95       	ret

00006936 <__do_global_dtors>:
    6936:	11 e0       	ldi	r17, 0x01	; 1
    6938:	c7 e1       	ldi	r28, 0x17	; 23
    693a:	d1 e0       	ldi	r29, 0x01	; 1
    693c:	04 c0       	rjmp	.+8      	; 0x6946 <__do_global_dtors+0x10>
    693e:	fe 01       	movw	r30, r28
    6940:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__tablejump2__>
    6944:	21 96       	adiw	r28, 0x01	; 1
    6946:	c8 31       	cpi	r28, 0x18	; 24
    6948:	d1 07       	cpc	r29, r17
    694a:	c9 f7       	brne	.-14     	; 0x693e <__do_global_dtors+0x8>
    694c:	f8 94       	cli

0000694e <__stop_program>:
    694e:	ff cf       	rjmp	.-2      	; 0x694e <__stop_program>
