
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00005a3a  00005aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a3a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028e  008002e2  008002e2  00005cd0  2**0
                  ALLOC
  3 .eeprom       000002e8  00810000  00810000  00005cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006014  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000460  00000000  00000000  00006058  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005fcf  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000173c  00000000  00000000  0000c487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003eab  00000000  00000000  0000dbc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c84  00000000  00000000  00011a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f54  00000000  00000000  000126f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004ce6  00000000  00000000  00014648  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  0001932e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__dtors_end>
       4:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__vector_5>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_8>
      24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_11>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_14>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_18>
      4c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_19>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_21>
      58:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      5c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      60:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      68:	4c 01       	movw	r8, r24
      6a:	57 01       	movw	r10, r14
      6c:	62 01       	movw	r12, r4
      6e:	6d 01       	movw	r12, r26
      70:	78 01       	movw	r14, r16
      72:	83 01       	movw	r16, r6
      74:	ef 01       	movw	r28, r30
      76:	8e 01       	movw	r16, r28
      78:	ef 01       	movw	r28, r30
      7a:	ef 01       	movw	r28, r30
      7c:	ef 01       	movw	r28, r30
      7e:	99 01       	movw	r18, r18
      80:	a4 01       	movw	r20, r8
      82:	b1 01       	movw	r22, r2
      84:	be 01       	movw	r22, r28
      86:	cb 01       	movw	r24, r22
      88:	d8 01       	movw	r26, r16
      8a:	e5 01       	movw	r28, r10
      8c:	fa 01       	movw	r30, r20
      8e:	fe 01       	movw	r30, r28
      90:	02 02       	muls	r16, r18
      92:	06 02       	muls	r16, r22
      94:	0a 02       	muls	r16, r26
      96:	0e 02       	muls	r16, r30
      98:	28 02       	muls	r18, r24
      9a:	12 02       	muls	r17, r18
      9c:	28 02       	muls	r18, r24
      9e:	28 02       	muls	r18, r24
      a0:	28 02       	muls	r18, r24
      a2:	13 02       	muls	r17, r19
      a4:	17 02       	muls	r17, r23
      a6:	1c 02       	muls	r17, r28
      a8:	20 02       	muls	r18, r16
      aa:	24 02       	muls	r18, r20
      ac:	3a 02       	muls	r19, r26
      ae:	40 02       	muls	r20, r16
      b0:	46 02       	muls	r20, r22
      b2:	4c 02       	muls	r20, r28
      b4:	52 02       	muls	r21, r18
      b6:	58 02       	muls	r21, r24
      b8:	81 02       	muls	r24, r17
      ba:	5e 02       	muls	r21, r30
      bc:	81 02       	muls	r24, r17
      be:	81 02       	muls	r24, r17
      c0:	81 02       	muls	r24, r17
      c2:	64 02       	muls	r22, r20
      c4:	6a 02       	muls	r22, r26
      c6:	70 02       	muls	r23, r16
      c8:	76 02       	muls	r23, r22
      ca:	7c 02       	muls	r23, r28
      cc:	cf 0d       	add	r28, r15
      ce:	cf 0d       	add	r28, r15
      d0:	cf 0d       	add	r28, r15
      d2:	cf 0d       	add	r28, r15
      d4:	cf 0d       	add	r28, r15
      d6:	cf 0d       	add	r28, r15
      d8:	22 0e       	add	r2, r18
      da:	22 0e       	add	r2, r18
      dc:	ed 0d       	add	r30, r13
      de:	22 0e       	add	r2, r18
      e0:	22 0e       	add	r2, r18
      e2:	22 0e       	add	r2, r18
      e4:	22 0e       	add	r2, r18
      e6:	22 0e       	add	r2, r18
      e8:	22 0e       	add	r2, r18
      ea:	22 0e       	add	r2, r18
      ec:	22 0e       	add	r2, r18
      ee:	ed 0d       	add	r30, r13
      f0:	ed 0d       	add	r30, r13
      f2:	bb 0d       	add	r27, r11
      f4:	c5 0d       	add	r28, r5
      f6:	ef 10       	cpse	r14, r15
      f8:	1f 11       	cpse	r17, r15
      fa:	3b 11       	cpse	r19, r11
      fc:	91 12       	cpse	r9, r17
      fe:	91 12       	cpse	r9, r17
     100:	43 11       	cpse	r20, r3
     102:	7e 11       	cpse	r23, r14
     104:	de 11       	cpse	r29, r14
     106:	0a 12       	cpse	r0, r26
     108:	12 12       	cpse	r1, r18
     10a:	1a 12       	cpse	r1, r26
     10c:	22 12       	cpse	r2, r18
     10e:	4f 12       	cpse	r4, r31
     110:	70 20       	and	r7, r0
     112:	34 20       	and	r3, r4
     114:	60 20       	and	r6, r0
     116:	78 20       	and	r7, r8
     118:	64 20       	and	r6, r4
     11a:	78 20       	and	r7, r8
     11c:	44 20       	and	r4, r4
     11e:	30 20       	and	r3, r0
     120:	3c 20       	and	r3, r12
     122:	40 20       	and	r4, r0
     124:	78 20       	and	r7, r8
     126:	54 20       	and	r5, r4
     128:	28 20       	and	r2, r8
     12a:	58 20       	and	r5, r8
     12c:	24 20       	and	r2, r4
     12e:	38 20       	and	r3, r8
     130:	fc 1f       	adc	r31, r28
     132:	00 20       	and	r0, r0
     134:	04 20       	and	r0, r4
     136:	08 20       	and	r0, r8
     138:	0c 20       	and	r0, r12
     13a:	10 20       	and	r1, r0
     13c:	14 20       	and	r1, r4
     13e:	18 20       	and	r1, r8
     140:	1c 20       	and	r1, r12
     142:	20 20       	and	r2, r0
     144:	48 20       	and	r4, r8
     146:	4c 20       	and	r4, r12
     148:	74 20       	and	r7, r4
     14a:	50 20       	and	r5, r0
     14c:	78 20       	and	r7, r8
     14e:	2c 20       	and	r2, r12
     150:	68 20       	and	r6, r8
     152:	7c 20       	and	r7, r12
     154:	98 1f       	adc	r25, r24
     156:	9c 1f       	adc	r25, r28
     158:	a0 1f       	adc	r26, r16
     15a:	a4 1f       	adc	r26, r20
     15c:	a8 1f       	adc	r26, r24
     15e:	ac 1f       	adc	r26, r28
     160:	b0 1f       	adc	r27, r16
     162:	b4 1f       	adc	r27, r20
     164:	b8 1f       	adc	r27, r24
     166:	bc 1f       	adc	r27, r28
     168:	c0 1f       	adc	r28, r16
     16a:	c4 1f       	adc	r28, r20
     16c:	c8 1f       	adc	r28, r24
     16e:	cc 1f       	adc	r28, r28
     170:	d0 1f       	adc	r29, r16
     172:	d4 1f       	adc	r29, r20
     174:	d8 1f       	adc	r29, r24
     176:	dc 1f       	adc	r29, r28
     178:	e0 1f       	adc	r30, r16
     17a:	e4 1f       	adc	r30, r20
     17c:	e8 1f       	adc	r30, r24
     17e:	ec 1f       	adc	r30, r28
     180:	f0 1f       	adc	r31, r16
     182:	f4 1f       	adc	r31, r20
     184:	f8 1f       	adc	r31, r24
     186:	78 20       	and	r7, r8
     188:	78 20       	and	r7, r8
     18a:	78 20       	and	r7, r8
     18c:	78 20       	and	r7, r8
     18e:	5c 20       	and	r5, r12
     190:	78 20       	and	r7, r8
     192:	78 20       	and	r7, r8
     194:	78 20       	and	r7, r8
     196:	78 20       	and	r7, r8
     198:	78 20       	and	r7, r8
     19a:	78 20       	and	r7, r8
     19c:	78 20       	and	r7, r8
     19e:	78 20       	and	r7, r8
     1a0:	78 20       	and	r7, r8
     1a2:	78 20       	and	r7, r8
     1a4:	78 20       	and	r7, r8
     1a6:	78 20       	and	r7, r8
     1a8:	78 20       	and	r7, r8
     1aa:	78 20       	and	r7, r8
     1ac:	78 20       	and	r7, r8
     1ae:	78 20       	and	r7, r8
     1b0:	78 20       	and	r7, r8
     1b2:	78 20       	and	r7, r8
     1b4:	78 20       	and	r7, r8
     1b6:	78 20       	and	r7, r8
     1b8:	78 20       	and	r7, r8
     1ba:	78 20       	and	r7, r8
     1bc:	78 20       	and	r7, r8
     1be:	78 20       	and	r7, r8
     1c0:	78 20       	and	r7, r8
     1c2:	78 20       	and	r7, r8
     1c4:	78 20       	and	r7, r8
     1c6:	78 20       	and	r7, r8
     1c8:	6c 20       	and	r6, r12
     1ca:	05 a8       	ldd	r0, Z+53	; 0x35
     1cc:	4c cd       	rjmp	.-1384   	; 0xfffffc66 <__eeprom_end+0xff7ef97e>
     1ce:	b2 d4       	rcall	.+2404   	; 0xb34 <_Z16i2c_device_writehhPhh+0xbe>
     1d0:	4e b9       	out	0x0e, r20	; 14
     1d2:	38 36       	cpi	r19, 0x68	; 104
     1d4:	a9 02       	muls	r26, r25
     1d6:	0c 50       	subi	r16, 0x0C	; 12
     1d8:	b9 91       	ld	r27, Y+
     1da:	86 88       	ldd	r8, Z+22	; 0x16
     1dc:	08 3c       	cpi	r16, 0xC8	; 200
     1de:	a6 aa       	std	Z+54, r10	; 0x36
     1e0:	aa 2a       	or	r10, r26
     1e2:	be 00       	.word	0x00be	; ????
     1e4:	00 00       	nop
     1e6:	80 3f       	cpi	r24, 0xF0	; 240

000001e8 <__ctors_start>:
     1e8:	77 1f       	adc	r23, r23

000001ea <__ctors_end>:
     1ea:	88 1f       	adc	r24, r24

000001ec <__dtors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d8 e0       	ldi	r29, 0x08	; 8
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ea e3       	ldi	r30, 0x3A	; 58
     200:	fa e5       	ldi	r31, 0x5A	; 90
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a2 3e       	cpi	r26, 0xE2	; 226
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	25 e0       	ldi	r18, 0x05	; 5
     210:	a2 ee       	ldi	r26, 0xE2	; 226
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a0 37       	cpi	r26, 0x70	; 112
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>

0000021e <__do_global_ctors>:
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	c5 ef       	ldi	r28, 0xF5	; 245
     222:	d0 e0       	ldi	r29, 0x00	; 0
     224:	04 c0       	rjmp	.+8      	; 0x22e <__do_global_ctors+0x10>
     226:	21 97       	sbiw	r28, 0x01	; 1
     228:	fe 01       	movw	r30, r28
     22a:	0e 94 03 28 	call	0x5006	; 0x5006 <__tablejump2__>
     22e:	c4 3f       	cpi	r28, 0xF4	; 244
     230:	d1 07       	cpc	r29, r17
     232:	c9 f7       	brne	.-14     	; 0x226 <__do_global_ctors+0x8>
     234:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <main>
     238:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__do_global_dtors>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <month_length>:
     240:	62 30       	cpi	r22, 0x02	; 2
     242:	21 f4       	brne	.+8      	; 0x24c <month_length+0xc>
     244:	0e 94 2d 01 	call	0x25a	; 0x25a <is_leap_year>
     248:	84 5e       	subi	r24, 0xE4	; 228
     24a:	08 95       	ret
     24c:	68 30       	cpi	r22, 0x08	; 8
     24e:	08 f0       	brcs	.+2      	; 0x252 <month_length+0x12>
     250:	6f 5f       	subi	r22, 0xFF	; 255
     252:	61 70       	andi	r22, 0x01	; 1
     254:	8e e1       	ldi	r24, 0x1E	; 30
     256:	86 0f       	add	r24, r22
     258:	08 95       	ret

0000025a <is_leap_year>:
     25a:	9c 01       	movw	r18, r24
     25c:	23 70       	andi	r18, 0x03	; 3
     25e:	33 27       	eor	r19, r19
     260:	23 2b       	or	r18, r19
     262:	59 f4       	brne	.+22     	; 0x27a <is_leap_year+0x20>
     264:	64 e6       	ldi	r22, 0x64	; 100
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
     26c:	89 2b       	or	r24, r25
     26e:	39 f4       	brne	.+14     	; 0x27e <is_leap_year+0x24>
     270:	63 70       	andi	r22, 0x03	; 3
     272:	77 27       	eor	r23, r23
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	67 2b       	or	r22, r23
     278:	19 f0       	breq	.+6      	; 0x280 <is_leap_year+0x26>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	08 95       	ret
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	08 95       	ret

00000282 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	fc 01       	movw	r30, r24
     286:	32 97       	sbiw	r30, 0x02	; 2
     288:	e2 31       	cpi	r30, 0x12	; 18
     28a:	f1 05       	cpc	r31, r1
     28c:	08 f0       	brcs	.+2      	; 0x290 <_Z7pinModehh+0xe>
     28e:	a7 c0       	rjmp	.+334    	; 0x3de <_Z7pinModehh+0x15c>
     290:	ec 5c       	subi	r30, 0xCC	; 204
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     298:	61 30       	cpi	r22, 0x01	; 1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     29c:	52 9a       	sbi	0x0a, 2	; 10
     29e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2a0:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2a2:	63 30       	cpi	r22, 0x03	; 3
     2a4:	11 f4       	brne	.+4      	; 0x2aa <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2a6:	5a 9a       	sbi	0x0b, 2	; 11
     2a8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2aa:	5a 98       	cbi	0x0b, 2	; 11
     2ac:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2ae:	61 30       	cpi	r22, 0x01	; 1
     2b0:	11 f4       	brne	.+4      	; 0x2b6 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2b2:	53 9a       	sbi	0x0a, 3	; 10
     2b4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2b6:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2b8:	63 30       	cpi	r22, 0x03	; 3
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2bc:	5b 9a       	sbi	0x0b, 3	; 11
     2be:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2c0:	5b 98       	cbi	0x0b, 3	; 11
     2c2:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     2c4:	61 30       	cpi	r22, 0x01	; 1
     2c6:	11 f4       	brne	.+4      	; 0x2cc <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     2c8:	54 9a       	sbi	0x0a, 4	; 10
     2ca:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     2cc:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     2ce:	63 30       	cpi	r22, 0x03	; 3
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     2d2:	5c 9a       	sbi	0x0b, 4	; 11
     2d4:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     2d6:	5c 98       	cbi	0x0b, 4	; 11
     2d8:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     2da:	61 30       	cpi	r22, 0x01	; 1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     2de:	55 9a       	sbi	0x0a, 5	; 10
     2e0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     2e2:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     2e4:	63 30       	cpi	r22, 0x03	; 3
     2e6:	11 f4       	brne	.+4      	; 0x2ec <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     2e8:	5d 9a       	sbi	0x0b, 5	; 11
     2ea:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     2ec:	5d 98       	cbi	0x0b, 5	; 11
     2ee:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     2f4:	56 9a       	sbi	0x0a, 6	; 10
     2f6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     2f8:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     2fa:	63 30       	cpi	r22, 0x03	; 3
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     2fe:	5e 9a       	sbi	0x0b, 6	; 11
     300:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     302:	5e 98       	cbi	0x0b, 6	; 11
     304:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	11 f4       	brne	.+4      	; 0x30e <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     30a:	57 9a       	sbi	0x0a, 7	; 10
     30c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     30e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	11 f4       	brne	.+4      	; 0x318 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     314:	5f 9a       	sbi	0x0b, 7	; 11
     316:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     318:	5f 98       	cbi	0x0b, 7	; 11
     31a:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     31c:	61 30       	cpi	r22, 0x01	; 1
     31e:	11 f4       	brne	.+4      	; 0x324 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB1);
     320:	21 9a       	sbi	0x04, 1	; 4
     322:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     324:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     326:	63 30       	cpi	r22, 0x03	; 3
     328:	11 f4       	brne	.+4      	; 0x32e <_Z7pinModehh+0xac>
				{
					PORTD  |= (1 << PORTB1);
     32a:	59 9a       	sbi	0x0b, 1	; 11
     32c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB1);
     32e:	59 98       	cbi	0x0b, 1	; 11
     330:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	11 f4       	brne	.+4      	; 0x33a <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB5);
     336:	25 9a       	sbi	0x04, 5	; 4
     338:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     33a:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	11 f4       	brne	.+4      	; 0x344 <_Z7pinModehh+0xc2>
				{
					PORTD  |= (1 << PORTB5);
     340:	5d 9a       	sbi	0x0b, 5	; 11
     342:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     344:	5d 98       	cbi	0x0b, 5	; 11
     346:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <_Z7pinModehh+0xce>
			{
				DDRC  |= (1 << PORTC0);
     34c:	38 9a       	sbi	0x07, 0	; 7
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_Z7pinModehh+0xe4>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     350:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	19 f4       	brne	.+6      	; 0x35c <_Z7pinModehh+0xda>
				{
					PORTC  |= (1 << PORTC0);
     356:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     358:	39 98       	cbi	0x07, 1	; 7
     35a:	0a c0       	rjmp	.+20     	; 0x370 <_Z7pinModehh+0xee>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     35c:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     35e:	39 98       	cbi	0x07, 1	; 7
     360:	0a c0       	rjmp	.+20     	; 0x376 <_Z7pinModehh+0xf4>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     362:	61 30       	cpi	r22, 0x01	; 1
     364:	11 f4       	brne	.+4      	; 0x36a <_Z7pinModehh+0xe8>
			{
				DDRC  |= (1 << PORTC1);
     366:	39 9a       	sbi	0x07, 1	; 7
     368:	0b c0       	rjmp	.+22     	; 0x380 <_Z7pinModehh+0xfe>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     36a:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     36c:	63 30       	cpi	r22, 0x03	; 3
     36e:	19 f4       	brne	.+6      	; 0x376 <_Z7pinModehh+0xf4>
				{
					PORTC  |= (1 << PORTC1);
     370:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     372:	3a 98       	cbi	0x07, 2	; 7
     374:	0a c0       	rjmp	.+20     	; 0x38a <_Z7pinModehh+0x108>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     376:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     378:	3a 98       	cbi	0x07, 2	; 7
     37a:	0a c0       	rjmp	.+20     	; 0x390 <_Z7pinModehh+0x10e>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     37c:	61 30       	cpi	r22, 0x01	; 1
     37e:	11 f4       	brne	.+4      	; 0x384 <_Z7pinModehh+0x102>
			{
				DDRC  |= (1 << PORTC2);
     380:	3a 9a       	sbi	0x07, 2	; 7
     382:	0b c0       	rjmp	.+22     	; 0x39a <_Z7pinModehh+0x118>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     384:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     386:	63 30       	cpi	r22, 0x03	; 3
     388:	19 f4       	brne	.+6      	; 0x390 <_Z7pinModehh+0x10e>
				{
					PORTC  |= (1 << PORTC2);
     38a:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     38c:	3b 98       	cbi	0x07, 3	; 7
     38e:	0a c0       	rjmp	.+20     	; 0x3a4 <_Z7pinModehh+0x122>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     390:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     392:	3b 98       	cbi	0x07, 3	; 7
     394:	0a c0       	rjmp	.+20     	; 0x3aa <_Z7pinModehh+0x128>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     396:	61 30       	cpi	r22, 0x01	; 1
     398:	11 f4       	brne	.+4      	; 0x39e <_Z7pinModehh+0x11c>
			{
				DDRC  |= (1 << PORTC3);
     39a:	3b 9a       	sbi	0x07, 3	; 7
     39c:	0b c0       	rjmp	.+22     	; 0x3b4 <_Z7pinModehh+0x132>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     39e:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     3a0:	63 30       	cpi	r22, 0x03	; 3
     3a2:	19 f4       	brne	.+6      	; 0x3aa <_Z7pinModehh+0x128>
				{
					PORTC  |= (1 << PORTC3);
     3a4:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3a6:	3c 98       	cbi	0x07, 4	; 7
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <_Z7pinModehh+0x13c>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     3aa:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3ac:	3c 98       	cbi	0x07, 4	; 7
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <_Z7pinModehh+0x142>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     3b0:	61 30       	cpi	r22, 0x01	; 1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <_Z7pinModehh+0x136>
			{
				DDRC  |= (1 << PORTC4);
     3b4:	3c 9a       	sbi	0x07, 4	; 7
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <_Z7pinModehh+0x14c>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3b8:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     3ba:	63 30       	cpi	r22, 0x03	; 3
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <_Z7pinModehh+0x142>
				{
					PORTC  |= (1 << PORTC4);
     3be:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3c0:	3d 98       	cbi	0x07, 5	; 7
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <_Z7pinModehh+0x156>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     3c4:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3c6:	3d 98       	cbi	0x07, 5	; 7
     3c8:	09 c0       	rjmp	.+18     	; 0x3dc <_Z7pinModehh+0x15a>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x150>
			{
				DDRC  |= (1 << PORTC5);
     3ce:	3d 9a       	sbi	0x07, 5	; 7
     3d0:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3d2:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModehh+0x15a>
				{
					PORTC  |= (1 << PORTC5);
     3d8:	45 9a       	sbi	0x08, 5	; 8
     3da:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     3dc:	45 98       	cbi	0x08, 5	; 8
     3de:	08 95       	ret

000003e0 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	32 97       	sbiw	r30, 0x02	; 2
     3e6:	e0 31       	cpi	r30, 0x10	; 16
     3e8:	f1 05       	cpc	r31, r1
     3ea:	90 f5       	brcc	.+100    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     3ec:	ea 5b       	subi	r30, 0xBA	; 186
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     3f4:	29 b1       	in	r18, 0x09	; 9
     3f6:	24 70       	andi	r18, 0x04	; 4
     3f8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     3fa:	2c c0       	rjmp	.+88     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     3fc:	29 b1       	in	r18, 0x09	; 9
     3fe:	28 70       	andi	r18, 0x08	; 8
     400:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     402:	28 c0       	rjmp	.+80     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     404:	29 b1       	in	r18, 0x09	; 9
     406:	20 71       	andi	r18, 0x10	; 16
     408:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     40a:	24 c0       	rjmp	.+72     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     40c:	29 b1       	in	r18, 0x09	; 9
     40e:	20 72       	andi	r18, 0x20	; 32
     410:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     412:	20 c0       	rjmp	.+64     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     414:	29 b1       	in	r18, 0x09	; 9
     416:	20 74       	andi	r18, 0x40	; 64
     418:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     41a:	1c c0       	rjmp	.+56     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     41c:	29 b1       	in	r18, 0x09	; 9
     41e:	20 78       	andi	r18, 0x80	; 128
     420:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     422:	18 c0       	rjmp	.+48     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     424:	83 b1       	in	r24, 0x03	; 3
		}

		case D13:
		{
			result = PINB & (1 << PORTB5);
     426:	23 b1       	in	r18, 0x03	; 3
     428:	20 72       	andi	r18, 0x20	; 32
     42a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     42c:	13 c0       	rjmp	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     42e:	86 b1       	in	r24, 0x06	; 6
     430:	28 2f       	mov	r18, r24
     432:	21 70       	andi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     436:	0e c0       	rjmp	.+28     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     438:	26 b1       	in	r18, 0x06	; 6
     43a:	22 70       	andi	r18, 0x02	; 2
     43c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     440:	26 b1       	in	r18, 0x06	; 6
     442:	24 70       	andi	r18, 0x04	; 4
     444:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     448:	26 b1       	in	r18, 0x06	; 6
     44a:	28 70       	andi	r18, 0x08	; 8
     44c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	23 2b       	or	r18, r19
     458:	09 f4       	brne	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	80 e0       	ldi	r24, 0x00	; 0
}
     45c:	08 95       	ret

0000045e <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	32 97       	sbiw	r30, 0x02	; 2
     464:	e0 31       	cpi	r30, 0x10	; 16
     466:	f1 05       	cpc	r31, r1
     468:	08 f0       	brcs	.+2      	; 0x46c <_Z12digitalWritehh+0xe>
     46a:	4b c0       	rjmp	.+150    	; 0x502 <_Z12digitalWritehh+0xa4>
     46c:	ea 5a       	subi	r30, 0xAA	; 170
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
	{
		case D2:
		{
			if(value)
     474:	66 23       	and	r22, r22
     476:	11 f0       	breq	.+4      	; 0x47c <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     478:	5a 9a       	sbi	0x0b, 2	; 11
     47a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     47c:	5a 98       	cbi	0x0b, 2	; 11
     47e:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     480:	66 23       	and	r22, r22
     482:	11 f0       	breq	.+4      	; 0x488 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     484:	5b 9a       	sbi	0x0b, 3	; 11
     486:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     488:	5b 98       	cbi	0x0b, 3	; 11
     48a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     48c:	66 23       	and	r22, r22
     48e:	11 f0       	breq	.+4      	; 0x494 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     490:	5c 9a       	sbi	0x0b, 4	; 11
     492:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     498:	66 23       	and	r22, r22
     49a:	11 f0       	breq	.+4      	; 0x4a0 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     49c:	5d 9a       	sbi	0x0b, 5	; 11
     49e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     4a0:	5d 98       	cbi	0x0b, 5	; 11
     4a2:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     4a4:	66 23       	and	r22, r22
     4a6:	11 f0       	breq	.+4      	; 0x4ac <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     4a8:	5e 9a       	sbi	0x0b, 6	; 11
     4aa:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     4ac:	5e 98       	cbi	0x0b, 6	; 11
     4ae:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     4b0:	66 23       	and	r22, r22
     4b2:	11 f0       	breq	.+4      	; 0x4b8 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     4b4:	5f 9a       	sbi	0x0b, 7	; 11
     4b6:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     4b8:	5f 98       	cbi	0x0b, 7	; 11
     4ba:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     4bc:	66 23       	and	r22, r22
     4be:	11 f0       	breq	.+4      	; 0x4c4 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB1);
     4c0:	29 9a       	sbi	0x05, 1	; 5
     4c2:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     4c4:	29 98       	cbi	0x05, 1	; 5
     4c6:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     4c8:	66 23       	and	r22, r22
     4ca:	11 f0       	breq	.+4      	; 0x4d0 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB5);
     4cc:	2d 9a       	sbi	0x05, 5	; 5
     4ce:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     4d0:	2d 98       	cbi	0x05, 5	; 5
     4d2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     4d4:	66 23       	and	r22, r22
     4d6:	11 f0       	breq	.+4      	; 0x4dc <_Z12digitalWritehh+0x7e>
			{
				PORTC  |= (1 << PORTC0);
     4d8:	40 9a       	sbi	0x08, 0	; 8
     4da:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     4dc:	40 98       	cbi	0x08, 0	; 8
     4de:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     4e0:	66 23       	and	r22, r22
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <_Z12digitalWritehh+0x8a>
			{
				PORTC  |= (1 << PORTC1);
     4e4:	41 9a       	sbi	0x08, 1	; 8
     4e6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     4e8:	41 98       	cbi	0x08, 1	; 8
     4ea:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     4ec:	66 23       	and	r22, r22
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC2);
     4f0:	42 9a       	sbi	0x08, 2	; 8
     4f2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     4f4:	42 98       	cbi	0x08, 2	; 8
     4f6:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     4f8:	66 23       	and	r22, r22
     4fa:	11 f0       	breq	.+4      	; 0x500 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC3);
     4fc:	43 9a       	sbi	0x08, 3	; 8
     4fe:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     500:	43 98       	cbi	0x08, 3	; 8
     502:	08 95       	ret

00000504 <_Z16sendEEPROMStringPc>:
char EEMEM ee_textErrStartInPast[sizeof(TEXT_ERR_START_IN_PAST)];
char EEMEM ee_textErrInvalidTime[sizeof(TEXT_ERR_INVALID_TIME)];
char EEMEM ee_textErrTimeInPast[sizeof(TEXT_ERR_TIME_IN_PAST)];

void sendEEPROMString(char ee_addr[])
{
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	ec 01       	movw	r28, r24
	char c = eeprom_read_byte((uint8_t*)&ee_addr[0]);
     50c:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
     510:	18 2f       	mov	r17, r24
	int i = 0;

	while(c)
     512:	88 23       	and	r24, r24
     514:	89 f0       	breq	.+34     	; 0x538 <_Z16sendEEPROMStringPc+0x34>
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	03 c0       	rjmp	.+6      	; 0x520 <_Z16sendEEPROMStringPc+0x1c>
     51a:	21 96       	adiw	r28, 0x01	; 1
     51c:	11 23       	and	r17, r17
     51e:	61 f0       	breq	.+24     	; 0x538 <_Z16sendEEPROMStringPc+0x34>
	{
		lb_echo_char(c);
     520:	81 2f       	mov	r24, r17
     522:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z12lb_echo_charh>
		c = eeprom_read_byte((uint8_t*)&ee_addr[++i]);
     526:	ce 01       	movw	r24, r28
     528:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
     52c:	18 2f       	mov	r17, r24

		while(linkbusTxInProgress())
     52e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_Z19linkbusTxInProgressv>
     532:	81 11       	cpse	r24, r1
     534:	fc cf       	rjmp	.-8      	; 0x52e <_Z16sendEEPROMStringPc+0x2a>
     536:	f1 cf       	rjmp	.-30     	; 0x51a <_Z16sendEEPROMStringPc+0x16>
		{
			;
		}
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{	
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     540:	9c 01       	movw	r18, r24
     542:	2e 5f       	subi	r18, 0xFE	; 254
     544:	3f 4f       	sbci	r19, 0xFF	; 255
     546:	2b 33       	cpi	r18, 0x3B	; 59
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	38 07       	cpc	r19, r24
     54c:	10 f0       	brcs	.+4      	; 0x552 <_Z8setAttenj+0x12>
     54e:	2b e3       	ldi	r18, 0x3B	; 59
     550:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     552:	ad ec       	ldi	r26, 0xCD	; 205
     554:	bc ec       	ldi	r27, 0xCC	; 204
     556:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
     55e:	96 95       	lsr	r25
     560:	87 95       	ror	r24
     562:	9c 01       	movw	r18, r24
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
	att /= 5;
     570:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
     574:	96 95       	lsr	r25
     576:	87 95       	ror	r24
     578:	96 95       	lsr	r25
     57a:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     57c:	9c 01       	movw	r18, r24
     57e:	20 73       	andi	r18, 0x30	; 48
     580:	33 27       	eor	r19, r19
     582:	32 95       	swap	r19
     584:	22 95       	swap	r18
     586:	2f 70       	andi	r18, 0x0F	; 15
     588:	23 27       	eor	r18, r19
     58a:	3f 70       	andi	r19, 0x0F	; 15
     58c:	23 27       	eor	r18, r19
     58e:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <__data_end>
	
	pattern = PORTC & 0xF0;
     592:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     594:	8f 70       	andi	r24, 0x0F	; 15
     596:	90 7f       	andi	r25, 0xF0	; 240
     598:	89 2b       	or	r24, r25
     59a:	88 b9       	out	0x08, r24	; 8
	
	pattern = PORTD & 0xFC;
     59c:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     59e:	8c 7f       	andi	r24, 0xFC	; 252
     5a0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <__data_end>
     5a4:	89 2b       	or	r24, r25
     5a6:	8b b9       	out	0x0b, r24	; 11
     5a8:	08 95       	ret

000005aa <_Z10setupPortsv>:
}

void setupPorts(void)
{
	linkbus_disable();
     5aa:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);    
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	8e e0       	ldi	r24, 0x0E	; 14
     5b2:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT); 
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	8f e0       	ldi	r24, 0x0F	; 15
     5ba:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	80 e1       	ldi	r24, 0x10	; 16
     5c2:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e1       	ldi	r24, 0x11	; 17
     5ca:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
     5de:	08 95       	ret

000005e0 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	e4 2e       	mov	r14, r20
     5ee:	f5 2e       	mov	r15, r21
     5f0:	d6 2f       	mov	r29, r22
     5f2:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     5f4:	00 93 fa 02 	sts	0x02FA, r16	; 0x8002fa <_SAMPLING_FREQUENCY>
     5f8:	10 93 fb 02 	sts	0x02FB, r17	; 0x8002fb <_SAMPLING_FREQUENCY+0x1>
     5fc:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <_SAMPLING_FREQUENCY+0x2>
     600:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	41 e5       	ldi	r20, 0x51	; 81
     60a:	53 e4       	ldi	r21, 0x43	; 67
     60c:	6e 2d       	mov	r22, r14
     60e:	7f 2d       	mov	r23, r15
     610:	8d 2f       	mov	r24, r29
     612:	9c 2f       	mov	r25, r28
     614:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__gesf2>
     618:	18 16       	cp	r1, r24
     61a:	6c f0       	brlt	.+26     	; 0x636 <_ZN8GoertzelC1Eff+0x56>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	48 ec       	ldi	r20, 0xC8	; 200
     622:	52 e4       	ldi	r21, 0x42	; 66
     624:	6e 2d       	mov	r22, r14
     626:	7f 2d       	mov	r23, r15
     628:	8d 2f       	mov	r24, r29
     62a:	9c 2f       	mov	r25, r28
     62c:	0e 94 ed 24 	call	0x49da	; 0x49da <__cmpsf2>
     630:	88 23       	and	r24, r24
     632:	34 f0       	brlt	.+12     	; 0x640 <_ZN8GoertzelC1Eff+0x60>
     634:	09 c0       	rjmp	.+18     	; 0x648 <_ZN8GoertzelC1Eff+0x68>
     636:	e1 2c       	mov	r14, r1
     638:	f1 2c       	mov	r15, r1
     63a:	d1 e5       	ldi	r29, 0x51	; 81
     63c:	c3 e4       	ldi	r28, 0x43	; 67
     63e:	04 c0       	rjmp	.+8      	; 0x648 <_ZN8GoertzelC1Eff+0x68>
     640:	e1 2c       	mov	r14, r1
     642:	f1 2c       	mov	r15, r1
     644:	d8 ec       	ldi	r29, 0xC8	; 200
     646:	c2 e4       	ldi	r28, 0x42	; 66
     648:	6e 2d       	mov	r22, r14
     64a:	7f 2d       	mov	r23, r15
     64c:	8d 2f       	mov	r24, r29
     64e:	9c 2f       	mov	r25, r28
     650:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__fixsfsi>
     654:	70 93 f5 02 	sts	0x02F5, r23	; 0x8002f5 <_N+0x1>
     658:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     65c:	cb 01       	movw	r24, r22
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	0e 94 32 28 	call	0x5064	; 0x5064 <malloc>
     666:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <testData+0x1>
     66a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <testData>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     67c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <testData>
     680:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <testData+0x1>
     684:	0e 94 ca 28 	call	0x5194	; 0x5194 <free>
     688:	08 95       	ret

0000068a <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     68a:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <Q2>
     68e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <Q2+0x1>
     692:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <Q2+0x2>
     696:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <Q2+0x3>
	Q1 = 0;
     69a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <Q1>
     69e:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <Q1+0x1>
     6a2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <Q1+0x2>
     6a6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <Q1+0x3>
	_samplesReady = false;
     6aa:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_samplesReady>
     6ae:	08 95       	ret

000006b0 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     6b0:	8f 92       	push	r8
     6b2:	9f 92       	push	r9
     6b4:	af 92       	push	r10
     6b6:	bf 92       	push	r11
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
     6c6:	4a 01       	movw	r8, r20
     6c8:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     6ca:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <_N>
     6ce:	70 91 f5 02 	lds	r23, 0x02F5	; 0x8002f5 <_N+0x1>
     6d2:	07 2e       	mov	r0, r23
     6d4:	00 0c       	add	r0, r0
     6d6:	88 0b       	sbc	r24, r24
     6d8:	99 0b       	sbc	r25, r25
     6da:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__floatsisf>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     6e2:	80 92 f6 02 	sts	0x02F6, r8	; 0x8002f6 <_TARGET_FREQUENCY>
     6e6:	90 92 f7 02 	sts	0x02F7, r9	; 0x8002f7 <_TARGET_FREQUENCY+0x1>
     6ea:	a0 92 f8 02 	sts	0x02F8, r10	; 0x8002f8 <_TARGET_FREQUENCY+0x2>
     6ee:	b0 92 f9 02 	sts	0x02F9, r11	; 0x8002f9 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     6f2:	a5 01       	movw	r20, r10
     6f4:	94 01       	movw	r18, r8
     6f6:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     6fa:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <_SAMPLING_FREQUENCY>
     6fe:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <_SAMPLING_FREQUENCY+0x1>
     702:	40 91 fc 02 	lds	r20, 0x02FC	; 0x8002fc <_SAMPLING_FREQUENCY+0x2>
     706:	50 91 fd 02 	lds	r21, 0x02FD	; 0x8002fd <_SAMPLING_FREQUENCY+0x3>
     70a:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__divsf3>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	0e 94 81 24 	call	0x4902	; 0x4902 <__addsf3>
     71a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__fixsfsi>
     71e:	07 2e       	mov	r0, r23
     720:	00 0c       	add	r0, r0
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__floatsisf>
     72a:	2b ed       	ldi	r18, 0xDB	; 219
     72c:	3f e0       	ldi	r19, 0x0F	; 15
     72e:	49 ec       	ldi	r20, 0xC9	; 201
     730:	50 e4       	ldi	r21, 0x40	; 64
     732:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     736:	a7 01       	movw	r20, r14
     738:	96 01       	movw	r18, r12
     73a:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__divsf3>
     73e:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <cos>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	0e 94 81 24 	call	0x4902	; 0x4902 <__addsf3>
     74a:	60 93 f0 02 	sts	0x02F0, r22	; 0x8002f0 <g_coeff>
     74e:	70 93 f1 02 	sts	0x02F1, r23	; 0x8002f1 <g_coeff+0x1>
     752:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <g_coeff+0x2>
     756:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <g_coeff+0x3>
	ResetGoertzel();
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN8Goertzel13ResetGoertzelEv>
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	9f 90       	pop	r9
     772:	8f 90       	pop	r8
     774:	08 95       	ret

00000776 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     776:	8f 92       	push	r8
     778:	9f 92       	push	r9
     77a:	af 92       	push	r10
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     78c:	c0 90 ec 02 	lds	r12, 0x02EC	; 0x8002ec <Q1>
     790:	d0 90 ed 02 	lds	r13, 0x02ED	; 0x8002ed <Q1+0x1>
     794:	e0 90 ee 02 	lds	r14, 0x02EE	; 0x8002ee <Q1+0x2>
     798:	f0 90 ef 02 	lds	r15, 0x02EF	; 0x8002ef <Q1+0x3>
     79c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <g_coeff>
     7a0:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <g_coeff+0x1>
     7a4:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <g_coeff+0x2>
     7a8:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <g_coeff+0x3>
     7ac:	c7 01       	movw	r24, r14
     7ae:	b6 01       	movw	r22, r12
     7b0:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     7b4:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <Q2>
     7b8:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <Q2+0x1>
     7bc:	40 91 ea 02 	lds	r20, 0x02EA	; 0x8002ea <Q2+0x2>
     7c0:	50 91 eb 02 	lds	r21, 0x02EB	; 0x8002eb <Q2+0x3>
     7c4:	0e 94 80 24 	call	0x4900	; 0x4900 <__subsf3>
     7c8:	4b 01       	movw	r8, r22
     7ca:	5c 01       	movw	r10, r24
     7cc:	be 01       	movw	r22, r28
     7ce:	72 50       	subi	r23, 0x02	; 2
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__floatsisf>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 81 24 	call	0x4902	; 0x4902 <__addsf3>

	Q2 = Q1;
     7e8:	c0 92 e8 02 	sts	0x02E8, r12	; 0x8002e8 <Q2>
     7ec:	d0 92 e9 02 	sts	0x02E9, r13	; 0x8002e9 <Q2+0x1>
     7f0:	e0 92 ea 02 	sts	0x02EA, r14	; 0x8002ea <Q2+0x2>
     7f4:	f0 92 eb 02 	sts	0x02EB, r15	; 0x8002eb <Q2+0x3>
	Q1 = Q0;
     7f8:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <Q1>
     7fc:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <Q1+0x1>
     800:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <Q1+0x2>
     804:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <Q1+0x3>
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	bf 90       	pop	r11
     816:	af 90       	pop	r10
     818:	9f 90       	pop	r9
     81a:	8f 90       	pop	r8
     81c:	08 95       	ret

0000081e <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     81e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_samplesReady>
     822:	81 11       	cpse	r24, r1
     824:	27 c0       	rjmp	.+78     	; 0x874 <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     826:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <_index>
     82a:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <_index+0x1>
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <testData>
     836:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <testData+0x1>
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	71 83       	std	Z+1, r23	; 0x01
     840:	60 83       	st	Z, r22
	_index++;
     842:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_index>
     846:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <_index+0x1>
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <_index+0x1>
     850:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_index>
	if(_index >= _N)
     854:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <_N>
     858:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <_N+0x1>
     85c:	82 17       	cp	r24, r18
     85e:	93 07       	cpc	r25, r19
     860:	3c f0       	brlt	.+14     	; 0x870 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     862:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <_index+0x1>
     866:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_index>
		_samplesReady = true;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_samplesReady>
	}

	return(_samplesReady);
     870:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_samplesReady>
}
     874:	08 95       	ret

00000876 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     876:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_samplesReady>
     87a:	08 95       	ret

0000087c <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     87c:	4f 92       	push	r4
     87e:	5f 92       	push	r5
     880:	6f 92       	push	r6
     882:	7f 92       	push	r7
     884:	8f 92       	push	r8
     886:	9f 92       	push	r9
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     89e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_N>
     8a2:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_N+0x1>
     8a6:	18 16       	cp	r1, r24
     8a8:	19 06       	cpc	r1, r25
     8aa:	c4 f4       	brge	.+48     	; 0x8dc <_ZN8Goertzel10Magnitude2Ev+0x60>
     8ac:	c0 e0       	ldi	r28, 0x00	; 0
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     8b0:	ce 01       	movw	r24, r28
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <testData>
     8ba:	f0 91 e4 02 	lds	r31, 0x02E4	; 0x8002e4 <testData+0x1>
     8be:	e8 0f       	add	r30, r24
     8c0:	f9 1f       	adc	r31, r25
     8c2:	60 81       	ld	r22, Z
     8c4:	71 81       	ldd	r23, Z+1	; 0x01
     8c6:	c8 01       	movw	r24, r16
     8c8:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     8cc:	21 96       	adiw	r28, 0x01	; 1
     8ce:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_N>
     8d2:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_N+0x1>
     8d6:	c8 17       	cp	r28, r24
     8d8:	d9 07       	cpc	r29, r25
     8da:	54 f3       	brlt	.-44     	; 0x8b0 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     8dc:	80 90 ec 02 	lds	r8, 0x02EC	; 0x8002ec <Q1>
     8e0:	90 90 ed 02 	lds	r9, 0x02ED	; 0x8002ed <Q1+0x1>
     8e4:	a0 90 ee 02 	lds	r10, 0x02EE	; 0x8002ee <Q1+0x2>
     8e8:	b0 90 ef 02 	lds	r11, 0x02EF	; 0x8002ef <Q1+0x3>
     8ec:	c0 90 e8 02 	lds	r12, 0x02E8	; 0x8002e8 <Q2>
     8f0:	d0 90 e9 02 	lds	r13, 0x02E9	; 0x8002e9 <Q2+0x1>
     8f4:	e0 90 ea 02 	lds	r14, 0x02EA	; 0x8002ea <Q2+0x2>
     8f8:	f0 90 eb 02 	lds	r15, 0x02EB	; 0x8002eb <Q2+0x3>
     8fc:	a5 01       	movw	r20, r10
     8fe:	94 01       	movw	r18, r8
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     908:	2b 01       	movw	r4, r22
     90a:	3c 01       	movw	r6, r24
     90c:	a7 01       	movw	r20, r14
     90e:	96 01       	movw	r18, r12
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	c3 01       	movw	r24, r6
     91e:	b2 01       	movw	r22, r4
     920:	0e 94 81 24 	call	0x4902	; 0x4902 <__addsf3>
     924:	2b 01       	movw	r4, r22
     926:	3c 01       	movw	r6, r24
     928:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <g_coeff>
     92c:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <g_coeff+0x1>
     930:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <g_coeff+0x2>
     934:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <g_coeff+0x3>
     938:	c5 01       	movw	r24, r10
     93a:	b4 01       	movw	r22, r8
     93c:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     940:	a7 01       	movw	r20, r14
     942:	96 01       	movw	r18, r12
     944:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	c3 01       	movw	r24, r6
     94e:	b2 01       	movw	r22, r4
     950:	0e 94 80 24 	call	0x4900	; 0x4900 <__subsf3>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24

	ResetGoertzel();
     958:	c8 01       	movw	r24, r16
     95a:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	bf 90       	pop	r11
     974:	af 90       	pop	r10
     976:	9f 90       	pop	r9
     978:	8f 90       	pop	r8
     97a:	7f 90       	pop	r7
     97c:	6f 90       	pop	r6
     97e:	5f 90       	pop	r5
     980:	4f 90       	pop	r4
     982:	08 95       	ret

00000984 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     984:	e4 e6       	ldi	r30, 0x64	; 100
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	8f 77       	andi	r24, 0x7F	; 127
     98c:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     98e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     992:	85 e2       	ldi	r24, 0x25	; 37
     994:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     998:	84 e0       	ldi	r24, 0x04	; 4
     99a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     9a4:	08 95       	ret

000009a6 <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     9a6:	84 ea       	ldi	r24, 0xA4	; 164
     9a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     9ac:	ec eb       	ldi	r30, 0xBC	; 188
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	88 23       	and	r24, r24
     9b4:	64 f0       	brlt	.+24     	; 0x9ce <_Z9i2c_startv+0x28>
     9b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     9ba:	81 11       	cpse	r24, r1
     9bc:	f9 cf       	rjmp	.-14     	; 0x9b0 <_Z9i2c_startv+0xa>
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     9c0:	80 e9       	ldi	r24, 0x90	; 144
     9c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     9cc:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     9ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     9d2:	88 23       	and	r24, r24
     9d4:	a9 f3       	breq	.-22     	; 0x9c0 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     9d8:	08 95       	ret

000009da <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     9da:	84 e9       	ldi	r24, 0x94	; 148
     9dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9e0:	08 95       	ret

000009e2 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     9e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     9e6:	84 e8       	ldi	r24, 0x84	; 132
     9e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     9ec:	ec eb       	ldi	r30, 0xBC	; 188
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	88 23       	and	r24, r24
     9f4:	64 f0       	brlt	.+24     	; 0xa0e <_Z17i2c_write_successhh+0x2c>
     9f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     9fa:	81 11       	cpse	r24, r1
     9fc:	f9 cf       	rjmp	.-14     	; 0x9f0 <_Z17i2c_write_successhh+0xe>
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     a00:	84 e9       	ldi	r24, 0x94	; 148
     a02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     a0c:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     a0e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     a12:	88 7f       	andi	r24, 0xF8	; 248
     a14:	86 13       	cpse	r24, r22
     a16:	f4 cf       	rjmp	.-24     	; 0xa00 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     a18:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     a1a:	08 95       	ret

00000a1c <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     a1c:	84 ec       	ldi	r24, 0xC4	; 196
     a1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     a22:	ec eb       	ldi	r30, 0xBC	; 188
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	88 23       	and	r24, r24
     a2a:	24 f0       	brlt	.+8      	; 0xa34 <_Z12i2c_read_ackv+0x18>
     a2c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     a30:	81 11       	cpse	r24, r1
     a32:	f9 cf       	rjmp	.-14     	; 0xa26 <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     a34:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     a38:	08 95       	ret

00000a3a <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     a3a:	84 e8       	ldi	r24, 0x84	; 132
     a3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     a40:	ec eb       	ldi	r30, 0xBC	; 188
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	88 23       	and	r24, r24
     a48:	24 f0       	brlt	.+8      	; 0xa52 <_Z13i2c_read_nackv+0x18>
     a4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     a4e:	81 11       	cpse	r24, r1
     a50:	f9 cf       	rjmp	.-14     	; 0xa44 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     a52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     a56:	08 95       	ret

00000a58 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     a58:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a5c:	28 7f       	andi	r18, 0xF8	; 248
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	28 17       	cp	r18, r24
     a64:	39 07       	cpc	r19, r25
     a66:	29 f0       	breq	.+10     	; 0xa72 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     a68:	84 e9       	ldi	r24, 0x94	; 148
     a6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	08 95       	ret
	}

	return(FALSE);
     a72:	80 e0       	ldi	r24, 0x00	; 0
}
     a74:	08 95       	ret

00000a76 <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <_Z16i2c_device_writehhPhh+0x6>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <_Z16i2c_device_writehhPhh+0x8>
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <_Z16i2c_device_writehhPhh+0xa>
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	8a 83       	std	Y+2, r24	; 0x02
     a86:	6b 83       	std	Y+3, r22	; 0x03
     a88:	5d 83       	std	Y+5, r21	; 0x05
     a8a:	4c 83       	std	Y+4, r20	; 0x04
     a8c:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     a8e:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     a90:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     a94:	88 e0       	ldi	r24, 0x08	; 8
     a96:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10i2c_statush>
     a9a:	98 2f       	mov	r25, r24
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	99 23       	and	r25, r25
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <_Z16i2c_device_writehhPhh+0x2e>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	88 23       	and	r24, r24
     aa6:	11 f0       	breq	.+4      	; 0xaac <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	3f c0       	rjmp	.+126    	; 0xb2a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     aac:	68 e1       	ldi	r22, 0x18	; 24
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z17i2c_write_successhh>
     ab4:	98 2f       	mov	r25, r24
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	99 23       	and	r25, r25
     aba:	09 f4       	brne	.+2      	; 0xabe <_Z16i2c_device_writehhPhh+0x48>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	88 23       	and	r24, r24
     ac0:	11 f0       	breq	.+4      	; 0xac6 <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	32 c0       	rjmp	.+100    	; 0xb2a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     ac6:	68 e2       	ldi	r22, 0x28	; 40
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z17i2c_write_successhh>
     ace:	98 2f       	mov	r25, r24
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	99 23       	and	r25, r25
     ad4:	09 f4       	brne	.+2      	; 0xad8 <_Z16i2c_device_writehhPhh+0x62>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	88 23       	and	r24, r24
     ada:	11 f0       	breq	.+4      	; 0xae0 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	25 c0       	rjmp	.+74     	; 0xb2a <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     ae0:	8e 81       	ldd	r24, Y+6	; 0x06
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	98 0f       	add	r25, r24
     ae6:	9e 83       	std	Y+6, r25	; 0x06
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <_Z16i2c_device_writehhPhh+0x7a>
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	99 23       	and	r25, r25
     af2:	c1 f0       	breq	.+48     	; 0xb24 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	98 0f       	add	r25, r24
     afa:	99 83       	std	Y+1, r25	; 0x01
     afc:	88 2f       	mov	r24, r24
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	2c 81       	ldd	r18, Y+4	; 0x04
     b02:	3d 81       	ldd	r19, Y+5	; 0x05
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	fc 01       	movw	r30, r24
     b0a:	80 81       	ld	r24, Z
     b0c:	68 e2       	ldi	r22, 0x28	; 40
     b0e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z17i2c_write_successhh>
     b12:	98 2f       	mov	r25, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	99 23       	and	r25, r25
     b18:	09 f4       	brne	.+2      	; 0xb1c <_Z16i2c_device_writehhPhh+0xa6>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	88 23       	and	r24, r24
     b1e:	01 f3       	breq	.-64     	; 0xae0 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     b24:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     b28:	80 e0       	ldi	r24, 0x00	; 0
}
     b2a:	26 96       	adiw	r28, 0x06	; 6
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <_Z15i2c_device_readhhPhh+0xa>
     b46:	00 d0       	rcall	.+0      	; 0xb48 <_Z15i2c_device_readhhPhh+0xc>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <_Z15i2c_device_readhhPhh+0xe>
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	6b 83       	std	Y+3, r22	; 0x03
     b52:	5d 83       	std	Y+5, r21	; 0x05
     b54:	4c 83       	std	Y+4, r20	; 0x04
     b56:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     b58:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     b5a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     b5e:	88 e0       	ldi	r24, 0x08	; 8
     b60:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10i2c_statush>
     b64:	98 2f       	mov	r25, r24
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	99 23       	and	r25, r25
     b6a:	09 f4       	brne	.+2      	; 0xb6e <_Z15i2c_device_readhhPhh+0x32>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	88 23       	and	r24, r24
     b70:	11 f0       	breq	.+4      	; 0xb76 <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	79 c0       	rjmp	.+242    	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     b76:	68 e1       	ldi	r22, 0x18	; 24
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z17i2c_write_successhh>
     b7e:	98 2f       	mov	r25, r24
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	99 23       	and	r25, r25
     b84:	09 f4       	brne	.+2      	; 0xb88 <_Z15i2c_device_readhhPhh+0x4c>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	88 23       	and	r24, r24
     b8a:	11 f0       	breq	.+4      	; 0xb90 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	6c c0       	rjmp	.+216    	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     b90:	68 e2       	ldi	r22, 0x28	; 40
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z17i2c_write_successhh>
     b98:	98 2f       	mov	r25, r24
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	99 23       	and	r25, r25
     b9e:	09 f4       	brne	.+2      	; 0xba2 <_Z15i2c_device_readhhPhh+0x66>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	88 23       	and	r24, r24
     ba4:	11 f0       	breq	.+4      	; 0xbaa <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	5f c0       	rjmp	.+190    	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     baa:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     bae:	80 e1       	ldi	r24, 0x10	; 16
     bb0:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10i2c_statush>
     bb4:	98 2f       	mov	r25, r24
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	99 23       	and	r25, r25
     bba:	09 f4       	brne	.+2      	; 0xbbe <_Z15i2c_device_readhhPhh+0x82>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	88 23       	and	r24, r24
     bc0:	11 f0       	breq	.+4      	; 0xbc6 <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	51 c0       	rjmp	.+162    	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	81 60       	ori	r24, 0x01	; 1
     bca:	60 e4       	ldi	r22, 0x40	; 64
     bcc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z17i2c_write_successhh>
     bd0:	98 2f       	mov	r25, r24
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	99 23       	and	r25, r25
     bd6:	09 f4       	brne	.+2      	; 0xbda <_Z15i2c_device_readhhPhh+0x9e>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	88 23       	and	r24, r24
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	43 c0       	rjmp	.+134    	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
     be2:	8e 81       	ldd	r24, Y+6	; 0x06
     be4:	9f ef       	ldi	r25, 0xFF	; 255
     be6:	98 0f       	add	r25, r24
     be8:	9e 83       	std	Y+6, r25	; 0x06
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <_Z15i2c_device_readhhPhh+0xb6>
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	99 23       	and	r25, r25
     bf4:	b1 f1       	breq	.+108    	; 0xc62 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
     bf6:	8e 81       	ldd	r24, Y+6	; 0x06
     bf8:	88 23       	and	r24, r24
     bfa:	d9 f0       	breq	.+54     	; 0xc32 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	98 0f       	add	r25, r24
     c02:	99 83       	std	Y+1, r25	; 0x01
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	2c 81       	ldd	r18, Y+4	; 0x04
     c0a:	3d 81       	ldd	r19, Y+5	; 0x05
     c0c:	89 01       	movw	r16, r18
     c0e:	08 0f       	add	r16, r24
     c10:	19 1f       	adc	r17, r25
     c12:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z12i2c_read_ackv>
     c16:	f8 01       	movw	r30, r16
     c18:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
     c1a:	80 e5       	ldi	r24, 0x50	; 80
     c1c:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10i2c_statush>
     c20:	98 2f       	mov	r25, r24
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	99 23       	and	r25, r25
     c26:	09 f4       	brne	.+2      	; 0xc2a <_Z15i2c_device_readhhPhh+0xee>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	88 23       	and	r24, r24
     c2c:	d1 f2       	breq	.-76     	; 0xbe2 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	1b c0       	rjmp	.+54     	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
     c3a:	3d 81       	ldd	r19, Y+5	; 0x05
     c3c:	89 01       	movw	r16, r18
     c3e:	08 0f       	add	r16, r24
     c40:	19 1f       	adc	r17, r25
     c42:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_Z13i2c_read_nackv>
     c46:	f8 01       	movw	r30, r16
     c48:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
     c4a:	88 e5       	ldi	r24, 0x58	; 88
     c4c:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10i2c_statush>
     c50:	98 2f       	mov	r25, r24
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	99 23       	and	r25, r25
     c56:	09 f4       	brne	.+2      	; 0xc5a <_Z15i2c_device_readhhPhh+0x11e>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	88 23       	and	r24, r24
     c5c:	11 f2       	breq	.-124    	; 0xbe2 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
     c62:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     c66:	80 e0       	ldi	r24, 0x00	; 0
}
     c68:	26 96       	adiw	r28, 0x06	; 6
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <_Z16nextFullTxBufferv>:

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	linkbus_send_text(g_tempMsgBuff);
}
     c7e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	59 e2       	ldi	r21, 0x29	; 41
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	52 9f       	mul	r21, r18
     c8c:	f0 01       	movw	r30, r0
     c8e:	53 9f       	mul	r21, r19
     c90:	f0 0d       	add	r31, r0
     c92:	11 24       	eor	r1, r1
     c94:	e0 58       	subi	r30, 0x80	; 128
     c96:	fc 4f       	sbci	r31, 0xFC	; 252
     c98:	40 81       	ld	r20, Z
     c9a:	41 11       	cpse	r20, r1
     c9c:	0c c0       	rjmp	.+24     	; 0xcb6 <_Z16nextFullTxBufferv+0x38>
     c9e:	91 50       	subi	r25, 0x01	; 1
     ca0:	29 f0       	breq	.+10     	; 0xcac <_Z16nextFullTxBufferv+0x2e>
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	78 f3       	brcs	.-34     	; 0xc86 <_Z16nextFullTxBufferv+0x8>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	ed cf       	rjmp	.-38     	; 0xc86 <_Z16nextFullTxBufferv+0x8>
     cac:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <_ZZ16nextFullTxBuffervE11bufferIndex>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	08 95       	ret
     cb6:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <_ZZ16nextFullTxBuffervE11bufferIndex>
     cba:	49 e2       	ldi	r20, 0x29	; 41
     cbc:	42 9f       	mul	r20, r18
     cbe:	c0 01       	movw	r24, r0
     cc0:	43 9f       	mul	r20, r19
     cc2:	90 0d       	add	r25, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	80 58       	subi	r24, 0x80	; 128
     cc8:	9c 4f       	sbci	r25, 0xFC	; 252
     cca:	08 95       	ret

00000ccc <_Z17nextEmptyTxBufferv>:
     ccc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     cd0:	94 e0       	ldi	r25, 0x04	; 4
     cd2:	59 e2       	ldi	r21, 0x29	; 41
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	52 9f       	mul	r21, r18
     cda:	f0 01       	movw	r30, r0
     cdc:	53 9f       	mul	r21, r19
     cde:	f0 0d       	add	r31, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	e0 58       	subi	r30, 0x80	; 128
     ce4:	fc 4f       	sbci	r31, 0xFC	; 252
     ce6:	40 81       	ld	r20, Z
     ce8:	44 23       	and	r20, r20
     cea:	61 f0       	breq	.+24     	; 0xd04 <_Z17nextEmptyTxBufferv+0x38>
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	29 f0       	breq	.+10     	; 0xcfa <_Z17nextEmptyTxBufferv+0x2e>
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	78 f3       	brcs	.-34     	; 0xcd4 <_Z17nextEmptyTxBufferv+0x8>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	ed cf       	rjmp	.-38     	; 0xcd4 <_Z17nextEmptyTxBufferv+0x8>
     cfa:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	08 95       	ret
     d04:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     d08:	49 e2       	ldi	r20, 0x29	; 41
     d0a:	42 9f       	mul	r20, r18
     d0c:	c0 01       	movw	r24, r0
     d0e:	43 9f       	mul	r20, r19
     d10:	90 0d       	add	r25, r0
     d12:	11 24       	eor	r1, r1
     d14:	80 58       	subi	r24, 0x80	; 128
     d16:	9c 4f       	sbci	r25, 0xFC	; 252
     d18:	08 95       	ret

00000d1a <_Z17nextEmptyRxBufferv>:
     d1a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	9f e3       	ldi	r25, 0x3F	; 63
     d24:	89 9f       	mul	r24, r25
     d26:	f0 01       	movw	r30, r0
     d28:	11 24       	eor	r1, r1
     d2a:	ee 5f       	subi	r30, 0xFE	; 254
     d2c:	fc 4f       	sbci	r31, 0xFC	; 252
     d2e:	41 81       	ldd	r20, Z+1	; 0x01
     d30:	52 81       	ldd	r21, Z+2	; 0x02
     d32:	45 2b       	or	r20, r21
     d34:	a9 f0       	breq	.+42     	; 0xd60 <_Z17nextEmptyRxBufferv+0x46>
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <_Z17nextEmptyRxBufferv+0x24>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	9f e3       	ldi	r25, 0x3F	; 63
     d44:	89 9f       	mul	r24, r25
     d46:	f0 01       	movw	r30, r0
     d48:	11 24       	eor	r1, r1
     d4a:	ee 5f       	subi	r30, 0xFE	; 254
     d4c:	fc 4f       	sbci	r31, 0xFC	; 252
     d4e:	41 81       	ldd	r20, Z+1	; 0x01
     d50:	52 81       	ldd	r21, Z+2	; 0x02
     d52:	45 2b       	or	r20, r21
     d54:	29 f0       	breq	.+10     	; 0xd60 <_Z17nextEmptyRxBufferv+0x46>
     d56:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	08 95       	ret
     d60:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     d64:	4f e3       	ldi	r20, 0x3F	; 63
     d66:	42 9f       	mul	r20, r18
     d68:	c0 01       	movw	r24, r0
     d6a:	43 9f       	mul	r20, r19
     d6c:	90 0d       	add	r25, r0
     d6e:	11 24       	eor	r1, r1
     d70:	8e 5f       	subi	r24, 0xFE	; 254
     d72:	9c 4f       	sbci	r25, 0xFC	; 252
     d74:	08 95       	ret

00000d76 <_Z16nextFullRxBufferv>:
     d76:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZZ16nextFullRxBuffervE11bufferIndex>
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	9f e3       	ldi	r25, 0x3F	; 63
     d80:	89 9f       	mul	r24, r25
     d82:	f0 01       	movw	r30, r0
     d84:	11 24       	eor	r1, r1
     d86:	ee 5f       	subi	r30, 0xFE	; 254
     d88:	fc 4f       	sbci	r31, 0xFC	; 252
     d8a:	41 81       	ldd	r20, Z+1	; 0x01
     d8c:	52 81       	ldd	r21, Z+2	; 0x02
     d8e:	45 2b       	or	r20, r21
     d90:	a9 f4       	brne	.+42     	; 0xdbc <_Z16nextFullRxBufferv+0x46>
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	08 f0       	brcs	.+2      	; 0xd9a <_Z16nextFullRxBufferv+0x24>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	9f e3       	ldi	r25, 0x3F	; 63
     da0:	89 9f       	mul	r24, r25
     da2:	f0 01       	movw	r30, r0
     da4:	11 24       	eor	r1, r1
     da6:	ee 5f       	subi	r30, 0xFE	; 254
     da8:	fc 4f       	sbci	r31, 0xFC	; 252
     daa:	41 81       	ldd	r20, Z+1	; 0x01
     dac:	52 81       	ldd	r21, Z+2	; 0x02
     dae:	45 2b       	or	r20, r21
     db0:	29 f4       	brne	.+10     	; 0xdbc <_Z16nextFullRxBufferv+0x46>
     db2:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <_ZZ16nextFullRxBuffervE11bufferIndex>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	08 95       	ret
     dbc:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <_ZZ16nextFullRxBuffervE11bufferIndex>
     dc0:	4f e3       	ldi	r20, 0x3F	; 63
     dc2:	42 9f       	mul	r20, r18
     dc4:	c0 01       	movw	r24, r0
     dc6:	43 9f       	mul	r20, r19
     dc8:	90 0d       	add	r25, r0
     dca:	11 24       	eor	r1, r1
     dcc:	8e 5f       	subi	r24, 0xFE	; 254
     dce:	9c 4f       	sbci	r25, 0xFC	; 252
     dd0:	08 95       	ret

00000dd2 <_Z19linkbusTxInProgressv>:
     dd2:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <_ZL17linkbus_tx_active>
     dd6:	08 95       	ret

00000dd8 <_Z16linkbus_start_txv>:
     dd8:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZL17linkbus_tx_active>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	91 11       	cpse	r25, r1
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	91 11       	cpse	r25, r1
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <_Z16linkbus_start_txv+0x1e>
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZL17linkbus_tx_active>
     dec:	e1 ec       	ldi	r30, 0xC1	; 193
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	90 81       	ld	r25, Z
     df2:	90 62       	ori	r25, 0x20	; 32
     df4:	90 83       	st	Z, r25
     df6:	08 95       	ret

00000df8 <_Z14linkbus_end_txv>:
     df8:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <_ZL17linkbus_tx_active>
     dfc:	88 23       	and	r24, r24
     dfe:	39 f0       	breq	.+14     	; 0xe0e <_Z14linkbus_end_txv+0x16>
     e00:	e1 ec       	ldi	r30, 0xC1	; 193
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7d       	andi	r24, 0xDF	; 223
     e08:	80 83       	st	Z, r24
     e0a:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZL17linkbus_tx_active>
     e0e:	08 95       	ret

00000e10 <_Z12linkbus_initm>:
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	8e e7       	ldi	r24, 0x7E	; 126
     e16:	e2 e0       	ldi	r30, 0x02	; 2
     e18:	f3 e0       	ldi	r31, 0x03	; 3
     e1a:	df 01       	movw	r26, r30
     e1c:	1d 92       	st	X+, r1
     e1e:	8a 95       	dec	r24
     e20:	e9 f7       	brne	.-6      	; 0xe1c <_Z12linkbus_initm+0xc>
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	f3 e0       	ldi	r31, 0x03	; 3
     e26:	10 82       	st	Z, r1
     e28:	11 a6       	std	Z+41, r1	; 0x29
     e2a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <_ZL9tx_buffer+0x52>
     e2e:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <_ZL9tx_buffer+0x7b>
     e32:	60 e4       	ldi	r22, 0x40	; 64
     e34:	72 e4       	ldi	r23, 0x42	; 66
     e36:	8f e0       	ldi	r24, 0x0F	; 15
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	31 09       	sbc	r19, r1
     e42:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e46:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     e4a:	88 e9       	ldi	r24, 0x98	; 152
     e4c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e50:	8e e0       	ldi	r24, 0x0E	; 14
     e52:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     e56:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
     e5a:	08 95       	ret

00000e5c <_Z15linkbus_disablev>:
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
     e62:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     e66:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_Z14linkbus_end_txv>
     e6a:	8e e7       	ldi	r24, 0x7E	; 126
     e6c:	e2 e0       	ldi	r30, 0x02	; 2
     e6e:	f3 e0       	ldi	r31, 0x03	; 3
     e70:	df 01       	movw	r26, r30
     e72:	1d 92       	st	X+, r1
     e74:	8a 95       	dec	r24
     e76:	e9 f7       	brne	.-6      	; 0xe72 <_Z15linkbus_disablev+0x16>
     e78:	e0 e8       	ldi	r30, 0x80	; 128
     e7a:	f3 e0       	ldi	r31, 0x03	; 3
     e7c:	10 82       	st	Z, r1
     e7e:	11 a6       	std	Z+41, r1	; 0x29
     e80:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <_ZL9tx_buffer+0x52>
     e84:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <_ZL9tx_buffer+0x7b>
     e88:	08 95       	ret

00000e8a <_Z17linkbus_send_textPc>:
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     e96:	21 11       	cpse	r18, r1
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <_Z17linkbus_send_textPc+0x38>
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <_Z17linkbus_send_textPc+0x3c>
     e9e:	8c 01       	movw	r16, r24
     ea0:	0e 94 66 06 	call	0xccc	; 0xccc <_Z17nextEmptyTxBufferv>
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	b9 f4       	brne	.+46     	; 0xed6 <_Z17linkbus_send_textPc+0x4c>
     ea8:	c8 ec       	ldi	r28, 0xC8	; 200
     eaa:	d0 e0       	ldi	r29, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <_Z17linkbus_send_textPc+0x28>
     eae:	20 97       	sbiw	r28, 0x00	; 0
     eb0:	61 f0       	breq	.+24     	; 0xeca <_Z17linkbus_send_textPc+0x40>
     eb2:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZL17linkbus_tx_active>
     eb6:	99 23       	and	r25, r25
     eb8:	51 f0       	breq	.+20     	; 0xece <_Z17linkbus_send_textPc+0x44>
     eba:	20 97       	sbiw	r28, 0x00	; 0
     ebc:	d1 f0       	breq	.+52     	; 0xef2 <_Z17linkbus_send_textPc+0x68>
     ebe:	21 97       	sbiw	r28, 0x01	; 1
     ec0:	f8 cf       	rjmp	.-16     	; 0xeb2 <_Z17linkbus_send_textPc+0x28>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <_Z17linkbus_send_textPc+0x72>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	19 c0       	rjmp	.+50     	; 0xefc <_Z17linkbus_send_textPc+0x72>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	17 c0       	rjmp	.+46     	; 0xefc <_Z17linkbus_send_textPc+0x72>
     ece:	0e 94 66 06 	call	0xccc	; 0xccc <_Z17nextEmptyTxBufferv>
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	61 f3       	breq	.-40     	; 0xeae <_Z17linkbus_send_textPc+0x24>
     ed6:	1f 93       	push	r17
     ed8:	0f 93       	push	r16
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
     ee2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_Z16linkbus_start_txv>
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <_Z17linkbus_send_textPc+0x72>
     ef2:	0e 94 66 06 	call	0xccc	; 0xccc <_Z17nextEmptyTxBufferv>
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	71 f7       	brne	.-36     	; 0xed6 <_Z17linkbus_send_textPc+0x4c>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <_Z17lb_send_NewPromptv>:
     f06:	83 e2       	ldi	r24, 0x23	; 35
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z17linkbus_send_textPc>
     f0e:	81 11       	cpse	r24, r1
     f10:	fa cf       	rjmp	.-12     	; 0xf06 <_Z17lb_send_NewPromptv>
     f12:	08 95       	ret

00000f14 <_Z15lb_send_NewLinev>:
     f14:	86 e2       	ldi	r24, 0x26	; 38
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z17linkbus_send_textPc>
     f1c:	08 95       	ret

00000f1e <_Z12lb_echo_charh>:
     f1e:	e5 e2       	ldi	r30, 0x25	; 37
     f20:	f4 e0       	ldi	r31, 0x04	; 4
     f22:	80 83       	st	Z, r24
     f24:	11 82       	std	Z+1, r1	; 0x01
     f26:	cf 01       	movw	r24, r30
     f28:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z17linkbus_send_textPc>
     f2c:	08 95       	ret

00000f2e <_Z14lb_send_stringPch>:
     f2e:	cf 93       	push	r28
     f30:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     f34:	21 11       	cpse	r18, r1
     f36:	25 c0       	rjmp	.+74     	; 0xf82 <_Z14lb_send_stringPch+0x54>
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	29 f1       	breq	.+74     	; 0xf86 <_Z14lb_send_stringPch+0x58>
     f3c:	fc 01       	movw	r30, r24
     f3e:	01 90       	ld	r0, Z+
     f40:	00 20       	and	r0, r0
     f42:	e9 f7       	brne	.-6      	; 0xf3e <_Z14lb_send_stringPch+0x10>
     f44:	31 97       	sbiw	r30, 0x01	; 1
     f46:	e8 1b       	sub	r30, r24
     f48:	f9 0b       	sbc	r31, r25
     f4a:	ba 97       	sbiw	r30, 0x2a	; 42
     f4c:	f0 f4       	brcc	.+60     	; 0xf8a <_Z14lb_send_stringPch+0x5c>
     f4e:	c6 2f       	mov	r28, r22
     f50:	bc 01       	movw	r22, r24
     f52:	49 e2       	ldi	r20, 0x29	; 41
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	85 e2       	ldi	r24, 0x25	; 37
     f58:	94 e0       	ldi	r25, 0x04	; 4
     f5a:	0e 94 b2 29 	call	0x5364	; 0x5364 <strncpy>
     f5e:	cc 23       	and	r28, r28
     f60:	59 f0       	breq	.+22     	; 0xf78 <_Z14lb_send_stringPch+0x4a>
     f62:	85 e2       	ldi	r24, 0x25	; 37
     f64:	94 e0       	ldi	r25, 0x04	; 4
     f66:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z17linkbus_send_textPc>
     f6a:	81 11       	cpse	r24, r1
     f6c:	fa cf       	rjmp	.-12     	; 0xf62 <_Z14lb_send_stringPch+0x34>
     f6e:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <_ZL17linkbus_tx_active>
     f72:	81 11       	cpse	r24, r1
     f74:	fc cf       	rjmp	.-8      	; 0xf6e <_Z14lb_send_stringPch+0x40>
     f76:	0a c0       	rjmp	.+20     	; 0xf8c <_Z14lb_send_stringPch+0x5e>
     f78:	85 e2       	ldi	r24, 0x25	; 37
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z17linkbus_send_textPc>
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <_Z14lb_send_stringPch+0x5e>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <_Z14lb_send_stringPch+0x5e>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <_Z14lb_send_stringPch+0x5e>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <_Z12lb_send_Helpv>:
/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
	if(g_bus_disabled)
     f90:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     f94:	81 11       	cpse	r24, r1
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <_Z12lb_send_Helpv+0x24>
	{
		return;
	}

	lb_send_NewLine();
     f98:	0e 94 8a 07 	call	0xf14	; 0xf14 <_Z15lb_send_NewLinev>
	sendEEPROMString(&ee_textVersion[0]);
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textHelp[0]);
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	lb_send_NewLine();
     fac:	0e 94 8a 07 	call	0xf14	; 0xf14 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     fb0:	0e 94 8a 07 	call	0xf14	; 0xf14 <_Z15lb_send_NewLinev>
     fb4:	08 95       	ret

00000fb6 <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	8b e0       	ldi	r24, 0x0B	; 11
     fdc:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
     fe0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	87 ef       	ldi	r24, 0xF7	; 247
     fe8:	94 e0       	ldi	r25, 0x04	; 4
     fea:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN8Goertzel9DataPointEi>
     fee:	88 23       	and	r24, r24
     ff0:	29 f0       	breq	.+10     	; 0xffc <__vector_21+0x46>
     ff2:	ea e7       	ldi	r30, 0x7A	; 122
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	87 7f       	andi	r24, 0xF7	; 247
     ffa:	80 83       	st	Z, r24
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	8b e0       	ldi	r24, 0x0B	; 11
    1000:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1004:	ff 91       	pop	r31
    1006:	ef 91       	pop	r30
    1008:	bf 91       	pop	r27
    100a:	af 91       	pop	r26
    100c:	9f 91       	pop	r25
    100e:	8f 91       	pop	r24
    1010:	7f 91       	pop	r23
    1012:	6f 91       	pop	r22
    1014:	5f 91       	pop	r21
    1016:	4f 91       	pop	r20
    1018:	3f 91       	pop	r19
    101a:	2f 91       	pop	r18
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_18>:
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	1f 93       	push	r17
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1052:	c0 91 cc 04 	lds	r28, 0x04CC	; 0x8004cc <_ZZ11__vector_18E4buff>
    1056:	d0 91 cd 04 	lds	r29, 0x04CD	; 0x8004cd <_ZZ11__vector_18E4buff+0x1>
    105a:	20 97       	sbiw	r28, 0x00	; 0
    105c:	51 f4       	brne	.+20     	; 0x1072 <__vector_18+0x4c>
    105e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_Z17nextEmptyRxBufferv>
    1062:	ec 01       	movw	r28, r24
    1064:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <_ZZ11__vector_18E4buff+0x1>
    1068:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <_ZZ11__vector_18E4buff>
    106c:	89 2b       	or	r24, r25
    106e:	09 f4       	brne	.+2      	; 0x1072 <__vector_18+0x4c>
    1070:	62 c1       	rjmp	.+708    	; 0x1336 <__vector_18+0x310>
    1072:	81 2f       	mov	r24, r17
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 98 29 	call	0x5330	; 0x5330 <toupper>
    107a:	9c 01       	movw	r18, r24
    107c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZZ11__vector_18E11ignoreCount>
    1080:	88 23       	and	r24, r24
    1082:	21 f0       	breq	.+8      	; 0x108c <__vector_18+0x66>
    1084:	81 50       	subi	r24, 0x01	; 1
    1086:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZZ11__vector_18E11ignoreCount>
    108a:	55 c1       	rjmp	.+682    	; 0x1336 <__vector_18+0x310>
    108c:	2b 31       	cpi	r18, 0x1B	; 27
    108e:	21 f4       	brne	.+8      	; 0x1098 <__vector_18+0x72>
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZZ11__vector_18E11ignoreCount>
    1096:	4f c1       	rjmp	.+670    	; 0x1336 <__vector_18+0x310>
    1098:	2d 30       	cpi	r18, 0x0D	; 13
    109a:	09 f0       	breq	.+2      	; 0x109e <__vector_18+0x78>
    109c:	3f c0       	rjmp	.+126    	; 0x111c <__vector_18+0xf6>
    109e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ11__vector_18E13receiving_msg>
    10a2:	88 23       	and	r24, r24
    10a4:	31 f1       	breq	.+76     	; 0x10f2 <__vector_18+0xcc>
    10a6:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    10aa:	ee 23       	and	r30, r30
    10ac:	f9 f0       	breq	.+62     	; 0x10ec <__vector_18+0xc6>
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	88 83       	st	Y, r24
    10b2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    10b6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_18E11field_index>
    10c2:	88 23       	and	r24, r24
    10c4:	79 f0       	breq	.+30     	; 0x10e4 <__vector_18+0xbe>
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	40 91 86 04 	lds	r20, 0x0486	; 0x800486 <_ZZ11__vector_18E9field_len>
    10ce:	54 e1       	ldi	r21, 0x14	; 20
    10d0:	58 9f       	mul	r21, r24
    10d2:	90 01       	movw	r18, r0
    10d4:	59 9f       	mul	r21, r25
    10d6:	30 0d       	add	r19, r0
    10d8:	11 24       	eor	r1, r1
    10da:	c2 0f       	add	r28, r18
    10dc:	d3 1f       	adc	r29, r19
    10de:	c4 0f       	add	r28, r20
    10e0:	d1 1d       	adc	r29, r1
    10e2:	1b 82       	std	Y+3, r1	; 0x03
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	e5 57       	subi	r30, 0x75	; 117
    10e8:	fb 4f       	sbci	r31, 0xFB	; 251
    10ea:	10 82       	st	Z, r1
    10ec:	0e 94 8a 07 	call	0xf14	; 0xf14 <_Z15lb_send_NewLinev>
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <__vector_18+0xd4>
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	9f e7       	ldi	r25, 0x7F	; 127
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    10fe:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ11__vector_18E9field_len>
    1102:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    1106:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    110a:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ11__vector_18E11field_index>
    110e:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <_ZZ11__vector_18E4buff+0x1>
    1112:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZZ11__vector_18E4buff>
    1116:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ11__vector_18E13receiving_msg>
    111a:	0d c1       	rjmp	.+538    	; 0x1336 <__vector_18+0x310>
    111c:	22 23       	and	r18, r18
    111e:	09 f4       	brne	.+2      	; 0x1122 <__vector_18+0xfc>
    1120:	0a c1       	rjmp	.+532    	; 0x1336 <__vector_18+0x310>
    1122:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    1126:	4e 2f       	mov	r20, r30
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	da 01       	movw	r26, r20
    112c:	a5 57       	subi	r26, 0x75	; 117
    112e:	bb 4f       	sbci	r27, 0xFB	; 251
    1130:	2c 93       	st	X, r18
    1132:	ee 23       	and	r30, r30
    1134:	09 f4       	brne	.+2      	; 0x1138 <__vector_18+0x112>
    1136:	d6 c0       	rjmp	.+428    	; 0x12e4 <__vector_18+0x2be>
    1138:	2f 37       	cpi	r18, 0x7F	; 127
    113a:	09 f0       	breq	.+2      	; 0x113e <__vector_18+0x118>
    113c:	5f c0       	rjmp	.+190    	; 0x11fc <__vector_18+0x1d6>
    113e:	e1 50       	subi	r30, 0x01	; 1
    1140:	e0 93 ca 04 	sts	0x04CA, r30	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    1144:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_18E11field_index>
    1148:	81 11       	cpse	r24, r1
    114a:	13 c0       	rjmp	.+38     	; 0x1172 <__vector_18+0x14c>
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	e5 57       	subi	r30, 0x75	; 117
    1150:	fb 4f       	sbci	r31, 0xFB	; 251
    1152:	40 81       	ld	r20, Z
    1154:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    1158:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    115c:	84 1b       	sub	r24, r20
    115e:	91 09       	sbc	r25, r1
    1160:	6a e0       	ldi	r22, 0x0A	; 10
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    1168:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    116c:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    1170:	39 c0       	rjmp	.+114    	; 0x11e4 <__vector_18+0x1be>
    1172:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ11__vector_18E9field_len>
    1176:	99 23       	and	r25, r25
    1178:	91 f0       	breq	.+36     	; 0x119e <__vector_18+0x178>
    117a:	4f ef       	ldi	r20, 0xFF	; 255
    117c:	49 0f       	add	r20, r25
    117e:	40 93 86 04 	sts	0x0486, r20	; 0x800486 <_ZZ11__vector_18E9field_len>
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	54 e1       	ldi	r21, 0x14	; 20
    1188:	58 9f       	mul	r21, r24
    118a:	b0 01       	movw	r22, r0
    118c:	59 9f       	mul	r21, r25
    118e:	70 0d       	add	r23, r0
    1190:	11 24       	eor	r1, r1
    1192:	c6 0f       	add	r28, r22
    1194:	d7 1f       	adc	r29, r23
    1196:	c4 0f       	add	r28, r20
    1198:	d1 1d       	adc	r29, r1
    119a:	1b 82       	std	Y+3, r1	; 0x03
    119c:	23 c0       	rjmp	.+70     	; 0x11e4 <__vector_18+0x1be>
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	e5 57       	subi	r30, 0x75	; 117
    11a2:	fb 4f       	sbci	r31, 0xFB	; 251
    11a4:	90 81       	ld	r25, Z
    11a6:	90 32       	cpi	r25, 0x20	; 32
    11a8:	a1 f4       	brne	.+40     	; 0x11d2 <__vector_18+0x1ac>
    11aa:	81 50       	subi	r24, 0x01	; 1
    11ac:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_18E11field_index>
    11b0:	de 01       	movw	r26, r28
    11b2:	94 e1       	ldi	r25, 0x14	; 20
    11b4:	89 9f       	mul	r24, r25
    11b6:	a0 0d       	add	r26, r0
    11b8:	b1 1d       	adc	r27, r1
    11ba:	11 24       	eor	r1, r1
    11bc:	13 96       	adiw	r26, 0x03	; 3
    11be:	fd 01       	movw	r30, r26
    11c0:	01 90       	ld	r0, Z+
    11c2:	00 20       	and	r0, r0
    11c4:	e9 f7       	brne	.-6      	; 0x11c0 <__vector_18+0x19a>
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	ea 1b       	sub	r30, r26
    11ca:	fb 0b       	sbc	r31, r27
    11cc:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <_ZZ11__vector_18E9field_len>
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <__vector_18+0x1be>
    11d2:	94 e1       	ldi	r25, 0x14	; 20
    11d4:	89 9f       	mul	r24, r25
    11d6:	c0 0d       	add	r28, r0
    11d8:	d1 1d       	adc	r29, r1
    11da:	11 24       	eor	r1, r1
    11dc:	1b 82       	std	Y+3, r1	; 0x03
    11de:	81 50       	subi	r24, 0x01	; 1
    11e0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_18E11field_index>
    11e4:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    11e8:	e8 2f       	mov	r30, r24
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	e5 57       	subi	r30, 0x75	; 117
    11ee:	fb 4f       	sbci	r31, 0xFB	; 251
    11f0:	10 82       	st	Z, r1
    11f2:	81 11       	cpse	r24, r1
    11f4:	93 c0       	rjmp	.+294    	; 0x131c <__vector_18+0x2f6>
    11f6:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ11__vector_18E13receiving_msg>
    11fa:	90 c0       	rjmp	.+288    	; 0x131c <__vector_18+0x2f6>
    11fc:	20 32       	cpi	r18, 0x20	; 32
    11fe:	79 f5       	brne	.+94     	; 0x125e <__vector_18+0x238>
    1200:	fa 01       	movw	r30, r20
    1202:	e6 57       	subi	r30, 0x76	; 118
    1204:	fb 4f       	sbci	r31, 0xFB	; 251
    1206:	80 81       	ld	r24, Z
    1208:	80 32       	cpi	r24, 0x20	; 32
    120a:	09 f4       	brne	.+2      	; 0x120e <__vector_18+0x1e8>
    120c:	94 c0       	rjmp	.+296    	; 0x1336 <__vector_18+0x310>
    120e:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_18E11field_index>
    1212:	68 2f       	mov	r22, r24
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	fb 01       	movw	r30, r22
    1218:	31 96       	adiw	r30, 0x01	; 1
    121a:	33 97       	sbiw	r30, 0x03	; 3
    121c:	0c f0       	brlt	.+2      	; 0x1220 <__vector_18+0x1fa>
    121e:	8b c0       	rjmp	.+278    	; 0x1336 <__vector_18+0x310>
    1220:	88 23       	and	r24, r24
    1222:	79 f0       	breq	.+30     	; 0x1242 <__vector_18+0x21c>
    1224:	61 50       	subi	r22, 0x01	; 1
    1226:	71 09       	sbc	r23, r1
    1228:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZZ11__vector_18E9field_len>
    122c:	a4 e1       	ldi	r26, 0x14	; 20
    122e:	a6 9f       	mul	r26, r22
    1230:	f0 01       	movw	r30, r0
    1232:	a7 9f       	mul	r26, r23
    1234:	f0 0d       	add	r31, r0
    1236:	11 24       	eor	r1, r1
    1238:	ce 0f       	add	r28, r30
    123a:	df 1f       	adc	r29, r31
    123c:	c9 0f       	add	r28, r25
    123e:	d1 1d       	adc	r29, r1
    1240:	1b 82       	std	Y+3, r1	; 0x03
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_18E11field_index>
    1248:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ11__vector_18E9field_len>
    124c:	4f 5f       	subi	r20, 0xFF	; 255
    124e:	5f 4f       	sbci	r21, 0xFF	; 255
    1250:	4e 33       	cpi	r20, 0x3E	; 62
    1252:	51 05       	cpc	r21, r1
    1254:	0c f0       	brlt	.+2      	; 0x1258 <__vector_18+0x232>
    1256:	4e e3       	ldi	r20, 0x3E	; 62
    1258:	40 93 ca 04 	sts	0x04CA, r20	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    125c:	5f c0       	rjmp	.+190    	; 0x131c <__vector_18+0x2f6>
    125e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ11__vector_18E9field_len>
    1262:	84 31       	cpi	r24, 0x14	; 20
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__vector_18+0x242>
    1266:	67 c0       	rjmp	.+206    	; 0x1336 <__vector_18+0x310>
    1268:	40 91 87 04 	lds	r20, 0x0487	; 0x800487 <_ZZ11__vector_18E11field_index>
    126c:	41 11       	cpse	r20, r1
    126e:	19 c0       	rjmp	.+50     	; 0x12a2 <__vector_18+0x27c>
    1270:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    1274:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    1278:	ba 01       	movw	r22, r20
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	44 0f       	add	r20, r20
    1280:	55 1f       	adc	r21, r21
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	46 0f       	add	r20, r22
    128c:	57 1f       	adc	r21, r23
    128e:	42 0f       	add	r20, r18
    1290:	51 1d       	adc	r21, r1
    1292:	50 93 89 04 	sts	0x0489, r21	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    1296:	40 93 88 04 	sts	0x0488, r20	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ11__vector_18E9field_len>
    12a0:	16 c0       	rjmp	.+44     	; 0x12ce <__vector_18+0x2a8>
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	41 50       	subi	r20, 0x01	; 1
    12a6:	51 09       	sbc	r21, r1
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	98 0f       	add	r25, r24
    12ac:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZZ11__vector_18E9field_len>
    12b0:	e4 e1       	ldi	r30, 0x14	; 20
    12b2:	e4 9f       	mul	r30, r20
    12b4:	b0 01       	movw	r22, r0
    12b6:	e5 9f       	mul	r30, r21
    12b8:	70 0d       	add	r23, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	c6 0f       	add	r28, r22
    12be:	d7 1f       	adc	r29, r23
    12c0:	fe 01       	movw	r30, r28
    12c2:	e8 0f       	add	r30, r24
    12c4:	f1 1d       	adc	r31, r1
    12c6:	23 83       	std	Z+3, r18	; 0x03
    12c8:	c9 0f       	add	r28, r25
    12ca:	d1 1d       	adc	r29, r1
    12cc:	1b 82       	std	Y+3, r1	; 0x03
    12ce:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	8e 33       	cpi	r24, 0x3E	; 62
    12d8:	91 05       	cpc	r25, r1
    12da:	0c f0       	brlt	.+2      	; 0x12de <__vector_18+0x2b8>
    12dc:	8e e3       	ldi	r24, 0x3E	; 62
    12de:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    12e2:	1c c0       	rjmp	.+56     	; 0x131c <__vector_18+0x2f6>
    12e4:	2f 37       	cpi	r18, 0x7F	; 127
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <__vector_18+0x2d2>
    12e8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    12ec:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    12f0:	18 16       	cp	r1, r24
    12f2:	19 06       	cpc	r1, r25
    12f4:	bc f0       	brlt	.+46     	; 0x1324 <__vector_18+0x2fe>
    12f6:	1b c0       	rjmp	.+54     	; 0x132e <__vector_18+0x308>
    12f8:	20 32       	cpi	r18, 0x20	; 32
    12fa:	e9 f0       	breq	.+58     	; 0x1336 <__vector_18+0x310>
    12fc:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZZ11__vector_18E11field_index>
    1300:	c9 01       	movw	r24, r18
    1302:	99 27       	eor	r25, r25
    1304:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    1308:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    130c:	1b 82       	std	Y+3, r1	; 0x03
    130e:	1f 8a       	std	Y+23, r1	; 0x17
    1310:	1b a6       	std	Y+43, r1	; 0x2b
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ11__vector_18E13receiving_msg>
    1318:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZZ11__vector_18E9charIndex>
    131c:	82 2f       	mov	r24, r18
    131e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z12lb_echo_charh>
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <__vector_18+0x310>
    1324:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    1328:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    132c:	f7 cf       	rjmp	.-18     	; 0x131c <__vector_18+0x2f6>
    132e:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E6msg_ID+0x1>
    1332:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZZ11__vector_18E6msg_ID>
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	1f 91       	pop	r17
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <__vector_19>:
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
    1380:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZZ11__vector_19E4buff>
    1384:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZZ11__vector_19E4buff+0x1>
    1388:	89 2b       	or	r24, r25
    138a:	31 f4       	brne	.+12     	; 0x1398 <__vector_19+0x3a>
    138c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_Z16nextFullTxBufferv>
    1390:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <_ZZ11__vector_19E4buff+0x1>
    1394:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZZ11__vector_19E4buff>
    1398:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <_ZZ11__vector_19E4buff>
    139c:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <_ZZ11__vector_19E4buff+0x1>
    13a0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ11__vector_19E9charIndex>
    13a4:	df 01       	movw	r26, r30
    13a6:	a8 0f       	add	r26, r24
    13a8:	b1 1d       	adc	r27, r1
    13aa:	9c 91       	ld	r25, X
    13ac:	99 23       	and	r25, r25
    13ae:	31 f0       	breq	.+12     	; 0x13bc <__vector_19+0x5e>
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ11__vector_19E9charIndex>
    13b6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <__vector_19+0x78>
    13bc:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ11__vector_19E9charIndex>
    13c0:	10 82       	st	Z, r1
    13c2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_Z16nextFullTxBufferv>
    13c6:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <_ZZ11__vector_19E4buff+0x1>
    13ca:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZZ11__vector_19E4buff>
    13ce:	89 2b       	or	r24, r25
    13d0:	11 f4       	brne	.+4      	; 0x13d6 <__vector_19+0x78>
    13d2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_Z14linkbus_end_txv>
    13d6:	ff 91       	pop	r31
    13d8:	ef 91       	pop	r30
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_14>:
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <_ZZ11__vector_14E6toggle>
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	81 11       	cpse	r24, r1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <_ZZ11__vector_14E6toggle>
    1428:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <g_audio_tone_state>
    142c:	99 23       	and	r25, r25
    142e:	61 f0       	breq	.+24     	; 0x1448 <__vector_14+0x50>
    1430:	81 11       	cpse	r24, r1
    1432:	05 c0       	rjmp	.+10     	; 0x143e <__vector_14+0x46>
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <__vector_14+0x58>
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	89 e0       	ldi	r24, 0x09	; 9
    1442:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <__vector_14+0x58>
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	89 e0       	ldi	r24, 0x09	; 9
    144c:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_11>:
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	cf 93       	push	r28
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
    1496:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_sendAMmodulation>
    149a:	81 11       	cpse	r24, r1
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <__vector_11+0x34>
    149e:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ11__vector_11E5index>
    14a2:	88 23       	and	r24, r24
    14a4:	01 f1       	breq	.+64     	; 0x14e6 <__vector_11+0x74>
    14a6:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ11__vector_11E5index>
    14aa:	c1 e0       	ldi	r28, 0x01	; 1
    14ac:	c8 0f       	add	r28, r24
    14ae:	c0 93 77 04 	sts	0x0477, r28	; 0x800477 <_ZZ11__vector_11E5index>
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	87 5d       	subi	r24, 0xD7	; 215
    14b6:	9d 4f       	sbci	r25, 0xFD	; 253
    14b8:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    14bc:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ11__vector_11E11controlPins>
    14c0:	c1 32       	cpi	r28, 0x21	; 33
    14c2:	10 f0       	brcs	.+4      	; 0x14c8 <__vector_11+0x56>
    14c4:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ11__vector_11E5index>
    14c8:	98 b1       	in	r25, 0x08	; 8
    14ca:	8f 70       	andi	r24, 0x0F	; 15
    14cc:	90 7f       	andi	r25, 0xF0	; 240
    14ce:	89 2b       	or	r24, r25
    14d0:	88 b9       	out	0x08, r24	; 8
    14d2:	9b b1       	in	r25, 0x0b	; 11
    14d4:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ11__vector_11E11controlPins>
    14d8:	80 73       	andi	r24, 0x30	; 48
    14da:	82 95       	swap	r24
    14dc:	8f 70       	andi	r24, 0x0F	; 15
    14de:	9c 7f       	andi	r25, 0xFC	; 252
    14e0:	89 2b       	or	r24, r25
    14e2:	8b b9       	out	0x0b, r24	; 11
    14e4:	13 c0       	rjmp	.+38     	; 0x150c <__vector_11+0x9a>
    14e6:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ11__vector_11E11controlPins>
    14ea:	8f 33       	cpi	r24, 0x3F	; 63
    14ec:	79 f0       	breq	.+30     	; 0x150c <__vector_11+0x9a>
    14ee:	8f e3       	ldi	r24, 0x3F	; 63
    14f0:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZZ11__vector_11E11controlPins>
    14f4:	88 b1       	in	r24, 0x08	; 8
    14f6:	8f 60       	ori	r24, 0x0F	; 15
    14f8:	88 b9       	out	0x08, r24	; 8
    14fa:	9b b1       	in	r25, 0x0b	; 11
    14fc:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZZ11__vector_11E11controlPins>
    1500:	80 73       	andi	r24, 0x30	; 48
    1502:	82 95       	swap	r24
    1504:	8f 70       	andi	r24, 0x0F	; 15
    1506:	9c 7f       	andi	r25, 0xFC	; 252
    1508:	89 2b       	or	r24, r25
    150a:	8b b9       	out	0x0b, r24	; 11
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	cf 91       	pop	r28
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <_Z23clockConfigurationErrorv>:
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <_Z23clockConfigurationErrorv+0xe>
    153c:	61 c0       	rjmp	.+194    	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    153e:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    1542:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    1546:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    154a:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    154e:	89 2b       	or	r24, r25
    1550:	8a 2b       	or	r24, r26
    1552:	8b 2b       	or	r24, r27
    1554:	09 f4       	brne	.+2      	; 0x1558 <_Z23clockConfigurationErrorv+0x28>
    1556:	4d c0       	rjmp	.+154    	; 0x15f2 <_Z23clockConfigurationErrorv+0xc2>
    1558:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    155c:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    1560:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    1564:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    1568:	89 2b       	or	r24, r25
    156a:	8a 2b       	or	r24, r26
    156c:	8b 2b       	or	r24, r27
    156e:	09 f4       	brne	.+2      	; 0x1572 <_Z23clockConfigurationErrorv+0x42>
    1570:	42 c0       	rjmp	.+132    	; 0x15f6 <_Z23clockConfigurationErrorv+0xc6>
    1572:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    1576:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    157a:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    157e:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1582:	81 15       	cp	r24, r1
    1584:	96 46       	sbci	r25, 0x66	; 102
    1586:	ae 4e       	sbci	r26, 0xEE	; 238
    1588:	bf 45       	sbci	r27, 0x5F	; 95
    158a:	b8 f1       	brcs	.+110    	; 0x15fa <_Z23clockConfigurationErrorv+0xca>
    158c:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch>
    1590:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    1594:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    1598:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    159c:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    15a0:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    15a4:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    15a8:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    15ac:	84 17       	cp	r24, r20
    15ae:	95 07       	cpc	r25, r21
    15b0:	a6 07       	cpc	r26, r22
    15b2:	b7 07       	cpc	r27, r23
    15b4:	20 f5       	brcc	.+72     	; 0x15fe <_Z23clockConfigurationErrorv+0xce>
    15b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    15ba:	88 23       	and	r24, r24
    15bc:	c1 f0       	breq	.+48     	; 0x15ee <_Z23clockConfigurationErrorv+0xbe>
    15be:	00 91 50 05 	lds	r16, 0x0550	; 0x800550 <g_current_epoch>
    15c2:	10 91 51 05 	lds	r17, 0x0551	; 0x800551 <g_current_epoch+0x1>
    15c6:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <g_current_epoch+0x2>
    15ca:	30 91 53 05 	lds	r19, 0x0553	; 0x800553 <g_current_epoch+0x3>
    15ce:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch>
    15d2:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    15d6:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    15da:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	40 17       	cp	r20, r16
    15e2:	51 07       	cpc	r21, r17
    15e4:	62 07       	cpc	r22, r18
    15e6:	73 07       	cpc	r23, r19
    15e8:	58 f0       	brcs	.+22     	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <_Z23clockConfigurationErrorv+0xd0>
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	08 95       	ret

00001606 <_Z13sendMorseToneh>:
    1606:	90 91 39 05 	lds	r25, 0x0539	; 0x800539 <g_lastSeconds>
    160a:	91 11       	cpse	r25, r1
    160c:	0a c0       	rjmp	.+20     	; 0x1622 <_Z13sendMorseToneh+0x1c>
    160e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_fox_tone_offset>
    1612:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_fox_tone_offset+0x1>
    1616:	9f e2       	ldi	r25, 0x2F	; 47
    1618:	92 1b       	sub	r25, r18
    161a:	97 bd       	out	0x27, r25	; 39
    161c:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_audio_tone_state>
    1620:	08 95       	ret
    1622:	8f e2       	ldi	r24, 0x2F	; 47
    1624:	87 bd       	out	0x27, r24	; 39
    1626:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_audio_tone_state>
    162a:	08 95       	ret

0000162c <__vector_8>:
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	00 d0       	rcall	.+0      	; 0x1654 <__vector_8+0x28>
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_tick_count>
    165c:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <g_tick_count+0x1>
    1660:	a0 91 fa 04 	lds	r26, 0x04FA	; 0x8004fa <g_tick_count+0x2>
    1664:	b0 91 fb 04 	lds	r27, 0x04FB	; 0x8004fb <g_tick_count+0x3>
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	a1 1d       	adc	r26, r1
    166c:	b1 1d       	adc	r27, r1
    166e:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <g_tick_count>
    1672:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <g_tick_count+0x1>
    1676:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <g_tick_count+0x2>
    167a:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <g_tick_count+0x3>
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	1a 82       	std	Y+2, r1	; 0x02
    1684:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    1688:	88 23       	and	r24, r24
    168a:	19 f1       	breq	.+70     	; 0x16d2 <__vector_8+0xa6>
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z11digitalReadh>
    1692:	81 11       	cpse	r24, r1
    1694:	1e c0       	rjmp	.+60     	; 0x16d2 <__vector_8+0xa6>
    1696:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_sync_pin_timer>
    169a:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <g_sync_pin_timer+0x1>
    169e:	8b 3b       	cpi	r24, 0xBB	; 187
    16a0:	90 41       	sbci	r25, 0x10	; 16
    16a2:	4c f4       	brge	.+18     	; 0x16b6 <__vector_8+0x8a>
    16a4:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_sync_pin_timer>
    16a8:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <g_sync_pin_timer+0x1>
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <g_sync_pin_timer+0x1>
    16b2:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <g_sync_pin_timer>
    16b6:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_sync_pin_timer>
    16ba:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <g_sync_pin_timer+0x1>
    16be:	85 39       	cpi	r24, 0x95	; 149
    16c0:	95 40       	sbci	r25, 0x05	; 5
    16c2:	3c f0       	brlt	.+14     	; 0x16d2 <__vector_8+0xa6>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <g_sync_pin_stable>
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	87 e0       	ldi	r24, 0x07	; 7
    16ce:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    16d2:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_dtmf_detected>
    16d6:	81 11       	cpse	r24, r1
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <__vector_8+0xb6>
    16da:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <g_config_error>
    16de:	88 23       	and	r24, r24
    16e0:	c1 f0       	breq	.+48     	; 0x1712 <__vector_8+0xe6>
    16e2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    16e6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    16ea:	22 3e       	cpi	r18, 0xE2	; 226
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	38 07       	cpc	r19, r24
    16f0:	34 f4       	brge	.+12     	; 0x16fe <__vector_8+0xd2>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    16fa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    16fe:	2f 31       	cpi	r18, 0x1F	; 31
    1700:	31 05       	cpc	r19, r1
    1702:	a4 f0       	brlt	.+40     	; 0x172c <__vector_8+0x100>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    170c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1710:	0d c0       	rjmp	.+26     	; 0x172c <__vector_8+0x100>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    171a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    171e:	8f e1       	ldi	r24, 0x1F	; 31
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1726:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    172a:	10 c0       	rjmp	.+32     	; 0x174c <__vector_8+0x120>
    172c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1730:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1734:	82 0f       	add	r24, r18
    1736:	93 1f       	adc	r25, r19
    1738:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    173c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1740:	99 23       	and	r25, r25
    1742:	24 f4       	brge	.+8      	; 0x174c <__vector_8+0x120>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_blinky_time>
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <__vector_8+0x124>
    174c:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <g_blinky_time>
    1750:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZL16g_LEDs_Timed_Out>
    1754:	81 11       	cpse	r24, r1
    1756:	24 c0       	rjmp	.+72     	; 0x17a0 <__vector_8+0x174>
    1758:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_stable>
    175c:	88 23       	and	r24, r24
    175e:	09 f4       	brne	.+2      	; 0x1762 <__vector_8+0x136>
    1760:	1b c1       	rjmp	.+566    	; 0x1998 <__vector_8+0x36c>
    1762:	1e c0       	rjmp	.+60     	; 0x17a0 <__vector_8+0x174>
    1764:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_blinky_time>
    1768:	88 23       	and	r24, r24
    176a:	29 f0       	breq	.+10     	; 0x1776 <__vector_8+0x14a>
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	8d e0       	ldi	r24, 0x0D	; 13
    1770:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1774:	04 c0       	rjmp	.+8      	; 0x177e <__vector_8+0x152>
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	8d e0       	ldi	r24, 0x0D	; 13
    177a:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    177e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <g_config_error>
    1782:	88 23       	and	r24, r24
    1784:	69 f0       	breq	.+26     	; 0x17a0 <__vector_8+0x174>
    1786:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_blinky_time>
    178a:	88 23       	and	r24, r24
    178c:	29 f0       	breq	.+10     	; 0x1798 <__vector_8+0x16c>
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	87 e0       	ldi	r24, 0x07	; 7
    1792:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <__vector_8+0x174>
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	87 e0       	ldi	r24, 0x07	; 7
    179c:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    17a0:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <_ZL20g_enable_start_timer>
    17a4:	88 23       	and	r24, r24
    17a6:	09 f4       	brne	.+2      	; 0x17aa <__vector_8+0x17e>
    17a8:	58 c0       	rjmp	.+176    	; 0x185a <__vector_8+0x22e>
    17aa:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_lastSeconds>
    17ae:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <_ZZ10__vector_8E14hold_last10sec>
    17b2:	98 17       	cp	r25, r24
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <__vector_8+0x1b6>
    17b6:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_lastSeconds>
    17ba:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ10__vector_8E14hold_last10sec>
    17be:	88 23       	and	r24, r24
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <__vector_8+0x1a8>
    17c2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZZ10__vector_8E9playMorse>
    17c6:	83 e6       	ldi	r24, 0x63	; 99
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ10__vector_8E13starting_blip+0x1>
    17ce:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ10__vector_8E13starting_blip>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <__vector_8+0x1d0>
    17d4:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <_ZZ10__vector_8E13starting_blip+0x1>
    17d8:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZZ10__vector_8E13starting_blip>
    17dc:	87 e2       	ldi	r24, 0x27	; 39
    17de:	9b e0       	ldi	r25, 0x0B	; 11
    17e0:	28 c0       	rjmp	.+80     	; 0x1832 <__vector_8+0x206>
    17e2:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZZ10__vector_8E13starting_blip>
    17e6:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZZ10__vector_8E13starting_blip+0x1>
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	e1 f0       	breq	.+56     	; 0x1826 <__vector_8+0x1fa>
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZZ10__vector_8E13starting_blip+0x1>
    17f4:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZZ10__vector_8E13starting_blip>
    17f8:	89 2b       	or	r24, r25
    17fa:	81 f0       	breq	.+32     	; 0x181c <__vector_8+0x1f0>
    17fc:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_lastSeconds>
    1800:	86 30       	cpi	r24, 0x06	; 6
    1802:	30 f0       	brcs	.+12     	; 0x1810 <__vector_8+0x1e4>
    1804:	8f e3       	ldi	r24, 0x3F	; 63
    1806:	87 bd       	out	0x27, r24	; 39
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_audio_tone_state>
    180e:	25 c0       	rjmp	.+74     	; 0x185a <__vector_8+0x22e>
    1810:	8f e1       	ldi	r24, 0x1F	; 31
    1812:	87 bd       	out	0x27, r24	; 39
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_audio_tone_state>
    181a:	1f c0       	rjmp	.+62     	; 0x185a <__vector_8+0x22e>
    181c:	8f e2       	ldi	r24, 0x2F	; 47
    181e:	87 bd       	out	0x27, r24	; 39
    1820:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_audio_tone_state>
    1824:	1a c0       	rjmp	.+52     	; 0x185a <__vector_8+0x22e>
    1826:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ10__vector_8E13starting_boop>
    182a:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <_ZZ10__vector_8E13starting_boop+0x1>
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	a1 f0       	breq	.+40     	; 0x185a <__vector_8+0x22e>
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <_ZZ10__vector_8E13starting_boop+0x1>
    1838:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <_ZZ10__vector_8E13starting_boop>
    183c:	89 2b       	or	r24, r25
    183e:	41 f4       	brne	.+16     	; 0x1850 <__vector_8+0x224>
    1840:	8f e2       	ldi	r24, 0x2F	; 47
    1842:	87 bd       	out	0x27, r24	; 39
    1844:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_audio_tone_state>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E9playMorse>
    184e:	05 c0       	rjmp	.+10     	; 0x185a <__vector_8+0x22e>
    1850:	8f e4       	ldi	r24, 0x4F	; 79
    1852:	87 bd       	out	0x27, r24	; 39
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_audio_tone_state>
    185a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    185e:	81 11       	cpse	r24, r1
    1860:	a8 c0       	rjmp	.+336    	; 0x19b2 <__vector_8+0x386>
    1862:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_on_the_air>
    1866:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_on_the_air+0x1>
    186a:	89 2b       	or	r24, r25
    186c:	09 f0       	breq	.+2      	; 0x1870 <__vector_8+0x244>
    186e:	99 c0       	rjmp	.+306    	; 0x19a2 <__vector_8+0x376>
    1870:	a0 c0       	rjmp	.+320    	; 0x19b2 <__vector_8+0x386>
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10__vector_8E7codeInc+0x1>
    1878:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10__vector_8E7codeInc>
    187c:	89 2b       	or	r24, r25
    187e:	09 f0       	breq	.+2      	; 0x1882 <__vector_8+0x256>
    1880:	a3 c0       	rjmp	.+326    	; 0x19c8 <__vector_8+0x39c>
    1882:	ae 01       	movw	r20, r28
    1884:	4e 5f       	subi	r20, 0xFE	; 254
    1886:	5f 4f       	sbci	r21, 0xFF	; 255
    1888:	be 01       	movw	r22, r28
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z9makeMorsePcPhS0_>
    1896:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZZ10__vector_8E3key>
    189a:	99 81       	ldd	r25, Y+1	; 0x01
    189c:	91 11       	cpse	r25, r1
    189e:	11 c0       	rjmp	.+34     	; 0x18c2 <__vector_8+0x296>
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	99 23       	and	r25, r25
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <__vector_8+0x296>
    18a6:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10__vector_8E3key>
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_callsign_sent>
    18b0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    18b4:	88 23       	and	r24, r24
    18b6:	09 f4       	brne	.+2      	; 0x18ba <__vector_8+0x28e>
    18b8:	87 c0       	rjmp	.+270    	; 0x19c8 <__vector_8+0x39c>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	0e 94 03 0b 	call	0x1606	; 0x1606 <_Z13sendMorseToneh>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <__vector_8+0x2d2>
    18c2:	88 23       	and	r24, r24
    18c4:	b9 f0       	breq	.+46     	; 0x18f4 <__vector_8+0x2c8>
    18c6:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZL16g_LEDs_Timed_Out>
    18ca:	81 11       	cpse	r24, r1
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__vector_8+0x2aa>
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	87 e0       	ldi	r24, 0x07	; 7
    18d2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    18d6:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL20g_enable_transmitter>
    18da:	88 23       	and	r24, r24
    18dc:	59 f0       	breq	.+22     	; 0x18f4 <__vector_8+0x2c8>
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	8a e0       	ldi	r24, 0x0A	; 10
    18e2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	88 e0       	ldi	r24, 0x08	; 8
    18ea:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_sendAMmodulation>
    18f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <__vector_8+0x2d2>
    18fc:	65 c0       	rjmp	.+202    	; 0x19c8 <__vector_8+0x39c>
    18fe:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    1902:	0e 94 03 0b 	call	0x1606	; 0x1606 <_Z13sendMorseToneh>
    1906:	60 c0       	rjmp	.+192    	; 0x19c8 <__vector_8+0x39c>
    1908:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZL16g_LEDs_Timed_Out>
    190c:	81 11       	cpse	r24, r1
    190e:	05 c0       	rjmp	.+10     	; 0x191a <__vector_8+0x2ee>
    1910:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_stable>
    1914:	88 23       	and	r24, r24
    1916:	09 f4       	brne	.+2      	; 0x191a <__vector_8+0x2ee>
    1918:	51 c0       	rjmp	.+162    	; 0x19bc <__vector_8+0x390>
    191a:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZL20g_enable_transmitter>
    191e:	88 23       	and	r24, r24
    1920:	71 f0       	breq	.+28     	; 0x193e <__vector_8+0x312>
    1922:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    1926:	8a e0       	ldi	r24, 0x0A	; 10
    1928:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    192c:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    1930:	88 e0       	ldi	r24, 0x08	; 8
    1932:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1936:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    193a:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_sendAMmodulation>
    193e:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_code_throttle>
    1942:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_code_throttle+0x1>
    1946:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10__vector_8E7codeInc+0x1>
    194a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10__vector_8E7codeInc>
    194e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1952:	88 23       	and	r24, r24
    1954:	c9 f1       	breq	.+114    	; 0x19c8 <__vector_8+0x39c>
    1956:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    195a:	0e 94 03 0b 	call	0x1606	; 0x1606 <_Z13sendMorseToneh>
    195e:	34 c0       	rjmp	.+104    	; 0x19c8 <__vector_8+0x39c>
    1960:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZZ10__vector_8E3key>
    1964:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_stable>
    1968:	81 11       	cpse	r24, r1
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <__vector_8+0x348>
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	87 e0       	ldi	r24, 0x07	; 7
    1970:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	8a e0       	ldi	r24, 0x0A	; 10
    1978:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	88 e0       	ldi	r24, 0x08	; 8
    1980:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1984:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_sendAMmodulation>
    1988:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    198c:	88 23       	and	r24, r24
    198e:	e1 f0       	breq	.+56     	; 0x19c8 <__vector_8+0x39c>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 03 0b 	call	0x1606	; 0x1606 <_Z13sendMorseToneh>
    1996:	18 c0       	rjmp	.+48     	; 0x19c8 <__vector_8+0x39c>
    1998:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_dtmf_detected>
    199c:	81 11       	cpse	r24, r1
    199e:	e2 ce       	rjmp	.-572    	; 0x1764 <__vector_8+0x138>
    19a0:	ee ce       	rjmp	.-548    	; 0x177e <__vector_8+0x152>
    19a2:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10__vector_8E7codeInc>
    19a6:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10__vector_8E7codeInc+0x1>
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <__vector_8+0x384>
    19ae:	61 cf       	rjmp	.-318    	; 0x1872 <__vector_8+0x246>
    19b0:	ab cf       	rjmp	.-170    	; 0x1908 <__vector_8+0x2dc>
    19b2:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    19b6:	81 11       	cpse	r24, r1
    19b8:	d3 cf       	rjmp	.-90     	; 0x1960 <__vector_8+0x334>
    19ba:	e6 cf       	rjmp	.-52     	; 0x1988 <__vector_8+0x35c>
    19bc:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <_ZZ10__vector_8E3key>
    19c0:	87 e0       	ldi	r24, 0x07	; 7
    19c2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    19c6:	a9 cf       	rjmp	.-174    	; 0x191a <__vector_8+0x2ee>
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	ff 91       	pop	r31
    19d2:	ef 91       	pop	r30
    19d4:	bf 91       	pop	r27
    19d6:	af 91       	pop	r26
    19d8:	9f 91       	pop	r25
    19da:	8f 91       	pop	r24
    19dc:	7f 91       	pop	r23
    19de:	6f 91       	pop	r22
    19e0:	5f 91       	pop	r21
    19e2:	4f 91       	pop	r20
    19e4:	3f 91       	pop	r19
    19e6:	2f 91       	pop	r18
    19e8:	0f 90       	pop	r0
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	0f 90       	pop	r0
    19ee:	1f 90       	pop	r1
    19f0:	18 95       	reti

000019f2 <_Z20initializeEEPROMVarsh>:

/*
 * Set non-volatile variables to their values stored in EEPROM
 */
void initializeEEPROMVars(BOOL resetAll)
{
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	c8 2f       	mov	r28, r24
	uint16_t i;
	uint8_t initialization_flag = eeprom_read_byte(&ee_interface_eeprom_initialization_flag);
    1a00:	87 ee       	ldi	r24, 0xE7	; 231
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1a08:	d8 2f       	mov	r29, r24

	i2c_init();                                                         /* Needs to happen here */
    1a0a:	0e 94 c2 04 	call	0x984	; 0x984 <_Z8i2c_initv>

	if(!resetAll && (initialization_flag == EEPROM_INITIALIZED_FLAG))   /* EEPROM is up to date */
    1a0e:	c1 11       	cpse	r28, r1
    1a10:	6c c0       	rjmp	.+216    	; 0x1aea <_Z20initializeEEPROMVarsh+0xf8>
    1a12:	da 3b       	cpi	r29, 0xBA	; 186
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <_Z20initializeEEPROMVarsh+0x26>
    1a16:	69 c0       	rjmp	.+210    	; 0x1aea <_Z20initializeEEPROMVarsh+0xf8>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
    1a18:	89 e5       	ldi	r24, 0x59	; 89
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	91 05       	cpc	r25, r1
    1a26:	14 f4       	brge	.+4      	; 0x1a2c <_Z20initializeEEPROMVarsh+0x3a>
    1a28:	85 e0       	ldi	r24, 0x05	; 5
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	85 31       	cpi	r24, 0x15	; 21
    1a2e:	91 05       	cpc	r25, r1
    1a30:	14 f0       	brlt	.+4      	; 0x1a36 <_Z20initializeEEPROMVarsh+0x44>
    1a32:	84 e1       	ldi	r24, 0x14	; 20
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
		g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),NO_CODE_START_TONES_5M);
    1a3a:	88 e5       	ldi	r24, 0x58	; 88
    1a3c:	92 e0       	ldi	r25, 0x02	; 2
    1a3e:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1a42:	86 31       	cpi	r24, 0x16	; 22
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <_Z20initializeEEPROMVarsh+0x56>
    1a46:	85 e1       	ldi	r24, 0x15	; 21
    1a48:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_fox>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration);
    1a4c:	85 e5       	ldi	r24, 0x55	; 85
    1a4e:	92 e0       	ldi	r25, 0x02	; 2
    1a50:	0e 94 9f 2c 	call	0x593e	; 0x593e <eeprom_read_word>
    1a54:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    1a58:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
    1a5c:	83 e5       	ldi	r24, 0x53	; 83
    1a5e:	92 e0       	ldi	r25, 0x02	; 2
    1a60:	0e 94 9f 2c 	call	0x593e	; 0x593e <eeprom_read_word>
    1a64:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZL15g_rv3028_offset+0x1>
    1a68:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <_ZL15g_rv3028_offset>
		g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    1a6c:	87 e5       	ldi	r24, 0x57	; 87
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1a74:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZL13g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    1a78:	82 e5       	ldi	r24, 0x52	; 82
    1a7a:	92 e0       	ldi	r25, 0x02	; 2
    1a7c:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1a80:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL20g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    1a84:	81 e5       	ldi	r24, 0x51	; 81
    1a86:	92 e0       	ldi	r25, 0x02	; 2
    1a88:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1a8c:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_ZL20g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
    1a90:	8d e4       	ldi	r24, 0x4D	; 77
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 99 2c 	call	0x5932	; 0x5932 <eeprom_read_dword>
    1a98:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <g_event_start_epoch>
    1a9c:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <g_event_start_epoch+0x1>
    1aa0:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_event_start_epoch+0x2>
    1aa4:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&ee_event_finish_epoch);
    1aa8:	89 e4       	ldi	r24, 0x49	; 73
    1aaa:	92 e0       	ldi	r25, 0x02	; 2
    1aac:	0e 94 99 2c 	call	0x5932	; 0x5932 <eeprom_read_dword>
    1ab0:	60 93 48 05 	sts	0x0548, r22	; 0x800548 <g_event_finish_epoch>
    1ab4:	70 93 49 05 	sts	0x0549, r23	; 0x800549 <g_event_finish_epoch+0x1>
    1ab8:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_event_finish_epoch+0x2>
    1abc:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <g_event_finish_epoch+0x3>
    1ac0:	02 ed       	ldi	r16, 0xD2	; 210
    1ac2:	12 e0       	ldi	r17, 0x02	; 2
    1ac4:	cd e1       	ldi	r28, 0x1D	; 29
    1ac6:	d5 e0       	ldi	r29, 0x05	; 5
    1ac8:	0f 2e       	mov	r0, r31
    1aca:	f1 e3       	ldi	r31, 0x31	; 49
    1acc:	ef 2e       	mov	r14, r31
    1ace:	f5 e0       	ldi	r31, 0x05	; 5
    1ad0:	ff 2e       	mov	r15, r31
    1ad2:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    1ad4:	c8 01       	movw	r24, r16
    1ad6:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
    1ada:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
    1adc:	88 23       	and	r24, r24
    1ade:	29 f0       	breq	.+10     	; 0x1aea <_Z20initializeEEPROMVarsh+0xf8>
    1ae0:	0f 5f       	subi	r16, 0xFF	; 255
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		g_event_finish_epoch = eeprom_read_dword(&ee_event_finish_epoch);

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    1ae4:	ce 15       	cp	r28, r14
    1ae6:	df 05       	cpc	r29, r15
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <_Z20initializeEEPROMVarsh+0xe2>
		eeprom_update_byte(&ee_interface_eeprom_initialization_flag,EEPROM_INITIALIZED_FLAG);
	}
#endif // INIT_EEPROM_ONLY

/* Perform sanity checks */
	if(g_event_finish_epoch <= g_event_start_epoch)
    1aea:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch>
    1aee:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    1af2:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    1af6:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    1afa:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    1afe:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    1b02:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    1b06:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    1b0a:	84 17       	cp	r24, r20
    1b0c:	95 07       	cpc	r25, r21
    1b0e:	a6 07       	cpc	r26, r22
    1b10:	b7 07       	cpc	r27, r23
    1b12:	a0 f0       	brcs	.+40     	; 0x1b3c <_Z20initializeEEPROMVarsh+0x14a>
	{
		g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    1b14:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    1b18:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    1b1c:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    1b20:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    1b24:	80 58       	subi	r24, 0x80	; 128
    1b26:	9e 4a       	sbci	r25, 0xAE	; 174
    1b28:	ae 4f       	sbci	r26, 0xFE	; 254
    1b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2c:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_event_finish_epoch>
    1b30:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_event_finish_epoch+0x1>
    1b34:	a0 93 4a 05 	sts	0x054A, r26	; 0x80054a <g_event_finish_epoch+0x2>
    1b38:	b0 93 4b 05 	sts	0x054B, r27	; 0x80054b <g_event_finish_epoch+0x3>
	}

	return;
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	08 95       	ret

00001b4a <_Z11setupForFoxP5Fox_t>:

void setupForFox(Fox_t* fox)
{
	if(fox)
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	31 f0       	breq	.+12     	; 0x1b5a <_Z11setupForFoxP5Fox_t+0x10>
	{
		if(*fox != INVALID_FOX)
    1b4e:	fc 01       	movw	r30, r24
    1b50:	80 81       	ld	r24, Z
    1b52:	86 31       	cpi	r24, 0x16	; 22
    1b54:	11 f0       	breq	.+4      	; 0x1b5a <_Z11setupForFoxP5Fox_t+0x10>
		{
			g_fox = *fox;
    1b56:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_fox>
		}
	}

	switch(g_fox)
    1b5a:	e0 91 5a 05 	lds	r30, 0x055A	; 0x80055a <g_fox>
    1b5e:	8e 2f       	mov	r24, r30
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	fc 01       	movw	r30, r24
    1b64:	31 97       	sbiw	r30, 0x01	; 1
    1b66:	e5 31       	cpi	r30, 0x15	; 21
    1b68:	f1 05       	cpc	r31, r1
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <_Z11setupForFoxP5Fox_t+0x24>
    1b6c:	6b c0       	rjmp	.+214    	; 0x1c44 <_Z11setupForFoxP5Fox_t+0xfa>
    1b6e:	ea 59       	subi	r30, 0x9A	; 154
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1b76:	88 e7       	ldi	r24, 0x78	; 120
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1b7e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL20g_enable_start_timer>
		}
		break;
    1b88:	7d c0       	rjmp	.+250    	; 0x1c84 <_Z11setupForFoxP5Fox_t+0x13a>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1b8a:	8c e2       	ldi	r24, 0x2C	; 44
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1b92:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL20g_enable_start_timer>
		}
		break;
    1b9c:	73 c0       	rjmp	.+230    	; 0x1c84 <_Z11setupForFoxP5Fox_t+0x13a>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1b9e:	8c e3       	ldi	r24, 0x3C	; 60
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <g_on_air_interval+0x1>
    1ba6:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <g_on_air_interval>
			g_number_of_foxes = 5;
    1baa:	25 e0       	ldi	r18, 0x05	; 5
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	30 93 42 05 	sts	0x0542, r19	; 0x800542 <g_number_of_foxes+0x1>
    1bb2:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <g_number_of_foxes>
			g_fox_id_offset = 0;
    1bb6:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_id_offset+0x1>
    1bba:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset>
			g_pattern_codespeed = 8;
    1bbe:	28 e0       	ldi	r18, 0x08	; 8
    1bc0:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <_ZL19g_pattern_codespeed>
			g_id_interval = 60;
    1bc4:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <g_id_interval+0x1>
    1bc8:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <g_id_interval>
			g_startclock_interval = 300;
    1bcc:	8c e2       	ldi	r24, 0x2C	; 44
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1bd4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1bd8:	55 c0       	rjmp	.+170    	; 0x1c84 <_Z11setupForFoxP5Fox_t+0x13a>

		case SPRINT_S1:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    1bda:	8c e0       	ldi	r24, 0x0C	; 12
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <g_on_air_interval+0x1>
    1be2:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <g_on_air_interval>
			g_number_of_foxes = 5;
    1be6:	85 e0       	ldi	r24, 0x05	; 5
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <g_number_of_foxes+0x1>
    1bee:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? 10 : 15;
    1bf2:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    1bf6:	83 31       	cpi	r24, 0x13	; 19
    1bf8:	31 f0       	breq	.+12     	; 0x1c06 <_Z11setupForFoxP5Fox_t+0xbc>
    1bfa:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    1bfe:	8e 30       	cpi	r24, 0x0E	; 14
    1c00:	20 f0       	brcs	.+8      	; 0x1c0a <_Z11setupForFoxP5Fox_t+0xc0>
    1c02:	8f e0       	ldi	r24, 0x0F	; 15
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <_Z11setupForFoxP5Fox_t+0xc2>
    1c06:	8a e0       	ldi	r24, 0x0A	; 10
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <_Z11setupForFoxP5Fox_t+0xc2>
    1c0a:	8a e0       	ldi	r24, 0x0A	; 10
    1c0c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZL19g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    1c10:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    1c14:	8e 30       	cpi	r24, 0x0E	; 14
    1c16:	18 f0       	brcs	.+6      	; 0x1c1e <_Z11setupForFoxP5Fox_t+0xd4>
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <_Z11setupForFoxP5Fox_t+0xd8>
    1c1e:	88 e0       	ldi	r24, 0x08	; 8
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <g_fox_id_offset+0x1>
    1c26:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_fox_id_offset>
			g_id_interval = 600;
    1c2a:	88 e5       	ldi	r24, 0x58	; 88
    1c2c:	92 e0       	ldi	r25, 0x02	; 2
    1c2e:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <g_id_interval+0x1>
    1c32:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <g_id_interval>
			g_startclock_interval = 120;
    1c36:	88 e7       	ldi	r24, 0x78	; 120
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1c3e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1c42:	20 c0       	rjmp	.+64     	; 0x1c84 <_Z11setupForFoxP5Fox_t+0x13a>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    1c44:	88 e5       	ldi	r24, 0x58	; 88
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <g_on_air_interval+0x1>
    1c4c:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <g_on_air_interval>
			g_number_of_foxes = 1;
    1c50:	21 e0       	ldi	r18, 0x01	; 1
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	30 93 42 05 	sts	0x0542, r19	; 0x800542 <g_number_of_foxes+0x1>
    1c58:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    1c5c:	28 e0       	ldi	r18, 0x08	; 8
    1c5e:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <_ZL19g_pattern_codespeed>
			g_id_interval = 600;
    1c62:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <g_id_interval+0x1>
    1c66:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    1c6a:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <_Z11setupForFoxP5Fox_t+0x12e>
    1c72:	8c e2       	ldi	r24, 0x2C	; 44
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <_Z11setupForFoxP5Fox_t+0x132>
    1c78:	88 e7       	ldi	r24, 0x78	; 120
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1c80:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
	}

	if(g_use_rtc_to_start)
    1c84:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_use_rtc_to_start>
    1c88:	88 23       	and	r24, r24
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <_Z11setupForFoxP5Fox_t+0x144>
    1c8c:	8a c0       	rjmp	.+276    	; 0x1da2 <_Z11setupForFoxP5Fox_t+0x258>
	{
		if(g_event_start_epoch < g_current_epoch)   /* timed event in progress */
    1c8e:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    1c92:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    1c96:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    1c9a:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    1c9e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    1ca2:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    1ca6:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    1caa:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1cae:	48 17       	cp	r20, r24
    1cb0:	59 07       	cpc	r21, r25
    1cb2:	6a 07       	cpc	r22, r26
    1cb4:	7b 07       	cpc	r23, r27
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <_Z11setupForFoxP5Fox_t+0x170>
    1cb8:	4d c0       	rjmp	.+154    	; 0x1d54 <_Z11setupForFoxP5Fox_t+0x20a>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;               /* Total elapsed time counter: synced at event start time */
    1cba:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    1cbe:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    1cc2:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    1cc6:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1cca:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    1cce:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    1cd2:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    1cd6:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    1cda:	84 1b       	sub	r24, r20
    1cdc:	95 0b       	sbc	r25, r21
    1cde:	a6 0b       	sbc	r26, r22
    1ce0:	b7 0b       	sbc	r27, r23
    1ce2:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_seconds_since_sync>
    1ce6:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_seconds_since_sync+0x1>
    1cea:	a0 93 5d 05 	sts	0x055D, r26	; 0x80055d <g_seconds_since_sync+0x2>
    1cee:	b0 93 5e 05 	sts	0x055E, r27	; 0x80055e <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    1cf2:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    1cf6:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
			g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    1cfa:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_code_throttle+0x1>
    1cfe:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_code_throttle>
			g_callsign_sent = FALSE;
    1d02:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_callsign_sent>

			g_fox_counter = 1 + (g_seconds_since_sync % g_on_air_interval);
    1d06:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_seconds_since_sync>
    1d0a:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_seconds_since_sync+0x1>
    1d0e:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_seconds_since_sync+0x2>
    1d12:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_seconds_since_sync+0x3>
    1d16:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <g_on_air_interval>
    1d1a:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <g_on_air_interval+0x1>
    1d1e:	03 2e       	mov	r0, r19
    1d20:	00 0c       	add	r0, r0
    1d22:	44 0b       	sbc	r20, r20
    1d24:	55 0b       	sbc	r21, r21
    1d26:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__divmodsi4>
    1d2a:	6f 5f       	subi	r22, 0xFF	; 255
    1d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2e:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <g_fox_counter+0x1>
    1d32:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1d36:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <g_fox_seconds_into_interval+0x1>
    1d3a:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1d3e:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_fox_transition>
			g_fox_id_offset = 0;
    1d42:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_id_offset+0x1>
    1d46:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    1d4a:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <g_time_to_ID>
			g_audio_tone_state = OFF;
    1d4e:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_audio_tone_state>
    1d52:	47 c0       	rjmp	.+142    	; 0x1de2 <_Z11setupForFoxP5Fox_t+0x298>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    1d54:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_seconds_since_sync>
    1d58:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_seconds_since_sync+0x1>
    1d5c:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_seconds_since_sync+0x2>
    1d60:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    1d64:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    1d68:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    1d6c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_code_throttle+0x1>
    1d70:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_code_throttle>
			g_callsign_sent = FALSE;
    1d74:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_callsign_sent>

			g_fox_counter = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    1d80:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1d84:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <g_fox_seconds_into_interval+0x1>
    1d88:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1d8c:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_fox_transition>
			g_fox_id_offset = 0;
    1d90:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_id_offset+0x1>
    1d94:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    1d98:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <g_time_to_ID>
			g_audio_tone_state = OFF;
    1d9c:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_audio_tone_state>
    1da0:	20 c0       	rjmp	.+64     	; 0x1de2 <_Z11setupForFoxP5Fox_t+0x298>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    1da2:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_seconds_since_sync>
    1da6:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_seconds_since_sync+0x1>
    1daa:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_seconds_since_sync+0x2>
    1dae:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    1db2:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    1db6:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    1dba:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_code_throttle+0x1>
    1dbe:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_code_throttle>
		g_callsign_sent = FALSE;
    1dc2:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_callsign_sent>

//		g_on_air_interval = 0;
		g_fox_seconds_into_interval = 0;
    1dc6:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <g_fox_seconds_into_interval+0x1>
    1dca:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval>
//		g_number_of_foxes = 0;
		g_fox_transition = FALSE;
    1dce:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_fox_transition>
		g_fox_id_offset = 0;
    1dd2:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <g_fox_id_offset+0x1>
    1dd6:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_fox_id_offset>
//		g_id_interval = 0;
		g_time_to_ID = FALSE;
    1dda:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <g_time_to_ID>
		g_audio_tone_state = OFF;
    1dde:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_audio_tone_state>
	}

	g_LEDs_Timed_Out = !g_enable_LEDs;
    1de2:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <_ZL13g_enable_LEDs>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	91 11       	cpse	r25, r1
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZL16g_LEDs_Timed_Out>
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	87 e0       	ldi	r24, 0x07	; 7
    1df4:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1df8:	08 95       	ret

00001dfa <__vector_1>:

/***********************************************************************
 * Handle RTC 1-second interrupts
 **********************************************************************/
ISR( INT0_vect )
{
    1dfa:	1f 92       	push	r1
    1dfc:	0f 92       	push	r0
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	0f 92       	push	r0
    1e02:	11 24       	eor	r1, r1
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	4f 93       	push	r20
    1e0a:	5f 93       	push	r21
    1e0c:	6f 93       	push	r22
    1e0e:	7f 93       	push	r23
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	af 93       	push	r26
    1e16:	bf 93       	push	r27
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
	static int id_countdown = 0;

	g_current_epoch++;
    1e1c:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    1e20:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    1e24:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    1e28:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	a1 1d       	adc	r26, r1
    1e30:	b1 1d       	adc	r27, r1
    1e32:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_current_epoch>
    1e36:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_current_epoch+0x1>
    1e3a:	a0 93 52 05 	sts	0x0552, r26	; 0x800552 <g_current_epoch+0x2>
    1e3e:	b0 93 53 05 	sts	0x0553, r27	; 0x800553 <g_current_epoch+0x3>

	if(g_temperature_check_countdown)
    1e42:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    1e46:	88 23       	and	r24, r24
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <__vector_1+0x5a>
	{
		g_temperature_check_countdown--;
    1e4a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    1e4e:	81 50       	subi	r24, 0x01	; 1
    1e50:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL29g_temperature_check_countdown>
		/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
		 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
	}

	if(g_transmissions_disabled)
    1e54:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1e58:	88 23       	and	r24, r24
    1e5a:	91 f1       	breq	.+100    	; 0x1ec0 <__vector_1+0xc6>
	{
		if(g_use_rtc_to_start)
    1e5c:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_use_rtc_to_start>
    1e60:	88 23       	and	r24, r24
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <__vector_1+0x6c>
    1e64:	4f c1       	rjmp	.+670    	; 0x2104 <__vector_1+0x30a>
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
    1e66:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_current_epoch>
    1e6a:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <g_current_epoch+0x1>
    1e6e:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch+0x2>
    1e72:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1e76:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    1e7a:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    1e7e:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    1e82:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    1e86:	48 17       	cp	r20, r24
    1e88:	59 07       	cpc	r21, r25
    1e8a:	6a 07       	cpc	r22, r26
    1e8c:	7b 07       	cpc	r23, r27
    1e8e:	08 f4       	brcc	.+2      	; 0x1e92 <__vector_1+0x98>
    1e90:	39 c1       	rjmp	.+626    	; 0x2104 <__vector_1+0x30a>
    1e92:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_current_epoch>
    1e96:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <g_current_epoch+0x1>
    1e9a:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch+0x2>
    1e9e:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1ea2:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    1ea6:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    1eaa:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    1eae:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    1eb2:	48 17       	cp	r20, r24
    1eb4:	59 07       	cpc	r21, r25
    1eb6:	6a 07       	cpc	r22, r26
    1eb8:	7b 07       	cpc	r23, r27
    1eba:	08 f4       	brcc	.+2      	; 0x1ebe <__vector_1+0xc4>
    1ebc:	e9 c0       	rjmp	.+466    	; 0x2090 <__vector_1+0x296>
    1ebe:	22 c1       	rjmp	.+580    	; 0x2104 <__vector_1+0x30a>
			}
		}
	}
	else
	{
		if(g_use_rtc_to_start)
    1ec0:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <g_use_rtc_to_start>
    1ec4:	88 23       	and	r24, r24
    1ec6:	f1 f0       	breq	.+60     	; 0x1f04 <__vector_1+0x10a>
		{
			if(g_current_epoch >= g_event_finish_epoch)
    1ec8:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_current_epoch>
    1ecc:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <g_current_epoch+0x1>
    1ed0:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch+0x2>
    1ed4:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x3>
    1ed8:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    1edc:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    1ee0:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    1ee4:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    1ee8:	48 17       	cp	r20, r24
    1eea:	59 07       	cpc	r21, r25
    1eec:	6a 07       	cpc	r22, r26
    1eee:	7b 07       	cpc	r23, r27
    1ef0:	48 f0       	brcs	.+18     	; 0x1f04 <__vector_1+0x10a>
			{
				g_use_rtc_to_start = FALSE;
    1ef2:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <g_use_rtc_to_start>
				g_transmissions_disabled = TRUE;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
				g_on_the_air = FALSE;
    1efc:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    1f00:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
			}
		}

		if(!g_transmissions_disabled)
    1f04:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1f08:	81 11       	cpse	r24, r1
    1f0a:	fc c0       	rjmp	.+504    	; 0x2104 <__vector_1+0x30a>
		{
			if(g_seconds_since_sync == 0)   /* sync just occurred */
    1f0c:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_seconds_since_sync>
    1f10:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_seconds_since_sync+0x1>
    1f14:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_seconds_since_sync+0x2>
    1f18:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_seconds_since_sync+0x3>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	8a 2b       	or	r24, r26
    1f20:	8b 2b       	or	r24, r27
    1f22:	81 f4       	brne	.+32     	; 0x1f44 <__vector_1+0x14a>
			{
				id_countdown = g_id_interval;
    1f24:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_id_interval>
    1f28:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <g_id_interval+0x1>
    1f2c:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <_ZZ10__vector_1E12id_countdown+0x1>
    1f30:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <_ZZ10__vector_1E12id_countdown>
				g_fox_counter = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    1f3c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
				g_lastSeconds = 0;
    1f40:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_lastSeconds>
				/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
				 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
			}

			g_seconds_since_sync++; /* Total elapsed time counter */
    1f44:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_seconds_since_sync>
    1f48:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_seconds_since_sync+0x1>
    1f4c:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_seconds_since_sync+0x2>
    1f50:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_seconds_since_sync+0x3>
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	a1 1d       	adc	r26, r1
    1f58:	b1 1d       	adc	r27, r1
    1f5a:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_seconds_since_sync>
    1f5e:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <g_seconds_since_sync+0x1>
    1f62:	a0 93 5d 05 	sts	0x055D, r26	; 0x80055d <g_seconds_since_sync+0x2>
    1f66:	b0 93 5e 05 	sts	0x055E, r27	; 0x80055e <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval++;
    1f6a:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_fox_seconds_into_interval>
    1f6e:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <g_fox_seconds_into_interval+0x1>
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <g_fox_seconds_into_interval+0x1>
    1f78:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <g_fox_seconds_into_interval>

			if(id_countdown)
    1f7c:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZZ10__vector_1E12id_countdown>
    1f80:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZZ10__vector_1E12id_countdown+0x1>
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	29 f0       	breq	.+10     	; 0x1f92 <__vector_1+0x198>
			{
				id_countdown--;
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <_ZZ10__vector_1E12id_countdown+0x1>
    1f8e:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <_ZZ10__vector_1E12id_countdown>
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
    1f92:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <g_number_of_foxes>
    1f96:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <g_number_of_foxes+0x1>
    1f9a:	89 2b       	or	r24, r25
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <__vector_1+0x1a6>
    1f9e:	55 c0       	rjmp	.+170    	; 0x204a <__vector_1+0x250>
    1fa0:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <g_seconds_since_sync>
    1fa4:	70 91 5c 05 	lds	r23, 0x055C	; 0x80055c <g_seconds_since_sync+0x1>
    1fa8:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_seconds_since_sync+0x2>
    1fac:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_seconds_since_sync+0x3>
    1fb0:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <g_on_air_interval>
    1fb4:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <g_on_air_interval+0x1>
    1fb8:	03 2e       	mov	r0, r19
    1fba:	00 0c       	add	r0, r0
    1fbc:	44 0b       	sbc	r20, r20
    1fbe:	55 0b       	sbc	r21, r21
    1fc0:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__divmodsi4>
    1fc4:	67 2b       	or	r22, r23
    1fc6:	68 2b       	or	r22, r24
    1fc8:	69 2b       	or	r22, r25
    1fca:	09 f4       	brne	.+2      	; 0x1fce <__vector_1+0x1d4>
    1fcc:	68 c0       	rjmp	.+208    	; 0x209e <__vector_1+0x2a4>
    1fce:	3d c0       	rjmp	.+122    	; 0x204a <__vector_1+0x250>
			{
				g_fox_counter++;

				if(g_fox_counter > g_number_of_foxes)
				{
					g_fox_counter = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    1fd8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

					if(g_sync_enabled)
    1fdc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    1fe0:	88 23       	and	r24, r24
    1fe2:	a1 f0       	breq	.+40     	; 0x200c <__vector_1+0x212>
					{
						PCMSK2 &= ~(1 << PCINT20);  /* Disable PCINT20 */
    1fe4:	ed e6       	ldi	r30, 0x6D	; 109
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 7e       	andi	r24, 0xEF	; 239
    1fec:	80 83       	st	Z, r24
						PCICR &= ~(1 << PCIE2);     /* Disable pin change interrupt 2 */
    1fee:	e8 e6       	ldi	r30, 0x68	; 104
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8b 7f       	andi	r24, 0xFB	; 251
    1ff6:	80 83       	st	Z, r24
						pinMode(PIN_SYNC, INPUT);
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	84 e0       	ldi	r24, 0x04	; 4
    1ffc:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
						pinMode(PIN_SYNC, OUTPUT);  /* Set sync pin as output low */
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	84 e0       	ldi	r24, 0x04	; 4
    2004:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
						g_sync_enabled = FALSE;
    2008:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_sync_enabled>
					}

					g_LEDs_Timed_Out = TRUE;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZL16g_LEDs_Timed_Out>
					digitalWrite(PIN_LED2, OFF);
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	87 e0       	ldi	r24, 0x07	; 7
    2016:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
				}
				g_fox_transition = TRUE;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <g_fox_transition>
				g_fox_seconds_into_interval = 0;
    2020:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <g_fox_seconds_into_interval+0x1>
    2024:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_seconds_into_interval>

				if(!id_countdown)
    2028:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZZ10__vector_1E12id_countdown>
    202c:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZZ10__vector_1E12id_countdown+0x1>
    2030:	89 2b       	or	r24, r25
    2032:	59 f4       	brne	.+22     	; 0x204a <__vector_1+0x250>
				{
					id_countdown = g_id_interval;
    2034:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_id_interval>
    2038:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <g_id_interval+0x1>
    203c:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <_ZZ10__vector_1E12id_countdown+0x1>
    2040:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <_ZZ10__vector_1E12id_countdown>
					g_time_to_ID = TRUE;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <g_time_to_ID>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
    204a:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <_ZL20g_enable_start_timer>
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <__vector_1+0x25a>
    2052:	56 c0       	rjmp	.+172    	; 0x2100 <__vector_1+0x306>
    2054:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_seconds_since_sync>
    2058:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_seconds_since_sync+0x1>
    205c:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_seconds_since_sync+0x2>
    2060:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_seconds_since_sync+0x3>
    2064:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    2068:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	65 5f       	subi	r22, 0xF5	; 245
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	8f 4f       	sbci	r24, 0xFF	; 255
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	03 2e       	mov	r0, r19
    207a:	00 0c       	add	r0, r0
    207c:	44 0b       	sbc	r20, r20
    207e:	55 0b       	sbc	r21, r21
    2080:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__divmodsi4>
    2084:	6b 30       	cpi	r22, 0x0B	; 11
    2086:	71 05       	cpc	r23, r1
    2088:	81 05       	cpc	r24, r1
    208a:	91 05       	cpc	r25, r1
    208c:	f4 f0       	brlt	.+60     	; 0x20ca <__vector_1+0x2d0>
    208e:	38 c0       	rjmp	.+112    	; 0x2100 <__vector_1+0x306>
	{
		if(g_use_rtc_to_start)
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
			{
				setupForFox(NULL);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z11setupForFoxP5Fox_t>
				g_transmissions_disabled = FALSE;
    2098:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
    209c:	33 c0       	rjmp	.+102    	; 0x2104 <__vector_1+0x30a>
				id_countdown--;
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
			{
				g_fox_counter++;
    209e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    20a2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    20ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

				if(g_fox_counter > g_number_of_foxes)
    20b0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    20b4:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    20b8:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <g_number_of_foxes>
    20bc:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <g_number_of_foxes+0x1>
    20c0:	82 17       	cp	r24, r18
    20c2:	93 07       	cpc	r25, r19
    20c4:	0c f4       	brge	.+2      	; 0x20c8 <__vector_1+0x2ce>
    20c6:	84 cf       	rjmp	.-248    	; 0x1fd0 <__vector_1+0x1d6>
    20c8:	a8 cf       	rjmp	.-176    	; 0x201a <__vector_1+0x220>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
			{
				g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    20ca:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_seconds_since_sync>
    20ce:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <g_seconds_since_sync+0x1>
    20d2:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <g_seconds_since_sync+0x2>
    20d6:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <g_seconds_since_sync+0x3>
    20da:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    20de:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	65 5f       	subi	r22, 0xF5	; 245
    20e8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ea:	8f 4f       	sbci	r24, 0xFF	; 255
    20ec:	9f 4f       	sbci	r25, 0xFF	; 255
    20ee:	03 2e       	mov	r0, r19
    20f0:	00 0c       	add	r0, r0
    20f2:	44 0b       	sbc	r20, r20
    20f4:	55 0b       	sbc	r21, r21
    20f6:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__divmodsi4>
    20fa:	60 93 39 05 	sts	0x0539, r22	; 0x800539 <g_lastSeconds>
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <__vector_1+0x30a>
			}
			else
			{
				g_lastSeconds = 0;
    2100:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_lastSeconds>
			}
		}
	}
}   /* end of INT0 ISR */
    2104:	ff 91       	pop	r31
    2106:	ef 91       	pop	r30
    2108:	bf 91       	pop	r27
    210a:	af 91       	pop	r26
    210c:	9f 91       	pop	r25
    210e:	8f 91       	pop	r24
    2110:	7f 91       	pop	r23
    2112:	6f 91       	pop	r22
    2114:	5f 91       	pop	r21
    2116:	4f 91       	pop	r20
    2118:	3f 91       	pop	r19
    211a:	2f 91       	pop	r18
    211c:	0f 90       	pop	r0
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	0f 90       	pop	r0
    2122:	1f 90       	pop	r1
    2124:	18 95       	reti

00002126 <_Z12permCallsignPc>:
	g_LEDs_Timed_Out = !g_enable_LEDs;
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
}

void permCallsign(char* call)
{
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
	uint8_t i;

	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);
    212c:	44 e1       	ldi	r20, 0x14	; 20
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	bc 01       	movw	r22, r24
    2132:	8d e1       	ldi	r24, 0x1D	; 29
    2134:	95 e0       	ldi	r25, 0x05	; 5
    2136:	0e 94 b2 29 	call	0x5364	; 0x5364 <strncpy>

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    213a:	c0 e0       	ldi	r28, 0x00	; 0
    213c:	0d e1       	ldi	r16, 0x1D	; 29
    213e:	15 e0       	ldi	r17, 0x05	; 5
    2140:	f8 01       	movw	r30, r16
    2142:	01 90       	ld	r0, Z+
    2144:	00 20       	and	r0, r0
    2146:	e9 f7       	brne	.-6      	; 0x2142 <_Z12permCallsignPc+0x1c>
    2148:	cf 01       	movw	r24, r30
    214a:	8e 51       	subi	r24, 0x1E	; 30
    214c:	95 40       	sbci	r25, 0x05	; 5
    214e:	2c 2f       	mov	r18, r28
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	28 17       	cp	r18, r24
    2154:	39 07       	cpc	r19, r25
    2156:	58 f4       	brcc	.+22     	; 0x216e <_Z12permCallsignPc+0x48>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    2158:	c9 01       	movw	r24, r18
    215a:	fc 01       	movw	r30, r24
    215c:	e8 5f       	subi	r30, 0xF8	; 248
    215e:	fa 4f       	sbci	r31, 0xFA	; 250
    2160:	65 89       	ldd	r22, Z+21	; 0x15
    2162:	8e 52       	subi	r24, 0x2E	; 46
    2164:	9d 4f       	sbci	r25, 0xFD	; 253
    2166:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
{
	uint8_t i;

	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    216a:	cf 5f       	subi	r28, 0xFF	; 255
    216c:	e9 cf       	rjmp	.-46     	; 0x2140 <_Z12permCallsignPc+0x1a>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    216e:	8c 2f       	mov	r24, r28
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	8e 52       	subi	r24, 0x2E	; 46
    2176:	9d 4f       	sbci	r25, 0xFD	; 253
    2178:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
}
    217c:	cf 91       	pop	r28
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	08 95       	ret

00002184 <_Z7permFox5Fox_t>:

void permFox(Fox_t fox)
{
	eeprom_update_byte((uint8_t*)&ee_fox_setting,(uint8_t)fox);
    2184:	68 2f       	mov	r22, r24
    2186:	88 e5       	ldi	r24, 0x58	; 88
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
    218e:	08 95       	ret

00002190 <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
void processKey(char key)
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	1f 92       	push	r1
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	static int digits;
	static int value;
	static int stringLength;
	static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };

	if(key == '*')
    219a:	8a 32       	cpi	r24, 0x2A	; 42
    219c:	99 f4       	brne	.+38     	; 0x21c4 <_Z10processKeyc+0x34>
	{
		state = STATE_SENTENCE_START;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    21a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    21aa:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    21ae:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_ZZ10processKeycE12stringLength>
			value = 0;
    21b2:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <_ZZ10processKeycE5value+0x1>
    21b6:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZZ10processKeycE5value>
			digits = 0;
    21ba:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZZ10processKeycE6digits+0x1>
    21be:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <_ZZ10processKeycE6digits>
    21c2:	af c1       	rjmp	.+862    	; 0x2522 <_Z10processKeyc+0x392>
	if(key == '*')
	{
		state = STATE_SENTENCE_START;
	}

	switch(state)
    21c4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    21c8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    21cc:	31 97       	sbiw	r30, 0x01	; 1
    21ce:	ed 30       	cpi	r30, 0x0D	; 13
    21d0:	f1 05       	cpc	r31, r1
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <_Z10processKeyc+0x46>
    21d4:	a6 c1       	rjmp	.+844    	; 0x2522 <_Z10processKeyc+0x392>
    21d6:	e5 58       	subi	r30, 0x85	; 133
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    21de:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    21e2:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_ZZ10processKeycE12stringLength>
			value = 0;
    21e6:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <_ZZ10processKeycE5value+0x1>
    21ea:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_ZZ10processKeycE5value>
			digits = 0;
    21ee:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZZ10processKeycE6digits+0x1>
    21f2:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <_ZZ10processKeycE6digits>

			if(key == 'C')
    21f6:	83 34       	cpi	r24, 0x43	; 67
    21f8:	39 f4       	brne	.+14     	; 0x2208 <_Z10processKeyc+0x78>
			{
				state = STATE_C;
    21fa:	86 e0       	ldi	r24, 0x06	; 6
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2202:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2206:	8d c1       	rjmp	.+794    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == 'A')
    2208:	81 34       	cpi	r24, 0x41	; 65
    220a:	39 f4       	brne	.+14     	; 0x221a <_Z10processKeyc+0x8a>
			{
				state = STATE_A;
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2218:	84 c1       	rjmp	.+776    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key != '*')
    221a:	8a 32       	cpi	r24, 0x2A	; 42
    221c:	09 f4       	brne	.+2      	; 0x2220 <_Z10processKeyc+0x90>
    221e:	81 c1       	rjmp	.+770    	; 0x2522 <_Z10processKeyc+0x392>
			{
				value = key - '0';
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	c0 97       	sbiw	r24, 0x30	; 48
    2224:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <_ZZ10processKeycE5value+0x1>
    2228:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZZ10processKeycE5value>
				setupPorts();
    222c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_Z10setupPortsv>
				state = STATE_TEST_ATTENUATOR;
    2230:	8d e0       	ldi	r24, 0x0D	; 13
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2238:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    223c:	72 c1       	rjmp	.+740    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_A:
		{
			if(key == '0')
    223e:	80 33       	cpi	r24, 0x30	; 48
    2240:	39 f4       	brne	.+14     	; 0x2250 <_Z10processKeyc+0xc0>
			{
				state = STATE_PAUSE_TRANSMISSIONS;
    2242:	83 e0       	ldi	r24, 0x03	; 3
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    224a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    224e:	69 c1       	rjmp	.+722    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '1')
    2250:	81 33       	cpi	r24, 0x31	; 49
    2252:	39 f4       	brne	.+14     	; 0x2262 <_Z10processKeyc+0xd2>
			{
				state = STATE_START_TRANSMISSIONS;
    2254:	84 e0       	ldi	r24, 0x04	; 4
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    225c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2260:	60 c1       	rjmp	.+704    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '2')
    2262:	82 33       	cpi	r24, 0x32	; 50
    2264:	09 f0       	breq	.+2      	; 0x2268 <_Z10processKeyc+0xd8>
    2266:	5d c1       	rjmp	.+698    	; 0x2522 <_Z10processKeyc+0x392>
			{
				state = STATE_RESTART_TRANSMISSIONS;
    2268:	85 e0       	ldi	r24, 0x05	; 5
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2270:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2274:	56 c1       	rjmp	.+684    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_PAUSE_TRANSMISSIONS:
		{
			if(key == '#')
    2276:	83 32       	cpi	r24, 0x23	; 35
    2278:	09 f0       	breq	.+2      	; 0x227c <_Z10processKeyc+0xec>
    227a:	53 c1       	rjmp	.+678    	; 0x2522 <_Z10processKeyc+0x392>
			{
				state = STATE_SHUTDOWN;
    227c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2280:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2284:	4e c1       	rjmp	.+668    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_C:
		{
			if(key == '1')
    2286:	81 33       	cpi	r24, 0x31	; 49
    2288:	39 f4       	brne	.+14     	; 0x2298 <_Z10processKeyc+0x108>
			{
				state = STATE_RECEIVING_CALLSIGN;
    228a:	87 e0       	ldi	r24, 0x07	; 7
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2292:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2296:	45 c1       	rjmp	.+650    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '2')
    2298:	82 33       	cpi	r24, 0x32	; 50
    229a:	39 f4       	brne	.+14     	; 0x22aa <_Z10processKeyc+0x11a>
			{
				state = STATE_RECEIVING_FOXFORMATANDID;
    229c:	88 e0       	ldi	r24, 0x08	; 8
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    22a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    22a8:	3c c1       	rjmp	.+632    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '4')
    22aa:	84 33       	cpi	r24, 0x34	; 52
    22ac:	39 f4       	brne	.+14     	; 0x22bc <_Z10processKeyc+0x12c>
			{
				state = STATE_RECEIVING_START_TIME;
    22ae:	89 e0       	ldi	r24, 0x09	; 9
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    22b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    22ba:	33 c1       	rjmp	.+614    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '5')
    22bc:	85 33       	cpi	r24, 0x35	; 53
    22be:	39 f4       	brne	.+14     	; 0x22ce <_Z10processKeyc+0x13e>
			{
				state = STATE_RECEIVING_FINISH_TIME;
    22c0:	8a e0       	ldi	r24, 0x0A	; 10
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    22c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    22cc:	2a c1       	rjmp	.+596    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '6')
    22ce:	86 33       	cpi	r24, 0x36	; 54
    22d0:	39 f4       	brne	.+14     	; 0x22e0 <_Z10processKeyc+0x150>
			{
				state = STATE_RECEIVING_START_NOW;
    22d2:	8b e0       	ldi	r24, 0x0B	; 11
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    22da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    22de:	21 c1       	rjmp	.+578    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if(key == '7') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    22e0:	87 33       	cpi	r24, 0x37	; 55
    22e2:	39 f4       	brne	.+14     	; 0x22f2 <_Z10processKeyc+0x162>
			{
				state = STATE_RECEIVING_SET_CLOCK;
    22e4:	8c e0       	ldi	r24, 0x0C	; 12
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    22ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    22f0:	18 c1       	rjmp	.+560    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else
			{
				state = STATE_SHUTDOWN;
    22f2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    22f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    22fa:	13 c1       	rjmp	.+550    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_RECEIVING_CALLSIGN:
		{
			if(key == '#')
    22fc:	83 32       	cpi	r24, 0x23	; 35
    22fe:	71 f4       	brne	.+28     	; 0x231c <_Z10processKeyc+0x18c>
			{
				permCallsign(receivedString);
    2300:	87 e5       	ldi	r24, 0x57	; 87
    2302:	94 e0       	ldi	r25, 0x04	; 4
    2304:	0e 94 93 10 	call	0x2126	; 0x2126 <_Z12permCallsignPc>
				lb_send_string(receivedString,FALSE);
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	87 e5       	ldi	r24, 0x57	; 87
    230c:	94 e0       	ldi	r25, 0x04	; 4
    230e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
				state = STATE_SHUTDOWN;
    2312:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2316:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    231a:	03 c1       	rjmp	.+518    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if((key >= '0') && (key <= '9'))
    231c:	90 ed       	ldi	r25, 0xD0	; 208
    231e:	98 0f       	add	r25, r24
    2320:	9a 30       	cpi	r25, 0x0A	; 10
    2322:	08 f0       	brcs	.+2      	; 0x2326 <_Z10processKeyc+0x196>
    2324:	fe c0       	rjmp	.+508    	; 0x2522 <_Z10processKeyc+0x392>
			{
				if(digits)
    2326:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <_ZZ10processKeycE6digits>
    232a:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <_ZZ10processKeycE6digits+0x1>
    232e:	23 2b       	or	r18, r19
    2330:	c1 f1       	breq	.+112    	; 0x23a2 <_Z10processKeyc+0x212>
				{
					value = value * 10 + (key - '0');
    2332:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <_ZZ10processKeycE5value>
    2336:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <_ZZ10processKeycE5value+0x1>
    233a:	a9 01       	movw	r20, r18
    233c:	44 0f       	add	r20, r20
    233e:	55 1f       	adc	r21, r21
    2340:	22 0f       	add	r18, r18
    2342:	33 1f       	adc	r19, r19
    2344:	22 0f       	add	r18, r18
    2346:	33 1f       	adc	r19, r19
    2348:	22 0f       	add	r18, r18
    234a:	33 1f       	adc	r19, r19
    234c:	24 0f       	add	r18, r20
    234e:	35 1f       	adc	r19, r21
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	c0 97       	sbiw	r24, 0x30	; 48
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <_ZZ10processKeycE5value+0x1>
    235c:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZZ10processKeycE5value>
					if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    2360:	87 32       	cpi	r24, 0x27	; 39
    2362:	91 05       	cpc	r25, r1
    2364:	cc f4       	brge	.+50     	; 0x2398 <_Z10processKeyc+0x208>
    2366:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <_ZZ10processKeycE12stringLength>
    236a:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    236e:	24 31       	cpi	r18, 0x14	; 20
    2370:	31 05       	cpc	r19, r1
    2372:	94 f4       	brge	.+36     	; 0x2398 <_Z10processKeyc+0x208>
					{
						receivedString[stringLength] = keyMorse[value];
    2374:	f9 01       	movw	r30, r18
    2376:	e9 5a       	subi	r30, 0xA9	; 169
    2378:	fb 4f       	sbci	r31, 0xFB	; 251
    237a:	dc 01       	movw	r26, r24
    237c:	a5 5d       	subi	r26, 0xD5	; 213
    237e:	bd 4f       	sbci	r27, 0xFD	; 253
    2380:	8c 91       	ld	r24, X
    2382:	80 83       	st	Z, r24
						stringLength++;
    2384:	2f 5f       	subi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	30 93 71 04 	sts	0x0471, r19	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    238c:	20 93 70 04 	sts	0x0470, r18	; 0x800470 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    2390:	f9 01       	movw	r30, r18
    2392:	e9 5a       	subi	r30, 0xA9	; 169
    2394:	fb 4f       	sbci	r31, 0xFB	; 251
    2396:	10 82       	st	Z, r1
					}

					digits = 0;
    2398:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZZ10processKeycE6digits+0x1>
    239c:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <_ZZ10processKeycE6digits>
    23a0:	c0 c0       	rjmp	.+384    	; 0x2522 <_Z10processKeyc+0x392>
				}
				else
				{
					value = key - '0';
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	c0 97       	sbiw	r24, 0x30	; 48
    23a6:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <_ZZ10processKeycE5value+0x1>
    23aa:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZZ10processKeycE5value>
					digits = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <_ZZ10processKeycE6digits+0x1>
    23b6:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <_ZZ10processKeycE6digits>
    23ba:	b3 c0       	rjmp	.+358    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_RECEIVING_FOXFORMATANDID:
		{
			if(key == '#')
    23bc:	83 32       	cpi	r24, 0x23	; 35
    23be:	c1 f4       	brne	.+48     	; 0x23f0 <_Z10processKeyc+0x260>
			{
				if((value >= BEACON) && (value < INVALID_FOX))
    23c0:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_ZZ10processKeycE5value>
    23c4:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <_ZZ10processKeycE5value+0x1>
    23c8:	86 31       	cpi	r24, 0x16	; 22
    23ca:	91 05       	cpc	r25, r1
    23cc:	60 f4       	brcc	.+24     	; 0x23e6 <_Z10processKeyc+0x256>
				{
					Fox_t holdFox = (Fox_t)value;
    23ce:	89 83       	std	Y+1, r24	; 0x01
					permFox(holdFox);
    23d0:	0e 94 c2 10 	call	0x2184	; 0x2184 <_Z7permFox5Fox_t>
					if(holdFox != g_fox)
    23d4:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    23d8:	99 81       	ldd	r25, Y+1	; 0x01
    23da:	98 17       	cp	r25, r24
    23dc:	21 f0       	breq	.+8      	; 0x23e6 <_Z10processKeyc+0x256>
					{
						setupForFox(&holdFox);
    23de:	ce 01       	movw	r24, r28
    23e0:	01 96       	adiw	r24, 0x01	; 1
    23e2:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z11setupForFoxP5Fox_t>
					}
				}
				state = STATE_SHUTDOWN;
    23e6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    23ee:	99 c0       	rjmp	.+306    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if((key >= '0') && (key <= '9'))
    23f0:	90 ed       	ldi	r25, 0xD0	; 208
    23f2:	98 0f       	add	r25, r24
    23f4:	9a 30       	cpi	r25, 0x0A	; 10
    23f6:	08 f0       	brcs	.+2      	; 0x23fa <_Z10processKeyc+0x26a>
    23f8:	94 c0       	rjmp	.+296    	; 0x2522 <_Z10processKeyc+0x392>
			{
				value += key - '0';
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	c0 97       	sbiw	r24, 0x30	; 48
    23fe:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <_ZZ10processKeycE5value>
    2402:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <_ZZ10processKeycE5value+0x1>
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <_ZZ10processKeycE5value+0x1>
    240e:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZZ10processKeycE5value>
    2412:	87 c0       	rjmp	.+270    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_RECEIVING_START_TIME:
		{
			if(key == '#')
    2414:	83 32       	cpi	r24, 0x23	; 35
    2416:	09 f0       	breq	.+2      	; 0x241a <_Z10processKeyc+0x28a>
    2418:	84 c0       	rjmp	.+264    	; 0x2522 <_Z10processKeyc+0x392>
			{
				state = STATE_SHUTDOWN;
    241a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    241e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2422:	7f c0       	rjmp	.+254    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_RECEIVING_FINISH_TIME:
		{
			if(key == '#')
    2424:	83 32       	cpi	r24, 0x23	; 35
    2426:	09 f0       	breq	.+2      	; 0x242a <_Z10processKeyc+0x29a>
    2428:	7c c0       	rjmp	.+248    	; 0x2522 <_Z10processKeyc+0x392>
			{
				state = STATE_SHUTDOWN;
    242a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    242e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2432:	77 c0       	rjmp	.+238    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_RECEIVING_START_NOW:
		{
			if(key == '#')
    2434:	83 32       	cpi	r24, 0x23	; 35
    2436:	09 f0       	breq	.+2      	; 0x243a <_Z10processKeyc+0x2aa>
    2438:	74 c0       	rjmp	.+232    	; 0x2522 <_Z10processKeyc+0x392>
			{
				state = STATE_SHUTDOWN;
    243a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    243e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2442:	6f c0       	rjmp	.+222    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;

		case STATE_RECEIVING_SET_CLOCK:
		{
			if(key == '#')
    2444:	83 32       	cpi	r24, 0x23	; 35
    2446:	79 f4       	brne	.+30     	; 0x2466 <_Z10processKeyc+0x2d6>
			{
				if(stringLength == 12)
    2448:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZZ10processKeycE12stringLength>
    244c:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    2450:	0c 97       	sbiw	r24, 0x0c	; 12
    2452:	21 f4       	brne	.+8      	; 0x245c <_Z10processKeyc+0x2cc>
				{
					rv3028_set_date_time(receivedString);   /* String format "YYMMDDhhmmss" */
    2454:	87 e5       	ldi	r24, 0x57	; 87
    2456:	94 e0       	ldi	r25, 0x04	; 4
    2458:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_Z20rv3028_set_date_timePc>
				}

				state = STATE_SHUTDOWN;
    245c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2460:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    2464:	5e c0       	rjmp	.+188    	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if((key >= '0') && (key <= '9'))
    2466:	90 ed       	ldi	r25, 0xD0	; 208
    2468:	98 0f       	add	r25, r24
    246a:	9a 30       	cpi	r25, 0x0A	; 10
    246c:	08 f0       	brcs	.+2      	; 0x2470 <_Z10processKeyc+0x2e0>
    246e:	59 c0       	rjmp	.+178    	; 0x2522 <_Z10processKeyc+0x392>
			{
				if(stringLength < MAX_DTMF_ARG_LENGTH)
    2470:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <_ZZ10processKeycE12stringLength>
    2474:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    2478:	28 32       	cpi	r18, 0x28	; 40
    247a:	31 05       	cpc	r19, r1
    247c:	0c f0       	brlt	.+2      	; 0x2480 <_Z10processKeyc+0x2f0>
    247e:	51 c0       	rjmp	.+162    	; 0x2522 <_Z10processKeyc+0x392>
				{
					receivedString[stringLength] = key;
    2480:	f9 01       	movw	r30, r18
    2482:	e9 5a       	subi	r30, 0xA9	; 169
    2484:	fb 4f       	sbci	r31, 0xFB	; 251
    2486:	80 83       	st	Z, r24
					stringLength++;
    2488:	2f 5f       	subi	r18, 0xFF	; 255
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
    248c:	30 93 71 04 	sts	0x0471, r19	; 0x800471 <_ZZ10processKeycE12stringLength+0x1>
    2490:	20 93 70 04 	sts	0x0470, r18	; 0x800470 <_ZZ10processKeycE12stringLength>
					receivedString[stringLength] = '\0';
    2494:	f9 01       	movw	r30, r18
    2496:	e9 5a       	subi	r30, 0xA9	; 169
    2498:	fb 4f       	sbci	r31, 0xFB	; 251
    249a:	10 82       	st	Z, r1
    249c:	42 c0       	rjmp	.+132    	; 0x2522 <_Z10processKeyc+0x392>
		}
		break;
		
		case STATE_TEST_ATTENUATOR:
		{
			if(key == '#')
    249e:	83 32       	cpi	r24, 0x23	; 35
    24a0:	29 f5       	brne	.+74     	; 0x24ec <_Z10processKeyc+0x35c>
			{
				if(value == 0)
    24a2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_ZZ10processKeycE5value>
    24a6:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <_ZZ10processKeycE5value+0x1>
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	51 f4       	brne	.+20     	; 0x24c2 <_Z10processKeyc+0x332>
				{
					setAtten(0);
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 a0 02 	call	0x540	; 0x540 <_Z8setAttenj>
					TIMSK1 |= (1 << OCIE1A); /* start timer 1 interrupts */
    24b6:	ef e6       	ldi	r30, 0x6F	; 111
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	82 60       	ori	r24, 0x02	; 2
    24be:	80 83       	st	Z, r24
    24c0:	10 c0       	rjmp	.+32     	; 0x24e2 <_Z10processKeyc+0x352>
				}
				else if(value > 315)
    24c2:	8c 33       	cpi	r24, 0x3C	; 60
    24c4:	21 e0       	ldi	r18, 0x01	; 1
    24c6:	92 07       	cpc	r25, r18
    24c8:	54 f0       	brlt	.+20     	; 0x24de <_Z10processKeyc+0x34e>
				{
					TIMSK1 &= ~(1 << OCIE1A); /* stop timer 1 interrupts */
    24ca:	ef e6       	ldi	r30, 0x6F	; 111
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8d 7f       	andi	r24, 0xFD	; 253
    24d2:	80 83       	st	Z, r24
					setAtten(315);
    24d4:	8b e3       	ldi	r24, 0x3B	; 59
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	0e 94 a0 02 	call	0x540	; 0x540 <_Z8setAttenj>
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <_Z10processKeyc+0x352>
				}
				else
				{
					setAtten(value);
    24de:	0e 94 a0 02 	call	0x540	; 0x540 <_Z8setAttenj>
				}

				state = STATE_SHUTDOWN;
    24e2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    24e6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    24ea:	1b c0       	rjmp	.+54     	; 0x2522 <_Z10processKeyc+0x392>
			}
			else if((key >= '0') && (key <= '9'))
    24ec:	90 ed       	ldi	r25, 0xD0	; 208
    24ee:	98 0f       	add	r25, r24
    24f0:	9a 30       	cpi	r25, 0x0A	; 10
    24f2:	b8 f4       	brcc	.+46     	; 0x2522 <_Z10processKeyc+0x392>
			{
				value *= 10;
				value += key - '0';
    24f4:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <_ZZ10processKeycE5value>
    24f8:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <_ZZ10processKeycE5value+0x1>
    24fc:	a9 01       	movw	r20, r18
    24fe:	44 0f       	add	r20, r20
    2500:	55 1f       	adc	r21, r21
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	22 0f       	add	r18, r18
    2508:	33 1f       	adc	r19, r19
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	24 0f       	add	r18, r20
    2510:	35 1f       	adc	r19, r21
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	c0 97       	sbiw	r24, 0x30	; 48
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <_ZZ10processKeycE5value+0x1>
    251e:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZZ10processKeycE5value>
			}
		}
		break;
	}
}
    2522:	0f 90       	pop	r0
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	08 95       	ret

0000252a <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    252a:	ea e7       	ldi	r30, 0x7A	; 122
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	86 fd       	sbrc	r24, 6
    2532:	fd cf       	rjmp	.-6      	; 0x252e <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    2534:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2538:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    253c:	ea e7       	ldi	r30, 0x7A	; 122
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	90 81       	ld	r25, Z
    2542:	90 64       	ori	r25, 0x40	; 64
    2544:	90 83       	st	Z, r25
	return( result);
}
    2546:	c9 01       	movw	r24, r18
    2548:	08 95       	ret

0000254a <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    254a:	88 ec       	ldi	r24, 0xC8	; 200
    254c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    2550:	ea e7       	ldi	r30, 0x7A	; 122
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	87 e0       	ldi	r24, 0x07	; 7
    2556:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    2558:	80 81       	ld	r24, Z
    255a:	80 68       	ori	r24, 0x80	; 128
    255c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    255e:	80 81       	ld	r24, Z
    2560:	80 64       	ori	r24, 0x40	; 64
    2562:	80 83       	st	Z, r24
	readADC();
    2564:	0e 94 95 12 	call	0x252a	; 0x252a <_Z7readADCv>
    2568:	08 95       	ret

0000256a <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
	float offset = CLAMP(-200.,(float)g_atmega_temp_calibration / 10.,200.);
    2572:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    2576:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    257a:	07 2e       	mov	r0, r23
    257c:	00 0c       	add	r0, r0
    257e:	88 0b       	sbc	r24, r24
    2580:	99 0b       	sbc	r25, r25
    2582:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__floatsisf>
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	51 e4       	ldi	r21, 0x41	; 65
    258e:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__divsf3>
    2592:	06 2f       	mov	r16, r22
    2594:	17 2f       	mov	r17, r23
    2596:	d8 2f       	mov	r29, r24
    2598:	c9 2f       	mov	r28, r25
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	48 e4       	ldi	r20, 0x48	; 72
    25a0:	53 e4       	ldi	r21, 0x43	; 67
    25a2:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__gesf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	6c f0       	brlt	.+26     	; 0x25c4 <_Z7getTempv+0x5a>
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	48 e4       	ldi	r20, 0x48	; 72
    25b0:	53 ec       	ldi	r21, 0xC3	; 195
    25b2:	60 2f       	mov	r22, r16
    25b4:	71 2f       	mov	r23, r17
    25b6:	8d 2f       	mov	r24, r29
    25b8:	9c 2f       	mov	r25, r28
    25ba:	0e 94 ed 24 	call	0x49da	; 0x49da <__cmpsf2>
    25be:	88 23       	and	r24, r24
    25c0:	34 f0       	brlt	.+12     	; 0x25ce <_Z7getTempv+0x64>
    25c2:	09 c0       	rjmp	.+18     	; 0x25d6 <_Z7getTempv+0x6c>
    25c4:	00 e0       	ldi	r16, 0x00	; 0
    25c6:	10 e0       	ldi	r17, 0x00	; 0
    25c8:	d8 e4       	ldi	r29, 0x48	; 72
    25ca:	c3 e4       	ldi	r28, 0x43	; 67
    25cc:	04 c0       	rjmp	.+8      	; 0x25d6 <_Z7getTempv+0x6c>
    25ce:	00 e0       	ldi	r16, 0x00	; 0
    25d0:	10 e0       	ldi	r17, 0x00	; 0
    25d2:	d8 e4       	ldi	r29, 0x48	; 72
    25d4:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    25d6:	0e 94 95 12 	call	0x252a	; 0x252a <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    25da:	0e 94 95 12 	call	0x252a	; 0x252a <_Z7readADCv>
    25de:	bc 01       	movw	r22, r24
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <__floatunsisf>
    25e8:	2e ea       	ldi	r18, 0xAE	; 174
    25ea:	37 e2       	ldi	r19, 0x27	; 39
    25ec:	42 ea       	ldi	r20, 0xA2	; 162
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	0e 94 80 24 	call	0x4900	; 0x4900 <__subsf3>
    25f4:	26 ef       	ldi	r18, 0xF6	; 246
    25f6:	38 e2       	ldi	r19, 0x28	; 40
    25f8:	4c e9       	ldi	r20, 0x9C	; 156
    25fa:	5f e3       	ldi	r21, 0x3F	; 63
    25fc:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__divsf3>
    2600:	20 2f       	mov	r18, r16
    2602:	31 2f       	mov	r19, r17
    2604:	4d 2f       	mov	r20, r29
    2606:	5c 2f       	mov	r21, r28
    2608:	0e 94 81 24 	call	0x4902	; 0x4902 <__addsf3>
    260c:	0e 94 02 27 	call	0x4e04	; 0x4e04 <round>
}
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	08 95       	ret

0000261a <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    261a:	ea e7       	ldi	r30, 0x7A	; 122
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    2620:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    2624:	ac e7       	ldi	r26, 0x7C	; 124
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    262a:	9c 91       	ld	r25, X
    262c:	96 60       	ori	r25, 0x06	; 6
    262e:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    2630:	9c 91       	ld	r25, X
    2632:	90 6c       	ori	r25, 0xC0	; 192
    2634:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    2636:	9c 91       	ld	r25, X
    2638:	90 62       	ori	r25, 0x20	; 32
    263a:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    263c:	90 81       	ld	r25, Z
    263e:	96 60       	ori	r25, 0x06	; 6
    2640:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    2642:	90 81       	ld	r25, Z
    2644:	90 62       	ori	r25, 0x20	; 32
    2646:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    2648:	90 81       	ld	r25, Z
    264a:	98 60       	ori	r25, 0x08	; 8
    264c:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    264e:	90 81       	ld	r25, Z
    2650:	90 68       	ori	r25, 0x80	; 128
    2652:	90 83       	st	Z, r25

	if(enableSampling)
    2654:	88 23       	and	r24, r24
    2656:	31 f0       	breq	.+12     	; 0x2664 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    2658:	80 81       	ld	r24, Z
    265a:	88 60       	ori	r24, 0x08	; 8
    265c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    265e:	80 81       	ld	r24, Z
    2660:	80 64       	ori	r24, 0x40	; 64
    2662:	80 83       	st	Z, r24
    2664:	08 95       	ret

00002666 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2666:	fc 01       	movw	r30, r24
	while(*s)
    2668:	21 91       	ld	r18, Z+
    266a:	22 23       	and	r18, r18
    266c:	41 f0       	breq	.+16     	; 0x267e <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	20 53       	subi	r18, 0x30	; 48
    2672:	31 09       	sbc	r19, r1
    2674:	2a 30       	cpi	r18, 0x0A	; 10
    2676:	31 05       	cpc	r19, r1
    2678:	b8 f3       	brcs	.-18     	; 0x2668 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	08 95       	ret
		}
	}

	return( TRUE);
    267e:	81 e0       	ldi	r24, 0x01	; 1
}
    2680:	08 95       	ret

00002682 <_Z13startEventNowv>:

void startEventNow(void)
{
	setupForFox(NULL);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z11setupForFoxP5Fox_t>
	g_transmissions_disabled = FALSE;
    268a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
	lb_send_string((char*)"Sync OK\n> ",FALSE);
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	88 e2       	ldi	r24, 0x28	; 40
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    2698:	08 95       	ret

0000269a <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    269a:	1f 92       	push	r1
    269c:	0f 92       	push	r0
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	2f 93       	push	r18
    26a6:	3f 93       	push	r19
    26a8:	4f 93       	push	r20
    26aa:	5f 93       	push	r21
    26ac:	6f 93       	push	r22
    26ae:	7f 93       	push	r23
    26b0:	8f 93       	push	r24
    26b2:	9f 93       	push	r25
    26b4:	af 93       	push	r26
    26b6:	bf 93       	push	r27
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z11digitalReadh>

	if(pinVal)  /* Sync is high */
    26c2:	88 23       	and	r24, r24
    26c4:	61 f0       	breq	.+24     	; 0x26de <__vector_5+0x44>
	{
		if(g_sync_pin_stable)
    26c6:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_sync_pin_stable>
    26ca:	88 23       	and	r24, r24
    26cc:	41 f0       	breq	.+16     	; 0x26de <__vector_5+0x44>
		{
			startEventNow();
    26ce:	0e 94 41 13 	call	0x2682	; 0x2682 <_Z13startEventNowv>
			g_sync_pin_stable = FALSE;
    26d2:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <g_sync_pin_stable>
			digitalWrite(PIN_LED2, OFF);    /*  LED */
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	87 e0       	ldi	r24, 0x07	; 7
    26da:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
		}
	}

	g_sync_pin_timer = 0;
    26de:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <g_sync_pin_timer+0x1>
    26e2:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <g_sync_pin_timer>
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	7f 91       	pop	r23
    26f4:	6f 91       	pop	r22
    26f6:	5f 91       	pop	r21
    26f8:	4f 91       	pop	r20
    26fa:	3f 91       	pop	r19
    26fc:	2f 91       	pop	r18
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	0f 90       	pop	r0
    2704:	1f 90       	pop	r1
    2706:	18 95       	reti

00002708 <_Z18reportConfigErrorsv>:
	lb_send_string((char*)"Sync OK\n> ",FALSE);
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    2708:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <_ZL15g_messages_text+0x15>
    270c:	81 11       	cpse	r24, r1
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <_Z18reportConfigErrorsv+0x10>
	{
		sendEEPROMString(&ee_textSetID[0]);
    2710:	8e e6       	ldi	r24, 0x6E	; 110
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	}
	
	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    2718:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    271c:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    2720:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    2724:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    2728:	81 15       	cp	r24, r1
    272a:	96 46       	sbci	r25, 0x66	; 102
    272c:	ae 4e       	sbci	r26, 0xEE	; 238
    272e:	bf 45       	sbci	r27, 0x5F	; 95
    2730:	20 f4       	brcc	.+8      	; 0x273a <_Z18reportConfigErrorsv+0x32>
	{
		sendEEPROMString(&ee_textSetTime[0]);
    2732:	8c ed       	ldi	r24, 0xDC	; 220
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	}

	if(g_event_finish_epoch < g_current_epoch)  /* Event has already finished */
    273a:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch>
    273e:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    2742:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    2746:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    274a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    274e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    2752:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    2756:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    275a:	48 17       	cp	r20, r24
    275c:	59 07       	cpc	r21, r25
    275e:	6a 07       	cpc	r22, r26
    2760:	7b 07       	cpc	r23, r27
    2762:	f0 f4       	brcc	.+60     	; 0x27a0 <_Z18reportConfigErrorsv+0x98>
	{	
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2764:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    2768:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    276c:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    2770:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    2774:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    2778:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    277c:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    2780:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    2784:	48 17       	cp	r20, r24
    2786:	59 07       	cpc	r21, r25
    2788:	6a 07       	cpc	r22, r26
    278a:	7b 07       	cpc	r23, r27
    278c:	20 f4       	brcc	.+8      	; 0x2796 <_Z18reportConfigErrorsv+0x8e>
		{
			sendEEPROMString(&ee_textSetStart[0]);
    278e:	86 eb       	ldi	r24, 0xB6	; 182
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
		}

		sendEEPROMString(&ee_textSetFinish[0]);
    2796:	8f e8       	ldi	r24, 0x8F	; 143
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    279e:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    27a0:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    27a4:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    27a8:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    27ac:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    27b0:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    27b4:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    27b8:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    27bc:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    27c0:	48 17       	cp	r20, r24
    27c2:	59 07       	cpc	r21, r25
    27c4:	6a 07       	cpc	r22, r26
    27c6:	7b 07       	cpc	r23, r27
    27c8:	28 f4       	brcc	.+10     	; 0x27d4 <_Z18reportConfigErrorsv+0xcc>
	{
		lb_send_string((char *)"Event running...\n", TRUE);
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	83 e3       	ldi	r24, 0x33	; 51
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    27d4:	08 95       	ret

000027d6 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
    27d6:	2f 92       	push	r2
    27d8:	3f 92       	push	r3
    27da:	4f 92       	push	r4
    27dc:	5f 92       	push	r5
    27de:	6f 92       	push	r6
    27e0:	7f 92       	push	r7
    27e2:	8f 92       	push	r8
    27e4:	9f 92       	push	r9
    27e6:	af 92       	push	r10
    27e8:	bf 92       	push	r11
    27ea:	cf 92       	push	r12
    27ec:	df 92       	push	r13
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	2c 97       	sbiw	r28, 0x0c	; 12
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	2b 01       	movw	r4, r22
    280c:	3c 01       	movw	r6, r24
    280e:	49 01       	movw	r8, r18
    2810:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2812:	62 17       	cp	r22, r18
    2814:	73 07       	cpc	r23, r19
    2816:	84 07       	cpc	r24, r20
    2818:	95 07       	cpc	r25, r21
    281a:	50 f0       	brcs	.+20     	; 0x2830 <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    281c:	e1 14       	cp	r14, r1
    281e:	f1 04       	cpc	r15, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <_Z14reportTimeTillmmPKcS0_+0x4e>
    2822:	04 c1       	rjmp	.+520    	; 0x2a2c <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg,TRUE);
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	c7 01       	movw	r24, r14
    2828:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	ff c0       	rjmp	.+510    	; 0x2a2e <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg,TRUE);
		}
	}
	else
	{
		if(prefix)
    2830:	01 15       	cp	r16, r1
    2832:	11 05       	cpc	r17, r1
    2834:	21 f0       	breq	.+8      	; 0x283e <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix,TRUE);
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	c8 01       	movw	r24, r16
    283a:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    283e:	75 01       	movw	r14, r10
    2840:	64 01       	movw	r12, r8
    2842:	c4 18       	sub	r12, r4
    2844:	d5 08       	sbc	r13, r5
    2846:	e6 08       	sbc	r14, r6
    2848:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    284a:	c7 01       	movw	r24, r14
    284c:	b6 01       	movw	r22, r12
    284e:	20 e8       	ldi	r18, 0x80	; 128
    2850:	33 e3       	ldi	r19, 0x33	; 51
    2852:	41 ee       	ldi	r20, 0xE1	; 225
    2854:	51 e0       	ldi	r21, 0x01	; 1
    2856:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    285a:	29 01       	movw	r4, r18
    285c:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    285e:	44 27       	eor	r20, r20
    2860:	55 27       	eor	r21, r21
    2862:	60 e8       	ldi	r22, 0x80	; 128
    2864:	73 e3       	ldi	r23, 0x33	; 51
    2866:	81 ee       	ldi	r24, 0xE1	; 225
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__mulsi3>
    286e:	c6 1a       	sub	r12, r22
    2870:	d7 0a       	sbc	r13, r23
    2872:	e8 0a       	sbc	r14, r24
    2874:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2876:	c7 01       	movw	r24, r14
    2878:	b6 01       	movw	r22, r12
    287a:	20 e8       	ldi	r18, 0x80	; 128
    287c:	31 e5       	ldi	r19, 0x51	; 81
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    2886:	49 01       	movw	r8, r18
    2888:	5a 01       	movw	r10, r20
    288a:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    288c:	44 27       	eor	r20, r20
    288e:	55 27       	eor	r21, r21
    2890:	60 e8       	ldi	r22, 0x80	; 128
    2892:	71 e5       	ldi	r23, 0x51	; 81
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__mulsi3>
    289c:	c6 1a       	sub	r12, r22
    289e:	d7 0a       	sbc	r13, r23
    28a0:	e8 0a       	sbc	r14, r24
    28a2:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    28a4:	c7 01       	movw	r24, r14
    28a6:	b6 01       	movw	r22, r12
    28a8:	20 e1       	ldi	r18, 0x10	; 16
    28aa:	3e e0       	ldi	r19, 0x0E	; 14
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    28b4:	29 83       	std	Y+1, r18	; 0x01
    28b6:	3a 83       	std	Y+2, r19	; 0x02
    28b8:	4b 83       	std	Y+3, r20	; 0x03
    28ba:	5c 83       	std	Y+4, r21	; 0x04
    28bc:	29 81       	ldd	r18, Y+1	; 0x01
    28be:	3a 81       	ldd	r19, Y+2	; 0x02
    28c0:	3a 87       	std	Y+10, r19	; 0x0a
    28c2:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    28c4:	29 81       	ldd	r18, Y+1	; 0x01
    28c6:	3a 81       	ldd	r19, Y+2	; 0x02
    28c8:	4b 81       	ldd	r20, Y+3	; 0x03
    28ca:	5c 81       	ldd	r21, Y+4	; 0x04
    28cc:	44 27       	eor	r20, r20
    28ce:	55 27       	eor	r21, r21
    28d0:	a0 e1       	ldi	r26, 0x10	; 16
    28d2:	be e0       	ldi	r27, 0x0E	; 14
    28d4:	0e 94 1f 28 	call	0x503e	; 0x503e <__muluhisi3>
    28d8:	c6 1a       	sub	r12, r22
    28da:	d7 0a       	sbc	r13, r23
    28dc:	e8 0a       	sbc	r14, r24
    28de:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    28e0:	c7 01       	movw	r24, r14
    28e2:	b6 01       	movw	r22, r12
    28e4:	2c e3       	ldi	r18, 0x3C	; 60
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    28f0:	2d 83       	std	Y+5, r18	; 0x05
    28f2:	3e 83       	std	Y+6, r19	; 0x06
    28f4:	4f 83       	std	Y+7, r20	; 0x07
    28f6:	58 87       	std	Y+8, r21	; 0x08
    28f8:	0d 81       	ldd	r16, Y+5	; 0x05
    28fa:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    28fc:	2c e3       	ldi	r18, 0x3C	; 60
    28fe:	20 9f       	mul	r18, r16
    2900:	c0 01       	movw	r24, r0
    2902:	21 9f       	mul	r18, r17
    2904:	90 0d       	add	r25, r0
    2906:	11 24       	eor	r1, r1
    2908:	a6 01       	movw	r20, r12
    290a:	48 1b       	sub	r20, r24
    290c:	59 0b       	sbc	r21, r25
    290e:	5c 87       	std	Y+12, r21	; 0x0c
    2910:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    2912:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <g_tempStr>

		if(years)
    2916:	41 14       	cp	r4, r1
    2918:	51 04       	cpc	r5, r1
    291a:	b9 f0       	breq	.+46     	; 0x294a <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr,"%d yrs ",years);
    291c:	5f 92       	push	r5
    291e:	4f 92       	push	r4
    2920:	85 e4       	ldi	r24, 0x45	; 69
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	9f 93       	push	r25
    2926:	8f 93       	push	r24
    2928:	8f ec       	ldi	r24, 0xCF	; 207
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	9f 93       	push	r25
    292e:	8f 93       	push	r24
    2930:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	8f ec       	ldi	r24, 0xCF	; 207
    2938:	94 e0       	ldi	r25, 0x04	; 4
    293a:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
		}

		if(days)
    294a:	23 28       	or	r2, r3
    294c:	b9 f0       	breq	.+46     	; 0x297c <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr,"%d days ",days);
    294e:	9f 92       	push	r9
    2950:	8f 92       	push	r8
    2952:	8d e4       	ldi	r24, 0x4D	; 77
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	9f 93       	push	r25
    2958:	8f 93       	push	r24
    295a:	8f ec       	ldi	r24, 0xCF	; 207
    295c:	94 e0       	ldi	r25, 0x04	; 4
    295e:	9f 93       	push	r25
    2960:	8f 93       	push	r24
    2962:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	8f ec       	ldi	r24, 0xCF	; 207
    296a:	94 e0       	ldi	r25, 0x04	; 4
    296c:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
		}

		if(hours)
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	89 2b       	or	r24, r25
    2982:	c9 f0       	breq	.+50     	; 0x29b6 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr,"%d hrs ",hours);
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	9f 93       	push	r25
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	ef 93       	push	r30
    298c:	86 e5       	ldi	r24, 0x56	; 86
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	9f 93       	push	r25
    2992:	8f 93       	push	r24
    2994:	8f ec       	ldi	r24, 0xCF	; 207
    2996:	94 e0       	ldi	r25, 0x04	; 4
    2998:	9f 93       	push	r25
    299a:	8f 93       	push	r24
    299c:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	8f ec       	ldi	r24, 0xCF	; 207
    29a4:	94 e0       	ldi	r25, 0x04	; 4
    29a6:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
		}

		if(minutes)
    29b6:	01 2b       	or	r16, r17
    29b8:	c9 f0       	breq	.+50     	; 0x29ec <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr,"%d min ",minutes);
    29ba:	fe 81       	ldd	r31, Y+6	; 0x06
    29bc:	ff 93       	push	r31
    29be:	2d 81       	ldd	r18, Y+5	; 0x05
    29c0:	2f 93       	push	r18
    29c2:	8e e5       	ldi	r24, 0x5E	; 94
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	9f 93       	push	r25
    29c8:	8f 93       	push	r24
    29ca:	8f ec       	ldi	r24, 0xCF	; 207
    29cc:	94 e0       	ldi	r25, 0x04	; 4
    29ce:	9f 93       	push	r25
    29d0:	8f 93       	push	r24
    29d2:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	8f ec       	ldi	r24, 0xCF	; 207
    29da:	94 e0       	ldi	r25, 0x04	; 4
    29dc:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
		}

		sprintf(g_tempStr,"%d sec",seconds);
    29ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    29ee:	3f 93       	push	r19
    29f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    29f2:	4f 93       	push	r20
    29f4:	86 e6       	ldi	r24, 0x66	; 102
    29f6:	91 e0       	ldi	r25, 0x01	; 1
    29f8:	9f 93       	push	r25
    29fa:	8f 93       	push	r24
    29fc:	8f ec       	ldi	r24, 0xCF	; 207
    29fe:	94 e0       	ldi	r25, 0x04	; 4
    2a00:	9f 93       	push	r25
    2a02:	8f 93       	push	r24
    2a04:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
		lb_send_string(g_tempStr,TRUE);
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	8f ec       	ldi	r24, 0xCF	; 207
    2a0c:	94 e0       	ldi	r25, 0x04	; 4
    2a0e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2a12:	0e 94 8a 07 	call	0xf14	; 0xf14 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2a16:	ef ec       	ldi	r30, 0xCF	; 207
    2a18:	f4 e0       	ldi	r31, 0x04	; 4
    2a1a:	10 82       	st	Z, r1
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
	BOOL failure = FALSE;
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	01 c0       	rjmp	.+2      	; 0x2a2e <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2a2e:	2c 96       	adiw	r28, 0x0c	; 12
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	bf 90       	pop	r11
    2a4c:	af 90       	pop	r10
    2a4e:	9f 90       	pop	r9
    2a50:	8f 90       	pop	r8
    2a52:	7f 90       	pop	r7
    2a54:	6f 90       	pop	r6
    2a56:	5f 90       	pop	r5
    2a58:	4f 90       	pop	r4
    2a5a:	3f 90       	pop	r3
    2a5c:	2f 90       	pop	r2
    2a5e:	08 95       	ret

00002a60 <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2a60:	2f 92       	push	r2
    2a62:	3f 92       	push	r3
    2a64:	4f 92       	push	r4
    2a66:	5f 92       	push	r5
    2a68:	6f 92       	push	r6
    2a6a:	7f 92       	push	r7
    2a6c:	8f 92       	push	r8
    2a6e:	9f 92       	push	r9
    2a70:	af 92       	push	r10
    2a72:	bf 92       	push	r11
    2a74:	cf 92       	push	r12
    2a76:	df 92       	push	r13
    2a78:	ef 92       	push	r14
    2a7a:	ff 92       	push	r15
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	28 97       	sbiw	r28, 0x08	; 8
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2a94:	0f 2e       	mov	r0, r31
    2a96:	f4 e8       	ldi	r31, 0x84	; 132
    2a98:	6f 2e       	mov	r6, r31
    2a9a:	f1 e0       	ldi	r31, 0x01	; 1
    2a9c:	7f 2e       	mov	r7, r31
    2a9e:	f0 2d       	mov	r31, r0
    2aa0:	0f 2e       	mov	r0, r31
    2aa2:	ff ec       	ldi	r31, 0xCF	; 207
    2aa4:	af 2e       	mov	r10, r31
    2aa6:	f4 e0       	ldi	r31, 0x04	; 4
    2aa8:	bf 2e       	mov	r11, r31
    2aaa:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
					lb_send_string(g_tempStr,FALSE);
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    2aac:	0f 2e       	mov	r0, r31
    2aae:	f8 e0       	ldi	r31, 0x08	; 8
    2ab0:	8f 2e       	mov	r8, r31
    2ab2:	f2 e0       	ldi	r31, 0x02	; 2
    2ab4:	9f 2e       	mov	r9, r31
    2ab6:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    2ab8:	0f 2e       	mov	r0, r31
    2aba:	f5 ec       	ldi	r31, 0xC5	; 197
    2abc:	4f 2e       	mov	r4, r31
    2abe:	f1 e0       	ldi	r31, 0x01	; 1
    2ac0:	5f 2e       	mov	r5, r31
    2ac2:	f0 2d       	mov	r31, r0
							setupForFox(&holdFox);
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2ac4:	0f 2e       	mov	r0, r31
    2ac6:	f4 e7       	ldi	r31, 0x74	; 116
    2ac8:	2f 2e       	mov	r2, r31
    2aca:	f1 e0       	ldi	r31, 0x01	; 1
    2acc:	3f 2e       	mov	r3, r31
    2ace:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2ad0:	0e 94 bb 06 	call	0xd76	; 0xd76 <_Z16nextFullRxBufferv>
    2ad4:	6c 01       	movw	r12, r24
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <_Z17handleLinkBusMsgsv+0x7c>
    2ada:	cf c5       	rjmp	.+2974   	; 0x367a <_Z17handleLinkBusMsgsv+0xc1a>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2adc:	fc 01       	movw	r30, r24
    2ade:	81 81       	ldd	r24, Z+1	; 0x01
    2ae0:	92 81       	ldd	r25, Z+2	; 0x02
    2ae2:	8a 39       	cpi	r24, 0x9A	; 154
    2ae4:	f3 e2       	ldi	r31, 0x23	; 35
    2ae6:	9f 07       	cpc	r25, r31
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <_Z17handleLinkBusMsgsv+0x8c>
    2aea:	af c5       	rjmp	.+2910   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
    2aec:	c8 f4       	brcc	.+50     	; 0x2b20 <_Z17handleLinkBusMsgsv+0xc0>
    2aee:	85 32       	cpi	r24, 0x25	; 37
    2af0:	3e e1       	ldi	r19, 0x1E	; 30
    2af2:	93 07       	cpc	r25, r19
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <_Z17handleLinkBusMsgsv+0x98>
    2af6:	a9 c5       	rjmp	.+2898   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
    2af8:	50 f4       	brcc	.+20     	; 0x2b0e <_Z17handleLinkBusMsgsv+0xae>
    2afa:	8e 31       	cpi	r24, 0x1E	; 30
    2afc:	e3 e0       	ldi	r30, 0x03	; 3
    2afe:	9e 07       	cpc	r25, r30
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <_Z17handleLinkBusMsgsv+0xa4>
    2b02:	c8 c1       	rjmp	.+912    	; 0x2e94 <_Z17handleLinkBusMsgsv+0x434>
    2b04:	8f 36       	cpi	r24, 0x6F	; 111
    2b06:	9d 41       	sbci	r25, 0x1D	; 29
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <_Z17handleLinkBusMsgsv+0xac>
    2b0a:	a9 c2       	rjmp	.+1362   	; 0x305e <_Z17handleLinkBusMsgsv+0x5fe>
    2b0c:	9c c5       	rjmp	.+2872   	; 0x3646 <_Z17handleLinkBusMsgsv+0xbe6>
    2b0e:	86 3c       	cpi	r24, 0xC6	; 198
    2b10:	2e e1       	ldi	r18, 0x1E	; 30
    2b12:	92 07       	cpc	r25, r18
    2b14:	f9 f0       	breq	.+62     	; 0x2b54 <_Z17handleLinkBusMsgsv+0xf4>
    2b16:	86 3a       	cpi	r24, 0xA6	; 166
    2b18:	90 42       	sbci	r25, 0x20	; 32
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <_Z17handleLinkBusMsgsv+0xbe>
    2b1c:	c5 c0       	rjmp	.+394    	; 0x2ca8 <_Z17handleLinkBusMsgsv+0x248>
    2b1e:	93 c5       	rjmp	.+2854   	; 0x3646 <_Z17handleLinkBusMsgsv+0xbe6>
    2b20:	85 3f       	cpi	r24, 0xF5	; 245
    2b22:	43 e2       	ldi	r20, 0x23	; 35
    2b24:	94 07       	cpc	r25, r20
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <_Z17handleLinkBusMsgsv+0xca>
    2b28:	05 c1       	rjmp	.+522    	; 0x2d34 <_Z17handleLinkBusMsgsv+0x2d4>
    2b2a:	50 f4       	brcc	.+20     	; 0x2b40 <_Z17handleLinkBusMsgsv+0xe0>
    2b2c:	8f 3c       	cpi	r24, 0xCF	; 207
    2b2e:	f3 e2       	ldi	r31, 0x23	; 35
    2b30:	9f 07       	cpc	r25, r31
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <_Z17handleLinkBusMsgsv+0xd6>
    2b34:	3a c5       	rjmp	.+2676   	; 0x35aa <_Z17handleLinkBusMsgsv+0xb4a>
    2b36:	80 3d       	cpi	r24, 0xD0	; 208
    2b38:	93 42       	sbci	r25, 0x23	; 35
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <_Z17handleLinkBusMsgsv+0xde>
    2b3c:	36 c2       	rjmp	.+1132   	; 0x2faa <_Z17handleLinkBusMsgsv+0x54a>
    2b3e:	83 c5       	rjmp	.+2822   	; 0x3646 <_Z17handleLinkBusMsgsv+0xbe6>
    2b40:	84 33       	cpi	r24, 0x34	; 52
    2b42:	34 e2       	ldi	r19, 0x24	; 36
    2b44:	93 07       	cpc	r25, r19
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <_Z17handleLinkBusMsgsv+0xea>
    2b48:	2a c1       	rjmp	.+596    	; 0x2d9e <_Z17handleLinkBusMsgsv+0x33e>
    2b4a:	8c 39       	cpi	r24, 0x9C	; 156
    2b4c:	94 42       	sbci	r25, 0x24	; 36
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <_Z17handleLinkBusMsgsv+0xf2>
    2b50:	81 c2       	rjmp	.+1282   	; 0x3054 <_Z17handleLinkBusMsgsv+0x5f4>
    2b52:	79 c5       	rjmp	.+2802   	; 0x3646 <_Z17handleLinkBusMsgsv+0xbe6>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2b54:	f6 01       	movw	r30, r12
    2b56:	83 81       	ldd	r24, Z+3	; 0x03
    2b58:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <_Z17handleLinkBusMsgsv+0x100>
    2b5e:	8f c0       	rjmp	.+286    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
				{
					if(c == 'B')
    2b60:	82 34       	cpi	r24, 0x42	; 66
    2b62:	91 05       	cpc	r25, r1
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <_Z17handleLinkBusMsgsv+0x108>
    2b66:	77 c5       	rjmp	.+2798   	; 0x3656 <_Z17handleLinkBusMsgsv+0xbf6>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2b68:	84 34       	cpi	r24, 0x44	; 68
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	39 f4       	brne	.+14     	; 0x2b7c <_Z17handleLinkBusMsgsv+0x11c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2b6e:	87 89       	ldd	r24, Z+23	; 0x17
    2b70:	83 35       	cpi	r24, 0x53	; 83
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <_Z17handleLinkBusMsgsv+0x116>
    2b74:	73 c5       	rjmp	.+2790   	; 0x365c <_Z17handleLinkBusMsgsv+0xbfc>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2b76:	86 e0       	ldi	r24, 0x06	; 6
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	75 c0       	rjmp	.+234    	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else if(c == 'F')
    2b7c:	86 34       	cpi	r24, 0x46	; 70
    2b7e:	91 05       	cpc	r25, r1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <_Z17handleLinkBusMsgsv+0x124>
    2b82:	6f c5       	rjmp	.+2782   	; 0x3662 <_Z17handleLinkBusMsgsv+0xc02>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2b84:	83 34       	cpi	r24, 0x43	; 67
    2b86:	91 05       	cpc	r25, r1
    2b88:	c9 f4       	brne	.+50     	; 0x2bbc <_Z17handleLinkBusMsgsv+0x15c>
					{
						char t = lb_buff->fields[FIELD2][0];
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2b8e:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2b90:	82 34       	cpi	r24, 0x42	; 66
    2b92:	29 f0       	breq	.+10     	; 0x2b9e <_Z17handleLinkBusMsgsv+0x13e>
						{
							t = '0';
						}

						if(isdigit(t))
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	c0 97       	sbiw	r24, 0x30	; 48
    2b98:	0a 97       	sbiw	r24, 0x0a	; 10
    2b9a:	08 f0       	brcs	.+2      	; 0x2b9e <_Z17handleLinkBusMsgsv+0x13e>
    2b9c:	70 c0       	rjmp	.+224    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
						{
							c = CLAMP(BEACON,atoi(lb_buff->fields[FIELD2]),FOX_5);
    2b9e:	c6 01       	movw	r24, r12
    2ba0:	47 96       	adiw	r24, 0x17	; 23
    2ba2:	0e 94 53 29 	call	0x52a6	; 0x52a6 <atoi>
    2ba6:	99 23       	and	r25, r25
    2ba8:	14 f4       	brge	.+4      	; 0x2bae <_Z17handleLinkBusMsgsv+0x14e>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	86 30       	cpi	r24, 0x06	; 6
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	0c f4       	brge	.+2      	; 0x2bb6 <_Z17handleLinkBusMsgsv+0x156>
    2bb4:	55 c0       	rjmp	.+170    	; 0x2c60 <_Z17handleLinkBusMsgsv+0x200>
    2bb6:	85 e0       	ldi	r24, 0x05	; 5
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	52 c0       	rjmp	.+164    	; 0x2c60 <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'S')
    2bbc:	83 35       	cpi	r24, 0x53	; 83
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	e9 f5       	brne	.+122    	; 0x2c3c <_Z17handleLinkBusMsgsv+0x1dc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2bc2:	f6 01       	movw	r30, r12
    2bc4:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2bc6:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2bc8:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2bca:	82 34       	cpi	r24, 0x42	; 66
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <_Z17handleLinkBusMsgsv+0x170>
    2bce:	57 c0       	rjmp	.+174    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2bd0:	86 34       	cpi	r24, 0x46	; 70
    2bd2:	49 f4       	brne	.+18     	; 0x2be6 <_Z17handleLinkBusMsgsv+0x186>
						{
							if((u > '0') && (u < '6'))
    2bd4:	8f ec       	ldi	r24, 0xCF	; 207
    2bd6:	89 0f       	add	r24, r25
    2bd8:	85 30       	cpi	r24, 0x05	; 5
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <_Z17handleLinkBusMsgsv+0x17e>
    2bdc:	50 c0       	rjmp	.+160    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (u - '1');
    2bde:	89 2f       	mov	r24, r25
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	83 97       	sbiw	r24, 0x23	; 35
    2be4:	1b c0       	rjmp	.+54     	; 0x2c1c <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(t == 'S')
    2be6:	83 35       	cpi	r24, 0x53	; 83
    2be8:	41 f4       	brne	.+16     	; 0x2bfa <_Z17handleLinkBusMsgsv+0x19a>
						{
							if((u > '0') && (u < '6'))
    2bea:	8f ec       	ldi	r24, 0xCF	; 207
    2bec:	89 0f       	add	r24, r25
    2bee:	85 30       	cpi	r24, 0x05	; 5
    2bf0:	c0 f4       	brcc	.+48     	; 0x2c22 <_Z17handleLinkBusMsgsv+0x1c2>
							{
								x = SPRINT_S1 + (u - '1');
    2bf2:	89 2f       	mov	r24, r25
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	88 97       	sbiw	r24, 0x28	; 40
    2bf8:	11 c0       	rjmp	.+34     	; 0x2c1c <_Z17handleLinkBusMsgsv+0x1bc>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2bfa:	96 34       	cpi	r25, 0x46	; 70
    2bfc:	39 f4       	brne	.+14     	; 0x2c0c <_Z17handleLinkBusMsgsv+0x1ac>
						{
							if((t > '0') && (t < '6'))
    2bfe:	9f ec       	ldi	r25, 0xCF	; 207
    2c00:	98 0f       	add	r25, r24
    2c02:	95 30       	cpi	r25, 0x05	; 5
    2c04:	e0 f5       	brcc	.+120    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (t - '1');
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	83 97       	sbiw	r24, 0x23	; 35
    2c0a:	08 c0       	rjmp	.+16     	; 0x2c1c <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(u == 'S')
    2c0c:	93 35       	cpi	r25, 0x53	; 83
    2c0e:	b9 f5       	brne	.+110    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
						{
							if((t > '0') && (t < '6'))
    2c10:	9f ec       	ldi	r25, 0xCF	; 207
    2c12:	98 0f       	add	r25, r24
    2c14:	95 30       	cpi	r25, 0x05	; 5
    2c16:	98 f5       	brcc	.+102    	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (t - '1');
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	19 f4       	brne	.+6      	; 0x2c26 <_Z17handleLinkBusMsgsv+0x1c6>
    2c20:	2e c0       	rjmp	.+92     	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2c22:	88 e0       	ldi	r24, 0x08	; 8
    2c24:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR,x,SPRINT_F5);
    2c26:	88 30       	cpi	r24, 0x08	; 8
    2c28:	91 05       	cpc	r25, r1
    2c2a:	14 f4       	brge	.+4      	; 0x2c30 <_Z17handleLinkBusMsgsv+0x1d0>
    2c2c:	88 e0       	ldi	r24, 0x08	; 8
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	83 31       	cpi	r24, 0x13	; 19
    2c32:	91 05       	cpc	r25, r1
    2c34:	ac f0       	brlt	.+42     	; 0x2c60 <_Z17handleLinkBusMsgsv+0x200>
    2c36:	82 e1       	ldi	r24, 0x12	; 18
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	12 c0       	rjmp	.+36     	; 0x2c60 <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'N')
    2c3c:	8e 34       	cpi	r24, 0x4E	; 78
    2c3e:	91 05       	cpc	r25, r1
    2c40:	59 f4       	brne	.+22     	; 0x2c58 <_Z17handleLinkBusMsgsv+0x1f8>
					{
						char t = lb_buff->fields[FIELD2][0];
    2c42:	f6 01       	movw	r30, r12
    2c44:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2c46:	82 33       	cpi	r24, 0x32	; 50
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <_Z17handleLinkBusMsgsv+0x1ec>
    2c4a:	0d c5       	rjmp	.+2586   	; 0x3666 <_Z17handleLinkBusMsgsv+0xc06>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2c4c:	85 33       	cpi	r24, 0x35	; 53
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <_Z17handleLinkBusMsgsv+0x1f2>
    2c50:	0c c5       	rjmp	.+2584   	; 0x366a <_Z17handleLinkBusMsgsv+0xc0a>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2c58:	c6 01       	movw	r24, r12
    2c5a:	03 96       	adiw	r24, 0x03	; 3
    2c5c:	0e 94 53 29 	call	0x52a6	; 0x52a6 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2c60:	86 31       	cpi	r24, 0x16	; 22
    2c62:	91 05       	cpc	r25, r1
    2c64:	60 f4       	brcc	.+24     	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
					{
						Fox_t holdFox = (Fox_t)c;
    2c66:	89 83       	std	Y+1, r24	; 0x01
						permFox(holdFox);
    2c68:	0e 94 c2 10 	call	0x2184	; 0x2184 <_Z7permFox5Fox_t>
						if(holdFox != g_fox)
    2c6c:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    2c70:	99 81       	ldd	r25, Y+1	; 0x01
    2c72:	98 17       	cp	r25, r24
    2c74:	21 f0       	breq	.+8      	; 0x2c7e <_Z17handleLinkBusMsgsv+0x21e>
						{
							setupForFox(&holdFox);
    2c76:	ce 01       	movw	r24, r28
    2c78:	01 96       	adiw	r24, 0x01	; 1
    2c7a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2c7e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    2c82:	1f 92       	push	r1
    2c84:	8f 93       	push	r24
    2c86:	3f 92       	push	r3
    2c88:	2f 92       	push	r2
    2c8a:	bf 92       	push	r11
    2c8c:	af 92       	push	r10
    2c8e:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	c5 01       	movw	r24, r10
    2c96:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
			}
			break;
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	d1 c4       	rjmp	.+2466   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    2ca8:	f6 01       	movw	r30, r12
    2caa:	83 81       	ldd	r24, Z+3	; 0x03
    2cac:	88 23       	and	r24, r24
    2cae:	01 f1       	breq	.+64     	; 0x2cf0 <_Z17handleLinkBusMsgsv+0x290>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2cb0:	94 81       	ldd	r25, Z+4	; 0x04
    2cb2:	96 34       	cpi	r25, 0x46	; 70
    2cb4:	11 f0       	breq	.+4      	; 0x2cba <_Z17handleLinkBusMsgsv+0x25a>
    2cb6:	80 33       	cpi	r24, 0x30	; 48
    2cb8:	59 f4       	brne	.+22     	; 0x2cd0 <_Z17handleLinkBusMsgsv+0x270>
					{
						g_enable_LEDs = FALSE;
    2cba:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <_ZL13g_enable_LEDs>
						digitalWrite(PIN_LED1,OFF); /*  LED Off */
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	8d e0       	ldi	r24, 0x0D	; 13
    2cc2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
						digitalWrite(PIN_LED2,OFF);
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	87 e0       	ldi	r24, 0x07	; 7
    2cca:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <_Z17handleLinkBusMsgsv+0x276>
					}
					else
					{
						g_enable_LEDs = TRUE;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZL13g_enable_LEDs>
					}

					eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);
    2cd6:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <_ZL13g_enable_LEDs>
    2cda:	87 e5       	ldi	r24, 0x57	; 87
    2cdc:	92 e0       	ldi	r25, 0x02	; 2
    2cde:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    2ce2:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <_ZL13g_enable_LEDs>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	91 11       	cpse	r25, r1
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr,"LED:%s\n",g_enable_LEDs ? "ON" : "OFF");
    2cf0:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZL13g_enable_LEDs>
    2cf4:	81 11       	cpse	r24, r1
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <_Z17handleLinkBusMsgsv+0x2a2>
    2cf8:	20 e7       	ldi	r18, 0x70	; 112
    2cfa:	31 e0       	ldi	r19, 0x01	; 1
    2cfc:	82 2f       	mov	r24, r18
    2cfe:	93 2f       	mov	r25, r19
    2d00:	04 c0       	rjmp	.+8      	; 0x2d0a <_Z17handleLinkBusMsgsv+0x2aa>
    2d02:	ed e6       	ldi	r30, 0x6D	; 109
    2d04:	f1 e0       	ldi	r31, 0x01	; 1
    2d06:	8e 2f       	mov	r24, r30
    2d08:	9f 2f       	mov	r25, r31
    2d0a:	9f 93       	push	r25
    2d0c:	8f 93       	push	r24
    2d0e:	8c e7       	ldi	r24, 0x7C	; 124
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	9f 93       	push	r25
    2d14:	8f 93       	push	r24
    2d16:	bf 92       	push	r11
    2d18:	af 92       	push	r10
    2d1a:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	c5 01       	movw	r24, r10
    2d22:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
			}
			break;
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	8b c4       	rjmp	.+2326   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    2d34:	f6 01       	movw	r30, r12
    2d36:	83 81       	ldd	r24, Z+3	; 0x03
    2d38:	88 23       	and	r24, r24
    2d3a:	89 f0       	breq	.+34     	; 0x2d5e <_Z17handleLinkBusMsgsv+0x2fe>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2d3c:	94 81       	ldd	r25, Z+4	; 0x04
    2d3e:	96 34       	cpi	r25, 0x46	; 70
    2d40:	11 f0       	breq	.+4      	; 0x2d46 <_Z17handleLinkBusMsgsv+0x2e6>
    2d42:	80 33       	cpi	r24, 0x30	; 48
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <_Z17handleLinkBusMsgsv+0x2ec>
					{
						g_enable_start_timer = FALSE;
    2d46:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <_ZL20g_enable_start_timer>
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <_Z17handleLinkBusMsgsv+0x2f2>
					}
					else
					{
						g_enable_start_timer = TRUE;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL20g_enable_start_timer>
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
    2d52:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <_ZL20g_enable_start_timer>
    2d56:	82 e5       	ldi	r24, 0x52	; 82
    2d58:	92 e0       	ldi	r25, 0x02	; 2
    2d5a:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2d5e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <_ZL20g_enable_start_timer>
    2d62:	81 11       	cpse	r24, r1
    2d64:	05 c0       	rjmp	.+10     	; 0x2d70 <_Z17handleLinkBusMsgsv+0x310>
    2d66:	20 e7       	ldi	r18, 0x70	; 112
    2d68:	31 e0       	ldi	r19, 0x01	; 1
    2d6a:	82 2f       	mov	r24, r18
    2d6c:	93 2f       	mov	r25, r19
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <_Z17handleLinkBusMsgsv+0x318>
    2d70:	ed e6       	ldi	r30, 0x6D	; 109
    2d72:	f1 e0       	ldi	r31, 0x01	; 1
    2d74:	8e 2f       	mov	r24, r30
    2d76:	9f 2f       	mov	r25, r31
    2d78:	9f 93       	push	r25
    2d7a:	8f 93       	push	r24
    2d7c:	7f 92       	push	r7
    2d7e:	6f 92       	push	r6
    2d80:	bf 92       	push	r11
    2d82:	af 92       	push	r10
    2d84:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	c5 01       	movw	r24, r10
    2d8c:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
			}
			break;
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	56 c4       	rjmp	.+2220   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    2d9e:	f6 01       	movw	r30, r12
    2da0:	83 81       	ldd	r24, Z+3	; 0x03
    2da2:	88 23       	and	r24, r24
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <_Z17handleLinkBusMsgsv+0x348>
    2da6:	51 c4       	rjmp	.+2210   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    2da8:	80 33       	cpi	r24, 0x30	; 48
    2daa:	21 f4       	brne	.+8      	; 0x2db4 <_Z17handleLinkBusMsgsv+0x354>
					{
						g_transmissions_disabled = TRUE;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
    2db2:	4b c4       	rjmp	.+2198   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    2db4:	81 33       	cpi	r24, 0x31	; 49
    2db6:	19 f4       	brne	.+6      	; 0x2dbe <_Z17handleLinkBusMsgsv+0x35e>
					{
						startEventNow();
    2db8:	0e 94 41 13 	call	0x2682	; 0x2682 <_Z13startEventNowv>
    2dbc:	46 c4       	rjmp	.+2188   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    2dbe:	82 33       	cpi	r24, 0x32	; 50
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <_Z17handleLinkBusMsgsv+0x364>
    2dc2:	43 c4       	rjmp	.+2182   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
					{
						g_transmissions_disabled = TRUE;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>

						if(!clockConfigurationError())
    2dca:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z23clockConfigurationErrorv>
    2dce:	81 11       	cpse	r24, r1
    2dd0:	5e c0       	rjmp	.+188    	; 0x2e8e <_Z17handleLinkBusMsgsv+0x42e>
						{
							g_use_rtc_to_start = TRUE;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <g_use_rtc_to_start>
							reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    2dd8:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_event_start_epoch>
    2ddc:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    2de0:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    2de4:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    2de8:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch>
    2dec:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x1>
    2df0:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch+0x2>
    2df4:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x3>
    2df8:	0f 2e       	mov	r0, r31
    2dfa:	fc e8       	ldi	r31, 0x8C	; 140
    2dfc:	ef 2e       	mov	r14, r31
    2dfe:	f1 e0       	ldi	r31, 0x01	; 1
    2e00:	ff 2e       	mov	r15, r31
    2e02:	f0 2d       	mov	r31, r0
    2e04:	09 e9       	ldi	r16, 0x99	; 153
    2e06:	11 e0       	ldi	r17, 0x01	; 1
    2e08:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
							reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    2e0c:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_event_finish_epoch>
    2e10:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    2e14:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    2e18:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    2e1c:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch>
    2e20:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    2e24:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    2e28:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    2e2c:	e1 2c       	mov	r14, r1
    2e2e:	f1 2c       	mov	r15, r1
    2e30:	05 ea       	ldi	r16, 0xA5	; 165
    2e32:	11 e0       	ldi	r17, 0x01	; 1
    2e34:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
							if(g_event_start_epoch < g_current_epoch)
    2e38:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    2e3c:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    2e40:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    2e44:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    2e48:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    2e4c:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    2e50:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    2e54:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    2e58:	48 17       	cp	r20, r24
    2e5a:	59 07       	cpc	r21, r25
    2e5c:	6a 07       	cpc	r22, r26
    2e5e:	7b 07       	cpc	r23, r27
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <_Z17handleLinkBusMsgsv+0x404>
    2e62:	f3 c3       	rjmp	.+2022   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
							{
								reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    2e64:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_event_finish_epoch>
    2e68:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    2e6c:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    2e70:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    2e74:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch>
    2e78:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x1>
    2e7c:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch+0x2>
    2e80:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x3>
    2e84:	0d ea       	ldi	r16, 0xAD	; 173
    2e86:	11 e0       	ldi	r17, 0x01	; 1
    2e88:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
    2e8c:	de c3       	rjmp	.+1980   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
							}
						}
						else
						{
							reportConfigErrors();
    2e8e:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z18reportConfigErrorsv>
    2e92:	db c3       	rjmp	.+1974   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    2e94:	f6 01       	movw	r30, r12
    2e96:	83 81       	ldd	r24, Z+3	; 0x03
    2e98:	88 23       	and	r24, r24
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <_Z17handleLinkBusMsgsv+0x43e>
    2e9c:	4d c0       	rjmp	.+154    	; 0x2f38 <_Z17handleLinkBusMsgsv+0x4d8>
				{
					strcpy(g_tempStr," ");  /* Space before ID gets sent */
    2e9e:	80 e2       	ldi	r24, 0x20	; 32
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	f5 01       	movw	r30, r10
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
					strcat(g_tempStr,lb_buff->fields[FIELD1]);
    2ea8:	b6 01       	movw	r22, r12
    2eaa:	6d 5f       	subi	r22, 0xFD	; 253
    2eac:	7f 4f       	sbci	r23, 0xFF	; 255
    2eae:	c5 01       	movw	r24, r10
    2eb0:	0e 94 a0 29 	call	0x5340	; 0x5340 <strcat>

					if(lb_buff->fields[FIELD2][0])
    2eb4:	f6 01       	movw	r30, r12
    2eb6:	87 89       	ldd	r24, Z+23	; 0x17
    2eb8:	88 23       	and	r24, r24
    2eba:	79 f0       	breq	.+30     	; 0x2eda <_Z17handleLinkBusMsgsv+0x47a>
					{
						strcat(g_tempStr," ");
    2ebc:	f5 01       	movw	r30, r10
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	00 20       	and	r0, r0
    2ec2:	e9 f7       	brne	.-6      	; 0x2ebe <_Z17handleLinkBusMsgsv+0x45e>
    2ec4:	31 97       	sbiw	r30, 0x01	; 1
    2ec6:	80 e2       	ldi	r24, 0x20	; 32
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	80 83       	st	Z, r24
						strcat(g_tempStr,lb_buff->fields[FIELD2]);
    2ece:	b6 01       	movw	r22, r12
    2ed0:	69 5e       	subi	r22, 0xE9	; 233
    2ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed4:	c5 01       	movw	r24, r10
    2ed6:	0e 94 a0 29 	call	0x5340	; 0x5340 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    2eda:	f5 01       	movw	r30, r10
    2edc:	01 90       	ld	r0, Z+
    2ede:	00 20       	and	r0, r0
    2ee0:	e9 f7       	brne	.-6      	; 0x2edc <_Z17handleLinkBusMsgsv+0x47c>
    2ee2:	31 97       	sbiw	r30, 0x01	; 1
    2ee4:	ef 5c       	subi	r30, 0xCF	; 207
    2ee6:	f4 40       	sbci	r31, 0x04	; 4
    2ee8:	75 97       	sbiw	r30, 0x15	; 21
    2eea:	30 f5       	brcc	.+76     	; 0x2f38 <_Z17handleLinkBusMsgsv+0x4d8>
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);
    2eec:	b5 01       	movw	r22, r10
    2eee:	8d e1       	ldi	r24, 0x1D	; 29
    2ef0:	95 e0       	ldi	r25, 0x05	; 5
    2ef2:	0e 94 ab 29 	call	0x5356	; 0x5356 <strcpy>

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    2ef6:	f1 2c       	mov	r15, r1
    2ef8:	0d e1       	ldi	r16, 0x1D	; 29
    2efa:	15 e0       	ldi	r17, 0x05	; 5
    2efc:	f8 01       	movw	r30, r16
    2efe:	01 90       	ld	r0, Z+
    2f00:	00 20       	and	r0, r0
    2f02:	e9 f7       	brne	.-6      	; 0x2efe <_Z17handleLinkBusMsgsv+0x49e>
    2f04:	cf 01       	movw	r24, r30
    2f06:	8e 51       	subi	r24, 0x1E	; 30
    2f08:	95 40       	sbci	r25, 0x05	; 5
    2f0a:	2f 2d       	mov	r18, r15
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	28 17       	cp	r18, r24
    2f10:	39 07       	cpc	r19, r25
    2f12:	58 f4       	brcc	.+22     	; 0x2f2a <_Z17handleLinkBusMsgsv+0x4ca>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    2f14:	c9 01       	movw	r24, r18
    2f16:	fc 01       	movw	r30, r24
    2f18:	e8 5f       	subi	r30, 0xF8	; 248
    2f1a:	fa 4f       	sbci	r31, 0xFA	; 250
    2f1c:	65 89       	ldd	r22, Z+21	; 0x15
    2f1e:	8e 52       	subi	r24, 0x2E	; 46
    2f20:	9d 4f       	sbci	r25, 0xFD	; 253
    2f22:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    2f26:	f3 94       	inc	r15
    2f28:	e9 cf       	rjmp	.-46     	; 0x2efc <_Z17handleLinkBusMsgsv+0x49c>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
						}

						eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    2f2a:	8f 2d       	mov	r24, r15
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	8e 52       	subi	r24, 0x2E	; 46
    2f32:	9d 4f       	sbci	r25, 0xFD	; 253
    2f34:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
					}
				}

				if(g_messages_text[STATION_ID][0])
    2f38:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <_ZL15g_messages_text+0x15>
    2f3c:	88 23       	and	r24, r24
    2f3e:	f1 f0       	breq	.+60     	; 0x2f7c <_Z17handleLinkBusMsgsv+0x51c>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    2f40:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	8d e1       	ldi	r24, 0x1D	; 29
    2f48:	95 e0       	ldi	r25, 0x05	; 5
    2f4a:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_Z26timeRequiredToSendStrAtWPMPcj>
    2f4e:	8c 50       	subi	r24, 0x0C	; 12
    2f50:	9e 4f       	sbci	r25, 0xFE	; 254
    2f52:	9c 01       	movw	r18, r24
    2f54:	36 95       	lsr	r19
    2f56:	27 95       	ror	r18
    2f58:	36 95       	lsr	r19
    2f5a:	27 95       	ror	r18
    2f5c:	36 95       	lsr	r19
    2f5e:	27 95       	ror	r18
    2f60:	a5 ec       	ldi	r26, 0xC5	; 197
    2f62:	b0 e2       	ldi	r27, 0x20	; 32
    2f64:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    2f68:	92 95       	swap	r25
    2f6a:	82 95       	swap	r24
    2f6c:	8f 70       	andi	r24, 0x0F	; 15
    2f6e:	89 27       	eor	r24, r25
    2f70:	9f 70       	andi	r25, 0x0F	; 15
    2f72:	89 27       	eor	r24, r25
    2f74:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <_ZL20g_time_needed_for_ID+0x1>
    2f78:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZL20g_time_needed_for_ID>
				}

				sprintf(g_tempStr,"ID:%s\n",g_messages_text[STATION_ID]);
    2f7c:	8d e1       	ldi	r24, 0x1D	; 29
    2f7e:	95 e0       	ldi	r25, 0x05	; 5
    2f80:	9f 93       	push	r25
    2f82:	8f 93       	push	r24
    2f84:	8e eb       	ldi	r24, 0xBE	; 190
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	9f 93       	push	r25
    2f8a:	8f 93       	push	r24
    2f8c:	bf 92       	push	r11
    2f8e:	af 92       	push	r10
    2f90:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
				lb_send_string(g_tempStr,TRUE);
    2f94:	61 e0       	ldi	r22, 0x01	; 1
    2f96:	c5 01       	movw	r24, r10
    2f98:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
			}
			break;
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	50 c3       	rjmp	.+1696   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    2faa:	f6 01       	movw	r30, r12
    2fac:	83 81       	ldd	r24, Z+3	; 0x03
    2fae:	89 34       	cpi	r24, 0x49	; 73
    2fb0:	e1 f5       	brne	.+120    	; 0x302a <_Z17handleLinkBusMsgsv+0x5ca>
				{
					if(lb_buff->fields[FIELD2][0])
    2fb2:	87 89       	ldd	r24, Z+23	; 0x17
    2fb4:	88 23       	and	r24, r24
    2fb6:	c9 f1       	breq	.+114    	; 0x302a <_Z17handleLinkBusMsgsv+0x5ca>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    2fb8:	c6 01       	movw	r24, r12
    2fba:	47 96       	adiw	r24, 0x17	; 23
    2fbc:	0e 94 71 29 	call	0x52e2	; 0x52e2 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,speed,MAX_CODE_SPEED_WPM);
    2fc0:	86 2f       	mov	r24, r22
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	85 30       	cpi	r24, 0x05	; 5
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	14 f4       	brge	.+4      	; 0x2fce <_Z17handleLinkBusMsgsv+0x56e>
    2fca:	85 e0       	ldi	r24, 0x05	; 5
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	85 31       	cpi	r24, 0x15	; 21
    2fd0:	91 05       	cpc	r25, r1
    2fd2:	0c f0       	brlt	.+2      	; 0x2fd6 <_Z17handleLinkBusMsgsv+0x576>
    2fd4:	84 e1       	ldi	r24, 0x14	; 20
    2fd6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
						eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    2fda:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    2fde:	89 e5       	ldi	r24, 0x59	; 89
    2fe0:	92 e0       	ldi	r25, 0x02	; 2
    2fe2:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>

						if(g_messages_text[STATION_ID][0])
    2fe6:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <_ZL15g_messages_text+0x15>
    2fea:	88 23       	and	r24, r24
    2fec:	f1 f0       	breq	.+60     	; 0x302a <_Z17handleLinkBusMsgsv+0x5ca>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    2fee:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	8d e1       	ldi	r24, 0x1D	; 29
    2ff6:	95 e0       	ldi	r25, 0x05	; 5
    2ff8:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_Z26timeRequiredToSendStrAtWPMPcj>
    2ffc:	8c 50       	subi	r24, 0x0C	; 12
    2ffe:	9e 4f       	sbci	r25, 0xFE	; 254
    3000:	9c 01       	movw	r18, r24
    3002:	36 95       	lsr	r19
    3004:	27 95       	ror	r18
    3006:	36 95       	lsr	r19
    3008:	27 95       	ror	r18
    300a:	36 95       	lsr	r19
    300c:	27 95       	ror	r18
    300e:	a5 ec       	ldi	r26, 0xC5	; 197
    3010:	b0 e2       	ldi	r27, 0x20	; 32
    3012:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    3016:	92 95       	swap	r25
    3018:	82 95       	swap	r24
    301a:	8f 70       	andi	r24, 0x0F	; 15
    301c:	89 27       	eor	r24, r25
    301e:	9f 70       	andi	r25, 0x0F	; 15
    3020:	89 27       	eor	r24, r25
    3022:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <_ZL20g_time_needed_for_ID+0x1>
    3026:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZL20g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    302a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    302e:	1f 92       	push	r1
    3030:	8f 93       	push	r24
    3032:	5f 92       	push	r5
    3034:	4f 92       	push	r4
    3036:	bf 92       	push	r11
    3038:	af 92       	push	r10
    303a:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	c5 01       	movw	r24, r10
    3042:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
			}
			break;
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	fb c2       	rjmp	.+1526   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_VERSION:
			{
				sendEEPROMString(&ee_textVersion[0]);
    3054:	8f ef       	ldi	r24, 0xFF	; 255
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
			}
			break;
    305c:	f6 c2       	rjmp	.+1516   	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    305e:	f6 01       	movw	r30, r12
    3060:	83 81       	ldd	r24, Z+3	; 0x03
    3062:	84 35       	cpi	r24, 0x54	; 84
    3064:	09 f0       	breq	.+2      	; 0x3068 <_Z17handleLinkBusMsgsv+0x608>
    3066:	8b c0       	rjmp	.+278    	; 0x317e <_Z17handleLinkBusMsgsv+0x71e>
				{
					strncpy(g_tempStr,lb_buff->fields[FIELD2],12);
    3068:	4c e0       	ldi	r20, 0x0C	; 12
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	b6 01       	movw	r22, r12
    306e:	69 5e       	subi	r22, 0xE9	; 233
    3070:	7f 4f       	sbci	r23, 0xFF	; 255
    3072:	c5 01       	movw	r24, r10
    3074:	0e 94 b2 29 	call	0x5364	; 0x5364 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    3078:	f5 01       	movw	r30, r10
    307a:	14 86       	std	Z+12, r1	; 0x0c
					int len = strlen(g_tempStr);
    307c:	01 90       	ld	r0, Z+
    307e:	00 20       	and	r0, r0
    3080:	e9 f7       	brne	.-6      	; 0x307c <_Z17handleLinkBusMsgsv+0x61c>
    3082:	31 97       	sbiw	r30, 0x01	; 1
    3084:	ef 5c       	subi	r30, 0xCF	; 207
    3086:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3088:	1e 16       	cp	r1, r30
    308a:	1f 06       	cpc	r1, r31
    308c:	0c f0       	brlt	.+2      	; 0x3090 <_Z17handleLinkBusMsgsv+0x630>
    308e:	47 c0       	rjmp	.+142    	; 0x311e <_Z17handleLinkBusMsgsv+0x6be>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    3090:	3c 97       	sbiw	r30, 0x0c	; 12
    3092:	09 f0       	breq	.+2      	; 0x3096 <_Z17handleLinkBusMsgsv+0x636>
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <_Z17handleLinkBusMsgsv+0x6b4>
    3096:	c5 01       	movw	r24, r10
    3098:	0e 94 33 13 	call	0x2666	; 0x2666 <_Z11only_digitsPc>
    309c:	88 23       	and	r24, r24
    309e:	d1 f1       	breq	.+116    	; 0x3114 <_Z17handleLinkBusMsgsv+0x6b4>
						{
							time_t t = rv3028_get_epoch(NULL,g_tempStr);    /* String format "YYMMDDhhmmss" */
    30a0:	b5 01       	movw	r22, r10
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 ca 21 	call	0x4394	; 0x4394 <_Z16rv3028_get_epochPbPc>

							if(t > MINIMUM_EPOCH)
    30aa:	61 30       	cpi	r22, 0x01	; 1
    30ac:	76 46       	sbci	r23, 0x66	; 102
    30ae:	8e 4e       	sbci	r24, 0xEE	; 238
    30b0:	9f 45       	sbci	r25, 0x5F	; 95
    30b2:	58 f1       	brcs	.+86     	; 0x310a <_Z17handleLinkBusMsgsv+0x6aa>
							{
								rv3028_set_date_time(g_tempStr);            /* String format "YYMMDDhhmmss" */
    30b4:	c5 01       	movw	r24, r10
    30b6:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_Z20rv3028_set_date_timePc>
								g_current_epoch = rv3028_get_epoch(NULL,NULL);
    30ba:	60 e0       	ldi	r22, 0x00	; 0
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 ca 21 	call	0x4394	; 0x4394 <_Z16rv3028_get_epochPbPc>
    30c6:	60 93 50 05 	sts	0x0550, r22	; 0x800550 <g_current_epoch>
    30ca:	70 93 51 05 	sts	0x0551, r23	; 0x800551 <g_current_epoch+0x1>
    30ce:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_current_epoch+0x2>
    30d2:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <g_current_epoch+0x3>
								sprintf(g_tempStr,"Time:%lu\n",g_current_epoch);
    30d6:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    30da:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    30de:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    30e2:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    30e6:	bf 93       	push	r27
    30e8:	af 93       	push	r26
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	86 ed       	ldi	r24, 0xD6	; 214
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	9f 93       	push	r25
    30f4:	8f 93       	push	r24
    30f6:	bf 92       	push	r11
    30f8:	af 92       	push	r10
    30fa:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	b3 c2       	rjmp	.+1382   	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrTimeInPast[0]);
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3112:	ae c2       	rjmp	.+1372   	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    3114:	84 e1       	ldi	r24, 0x14	; 20
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    311c:	a9 c2       	rjmp	.+1362   	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ",NULL);
    311e:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_event_start_epoch>
    3122:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    3126:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    312a:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    312e:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch>
    3132:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x1>
    3136:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch+0x2>
    313a:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x3>
    313e:	e1 2c       	mov	r14, r1
    3140:	f1 2c       	mov	r15, r1
    3142:	09 e9       	ldi	r16, 0x99	; 153
    3144:	11 e0       	ldi	r17, 0x01	; 1
    3146:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr,"UNIX Time:%lu\n",g_current_epoch);
    314a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    314e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    3152:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    3156:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    315a:	bf 93       	push	r27
    315c:	af 93       	push	r26
    315e:	9f 93       	push	r25
    3160:	8f 93       	push	r24
    3162:	81 ed       	ldi	r24, 0xD1	; 209
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	9f 93       	push	r25
    3168:	8f 93       	push	r24
    316a:	bf 92       	push	r11
    316c:	af 92       	push	r10
    316e:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	79 c2       	rjmp	.+1266   	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    317e:	83 35       	cpi	r24, 0x53	; 83
    3180:	09 f0       	breq	.+2      	; 0x3184 <_Z17handleLinkBusMsgsv+0x724>
    3182:	cf c0       	rjmp	.+414    	; 0x3322 <_Z17handleLinkBusMsgsv+0x8c2>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3184:	b6 01       	movw	r22, r12
    3186:	69 5e       	subi	r22, 0xE9	; 233
    3188:	7f 4f       	sbci	r23, 0xFF	; 255
    318a:	c5 01       	movw	r24, r10
    318c:	0e 94 ab 29 	call	0x5356	; 0x5356 <strcpy>
					int len = strlen(g_tempStr);
    3190:	f5 01       	movw	r30, r10
    3192:	01 90       	ld	r0, Z+
    3194:	00 20       	and	r0, r0
    3196:	e9 f7       	brne	.-6      	; 0x3192 <_Z17handleLinkBusMsgsv+0x732>
    3198:	31 97       	sbiw	r30, 0x01	; 1
    319a:	ef 5c       	subi	r30, 0xCF	; 207
    319c:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    319e:	1e 16       	cp	r1, r30
    31a0:	1f 06       	cpc	r1, r31
    31a2:	0c f0       	brlt	.+2      	; 0x31a6 <_Z17handleLinkBusMsgsv+0x746>
    31a4:	a4 c0       	rjmp	.+328    	; 0x32ee <_Z17handleLinkBusMsgsv+0x88e>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    31a6:	3c 97       	sbiw	r30, 0x0c	; 12
    31a8:	09 f0       	breq	.+2      	; 0x31ac <_Z17handleLinkBusMsgsv+0x74c>
    31aa:	9c c0       	rjmp	.+312    	; 0x32e4 <_Z17handleLinkBusMsgsv+0x884>
    31ac:	c5 01       	movw	r24, r10
    31ae:	0e 94 33 13 	call	0x2666	; 0x2666 <_Z11only_digitsPc>
    31b2:	88 23       	and	r24, r24
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <_Z17handleLinkBusMsgsv+0x758>
    31b6:	96 c0       	rjmp	.+300    	; 0x32e4 <_Z17handleLinkBusMsgsv+0x884>
						{
							time_t s;
							s = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    31b8:	b5 01       	movw	r22, r10
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0e 94 ca 21 	call	0x4394	; 0x4394 <_Z16rv3028_get_epochPbPc>

							if(s > g_current_epoch)
    31c2:	00 91 50 05 	lds	r16, 0x0550	; 0x800550 <g_current_epoch>
    31c6:	10 91 51 05 	lds	r17, 0x0551	; 0x800551 <g_current_epoch+0x1>
    31ca:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <g_current_epoch+0x2>
    31ce:	30 91 53 05 	lds	r19, 0x0553	; 0x800553 <g_current_epoch+0x3>
    31d2:	06 17       	cp	r16, r22
    31d4:	17 07       	cpc	r17, r23
    31d6:	28 07       	cpc	r18, r24
    31d8:	39 07       	cpc	r19, r25
    31da:	08 f0       	brcs	.+2      	; 0x31de <_Z17handleLinkBusMsgsv+0x77e>
    31dc:	7e c0       	rjmp	.+252    	; 0x32da <_Z17handleLinkBusMsgsv+0x87a>
							{
								g_event_start_epoch = s;
    31de:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <g_event_start_epoch>
    31e2:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <g_event_start_epoch+0x1>
    31e6:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <g_event_start_epoch+0x2>
    31ea:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <g_event_start_epoch+0x3>
								eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    31ee:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    31f2:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    31f6:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    31fa:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    31fe:	8d e4       	ldi	r24, 0x4D	; 77
    3200:	92 e0       	ldi	r25, 0x02	; 2
    3202:	0e 94 b7 2c 	call	0x596e	; 0x596e <eeprom_update_dword>
								g_event_finish_epoch = MAX(g_event_finish_epoch,(g_event_start_epoch + SECONDS_24H));
    3206:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    320a:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    320e:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    3212:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	af 83       	std	Y+7, r26	; 0x07
    321c:	b8 87       	std	Y+8, r27	; 0x08
    321e:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    3222:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    3226:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    322a:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    322e:	80 58       	subi	r24, 0x80	; 128
    3230:	9e 4a       	sbci	r25, 0xAE	; 174
    3232:	ae 4f       	sbci	r26, 0xFE	; 254
    3234:	bf 4f       	sbci	r27, 0xFF	; 255
    3236:	89 83       	std	Y+1, r24	; 0x01
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	ab 83       	std	Y+3, r26	; 0x03
    323c:	bc 83       	std	Y+4, r27	; 0x04
    323e:	4d 81       	ldd	r20, Y+5	; 0x05
    3240:	5e 81       	ldd	r21, Y+6	; 0x06
    3242:	6f 81       	ldd	r22, Y+7	; 0x07
    3244:	78 85       	ldd	r23, Y+8	; 0x08
    3246:	48 17       	cp	r20, r24
    3248:	59 07       	cpc	r21, r25
    324a:	6a 07       	cpc	r22, r26
    324c:	7b 07       	cpc	r23, r27
    324e:	28 f4       	brcc	.+10     	; 0x325a <_Z17handleLinkBusMsgsv+0x7fa>
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	9a 81       	ldd	r25, Y+2	; 0x02
    3254:	ab 81       	ldd	r26, Y+3	; 0x03
    3256:	bc 81       	ldd	r27, Y+4	; 0x04
    3258:	04 c0       	rjmp	.+8      	; 0x3262 <_Z17handleLinkBusMsgsv+0x802>
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	af 81       	ldd	r26, Y+7	; 0x07
    3260:	b8 85       	ldd	r27, Y+8	; 0x08
    3262:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_event_finish_epoch>
    3266:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_event_finish_epoch+0x1>
    326a:	a0 93 4a 05 	sts	0x054A, r26	; 0x80054a <g_event_finish_epoch+0x2>
    326e:	b0 93 4b 05 	sts	0x054B, r27	; 0x80054b <g_event_finish_epoch+0x3>
								eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    3272:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch>
    3276:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    327a:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    327e:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    3282:	89 e4       	ldi	r24, 0x49	; 73
    3284:	92 e0       	ldi	r25, 0x02	; 2
    3286:	0e 94 b7 2c 	call	0x596e	; 0x596e <eeprom_update_dword>
								sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    328a:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    328e:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    3292:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    3296:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    329a:	bf 93       	push	r27
    329c:	af 93       	push	r26
    329e:	9f 93       	push	r25
    32a0:	8f 93       	push	r24
    32a2:	80 ee       	ldi	r24, 0xE0	; 224
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	9f 93       	push	r25
    32a8:	8f 93       	push	r24
    32aa:	bf 92       	push	r11
    32ac:	af 92       	push	r10
    32ae:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
								g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    32b2:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z23clockConfigurationErrorv>
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	81 11       	cpse	r24, r1
    32c2:	07 c0       	rjmp	.+14     	; 0x32d2 <_Z17handleLinkBusMsgsv+0x872>
    32c4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	91 11       	cpse	r25, r1
    32cc:	03 c0       	rjmp	.+6      	; 0x32d4 <_Z17handleLinkBusMsgsv+0x874>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	01 c0       	rjmp	.+2      	; 0x32d4 <_Z17handleLinkBusMsgsv+0x874>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <g_use_rtc_to_start>
    32d8:	cb c1       	rjmp	.+918    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrStartInPast[0]);
    32da:	88 e2       	ldi	r24, 0x28	; 40
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    32e2:	c6 c1       	rjmp	.+908    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    32e4:	84 e1       	ldi	r24, 0x14	; 20
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    32ec:	c1 c1       	rjmp	.+898    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    32ee:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <g_event_start_epoch>
    32f2:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    32f6:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    32fa:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    32fe:	bf 93       	push	r27
    3300:	af 93       	push	r26
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	80 ee       	ldi	r24, 0xE0	; 224
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	9f 93       	push	r25
    330c:	8f 93       	push	r24
    330e:	bf 92       	push	r11
    3310:	af 92       	push	r10
    3312:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	a7 c1       	rjmp	.+846    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    3322:	86 34       	cpi	r24, 0x46	; 70
    3324:	09 f0       	breq	.+2      	; 0x3328 <_Z17handleLinkBusMsgsv+0x8c8>
    3326:	b6 c0       	rjmp	.+364    	; 0x3494 <_Z17handleLinkBusMsgsv+0xa34>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3328:	b6 01       	movw	r22, r12
    332a:	69 5e       	subi	r22, 0xE9	; 233
    332c:	7f 4f       	sbci	r23, 0xFF	; 255
    332e:	c5 01       	movw	r24, r10
    3330:	0e 94 ab 29 	call	0x5356	; 0x5356 <strcpy>
					int len = strlen(g_tempStr);
    3334:	f5 01       	movw	r30, r10
    3336:	01 90       	ld	r0, Z+
    3338:	00 20       	and	r0, r0
    333a:	e9 f7       	brne	.-6      	; 0x3336 <_Z17handleLinkBusMsgsv+0x8d6>
    333c:	31 97       	sbiw	r30, 0x01	; 1
    333e:	ef 5c       	subi	r30, 0xCF	; 207
    3340:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3342:	1e 16       	cp	r1, r30
    3344:	1f 06       	cpc	r1, r31
    3346:	0c f0       	brlt	.+2      	; 0x334a <_Z17handleLinkBusMsgsv+0x8ea>
    3348:	8b c0       	rjmp	.+278    	; 0x3460 <_Z17handleLinkBusMsgsv+0xa00>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    334a:	3c 97       	sbiw	r30, 0x0c	; 12
    334c:	09 f0       	breq	.+2      	; 0x3350 <_Z17handleLinkBusMsgsv+0x8f0>
    334e:	83 c0       	rjmp	.+262    	; 0x3456 <_Z17handleLinkBusMsgsv+0x9f6>
    3350:	c5 01       	movw	r24, r10
    3352:	0e 94 33 13 	call	0x2666	; 0x2666 <_Z11only_digitsPc>
    3356:	88 23       	and	r24, r24
    3358:	09 f4       	brne	.+2      	; 0x335c <_Z17handleLinkBusMsgsv+0x8fc>
    335a:	7d c0       	rjmp	.+250    	; 0x3456 <_Z17handleLinkBusMsgsv+0x9f6>
						{
							time_t f;
							f = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    335c:	b5 01       	movw	r22, r10
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 ca 21 	call	0x4394	; 0x4394 <_Z16rv3028_get_epochPbPc>

							if(f > g_current_epoch)
    3366:	00 91 50 05 	lds	r16, 0x0550	; 0x800550 <g_current_epoch>
    336a:	10 91 51 05 	lds	r17, 0x0551	; 0x800551 <g_current_epoch+0x1>
    336e:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <g_current_epoch+0x2>
    3372:	30 91 53 05 	lds	r19, 0x0553	; 0x800553 <g_current_epoch+0x3>
    3376:	06 17       	cp	r16, r22
    3378:	17 07       	cpc	r17, r23
    337a:	28 07       	cpc	r18, r24
    337c:	39 07       	cpc	r19, r25
    337e:	08 f0       	brcs	.+2      	; 0x3382 <_Z17handleLinkBusMsgsv+0x922>
    3380:	65 c0       	rjmp	.+202    	; 0x344c <_Z17handleLinkBusMsgsv+0x9ec>
							{
								if(f > g_event_start_epoch)
    3382:	00 91 4c 05 	lds	r16, 0x054C	; 0x80054c <g_event_start_epoch>
    3386:	10 91 4d 05 	lds	r17, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    338a:	20 91 4e 05 	lds	r18, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    338e:	30 91 4f 05 	lds	r19, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    3392:	06 17       	cp	r16, r22
    3394:	17 07       	cpc	r17, r23
    3396:	28 07       	cpc	r18, r24
    3398:	39 07       	cpc	r19, r25
    339a:	08 f0       	brcs	.+2      	; 0x339e <_Z17handleLinkBusMsgsv+0x93e>
    339c:	52 c0       	rjmp	.+164    	; 0x3442 <_Z17handleLinkBusMsgsv+0x9e2>
								{
									g_event_finish_epoch = f;
    339e:	60 93 48 05 	sts	0x0548, r22	; 0x800548 <g_event_finish_epoch>
    33a2:	70 93 49 05 	sts	0x0549, r23	; 0x800549 <g_event_finish_epoch+0x1>
    33a6:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_event_finish_epoch+0x2>
    33aa:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <g_event_finish_epoch+0x3>
									eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    33ae:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_event_finish_epoch>
    33b2:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    33b6:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    33ba:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    33be:	89 e4       	ldi	r24, 0x49	; 73
    33c0:	92 e0       	ldi	r25, 0x02	; 2
    33c2:	0e 94 b7 2c 	call	0x596e	; 0x596e <eeprom_update_dword>
									reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    33c6:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_event_finish_epoch>
    33ca:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    33ce:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    33d2:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    33d6:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch>
    33da:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    33de:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    33e2:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    33e6:	e1 2c       	mov	r14, r1
    33e8:	f1 2c       	mov	r15, r1
    33ea:	05 ea       	ldi	r16, 0xA5	; 165
    33ec:	11 e0       	ldi	r17, 0x01	; 1
    33ee:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
									sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    33f2:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    33f6:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    33fa:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    33fe:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    3402:	bf 93       	push	r27
    3404:	af 93       	push	r26
    3406:	9f 93       	push	r25
    3408:	8f 93       	push	r24
    340a:	8b ee       	ldi	r24, 0xEB	; 235
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	9f 93       	push	r25
    3410:	8f 93       	push	r24
    3412:	bf 92       	push	r11
    3414:	af 92       	push	r10
    3416:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
									g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    341a:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z23clockConfigurationErrorv>
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	81 11       	cpse	r24, r1
    342a:	07 c0       	rjmp	.+14     	; 0x343a <_Z17handleLinkBusMsgsv+0x9da>
    342c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	91 11       	cpse	r25, r1
    3434:	03 c0       	rjmp	.+6      	; 0x343c <_Z17handleLinkBusMsgsv+0x9dc>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	01 c0       	rjmp	.+2      	; 0x343c <_Z17handleLinkBusMsgsv+0x9dc>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <g_use_rtc_to_start>
    3440:	17 c1       	rjmp	.+558    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
								}
								else
								{
									sendEEPROMString(&ee_textErrFinishB4Start[0]);
    3442:	83 e5       	ldi	r24, 0x53	; 83
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    344a:	12 c1       	rjmp	.+548    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
								}
							}
							else
							{
								sendEEPROMString(&ee_textErrFinishInPast[0]);
    344c:	8d e3       	ldi	r24, 0x3D	; 61
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3454:	0d c1       	rjmp	.+538    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    3456:	84 e1       	ldi	r24, 0x14	; 20
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    345e:	08 c1       	rjmp	.+528    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    3460:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_event_finish_epoch>
    3464:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    3468:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    346c:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    3470:	bf 93       	push	r27
    3472:	af 93       	push	r26
    3474:	9f 93       	push	r25
    3476:	8f 93       	push	r24
    3478:	8b ee       	ldi	r24, 0xEB	; 235
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	9f 93       	push	r25
    347e:	8f 93       	push	r24
    3480:	bf 92       	push	r11
    3482:	af 92       	push	r10
    3484:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	cd bf       	out	0x3d, r28	; 61
    3492:	ee c0       	rjmp	.+476    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3494:	83 34       	cpi	r24, 0x43	; 67
    3496:	09 f5       	brne	.+66     	; 0x34da <_Z17handleLinkBusMsgsv+0xa7a>
				{
					if(lb_buff->fields[FIELD2][0])
    3498:	f6 01       	movw	r30, r12
    349a:	87 89       	ldd	r24, Z+23	; 0x17
    349c:	88 23       	and	r24, r24
    349e:	51 f0       	breq	.+20     	; 0x34b4 <_Z17handleLinkBusMsgsv+0xa54>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    34a0:	c6 01       	movw	r24, r12
    34a2:	47 96       	adiw	r24, 0x17	; 23
    34a4:	0e 94 53 29 	call	0x52a6	; 0x52a6 <atoi>

						if(c < 512)
    34a8:	81 15       	cp	r24, r1
    34aa:	f2 e0       	ldi	r31, 0x02	; 2
    34ac:	9f 07       	cpc	r25, r31
    34ae:	10 f4       	brcc	.+4      	; 0x34b4 <_Z17handleLinkBusMsgsv+0xa54>
						{
							rv3028_set_offset_RAM(c);
    34b0:	0e 94 49 23 	call	0x4692	; 0x4692 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    34b4:	0e 94 2f 23 	call	0x465e	; 0x465e <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr,"C=%d\n",a);
    34b8:	9f 93       	push	r25
    34ba:	8f 93       	push	r24
    34bc:	87 ef       	ldi	r24, 0xF7	; 247
    34be:	91 e0       	ldi	r25, 0x01	; 1
    34c0:	9f 93       	push	r25
    34c2:	8f 93       	push	r24
    34c4:	bf 92       	push	r11
    34c6:	af 92       	push	r10
    34c8:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	cb c0       	rjmp	.+406    	; 0x3670 <_Z17handleLinkBusMsgsv+0xc10>
					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'X')  /* Test only - Send 32 kHz square wave out of RTC */
    34da:	88 35       	cpi	r24, 0x58	; 88
    34dc:	21 f4       	brne	.+8      	; 0x34e6 <_Z17handleLinkBusMsgsv+0xa86>
				{
					EIMSK &= ~(1 << INT0);                  /* Disable INT0 interrupts */
    34de:	e8 98       	cbi	0x1d, 0	; 29
					rv3028_32kHz_sqw();
    34e0:	0e 94 6d 24 	call	0x48da	; 0x48da <_Z16rv3028_32kHz_sqwv>
    34e4:	b2 c0       	rjmp	.+356    	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
				}
				else
				{
					if(clockConfigurationError())
    34e6:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z23clockConfigurationErrorv>
    34ea:	88 23       	and	r24, r24
    34ec:	19 f0       	breq	.+6      	; 0x34f4 <_Z17handleLinkBusMsgsv+0xa94>
					{
						reportConfigErrors();
    34ee:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z18reportConfigErrorsv>
    34f2:	ab c0       	rjmp	.+342    	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    34f4:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <g_event_start_epoch>
    34f8:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    34fc:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    3500:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    3504:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch>
    3508:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x1>
    350c:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch+0x2>
    3510:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x3>
    3514:	0f 2e       	mov	r0, r31
    3516:	fc e8       	ldi	r31, 0x8C	; 140
    3518:	ef 2e       	mov	r14, r31
    351a:	f1 e0       	ldi	r31, 0x01	; 1
    351c:	ff 2e       	mov	r15, r31
    351e:	f0 2d       	mov	r31, r0
    3520:	09 e9       	ldi	r16, 0x99	; 153
    3522:	11 e0       	ldi	r17, 0x01	; 1
    3524:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    3528:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_event_finish_epoch>
    352c:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    3530:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    3534:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    3538:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_start_epoch>
    353c:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    3540:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    3544:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    3548:	e1 2c       	mov	r14, r1
    354a:	f1 2c       	mov	r15, r1
    354c:	05 ea       	ldi	r16, 0xA5	; 165
    354e:	11 e0       	ldi	r17, 0x01	; 1
    3550:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    3554:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_start_epoch>
    3558:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_start_epoch+0x1>
    355c:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch+0x2>
    3560:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x3>
    3564:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_current_epoch>
    3568:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_current_epoch+0x1>
    356c:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <g_current_epoch+0x2>
    3570:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <g_current_epoch+0x3>
    3574:	48 17       	cp	r20, r24
    3576:	59 07       	cpc	r21, r25
    3578:	6a 07       	cpc	r22, r26
    357a:	7b 07       	cpc	r23, r27
    357c:	08 f0       	brcs	.+2      	; 0x3580 <_Z17handleLinkBusMsgsv+0xb20>
    357e:	65 c0       	rjmp	.+202    	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
						{
							reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    3580:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_event_finish_epoch>
    3584:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_event_finish_epoch+0x1>
    3588:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch+0x2>
    358c:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x3>
    3590:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_current_epoch>
    3594:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_current_epoch+0x1>
    3598:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch+0x2>
    359c:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x3>
    35a0:	0d ea       	ldi	r16, 0xAD	; 173
    35a2:	11 e0       	ldi	r17, 0x01	; 1
    35a4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z14reportTimeTillmmPKcS0_>
    35a8:	50 c0       	rjmp	.+160    	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    35aa:	f6 01       	movw	r30, r12
    35ac:	83 81       	ldd	r24, Z+3	; 0x03
    35ae:	83 34       	cpi	r24, 0x43	; 67
    35b0:	89 f5       	brne	.+98     	; 0x3614 <_Z17handleLinkBusMsgsv+0xbb4>
				{
					if(lb_buff->fields[FIELD2][0])
    35b2:	87 89       	ldd	r24, Z+23	; 0x17
    35b4:	88 23       	and	r24, r24
    35b6:	b1 f0       	breq	.+44     	; 0x35e4 <_Z17handleLinkBusMsgsv+0xb84>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    35b8:	c6 01       	movw	r24, r12
    35ba:	47 96       	adiw	r24, 0x17	; 23
    35bc:	0e 94 53 29 	call	0x52a6	; 0x52a6 <atoi>

						if((v > -2000) && (v < 2000))
    35c0:	9c 01       	movw	r18, r24
    35c2:	21 53       	subi	r18, 0x31	; 49
    35c4:	38 4f       	sbci	r19, 0xF8	; 248
    35c6:	2f 39       	cpi	r18, 0x9F	; 159
    35c8:	3f 40       	sbci	r19, 0x0F	; 15
    35ca:	60 f4       	brcc	.+24     	; 0x35e4 <_Z17handleLinkBusMsgsv+0xb84>
						{
							g_atmega_temp_calibration = v;
    35cc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    35d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
							eeprom_update_word((uint16_t*)&ee_atmega_temp_calibration,(int16_t)g_atmega_temp_calibration);
    35d4:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    35d8:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    35dc:	85 e5       	ldi	r24, 0x55	; 85
    35de:	92 e0       	ldi	r25, 0x02	; 2
    35e0:	0e 94 c3 2c 	call	0x5986	; 0x5986 <eeprom_update_word>
						}
					}

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
    35e4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    35e8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    35ec:	9f 93       	push	r25
    35ee:	8f 93       	push	r24
    35f0:	2d ef       	ldi	r18, 0xFD	; 253
    35f2:	31 e0       	ldi	r19, 0x01	; 1
    35f4:	3f 93       	push	r19
    35f6:	2f 93       	push	r18
    35f8:	bf 92       	push	r11
    35fa:	af 92       	push	r10
    35fc:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
					lb_send_string(g_tempStr,FALSE);
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	c5 01       	movw	r24, r10
    3604:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    3614:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <g_temperature>
    3618:	28 2f       	mov	r18, r24
    361a:	08 2e       	mov	r0, r24
    361c:	00 0c       	add	r0, r0
    361e:	33 0b       	sbc	r19, r19
    3620:	3f 93       	push	r19
    3622:	8f 93       	push	r24
    3624:	9f 92       	push	r9
    3626:	8f 92       	push	r8
    3628:	bf 92       	push	r11
    362a:	af 92       	push	r10
    362c:	0e 94 de 29 	call	0x53bc	; 0x53bc <sprintf>
				lb_send_string(g_tempStr,TRUE);
    3630:	61 e0       	ldi	r22, 0x01	; 1
    3632:	c5 01       	movw	r24, r10
    3634:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
			}
			break;
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	02 c0       	rjmp	.+4      	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>

			default:
			{
				lb_send_Help();
    3646:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z12lb_send_Helpv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    364a:	f6 01       	movw	r30, r12
    364c:	12 82       	std	Z+2, r1	; 0x02
    364e:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    3650:	0e 94 83 07 	call	0xf06	; 0xf06 <_Z17lb_send_NewPromptv>
    3654:	3d ca       	rjmp	.-2950   	; 0x2ad0 <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	05 cb       	rjmp	.-2550   	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    365c:	83 e1       	ldi	r24, 0x13	; 19
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	02 cb       	rjmp	.-2556   	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3662:	87 e0       	ldi	r24, 0x07	; 7
    3664:	00 cb       	rjmp	.-2560   	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    3666:	84 e1       	ldi	r24, 0x14	; 20
    3668:	fe ca       	rjmp	.-2564   	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    366a:	85 e1       	ldi	r24, 0x15	; 21
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	fb ca       	rjmp	.-2570   	; 0x2c66 <_Z17handleLinkBusMsgsv+0x206>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr,TRUE);
    3670:	61 e0       	ldi	r22, 0x01	; 1
    3672:	c5 01       	movw	r24, r10
    3674:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
    3678:	e8 cf       	rjmp	.-48     	; 0x364a <_Z17handleLinkBusMsgsv+0xbea>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    367a:	28 96       	adiw	r28, 0x08	; 8
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	ff 90       	pop	r15
    3690:	ef 90       	pop	r14
    3692:	df 90       	pop	r13
    3694:	cf 90       	pop	r12
    3696:	bf 90       	pop	r11
    3698:	af 90       	pop	r10
    369a:	9f 90       	pop	r9
    369c:	8f 90       	pop	r8
    369e:	7f 90       	pop	r7
    36a0:	6f 90       	pop	r6
    36a2:	5f 90       	pop	r5
    36a4:	4f 90       	pop	r4
    36a6:	3f 90       	pop	r3
    36a8:	2f 90       	pop	r2
    36aa:	08 95       	ret

000036ac <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    36ac:	2f 92       	push	r2
    36ae:	3f 92       	push	r3
    36b0:	4f 92       	push	r4
    36b2:	5f 92       	push	r5
    36b4:	6f 92       	push	r6
    36b6:	7f 92       	push	r7
    36b8:	8f 92       	push	r8
    36ba:	9f 92       	push	r9
    36bc:	af 92       	push	r10
    36be:	bf 92       	push	r11
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	1f 92       	push	r1
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    36d6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    36da:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_on_the_air>
    36de:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_on_the_air+0x1>
    36e2:	89 2b       	or	r24, r25
    36e4:	29 f0       	breq	.+10     	; 0x36f0 <_Z4loopv+0x44>
    36e6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ4loopvE7proceed>
    36ea:	88 23       	and	r24, r24
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <_Z4loopv+0x44>
    36ee:	da c0       	rjmp	.+436    	; 0x38a4 <_Z4loopv+0x1f8>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    36f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    36f4:	81 11       	cpse	r24, r1
    36f6:	2e c1       	rjmp	.+604    	; 0x3954 <_Z4loopv+0x2a8>
			{
				proceed = FALSE;
    36f8:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    36fc:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3700:	86 30       	cpi	r24, 0x06	; 6
    3702:	91 f4       	brne	.+36     	; 0x3728 <_Z4loopv+0x7c>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter]);
    3704:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3708:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    370c:	bc 01       	movw	r22, r24
    370e:	66 0f       	add	r22, r22
    3710:	77 1f       	adc	r23, r23
    3712:	66 0f       	add	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	68 0f       	add	r22, r24
    3718:	79 1f       	adc	r23, r25
    371a:	6e 57       	subi	r22, 0x7E	; 126
    371c:	7d 4f       	sbci	r23, 0xFD	; 253
    371e:	88 e0       	ldi	r24, 0x08	; 8
    3720:	95 e0       	ldi	r25, 0x05	; 5
    3722:	0e 94 ab 29 	call	0x5356	; 0x5356 <strcpy>
    3726:	27 c0       	rjmp	.+78     	; 0x3776 <_Z4loopv+0xca>
				}
				else if(g_fox == SPRINT_DEMO)
    3728:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    372c:	83 31       	cpi	r24, 0x13	; 19
    372e:	99 f4       	brne	.+38     	; 0x3756 <_Z4loopv+0xaa>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter + 8]);
    3730:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3734:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3738:	08 96       	adiw	r24, 0x08	; 8
    373a:	bc 01       	movw	r22, r24
    373c:	66 0f       	add	r22, r22
    373e:	77 1f       	adc	r23, r23
    3740:	66 0f       	add	r22, r22
    3742:	77 1f       	adc	r23, r23
    3744:	68 0f       	add	r22, r24
    3746:	79 1f       	adc	r23, r25
    3748:	6e 57       	subi	r22, 0x7E	; 126
    374a:	7d 4f       	sbci	r23, 0xFD	; 253
    374c:	88 e0       	ldi	r24, 0x08	; 8
    374e:	95 e0       	ldi	r25, 0x05	; 5
    3750:	0e 94 ab 29 	call	0x5356	; 0x5356 <strcpy>
    3754:	10 c0       	rjmp	.+32     	; 0x3776 <_Z4loopv+0xca>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox]);
    3756:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	bc 01       	movw	r22, r24
    375e:	66 0f       	add	r22, r22
    3760:	77 1f       	adc	r23, r23
    3762:	66 0f       	add	r22, r22
    3764:	77 1f       	adc	r23, r23
    3766:	68 0f       	add	r22, r24
    3768:	79 1f       	adc	r23, r25
    376a:	6e 57       	subi	r22, 0x7E	; 126
    376c:	7d 4f       	sbci	r23, 0xFD	; 253
    376e:	88 e0       	ldi	r24, 0x08	; 8
    3770:	95 e0       	ldi	r25, 0x05	; 5
    3772:	0e 94 ab 29 	call	0x5356	; 0x5356 <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    3776:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    377a:	86 30       	cpi	r24, 0x06	; 6
    377c:	09 f1       	breq	.+66     	; 0x37c0 <_Z4loopv+0x114>
    377e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3782:	83 31       	cpi	r24, 0x13	; 19
    3784:	e9 f0       	breq	.+58     	; 0x37c0 <_Z4loopv+0x114>
    3786:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    378a:	88 23       	and	r24, r24
    378c:	c9 f0       	breq	.+50     	; 0x37c0 <_Z4loopv+0x114>
    378e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3792:	87 30       	cpi	r24, 0x07	; 7
    3794:	a9 f0       	breq	.+42     	; 0x37c0 <_Z4loopv+0x114>
    3796:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    379a:	88 30       	cpi	r24, 0x08	; 8
    379c:	89 f0       	breq	.+34     	; 0x37c0 <_Z4loopv+0x114>
    379e:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <g_fox>
    37a2:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_fox_counter>
    37a6:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_fox_counter+0x1>
    37aa:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <g_fox_id_offset>
    37ae:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <g_fox_id_offset+0x1>
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	84 0f       	add	r24, r20
    37b6:	95 1f       	adc	r25, r21
    37b8:	28 17       	cp	r18, r24
    37ba:	39 07       	cpc	r19, r25
    37bc:	09 f0       	breq	.+2      	; 0x37c0 <_Z4loopv+0x114>
    37be:	ca c0       	rjmp	.+404    	; 0x3954 <_Z4loopv+0x2a8>
				{
					BOOL repeat = TRUE;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    37c4:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <_ZL19g_pattern_codespeed>
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	82 e8       	ldi	r24, 0x82	; 130
    37cc:	9b e1       	ldi	r25, 0x1B	; 27
    37ce:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    37d2:	cb 01       	movw	r24, r22
    37d4:	6a e0       	ldi	r22, 0x0A	; 10
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    37dc:	66 0f       	add	r22, r22
    37de:	77 1f       	adc	r23, r23
    37e0:	70 93 57 05 	sts	0x0557, r23	; 0x800557 <g_code_throttle+0x1>
    37e4:	60 93 56 05 	sts	0x0556, r22	; 0x800556 <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT],&repeat,NULL);
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	be 01       	movw	r22, r28
    37ee:	6f 5f       	subi	r22, 0xFF	; 255
    37f0:	7f 4f       	sbci	r23, 0xFF	; 255
    37f2:	88 e0       	ldi	r24, 0x08	; 8
    37f4:	95 e0       	ldi	r25, 0x05	; 5
    37f6:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    37fa:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <g_time_to_ID>
    37fe:	81 11       	cpse	r24, r1
    3800:	0b c0       	rjmp	.+22     	; 0x3818 <_Z4loopv+0x16c>
    3802:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <g_id_interval>
    3806:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <g_id_interval+0x1>
    380a:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_on_air_interval>
    380e:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <g_on_air_interval+0x1>
    3812:	82 17       	cp	r24, r18
    3814:	93 07       	cpc	r25, r19
    3816:	3c f1       	brlt	.+78     	; 0x3866 <_Z4loopv+0x1ba>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    3818:	00 91 45 05 	lds	r16, 0x0545	; 0x800545 <g_on_air_interval>
    381c:	10 91 46 05 	lds	r17, 0x0546	; 0x800546 <g_on_air_interval+0x1>
    3820:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	8d e1       	ldi	r24, 0x1D	; 29
    3828:	95 e0       	ldi	r25, 0x05	; 5
    382a:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_Z26timeRequiredToSendStrAtWPMPcj>
    382e:	8c 50       	subi	r24, 0x0C	; 12
    3830:	9e 4f       	sbci	r25, 0xFE	; 254
    3832:	9c 01       	movw	r18, r24
    3834:	36 95       	lsr	r19
    3836:	27 95       	ror	r18
    3838:	36 95       	lsr	r19
    383a:	27 95       	ror	r18
    383c:	36 95       	lsr	r19
    383e:	27 95       	ror	r18
    3840:	a5 ec       	ldi	r26, 0xC5	; 197
    3842:	b0 e2       	ldi	r27, 0x20	; 32
    3844:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    3848:	92 95       	swap	r25
    384a:	82 95       	swap	r24
    384c:	8f 70       	andi	r24, 0x0F	; 15
    384e:	89 27       	eor	r24, r25
    3850:	9f 70       	andi	r25, 0x0F	; 15
    3852:	89 27       	eor	r24, r25
    3854:	08 1b       	sub	r16, r24
    3856:	19 0b       	sbc	r17, r25
    3858:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    385c:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    3860:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <g_time_to_ID>
    3864:	0a c0       	rjmp	.+20     	; 0x387a <_Z4loopv+0x1ce>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    3866:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_on_air_interval>
    386a:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <g_on_air_interval+0x1>
    386e:	8d 59       	subi	r24, 0x9D	; 157
    3870:	9f 4f       	sbci	r25, 0xFF	; 255
    3872:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3876:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    387a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_on_the_air+0x1>
    3886:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_on_the_air>
					g_callsign_sent = FALSE;
    388a:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_callsign_sent>
					g_fox_transition = FALSE;
    388e:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    3892:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3896:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    389a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_tone_offset+0x1>
    389e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_tone_offset>
    38a2:	58 c0       	rjmp	.+176    	; 0x3954 <_Z4loopv+0x2a8>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    38a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    38a8:	81 11       	cpse	r24, r1
    38aa:	9a c1       	rjmp	.+820    	; 0x3be0 <_Z4loopv+0x534>
    38ac:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <g_fox_seconds_into_interval>
    38b0:	30 91 44 05 	lds	r19, 0x0544	; 0x800544 <g_fox_seconds_into_interval+0x1>
    38b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    38b8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    38bc:	28 17       	cp	r18, r24
    38be:	39 07       	cpc	r19, r25
    38c0:	09 f0       	breq	.+2      	; 0x38c4 <_Z4loopv+0x218>
    38c2:	8e c1       	rjmp	.+796    	; 0x3be0 <_Z4loopv+0x534>
    38c4:	6b c1       	rjmp	.+726    	; 0x3b9c <_Z4loopv+0x4f0>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    38c6:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    38ca:	84 31       	cpi	r24, 0x14	; 20
    38cc:	08 f4       	brcc	.+2      	; 0x38d0 <_Z4loopv+0x224>
    38ce:	8e c1       	rjmp	.+796    	; 0x3bec <_Z4loopv+0x540>
    38d0:	09 c0       	rjmp	.+18     	; 0x38e4 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    38d2:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <g_fox_transition>
					g_on_the_air = FALSE;
    38d6:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    38da:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
					proceed = TRUE;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    38e4:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    38e8:	86 30       	cpi	r24, 0x06	; 6
    38ea:	21 f0       	breq	.+8      	; 0x38f4 <_Z4loopv+0x248>
    38ec:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    38f0:	83 31       	cpi	r24, 0x13	; 19
    38f2:	49 f4       	brne	.+18     	; 0x3906 <_Z4loopv+0x25a>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    38f4:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_callsign_sent>
    38f8:	88 23       	and	r24, r24
    38fa:	61 f1       	breq	.+88     	; 0x3954 <_Z4loopv+0x2a8>
    38fc:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_fox_transition>
    3900:	81 11       	cpse	r24, r1
    3902:	79 c1       	rjmp	.+754    	; 0x3bf6 <_Z4loopv+0x54a>
    3904:	27 c0       	rjmp	.+78     	; 0x3954 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    3906:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    390a:	88 23       	and	r24, r24
    390c:	41 f0       	breq	.+16     	; 0x391e <_Z4loopv+0x272>
    390e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3912:	87 30       	cpi	r24, 0x07	; 7
    3914:	21 f0       	breq	.+8      	; 0x391e <_Z4loopv+0x272>
    3916:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    391a:	88 30       	cpi	r24, 0x08	; 8
    391c:	41 f4       	brne	.+16     	; 0x392e <_Z4loopv+0x282>
			{
				if(g_callsign_sent)
    391e:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_callsign_sent>
    3922:	88 23       	and	r24, r24
    3924:	b9 f0       	breq	.+46     	; 0x3954 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ4loopvE7proceed>
    392c:	13 c0       	rjmp	.+38     	; 0x3954 <_Z4loopv+0x2a8>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    392e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3932:	89 30       	cpi	r24, 0x09	; 9
    3934:	08 f4       	brcc	.+2      	; 0x3938 <_Z4loopv+0x28c>
    3936:	68 c1       	rjmp	.+720    	; 0x3c08 <_Z4loopv+0x55c>
    3938:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    393c:	83 31       	cpi	r24, 0x13	; 19
    393e:	08 f0       	brcs	.+2      	; 0x3942 <_Z4loopv+0x296>
    3940:	63 c1       	rjmp	.+710    	; 0x3c08 <_Z4loopv+0x55c>
    3942:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_callsign_sent>
    3946:	81 11       	cpse	r24, r1
    3948:	5a c1       	rjmp	.+692    	; 0x3bfe <_Z4loopv+0x552>
    394a:	5e c1       	rjmp	.+700    	; 0x3c08 <_Z4loopv+0x55c>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    394c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_callsign_sent>
    3950:	81 11       	cpse	r24, r1
    3952:	66 c1       	rjmp	.+716    	; 0x3c20 <_Z4loopv+0x574>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    3954:	87 ef       	ldi	r24, 0xF7	; 247
    3956:	94 e0       	ldi	r25, 0x04	; 4
    3958:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN8Goertzel12SamplesReadyEv>
    395c:	88 23       	and	r24, r24
    395e:	09 f4       	brne	.+2      	; 0x3962 <_Z4loopv+0x2b6>
    3960:	12 c1       	rjmp	.+548    	; 0x3b86 <_Z4loopv+0x4da>
			static char lastKey = '\0';
			static int checkCount = 10;  /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1,y = -1;

			if(!g_temperature_check_countdown)
    3962:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    3966:	81 11       	cpse	r24, r1
    3968:	60 c1       	rjmp	.+704    	; 0x3c2a <_Z4loopv+0x57e>
			{

				setUpTemp();
    396a:	0e 94 a5 12 	call	0x254a	; 0x254a <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    396e:	0e 94 b5 12 	call	0x256a	; 0x256a <_Z7getTempv>
    3972:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__fixsfsi>
				if(temp != g_temperature)
    3976:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <g_temperature>
    397a:	68 17       	cp	r22, r24
    397c:	b1 f0       	breq	.+44     	; 0x39aa <_Z4loopv+0x2fe>
				{
					g_temperature = temp;
    397e:	60 93 34 05 	sts	0x0534, r22	; 0x800534 <g_temperature>
					int8_t delta25 = 25 - temp;
					int8_t adj = eeprom_read_byte((uint8_t*)&ee_temperature_table[delta25]);
    3982:	89 e1       	ldi	r24, 0x19	; 25
    3984:	86 1b       	sub	r24, r22
    3986:	88 0f       	add	r24, r24
    3988:	99 0b       	sbc	r25, r25
    398a:	86 5a       	subi	r24, 0xA6	; 166
    398c:	9d 4f       	sbci	r25, 0xFD	; 253
    398e:	0e 94 91 2c 	call	0x5922	; 0x5922 <eeprom_read_byte>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    3992:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <_ZL15g_rv3028_offset>
    3996:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <_ZL15g_rv3028_offset+0x1>
    399a:	a9 01       	movw	r20, r18
    399c:	48 0f       	add	r20, r24
    399e:	51 1d       	adc	r21, r1
    39a0:	87 fd       	sbrc	r24, 7
    39a2:	5a 95       	dec	r21
    39a4:	ca 01       	movw	r24, r20
    39a6:	0e 94 49 23 	call	0x4692	; 0x4692 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	0e 94 0d 13 	call	0x261a	; 0x261a <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    39b0:	8c e3       	ldi	r24, 0x3C	; 60
    39b2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL29g_temperature_check_countdown>
    39b6:	39 c1       	rjmp	.+626    	; 0x3c2a <_Z4loopv+0x57e>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    39b8:	f5 01       	movw	r30, r10
    39ba:	41 91       	ld	r20, Z+
    39bc:	51 91       	ld	r21, Z+
    39be:	61 91       	ld	r22, Z+
    39c0:	71 91       	ld	r23, Z+
    39c2:	5f 01       	movw	r10, r30
    39c4:	87 ef       	ldi	r24, 0xF7	; 247
    39c6:	94 e0       	ldi	r25, 0x04	; 4
    39c8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    39cc:	87 ef       	ldi	r24, 0xF7	; 247
    39ce:	94 e0       	ldi	r25, 0x04	; 4
    39d0:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN8Goertzel10Magnitude2Ev>
    39d4:	e6 2e       	mov	r14, r22
    39d6:	f7 2e       	mov	r15, r23
    39d8:	d8 2e       	mov	r13, r24
    39da:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    39dc:	27 2d       	mov	r18, r7
    39de:	36 2d       	mov	r19, r6
    39e0:	45 2d       	mov	r20, r5
    39e2:	54 2d       	mov	r21, r4
    39e4:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__gesf2>
    39e8:	18 16       	cp	r1, r24
    39ea:	b4 f4       	brge	.+44     	; 0x3a18 <_Z4loopv+0x36c>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	34 e2       	ldi	r19, 0x24	; 36
    39f0:	44 e7       	ldi	r20, 0x74	; 116
    39f2:	59 e4       	ldi	r21, 0x49	; 73
    39f4:	6e 2d       	mov	r22, r14
    39f6:	7f 2d       	mov	r23, r15
    39f8:	8d 2d       	mov	r24, r13
    39fa:	9c 2d       	mov	r25, r12
    39fc:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__gesf2>
    3a00:	18 16       	cp	r1, r24
    3a02:	34 f4       	brge	.+12     	; 0x3a10 <_Z4loopv+0x364>
    3a04:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    3a06:	7e 2c       	mov	r7, r14
    3a08:	6f 2c       	mov	r6, r15
    3a0a:	5d 2c       	mov	r5, r13
    3a0c:	4c 2c       	mov	r4, r12
    3a0e:	04 c0       	rjmp	.+8      	; 0x3a18 <_Z4loopv+0x36c>
    3a10:	7e 2c       	mov	r7, r14
    3a12:	6f 2c       	mov	r6, r15
    3a14:	5d 2c       	mov	r5, r13
    3a16:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    3a18:	0f 5f       	subi	r16, 0xFF	; 255
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	04 30       	cpi	r16, 0x04	; 4
    3a1e:	11 05       	cpc	r17, r1
    3a20:	59 f6       	brne	.-106    	; 0x39b8 <_Z4loopv+0x30c>
    3a22:	13 c1       	rjmp	.+550    	; 0x3c4a <_Z4loopv+0x59e>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3a24:	f5 01       	movw	r30, r10
    3a26:	41 91       	ld	r20, Z+
    3a28:	51 91       	ld	r21, Z+
    3a2a:	61 91       	ld	r22, Z+
    3a2c:	71 91       	ld	r23, Z+
    3a2e:	5f 01       	movw	r10, r30
    3a30:	87 ef       	ldi	r24, 0xF7	; 247
    3a32:	94 e0       	ldi	r25, 0x04	; 4
    3a34:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    3a38:	87 ef       	ldi	r24, 0xF7	; 247
    3a3a:	94 e0       	ldi	r25, 0x04	; 4
    3a3c:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN8Goertzel10Magnitude2Ev>
    3a40:	e6 2e       	mov	r14, r22
    3a42:	f7 2e       	mov	r15, r23
    3a44:	d8 2e       	mov	r13, r24
    3a46:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    3a48:	25 2d       	mov	r18, r5
    3a4a:	34 2d       	mov	r19, r4
    3a4c:	43 2d       	mov	r20, r3
    3a4e:	52 2d       	mov	r21, r2
    3a50:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__gesf2>
    3a54:	18 16       	cp	r1, r24
    3a56:	b4 f4       	brge	.+44     	; 0x3a84 <_Z4loopv+0x3d8>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	34 e2       	ldi	r19, 0x24	; 36
    3a5c:	44 e7       	ldi	r20, 0x74	; 116
    3a5e:	59 e4       	ldi	r21, 0x49	; 73
    3a60:	6e 2d       	mov	r22, r14
    3a62:	7f 2d       	mov	r23, r15
    3a64:	8d 2d       	mov	r24, r13
    3a66:	9c 2d       	mov	r25, r12
    3a68:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__gesf2>
    3a6c:	18 16       	cp	r1, r24
    3a6e:	34 f4       	brge	.+12     	; 0x3a7c <_Z4loopv+0x3d0>
    3a70:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    3a72:	5e 2c       	mov	r5, r14
    3a74:	4f 2c       	mov	r4, r15
    3a76:	3d 2c       	mov	r3, r13
    3a78:	2c 2c       	mov	r2, r12
    3a7a:	04 c0       	rjmp	.+8      	; 0x3a84 <_Z4loopv+0x3d8>
    3a7c:	5e 2c       	mov	r5, r14
    3a7e:	4f 2c       	mov	r4, r15
    3a80:	3d 2c       	mov	r3, r13
    3a82:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    3a84:	0f 5f       	subi	r16, 0xFF	; 255
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	04 30       	cpi	r16, 0x04	; 4
    3a8a:	11 05       	cpc	r17, r1
    3a8c:	59 f6       	brne	.-106    	; 0x3a24 <_Z4loopv+0x378>
							lb_send_string(g_tempStr,TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    3a8e:	77 20       	and	r7, r7
    3a90:	0c f4       	brge	.+2      	; 0x3a94 <_Z4loopv+0x3e8>
    3a92:	71 c0       	rjmp	.+226    	; 0x3b76 <_Z4loopv+0x4ca>
				{
					char newKey = key[4 * y + x];
    3a94:	c4 01       	movw	r24, r8
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	8e 5a       	subi	r24, 0xAE	; 174
    3aa0:	9d 4f       	sbci	r25, 0xFD	; 253
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e6 0d       	add	r30, r6
    3aa6:	f7 1d       	adc	r31, r7
    3aa8:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    3aaa:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <_ZZ4loopvE7lastKey>
    3aae:	18 13       	cpse	r17, r24
    3ab0:	17 c0       	rjmp	.+46     	; 0x3ae0 <_Z4loopv+0x434>
					{
						checkCount++;
    3ab2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    3ab6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3aba:	01 96       	adiw	r24, 0x01	; 1
    3abc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3ac0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    3ac4:	03 97       	sbiw	r24, 0x03	; 3
    3ac6:	61 f4       	brne	.+24     	; 0x3ae0 <_Z4loopv+0x434>
						{
							g_dtmf_detected = TRUE;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_dtmf_detected>
							quietCount = 0;
    3ace:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ4loopvE10quietCount+0x1>
    3ad2:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    3ad6:	10 93 00 05 	sts	0x0500, r17	; 0x800500 <g_lastKey>
								sprintf(g_tempStr,"\"%c\"\n",g_lastKey);
								lb_send_string(g_tempStr,TRUE);								
							}
#endif // DEBUG_DTMF

							processKey(newKey);
    3ada:	81 2f       	mov	r24, r17
    3adc:	0e 94 c8 10 	call	0x2190	; 0x2190 <_Z10processKeyc>
							}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    3ae0:	10 93 74 04 	sts	0x0474, r17	; 0x800474 <_ZZ4loopvE7lastKey>
    3ae4:	48 c0       	rjmp	.+144    	; 0x3b76 <_Z4loopv+0x4ca>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    3ae6:	c0 90 f8 04 	lds	r12, 0x04F8	; 0x8004f8 <g_tick_count>
    3aea:	d0 90 f9 04 	lds	r13, 0x04F9	; 0x8004f9 <g_tick_count+0x1>
    3aee:	e0 90 fa 04 	lds	r14, 0x04FA	; 0x8004fa <g_tick_count+0x2>
    3af2:	f0 90 fb 04 	lds	r15, 0x04FB	; 0x8004fb <g_tick_count+0x3>
    3af6:	80 90 fc 04 	lds	r8, 0x04FC	; 0x8004fc <g_last>
    3afa:	90 90 fd 04 	lds	r9, 0x04FD	; 0x8004fd <g_last+0x1>
    3afe:	a0 90 fe 04 	lds	r10, 0x04FE	; 0x8004fe <g_last+0x2>
    3b02:	b0 90 ff 04 	lds	r11, 0x04FF	; 0x8004ff <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    3b06:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <_ZZ4loopvE10quietCount>
    3b0a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <_ZZ4loopvE10quietCount+0x1>
    3b0e:	9c 01       	movw	r18, r24
    3b10:	2f 5f       	subi	r18, 0xFF	; 255
    3b12:	3f 4f       	sbci	r19, 0xFF	; 255
    3b14:	30 93 73 04 	sts	0x0473, r19	; 0x800473 <_ZZ4loopvE10quietCount+0x1>
    3b18:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <_ZZ4loopvE10quietCount>
    3b1c:	03 97       	sbiw	r24, 0x03	; 3
    3b1e:	5c f1       	brlt	.+86     	; 0x3b76 <_Z4loopv+0x4ca>
				{
					g_dtmf_detected = FALSE;
    3b20:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <g_dtmf_detected>
					digitalWrite(PIN_LED1,OFF);
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	8d e0       	ldi	r24, 0x0D	; 13
    3b28:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

					if(delta < 1500)
    3b2c:	c8 18       	sub	r12, r8
    3b2e:	d9 08       	sbc	r13, r9
    3b30:	ea 08       	sbc	r14, r10
    3b32:	fb 08       	sbc	r15, r11
    3b34:	fc ed       	ldi	r31, 0xDC	; 220
    3b36:	cf 16       	cp	r12, r31
    3b38:	f5 e0       	ldi	r31, 0x05	; 5
    3b3a:	df 06       	cpc	r13, r31
    3b3c:	e1 04       	cpc	r14, r1
    3b3e:	f1 04       	cpc	r15, r1
    3b40:	20 f4       	brcc	.+8      	; 0x3b4a <_Z4loopv+0x49e>
					{
						checkCount = 0;
    3b42:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3b46:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    3b4a:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ4loopvE10quietCount+0x1>
    3b4e:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    3b52:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_tick_count>
    3b56:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <g_tick_count+0x1>
    3b5a:	a0 91 fa 04 	lds	r26, 0x04FA	; 0x8004fa <g_tick_count+0x2>
    3b5e:	b0 91 fb 04 	lds	r27, 0x04FB	; 0x8004fb <g_tick_count+0x3>
    3b62:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <g_last>
    3b66:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <g_last+0x1>
    3b6a:	a0 93 fe 04 	sts	0x04FE, r26	; 0x8004fe <g_last+0x2>
    3b6e:	b0 93 ff 04 	sts	0x04FF, r27	; 0x8004ff <g_last+0x3>
					lastKey = '\0';
    3b72:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    3b76:	ea e7       	ldi	r30, 0x7A	; 122
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	80 81       	ld	r24, Z
    3b7c:	88 60       	ori	r24, 0x08	; 8
    3b7e:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    3b80:	80 81       	ld	r24, Z
    3b82:	80 64       	ori	r24, 0x40	; 64
    3b84:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
    3b86:	10 91 33 05 	lds	r17, 0x0533	; 0x800533 <g_config_error>
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    3b8a:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z23clockConfigurationErrorv>
    3b8e:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <g_config_error>
    3b92:	81 11       	cpse	r24, r1
    3b94:	71 c0       	rjmp	.+226    	; 0x3c78 <_Z4loopv+0x5cc>
    3b96:	11 11       	cpse	r17, r1
    3b98:	6b c0       	rjmp	.+214    	; 0x3c70 <_Z4loopv+0x5c4>
    3b9a:	6e c0       	rjmp	.+220    	; 0x3c78 <_Z4loopv+0x5cc>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    3b9c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3ba0:	70 e0       	ldi	r23, 0x00	; 0
    3ba2:	82 e8       	ldi	r24, 0x82	; 130
    3ba4:	9b e1       	ldi	r25, 0x1B	; 27
    3ba6:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    3baa:	cb 01       	movw	r24, r22
    3bac:	6a e0       	ldi	r22, 0x0A	; 10
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    3bb4:	66 0f       	add	r22, r22
    3bb6:	77 1f       	adc	r23, r23
    3bb8:	70 93 57 05 	sts	0x0557, r23	; 0x800557 <g_code_throttle+0x1>
    3bbc:	60 93 56 05 	sts	0x0556, r22	; 0x800556 <g_code_throttle>
				BOOL repeat = FALSE;
    3bc0:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	be 01       	movw	r22, r28
    3bc8:	6f 5f       	subi	r22, 0xFF	; 255
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	8d e1       	ldi	r24, 0x1D	; 29
    3bce:	95 e0       	ldi	r25, 0x05	; 5
    3bd0:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    3bda:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_callsign_sent>
    3bde:	82 ce       	rjmp	.-764    	; 0x38e4 <_Z4loopv+0x238>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3be0:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3be4:	89 30       	cpi	r24, 0x09	; 9
    3be6:	08 f0       	brcs	.+2      	; 0x3bea <_Z4loopv+0x53e>
    3be8:	6e ce       	rjmp	.-804    	; 0x38c6 <_Z4loopv+0x21a>
    3bea:	7c ce       	rjmp	.-776    	; 0x38e4 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
    3bec:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <g_fox_transition>
    3bf0:	81 11       	cpse	r24, r1
    3bf2:	6f ce       	rjmp	.-802    	; 0x38d2 <_Z4loopv+0x226>
    3bf4:	77 ce       	rjmp	.-786    	; 0x38e4 <_Z4loopv+0x238>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZZ4loopvE7proceed>
    3bfc:	ab ce       	rjmp	.-682    	; 0x3954 <_Z4loopv+0x2a8>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    3bfe:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    3c02:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
    3c06:	a6 ce       	rjmp	.-692    	; 0x3954 <_Z4loopv+0x2a8>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3c08:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_fox>
    3c0c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    3c10:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	82 17       	cp	r24, r18
    3c18:	93 07       	cpc	r25, r19
    3c1a:	09 f0       	breq	.+2      	; 0x3c1e <_Z4loopv+0x572>
    3c1c:	97 ce       	rjmp	.-722    	; 0x394c <_Z4loopv+0x2a0>
    3c1e:	9a ce       	rjmp	.-716    	; 0x3954 <_Z4loopv+0x2a8>
			{
				g_on_the_air = FALSE;
    3c20:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_on_the_air+0x1>
    3c24:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_on_the_air>
    3c28:	95 ce       	rjmp	.-726    	; 0x3954 <_Z4loopv+0x2a8>
    3c2a:	0f 2e       	mov	r0, r31
    3c2c:	f2 e6       	ldi	r31, 0x62	; 98
    3c2e:	af 2e       	mov	r10, r31
    3c30:	f2 e0       	ldi	r31, 0x02	; 2
    3c32:	bf 2e       	mov	r11, r31
    3c34:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    3c36:	00 e0       	ldi	r16, 0x00	; 0
    3c38:	10 e0       	ldi	r17, 0x00	; 0
    3c3a:	88 24       	eor	r8, r8
    3c3c:	8a 94       	dec	r8
    3c3e:	98 2c       	mov	r9, r8
    3c40:	71 2c       	mov	r7, r1
    3c42:	61 2c       	mov	r6, r1
    3c44:	51 2c       	mov	r5, r1
    3c46:	41 2c       	mov	r4, r1
    3c48:	b7 ce       	rjmp	.-658    	; 0x39b8 <_Z4loopv+0x30c>
						lb_send_string(g_tempStr,TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    3c4a:	99 20       	and	r9, r9
    3c4c:	0c f4       	brge	.+2      	; 0x3c50 <_Z4loopv+0x5a4>
    3c4e:	4b cf       	rjmp	.-362    	; 0x3ae6 <_Z4loopv+0x43a>
    3c50:	0f 2e       	mov	r0, r31
    3c52:	f2 e7       	ldi	r31, 0x72	; 114
    3c54:	af 2e       	mov	r10, r31
    3c56:	f2 e0       	ldi	r31, 0x02	; 2
    3c58:	bf 2e       	mov	r11, r31
    3c5a:	f0 2d       	mov	r31, r0
    3c5c:	00 e0       	ldi	r16, 0x00	; 0
    3c5e:	10 e0       	ldi	r17, 0x00	; 0
    3c60:	66 24       	eor	r6, r6
    3c62:	6a 94       	dec	r6
    3c64:	76 2c       	mov	r7, r6
    3c66:	51 2c       	mov	r5, r1
    3c68:	41 2c       	mov	r4, r1
    3c6a:	31 2c       	mov	r3, r1
    3c6c:	21 2c       	mov	r2, r1
    3c6e:	da ce       	rjmp	.-588    	; 0x3a24 <_Z4loopv+0x378>
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
		{
			digitalWrite(PIN_LED2,OFF); /* ensure LED is off */
    3c70:	60 e0       	ldi	r22, 0x00	; 0
    3c72:	87 e0       	ldi	r24, 0x07	; 7
    3c74:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
		}
}
    3c78:	0f 90       	pop	r0
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	9f 90       	pop	r9
    3c90:	8f 90       	pop	r8
    3c92:	7f 90       	pop	r7
    3c94:	6f 90       	pop	r6
    3c96:	5f 90       	pop	r5
    3c98:	4f 90       	pop	r4
    3c9a:	3f 90       	pop	r3
    3c9c:	2f 90       	pop	r2
    3c9e:	08 95       	ret

00003ca0 <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);          /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    3ca0:	61 e0       	ldi	r22, 0x01	; 1
    3ca2:	8d e0       	ldi	r24, 0x0D	; 13
    3ca4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    3ca8:	60 e0       	ldi	r22, 0x00	; 0
    3caa:	8d e0       	ldi	r24, 0x0D	; 13
    3cac:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	87 e0       	ldi	r24, 0x07	; 7
    3cb4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	87 e0       	ldi	r24, 0x07	; 7
    3cbc:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    3cc0:	61 e0       	ldi	r22, 0x01	; 1
    3cc2:	8a e0       	ldi	r24, 0x0A	; 10
    3cc4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3cc8:	60 e0       	ldi	r22, 0x00	; 0
    3cca:	8a e0       	ldi	r24, 0x0A	; 10
    3ccc:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    3cd0:	61 e0       	ldi	r22, 0x01	; 1
    3cd2:	89 e0       	ldi	r24, 0x09	; 9
    3cd4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    3cd8:	60 e0       	ldi	r22, 0x00	; 0
    3cda:	89 e0       	ldi	r24, 0x09	; 9
    3cdc:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    3ce0:	61 e0       	ldi	r22, 0x01	; 1
    3ce2:	88 e0       	ldi	r24, 0x08	; 8
    3ce4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    3ce8:	60 e0       	ldi	r22, 0x00	; 0
    3cea:	88 e0       	ldi	r24, 0x08	; 8
    3cec:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    3cf0:	60 e0       	ldi	r22, 0x00	; 0
    3cf2:	84 e1       	ldi	r24, 0x14	; 20
    3cf4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    3cf8:	60 e0       	ldi	r22, 0x00	; 0
    3cfa:	85 e1       	ldi	r24, 0x15	; 21
    3cfc:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    3d00:	63 e0       	ldi	r22, 0x03	; 3
    3d02:	8c e0       	ldi	r24, 0x0C	; 12
    3d04:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    3d08:	61 e0       	ldi	r22, 0x01	; 1
    3d0a:	8b e0       	ldi	r24, 0x0B	; 11
    3d0c:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	8b e0       	ldi	r24, 0x0B	; 11
    3d14:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    3d18:	63 e0       	ldi	r22, 0x03	; 3
    3d1a:	84 e0       	ldi	r24, 0x04	; 4
    3d1c:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    3d20:	61 e0       	ldi	r22, 0x01	; 1
    3d22:	8e e0       	ldi	r24, 0x0E	; 14
    3d24:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    3d28:	61 e0       	ldi	r22, 0x01	; 1
    3d2a:	8f e0       	ldi	r24, 0x0F	; 15
    3d2c:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	80 e1       	ldi	r24, 0x10	; 16
    3d34:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	81 e1       	ldi	r24, 0x11	; 17
    3d3c:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    3d40:	61 e0       	ldi	r22, 0x01	; 1
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    3d50:	63 e0       	ldi	r22, 0x03	; 3
    3d52:	82 e1       	ldi	r24, 0x12	; 18
    3d54:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    3d58:	63 e0       	ldi	r22, 0x03	; 3
    3d5a:	83 e1       	ldi	r24, 0x13	; 19
    3d5c:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		initializeEEPROMVars(TRUE);     /* Must happen after pins are configured due to I2C access */
#else
		initializeEEPROMVars(FALSE);    /* Must happen after pins are configured due to I2C access */
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_Z20initializeEEPROMVarsh>
		setUpAudioSampling(true);
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	0e 94 0d 13 	call	0x261a	; 0x261a <_Z18setUpAudioSamplingh>
#endif

	/********************************************************************/
	/* INT0 is for external 1-second intertrupts                        */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    3d6c:	e9 e6       	ldi	r30, 0x69	; 105
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	80 81       	ld	r24, Z
    3d72:	82 60       	ori	r24, 0x02	; 2
    3d74:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    3d76:	e8 9a       	sbi	0x1d, 0	; 29


	/********************************************************************/
	/* TIMER2 is for periodic interrupts to drive Morse code generation */
	/* Reset control registers */
	TCCR2A = 0;
    3d78:	a0 eb       	ldi	r26, 0xB0	; 176
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	1c 92       	st	X, r1
	TCCR2B = 0;
    3d7e:	e1 eb       	ldi	r30, 0xB1	; 177
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    3d84:	8c 91       	ld	r24, X
    3d86:	82 60       	ori	r24, 0x02	; 2
    3d88:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    3d8a:	80 81       	ld	r24, Z
    3d8c:	87 60       	ori	r24, 0x07	; 7
    3d8e:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    3d90:	8c e0       	ldi	r24, 0x0C	; 12
    3d92:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    3d96:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    3d9a:	e6 eb       	ldi	r30, 0xB6	; 182
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	80 81       	ld	r24, Z
    3da0:	8f 7d       	andi	r24, 0xDF	; 223
    3da2:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    3da4:	e0 e7       	ldi	r30, 0x70	; 112
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    3daa:	80 81       	ld	r24, Z
    3dac:	84 60       	ori	r24, 0x04	; 4
    3dae:	80 83       	st	Z, r24
	
	/********************************************************************/
	/* Timer 1 is used for controlling the attenuator for AM generation */
		/* set timer1 interrupt at 16 kHz */

	TCCR1A = 0; /* set entire TCCR1A register to 0 */
    3db0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0; /* same for TCCR1B */
    3db4:	e1 e8       	ldi	r30, 0x81	; 129
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	10 82       	st	Z, r1
	TCNT1 = 0;  /* initialize counter value to 0 */
    3dba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    3dbe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A = 500; /* For ~1000 Hz tone output */
    3dc2:	84 ef       	ldi	r24, 0xF4	; 244
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
    3dc6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3dca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    3dce:	80 81       	ld	r24, Z
    3dd0:	88 60       	ori	r24, 0x08	; 8
    3dd2:	80 83       	st	Z, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    3dd4:	80 81       	ld	r24, Z
    3dd6:	81 60       	ori	r24, 0x01	; 1
    3dd8:	80 83       	st	Z, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    3dda:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01);     /* Set CTC mode */
    3ddc:	84 b5       	in	r24, 0x24	; 36
    3dde:	82 60       	ori	r24, 0x02	; 2
    3de0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    3de2:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);      /* Prescale 256 */
    3de4:	85 b5       	in	r24, 0x25	; 37
    3de6:	84 60       	ori	r24, 0x04	; 4
    3de8:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    3dea:	8f e2       	ldi	r24, 0x2F	; 47
    3dec:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    3dee:	ee e6       	ldi	r30, 0x6E	; 110
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    3df4:	80 81       	ld	r24, Z
    3df6:	82 60       	ori	r24, 0x02	; 2
    3df8:	80 83       	st	Z, r24

	/********************************************************************/
	/* Sync button pin change interrupt */
	PCMSK2 = 0x00;
    3dfa:	ed e6       	ldi	r30, 0x6D	; 109
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    3e00:	80 e1       	ldi	r24, 0x10	; 16
    3e02:	80 83       	st	Z, r24
	PCICR = 0x00;
    3e04:	e8 e6       	ldi	r30, 0x68	; 104
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    3e0a:	84 e0       	ldi	r24, 0x04	; 4
    3e0c:	80 83       	st	Z, r24
	sei();                                                                                  /* Enable interrupts */
    3e0e:	78 94       	sei

	linkbus_init(BAUD);                                                                     /* Start the Link Bus serial comms */
    3e10:	60 e0       	ldi	r22, 0x00	; 0
    3e12:	71 ee       	ldi	r23, 0xE1	; 225
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	0e 94 08 07 	call	0xe10	; 0xe10 <_Z12linkbus_initm>

#if !INIT_EEPROM_ONLY
		uint8_t result = rv3028_1s_sqw();
    3e1c:	0e 94 09 24 	call	0x4812	; 0x4812 <_Z13rv3028_1s_sqwv>
    3e20:	c8 2f       	mov	r28, r24
#else
		rv3028_1s_sqw();
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch(NULL, NULL);
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 ca 21 	call	0x4394	; 0x4394 <_Z16rv3028_get_epochPbPc>
    3e2e:	60 93 50 05 	sts	0x0550, r22	; 0x800550 <g_current_epoch>
    3e32:	70 93 51 05 	sts	0x0551, r23	; 0x800551 <g_current_epoch+0x1>
    3e36:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_current_epoch+0x2>
    3e3a:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		lb_send_Help();
    3e3e:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z12lb_send_Helpv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    3e42:	cc 23       	and	r28, r28
    3e44:	54 f4       	brge	.+20     	; 0x3e5a <main+0x1ba>
		{
			sprintf(g_tempStr, "Err 1\n");
    3e46:	87 e0       	ldi	r24, 0x07	; 7
    3e48:	ee e0       	ldi	r30, 0x0E	; 14
    3e4a:	f2 e0       	ldi	r31, 0x02	; 2
    3e4c:	af ec       	ldi	r26, 0xCF	; 207
    3e4e:	b4 e0       	ldi	r27, 0x04	; 4
    3e50:	01 90       	ld	r0, Z+
    3e52:	0d 92       	st	X+, r0
    3e54:	8a 95       	dec	r24
    3e56:	e1 f7       	brne	.-8      	; 0x3e50 <main+0x1b0>
    3e58:	23 c0       	rjmp	.+70     	; 0x3ea0 <main+0x200>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    3e5a:	c0 ff       	sbrs	r28, 0
    3e5c:	0a c0       	rjmp	.+20     	; 0x3e72 <main+0x1d2>
		{
			sprintf(g_tempStr, "Err 2\n");
    3e5e:	87 e0       	ldi	r24, 0x07	; 7
    3e60:	e5 e1       	ldi	r30, 0x15	; 21
    3e62:	f2 e0       	ldi	r31, 0x02	; 2
    3e64:	af ec       	ldi	r26, 0xCF	; 207
    3e66:	b4 e0       	ldi	r27, 0x04	; 4
    3e68:	01 90       	ld	r0, Z+
    3e6a:	0d 92       	st	X+, r0
    3e6c:	8a 95       	dec	r24
    3e6e:	e1 f7       	brne	.-8      	; 0x3e68 <main+0x1c8>
    3e70:	17 c0       	rjmp	.+46     	; 0x3ea0 <main+0x200>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    3e72:	c1 ff       	sbrs	r28, 1
    3e74:	0a c0       	rjmp	.+20     	; 0x3e8a <main+0x1ea>
		{
			sprintf(g_tempStr, "Err 3\n");
    3e76:	87 e0       	ldi	r24, 0x07	; 7
    3e78:	ec e1       	ldi	r30, 0x1C	; 28
    3e7a:	f2 e0       	ldi	r31, 0x02	; 2
    3e7c:	af ec       	ldi	r26, 0xCF	; 207
    3e7e:	b4 e0       	ldi	r27, 0x04	; 4
    3e80:	01 90       	ld	r0, Z+
    3e82:	0d 92       	st	X+, r0
    3e84:	8a 95       	dec	r24
    3e86:	e1 f7       	brne	.-8      	; 0x3e80 <main+0x1e0>
    3e88:	0b c0       	rjmp	.+22     	; 0x3ea0 <main+0x200>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    3e8a:	c5 ff       	sbrs	r28, 5
    3e8c:	09 c0       	rjmp	.+18     	; 0x3ea0 <main+0x200>
		{
			sprintf(g_tempStr, "RTC OK\n");
    3e8e:	88 e0       	ldi	r24, 0x08	; 8
    3e90:	e3 e2       	ldi	r30, 0x23	; 35
    3e92:	f2 e0       	ldi	r31, 0x02	; 2
    3e94:	af ec       	ldi	r26, 0xCF	; 207
    3e96:	b4 e0       	ldi	r27, 0x04	; 4
    3e98:	01 90       	ld	r0, Z+
    3e9a:	0d 92       	st	X+, r0
    3e9c:	8a 95       	dec	r24
    3e9e:	e1 f7       	brne	.-8      	; 0x3e98 <main+0x1f8>
		}

		if(strlen(g_tempStr))
    3ea0:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_tempStr>
    3ea4:	88 23       	and	r24, r24
    3ea6:	29 f0       	breq	.+10     	; 0x3eb2 <main+0x212>
		{
			lb_send_string(g_tempStr, TRUE);
    3ea8:	61 e0       	ldi	r22, 0x01	; 1
    3eaa:	8f ec       	ldi	r24, 0xCF	; 207
    3eac:	94 e0       	ldi	r25, 0x04	; 4
    3eae:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    3eb2:	0e 94 84 13 	call	0x2708	; 0x2708 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    3eb6:	0e 94 83 07 	call	0xf06	; 0xf06 <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A); /* start timer 1 interrupts */
    3eba:	ef e6       	ldi	r30, 0x6F	; 111
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	82 60       	ori	r24, 0x02	; 2
    3ec2:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3ecc:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z23clockConfigurationErrorv>
    3ed0:	81 11       	cpse	r24, r1
    3ed2:	07 c0       	rjmp	.+14     	; 0x3ee2 <main+0x242>
    3ed4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	91 11       	cpse	r25, r1
    3edc:	03 c0       	rjmp	.+6      	; 0x3ee4 <main+0x244>
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	01 c0       	rjmp	.+2      	; 0x3ee4 <main+0x244>
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    3ee8:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_Z4loopv>
    3eec:	fd cf       	rjmp	.-6      	; 0x3ee8 <main+0x248>

00003eee <_GLOBAL__sub_I_g_seconds_since_sync>:
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    3ef2:	00 e0       	ldi	r16, 0x00	; 0
    3ef4:	18 e7       	ldi	r17, 0x78	; 120
    3ef6:	26 e9       	ldi	r18, 0x96	; 150
    3ef8:	36 e4       	ldi	r19, 0x46	; 70
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	69 e4       	ldi	r22, 0x49	; 73
    3f00:	73 e4       	ldi	r23, 0x43	; 67
    3f02:	87 ef       	ldi	r24, 0xF7	; 247
    3f04:	94 e0       	ldi	r25, 0x04	; 4
    3f06:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8GoertzelC1Eff>
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	08 95       	ret

00003f10 <_GLOBAL__sub_D_g_seconds_since_sync>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    3f10:	87 ef       	ldi	r24, 0xF7	; 247
    3f12:	94 e0       	ldi	r25, 0x04	; 4
    3f14:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN8GoertzelD1Ev>
    3f18:	08 95       	ret

00003f1a <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	b0 97       	sbiw	r30, 0x20	; 32
    3f20:	ed 35       	cpi	r30, 0x5D	; 93
    3f22:	f1 05       	cpc	r31, r1
    3f24:	08 f0       	brcs	.+2      	; 0x3f28 <_Z12getMorseCharc+0xe>
    3f26:	e4 c0       	rjmp	.+456    	; 0x40f0 <_Z12getMorseCharc+0x1d6>
    3f28:	e8 57       	subi	r30, 0x78	; 120
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3f30:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    3f32:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3f34:	61 e0       	ldi	r22, 0x01	; 1
    3f36:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    3f38:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    3f3a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    3f3c:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3f3e:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    3f40:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    3f42:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3f44:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    3f46:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    3f4a:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    3f4e:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3f50:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    3f52:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    3f54:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3f56:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3f58:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    3f5a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3f5c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    3f5e:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    3f60:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    3f62:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3f64:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    3f66:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    3f68:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    3f6a:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3f6c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    3f6e:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3f70:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    3f72:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    3f74:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    3f76:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3f78:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    3f7a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    3f7c:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    3f7e:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3f80:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    3f82:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3f84:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3f86:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    3f88:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    3f8a:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3f8c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    3f8e:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    3f90:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    3f92:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3f94:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    3f96:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    3f98:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    3f9a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    3f9c:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    3f9e:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    3fa0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    3fa2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    3fa4:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3fa6:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3fa8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    3faa:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    3fac:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    3fae:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    3fb0:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    3fb2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    3fb4:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    3fb6:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    3fb8:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    3fba:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    3fbe:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    3fc0:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    3fc2:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    3fc4:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    3fc6:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    3fc8:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    3fca:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    3fcc:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    3fce:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    3fd0:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    3fd2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    3fd4:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    3fd6:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    3fd8:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    3fda:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    3fdc:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    3fde:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    3fe0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    3fe2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    3fe4:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3fe6:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    3fe8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    3fea:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    3fec:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    3fee:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    3ff0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    3ff2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    3ff4:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    3ff6:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    3ff8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    3ffa:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    3ffc:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    3ffe:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4000:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4002:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4004:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4006:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4008:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    400a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    400c:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    400e:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4010:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4012:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4014:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4016:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4018:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    401a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    401c:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    401e:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4020:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4022:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4024:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4026:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4028:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    402a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    402c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    402e:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4030:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4032:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4034:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4036:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4038:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    403a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    403c:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    403e:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4040:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4042:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4044:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4046:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4048:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    404a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    404c:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    404e:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4050:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4052:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4054:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4056:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4058:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    405a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    405c:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    405e:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4060:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4062:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4064:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4066:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4068:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    406a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    406c:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    406e:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4070:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4072:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4074:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4076:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4078:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    407a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    407c:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    407e:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4080:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4082:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4084:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4086:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4088:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    408a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    408c:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    408e:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4090:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4092:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4094:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4096:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4098:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    409a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    409c:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    409e:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    40a0:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    40a2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    40a4:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    40a6:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    40a8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    40aa:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    40ac:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    40ae:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    40b0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    40b2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    40b4:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    40b6:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    40b8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    40ba:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    40bc:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    40be:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    40c0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    40c2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    40c4:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    40c6:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    40c8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    40ca:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    40cc:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    40ce:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    40d0:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    40d2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    40d4:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    40d6:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    40d8:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    40da:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    40dc:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    40de:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    40e0:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    40e2:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    40e4:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    40e6:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    40e8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    40ea:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    40ec:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    40ee:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    40f0:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    40f2:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    40f4:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    40f6:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    40f8:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    40fa:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    40fc:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    40fe:	08 95       	ret

00004100 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4106:	00 97       	sbiw	r24, 0x00	; 0
    4108:	b1 f1       	breq	.+108    	; 0x4176 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    410a:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    410e:	61 15       	cp	r22, r1
    4110:	71 05       	cpc	r23, r1
    4112:	21 f0       	breq	.+8      	; 0x411c <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4114:	db 01       	movw	r26, r22
    4116:	2c 91       	ld	r18, X
    4118:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    411c:	fc 01       	movw	r30, r24
    411e:	20 81       	ld	r18, Z
    4120:	22 23       	and	r18, r18
    4122:	d9 f0       	breq	.+54     	; 0x415a <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4124:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4128:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    412c:	80 e2       	ldi	r24, 0x20	; 32
    412e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4132:	82 2f       	mov	r24, r18
    4134:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12getMorseCharc>
    4138:	60 93 65 05 	sts	0x0565, r22	; 0x800565 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    413c:	70 93 66 05 	sts	0x0566, r23	; 0x800566 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4140:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4144:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4148:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    414c:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4150:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4154:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <_ZZ9makeMorsePcPhS0_E15completedString>
    4158:	0a c0       	rjmp	.+20     	; 0x416e <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    415a:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    415e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4168:	20 97       	sbiw	r28, 0x00	; 0
    416a:	09 f0       	breq	.+2      	; 0x416e <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    416c:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    416e:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	c0 c0       	rjmp	.+384    	; 0x42f6 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4176:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <_ZZ9makeMorsePcPhS0_E3str>
    417a:	f0 91 69 05 	lds	r31, 0x0569	; 0x800569 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    417e:	30 97       	sbiw	r30, 0x00	; 0
    4180:	09 f4       	brne	.+2      	; 0x4184 <_Z9makeMorsePcPhS0_+0x84>
    4182:	aa c0       	rjmp	.+340    	; 0x42d8 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4184:	61 15       	cp	r22, r1
    4186:	71 05       	cpc	r23, r1
    4188:	21 f0       	breq	.+8      	; 0x4192 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    418a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    418e:	db 01       	movw	r26, r22
    4190:	8c 93       	st	X, r24
		}

		if(completedString)
    4192:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <_ZZ9makeMorsePcPhS0_E15completedString>
    4196:	88 23       	and	r24, r24
    4198:	49 f0       	breq	.+18     	; 0x41ac <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    419a:	20 97       	sbiw	r28, 0x00	; 0
    419c:	09 f4       	brne	.+2      	; 0x41a0 <_Z9makeMorsePcPhS0_+0xa0>
    419e:	a8 c0       	rjmp	.+336    	; 0x42f0 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    41a4:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	a5 c0       	rjmp	.+330    	; 0x42f6 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    41ac:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    41b0:	88 23       	and	r24, r24
    41b2:	21 f0       	breq	.+8      	; 0x41bc <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    41b4:	81 50       	subi	r24, 0x01	; 1
    41b6:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    41ba:	7f c0       	rjmp	.+254    	; 0x42ba <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    41bc:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>
    41c0:	88 23       	and	r24, r24
    41c2:	81 f0       	breq	.+32     	; 0x41e4 <_Z9makeMorsePcPhS0_+0xe4>
    41c4:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    41c8:	81 11       	cpse	r24, r1
    41ca:	0c c0       	rjmp	.+24     	; 0x41e4 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    41cc:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    41d0:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    41d4:	88 23       	and	r24, r24
    41d6:	09 f4       	brne	.+2      	; 0x41da <_Z9makeMorsePcPhS0_+0xda>
    41d8:	70 c0       	rjmp	.+224    	; 0x42ba <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    41da:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    41de:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    41e2:	6b c0       	rjmp	.+214    	; 0x42ba <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    41e4:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    41e8:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    41ec:	89 17       	cp	r24, r25
    41ee:	90 f1       	brcs	.+100    	; 0x4254 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    41f0:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <_ZZ9makeMorsePcPhS0_E9charIndex>
    41f4:	8f 5f       	subi	r24, 0xFF	; 255
    41f6:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZZ9makeMorsePcPhS0_E9charIndex>
    41fa:	df 01       	movw	r26, r30
    41fc:	a8 0f       	add	r26, r24
    41fe:	b1 1d       	adc	r27, r1
    4200:	8c 91       	ld	r24, X
    4202:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4206:	81 11       	cpse	r24, r1
    4208:	19 c0       	rjmp	.+50     	; 0x423c <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    420a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    420e:	88 23       	and	r24, r24
    4210:	31 f0       	breq	.+12     	; 0x421e <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4212:	80 81       	ld	r24, Z
    4214:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4218:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZZ9makeMorsePcPhS0_E9charIndex>
    421c:	0f c0       	rjmp	.+30     	; 0x423c <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    421e:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4222:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4226:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    422a:	91 e0       	ldi	r25, 0x01	; 1
    422c:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    4230:	20 97       	sbiw	r28, 0x00	; 0
    4232:	09 f0       	breq	.+2      	; 0x4236 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4234:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4236:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    423a:	5d c0       	rjmp	.+186    	; 0x42f6 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    423c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    4240:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12getMorseCharc>
    4244:	60 93 65 05 	sts	0x0565, r22	; 0x800565 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4248:	70 93 66 05 	sts	0x0566, r23	; 0x800566 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    424c:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4250:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4254:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4258:	2d 3f       	cpi	r18, 0xFD	; 253
    425a:	00 f5       	brcc	.+64     	; 0x429c <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    425c:	40 91 63 05 	lds	r20, 0x0563	; 0x800563 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4260:	31 e0       	ldi	r19, 0x01	; 1
    4262:	34 0f       	add	r19, r20
    4264:	30 93 63 05 	sts	0x0563, r19	; 0x800563 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <_Z9makeMorsePcPhS0_+0x172>
    426e:	88 0f       	add	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	4a 95       	dec	r20
    4274:	e2 f7       	brpl	.-8      	; 0x426e <_Z9makeMorsePcPhS0_+0x16e>
    4276:	82 23       	and	r24, r18
    4278:	21 f0       	breq	.+8      	; 0x4282 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    427a:	82 e0       	ldi	r24, 0x02	; 2
    427c:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4282:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    428c:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4290:	38 17       	cp	r19, r24
    4292:	98 f0       	brcs	.+38     	; 0x42ba <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4294:	82 e0       	ldi	r24, 0x02	; 2
    4296:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    429a:	0f c0       	rjmp	.+30     	; 0x42ba <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    429c:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    42a0:	9f ef       	ldi	r25, 0xFF	; 255
    42a2:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    42a6:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    42aa:	84 30       	cpi	r24, 0x04	; 4
    42ac:	20 f0       	brcs	.+8      	; 0x42b6 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    42ae:	84 50       	subi	r24, 0x04	; 4
    42b0:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    42b4:	02 c0       	rjmp	.+4      	; 0x42ba <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    42b6:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    42ba:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    42be:	8c 33       	cpi	r24, 0x3C	; 60
    42c0:	31 f4       	brne	.+12     	; 0x42ce <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    42c8:	20 97       	sbiw	r28, 0x00	; 0
    42ca:	41 f4       	brne	.+16     	; 0x42dc <_Z9makeMorsePcPhS0_+0x1dc>
    42cc:	14 c0       	rjmp	.+40     	; 0x42f6 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    42ce:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    42d2:	20 97       	sbiw	r28, 0x00	; 0
    42d4:	19 f4       	brne	.+6      	; 0x42dc <_Z9makeMorsePcPhS0_+0x1dc>
    42d6:	09 c0       	rjmp	.+18     	; 0x42ea <_Z9makeMorsePcPhS0_+0x1ea>
    42d8:	20 97       	sbiw	r28, 0x00	; 0
    42da:	19 f0       	breq	.+6      	; 0x42e2 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    42dc:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <_ZZ9makeMorsePcPhS0_E15completedString>
    42e0:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    42e2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    42e6:	81 11       	cpse	r24, r1
    42e8:	05 c0       	rjmp	.+10     	; 0x42f4 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    42ea:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <_ZZ9makeMorsePcPhS0_E9carrierOn>
    42ee:	03 c0       	rjmp	.+6      	; 0x42f6 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	01 c0       	rjmp	.+2      	; 0x42f6 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    42f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    42f6:	df 91       	pop	r29
    42f8:	cf 91       	pop	r28
    42fa:	08 95       	ret

000042fc <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    42fc:	cf 92       	push	r12
    42fe:	df 92       	push	r13
    4300:	ef 92       	push	r14
    4302:	ff 92       	push	r15
    4304:	0f 93       	push	r16
    4306:	1f 93       	push	r17
    4308:	cf 93       	push	r28
    430a:	fc 01       	movw	r30, r24
    430c:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    430e:	80 81       	ld	r24, Z
		if(!c)
    4310:	88 23       	and	r24, r24
    4312:	c1 f0       	breq	.+48     	; 0x4344 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4314:	8f 01       	movw	r16, r30
    4316:	0f 5f       	subi	r16, 0xFF	; 255
    4318:	1f 4f       	sbci	r17, 0xFF	; 255
    431a:	7f 01       	movw	r14, r30
    431c:	94 e1       	ldi	r25, 0x14	; 20
    431e:	e9 0e       	add	r14, r25
    4320:	f1 1c       	adc	r15, r1
    4322:	c0 e0       	ldi	r28, 0x00	; 0
    4324:	05 c0       	rjmp	.+10     	; 0x4330 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4326:	f8 01       	movw	r30, r16
    4328:	81 91       	ld	r24, Z+
    432a:	8f 01       	movw	r16, r30
		if(!c)
    432c:	88 23       	and	r24, r24
    432e:	59 f0       	breq	.+22     	; 0x4346 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4330:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4334:	6d 3f       	cpi	r22, 0xFD	; 253
    4336:	08 f4       	brcc	.+2      	; 0x433a <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4338:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    433a:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    433c:	0e 15       	cp	r16, r14
    433e:	1f 05       	cpc	r17, r15
    4340:	91 f7       	brne	.-28     	; 0x4326 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4342:	01 c0       	rjmp	.+2      	; 0x4346 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4344:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4346:	80 eb       	ldi	r24, 0xB0	; 176
    4348:	94 e0       	ldi	r25, 0x04	; 4
    434a:	b6 01       	movw	r22, r12
    434c:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__udivmodhi4>
}
    4350:	c6 9f       	mul	r28, r22
    4352:	c0 01       	movw	r24, r0
    4354:	c7 9f       	mul	r28, r23
    4356:	90 0d       	add	r25, r0
    4358:	11 24       	eor	r1, r1
    435a:	cf 91       	pop	r28
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	ff 90       	pop	r15
    4362:	ef 90       	pop	r14
    4364:	df 90       	pop	r13
    4366:	cf 90       	pop	r12
    4368:	08 95       	ret

0000436a <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    436a:	98 2f       	mov	r25, r24
    436c:	96 95       	lsr	r25
    436e:	96 95       	lsr	r25
    4370:	96 95       	lsr	r25
    4372:	9e 71       	andi	r25, 0x1E	; 30
    4374:	29 2f       	mov	r18, r25
    4376:	22 0f       	add	r18, r18
    4378:	22 0f       	add	r18, r18
    437a:	92 0f       	add	r25, r18
    437c:	8f 70       	andi	r24, 0x0F	; 15
    437e:	89 0f       	add	r24, r25
    4380:	08 95       	ret

00004382 <_Z8char2bcdPc>:
    4382:	fc 01       	movw	r30, r24
    4384:	20 81       	ld	r18, Z
    4386:	81 81       	ldd	r24, Z+1	; 0x01
    4388:	80 53       	subi	r24, 0x30	; 48
    438a:	f0 e1       	ldi	r31, 0x10	; 16
    438c:	2f 9f       	mul	r18, r31
    438e:	80 0d       	add	r24, r0
    4390:	11 24       	eor	r1, r1
    4392:	08 95       	ret

00004394 <_Z16rv3028_get_epochPbPc>:
    4394:	4f 92       	push	r4
    4396:	5f 92       	push	r5
    4398:	6f 92       	push	r6
    439a:	7f 92       	push	r7
    439c:	8f 92       	push	r8
    439e:	9f 92       	push	r9
    43a0:	af 92       	push	r10
    43a2:	bf 92       	push	r11
    43a4:	cf 92       	push	r12
    43a6:	df 92       	push	r13
    43a8:	ef 92       	push	r14
    43aa:	ff 92       	push	r15
    43ac:	0f 93       	push	r16
    43ae:	1f 93       	push	r17
    43b0:	cf 93       	push	r28
    43b2:	df 93       	push	r29
    43b4:	cd b7       	in	r28, 0x3d	; 61
    43b6:	de b7       	in	r29, 0x3e	; 62
    43b8:	27 97       	sbiw	r28, 0x07	; 7
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	de bf       	out	0x3e, r29	; 62
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	cd bf       	out	0x3d, r28	; 61
    43c4:	6c 01       	movw	r12, r24
    43c6:	7b 01       	movw	r14, r22
    43c8:	fe 01       	movw	r30, r28
    43ca:	31 96       	adiw	r30, 0x01	; 1
    43cc:	87 e0       	ldi	r24, 0x07	; 7
    43ce:	df 01       	movw	r26, r30
    43d0:	1d 92       	st	X+, r1
    43d2:	8a 95       	dec	r24
    43d4:	e9 f7       	brne	.-6      	; 0x43d0 <_Z16rv3028_get_epochPbPc+0x3c>
    43d6:	61 15       	cp	r22, r1
    43d8:	71 05       	cpc	r23, r1
    43da:	f1 f0       	breq	.+60     	; 0x4418 <_Z16rv3028_get_epochPbPc+0x84>
    43dc:	cb 01       	movw	r24, r22
    43de:	0a 96       	adiw	r24, 0x0a	; 10
    43e0:	0e 94 c1 21 	call	0x4382	; 0x4382 <_Z8char2bcdPc>
    43e4:	89 83       	std	Y+1, r24	; 0x01
    43e6:	c7 01       	movw	r24, r14
    43e8:	08 96       	adiw	r24, 0x08	; 8
    43ea:	0e 94 c1 21 	call	0x4382	; 0x4382 <_Z8char2bcdPc>
    43ee:	8a 83       	std	Y+2, r24	; 0x02
    43f0:	c7 01       	movw	r24, r14
    43f2:	06 96       	adiw	r24, 0x06	; 6
    43f4:	0e 94 c1 21 	call	0x4382	; 0x4382 <_Z8char2bcdPc>
    43f8:	8b 83       	std	Y+3, r24	; 0x03
    43fa:	c7 01       	movw	r24, r14
    43fc:	04 96       	adiw	r24, 0x04	; 4
    43fe:	0e 94 c1 21 	call	0x4382	; 0x4382 <_Z8char2bcdPc>
    4402:	8d 83       	std	Y+5, r24	; 0x05
    4404:	c7 01       	movw	r24, r14
    4406:	02 96       	adiw	r24, 0x02	; 2
    4408:	0e 94 c1 21 	call	0x4382	; 0x4382 <_Z8char2bcdPc>
    440c:	8e 83       	std	Y+6, r24	; 0x06
    440e:	c7 01       	movw	r24, r14
    4410:	0e 94 c1 21 	call	0x4382	; 0x4382 <_Z8char2bcdPc>
    4414:	8f 83       	std	Y+7, r24	; 0x07
    4416:	0b c0       	rjmp	.+22     	; 0x442e <_Z16rv3028_get_epochPbPc+0x9a>
    4418:	27 e0       	ldi	r18, 0x07	; 7
    441a:	ae 01       	movw	r20, r28
    441c:	4f 5f       	subi	r20, 0xFF	; 255
    441e:	5f 4f       	sbci	r21, 0xFF	; 255
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	84 ea       	ldi	r24, 0xA4	; 164
    4424:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z15i2c_device_readhhPhh>
    4428:	38 2f       	mov	r19, r24
    442a:	81 11       	cpse	r24, r1
    442c:	9b c0       	rjmp	.+310    	; 0x4564 <_Z16rv3028_get_epochPbPc+0x1d0>
    442e:	8f 81       	ldd	r24, Y+7	; 0x07
    4430:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z7bcd2dech>
    4434:	a8 2e       	mov	r10, r24
    4436:	b1 2c       	mov	r11, r1
    4438:	45 01       	movw	r8, r10
    443a:	b0 e3       	ldi	r27, 0x30	; 48
    443c:	8b 1a       	sub	r8, r27
    443e:	b8 ef       	ldi	r27, 0xF8	; 248
    4440:	9b 0a       	sbc	r9, r27
    4442:	8e 81       	ldd	r24, Y+6	; 0x06
    4444:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z7bcd2dech>
    4448:	08 2f       	mov	r16, r24
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z7bcd2dech>
    4450:	78 2e       	mov	r7, r24
    4452:	02 30       	cpi	r16, 0x02	; 2
    4454:	68 f0       	brcs	.+26     	; 0x4470 <_Z16rv3028_get_epochPbPc+0xdc>
    4456:	e1 2c       	mov	r14, r1
    4458:	f1 2c       	mov	r15, r1
    445a:	11 e0       	ldi	r17, 0x01	; 1
    445c:	61 2f       	mov	r22, r17
    445e:	c4 01       	movw	r24, r8
    4460:	0e 94 20 01 	call	0x240	; 0x240 <month_length>
    4464:	e8 0e       	add	r14, r24
    4466:	f1 1c       	adc	r15, r1
    4468:	1f 5f       	subi	r17, 0xFF	; 255
    446a:	01 13       	cpse	r16, r17
    446c:	f7 cf       	rjmp	.-18     	; 0x445c <_Z16rv3028_get_epochPbPc+0xc8>
    446e:	02 c0       	rjmp	.+4      	; 0x4474 <_Z16rv3028_get_epochPbPc+0xe0>
    4470:	e1 2c       	mov	r14, r1
    4472:	f1 2c       	mov	r15, r1
    4474:	87 2d       	mov	r24, r7
    4476:	77 0c       	add	r7, r7
    4478:	99 0b       	sbc	r25, r25
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	e8 0e       	add	r14, r24
    447e:	f9 1e       	adc	r15, r25
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z7bcd2dech>
    4486:	48 2e       	mov	r4, r24
    4488:	8a 81       	ldd	r24, Y+2	; 0x02
    448a:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z7bcd2dech>
    448e:	18 2f       	mov	r17, r24
    4490:	8b 81       	ldd	r24, Y+3	; 0x03
    4492:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z7bcd2dech>
    4496:	04 2c       	mov	r0, r4
    4498:	00 0c       	add	r0, r0
    449a:	55 08       	sbc	r5, r5
    449c:	ec e3       	ldi	r30, 0x3C	; 60
    449e:	1e 02       	muls	r17, r30
    44a0:	40 0c       	add	r4, r0
    44a2:	51 1c       	adc	r5, r1
    44a4:	11 24       	eor	r1, r1
    44a6:	05 2c       	mov	r0, r5
    44a8:	00 0c       	add	r0, r0
    44aa:	66 08       	sbc	r6, r6
    44ac:	77 08       	sbc	r7, r7
    44ae:	a8 2f       	mov	r26, r24
    44b0:	88 0f       	add	r24, r24
    44b2:	bb 0b       	sbc	r27, r27
    44b4:	20 e1       	ldi	r18, 0x10	; 16
    44b6:	3e e0       	ldi	r19, 0x0E	; 14
    44b8:	0e 94 18 28 	call	0x5030	; 0x5030 <__usmulhisi3>
    44bc:	46 0e       	add	r4, r22
    44be:	57 1e       	adc	r5, r23
    44c0:	68 1e       	adc	r6, r24
    44c2:	79 1e       	adc	r7, r25
    44c4:	d7 01       	movw	r26, r14
    44c6:	20 e8       	ldi	r18, 0x80	; 128
    44c8:	31 e5       	ldi	r19, 0x51	; 81
    44ca:	41 e0       	ldi	r20, 0x01	; 1
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	0e 94 2a 28 	call	0x5054	; 0x5054 <__mulshisi3>
    44d2:	46 0e       	add	r4, r22
    44d4:	57 1e       	adc	r5, r23
    44d6:	68 1e       	adc	r6, r24
    44d8:	79 1e       	adc	r7, r25
    44da:	d5 01       	movw	r26, r10
    44dc:	5e 96       	adiw	r26, 0x1e	; 30
    44de:	20 e8       	ldi	r18, 0x80	; 128
    44e0:	33 e3       	ldi	r19, 0x33	; 51
    44e2:	41 ee       	ldi	r20, 0xE1	; 225
    44e4:	51 e0       	ldi	r21, 0x01	; 1
    44e6:	0e 94 2a 28 	call	0x5054	; 0x5054 <__mulshisi3>
    44ea:	46 0e       	add	r4, r22
    44ec:	57 1e       	adc	r5, r23
    44ee:	68 1e       	adc	r6, r24
    44f0:	79 1e       	adc	r7, r25
    44f2:	c5 01       	movw	r24, r10
    44f4:	4f 96       	adiw	r24, 0x1f	; 31
    44f6:	dc 01       	movw	r26, r24
    44f8:	0a f4       	brpl	.+2      	; 0x44fc <_Z16rv3028_get_epochPbPc+0x168>
    44fa:	13 96       	adiw	r26, 0x03	; 3
    44fc:	b5 95       	asr	r27
    44fe:	a7 95       	ror	r26
    4500:	b5 95       	asr	r27
    4502:	a7 95       	ror	r26
    4504:	20 e8       	ldi	r18, 0x80	; 128
    4506:	31 e5       	ldi	r19, 0x51	; 81
    4508:	41 e0       	ldi	r20, 0x01	; 1
    450a:	50 e0       	ldi	r21, 0x00	; 0
    450c:	0e 94 2a 28 	call	0x5054	; 0x5054 <__mulshisi3>
    4510:	46 0e       	add	r4, r22
    4512:	57 1e       	adc	r5, r23
    4514:	68 1e       	adc	r6, r24
    4516:	79 1e       	adc	r7, r25
    4518:	c5 01       	movw	r24, r10
    451a:	8d 59       	subi	r24, 0x9D	; 157
    451c:	9f 4f       	sbci	r25, 0xFF	; 255
    451e:	64 e6       	ldi	r22, 0x64	; 100
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    4526:	db 01       	movw	r26, r22
    4528:	20 e8       	ldi	r18, 0x80	; 128
    452a:	3e ea       	ldi	r19, 0xAE	; 174
    452c:	4e ef       	ldi	r20, 0xFE	; 254
    452e:	5f ef       	ldi	r21, 0xFF	; 255
    4530:	0e 94 2a 28 	call	0x5054	; 0x5054 <__mulshisi3>
    4534:	46 0e       	add	r4, r22
    4536:	57 1e       	adc	r5, r23
    4538:	68 1e       	adc	r6, r24
    453a:	79 1e       	adc	r7, r25
    453c:	c5 01       	movw	r24, r10
    453e:	81 57       	subi	r24, 0x71	; 113
    4540:	9e 4f       	sbci	r25, 0xFE	; 254
    4542:	60 e9       	ldi	r22, 0x90	; 144
    4544:	71 e0       	ldi	r23, 0x01	; 1
    4546:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    454a:	db 01       	movw	r26, r22
    454c:	20 e8       	ldi	r18, 0x80	; 128
    454e:	31 e5       	ldi	r19, 0x51	; 81
    4550:	41 e0       	ldi	r20, 0x01	; 1
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	0e 94 2a 28 	call	0x5054	; 0x5054 <__mulshisi3>
    4558:	64 0d       	add	r22, r4
    455a:	75 1d       	adc	r23, r5
    455c:	86 1d       	adc	r24, r6
    455e:	97 1d       	adc	r25, r7
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	03 c0       	rjmp	.+6      	; 0x456a <_Z16rv3028_get_epochPbPc+0x1d6>
    4564:	60 e0       	ldi	r22, 0x00	; 0
    4566:	70 e0       	ldi	r23, 0x00	; 0
    4568:	cb 01       	movw	r24, r22
    456a:	c1 14       	cp	r12, r1
    456c:	d1 04       	cpc	r13, r1
    456e:	31 f0       	breq	.+12     	; 0x457c <_Z16rv3028_get_epochPbPc+0x1e8>
    4570:	21 e0       	ldi	r18, 0x01	; 1
    4572:	31 11       	cpse	r19, r1
    4574:	01 c0       	rjmp	.+2      	; 0x4578 <_Z16rv3028_get_epochPbPc+0x1e4>
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	d6 01       	movw	r26, r12
    457a:	2c 93       	st	X, r18
    457c:	27 96       	adiw	r28, 0x07	; 7
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	9f 90       	pop	r9
    459e:	8f 90       	pop	r8
    45a0:	7f 90       	pop	r7
    45a2:	6f 90       	pop	r6
    45a4:	5f 90       	pop	r5
    45a6:	4f 90       	pop	r4
    45a8:	08 95       	ret

000045aa <_Z20rv3028_set_date_timePc>:
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
    45b2:	27 97       	sbiw	r28, 0x07	; 7
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	21 e0       	ldi	r18, 0x01	; 1
    45c0:	2c 83       	std	Y+4, r18	; 0x04
    45c2:	dc 01       	movw	r26, r24
    45c4:	0d 90       	ld	r0, X+
    45c6:	00 20       	and	r0, r0
    45c8:	e9 f7       	brne	.-6      	; 0x45c4 <_Z20rv3028_set_date_timePc+0x1a>
    45ca:	11 97       	sbiw	r26, 0x01	; 1
    45cc:	a8 1b       	sub	r26, r24
    45ce:	b9 0b       	sbc	r27, r25
    45d0:	1c 97       	sbiw	r26, 0x0c	; 12
    45d2:	0c f4       	brge	.+2      	; 0x45d6 <_Z20rv3028_set_date_timePc+0x2c>
    45d4:	3a c0       	rjmp	.+116    	; 0x464a <_Z20rv3028_set_date_timePc+0xa0>
    45d6:	fc 01       	movw	r30, r24
    45d8:	92 85       	ldd	r25, Z+10	; 0x0a
    45da:	83 85       	ldd	r24, Z+11	; 0x0b
    45dc:	80 53       	subi	r24, 0x30	; 48
    45de:	20 e1       	ldi	r18, 0x10	; 16
    45e0:	92 9f       	mul	r25, r18
    45e2:	80 0d       	add	r24, r0
    45e4:	11 24       	eor	r1, r1
    45e6:	89 83       	std	Y+1, r24	; 0x01
    45e8:	90 85       	ldd	r25, Z+8	; 0x08
    45ea:	81 85       	ldd	r24, Z+9	; 0x09
    45ec:	80 53       	subi	r24, 0x30	; 48
    45ee:	20 e1       	ldi	r18, 0x10	; 16
    45f0:	92 9f       	mul	r25, r18
    45f2:	80 0d       	add	r24, r0
    45f4:	11 24       	eor	r1, r1
    45f6:	8a 83       	std	Y+2, r24	; 0x02
    45f8:	96 81       	ldd	r25, Z+6	; 0x06
    45fa:	87 81       	ldd	r24, Z+7	; 0x07
    45fc:	80 53       	subi	r24, 0x30	; 48
    45fe:	20 e1       	ldi	r18, 0x10	; 16
    4600:	92 9f       	mul	r25, r18
    4602:	80 0d       	add	r24, r0
    4604:	11 24       	eor	r1, r1
    4606:	8b 83       	std	Y+3, r24	; 0x03
    4608:	94 81       	ldd	r25, Z+4	; 0x04
    460a:	85 81       	ldd	r24, Z+5	; 0x05
    460c:	80 53       	subi	r24, 0x30	; 48
    460e:	20 e1       	ldi	r18, 0x10	; 16
    4610:	92 9f       	mul	r25, r18
    4612:	80 0d       	add	r24, r0
    4614:	11 24       	eor	r1, r1
    4616:	8d 83       	std	Y+5, r24	; 0x05
    4618:	92 81       	ldd	r25, Z+2	; 0x02
    461a:	83 81       	ldd	r24, Z+3	; 0x03
    461c:	80 53       	subi	r24, 0x30	; 48
    461e:	20 e1       	ldi	r18, 0x10	; 16
    4620:	92 9f       	mul	r25, r18
    4622:	80 0d       	add	r24, r0
    4624:	11 24       	eor	r1, r1
    4626:	8e 83       	std	Y+6, r24	; 0x06
    4628:	90 81       	ld	r25, Z
    462a:	81 81       	ldd	r24, Z+1	; 0x01
    462c:	80 53       	subi	r24, 0x30	; 48
    462e:	20 e1       	ldi	r18, 0x10	; 16
    4630:	92 9f       	mul	r25, r18
    4632:	80 0d       	add	r24, r0
    4634:	11 24       	eor	r1, r1
    4636:	8f 83       	std	Y+7, r24	; 0x07
    4638:	27 e0       	ldi	r18, 0x07	; 7
    463a:	ae 01       	movw	r20, r28
    463c:	4f 5f       	subi	r20, 0xFF	; 255
    463e:	5f 4f       	sbci	r21, 0xFF	; 255
    4640:	60 e0       	ldi	r22, 0x00	; 0
    4642:	84 ea       	ldi	r24, 0xA4	; 164
    4644:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    4648:	01 c0       	rjmp	.+2      	; 0x464c <_Z20rv3028_set_date_timePc+0xa2>
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	27 96       	adiw	r28, 0x07	; 7
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	f8 94       	cli
    4652:	de bf       	out	0x3e, r29	; 62
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	cd bf       	out	0x3d, r28	; 61
    4658:	df 91       	pop	r29
    465a:	cf 91       	pop	r28
    465c:	08 95       	ret

0000465e <_Z21rv3028_get_offset_RAMv>:
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	00 d0       	rcall	.+0      	; 0x4664 <_Z21rv3028_get_offset_RAMv+0x6>
    4664:	cd b7       	in	r28, 0x3d	; 61
    4666:	de b7       	in	r29, 0x3e	; 62
    4668:	22 e0       	ldi	r18, 0x02	; 2
    466a:	ae 01       	movw	r20, r28
    466c:	4f 5f       	subi	r20, 0xFF	; 255
    466e:	5f 4f       	sbci	r21, 0xFF	; 255
    4670:	66 e3       	ldi	r22, 0x36	; 54
    4672:	84 ea       	ldi	r24, 0xA4	; 164
    4674:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z15i2c_device_readhhPhh>
    4678:	89 81       	ldd	r24, Y+1	; 0x01
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	88 0f       	add	r24, r24
    467e:	99 1f       	adc	r25, r25
    4680:	2a 81       	ldd	r18, Y+2	; 0x02
    4682:	22 23       	and	r18, r18
    4684:	0c f4       	brge	.+2      	; 0x4688 <_Z21rv3028_get_offset_RAMv+0x2a>
    4686:	01 96       	adiw	r24, 0x01	; 1
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	df 91       	pop	r29
    468e:	cf 91       	pop	r28
    4690:	08 95       	ret

00004692 <_Z21rv3028_set_offset_RAMj>:
    4692:	cf 93       	push	r28
    4694:	df 93       	push	r29
    4696:	00 d0       	rcall	.+0      	; 0x4698 <_Z21rv3028_set_offset_RAMj+0x6>
    4698:	cd b7       	in	r28, 0x3d	; 61
    469a:	de b7       	in	r29, 0x3e	; 62
    469c:	20 e1       	ldi	r18, 0x10	; 16
    469e:	2a 83       	std	Y+2, r18	; 0x02
    46a0:	9c 01       	movw	r18, r24
    46a2:	36 95       	lsr	r19
    46a4:	27 95       	ror	r18
    46a6:	29 83       	std	Y+1, r18	; 0x01
    46a8:	80 ff       	sbrs	r24, 0
    46aa:	02 c0       	rjmp	.+4      	; 0x46b0 <_Z21rv3028_set_offset_RAMj+0x1e>
    46ac:	80 e9       	ldi	r24, 0x90	; 144
    46ae:	8a 83       	std	Y+2, r24	; 0x02
    46b0:	22 e0       	ldi	r18, 0x02	; 2
    46b2:	ae 01       	movw	r20, r28
    46b4:	4f 5f       	subi	r20, 0xFF	; 255
    46b6:	5f 4f       	sbci	r21, 0xFF	; 255
    46b8:	66 e3       	ldi	r22, 0x36	; 54
    46ba:	84 ea       	ldi	r24, 0xA4	; 164
    46bc:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	df 91       	pop	r29
    46c6:	cf 91       	pop	r28
    46c8:	08 95       	ret

000046ca <_Z18waitForEEPROMReadyv>:
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
    46ce:	1f 92       	push	r1
    46d0:	cd b7       	in	r28, 0x3d	; 61
    46d2:	de b7       	in	r29, 0x3e	; 62
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	89 83       	std	Y+1, r24	; 0x01
    46d8:	21 e0       	ldi	r18, 0x01	; 1
    46da:	ae 01       	movw	r20, r28
    46dc:	4f 5f       	subi	r20, 0xFF	; 255
    46de:	5f 4f       	sbci	r21, 0xFF	; 255
    46e0:	6e e0       	ldi	r22, 0x0E	; 14
    46e2:	84 ea       	ldi	r24, 0xA4	; 164
    46e4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z15i2c_device_readhhPhh>
    46e8:	81 11       	cpse	r24, r1
    46ea:	07 c0       	rjmp	.+14     	; 0x46fa <_Z18waitForEEPROMReadyv+0x30>
    46ec:	89 81       	ldd	r24, Y+1	; 0x01
    46ee:	80 78       	andi	r24, 0x80	; 128
    46f0:	89 83       	std	Y+1, r24	; 0x01
    46f2:	81 11       	cpse	r24, r1
    46f4:	f1 cf       	rjmp	.-30     	; 0x46d8 <_Z18waitForEEPROMReadyv+0xe>
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	03 c0       	rjmp	.+6      	; 0x4700 <_Z18waitForEEPROMReadyv+0x36>
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	88 23       	and	r24, r24
    46fe:	d9 f3       	breq	.-10     	; 0x46f6 <_Z18waitForEEPROMReadyv+0x2c>
    4700:	0f 90       	pop	r0
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	08 95       	ret

00004708 <_Z18writeOneEEPROMBytehhh>:
    4708:	1f 93       	push	r17
    470a:	cf 93       	push	r28
    470c:	df 93       	push	r29
    470e:	00 d0       	rcall	.+0      	; 0x4710 <_Z18writeOneEEPROMBytehhh+0x8>
    4710:	00 d0       	rcall	.+0      	; 0x4712 <_Z18writeOneEEPROMBytehhh+0xa>
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	8b 83       	std	Y+3, r24	; 0x03
    4718:	16 2f       	mov	r17, r22
    471a:	4c 83       	std	Y+4, r20	; 0x04
    471c:	19 82       	std	Y+1, r1	; 0x01
    471e:	0e 94 65 23 	call	0x46ca	; 0x46ca <_Z18waitForEEPROMReadyv>
    4722:	81 11       	cpse	r24, r1
    4724:	5e c0       	rjmp	.+188    	; 0x47e2 <_Z18writeOneEEPROMBytehhh+0xda>
    4726:	88 e0       	ldi	r24, 0x08	; 8
    4728:	89 83       	std	Y+1, r24	; 0x01
    472a:	21 e0       	ldi	r18, 0x01	; 1
    472c:	ae 01       	movw	r20, r28
    472e:	4f 5f       	subi	r20, 0xFF	; 255
    4730:	5f 4f       	sbci	r21, 0xFF	; 255
    4732:	6f e0       	ldi	r22, 0x0F	; 15
    4734:	84 ea       	ldi	r24, 0xA4	; 164
    4736:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    473a:	81 11       	cpse	r24, r1
    473c:	54 c0       	rjmp	.+168    	; 0x47e6 <_Z18writeOneEEPROMBytehhh+0xde>
    473e:	21 e0       	ldi	r18, 0x01	; 1
    4740:	ae 01       	movw	r20, r28
    4742:	4e 5f       	subi	r20, 0xFE	; 254
    4744:	5f 4f       	sbci	r21, 0xFF	; 255
    4746:	6b 81       	ldd	r22, Y+3	; 0x03
    4748:	84 ea       	ldi	r24, 0xA4	; 164
    474a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z15i2c_device_readhhPhh>
    474e:	91 2f       	mov	r25, r17
    4750:	90 95       	com	r25
    4752:	8a 81       	ldd	r24, Y+2	; 0x02
    4754:	89 23       	and	r24, r25
    4756:	8a 83       	std	Y+2, r24	; 0x02
    4758:	9c 81       	ldd	r25, Y+4	; 0x04
    475a:	19 23       	and	r17, r25
    475c:	81 2b       	or	r24, r17
    475e:	8c 83       	std	Y+4, r24	; 0x04
    4760:	21 e0       	ldi	r18, 0x01	; 1
    4762:	ae 01       	movw	r20, r28
    4764:	4d 5f       	subi	r20, 0xFD	; 253
    4766:	5f 4f       	sbci	r21, 0xFF	; 255
    4768:	65 e2       	ldi	r22, 0x25	; 37
    476a:	84 ea       	ldi	r24, 0xA4	; 164
    476c:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    4770:	81 11       	cpse	r24, r1
    4772:	3b c0       	rjmp	.+118    	; 0x47ea <_Z18writeOneEEPROMBytehhh+0xe2>
    4774:	21 e0       	ldi	r18, 0x01	; 1
    4776:	ae 01       	movw	r20, r28
    4778:	4c 5f       	subi	r20, 0xFC	; 252
    477a:	5f 4f       	sbci	r21, 0xFF	; 255
    477c:	66 e2       	ldi	r22, 0x26	; 38
    477e:	84 ea       	ldi	r24, 0xA4	; 164
    4780:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    4784:	81 11       	cpse	r24, r1
    4786:	33 c0       	rjmp	.+102    	; 0x47ee <_Z18writeOneEEPROMBytehhh+0xe6>
    4788:	19 82       	std	Y+1, r1	; 0x01
    478a:	21 e0       	ldi	r18, 0x01	; 1
    478c:	ae 01       	movw	r20, r28
    478e:	4f 5f       	subi	r20, 0xFF	; 255
    4790:	5f 4f       	sbci	r21, 0xFF	; 255
    4792:	67 e2       	ldi	r22, 0x27	; 39
    4794:	84 ea       	ldi	r24, 0xA4	; 164
    4796:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    479a:	81 11       	cpse	r24, r1
    479c:	2a c0       	rjmp	.+84     	; 0x47f2 <_Z18writeOneEEPROMBytehhh+0xea>
    479e:	0e 94 65 23 	call	0x46ca	; 0x46ca <_Z18waitForEEPROMReadyv>
    47a2:	81 11       	cpse	r24, r1
    47a4:	28 c0       	rjmp	.+80     	; 0x47f6 <_Z18writeOneEEPROMBytehhh+0xee>
    47a6:	81 e2       	ldi	r24, 0x21	; 33
    47a8:	89 83       	std	Y+1, r24	; 0x01
    47aa:	21 e0       	ldi	r18, 0x01	; 1
    47ac:	ae 01       	movw	r20, r28
    47ae:	4f 5f       	subi	r20, 0xFF	; 255
    47b0:	5f 4f       	sbci	r21, 0xFF	; 255
    47b2:	67 e2       	ldi	r22, 0x27	; 39
    47b4:	84 ea       	ldi	r24, 0xA4	; 164
    47b6:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    47ba:	81 11       	cpse	r24, r1
    47bc:	1e c0       	rjmp	.+60     	; 0x47fa <_Z18writeOneEEPROMBytehhh+0xf2>
    47be:	0e 94 65 23 	call	0x46ca	; 0x46ca <_Z18waitForEEPROMReadyv>
    47c2:	81 11       	cpse	r24, r1
    47c4:	1c c0       	rjmp	.+56     	; 0x47fe <_Z18writeOneEEPROMBytehhh+0xf6>
    47c6:	19 82       	std	Y+1, r1	; 0x01
    47c8:	21 e0       	ldi	r18, 0x01	; 1
    47ca:	ae 01       	movw	r20, r28
    47cc:	4f 5f       	subi	r20, 0xFF	; 255
    47ce:	5f 4f       	sbci	r21, 0xFF	; 255
    47d0:	6f e0       	ldi	r22, 0x0F	; 15
    47d2:	84 ea       	ldi	r24, 0xA4	; 164
    47d4:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    47d8:	91 e0       	ldi	r25, 0x01	; 1
    47da:	81 11       	cpse	r24, r1
    47dc:	11 c0       	rjmp	.+34     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0f c0       	rjmp	.+30     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47e2:	91 e0       	ldi	r25, 0x01	; 1
    47e4:	0d c0       	rjmp	.+26     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47e6:	91 e0       	ldi	r25, 0x01	; 1
    47e8:	0b c0       	rjmp	.+22     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47ea:	91 e0       	ldi	r25, 0x01	; 1
    47ec:	09 c0       	rjmp	.+18     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47ee:	91 e0       	ldi	r25, 0x01	; 1
    47f0:	07 c0       	rjmp	.+14     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47f2:	91 e0       	ldi	r25, 0x01	; 1
    47f4:	05 c0       	rjmp	.+10     	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	03 c0       	rjmp	.+6      	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47fa:	91 e0       	ldi	r25, 0x01	; 1
    47fc:	01 c0       	rjmp	.+2      	; 0x4800 <_Z18writeOneEEPROMBytehhh+0xf8>
    47fe:	91 e0       	ldi	r25, 0x01	; 1
    4800:	89 2f       	mov	r24, r25
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	1f 91       	pop	r17
    4810:	08 95       	ret

00004812 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	00 d0       	rcall	.+0      	; 0x4818 <_Z13rv3028_1s_sqwv+0x6>
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    481c:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0, mask;
    481e:	1a 82       	std	Y+2, r1	; 0x02
			status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
			waitForEEPROMReady();
			
			if(1)
#else
			if(g_allow_rv3028_eeprom_changes)
    4820:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <g_allow_rv3028_eeprom_changes>
    4824:	88 23       	and	r24, r24
    4826:	c9 f0       	breq	.+50     	; 0x485a <_Z13rv3028_1s_sqwv+0x48>
#endif
			{
				if(waitForEEPROMReady())
    4828:	0e 94 65 23 	call	0x46ca	; 0x46ca <_Z18waitForEEPROMReadyv>
    482c:	81 11       	cpse	r24, r1
    482e:	4b c0       	rjmp	.+150    	; 0x48c6 <_Z13rv3028_1s_sqwv+0xb4>
				{
					return( 1);
				}

				temp = 0xC5;    /* Enable 1Hz Output */
    4830:	85 ec       	ldi	r24, 0xC5	; 197
    4832:	8a 83       	std	Y+2, r24	; 0x02
				mask = 0xFF;    /* 11111111 */
				if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
    4834:	45 ec       	ldi	r20, 0xC5	; 197
    4836:	6f ef       	ldi	r22, 0xFF	; 255
    4838:	85 e3       	ldi	r24, 0x35	; 53
    483a:	0e 94 84 23 	call	0x4708	; 0x4708 <_Z18writeOneEEPROMBytehhh>
    483e:	81 11       	cpse	r24, r1
    4840:	44 c0       	rjmp	.+136    	; 0x48ca <_Z13rv3028_1s_sqwv+0xb8>
				{
					return( 1);
				}

				temp = 0x04;    /* Enable direct switching mode */
    4842:	84 e0       	ldi	r24, 0x04	; 4
    4844:	8a 83       	std	Y+2, r24	; 0x02
				mask = 0x06;    /* 00001100 */
				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
    4846:	44 e0       	ldi	r20, 0x04	; 4
    4848:	66 e0       	ldi	r22, 0x06	; 6
    484a:	87 e3       	ldi	r24, 0x37	; 55
    484c:	0e 94 84 23 	call	0x4708	; 0x4708 <_Z18writeOneEEPROMBytehhh>
    4850:	81 11       	cpse	r24, r1
    4852:	3d c0       	rjmp	.+122    	; 0x48ce <_Z13rv3028_1s_sqwv+0xbc>
 *				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
 *				{
 *					return( 1);
 *				} */

				g_allow_rv3028_eeprom_changes = FALSE;
    4854:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_allow_rv3028_eeprom_changes>
    4858:	1a c0       	rjmp	.+52     	; 0x488e <_Z13rv3028_1s_sqwv+0x7c>
			}
			else    /* Read values from EEPROM - happens automatically for POR but not debugger reset */
			{
				temp = 0x00;
				status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    485a:	21 e0       	ldi	r18, 0x01	; 1
    485c:	ae 01       	movw	r20, r28
    485e:	4e 5f       	subi	r20, 0xFE	; 254
    4860:	5f 4f       	sbci	r21, 0xFF	; 255
    4862:	67 e2       	ldi	r22, 0x27	; 39
    4864:	84 ea       	ldi	r24, 0xA4	; 164
    4866:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    486a:	89 83       	std	Y+1, r24	; 0x01
				waitForEEPROMReady();
    486c:	0e 94 65 23 	call	0x46ca	; 0x46ca <_Z18waitForEEPROMReadyv>
				temp = 0x12;    /* Refresh RAM from EEPROM */
    4870:	82 e1       	ldi	r24, 0x12	; 18
    4872:	8a 83       	std	Y+2, r24	; 0x02
				status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4874:	21 e0       	ldi	r18, 0x01	; 1
    4876:	ae 01       	movw	r20, r28
    4878:	4e 5f       	subi	r20, 0xFE	; 254
    487a:	5f 4f       	sbci	r21, 0xFF	; 255
    487c:	67 e2       	ldi	r22, 0x27	; 39
    487e:	84 ea       	ldi	r24, 0xA4	; 164
    4880:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
    4884:	99 81       	ldd	r25, Y+1	; 0x01
    4886:	89 2b       	or	r24, r25
    4888:	89 83       	std	Y+1, r24	; 0x01
				waitForEEPROMReady();
    488a:	0e 94 65 23 	call	0x46ca	; 0x46ca <_Z18waitForEEPROMReadyv>
			
			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	81 11       	cpse	r24, r1
    4892:	0c c0       	rjmp	.+24     	; 0x48ac <_Z13rv3028_1s_sqwv+0x9a>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    4894:	21 e0       	ldi	r18, 0x01	; 1
    4896:	ae 01       	movw	r20, r28
    4898:	4f 5f       	subi	r20, 0xFF	; 255
    489a:	5f 4f       	sbci	r21, 0xFF	; 255
    489c:	6e e0       	ldi	r22, 0x0E	; 14
    489e:	84 ea       	ldi	r24, 0xA4	; 164
    48a0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
    48a6:	8f 76       	andi	r24, 0x6F	; 111
    48a8:	89 83       	std	Y+1, r24	; 0x01
    48aa:	02 c0       	rjmp	.+4      	; 0x48b0 <_Z13rv3028_1s_sqwv+0x9e>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    48ac:	80 e8       	ldi	r24, 0x80	; 128
    48ae:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    48b0:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    48b2:	21 e0       	ldi	r18, 0x01	; 1
    48b4:	ae 01       	movw	r20, r28
    48b6:	4e 5f       	subi	r20, 0xFE	; 254
    48b8:	5f 4f       	sbci	r21, 0xFF	; 255
    48ba:	6e e0       	ldi	r22, 0x0E	; 14
    48bc:	84 ea       	ldi	r24, 0xA4	; 164
    48be:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>

			return(status);
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	05 c0       	rjmp	.+10     	; 0x48d0 <_Z13rv3028_1s_sqwv+0xbe>
			if(g_allow_rv3028_eeprom_changes)
#endif
			{
				if(waitForEEPROMReady())
				{
					return( 1);
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	03 c0       	rjmp	.+6      	; 0x48d0 <_Z13rv3028_1s_sqwv+0xbe>

				temp = 0xC5;    /* Enable 1Hz Output */
				mask = 0xFF;    /* 11111111 */
				if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
				{
					return( 1);
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	01 c0       	rjmp	.+2      	; 0x48d0 <_Z13rv3028_1s_sqwv+0xbe>

				temp = 0x04;    /* Enable direct switching mode */
				mask = 0x06;    /* 00001100 */
				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
				{
					return( 1);
    48ce:	81 e0       	ldi	r24, 0x01	; 1

			temp = 0x00;    /* Clear status flags */
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);

			return(status);
		}
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
    48d4:	df 91       	pop	r29
    48d6:	cf 91       	pop	r28
    48d8:	08 95       	ret

000048da <_Z16rv3028_32kHz_sqwv>:


#endif  /* INIT_EEPROM_ONLY */

	void rv3028_32kHz_sqw(void)
	{
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	1f 92       	push	r1
    48e0:	cd b7       	in	r28, 0x3d	; 61
    48e2:	de b7       	in	r29, 0x3e	; 62
		/* Just set RAM value */
		uint8_t byte = 0xC0;    /* FD = 32.768 kHz */
    48e4:	80 ec       	ldi	r24, 0xC0	; 192
    48e6:	89 83       	std	Y+1, r24	; 0x01

		i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_CLKOUT, &byte, 1);
    48e8:	21 e0       	ldi	r18, 0x01	; 1
    48ea:	ae 01       	movw	r20, r28
    48ec:	4f 5f       	subi	r20, 0xFF	; 255
    48ee:	5f 4f       	sbci	r21, 0xFF	; 255
    48f0:	65 e3       	ldi	r22, 0x35	; 53
    48f2:	84 ea       	ldi	r24, 0xA4	; 164
    48f4:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16i2c_device_writehhPhh>
	}
    48f8:	0f 90       	pop	r0
    48fa:	df 91       	pop	r29
    48fc:	cf 91       	pop	r28
    48fe:	08 95       	ret

00004900 <__subsf3>:
    4900:	50 58       	subi	r21, 0x80	; 128

00004902 <__addsf3>:
    4902:	bb 27       	eor	r27, r27
    4904:	aa 27       	eor	r26, r26
    4906:	0e 94 98 24 	call	0x4930	; 0x4930 <__addsf3x>
    490a:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__fp_round>
    490e:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__fp_pscA>
    4912:	38 f0       	brcs	.+14     	; 0x4922 <__addsf3+0x20>
    4914:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__fp_pscB>
    4918:	20 f0       	brcs	.+8      	; 0x4922 <__addsf3+0x20>
    491a:	39 f4       	brne	.+14     	; 0x492a <__addsf3+0x28>
    491c:	9f 3f       	cpi	r25, 0xFF	; 255
    491e:	19 f4       	brne	.+6      	; 0x4926 <__addsf3+0x24>
    4920:	26 f4       	brtc	.+8      	; 0x492a <__addsf3+0x28>
    4922:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <__fp_nan>
    4926:	0e f4       	brtc	.+2      	; 0x492a <__addsf3+0x28>
    4928:	e0 95       	com	r30
    492a:	e7 fb       	bst	r30, 7
    492c:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__fp_inf>

00004930 <__addsf3x>:
    4930:	e9 2f       	mov	r30, r25
    4932:	0e 94 67 26 	call	0x4cce	; 0x4cce <__fp_split3>
    4936:	58 f3       	brcs	.-42     	; 0x490e <__addsf3+0xc>
    4938:	ba 17       	cp	r27, r26
    493a:	62 07       	cpc	r22, r18
    493c:	73 07       	cpc	r23, r19
    493e:	84 07       	cpc	r24, r20
    4940:	95 07       	cpc	r25, r21
    4942:	20 f0       	brcs	.+8      	; 0x494c <__addsf3x+0x1c>
    4944:	79 f4       	brne	.+30     	; 0x4964 <__addsf3x+0x34>
    4946:	a6 f5       	brtc	.+104    	; 0x49b0 <__addsf3x+0x80>
    4948:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__fp_zero>
    494c:	0e f4       	brtc	.+2      	; 0x4950 <__addsf3x+0x20>
    494e:	e0 95       	com	r30
    4950:	0b 2e       	mov	r0, r27
    4952:	ba 2f       	mov	r27, r26
    4954:	a0 2d       	mov	r26, r0
    4956:	0b 01       	movw	r0, r22
    4958:	b9 01       	movw	r22, r18
    495a:	90 01       	movw	r18, r0
    495c:	0c 01       	movw	r0, r24
    495e:	ca 01       	movw	r24, r20
    4960:	a0 01       	movw	r20, r0
    4962:	11 24       	eor	r1, r1
    4964:	ff 27       	eor	r31, r31
    4966:	59 1b       	sub	r21, r25
    4968:	99 f0       	breq	.+38     	; 0x4990 <__addsf3x+0x60>
    496a:	59 3f       	cpi	r21, 0xF9	; 249
    496c:	50 f4       	brcc	.+20     	; 0x4982 <__addsf3x+0x52>
    496e:	50 3e       	cpi	r21, 0xE0	; 224
    4970:	68 f1       	brcs	.+90     	; 0x49cc <__addsf3x+0x9c>
    4972:	1a 16       	cp	r1, r26
    4974:	f0 40       	sbci	r31, 0x00	; 0
    4976:	a2 2f       	mov	r26, r18
    4978:	23 2f       	mov	r18, r19
    497a:	34 2f       	mov	r19, r20
    497c:	44 27       	eor	r20, r20
    497e:	58 5f       	subi	r21, 0xF8	; 248
    4980:	f3 cf       	rjmp	.-26     	; 0x4968 <__addsf3x+0x38>
    4982:	46 95       	lsr	r20
    4984:	37 95       	ror	r19
    4986:	27 95       	ror	r18
    4988:	a7 95       	ror	r26
    498a:	f0 40       	sbci	r31, 0x00	; 0
    498c:	53 95       	inc	r21
    498e:	c9 f7       	brne	.-14     	; 0x4982 <__addsf3x+0x52>
    4990:	7e f4       	brtc	.+30     	; 0x49b0 <__addsf3x+0x80>
    4992:	1f 16       	cp	r1, r31
    4994:	ba 0b       	sbc	r27, r26
    4996:	62 0b       	sbc	r22, r18
    4998:	73 0b       	sbc	r23, r19
    499a:	84 0b       	sbc	r24, r20
    499c:	ba f0       	brmi	.+46     	; 0x49cc <__addsf3x+0x9c>
    499e:	91 50       	subi	r25, 0x01	; 1
    49a0:	a1 f0       	breq	.+40     	; 0x49ca <__addsf3x+0x9a>
    49a2:	ff 0f       	add	r31, r31
    49a4:	bb 1f       	adc	r27, r27
    49a6:	66 1f       	adc	r22, r22
    49a8:	77 1f       	adc	r23, r23
    49aa:	88 1f       	adc	r24, r24
    49ac:	c2 f7       	brpl	.-16     	; 0x499e <__addsf3x+0x6e>
    49ae:	0e c0       	rjmp	.+28     	; 0x49cc <__addsf3x+0x9c>
    49b0:	ba 0f       	add	r27, r26
    49b2:	62 1f       	adc	r22, r18
    49b4:	73 1f       	adc	r23, r19
    49b6:	84 1f       	adc	r24, r20
    49b8:	48 f4       	brcc	.+18     	; 0x49cc <__addsf3x+0x9c>
    49ba:	87 95       	ror	r24
    49bc:	77 95       	ror	r23
    49be:	67 95       	ror	r22
    49c0:	b7 95       	ror	r27
    49c2:	f7 95       	ror	r31
    49c4:	9e 3f       	cpi	r25, 0xFE	; 254
    49c6:	08 f0       	brcs	.+2      	; 0x49ca <__addsf3x+0x9a>
    49c8:	b0 cf       	rjmp	.-160    	; 0x492a <__addsf3+0x28>
    49ca:	93 95       	inc	r25
    49cc:	88 0f       	add	r24, r24
    49ce:	08 f0       	brcs	.+2      	; 0x49d2 <__addsf3x+0xa2>
    49d0:	99 27       	eor	r25, r25
    49d2:	ee 0f       	add	r30, r30
    49d4:	97 95       	ror	r25
    49d6:	87 95       	ror	r24
    49d8:	08 95       	ret

000049da <__cmpsf2>:
    49da:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__fp_cmp>
    49de:	08 f4       	brcc	.+2      	; 0x49e2 <__cmpsf2+0x8>
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	08 95       	ret

000049e4 <cos>:
    49e4:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__fp_rempio2>
    49e8:	e3 95       	inc	r30
    49ea:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <__fp_sinus>

000049ee <__divsf3>:
    49ee:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <__divsf3x>
    49f2:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__fp_round>
    49f6:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__fp_pscB>
    49fa:	58 f0       	brcs	.+22     	; 0x4a12 <__divsf3+0x24>
    49fc:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__fp_pscA>
    4a00:	40 f0       	brcs	.+16     	; 0x4a12 <__divsf3+0x24>
    4a02:	29 f4       	brne	.+10     	; 0x4a0e <__divsf3+0x20>
    4a04:	5f 3f       	cpi	r21, 0xFF	; 255
    4a06:	29 f0       	breq	.+10     	; 0x4a12 <__divsf3+0x24>
    4a08:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__fp_inf>
    4a0c:	51 11       	cpse	r21, r1
    4a0e:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__fp_szero>
    4a12:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <__fp_nan>

00004a16 <__divsf3x>:
    4a16:	0e 94 67 26 	call	0x4cce	; 0x4cce <__fp_split3>
    4a1a:	68 f3       	brcs	.-38     	; 0x49f6 <__divsf3+0x8>

00004a1c <__divsf3_pse>:
    4a1c:	99 23       	and	r25, r25
    4a1e:	b1 f3       	breq	.-20     	; 0x4a0c <__divsf3+0x1e>
    4a20:	55 23       	and	r21, r21
    4a22:	91 f3       	breq	.-28     	; 0x4a08 <__divsf3+0x1a>
    4a24:	95 1b       	sub	r25, r21
    4a26:	55 0b       	sbc	r21, r21
    4a28:	bb 27       	eor	r27, r27
    4a2a:	aa 27       	eor	r26, r26
    4a2c:	62 17       	cp	r22, r18
    4a2e:	73 07       	cpc	r23, r19
    4a30:	84 07       	cpc	r24, r20
    4a32:	38 f0       	brcs	.+14     	; 0x4a42 <__divsf3_pse+0x26>
    4a34:	9f 5f       	subi	r25, 0xFF	; 255
    4a36:	5f 4f       	sbci	r21, 0xFF	; 255
    4a38:	22 0f       	add	r18, r18
    4a3a:	33 1f       	adc	r19, r19
    4a3c:	44 1f       	adc	r20, r20
    4a3e:	aa 1f       	adc	r26, r26
    4a40:	a9 f3       	breq	.-22     	; 0x4a2c <__divsf3_pse+0x10>
    4a42:	35 d0       	rcall	.+106    	; 0x4aae <__divsf3_pse+0x92>
    4a44:	0e 2e       	mov	r0, r30
    4a46:	3a f0       	brmi	.+14     	; 0x4a56 <__divsf3_pse+0x3a>
    4a48:	e0 e8       	ldi	r30, 0x80	; 128
    4a4a:	32 d0       	rcall	.+100    	; 0x4ab0 <__divsf3_pse+0x94>
    4a4c:	91 50       	subi	r25, 0x01	; 1
    4a4e:	50 40       	sbci	r21, 0x00	; 0
    4a50:	e6 95       	lsr	r30
    4a52:	00 1c       	adc	r0, r0
    4a54:	ca f7       	brpl	.-14     	; 0x4a48 <__divsf3_pse+0x2c>
    4a56:	2b d0       	rcall	.+86     	; 0x4aae <__divsf3_pse+0x92>
    4a58:	fe 2f       	mov	r31, r30
    4a5a:	29 d0       	rcall	.+82     	; 0x4aae <__divsf3_pse+0x92>
    4a5c:	66 0f       	add	r22, r22
    4a5e:	77 1f       	adc	r23, r23
    4a60:	88 1f       	adc	r24, r24
    4a62:	bb 1f       	adc	r27, r27
    4a64:	26 17       	cp	r18, r22
    4a66:	37 07       	cpc	r19, r23
    4a68:	48 07       	cpc	r20, r24
    4a6a:	ab 07       	cpc	r26, r27
    4a6c:	b0 e8       	ldi	r27, 0x80	; 128
    4a6e:	09 f0       	breq	.+2      	; 0x4a72 <__divsf3_pse+0x56>
    4a70:	bb 0b       	sbc	r27, r27
    4a72:	80 2d       	mov	r24, r0
    4a74:	bf 01       	movw	r22, r30
    4a76:	ff 27       	eor	r31, r31
    4a78:	93 58       	subi	r25, 0x83	; 131
    4a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a7c:	3a f0       	brmi	.+14     	; 0x4a8c <__divsf3_pse+0x70>
    4a7e:	9e 3f       	cpi	r25, 0xFE	; 254
    4a80:	51 05       	cpc	r21, r1
    4a82:	78 f0       	brcs	.+30     	; 0x4aa2 <__divsf3_pse+0x86>
    4a84:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__fp_inf>
    4a88:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__fp_szero>
    4a8c:	5f 3f       	cpi	r21, 0xFF	; 255
    4a8e:	e4 f3       	brlt	.-8      	; 0x4a88 <__divsf3_pse+0x6c>
    4a90:	98 3e       	cpi	r25, 0xE8	; 232
    4a92:	d4 f3       	brlt	.-12     	; 0x4a88 <__divsf3_pse+0x6c>
    4a94:	86 95       	lsr	r24
    4a96:	77 95       	ror	r23
    4a98:	67 95       	ror	r22
    4a9a:	b7 95       	ror	r27
    4a9c:	f7 95       	ror	r31
    4a9e:	9f 5f       	subi	r25, 0xFF	; 255
    4aa0:	c9 f7       	brne	.-14     	; 0x4a94 <__divsf3_pse+0x78>
    4aa2:	88 0f       	add	r24, r24
    4aa4:	91 1d       	adc	r25, r1
    4aa6:	96 95       	lsr	r25
    4aa8:	87 95       	ror	r24
    4aaa:	97 f9       	bld	r25, 7
    4aac:	08 95       	ret
    4aae:	e1 e0       	ldi	r30, 0x01	; 1
    4ab0:	66 0f       	add	r22, r22
    4ab2:	77 1f       	adc	r23, r23
    4ab4:	88 1f       	adc	r24, r24
    4ab6:	bb 1f       	adc	r27, r27
    4ab8:	62 17       	cp	r22, r18
    4aba:	73 07       	cpc	r23, r19
    4abc:	84 07       	cpc	r24, r20
    4abe:	ba 07       	cpc	r27, r26
    4ac0:	20 f0       	brcs	.+8      	; 0x4aca <__divsf3_pse+0xae>
    4ac2:	62 1b       	sub	r22, r18
    4ac4:	73 0b       	sbc	r23, r19
    4ac6:	84 0b       	sbc	r24, r20
    4ac8:	ba 0b       	sbc	r27, r26
    4aca:	ee 1f       	adc	r30, r30
    4acc:	88 f7       	brcc	.-30     	; 0x4ab0 <__divsf3_pse+0x94>
    4ace:	e0 95       	com	r30
    4ad0:	08 95       	ret

00004ad2 <__fixsfsi>:
    4ad2:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__fixunssfsi>
    4ad6:	68 94       	set
    4ad8:	b1 11       	cpse	r27, r1
    4ada:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__fp_szero>
    4ade:	08 95       	ret

00004ae0 <__fixunssfsi>:
    4ae0:	0e 94 6f 26 	call	0x4cde	; 0x4cde <__fp_splitA>
    4ae4:	88 f0       	brcs	.+34     	; 0x4b08 <__fixunssfsi+0x28>
    4ae6:	9f 57       	subi	r25, 0x7F	; 127
    4ae8:	98 f0       	brcs	.+38     	; 0x4b10 <__fixunssfsi+0x30>
    4aea:	b9 2f       	mov	r27, r25
    4aec:	99 27       	eor	r25, r25
    4aee:	b7 51       	subi	r27, 0x17	; 23
    4af0:	b0 f0       	brcs	.+44     	; 0x4b1e <__fixunssfsi+0x3e>
    4af2:	e1 f0       	breq	.+56     	; 0x4b2c <__fixunssfsi+0x4c>
    4af4:	66 0f       	add	r22, r22
    4af6:	77 1f       	adc	r23, r23
    4af8:	88 1f       	adc	r24, r24
    4afa:	99 1f       	adc	r25, r25
    4afc:	1a f0       	brmi	.+6      	; 0x4b04 <__fixunssfsi+0x24>
    4afe:	ba 95       	dec	r27
    4b00:	c9 f7       	brne	.-14     	; 0x4af4 <__fixunssfsi+0x14>
    4b02:	14 c0       	rjmp	.+40     	; 0x4b2c <__fixunssfsi+0x4c>
    4b04:	b1 30       	cpi	r27, 0x01	; 1
    4b06:	91 f0       	breq	.+36     	; 0x4b2c <__fixunssfsi+0x4c>
    4b08:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__fp_zero>
    4b0c:	b1 e0       	ldi	r27, 0x01	; 1
    4b0e:	08 95       	ret
    4b10:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__fp_zero>
    4b14:	67 2f       	mov	r22, r23
    4b16:	78 2f       	mov	r23, r24
    4b18:	88 27       	eor	r24, r24
    4b1a:	b8 5f       	subi	r27, 0xF8	; 248
    4b1c:	39 f0       	breq	.+14     	; 0x4b2c <__fixunssfsi+0x4c>
    4b1e:	b9 3f       	cpi	r27, 0xF9	; 249
    4b20:	cc f3       	brlt	.-14     	; 0x4b14 <__fixunssfsi+0x34>
    4b22:	86 95       	lsr	r24
    4b24:	77 95       	ror	r23
    4b26:	67 95       	ror	r22
    4b28:	b3 95       	inc	r27
    4b2a:	d9 f7       	brne	.-10     	; 0x4b22 <__fixunssfsi+0x42>
    4b2c:	3e f4       	brtc	.+14     	; 0x4b3c <__fixunssfsi+0x5c>
    4b2e:	90 95       	com	r25
    4b30:	80 95       	com	r24
    4b32:	70 95       	com	r23
    4b34:	61 95       	neg	r22
    4b36:	7f 4f       	sbci	r23, 0xFF	; 255
    4b38:	8f 4f       	sbci	r24, 0xFF	; 255
    4b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b3c:	08 95       	ret

00004b3e <__floatunsisf>:
    4b3e:	e8 94       	clt
    4b40:	09 c0       	rjmp	.+18     	; 0x4b54 <__floatsisf+0x12>

00004b42 <__floatsisf>:
    4b42:	97 fb       	bst	r25, 7
    4b44:	3e f4       	brtc	.+14     	; 0x4b54 <__floatsisf+0x12>
    4b46:	90 95       	com	r25
    4b48:	80 95       	com	r24
    4b4a:	70 95       	com	r23
    4b4c:	61 95       	neg	r22
    4b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b50:	8f 4f       	sbci	r24, 0xFF	; 255
    4b52:	9f 4f       	sbci	r25, 0xFF	; 255
    4b54:	99 23       	and	r25, r25
    4b56:	a9 f0       	breq	.+42     	; 0x4b82 <__floatsisf+0x40>
    4b58:	f9 2f       	mov	r31, r25
    4b5a:	96 e9       	ldi	r25, 0x96	; 150
    4b5c:	bb 27       	eor	r27, r27
    4b5e:	93 95       	inc	r25
    4b60:	f6 95       	lsr	r31
    4b62:	87 95       	ror	r24
    4b64:	77 95       	ror	r23
    4b66:	67 95       	ror	r22
    4b68:	b7 95       	ror	r27
    4b6a:	f1 11       	cpse	r31, r1
    4b6c:	f8 cf       	rjmp	.-16     	; 0x4b5e <__floatsisf+0x1c>
    4b6e:	fa f4       	brpl	.+62     	; 0x4bae <__floatsisf+0x6c>
    4b70:	bb 0f       	add	r27, r27
    4b72:	11 f4       	brne	.+4      	; 0x4b78 <__floatsisf+0x36>
    4b74:	60 ff       	sbrs	r22, 0
    4b76:	1b c0       	rjmp	.+54     	; 0x4bae <__floatsisf+0x6c>
    4b78:	6f 5f       	subi	r22, 0xFF	; 255
    4b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b80:	16 c0       	rjmp	.+44     	; 0x4bae <__floatsisf+0x6c>
    4b82:	88 23       	and	r24, r24
    4b84:	11 f0       	breq	.+4      	; 0x4b8a <__floatsisf+0x48>
    4b86:	96 e9       	ldi	r25, 0x96	; 150
    4b88:	11 c0       	rjmp	.+34     	; 0x4bac <__floatsisf+0x6a>
    4b8a:	77 23       	and	r23, r23
    4b8c:	21 f0       	breq	.+8      	; 0x4b96 <__floatsisf+0x54>
    4b8e:	9e e8       	ldi	r25, 0x8E	; 142
    4b90:	87 2f       	mov	r24, r23
    4b92:	76 2f       	mov	r23, r22
    4b94:	05 c0       	rjmp	.+10     	; 0x4ba0 <__floatsisf+0x5e>
    4b96:	66 23       	and	r22, r22
    4b98:	71 f0       	breq	.+28     	; 0x4bb6 <__floatsisf+0x74>
    4b9a:	96 e8       	ldi	r25, 0x86	; 134
    4b9c:	86 2f       	mov	r24, r22
    4b9e:	70 e0       	ldi	r23, 0x00	; 0
    4ba0:	60 e0       	ldi	r22, 0x00	; 0
    4ba2:	2a f0       	brmi	.+10     	; 0x4bae <__floatsisf+0x6c>
    4ba4:	9a 95       	dec	r25
    4ba6:	66 0f       	add	r22, r22
    4ba8:	77 1f       	adc	r23, r23
    4baa:	88 1f       	adc	r24, r24
    4bac:	da f7       	brpl	.-10     	; 0x4ba4 <__floatsisf+0x62>
    4bae:	88 0f       	add	r24, r24
    4bb0:	96 95       	lsr	r25
    4bb2:	87 95       	ror	r24
    4bb4:	97 f9       	bld	r25, 7
    4bb6:	08 95       	ret

00004bb8 <__fp_cmp>:
    4bb8:	99 0f       	add	r25, r25
    4bba:	00 08       	sbc	r0, r0
    4bbc:	55 0f       	add	r21, r21
    4bbe:	aa 0b       	sbc	r26, r26
    4bc0:	e0 e8       	ldi	r30, 0x80	; 128
    4bc2:	fe ef       	ldi	r31, 0xFE	; 254
    4bc4:	16 16       	cp	r1, r22
    4bc6:	17 06       	cpc	r1, r23
    4bc8:	e8 07       	cpc	r30, r24
    4bca:	f9 07       	cpc	r31, r25
    4bcc:	c0 f0       	brcs	.+48     	; 0x4bfe <__fp_cmp+0x46>
    4bce:	12 16       	cp	r1, r18
    4bd0:	13 06       	cpc	r1, r19
    4bd2:	e4 07       	cpc	r30, r20
    4bd4:	f5 07       	cpc	r31, r21
    4bd6:	98 f0       	brcs	.+38     	; 0x4bfe <__fp_cmp+0x46>
    4bd8:	62 1b       	sub	r22, r18
    4bda:	73 0b       	sbc	r23, r19
    4bdc:	84 0b       	sbc	r24, r20
    4bde:	95 0b       	sbc	r25, r21
    4be0:	39 f4       	brne	.+14     	; 0x4bf0 <__fp_cmp+0x38>
    4be2:	0a 26       	eor	r0, r26
    4be4:	61 f0       	breq	.+24     	; 0x4bfe <__fp_cmp+0x46>
    4be6:	23 2b       	or	r18, r19
    4be8:	24 2b       	or	r18, r20
    4bea:	25 2b       	or	r18, r21
    4bec:	21 f4       	brne	.+8      	; 0x4bf6 <__fp_cmp+0x3e>
    4bee:	08 95       	ret
    4bf0:	0a 26       	eor	r0, r26
    4bf2:	09 f4       	brne	.+2      	; 0x4bf6 <__fp_cmp+0x3e>
    4bf4:	a1 40       	sbci	r26, 0x01	; 1
    4bf6:	a6 95       	lsr	r26
    4bf8:	8f ef       	ldi	r24, 0xFF	; 255
    4bfa:	81 1d       	adc	r24, r1
    4bfc:	81 1d       	adc	r24, r1
    4bfe:	08 95       	ret

00004c00 <__fp_inf>:
    4c00:	97 f9       	bld	r25, 7
    4c02:	9f 67       	ori	r25, 0x7F	; 127
    4c04:	80 e8       	ldi	r24, 0x80	; 128
    4c06:	70 e0       	ldi	r23, 0x00	; 0
    4c08:	60 e0       	ldi	r22, 0x00	; 0
    4c0a:	08 95       	ret

00004c0c <__fp_nan>:
    4c0c:	9f ef       	ldi	r25, 0xFF	; 255
    4c0e:	80 ec       	ldi	r24, 0xC0	; 192
    4c10:	08 95       	ret

00004c12 <__fp_pscA>:
    4c12:	00 24       	eor	r0, r0
    4c14:	0a 94       	dec	r0
    4c16:	16 16       	cp	r1, r22
    4c18:	17 06       	cpc	r1, r23
    4c1a:	18 06       	cpc	r1, r24
    4c1c:	09 06       	cpc	r0, r25
    4c1e:	08 95       	ret

00004c20 <__fp_pscB>:
    4c20:	00 24       	eor	r0, r0
    4c22:	0a 94       	dec	r0
    4c24:	12 16       	cp	r1, r18
    4c26:	13 06       	cpc	r1, r19
    4c28:	14 06       	cpc	r1, r20
    4c2a:	05 06       	cpc	r0, r21
    4c2c:	08 95       	ret
    4c2e:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <__fp_nan>

00004c32 <__fp_rempio2>:
    4c32:	0e 94 6f 26 	call	0x4cde	; 0x4cde <__fp_splitA>
    4c36:	d8 f3       	brcs	.-10     	; 0x4c2e <__fp_pscB+0xe>
    4c38:	e8 94       	clt
    4c3a:	e0 e0       	ldi	r30, 0x00	; 0
    4c3c:	bb 27       	eor	r27, r27
    4c3e:	9f 57       	subi	r25, 0x7F	; 127
    4c40:	f0 f0       	brcs	.+60     	; 0x4c7e <__fp_rempio2+0x4c>
    4c42:	2a ed       	ldi	r18, 0xDA	; 218
    4c44:	3f e0       	ldi	r19, 0x0F	; 15
    4c46:	49 ec       	ldi	r20, 0xC9	; 201
    4c48:	06 c0       	rjmp	.+12     	; 0x4c56 <__fp_rempio2+0x24>
    4c4a:	ee 0f       	add	r30, r30
    4c4c:	bb 0f       	add	r27, r27
    4c4e:	66 1f       	adc	r22, r22
    4c50:	77 1f       	adc	r23, r23
    4c52:	88 1f       	adc	r24, r24
    4c54:	28 f0       	brcs	.+10     	; 0x4c60 <__fp_rempio2+0x2e>
    4c56:	b2 3a       	cpi	r27, 0xA2	; 162
    4c58:	62 07       	cpc	r22, r18
    4c5a:	73 07       	cpc	r23, r19
    4c5c:	84 07       	cpc	r24, r20
    4c5e:	28 f0       	brcs	.+10     	; 0x4c6a <__fp_rempio2+0x38>
    4c60:	b2 5a       	subi	r27, 0xA2	; 162
    4c62:	62 0b       	sbc	r22, r18
    4c64:	73 0b       	sbc	r23, r19
    4c66:	84 0b       	sbc	r24, r20
    4c68:	e3 95       	inc	r30
    4c6a:	9a 95       	dec	r25
    4c6c:	72 f7       	brpl	.-36     	; 0x4c4a <__fp_rempio2+0x18>
    4c6e:	80 38       	cpi	r24, 0x80	; 128
    4c70:	30 f4       	brcc	.+12     	; 0x4c7e <__fp_rempio2+0x4c>
    4c72:	9a 95       	dec	r25
    4c74:	bb 0f       	add	r27, r27
    4c76:	66 1f       	adc	r22, r22
    4c78:	77 1f       	adc	r23, r23
    4c7a:	88 1f       	adc	r24, r24
    4c7c:	d2 f7       	brpl	.-12     	; 0x4c72 <__fp_rempio2+0x40>
    4c7e:	90 48       	sbci	r25, 0x80	; 128
    4c80:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__fp_mpack_finite>

00004c84 <__fp_round>:
    4c84:	09 2e       	mov	r0, r25
    4c86:	03 94       	inc	r0
    4c88:	00 0c       	add	r0, r0
    4c8a:	11 f4       	brne	.+4      	; 0x4c90 <__fp_round+0xc>
    4c8c:	88 23       	and	r24, r24
    4c8e:	52 f0       	brmi	.+20     	; 0x4ca4 <__fp_round+0x20>
    4c90:	bb 0f       	add	r27, r27
    4c92:	40 f4       	brcc	.+16     	; 0x4ca4 <__fp_round+0x20>
    4c94:	bf 2b       	or	r27, r31
    4c96:	11 f4       	brne	.+4      	; 0x4c9c <__fp_round+0x18>
    4c98:	60 ff       	sbrs	r22, 0
    4c9a:	04 c0       	rjmp	.+8      	; 0x4ca4 <__fp_round+0x20>
    4c9c:	6f 5f       	subi	r22, 0xFF	; 255
    4c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca4:	08 95       	ret

00004ca6 <__fp_sinus>:
    4ca6:	ef 93       	push	r30
    4ca8:	e0 ff       	sbrs	r30, 0
    4caa:	07 c0       	rjmp	.+14     	; 0x4cba <__fp_sinus+0x14>
    4cac:	a2 ea       	ldi	r26, 0xA2	; 162
    4cae:	2a ed       	ldi	r18, 0xDA	; 218
    4cb0:	3f e0       	ldi	r19, 0x0F	; 15
    4cb2:	49 ec       	ldi	r20, 0xC9	; 201
    4cb4:	5f eb       	ldi	r21, 0xBF	; 191
    4cb6:	0e 94 98 24 	call	0x4930	; 0x4930 <__addsf3x>
    4cba:	0e 94 42 26 	call	0x4c84	; 0x4c84 <__fp_round>
    4cbe:	0f 90       	pop	r0
    4cc0:	03 94       	inc	r0
    4cc2:	01 fc       	sbrc	r0, 1
    4cc4:	90 58       	subi	r25, 0x80	; 128
    4cc6:	ea ec       	ldi	r30, 0xCA	; 202
    4cc8:	f1 e0       	ldi	r31, 0x01	; 1
    4cca:	0c 94 4f 27 	jmp	0x4e9e	; 0x4e9e <__fp_powsodd>

00004cce <__fp_split3>:
    4cce:	57 fd       	sbrc	r21, 7
    4cd0:	90 58       	subi	r25, 0x80	; 128
    4cd2:	44 0f       	add	r20, r20
    4cd4:	55 1f       	adc	r21, r21
    4cd6:	59 f0       	breq	.+22     	; 0x4cee <__fp_splitA+0x10>
    4cd8:	5f 3f       	cpi	r21, 0xFF	; 255
    4cda:	71 f0       	breq	.+28     	; 0x4cf8 <__fp_splitA+0x1a>
    4cdc:	47 95       	ror	r20

00004cde <__fp_splitA>:
    4cde:	88 0f       	add	r24, r24
    4ce0:	97 fb       	bst	r25, 7
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	61 f0       	breq	.+24     	; 0x4cfe <__fp_splitA+0x20>
    4ce6:	9f 3f       	cpi	r25, 0xFF	; 255
    4ce8:	79 f0       	breq	.+30     	; 0x4d08 <__fp_splitA+0x2a>
    4cea:	87 95       	ror	r24
    4cec:	08 95       	ret
    4cee:	12 16       	cp	r1, r18
    4cf0:	13 06       	cpc	r1, r19
    4cf2:	14 06       	cpc	r1, r20
    4cf4:	55 1f       	adc	r21, r21
    4cf6:	f2 cf       	rjmp	.-28     	; 0x4cdc <__fp_split3+0xe>
    4cf8:	46 95       	lsr	r20
    4cfa:	f1 df       	rcall	.-30     	; 0x4cde <__fp_splitA>
    4cfc:	08 c0       	rjmp	.+16     	; 0x4d0e <__fp_splitA+0x30>
    4cfe:	16 16       	cp	r1, r22
    4d00:	17 06       	cpc	r1, r23
    4d02:	18 06       	cpc	r1, r24
    4d04:	99 1f       	adc	r25, r25
    4d06:	f1 cf       	rjmp	.-30     	; 0x4cea <__fp_splitA+0xc>
    4d08:	86 95       	lsr	r24
    4d0a:	71 05       	cpc	r23, r1
    4d0c:	61 05       	cpc	r22, r1
    4d0e:	08 94       	sec
    4d10:	08 95       	ret

00004d12 <__fp_zero>:
    4d12:	e8 94       	clt

00004d14 <__fp_szero>:
    4d14:	bb 27       	eor	r27, r27
    4d16:	66 27       	eor	r22, r22
    4d18:	77 27       	eor	r23, r23
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	97 f9       	bld	r25, 7
    4d1e:	08 95       	ret

00004d20 <__gesf2>:
    4d20:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__fp_cmp>
    4d24:	08 f4       	brcc	.+2      	; 0x4d28 <__gesf2+0x8>
    4d26:	8f ef       	ldi	r24, 0xFF	; 255
    4d28:	08 95       	ret

00004d2a <__mulsf3>:
    4d2a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__mulsf3x>
    4d2e:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__fp_round>
    4d32:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__fp_pscA>
    4d36:	38 f0       	brcs	.+14     	; 0x4d46 <__mulsf3+0x1c>
    4d38:	0e 94 10 26 	call	0x4c20	; 0x4c20 <__fp_pscB>
    4d3c:	20 f0       	brcs	.+8      	; 0x4d46 <__mulsf3+0x1c>
    4d3e:	95 23       	and	r25, r21
    4d40:	11 f0       	breq	.+4      	; 0x4d46 <__mulsf3+0x1c>
    4d42:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__fp_inf>
    4d46:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <__fp_nan>
    4d4a:	11 24       	eor	r1, r1
    4d4c:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__fp_szero>

00004d50 <__mulsf3x>:
    4d50:	0e 94 67 26 	call	0x4cce	; 0x4cce <__fp_split3>
    4d54:	70 f3       	brcs	.-36     	; 0x4d32 <__mulsf3+0x8>

00004d56 <__mulsf3_pse>:
    4d56:	95 9f       	mul	r25, r21
    4d58:	c1 f3       	breq	.-16     	; 0x4d4a <__mulsf3+0x20>
    4d5a:	95 0f       	add	r25, r21
    4d5c:	50 e0       	ldi	r21, 0x00	; 0
    4d5e:	55 1f       	adc	r21, r21
    4d60:	62 9f       	mul	r22, r18
    4d62:	f0 01       	movw	r30, r0
    4d64:	72 9f       	mul	r23, r18
    4d66:	bb 27       	eor	r27, r27
    4d68:	f0 0d       	add	r31, r0
    4d6a:	b1 1d       	adc	r27, r1
    4d6c:	63 9f       	mul	r22, r19
    4d6e:	aa 27       	eor	r26, r26
    4d70:	f0 0d       	add	r31, r0
    4d72:	b1 1d       	adc	r27, r1
    4d74:	aa 1f       	adc	r26, r26
    4d76:	64 9f       	mul	r22, r20
    4d78:	66 27       	eor	r22, r22
    4d7a:	b0 0d       	add	r27, r0
    4d7c:	a1 1d       	adc	r26, r1
    4d7e:	66 1f       	adc	r22, r22
    4d80:	82 9f       	mul	r24, r18
    4d82:	22 27       	eor	r18, r18
    4d84:	b0 0d       	add	r27, r0
    4d86:	a1 1d       	adc	r26, r1
    4d88:	62 1f       	adc	r22, r18
    4d8a:	73 9f       	mul	r23, r19
    4d8c:	b0 0d       	add	r27, r0
    4d8e:	a1 1d       	adc	r26, r1
    4d90:	62 1f       	adc	r22, r18
    4d92:	83 9f       	mul	r24, r19
    4d94:	a0 0d       	add	r26, r0
    4d96:	61 1d       	adc	r22, r1
    4d98:	22 1f       	adc	r18, r18
    4d9a:	74 9f       	mul	r23, r20
    4d9c:	33 27       	eor	r19, r19
    4d9e:	a0 0d       	add	r26, r0
    4da0:	61 1d       	adc	r22, r1
    4da2:	23 1f       	adc	r18, r19
    4da4:	84 9f       	mul	r24, r20
    4da6:	60 0d       	add	r22, r0
    4da8:	21 1d       	adc	r18, r1
    4daa:	82 2f       	mov	r24, r18
    4dac:	76 2f       	mov	r23, r22
    4dae:	6a 2f       	mov	r22, r26
    4db0:	11 24       	eor	r1, r1
    4db2:	9f 57       	subi	r25, 0x7F	; 127
    4db4:	50 40       	sbci	r21, 0x00	; 0
    4db6:	9a f0       	brmi	.+38     	; 0x4dde <__mulsf3_pse+0x88>
    4db8:	f1 f0       	breq	.+60     	; 0x4df6 <__mulsf3_pse+0xa0>
    4dba:	88 23       	and	r24, r24
    4dbc:	4a f0       	brmi	.+18     	; 0x4dd0 <__mulsf3_pse+0x7a>
    4dbe:	ee 0f       	add	r30, r30
    4dc0:	ff 1f       	adc	r31, r31
    4dc2:	bb 1f       	adc	r27, r27
    4dc4:	66 1f       	adc	r22, r22
    4dc6:	77 1f       	adc	r23, r23
    4dc8:	88 1f       	adc	r24, r24
    4dca:	91 50       	subi	r25, 0x01	; 1
    4dcc:	50 40       	sbci	r21, 0x00	; 0
    4dce:	a9 f7       	brne	.-22     	; 0x4dba <__mulsf3_pse+0x64>
    4dd0:	9e 3f       	cpi	r25, 0xFE	; 254
    4dd2:	51 05       	cpc	r21, r1
    4dd4:	80 f0       	brcs	.+32     	; 0x4df6 <__mulsf3_pse+0xa0>
    4dd6:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__fp_inf>
    4dda:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__fp_szero>
    4dde:	5f 3f       	cpi	r21, 0xFF	; 255
    4de0:	e4 f3       	brlt	.-8      	; 0x4dda <__mulsf3_pse+0x84>
    4de2:	98 3e       	cpi	r25, 0xE8	; 232
    4de4:	d4 f3       	brlt	.-12     	; 0x4dda <__mulsf3_pse+0x84>
    4de6:	86 95       	lsr	r24
    4de8:	77 95       	ror	r23
    4dea:	67 95       	ror	r22
    4dec:	b7 95       	ror	r27
    4dee:	f7 95       	ror	r31
    4df0:	e7 95       	ror	r30
    4df2:	9f 5f       	subi	r25, 0xFF	; 255
    4df4:	c1 f7       	brne	.-16     	; 0x4de6 <__mulsf3_pse+0x90>
    4df6:	fe 2b       	or	r31, r30
    4df8:	88 0f       	add	r24, r24
    4dfa:	91 1d       	adc	r25, r1
    4dfc:	96 95       	lsr	r25
    4dfe:	87 95       	ror	r24
    4e00:	97 f9       	bld	r25, 7
    4e02:	08 95       	ret

00004e04 <round>:
    4e04:	0e 94 6f 26 	call	0x4cde	; 0x4cde <__fp_splitA>
    4e08:	e8 f0       	brcs	.+58     	; 0x4e44 <round+0x40>
    4e0a:	9e 37       	cpi	r25, 0x7E	; 126
    4e0c:	e8 f0       	brcs	.+58     	; 0x4e48 <round+0x44>
    4e0e:	96 39       	cpi	r25, 0x96	; 150
    4e10:	b8 f4       	brcc	.+46     	; 0x4e40 <round+0x3c>
    4e12:	9e 38       	cpi	r25, 0x8E	; 142
    4e14:	48 f4       	brcc	.+18     	; 0x4e28 <round+0x24>
    4e16:	67 2f       	mov	r22, r23
    4e18:	78 2f       	mov	r23, r24
    4e1a:	88 27       	eor	r24, r24
    4e1c:	98 5f       	subi	r25, 0xF8	; 248
    4e1e:	f9 cf       	rjmp	.-14     	; 0x4e12 <round+0xe>
    4e20:	86 95       	lsr	r24
    4e22:	77 95       	ror	r23
    4e24:	67 95       	ror	r22
    4e26:	93 95       	inc	r25
    4e28:	95 39       	cpi	r25, 0x95	; 149
    4e2a:	d0 f3       	brcs	.-12     	; 0x4e20 <round+0x1c>
    4e2c:	b6 2f       	mov	r27, r22
    4e2e:	b1 70       	andi	r27, 0x01	; 1
    4e30:	6b 0f       	add	r22, r27
    4e32:	71 1d       	adc	r23, r1
    4e34:	81 1d       	adc	r24, r1
    4e36:	20 f4       	brcc	.+8      	; 0x4e40 <round+0x3c>
    4e38:	87 95       	ror	r24
    4e3a:	77 95       	ror	r23
    4e3c:	67 95       	ror	r22
    4e3e:	93 95       	inc	r25
    4e40:	0c 94 26 27 	jmp	0x4e4c	; 0x4e4c <__fp_mintl>
    4e44:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_mpack>
    4e48:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__fp_szero>

00004e4c <__fp_mintl>:
    4e4c:	88 23       	and	r24, r24
    4e4e:	71 f4       	brne	.+28     	; 0x4e6c <__fp_mintl+0x20>
    4e50:	77 23       	and	r23, r23
    4e52:	21 f0       	breq	.+8      	; 0x4e5c <__fp_mintl+0x10>
    4e54:	98 50       	subi	r25, 0x08	; 8
    4e56:	87 2b       	or	r24, r23
    4e58:	76 2f       	mov	r23, r22
    4e5a:	07 c0       	rjmp	.+14     	; 0x4e6a <__fp_mintl+0x1e>
    4e5c:	66 23       	and	r22, r22
    4e5e:	11 f4       	brne	.+4      	; 0x4e64 <__fp_mintl+0x18>
    4e60:	99 27       	eor	r25, r25
    4e62:	0d c0       	rjmp	.+26     	; 0x4e7e <__fp_mintl+0x32>
    4e64:	90 51       	subi	r25, 0x10	; 16
    4e66:	86 2b       	or	r24, r22
    4e68:	70 e0       	ldi	r23, 0x00	; 0
    4e6a:	60 e0       	ldi	r22, 0x00	; 0
    4e6c:	2a f0       	brmi	.+10     	; 0x4e78 <__fp_mintl+0x2c>
    4e6e:	9a 95       	dec	r25
    4e70:	66 0f       	add	r22, r22
    4e72:	77 1f       	adc	r23, r23
    4e74:	88 1f       	adc	r24, r24
    4e76:	da f7       	brpl	.-10     	; 0x4e6e <__fp_mintl+0x22>
    4e78:	88 0f       	add	r24, r24
    4e7a:	96 95       	lsr	r25
    4e7c:	87 95       	ror	r24
    4e7e:	97 f9       	bld	r25, 7
    4e80:	08 95       	ret

00004e82 <__fp_mpack>:
    4e82:	9f 3f       	cpi	r25, 0xFF	; 255
    4e84:	31 f0       	breq	.+12     	; 0x4e92 <__fp_mpack_finite+0xc>

00004e86 <__fp_mpack_finite>:
    4e86:	91 50       	subi	r25, 0x01	; 1
    4e88:	20 f4       	brcc	.+8      	; 0x4e92 <__fp_mpack_finite+0xc>
    4e8a:	87 95       	ror	r24
    4e8c:	77 95       	ror	r23
    4e8e:	67 95       	ror	r22
    4e90:	b7 95       	ror	r27
    4e92:	88 0f       	add	r24, r24
    4e94:	91 1d       	adc	r25, r1
    4e96:	96 95       	lsr	r25
    4e98:	87 95       	ror	r24
    4e9a:	97 f9       	bld	r25, 7
    4e9c:	08 95       	ret

00004e9e <__fp_powsodd>:
    4e9e:	9f 93       	push	r25
    4ea0:	8f 93       	push	r24
    4ea2:	7f 93       	push	r23
    4ea4:	6f 93       	push	r22
    4ea6:	ff 93       	push	r31
    4ea8:	ef 93       	push	r30
    4eaa:	9b 01       	movw	r18, r22
    4eac:	ac 01       	movw	r20, r24
    4eae:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__mulsf3>
    4eb2:	ef 91       	pop	r30
    4eb4:	ff 91       	pop	r31
    4eb6:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__fp_powser>
    4eba:	2f 91       	pop	r18
    4ebc:	3f 91       	pop	r19
    4ebe:	4f 91       	pop	r20
    4ec0:	5f 91       	pop	r21
    4ec2:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__mulsf3>

00004ec6 <__fp_powser>:
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	1f 93       	push	r17
    4ecc:	0f 93       	push	r16
    4ece:	ff 92       	push	r15
    4ed0:	ef 92       	push	r14
    4ed2:	df 92       	push	r13
    4ed4:	7b 01       	movw	r14, r22
    4ed6:	8c 01       	movw	r16, r24
    4ed8:	68 94       	set
    4eda:	06 c0       	rjmp	.+12     	; 0x4ee8 <__fp_powser+0x22>
    4edc:	da 2e       	mov	r13, r26
    4ede:	ef 01       	movw	r28, r30
    4ee0:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__mulsf3x>
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e8 94       	clt
    4ee8:	a5 91       	lpm	r26, Z+
    4eea:	25 91       	lpm	r18, Z+
    4eec:	35 91       	lpm	r19, Z+
    4eee:	45 91       	lpm	r20, Z+
    4ef0:	55 91       	lpm	r21, Z+
    4ef2:	a6 f3       	brts	.-24     	; 0x4edc <__fp_powser+0x16>
    4ef4:	ef 01       	movw	r28, r30
    4ef6:	0e 94 98 24 	call	0x4930	; 0x4930 <__addsf3x>
    4efa:	fe 01       	movw	r30, r28
    4efc:	97 01       	movw	r18, r14
    4efe:	a8 01       	movw	r20, r16
    4f00:	da 94       	dec	r13
    4f02:	69 f7       	brne	.-38     	; 0x4ede <__fp_powser+0x18>
    4f04:	df 90       	pop	r13
    4f06:	ef 90       	pop	r14
    4f08:	ff 90       	pop	r15
    4f0a:	0f 91       	pop	r16
    4f0c:	1f 91       	pop	r17
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	08 95       	ret

00004f14 <__mulsi3>:
    4f14:	db 01       	movw	r26, r22
    4f16:	8f 93       	push	r24
    4f18:	9f 93       	push	r25
    4f1a:	0e 94 1f 28 	call	0x503e	; 0x503e <__muluhisi3>
    4f1e:	bf 91       	pop	r27
    4f20:	af 91       	pop	r26
    4f22:	a2 9f       	mul	r26, r18
    4f24:	80 0d       	add	r24, r0
    4f26:	91 1d       	adc	r25, r1
    4f28:	a3 9f       	mul	r26, r19
    4f2a:	90 0d       	add	r25, r0
    4f2c:	b2 9f       	mul	r27, r18
    4f2e:	90 0d       	add	r25, r0
    4f30:	11 24       	eor	r1, r1
    4f32:	08 95       	ret

00004f34 <__udivmodhi4>:
    4f34:	aa 1b       	sub	r26, r26
    4f36:	bb 1b       	sub	r27, r27
    4f38:	51 e1       	ldi	r21, 0x11	; 17
    4f3a:	07 c0       	rjmp	.+14     	; 0x4f4a <__udivmodhi4_ep>

00004f3c <__udivmodhi4_loop>:
    4f3c:	aa 1f       	adc	r26, r26
    4f3e:	bb 1f       	adc	r27, r27
    4f40:	a6 17       	cp	r26, r22
    4f42:	b7 07       	cpc	r27, r23
    4f44:	10 f0       	brcs	.+4      	; 0x4f4a <__udivmodhi4_ep>
    4f46:	a6 1b       	sub	r26, r22
    4f48:	b7 0b       	sbc	r27, r23

00004f4a <__udivmodhi4_ep>:
    4f4a:	88 1f       	adc	r24, r24
    4f4c:	99 1f       	adc	r25, r25
    4f4e:	5a 95       	dec	r21
    4f50:	a9 f7       	brne	.-22     	; 0x4f3c <__udivmodhi4_loop>
    4f52:	80 95       	com	r24
    4f54:	90 95       	com	r25
    4f56:	bc 01       	movw	r22, r24
    4f58:	cd 01       	movw	r24, r26
    4f5a:	08 95       	ret

00004f5c <__divmodhi4>:
    4f5c:	97 fb       	bst	r25, 7
    4f5e:	07 2e       	mov	r0, r23
    4f60:	16 f4       	brtc	.+4      	; 0x4f66 <__divmodhi4+0xa>
    4f62:	00 94       	com	r0
    4f64:	07 d0       	rcall	.+14     	; 0x4f74 <__divmodhi4_neg1>
    4f66:	77 fd       	sbrc	r23, 7
    4f68:	09 d0       	rcall	.+18     	; 0x4f7c <__divmodhi4_neg2>
    4f6a:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__udivmodhi4>
    4f6e:	07 fc       	sbrc	r0, 7
    4f70:	05 d0       	rcall	.+10     	; 0x4f7c <__divmodhi4_neg2>
    4f72:	3e f4       	brtc	.+14     	; 0x4f82 <__divmodhi4_exit>

00004f74 <__divmodhi4_neg1>:
    4f74:	90 95       	com	r25
    4f76:	81 95       	neg	r24
    4f78:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7a:	08 95       	ret

00004f7c <__divmodhi4_neg2>:
    4f7c:	70 95       	com	r23
    4f7e:	61 95       	neg	r22
    4f80:	7f 4f       	sbci	r23, 0xFF	; 255

00004f82 <__divmodhi4_exit>:
    4f82:	08 95       	ret

00004f84 <__udivmodsi4>:
    4f84:	a1 e2       	ldi	r26, 0x21	; 33
    4f86:	1a 2e       	mov	r1, r26
    4f88:	aa 1b       	sub	r26, r26
    4f8a:	bb 1b       	sub	r27, r27
    4f8c:	fd 01       	movw	r30, r26
    4f8e:	0d c0       	rjmp	.+26     	; 0x4faa <__udivmodsi4_ep>

00004f90 <__udivmodsi4_loop>:
    4f90:	aa 1f       	adc	r26, r26
    4f92:	bb 1f       	adc	r27, r27
    4f94:	ee 1f       	adc	r30, r30
    4f96:	ff 1f       	adc	r31, r31
    4f98:	a2 17       	cp	r26, r18
    4f9a:	b3 07       	cpc	r27, r19
    4f9c:	e4 07       	cpc	r30, r20
    4f9e:	f5 07       	cpc	r31, r21
    4fa0:	20 f0       	brcs	.+8      	; 0x4faa <__udivmodsi4_ep>
    4fa2:	a2 1b       	sub	r26, r18
    4fa4:	b3 0b       	sbc	r27, r19
    4fa6:	e4 0b       	sbc	r30, r20
    4fa8:	f5 0b       	sbc	r31, r21

00004faa <__udivmodsi4_ep>:
    4faa:	66 1f       	adc	r22, r22
    4fac:	77 1f       	adc	r23, r23
    4fae:	88 1f       	adc	r24, r24
    4fb0:	99 1f       	adc	r25, r25
    4fb2:	1a 94       	dec	r1
    4fb4:	69 f7       	brne	.-38     	; 0x4f90 <__udivmodsi4_loop>
    4fb6:	60 95       	com	r22
    4fb8:	70 95       	com	r23
    4fba:	80 95       	com	r24
    4fbc:	90 95       	com	r25
    4fbe:	9b 01       	movw	r18, r22
    4fc0:	ac 01       	movw	r20, r24
    4fc2:	bd 01       	movw	r22, r26
    4fc4:	cf 01       	movw	r24, r30
    4fc6:	08 95       	ret

00004fc8 <__divmodsi4>:
    4fc8:	05 2e       	mov	r0, r21
    4fca:	97 fb       	bst	r25, 7
    4fcc:	1e f4       	brtc	.+6      	; 0x4fd4 <__divmodsi4+0xc>
    4fce:	00 94       	com	r0
    4fd0:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <__negsi2>
    4fd4:	57 fd       	sbrc	r21, 7
    4fd6:	07 d0       	rcall	.+14     	; 0x4fe6 <__divmodsi4_neg2>
    4fd8:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    4fdc:	07 fc       	sbrc	r0, 7
    4fde:	03 d0       	rcall	.+6      	; 0x4fe6 <__divmodsi4_neg2>
    4fe0:	4e f4       	brtc	.+18     	; 0x4ff4 <__divmodsi4_exit>
    4fe2:	0c 94 fb 27 	jmp	0x4ff6	; 0x4ff6 <__negsi2>

00004fe6 <__divmodsi4_neg2>:
    4fe6:	50 95       	com	r21
    4fe8:	40 95       	com	r20
    4fea:	30 95       	com	r19
    4fec:	21 95       	neg	r18
    4fee:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff0:	4f 4f       	sbci	r20, 0xFF	; 255
    4ff2:	5f 4f       	sbci	r21, 0xFF	; 255

00004ff4 <__divmodsi4_exit>:
    4ff4:	08 95       	ret

00004ff6 <__negsi2>:
    4ff6:	90 95       	com	r25
    4ff8:	80 95       	com	r24
    4ffa:	70 95       	com	r23
    4ffc:	61 95       	neg	r22
    4ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    5000:	8f 4f       	sbci	r24, 0xFF	; 255
    5002:	9f 4f       	sbci	r25, 0xFF	; 255
    5004:	08 95       	ret

00005006 <__tablejump2__>:
    5006:	ee 0f       	add	r30, r30
    5008:	ff 1f       	adc	r31, r31
    500a:	05 90       	lpm	r0, Z+
    500c:	f4 91       	lpm	r31, Z
    500e:	e0 2d       	mov	r30, r0
    5010:	09 94       	ijmp

00005012 <__umulhisi3>:
    5012:	a2 9f       	mul	r26, r18
    5014:	b0 01       	movw	r22, r0
    5016:	b3 9f       	mul	r27, r19
    5018:	c0 01       	movw	r24, r0
    501a:	a3 9f       	mul	r26, r19
    501c:	70 0d       	add	r23, r0
    501e:	81 1d       	adc	r24, r1
    5020:	11 24       	eor	r1, r1
    5022:	91 1d       	adc	r25, r1
    5024:	b2 9f       	mul	r27, r18
    5026:	70 0d       	add	r23, r0
    5028:	81 1d       	adc	r24, r1
    502a:	11 24       	eor	r1, r1
    502c:	91 1d       	adc	r25, r1
    502e:	08 95       	ret

00005030 <__usmulhisi3>:
    5030:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>

00005034 <__usmulhisi3_tail>:
    5034:	b7 ff       	sbrs	r27, 7
    5036:	08 95       	ret
    5038:	82 1b       	sub	r24, r18
    503a:	93 0b       	sbc	r25, r19
    503c:	08 95       	ret

0000503e <__muluhisi3>:
    503e:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    5042:	a5 9f       	mul	r26, r21
    5044:	90 0d       	add	r25, r0
    5046:	b4 9f       	mul	r27, r20
    5048:	90 0d       	add	r25, r0
    504a:	a4 9f       	mul	r26, r20
    504c:	80 0d       	add	r24, r0
    504e:	91 1d       	adc	r25, r1
    5050:	11 24       	eor	r1, r1
    5052:	08 95       	ret

00005054 <__mulshisi3>:
    5054:	b7 ff       	sbrs	r27, 7
    5056:	0c 94 1f 28 	jmp	0x503e	; 0x503e <__muluhisi3>

0000505a <__mulohisi3>:
    505a:	0e 94 1f 28 	call	0x503e	; 0x503e <__muluhisi3>
    505e:	82 1b       	sub	r24, r18
    5060:	93 0b       	sbc	r25, r19
    5062:	08 95       	ret

00005064 <malloc>:
    5064:	0f 93       	push	r16
    5066:	1f 93       	push	r17
    5068:	cf 93       	push	r28
    506a:	df 93       	push	r29
    506c:	82 30       	cpi	r24, 0x02	; 2
    506e:	91 05       	cpc	r25, r1
    5070:	10 f4       	brcc	.+4      	; 0x5076 <malloc+0x12>
    5072:	82 e0       	ldi	r24, 0x02	; 2
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	e0 91 6e 05 	lds	r30, 0x056E	; 0x80056e <__flp>
    507a:	f0 91 6f 05 	lds	r31, 0x056F	; 0x80056f <__flp+0x1>
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	a0 e0       	ldi	r26, 0x00	; 0
    5084:	b0 e0       	ldi	r27, 0x00	; 0
    5086:	30 97       	sbiw	r30, 0x00	; 0
    5088:	19 f1       	breq	.+70     	; 0x50d0 <malloc+0x6c>
    508a:	40 81       	ld	r20, Z
    508c:	51 81       	ldd	r21, Z+1	; 0x01
    508e:	02 81       	ldd	r16, Z+2	; 0x02
    5090:	13 81       	ldd	r17, Z+3	; 0x03
    5092:	48 17       	cp	r20, r24
    5094:	59 07       	cpc	r21, r25
    5096:	c8 f0       	brcs	.+50     	; 0x50ca <malloc+0x66>
    5098:	84 17       	cp	r24, r20
    509a:	95 07       	cpc	r25, r21
    509c:	69 f4       	brne	.+26     	; 0x50b8 <malloc+0x54>
    509e:	10 97       	sbiw	r26, 0x00	; 0
    50a0:	31 f0       	breq	.+12     	; 0x50ae <malloc+0x4a>
    50a2:	12 96       	adiw	r26, 0x02	; 2
    50a4:	0c 93       	st	X, r16
    50a6:	12 97       	sbiw	r26, 0x02	; 2
    50a8:	13 96       	adiw	r26, 0x03	; 3
    50aa:	1c 93       	st	X, r17
    50ac:	27 c0       	rjmp	.+78     	; 0x50fc <malloc+0x98>
    50ae:	00 93 6e 05 	sts	0x056E, r16	; 0x80056e <__flp>
    50b2:	10 93 6f 05 	sts	0x056F, r17	; 0x80056f <__flp+0x1>
    50b6:	22 c0       	rjmp	.+68     	; 0x50fc <malloc+0x98>
    50b8:	21 15       	cp	r18, r1
    50ba:	31 05       	cpc	r19, r1
    50bc:	19 f0       	breq	.+6      	; 0x50c4 <malloc+0x60>
    50be:	42 17       	cp	r20, r18
    50c0:	53 07       	cpc	r21, r19
    50c2:	18 f4       	brcc	.+6      	; 0x50ca <malloc+0x66>
    50c4:	9a 01       	movw	r18, r20
    50c6:	bd 01       	movw	r22, r26
    50c8:	ef 01       	movw	r28, r30
    50ca:	df 01       	movw	r26, r30
    50cc:	f8 01       	movw	r30, r16
    50ce:	db cf       	rjmp	.-74     	; 0x5086 <malloc+0x22>
    50d0:	21 15       	cp	r18, r1
    50d2:	31 05       	cpc	r19, r1
    50d4:	f9 f0       	breq	.+62     	; 0x5114 <malloc+0xb0>
    50d6:	28 1b       	sub	r18, r24
    50d8:	39 0b       	sbc	r19, r25
    50da:	24 30       	cpi	r18, 0x04	; 4
    50dc:	31 05       	cpc	r19, r1
    50de:	80 f4       	brcc	.+32     	; 0x5100 <malloc+0x9c>
    50e0:	8a 81       	ldd	r24, Y+2	; 0x02
    50e2:	9b 81       	ldd	r25, Y+3	; 0x03
    50e4:	61 15       	cp	r22, r1
    50e6:	71 05       	cpc	r23, r1
    50e8:	21 f0       	breq	.+8      	; 0x50f2 <malloc+0x8e>
    50ea:	fb 01       	movw	r30, r22
    50ec:	93 83       	std	Z+3, r25	; 0x03
    50ee:	82 83       	std	Z+2, r24	; 0x02
    50f0:	04 c0       	rjmp	.+8      	; 0x50fa <malloc+0x96>
    50f2:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <__flp+0x1>
    50f6:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <__flp>
    50fa:	fe 01       	movw	r30, r28
    50fc:	32 96       	adiw	r30, 0x02	; 2
    50fe:	44 c0       	rjmp	.+136    	; 0x5188 <malloc+0x124>
    5100:	fe 01       	movw	r30, r28
    5102:	e2 0f       	add	r30, r18
    5104:	f3 1f       	adc	r31, r19
    5106:	81 93       	st	Z+, r24
    5108:	91 93       	st	Z+, r25
    510a:	22 50       	subi	r18, 0x02	; 2
    510c:	31 09       	sbc	r19, r1
    510e:	39 83       	std	Y+1, r19	; 0x01
    5110:	28 83       	st	Y, r18
    5112:	3a c0       	rjmp	.+116    	; 0x5188 <malloc+0x124>
    5114:	20 91 6c 05 	lds	r18, 0x056C	; 0x80056c <__brkval>
    5118:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <__brkval+0x1>
    511c:	23 2b       	or	r18, r19
    511e:	41 f4       	brne	.+16     	; 0x5130 <malloc+0xcc>
    5120:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5124:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5128:	30 93 6d 05 	sts	0x056D, r19	; 0x80056d <__brkval+0x1>
    512c:	20 93 6c 05 	sts	0x056C, r18	; 0x80056c <__brkval>
    5130:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5134:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5138:	21 15       	cp	r18, r1
    513a:	31 05       	cpc	r19, r1
    513c:	41 f4       	brne	.+16     	; 0x514e <malloc+0xea>
    513e:	2d b7       	in	r18, 0x3d	; 61
    5140:	3e b7       	in	r19, 0x3e	; 62
    5142:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5146:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    514a:	24 1b       	sub	r18, r20
    514c:	35 0b       	sbc	r19, r21
    514e:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <__brkval>
    5152:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <__brkval+0x1>
    5156:	e2 17       	cp	r30, r18
    5158:	f3 07       	cpc	r31, r19
    515a:	a0 f4       	brcc	.+40     	; 0x5184 <malloc+0x120>
    515c:	2e 1b       	sub	r18, r30
    515e:	3f 0b       	sbc	r19, r31
    5160:	28 17       	cp	r18, r24
    5162:	39 07       	cpc	r19, r25
    5164:	78 f0       	brcs	.+30     	; 0x5184 <malloc+0x120>
    5166:	ac 01       	movw	r20, r24
    5168:	4e 5f       	subi	r20, 0xFE	; 254
    516a:	5f 4f       	sbci	r21, 0xFF	; 255
    516c:	24 17       	cp	r18, r20
    516e:	35 07       	cpc	r19, r21
    5170:	48 f0       	brcs	.+18     	; 0x5184 <malloc+0x120>
    5172:	4e 0f       	add	r20, r30
    5174:	5f 1f       	adc	r21, r31
    5176:	50 93 6d 05 	sts	0x056D, r21	; 0x80056d <__brkval+0x1>
    517a:	40 93 6c 05 	sts	0x056C, r20	; 0x80056c <__brkval>
    517e:	81 93       	st	Z+, r24
    5180:	91 93       	st	Z+, r25
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <malloc+0x124>
    5184:	e0 e0       	ldi	r30, 0x00	; 0
    5186:	f0 e0       	ldi	r31, 0x00	; 0
    5188:	cf 01       	movw	r24, r30
    518a:	df 91       	pop	r29
    518c:	cf 91       	pop	r28
    518e:	1f 91       	pop	r17
    5190:	0f 91       	pop	r16
    5192:	08 95       	ret

00005194 <free>:
    5194:	cf 93       	push	r28
    5196:	df 93       	push	r29
    5198:	00 97       	sbiw	r24, 0x00	; 0
    519a:	09 f4       	brne	.+2      	; 0x519e <free+0xa>
    519c:	81 c0       	rjmp	.+258    	; 0x52a0 <free+0x10c>
    519e:	fc 01       	movw	r30, r24
    51a0:	32 97       	sbiw	r30, 0x02	; 2
    51a2:	13 82       	std	Z+3, r1	; 0x03
    51a4:	12 82       	std	Z+2, r1	; 0x02
    51a6:	a0 91 6e 05 	lds	r26, 0x056E	; 0x80056e <__flp>
    51aa:	b0 91 6f 05 	lds	r27, 0x056F	; 0x80056f <__flp+0x1>
    51ae:	10 97       	sbiw	r26, 0x00	; 0
    51b0:	81 f4       	brne	.+32     	; 0x51d2 <free+0x3e>
    51b2:	20 81       	ld	r18, Z
    51b4:	31 81       	ldd	r19, Z+1	; 0x01
    51b6:	82 0f       	add	r24, r18
    51b8:	93 1f       	adc	r25, r19
    51ba:	20 91 6c 05 	lds	r18, 0x056C	; 0x80056c <__brkval>
    51be:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <__brkval+0x1>
    51c2:	28 17       	cp	r18, r24
    51c4:	39 07       	cpc	r19, r25
    51c6:	51 f5       	brne	.+84     	; 0x521c <free+0x88>
    51c8:	f0 93 6d 05 	sts	0x056D, r31	; 0x80056d <__brkval+0x1>
    51cc:	e0 93 6c 05 	sts	0x056C, r30	; 0x80056c <__brkval>
    51d0:	67 c0       	rjmp	.+206    	; 0x52a0 <free+0x10c>
    51d2:	ed 01       	movw	r28, r26
    51d4:	20 e0       	ldi	r18, 0x00	; 0
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	ce 17       	cp	r28, r30
    51da:	df 07       	cpc	r29, r31
    51dc:	40 f4       	brcc	.+16     	; 0x51ee <free+0x5a>
    51de:	4a 81       	ldd	r20, Y+2	; 0x02
    51e0:	5b 81       	ldd	r21, Y+3	; 0x03
    51e2:	9e 01       	movw	r18, r28
    51e4:	41 15       	cp	r20, r1
    51e6:	51 05       	cpc	r21, r1
    51e8:	f1 f0       	breq	.+60     	; 0x5226 <free+0x92>
    51ea:	ea 01       	movw	r28, r20
    51ec:	f5 cf       	rjmp	.-22     	; 0x51d8 <free+0x44>
    51ee:	d3 83       	std	Z+3, r29	; 0x03
    51f0:	c2 83       	std	Z+2, r28	; 0x02
    51f2:	40 81       	ld	r20, Z
    51f4:	51 81       	ldd	r21, Z+1	; 0x01
    51f6:	84 0f       	add	r24, r20
    51f8:	95 1f       	adc	r25, r21
    51fa:	c8 17       	cp	r28, r24
    51fc:	d9 07       	cpc	r29, r25
    51fe:	59 f4       	brne	.+22     	; 0x5216 <free+0x82>
    5200:	88 81       	ld	r24, Y
    5202:	99 81       	ldd	r25, Y+1	; 0x01
    5204:	84 0f       	add	r24, r20
    5206:	95 1f       	adc	r25, r21
    5208:	02 96       	adiw	r24, 0x02	; 2
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	80 83       	st	Z, r24
    520e:	8a 81       	ldd	r24, Y+2	; 0x02
    5210:	9b 81       	ldd	r25, Y+3	; 0x03
    5212:	93 83       	std	Z+3, r25	; 0x03
    5214:	82 83       	std	Z+2, r24	; 0x02
    5216:	21 15       	cp	r18, r1
    5218:	31 05       	cpc	r19, r1
    521a:	29 f4       	brne	.+10     	; 0x5226 <free+0x92>
    521c:	f0 93 6f 05 	sts	0x056F, r31	; 0x80056f <__flp+0x1>
    5220:	e0 93 6e 05 	sts	0x056E, r30	; 0x80056e <__flp>
    5224:	3d c0       	rjmp	.+122    	; 0x52a0 <free+0x10c>
    5226:	e9 01       	movw	r28, r18
    5228:	fb 83       	std	Y+3, r31	; 0x03
    522a:	ea 83       	std	Y+2, r30	; 0x02
    522c:	49 91       	ld	r20, Y+
    522e:	59 91       	ld	r21, Y+
    5230:	c4 0f       	add	r28, r20
    5232:	d5 1f       	adc	r29, r21
    5234:	ec 17       	cp	r30, r28
    5236:	fd 07       	cpc	r31, r29
    5238:	61 f4       	brne	.+24     	; 0x5252 <free+0xbe>
    523a:	80 81       	ld	r24, Z
    523c:	91 81       	ldd	r25, Z+1	; 0x01
    523e:	84 0f       	add	r24, r20
    5240:	95 1f       	adc	r25, r21
    5242:	02 96       	adiw	r24, 0x02	; 2
    5244:	e9 01       	movw	r28, r18
    5246:	99 83       	std	Y+1, r25	; 0x01
    5248:	88 83       	st	Y, r24
    524a:	82 81       	ldd	r24, Z+2	; 0x02
    524c:	93 81       	ldd	r25, Z+3	; 0x03
    524e:	9b 83       	std	Y+3, r25	; 0x03
    5250:	8a 83       	std	Y+2, r24	; 0x02
    5252:	e0 e0       	ldi	r30, 0x00	; 0
    5254:	f0 e0       	ldi	r31, 0x00	; 0
    5256:	12 96       	adiw	r26, 0x02	; 2
    5258:	8d 91       	ld	r24, X+
    525a:	9c 91       	ld	r25, X
    525c:	13 97       	sbiw	r26, 0x03	; 3
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	19 f0       	breq	.+6      	; 0x5268 <free+0xd4>
    5262:	fd 01       	movw	r30, r26
    5264:	dc 01       	movw	r26, r24
    5266:	f7 cf       	rjmp	.-18     	; 0x5256 <free+0xc2>
    5268:	8d 91       	ld	r24, X+
    526a:	9c 91       	ld	r25, X
    526c:	11 97       	sbiw	r26, 0x01	; 1
    526e:	9d 01       	movw	r18, r26
    5270:	2e 5f       	subi	r18, 0xFE	; 254
    5272:	3f 4f       	sbci	r19, 0xFF	; 255
    5274:	82 0f       	add	r24, r18
    5276:	93 1f       	adc	r25, r19
    5278:	20 91 6c 05 	lds	r18, 0x056C	; 0x80056c <__brkval>
    527c:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <__brkval+0x1>
    5280:	28 17       	cp	r18, r24
    5282:	39 07       	cpc	r19, r25
    5284:	69 f4       	brne	.+26     	; 0x52a0 <free+0x10c>
    5286:	30 97       	sbiw	r30, 0x00	; 0
    5288:	29 f4       	brne	.+10     	; 0x5294 <free+0x100>
    528a:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <__flp+0x1>
    528e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__flp>
    5292:	02 c0       	rjmp	.+4      	; 0x5298 <free+0x104>
    5294:	13 82       	std	Z+3, r1	; 0x03
    5296:	12 82       	std	Z+2, r1	; 0x02
    5298:	b0 93 6d 05 	sts	0x056D, r27	; 0x80056d <__brkval+0x1>
    529c:	a0 93 6c 05 	sts	0x056C, r26	; 0x80056c <__brkval>
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	08 95       	ret

000052a6 <atoi>:
    52a6:	fc 01       	movw	r30, r24
    52a8:	88 27       	eor	r24, r24
    52aa:	99 27       	eor	r25, r25
    52ac:	e8 94       	clt
    52ae:	21 91       	ld	r18, Z+
    52b0:	20 32       	cpi	r18, 0x20	; 32
    52b2:	e9 f3       	breq	.-6      	; 0x52ae <atoi+0x8>
    52b4:	29 30       	cpi	r18, 0x09	; 9
    52b6:	10 f0       	brcs	.+4      	; 0x52bc <atoi+0x16>
    52b8:	2e 30       	cpi	r18, 0x0E	; 14
    52ba:	c8 f3       	brcs	.-14     	; 0x52ae <atoi+0x8>
    52bc:	2b 32       	cpi	r18, 0x2B	; 43
    52be:	41 f0       	breq	.+16     	; 0x52d0 <atoi+0x2a>
    52c0:	2d 32       	cpi	r18, 0x2D	; 45
    52c2:	39 f4       	brne	.+14     	; 0x52d2 <atoi+0x2c>
    52c4:	68 94       	set
    52c6:	04 c0       	rjmp	.+8      	; 0x52d0 <atoi+0x2a>
    52c8:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__mulhi_const_10>
    52cc:	82 0f       	add	r24, r18
    52ce:	91 1d       	adc	r25, r1
    52d0:	21 91       	ld	r18, Z+
    52d2:	20 53       	subi	r18, 0x30	; 48
    52d4:	2a 30       	cpi	r18, 0x0A	; 10
    52d6:	c0 f3       	brcs	.-16     	; 0x52c8 <atoi+0x22>
    52d8:	1e f4       	brtc	.+6      	; 0x52e0 <atoi+0x3a>
    52da:	90 95       	com	r25
    52dc:	81 95       	neg	r24
    52de:	9f 4f       	sbci	r25, 0xFF	; 255
    52e0:	08 95       	ret

000052e2 <atol>:
    52e2:	1f 93       	push	r17
    52e4:	fc 01       	movw	r30, r24
    52e6:	99 27       	eor	r25, r25
    52e8:	88 27       	eor	r24, r24
    52ea:	bc 01       	movw	r22, r24
    52ec:	e8 94       	clt
    52ee:	11 91       	ld	r17, Z+
    52f0:	10 32       	cpi	r17, 0x20	; 32
    52f2:	e9 f3       	breq	.-6      	; 0x52ee <atol+0xc>
    52f4:	19 30       	cpi	r17, 0x09	; 9
    52f6:	10 f0       	brcs	.+4      	; 0x52fc <atol+0x1a>
    52f8:	1e 30       	cpi	r17, 0x0E	; 14
    52fa:	c8 f3       	brcs	.-14     	; 0x52ee <atol+0xc>
    52fc:	1b 32       	cpi	r17, 0x2B	; 43
    52fe:	51 f0       	breq	.+20     	; 0x5314 <atol+0x32>
    5300:	1d 32       	cpi	r17, 0x2D	; 45
    5302:	49 f4       	brne	.+18     	; 0x5316 <atol+0x34>
    5304:	68 94       	set
    5306:	06 c0       	rjmp	.+12     	; 0x5314 <atol+0x32>
    5308:	0e 94 c1 29 	call	0x5382	; 0x5382 <__mulsi_const_10>
    530c:	61 0f       	add	r22, r17
    530e:	71 1d       	adc	r23, r1
    5310:	81 1d       	adc	r24, r1
    5312:	91 1d       	adc	r25, r1
    5314:	11 91       	ld	r17, Z+
    5316:	10 53       	subi	r17, 0x30	; 48
    5318:	1a 30       	cpi	r17, 0x0A	; 10
    531a:	b0 f3       	brcs	.-20     	; 0x5308 <atol+0x26>
    531c:	3e f4       	brtc	.+14     	; 0x532c <atol+0x4a>
    531e:	90 95       	com	r25
    5320:	80 95       	com	r24
    5322:	70 95       	com	r23
    5324:	61 95       	neg	r22
    5326:	7f 4f       	sbci	r23, 0xFF	; 255
    5328:	8f 4f       	sbci	r24, 0xFF	; 255
    532a:	9f 4f       	sbci	r25, 0xFF	; 255
    532c:	1f 91       	pop	r17
    532e:	08 95       	ret

00005330 <toupper>:
    5330:	91 11       	cpse	r25, r1
    5332:	08 95       	ret
    5334:	81 56       	subi	r24, 0x61	; 97
    5336:	8a 51       	subi	r24, 0x1A	; 26
    5338:	08 f4       	brcc	.+2      	; 0x533c <toupper+0xc>
    533a:	80 52       	subi	r24, 0x20	; 32
    533c:	85 58       	subi	r24, 0x85	; 133
    533e:	08 95       	ret

00005340 <strcat>:
    5340:	fb 01       	movw	r30, r22
    5342:	dc 01       	movw	r26, r24
    5344:	0d 90       	ld	r0, X+
    5346:	00 20       	and	r0, r0
    5348:	e9 f7       	brne	.-6      	; 0x5344 <strcat+0x4>
    534a:	11 97       	sbiw	r26, 0x01	; 1
    534c:	01 90       	ld	r0, Z+
    534e:	0d 92       	st	X+, r0
    5350:	00 20       	and	r0, r0
    5352:	e1 f7       	brne	.-8      	; 0x534c <strcat+0xc>
    5354:	08 95       	ret

00005356 <strcpy>:
    5356:	fb 01       	movw	r30, r22
    5358:	dc 01       	movw	r26, r24
    535a:	01 90       	ld	r0, Z+
    535c:	0d 92       	st	X+, r0
    535e:	00 20       	and	r0, r0
    5360:	e1 f7       	brne	.-8      	; 0x535a <strcpy+0x4>
    5362:	08 95       	ret

00005364 <strncpy>:
    5364:	fb 01       	movw	r30, r22
    5366:	dc 01       	movw	r26, r24
    5368:	41 50       	subi	r20, 0x01	; 1
    536a:	50 40       	sbci	r21, 0x00	; 0
    536c:	48 f0       	brcs	.+18     	; 0x5380 <strncpy+0x1c>
    536e:	01 90       	ld	r0, Z+
    5370:	0d 92       	st	X+, r0
    5372:	00 20       	and	r0, r0
    5374:	c9 f7       	brne	.-14     	; 0x5368 <strncpy+0x4>
    5376:	01 c0       	rjmp	.+2      	; 0x537a <strncpy+0x16>
    5378:	1d 92       	st	X+, r1
    537a:	41 50       	subi	r20, 0x01	; 1
    537c:	50 40       	sbci	r21, 0x00	; 0
    537e:	e0 f7       	brcc	.-8      	; 0x5378 <strncpy+0x14>
    5380:	08 95       	ret

00005382 <__mulsi_const_10>:
    5382:	59 2f       	mov	r21, r25
    5384:	48 2f       	mov	r20, r24
    5386:	37 2f       	mov	r19, r23
    5388:	26 2f       	mov	r18, r22
    538a:	66 0f       	add	r22, r22
    538c:	77 1f       	adc	r23, r23
    538e:	88 1f       	adc	r24, r24
    5390:	99 1f       	adc	r25, r25
    5392:	66 0f       	add	r22, r22
    5394:	77 1f       	adc	r23, r23
    5396:	88 1f       	adc	r24, r24
    5398:	99 1f       	adc	r25, r25
    539a:	62 0f       	add	r22, r18
    539c:	73 1f       	adc	r23, r19
    539e:	84 1f       	adc	r24, r20
    53a0:	95 1f       	adc	r25, r21
    53a2:	66 0f       	add	r22, r22
    53a4:	77 1f       	adc	r23, r23
    53a6:	88 1f       	adc	r24, r24
    53a8:	99 1f       	adc	r25, r25
    53aa:	08 95       	ret

000053ac <__mulhi_const_10>:
    53ac:	7a e0       	ldi	r23, 0x0A	; 10
    53ae:	97 9f       	mul	r25, r23
    53b0:	90 2d       	mov	r25, r0
    53b2:	87 9f       	mul	r24, r23
    53b4:	80 2d       	mov	r24, r0
    53b6:	91 0d       	add	r25, r1
    53b8:	11 24       	eor	r1, r1
    53ba:	08 95       	ret

000053bc <sprintf>:
    53bc:	ae e0       	ldi	r26, 0x0E	; 14
    53be:	b0 e0       	ldi	r27, 0x00	; 0
    53c0:	e4 ee       	ldi	r30, 0xE4	; 228
    53c2:	f9 e2       	ldi	r31, 0x29	; 41
    53c4:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <__prologue_saves__+0x1c>
    53c8:	0d 89       	ldd	r16, Y+21	; 0x15
    53ca:	1e 89       	ldd	r17, Y+22	; 0x16
    53cc:	86 e0       	ldi	r24, 0x06	; 6
    53ce:	8c 83       	std	Y+4, r24	; 0x04
    53d0:	1a 83       	std	Y+2, r17	; 0x02
    53d2:	09 83       	std	Y+1, r16	; 0x01
    53d4:	8f ef       	ldi	r24, 0xFF	; 255
    53d6:	9f e7       	ldi	r25, 0x7F	; 127
    53d8:	9e 83       	std	Y+6, r25	; 0x06
    53da:	8d 83       	std	Y+5, r24	; 0x05
    53dc:	ae 01       	movw	r20, r28
    53de:	47 5e       	subi	r20, 0xE7	; 231
    53e0:	5f 4f       	sbci	r21, 0xFF	; 255
    53e2:	6f 89       	ldd	r22, Y+23	; 0x17
    53e4:	78 8d       	ldd	r23, Y+24	; 0x18
    53e6:	ce 01       	movw	r24, r28
    53e8:	01 96       	adiw	r24, 0x01	; 1
    53ea:	0e 94 00 2a 	call	0x5400	; 0x5400 <vfprintf>
    53ee:	ef 81       	ldd	r30, Y+7	; 0x07
    53f0:	f8 85       	ldd	r31, Y+8	; 0x08
    53f2:	e0 0f       	add	r30, r16
    53f4:	f1 1f       	adc	r31, r17
    53f6:	10 82       	st	Z, r1
    53f8:	2e 96       	adiw	r28, 0x0e	; 14
    53fa:	e4 e0       	ldi	r30, 0x04	; 4
    53fc:	0c 94 03 2d 	jmp	0x5a06	; 0x5a06 <__epilogue_restores__+0x1c>

00005400 <vfprintf>:
    5400:	ab e0       	ldi	r26, 0x0B	; 11
    5402:	b0 e0       	ldi	r27, 0x00	; 0
    5404:	e6 e0       	ldi	r30, 0x06	; 6
    5406:	fa e2       	ldi	r31, 0x2A	; 42
    5408:	0c 94 d9 2c 	jmp	0x59b2	; 0x59b2 <__prologue_saves__>
    540c:	6c 01       	movw	r12, r24
    540e:	7b 01       	movw	r14, r22
    5410:	8a 01       	movw	r16, r20
    5412:	fc 01       	movw	r30, r24
    5414:	17 82       	std	Z+7, r1	; 0x07
    5416:	16 82       	std	Z+6, r1	; 0x06
    5418:	83 81       	ldd	r24, Z+3	; 0x03
    541a:	81 ff       	sbrs	r24, 1
    541c:	cc c1       	rjmp	.+920    	; 0x57b6 <vfprintf+0x3b6>
    541e:	ce 01       	movw	r24, r28
    5420:	01 96       	adiw	r24, 0x01	; 1
    5422:	3c 01       	movw	r6, r24
    5424:	f6 01       	movw	r30, r12
    5426:	93 81       	ldd	r25, Z+3	; 0x03
    5428:	f7 01       	movw	r30, r14
    542a:	93 fd       	sbrc	r25, 3
    542c:	85 91       	lpm	r24, Z+
    542e:	93 ff       	sbrs	r25, 3
    5430:	81 91       	ld	r24, Z+
    5432:	7f 01       	movw	r14, r30
    5434:	88 23       	and	r24, r24
    5436:	09 f4       	brne	.+2      	; 0x543a <vfprintf+0x3a>
    5438:	ba c1       	rjmp	.+884    	; 0x57ae <vfprintf+0x3ae>
    543a:	85 32       	cpi	r24, 0x25	; 37
    543c:	39 f4       	brne	.+14     	; 0x544c <vfprintf+0x4c>
    543e:	93 fd       	sbrc	r25, 3
    5440:	85 91       	lpm	r24, Z+
    5442:	93 ff       	sbrs	r25, 3
    5444:	81 91       	ld	r24, Z+
    5446:	7f 01       	movw	r14, r30
    5448:	85 32       	cpi	r24, 0x25	; 37
    544a:	29 f4       	brne	.+10     	; 0x5456 <vfprintf+0x56>
    544c:	b6 01       	movw	r22, r12
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    5454:	e7 cf       	rjmp	.-50     	; 0x5424 <vfprintf+0x24>
    5456:	91 2c       	mov	r9, r1
    5458:	21 2c       	mov	r2, r1
    545a:	31 2c       	mov	r3, r1
    545c:	ff e1       	ldi	r31, 0x1F	; 31
    545e:	f3 15       	cp	r31, r3
    5460:	d8 f0       	brcs	.+54     	; 0x5498 <vfprintf+0x98>
    5462:	8b 32       	cpi	r24, 0x2B	; 43
    5464:	79 f0       	breq	.+30     	; 0x5484 <vfprintf+0x84>
    5466:	38 f4       	brcc	.+14     	; 0x5476 <vfprintf+0x76>
    5468:	80 32       	cpi	r24, 0x20	; 32
    546a:	79 f0       	breq	.+30     	; 0x548a <vfprintf+0x8a>
    546c:	83 32       	cpi	r24, 0x23	; 35
    546e:	a1 f4       	brne	.+40     	; 0x5498 <vfprintf+0x98>
    5470:	23 2d       	mov	r18, r3
    5472:	20 61       	ori	r18, 0x10	; 16
    5474:	1d c0       	rjmp	.+58     	; 0x54b0 <vfprintf+0xb0>
    5476:	8d 32       	cpi	r24, 0x2D	; 45
    5478:	61 f0       	breq	.+24     	; 0x5492 <vfprintf+0x92>
    547a:	80 33       	cpi	r24, 0x30	; 48
    547c:	69 f4       	brne	.+26     	; 0x5498 <vfprintf+0x98>
    547e:	23 2d       	mov	r18, r3
    5480:	21 60       	ori	r18, 0x01	; 1
    5482:	16 c0       	rjmp	.+44     	; 0x54b0 <vfprintf+0xb0>
    5484:	83 2d       	mov	r24, r3
    5486:	82 60       	ori	r24, 0x02	; 2
    5488:	38 2e       	mov	r3, r24
    548a:	e3 2d       	mov	r30, r3
    548c:	e4 60       	ori	r30, 0x04	; 4
    548e:	3e 2e       	mov	r3, r30
    5490:	2a c0       	rjmp	.+84     	; 0x54e6 <vfprintf+0xe6>
    5492:	f3 2d       	mov	r31, r3
    5494:	f8 60       	ori	r31, 0x08	; 8
    5496:	1d c0       	rjmp	.+58     	; 0x54d2 <vfprintf+0xd2>
    5498:	37 fc       	sbrc	r3, 7
    549a:	2d c0       	rjmp	.+90     	; 0x54f6 <vfprintf+0xf6>
    549c:	20 ed       	ldi	r18, 0xD0	; 208
    549e:	28 0f       	add	r18, r24
    54a0:	2a 30       	cpi	r18, 0x0A	; 10
    54a2:	40 f0       	brcs	.+16     	; 0x54b4 <vfprintf+0xb4>
    54a4:	8e 32       	cpi	r24, 0x2E	; 46
    54a6:	b9 f4       	brne	.+46     	; 0x54d6 <vfprintf+0xd6>
    54a8:	36 fc       	sbrc	r3, 6
    54aa:	81 c1       	rjmp	.+770    	; 0x57ae <vfprintf+0x3ae>
    54ac:	23 2d       	mov	r18, r3
    54ae:	20 64       	ori	r18, 0x40	; 64
    54b0:	32 2e       	mov	r3, r18
    54b2:	19 c0       	rjmp	.+50     	; 0x54e6 <vfprintf+0xe6>
    54b4:	36 fe       	sbrs	r3, 6
    54b6:	06 c0       	rjmp	.+12     	; 0x54c4 <vfprintf+0xc4>
    54b8:	8a e0       	ldi	r24, 0x0A	; 10
    54ba:	98 9e       	mul	r9, r24
    54bc:	20 0d       	add	r18, r0
    54be:	11 24       	eor	r1, r1
    54c0:	92 2e       	mov	r9, r18
    54c2:	11 c0       	rjmp	.+34     	; 0x54e6 <vfprintf+0xe6>
    54c4:	ea e0       	ldi	r30, 0x0A	; 10
    54c6:	2e 9e       	mul	r2, r30
    54c8:	20 0d       	add	r18, r0
    54ca:	11 24       	eor	r1, r1
    54cc:	22 2e       	mov	r2, r18
    54ce:	f3 2d       	mov	r31, r3
    54d0:	f0 62       	ori	r31, 0x20	; 32
    54d2:	3f 2e       	mov	r3, r31
    54d4:	08 c0       	rjmp	.+16     	; 0x54e6 <vfprintf+0xe6>
    54d6:	8c 36       	cpi	r24, 0x6C	; 108
    54d8:	21 f4       	brne	.+8      	; 0x54e2 <vfprintf+0xe2>
    54da:	83 2d       	mov	r24, r3
    54dc:	80 68       	ori	r24, 0x80	; 128
    54de:	38 2e       	mov	r3, r24
    54e0:	02 c0       	rjmp	.+4      	; 0x54e6 <vfprintf+0xe6>
    54e2:	88 36       	cpi	r24, 0x68	; 104
    54e4:	41 f4       	brne	.+16     	; 0x54f6 <vfprintf+0xf6>
    54e6:	f7 01       	movw	r30, r14
    54e8:	93 fd       	sbrc	r25, 3
    54ea:	85 91       	lpm	r24, Z+
    54ec:	93 ff       	sbrs	r25, 3
    54ee:	81 91       	ld	r24, Z+
    54f0:	7f 01       	movw	r14, r30
    54f2:	81 11       	cpse	r24, r1
    54f4:	b3 cf       	rjmp	.-154    	; 0x545c <vfprintf+0x5c>
    54f6:	98 2f       	mov	r25, r24
    54f8:	9f 7d       	andi	r25, 0xDF	; 223
    54fa:	95 54       	subi	r25, 0x45	; 69
    54fc:	93 30       	cpi	r25, 0x03	; 3
    54fe:	28 f4       	brcc	.+10     	; 0x550a <vfprintf+0x10a>
    5500:	0c 5f       	subi	r16, 0xFC	; 252
    5502:	1f 4f       	sbci	r17, 0xFF	; 255
    5504:	9f e3       	ldi	r25, 0x3F	; 63
    5506:	99 83       	std	Y+1, r25	; 0x01
    5508:	0d c0       	rjmp	.+26     	; 0x5524 <vfprintf+0x124>
    550a:	83 36       	cpi	r24, 0x63	; 99
    550c:	31 f0       	breq	.+12     	; 0x551a <vfprintf+0x11a>
    550e:	83 37       	cpi	r24, 0x73	; 115
    5510:	71 f0       	breq	.+28     	; 0x552e <vfprintf+0x12e>
    5512:	83 35       	cpi	r24, 0x53	; 83
    5514:	09 f0       	breq	.+2      	; 0x5518 <vfprintf+0x118>
    5516:	59 c0       	rjmp	.+178    	; 0x55ca <vfprintf+0x1ca>
    5518:	21 c0       	rjmp	.+66     	; 0x555c <vfprintf+0x15c>
    551a:	f8 01       	movw	r30, r16
    551c:	80 81       	ld	r24, Z
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	0e 5f       	subi	r16, 0xFE	; 254
    5522:	1f 4f       	sbci	r17, 0xFF	; 255
    5524:	88 24       	eor	r8, r8
    5526:	83 94       	inc	r8
    5528:	91 2c       	mov	r9, r1
    552a:	53 01       	movw	r10, r6
    552c:	13 c0       	rjmp	.+38     	; 0x5554 <vfprintf+0x154>
    552e:	28 01       	movw	r4, r16
    5530:	f2 e0       	ldi	r31, 0x02	; 2
    5532:	4f 0e       	add	r4, r31
    5534:	51 1c       	adc	r5, r1
    5536:	f8 01       	movw	r30, r16
    5538:	a0 80       	ld	r10, Z
    553a:	b1 80       	ldd	r11, Z+1	; 0x01
    553c:	36 fe       	sbrs	r3, 6
    553e:	03 c0       	rjmp	.+6      	; 0x5546 <vfprintf+0x146>
    5540:	69 2d       	mov	r22, r9
    5542:	70 e0       	ldi	r23, 0x00	; 0
    5544:	02 c0       	rjmp	.+4      	; 0x554a <vfprintf+0x14a>
    5546:	6f ef       	ldi	r22, 0xFF	; 255
    5548:	7f ef       	ldi	r23, 0xFF	; 255
    554a:	c5 01       	movw	r24, r10
    554c:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <strnlen>
    5550:	4c 01       	movw	r8, r24
    5552:	82 01       	movw	r16, r4
    5554:	f3 2d       	mov	r31, r3
    5556:	ff 77       	andi	r31, 0x7F	; 127
    5558:	3f 2e       	mov	r3, r31
    555a:	16 c0       	rjmp	.+44     	; 0x5588 <vfprintf+0x188>
    555c:	28 01       	movw	r4, r16
    555e:	22 e0       	ldi	r18, 0x02	; 2
    5560:	42 0e       	add	r4, r18
    5562:	51 1c       	adc	r5, r1
    5564:	f8 01       	movw	r30, r16
    5566:	a0 80       	ld	r10, Z
    5568:	b1 80       	ldd	r11, Z+1	; 0x01
    556a:	36 fe       	sbrs	r3, 6
    556c:	03 c0       	rjmp	.+6      	; 0x5574 <vfprintf+0x174>
    556e:	69 2d       	mov	r22, r9
    5570:	70 e0       	ldi	r23, 0x00	; 0
    5572:	02 c0       	rjmp	.+4      	; 0x5578 <vfprintf+0x178>
    5574:	6f ef       	ldi	r22, 0xFF	; 255
    5576:	7f ef       	ldi	r23, 0xFF	; 255
    5578:	c5 01       	movw	r24, r10
    557a:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <strnlen_P>
    557e:	4c 01       	movw	r8, r24
    5580:	f3 2d       	mov	r31, r3
    5582:	f0 68       	ori	r31, 0x80	; 128
    5584:	3f 2e       	mov	r3, r31
    5586:	82 01       	movw	r16, r4
    5588:	33 fc       	sbrc	r3, 3
    558a:	1b c0       	rjmp	.+54     	; 0x55c2 <vfprintf+0x1c2>
    558c:	82 2d       	mov	r24, r2
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	88 16       	cp	r8, r24
    5592:	99 06       	cpc	r9, r25
    5594:	b0 f4       	brcc	.+44     	; 0x55c2 <vfprintf+0x1c2>
    5596:	b6 01       	movw	r22, r12
    5598:	80 e2       	ldi	r24, 0x20	; 32
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    55a0:	2a 94       	dec	r2
    55a2:	f4 cf       	rjmp	.-24     	; 0x558c <vfprintf+0x18c>
    55a4:	f5 01       	movw	r30, r10
    55a6:	37 fc       	sbrc	r3, 7
    55a8:	85 91       	lpm	r24, Z+
    55aa:	37 fe       	sbrs	r3, 7
    55ac:	81 91       	ld	r24, Z+
    55ae:	5f 01       	movw	r10, r30
    55b0:	b6 01       	movw	r22, r12
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    55b8:	21 10       	cpse	r2, r1
    55ba:	2a 94       	dec	r2
    55bc:	21 e0       	ldi	r18, 0x01	; 1
    55be:	82 1a       	sub	r8, r18
    55c0:	91 08       	sbc	r9, r1
    55c2:	81 14       	cp	r8, r1
    55c4:	91 04       	cpc	r9, r1
    55c6:	71 f7       	brne	.-36     	; 0x55a4 <vfprintf+0x1a4>
    55c8:	e8 c0       	rjmp	.+464    	; 0x579a <vfprintf+0x39a>
    55ca:	84 36       	cpi	r24, 0x64	; 100
    55cc:	11 f0       	breq	.+4      	; 0x55d2 <vfprintf+0x1d2>
    55ce:	89 36       	cpi	r24, 0x69	; 105
    55d0:	41 f5       	brne	.+80     	; 0x5622 <vfprintf+0x222>
    55d2:	f8 01       	movw	r30, r16
    55d4:	37 fe       	sbrs	r3, 7
    55d6:	07 c0       	rjmp	.+14     	; 0x55e6 <vfprintf+0x1e6>
    55d8:	60 81       	ld	r22, Z
    55da:	71 81       	ldd	r23, Z+1	; 0x01
    55dc:	82 81       	ldd	r24, Z+2	; 0x02
    55de:	93 81       	ldd	r25, Z+3	; 0x03
    55e0:	0c 5f       	subi	r16, 0xFC	; 252
    55e2:	1f 4f       	sbci	r17, 0xFF	; 255
    55e4:	08 c0       	rjmp	.+16     	; 0x55f6 <vfprintf+0x1f6>
    55e6:	60 81       	ld	r22, Z
    55e8:	71 81       	ldd	r23, Z+1	; 0x01
    55ea:	07 2e       	mov	r0, r23
    55ec:	00 0c       	add	r0, r0
    55ee:	88 0b       	sbc	r24, r24
    55f0:	99 0b       	sbc	r25, r25
    55f2:	0e 5f       	subi	r16, 0xFE	; 254
    55f4:	1f 4f       	sbci	r17, 0xFF	; 255
    55f6:	f3 2d       	mov	r31, r3
    55f8:	ff 76       	andi	r31, 0x6F	; 111
    55fa:	3f 2e       	mov	r3, r31
    55fc:	97 ff       	sbrs	r25, 7
    55fe:	09 c0       	rjmp	.+18     	; 0x5612 <vfprintf+0x212>
    5600:	90 95       	com	r25
    5602:	80 95       	com	r24
    5604:	70 95       	com	r23
    5606:	61 95       	neg	r22
    5608:	7f 4f       	sbci	r23, 0xFF	; 255
    560a:	8f 4f       	sbci	r24, 0xFF	; 255
    560c:	9f 4f       	sbci	r25, 0xFF	; 255
    560e:	f0 68       	ori	r31, 0x80	; 128
    5610:	3f 2e       	mov	r3, r31
    5612:	2a e0       	ldi	r18, 0x0A	; 10
    5614:	30 e0       	ldi	r19, 0x00	; 0
    5616:	a3 01       	movw	r20, r6
    5618:	0e 94 33 2c 	call	0x5866	; 0x5866 <__ultoa_invert>
    561c:	88 2e       	mov	r8, r24
    561e:	86 18       	sub	r8, r6
    5620:	45 c0       	rjmp	.+138    	; 0x56ac <vfprintf+0x2ac>
    5622:	85 37       	cpi	r24, 0x75	; 117
    5624:	31 f4       	brne	.+12     	; 0x5632 <vfprintf+0x232>
    5626:	23 2d       	mov	r18, r3
    5628:	2f 7e       	andi	r18, 0xEF	; 239
    562a:	b2 2e       	mov	r11, r18
    562c:	2a e0       	ldi	r18, 0x0A	; 10
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	25 c0       	rjmp	.+74     	; 0x567c <vfprintf+0x27c>
    5632:	93 2d       	mov	r25, r3
    5634:	99 7f       	andi	r25, 0xF9	; 249
    5636:	b9 2e       	mov	r11, r25
    5638:	8f 36       	cpi	r24, 0x6F	; 111
    563a:	c1 f0       	breq	.+48     	; 0x566c <vfprintf+0x26c>
    563c:	18 f4       	brcc	.+6      	; 0x5644 <vfprintf+0x244>
    563e:	88 35       	cpi	r24, 0x58	; 88
    5640:	79 f0       	breq	.+30     	; 0x5660 <vfprintf+0x260>
    5642:	b5 c0       	rjmp	.+362    	; 0x57ae <vfprintf+0x3ae>
    5644:	80 37       	cpi	r24, 0x70	; 112
    5646:	19 f0       	breq	.+6      	; 0x564e <vfprintf+0x24e>
    5648:	88 37       	cpi	r24, 0x78	; 120
    564a:	21 f0       	breq	.+8      	; 0x5654 <vfprintf+0x254>
    564c:	b0 c0       	rjmp	.+352    	; 0x57ae <vfprintf+0x3ae>
    564e:	e9 2f       	mov	r30, r25
    5650:	e0 61       	ori	r30, 0x10	; 16
    5652:	be 2e       	mov	r11, r30
    5654:	b4 fe       	sbrs	r11, 4
    5656:	0d c0       	rjmp	.+26     	; 0x5672 <vfprintf+0x272>
    5658:	fb 2d       	mov	r31, r11
    565a:	f4 60       	ori	r31, 0x04	; 4
    565c:	bf 2e       	mov	r11, r31
    565e:	09 c0       	rjmp	.+18     	; 0x5672 <vfprintf+0x272>
    5660:	34 fe       	sbrs	r3, 4
    5662:	0a c0       	rjmp	.+20     	; 0x5678 <vfprintf+0x278>
    5664:	29 2f       	mov	r18, r25
    5666:	26 60       	ori	r18, 0x06	; 6
    5668:	b2 2e       	mov	r11, r18
    566a:	06 c0       	rjmp	.+12     	; 0x5678 <vfprintf+0x278>
    566c:	28 e0       	ldi	r18, 0x08	; 8
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	05 c0       	rjmp	.+10     	; 0x567c <vfprintf+0x27c>
    5672:	20 e1       	ldi	r18, 0x10	; 16
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	02 c0       	rjmp	.+4      	; 0x567c <vfprintf+0x27c>
    5678:	20 e1       	ldi	r18, 0x10	; 16
    567a:	32 e0       	ldi	r19, 0x02	; 2
    567c:	f8 01       	movw	r30, r16
    567e:	b7 fe       	sbrs	r11, 7
    5680:	07 c0       	rjmp	.+14     	; 0x5690 <vfprintf+0x290>
    5682:	60 81       	ld	r22, Z
    5684:	71 81       	ldd	r23, Z+1	; 0x01
    5686:	82 81       	ldd	r24, Z+2	; 0x02
    5688:	93 81       	ldd	r25, Z+3	; 0x03
    568a:	0c 5f       	subi	r16, 0xFC	; 252
    568c:	1f 4f       	sbci	r17, 0xFF	; 255
    568e:	06 c0       	rjmp	.+12     	; 0x569c <vfprintf+0x29c>
    5690:	60 81       	ld	r22, Z
    5692:	71 81       	ldd	r23, Z+1	; 0x01
    5694:	80 e0       	ldi	r24, 0x00	; 0
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	0e 5f       	subi	r16, 0xFE	; 254
    569a:	1f 4f       	sbci	r17, 0xFF	; 255
    569c:	a3 01       	movw	r20, r6
    569e:	0e 94 33 2c 	call	0x5866	; 0x5866 <__ultoa_invert>
    56a2:	88 2e       	mov	r8, r24
    56a4:	86 18       	sub	r8, r6
    56a6:	fb 2d       	mov	r31, r11
    56a8:	ff 77       	andi	r31, 0x7F	; 127
    56aa:	3f 2e       	mov	r3, r31
    56ac:	36 fe       	sbrs	r3, 6
    56ae:	0d c0       	rjmp	.+26     	; 0x56ca <vfprintf+0x2ca>
    56b0:	23 2d       	mov	r18, r3
    56b2:	2e 7f       	andi	r18, 0xFE	; 254
    56b4:	a2 2e       	mov	r10, r18
    56b6:	89 14       	cp	r8, r9
    56b8:	58 f4       	brcc	.+22     	; 0x56d0 <vfprintf+0x2d0>
    56ba:	34 fe       	sbrs	r3, 4
    56bc:	0b c0       	rjmp	.+22     	; 0x56d4 <vfprintf+0x2d4>
    56be:	32 fc       	sbrc	r3, 2
    56c0:	09 c0       	rjmp	.+18     	; 0x56d4 <vfprintf+0x2d4>
    56c2:	83 2d       	mov	r24, r3
    56c4:	8e 7e       	andi	r24, 0xEE	; 238
    56c6:	a8 2e       	mov	r10, r24
    56c8:	05 c0       	rjmp	.+10     	; 0x56d4 <vfprintf+0x2d4>
    56ca:	b8 2c       	mov	r11, r8
    56cc:	a3 2c       	mov	r10, r3
    56ce:	03 c0       	rjmp	.+6      	; 0x56d6 <vfprintf+0x2d6>
    56d0:	b8 2c       	mov	r11, r8
    56d2:	01 c0       	rjmp	.+2      	; 0x56d6 <vfprintf+0x2d6>
    56d4:	b9 2c       	mov	r11, r9
    56d6:	a4 fe       	sbrs	r10, 4
    56d8:	0f c0       	rjmp	.+30     	; 0x56f8 <vfprintf+0x2f8>
    56da:	fe 01       	movw	r30, r28
    56dc:	e8 0d       	add	r30, r8
    56de:	f1 1d       	adc	r31, r1
    56e0:	80 81       	ld	r24, Z
    56e2:	80 33       	cpi	r24, 0x30	; 48
    56e4:	21 f4       	brne	.+8      	; 0x56ee <vfprintf+0x2ee>
    56e6:	9a 2d       	mov	r25, r10
    56e8:	99 7e       	andi	r25, 0xE9	; 233
    56ea:	a9 2e       	mov	r10, r25
    56ec:	09 c0       	rjmp	.+18     	; 0x5700 <vfprintf+0x300>
    56ee:	a2 fe       	sbrs	r10, 2
    56f0:	06 c0       	rjmp	.+12     	; 0x56fe <vfprintf+0x2fe>
    56f2:	b3 94       	inc	r11
    56f4:	b3 94       	inc	r11
    56f6:	04 c0       	rjmp	.+8      	; 0x5700 <vfprintf+0x300>
    56f8:	8a 2d       	mov	r24, r10
    56fa:	86 78       	andi	r24, 0x86	; 134
    56fc:	09 f0       	breq	.+2      	; 0x5700 <vfprintf+0x300>
    56fe:	b3 94       	inc	r11
    5700:	a3 fc       	sbrc	r10, 3
    5702:	11 c0       	rjmp	.+34     	; 0x5726 <vfprintf+0x326>
    5704:	a0 fe       	sbrs	r10, 0
    5706:	06 c0       	rjmp	.+12     	; 0x5714 <vfprintf+0x314>
    5708:	b2 14       	cp	r11, r2
    570a:	88 f4       	brcc	.+34     	; 0x572e <vfprintf+0x32e>
    570c:	28 0c       	add	r2, r8
    570e:	92 2c       	mov	r9, r2
    5710:	9b 18       	sub	r9, r11
    5712:	0e c0       	rjmp	.+28     	; 0x5730 <vfprintf+0x330>
    5714:	b2 14       	cp	r11, r2
    5716:	60 f4       	brcc	.+24     	; 0x5730 <vfprintf+0x330>
    5718:	b6 01       	movw	r22, r12
    571a:	80 e2       	ldi	r24, 0x20	; 32
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    5722:	b3 94       	inc	r11
    5724:	f7 cf       	rjmp	.-18     	; 0x5714 <vfprintf+0x314>
    5726:	b2 14       	cp	r11, r2
    5728:	18 f4       	brcc	.+6      	; 0x5730 <vfprintf+0x330>
    572a:	2b 18       	sub	r2, r11
    572c:	02 c0       	rjmp	.+4      	; 0x5732 <vfprintf+0x332>
    572e:	98 2c       	mov	r9, r8
    5730:	21 2c       	mov	r2, r1
    5732:	a4 fe       	sbrs	r10, 4
    5734:	10 c0       	rjmp	.+32     	; 0x5756 <vfprintf+0x356>
    5736:	b6 01       	movw	r22, r12
    5738:	80 e3       	ldi	r24, 0x30	; 48
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    5740:	a2 fe       	sbrs	r10, 2
    5742:	17 c0       	rjmp	.+46     	; 0x5772 <vfprintf+0x372>
    5744:	a1 fc       	sbrc	r10, 1
    5746:	03 c0       	rjmp	.+6      	; 0x574e <vfprintf+0x34e>
    5748:	88 e7       	ldi	r24, 0x78	; 120
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <vfprintf+0x352>
    574e:	88 e5       	ldi	r24, 0x58	; 88
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	b6 01       	movw	r22, r12
    5754:	0c c0       	rjmp	.+24     	; 0x576e <vfprintf+0x36e>
    5756:	8a 2d       	mov	r24, r10
    5758:	86 78       	andi	r24, 0x86	; 134
    575a:	59 f0       	breq	.+22     	; 0x5772 <vfprintf+0x372>
    575c:	a1 fe       	sbrs	r10, 1
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <vfprintf+0x364>
    5760:	8b e2       	ldi	r24, 0x2B	; 43
    5762:	01 c0       	rjmp	.+2      	; 0x5766 <vfprintf+0x366>
    5764:	80 e2       	ldi	r24, 0x20	; 32
    5766:	a7 fc       	sbrc	r10, 7
    5768:	8d e2       	ldi	r24, 0x2D	; 45
    576a:	b6 01       	movw	r22, r12
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    5772:	89 14       	cp	r8, r9
    5774:	38 f4       	brcc	.+14     	; 0x5784 <vfprintf+0x384>
    5776:	b6 01       	movw	r22, r12
    5778:	80 e3       	ldi	r24, 0x30	; 48
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    5780:	9a 94       	dec	r9
    5782:	f7 cf       	rjmp	.-18     	; 0x5772 <vfprintf+0x372>
    5784:	8a 94       	dec	r8
    5786:	f3 01       	movw	r30, r6
    5788:	e8 0d       	add	r30, r8
    578a:	f1 1d       	adc	r31, r1
    578c:	80 81       	ld	r24, Z
    578e:	b6 01       	movw	r22, r12
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    5796:	81 10       	cpse	r8, r1
    5798:	f5 cf       	rjmp	.-22     	; 0x5784 <vfprintf+0x384>
    579a:	22 20       	and	r2, r2
    579c:	09 f4       	brne	.+2      	; 0x57a0 <vfprintf+0x3a0>
    579e:	42 ce       	rjmp	.-892    	; 0x5424 <vfprintf+0x24>
    57a0:	b6 01       	movw	r22, r12
    57a2:	80 e2       	ldi	r24, 0x20	; 32
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <fputc>
    57aa:	2a 94       	dec	r2
    57ac:	f6 cf       	rjmp	.-20     	; 0x579a <vfprintf+0x39a>
    57ae:	f6 01       	movw	r30, r12
    57b0:	86 81       	ldd	r24, Z+6	; 0x06
    57b2:	97 81       	ldd	r25, Z+7	; 0x07
    57b4:	02 c0       	rjmp	.+4      	; 0x57ba <vfprintf+0x3ba>
    57b6:	8f ef       	ldi	r24, 0xFF	; 255
    57b8:	9f ef       	ldi	r25, 0xFF	; 255
    57ba:	2b 96       	adiw	r28, 0x0b	; 11
    57bc:	e2 e1       	ldi	r30, 0x12	; 18
    57be:	0c 94 f5 2c 	jmp	0x59ea	; 0x59ea <__epilogue_restores__>

000057c2 <strnlen_P>:
    57c2:	fc 01       	movw	r30, r24
    57c4:	05 90       	lpm	r0, Z+
    57c6:	61 50       	subi	r22, 0x01	; 1
    57c8:	70 40       	sbci	r23, 0x00	; 0
    57ca:	01 10       	cpse	r0, r1
    57cc:	d8 f7       	brcc	.-10     	; 0x57c4 <strnlen_P+0x2>
    57ce:	80 95       	com	r24
    57d0:	90 95       	com	r25
    57d2:	8e 0f       	add	r24, r30
    57d4:	9f 1f       	adc	r25, r31
    57d6:	08 95       	ret

000057d8 <strnlen>:
    57d8:	fc 01       	movw	r30, r24
    57da:	61 50       	subi	r22, 0x01	; 1
    57dc:	70 40       	sbci	r23, 0x00	; 0
    57de:	01 90       	ld	r0, Z+
    57e0:	01 10       	cpse	r0, r1
    57e2:	d8 f7       	brcc	.-10     	; 0x57da <strnlen+0x2>
    57e4:	80 95       	com	r24
    57e6:	90 95       	com	r25
    57e8:	8e 0f       	add	r24, r30
    57ea:	9f 1f       	adc	r25, r31
    57ec:	08 95       	ret

000057ee <fputc>:
    57ee:	0f 93       	push	r16
    57f0:	1f 93       	push	r17
    57f2:	cf 93       	push	r28
    57f4:	df 93       	push	r29
    57f6:	fb 01       	movw	r30, r22
    57f8:	23 81       	ldd	r18, Z+3	; 0x03
    57fa:	21 fd       	sbrc	r18, 1
    57fc:	03 c0       	rjmp	.+6      	; 0x5804 <fputc+0x16>
    57fe:	8f ef       	ldi	r24, 0xFF	; 255
    5800:	9f ef       	ldi	r25, 0xFF	; 255
    5802:	2c c0       	rjmp	.+88     	; 0x585c <fputc+0x6e>
    5804:	22 ff       	sbrs	r18, 2
    5806:	16 c0       	rjmp	.+44     	; 0x5834 <fputc+0x46>
    5808:	46 81       	ldd	r20, Z+6	; 0x06
    580a:	57 81       	ldd	r21, Z+7	; 0x07
    580c:	24 81       	ldd	r18, Z+4	; 0x04
    580e:	35 81       	ldd	r19, Z+5	; 0x05
    5810:	42 17       	cp	r20, r18
    5812:	53 07       	cpc	r21, r19
    5814:	44 f4       	brge	.+16     	; 0x5826 <fputc+0x38>
    5816:	a0 81       	ld	r26, Z
    5818:	b1 81       	ldd	r27, Z+1	; 0x01
    581a:	9d 01       	movw	r18, r26
    581c:	2f 5f       	subi	r18, 0xFF	; 255
    581e:	3f 4f       	sbci	r19, 0xFF	; 255
    5820:	31 83       	std	Z+1, r19	; 0x01
    5822:	20 83       	st	Z, r18
    5824:	8c 93       	st	X, r24
    5826:	26 81       	ldd	r18, Z+6	; 0x06
    5828:	37 81       	ldd	r19, Z+7	; 0x07
    582a:	2f 5f       	subi	r18, 0xFF	; 255
    582c:	3f 4f       	sbci	r19, 0xFF	; 255
    582e:	37 83       	std	Z+7, r19	; 0x07
    5830:	26 83       	std	Z+6, r18	; 0x06
    5832:	14 c0       	rjmp	.+40     	; 0x585c <fputc+0x6e>
    5834:	8b 01       	movw	r16, r22
    5836:	ec 01       	movw	r28, r24
    5838:	fb 01       	movw	r30, r22
    583a:	00 84       	ldd	r0, Z+8	; 0x08
    583c:	f1 85       	ldd	r31, Z+9	; 0x09
    583e:	e0 2d       	mov	r30, r0
    5840:	09 95       	icall
    5842:	89 2b       	or	r24, r25
    5844:	e1 f6       	brne	.-72     	; 0x57fe <fputc+0x10>
    5846:	d8 01       	movw	r26, r16
    5848:	16 96       	adiw	r26, 0x06	; 6
    584a:	8d 91       	ld	r24, X+
    584c:	9c 91       	ld	r25, X
    584e:	17 97       	sbiw	r26, 0x07	; 7
    5850:	01 96       	adiw	r24, 0x01	; 1
    5852:	17 96       	adiw	r26, 0x07	; 7
    5854:	9c 93       	st	X, r25
    5856:	8e 93       	st	-X, r24
    5858:	16 97       	sbiw	r26, 0x06	; 6
    585a:	ce 01       	movw	r24, r28
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	1f 91       	pop	r17
    5862:	0f 91       	pop	r16
    5864:	08 95       	ret

00005866 <__ultoa_invert>:
    5866:	fa 01       	movw	r30, r20
    5868:	aa 27       	eor	r26, r26
    586a:	28 30       	cpi	r18, 0x08	; 8
    586c:	51 f1       	breq	.+84     	; 0x58c2 <__ultoa_invert+0x5c>
    586e:	20 31       	cpi	r18, 0x10	; 16
    5870:	81 f1       	breq	.+96     	; 0x58d2 <__ultoa_invert+0x6c>
    5872:	e8 94       	clt
    5874:	6f 93       	push	r22
    5876:	6e 7f       	andi	r22, 0xFE	; 254
    5878:	6e 5f       	subi	r22, 0xFE	; 254
    587a:	7f 4f       	sbci	r23, 0xFF	; 255
    587c:	8f 4f       	sbci	r24, 0xFF	; 255
    587e:	9f 4f       	sbci	r25, 0xFF	; 255
    5880:	af 4f       	sbci	r26, 0xFF	; 255
    5882:	b1 e0       	ldi	r27, 0x01	; 1
    5884:	3e d0       	rcall	.+124    	; 0x5902 <__ultoa_invert+0x9c>
    5886:	b4 e0       	ldi	r27, 0x04	; 4
    5888:	3c d0       	rcall	.+120    	; 0x5902 <__ultoa_invert+0x9c>
    588a:	67 0f       	add	r22, r23
    588c:	78 1f       	adc	r23, r24
    588e:	89 1f       	adc	r24, r25
    5890:	9a 1f       	adc	r25, r26
    5892:	a1 1d       	adc	r26, r1
    5894:	68 0f       	add	r22, r24
    5896:	79 1f       	adc	r23, r25
    5898:	8a 1f       	adc	r24, r26
    589a:	91 1d       	adc	r25, r1
    589c:	a1 1d       	adc	r26, r1
    589e:	6a 0f       	add	r22, r26
    58a0:	71 1d       	adc	r23, r1
    58a2:	81 1d       	adc	r24, r1
    58a4:	91 1d       	adc	r25, r1
    58a6:	a1 1d       	adc	r26, r1
    58a8:	20 d0       	rcall	.+64     	; 0x58ea <__ultoa_invert+0x84>
    58aa:	09 f4       	brne	.+2      	; 0x58ae <__ultoa_invert+0x48>
    58ac:	68 94       	set
    58ae:	3f 91       	pop	r19
    58b0:	2a e0       	ldi	r18, 0x0A	; 10
    58b2:	26 9f       	mul	r18, r22
    58b4:	11 24       	eor	r1, r1
    58b6:	30 19       	sub	r19, r0
    58b8:	30 5d       	subi	r19, 0xD0	; 208
    58ba:	31 93       	st	Z+, r19
    58bc:	de f6       	brtc	.-74     	; 0x5874 <__ultoa_invert+0xe>
    58be:	cf 01       	movw	r24, r30
    58c0:	08 95       	ret
    58c2:	46 2f       	mov	r20, r22
    58c4:	47 70       	andi	r20, 0x07	; 7
    58c6:	40 5d       	subi	r20, 0xD0	; 208
    58c8:	41 93       	st	Z+, r20
    58ca:	b3 e0       	ldi	r27, 0x03	; 3
    58cc:	0f d0       	rcall	.+30     	; 0x58ec <__ultoa_invert+0x86>
    58ce:	c9 f7       	brne	.-14     	; 0x58c2 <__ultoa_invert+0x5c>
    58d0:	f6 cf       	rjmp	.-20     	; 0x58be <__ultoa_invert+0x58>
    58d2:	46 2f       	mov	r20, r22
    58d4:	4f 70       	andi	r20, 0x0F	; 15
    58d6:	40 5d       	subi	r20, 0xD0	; 208
    58d8:	4a 33       	cpi	r20, 0x3A	; 58
    58da:	18 f0       	brcs	.+6      	; 0x58e2 <__ultoa_invert+0x7c>
    58dc:	49 5d       	subi	r20, 0xD9	; 217
    58de:	31 fd       	sbrc	r19, 1
    58e0:	40 52       	subi	r20, 0x20	; 32
    58e2:	41 93       	st	Z+, r20
    58e4:	02 d0       	rcall	.+4      	; 0x58ea <__ultoa_invert+0x84>
    58e6:	a9 f7       	brne	.-22     	; 0x58d2 <__ultoa_invert+0x6c>
    58e8:	ea cf       	rjmp	.-44     	; 0x58be <__ultoa_invert+0x58>
    58ea:	b4 e0       	ldi	r27, 0x04	; 4
    58ec:	a6 95       	lsr	r26
    58ee:	97 95       	ror	r25
    58f0:	87 95       	ror	r24
    58f2:	77 95       	ror	r23
    58f4:	67 95       	ror	r22
    58f6:	ba 95       	dec	r27
    58f8:	c9 f7       	brne	.-14     	; 0x58ec <__ultoa_invert+0x86>
    58fa:	00 97       	sbiw	r24, 0x00	; 0
    58fc:	61 05       	cpc	r22, r1
    58fe:	71 05       	cpc	r23, r1
    5900:	08 95       	ret
    5902:	9b 01       	movw	r18, r22
    5904:	ac 01       	movw	r20, r24
    5906:	0a 2e       	mov	r0, r26
    5908:	06 94       	lsr	r0
    590a:	57 95       	ror	r21
    590c:	47 95       	ror	r20
    590e:	37 95       	ror	r19
    5910:	27 95       	ror	r18
    5912:	ba 95       	dec	r27
    5914:	c9 f7       	brne	.-14     	; 0x5908 <__ultoa_invert+0xa2>
    5916:	62 0f       	add	r22, r18
    5918:	73 1f       	adc	r23, r19
    591a:	84 1f       	adc	r24, r20
    591c:	95 1f       	adc	r25, r21
    591e:	a0 1d       	adc	r26, r0
    5920:	08 95       	ret

00005922 <eeprom_read_byte>:
    5922:	f9 99       	sbic	0x1f, 1	; 31
    5924:	fe cf       	rjmp	.-4      	; 0x5922 <eeprom_read_byte>
    5926:	92 bd       	out	0x22, r25	; 34
    5928:	81 bd       	out	0x21, r24	; 33
    592a:	f8 9a       	sbi	0x1f, 0	; 31
    592c:	99 27       	eor	r25, r25
    592e:	80 b5       	in	r24, 0x20	; 32
    5930:	08 95       	ret

00005932 <eeprom_read_dword>:
    5932:	a6 e1       	ldi	r26, 0x16	; 22
    5934:	b0 e0       	ldi	r27, 0x00	; 0
    5936:	44 e0       	ldi	r20, 0x04	; 4
    5938:	50 e0       	ldi	r21, 0x00	; 0
    593a:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <eeprom_read_blraw>

0000593e <eeprom_read_word>:
    593e:	a8 e1       	ldi	r26, 0x18	; 24
    5940:	b0 e0       	ldi	r27, 0x00	; 0
    5942:	42 e0       	ldi	r20, 0x02	; 2
    5944:	50 e0       	ldi	r21, 0x00	; 0
    5946:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <eeprom_read_blraw>

0000594a <eeprom_update_byte>:
    594a:	26 2f       	mov	r18, r22

0000594c <eeprom_update_r18>:
    594c:	f9 99       	sbic	0x1f, 1	; 31
    594e:	fe cf       	rjmp	.-4      	; 0x594c <eeprom_update_r18>
    5950:	92 bd       	out	0x22, r25	; 34
    5952:	81 bd       	out	0x21, r24	; 33
    5954:	f8 9a       	sbi	0x1f, 0	; 31
    5956:	01 97       	sbiw	r24, 0x01	; 1
    5958:	00 b4       	in	r0, 0x20	; 32
    595a:	02 16       	cp	r0, r18
    595c:	39 f0       	breq	.+14     	; 0x596c <eeprom_update_r18+0x20>
    595e:	1f ba       	out	0x1f, r1	; 31
    5960:	20 bd       	out	0x20, r18	; 32
    5962:	0f b6       	in	r0, 0x3f	; 63
    5964:	f8 94       	cli
    5966:	fa 9a       	sbi	0x1f, 2	; 31
    5968:	f9 9a       	sbi	0x1f, 1	; 31
    596a:	0f be       	out	0x3f, r0	; 63
    596c:	08 95       	ret

0000596e <eeprom_update_dword>:
    596e:	03 96       	adiw	r24, 0x03	; 3
    5970:	27 2f       	mov	r18, r23
    5972:	0e 94 a6 2c 	call	0x594c	; 0x594c <eeprom_update_r18>
    5976:	0e 94 a5 2c 	call	0x594a	; 0x594a <eeprom_update_byte>
    597a:	25 2f       	mov	r18, r21
    597c:	0e 94 a6 2c 	call	0x594c	; 0x594c <eeprom_update_r18>
    5980:	24 2f       	mov	r18, r20
    5982:	0c 94 a6 2c 	jmp	0x594c	; 0x594c <eeprom_update_r18>

00005986 <eeprom_update_word>:
    5986:	01 96       	adiw	r24, 0x01	; 1
    5988:	27 2f       	mov	r18, r23
    598a:	0e 94 a6 2c 	call	0x594c	; 0x594c <eeprom_update_r18>
    598e:	0c 94 a5 2c 	jmp	0x594a	; 0x594a <eeprom_update_byte>

00005992 <eeprom_read_block>:
    5992:	dc 01       	movw	r26, r24
    5994:	cb 01       	movw	r24, r22

00005996 <eeprom_read_blraw>:
    5996:	fc 01       	movw	r30, r24
    5998:	f9 99       	sbic	0x1f, 1	; 31
    599a:	fe cf       	rjmp	.-4      	; 0x5998 <eeprom_read_blraw+0x2>
    599c:	06 c0       	rjmp	.+12     	; 0x59aa <eeprom_read_blraw+0x14>
    599e:	f2 bd       	out	0x22, r31	; 34
    59a0:	e1 bd       	out	0x21, r30	; 33
    59a2:	f8 9a       	sbi	0x1f, 0	; 31
    59a4:	31 96       	adiw	r30, 0x01	; 1
    59a6:	00 b4       	in	r0, 0x20	; 32
    59a8:	0d 92       	st	X+, r0
    59aa:	41 50       	subi	r20, 0x01	; 1
    59ac:	50 40       	sbci	r21, 0x00	; 0
    59ae:	b8 f7       	brcc	.-18     	; 0x599e <eeprom_read_blraw+0x8>
    59b0:	08 95       	ret

000059b2 <__prologue_saves__>:
    59b2:	2f 92       	push	r2
    59b4:	3f 92       	push	r3
    59b6:	4f 92       	push	r4
    59b8:	5f 92       	push	r5
    59ba:	6f 92       	push	r6
    59bc:	7f 92       	push	r7
    59be:	8f 92       	push	r8
    59c0:	9f 92       	push	r9
    59c2:	af 92       	push	r10
    59c4:	bf 92       	push	r11
    59c6:	cf 92       	push	r12
    59c8:	df 92       	push	r13
    59ca:	ef 92       	push	r14
    59cc:	ff 92       	push	r15
    59ce:	0f 93       	push	r16
    59d0:	1f 93       	push	r17
    59d2:	cf 93       	push	r28
    59d4:	df 93       	push	r29
    59d6:	cd b7       	in	r28, 0x3d	; 61
    59d8:	de b7       	in	r29, 0x3e	; 62
    59da:	ca 1b       	sub	r28, r26
    59dc:	db 0b       	sbc	r29, r27
    59de:	0f b6       	in	r0, 0x3f	; 63
    59e0:	f8 94       	cli
    59e2:	de bf       	out	0x3e, r29	; 62
    59e4:	0f be       	out	0x3f, r0	; 63
    59e6:	cd bf       	out	0x3d, r28	; 61
    59e8:	09 94       	ijmp

000059ea <__epilogue_restores__>:
    59ea:	2a 88       	ldd	r2, Y+18	; 0x12
    59ec:	39 88       	ldd	r3, Y+17	; 0x11
    59ee:	48 88       	ldd	r4, Y+16	; 0x10
    59f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    59f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    59f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    59f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    59f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    59fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    59fc:	b9 84       	ldd	r11, Y+9	; 0x09
    59fe:	c8 84       	ldd	r12, Y+8	; 0x08
    5a00:	df 80       	ldd	r13, Y+7	; 0x07
    5a02:	ee 80       	ldd	r14, Y+6	; 0x06
    5a04:	fd 80       	ldd	r15, Y+5	; 0x05
    5a06:	0c 81       	ldd	r16, Y+4	; 0x04
    5a08:	1b 81       	ldd	r17, Y+3	; 0x03
    5a0a:	aa 81       	ldd	r26, Y+2	; 0x02
    5a0c:	b9 81       	ldd	r27, Y+1	; 0x01
    5a0e:	ce 0f       	add	r28, r30
    5a10:	d1 1d       	adc	r29, r1
    5a12:	0f b6       	in	r0, 0x3f	; 63
    5a14:	f8 94       	cli
    5a16:	de bf       	out	0x3e, r29	; 62
    5a18:	0f be       	out	0x3f, r0	; 63
    5a1a:	cd bf       	out	0x3d, r28	; 61
    5a1c:	ed 01       	movw	r28, r26
    5a1e:	08 95       	ret

00005a20 <__do_global_dtors>:
    5a20:	10 e0       	ldi	r17, 0x00	; 0
    5a22:	c5 ef       	ldi	r28, 0xF5	; 245
    5a24:	d0 e0       	ldi	r29, 0x00	; 0
    5a26:	04 c0       	rjmp	.+8      	; 0x5a30 <__do_global_dtors+0x10>
    5a28:	fe 01       	movw	r30, r28
    5a2a:	0e 94 03 28 	call	0x5006	; 0x5006 <__tablejump2__>
    5a2e:	21 96       	adiw	r28, 0x01	; 1
    5a30:	c6 3f       	cpi	r28, 0xF6	; 246
    5a32:	d1 07       	cpc	r29, r17
    5a34:	c9 f7       	brne	.-14     	; 0x5a28 <__do_global_dtors+0x8>
    5a36:	f8 94       	cli

00005a38 <__stop_program>:
    5a38:	ff cf       	rjmp	.-2      	; 0x5a38 <__stop_program>
