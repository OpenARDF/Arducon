
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800100  00006f0e  00006fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f0e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a9  008002cc  008002cc  0000718e  2**0
                  ALLOC
  3 .eeprom       0000032b  00810000  00810000  0000718e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  000074b9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007518  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004f8  00000000  00000000  00007558  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007c8d  00000000  00000000  00007a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019c1  00000000  00000000  0000f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004cb2  00000000  00000000  0001109e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e30  00000000  00000000  00015d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002619  00000000  00000000  00016b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000068af  00000000  00000000  00019199  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000570  00000000  00000000  0001fa48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 01 	jmp	0x232	; 0x232 <__dtors_end>
       4:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__vector_4>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_6>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__vector_8>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__vector_11>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_18>
      4c:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__vector_19>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      68:	6e 01       	movw	r12, r28
      6a:	79 01       	movw	r14, r18
      6c:	84 01       	movw	r16, r8
      6e:	8f 01       	movw	r16, r30
      70:	9a 01       	movw	r18, r20
      72:	a5 01       	movw	r20, r10
      74:	b0 01       	movw	r22, r0
      76:	bb 01       	movw	r22, r22
      78:	c6 01       	movw	r24, r12
      7a:	d1 01       	movw	r26, r2
      7c:	dc 01       	movw	r26, r24
      7e:	33 02       	muls	r19, r19
      80:	33 02       	muls	r19, r19
      82:	e7 01       	movw	r28, r14
      84:	f2 01       	movw	r30, r4
      86:	fd 01       	movw	r30, r26
      88:	08 02       	muls	r16, r24
      8a:	13 02       	muls	r17, r19
      8c:	1e 02       	muls	r17, r30
      8e:	29 02       	muls	r18, r25
      90:	3e 02       	muls	r19, r30
      92:	42 02       	muls	r20, r18
      94:	46 02       	muls	r20, r22
      96:	4a 02       	muls	r20, r26
      98:	4e 02       	muls	r20, r30
      9a:	52 02       	muls	r21, r18
      9c:	56 02       	muls	r21, r22
      9e:	5b 02       	muls	r21, r27
      a0:	5f 02       	muls	r21, r31
      a2:	78 02       	muls	r23, r24
      a4:	78 02       	muls	r23, r24
      a6:	63 02       	muls	r22, r19
      a8:	67 02       	muls	r22, r23
      aa:	6c 02       	muls	r22, r28
      ac:	70 02       	muls	r23, r16
      ae:	74 02       	muls	r23, r20
      b0:	89 02       	muls	r24, r25
      b2:	8f 02       	muls	r24, r31
      b4:	95 02       	muls	r25, r21
      b6:	9b 02       	muls	r25, r27
      b8:	a1 02       	muls	r26, r17
      ba:	a7 02       	muls	r26, r23
      bc:	ad 02       	muls	r26, r29
      be:	b3 02       	muls	r27, r19
      c0:	b9 02       	muls	r27, r25
      c2:	bf 02       	muls	r27, r31
      c4:	c5 02       	muls	r28, r21
      c6:	e8 02       	muls	r30, r24
      c8:	e8 02       	muls	r30, r24
      ca:	cb 02       	muls	r28, r27
      cc:	d1 02       	muls	r29, r17
      ce:	d7 02       	muls	r29, r23
      d0:	dd 02       	muls	r29, r29
      d2:	e3 02       	muls	r30, r19
      d4:	00 06       	cpc	r0, r16
      d6:	5f 06       	cpc	r5, r31
      d8:	5f 06       	cpc	r5, r31
      da:	1d 06       	cpc	r1, r29
      dc:	44 06       	cpc	r4, r20
      de:	fd 05       	cpc	r31, r13
      e0:	47 06       	cpc	r4, r23
      e2:	4d 06       	cpc	r4, r29
      e4:	fa 05       	cpc	r31, r10
      e6:	57 06       	cpc	r5, r23
      e8:	f7 05       	cpc	r31, r7
      ea:	3e 06       	cpc	r3, r30
      ec:	41 06       	cpc	r4, r17
      ee:	50 06       	cpc	r5, r16
      f0:	a8 06       	cpc	r10, r24
      f2:	7a 06       	cpc	r7, r26
      f4:	ab 06       	cpc	r10, r27
      f6:	7d 06       	cpc	r7, r29
      f8:	80 06       	cpc	r8, r16
      fa:	83 06       	cpc	r8, r19
      fc:	86 06       	cpc	r8, r22
      fe:	89 06       	cpc	r8, r25
     100:	8c 06       	cpc	r8, r28
     102:	8f 06       	cpc	r8, r31
     104:	92 06       	cpc	r9, r18
     106:	c2 24       	eor	r12, r2
     108:	c4 24       	eor	r12, r4
     10a:	1d 25       	eor	r17, r13
     10c:	62 25       	eor	r22, r2
     10e:	69 25       	eor	r22, r9
     110:	73 25       	eor	r23, r3
     112:	7c 25       	eor	r23, r12
     114:	88 25       	eor	r24, r8
     116:	01 26       	eor	r0, r17
     118:	6c 26       	eor	r6, r28
     11a:	f2 26       	eor	r15, r18
     11c:	39 27       	eor	r19, r25
     11e:	4f 28       	or	r4, r15
     120:	ad 26       	eor	r10, r29
     122:	80 27       	eor	r24, r16
     124:	04 28       	or	r0, r4
     126:	a6 27       	eor	r26, r22
     128:	c5 25       	eor	r28, r5
     12a:	d0 27       	eor	r29, r16
     12c:	29 25       	eor	r18, r9
     12e:	c2 24       	eor	r12, r2
     130:	c4 24       	eor	r12, r4
     132:	f6 24       	eor	r15, r6
     134:	51 28       	or	r5, r1
     136:	69 25       	eor	r22, r9
     138:	73 25       	eor	r23, r3
     13a:	7c 25       	eor	r23, r12
     13c:	88 25       	eor	r24, r8
     13e:	01 26       	eor	r0, r17
     140:	6c 26       	eor	r6, r28
     142:	f2 26       	eor	r15, r18
     144:	39 27       	eor	r19, r25
     146:	51 28       	or	r5, r1
     148:	ad 26       	eor	r10, r29
     14a:	80 27       	eor	r24, r16
     14c:	04 28       	or	r0, r4
     14e:	a6 27       	eor	r26, r22
     150:	c5 25       	eor	r28, r5
     152:	d0 27       	eor	r29, r16
     154:	29 25       	eor	r18, r9
     156:	7c 2d       	mov	r23, r12
     158:	40 2d       	mov	r20, r0
     15a:	6c 2d       	mov	r22, r12
     15c:	84 2d       	mov	r24, r4
     15e:	70 2d       	mov	r23, r0
     160:	84 2d       	mov	r24, r4
     162:	50 2d       	mov	r21, r0
     164:	3c 2d       	mov	r19, r12
     166:	48 2d       	mov	r20, r8
     168:	4c 2d       	mov	r20, r12
     16a:	84 2d       	mov	r24, r4
     16c:	60 2d       	mov	r22, r0
     16e:	34 2d       	mov	r19, r4
     170:	64 2d       	mov	r22, r4
     172:	30 2d       	mov	r19, r0
     174:	44 2d       	mov	r20, r4
     176:	08 2d       	mov	r16, r8
     178:	0c 2d       	mov	r16, r12
     17a:	10 2d       	mov	r17, r0
     17c:	14 2d       	mov	r17, r4
     17e:	18 2d       	mov	r17, r8
     180:	1c 2d       	mov	r17, r12
     182:	20 2d       	mov	r18, r0
     184:	24 2d       	mov	r18, r4
     186:	28 2d       	mov	r18, r8
     188:	2c 2d       	mov	r18, r12
     18a:	54 2d       	mov	r21, r4
     18c:	58 2d       	mov	r21, r8
     18e:	80 2d       	mov	r24, r0
     190:	5c 2d       	mov	r21, r12
     192:	84 2d       	mov	r24, r4
     194:	38 2d       	mov	r19, r8
     196:	74 2d       	mov	r23, r4
     198:	88 2d       	mov	r24, r8
     19a:	a4 2c       	mov	r10, r4
     19c:	a8 2c       	mov	r10, r8
     19e:	ac 2c       	mov	r10, r12
     1a0:	b0 2c       	mov	r11, r0
     1a2:	b4 2c       	mov	r11, r4
     1a4:	b8 2c       	mov	r11, r8
     1a6:	bc 2c       	mov	r11, r12
     1a8:	c0 2c       	mov	r12, r0
     1aa:	c4 2c       	mov	r12, r4
     1ac:	c8 2c       	mov	r12, r8
     1ae:	cc 2c       	mov	r12, r12
     1b0:	d0 2c       	mov	r13, r0
     1b2:	d4 2c       	mov	r13, r4
     1b4:	d8 2c       	mov	r13, r8
     1b6:	dc 2c       	mov	r13, r12
     1b8:	e0 2c       	mov	r14, r0
     1ba:	e4 2c       	mov	r14, r4
     1bc:	e8 2c       	mov	r14, r8
     1be:	ec 2c       	mov	r14, r12
     1c0:	f0 2c       	mov	r15, r0
     1c2:	f4 2c       	mov	r15, r4
     1c4:	f8 2c       	mov	r15, r8
     1c6:	fc 2c       	mov	r15, r12
     1c8:	00 2d       	mov	r16, r0
     1ca:	04 2d       	mov	r16, r4
     1cc:	84 2d       	mov	r24, r4
     1ce:	84 2d       	mov	r24, r4
     1d0:	84 2d       	mov	r24, r4
     1d2:	84 2d       	mov	r24, r4
     1d4:	68 2d       	mov	r22, r8
     1d6:	84 2d       	mov	r24, r4
     1d8:	84 2d       	mov	r24, r4
     1da:	84 2d       	mov	r24, r4
     1dc:	84 2d       	mov	r24, r4
     1de:	84 2d       	mov	r24, r4
     1e0:	84 2d       	mov	r24, r4
     1e2:	84 2d       	mov	r24, r4
     1e4:	84 2d       	mov	r24, r4
     1e6:	84 2d       	mov	r24, r4
     1e8:	84 2d       	mov	r24, r4
     1ea:	84 2d       	mov	r24, r4
     1ec:	84 2d       	mov	r24, r4
     1ee:	84 2d       	mov	r24, r4
     1f0:	84 2d       	mov	r24, r4
     1f2:	84 2d       	mov	r24, r4
     1f4:	84 2d       	mov	r24, r4
     1f6:	84 2d       	mov	r24, r4
     1f8:	84 2d       	mov	r24, r4
     1fa:	84 2d       	mov	r24, r4
     1fc:	84 2d       	mov	r24, r4
     1fe:	84 2d       	mov	r24, r4
     200:	84 2d       	mov	r24, r4
     202:	84 2d       	mov	r24, r4
     204:	84 2d       	mov	r24, r4
     206:	84 2d       	mov	r24, r4
     208:	84 2d       	mov	r24, r4
     20a:	84 2d       	mov	r24, r4
     20c:	84 2d       	mov	r24, r4
     20e:	78 2d       	mov	r23, r8
     210:	05 a8       	ldd	r0, Z+53	; 0x35
     212:	4c cd       	rjmp	.-1384   	; 0xfffffcac <__eeprom_end+0xff7ef981>
     214:	b2 d4       	rcall	.+2404   	; 0xb7a <_Z25ds3231_sync2nearestMinutev+0xfe>
     216:	4e b9       	out	0x0e, r20	; 14
     218:	38 36       	cpi	r19, 0x68	; 104
     21a:	a9 02       	muls	r26, r25
     21c:	0c 50       	subi	r16, 0x0C	; 12
     21e:	b9 91       	ld	r27, Y+
     220:	86 88       	ldd	r8, Z+22	; 0x16
     222:	08 3c       	cpi	r16, 0xC8	; 200
     224:	a6 aa       	std	Z+54, r10	; 0x36
     226:	aa 2a       	or	r10, r26
     228:	be 00       	.word	0x00be	; ????
     22a:	00 00       	nop
     22c:	80 3f       	cpi	r24, 0xF0	; 240

0000022e <__ctors_start>:
     22e:	78 2c       	mov	r7, r8

00000230 <__ctors_end>:
     230:	8d 2c       	mov	r8, r13

00000232 <__dtors_end>:
     232:	11 24       	eor	r1, r1
     234:	1f be       	out	0x3f, r1	; 63
     236:	cf ef       	ldi	r28, 0xFF	; 255
     238:	d8 e0       	ldi	r29, 0x08	; 8
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	cd bf       	out	0x3d, r28	; 61

0000023e <__do_copy_data>:
     23e:	12 e0       	ldi	r17, 0x02	; 2
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b1 e0       	ldi	r27, 0x01	; 1
     244:	ee e0       	ldi	r30, 0x0E	; 14
     246:	ff e6       	ldi	r31, 0x6F	; 111
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x10>
     24a:	05 90       	lpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	ac 3c       	cpi	r26, 0xCC	; 204
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0xc>

00000254 <__do_clear_bss>:
     254:	25 e0       	ldi	r18, 0x05	; 5
     256:	ac ec       	ldi	r26, 0xCC	; 204
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	a5 37       	cpi	r26, 0x75	; 117
     260:	b2 07       	cpc	r27, r18
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>

00000264 <__do_global_ctors>:
     264:	11 e0       	ldi	r17, 0x01	; 1
     266:	c8 e1       	ldi	r28, 0x18	; 24
     268:	d1 e0       	ldi	r29, 0x01	; 1
     26a:	04 c0       	rjmp	.+8      	; 0x274 <__do_global_ctors+0x10>
     26c:	21 97       	sbiw	r28, 0x01	; 1
     26e:	fe 01       	movw	r30, r28
     270:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__tablejump2__>
     274:	c7 31       	cpi	r28, 0x17	; 23
     276:	d1 07       	cpc	r29, r17
     278:	c9 f7       	brne	.-14     	; 0x26c <__do_global_ctors+0x8>
     27a:	0e 94 94 2b 	call	0x5728	; 0x5728 <main>
     27e:	0c 94 7a 37 	jmp	0x6ef4	; 0x6ef4 <__do_global_dtors>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <month_length>:
     286:	62 30       	cpi	r22, 0x02	; 2
     288:	21 f4       	brne	.+8      	; 0x292 <month_length+0xc>
     28a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <is_leap_year>
     28e:	84 5e       	subi	r24, 0xE4	; 228
     290:	08 95       	ret
     292:	68 30       	cpi	r22, 0x08	; 8
     294:	08 f0       	brcs	.+2      	; 0x298 <month_length+0x12>
     296:	6f 5f       	subi	r22, 0xFF	; 255
     298:	61 70       	andi	r22, 0x01	; 1
     29a:	8e e1       	ldi	r24, 0x1E	; 30
     29c:	86 0f       	add	r24, r22
     29e:	08 95       	ret

000002a0 <is_leap_year>:
     2a0:	9c 01       	movw	r18, r24
     2a2:	23 70       	andi	r18, 0x03	; 3
     2a4:	33 27       	eor	r19, r19
     2a6:	23 2b       	or	r18, r19
     2a8:	59 f4       	brne	.+22     	; 0x2c0 <is_leap_year+0x20>
     2aa:	64 e6       	ldi	r22, 0x64	; 100
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
     2b2:	89 2b       	or	r24, r25
     2b4:	39 f4       	brne	.+14     	; 0x2c4 <is_leap_year+0x24>
     2b6:	63 70       	andi	r22, 0x03	; 3
     2b8:	77 27       	eor	r23, r23
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	67 2b       	or	r22, r23
     2be:	19 f0       	breq	.+6      	; 0x2c6 <is_leap_year+0x26>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	08 95       	ret
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	08 95       	ret

000002c8 <pinMode>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	84 31       	cpi	r24, 0x14	; 20
     2cc:	91 05       	cpc	r25, r1
     2ce:	08 f0       	brcs	.+2      	; 0x2d2 <pinMode+0xa>
     2d0:	ca c0       	rjmp	.+404    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     2d2:	fc 01       	movw	r30, r24
     2d4:	ec 5c       	subi	r30, 0xCC	; 204
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(mode == OUTPUT)
     2dc:	61 30       	cpi	r22, 0x01	; 1
     2de:	11 f4       	brne	.+4      	; 0x2e4 <pinMode+0x1c>
			{
				DDRD  |= (1 << PORTD0);
     2e0:	50 9a       	sbi	0x0a, 0	; 10
     2e2:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD0);
     2e4:	50 98       	cbi	0x0a, 0	; 10

				if(mode == INPUT_PULLUP)
     2e6:	63 30       	cpi	r22, 0x03	; 3
     2e8:	11 f4       	brne	.+4      	; 0x2ee <pinMode+0x26>
				{
					PORTD  |= (1 << PORTD0);
     2ea:	58 9a       	sbi	0x0b, 0	; 11
     2ec:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD0);
     2ee:	58 98       	cbi	0x0b, 0	; 11
     2f0:	08 95       	ret
		}
		break;
		
		case PIN_TXD:
		{
			if(mode == OUTPUT)
     2f2:	61 30       	cpi	r22, 0x01	; 1
     2f4:	11 f4       	brne	.+4      	; 0x2fa <pinMode+0x32>
			{
				DDRD  |= (1 << PORTD1);
     2f6:	51 9a       	sbi	0x0a, 1	; 10
     2f8:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD1);
     2fa:	51 98       	cbi	0x0a, 1	; 10

				if(mode == INPUT_PULLUP)
     2fc:	63 30       	cpi	r22, 0x03	; 3
     2fe:	11 f4       	brne	.+4      	; 0x304 <pinMode+0x3c>
				{
					PORTD  |= (1 << PORTD1);
     300:	59 9a       	sbi	0x0b, 1	; 11
     302:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD1);
     304:	59 98       	cbi	0x0b, 1	; 11
     306:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(mode == OUTPUT)
     308:	61 30       	cpi	r22, 0x01	; 1
     30a:	11 f4       	brne	.+4      	; 0x310 <pinMode+0x48>
			{
				DDRD  |= (1 << PORTD2);
     30c:	52 9a       	sbi	0x0a, 2	; 10
     30e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     310:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     312:	63 30       	cpi	r22, 0x03	; 3
     314:	11 f4       	brne	.+4      	; 0x31a <pinMode+0x52>
				{
					PORTD  |= (1 << PORTD2);
     316:	5a 9a       	sbi	0x0b, 2	; 11
     318:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     31a:	5a 98       	cbi	0x0b, 2	; 11
     31c:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     31e:	61 30       	cpi	r22, 0x01	; 1
     320:	11 f4       	brne	.+4      	; 0x326 <pinMode+0x5e>
			{
				DDRD  |= (1 << PORTD3);
     322:	53 9a       	sbi	0x0a, 3	; 10
     324:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     326:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     328:	63 30       	cpi	r22, 0x03	; 3
     32a:	11 f4       	brne	.+4      	; 0x330 <pinMode+0x68>
				{
					PORTD  |= (1 << PORTD3);
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     330:	5b 98       	cbi	0x0b, 3	; 11
     332:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     334:	61 30       	cpi	r22, 0x01	; 1
     336:	11 f4       	brne	.+4      	; 0x33c <pinMode+0x74>
			{
				DDRD  |= (1 << PORTD4);
     338:	54 9a       	sbi	0x0a, 4	; 10
     33a:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     33c:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     33e:	63 30       	cpi	r22, 0x03	; 3
     340:	11 f4       	brne	.+4      	; 0x346 <pinMode+0x7e>
				{
					PORTD  |= (1 << PORTD4);
     342:	5c 9a       	sbi	0x0b, 4	; 11
     344:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     346:	5c 98       	cbi	0x0b, 4	; 11
     348:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     34a:	61 30       	cpi	r22, 0x01	; 1
     34c:	11 f4       	brne	.+4      	; 0x352 <pinMode+0x8a>
			{
				DDRD  |= (1 << PORTD5);
     34e:	55 9a       	sbi	0x0a, 5	; 10
     350:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     352:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     354:	63 30       	cpi	r22, 0x03	; 3
     356:	11 f4       	brne	.+4      	; 0x35c <pinMode+0x94>
				{
					PORTD  |= (1 << PORTD5);
     358:	5d 9a       	sbi	0x0b, 5	; 11
     35a:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     35c:	5d 98       	cbi	0x0b, 5	; 11
     35e:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     360:	61 30       	cpi	r22, 0x01	; 1
     362:	11 f4       	brne	.+4      	; 0x368 <pinMode+0xa0>
			{
				DDRD  |= (1 << PORTD6);
     364:	56 9a       	sbi	0x0a, 6	; 10
     366:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     368:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     36a:	63 30       	cpi	r22, 0x03	; 3
     36c:	11 f4       	brne	.+4      	; 0x372 <pinMode+0xaa>
				{
					PORTD  |= (1 << PORTD6);
     36e:	5e 9a       	sbi	0x0b, 6	; 11
     370:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     372:	5e 98       	cbi	0x0b, 6	; 11
     374:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     376:	61 30       	cpi	r22, 0x01	; 1
     378:	11 f4       	brne	.+4      	; 0x37e <pinMode+0xb6>
			{
				DDRD  |= (1 << PORTD7);
     37a:	57 9a       	sbi	0x0a, 7	; 10
     37c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     37e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     380:	63 30       	cpi	r22, 0x03	; 3
     382:	11 f4       	brne	.+4      	; 0x388 <pinMode+0xc0>
				{
					PORTD  |= (1 << PORTD7);
     384:	5f 9a       	sbi	0x0b, 7	; 11
     386:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     388:	5f 98       	cbi	0x0b, 7	; 11
     38a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     38c:	61 30       	cpi	r22, 0x01	; 1
     38e:	11 f4       	brne	.+4      	; 0x394 <pinMode+0xcc>
			{
				DDRB  |= (1 << PORTB0);
     390:	20 9a       	sbi	0x04, 0	; 4
     392:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     394:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     396:	63 30       	cpi	r22, 0x03	; 3
     398:	11 f4       	brne	.+4      	; 0x39e <pinMode+0xd6>
				{
					PORTB  |= (1 << PORTB0);
     39a:	28 9a       	sbi	0x05, 0	; 5
     39c:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     39e:	28 98       	cbi	0x05, 0	; 5
     3a0:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     3a2:	61 30       	cpi	r22, 0x01	; 1
     3a4:	11 f4       	brne	.+4      	; 0x3aa <pinMode+0xe2>
			{
				DDRB  |= (1 << PORTB1);
     3a6:	21 9a       	sbi	0x04, 1	; 4
     3a8:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     3aa:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     3ac:	63 30       	cpi	r22, 0x03	; 3
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <pinMode+0xec>
				{
					PORTB  |= (1 << PORTB1);
     3b0:	29 9a       	sbi	0x05, 1	; 5
     3b2:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     3b4:	29 98       	cbi	0x05, 1	; 5
     3b6:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     3b8:	61 30       	cpi	r22, 0x01	; 1
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <pinMode+0xf8>
			{
				DDRB  |= (1 << PORTB2);
     3bc:	22 9a       	sbi	0x04, 2	; 4
     3be:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     3c0:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     3c2:	63 30       	cpi	r22, 0x03	; 3
     3c4:	11 f4       	brne	.+4      	; 0x3ca <pinMode+0x102>
				{
					PORTB  |= (1 << PORTB2);
     3c6:	2a 9a       	sbi	0x05, 2	; 5
     3c8:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     3ca:	2a 98       	cbi	0x05, 2	; 5
     3cc:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     3ce:	61 30       	cpi	r22, 0x01	; 1
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <pinMode+0x10e>
			{
				DDRB  |= (1 << PORTB5);
     3d2:	25 9a       	sbi	0x04, 5	; 4
     3d4:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3d6:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3d8:	63 30       	cpi	r22, 0x03	; 3
     3da:	11 f4       	brne	.+4      	; 0x3e0 <pinMode+0x118>
				{
					PORTD  |= (1 << PORTB5);
     3dc:	5d 9a       	sbi	0x0b, 5	; 11
     3de:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3e0:	5d 98       	cbi	0x0b, 5	; 11
     3e2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3e4:	61 30       	cpi	r22, 0x01	; 1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <pinMode+0x124>
			{
				DDRC  |= (1 << PORTC0);
     3e8:	38 9a       	sbi	0x07, 0	; 7
     3ea:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3ec:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ee:	63 30       	cpi	r22, 0x03	; 3
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <pinMode+0x12e>
				{
					PORTC  |= (1 << PORTC0);
     3f2:	40 9a       	sbi	0x08, 0	; 8
     3f4:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3f6:	40 98       	cbi	0x08, 0	; 8
     3f8:	08 95       	ret
		}
		break;

		case A1:
		{
			if(mode == OUTPUT)
     3fa:	61 30       	cpi	r22, 0x01	; 1
     3fc:	11 f4       	brne	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			{
				DDRC  |= (1 << PORTC1);
     3fe:	39 9a       	sbi	0x07, 1	; 7
     400:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     402:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     404:	63 30       	cpi	r22, 0x03	; 3
     406:	11 f4       	brne	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				{
					PORTC  |= (1 << PORTC1);
     408:	41 9a       	sbi	0x08, 1	; 8
     40a:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     40c:	41 98       	cbi	0x08, 1	; 8
     40e:	08 95       	ret
		}
		break;

		case A2:
		{
			if(mode == OUTPUT)
     410:	61 30       	cpi	r22, 0x01	; 1
     412:	11 f4       	brne	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			{
				DDRC  |= (1 << PORTC2);
     414:	3a 9a       	sbi	0x07, 2	; 7
     416:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     418:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     41a:	63 30       	cpi	r22, 0x03	; 3
     41c:	11 f4       	brne	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				{
					PORTC  |= (1 << PORTC2);
     41e:	42 9a       	sbi	0x08, 2	; 8
     420:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     422:	42 98       	cbi	0x08, 2	; 8
     424:	08 95       	ret
		}
		break;

		case A3:
		{
			if(mode == OUTPUT)
     426:	61 30       	cpi	r22, 0x01	; 1
     428:	11 f4       	brne	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				DDRC  |= (1 << PORTC3);
     42a:	3b 9a       	sbi	0x07, 3	; 7
     42c:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     42e:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     430:	63 30       	cpi	r22, 0x03	; 3
     432:	11 f4       	brne	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				{
					PORTC  |= (1 << PORTC3);
     434:	43 9a       	sbi	0x08, 3	; 8
     436:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     438:	43 98       	cbi	0x08, 3	; 8
     43a:	08 95       	ret
		}
		break;

		case A4:
		{
			if(mode == OUTPUT)
     43c:	61 30       	cpi	r22, 0x01	; 1
     43e:	11 f4       	brne	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			{
				DDRC  |= (1 << PORTC4);
     440:	3c 9a       	sbi	0x07, 4	; 7
     442:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     444:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     446:	63 30       	cpi	r22, 0x03	; 3
     448:	11 f4       	brne	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
				{
					PORTC  |= (1 << PORTC4);
     44a:	44 9a       	sbi	0x08, 4	; 8
     44c:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     44e:	44 98       	cbi	0x08, 4	; 8
     450:	08 95       	ret
		}
		break;

		case A5:
		{
			if(mode == OUTPUT)
     452:	61 30       	cpi	r22, 0x01	; 1
     454:	11 f4       	brne	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			{
				DDRC  |= (1 << PORTC5);
     456:	3d 9a       	sbi	0x07, 5	; 7
     458:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     45a:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     45c:	63 30       	cpi	r22, 0x03	; 3
     45e:	11 f4       	brne	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				{
					PORTC  |= (1 << PORTC5);
     460:	45 9a       	sbi	0x08, 5	; 8
     462:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     464:	45 98       	cbi	0x08, 5	; 8
     466:	08 95       	ret

00000468 <digitalRead>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	32 97       	sbiw	r30, 0x02	; 2
     46e:	e0 31       	cpi	r30, 0x10	; 16
     470:	f1 05       	cpc	r31, r1
     472:	f0 f5       	brcc	.+124    	; 0x4f0 <digitalRead+0x88>
     474:	e8 5b       	subi	r30, 0xB8	; 184
     476:	ff 4f       	sbci	r31, 0xFF	; 255
     478:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     47c:	29 b1       	in	r18, 0x09	; 9
     47e:	24 70       	andi	r18, 0x04	; 4
     480:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     482:	38 c0       	rjmp	.+112    	; 0x4f4 <digitalRead+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     484:	29 b1       	in	r18, 0x09	; 9
     486:	28 70       	andi	r18, 0x08	; 8
     488:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48a:	34 c0       	rjmp	.+104    	; 0x4f4 <digitalRead+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     48c:	29 b1       	in	r18, 0x09	; 9
     48e:	20 71       	andi	r18, 0x10	; 16
     490:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     492:	30 c0       	rjmp	.+96     	; 0x4f4 <digitalRead+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     494:	29 b1       	in	r18, 0x09	; 9
     496:	20 72       	andi	r18, 0x20	; 32
     498:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49a:	2c c0       	rjmp	.+88     	; 0x4f4 <digitalRead+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     49c:	29 b1       	in	r18, 0x09	; 9
     49e:	20 74       	andi	r18, 0x40	; 64
     4a0:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a2:	28 c0       	rjmp	.+80     	; 0x4f4 <digitalRead+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     4a4:	29 b1       	in	r18, 0x09	; 9
     4a6:	20 78       	andi	r18, 0x80	; 128
     4a8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4aa:	24 c0       	rjmp	.+72     	; 0x4f4 <digitalRead+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     4ac:	83 b1       	in	r24, 0x03	; 3
     4ae:	28 2f       	mov	r18, r24
     4b0:	21 70       	andi	r18, 0x01	; 1
     4b2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b4:	1f c0       	rjmp	.+62     	; 0x4f4 <digitalRead+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     4b6:	23 b1       	in	r18, 0x03	; 3
     4b8:	22 70       	andi	r18, 0x02	; 2
     4ba:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <digitalRead+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     4be:	23 b1       	in	r18, 0x03	; 3
     4c0:	24 70       	andi	r18, 0x04	; 4
     4c2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <digitalRead+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4c6:	23 b1       	in	r18, 0x03	; 3
     4c8:	20 72       	andi	r18, 0x20	; 32
     4ca:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <digitalRead+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4ce:	86 b1       	in	r24, 0x06	; 6
     4d0:	28 2f       	mov	r18, r24
     4d2:	21 70       	andi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <digitalRead+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4d8:	26 b1       	in	r18, 0x06	; 6
     4da:	22 70       	andi	r18, 0x02	; 2
     4dc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4de:	0a c0       	rjmp	.+20     	; 0x4f4 <digitalRead+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4e0:	26 b1       	in	r18, 0x06	; 6
     4e2:	24 70       	andi	r18, 0x04	; 4
     4e4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <digitalRead+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4e8:	26 b1       	in	r18, 0x06	; 6
     4ea:	28 70       	andi	r18, 0x08	; 8
     4ec:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <digitalRead+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	23 2b       	or	r18, r19
     4f8:	09 f4       	brne	.+2      	; 0x4fc <digitalRead+0x94>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
}
     4fc:	08 95       	ret

000004fe <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	82 31       	cpi	r24, 0x12	; 18
     502:	91 05       	cpc	r25, r1
     504:	08 f0       	brcs	.+2      	; 0x508 <digitalWrite+0xa>
     506:	64 c0       	rjmp	.+200    	; 0x5d0 <digitalWrite+0xd2>
     508:	fc 01       	movw	r30, r24
     50a:	e8 5a       	subi	r30, 0xA8	; 168
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>
	{
		case PIN_RXD:
		{
			if(value)
     512:	66 23       	and	r22, r22
     514:	11 f0       	breq	.+4      	; 0x51a <digitalWrite+0x1c>
			{
				PORTD  |= (1 << PORTD0);
     516:	58 9a       	sbi	0x0b, 0	; 11
     518:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD0);
     51a:	58 98       	cbi	0x0b, 0	; 11
     51c:	08 95       	ret
		} 
		break;
		
		case PIN_TXD:
		{
			if(value)
     51e:	66 23       	and	r22, r22
     520:	11 f0       	breq	.+4      	; 0x526 <digitalWrite+0x28>
			{
				PORTD  |= (1 << PORTD1);
     522:	59 9a       	sbi	0x0b, 1	; 11
     524:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD1);
     526:	59 98       	cbi	0x0b, 1	; 11
     528:	08 95       	ret
		}
		break;
		
		case D2:
		{
			if(value)
     52a:	66 23       	and	r22, r22
     52c:	11 f0       	breq	.+4      	; 0x532 <digitalWrite+0x34>
			{
				PORTD  |= (1 << PORTD2);
     52e:	5a 9a       	sbi	0x0b, 2	; 11
     530:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     532:	5a 98       	cbi	0x0b, 2	; 11
     534:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     536:	66 23       	and	r22, r22
     538:	11 f0       	breq	.+4      	; 0x53e <digitalWrite+0x40>
			{
				PORTD  |= (1 << PORTD3);
     53a:	5b 9a       	sbi	0x0b, 3	; 11
     53c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     53e:	5b 98       	cbi	0x0b, 3	; 11
     540:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     542:	66 23       	and	r22, r22
     544:	11 f0       	breq	.+4      	; 0x54a <digitalWrite+0x4c>
			{
				PORTD  |= (1 << PORTD4);
     546:	5c 9a       	sbi	0x0b, 4	; 11
     548:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     54a:	5c 98       	cbi	0x0b, 4	; 11
     54c:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     54e:	66 23       	and	r22, r22
     550:	11 f0       	breq	.+4      	; 0x556 <digitalWrite+0x58>
			{
				PORTD  |= (1 << PORTD5);
     552:	5d 9a       	sbi	0x0b, 5	; 11
     554:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     556:	5d 98       	cbi	0x0b, 5	; 11
     558:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     55a:	66 23       	and	r22, r22
     55c:	11 f0       	breq	.+4      	; 0x562 <digitalWrite+0x64>
			{
				PORTD  |= (1 << PORTD6);
     55e:	5e 9a       	sbi	0x0b, 6	; 11
     560:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     562:	5e 98       	cbi	0x0b, 6	; 11
     564:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     566:	66 23       	and	r22, r22
     568:	11 f0       	breq	.+4      	; 0x56e <digitalWrite+0x70>
			{
				PORTD  |= (1 << PORTD7);
     56a:	5f 9a       	sbi	0x0b, 7	; 11
     56c:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     56e:	5f 98       	cbi	0x0b, 7	; 11
     570:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     572:	66 23       	and	r22, r22
     574:	11 f0       	breq	.+4      	; 0x57a <digitalWrite+0x7c>
			{
				PORTB  |= (1 << PORTB0);
     576:	28 9a       	sbi	0x05, 0	; 5
     578:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     57a:	28 98       	cbi	0x05, 0	; 5
     57c:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     57e:	66 23       	and	r22, r22
     580:	11 f0       	breq	.+4      	; 0x586 <digitalWrite+0x88>
			{
				PORTB  |= (1 << PORTB1);
     582:	29 9a       	sbi	0x05, 1	; 5
     584:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     586:	29 98       	cbi	0x05, 1	; 5
     588:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     58a:	66 23       	and	r22, r22
     58c:	11 f0       	breq	.+4      	; 0x592 <digitalWrite+0x94>
			{
				PORTB  |= (1 << PORTB2);
     58e:	2a 9a       	sbi	0x05, 2	; 5
     590:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     592:	2a 98       	cbi	0x05, 2	; 5
     594:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     596:	66 23       	and	r22, r22
     598:	11 f0       	breq	.+4      	; 0x59e <digitalWrite+0xa0>
			{
				PORTB  |= (1 << PORTB5);
     59a:	2d 9a       	sbi	0x05, 5	; 5
     59c:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     59e:	2d 98       	cbi	0x05, 5	; 5
     5a0:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     5a2:	66 23       	and	r22, r22
     5a4:	11 f0       	breq	.+4      	; 0x5aa <digitalWrite+0xac>
			{
				PORTC  |= (1 << PORTC0);
     5a6:	40 9a       	sbi	0x08, 0	; 8
     5a8:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     5aa:	40 98       	cbi	0x08, 0	; 8
     5ac:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     5ae:	66 23       	and	r22, r22
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <digitalWrite+0xb8>
			{
				PORTC  |= (1 << PORTC1);
     5b2:	41 9a       	sbi	0x08, 1	; 8
     5b4:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     5b6:	41 98       	cbi	0x08, 1	; 8
     5b8:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     5ba:	66 23       	and	r22, r22
     5bc:	11 f0       	breq	.+4      	; 0x5c2 <digitalWrite+0xc4>
			{
				PORTC  |= (1 << PORTC2);
     5be:	42 9a       	sbi	0x08, 2	; 8
     5c0:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     5c2:	42 98       	cbi	0x08, 2	; 8
     5c4:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     5c6:	66 23       	and	r22, r22
     5c8:	11 f0       	breq	.+4      	; 0x5ce <digitalWrite+0xd0>
			{
				PORTC  |= (1 << PORTC3);
     5ca:	43 9a       	sbi	0x08, 3	; 8
     5cc:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     5ce:	43 98       	cbi	0x08, 3	; 8
     5d0:	08 95       	ret

000005d2 <_Z7bcd2dech>:
time_t epoch_from_ltm(tm *ltm);

uint8_t bcd2dec(uint8_t val)
{
	uint8_t result = 10 * (val >> 4) + (val & 0x0F);
	return( result);
     5d2:	98 2f       	mov	r25, r24
     5d4:	96 95       	lsr	r25
     5d6:	96 95       	lsr	r25
     5d8:	96 95       	lsr	r25
     5da:	9e 71       	andi	r25, 0x1E	; 30
     5dc:	29 2f       	mov	r18, r25
     5de:	22 0f       	add	r18, r18
     5e0:	22 0f       	add	r18, r18
     5e2:	92 0f       	add	r25, r18
     5e4:	8f 70       	andi	r24, 0x0F	; 15
}
     5e6:	89 0f       	add	r24, r25
     5e8:	08 95       	ret

000005ea <_Z7dec2bcdh>:

uint8_t dec2bcd(uint8_t val)
{
	uint8_t result = val % 10;
	result |= (val / 10) << 4;
     5ea:	9d ec       	ldi	r25, 0xCD	; 205
     5ec:	89 9f       	mul	r24, r25
     5ee:	91 2d       	mov	r25, r1
     5f0:	11 24       	eor	r1, r1
     5f2:	96 95       	lsr	r25
     5f4:	96 95       	lsr	r25
     5f6:	96 95       	lsr	r25
     5f8:	20 e1       	ldi	r18, 0x10	; 16
     5fa:	92 9f       	mul	r25, r18
     5fc:	a0 01       	movw	r20, r0
     5fe:	11 24       	eor	r1, r1
     600:	99 0f       	add	r25, r25
     602:	29 2f       	mov	r18, r25
     604:	22 0f       	add	r18, r18
     606:	22 0f       	add	r18, r18
     608:	92 0f       	add	r25, r18
     60a:	89 1b       	sub	r24, r25
	return (result);
}
     60c:	84 2b       	or	r24, r20
     60e:	08 95       	ret

00000610 <_Z8char2bcdPc>:

uint8_t char2bcd(char c[])
{
	uint8_t result = (c[1] - '0') + ((c[0] - '0') << 4);
	return( result);
     610:	fc 01       	movw	r30, r24
     612:	20 81       	ld	r18, Z
     614:	81 81       	ldd	r24, Z+1	; 0x01
     616:	80 53       	subi	r24, 0x30	; 48
}
     618:	f0 e1       	ldi	r31, 0x10	; 16
     61a:	2f 9f       	mul	r18, r31
     61c:	80 0d       	add	r24, r0
     61e:	11 24       	eor	r1, r1
     620:	08 95       	ret

00000622 <_Z14epoch_from_ltmP2tm>:

		return(epoch);
	}

	time_t epoch_from_ltm(tm *ltm)
	{
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
		time_t epoch = ltm->tm_sec + ltm->tm_min * 60 + ltm->tm_hour * 3600L + ltm->tm_yday * 86400L +
		(ltm->tm_year - 70) * 31536000L + ((ltm->tm_year - 69) / 4) * 86400L -
     630:	ee 81       	ldd	r30, Y+6	; 0x06
     632:	ff 81       	ldd	r31, Y+7	; 0x07
		((ltm->tm_year - 1) / 100) * 86400L + ((ltm->tm_year + 299) / 400) * 86400L;

		return(epoch);
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	c8 80       	ld	r12, Y
     638:	0c 2c       	mov	r0, r12
     63a:	00 0c       	add	r0, r0
     63c:	dd 08       	sbc	r13, r13
     63e:	9c e3       	ldi	r25, 0x3C	; 60
     640:	89 02       	muls	r24, r25
     642:	c0 0c       	add	r12, r0
     644:	d1 1c       	adc	r13, r1
     646:	11 24       	eor	r1, r1
     648:	0d 2c       	mov	r0, r13
     64a:	00 0c       	add	r0, r0
     64c:	ee 08       	sbc	r14, r14
     64e:	ff 08       	sbc	r15, r15
     650:	aa 81       	ldd	r26, Y+2	; 0x02
     652:	0a 2e       	mov	r0, r26
     654:	00 0c       	add	r0, r0
     656:	bb 0b       	sbc	r27, r27
     658:	20 e1       	ldi	r18, 0x10	; 16
     65a:	3e e0       	ldi	r19, 0x0E	; 14
     65c:	0e 94 67 32 	call	0x64ce	; 0x64ce <__usmulhisi3>
     660:	c6 0e       	add	r12, r22
     662:	d7 1e       	adc	r13, r23
     664:	e8 1e       	adc	r14, r24
     666:	f9 1e       	adc	r15, r25
     668:	a8 85       	ldd	r26, Y+8	; 0x08
     66a:	b9 85       	ldd	r27, Y+9	; 0x09
     66c:	20 e8       	ldi	r18, 0x80	; 128
     66e:	31 e5       	ldi	r19, 0x51	; 81
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__mulshisi3>
     678:	c6 0e       	add	r12, r22
     67a:	d7 1e       	adc	r13, r23
     67c:	e8 1e       	adc	r14, r24
     67e:	f9 1e       	adc	r15, r25
     680:	df 01       	movw	r26, r30
     682:	a6 54       	subi	r26, 0x46	; 70
     684:	b1 09       	sbc	r27, r1
     686:	20 e8       	ldi	r18, 0x80	; 128
     688:	33 e3       	ldi	r19, 0x33	; 51
     68a:	41 ee       	ldi	r20, 0xE1	; 225
     68c:	51 e0       	ldi	r21, 0x01	; 1
     68e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__mulshisi3>
     692:	c6 0e       	add	r12, r22
     694:	d7 1e       	adc	r13, r23
     696:	e8 1e       	adc	r14, r24
     698:	f9 1e       	adc	r15, r25
     69a:	cf 01       	movw	r24, r30
     69c:	85 54       	subi	r24, 0x45	; 69
     69e:	91 09       	sbc	r25, r1
     6a0:	dc 01       	movw	r26, r24
     6a2:	0a f4       	brpl	.+2      	; 0x6a6 <_Z14epoch_from_ltmP2tm+0x84>
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	b5 95       	asr	r27
     6a8:	a7 95       	ror	r26
     6aa:	b5 95       	asr	r27
     6ac:	a7 95       	ror	r26
     6ae:	20 e8       	ldi	r18, 0x80	; 128
     6b0:	31 e5       	ldi	r19, 0x51	; 81
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__mulshisi3>
     6ba:	c6 0e       	add	r12, r22
     6bc:	d7 1e       	adc	r13, r23
     6be:	e8 1e       	adc	r14, r24
     6c0:	f9 1e       	adc	r15, r25
     6c2:	cf 01       	movw	r24, r30
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	64 e6       	ldi	r22, 0x64	; 100
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
     6ce:	db 01       	movw	r26, r22
     6d0:	20 e8       	ldi	r18, 0x80	; 128
     6d2:	3e ea       	ldi	r19, 0xAE	; 174
     6d4:	4e ef       	ldi	r20, 0xFE	; 254
     6d6:	5f ef       	ldi	r21, 0xFF	; 255
     6d8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__mulshisi3>
     6dc:	c6 0e       	add	r12, r22
     6de:	d7 1e       	adc	r13, r23
     6e0:	e8 1e       	adc	r14, r24
     6e2:	f9 1e       	adc	r15, r25
     6e4:	cf 01       	movw	r24, r30
     6e6:	85 5d       	subi	r24, 0xD5	; 213
     6e8:	9e 4f       	sbci	r25, 0xFE	; 254
     6ea:	60 e9       	ldi	r22, 0x90	; 144
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
     6f2:	db 01       	movw	r26, r22
     6f4:	20 e8       	ldi	r18, 0x80	; 128
     6f6:	31 e5       	ldi	r19, 0x51	; 81
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__mulshisi3>
     700:	6c 0d       	add	r22, r12
     702:	7d 1d       	adc	r23, r13
     704:	8e 1d       	adc	r24, r14
     706:	9f 1d       	adc	r25, r15
	}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <_Z13RTC_get_epochv>:

	time_t RTC_get_epoch(void)
	{
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	63 97       	sbiw	r28, 0x13	; 19
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
		time_t epoch = 0;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
     734:	ae 01       	movw	r20, r28
     736:	4f 5f       	subi	r20, 0xFF	; 255
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	da 01       	movw	r26, r20
     73e:	1d 92       	st	X+, r1
     740:	8a 95       	dec	r24
     742:	e9 f7       	brne	.-6      	; 0x73e <_Z13RTC_get_epochv+0x28>

		if(!i2c_device_read(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7))
     744:	27 e0       	ldi	r18, 0x07	; 7
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	80 ed       	ldi	r24, 0xD0	; 208
     74a:	0e 94 40 0b 	call	0x1680	; 0x1680 <i2c_device_read>
     74e:	81 11       	cpse	r24, r1
     750:	76 c0       	rjmp	.+236    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		{
			struct tm ltm = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
     752:	fe 01       	movw	r30, r28
     754:	38 96       	adiw	r30, 0x08	; 8
     756:	8c e0       	ldi	r24, 0x0C	; 12
     758:	df 01       	movw	r26, r30
     75a:	1d 92       	st	X+, r1
     75c:	8a 95       	dec	r24
     75e:	e9 f7       	brne	.-6      	; 0x75a <_Z13RTC_get_epochv+0x44>
			uint8_t hour10;
			uint8_t hour;
			BOOL am_pm;
			BOOL twelvehour;

			am_pm = ((data[2] >> 5) & 0x01);
     760:	2b 81       	ldd	r18, Y+3	; 0x03
     762:	42 2f       	mov	r20, r18
     764:	50 e0       	ldi	r21, 0x00	; 0
			hour10 = ((data[2] >> 4) & 0x01);
     766:	ca 01       	movw	r24, r20
     768:	95 95       	asr	r25
     76a:	87 95       	ror	r24
     76c:	95 95       	asr	r25
     76e:	87 95       	ror	r24
     770:	95 95       	asr	r25
     772:	87 95       	ror	r24
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	81 70       	andi	r24, 0x01	; 1
			hour = (data[2] & 0x0f);
     77a:	2f 70       	andi	r18, 0x0F	; 15

			twelvehour = ((data[2] >> 6) & 0x01);

			if(!twelvehour && am_pm)
     77c:	ba 01       	movw	r22, r20
     77e:	06 2e       	mov	r0, r22
     780:	67 2f       	mov	r22, r23
     782:	00 0c       	add	r0, r0
     784:	66 1f       	adc	r22, r22
     786:	77 0b       	sbc	r23, r23
     788:	00 0c       	add	r0, r0
     78a:	66 1f       	adc	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	60 fd       	sbrc	r22, 0
     790:	0c c0       	rjmp	.+24     	; 0x7aa <_Z13RTC_get_epochv+0x94>
     792:	55 95       	asr	r21
     794:	47 95       	ror	r20
     796:	55 95       	asr	r21
     798:	47 95       	ror	r20
     79a:	55 95       	asr	r21
     79c:	47 95       	ror	r20
     79e:	55 95       	asr	r21
     7a0:	47 95       	ror	r20
     7a2:	55 95       	asr	r21
     7a4:	47 95       	ror	r20
     7a6:	40 fd       	sbrc	r20, 0
			{
				hour10 = 2;
     7a8:	82 e0       	ldi	r24, 0x02	; 2
			}

			hours = 10 * hour10 + hour;
     7aa:	88 0f       	add	r24, r24
     7ac:	d8 2e       	mov	r13, r24
     7ae:	dd 0c       	add	r13, r13
     7b0:	dd 0c       	add	r13, r13
     7b2:	8d 0d       	add	r24, r13
     7b4:	d8 2e       	mov	r13, r24
     7b6:	d2 0e       	add	r13, r18

			year += (int16_t)bcd2dec(data[6]);
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     7be:	e8 2e       	mov	r14, r24
     7c0:	f1 2c       	mov	r15, r1
			ltm.tm_year = year;                         /* year since 1900 */
     7c2:	c7 01       	movw	r24, r14
     7c4:	8c 59       	subi	r24, 0x9C	; 156
     7c6:	9f 4f       	sbci	r25, 0xFF	; 255
     7c8:	9f 87       	std	Y+15, r25	; 0x0f
     7ca:	8e 87       	std	Y+14, r24	; 0x0e

			year += 1900;                               /* adjust year to calendar year */
     7cc:	b0 e3       	ldi	r27, 0x30	; 48
     7ce:	eb 1a       	sub	r14, r27
     7d0:	b8 ef       	ldi	r27, 0xF8	; 248
     7d2:	fb 0a       	sbc	r15, r27

			month = bcd2dec(data[5]);
     7d4:	8e 81       	ldd	r24, Y+6	; 0x06
     7d6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     7da:	08 2f       	mov	r16, r24
			ltm.tm_mon = month - 1;                     /* mon 0 to 11 */
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	80 0f       	add	r24, r16
     7e0:	8d 87       	std	Y+13, r24	; 0x0d

			date = bcd2dec(data[4]);
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
			ltm.tm_mday = date;                         /* month day 1 to 31 */
     7e8:	8b 87       	std	Y+11, r24	; 0x0b

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     7ea:	02 30       	cpi	r16, 0x02	; 2
     7ec:	70 f0       	brcs	.+28     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7ee:	11 e0       	ldi	r17, 0x01	; 1
			{
				ltm.tm_yday += month_length(year, mon);;
     7f0:	61 2f       	mov	r22, r17
     7f2:	c7 01       	movw	r24, r14
     7f4:	0e 94 43 01 	call	0x286	; 0x286 <month_length>
     7f8:	28 89       	ldd	r18, Y+16	; 0x10
     7fa:	39 89       	ldd	r19, Y+17	; 0x11
     7fc:	28 0f       	add	r18, r24
     7fe:	31 1d       	adc	r19, r1
     800:	39 8b       	std	Y+17, r19	; 0x11
     802:	28 8b       	std	Y+16, r18	; 0x10

			date = bcd2dec(data[4]);
			ltm.tm_mday = date;                         /* month day 1 to 31 */

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     804:	1f 5f       	subi	r17, 0xFF	; 255
     806:	01 13       	cpse	r16, r17
     808:	f3 cf       	rjmp	.-26     	; 0x7f0 <_Z13RTC_get_epochv+0xda>
			{
				ltm.tm_yday += month_length(year, mon);;
			}

			ltm.tm_yday += (ltm.tm_mday - 1);
     80a:	8b 85       	ldd	r24, Y+11	; 0x0b
     80c:	08 2e       	mov	r0, r24
     80e:	00 0c       	add	r0, r0
     810:	99 0b       	sbc	r25, r25
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	28 89       	ldd	r18, Y+16	; 0x10
     816:	39 89       	ldd	r19, Y+17	; 0x11
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	99 8b       	std	Y+17, r25	; 0x11
     81e:	88 8b       	std	Y+16, r24	; 0x10

			seconds = bcd2dec(data[0]);
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     826:	18 2f       	mov	r17, r24
			minutes = bcd2dec(data[1]);
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>

			ltm.tm_hour = hours;
     82e:	da 86       	std	Y+10, r13	; 0x0a
			ltm.tm_min = minutes;
     830:	89 87       	std	Y+9, r24	; 0x09
			ltm.tm_sec = seconds;
     832:	18 87       	std	Y+8, r17	; 0x08

			epoch = epoch_from_ltm(&ltm);
     834:	ce 01       	movw	r24, r28
     836:	08 96       	adiw	r24, 0x08	; 8
     838:	0e 94 11 03 	call	0x622	; 0x622 <_Z14epoch_from_ltmP2tm>
     83c:	03 c0       	rjmp	.+6      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		return(epoch);
	}

	time_t RTC_get_epoch(void)
	{
		time_t epoch = 0;
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	cb 01       	movw	r24, r22

			epoch = epoch_from_ltm(&ltm);
		}

		return( epoch);
	}
     844:	63 96       	adiw	r28, 0x13	; 19
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	08 95       	ret

00000860 <_Z16RTC_String2EpochPbPc>:


/* Returns the UNIX epoch value for the character string passed in datetime. If datetime is null then it returns
the UNIX epoch for the time held in the DS3231 RTC. If error is not null then it holds 1 if an error occurred */
	time_t RTC_String2Epoch(bool *error, char *datetime)
	{
     860:	7f 92       	push	r7
     862:	8f 92       	push	r8
     864:	9f 92       	push	r9
     866:	af 92       	push	r10
     868:	bf 92       	push	r11
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	2c 97       	sbiw	r28, 0x0c	; 12
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	6c 01       	movw	r12, r24
     88c:	8b 01       	movw	r16, r22
		time_t epoch = 0;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };

		struct tm ltm = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
     88e:	fe 01       	movw	r30, r28
     890:	31 96       	adiw	r30, 0x01	; 1
     892:	8c e0       	ldi	r24, 0x0C	; 12
     894:	df 01       	movw	r26, r30
     896:	1d 92       	st	X+, r1
     898:	8a 95       	dec	r24
     89a:	e9 f7       	brne	.-6      	; 0x896 <_Z16RTC_String2EpochPbPc+0x36>
		uint8_t date;
		uint8_t hours;
		uint8_t minutes;
		uint8_t seconds;

		if(datetime)                            /* String format "YYMMDDhhmmss" */
     89c:	61 15       	cp	r22, r1
     89e:	71 05       	cpc	r23, r1
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <_Z16RTC_String2EpochPbPc+0x44>
     8a2:	64 c0       	rjmp	.+200    	; 0x96c <__stack+0x6d>
		{
			data[0] = char2bcd(&datetime[10]);  /* seconds in BCD */
     8a4:	cb 01       	movw	r24, r22
     8a6:	0a 96       	adiw	r24, 0x0a	; 10
     8a8:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     8ac:	a8 2e       	mov	r10, r24
			data[1] = char2bcd(&datetime[8]);   /* minutes in BCD */
     8ae:	c8 01       	movw	r24, r16
     8b0:	08 96       	adiw	r24, 0x08	; 8
     8b2:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     8b6:	b8 2e       	mov	r11, r24
			data[2] = char2bcd(&datetime[6]);   /* hours in BCD */
     8b8:	c8 01       	movw	r24, r16
     8ba:	06 96       	adiw	r24, 0x06	; 6
     8bc:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     8c0:	f8 2e       	mov	r15, r24
			/* data[3] =  not used */
			data[4] = char2bcd(&datetime[4]);   /* day of month in BCD */
     8c2:	c8 01       	movw	r24, r16
     8c4:	04 96       	adiw	r24, 0x04	; 4
     8c6:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     8ca:	88 2e       	mov	r8, r24
			data[5] = char2bcd(&datetime[2]);   /* month in BCD */
     8cc:	c8 01       	movw	r24, r16
     8ce:	02 96       	adiw	r24, 0x02	; 2
     8d0:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     8d4:	78 2e       	mov	r7, r24
			data[6] = char2bcd(&datetime[0]);   /* 2-digit year in BCD */
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     8dc:	18 2f       	mov	r17, r24

			hours = bcd2dec(data[2]); /* Must be calculated here */
     8de:	8f 2d       	mov	r24, r15
     8e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     8e4:	98 2e       	mov	r9, r24

			year += (int16_t)bcd2dec(data[6]);
     8e6:	81 2f       	mov	r24, r17
     8e8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     8ec:	e8 2e       	mov	r14, r24
     8ee:	f1 2c       	mov	r15, r1
			ltm.tm_year = year;                         /* year since 1900 */
     8f0:	c7 01       	movw	r24, r14
     8f2:	8c 59       	subi	r24, 0x9C	; 156
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	98 87       	std	Y+8, r25	; 0x08
     8f8:	8f 83       	std	Y+7, r24	; 0x07

			year += 1900;                               /* adjust year to calendar year */
     8fa:	b0 e3       	ldi	r27, 0x30	; 48
     8fc:	eb 1a       	sub	r14, r27
     8fe:	b8 ef       	ldi	r27, 0xF8	; 248
     900:	fb 0a       	sbc	r15, r27

			month = bcd2dec(data[5]);
     902:	87 2d       	mov	r24, r7
     904:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     908:	08 2f       	mov	r16, r24
			ltm.tm_mon = month - 1;                     /* mon 0 to 11 */
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	80 0f       	add	r24, r16
     90e:	8e 83       	std	Y+6, r24	; 0x06

			date = bcd2dec(data[4]);
     910:	88 2d       	mov	r24, r8
     912:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
			ltm.tm_mday = date;                         /* month day 1 to 31 */
     916:	8c 83       	std	Y+4, r24	; 0x04

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     918:	02 30       	cpi	r16, 0x02	; 2
     91a:	70 f0       	brcs	.+28     	; 0x938 <__stack+0x39>
     91c:	11 e0       	ldi	r17, 0x01	; 1
			{
				ltm.tm_yday += month_length(year, mon);;
     91e:	61 2f       	mov	r22, r17
     920:	c7 01       	movw	r24, r14
     922:	0e 94 43 01 	call	0x286	; 0x286 <month_length>
     926:	29 85       	ldd	r18, Y+9	; 0x09
     928:	3a 85       	ldd	r19, Y+10	; 0x0a
     92a:	28 0f       	add	r18, r24
     92c:	31 1d       	adc	r19, r1
     92e:	3a 87       	std	Y+10, r19	; 0x0a
     930:	29 87       	std	Y+9, r18	; 0x09

			date = bcd2dec(data[4]);
			ltm.tm_mday = date;                         /* month day 1 to 31 */

			ltm.tm_yday = 0;
			for(uint8_t mon = 1; mon < month; mon++)    /* months from 1 to 11 (excludes partial month) */
     932:	1f 5f       	subi	r17, 0xFF	; 255
     934:	01 13       	cpse	r16, r17
     936:	f3 cf       	rjmp	.-26     	; 0x91e <__stack+0x1f>
			{
				ltm.tm_yday += month_length(year, mon);;
			}

			ltm.tm_yday += (ltm.tm_mday - 1);
     938:	8c 81       	ldd	r24, Y+4	; 0x04
     93a:	08 2e       	mov	r0, r24
     93c:	00 0c       	add	r0, r0
     93e:	99 0b       	sbc	r25, r25
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	29 85       	ldd	r18, Y+9	; 0x09
     944:	3a 85       	ldd	r19, Y+10	; 0x0a
     946:	82 0f       	add	r24, r18
     948:	93 1f       	adc	r25, r19
     94a:	9a 87       	std	Y+10, r25	; 0x0a
     94c:	89 87       	std	Y+9, r24	; 0x09

			seconds = bcd2dec(data[0]);
     94e:	8a 2d       	mov	r24, r10
     950:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     954:	18 2f       	mov	r17, r24
			minutes = bcd2dec(data[1]);
     956:	8b 2d       	mov	r24, r11
     958:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>

			ltm.tm_hour = hours;
     95c:	9b 82       	std	Y+3, r9	; 0x03
			ltm.tm_min = minutes;
     95e:	8a 83       	std	Y+2, r24	; 0x02
			ltm.tm_sec = seconds;
     960:	19 83       	std	Y+1, r17	; 0x01

			epoch = epoch_from_ltm(&ltm);
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 11 03 	call	0x622	; 0x622 <_Z14epoch_from_ltmP2tm>
     96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
		}
		else
		{
			epoch = RTC_get_epoch();
     96c:	0e 94 8b 03 	call	0x716	; 0x716 <_Z13RTC_get_epochv>
		}

		if(error)
     970:	c1 14       	cp	r12, r1
     972:	d1 04       	cpc	r13, r1
     974:	49 f0       	breq	.+18     	; 0x988 <__stack+0x89>
		{
			*error = (epoch == 0);
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	61 15       	cp	r22, r1
     97a:	71 05       	cpc	r23, r1
     97c:	81 05       	cpc	r24, r1
     97e:	91 05       	cpc	r25, r1
     980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	f6 01       	movw	r30, r12
     986:	20 83       	st	Z, r18
		}

		return(epoch);
	}
     988:	2c 96       	adiw	r28, 0x0c	; 12
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	af 90       	pop	r10
     9a8:	9f 90       	pop	r9
     9aa:	8f 90       	pop	r8
     9ac:	7f 90       	pop	r7
     9ae:	08 95       	ret

000009b0 <_Z16RTC_set_datetimePc>:
		return( epoch);
	}


	BOOL RTC_set_datetime(char *datetime)
	{
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	27 97       	sbiw	r28, 0x07	; 7
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
		BOOL failure = TRUE;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
     9c8:	fe 01       	movw	r30, r28
     9ca:	31 96       	adiw	r30, 0x01	; 1
     9cc:	27 e0       	ldi	r18, 0x07	; 7
     9ce:	df 01       	movw	r26, r30
     9d0:	1d 92       	st	X+, r1
     9d2:	2a 95       	dec	r18
     9d4:	e9 f7       	brne	.-6      	; 0x9d0 <_Z16RTC_set_datetimePc+0x20>

		if(datetime)                            /* String format "YYMMDDhhmmss" */
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	31 f1       	breq	.+76     	; 0xa26 <_Z16RTC_set_datetimePc+0x76>
     9da:	8c 01       	movw	r16, r24
		{
			data[0] = char2bcd(&datetime[10]);  /* seconds in BCD */
     9dc:	0a 96       	adiw	r24, 0x0a	; 10
     9de:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     9e2:	89 83       	std	Y+1, r24	; 0x01
			data[1] = char2bcd(&datetime[8]);   /* minutes in BCD */
     9e4:	c8 01       	movw	r24, r16
     9e6:	08 96       	adiw	r24, 0x08	; 8
     9e8:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     9ec:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = char2bcd(&datetime[6]);   /* hours in BCD 24-hour format */
     9ee:	c8 01       	movw	r24, r16
     9f0:	06 96       	adiw	r24, 0x06	; 6
     9f2:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     9f6:	8b 83       	std	Y+3, r24	; 0x03
			/* data[3] =  not used */
			data[4] = char2bcd(&datetime[4]);   /* day of month in BCD */
     9f8:	c8 01       	movw	r24, r16
     9fa:	04 96       	adiw	r24, 0x04	; 4
     9fc:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     a00:	8d 83       	std	Y+5, r24	; 0x05
			data[5] = char2bcd(&datetime[2]);   /* month in BCD */
     a02:	c8 01       	movw	r24, r16
     a04:	02 96       	adiw	r24, 0x02	; 2
     a06:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     a0a:	8e 83       	std	Y+6, r24	; 0x06
			data[6] = char2bcd(&datetime[0]);   /* 2-digit year in BCD */
     a0c:	c8 01       	movw	r24, r16
     a0e:	0e 94 08 03 	call	0x610	; 0x610 <_Z8char2bcdPc>
     a12:	8f 83       	std	Y+7, r24	; 0x07

			failure = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7);
     a14:	27 e0       	ldi	r18, 0x07	; 7
     a16:	ae 01       	movw	r20, r28
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	80 ed       	ldi	r24, 0xD0	; 208
     a20:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <i2c_device_write>
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <_Z16RTC_set_datetimePc+0x78>
	}


	BOOL RTC_set_datetime(char *datetime)
	{
		BOOL failure = TRUE;
     a26:	81 e0       	ldi	r24, 0x01	; 1

			failure = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 7);
		}

		return(failure);
	}
     a28:	27 96       	adiw	r28, 0x07	; 7
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <_Z10RTC_1s_sqwh>:


	BOOL RTC_1s_sqw(BOOL enable)
	{
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	1f 92       	push	r1
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
		BOOL fail;

		if(enable)
     a48:	88 23       	and	r24, r24
     a4a:	51 f0       	breq	.+20     	; 0xa60 <_Z10RTC_1s_sqwh+0x22>
		{
			uint8_t byte = 0x00;
     a4c:	19 82       	std	Y+1, r1	; 0x01
			fail = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_CONTROL, &byte, 1);
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	ae 01       	movw	r20, r28
     a52:	4f 5f       	subi	r20, 0xFF	; 255
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	6e e0       	ldi	r22, 0x0E	; 14
     a58:	80 ed       	ldi	r24, 0xD0	; 208
     a5a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <i2c_device_write>
     a5e:	0a c0       	rjmp	.+20     	; 0xa74 <_Z10RTC_1s_sqwh+0x36>
		}
		else
		{
			uint8_t byte = 0x04;
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	89 83       	std	Y+1, r24	; 0x01
			fail = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_CONTROL, &byte, 1);
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	ae 01       	movw	r20, r28
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	6e e0       	ldi	r22, 0x0E	; 14
     a6e:	80 ed       	ldi	r24, 0xD0	; 208
     a70:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <i2c_device_write>
		}

		return(fail);
	}
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <_Z25ds3231_sync2nearestMinutev>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	27 97       	sbiw	r28, 0x07	; 7
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
	BOOL err = FALSE;
	uint8_t data[7] = { 0, 0, 0 };
     a96:	ae 01       	movw	r20, r28
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	87 e0       	ldi	r24, 0x07	; 7
     a9e:	fa 01       	movw	r30, r20
     aa0:	11 92       	st	Z+, r1
     aa2:	8a 95       	dec	r24
     aa4:	e9 f7       	brne	.-6      	; 0xaa0 <_Z25ds3231_sync2nearestMinutev+0x24>

	if(!i2c_device_read(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 3))
     aa6:	23 e0       	ldi	r18, 0x03	; 3
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	80 ed       	ldi	r24, 0xD0	; 208
     aac:	0e 94 40 0b 	call	0x1680	; 0x1680 <i2c_device_read>
     ab0:	81 11       	cpse	r24, r1
     ab2:	79 c0       	rjmp	.+242    	; 0xba6 <_Z25ds3231_sync2nearestMinutev+0x12a>
		uint8_t hour10;
		uint8_t hour;
		BOOL am_pm;
		BOOL twelvehour;

		seconds = bcd2dec(data[0]);
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
     aba:	08 2f       	mov	r16, r24
		minutes = bcd2dec(data[1]);
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
     ac2:	1b 81       	ldd	r17, Y+3	; 0x03
     ac4:	41 2f       	mov	r20, r17
     ac6:	50 e0       	ldi	r21, 0x00	; 0
		hour10 = ((data[2] >> 4) & 0x01);
     ac8:	9a 01       	movw	r18, r20
     aca:	35 95       	asr	r19
     acc:	27 95       	ror	r18
     ace:	35 95       	asr	r19
     ad0:	27 95       	ror	r18
     ad2:	35 95       	asr	r19
     ad4:	27 95       	ror	r18
     ad6:	35 95       	asr	r19
     ad8:	27 95       	ror	r18
     ada:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
     adc:	1f 70       	andi	r17, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);
     ade:	ba 01       	movw	r22, r20
     ae0:	06 2e       	mov	r0, r22
     ae2:	67 2f       	mov	r22, r23
     ae4:	00 0c       	add	r0, r0
     ae6:	66 1f       	adc	r22, r22
     ae8:	77 0b       	sbc	r23, r23
     aea:	00 0c       	add	r0, r0
     aec:	66 1f       	adc	r22, r22
     aee:	77 1f       	adc	r23, r23

		if(!twelvehour && am_pm)
     af0:	f6 2f       	mov	r31, r22
     af2:	f1 70       	andi	r31, 0x01	; 1
     af4:	ff 2e       	mov	r15, r31
     af6:	60 fd       	sbrc	r22, 0
     af8:	0c c0       	rjmp	.+24     	; 0xb12 <_Z25ds3231_sync2nearestMinutev+0x96>
     afa:	55 95       	asr	r21
     afc:	47 95       	ror	r20
     afe:	55 95       	asr	r21
     b00:	47 95       	ror	r20
     b02:	55 95       	asr	r21
     b04:	47 95       	ror	r20
     b06:	55 95       	asr	r21
     b08:	47 95       	ror	r20
     b0a:	55 95       	asr	r21
     b0c:	47 95       	ror	r20
     b0e:	40 fd       	sbrc	r20, 0
		{
			hour10 = 2;
     b10:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
     b12:	22 0f       	add	r18, r18
     b14:	92 2f       	mov	r25, r18
     b16:	99 0f       	add	r25, r25
     b18:	99 0f       	add	r25, r25
     b1a:	29 0f       	add	r18, r25
     b1c:	12 0f       	add	r17, r18

		if(seconds > 30)
     b1e:	0f 31       	cpi	r16, 0x1F	; 31
     b20:	58 f0       	brcs	.+22     	; 0xb38 <_Z25ds3231_sync2nearestMinutev+0xbc>
		{
			minutes++;
     b22:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
     b24:	8c 33       	cpi	r24, 0x3C	; 60
     b26:	40 f0       	brcs	.+16     	; 0xb38 <_Z25ds3231_sync2nearestMinutev+0xbc>
			{
				minutes = 0;
				hours++;
     b28:	1f 5f       	subi	r17, 0xFF	; 255
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	18 31       	cpi	r17, 0x18	; 24
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <_Z25ds3231_sync2nearestMinutev+0xb6>
     b30:	80 e0       	ldi	r24, 0x00	; 0
					err = TRUE;
				}
			}
		}

		if(!err)
     b32:	18 31       	cpi	r17, 0x18	; 24
     b34:	c8 f5       	brcc	.+114    	; 0xba8 <_Z25ds3231_sync2nearestMinutev+0x12c>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
     b36:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		if(!err)
		{
			data[0] = 0; /* seconds = 00 */
     b38:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
     b3a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_Z7dec2bcdh>
     b3e:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;

			if(twelvehour)
     b40:	ff 20       	and	r15, r15
     b42:	69 f0       	breq	.+26     	; 0xb5e <_Z25ds3231_sync2nearestMinutev+0xe2>
			{
				data[2] |= 0x40; /* set  12-hour bit */

				if(hours >= 12)
     b44:	1c 30       	cpi	r17, 0x0C	; 12
     b46:	18 f4       	brcc	.+6      	; 0xb4e <_Z25ds3231_sync2nearestMinutev+0xd2>
			data[1] = dec2bcd(minutes);
			data[2] = 0;

			if(twelvehour)
			{
				data[2] |= 0x40; /* set  12-hour bit */
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_Z25ds3231_sync2nearestMinutev+0xd6>

				if(hours >= 12)
				{
					data[2] |= 0x20; /* set pm bit */
     b4e:	80 e6       	ldi	r24, 0x60	; 96
     b50:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
     b52:	1a 30       	cpi	r17, 0x0A	; 10
     b54:	78 f0       	brcs	.+30     	; 0xb74 <_Z25ds3231_sync2nearestMinutev+0xf8>
				{
					data[2] |= 0x10;
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <_Z25ds3231_sync2nearestMinutev+0xf8>
				}
			}
			else
			{
				if(hours >= 20)
     b5e:	14 31       	cpi	r17, 0x14	; 20
     b60:	18 f0       	brcs	.+6      	; 0xb68 <_Z25ds3231_sync2nearestMinutev+0xec>
				{
					data[2] |= 0x20; /* set 20 bit */
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	8b 83       	std	Y+3, r24	; 0x03
     b66:	06 c0       	rjmp	.+12     	; 0xb74 <_Z25ds3231_sync2nearestMinutev+0xf8>
				}
				else if(hours >= 10)
     b68:	1a 30       	cpi	r17, 0x0A	; 10
     b6a:	10 f4       	brcc	.+4      	; 0xb70 <_Z25ds3231_sync2nearestMinutev+0xf4>

		if(!err)
		{
			data[0] = 0; /* seconds = 00 */
			data[1] = dec2bcd(minutes);
			data[2] = 0;
     b6c:	1b 82       	std	Y+3, r1	; 0x03
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <_Z25ds3231_sync2nearestMinutev+0xf8>
				{
					data[2] |= 0x20; /* set 20 bit */
				}
				else if(hours >= 10)
				{
					data[2] |= 0x10; /* set 10 bit */
     b70:	80 e1       	ldi	r24, 0x10	; 16
     b72:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
     b74:	8d ec       	ldi	r24, 0xCD	; 205
     b76:	18 9f       	mul	r17, r24
     b78:	81 2d       	mov	r24, r1
     b7a:	11 24       	eor	r1, r1
     b7c:	86 95       	lsr	r24
     b7e:	86 95       	lsr	r24
     b80:	86 95       	lsr	r24
     b82:	88 0f       	add	r24, r24
     b84:	98 2f       	mov	r25, r24
     b86:	99 0f       	add	r25, r25
     b88:	99 0f       	add	r25, r25
     b8a:	89 0f       	add	r24, r25
     b8c:	18 1b       	sub	r17, r24
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	18 2b       	or	r17, r24
     b92:	1b 83       	std	Y+3, r17	; 0x03
			err = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 3);
     b94:	23 e0       	ldi	r18, 0x03	; 3
     b96:	ae 01       	movw	r20, r28
     b98:	4f 5f       	subi	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	80 ed       	ldi	r24, 0xD0	; 208
     ba0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <i2c_device_write>
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <_Z25ds3231_sync2nearestMinutev+0x12c>
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
     ba6:	80 e0       	ldi	r24, 0x00	; 0
			err = i2c_device_write(DS3231_BUS_BASE_ADDR, RTC_SECONDS, data, 3);
		}
	}

	return err;
}
     ba8:	27 96       	adiw	r28, 0x07	; 7
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	08 95       	ret

00000bc0 <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     bc0:	08 95       	ret

00000bc2 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     bc2:	08 95       	ret

00000bc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     bcc:	41 15       	cp	r20, r1
     bce:	51 05       	cpc	r21, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     bd2:	75 c0       	rjmp	.+234    	; 0xcbe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
	{
		return;
	}

	switch(v)
     bd4:	86 2f       	mov	r24, r22
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	fc 01       	movw	r30, r24
     bda:	3b 97       	sbiw	r30, 0x0b	; 11
     bdc:	ee 30       	cpi	r30, 0x0E	; 14
     bde:	f1 05       	cpc	r31, r1
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     be2:	6d c0       	rjmp	.+218    	; 0xcbe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
     be4:	da 01       	movw	r26, r20
     be6:	e6 59       	subi	r30, 0x96	; 150
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     bee:	82 e8       	ldi	r24, 0x82	; 130
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	5f c0       	rjmp	.+190    	; 0xcb2 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xee>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     bf4:	8c e7       	ldi	r24, 0x7C	; 124
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	55 c0       	rjmp	.+170    	; 0xca4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     bfa:	87 e2       	ldi	r24, 0x27	; 39
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	49 c0       	rjmp	.+146    	; 0xc92 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     c00:	8a 01       	movw	r16, r20
     c02:	0f 5f       	subi	r16, 0xFF	; 255
     c04:	1f 4f       	sbci	r17, 0xFF	; 255
     c06:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     c08:	66 23       	and	r22, r22
     c0a:	71 f0       	breq	.+28     	; 0xc28 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     c0c:	c0 e0       	ldi	r28, 0x00	; 0
     c0e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	ce 01       	movw	r24, r28
     c14:	89 51       	subi	r24, 0x19	; 25
     c16:	9d 4f       	sbci	r25, 0xFD	; 253
     c18:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <eeprom_update_byte>
				c = *char_addr++;
     c1c:	f8 01       	movw	r30, r16
     c1e:	61 91       	ld	r22, Z+
     c20:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     c22:	61 11       	cpse	r22, r1
     c24:	f5 cf       	rjmp	.-22     	; 0xc10 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     c28:	c0 e0       	ldi	r28, 0x00	; 0
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	ce 01       	movw	r24, r28
     c30:	88 51       	subi	r24, 0x18	; 24
     c32:	9d 4f       	sbci	r25, 0xFD	; 253
     c34:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <eeprom_update_byte>
		}
		break;
     c38:	42 c0       	rjmp	.+132    	; 0xcbe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     c3a:	8a 01       	movw	r16, r20
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     c42:	66 23       	and	r22, r22
     c44:	91 f0       	breq	.+36     	; 0xc6a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     c46:	c0 e0       	ldi	r28, 0x00	; 0
     c48:	d0 e0       	ldi	r29, 0x00	; 0
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     c4c:	c8 30       	cpi	r28, 0x08	; 8
     c4e:	d1 05       	cpc	r29, r1
     c50:	71 f0       	breq	.+28     	; 0xc6e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     c52:	21 96       	adiw	r28, 0x01	; 1
     c54:	ce 01       	movw	r24, r28
     c56:	84 5e       	subi	r24, 0xE4	; 228
     c58:	9c 4f       	sbci	r25, 0xFC	; 252
     c5a:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <eeprom_update_byte>
				c = *uint8_addr++;
     c5e:	f8 01       	movw	r30, r16
     c60:	61 91       	ld	r22, Z+
     c62:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     c64:	61 11       	cpse	r22, r1
     c66:	f2 cf       	rjmp	.-28     	; 0xc4c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	ce 01       	movw	r24, r28
     c72:	83 5e       	subi	r24, 0xE3	; 227
     c74:	9c 4f       	sbci	r25, 0xFC	; 252
     c76:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <eeprom_update_byte>
		}
		break;
     c7a:	21 c0       	rjmp	.+66     	; 0xcbe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     c7c:	89 e2       	ldi	r24, 0x29	; 41
     c7e:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>

		case Ptt_periodic_reset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.ptt_periodic_reset);
     c82:	8a e2       	ldi	r24, 0x2A	; 42
     c84:	93 e0       	ldi	r25, 0x03	; 3
		}
		break;
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     c88:	86 e2       	ldi	r24, 0x26	; 38
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xce>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     c8e:	88 e2       	ldi	r24, 0x28	; 40
     c90:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     c92:	6c 91       	ld	r22, X
     c94:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <eeprom_update_byte>
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     c9a:	8a e7       	ldi	r24, 0x7A	; 122
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xe0>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     ca4:	6d 91       	ld	r22, X+
     ca6:	7c 91       	ld	r23, X
     ca8:	0e 94 12 37 	call	0x6e24	; 0x6e24 <eeprom_update_word>
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfa>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     cae:	8e e7       	ldi	r24, 0x7E	; 126
     cb0:	90 e0       	ldi	r25, 0x00	; 0
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     cb2:	4d 91       	ld	r20, X+
     cb4:	5d 91       	ld	r21, X+
     cb6:	6d 91       	ld	r22, X+
     cb8:	7c 91       	ld	r23, X
     cba:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <eeprom_update_dword>
	}
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     cd4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <lb_enabled>
     cd8:	88 23       	and	r24, r24
     cda:	09 f4       	brne	.+2      	; 0xcde <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     cdc:	46 c0       	rjmp	.+140    	; 0xd6a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     cde:	8c 2f       	mov	r24, r28
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	8b 30       	cpi	r24, 0x0B	; 11
     ce4:	91 05       	cpc	r25, r1
     ce6:	08 f0       	brcs	.+2      	; 0xcea <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     ce8:	40 c0       	rjmp	.+128    	; 0xd6a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     cea:	fc 01       	movw	r30, r24
     cec:	e8 58       	subi	r30, 0x88	; 136
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     cf4:	82 eb       	ldi	r24, 0xB2	; 178
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	30 c0       	rjmp	.+96     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     cfa:	8c e0       	ldi	r24, 0x0C	; 12
     cfc:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     cfe:	2d c0       	rjmp	.+90     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     d00:	82 e3       	ldi	r24, 0x32	; 50
     d02:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     d04:	2a c0       	rjmp	.+84     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     d06:	89 e5       	ldi	r24, 0x59	; 89
     d08:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     d0a:	27 c0       	rjmp	.+78     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     d0c:	8a e7       	ldi	r24, 0x7A	; 122
     d0e:	92 e0       	ldi	r25, 0x02	; 2

		}
		break;
     d10:	24 c0       	rjmp	.+72     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     d12:	85 e9       	ldi	r24, 0x95	; 149
     d14:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     d16:	21 c0       	rjmp	.+66     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     d18:	8b ea       	ldi	r24, 0xAB	; 171
     d1a:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     d1c:	1e c0       	rjmp	.+60     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     d1e:	80 ec       	ldi	r24, 0xC0	; 192
     d20:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     d22:	1b c0       	rjmp	.+54     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     d24:	84 ed       	ldi	r24, 0xD4	; 212
     d26:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     d28:	18 c0       	rjmp	.+48     	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     d2a:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     d2c:	cc 23       	and	r28, r28
     d2e:	e9 f0       	breq	.+58     	; 0xd6a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     d30:	8c 2f       	mov	r24, r28
     d32:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <lb_echo_char>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     d36:	78 01       	movw	r14, r16
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	e8 1a       	sub	r14, r24
     d3c:	f8 0a       	sbc	r15, r24
     d3e:	c8 01       	movw	r24, r16
     d40:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     d44:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     d46:	0e 94 8b 0c 	call	0x1916	; 0x1916 <linkbusTxInProgress>
     d4a:	81 11       	cpse	r24, r1
     d4c:	fc cf       	rjmp	.-8      	; 0xd46 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     d4e:	ed cf       	rjmp	.-38     	; 0xd2a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     d50:	86 e8       	ldi	r24, 0x86	; 134
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     d56:	84 ee       	ldi	r24, 0xE4	; 228
     d58:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     d5a:	8c 01       	movw	r16, r24
     d5c:	0f 5f       	subi	r16, 0xFF	; 255
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     d64:	c8 2f       	mov	r28, r24

		while(c)
     d66:	81 11       	cpse	r24, r1
     d68:	e3 cf       	rjmp	.-58     	; 0xd30 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     d8a:	8b 3b       	cpi	r24, 0xBB	; 187
     d8c:	91 05       	cpc	r25, r1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <_ZN13EepromManager11readNonVolsEv+0x1c>
     d90:	b6 c0       	rjmp	.+364    	; 0xefe <_ZN13EepromManager11readNonVolsEv+0x188>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     d92:	86 e2       	ldi	r24, 0x26	; 38
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	85 30       	cpi	r24, 0x05	; 5
     d9e:	91 05       	cpc	r25, r1
     da0:	14 f4       	brge	.+4      	; 0xda6 <_ZN13EepromManager11readNonVolsEv+0x30>
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	85 31       	cpi	r24, 0x15	; 21
     da8:	91 05       	cpc	r25, r1
     daa:	14 f0       	brlt	.+4      	; 0xdb0 <_ZN13EepromManager11readNonVolsEv+0x3a>
     dac:	84 e1       	ldi	r24, 0x14	; 20
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
     db4:	87 e2       	ldi	r24, 0x27	; 39
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     dbc:	82 31       	cpi	r24, 0x12	; 18
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <_ZN13EepromManager11readNonVolsEv+0x4c>
     dc0:	81 e1       	ldi	r24, 0x11	; 17
     dc2:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_fox>
		g_AM_audio_frequency = (AM_Tone_Freq_t)eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     dc6:	88 e2       	ldi	r24, 0x28	; 40
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     dce:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     dd2:	8a e7       	ldi	r24, 0x7A	; 122
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <eeprom_read_word>
     dda:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_atmega_temp_calibration+0x1>
     dde:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     de2:	8c e7       	ldi	r24, 0x7C	; 124
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <eeprom_read_word>
     dea:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <g_rv3028_offset+0x1>
     dee:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <g_rv3028_offset>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     df2:	8e e7       	ldi	r24, 0x7E	; 126
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <eeprom_read_dword>
     dfa:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <g_event_start_epoch>
     dfe:	70 93 4e 05 	sts	0x054E, r23	; 0x80054e <g_event_start_epoch+0x1>
     e02:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_event_start_epoch+0x2>
     e06:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     e0a:	82 e8       	ldi	r24, 0x82	; 130
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <eeprom_read_dword>
     e12:	60 93 49 05 	sts	0x0549, r22	; 0x800549 <g_event_finish_epoch>
     e16:	70 93 4a 05 	sts	0x054A, r23	; 0x80054a <g_event_finish_epoch+0x1>
     e1a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <g_event_finish_epoch+0x2>
     e1e:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     e22:	89 e2       	ldi	r24, 0x29	; 41
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     e2a:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_utc_offset>
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));
     e2e:	8a e2       	ldi	r24, 0x2A	; 42
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     e36:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_ptt_periodic_reset_enabled>
     e3a:	08 ee       	ldi	r16, 0xE8	; 232
     e3c:	12 e0       	ldi	r17, 0x02	; 2
     e3e:	cd ee       	ldi	r28, 0xED	; 237
     e40:	d4 e0       	ldi	r29, 0x04	; 4
     e42:	0f 2e       	mov	r0, r31
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	ef 2e       	mov	r14, r31
     e48:	f5 e0       	ldi	r31, 0x05	; 5
     e4a:	ff 2e       	mov	r15, r31
     e4c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     e4e:	c8 01       	movw	r24, r16
     e50:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     e54:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     e56:	81 11       	cpse	r24, r1
     e58:	0b c0       	rjmp	.+22     	; 0xe70 <_ZN13EepromManager11readNonVolsEv+0xfa>
     e5a:	0d e1       	ldi	r16, 0x1D	; 29
     e5c:	13 e0       	ldi	r17, 0x03	; 3
     e5e:	ca e0       	ldi	r28, 0x0A	; 10
     e60:	d5 e0       	ldi	r29, 0x05	; 5
     e62:	0f 2e       	mov	r0, r31
     e64:	f2 e1       	ldi	r31, 0x12	; 18
     e66:	ef 2e       	mov	r14, r31
     e68:	f5 e0       	ldi	r31, 0x05	; 5
     e6a:	ff 2e       	mov	r15, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <_ZN13EepromManager11readNonVolsEv+0x106>
     e70:	0f 5f       	subi	r16, 0xFF	; 255
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
		g_ptt_periodic_reset_enabled = eeprom_read_byte(&(EepromManager::ee_vars.ptt_periodic_reset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     e74:	ce 15       	cp	r28, r14
     e76:	df 05       	cpc	r29, r15
     e78:	51 f7       	brne	.-44     	; 0xe4e <_ZN13EepromManager11readNonVolsEv+0xd8>
     e7a:	ef cf       	rjmp	.-34     	; 0xe5a <_ZN13EepromManager11readNonVolsEv+0xe4>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     e7c:	c8 01       	movw	r24, r16
     e7e:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     e82:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     e84:	88 23       	and	r24, r24
     e86:	29 f0       	breq	.+10     	; 0xe92 <_ZN13EepromManager11readNonVolsEv+0x11c>
     e88:	0f 5f       	subi	r16, 0xFF	; 255
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     e8c:	ce 15       	cp	r28, r14
     e8e:	df 05       	cpc	r29, r15
     e90:	a9 f7       	brne	.-22     	; 0xe7c <_ZN13EepromManager11readNonVolsEv+0x106>
     e92:	0d ef       	ldi	r16, 0xFD	; 253
     e94:	12 e0       	ldi	r17, 0x02	; 2
     e96:	c4 e2       	ldi	r28, 0x24	; 36
     e98:	d5 e0       	ldi	r29, 0x05	; 5
     e9a:	0f 2e       	mov	r0, r31
     e9c:	f4 e4       	ldi	r31, 0x44	; 68
     e9e:	ef 2e       	mov	r14, r31
     ea0:	f5 e0       	ldi	r31, 0x05	; 5
     ea2:	ff 2e       	mov	r15, r31
     ea4:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     ea6:	c8 01       	movw	r24, r16
     ea8:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <eeprom_read_byte>
     eac:	89 93       	st	Y+, r24
     eae:	0f 5f       	subi	r16, 0xFF	; 255
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     eb2:	ce 15       	cp	r28, r14
     eb4:	df 05       	cpc	r29, r15
     eb6:	b9 f7       	brne	.-18     	; 0xea6 <_ZN13EepromManager11readNonVolsEv+0x130>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     eb8:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
     ebc:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
     ec0:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
     ec4:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
     ec8:	89 2b       	or	r24, r25
     eca:	8a 2b       	or	r24, r26
     ecc:	8b 2b       	or	r24, r27
     ece:	c9 f0       	breq	.+50     	; 0xf02 <_ZN13EepromManager11readNonVolsEv+0x18c>
     ed0:	40 91 49 05 	lds	r20, 0x0549	; 0x800549 <g_event_finish_epoch>
     ed4:	50 91 4a 05 	lds	r21, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
     ed8:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
     edc:	70 91 4c 05 	lds	r23, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
     ee0:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
     ee4:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
     ee8:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
     eec:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
     ef0:	84 17       	cp	r24, r20
     ef2:	95 07       	cpc	r25, r21
     ef4:	a6 07       	cpc	r26, r22
     ef6:	b7 07       	cpc	r27, r23
     ef8:	30 f4       	brcc	.+12     	; 0xf06 <_ZN13EepromManager11readNonVolsEv+0x190>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	19 c0       	rjmp	.+50     	; 0xf30 <_ZN13EepromManager11readNonVolsEv+0x1ba>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <_ZN13EepromManager11readNonVolsEv+0x1ba>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	15 c0       	rjmp	.+42     	; 0xf30 <_ZN13EepromManager11readNonVolsEv+0x1ba>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     f06:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
     f0a:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
     f0e:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
     f12:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
     f16:	80 58       	subi	r24, 0x80	; 128
     f18:	9e 4a       	sbci	r25, 0xAE	; 174
     f1a:	ae 4f       	sbci	r26, 0xFE	; 254
     f1c:	bf 4f       	sbci	r27, 0xFF	; 255
     f1e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <g_event_finish_epoch>
     f22:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <g_event_finish_epoch+0x1>
     f26:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <g_event_finish_epoch+0x2>
     f2a:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     f2e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <_ZN13EepromManager17resetEEPROMValuesEv>:
		lb_send_NewLine();
	}
#endif  /* INIT_EEPROM_ONLY */

void EepromManager::resetEEPROMValues(void)
{
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	0e e1       	ldi	r16, 0x1E	; 30
     f4c:	11 e0       	ldi	r17, 0x01	; 1
     f4e:	ca e0       	ldi	r28, 0x0A	; 10
     f50:	d5 e0       	ldi	r29, 0x05	; 5
     f52:	0f 2e       	mov	r0, r31
     f54:	fe e0       	ldi	r31, 0x0E	; 14
     f56:	ef 2e       	mov	r14, r31
     f58:	f5 e0       	ldi	r31, 0x05	; 5
     f5a:	ff 2e       	mov	r15, r31
     f5c:	f0 2d       	mov	r31, r0
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
	{
		g_unlockCode[i] = *v;
     f5e:	f8 01       	movw	r30, r16
     f60:	61 91       	ld	r22, Z+
     f62:	8f 01       	movw	r16, r30
     f64:	68 83       	st	Y, r22
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 18 37 	call	0x6e30	; 0x6e30 <eeprom_write_byte>
     f6c:	21 96       	adiw	r28, 0x01	; 1
void EepromManager::resetEEPROMValues(void)
{
	uint8_t i;

	uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
	for(i = 0; i < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); i++)
     f6e:	ce 15       	cp	r28, r14
     f70:	df 05       	cpc	r29, r15
     f72:	a9 f7       	brne	.-22     	; 0xf5e <_ZN13EepromManager17resetEEPROMValuesEv+0x20>
	{
		g_unlockCode[i] = *v;
		eeprom_write_byte((uint8_t*)&(g_unlockCode[i]), *v++);
	}

	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	81 e2       	ldi	r24, 0x21	; 33
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 18 37 	call	0x6e30	; 0x6e30 <eeprom_write_byte>
	g_unlockCode[i] = '\0';
     f7e:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_unlockCode+0x4>

	g_messages_text[STATION_ID][0] = '\0';
     f82:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <g_messages_text+0x15>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[0]), 0);
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	88 ee       	ldi	r24, 0xE8	; 232
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <eeprom_write_byte>

	g_AM_audio_frequency = EEPROM_AM_AUDIO_FREQ_DEFAULT;
     f90:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <g_AM_audio_frequency>
	eeprom_write_byte((uint8_t*)&(EepromManager::ee_vars.am_audio_frequency), (uint8_t)g_AM_audio_frequency);
     f94:	60 91 45 05 	lds	r22, 0x0545	; 0x800545 <g_AM_audio_frequency>
     f98:	88 e2       	ldi	r24, 0x28	; 40
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <eeprom_write_byte>

	g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
     fa0:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <g_event_start_epoch>
     fa4:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_event_start_epoch+0x1>
     fa8:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_event_start_epoch+0x2>
     fac:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_event_start_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_start_epoch), g_event_start_epoch);
     fb0:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
     fb4:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
     fb8:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
     fbc:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
     fc0:	8e e7       	ldi	r24, 0x7E	; 126
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <eeprom_write_dword>

	g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
     fc8:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <g_event_finish_epoch>
     fcc:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_event_finish_epoch+0x1>
     fd0:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <g_event_finish_epoch+0x2>
     fd4:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <g_event_finish_epoch+0x3>
	eeprom_write_dword((uint32_t*)&(EepromManager::ee_vars.event_finish_epoch), g_event_finish_epoch);
     fd8:	40 91 49 05 	lds	r20, 0x0549	; 0x800549 <g_event_finish_epoch>
     fdc:	50 91 4a 05 	lds	r21, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
     fe0:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
     fe4:	70 91 4c 05 	lds	r23, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
     fe8:	82 e8       	ldi	r24, 0x82	; 130
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <eeprom_write_dword>
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret

00000ffe <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24

	lb_send_NewLine();
    1004:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <lb_send_NewLine>
	sendEEPROMString(TextVersion);
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	ce 01       	movw	r24, r28
    100c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
    1018:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <lb_send_NewLine>
	lb_send_NewLine();
    101c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <lb_send_NewLine>
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <setAtten>:
#endif  /* ATMEL_STUDIO_7 */

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
    1026:	9c 01       	movw	r18, r24
    1028:	2e 5f       	subi	r18, 0xFE	; 254
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	2b 33       	cpi	r18, 0x3B	; 59
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	38 07       	cpc	r19, r24
    1032:	10 f0       	brcs	.+4      	; 0x1038 <setAtten+0x12>
    1034:	2b e3       	ldi	r18, 0x3B	; 59
    1036:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
    1038:	ad ec       	ldi	r26, 0xCD	; 205
    103a:	bc ec       	ldi	r27, 0xCC	; 204
    103c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	9c 01       	movw	r18, r24
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	28 0f       	add	r18, r24
    1054:	39 1f       	adc	r19, r25
	att /= 5;

	pattern = (uint8_t)att;
    1056:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	96 95       	lsr	r25
    1060:	87 95       	ror	r24
	PORTB = pattern;
    1062:	85 b9       	out	0x05, r24	; 5
    1064:	08 95       	ret

00001066 <setupPortsForF1975>:
}

void setupPortsForF1975(BOOL enable)
{
    1066:	cf 93       	push	r28
    1068:	c8 2f       	mov	r28, r24
#if !SUPPORT_ONLY_80M
	pinMode(PIN_D0, OUTPUT);
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	88 e0       	ldi	r24, 0x08	; 8
    106e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_D1, OUTPUT);
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	89 e0       	ldi	r24, 0x09	; 9
    1076:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_D2, OUTPUT);
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	8a e0       	ldi	r24, 0x0A	; 10
    107e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_D3, OUTPUT);
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	8b e0       	ldi	r24, 0x0B	; 11
    1086:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	8c e0       	ldi	r24, 0x0C	; 12
    108e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_PWDN, OUTPUT);
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	digitalWrite(PIN_PWDN, ON);
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	87 e0       	ldi	r24, 0x07	; 7
    10a6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
#endif // !SUPPORT_ONLY_80M

	if(!enable)
    10aa:	c1 11       	cpse	r28, r1
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <setupPortsForF1975+0x4a>
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
	att -= (att % 5); /* set to nearest multiple of 5 */
	att /= 5;

	pattern = (uint8_t)att;
	PORTB = pattern;
    10ae:	15 b8       	out	0x05, r1	; 5

	if(!enable)
	{
		setAtten(0);
	}
}
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <_ZN8GoertzelC1Eff>:

void Goertzel::Flush(void)
{
	memset(testData, 0x00, _N * sizeof(int));
	ResetGoertzel();
}
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	e4 2e       	mov	r14, r20
    10c2:	f5 2e       	mov	r15, r21
    10c4:	d6 2f       	mov	r29, r22
    10c6:	c7 2f       	mov	r28, r23
    10c8:	00 93 e5 02 	sts	0x02E5, r16	; 0x8002e5 <_SAMPLING_FREQUENCY>
    10cc:	10 93 e6 02 	sts	0x02E6, r17	; 0x8002e6 <_SAMPLING_FREQUENCY+0x1>
    10d0:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <_SAMPLING_FREQUENCY+0x2>
    10d4:	30 93 e8 02 	sts	0x02E8, r19	; 0x8002e8 <_SAMPLING_FREQUENCY+0x3>
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	41 e5       	ldi	r20, 0x51	; 81
    10de:	53 e4       	ldi	r21, 0x43	; 67
    10e0:	6e 2d       	mov	r22, r14
    10e2:	7f 2d       	mov	r23, r15
    10e4:	8d 2f       	mov	r24, r29
    10e6:	9c 2f       	mov	r25, r28
    10e8:	0e 94 df 30 	call	0x61be	; 0x61be <__gesf2>
    10ec:	18 16       	cp	r1, r24
    10ee:	6c f0       	brlt	.+26     	; 0x110a <_ZN8GoertzelC1Eff+0x56>
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	48 ec       	ldi	r20, 0xC8	; 200
    10f6:	52 e4       	ldi	r21, 0x42	; 66
    10f8:	6e 2d       	mov	r22, r14
    10fa:	7f 2d       	mov	r23, r15
    10fc:	8d 2f       	mov	r24, r29
    10fe:	9c 2f       	mov	r25, r28
    1100:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <__cmpsf2>
    1104:	88 23       	and	r24, r24
    1106:	34 f0       	brlt	.+12     	; 0x1114 <_ZN8GoertzelC1Eff+0x60>
    1108:	09 c0       	rjmp	.+18     	; 0x111c <_ZN8GoertzelC1Eff+0x68>
    110a:	e1 2c       	mov	r14, r1
    110c:	f1 2c       	mov	r15, r1
    110e:	d1 e5       	ldi	r29, 0x51	; 81
    1110:	c3 e4       	ldi	r28, 0x43	; 67
    1112:	04 c0       	rjmp	.+8      	; 0x111c <_ZN8GoertzelC1Eff+0x68>
    1114:	e1 2c       	mov	r14, r1
    1116:	f1 2c       	mov	r15, r1
    1118:	d8 ec       	ldi	r29, 0xC8	; 200
    111a:	c2 e4       	ldi	r28, 0x42	; 66
    111c:	6e 2d       	mov	r22, r14
    111e:	7f 2d       	mov	r23, r15
    1120:	8d 2f       	mov	r24, r29
    1122:	9c 2f       	mov	r25, r28
    1124:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__fixsfsi>
    1128:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <_N+0x1>
    112c:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <_N>
    1130:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_N>
    1134:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <_N+0x1>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0e 94 81 32 	call	0x6502	; 0x6502 <malloc>
    1140:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <__data_end+0x1>
    1144:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	08 95       	ret

00001156 <_ZN8GoertzelD1Ev>:
    1156:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    115a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <__data_end+0x1>
    115e:	0e 94 19 33 	call	0x6632	; 0x6632 <free>
    1162:	08 95       	ret

00001164 <_ZN8Goertzel13ResetGoertzelEv>:
    1164:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <Q2>
    1168:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <Q2+0x1>
    116c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <Q2+0x2>
    1170:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <Q2+0x3>
    1174:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <Q1>
    1178:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <Q1+0x1>
    117c:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <Q1+0x2>
    1180:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <Q1+0x3>
    1184:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <_samplesReady>
    1188:	08 95       	ret

0000118a <_ZN8Goertzel18SetTargetFrequencyEf>:

void Goertzel::SetTargetFrequency(float target_frequency)
{
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	ec 01       	movw	r28, r24
    11a0:	4a 01       	movw	r8, r20
    11a2:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
    11a4:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <_N>
    11a8:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <_N+0x1>
    11ac:	07 2e       	mov	r0, r23
    11ae:	00 0c       	add	r0, r0
    11b0:	88 0b       	sbc	r24, r24
    11b2:	99 0b       	sbc	r25, r25
    11b4:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__floatsisf>
    11b8:	6b 01       	movw	r12, r22
    11ba:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /* Ideally, this should be an integer multiple of SAMPLING_RATE/N */
    11bc:	80 92 e1 02 	sts	0x02E1, r8	; 0x8002e1 <_TARGET_FREQUENCY>
    11c0:	90 92 e2 02 	sts	0x02E2, r9	; 0x8002e2 <_TARGET_FREQUENCY+0x1>
    11c4:	a0 92 e3 02 	sts	0x02E3, r10	; 0x8002e3 <_TARGET_FREQUENCY+0x2>
    11c8:	b0 92 e4 02 	sts	0x02E4, r11	; 0x8002e4 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
    11cc:	a5 01       	movw	r20, r10
    11ce:	94 01       	movw	r18, r8
    11d0:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    11d4:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <_SAMPLING_FREQUENCY>
    11d8:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <_SAMPLING_FREQUENCY+0x1>
    11dc:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <_SAMPLING_FREQUENCY+0x2>
    11e0:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <_SAMPLING_FREQUENCY+0x3>
    11e4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <__divsf3>
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	5f e3       	ldi	r21, 0x3F	; 63
    11f0:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    11f4:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__fixsfsi>
    11f8:	07 2e       	mov	r0, r23
    11fa:	00 0c       	add	r0, r0
    11fc:	88 0b       	sbc	r24, r24
    11fe:	99 0b       	sbc	r25, r25
    1200:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__floatsisf>
    1204:	2b ed       	ldi	r18, 0xDB	; 219
    1206:	3f e0       	ldi	r19, 0x0F	; 15
    1208:	49 ec       	ldi	r20, 0xC9	; 201
    120a:	50 e4       	ldi	r21, 0x40	; 64
    120c:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    1210:	a7 01       	movw	r20, r14
    1212:	96 01       	movw	r18, r12
    1214:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <__divsf3>
    1218:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <cos>
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1224:	60 93 db 02 	sts	0x02DB, r22	; 0x8002db <g_coeff>
    1228:	70 93 dc 02 	sts	0x02DC, r23	; 0x8002dc <g_coeff+0x1>
    122c:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <g_coeff+0x2>
    1230:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <g_coeff+0x3>
	ResetGoertzel();
    1234:	ce 01       	movw	r24, r28
    1236:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN8Goertzel13ResetGoertzelEv>
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	9f 90       	pop	r9
    124c:	8f 90       	pop	r8
    124e:	08 95       	ret

00001250 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
    1250:	8f 92       	push	r8
    1252:	9f 92       	push	r9
    1254:	af 92       	push	r10
    1256:	bf 92       	push	r11
    1258:	cf 92       	push	r12
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
    1266:	c0 90 d7 02 	lds	r12, 0x02D7	; 0x8002d7 <Q1>
    126a:	d0 90 d8 02 	lds	r13, 0x02D8	; 0x8002d8 <Q1+0x1>
    126e:	e0 90 d9 02 	lds	r14, 0x02D9	; 0x8002d9 <Q1+0x2>
    1272:	f0 90 da 02 	lds	r15, 0x02DA	; 0x8002da <Q1+0x3>
    1276:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <g_coeff>
    127a:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <g_coeff+0x1>
    127e:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <g_coeff+0x2>
    1282:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <g_coeff+0x3>
    1286:	c7 01       	movw	r24, r14
    1288:	b6 01       	movw	r22, r12
    128a:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    128e:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <Q2>
    1292:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <Q2+0x1>
    1296:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <Q2+0x2>
    129a:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <Q2+0x3>
    129e:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
    12a2:	4b 01       	movw	r8, r22
    12a4:	5c 01       	movw	r10, r24
    12a6:	be 01       	movw	r22, r28
    12a8:	72 50       	subi	r23, 0x02	; 2
    12aa:	07 2e       	mov	r0, r23
    12ac:	00 0c       	add	r0, r0
    12ae:	88 0b       	sbc	r24, r24
    12b0:	99 0b       	sbc	r25, r25
    12b2:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__floatsisf>
    12b6:	9b 01       	movw	r18, r22
    12b8:	ac 01       	movw	r20, r24
    12ba:	c5 01       	movw	r24, r10
    12bc:	b4 01       	movw	r22, r8
    12be:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>

	if(sample > 230)
    12c2:	c7 3e       	cpi	r28, 0xE7	; 231
    12c4:	d1 05       	cpc	r29, r1
    12c6:	54 f0       	brlt	.+20     	; 0x12dc <_ZN8Goertzel13ProcessSampleEi+0x8c>
	{
		highValueCount++;
    12c8:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <highValueCount>
    12cc:	30 91 cf 02 	lds	r19, 0x02CF	; 0x8002cf <highValueCount+0x1>
    12d0:	2f 5f       	subi	r18, 0xFF	; 255
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	30 93 cf 02 	sts	0x02CF, r19	; 0x8002cf <highValueCount+0x1>
    12d8:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <highValueCount>
	}

	Q2 = Q1;
    12dc:	c0 92 d3 02 	sts	0x02D3, r12	; 0x8002d3 <Q2>
    12e0:	d0 92 d4 02 	sts	0x02D4, r13	; 0x8002d4 <Q2+0x1>
    12e4:	e0 92 d5 02 	sts	0x02D5, r14	; 0x8002d5 <Q2+0x2>
    12e8:	f0 92 d6 02 	sts	0x02D6, r15	; 0x8002d6 <Q2+0x3>
	Q1 = Q0;
    12ec:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <Q1>
    12f0:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <Q1+0x1>
    12f4:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <Q1+0x2>
    12f8:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <Q1+0x3>
}
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	08 95       	ret

00001312 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    1312:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_samplesReady>
    1316:	88 23       	and	r24, r24
    1318:	19 f0       	breq	.+6      	; 0x1320 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    131a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_samplesReady>
    131e:	08 95       	ret
	}

	testData[_index] = data;
    1320:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <_index>
    1324:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <_index+0x1>
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
    1330:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <__data_end+0x1>
    1334:	e8 0f       	add	r30, r24
    1336:	f9 1f       	adc	r31, r25
    1338:	71 83       	std	Z+1, r23	; 0x01
    133a:	60 83       	st	Z, r22
	_index++;
    133c:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <_index>
    1340:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <_index+0x1>
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <_index+0x1>
    134a:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <_index>
	if(_index >= _N)
    134e:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <_index>
    1352:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <_index+0x1>
    1356:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_N>
    135a:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <_N+0x1>
    135e:	28 17       	cp	r18, r24
    1360:	39 07       	cpc	r19, r25
    1362:	3c f0       	brlt	.+14     	; 0x1372 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    1364:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <_index+0x1>
    1368:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <_index>
		_samplesReady = true;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <_samplesReady>
	}

	return(_samplesReady);
    1372:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_samplesReady>
}
    1376:	08 95       	ret

00001378 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
    1378:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_samplesReady>
}
    137c:	08 95       	ret

0000137e <_ZN8Goertzel10Magnitude2EPi>:

float Goertzel::Magnitude2(int *highCount)
{
    137e:	4f 92       	push	r4
    1380:	5f 92       	push	r5
    1382:	6f 92       	push	r6
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	00 d0       	rcall	.+0      	; 0x139c <_ZN8Goertzel10Magnitude2EPi+0x1e>
    139c:	00 d0       	rcall	.+0      	; 0x139e <_ZN8Goertzel10Magnitude2EPi+0x20>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	7c 01       	movw	r14, r24
    13a4:	8b 01       	movw	r16, r22
	float magnitude2;

	highValueCount = 0;
    13a6:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <highValueCount+0x1>
    13aa:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <highValueCount>

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
    13ae:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_N>
    13b2:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <_N+0x1>
    13b6:	18 16       	cp	r1, r24
    13b8:	19 06       	cpc	r1, r25
    13ba:	f4 f4       	brge	.+60     	; 0x13f8 <_ZN8Goertzel10Magnitude2EPi+0x7a>
    13bc:	1a 82       	std	Y+2, r1	; 0x02
    13be:	19 82       	std	Y+1, r1	; 0x01
	{
		ProcessSample(testData[index]);
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
    13cc:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
    13d0:	e8 0f       	add	r30, r24
    13d2:	f9 1f       	adc	r31, r25
    13d4:	60 81       	ld	r22, Z
    13d6:	71 81       	ldd	r23, Z+1	; 0x01
    13d8:	c7 01       	movw	r24, r14
    13da:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN8Goertzel13ProcessSampleEi>
	float magnitude2;

	highValueCount = 0;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
    13de:	29 81       	ldd	r18, Y+1	; 0x01
    13e0:	3a 81       	ldd	r19, Y+2	; 0x02
    13e2:	2f 5f       	subi	r18, 0xFF	; 255
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	3a 83       	std	Y+2, r19	; 0x02
    13e8:	29 83       	std	Y+1, r18	; 0x01
    13ea:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_N>
    13ee:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <_N+0x1>
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	24 f3       	brlt	.-56     	; 0x13c0 <_ZN8Goertzel10Magnitude2EPi+0x42>
	{
		ProcessSample(testData[index]);
	}

	if(highCount) *highCount = highValueCount;
    13f8:	01 15       	cp	r16, r1
    13fa:	11 05       	cpc	r17, r1
    13fc:	39 f0       	breq	.+14     	; 0x140c <_ZN8Goertzel10Magnitude2EPi+0x8e>
    13fe:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <highValueCount>
    1402:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <highValueCount+0x1>
    1406:	f8 01       	movw	r30, r16
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	80 83       	st	Z, r24

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
    140c:	40 90 d7 02 	lds	r4, 0x02D7	; 0x8002d7 <Q1>
    1410:	50 90 d8 02 	lds	r5, 0x02D8	; 0x8002d8 <Q1+0x1>
    1414:	60 90 d9 02 	lds	r6, 0x02D9	; 0x8002d9 <Q1+0x2>
    1418:	70 90 da 02 	lds	r7, 0x02DA	; 0x8002da <Q1+0x3>
    141c:	80 90 d3 02 	lds	r8, 0x02D3	; 0x8002d3 <Q2>
    1420:	90 90 d4 02 	lds	r9, 0x02D4	; 0x8002d4 <Q2+0x1>
    1424:	a0 90 d5 02 	lds	r10, 0x02D5	; 0x8002d5 <Q2+0x2>
    1428:	b0 90 d6 02 	lds	r11, 0x02D6	; 0x8002d6 <Q2+0x3>
    142c:	a3 01       	movw	r20, r6
    142e:	92 01       	movw	r18, r4
    1430:	c3 01       	movw	r24, r6
    1432:	b2 01       	movw	r22, r4
    1434:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    1438:	69 83       	std	Y+1, r22	; 0x01
    143a:	7a 83       	std	Y+2, r23	; 0x02
    143c:	8b 83       	std	Y+3, r24	; 0x03
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	a5 01       	movw	r20, r10
    1442:	94 01       	movw	r18, r8
    1444:	c5 01       	movw	r24, r10
    1446:	b4 01       	movw	r22, r8
    1448:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	69 81       	ldd	r22, Y+1	; 0x01
    1452:	7a 81       	ldd	r23, Y+2	; 0x02
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    145c:	69 83       	std	Y+1, r22	; 0x01
    145e:	7a 83       	std	Y+2, r23	; 0x02
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <g_coeff>
    1468:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <g_coeff+0x1>
    146c:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <g_coeff+0x2>
    1470:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <g_coeff+0x3>
    1474:	c3 01       	movw	r24, r6
    1476:	b2 01       	movw	r22, r4
    1478:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    147c:	a5 01       	movw	r20, r10
    147e:	94 01       	movw	r18, r8
    1480:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    1484:	9b 01       	movw	r18, r22
    1486:	ac 01       	movw	r20, r24
    1488:	69 81       	ldd	r22, Y+1	; 0x01
    148a:	7a 81       	ldd	r23, Y+2	; 0x02
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
    1494:	4b 01       	movw	r8, r22
    1496:	5c 01       	movw	r10, r24

	ResetGoertzel();
    1498:	c7 01       	movw	r24, r14
    149a:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
    149e:	c5 01       	movw	r24, r10
    14a0:	b4 01       	movw	r22, r8
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	bf 90       	pop	r11
    14b8:	af 90       	pop	r10
    14ba:	9f 90       	pop	r9
    14bc:	8f 90       	pop	r8
    14be:	7f 90       	pop	r7
    14c0:	6f 90       	pop	r6
    14c2:	5f 90       	pop	r5
    14c4:	4f 90       	pop	r4
    14c6:	08 95       	ret

000014c8 <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    14c8:	e4 e6       	ldi	r30, 0x64	; 100
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 77       	andi	r24, 0x7F	; 127
    14d0:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    14d2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
    14d6:	85 e2       	ldi	r24, 0x25	; 37
    14d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
    14e8:	08 95       	ret

000014ea <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    14ea:	84 ea       	ldi	r24, 0xA4	; 164
    14ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    14f0:	ec eb       	ldi	r30, 0xBC	; 188
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 23       	and	r24, r24
    14f8:	64 f0       	brlt	.+24     	; 0x1512 <i2c_start+0x28>
    14fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    14fe:	81 11       	cpse	r24, r1
    1500:	f9 cf       	rjmp	.-14     	; 0x14f4 <i2c_start+0xa>
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <i2c_start+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    1504:	80 e9       	ldi	r24, 0x90	; 144
    1506:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
    1510:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    1512:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1516:	88 23       	and	r24, r24
    1518:	a9 f3       	breq	.-22     	; 0x1504 <i2c_start+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
    151a:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    151c:	08 95       	ret

0000151e <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    151e:	84 e9       	ldi	r24, 0x94	; 148
    1520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1524:	08 95       	ret

00001526 <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    1526:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
    152a:	84 e8       	ldi	r24, 0x84	; 132
    152c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1530:	ec eb       	ldi	r30, 0xBC	; 188
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	88 23       	and	r24, r24
    1538:	64 f0       	brlt	.+24     	; 0x1552 <i2c_write_success+0x2c>
    153a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    153e:	81 11       	cpse	r24, r1
    1540:	f9 cf       	rjmp	.-14     	; 0x1534 <i2c_write_success+0xe>
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <i2c_write_success+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    1544:	84 e9       	ldi	r24, 0x94	; 148
    1546:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
    1550:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
    1552:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    1556:	88 7f       	andi	r24, 0xF8	; 248
    1558:	86 13       	cpse	r24, r22
    155a:	f4 cf       	rjmp	.-24     	; 0x1544 <i2c_write_success+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
    155c:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    155e:	08 95       	ret

00001560 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    1560:	84 ec       	ldi	r24, 0xC4	; 196
    1562:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1566:	ec eb       	ldi	r30, 0xBC	; 188
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 23       	and	r24, r24
    156e:	24 f0       	brlt	.+8      	; 0x1578 <i2c_read_ack+0x18>
    1570:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1574:	81 11       	cpse	r24, r1
    1576:	f9 cf       	rjmp	.-14     	; 0x156a <i2c_read_ack+0xa>
		{
			;
		}

		return(TWDR);
    1578:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    157c:	08 95       	ret

0000157e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    157e:	84 e8       	ldi	r24, 0x84	; 132
    1580:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    1584:	ec eb       	ldi	r30, 0xBC	; 188
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 23       	and	r24, r24
    158c:	24 f0       	brlt	.+8      	; 0x1596 <i2c_read_nack+0x18>
    158e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
    1592:	81 11       	cpse	r24, r1
    1594:	f9 cf       	rjmp	.-14     	; 0x1588 <i2c_read_nack+0xa>
		{
			;
		}

		return( TWDR);
    1596:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
    159a:	08 95       	ret

0000159c <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    159c:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    15a0:	28 7f       	andi	r18, 0xF8	; 248
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	28 17       	cp	r18, r24
    15a8:	39 07       	cpc	r19, r25
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    15ac:	84 e9       	ldi	r24, 0x94	; 148
    15ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	08 95       	ret
	}

	return(FALSE);
    15b6:	80 e0       	ldi	r24, 0x00	; 0
}
    15b8:	08 95       	ret

000015ba <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <i2c_device_write+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <i2c_device_write+0x8>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <i2c_device_write+0xa>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
    15cc:	5d 83       	std	Y+5, r21	; 0x05
    15ce:	4c 83       	std	Y+4, r20	; 0x04
    15d0:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    15d2:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    15d4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <i2c_start>
		if(i2c_status(TW_START))
    15d8:	88 e0       	ldi	r24, 0x08	; 8
    15da:	0e 94 ce 0a 	call	0x159c	; 0x159c <i2c_status>
    15de:	98 2f       	mov	r25, r24
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	99 23       	and	r25, r25
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <i2c_device_write+0x2e>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	88 23       	and	r24, r24
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <i2c_device_write+0x36>
		{
			return(TRUE);
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <i2c_device_write+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    15f0:	68 e1       	ldi	r22, 0x18	; 24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	0e 94 93 0a 	call	0x1526	; 0x1526 <i2c_write_success>
    15f8:	98 2f       	mov	r25, r24
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	99 23       	and	r25, r25
    15fe:	09 f4       	brne	.+2      	; 0x1602 <i2c_device_write+0x48>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	88 23       	and	r24, r24
    1604:	11 f0       	breq	.+4      	; 0x160a <i2c_device_write+0x50>
		{
			return(TRUE);
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	32 c0       	rjmp	.+100    	; 0x166e <i2c_device_write+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    160a:	68 e2       	ldi	r22, 0x28	; 40
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	0e 94 93 0a 	call	0x1526	; 0x1526 <i2c_write_success>
    1612:	98 2f       	mov	r25, r24
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	99 23       	and	r25, r25
    1618:	09 f4       	brne	.+2      	; 0x161c <i2c_device_write+0x62>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	88 23       	and	r24, r24
    161e:	11 f0       	breq	.+4      	; 0x1624 <i2c_device_write+0x6a>
		{
			return(TRUE);
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	25 c0       	rjmp	.+74     	; 0x166e <i2c_device_write+0xb4>
		}

		while(bytes2write--)
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f ef       	ldi	r25, 0xFF	; 255
    1628:	98 0f       	add	r25, r24
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	88 23       	and	r24, r24
    1630:	09 f4       	brne	.+2      	; 0x1634 <i2c_device_write+0x7a>
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	99 23       	and	r25, r25
    1636:	c1 f0       	breq	.+48     	; 0x1668 <i2c_device_write+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	98 0f       	add	r25, r24
    163e:	99 83       	std	Y+1, r25	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	2c 81       	ldd	r18, Y+4	; 0x04
    1646:	3d 81       	ldd	r19, Y+5	; 0x05
    1648:	82 0f       	add	r24, r18
    164a:	93 1f       	adc	r25, r19
    164c:	fc 01       	movw	r30, r24
    164e:	80 81       	ld	r24, Z
    1650:	68 e2       	ldi	r22, 0x28	; 40
    1652:	0e 94 93 0a 	call	0x1526	; 0x1526 <i2c_write_success>
    1656:	98 2f       	mov	r25, r24
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	99 23       	and	r25, r25
    165c:	09 f4       	brne	.+2      	; 0x1660 <i2c_device_write+0xa6>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	88 23       	and	r24, r24
    1662:	01 f3       	breq	.-64     	; 0x1624 <i2c_device_write+0x6a>
			{
				return(TRUE);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	03 c0       	rjmp	.+6      	; 0x166e <i2c_device_write+0xb4>
			}
		}

		i2c_stop();
    1668:	0e 94 8f 0a 	call	0x151e	; 0x151e <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    166c:	80 e0       	ldi	r24, 0x00	; 0
}
    166e:	26 96       	adiw	r28, 0x06	; 6
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <i2c_device_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 d0       	rcall	.+0      	; 0x168a <i2c_device_read+0xa>
    168a:	00 d0       	rcall	.+0      	; 0x168c <i2c_device_read+0xc>
    168c:	00 d0       	rcall	.+0      	; 0x168e <i2c_device_read+0xe>
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	6b 83       	std	Y+3, r22	; 0x03
    1696:	5d 83       	std	Y+5, r21	; 0x05
    1698:	4c 83       	std	Y+4, r20	; 0x04
    169a:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    169c:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    169e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <i2c_start>
		if(i2c_status(TW_START))
    16a2:	88 e0       	ldi	r24, 0x08	; 8
    16a4:	0e 94 ce 0a 	call	0x159c	; 0x159c <i2c_status>
    16a8:	98 2f       	mov	r25, r24
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	99 23       	and	r25, r25
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <i2c_device_read+0x32>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	88 23       	and	r24, r24
    16b4:	11 f0       	breq	.+4      	; 0x16ba <i2c_device_read+0x3a>
		{
			return(TRUE);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	79 c0       	rjmp	.+242    	; 0x17ac <i2c_device_read+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    16ba:	68 e1       	ldi	r22, 0x18	; 24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	0e 94 93 0a 	call	0x1526	; 0x1526 <i2c_write_success>
    16c2:	98 2f       	mov	r25, r24
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	99 23       	and	r25, r25
    16c8:	09 f4       	brne	.+2      	; 0x16cc <i2c_device_read+0x4c>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	88 23       	and	r24, r24
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <i2c_device_read+0x54>
		{
			return(TRUE);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	6c c0       	rjmp	.+216    	; 0x17ac <i2c_device_read+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    16d4:	68 e2       	ldi	r22, 0x28	; 40
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	0e 94 93 0a 	call	0x1526	; 0x1526 <i2c_write_success>
    16dc:	98 2f       	mov	r25, r24
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	99 23       	and	r25, r25
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <i2c_device_read+0x66>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	88 23       	and	r24, r24
    16e8:	11 f0       	breq	.+4      	; 0x16ee <i2c_device_read+0x6e>
		{
			return(TRUE);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	5f c0       	rjmp	.+190    	; 0x17ac <i2c_device_read+0x12c>
		}

		i2c_start();
    16ee:	0e 94 75 0a 	call	0x14ea	; 0x14ea <i2c_start>
		if(i2c_status(TW_REP_START))
    16f2:	80 e1       	ldi	r24, 0x10	; 16
    16f4:	0e 94 ce 0a 	call	0x159c	; 0x159c <i2c_status>
    16f8:	98 2f       	mov	r25, r24
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	99 23       	and	r25, r25
    16fe:	09 f4       	brne	.+2      	; 0x1702 <i2c_device_read+0x82>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	88 23       	and	r24, r24
    1704:	11 f0       	breq	.+4      	; 0x170a <i2c_device_read+0x8a>
		{
			return(TRUE);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	51 c0       	rjmp	.+162    	; 0x17ac <i2c_device_read+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	60 e4       	ldi	r22, 0x40	; 64
    1710:	0e 94 93 0a 	call	0x1526	; 0x1526 <i2c_write_success>
    1714:	98 2f       	mov	r25, r24
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	99 23       	and	r25, r25
    171a:	09 f4       	brne	.+2      	; 0x171e <i2c_device_read+0x9e>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	88 23       	and	r24, r24
    1720:	11 f0       	breq	.+4      	; 0x1726 <i2c_device_read+0xa6>
		{
			return(TRUE);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	43 c0       	rjmp	.+134    	; 0x17ac <i2c_device_read+0x12c>
		}

		while(bytes2read--)
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f ef       	ldi	r25, 0xFF	; 255
    172a:	98 0f       	add	r25, r24
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <i2c_device_read+0xb6>
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	99 23       	and	r25, r25
    1738:	b1 f1       	breq	.+108    	; 0x17a6 <i2c_device_read+0x126>
		{
			if(bytes2read)
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	88 23       	and	r24, r24
    173e:	d9 f0       	breq	.+54     	; 0x1776 <i2c_device_read+0xf6>
			{
				data[index++] = i2c_read_ack();
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	98 0f       	add	r25, r24
    1746:	99 83       	std	Y+1, r25	; 0x01
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	2c 81       	ldd	r18, Y+4	; 0x04
    174e:	3d 81       	ldd	r19, Y+5	; 0x05
    1750:	89 01       	movw	r16, r18
    1752:	08 0f       	add	r16, r24
    1754:	19 1f       	adc	r17, r25
    1756:	0e 94 b0 0a 	call	0x1560	; 0x1560 <i2c_read_ack>
    175a:	f8 01       	movw	r30, r16
    175c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    175e:	80 e5       	ldi	r24, 0x50	; 80
    1760:	0e 94 ce 0a 	call	0x159c	; 0x159c <i2c_status>
    1764:	98 2f       	mov	r25, r24
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	99 23       	and	r25, r25
    176a:	09 f4       	brne	.+2      	; 0x176e <i2c_device_read+0xee>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	88 23       	and	r24, r24
    1770:	d1 f2       	breq	.-76     	; 0x1726 <i2c_device_read+0xa6>
				{
					return(TRUE);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	1b c0       	rjmp	.+54     	; 0x17ac <i2c_device_read+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	89 01       	movw	r16, r18
    1782:	08 0f       	add	r16, r24
    1784:	19 1f       	adc	r17, r25
    1786:	0e 94 bf 0a 	call	0x157e	; 0x157e <i2c_read_nack>
    178a:	f8 01       	movw	r30, r16
    178c:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    178e:	88 e5       	ldi	r24, 0x58	; 88
    1790:	0e 94 ce 0a 	call	0x159c	; 0x159c <i2c_status>
    1794:	98 2f       	mov	r25, r24
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	99 23       	and	r25, r25
    179a:	09 f4       	brne	.+2      	; 0x179e <i2c_device_read+0x11e>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	88 23       	and	r24, r24
    17a0:	11 f2       	breq	.-124    	; 0x1726 <i2c_device_read+0xa6>
				{
					return(TRUE);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <i2c_device_read+0x12c>
				}
			}
		}

		i2c_stop();
    17a6:	0e 94 8f 0a 	call	0x151e	; 0x151e <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    17aa:	80 e0       	ldi	r24, 0x00	; 0
}
    17ac:	26 96       	adiw	r28, 0x06	; 6
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <nextFullTxBuffer>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    17c2:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZZ16nextFullTxBufferE11bufferIndex>
    17c6:	93 e0       	ldi	r25, 0x03	; 3
    17c8:	59 e2       	ldi	r21, 0x29	; 41
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	52 9f       	mul	r21, r18
    17d0:	f0 01       	movw	r30, r0
    17d2:	53 9f       	mul	r21, r19
    17d4:	f0 0d       	add	r31, r0
    17d6:	11 24       	eor	r1, r1
    17d8:	e5 59       	subi	r30, 0x95	; 149
    17da:	fc 4f       	sbci	r31, 0xFC	; 252
    17dc:	40 81       	ld	r20, Z
    17de:	41 11       	cpse	r20, r1
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <nextFullTxBuffer+0x38>
    17e2:	91 50       	subi	r25, 0x01	; 1
    17e4:	29 f0       	breq	.+10     	; 0x17f0 <nextFullTxBuffer+0x2e>
    17e6:	8f 5f       	subi	r24, 0xFF	; 255
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	78 f3       	brcs	.-34     	; 0x17ca <nextFullTxBuffer+0x8>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	ed cf       	rjmp	.-38     	; 0x17ca <nextFullTxBuffer+0x8>
    17f0:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_ZZ16nextFullTxBufferE11bufferIndex>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	08 95       	ret
    17fa:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_ZZ16nextFullTxBufferE11bufferIndex>
    17fe:	49 e2       	ldi	r20, 0x29	; 41
    1800:	42 9f       	mul	r20, r18
    1802:	c0 01       	movw	r24, r0
    1804:	43 9f       	mul	r20, r19
    1806:	90 0d       	add	r25, r0
    1808:	11 24       	eor	r1, r1
    180a:	85 59       	subi	r24, 0x95	; 149
    180c:	9c 4f       	sbci	r25, 0xFC	; 252
    180e:	08 95       	ret

00001810 <nextEmptyTxBuffer>:
    1810:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZZ17nextEmptyTxBufferE11bufferIndex>
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	59 e2       	ldi	r21, 0x29	; 41
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	52 9f       	mul	r21, r18
    181e:	f0 01       	movw	r30, r0
    1820:	53 9f       	mul	r21, r19
    1822:	f0 0d       	add	r31, r0
    1824:	11 24       	eor	r1, r1
    1826:	e5 59       	subi	r30, 0x95	; 149
    1828:	fc 4f       	sbci	r31, 0xFC	; 252
    182a:	40 81       	ld	r20, Z
    182c:	44 23       	and	r20, r20
    182e:	61 f0       	breq	.+24     	; 0x1848 <nextEmptyTxBuffer+0x38>
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	29 f0       	breq	.+10     	; 0x183e <nextEmptyTxBuffer+0x2e>
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	78 f3       	brcs	.-34     	; 0x1818 <nextEmptyTxBuffer+0x8>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	ed cf       	rjmp	.-38     	; 0x1818 <nextEmptyTxBuffer+0x8>
    183e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZZ17nextEmptyTxBufferE11bufferIndex>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	08 95       	ret
    1848:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZZ17nextEmptyTxBufferE11bufferIndex>
    184c:	49 e2       	ldi	r20, 0x29	; 41
    184e:	42 9f       	mul	r20, r18
    1850:	c0 01       	movw	r24, r0
    1852:	43 9f       	mul	r20, r19
    1854:	90 0d       	add	r25, r0
    1856:	11 24       	eor	r1, r1
    1858:	85 59       	subi	r24, 0x95	; 149
    185a:	9c 4f       	sbci	r25, 0xFC	; 252
    185c:	08 95       	ret

0000185e <nextEmptyRxBuffer>:
    185e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZZ17nextEmptyRxBufferE11bufferIndex>
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	9f e3       	ldi	r25, 0x3F	; 63
    1868:	89 9f       	mul	r24, r25
    186a:	f0 01       	movw	r30, r0
    186c:	11 24       	eor	r1, r1
    186e:	e3 51       	subi	r30, 0x13	; 19
    1870:	fd 4f       	sbci	r31, 0xFD	; 253
    1872:	41 81       	ldd	r20, Z+1	; 0x01
    1874:	52 81       	ldd	r21, Z+2	; 0x02
    1876:	45 2b       	or	r20, r21
    1878:	a9 f0       	breq	.+42     	; 0x18a4 <nextEmptyRxBuffer+0x46>
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	08 f0       	brcs	.+2      	; 0x1882 <nextEmptyRxBuffer+0x24>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	9f e3       	ldi	r25, 0x3F	; 63
    1888:	89 9f       	mul	r24, r25
    188a:	f0 01       	movw	r30, r0
    188c:	11 24       	eor	r1, r1
    188e:	e3 51       	subi	r30, 0x13	; 19
    1890:	fd 4f       	sbci	r31, 0xFD	; 253
    1892:	41 81       	ldd	r20, Z+1	; 0x01
    1894:	52 81       	ldd	r21, Z+2	; 0x02
    1896:	45 2b       	or	r20, r21
    1898:	29 f0       	breq	.+10     	; 0x18a4 <nextEmptyRxBuffer+0x46>
    189a:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_ZZ17nextEmptyRxBufferE11bufferIndex>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	08 95       	ret
    18a4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_ZZ17nextEmptyRxBufferE11bufferIndex>
    18a8:	4f e3       	ldi	r20, 0x3F	; 63
    18aa:	42 9f       	mul	r20, r18
    18ac:	c0 01       	movw	r24, r0
    18ae:	43 9f       	mul	r20, r19
    18b0:	90 0d       	add	r25, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	83 51       	subi	r24, 0x13	; 19
    18b6:	9d 4f       	sbci	r25, 0xFD	; 253
    18b8:	08 95       	ret

000018ba <nextFullRxBuffer>:
    18ba:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_ZZ16nextFullRxBufferE11bufferIndex>
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	9f e3       	ldi	r25, 0x3F	; 63
    18c4:	89 9f       	mul	r24, r25
    18c6:	f0 01       	movw	r30, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	e3 51       	subi	r30, 0x13	; 19
    18cc:	fd 4f       	sbci	r31, 0xFD	; 253
    18ce:	41 81       	ldd	r20, Z+1	; 0x01
    18d0:	52 81       	ldd	r21, Z+2	; 0x02
    18d2:	45 2b       	or	r20, r21
    18d4:	a9 f4       	brne	.+42     	; 0x1900 <nextFullRxBuffer+0x46>
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	08 f0       	brcs	.+2      	; 0x18de <nextFullRxBuffer+0x24>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	9f e3       	ldi	r25, 0x3F	; 63
    18e4:	89 9f       	mul	r24, r25
    18e6:	f0 01       	movw	r30, r0
    18e8:	11 24       	eor	r1, r1
    18ea:	e3 51       	subi	r30, 0x13	; 19
    18ec:	fd 4f       	sbci	r31, 0xFD	; 253
    18ee:	41 81       	ldd	r20, Z+1	; 0x01
    18f0:	52 81       	ldd	r21, Z+2	; 0x02
    18f2:	45 2b       	or	r20, r21
    18f4:	29 f4       	brne	.+10     	; 0x1900 <nextFullRxBuffer+0x46>
    18f6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_ZZ16nextFullRxBufferE11bufferIndex>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	08 95       	ret
    1900:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_ZZ16nextFullRxBufferE11bufferIndex>
    1904:	4f e3       	ldi	r20, 0x3F	; 63
    1906:	42 9f       	mul	r20, r18
    1908:	c0 01       	movw	r24, r0
    190a:	43 9f       	mul	r20, r19
    190c:	90 0d       	add	r25, r0
    190e:	11 24       	eor	r1, r1
    1910:	83 51       	subi	r24, 0x13	; 19
    1912:	9d 4f       	sbci	r25, 0xFD	; 253
    1914:	08 95       	ret

00001916 <linkbusTxInProgress>:
    1916:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_ZL17linkbus_tx_active>
    191a:	08 95       	ret

0000191c <_Z16linkbus_start_txv>:
    191c:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <_ZL17linkbus_tx_active>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	91 11       	cpse	r25, r1
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	91 11       	cpse	r25, r1
    1928:	08 c0       	rjmp	.+16     	; 0x193a <_Z16linkbus_start_txv+0x1e>
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <_ZL17linkbus_tx_active>
    1930:	e1 ec       	ldi	r30, 0xC1	; 193
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	90 81       	ld	r25, Z
    1936:	90 62       	ori	r25, 0x20	; 32
    1938:	90 83       	st	Z, r25
    193a:	08 95       	ret

0000193c <linkbus_end_tx>:
    193c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_ZL17linkbus_tx_active>
    1940:	88 23       	and	r24, r24
    1942:	39 f0       	breq	.+14     	; 0x1952 <linkbus_end_tx+0x16>
    1944:	e1 ec       	ldi	r30, 0xC1	; 193
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 7d       	andi	r24, 0xDF	; 223
    194c:	80 83       	st	Z, r24
    194e:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_ZL17linkbus_tx_active>
    1952:	08 95       	ret

00001954 <linkbus_init>:
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	8b 01       	movw	r16, r22
    195a:	9c 01       	movw	r18, r24
    195c:	8e e7       	ldi	r24, 0x7E	; 126
    195e:	ed ee       	ldi	r30, 0xED	; 237
    1960:	f2 e0       	ldi	r31, 0x02	; 2
    1962:	df 01       	movw	r26, r30
    1964:	1d 92       	st	X+, r1
    1966:	8a 95       	dec	r24
    1968:	e9 f7       	brne	.-6      	; 0x1964 <linkbus_init+0x10>
    196a:	eb e6       	ldi	r30, 0x6B	; 107
    196c:	f3 e0       	ldi	r31, 0x03	; 3
    196e:	10 82       	st	Z, r1
    1970:	11 a6       	std	Z+41, r1	; 0x29
    1972:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <_ZL9tx_buffer+0x52>
    1976:	d9 01       	movw	r26, r18
    1978:	c8 01       	movw	r24, r16
    197a:	80 58       	subi	r24, 0x80	; 128
    197c:	9b 47       	sbci	r25, 0x7B	; 123
    197e:	a1 4e       	sbci	r26, 0xE1	; 225
    1980:	bf 4f       	sbci	r27, 0xFF	; 255
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	aa 1f       	adc	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	aa 1f       	adc	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	66 0f       	add	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	00 0f       	add	r16, r16
    19a0:	11 1f       	adc	r17, r17
    19a2:	22 1f       	adc	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	00 0f       	add	r16, r16
    19a8:	11 1f       	adc	r17, r17
    19aa:	22 1f       	adc	r18, r18
    19ac:	33 1f       	adc	r19, r19
    19ae:	a9 01       	movw	r20, r18
    19b0:	98 01       	movw	r18, r16
    19b2:	22 0f       	add	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	44 1f       	adc	r20, r20
    19b8:	55 1f       	adc	r21, r21
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	44 1f       	adc	r20, r20
    19c0:	55 1f       	adc	r21, r21
    19c2:	0e 94 11 32 	call	0x6422	; 0x6422 <__udivmodsi4>
    19c6:	21 50       	subi	r18, 0x01	; 1
    19c8:	31 09       	sbc	r19, r1
    19ca:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    19ce:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    19d2:	88 e9       	ldi	r24, 0x98	; 152
    19d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    19d8:	8e e0       	ldi	r24, 0x0E	; 14
    19da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    19de:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <linkbus_disable>:
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    19ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    19f2:	0e 94 9e 0c 	call	0x193c	; 0x193c <linkbus_end_tx>
    19f6:	8e e7       	ldi	r24, 0x7E	; 126
    19f8:	ed ee       	ldi	r30, 0xED	; 237
    19fa:	f2 e0       	ldi	r31, 0x02	; 2
    19fc:	df 01       	movw	r26, r30
    19fe:	1d 92       	st	X+, r1
    1a00:	8a 95       	dec	r24
    1a02:	e9 f7       	brne	.-6      	; 0x19fe <linkbus_disable+0x16>
    1a04:	eb e6       	ldi	r30, 0x6B	; 107
    1a06:	f3 e0       	ldi	r31, 0x03	; 3
    1a08:	10 82       	st	Z, r1
    1a0a:	11 a6       	std	Z+41, r1	; 0x29
    1a0c:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <_ZL9tx_buffer+0x52>
    1a10:	08 95       	ret

00001a12 <_Z17linkbus_send_textPc>:
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1a1e:	21 11       	cpse	r18, r1
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <_Z17linkbus_send_textPc+0x38>
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	a1 f0       	breq	.+40     	; 0x1a4e <_Z17linkbus_send_textPc+0x3c>
    1a26:	8c 01       	movw	r16, r24
    1a28:	0e 94 08 0c 	call	0x1810	; 0x1810 <nextEmptyTxBuffer>
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	b9 f4       	brne	.+46     	; 0x1a5e <_Z17linkbus_send_textPc+0x4c>
    1a30:	c8 ec       	ldi	r28, 0xC8	; 200
    1a32:	d0 e0       	ldi	r29, 0x00	; 0
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <_Z17linkbus_send_textPc+0x28>
    1a36:	20 97       	sbiw	r28, 0x00	; 0
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <_Z17linkbus_send_textPc+0x40>
    1a3a:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <_ZL17linkbus_tx_active>
    1a3e:	99 23       	and	r25, r25
    1a40:	51 f0       	breq	.+20     	; 0x1a56 <_Z17linkbus_send_textPc+0x44>
    1a42:	20 97       	sbiw	r28, 0x00	; 0
    1a44:	d1 f0       	breq	.+52     	; 0x1a7a <_Z17linkbus_send_textPc+0x68>
    1a46:	21 97       	sbiw	r28, 0x01	; 1
    1a48:	f8 cf       	rjmp	.-16     	; 0x1a3a <_Z17linkbus_send_textPc+0x28>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <_Z17linkbus_send_textPc+0x72>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	19 c0       	rjmp	.+50     	; 0x1a84 <_Z17linkbus_send_textPc+0x72>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	17 c0       	rjmp	.+46     	; 0x1a84 <_Z17linkbus_send_textPc+0x72>
    1a56:	0e 94 08 0c 	call	0x1810	; 0x1810 <nextEmptyTxBuffer>
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	61 f3       	breq	.-40     	; 0x1a36 <_Z17linkbus_send_textPc+0x24>
    1a5e:	1f 93       	push	r17
    1a60:	0f 93       	push	r16
    1a62:	9f 93       	push	r25
    1a64:	8f 93       	push	r24
    1a66:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
    1a6a:	0e 94 8e 0c 	call	0x191c	; 0x191c <_Z16linkbus_start_txv>
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	05 c0       	rjmp	.+10     	; 0x1a84 <_Z17linkbus_send_textPc+0x72>
    1a7a:	0e 94 08 0c 	call	0x1810	; 0x1810 <nextEmptyTxBuffer>
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	71 f7       	brne	.-36     	; 0x1a5e <_Z17linkbus_send_textPc+0x4c>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	08 95       	ret

00001a8e <lb_send_NewPrompt>:
    1a8e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1a92:	81 11       	cpse	r24, r1
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <lb_send_NewPrompt+0x14>
    1a96:	83 e2       	ldi	r24, 0x23	; 35
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_Z17linkbus_send_textPc>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	fa cf       	rjmp	.-12     	; 0x1a96 <lb_send_NewPrompt+0x8>
    1aa2:	08 95       	ret

00001aa4 <lb_send_NewLine>:
    1aa4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <lb_send_NewLine+0x10>
    1aac:	86 e2       	ldi	r24, 0x26	; 38
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_Z17linkbus_send_textPc>
    1ab4:	08 95       	ret

00001ab6 <lb_echo_char>:
    1ab6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1aba:	91 11       	cpse	r25, r1
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <lb_echo_char+0x16>
    1abe:	e7 ee       	ldi	r30, 0xE7	; 231
    1ac0:	f3 e0       	ldi	r31, 0x03	; 3
    1ac2:	80 83       	st	Z, r24
    1ac4:	11 82       	std	Z+1, r1	; 0x01
    1ac6:	cf 01       	movw	r24, r30
    1ac8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_Z17linkbus_send_textPc>
    1acc:	08 95       	ret

00001ace <lb_send_string>:
    1ace:	cf 93       	push	r28
    1ad0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1ad4:	21 11       	cpse	r18, r1
    1ad6:	28 c0       	rjmp	.+80     	; 0x1b28 <lb_send_string+0x5a>
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	41 f1       	breq	.+80     	; 0x1b2c <lb_send_string+0x5e>
    1adc:	fc 01       	movw	r30, r24
    1ade:	20 81       	ld	r18, Z
    1ae0:	22 23       	and	r18, r18
    1ae2:	31 f1       	breq	.+76     	; 0x1b30 <lb_send_string+0x62>
    1ae4:	01 90       	ld	r0, Z+
    1ae6:	00 20       	and	r0, r0
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <lb_send_string+0x16>
    1aea:	31 97       	sbiw	r30, 0x01	; 1
    1aec:	e8 1b       	sub	r30, r24
    1aee:	f9 0b       	sbc	r31, r25
    1af0:	ba 97       	sbiw	r30, 0x2a	; 42
    1af2:	00 f5       	brcc	.+64     	; 0x1b34 <lb_send_string+0x66>
    1af4:	c6 2f       	mov	r28, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	49 e2       	ldi	r20, 0x29	; 41
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	87 ee       	ldi	r24, 0xE7	; 231
    1afe:	93 e0       	ldi	r25, 0x03	; 3
    1b00:	0e 94 01 34 	call	0x6802	; 0x6802 <strncpy>
    1b04:	cc 23       	and	r28, r28
    1b06:	59 f0       	breq	.+22     	; 0x1b1e <lb_send_string+0x50>
    1b08:	87 ee       	ldi	r24, 0xE7	; 231
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_Z17linkbus_send_textPc>
    1b10:	81 11       	cpse	r24, r1
    1b12:	fa cf       	rjmp	.-12     	; 0x1b08 <lb_send_string+0x3a>
    1b14:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_ZL17linkbus_tx_active>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	fc cf       	rjmp	.-8      	; 0x1b14 <lb_send_string+0x46>
    1b1c:	0c c0       	rjmp	.+24     	; 0x1b36 <lb_send_string+0x68>
    1b1e:	87 ee       	ldi	r24, 0xE7	; 231
    1b20:	93 e0       	ldi	r25, 0x03	; 3
    1b22:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_Z17linkbus_send_textPc>
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <lb_send_string+0x68>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <lb_send_string+0x68>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <lb_send_string+0x68>
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <lb_send_string+0x68>
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	cf 91       	pop	r28
    1b38:	08 95       	ret

00001b3a <lb_enabled>:
}


BOOL lb_enabled(void)
{
	return( !g_bus_disabled);
    1b3a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	91 11       	cpse	r25, r1
    1b42:	80 e0       	ldi	r24, 0x00	; 0
}
    1b44:	08 95       	ret

00001b46 <__vector_6>:


void sendMorseTone(BOOL onOff)
{
	OCR0A = DEFAULT_TONE_FREQUENCY;
	g_audio_tone_state = onOff;
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	8f 93       	push	r24
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <g_i2c_not_timed_out>
    1b5a:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZL24g_enableHardwareWDResets>
    1b5e:	81 11       	cpse	r24, r1
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <__vector_6+0x26>
    1b62:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_6E5limit>
    1b66:	81 11       	cpse	r24, r1
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <__vector_6+0x36>
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <__vector_6+0x42>
    1b6c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10__vector_6E5limit>
    1b70:	88 23       	and	r24, r24
    1b72:	51 f0       	breq	.+20     	; 0x1b88 <__vector_6+0x42>
    1b74:	81 50       	subi	r24, 0x01	; 1
    1b76:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ10__vector_6E5limit>
    1b7a:	06 c0       	rjmp	.+12     	; 0x1b88 <__vector_6+0x42>
    1b7c:	e0 e6       	ldi	r30, 0x60	; 96
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	80 83       	st	Z, r24
    1b86:	f2 cf       	rjmp	.-28     	; 0x1b6c <__vector_6+0x26>
    1b88:	ff 91       	pop	r31
    1b8a:	ef 91       	pop	r30
    1b8c:	8f 91       	pop	r24
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <_Z8wdt_init7WDReset>:
    1b98:	a8 95       	wdr
    1b9a:	04 b6       	in	r0, 0x34	; 52
    1b9c:	03 fe       	sbrs	r0, 3
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <_Z8wdt_init7WDReset+0xe>
    1ba0:	94 b7       	in	r25, 0x34	; 52
    1ba2:	98 70       	andi	r25, 0x08	; 8
    1ba4:	94 bf       	out	0x34, r25	; 52
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	61 f4       	brne	.+24     	; 0x1bc2 <_Z8wdt_init7WDReset+0x2a>
    1baa:	84 b7       	in	r24, 0x34	; 52
    1bac:	87 7f       	andi	r24, 0xF7	; 247
    1bae:	84 bf       	out	0x34, r24	; 52
    1bb0:	e0 e6       	ldi	r30, 0x60	; 96
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	88 61       	ori	r24, 0x18	; 24
    1bb8:	80 83       	st	Z, r24
    1bba:	10 82       	st	Z, r1
    1bbc:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZL24g_enableHardwareWDResets>
    1bc0:	08 95       	ret
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	41 f4       	brne	.+16     	; 0x1bd6 <_Z8wdt_init7WDReset+0x3e>
    1bc6:	e0 e6       	ldi	r30, 0x60	; 96
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	90 81       	ld	r25, Z
    1bcc:	98 61       	ori	r25, 0x18	; 24
    1bce:	90 83       	st	Z, r25
    1bd0:	98 e6       	ldi	r25, 0x68	; 104
    1bd2:	90 83       	st	Z, r25
    1bd4:	11 c0       	rjmp	.+34     	; 0x1bf8 <_Z8wdt_init7WDReset+0x60>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <_Z8wdt_init7WDReset+0x52>
    1bda:	e0 e6       	ldi	r30, 0x60	; 96
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	90 81       	ld	r25, Z
    1be0:	98 61       	ori	r25, 0x18	; 24
    1be2:	90 83       	st	Z, r25
    1be4:	96 e4       	ldi	r25, 0x46	; 70
    1be6:	90 83       	st	Z, r25
    1be8:	07 c0       	rjmp	.+14     	; 0x1bf8 <_Z8wdt_init7WDReset+0x60>
    1bea:	e0 e6       	ldi	r30, 0x60	; 96
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	90 81       	ld	r25, Z
    1bf0:	98 61       	ori	r25, 0x18	; 24
    1bf2:	90 83       	st	Z, r25
    1bf4:	98 e4       	ldi	r25, 0x48	; 72
    1bf6:	90 83       	st	Z, r25
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <_Z8wdt_init7WDReset+0x68>
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <_ZL24g_enableHardwareWDResets>
    1c04:	08 95       	ret

00001c06 <__vector_21>:
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	2f 93       	push	r18
    1c12:	3f 93       	push	r19
    1c14:	4f 93       	push	r20
    1c16:	5f 93       	push	r21
    1c18:	6f 93       	push	r22
    1c1a:	7f 93       	push	r23
    1c1c:	8f 93       	push	r24
    1c1e:	9f 93       	push	r25
    1c20:	af 93       	push	r26
    1c22:	bf 93       	push	r27
    1c24:	ef 93       	push	r30
    1c26:	ff 93       	push	r31
    1c28:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	84 ec       	ldi	r24, 0xC4	; 196
    1c30:	94 e0       	ldi	r25, 0x04	; 4
    1c32:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN8Goertzel9DataPointEi>
    1c36:	88 23       	and	r24, r24
    1c38:	29 f0       	breq	.+10     	; 0x1c44 <__vector_21+0x3e>
    1c3a:	ea e7       	ldi	r30, 0x7A	; 122
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	87 7f       	andi	r24, 0xF7	; 247
    1c42:	80 83       	st	Z, r24
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	bf 91       	pop	r27
    1c4a:	af 91       	pop	r26
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	7f 91       	pop	r23
    1c52:	6f 91       	pop	r22
    1c54:	5f 91       	pop	r21
    1c56:	4f 91       	pop	r20
    1c58:	3f 91       	pop	r19
    1c5a:	2f 91       	pop	r18
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	0f 90       	pop	r0
    1c62:	1f 90       	pop	r1
    1c64:	18 95       	reti

00001c66 <__vector_18>:
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	1f 93       	push	r17
    1c72:	2f 93       	push	r18
    1c74:	3f 93       	push	r19
    1c76:	4f 93       	push	r20
    1c78:	5f 93       	push	r21
    1c7a:	6f 93       	push	r22
    1c7c:	7f 93       	push	r23
    1c7e:	8f 93       	push	r24
    1c80:	9f 93       	push	r25
    1c82:	af 93       	push	r26
    1c84:	bf 93       	push	r27
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
    1c8e:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1c92:	c0 91 99 04 	lds	r28, 0x0499	; 0x800499 <_ZZ11__vector_18E4buff>
    1c96:	d0 91 9a 04 	lds	r29, 0x049A	; 0x80049a <_ZZ11__vector_18E4buff+0x1>
    1c9a:	20 97       	sbiw	r28, 0x00	; 0
    1c9c:	51 f4       	brne	.+20     	; 0x1cb2 <__vector_18+0x4c>
    1c9e:	0e 94 2f 0c 	call	0x185e	; 0x185e <nextEmptyRxBuffer>
    1ca2:	ec 01       	movw	r28, r24
    1ca4:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ11__vector_18E4buff+0x1>
    1ca8:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ11__vector_18E4buff>
    1cac:	89 2b       	or	r24, r25
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <__vector_18+0x4c>
    1cb0:	62 c1       	rjmp	.+708    	; 0x1f76 <__vector_18+0x310>
    1cb2:	81 2f       	mov	r24, r17
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 e7 33 	call	0x67ce	; 0x67ce <toupper>
    1cba:	9c 01       	movw	r18, r24
    1cbc:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_ZZ11__vector_18E11ignoreCount>
    1cc0:	88 23       	and	r24, r24
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <__vector_18+0x66>
    1cc4:	81 50       	subi	r24, 0x01	; 1
    1cc6:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_ZZ11__vector_18E11ignoreCount>
    1cca:	55 c1       	rjmp	.+682    	; 0x1f76 <__vector_18+0x310>
    1ccc:	2b 31       	cpi	r18, 0x1B	; 27
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <__vector_18+0x72>
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_ZZ11__vector_18E11ignoreCount>
    1cd6:	4f c1       	rjmp	.+670    	; 0x1f76 <__vector_18+0x310>
    1cd8:	2d 30       	cpi	r18, 0x0D	; 13
    1cda:	09 f0       	breq	.+2      	; 0x1cde <__vector_18+0x78>
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <__vector_18+0xf6>
    1cde:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_ZZ11__vector_18E13receiving_msg>
    1ce2:	88 23       	and	r24, r24
    1ce4:	31 f1       	breq	.+76     	; 0x1d32 <__vector_18+0xcc>
    1ce6:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1cea:	ee 23       	and	r30, r30
    1cec:	f9 f0       	breq	.+62     	; 0x1d2c <__vector_18+0xc6>
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	88 83       	st	Y, r24
    1cf2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1cf6:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZZ11__vector_18E11field_index>
    1d02:	88 23       	and	r24, r24
    1d04:	79 f0       	breq	.+30     	; 0x1d24 <__vector_18+0xbe>
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	40 91 53 04 	lds	r20, 0x0453	; 0x800453 <_ZZ11__vector_18E9field_len>
    1d0e:	54 e1       	ldi	r21, 0x14	; 20
    1d10:	58 9f       	mul	r21, r24
    1d12:	90 01       	movw	r18, r0
    1d14:	59 9f       	mul	r21, r25
    1d16:	30 0d       	add	r19, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	c2 0f       	add	r28, r18
    1d1c:	d3 1f       	adc	r29, r19
    1d1e:	c4 0f       	add	r28, r20
    1d20:	d1 1d       	adc	r29, r1
    1d22:	1b 82       	std	Y+3, r1	; 0x03
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	e8 5a       	subi	r30, 0xA8	; 168
    1d28:	fb 4f       	sbci	r31, 0xFB	; 251
    1d2a:	10 82       	st	Z, r1
    1d2c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <lb_send_NewLine>
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <__vector_18+0xd4>
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	9f e7       	ldi	r25, 0x7F	; 127
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1d3e:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZZ11__vector_18E9field_len>
    1d42:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1d46:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1d4a:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_ZZ11__vector_18E11field_index>
    1d4e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_ZZ11__vector_18E4buff+0x1>
    1d52:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <_ZZ11__vector_18E4buff>
    1d56:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZZ11__vector_18E13receiving_msg>
    1d5a:	0d c1       	rjmp	.+538    	; 0x1f76 <__vector_18+0x310>
    1d5c:	22 23       	and	r18, r18
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <__vector_18+0xfc>
    1d60:	0a c1       	rjmp	.+532    	; 0x1f76 <__vector_18+0x310>
    1d62:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1d66:	4e 2f       	mov	r20, r30
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	da 01       	movw	r26, r20
    1d6c:	a8 5a       	subi	r26, 0xA8	; 168
    1d6e:	bb 4f       	sbci	r27, 0xFB	; 251
    1d70:	2c 93       	st	X, r18
    1d72:	ee 23       	and	r30, r30
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <__vector_18+0x112>
    1d76:	d6 c0       	rjmp	.+428    	; 0x1f24 <__vector_18+0x2be>
    1d78:	2f 37       	cpi	r18, 0x7F	; 127
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <__vector_18+0x118>
    1d7c:	5f c0       	rjmp	.+190    	; 0x1e3c <__vector_18+0x1d6>
    1d7e:	e1 50       	subi	r30, 0x01	; 1
    1d80:	e0 93 97 04 	sts	0x0497, r30	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1d84:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZZ11__vector_18E11field_index>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	13 c0       	rjmp	.+38     	; 0x1db2 <__vector_18+0x14c>
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	e8 5a       	subi	r30, 0xA8	; 168
    1d90:	fb 4f       	sbci	r31, 0xFB	; 251
    1d92:	40 81       	ld	r20, Z
    1d94:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1d98:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1d9c:	84 1b       	sub	r24, r20
    1d9e:	91 09       	sbc	r25, r1
    1da0:	6a e0       	ldi	r22, 0x0A	; 10
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    1da8:	70 93 56 04 	sts	0x0456, r23	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1dac:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1db0:	39 c0       	rjmp	.+114    	; 0x1e24 <__vector_18+0x1be>
    1db2:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <_ZZ11__vector_18E9field_len>
    1db6:	99 23       	and	r25, r25
    1db8:	91 f0       	breq	.+36     	; 0x1dde <__vector_18+0x178>
    1dba:	4f ef       	ldi	r20, 0xFF	; 255
    1dbc:	49 0f       	add	r20, r25
    1dbe:	40 93 53 04 	sts	0x0453, r20	; 0x800453 <_ZZ11__vector_18E9field_len>
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	54 e1       	ldi	r21, 0x14	; 20
    1dc8:	58 9f       	mul	r21, r24
    1dca:	b0 01       	movw	r22, r0
    1dcc:	59 9f       	mul	r21, r25
    1dce:	70 0d       	add	r23, r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	c6 0f       	add	r28, r22
    1dd4:	d7 1f       	adc	r29, r23
    1dd6:	c4 0f       	add	r28, r20
    1dd8:	d1 1d       	adc	r29, r1
    1dda:	1b 82       	std	Y+3, r1	; 0x03
    1ddc:	23 c0       	rjmp	.+70     	; 0x1e24 <__vector_18+0x1be>
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	e8 5a       	subi	r30, 0xA8	; 168
    1de2:	fb 4f       	sbci	r31, 0xFB	; 251
    1de4:	90 81       	ld	r25, Z
    1de6:	90 32       	cpi	r25, 0x20	; 32
    1de8:	a1 f4       	brne	.+40     	; 0x1e12 <__vector_18+0x1ac>
    1dea:	81 50       	subi	r24, 0x01	; 1
    1dec:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ11__vector_18E11field_index>
    1df0:	de 01       	movw	r26, r28
    1df2:	94 e1       	ldi	r25, 0x14	; 20
    1df4:	89 9f       	mul	r24, r25
    1df6:	a0 0d       	add	r26, r0
    1df8:	b1 1d       	adc	r27, r1
    1dfa:	11 24       	eor	r1, r1
    1dfc:	13 96       	adiw	r26, 0x03	; 3
    1dfe:	fd 01       	movw	r30, r26
    1e00:	01 90       	ld	r0, Z+
    1e02:	00 20       	and	r0, r0
    1e04:	e9 f7       	brne	.-6      	; 0x1e00 <__vector_18+0x19a>
    1e06:	31 97       	sbiw	r30, 0x01	; 1
    1e08:	ea 1b       	sub	r30, r26
    1e0a:	fb 0b       	sbc	r31, r27
    1e0c:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <_ZZ11__vector_18E9field_len>
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <__vector_18+0x1be>
    1e12:	94 e1       	ldi	r25, 0x14	; 20
    1e14:	89 9f       	mul	r24, r25
    1e16:	c0 0d       	add	r28, r0
    1e18:	d1 1d       	adc	r29, r1
    1e1a:	11 24       	eor	r1, r1
    1e1c:	1b 82       	std	Y+3, r1	; 0x03
    1e1e:	81 50       	subi	r24, 0x01	; 1
    1e20:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ11__vector_18E11field_index>
    1e24:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1e28:	e8 2f       	mov	r30, r24
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	e8 5a       	subi	r30, 0xA8	; 168
    1e2e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e30:	10 82       	st	Z, r1
    1e32:	81 11       	cpse	r24, r1
    1e34:	93 c0       	rjmp	.+294    	; 0x1f5c <__vector_18+0x2f6>
    1e36:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_ZZ11__vector_18E13receiving_msg>
    1e3a:	90 c0       	rjmp	.+288    	; 0x1f5c <__vector_18+0x2f6>
    1e3c:	20 32       	cpi	r18, 0x20	; 32
    1e3e:	79 f5       	brne	.+94     	; 0x1e9e <__vector_18+0x238>
    1e40:	fa 01       	movw	r30, r20
    1e42:	e9 5a       	subi	r30, 0xA9	; 169
    1e44:	fb 4f       	sbci	r31, 0xFB	; 251
    1e46:	80 81       	ld	r24, Z
    1e48:	80 32       	cpi	r24, 0x20	; 32
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <__vector_18+0x1e8>
    1e4c:	94 c0       	rjmp	.+296    	; 0x1f76 <__vector_18+0x310>
    1e4e:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZZ11__vector_18E11field_index>
    1e52:	68 2f       	mov	r22, r24
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	fb 01       	movw	r30, r22
    1e58:	31 96       	adiw	r30, 0x01	; 1
    1e5a:	33 97       	sbiw	r30, 0x03	; 3
    1e5c:	0c f0       	brlt	.+2      	; 0x1e60 <__vector_18+0x1fa>
    1e5e:	8b c0       	rjmp	.+278    	; 0x1f76 <__vector_18+0x310>
    1e60:	88 23       	and	r24, r24
    1e62:	79 f0       	breq	.+30     	; 0x1e82 <__vector_18+0x21c>
    1e64:	61 50       	subi	r22, 0x01	; 1
    1e66:	71 09       	sbc	r23, r1
    1e68:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <_ZZ11__vector_18E9field_len>
    1e6c:	a4 e1       	ldi	r26, 0x14	; 20
    1e6e:	a6 9f       	mul	r26, r22
    1e70:	f0 01       	movw	r30, r0
    1e72:	a7 9f       	mul	r26, r23
    1e74:	f0 0d       	add	r31, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	ce 0f       	add	r28, r30
    1e7a:	df 1f       	adc	r29, r31
    1e7c:	c9 0f       	add	r28, r25
    1e7e:	d1 1d       	adc	r29, r1
    1e80:	1b 82       	std	Y+3, r1	; 0x03
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_ZZ11__vector_18E11field_index>
    1e88:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <_ZZ11__vector_18E9field_len>
    1e8c:	4f 5f       	subi	r20, 0xFF	; 255
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	4e 33       	cpi	r20, 0x3E	; 62
    1e92:	51 05       	cpc	r21, r1
    1e94:	0c f0       	brlt	.+2      	; 0x1e98 <__vector_18+0x232>
    1e96:	4e e3       	ldi	r20, 0x3E	; 62
    1e98:	40 93 97 04 	sts	0x0497, r20	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1e9c:	5f c0       	rjmp	.+190    	; 0x1f5c <__vector_18+0x2f6>
    1e9e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZZ11__vector_18E9field_len>
    1ea2:	84 31       	cpi	r24, 0x14	; 20
    1ea4:	08 f0       	brcs	.+2      	; 0x1ea8 <__vector_18+0x242>
    1ea6:	67 c0       	rjmp	.+206    	; 0x1f76 <__vector_18+0x310>
    1ea8:	40 91 54 04 	lds	r20, 0x0454	; 0x800454 <_ZZ11__vector_18E11field_index>
    1eac:	41 11       	cpse	r20, r1
    1eae:	19 c0       	rjmp	.+50     	; 0x1ee2 <__vector_18+0x27c>
    1eb0:	40 91 55 04 	lds	r20, 0x0455	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1eb4:	50 91 56 04 	lds	r21, 0x0456	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1eb8:	ba 01       	movw	r22, r20
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	44 0f       	add	r20, r20
    1ec0:	55 1f       	adc	r21, r21
    1ec2:	44 0f       	add	r20, r20
    1ec4:	55 1f       	adc	r21, r21
    1ec6:	44 0f       	add	r20, r20
    1ec8:	55 1f       	adc	r21, r21
    1eca:	46 0f       	add	r20, r22
    1ecc:	57 1f       	adc	r21, r23
    1ece:	42 0f       	add	r20, r18
    1ed0:	51 1d       	adc	r21, r1
    1ed2:	50 93 56 04 	sts	0x0456, r21	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1ed6:	40 93 55 04 	sts	0x0455, r20	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_ZZ11__vector_18E9field_len>
    1ee0:	16 c0       	rjmp	.+44     	; 0x1f0e <__vector_18+0x2a8>
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	41 50       	subi	r20, 0x01	; 1
    1ee6:	51 09       	sbc	r21, r1
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	98 0f       	add	r25, r24
    1eec:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <_ZZ11__vector_18E9field_len>
    1ef0:	e4 e1       	ldi	r30, 0x14	; 20
    1ef2:	e4 9f       	mul	r30, r20
    1ef4:	b0 01       	movw	r22, r0
    1ef6:	e5 9f       	mul	r30, r21
    1ef8:	70 0d       	add	r23, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	c6 0f       	add	r28, r22
    1efe:	d7 1f       	adc	r29, r23
    1f00:	fe 01       	movw	r30, r28
    1f02:	e8 0f       	add	r30, r24
    1f04:	f1 1d       	adc	r31, r1
    1f06:	23 83       	std	Z+3, r18	; 0x03
    1f08:	c9 0f       	add	r28, r25
    1f0a:	d1 1d       	adc	r29, r1
    1f0c:	1b 82       	std	Y+3, r1	; 0x03
    1f0e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	8e 33       	cpi	r24, 0x3E	; 62
    1f18:	91 05       	cpc	r25, r1
    1f1a:	0c f0       	brlt	.+2      	; 0x1f1e <__vector_18+0x2b8>
    1f1c:	8e e3       	ldi	r24, 0x3E	; 62
    1f1e:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1f22:	1c c0       	rjmp	.+56     	; 0x1f5c <__vector_18+0x2f6>
    1f24:	2f 37       	cpi	r18, 0x7F	; 127
    1f26:	41 f4       	brne	.+16     	; 0x1f38 <__vector_18+0x2d2>
    1f28:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1f2c:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1f30:	18 16       	cp	r1, r24
    1f32:	19 06       	cpc	r1, r25
    1f34:	bc f0       	brlt	.+46     	; 0x1f64 <__vector_18+0x2fe>
    1f36:	1b c0       	rjmp	.+54     	; 0x1f6e <__vector_18+0x308>
    1f38:	20 32       	cpi	r18, 0x20	; 32
    1f3a:	e9 f0       	breq	.+58     	; 0x1f76 <__vector_18+0x310>
    1f3c:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_ZZ11__vector_18E11field_index>
    1f40:	c9 01       	movw	r24, r18
    1f42:	99 27       	eor	r25, r25
    1f44:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1f48:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1f4c:	1b 82       	std	Y+3, r1	; 0x03
    1f4e:	1f 8a       	std	Y+23, r1	; 0x17
    1f50:	1b a6       	std	Y+43, r1	; 0x2b
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_ZZ11__vector_18E13receiving_msg>
    1f58:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ11__vector_18E9charIndex>
    1f5c:	82 2f       	mov	r24, r18
    1f5e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <lb_echo_char>
    1f62:	09 c0       	rjmp	.+18     	; 0x1f76 <__vector_18+0x310>
    1f64:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1f68:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1f6c:	f7 cf       	rjmp	.-18     	; 0x1f5c <__vector_18+0x2f6>
    1f6e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <_ZZ11__vector_18E6msg_ID+0x1>
    1f72:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <_ZZ11__vector_18E6msg_ID>
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	1f 91       	pop	r17
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	0f 90       	pop	r0
    1f9a:	1f 90       	pop	r1
    1f9c:	18 95       	reti

00001f9e <__vector_19>:
    1f9e:	1f 92       	push	r1
    1fa0:	0f 92       	push	r0
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	0f 92       	push	r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	2f 93       	push	r18
    1faa:	3f 93       	push	r19
    1fac:	4f 93       	push	r20
    1fae:	5f 93       	push	r21
    1fb0:	6f 93       	push	r22
    1fb2:	7f 93       	push	r23
    1fb4:	8f 93       	push	r24
    1fb6:	9f 93       	push	r25
    1fb8:	af 93       	push	r26
    1fba:	bf 93       	push	r27
    1fbc:	ef 93       	push	r30
    1fbe:	ff 93       	push	r31
    1fc0:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_ZZ11__vector_19E4buff>
    1fc4:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <_ZZ11__vector_19E4buff+0x1>
    1fc8:	89 2b       	or	r24, r25
    1fca:	31 f4       	brne	.+12     	; 0x1fd8 <__vector_19+0x3a>
    1fcc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <nextFullTxBuffer>
    1fd0:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ11__vector_19E4buff+0x1>
    1fd4:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ11__vector_19E4buff>
    1fd8:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <_ZZ11__vector_19E4buff>
    1fdc:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <_ZZ11__vector_19E4buff+0x1>
    1fe0:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <_ZZ11__vector_19E9charIndex>
    1fe4:	df 01       	movw	r26, r30
    1fe6:	a8 0f       	add	r26, r24
    1fe8:	b1 1d       	adc	r27, r1
    1fea:	9c 91       	ld	r25, X
    1fec:	99 23       	and	r25, r25
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <__vector_19+0x5e>
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <_ZZ11__vector_19E9charIndex>
    1ff6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1ffa:	0d c0       	rjmp	.+26     	; 0x2016 <__vector_19+0x78>
    1ffc:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <_ZZ11__vector_19E9charIndex>
    2000:	10 82       	st	Z, r1
    2002:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <nextFullTxBuffer>
    2006:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZZ11__vector_19E4buff+0x1>
    200a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZZ11__vector_19E4buff>
    200e:	89 2b       	or	r24, r25
    2010:	11 f4       	brne	.+4      	; 0x2016 <__vector_19+0x78>
    2012:	0e 94 9e 0c 	call	0x193c	; 0x193c <linkbus_end_tx>
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <__vector_8>:
    2038:	1f 92       	push	r1
    203a:	0f 92       	push	r0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	0f 92       	push	r0
    2040:	11 24       	eor	r1, r1
    2042:	1f 93       	push	r17
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	ef 93       	push	r30
    205a:	ff 93       	push	r31
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	00 d0       	rcall	.+0      	; 0x2062 <__vector_8+0x2a>
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_tick_count>
    206a:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <g_tick_count+0x1>
    206e:	a0 91 cf 04 	lds	r26, 0x04CF	; 0x8004cf <g_tick_count+0x2>
    2072:	b0 91 d0 04 	lds	r27, 0x04D0	; 0x8004d0 <g_tick_count+0x3>
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	a1 1d       	adc	r26, r1
    207a:	b1 1d       	adc	r27, r1
    207c:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <g_tick_count>
    2080:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <g_tick_count+0x1>
    2084:	a0 93 cf 04 	sts	0x04CF, r26	; 0x8004cf <g_tick_count+0x2>
    2088:	b0 93 d0 04 	sts	0x04D0, r27	; 0x8004d0 <g_tick_count+0x3>
    208c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_dtmf_error_countdown>
    2090:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_dtmf_error_countdown+0x1>
    2094:	89 2b       	or	r24, r25
    2096:	49 f0       	breq	.+18     	; 0x20aa <__vector_8+0x72>
    2098:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_dtmf_error_countdown>
    209c:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_dtmf_error_countdown+0x1>
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_dtmf_error_countdown+0x1>
    20a6:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_dtmf_error_countdown>
    20aa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_att_rf_shutdown_delay>
    20ae:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    20b2:	89 2b       	or	r24, r25
    20b4:	49 f0       	breq	.+18     	; 0x20c8 <__vector_8+0x90>
    20b6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_att_rf_shutdown_delay>
    20ba:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    20c4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_att_rf_shutdown_delay>
    20c8:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_LED_Enunciation_holdoff>
    20cc:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    20d0:	89 2b       	or	r24, r25
    20d2:	49 f0       	breq	.+18     	; 0x20e6 <__vector_8+0xae>
    20d4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_LED_Enunciation_holdoff>
    20d8:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    20e2:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <g_LED_Enunciation_holdoff>
    20e6:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <g_dtmf_detected>
    20ea:	88 23       	and	r24, r24
    20ec:	81 f0       	breq	.+32     	; 0x210e <__vector_8+0xd6>
    20ee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_tone_duration_ticks>
    20f2:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_tone_duration_ticks+0x1>
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <g_tone_duration_ticks+0x1>
    20fc:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <g_tone_duration_ticks>
    2100:	84 e9       	ldi	r24, 0x94	; 148
    2102:	95 e0       	ldi	r25, 0x05	; 5
    2104:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    2108:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <g_LED_Enunciation_holdoff>
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <__vector_8+0xde>
    210e:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <g_tone_duration_ticks+0x1>
    2112:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <g_tone_duration_ticks>
    2116:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    211a:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    211e:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    2122:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    2126:	89 2b       	or	r24, r25
    2128:	8a 2b       	or	r24, r26
    212a:	8b 2b       	or	r24, r27
    212c:	99 f0       	breq	.+38     	; 0x2154 <__vector_8+0x11c>
    212e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    2132:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    2136:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    213a:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	a1 09       	sbc	r26, r1
    2142:	b1 09       	sbc	r27, r1
    2144:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    2148:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    214c:	a0 93 c7 04 	sts	0x04C7, r26	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    2150:	b0 93 c8 04 	sts	0x04C8, r27	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	1a 82       	std	Y+2, r1	; 0x02
    215a:	81 e1       	ldi	r24, 0x11	; 17
    215c:	0e 94 34 02 	call	0x468	; 0x468 <digitalRead>
    2160:	18 2f       	mov	r17, r24
    2162:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_reset_button_held>
    2166:	88 23       	and	r24, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <__vector_8+0x134>
    216a:	5c c1       	rjmp	.+696    	; 0x2424 <__vector_8+0x3ec>
    216c:	11 23       	and	r17, r17
    216e:	09 f4       	brne	.+2      	; 0x2172 <__vector_8+0x13a>
    2170:	5c c1       	rjmp	.+696    	; 0x242a <__vector_8+0x3f2>
    2172:	58 c1       	rjmp	.+688    	; 0x2424 <__vector_8+0x3ec>
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	80 e1       	ldi	r24, 0x10	; 16
    2178:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    217c:	1b c0       	rjmp	.+54     	; 0x21b4 <__vector_8+0x17c>
    217e:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_seconds_since_powerup>
    2182:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_seconds_since_powerup+0x1>
    2186:	a0 91 5e 05 	lds	r26, 0x055E	; 0x80055e <g_seconds_since_powerup+0x2>
    218a:	b0 91 5f 05 	lds	r27, 0x055F	; 0x80055f <g_seconds_since_powerup+0x3>
    218e:	05 97       	sbiw	r24, 0x05	; 5
    2190:	a1 05       	cpc	r26, r1
    2192:	b1 05       	cpc	r27, r1
    2194:	79 f4       	brne	.+30     	; 0x21b4 <__vector_8+0x17c>
    2196:	86 e0       	ldi	r24, 0x06	; 6
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e0       	ldi	r26, 0x00	; 0
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_seconds_since_powerup>
    21a2:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_seconds_since_powerup+0x1>
    21a6:	a0 93 5e 05 	sts	0x055E, r26	; 0x80055e <g_seconds_since_powerup+0x2>
    21aa:	b0 93 5f 05 	sts	0x055F, r27	; 0x80055f <g_seconds_since_powerup+0x3>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <g_perform_EEPROM_reset>
    21b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ10__vector_8E15holdButtonState>
    21b8:	18 13       	cpse	r17, r24
    21ba:	28 c0       	rjmp	.+80     	; 0x220c <__vector_8+0x1d4>
    21bc:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <g_sync_pin_timer>
    21c0:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <g_sync_pin_timer+0x1>
    21c4:	8b 3b       	cpi	r24, 0xBB	; 187
    21c6:	90 41       	sbci	r25, 0x10	; 16
    21c8:	4c f4       	brge	.+18     	; 0x21dc <__vector_8+0x1a4>
    21ca:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <g_sync_pin_timer>
    21ce:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <g_sync_pin_timer+0x1>
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <g_sync_pin_timer+0x1>
    21d8:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <g_sync_pin_timer>
    21dc:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <g_sync_pin_timer>
    21e0:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <g_sync_pin_timer+0x1>
    21e4:	80 39       	cpi	r24, 0x90	; 144
    21e6:	91 05       	cpc	r25, r1
    21e8:	bc f0       	brlt	.+46     	; 0x2218 <__vector_8+0x1e0>
    21ea:	11 30       	cpi	r17, 0x01	; 1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_8+0x1b8>
    21ee:	2b c1       	rjmp	.+598    	; 0x2446 <__vector_8+0x40e>
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <g_sync_pin_stable>
    21f6:	11 11       	cpse	r17, r1
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <__vector_8+0x1e0>
    21fa:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_reset_button_held>
    21fe:	81 11       	cpse	r24, r1
    2200:	0b c0       	rjmp	.+22     	; 0x2218 <__vector_8+0x1e0>
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	80 e1       	ldi	r24, 0x10	; 16
    2206:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <__vector_8+0x1e0>
    220c:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <_ZZ10__vector_8E15holdButtonState>
    2210:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <g_sync_pin_timer+0x1>
    2214:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <g_sync_pin_timer>
    2218:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    221c:	81 11       	cpse	r24, r1
    221e:	17 c1       	rjmp	.+558    	; 0x244e <__vector_8+0x416>
    2220:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_on_the_air>
    2224:	88 23       	and	r24, r24
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_8+0x1f2>
    2228:	12 c1       	rjmp	.+548    	; 0x244e <__vector_8+0x416>
    222a:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZZ10__vector_8E11ptt_dropped>
    222e:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <_ZZ10__vector_8E11ptt_dropped+0x1>
    2232:	89 2b       	or	r24, r25
    2234:	09 f4       	brne	.+2      	; 0x2238 <__vector_8+0x200>
    2236:	11 c1       	rjmp	.+546    	; 0x245a <__vector_8+0x422>
    2238:	0a c1       	rjmp	.+532    	; 0x244e <__vector_8+0x416>
    223a:	61 e0       	ldi	r22, 0x01	; 1
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    2242:	84 e9       	ldi	r24, 0x94	; 148
    2244:	95 e0       	ldi	r25, 0x05	; 5
    2246:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <_ZZ10__vector_8E9ptt_delay+0x1>
    224a:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ10__vector_8E9ptt_delay>
    224e:	11 c1       	rjmp	.+546    	; 0x2472 <__vector_8+0x43a>
    2250:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZZ10__vector_8E9ptt_delay>
    2254:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <_ZZ10__vector_8E9ptt_delay+0x1>
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	31 f0       	breq	.+12     	; 0x2268 <__vector_8+0x230>
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <_ZZ10__vector_8E9ptt_delay+0x1>
    2262:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ10__vector_8E9ptt_delay>
    2266:	05 c1       	rjmp	.+522    	; 0x2472 <__vector_8+0x43a>
    2268:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZZ10__vector_8E7codeInc>
    226c:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	f1 f1       	breq	.+124    	; 0x22f0 <__vector_8+0x2b8>
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    227a:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ10__vector_8E7codeInc>
    227e:	89 2b       	or	r24, r25
    2280:	09 f0       	breq	.+2      	; 0x2284 <__vector_8+0x24c>
    2282:	f7 c0       	rjmp	.+494    	; 0x2472 <__vector_8+0x43a>
    2284:	ae 01       	movw	r20, r28
    2286:	4e 5f       	subi	r20, 0xFE	; 254
    2288:	5f 4f       	sbci	r21, 0xFF	; 255
    228a:	be 01       	movw	r22, r28
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2298:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZZ10__vector_8E3key>
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	81 11       	cpse	r24, r1
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <__vector_8+0x292>
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	88 23       	and	r24, r24
    22a6:	89 f0       	breq	.+34     	; 0x22ca <__vector_8+0x292>
    22a8:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ10__vector_8E3key>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_callsign_sent>
    22b2:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <g_use_ptt_periodic_reset>
    22b6:	88 23       	and	r24, r24
    22b8:	41 f0       	breq	.+16     	; 0x22ca <__vector_8+0x292>
    22ba:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
    22be:	84 e9       	ldi	r24, 0x94	; 148
    22c0:	95 e0       	ldi	r25, 0x05	; 5
    22c2:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <_ZZ10__vector_8E11ptt_dropped+0x1>
    22c6:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZZ10__vector_8E11ptt_dropped>
    22ca:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    22d4:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    22d8:	86 e0       	ldi	r24, 0x06	; 6
    22da:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    22de:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    22e2:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_sendAMmodulation>
    22e6:	9f e2       	ldi	r25, 0x2F	; 47
    22e8:	97 bd       	out	0x27, r25	; 39
    22ea:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <g_audio_tone_state>
    22ee:	c1 c0       	rjmp	.+386    	; 0x2472 <__vector_8+0x43a>
    22f0:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_sync_pin_stable>
    22f4:	82 30       	cpi	r24, 0x02	; 2
    22f6:	29 f0       	breq	.+10     	; 0x2302 <__vector_8+0x2ca>
    22f8:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    22fc:	80 e1       	ldi	r24, 0x10	; 16
    22fe:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    2302:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    2306:	86 e0       	ldi	r24, 0x06	; 6
    2308:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    230c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    2310:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_sendAMmodulation>
    2314:	9f e2       	ldi	r25, 0x2F	; 47
    2316:	97 bd       	out	0x27, r25	; 39
    2318:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <g_audio_tone_state>
    231c:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_code_throttle>
    2320:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_code_throttle+0x1>
    2324:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    2328:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ10__vector_8E7codeInc>
    232c:	a2 c0       	rjmp	.+324    	; 0x2472 <__vector_8+0x43a>
    232e:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZZ10__vector_8E9ptt_delay>
    2332:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <_ZZ10__vector_8E9ptt_delay+0x1>
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	39 f4       	brne	.+14     	; 0x2348 <__vector_8+0x310>
    233a:	84 e6       	ldi	r24, 0x64	; 100
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <_ZZ10__vector_8E9ptt_delay+0x1>
    2342:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ10__vector_8E9ptt_delay>
    2346:	1c c0       	rjmp	.+56     	; 0x2380 <__vector_8+0x348>
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <_ZZ10__vector_8E9ptt_delay+0x1>
    234e:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZZ10__vector_8E9ptt_delay>
    2352:	89 2b       	or	r24, r25
    2354:	a9 f4       	brne	.+42     	; 0x2380 <__vector_8+0x348>
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	84 e0       	ldi	r24, 0x04	; 4
    235a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    235e:	10 c0       	rjmp	.+32     	; 0x2380 <__vector_8+0x348>
    2360:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZZ10__vector_8E11ptt_dropped>
    2364:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <_ZZ10__vector_8E11ptt_dropped+0x1>
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	51 f0       	breq	.+20     	; 0x2380 <__vector_8+0x348>
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <_ZZ10__vector_8E11ptt_dropped+0x1>
    2372:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZZ10__vector_8E11ptt_dropped>
    2376:	89 2b       	or	r24, r25
    2378:	19 f4       	brne	.+6      	; 0x2380 <__vector_8+0x348>
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_on_the_air>
    2380:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_LED_enunciating>
    2384:	88 23       	and	r24, r24
    2386:	a9 f1       	breq	.+106    	; 0x23f2 <__vector_8+0x3ba>
    2388:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_LED_Enunciation_holdoff>
    238c:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    2390:	89 2b       	or	r24, r25
    2392:	e9 f5       	brne	.+122    	; 0x240e <__vector_8+0x3d6>
    2394:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_ZZ10__vector_8E7codeInc>
    2398:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	01 f1       	breq	.+64     	; 0x23e0 <__vector_8+0x3a8>
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    23a6:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ10__vector_8E7codeInc>
    23aa:	89 2b       	or	r24, r25
    23ac:	81 f5       	brne	.+96     	; 0x240e <__vector_8+0x3d6>
    23ae:	ae 01       	movw	r20, r28
    23b0:	4e 5f       	subi	r20, 0xFE	; 254
    23b2:	5f 4f       	sbci	r21, 0xFF	; 255
    23b4:	be 01       	movw	r22, r28
    23b6:	6f 5f       	subi	r22, 0xFF	; 255
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    23c2:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_ZZ10__vector_8E3key>
    23c6:	68 2f       	mov	r22, r24
    23c8:	80 e1       	ldi	r24, 0x10	; 16
    23ca:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    23ce:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_code_throttle>
    23d2:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_code_throttle+0x1>
    23d6:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    23da:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ10__vector_8E7codeInc>
    23de:	17 c0       	rjmp	.+46     	; 0x240e <__vector_8+0x3d6>
    23e0:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_code_throttle>
    23e4:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_code_throttle+0x1>
    23e8:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <_ZZ10__vector_8E7codeInc+0x1>
    23ec:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_ZZ10__vector_8E7codeInc>
    23f0:	0e c0       	rjmp	.+28     	; 0x240e <__vector_8+0x3d6>
    23f2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_ZZ10__vector_8E3key>
    23f6:	88 23       	and	r24, r24
    23f8:	51 f0       	breq	.+20     	; 0x240e <__vector_8+0x3d6>
    23fa:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ10__vector_8E3key>
    23fe:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_sync_pin_stable>
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	21 f0       	breq	.+8      	; 0x240e <__vector_8+0x3d6>
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	80 e1       	ldi	r24, 0x10	; 16
    240a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	86 e0       	ldi	r24, 0x06	; 6
    2412:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    2416:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_sendAMmodulation>
    241a:	8f e2       	ldi	r24, 0x2F	; 47
    241c:	87 bd       	out	0x27, r24	; 39
    241e:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <g_audio_tone_state>
    2422:	27 c0       	rjmp	.+78     	; 0x2472 <__vector_8+0x43a>
    2424:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <g_reset_button_held>
    2428:	c5 ce       	rjmp	.-630    	; 0x21b4 <__vector_8+0x17c>
    242a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_seconds_since_powerup>
    242e:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_seconds_since_powerup+0x1>
    2432:	a0 91 5e 05 	lds	r26, 0x055E	; 0x80055e <g_seconds_since_powerup+0x2>
    2436:	b0 91 5f 05 	lds	r27, 0x055F	; 0x80055f <g_seconds_since_powerup+0x3>
    243a:	05 97       	sbiw	r24, 0x05	; 5
    243c:	a1 05       	cpc	r26, r1
    243e:	b1 05       	cpc	r27, r1
    2440:	0c f0       	brlt	.+2      	; 0x2444 <__vector_8+0x40c>
    2442:	9d ce       	rjmp	.-710    	; 0x217e <__vector_8+0x146>
    2444:	97 ce       	rjmp	.-722    	; 0x2174 <__vector_8+0x13c>
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <g_sync_pin_stable>
    244c:	e5 ce       	rjmp	.-566    	; 0x2218 <__vector_8+0x1e0>
    244e:	84 e0       	ldi	r24, 0x04	; 4
    2450:	0e 94 34 02 	call	0x468	; 0x468 <digitalRead>
    2454:	81 11       	cpse	r24, r1
    2456:	6b cf       	rjmp	.-298    	; 0x232e <__vector_8+0x2f6>
    2458:	83 cf       	rjmp	.-250    	; 0x2360 <__vector_8+0x328>
    245a:	87 e2       	ldi	r24, 0x27	; 39
    245c:	9b e0       	ldi	r25, 0x0B	; 11
    245e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    2462:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <g_att_rf_shutdown_delay>
    2466:	84 e0       	ldi	r24, 0x04	; 4
    2468:	0e 94 34 02 	call	0x468	; 0x468 <digitalRead>
    246c:	81 11       	cpse	r24, r1
    246e:	f0 ce       	rjmp	.-544    	; 0x2250 <__vector_8+0x218>
    2470:	e4 ce       	rjmp	.-568    	; 0x223a <__vector_8+0x202>
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	ff 91       	pop	r31
    247c:	ef 91       	pop	r30
    247e:	bf 91       	pop	r27
    2480:	af 91       	pop	r26
    2482:	9f 91       	pop	r25
    2484:	8f 91       	pop	r24
    2486:	7f 91       	pop	r23
    2488:	6f 91       	pop	r22
    248a:	5f 91       	pop	r21
    248c:	4f 91       	pop	r20
    248e:	3f 91       	pop	r19
    2490:	2f 91       	pop	r18
    2492:	1f 91       	pop	r17
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	0f 90       	pop	r0
    249a:	1f 90       	pop	r1
    249c:	18 95       	reti

0000249e <__vector_1>:
    249e:	1f 92       	push	r1
    24a0:	0f 92       	push	r0
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	0f 92       	push	r0
    24a6:	11 24       	eor	r1, r1
    24a8:	8f 92       	push	r8
    24aa:	9f 92       	push	r9
    24ac:	af 92       	push	r10
    24ae:	bf 92       	push	r11
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	1f 92       	push	r1
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    24e2:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    24e6:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    24ea:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	a1 1d       	adc	r26, r1
    24f2:	b1 1d       	adc	r27, r1
    24f4:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_current_epoch>
    24f8:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_current_epoch+0x1>
    24fc:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <g_current_epoch+0x2>
    2500:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <g_current_epoch+0x3>
    2504:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_seconds_since_powerup>
    2508:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <g_seconds_since_powerup+0x1>
    250c:	a0 91 5e 05 	lds	r26, 0x055E	; 0x80055e <g_seconds_since_powerup+0x2>
    2510:	b0 91 5f 05 	lds	r27, 0x055F	; 0x80055f <g_seconds_since_powerup+0x3>
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	a1 1d       	adc	r26, r1
    2518:	b1 1d       	adc	r27, r1
    251a:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_seconds_since_powerup>
    251e:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <g_seconds_since_powerup+0x1>
    2522:	a0 93 5e 05 	sts	0x055E, r26	; 0x80055e <g_seconds_since_powerup+0x2>
    2526:	b0 93 5f 05 	sts	0x055F, r27	; 0x80055f <g_seconds_since_powerup+0x3>
    252a:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_temperature_check_countdown>
    252e:	88 23       	and	r24, r24
    2530:	29 f0       	breq	.+10     	; 0x253c <__vector_1+0x9e>
    2532:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_temperature_check_countdown>
    2536:	81 50       	subi	r24, 0x01	; 1
    2538:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <g_temperature_check_countdown>
    253c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    2540:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    2544:	89 2b       	or	r24, r25
    2546:	49 f0       	breq	.+18     	; 0x255a <__vector_1+0xbc>
    2548:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    254c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    2556:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
    255a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_voltage_check_countdown>
    255e:	88 23       	and	r24, r24
    2560:	29 f0       	breq	.+10     	; 0x256c <__vector_1+0xce>
    2562:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_voltage_check_countdown>
    2566:	81 50       	subi	r24, 0x01	; 1
    2568:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <g_voltage_check_countdown>
    256c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    2570:	88 23       	and	r24, r24
    2572:	91 f1       	breq	.+100    	; 0x25d8 <__vector_1+0x13a>
    2574:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <g_use_rtc_for_startstop>
    2578:	88 23       	and	r24, r24
    257a:	09 f4       	brne	.+2      	; 0x257e <__vector_1+0xe0>
    257c:	65 c3       	rjmp	.+1738   	; 0x2c48 <__vector_1+0x7aa>
    257e:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_current_epoch>
    2582:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_current_epoch+0x1>
    2586:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_current_epoch+0x2>
    258a:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_current_epoch+0x3>
    258e:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    2592:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    2596:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    259a:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    259e:	48 17       	cp	r20, r24
    25a0:	59 07       	cpc	r21, r25
    25a2:	6a 07       	cpc	r22, r26
    25a4:	7b 07       	cpc	r23, r27
    25a6:	08 f4       	brcc	.+2      	; 0x25aa <__vector_1+0x10c>
    25a8:	4f c3       	rjmp	.+1694   	; 0x2c48 <__vector_1+0x7aa>
    25aa:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_current_epoch>
    25ae:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_current_epoch+0x1>
    25b2:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_current_epoch+0x2>
    25b6:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_current_epoch+0x3>
    25ba:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    25be:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    25c2:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    25c6:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    25ca:	48 17       	cp	r20, r24
    25cc:	59 07       	cpc	r21, r25
    25ce:	6a 07       	cpc	r22, r26
    25d0:	7b 07       	cpc	r23, r27
    25d2:	08 f4       	brcc	.+2      	; 0x25d6 <__vector_1+0x138>
    25d4:	7b c2       	rjmp	.+1270   	; 0x2acc <__vector_1+0x62e>
    25d6:	38 c3       	rjmp	.+1648   	; 0x2c48 <__vector_1+0x7aa>
    25d8:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <g_use_rtc_for_startstop>
    25dc:	88 23       	and	r24, r24
    25de:	e1 f0       	breq	.+56     	; 0x2618 <__vector_1+0x17a>
    25e0:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_current_epoch>
    25e4:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_current_epoch+0x1>
    25e8:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_current_epoch+0x2>
    25ec:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_current_epoch+0x3>
    25f0:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    25f4:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    25f8:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    25fc:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    2600:	48 17       	cp	r20, r24
    2602:	59 07       	cpc	r21, r25
    2604:	6a 07       	cpc	r22, r26
    2606:	7b 07       	cpc	r23, r27
    2608:	38 f0       	brcs	.+14     	; 0x2618 <__vector_1+0x17a>
    260a:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <g_use_rtc_for_startstop>
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
    2614:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
    2618:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    261c:	81 11       	cpse	r24, r1
    261e:	14 c3       	rjmp	.+1576   	; 0x2c48 <__vector_1+0x7aa>
    2620:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	8d ee       	ldi	r24, 0xED	; 237
    2628:	94 e0       	ldi	r25, 0x04	; 4
    262a:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <timeRequiredToSendStrAtWPM>
    262e:	8c 50       	subi	r24, 0x0C	; 12
    2630:	9e 4f       	sbci	r25, 0xFE	; 254
    2632:	9c 01       	movw	r18, r24
    2634:	36 95       	lsr	r19
    2636:	27 95       	ror	r18
    2638:	36 95       	lsr	r19
    263a:	27 95       	ror	r18
    263c:	36 95       	lsr	r19
    263e:	27 95       	ror	r18
    2640:	a5 ec       	ldi	r26, 0xC5	; 197
    2642:	b0 e2       	ldi	r27, 0x20	; 32
    2644:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    2648:	8c 01       	movw	r16, r24
    264a:	12 95       	swap	r17
    264c:	02 95       	swap	r16
    264e:	0f 70       	andi	r16, 0x0F	; 15
    2650:	01 27       	eor	r16, r17
    2652:	1f 70       	andi	r17, 0x0F	; 15
    2654:	01 27       	eor	r16, r17
    2656:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_seconds_since_sync>
    265a:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    265e:	a0 91 62 05 	lds	r26, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2662:	b0 91 63 05 	lds	r27, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    2666:	89 2b       	or	r24, r25
    2668:	8a 2b       	or	r24, r26
    266a:	8b 2b       	or	r24, r27
    266c:	09 f0       	breq	.+2      	; 0x2670 <__vector_1+0x1d2>
    266e:	65 c2       	rjmp	.+1226   	; 0x2b3a <__vector_1+0x69c>
    2670:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <g_initialize_fox_transmissions>
    2674:	88 23       	and	r24, r24
    2676:	09 f4       	brne	.+2      	; 0x267a <__vector_1+0x1dc>
    2678:	53 c2       	rjmp	.+1190   	; 0x2b20 <__vector_1+0x682>
    267a:	5f c2       	rjmp	.+1214   	; 0x2b3a <__vector_1+0x69c>
    267c:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    2680:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <g_fox_id_offset>
    2684:	30 91 1d 05 	lds	r19, 0x051D	; 0x80051d <g_fox_id_offset+0x1>
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	40 91 22 05 	lds	r20, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    268e:	50 91 23 05 	lds	r21, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    2692:	82 1b       	sub	r24, r18
    2694:	93 0b       	sbc	r25, r19
    2696:	18 16       	cp	r1, r24
    2698:	19 06       	cpc	r1, r25
    269a:	14 f0       	brlt	.+4      	; 0x26a0 <__vector_1+0x202>
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	84 9f       	mul	r24, r20
    26a2:	90 01       	movw	r18, r0
    26a4:	85 9f       	mul	r24, r21
    26a6:	30 0d       	add	r19, r0
    26a8:	94 9f       	mul	r25, r20
    26aa:	30 0d       	add	r19, r0
    26ac:	11 24       	eor	r1, r1
    26ae:	c9 01       	movw	r24, r18
    26b0:	80 1b       	sub	r24, r16
    26b2:	91 0b       	sbc	r25, r17
    26b4:	09 2e       	mov	r0, r25
    26b6:	00 0c       	add	r0, r0
    26b8:	aa 0b       	sbc	r26, r26
    26ba:	bb 0b       	sbc	r27, r27
    26bc:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    26c0:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    26c4:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    26c8:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    26cc:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    26d0:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ10__vector_1E18seconds_into_cycle>
    26d4:	10 e0       	ldi	r17, 0x00	; 0
    26d6:	a7 c2       	rjmp	.+1358   	; 0x2c26 <__vector_1+0x788>
    26d8:	20 91 19 05 	lds	r18, 0x0519	; 0x800519 <g_initialize_fox_transmissions>
    26dc:	21 30       	cpi	r18, 0x01	; 1
    26de:	31 f5       	brne	.+76     	; 0x272c <__vector_1+0x28e>
    26e0:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    26e4:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    26e8:	40 91 60 05 	lds	r20, 0x0560	; 0x800560 <g_seconds_since_sync>
    26ec:	50 91 61 05 	lds	r21, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    26f0:	60 91 62 05 	lds	r22, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    26f4:	70 91 63 05 	lds	r23, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    26f8:	09 2e       	mov	r0, r25
    26fa:	00 0c       	add	r0, r0
    26fc:	aa 0b       	sbc	r26, r26
    26fe:	bb 0b       	sbc	r27, r27
    2700:	84 0f       	add	r24, r20
    2702:	95 1f       	adc	r25, r21
    2704:	a6 1f       	adc	r26, r22
    2706:	b7 1f       	adc	r27, r23
    2708:	01 2e       	mov	r0, r17
    270a:	00 0c       	add	r0, r0
    270c:	22 0b       	sbc	r18, r18
    270e:	33 0b       	sbc	r19, r19
    2710:	80 1b       	sub	r24, r16
    2712:	91 0b       	sbc	r25, r17
    2714:	a2 0b       	sbc	r26, r18
    2716:	b3 0b       	sbc	r27, r19
    2718:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    271c:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2720:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2724:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    2728:	11 e0       	ldi	r17, 0x01	; 1
    272a:	7d c2       	rjmp	.+1274   	; 0x2c26 <__vector_1+0x788>
    272c:	20 91 19 05 	lds	r18, 0x0519	; 0x800519 <g_initialize_fox_transmissions>
    2730:	23 30       	cpi	r18, 0x03	; 3
    2732:	09 f0       	breq	.+2      	; 0x2736 <__vector_1+0x298>
    2734:	e2 c0       	rjmp	.+452    	; 0x28fa <__vector_1+0x45c>
    2736:	20 91 5b 05 	lds	r18, 0x055B	; 0x80055b <g_fox>
    273a:	a0 91 1c 05 	lds	r26, 0x051C	; 0x80051c <g_fox_id_offset>
    273e:	b0 91 1d 05 	lds	r27, 0x051D	; 0x80051d <g_fox_id_offset+0x1>
    2742:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <g_fox_counter>
    2746:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <g_fox_counter+0x1>
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	2a 1b       	sub	r18, r26
    274e:	3b 0b       	sbc	r19, r27
    2750:	2e 17       	cp	r18, r30
    2752:	3f 07       	cpc	r19, r31
    2754:	41 f0       	breq	.+16     	; 0x2766 <__vector_1+0x2c8>
    2756:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <g_number_of_foxes>
    275a:	30 91 1f 05 	lds	r19, 0x051F	; 0x80051f <g_number_of_foxes+0x1>
    275e:	21 30       	cpi	r18, 0x01	; 1
    2760:	31 05       	cpc	r19, r1
    2762:	09 f0       	breq	.+2      	; 0x2766 <__vector_1+0x2c8>
    2764:	66 c0       	rjmp	.+204    	; 0x2832 <__vector_1+0x394>
    2766:	20 91 22 05 	lds	r18, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    276a:	30 91 23 05 	lds	r19, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    276e:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    2772:	70 91 23 05 	lds	r23, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    2776:	ca 01       	movw	r24, r20
    2778:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    277c:	a9 01       	movw	r20, r18
    277e:	48 1b       	sub	r20, r24
    2780:	59 0b       	sbc	r21, r25
    2782:	ca 01       	movw	r24, r20
    2784:	04 17       	cp	r16, r20
    2786:	15 07       	cpc	r17, r21
    2788:	14 f5       	brge	.+68     	; 0x27ce <__vector_1+0x330>
    278a:	40 91 60 05 	lds	r20, 0x0560	; 0x800560 <g_seconds_since_sync>
    278e:	50 91 61 05 	lds	r21, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2792:	60 91 62 05 	lds	r22, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2796:	70 91 63 05 	lds	r23, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    279a:	09 2e       	mov	r0, r25
    279c:	00 0c       	add	r0, r0
    279e:	aa 0b       	sbc	r26, r26
    27a0:	bb 0b       	sbc	r27, r27
    27a2:	84 0f       	add	r24, r20
    27a4:	95 1f       	adc	r25, r21
    27a6:	a6 1f       	adc	r26, r22
    27a8:	b7 1f       	adc	r27, r23
    27aa:	01 2e       	mov	r0, r17
    27ac:	00 0c       	add	r0, r0
    27ae:	22 0b       	sbc	r18, r18
    27b0:	33 0b       	sbc	r19, r19
    27b2:	80 1b       	sub	r24, r16
    27b4:	91 0b       	sbc	r25, r17
    27b6:	a2 0b       	sbc	r26, r18
    27b8:	b3 0b       	sbc	r27, r19
    27ba:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    27be:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    27c2:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    27c6:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    27ca:	11 e0       	ldi	r17, 0x01	; 1
    27cc:	2c c2       	rjmp	.+1112   	; 0x2c26 <__vector_1+0x788>
    27ce:	40 17       	cp	r20, r16
    27d0:	51 07       	cpc	r21, r17
    27d2:	0c f0       	brlt	.+2      	; 0x27d6 <__vector_1+0x338>
    27d4:	30 c2       	rjmp	.+1120   	; 0x2c36 <__vector_1+0x798>
    27d6:	c0 90 60 05 	lds	r12, 0x0560	; 0x800560 <g_seconds_since_sync>
    27da:	d0 90 61 05 	lds	r13, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    27de:	e0 90 62 05 	lds	r14, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    27e2:	f0 90 63 05 	lds	r15, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    27e6:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <g_cycle_period_seconds>
    27ea:	50 91 21 05 	lds	r21, 0x0521	; 0x800521 <g_cycle_period_seconds+0x1>
    27ee:	09 2e       	mov	r0, r25
    27f0:	00 0c       	add	r0, r0
    27f2:	aa 0b       	sbc	r26, r26
    27f4:	bb 0b       	sbc	r27, r27
    27f6:	8c 0d       	add	r24, r12
    27f8:	9d 1d       	adc	r25, r13
    27fa:	ae 1d       	adc	r26, r14
    27fc:	bf 1d       	adc	r27, r15
    27fe:	05 2e       	mov	r0, r21
    2800:	00 0c       	add	r0, r0
    2802:	66 0b       	sbc	r22, r22
    2804:	77 0b       	sbc	r23, r23
    2806:	84 0f       	add	r24, r20
    2808:	95 1f       	adc	r25, r21
    280a:	a6 1f       	adc	r26, r22
    280c:	b7 1f       	adc	r27, r23
    280e:	01 2e       	mov	r0, r17
    2810:	00 0c       	add	r0, r0
    2812:	22 0b       	sbc	r18, r18
    2814:	33 0b       	sbc	r19, r19
    2816:	80 1b       	sub	r24, r16
    2818:	91 0b       	sbc	r25, r17
    281a:	a2 0b       	sbc	r26, r18
    281c:	b3 0b       	sbc	r27, r19
    281e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2822:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2826:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    282a:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    282e:	11 e0       	ldi	r17, 0x01	; 1
    2830:	fa c1       	rjmp	.+1012   	; 0x2c26 <__vector_1+0x788>
    2832:	80 90 60 05 	lds	r8, 0x0560	; 0x800560 <g_seconds_since_sync>
    2836:	90 90 61 05 	lds	r9, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    283a:	a0 90 62 05 	lds	r10, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    283e:	b0 90 63 05 	lds	r11, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    2842:	e0 91 5b 05 	lds	r30, 0x055B	; 0x80055b <g_fox>
    2846:	e0 90 1c 05 	lds	r14, 0x051C	; 0x80051c <g_fox_id_offset>
    284a:	f0 90 1d 05 	lds	r15, 0x051D	; 0x80051d <g_fox_id_offset+0x1>
    284e:	a0 91 22 05 	lds	r26, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    2852:	b0 91 23 05 	lds	r27, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	ee 19       	sub	r30, r14
    285a:	ff 09       	sbc	r31, r15
    285c:	ea 9f       	mul	r30, r26
    285e:	60 01       	movw	r12, r0
    2860:	eb 9f       	mul	r30, r27
    2862:	d0 0c       	add	r13, r0
    2864:	fa 9f       	mul	r31, r26
    2866:	d0 0c       	add	r13, r0
    2868:	11 24       	eor	r1, r1
    286a:	0d 2c       	mov	r0, r13
    286c:	00 0c       	add	r0, r0
    286e:	ee 08       	sbc	r14, r14
    2870:	ff 08       	sbc	r15, r15
    2872:	cb 01       	movw	r24, r22
    2874:	77 0f       	add	r23, r23
    2876:	aa 0b       	sbc	r26, r26
    2878:	bb 0b       	sbc	r27, r27
    287a:	a5 01       	movw	r20, r10
    287c:	94 01       	movw	r18, r8
    287e:	28 1b       	sub	r18, r24
    2880:	39 0b       	sbc	r19, r25
    2882:	4a 0b       	sbc	r20, r26
    2884:	5b 0b       	sbc	r21, r27
    2886:	da 01       	movw	r26, r20
    2888:	c9 01       	movw	r24, r18
    288a:	8c 0d       	add	r24, r12
    288c:	9d 1d       	adc	r25, r13
    288e:	ae 1d       	adc	r26, r14
    2890:	bf 1d       	adc	r27, r15
    2892:	01 2e       	mov	r0, r17
    2894:	00 0c       	add	r0, r0
    2896:	22 0b       	sbc	r18, r18
    2898:	33 0b       	sbc	r19, r19
    289a:	80 1b       	sub	r24, r16
    289c:	91 0b       	sbc	r25, r17
    289e:	a2 0b       	sbc	r26, r18
    28a0:	b3 0b       	sbc	r27, r19
    28a2:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    28a6:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    28aa:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    28ae:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    28b2:	40 91 60 05 	lds	r20, 0x0560	; 0x800560 <g_seconds_since_sync>
    28b6:	50 91 61 05 	lds	r21, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    28ba:	60 91 62 05 	lds	r22, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    28be:	70 91 63 05 	lds	r23, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    28c2:	84 17       	cp	r24, r20
    28c4:	95 07       	cpc	r25, r21
    28c6:	a6 07       	cpc	r26, r22
    28c8:	b7 07       	cpc	r27, r23
    28ca:	0c f0       	brlt	.+2      	; 0x28ce <__vector_1+0x430>
    28cc:	a9 c1       	rjmp	.+850    	; 0x2c20 <__vector_1+0x782>
    28ce:	40 91 1a 05 	lds	r20, 0x051A	; 0x80051a <g_id_interval_seconds>
    28d2:	50 91 1b 05 	lds	r21, 0x051B	; 0x80051b <g_id_interval_seconds+0x1>
    28d6:	05 2e       	mov	r0, r21
    28d8:	00 0c       	add	r0, r0
    28da:	66 0b       	sbc	r22, r22
    28dc:	77 0b       	sbc	r23, r23
    28de:	84 0f       	add	r24, r20
    28e0:	95 1f       	adc	r25, r21
    28e2:	a6 1f       	adc	r26, r22
    28e4:	b7 1f       	adc	r27, r23
    28e6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    28ea:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    28ee:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    28f2:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    28f6:	10 e0       	ldi	r17, 0x00	; 0
    28f8:	96 c1       	rjmp	.+812    	; 0x2c26 <__vector_1+0x788>
    28fa:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_seconds_since_sync>
    28fe:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2902:	a0 91 62 05 	lds	r26, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2906:	b0 91 63 05 	lds	r27, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    290a:	40 91 45 04 	lds	r20, 0x0445	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    290e:	50 91 46 04 	lds	r21, 0x0446	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2912:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    2916:	70 91 48 04 	lds	r23, 0x0448	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    291a:	48 17       	cp	r20, r24
    291c:	59 07       	cpc	r21, r25
    291e:	6a 07       	cpc	r22, r26
    2920:	7b 07       	cpc	r23, r27
    2922:	09 f0       	breq	.+2      	; 0x2926 <__vector_1+0x488>
    2924:	7f c1       	rjmp	.+766    	; 0x2c24 <__vector_1+0x786>
    2926:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <g_id_interval_seconds>
    292a:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <g_id_interval_seconds+0x1>
    292e:	40 91 60 05 	lds	r20, 0x0560	; 0x800560 <g_seconds_since_sync>
    2932:	50 91 61 05 	lds	r21, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2936:	60 91 62 05 	lds	r22, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    293a:	70 91 63 05 	lds	r23, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    293e:	09 2e       	mov	r0, r25
    2940:	00 0c       	add	r0, r0
    2942:	aa 0b       	sbc	r26, r26
    2944:	bb 0b       	sbc	r27, r27
    2946:	84 0f       	add	r24, r20
    2948:	95 1f       	adc	r25, r21
    294a:	a6 1f       	adc	r26, r22
    294c:	b7 1f       	adc	r27, r23
    294e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID>
    2952:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x1>
    2956:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x2>
    295a:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_ZZ10__vector_1E28post_sync_seconds_to_send_ID+0x3>
    295e:	10 e0       	ldi	r17, 0x00	; 0
    2960:	6b c1       	rjmp	.+726    	; 0x2c38 <__vector_1+0x79a>
    2962:	00 e0       	ldi	r16, 0x00	; 0
    2964:	01 c0       	rjmp	.+2      	; 0x2968 <__vector_1+0x4ca>
    2966:	01 e0       	ldi	r16, 0x01	; 1
    2968:	60 91 60 05 	lds	r22, 0x0560	; 0x800560 <g_seconds_since_sync>
    296c:	70 91 61 05 	lds	r23, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2970:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2974:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    2978:	20 91 22 05 	lds	r18, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    297c:	30 91 23 05 	lds	r19, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    2980:	03 2e       	mov	r0, r19
    2982:	00 0c       	add	r0, r0
    2984:	44 0b       	sbc	r20, r20
    2986:	55 0b       	sbc	r21, r21
    2988:	0e 94 33 32 	call	0x6466	; 0x6466 <__divmodsi4>
    298c:	67 2b       	or	r22, r23
    298e:	68 2b       	or	r22, r24
    2990:	69 2b       	or	r22, r25
    2992:	09 f4       	brne	.+2      	; 0x2996 <__vector_1+0x4f8>
    2994:	f2 c0       	rjmp	.+484    	; 0x2b7a <__vector_1+0x6dc>
    2996:	20 c0       	rjmp	.+64     	; 0x29d8 <__vector_1+0x53a>
    2998:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <g_initialize_fox_transmissions>
    299c:	88 23       	and	r24, r24
    299e:	09 f4       	brne	.+2      	; 0x29a2 <__vector_1+0x504>
    29a0:	fa c0       	rjmp	.+500    	; 0x2b96 <__vector_1+0x6f8>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_ZZ10__vector_1E23fox_transition_occurred>
    29a8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_fox_counter>
    29ac:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_fox_counter+0x1>
    29b0:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_number_of_foxes>
    29b4:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <g_number_of_foxes+0x1>
    29b8:	82 17       	cp	r24, r18
    29ba:	93 07       	cpc	r25, r19
    29bc:	34 f4       	brge	.+12     	; 0x29ca <__vector_1+0x52c>
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    29c6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
    29ca:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    29ce:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZZ10__vector_1E18seconds_into_cycle>
    29d2:	01 11       	cpse	r16, r1
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <__vector_1+0x53e>
    29d6:	36 c0       	rjmp	.+108    	; 0x2a44 <__vector_1+0x5a6>
    29d8:	00 23       	and	r16, r16
    29da:	81 f1       	breq	.+96     	; 0x2a3c <__vector_1+0x59e>
    29dc:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	82 e8       	ldi	r24, 0x82	; 130
    29e4:	9b e1       	ldi	r25, 0x1B	; 27
    29e6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    29ea:	cb 01       	movw	r24, r22
    29ec:	6a e0       	ldi	r22, 0x0A	; 10
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    29f4:	66 0f       	add	r22, r22
    29f6:	77 1f       	adc	r23, r23
    29f8:	70 93 59 05 	sts	0x0559, r23	; 0x800559 <g_code_throttle+0x1>
    29fc:	60 93 58 05 	sts	0x0558, r22	; 0x800558 <g_code_throttle>
    2a00:	19 82       	std	Y+1, r1	; 0x01
    2a02:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <g_messages_text+0x15>
    2a06:	88 23       	and	r24, r24
    2a08:	51 f0       	breq	.+20     	; 0x2a1e <__vector_1+0x580>
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	be 01       	movw	r22, r28
    2a10:	6f 5f       	subi	r22, 0xFF	; 255
    2a12:	7f 4f       	sbci	r23, 0xFF	; 255
    2a14:	8d ee       	ldi	r24, 0xED	; 237
    2a16:	94 e0       	ldi	r25, 0x04	; 4
    2a18:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2a1c:	09 c0       	rjmp	.+18     	; 0x2a30 <__vector_1+0x592>
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	be 01       	movw	r22, r28
    2a24:	6f 5f       	subi	r22, 0xFF	; 255
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	80 e4       	ldi	r24, 0x40	; 64
    2a2a:	92 e0       	ldi	r25, 0x02	; 2
    2a2c:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2a30:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_callsign_sent>
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_on_the_air>
    2a3a:	29 c0       	rjmp	.+82     	; 0x2a8e <__vector_1+0x5f0>
    2a3c:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_ZZ10__vector_1E23fox_transition_occurred>
    2a40:	88 23       	and	r24, r24
    2a42:	21 f0       	breq	.+8      	; 0x2a4c <__vector_1+0x5ae>
    2a44:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_callsign_sent>
    2a48:	81 11       	cpse	r24, r1
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <__vector_1+0x5b2>
    2a4c:	11 23       	and	r17, r17
    2a4e:	f9 f0       	breq	.+62     	; 0x2a8e <__vector_1+0x5f0>
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	80 e1       	ldi	r24, 0x10	; 16
    2a54:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    2a58:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZZ10__vector_1E23fox_transition_occurred>
    2a5c:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_number_of_foxes>
    2a60:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <g_number_of_foxes+0x1>
    2a64:	02 97       	sbiw	r24, 0x02	; 2
    2a66:	0c f4       	brge	.+2      	; 0x2a6a <__vector_1+0x5cc>
    2a68:	a3 c0       	rjmp	.+326    	; 0x2bb0 <__vector_1+0x712>
    2a6a:	20 91 5b 05 	lds	r18, 0x055B	; 0x80055b <g_fox>
    2a6e:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <g_fox_counter>
    2a72:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <g_fox_counter+0x1>
    2a76:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <g_fox_id_offset>
    2a7a:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <g_fox_id_offset+0x1>
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	84 0f       	add	r24, r20
    2a82:	95 1f       	adc	r25, r21
    2a84:	28 17       	cp	r18, r24
    2a86:	39 07       	cpc	r19, r25
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <__vector_1+0x5ee>
    2a8a:	8f c0       	rjmp	.+286    	; 0x2baa <__vector_1+0x70c>
    2a8c:	91 c0       	rjmp	.+290    	; 0x2bb0 <__vector_1+0x712>
    2a8e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <g_initialize_fox_transmissions>
    2a92:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_seconds_since_sync>
    2a96:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2a9a:	a0 91 62 05 	lds	r26, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2a9e:	b0 91 63 05 	lds	r27, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	a1 1d       	adc	r26, r1
    2aa6:	b1 1d       	adc	r27, r1
    2aa8:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_seconds_since_sync>
    2aac:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_seconds_since_sync+0x1>
    2ab0:	a0 93 62 05 	sts	0x0562, r26	; 0x800562 <g_seconds_since_sync+0x2>
    2ab4:	b0 93 63 05 	sts	0x0563, r27	; 0x800563 <g_seconds_since_sync+0x3>
    2ab8:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZZ10__vector_1E18seconds_into_cycle>
    2abc:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2ac6:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ10__vector_1E18seconds_into_cycle>
    2aca:	be c0       	rjmp	.+380    	; 0x2c48 <__vector_1+0x7aa>
    2acc:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_LED_enunciating>
    2ad0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_transmissions_disabled>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	8c e1       	ldi	r24, 0x1C	; 28
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	be 01       	movw	r22, r28
    2aee:	6f 5f       	subi	r22, 0xFF	; 255
    2af0:	7f 4f       	sbci	r23, 0xFF	; 255
    2af2:	88 ed       	ldi	r24, 0xD8	; 216
    2af4:	94 e0       	ldi	r25, 0x04	; 4
    2af6:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2afa:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_pattern_codespeed>
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	82 e8       	ldi	r24, 0x82	; 130
    2b02:	9b e1       	ldi	r25, 0x1B	; 27
    2b04:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    2b08:	cb 01       	movw	r24, r22
    2b0a:	6a e0       	ldi	r22, 0x0A	; 10
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    2b12:	66 0f       	add	r22, r22
    2b14:	77 1f       	adc	r23, r23
    2b16:	70 93 59 05 	sts	0x0559, r23	; 0x800559 <g_code_throttle+0x1>
    2b1a:	60 93 58 05 	sts	0x0558, r22	; 0x800558 <g_code_throttle>
    2b1e:	94 c0       	rjmp	.+296    	; 0x2c48 <__vector_1+0x7aa>
    2b20:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <g_id_interval_seconds>
    2b24:	30 91 1b 05 	lds	r19, 0x051B	; 0x80051b <g_id_interval_seconds+0x1>
    2b28:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <g_cycle_period_seconds>
    2b2c:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <g_cycle_period_seconds+0x1>
    2b30:	82 17       	cp	r24, r18
    2b32:	93 07       	cpc	r25, r19
    2b34:	0c f0       	brlt	.+2      	; 0x2b38 <__vector_1+0x69a>
    2b36:	a2 cd       	rjmp	.-1212   	; 0x267c <__vector_1+0x1de>
    2b38:	c9 cd       	rjmp	.-1134   	; 0x26cc <__vector_1+0x22e>
    2b3a:	60 91 60 05 	lds	r22, 0x0560	; 0x800560 <g_seconds_since_sync>
    2b3e:	70 91 61 05 	lds	r23, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2b42:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2b46:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    2b4a:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <g_cycle_period_seconds>
    2b4e:	30 91 21 05 	lds	r19, 0x0521	; 0x800521 <g_cycle_period_seconds+0x1>
    2b52:	03 2e       	mov	r0, r19
    2b54:	00 0c       	add	r0, r0
    2b56:	44 0b       	sbc	r20, r20
    2b58:	55 0b       	sbc	r21, r21
    2b5a:	0e 94 33 32 	call	0x6466	; 0x6466 <__divmodsi4>
    2b5e:	ab 01       	movw	r20, r22
    2b60:	70 93 44 04 	sts	0x0444, r23	; 0x800444 <_ZZ10__vector_1E18seconds_into_cycle+0x1>
    2b64:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <_ZZ10__vector_1E18seconds_into_cycle>
    2b68:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <g_id_interval_seconds>
    2b6c:	30 91 1b 05 	lds	r19, 0x051B	; 0x80051b <g_id_interval_seconds+0x1>
    2b70:	23 2b       	or	r18, r19
    2b72:	09 f0       	breq	.+2      	; 0x2b76 <__vector_1+0x6d8>
    2b74:	b1 cd       	rjmp	.-1182   	; 0x26d8 <__vector_1+0x23a>
    2b76:	10 e0       	ldi	r17, 0x00	; 0
    2b78:	56 c0       	rjmp	.+172    	; 0x2c26 <__vector_1+0x788>
    2b7a:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <g_seconds_since_sync>
    2b7e:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    2b82:	a0 91 62 05 	lds	r26, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    2b86:	b0 91 63 05 	lds	r27, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    2b8a:	89 2b       	or	r24, r25
    2b8c:	8a 2b       	or	r24, r26
    2b8e:	8b 2b       	or	r24, r27
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <__vector_1+0x6f6>
    2b92:	02 cf       	rjmp	.-508    	; 0x2998 <__vector_1+0x4fa>
    2b94:	06 cf       	rjmp	.-500    	; 0x29a2 <__vector_1+0x504>
    2b96:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_fox_counter>
    2b9a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <g_fox_counter+0x1>
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    2ba4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
    2ba8:	fc ce       	rjmp	.-520    	; 0x29a2 <__vector_1+0x504>
    2baa:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
    2bae:	6f cf       	rjmp	.-290    	; 0x2a8e <__vector_1+0x5f0>
    2bb0:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	66 0f       	add	r22, r22
    2bba:	77 1f       	adc	r23, r23
    2bbc:	66 0f       	add	r22, r22
    2bbe:	77 1f       	adc	r23, r23
    2bc0:	68 0f       	add	r22, r24
    2bc2:	79 1f       	adc	r23, r25
    2bc4:	6f 58       	subi	r22, 0x8F	; 143
    2bc6:	7d 4f       	sbci	r23, 0xFD	; 253
    2bc8:	88 ed       	ldi	r24, 0xD8	; 216
    2bca:	94 e0       	ldi	r25, 0x04	; 4
    2bcc:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
    2bd0:	11 e0       	ldi	r17, 0x01	; 1
    2bd2:	19 83       	std	Y+1, r17	; 0x01
    2bd4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_pattern_codespeed>
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	82 e8       	ldi	r24, 0x82	; 130
    2bdc:	9b e1       	ldi	r25, 0x1B	; 27
    2bde:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    2be2:	cb 01       	movw	r24, r22
    2be4:	6a e0       	ldi	r22, 0x0A	; 10
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__divmodhi4>
    2bec:	66 0f       	add	r22, r22
    2bee:	77 1f       	adc	r23, r23
    2bf0:	70 93 59 05 	sts	0x0559, r23	; 0x800559 <g_code_throttle+0x1>
    2bf4:	60 93 58 05 	sts	0x0558, r22	; 0x800558 <g_code_throttle>
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	8c e1       	ldi	r24, 0x1C	; 28
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	50 e0       	ldi	r21, 0x00	; 0
    2c0c:	be 01       	movw	r22, r28
    2c0e:	6f 5f       	subi	r22, 0xFF	; 255
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	88 ed       	ldi	r24, 0xD8	; 216
    2c14:	94 e0       	ldi	r25, 0x04	; 4
    2c16:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
    2c1a:	10 93 5a 05 	sts	0x055A, r17	; 0x80055a <g_on_the_air>
    2c1e:	37 cf       	rjmp	.-402    	; 0x2a8e <__vector_1+0x5f0>
    2c20:	10 e0       	ldi	r17, 0x00	; 0
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <__vector_1+0x788>
    2c24:	10 e0       	ldi	r17, 0x00	; 0
    2c26:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_number_of_foxes>
    2c2a:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <g_number_of_foxes+0x1>
    2c2e:	89 2b       	or	r24, r25
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <__vector_1+0x796>
    2c32:	97 ce       	rjmp	.-722    	; 0x2962 <__vector_1+0x4c4>
    2c34:	03 cf       	rjmp	.-506    	; 0x2a3c <__vector_1+0x59e>
    2c36:	11 e0       	ldi	r17, 0x01	; 1
    2c38:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_number_of_foxes>
    2c3c:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <g_number_of_foxes+0x1>
    2c40:	89 2b       	or	r24, r25
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <__vector_1+0x7a8>
    2c44:	cb ce       	rjmp	.-618    	; 0x29dc <__vector_1+0x53e>
    2c46:	8f ce       	rjmp	.-738    	; 0x2966 <__vector_1+0x4c8>
    2c48:	0f 90       	pop	r0
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	ff 91       	pop	r31
    2c50:	ef 91       	pop	r30
    2c52:	bf 91       	pop	r27
    2c54:	af 91       	pop	r26
    2c56:	9f 91       	pop	r25
    2c58:	8f 91       	pop	r24
    2c5a:	7f 91       	pop	r23
    2c5c:	6f 91       	pop	r22
    2c5e:	5f 91       	pop	r21
    2c60:	4f 91       	pop	r20
    2c62:	3f 91       	pop	r19
    2c64:	2f 91       	pop	r18
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
    2c72:	bf 90       	pop	r11
    2c74:	af 90       	pop	r10
    2c76:	9f 90       	pop	r9
    2c78:	8f 90       	pop	r8
    2c7a:	0f 90       	pop	r0
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	0f 90       	pop	r0
    2c80:	1f 90       	pop	r1
    2c82:	18 95       	reti

00002c84 <__vector_14>:
    2c84:	1f 92       	push	r1
    2c86:	0f 92       	push	r0
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	0f 92       	push	r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	2f 93       	push	r18
    2c90:	3f 93       	push	r19
    2c92:	4f 93       	push	r20
    2c94:	5f 93       	push	r21
    2c96:	6f 93       	push	r22
    2c98:	7f 93       	push	r23
    2c9a:	8f 93       	push	r24
    2c9c:	9f 93       	push	r25
    2c9e:	af 93       	push	r26
    2ca0:	bf 93       	push	r27
    2ca2:	ef 93       	push	r30
    2ca4:	ff 93       	push	r31
    2ca6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_AM_enabled>
    2caa:	81 11       	cpse	r24, r1
    2cac:	13 c0       	rjmp	.+38     	; 0x2cd4 <__vector_14+0x50>
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_ZZ11__vector_14E6toggle>
    2cb4:	81 11       	cpse	r24, r1
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	60 93 41 04 	sts	0x0441, r22	; 0x800441 <_ZZ11__vector_14E6toggle>
    2cbc:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <g_audio_tone_state>
    2cc0:	88 23       	and	r24, r24
    2cc2:	21 f0       	breq	.+8      	; 0x2ccc <__vector_14+0x48>
    2cc4:	85 e0       	ldi	r24, 0x05	; 5
    2cc6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <__vector_14+0x50>
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	85 e0       	ldi	r24, 0x05	; 5
    2cd0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    2cd4:	ff 91       	pop	r31
    2cd6:	ef 91       	pop	r30
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	9f 91       	pop	r25
    2cde:	8f 91       	pop	r24
    2ce0:	7f 91       	pop	r23
    2ce2:	6f 91       	pop	r22
    2ce4:	5f 91       	pop	r21
    2ce6:	4f 91       	pop	r20
    2ce8:	3f 91       	pop	r19
    2cea:	2f 91       	pop	r18
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <__vector_11>:
    2cf6:	1f 92       	push	r1
    2cf8:	0f 92       	push	r0
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	0f 92       	push	r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	2f 93       	push	r18
    2d02:	3f 93       	push	r19
    2d04:	4f 93       	push	r20
    2d06:	5f 93       	push	r21
    2d08:	6f 93       	push	r22
    2d0a:	7f 93       	push	r23
    2d0c:	8f 93       	push	r24
    2d0e:	9f 93       	push	r25
    2d10:	af 93       	push	r26
    2d12:	bf 93       	push	r27
    2d14:	ef 93       	push	r30
    2d16:	ff 93       	push	r31
    2d18:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_AM_enabled>
    2d1c:	88 23       	and	r24, r24
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <__vector_11+0x2c>
    2d20:	42 c0       	rjmp	.+132    	; 0x2da6 <__vector_11+0xb0>
    2d22:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_sendAMmodulation>
    2d26:	81 11       	cpse	r24, r1
    2d28:	28 c0       	rjmp	.+80     	; 0x2d7a <__vector_11+0x84>
    2d2a:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <_ZZ11__vector_11E5index>
    2d2e:	81 11       	cpse	r24, r1
    2d30:	24 c0       	rjmp	.+72     	; 0x2d7a <__vector_11+0x84>
    2d32:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <g_sendAMmodulationConstantly>
    2d36:	88 23       	and	r24, r24
    2d38:	39 f0       	breq	.+14     	; 0x2d48 <__vector_11+0x52>
    2d3a:	2c c0       	rjmp	.+88     	; 0x2d94 <__vector_11+0x9e>
    2d3c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <_ZZ11__vector_11E5index>
    2d40:	95 b9       	out	0x05, r25	; 5
    2d42:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <_ZZ11__vector_11E11controlPins>
    2d46:	2f c0       	rjmp	.+94     	; 0x2da6 <__vector_11+0xb0>
    2d48:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_on_the_air>
    2d4c:	88 23       	and	r24, r24
    2d4e:	49 f0       	breq	.+18     	; 0x2d62 <__vector_11+0x6c>
    2d50:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <_ZZ11__vector_11E11controlPins>
    2d54:	8f 33       	cpi	r24, 0x3F	; 63
    2d56:	39 f1       	breq	.+78     	; 0x2da6 <__vector_11+0xb0>
    2d58:	8f e3       	ldi	r24, 0x3F	; 63
    2d5a:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <_ZZ11__vector_11E11controlPins>
    2d5e:	85 b9       	out	0x05, r24	; 5
    2d60:	22 c0       	rjmp	.+68     	; 0x2da6 <__vector_11+0xb0>
    2d62:	84 e0       	ldi	r24, 0x04	; 4
    2d64:	0e 94 34 02 	call	0x468	; 0x468 <digitalRead>
    2d68:	81 11       	cpse	r24, r1
    2d6a:	1d c0       	rjmp	.+58     	; 0x2da6 <__vector_11+0xb0>
    2d6c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <g_att_rf_shutdown_delay>
    2d70:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <g_att_rf_shutdown_delay+0x1>
    2d74:	89 2b       	or	r24, r25
    2d76:	a1 f0       	breq	.+40     	; 0x2da0 <__vector_11+0xaa>
    2d78:	16 c0       	rjmp	.+44     	; 0x2da6 <__vector_11+0xb0>
    2d7a:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <_ZZ11__vector_11E5index>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	8e 0f       	add	r24, r30
    2d82:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <_ZZ11__vector_11E5index>
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	ec 5d       	subi	r30, 0xDC	; 220
    2d8a:	fa 4f       	sbci	r31, 0xFA	; 250
    2d8c:	90 81       	ld	r25, Z
    2d8e:	80 32       	cpi	r24, 0x20	; 32
    2d90:	a8 f6       	brcc	.-86     	; 0x2d3c <__vector_11+0x46>
    2d92:	d6 cf       	rjmp	.-84     	; 0x2d40 <__vector_11+0x4a>
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <_ZZ11__vector_11E5index>
    2d9a:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <g_dataModulation>
    2d9e:	d0 cf       	rjmp	.-96     	; 0x2d40 <__vector_11+0x4a>
    2da0:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <_ZZ11__vector_11E11controlPins>
    2da4:	15 b8       	out	0x05, r1	; 5
    2da6:	ff 91       	pop	r31
    2da8:	ef 91       	pop	r30
    2daa:	bf 91       	pop	r27
    2dac:	af 91       	pop	r26
    2dae:	9f 91       	pop	r25
    2db0:	8f 91       	pop	r24
    2db2:	7f 91       	pop	r23
    2db4:	6f 91       	pop	r22
    2db6:	5f 91       	pop	r21
    2db8:	4f 91       	pop	r20
    2dba:	3f 91       	pop	r19
    2dbc:	2f 91       	pop	r18
    2dbe:	0f 90       	pop	r0
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	0f 90       	pop	r0
    2dc4:	1f 90       	pop	r1
    2dc6:	18 95       	reti

00002dc8 <_Z23clockConfigurationCheckv>:
    2dc8:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    2dcc:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    2dd0:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    2dd4:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    2dd8:	81 15       	cp	r24, r1
    2dda:	96 46       	sbci	r25, 0x66	; 102
    2ddc:	ae 4e       	sbci	r26, 0xEE	; 238
    2dde:	bf 45       	sbci	r27, 0x5F	; 95
    2de0:	08 f4       	brcc	.+2      	; 0x2de4 <_Z23clockConfigurationCheckv+0x1c>
    2de2:	67 c0       	rjmp	.+206    	; 0x2eb2 <_Z23clockConfigurationCheckv+0xea>
    2de4:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    2de8:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    2dec:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    2df0:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    2df4:	81 15       	cp	r24, r1
    2df6:	96 46       	sbci	r25, 0x66	; 102
    2df8:	ae 4e       	sbci	r26, 0xEE	; 238
    2dfa:	bf 45       	sbci	r27, 0x5F	; 95
    2dfc:	08 f4       	brcc	.+2      	; 0x2e00 <_Z23clockConfigurationCheckv+0x38>
    2dfe:	5b c0       	rjmp	.+182    	; 0x2eb6 <_Z23clockConfigurationCheckv+0xee>
    2e00:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    2e04:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    2e08:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    2e0c:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    2e10:	81 15       	cp	r24, r1
    2e12:	96 46       	sbci	r25, 0x66	; 102
    2e14:	ae 4e       	sbci	r26, 0xEE	; 238
    2e16:	bf 45       	sbci	r27, 0x5F	; 95
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <_Z23clockConfigurationCheckv+0x54>
    2e1a:	4f c0       	rjmp	.+158    	; 0x2eba <_Z23clockConfigurationCheckv+0xf2>
    2e1c:	40 91 49 05 	lds	r20, 0x0549	; 0x800549 <g_event_finish_epoch>
    2e20:	50 91 4a 05 	lds	r21, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    2e24:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    2e28:	70 91 4c 05 	lds	r23, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    2e2c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    2e30:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    2e34:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    2e38:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    2e3c:	84 17       	cp	r24, r20
    2e3e:	95 07       	cpc	r25, r21
    2e40:	a6 07       	cpc	r26, r22
    2e42:	b7 07       	cpc	r27, r23
    2e44:	e0 f5       	brcc	.+120    	; 0x2ebe <_Z23clockConfigurationCheckv+0xf6>
    2e46:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_current_epoch>
    2e4a:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_current_epoch+0x1>
    2e4e:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_current_epoch+0x2>
    2e52:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_current_epoch+0x3>
    2e56:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    2e5a:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    2e5e:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    2e62:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    2e66:	84 17       	cp	r24, r20
    2e68:	95 07       	cpc	r25, r21
    2e6a:	a6 07       	cpc	r26, r22
    2e6c:	b7 07       	cpc	r27, r23
    2e6e:	48 f1       	brcs	.+82     	; 0x2ec2 <_Z23clockConfigurationCheckv+0xfa>
    2e70:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <g_current_epoch>
    2e74:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <g_current_epoch+0x1>
    2e78:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <g_current_epoch+0x2>
    2e7c:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <g_current_epoch+0x3>
    2e80:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    2e84:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    2e88:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    2e8c:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    2e90:	84 17       	cp	r24, r20
    2e92:	95 07       	cpc	r25, r21
    2e94:	a6 07       	cpc	r26, r22
    2e96:	b7 07       	cpc	r27, r23
    2e98:	30 f4       	brcc	.+12     	; 0x2ea6 <_Z23clockConfigurationCheckv+0xde>
    2e9a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    2e9e:	81 11       	cpse	r24, r1
    2ea0:	12 c0       	rjmp	.+36     	; 0x2ec6 <_Z23clockConfigurationCheckv+0xfe>
    2ea2:	85 e0       	ldi	r24, 0x05	; 5
    2ea4:	08 95       	ret
    2ea6:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <g_use_rtc_for_startstop>
    2eaa:	88 23       	and	r24, r24
    2eac:	71 f0       	breq	.+28     	; 0x2eca <_Z23clockConfigurationCheckv+0x102>
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	08 95       	ret
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	08 95       	ret
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
    2eb8:	08 95       	ret
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	08 95       	ret
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	08 95       	ret
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	08 95       	ret
    2ec6:	83 e0       	ldi	r24, 0x03	; 3
    2ec8:	08 95       	ret
    2eca:	84 e0       	ldi	r24, 0x04	; 4
    2ecc:	08 95       	ret

00002ece <_Z11setupForFoxP5Fox_t13EventAction_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox, EventAction_t action)
{
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <_Z11setupForFoxP5Fox_t13EventAction_t+0xa>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	16 2f       	mov	r17, r22
	if(fox)
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	31 f0       	breq	.+12     	; 0x2eee <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
	{
		if(*fox != INVALID_FOX)
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	80 81       	ld	r24, Z
    2ee6:	82 31       	cpi	r24, 0x12	; 18
    2ee8:	11 f0       	breq	.+4      	; 0x2eee <_Z11setupForFoxP5Fox_t13EventAction_t+0x20>
		{
			g_fox = *fox;
    2eea:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <g_fox>
		}
	}

	g_current_epoch = RTC_get_epoch();
    2eee:	0e 94 8b 03 	call	0x716	; 0x716 <_Z13RTC_get_epochv>
    2ef2:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_current_epoch>
    2ef6:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_current_epoch+0x1>
    2efa:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_current_epoch+0x2>
    2efe:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_current_epoch+0x3>
	g_use_ptt_periodic_reset = FALSE;
    2f02:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <g_use_ptt_periodic_reset>

	cli();
    2f06:	f8 94       	cli

	switch(g_fox)
    2f08:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    2f0c:	8d 30       	cpi	r24, 0x0D	; 13
    2f0e:	30 f4       	brcc	.+12     	; 0x2f1c <_Z11setupForFoxP5Fox_t13EventAction_t+0x4e>
    2f10:	88 30       	cpi	r24, 0x08	; 8
    2f12:	30 f5       	brcc	.+76     	; 0x2f60 <_Z11setupForFoxP5Fox_t13EventAction_t+0x92>
    2f14:	81 50       	subi	r24, 0x01	; 1
    2f16:	85 30       	cpi	r24, 0x05	; 5
    2f18:	28 f0       	brcs	.+10     	; 0x2f24 <_Z11setupForFoxP5Fox_t13EventAction_t+0x56>
    2f1a:	64 c0       	rjmp	.+200    	; 0x2fe4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x116>
    2f1c:	82 31       	cpi	r24, 0x12	; 18
    2f1e:	08 f4       	brcc	.+2      	; 0x2f22 <_Z11setupForFoxP5Fox_t13EventAction_t+0x54>
    2f20:	41 c0       	rjmp	.+130    	; 0x2fa4 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd6>
    2f22:	60 c0       	rjmp	.+192    	; 0x2fe4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x116>
		case FOX_2:
		case FOX_3:
		case FOX_4:
		case FOX_5:
		{
			g_on_air_interval_seconds = 60;
    2f24:	8c e3       	ldi	r24, 0x3C	; 60
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_on_air_interval_seconds+0x1>
    2f2c:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_on_air_interval_seconds>
			g_cycle_period_seconds = 300;
    2f30:	8c e2       	ldi	r24, 0x2C	; 44
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <g_cycle_period_seconds+0x1>
    2f38:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2f3c:	25 e0       	ldi	r18, 0x05	; 5
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	30 93 1f 05 	sts	0x051F, r19	; 0x80051f <g_number_of_foxes+0x1>
    2f44:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <g_number_of_foxes>
			g_fox_id_offset = 0;
    2f48:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_fox_id_offset+0x1>
    2f4c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <g_fox_id_offset>
			g_pattern_codespeed = 8;
    2f50:	28 e0       	ldi	r18, 0x08	; 8
    2f52:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
			g_id_interval_seconds = 300;
    2f56:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <g_id_interval_seconds+0x1>
    2f5a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_id_interval_seconds>
		}
		break;
    2f5e:	70 c0       	rjmp	.+224    	; 0x3040 <_Z11setupForFoxP5Fox_t13EventAction_t+0x172>
		case SPRINT_S2:
		case SPRINT_S3:
		case SPRINT_S4:
		case SPRINT_S5:
		{
			g_on_air_interval_seconds = 12;
    2f60:	8c e0       	ldi	r24, 0x0C	; 12
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_on_air_interval_seconds+0x1>
    2f68:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    2f6c:	8c e3       	ldi	r24, 0x3C	; 60
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <g_cycle_period_seconds+0x1>
    2f74:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2f78:	85 e0       	ldi	r24, 0x05	; 5
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <g_number_of_foxes+0x1>
    2f80:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_SLOW_CODE_SPEED;
    2f84:	88 e0       	ldi	r24, 0x08	; 8
    2f86:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_S1 - 1;
    2f8a:	87 e0       	ldi	r24, 0x07	; 7
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <g_fox_id_offset+0x1>
    2f92:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <g_fox_id_offset>
			g_id_interval_seconds = 600;
    2f96:	88 e5       	ldi	r24, 0x58	; 88
    2f98:	92 e0       	ldi	r25, 0x02	; 2
    2f9a:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <g_id_interval_seconds+0x1>
    2f9e:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_id_interval_seconds>
		}
		break;
    2fa2:	4e c0       	rjmp	.+156    	; 0x3040 <_Z11setupForFoxP5Fox_t13EventAction_t+0x172>
		case SPRINT_F2:
		case SPRINT_F3:
		case SPRINT_F4:
		case SPRINT_F5:
		{
			g_on_air_interval_seconds = 12;
    2fa4:	8c e0       	ldi	r24, 0x0C	; 12
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_on_air_interval_seconds+0x1>
    2fac:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_on_air_interval_seconds>
			g_cycle_period_seconds = 60;
    2fb0:	2c e3       	ldi	r18, 0x3C	; 60
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	30 93 21 05 	sts	0x0521, r19	; 0x800521 <g_cycle_period_seconds+0x1>
    2fb8:	20 93 20 05 	sts	0x0520, r18	; 0x800520 <g_cycle_period_seconds>
			g_number_of_foxes = 5;
    2fbc:	25 e0       	ldi	r18, 0x05	; 5
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	30 93 1f 05 	sts	0x051F, r19	; 0x80051f <g_number_of_foxes+0x1>
    2fc4:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <g_number_of_foxes>
			g_pattern_codespeed = SPRINT_FAST_CODE_SPEED;
    2fc8:	2f e0       	ldi	r18, 0x0F	; 15
    2fca:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <g_pattern_codespeed>
			g_fox_id_offset = SPRINT_F1 - 1;
    2fce:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <g_fox_id_offset+0x1>
    2fd2:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <g_fox_id_offset>
			g_id_interval_seconds = 600;
    2fd6:	88 e5       	ldi	r24, 0x58	; 88
    2fd8:	92 e0       	ldi	r25, 0x02	; 2
    2fda:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <g_id_interval_seconds+0x1>
    2fde:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_id_interval_seconds>
		}
		break;
    2fe2:	2e c0       	rjmp	.+92     	; 0x3040 <_Z11setupForFoxP5Fox_t13EventAction_t+0x172>

		/* case BEACON:
		 * case SPECTATOR: */
		default:
		{
			g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    2fe4:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_ptt_periodic_reset_enabled>
    2fe8:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <g_use_ptt_periodic_reset>
			g_number_of_foxes = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <g_number_of_foxes+0x1>
    2ff4:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <g_number_of_foxes>
			g_pattern_codespeed = 8;
    2ff8:	88 e0       	ldi	r24, 0x08	; 8
    2ffa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_pattern_codespeed>
			g_id_interval_seconds = g_ptt_periodic_reset_enabled ? 60 : 600;
    2ffe:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_ptt_periodic_reset_enabled>
    3002:	81 11       	cpse	r24, r1
    3004:	03 c0       	rjmp	.+6      	; 0x300c <_Z11setupForFoxP5Fox_t13EventAction_t+0x13e>
    3006:	88 e5       	ldi	r24, 0x58	; 88
    3008:	92 e0       	ldi	r25, 0x02	; 2
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <_Z11setupForFoxP5Fox_t13EventAction_t+0x142>
    300c:	8c e3       	ldi	r24, 0x3C	; 60
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <g_id_interval_seconds+0x1>
    3014:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <g_id_interval_seconds>
			g_on_air_interval_seconds = g_id_interval_seconds;
    3018:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <g_id_interval_seconds>
    301c:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <g_id_interval_seconds+0x1>
    3020:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <g_on_air_interval_seconds+0x1>
    3024:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <g_on_air_interval_seconds>
			g_fox_id_offset = 0;
    3028:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <g_fox_id_offset+0x1>
    302c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <g_fox_id_offset>
			g_cycle_period_seconds = g_id_interval_seconds;
    3030:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <g_id_interval_seconds>
    3034:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <g_id_interval_seconds+0x1>
    3038:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <g_cycle_period_seconds+0x1>
    303c:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <g_cycle_period_seconds>
		}
		break;
	}

	if(action == START_NOTHING)
    3040:	11 11       	cpse	r17, r1
    3042:	06 c0       	rjmp	.+12     	; 0x3050 <_Z11setupForFoxP5Fox_t13EventAction_t+0x182>
	{
		g_use_rtc_for_startstop = FALSE;
    3044:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
    304e:	e0 c0       	rjmp	.+448    	; 0x3210 <_Z11setupForFoxP5Fox_t13EventAction_t+0x342>
	}
	else if(action == START_EVENT_NOW)
    3050:	11 30       	cpi	r17, 0x01	; 1
    3052:	99 f4       	brne	.+38     	; 0x307a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1ac>
	{
		g_fox_counter = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    305c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
		g_seconds_since_sync = 0;                                               /* Total elapsed time since synchronization */
    3060:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <g_seconds_since_sync>
    3064:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_seconds_since_sync+0x1>
    3068:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_seconds_since_sync+0x2>
    306c:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    3070:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    3074:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_transmissions_disabled>
    3078:	cb c0       	rjmp	.+406    	; 0x3210 <_Z11setupForFoxP5Fox_t13EventAction_t+0x342>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    307a:	12 30       	cpi	r17, 0x02	; 2
    307c:	b9 f5       	brne	.+110    	; 0x30ec <_Z11setupForFoxP5Fox_t13EventAction_t+0x21e>
	{
		g_fox_counter = MAX(1, g_fox - g_fox_id_offset);
    307e:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    3082:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <g_fox_id_offset>
    3086:	30 91 1d 05 	lds	r19, 0x051D	; 0x80051d <g_fox_id_offset+0x1>
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	82 1b       	sub	r24, r18
    308e:	93 0b       	sbc	r25, r19
    3090:	18 16       	cp	r1, r24
    3092:	19 06       	cpc	r1, r25
    3094:	14 f0       	brlt	.+4      	; 0x309a <_Z11setupForFoxP5Fox_t13EventAction_t+0x1cc>
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    309e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
    30a2:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_fox_counter>
    30a6:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_fox_counter+0x1>
    30aa:	40 91 22 05 	lds	r20, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    30ae:	50 91 23 05 	lds	r21, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    30b2:	21 50       	subi	r18, 0x01	; 1
    30b4:	31 09       	sbc	r19, r1
    30b6:	24 9f       	mul	r18, r20
    30b8:	c0 01       	movw	r24, r0
    30ba:	25 9f       	mul	r18, r21
    30bc:	90 0d       	add	r25, r0
    30be:	34 9f       	mul	r19, r20
    30c0:	90 0d       	add	r25, r0
    30c2:	11 24       	eor	r1, r1
    30c4:	09 2e       	mov	r0, r25
    30c6:	00 0c       	add	r0, r0
    30c8:	aa 0b       	sbc	r26, r26
    30ca:	bb 0b       	sbc	r27, r27
    30cc:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_seconds_since_sync>
    30d0:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_seconds_since_sync+0x1>
    30d4:	a0 93 62 05 	sts	0x0562, r26	; 0x800562 <g_seconds_since_sync+0x2>
    30d8:	b0 93 63 05 	sts	0x0563, r27	; 0x800563 <g_seconds_since_sync+0x3>
		g_use_rtc_for_startstop = FALSE;
    30dc:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <g_use_rtc_for_startstop>
		g_transmissions_disabled = FALSE;
    30e0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_transmissions_disabled>
		g_initialize_fox_transmissions = INIT_EVENT_STARTING_NOW;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <g_initialize_fox_transmissions>
    30ea:	92 c0       	rjmp	.+292    	; 0x3210 <_Z11setupForFoxP5Fox_t13EventAction_t+0x342>
	}
	else                                                                    /* if(action == START_EVENT_WITH_STARTFINISH_TIMES) */
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    30ec:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
    30f0:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    30f4:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    30f8:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    30fc:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    3100:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3104:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3108:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    310c:	48 17       	cp	r20, r24
    310e:	59 07       	cpc	r21, r25
    3110:	6a 07       	cpc	r22, r26
    3112:	7b 07       	cpc	r23, r27
    3114:	08 f0       	brcs	.+2      	; 0x3118 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24a>
    3116:	69 c0       	rjmp	.+210    	; 0x31ea <_Z11setupForFoxP5Fox_t13EventAction_t+0x31c>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    3118:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    311c:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3120:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3124:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3128:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
    312c:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    3130:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    3134:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    3138:	84 1b       	sub	r24, r20
    313a:	95 0b       	sbc	r25, r21
    313c:	a6 0b       	sbc	r26, r22
    313e:	b7 0b       	sbc	r27, r23
    3140:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <g_seconds_since_sync>
    3144:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <g_seconds_since_sync+0x1>
    3148:	a0 93 62 05 	sts	0x0562, r26	; 0x800562 <g_seconds_since_sync+0x2>
    314c:	b0 93 63 05 	sts	0x0563, r27	; 0x800563 <g_seconds_since_sync+0x3>
			g_fox_counter = CLAMP(1, 1 + ((g_seconds_since_sync % g_cycle_period_seconds) / g_on_air_interval_seconds), g_number_of_foxes);
    3150:	60 91 60 05 	lds	r22, 0x0560	; 0x800560 <g_seconds_since_sync>
    3154:	70 91 61 05 	lds	r23, 0x0561	; 0x800561 <g_seconds_since_sync+0x1>
    3158:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <g_seconds_since_sync+0x2>
    315c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <g_seconds_since_sync+0x3>
    3160:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <g_cycle_period_seconds>
    3164:	30 91 21 05 	lds	r19, 0x0521	; 0x800521 <g_cycle_period_seconds+0x1>
    3168:	00 91 22 05 	lds	r16, 0x0522	; 0x800522 <g_on_air_interval_seconds>
    316c:	10 91 23 05 	lds	r17, 0x0523	; 0x800523 <g_on_air_interval_seconds+0x1>
    3170:	03 2e       	mov	r0, r19
    3172:	00 0c       	add	r0, r0
    3174:	44 0b       	sbc	r20, r20
    3176:	55 0b       	sbc	r21, r21
    3178:	0e 94 33 32 	call	0x6466	; 0x6466 <__divmodsi4>
    317c:	98 01       	movw	r18, r16
    317e:	11 0f       	add	r17, r17
    3180:	44 0b       	sbc	r20, r20
    3182:	55 0b       	sbc	r21, r21
    3184:	0e 94 33 32 	call	0x6466	; 0x6466 <__divmodsi4>
    3188:	ba 01       	movw	r22, r20
    318a:	a9 01       	movw	r20, r18
    318c:	4f 5f       	subi	r20, 0xFF	; 255
    318e:	5f 4f       	sbci	r21, 0xFF	; 255
    3190:	6f 4f       	sbci	r22, 0xFF	; 255
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <g_number_of_foxes>
    3198:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <g_number_of_foxes+0x1>
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	9a 81       	ldd	r25, Y+2	; 0x02
    31a4:	09 2e       	mov	r0, r25
    31a6:	00 0c       	add	r0, r0
    31a8:	aa 0b       	sbc	r26, r26
    31aa:	bb 0b       	sbc	r27, r27
    31ac:	84 17       	cp	r24, r20
    31ae:	95 07       	cpc	r25, r21
    31b0:	a6 07       	cpc	r26, r22
    31b2:	b7 07       	cpc	r27, r23
    31b4:	3c f4       	brge	.+14     	; 0x31c4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2f6>
    31b6:	29 81       	ldd	r18, Y+1	; 0x01
    31b8:	3a 81       	ldd	r19, Y+2	; 0x02
    31ba:	c9 01       	movw	r24, r18
    31bc:	33 0f       	add	r19, r19
    31be:	aa 0b       	sbc	r26, r26
    31c0:	bb 0b       	sbc	r27, r27
    31c2:	0b c0       	rjmp	.+22     	; 0x31da <_Z11setupForFoxP5Fox_t13EventAction_t+0x30c>
    31c4:	db 01       	movw	r26, r22
    31c6:	ca 01       	movw	r24, r20
    31c8:	14 16       	cp	r1, r20
    31ca:	15 06       	cpc	r1, r21
    31cc:	16 06       	cpc	r1, r22
    31ce:	17 06       	cpc	r1, r23
    31d0:	24 f0       	brlt	.+8      	; 0x31da <_Z11setupForFoxP5Fox_t13EventAction_t+0x30c>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 e0       	ldi	r26, 0x00	; 0
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    31de:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
			g_initialize_fox_transmissions = INIT_EVENT_IN_PROGRESS_WITH_STARTFINISH_TIMES;
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <g_initialize_fox_transmissions>
    31e8:	0e c0       	rjmp	.+28     	; 0x3206 <_Z11setupForFoxP5Fox_t13EventAction_t+0x338>
		}
		else                                                                /* event starts in the future */
		{
			g_seconds_since_sync = 0;                                       /* Total elapsed time counter */
    31ea:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <g_seconds_since_sync>
    31ee:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <g_seconds_since_sync+0x1>
    31f2:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <g_seconds_since_sync+0x2>
    31f6:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <g_seconds_since_sync+0x3>
			g_fox_counter = 1;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_fox_counter+0x1>
    3202:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_fox_counter>
		}

		g_use_rtc_for_startstop = TRUE;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <g_use_rtc_for_startstop>
		g_transmissions_disabled = TRUE;
    320c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
}


void sendMorseTone(BOOL onOff)
{
	OCR0A = DEFAULT_TONE_FREQUENCY;
    3210:	8f e2       	ldi	r24, 0x2F	; 47
    3212:	87 bd       	out	0x27, r24	; 39
	g_audio_tone_state = onOff;
    3214:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <g_audio_tone_state>
		g_use_rtc_for_startstop = TRUE;
		g_transmissions_disabled = TRUE;
	}

	sendMorseTone(OFF);
	g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    3218:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_code_throttle+0x1>
    321c:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_code_throttle>
	g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    3220:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>

	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    3224:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>
	digitalWrite(PIN_LED, OFF);             /*  LED Off - in case it was left on */
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	80 e1       	ldi	r24, 0x10	; 16
    322c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	86 e0       	ldi	r24, 0x06	; 6
    3234:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
	g_sendAMmodulation = FALSE;
    3238:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_sendAMmodulation>
	g_LED_enunciating = FALSE;
    323c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_LED_enunciating>
	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */
    3240:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>

	sei();
    3244:	78 94       	sei
}
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	08 95       	ret

00003254 <_Z7readADCv>:
 *  Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;
    3254:	8f ef       	ldi	r24, 0xFF	; 255
    3256:	9f ef       	ldi	r25, 0xFF	; 255

	while((ADCSRA & (1 << ADSC)) && c)
    3258:	ea e7       	ldi	r30, 0x7A	; 122
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	20 81       	ld	r18, Z
    325e:	26 ff       	sbrs	r18, 6
    3260:	04 c0       	rjmp	.+8      	; 0x326a <_Z7readADCv+0x16>
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	11 f0       	breq	.+4      	; 0x326a <_Z7readADCv+0x16>
	{
		c--;    /* Just wait for ADC to finish. */
    3266:	01 97       	sbiw	r24, 0x01	; 1
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	uint16_t c = MAX_UINT16;

	while((ADCSRA & (1 << ADSC)) && c)
    3268:	f9 cf       	rjmp	.-14     	; 0x325c <_Z7readADCv+0x8>
	{
		c--;    /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    326a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    326e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    3272:	ea e7       	ldi	r30, 0x7A	; 122
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	90 81       	ld	r25, Z
    3278:	90 64       	ori	r25, 0x40	; 64
    327a:	90 83       	st	Z, r25
	return( result);
}
    327c:	c9 01       	movw	r24, r18
    327e:	08 95       	ret

00003280 <_Z7getTempv>:

/*
 *  Returns the most recent temperature reading
 */
float getTemp(void)
{
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
	float offset = CLAMP(-440., (float)g_atmega_temp_calibration / 10., 440.);
    3288:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <g_atmega_temp_calibration>
    328c:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <g_atmega_temp_calibration+0x1>
    3290:	07 2e       	mov	r0, r23
    3292:	00 0c       	add	r0, r0
    3294:	88 0b       	sbc	r24, r24
    3296:	99 0b       	sbc	r25, r25
    3298:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__floatsisf>
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e2       	ldi	r20, 0x20	; 32
    32a2:	51 e4       	ldi	r21, 0x41	; 65
    32a4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <__divsf3>
    32a8:	06 2f       	mov	r16, r22
    32aa:	17 2f       	mov	r17, r23
    32ac:	d8 2f       	mov	r29, r24
    32ae:	c9 2f       	mov	r28, r25
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4c ed       	ldi	r20, 0xDC	; 220
    32b6:	53 e4       	ldi	r21, 0x43	; 67
    32b8:	0e 94 df 30 	call	0x61be	; 0x61be <__gesf2>
    32bc:	18 16       	cp	r1, r24
    32be:	6c f0       	brlt	.+26     	; 0x32da <_Z7getTempv+0x5a>
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	4c ed       	ldi	r20, 0xDC	; 220
    32c6:	53 ec       	ldi	r21, 0xC3	; 195
    32c8:	60 2f       	mov	r22, r16
    32ca:	71 2f       	mov	r23, r17
    32cc:	8d 2f       	mov	r24, r29
    32ce:	9c 2f       	mov	r25, r28
    32d0:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <__cmpsf2>
    32d4:	88 23       	and	r24, r24
    32d6:	34 f0       	brlt	.+12     	; 0x32e4 <_Z7getTempv+0x64>
    32d8:	09 c0       	rjmp	.+18     	; 0x32ec <_Z7getTempv+0x6c>
    32da:	00 e0       	ldi	r16, 0x00	; 0
    32dc:	10 e0       	ldi	r17, 0x00	; 0
    32de:	dc ed       	ldi	r29, 0xDC	; 220
    32e0:	c3 e4       	ldi	r28, 0x43	; 67
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <_Z7getTempv+0x6c>
    32e4:	00 e0       	ldi	r16, 0x00	; 0
    32e6:	10 e0       	ldi	r17, 0x00	; 0
    32e8:	dc ed       	ldi	r29, 0xDC	; 220
    32ea:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    32ec:	0e 94 2a 19 	call	0x3254	; 0x3254 <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    32f0:	0e 94 2a 19 	call	0x3254	; 0x3254 <_Z7readADCv>
    32f4:	bc 01       	movw	r22, r24
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <__floatunsisf>
    32fe:	2e ea       	ldi	r18, 0xAE	; 174
    3300:	37 e2       	ldi	r19, 0x27	; 39
    3302:	42 ea       	ldi	r20, 0xA2	; 162
    3304:	53 e4       	ldi	r21, 0x43	; 67
    3306:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
    330a:	26 ef       	ldi	r18, 0xF6	; 246
    330c:	38 e2       	ldi	r19, 0x28	; 40
    330e:	4c e9       	ldi	r20, 0x9C	; 156
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <__divsf3>
    3316:	20 2f       	mov	r18, r16
    3318:	31 2f       	mov	r19, r17
    331a:	4d 2f       	mov	r20, r29
    331c:	5c 2f       	mov	r21, r28
    331e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    3322:	0e 94 51 31 	call	0x62a2	; 0x62a2 <round>
}
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	08 95       	ret

00003330 <_Z10getVoltagev>:

uint16_t getVoltage(void)
{
	readADC();  /* throw away first reading */
    3330:	0e 94 2a 19 	call	0x3254	; 0x3254 <_Z7readADCv>
	uint16_t hold = readADC();
    3334:	0e 94 2a 19 	call	0x3254	; 0x3254 <_Z7readADCv>
	hold = (uint16_t)(((uint32_t)hold * 237) >> 7);
    3338:	9c 01       	movw	r18, r24
    333a:	ad ee       	ldi	r26, 0xED	; 237
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	68 94       	set
    3348:	16 f8       	bld	r1, 6
    334a:	b6 95       	lsr	r27
    334c:	a7 95       	ror	r26
    334e:	97 95       	ror	r25
    3350:	87 95       	ror	r24
    3352:	16 94       	lsr	r1
    3354:	d1 f7       	brne	.-12     	; 0x334a <_Z10getVoltagev+0x1a>
	return(hold);
}
    3356:	08 95       	ret

00003358 <_Z13setUpSampling12ADCChannel_th>:

void setUpSampling(ADCChannel_t channel, BOOL enableSampling)
{
	ADCSRA = 0; /* clear ADCSRA register */
    3358:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0; /* clear ADCSRB register */
    335c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    3360:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if(channel == AUDIO_SAMPLING)
    3364:	81 11       	cpse	r24, r1
    3366:	22 c0       	rjmp	.+68     	; 0x33ac <_Z13setUpSampling12ADCChannel_th+0x54>
	{
		ADMUX |= 0x06;                          /* set A6 analog input pin */
    3368:	ec e7       	ldi	r30, 0x7C	; 124
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	86 60       	ori	r24, 0x06	; 6
    3370:	80 83       	st	Z, r24
		ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    3372:	80 81       	ld	r24, Z
    3374:	80 6c       	ori	r24, 0xC0	; 192
    3376:	80 83       	st	Z, r24
		ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    3378:	80 81       	ld	r24, Z
    337a:	80 62       	ori	r24, 0x20	; 32
    337c:	80 83       	st	Z, r24
#elif SAMPLE_RATE == 77040
				ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
				ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
				ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    337e:	ea e7       	ldi	r30, 0x7A	; 122
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	86 60       	ori	r24, 0x06	; 6
    3386:	80 83       	st	Z, r24
#else
#error "Select a valid sample rate."
#endif
#endif /* F_CPU == 16000000 */

		ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    3388:	80 81       	ld	r24, Z
    338a:	80 62       	ori	r24, 0x20	; 32
    338c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    338e:	80 81       	ld	r24, Z
    3390:	88 60       	ori	r24, 0x08	; 8
    3392:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);      /* enable ADC */
    3394:	80 81       	ld	r24, Z
    3396:	80 68       	ori	r24, 0x80	; 128
    3398:	80 83       	st	Z, r24

		if(enableSampling)
    339a:	66 23       	and	r22, r22
    339c:	21 f1       	breq	.+72     	; 0x33e6 <_Z13setUpSampling12ADCChannel_th+0x8e>
		{
			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    339e:	80 81       	ld	r24, Z
    33a0:	88 60       	ori	r24, 0x08	; 8
    33a2:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    33a4:	80 81       	ld	r24, Z
    33a6:	80 64       	ori	r24, 0x40	; 64
    33a8:	80 83       	st	Z, r24
    33aa:	08 95       	ret
		/* The internal temperature has to be used
		 *  with the internal reference of 1.1V.
		 *  Channel 8 can not be selected with
		 *  the analogRead function yet. */
		/* Set the internal reference and mux. */
		ADMUX |= ((1 << REFS1) | (1 << REFS0));
    33ac:	ec e7       	ldi	r30, 0x7C	; 124
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	90 81       	ld	r25, Z
    33b2:	90 6c       	ori	r25, 0xC0	; 192
    33b4:	90 83       	st	Z, r25

		if(channel == TEMPERATURE_SAMPLING)
    33b6:	81 30       	cpi	r24, 0x01	; 1
    33b8:	21 f4       	brne	.+8      	; 0x33c2 <_Z13setUpSampling12ADCChannel_th+0x6a>
		{
			ADMUX |= (1 << MUX3);
    33ba:	80 81       	ld	r24, Z
    33bc:	88 60       	ori	r24, 0x08	; 8
    33be:	80 83       	st	Z, r24
    33c0:	05 c0       	rjmp	.+10     	; 0x33cc <_Z13setUpSampling12ADCChannel_th+0x74>
		}
		else    /* channel == VOLTAGE_SAMPLING */
		{
			ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
    33c2:	ec e7       	ldi	r30, 0x7C	; 124
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	87 60       	ori	r24, 0x07	; 7
    33ca:	80 83       	st	Z, r24
		}

		/* Slow the ADC clock down to 125 KHz
		 *  by dividing by 128. Assumes that the
		 *  standard Arduino 16 MHz clock is in use. */
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    33cc:	ea e7       	ldi	r30, 0x7A	; 122
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	87 60       	ori	r24, 0x07	; 7
    33d4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);  /* enable the ADC */
    33d6:	80 81       	ld	r24, Z
    33d8:	80 68       	ori	r24, 0x80	; 128
    33da:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* Start the ADC */
    33dc:	80 81       	ld	r24, Z
    33de:	80 64       	ori	r24, 0x40	; 64
    33e0:	80 83       	st	Z, r24
		readADC();
    33e2:	0e 94 2a 19 	call	0x3254	; 0x3254 <_Z7readADCv>
    33e6:	08 95       	ret

000033e8 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    33e8:	fc 01       	movw	r30, r24
	while(*s)
    33ea:	21 91       	ld	r18, Z+
    33ec:	22 23       	and	r18, r18
    33ee:	41 f0       	breq	.+16     	; 0x3400 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	20 53       	subi	r18, 0x30	; 48
    33f4:	31 09       	sbc	r19, r1
    33f6:	2a 30       	cpi	r18, 0x0A	; 10
    33f8:	31 05       	cpc	r19, r1
    33fa:	b8 f3       	brcs	.-18     	; 0x33ea <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	08 95       	ret
		}
	}

	return( TRUE);
    3400:	81 e0       	ldi	r24, 0x01	; 1
}
    3402:	08 95       	ret

00003404 <_Z13startEventNow19EventActionSource_t>:


void startEventNow(EventActionSource_t activationSource)
{
    3404:	cf 93       	push	r28
    3406:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    3408:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z23clockConfigurationCheckv>

	cli();
    340c:	f8 94       	cli
	if(activationSource == POWER_UP)
    340e:	c1 11       	cpse	r28, r1
    3410:	0e c0       	rjmp	.+28     	; 0x342e <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    3412:	82 30       	cpi	r24, 0x02	; 2
    3414:	31 f4       	brne	.+12     	; 0x3422 <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    3416:	60 e0       	ldi	r22, 0x00	; 0
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3420:	3e c0       	rjmp	.+124    	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3422:	63 e0       	ldi	r22, 0x03	; 3
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    342c:	38 c0       	rjmp	.+112    	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    342e:	c2 30       	cpi	r28, 0x02	; 2
    3430:	c9 f4       	brne	.+50     	; 0x3464 <_Z13startEventNow19EventActionSource_t+0x60>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    3432:	82 30       	cpi	r24, 0x02	; 2
    3434:	31 f4       	brne	.+12     	; 0x3442 <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3440:	2e c0       	rjmp	.+92     	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    3442:	81 30       	cpi	r24, 0x01	; 1
    3444:	19 f0       	breq	.+6      	; 0x344c <_Z13startEventNow19EventActionSource_t+0x48>
    3446:	83 50       	subi	r24, 0x03	; 3
    3448:	82 30       	cpi	r24, 0x02	; 2
    344a:	30 f4       	brcc	.+12     	; 0x3458 <_Z13startEventNow19EventActionSource_t+0x54>
		{
			setupForFox(NULL, START_EVENT_NOW);
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3456:	23 c0       	rjmp	.+70     	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    3458:	63 e0       	ldi	r22, 0x03	; 3
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3462:	1d c0       	rjmp	.+58     	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    3464:	82 30       	cpi	r24, 0x02	; 2
    3466:	31 f4       	brne	.+12     	; 0x3474 <_Z13startEventNow19EventActionSource_t+0x70>
		{
			setupForFox(NULL, START_EVENT_NOW);
    3468:	61 e0       	ldi	r22, 0x01	; 1
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3472:	15 c0       	rjmp	.+42     	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	31 f4       	brne	.+12     	; 0x3484 <_Z13startEventNow19EventActionSource_t+0x80>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    3478:	62 e0       	ldi	r22, 0x02	; 2
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3482:	0d c0       	rjmp	.+26     	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    3484:	84 30       	cpi	r24, 0x04	; 4
    3486:	31 f4       	brne	.+12     	; 0x3494 <_Z13startEventNow19EventActionSource_t+0x90>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    3488:	63 e0       	ldi	r22, 0x03	; 3
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3492:	05 c0       	rjmp	.+10     	; 0x349e <_Z13startEventNow19EventActionSource_t+0x9a>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    3494:	63 e0       	ldi	r22, 0x03	; 3
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

	g_LED_enunciating = FALSE;
    349e:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_LED_enunciating>
	sei();
    34a2:	78 94       	sei
}
    34a4:	cf 91       	pop	r28
    34a6:	08 95       	ret

000034a8 <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    34a8:	cf 93       	push	r28
    34aa:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    34ac:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z23clockConfigurationCheckv>

	cli();
    34b0:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    34b2:	c2 30       	cpi	r28, 0x02	; 2
    34b4:	31 f4       	brne	.+12     	; 0x34c2 <_Z12stopEventNow19EventActionSource_t+0x1a>
	{
		setupForFox(NULL, START_NOTHING);
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    34c0:	15 c0       	rjmp	.+42     	; 0x34ec <_Z12stopEventNow19EventActionSource_t+0x44>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    34c2:	81 30       	cpi	r24, 0x01	; 1
    34c4:	31 f4       	brne	.+12     	; 0x34d2 <_Z12stopEventNow19EventActionSource_t+0x2a>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    34c6:	62 e0       	ldi	r22, 0x02	; 2
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    34d0:	08 c0       	rjmp	.+16     	; 0x34e2 <_Z12stopEventNow19EventActionSource_t+0x3a>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    34d2:	84 30       	cpi	r24, 0x04	; 4
    34d4:	31 f4       	brne	.+12     	; 0x34e2 <_Z12stopEventNow19EventActionSource_t+0x3a>
		{
			setupForFox(NULL, START_NOTHING);
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    34e0:	05 c0       	rjmp	.+10     	; 0x34ec <_Z12stopEventNow19EventActionSource_t+0x44>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
	}

	if(g_sync_pin_stable == STABLE_LOW)
    34ec:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_sync_pin_stable>
    34f0:	82 30       	cpi	r24, 0x02	; 2
    34f2:	21 f4       	brne	.+8      	; 0x34fc <_Z12stopEventNow19EventActionSource_t+0x54>
	{
		digitalWrite(PIN_LED, OFF); /*  LED Off */
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	80 e1       	ldi	r24, 0x10	; 16
    34f8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
	}
}
    34fc:	cf 91       	pop	r28
    34fe:	08 95       	ret

00003500 <__vector_4>:
 *
 *  Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT1_vect)
{
    3500:	1f 92       	push	r1
    3502:	0f 92       	push	r0
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	0f 92       	push	r0
    3508:	11 24       	eor	r1, r1
    350a:	2f 93       	push	r18
    350c:	3f 93       	push	r19
    350e:	4f 93       	push	r20
    3510:	5f 93       	push	r21
    3512:	6f 93       	push	r22
    3514:	7f 93       	push	r23
    3516:	8f 93       	push	r24
    3518:	9f 93       	push	r25
    351a:	af 93       	push	r26
    351c:	bf 93       	push	r27
    351e:	cf 93       	push	r28
    3520:	ef 93       	push	r30
    3522:	ff 93       	push	r31
	static BOOL holdPinVal = OFF;
	BOOL pinVal = digitalRead(PIN_SYNC);
    3524:	81 e1       	ldi	r24, 0x11	; 17
    3526:	0e 94 34 02 	call	0x468	; 0x468 <digitalRead>
    352a:	c8 2f       	mov	r28, r24

	g_sync_pin_timer = 0;
    352c:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <g_sync_pin_timer+0x1>
    3530:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <g_sync_pin_timer>

	if(pinVal && !holdPinVal)   /* Sync is high = button released, and was low previously */
    3534:	88 23       	and	r24, r24
    3536:	91 f1       	breq	.+100    	; 0x359c <__vector_4+0x9c>
    3538:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <_ZZ10__vector_4E10holdPinVal>
    353c:	81 11       	cpse	r24, r1
    353e:	2e c0       	rjmp	.+92     	; 0x359c <__vector_4+0x9c>
	{
		if(g_LED_timeout_countdown)
    3540:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    3544:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    3548:	89 2b       	or	r24, r25
    354a:	01 f1       	breq	.+64     	; 0x358c <__vector_4+0x8c>
		{
			if(!g_perform_EEPROM_reset)
    354c:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <g_perform_EEPROM_reset>
    3550:	81 11       	cpse	r24, r1
    3552:	1e c0       	rjmp	.+60     	; 0x3590 <__vector_4+0x90>
			{
				if(g_transmissions_disabled)
    3554:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    3558:	88 23       	and	r24, r24
    355a:	71 f0       	breq	.+28     	; 0x3578 <__vector_4+0x78>
				{
					if(g_sync_pin_stable == STABLE_LOW)
    355c:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_sync_pin_stable>
    3560:	82 30       	cpi	r24, 0x02	; 2
    3562:	b1 f4       	brne	.+44     	; 0x3590 <__vector_4+0x90>
					{
						g_sync_pin_stable = UNSTABLE;
    3564:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <g_sync_pin_stable>
						digitalWrite(PIN_LED, OFF); /*  LED */
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	80 e1       	ldi	r24, 0x10	; 16
    356c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
						startEventNow(PUSHBUTTON);
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	0e 94 02 1a 	call	0x3404	; 0x3404 <_Z13startEventNow19EventActionSource_t>
    3576:	0c c0       	rjmp	.+24     	; 0x3590 <__vector_4+0x90>
					}
				}
				else
				{
					if(g_sync_pin_stable == STABLE_LOW)
    3578:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <g_sync_pin_stable>
    357c:	82 30       	cpi	r24, 0x02	; 2
    357e:	41 f4       	brne	.+16     	; 0x3590 <__vector_4+0x90>
					{
						g_sync_pin_stable = UNSTABLE;
    3580:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <g_sync_pin_stable>
						stopEventNow(PUSHBUTTON);
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <_Z12stopEventNow19EventActionSource_t>
    358a:	02 c0       	rjmp	.+4      	; 0x3590 <__vector_4+0x90>
				}
			}
		}
		else
		{
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    358c:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>
		}

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    3590:	8c e2       	ldi	r24, 0x2C	; 44
    3592:	91 e0       	ldi	r25, 0x01	; 1
    3594:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    3598:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
	}

	holdPinVal = pinVal;
    359c:	c0 93 9b 04 	sts	0x049B, r28	; 0x80049b <_ZZ10__vector_4E10holdPinVal>
}
    35a0:	ff 91       	pop	r31
    35a2:	ef 91       	pop	r30
    35a4:	cf 91       	pop	r28
    35a6:	bf 91       	pop	r27
    35a8:	af 91       	pop	r26
    35aa:	9f 91       	pop	r25
    35ac:	8f 91       	pop	r24
    35ae:	7f 91       	pop	r23
    35b0:	6f 91       	pop	r22
    35b2:	5f 91       	pop	r21
    35b4:	4f 91       	pop	r20
    35b6:	3f 91       	pop	r19
    35b8:	2f 91       	pop	r18
    35ba:	0f 90       	pop	r0
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	0f 90       	pop	r0
    35c0:	1f 90       	pop	r1
    35c2:	18 95       	reti

000035c4 <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	g_current_epoch = RTC_get_epoch();
    35c4:	0e 94 8b 03 	call	0x716	; 0x716 <_Z13RTC_get_epochv>
    35c8:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_current_epoch>
    35cc:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_current_epoch+0x1>
    35d0:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_current_epoch+0x2>
    35d4:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    35d8:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <g_messages_text+0x15>
    35dc:	81 11       	cpse	r24, r1
    35de:	05 c0       	rjmp	.+10     	; 0x35ea <_Z18reportConfigErrorsv+0x26>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    35e0:	65 e0       	ldi	r22, 0x05	; 5
    35e2:	84 e6       	ldi	r24, 0x64	; 100
    35e4:	95 e0       	ldi	r25, 0x05	; 5
    35e6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    35ea:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    35ee:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    35f2:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    35f6:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    35fa:	81 15       	cp	r24, r1
    35fc:	96 46       	sbci	r25, 0x66	; 102
    35fe:	ae 4e       	sbci	r26, 0xEE	; 238
    3600:	bf 45       	sbci	r27, 0x5F	; 95
    3602:	28 f4       	brcc	.+10     	; 0x360e <_Z18reportConfigErrorsv+0x4a>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    3604:	62 e0       	ldi	r22, 0x02	; 2
    3606:	84 e6       	ldi	r24, 0x64	; 100
    3608:	95 e0       	ldi	r25, 0x05	; 5
    360a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    360e:	40 91 49 05 	lds	r20, 0x0549	; 0x800549 <g_event_finish_epoch>
    3612:	50 91 4a 05 	lds	r21, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    3616:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    361a:	70 91 4c 05 	lds	r23, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    361e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    3622:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3626:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    362a:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    362e:	48 17       	cp	r20, r24
    3630:	59 07       	cpc	r21, r25
    3632:	6a 07       	cpc	r22, r26
    3634:	7b 07       	cpc	r23, r27
    3636:	00 f5       	brcc	.+64     	; 0x3678 <_Z18reportConfigErrorsv+0xb4>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    3638:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
    363c:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    3640:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    3644:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    3648:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    364c:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3650:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3654:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3658:	48 17       	cp	r20, r24
    365a:	59 07       	cpc	r21, r25
    365c:	6a 07       	cpc	r22, r26
    365e:	7b 07       	cpc	r23, r27
    3660:	28 f4       	brcc	.+10     	; 0x366c <_Z18reportConfigErrorsv+0xa8>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    3662:	63 e0       	ldi	r22, 0x03	; 3
    3664:	84 e6       	ldi	r24, 0x64	; 100
    3666:	95 e0       	ldi	r25, 0x05	; 5
    3668:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    366c:	64 e0       	ldi	r22, 0x04	; 4
    366e:	84 e6       	ldi	r24, 0x64	; 100
    3670:	95 e0       	ldi	r25, 0x05	; 5
    3672:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    3676:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    3678:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
    367c:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    3680:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    3684:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    3688:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    368c:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3690:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3694:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3698:	48 17       	cp	r20, r24
    369a:	59 07       	cpc	r21, r25
    369c:	6a 07       	cpc	r22, r26
    369e:	7b 07       	cpc	r23, r27
    36a0:	c0 f4       	brcc	.+48     	; 0x36d2 <_Z18reportConfigErrorsv+0x10e>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    36a2:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    36a6:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    36aa:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    36ae:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    36b2:	81 15       	cp	r24, r1
    36b4:	96 46       	sbci	r25, 0x66	; 102
    36b6:	ae 4e       	sbci	r26, 0xEE	; 238
    36b8:	bf 45       	sbci	r27, 0x5F	; 95
    36ba:	30 f4       	brcc	.+12     	; 0x36c8 <_Z18reportConfigErrorsv+0x104>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    36bc:	63 e0       	ldi	r22, 0x03	; 3
    36be:	84 e6       	ldi	r24, 0x64	; 100
    36c0:	95 e0       	ldi	r25, 0x05	; 5
    36c2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    36c6:	08 95       	ret
		}
		else
		{
			lb_send_string((char*)"Event running...\n", TRUE);
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	88 e2       	ldi	r24, 0x28	; 40
    36cc:	91 e0       	ldi	r25, 0x01	; 1
    36ce:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    36d2:	08 95       	ret

000036d4 <_Z14reportTimeTillmmPKcS0_>:
		}
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    36d4:	2f 92       	push	r2
    36d6:	3f 92       	push	r3
    36d8:	4f 92       	push	r4
    36da:	5f 92       	push	r5
    36dc:	6f 92       	push	r6
    36de:	7f 92       	push	r7
    36e0:	8f 92       	push	r8
    36e2:	9f 92       	push	r9
    36e4:	af 92       	push	r10
    36e6:	bf 92       	push	r11
    36e8:	cf 92       	push	r12
    36ea:	df 92       	push	r13
    36ec:	ef 92       	push	r14
    36ee:	ff 92       	push	r15
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	2c 97       	sbiw	r28, 0x0c	; 12
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	2b 01       	movw	r4, r22
    370a:	3c 01       	movw	r6, r24
    370c:	49 01       	movw	r8, r18
    370e:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    3710:	62 17       	cp	r22, r18
    3712:	73 07       	cpc	r23, r19
    3714:	84 07       	cpc	r24, r20
    3716:	95 07       	cpc	r25, r21
    3718:	50 f0       	brcs	.+20     	; 0x372e <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    371a:	e1 14       	cp	r14, r1
    371c:	f1 04       	cpc	r15, r1
    371e:	09 f4       	brne	.+2      	; 0x3722 <_Z14reportTimeTillmmPKcS0_+0x4e>
    3720:	04 c1       	rjmp	.+520    	; 0x392a <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    3722:	61 e0       	ldi	r22, 0x01	; 1
    3724:	c7 01       	movw	r24, r14
    3726:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	ff c0       	rjmp	.+510    	; 0x392c <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    372e:	01 15       	cp	r16, r1
    3730:	11 05       	cpc	r17, r1
    3732:	21 f0       	breq	.+8      	; 0x373c <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    3734:	61 e0       	ldi	r22, 0x01	; 1
    3736:	c8 01       	movw	r24, r16
    3738:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
		}
		time_t dif = until - from;
    373c:	75 01       	movw	r14, r10
    373e:	64 01       	movw	r12, r8
    3740:	c4 18       	sub	r12, r4
    3742:	d5 08       	sbc	r13, r5
    3744:	e6 08       	sbc	r14, r6
    3746:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    3748:	c7 01       	movw	r24, r14
    374a:	b6 01       	movw	r22, r12
    374c:	20 e8       	ldi	r18, 0x80	; 128
    374e:	33 e3       	ldi	r19, 0x33	; 51
    3750:	41 ee       	ldi	r20, 0xE1	; 225
    3752:	51 e0       	ldi	r21, 0x01	; 1
    3754:	0e 94 11 32 	call	0x6422	; 0x6422 <__udivmodsi4>
    3758:	29 01       	movw	r4, r18
    375a:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    375c:	44 27       	eor	r20, r20
    375e:	55 27       	eor	r21, r21
    3760:	60 e8       	ldi	r22, 0x80	; 128
    3762:	73 e3       	ldi	r23, 0x33	; 51
    3764:	81 ee       	ldi	r24, 0xE1	; 225
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <__mulsi3>
    376c:	c6 1a       	sub	r12, r22
    376e:	d7 0a       	sbc	r13, r23
    3770:	e8 0a       	sbc	r14, r24
    3772:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    3774:	c7 01       	movw	r24, r14
    3776:	b6 01       	movw	r22, r12
    3778:	20 e8       	ldi	r18, 0x80	; 128
    377a:	31 e5       	ldi	r19, 0x51	; 81
    377c:	41 e0       	ldi	r20, 0x01	; 1
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	0e 94 11 32 	call	0x6422	; 0x6422 <__udivmodsi4>
    3784:	49 01       	movw	r8, r18
    3786:	5a 01       	movw	r10, r20
    3788:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    378a:	44 27       	eor	r20, r20
    378c:	55 27       	eor	r21, r21
    378e:	60 e8       	ldi	r22, 0x80	; 128
    3790:	71 e5       	ldi	r23, 0x51	; 81
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <__mulsi3>
    379a:	c6 1a       	sub	r12, r22
    379c:	d7 0a       	sbc	r13, r23
    379e:	e8 0a       	sbc	r14, r24
    37a0:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    37a2:	c7 01       	movw	r24, r14
    37a4:	b6 01       	movw	r22, r12
    37a6:	20 e1       	ldi	r18, 0x10	; 16
    37a8:	3e e0       	ldi	r19, 0x0E	; 14
    37aa:	40 e0       	ldi	r20, 0x00	; 0
    37ac:	50 e0       	ldi	r21, 0x00	; 0
    37ae:	0e 94 11 32 	call	0x6422	; 0x6422 <__udivmodsi4>
    37b2:	29 83       	std	Y+1, r18	; 0x01
    37b4:	3a 83       	std	Y+2, r19	; 0x02
    37b6:	4b 83       	std	Y+3, r20	; 0x03
    37b8:	5c 83       	std	Y+4, r21	; 0x04
    37ba:	29 81       	ldd	r18, Y+1	; 0x01
    37bc:	3a 81       	ldd	r19, Y+2	; 0x02
    37be:	3a 87       	std	Y+10, r19	; 0x0a
    37c0:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    37c2:	29 81       	ldd	r18, Y+1	; 0x01
    37c4:	3a 81       	ldd	r19, Y+2	; 0x02
    37c6:	4b 81       	ldd	r20, Y+3	; 0x03
    37c8:	5c 81       	ldd	r21, Y+4	; 0x04
    37ca:	44 27       	eor	r20, r20
    37cc:	55 27       	eor	r21, r21
    37ce:	a0 e1       	ldi	r26, 0x10	; 16
    37d0:	be e0       	ldi	r27, 0x0E	; 14
    37d2:	0e 94 6e 32 	call	0x64dc	; 0x64dc <__muluhisi3>
    37d6:	c6 1a       	sub	r12, r22
    37d8:	d7 0a       	sbc	r13, r23
    37da:	e8 0a       	sbc	r14, r24
    37dc:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    37de:	c7 01       	movw	r24, r14
    37e0:	b6 01       	movw	r22, r12
    37e2:	2c e3       	ldi	r18, 0x3C	; 60
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	0e 94 11 32 	call	0x6422	; 0x6422 <__udivmodsi4>
    37ee:	2d 83       	std	Y+5, r18	; 0x05
    37f0:	3e 83       	std	Y+6, r19	; 0x06
    37f2:	4f 83       	std	Y+7, r20	; 0x07
    37f4:	58 87       	std	Y+8, r21	; 0x08
    37f6:	0d 81       	ldd	r16, Y+5	; 0x05
    37f8:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    37fa:	2c e3       	ldi	r18, 0x3C	; 60
    37fc:	20 9f       	mul	r18, r16
    37fe:	c0 01       	movw	r24, r0
    3800:	21 9f       	mul	r18, r17
    3802:	90 0d       	add	r25, r0
    3804:	11 24       	eor	r1, r1
    3806:	a6 01       	movw	r20, r12
    3808:	48 1b       	sub	r20, r24
    380a:	59 0b       	sbc	r21, r25
    380c:	5c 87       	std	Y+12, r21	; 0x0c
    380e:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    3810:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <g_tempStr>

		if(years)
    3814:	41 14       	cp	r4, r1
    3816:	51 04       	cpc	r5, r1
    3818:	b9 f0       	breq	.+46     	; 0x3848 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    381a:	5f 92       	push	r5
    381c:	4f 92       	push	r4
    381e:	8a e3       	ldi	r24, 0x3A	; 58
    3820:	91 e0       	ldi	r25, 0x01	; 1
    3822:	9f 93       	push	r25
    3824:	8f 93       	push	r24
    3826:	8c e9       	ldi	r24, 0x9C	; 156
    3828:	94 e0       	ldi	r25, 0x04	; 4
    382a:	9f 93       	push	r25
    382c:	8f 93       	push	r24
    382e:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3832:	61 e0       	ldi	r22, 0x01	; 1
    3834:	8c e9       	ldi	r24, 0x9C	; 156
    3836:	94 e0       	ldi	r25, 0x04	; 4
    3838:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
		}

		if(days)
    3848:	23 28       	or	r2, r3
    384a:	b9 f0       	breq	.+46     	; 0x387a <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    384c:	9f 92       	push	r9
    384e:	8f 92       	push	r8
    3850:	82 e4       	ldi	r24, 0x42	; 66
    3852:	91 e0       	ldi	r25, 0x01	; 1
    3854:	9f 93       	push	r25
    3856:	8f 93       	push	r24
    3858:	8c e9       	ldi	r24, 0x9C	; 156
    385a:	94 e0       	ldi	r25, 0x04	; 4
    385c:	9f 93       	push	r25
    385e:	8f 93       	push	r24
    3860:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
			lb_send_string(g_tempStr, TRUE);
    3864:	61 e0       	ldi	r22, 0x01	; 1
    3866:	8c e9       	ldi	r24, 0x9C	; 156
    3868:	94 e0       	ldi	r25, 0x04	; 4
    386a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
		}

		if(hours)
    387a:	89 85       	ldd	r24, Y+9	; 0x09
    387c:	9a 85       	ldd	r25, Y+10	; 0x0a
    387e:	89 2b       	or	r24, r25
    3880:	c9 f0       	breq	.+50     	; 0x38b4 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	9f 93       	push	r25
    3886:	e9 81       	ldd	r30, Y+1	; 0x01
    3888:	ef 93       	push	r30
    388a:	8b e4       	ldi	r24, 0x4B	; 75
    388c:	91 e0       	ldi	r25, 0x01	; 1
    388e:	9f 93       	push	r25
    3890:	8f 93       	push	r24
    3892:	8c e9       	ldi	r24, 0x9C	; 156
    3894:	94 e0       	ldi	r25, 0x04	; 4
    3896:	9f 93       	push	r25
    3898:	8f 93       	push	r24
    389a:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
			lb_send_string(g_tempStr, TRUE);
    389e:	61 e0       	ldi	r22, 0x01	; 1
    38a0:	8c e9       	ldi	r24, 0x9C	; 156
    38a2:	94 e0       	ldi	r25, 0x04	; 4
    38a4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
		}

		if(minutes)
    38b4:	01 2b       	or	r16, r17
    38b6:	c9 f0       	breq	.+50     	; 0x38ea <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    38b8:	fe 81       	ldd	r31, Y+6	; 0x06
    38ba:	ff 93       	push	r31
    38bc:	2d 81       	ldd	r18, Y+5	; 0x05
    38be:	2f 93       	push	r18
    38c0:	83 e5       	ldi	r24, 0x53	; 83
    38c2:	91 e0       	ldi	r25, 0x01	; 1
    38c4:	9f 93       	push	r25
    38c6:	8f 93       	push	r24
    38c8:	8c e9       	ldi	r24, 0x9C	; 156
    38ca:	94 e0       	ldi	r25, 0x04	; 4
    38cc:	9f 93       	push	r25
    38ce:	8f 93       	push	r24
    38d0:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
			lb_send_string(g_tempStr, TRUE);
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	8c e9       	ldi	r24, 0x9C	; 156
    38d8:	94 e0       	ldi	r25, 0x04	; 4
    38da:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    38ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    38ec:	3f 93       	push	r19
    38ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    38f0:	4f 93       	push	r20
    38f2:	8b e5       	ldi	r24, 0x5B	; 91
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	9f 93       	push	r25
    38f8:	8f 93       	push	r24
    38fa:	8c e9       	ldi	r24, 0x9C	; 156
    38fc:	94 e0       	ldi	r25, 0x04	; 4
    38fe:	9f 93       	push	r25
    3900:	8f 93       	push	r24
    3902:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
		lb_send_string(g_tempStr, TRUE);
    3906:	61 e0       	ldi	r22, 0x01	; 1
    3908:	8c e9       	ldi	r24, 0x9C	; 156
    390a:	94 e0       	ldi	r25, 0x04	; 4
    390c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>

		lb_send_NewLine();
    3910:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <lb_send_NewLine>
		g_tempStr[0] = '\0';
    3914:	ec e9       	ldi	r30, 0x9C	; 156
    3916:	f4 e0       	ldi	r31, 0x04	; 4
    3918:	10 82       	st	Z, r1
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	01 c0       	rjmp	.+2      	; 0x392c <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    392a:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    392c:	2c 96       	adiw	r28, 0x0c	; 12
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	de bf       	out	0x3e, r29	; 62
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	cd bf       	out	0x3d, r28	; 61
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    3940:	ff 90       	pop	r15
    3942:	ef 90       	pop	r14
    3944:	df 90       	pop	r13
    3946:	cf 90       	pop	r12
    3948:	bf 90       	pop	r11
    394a:	af 90       	pop	r10
    394c:	9f 90       	pop	r9
    394e:	8f 90       	pop	r8
    3950:	7f 90       	pop	r7
    3952:	6f 90       	pop	r6
    3954:	5f 90       	pop	r5
    3956:	4f 90       	pop	r4
    3958:	3f 90       	pop	r3
    395a:	2f 90       	pop	r2
    395c:	08 95       	ret

0000395e <_Z18startEventUsingRTCv>:
		digitalWrite(PIN_LED, OFF); /*  LED Off */
	}
}

void startEventUsingRTC(void)
{
    395e:	ef 92       	push	r14
    3960:	ff 92       	push	r15
    3962:	0f 93       	push	r16
    3964:	1f 93       	push	r17
	g_current_epoch = RTC_get_epoch();
    3966:	0e 94 8b 03 	call	0x716	; 0x716 <_Z13RTC_get_epochv>
    396a:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_current_epoch>
    396e:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_current_epoch+0x1>
    3972:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_current_epoch+0x2>
    3976:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    397a:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    397e:	82 30       	cpi	r24, 0x02	; 2
    3980:	09 f4       	brne	.+2      	; 0x3984 <_Z18startEventUsingRTCv+0x26>
    3982:	62 c0       	rjmp	.+196    	; 0x3a48 <_Z18startEventUsingRTCv+0xea>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    3984:	63 e0       	ldi	r22, 0x03	; 3
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    398e:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <g_event_start_epoch>
    3992:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    3996:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    399a:	50 91 50 05 	lds	r21, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    399e:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <g_current_epoch>
    39a2:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <g_current_epoch+0x1>
    39a6:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_current_epoch+0x2>
    39aa:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_current_epoch+0x3>
    39ae:	0f 2e       	mov	r0, r31
    39b0:	f2 e6       	ldi	r31, 0x62	; 98
    39b2:	ef 2e       	mov	r14, r31
    39b4:	f1 e0       	ldi	r31, 0x01	; 1
    39b6:	ff 2e       	mov	r15, r31
    39b8:	f0 2d       	mov	r31, r0
    39ba:	0f e6       	ldi	r16, 0x6F	; 111
    39bc:	11 e0       	ldi	r17, 0x01	; 1
    39be:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    39c2:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
    39c6:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    39ca:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    39ce:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    39d2:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    39d6:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    39da:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    39de:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    39e2:	48 17       	cp	r20, r24
    39e4:	59 07       	cpc	r21, r25
    39e6:	6a 07       	cpc	r22, r26
    39e8:	7b 07       	cpc	r23, r27
    39ea:	b8 f4       	brcc	.+46     	; 0x3a1a <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    39ec:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <g_event_finish_epoch>
    39f0:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    39f4:	40 91 4b 05 	lds	r20, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    39f8:	50 91 4c 05 	lds	r21, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    39fc:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <g_current_epoch>
    3a00:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3a04:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3a08:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3a0c:	e1 2c       	mov	r14, r1
    3a0e:	f1 2c       	mov	r15, r1
    3a10:	0b e7       	ldi	r16, 0x7B	; 123
    3a12:	11 e0       	ldi	r17, 0x01	; 1
    3a14:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>
    3a18:	19 c0       	rjmp	.+50     	; 0x3a4c <_Z18startEventUsingRTCv+0xee>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3a1a:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <g_event_finish_epoch>
    3a1e:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    3a22:	40 91 4b 05 	lds	r20, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    3a26:	50 91 4c 05 	lds	r21, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    3a2a:	60 91 4d 05 	lds	r22, 0x054D	; 0x80054d <g_event_start_epoch>
    3a2e:	70 91 4e 05 	lds	r23, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    3a32:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    3a36:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    3a3a:	e1 2c       	mov	r14, r1
    3a3c:	f1 2c       	mov	r15, r1
    3a3e:	0c e8       	ldi	r16, 0x8C	; 140
    3a40:	11 e0       	ldi	r17, 0x01	; 1
    3a42:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <_Z18startEventUsingRTCv+0xee>
		}
	}
	else
	{
		reportConfigErrors();
    3a48:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_Z18reportConfigErrorsv>
	}
}
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	ff 90       	pop	r15
    3a52:	ef 90       	pop	r14
    3a54:	08 95       	ret

00003a56 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    3a56:	4f 92       	push	r4
    3a58:	5f 92       	push	r5
    3a5a:	6f 92       	push	r6
    3a5c:	7f 92       	push	r7
    3a5e:	8f 92       	push	r8
    3a60:	9f 92       	push	r9
    3a62:	af 92       	push	r10
    3a64:	bf 92       	push	r11
    3a66:	ef 92       	push	r14
    3a68:	ff 92       	push	r15
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	2c 97       	sbiw	r28, 0x0c	; 12
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	de bf       	out	0x3e, r29	; 62
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	cd bf       	out	0x3d, r28	; 61
    3a82:	8c 01       	movw	r16, r24
    3a84:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    3a86:	fc 01       	movw	r30, r24
    3a88:	01 90       	ld	r0, Z+
    3a8a:	00 20       	and	r0, r0
    3a8c:	e9 f7       	brne	.-6      	; 0x3a88 <_Z18validateTimeStringPcPma+0x32>
    3a8e:	31 97       	sbiw	r30, 0x01	; 1
    3a90:	e8 1b       	sub	r30, r24
    3a92:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    3a94:	25 e0       	ldi	r18, 0x05	; 5
    3a96:	6d 34       	cpi	r22, 0x4D	; 77
    3a98:	72 07       	cpc	r23, r18
    3a9a:	49 f5       	brne	.+82     	; 0x3aee <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3a9c:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    3aa0:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3aa4:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3aa8:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3aac:	89 87       	std	Y+9, r24	; 0x09
    3aae:	9a 87       	std	Y+10, r25	; 0x0a
    3ab0:	ab 87       	std	Y+11, r26	; 0x0b
    3ab2:	bc 87       	std	Y+12, r27	; 0x0c
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	96 e6       	ldi	r25, 0x66	; 102
    3ab8:	ae ee       	ldi	r26, 0xEE	; 238
    3aba:	bf e5       	ldi	r27, 0x5F	; 95
    3abc:	89 83       	std	Y+1, r24	; 0x01
    3abe:	9a 83       	std	Y+2, r25	; 0x02
    3ac0:	ab 83       	std	Y+3, r26	; 0x03
    3ac2:	bc 83       	std	Y+4, r27	; 0x04
    3ac4:	89 85       	ldd	r24, Y+9	; 0x09
    3ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac8:	ab 85       	ldd	r26, Y+11	; 0x0b
    3aca:	bc 85       	ldd	r27, Y+12	; 0x0c
    3acc:	81 15       	cp	r24, r1
    3ace:	96 46       	sbci	r25, 0x66	; 102
    3ad0:	ae 4e       	sbci	r26, 0xEE	; 238
    3ad2:	bf 45       	sbci	r27, 0x5F	; 95
    3ad4:	28 f4       	brcc	.+10     	; 0x3ae0 <_Z18validateTimeStringPcPma+0x8a>
    3ad6:	89 80       	ldd	r8, Y+1	; 0x01
    3ad8:	9a 80       	ldd	r9, Y+2	; 0x02
    3ada:	ab 80       	ldd	r10, Y+3	; 0x03
    3adc:	bc 80       	ldd	r11, Y+4	; 0x04
    3ade:	04 c0       	rjmp	.+8      	; 0x3ae8 <_Z18validateTimeStringPcPma+0x92>
    3ae0:	89 84       	ldd	r8, Y+9	; 0x09
    3ae2:	9a 84       	ldd	r9, Y+10	; 0x0a
    3ae4:	ab 84       	ldd	r10, Y+11	; 0x0b
    3ae6:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    3ae8:	ff 24       	eor	r15, r15
    3aea:	f3 94       	inc	r15
    3aec:	42 c0       	rjmp	.+132    	; 0x3b72 <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epochVar == &g_event_finish_epoch)
    3aee:	69 54       	subi	r22, 0x49	; 73
    3af0:	75 40       	sbci	r23, 0x05	; 5
    3af2:	a9 f5       	brne	.+106    	; 0x3b5e <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    3af4:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    3af8:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    3afc:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    3b00:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    3b04:	8d 83       	std	Y+5, r24	; 0x05
    3b06:	9e 83       	std	Y+6, r25	; 0x06
    3b08:	af 83       	std	Y+7, r26	; 0x07
    3b0a:	b8 87       	std	Y+8, r27	; 0x08
    3b0c:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    3b10:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3b14:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3b18:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	9a 83       	std	Y+2, r25	; 0x02
    3b20:	ab 83       	std	Y+3, r26	; 0x03
    3b22:	bc 83       	std	Y+4, r27	; 0x04
    3b24:	4d 81       	ldd	r20, Y+5	; 0x05
    3b26:	5e 81       	ldd	r21, Y+6	; 0x06
    3b28:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2a:	78 85       	ldd	r23, Y+8	; 0x08
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b30:	ab 81       	ldd	r26, Y+3	; 0x03
    3b32:	bc 81       	ldd	r27, Y+4	; 0x04
    3b34:	48 17       	cp	r20, r24
    3b36:	59 07       	cpc	r21, r25
    3b38:	6a 07       	cpc	r22, r26
    3b3a:	7b 07       	cpc	r23, r27
    3b3c:	40 f4       	brcc	.+16     	; 0x3b4e <_Z18validateTimeStringPcPma+0xf8>
    3b3e:	89 80       	ldd	r8, Y+1	; 0x01
    3b40:	9a 80       	ldd	r9, Y+2	; 0x02
    3b42:	ab 80       	ldd	r10, Y+3	; 0x03
    3b44:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    3b46:	68 94       	set
    3b48:	ff 24       	eor	r15, r15
    3b4a:	f1 f8       	bld	r15, 1
    3b4c:	12 c0       	rjmp	.+36     	; 0x3b72 <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    3b4e:	8d 80       	ldd	r8, Y+5	; 0x05
    3b50:	9e 80       	ldd	r9, Y+6	; 0x06
    3b52:	af 80       	ldd	r10, Y+7	; 0x07
    3b54:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    3b56:	68 94       	set
    3b58:	ff 24       	eor	r15, r15
    3b5a:	f1 f8       	bld	r15, 1
    3b5c:	0a c0       	rjmp	.+20     	; 0x3b72 <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    3b5e:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    3b60:	0f 2e       	mov	r0, r31
    3b62:	81 2c       	mov	r8, r1
    3b64:	f6 e6       	ldi	r31, 0x66	; 102
    3b66:	9f 2e       	mov	r9, r31
    3b68:	fe ee       	ldi	r31, 0xEE	; 238
    3b6a:	af 2e       	mov	r10, r31
    3b6c:	ff e5       	ldi	r31, 0x5F	; 95
    3b6e:	bf 2e       	mov	r11, r31
    3b70:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    3b72:	ec 30       	cpi	r30, 0x0C	; 12
    3b74:	f1 05       	cpc	r31, r1
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <_Z18validateTimeStringPcPma+0x124>
    3b78:	5e c0       	rjmp	.+188    	; 0x3c36 <_Z18validateTimeStringPcPma+0x1e0>
    3b7a:	c8 01       	movw	r24, r16
    3b7c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z11only_digitsPc>
    3b80:	88 23       	and	r24, r24
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <_Z18validateTimeStringPcPma+0x130>
    3b84:	4f c0       	rjmp	.+158    	; 0x3c24 <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    3b86:	b8 01       	movw	r22, r16
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	0e 94 30 04 	call	0x860	; 0x860 <_Z16RTC_String2EpochPbPc>
    3b90:	2b 01       	movw	r4, r22
    3b92:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    3b94:	ae 2d       	mov	r26, r14
    3b96:	ee 0c       	add	r14, r14
    3b98:	bb 0b       	sbc	r27, r27
    3b9a:	20 e1       	ldi	r18, 0x10	; 16
    3b9c:	3e e0       	ldi	r19, 0x0E	; 14
    3b9e:	0e 94 67 32 	call	0x64ce	; 0x64ce <__usmulhisi3>
    3ba2:	64 0d       	add	r22, r4
    3ba4:	75 1d       	adc	r23, r5
    3ba6:	86 1d       	adc	r24, r6
    3ba8:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    3baa:	86 16       	cp	r8, r22
    3bac:	97 06       	cpc	r9, r23
    3bae:	a8 06       	cpc	r10, r24
    3bb0:	b9 06       	cpc	r11, r25
    3bb2:	08 f4       	brcc	.+2      	; 0x3bb6 <_Z18validateTimeStringPcPma+0x160>
    3bb4:	45 c0       	rjmp	.+138    	; 0x3c40 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    3bb6:	21 e0       	ldi	r18, 0x01	; 1
    3bb8:	f2 12       	cpse	r15, r18
    3bba:	09 c0       	rjmp	.+18     	; 0x3bce <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    3bbc:	68 e0       	ldi	r22, 0x08	; 8
    3bbe:	84 e6       	ldi	r24, 0x64	; 100
    3bc0:	95 e0       	ldi	r25, 0x05	; 5
    3bc2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	cb 01       	movw	r24, r22
    3bcc:	39 c0       	rjmp	.+114    	; 0x3c40 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    3bce:	22 e0       	ldi	r18, 0x02	; 2
    3bd0:	f2 12       	cpse	r15, r18
    3bd2:	1f c0       	rjmp	.+62     	; 0x3c12 <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    3bd4:	00 91 51 05 	lds	r16, 0x0551	; 0x800551 <g_current_epoch>
    3bd8:	10 91 52 05 	lds	r17, 0x0552	; 0x800552 <g_current_epoch+0x1>
    3bdc:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <g_current_epoch+0x2>
    3be0:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <g_current_epoch+0x3>
    3be4:	60 17       	cp	r22, r16
    3be6:	71 07       	cpc	r23, r17
    3be8:	82 07       	cpc	r24, r18
    3bea:	93 07       	cpc	r25, r19
    3bec:	48 f4       	brcc	.+18     	; 0x3c00 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    3bee:	67 e0       	ldi	r22, 0x07	; 7
    3bf0:	84 e6       	ldi	r24, 0x64	; 100
    3bf2:	95 e0       	ldi	r25, 0x05	; 5
    3bf4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	20 c0       	rjmp	.+64     	; 0x3c40 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    3c00:	66 e0       	ldi	r22, 0x06	; 6
    3c02:	84 e6       	ldi	r24, 0x64	; 100
    3c04:	95 e0       	ldi	r25, 0x05	; 5
    3c06:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	70 e0       	ldi	r23, 0x00	; 0
    3c0e:	cb 01       	movw	r24, r22
    3c10:	17 c0       	rjmp	.+46     	; 0x3c40 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    3c12:	6a e0       	ldi	r22, 0x0A	; 10
    3c14:	84 e6       	ldi	r24, 0x64	; 100
    3c16:	95 e0       	ldi	r25, 0x05	; 5
    3c18:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3c1c:	60 e0       	ldi	r22, 0x00	; 0
    3c1e:	70 e0       	ldi	r23, 0x00	; 0
    3c20:	cb 01       	movw	r24, r22
    3c22:	0e c0       	rjmp	.+28     	; 0x3c40 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    3c24:	69 e0       	ldi	r22, 0x09	; 9
    3c26:	84 e6       	ldi	r24, 0x64	; 100
    3c28:	95 e0       	ldi	r25, 0x05	; 5
    3c2a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3c2e:	60 e0       	ldi	r22, 0x00	; 0
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	cb 01       	movw	r24, r22
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    3c36:	ef 2b       	or	r30, r31
    3c38:	a9 f7       	brne	.-22     	; 0x3c24 <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    3c40:	2c 96       	adiw	r28, 0x0c	; 12
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	de bf       	out	0x3e, r29	; 62
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	cd bf       	out	0x3d, r28	; 61
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	1f 91       	pop	r17
    3c52:	0f 91       	pop	r16
    3c54:	ff 90       	pop	r15
    3c56:	ef 90       	pop	r14
    3c58:	bf 90       	pop	r11
    3c5a:	af 90       	pop	r10
    3c5c:	9f 90       	pop	r9
    3c5e:	8f 90       	pop	r8
    3c60:	7f 90       	pop	r7
    3c62:	6f 90       	pop	r6
    3c64:	5f 90       	pop	r5
    3c66:	4f 90       	pop	r4
    3c68:	08 95       	ret

00003c6a <_Z18setAMToneFrequency14AM_Tone_Freq_t>:

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
    3c6a:	cf 93       	push	r28
	BOOL enableAM = TRUE;

#if INIT_EEPROM_ONLY
	if(value) enableAM = FALSE; /* Remove compiler warning */
#else
	switch(value)
    3c6c:	82 30       	cpi	r24, 0x02	; 2
    3c6e:	19 f1       	breq	.+70     	; 0x3cb6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x4c>
    3c70:	28 f4       	brcc	.+10     	; 0x3c7c <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x12>
    3c72:	88 23       	and	r24, r24
    3c74:	c1 f1       	breq	.+112    	; 0x3ce6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7c>
    3c76:	81 30       	cpi	r24, 0x01	; 1
    3c78:	31 f1       	breq	.+76     	; 0x3cc6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x5c>
    3c7a:	2d c0       	rjmp	.+90     	; 0x3cd6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x6c>
    3c7c:	84 30       	cpi	r24, 0x04	; 4
    3c7e:	59 f0       	breq	.+22     	; 0x3c96 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x2c>
    3c80:	90 f0       	brcs	.+36     	; 0x3ca6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x3c>
    3c82:	85 30       	cpi	r24, 0x05	; 5
    3c84:	41 f5       	brne	.+80     	; 0x3cd6 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x6c>
		break;

		case AM_900Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 556;    /* For ~900 Hz tone output */
    3c86:	8c e2       	ldi	r24, 0x2C	; 44
    3c88:	92 e0       	ldi	r25, 0x02	; 2
    3c8a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3c92:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 556;    /* For ~900 Hz tone output */
#else
				OCR1A = 278;
#endif
		}
		break;
    3c94:	29 c0       	rjmp	.+82     	; 0x3ce8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_800Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 625;    /* For ~800 Hz tone output */
    3c96:	81 e7       	ldi	r24, 0x71	; 113
    3c98:	92 e0       	ldi	r25, 0x02	; 2
    3c9a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3c9e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3ca2:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 625;    /* For ~800 Hz tone output */
#else
				OCR1A = 312;
#endif
		}
		break;
    3ca4:	21 c0       	rjmp	.+66     	; 0x3ce8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_700Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 714;    /* For ~700 Hz tone output */
    3ca6:	8a ec       	ldi	r24, 0xCA	; 202
    3ca8:	92 e0       	ldi	r25, 0x02	; 2
    3caa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3cae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3cb2:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 714;    /* For ~700 Hz tone output */
#else
				OCR1A = 357;
#endif
		}
		break;
    3cb4:	19 c0       	rjmp	.+50     	; 0x3ce8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_600Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 833;    /* For ~600 Hz tone output */
    3cb6:	81 e4       	ldi	r24, 0x41	; 65
    3cb8:	93 e0       	ldi	r25, 0x03	; 3
    3cba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3cbe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3cc2:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 833;    /* For ~600 Hz tone output */
#else
				OCR1A = 416;
#endif
		}
		break;
    3cc4:	11 c0       	rjmp	.+34     	; 0x3ce8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_500Hz:
		{
#if F_CPU == 16000000UL
				OCR1A = 1000;   /* For ~500 Hz tone output */
    3cc6:	88 ee       	ldi	r24, 0xE8	; 232
    3cc8:	93 e0       	ldi	r25, 0x03	; 3
    3cca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3cce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3cd2:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 1000;   /* For ~500 Hz tone output */
#else
				OCR1A = 500;
#endif
		}
		break;
    3cd4:	09 c0       	rjmp	.+18     	; 0x3ce8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>

		case AM_1000Hz:
		default:
		{
#if F_CPU == 16000000UL
				OCR1A = 500;    /* For ~1000 Hz tone output */
    3cd6:	84 ef       	ldi	r24, 0xF4	; 244
    3cd8:	91 e0       	ldi	r25, 0x01	; 1
    3cda:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3cde:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	return(valid);
}

BOOL setAMToneFrequency(AM_Tone_Freq_t value)
{
	BOOL enableAM = TRUE;
    3ce2:	c1 e0       	ldi	r28, 0x01	; 1
				OCR1A = 500;    /* For ~1000 Hz tone output */
#else
				OCR1A = 250;
#endif
		}
		break;
    3ce4:	01 c0       	rjmp	.+2      	; 0x3ce8 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x7e>
#else
	switch(value)
	{
		case AM_DISABLED:
		{
			enableAM = FALSE;
    3ce6:	c0 e0       	ldi	r28, 0x00	; 0
#endif
		}
		break;
	}

	if(!OCR0A)
    3ce8:	87 b5       	in	r24, 0x27	; 39
    3cea:	81 11       	cpse	r24, r1
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0x88>
	{
		OCR0A = DEFAULT_TONE_FREQUENCY; /* Ensure that FM tone setting is initialized - even if it won't be used */
    3cee:	8f e2       	ldi	r24, 0x2F	; 47
    3cf0:	87 bd       	out	0x27, r24	; 39

	}

 	if(!OCR1A)
    3cf2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    3cf6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3cfa:	89 2b       	or	r24, r25
    3cfc:	31 f4       	brne	.+12     	; 0x3d0a <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xa0>
 	{
		OCR1A = 1000;  /* Ensure that AM tone setting is initialized - even if it won't be used */
    3cfe:	88 ee       	ldi	r24, 0xE8	; 232
    3d00:	93 e0       	ldi	r25, 0x03	; 3
    3d02:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3d06:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 	}

	cli();
    3d0a:	f8 94       	cli
	setupPortsForF1975(enableAM);
    3d0c:	8c 2f       	mov	r24, r28
    3d0e:	0e 94 33 08 	call	0x1066	; 0x1066 <setupPortsForF1975>

	if(enableAM)
    3d12:	cc 23       	and	r28, r28
    3d14:	59 f0       	breq	.+22     	; 0x3d2c <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xc2>
	{
		TIMSK0 &= ~(1 << OCIE0A);   /* Timer/Counter0 Output Compare Match A Interrupt Disable (CW Tone Output for FM) */
    3d16:	ee e6       	ldi	r30, 0x6E	; 110
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	8d 7f       	andi	r24, 0xFD	; 253
    3d1e:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);    /* Timer/Counter1 Output Compare Match A Interrupt Enable (CW Tone Output for AM) */
    3d20:	ef e6       	ldi	r30, 0x6F	; 111
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	80 81       	ld	r24, Z
    3d26:	82 60       	ori	r24, 0x02	; 2
    3d28:	80 83       	st	Z, r24
    3d2a:	0a c0       	rjmp	.+20     	; 0x3d40 <_Z18setAMToneFrequency14AM_Tone_Freq_t+0xd6>
	}
	else
	{
		TIMSK0 |= (1 << OCIE0A);    /* Timer/Counter0 Output Compare Match A Interrupt Enable (CW Tone Output for FM) */
    3d2c:	ee e6       	ldi	r30, 0x6E	; 110
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	82 60       	ori	r24, 0x02	; 2
    3d34:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);   /* Timer/Counter1 Output Compare Match A Interrupt Disable (CW Tone Output for AM) */
    3d36:	ef e6       	ldi	r30, 0x6F	; 111
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	80 81       	ld	r24, Z
    3d3c:	8d 7f       	andi	r24, 0xFD	; 253
    3d3e:	80 83       	st	Z, r24
	}

	g_AM_enabled = enableAM;
    3d40:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <g_AM_enabled>
	sei();
    3d44:	78 94       	sei
#endif  /* INIT_EEPROM_ONLY */
	return(enableAM);
}
    3d46:	8c 2f       	mov	r24, r28
    3d48:	cf 91       	pop	r28
    3d4a:	08 95       	ret

00003d4c <_Z17handleLinkBusMsgsv>:
}

/* The compiler does not seem to always optimize large switch statements correctly
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    3d4c:	2f 92       	push	r2
    3d4e:	3f 92       	push	r3
    3d50:	4f 92       	push	r4
    3d52:	5f 92       	push	r5
    3d54:	6f 92       	push	r6
    3d56:	7f 92       	push	r7
    3d58:	8f 92       	push	r8
    3d5a:	9f 92       	push	r9
    3d5c:	af 92       	push	r10
    3d5e:	bf 92       	push	r11
    3d60:	cf 92       	push	r12
    3d62:	df 92       	push	r13
    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	2c 97       	sbiw	r28, 0x0c	; 12
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
							setupForFox(&holdFox, START_NOTHING);
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3d80:	0f 2e       	mov	r0, r31
    3d82:	f4 e9       	ldi	r31, 0x94	; 148
    3d84:	6f 2e       	mov	r6, r31
    3d86:	f1 e0       	ldi	r31, 0x01	; 1
    3d88:	7f 2e       	mov	r7, r31
    3d8a:	f0 2d       	mov	r31, r0
    3d8c:	0f 2e       	mov	r0, r31
    3d8e:	fc e9       	ldi	r31, 0x9C	; 156
    3d90:	af 2e       	mov	r10, r31
    3d92:	f4 e0       	ldi	r31, 0x04	; 4
    3d94:	bf 2e       	mov	r11, r31
    3d96:	f0 2d       	mov	r31, r0
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);

						if(g_messages_text[STATION_ID][0])
    3d98:	0f 2e       	mov	r0, r31
    3d9a:	f8 ed       	ldi	r31, 0xD8	; 216
    3d9c:	4f 2e       	mov	r4, r31
    3d9e:	f4 e0       	ldi	r31, 0x04	; 4
    3da0:	5f 2e       	mov	r5, r31
    3da2:	f0 2d       	mov	r31, r0
						setAtten(0);
						sei();
					}
#endif /* INIT_EEPROM_ONLY */

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    3da4:	0f 2e       	mov	r0, r31
    3da6:	f2 e0       	ldi	r31, 0x02	; 2
    3da8:	8f 2e       	mov	r8, r31
    3daa:	f2 e0       	ldi	r31, 0x02	; 2
    3dac:	9f 2e       	mov	r9, r31
    3dae:	f0 2d       	mov	r31, r0
				lb_send_string(g_tempStr, TRUE);

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    3db0:	0f 2e       	mov	r0, r31
    3db2:	f9 e0       	ldi	r31, 0x09	; 9
    3db4:	2f 2e       	mov	r2, r31
    3db6:	f2 e0       	ldi	r31, 0x02	; 2
    3db8:	3f 2e       	mov	r3, r31
    3dba:	f0 2d       	mov	r31, r0
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;

	while((lb_buff = nextFullRxBuffer()))
    3dbc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <nextFullRxBuffer>
    3dc0:	6c 01       	movw	r12, r24
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <_Z17handleLinkBusMsgsv+0x7c>
    3dc6:	06 c5       	rjmp	.+2572   	; 0x47d4 <_Z17handleLinkBusMsgsv+0xa88>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    3dc8:	dc 01       	movw	r26, r24
    3dca:	11 96       	adiw	r26, 0x01	; 1
    3dcc:	8d 91       	ld	r24, X+
    3dce:	9c 91       	ld	r25, X
    3dd0:	12 97       	sbiw	r26, 0x02	; 2
    3dd2:	86 3c       	cpi	r24, 0xC6	; 198
    3dd4:	be e1       	ldi	r27, 0x1E	; 30
    3dd6:	9b 07       	cpc	r25, r27
    3dd8:	29 f1       	breq	.+74     	; 0x3e24 <_Z17handleLinkBusMsgsv+0xd8>
    3dda:	78 f4       	brcc	.+30     	; 0x3dfa <_Z17handleLinkBusMsgsv+0xae>
    3ddc:	8e 31       	cpi	r24, 0x1E	; 30
    3dde:	f3 e0       	ldi	r31, 0x03	; 3
    3de0:	9f 07       	cpc	r25, r31
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <_Z17handleLinkBusMsgsv+0x9a>
    3de4:	15 c1       	rjmp	.+554    	; 0x4010 <_Z17handleLinkBusMsgsv+0x2c4>
    3de6:	8f 36       	cpi	r24, 0x6F	; 111
    3de8:	2d e1       	ldi	r18, 0x1D	; 29
    3dea:	92 07       	cpc	r25, r18
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <_Z17handleLinkBusMsgsv+0xa4>
    3dee:	4d c2       	rjmp	.+1178   	; 0x428a <_Z17handleLinkBusMsgsv+0x53e>
    3df0:	87 3d       	cpi	r24, 0xD7	; 215
    3df2:	92 40       	sbci	r25, 0x02	; 2
    3df4:	09 f0       	breq	.+2      	; 0x3df8 <_Z17handleLinkBusMsgsv+0xac>
    3df6:	c2 c4       	rjmp	.+2436   	; 0x477c <_Z17handleLinkBusMsgsv+0xa30>
    3df8:	ad c0       	rjmp	.+346    	; 0x3f54 <_Z17handleLinkBusMsgsv+0x208>
    3dfa:	82 37       	cpi	r24, 0x72	; 114
    3dfc:	a3 e2       	ldi	r26, 0x23	; 35
    3dfe:	9a 07       	cpc	r25, r26
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <_Z17handleLinkBusMsgsv+0xb8>
    3e02:	77 c1       	rjmp	.+750    	; 0x40f2 <_Z17handleLinkBusMsgsv+0x3a6>
    3e04:	28 f4       	brcc	.+10     	; 0x3e10 <_Z17handleLinkBusMsgsv+0xc4>
    3e06:	8a 3e       	cpi	r24, 0xEA	; 234
    3e08:	92 42       	sbci	r25, 0x22	; 34
    3e0a:	09 f4       	brne	.+2      	; 0x3e0e <_Z17handleLinkBusMsgsv+0xc2>
    3e0c:	09 c2       	rjmp	.+1042   	; 0x4220 <_Z17handleLinkBusMsgsv+0x4d4>
    3e0e:	b6 c4       	rjmp	.+2412   	; 0x477c <_Z17handleLinkBusMsgsv+0xa30>
    3e10:	84 33       	cpi	r24, 0x34	; 52
    3e12:	f4 e2       	ldi	r31, 0x24	; 36
    3e14:	9f 07       	cpc	r25, r31
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <_Z17handleLinkBusMsgsv+0xce>
    3e18:	cf c0       	rjmp	.+414    	; 0x3fb8 <_Z17handleLinkBusMsgsv+0x26c>
    3e1a:	85 3c       	cpi	r24, 0xC5	; 197
    3e1c:	94 42       	sbci	r25, 0x24	; 36
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <_Z17handleLinkBusMsgsv+0xd6>
    3e20:	1c c4       	rjmp	.+2104   	; 0x465a <_Z17handleLinkBusMsgsv+0x90e>
    3e22:	ac c4       	rjmp	.+2392   	; 0x477c <_Z17handleLinkBusMsgsv+0xa30>
		{
			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    3e24:	d6 01       	movw	r26, r12
    3e26:	13 96       	adiw	r26, 0x03	; 3
    3e28:	8c 91       	ld	r24, X
    3e2a:	13 97       	sbiw	r26, 0x03	; 3
    3e2c:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <_Z17handleLinkBusMsgsv+0xe8>
    3e32:	7b c0       	rjmp	.+246    	; 0x3f2a <_Z17handleLinkBusMsgsv+0x1de>
				{
					if(c == 'B')
    3e34:	82 34       	cpi	r24, 0x42	; 66
    3e36:	91 05       	cpc	r25, r1
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <_Z17handleLinkBusMsgsv+0xf0>
    3e3a:	b4 c4       	rjmp	.+2408   	; 0x47a4 <_Z17handleLinkBusMsgsv+0xa58>
					{
						c = BEACON;
					}
					else if(c == 'F')
    3e3c:	86 34       	cpi	r24, 0x46	; 70
    3e3e:	91 05       	cpc	r25, r1
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <_Z17handleLinkBusMsgsv+0xf8>
    3e42:	b2 c4       	rjmp	.+2404   	; 0x47a8 <_Z17handleLinkBusMsgsv+0xa5c>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    3e44:	83 34       	cpi	r24, 0x43	; 67
    3e46:	91 05       	cpc	r25, r1
    3e48:	d1 f4       	brne	.+52     	; 0x3e7e <_Z17handleLinkBusMsgsv+0x132>
					{
						char t = lb_buff->fields[FIELD2][0];
    3e4a:	57 96       	adiw	r26, 0x17	; 23
    3e4c:	8c 91       	ld	r24, X
    3e4e:	57 97       	sbiw	r26, 0x17	; 23
						lb_buff->fields[FIELD2][1] = '\0';
    3e50:	58 96       	adiw	r26, 0x18	; 24
    3e52:	1c 92       	st	X, r1

						if(t == 'B')
    3e54:	82 34       	cpi	r24, 0x42	; 66
    3e56:	29 f0       	breq	.+10     	; 0x3e62 <_Z17handleLinkBusMsgsv+0x116>
						{
							t = '0';
						}

						if(isdigit(t))
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	c0 97       	sbiw	r24, 0x30	; 48
    3e5c:	0a 97       	sbiw	r24, 0x0a	; 10
    3e5e:	08 f0       	brcs	.+2      	; 0x3e62 <_Z17handleLinkBusMsgsv+0x116>
    3e60:	64 c0       	rjmp	.+200    	; 0x3f2a <_Z17handleLinkBusMsgsv+0x1de>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    3e62:	c6 01       	movw	r24, r12
    3e64:	47 96       	adiw	r24, 0x17	; 23
    3e66:	0e 94 a2 33 	call	0x6744	; 0x6744 <atoi>
    3e6a:	99 23       	and	r25, r25
    3e6c:	14 f4       	brge	.+4      	; 0x3e72 <_Z17handleLinkBusMsgsv+0x126>
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	86 30       	cpi	r24, 0x06	; 6
    3e74:	91 05       	cpc	r25, r1
    3e76:	cc f1       	brlt	.+114    	; 0x3eea <_Z17handleLinkBusMsgsv+0x19e>
    3e78:	85 e0       	ldi	r24, 0x05	; 5
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	36 c0       	rjmp	.+108    	; 0x3eea <_Z17handleLinkBusMsgsv+0x19e>
						}
					}
					else if(c == 'S')
    3e7e:	83 35       	cpi	r24, 0x53	; 83
    3e80:	91 05       	cpc	r25, r1
    3e82:	79 f5       	brne	.+94     	; 0x3ee2 <_Z17handleLinkBusMsgsv+0x196>
					{
						char x = 0;
						char t = lb_buff->fields[FIELD2][0];
    3e84:	f6 01       	movw	r30, r12
    3e86:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    3e88:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    3e8a:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    3e8c:	82 34       	cpi	r24, 0x42	; 66
    3e8e:	89 f1       	breq	.+98     	; 0x3ef2 <_Z17handleLinkBusMsgsv+0x1a6>
						{
							x = BEACON;
						}
						else if(t == 'F')
    3e90:	86 34       	cpi	r24, 0x46	; 70
    3e92:	39 f4       	brne	.+14     	; 0x3ea2 <_Z17handleLinkBusMsgsv+0x156>
						{
							if((u > '0') && (u < '6'))
    3e94:	8f ec       	ldi	r24, 0xCF	; 207
    3e96:	89 0f       	add	r24, r25
    3e98:	85 30       	cpi	r24, 0x05	; 5
    3e9a:	68 f5       	brcc	.+90     	; 0x3ef6 <_Z17handleLinkBusMsgsv+0x1aa>
							{
								x = SPRINT_F1 + (u - '1');
    3e9c:	8c ed       	ldi	r24, 0xDC	; 220
    3e9e:	89 0f       	add	r24, r25
    3ea0:	18 c0       	rjmp	.+48     	; 0x3ed2 <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(t == 'S')
    3ea2:	83 35       	cpi	r24, 0x53	; 83
    3ea4:	39 f4       	brne	.+14     	; 0x3eb4 <_Z17handleLinkBusMsgsv+0x168>
						{
							if((u > '0') && (u < '6'))
    3ea6:	8f ec       	ldi	r24, 0xCF	; 207
    3ea8:	89 0f       	add	r24, r25
    3eaa:	85 30       	cpi	r24, 0x05	; 5
    3eac:	b8 f4       	brcc	.+46     	; 0x3edc <_Z17handleLinkBusMsgsv+0x190>
							{
								x = SPRINT_S1 + (u - '1');
    3eae:	87 ed       	ldi	r24, 0xD7	; 215
    3eb0:	89 0f       	add	r24, r25
    3eb2:	0f c0       	rjmp	.+30     	; 0x3ed2 <_Z17handleLinkBusMsgsv+0x186>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    3eb4:	96 34       	cpi	r25, 0x46	; 70
    3eb6:	31 f4       	brne	.+12     	; 0x3ec4 <_Z17handleLinkBusMsgsv+0x178>
						{
							if((t > '0') && (t < '6'))
    3eb8:	9f ec       	ldi	r25, 0xCF	; 207
    3eba:	98 0f       	add	r25, r24
    3ebc:	95 30       	cpi	r25, 0x05	; 5
    3ebe:	e8 f4       	brcc	.+58     	; 0x3efa <_Z17handleLinkBusMsgsv+0x1ae>
							{
								x = SPRINT_F1 + (t - '1');
    3ec0:	84 52       	subi	r24, 0x24	; 36
    3ec2:	07 c0       	rjmp	.+14     	; 0x3ed2 <_Z17handleLinkBusMsgsv+0x186>
							}
						}
						else if(u == 'S')
    3ec4:	93 35       	cpi	r25, 0x53	; 83
    3ec6:	d9 f4       	brne	.+54     	; 0x3efe <_Z17handleLinkBusMsgsv+0x1b2>
						{
							if((t > '0') && (t < '6'))
    3ec8:	9f ec       	ldi	r25, 0xCF	; 207
    3eca:	98 0f       	add	r25, r24
    3ecc:	95 30       	cpi	r25, 0x05	; 5
    3ece:	c8 f4       	brcc	.+50     	; 0x3f02 <_Z17handleLinkBusMsgsv+0x1b6>
							{
								x = SPRINT_S1 + (t - '1');
    3ed0:	89 52       	subi	r24, 0x29	; 41
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
    3ed2:	99 ef       	ldi	r25, 0xF9	; 249
    3ed4:	98 0f       	add	r25, r24
    3ed6:	9b 30       	cpi	r25, 0x0B	; 11
    3ed8:	10 f0       	brcs	.+4      	; 0x3ede <_Z17handleLinkBusMsgsv+0x192>
    3eda:	68 c4       	rjmp	.+2256   	; 0x47ac <_Z17handleLinkBusMsgsv+0xa60>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    3edc:	87 e0       	ldi	r24, 0x07	; 7
							}
						}

						if((x >= SPECTATOR) && (x <= SPRINT_F5))
						{
							c = x;
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	04 c0       	rjmp	.+8      	; 0x3eea <_Z17handleLinkBusMsgsv+0x19e>
							c = BEACON;
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    3ee2:	c6 01       	movw	r24, r12
    3ee4:	03 96       	adiw	r24, 0x03	; 3
    3ee6:	0e 94 a2 33 	call	0x6744	; 0x6744 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    3eea:	82 31       	cpi	r24, 0x12	; 18
    3eec:	91 05       	cpc	r25, r1
    3eee:	e8 f4       	brcc	.+58     	; 0x3f2a <_Z17handleLinkBusMsgsv+0x1de>
    3ef0:	09 c0       	rjmp	.+18     	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	07 c0       	rjmp	.+14     	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	05 c0       	rjmp	.+10     	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	03 c0       	rjmp	.+6      	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	01 c0       	rjmp	.+2      	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
    3f02:	80 e0       	ldi	r24, 0x00	; 0
					{
						Fox_t holdFox = (Fox_t)c;
    3f04:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3f06:	ae 01       	movw	r20, r28
    3f08:	4f 5f       	subi	r20, 0xFF	; 255
    3f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0c:	60 e1       	ldi	r22, 0x10	; 16
    3f0e:	84 e6       	ldi	r24, 0x64	; 100
    3f10:	95 e0       	ldi	r25, 0x05	; 5
    3f12:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3f16:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    3f1a:	99 81       	ldd	r25, Y+1	; 0x01
    3f1c:	98 17       	cp	r25, r24
    3f1e:	29 f0       	breq	.+10     	; 0x3f2a <_Z17handleLinkBusMsgsv+0x1de>
						{
							setupForFox(&holdFox, START_NOTHING);
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	ce 01       	movw	r24, r28
    3f24:	01 96       	adiw	r24, 0x01	; 1
    3f26:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3f2a:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    3f2e:	1f 92       	push	r1
    3f30:	8f 93       	push	r24
    3f32:	7f 92       	push	r7
    3f34:	6f 92       	push	r6
    3f36:	bf 92       	push	r11
    3f38:	af 92       	push	r10
    3f3a:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	c5 01       	movw	r24, r10
    3f42:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
			}
			break;
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	18 c4       	rjmp	.+2096   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>

#if !SUPPORT_ONLY_80M
					case MESSAGE_SET_AM_TONE:
					{
						if(lb_buff->fields[FIELD1][0])
    3f54:	d6 01       	movw	r26, r12
    3f56:	13 96       	adiw	r26, 0x03	; 3
    3f58:	8c 91       	ld	r24, X
    3f5a:	88 23       	and	r24, r24
    3f5c:	b1 f0       	breq	.+44     	; 0x3f8a <_Z17handleLinkBusMsgsv+0x23e>
						{
							uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3f5e:	c6 01       	movw	r24, r12
    3f60:	03 96       	adiw	r24, 0x03	; 3
    3f62:	0e 94 c0 33 	call	0x6780	; 0x6780 <atol>
							g_AM_audio_frequency = (AM_Tone_Freq_t)CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	67 30       	cpi	r22, 0x07	; 7
    3f6a:	71 05       	cpc	r23, r1
    3f6c:	0c f0       	brlt	.+2      	; 0x3f70 <_Z17handleLinkBusMsgsv+0x224>
    3f6e:	66 e0       	ldi	r22, 0x06	; 6
    3f70:	60 93 45 05 	sts	0x0545, r22	; 0x800545 <g_AM_audio_frequency>
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3f74:	45 e4       	ldi	r20, 0x45	; 69
    3f76:	55 e0       	ldi	r21, 0x05	; 5
    3f78:	61 e1       	ldi	r22, 0x11	; 17
    3f7a:	84 e6       	ldi	r24, 0x64	; 100
    3f7c:	95 e0       	ldi	r25, 0x05	; 5
    3f7e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
							setAMToneFrequency(g_AM_audio_frequency);
    3f82:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_AM_audio_frequency>
    3f86:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z18setAMToneFrequency14AM_Tone_Freq_t>
						}

						sprintf(g_tempStr, "AM:%d\n", (uint8_t)g_AM_audio_frequency);
    3f8a:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_AM_audio_frequency>
    3f8e:	1f 92       	push	r1
    3f90:	8f 93       	push	r24
    3f92:	8c e9       	ldi	r24, 0x9C	; 156
    3f94:	91 e0       	ldi	r25, 0x01	; 1
    3f96:	9f 93       	push	r25
    3f98:	8f 93       	push	r24
    3f9a:	bf 92       	push	r11
    3f9c:	af 92       	push	r10
    3f9e:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
						lb_send_string(g_tempStr, FALSE);
    3fa2:	60 e0       	ldi	r22, 0x00	; 0
    3fa4:	c5 01       	movw	r24, r10
    3fa6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
					}
					break;
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	0f 90       	pop	r0
    3fb4:	0f 90       	pop	r0
    3fb6:	e6 c3       	rjmp	.+1996   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
#endif  /* !SUPPORT_ONLY_80M */

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    3fb8:	f6 01       	movw	r30, r12
    3fba:	83 81       	ldd	r24, Z+3	; 0x03
    3fbc:	88 23       	and	r24, r24
    3fbe:	11 f1       	breq	.+68     	; 0x4004 <_Z17handleLinkBusMsgsv+0x2b8>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    3fc0:	80 33       	cpi	r24, 0x30	; 48
    3fc2:	21 f4       	brne	.+8      	; 0x3fcc <_Z17handleLinkBusMsgsv+0x280>
					{
						stopEventNow(PROGRAMMATIC);
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <_Z12stopEventNow19EventActionSource_t>
    3fca:	dc c3       	rjmp	.+1976   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    3fcc:	81 33       	cpi	r24, 0x31	; 49
    3fce:	21 f4       	brne	.+8      	; 0x3fd8 <_Z17handleLinkBusMsgsv+0x28c>
					{
						startEventNow(PROGRAMMATIC);
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	0e 94 02 1a 	call	0x3404	; 0x3404 <_Z13startEventNow19EventActionSource_t>
    3fd6:	d6 c3       	rjmp	.+1964   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    3fd8:	82 33       	cpi	r24, 0x32	; 50
    3fda:	31 f4       	brne	.+12     	; 0x3fe8 <_Z17handleLinkBusMsgsv+0x29c>
					{
						g_transmissions_disabled = TRUE;        /* Disable an event currently underway */
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_transmissions_disabled>
						startEventUsingRTC();
    3fe2:	0e 94 af 1c 	call	0x395e	; 0x395e <_Z18startEventUsingRTCv>
    3fe6:	ce c3       	rjmp	.+1948   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
					else if(lb_buff->fields[FIELD1][0] == '3')  /* Start the event at the programmed start time */
    3fe8:	83 33       	cpi	r24, 0x33	; 51
    3fea:	31 f4       	brne	.+12     	; 0x3ff8 <_Z17handleLinkBusMsgsv+0x2ac>
					{
						setupForFox(NULL, START_TRANSMISSIONS_NOW);
    3fec:	62 e0       	ldi	r22, 0x02	; 2
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    3ff6:	c6 c3       	rjmp	.+1932   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
					else
					{
						lb_send_string((char*)"err\n", TRUE);
    3ff8:	61 e0       	ldi	r22, 0x01	; 1
    3ffa:	83 ea       	ldi	r24, 0xA3	; 163
    3ffc:	91 e0       	ldi	r25, 0x01	; 1
    3ffe:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    4002:	c0 c3       	rjmp	.+1920   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
				}
				else
				{
					lb_send_string((char*)"err\n", TRUE);
    4004:	61 e0       	ldi	r22, 0x01	; 1
    4006:	83 ea       	ldi	r24, 0xA3	; 163
    4008:	91 e0       	ldi	r25, 0x01	; 1
    400a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    400e:	ba c3       	rjmp	.+1908   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    4010:	d6 01       	movw	r26, r12
    4012:	13 96       	adiw	r26, 0x03	; 3
    4014:	8c 91       	ld	r24, X
    4016:	88 23       	and	r24, r24
    4018:	99 f1       	breq	.+102    	; 0x4080 <_Z17handleLinkBusMsgsv+0x334>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    401a:	80 e2       	ldi	r24, 0x20	; 32
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	f5 01       	movw	r30, r10
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    4024:	b6 01       	movw	r22, r12
    4026:	6d 5f       	subi	r22, 0xFD	; 253
    4028:	7f 4f       	sbci	r23, 0xFF	; 255
    402a:	c5 01       	movw	r24, r10
    402c:	0e 94 ef 33 	call	0x67de	; 0x67de <strcat>

					if(lb_buff->fields[FIELD2][0])
    4030:	d6 01       	movw	r26, r12
    4032:	57 96       	adiw	r26, 0x17	; 23
    4034:	8c 91       	ld	r24, X
    4036:	88 23       	and	r24, r24
    4038:	79 f0       	breq	.+30     	; 0x4058 <_Z17handleLinkBusMsgsv+0x30c>
					{
						strcat(g_tempStr, " ");
    403a:	f5 01       	movw	r30, r10
    403c:	01 90       	ld	r0, Z+
    403e:	00 20       	and	r0, r0
    4040:	e9 f7       	brne	.-6      	; 0x403c <_Z17handleLinkBusMsgsv+0x2f0>
    4042:	31 97       	sbiw	r30, 0x01	; 1
    4044:	80 e2       	ldi	r24, 0x20	; 32
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	91 83       	std	Z+1, r25	; 0x01
    404a:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    404c:	b6 01       	movw	r22, r12
    404e:	69 5e       	subi	r22, 0xE9	; 233
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	c5 01       	movw	r24, r10
    4054:	0e 94 ef 33 	call	0x67de	; 0x67de <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    4058:	f5 01       	movw	r30, r10
    405a:	01 90       	ld	r0, Z+
    405c:	00 20       	and	r0, r0
    405e:	e9 f7       	brne	.-6      	; 0x405a <_Z17handleLinkBusMsgsv+0x30e>
    4060:	31 97       	sbiw	r30, 0x01	; 1
    4062:	ec 59       	subi	r30, 0x9C	; 156
    4064:	f4 40       	sbci	r31, 0x04	; 4
    4066:	75 97       	sbiw	r30, 0x15	; 21
    4068:	58 f4       	brcc	.+22     	; 0x4080 <_Z17handleLinkBusMsgsv+0x334>
					{
						strcpy((char*)g_messages_text[STATION_ID], g_tempStr);
    406a:	b5 01       	movw	r22, r10
    406c:	8d ee       	ldi	r24, 0xED	; 237
    406e:	94 e0       	ldi	r25, 0x04	; 4
    4070:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    4074:	a5 01       	movw	r20, r10
    4076:	6b e0       	ldi	r22, 0x0B	; 11
    4078:	84 e6       	ldi	r24, 0x64	; 100
    407a:	95 e0       	ldi	r25, 0x05	; 5
    407c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    4080:	f2 01       	movw	r30, r4
    4082:	85 89       	ldd	r24, Z+21	; 0x15
    4084:	88 23       	and	r24, r24
    4086:	f1 f0       	breq	.+60     	; 0x40c4 <_Z17handleLinkBusMsgsv+0x378>
				{
					g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    4088:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    408c:	70 e0       	ldi	r23, 0x00	; 0
    408e:	8d ee       	ldi	r24, 0xED	; 237
    4090:	94 e0       	ldi	r25, 0x04	; 4
    4092:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <timeRequiredToSendStrAtWPM>
    4096:	88 5a       	subi	r24, 0xA8	; 168
    4098:	9d 4f       	sbci	r25, 0xFD	; 253
    409a:	9c 01       	movw	r18, r24
    409c:	36 95       	lsr	r19
    409e:	27 95       	ror	r18
    40a0:	36 95       	lsr	r19
    40a2:	27 95       	ror	r18
    40a4:	36 95       	lsr	r19
    40a6:	27 95       	ror	r18
    40a8:	a5 ec       	ldi	r26, 0xC5	; 197
    40aa:	b0 e2       	ldi	r27, 0x20	; 32
    40ac:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    40b0:	92 95       	swap	r25
    40b2:	82 95       	swap	r24
    40b4:	8f 70       	andi	r24, 0x0F	; 15
    40b6:	89 27       	eor	r24, r25
    40b8:	9f 70       	andi	r25, 0x0F	; 15
    40ba:	89 27       	eor	r24, r25
    40bc:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <g_time_needed_for_ID+0x1>
    40c0:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    40c4:	8d ee       	ldi	r24, 0xED	; 237
    40c6:	94 e0       	ldi	r25, 0x04	; 4
    40c8:	9f 93       	push	r25
    40ca:	8f 93       	push	r24
    40cc:	88 ea       	ldi	r24, 0xA8	; 168
    40ce:	91 e0       	ldi	r25, 0x01	; 1
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	bf 92       	push	r11
    40d6:	af 92       	push	r10
    40d8:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
				lb_send_string(g_tempStr, TRUE);
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	c5 01       	movw	r24, r10
    40e0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
			}
			break;
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	0f 90       	pop	r0
    40ee:	0f 90       	pop	r0
    40f0:	49 c3       	rjmp	.+1682   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>


			case MESSAGE_CODE_SETTINGS:
			{
				if(lb_buff->fields[FIELD1][0] == 'S')
    40f2:	d6 01       	movw	r26, r12
    40f4:	13 96       	adiw	r26, 0x03	; 3
    40f6:	8c 91       	ld	r24, X
    40f8:	13 97       	sbiw	r26, 0x03	; 3
    40fa:	83 35       	cpi	r24, 0x53	; 83
    40fc:	09 f0       	breq	.+2      	; 0x4100 <_Z17handleLinkBusMsgsv+0x3b4>
    40fe:	51 c0       	rjmp	.+162    	; 0x41a2 <_Z17handleLinkBusMsgsv+0x456>
				{
					char x = lb_buff->fields[FIELD2][0];

					if(x)
    4100:	57 96       	adiw	r26, 0x17	; 23
    4102:	8c 91       	ld	r24, X
    4104:	88 23       	and	r24, r24
    4106:	d1 f1       	breq	.+116    	; 0x417c <_Z17handleLinkBusMsgsv+0x430>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    4108:	c6 01       	movw	r24, r12
    410a:	47 96       	adiw	r24, 0x17	; 23
    410c:	0e 94 c0 33 	call	0x6780	; 0x6780 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    4110:	86 2f       	mov	r24, r22
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	85 30       	cpi	r24, 0x05	; 5
    4116:	91 05       	cpc	r25, r1
    4118:	14 f4       	brge	.+4      	; 0x411e <_Z17handleLinkBusMsgsv+0x3d2>
    411a:	85 e0       	ldi	r24, 0x05	; 5
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	85 31       	cpi	r24, 0x15	; 21
    4120:	91 05       	cpc	r25, r1
    4122:	0c f0       	brlt	.+2      	; 0x4126 <_Z17handleLinkBusMsgsv+0x3da>
    4124:	84 e1       	ldi	r24, 0x14	; 20
    4126:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    412a:	4f e0       	ldi	r20, 0x0F	; 15
    412c:	51 e0       	ldi	r21, 0x01	; 1
    412e:	6f e0       	ldi	r22, 0x0F	; 15
    4130:	84 e6       	ldi	r24, 0x64	; 100
    4132:	95 e0       	ldi	r25, 0x05	; 5
    4134:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    4138:	f2 01       	movw	r30, r4
    413a:	85 89       	ldd	r24, Z+21	; 0x15
    413c:	88 23       	and	r24, r24
    413e:	f1 f0       	breq	.+60     	; 0x417c <_Z17handleLinkBusMsgsv+0x430>
						{
							g_time_needed_for_ID = (600 + timeRequiredToSendStrAtWPM((char*)g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    4140:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <g_id_codespeed>
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	8d ee       	ldi	r24, 0xED	; 237
    4148:	94 e0       	ldi	r25, 0x04	; 4
    414a:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <timeRequiredToSendStrAtWPM>
    414e:	88 5a       	subi	r24, 0xA8	; 168
    4150:	9d 4f       	sbci	r25, 0xFD	; 253
    4152:	9c 01       	movw	r18, r24
    4154:	36 95       	lsr	r19
    4156:	27 95       	ror	r18
    4158:	36 95       	lsr	r19
    415a:	27 95       	ror	r18
    415c:	36 95       	lsr	r19
    415e:	27 95       	ror	r18
    4160:	a5 ec       	ldi	r26, 0xC5	; 197
    4162:	b0 e2       	ldi	r27, 0x20	; 32
    4164:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    4168:	92 95       	swap	r25
    416a:	82 95       	swap	r24
    416c:	8f 70       	andi	r24, 0x0F	; 15
    416e:	89 27       	eor	r24, r25
    4170:	9f 70       	andi	r25, 0x0F	; 15
    4172:	89 27       	eor	r24, r25
    4174:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <g_time_needed_for_ID+0x1>
    4178:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <g_time_needed_for_ID>
						}
					}

					sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    417c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_id_codespeed>
    4180:	1f 92       	push	r1
    4182:	8f 93       	push	r24
    4184:	8f ea       	ldi	r24, 0xAF	; 175
    4186:	91 e0       	ldi	r25, 0x01	; 1
    4188:	9f 93       	push	r25
    418a:	8f 93       	push	r24
    418c:	bf 92       	push	r11
    418e:	af 92       	push	r10
    4190:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	3a c0       	rjmp	.+116    	; 0x4216 <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else if(lb_buff->fields[FIELD1][0] == 'P')
    41a2:	80 35       	cpi	r24, 0x50	; 80
    41a4:	81 f5       	brne	.+96     	; 0x4206 <_Z17handleLinkBusMsgsv+0x4ba>
				{
					char x = lb_buff->fields[FIELD2][0];
    41a6:	f6 01       	movw	r30, r12
    41a8:	87 89       	ldd	r24, Z+23	; 0x17

					if(x)
    41aa:	88 23       	and	r24, r24
    41ac:	c9 f0       	breq	.+50     	; 0x41e0 <_Z17handleLinkBusMsgsv+0x494>
					{
						g_ptt_periodic_reset_enabled = ((x == '1') || (x == 'T') || (x == 'Y'));
    41ae:	81 33       	cpi	r24, 0x31	; 49
    41b0:	39 f0       	breq	.+14     	; 0x41c0 <_Z17handleLinkBusMsgsv+0x474>
    41b2:	84 35       	cpi	r24, 0x54	; 84
    41b4:	39 f0       	breq	.+14     	; 0x41c4 <_Z17handleLinkBusMsgsv+0x478>
    41b6:	91 e0       	ldi	r25, 0x01	; 1
    41b8:	89 35       	cpi	r24, 0x59	; 89
    41ba:	29 f0       	breq	.+10     	; 0x41c6 <_Z17handleLinkBusMsgsv+0x47a>
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	03 c0       	rjmp	.+6      	; 0x41c6 <_Z17handleLinkBusMsgsv+0x47a>
    41c0:	91 e0       	ldi	r25, 0x01	; 1
    41c2:	01 c0       	rjmp	.+2      	; 0x41c6 <_Z17handleLinkBusMsgsv+0x47a>
    41c4:	91 e0       	ldi	r25, 0x01	; 1
    41c6:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_ptt_periodic_reset_enabled>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    41ca:	47 e4       	ldi	r20, 0x47	; 71
    41cc:	55 e0       	ldi	r21, 0x05	; 5
    41ce:	67 e1       	ldi	r22, 0x17	; 23
    41d0:	84 e6       	ldi	r24, 0x64	; 100
    41d2:	95 e0       	ldi	r25, 0x05	; 5
    41d4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    41d8:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_ptt_periodic_reset_enabled>
    41dc:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <g_use_ptt_periodic_reset>
					}

					sprintf(g_tempStr, "DRP:%d\n", g_ptt_periodic_reset_enabled);
    41e0:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_ptt_periodic_reset_enabled>
    41e4:	1f 92       	push	r1
    41e6:	8f 93       	push	r24
    41e8:	8b eb       	ldi	r24, 0xBB	; 187
    41ea:	91 e0       	ldi	r25, 0x01	; 1
    41ec:	9f 93       	push	r25
    41ee:	8f 93       	push	r24
    41f0:	bf 92       	push	r11
    41f2:	af 92       	push	r10
    41f4:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	08 c0       	rjmp	.+16     	; 0x4216 <_Z17handleLinkBusMsgsv+0x4ca>
				}
				else
				{
					sprintf(g_tempStr, "err\n");
    4206:	85 e0       	ldi	r24, 0x05	; 5
    4208:	e3 ea       	ldi	r30, 0xA3	; 163
    420a:	f1 e0       	ldi	r31, 0x01	; 1
    420c:	d5 01       	movw	r26, r10
    420e:	01 90       	ld	r0, Z+
    4210:	0d 92       	st	X+, r0
    4212:	8a 95       	dec	r24
    4214:	e1 f7       	brne	.-8      	; 0x420e <_Z17handleLinkBusMsgsv+0x4c2>
				}

				lb_send_string(g_tempStr, FALSE);
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	c5 01       	movw	r24, r10
    421a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
			}
			break;
    421e:	b2 c2       	rjmp	.+1380   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    4220:	f6 01       	movw	r30, r12
    4222:	83 81       	ldd	r24, Z+3	; 0x03
    4224:	88 23       	and	r24, r24
    4226:	d1 f0       	breq	.+52     	; 0x425c <_Z17handleLinkBusMsgsv+0x510>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    4228:	48 e0       	ldi	r20, 0x08	; 8
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	b6 01       	movw	r22, r12
    422e:	6d 5f       	subi	r22, 0xFD	; 253
    4230:	7f 4f       	sbci	r23, 0xFF	; 255
    4232:	c5 01       	movw	r24, r10
    4234:	0e 94 01 34 	call	0x6802	; 0x6802 <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    4238:	d5 01       	movw	r26, r10
    423a:	18 96       	adiw	r26, 0x08	; 8
    423c:	1c 92       	st	X, r1

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    423e:	c5 01       	movw	r24, r10
    4240:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_Z11only_digitsPc>
    4244:	88 23       	and	r24, r24
    4246:	51 f0       	breq	.+20     	; 0x425c <_Z17handleLinkBusMsgsv+0x510>
    4248:	f5 01       	movw	r30, r10
    424a:	01 90       	ld	r0, Z+
    424c:	00 20       	and	r0, r0
    424e:	e9 f7       	brne	.-6      	; 0x424a <_Z17handleLinkBusMsgsv+0x4fe>
    4250:	31 97       	sbiw	r30, 0x01	; 1
    4252:	ec 59       	subi	r30, 0x9C	; 156
    4254:	f4 40       	sbci	r31, 0x04	; 4
    4256:	34 97       	sbiw	r30, 0x04	; 4
    4258:	08 f0       	brcs	.+2      	; 0x425c <_Z17handleLinkBusMsgsv+0x510>
    425a:	aa c2       	rjmp	.+1364   	; 0x47b0 <_Z17handleLinkBusMsgsv+0xa64>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    425c:	8a e0       	ldi	r24, 0x0A	; 10
    425e:	95 e0       	ldi	r25, 0x05	; 5
    4260:	9f 93       	push	r25
    4262:	8f 93       	push	r24
    4264:	83 ec       	ldi	r24, 0xC3	; 195
    4266:	91 e0       	ldi	r25, 0x01	; 1
    4268:	9f 93       	push	r25
    426a:	8f 93       	push	r24
    426c:	bf 92       	push	r11
    426e:	af 92       	push	r10
    4270:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4274:	61 e0       	ldi	r22, 0x01	; 1
    4276:	c5 01       	movw	r24, r10
    4278:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
			}
			break;
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	7d c2       	rjmp	.+1274   	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    428a:	f6 01       	movw	r30, r12
    428c:	83 81       	ldd	r24, Z+3	; 0x03
    428e:	84 35       	cpi	r24, 0x54	; 84
    4290:	09 f0       	breq	.+2      	; 0x4294 <_Z17handleLinkBusMsgsv+0x548>
    4292:	83 c0       	rjmp	.+262    	; 0x439a <_Z17handleLinkBusMsgsv+0x64e>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    4294:	4c e0       	ldi	r20, 0x0C	; 12
    4296:	50 e0       	ldi	r21, 0x00	; 0
    4298:	b6 01       	movw	r22, r12
    429a:	69 5e       	subi	r22, 0xE9	; 233
    429c:	7f 4f       	sbci	r23, 0xFF	; 255
    429e:	c5 01       	movw	r24, r10
    42a0:	0e 94 01 34 	call	0x6802	; 0x6802 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    42a4:	d5 01       	movw	r26, r10
    42a6:	1c 96       	adiw	r26, 0x0c	; 12
    42a8:	1c 92       	st	X, r1

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    42aa:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_utc_offset>
    42ae:	41 95       	neg	r20
    42b0:	61 e5       	ldi	r22, 0x51	; 81
    42b2:	75 e0       	ldi	r23, 0x05	; 5
    42b4:	c5 01       	movw	r24, r10
    42b6:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z18validateTimeStringPcPma>
    42ba:	69 87       	std	Y+9, r22	; 0x09
    42bc:	7a 87       	std	Y+10, r23	; 0x0a
    42be:	8b 87       	std	Y+11, r24	; 0x0b
    42c0:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    42c2:	67 2b       	or	r22, r23
    42c4:	68 2b       	or	r22, r24
    42c6:	69 2b       	or	r22, r25
    42c8:	71 f1       	breq	.+92     	; 0x4326 <_Z17handleLinkBusMsgsv+0x5da>
					{
						#if INCLUDE_RV3028_SUPPORT
							RTC_set_epoch(t);
						#else
							RTC_set_datetime(g_tempStr);
    42ca:	c5 01       	movw	r24, r10
    42cc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z16RTC_set_datetimePc>
						#endif

						g_current_epoch = t;
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    42d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    42d8:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <g_current_epoch>
    42dc:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <g_current_epoch+0x1>
    42e0:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <g_current_epoch+0x2>
    42e4:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    42e8:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    42ec:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    42f0:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    42f4:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    42f8:	bf 93       	push	r27
    42fa:	af 93       	push	r26
    42fc:	9f 93       	push	r25
    42fe:	8f 93       	push	r24
    4300:	8b ec       	ldi	r24, 0xCB	; 203
    4302:	91 e0       	ldi	r25, 0x01	; 1
    4304:	9f 93       	push	r25
    4306:	8f 93       	push	r24
    4308:	bf 92       	push	r11
    430a:	af 92       	push	r10
    430c:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
    4310:	60 e0       	ldi	r22, 0x00	; 0
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	f8 94       	cli
    431e:	de bf       	out	0x3e, r29	; 62
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	cd bf       	out	0x3d, r28	; 61
    4324:	52 c2       	rjmp	.+1188   	; 0x47ca <_Z17handleLinkBusMsgsv+0xa7e>
					}
					else
					{
						g_current_epoch = RTC_get_epoch();
    4326:	0e 94 8b 03 	call	0x716	; 0x716 <_Z13RTC_get_epochv>
    432a:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <g_current_epoch>
    432e:	70 93 52 05 	sts	0x0552, r23	; 0x800552 <g_current_epoch+0x1>
    4332:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <g_current_epoch+0x2>
    4336:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <g_current_epoch+0x3>
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    433a:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <g_event_start_epoch>
    433e:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    4342:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    4346:	50 91 50 05 	lds	r21, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    434a:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <g_current_epoch>
    434e:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <g_current_epoch+0x1>
    4352:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_current_epoch+0x2>
    4356:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_current_epoch+0x3>
    435a:	e1 2c       	mov	r14, r1
    435c:	f1 2c       	mov	r15, r1
    435e:	0f e6       	ldi	r16, 0x6F	; 111
    4360:	11 e0       	ldi	r17, 0x01	; 1
    4362:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Epoch:%lu\n", g_current_epoch);
    4366:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    436a:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    436e:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    4372:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    4376:	bf 93       	push	r27
    4378:	af 93       	push	r26
    437a:	9f 93       	push	r25
    437c:	8f 93       	push	r24
    437e:	85 ed       	ldi	r24, 0xD5	; 213
    4380:	91 e0       	ldi	r25, 0x01	; 1
    4382:	9f 93       	push	r25
    4384:	8f 93       	push	r24
    4386:	bf 92       	push	r11
    4388:	af 92       	push	r10
    438a:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	f8 94       	cli
    4392:	de bf       	out	0x3e, r29	; 62
    4394:	0f be       	out	0x3f, r0	; 63
    4396:	cd bf       	out	0x3d, r28	; 61
    4398:	18 c2       	rjmp	.+1072   	; 0x47ca <_Z17handleLinkBusMsgsv+0xa7e>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    439a:	83 35       	cpi	r24, 0x53	; 83
    439c:	09 f0       	breq	.+2      	; 0x43a0 <_Z17handleLinkBusMsgsv+0x654>
    439e:	96 c0       	rjmp	.+300    	; 0x44cc <_Z17handleLinkBusMsgsv+0x780>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    43a0:	b6 01       	movw	r22, r12
    43a2:	69 5e       	subi	r22, 0xE9	; 233
    43a4:	7f 4f       	sbci	r23, 0xFF	; 255
    43a6:	c5 01       	movw	r24, r10
    43a8:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    43ac:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_utc_offset>
    43b0:	41 95       	neg	r20
    43b2:	6d e4       	ldi	r22, 0x4D	; 77
    43b4:	75 e0       	ldi	r23, 0x05	; 5
    43b6:	c5 01       	movw	r24, r10
    43b8:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z18validateTimeStringPcPma>

					if(s)
    43bc:	61 15       	cp	r22, r1
    43be:	71 05       	cpc	r23, r1
    43c0:	81 05       	cpc	r24, r1
    43c2:	91 05       	cpc	r25, r1
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <_Z17handleLinkBusMsgsv+0x67c>
    43c6:	68 c0       	rjmp	.+208    	; 0x4498 <_Z17handleLinkBusMsgsv+0x74c>
					{
						g_event_start_epoch = s;
    43c8:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <g_event_start_epoch>
    43cc:	70 93 4e 05 	sts	0x054E, r23	; 0x80054e <g_event_start_epoch+0x1>
    43d0:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_event_start_epoch+0x2>
    43d4:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    43d8:	4d e4       	ldi	r20, 0x4D	; 77
    43da:	55 e0       	ldi	r21, 0x05	; 5
    43dc:	64 e1       	ldi	r22, 0x14	; 20
    43de:	84 e6       	ldi	r24, 0x64	; 100
    43e0:	95 e0       	ldi	r25, 0x05	; 5
    43e2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    43e6:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    43ea:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    43ee:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    43f2:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    43f6:	8d 83       	std	Y+5, r24	; 0x05
    43f8:	9e 83       	std	Y+6, r25	; 0x06
    43fa:	af 83       	std	Y+7, r26	; 0x07
    43fc:	b8 87       	std	Y+8, r27	; 0x08
    43fe:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    4402:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    4406:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    440a:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    440e:	80 58       	subi	r24, 0x80	; 128
    4410:	9e 4a       	sbci	r25, 0xAE	; 174
    4412:	ae 4f       	sbci	r26, 0xFE	; 254
    4414:	bf 4f       	sbci	r27, 0xFF	; 255
    4416:	89 83       	std	Y+1, r24	; 0x01
    4418:	9a 83       	std	Y+2, r25	; 0x02
    441a:	ab 83       	std	Y+3, r26	; 0x03
    441c:	bc 83       	std	Y+4, r27	; 0x04
    441e:	4d 81       	ldd	r20, Y+5	; 0x05
    4420:	5e 81       	ldd	r21, Y+6	; 0x06
    4422:	6f 81       	ldd	r22, Y+7	; 0x07
    4424:	78 85       	ldd	r23, Y+8	; 0x08
    4426:	48 17       	cp	r20, r24
    4428:	59 07       	cpc	r21, r25
    442a:	6a 07       	cpc	r22, r26
    442c:	7b 07       	cpc	r23, r27
    442e:	28 f4       	brcc	.+10     	; 0x443a <_Z17handleLinkBusMsgsv+0x6ee>
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	ab 81       	ldd	r26, Y+3	; 0x03
    4436:	bc 81       	ldd	r27, Y+4	; 0x04
    4438:	04 c0       	rjmp	.+8      	; 0x4442 <_Z17handleLinkBusMsgsv+0x6f6>
    443a:	8d 81       	ldd	r24, Y+5	; 0x05
    443c:	9e 81       	ldd	r25, Y+6	; 0x06
    443e:	af 81       	ldd	r26, Y+7	; 0x07
    4440:	b8 85       	ldd	r27, Y+8	; 0x08
    4442:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <g_event_finish_epoch>
    4446:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <g_event_finish_epoch+0x1>
    444a:	a0 93 4b 05 	sts	0x054B, r26	; 0x80054b <g_event_finish_epoch+0x2>
    444e:	b0 93 4c 05 	sts	0x054C, r27	; 0x80054c <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4452:	49 e4       	ldi	r20, 0x49	; 73
    4454:	55 e0       	ldi	r21, 0x05	; 5
    4456:	65 e1       	ldi	r22, 0x15	; 21
    4458:	84 e6       	ldi	r24, 0x64	; 100
    445a:	95 e0       	ldi	r25, 0x05	; 5
    445c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    4460:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    4464:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    4468:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    446c:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    4470:	bf 93       	push	r27
    4472:	af 93       	push	r26
    4474:	9f 93       	push	r25
    4476:	8f 93       	push	r24
    4478:	80 ee       	ldi	r24, 0xE0	; 224
    447a:	91 e0       	ldi	r25, 0x01	; 1
    447c:	9f 93       	push	r25
    447e:	8f 93       	push	r24
    4480:	bf 92       	push	r11
    4482:	af 92       	push	r10
    4484:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
						startEventUsingRTC();
    4488:	0e 94 af 1c 	call	0x395e	; 0x395e <_Z18startEventUsingRTCv>
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	99 c1       	rjmp	.+818    	; 0x47ca <_Z17handleLinkBusMsgsv+0xa7e>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    4498:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <g_event_start_epoch>
    449c:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    44a0:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    44a4:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    44a8:	bf 93       	push	r27
    44aa:	af 93       	push	r26
    44ac:	9f 93       	push	r25
    44ae:	8f 93       	push	r24
    44b0:	80 ee       	ldi	r24, 0xE0	; 224
    44b2:	91 e0       	ldi	r25, 0x01	; 1
    44b4:	9f 93       	push	r25
    44b6:	8f 93       	push	r24
    44b8:	bf 92       	push	r11
    44ba:	af 92       	push	r10
    44bc:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	7f c1       	rjmp	.+766    	; 0x47ca <_Z17handleLinkBusMsgsv+0xa7e>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    44cc:	86 34       	cpi	r24, 0x46	; 70
    44ce:	09 f0       	breq	.+2      	; 0x44d2 <_Z17handleLinkBusMsgsv+0x786>
    44d0:	5c c0       	rjmp	.+184    	; 0x458a <_Z17handleLinkBusMsgsv+0x83e>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    44d2:	b6 01       	movw	r22, r12
    44d4:	69 5e       	subi	r22, 0xE9	; 233
    44d6:	7f 4f       	sbci	r23, 0xFF	; 255
    44d8:	c5 01       	movw	r24, r10
    44da:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    44de:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_utc_offset>
    44e2:	41 95       	neg	r20
    44e4:	69 e4       	ldi	r22, 0x49	; 73
    44e6:	75 e0       	ldi	r23, 0x05	; 5
    44e8:	c5 01       	movw	r24, r10
    44ea:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z18validateTimeStringPcPma>

					if(f)
    44ee:	61 15       	cp	r22, r1
    44f0:	71 05       	cpc	r23, r1
    44f2:	81 05       	cpc	r24, r1
    44f4:	91 05       	cpc	r25, r1
    44f6:	79 f1       	breq	.+94     	; 0x4556 <_Z17handleLinkBusMsgsv+0x80a>
					{
						g_event_finish_epoch = f;
    44f8:	60 93 49 05 	sts	0x0549, r22	; 0x800549 <g_event_finish_epoch>
    44fc:	70 93 4a 05 	sts	0x054A, r23	; 0x80054a <g_event_finish_epoch+0x1>
    4500:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <g_event_finish_epoch+0x2>
    4504:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4508:	49 e4       	ldi	r20, 0x49	; 73
    450a:	55 e0       	ldi	r21, 0x05	; 5
    450c:	65 e1       	ldi	r22, 0x15	; 21
    450e:	84 e6       	ldi	r24, 0x64	; 100
    4510:	95 e0       	ldi	r25, 0x05	; 5
    4512:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    4516:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    451a:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    451e:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    4522:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    4526:	bf 93       	push	r27
    4528:	af 93       	push	r26
    452a:	9f 93       	push	r25
    452c:	8f 93       	push	r24
    452e:	8b ee       	ldi	r24, 0xEB	; 235
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	9f 93       	push	r25
    4534:	8f 93       	push	r24
    4536:	bf 92       	push	r11
    4538:	af 92       	push	r10
    453a:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
						lb_send_string(g_tempStr, TRUE);
    453e:	61 e0       	ldi	r22, 0x01	; 1
    4540:	c5 01       	movw	r24, r10
    4542:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
						startEventUsingRTC();
    4546:	0e 94 af 1c 	call	0x395e	; 0x395e <_Z18startEventUsingRTCv>
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	cd bf       	out	0x3d, r28	; 61
    4554:	17 c1       	rjmp	.+558    	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    4556:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <g_event_finish_epoch>
    455a:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    455e:	a0 91 4b 05 	lds	r26, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    4562:	b0 91 4c 05 	lds	r27, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    4566:	bf 93       	push	r27
    4568:	af 93       	push	r26
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	8b ee       	ldi	r24, 0xEB	; 235
    4570:	91 e0       	ldi	r25, 0x01	; 1
    4572:	9f 93       	push	r25
    4574:	8f 93       	push	r24
    4576:	bf 92       	push	r11
    4578:	af 92       	push	r10
    457a:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	20 c1       	rjmp	.+576    	; 0x47ca <_Z17handleLinkBusMsgsv+0xa7e>
						doprint = true;
					}
				}
				else if(lb_buff->fields[FIELD1][0] == '*')  /* Sync seconds to zero */
    458a:	8a 32       	cpi	r24, 0x2A	; 42
    458c:	19 f4       	brne	.+6      	; 0x4594 <_Z17handleLinkBusMsgsv+0x848>
				{
					ds3231_sync2nearestMinute();
    458e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_Z25ds3231_sync2nearestMinutev>
    4592:	f8 c0       	rjmp	.+496    	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					doprint = true;
				}
#endif // #if INCLUDE_RV3028_SUPPORT
				else
				{
					ConfigurationState_t cfg = clockConfigurationCheck();
    4594:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z23clockConfigurationCheckv>

					if((cfg != WAITING_FOR_START) && (cfg != EVENT_IN_PROGRESS))
    4598:	8b 7f       	andi	r24, 0xFB	; 251
    459a:	81 30       	cpi	r24, 0x01	; 1
    459c:	19 f0       	breq	.+6      	; 0x45a4 <_Z17handleLinkBusMsgsv+0x858>
					{
						reportConfigErrors();
    459e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_Z18reportConfigErrorsv>
    45a2:	f0 c0       	rjmp	.+480    	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    45a4:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <g_event_start_epoch>
    45a8:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    45ac:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    45b0:	50 91 50 05 	lds	r21, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    45b4:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <g_current_epoch>
    45b8:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <g_current_epoch+0x1>
    45bc:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_current_epoch+0x2>
    45c0:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_current_epoch+0x3>
    45c4:	0f 2e       	mov	r0, r31
    45c6:	f2 e6       	ldi	r31, 0x62	; 98
    45c8:	ef 2e       	mov	r14, r31
    45ca:	f1 e0       	ldi	r31, 0x01	; 1
    45cc:	ff 2e       	mov	r15, r31
    45ce:	f0 2d       	mov	r31, r0
    45d0:	0f e6       	ldi	r16, 0x6F	; 111
    45d2:	11 e0       	ldi	r17, 0x01	; 1
    45d4:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    45d8:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <g_event_finish_epoch>
    45dc:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    45e0:	40 91 4b 05 	lds	r20, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    45e4:	50 91 4c 05 	lds	r21, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    45e8:	60 91 4d 05 	lds	r22, 0x054D	; 0x80054d <g_event_start_epoch>
    45ec:	70 91 4e 05 	lds	r23, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    45f0:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    45f4:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    45f8:	e1 2c       	mov	r14, r1
    45fa:	f1 2c       	mov	r15, r1
    45fc:	0c e8       	ldi	r16, 0x8C	; 140
    45fe:	11 e0       	ldi	r17, 0x01	; 1
    4600:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    4604:	40 91 4d 05 	lds	r20, 0x054D	; 0x80054d <g_event_start_epoch>
    4608:	50 91 4e 05 	lds	r21, 0x054E	; 0x80054e <g_event_start_epoch+0x1>
    460c:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <g_event_start_epoch+0x2>
    4610:	70 91 50 05 	lds	r23, 0x0550	; 0x800550 <g_event_start_epoch+0x3>
    4614:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <g_current_epoch>
    4618:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <g_current_epoch+0x1>
    461c:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <g_current_epoch+0x2>
    4620:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <g_current_epoch+0x3>
    4624:	48 17       	cp	r20, r24
    4626:	59 07       	cpc	r21, r25
    4628:	6a 07       	cpc	r22, r26
    462a:	7b 07       	cpc	r23, r27
    462c:	08 f0       	brcs	.+2      	; 0x4630 <_Z17handleLinkBusMsgsv+0x8e4>
    462e:	aa c0       	rjmp	.+340    	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    4630:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <g_event_finish_epoch>
    4634:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <g_event_finish_epoch+0x1>
    4638:	40 91 4b 05 	lds	r20, 0x054B	; 0x80054b <g_event_finish_epoch+0x2>
    463c:	50 91 4c 05 	lds	r21, 0x054C	; 0x80054c <g_event_finish_epoch+0x3>
    4640:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <g_current_epoch>
    4644:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <g_current_epoch+0x1>
    4648:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <g_current_epoch+0x2>
    464c:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <g_current_epoch+0x3>
    4650:	0b e7       	ldi	r16, 0x7B	; 123
    4652:	11 e0       	ldi	r17, 0x01	; 1
    4654:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_Z14reportTimeTillmmPKcS0_>
    4658:	95 c0       	rjmp	.+298    	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
			}
			break;

			case MESSAGE_UTIL:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    465a:	d6 01       	movw	r26, r12
    465c:	13 96       	adiw	r26, 0x03	; 3
    465e:	8c 91       	ld	r24, X
    4660:	13 97       	sbiw	r26, 0x03	; 3
    4662:	83 34       	cpi	r24, 0x43	; 67
    4664:	91 f5       	brne	.+100    	; 0x46ca <_Z17handleLinkBusMsgsv+0x97e>
				{
					if(lb_buff->fields[FIELD2][0])
    4666:	57 96       	adiw	r26, 0x17	; 23
    4668:	8c 91       	ld	r24, X
    466a:	88 23       	and	r24, r24
    466c:	a9 f0       	breq	.+42     	; 0x4698 <_Z17handleLinkBusMsgsv+0x94c>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    466e:	c6 01       	movw	r24, r12
    4670:	47 96       	adiw	r24, 0x17	; 23
    4672:	0e 94 a2 33 	call	0x6744	; 0x6744 <atoi>

						if((v > -2000) && (v < 2000))
    4676:	9c 01       	movw	r18, r24
    4678:	21 53       	subi	r18, 0x31	; 49
    467a:	38 4f       	sbci	r19, 0xF8	; 248
    467c:	2f 39       	cpi	r18, 0x9F	; 159
    467e:	3f 40       	sbci	r19, 0x0F	; 15
    4680:	58 f4       	brcc	.+22     	; 0x4698 <_Z17handleLinkBusMsgsv+0x94c>
						{
							g_atmega_temp_calibration = v;
    4682:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_atmega_temp_calibration+0x1>
    4686:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    468a:	4c e0       	ldi	r20, 0x0C	; 12
    468c:	51 e0       	ldi	r21, 0x01	; 1
    468e:	62 e1       	ldi	r22, 0x12	; 18
    4690:	84 e6       	ldi	r24, 0x64	; 100
    4692:	95 e0       	ldi	r25, 0x05	; 5
    4694:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    4698:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_atmega_temp_calibration>
    469c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_atmega_temp_calibration+0x1>
    46a0:	9f 93       	push	r25
    46a2:	8f 93       	push	r24
    46a4:	87 ef       	ldi	r24, 0xF7	; 247
    46a6:	91 e0       	ldi	r25, 0x01	; 1
    46a8:	9f 93       	push	r25
    46aa:	8f 93       	push	r24
    46ac:	bf 92       	push	r11
    46ae:	af 92       	push	r10
    46b0:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
					lb_send_string(g_tempStr, TRUE);
    46b4:	61 e0       	ldi	r22, 0x01	; 1
    46b6:	c5 01       	movw	r24, r10
    46b8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    46bc:	0f 90       	pop	r0
    46be:	0f 90       	pop	r0
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f c0       	rjmp	.+30     	; 0x46e8 <_Z17handleLinkBusMsgsv+0x99c>
				}
#if !INIT_EEPROM_ONLY && !SUPPORT_ONLY_80M
					else if(lb_buff->fields[FIELD1][0] == 'Z')
    46ca:	8a 35       	cpi	r24, 0x5A	; 90
    46cc:	69 f4       	brne	.+26     	; 0x46e8 <_Z17handleLinkBusMsgsv+0x99c>
					{
						cli();
    46ce:	f8 94       	cli
						g_AM_enabled = FALSE;
    46d0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_AM_enabled>
						TIMSK0 |= (1 << OCIE0A);    /* Timer/Counter0 Output Compare Match A Interrupt Enable (CW Tone Output for FM) */
    46d4:	ee e6       	ldi	r30, 0x6E	; 110
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	80 81       	ld	r24, Z
    46da:	82 60       	ori	r24, 0x02	; 2
    46dc:	80 83       	st	Z, r24
						setAtten(0);
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	0e 94 13 08 	call	0x1026	; 0x1026 <setAtten>
						sei();
    46e6:	78 94       	sei
					}
#endif /* INIT_EEPROM_ONLY */

				sprintf(g_tempStr, "T=%dC\n", g_temperature);
    46e8:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <g_temperature>
    46ec:	28 2f       	mov	r18, r24
    46ee:	08 2e       	mov	r0, r24
    46f0:	00 0c       	add	r0, r0
    46f2:	33 0b       	sbc	r19, r19
    46f4:	3f 93       	push	r19
    46f6:	8f 93       	push	r24
    46f8:	9f 92       	push	r9
    46fa:	8f 92       	push	r8
    46fc:	bf 92       	push	r11
    46fe:	af 92       	push	r10
    4700:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4704:	61 e0       	ldi	r22, 0x01	; 1
    4706:	c5 01       	movw	r24, r10
    4708:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>

				sprintf(g_tempStr, "V=%d.%02dV\n", g_voltage / 100, g_voltage % 100);
    470c:	40 91 07 05 	lds	r20, 0x0507	; 0x800507 <g_voltage>
    4710:	50 91 08 05 	lds	r21, 0x0508	; 0x800508 <g_voltage+0x1>
    4714:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <g_voltage>
    4718:	f0 91 08 05 	lds	r31, 0x0508	; 0x800508 <g_voltage+0x1>
    471c:	9a 01       	movw	r18, r20
    471e:	36 95       	lsr	r19
    4720:	27 95       	ror	r18
    4722:	36 95       	lsr	r19
    4724:	27 95       	ror	r18
    4726:	ab e7       	ldi	r26, 0x7B	; 123
    4728:	b4 e1       	ldi	r27, 0x14	; 20
    472a:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    472e:	96 95       	lsr	r25
    4730:	87 95       	ror	r24
    4732:	64 e6       	ldi	r22, 0x64	; 100
    4734:	68 9f       	mul	r22, r24
    4736:	90 01       	movw	r18, r0
    4738:	69 9f       	mul	r22, r25
    473a:	30 0d       	add	r19, r0
    473c:	11 24       	eor	r1, r1
    473e:	42 1b       	sub	r20, r18
    4740:	53 0b       	sbc	r21, r19
    4742:	5f 93       	push	r21
    4744:	4f 93       	push	r20
    4746:	9f 01       	movw	r18, r30
    4748:	36 95       	lsr	r19
    474a:	27 95       	ror	r18
    474c:	36 95       	lsr	r19
    474e:	27 95       	ror	r18
    4750:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    4754:	96 95       	lsr	r25
    4756:	87 95       	ror	r24
    4758:	9f 93       	push	r25
    475a:	8f 93       	push	r24
    475c:	3f 92       	push	r3
    475e:	2f 92       	push	r2
    4760:	bf 92       	push	r11
    4762:	af 92       	push	r10
    4764:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
				lb_send_string(g_tempStr, TRUE);
    4768:	61 e0       	ldi	r22, 0x01	; 1
    476a:	c5 01       	movw	r24, r10
    476c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
			}
			break;
    4770:	0f b6       	in	r0, 0x3f	; 63
    4772:	f8 94       	cli
    4774:	de bf       	out	0x3e, r29	; 62
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	cd bf       	out	0x3d, r28	; 61
    477a:	04 c0       	rjmp	.+8      	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>

			default:
			{
				ee_mgr.send_Help();
    477c:	84 e6       	ldi	r24, 0x64	; 100
    477e:	95 e0       	ldi	r25, 0x05	; 5
    4780:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    4784:	d6 01       	movw	r26, r12
    4786:	12 96       	adiw	r26, 0x02	; 2
    4788:	1c 92       	st	X, r1
    478a:	1e 92       	st	-X, r1
    478c:	11 97       	sbiw	r26, 0x01	; 1
		lb_send_NewPrompt();
    478e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <lb_send_NewPrompt>

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    4792:	8c e2       	ldi	r24, 0x2C	; 44
    4794:	91 e0       	ldi	r25, 0x01	; 1
    4796:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_LED_timeout_countdown+0x1>
    479a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_LED_timeout_countdown>
		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    479e:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>
 * void __attribute__((optimize("O3"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;

	while((lb_buff = nextFullRxBuffer()))
    47a2:	0c cb       	rjmp	.-2536   	; 0x3dbc <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	ae cb       	rjmp	.-2212   	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
					}
					else if(c == 'F')
					{
						c = FOXORING;
    47a8:	86 e0       	ldi	r24, 0x06	; 6
    47aa:	ac cb       	rjmp	.-2216   	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
						{
							c = x;
						}
						else
						{
							c = BEACON;
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	aa cb       	rjmp	.-2220   	; 0x3f04 <_Z17handleLinkBusMsgsv+0x1b8>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    47b0:	b5 01       	movw	r22, r10
    47b2:	8a e0       	ldi	r24, 0x0A	; 10
    47b4:	95 e0       	ldi	r25, 0x05	; 5
    47b6:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    47ba:	4a e0       	ldi	r20, 0x0A	; 10
    47bc:	55 e0       	ldi	r21, 0x05	; 5
    47be:	6e e0       	ldi	r22, 0x0E	; 14
    47c0:	84 e6       	ldi	r24, 0x64	; 100
    47c2:	95 e0       	ldi	r25, 0x05	; 5
    47c4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    47c8:	49 cd       	rjmp	.-1390   	; 0x425c <_Z17handleLinkBusMsgsv+0x510>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    47ca:	61 e0       	ldi	r22, 0x01	; 1
    47cc:	c5 01       	movw	r24, r10
    47ce:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    47d2:	d8 cf       	rjmp	.-80     	; 0x4784 <_Z17handleLinkBusMsgsv+0xa38>
		lb_send_NewPrompt();

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
	}
}
    47d4:	2c 96       	adiw	r28, 0x0c	; 12
    47d6:	0f b6       	in	r0, 0x3f	; 63
    47d8:	f8 94       	cli
    47da:	de bf       	out	0x3e, r29	; 62
    47dc:	0f be       	out	0x3f, r0	; 63
    47de:	cd bf       	out	0x3d, r28	; 61
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	ff 90       	pop	r15
    47ea:	ef 90       	pop	r14
    47ec:	df 90       	pop	r13
    47ee:	cf 90       	pop	r12
    47f0:	bf 90       	pop	r11
    47f2:	af 90       	pop	r10
    47f4:	9f 90       	pop	r9
    47f6:	8f 90       	pop	r8
    47f8:	7f 90       	pop	r7
    47fa:	6f 90       	pop	r6
    47fc:	5f 90       	pop	r5
    47fe:	4f 90       	pop	r4
    4800:	3f 90       	pop	r3
    4802:	2f 90       	pop	r2
    4804:	08 95       	ret

00004806 <_Z11value2Morsec>:

char value2Morse(char value)
{
	char morse = ' ';

	if(value == 0x7F)
    4806:	8f 37       	cpi	r24, 0x7F	; 127
    4808:	91 f0       	breq	.+36     	; 0x482e <_Z11value2Morsec+0x28>
	{
		return( 39);    /* Return the maximum value that will be accepted + 1 */

	}

	if((value >= 1) && (value <= 26))
    480a:	9f ef       	ldi	r25, 0xFF	; 255
    480c:	98 0f       	add	r25, r24
    480e:	9a 31       	cpi	r25, 0x1A	; 26
    4810:	10 f4       	brcc	.+4      	; 0x4816 <_Z11value2Morsec+0x10>
	{
		morse = 'A' + value - 1;
    4812:	80 5c       	subi	r24, 0xC0	; 192
    4814:	08 95       	ret
	}
	else if((value >= 29) && (value <= 38))
    4816:	93 ee       	ldi	r25, 0xE3	; 227
    4818:	98 0f       	add	r25, r24
    481a:	9a 30       	cpi	r25, 0x0A	; 10
    481c:	10 f4       	brcc	.+4      	; 0x4822 <_Z11value2Morsec+0x1c>
	{
		morse = '0' + value - 29;
    481e:	8d 5e       	subi	r24, 0xED	; 237
    4820:	08 95       	ret
	}
	else if(value == 27)
    4822:	8b 31       	cpi	r24, 0x1B	; 27
    4824:	31 f0       	breq	.+12     	; 0x4832 <_Z11value2Morsec+0x2c>
	{
		morse = '<';
	}
	else if(value == 28)
    4826:	8c 31       	cpi	r24, 0x1C	; 28
    4828:	31 f4       	brne	.+12     	; 0x4836 <_Z11value2Morsec+0x30>
	{
		morse = '/';
    482a:	8f e2       	ldi	r24, 0x2F	; 47
    482c:	08 95       	ret
{
	char morse = ' ';

	if(value == 0x7F)
	{
		return( 39);    /* Return the maximum value that will be accepted + 1 */
    482e:	87 e2       	ldi	r24, 0x27	; 39
    4830:	08 95       	ret
	{
		morse = '0' + value - 29;
	}
	else if(value == 27)
	{
		morse = '<';
    4832:	8c e3       	ldi	r24, 0x3C	; 60
    4834:	08 95       	ret
}


char value2Morse(char value)
{
	char morse = ' ';
    4836:	80 e2       	ldi	r24, 0x20	; 32
	{
		morse = '/';
	}

	return( morse);
}
    4838:	08 95       	ret

0000483a <_Z20processDTMFdetection10DTMF_key_t>:
 *  *B nn  - Address the following command to only a specific fox type
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	BOOL processDTMFdetection(DTMF_key_t key)
	{
    483a:	cf 92       	push	r12
    483c:	df 92       	push	r13
    483e:	ef 92       	push	r14
    4840:	ff 92       	push	r15
    4842:	0f 93       	push	r16
    4844:	1f 93       	push	r17
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	1f 92       	push	r1
    484c:	cd b7       	in	r28, 0x3d	; 61
    484e:	de b7       	in	r29, 0x3e	; 62
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;

		g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    4850:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>

		if(key == 'D')
    4854:	84 34       	cpi	r24, 0x44	; 68
    4856:	31 f4       	brne	.+12     	; 0x4864 <_Z20processDTMFdetection10DTMF_key_t+0x2a>
		{
			g_DTMF_unlocked = FALSE;
    4858:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    485c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
			return(entryError);
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	53 c4       	rjmp	.+2214   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
		}

		if(key == NO_KEY)
    4864:	81 11       	cpse	r24, r1
    4866:	2b c0       	rjmp	.+86     	; 0x48be <_Z20processDTMFdetection10DTMF_key_t+0x84>
		{
			if(!g_DTMF_sentence_in_progress_ticks)
    4868:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    486c:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    4870:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    4874:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    4878:	89 2b       	or	r24, r25
    487a:	8a 2b       	or	r24, r26
    487c:	8b 2b       	or	r24, r27
    487e:	89 f4       	brne	.+34     	; 0x48a2 <_Z20processDTMFdetection10DTMF_key_t+0x68>
			{
				if((last_in_progress_ticks) && (state != STATE_SHUTDOWN))
    4880:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks>
    4884:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks+0x1>
    4888:	89 2b       	or	r24, r25
    488a:	39 f0       	breq	.+14     	; 0x489a <_Z20processDTMFdetection10DTMF_key_t+0x60>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4892:	91 11       	cpse	r25, r1
    4894:	03 c0       	rjmp	.+6      	; 0x489c <_Z20processDTMFdetection10DTMF_key_t+0x62>
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	01 c0       	rjmp	.+2      	; 0x489c <_Z20processDTMFdetection10DTMF_key_t+0x62>
    489a:	80 e0       	ldi	r24, 0x00	; 0
				if((last_in_progress_ticks) && (state != STATE_SHUTDOWN))
				{
					entryError = TRUE;
				}

				state = STATE_SHUTDOWN;
    489c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    48a0:	01 c0       	rjmp	.+2      	; 0x48a4 <_Z20processDTMFdetection10DTMF_key_t+0x6a>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    48a2:	80 e0       	ldi	r24, 0x00	; 0
				}

				state = STATE_SHUTDOWN;
			}

			last_in_progress_ticks = g_DTMF_sentence_in_progress_ticks;
    48a4:	40 91 c5 04 	lds	r20, 0x04C5	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    48a8:	50 91 c6 04 	lds	r21, 0x04C6	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    48ac:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    48b0:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    48b4:	50 93 36 04 	sts	0x0436, r21	; 0x800436 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks+0x1>
    48b8:	40 93 35 04 	sts	0x0435, r20	; 0x800435 <_ZZ20processDTMFdetection10DTMF_key_tE22last_in_progress_ticks>

			return(entryError);
    48bc:	26 c4       	rjmp	.+2124   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
		}

		g_LED_timeout_countdown = LED_TIMEOUT_SECONDS;
    48be:	2c e2       	ldi	r18, 0x2C	; 44
    48c0:	31 e0       	ldi	r19, 0x01	; 1
    48c2:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <g_LED_timeout_countdown+0x1>
    48c6:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <g_LED_timeout_countdown>

		if(!g_DTMF_unlocked)
    48ca:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <g_DTMF_unlocked>
    48ce:	91 11       	cpse	r25, r1
    48d0:	04 c0       	rjmp	.+8      	; 0x48da <_Z20processDTMFdetection10DTMF_key_t+0xa0>
		{
			state = STATE_CHECK_PASSWORD;
    48d2:	92 e1       	ldi	r25, 0x12	; 18
    48d4:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    48d8:	63 c3       	rjmp	.+1734   	; 0x4fa0 <_Z20processDTMFdetection10DTMF_key_t+0x766>
		}
		else
		{
			if(key == '*')
    48da:	8a 32       	cpi	r24, 0x2A	; 42
    48dc:	89 f4       	brne	.+34     	; 0x4900 <_Z20processDTMFdetection10DTMF_key_t+0xc6>
			{
				state = STATE_SENTENCE_START;
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_10;
    48e4:	88 ec       	ldi	r24, 0xC8	; 200
    48e6:	97 e3       	ldi	r25, 0x37	; 55
    48e8:	a0 e0       	ldi	r26, 0x00	; 0
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    48f0:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    48f4:	a0 93 c7 04 	sts	0x04C7, r26	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    48f8:	b0 93 c8 04 	sts	0x04C8, r27	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
				return(entryError);
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	05 c4       	rjmp	.+2058   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    4900:	98 2f       	mov	r25, r24
			}

			if(key == '#')
    4902:	83 32       	cpi	r24, 0x23	; 35
    4904:	a9 f4       	brne	.+42     	; 0x4930 <_Z20processDTMFdetection10DTMF_key_t+0xf6>
			{
				g_DTMF_sentence_in_progress_ticks = 0;
    4906:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    490a:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    490e:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    4912:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_20;
			}
		}

		switch(state)
    4916:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    491a:	4e 2f       	mov	r20, r30
    491c:	50 e0       	ldi	r21, 0x00	; 0
    491e:	44 31       	cpi	r20, 0x14	; 20
    4920:	51 05       	cpc	r21, r1
    4922:	08 f0       	brcs	.+2      	; 0x4926 <_Z20processDTMFdetection10DTMF_key_t+0xec>
    4924:	bc c3       	rjmp	.+1912   	; 0x509e <_Z20processDTMFdetection10DTMF_key_t+0x864>
    4926:	fa 01       	movw	r30, r20
    4928:	ed 57       	subi	r30, 0x7D	; 125
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>

			if(key == '#')
			{
				g_DTMF_sentence_in_progress_ticks = 0;
			}
			else if(state == STATE_RECEIVING_SET_CLOCK)
    4930:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4934:	ed 30       	cpi	r30, 0x0D	; 13
    4936:	69 f4       	brne	.+26     	; 0x4952 <_Z20processDTMFdetection10DTMF_key_t+0x118>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_60;
    4938:	40 eb       	ldi	r20, 0xB0	; 176
    493a:	5e e4       	ldi	r21, 0x4E	; 78
    493c:	61 e0       	ldi	r22, 0x01	; 1
    493e:	70 e0       	ldi	r23, 0x00	; 0
    4940:	40 93 c5 04 	sts	0x04C5, r20	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    4944:	50 93 c6 04 	sts	0x04C6, r21	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    4948:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    494c:	70 93 c8 04 	sts	0x04C8, r23	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    4950:	2c c2       	rjmp	.+1112   	; 0x4daa <_Z20processDTMFdetection10DTMF_key_t+0x570>
			}
			else if(state != STATE_SHUTDOWN)
    4952:	ee 23       	and	r30, r30
    4954:	b9 f0       	breq	.+46     	; 0x4984 <_Z20processDTMFdetection10DTMF_key_t+0x14a>
			{
				g_DTMF_sentence_in_progress_ticks = TIMER2_SECONDS_20;
    4956:	40 e9       	ldi	r20, 0x90	; 144
    4958:	5f e6       	ldi	r21, 0x6F	; 111
    495a:	60 e0       	ldi	r22, 0x00	; 0
    495c:	70 e0       	ldi	r23, 0x00	; 0
    495e:	40 93 c5 04 	sts	0x04C5, r20	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    4962:	50 93 c6 04 	sts	0x04C6, r21	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    4966:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    496a:	70 93 c8 04 	sts	0x04C8, r23	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
			}
		}

		switch(state)
    496e:	4e 2f       	mov	r20, r30
    4970:	50 e0       	ldi	r21, 0x00	; 0
    4972:	44 31       	cpi	r20, 0x14	; 20
    4974:	51 05       	cpc	r21, r1
    4976:	08 f0       	brcs	.+2      	; 0x497a <_Z20processDTMFdetection10DTMF_key_t+0x140>
    4978:	94 c3       	rjmp	.+1832   	; 0x50a2 <_Z20processDTMFdetection10DTMF_key_t+0x868>
    497a:	fa 01       	movw	r30, r20
    497c:	e9 56       	subi	r30, 0x69	; 105
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>
		{
			case STATE_SHUTDOWN:
			{
				entryError = TRUE;
    4984:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
    4986:	c1 c3       	rjmp	.+1922   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    4988:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    498c:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
				value = 0;
    4990:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4994:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
				digits = 0;
    4998:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    499c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>

				if(g_DTMF_unlocked)
    49a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_DTMF_unlocked>
    49a4:	88 23       	and	r24, r24
    49a6:	09 f4       	brne	.+2      	; 0x49aa <_Z20processDTMFdetection10DTMF_key_t+0x170>
    49a8:	7e c3       	rjmp	.+1788   	; 0x50a6 <_Z20processDTMFdetection10DTMF_key_t+0x86c>
				{
					if(key == 'A')
    49aa:	91 34       	cpi	r25, 0x41	; 65
    49ac:	29 f4       	brne	.+10     	; 0x49b8 <_Z20processDTMFdetection10DTMF_key_t+0x17e>
					{
						state = STATE_A;
    49ae:	82 e0       	ldi	r24, 0x02	; 2
    49b0:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	a9 c3       	rjmp	.+1874   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				{
					if(key == 'A')
					{
						state = STATE_A;
					}
					else if(key == 'B')
    49b8:	92 34       	cpi	r25, 0x42	; 66
    49ba:	29 f4       	brne	.+10     	; 0x49c6 <_Z20processDTMFdetection10DTMF_key_t+0x18c>
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
    49bc:	83 e1       	ldi	r24, 0x13	; 19
    49be:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	a2 c3       	rjmp	.+1860   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					}
					else if(key == 'B')
					{
						state = STATE_RECEIVING_FOXES_TO_ADDRESS;
					}
					else if(key == 'C')
    49c6:	93 34       	cpi	r25, 0x43	; 67
    49c8:	29 f4       	brne	.+10     	; 0x49d4 <_Z20processDTMFdetection10DTMF_key_t+0x19a>
					{
						state = STATE_C;
    49ca:	87 e0       	ldi	r24, 0x07	; 7
    49cc:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	9b c3       	rjmp	.+1846   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
						state = STATE_C;
					}
					else
					{
						entryError = TRUE;
						g_DTMF_sentence_in_progress_ticks = 0;
    49d4:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    49d8:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    49dc:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    49e0:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
						state = STATE_SHUTDOWN;
    49e4:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					{
						state = STATE_C;
					}
					else
					{
						entryError = TRUE;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	8f c3       	rjmp	.+1822   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_A:
			{
				if(key == '0')
    49ec:	80 33       	cpi	r24, 0x30	; 48
    49ee:	29 f4       	brne	.+10     	; 0x49fa <_Z20processDTMFdetection10DTMF_key_t+0x1c0>
				{
					state = STATE_PAUSE_TRANSMISSIONS;
    49f0:	83 e0       	ldi	r24, 0x03	; 3
    49f2:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	88 c3       	rjmp	.+1808   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			{
				if(key == '0')
				{
					state = STATE_PAUSE_TRANSMISSIONS;
				}
				else if(key == '1')
    49fa:	81 33       	cpi	r24, 0x31	; 49
    49fc:	29 f4       	brne	.+10     	; 0x4a08 <_Z20processDTMFdetection10DTMF_key_t+0x1ce>
				{
					state = STATE_START_TRANSMISSIONS;
    49fe:	84 e0       	ldi	r24, 0x04	; 4
    4a00:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	81 c3       	rjmp	.+1794   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if(key == '1')
				{
					state = STATE_START_TRANSMISSIONS;
				}
				else if(key == '2')
    4a08:	82 33       	cpi	r24, 0x32	; 50
    4a0a:	29 f4       	brne	.+10     	; 0x4a16 <_Z20processDTMFdetection10DTMF_key_t+0x1dc>
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
    4a0c:	85 e0       	ldi	r24, 0x05	; 5
    4a0e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	7a c3       	rjmp	.+1780   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if(key == '2')
				{
					state = STATE_START_TRANSMISSIONS_WITH_RTC;
				}
				else if(key == '3')
    4a16:	83 33       	cpi	r24, 0x33	; 51
    4a18:	29 f4       	brne	.+10     	; 0x4a24 <_Z20processDTMFdetection10DTMF_key_t+0x1ea>
				{
					state = STATE_START_TRANSMITTING_NOW;
    4a1a:	86 e0       	ldi	r24, 0x06	; 6
    4a1c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	73 c3       	rjmp	.+1766   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if(key == '3')
				{
					state = STATE_START_TRANSMITTING_NOW;
				}
				else if((key == '8') && setPasswordEnabled)
    4a24:	88 33       	cpi	r24, 0x38	; 56
    4a26:	49 f4       	brne	.+18     	; 0x4a3a <_Z20processDTMFdetection10DTMF_key_t+0x200>
    4a28:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <_ZZ20processDTMFdetection10DTMF_key_tE18setPasswordEnabled>
    4a2c:	88 23       	and	r24, r24
    4a2e:	29 f0       	breq	.+10     	; 0x4a3a <_Z20processDTMFdetection10DTMF_key_t+0x200>
				{
					state = STATE_SET_PASSWORD;
    4a30:	81 e1       	ldi	r24, 0x11	; 17
    4a32:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4a36:	80 e0       	ldi	r24, 0x00	; 0
				{
					state = STATE_START_TRANSMITTING_NOW;
				}
				else if((key == '8') && setPasswordEnabled)
				{
					state = STATE_SET_PASSWORD;
    4a38:	68 c3       	rjmp	.+1744   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else
				{
					entryError = TRUE;
					g_DTMF_sentence_in_progress_ticks = 0;
    4a3a:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    4a3e:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    4a42:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    4a46:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
					state = STATE_SHUTDOWN;
    4a4a:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
				{
					state = STATE_SET_PASSWORD;
				}
				else
				{
					entryError = TRUE;
    4a4e:	81 e0       	ldi	r24, 0x01	; 1
    4a50:	5c c3       	rjmp	.+1720   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_RECEIVING_FOXES_TO_ADDRESS:
			{
				if((key >= '0') && (key <= '9'))
    4a52:	80 ed       	ldi	r24, 0xD0	; 208
    4a54:	89 0f       	add	r24, r25
    4a56:	8a 30       	cpi	r24, 0x0A	; 10
    4a58:	08 f5       	brcc	.+66     	; 0x4a9c <_Z20processDTMFdetection10DTMF_key_t+0x262>
				{
					value *= 10;
					value += key - '0';
    4a5a:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4a5e:	30 91 32 04 	lds	r19, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4a62:	a9 01       	movw	r20, r18
    4a64:	44 0f       	add	r20, r20
    4a66:	55 1f       	adc	r21, r21
    4a68:	22 0f       	add	r18, r18
    4a6a:	33 1f       	adc	r19, r19
    4a6c:	22 0f       	add	r18, r18
    4a6e:	33 1f       	adc	r19, r19
    4a70:	22 0f       	add	r18, r18
    4a72:	33 1f       	adc	r19, r19
    4a74:	24 0f       	add	r18, r20
    4a76:	35 1f       	adc	r19, r21
    4a78:	89 2f       	mov	r24, r25
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	c0 97       	sbiw	r24, 0x30	; 48
    4a7e:	28 0f       	add	r18, r24
    4a80:	39 1f       	adc	r19, r25
    4a82:	30 93 32 04 	sts	0x0432, r19	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4a86:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
					digits++;
    4a8a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4a8e:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4a92:	01 96       	adiw	r24, 0x01	; 1
    4a94:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4a98:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
				}

				if(digits >= 2)
    4a9c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4aa0:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4aa4:	02 97       	sbiw	r24, 0x02	; 2
    4aa6:	0c f4       	brge	.+2      	; 0x4aaa <_Z20processDTMFdetection10DTMF_key_t+0x270>
    4aa8:	00 c3       	rjmp	.+1536   	; 0x50aa <_Z20processDTMFdetection10DTMF_key_t+0x870>
				{
					state = STATE_SHUTDOWN;
    4aaa:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					Fox_t holdFox = (Fox_t)value;

					if(holdFox == g_fox)
    4aae:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    4ab2:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4ab6:	98 13       	cpse	r25, r24
    4ab8:	fa c2       	rjmp	.+1524   	; 0x50ae <_Z20processDTMFdetection10DTMF_key_t+0x874>
					{
						state = STATE_SENTENCE_START;
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	23 c3       	rjmp	.+1606   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
				{
					stopEventNow(PROGRAMMATIC);
    4ac4:	82 e0       	ldi	r24, 0x02	; 2
    4ac6:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <_Z12stopEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    4aca:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	1c c3       	rjmp	.+1592   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    4ad2:	93 32       	cpi	r25, 0x23	; 35
    4ad4:	09 f0       	breq	.+2      	; 0x4ad8 <_Z20processDTMFdetection10DTMF_key_t+0x29e>
    4ad6:	ed c2       	rjmp	.+1498   	; 0x50b2 <_Z20processDTMFdetection10DTMF_key_t+0x878>
				{
					startEventNow(PROGRAMMATIC);
    4ad8:	82 e0       	ldi	r24, 0x02	; 2
    4ada:	0e 94 02 1a 	call	0x3404	; 0x3404 <_Z13startEventNow19EventActionSource_t>
					state = STATE_SHUTDOWN;
    4ade:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	12 c3       	rjmp	.+1572   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    4ae6:	93 32       	cpi	r25, 0x23	; 35
    4ae8:	09 f0       	breq	.+2      	; 0x4aec <_Z20processDTMFdetection10DTMF_key_t+0x2b2>
    4aea:	e5 c2       	rjmp	.+1482   	; 0x50b6 <_Z20processDTMFdetection10DTMF_key_t+0x87c>
				{
					startEventUsingRTC();
    4aec:	0e 94 af 1c 	call	0x395e	; 0x395e <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    4af0:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4af4:	80 e0       	ldi	r24, 0x00	; 0
    4af6:	09 c3       	rjmp	.+1554   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_START_TRANSMITTING_NOW:
			{
				if(key == '#')
    4af8:	93 32       	cpi	r25, 0x23	; 35
    4afa:	09 f0       	breq	.+2      	; 0x4afe <_Z20processDTMFdetection10DTMF_key_t+0x2c4>
    4afc:	de c2       	rjmp	.+1468   	; 0x50ba <_Z20processDTMFdetection10DTMF_key_t+0x880>
				{
					setupForFox(NULL, START_TRANSMISSIONS_NOW);
    4afe:	62 e0       	ldi	r22, 0x02	; 2
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
					state = STATE_SHUTDOWN;
    4b08:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	fd c2       	rjmp	.+1530   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    4b10:	91 33       	cpi	r25, 0x31	; 49
    4b12:	29 f4       	brne	.+10     	; 0x4b1e <_Z20processDTMFdetection10DTMF_key_t+0x2e4>
				{
					state = STATE_RECEIVING_CALLSIGN;
    4b14:	88 e0       	ldi	r24, 0x08	; 8
    4b16:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	f6 c2       	rjmp	.+1516   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			{
				if(key == '1')
				{
					state = STATE_RECEIVING_CALLSIGN;
				}
				else if(key == '2')
    4b1e:	92 33       	cpi	r25, 0x32	; 50
    4b20:	29 f4       	brne	.+10     	; 0x4b2c <_Z20processDTMFdetection10DTMF_key_t+0x2f2>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    4b22:	89 e0       	ldi	r24, 0x09	; 9
    4b24:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	ef c2       	rjmp	.+1502   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if(key == '2')
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    4b2c:	93 33       	cpi	r25, 0x33	; 51
    4b2e:	29 f4       	brne	.+10     	; 0x4b3a <_Z20processDTMFdetection10DTMF_key_t+0x300>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    4b30:	8d e0       	ldi	r24, 0x0D	; 13
    4b32:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	e8 c2       	rjmp	.+1488   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
				{
					state = STATE_RECEIVING_SET_CLOCK;
				}
				else if(key == '4')
    4b3a:	94 33       	cpi	r25, 0x34	; 52
    4b3c:	29 f4       	brne	.+10     	; 0x4b48 <_Z20processDTMFdetection10DTMF_key_t+0x30e>
				{
					state = STATE_RECEIVING_START_TIME;
    4b3e:	8a e0       	ldi	r24, 0x0A	; 10
    4b40:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	e1 c2       	rjmp	.+1474   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if(key == '4')
				{
					state = STATE_RECEIVING_START_TIME;
				}
				else if(key == '5')
    4b48:	95 33       	cpi	r25, 0x35	; 53
    4b4a:	29 f4       	brne	.+10     	; 0x4b56 <_Z20processDTMFdetection10DTMF_key_t+0x31c>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    4b4c:	8b e0       	ldi	r24, 0x0B	; 11
    4b4e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	da c2       	rjmp	.+1460   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					state = STATE_RECEIVING_UTC_OFFSET;
					digits = 1;
				}
#endif // #if INCLUDE_RV3028_SUPPORT
#if !SUPPORT_ONLY_80M
					else if(key == '9')
    4b56:	99 33       	cpi	r25, 0x39	; 57
    4b58:	29 f4       	brne	.+10     	; 0x4b64 <_Z20processDTMFdetection10DTMF_key_t+0x32a>
					{
						state = STATE_SET_AM_TONE_FREQUENCY;
    4b5a:	8e e0       	ldi	r24, 0x0E	; 14
    4b5c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	d3 c2       	rjmp	.+1446   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					else if(key == '9')
					{
						state = STATE_SET_AM_TONE_FREQUENCY;
					}
#endif  /* !SUPPORT_ONLY_80M */
				else if(key == 'A')
    4b64:	91 34       	cpi	r25, 0x41	; 65
    4b66:	29 f4       	brne	.+10     	; 0x4b72 <_Z20processDTMFdetection10DTMF_key_t+0x338>
				{
					state = STATE_SET_PTT_PERIODIC_RESET;
    4b68:	80 e1       	ldi	r24, 0x10	; 16
    4b6a:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	cc c2       	rjmp	.+1432   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING
				else
				{
					entryError = TRUE;
					g_DTMF_sentence_in_progress_ticks = 0;
    4b72:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    4b76:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    4b7a:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    4b7e:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
					state = STATE_SHUTDOWN;
    4b82:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					state = STATE_GET_BATTERY_VOLTAGE;
				}
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING
				else
				{
					entryError = TRUE;
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	c0 c2       	rjmp	.+1408   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    4b8a:	93 32       	cpi	r25, 0x23	; 35
    4b8c:	c9 f4       	brne	.+50     	; 0x4bc0 <_Z20processDTMFdetection10DTMF_key_t+0x386>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    4b8e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4b92:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4b96:	04 97       	sbiw	r24, 0x04	; 4
    4b98:	7c f0       	brlt	.+30     	; 0x4bb8 <_Z20processDTMFdetection10DTMF_key_t+0x37e>
					{
						strcpy((char*)g_unlockCode, receivedString);
    4b9a:	69 e1       	ldi	r22, 0x19	; 25
    4b9c:	74 e0       	ldi	r23, 0x04	; 4
    4b9e:	8a e0       	ldi	r24, 0x0A	; 10
    4ba0:	95 e0       	ldi	r25, 0x05	; 5
    4ba2:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    4ba6:	4a e0       	ldi	r20, 0x0A	; 10
    4ba8:	55 e0       	ldi	r21, 0x05	; 5
    4baa:	6e e0       	ldi	r22, 0x0E	; 14
    4bac:	84 e6       	ldi	r24, 0x64	; 100
    4bae:	95 e0       	ldi	r25, 0x05	; 5
    4bb0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4bb4:	80 e0       	ldi	r24, 0x00	; 0
    4bb6:	01 c0       	rjmp	.+2      	; 0x4bba <_Z20processDTMFdetection10DTMF_key_t+0x380>
						strcpy((char*)g_unlockCode, receivedString);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
					else
					{
						entryError = TRUE;
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4bba:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4bbe:	a5 c2       	rjmp	.+1354   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '9'))
    4bc0:	80 ed       	ldi	r24, 0xD0	; 208
    4bc2:	89 0f       	add	r24, r25
    4bc4:	8a 30       	cpi	r24, 0x0A	; 10
    4bc6:	c8 f4       	brcc	.+50     	; 0x4bfa <_Z20processDTMFdetection10DTMF_key_t+0x3c0>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    4bc8:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4bcc:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4bd0:	29 30       	cpi	r18, 0x09	; 9
    4bd2:	31 05       	cpc	r19, r1
    4bd4:	0c f0       	brlt	.+2      	; 0x4bd8 <_Z20processDTMFdetection10DTMF_key_t+0x39e>
    4bd6:	73 c2       	rjmp	.+1254   	; 0x50be <_Z20processDTMFdetection10DTMF_key_t+0x884>
					{
						receivedString[stringLength++] = key;
    4bd8:	a9 01       	movw	r20, r18
    4bda:	4f 5f       	subi	r20, 0xFF	; 255
    4bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bde:	50 93 34 04 	sts	0x0434, r21	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4be2:	40 93 33 04 	sts	0x0433, r20	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4be6:	f9 01       	movw	r30, r18
    4be8:	e7 5e       	subi	r30, 0xE7	; 231
    4bea:	fb 4f       	sbci	r31, 0xFB	; 251
    4bec:	90 83       	st	Z, r25
						receivedString[stringLength] = '\0';
    4bee:	fa 01       	movw	r30, r20
    4bf0:	e7 5e       	subi	r30, 0xE7	; 231
    4bf2:	fb 4f       	sbci	r31, 0xFB	; 251
    4bf4:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	88 c2       	rjmp	.+1296   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					}
				}
				else
				{
					entryError = TRUE;
					state = STATE_SHUTDOWN;
    4bfa:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
						receivedString[stringLength] = '\0';
					}
				}
				else
				{
					entryError = TRUE;
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	84 c2       	rjmp	.+1288   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    4c02:	93 32       	cpi	r25, 0x23	; 35
    4c04:	e9 f4       	brne	.+58     	; 0x4c40 <_Z20processDTMFdetection10DTMF_key_t+0x406>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    4c06:	e9 e1       	ldi	r30, 0x19	; 25
    4c08:	f4 e0       	ldi	r31, 0x04	; 4
    4c0a:	01 90       	ld	r0, Z+
    4c0c:	00 20       	and	r0, r0
    4c0e:	e9 f7       	brne	.-6      	; 0x4c0a <_Z20processDTMFdetection10DTMF_key_t+0x3d0>
    4c10:	31 97       	sbiw	r30, 0x01	; 1
    4c12:	e9 51       	subi	r30, 0x19	; 25
    4c14:	f4 40       	sbci	r31, 0x04	; 4
    4c16:	75 97       	sbiw	r30, 0x15	; 21
    4c18:	78 f4       	brcc	.+30     	; 0x4c38 <_Z20processDTMFdetection10DTMF_key_t+0x3fe>
					{
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
    4c1a:	69 e1       	ldi	r22, 0x19	; 25
    4c1c:	74 e0       	ldi	r23, 0x04	; 4
    4c1e:	8d ee       	ldi	r24, 0xED	; 237
    4c20:	94 e0       	ldi	r25, 0x04	; 4
    4c22:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    4c26:	4d ee       	ldi	r20, 0xED	; 237
    4c28:	54 e0       	ldi	r21, 0x04	; 4
    4c2a:	6b e0       	ldi	r22, 0x0B	; 11
    4c2c:	84 e6       	ldi	r24, 0x64	; 100
    4c2e:	95 e0       	ldi	r25, 0x05	; 5
    4c30:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	01 c0       	rjmp	.+2      	; 0x4c3a <_Z20processDTMFdetection10DTMF_key_t+0x400>
						strcpy((char*)g_messages_text[STATION_ID], receivedString);
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
					}
					else
					{
						entryError = TRUE;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4c3a:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4c3e:	65 c2       	rjmp	.+1226   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '9'))
    4c40:	80 ed       	ldi	r24, 0xD0	; 208
    4c42:	89 0f       	add	r24, r25
    4c44:	8a 30       	cpi	r24, 0x0A	; 10
    4c46:	08 f0       	brcs	.+2      	; 0x4c4a <_Z20processDTMFdetection10DTMF_key_t+0x410>
    4c48:	43 c0       	rjmp	.+134    	; 0x4cd0 <_Z20processDTMFdetection10DTMF_key_t+0x496>
				{
					if(digits)
    4c4a:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4c4e:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4c52:	23 2b       	or	r18, r19
    4c54:	71 f1       	breq	.+92     	; 0x4cb2 <_Z20processDTMFdetection10DTMF_key_t+0x478>
					{
						value = value * 10 + (key - '0');
    4c56:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4c5a:	30 91 32 04 	lds	r19, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4c5e:	89 01       	movw	r16, r18
    4c60:	00 0f       	add	r16, r16
    4c62:	11 1f       	adc	r17, r17
    4c64:	22 0f       	add	r18, r18
    4c66:	33 1f       	adc	r19, r19
    4c68:	22 0f       	add	r18, r18
    4c6a:	33 1f       	adc	r19, r19
    4c6c:	22 0f       	add	r18, r18
    4c6e:	33 1f       	adc	r19, r19
    4c70:	02 0f       	add	r16, r18
    4c72:	13 1f       	adc	r17, r19
    4c74:	89 2f       	mov	r24, r25
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	c0 97       	sbiw	r24, 0x30	; 48
    4c7a:	08 0f       	add	r16, r24
    4c7c:	19 1f       	adc	r17, r25
    4c7e:	10 93 32 04 	sts	0x0432, r17	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4c82:	00 93 31 04 	sts	0x0431, r16	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
						if((value < value2Morse(0x7F)) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    4c86:	8f e7       	ldi	r24, 0x7F	; 127
    4c88:	0e 94 03 24 	call	0x4806	; 0x4806 <_Z11value2Morsec>
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	08 17       	cp	r16, r24
    4c90:	19 07       	cpc	r17, r25
    4c92:	4c f4       	brge	.+18     	; 0x4ca6 <_Z20processDTMFdetection10DTMF_key_t+0x46c>
    4c94:	e0 90 33 04 	lds	r14, 0x0433	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4c98:	f0 90 34 04 	lds	r15, 0x0434	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4c9c:	24 e1       	ldi	r18, 0x14	; 20
    4c9e:	e2 16       	cp	r14, r18
    4ca0:	f1 04       	cpc	r15, r1
    4ca2:	0c f4       	brge	.+2      	; 0x4ca6 <_Z20processDTMFdetection10DTMF_key_t+0x46c>
    4ca4:	20 c2       	rjmp	.+1088   	; 0x50e6 <_Z20processDTMFdetection10DTMF_key_t+0x8ac>
							receivedString[stringLength] = value2Morse(value);
							stringLength++;
							receivedString[stringLength] = '\0';
						}

						digits = 0;
    4ca6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4caa:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	2c c2       	rjmp	.+1112   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>

						digits = 0;
					}
					else
					{
						value = key - '0';
    4cb2:	89 2f       	mov	r24, r25
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	c0 97       	sbiw	r24, 0x30	; 48
    4cb8:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4cbc:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
						digits = 1;
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4cc8:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	1d c2       	rjmp	.+1082   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					}
				}
				else
				{
					entryError = TRUE;
					state = STATE_SHUTDOWN;
    4cd0:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
						digits = 1;
					}
				}
				else
				{
					entryError = TRUE;
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	19 c2       	rjmp	.+1074   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    4cd8:	93 32       	cpi	r25, 0x23	; 35
    4cda:	01 f5       	brne	.+64     	; 0x4d1c <_Z20processDTMFdetection10DTMF_key_t+0x4e2>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    4cdc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4ce0:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4ce4:	82 31       	cpi	r24, 0x12	; 18
    4ce6:	91 05       	cpc	r25, r1
    4ce8:	a8 f4       	brcc	.+42     	; 0x4d14 <_Z20processDTMFdetection10DTMF_key_t+0x4da>
					{
						Fox_t holdFox = (Fox_t)value;
    4cea:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    4cec:	ae 01       	movw	r20, r28
    4cee:	4f 5f       	subi	r20, 0xFF	; 255
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf2:	60 e1       	ldi	r22, 0x10	; 16
    4cf4:	84 e6       	ldi	r24, 0x64	; 100
    4cf6:	95 e0       	ldi	r25, 0x05	; 5
    4cf8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    4cfc:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <g_fox>
    4d00:	99 81       	ldd	r25, Y+1	; 0x01
    4d02:	98 17       	cp	r25, r24
    4d04:	29 f0       	breq	.+10     	; 0x4d10 <_Z20processDTMFdetection10DTMF_key_t+0x4d6>
						{
							setupForFox(&holdFox, START_NOTHING);
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	ce 01       	movw	r24, r28
    4d0a:	01 96       	adiw	r24, 0x01	; 1
    4d0c:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d10:	80 e0       	ldi	r24, 0x00	; 0
    4d12:	01 c0       	rjmp	.+2      	; 0x4d16 <_Z20processDTMFdetection10DTMF_key_t+0x4dc>
							setupForFox(&holdFox, START_NOTHING);
						}
					}
					else
					{
						entryError = TRUE;
    4d14:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4d16:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4d1a:	f7 c1       	rjmp	.+1006   	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '9'))
    4d1c:	80 ed       	ldi	r24, 0xD0	; 208
    4d1e:	89 0f       	add	r24, r25
    4d20:	8a 30       	cpi	r24, 0x0A	; 10
    4d22:	08 f0       	brcs	.+2      	; 0x4d26 <_Z20processDTMFdetection10DTMF_key_t+0x4ec>
    4d24:	ce c1       	rjmp	.+924    	; 0x50c2 <_Z20processDTMFdetection10DTMF_key_t+0x888>
				{
					value *= 10;
					value += key - '0';
    4d26:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4d2a:	30 91 32 04 	lds	r19, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4d2e:	a9 01       	movw	r20, r18
    4d30:	44 0f       	add	r20, r20
    4d32:	55 1f       	adc	r21, r21
    4d34:	22 0f       	add	r18, r18
    4d36:	33 1f       	adc	r19, r19
    4d38:	22 0f       	add	r18, r18
    4d3a:	33 1f       	adc	r19, r19
    4d3c:	22 0f       	add	r18, r18
    4d3e:	33 1f       	adc	r19, r19
    4d40:	24 0f       	add	r18, r20
    4d42:	35 1f       	adc	r19, r21
    4d44:	89 2f       	mov	r24, r25
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	c0 97       	sbiw	r24, 0x30	; 48
    4d4a:	28 0f       	add	r18, r24
    4d4c:	39 1f       	adc	r19, r25
    4d4e:	30 93 32 04 	sts	0x0432, r19	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4d52:	20 93 31 04 	sts	0x0431, r18	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	d8 c1       	rjmp	.+944    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    4d5a:	93 32       	cpi	r25, 0x23	; 35
    4d5c:	31 f5       	brne	.+76     	; 0x4daa <_Z20processDTMFdetection10DTMF_key_t+0x570>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    4d5e:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_utc_offset>
    4d62:	41 95       	neg	r20
    4d64:	61 e5       	ldi	r22, 0x51	; 81
    4d66:	75 e0       	ldi	r23, 0x05	; 5
    4d68:	89 e1       	ldi	r24, 0x19	; 25
    4d6a:	94 e0       	ldi	r25, 0x04	; 4
    4d6c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z18validateTimeStringPcPma>
    4d70:	6b 01       	movw	r12, r22
    4d72:	7c 01       	movw	r14, r24

					if(t)
    4d74:	67 2b       	or	r22, r23
    4d76:	68 2b       	or	r22, r24
    4d78:	69 2b       	or	r22, r25
    4d7a:	99 f0       	breq	.+38     	; 0x4da2 <_Z20processDTMFdetection10DTMF_key_t+0x568>
					{
						#if INCLUDE_RV3028_SUPPORT
							RTC_set_epoch(t);
						#else
							RTC_set_datetime(receivedString);
    4d7c:	89 e1       	ldi	r24, 0x19	; 25
    4d7e:	94 e0       	ldi	r25, 0x04	; 4
    4d80:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z16RTC_set_datetimePc>
						#endif

						g_current_epoch = t;
    4d84:	c0 92 51 05 	sts	0x0551, r12	; 0x800551 <g_current_epoch>
    4d88:	d0 92 52 05 	sts	0x0552, r13	; 0x800552 <g_current_epoch+0x1>
    4d8c:	e0 92 53 05 	sts	0x0553, r14	; 0x800553 <g_current_epoch+0x2>
    4d90:	f0 92 54 05 	sts	0x0554, r15	; 0x800554 <g_current_epoch+0x3>
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
    4d94:	60 e0       	ldi	r22, 0x00	; 0
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	01 c0       	rjmp	.+2      	; 0x4da4 <_Z20processDTMFdetection10DTMF_key_t+0x56a>
						g_current_epoch = t;
						setupForFox(NULL, START_NOTHING);   /* Avoid timing problems if an event is already active */
					}
					else
					{
						entryError = TRUE;
    4da2:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4da4:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4da8:	b0 c1       	rjmp	.+864    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '9'))
    4daa:	80 ed       	ldi	r24, 0xD0	; 208
    4dac:	89 0f       	add	r24, r25
    4dae:	8a 30       	cpi	r24, 0x0A	; 10
    4db0:	08 f0       	brcs	.+2      	; 0x4db4 <_Z20processDTMFdetection10DTMF_key_t+0x57a>
    4db2:	89 c1       	rjmp	.+786    	; 0x50c6 <_Z20processDTMFdetection10DTMF_key_t+0x88c>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4db4:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4db8:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4dbc:	28 32       	cpi	r18, 0x28	; 40
    4dbe:	31 05       	cpc	r19, r1
    4dc0:	0c f0       	brlt	.+2      	; 0x4dc4 <_Z20processDTMFdetection10DTMF_key_t+0x58a>
    4dc2:	83 c1       	rjmp	.+774    	; 0x50ca <_Z20processDTMFdetection10DTMF_key_t+0x890>
					{
						receivedString[stringLength] = key;
    4dc4:	f9 01       	movw	r30, r18
    4dc6:	e7 5e       	subi	r30, 0xE7	; 231
    4dc8:	fb 4f       	sbci	r31, 0xFB	; 251
    4dca:	90 83       	st	Z, r25
						stringLength++;
    4dcc:	2f 5f       	subi	r18, 0xFF	; 255
    4dce:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd0:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4dd4:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4dd8:	f9 01       	movw	r30, r18
    4dda:	e7 5e       	subi	r30, 0xE7	; 231
    4ddc:	fb 4f       	sbci	r31, 0xFB	; 251
    4dde:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	93 c1       	rjmp	.+806    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    4de4:	93 32       	cpi	r25, 0x23	; 35
    4de6:	41 f5       	brne	.+80     	; 0x4e38 <_Z20processDTMFdetection10DTMF_key_t+0x5fe>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    4de8:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_utc_offset>
    4dec:	41 95       	neg	r20
    4dee:	6d e4       	ldi	r22, 0x4D	; 77
    4df0:	75 e0       	ldi	r23, 0x05	; 5
    4df2:	89 e1       	ldi	r24, 0x19	; 25
    4df4:	94 e0       	ldi	r25, 0x04	; 4
    4df6:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z18validateTimeStringPcPma>

					if(s)
    4dfa:	61 15       	cp	r22, r1
    4dfc:	71 05       	cpc	r23, r1
    4dfe:	81 05       	cpc	r24, r1
    4e00:	91 05       	cpc	r25, r1
    4e02:	b1 f0       	breq	.+44     	; 0x4e30 <_Z20processDTMFdetection10DTMF_key_t+0x5f6>
					{
						g_event_start_epoch = s;
    4e04:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <g_event_start_epoch>
    4e08:	70 93 4e 05 	sts	0x054E, r23	; 0x80054e <g_event_start_epoch+0x1>
    4e0c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <g_event_start_epoch+0x2>
    4e10:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    4e14:	4d e4       	ldi	r20, 0x4D	; 77
    4e16:	55 e0       	ldi	r21, 0x05	; 5
    4e18:	64 e1       	ldi	r22, 0x14	; 20
    4e1a:	84 e6       	ldi	r24, 0x64	; 100
    4e1c:	95 e0       	ldi	r25, 0x05	; 5
    4e1e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4e22:	63 e0       	ldi	r22, 0x03	; 3
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	01 c0       	rjmp	.+2      	; 0x4e32 <_Z20processDTMFdetection10DTMF_key_t+0x5f8>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
					}
					else
					{
						entryError = TRUE;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4e32:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4e36:	69 c1       	rjmp	.+722    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '9'))
    4e38:	80 ed       	ldi	r24, 0xD0	; 208
    4e3a:	89 0f       	add	r24, r25
    4e3c:	8a 30       	cpi	r24, 0x0A	; 10
    4e3e:	08 f0       	brcs	.+2      	; 0x4e42 <_Z20processDTMFdetection10DTMF_key_t+0x608>
    4e40:	46 c1       	rjmp	.+652    	; 0x50ce <_Z20processDTMFdetection10DTMF_key_t+0x894>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4e42:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4e46:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4e4a:	28 32       	cpi	r18, 0x28	; 40
    4e4c:	31 05       	cpc	r19, r1
    4e4e:	0c f0       	brlt	.+2      	; 0x4e52 <_Z20processDTMFdetection10DTMF_key_t+0x618>
    4e50:	40 c1       	rjmp	.+640    	; 0x50d2 <_Z20processDTMFdetection10DTMF_key_t+0x898>
					{
						receivedString[stringLength] = key;
    4e52:	f9 01       	movw	r30, r18
    4e54:	e7 5e       	subi	r30, 0xE7	; 231
    4e56:	fb 4f       	sbci	r31, 0xFB	; 251
    4e58:	90 83       	st	Z, r25
						stringLength++;
    4e5a:	2f 5f       	subi	r18, 0xFF	; 255
    4e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e5e:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4e62:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4e66:	f9 01       	movw	r30, r18
    4e68:	e7 5e       	subi	r30, 0xE7	; 231
    4e6a:	fb 4f       	sbci	r31, 0xFB	; 251
    4e6c:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	4c c1       	rjmp	.+664    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    4e72:	93 32       	cpi	r25, 0x23	; 35
    4e74:	41 f5       	brne	.+80     	; 0x4ec6 <_Z20processDTMFdetection10DTMF_key_t+0x68c>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    4e76:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <g_utc_offset>
    4e7a:	41 95       	neg	r20
    4e7c:	69 e4       	ldi	r22, 0x49	; 73
    4e7e:	75 e0       	ldi	r23, 0x05	; 5
    4e80:	89 e1       	ldi	r24, 0x19	; 25
    4e82:	94 e0       	ldi	r25, 0x04	; 4
    4e84:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_Z18validateTimeStringPcPma>

					if(f)
    4e88:	61 15       	cp	r22, r1
    4e8a:	71 05       	cpc	r23, r1
    4e8c:	81 05       	cpc	r24, r1
    4e8e:	91 05       	cpc	r25, r1
    4e90:	b1 f0       	breq	.+44     	; 0x4ebe <_Z20processDTMFdetection10DTMF_key_t+0x684>
					{
						g_event_finish_epoch = f;
    4e92:	60 93 49 05 	sts	0x0549, r22	; 0x800549 <g_event_finish_epoch>
    4e96:	70 93 4a 05 	sts	0x054A, r23	; 0x80054a <g_event_finish_epoch+0x1>
    4e9a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <g_event_finish_epoch+0x2>
    4e9e:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4ea2:	49 e4       	ldi	r20, 0x49	; 73
    4ea4:	55 e0       	ldi	r21, 0x05	; 5
    4ea6:	65 e1       	ldi	r22, 0x15	; 21
    4ea8:	84 e6       	ldi	r24, 0x64	; 100
    4eaa:	95 e0       	ldi	r25, 0x05	; 5
    4eac:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4eb0:	63 e0       	ldi	r22, 0x03	; 3
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	0e 94 67 17 	call	0x2ece	; 0x2ece <_Z11setupForFoxP5Fox_t13EventAction_t>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	01 c0       	rjmp	.+2      	; 0x4ec0 <_Z20processDTMFdetection10DTMF_key_t+0x686>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
						setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
					}
					else
					{
						entryError = TRUE;
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4ec0:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4ec4:	22 c1       	rjmp	.+580    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '9'))
    4ec6:	80 ed       	ldi	r24, 0xD0	; 208
    4ec8:	89 0f       	add	r24, r25
    4eca:	8a 30       	cpi	r24, 0x0A	; 10
    4ecc:	08 f0       	brcs	.+2      	; 0x4ed0 <_Z20processDTMFdetection10DTMF_key_t+0x696>
    4ece:	03 c1       	rjmp	.+518    	; 0x50d6 <_Z20processDTMFdetection10DTMF_key_t+0x89c>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    4ed0:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
    4ed4:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4ed8:	28 32       	cpi	r18, 0x28	; 40
    4eda:	31 05       	cpc	r19, r1
    4edc:	0c f0       	brlt	.+2      	; 0x4ee0 <_Z20processDTMFdetection10DTMF_key_t+0x6a6>
    4ede:	fd c0       	rjmp	.+506    	; 0x50da <_Z20processDTMFdetection10DTMF_key_t+0x8a0>
					{
						receivedString[stringLength] = key;
    4ee0:	f9 01       	movw	r30, r18
    4ee2:	e7 5e       	subi	r30, 0xE7	; 231
    4ee4:	fb 4f       	sbci	r31, 0xFB	; 251
    4ee6:	90 83       	st	Z, r25
						stringLength++;
    4ee8:	2f 5f       	subi	r18, 0xFF	; 255
    4eea:	3f 4f       	sbci	r19, 0xFF	; 255
    4eec:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    4ef0:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
						receivedString[stringLength] = '\0';
    4ef4:	f9 01       	movw	r30, r18
    4ef6:	e7 5e       	subi	r30, 0xE7	; 231
    4ef8:	fb 4f       	sbci	r31, 0xFB	; 251
    4efa:	10 82       	st	Z, r1
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	05 c1       	rjmp	.+522    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			break;

#if !SUPPORT_ONLY_80M
					case STATE_SET_AM_TONE_FREQUENCY:
					{
						if(key == '#')
    4f00:	93 32       	cpi	r25, 0x23	; 35
    4f02:	99 f4       	brne	.+38     	; 0x4f2a <_Z20processDTMFdetection10DTMF_key_t+0x6f0>
						{
							g_AM_audio_frequency = (AM_Tone_Freq_t)value;
    4f04:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4f08:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <g_AM_audio_frequency>
							setAMToneFrequency(g_AM_audio_frequency);
    4f0c:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_AM_audio_frequency>
    4f10:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z18setAMToneFrequency14AM_Tone_Freq_t>
							ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    4f14:	45 e4       	ldi	r20, 0x45	; 69
    4f16:	55 e0       	ldi	r21, 0x05	; 5
    4f18:	61 e1       	ldi	r22, 0x11	; 17
    4f1a:	84 e6       	ldi	r24, 0x64	; 100
    4f1c:	95 e0       	ldi	r25, 0x05	; 5
    4f1e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

							state = STATE_SHUTDOWN;
    4f22:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	f0 c0       	rjmp	.+480    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>

							state = STATE_SHUTDOWN;
						}
						else
						{
							value = CLAMP(MIN_AM_TONE_FREQUENCY, (int)(key-'0'), MAX_AM_TONE_FREQUENCY);
    4f2a:	89 2f       	mov	r24, r25
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	c0 97       	sbiw	r24, 0x30	; 48
    4f30:	12 f4       	brpl	.+4      	; 0x4f36 <_Z20processDTMFdetection10DTMF_key_t+0x6fc>
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	87 30       	cpi	r24, 0x07	; 7
    4f38:	91 05       	cpc	r25, r1
    4f3a:	14 f0       	brlt	.+4      	; 0x4f40 <_Z20processDTMFdetection10DTMF_key_t+0x706>
    4f3c:	86 e0       	ldi	r24, 0x06	; 6
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4f44:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	df c0       	rjmp	.+446    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					break;
#endif  /* !SUPPORT_ONLY_80M */

			case STATE_SET_PTT_PERIODIC_RESET:
			{
				if(key == '#')
    4f4c:	93 32       	cpi	r25, 0x23	; 35
    4f4e:	d1 f4       	brne	.+52     	; 0x4f84 <_Z20processDTMFdetection10DTMF_key_t+0x74a>
				{
					if((value >= 0) && (value <= 1))
    4f50:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    4f54:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4f58:	82 30       	cpi	r24, 0x02	; 2
    4f5a:	91 05       	cpc	r25, r1
    4f5c:	78 f4       	brcc	.+30     	; 0x4f7c <_Z20processDTMFdetection10DTMF_key_t+0x742>
					{
						g_ptt_periodic_reset_enabled = (uint8_t)value;
    4f5e:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <g_ptt_periodic_reset_enabled>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
    4f62:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <g_ptt_periodic_reset_enabled>
    4f66:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <g_use_ptt_periodic_reset>
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
    4f6a:	47 e4       	ldi	r20, 0x47	; 71
    4f6c:	55 e0       	ldi	r21, 0x05	; 5
    4f6e:	67 e1       	ldi	r22, 0x17	; 23
    4f70:	84 e6       	ldi	r24, 0x64	; 100
    4f72:	95 e0       	ldi	r25, 0x05	; 5
    4f74:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	01 c0       	rjmp	.+2      	; 0x4f7e <_Z20processDTMFdetection10DTMF_key_t+0x744>
						g_use_ptt_periodic_reset = g_ptt_periodic_reset_enabled;
						ee_mgr.updateEEPROMVar(Ptt_periodic_reset, (void*)&g_ptt_periodic_reset_enabled);
					}
					else
					{
						entryError = TRUE;
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
					}

					state = STATE_SHUTDOWN;
    4f7e:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
    4f82:	c3 c0       	rjmp	.+390    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
				}
				else if((key >= '0') && (key <= '1'))
    4f84:	80 ed       	ldi	r24, 0xD0	; 208
    4f86:	89 0f       	add	r24, r25
    4f88:	82 30       	cpi	r24, 0x02	; 2
    4f8a:	08 f0       	brcs	.+2      	; 0x4f8e <_Z20processDTMFdetection10DTMF_key_t+0x754>
    4f8c:	a8 c0       	rjmp	.+336    	; 0x50de <_Z20processDTMFdetection10DTMF_key_t+0x8a4>
				{
					value = key - '0';
    4f8e:	89 2f       	mov	r24, r25
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	c0 97       	sbiw	r24, 0x30	; 48
    4f94:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    4f98:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	b5 c0       	rjmp	.+362    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			break;
#endif // SUPPORT_TEMP_AND_VOLTAGE_REPORTING

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    4fa0:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4fa4:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4fa8:	a9 01       	movw	r20, r18
    4faa:	4f 5f       	subi	r20, 0xFF	; 255
    4fac:	5f 4f       	sbci	r21, 0xFF	; 255
    4fae:	50 93 30 04 	sts	0x0430, r21	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4fb2:	40 93 2f 04 	sts	0x042F, r20	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
    4fb6:	f9 01       	movw	r30, r18
    4fb8:	e6 5f       	subi	r30, 0xF6	; 246
    4fba:	fa 4f       	sbci	r31, 0xFA	; 250
    4fbc:	90 81       	ld	r25, Z
    4fbe:	89 13       	cpse	r24, r25
    4fc0:	13 c0       	rjmp	.+38     	; 0x4fe8 <_Z20processDTMFdetection10DTMF_key_t+0x7ae>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    4fc2:	ea e0       	ldi	r30, 0x0A	; 10
    4fc4:	f5 e0       	ldi	r31, 0x05	; 5
    4fc6:	01 90       	ld	r0, Z+
    4fc8:	00 20       	and	r0, r0
    4fca:	e9 f7       	brne	.-6      	; 0x4fc6 <_Z20processDTMFdetection10DTMF_key_t+0x78c>
    4fcc:	31 97       	sbiw	r30, 0x01	; 1
    4fce:	ea 50       	subi	r30, 0x0A	; 10
    4fd0:	f5 40       	sbci	r31, 0x05	; 5
    4fd2:	e4 17       	cp	r30, r20
    4fd4:	f5 07       	cpc	r31, r21
    4fd6:	09 f0       	breq	.+2      	; 0x4fda <_Z20processDTMFdetection10DTMF_key_t+0x7a0>
    4fd8:	84 c0       	rjmp	.+264    	; 0x50e2 <_Z20processDTMFdetection10DTMF_key_t+0x8a8>
					{
						g_DTMF_unlocked = TRUE;
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    4fe0:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <_ZZ20processDTMFdetection10DTMF_key_tE18setPasswordEnabled>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
    4fe6:	91 c0       	rjmp	.+290    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
						setPasswordEnabled = TRUE;
					}
				}
				else
				{
					g_DTMF_sentence_in_progress_ticks = 0;
    4fe8:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    4fec:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    4ff0:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    4ff4:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
					digits = 0;
    4ff8:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZZ20processDTMFdetection10DTMF_key_tE6digits+0x1>
    4ffc:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZZ20processDTMFdetection10DTMF_key_tE6digits>
					state = STATE_SHUTDOWN;
    5000:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
					entryError = TRUE;
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	81 c0       	rjmp	.+258    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
			break;

#if !SUPPORT_ONLY_80M
					case STATE_TEST_ATTENUATOR:
					{
						if(key == '#')
    5008:	93 32       	cpi	r25, 0x23	; 35
    500a:	f9 f4       	brne	.+62     	; 0x504a <_Z20processDTMFdetection10DTMF_key_t+0x810>
						{
							if(value == 0)
    500c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    5010:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    5014:	00 97       	sbiw	r24, 0x00	; 0
    5016:	41 f4       	brne	.+16     	; 0x5028 <_Z20processDTMFdetection10DTMF_key_t+0x7ee>
							{
								setAtten(0);
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	0e 94 13 08 	call	0x1026	; 0x1026 <setAtten>
								g_sendAMmodulationConstantly = TRUE;
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <g_sendAMmodulationConstantly>
    5026:	0d c0       	rjmp	.+26     	; 0x5042 <_Z20processDTMFdetection10DTMF_key_t+0x808>
							}
							else if(value > (int)MAX_ATTEN_TENTHS_DB)
    5028:	8c 33       	cpi	r24, 0x3C	; 60
    502a:	21 e0       	ldi	r18, 0x01	; 1
    502c:	92 07       	cpc	r25, r18
    502e:	3c f0       	brlt	.+14     	; 0x503e <_Z20processDTMFdetection10DTMF_key_t+0x804>
							{
								g_sendAMmodulationConstantly = FALSE;
    5030:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <g_sendAMmodulationConstantly>
								setAtten(MAX_ATTEN_TENTHS_DB);
    5034:	8b e3       	ldi	r24, 0x3B	; 59
    5036:	91 e0       	ldi	r25, 0x01	; 1
    5038:	0e 94 13 08 	call	0x1026	; 0x1026 <setAtten>
    503c:	02 c0       	rjmp	.+4      	; 0x5042 <_Z20processDTMFdetection10DTMF_key_t+0x808>
							}
							else
							{
								setAtten(value);
    503e:	0e 94 13 08 	call	0x1026	; 0x1026 <setAtten>
							}

							state = STATE_SHUTDOWN;
    5042:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    5046:	80 e0       	ldi	r24, 0x00	; 0
    5048:	60 c0       	rjmp	.+192    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
								setAtten(value);
							}

							state = STATE_SHUTDOWN;
						}
						else if((key >= '0') && (key <= '9'))
    504a:	80 ed       	ldi	r24, 0xD0	; 208
    504c:	89 0f       	add	r24, r25
    504e:	8a 30       	cpi	r24, 0x0A	; 10
    5050:	d0 f4       	brcc	.+52     	; 0x5086 <_Z20processDTMFdetection10DTMF_key_t+0x84c>
						{
							value *= 10;
							value += key - '0';
    5052:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
    5056:	30 91 32 04 	lds	r19, 0x0432	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    505a:	a9 01       	movw	r20, r18
    505c:	44 0f       	add	r20, r20
    505e:	55 1f       	adc	r21, r21
    5060:	22 0f       	add	r18, r18
    5062:	33 1f       	adc	r19, r19
    5064:	22 0f       	add	r18, r18
    5066:	33 1f       	adc	r19, r19
    5068:	22 0f       	add	r18, r18
    506a:	33 1f       	adc	r19, r19
    506c:	24 0f       	add	r18, r20
    506e:	35 1f       	adc	r19, r21
    5070:	89 2f       	mov	r24, r25
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	c0 97       	sbiw	r24, 0x30	; 48
    5076:	82 0f       	add	r24, r18
    5078:	93 1f       	adc	r25, r19
    507a:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <_ZZ20processDTMFdetection10DTMF_key_tE5value+0x1>
    507e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <_ZZ20processDTMFdetection10DTMF_key_tE5value>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	42 c0       	rjmp	.+132    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
							value *= 10;
							value += key - '0';
						}
						else
						{
							g_DTMF_sentence_in_progress_ticks = 0;
    5086:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    508a:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    508e:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    5092:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
							state = STATE_SHUTDOWN;
    5096:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZZ20processDTMFdetection10DTMF_key_tE5state>
							entryError = TRUE;
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	36 c0       	rjmp	.+108    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;
		static unsigned int last_in_progress_ticks = 0;
		BOOL entryError = FALSE;
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	34 c0       	rjmp	.+104    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50a2:	80 e0       	ldi	r24, 0x00	; 0
    50a4:	32 c0       	rjmp	.+100    	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50a6:	80 e0       	ldi	r24, 0x00	; 0
    50a8:	30 c0       	rjmp	.+96     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	2e c0       	rjmp	.+92     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50ae:	80 e0       	ldi	r24, 0x00	; 0
    50b0:	2c c0       	rjmp	.+88     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	2a c0       	rjmp	.+84     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	28 c0       	rjmp	.+80     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	26 c0       	rjmp	.+76     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	24 c0       	rjmp	.+72     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	22 c0       	rjmp	.+68     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50c6:	80 e0       	ldi	r24, 0x00	; 0
    50c8:	20 c0       	rjmp	.+64     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50ca:	80 e0       	ldi	r24, 0x00	; 0
    50cc:	1e c0       	rjmp	.+60     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	1c c0       	rjmp	.+56     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	1a c0       	rjmp	.+52     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50d6:	80 e0       	ldi	r24, 0x00	; 0
    50d8:	18 c0       	rjmp	.+48     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50da:	80 e0       	ldi	r24, 0x00	; 0
    50dc:	16 c0       	rjmp	.+44     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	14 c0       	rjmp	.+40     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	12 c0       	rjmp	.+36     	; 0x510a <_Z20processDTMFdetection10DTMF_key_t+0x8d0>
					if(digits)
					{
						value = value * 10 + (key - '0');
						if((value < value2Morse(0x7F)) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
						{
							receivedString[stringLength] = value2Morse(value);
    50e6:	80 2f       	mov	r24, r16
    50e8:	0e 94 03 24 	call	0x4806	; 0x4806 <_Z11value2Morsec>
    50ec:	f7 01       	movw	r30, r14
    50ee:	e7 5e       	subi	r30, 0xE7	; 231
    50f0:	fb 4f       	sbci	r31, 0xFB	; 251
    50f2:	80 83       	st	Z, r24
							stringLength++;
    50f4:	c7 01       	movw	r24, r14
    50f6:	01 96       	adiw	r24, 0x01	; 1
    50f8:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength+0x1>
    50fc:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <_ZZ20processDTMFdetection10DTMF_key_tE12stringLength>
							receivedString[stringLength] = '\0';
    5100:	fc 01       	movw	r30, r24
    5102:	e7 5e       	subi	r30, 0xE7	; 231
    5104:	fb 4f       	sbci	r31, 0xFB	; 251
    5106:	10 82       	st	Z, r1
    5108:	ce cd       	rjmp	.-1124   	; 0x4ca6 <_Z20processDTMFdetection10DTMF_key_t+0x46c>
					break;
#endif  /* !SUPPORT_ONLY_80M */
		}

		return(entryError);
	}
    510a:	0f 90       	pop	r0
    510c:	df 91       	pop	r29
    510e:	cf 91       	pop	r28
    5110:	1f 91       	pop	r17
    5112:	0f 91       	pop	r16
    5114:	ff 90       	pop	r15
    5116:	ef 90       	pop	r14
    5118:	df 90       	pop	r13
    511a:	cf 90       	pop	r12
    511c:	08 95       	ret

0000511e <_Z13value2DTMFKeyh>:

DTMF_key_t value2DTMFKey(uint8_t value)
{
	DTMF_key_t key = NO_KEY;

	if(value <= 2)
    511e:	83 30       	cpi	r24, 0x03	; 3
    5120:	10 f4       	brcc	.+4      	; 0x5126 <_Z13value2DTMFKeyh+0x8>
	{
		key = (DTMF_key_t)('1' + value);
    5122:	8f 5c       	subi	r24, 0xCF	; 207
    5124:	08 95       	ret
	}
	else if((value >= 4) && (value <= 6))
    5126:	9c ef       	ldi	r25, 0xFC	; 252
    5128:	98 0f       	add	r25, r24
    512a:	93 30       	cpi	r25, 0x03	; 3
    512c:	10 f4       	brcc	.+4      	; 0x5132 <_Z13value2DTMFKeyh+0x14>
	{
		key = (DTMF_key_t)('0' + value);
    512e:	80 5d       	subi	r24, 0xD0	; 208
    5130:	08 95       	ret
	}
	else if((value >= 8) && (value <= 10))
    5132:	98 ef       	ldi	r25, 0xF8	; 248
    5134:	98 0f       	add	r25, r24
    5136:	93 30       	cpi	r25, 0x03	; 3
    5138:	10 f4       	brcc	.+4      	; 0x513e <_Z13value2DTMFKeyh+0x20>
	{
		key = (DTMF_key_t)('/' + value);
    513a:	81 5d       	subi	r24, 0xD1	; 209
    513c:	08 95       	ret
	}
	else if(value == 3)
    513e:	83 30       	cpi	r24, 0x03	; 3
    5140:	71 f0       	breq	.+28     	; 0x515e <_Z13value2DTMFKeyh+0x40>
	{
		key = A_KEY;
	}
	else if(value == 7)
    5142:	87 30       	cpi	r24, 0x07	; 7
    5144:	71 f0       	breq	.+28     	; 0x5162 <_Z13value2DTMFKeyh+0x44>
	{
		key = B_KEY;
	}
	else if(value == 11)
    5146:	8b 30       	cpi	r24, 0x0B	; 11
    5148:	71 f0       	breq	.+28     	; 0x5166 <_Z13value2DTMFKeyh+0x48>
	{
		key = C_KEY;
	}
	else if(value == 12)
    514a:	8c 30       	cpi	r24, 0x0C	; 12
    514c:	71 f0       	breq	.+28     	; 0x516a <_Z13value2DTMFKeyh+0x4c>
	{
		key = STAR_KEY;
	}
	else if(value == 13)
    514e:	8d 30       	cpi	r24, 0x0D	; 13
    5150:	71 f0       	breq	.+28     	; 0x516e <_Z13value2DTMFKeyh+0x50>
	{
		key = ZERO_KEY;
	}
	else if(value == 14)
    5152:	8e 30       	cpi	r24, 0x0E	; 14
    5154:	71 f0       	breq	.+28     	; 0x5172 <_Z13value2DTMFKeyh+0x54>
	{
		key = POUND_KEY;
	}
	else if(value == 15)
    5156:	8f 30       	cpi	r24, 0x0F	; 15
    5158:	71 f4       	brne	.+28     	; 0x5176 <_Z13value2DTMFKeyh+0x58>
	{
		key = D_KEY;
    515a:	84 e4       	ldi	r24, 0x44	; 68
    515c:	08 95       	ret
	{
		key = (DTMF_key_t)('/' + value);
	}
	else if(value == 3)
	{
		key = A_KEY;
    515e:	81 e4       	ldi	r24, 0x41	; 65
    5160:	08 95       	ret
	}
	else if(value == 7)
	{
		key = B_KEY;
    5162:	82 e4       	ldi	r24, 0x42	; 66
    5164:	08 95       	ret
	}
	else if(value == 11)
	{
		key = C_KEY;
    5166:	83 e4       	ldi	r24, 0x43	; 67
    5168:	08 95       	ret
	}
	else if(value == 12)
	{
		key = STAR_KEY;
    516a:	8a e2       	ldi	r24, 0x2A	; 42
    516c:	08 95       	ret
	}
	else if(value == 13)
	{
		key = ZERO_KEY;
    516e:	80 e3       	ldi	r24, 0x30	; 48
    5170:	08 95       	ret
	}
	else if(value == 14)
	{
		key = POUND_KEY;
    5172:	83 e2       	ldi	r24, 0x23	; 35
    5174:	08 95       	ret
	return( morse);
}

DTMF_key_t value2DTMFKey(uint8_t value)
{
	DTMF_key_t key = NO_KEY;
    5176:	80 e0       	ldi	r24, 0x00	; 0
	{
		key = D_KEY;
	}

	return( key);
}
    5178:	08 95       	ret

0000517a <_Z4loopv>:

/***********************************************************************
 *   Here is the main loop
 ************************************************************************/
void loop()
{
    517a:	4f 92       	push	r4
    517c:	5f 92       	push	r5
    517e:	6f 92       	push	r6
    5180:	7f 92       	push	r7
    5182:	8f 92       	push	r8
    5184:	9f 92       	push	r9
    5186:	af 92       	push	r10
    5188:	bf 92       	push	r11
    518a:	cf 92       	push	r12
    518c:	df 92       	push	r13
    518e:	ef 92       	push	r14
    5190:	ff 92       	push	r15
    5192:	0f 93       	push	r16
    5194:	1f 93       	push	r17
    5196:	cf 93       	push	r28
    5198:	df 93       	push	r29
    519a:	00 d0       	rcall	.+0      	; 0x519c <_Z4loopv+0x22>
    519c:	1f 92       	push	r1
    519e:	cd b7       	in	r28, 0x3d	; 61
    51a0:	de b7       	in	r29, 0x3e	; 62
		int8_t dtmfY = -1;
		float largestX;
		float largestY;
		BOOL dtmfDetected = FALSE;
		BOOL noiseDetected = FALSE;
		int clipCount = 0;
    51a2:	1a 82       	std	Y+2, r1	; 0x02
    51a4:	19 82       	std	Y+1, r1	; 0x01
		BOOL dtmfEntryError = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
    51a6:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <g_perform_EEPROM_reset>
    51aa:	88 23       	and	r24, r24
    51ac:	c1 f0       	breq	.+48     	; 0x51de <_Z4loopv+0x64>
		{
			ee_mgr.resetEEPROMValues();
    51ae:	84 e6       	ldi	r24, 0x64	; 100
    51b0:	95 e0       	ldi	r25, 0x05	; 5
    51b2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN13EepromManager17resetEEPROMValuesEv>
			linkbus_init(BAUD);
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	71 ee       	ldi	r23, 0xE1	; 225
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	0e 94 aa 0c 	call	0x1954	; 0x1954 <linkbus_init>
			while(g_reset_button_held)
    51c2:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_reset_button_held>
    51c6:	88 23       	and	r24, r24
    51c8:	41 f0       	breq	.+16     	; 0x51da <_Z4loopv+0x60>
			{
				digitalWrite(PIN_LED, OFF); /*  LED */
    51ca:	60 e0       	ldi	r22, 0x00	; 0
    51cc:	80 e1       	ldi	r24, 0x10	; 16
    51ce:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
#if !INIT_EEPROM_ONLY
		if(g_perform_EEPROM_reset)
		{
			ee_mgr.resetEEPROMValues();
			linkbus_init(BAUD);
			while(g_reset_button_held)
    51d2:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <g_reset_button_held>
    51d6:	81 11       	cpse	r24, r1
    51d8:	f8 cf       	rjmp	.-16     	; 0x51ca <_Z4loopv+0x50>
			{
				digitalWrite(PIN_LED, OFF); /*  LED */
			}

			g_perform_EEPROM_reset = FALSE;
    51da:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <g_perform_EEPROM_reset>
		}

		dtmfEntryError = processDTMFdetection(NO_KEY);
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	0e 94 1d 24 	call	0x483a	; 0x483a <_Z20processDTMFdetection10DTMF_key_t>
    51e4:	18 2f       	mov	r17, r24
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    51e6:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_Z17handleLinkBusMsgsv>

#ifndef TRANQUILIZE_WATCHDOG
		wdt_reset();    /* HW watchdog */
    51ea:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */


#if !INIT_EEPROM_ONLY
		if(!dtmfEntryError)
    51ec:	11 11       	cpse	r17, r1
    51ee:	9d c1       	rjmp	.+826    	; 0x552a <_Z4loopv+0x3b0>
		{
			if(g_goertzel.SamplesReady())
    51f0:	84 ec       	ldi	r24, 0xC4	; 196
    51f2:	94 e0       	ldi	r25, 0x04	; 4
    51f4:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN8Goertzel12SamplesReadyEv>
    51f8:	88 23       	and	r24, r24
    51fa:	09 f4       	brne	.+2      	; 0x51fe <_Z4loopv+0x84>
    51fc:	96 c1       	rjmp	.+812    	; 0x552a <_Z4loopv+0x3b0>
				dtmfX = -1;
				dtmfY = -1;

				dtmfDetected = FALSE;
				noiseDetected = FALSE;
				clipCount = 0;
    51fe:	1a 82       	std	Y+2, r1	; 0x02
    5200:	19 82       	std	Y+1, r1	; 0x01

				if(!g_temperature_check_countdown)
    5202:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_temperature_check_countdown>
    5206:	81 11       	cpse	r24, r1
    5208:	15 c0       	rjmp	.+42     	; 0x5234 <_Z4loopv+0xba>
				{
					setUpSampling(TEMPERATURE_SAMPLING, FALSE);
    520a:	60 e0       	ldi	r22, 0x00	; 0
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	0e 94 ac 19 	call	0x3358	; 0x3358 <_Z13setUpSampling12ADCChannel_th>
					int8_t temp = (int8_t)getTemp();
    5212:	0e 94 40 19 	call	0x3280	; 0x3280 <_Z7getTempv>
    5216:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__fixsfsi>
					if(temp != g_temperature)
    521a:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <g_temperature>
    521e:	68 13       	cpse	r22, r24
					{
						g_temperature = temp;
    5220:	60 93 09 05 	sts	0x0509, r22	; 0x800509 <g_temperature>
						int8_t adj = ee_mgr.readTemperatureTable(delta25);
						rv3028_set_offset_RAM(g_rv3028_offset + adj);
#endif // INCLUDE_DS3231_SUPPORT
					}

					setUpSampling(AUDIO_SAMPLING, FALSE);
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	0e 94 ac 19 	call	0x3358	; 0x3358 <_Z13setUpSampling12ADCChannel_th>
					g_temperature_check_countdown = TEMPERATURE_POLL_INTERVAL_SECONDS;
    522c:	8b e3       	ldi	r24, 0x3B	; 59
    522e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <g_temperature_check_countdown>
    5232:	30 c2       	rjmp	.+1120   	; 0x5694 <_Z4loopv+0x51a>
				}
				else if(!g_voltage_check_countdown)
    5234:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_voltage_check_countdown>
    5238:	81 11       	cpse	r24, r1
    523a:	2c c2       	rjmp	.+1112   	; 0x5694 <_Z4loopv+0x51a>
				{
					setUpSampling(VOLTAGE_SAMPLING, FALSE);
    523c:	60 e0       	ldi	r22, 0x00	; 0
    523e:	82 e0       	ldi	r24, 0x02	; 2
    5240:	0e 94 ac 19 	call	0x3358	; 0x3358 <_Z13setUpSampling12ADCChannel_th>
					g_voltage = getVoltage();
    5244:	0e 94 98 19 	call	0x3330	; 0x3330 <_Z10getVoltagev>
    5248:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <g_voltage+0x1>
    524c:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <g_voltage>
					setUpSampling(AUDIO_SAMPLING, FALSE);
    5250:	60 e0       	ldi	r22, 0x00	; 0
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	0e 94 ac 19 	call	0x3358	; 0x3358 <_Z13setUpSampling12ADCChannel_th>
					g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
    5258:	8b e0       	ldi	r24, 0x0B	; 11
    525a:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <g_voltage_check_countdown>
    525e:	1a c2       	rjmp	.+1076   	; 0x5694 <_Z4loopv+0x51a>
				}

				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(y_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
    5260:	f5 01       	movw	r30, r10
    5262:	41 91       	ld	r20, Z+
    5264:	51 91       	ld	r21, Z+
    5266:	61 91       	ld	r22, Z+
    5268:	71 91       	ld	r23, Z+
    526a:	5f 01       	movw	r10, r30
    526c:	84 ec       	ldi	r24, 0xC4	; 196
    526e:	94 e0       	ldi	r25, 0x04	; 4
    5270:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeY = g_goertzel.Magnitude2(&clipCount);     /* Check samples for presence of the target frequency */
    5274:	be 01       	movw	r22, r28
    5276:	6f 5f       	subi	r22, 0xFF	; 255
    5278:	7f 4f       	sbci	r23, 0xFF	; 255
    527a:	84 ec       	ldi	r24, 0xC4	; 196
    527c:	94 e0       	ldi	r25, 0x04	; 4
    527e:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN8Goertzel10Magnitude2EPi>
    5282:	e6 2e       	mov	r14, r22
    5284:	f7 2e       	mov	r15, r23
    5286:	08 2f       	mov	r16, r24
    5288:	d9 2e       	mov	r13, r25

					if(magnitudeY > largestY)                           /* Use only the greatest Y value */
    528a:	29 2d       	mov	r18, r9
    528c:	38 2d       	mov	r19, r8
    528e:	47 2d       	mov	r20, r7
    5290:	56 2d       	mov	r21, r6
    5292:	0e 94 df 30 	call	0x61be	; 0x61be <__gesf2>
    5296:	18 16       	cp	r1, r24
    5298:	b4 f4       	brge	.+44     	; 0x52c6 <_Z4loopv+0x14c>
					{
						largestY = magnitudeY;
						if(magnitudeY > threshold)                      /* Only consider Y above a certain threshold */
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	34 e2       	ldi	r19, 0x24	; 36
    529e:	44 e7       	ldi	r20, 0x74	; 116
    52a0:	59 e4       	ldi	r21, 0x49	; 73
    52a2:	6e 2d       	mov	r22, r14
    52a4:	7f 2d       	mov	r23, r15
    52a6:	80 2f       	mov	r24, r16
    52a8:	9d 2d       	mov	r25, r13
    52aa:	0e 94 df 30 	call	0x61be	; 0x61be <__gesf2>
    52ae:	18 16       	cp	r1, r24
    52b0:	34 f4       	brge	.+12     	; 0x52be <_Z4loopv+0x144>
						{
							dtmfY = i;
    52b2:	5c 2c       	mov	r5, r12
					g_goertzel.SetTargetFrequency(y_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
					magnitudeY = g_goertzel.Magnitude2(&clipCount);     /* Check samples for presence of the target frequency */

					if(magnitudeY > largestY)                           /* Use only the greatest Y value */
					{
						largestY = magnitudeY;
    52b4:	9e 2c       	mov	r9, r14
    52b6:	8f 2c       	mov	r8, r15
    52b8:	70 2e       	mov	r7, r16
    52ba:	6d 2c       	mov	r6, r13
    52bc:	04 c0       	rjmp	.+8      	; 0x52c6 <_Z4loopv+0x14c>
    52be:	9e 2c       	mov	r9, r14
    52c0:	8f 2c       	mov	r8, r15
    52c2:	70 2e       	mov	r7, r16
    52c4:	6d 2c       	mov	r6, r13
    52c6:	c3 94       	inc	r12
					g_voltage = getVoltage();
					setUpSampling(AUDIO_SAMPLING, FALSE);
					g_voltage_check_countdown = VOLTAGE_POLL_INTERVAL_SECONDS;
				}

				for(int i = 0; i < 4; i++)
    52c8:	f4 e0       	ldi	r31, 0x04	; 4
    52ca:	cf 12       	cpse	r12, r31
    52cc:	c9 cf       	rjmp	.-110    	; 0x5260 <_Z4loopv+0xe6>
    52ce:	f0 c1       	rjmp	.+992    	; 0x56b0 <_Z4loopv+0x536>

				if(dtmfY >= 0)
				{
					for(int i = 0; i < 4; i++)
					{
						g_goertzel.SetTargetFrequency(x_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
    52d0:	f5 01       	movw	r30, r10
    52d2:	41 91       	ld	r20, Z+
    52d4:	51 91       	ld	r21, Z+
    52d6:	61 91       	ld	r22, Z+
    52d8:	71 91       	ld	r23, Z+
    52da:	5f 01       	movw	r10, r30
    52dc:	84 ec       	ldi	r24, 0xC4	; 196
    52de:	94 e0       	ldi	r25, 0x04	; 4
    52e0:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN8Goertzel18SetTargetFrequencyEf>
						magnitudeX = g_goertzel.Magnitude2(NULL);           /* Check samples for presence of the target frequency */
    52e4:	60 e0       	ldi	r22, 0x00	; 0
    52e6:	70 e0       	ldi	r23, 0x00	; 0
    52e8:	84 ec       	ldi	r24, 0xC4	; 196
    52ea:	94 e0       	ldi	r25, 0x04	; 4
    52ec:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN8Goertzel10Magnitude2EPi>
    52f0:	e6 2e       	mov	r14, r22
    52f2:	f7 2e       	mov	r15, r23
    52f4:	08 2f       	mov	r16, r24
    52f6:	d9 2e       	mov	r13, r25

						if(magnitudeX > largestX)                           /* Use only the greatest X value */
    52f8:	29 2d       	mov	r18, r9
    52fa:	38 2d       	mov	r19, r8
    52fc:	47 2d       	mov	r20, r7
    52fe:	56 2d       	mov	r21, r6
    5300:	0e 94 df 30 	call	0x61be	; 0x61be <__gesf2>
    5304:	18 16       	cp	r1, r24
    5306:	b4 f4       	brge	.+44     	; 0x5334 <_Z4loopv+0x1ba>
						{
							largestX = magnitudeX;
							if(magnitudeX > threshold)                      /* Only consider X above a certain threshold */
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	34 e2       	ldi	r19, 0x24	; 36
    530c:	44 e7       	ldi	r20, 0x74	; 116
    530e:	59 e4       	ldi	r21, 0x49	; 73
    5310:	6e 2d       	mov	r22, r14
    5312:	7f 2d       	mov	r23, r15
    5314:	80 2f       	mov	r24, r16
    5316:	9d 2d       	mov	r25, r13
    5318:	0e 94 df 30 	call	0x61be	; 0x61be <__gesf2>
    531c:	18 16       	cp	r1, r24
    531e:	34 f4       	brge	.+12     	; 0x532c <_Z4loopv+0x1b2>
							{
								dtmfX = i;
    5320:	4c 2c       	mov	r4, r12
						g_goertzel.SetTargetFrequency(x_frequencies[i]);    /* Initialize the object with the sampling frequency, # of samples and target freq */
						magnitudeX = g_goertzel.Magnitude2(NULL);           /* Check samples for presence of the target frequency */

						if(magnitudeX > largestX)                           /* Use only the greatest X value */
						{
							largestX = magnitudeX;
    5322:	9e 2c       	mov	r9, r14
    5324:	8f 2c       	mov	r8, r15
    5326:	70 2e       	mov	r7, r16
    5328:	6d 2c       	mov	r6, r13
    532a:	04 c0       	rjmp	.+8      	; 0x5334 <_Z4loopv+0x1ba>
    532c:	9e 2c       	mov	r9, r14
    532e:	8f 2c       	mov	r8, r15
    5330:	70 2e       	mov	r7, r16
    5332:	6d 2c       	mov	r6, r13
    5334:	c3 94       	inc	r12
#endif  /* DEBUG_DTMF */
				}

				if(dtmfY >= 0)
				{
					for(int i = 0; i < 4; i++)
    5336:	f4 e0       	ldi	r31, 0x04	; 4
    5338:	cf 12       	cpse	r12, r31
    533a:	ca cf       	rjmp	.-108    	; 0x52d0 <_Z4loopv+0x156>
								lb_send_string(g_tempStr, TRUE);
							}
#endif  /* DEBUG_DTMF */
					}

					if(g_DTMF_sentence_in_progress_ticks || (checkCount < 3) || (clipCount < 50))
    533c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    5340:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    5344:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    5348:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    534c:	89 2b       	or	r24, r25
    534e:	8a 2b       	or	r24, r26
    5350:	8b 2b       	or	r24, r27
    5352:	59 f4       	brne	.+22     	; 0x536a <_Z4loopv+0x1f0>
    5354:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    5358:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    535c:	03 97       	sbiw	r24, 0x03	; 3
    535e:	2c f0       	brlt	.+10     	; 0x536a <_Z4loopv+0x1f0>
    5360:	89 81       	ldd	r24, Y+1	; 0x01
    5362:	9a 81       	ldd	r25, Y+2	; 0x02
    5364:	c2 97       	sbiw	r24, 0x32	; 50
    5366:	0c f0       	brlt	.+2      	; 0x536a <_Z4loopv+0x1f0>
    5368:	4d c0       	rjmp	.+154    	; 0x5404 <_Z4loopv+0x28a>
					{
						if(dtmfX >= 0)
    536a:	44 20       	and	r4, r4
    536c:	0c f4       	brge	.+2      	; 0x5370 <_Z4loopv+0x1f6>
    536e:	70 c0       	rjmp	.+224    	; 0x5450 <_Z4loopv+0x2d6>
						{
							DTMF_key_t newKey = value2DTMFKey(4 * dtmfY + dtmfX);
    5370:	85 2d       	mov	r24, r5
    5372:	88 0f       	add	r24, r24
    5374:	88 0f       	add	r24, r24
    5376:	84 0d       	add	r24, r4
    5378:	0e 94 8f 28 	call	0x511e	; 0x511e <_Z13value2DTMFKeyh>
    537c:	08 2f       	mov	r16, r24
							dtmfDetected = TRUE;

							/* If the same key is detected three times in a row with no silent periods between them then register a new keypress */
							if(lastKey == newKey)
    537e:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_ZZ4loopvE7lastKey>
    5382:	08 13       	cpse	r16, r24
    5384:	3c c0       	rjmp	.+120    	; 0x53fe <_Z4loopv+0x284>
							{
								if(checkCount < 10)
    5386:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    538a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    538e:	8a 30       	cpi	r24, 0x0A	; 10
    5390:	91 05       	cpc	r25, r1
    5392:	2c f4       	brge	.+10     	; 0x539e <_Z4loopv+0x224>
								{
									checkCount++;
    5394:	01 96       	adiw	r24, 0x01	; 1
    5396:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    539a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ4loopvE10checkCount>
								}

								if(checkCount == 3)
    539e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ4loopvE10checkCount>
    53a2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    53a6:	03 97       	sbiw	r24, 0x03	; 3
    53a8:	51 f5       	brne	.+84     	; 0x53fe <_Z4loopv+0x284>
								{
									g_dtmf_detected = TRUE;
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <g_dtmf_detected>
									quietCount = 0;
    53b0:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZZ4loopvE10quietCount+0x1>
    53b4:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZZ4loopvE10quietCount>
									g_lastKey = newKey;
    53b8:	00 93 d1 04 	sts	0x04D1, r16	; 0x8004d1 <g_lastKey>

/*#ifdef DEBUG_DTMF */
									if(lb_enabled())
    53bc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <lb_enabled>
    53c0:	88 23       	and	r24, r24
    53c2:	c9 f0       	breq	.+50     	; 0x53f6 <_Z4loopv+0x27c>
									{
										sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
    53c4:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_lastKey>
    53c8:	1f 92       	push	r1
    53ca:	8f 93       	push	r24
    53cc:	85 e1       	ldi	r24, 0x15	; 21
    53ce:	92 e0       	ldi	r25, 0x02	; 2
    53d0:	9f 93       	push	r25
    53d2:	8f 93       	push	r24
    53d4:	8c e9       	ldi	r24, 0x9C	; 156
    53d6:	94 e0       	ldi	r25, 0x04	; 4
    53d8:	9f 93       	push	r25
    53da:	8f 93       	push	r24
    53dc:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
										lb_send_string(g_tempStr, TRUE);
    53e0:	61 e0       	ldi	r22, 0x01	; 1
    53e2:	8c e9       	ldi	r24, 0x9C	; 156
    53e4:	94 e0       	ldi	r25, 0x04	; 4
    53e6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    53ea:	0f 90       	pop	r0
    53ec:	0f 90       	pop	r0
    53ee:	0f 90       	pop	r0
    53f0:	0f 90       	pop	r0
    53f2:	0f 90       	pop	r0
    53f4:	0f 90       	pop	r0
									}
/*#endif  / * DEBUG_DTMF * / */

									dtmfEntryError = processDTMFdetection(newKey);
    53f6:	80 2f       	mov	r24, r16
    53f8:	0e 94 1d 24 	call	0x483a	; 0x483a <_Z20processDTMFdetection10DTMF_key_t>
    53fc:	18 2f       	mov	r17, r24
										}
#endif  /* DEBUG_DTMF */
								}
							}

							lastKey = newKey;
    53fe:	00 93 3e 04 	sts	0x043E, r16	; 0x80043e <_ZZ4loopvE7lastKey>
    5402:	75 c0       	rjmp	.+234    	; 0x54ee <_Z4loopv+0x374>
						}
					}
					else
					{
						noiseDetected = TRUE;
						g_dtmf_detected = TRUE;
    5404:	81 e0       	ldi	r24, 0x01	; 1
    5406:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <g_dtmf_detected>

						digitalWrite(PIN_LED, ON);
    540a:	61 e0       	ldi	r22, 0x01	; 1
    540c:	80 e1       	ldi	r24, 0x10	; 16
    540e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
/*					g_config_error = NULL_CONFIG;   / * Trigger a new configuration enunciation * / */

						/*#ifdef DEBUG_DTMF */
						if(lb_enabled())
    5412:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <lb_enabled>
    5416:	88 23       	and	r24, r24
    5418:	09 f4       	brne	.+2      	; 0x541c <_Z4loopv+0x2a2>
    541a:	69 c0       	rjmp	.+210    	; 0x54ee <_Z4loopv+0x374>
						{

							sprintf(g_tempStr, "ClipCount=%d\n", clipCount);
    541c:	8a 81       	ldd	r24, Y+2	; 0x02
    541e:	8f 93       	push	r24
    5420:	89 81       	ldd	r24, Y+1	; 0x01
    5422:	8f 93       	push	r24
    5424:	8b e1       	ldi	r24, 0x1B	; 27
    5426:	92 e0       	ldi	r25, 0x02	; 2
    5428:	9f 93       	push	r25
    542a:	8f 93       	push	r24
    542c:	8c e9       	ldi	r24, 0x9C	; 156
    542e:	94 e0       	ldi	r25, 0x04	; 4
    5430:	9f 93       	push	r25
    5432:	8f 93       	push	r24
    5434:	0e 94 2d 34 	call	0x685a	; 0x685a <sprintf>
							lb_send_string(g_tempStr, TRUE);
    5438:	61 e0       	ldi	r22, 0x01	; 1
    543a:	8c e9       	ldi	r24, 0x9C	; 156
    543c:	94 e0       	ldi	r25, 0x04	; 4
    543e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	0f 90       	pop	r0
    5448:	0f 90       	pop	r0
    544a:	0f 90       	pop	r0
    544c:	0f 90       	pop	r0
    544e:	4f c0       	rjmp	.+158    	; 0x54ee <_Z4loopv+0x374>
				}

				if(!dtmfDetected && !noiseDetected) /* Quiet detected */
				{
					static unsigned long lastQuiet = 0;
					unsigned long delta = g_tick_count - lastQuiet;
    5450:	c0 90 cd 04 	lds	r12, 0x04CD	; 0x8004cd <g_tick_count>
    5454:	d0 90 ce 04 	lds	r13, 0x04CE	; 0x8004ce <g_tick_count+0x1>
    5458:	e0 90 cf 04 	lds	r14, 0x04CF	; 0x8004cf <g_tick_count+0x2>
    545c:	f0 90 d0 04 	lds	r15, 0x04D0	; 0x8004d0 <g_tick_count+0x3>
    5460:	80 90 38 04 	lds	r8, 0x0438	; 0x800438 <_ZZ4loopvE9lastQuiet>
    5464:	90 90 39 04 	lds	r9, 0x0439	; 0x800439 <_ZZ4loopvE9lastQuiet+0x1>
    5468:	a0 90 3a 04 	lds	r10, 0x043A	; 0x80043a <_ZZ4loopvE9lastQuiet+0x2>
    546c:	b0 90 3b 04 	lds	r11, 0x043B	; 0x80043b <_ZZ4loopvE9lastQuiet+0x3>

					/* Quieting must be detected at least 3 times in less than 2 seconds before another key can be accepted */
					if(quietCount++ > 2)
    5470:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZZ4loopvE10quietCount>
    5474:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <_ZZ4loopvE10quietCount+0x1>
    5478:	9c 01       	movw	r18, r24
    547a:	2f 5f       	subi	r18, 0xFF	; 255
    547c:	3f 4f       	sbci	r19, 0xFF	; 255
    547e:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <_ZZ4loopvE10quietCount+0x1>
    5482:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <_ZZ4loopvE10quietCount>
    5486:	03 97       	sbiw	r24, 0x03	; 3
    5488:	0c f4       	brge	.+2      	; 0x548c <_Z4loopv+0x312>
    548a:	47 c0       	rjmp	.+142    	; 0x551a <_Z4loopv+0x3a0>
					{
						g_dtmf_detected = FALSE;
    548c:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <g_dtmf_detected>
						if(g_transmissions_disabled && !g_LED_enunciating)
    5490:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    5494:	88 23       	and	r24, r24
    5496:	29 f0       	breq	.+10     	; 0x54a2 <_Z4loopv+0x328>
    5498:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_LED_enunciating>
    549c:	88 23       	and	r24, r24
    549e:	09 f4       	brne	.+2      	; 0x54a2 <_Z4loopv+0x328>
    54a0:	18 c1       	rjmp	.+560    	; 0x56d2 <_Z4loopv+0x558>
						{
							digitalWrite(PIN_LED, OFF);
						}

						if(delta < TIMER2_SECONDS_2)
    54a2:	c8 18       	sub	r12, r8
    54a4:	d9 08       	sbc	r13, r9
    54a6:	ea 08       	sbc	r14, r10
    54a8:	fb 08       	sbc	r15, r11
    54aa:	27 e2       	ldi	r18, 0x27	; 39
    54ac:	c2 16       	cp	r12, r18
    54ae:	2b e0       	ldi	r18, 0x0B	; 11
    54b0:	d2 06       	cpc	r13, r18
    54b2:	e1 04       	cpc	r14, r1
    54b4:	f1 04       	cpc	r15, r1
    54b6:	20 f4       	brcc	.+8      	; 0x54c0 <_Z4loopv+0x346>
						{
							checkCount = 0;
    54b8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ4loopvE10checkCount+0x1>
    54bc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ4loopvE10checkCount>
						}

						quietCount = 0;
    54c0:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZZ4loopvE10quietCount+0x1>
    54c4:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZZ4loopvE10quietCount>
						lastQuiet = g_tick_count;
    54c8:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_tick_count>
    54cc:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <g_tick_count+0x1>
    54d0:	a0 91 cf 04 	lds	r26, 0x04CF	; 0x8004cf <g_tick_count+0x2>
    54d4:	b0 91 d0 04 	lds	r27, 0x04D0	; 0x8004d0 <g_tick_count+0x3>
    54d8:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <_ZZ4loopvE9lastQuiet>
    54dc:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <_ZZ4loopvE9lastQuiet+0x1>
    54e0:	a0 93 3a 04 	sts	0x043A, r26	; 0x80043a <_ZZ4loopvE9lastQuiet+0x2>
    54e4:	b0 93 3b 04 	sts	0x043B, r27	; 0x80043b <_ZZ4loopvE9lastQuiet+0x3>
						lastKey = '\0';
    54e8:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZZ4loopvE7lastKey>
    54ec:	16 c0       	rjmp	.+44     	; 0x551a <_Z4loopv+0x3a0>
					}
				}
				else if(g_tone_duration_ticks >= TIMER2_SECONDS_5)  /* The most likely cause of such a long tone is loud noise */
    54ee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <g_tone_duration_ticks>
    54f2:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <g_tone_duration_ticks+0x1>
    54f6:	82 3e       	cpi	r24, 0xE2	; 226
    54f8:	9b 41       	sbci	r25, 0x1B	; 27
    54fa:	78 f0       	brcs	.+30     	; 0x551a <_Z4loopv+0x3a0>
				{
					g_dtmf_detected = FALSE;
    54fc:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <g_dtmf_detected>
					g_config_error = NULL_CONFIG;
    5500:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>

					if(g_transmissions_disabled && !g_LED_enunciating)
    5504:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    5508:	88 23       	and	r24, r24
    550a:	29 f0       	breq	.+10     	; 0x5516 <_Z4loopv+0x39c>
    550c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <g_LED_enunciating>
    5510:	88 23       	and	r24, r24
    5512:	09 f4       	brne	.+2      	; 0x5516 <_Z4loopv+0x39c>
    5514:	e3 c0       	rjmp	.+454    	; 0x56dc <_Z4loopv+0x562>
					{
						digitalWrite(PIN_LED, OFF);
					}

					lastKey = '\0';
    5516:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZZ4loopvE7lastKey>
				}

				ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    551a:	ea e7       	ldi	r30, 0x7A	; 122
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	80 81       	ld	r24, Z
    5520:	88 60       	ori	r24, 0x08	; 8
    5522:	80 83       	st	Z, r24
				ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    5524:	80 81       	ld	r24, Z
    5526:	80 64       	ori	r24, 0x40	; 64
    5528:	80 83       	st	Z, r24
			}
		}

	if(!g_on_the_air)
    552a:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_on_the_air>
    552e:	81 11       	cpse	r24, r1
    5530:	e7 c0       	rjmp	.+462    	; 0x5700 <_Z4loopv+0x586>
	{
		if(g_dtmf_error_countdown)
    5532:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_dtmf_error_countdown>
    5536:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <g_dtmf_error_countdown+0x1>
    553a:	89 2b       	or	r24, r25
    553c:	19 f0       	breq	.+6      	; 0x5544 <_Z4loopv+0x3ca>
		{
			g_dtmf_detected = FALSE;
    553e:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <g_dtmf_detected>
    5542:	de c0       	rjmp	.+444    	; 0x5700 <_Z4loopv+0x586>
		}
		else if(dtmfEntryError)
    5544:	11 23       	and	r17, r17
    5546:	01 f1       	breq	.+64     	; 0x5588 <_Z4loopv+0x40e>
		{
			BOOL repeat = FALSE;
    5548:	1b 82       	std	Y+3, r1	; 0x03
			makeMorse(DTMF_ERROR_BLINK_PATTERN, &repeat, NULL);
    554a:	40 e0       	ldi	r20, 0x00	; 0
    554c:	50 e0       	ldi	r21, 0x00	; 0
    554e:	be 01       	movw	r22, r28
    5550:	6d 5f       	subi	r22, 0xFD	; 253
    5552:	7f 4f       	sbci	r23, 0xFF	; 255
    5554:	89 e2       	ldi	r24, 0x29	; 41
    5556:	92 e0       	ldi	r25, 0x02	; 2
    5558:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
			g_code_throttle = THROTTLE_VAL_FROM_WPM(30);
    555c:	8e e2       	ldi	r24, 0x2E	; 46
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_code_throttle+0x1>
    5564:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_code_throttle>
			g_LED_enunciating = TRUE;
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <g_LED_enunciating>
			g_dtmf_detected = FALSE;
    556e:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <g_dtmf_detected>
			g_dtmf_error_countdown = TIMER2_SECONDS_3;
    5572:	8b eb       	ldi	r24, 0xBB	; 187
    5574:	90 e1       	ldi	r25, 0x10	; 16
    5576:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <g_dtmf_error_countdown+0x1>
    557a:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_dtmf_error_countdown>
			g_LED_Enunciation_holdoff = 0;
    557e:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    5582:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <g_LED_Enunciation_holdoff>
    5586:	bc c0       	rjmp	.+376    	; 0x5700 <_Z4loopv+0x586>
		}
		else if(g_dtmf_detected)
    5588:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <g_dtmf_detected>
    558c:	88 23       	and	r24, r24
    558e:	39 f0       	breq	.+14     	; 0x559e <_Z4loopv+0x424>
		{
			digitalWrite(PIN_LED, ON);
    5590:	61 e0       	ldi	r22, 0x01	; 1
    5592:	80 e1       	ldi	r24, 0x10	; 16
    5594:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
			g_config_error = NULL_CONFIG;   /* Trigger a new configuration enunciation */
    5598:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_config_error>
    559c:	b1 c0       	rjmp	.+354    	; 0x5700 <_Z4loopv+0x586>
		}
		else if(g_transmissions_disabled)
    559e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_transmissions_disabled>
    55a2:	88 23       	and	r24, r24
    55a4:	09 f4       	brne	.+2      	; 0x55a8 <_Z4loopv+0x42e>
    55a6:	6f c0       	rjmp	.+222    	; 0x5686 <_Z4loopv+0x50c>
		{
			if(g_LED_timeout_countdown && !g_LED_Enunciation_holdoff && !g_DTMF_sentence_in_progress_ticks)
    55a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_LED_timeout_countdown>
    55ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_LED_timeout_countdown+0x1>
    55b0:	89 2b       	or	r24, r25
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <_Z4loopv+0x43c>
    55b4:	a3 c0       	rjmp	.+326    	; 0x56fc <_Z4loopv+0x582>
    55b6:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <g_LED_Enunciation_holdoff>
    55ba:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <g_LED_Enunciation_holdoff+0x1>
    55be:	89 2b       	or	r24, r25
    55c0:	09 f0       	breq	.+2      	; 0x55c4 <_Z4loopv+0x44a>
    55c2:	9c c0       	rjmp	.+312    	; 0x56fc <_Z4loopv+0x582>
    55c4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <g_DTMF_sentence_in_progress_ticks>
    55c8:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <g_DTMF_sentence_in_progress_ticks+0x1>
    55cc:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <g_DTMF_sentence_in_progress_ticks+0x2>
    55d0:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <g_DTMF_sentence_in_progress_ticks+0x3>
    55d4:	89 2b       	or	r24, r25
    55d6:	8a 2b       	or	r24, r26
    55d8:	8b 2b       	or	r24, r27
    55da:	09 f4       	brne	.+2      	; 0x55de <_Z4loopv+0x464>
    55dc:	84 c0       	rjmp	.+264    	; 0x56e6 <_Z4loopv+0x56c>
    55de:	8e c0       	rjmp	.+284    	; 0x56fc <_Z4loopv+0x582>
				ConfigurationState_t hold_config_err = g_config_error;
				g_config_error = clockConfigurationCheck();

				if(g_config_error != hold_config_err)
				{
					if(g_config_error == CONFIGURATION_ERROR)
    55e0:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <g_config_error>
    55e4:	82 30       	cpi	r24, 0x02	; 2
    55e6:	a1 f4       	brne	.+40     	; 0x5610 <_Z4loopv+0x496>
					{
						BOOL repeat = TRUE;
    55e8:	11 e0       	ldi	r17, 0x01	; 1
    55ea:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    55ec:	40 e0       	ldi	r20, 0x00	; 0
    55ee:	50 e0       	ldi	r21, 0x00	; 0
    55f0:	be 01       	movw	r22, r28
    55f2:	6d 5f       	subi	r22, 0xFD	; 253
    55f4:	7f 4f       	sbci	r23, 0xFF	; 255
    55f6:	82 e3       	ldi	r24, 0x32	; 50
    55f8:	92 e0       	ldi	r25, 0x02	; 2
    55fa:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    55fe:	8c e8       	ldi	r24, 0x8C	; 140
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_code_throttle+0x1>
    5606:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_code_throttle>
						g_LED_enunciating = TRUE;
    560a:	10 93 55 05 	sts	0x0555, r17	; 0x800555 <g_LED_enunciating>
    560e:	78 c0       	rjmp	.+240    	; 0x5700 <_Z4loopv+0x586>
					}
					else if(g_config_error == WAITING_FOR_START)
    5610:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <g_config_error>
    5614:	81 30       	cpi	r24, 0x01	; 1
    5616:	a1 f4       	brne	.+40     	; 0x5640 <_Z4loopv+0x4c6>
					{
						BOOL repeat = TRUE;
    5618:	11 e0       	ldi	r17, 0x01	; 1
    561a:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(WAITING_BLINK_PATTERN, &repeat, NULL);
    561c:	40 e0       	ldi	r20, 0x00	; 0
    561e:	50 e0       	ldi	r21, 0x00	; 0
    5620:	be 01       	movw	r22, r28
    5622:	6d 5f       	subi	r22, 0xFD	; 253
    5624:	7f 4f       	sbci	r23, 0xFF	; 255
    5626:	85 e3       	ldi	r24, 0x35	; 53
    5628:	92 e0       	ldi	r25, 0x02	; 2
    562a:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(20);
    562e:	86 e4       	ldi	r24, 0x46	; 70
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_code_throttle+0x1>
    5636:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_code_throttle>
						g_LED_enunciating = TRUE;
    563a:	10 93 55 05 	sts	0x0555, r17	; 0x800555 <g_LED_enunciating>
    563e:	60 c0       	rjmp	.+192    	; 0x5700 <_Z4loopv+0x586>
					}
					else if((g_config_error == SCHEDULED_EVENT_WILL_NEVER_RUN) || (g_config_error == SCHEDULED_EVENT_DID_NOT_START))
    5640:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <g_config_error>
    5644:	84 30       	cpi	r24, 0x04	; 4
    5646:	21 f0       	breq	.+8      	; 0x5650 <_Z4loopv+0x4d6>
    5648:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <g_config_error>
    564c:	83 30       	cpi	r24, 0x03	; 3
    564e:	a1 f4       	brne	.+40     	; 0x5678 <_Z4loopv+0x4fe>
					{
						BOOL repeat = TRUE;
    5650:	11 e0       	ldi	r17, 0x01	; 1
    5652:	1b 83       	std	Y+3, r17	; 0x03
						makeMorse(ERROR_BLINK_PATTERN, &repeat, NULL);
    5654:	40 e0       	ldi	r20, 0x00	; 0
    5656:	50 e0       	ldi	r21, 0x00	; 0
    5658:	be 01       	movw	r22, r28
    565a:	6d 5f       	subi	r22, 0xFD	; 253
    565c:	7f 4f       	sbci	r23, 0xFF	; 255
    565e:	82 e3       	ldi	r24, 0x32	; 50
    5660:	92 e0       	ldi	r25, 0x02	; 2
    5662:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <makeMorse>
						g_code_throttle = THROTTLE_VAL_FROM_WPM(10);
    5666:	8c e8       	ldi	r24, 0x8C	; 140
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <g_code_throttle+0x1>
    566e:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <g_code_throttle>
						g_LED_enunciating = TRUE;
    5672:	10 93 55 05 	sts	0x0555, r17	; 0x800555 <g_LED_enunciating>
    5676:	44 c0       	rjmp	.+136    	; 0x5700 <_Z4loopv+0x586>
					}
					else
					{
						g_LED_enunciating = FALSE;
    5678:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_LED_enunciating>
						digitalWrite(PIN_LED, OFF); /* ensure LED is off */
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	80 e1       	ldi	r24, 0x10	; 16
    5680:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    5684:	3d c0       	rjmp	.+122    	; 0x5700 <_Z4loopv+0x586>
				g_LED_enunciating = FALSE;
			}
		}
		else
		{
			g_LED_enunciating = FALSE;
    5686:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_LED_enunciating>
			digitalWrite(PIN_LED, OFF); /* ensure LED is off */
    568a:	60 e0       	ldi	r22, 0x00	; 0
    568c:	80 e1       	ldi	r24, 0x10	; 16
    568e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
		}
	}
#endif  /* !INIT_EEPROM_ONLY */
}
    5692:	36 c0       	rjmp	.+108    	; 0x5700 <_Z4loopv+0x586>
    5694:	0f 2e       	mov	r0, r31
    5696:	f1 e5       	ldi	r31, 0x51	; 81
    5698:	af 2e       	mov	r10, r31
    569a:	f2 e0       	ldi	r31, 0x02	; 2
    569c:	bf 2e       	mov	r11, r31
    569e:	f0 2d       	mov	r31, r0

/***********************************************************************
 *   Here is the main loop
 ************************************************************************/
void loop()
{
    56a0:	c1 2c       	mov	r12, r1
    56a2:	91 2c       	mov	r9, r1
    56a4:	81 2c       	mov	r8, r1
    56a6:	71 2c       	mov	r7, r1
    56a8:	61 2c       	mov	r6, r1
    56aa:	55 24       	eor	r5, r5
    56ac:	5a 94       	dec	r5
    56ae:	d8 cd       	rjmp	.-1104   	; 0x5260 <_Z4loopv+0xe6>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(dtmfY >= 0)
    56b0:	55 20       	and	r5, r5
    56b2:	0c f4       	brge	.+2      	; 0x56b6 <_Z4loopv+0x53c>
    56b4:	cd ce       	rjmp	.-614    	; 0x5450 <_Z4loopv+0x2d6>
    56b6:	0f 2e       	mov	r0, r31
    56b8:	f1 e6       	ldi	r31, 0x61	; 97
    56ba:	af 2e       	mov	r10, r31
    56bc:	f2 e0       	ldi	r31, 0x02	; 2
    56be:	bf 2e       	mov	r11, r31
    56c0:	f0 2d       	mov	r31, r0
    56c2:	c1 2c       	mov	r12, r1
    56c4:	91 2c       	mov	r9, r1
    56c6:	81 2c       	mov	r8, r1
    56c8:	71 2c       	mov	r7, r1
    56ca:	61 2c       	mov	r6, r1
    56cc:	44 24       	eor	r4, r4
    56ce:	4a 94       	dec	r4
    56d0:	ff cd       	rjmp	.-1026   	; 0x52d0 <_Z4loopv+0x156>
					if(quietCount++ > 2)
					{
						g_dtmf_detected = FALSE;
						if(g_transmissions_disabled && !g_LED_enunciating)
						{
							digitalWrite(PIN_LED, OFF);
    56d2:	60 e0       	ldi	r22, 0x00	; 0
    56d4:	80 e1       	ldi	r24, 0x10	; 16
    56d6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    56da:	e3 ce       	rjmp	.-570    	; 0x54a2 <_Z4loopv+0x328>
					g_dtmf_detected = FALSE;
					g_config_error = NULL_CONFIG;

					if(g_transmissions_disabled && !g_LED_enunciating)
					{
						digitalWrite(PIN_LED, OFF);
    56dc:	60 e0       	ldi	r22, 0x00	; 0
    56de:	80 e1       	ldi	r24, 0x10	; 16
    56e0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>
    56e4:	18 cf       	rjmp	.-464    	; 0x5516 <_Z4loopv+0x39c>
		}
		else if(g_transmissions_disabled)
		{
			if(g_LED_timeout_countdown && !g_LED_Enunciation_holdoff && !g_DTMF_sentence_in_progress_ticks)
			{
				ConfigurationState_t hold_config_err = g_config_error;
    56e6:	10 91 06 05 	lds	r17, 0x0506	; 0x800506 <g_config_error>
				g_config_error = clockConfigurationCheck();
    56ea:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z23clockConfigurationCheckv>
    56ee:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <g_config_error>

				if(g_config_error != hold_config_err)
    56f2:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <g_config_error>
    56f6:	18 13       	cpse	r17, r24
    56f8:	73 cf       	rjmp	.-282    	; 0x55e0 <_Z4loopv+0x466>
    56fa:	02 c0       	rjmp	.+4      	; 0x5700 <_Z4loopv+0x586>
					}
				}
			}
			else
			{
				g_LED_enunciating = FALSE;
    56fc:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <g_LED_enunciating>
			g_LED_enunciating = FALSE;
			digitalWrite(PIN_LED, OFF); /* ensure LED is off */
		}
	}
#endif  /* !INIT_EEPROM_ONLY */
}
    5700:	0f 90       	pop	r0
    5702:	0f 90       	pop	r0
    5704:	0f 90       	pop	r0
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	1f 91       	pop	r17
    570c:	0f 91       	pop	r16
    570e:	ff 90       	pop	r15
    5710:	ef 90       	pop	r14
    5712:	df 90       	pop	r13
    5714:	cf 90       	pop	r12
    5716:	bf 90       	pop	r11
    5718:	af 90       	pop	r10
    571a:	9f 90       	pop	r9
    571c:	8f 90       	pop	r8
    571e:	7f 90       	pop	r7
    5720:	6f 90       	pop	r6
    5722:	5f 90       	pop	r5
    5724:	4f 90       	pop	r4
    5726:	08 95       	ret

00005728 <main>:
	int main(void)
#else
	void setup()
#endif  /* ATMEL_STUDIO_7 */
{
	pinMode(PIN_SYNC, INPUT_PULLUP);
    5728:	63 e0       	ldi	r22, 0x03	; 3
    572a:	81 e1       	ldi	r24, 0x11	; 17
    572c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>

	pinMode(PIN_LED, OUTPUT);                             /* This is the enunciator LED */
    5730:	61 e0       	ldi	r22, 0x01	; 1
    5732:	80 e1       	ldi	r24, 0x10	; 16
    5734:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	digitalWrite(PIN_LED, OFF);
    5738:	60 e0       	ldi	r22, 0x00	; 0
    573a:	80 e1       	ldi	r24, 0x10	; 16
    573c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    5740:	61 e0       	ldi	r22, 0x01	; 1
    5742:	86 e0       	ldi	r24, 0x06	; 6
    5744:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    5748:	60 e0       	ldi	r22, 0x00	; 0
    574a:	86 e0       	ldi	r24, 0x06	; 6
    574c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    5750:	61 e0       	ldi	r22, 0x01	; 1
    5752:	85 e0       	ldi	r24, 0x05	; 5
    5754:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    5758:	60 e0       	ldi	r22, 0x00	; 0
    575a:	85 e0       	ldi	r24, 0x05	; 5
    575c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    5760:	61 e0       	ldi	r22, 0x01	; 1
    5762:	84 e0       	ldi	r24, 0x04	; 4
    5764:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	84 e0       	ldi	r24, 0x04	; 4
    576c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    5770:	60 e0       	ldi	r22, 0x00	; 0
    5772:	84 e1       	ldi	r24, 0x14	; 20
    5774:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    5778:	60 e0       	ldi	r22, 0x00	; 0
    577a:	85 e1       	ldi	r24, 0x15	; 21
    577c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>

	pinMode(PIN_PWDN, OUTPUT);
    5780:	61 e0       	ldi	r22, 0x01	; 1
    5782:	87 e0       	ldi	r24, 0x07	; 7
    5784:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	digitalWrite(PIN_PWDN, ON);
    5788:	61 e0       	ldi	r22, 0x01	; 1
    578a:	87 e0       	ldi	r24, 0x07	; 7
    578c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

	pinMode(PIN_SCL, INPUT_PULLUP);
    5790:	63 e0       	ldi	r22, 0x03	; 3
    5792:	83 e1       	ldi	r24, 0x13	; 19
    5794:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
	pinMode(PIN_SDA, INPUT_PULLUP);
    5798:	63 e0       	ldi	r22, 0x03	; 3
    579a:	82 e1       	ldi	r24, 0x12	; 18
    579c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>

	pinMode(PIN_RTC_SQW, INPUT_PULLUP);
    57a0:	63 e0       	ldi	r22, 0x03	; 3
    57a2:	82 e0       	ldi	r24, 0x02	; 2
    57a4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>

	linkbus_disable();
    57a8:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <linkbus_disable>

		pinMode(PIN_UNUSED_8, OUTPUT);
		digitalWrite(PIN_UNUSED_8, OFF);
#else
		/*	Set unused port pins */
		pinMode(PIN_UNUSED_1, OUTPUT);
    57ac:	61 e0       	ldi	r22, 0x01	; 1
    57ae:	83 e0       	ldi	r24, 0x03	; 3
    57b0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
		digitalWrite(PIN_UNUSED_1, OFF);
    57b4:	60 e0       	ldi	r22, 0x00	; 0
    57b6:	83 e0       	ldi	r24, 0x03	; 3
    57b8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

		pinMode(PIN_UNUSED_2, OUTPUT);
    57bc:	61 e0       	ldi	r22, 0x01	; 1
    57be:	8e e0       	ldi	r24, 0x0E	; 14
    57c0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
		digitalWrite(PIN_UNUSED_2, OFF);
    57c4:	60 e0       	ldi	r22, 0x00	; 0
    57c6:	8e e0       	ldi	r24, 0x0E	; 14
    57c8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

		pinMode(PIN_UNUSED_3, OUTPUT);
    57cc:	61 e0       	ldi	r22, 0x01	; 1
    57ce:	8f e0       	ldi	r24, 0x0F	; 15
    57d0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinMode>
		digitalWrite(PIN_UNUSED_3, OFF);
    57d4:	60 e0       	ldi	r22, 0x00	; 0
    57d6:	8f e0       	ldi	r24, 0x0F	; 15
    57d8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <digitalWrite>

		/*	Set attenuator control port pins */
		DDRB |= 0x3F;
    57dc:	84 b1       	in	r24, 0x04	; 4
    57de:	8f 63       	ori	r24, 0x3F	; 63
    57e0:	84 b9       	out	0x04, r24	; 4
		PORTB &= 0xC0;
    57e2:	85 b1       	in	r24, 0x05	; 5
    57e4:	80 7c       	andi	r24, 0xC0	; 192
    57e6:	85 b9       	out	0x05, r24	; 5
#endif  /* !SUPPORT_ONLY_80M */

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars();                                 /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    57e8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <i2c_init>
		BOOL eepromErr = ee_mgr.readNonVols();
    57ec:	84 e6       	ldi	r24, 0x64	; 100
    57ee:	95 e0       	ldi	r25, 0x05	; 5
    57f0:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN13EepromManager11readNonVolsEv>
    57f4:	c8 2f       	mov	r28, r24
		setUpSampling(AUDIO_SAMPLING, TRUE);
    57f6:	61 e0       	ldi	r22, 0x01	; 1
    57f8:	80 e0       	ldi	r24, 0x00	; 0
    57fa:	0e 94 ac 19 	call	0x3358	; 0x3358 <_Z13setUpSampling12ADCChannel_th>
#endif

	cli();
    57fe:	f8 94       	cli

	/*******************************************************************
	 *  TIMER2 is for periodic interrupts to drive Morse code generation
	 *  Reset control registers */
	TCCR2A = 0;
    5800:	a0 eb       	ldi	r26, 0xB0	; 176
    5802:	b0 e0       	ldi	r27, 0x00	; 0
    5804:	1c 92       	st	X, r1
	TCCR2B = 0;
    5806:	e1 eb       	ldi	r30, 0xB1	; 177
    5808:	f0 e0       	ldi	r31, 0x00	; 0
    580a:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    580c:	8c 91       	ld	r24, X
    580e:	82 60       	ori	r24, 0x02	; 2
    5810:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    5812:	80 81       	ld	r24, Z
    5814:	87 60       	ori	r24, 0x07	; 7
    5816:	80 83       	st	Z, r24

#if F_CPU == 16000000UL
		OCR2A = 0x0C;                                   /* set frequency to ~300 Hz (0x0c) */
    5818:	8c e0       	ldi	r24, 0x0C	; 12
    581a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
#else
		OCR2A = 0x06;                                   /* set frequency to ~300 Hz (0x0c) */
#endif

	OCR2B = 0x00;
    581e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    5822:	e6 eb       	ldi	r30, 0xB6	; 182
    5824:	f0 e0       	ldi	r31, 0x00	; 0
    5826:	80 81       	ld	r24, Z
    5828:	8f 7d       	andi	r24, 0xDF	; 223
    582a:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    582c:	e0 e7       	ldi	r30, 0x70	; 112
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    5832:	80 81       	ld	r24, Z
    5834:	84 60       	ori	r24, 0x04	; 4
    5836:	80 83       	st	Z, r24

	/*******************************************************************
	 *  Timer 1 is used for controlling the attenuator for AM generation
	 *  set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                 /* set entire TCCR1A register to 0 */
    5838:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                 /* same for TCCR1B */
    583c:	e1 e8       	ldi	r30, 0x81	; 129
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	10 82       	st	Z, r1
	TCNT1 = 0;                  /* initialize counter value to 0 */
    5842:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    5846:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
#if !SUPPORT_ONLY_80M
		/* turn on CTC mode */
		TCCR1B |= (1 << WGM12);
    584a:	80 81       	ld	r24, Z
    584c:	88 60       	ori	r24, 0x08	; 8
    584e:	80 83       	st	Z, r24
		/* Set CS10 bit for no prescaling */
		TCCR1B |= (1 << CS10);
    5850:	80 81       	ld	r24, Z
    5852:	81 60       	ori	r24, 0x01	; 1
    5854:	80 83       	st	Z, r24
#endif  /* !SUPPORT_ONLY_80M */

	/********************************************************************/
	/* Timer 0 is for FM audio tone generation and control
	 *  Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    5856:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    5858:	84 b5       	in	r24, 0x24	; 36
    585a:	82 60       	ori	r24, 0x02	; 2
    585c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    585e:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    5860:	85 b5       	in	r24, 0x25	; 37
    5862:	84 60       	ori	r24, 0x04	; 4
    5864:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    5866:	8f e2       	ldi	r24, 0x2F	; 47
    5868:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    586a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

	/*******************************************************************
	 *  Pushbutton pin change interrupt */
	PCMSK2 = 0x00;
    586e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	PCMSK1 = 0x00;
    5872:	ec e6       	ldi	r30, 0x6C	; 108
    5874:	f0 e0       	ldi	r31, 0x00	; 0
    5876:	10 82       	st	Z, r1
	PCMSK1 = (1 << PCINT11);    /* Enable PCINT11 */
    5878:	88 e0       	ldi	r24, 0x08	; 8
    587a:	80 83       	st	Z, r24
	PCICR = 0x00;
    587c:	e8 e6       	ldi	r30, 0x68	; 104
    587e:	f0 e0       	ldi	r31, 0x00	; 0
    5880:	10 82       	st	Z, r1
	PCICR = (1 << PCIE1);       /* Enable pin change interrupt 1 */
    5882:	82 e0       	ldi	r24, 0x02	; 2
    5884:	80 83       	st	Z, r24
#if SUPPORT_ONLY_80M
		setAMToneFrequency(AM_DISABLED);
#else
		/*******************************************************************
		*  AM attenuator initialization (also affects FM tone enable)     */
		setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    5886:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <g_AM_audio_frequency>
    588a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z18setAMToneFrequency14AM_Tone_Freq_t>
#endif /* !SUPPORT_ONLY_80M */

	sei();                                          /* Enable interrupts */
    588e:	78 94       	sei

	linkbus_init(BAUD);                             /* Start the Link Bus serial comms */
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	71 ee       	ldi	r23, 0xE1	; 225
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	0e 94 aa 0c 	call	0x1954	; 0x1954 <linkbus_init>

#ifndef TRANQUILIZE_WATCHDOG
		wdt_init(WD_SW_RESETS);
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8wdt_init7WDReset>
		wdt_reset();                                /* HW watchdog */
    58a2:	a8 95       	wdr
#endif /* TRANQUILIZE_WATCHDOG */

	g_reset_button_held = !digitalRead(PIN_SYNC);
    58a4:	81 e1       	ldi	r24, 0x11	; 17
    58a6:	0e 94 34 02 	call	0x468	; 0x468 <digitalRead>
    58aa:	91 e0       	ldi	r25, 0x01	; 1
    58ac:	81 11       	cpse	r24, r1
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <g_reset_button_held>
		while(1) /* Wait forever */
		{
			;
		}
#else
		if(eepromErr)
    58b4:	cc 23       	and	r28, r28
    58b6:	29 f0       	breq	.+10     	; 0x58c2 <main+0x19a>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    58b8:	61 e0       	ldi	r22, 0x01	; 1
    58ba:	82 e4       	ldi	r24, 0x42	; 66
    58bc:	92 e0       	ldi	r25, 0x02	; 2
    58be:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lb_send_string>
		}

#if INCLUDE_RV3028_SUPPORT
		BOOL result = RTC_1s_sqw(ON);
#else
		RTC_1s_sqw(ON);
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z10RTC_1s_sqwh>
#endif

#endif  /* !INIT_EEPROM_ONLY */

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    58c8:	84 e6       	ldi	r24, 0x64	; 100
    58ca:	95 e0       	ldi	r25, 0x05	; 5
    58cc:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN13EepromManager9send_HelpEv>
		{
			lb_send_string(g_tempStr, TRUE);
		}
#endif

		reportConfigErrors();
    58d0:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    58d4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <lb_send_NewPrompt>

#endif  /* #if INIT_EEPROM_ONLY */

	startEventNow(POWER_UP);
    58d8:	80 e0       	ldi	r24, 0x00	; 0
    58da:	0e 94 02 1a 	call	0x3404	; 0x3404 <_Z13startEventNow19EventActionSource_t>

	/*******************************************************************
	 *  INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    58de:	e9 e6       	ldi	r30, 0x69	; 105
    58e0:	f0 e0       	ldi	r31, 0x00	; 0
    58e2:	80 81       	ld	r24, Z
    58e4:	82 60       	ori	r24, 0x02	; 2
    58e6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    58e8:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef ATMEL_STUDIO_7
		while(1)
		{
			loop();
    58ea:	0e 94 bd 28 	call	0x517a	; 0x517a <_Z4loopv>
    58ee:	fd cf       	rjmp	.-6      	; 0x58ea <main+0x1c2>

000058f0 <_GLOBAL__sub_I_ee_mgr>:
	{
		key = D_KEY;
	}

	return( key);
}
    58f0:	0f 93       	push	r16
    58f2:	1f 93       	push	r17
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

#include <avr/wdt.h>

EepromManager ee_mgr;
    58f4:	84 e6       	ldi	r24, 0x64	; 100
    58f6:	95 e0       	ldi	r25, 0x05	; 5
    58f8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN13EepromManagerC1Ev>
volatile unsigned int g_tone_duration_ticks = 0;
volatile unsigned int g_LED_Enunciation_holdoff = 0;
volatile unsigned long g_DTMF_sentence_in_progress_ticks = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    58fc:	00 e0       	ldi	r16, 0x00	; 0
    58fe:	18 e7       	ldi	r17, 0x78	; 120
    5900:	26 e9       	ldi	r18, 0x96	; 150
    5902:	36 e4       	ldi	r19, 0x46	; 70
    5904:	40 e0       	ldi	r20, 0x00	; 0
    5906:	50 e0       	ldi	r21, 0x00	; 0
    5908:	69 e4       	ldi	r22, 0x49	; 73
    590a:	73 e4       	ldi	r23, 0x43	; 67
    590c:	84 ec       	ldi	r24, 0xC4	; 196
    590e:	94 e0       	ldi	r25, 0x04	; 4
    5910:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN8GoertzelC1Eff>
	{
		key = D_KEY;
	}

	return( key);
}
    5914:	1f 91       	pop	r17
    5916:	0f 91       	pop	r16
    5918:	08 95       	ret

0000591a <_GLOBAL__sub_D_ee_mgr>:
volatile unsigned int g_tone_duration_ticks = 0;
volatile unsigned int g_LED_Enunciation_holdoff = 0;
volatile unsigned long g_DTMF_sentence_in_progress_ticks = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    591a:	84 ec       	ldi	r24, 0xC4	; 196
    591c:	94 e0       	ldi	r25, 0x04	; 4
    591e:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN8GoertzelD1Ev>
#include "ardooweeno.h"
#endif  /* ATMEL_STUDIO_7 */

#include <avr/wdt.h>

EepromManager ee_mgr;
    5922:	84 e6       	ldi	r24, 0x64	; 100
    5924:	95 e0       	ldi	r25, 0x05	; 5
    5926:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN13EepromManagerD1Ev>
    592a:	08 95       	ret

0000592c <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	c = toupper(c);
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	0e 94 e7 33 	call	0x67ce	; 0x67ce <toupper>

	switch( c )
    5932:	fc 01       	movw	r30, r24
    5934:	ff 27       	eor	r31, r31
    5936:	b0 97       	sbiw	r30, 0x20	; 32
    5938:	ed 35       	cpi	r30, 0x5D	; 93
    593a:	f1 05       	cpc	r31, r1
    593c:	08 f0       	brcs	.+2      	; 0x5940 <_Z12getMorseCharc+0x14>
    593e:	e4 c0       	rjmp	.+456    	; 0x5b08 <_Z12getMorseCharc+0x1dc>
    5940:	e5 55       	subi	r30, 0x55	; 85
    5942:	ff 4f       	sbci	r31, 0xFF	; 255
    5944:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    5948:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    594a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    594c:	61 e0       	ldi	r22, 0x01	; 1
    594e:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5950:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    5952:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5954:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    5956:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    5958:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    595a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    595c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    595e:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    5960:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    5962:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5964:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    5966:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    5968:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    596a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    596c:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    596e:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5970:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    5972:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5974:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    5976:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    5978:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    597a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    597c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    597e:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    5980:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    5982:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5984:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    5986:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    5988:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    598a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    598c:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    598e:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    5990:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    5992:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5994:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    5996:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    5998:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    599a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    599c:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    599e:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    59a0:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    59a2:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    59a4:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    59a6:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    59a8:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    59aa:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    59ac:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    59ae:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    59b0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    59b2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    59b4:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    59b6:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    59b8:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    59ba:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    59bc:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    59be:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    59c0:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    59c2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    59c4:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    59c6:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    59c8:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    59ca:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    59cc:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    59ce:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    59d0:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    59d2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    59d4:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    59d6:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    59d8:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    59da:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    59dc:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    59de:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    59e0:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    59e2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    59e4:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    59e6:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    59e8:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    59ea:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    59ec:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    59ee:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    59f0:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    59f2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    59f4:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    59f6:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    59f8:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    59fa:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    59fc:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    59fe:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    5a00:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    5a02:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5a04:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    5a06:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    5a08:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    5a0a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5a0c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    5a0e:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    5a10:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    5a12:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    5a14:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    5a16:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    5a18:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    5a1a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5a1c:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    5a1e:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5a20:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    5a22:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    5a24:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    5a26:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5a28:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    5a2a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    5a2c:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5a2e:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5a30:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    5a32:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    5a34:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5a36:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    5a38:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    5a3a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5a3c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    5a3e:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5a40:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    5a42:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5a44:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5a46:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5a48:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    5a4a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5a4c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5a4e:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5a50:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    5a52:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5a54:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    5a56:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    5a58:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    5a5a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    5a5c:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    5a5e:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5a60:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    5a62:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    5a64:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5a66:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5a68:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    5a6a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    5a6c:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5a6e:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5a70:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    5a72:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    5a74:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    5a76:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5a78:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    5a7a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5a7c:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5a7e:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5a80:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    5a82:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    5a84:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5a86:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5a88:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    5a8a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5a8c:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5a8e:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    5a90:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    5a92:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5a94:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    5a96:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    5a98:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    5a9a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    5a9c:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    5a9e:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    5aa0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    5aa2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5aa4:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    5aa6:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5aa8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    5aaa:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5aac:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5aae:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    5ab0:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    5ab2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    5ab4:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    5ab6:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5ab8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    5aba:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    5abc:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5abe:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    5ac0:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    5ac2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    5ac4:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    5ac6:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5ac8:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    5aca:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    5acc:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    5ace:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5ad0:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    5ad2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    5ad4:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5ad6:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    5ad8:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    5ada:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    5adc:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    5ade:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    5ae0:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    5ae2:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    5ae4:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    5ae6:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    5ae8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    5aea:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    5aec:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    5aee:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    5af0:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    5af2:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    5af4:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    5af6:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    5af8:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    5afa:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    5afc:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    5afe:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    5b00:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    5b02:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    5b04:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    5b06:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    5b08:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    5b0a:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    5b0c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    5b0e:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    5b10:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    5b12:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5b14:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    5b16:	08 95       	ret

00005b18 <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    5b18:	cf 93       	push	r28
    5b1a:	df 93       	push	r29
    5b1c:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    5b1e:	00 97       	sbiw	r24, 0x00	; 0
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <makeMorse+0xc>
    5b22:	41 c0       	rjmp	.+130    	; 0x5ba6 <makeMorse+0x8e>
	{
		holdKeyDown = FALSE;
    5b24:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>

		if(repeating)
    5b28:	61 15       	cp	r22, r1
    5b2a:	71 05       	cpc	r23, r1
    5b2c:	21 f0       	breq	.+8      	; 0x5b36 <makeMorse+0x1e>
		{
			repeat = *repeating;
    5b2e:	db 01       	movw	r26, r22
    5b30:	2c 91       	ld	r18, X
    5b32:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <_ZZ9makeMorseE6repeat>
		}

		if(*s)
    5b36:	fc 01       	movw	r30, r24
    5b38:	20 81       	ld	r18, Z
    5b3a:	22 23       	and	r18, r18
    5b3c:	31 f1       	breq	.+76     	; 0x5b8a <makeMorse+0x72>
		{
			if(str != s) /* Passing in the same pointer will not change the state of Morse.c */
    5b3e:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <_ZZ9makeMorseE3str>
    5b42:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <_ZZ9makeMorseE3str+0x1>
    5b46:	84 17       	cp	r24, r20
    5b48:	95 07       	cpc	r25, r21
    5b4a:	09 f4       	brne	.+2      	; 0x5b4e <makeMorse+0x36>
    5b4c:	e9 c0       	rjmp	.+466    	; 0x5d20 <makeMorse+0x208>
			{
				str = s;
    5b4e:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <_ZZ9makeMorseE3str+0x1>
    5b52:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <_ZZ9makeMorseE3str>
				c = ' ';
    5b56:	80 e2       	ldi	r24, 0x20	; 32
    5b58:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZ9makeMorseE1c>
				morseInProgress = getMorseChar(*str);
    5b5c:	82 2f       	mov	r24, r18
    5b5e:	0e 94 96 2c 	call	0x592c	; 0x592c <_Z12getMorseCharc>
    5b62:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <_ZZ9makeMorseE15morseInProgress>
    5b66:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <_ZZ9makeMorseE15morseInProgress+0x1>
    5b6a:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_ZZ9makeMorseE15morseInProgress+0x2>
				charIndex = 0;
    5b6e:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorseE9charIndex>
				symbolIndex = 0;
    5b72:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZZ9makeMorseE11symbolIndex>
				elementIndex = 0;
    5b76:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorseE12elementIndex>
				addedSpace = 0;
    5b7a:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZZ9makeMorseE10addedSpace>
				completedString = FALSE;
    5b7e:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZZ9makeMorseE15completedString>
				carrierOn = FALSE;
    5b82:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorseE9carrierOn>
			}

			carrierOn = FALSE;
		}

		return( OFF);
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	d0 c0       	rjmp	.+416    	; 0x5d2a <makeMorse+0x212>
				carrierOn = FALSE;
			}
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    5b8a:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE3str+0x1>
    5b8e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <_ZZ9makeMorseE3str>
			completedString = TRUE;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_ZZ9makeMorseE15completedString>
			if(finished)
    5b98:	20 97       	sbiw	r28, 0x00	; 0
    5b9a:	09 f0       	breq	.+2      	; 0x5b9e <makeMorse+0x86>
			{
				*finished = TRUE;
    5b9c:	88 83       	st	Y, r24
			}

			carrierOn = FALSE;
    5b9e:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorseE9carrierOn>
		}

		return( OFF);
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
    5ba4:	c2 c0       	rjmp	.+388    	; 0x5d2a <makeMorse+0x212>
	}
	else if(str)
    5ba6:	e0 91 6e 05 	lds	r30, 0x056E	; 0x80056e <_ZZ9makeMorseE3str>
    5baa:	f0 91 6f 05 	lds	r31, 0x056F	; 0x80056f <_ZZ9makeMorseE3str+0x1>
    5bae:	30 97       	sbiw	r30, 0x00	; 0
    5bb0:	09 f4       	brne	.+2      	; 0x5bb4 <makeMorse+0x9c>
    5bb2:	aa c0       	rjmp	.+340    	; 0x5d08 <makeMorse+0x1f0>
	{
		if(repeating)
    5bb4:	61 15       	cp	r22, r1
    5bb6:	71 05       	cpc	r23, r1
    5bb8:	21 f0       	breq	.+8      	; 0x5bc2 <makeMorse+0xaa>
		{
			*repeating = repeat;
    5bba:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZZ9makeMorseE6repeat>
    5bbe:	db 01       	movw	r26, r22
    5bc0:	8c 93       	st	X, r24
		}

		if(completedString)
    5bc2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZZ9makeMorseE15completedString>
    5bc6:	88 23       	and	r24, r24
    5bc8:	49 f0       	breq	.+18     	; 0x5bdc <makeMorse+0xc4>
		{
			if(finished)
    5bca:	20 97       	sbiw	r28, 0x00	; 0
    5bcc:	09 f4       	brne	.+2      	; 0x5bd0 <makeMorse+0xb8>
    5bce:	aa c0       	rjmp	.+340    	; 0x5d24 <makeMorse+0x20c>
			{
				*finished = TRUE;
    5bd0:	81 e0       	ldi	r24, 0x01	; 1
    5bd2:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    5bd4:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>
			}
			return( OFF);
    5bd8:	80 e0       	ldi	r24, 0x00	; 0
    5bda:	a7 c0       	rjmp	.+334    	; 0x5d2a <makeMorse+0x212>
		}

		if(elementIndex)
    5bdc:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZZ9makeMorseE12elementIndex>
    5be0:	88 23       	and	r24, r24
    5be2:	21 f0       	breq	.+8      	; 0x5bec <makeMorse+0xd4>
		{
			elementIndex--;
    5be4:	81 50       	subi	r24, 0x01	; 1
    5be6:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ9makeMorseE12elementIndex>
    5bea:	7f c0       	rjmp	.+254    	; 0x5cea <makeMorse+0x1d2>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    5bec:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_ZZ9makeMorseE9carrierOn>
    5bf0:	88 23       	and	r24, r24
    5bf2:	81 f0       	breq	.+32     	; 0x5c14 <makeMorse+0xfc>
    5bf4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>
    5bf8:	81 11       	cpse	r24, r1
    5bfa:	0c c0       	rjmp	.+24     	; 0x5c14 <makeMorse+0xfc>
		{
			carrierOn = FALSE;
    5bfc:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorseE9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    5c00:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <_ZZ9makeMorseE10addedSpace>
    5c04:	88 23       	and	r24, r24
    5c06:	09 f4       	brne	.+2      	; 0x5c0a <makeMorse+0xf2>
    5c08:	70 c0       	rjmp	.+224    	; 0x5cea <makeMorse+0x1d2>
			{
				elementIndex = addedSpace;
    5c0a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ9makeMorseE12elementIndex>
				addedSpace = 0;
    5c0e:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZZ9makeMorseE10addedSpace>
    5c12:	6b c0       	rjmp	.+214    	; 0x5cea <makeMorse+0x1d2>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    5c14:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <_ZZ9makeMorseE15morseInProgress+0x1>
    5c18:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZZ9makeMorseE11symbolIndex>
    5c1c:	89 17       	cp	r24, r25
    5c1e:	90 f1       	brcs	.+100    	; 0x5c84 <makeMorse+0x16c>
			{
				c = (*(str + ++charIndex));
    5c20:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_ZZ9makeMorseE9charIndex>
    5c24:	8f 5f       	subi	r24, 0xFF	; 255
    5c26:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <_ZZ9makeMorseE9charIndex>
    5c2a:	df 01       	movw	r26, r30
    5c2c:	a8 0f       	add	r26, r24
    5c2e:	b1 1d       	adc	r27, r1
    5c30:	8c 91       	ld	r24, X
    5c32:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZ9makeMorseE1c>

				if(!c)  /* wrap to beginning of text */
    5c36:	81 11       	cpse	r24, r1
    5c38:	19 c0       	rjmp	.+50     	; 0x5c6c <makeMorse+0x154>
				{
					if(repeat)
    5c3a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZZ9makeMorseE6repeat>
    5c3e:	88 23       	and	r24, r24
    5c40:	31 f0       	breq	.+12     	; 0x5c4e <makeMorse+0x136>
					{
						c = *str;
    5c42:	80 81       	ld	r24, Z
    5c44:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZZ9makeMorseE1c>
						charIndex = 0;
    5c48:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorseE9charIndex>
    5c4c:	0f c0       	rjmp	.+30     	; 0x5c6c <makeMorse+0x154>
					}
					else
					{
						str = NULL;
    5c4e:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZZ9makeMorseE3str+0x1>
    5c52:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <_ZZ9makeMorseE3str>
						carrierOn = FALSE;
    5c56:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorseE9carrierOn>
						completedString = TRUE;
    5c5a:	91 e0       	ldi	r25, 0x01	; 1
    5c5c:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <_ZZ9makeMorseE15completedString>
						if(finished)
    5c60:	20 97       	sbiw	r28, 0x00	; 0
    5c62:	09 f0       	breq	.+2      	; 0x5c66 <makeMorse+0x14e>
						{
							*finished = TRUE;
    5c64:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    5c66:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>
						return( OFF );
    5c6a:	5f c0       	rjmp	.+190    	; 0x5d2a <makeMorse+0x212>
					}
				}

				morseInProgress = getMorseChar(c);
    5c6c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorseE1c>
    5c70:	0e 94 96 2c 	call	0x592c	; 0x592c <_Z12getMorseCharc>
    5c74:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <_ZZ9makeMorseE15morseInProgress>
    5c78:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <_ZZ9makeMorseE15morseInProgress+0x1>
    5c7c:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <_ZZ9makeMorseE15morseInProgress+0x2>
				symbolIndex = 0;
    5c80:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZZ9makeMorseE11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    5c84:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <_ZZ9makeMorseE15morseInProgress>
    5c88:	2d 3f       	cpi	r18, 0xFD	; 253
    5c8a:	00 f5       	brcc	.+64     	; 0x5ccc <makeMorse+0x1b4>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    5c8c:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <_ZZ9makeMorseE11symbolIndex>
    5c90:	31 e0       	ldi	r19, 0x01	; 1
    5c92:	34 0f       	add	r19, r20
    5c94:	30 93 69 05 	sts	0x0569, r19	; 0x800569 <_ZZ9makeMorseE11symbolIndex>

				if(isDah)
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	02 c0       	rjmp	.+4      	; 0x5ca2 <makeMorse+0x18a>
    5c9e:	88 0f       	add	r24, r24
    5ca0:	99 1f       	adc	r25, r25
    5ca2:	4a 95       	dec	r20
    5ca4:	e2 f7       	brpl	.-8      	; 0x5c9e <makeMorse+0x186>
    5ca6:	82 23       	and	r24, r18
    5ca8:	21 f0       	breq	.+8      	; 0x5cb2 <makeMorse+0x19a>
				{
					elementIndex = 2;
    5caa:	82 e0       	ldi	r24, 0x02	; 2
    5cac:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ9makeMorseE12elementIndex>
    5cb0:	02 c0       	rjmp	.+4      	; 0x5cb6 <makeMorse+0x19e>
				}
				else
				{
					elementIndex = 0;
    5cb2:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorseE12elementIndex>
				}

				carrierOn = TRUE;
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <_ZZ9makeMorseE9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    5cbc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ZZ9makeMorseE15morseInProgress+0x1>
    5cc0:	38 17       	cp	r19, r24
    5cc2:	98 f0       	brcs	.+38     	; 0x5cea <makeMorse+0x1d2>
				{
					addedSpace = 2;
    5cc4:	82 e0       	ldi	r24, 0x02	; 2
    5cc6:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <_ZZ9makeMorseE10addedSpace>
    5cca:	0f c0       	rjmp	.+30     	; 0x5cea <makeMorse+0x1d2>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    5ccc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ZZ9makeMorseE15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    5cd0:	9f ef       	ldi	r25, 0xFF	; 255
    5cd2:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_ZZ9makeMorseE11symbolIndex>
				carrierOn = FALSE;
    5cd6:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorseE9carrierOn>
				if(sym >= 4 )
    5cda:	84 30       	cpi	r24, 0x04	; 4
    5cdc:	20 f0       	brcs	.+8      	; 0x5ce6 <makeMorse+0x1ce>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    5cde:	84 50       	subi	r24, 0x04	; 4
    5ce0:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ9makeMorseE12elementIndex>
    5ce4:	02 c0       	rjmp	.+4      	; 0x5cea <makeMorse+0x1d2>
				}
				else
				{
					elementIndex = 0;
    5ce6:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZZ9makeMorseE12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    5cea:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZZ9makeMorseE1c>
    5cee:	8c 33       	cpi	r24, 0x3C	; 60
    5cf0:	31 f4       	brne	.+12     	; 0x5cfe <makeMorse+0x1e6>
		{
			holdKeyDown = TRUE;
    5cf2:	81 e0       	ldi	r24, 0x01	; 1
    5cf4:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    5cf8:	20 97       	sbiw	r28, 0x00	; 0
    5cfa:	41 f4       	brne	.+16     	; 0x5d0c <makeMorse+0x1f4>
    5cfc:	16 c0       	rjmp	.+44     	; 0x5d2a <makeMorse+0x212>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    5cfe:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>
		}
	}

	if(finished)
    5d02:	20 97       	sbiw	r28, 0x00	; 0
    5d04:	19 f4       	brne	.+6      	; 0x5d0c <makeMorse+0x1f4>
    5d06:	09 c0       	rjmp	.+18     	; 0x5d1a <makeMorse+0x202>
    5d08:	20 97       	sbiw	r28, 0x00	; 0
    5d0a:	19 f0       	breq	.+6      	; 0x5d12 <makeMorse+0x1fa>
	{
		*finished = completedString;
    5d0c:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZZ9makeMorseE15completedString>
    5d10:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    5d12:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ZZ9makeMorseE11holdKeyDown>
    5d16:	81 11       	cpse	r24, r1
    5d18:	07 c0       	rjmp	.+14     	; 0x5d28 <makeMorse+0x210>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    5d1a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_ZZ9makeMorseE9carrierOn>
    5d1e:	05 c0       	rjmp	.+10     	; 0x5d2a <makeMorse+0x212>
			}

			carrierOn = FALSE;
		}

		return( OFF);
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	03 c0       	rjmp	.+6      	; 0x5d2a <makeMorse+0x212>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    5d24:	80 e0       	ldi	r24, 0x00	; 0
    5d26:	01 c0       	rjmp	.+2      	; 0x5d2a <makeMorse+0x212>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    5d28:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    5d2a:	df 91       	pop	r29
    5d2c:	cf 91       	pop	r28
    5d2e:	08 95       	ret

00005d30 <timeRequiredToSendStrAtWPM>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    5d30:	cf 92       	push	r12
    5d32:	df 92       	push	r13
    5d34:	ef 92       	push	r14
    5d36:	ff 92       	push	r15
    5d38:	0f 93       	push	r16
    5d3a:	1f 93       	push	r17
    5d3c:	cf 93       	push	r28
    5d3e:	fc 01       	movw	r30, r24
    5d40:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5d42:	80 81       	ld	r24, Z
		if(!c)
    5d44:	88 23       	and	r24, r24
    5d46:	c1 f0       	breq	.+48     	; 0x5d78 <timeRequiredToSendStrAtWPM+0x48>
    5d48:	8f 01       	movw	r16, r30
    5d4a:	0f 5f       	subi	r16, 0xFF	; 255
    5d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d4e:	7f 01       	movw	r14, r30
    5d50:	94 e1       	ldi	r25, 0x14	; 20
    5d52:	e9 0e       	add	r14, r25
    5d54:	f1 1c       	adc	r15, r1
    5d56:	c0 e0       	ldi	r28, 0x00	; 0
    5d58:	05 c0       	rjmp	.+10     	; 0x5d64 <timeRequiredToSendStrAtWPM+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	81 91       	ld	r24, Z+
    5d5e:	8f 01       	movw	r16, r30
		if(!c)
    5d60:	88 23       	and	r24, r24
    5d62:	59 f0       	breq	.+22     	; 0x5d7a <timeRequiredToSendStrAtWPM+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    5d64:	0e 94 96 2c 	call	0x592c	; 0x592c <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    5d68:	6d 3f       	cpi	r22, 0xFD	; 253
    5d6a:	08 f4       	brcc	.+2      	; 0x5d6e <timeRequiredToSendStrAtWPM+0x3e>
		{
			elements += 3;
    5d6c:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    5d6e:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    5d70:	0e 15       	cp	r16, r14
    5d72:	1f 05       	cpc	r17, r15
    5d74:	91 f7       	brne	.-28     	; 0x5d5a <timeRequiredToSendStrAtWPM+0x2a>
    5d76:	01 c0       	rjmp	.+2      	; 0x5d7a <timeRequiredToSendStrAtWPM+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    5d78:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    5d7a:	80 eb       	ldi	r24, 0xB0	; 176
    5d7c:	94 e0       	ldi	r25, 0x04	; 4
    5d7e:	b6 01       	movw	r22, r12
    5d80:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__udivmodhi4>
}
    5d84:	c6 9f       	mul	r28, r22
    5d86:	c0 01       	movw	r24, r0
    5d88:	c7 9f       	mul	r28, r23
    5d8a:	90 0d       	add	r25, r0
    5d8c:	11 24       	eor	r1, r1
    5d8e:	cf 91       	pop	r28
    5d90:	1f 91       	pop	r17
    5d92:	0f 91       	pop	r16
    5d94:	ff 90       	pop	r15
    5d96:	ef 90       	pop	r14
    5d98:	df 90       	pop	r13
    5d9a:	cf 90       	pop	r12
    5d9c:	08 95       	ret

00005d9e <__subsf3>:
    5d9e:	50 58       	subi	r21, 0x80	; 128

00005da0 <__addsf3>:
    5da0:	bb 27       	eor	r27, r27
    5da2:	aa 27       	eor	r26, r26
    5da4:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <__addsf3x>
    5da8:	0c 94 91 30 	jmp	0x6122	; 0x6122 <__fp_round>
    5dac:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__fp_pscA>
    5db0:	38 f0       	brcs	.+14     	; 0x5dc0 <__addsf3+0x20>
    5db2:	0e 94 5f 30 	call	0x60be	; 0x60be <__fp_pscB>
    5db6:	20 f0       	brcs	.+8      	; 0x5dc0 <__addsf3+0x20>
    5db8:	39 f4       	brne	.+14     	; 0x5dc8 <__addsf3+0x28>
    5dba:	9f 3f       	cpi	r25, 0xFF	; 255
    5dbc:	19 f4       	brne	.+6      	; 0x5dc4 <__addsf3+0x24>
    5dbe:	26 f4       	brtc	.+8      	; 0x5dc8 <__addsf3+0x28>
    5dc0:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <__fp_nan>
    5dc4:	0e f4       	brtc	.+2      	; 0x5dc8 <__addsf3+0x28>
    5dc6:	e0 95       	com	r30
    5dc8:	e7 fb       	bst	r30, 7
    5dca:	0c 94 4f 30 	jmp	0x609e	; 0x609e <__fp_inf>

00005dce <__addsf3x>:
    5dce:	e9 2f       	mov	r30, r25
    5dd0:	0e 94 b6 30 	call	0x616c	; 0x616c <__fp_split3>
    5dd4:	58 f3       	brcs	.-42     	; 0x5dac <__addsf3+0xc>
    5dd6:	ba 17       	cp	r27, r26
    5dd8:	62 07       	cpc	r22, r18
    5dda:	73 07       	cpc	r23, r19
    5ddc:	84 07       	cpc	r24, r20
    5dde:	95 07       	cpc	r25, r21
    5de0:	20 f0       	brcs	.+8      	; 0x5dea <__addsf3x+0x1c>
    5de2:	79 f4       	brne	.+30     	; 0x5e02 <__addsf3x+0x34>
    5de4:	a6 f5       	brtc	.+104    	; 0x5e4e <__addsf3x+0x80>
    5de6:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__fp_zero>
    5dea:	0e f4       	brtc	.+2      	; 0x5dee <__addsf3x+0x20>
    5dec:	e0 95       	com	r30
    5dee:	0b 2e       	mov	r0, r27
    5df0:	ba 2f       	mov	r27, r26
    5df2:	a0 2d       	mov	r26, r0
    5df4:	0b 01       	movw	r0, r22
    5df6:	b9 01       	movw	r22, r18
    5df8:	90 01       	movw	r18, r0
    5dfa:	0c 01       	movw	r0, r24
    5dfc:	ca 01       	movw	r24, r20
    5dfe:	a0 01       	movw	r20, r0
    5e00:	11 24       	eor	r1, r1
    5e02:	ff 27       	eor	r31, r31
    5e04:	59 1b       	sub	r21, r25
    5e06:	99 f0       	breq	.+38     	; 0x5e2e <__addsf3x+0x60>
    5e08:	59 3f       	cpi	r21, 0xF9	; 249
    5e0a:	50 f4       	brcc	.+20     	; 0x5e20 <__addsf3x+0x52>
    5e0c:	50 3e       	cpi	r21, 0xE0	; 224
    5e0e:	68 f1       	brcs	.+90     	; 0x5e6a <__addsf3x+0x9c>
    5e10:	1a 16       	cp	r1, r26
    5e12:	f0 40       	sbci	r31, 0x00	; 0
    5e14:	a2 2f       	mov	r26, r18
    5e16:	23 2f       	mov	r18, r19
    5e18:	34 2f       	mov	r19, r20
    5e1a:	44 27       	eor	r20, r20
    5e1c:	58 5f       	subi	r21, 0xF8	; 248
    5e1e:	f3 cf       	rjmp	.-26     	; 0x5e06 <__addsf3x+0x38>
    5e20:	46 95       	lsr	r20
    5e22:	37 95       	ror	r19
    5e24:	27 95       	ror	r18
    5e26:	a7 95       	ror	r26
    5e28:	f0 40       	sbci	r31, 0x00	; 0
    5e2a:	53 95       	inc	r21
    5e2c:	c9 f7       	brne	.-14     	; 0x5e20 <__addsf3x+0x52>
    5e2e:	7e f4       	brtc	.+30     	; 0x5e4e <__addsf3x+0x80>
    5e30:	1f 16       	cp	r1, r31
    5e32:	ba 0b       	sbc	r27, r26
    5e34:	62 0b       	sbc	r22, r18
    5e36:	73 0b       	sbc	r23, r19
    5e38:	84 0b       	sbc	r24, r20
    5e3a:	ba f0       	brmi	.+46     	; 0x5e6a <__addsf3x+0x9c>
    5e3c:	91 50       	subi	r25, 0x01	; 1
    5e3e:	a1 f0       	breq	.+40     	; 0x5e68 <__addsf3x+0x9a>
    5e40:	ff 0f       	add	r31, r31
    5e42:	bb 1f       	adc	r27, r27
    5e44:	66 1f       	adc	r22, r22
    5e46:	77 1f       	adc	r23, r23
    5e48:	88 1f       	adc	r24, r24
    5e4a:	c2 f7       	brpl	.-16     	; 0x5e3c <__addsf3x+0x6e>
    5e4c:	0e c0       	rjmp	.+28     	; 0x5e6a <__addsf3x+0x9c>
    5e4e:	ba 0f       	add	r27, r26
    5e50:	62 1f       	adc	r22, r18
    5e52:	73 1f       	adc	r23, r19
    5e54:	84 1f       	adc	r24, r20
    5e56:	48 f4       	brcc	.+18     	; 0x5e6a <__addsf3x+0x9c>
    5e58:	87 95       	ror	r24
    5e5a:	77 95       	ror	r23
    5e5c:	67 95       	ror	r22
    5e5e:	b7 95       	ror	r27
    5e60:	f7 95       	ror	r31
    5e62:	9e 3f       	cpi	r25, 0xFE	; 254
    5e64:	08 f0       	brcs	.+2      	; 0x5e68 <__addsf3x+0x9a>
    5e66:	b0 cf       	rjmp	.-160    	; 0x5dc8 <__addsf3+0x28>
    5e68:	93 95       	inc	r25
    5e6a:	88 0f       	add	r24, r24
    5e6c:	08 f0       	brcs	.+2      	; 0x5e70 <__addsf3x+0xa2>
    5e6e:	99 27       	eor	r25, r25
    5e70:	ee 0f       	add	r30, r30
    5e72:	97 95       	ror	r25
    5e74:	87 95       	ror	r24
    5e76:	08 95       	ret

00005e78 <__cmpsf2>:
    5e78:	0e 94 2b 30 	call	0x6056	; 0x6056 <__fp_cmp>
    5e7c:	08 f4       	brcc	.+2      	; 0x5e80 <__cmpsf2+0x8>
    5e7e:	81 e0       	ldi	r24, 0x01	; 1
    5e80:	08 95       	ret

00005e82 <cos>:
    5e82:	0e 94 68 30 	call	0x60d0	; 0x60d0 <__fp_rempio2>
    5e86:	e3 95       	inc	r30
    5e88:	0c 94 a2 30 	jmp	0x6144	; 0x6144 <__fp_sinus>

00005e8c <__divsf3>:
    5e8c:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__divsf3x>
    5e90:	0c 94 91 30 	jmp	0x6122	; 0x6122 <__fp_round>
    5e94:	0e 94 5f 30 	call	0x60be	; 0x60be <__fp_pscB>
    5e98:	58 f0       	brcs	.+22     	; 0x5eb0 <__divsf3+0x24>
    5e9a:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__fp_pscA>
    5e9e:	40 f0       	brcs	.+16     	; 0x5eb0 <__divsf3+0x24>
    5ea0:	29 f4       	brne	.+10     	; 0x5eac <__divsf3+0x20>
    5ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ea4:	29 f0       	breq	.+10     	; 0x5eb0 <__divsf3+0x24>
    5ea6:	0c 94 4f 30 	jmp	0x609e	; 0x609e <__fp_inf>
    5eaa:	51 11       	cpse	r21, r1
    5eac:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__fp_szero>
    5eb0:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <__fp_nan>

00005eb4 <__divsf3x>:
    5eb4:	0e 94 b6 30 	call	0x616c	; 0x616c <__fp_split3>
    5eb8:	68 f3       	brcs	.-38     	; 0x5e94 <__divsf3+0x8>

00005eba <__divsf3_pse>:
    5eba:	99 23       	and	r25, r25
    5ebc:	b1 f3       	breq	.-20     	; 0x5eaa <__divsf3+0x1e>
    5ebe:	55 23       	and	r21, r21
    5ec0:	91 f3       	breq	.-28     	; 0x5ea6 <__divsf3+0x1a>
    5ec2:	95 1b       	sub	r25, r21
    5ec4:	55 0b       	sbc	r21, r21
    5ec6:	bb 27       	eor	r27, r27
    5ec8:	aa 27       	eor	r26, r26
    5eca:	62 17       	cp	r22, r18
    5ecc:	73 07       	cpc	r23, r19
    5ece:	84 07       	cpc	r24, r20
    5ed0:	38 f0       	brcs	.+14     	; 0x5ee0 <__divsf3_pse+0x26>
    5ed2:	9f 5f       	subi	r25, 0xFF	; 255
    5ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ed6:	22 0f       	add	r18, r18
    5ed8:	33 1f       	adc	r19, r19
    5eda:	44 1f       	adc	r20, r20
    5edc:	aa 1f       	adc	r26, r26
    5ede:	a9 f3       	breq	.-22     	; 0x5eca <__divsf3_pse+0x10>
    5ee0:	35 d0       	rcall	.+106    	; 0x5f4c <__divsf3_pse+0x92>
    5ee2:	0e 2e       	mov	r0, r30
    5ee4:	3a f0       	brmi	.+14     	; 0x5ef4 <__divsf3_pse+0x3a>
    5ee6:	e0 e8       	ldi	r30, 0x80	; 128
    5ee8:	32 d0       	rcall	.+100    	; 0x5f4e <__divsf3_pse+0x94>
    5eea:	91 50       	subi	r25, 0x01	; 1
    5eec:	50 40       	sbci	r21, 0x00	; 0
    5eee:	e6 95       	lsr	r30
    5ef0:	00 1c       	adc	r0, r0
    5ef2:	ca f7       	brpl	.-14     	; 0x5ee6 <__divsf3_pse+0x2c>
    5ef4:	2b d0       	rcall	.+86     	; 0x5f4c <__divsf3_pse+0x92>
    5ef6:	fe 2f       	mov	r31, r30
    5ef8:	29 d0       	rcall	.+82     	; 0x5f4c <__divsf3_pse+0x92>
    5efa:	66 0f       	add	r22, r22
    5efc:	77 1f       	adc	r23, r23
    5efe:	88 1f       	adc	r24, r24
    5f00:	bb 1f       	adc	r27, r27
    5f02:	26 17       	cp	r18, r22
    5f04:	37 07       	cpc	r19, r23
    5f06:	48 07       	cpc	r20, r24
    5f08:	ab 07       	cpc	r26, r27
    5f0a:	b0 e8       	ldi	r27, 0x80	; 128
    5f0c:	09 f0       	breq	.+2      	; 0x5f10 <__divsf3_pse+0x56>
    5f0e:	bb 0b       	sbc	r27, r27
    5f10:	80 2d       	mov	r24, r0
    5f12:	bf 01       	movw	r22, r30
    5f14:	ff 27       	eor	r31, r31
    5f16:	93 58       	subi	r25, 0x83	; 131
    5f18:	5f 4f       	sbci	r21, 0xFF	; 255
    5f1a:	3a f0       	brmi	.+14     	; 0x5f2a <__divsf3_pse+0x70>
    5f1c:	9e 3f       	cpi	r25, 0xFE	; 254
    5f1e:	51 05       	cpc	r21, r1
    5f20:	78 f0       	brcs	.+30     	; 0x5f40 <__divsf3_pse+0x86>
    5f22:	0c 94 4f 30 	jmp	0x609e	; 0x609e <__fp_inf>
    5f26:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__fp_szero>
    5f2a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f2c:	e4 f3       	brlt	.-8      	; 0x5f26 <__divsf3_pse+0x6c>
    5f2e:	98 3e       	cpi	r25, 0xE8	; 232
    5f30:	d4 f3       	brlt	.-12     	; 0x5f26 <__divsf3_pse+0x6c>
    5f32:	86 95       	lsr	r24
    5f34:	77 95       	ror	r23
    5f36:	67 95       	ror	r22
    5f38:	b7 95       	ror	r27
    5f3a:	f7 95       	ror	r31
    5f3c:	9f 5f       	subi	r25, 0xFF	; 255
    5f3e:	c9 f7       	brne	.-14     	; 0x5f32 <__divsf3_pse+0x78>
    5f40:	88 0f       	add	r24, r24
    5f42:	91 1d       	adc	r25, r1
    5f44:	96 95       	lsr	r25
    5f46:	87 95       	ror	r24
    5f48:	97 f9       	bld	r25, 7
    5f4a:	08 95       	ret
    5f4c:	e1 e0       	ldi	r30, 0x01	; 1
    5f4e:	66 0f       	add	r22, r22
    5f50:	77 1f       	adc	r23, r23
    5f52:	88 1f       	adc	r24, r24
    5f54:	bb 1f       	adc	r27, r27
    5f56:	62 17       	cp	r22, r18
    5f58:	73 07       	cpc	r23, r19
    5f5a:	84 07       	cpc	r24, r20
    5f5c:	ba 07       	cpc	r27, r26
    5f5e:	20 f0       	brcs	.+8      	; 0x5f68 <__divsf3_pse+0xae>
    5f60:	62 1b       	sub	r22, r18
    5f62:	73 0b       	sbc	r23, r19
    5f64:	84 0b       	sbc	r24, r20
    5f66:	ba 0b       	sbc	r27, r26
    5f68:	ee 1f       	adc	r30, r30
    5f6a:	88 f7       	brcc	.-30     	; 0x5f4e <__divsf3_pse+0x94>
    5f6c:	e0 95       	com	r30
    5f6e:	08 95       	ret

00005f70 <__fixsfsi>:
    5f70:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <__fixunssfsi>
    5f74:	68 94       	set
    5f76:	b1 11       	cpse	r27, r1
    5f78:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__fp_szero>
    5f7c:	08 95       	ret

00005f7e <__fixunssfsi>:
    5f7e:	0e 94 be 30 	call	0x617c	; 0x617c <__fp_splitA>
    5f82:	88 f0       	brcs	.+34     	; 0x5fa6 <__fixunssfsi+0x28>
    5f84:	9f 57       	subi	r25, 0x7F	; 127
    5f86:	98 f0       	brcs	.+38     	; 0x5fae <__fixunssfsi+0x30>
    5f88:	b9 2f       	mov	r27, r25
    5f8a:	99 27       	eor	r25, r25
    5f8c:	b7 51       	subi	r27, 0x17	; 23
    5f8e:	b0 f0       	brcs	.+44     	; 0x5fbc <__fixunssfsi+0x3e>
    5f90:	e1 f0       	breq	.+56     	; 0x5fca <__fixunssfsi+0x4c>
    5f92:	66 0f       	add	r22, r22
    5f94:	77 1f       	adc	r23, r23
    5f96:	88 1f       	adc	r24, r24
    5f98:	99 1f       	adc	r25, r25
    5f9a:	1a f0       	brmi	.+6      	; 0x5fa2 <__fixunssfsi+0x24>
    5f9c:	ba 95       	dec	r27
    5f9e:	c9 f7       	brne	.-14     	; 0x5f92 <__fixunssfsi+0x14>
    5fa0:	14 c0       	rjmp	.+40     	; 0x5fca <__fixunssfsi+0x4c>
    5fa2:	b1 30       	cpi	r27, 0x01	; 1
    5fa4:	91 f0       	breq	.+36     	; 0x5fca <__fixunssfsi+0x4c>
    5fa6:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__fp_zero>
    5faa:	b1 e0       	ldi	r27, 0x01	; 1
    5fac:	08 95       	ret
    5fae:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__fp_zero>
    5fb2:	67 2f       	mov	r22, r23
    5fb4:	78 2f       	mov	r23, r24
    5fb6:	88 27       	eor	r24, r24
    5fb8:	b8 5f       	subi	r27, 0xF8	; 248
    5fba:	39 f0       	breq	.+14     	; 0x5fca <__fixunssfsi+0x4c>
    5fbc:	b9 3f       	cpi	r27, 0xF9	; 249
    5fbe:	cc f3       	brlt	.-14     	; 0x5fb2 <__fixunssfsi+0x34>
    5fc0:	86 95       	lsr	r24
    5fc2:	77 95       	ror	r23
    5fc4:	67 95       	ror	r22
    5fc6:	b3 95       	inc	r27
    5fc8:	d9 f7       	brne	.-10     	; 0x5fc0 <__fixunssfsi+0x42>
    5fca:	3e f4       	brtc	.+14     	; 0x5fda <__fixunssfsi+0x5c>
    5fcc:	90 95       	com	r25
    5fce:	80 95       	com	r24
    5fd0:	70 95       	com	r23
    5fd2:	61 95       	neg	r22
    5fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5fda:	08 95       	ret

00005fdc <__floatunsisf>:
    5fdc:	e8 94       	clt
    5fde:	09 c0       	rjmp	.+18     	; 0x5ff2 <__floatsisf+0x12>

00005fe0 <__floatsisf>:
    5fe0:	97 fb       	bst	r25, 7
    5fe2:	3e f4       	brtc	.+14     	; 0x5ff2 <__floatsisf+0x12>
    5fe4:	90 95       	com	r25
    5fe6:	80 95       	com	r24
    5fe8:	70 95       	com	r23
    5fea:	61 95       	neg	r22
    5fec:	7f 4f       	sbci	r23, 0xFF	; 255
    5fee:	8f 4f       	sbci	r24, 0xFF	; 255
    5ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff2:	99 23       	and	r25, r25
    5ff4:	a9 f0       	breq	.+42     	; 0x6020 <__floatsisf+0x40>
    5ff6:	f9 2f       	mov	r31, r25
    5ff8:	96 e9       	ldi	r25, 0x96	; 150
    5ffa:	bb 27       	eor	r27, r27
    5ffc:	93 95       	inc	r25
    5ffe:	f6 95       	lsr	r31
    6000:	87 95       	ror	r24
    6002:	77 95       	ror	r23
    6004:	67 95       	ror	r22
    6006:	b7 95       	ror	r27
    6008:	f1 11       	cpse	r31, r1
    600a:	f8 cf       	rjmp	.-16     	; 0x5ffc <__floatsisf+0x1c>
    600c:	fa f4       	brpl	.+62     	; 0x604c <__floatsisf+0x6c>
    600e:	bb 0f       	add	r27, r27
    6010:	11 f4       	brne	.+4      	; 0x6016 <__floatsisf+0x36>
    6012:	60 ff       	sbrs	r22, 0
    6014:	1b c0       	rjmp	.+54     	; 0x604c <__floatsisf+0x6c>
    6016:	6f 5f       	subi	r22, 0xFF	; 255
    6018:	7f 4f       	sbci	r23, 0xFF	; 255
    601a:	8f 4f       	sbci	r24, 0xFF	; 255
    601c:	9f 4f       	sbci	r25, 0xFF	; 255
    601e:	16 c0       	rjmp	.+44     	; 0x604c <__floatsisf+0x6c>
    6020:	88 23       	and	r24, r24
    6022:	11 f0       	breq	.+4      	; 0x6028 <__floatsisf+0x48>
    6024:	96 e9       	ldi	r25, 0x96	; 150
    6026:	11 c0       	rjmp	.+34     	; 0x604a <__floatsisf+0x6a>
    6028:	77 23       	and	r23, r23
    602a:	21 f0       	breq	.+8      	; 0x6034 <__floatsisf+0x54>
    602c:	9e e8       	ldi	r25, 0x8E	; 142
    602e:	87 2f       	mov	r24, r23
    6030:	76 2f       	mov	r23, r22
    6032:	05 c0       	rjmp	.+10     	; 0x603e <__floatsisf+0x5e>
    6034:	66 23       	and	r22, r22
    6036:	71 f0       	breq	.+28     	; 0x6054 <__floatsisf+0x74>
    6038:	96 e8       	ldi	r25, 0x86	; 134
    603a:	86 2f       	mov	r24, r22
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	60 e0       	ldi	r22, 0x00	; 0
    6040:	2a f0       	brmi	.+10     	; 0x604c <__floatsisf+0x6c>
    6042:	9a 95       	dec	r25
    6044:	66 0f       	add	r22, r22
    6046:	77 1f       	adc	r23, r23
    6048:	88 1f       	adc	r24, r24
    604a:	da f7       	brpl	.-10     	; 0x6042 <__floatsisf+0x62>
    604c:	88 0f       	add	r24, r24
    604e:	96 95       	lsr	r25
    6050:	87 95       	ror	r24
    6052:	97 f9       	bld	r25, 7
    6054:	08 95       	ret

00006056 <__fp_cmp>:
    6056:	99 0f       	add	r25, r25
    6058:	00 08       	sbc	r0, r0
    605a:	55 0f       	add	r21, r21
    605c:	aa 0b       	sbc	r26, r26
    605e:	e0 e8       	ldi	r30, 0x80	; 128
    6060:	fe ef       	ldi	r31, 0xFE	; 254
    6062:	16 16       	cp	r1, r22
    6064:	17 06       	cpc	r1, r23
    6066:	e8 07       	cpc	r30, r24
    6068:	f9 07       	cpc	r31, r25
    606a:	c0 f0       	brcs	.+48     	; 0x609c <__fp_cmp+0x46>
    606c:	12 16       	cp	r1, r18
    606e:	13 06       	cpc	r1, r19
    6070:	e4 07       	cpc	r30, r20
    6072:	f5 07       	cpc	r31, r21
    6074:	98 f0       	brcs	.+38     	; 0x609c <__fp_cmp+0x46>
    6076:	62 1b       	sub	r22, r18
    6078:	73 0b       	sbc	r23, r19
    607a:	84 0b       	sbc	r24, r20
    607c:	95 0b       	sbc	r25, r21
    607e:	39 f4       	brne	.+14     	; 0x608e <__fp_cmp+0x38>
    6080:	0a 26       	eor	r0, r26
    6082:	61 f0       	breq	.+24     	; 0x609c <__fp_cmp+0x46>
    6084:	23 2b       	or	r18, r19
    6086:	24 2b       	or	r18, r20
    6088:	25 2b       	or	r18, r21
    608a:	21 f4       	brne	.+8      	; 0x6094 <__fp_cmp+0x3e>
    608c:	08 95       	ret
    608e:	0a 26       	eor	r0, r26
    6090:	09 f4       	brne	.+2      	; 0x6094 <__fp_cmp+0x3e>
    6092:	a1 40       	sbci	r26, 0x01	; 1
    6094:	a6 95       	lsr	r26
    6096:	8f ef       	ldi	r24, 0xFF	; 255
    6098:	81 1d       	adc	r24, r1
    609a:	81 1d       	adc	r24, r1
    609c:	08 95       	ret

0000609e <__fp_inf>:
    609e:	97 f9       	bld	r25, 7
    60a0:	9f 67       	ori	r25, 0x7F	; 127
    60a2:	80 e8       	ldi	r24, 0x80	; 128
    60a4:	70 e0       	ldi	r23, 0x00	; 0
    60a6:	60 e0       	ldi	r22, 0x00	; 0
    60a8:	08 95       	ret

000060aa <__fp_nan>:
    60aa:	9f ef       	ldi	r25, 0xFF	; 255
    60ac:	80 ec       	ldi	r24, 0xC0	; 192
    60ae:	08 95       	ret

000060b0 <__fp_pscA>:
    60b0:	00 24       	eor	r0, r0
    60b2:	0a 94       	dec	r0
    60b4:	16 16       	cp	r1, r22
    60b6:	17 06       	cpc	r1, r23
    60b8:	18 06       	cpc	r1, r24
    60ba:	09 06       	cpc	r0, r25
    60bc:	08 95       	ret

000060be <__fp_pscB>:
    60be:	00 24       	eor	r0, r0
    60c0:	0a 94       	dec	r0
    60c2:	12 16       	cp	r1, r18
    60c4:	13 06       	cpc	r1, r19
    60c6:	14 06       	cpc	r1, r20
    60c8:	05 06       	cpc	r0, r21
    60ca:	08 95       	ret
    60cc:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <__fp_nan>

000060d0 <__fp_rempio2>:
    60d0:	0e 94 be 30 	call	0x617c	; 0x617c <__fp_splitA>
    60d4:	d8 f3       	brcs	.-10     	; 0x60cc <__fp_pscB+0xe>
    60d6:	e8 94       	clt
    60d8:	e0 e0       	ldi	r30, 0x00	; 0
    60da:	bb 27       	eor	r27, r27
    60dc:	9f 57       	subi	r25, 0x7F	; 127
    60de:	f0 f0       	brcs	.+60     	; 0x611c <__fp_rempio2+0x4c>
    60e0:	2a ed       	ldi	r18, 0xDA	; 218
    60e2:	3f e0       	ldi	r19, 0x0F	; 15
    60e4:	49 ec       	ldi	r20, 0xC9	; 201
    60e6:	06 c0       	rjmp	.+12     	; 0x60f4 <__fp_rempio2+0x24>
    60e8:	ee 0f       	add	r30, r30
    60ea:	bb 0f       	add	r27, r27
    60ec:	66 1f       	adc	r22, r22
    60ee:	77 1f       	adc	r23, r23
    60f0:	88 1f       	adc	r24, r24
    60f2:	28 f0       	brcs	.+10     	; 0x60fe <__fp_rempio2+0x2e>
    60f4:	b2 3a       	cpi	r27, 0xA2	; 162
    60f6:	62 07       	cpc	r22, r18
    60f8:	73 07       	cpc	r23, r19
    60fa:	84 07       	cpc	r24, r20
    60fc:	28 f0       	brcs	.+10     	; 0x6108 <__fp_rempio2+0x38>
    60fe:	b2 5a       	subi	r27, 0xA2	; 162
    6100:	62 0b       	sbc	r22, r18
    6102:	73 0b       	sbc	r23, r19
    6104:	84 0b       	sbc	r24, r20
    6106:	e3 95       	inc	r30
    6108:	9a 95       	dec	r25
    610a:	72 f7       	brpl	.-36     	; 0x60e8 <__fp_rempio2+0x18>
    610c:	80 38       	cpi	r24, 0x80	; 128
    610e:	30 f4       	brcc	.+12     	; 0x611c <__fp_rempio2+0x4c>
    6110:	9a 95       	dec	r25
    6112:	bb 0f       	add	r27, r27
    6114:	66 1f       	adc	r22, r22
    6116:	77 1f       	adc	r23, r23
    6118:	88 1f       	adc	r24, r24
    611a:	d2 f7       	brpl	.-12     	; 0x6110 <__fp_rempio2+0x40>
    611c:	90 48       	sbci	r25, 0x80	; 128
    611e:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__fp_mpack_finite>

00006122 <__fp_round>:
    6122:	09 2e       	mov	r0, r25
    6124:	03 94       	inc	r0
    6126:	00 0c       	add	r0, r0
    6128:	11 f4       	brne	.+4      	; 0x612e <__fp_round+0xc>
    612a:	88 23       	and	r24, r24
    612c:	52 f0       	brmi	.+20     	; 0x6142 <__fp_round+0x20>
    612e:	bb 0f       	add	r27, r27
    6130:	40 f4       	brcc	.+16     	; 0x6142 <__fp_round+0x20>
    6132:	bf 2b       	or	r27, r31
    6134:	11 f4       	brne	.+4      	; 0x613a <__fp_round+0x18>
    6136:	60 ff       	sbrs	r22, 0
    6138:	04 c0       	rjmp	.+8      	; 0x6142 <__fp_round+0x20>
    613a:	6f 5f       	subi	r22, 0xFF	; 255
    613c:	7f 4f       	sbci	r23, 0xFF	; 255
    613e:	8f 4f       	sbci	r24, 0xFF	; 255
    6140:	9f 4f       	sbci	r25, 0xFF	; 255
    6142:	08 95       	ret

00006144 <__fp_sinus>:
    6144:	ef 93       	push	r30
    6146:	e0 ff       	sbrs	r30, 0
    6148:	07 c0       	rjmp	.+14     	; 0x6158 <__fp_sinus+0x14>
    614a:	a2 ea       	ldi	r26, 0xA2	; 162
    614c:	2a ed       	ldi	r18, 0xDA	; 218
    614e:	3f e0       	ldi	r19, 0x0F	; 15
    6150:	49 ec       	ldi	r20, 0xC9	; 201
    6152:	5f eb       	ldi	r21, 0xBF	; 191
    6154:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <__addsf3x>
    6158:	0e 94 91 30 	call	0x6122	; 0x6122 <__fp_round>
    615c:	0f 90       	pop	r0
    615e:	03 94       	inc	r0
    6160:	01 fc       	sbrc	r0, 1
    6162:	90 58       	subi	r25, 0x80	; 128
    6164:	e0 e1       	ldi	r30, 0x10	; 16
    6166:	f2 e0       	ldi	r31, 0x02	; 2
    6168:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_powsodd>

0000616c <__fp_split3>:
    616c:	57 fd       	sbrc	r21, 7
    616e:	90 58       	subi	r25, 0x80	; 128
    6170:	44 0f       	add	r20, r20
    6172:	55 1f       	adc	r21, r21
    6174:	59 f0       	breq	.+22     	; 0x618c <__fp_splitA+0x10>
    6176:	5f 3f       	cpi	r21, 0xFF	; 255
    6178:	71 f0       	breq	.+28     	; 0x6196 <__fp_splitA+0x1a>
    617a:	47 95       	ror	r20

0000617c <__fp_splitA>:
    617c:	88 0f       	add	r24, r24
    617e:	97 fb       	bst	r25, 7
    6180:	99 1f       	adc	r25, r25
    6182:	61 f0       	breq	.+24     	; 0x619c <__fp_splitA+0x20>
    6184:	9f 3f       	cpi	r25, 0xFF	; 255
    6186:	79 f0       	breq	.+30     	; 0x61a6 <__fp_splitA+0x2a>
    6188:	87 95       	ror	r24
    618a:	08 95       	ret
    618c:	12 16       	cp	r1, r18
    618e:	13 06       	cpc	r1, r19
    6190:	14 06       	cpc	r1, r20
    6192:	55 1f       	adc	r21, r21
    6194:	f2 cf       	rjmp	.-28     	; 0x617a <__fp_split3+0xe>
    6196:	46 95       	lsr	r20
    6198:	f1 df       	rcall	.-30     	; 0x617c <__fp_splitA>
    619a:	08 c0       	rjmp	.+16     	; 0x61ac <__fp_splitA+0x30>
    619c:	16 16       	cp	r1, r22
    619e:	17 06       	cpc	r1, r23
    61a0:	18 06       	cpc	r1, r24
    61a2:	99 1f       	adc	r25, r25
    61a4:	f1 cf       	rjmp	.-30     	; 0x6188 <__fp_splitA+0xc>
    61a6:	86 95       	lsr	r24
    61a8:	71 05       	cpc	r23, r1
    61aa:	61 05       	cpc	r22, r1
    61ac:	08 94       	sec
    61ae:	08 95       	ret

000061b0 <__fp_zero>:
    61b0:	e8 94       	clt

000061b2 <__fp_szero>:
    61b2:	bb 27       	eor	r27, r27
    61b4:	66 27       	eor	r22, r22
    61b6:	77 27       	eor	r23, r23
    61b8:	cb 01       	movw	r24, r22
    61ba:	97 f9       	bld	r25, 7
    61bc:	08 95       	ret

000061be <__gesf2>:
    61be:	0e 94 2b 30 	call	0x6056	; 0x6056 <__fp_cmp>
    61c2:	08 f4       	brcc	.+2      	; 0x61c6 <__gesf2+0x8>
    61c4:	8f ef       	ldi	r24, 0xFF	; 255
    61c6:	08 95       	ret

000061c8 <__mulsf3>:
    61c8:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__mulsf3x>
    61cc:	0c 94 91 30 	jmp	0x6122	; 0x6122 <__fp_round>
    61d0:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__fp_pscA>
    61d4:	38 f0       	brcs	.+14     	; 0x61e4 <__mulsf3+0x1c>
    61d6:	0e 94 5f 30 	call	0x60be	; 0x60be <__fp_pscB>
    61da:	20 f0       	brcs	.+8      	; 0x61e4 <__mulsf3+0x1c>
    61dc:	95 23       	and	r25, r21
    61de:	11 f0       	breq	.+4      	; 0x61e4 <__mulsf3+0x1c>
    61e0:	0c 94 4f 30 	jmp	0x609e	; 0x609e <__fp_inf>
    61e4:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <__fp_nan>
    61e8:	11 24       	eor	r1, r1
    61ea:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__fp_szero>

000061ee <__mulsf3x>:
    61ee:	0e 94 b6 30 	call	0x616c	; 0x616c <__fp_split3>
    61f2:	70 f3       	brcs	.-36     	; 0x61d0 <__mulsf3+0x8>

000061f4 <__mulsf3_pse>:
    61f4:	95 9f       	mul	r25, r21
    61f6:	c1 f3       	breq	.-16     	; 0x61e8 <__mulsf3+0x20>
    61f8:	95 0f       	add	r25, r21
    61fa:	50 e0       	ldi	r21, 0x00	; 0
    61fc:	55 1f       	adc	r21, r21
    61fe:	62 9f       	mul	r22, r18
    6200:	f0 01       	movw	r30, r0
    6202:	72 9f       	mul	r23, r18
    6204:	bb 27       	eor	r27, r27
    6206:	f0 0d       	add	r31, r0
    6208:	b1 1d       	adc	r27, r1
    620a:	63 9f       	mul	r22, r19
    620c:	aa 27       	eor	r26, r26
    620e:	f0 0d       	add	r31, r0
    6210:	b1 1d       	adc	r27, r1
    6212:	aa 1f       	adc	r26, r26
    6214:	64 9f       	mul	r22, r20
    6216:	66 27       	eor	r22, r22
    6218:	b0 0d       	add	r27, r0
    621a:	a1 1d       	adc	r26, r1
    621c:	66 1f       	adc	r22, r22
    621e:	82 9f       	mul	r24, r18
    6220:	22 27       	eor	r18, r18
    6222:	b0 0d       	add	r27, r0
    6224:	a1 1d       	adc	r26, r1
    6226:	62 1f       	adc	r22, r18
    6228:	73 9f       	mul	r23, r19
    622a:	b0 0d       	add	r27, r0
    622c:	a1 1d       	adc	r26, r1
    622e:	62 1f       	adc	r22, r18
    6230:	83 9f       	mul	r24, r19
    6232:	a0 0d       	add	r26, r0
    6234:	61 1d       	adc	r22, r1
    6236:	22 1f       	adc	r18, r18
    6238:	74 9f       	mul	r23, r20
    623a:	33 27       	eor	r19, r19
    623c:	a0 0d       	add	r26, r0
    623e:	61 1d       	adc	r22, r1
    6240:	23 1f       	adc	r18, r19
    6242:	84 9f       	mul	r24, r20
    6244:	60 0d       	add	r22, r0
    6246:	21 1d       	adc	r18, r1
    6248:	82 2f       	mov	r24, r18
    624a:	76 2f       	mov	r23, r22
    624c:	6a 2f       	mov	r22, r26
    624e:	11 24       	eor	r1, r1
    6250:	9f 57       	subi	r25, 0x7F	; 127
    6252:	50 40       	sbci	r21, 0x00	; 0
    6254:	9a f0       	brmi	.+38     	; 0x627c <__mulsf3_pse+0x88>
    6256:	f1 f0       	breq	.+60     	; 0x6294 <__mulsf3_pse+0xa0>
    6258:	88 23       	and	r24, r24
    625a:	4a f0       	brmi	.+18     	; 0x626e <__mulsf3_pse+0x7a>
    625c:	ee 0f       	add	r30, r30
    625e:	ff 1f       	adc	r31, r31
    6260:	bb 1f       	adc	r27, r27
    6262:	66 1f       	adc	r22, r22
    6264:	77 1f       	adc	r23, r23
    6266:	88 1f       	adc	r24, r24
    6268:	91 50       	subi	r25, 0x01	; 1
    626a:	50 40       	sbci	r21, 0x00	; 0
    626c:	a9 f7       	brne	.-22     	; 0x6258 <__mulsf3_pse+0x64>
    626e:	9e 3f       	cpi	r25, 0xFE	; 254
    6270:	51 05       	cpc	r21, r1
    6272:	80 f0       	brcs	.+32     	; 0x6294 <__mulsf3_pse+0xa0>
    6274:	0c 94 4f 30 	jmp	0x609e	; 0x609e <__fp_inf>
    6278:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__fp_szero>
    627c:	5f 3f       	cpi	r21, 0xFF	; 255
    627e:	e4 f3       	brlt	.-8      	; 0x6278 <__mulsf3_pse+0x84>
    6280:	98 3e       	cpi	r25, 0xE8	; 232
    6282:	d4 f3       	brlt	.-12     	; 0x6278 <__mulsf3_pse+0x84>
    6284:	86 95       	lsr	r24
    6286:	77 95       	ror	r23
    6288:	67 95       	ror	r22
    628a:	b7 95       	ror	r27
    628c:	f7 95       	ror	r31
    628e:	e7 95       	ror	r30
    6290:	9f 5f       	subi	r25, 0xFF	; 255
    6292:	c1 f7       	brne	.-16     	; 0x6284 <__mulsf3_pse+0x90>
    6294:	fe 2b       	or	r31, r30
    6296:	88 0f       	add	r24, r24
    6298:	91 1d       	adc	r25, r1
    629a:	96 95       	lsr	r25
    629c:	87 95       	ror	r24
    629e:	97 f9       	bld	r25, 7
    62a0:	08 95       	ret

000062a2 <round>:
    62a2:	0e 94 be 30 	call	0x617c	; 0x617c <__fp_splitA>
    62a6:	e8 f0       	brcs	.+58     	; 0x62e2 <round+0x40>
    62a8:	9e 37       	cpi	r25, 0x7E	; 126
    62aa:	e8 f0       	brcs	.+58     	; 0x62e6 <round+0x44>
    62ac:	96 39       	cpi	r25, 0x96	; 150
    62ae:	b8 f4       	brcc	.+46     	; 0x62de <round+0x3c>
    62b0:	9e 38       	cpi	r25, 0x8E	; 142
    62b2:	48 f4       	brcc	.+18     	; 0x62c6 <round+0x24>
    62b4:	67 2f       	mov	r22, r23
    62b6:	78 2f       	mov	r23, r24
    62b8:	88 27       	eor	r24, r24
    62ba:	98 5f       	subi	r25, 0xF8	; 248
    62bc:	f9 cf       	rjmp	.-14     	; 0x62b0 <round+0xe>
    62be:	86 95       	lsr	r24
    62c0:	77 95       	ror	r23
    62c2:	67 95       	ror	r22
    62c4:	93 95       	inc	r25
    62c6:	95 39       	cpi	r25, 0x95	; 149
    62c8:	d0 f3       	brcs	.-12     	; 0x62be <round+0x1c>
    62ca:	b6 2f       	mov	r27, r22
    62cc:	b1 70       	andi	r27, 0x01	; 1
    62ce:	6b 0f       	add	r22, r27
    62d0:	71 1d       	adc	r23, r1
    62d2:	81 1d       	adc	r24, r1
    62d4:	20 f4       	brcc	.+8      	; 0x62de <round+0x3c>
    62d6:	87 95       	ror	r24
    62d8:	77 95       	ror	r23
    62da:	67 95       	ror	r22
    62dc:	93 95       	inc	r25
    62de:	0c 94 75 31 	jmp	0x62ea	; 0x62ea <__fp_mintl>
    62e2:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__fp_mpack>
    62e6:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__fp_szero>

000062ea <__fp_mintl>:
    62ea:	88 23       	and	r24, r24
    62ec:	71 f4       	brne	.+28     	; 0x630a <__fp_mintl+0x20>
    62ee:	77 23       	and	r23, r23
    62f0:	21 f0       	breq	.+8      	; 0x62fa <__fp_mintl+0x10>
    62f2:	98 50       	subi	r25, 0x08	; 8
    62f4:	87 2b       	or	r24, r23
    62f6:	76 2f       	mov	r23, r22
    62f8:	07 c0       	rjmp	.+14     	; 0x6308 <__fp_mintl+0x1e>
    62fa:	66 23       	and	r22, r22
    62fc:	11 f4       	brne	.+4      	; 0x6302 <__fp_mintl+0x18>
    62fe:	99 27       	eor	r25, r25
    6300:	0d c0       	rjmp	.+26     	; 0x631c <__fp_mintl+0x32>
    6302:	90 51       	subi	r25, 0x10	; 16
    6304:	86 2b       	or	r24, r22
    6306:	70 e0       	ldi	r23, 0x00	; 0
    6308:	60 e0       	ldi	r22, 0x00	; 0
    630a:	2a f0       	brmi	.+10     	; 0x6316 <__fp_mintl+0x2c>
    630c:	9a 95       	dec	r25
    630e:	66 0f       	add	r22, r22
    6310:	77 1f       	adc	r23, r23
    6312:	88 1f       	adc	r24, r24
    6314:	da f7       	brpl	.-10     	; 0x630c <__fp_mintl+0x22>
    6316:	88 0f       	add	r24, r24
    6318:	96 95       	lsr	r25
    631a:	87 95       	ror	r24
    631c:	97 f9       	bld	r25, 7
    631e:	08 95       	ret

00006320 <__fp_mpack>:
    6320:	9f 3f       	cpi	r25, 0xFF	; 255
    6322:	31 f0       	breq	.+12     	; 0x6330 <__fp_mpack_finite+0xc>

00006324 <__fp_mpack_finite>:
    6324:	91 50       	subi	r25, 0x01	; 1
    6326:	20 f4       	brcc	.+8      	; 0x6330 <__fp_mpack_finite+0xc>
    6328:	87 95       	ror	r24
    632a:	77 95       	ror	r23
    632c:	67 95       	ror	r22
    632e:	b7 95       	ror	r27
    6330:	88 0f       	add	r24, r24
    6332:	91 1d       	adc	r25, r1
    6334:	96 95       	lsr	r25
    6336:	87 95       	ror	r24
    6338:	97 f9       	bld	r25, 7
    633a:	08 95       	ret

0000633c <__fp_powsodd>:
    633c:	9f 93       	push	r25
    633e:	8f 93       	push	r24
    6340:	7f 93       	push	r23
    6342:	6f 93       	push	r22
    6344:	ff 93       	push	r31
    6346:	ef 93       	push	r30
    6348:	9b 01       	movw	r18, r22
    634a:	ac 01       	movw	r20, r24
    634c:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__mulsf3>
    6350:	ef 91       	pop	r30
    6352:	ff 91       	pop	r31
    6354:	0e 94 b2 31 	call	0x6364	; 0x6364 <__fp_powser>
    6358:	2f 91       	pop	r18
    635a:	3f 91       	pop	r19
    635c:	4f 91       	pop	r20
    635e:	5f 91       	pop	r21
    6360:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <__mulsf3>

00006364 <__fp_powser>:
    6364:	df 93       	push	r29
    6366:	cf 93       	push	r28
    6368:	1f 93       	push	r17
    636a:	0f 93       	push	r16
    636c:	ff 92       	push	r15
    636e:	ef 92       	push	r14
    6370:	df 92       	push	r13
    6372:	7b 01       	movw	r14, r22
    6374:	8c 01       	movw	r16, r24
    6376:	68 94       	set
    6378:	06 c0       	rjmp	.+12     	; 0x6386 <__fp_powser+0x22>
    637a:	da 2e       	mov	r13, r26
    637c:	ef 01       	movw	r28, r30
    637e:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__mulsf3x>
    6382:	fe 01       	movw	r30, r28
    6384:	e8 94       	clt
    6386:	a5 91       	lpm	r26, Z+
    6388:	25 91       	lpm	r18, Z+
    638a:	35 91       	lpm	r19, Z+
    638c:	45 91       	lpm	r20, Z+
    638e:	55 91       	lpm	r21, Z+
    6390:	a6 f3       	brts	.-24     	; 0x637a <__fp_powser+0x16>
    6392:	ef 01       	movw	r28, r30
    6394:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <__addsf3x>
    6398:	fe 01       	movw	r30, r28
    639a:	97 01       	movw	r18, r14
    639c:	a8 01       	movw	r20, r16
    639e:	da 94       	dec	r13
    63a0:	69 f7       	brne	.-38     	; 0x637c <__fp_powser+0x18>
    63a2:	df 90       	pop	r13
    63a4:	ef 90       	pop	r14
    63a6:	ff 90       	pop	r15
    63a8:	0f 91       	pop	r16
    63aa:	1f 91       	pop	r17
    63ac:	cf 91       	pop	r28
    63ae:	df 91       	pop	r29
    63b0:	08 95       	ret

000063b2 <__mulsi3>:
    63b2:	db 01       	movw	r26, r22
    63b4:	8f 93       	push	r24
    63b6:	9f 93       	push	r25
    63b8:	0e 94 6e 32 	call	0x64dc	; 0x64dc <__muluhisi3>
    63bc:	bf 91       	pop	r27
    63be:	af 91       	pop	r26
    63c0:	a2 9f       	mul	r26, r18
    63c2:	80 0d       	add	r24, r0
    63c4:	91 1d       	adc	r25, r1
    63c6:	a3 9f       	mul	r26, r19
    63c8:	90 0d       	add	r25, r0
    63ca:	b2 9f       	mul	r27, r18
    63cc:	90 0d       	add	r25, r0
    63ce:	11 24       	eor	r1, r1
    63d0:	08 95       	ret

000063d2 <__udivmodhi4>:
    63d2:	aa 1b       	sub	r26, r26
    63d4:	bb 1b       	sub	r27, r27
    63d6:	51 e1       	ldi	r21, 0x11	; 17
    63d8:	07 c0       	rjmp	.+14     	; 0x63e8 <__udivmodhi4_ep>

000063da <__udivmodhi4_loop>:
    63da:	aa 1f       	adc	r26, r26
    63dc:	bb 1f       	adc	r27, r27
    63de:	a6 17       	cp	r26, r22
    63e0:	b7 07       	cpc	r27, r23
    63e2:	10 f0       	brcs	.+4      	; 0x63e8 <__udivmodhi4_ep>
    63e4:	a6 1b       	sub	r26, r22
    63e6:	b7 0b       	sbc	r27, r23

000063e8 <__udivmodhi4_ep>:
    63e8:	88 1f       	adc	r24, r24
    63ea:	99 1f       	adc	r25, r25
    63ec:	5a 95       	dec	r21
    63ee:	a9 f7       	brne	.-22     	; 0x63da <__udivmodhi4_loop>
    63f0:	80 95       	com	r24
    63f2:	90 95       	com	r25
    63f4:	bc 01       	movw	r22, r24
    63f6:	cd 01       	movw	r24, r26
    63f8:	08 95       	ret

000063fa <__divmodhi4>:
    63fa:	97 fb       	bst	r25, 7
    63fc:	07 2e       	mov	r0, r23
    63fe:	16 f4       	brtc	.+4      	; 0x6404 <__divmodhi4+0xa>
    6400:	00 94       	com	r0
    6402:	07 d0       	rcall	.+14     	; 0x6412 <__divmodhi4_neg1>
    6404:	77 fd       	sbrc	r23, 7
    6406:	09 d0       	rcall	.+18     	; 0x641a <__divmodhi4_neg2>
    6408:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__udivmodhi4>
    640c:	07 fc       	sbrc	r0, 7
    640e:	05 d0       	rcall	.+10     	; 0x641a <__divmodhi4_neg2>
    6410:	3e f4       	brtc	.+14     	; 0x6420 <__divmodhi4_exit>

00006412 <__divmodhi4_neg1>:
    6412:	90 95       	com	r25
    6414:	81 95       	neg	r24
    6416:	9f 4f       	sbci	r25, 0xFF	; 255
    6418:	08 95       	ret

0000641a <__divmodhi4_neg2>:
    641a:	70 95       	com	r23
    641c:	61 95       	neg	r22
    641e:	7f 4f       	sbci	r23, 0xFF	; 255

00006420 <__divmodhi4_exit>:
    6420:	08 95       	ret

00006422 <__udivmodsi4>:
    6422:	a1 e2       	ldi	r26, 0x21	; 33
    6424:	1a 2e       	mov	r1, r26
    6426:	aa 1b       	sub	r26, r26
    6428:	bb 1b       	sub	r27, r27
    642a:	fd 01       	movw	r30, r26
    642c:	0d c0       	rjmp	.+26     	; 0x6448 <__udivmodsi4_ep>

0000642e <__udivmodsi4_loop>:
    642e:	aa 1f       	adc	r26, r26
    6430:	bb 1f       	adc	r27, r27
    6432:	ee 1f       	adc	r30, r30
    6434:	ff 1f       	adc	r31, r31
    6436:	a2 17       	cp	r26, r18
    6438:	b3 07       	cpc	r27, r19
    643a:	e4 07       	cpc	r30, r20
    643c:	f5 07       	cpc	r31, r21
    643e:	20 f0       	brcs	.+8      	; 0x6448 <__udivmodsi4_ep>
    6440:	a2 1b       	sub	r26, r18
    6442:	b3 0b       	sbc	r27, r19
    6444:	e4 0b       	sbc	r30, r20
    6446:	f5 0b       	sbc	r31, r21

00006448 <__udivmodsi4_ep>:
    6448:	66 1f       	adc	r22, r22
    644a:	77 1f       	adc	r23, r23
    644c:	88 1f       	adc	r24, r24
    644e:	99 1f       	adc	r25, r25
    6450:	1a 94       	dec	r1
    6452:	69 f7       	brne	.-38     	; 0x642e <__udivmodsi4_loop>
    6454:	60 95       	com	r22
    6456:	70 95       	com	r23
    6458:	80 95       	com	r24
    645a:	90 95       	com	r25
    645c:	9b 01       	movw	r18, r22
    645e:	ac 01       	movw	r20, r24
    6460:	bd 01       	movw	r22, r26
    6462:	cf 01       	movw	r24, r30
    6464:	08 95       	ret

00006466 <__divmodsi4>:
    6466:	05 2e       	mov	r0, r21
    6468:	97 fb       	bst	r25, 7
    646a:	1e f4       	brtc	.+6      	; 0x6472 <__divmodsi4+0xc>
    646c:	00 94       	com	r0
    646e:	0e 94 4a 32 	call	0x6494	; 0x6494 <__negsi2>
    6472:	57 fd       	sbrc	r21, 7
    6474:	07 d0       	rcall	.+14     	; 0x6484 <__divmodsi4_neg2>
    6476:	0e 94 11 32 	call	0x6422	; 0x6422 <__udivmodsi4>
    647a:	07 fc       	sbrc	r0, 7
    647c:	03 d0       	rcall	.+6      	; 0x6484 <__divmodsi4_neg2>
    647e:	4e f4       	brtc	.+18     	; 0x6492 <__divmodsi4_exit>
    6480:	0c 94 4a 32 	jmp	0x6494	; 0x6494 <__negsi2>

00006484 <__divmodsi4_neg2>:
    6484:	50 95       	com	r21
    6486:	40 95       	com	r20
    6488:	30 95       	com	r19
    648a:	21 95       	neg	r18
    648c:	3f 4f       	sbci	r19, 0xFF	; 255
    648e:	4f 4f       	sbci	r20, 0xFF	; 255
    6490:	5f 4f       	sbci	r21, 0xFF	; 255

00006492 <__divmodsi4_exit>:
    6492:	08 95       	ret

00006494 <__negsi2>:
    6494:	90 95       	com	r25
    6496:	80 95       	com	r24
    6498:	70 95       	com	r23
    649a:	61 95       	neg	r22
    649c:	7f 4f       	sbci	r23, 0xFF	; 255
    649e:	8f 4f       	sbci	r24, 0xFF	; 255
    64a0:	9f 4f       	sbci	r25, 0xFF	; 255
    64a2:	08 95       	ret

000064a4 <__tablejump2__>:
    64a4:	ee 0f       	add	r30, r30
    64a6:	ff 1f       	adc	r31, r31
    64a8:	05 90       	lpm	r0, Z+
    64aa:	f4 91       	lpm	r31, Z
    64ac:	e0 2d       	mov	r30, r0
    64ae:	09 94       	ijmp

000064b0 <__umulhisi3>:
    64b0:	a2 9f       	mul	r26, r18
    64b2:	b0 01       	movw	r22, r0
    64b4:	b3 9f       	mul	r27, r19
    64b6:	c0 01       	movw	r24, r0
    64b8:	a3 9f       	mul	r26, r19
    64ba:	70 0d       	add	r23, r0
    64bc:	81 1d       	adc	r24, r1
    64be:	11 24       	eor	r1, r1
    64c0:	91 1d       	adc	r25, r1
    64c2:	b2 9f       	mul	r27, r18
    64c4:	70 0d       	add	r23, r0
    64c6:	81 1d       	adc	r24, r1
    64c8:	11 24       	eor	r1, r1
    64ca:	91 1d       	adc	r25, r1
    64cc:	08 95       	ret

000064ce <__usmulhisi3>:
    64ce:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>

000064d2 <__usmulhisi3_tail>:
    64d2:	b7 ff       	sbrs	r27, 7
    64d4:	08 95       	ret
    64d6:	82 1b       	sub	r24, r18
    64d8:	93 0b       	sbc	r25, r19
    64da:	08 95       	ret

000064dc <__muluhisi3>:
    64dc:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__umulhisi3>
    64e0:	a5 9f       	mul	r26, r21
    64e2:	90 0d       	add	r25, r0
    64e4:	b4 9f       	mul	r27, r20
    64e6:	90 0d       	add	r25, r0
    64e8:	a4 9f       	mul	r26, r20
    64ea:	80 0d       	add	r24, r0
    64ec:	91 1d       	adc	r25, r1
    64ee:	11 24       	eor	r1, r1
    64f0:	08 95       	ret

000064f2 <__mulshisi3>:
    64f2:	b7 ff       	sbrs	r27, 7
    64f4:	0c 94 6e 32 	jmp	0x64dc	; 0x64dc <__muluhisi3>

000064f8 <__mulohisi3>:
    64f8:	0e 94 6e 32 	call	0x64dc	; 0x64dc <__muluhisi3>
    64fc:	82 1b       	sub	r24, r18
    64fe:	93 0b       	sbc	r25, r19
    6500:	08 95       	ret

00006502 <malloc>:
    6502:	0f 93       	push	r16
    6504:	1f 93       	push	r17
    6506:	cf 93       	push	r28
    6508:	df 93       	push	r29
    650a:	82 30       	cpi	r24, 0x02	; 2
    650c:	91 05       	cpc	r25, r1
    650e:	10 f4       	brcc	.+4      	; 0x6514 <malloc+0x12>
    6510:	82 e0       	ldi	r24, 0x02	; 2
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	e0 91 73 05 	lds	r30, 0x0573	; 0x800573 <__flp>
    6518:	f0 91 74 05 	lds	r31, 0x0574	; 0x800574 <__flp+0x1>
    651c:	20 e0       	ldi	r18, 0x00	; 0
    651e:	30 e0       	ldi	r19, 0x00	; 0
    6520:	a0 e0       	ldi	r26, 0x00	; 0
    6522:	b0 e0       	ldi	r27, 0x00	; 0
    6524:	30 97       	sbiw	r30, 0x00	; 0
    6526:	19 f1       	breq	.+70     	; 0x656e <malloc+0x6c>
    6528:	40 81       	ld	r20, Z
    652a:	51 81       	ldd	r21, Z+1	; 0x01
    652c:	02 81       	ldd	r16, Z+2	; 0x02
    652e:	13 81       	ldd	r17, Z+3	; 0x03
    6530:	48 17       	cp	r20, r24
    6532:	59 07       	cpc	r21, r25
    6534:	c8 f0       	brcs	.+50     	; 0x6568 <malloc+0x66>
    6536:	84 17       	cp	r24, r20
    6538:	95 07       	cpc	r25, r21
    653a:	69 f4       	brne	.+26     	; 0x6556 <malloc+0x54>
    653c:	10 97       	sbiw	r26, 0x00	; 0
    653e:	31 f0       	breq	.+12     	; 0x654c <malloc+0x4a>
    6540:	12 96       	adiw	r26, 0x02	; 2
    6542:	0c 93       	st	X, r16
    6544:	12 97       	sbiw	r26, 0x02	; 2
    6546:	13 96       	adiw	r26, 0x03	; 3
    6548:	1c 93       	st	X, r17
    654a:	27 c0       	rjmp	.+78     	; 0x659a <malloc+0x98>
    654c:	00 93 73 05 	sts	0x0573, r16	; 0x800573 <__flp>
    6550:	10 93 74 05 	sts	0x0574, r17	; 0x800574 <__flp+0x1>
    6554:	22 c0       	rjmp	.+68     	; 0x659a <malloc+0x98>
    6556:	21 15       	cp	r18, r1
    6558:	31 05       	cpc	r19, r1
    655a:	19 f0       	breq	.+6      	; 0x6562 <malloc+0x60>
    655c:	42 17       	cp	r20, r18
    655e:	53 07       	cpc	r21, r19
    6560:	18 f4       	brcc	.+6      	; 0x6568 <malloc+0x66>
    6562:	9a 01       	movw	r18, r20
    6564:	bd 01       	movw	r22, r26
    6566:	ef 01       	movw	r28, r30
    6568:	df 01       	movw	r26, r30
    656a:	f8 01       	movw	r30, r16
    656c:	db cf       	rjmp	.-74     	; 0x6524 <malloc+0x22>
    656e:	21 15       	cp	r18, r1
    6570:	31 05       	cpc	r19, r1
    6572:	f9 f0       	breq	.+62     	; 0x65b2 <malloc+0xb0>
    6574:	28 1b       	sub	r18, r24
    6576:	39 0b       	sbc	r19, r25
    6578:	24 30       	cpi	r18, 0x04	; 4
    657a:	31 05       	cpc	r19, r1
    657c:	80 f4       	brcc	.+32     	; 0x659e <malloc+0x9c>
    657e:	8a 81       	ldd	r24, Y+2	; 0x02
    6580:	9b 81       	ldd	r25, Y+3	; 0x03
    6582:	61 15       	cp	r22, r1
    6584:	71 05       	cpc	r23, r1
    6586:	21 f0       	breq	.+8      	; 0x6590 <malloc+0x8e>
    6588:	fb 01       	movw	r30, r22
    658a:	93 83       	std	Z+3, r25	; 0x03
    658c:	82 83       	std	Z+2, r24	; 0x02
    658e:	04 c0       	rjmp	.+8      	; 0x6598 <malloc+0x96>
    6590:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <__flp+0x1>
    6594:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <__flp>
    6598:	fe 01       	movw	r30, r28
    659a:	32 96       	adiw	r30, 0x02	; 2
    659c:	44 c0       	rjmp	.+136    	; 0x6626 <malloc+0x124>
    659e:	fe 01       	movw	r30, r28
    65a0:	e2 0f       	add	r30, r18
    65a2:	f3 1f       	adc	r31, r19
    65a4:	81 93       	st	Z+, r24
    65a6:	91 93       	st	Z+, r25
    65a8:	22 50       	subi	r18, 0x02	; 2
    65aa:	31 09       	sbc	r19, r1
    65ac:	39 83       	std	Y+1, r19	; 0x01
    65ae:	28 83       	st	Y, r18
    65b0:	3a c0       	rjmp	.+116    	; 0x6626 <malloc+0x124>
    65b2:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    65b6:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    65ba:	23 2b       	or	r18, r19
    65bc:	41 f4       	brne	.+16     	; 0x65ce <malloc+0xcc>
    65be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    65c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    65c6:	30 93 72 05 	sts	0x0572, r19	; 0x800572 <__brkval+0x1>
    65ca:	20 93 71 05 	sts	0x0571, r18	; 0x800571 <__brkval>
    65ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    65d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    65d6:	21 15       	cp	r18, r1
    65d8:	31 05       	cpc	r19, r1
    65da:	41 f4       	brne	.+16     	; 0x65ec <malloc+0xea>
    65dc:	2d b7       	in	r18, 0x3d	; 61
    65de:	3e b7       	in	r19, 0x3e	; 62
    65e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    65e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    65e8:	24 1b       	sub	r18, r20
    65ea:	35 0b       	sbc	r19, r21
    65ec:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <__brkval>
    65f0:	f0 91 72 05 	lds	r31, 0x0572	; 0x800572 <__brkval+0x1>
    65f4:	e2 17       	cp	r30, r18
    65f6:	f3 07       	cpc	r31, r19
    65f8:	a0 f4       	brcc	.+40     	; 0x6622 <malloc+0x120>
    65fa:	2e 1b       	sub	r18, r30
    65fc:	3f 0b       	sbc	r19, r31
    65fe:	28 17       	cp	r18, r24
    6600:	39 07       	cpc	r19, r25
    6602:	78 f0       	brcs	.+30     	; 0x6622 <malloc+0x120>
    6604:	ac 01       	movw	r20, r24
    6606:	4e 5f       	subi	r20, 0xFE	; 254
    6608:	5f 4f       	sbci	r21, 0xFF	; 255
    660a:	24 17       	cp	r18, r20
    660c:	35 07       	cpc	r19, r21
    660e:	48 f0       	brcs	.+18     	; 0x6622 <malloc+0x120>
    6610:	4e 0f       	add	r20, r30
    6612:	5f 1f       	adc	r21, r31
    6614:	50 93 72 05 	sts	0x0572, r21	; 0x800572 <__brkval+0x1>
    6618:	40 93 71 05 	sts	0x0571, r20	; 0x800571 <__brkval>
    661c:	81 93       	st	Z+, r24
    661e:	91 93       	st	Z+, r25
    6620:	02 c0       	rjmp	.+4      	; 0x6626 <malloc+0x124>
    6622:	e0 e0       	ldi	r30, 0x00	; 0
    6624:	f0 e0       	ldi	r31, 0x00	; 0
    6626:	cf 01       	movw	r24, r30
    6628:	df 91       	pop	r29
    662a:	cf 91       	pop	r28
    662c:	1f 91       	pop	r17
    662e:	0f 91       	pop	r16
    6630:	08 95       	ret

00006632 <free>:
    6632:	cf 93       	push	r28
    6634:	df 93       	push	r29
    6636:	00 97       	sbiw	r24, 0x00	; 0
    6638:	09 f4       	brne	.+2      	; 0x663c <free+0xa>
    663a:	81 c0       	rjmp	.+258    	; 0x673e <free+0x10c>
    663c:	fc 01       	movw	r30, r24
    663e:	32 97       	sbiw	r30, 0x02	; 2
    6640:	13 82       	std	Z+3, r1	; 0x03
    6642:	12 82       	std	Z+2, r1	; 0x02
    6644:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <__flp>
    6648:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <__flp+0x1>
    664c:	10 97       	sbiw	r26, 0x00	; 0
    664e:	81 f4       	brne	.+32     	; 0x6670 <free+0x3e>
    6650:	20 81       	ld	r18, Z
    6652:	31 81       	ldd	r19, Z+1	; 0x01
    6654:	82 0f       	add	r24, r18
    6656:	93 1f       	adc	r25, r19
    6658:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    665c:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    6660:	28 17       	cp	r18, r24
    6662:	39 07       	cpc	r19, r25
    6664:	51 f5       	brne	.+84     	; 0x66ba <free+0x88>
    6666:	f0 93 72 05 	sts	0x0572, r31	; 0x800572 <__brkval+0x1>
    666a:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <__brkval>
    666e:	67 c0       	rjmp	.+206    	; 0x673e <free+0x10c>
    6670:	ed 01       	movw	r28, r26
    6672:	20 e0       	ldi	r18, 0x00	; 0
    6674:	30 e0       	ldi	r19, 0x00	; 0
    6676:	ce 17       	cp	r28, r30
    6678:	df 07       	cpc	r29, r31
    667a:	40 f4       	brcc	.+16     	; 0x668c <free+0x5a>
    667c:	4a 81       	ldd	r20, Y+2	; 0x02
    667e:	5b 81       	ldd	r21, Y+3	; 0x03
    6680:	9e 01       	movw	r18, r28
    6682:	41 15       	cp	r20, r1
    6684:	51 05       	cpc	r21, r1
    6686:	f1 f0       	breq	.+60     	; 0x66c4 <free+0x92>
    6688:	ea 01       	movw	r28, r20
    668a:	f5 cf       	rjmp	.-22     	; 0x6676 <free+0x44>
    668c:	d3 83       	std	Z+3, r29	; 0x03
    668e:	c2 83       	std	Z+2, r28	; 0x02
    6690:	40 81       	ld	r20, Z
    6692:	51 81       	ldd	r21, Z+1	; 0x01
    6694:	84 0f       	add	r24, r20
    6696:	95 1f       	adc	r25, r21
    6698:	c8 17       	cp	r28, r24
    669a:	d9 07       	cpc	r29, r25
    669c:	59 f4       	brne	.+22     	; 0x66b4 <free+0x82>
    669e:	88 81       	ld	r24, Y
    66a0:	99 81       	ldd	r25, Y+1	; 0x01
    66a2:	84 0f       	add	r24, r20
    66a4:	95 1f       	adc	r25, r21
    66a6:	02 96       	adiw	r24, 0x02	; 2
    66a8:	91 83       	std	Z+1, r25	; 0x01
    66aa:	80 83       	st	Z, r24
    66ac:	8a 81       	ldd	r24, Y+2	; 0x02
    66ae:	9b 81       	ldd	r25, Y+3	; 0x03
    66b0:	93 83       	std	Z+3, r25	; 0x03
    66b2:	82 83       	std	Z+2, r24	; 0x02
    66b4:	21 15       	cp	r18, r1
    66b6:	31 05       	cpc	r19, r1
    66b8:	29 f4       	brne	.+10     	; 0x66c4 <free+0x92>
    66ba:	f0 93 74 05 	sts	0x0574, r31	; 0x800574 <__flp+0x1>
    66be:	e0 93 73 05 	sts	0x0573, r30	; 0x800573 <__flp>
    66c2:	3d c0       	rjmp	.+122    	; 0x673e <free+0x10c>
    66c4:	e9 01       	movw	r28, r18
    66c6:	fb 83       	std	Y+3, r31	; 0x03
    66c8:	ea 83       	std	Y+2, r30	; 0x02
    66ca:	49 91       	ld	r20, Y+
    66cc:	59 91       	ld	r21, Y+
    66ce:	c4 0f       	add	r28, r20
    66d0:	d5 1f       	adc	r29, r21
    66d2:	ec 17       	cp	r30, r28
    66d4:	fd 07       	cpc	r31, r29
    66d6:	61 f4       	brne	.+24     	; 0x66f0 <free+0xbe>
    66d8:	80 81       	ld	r24, Z
    66da:	91 81       	ldd	r25, Z+1	; 0x01
    66dc:	84 0f       	add	r24, r20
    66de:	95 1f       	adc	r25, r21
    66e0:	02 96       	adiw	r24, 0x02	; 2
    66e2:	e9 01       	movw	r28, r18
    66e4:	99 83       	std	Y+1, r25	; 0x01
    66e6:	88 83       	st	Y, r24
    66e8:	82 81       	ldd	r24, Z+2	; 0x02
    66ea:	93 81       	ldd	r25, Z+3	; 0x03
    66ec:	9b 83       	std	Y+3, r25	; 0x03
    66ee:	8a 83       	std	Y+2, r24	; 0x02
    66f0:	e0 e0       	ldi	r30, 0x00	; 0
    66f2:	f0 e0       	ldi	r31, 0x00	; 0
    66f4:	12 96       	adiw	r26, 0x02	; 2
    66f6:	8d 91       	ld	r24, X+
    66f8:	9c 91       	ld	r25, X
    66fa:	13 97       	sbiw	r26, 0x03	; 3
    66fc:	00 97       	sbiw	r24, 0x00	; 0
    66fe:	19 f0       	breq	.+6      	; 0x6706 <free+0xd4>
    6700:	fd 01       	movw	r30, r26
    6702:	dc 01       	movw	r26, r24
    6704:	f7 cf       	rjmp	.-18     	; 0x66f4 <free+0xc2>
    6706:	8d 91       	ld	r24, X+
    6708:	9c 91       	ld	r25, X
    670a:	11 97       	sbiw	r26, 0x01	; 1
    670c:	9d 01       	movw	r18, r26
    670e:	2e 5f       	subi	r18, 0xFE	; 254
    6710:	3f 4f       	sbci	r19, 0xFF	; 255
    6712:	82 0f       	add	r24, r18
    6714:	93 1f       	adc	r25, r19
    6716:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    671a:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    671e:	28 17       	cp	r18, r24
    6720:	39 07       	cpc	r19, r25
    6722:	69 f4       	brne	.+26     	; 0x673e <free+0x10c>
    6724:	30 97       	sbiw	r30, 0x00	; 0
    6726:	29 f4       	brne	.+10     	; 0x6732 <free+0x100>
    6728:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <__flp+0x1>
    672c:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <__flp>
    6730:	02 c0       	rjmp	.+4      	; 0x6736 <free+0x104>
    6732:	13 82       	std	Z+3, r1	; 0x03
    6734:	12 82       	std	Z+2, r1	; 0x02
    6736:	b0 93 72 05 	sts	0x0572, r27	; 0x800572 <__brkval+0x1>
    673a:	a0 93 71 05 	sts	0x0571, r26	; 0x800571 <__brkval>
    673e:	df 91       	pop	r29
    6740:	cf 91       	pop	r28
    6742:	08 95       	ret

00006744 <atoi>:
    6744:	fc 01       	movw	r30, r24
    6746:	88 27       	eor	r24, r24
    6748:	99 27       	eor	r25, r25
    674a:	e8 94       	clt
    674c:	21 91       	ld	r18, Z+
    674e:	20 32       	cpi	r18, 0x20	; 32
    6750:	e9 f3       	breq	.-6      	; 0x674c <atoi+0x8>
    6752:	29 30       	cpi	r18, 0x09	; 9
    6754:	10 f0       	brcs	.+4      	; 0x675a <atoi+0x16>
    6756:	2e 30       	cpi	r18, 0x0E	; 14
    6758:	c8 f3       	brcs	.-14     	; 0x674c <atoi+0x8>
    675a:	2b 32       	cpi	r18, 0x2B	; 43
    675c:	41 f0       	breq	.+16     	; 0x676e <atoi+0x2a>
    675e:	2d 32       	cpi	r18, 0x2D	; 45
    6760:	39 f4       	brne	.+14     	; 0x6770 <atoi+0x2c>
    6762:	68 94       	set
    6764:	04 c0       	rjmp	.+8      	; 0x676e <atoi+0x2a>
    6766:	0e 94 25 34 	call	0x684a	; 0x684a <__mulhi_const_10>
    676a:	82 0f       	add	r24, r18
    676c:	91 1d       	adc	r25, r1
    676e:	21 91       	ld	r18, Z+
    6770:	20 53       	subi	r18, 0x30	; 48
    6772:	2a 30       	cpi	r18, 0x0A	; 10
    6774:	c0 f3       	brcs	.-16     	; 0x6766 <atoi+0x22>
    6776:	1e f4       	brtc	.+6      	; 0x677e <atoi+0x3a>
    6778:	90 95       	com	r25
    677a:	81 95       	neg	r24
    677c:	9f 4f       	sbci	r25, 0xFF	; 255
    677e:	08 95       	ret

00006780 <atol>:
    6780:	1f 93       	push	r17
    6782:	fc 01       	movw	r30, r24
    6784:	99 27       	eor	r25, r25
    6786:	88 27       	eor	r24, r24
    6788:	bc 01       	movw	r22, r24
    678a:	e8 94       	clt
    678c:	11 91       	ld	r17, Z+
    678e:	10 32       	cpi	r17, 0x20	; 32
    6790:	e9 f3       	breq	.-6      	; 0x678c <atol+0xc>
    6792:	19 30       	cpi	r17, 0x09	; 9
    6794:	10 f0       	brcs	.+4      	; 0x679a <atol+0x1a>
    6796:	1e 30       	cpi	r17, 0x0E	; 14
    6798:	c8 f3       	brcs	.-14     	; 0x678c <atol+0xc>
    679a:	1b 32       	cpi	r17, 0x2B	; 43
    679c:	51 f0       	breq	.+20     	; 0x67b2 <atol+0x32>
    679e:	1d 32       	cpi	r17, 0x2D	; 45
    67a0:	49 f4       	brne	.+18     	; 0x67b4 <atol+0x34>
    67a2:	68 94       	set
    67a4:	06 c0       	rjmp	.+12     	; 0x67b2 <atol+0x32>
    67a6:	0e 94 10 34 	call	0x6820	; 0x6820 <__mulsi_const_10>
    67aa:	61 0f       	add	r22, r17
    67ac:	71 1d       	adc	r23, r1
    67ae:	81 1d       	adc	r24, r1
    67b0:	91 1d       	adc	r25, r1
    67b2:	11 91       	ld	r17, Z+
    67b4:	10 53       	subi	r17, 0x30	; 48
    67b6:	1a 30       	cpi	r17, 0x0A	; 10
    67b8:	b0 f3       	brcs	.-20     	; 0x67a6 <atol+0x26>
    67ba:	3e f4       	brtc	.+14     	; 0x67ca <atol+0x4a>
    67bc:	90 95       	com	r25
    67be:	80 95       	com	r24
    67c0:	70 95       	com	r23
    67c2:	61 95       	neg	r22
    67c4:	7f 4f       	sbci	r23, 0xFF	; 255
    67c6:	8f 4f       	sbci	r24, 0xFF	; 255
    67c8:	9f 4f       	sbci	r25, 0xFF	; 255
    67ca:	1f 91       	pop	r17
    67cc:	08 95       	ret

000067ce <toupper>:
    67ce:	91 11       	cpse	r25, r1
    67d0:	08 95       	ret
    67d2:	81 56       	subi	r24, 0x61	; 97
    67d4:	8a 51       	subi	r24, 0x1A	; 26
    67d6:	08 f4       	brcc	.+2      	; 0x67da <toupper+0xc>
    67d8:	80 52       	subi	r24, 0x20	; 32
    67da:	85 58       	subi	r24, 0x85	; 133
    67dc:	08 95       	ret

000067de <strcat>:
    67de:	fb 01       	movw	r30, r22
    67e0:	dc 01       	movw	r26, r24
    67e2:	0d 90       	ld	r0, X+
    67e4:	00 20       	and	r0, r0
    67e6:	e9 f7       	brne	.-6      	; 0x67e2 <strcat+0x4>
    67e8:	11 97       	sbiw	r26, 0x01	; 1
    67ea:	01 90       	ld	r0, Z+
    67ec:	0d 92       	st	X+, r0
    67ee:	00 20       	and	r0, r0
    67f0:	e1 f7       	brne	.-8      	; 0x67ea <strcat+0xc>
    67f2:	08 95       	ret

000067f4 <strcpy>:
    67f4:	fb 01       	movw	r30, r22
    67f6:	dc 01       	movw	r26, r24
    67f8:	01 90       	ld	r0, Z+
    67fa:	0d 92       	st	X+, r0
    67fc:	00 20       	and	r0, r0
    67fe:	e1 f7       	brne	.-8      	; 0x67f8 <strcpy+0x4>
    6800:	08 95       	ret

00006802 <strncpy>:
    6802:	fb 01       	movw	r30, r22
    6804:	dc 01       	movw	r26, r24
    6806:	41 50       	subi	r20, 0x01	; 1
    6808:	50 40       	sbci	r21, 0x00	; 0
    680a:	48 f0       	brcs	.+18     	; 0x681e <strncpy+0x1c>
    680c:	01 90       	ld	r0, Z+
    680e:	0d 92       	st	X+, r0
    6810:	00 20       	and	r0, r0
    6812:	c9 f7       	brne	.-14     	; 0x6806 <strncpy+0x4>
    6814:	01 c0       	rjmp	.+2      	; 0x6818 <strncpy+0x16>
    6816:	1d 92       	st	X+, r1
    6818:	41 50       	subi	r20, 0x01	; 1
    681a:	50 40       	sbci	r21, 0x00	; 0
    681c:	e0 f7       	brcc	.-8      	; 0x6816 <strncpy+0x14>
    681e:	08 95       	ret

00006820 <__mulsi_const_10>:
    6820:	59 2f       	mov	r21, r25
    6822:	48 2f       	mov	r20, r24
    6824:	37 2f       	mov	r19, r23
    6826:	26 2f       	mov	r18, r22
    6828:	66 0f       	add	r22, r22
    682a:	77 1f       	adc	r23, r23
    682c:	88 1f       	adc	r24, r24
    682e:	99 1f       	adc	r25, r25
    6830:	66 0f       	add	r22, r22
    6832:	77 1f       	adc	r23, r23
    6834:	88 1f       	adc	r24, r24
    6836:	99 1f       	adc	r25, r25
    6838:	62 0f       	add	r22, r18
    683a:	73 1f       	adc	r23, r19
    683c:	84 1f       	adc	r24, r20
    683e:	95 1f       	adc	r25, r21
    6840:	66 0f       	add	r22, r22
    6842:	77 1f       	adc	r23, r23
    6844:	88 1f       	adc	r24, r24
    6846:	99 1f       	adc	r25, r25
    6848:	08 95       	ret

0000684a <__mulhi_const_10>:
    684a:	7a e0       	ldi	r23, 0x0A	; 10
    684c:	97 9f       	mul	r25, r23
    684e:	90 2d       	mov	r25, r0
    6850:	87 9f       	mul	r24, r23
    6852:	80 2d       	mov	r24, r0
    6854:	91 0d       	add	r25, r1
    6856:	11 24       	eor	r1, r1
    6858:	08 95       	ret

0000685a <sprintf>:
    685a:	ae e0       	ldi	r26, 0x0E	; 14
    685c:	b0 e0       	ldi	r27, 0x00	; 0
    685e:	e3 e3       	ldi	r30, 0x33	; 51
    6860:	f4 e3       	ldi	r31, 0x34	; 52
    6862:	0c 94 51 37 	jmp	0x6ea2	; 0x6ea2 <__prologue_saves__+0x1c>
    6866:	0d 89       	ldd	r16, Y+21	; 0x15
    6868:	1e 89       	ldd	r17, Y+22	; 0x16
    686a:	86 e0       	ldi	r24, 0x06	; 6
    686c:	8c 83       	std	Y+4, r24	; 0x04
    686e:	1a 83       	std	Y+2, r17	; 0x02
    6870:	09 83       	std	Y+1, r16	; 0x01
    6872:	8f ef       	ldi	r24, 0xFF	; 255
    6874:	9f e7       	ldi	r25, 0x7F	; 127
    6876:	9e 83       	std	Y+6, r25	; 0x06
    6878:	8d 83       	std	Y+5, r24	; 0x05
    687a:	ae 01       	movw	r20, r28
    687c:	47 5e       	subi	r20, 0xE7	; 231
    687e:	5f 4f       	sbci	r21, 0xFF	; 255
    6880:	6f 89       	ldd	r22, Y+23	; 0x17
    6882:	78 8d       	ldd	r23, Y+24	; 0x18
    6884:	ce 01       	movw	r24, r28
    6886:	01 96       	adiw	r24, 0x01	; 1
    6888:	0e 94 4f 34 	call	0x689e	; 0x689e <vfprintf>
    688c:	ef 81       	ldd	r30, Y+7	; 0x07
    688e:	f8 85       	ldd	r31, Y+8	; 0x08
    6890:	e0 0f       	add	r30, r16
    6892:	f1 1f       	adc	r31, r17
    6894:	10 82       	st	Z, r1
    6896:	2e 96       	adiw	r28, 0x0e	; 14
    6898:	e4 e0       	ldi	r30, 0x04	; 4
    689a:	0c 94 6d 37 	jmp	0x6eda	; 0x6eda <__epilogue_restores__+0x1c>

0000689e <vfprintf>:
    689e:	ab e0       	ldi	r26, 0x0B	; 11
    68a0:	b0 e0       	ldi	r27, 0x00	; 0
    68a2:	e5 e5       	ldi	r30, 0x55	; 85
    68a4:	f4 e3       	ldi	r31, 0x34	; 52
    68a6:	0c 94 43 37 	jmp	0x6e86	; 0x6e86 <__prologue_saves__>
    68aa:	6c 01       	movw	r12, r24
    68ac:	7b 01       	movw	r14, r22
    68ae:	8a 01       	movw	r16, r20
    68b0:	fc 01       	movw	r30, r24
    68b2:	17 82       	std	Z+7, r1	; 0x07
    68b4:	16 82       	std	Z+6, r1	; 0x06
    68b6:	83 81       	ldd	r24, Z+3	; 0x03
    68b8:	81 ff       	sbrs	r24, 1
    68ba:	cc c1       	rjmp	.+920    	; 0x6c54 <vfprintf+0x3b6>
    68bc:	ce 01       	movw	r24, r28
    68be:	01 96       	adiw	r24, 0x01	; 1
    68c0:	3c 01       	movw	r6, r24
    68c2:	f6 01       	movw	r30, r12
    68c4:	93 81       	ldd	r25, Z+3	; 0x03
    68c6:	f7 01       	movw	r30, r14
    68c8:	93 fd       	sbrc	r25, 3
    68ca:	85 91       	lpm	r24, Z+
    68cc:	93 ff       	sbrs	r25, 3
    68ce:	81 91       	ld	r24, Z+
    68d0:	7f 01       	movw	r14, r30
    68d2:	88 23       	and	r24, r24
    68d4:	09 f4       	brne	.+2      	; 0x68d8 <vfprintf+0x3a>
    68d6:	ba c1       	rjmp	.+884    	; 0x6c4c <vfprintf+0x3ae>
    68d8:	85 32       	cpi	r24, 0x25	; 37
    68da:	39 f4       	brne	.+14     	; 0x68ea <vfprintf+0x4c>
    68dc:	93 fd       	sbrc	r25, 3
    68de:	85 91       	lpm	r24, Z+
    68e0:	93 ff       	sbrs	r25, 3
    68e2:	81 91       	ld	r24, Z+
    68e4:	7f 01       	movw	r14, r30
    68e6:	85 32       	cpi	r24, 0x25	; 37
    68e8:	29 f4       	brne	.+10     	; 0x68f4 <vfprintf+0x56>
    68ea:	b6 01       	movw	r22, r12
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    68f2:	e7 cf       	rjmp	.-50     	; 0x68c2 <vfprintf+0x24>
    68f4:	91 2c       	mov	r9, r1
    68f6:	21 2c       	mov	r2, r1
    68f8:	31 2c       	mov	r3, r1
    68fa:	ff e1       	ldi	r31, 0x1F	; 31
    68fc:	f3 15       	cp	r31, r3
    68fe:	d8 f0       	brcs	.+54     	; 0x6936 <vfprintf+0x98>
    6900:	8b 32       	cpi	r24, 0x2B	; 43
    6902:	79 f0       	breq	.+30     	; 0x6922 <vfprintf+0x84>
    6904:	38 f4       	brcc	.+14     	; 0x6914 <vfprintf+0x76>
    6906:	80 32       	cpi	r24, 0x20	; 32
    6908:	79 f0       	breq	.+30     	; 0x6928 <vfprintf+0x8a>
    690a:	83 32       	cpi	r24, 0x23	; 35
    690c:	a1 f4       	brne	.+40     	; 0x6936 <vfprintf+0x98>
    690e:	23 2d       	mov	r18, r3
    6910:	20 61       	ori	r18, 0x10	; 16
    6912:	1d c0       	rjmp	.+58     	; 0x694e <vfprintf+0xb0>
    6914:	8d 32       	cpi	r24, 0x2D	; 45
    6916:	61 f0       	breq	.+24     	; 0x6930 <vfprintf+0x92>
    6918:	80 33       	cpi	r24, 0x30	; 48
    691a:	69 f4       	brne	.+26     	; 0x6936 <vfprintf+0x98>
    691c:	23 2d       	mov	r18, r3
    691e:	21 60       	ori	r18, 0x01	; 1
    6920:	16 c0       	rjmp	.+44     	; 0x694e <vfprintf+0xb0>
    6922:	83 2d       	mov	r24, r3
    6924:	82 60       	ori	r24, 0x02	; 2
    6926:	38 2e       	mov	r3, r24
    6928:	e3 2d       	mov	r30, r3
    692a:	e4 60       	ori	r30, 0x04	; 4
    692c:	3e 2e       	mov	r3, r30
    692e:	2a c0       	rjmp	.+84     	; 0x6984 <vfprintf+0xe6>
    6930:	f3 2d       	mov	r31, r3
    6932:	f8 60       	ori	r31, 0x08	; 8
    6934:	1d c0       	rjmp	.+58     	; 0x6970 <vfprintf+0xd2>
    6936:	37 fc       	sbrc	r3, 7
    6938:	2d c0       	rjmp	.+90     	; 0x6994 <vfprintf+0xf6>
    693a:	20 ed       	ldi	r18, 0xD0	; 208
    693c:	28 0f       	add	r18, r24
    693e:	2a 30       	cpi	r18, 0x0A	; 10
    6940:	40 f0       	brcs	.+16     	; 0x6952 <vfprintf+0xb4>
    6942:	8e 32       	cpi	r24, 0x2E	; 46
    6944:	b9 f4       	brne	.+46     	; 0x6974 <vfprintf+0xd6>
    6946:	36 fc       	sbrc	r3, 6
    6948:	81 c1       	rjmp	.+770    	; 0x6c4c <vfprintf+0x3ae>
    694a:	23 2d       	mov	r18, r3
    694c:	20 64       	ori	r18, 0x40	; 64
    694e:	32 2e       	mov	r3, r18
    6950:	19 c0       	rjmp	.+50     	; 0x6984 <vfprintf+0xe6>
    6952:	36 fe       	sbrs	r3, 6
    6954:	06 c0       	rjmp	.+12     	; 0x6962 <vfprintf+0xc4>
    6956:	8a e0       	ldi	r24, 0x0A	; 10
    6958:	98 9e       	mul	r9, r24
    695a:	20 0d       	add	r18, r0
    695c:	11 24       	eor	r1, r1
    695e:	92 2e       	mov	r9, r18
    6960:	11 c0       	rjmp	.+34     	; 0x6984 <vfprintf+0xe6>
    6962:	ea e0       	ldi	r30, 0x0A	; 10
    6964:	2e 9e       	mul	r2, r30
    6966:	20 0d       	add	r18, r0
    6968:	11 24       	eor	r1, r1
    696a:	22 2e       	mov	r2, r18
    696c:	f3 2d       	mov	r31, r3
    696e:	f0 62       	ori	r31, 0x20	; 32
    6970:	3f 2e       	mov	r3, r31
    6972:	08 c0       	rjmp	.+16     	; 0x6984 <vfprintf+0xe6>
    6974:	8c 36       	cpi	r24, 0x6C	; 108
    6976:	21 f4       	brne	.+8      	; 0x6980 <vfprintf+0xe2>
    6978:	83 2d       	mov	r24, r3
    697a:	80 68       	ori	r24, 0x80	; 128
    697c:	38 2e       	mov	r3, r24
    697e:	02 c0       	rjmp	.+4      	; 0x6984 <vfprintf+0xe6>
    6980:	88 36       	cpi	r24, 0x68	; 104
    6982:	41 f4       	brne	.+16     	; 0x6994 <vfprintf+0xf6>
    6984:	f7 01       	movw	r30, r14
    6986:	93 fd       	sbrc	r25, 3
    6988:	85 91       	lpm	r24, Z+
    698a:	93 ff       	sbrs	r25, 3
    698c:	81 91       	ld	r24, Z+
    698e:	7f 01       	movw	r14, r30
    6990:	81 11       	cpse	r24, r1
    6992:	b3 cf       	rjmp	.-154    	; 0x68fa <vfprintf+0x5c>
    6994:	98 2f       	mov	r25, r24
    6996:	9f 7d       	andi	r25, 0xDF	; 223
    6998:	95 54       	subi	r25, 0x45	; 69
    699a:	93 30       	cpi	r25, 0x03	; 3
    699c:	28 f4       	brcc	.+10     	; 0x69a8 <vfprintf+0x10a>
    699e:	0c 5f       	subi	r16, 0xFC	; 252
    69a0:	1f 4f       	sbci	r17, 0xFF	; 255
    69a2:	9f e3       	ldi	r25, 0x3F	; 63
    69a4:	99 83       	std	Y+1, r25	; 0x01
    69a6:	0d c0       	rjmp	.+26     	; 0x69c2 <vfprintf+0x124>
    69a8:	83 36       	cpi	r24, 0x63	; 99
    69aa:	31 f0       	breq	.+12     	; 0x69b8 <vfprintf+0x11a>
    69ac:	83 37       	cpi	r24, 0x73	; 115
    69ae:	71 f0       	breq	.+28     	; 0x69cc <vfprintf+0x12e>
    69b0:	83 35       	cpi	r24, 0x53	; 83
    69b2:	09 f0       	breq	.+2      	; 0x69b6 <vfprintf+0x118>
    69b4:	59 c0       	rjmp	.+178    	; 0x6a68 <vfprintf+0x1ca>
    69b6:	21 c0       	rjmp	.+66     	; 0x69fa <vfprintf+0x15c>
    69b8:	f8 01       	movw	r30, r16
    69ba:	80 81       	ld	r24, Z
    69bc:	89 83       	std	Y+1, r24	; 0x01
    69be:	0e 5f       	subi	r16, 0xFE	; 254
    69c0:	1f 4f       	sbci	r17, 0xFF	; 255
    69c2:	88 24       	eor	r8, r8
    69c4:	83 94       	inc	r8
    69c6:	91 2c       	mov	r9, r1
    69c8:	53 01       	movw	r10, r6
    69ca:	13 c0       	rjmp	.+38     	; 0x69f2 <vfprintf+0x154>
    69cc:	28 01       	movw	r4, r16
    69ce:	f2 e0       	ldi	r31, 0x02	; 2
    69d0:	4f 0e       	add	r4, r31
    69d2:	51 1c       	adc	r5, r1
    69d4:	f8 01       	movw	r30, r16
    69d6:	a0 80       	ld	r10, Z
    69d8:	b1 80       	ldd	r11, Z+1	; 0x01
    69da:	36 fe       	sbrs	r3, 6
    69dc:	03 c0       	rjmp	.+6      	; 0x69e4 <vfprintf+0x146>
    69de:	69 2d       	mov	r22, r9
    69e0:	70 e0       	ldi	r23, 0x00	; 0
    69e2:	02 c0       	rjmp	.+4      	; 0x69e8 <vfprintf+0x14a>
    69e4:	6f ef       	ldi	r22, 0xFF	; 255
    69e6:	7f ef       	ldi	r23, 0xFF	; 255
    69e8:	c5 01       	movw	r24, r10
    69ea:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <strnlen>
    69ee:	4c 01       	movw	r8, r24
    69f0:	82 01       	movw	r16, r4
    69f2:	f3 2d       	mov	r31, r3
    69f4:	ff 77       	andi	r31, 0x7F	; 127
    69f6:	3f 2e       	mov	r3, r31
    69f8:	16 c0       	rjmp	.+44     	; 0x6a26 <vfprintf+0x188>
    69fa:	28 01       	movw	r4, r16
    69fc:	22 e0       	ldi	r18, 0x02	; 2
    69fe:	42 0e       	add	r4, r18
    6a00:	51 1c       	adc	r5, r1
    6a02:	f8 01       	movw	r30, r16
    6a04:	a0 80       	ld	r10, Z
    6a06:	b1 80       	ldd	r11, Z+1	; 0x01
    6a08:	36 fe       	sbrs	r3, 6
    6a0a:	03 c0       	rjmp	.+6      	; 0x6a12 <vfprintf+0x174>
    6a0c:	69 2d       	mov	r22, r9
    6a0e:	70 e0       	ldi	r23, 0x00	; 0
    6a10:	02 c0       	rjmp	.+4      	; 0x6a16 <vfprintf+0x178>
    6a12:	6f ef       	ldi	r22, 0xFF	; 255
    6a14:	7f ef       	ldi	r23, 0xFF	; 255
    6a16:	c5 01       	movw	r24, r10
    6a18:	0e 94 30 36 	call	0x6c60	; 0x6c60 <strnlen_P>
    6a1c:	4c 01       	movw	r8, r24
    6a1e:	f3 2d       	mov	r31, r3
    6a20:	f0 68       	ori	r31, 0x80	; 128
    6a22:	3f 2e       	mov	r3, r31
    6a24:	82 01       	movw	r16, r4
    6a26:	33 fc       	sbrc	r3, 3
    6a28:	1b c0       	rjmp	.+54     	; 0x6a60 <vfprintf+0x1c2>
    6a2a:	82 2d       	mov	r24, r2
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	88 16       	cp	r8, r24
    6a30:	99 06       	cpc	r9, r25
    6a32:	b0 f4       	brcc	.+44     	; 0x6a60 <vfprintf+0x1c2>
    6a34:	b6 01       	movw	r22, r12
    6a36:	80 e2       	ldi	r24, 0x20	; 32
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6a3e:	2a 94       	dec	r2
    6a40:	f4 cf       	rjmp	.-24     	; 0x6a2a <vfprintf+0x18c>
    6a42:	f5 01       	movw	r30, r10
    6a44:	37 fc       	sbrc	r3, 7
    6a46:	85 91       	lpm	r24, Z+
    6a48:	37 fe       	sbrs	r3, 7
    6a4a:	81 91       	ld	r24, Z+
    6a4c:	5f 01       	movw	r10, r30
    6a4e:	b6 01       	movw	r22, r12
    6a50:	90 e0       	ldi	r25, 0x00	; 0
    6a52:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6a56:	21 10       	cpse	r2, r1
    6a58:	2a 94       	dec	r2
    6a5a:	21 e0       	ldi	r18, 0x01	; 1
    6a5c:	82 1a       	sub	r8, r18
    6a5e:	91 08       	sbc	r9, r1
    6a60:	81 14       	cp	r8, r1
    6a62:	91 04       	cpc	r9, r1
    6a64:	71 f7       	brne	.-36     	; 0x6a42 <vfprintf+0x1a4>
    6a66:	e8 c0       	rjmp	.+464    	; 0x6c38 <vfprintf+0x39a>
    6a68:	84 36       	cpi	r24, 0x64	; 100
    6a6a:	11 f0       	breq	.+4      	; 0x6a70 <vfprintf+0x1d2>
    6a6c:	89 36       	cpi	r24, 0x69	; 105
    6a6e:	41 f5       	brne	.+80     	; 0x6ac0 <vfprintf+0x222>
    6a70:	f8 01       	movw	r30, r16
    6a72:	37 fe       	sbrs	r3, 7
    6a74:	07 c0       	rjmp	.+14     	; 0x6a84 <vfprintf+0x1e6>
    6a76:	60 81       	ld	r22, Z
    6a78:	71 81       	ldd	r23, Z+1	; 0x01
    6a7a:	82 81       	ldd	r24, Z+2	; 0x02
    6a7c:	93 81       	ldd	r25, Z+3	; 0x03
    6a7e:	0c 5f       	subi	r16, 0xFC	; 252
    6a80:	1f 4f       	sbci	r17, 0xFF	; 255
    6a82:	08 c0       	rjmp	.+16     	; 0x6a94 <vfprintf+0x1f6>
    6a84:	60 81       	ld	r22, Z
    6a86:	71 81       	ldd	r23, Z+1	; 0x01
    6a88:	07 2e       	mov	r0, r23
    6a8a:	00 0c       	add	r0, r0
    6a8c:	88 0b       	sbc	r24, r24
    6a8e:	99 0b       	sbc	r25, r25
    6a90:	0e 5f       	subi	r16, 0xFE	; 254
    6a92:	1f 4f       	sbci	r17, 0xFF	; 255
    6a94:	f3 2d       	mov	r31, r3
    6a96:	ff 76       	andi	r31, 0x6F	; 111
    6a98:	3f 2e       	mov	r3, r31
    6a9a:	97 ff       	sbrs	r25, 7
    6a9c:	09 c0       	rjmp	.+18     	; 0x6ab0 <vfprintf+0x212>
    6a9e:	90 95       	com	r25
    6aa0:	80 95       	com	r24
    6aa2:	70 95       	com	r23
    6aa4:	61 95       	neg	r22
    6aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    6aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    6aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    6aac:	f0 68       	ori	r31, 0x80	; 128
    6aae:	3f 2e       	mov	r3, r31
    6ab0:	2a e0       	ldi	r18, 0x0A	; 10
    6ab2:	30 e0       	ldi	r19, 0x00	; 0
    6ab4:	a3 01       	movw	r20, r6
    6ab6:	0e 94 82 36 	call	0x6d04	; 0x6d04 <__ultoa_invert>
    6aba:	88 2e       	mov	r8, r24
    6abc:	86 18       	sub	r8, r6
    6abe:	45 c0       	rjmp	.+138    	; 0x6b4a <vfprintf+0x2ac>
    6ac0:	85 37       	cpi	r24, 0x75	; 117
    6ac2:	31 f4       	brne	.+12     	; 0x6ad0 <vfprintf+0x232>
    6ac4:	23 2d       	mov	r18, r3
    6ac6:	2f 7e       	andi	r18, 0xEF	; 239
    6ac8:	b2 2e       	mov	r11, r18
    6aca:	2a e0       	ldi	r18, 0x0A	; 10
    6acc:	30 e0       	ldi	r19, 0x00	; 0
    6ace:	25 c0       	rjmp	.+74     	; 0x6b1a <vfprintf+0x27c>
    6ad0:	93 2d       	mov	r25, r3
    6ad2:	99 7f       	andi	r25, 0xF9	; 249
    6ad4:	b9 2e       	mov	r11, r25
    6ad6:	8f 36       	cpi	r24, 0x6F	; 111
    6ad8:	c1 f0       	breq	.+48     	; 0x6b0a <vfprintf+0x26c>
    6ada:	18 f4       	brcc	.+6      	; 0x6ae2 <vfprintf+0x244>
    6adc:	88 35       	cpi	r24, 0x58	; 88
    6ade:	79 f0       	breq	.+30     	; 0x6afe <vfprintf+0x260>
    6ae0:	b5 c0       	rjmp	.+362    	; 0x6c4c <vfprintf+0x3ae>
    6ae2:	80 37       	cpi	r24, 0x70	; 112
    6ae4:	19 f0       	breq	.+6      	; 0x6aec <vfprintf+0x24e>
    6ae6:	88 37       	cpi	r24, 0x78	; 120
    6ae8:	21 f0       	breq	.+8      	; 0x6af2 <vfprintf+0x254>
    6aea:	b0 c0       	rjmp	.+352    	; 0x6c4c <vfprintf+0x3ae>
    6aec:	e9 2f       	mov	r30, r25
    6aee:	e0 61       	ori	r30, 0x10	; 16
    6af0:	be 2e       	mov	r11, r30
    6af2:	b4 fe       	sbrs	r11, 4
    6af4:	0d c0       	rjmp	.+26     	; 0x6b10 <vfprintf+0x272>
    6af6:	fb 2d       	mov	r31, r11
    6af8:	f4 60       	ori	r31, 0x04	; 4
    6afa:	bf 2e       	mov	r11, r31
    6afc:	09 c0       	rjmp	.+18     	; 0x6b10 <vfprintf+0x272>
    6afe:	34 fe       	sbrs	r3, 4
    6b00:	0a c0       	rjmp	.+20     	; 0x6b16 <vfprintf+0x278>
    6b02:	29 2f       	mov	r18, r25
    6b04:	26 60       	ori	r18, 0x06	; 6
    6b06:	b2 2e       	mov	r11, r18
    6b08:	06 c0       	rjmp	.+12     	; 0x6b16 <vfprintf+0x278>
    6b0a:	28 e0       	ldi	r18, 0x08	; 8
    6b0c:	30 e0       	ldi	r19, 0x00	; 0
    6b0e:	05 c0       	rjmp	.+10     	; 0x6b1a <vfprintf+0x27c>
    6b10:	20 e1       	ldi	r18, 0x10	; 16
    6b12:	30 e0       	ldi	r19, 0x00	; 0
    6b14:	02 c0       	rjmp	.+4      	; 0x6b1a <vfprintf+0x27c>
    6b16:	20 e1       	ldi	r18, 0x10	; 16
    6b18:	32 e0       	ldi	r19, 0x02	; 2
    6b1a:	f8 01       	movw	r30, r16
    6b1c:	b7 fe       	sbrs	r11, 7
    6b1e:	07 c0       	rjmp	.+14     	; 0x6b2e <vfprintf+0x290>
    6b20:	60 81       	ld	r22, Z
    6b22:	71 81       	ldd	r23, Z+1	; 0x01
    6b24:	82 81       	ldd	r24, Z+2	; 0x02
    6b26:	93 81       	ldd	r25, Z+3	; 0x03
    6b28:	0c 5f       	subi	r16, 0xFC	; 252
    6b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b2c:	06 c0       	rjmp	.+12     	; 0x6b3a <vfprintf+0x29c>
    6b2e:	60 81       	ld	r22, Z
    6b30:	71 81       	ldd	r23, Z+1	; 0x01
    6b32:	80 e0       	ldi	r24, 0x00	; 0
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	0e 5f       	subi	r16, 0xFE	; 254
    6b38:	1f 4f       	sbci	r17, 0xFF	; 255
    6b3a:	a3 01       	movw	r20, r6
    6b3c:	0e 94 82 36 	call	0x6d04	; 0x6d04 <__ultoa_invert>
    6b40:	88 2e       	mov	r8, r24
    6b42:	86 18       	sub	r8, r6
    6b44:	fb 2d       	mov	r31, r11
    6b46:	ff 77       	andi	r31, 0x7F	; 127
    6b48:	3f 2e       	mov	r3, r31
    6b4a:	36 fe       	sbrs	r3, 6
    6b4c:	0d c0       	rjmp	.+26     	; 0x6b68 <vfprintf+0x2ca>
    6b4e:	23 2d       	mov	r18, r3
    6b50:	2e 7f       	andi	r18, 0xFE	; 254
    6b52:	a2 2e       	mov	r10, r18
    6b54:	89 14       	cp	r8, r9
    6b56:	58 f4       	brcc	.+22     	; 0x6b6e <vfprintf+0x2d0>
    6b58:	34 fe       	sbrs	r3, 4
    6b5a:	0b c0       	rjmp	.+22     	; 0x6b72 <vfprintf+0x2d4>
    6b5c:	32 fc       	sbrc	r3, 2
    6b5e:	09 c0       	rjmp	.+18     	; 0x6b72 <vfprintf+0x2d4>
    6b60:	83 2d       	mov	r24, r3
    6b62:	8e 7e       	andi	r24, 0xEE	; 238
    6b64:	a8 2e       	mov	r10, r24
    6b66:	05 c0       	rjmp	.+10     	; 0x6b72 <vfprintf+0x2d4>
    6b68:	b8 2c       	mov	r11, r8
    6b6a:	a3 2c       	mov	r10, r3
    6b6c:	03 c0       	rjmp	.+6      	; 0x6b74 <vfprintf+0x2d6>
    6b6e:	b8 2c       	mov	r11, r8
    6b70:	01 c0       	rjmp	.+2      	; 0x6b74 <vfprintf+0x2d6>
    6b72:	b9 2c       	mov	r11, r9
    6b74:	a4 fe       	sbrs	r10, 4
    6b76:	0f c0       	rjmp	.+30     	; 0x6b96 <vfprintf+0x2f8>
    6b78:	fe 01       	movw	r30, r28
    6b7a:	e8 0d       	add	r30, r8
    6b7c:	f1 1d       	adc	r31, r1
    6b7e:	80 81       	ld	r24, Z
    6b80:	80 33       	cpi	r24, 0x30	; 48
    6b82:	21 f4       	brne	.+8      	; 0x6b8c <vfprintf+0x2ee>
    6b84:	9a 2d       	mov	r25, r10
    6b86:	99 7e       	andi	r25, 0xE9	; 233
    6b88:	a9 2e       	mov	r10, r25
    6b8a:	09 c0       	rjmp	.+18     	; 0x6b9e <vfprintf+0x300>
    6b8c:	a2 fe       	sbrs	r10, 2
    6b8e:	06 c0       	rjmp	.+12     	; 0x6b9c <vfprintf+0x2fe>
    6b90:	b3 94       	inc	r11
    6b92:	b3 94       	inc	r11
    6b94:	04 c0       	rjmp	.+8      	; 0x6b9e <vfprintf+0x300>
    6b96:	8a 2d       	mov	r24, r10
    6b98:	86 78       	andi	r24, 0x86	; 134
    6b9a:	09 f0       	breq	.+2      	; 0x6b9e <vfprintf+0x300>
    6b9c:	b3 94       	inc	r11
    6b9e:	a3 fc       	sbrc	r10, 3
    6ba0:	11 c0       	rjmp	.+34     	; 0x6bc4 <vfprintf+0x326>
    6ba2:	a0 fe       	sbrs	r10, 0
    6ba4:	06 c0       	rjmp	.+12     	; 0x6bb2 <vfprintf+0x314>
    6ba6:	b2 14       	cp	r11, r2
    6ba8:	88 f4       	brcc	.+34     	; 0x6bcc <vfprintf+0x32e>
    6baa:	28 0c       	add	r2, r8
    6bac:	92 2c       	mov	r9, r2
    6bae:	9b 18       	sub	r9, r11
    6bb0:	0e c0       	rjmp	.+28     	; 0x6bce <vfprintf+0x330>
    6bb2:	b2 14       	cp	r11, r2
    6bb4:	60 f4       	brcc	.+24     	; 0x6bce <vfprintf+0x330>
    6bb6:	b6 01       	movw	r22, r12
    6bb8:	80 e2       	ldi	r24, 0x20	; 32
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6bc0:	b3 94       	inc	r11
    6bc2:	f7 cf       	rjmp	.-18     	; 0x6bb2 <vfprintf+0x314>
    6bc4:	b2 14       	cp	r11, r2
    6bc6:	18 f4       	brcc	.+6      	; 0x6bce <vfprintf+0x330>
    6bc8:	2b 18       	sub	r2, r11
    6bca:	02 c0       	rjmp	.+4      	; 0x6bd0 <vfprintf+0x332>
    6bcc:	98 2c       	mov	r9, r8
    6bce:	21 2c       	mov	r2, r1
    6bd0:	a4 fe       	sbrs	r10, 4
    6bd2:	10 c0       	rjmp	.+32     	; 0x6bf4 <vfprintf+0x356>
    6bd4:	b6 01       	movw	r22, r12
    6bd6:	80 e3       	ldi	r24, 0x30	; 48
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6bde:	a2 fe       	sbrs	r10, 2
    6be0:	17 c0       	rjmp	.+46     	; 0x6c10 <vfprintf+0x372>
    6be2:	a1 fc       	sbrc	r10, 1
    6be4:	03 c0       	rjmp	.+6      	; 0x6bec <vfprintf+0x34e>
    6be6:	88 e7       	ldi	r24, 0x78	; 120
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	02 c0       	rjmp	.+4      	; 0x6bf0 <vfprintf+0x352>
    6bec:	88 e5       	ldi	r24, 0x58	; 88
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	b6 01       	movw	r22, r12
    6bf2:	0c c0       	rjmp	.+24     	; 0x6c0c <vfprintf+0x36e>
    6bf4:	8a 2d       	mov	r24, r10
    6bf6:	86 78       	andi	r24, 0x86	; 134
    6bf8:	59 f0       	breq	.+22     	; 0x6c10 <vfprintf+0x372>
    6bfa:	a1 fe       	sbrs	r10, 1
    6bfc:	02 c0       	rjmp	.+4      	; 0x6c02 <vfprintf+0x364>
    6bfe:	8b e2       	ldi	r24, 0x2B	; 43
    6c00:	01 c0       	rjmp	.+2      	; 0x6c04 <vfprintf+0x366>
    6c02:	80 e2       	ldi	r24, 0x20	; 32
    6c04:	a7 fc       	sbrc	r10, 7
    6c06:	8d e2       	ldi	r24, 0x2D	; 45
    6c08:	b6 01       	movw	r22, r12
    6c0a:	90 e0       	ldi	r25, 0x00	; 0
    6c0c:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6c10:	89 14       	cp	r8, r9
    6c12:	38 f4       	brcc	.+14     	; 0x6c22 <vfprintf+0x384>
    6c14:	b6 01       	movw	r22, r12
    6c16:	80 e3       	ldi	r24, 0x30	; 48
    6c18:	90 e0       	ldi	r25, 0x00	; 0
    6c1a:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6c1e:	9a 94       	dec	r9
    6c20:	f7 cf       	rjmp	.-18     	; 0x6c10 <vfprintf+0x372>
    6c22:	8a 94       	dec	r8
    6c24:	f3 01       	movw	r30, r6
    6c26:	e8 0d       	add	r30, r8
    6c28:	f1 1d       	adc	r31, r1
    6c2a:	80 81       	ld	r24, Z
    6c2c:	b6 01       	movw	r22, r12
    6c2e:	90 e0       	ldi	r25, 0x00	; 0
    6c30:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6c34:	81 10       	cpse	r8, r1
    6c36:	f5 cf       	rjmp	.-22     	; 0x6c22 <vfprintf+0x384>
    6c38:	22 20       	and	r2, r2
    6c3a:	09 f4       	brne	.+2      	; 0x6c3e <vfprintf+0x3a0>
    6c3c:	42 ce       	rjmp	.-892    	; 0x68c2 <vfprintf+0x24>
    6c3e:	b6 01       	movw	r22, r12
    6c40:	80 e2       	ldi	r24, 0x20	; 32
    6c42:	90 e0       	ldi	r25, 0x00	; 0
    6c44:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <fputc>
    6c48:	2a 94       	dec	r2
    6c4a:	f6 cf       	rjmp	.-20     	; 0x6c38 <vfprintf+0x39a>
    6c4c:	f6 01       	movw	r30, r12
    6c4e:	86 81       	ldd	r24, Z+6	; 0x06
    6c50:	97 81       	ldd	r25, Z+7	; 0x07
    6c52:	02 c0       	rjmp	.+4      	; 0x6c58 <vfprintf+0x3ba>
    6c54:	8f ef       	ldi	r24, 0xFF	; 255
    6c56:	9f ef       	ldi	r25, 0xFF	; 255
    6c58:	2b 96       	adiw	r28, 0x0b	; 11
    6c5a:	e2 e1       	ldi	r30, 0x12	; 18
    6c5c:	0c 94 5f 37 	jmp	0x6ebe	; 0x6ebe <__epilogue_restores__>

00006c60 <strnlen_P>:
    6c60:	fc 01       	movw	r30, r24
    6c62:	05 90       	lpm	r0, Z+
    6c64:	61 50       	subi	r22, 0x01	; 1
    6c66:	70 40       	sbci	r23, 0x00	; 0
    6c68:	01 10       	cpse	r0, r1
    6c6a:	d8 f7       	brcc	.-10     	; 0x6c62 <strnlen_P+0x2>
    6c6c:	80 95       	com	r24
    6c6e:	90 95       	com	r25
    6c70:	8e 0f       	add	r24, r30
    6c72:	9f 1f       	adc	r25, r31
    6c74:	08 95       	ret

00006c76 <strnlen>:
    6c76:	fc 01       	movw	r30, r24
    6c78:	61 50       	subi	r22, 0x01	; 1
    6c7a:	70 40       	sbci	r23, 0x00	; 0
    6c7c:	01 90       	ld	r0, Z+
    6c7e:	01 10       	cpse	r0, r1
    6c80:	d8 f7       	brcc	.-10     	; 0x6c78 <strnlen+0x2>
    6c82:	80 95       	com	r24
    6c84:	90 95       	com	r25
    6c86:	8e 0f       	add	r24, r30
    6c88:	9f 1f       	adc	r25, r31
    6c8a:	08 95       	ret

00006c8c <fputc>:
    6c8c:	0f 93       	push	r16
    6c8e:	1f 93       	push	r17
    6c90:	cf 93       	push	r28
    6c92:	df 93       	push	r29
    6c94:	fb 01       	movw	r30, r22
    6c96:	23 81       	ldd	r18, Z+3	; 0x03
    6c98:	21 fd       	sbrc	r18, 1
    6c9a:	03 c0       	rjmp	.+6      	; 0x6ca2 <fputc+0x16>
    6c9c:	8f ef       	ldi	r24, 0xFF	; 255
    6c9e:	9f ef       	ldi	r25, 0xFF	; 255
    6ca0:	2c c0       	rjmp	.+88     	; 0x6cfa <fputc+0x6e>
    6ca2:	22 ff       	sbrs	r18, 2
    6ca4:	16 c0       	rjmp	.+44     	; 0x6cd2 <fputc+0x46>
    6ca6:	46 81       	ldd	r20, Z+6	; 0x06
    6ca8:	57 81       	ldd	r21, Z+7	; 0x07
    6caa:	24 81       	ldd	r18, Z+4	; 0x04
    6cac:	35 81       	ldd	r19, Z+5	; 0x05
    6cae:	42 17       	cp	r20, r18
    6cb0:	53 07       	cpc	r21, r19
    6cb2:	44 f4       	brge	.+16     	; 0x6cc4 <fputc+0x38>
    6cb4:	a0 81       	ld	r26, Z
    6cb6:	b1 81       	ldd	r27, Z+1	; 0x01
    6cb8:	9d 01       	movw	r18, r26
    6cba:	2f 5f       	subi	r18, 0xFF	; 255
    6cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    6cbe:	31 83       	std	Z+1, r19	; 0x01
    6cc0:	20 83       	st	Z, r18
    6cc2:	8c 93       	st	X, r24
    6cc4:	26 81       	ldd	r18, Z+6	; 0x06
    6cc6:	37 81       	ldd	r19, Z+7	; 0x07
    6cc8:	2f 5f       	subi	r18, 0xFF	; 255
    6cca:	3f 4f       	sbci	r19, 0xFF	; 255
    6ccc:	37 83       	std	Z+7, r19	; 0x07
    6cce:	26 83       	std	Z+6, r18	; 0x06
    6cd0:	14 c0       	rjmp	.+40     	; 0x6cfa <fputc+0x6e>
    6cd2:	8b 01       	movw	r16, r22
    6cd4:	ec 01       	movw	r28, r24
    6cd6:	fb 01       	movw	r30, r22
    6cd8:	00 84       	ldd	r0, Z+8	; 0x08
    6cda:	f1 85       	ldd	r31, Z+9	; 0x09
    6cdc:	e0 2d       	mov	r30, r0
    6cde:	09 95       	icall
    6ce0:	89 2b       	or	r24, r25
    6ce2:	e1 f6       	brne	.-72     	; 0x6c9c <fputc+0x10>
    6ce4:	d8 01       	movw	r26, r16
    6ce6:	16 96       	adiw	r26, 0x06	; 6
    6ce8:	8d 91       	ld	r24, X+
    6cea:	9c 91       	ld	r25, X
    6cec:	17 97       	sbiw	r26, 0x07	; 7
    6cee:	01 96       	adiw	r24, 0x01	; 1
    6cf0:	17 96       	adiw	r26, 0x07	; 7
    6cf2:	9c 93       	st	X, r25
    6cf4:	8e 93       	st	-X, r24
    6cf6:	16 97       	sbiw	r26, 0x06	; 6
    6cf8:	ce 01       	movw	r24, r28
    6cfa:	df 91       	pop	r29
    6cfc:	cf 91       	pop	r28
    6cfe:	1f 91       	pop	r17
    6d00:	0f 91       	pop	r16
    6d02:	08 95       	ret

00006d04 <__ultoa_invert>:
    6d04:	fa 01       	movw	r30, r20
    6d06:	aa 27       	eor	r26, r26
    6d08:	28 30       	cpi	r18, 0x08	; 8
    6d0a:	51 f1       	breq	.+84     	; 0x6d60 <__ultoa_invert+0x5c>
    6d0c:	20 31       	cpi	r18, 0x10	; 16
    6d0e:	81 f1       	breq	.+96     	; 0x6d70 <__ultoa_invert+0x6c>
    6d10:	e8 94       	clt
    6d12:	6f 93       	push	r22
    6d14:	6e 7f       	andi	r22, 0xFE	; 254
    6d16:	6e 5f       	subi	r22, 0xFE	; 254
    6d18:	7f 4f       	sbci	r23, 0xFF	; 255
    6d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    6d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d1e:	af 4f       	sbci	r26, 0xFF	; 255
    6d20:	b1 e0       	ldi	r27, 0x01	; 1
    6d22:	3e d0       	rcall	.+124    	; 0x6da0 <__ultoa_invert+0x9c>
    6d24:	b4 e0       	ldi	r27, 0x04	; 4
    6d26:	3c d0       	rcall	.+120    	; 0x6da0 <__ultoa_invert+0x9c>
    6d28:	67 0f       	add	r22, r23
    6d2a:	78 1f       	adc	r23, r24
    6d2c:	89 1f       	adc	r24, r25
    6d2e:	9a 1f       	adc	r25, r26
    6d30:	a1 1d       	adc	r26, r1
    6d32:	68 0f       	add	r22, r24
    6d34:	79 1f       	adc	r23, r25
    6d36:	8a 1f       	adc	r24, r26
    6d38:	91 1d       	adc	r25, r1
    6d3a:	a1 1d       	adc	r26, r1
    6d3c:	6a 0f       	add	r22, r26
    6d3e:	71 1d       	adc	r23, r1
    6d40:	81 1d       	adc	r24, r1
    6d42:	91 1d       	adc	r25, r1
    6d44:	a1 1d       	adc	r26, r1
    6d46:	20 d0       	rcall	.+64     	; 0x6d88 <__ultoa_invert+0x84>
    6d48:	09 f4       	brne	.+2      	; 0x6d4c <__ultoa_invert+0x48>
    6d4a:	68 94       	set
    6d4c:	3f 91       	pop	r19
    6d4e:	2a e0       	ldi	r18, 0x0A	; 10
    6d50:	26 9f       	mul	r18, r22
    6d52:	11 24       	eor	r1, r1
    6d54:	30 19       	sub	r19, r0
    6d56:	30 5d       	subi	r19, 0xD0	; 208
    6d58:	31 93       	st	Z+, r19
    6d5a:	de f6       	brtc	.-74     	; 0x6d12 <__ultoa_invert+0xe>
    6d5c:	cf 01       	movw	r24, r30
    6d5e:	08 95       	ret
    6d60:	46 2f       	mov	r20, r22
    6d62:	47 70       	andi	r20, 0x07	; 7
    6d64:	40 5d       	subi	r20, 0xD0	; 208
    6d66:	41 93       	st	Z+, r20
    6d68:	b3 e0       	ldi	r27, 0x03	; 3
    6d6a:	0f d0       	rcall	.+30     	; 0x6d8a <__ultoa_invert+0x86>
    6d6c:	c9 f7       	brne	.-14     	; 0x6d60 <__ultoa_invert+0x5c>
    6d6e:	f6 cf       	rjmp	.-20     	; 0x6d5c <__ultoa_invert+0x58>
    6d70:	46 2f       	mov	r20, r22
    6d72:	4f 70       	andi	r20, 0x0F	; 15
    6d74:	40 5d       	subi	r20, 0xD0	; 208
    6d76:	4a 33       	cpi	r20, 0x3A	; 58
    6d78:	18 f0       	brcs	.+6      	; 0x6d80 <__ultoa_invert+0x7c>
    6d7a:	49 5d       	subi	r20, 0xD9	; 217
    6d7c:	31 fd       	sbrc	r19, 1
    6d7e:	40 52       	subi	r20, 0x20	; 32
    6d80:	41 93       	st	Z+, r20
    6d82:	02 d0       	rcall	.+4      	; 0x6d88 <__ultoa_invert+0x84>
    6d84:	a9 f7       	brne	.-22     	; 0x6d70 <__ultoa_invert+0x6c>
    6d86:	ea cf       	rjmp	.-44     	; 0x6d5c <__ultoa_invert+0x58>
    6d88:	b4 e0       	ldi	r27, 0x04	; 4
    6d8a:	a6 95       	lsr	r26
    6d8c:	97 95       	ror	r25
    6d8e:	87 95       	ror	r24
    6d90:	77 95       	ror	r23
    6d92:	67 95       	ror	r22
    6d94:	ba 95       	dec	r27
    6d96:	c9 f7       	brne	.-14     	; 0x6d8a <__ultoa_invert+0x86>
    6d98:	00 97       	sbiw	r24, 0x00	; 0
    6d9a:	61 05       	cpc	r22, r1
    6d9c:	71 05       	cpc	r23, r1
    6d9e:	08 95       	ret
    6da0:	9b 01       	movw	r18, r22
    6da2:	ac 01       	movw	r20, r24
    6da4:	0a 2e       	mov	r0, r26
    6da6:	06 94       	lsr	r0
    6da8:	57 95       	ror	r21
    6daa:	47 95       	ror	r20
    6dac:	37 95       	ror	r19
    6dae:	27 95       	ror	r18
    6db0:	ba 95       	dec	r27
    6db2:	c9 f7       	brne	.-14     	; 0x6da6 <__ultoa_invert+0xa2>
    6db4:	62 0f       	add	r22, r18
    6db6:	73 1f       	adc	r23, r19
    6db8:	84 1f       	adc	r24, r20
    6dba:	95 1f       	adc	r25, r21
    6dbc:	a0 1d       	adc	r26, r0
    6dbe:	08 95       	ret

00006dc0 <eeprom_read_byte>:
    6dc0:	f9 99       	sbic	0x1f, 1	; 31
    6dc2:	fe cf       	rjmp	.-4      	; 0x6dc0 <eeprom_read_byte>
    6dc4:	92 bd       	out	0x22, r25	; 34
    6dc6:	81 bd       	out	0x21, r24	; 33
    6dc8:	f8 9a       	sbi	0x1f, 0	; 31
    6dca:	99 27       	eor	r25, r25
    6dcc:	80 b5       	in	r24, 0x20	; 32
    6dce:	08 95       	ret

00006dd0 <eeprom_read_dword>:
    6dd0:	a6 e1       	ldi	r26, 0x16	; 22
    6dd2:	b0 e0       	ldi	r27, 0x00	; 0
    6dd4:	44 e0       	ldi	r20, 0x04	; 4
    6dd6:	50 e0       	ldi	r21, 0x00	; 0
    6dd8:	0c 94 35 37 	jmp	0x6e6a	; 0x6e6a <eeprom_read_blraw>

00006ddc <eeprom_read_word>:
    6ddc:	a8 e1       	ldi	r26, 0x18	; 24
    6dde:	b0 e0       	ldi	r27, 0x00	; 0
    6de0:	42 e0       	ldi	r20, 0x02	; 2
    6de2:	50 e0       	ldi	r21, 0x00	; 0
    6de4:	0c 94 35 37 	jmp	0x6e6a	; 0x6e6a <eeprom_read_blraw>

00006de8 <eeprom_update_byte>:
    6de8:	26 2f       	mov	r18, r22

00006dea <eeprom_update_r18>:
    6dea:	f9 99       	sbic	0x1f, 1	; 31
    6dec:	fe cf       	rjmp	.-4      	; 0x6dea <eeprom_update_r18>
    6dee:	92 bd       	out	0x22, r25	; 34
    6df0:	81 bd       	out	0x21, r24	; 33
    6df2:	f8 9a       	sbi	0x1f, 0	; 31
    6df4:	01 97       	sbiw	r24, 0x01	; 1
    6df6:	00 b4       	in	r0, 0x20	; 32
    6df8:	02 16       	cp	r0, r18
    6dfa:	39 f0       	breq	.+14     	; 0x6e0a <eeprom_update_r18+0x20>
    6dfc:	1f ba       	out	0x1f, r1	; 31
    6dfe:	20 bd       	out	0x20, r18	; 32
    6e00:	0f b6       	in	r0, 0x3f	; 63
    6e02:	f8 94       	cli
    6e04:	fa 9a       	sbi	0x1f, 2	; 31
    6e06:	f9 9a       	sbi	0x1f, 1	; 31
    6e08:	0f be       	out	0x3f, r0	; 63
    6e0a:	08 95       	ret

00006e0c <eeprom_update_dword>:
    6e0c:	03 96       	adiw	r24, 0x03	; 3
    6e0e:	27 2f       	mov	r18, r23
    6e10:	0e 94 f5 36 	call	0x6dea	; 0x6dea <eeprom_update_r18>
    6e14:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <eeprom_update_byte>
    6e18:	25 2f       	mov	r18, r21
    6e1a:	0e 94 f5 36 	call	0x6dea	; 0x6dea <eeprom_update_r18>
    6e1e:	24 2f       	mov	r18, r20
    6e20:	0c 94 f5 36 	jmp	0x6dea	; 0x6dea <eeprom_update_r18>

00006e24 <eeprom_update_word>:
    6e24:	01 96       	adiw	r24, 0x01	; 1
    6e26:	27 2f       	mov	r18, r23
    6e28:	0e 94 f5 36 	call	0x6dea	; 0x6dea <eeprom_update_r18>
    6e2c:	0c 94 f4 36 	jmp	0x6de8	; 0x6de8 <eeprom_update_byte>

00006e30 <eeprom_write_byte>:
    6e30:	26 2f       	mov	r18, r22

00006e32 <eeprom_write_r18>:
    6e32:	f9 99       	sbic	0x1f, 1	; 31
    6e34:	fe cf       	rjmp	.-4      	; 0x6e32 <eeprom_write_r18>
    6e36:	1f ba       	out	0x1f, r1	; 31
    6e38:	92 bd       	out	0x22, r25	; 34
    6e3a:	81 bd       	out	0x21, r24	; 33
    6e3c:	20 bd       	out	0x20, r18	; 32
    6e3e:	0f b6       	in	r0, 0x3f	; 63
    6e40:	f8 94       	cli
    6e42:	fa 9a       	sbi	0x1f, 2	; 31
    6e44:	f9 9a       	sbi	0x1f, 1	; 31
    6e46:	0f be       	out	0x3f, r0	; 63
    6e48:	01 96       	adiw	r24, 0x01	; 1
    6e4a:	08 95       	ret

00006e4c <eeprom_write_dword>:
    6e4c:	24 2f       	mov	r18, r20
    6e4e:	0e 94 19 37 	call	0x6e32	; 0x6e32 <eeprom_write_r18>
    6e52:	25 2f       	mov	r18, r21
    6e54:	0e 94 19 37 	call	0x6e32	; 0x6e32 <eeprom_write_r18>
    6e58:	0c 94 2e 37 	jmp	0x6e5c	; 0x6e5c <eeprom_write_word>

00006e5c <eeprom_write_word>:
    6e5c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <eeprom_write_byte>
    6e60:	27 2f       	mov	r18, r23
    6e62:	0c 94 19 37 	jmp	0x6e32	; 0x6e32 <eeprom_write_r18>

00006e66 <eeprom_read_block>:
    6e66:	dc 01       	movw	r26, r24
    6e68:	cb 01       	movw	r24, r22

00006e6a <eeprom_read_blraw>:
    6e6a:	fc 01       	movw	r30, r24
    6e6c:	f9 99       	sbic	0x1f, 1	; 31
    6e6e:	fe cf       	rjmp	.-4      	; 0x6e6c <eeprom_read_blraw+0x2>
    6e70:	06 c0       	rjmp	.+12     	; 0x6e7e <eeprom_read_blraw+0x14>
    6e72:	f2 bd       	out	0x22, r31	; 34
    6e74:	e1 bd       	out	0x21, r30	; 33
    6e76:	f8 9a       	sbi	0x1f, 0	; 31
    6e78:	31 96       	adiw	r30, 0x01	; 1
    6e7a:	00 b4       	in	r0, 0x20	; 32
    6e7c:	0d 92       	st	X+, r0
    6e7e:	41 50       	subi	r20, 0x01	; 1
    6e80:	50 40       	sbci	r21, 0x00	; 0
    6e82:	b8 f7       	brcc	.-18     	; 0x6e72 <eeprom_read_blraw+0x8>
    6e84:	08 95       	ret

00006e86 <__prologue_saves__>:
    6e86:	2f 92       	push	r2
    6e88:	3f 92       	push	r3
    6e8a:	4f 92       	push	r4
    6e8c:	5f 92       	push	r5
    6e8e:	6f 92       	push	r6
    6e90:	7f 92       	push	r7
    6e92:	8f 92       	push	r8
    6e94:	9f 92       	push	r9
    6e96:	af 92       	push	r10
    6e98:	bf 92       	push	r11
    6e9a:	cf 92       	push	r12
    6e9c:	df 92       	push	r13
    6e9e:	ef 92       	push	r14
    6ea0:	ff 92       	push	r15
    6ea2:	0f 93       	push	r16
    6ea4:	1f 93       	push	r17
    6ea6:	cf 93       	push	r28
    6ea8:	df 93       	push	r29
    6eaa:	cd b7       	in	r28, 0x3d	; 61
    6eac:	de b7       	in	r29, 0x3e	; 62
    6eae:	ca 1b       	sub	r28, r26
    6eb0:	db 0b       	sbc	r29, r27
    6eb2:	0f b6       	in	r0, 0x3f	; 63
    6eb4:	f8 94       	cli
    6eb6:	de bf       	out	0x3e, r29	; 62
    6eb8:	0f be       	out	0x3f, r0	; 63
    6eba:	cd bf       	out	0x3d, r28	; 61
    6ebc:	09 94       	ijmp

00006ebe <__epilogue_restores__>:
    6ebe:	2a 88       	ldd	r2, Y+18	; 0x12
    6ec0:	39 88       	ldd	r3, Y+17	; 0x11
    6ec2:	48 88       	ldd	r4, Y+16	; 0x10
    6ec4:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ec6:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ec8:	7d 84       	ldd	r7, Y+13	; 0x0d
    6eca:	8c 84       	ldd	r8, Y+12	; 0x0c
    6ecc:	9b 84       	ldd	r9, Y+11	; 0x0b
    6ece:	aa 84       	ldd	r10, Y+10	; 0x0a
    6ed0:	b9 84       	ldd	r11, Y+9	; 0x09
    6ed2:	c8 84       	ldd	r12, Y+8	; 0x08
    6ed4:	df 80       	ldd	r13, Y+7	; 0x07
    6ed6:	ee 80       	ldd	r14, Y+6	; 0x06
    6ed8:	fd 80       	ldd	r15, Y+5	; 0x05
    6eda:	0c 81       	ldd	r16, Y+4	; 0x04
    6edc:	1b 81       	ldd	r17, Y+3	; 0x03
    6ede:	aa 81       	ldd	r26, Y+2	; 0x02
    6ee0:	b9 81       	ldd	r27, Y+1	; 0x01
    6ee2:	ce 0f       	add	r28, r30
    6ee4:	d1 1d       	adc	r29, r1
    6ee6:	0f b6       	in	r0, 0x3f	; 63
    6ee8:	f8 94       	cli
    6eea:	de bf       	out	0x3e, r29	; 62
    6eec:	0f be       	out	0x3f, r0	; 63
    6eee:	cd bf       	out	0x3d, r28	; 61
    6ef0:	ed 01       	movw	r28, r26
    6ef2:	08 95       	ret

00006ef4 <__do_global_dtors>:
    6ef4:	11 e0       	ldi	r17, 0x01	; 1
    6ef6:	c8 e1       	ldi	r28, 0x18	; 24
    6ef8:	d1 e0       	ldi	r29, 0x01	; 1
    6efa:	04 c0       	rjmp	.+8      	; 0x6f04 <__do_global_dtors+0x10>
    6efc:	fe 01       	movw	r30, r28
    6efe:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__tablejump2__>
    6f02:	21 96       	adiw	r28, 0x01	; 1
    6f04:	c9 31       	cpi	r28, 0x19	; 25
    6f06:	d1 07       	cpc	r29, r17
    6f08:	c9 f7       	brne	.-14     	; 0x6efc <__do_global_dtors+0x8>
    6f0a:	f8 94       	cli

00006f0c <__stop_program>:
    6f0c:	ff cf       	rjmp	.-2      	; 0x6f0c <__stop_program>
